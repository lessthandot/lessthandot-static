<?xml version="1.0" encoding="UTF-8"?><rss version="2.0"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:atom="http://www.w3.org/2005/Atom"
	xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
	
	>
<channel>
	<title>Comments on: Serverless HTTP + Kinesis Lambdas with Offline Development</title>
	<atom:link href="/index.php/enterprisedev/cloud/serverless-http-kinesis-lambdas-with-offline-development/feed/" rel="self" type="application/rss+xml" />
	<link>/index.php/enterprisedev/cloud/serverless-http-kinesis-lambdas-with-offline-development/</link>
	<description>A Technical Community for IT Professionals</description>
	<lastBuildDate>Tue, 26 Feb 2019 12:40:14 +0000</lastBuildDate>
	<sy:updatePeriod>hourly</sy:updatePeriod>
	<sy:updateFrequency>1</sy:updateFrequency>
	<generator>https://wordpress.org/?v=4.6.1</generator>
	<item>
		<title>By: Eli Weinstock-Herman (tarwn)</title>
		<link>/index.php/enterprisedev/cloud/serverless-http-kinesis-lambdas-with-offline-development/#comment-5977400</link>
		<dc:creator><![CDATA[Eli Weinstock-Herman (tarwn)]]></dc:creator>
		<pubDate>Wed, 17 Jan 2018 17:26:37 +0000</pubDate>
		<guid isPermaLink="false">/?p=8865#comment-5977400</guid>
		<description><![CDATA[I assume you mean &quot;Why not use kestrel instead of an HTTP Lambda?&quot;?

If I wanted to put something up quickly that could receive web hook callbacks, the 3 files (package.json, serverless.yml, eventsHttp.js) would be sufficient, and maybe overkill, to easily deploy it and have the service definition and code in git. I could also build a microservices using logs and a variety of storage and ML services this way and it still be about as simple as deploying a single web app to Heroku or Azure. And it would automatically scale based on demand, rather than requiring me to pay a fixed price for fixed resources that would be too little one moment and too much the rest. Also, HTTP events are one type of things Lambdas/Functions can handle, they also provide simplified consumer logic for things like Kinesis and EventHubs and other services. Operating on a file dropped into Dropbox in Azure is pretty much just as easy as the HTTP Handler above, but something that takes some work to implement as part of a website (and I&#039;d go so far as to say that a website is the wrong kind of tool to build this).

The example above (package.json, serverless.yml, eventsHttp.js) is only lacking AWS account credentials to be 100% complete. I personally love Azure, so if I was deploying something that would be more of a site with consistent usage then I&#039;d probably shift from functions to Azure Web Sites (probably with MVC) . From there if I needed specific assemblies or to deploy lots of inter-related sites I&#039;d consider Kubernetes, if I wanted something more ActorModel and to give up some of the niceties of modern web servers I could switch to ServiceFabric, and then finally there is probably still reason I would consider physical servers but I can&#039;t think of any offhand.

So I don&#039;t look at FaaS as a replacement for some flavor of website on the Paas/IaaS/Hardware options, just another circle in the Venn diagram that gives us a different set of capabilities and tradeoffs in our toolbelt. I probably could have talked more to that in the post above, but I felt like a bunch of those posts had been written already better than I could and really was focused on helping folks with the specific case of &quot;how do you have a good local development experience w/ Kinesis functions&quot; since that was pretty painful for me.]]></description>
		<content:encoded><![CDATA[<p>I assume you mean &#8220;Why not use kestrel instead of an HTTP Lambda?&#8221;?</p>
<p>If I wanted to put something up quickly that could receive web hook callbacks, the 3 files (package.json, serverless.yml, eventsHttp.js) would be sufficient, and maybe overkill, to easily deploy it and have the service definition and code in git. I could also build a microservices using logs and a variety of storage and ML services this way and it still be about as simple as deploying a single web app to Heroku or Azure. And it would automatically scale based on demand, rather than requiring me to pay a fixed price for fixed resources that would be too little one moment and too much the rest. Also, HTTP events are one type of things Lambdas/Functions can handle, they also provide simplified consumer logic for things like Kinesis and EventHubs and other services. Operating on a file dropped into Dropbox in Azure is pretty much just as easy as the HTTP Handler above, but something that takes some work to implement as part of a website (and I&#8217;d go so far as to say that a website is the wrong kind of tool to build this).</p>
<p>The example above (package.json, serverless.yml, eventsHttp.js) is only lacking AWS account credentials to be 100% complete. I personally love Azure, so if I was deploying something that would be more of a site with consistent usage then I&#8217;d probably shift from functions to Azure Web Sites (probably with MVC) . From there if I needed specific assemblies or to deploy lots of inter-related sites I&#8217;d consider Kubernetes, if I wanted something more ActorModel and to give up some of the niceties of modern web servers I could switch to ServiceFabric, and then finally there is probably still reason I would consider physical servers but I can&#8217;t think of any offhand.</p>
<p>So I don&#8217;t look at FaaS as a replacement for some flavor of website on the Paas/IaaS/Hardware options, just another circle in the Venn diagram that gives us a different set of capabilities and tradeoffs in our toolbelt. I probably could have talked more to that in the post above, but I felt like a bunch of those posts had been written already better than I could and really was focused on helping folks with the specific case of &#8220;how do you have a good local development experience w/ Kinesis functions&#8221; since that was pretty painful for me.</p>
]]></content:encoded>
	</item>
	<item>
		<title>By: Peter</title>
		<link>/index.php/enterprisedev/cloud/serverless-http-kinesis-lambdas-with-offline-development/#comment-5977280</link>
		<dc:creator><![CDATA[Peter]]></dc:creator>
		<pubDate>Wed, 17 Jan 2018 15:06:37 +0000</pubDate>
		<guid isPermaLink="false">/?p=8865#comment-5977280</guid>
		<description><![CDATA[Why wouldnt you use kestrel to create code that can be called by web/api plain http or something RESTfull ?.]]></description>
		<content:encoded><![CDATA[<p>Why wouldnt you use kestrel to create code that can be called by web/api plain http or something RESTfull ?.</p>
]]></content:encoded>
	</item>
</channel>
</rss>
