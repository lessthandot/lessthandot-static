<?xml version="1.0" encoding="UTF-8"?><rss version="2.0"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:atom="http://www.w3.org/2005/Atom"
	xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
	
	>
<channel>
	<title>Comments on: Model-View-Presenter: Looking at Passive View</title>
	<atom:link href="/index.php/architect/designingsoftware/model-view-presenter-looking-at-passive/feed/" rel="self" type="application/rss+xml" />
	<link>/index.php/architect/designingsoftware/model-view-presenter-looking-at-passive/</link>
	<description>A Technical Community for IT Professionals</description>
	<lastBuildDate>Tue, 26 Feb 2019 12:40:14 +0000</lastBuildDate>
	<sy:updatePeriod>hourly</sy:updatePeriod>
	<sy:updateFrequency>1</sy:updateFrequency>
	<generator>https://wordpress.org/?v=4.6.1</generator>
	<item>
		<title>By: Giorgi</title>
		<link>/index.php/architect/designingsoftware/model-view-presenter-looking-at-passive/#comment-2953</link>
		<dc:creator><![CDATA[Giorgi]]></dc:creator>
		<pubDate>Wed, 28 Nov 2012 08:25:21 +0000</pubDate>
		<guid isPermaLink="false">/index.php/2010/07/model-view-presenter-looking-at-passive/#comment-2953</guid>
		<description><![CDATA[Hi, &lt;br /&gt;
&lt;br /&gt;
Isn&#039;t there any tool that would generate all the necessary code? The common functionality could be hidden in base classes but some code needs to be written again and again, and that&#039;s not quite &quot;cool&quot; :)]]></description>
		<content:encoded><![CDATA[<p>Hi, </p>
<p>Isn&#8217;t there any tool that would generate all the necessary code? The common functionality could be hidden in base classes but some code needs to be written again and again, and that&#8217;s not quite &#8220;cool&#8221; ðŸ™‚</p>
]]></content:encoded>
	</item>
	<item>
		<title>By: Eli Weinstock-Herman (tarwn)</title>
		<link>/index.php/architect/designingsoftware/model-view-presenter-looking-at-passive/#comment-2950</link>
		<dc:creator><![CDATA[Eli Weinstock-Herman (tarwn)]]></dc:creator>
		<pubDate>Fri, 20 May 2011 08:25:25 +0000</pubDate>
		<guid isPermaLink="false">/index.php/2010/07/model-view-presenter-looking-at-passive/#comment-2950</guid>
		<description><![CDATA[Funny, my issue with MVC is that it is so data entity specific that I felt it could only handle a subset of interfaces compared to something like MVP or MVVM, perhaps it depends on our perspective a bit.&lt;br /&gt;
&lt;br /&gt;
I&#039;m having difficulty understanding why we would need a dynamic number of rows in the dialog when we are editing the equivalent of a record in the database with a given number of columns. Ignoring that, though, I believe what I would do in this situation is pass a an ordered key/value set to the view property that drives the dialog. That way the dialog can dynamically build the proper number of rows to edit my object. &lt;br /&gt;
&lt;br /&gt;
The major difference between Passive View and MVC model-&gt;view communications is that in MVC the controller handles input from the user, but the view retrieves the data to display as output. In Passive View the same decision logic occurs, but handling the input and retrieving the output to display both happen in the Presenter. MVC&#039;s view is smarter, but the view exposed in Passive View can easily be implemented by a number of interfaces (json, web service, test class) and a greater portion of the logic is now unit testable.&lt;br /&gt;
&lt;br /&gt;]]></description>
		<content:encoded><![CDATA[<p>Funny, my issue with MVC is that it is so data entity specific that I felt it could only handle a subset of interfaces compared to something like MVP or MVVM, perhaps it depends on our perspective a bit.</p>
<p>I&#8217;m having difficulty understanding why we would need a dynamic number of rows in the dialog when we are editing the equivalent of a record in the database with a given number of columns. Ignoring that, though, I believe what I would do in this situation is pass a an ordered key/value set to the view property that drives the dialog. That way the dialog can dynamically build the proper number of rows to edit my object. </p>
<p>The major difference between Passive View and MVC model->view communications is that in MVC the controller handles input from the user, but the view retrieves the data to display as output. In Passive View the same decision logic occurs, but handling the input and retrieving the output to display both happen in the Presenter. MVC&#8217;s view is smarter, but the view exposed in Passive View can easily be implemented by a number of interfaces (json, web service, test class) and a greater portion of the logic is now unit testable.</p>
]]></content:encoded>
	</item>
	<item>
		<title>By: Oliver Watkins</title>
		<link>/index.php/architect/designingsoftware/model-view-presenter-looking-at-passive/#comment-2949</link>
		<dc:creator><![CDATA[Oliver Watkins]]></dc:creator>
		<pubDate>Fri, 20 May 2011 06:08:38 +0000</pubDate>
		<guid isPermaLink="false">/index.php/2010/07/model-view-presenter-looking-at-passive/#comment-2949</guid>
		<description><![CDATA[Hi,&lt;br /&gt;
&lt;br /&gt;
I have some issues to take up with the MVP pattern. MVP seems to be a valid architecture for only simple GUI interfaces.&lt;br /&gt;
&lt;br /&gt;
The fact that the model is completely seperated from the view brings up some problems that seem impossible to solve without going back to MVC.&lt;br /&gt;
&lt;br /&gt;
Consider : I have a table with X columns. I now want to build a component that is a dialog where I can edit the values in the table. In this dialog I want to have X rows (a label and text field), where I can perform editing, close it, then the table updates.&lt;br /&gt;
&lt;br /&gt;
The problem is, the View needs to know about the model in order to generate the correct number of rows. There is no way to do this without the view knowing about the model.. we could create some intermediary &#039;model-proxy&#039;, but then we are really fluffing things up.&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;]]></description>
		<content:encoded><![CDATA[<p>Hi,</p>
<p>I have some issues to take up with the MVP pattern. MVP seems to be a valid architecture for only simple GUI interfaces.</p>
<p>The fact that the model is completely seperated from the view brings up some problems that seem impossible to solve without going back to MVC.</p>
<p>Consider : I have a table with X columns. I now want to build a component that is a dialog where I can edit the values in the table. In this dialog I want to have X rows (a label and text field), where I can perform editing, close it, then the table updates.</p>
<p>The problem is, the View needs to know about the model in order to generate the correct number of rows. There is no way to do this without the view knowing about the model.. we could create some intermediary &#8216;model-proxy&#8217;, but then we are really fluffing things up.</p>
]]></content:encoded>
	</item>
	<item>
		<title>By: Eli Weinstock-Herman (tarwn)</title>
		<link>/index.php/architect/designingsoftware/model-view-presenter-looking-at-passive/#comment-2948</link>
		<dc:creator><![CDATA[Eli Weinstock-Herman (tarwn)]]></dc:creator>
		<pubDate>Tue, 04 Jan 2011 09:38:14 +0000</pubDate>
		<guid isPermaLink="false">/index.php/2010/07/model-view-presenter-looking-at-passive/#comment-2948</guid>
		<description><![CDATA[It could, and I see a lot of examples that do that. Instead of having events like that button push handled locally, the event would be bound directly to a method in the presenter. The downside is that this makes the Presenter aware of the type of interface, since there are interface- or control-specific arguments passed to the Presenter which it not only needs to accept but also operate on. A more pure method would probably be to have events defined for the the view that are more generic, handle the UI or control events and turn them into those view events. But this sounds like more work.&lt;br /&gt;
&lt;br /&gt;
I think in the end it&#039;s up to the author to decide what fits their needs the best, whether they prefer to translate to view events, bind implementation-specific events directly to the presenter, or wire event handlers to a single call in the Presenter.]]></description>
		<content:encoded><![CDATA[<p>It could, and I see a lot of examples that do that. Instead of having events like that button push handled locally, the event would be bound directly to a method in the presenter. The downside is that this makes the Presenter aware of the type of interface, since there are interface- or control-specific arguments passed to the Presenter which it not only needs to accept but also operate on. A more pure method would probably be to have events defined for the the view that are more generic, handle the UI or control events and turn them into those view events. But this sounds like more work.</p>
<p>I think in the end it&#8217;s up to the author to decide what fits their needs the best, whether they prefer to translate to view events, bind implementation-specific events directly to the presenter, or wire event handlers to a single call in the Presenter.</p>
]]></content:encoded>
	</item>
	<item>
		<title>By: Brian</title>
		<link>/index.php/architect/designingsoftware/model-view-presenter-looking-at-passive/#comment-2947</link>
		<dc:creator><![CDATA[Brian]]></dc:creator>
		<pubDate>Mon, 03 Jan 2011 15:03:21 +0000</pubDate>
		<guid isPermaLink="false">/index.php/2010/07/model-view-presenter-looking-at-passive/#comment-2947</guid>
		<description><![CDATA[I was wondering how dumb does the view needs to be, if it&#039;s truly passive shouldn&#039;t the btnSearch_Click only tell presenter that the search button was clicked rather than being smart enough to have the presenter perform a product search?]]></description>
		<content:encoded><![CDATA[<p>I was wondering how dumb does the view needs to be, if it&#8217;s truly passive shouldn&#8217;t the btnSearch_Click only tell presenter that the search button was clicked rather than being smart enough to have the presenter perform a product search?</p>
]]></content:encoded>
	</item>
	<item>
		<title>By: Eli Weinstock-Herman (tarwn)</title>
		<link>/index.php/architect/designingsoftware/model-view-presenter-looking-at-passive/#comment-2952</link>
		<dc:creator><![CDATA[Eli Weinstock-Herman (tarwn)]]></dc:creator>
		<pubDate>Wed, 13 Oct 2010 08:00:50 +0000</pubDate>
		<guid isPermaLink="false">/index.php/2010/07/model-view-presenter-looking-at-passive/#comment-2952</guid>
		<description><![CDATA[Richard, if you want you could start a forum post and attach a zip copy of the project (or a URL if the zip is too large) and we could take a look. Or you can look at Robert&#039;s linked examples above.]]></description>
		<content:encoded><![CDATA[<p>Richard, if you want you could start a forum post and attach a zip copy of the project (or a URL if the zip is too large) and we could take a look. Or you can look at Robert&#8217;s linked examples above.</p>
]]></content:encoded>
	</item>
	<item>
		<title>By: Richard Guevara</title>
		<link>/index.php/architect/designingsoftware/model-view-presenter-looking-at-passive/#comment-2951</link>
		<dc:creator><![CDATA[Richard Guevara]]></dc:creator>
		<pubDate>Wed, 13 Oct 2010 07:03:33 +0000</pubDate>
		<guid isPermaLink="false">/index.php/2010/07/model-view-presenter-looking-at-passive/#comment-2951</guid>
		<description><![CDATA[Hi Eli,&lt;br /&gt;
&lt;br /&gt;
Im actually starting to learch MVP and I found your article to be helpful. Ive created a sample project and I dont know if I did it correctly. &lt;br /&gt;
&lt;br /&gt;
Richard.]]></description>
		<content:encoded><![CDATA[<p>Hi Eli,</p>
<p>Im actually starting to learch MVP and I found your article to be helpful. Ive created a sample project and I dont know if I did it correctly. </p>
<p>Richard.</p>
]]></content:encoded>
	</item>
	<item>
		<title>By: Eli Weinstock-Herman (tarwn)</title>
		<link>/index.php/architect/designingsoftware/model-view-presenter-looking-at-passive/#comment-2955</link>
		<dc:creator><![CDATA[Eli Weinstock-Herman (tarwn)]]></dc:creator>
		<pubDate>Wed, 11 Aug 2010 20:58:55 +0000</pubDate>
		<guid isPermaLink="false">/index.php/2010/07/model-view-presenter-looking-at-passive/#comment-2955</guid>
		<description><![CDATA[In this case the View is passing an instance/implementation of the Model to the Presenter because I didn&#039;t want to add logic to do dependency injection. I want the presentation logic to be uncaring and unaware of whether the model instance it is interacting with is a web service facade, a super-basic quick-and-dirty implementation like I actually used, a domain driven model, or a dummy class to return very controlled outputs for unit testing. Dependency injection using something like StructureMap or Windsor would be among the best solutions, a middle-of-the-road solution might be a handmade DI class to orchestrate creation of the right model(s) without the extra weight of a full framework.]]></description>
		<content:encoded><![CDATA[<p>In this case the View is passing an instance/implementation of the Model to the Presenter because I didn&#8217;t want to add logic to do dependency injection. I want the presentation logic to be uncaring and unaware of whether the model instance it is interacting with is a web service facade, a super-basic quick-and-dirty implementation like I actually used, a domain driven model, or a dummy class to return very controlled outputs for unit testing. Dependency injection using something like StructureMap or Windsor would be among the best solutions, a middle-of-the-road solution might be a handmade DI class to orchestrate creation of the right model(s) without the extra weight of a full framework.</p>
]]></content:encoded>
	</item>
	<item>
		<title>By: Brian Wilkins</title>
		<link>/index.php/architect/designingsoftware/model-view-presenter-looking-at-passive/#comment-2954</link>
		<dc:creator><![CDATA[Brian Wilkins]]></dc:creator>
		<pubDate>Wed, 11 Aug 2010 16:34:32 +0000</pubDate>
		<guid isPermaLink="false">/index.php/2010/07/model-view-presenter-looking-at-passive/#comment-2954</guid>
		<description><![CDATA[My question is why does the View even pass the model to the Presenter. The Presenter should know the model, the view should be as dumb as possible IMHO.]]></description>
		<content:encoded><![CDATA[<p>My question is why does the View even pass the model to the Presenter. The Presenter should know the model, the view should be as dumb as possible IMHO.</p>
]]></content:encoded>
	</item>
	<item>
		<title>By: Eli Weinstock-Herman (tarwn)</title>
		<link>/index.php/architect/designingsoftware/model-view-presenter-looking-at-passive/#comment-2957</link>
		<dc:creator><![CDATA[Eli Weinstock-Herman (tarwn)]]></dc:creator>
		<pubDate>Sat, 17 Jul 2010 09:34:38 +0000</pubDate>
		<guid isPermaLink="false">/index.php/2010/07/model-view-presenter-looking-at-passive/#comment-2957</guid>
		<description><![CDATA[I considered (several times) including the sample code, but I had more I wanted to do before releasing it (a few more presenter function, a service and dummy model, some unit tests). It sounds like you managed to add a bit more capability and functions on yours. Headed over to github now to take a look at your project. :)]]></description>
		<content:encoded><![CDATA[<p>I considered (several times) including the sample code, but I had more I wanted to do before releasing it (a few more presenter function, a service and dummy model, some unit tests). It sounds like you managed to add a bit more capability and functions on yours. Headed over to github now to take a look at your project. ðŸ™‚</p>
]]></content:encoded>
	</item>
</channel>
</rss>
