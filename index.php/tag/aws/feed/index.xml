<?xml version="1.0" encoding="UTF-8"?><rss version="2.0"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:atom="http://www.w3.org/2005/Atom"
	xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
	xmlns:slash="http://purl.org/rss/1.0/modules/slash/"
	>

<channel>
	<title>aws &#8211; LessthanDot</title>
	<atom:link href="/index.php/tag/aws/feed/" rel="self" type="application/rss+xml" />
	<link>/</link>
	<description>A Technical Community for IT Professionals</description>
	<lastBuildDate>Sat, 09 Mar 2019 12:50:36 +0000</lastBuildDate>
	<language>en-US</language>
	<sy:updatePeriod>hourly</sy:updatePeriod>
	<sy:updateFrequency>1</sy:updateFrequency>
	<generator>https://wordpress.org/?v=4.6.1</generator>
	<item>
		<title>Streaming Alerts using AWS Lambda, Kinesis, and DynamoDB</title>
		<link>/index.php/enterprisedev/cloud/streaming-alerts-using-aws-lambda-kinesis-and-dynamodb/</link>
		<comments>/index.php/enterprisedev/cloud/streaming-alerts-using-aws-lambda-kinesis-and-dynamodb/#respond</comments>
		<pubDate>Tue, 23 Jan 2018 18:06:36 +0000</pubDate>
		<dc:creator><![CDATA[Eli Weinstock-Herman (tarwn)]]></dc:creator>
				<category><![CDATA[Cloud]]></category>
		<category><![CDATA[aws]]></category>
		<category><![CDATA[DynamoDB]]></category>
		<category><![CDATA[Kinesis]]></category>
		<category><![CDATA[lambda]]></category>
		<category><![CDATA[node.js]]></category>
		<category><![CDATA[Serverless]]></category>

		<guid isPermaLink="false">/?p=8898</guid>
		<description><![CDATA[Recently I was talking to some friends about alerting on complex streaming data. Between some past event processing work we had done and earlier experience aggregating real-time manufacturing data, I was thinking a lot about projecting and evaluating results as we go versus querying the for results on some frequency. It seemed like a realistic [&#8230;]]]></description>
				<content:encoded><![CDATA[<p>Recently I was talking to some friends about alerting on complex streaming data. Between some past event processing work we had done and earlier experience aggregating real-time manufacturing data, I was thinking a lot about projecting and evaluating results as we go versus querying the for results on some frequency. It seemed like a realistic approach and I couldn&#8217;t stop thinking about it, so I decided to prototype the pieces that I was least familiar with. </p>
<p>The idea is based on one that is used frequently in CQRS and I&#8217;m far from the first to have it, professional tools like <a href="https://spark.apache.org/">Apache Spark</a> and <a href="https://aws.amazon.com/kinesis/data-analytics/">Amazon Kinesis Data Analytics</a> support this idea of a continuous query over time, but part of the driver was also the desire to support user-defined rules in a multi-tenant environment and see how that would impact my design thinking as I prototyped.</p>
<div style="border: 1px solid #eeeeee; border-left: 8px solid #eeeeee; margin: .5em 0; padding: 1em;">
<b>Examples:</b></p>
<ul>
<li><a href="https://docs.aws.amazon.com/kinesisanalytics/latest/dev/app-simple-alerts.html">Kinesis Analytics: Stock Prices Changes &gt; 1%</a></li>
<li><a href="https://gallery.cortanaintelligence.com/Tutorial/Using-Azure-Stream-Analytics-for-Real-time-fraud-detection-2">Azure Analytics: Detecting SIM fraud</a></li>
</div>
<p>It pushed me to learn some new (to me) things, so I thought I would share what I did and perhaps some of this will be helpful or interesting to others as well. </p>
<h2>Just Enough Prototyping w/ Lambdas, Kinesis, and DynamoDB</h2>
<p>So I set out to build just enough of a prototype to answer the unknowns, creating a small serverless application that receives a stream of events for 2 clients that each have 5 machines that change state simultaneously (warming up, running, shut down) so I could experiment with rules with different criteria and get a feel for how complex this would be.</p>
<div id="attachment_8900" style="width: 718px" class="wp-caption aligncenter"><img src="/wp-content/uploads/2018/01/AnalyticsOverview.png" alt="Analytics Overview" width="708" height="608" class="size-full wp-image-8900" srcset="/wp-content/uploads/2018/01/AnalyticsOverview.png 708w, /wp-content/uploads/2018/01/AnalyticsOverview-300x258.png 300w" sizes="(max-width: 708px) 100vw, 708px" /><p class="wp-caption-text">Analytics Overview</p></div>
<p>I would use a fake front-end to manage some fake &#8220;machines&#8221; for 2 &#8220;clients&#8221;, that would change state occasionally and publish those events. The fake site would push those events into the beginning of my real prototype, an <a href="https://aws.amazon.com/kinesis/">Amazon Kinesis</a> stream for events. An <a href="https://aws.amazon.com/lambda/">AWS Lambda</a> function, the &#8220;Rule Processor&#8221;, would be triggered by a batch of events on the stream. It would load the appropriate rules out of <A href="https://aws.amazon.com/dynamodb/">DynamoDB</a> for each client, evaluate which rules each event applies to, then combine that with previously cached events from DynamoDB and evaluate whether the rule is satisfied. If so, an alert would be published to the Kinesis Alerts Stream. Further downstream, an &#8220;Alerts Processor&#8221; function would receive those alerts and, in a real system, decide what types of notifications were necessary.</p>
<h2>Rules and DynamoDB Store</h2>
<p>The buckets of data in AWS can be thought of as query results that I am constantly updating for each event that comes in.</p>
<p><strong>Example Event:</strong></p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="javascript"><thead><tr><td colspan="2"  class="head">Javascript</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
</pre></td><td class="de1"><pre class="de1"><span class="br0">&#123;</span> 
&nbsp; &nbsp; <span class="st0">&quot;eventType&quot;</span><span class="sy0">:</span> <span class="st0">&quot;machineStatusChange&quot;</span><span class="sy0">,</span> 
&nbsp; &nbsp; <span class="st0">&quot;state&quot;</span><span class="sy0">:</span> <span class="st0">&quot;stopped&quot;</span><span class="sy0">,</span> 
&nbsp; &nbsp; <span class="st0">&quot;clientId&quot;</span><span class="sy0">:</span> <span class="st0">&quot;client-01&quot;</span><span class="sy0">,</span> 
&nbsp; &nbsp; <span class="st0">&quot;machineId&quot;</span><span class="sy0">:</span> <span class="st0">&quot;machine-01&quot;</span>
<span class="br0">&#125;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">{ 
    "eventType": "machineStatusChange", 
    "state": "stopped", 
    "clientId": "client-01", 
    "machineId": "machine-01"
}</pre></div></div>

<p><strong>Example Rule:</strong></p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="javascript"><thead><tr><td colspan="2"  class="head">Javascript</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
</pre></td><td class="de1"><pre class="de1"><span class="co1">// alert when all machines enter stopping state</span>
<span class="kw1">new</span> Rule<span class="br0">&#40;</span><span class="br0">&#123;</span>
&nbsp; &nbsp; ruleId<span class="sy0">:</span> <span class="st0">'hardcoded-rule-02'</span><span class="sy0">,</span>
&nbsp; &nbsp; clientId<span class="sy0">:</span> <span class="st0">&quot;client-01&quot;</span><span class="sy0">,</span>
&nbsp; &nbsp; where<span class="sy0">:</span> <span class="br0">&#91;</span><span class="br0">&#123;</span> <span class="st0">'property'</span><span class="sy0">:</span> <span class="st0">'machineId'</span><span class="sy0">,</span> <span class="st0">'equals'</span><span class="sy0">:</span> <span class="st0">'*'</span> <span class="br0">&#125;</span><span class="br0">&#93;</span><span class="sy0">,</span>
&nbsp; &nbsp; partitionBy<span class="sy0">:</span> <span class="br0">&#91;</span><span class="st0">'machineId'</span><span class="br0">&#93;</span><span class="sy0">,</span>
&nbsp; &nbsp; evaluate<span class="sy0">:</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; type<span class="sy0">:</span> <span class="st0">'all'</span><span class="sy0">,</span>
&nbsp; &nbsp; &nbsp; &nbsp; having<span class="sy0">:</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; calc<span class="sy0">:</span> <span class="st0">'latest'</span><span class="sy0">,</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; property<span class="sy0">:</span> <span class="st0">'state'</span><span class="sy0">,</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; equals<span class="sy0">:</span> <span class="st0">'stopped'</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp; &nbsp; <span class="br0">&#125;</span>
<span class="br0">&#125;</span><span class="br0">&#41;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">// alert when all machines enter stopping state
new Rule({
    ruleId: 'hardcoded-rule-02',
    clientId: "client-01",
    where: [{ 'property': 'machineId', 'equals': '*' }],
    partitionBy: ['machineId'],
    evaluate: {
        type: 'all',
        having: {
            calc: 'latest',
            property: 'state',
            equals: 'stopped'
        }
    }
})</pre></div></div>

<p>I wouldn&#8217;t expect an end user to enter a rule like this and would probably rework the structure if this was intended to be a real system, but it is good enough to let me resolve the bigger unknowns around processing events and partitioning data.</p>
<h2>Implementation</h2>
<p>I used the <a href="https://serverless.com/">serverless</a> platform to define and build these functions, running locally with a combination of <a href="https://github.com/dherault/serverless-offline">serverless-offline</a>, <a href="https://github.com/mhart/kinesalite">kinesalite</a>, <a href="https://github.com/mhart/dynalite">dynalite</a> and some tooling I cooked up to run kinesis functions locally (see <a href="/index.php/enterprisedev/cloud/serverless-http-kinesis-lambdas-with-offline-development/" title="Prior Post: Serverless HTTP + Kinesis Lambdas with Offline Development">Serverless HTTP + Kinesis Lambdas with Offline Development</a>). I also used <a href="https://wallabyjs.com/">wallaby.js</a> heavily to give me fast, inline feedback with unit tests inside larger iterations of manual testing with the <a href="https://expressjs.com/">express</a> front-end I bolted into another HTTP Lambda.</p>
<p>The code can be found here: <a href="https://github.com/tarwn/serverless-eventing-analytics">github: tarwn/serverless-eventing-analytics</a></p>
<p>The core of the system is the &#8220;Rule Processor&#8221;:</p>
<div id="attachment_8901" style="width: 463px" class="wp-caption aligncenter"><img src="/wp-content/uploads/2018/01/RuleProcessor.png" alt="Rule Processor Logic" width="453" height="624" class="size-full wp-image-8901" srcset="/wp-content/uploads/2018/01/RuleProcessor.png 453w, /wp-content/uploads/2018/01/RuleProcessor-218x300.png 218w" sizes="(max-width: 453px) 100vw, 453px" /><p class="wp-caption-text">Rule Processor Logic</p></div>
<p>The Rule Processor is triggered by a batch of events from Kinesis:</p>
<ul>
<li>Extract the event data from the batch</li>
<li>Group them by Client</li>
<li>For Each Client&#8217;s group of events:
<ul>
<li>Load the client&#8217;s rules</li>
<li>Create result buckets for each rule and add applicable events to it</li>
<li>Load past result data from DynamoDB and append local result data</li>
<li>Evaluate rule conditions and output any alerts</li>
</ul>
</li>
<li>Publish the collected alerts to the Alerts Kinesis Stream</li>
</ul>
<p>Each of the &#8220;Event x Rule&#8221; result buckets can be thought of as the results of a query we&#8217;re running continuously as events flow in (which is about the time I realized I was duplicating work a bunch of much smarter folks had put into stream analytics packages above). So if I have 6 rules that care about machine events and 1 event comes in for &#8220;machineStatusChange&#8221; on &#8220;machine-01&#8221;, then I&#8217;ll add that event to all 6 buckets individually (storage is cheap).</p>
<p>The rules are responsible for generating their own unique result name, which by convention is {clientId}/rules/{rule id}/{where clause specific bits}. You can see more in <a href="https://github.com/tarwn/serverless-eventing-analytics/blob/master/functions/ruleProcessor/lib/rule.js">/functions/ruleProcessor/lib/rule.js</a> .</p>
<p>The function code is a slightly messier version of the steps above:</p>
<p>/functions/ruleProcessor/handler.js (<a href="https://github.com/tarwn/serverless-eventing-analytics/blob/master/functions/ruleProcessor/handler.js">github</a>)</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="javascript"><thead><tr><td colspan="2"  class="head">Javascript</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
</pre></td><td class="de1"><pre class="de1">module.<span class="me1">exports</span>.<span class="me1">streamProcessor</span> <span class="sy0">=</span> <span class="br0">&#40;</span>kinesisEvent<span class="sy0">,</span> context<span class="sy0">,</span> callback<span class="br0">&#41;</span> <span class="sy0">=&gt;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; <span class="kw1">const</span> events <span class="sy0">=</span> helper.<span class="me1">extractEventsFromKinesisEvent</span><span class="br0">&#40;</span>kinesisEvent<span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; <span class="kw1">const</span> eventGroups <span class="sy0">=</span> helper.<span class="me1">groupEventsByClient</span><span class="br0">&#40;</span>events<span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; Promise.<span class="me1">all</span><span class="br0">&#40;</span>eventGroups.<span class="me1">map</span><span class="br0">&#40;</span><span class="br0">&#40;</span>group<span class="br0">&#41;</span> <span class="sy0">=&gt;</span> evaluateAndStore<span class="br0">&#40;</span>group<span class="br0">&#41;</span><span class="br0">&#41;</span><span class="br0">&#41;</span>
&nbsp; &nbsp; <span class="co1">// …</span>
&nbsp; &nbsp; .<span class="me1">then</span><span class="br0">&#40;</span><span class="br0">&#40;</span>nestedAlerts<span class="br0">&#41;</span> <span class="sy0">=&gt;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">var</span> alerts <span class="sy0">=</span> flatten<span class="br0">&#40;</span>nestedAlerts<span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">const</span> publishAlerts <span class="sy0">=</span> alerts.<span class="me1">map</span><span class="br0">&#40;</span><span class="br0">&#40;</span>alert<span class="br0">&#41;</span> <span class="sy0">=&gt;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">return</span> publishAlert<span class="br0">&#40;</span>alert<span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">return</span> Promise.<span class="me1">all</span><span class="br0">&#40;</span>publishAlerts<span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; <span class="br0">&#125;</span><span class="br0">&#41;</span>
&nbsp; &nbsp; <span class="co1">// …</span>
<span class="br0">&#125;</span><span class="sy0">;</span>
&nbsp;
<span class="kw1">function</span> evaluateAndStore<span class="br0">&#40;</span>eventGroup<span class="br0">&#41;</span><span class="br0">&#123;</span>
&nbsp; &nbsp; <span class="kw1">const</span> clientRules <span class="sy0">=</span> rules.<span class="kw1">get</span><span class="br0">&#40;</span>eventGroup.<span class="me1">clientId</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; <span class="kw1">const</span> localResults <span class="sy0">=</span> helper.<span class="me1">applyRules</span><span class="br0">&#40;</span>clientRules<span class="sy0">,</span> eventGroup<span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; <span class="co1">// open per-rule results to merge with stored results and evaluate for alert</span>
&nbsp; &nbsp; <span class="kw1">return</span> Promise.<span class="me1">all</span><span class="br0">&#40;</span>localResults.<span class="me1">map</span><span class="br0">&#40;</span><span class="br0">&#40;</span>result<span class="br0">&#41;</span> <span class="sy0">=&gt;</span> <span class="br0">&#123;</span> 
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">const</span> appliedRule <span class="sy0">=</span> clientRules.<span class="me1">find</span><span class="br0">&#40;</span><span class="br0">&#40;</span>cr<span class="br0">&#41;</span> <span class="sy0">=&gt;</span> cr.<span class="me1">ruleId</span> <span class="sy0">=</span> result.<span class="me1">ruleId</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">return</span> results.<span class="me1">applyLocalResultToStoredResult</span><span class="br0">&#40;</span>result<span class="sy0">,</span> appliedRule<span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; .<span class="me1">then</span><span class="br0">&#40;</span><span class="br0">&#40;</span>completeResult<span class="br0">&#41;</span> <span class="sy0">=&gt;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">if</span> <span class="br0">&#40;</span>appliedRule.<span class="me1">meetsConditionsFor</span><span class="br0">&#40;</span>completeResult<span class="br0">&#41;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span> 
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; console.<span class="me1">log</span><span class="br0">&#40;</span>`ALERTED <span class="kw1">for</span> $<span class="br0">&#123;</span>completeResult.<span class="me1">uniqueResultKey</span><span class="br0">&#125;</span>`<span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">return</span> appliedRule.<span class="me1">getAlertFor</span><span class="br0">&#40;</span>completeResult<span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">else</span><span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; console.<span class="me1">log</span><span class="br0">&#40;</span>`No alerts <span class="kw1">for</span> $<span class="br0">&#123;</span>completeResult.<span class="me1">uniqueResultKey</span><span class="br0">&#125;</span>`<span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">return</span> <span class="kw2">null</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; <span class="br0">&#125;</span><span class="br0">&#41;</span><span class="br0">&#41;</span>
&nbsp; &nbsp; .<span class="me1">then</span><span class="br0">&#40;</span><span class="br0">&#40;</span>nestedAlerts<span class="br0">&#41;</span> <span class="sy0">=&gt;</span> flatten<span class="br0">&#40;</span>nestedAlerts<span class="br0">&#41;</span><span class="br0">&#41;</span><span class="sy0">;</span>
<span class="br0">&#125;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">module.exports.streamProcessor = (kinesisEvent, context, callback) =&gt; {
    const events = helper.extractEventsFromKinesisEvent(kinesisEvent);
    const eventGroups = helper.groupEventsByClient(events);

    Promise.all(eventGroups.map((group) =&gt; evaluateAndStore(group)))
    // …
    .then((nestedAlerts) =&gt; {
        var alerts = flatten(nestedAlerts);

        const publishAlerts = alerts.map((alert) =&gt; {
            return publishAlert(alert);
        });
        return Promise.all(publishAlerts);
    })
    // …
};

function evaluateAndStore(eventGroup){
    const clientRules = rules.get(eventGroup.clientId);
    const localResults = helper.applyRules(clientRules, eventGroup);

    // open per-rule results to merge with stored results and evaluate for alert
    return Promise.all(localResults.map((result) =&gt; { 
        const appliedRule = clientRules.find((cr) =&gt; cr.ruleId = result.ruleId);
        return results.applyLocalResultToStoredResult(result, appliedRule)
            .then((completeResult) =&gt; {
                if (appliedRule.meetsConditionsFor(completeResult)) { 
                    console.log(`ALERTED for ${completeResult.uniqueResultKey}`);
                    return appliedRule.getAlertFor(completeResult);
                }
                else{
                    console.log(`No alerts for ${completeResult.uniqueResultKey}`);
                    return null;
                }
            });
    }))
    .then((nestedAlerts) =&gt; flatten(nestedAlerts));
}</pre></div></div>

<p>When events start flowing through, we can see data getting loaded and applied for each of those rules. Client-02 alerts when any machine enters a stopped state (as opposed to all machines, like client-01 above), so we can see </p>
<div id="attachment_8902" style="width: 837px" class="wp-caption aligncenter"><img src="/wp-content/uploads/2018/01/RuleProcessorOutput.png" alt="Rule Processor Output" width="827" height="255" class="size-full wp-image-8902" srcset="/wp-content/uploads/2018/01/RuleProcessorOutput.png 827w, /wp-content/uploads/2018/01/RuleProcessorOutput-300x93.png 300w, /wp-content/uploads/2018/01/RuleProcessorOutput-768x237.png 768w" sizes="(max-width: 827px) 100vw, 827px" /><p class="wp-caption-text">Rule Processor Output</p></div>
<p>You can run this yourself by cloning the <a href="https://github.com/tarwn/serverless-eventing-analytics">github repo</a>, running <code>npm run offline</code>, and then opening your browser to <a href="http://localhost:3000/">http://localhost:3000/</a>.</p>
<h2>Next Steps</h2>
<p>This proved out the big question I had, and maybe helped some folks with running Kinesis functions locally (previous post), so I&#8217;m calling it a win. If I were building this for production, the next steps would be to continue making the rules richer, figure out how to age data out of the result set I&#8217;m storing in DynamoDB, and start building an interface that would allow you to create and store a rule on your own. Another big question would be whether I also need some sort of regular event (second? Minute) to re-evaluate rules for data to fall off or for queries that want to rely on the continued state of a value without needing new events to come in and restart it (the machine is still running, still running, still running…). </p>
]]></content:encoded>
			<wfw:commentRss>/index.php/enterprisedev/cloud/streaming-alerts-using-aws-lambda-kinesis-and-dynamodb/feed/</wfw:commentRss>
		<slash:comments>0</slash:comments>
		</item>
		<item>
		<title>Bring SQL Server databases Online or Offline when running on Amazon RDS</title>
		<link>/index.php/datamgmt/dbadmin/bring-sql-server-databases-online/</link>
		<comments>/index.php/datamgmt/dbadmin/bring-sql-server-databases-online/#comments</comments>
		<pubDate>Fri, 22 Mar 2013 10:25:00 +0000</pubDate>
		<dc:creator><![CDATA[SQLDenis]]></dc:creator>
				<category><![CDATA[Database Administration]]></category>
		<category><![CDATA[Microsoft SQL Server]]></category>
		<category><![CDATA[Microsoft SQL Server Admin]]></category>
		<category><![CDATA[amazon web services]]></category>
		<category><![CDATA[aws]]></category>
		<category><![CDATA[cloud]]></category>
		<category><![CDATA[rds]]></category>

		<guid isPermaLink="false">/index.php/2013/03/bring-sql-server-databases-online/</guid>
		<description><![CDATA[To bring a SQL Server database online or offline you can use a command like the following if your database is named test.

ALTER DATABASE test SET OFFLINE;

ALTER DATABASE test SET ONLINE;

When running SQL Server on Amazon's Relational Database S&#8230;]]></description>
				<content:encoded><![CDATA[<p>To bring a SQL Server database online or offline you can use a command like the following if your database is named test.</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
</pre></td><td class="de1"><pre class="de1"><span class="kw1">ALTER</span> <span class="kw1">DATABASE</span> test <span class="kw1">SET</span> OFFL<span class="sy0">IN</span>E;
&nbsp;
<span class="kw1">ALTER</span> <span class="kw1">DATABASE</span> test <span class="kw1">SET</span> ONL<span class="sy0">IN</span>E;</pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">ALTER DATABASE test SET OFFLINE;

ALTER DATABASE test SET ONLINE;</pre></div></div>

<p>When running SQL Server on Amazon&#8217;s Relational Database Service it is done a little different. While you can use the command above to take the database offline, you can&#8217;t use the command to bring the database online.</p>
<p>I you have a database name test and you execute the following it will work</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
</pre></td><td class="de1"><pre class="de1"><span class="kw1">ALTER</span> <span class="kw1">DATABASE</span> test <span class="kw1">SET</span> OFFL<span class="sy0">IN</span>E</pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">ALTER DATABASE test SET OFFLINE</pre></div></div>

<p>You can verify this by running the following</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
</pre></td><td class="de1"><pre class="de1"><span class="kw1">USE</span> test
GO</pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">USE test
GO</pre></div></div>

<p>You get the following error</p>
<p><em>Msg 942, Level 14, State 4, Line 1<br />
Database &#8216;test&#8217; cannot be opened because it is offline.</em></p>
<p>If you try running the following command to bring the database online</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
</pre></td><td class="de1"><pre class="de1"><span class="kw1">ALTER</span> <span class="kw1">DATABASE</span> test <span class="kw1">SET</span> ONL<span class="sy0">IN</span>E;</pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">ALTER DATABASE test SET ONLINE;</pre></div></div>

<p>Now you get this error</p>
<p><em>Msg 5011, Level 14, State 9, Line 1<br />
User does not have permission to alter database &#8216;test&#8217;, the database does not exist, or the database is not in a state that allows access checks.<br />
Msg 5069, Level 16, State 1, Line 1<br />
ALTER DATABASE statement failed.</em></p>
<p>So what can you do? RDS has a special stored procedure that will bring the databse online, the name of this stored procedure is <code>rdsadmin.dbo.rds_set_database_online</code></p>
<p>Here is how you use it</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
</pre></td><td class="de1"><pre class="de1"><span class="kw1">EXEC</span> rdsadmin.<span class="me1">dbo</span>.<span class="me1">rds_set_database_online</span> &nbsp;<span class="st0">'test'</span>
GO</pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">EXEC rdsadmin.dbo.rds_set_database_online  'test'
GO</pre></div></div>

<p>Now you can use the test database again</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
</pre></td><td class="de1"><pre class="de1"><span class="kw1">USE</span> test
GO</pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">USE test
GO</pre></div></div>

<p>See, simple, you just have to be aware of these differences</p>
]]></content:encoded>
			<wfw:commentRss>/index.php/datamgmt/dbadmin/bring-sql-server-databases-online/feed/</wfw:commentRss>
		<slash:comments>4</slash:comments>
		</item>
		<item>
		<title>Turning on Optimize for Ad hoc Workloads, Ad Hoc Distributed Queries and more on a AWS RDS SQL Server Instance</title>
		<link>/index.php/datamgmt/dbadmin/turning-on-optimize-for-ad/</link>
		<comments>/index.php/datamgmt/dbadmin/turning-on-optimize-for-ad/#comments</comments>
		<pubDate>Thu, 21 Mar 2013 15:39:00 +0000</pubDate>
		<dc:creator><![CDATA[SQLDenis]]></dc:creator>
				<category><![CDATA[Database Administration]]></category>
		<category><![CDATA[Microsoft SQL Server Admin]]></category>
		<category><![CDATA[amazon web services]]></category>
		<category><![CDATA[aws]]></category>
		<category><![CDATA[cloud]]></category>
		<category><![CDATA[rds]]></category>

		<guid isPermaLink="false">/index.php/2013/03/turning-on-optimize-for-ad/</guid>
		<description><![CDATA[There are several advanced options that you can modify in SQL Server.If you want to turn on optimize for ad hoc workloads in SQL Server, one way is to run the following scripts

EXEC sys.sp_configure N'optimize for ad hoc workloads', N'1'
RECONFIGURE&#8230;]]></description>
				<content:encoded><![CDATA[<p>There are several advanced options that you can modify in SQL Server. If you want to turn on optimize for ad hoc workloads in SQL Server, you can run the following script</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
</pre></td><td class="de1"><pre class="de1"><span class="kw1">EXEC</span> sys.<span class="kw3">sp_configure</span> N<span class="st0">'optimize for ad hoc workloads'</span>, N<span class="st0">'1'</span>
<span class="kw1">RECONFIGURE</span> <span class="kw1">WITH</span> OVERRIDE
GO</pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">EXEC sys.sp_configure N'optimize for ad hoc workloads', N'1'
RECONFIGURE WITH OVERRIDE
GO</pre></div></div>

<p>If you want to use OPENROWSET, you can run the following</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
</pre></td><td class="de1"><pre class="de1"><span class="kw1">EXECUTE</span> sys.<span class="kw3">sp_configure</span><span class="st0">'Ad Hoc Distributed Queries'</span>, <span class="st0">'1'</span>
<span class="kw1">RECONFIGURE</span> <span class="kw1">WITH</span> OVERRIDE
GO</pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">EXECUTE sys.sp_configure'Ad Hoc Distributed Queries', '1'
RECONFIGURE WITH OVERRIDE
GO</pre></div></div>

<p>When running SQL Server on Amazon&#8217;s AWS RDS, you can&#8217;t do it like that. If you try running it, you will get the following error.</p>
<p>Msg 15247, Level 16, State 1, Procedure sp_configure, Line 105<br />
User does not have permission to perform this action.<br />
Msg 5812, Level 14, State 1, Line 1<br />
You do not have permission to run the RECONFIGURE statement.</p>
<p>Here is how you have to do it. From the dashboard click on <em>DB Parameter Groups</em>. Click on Create DB Parameter Group, pick the version of SQL Server and fill in the text boxes. Here is what it looks like</p>
<div class="image_block"><a href="/wp-content/uploads/blogs/DataMgmt/Denis/AWS/DBParameterGroup1.PNG?mtime=1363879041"><img alt="" src="/wp-content/uploads/blogs/DataMgmt/Denis/AWS/DBParameterGroup1.PNG?mtime=1363879041" width="824" height="207" /></a></div>
<p>Check the DB Parameter Group you just created and click on Edit Parameters</p>
<div class="image_block"><a href="/wp-content/uploads/blogs/DataMgmt/Denis/AWS/DBParameterGroup2.PNG?mtime=1363879237"><img alt="" src="/wp-content/uploads/blogs/DataMgmt/Denis/AWS/DBParameterGroup2.PNG?mtime=1363879237" width="740" height="180" /></a></div>
<p>You will see a screen like this pop up</p>
<div class="image_block"><a href="/wp-content/uploads/blogs/DataMgmt/Denis/AWS/DBParameterGroup3.PNG?mtime=1363879348"><img alt="" src="/wp-content/uploads/blogs/DataMgmt/Denis/AWS/DBParameterGroup3.PNG?mtime=1363879348" width="617" height="529" /></a></div>
<p>Modify the ones that you are interested in and click Save Changes</p>
<p>Click on DB Instances, Click on the Instance Actions dropdown </p>
<div class="image_block"><a href="/wp-content/uploads/blogs/DataMgmt/Denis/AWS/DBParameterGroup4.PNG?mtime=1363879526"><img alt="" src="/wp-content/uploads/blogs/DataMgmt/Denis/AWS/DBParameterGroup4.PNG?mtime=1363879526" width="357" height="225" /></a></div>
<p>Select Modify from this dropdown</p>
<p>You will see a screen like this</p>
<div class="image_block"><a href="/wp-content/uploads/blogs/DataMgmt/Denis/AWS/DBParameterGroup5.PNG?mtime=1363879698"><img alt="" src="/wp-content/uploads/blogs/DataMgmt/Denis/AWS/DBParameterGroup5.PNG?mtime=1363879698" width="654" height="387" /></a></div>
<p>In the Parameter Group dropdown, pick the Parameter Group you just created, hit Continue and then Modify DB Instance.<br />
In order for this to take effect, you need to reboot your instance<br />
Click on DB Instances, click on the Instance Actions dropdown </p>
<div class="image_block"><a href="/wp-content/uploads/blogs/DataMgmt/Denis/AWS/DBParameterGroup4.PNG?mtime=1363879526"><img alt="" src="/wp-content/uploads/blogs/DataMgmt/Denis/AWS/DBParameterGroup4.PNG?mtime=1363879526" width="357" height="225" /></a></div>
<p>Select reboot from this dropdown</p>
<p>Once the instance is available again, connect from SSMS, right click on the Server, select Properties and click on the Advanced page. It should now match what you have edited in the DB Parameters Group</p>
<div class="image_block"><a href="/wp-content/uploads/blogs/DataMgmt/Denis/AWS/DBParameterGroup6.PNG?mtime=1363880116"><img alt="" src="/wp-content/uploads/blogs/DataMgmt/Denis/AWS/DBParameterGroup6.PNG?mtime=1363880116" width="474" height="335" /></a></div>
<p>That is it for this post, as you can see it is pretty simple to do<br />
Also check out my other AWS RDS SQL Server posts: <a href="/index.php/DataMgmt/DBProgramming/trying-out-amazon-relational-database">Trying out Amazon Relational Database Service</a> and <a href="/index.php/DataMgmt/DBAdmin/MSSQLServerAdmin/how-to-read-the-error">How to read the error log on an Amazon RDS SQL Server instance</a></p>
]]></content:encoded>
			<wfw:commentRss>/index.php/datamgmt/dbadmin/turning-on-optimize-for-ad/feed/</wfw:commentRss>
		<slash:comments>2</slash:comments>
		</item>
		<item>
		<title>How to read the error log on an Amazon RDS SQL Server instance</title>
		<link>/index.php/datamgmt/dbadmin/how-to-read-the-error/</link>
		<comments>/index.php/datamgmt/dbadmin/how-to-read-the-error/#respond</comments>
		<pubDate>Thu, 21 Mar 2013 11:21:00 +0000</pubDate>
		<dc:creator><![CDATA[SQLDenis]]></dc:creator>
				<category><![CDATA[Database Administration]]></category>
		<category><![CDATA[Microsoft SQL Server Admin]]></category>
		<category><![CDATA[amazon web services]]></category>
		<category><![CDATA[aws]]></category>
		<category><![CDATA[cloud]]></category>
		<category><![CDATA[rds]]></category>

		<guid isPermaLink="false">/index.php/2013/03/how-to-read-the-error/</guid>
		<description><![CDATA[Earlier today, i created an Amazon RDS SQL Server instance, you can check out that post here: Trying out Amazon Relational Database Service
I decided to take a closer look, the first thing I wanted to know is if I could see the error log. There are two&#8230;]]></description>
				<content:encoded><![CDATA[<p>Earlier today, I created an Amazon RDS SQL Server instance, you can check out that post here: <a href="/index.php/DataMgmt/DBProgramming/trying-out-amazon-relational-database">Trying out Amazon Relational Database Service</a><br />
I decided to take a closer look, the first thing I wanted to know is if I could see the error log. </p>
<p>The first thing I did was check if I could see the logs from SSMS, I expanded the error log folder and was greeted with this message</p>
<blockquote><p>Failed to retrieve data for this request. (Microsoft.SqlServer.Management.Sdk.Sfc)<br />
An exception occurred while executing a Transact-SQL statement or batch. (Microsoft.SqlServer.ConnectionInfo)<br />
Only members of the securityadmin role can execute this stored procedure. (Microsoft SQL Server, Error: 15003)</p></blockquote>
<p>I decided to investigate further, there are two ways to see the error log. One way is to use the AWS RDS Dashboard. Click on the DB Instance that you are interested in and you will see a tab named Logs.</p>
<div class="image_block"><a href="/wp-content/uploads/blogs/DataMgmt/Denis/AWS/AwsErrorLog1.PNG?mtime=1363863573"><img alt="" src="/wp-content/uploads/blogs/DataMgmt/Denis/AWS/AwsErrorLog1.PNG?mtime=1363863573" width="752" height="446" /></a></div>
<p>Once you click on the view button, you will see something like this</p>
<div class="image_block"><a href="/wp-content/uploads/blogs/DataMgmt/Denis/AWS/AwsErrorLog2.PNG?mtime=1363863585"><img alt="" src="/wp-content/uploads/blogs/DataMgmt/Denis/AWS/AwsErrorLog2.PNG?mtime=1363863585" width="628" height="408" /></a></div>
<p>That is all nice and dandy but can I do it from T-SQL? Let&#8217;s find out by running xp_readerrorlog.</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
</pre></td><td class="de1"><pre class="de1"><span class="kw1">EXEC</span> master.<span class="me1">dbo</span>.<span class="me1">xp_readerrorlog</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">EXEC master.dbo.xp_readerrorlog</pre></div></div>

<p>Here is the output<br />
Msg 229, Level 14, State 5, Procedure xp_readerrorlog, Line 1<br />
The EXECUTE permission was denied on the object &#8216;xp_readerrorlog&#8217;, database &#8216;mssqlsystemresource&#8217;, schema &#8216;sys&#8217;.</p>
<p>That is no good. Luckily for us there is a stored procedure that is provided, this proc is named rds_read_error_log </p>
<p>Here is how you execute it</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
</pre></td><td class="de1"><pre class="de1"><span class="kw1">EXEC</span> rdsadmin..<span class="me1">rds_read_error_log</span> </pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">EXEC rdsadmin..rds_read_error_log </pre></div></div>

<p>The output is something like you expect from xp_readerrorlog</p>
<blockquote><p>2013-03-21 13:04:08.100	Server	Microsoft SQL Server 2012 &#8211; 11.0.2100.60 (X64)<br />
	Feb 10 2012 19:39:15<br />
	Copyright (c) Microsoft Corporation<br />
	Express Edition (64-bit) on Windows NT 6.1 <x64> (Build 7601: Service Pack 1) (Hypervisor)<br />
<br />
2013-03-21 13:04:08.100	Server	(c) Microsoft Corporation.<br />
2013-03-21 13:04:08.100	Server	All rights reserved.<br />
2013-03-21 13:04:08.100	Server	Server process ID is 2252.<br />
2013-03-21 13:04:08.100	Server	System Manufacturer: &#8216;Xen&#8217;, System Model: &#8216;HVM domU&#8217;.<br />
2013-03-21 13:04:08.100	Server	Authentication mode is MIXED.<br />
2013-03-21 13:04:08.100	Server	Logging SQL Server messages in file &#8216;D:RDSDBDATALogERROR&#8217;.<br />
2013-03-21 13:04:08.100	Server	The service account is &#8216;RDSGroupRDSIMAGE$&#8217;. This is an informational message; no user action is required.<br />
2013-03-21 13:04:08.100	Server	Registry startup parameters:<br />
	 -d D:RDSDBDATADATAmaster.mdf<br />
	 -e D:RDSDBDATALogERROR<br />
	 -l D:RDSDBDATADATAmastlog.ldf<br />
	 -k 20.000000<br />
	 -T 3226<br />
	 -T 7806<br />
2013-03-21 13:04:08.100	Server	Command Line Startup Parameters:<br />
	 -s &#8220;MSSQLSERVER&#8221;<br />
2013-03-21 13:04:09.850	Server	SQL Server detected 1 sockets with 1 cores per socket and 1 logical processors per socket, 1 total logical processors; using 1 logical processors based on SQL Server licensing. This is an informational message; no user action is required.<br />
2013-03-21 13:04:09.850	Server	SQL Server is starting at normal priority base (=7). This is an informational message only. No user action is required.<br /></x64></p></blockquote>
<p>
Here is what the stored procedure signature looks like<br />
</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
</pre></td><td class="de1"><pre class="de1"><span class="kw1">CREATE</span> <span class="kw1">PROCEDURE</span> <span class="br0">&#91;</span>dbo<span class="br0">&#93;</span>.<span class="br0">&#91;</span>rds_read_error_log<span class="br0">&#93;</span> @<span class="kw1">index</span> <span class="kw1">INT</span> <span class="sy0">=</span> <span class="nu0">0</span>, @type <span class="kw1">INT</span> <span class="sy0">=</span> <span class="nu0">1</span>,
@search_str1 <span class="kw1">VARCHAR</span><span class="br0">&#40;</span><span class="nu0">255</span><span class="br0">&#41;</span> <span class="sy0">=</span> <span class="sy0">NULL</span>, @search_str2 <span class="kw1">VARCHAR</span><span class="br0">&#40;</span><span class="nu0">255</span><span class="br0">&#41;</span> <span class="sy0">=</span> <span class="sy0">NULL</span>,
@start_time <span class="kw1">DATETIME</span> <span class="sy0">=</span> <span class="sy0">NULL</span>, @end_time <span class="kw1">DATETIME</span> <span class="sy0">=</span> <span class="sy0">NULL</span>,
@sort_order <span class="kw1">NVARCHAR</span><span class="br0">&#40;</span><span class="nu0">4</span><span class="br0">&#41;</span> <span class="sy0">=</span> N<span class="st0">'asc'</span> &nbsp;</pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">CREATE PROCEDURE [dbo].[rds_read_error_log] @index INT = 0, @type INT = 1,
@search_str1 VARCHAR(255) = NULL, @search_str2 VARCHAR(255) = NULL,
@start_time DATETIME = NULL, @end_time DATETIME = NULL,
@sort_order NVARCHAR(4) = N'asc'  </pre></div></div>

<p>From the docs</p>
<blockquote><p>The first two parameters are important when you call the rdsadmin.dbo.rds_read_error_log stored procedure:</p>
<p>The @index parameter indicates the log that Amazon RDS will read from. The default value of 0 indicates the current log is used. A value of 1 indicates that the previously rotated log is used.</p>
<p>The @type parameter indicates which type of log is read. The default value of 1 indicates that the SQL Server Error Log is used. A value of 2 indicates that the SQL Server Agent Log is used. All the other parameters are related to searching and sorting results and they can be kept at their default values. </p></blockquote>
<p>So there you have it, a nice and easy way to check the log by running the <code>rdsadmin..rds_read_error_log</code> stored procedure</p>
]]></content:encoded>
			<wfw:commentRss>/index.php/datamgmt/dbadmin/how-to-read-the-error/feed/</wfw:commentRss>
		<slash:comments>0</slash:comments>
		</item>
		<item>
		<title>Trying out Amazon Relational Database Service</title>
		<link>/index.php/datamgmt/dbprogramming/trying-out-amazon-relational-database/</link>
		<comments>/index.php/datamgmt/dbprogramming/trying-out-amazon-relational-database/#respond</comments>
		<pubDate>Thu, 21 Mar 2013 09:06:00 +0000</pubDate>
		<dc:creator><![CDATA[SQLDenis]]></dc:creator>
				<category><![CDATA[Database Programming]]></category>
		<category><![CDATA[Microsoft SQL Server]]></category>
		<category><![CDATA[Microsoft SQL Server Admin]]></category>
		<category><![CDATA[amazon web services]]></category>
		<category><![CDATA[aws]]></category>
		<category><![CDATA[cloud]]></category>
		<category><![CDATA[rds]]></category>

		<guid isPermaLink="false">/index.php/2013/03/trying-out-amazon-relational-database/</guid>
		<description><![CDATA[Since it is a day off for me today, I decided to give Amazon Relational Database Service a try. Amazon RDS has SQL Server, Oracle and MySQL as databases available.

You can try it out for free if you are a new AWS  customer
Amazon RDS for SQL Server&#8230;]]></description>
				<content:encoded><![CDATA[<p>Since it is a day off for me today, I decided to give Amazon Relational Database Service a try. Amazon RDS has SQL Server, Oracle and MySQL as databases available.</p>
<p>You can try it out for free if you are a new AWS  customer</p>
<blockquote><p>Amazon RDS for SQL Server &#8211; Free Tier</p>
<p>New AWS customers can get started with Amazon RDS for SQL Server for free and receive the following Amazon RDS for SQL Server resources each month for free:<br />
750 hours of Amazon RDS for SQL Server Micro DB Instance usage (running SQL Server Express Edition in a single Availability Zone) – enough hours to run a DB Instance continuously each month<br />
20 GB of database storage<br />
10 million I/Os<br />
20 GB of backup storage for your automated database backups and any user-initiated DB Snapshots<br />
Click <a href="http://aws.amazon.com/rds/free/">here</a> to learn more about the offer.</p></blockquote>
<p>You can find all the details here: http://aws.amazon.com/rds/free/</p>
<p>Here is what is available for SQL Server</p>
<p><em><strong>Micro DB Instance</strong><br />
630 MB memory, Up to 2 ECU (for short periodic bursts), 64-bit platform, Low I/O Capacity, Provisioned IOPS Optimized: No</p>
<p><strong>Small DB Instance</strong><br />
1.7 GB memory, 1 ECU (1 virtual core with 1 ECU), 64-bit platform, Moderate I/O Capacity, Provisioned IOPS Optimized: No</p>
<p><strong>Medium DB Instance</strong><br />
3.75 GB memory, 2 ECU (1 virtual core with 2 ECU), 64-bit platform, Moderate I/O Capacity, Provisioned IOPS Optimized: No</p>
<p><strong>Large DB Instance</strong><br />
7.5 GB memory, 4 ECUs (2 virtual cores with 2 ECUs each), 64-bit platform, High I/O Capacity, Provisioned IOPS Optimized: 500Mbps</p>
<p><strong>Extra Large DB Instance</strong><br />
15 GB of memory, 8 ECUs (4 virtual cores with 2 ECUs each), 64-bit platform, High I/O Capacity, Provisioned IOPS Optimized: 1000Mbps</p>
<p><strong>High-Memory Extra Large DB Instance</strong><br />
17.1 GB memory, 6.5 ECU (2 virtual cores with 3.25 ECUs each), 64-bit platform, High I/O Capacity, Provisioned IOPS Optimized: No</p>
<p><strong>High-Memory Double Extra Large DB Instance</strong><br />
34 GB of memory, 13 ECUs (4 virtual cores with 3,25 ECUs each), 64-bit platform, High I/O Capacity, Provisioned IOPS Optimized: No</p>
<p><strong>High-Memory Quadruple Extra Large DB Instance</strong><br />
68 GB of memory, 26 ECUs (8 virtual cores with 3.25 ECUs each), 64-bit platform, High I/O Capacity, Provisioned IOPS Optimized: 1000Mbps<br />
</em></p>
<p>Once you have signed up and have been verified over the phone, you can create an instance. Create a database is very very easy. You start up a wizard, fill in some info and you are ready to go.</p>
<p>
<h2>Setting up an AWS RDS instance</h2>
<p>Here is what the multi-step process looks like</p>
<p>First you need to select the database engine, you can choose from MySQL, Oracle and SQL Server. Pick the edition that you want</p>
<div class="image_block"><a href="/wp-content/uploads/blogs/DataMgmt/Denis/AWS/AWSDbWizard1.PNG?mtime=1363853447"><img alt="" src="/wp-content/uploads/blogs/DataMgmt/Denis/AWS/AWSDbWizard1.PNG?mtime=1363853447" width="692" height="436" /></a></div>
<p>Give your database a name, specify storage, add a user and a password</p>
<div class="image_block"><a href="/wp-content/uploads/blogs/DataMgmt/Denis/AWS/AWSDbWizard2.PNG?mtime=1363853461"><img alt="" src="/wp-content/uploads/blogs/DataMgmt/Denis/AWS/AWSDbWizard2.PNG?mtime=1363853461" width="680" height="542" /></a></div>
<p>Pick the port, the availiblity zone</p>
<div class="image_block"><a href="/wp-content/uploads/blogs/DataMgmt/Denis/AWS/AWSDbWizard3.PNG?mtime=1363853470"><img alt="" src="/wp-content/uploads/blogs/DataMgmt/Denis/AWS/AWSDbWizard3.PNG?mtime=1363853470" width="702" height="404" /></a></div>
<p>Specify the backup and maintenance windows as well as the retention period</p>
<div class="image_block"><a href="/wp-content/uploads/blogs/DataMgmt/Denis/AWS/AWSDbWizard4.PNG?mtime=1363853480"><img alt="" src="/wp-content/uploads/blogs/DataMgmt/Denis/AWS/AWSDbWizard4.PNG?mtime=1363853480" width="699" height="419" /></a></div>
<p>Now it is all ready</p>
<div class="image_block"><a href="/wp-content/uploads/blogs/DataMgmt/Denis/AWS/AWSDbWizard5.PNG?mtime=1363853438"><img alt="" src="/wp-content/uploads/blogs/DataMgmt/Denis/AWS/AWSDbWizard5.PNG?mtime=1363853438" width="694" height="489" /></a></div>
<p>After this is all done, you will get a summary page where everything is displayed about your instance.</p>
<p>Next go to your db instance, it takes about 15 minutes before it is available. Click on the checkmark next to your instance and you will see something like this</p>
<div class="image_block"><a href="/wp-content/uploads/blogs/DataMgmt/Denis/AWS/RDSMSFTSQLConnect00.png?mtime=1363853892"><img alt="" src="/wp-content/uploads/blogs/DataMgmt/Denis/AWS/RDSMSFTSQLConnect00.png?mtime=1363853892" width="952" height="740" /></a></div>
<p>Notice the endpoint and the port? Remember those, you will need those to connect to your SQL server instance.</p>
<h2>Setting up DB Security Groups</h2>
<p>
Before trying to connect you have to give access</p>
<blockquote><p>DB Security Groups</p>
<p>Each DB security group rule enables a specific source to access a DB instance that is a member of that DB security group. The source can be a range of addresses (e.g., 203.0.113.0/24), or an EC2 security group. When you specify an EC2 security group as the source, you allow incoming traffic from all EC2 instances that use that EC2 security group. Note that DB security group rules apply to inbound traffic only; outbound traffic is not currently permitted for DB instances.</p>
<p>You do not need to specify a destination port number when you create DB security group rules; the port number defined for the DB instance is used as the destination port number for all rules defined for the DB security group. DB security groups can be created using the Amazon RDS APIs or the Amazon RDS page of the AWS Management Console.</p></blockquote>
<p>Here is more info about Amazon RDS Security Groups http://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Overview.RDSSecurityGroups.html</p>
<p>Click on DB Security Groups<br />
<a href="/wp-content/uploads/blogs/DataMgmt/Denis/AWS/DBSecurityGroups.PNG?mtime=1363855346"><img alt="" src="/wp-content/uploads/blogs/DataMgmt/Denis/AWS/DBSecurityGroups.PNG?mtime=1363855346" width="191" height="540" /></a><br />
Click on details and add the CIDR/IP of your machine, you will see it displayed there ,you can just paste that in the box.</p>
<p>Now you are ready to connect to your AWS RDS instance<br />
Paste the endpoint in the Servername box, add the user name and password. You should be all ready now. If you check for @@servername and @@version, you should see something like this</p>
<div class="image_block"><a href="/wp-content/uploads/blogs/DataMgmt/Denis/AWS/AWSQuery.PNG?mtime=1363855711"><img alt="" src="/wp-content/uploads/blogs/DataMgmt/Denis/AWS/AWSQuery.PNG?mtime=1363855711" width="457" height="317" /></a></div>
<p>Take a look at your dashboard, check out everything that is available. Here is what monitoring looks like</p>
<div class="image_block"><a href="/wp-content/uploads/blogs/DataMgmt/Denis/AWS/AwsMonitoring.PNG?mtime=1363855852"><img alt="" src="/wp-content/uploads/blogs/DataMgmt/Denis/AWS/AwsMonitoring.PNG?mtime=1363855852" width="849" height="589" /></a></div>
<p>You can setup alarms as well, here is what that looks like</p>
<div class="image_block"><a href="/wp-content/uploads/blogs/DataMgmt/Denis/AWS/AWSAlarms.PNG?mtime=1363856013"><img alt="" src="/wp-content/uploads/blogs/DataMgmt/Denis/AWS/AWSAlarms.PNG?mtime=1363856013" width="648" height="362" /></a></div>
<p>Run some queries, see what works what doesn&#8217;t. I decided to run sp_helpdb</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
</pre></td><td class="de1"><pre class="de1"><span class="kw3">sp_helpdb</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">sp_helpdb</pre></div></div>

<p>Here is what I see</p>
<p>No permission to access database &#8216;model&#8217;.</p>
<pre>name	     db_size	owner	dbid	created
master	      4.75 MB	rdsa	1	Apr  8 2003
msdb	     14.75 MB	rdsa	4	Feb 10 2012
rdsadmin     11.19 MB	rdsa	5	Mar 21 2013
tempdb	      6.81 MB	rdsa	2	Mar 21 2013</pre>
<p>That is all for this posts, I will post more once I start messing around with this more</p>
<p>I created two more posts <a href="/index.php/DataMgmt/DBAdmin/MSSQLServerAdmin/how-to-read-the-error">How to read the error log on an Amazon RDS SQL Server instance</a> and <a href="/index.php/DataMgmt/DBAdmin/MSSQLServerAdmin/turning-on-optimize-for-ad">Turning on Optimize for Ad hoc Workloads, Ad Hoc Distributed Queries and more on a AWS RDS SQL Server Instance</a></p>
]]></content:encoded>
			<wfw:commentRss>/index.php/datamgmt/dbprogramming/trying-out-amazon-relational-database/feed/</wfw:commentRss>
		<slash:comments>0</slash:comments>
		</item>
	</channel>
</rss>
