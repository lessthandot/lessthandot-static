<?xml version="1.0" encoding="UTF-8"?><rss version="2.0"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:atom="http://www.w3.org/2005/Atom"
	xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
	xmlns:slash="http://purl.org/rss/1.0/modules/slash/"
	>

<channel>
	<title>java &#8211; LessthanDot</title>
	<atom:link href="/index.php/tag/java-2/feed/" rel="self" type="application/rss+xml" />
	<link>/</link>
	<description>A Technical Community for IT Professionals</description>
	<lastBuildDate>Sat, 09 Mar 2019 12:50:36 +0000</lastBuildDate>
	<language>en-US</language>
	<sy:updatePeriod>hourly</sy:updatePeriod>
	<sy:updateFrequency>1</sy:updateFrequency>
	<generator>https://wordpress.org/?v=4.6.1</generator>
	<item>
		<title>Scala: The difference between val and var</title>
		<link>/index.php/enterprisedev/appserver/jee/scala-the-difference-between-val/</link>
		<comments>/index.php/enterprisedev/appserver/jee/scala-the-difference-between-val/#respond</comments>
		<pubDate>Sat, 12 Jan 2013 10:25:00 +0000</pubDate>
		<dc:creator><![CDATA[SQLDenis]]></dc:creator>
				<category><![CDATA[Application Lifecycle Management]]></category>
		<category><![CDATA[Java EE]]></category>
		<category><![CDATA[functional programming]]></category>
		<category><![CDATA[java]]></category>
		<category><![CDATA[jvm]]></category>
		<category><![CDATA[polyglot]]></category>
		<category><![CDATA[scala]]></category>

		<guid isPermaLink="false">/index.php/2013/01/scala-the-difference-between-val/</guid>
		<description><![CDATA[This is a short Scala post to explain what the difference is between val and var. I was showing some Scala code to a co-worker this past week and he was asking what the difference was between val and var. It is quite simple:]]></description>
				<content:encoded><![CDATA[<p>This is a short Scala post to explain what the difference is between val and var. I was showing some Scala code to a co-worker this past week and he was asking what the difference was between val and var. It is quite simple:</p>
<p><strong>val</strong> defines a fixed value, it is a read only variable<br />
<strong>var</strong> defines a mutable variable, this variable can be modified</p>
<p>In Java you would use final to create a variable which would be read only, this is the same as val in Scala. </p>
<p>Let&#8217;s look at some very simple Scala code.</p>
<pre>object Test {

  def main(args: Array[String]) = println("done with main")
  
var Test1 =5
println("Test1 " + Test1)
  
Test1 = 6
println("Test1 " + Test1)

}</pre>
<p>Running the code above will give the following output<br />
Test1 5<br />
Test1 6<br />
done with main</p>
<p>If you are trying to use val, you will get an error, change var to val and see if you can compile the code</p>
<pre>object Test {

  def main(args: Array[String]) = println("done with main")
  
val Test1 =5
println("Test1 " + Test1)
  
Test1 = 6
println("Test1 " + Test1)

}</pre>
<p>Here is the error, the code won&#8217;t even compile</p>
<pre>Description		Resource	Path		Location	Type
reassignment to val	Test.scala	/ScalaTemp/src	line 8		Scala Problem</pre>
<p>So as you can see, val is read only, while with var you can modify the variable.</p>
<p>If you want to play around with Scala, take a look at <a href="/index.php/EnterpriseDev/AppServer/JEE/installing-scala-2-10-on">Installing Scala 2.10 on Eclipse Juno</a></p>
]]></content:encoded>
			<wfw:commentRss>/index.php/enterprisedev/appserver/jee/scala-the-difference-between-val/feed/</wfw:commentRss>
		<slash:comments>0</slash:comments>
		</item>
		<item>
		<title>Installing Scala 2.10 on Eclipse Juno</title>
		<link>/index.php/enterprisedev/appserver/jee/installing-scala-2-10-on/</link>
		<comments>/index.php/enterprisedev/appserver/jee/installing-scala-2-10-on/#comments</comments>
		<pubDate>Sat, 05 Jan 2013 13:46:00 +0000</pubDate>
		<dc:creator><![CDATA[SQLDenis]]></dc:creator>
				<category><![CDATA[Application Lifecycle Management]]></category>
		<category><![CDATA[Java EE]]></category>
		<category><![CDATA[functional programming]]></category>
		<category><![CDATA[java]]></category>
		<category><![CDATA[jvm]]></category>
		<category><![CDATA[polyglot]]></category>
		<category><![CDATA[scala]]></category>

		<guid isPermaLink="false">/index.php/2013/01/installing-scala-2-10-on/</guid>
		<description><![CDATA[Scala 2.10 was released yesterday and I decided to take a look at it. But first what is Scala anyway? From the Scala site: 

Scala is a general purpose programming language designed to express common programming patterns in a concise, elegant, and typ&#8230;]]></description>
				<content:encoded><![CDATA[<p>As part of my <a href="/index.php/ITProfessionals/ProfessionalDevelopment/ah-yes-those-pesky-resolutions">resolutions for the year</a> I said I would write more blog posts and also get into different technology. I decided to take a look at Scala. Well it turns out Scala 2.10 was released yesterday. But first what is Scala anyway? From the Scala site:  </p>
<blockquote><p>Scala is a general purpose programming language designed to express common programming patterns in a concise, elegant, and type-safe way. It smoothly integrates features of object-oriented and functional languages, enabling Java and other programmers to be more productive. Code sizes are typically reduced by a factor of two to three when compared to an equivalent Java application.</p></blockquote>
<p>Scala is an object oriented, functional, statically typed language. You could probably compare it to F# if you are a .NET programmer.</p>
<p>The first thing you have to do is downloading version 2.10 of Scala, you can download that version here: http://www.scala-lang.org/downloads</p>
<p>After it is downloaded and installed, it is time to get the Eclipse plugin for Scala 2.10</p>
<p>The way you do this is you click on Help followed by Install New Software&#8230; from the menu in Eclipse</p>
<div class="image_block"><a href="/wp-content/uploads/blogs/EnterpriseDev/Denis/juno2.PNG?mtime=1357398056"><img alt="" src="/wp-content/uploads/blogs/EnterpriseDev/Denis/juno2.PNG?mtime=1357398056" width="552" height="169" /></a></div>
<p>Click on the Add button</p>
<div class="image_block"><a href="/wp-content/uploads/blogs/EnterpriseDev/Denis/juno3.PNG?mtime=1357398065"><img alt="" src="/wp-content/uploads/blogs/EnterpriseDev/Denis/juno3.PNG?mtime=1357398065" width="476" height="177" /></a></div>
<p>For Eclipse Juno you need to use the following URL in the location box http://download.scala-ide.org/sdk/e38/scala210/dev/site/<br />
For Eclipse Indigo use the following URL http://download.scala-ide.org/sdk/e37/scala210/dev/site/<br />
Give a name for the repository, I named mine Scala 10 for Eclipse Juno. Hit Ok</p>
<div class="image_block"><a href="/wp-content/uploads/blogs/EnterpriseDev/Denis/juno4.PNG?mtime=1357398076"><img alt="" src="/wp-content/uploads/blogs/EnterpriseDev/Denis/juno4.PNG?mtime=1357398076" width="300" height="165" /></a></div>
<p>Hit next</p>
<p>On the Install Details form you will see Scala IDE for Eclipse<br />
You can expand it to reveal the following</p>
<div class="image_block"><a href="/wp-content/uploads/blogs/EnterpriseDev/Denis/juno5.PNG?mtime=1357398089"><img alt="" src="/wp-content/uploads/blogs/EnterpriseDev/Denis/juno5.PNG?mtime=1357398089" width="352" height="152" /></a></div>
<p>Hit next to accept the license, hit finish.</p>
<p>Now Eclipse will ask you to restart. After Eclipse is restarted it is time to create our first Scala application<br />
From the menu go to File and then select New Project. Navigate to Scala Wizards and select Scala Project</p>
<div class="image_block"><a href="/wp-content/uploads/blogs/EnterpriseDev/Denis/juno6.PNG?mtime=1357398099"><img alt="" src="/wp-content/uploads/blogs/EnterpriseDev/Denis/juno6.PNG?mtime=1357398099" width="562" height="361" /></a></div>
<p>Now that the project is created let&#8217;s create a simple object</p>
<p>Right click on the Scala Project from the package Explorer and select New&#8211;> Scala Object</p>
<div class="image_block"><a href="/wp-content/uploads/blogs/EnterpriseDev/Denis/juno7.PNG?mtime=1357398110"><img alt="" src="/wp-content/uploads/blogs/EnterpriseDev/Denis/juno7.PNG?mtime=1357398110" width="510" height="573" /></a></div>
<p>Give it a name and check <em>public static void main</em></p>
<p>You should have something like this</p>
<pre>object Test2 {

  def main(args: Array[String]): Unit = {}

}</pre>
<p>Let&#8217;s make it more interesting by generating some output</p>
<pre>object Test2 {

  def main(args: Array[String]): Unit = {}

	val (name, site, role) = getSomeInfo()
	println("Name is " + name)
	println("Site is " + site)
	println("Role is " + role)

	def getSomeInfo() = {
    ("SQLDenis", "LessThanDot", "blogger")
	}
}</pre>
<p>Run it by selecting Run As&#8211;> Scala Application from the Run as button</p>
<div class="image_block"><a href="/wp-content/uploads/blogs/EnterpriseDev/Denis/juno10.PNG?mtime=1357399576"><img alt="" src="/wp-content/uploads/blogs/EnterpriseDev/Denis/juno10.PNG?mtime=1357399576" width="455" height="48" /></a></div>
<p>Your output should be the following<br />
Name is SQLDenis<br />
Site is LessThanDot<br />
Role is blogger</p>
<p>Why don&#8217;t we add a simple loop to our code? Here is what needs to be added</p>
<pre>	for (i &lt;- 1 to 3) {
		print(i + ",")
	}
	println(" Testing 1,2,3.....")</pre>
<p>Here is the whole code</p>
<pre>object Test2 {

  def main(args: Array[String]): Unit = {}

	val (name, site, role) = getSomeInfo()
	println("Name is " + name)
	println("Site is " + site)
	println("Role is " + role)
	
	for (i &lt;- 1 to 3) {
		print(i + ",")
	}
	println(" Testing 1,2,3.....")

	def getSomeInfo() = {
    ("SQLDenis", "LessThanDot", "blogger")
	}
}</pre>
<p>Run it again, here is what the output should be</p>
<p>Name is SQLDenis<br />
Site is LessThanDot<br />
Role is blogger<br />
1,2,3, Testing 1,2,3&#8230;..<br />
Here is what my Eclipse window looks like</p>
<div class="image_block"><a href="/wp-content/uploads/blogs/EnterpriseDev/Denis/juno9.PNG?mtime=1357398314"><img alt="" src="/wp-content/uploads/blogs/EnterpriseDev/Denis/juno9.PNG?mtime=1357398314" width="595" height="523" /></a></div>
<p>In case you are interested in all the new stuff in Scala 2.10, take a look at the stuff below.</p>
<hr />
<p>The Scala 2.10.0 codebase includes the following new features and changes:&nbsp;</p>
<ul>
<li>Value Classes
<ul>
<li>A class may now extend <code>AnyVal</code> to make it behave like a struct type (restrictions apply).</li>
<li><a href="http://docs.scala-lang.org/overviews/core/value-classes.html">http://docs.scala-lang.org/overviews/core/value-classes.html</a></li>
</ul>
</li>
<li>Implicit Classes
<ul>
<li>The implicit modifier now also applies to class definitions to reduce the boilerplate of implicit wrappers.</li>
<li><a href="http://docs.scala-lang.org/sips/pending/implicit-classes.html">http://docs.scala-lang.org/sips/pending/implicit-classes.html</a></li>
</ul>
</li>
<li>String Interpolation
<ul>
<li><code>val what = "awesome"; println(s"string interpolation is ${what.toUpperCase}!")</code></li>
<li><a href="http://docs.scala-lang.org/overviews/core/string-interpolation.html">http://docs.scala-lang.org/overviews/core/string-interpolation.html</a></li>
</ul>
</li>
<li>Futures and Promises
<ul>
<li>Asynchronously get some JSON: <code>for (req &lt;- WS.url(restApiUrl).get()) yield (req.json  "users").as[List[User]]</code> (uses play!)</li>
<li><a href="http://docs.scala-lang.org/overviews/core/futures.html">http://docs.scala-lang.org/overviews/core/futures.html</a></li>
</ul>
</li>
<li>Dynamic and applyDynamic
<ul>
<li><code>x.foo</code> becomes <code>x.applyDynamic("foo")</code> if <code>x</code>&#8216;s type does not define a <code>foo</code>, but is a subtype of <code>Dynamic</code></li>
<li><a href="http://docs.scala-lang.org/sips/pending/type-dynamic.html">http://docs.scala-lang.org/sips/pending/type-dynamic.html</a></li>
</ul>
</li>
<li>Dependent method types:
<ul>
<li><code>def identity(x: AnyRef): x.type = x</code> // the return type says we return exactly what we got</li>
</ul>
</li>
<li>New ByteCode emitter based on ASM
<ul>
<li>Can target JDK 1.5, 1.6 and 1.7</li>
<li>Emits 1.6 bytecode by default</li>
<li>Old 1.5 backend is deprecated</li>
</ul>
</li>
<li>A new Pattern Matcher
<ul>
<li>rewritten from scratch to generate more robust code (no more <a href="https://issues.scala-lang.org/browse/SI-1133">exponential blow-up</a>!)</li>
<li>code generation and analyses are now independent (the latter can be turned off with <code>-Xno-patmat-analysis</code>)</li>
</ul>
</li>
<li>Scaladoc Improvements
<ul>
<li>Implicits (-implicits flag)</li>
<li>Diagrams (-diagrams flag, requires graphviz)</li>
<li>Groups (-groups)</li>
</ul>
</li>
<li>Modularized Language features
<ul>
<li>Get on top of the advanced Scala features used in your codebase by explicitly importing them.</li>
<li><a href="http://docs.scala-lang.org/sips/pending/modularizing-language-features.html">http://docs.scala-lang.org/sips/pending/modularizing-language-features.html</a></li>
</ul>
</li>
<li>Parallel Collections are now configurable with custom thread pools
<ul>
<li><a href="http://docs.scala-lang.org/overviews/parallel-collections/overview.html">http://docs.scala-lang.org/overviews/parallel-collections/overview.html</a></li>
</ul>
</li>
<li>Akka Actors now part of the distribution
<ul>
<li>The original Scala actors are now deprecated.</li>
<li>See the <a href="http://docs.scala-lang.org/actors-migration/">actors migration project</a> for more information.</li>
</ul>
</li>
<li>Performance Improvements
<ul>
<li>Faster inliner</li>
<li>`Range#sum is now O(1)</li>
<li>Update of ForkJoin library</li>
<li>Fixes in immutable <code>TreeSet</code>/<code>TreeMap</code></li>
<li>Improvements to PartialFunctions</li>
</ul>
</li>
<li>Addition of <code>???</code> and <code>NotImplementedError</code></li>
<li>Addition of <code>IsTraversableOnce</code> + <code>IsTraversableLike</code> type classes for extension methods</li>
<li>Deprecations and cleanup
<ul>
<li>Floating point and octal literal syntax deprecation</li>
<li>Removed scala.dbc</li>
</ul>
</li>
</ul>
<h3 id="Experimentalfeatures">Experimental features</h3>
<p>The following exciting &#8212; experimental &#8212; features are part of 2.10.0:</p>
<ul>
<li>Scala Reflection
<ul>
<li><a href="https://docs.google.com/document/d/1Z1VhhNPplbUpaZPIYdc0_EUv5RiGQ2X4oqp0i-vz1qw/edit#heading=h.pqwdkl">https://docs.google.com/document/d/1Z1VhhNPplbUpaZPIYdc0_EUv5RiGQ2X4oqp0i-vz1qw/edit#heading=h.pqwdkl</a></li>
</ul>
</li>
<li>Macros
<ul>
<li><a href="http://docs.scala-lang.org/overviews/macros/overview.html">http://docs.scala-lang.org/overviews/macros/overview.html</a></li>
</ul>
</li>
</ul>
<p>
<hr />
That is all for this post, Scala is just one of the languages I will explore in my quest to be more of a polyglot this year. Have you looked at Scala or some other functional language like F#?</p>
<p>Edit&#8230;&#8230;.</p>
<p>And I played a little more with this and decided to do one of our <a href="http://forum.lessthandot.com/viewtopic.php?f=102&amp;t=1608">Friday the Thirteenths</a></p>
<p>Here is a solution that someone posted in Java</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="java"><thead><tr><td colspan="2"  class="head">Java</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
</pre></td><td class="de1"><pre class="de1"><span class="kw1">import</span> <span class="co2">java.text.DateFormat</span><span class="sy0">;</span>
<span class="kw1">import</span> <span class="co2">java.text.SimpleDateFormat</span><span class="sy0">;</span>
<span class="kw1">import</span> <span class="co2">java.util.Calendar</span><span class="sy0">;</span>
<span class="kw1">import</span> <span class="co2">java.util.GregorianCalendar</span><span class="sy0">;</span>
&nbsp;
<span class="kw1">public</span> <span class="kw1">class</span> Test
<span class="br0">&#123;</span>
&nbsp; &nbsp;<span class="kw1">private</span> <span class="kw1">static</span> <span class="kw1">final</span> <span class="kw3">DateFormat</span> format <span class="sy0">=</span> <span class="kw1">new</span> <span class="kw3">SimpleDateFormat</span><span class="br0">&#40;</span><span class="st0">&quot;EEE MMM dd yyyy&quot;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp;
&nbsp; &nbsp;<span class="kw1">public</span> <span class="kw1">static</span> <span class="kw4">void</span> main<span class="br0">&#40;</span><span class="kw3">String</span>... <span class="me1">args</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; <span class="kw3">GregorianCalendar</span> cal <span class="sy0">=</span> <span class="kw1">new</span> <span class="kw3">GregorianCalendar</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; <span class="kw3">GregorianCalendar</span> stopDate <span class="sy0">=</span> <span class="kw1">new</span> <span class="kw3">GregorianCalendar</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; stopDate.<span class="me1">add</span><span class="br0">&#40;</span><span class="kw3">Calendar</span>.<span class="me1">YEAR</span>, <span class="nu0">10</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp;
&nbsp; &nbsp; &nbsp; <span class="co1">// Move ahead to the next Friday</span>
&nbsp; &nbsp; &nbsp; <span class="kw1">while</span> <span class="br0">&#40;</span>cal.<span class="me1">get</span><span class="br0">&#40;</span><span class="kw3">Calendar</span>.<span class="me1">DAY_OF_WEEK</span><span class="br0">&#41;</span> <span class="sy0">!=</span> <span class="nu0">6</span><span class="br0">&#41;</span> cal.<span class="me1">add</span><span class="br0">&#40;</span><span class="kw3">Calendar</span>.<span class="me1">DATE</span>, <span class="nu0">1</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp;
&nbsp; &nbsp; &nbsp; <span class="kw1">while</span> <span class="br0">&#40;</span>cal.<span class="me1">before</span><span class="br0">&#40;</span>stopDate<span class="br0">&#41;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span class="kw1">if</span> <span class="br0">&#40;</span>cal.<span class="me1">get</span><span class="br0">&#40;</span><span class="kw3">Calendar</span>.<span class="me1">DAY_OF_MONTH</span><span class="br0">&#41;</span> <span class="sy0">==</span> <span class="nu0">13</span><span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw3">System</span>.<span class="me1">out</span>.<span class="me1">println</span><span class="br0">&#40;</span>format.<span class="me1">format</span><span class="br0">&#40;</span>cal.<span class="me1">getTime</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#41;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; cal.<span class="me1">add</span><span class="br0">&#40;</span><span class="kw3">Calendar</span>.<span class="me1">DATE</span>, <span class="nu0">7</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp; &nbsp;<span class="br0">&#125;</span>
<span class="br0">&#125;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.GregorianCalendar;
 
public class Test
{
   private static final DateFormat format = new SimpleDateFormat("EEE MMM dd yyyy");
   
   public static void main(String... args) {
      GregorianCalendar cal = new GregorianCalendar();
      GregorianCalendar stopDate = new GregorianCalendar();
      stopDate.add(Calendar.YEAR, 10);
       
      // Move ahead to the next Friday
      while (cal.get(Calendar.DAY_OF_WEEK) != 6) cal.add(Calendar.DATE, 1);
       
      while (cal.before(stopDate)) {
         if (cal.get(Calendar.DAY_OF_MONTH) == 13)
            System.out.println(format.format(cal.getTime()));
           
            cal.add(Calendar.DATE, 7);
      }
   }
}</pre></div></div>

<p>In Scala you don&#8217;t have to change that much, you can leave or take out the semicolons, here is the code</p>
<pre>object Test2 {
  
import java.text.DateFormat
import java.text.SimpleDateFormat
import java.util.Calendar
import java.util.GregorianCalendar

  def main(args: Array[String]): Unit = {}
  val DateFormat  = new SimpleDateFormat("EEE MMM dd yyyy")
  
  val cal = new GregorianCalendar()
  val stopDate = new GregorianCalendar()
  stopDate.add(Calendar.YEAR, 10);
      
  while (cal.get(Calendar.DAY_OF_WEEK) != 6) cal.add(Calendar.DATE, 1)
	 
  while (cal.before(stopDate)) {
         if (cal.get(Calendar.DAY_OF_MONTH) == 13)
            println(DateFormat.format(cal.getTime()))
           cal.add(Calendar.DATE, 7);
      
   }
		
}</pre>
<p>And here is the output</p>
<p>Fri Sep 13 2013<br />
Fri Dec 13 2013<br />
Fri Jun 13 2014<br />
Fri Feb 13 2015<br />
Fri Mar 13 2015<br />
Fri Nov 13 2015<br />
Fri May 13 2016<br />
Fri Jan 13 2017<br />
Fri Oct 13 2017<br />
Fri Apr 13 2018<br />
Fri Jul 13 2018<br />
Fri Sep 13 2019<br />
Fri Dec 13 2019<br />
Fri Mar 13 2020<br />
Fri Nov 13 2020<br />
Fri Aug 13 2021<br />
Fri May 13 2022</p>
<p>With SQL Server, you can just use a number table</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
</pre></td><td class="de1"><pre class="de1"><span class="kw1">SELECT</span> <span class="kw2">DATEADD</span><span class="br0">&#40;</span>m, number,<span class="st0">'1998-01-13'</span><span class="br0">&#41;</span>
&nbsp;<span class="kw1">FROM</span> &nbsp;master..<span class="me1">spt_values</span> <span class="kw1">WHERE</span> type <span class="sy0">=</span> <span class="st0">'P'</span>
and <span class="kw2">DATENAME</span><span class="br0">&#40;</span>dw,<span class="kw2">DATEADD</span><span class="br0">&#40;</span>m, number,<span class="st0">'1998-01-13'</span><span class="br0">&#41;</span><span class="br0">&#41;</span> <span class="sy0">=</span> <span class="st0">'friday'</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">SELECT DATEADD(m, number,'1998-01-13')
 FROM  master..spt_values WHERE type = 'P'
and DATENAME(dw,DATEADD(m, number,'1998-01-13')) = 'friday'</pre></div></div>

<p>That is really it for this post&#8230;</p>
]]></content:encoded>
			<wfw:commentRss>/index.php/enterprisedev/appserver/jee/installing-scala-2-10-on/feed/</wfw:commentRss>
		<slash:comments>1</slash:comments>
		</item>
		<item>
		<title>Java Training Day 5</title>
		<link>/index.php/enterprisedev/application-lifecycle-management/java-training-day-5/</link>
		<comments>/index.php/enterprisedev/application-lifecycle-management/java-training-day-5/#respond</comments>
		<pubDate>Sat, 01 Dec 2012 00:41:00 +0000</pubDate>
		<dc:creator><![CDATA[SQLDenis]]></dc:creator>
				<category><![CDATA[Application Lifecycle Management]]></category>
		<category><![CDATA[io]]></category>
		<category><![CDATA[java]]></category>
		<category><![CDATA[javabean]]></category>
		<category><![CDATA[jsp]]></category>
		<category><![CDATA[jvm]]></category>
		<category><![CDATA[sockets]]></category>

		<guid isPermaLink="false">/index.php/2012/11/java-training-day-5/</guid>
		<description><![CDATA[Last day of the training and I am glad it is over...this stuff is draining

Here is what was covered today

Network Programming
Low Level TCP/IP Protocols
IPv4 and IPv6
UDP Multicast
TCP/IP

Message Based protocols
HTTP
Connections framework&#8230;]]></description>
				<content:encoded><![CDATA[<p>Last day of the training and I am glad it is over&#8230;this stuff is draining</p>
<p>Here is what was covered today</p>
<p><strong>Network Programming</strong><br />
Low Level TCP/IP Protocols<br />
IPv4 and IPv6<br />
UDP Multicast<br />
TCP/IP</p>
<p>Message Based protocols<br />
HTTP<br />
Connections framework using URL (Unified Resource Locator)</p>
<p>Remote Objects<br />
RMI (Remote Method Invocation)<br />
CORBA (Common Object Request Broker Architecture)</p>
<p>Optional packages supporting additional protocols<br />
SOAP, Mail etc etc</p>
<p>We talked about port numbers, here are some common ones that you might know</p>
<p>20 &amp; 21: File Transfer Protocol (FTP)<br />
22: Secure Shell (SSH)<br />
23: Telnet remote login service<br />
25: Simple Mail Transfer Protocol (SMTP)<br />
53: Domain Name System (DNS) service<br />
80: Hypertext Transfer Protocol (HTTP)<br />
110: Post Office Protocol (POP3)<br />
119: Network News Transfer Protocol (NNTP)<br />
143: Internet Message Access Protocol (IMAP)<br />
161: Simple Network Management Protocol (SNMP)<br />
443: HTTP Secure (HTTPS)</p>
<p><strong>Threads</strong><br />
In an operating process, each running program is basically a process<br />
The operating system schedules processes for execution<br />
Each process has its own (virtual) address space<br />
Communications between processes is hampered by context switching</p>
<p>A thread is a flow of execution within a java process<br />
The JVM schedules therads for execution<br />
Threads share access to java objects<br />
Communication between threads is quick</p>
<p>On multi-CPU/multi-core machines, several threads can execute at the same time</p>
<p><strong>Executing with threads</strong><br />
One thread is started automatically to execute main()<br />
The main() method may start additional threads<br />
Single threaded applications run until main() terminates<br />
Multi threaded applications run until all threads have terminated or if one of the threads calls System.exit()</p>
<p><strong>Static methods manipulate the current thread</strong><br />
currentThread() returns a refernce to the thread that is currently executing<br />
yield() pauses the currently executing thread<br />
sleep(int ms) blocks the currently executing thread for a specific milliseconds</p>
<p><strong>Instance methods that manipulate a particular thread</strong><br />
start() starts thread execution<br />
getName() gets the name of the thread<br />
interrupt() throws an exception or sets the interrupt status<br />
join() waits for the thread to die<br />
setPriority set the priority for a thread </p>
<p>The run() method will hold the code to be executed by a thread</p>
<p>The stop(), suspend() and resume() methods are deprecated</p>
<p>Local variables are never shared between threads, threads can share memory on the heap like static variables, instance variables and members of arrays<br />
We covered synchronization, thread scheduling</p>
<p><strong>JDBC</strong><br />
WE covered the regular DB related stuff, how to connect to a DB, explanation what the 4 type of jdbc drivers are, executing, statements, prepared statements and stored procedures</p>
<p><strong>Web programming</strong><br />
We covered servlets, JSP, javabeans, struts, mvc&#8230;pretty much similar stuff I was doing in 2001 but now we have many more frameworks to makes things easier</p>
]]></content:encoded>
			<wfw:commentRss>/index.php/enterprisedev/application-lifecycle-management/java-training-day-5/feed/</wfw:commentRss>
		<slash:comments>0</slash:comments>
		</item>
		<item>
		<title>Java Training Day 4</title>
		<link>/index.php/enterprisedev/appserver/java-training-day-4/</link>
		<comments>/index.php/enterprisedev/appserver/java-training-day-4/#respond</comments>
		<pubDate>Thu, 29 Nov 2012 18:55:00 +0000</pubDate>
		<dc:creator><![CDATA[SQLDenis]]></dc:creator>
				<category><![CDATA[Application Lifecycle Management]]></category>
		<category><![CDATA[Application Server]]></category>
		<category><![CDATA[Java EE]]></category>
		<category><![CDATA[encapsulation]]></category>
		<category><![CDATA[generics]]></category>
		<category><![CDATA[inheritance]]></category>
		<category><![CDATA[java]]></category>
		<category><![CDATA[jvm]]></category>
		<category><![CDATA[polymorphism]]></category>

		<guid isPermaLink="false">/index.php/2012/11/java-training-day-4/</guid>
		<description><![CDATA[Java Day 4

The Collections Framework
Legacy Container Classes
A container is an object that holds a collection of other objects
An array is a simple container. Arrays have a couple of limitations
. The size is fixed
. All the members of the arra&#8230;]]></description>
				<content:encoded><![CDATA[<p>Today was day four of our Java training, we looked at generics, collection and IO today, here is what was covered</p>
<p><strong>The Collections Framework</strong><br />
Legacy Container Classes<br />
A container is an object that holds a collection of other objects<br />
An array is a simple container. Arrays have a couple of limitations<br />
. The size is fixed<br />
. All the members of the array must be of the same type<br />
. You can&#8217;t add methods and attributes to an array</p>
<p>The java.util package has two container classes as well as an supporting interface</p>
<p>Vector class<br />
Has add() and remove() methods, the elementAt() method let&#8217;s you retrieve an element at a specified index<br />
The Stack subclass provides the push() and pop() methods, this will support a LIFO stack</p>
<p>Hashtable class<br />
This is an expandable associative array<br />
The entries are stored as key/value pairs, no dups allowed<br />
The Properties subclass will hold the name/value pairs</p>
<p>The Enumeration interface can be used to traverse either the vector or the hashtable objects. Enumeration  has hasMoreElements() and nextElements() methods</p>
<p>Legacy Container Classes Disadvantages<br />
It is not type safe, the containers can hold any kind of objects<br />
The references must be downcast explicitly if you want to access the objects<br />
They are synchronized, performance hit<br />
Code needs to be rewritten if you want to replace one container with a container from another type</p>
<p>Vector,  Hashtable and the Enumeration interface in Java SE 5+<br />
Vector,  Hashtable and the Enumeration interface have been redefined as generics<br />
Vector is now Vector&lt;E&gt; and it implements the List&lt;E&gt;&gt; interface<br />
Hashtable  is now Hashtable &lt;K,V&gt; and implements the Map&lt;K ,V&gt; interface<br />
Enumeration  is now Enumeration &lt;E&gt;.<br />
Enumeration   has been superseded by the Iterator interface</p>
<p>The enhanced for loop (or for each loop) works automatically with the generic versions of the containers</p>
<p>Collections Framework<br />
The Collections Framework is a unified framework fo manipulating collections of objects<br />
Programmers can choose from a variety of structures</p>
<p>The collections framework consists of:</p>
<ul>
<li>Collection Interfaces &#8211; Represent different types of collections, such as sets, lists and maps. These interfaces form the basis of the framework.</li>
<li>General-purpose Implementations &#8211; Primary implementations of the collection interfaces.</li>
<li>Legacy Implementations &#8211; The collection classes from earlier releases, Vector and Hashtable, have been retrofitted to implement the collection interfaces.</li>
<li>Special-purpose Implementations &#8211; Implementations designed for use in special situations. These implementations display nonstandard performance characteristics, usage restrictions, or behavior.</li>
<li>Concurrent Implementations &#8211; Implementations designed for highly concurrent use.<br />
Wrapper Implementations &#8211; Add functionality, such as synchronization, to other implementations.</li>
<li>Convenience Implementations &#8211; High-performance &#8220;mini-implementations&#8221; of the collection interfaces.</li>
<li>Abstract Implementations &#8211; Partial implementations of the collection interfaces to facilitate custom implementations.</li>
<li>Algorithms &#8211; Static methods that perform useful functions on collections, such as sorting a list.</li>
<li>Infrastructure &#8211; Interfaces that provide essential support for the collection interfaces.</li>
<li>Array Utilities &#8211; Utility functions for arrays of primitives and reference objects. Not, strictly speaking, a part of the Collections Framework, this functionality was added to the Java platform at the same time and relies on some of the same infrastructure.</li>
</ul>
<p>Collection Implementations<br />
The general purpose implementations are summarized in the table below:</p>
<div class="tables">
<table border="0">
<thead>
<tr>
<th colspan="2" rowspan="2" align="center" border="0">&nbsp;</th>
<th colspan="5"><font size="+1">Implementations</font></th>
</tr>
<tr>
<th>Hash Table</th>
<th>Resizable Array</th>
<th>Balanced Tree</th>
<th>Linked List</th>
<th>Hash Table + Linked List</th>
</tr>
<tr>
<th rowspan="4"><font size="+1">Interfaces</font></th>
<th>Set</th>
<td><a href=
"http://docs.oracle.com/javase/6/docs/api/java/utilhttp://docs.oracle.com/javase/6/docs/api/java/util/HashSet.html"><tt>HashSet</tt></a></td>
<td>&nbsp;</td>
<td><a href=
"http://docs.oracle.com/javase/6/docs/api/java/utilhttp://docs.oracle.com/javase/6/docs/api/java/util/TreeSet.html"><tt>TreeSet</tt></a></td>
<td>&nbsp;</td>
<td><a href=
"http://docs.oracle.com/javase/6/docs/api/java/utilhttp://docs.oracle.com/javase/6/docs/api/java/util/LinkedHashSet.html"><tt>LinkedHashSet</tt></a></td>
</tr>
<tr>
<th>List</th>
<td>&nbsp;</td>
<td><a href=
"http://docs.oracle.com/javase/6/docs/api/java/utilhttp://docs.oracle.com/javase/6/docs/api/java/util/ArrayList.html"><tt>ArrayList</tt></a></td>
<td>&nbsp;</td>
<td><a href=
"http://docs.oracle.com/javase/6/docs/api/java/utilhttp://docs.oracle.com/javase/6/docs/api/java/util/LinkedList.html"><tt>LinkedList</tt></a></td>
<td>&nbsp;</td>
</tr>
<tr>
<th>Deque</th>
<td>&nbsp;</td>
<td><a href=
"http://docs.oracle.com/javase/6/docs/api/java/utilhttp://docs.oracle.com/javase/6/docs/api/java/util/ArrayDeque.html"><tt>ArrayDeque</tt></a></td>
<td>&nbsp;</td>
<td><a href=
"http://docs.oracle.com/javase/6/docs/api/java/utilhttp://docs.oracle.com/javase/6/docs/api/java/util/LinkedList.html"><tt>LinkedList</tt></a></td>
<td>&nbsp;</td>
</tr>
<tr>
<th>Map</th>
<td><a href=
"http://docs.oracle.com/javase/6/docs/api/java/utilhttp://docs.oracle.com/javase/6/docs/api/java/util/HashMap.html"><tt>HashMap</tt></a></td>
<td>&nbsp;</td>
<td><a href=
"http://docs.oracle.com/javase/6/docs/api/java/utilhttp://docs.oracle.com/javase/6/docs/api/java/util/TreeMap.html"><tt>TreeMap</tt></a></td>
<td>&nbsp;</td>
<td><a href=
"http://docs.oracle.com/javase/6/docs/api/java/utilhttp://docs.oracle.com/javase/6/docs/api/java/util/LinkedHashMap.html"><tt>LinkedHashMap</tt></a></td>
</tr>
</thead>
</table>
</div>
<p>Code to the interface, not to the class, you can now change the container without having to make code changes</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="java"><thead><tr><td colspan="2"  class="head">Java</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
</pre></td><td class="de1"><pre class="de1">ArrayList<span class="sy0">&lt;</span>Integer<span class="sy0">&gt;</span> &nbsp; list &nbsp;<span class="sy0">=</span> <span class="kw1">new</span> ArrayList<span class="sy0">&lt;</span>Integer<span class="sy0">&gt;</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
LinkedList<span class="sy0">&lt;</span>Integer<span class="sy0">&gt;</span> &nbsp;list <span class="sy0">=</span> &nbsp;<span class="kw1">new</span> LinkedList<span class="sy0">&lt;</span>Integer<span class="sy0">&gt;</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">ArrayList&lt;Integer&gt;   list  = new ArrayList&lt;Integer&gt;();
LinkedList&lt;Integer&gt;  list =  new LinkedList&lt;Integer&gt;();</pre></div></div>


<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="java"><thead><tr><td colspan="2"  class="head">Java</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
</pre></td><td class="de1"><pre class="de1">List<span class="sy0">&lt;</span>Integer<span class="sy0">&gt;</span> list &nbsp;<span class="sy0">=</span> <span class="kw1">new</span> ArrayList<span class="sy0">&lt;</span>Integer<span class="sy0">&gt;</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
List<span class="sy0">&lt;</span>Integer<span class="sy0">&gt;</span> list <span class="sy0">=</span> &nbsp;<span class="kw1">new</span> LinkedList<span class="sy0">&lt;</span>Integer<span class="sy0">&gt;</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">List&lt;Integer&gt; list  = new ArrayList&lt;Integer&gt;();
List&lt;Integer&gt; list =  new LinkedList&lt;Integer&gt;();</pre></div></div>

<p>There is a tutorial availabe on the Oracle website here: http://docs.oracle.com/javase/tutorial/collections/index.html</p>
<p><strong>Exceptions</strong></p>
<p>Traditional<br />
Inefficient, checks must be done even if stuff doesn&#8217;t blow up<br />
Difficult to maintain<br />
Using a return value as both an output value and an error status is confusing<br />
Compiler does not enforce error checking</p>
<p>Using Exceptions<br />
Compiler can enforce proper exception handling<br />
Exception is caught by a block designed to handle the exception<br />
Errors cause by constructors, initializers and other code that doesn&#8217;t return a return value</p>
<p>All exceptions objects are subclasses of java.lang.Throwable and they inherit its methods<br />
Error, Exception and RuntimeException are treated differently by the compiler<br />
Error, this mean as major system-level error occured<br />
RuntimeException , logic or data validateion error that should have been found and fixed during development<br />
Exception, run-time problems like a file that can&#8217;t be found or a network problem</p>
<p>A program can catch exceptions by using a combination of the try, catch, and finally blocks.</p>
<p>The try block identifies a block of code in which an exception can occur.<br />
The catch block identifies a block of code, known as an exception handler, that can handle a particular type of exception.<br />
The finally block identifies a block of code that is guaranteed to execute, and is the right place to close files, recover resources, and otherwise clean up after the code enclosed in the try block.</p>
<p><strong>Assert</strong><br />
This was added in Java 1.4, it is a simple way to check run-time conditions and throw exceptions when you are debugging code<br />
It can be enabled or disabled at runtime, by default they are disabled, use the -ea switch from the command line to enable it. Since Java doesn&#8217;t have a preprocessor this would be a way to do testing without having to modify the code</p>
<p><strong>Input/Output</strong><br />
We looked at IO and the different IO classes to work with files, streams sockets etc etc</p>
<p>Here is a list of the I/O Streams</p>
<p>Byte Streams<br />
handle I/O of raw binary data.</p>
<p>Character Streams<br />
handle I/O of character data, automatically handling translation to and from the local character set.</p>
<p>Buffered Streams<br />
optimize input and output by reducing the number of calls to the native API.</p>
<p>Scanning and Formatting<br />
allows a program to read and write formatted text.</p>
<p>I/O from the Command Line<br />
describes the Standard Streams and the Console object.</p>
<p>Data Streams<br />
handle binary I/O of primitive data type and String values.</p>
<p>Object Streams<br />
handle binary I/O of objects.</p>
<p>That is all for today</p>
]]></content:encoded>
			<wfw:commentRss>/index.php/enterprisedev/appserver/java-training-day-4/feed/</wfw:commentRss>
		<slash:comments>0</slash:comments>
		</item>
		<item>
		<title>Java Training Day 1</title>
		<link>/index.php/enterprisedev/appserver/jee/java-training-day-1/</link>
		<comments>/index.php/enterprisedev/appserver/jee/java-training-day-1/#respond</comments>
		<pubDate>Mon, 26 Nov 2012 19:22:00 +0000</pubDate>
		<dc:creator><![CDATA[SQLDenis]]></dc:creator>
				<category><![CDATA[Application Lifecycle Management]]></category>
		<category><![CDATA[Java EE]]></category>
		<category><![CDATA[JBoss]]></category>
		<category><![CDATA[Websphere]]></category>
		<category><![CDATA[eclipse]]></category>
		<category><![CDATA[java]]></category>
		<category><![CDATA[maven]]></category>
		<category><![CDATA[netbeans]]></category>
		<category><![CDATA[oop]]></category>

		<guid isPermaLink="false">/index.php/2012/11/java-training-day-1/</guid>
		<description><![CDATA[Today is day one of the Java class I am taking this week. I am just dumping some of the stuff that I am hearing about, some of the stuff I might already know.
Java is a general purpose language, it is interperted, output is by&#8230;]]></description>
				<content:encoded><![CDATA[<p>Java Training Day 1<br />
&#8212;<br />
Today is day one of the Java class I am taking this week. I am just dumping some of the stuff that I am hearing about, some of the stuff I might already know.<br />
Java is a general purpose language, it is interperted, output is bytecode, you need to have a Java Virtual Machine on the target machine in order to run a Java program.<br />
A Java file gets compiled to a system-neutral format which is a class file and gets a .class extension, this is compressed and not really human readable</p>
<p>Classes are organized in a group called a package, a package is very similar to a .net namespace. You use this so that you don&#8217;t get collisions if you have two classes with the same name.</p>
<p>You use javadoc to generate standard formatted documentation.</p>
<p><strong>Java community process(JCP)</strong><br />
Formal community-driven process to drive the Java standard, the iste is http://jcp.org/</p>
<p>Deprecate, use annotation and then when you compile your class, you will get a warning so that you will know that you will need to rewrite that piece of the code.</p>
<p>Java is case sensitive, all reserved java keywords are lowercase</p>
<p>In a class the main routine is the start of a program<br />
The main routine will look like this</p>
<p>public static void main(String[] args) {&#8230;&#8230;.}</p>
<p>A java source file has to end in  .java, for example  MyClass.java this will produce a file called MyClass.class. you can&#8217;t have more than one public class in a source file, you cannot have partial classes like in .net either.</p>
<p>Java runs on top of the JVM, the JVM is different per operating system. No need to recompile Java&#8230;Write once run everywhere&#8230;.some people like to say write once&#8230;debug everywhere  <img src="https://s.w.org/images/core/emoji/2/72x72/1f642.png" alt="🙂" class="wp-smiley" style="height: 1em; max-height: 1em;" /></p>
<p><strong>Java versions and flavors</strong><br />
Java 1.0, 1.1<br />
Java 2 	1.2, 1.3, 1.4, 1.5<br />
Java 5  also sometimes called 1.5, 1.5 is when they shifted to integers again<br />
Java 6<br />
Java 7</p>
<p>The different flavors of Java and their old and new names<br />
J2SE  	Java SE<br />
J2EE	Java EE<br />
J2ME	Java ME</p>
<p><strong>Base libraries to provide common functionality</strong><br />
Here are just some of them</p>
<p>java.lang<br />
java.lang contains fundamental classes and interfaces closely tied to the language and runtime system.</p>
<p>java.io/java.nio/java.net<br />
I/O and networking access the platform file system, and more generally networks through the java.io, java.nio and java.net packages. </p>
<p>java.math<br />
Mathematics package: java.math provides mathematical expressions and evaluation, as well as arbitrary-precision decimal and integer number datatypes.</p>
<p>java.text<br />
Text: java.text deals with text, dates, numbers, and messages.</p>
<p>javax.crypto<br />
Security is provided by java.security and encryption services are provided by javax.crypto.</p>
<p>java.sql<br />
Databases: access to SQL databases via java.sql</p>
<p>java.beans<br />
Java Beans: java.beans provides ways to manipulate reusable components.</p>
<p><strong>Types of Java Software</strong><br />
Class Libraries<br />
Standalone Java<br />
Applets<br />
Servlets, JSP and tag libraries<br />
Enterprise Java Beans</p>
<p><strong>Enterprise Application Servers</strong><br />
Here are a couple of Java Enterprise Application Servers and their vendors<br />
GlassFish	Oracle/Sun<br />
Weblogic	Oracle/BEA<br />
Webshere	IBM<br />
JBoss		Red Hat</p>
<p><strong>Environment variables</strong><br />
Oh how I used to hate dealing with these variables, stuff wouldn&#8217;t work if this wasn&#8217;t setup correctly<br />
There are a couple of environment variables that you need</p>
<p><strong>JAVA_HOME</strong><br />
This will be use by the tools in the JDK</p>
<p><strong>PATH</strong><br />
This is used by the operating system to find the compiler and other programs, add the/bin directory</p>
<p><strong>CLASSPATH</strong><br />
This is used by the Java Virtual Machine to find application specific classes at compile as well as run time</p>
<p><strong>JDK Bin directory</strong><br />
THe JDK Bin directory holds all the programs used by the JDK to do what is needed for Java to function<br />
There are programs to compile java, to run java, to create JAR files, to create javadoc documentation files etc etc<br />
Mine is installed here C:Program FilesJavajdk1.7.0_07bin</p>
<p>Here is screenshot of my directory with some of those programs</p>
<div class="image_block"><a href="/wp-content/uploads/blogs/EnterpriseDev/JavaBinDirectory.PNG?mtime=1353948732"><img alt="" src="/wp-content/uploads/blogs/EnterpriseDev/JavaBinDirectory.PNG?mtime=1353948732" width="795" height="635" /></a></div>
<p>There is something called jvisualvm.exe, this is know as Java VisualVM, from the Oracle documentation: http://docs.oracle.com/javase/6/docs/technotes/tools/share/jvisualvm.html<br />
Java VisualVM is an intuitive graphical user interface that provides detailed information about Java technology-based applications (Java applications) while they are running on a given Java Virtual Machine (JVM*). The name Java VisualVM comes from the fact that Java VisualVM provides information about the JVM software visually.</p>
<p>Java VisualVM combines several monitoring, troubleshooting, and profiling utilities into a single tool. For example, most of the functionality offered by the standalone tools jmap, jinfo, jstat and jstack have been integrated into Java VisualVM. Other functionalities, such as some of those offered by the JConsole tool, can be added as optional plug-ins.</p>
<p>Here are some screenshots of the tool in action while running against Eclipse</p>
<div class="image_block"><a href="/wp-content/uploads/blogs/EnterpriseDev/VisualVMMonitor.PNG?mtime=1353948863"><img alt="" src="/wp-content/uploads/blogs/EnterpriseDev/VisualVMMonitor.PNG?mtime=1353948863" width="929" height="579" /></a></div>
<div class="image_block"><a href="/wp-content/uploads/blogs/EnterpriseDev/VisualVMThreads.PNG?mtime=1353948850"><img alt="" src="/wp-content/uploads/blogs/EnterpriseDev/VisualVMThreads.PNG?mtime=1353948850" width="919" height="581" /></a></div>
<div class="image_block"><a href="/wp-content/uploads/blogs/EnterpriseDev/VisualVMThreadsTable.PNG?mtime=1353948837"><img alt="" src="/wp-content/uploads/blogs/EnterpriseDev/VisualVMThreadsTable.PNG?mtime=1353948837" width="930" height="594" /></a></div>
<p>Always include . as part of the classpath, this ensure that the current directory is searched in case of a default package</p>
<p><strong>JAR</strong><br />
Java Archive, this is an archived file holding all the classes and a manifest describing what is in the archive</p>
<p>There are related files that are used based on the type of application, here is what info wikipedia has listed</p>
<p>WAR (Web application archive) files, also Java archives, store XML files, Java classes, JavaServer Pages and other objects for Web Applications.<br />
RAR (resource adapter archive) files (not to be confused with the RAR file format), also Java archives, store XML files, Java classes and other objects for J2EE Connector Architecture (JCA) applications.<br />
EAR (enterprise archive) files provide composite Java archives which combine XML files, Java classes and other objects including JAR, WAR and RAR Java archive files for Enterprise Applications.<br />
SAR (service archive) is similar to EAR. It provides a service.xml file and accompanying JAR files.<br />
APK (Android Application Package), a variant of the Java archive format, is used for Android applications.[3]</p>
<p>We compiled and ran some programs from the command line, it is amazing how many people have problems with the path and classpath variables to get it to work&#8230;but we all did and now we are allowed to use Eclipese or Netbeans instead</p>
<p><strong>Javadoc comments</strong><br />
We looked at how to do javadoc comments, basically the first line has to start with /**</p>
<p>There are also tags that you can use, it is recommended to use this order</p>
<p>@author (classes and interfaces only, required)<br />
@version (classes and interfaces only, required. See footnote 1)<br />
@param (methods and constructors only)<br />
@return (methods only)<br />
@exception (@throws is a synonym added in Javadoc 1.2)<br />
@see<br />
@since<br />
@serial (or @serialField or @serialData)<br />
@deprecated (see How and When To Deprecate APIs)</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="java"><thead><tr><td colspan="2"  class="head">Java</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
</pre></td><td class="de1"><pre class="de1">Here is an example
&nbsp;
&nbsp; &nbsp;<span class="co3">/**</span>
<span class="co3">&nbsp; &nbsp; &nbsp;* Disposes of this graphics context once it is no longer </span>
<span class="co3">&nbsp; &nbsp; &nbsp;* referenced.</span>
<span class="co3">&nbsp; &nbsp; &nbsp;*</span>
<span class="co3">&nbsp; &nbsp; &nbsp;* @see &nbsp; &nbsp; &nbsp; #dispose()</span>
<span class="co3">&nbsp; &nbsp; &nbsp;* @since &nbsp; &nbsp; 1.0</span>
<span class="co3">&nbsp; &nbsp; &nbsp;*/</span>
&nbsp; &nbsp; <span class="kw1">public</span> <span class="kw4">void</span> finalize<span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; dispose<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; <span class="br0">&#125;</span>
<span class="br0">&#125;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">Here is an example

   /**
     * Disposes of this graphics context once it is no longer 
     * referenced.
     *
     * @see       #dispose()
     * @since     1.0
     */
    public void finalize() {
        dispose();
    }
}</pre></div></div>

<p><strong>Identifiers</strong><br />
Can have letters and numbers, cannot begin with a digit</p>
<p>The reason most programming language don&#8217;t allow identifiers to start with a digit is simple</p>
<p>int 6;<br />
6=5;</p>
<p>See that? Since an identifier can be 1 character, you could create something named 5 or 6 or even 256, this rule prevents you doing such stuff</p>
<p>Variables can me made constant by using the final keyword for example</p>
<p>final int MAX_VALUE = 40;</p>
<p>You can also do this<br />
final int BOILING_POINT;<br />
BOILING_POINT; = 100;</p>
<p>Once you assign the value, you can&#8217;t change BOILING_POINT anymore</p>
<p>We learned about scope and learned that depending on where the variable is declared, it might not be visible outside of the block, this is the same as in other languages (local variables)</p>
<p>When you want to have only one copy of a class variable, make it static, then if you instatiate 100 classes they all point to the same variable instead of having 100 variables in memory<br />
Static variables are available to use as soon as a class is loaded</p>
<p>Brain fried&#8230;&#8230;time to go&#8230;&#8230;..  back tomorrow</p>
]]></content:encoded>
			<wfw:commentRss>/index.php/enterprisedev/appserver/jee/java-training-day-1/feed/</wfw:commentRss>
		<slash:comments>0</slash:comments>
		</item>
		<item>
		<title>Back to Java after an eleven year hiatus, what are some good resources you recommend?</title>
		<link>/index.php/enterprisedev/appserver/jee/back-to-java-after-an/</link>
		<comments>/index.php/enterprisedev/appserver/jee/back-to-java-after-an/#respond</comments>
		<pubDate>Sun, 25 Nov 2012 22:34:00 +0000</pubDate>
		<dc:creator><![CDATA[SQLDenis]]></dc:creator>
				<category><![CDATA[BEA WebLogic and Aqualogic]]></category>
		<category><![CDATA[Java EE]]></category>
		<category><![CDATA[Websphere]]></category>
		<category><![CDATA[eclipse]]></category>
		<category><![CDATA[java]]></category>
		<category><![CDATA[maven]]></category>
		<category><![CDATA[netbeans]]></category>

		<guid isPermaLink="false">/index.php/2012/11/back-to-java-after-an/</guid>
		<description><![CDATA[This week eleven coworkers and myself will be in Java training for most of the time, I haven't touched Java since 2001. I did a bunch of research over the 4 day weekend to get a little head start.

I installed Netbeans and Eclipse to see how they are&#8230;]]></description>
				<content:encoded><![CDATA[<p><a href="http://www.flickr.com/photos/mrjoro/22752982/" title="Java Logo by mrjoro, on Flickr"><img src="http://farm1.staticflickr.com/17/22752982_28bfc98f68_m.jpg" width="240" height="180" alt="Java Logo" /></a></p>
<p>This week eleven coworkers and myself will be in Java training for most of the time, I haven&#8217;t touched Java since 2001. I did a bunch of research over the 4 day weekend to get a little head start.</p>
<p>I installed Netbeans and Eclipse to see how they are different<br />
I played around with Tapestry and took a look at Struts<br />
I used JUnit to write a couple of tests<br />
I installed Maven and used that to bring down the sample Tapestry project<br />
I installed and configured HyperSQL (with sa and blank password&#8230;  ouch!!!)</p>
<p>It seems to me that there are a whole lot of things that I need to know, twelve years ago none of this stuff existed. I also seems to me that the language itself hasn&#8217;t changed so much compared to C#. I might also take a look at Scala down the road, some of that stuff seems interesting. </p>
<p>When I used Java in 2000 and 2001 it was primarily to do JSP development. The main project at that time was converting a ColdFusion site to JSP. The IDE that we used at that time was Kawa, we also gave Visual Cafe a spin. I must say that the IDE is much much better than what existed twelve years ago. Eclipse has a robust plugin system and computers have advanced in speed over the past twelve years so that Java apps don&#8217;t feels slow on the desktop anymore</p>
<p>Over the next five days, I will blog about what I did and learned, I will also probably put some stuff on our wiki so that I can have it as a reference/cheat sheet</p>
<p>Here is my question to you&#8230;..What are some of your favorite resources for Java and the Java ecosystem? I am looking for blogs to subscribe to, people to follow on twitter, if you have a favorite Java book then tell me about it. My favorite books from 2001 were Core Java, Volume I and II, I am happy to see that the 9th edition is coming out on December 10th: <a href="http://www.amazon.com/gp/product/0137081898/ref=as_li_ss_tl?ie=UTF8&amp;camp=1789&amp;creative=390957&amp;creativeASIN=0137081898&amp;linkCode=as2&amp;tag=sql08-20">Core Java Volume I&#8211;Fundamentals (9th Edition) (Core Series)</a>. If you know of any good podcasts then tell me about those as well</p>
]]></content:encoded>
			<wfw:commentRss>/index.php/enterprisedev/appserver/jee/back-to-java-after-an/feed/</wfw:commentRss>
		<slash:comments>0</slash:comments>
		</item>
		<item>
		<title>My First Android Application (Ubuntu Linux)</title>
		<link>/index.php/desktopdev/suntech/java/my-first-android-application-ubuntu/</link>
		<comments>/index.php/desktopdev/suntech/java/my-first-android-application-ubuntu/#comments</comments>
		<pubDate>Wed, 05 Jan 2011 17:46:00 +0000</pubDate>
		<dc:creator><![CDATA[Rob Earl]]></dc:creator>
				<category><![CDATA[Java]]></category>
		<category><![CDATA[android]]></category>
		<category><![CDATA[java]]></category>
		<category><![CDATA[linux]]></category>
		<category><![CDATA[ubuntu]]></category>

		<guid isPermaLink="false">/index.php/2011/01/my-first-android-application-ubuntu/</guid>
		<description><![CDATA[This post details my first adventure into developing for the Android platform and the steps taken to get the HelloWorld application to run.

Download the Linux SDK from: http://developer.android.com/sdk/index.html
Extract the archive and take note of&#8230;]]></description>
				<content:encoded><![CDATA[<p>This post details my first adventure into developing for the Android platform and the steps taken to get the HelloWorld application to run.</p>
<ol>
<li>Download the Linux SDK from: http://developer.android.com/sdk/index.html</li>
<li>Extract the archive and take note of the directory</li>
<li>Install Eclipse (`apt-get install eclipse`)</li>
<li>Install Eclipse plugin
<ol>
<li>Help-&gt;Install Software</li>
<li>Add repository: https://dl-ssl.google.com/android/eclipse</li>
<li>Select Developer Tools</li>
<li>Read and accept licenses</li>
</ol>
</li>
<li>Configure Eclipse
<ol>
<li>Windows-&gt;Preferences-&gt;Android</li>
<li>Set SDK Location</li>
<li>Select OK</li>
</ol>
</li>
<li>Setup SDK and Virtual Device
<ol>
<li>From Eclipse: Window-&gt;Android SDK and AVD Manager-&gt;Available Packages</li>
<li>Select Android Repository-&gt;Install Selected</li>
<li>Select Virtual devices-&gt;New: Name the device and select the target API version</li>
</ol>
</li>
<li>Create Android Project in Eclipse
<ol>
<li>Project name: HelloAndroid</li>
<li>Application name: Hello</li>
<li>Package name: com.example.helloandroid</li>
<li>Create Activity: HelloAndroid</li>
<li>Build Target: Same as the target as selected for Virtual Device</li>
</ol>
</li>
<li>Add the code below to src/com.example.helloandroid/HelloAndroid.java</li>
<li>Create a new Runtime configuration
<ol>
<li>Run-&gt;Run Configurations-&gt;Android-&gt;New</li>
<li>Project: HelloAndroid</li>
<li>Select Target tab and choose the Virtual Device configured earlier</li>
</ol>
</li>
<li>Run!</li>
<li>After a couple of minutes the emulator should boot and display the HelloWorld application (You may need to unlock the screen first)</li>
</ol>
<p> </p>
<h2>HelloAndroid.java</h2>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="java"><thead><tr><td colspan="2"  class="head">Java</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
</pre></td><td class="de1"><pre class="de1"><span class="kw1">package</span> <span class="co2">com.example.helloandroid</span><span class="sy0">;</span>
&nbsp;
<span class="kw1">import</span> <span class="co2">android.app.Activity</span><span class="sy0">;</span>
<span class="kw1">import</span> <span class="co2">android.os.Bundle</span><span class="sy0">;</span>
<span class="kw1">import</span> <span class="co2">android.widget.TextView</span><span class="sy0">;</span>
&nbsp;
<span class="kw1">public</span> <span class="kw1">class</span> HelloAndroid <span class="kw1">extends</span> Activity <span class="br0">&#123;</span>
&nbsp; &nbsp;<span class="co3">/** Called when the activity is first created. */</span>
&nbsp; &nbsp;@Override
&nbsp; &nbsp;<span class="kw1">public</span> <span class="kw4">void</span> onCreate<span class="br0">&#40;</span>Bundle savedInstanceState<span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp;<span class="kw1">super</span>.<span class="me1">onCreate</span><span class="br0">&#40;</span>savedInstanceState<span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp;TextView tv <span class="sy0">=</span> <span class="kw1">new</span> TextView<span class="br0">&#40;</span><span class="kw1">this</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp;tv.<span class="me1">setText</span><span class="br0">&#40;</span><span class="st0">&quot;Hello, Android&quot;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp;setContentView<span class="br0">&#40;</span>tv<span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp;<span class="br0">&#125;</span>
<span class="br0">&#125;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">package com.example.helloandroid;

import android.app.Activity;
import android.os.Bundle;
import android.widget.TextView;

public class HelloAndroid extends Activity {
   /** Called when the activity is first created. */
   @Override
   public void onCreate(Bundle savedInstanceState) {
       super.onCreate(savedInstanceState);
       TextView tv = new TextView(this);
       tv.setText("Hello, Android");
       setContentView(tv);
   }
}</pre></div></div>

<p>For more information see the Android development documentation:</p>
<p>http://developer.android.com/sdk/installing.html<br />http://developer.android.com/sdk/eclipse-adt.html#installing<br />http://developer.android.com/resources/tutorials/hello-world.html</p>
]]></content:encoded>
			<wfw:commentRss>/index.php/desktopdev/suntech/java/my-first-android-application-ubuntu/feed/</wfw:commentRss>
		<slash:comments>4</slash:comments>
		</item>
		<item>
		<title>Integrating jNEAT into a Custom Simulation</title>
		<link>/index.php/desktopdev/suntech/java/integrating-jneat-into-a-custom-simulati/</link>
		<comments>/index.php/desktopdev/suntech/java/integrating-jneat-into-a-custom-simulati/#comments</comments>
		<pubDate>Sat, 18 Dec 2010 17:40:19 +0000</pubDate>
		<dc:creator><![CDATA[Rob Earl]]></dc:creator>
				<category><![CDATA[Java]]></category>
		<category><![CDATA[ai]]></category>
		<category><![CDATA[artificial intelligence]]></category>
		<category><![CDATA[java]]></category>
		<category><![CDATA[jneat]]></category>
		<category><![CDATA[neat]]></category>
		<category><![CDATA[neural network]]></category>

		<guid isPermaLink="false">/index.php/2010/12/integrating-jneat-into-a-custom-simulati/</guid>
		<description><![CDATA[jNEAT is a Java implementation of the NEAT method. NEAT is a technique for evolving neural networks, which uses genetic algorithms to learn network structures aswell as weights. For more information there are several papers at the links above.

Buildi&#8230;]]></description>
				<content:encoded><![CDATA[<p><a href="http://nn.cs.utexas.edu/?neat-java">jNEAT</a> is a Java implementation of the <a href="http://nn.cs.utexas.edu/?neat">NEAT</a> method. NEAT is a technique for evolving <a href="http://en.wikipedia.org/wiki/Artificial_neural_network">neural networks</a>, which uses genetic algorithms to learn network structures aswell as weights. For more information there are several papers at the links above.</p>
<h2>Building jNEAT</h2>
<p>Download the latest version: http://nn.cs.utexas.edu/?neat-java<br />
Download and install Apache Ant: http://ant.apache.org/ (`apt-get install ant` on Ubuntu/Debian)</p>
<p>It&#8217;s fairly straightforward to build a jNEAT library using Ant. Extract the archive somewhere and place the following code into build.xml in the root directory.</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="xml"><thead><tr><td colspan="2"  class="head">XML</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
</pre></td><td class="de1"><pre class="de1"><span class="sc3"><span class="re1">&lt;project</span> <span class="re0">name</span>=<span class="st0">&quot;jneat&quot;</span> <span class="re0">default</span>=<span class="st0">&quot;jar&quot;</span> <span class="re0">basedir</span>=<span class="st0">&quot;.&quot;</span><span class="re2">&gt;</span></span>
&nbsp; <span class="sc3"><span class="re1">&lt;property</span> <span class="re0">name</span>=<span class="st0">&quot;src&quot;</span> <span class="re0">value</span>=<span class="st0">&quot;.&quot;</span><span class="re2">/&gt;</span></span>
&nbsp;
&nbsp; <span class="sc3"><span class="re1">&lt;target</span> <span class="re0">name</span>=<span class="st0">&quot;compile&quot;</span><span class="re2">&gt;</span></span>
&nbsp; &nbsp; <span class="sc3"><span class="re1">&lt;javac</span> <span class="re0">srcdir</span>=<span class="st0">&quot;${src}&quot;</span><span class="re2">/&gt;</span></span>
&nbsp; <span class="sc3"><span class="re1">&lt;/target<span class="re2">&gt;</span></span></span>
&nbsp;
&nbsp; <span class="sc3"><span class="re1">&lt;target</span> <span class="re0">name</span>=<span class="st0">&quot;compile-debug&quot;</span><span class="re2">&gt;</span></span>
&nbsp; &nbsp; <span class="sc3"><span class="re1">&lt;javac</span> <span class="re0">debug</span>=<span class="st0">&quot;on&quot;</span> <span class="re0">srcdir</span>=<span class="st0">&quot;${src}&quot;</span><span class="re2">/&gt;</span></span>
&nbsp; <span class="sc3"><span class="re1">&lt;/target<span class="re2">&gt;</span></span></span>
&nbsp;
&nbsp; <span class="sc3"><span class="re1">&lt;target</span> <span class="re0">name</span>=<span class="st0">&quot;jar&quot;</span> <span class="re0">depends</span>=<span class="st0">&quot;compile&quot;</span><span class="re2">&gt;</span></span>
&nbsp; &nbsp; <span class="sc3"><span class="re1">&lt;jar</span> <span class="re0">jarfile</span>=<span class="st0">&quot;jneat.jar&quot;</span> <span class="re0">basedir</span>=<span class="st0">&quot;${src}&quot;</span><span class="re2">&gt;</span></span>
&nbsp; &nbsp; &nbsp; &nbsp;<span class="sc3"><span class="re1">&lt;include</span> <span class="re0">name</span>=<span class="st0">&quot;gui/*.class&quot;</span><span class="re2">/&gt;</span></span>
&nbsp; &nbsp; &nbsp; &nbsp;<span class="sc3"><span class="re1">&lt;include</span> <span class="re0">name</span>=<span class="st0">&quot;jneat/*.class&quot;</span><span class="re2">/&gt;</span></span>
&nbsp; &nbsp; &nbsp; &nbsp;<span class="sc3"><span class="re1">&lt;include</span> <span class="re0">name</span>=<span class="st0">&quot;jNeatCommon/*.class&quot;</span><span class="re2">/&gt;</span></span>
&nbsp; &nbsp; &nbsp; &nbsp;<span class="sc3"><span class="re1">&lt;include</span> <span class="re0">name</span>=<span class="st0">&quot;log/*.class&quot;</span><span class="re2">/&gt;</span></span>
&nbsp; &nbsp; <span class="sc3"><span class="re1">&lt;/jar<span class="re2">&gt;</span></span></span>
&nbsp; <span class="sc3"><span class="re1">&lt;/target<span class="re2">&gt;</span></span></span>
<span class="sc3"><span class="re1">&lt;/project<span class="re2">&gt;</span></span></span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">&lt;project name="jneat" default="jar" basedir="."&gt;
  &lt;property name="src" value="."/&gt;

  &lt;target name="compile"&gt;
    &lt;javac srcdir="${src}"/&gt;
  &lt;/target&gt;

  &lt;target name="compile-debug"&gt;
    &lt;javac debug="on" srcdir="${src}"/&gt;
  &lt;/target&gt;

  &lt;target name="jar" depends="compile"&gt;
    &lt;jar jarfile="jneat.jar" basedir="${src}"&gt;
       &lt;include name="gui/*.class"/&gt;
       &lt;include name="jneat/*.class"/&gt;
       &lt;include name="jNeatCommon/*.class"/&gt;
       &lt;include name="log/*.class"/&gt;
    &lt;/jar&gt;
  &lt;/target&gt;
&lt;/project&gt;</pre></div></div>

<p>Running `ant` from a command line in the jNEAT root directory will produce jneat.jar which can be added to your development environment such as:</p>
<p>NetBeans: Right click Libraries->Add JAR/Folder<br />
Eclipse: Right click project->Build Path->Add External Archives</p>
<h2>Create a jNEAT Population</h2>
<p>Import the jNEAT library.</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="java"><thead><tr><td colspan="2"  class="head">Java</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
</pre></td><td class="de1"><pre class="de1"><span class="kw1">import</span> <span class="co2">jneat.*</span><span class="sy0">;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">import jneat.*;</pre></div></div>

<p>Initialise a jNEAT population:</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="java"><thead><tr><td colspan="2"  class="head">Java</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
</pre></td><td class="de1"><pre class="de1">neatPop <span class="sy0">=</span> <span class="kw1">new</span> Population<span class="br0">&#40;</span><span class="nu0">30</span> <span class="coMULTI">/* population size */</span>, <span class="nu0">9</span> <span class="coMULTI">/* network inputs */</span> , <span class="nu0">2</span> <span class="coMULTI">/* network outputs */</span>, <span class="nu0">5</span> <span class="coMULTI">/* max index of nodes */</span>, <span class="kw2">true</span> <span class="coMULTI">/* recurrent */</span>, <span class="nu0">0.5</span> <span class="coMULTI">/* probability of connecting two nodes */</span> <span class="br0">&#41;</span><span class="sy0">;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">neatPop = new Population(30 /* population size */, 9 /* network inputs */ , 2 /* network outputs */, 5 /* max index of nodes */, true /* recurrent */, 0.5 /* probability of connecting two nodes */ );</pre></div></div>

<p>The only parameters we need to worry about are the population size, network inputs and network outputs. The value of these depend on the simulation. Associate each member of this population with one member of your simulation.</p>
<h2>Evaluation</h2>
<p>Evaluate the population by running your simulation for a set period of time, query each organism&#8217;s network for actions every update.</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="java"><thead><tr><td colspan="2"  class="head">Java</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
</pre></td><td class="de1"><pre class="de1"><span class="co1">// Within main simulation loop</span>
<span class="co1">//</span>
&nbsp;
<span class="kw3">Vector</span> neatOrgs <span class="sy0">=</span> neatPop.<span class="me1">getOrganisms</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
<span class="kw1">for</span><span class="br0">&#40;</span><span class="kw4">int</span> i<span class="sy0">=</span><span class="nu0">0</span><span class="sy0">;</span>i<span class="sy0">&lt;</span>neatOrgs.<span class="me1">size</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>i<span class="sy0">++</span><span class="br0">&#41;</span>
<span class="br0">&#123;</span>
&nbsp; <span class="co1">// Extract the neural network from the jNEAT organism.</span>
&nbsp; Network brain <span class="sy0">=</span> <span class="br0">&#40;</span><span class="br0">&#40;</span>Organism<span class="br0">&#41;</span>neatOrgs.<span class="me1">get</span><span class="br0">&#40;</span>i<span class="br0">&#41;</span><span class="br0">&#41;</span>.<span class="me1">getNet</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
&nbsp; <span class="kw4">double</span> inputs<span class="br0">&#91;</span><span class="br0">&#93;</span> <span class="sy0">=</span> <span class="kw1">new</span> <span class="kw4">double</span><span class="br0">&#91;</span>numInputs<span class="sy0">+</span><span class="nu0">1</span><span class="br0">&#93;</span><span class="sy0">;</span>
&nbsp; inputs<span class="br0">&#91;</span>numInputs<span class="br0">&#93;</span> <span class="sy0">=</span> <span class="sy0">-</span><span class="nu0">1.0</span><span class="sy0">;</span> <span class="co1">// Bias</span>
&nbsp; 
&nbsp; <span class="co1">// Populate the rest of &quot;inputs&quot; from this organism's status in the simulation.</span>
&nbsp; <span class="co1">//</span>
&nbsp; <span class="co1">//</span>
&nbsp;
&nbsp; <span class="co1">// Load these inputs into the neural network.</span>
&nbsp; brain.<span class="me1">load_sensors</span><span class="br0">&#40;</span>inputs<span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
&nbsp; <span class="kw4">int</span> net_depth <span class="sy0">=</span> brain.<span class="me1">max_depth</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; <span class="co1">// first activate from sensor to next layer....</span>
&nbsp; brain.<span class="me1">activate</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
&nbsp; <span class="co1">// next activate each layer until the last level is reached</span>
&nbsp; <span class="kw1">for</span> <span class="br0">&#40;</span><span class="kw4">int</span> relax <span class="sy0">=</span> <span class="nu0">0</span><span class="sy0">;</span> relax <span class="sy0">&lt;=</span> net_depth<span class="sy0">;</span> relax<span class="sy0">++</span><span class="br0">&#41;</span>
&nbsp; <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; brain.<span class="me1">activate</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; <span class="br0">&#125;</span>
&nbsp; &nbsp; &nbsp; &nbsp; 
&nbsp; <span class="co1">// Retrieve outputs from the final layer.</span>
&nbsp; <span class="kw4">double</span> output1 <span class="sy0">=</span> <span class="br0">&#40;</span><span class="br0">&#40;</span>NNode<span class="br0">&#41;</span> brain.<span class="me1">getOutputs</span><span class="br0">&#40;</span><span class="br0">&#41;</span>.<span class="me1">elementAt</span><span class="br0">&#40;</span><span class="nu0">0</span><span class="br0">&#41;</span><span class="br0">&#41;</span>.<span class="me1">getActivation</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span> 
&nbsp; <span class="kw4">double</span> output2 <span class="sy0">=</span> <span class="br0">&#40;</span><span class="br0">&#40;</span>NNode<span class="br0">&#41;</span> brain.<span class="me1">getOutputs</span><span class="br0">&#40;</span><span class="br0">&#41;</span>.<span class="me1">elementAt</span><span class="br0">&#40;</span><span class="nu0">1</span><span class="br0">&#41;</span><span class="br0">&#41;</span>.<span class="me1">getActivation</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
&nbsp; <span class="co1">// Use the outputs to modify the associated member of the population.</span>
&nbsp; <span class="co1">//</span>
&nbsp; <span class="co1">//</span>
&nbsp;
<span class="br0">&#125;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">// Within main simulation loop
//

Vector neatOrgs = neatPop.getOrganisms();

for(int i=0;i&lt;neatOrgs.size();i++)
{
  // Extract the neural network from the jNEAT organism.
  Network brain = ((Organism)neatOrgs.get(i)).getNet();

  double inputs[] = new double[numInputs+1];
  inputs[numInputs] = -1.0; // Bias
  
  // Populate the rest of "inputs" from this organism's status in the simulation.
  //
  //

  // Load these inputs into the neural network.
  brain.load_sensors(inputs);

  int net_depth = brain.max_depth();
  // first activate from sensor to next layer....
  brain.activate();

  // next activate each layer until the last level is reached
  for (int relax = 0; relax &lt;= net_depth; relax++)
  {
      brain.activate();
  }
        
  // Retrieve outputs from the final layer.
  double output1 = ((NNode) brain.getOutputs().elementAt(0)).getActivation(); 
  double output2 = ((NNode) brain.getOutputs().elementAt(1)).getActivation();

  // Use the outputs to modify the associated member of the population.
  //
  //

}</pre></div></div>

<h2>Evolution</h2>
<p>After this evaluation process has run for enough iterations, assign each member a fitness and move to the next generation by instructing jNEAT to evolve the population:</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="java"><thead><tr><td colspan="2"  class="head">Java</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
</pre></td><td class="de1"><pre class="de1"><span class="kw3">Vector</span> neatOrgs <span class="sy0">=</span> neatPop.<span class="me1">getOrganisms</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
<span class="kw1">for</span><span class="br0">&#40;</span><span class="kw4">int</span> i<span class="sy0">=</span><span class="nu0">0</span><span class="sy0">;</span>i<span class="sy0">&lt;</span>neatOrgs.<span class="me1">size</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>i<span class="sy0">++</span><span class="br0">&#41;</span>
<span class="br0">&#123;</span>
&nbsp; <span class="co1">// Assign each organism a &quot;fitness&quot;. A measure of how well the organism performed since the last evolution.</span>
&nbsp; <span class="br0">&#40;</span><span class="br0">&#40;</span>Organism<span class="br0">&#41;</span>neatOrgs.<span class="me1">get</span><span class="br0">&#40;</span>i<span class="br0">&#41;</span><span class="br0">&#41;</span>.<span class="me1">setFitness</span><span class="br0">&#40;</span>fitness<span class="br0">&#41;</span><span class="sy0">;</span>
<span class="br0">&#125;</span>
&nbsp;
neatPop.<span class="me1">epoch</span><span class="br0">&#40;</span>generation<span class="sy0">++</span><span class="br0">&#41;</span><span class="sy0">;</span> <span class="co1">// Evolve the population and increment the generation.</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">Vector neatOrgs = neatPop.getOrganisms();

for(int i=0;i&lt;neatOrgs.size();i++)
{
  // Assign each organism a "fitness". A measure of how well the organism performed since the last evolution.
  ((Organism)neatOrgs.get(i)).setFitness(fitness);
}

neatPop.epoch(generation++); // Evolve the population and increment the generation.</pre></div></div>

<h2>Examining the Population</h2>
<p>There are a couple of methods which can be used to see if the population is changing at all:</p>
<p><code class="codespan">neatPop.viewtext();</code></p>
<p>This will print a breakdown of the population and can help diagnose problems if you aren&#8217;t seeing any improvements.</p>
<p>jNEAT also comes with a handy GUI which can display a visual representation of each organism&#8217;s  neural network. Before doing this the population needs to be saved to a file:</p>
<p><code class="codespan">neatPop.print_to_file_by_species("SavedPopulation.txt");</code></p>
<p>To run the GUI, open a command line and run the following:</p>
<pre>cd /path/to/jNEAT/gui/
./run.sh gui.MainGui</pre>
<p>Select the View Graph tab, click Load Pop and locate the saved population. Selecting an organism from the list on the left will display its network structure.</p>
<p><img src="/wp-content/uploads/users/robearl/jNEATGUI.png" alt="" title="" /></p>
]]></content:encoded>
			<wfw:commentRss>/index.php/desktopdev/suntech/java/integrating-jneat-into-a-custom-simulati/feed/</wfw:commentRss>
		<slash:comments>1</slash:comments>
		</item>
		<item>
		<title>Calling Web Services from JSP</title>
		<link>/index.php/webdev/serverprogramming/jsp/calling-web-services-from-jsp/</link>
		<comments>/index.php/webdev/serverprogramming/jsp/calling-web-services-from-jsp/#comments</comments>
		<pubDate>Sat, 18 Dec 2010 14:40:51 +0000</pubDate>
		<dc:creator><![CDATA[Rob Earl]]></dc:creator>
				<category><![CDATA[JSP / Servlets]]></category>
		<category><![CDATA[eclipse]]></category>
		<category><![CDATA[java]]></category>
		<category><![CDATA[jsp]]></category>
		<category><![CDATA[web services]]></category>

		<guid isPermaLink="false">/index.php/2010/12/calling-web-services-from-jsp/</guid>
		<description><![CDATA[This blog will demonstrate the steps to generate a Web Service Client and test JSP files in Eclipse. Finally, it will show a basic JSP example which uses the generated client to call a remote Web Service.

Setup Tomcat

Download and extract Tomcat 6&#8230;]]></description>
				<content:encoded><![CDATA[<p>This blog will demonstrate the steps to generate a Web Service Client and test JSP files in Eclipse. Finally, it will show a basic JSP example which uses the generated client to call a remote Web Service.</p>
<h2>Setup Tomcat</h2>
<p>Download and extract <a href="http://tomcat.apache.org/download-60.cgi">Tomcat 6.0</a>. If you&#8217;re using Ubuntu and want to use the system installed tomcat, follow <a href="http://ubuntuforums.org/showthread.php?p=8541057">these instructions</a>.</p>
<h2>Create an Eclipse Project</h2>
<p>Open Eclipse and create a new Dynamic Web Project:</p>
<p><img src="/wp-content/uploads/users/robearl/DynamicWebProject.png" alt="" title="" /></p>
<p>Give your project a name (JSPWSClient will do) and click &#8220;New&#8221; to add a New Server Runtime Environment. Select Apache Tomcat v6.0 and locate the directory you extracted to earlier. </p>
<p><img src="/wp-content/uploads/users/robearl/Tomcat.png" alt="" title="" /></p>
<h2>Create Web Service Client</h2>
<p>The client will use the Local Time Web Service from http://ripedevelopment.com/testService.aspx. Set the Service definition for the client to http://www.ripedevelopment.com/webservices/LocalTime.asmx?WSDL and drag the slider on the left to the top (Test Client). </p>
<p><img src="/wp-content/uploads/users/robearl/WebServiceClient.png" alt="" title="" /></p>
<p>If the server isn&#8217;t already running the wizard will prompt you to &#8220;Start server&#8221;, do this and, when prompted to generate a Web Service Client Test, accept the defaults to use Web Service Sample JSPs.</p>
<p>Eclipse will then generate a Web Service client and sample JSP files to test it. Once they are generated Eclipse will open the sample JSP client. Using this page the service methods can be tested to ensure connectivity with the service. Examining the source of these files in Project->WebContent->sampleLocalTimeSoapProxy can show us the methods we need to use. </p>
<p>Below is an example JSP file which will call the Web Service Client and lookup the current time in New York.</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="java"><thead><tr><td colspan="2"  class="head">Java</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
</pre></td><td class="de1"><pre class="de1"><span class="sy0">&lt;%</span>@ page language<span class="sy0">=</span><span class="st0">&quot;java&quot;</span> contentType<span class="sy0">=</span><span class="st0">&quot;text/html; charset=UTF-8&quot;</span> pageEncoding<span class="sy0">=</span><span class="st0">&quot;UTF-8&quot;</span><span class="sy0">%&gt;</span>
<span class="sy0">&lt;!</span>DOCTYPE html <span class="kw1">PUBLIC</span> <span class="st0">&quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot;</span> <span class="st0">&quot;http://www.w3.org/TR/html4/loose.dtd&quot;</span><span class="sy0">&gt;</span>
<span class="sy0">&lt;</span>html<span class="sy0">&gt;</span>
<span class="sy0">&lt;</span>head<span class="sy0">&gt;</span>
<span class="sy0">&lt;</span>meta http<span class="sy0">-</span>equiv<span class="sy0">=</span><span class="st0">&quot;Content-Type&quot;</span> content<span class="sy0">=</span><span class="st0">&quot;text/html; charset=UTF-8&quot;</span><span class="sy0">&gt;</span>
<span class="sy0">&lt;</span>title<span class="sy0">&gt;</span>The <span class="kw3">Time</span> in <span class="kw1">New</span> York<span class="sy0">!&lt;/</span>title<span class="sy0">&gt;</span>
<span class="sy0">&lt;/</span>head<span class="sy0">&gt;</span>
<span class="sy0">&lt;</span>body<span class="sy0">&gt;</span>
<span class="sy0">&lt;</span>jsp<span class="sy0">:</span>useBean id<span class="sy0">=</span><span class="st0">&quot;localTimeSoapProxy&quot;</span> scope<span class="sy0">=</span><span class="st0">&quot;session&quot;</span> <span class="kw1">class</span><span class="sy0">=</span><span class="st0">&quot;com.ripedev.www.LocalTimeSoapProxy&quot;</span> <span class="sy0">/&gt;</span>
<span class="sy0">&lt;%</span>
<span class="kw1">try</span>
<span class="br0">&#123;</span>
&nbsp; &nbsp; <span class="kw3">String</span> newYorkTime <span class="sy0">=</span> localTimeSoapProxy.<span class="me1">localTimeByZipCode</span><span class="br0">&#40;</span><span class="st0">&quot;10001&quot;</span><span class="br0">&#41;</span><span class="sy0">;</span> <span class="co1">// Pass a New York zipcode.</span>
&nbsp; &nbsp; <span class="sy0">%&gt;</span>The <span class="kw3">Time</span> in <span class="kw1">New</span> York is<span class="sy0">:</span> <span class="sy0">&lt;%=</span>newYorkTime <span class="sy0">%&gt;</span>
&nbsp; &nbsp; 
<span class="sy0">&lt;%</span>
<span class="br0">&#125;</span>
<span class="kw1">catch</span><span class="br0">&#40;</span><span class="kw3">Exception</span> e<span class="br0">&#41;</span>
<span class="br0">&#123;</span>
<span class="sy0">%&gt;</span> 
&nbsp; &nbsp; <span class="kw3">Exception</span><span class="sy0">:</span> <span class="sy0">&lt;%=</span>e.<span class="me1">getMessage</span><span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="sy0">%&gt;</span>
<span class="sy0">&lt;%</span>&nbsp; 
<span class="br0">&#125;</span>
<span class="sy0">%&gt;</span>
<span class="sy0">&lt;/</span>body<span class="sy0">&gt;</span>
<span class="sy0">&lt;/</span>html<span class="sy0">&gt;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">&lt;%@ page language="java" contentType="text/html; charset=UTF-8" pageEncoding="UTF-8"%&gt;
&lt;!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd"&gt;
&lt;html&gt;
&lt;head&gt;
&lt;meta http-equiv="Content-Type" content="text/html; charset=UTF-8"&gt;
&lt;title&gt;The Time in New York!&lt;/title&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;jsp:useBean id="localTimeSoapProxy" scope="session" class="com.ripedev.www.LocalTimeSoapProxy" /&gt;
&lt;%
try
{
	String newYorkTime = localTimeSoapProxy.localTimeByZipCode("10001"); // Pass a New York zipcode.
	%&gt;The Time in New York is: &lt;%=newYorkTime %&gt;
	
&lt;%
}
catch(Exception e)
{
%&gt; 
	Exception: &lt;%=e.getMessage() %&gt;
&lt;%	
}
%&gt;
&lt;/body&gt;
&lt;/html&gt;</pre></div></div>

<p>Save this file to WebContent/NewYorkTime.jsp then navigate to http://localhost:8080/NewYorkTime.jsp and you should see something like:</p>
<p>The Time in New York is: 12/18/2010 11:26:22 AM</p>
]]></content:encoded>
			<wfw:commentRss>/index.php/webdev/serverprogramming/jsp/calling-web-services-from-jsp/feed/</wfw:commentRss>
		<slash:comments>1</slash:comments>
		</item>
		<item>
		<title>Accurately Simulating Movement of a Tracked Vehicle in 2D Space</title>
		<link>/index.php/webdev/uidevelopment/accurately-simulating-movement-of-a-trac/</link>
		<comments>/index.php/webdev/uidevelopment/accurately-simulating-movement-of-a-trac/#comments</comments>
		<pubDate>Mon, 20 Sep 2010 16:41:38 +0000</pubDate>
		<dc:creator><![CDATA[Rob Earl]]></dc:creator>
				<category><![CDATA[UI Development]]></category>
		<category><![CDATA[c#]]></category>
		<category><![CDATA[java]]></category>
		<category><![CDATA[math]]></category>
		<category><![CDATA[simulation]]></category>
		<category><![CDATA[tracking]]></category>

		<guid isPermaLink="false">/index.php/2010/09/accurately-simulating-movement-of-a-trac/</guid>
		<description><![CDATA[As part of a simulation I've been developing I recently had to decide how to model movement of vehicles within a 2D space. To keep things simple I settled on a tracked vehicle. Each time the simulation updates I calculate how much the vehicle rotates an&#8230;]]></description>
				<content:encoded><![CDATA[<p><img align="right" src="/wp-content/uploads/users/robearl/TankMovement-Simplified.png" alt="Basic Tracked Movement" title="" />As part of a simulation I&#8217;ve been developing I recently had to decide how to model movement of vehicles within a 2D space. To keep things simple I settled on a tracked vehicle. Each time the simulation updates I calculate how much the vehicle rotates and how far it moves based on the speed of it&#8217;s tracks. From there I calculate the new coordinates for redrawing the vehicle.</p>
<p>Knowing the current location (<strong>x,y</strong>) and heading (<strong>h</strong>) I initially adopted a simplified way to calculate the rotation (<strong>g</strong>) and speed (<strong>s</strong>) based on the speed of the vehicle&#8217;s tracks (<strong>T<span class="MT_smaller">1</span></strong> and <strong>T<span class="MT_smaller">2</span></strong>) (Figure 1). With these variables I create a right angled triangle and use <a href="http://www.mathsisfun.com/sine-cosine-tangent.html">maths</a> to calculate how far the vehicle moves in the x and y coordinates in order to find it&#8217;s finishing location (<strong>x&#8217;,y&#8217;</strong>).</p>
<pre>x' = x + s * sin(h + g)
y' = y + s * cos(h + g)</pre>
<p>This method is a reasonable approximation for the movement of a tracked vehicle: It&#8217;ll move faster when you expect it to and it&#8217;ll turn faster when you expect it to. However, as a <a href="http://yourdaysarenumbered.co.uk/">stand up mathematician</a> pointed out to me, it&#8217;s not an accurate representation of what should actually be happening. I had also observed vehicles having problems turning to face something close to and behind them resulting in endless circling of the target.</p>
<h1>Improving Accuracy</h1>
<p>A more accurate representation is the vehicle travelling a distance, <strong>s</strong>, along the circumference of a circle who&#8217;s radius can be calculated based on <strong>T<span class="MT_smaller">1</span></strong>, <strong>T<span class="MT_smaller">2</span></strong> and the distance between the tracks (<strong>2d</strong>) (Figure 2).</p>
<p><img align="right" src="/wp-content/uploads/users/robearl/TankMovement-Complex-bare3.png" alt="Figure 2: More Accurate Movement" title="" />If <strong>T<span class="MT_smaller">2</span></strong> traces a circle of radius <strong>r</strong> then <strong>T<span class="MT_smaller">1</span></strong> traces a circle of radius <strong>r + 2d</strong>. Since <strong>d</strong> is static we can say that the ratio of <strong>T<span class="MT_smaller">1</span></strong> to <strong>T<span class="MT_smaller">2</span></strong> is proportional to the ratio of the radii. This gives us the following equation to solve:</p>
<pre>T1   r + 2d
-- = -------
T2     r</pre>
<p>Solving this for r gives us:</p>
<pre>r =     2d 
    ----------
     T1
     --  -  1
     T2</pre>
<h2>Rotation</h2>
<p>We now have a triangle with 2 sides of known length. If we divide this triangle in half we can use the right angles to determine the vehicle will move <strong>2g</strong> radians around the circle (Figure 3).</p>
<p>We can say that the ratio between <strong>2g</strong> and 2 PI radians (360 degrees) is the same as the ratio between <b>s</b> and the circumference of the circle (2 * PI * (<strong>r</strong> + <strong>d</strong>)). Setting them to equal we can solve for <strong>g</strong>.</p>
<p><img align="right" src="/wp-content/uploads/users/robearl/TankMovement-Complex-Solving.png" alt="Figure 3: Solving Triangles" title="" />
<pre>  2g                s
------  =  -----------------
2 * PI      2 * PI * (r + d)
       s
2g = -------
     r + d

2g = T1 + T2
    --------
       2
    --------
     r + d

2g =    T1 + T2
     --------------
      2 * ( r + d )

g  =     T1 + T2
      -------------
      4 * ( r + d )</pre>
<p>If we substitute in our value for <b>r</b> and simplify we end up with:</p>
<pre>g = T1 - T2
    --------
       4d</pre>
<p>Which is a fairly simple calculation that scales by the size of the organism. The other thing missing from the approximate calculation is that the change in heading is actually <b>2g</b>, as can be seen from the symmetry in our diagrams.</p>
<h2>Distance</h2>
<p>Now that we know the angles we can use the <a href="http://en.wikipedia.org/wiki/Law_of_sines">Law of Sines</a> to calculate the straight line distance, <strong>t</strong>, between our vehicle&#8217;s start and end points. </p>
<pre>r + d        t / 2
--------- = -------
sin(PI/2)    sin(g)

r + d     t / 2
-----  = -------
  1       sin(g)

sin(g) * (r + d) = t / 2

t = 2 * sin(g) * (r + d)</pre>
<p>Once again we can substitute in our value for <strong>r</strong> and simplify to get:</p>
<pre>t = d(T1 + T2)
    ---------- * 2 * sin(g)
      T1 - T2</pre>
<p>Now that we know the distance and we know the angle we can use the same method we used earlier to calculate the new coordinates:</p>
<pre>x' = x + t * sin(h + g)
y' = y + t * cos(h + g)</pre>
<h2>Applying Our Findings</h2>
<p>So far we&#8217;ve seen a lot of (possibly confusing) numbers and symbols but what do we actually have to do do add this to a simulation? Each time our vehicle updates we need to:</p>
<ol>
<li>Calculate <strong>g</strong>.</li>
<li>Calculate <strong>t</strong>.</li>
<li>Calculate <strong>x&#8217;</strong>.</li>
<li>Calculate <strong>y&#8217;</strong>.</li>
<li>Adjust the vehicle&#8217;s coordinates to <strong>x&#8217;,y&#8217;</strong>.</li>
<li>Adjust the vehicle&#8217;s heading (<strong>h</strong>) by <strong>2g</strong>.</li>
</ol>
<p>You may have noticed there&#8217;s a possible division by zero error when <strong>T<span class="MT_smaller">1</span></strong> equals <strong>T<span class="MT_smaller">2</span></strong>. To protect against this we can check if they&#8217;re equal (or catch the exception) and use the calculation:</p>
<pre>x' = x + T1 * sin(h)
y' = y + T1 * cos(h)</pre>
<h2>Example</h2>
<p>Let&#8217;s say our vehicle has the properties:</p>
<p>T<span class="MT_smaller">1</span> = 1.0 (Track 1 Speed)<br />
T<span class="MT_smaller">2</span> = 0.5 (Track 2 Speed)<br />
d = 2.0 (Half distance between tracks)<br />
x = 0 (Coordinate)<br />
y = 0 (Coordinate)<br />
h = 2 (Heading)</p>
<p>1. Calculate <strong>g</strong></p>
<pre>g = T1 - T2
    --------
       4d
g = 1.0 - 0.5     0.5
    ---------  =  --- = 0.0625
        8          8</pre>
<p>2. Calculate <strong>t</strong></p>
<pre>t = d(T1 + T2)
    ---------- * 2 * sin(g)
      T1 - T2
= 0 + (2 * (1.0 + 0.5) * 2 * sin(0.0625) ) / ( 1.0 - 0.5 )
= (6 * 0.06246 ) / 0.5
= 0.37476 * 2
= 0.74951</pre>
<p>3. Calculate <strong>x&#8217;</strong>.</p>
<pre>x' = x + t * sin(h + g)
= 0 +  0.74951 * sin(2.0625)
= 0.66072</pre>
<p>4. Calculate <strong>y&#8217;</strong>.</p>
<pre>y' = y + t * cos(h + g)
= 0 + 0.74951 * cos(2.0625)
= -0.35387</pre>
<p>2. Adjust <strong>h</strong> by <strong>2g</strong>.</p>
<pre>h' = h + 2g
h' = 2 + 2 * 0.0625
h' = 2.125</pre>
<p>After this update our new state is:</p>
<p>x = 0.66072<br />
y = -0.35387<br />
h = 2.125</p>
<p>In the following Java example the Vehicle&#8217;s update method would be called from the main program loop.</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="java"><thead><tr><td colspan="2"  class="head">Java</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
</pre></td><td class="de1"><pre class="de1"><span class="kw1">public</span> <span class="kw1">class</span> Vehicle
<span class="br0">&#123;</span>
&nbsp; <span class="kw1">private</span> <span class="kw4">double</span> x, y, heading<span class="sy0">;</span>
&nbsp; <span class="kw1">private</span> <span class="kw4">int</span> size, maxSpeed<span class="sy0">;</span>
&nbsp; <span class="coMULTI">/*</span>
<span class="coMULTI">&nbsp; &nbsp; &nbsp;Other methods for initialising and controlling the vehicle.</span>
<span class="coMULTI">&nbsp; */</span>
&nbsp; <span class="kw1">public</span> <span class="kw4">void</span> update<span class="br0">&#40;</span><span class="br0">&#41;</span>
&nbsp; <span class="br0">&#123;</span>
&nbsp; &nbsp; <span class="kw4">double</span> tracks<span class="br0">&#91;</span><span class="nu0">2</span><span class="br0">&#93;</span> <span class="sy0">=</span> controller.<span class="me1">getTrackSpeeds</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span> <span class="co1">// Get the track speeds from whatever class is controlling the vehicle.</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="co1">// Could be human input or any kind of AI controller.</span>
&nbsp; &nbsp; <span class="co1">// Calculate g.</span>
&nbsp; &nbsp; <span class="kw4">double</span> d <span class="sy0">=</span> <span class="kw1">this</span>.<span class="me1">size</span> <span class="sy0">/</span> <span class="nu0">2</span><span class="sy0">;</span>
&nbsp; &nbsp; <span class="kw4">double</span> g <span class="sy0">=</span> <span class="br0">&#40;</span>tracks<span class="br0">&#91;</span><span class="nu0">0</span><span class="br0">&#93;</span> <span class="sy0">-</span> tracks<span class="br0">&#91;</span><span class="nu0">1</span><span class="br0">&#93;</span><span class="br0">&#41;</span> <span class="sy0">/</span> <span class="br0">&#40;</span> d <span class="sy0">*</span> <span class="nu0">4</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; <span class="co1">// Calculate t.</span>
&nbsp; &nbsp; <span class="kw4">double</span> t <span class="sy0">=</span> <span class="nu0">0</span><span class="sy0">;</span>
&nbsp; &nbsp; <span class="kw1">if</span><span class="br0">&#40;</span>tracks<span class="br0">&#91;</span><span class="nu0">0</span><span class="br0">&#93;</span>.<span class="me1">equals</span><span class="br0">&#40;</span>tracks<span class="br0">&#91;</span><span class="nu0">1</span><span class="br0">&#93;</span><span class="br0">&#41;</span><span class="br0">&#41;</span> <span class="co1">// Use straight line calculation to avoid division by zero.</span>
&nbsp; &nbsp; <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; t <span class="sy0">=</span> tracks<span class="br0">&#91;</span><span class="nu0">0</span><span class="br0">&#93;</span><span class="sy0">;</span>
&nbsp; &nbsp; <span class="br0">&#125;</span> 
&nbsp; &nbsp; <span class="kw1">else</span>
&nbsp; &nbsp; <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; t <span class="sy0">=</span> <span class="br0">&#40;</span> d <span class="sy0">*</span> <span class="br0">&#40;</span> tracks<span class="br0">&#91;</span><span class="nu0">0</span><span class="br0">&#93;</span> <span class="sy0">+</span> tracks<span class="br0">&#91;</span><span class="nu0">1</span><span class="br0">&#93;</span> <span class="br0">&#41;</span> <span class="sy0">*</span> <span class="nu0">2</span> <span class="sy0">*</span> <span class="kw3">Math</span>.<span class="me1">sin</span><span class="br0">&#40;</span>g<span class="br0">&#41;</span> <span class="br0">&#41;</span> <span class="sy0">/</span> <span class="br0">&#40;</span> tracks<span class="br0">&#91;</span><span class="nu0">0</span><span class="br0">&#93;</span> <span class="sy0">-</span> tracks<span class="br0">&#91;</span><span class="nu0">1</span><span class="br0">&#93;</span> <span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp;
&nbsp; &nbsp; <span class="co1">// Update x.</span>
&nbsp; &nbsp; <span class="kw1">this</span>.<span class="me1">x</span> <span class="sy0">-=</span> t <span class="sy0">*</span> <span class="kw3">Math</span>.<span class="me1">sin</span><span class="br0">&#40;</span><span class="kw1">this</span>.<span class="me1">heading</span> <span class="sy0">+</span> g<span class="br0">&#41;</span><span class="sy0">;</span> <span class="co1">// See note below.</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 
&nbsp; &nbsp; <span class="co1">// Update y.</span>
&nbsp; &nbsp; <span class="kw1">this</span>.<span class="me1">y</span> <span class="sy0">+=</span> t <span class="sy0">*</span> <span class="kw3">Math</span>.<span class="me1">cos</span><span class="br0">&#40;</span><span class="kw1">this</span>.<span class="me1">heading</span> <span class="sy0">+</span> g<span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; <span class="co1">// Update the vehicle's heading.</span>
&nbsp; &nbsp; <span class="kw1">this</span>.<span class="me1">heading</span> <span class="sy0">+=</span> <span class="nu0">2</span> <span class="sy0">*</span> g<span class="sy0">;</span>
&nbsp; <span class="br0">&#125;</span>
<span class="br0">&#125;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">public class Vehicle
{
  private double x, y, heading;
  private int size, maxSpeed;
  /*
     Other methods for initialising and controlling the vehicle.
  */
  public void update()
  {
    double tracks[2] = controller.getTrackSpeeds(); // Get the track speeds from whatever class is controlling the vehicle.
                                                    // Could be human input or any kind of AI controller.
    // Calculate g.
    double d = this.size / 2;
    double g = (tracks[0] - tracks[1]) / ( d * 4);

    // Calculate t.
    double t = 0;
    if(tracks[0].equals(tracks[1])) // Use straight line calculation to avoid division by zero.
    {
      t = tracks[0];
    } 
    else
    {
      t = ( d * ( tracks[0] + tracks[1] ) * 2 * Math.sin(g) ) / ( tracks[0] - tracks[1] );
    }

    // Update x.
    this.x -= t * Math.sin(this.heading + g); // See note below.
                                              
    // Update y.
    this.y += t * Math.cos(this.heading + g);

    // Update the vehicle's heading.
    this.heading += 2 * g;
  }
}</pre></div></div>

<p>When updating the x coordinate we subtract because, when using a JPanel:</p>
<ul>
<li>0,0 is the top left corner.</li>
<li>A heading of 0 is down.</li>
</ul>
<p>Using a normal <a href="http://en.wikipedia.org/wiki/Sine_wave">sine wave</a> an increase in heading (<strong>h</strong>) would result in an increase in <strong>sine h</strong> and therefore, an increase in <strong>x</strong> which is the opposite of what is expected/required. </p>
<p>Inverting the wave ( multiply by -1 ) produces the correct behaviour.</p>
<h1>How Much Difference Does It Really Make?</h1>
<p>The accuracy of the basic method decreases as the section of the circle traversed in one increment moves further from a straight line. Therefore, it decreases as:</p>
<p><img align="right" src="/wp-content/uploads/users/robearl/Charts.png" alt="Comparison Charts" title="" />
<ul>
<li>Speed increases.</li>
<li>Turning circle decreases.</li>
</ul>
<p>To demonstrate just how much difference there can be I&#8217;ve used a fairly extreme case to produce the charts opposite:</p>
<p>T<span class="MT_smaller">1</span> = 10<br />
T<span class="MT_smaller">2</span> = -9<br />
d = 2</p>
<p>As we can see a vehicle turning in a tight circle at a fairly high speed has a much bigger turning circle using the approximate movement calculations than when using the improved calculations.</p>
<p>As the size of the vehicle is now taken into account we can make a vehicle less nimble with a larger turning circle simply by increasing it&#8217;s size. We can get a turning circle like the one below by increasing <strong>d</strong> to 60 without any need to introduce extra variables to clamp the rotation rate.</p>
<p><center><img src="/wp-content/uploads/users/robearl/Bigger.png" alt="Larger Vehicle" title="" /></center></p>
<p>The other difference which is fairly hard to quantify is that the vehicle movement was much smoother once the new calculations were implemented. This could be because the initial technique caused lots of over-rotating which required constant readjustment.</p>
]]></content:encoded>
			<wfw:commentRss>/index.php/webdev/uidevelopment/accurately-simulating-movement-of-a-trac/feed/</wfw:commentRss>
		<slash:comments>1</slash:comments>
		</item>
	</channel>
</rss>
