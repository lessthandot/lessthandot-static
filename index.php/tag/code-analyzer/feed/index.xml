<?xml version="1.0" encoding="UTF-8"?><rss version="2.0"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:atom="http://www.w3.org/2005/Atom"
	xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
	xmlns:slash="http://purl.org/rss/1.0/modules/slash/"
	>

<channel>
	<title>code analyzer &#8211; LessthanDot</title>
	<atom:link href="/index.php/tag/code-analyzer/feed/" rel="self" type="application/rss+xml" />
	<link>/</link>
	<description>A Technical Community for IT Professionals</description>
	<lastBuildDate>Sat, 09 Mar 2019 12:50:36 +0000</lastBuildDate>
	<language>en-US</language>
	<sy:updatePeriod>hourly</sy:updatePeriod>
	<sy:updateFrequency>1</sy:updateFrequency>
	<generator>https://wordpress.org/?v=4.6.1</generator>
	<item>
		<title>SQLCop, FxCop For SQL Server, Would You Be Interested in This?</title>
		<link>/index.php/datamgmt/datadesign/sqlcop-fxcop-for-sql-server-would-you-be/</link>
		<comments>/index.php/datamgmt/datadesign/sqlcop-fxcop-for-sql-server-would-you-be/#comments</comments>
		<pubDate>Fri, 15 May 2009 12:04:33 +0000</pubDate>
		<dc:creator><![CDATA[SQLDenis]]></dc:creator>
				<category><![CDATA[Data Modelling and Design]]></category>
		<category><![CDATA[best practices]]></category>
		<category><![CDATA[code analyzer]]></category>
		<category><![CDATA[sql]]></category>
		<category><![CDATA[sql server]]></category>
		<category><![CDATA[sqlcop]]></category>

		<guid isPermaLink="false">/index.php/2009/05/sqlcop-fxcop-for-sql-server-would-you-be/</guid>
		<description><![CDATA[I have been thinking about creating a tool like this for a while now. I know that there is the SQL Server 2005 Best Practices Analyzer and that in SQL server 2008 this has become Policy Management. What I want to create is a pure T-SQL tool where you can just run a stored proc [&#8230;]]]></description>
				<content:encoded><![CDATA[<p>I have been thinking about creating a tool like this for a while now. I know that there is the SQL Server 2005 Best Practices Analyzer and that in SQL server 2008 this has become Policy Management. What I want to create is a pure T-SQL tool where you can just run a stored proc and specify what to check.</p>
<p>I wonder if people would be interested in such a tool, I started a therad here: <a href="http://forum.lessthandot.com/viewtopic.php?f=17&amp;t=5836">SQLCop</a> and got some feedback from various people.</p>
<p>Here is what I want this tool to do</p>
<p><em>identify that:<br />
no procs start with sp_<br />
no tables are named tbl&#8230;..<br />
no column names have spaces or other crazy characters in them<br />
every table has a primary key<br />
no table is clustered on a uniqueidentifier when NEWSEQUENTIALID()is not used as a default<br />
log and datafiles are on separate drives<br />
identify procs that call undocumented proc<br />
identify procs that have exec with dynamic sql and recommend to rewrite that to use sp_executesql<br />
identify redundant indexes<br />
identify unused indexes<br />
indentify fragmented tables<br />
identify stale statistics<br />
tables have the float datatype<br />
text and image datatypes are used<br />
procs that have transactions but don&#8217;t check for @@error, @@trancount or xact_state()<br />
procs that have select * instead of column list</p>
<p><strong>George </strong>added the following</p>
<p>Highlight columns where the collation does not match the default collation for the database<br />
identify where the database default collation does not match the default collation for TempDB<br />
procedures with cursors<br />
no foreign keys. check for columns with ID in the name and if it&#8217;s not a PK, then it should be a foreign key.<br />
using @@Identity instead of scope_identity()<br />
Order By ordinal value instead of listing column names<br />
using select * instead of a column list<br />
Check for &#8220;Auto Close&#8221;, &#8220;Auto Create Statistics&#8221;, &#8220;Auto Shrink&#8221;, and &#8220;Auto Update Statistics&#8221;<br />
triggers that assume a single row is inserted, updated, or deleted.<br />
non-sargable where clauses.<br />
check for functions that operate on table data.<br />
queries involving multiple tables without ANSI style joins.</p>
<p><strong>SQLSister </strong>came up with the following</p>
<p>Fields that have no data in the whole table or all fields are &#8220;&#8221;<br />
Fields where the len of the data stored is close to the max length of the field (possible that the data size may need to be increased), also a way to see the data at the max length to see if data appears to be cut off (Hey I got a file from a client one time that clearly didn&#8217;t have enough space intheir last_name field as it contained many records that were one or two characters off a common last_name and almost all the records were the same length.)<br />
Tables where the only unique index is on a surrogate key (these may not be wrong but might point to where some unique indexes need to be created)</p>
<p>Fields containing string delimited data</p>
<p>Tables that are too wide and tables where the total bytes per record are higher that the total bytes allowed to be sotred in one record.<br />
Field names that are some text followed by a number, especially if there is more than 1 (phone_1, phone 2, etc)<br />
First_name, last_name, middle_name combinations that have unique indexes or are pks.</p>
<p>triggers that do updates based on the whoe data set (no refernce to inserted or deleted)</p>
<p>Fields containing characters not on the ordinary keyboard. Help to find all those rotten data entries with tabs, etc that mess up data imports and exports.</p>
<p><strong>Emtucifor </strong>came up with this</p>
<p> Look for columns using char() instead of varchar() &#8212; I know this may not be an issue in 2008 but it is in 2005.<br />
 Warn about columns called &#8220;ID&#8221; in every table instead of &#8220;TableNameID&#8221;.<br />
 Warn about columns not named the same between foreign key table and primary key table (unless another column in the FK table already has that name).<br />
 Warn about potential problems cause by overuse of WITH (NOLOCK).<br />
 Warn about constraints without explicit names, generated by the server such as &#8220;PK__blah__07AC1A97&#8221; since scripts against these will not work from database to database (what if you script out &#8220;alter table blah drop constraint PK__blah__07AC1A97&#8221; from Dev and try to run it against Prod it will fail).</p>
<p>Generalizing Denis&#8217;s uniqueidentifier idea: Find tables whose insert and update patterns cause frequent page splits due to the layout of indexes.<br />
Find cases of hash joins occurring when loop joins should be used (my most common query-performance improver). My guess is that statistics are misleading the engine to overestimate the number of rows, thus switching to a hash join. But when the leftmost input has only a few rows, e.g. 2000 when the right input has 150000, then a loop join is almost always far superior to a hash join. A join hint can correct the problem, or another way since the number of rows is low is to put them into a temp table or table variable. Sure, those use tempdb, but it is a small amount, and hash joins can take huge temp table space!</p>
<p>Find query plans that ought to be using bookmark lookups (joining nonclustered index seek to clustered index) instead of scanning clustered index and recommend ways to solve (such as using temp table or table variable, using index hint, other methods)</p>
<p>Warn about semi-joins using &#8220;SELECT *&#8221; instead of the better &#8220;SELECT 1&#8221; (improvement at query parse time, not expanding * into column list then later discarding it)</p>
<p>Suggest testing when semi-joins are explicitly or implicitly used, since switching in either direction can at times greatly improve performance (depending on execution plan)</p>
<p>Implicit anti-semi-join:<br />
SELECT DISTINCT<br />
FROM A<br />
LEFT JOIN B ON A.ID = B.ID<br />
WHERE B.ID IS NULL</p>
<p>Explicit anti-semi-join:<br />
SELECT<br />
FROM A<br />
WHERE NOT EXISTS (SELECT 1 FROM B WHERE A.ID = B.ID)</p>
<p>Implicit semi-join:<br />
SELECT DISTINCT A.Something &#8212; no B columns in select list, DISTINCT removes duplicates or not DISTINCT keyword but A&lt;-&gt;B relationship is one-to-one<br />
FROM A<br />
INNER JOIN B ON A.ID = B.ID</p>
<p>Explicit semi-join<br />
SELECT<br />
FROM A<br />
WHERE EXISTS (SELECT 1 FROM B WHERE A.ID = B.ID)</em></p>
<p>So that is a partial list, What do you think, would this be a useful tool? Do you have any suggestions? Should this be an application perhaps or pure T-SQL.</p>
<p>Leave a comment with your suggestion</p>
]]></content:encoded>
			<wfw:commentRss>/index.php/datamgmt/datadesign/sqlcop-fxcop-for-sql-server-would-you-be/feed/</wfw:commentRss>
		<slash:comments>7</slash:comments>
		</item>
	</channel>
</rss>
