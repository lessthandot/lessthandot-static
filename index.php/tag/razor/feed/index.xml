<?xml version="1.0" encoding="UTF-8"?><rss version="2.0"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:atom="http://www.w3.org/2005/Atom"
	xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
	xmlns:slash="http://purl.org/rss/1.0/modules/slash/"
	>

<channel>
	<title>razor &#8211; LessthanDot</title>
	<atom:link href="/index.php/tag/razor/feed/" rel="self" type="application/rss+xml" />
	<link>/</link>
	<description>A Technical Community for IT Professionals</description>
	<lastBuildDate>Sat, 09 Mar 2019 12:50:36 +0000</lastBuildDate>
	<language>en-US</language>
	<sy:updatePeriod>hourly</sy:updatePeriod>
	<sy:updateFrequency>1</sy:updateFrequency>
	<generator>https://wordpress.org/?v=4.6.1</generator>
	<item>
		<title>ASP.NET MVC 4 Razor Starter Guide &#8211; How to avoid punching your Laptop to Death</title>
		<link>/index.php/webdev/uidevelopment/ajax/asp-net-mvc-4-razor-starter/</link>
		<comments>/index.php/webdev/uidevelopment/ajax/asp-net-mvc-4-razor-starter/#comments</comments>
		<pubDate>Mon, 02 Dec 2013 01:16:00 +0000</pubDate>
		<dc:creator><![CDATA[Tahir Khalid]]></dc:creator>
				<category><![CDATA[AJAX]]></category>
		<category><![CDATA[$ not defined]]></category>
		<category><![CDATA[asp.net]]></category>
		<category><![CDATA[c#]]></category>
		<category><![CDATA[mvc 4]]></category>
		<category><![CDATA[razor]]></category>
		<category><![CDATA[starter guide]]></category>

		<guid isPermaLink="false">/index.php/2013/12/asp-net-mvc-4-razor-starter/</guid>
		<description><![CDATA[Hello and welcome to my seocond blog post for LessThanDot (I think) and in this post I will discuss how to setup a working ASP.NET MVC 4 (with Razor) project using the Empty Template.
That's right, a blank project, I didn't want the templates doing the&#8230;]]></description>
				<content:encoded><![CDATA[<p>Hello and welcome to my blog post for LessThanDot and in this post I will discuss how to setup a working ASP.NET MVC 4 (with Razor) project using the Empty Template.</p>
<p>That&#8217;s right, a blank project, I didn&#8217;t want the templates doing the work for me, I wanted to create a lean project that I had control over and I thought this would be easy enough but I was very wrong and tripped over a couple of times so hopefully this post will avoid any confusion and pain for newbies to the world of ASP.NET MVC (and avoid having to punch their laptop to death).</p>
<p>&#8220;Wait you punched your laptop to death?!&#8221;</p>
<p><img src="http://www.vurso.co.uk/ltd/mvc-4-with-razor-starter-guide/punchedmylaptoptodeath.jpg" alt="Punched My Laptop To Death @ vurso.co.uk" width="350" height="85" /></p>
<p>Yes, metaphorically speaking as per my above tweet&#8230;I came close to actually doing it in real life, that&#8217;s how frustrated I was but alas frustration can often lead to lots of fun learning which I did in between the random expletives and &#8220;WTF!&#8221; shouts throughout this process.</p>
<p>So lets start, the first thing you want to do is <span style="background-color: #ffcc00;">NOT USE THE TEMPLATES!</span> I know I know, sounds crazy but trust me you want to do it right and this is the best way my friends.</p>
<p>Start Visual Studio 2012 and then select the ASP.NET MVC 4 project type:</p>
<p><img src="http://www.vurso.co.uk/ltd/mvc-4-with-razor-starter-guide/aspdotnetmvc4projtype.JPG" alt="ASP.NET MVC 4 Project Type" width="350" height="35" /></p>
<p>Give the project a meaningful name and then left-click the OK button to continue. You will then be presented with the following screen (Project Tempaltes), select the <span style="background-color: #99ccff;">Empty</span> Project type and left-click OK to continue.</p>
<p><img src="http://www.vurso.co.uk/ltd/mvc-4-with-razor-starter-guide/projecttemplates.jpg" alt="ASP.NET MVC 4 Project Templates" width="280" height="165" /></p>
<p>If everything goes to plan Visual Studio will start generating your project folders and files and present you with the Empty Solution:</p>
<p><img src="http://www.vurso.co.uk/ltd/mvc-4-with-razor-starter-guide/emptysolution.jpg" alt="ASP.NET MVC 4 Empty Solution" width="185" height="180" /></p>
<p>You will need to do a few things first before the project can actually work (i.e. if you want to use any kind of JavaScript/jquery/ajax and Web Content).  First we need to add some folders so right-click the project name (MvcApplication3 fro example) and select <span style="background-color: #99ccff;">Add &gt; </span><span style="background-color: #99ccff;">New Folder</span> and label it <span style="background-color: #99ccff;">Scripts</span> (or alternatively if you have created another template based MVC site such as the Internet one just drag the Scripts folder from Windws Explorer into your Visual Studio 2012 IDE and drop it onto the project name which will cause Visual Studio 2012 to take a copy of the folder and create it locally with files below your project).</p>
<p>Expand the Views folder which currently only has the web.config file.  Right-click the Views folder and select <span style="background-color: #99ccff;">Add &gt; </span><span style="background-color: #99ccff;">New Folder</span> labelling it <span style="background-color: #99ccff;">Home</span>.  Create another one and call it <span style="background-color: #99ccff;">Shared</span>, these two folders will contain the default views Index.cshtml and _Layout.cshtml (the shared view is like the MasterPage from the previous ASP.NET Form development days, it is used as a global view providing common page structure and other features across your views).</p>
<p>Now the important bit, you need to download the correct Web.Optimization package as its not included in your project and trying to create, build and compile any kind of web enabled page will cause no end of grief no less messages such as:</p>
<p><span style="font-size: 14px; line-height: 18px; background-color: #eeeeee;"><span style="font-family: 'courier new', courier;">Compiler Error Message: CS0103: The name &#8216;Scripts&#8217; does not exist in the current context</span></span></p>
<p>You may also see initial errors such as:</p>
<p><span style="font-size: 14px; line-height: 18px; background-color: #eeeeee;"><span style="font-family: 'courier new', courier;">$ is not defined</span></span></p>
<p>All these can be avoided by running the following command from the nuget package manager command line.  To access the command line you need to display the command window:</p>
<p><img src="http://www.vurso.co.uk/ltd/mvc-4-with-razor-starter-guide/nugetcommandline.jpg" alt="nuget Package Manager Command Line" width="434" height="185" /></p>
<p>Left-clicking the Command Line option will display a new command window at the bottom of your IDE which lets you enter nuget package manager specific commands.  Enter the following command to download the correct package for your project:</p>
<p><img src="http://www.vurso.co.uk/ltd/mvc-4-with-razor-starter-guide/nugetpackageget.jpg" alt="Get nuget package from Visual Studio 2012" width="321" height="100" /></p>
<p>Once the package has been downloaded you will need to configure your <span style="background-color: #99ccff;">Web.Config</span> files, <span style="background-color: #99ccff;">Global.asax</span> file and add a new class in the <span style="background-color: #99ccff;">App_Start</span> folder so lets do this now.</p>
<p>Open up your root Web.config file and add the following line below the other namespaces (in the pages &gt; namespaces section):</p>
<pre style="font-family: Consolas; font-size: 13; color: #dfdfbf; background: #333333;"><span style="font-size: small;">&lt;<span style="color: #efc986;">add</span> namespace="<span style="color: #dfaf8f;">System.Web.WebPages</span>" /&gt;</span><span style="font-family: Consolas;">
</span></pre>
<p>You will also need to do the same for your other web.config file located in the root of the Views folder.</p>
<p>Next you need to modify your <span style="background-color: #99ccff;">Global.asax</span> file located in the root of the project and add the following line below the other statements in the <span style="background-color: #99ccff;">Application_Start()</span> method:</p>
<pre style="font-family: Consolas; font-size: 13; color: #dfdfbf; background: #333333;"><span style="font-size: small;"><span style="color: #8acccf;">BundleConfig</span>.RegisterBundles(<span style="color: #8acccf;">BundleTable</span>.Bundles);</span><span style="font-family: Consolas;">
</span></pre>
<p>Now you need to add a new class called BundleConfig.cs in the App_Start folder.  Modify the using block to look like this:</p>
<pre style="color: #dfdfbf; background-color: #333333; background-position: initial initial; background-repeat: initial initial;"><span style="font-size: small;"><span style="color: #efc986;">using</span> System.Web;
<span style="color: #efc986;">using</span> System.Web.Optimization;</span></pre>
<p>Modify the contents of the class block to look like this:</p>
<pre style="color: #dfdfbf; background-color: #333333; background-position: initial initial; background-repeat: initial initial;"><span style="font-size: small;"><span style="color: #7a987a;">// For more information on Bundling, visit http://go.microsoft.com/fwlink/?LinkId=254725</span>
<span style="color: #efc986;">public</span> <span style="color: #efc986;">static</span> <span style="color: #efc986;">void</span> RegisterBundles(<span style="color: #8acccf;">BundleCollection</span> bundles)
{
    bundles.Add(<span style="color: #efc986;">new</span> <span style="color: #8acccf;">ScriptBundle</span>(<span style="color: #dfaf8f;">"~/bundles/jquery"</span>).Include(
                <span style="color: #dfaf8f;">"~/Scripts/jquery-{version}.js"</span>));
 
    bundles.Add(<span style="color: #efc986;">new</span> <span style="color: #8acccf;">ScriptBundle</span>(<span style="color: #dfaf8f;">"~/bundles/jqueryui"</span>).Include(
                <span style="color: #dfaf8f;">"~/Scripts/jquery-ui-{version}.js"</span>));
 
    bundles.Add(<span style="color: #efc986;">new</span> <span style="color: #8acccf;">ScriptBundle</span>(<span style="color: #dfaf8f;">"~/bundles/jqueryval"</span>).Include(
                <span style="color: #dfaf8f;">"~/Scripts/jquery.unobtrusive*"</span>,
                <span style="color: #dfaf8f;">"~/Scripts/jquery.validate*"</span>));
 
    <span style="color: #7a987a;">// Use the development version of Modernizr to develop with and learn from. Then, when you're</span>
    <span style="color: #7a987a;">// ready for production, use the build tool at http://modernizr.com to pick only the tests you need./</span>
    bundles.Add(<span style="color: #efc986;">new</span> <span style="color: #8acccf;">ScriptBundle</span>(<span style="color: #dfaf8f;">"~/bundles/modernizr"</span>).Include(
                <span style="color: #dfaf8f;">"~/Scripts/modernizr-*"</span>));
}</span></pre>
<p>Now save the file and we need to create a controller file and two view pages.  Right-click the Controllers folder and left-click on <span style="background-color: #99ccff;">Add &gt; Controller&#8230;</span> to display the New Controller dialog:</p>
<p><img src="http://www.vurso.co.uk/ltd/mvc-4-with-razor-starter-guide/newcontroller.jpg" alt="New MVC 4 Controller" width="280" height="145" /></p>
<p>Give it the name <span style="background-color: #99ccff;">HomeController</span> and left-click on Add to continue.  Now we need to create the Index view the controller will work with.  Before we do that we need to create a view that will <a title="ASP.NET MVC 3: Layouts with Razor" href="http://weblogs.asp.net/scottgu/archive/2010/10/22/asp-net-mvc-3-layouts.aspx" target="_blank">&#8220;automagically&#8221; assign the same razor layout</a> to all your views so right-click the <span style="background-color: #99ccff;">Views</span> folder and left-click on <span style="background-color: #99ccff;">Add &gt; View&#8230;</span> (VS 2012 is clever enough to recognise the context you&#8217;re in, in this case the Views folder).  The Add View dialog box will appear:</p>
<p><img src="http://www.vurso.co.uk/ltd/mvc-4-with-razor-starter-guide/addview.jpg" alt="ASP.NET MVC 4 Add View" width="200" height="252" /></p>
<p>Make sure you un-tick the &#8220;Use a layout or master page:&#8221; checkbox (as all your views will be using this <span style="background-color: #99ccff;">_ViewStart</span> file).</p>
<p>Now modify the file to look like this:</p>
<pre style="color: #dfdfbf; background-color: #333333; background-position: initial initial; background-repeat: initial initial;"><span style="font-size: small;">@{
    Layout = <span style="color: #dfaf8f;">"~/Views/Shared/_Layout.cshtml"</span>;
}</span></pre>
<p>Next we need to create the Index View so right-click the Home folder (the one you created earlier) and select <span style="background-color: #99ccff;">Add &gt; View&#8230;</span> to display the Add View dialog box and label this view page <span style="background-color: #99ccff;">Index</span> and finally left-click Add to create it.</p>
<p>Modify the contents of the file to look like this:</p>
<pre style="color: #dfdfbf; background-color: #333333; background-position: initial initial; background-repeat: initial initial;"><span style="font-size: small;">@{
    ViewBag.Title = <span style="color: #dfaf8f;">"My first LTD Mvc 4 Index Page"</span>;
}
@<span style="color: #efc986;">using</span> (Html.BeginForm())
{
     &lt;<span style="color: #efc986;">h1</span>&gt;Hello, World!&lt;/<span style="color: #efc986;">h1</span>&gt;
}</span></pre>
<p>Finally you need to create the shared layout view page, right-click the <span style="background-color: #99ccff;">Shared</span> folder and left-click <span style="background-color: #99ccff;">Add &gt; View&#8230;</span> to display the Add View dialog box, label the view page as <span style="background-color: #99ccff;">_Layout</span> and ensure as with the previous pages the &#8220;Use a layout or master page&#8221; checkbox is un-ticked.</p>
<p>Modify the <span style="background-color: #99ccff;">_Layout.cshtml</span> view page to look like this:</p>
<pre style="color: #dfdfbf; background-color: #333333; background-position: initial initial; background-repeat: initial initial;"><span style="font-size: small;">&lt;!<span style="color: #efc986;">DOCTYPE</span> html&gt;
&lt;<span style="color: #efc986;">html</span> lang=<span style="color: #dfaf8f;">"en"</span>&gt;
&lt;<span style="color: #efc986;">head</span>&gt;
    &lt;<span style="color: #efc986;">meta</span> name=<span style="color: #dfaf8f;">"viewport"</span> content=<span style="color: #dfaf8f;">"width=device-width"</span> /&gt;
    &lt;<span style="color: #efc986;">title</span>&gt;@ViewBag.Title&lt;/<span style="color: #efc986;">title</span>&gt;
&lt;/<span style="color: #efc986;">head</span>&gt;
&lt;<span style="color: #efc986;">body</span>&gt;
    &lt;<span style="color: #efc986;">div</span>&gt;
        @RenderBody()
    &lt;/<span style="color: #efc986;">div</span>&gt;
    @<span style="color: #8acccf;">Scripts</span>.Render(<span style="color: #dfaf8f;">"~/bundles/jquery"</span>)
    @RenderSection(<span style="color: #dfaf8f;">"scripts"</span>, required: <span style="color: #efc986;">false</span>)
&lt;/<span style="color: #efc986;">body</span>&gt;
&lt;/<span style="color: #efc986;">html</span>&gt;</span></pre>
<p>This should be enough for you to compile the project however it will still cause you pain unless you save your project and restart Visual Studio 2012, after which the references and page helpers should kick into life.</p>
<p>Build and Compile your project and then press <span style="background-color: #99ccff;">F5</span> or click on the <span style="background-color: #99ccff;">Debug</span> button to fire up your project, if all has gone well you should see a simple page with the words &#8220;Hello, World!&#8221; across the top left.</p>
<p>Well done, now go make a cup of tea and eat some digestives.</p>
]]></content:encoded>
			<wfw:commentRss>/index.php/webdev/uidevelopment/ajax/asp-net-mvc-4-razor-starter/feed/</wfw:commentRss>
		<slash:comments>1</slash:comments>
		</item>
		<item>
		<title>&#8216;LocalSqlServer&#8217; Error Deploying WebSecurity in WebMatrix/Web Pages</title>
		<link>/index.php/webdev/serverprogramming/localsqlserver-error-deploying-websecurity/</link>
		<comments>/index.php/webdev/serverprogramming/localsqlserver-error-deploying-websecurity/#respond</comments>
		<pubDate>Tue, 09 Aug 2011 10:52:00 +0000</pubDate>
		<dc:creator><![CDATA[Eli Weinstock-Herman (tarwn)]]></dc:creator>
				<category><![CDATA[Server Programming]]></category>
		<category><![CDATA[error]]></category>
		<category><![CDATA[razor]]></category>
		<category><![CDATA[web pages]]></category>
		<category><![CDATA[webmatrix]]></category>
		<category><![CDATA[websecurity]]></category>

		<guid isPermaLink="false">/index.php/2011/08/localsqlserver-error-deploying-websecurity/</guid>
		<description><![CDATA[Several weeks ago I was working on a sample site in Web Matrix and ran into a brick wall when I attempted to implement WebSecurity against my website. It seemed no matter what I tried I was getting errors about my database, errors about a database I didn't know about, errors trying to deploy the config file at all.]]></description>
				<content:encoded><![CDATA[<p>Several weeks ago I was working on a sample site in Web Matrix and ran into a brick wall when I attempted to implement WebSecurity against my website. It seemed no matter what I tried I was getting errors about my database, errors about a database I didn&#8217;t know about, errors trying to deploy the config file at all. After hours of debugging and random attempts at web.config hackery, I finally tried the basic starter sites and found out that those, too, suffered from problems when you attempt to deploy them.</p>
<blockquote><p>
<strong>Configuration Error</strong><br />
<strong>Description:</strong> An error occurred during the processing of a configuration file required to service this request. Please review the specific error details below and modify your configuration file appropriately.</p>
<p><strong>Parser Error Message:</strong> The connection name &#8216;LocalSqlServer&#8217; was not found in the applications configuration or the connection string is empty.
</p></blockquote>
<p>Today I managed to solve it based on an <a href="http://forum.winhost.com/archive/index.php/t-8697.html">archived forum post</a> I found through google. </p>
<p>The solution is to add the following section to your web.config:</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="xml"><thead><tr><td colspan="2"  class="head">XML</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
</pre></td><td class="de1"><pre class="de1"><span class="sc-1">&lt;!-- Added in an attempt to make simple security work --&gt;</span>
<span class="sc3"><span class="re1">&lt;connectionStrings<span class="re2">&gt;</span></span></span>
&nbsp; &nbsp; <span class="sc3"><span class="re1">&lt;remove</span> <span class="re0">name</span>=<span class="st0">&quot;LocalSqlServer&quot;</span> <span class="re2">/&gt;</span></span>
&nbsp; &nbsp; <span class="sc3"><span class="re1">&lt;add</span> <span class="re0">name</span>=<span class="st0">&quot;LocalSqlServer&quot;</span> <span class="re0">connectionString</span>=<span class="st0">&quot;Data Source=.App_DataMyJunk.sdf&quot;</span> <span class="re0">providerName</span>=<span class="st0">&quot;System.Data.SqlServerCe.4.0&quot;</span> <span class="re2">/&gt;</span></span>
<span class="sc3"><span class="re1">&lt;/connectionStrings<span class="re2">&gt;</span></span></span>
<span class="sc3"><span class="re1">&lt;appSettings<span class="re2">&gt;</span></span></span>
&nbsp; &nbsp; <span class="sc3"><span class="re1">&lt;add</span> <span class="re0">key</span>=<span class="st0">&quot;enableSimpleMembership&quot;</span> <span class="re0">value</span>=<span class="st0">&quot;true&quot;</span> <span class="re2">/&gt;</span></span>
<span class="sc3"><span class="re1">&lt;/appSettings<span class="re2">&gt;</span></span></span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">&lt;!-- Added in an attempt to make simple security work --&gt;
&lt;connectionStrings&gt;
	&lt;remove name="LocalSqlServer" /&gt;
	&lt;add name="LocalSqlServer" connectionString="Data Source=.App_DataMyJunk.sdf" providerName="System.Data.SqlServerCe.4.0" /&gt;
&lt;/connectionStrings&gt;
&lt;appSettings&gt;
	&lt;add key="enableSimpleMembership" value="true" /&gt;
&lt;/appSettings&gt;</pre></div></div>

<p>Basically what is happening is that my web host has a machine.config with a SQL Connection string called &#8220;LocalSqlServer&#8221; (it&#8217;s created by default by the .Net framework). For some reason when we use anything Membership related, it attempts to access the configured connection string for Membership, even though WebSecurity is provided it&#8217;s own connection string on initialization.</p>
<p>So the solution is to remove the settings that has been applied to our site from the host&#8217;s machine.config and apply a new one. From what I can tell, it doesn&#8217;t seem to matter if the new connection string is accurate, only that it exists.</p>
<p>Yep, this means I don&#8217;t actually have a SQLCE database named, MyJunk. I can tell you&#8217;re disappointed. Also I don&#8217;t know if ./ would work in this path, so please don&#8217;t use this as a how-to guide on how to create a working SQLCE connection string.</p>
]]></content:encoded>
			<wfw:commentRss>/index.php/webdev/serverprogramming/localsqlserver-error-deploying-websecurity/feed/</wfw:commentRss>
		<slash:comments>0</slash:comments>
		</item>
		<item>
		<title>WebMatrix &#8211; Routing and Magic Pages</title>
		<link>/index.php/webdev/serverprogramming/aspnet/webmatrix-routing-and-magic-pages/</link>
		<comments>/index.php/webdev/serverprogramming/aspnet/webmatrix-routing-and-magic-pages/#comments</comments>
		<pubDate>Thu, 07 Jul 2011 09:42:00 +0000</pubDate>
		<dc:creator><![CDATA[Eli Weinstock-Herman (tarwn)]]></dc:creator>
				<category><![CDATA[ASP.NET]]></category>
		<category><![CDATA[razor]]></category>
		<category><![CDATA[webmatrix]]></category>

		<guid isPermaLink="false">/index.php/2011/07/webmatrix-routing-and-magic-pages/</guid>
		<description><![CDATA[So I've been working on a practice site using WebMatrix. The basic premise was that I would create a site that had some similar functionality to Delicious to help me track the various articles, podcasts, books, and so on. This would also give me something practical to work on as I try to get a handle on this whole WebMatrix thing.]]></description>
				<content:encoded><![CDATA[<p>So I&#8217;ve been working on a practice site using WebMatrix. The basic premise was that I would create a site that had some similar functionality to Delicious to help me track the various articles, podcasts, books, and so on. This would also give me something practical to work on as I try to get a handle on this whole WebMatrix thing.</p>
<p>So here&#8217;s a couple tips, tricks, and the occasional slip in the mud I picked up along the way.</p>
<p>Chrissie started us off with <a href="/index.php/WebDev/UIDevelopment/AJAX/trying-out-webmatrix-and-razor" title="Chissie on Trying Out Webmatrix and Razor">this post</a>, so I&#8217;m skipping right past the making of files and digging into the first layer of how things work (and/or how I broke them).</p>
<p><i>Note: I know in my <a href="/index.php/WebDev/ServerProgramming/the-many-functions-of-webmatrix" title="Read the Webmatrix Overview post">last post</a> I said the application was WebMatrix and the programming framework was WebPages, but no one calls it WebPages (apparently that name is hard to search for or something), so for the remainder of this post I&#8217;ll call it WebMatrix. Feel free to call me names later.</i></p>
<h2>Magic Routing</h2>
<p>The first problem I had when I deployed my site to a live host was getting the darn pages to work. No matter how I typed the paths, the cshtml pages wouldn&#8217;t stop reporting a 404. So of course I started digging into the IIS settings. And fixed the meta settings. And fixed the extension. And fixed something else. And then found out I wasn&#8217;t supposed to fix it and the real problem was the guy sitting behind my keyboard typing instead of reading the manual. Oops.</p>
<p>When we build a razor site (or is it a WebPages site? WebMatrix site? argh&#8230;), it takes advantage of additions in the 4.0 Framework to provide routing automatically. Every cshtml file we create automatically becomes part of the route check when a request comes into IIS. This is similar to the ASP.Net MVC routing, but instead requires no up front work, running 100% on pixie dust.</p>
<p>Say I ask for http://MyAwesomeSite.com/blueberries/and/cream. Note that we don&#8217;t include the .cshtml extension. Behind the scenes, my webserver basically has this conversation with itself:</p>
<blockquote><p>
Do I have a file named /blueberries/and/cream.cshtml?<br />
No.<br />
How about /blueberries/and.cshtml?<br />
Nope.<br />
How about /blueberries.cshtml?<br />
Nope.<br />
Maybe there was a default file at the root level?<br />
Ah, ok.<br />
Are you busy tomorrow night&#8230;<br />
Yep.<br />
Oh&#8230;er, ok, well here&#8217;s your file then.
</p></blockquote>
<p>The most specific file match wins, without the need for setting up routing ahead of time. Simply drop an appropriately named file in a folder and point an href at it. </p>
<p>Any trailing portion of the URL is then stored in an array for easy access (which we will see later). What this allows us to do is create very easy, semantic URLs. </p>
<p>Example: my application will show me the list of all activities when I go to http://notmyrealurl.com/Activities but will filter the list for the &#8220;razor&#8221; tag when I go to http://notmyrealurl.com/Activities/razor.</p>
<p>The exception is files that begin with underscores. Underscored files are not accessible, as they are used to protect our Magic Files in the next section.</p>
<h2>Magic Pages</h2>
<p>Ok, so this part I&#8217;m less enamored of, but there are some good parts. There are two classes of special files in WebMatrix, layout files and lifecycle pages. </p>
<h3>Layout Files</h3>
<p>Layout files allow us to define a common layout that we want to apply to our website, basically a template or master file. Inside the layout file we can define where we want the main body to be rendered (the file that was requested), as well as additional required or optional sections the original page needs to provide. A minimal layout file would look something like this:</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="text"><thead><tr><td colspan="2"  class="head">Text</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
</pre></td><td class="de1"><pre class="de1">&lt;!DOCTYPE html&gt;
&lt;html&gt;
&nbsp; &lt;head&gt;
&nbsp; &nbsp; &lt;title&gt; @PageData[&quot;Title&quot;] &lt;/title&gt;
&nbsp; &lt;/head&gt;
&nbsp; &lt;body&gt;
&nbsp; &nbsp; @RenderPage(&quot;~/Shared/_Header.cshtml&quot;)
&nbsp; &nbsp; &lt;div id=&quot;sidepane&quot;&gt;
&nbsp; &nbsp; &nbsp; &nbsp; @RenderSection(&quot;SidePane&quot;, required: false)
&nbsp; &nbsp; &lt;/div&gt;
&nbsp; &nbsp; &lt;div id=&quot;main&quot;&gt;
&nbsp; &nbsp; &nbsp; @RenderBody()
&nbsp; &nbsp; &lt;/div&gt;
&nbsp; &nbsp; &lt;/div&gt;
&nbsp; &nbsp; @RenderPage(&quot;~/Shared/_Footer.cshtml&quot;)
&lt;/body&gt;
&lt;/html&gt;</pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">&lt;!DOCTYPE html&gt;
&lt;html&gt;
  &lt;head&gt;
	&lt;title&gt; @PageData["Title"] &lt;/title&gt;
  &lt;/head&gt;
  &lt;body&gt;
	@RenderPage("~/Shared/_Header.cshtml")
	&lt;div id="sidepane"&gt;
		@RenderSection("SidePane", required: false)
	&lt;/div&gt;
	&lt;div id="main"&gt;
	  @RenderBody()
	&lt;/div&gt;
	&lt;/div&gt;
	@RenderPage("~/Shared/_Footer.cshtml")
&lt;/body&gt;
&lt;/html&gt;</pre></div></div>

<p>A basic page that includes a header file, an optional section named &#8220;SidePane&#8221;, and body of the original page, and finally an included footer file. In this sample I am keeping my _Header, _Footer, and _MainLayout files in a subfolder called Shared. To use this layout, I could make a sample page like this:</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="text"><thead><tr><td colspan="2"  class="head">Text</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
</pre></td><td class="de1"><pre class="de1">@{
Layout = &quot;~/Shared/_MainLayout.cshtml&quot;;
PageData[&quot;Title&quot;] = &quot;My Awesome Hello World&quot;;
}
&lt;b&gt;&lt;blink&gt;This stuff is in my main body, Hello!&lt;/blink&gt;&lt;/b&gt;</pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">@{
Layout = "~/Shared/_MainLayout.cshtml";
PageData["Title"] = "My Awesome Hello World";
}
&lt;b&gt;&lt;blink&gt;This stuff is in my main body, Hello!&lt;/blink&gt;&lt;/b&gt;</pre></div></div>

<p>And if I wanted to both show off the presence of any extra URL data you put in the URL as well as the optional sidepane?</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="text"><thead><tr><td colspan="2"  class="head">Text</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
</pre></td><td class="de1"><pre class="de1">@{
Layout = &quot;~/Shared/_MainLayout.cshtml&quot;;
PageData[&quot;Title&quot;] = &quot;My Awesome Hello World&quot;;
}
&lt;b&gt;&lt;blink&gt;This stuff is in my main body, Hello!&lt;/blink&gt;&lt;/b&gt;
&nbsp;
@section SidePane{
&nbsp; &nbsp; @if(UrlData.Count &gt; 0){
&nbsp; &nbsp; &nbsp; &nbsp; &lt;text&gt;
&nbsp; &nbsp; &nbsp; &nbsp; &lt;marquee&gt;Bam!&lt;/marquee&gt;
&nbsp; &nbsp; &nbsp; &nbsp; First one: @UrlData[0]&lt;br/&gt;
&nbsp; &nbsp; &nbsp; &nbsp; All of them: @(String.Join(&quot;,&quot;,UrlData))&lt;br/&gt;
&nbsp; &nbsp; &nbsp; &nbsp; &lt;/text&gt;
&nbsp; &nbsp; }
}</pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">@{
Layout = "~/Shared/_MainLayout.cshtml";
PageData["Title"] = "My Awesome Hello World";
}
&lt;b&gt;&lt;blink&gt;This stuff is in my main body, Hello!&lt;/blink&gt;&lt;/b&gt;

@section SidePane{
	@if(UrlData.Count &gt; 0){
        &lt;text&gt;
		&lt;marquee&gt;Bam!&lt;/marquee&gt;
        First one: @UrlData[0]&lt;br/&gt;
        All of them: @(String.Join(",",UrlData))&lt;br/&gt;
        &lt;/text&gt;
	}
}</pre></div></div>

<p>Yeah, I just used a blink and a marquee, that&#8217;s how exciting this part is. You&#8217;ll notice I also put a value in the PageData dictionary at the top of the page, which was then regurgitated by the layout and used as the title. When files are being rendered or included, they receive a copy of the PageData and can access the values we squirreled away. Handy.</p>
<p>There&#8217;s also a Page dynamic property in WebBasePage that we can assign stuff to. So far that hasn&#8217;t blown up in my face.</p>
<p>If I think back to the classic ASP days I can remember a time when we desperately wanted this type of functionality. A clean, straightforward way to define some sitewide layout templates separately from our actual page, and here it is. It&#8217;s like ASP 4.0.</p>
<p>And I only just now noticed that interesting conjunction in ASP and ASP.Net numbering schemes, hmm.</p>
<h3>Lifecycle Pages</h3>
<p>Then there are the lifecycle pages. Where layout files give us a handy way to do templating, these provide us some basic global capabilities for the site. There are three main files that we are concerned with:</p>
<dl>
<dt>~/web.config</dt>
<dd>This holds configurations for the site, like any ASP.Net site</dd>
<dt>~/_AppStart.cshtml</dt>
<dd>Contains logic to run the first time any page is requested from the site</dd>
<dt>~/_PageStart.cshtml</dt>
<dd>Contains logic to run when a page in the current or child directory is requested</dd>
</dl>
<p>AppStart is handy for setting values or creating objects that will have global application scope. For example, when using the SimpleSecurity helpers, you will want to put an initialization call here to initialize the authentication system. </p>
<p><i>And if you are me you will comment them out when you find out your webhosts machine.config fubars settings relevant to ASP.Net membership.</i></p>
<p>PageStart is trickier in a couple ways. First, PageStart is a bit of a misnomer. It does execute at the start of the page, but it can also be convinced  to encapsulate the execution of the requested page, running both before and after the main page is rendered. </p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="text"><thead><tr><td colspan="2"  class="head">Text</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
</pre></td><td class="de1"><pre class="de1">@{
&nbsp; &nbsp; &lt;b&gt;I'm Before&lt;/b&gt;
&nbsp; &nbsp; RunPage();
&nbsp; &nbsp; &lt;text&gt;I'm after&lt;/text&gt;
}</pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">@{
    &lt;b&gt;I'm Before&lt;/b&gt;
    RunPage();
    &lt;text&gt;I'm after&lt;/text&gt;
}</pre></div></div>

<p>If you specifically include the RunPage() line, then your page will be run in between the code above and below it. If you don&#8217;t include this directive then the entire PageStart file will be run before calling the requested page.</p>
<p>The next trick is that _PageStart runs in a nested sequence from the root level to the level of the file that has been requested. Basically the engine traverses each directory from the root to the folder your requested file is in and, if a _PageStart file is present, executes it. It&#8217;s similar to those nesting dolls (or recursion, oohh).</p>
<p>But the magic is not done yet, and this was one of those pits of mud I fell into.</p>
<p>Even though you can wrap the execution of the page inside a _PageStart, the execution of the page and PageStart finish before the Layout is applied and executed.</p>
<p>Lets try that again (I lost 2 hours of my life to this feature).</p>
<p>Say we have a _PageStart that wraps around the RunPage call, a Main page, and a referenced _LayoutMain file and we request http://myevilpitofmud.com/Main. The execution would look like:</p>
<ol>
<li>Top part of _PageStart</li>
<li>Main file</li>
<li>Bottom part of _PageStart</li>
<li>Layout file</li>
</ol>
<p>Yeah.</p>
<h2>But what else did you do?</h2>
<p>There&#8217;s more. I&#8217;ve spent 17 hours on my sample site so far, which includes implementing a SQL Compact database, implementing and removing WebSecurity authentication, and a score of other things. I&#8217;ve found out the hard way that getting fancy can bite you and that it is actually possible to install a 10 inch tailpipe on the WebMatrix hatchback (which I just realized could refer to two different things I&#8217;ve done, hmmm, tailpipe and a <strike>shopping cart handle</strike> spoiler then). </p>
<p>Unfortunately because I had issues with the authentication I can&#8217;t post a live link yet, the next post will have to cover all the fun that has gone into trying to get a certified host for WebMatrix to run correctly (hint, not all <a href="http://www.microsoft.com/web/hosting/home" title="See hosting options at Microsoft">&#8216;SpotLight&#8217; hosts</a> can run the included, basic example sites).</p>
]]></content:encoded>
			<wfw:commentRss>/index.php/webdev/serverprogramming/aspnet/webmatrix-routing-and-magic-pages/feed/</wfw:commentRss>
		<slash:comments>1</slash:comments>
		</item>
		<item>
		<title>The Many Functions of WebMatrix</title>
		<link>/index.php/webdev/serverprogramming/the-many-functions-of-webmatrix/</link>
		<comments>/index.php/webdev/serverprogramming/the-many-functions-of-webmatrix/#respond</comments>
		<pubDate>Thu, 23 Jun 2011 11:42:00 +0000</pubDate>
		<dc:creator><![CDATA[Eli Weinstock-Herman (tarwn)]]></dc:creator>
				<category><![CDATA[ASP.NET]]></category>
		<category><![CDATA[Classic ASP]]></category>
		<category><![CDATA[Server Programming]]></category>
		<category><![CDATA[asp.net]]></category>
		<category><![CDATA[razor]]></category>
		<category><![CDATA[webmatrix]]></category>

		<guid isPermaLink="false">/index.php/2011/06/the-many-functions-of-webmatrix/</guid>
		<description><![CDATA[Several weeks ago I started digging into WebMatrix. Over the course of a weekend I was able to put together a quick, functioning website, pick up some basics of working with WebMatrix and the deployment tool, and play with a few other technologies as well. Then I stepped back and realized I was only using a percentage of it's capabilities.]]></description>
				<content:encoded><![CDATA[<p>Several weeks ago I started digging into WebMatrix. Over the course of a weekend I was able to put together a quick, functioning website, pick up some basics of working with WebMatrix and the deployment tool, and play with a few other technologies as well. Then I stepped back and realized I was only using a percentage of it&#8217;s capabilities.</p>
<p>I&#8217;ve read a lot of blogs and articles on Web Matrix and none of them prepared me for the sheer range of capabilities this little tool offers. One would mention writing a web page, another would talk about deployment, a third about WordPress&#8230;it wasn&#8217;t until I started playing with it and went to write a blog entry of my own that I realized how much capability was packed into this one &#8216;little&#8217; tool. </p>
<p>This isn&#8217;t a deep dive, there&#8217;s plenty of those. This is a shallow float across the surface of what is actually a quite impressive (and don&#8217;t forget free) tool.</p>
<h2>What is WebMatrix?</h2>
<p>WebMatrix is a free web development tool from Microsoft that helps you create and publish websites.</p>
<p>So is it a tool? A set of templates? A language? A publication engine?</p>
<p>Yes.</p>
<p>And an IIS express manager, database configurator, generator of CMS-driven sites &#8230;The kitchen sink is in there somewhere.</p>
<h2>Building Sites</h2>
<p>WebMatrix works around the concept of a Site. A site can start as an entry in the gallery of pre-built packages or as a template and/or blank code files. </p>
<div style="border: 1px solid #AAAAAA; font-size: 80%; color: #666666; text-align: center; padding: 8px; margin: 8px;">
<img src="http://tiernok.com/LTDBlog/webmatrix/WebGallery.png" alt="Web Gallery" style="padding-bottom: 5px;" /><br />
Web Gallery in Web Matrix
</div>
<p>The Gallery option presents a list of 52 CMS, blogging, eCommerce, (the list goes on) packages that can be installed simply by selectig them. If I select the WordPress option, WebMatrix detects that I don&#8217;t have MyQSL installed and asks if I want to install it or have access to a remote installation. Other gallery options offer similar interactions for their own requirements, with the goal being a completely running system in only a few clicks. In the case of WordPress it will also detect whether you have PHP installed (more on that later) and install that as well.</p>
<div style="border: 1px solid #AAAAAA; font-size: 80%; color: #666666; text-align: center; padding: 8px; margin: 8px;">
<img src="http://tiernok.com/LTDBlog/webmatrix/Installing.png" alt="WordPress Install" style="padding-bottom: 5px;" /><br />
Installing WordPress
</div>
<p>With a download, a few button clicks, administrative permissions, and entry of some basic settings, I just installed a fully customizeable version of WordPress. Which is really cool, but also kind of scary if you think about how little technical knowledge I really needed and that there are dozens of other packages available.</p>
<p><em>Note: it was at this point I noticed my MySQL installation was annoyed and not running properly, leaving me stuck partway on the WordPress Install. So a big YMMV may be necessary here, as it seems my skill at causing things to break has managed to break yet another &#8220;Next, Next, Next&#8221; wizardy dialog.</em></p>
<p><strong>More Depth:</strong> <a href="http://drewby.com/a-wordpress-blog-in-15-minutes-with-webmatrix" title="A WordPress Blog in 15 Minutes with WebMatrix">A WordPress Blog in 15 Minutes with WebMatrix</a></p>
<h2>Building Sites &#8211; But Wait, There&#8217;s More</h2>
<p>Ok, so what if we want to build our own site?</p>
<div style="border: 1px solid #AAAAAA; font-size: 80%; color: #666666; text-align: center; padding: 8px; margin: 8px;">
<img src="http://tiernok.com/LTDBlog/webmatrix/SiteFromTemplate.png" alt="Creating Site From Template" style="padding-bottom: 5px;" /><br />
Creating Site from Template
</div>
<p>The other side of the Site creation process is the option to create one from a template. This offers five options ranging from &#8220;Empty Site&#8221; to &#8220;Start Site and even &#8220;Bakery&#8221;. If you start with one of the non-Empty sites you will be given all the files and folders for a fully functioning site. These sites are based on the new WebPages framework and written in the C#-style razor syntax. The WebPages framework was released in conjunction with WebMatrix and joins Web Forms and MVC as an available ASP.Net framework.</p>
<p>If we select the empty site option we&#8217;ll be presented with one lonely little robots.txt file and an empty folder. The interesting part is what happens when we ask to add a file. We receive a file creation dialog (which should be familiar to Visual Studio users) and, given what I have seen so far and my Visual Studio background, I expect a list of CSHTML files, CSS, and maybe a JS or HTML. </p>
<p>Nope.</p>
<p>HTML, CSS, JScript, and CSHTML are present, but so are (huge breath): VBHTML, 2 ASPX&#8217;s (VB + C#), Classic ASP, PHP, TXT, XML, 2 Class Files (VB + C#), 3 Global ASA[X]&#8217;s, 3 Master Pages, SQL, User Controls (VB + C#), and 4 web configs (.Net 2, 3, 3.5, 4).</p>
<p>The CSHTML and VBHTML options are using the new <a href="http://weblogs.asp.net/scottgu/archive/2010/07/02/introducing-razor.aspx" title="Razor engine announcement">razor engine</a> and this is the most commonly documented option both on the <a href="http://www.asp.net/web-pages" title="Resources at ASP.Net">ASP.Net website</a> and in blogs. The PHP option offers you a choice between installation of PHP 5.2 and 5.3 (enable it in IIS by checking the lonely PHP checkbox in the IIS/site settings) and away we go with some PHP-ing. </p>
<p>And to be honest I haven&#8217;t even had time to try the rest, but they all seem fairly self-explanatory and, if I could get PHP running in a new MS web tool in just a few moments, I don&#8217;t expect to see too many surprises from the cast of MS Web technologies. Although I do want to try the Classic ASP one, for nostalgia if nothing else.</p>
<p><strong>More Depth:</strong> <a href="http://www.asp.net/webmatrix/tutorials" title="WebMatrix Tutorials at ASP.net">Web Matrix Tutorials (CSHTML) at ASP.Net</a><br />
<strong>More Depth:</strong> <a href="http://blogs.msdn.com/b/brian_swan/archive/2010/07/12/creating-php-websites-with-webmatrix.aspx" title="Creating PHP Websites with WebMatrix">Creating PHP Websites with WebMatrix</a><br />
<strong>More Depth:</strong> <a href="/index.php/WebDev/UIDevelopment/AJAX/trying-out-webmatrix-and-razor" title="Chrissie - Trying Out WebMatrix and Razor">Trying Out WebMatrix and Razor</a> by Chrissie<br />
<strong>More Depth:</strong> Not finding a good Classic ASP link&#8230;</p>
<p>Unfortunately intellisense is either non-existent or just extremely limited and not noticeable after a day using Visual Studio. However, if you have Visual Studio available then you can click the Visual Studio button on the WebMatrix tool bar and the project and file you are currently working on will immediately open in Visual Studio, allowing you to take advantage of it&#8217;s more extensive editing (and of course intellisense) capabilities.</p>
<h2>Running and Debugging Sites</h2>
<p>With so many different options, running these sites must require jumping through a hoop, on fire, balancing a water balloon on our nose, right?</p>
<p>Not so much.</p>
<p>WebMatrix uses IIS Express internally and offers a simple interface to hook into just a few settings that will cover most of our needs. Press the &#8220;Run&#8221; button and we&#8217;re greeted with the current page run in whatever our default browser is. </p>
<div style="border: 1px solid #AAAAAA; font-size: 80%; color: #666666; text-align: center; padding: 8px; margin: 8px;">
<img src="http://tiernok.com/LTDBlog/webmatrix/Toolbar.png" alt="WebMatrix Files Toolbar" style="padding-bottom: 5px; max-width: 750px;" /><br />
WebMatrix Files Toolbar
</div>
<p>PHP? CSHTML? Text file? Doesn&#8217;t matter. Because IIS Express is running in the background, all WebMatrix has to do is fire a URL at a browser and we&#8217;re there. </p>
<p>Another advantage to this setup is that we don&#8217;t have to dig through yet another revision of the IIS management interface. Which is great for me, as I have been downgraded to just a programmer for the last few years and left most of my IIS management experience rusting away on the older IIS 6/5/4-style interface.</p>
<div style="border: 1px solid #AAAAAA; font-size: 80%; color: #666666; text-align: center; padding: 8px; margin: 8px;">
<img src="http://tiernok.com/LTDBlog/webmatrix/requests.png" alt="WebMatrix Requests Page" style="padding-bottom: 5px;" /><br />
IIS Requests Page
</div>
<p>Basic settings are available to manage our default site pages, enable PHP, change the .Net framework version, enable SSL, and so on. A page is also available to view the HTTP requests that are being made to the IIS instance, letting us see the lonely calls for a favicon go forever unanswered or the execution time for each individual HTTP request.</p>
<h2>Managing Data</h2>
<p>So we have web pages and a way to host them, what about managing the database behind the site? Yep, WebMatrix is there too.</p>
<p>The Databases tab will show you any connections we have configured for the site, as well as any SQL Compact databases (SDF files) available to the site. In our WordPress example this means we have a configured connection to a MySQL (5?) database. For my first sample site I have a SQL Compact database with the ability to manage the tables from inside Web Matrix. I haven&#8217;t connected to SQL Server from inside yet, so I can&#8217;t say whether it offers just a view of the connection, like MySQL, or more extensive management of the tables and queries like SQL Compact or an MDF in Visual Studio.</p>
<div style="border: 1px solid #AAAAAA; font-size: 80%; color: #666666; text-align: center; padding: 8px; margin: 8px;">
<img src="http://tiernok.com/LTDBlog/webmatrix/database.png" alt="SQL Compact View" style="padding-bottom: 5px;" /><br />
SQL Compact DB
</div>
<p>Later on when we deploy we get an interesting option for SDF files. They are treated separately from the main files and are not automatically selected as part of the sync (limiting the chances of a low-coffee-foot-shooting incident).</p>
<p><strong>More Depth:</strong> <a href=http://www.microsoft.com/web/post/connecting-to-a-sql-server-or-mysql-database-in-webmatrix"" title="Connecting to a SQL Server or MySQL Database in WebMatrix">Database Connections at Microsot.com</a><br />
<strong>More Depth:</strong> <a href="http://erikej.blogspot.com/" title="Everything SQL Server Compact">Everything SQL Server Compact site</a><br />
<strong>More Depth:</strong> <a href="https://xosfaere.wordpress.com/2011/01/30/entity-framework-code-first-development-with-sql-ce-4-0/" title="Code-First Development (EF) w/ SQL CE 4.0">Code-First Development (EF) w/ SQL CE 4.0</a> &#8211; I wonder, if you do it DB-first is the code actually larger than the DB?</p>
<h2>Site Reports</h2>
<p>To be honest I haven&#8217;t spent more than about 15 minutes in the site reports because there is just so much to Web Matrix.</p>
<p>I had difficulty creating reports for some sites because it seemed like the report engine would immediately run out and start trying to index the internet. Once I got that under control I was able to run a report of my site and get back some meaningful (and some not) information.</p>
<div style="border: 1px solid #AAAAAA; font-size: 80%; color: #666666; text-align: center; padding: 8px; margin: 8px;">
<img src="http://tiernok.com/LTDBlog/webmatrix/reports.png" alt="Reports" style="padding-bottom: 5px;" /><br />
WebMatrix Reports
</div>
<p>Basically the reporting mechanism attempts to walk through the entire site, gathering statistics on the amount of time each page took to run as well as SEO warnings and errors on each page. The output of the the SEO and Performance data comes with a slider that lets you dynamically filter the output from all information to just the most important subset.</p>
<div style="border: 1px solid #AAAAAA; font-size: 80%; color: #666666; text-align: center; padding: 8px; margin: 8px;">
<img src="http://tiernok.com/LTDBlog/webmatrix/slider.png" alt="Silder" style="padding-bottom: 5px;" /><br />
Report Slider
</div>
<p>For the SEO errors, selecting an individual error displays more information about the error. Probably the most consistent warning I received was leaving the the meta description tag off every page I had written (guilty as charged). Examples of other errors included broken hyperlinks, mixed canonical formats, and just plain bad URLs. </p>
<p><strong>More Depth:</strong> <a href="http://www.microsoft.com/web/post/webmatrix-reports-workspace-help" title="Reports Workspace Help">Webmatrix Reports Workspace Help</a><br />
<strong>More Depth:</strong> <a href="http://www.microsoft.com/web/post/use-webmatrix-to-optimize-your-site-for-search-engines" title="Use WebMatrix to optimize your site for search engines">Use WebMatrix to optimize your site for search engines</a></p>
<h2>Deploying a Site</h2>
<p>Web Matrix uses <a href="http://blogs.iis.net/msdeploy/" title="Official WebDeploy team blog">WebDeploy</a>, doing away with all the manual file dragging or xcopying. On the initial deployment we are asked to enter settings in for our host or, if we don&#8217;t have a host, the tool points us to a <a href="http://www.microsoft.com/web/Hosting/Home?" title="Find Web hosting at microsoft.com">host shopping page</a> to help us find one. Once we have a host, we return to the typical WebMatrix approach of only needing a few settings (instead of a reference manual the size of my car).</p>
<div style="border: 1px solid #AAAAAA; font-size: 80%; color: #666666; text-align: center; padding: 8px; margin: 8px;">
<img src="http://tiernok.com/LTDBlog/webmatrix/publish1.png" alt="Publishing" style="padding-bottom: 5px;" /><br />
WebMatrix Publishing
</div>
<p>The initial deployment only takes a few settings or, if you are like me and have a host that supports it, the download of a settings file. The only major hiccup I ran into was that at one point I had a SQL Compact database open in Visual Studio (or maybe just locked, not sure) and this caused all kinds of deployment problems. I have since decided that closing visual studio while deploying seems to be the safe, pain-free route.</p>
<p>Deployments after the initial one are not full site deployments. The tool will scan for changes that haven&#8217;t been deployed yet and provide us with the option of selecting which changes we would like to deploy. It automatically selects all file changes, but leaves SQL Compact files unchecked. </p>
<div style="border: 1px solid #AAAAAA; font-size: 80%; color: #666666; text-align: center; padding: 8px; margin: 8px;">
<img src="http://tiernok.com/LTDBlog/webmatrix/publish2.png" alt="Publishing" style="padding-bottom: 5px;" /><br />
WebMatrix Publishing
</div>
<p>One problem I have run into, coming from a larger scale database background, was that sometimes I would forget to download a fresh copy of the database before making schema changes (so I then had to download the database, make the changes again, then deploy it back to the live site).</p>
<p><strong>More Depth:</strong> <a href="http://learn.iis.net/page.aspx/871/publish-your-website/" title="Publish Your Website - IIS.Net">Publish Your Website &#8211; IIS.Net</a><br />
<strong>More Depth:</strong> <a href="http://www.hanselman.com/blog/MicrosoftWebMatrixInContextAndDeployingYourFirstSite.aspx" title="Microsoft WebMatrix in Context and Deploying Your First Site">Microsoft WebMatrix in Context and Deploying Your First Site &#8211; Scot Hanselman</a></p>
<h2>The Bad News</h2>
<p>Not all is perfect in WebMatrix land. There are a lot of developers that will dismiss it (and anyone using it) out of hand because they see it as a step backwards (it&#8217;s ok, though, you probably don&#8217;t want to see the code they&#8217;ve been writing anyway). </p>
<p>Perhaps the biggest problem I ran into while using it was the fact that the interface occasionally went wonky on my quad-core, 10GB of RAM system w/ a fairly expensive graphics card. Apparently this is due to the use of WPF, and I&#8217;m not the first LessThanDot-er that has had <a href="/index.php/DesktopDev/MSTech/a-few-reasons-why-i-m-not-yet-moving-to" title="Chrissie's post on A Few Reasons I'm Not Yet Moving to WPF">issues with WPF</a> (and yes, my graphics drivers are up to date).</p>
<p>There are times (like with the WordPress install above) when things won&#8217;t go 100% smoothly. I have only been using it for a few weeks and so far the level of issues has not been enough to warrant a rant on twitter or switching to another topic of study, but stay tuned, it&#8217;s still a young technology.</p>
<h2>Go Try It</h2>
<p>There is little reason not to try this tool. The <a href="http://www.microsoft.com/web/webmatrix/" title="WebMatrix page at Microsoft">download</a> is free, you don&#8217;t have to invest a lot of time to learn how to use a few options in it, and you might just find that it&#8217;s a useful tool to have in your toolbelt. If you are one of the crowd that&#8217;s convinced you don&#8217;t need to learn anything past the one technology you know (and use WITH NO LOCK everywhere) then this may be too complex for you, but the rest should at least give it a try, even the non-developers. Being able to spend an afternoon putting together even a fake little website can be a fun accomplishment and, for me at least, reminded me why I got into web development and programming in the first place.</p>
]]></content:encoded>
			<wfw:commentRss>/index.php/webdev/serverprogramming/the-many-functions-of-webmatrix/feed/</wfw:commentRss>
		<slash:comments>0</slash:comments>
		</item>
		<item>
		<title>Using Razor as an Embedded Report Engine</title>
		<link>/index.php/desktopdev/mstech/csharp/using-razor-as-an-embedded/</link>
		<comments>/index.php/desktopdev/mstech/csharp/using-razor-as-an-embedded/#comments</comments>
		<pubDate>Tue, 21 Jun 2011 20:30:00 +0000</pubDate>
		<dc:creator><![CDATA[Alex Ullrich]]></dc:creator>
				<category><![CDATA[C#]]></category>
		<category><![CDATA[c#]]></category>
		<category><![CDATA[razor]]></category>
		<category><![CDATA[reporting]]></category>
		<category><![CDATA[winforms]]></category>

		<guid isPermaLink="false">/index.php/2011/06/using-razor-as-an-embedded/</guid>
		<description><![CDATA[When the Razor view engine for ASP.net MVC 3 was announced, I was not all that excited.  It is nice, and a bit more compact, but didn't seem to offer anything that special, especially compared to some of the other view engines that are out there.  Fast-&#8230;]]></description>
				<content:encoded><![CDATA[<p>When the Razor view engine for ASP.net MVC 3 was announced, I was not all that excited.  It is nice, and a bit more compact, but didn&#8217;t seem to offer anything that special, especially compared to some of the other view engines that are out there.  Fast-forward a few months and our frustration with the SSRS-derived client reports available in .NET has come to a head.  For our needs (basic &#8216;fact sheet&#8217; type reports about entities) they are absurdly slow and support for them within Visual Studio is awful due to the lag between RDL and RDLC dialects.  Coming from more of a web development background, I naturally gravitated towards something HTML based.  I&#8217;ve had pretty good success with NHaml and Spark in ASP.net MVC before, so I looked at them, but found a need to reference System.Web along with both, which is a deal breaker (we&#8217;re looking to use these in a WinForms client application).</p>
<h4>Enter Razor</h4>
<p>All this searching led me back to <a href="http://razorengine.codeplex.com/">Razor</a>, the same view engine I&#8217;d said &#8216;meh&#8217; to when it was first released.  What immediately jumped out at me was a feature that I&#8217;d missed the first time around, namely that it can run <em>outside an asp.net app domain</em> for testability.  It can be invoked rather easily from code too:</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="csharp"><thead><tr><td colspan="2"  class="head">C#</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
</pre></td><td class="de1"><pre class="de1"><span class="kw4">string</span> template <span class="sy0">=</span> <span class="st0">&quot;Hello @Model.Name! Welcome to Razor!&quot;</span><span class="sy0">;</span>
<span class="kw4">string</span> result <span class="sy0">=</span> Razor<span class="sy0">.</span><span class="me1">Parse</span><span class="br0">&#40;</span>template, <span class="kw3">new</span> <span class="br0">&#123;</span> Name <span class="sy0">=</span> <span class="st0">&quot;World&quot;</span> <span class="br0">&#125;</span><span class="br0">&#41;</span><span class="sy0">;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">string template = "Hello @Model.Name! Welcome to Razor!";
string result = Razor.Parse(template, new { Name = "World" });</pre></div></div>

<p>This certainly looked promising, so I set up a WinForms project to try it out.  Sure enough, it worked against the client profile, and about as easily as I could have hoped.  The key seems to be that it brings all of the web components it needs along for the ride in the included System.Web.Razor assembly.  </p>
<p>The main calls to the static &#8220;Razor&#8221; class that we&#8217;re concerned with are:</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="csharp"><thead><tr><td colspan="2"  class="head">C#</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
</pre></td><td class="de1"><pre class="de1"><span class="kw4">string</span> Parse<span class="sy0">&lt;</span>T<span class="sy0">&gt;</span> <span class="br0">&#40;</span>template, model<span class="br0">&#41;</span><span class="sy0">;</span>
<span class="kw4">void</span> Compile <span class="br0">&#40;</span>template, type, name<span class="br0">&#41;</span><span class="sy0">;</span>
<span class="kw4">string</span> Run<span class="sy0">&lt;</span>T<span class="sy0">&gt;</span> <span class="br0">&#40;</span>model, name<span class="br0">&#41;</span><span class="sy0">;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">string Parse&lt;T&gt; (template, model);
void Compile (template, type, name);
string Run&lt;T&gt; (model, name);</pre></div></div>

<p>These methods don&#8217;t include everything available (such as the non-generic parse method used above) but everything we&#8217;ll need.  As I think the quoted example above shows, Razor.Parse compiles the supplied template and processes it using the model supplied.  The generic version does the same thing, only with a strongly-typed model.  Compile and Run are provided for more complex views, where it makes sense to compile once and run several times.  As easy as this all is, we can&#8217;t have static calls to Razor throughout our codebase.  This post will mainly cover a bit of infrastructure I put around the Razor engine to make it a bit more user friendly.</p>
<h4>Encapsulating the Engine</h4>
<p>I wanted this code to be at least a bit testable, so I put an interface comprised of the three methods listed above around the static engine.  Implementation is as you&#8217;d expect:</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="csharp"><thead><tr><td colspan="2"  class="head">C#</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
</pre></td><td class="de1"><pre class="de1"><span class="kw1">using</span> <span class="co3">RazorEngine</span><span class="sy0">;</span>
&nbsp;
<span class="kw1">namespace</span> RazorReport <span class="br0">&#123;</span>
&nbsp; &nbsp; <span class="kw1">public</span> <span class="kw4">class</span> Engine<span class="sy0">&lt;</span>T<span class="sy0">&gt;</span> <span class="sy0">:</span> IEngine<span class="sy0">&lt;</span>T<span class="sy0">&gt;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">public</span> <span class="kw4">void</span> Compile <span class="br0">&#40;</span><span class="kw4">string</span> preparedTemplate, <span class="kw4">string</span> name<span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Razor<span class="sy0">.</span><span class="me1">Compile</span> <span class="br0">&#40;</span>preparedTemplate, <span class="kw3">typeof</span> <span class="br0">&#40;</span>T<span class="br0">&#41;</span>, name<span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">public</span> <span class="kw4">string</span> Run <span class="br0">&#40;</span>T model, <span class="kw4">string</span> name<span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">return</span> Razor<span class="sy0">.</span><span class="me1">Run</span><span class="sy0">&lt;</span>T<span class="sy0">&gt;</span> <span class="br0">&#40;</span>model, name<span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">public</span> <span class="kw4">string</span> Parse <span class="br0">&#40;</span><span class="kw4">string</span> template, T model<span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">return</span> Razor<span class="sy0">.</span><span class="me1">Parse</span><span class="sy0">&lt;</span>T<span class="sy0">&gt;</span> <span class="br0">&#40;</span>template, model<span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp; &nbsp; <span class="br0">&#125;</span>
<span class="br0">&#125;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">using RazorEngine;

namespace RazorReport {
    public class Engine&lt;T&gt; : IEngine&lt;T&gt; {
        public void Compile (string preparedTemplate, string name) {
            Razor.Compile (preparedTemplate, typeof (T), name);
        }

        public string Run (T model, string name) {
            return Razor.Run&lt;T&gt; (model, name);
        }

        public string Parse (string template, T model) {
            return Razor.Parse&lt;T&gt; (template, model);
        }
    }
}</pre></div></div>

<p>This makes it easy to confirm that the report building classes we&#8217;ll implement are interacting with the engine as expected later, ie:</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="csharp"><thead><tr><td colspan="2"  class="head">C#</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
</pre></td><td class="de1"><pre class="de1"><span class="br0">&#91;</span>Test<span class="br0">&#93;</span>
<span class="kw1">public</span> <span class="kw4">void</span> Recompiles_If_Stylesheet_Changed <span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; <span class="kw1">var</span> mockery <span class="sy0">=</span> <span class="kw3">new</span> MockRepository <span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; <span class="kw1">var</span> engine <span class="sy0">=</span> mockery<span class="sy0">.</span><span class="me1">StrictMock</span><span class="sy0">&lt;</span>IEngine<span class="sy0">&lt;</span>Example<span class="sy0">&gt;&gt;</span> <span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; <span class="kw1">var</span> templateName <span class="sy0">=</span> <span class="st0">&quot;recompileIfChange&quot;</span><span class="sy0">;</span>
&nbsp; &nbsp; <span class="kw1">var</span> template <span class="sy0">=</span> <span class="st0">&quot;template&quot;</span><span class="sy0">;</span>
&nbsp; &nbsp; <span class="kw1">var</span> css <span class="sy0">=</span> <span class="st0">&quot;STYLES&quot;</span><span class="sy0">;</span>
&nbsp; &nbsp; <span class="kw1">var</span> model <span class="sy0">=</span> <span class="kw3">new</span> Example <span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; <span class="kw1">using</span> <span class="br0">&#40;</span>mockery<span class="sy0">.</span><span class="me1">Record</span> <span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; engine<span class="sy0">.</span><span class="me1">Compile</span> <span class="br0">&#40;</span>template, templateName<span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; LastCall<span class="sy0">.</span><span class="me1">Repeat</span><span class="sy0">.</span><span class="me1">Twice</span> <span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; Expect<span class="sy0">.</span><span class="me1">Call</span> <span class="br0">&#40;</span>engine<span class="sy0">.</span><span class="me1">Run</span> <span class="br0">&#40;</span>model, templateName<span class="br0">&#41;</span><span class="br0">&#41;</span><span class="sy0">.</span><span class="me1">Repeat</span><span class="sy0">.</span><span class="me1">Twice</span> <span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">.</span><span class="kw1">Return</span> <span class="br0">&#40;</span><span class="st0">&quot;return&quot;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp;
&nbsp; &nbsp; <span class="kw1">using</span> <span class="br0">&#40;</span>mockery<span class="sy0">.</span><span class="me1">Playback</span> <span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">var</span> builder <span class="sy0">=</span> ReportBuilder<span class="sy0">&lt;</span>Example<span class="sy0">&gt;.</span><span class="me1">CreateWithEngineInstance</span> <span class="br0">&#40;</span>templateName, engine<span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="sy0">.</span><span class="me1">WithTemplate</span> <span class="br0">&#40;</span>template<span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="sy0">.</span><span class="me1">WithPrecompilation</span> <span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; builder<span class="sy0">.</span><span class="me1">BuildReport</span> <span class="br0">&#40;</span>model<span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; builder <span class="sy0">=</span> builder<span class="sy0">.</span><span class="me1">WithCss</span> <span class="br0">&#40;</span>css<span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; builder<span class="sy0">.</span><span class="me1">BuildReport</span> <span class="br0">&#40;</span>model<span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; <span class="br0">&#125;</span>
<span class="br0">&#125;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">[Test]
public void Recompiles_If_Stylesheet_Changed () {
    var mockery = new MockRepository ();
    var engine = mockery.StrictMock&lt;IEngine&lt;Example&gt;&gt; ();

    var templateName = "recompileIfChange";
    var template = "template";
    var css = "STYLES";
    var model = new Example ();

    using (mockery.Record ()) {
        engine.Compile (template, templateName);
        LastCall.Repeat.Twice ();

        Expect.Call (engine.Run (model, templateName)).Repeat.Twice ().Return ("return");
    }

    using (mockery.Playback ()) {
        var builder = ReportBuilder&lt;Example&gt;.CreateWithEngineInstance (templateName, engine)
            .WithTemplate (template)
            .WithPrecompilation ();

        builder.BuildReport (model);

        builder = builder.WithCss (css);

        builder.BuildReport (model);
    }
}</pre></div></div>

<p>At first I kind of lamented the fact that this stuff is offered through a static class (primarily for testability reasons) but kind of came around after a while.  I&#8217;m sure having the engine static helps keep performance acceptable, and I&#8217;d rather be able to easily define a simple interface like this than be stuck with an interface that doesn&#8217;t quite do what I&#8217;d like.</p>
<h4>Finding Templates</h4>
<p>The other bit of code we need before getting started is a means of finding templates, both those included as embedded resources and those on the file system:</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="csharp"><thead><tr><td colspan="2"  class="head">C#</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
</pre></td><td class="de1"><pre class="de1"><span class="kw1">using</span> <span class="co3">System.IO</span><span class="sy0">;</span>
<span class="kw1">using</span> <span class="co3">System.Reflection</span><span class="sy0">;</span>
&nbsp;
<span class="kw1">namespace</span> RazorReport <span class="br0">&#123;</span>
&nbsp; &nbsp; <span class="kw4">class</span> TemplateFinder <span class="br0">&#123;</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">public</span> <span class="kw1">static</span> <span class="kw4">string</span> GetTemplateFromResource <span class="br0">&#40;</span><span class="kw4">string</span> resourceName, Assembly assembly<span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">using</span> <span class="br0">&#40;</span><span class="kw1">var</span> stream <span class="sy0">=</span> assembly<span class="sy0">.</span><span class="me1">GetManifestResourceStream</span> <span class="br0">&#40;</span>resourceName<span class="br0">&#41;</span><span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">using</span> <span class="br0">&#40;</span>TextReader reader <span class="sy0">=</span> <span class="kw3">new</span> StreamReader <span class="br0">&#40;</span>stream<span class="br0">&#41;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">return</span> reader<span class="sy0">.</span><span class="me1">ReadToEnd</span> <span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">public</span> <span class="kw1">static</span> <span class="kw4">string</span> GetTemplateFromFileSystem <span class="br0">&#40;</span><span class="kw4">string</span> templatePath<span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">return</span> File<span class="sy0">.</span><span class="me1">ReadAllText</span> <span class="br0">&#40;</span>templatePath<span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp; &nbsp; <span class="br0">&#125;</span>
<span class="br0">&#125;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">using System.IO;
using System.Reflection;

namespace RazorReport {
    class TemplateFinder {

        public static string GetTemplateFromResource (string resourceName, Assembly assembly) {
            using (var stream = assembly.GetManifestResourceStream (resourceName))
            using (TextReader reader = new StreamReader (stream)) {
                return reader.ReadToEnd ();
            }
        }

        public static string GetTemplateFromFileSystem (string templatePath) {
            return File.ReadAllText (templatePath);
        }
    }
}</pre></div></div>

<p>I guess you could argue that this needs to be a non-static class with an interface for testability.  And you&#8217;d be right.  But I am not sure I&#8217;d be convinced that it&#8217;s needed.</p>
<h4>Building Reports</h4>
<p>I think the idea of using a fluent interface for report builder configuration came up in a conversation with my usual <a href="/index.php/All/?disp=authdir&amp;author=225">remote pairing partner</a>.  The idea is that you would set up a report builder like this:</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="csharp"><thead><tr><td colspan="2"  class="head">C#</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
</pre></td><td class="de1"><pre class="de1"><span class="kw1">var</span> builder <span class="sy0">=</span> ReportBuilder<span class="sy0">.</span><span class="me1">Create</span><span class="sy0">&lt;</span>Foo<span class="sy0">&gt;</span><span class="br0">&#40;</span><span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="sy0">.</span><span class="me1">WithTemplate</span><span class="br0">&#40;</span><span class="st0">&quot;template&quot;</span><span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="sy0">.</span><span class="me1">WithStylesheet</span><span class="br0">&#40;</span><span class="st0">&quot;stylesheet&quot;</span><span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="sy0">.</span><span class="me1">WithPrecompilation</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">var builder = ReportBuilder.Create&lt;Foo&gt;()
                  .WithTemplate("template")
                  .WithStylesheet("stylesheet")
                  .WithPrecompilation();</pre></div></div>

<p>Or something along those lines.  It seemed to work well enough so I rolled with it.  The complete interface looks like this:</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="csharp"><thead><tr><td colspan="2"  class="head">C#</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
</pre></td><td class="de1"><pre class="de1"><span class="kw1">using</span> <span class="co3">System.Reflection</span><span class="sy0">;</span>
&nbsp;
<span class="kw1">namespace</span> RazorReport <span class="br0">&#123;</span>
&nbsp; &nbsp; <span class="kw1">public</span> <span class="kw4">interface</span> IReportBuilder<span class="sy0">&lt;</span>T<span class="sy0">&gt;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; IReportBuilder<span class="sy0">&lt;</span>T<span class="sy0">&gt;</span> WithTemplate <span class="br0">&#40;</span><span class="kw4">string</span> template<span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; IReportBuilder<span class="sy0">&lt;</span>T<span class="sy0">&gt;</span> WithCss <span class="br0">&#40;</span><span class="kw4">string</span> css<span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; IReportBuilder<span class="sy0">&lt;</span>T<span class="sy0">&gt;</span> WithTemplateFromFileSystem <span class="br0">&#40;</span><span class="kw4">string</span> templatePath<span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; IReportBuilder<span class="sy0">&lt;</span>T<span class="sy0">&gt;</span> WithCssFromFileSystem <span class="br0">&#40;</span><span class="kw4">string</span> cssPath<span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; IReportBuilder<span class="sy0">&lt;</span>T<span class="sy0">&gt;</span> WithTemplateFromResource <span class="br0">&#40;</span><span class="kw4">string</span> resourceName, Assembly assembly<span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; IReportBuilder<span class="sy0">&lt;</span>T<span class="sy0">&gt;</span> WithCssFromResource <span class="br0">&#40;</span><span class="kw4">string</span> resourceName, Assembly assembly<span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; IReportBuilder<span class="sy0">&lt;</span>T<span class="sy0">&gt;</span> WithPrecompilation <span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw4">string</span> BuildReport <span class="br0">&#40;</span>T model<span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; <span class="br0">&#125;</span>
<span class="br0">&#125;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">using System.Reflection;

namespace RazorReport {
    public interface IReportBuilder&lt;T&gt; {
        IReportBuilder&lt;T&gt; WithTemplate (string template);
        IReportBuilder&lt;T&gt; WithCss (string css);
        IReportBuilder&lt;T&gt; WithTemplateFromFileSystem (string templatePath);
        IReportBuilder&lt;T&gt; WithCssFromFileSystem (string cssPath);
        IReportBuilder&lt;T&gt; WithTemplateFromResource (string resourceName, Assembly assembly);
        IReportBuilder&lt;T&gt; WithCssFromResource (string resourceName, Assembly assembly);
        IReportBuilder&lt;T&gt; WithPrecompilation ();

        string BuildReport (T model);
    }
}</pre></div></div>

<p>The only thing added was some methods to get templates / stylesheets from the file system or embedded resources if needed.  I thought about (and continue to think about) adding some kind of base template functionality, but I haven&#8217;t quite settled on how it should work so I&#8217;ve left it out for now.  There is definitely some interesting stuff in Razor that could help with this though.</p>
<p>There isn&#8217;t time to cover everything, but calling BuildReport sends you through the following methods:</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="csharp"><thead><tr><td colspan="2"  class="head">C#</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
</pre></td><td class="de1"><pre class="de1"><span class="kw1">public</span> <span class="kw4">string</span> BuildReport <span class="br0">&#40;</span>T model<span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; <span class="kw1">return</span> precompile <span class="sy0">?</span> CompiledReport <span class="br0">&#40;</span>model<span class="br0">&#41;</span> <span class="sy0">:</span> Report <span class="br0">&#40;</span>model<span class="br0">&#41;</span><span class="sy0">;</span>
<span class="br0">&#125;</span>
&nbsp;
<span class="kw4">string</span> CompiledReport <span class="br0">&#40;</span>T model<span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; <span class="kw1">if</span> <span class="br0">&#40;</span>needsCompilation<span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; engine<span class="sy0">.</span><span class="me1">Compile</span> <span class="br0">&#40;</span>PrepareTemplate <span class="br0">&#40;</span><span class="br0">&#41;</span>, name<span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; needsCompilation <span class="sy0">=</span> <span class="kw1">false</span><span class="sy0">;</span>
&nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp; &nbsp; <span class="kw1">return</span> engine<span class="sy0">.</span><span class="me1">Run</span> <span class="br0">&#40;</span>model, name<span class="br0">&#41;</span><span class="sy0">;</span>
<span class="br0">&#125;</span>
&nbsp;
<span class="kw4">string</span> Report <span class="br0">&#40;</span>T model<span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; <span class="kw1">return</span> engine<span class="sy0">.</span><span class="me1">Parse</span> <span class="br0">&#40;</span>PrepareTemplate <span class="br0">&#40;</span><span class="br0">&#41;</span>, model<span class="br0">&#41;</span><span class="sy0">;</span>
<span class="br0">&#125;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">public string BuildReport (T model) {
    return precompile ? CompiledReport (model) : Report (model);
}

string CompiledReport (T model) {
    if (needsCompilation) {
        engine.Compile (PrepareTemplate (), name);
        needsCompilation = false;
    }
    return engine.Run (model, name);
}

string Report (T model) {
    return engine.Parse (PrepareTemplate (), model);
}</pre></div></div>

<p>The needsCompilation flag gets flipped whenever the template or stylesheet gets changed, to ensure that any template modifications are picked up when using precompilation.</p>
<h4>Enough Already, Where&#8217;s the Code?</h4>
<p>If you&#8217;re interested in taking a look what I&#8217;ve got so far is over at <a href="https://github.com/AlexCuse/RazorReport/tree/initial-blogpost">github</a>.  It&#8217;s still a work in progress, and may undergo significant change.  I tagged the current state just so it will reflect what&#8217;s discussed here, but the trunk may be more interesting.  Feel free to offer suggestions that would make it more useful to you.  They will always be considered (especially if submitted as pull requests <img src="https://s.w.org/images/core/emoji/2/72x72/1f642.png" alt="🙂" class="wp-smiley" style="height: 1em; max-height: 1em;" /> )</p>
]]></content:encoded>
			<wfw:commentRss>/index.php/desktopdev/mstech/csharp/using-razor-as-an-embedded/feed/</wfw:commentRss>
		<slash:comments>2</slash:comments>
		</item>
	</channel>
</rss>
