<?xml version="1.0" encoding="UTF-8"?><rss version="2.0"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:atom="http://www.w3.org/2005/Atom"
	xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
	xmlns:slash="http://purl.org/rss/1.0/modules/slash/"
	>

<channel>
	<title>transpose &#8211; LessthanDot</title>
	<atom:link href="/index.php/tag/transpose/feed/" rel="self" type="application/rss+xml" />
	<link>/</link>
	<description>A Technical Community for IT Professionals</description>
	<lastBuildDate>Sat, 09 Mar 2019 12:50:36 +0000</lastBuildDate>
	<language>en-US</language>
	<sy:updatePeriod>hourly</sy:updatePeriod>
	<sy:updateFrequency>1</sy:updateFrequency>
	<generator>https://wordpress.org/?v=4.6.1</generator>
	<item>
		<title>SQL Advent 2011 Day 7: Crosstab with PIVOT</title>
		<link>/index.php/datamgmt/datadesign/sql-advent-2011-day-7/</link>
		<comments>/index.php/datamgmt/datadesign/sql-advent-2011-day-7/#respond</comments>
		<pubDate>Wed, 07 Dec 2011 13:22:00 +0000</pubDate>
		<dc:creator><![CDATA[SQLDenis]]></dc:creator>
				<category><![CDATA[Data Modelling and Design]]></category>
		<category><![CDATA[crosstab]]></category>
		<category><![CDATA[function]]></category>
		<category><![CDATA[pivot]]></category>
		<category><![CDATA[sql server 2005]]></category>
		<category><![CDATA[sql server 2008]]></category>
		<category><![CDATA[transpose]]></category>

		<guid isPermaLink="false">/index.php/2011/12/sql-advent-2011-day-7/</guid>
		<description><![CDATA[In my Are you ready for SQL Server 2012 or are you still partying like it is 1999? post, I wrote about how you should start using SQL Server 2005 and SQL Server 2008 functionality now in order to prepare for SQL Server 2012. I still see tons of code tha&#8230;]]></description>
				<content:encoded><![CDATA[<p>In my <a href="/index.php/DataMgmt/DataDesign/are-you-ready-for-sql">Are you ready for SQL Server 2012 or are you still partying like it is 1999?</a> post, I wrote about how you should start using SQL Server 2005 and SQL Server 2008 functionality now in order to prepare for SQL Server 2012. I still see tons of code that is written in the pre 2005 style and people still keep using those functions, procs and statements even though SQL Server 2005 and 2008 have much better functionality.</p>
<p>In today&#8217;s post I will cover the PIVOT operator</p>
<h2>The simplest PIVOT example</h2>
<p>In order to show you the simplest example of doing a pivot, create this table</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
</pre></td><td class="de1"><pre class="de1"><span class="kw1">CREATE</span> <span class="kw1">TABLE</span> #test <span class="br0">&#40;</span>id <span class="kw1">int</span>, <span class="kw1">Value</span> <span class="kw1">char</span><span class="br0">&#40;</span><span class="nu0">1</span><span class="br0">&#41;</span><span class="br0">&#41;</span>
<span class="kw1">INSERT</span> #test <span class="kw1">VALUES</span><span class="br0">&#40;</span><span class="nu0">1</span>,<span class="st0">'A'</span><span class="br0">&#41;</span>
<span class="kw1">INSERT</span> #test <span class="kw1">VALUES</span><span class="br0">&#40;</span><span class="nu0">2</span>,<span class="st0">'A'</span><span class="br0">&#41;</span>
<span class="kw1">INSERT</span> #test <span class="kw1">VALUES</span><span class="br0">&#40;</span><span class="nu0">1</span>,<span class="st0">'B'</span><span class="br0">&#41;</span>
<span class="kw1">INSERT</span> #test <span class="kw1">VALUES</span><span class="br0">&#40;</span><span class="nu0">2</span>,<span class="st0">'B'</span><span class="br0">&#41;</span>
<span class="kw1">INSERT</span> #test <span class="kw1">VALUES</span><span class="br0">&#40;</span><span class="nu0">1</span>,<span class="st0">'C'</span><span class="br0">&#41;</span>
<span class="kw1">INSERT</span> #test <span class="kw1">VALUES</span><span class="br0">&#40;</span><span class="nu0">2</span>,<span class="st0">'C'</span><span class="br0">&#41;</span>
<span class="kw1">INSERT</span> #test <span class="kw1">VALUES</span><span class="br0">&#40;</span><span class="nu0">1</span>,<span class="st0">'D'</span><span class="br0">&#41;</span>
<span class="kw1">INSERT</span> #test <span class="kw1">VALUES</span><span class="br0">&#40;</span><span class="nu0">2</span>,<span class="st0">'D'</span><span class="br0">&#41;</span>
<span class="kw1">INSERT</span> #test <span class="kw1">VALUES</span><span class="br0">&#40;</span><span class="nu0">1</span>,<span class="st0">'E'</span><span class="br0">&#41;</span>
<span class="kw1">INSERT</span> #test <span class="kw1">VALUES</span><span class="br0">&#40;</span><span class="nu0">2</span>,<span class="st0">'E'</span><span class="br0">&#41;</span>
<span class="kw1">INSERT</span> #test <span class="kw1">VALUES</span><span class="br0">&#40;</span><span class="nu0">1</span>,<span class="st0">'F'</span><span class="br0">&#41;</span>
<span class="kw1">INSERT</span> #test <span class="kw1">VALUES</span><span class="br0">&#40;</span><span class="nu0">2</span>,<span class="st0">'F'</span><span class="br0">&#41;</span>
<span class="kw1">INSERT</span> #test <span class="kw1">VALUES</span><span class="br0">&#40;</span><span class="nu0">3</span>,<span class="st0">'F'</span><span class="br0">&#41;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">CREATE TABLE #test (id int, Value char(1))
INSERT #test VALUES(1,'A')
INSERT #test VALUES(2,'A')
INSERT #test VALUES(1,'B')
INSERT #test VALUES(2,'B')
INSERT #test VALUES(1,'C')
INSERT #test VALUES(2,'C')
INSERT #test VALUES(1,'D')
INSERT #test VALUES(2,'D')
INSERT #test VALUES(1,'E')
INSERT #test VALUES(2,'E')
INSERT #test VALUES(1,'F')
INSERT #test VALUES(2,'F')
INSERT #test VALUES(3,'F')</pre></div></div>

<p>What we want is the following output</p>
<pre>A	B	C	D	E	F
3	3	3	3	3	6</pre>
<p>So for each distinct value in the Value column we want to display it in its own column and sum up the values of the ID column</p>
<p>The query below show SQL Server 2000 syntax to do a pivot </p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
</pre></td><td class="de1"><pre class="de1"><span class="kw1">SELECT</span>&nbsp; <span class="kw2">SUM</span><span class="br0">&#40;</span><span class="kw1">CASE</span> <span class="kw1">WHEN</span> <span class="kw1">Value</span> <span class="sy0">=</span><span class="st0">'A'</span> <span class="kw1">THEN</span> ID <span class="kw1">ELSE</span> <span class="nu0">0</span> <span class="kw1">END</span><span class="br0">&#41;</span> <span class="kw1">AS</span> A,
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw2">SUM</span><span class="br0">&#40;</span><span class="kw1">CASE</span> <span class="kw1">WHEN</span> <span class="kw1">Value</span> <span class="sy0">=</span><span class="st0">'B'</span> <span class="kw1">THEN</span> ID <span class="kw1">ELSE</span> <span class="nu0">0</span> <span class="kw1">END</span><span class="br0">&#41;</span> <span class="kw1">AS</span> B,
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw2">SUM</span><span class="br0">&#40;</span><span class="kw1">CASE</span> <span class="kw1">WHEN</span> <span class="kw1">Value</span> <span class="sy0">=</span><span class="st0">'C'</span> <span class="kw1">THEN</span> ID <span class="kw1">ELSE</span> <span class="nu0">0</span> <span class="kw1">END</span><span class="br0">&#41;</span> <span class="kw1">AS</span> C,
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw2">SUM</span><span class="br0">&#40;</span><span class="kw1">CASE</span> <span class="kw1">WHEN</span> <span class="kw1">Value</span> <span class="sy0">=</span><span class="st0">'D'</span> <span class="kw1">THEN</span> ID <span class="kw1">ELSE</span> <span class="nu0">0</span> <span class="kw1">END</span><span class="br0">&#41;</span> <span class="kw1">AS</span> D,
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw2">SUM</span><span class="br0">&#40;</span><span class="kw1">CASE</span> <span class="kw1">WHEN</span> <span class="kw1">Value</span> <span class="sy0">=</span><span class="st0">'E'</span> <span class="kw1">THEN</span> ID <span class="kw1">ELSE</span> <span class="nu0">0</span> <span class="kw1">END</span><span class="br0">&#41;</span> <span class="kw1">AS</span> E,
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw2">SUM</span><span class="br0">&#40;</span><span class="kw1">CASE</span> <span class="kw1">WHEN</span> <span class="kw1">Value</span> <span class="sy0">=</span><span class="st0">'F'</span> <span class="kw1">THEN</span> ID <span class="kw1">ELSE</span> <span class="nu0">0</span> <span class="kw1">END</span><span class="br0">&#41;</span> <span class="kw1">AS</span> F
<span class="kw1">FROM</span> #test</pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">SELECT	SUM(CASE WHEN Value ='A' THEN ID ELSE 0 END) AS A,
		SUM(CASE WHEN Value ='B' THEN ID ELSE 0 END) AS B,
		SUM(CASE WHEN Value ='C' THEN ID ELSE 0 END) AS C,
		SUM(CASE WHEN Value ='D' THEN ID ELSE 0 END) AS D,
		SUM(CASE WHEN Value ='E' THEN ID ELSE 0 END) AS E,
		SUM(CASE WHEN Value ='F' THEN ID ELSE 0 END) AS F
FROM #test</pre></div></div>

<p>And here is SQL Server 2005 and up syntax</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
</pre></td><td class="de1"><pre class="de1"><span class="kw1">SELECT</span> <span class="sy0">*</span> <span class="kw1">FROM</span>
<span class="br0">&#40;</span> &nbsp; <span class="kw1">SELECT</span> <span class="sy0">*</span>
&nbsp; &nbsp; <span class="kw1">FROM</span> #test
<span class="br0">&#41;</span> <span class="kw1">AS</span> pivTemp
PIVOT
<span class="br0">&#40;</span> &nbsp; <span class="kw2">SUM</span><span class="br0">&#40;</span>ID<span class="br0">&#41;</span>
&nbsp; &nbsp; <span class="kw1">FOR</span> <span class="kw1">Value</span> <span class="sy0">IN</span> <span class="br0">&#40;</span> A,B,C,D,E,F <span class="br0">&#41;</span>
<span class="br0">&#41;</span> <span class="kw1">AS</span> pivTable</pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">SELECT * FROM
(	SELECT *
	FROM #test
) AS pivTemp
PIVOT
(   SUM(ID)
    FOR Value IN ( A,B,C,D,E,F )
) AS pivTable</pre></div></div>

<p>As you can see the 2005 syntax is much cleaner. At first sight the PIVOT syntax looks really complicated, it is really not once you get used to it.</p>
<p>This part</p>
<p>SUM(ID)<br />
FOR Value IN(C,D)</p>
<p>Is the same as</p>
<p>SUM(CASE WHEN Value =&#8217;C&#8217; THEN ID ELSE 0 END) AS C,<br />
SUM(CASE WHEN Value =&#8217;D&#8217; THEN ID ELSE 0 END) AS D,</p>
<p>So the value that is in the Value  column goes in the IN(C,D), the column you want to sum goes in the SUM(ID) part</p>
<h2>Some more pivot examples</h2>
<p>Let&#8217;s create a couple of tables and populate them with some data</p>
<p>The first table will have some IDs and some values tied to those IDs</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
</pre></td><td class="de1"><pre class="de1"><span class="kw1">CREATE</span> <span class="kw1">TABLE</span> SomeTable<span class="br0">&#40;</span>ID <span class="kw1">INT</span>,IdValue <span class="kw1">VARCHAR</span><span class="br0">&#40;</span><span class="nu0">100</span><span class="br0">&#41;</span><span class="br0">&#41;</span>
<span class="kw1">INSERT</span> SomeTable <span class="kw1">VALUES</span><span class="br0">&#40;</span><span class="nu0">1</span>,<span class="st0">'SomeDate'</span><span class="br0">&#41;</span>
<span class="kw1">INSERT</span> SomeTable <span class="kw1">VALUES</span><span class="br0">&#40;</span><span class="nu0">2</span>,<span class="st0">'SomeName'</span><span class="br0">&#41;</span>
<span class="kw1">INSERT</span> SomeTable <span class="kw1">VALUES</span><span class="br0">&#40;</span><span class="nu0">3</span>,<span class="st0">'SomeValue'</span><span class="br0">&#41;</span>
<span class="kw1">INSERT</span> SomeTable <span class="kw1">VALUES</span><span class="br0">&#40;</span><span class="nu0">4</span>,<span class="st0">'SomeID'</span><span class="br0">&#41;</span>
<span class="kw1">INSERT</span> SomeTable <span class="kw1">VALUES</span><span class="br0">&#40;</span><span class="nu0">5</span>,<span class="st0">'SomeNumber'</span><span class="br0">&#41;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">CREATE TABLE SomeTable(ID INT,IdValue VARCHAR(100))
INSERT SomeTable VALUES(1,'SomeDate')
INSERT SomeTable VALUES(2,'SomeName')
INSERT SomeTable VALUES(3,'SomeValue')
INSERT SomeTable VALUES(4,'SomeID')
INSERT SomeTable VALUES(5,'SomeNumber')</pre></div></div>

<p>This table will have  a bunch of employees</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
</pre></td><td class="de1"><pre class="de1"><span class="kw1">CREATE</span> <span class="kw1">TABLE</span> SomeEmployees <span class="br0">&#40;</span>SomeID <span class="kw1">INT</span>, SomeName <span class="kw1">VARCHAR</span><span class="br0">&#40;</span><span class="nu0">100</span><span class="br0">&#41;</span><span class="br0">&#41;</span>
<span class="kw1">INSERT</span> SomeEmployees <span class="kw1">VALUES</span> <span class="br0">&#40;</span><span class="nu0">1</span>,<span class="st0">'Denis'</span><span class="br0">&#41;</span>
<span class="kw1">INSERT</span> SomeEmployees <span class="kw1">VALUES</span> <span class="br0">&#40;</span><span class="nu0">2</span>,<span class="st0">'Chris'</span><span class="br0">&#41;</span>
<span class="kw1">INSERT</span> SomeEmployees <span class="kw1">VALUES</span> <span class="br0">&#40;</span><span class="nu0">3</span>,<span class="st0">'Ted'</span><span class="br0">&#41;</span>
<span class="kw1">INSERT</span> SomeEmployees <span class="kw1">VALUES</span> <span class="br0">&#40;</span><span class="nu0">4</span>,<span class="st0">'Eli'</span><span class="br0">&#41;</span>
<span class="kw1">INSERT</span> SomeEmployees <span class="kw1">VALUES</span> <span class="br0">&#40;</span><span class="nu0">5</span>,<span class="st0">'George'</span><span class="br0">&#41;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">CREATE TABLE SomeEmployees (SomeID INT, SomeName VARCHAR(100))
INSERT SomeEmployees VALUES (1,'Denis')
INSERT SomeEmployees VALUES (2,'Chris')
INSERT SomeEmployees VALUES (3,'Ted')
INSERT SomeEmployees VALUES (4,'Eli')
INSERT SomeEmployees VALUES (5,'George')</pre></div></div>

<p>The final table will have values for each employee from the SomeTable. So each employee will have a SomeDate value etc etc</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
</pre></td><td class="de1"><pre class="de1"><span class="kw1">CREATE</span> <span class="kw1">TABLE</span> SomeValue <span class="br0">&#40;</span>SomeID <span class="kw1">INT</span>,ID <span class="kw1">INT</span>,<span class="kw1">Value</span> <span class="kw1">VARCHAR</span><span class="br0">&#40;</span><span class="nu0">100</span><span class="br0">&#41;</span><span class="br0">&#41;</span>
<span class="co1">--Denis</span>
<span class="kw1">INSERT</span> SomeValue <span class="kw1">VALUES</span> <span class="br0">&#40;</span><span class="nu0">1</span>,<span class="nu0">1</span>,<span class="st0">'2011-01-01'</span><span class="br0">&#41;</span>
<span class="kw1">INSERT</span> SomeValue <span class="kw1">VALUES</span> <span class="br0">&#40;</span><span class="nu0">1</span>,<span class="nu0">2</span>,<span class="st0">'Bla'</span><span class="br0">&#41;</span>
<span class="kw1">INSERT</span> SomeValue <span class="kw1">VALUES</span> <span class="br0">&#40;</span><span class="nu0">1</span>,<span class="nu0">3</span>,<span class="st0">'5'</span><span class="br0">&#41;</span>
<span class="kw1">INSERT</span> SomeValue <span class="kw1">VALUES</span> <span class="br0">&#40;</span><span class="nu0">1</span>,<span class="nu0">4</span>,<span class="st0">'100'</span><span class="br0">&#41;</span>
<span class="kw1">INSERT</span> SomeValue <span class="kw1">VALUES</span> <span class="br0">&#40;</span><span class="nu0">1</span>,<span class="nu0">5</span>,<span class="st0">'300'</span><span class="br0">&#41;</span>
&nbsp;
&nbsp;
<span class="co1">--Chris</span>
<span class="kw1">INSERT</span> SomeValue <span class="kw1">VALUES</span> <span class="br0">&#40;</span><span class="nu0">2</span>,<span class="nu0">1</span>,<span class="st0">'2012-01-01'</span><span class="br0">&#41;</span>
<span class="kw1">INSERT</span> SomeValue <span class="kw1">VALUES</span> <span class="br0">&#40;</span><span class="nu0">2</span>,<span class="nu0">2</span>,<span class="st0">'Bla2'</span><span class="br0">&#41;</span>
<span class="kw1">INSERT</span> SomeValue <span class="kw1">VALUES</span> <span class="br0">&#40;</span><span class="nu0">2</span>,<span class="nu0">3</span>,<span class="st0">'8'</span><span class="br0">&#41;</span>
<span class="kw1">INSERT</span> SomeValue <span class="kw1">VALUES</span> <span class="br0">&#40;</span><span class="nu0">2</span>,<span class="nu0">4</span>,<span class="st0">'200'</span><span class="br0">&#41;</span>
<span class="kw1">INSERT</span> SomeValue <span class="kw1">VALUES</span> <span class="br0">&#40;</span><span class="nu0">2</span>,<span class="nu0">5</span>,<span class="st0">'400'</span><span class="br0">&#41;</span>
&nbsp;
<span class="co1">--Ted</span>
<span class="kw1">INSERT</span> SomeValue <span class="kw1">VALUES</span> <span class="br0">&#40;</span><span class="nu0">3</span>,<span class="nu0">1</span>,<span class="st0">'2013-01-01'</span><span class="br0">&#41;</span>
<span class="kw1">INSERT</span> SomeValue <span class="kw1">VALUES</span> <span class="br0">&#40;</span><span class="nu0">3</span>,<span class="nu0">2</span>,<span class="st0">'Bla3'</span><span class="br0">&#41;</span>
<span class="kw1">INSERT</span> SomeValue <span class="kw1">VALUES</span> <span class="br0">&#40;</span><span class="nu0">3</span>,<span class="nu0">3</span>,<span class="st0">'9'</span><span class="br0">&#41;</span>
<span class="kw1">INSERT</span> SomeValue <span class="kw1">VALUES</span> <span class="br0">&#40;</span><span class="nu0">3</span>,<span class="nu0">4</span>,<span class="st0">'300'</span><span class="br0">&#41;</span>
<span class="kw1">INSERT</span> SomeValue <span class="kw1">VALUES</span> <span class="br0">&#40;</span><span class="nu0">3</span>,<span class="nu0">5</span>,<span class="st0">'500'</span><span class="br0">&#41;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">CREATE TABLE SomeValue (SomeID INT,ID INT,Value VARCHAR(100))
--Denis
INSERT SomeValue VALUES (1,1,'2011-01-01')
INSERT SomeValue VALUES (1,2,'Bla')
INSERT SomeValue VALUES (1,3,'5')
INSERT SomeValue VALUES (1,4,'100')
INSERT SomeValue VALUES (1,5,'300')


--Chris
INSERT SomeValue VALUES (2,1,'2012-01-01')
INSERT SomeValue VALUES (2,2,'Bla2')
INSERT SomeValue VALUES (2,3,'8')
INSERT SomeValue VALUES (2,4,'200')
INSERT SomeValue VALUES (2,5,'400')

--Ted
INSERT SomeValue VALUES (3,1,'2013-01-01')
INSERT SomeValue VALUES (3,2,'Bla3')
INSERT SomeValue VALUES (3,3,'9')
INSERT SomeValue VALUES (3,4,'300')
INSERT SomeValue VALUES (3,5,'500')</pre></div></div>

<p>If we now query these 3 table with the following query</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
</pre></td><td class="de1"><pre class="de1"><span class="kw1">SELECT</span> <span class="sy0">*</span> <span class="kw1">FROM</span> SomeTable st 
<span class="sy0">JOIN</span> SomeValue sv <span class="kw1">ON</span> st.<span class="me1">ID</span> <span class="sy0">=</span> sv.<span class="me1">ID</span>
<span class="sy0">JOIN</span> SomeEmployees se <span class="kw1">ON</span> se.<span class="me1">SomeID</span> <span class="sy0">=</span> sv.<span class="me1">SomeID</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">SELECT * FROM SomeTable st 
JOIN SomeValue sv ON st.ID = sv.ID
JOIN SomeEmployees se ON se.SomeID = sv.SomeID</pre></div></div>

<p>We get this resultset back</p>
<div class="tables">
<table>
<tr>
<th>ID</th>
<th>	IdValue</th>
<th>	SomeID	</th>
<th>ID	</th>
<th>Value</th>
<th>	SomeID</th>
<th>	SomeName</th>
</tr>
<tr>
<td>1</td>
<td>	SomeDate</td>
<td>	1</td>
<td>	1</td>
<td>	2011-01-01	</td>
<td>1</td>
<td>	Denis</td>
</tr>
<tr>
<td>2</td>
<td>	SomeName</td>
<td>	1</td>
<td>	2</td>
<td>	Bla</td>
<td>	1</td>
<td>	Denis</td>
</tr>
<tr>
<td>3</td>
<td>	SomeValue</td>
<td>	1</td>
<td>	3</td>
<td>	5</td>
<td>	1</td>
<td>	Denis</td>
</tr>
<tr>
<td>4</td>
<td>	SomeID</td>
<td>	1</td>
<td>	4</td>
<td>	100</td>
<td>	1</td>
<td>	Denis</td>
</tr>
<tr>
<td>5</td>
<td>	SomeNumber</td>
<td>	1</td>
<td>	5</td>
<td>	300</td>
<td>	1</td>
<td>	Denis</td>
</tr>
<tr>
<td>1</td>
<td>	SomeDate</td>
<td>	2</td>
<td>	1</td>
<td>	2012-01-01</td>
<td>	2</td>
<td>	Chris</td>
</tr>
<tr>
<td>2</td>
<td>	SomeName</td>
<td>	2</td>
<td>	2</td>
<td>	Bla2</td>
<td>	2</td>
<td>	Chris</td>
</tr>
<tr>
<td>3</td>
<td>	SomeValue</td>
<td>	2</td>
<td>	3</td>
<td>	8</td>
<td>	2</td>
<td>	Chris</td>
</tr>
<tr>
<td>4</td>
<td>	SomeID</td>
<td>	2</td>
<td>	4</td>
<td>	200</td>
<td>	2</td>
<td>	Chris</td>
</tr>
<tr>
<td>5</td>
<td>	SomeNumber</td>
<td>	2</td>
<td>	5</td>
<td>	400	</td>
<td>2</td>
<td>	Chris</td>
</tr>
<tr>
<td>1</td>
<td>	SomeDate</td>
<td>	3</td>
<td>	1</td>
<td>	2013-01-01</td>
<td>	3</td>
<td>	Ted</td>
</tr>
<tr>
<td>2</td>
<td>	SomeName</td>
<td>	3</td>
<td>	2</td>
<td>	Bla3</td>
<td>	3</td>
<td>	Ted</td>
</tr>
<tr>
<td>3</td>
<td>	SomeValue</td>
<td>	3</td>
<td>	3</td>
<td>	9</td>
<td>	3</td>
<td>	Ted</td>
</tr>
<tr>
<td>4</td>
<td>	SomeID</td>
<td>	3</td>
<td>	4</td>
<td>	300</td>
<td>	3</td>
<td>	Ted</td>
</tr>
<tr>
<td>5</td>
<td>	SomeNumber</td>
<td>	3</td>
<td>	5</td>
<td>	500</td>
<td>	3</td>
<td>	Ted</td>
</tr>
</table>
</div>
<p>What if we want this instead?</p>
<div class="tables">
<table>
<tr>
<th>TheName</th>
<th>	SomeValue</th>
<th>	Somedate</th>
<th>	SomeID</th>
<th>	SomeName</th>
<th>	SomeNumber</th>
</tr>
<tr>
<td>Chris</td>
<td>	8</td>
<td>	2012-01-01</td>
<td>	200</td>
<td>	Bla2</td>
<td>	400</td>
</tr>
<tr>
<td>Denis</td>
<td>	5</td>
<td>	2011-01-01</td>
<td>	100</td>
<td>	Bla</td>
<td>	300</td>
</tr>
<tr>
<td>Ted</td>
<td>	9</td>
<td>	2013-01-01</td>
<td>	300</td>
<td>	Bla3</td>
<td>	500</td>
</tr>
</table>
</div>
<p>Again, we can use PIVOT to accomplish that, here is what the query looks like</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
</pre></td><td class="de1"><pre class="de1"><span class="kw1">SELECT</span> <span class="sy0">*</span> <span class="kw1">FROM</span>
<span class="br0">&#40;</span> &nbsp; <span class="kw1">SELECT</span> <span class="kw1">Value</span> ,IdValue,SomeName <span class="kw1">as</span> TheName
&nbsp; &nbsp; <span class="kw1">FROM</span> SomeTable st 
&nbsp; &nbsp; <span class="sy0">JOIN</span> SomeValue sv <span class="kw1">ON</span> st.<span class="me1">ID</span> <span class="sy0">=</span> sv.<span class="me1">ID</span>
&nbsp; &nbsp; <span class="sy0">JOIN</span> SomeEmployees se <span class="kw1">ON</span> se.<span class="me1">SomeID</span> <span class="sy0">=</span> sv.<span class="me1">SomeID</span>
<span class="br0">&#41;</span> <span class="kw1">AS</span> pivTemp
PIVOT
<span class="br0">&#40;</span> &nbsp; <span class="kw2">MAX</span><span class="br0">&#40;</span><span class="kw1">Value</span><span class="br0">&#41;</span>
&nbsp; &nbsp; <span class="kw1">FOR</span> IdValue <span class="sy0">IN</span> <span class="br0">&#40;</span> SomeValue,Somedate, SomeID,SomeNAme,SomeNumber <span class="br0">&#41;</span>
<span class="br0">&#41;</span> <span class="kw1">AS</span> pivTable</pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">SELECT * FROM
(	SELECT Value ,IdValue,SomeName as TheName
	FROM SomeTable st 
	JOIN SomeValue sv ON st.ID = sv.ID
	JOIN SomeEmployees se ON se.SomeID = sv.SomeID
) AS pivTemp
PIVOT
(   MAX(Value)
    FOR IdValue IN ( SomeValue,Somedate, SomeID,SomeNAme,SomeNumber )
) AS pivTable</pre></div></div>

<p>That PIVOT query is very nice but what happens when I add a new type in the SomeTable table and name it SomeJunk. I would have to modify my PIVOT query and add<br />
SomeJunk to the line below</p>
<p>FOR IdValue IN ( SomeValue,Somedate, SomeID,SomeNAme,SomeNumber )</p>
<p>You can solve this by using dynamic SQL, you dump the columns in a variable and then you dynamically construct the statement so that what get&#8217;s executed will have all the column values.</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
</pre></td><td class="de1"><pre class="de1"><span class="kw1">CREATE</span> <span class="kw1">PROC</span> prCrossTab
<span class="kw1">AS</span>
&nbsp;
<span class="kw1">DECLARE</span> @ColumnNames <span class="kw1">NVARCHAR</span><span class="br0">&#40;</span><span class="kw2">MAX</span><span class="br0">&#41;</span> <span class="sy0">=</span> <span class="st0">''</span>
<span class="kw1">SELECT</span> &nbsp; &nbsp;@ColumnNames <span class="sy0">+=</span> <span class="kw2">QUOTENAME</span><span class="br0">&#40;</span><span class="kw2">RTRIM</span><span class="br0">&#40;</span>IdValue<span class="br0">&#41;</span><span class="br0">&#41;</span> <span class="sy0">+</span><span class="st0">', '</span> &nbsp;
<span class="kw1">FROM</span> SomeTable 
&nbsp; &nbsp; &nbsp; 
&nbsp;
<span class="kw1">SELECT</span> @ColumnNames <span class="sy0">=</span> <span class="kw1">LEFT</span><span class="br0">&#40;</span>@ColumnNames,<span class="br0">&#40;</span><span class="kw2">LEN</span><span class="br0">&#40;</span>@ColumnNames<span class="br0">&#41;</span> <span class="sy0">-</span><span class="nu0">1</span><span class="br0">&#41;</span><span class="br0">&#41;</span>
&nbsp;
<span class="kw1">DECLARE</span> @<span class="kw1">SQL</span> <span class="kw1">NVARCHAR</span><span class="br0">&#40;</span><span class="kw2">MAX</span><span class="br0">&#41;</span>
<span class="kw1">SELECT</span> @<span class="kw1">SQL</span><span class="sy0">=</span> <span class="br0">&#40;</span><span class="st0">'</span>
<span class="st0">SELECT * FROM</span>
<span class="st0">( &nbsp; SELECT Value ,IdValue,SomeName as TheName</span>
<span class="st0">&nbsp; &nbsp; FROM SomeTable st </span>
<span class="st0">&nbsp; &nbsp; JOIN SomeValue sv ON st.ID = sv.ID</span>
<span class="st0">&nbsp; &nbsp; JOIN SomeEmployees se ON se.SomeID = sv.SomeID</span>
<span class="st0">) AS pivTemp</span>
<span class="st0">PIVOT</span>
<span class="st0">( &nbsp; MAX(Value)</span>
<span class="st0"> &nbsp; &nbsp;FOR IdValue IN ('</span><span class="sy0">+</span> @ColumnNames &nbsp;<span class="sy0">+</span> <span class="st0">' )</span>
<span class="st0">) AS pivTable'</span><span class="br0">&#41;</span>
&nbsp;
&nbsp;
<span class="kw1">EXEC</span> <span class="kw3">sp_executesql</span> @<span class="kw1">SQL</span>
GO</pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">CREATE PROC prCrossTab
AS

DECLARE @ColumnNames NVARCHAR(MAX) = ''
SELECT    @ColumnNames += QUOTENAME(RTRIM(IdValue)) +', '  
FROM SomeTable 
      

SELECT @ColumnNames = LEFT(@ColumnNames,(LEN(@ColumnNames) -1))

DECLARE @SQL NVARCHAR(MAX)
SELECT @SQL= ('
SELECT * FROM
(	SELECT Value ,IdValue,SomeName as TheName
	FROM SomeTable st 
	JOIN SomeValue sv ON st.ID = sv.ID
	JOIN SomeEmployees se ON se.SomeID = sv.SomeID
) AS pivTemp
PIVOT
(   MAX(Value)
    FOR IdValue IN ('+ @ColumnNames  + ' )
) AS pivTable')


EXEC sp_executesql @SQL
GO</pre></div></div>

<p>Now run the stored procedure</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
</pre></td><td class="de1"><pre class="de1"><span class="kw1">EXEC</span> prCrossTab</pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">EXEC prCrossTab</pre></div></div>

<p>output</p>
<div class="tables">
<table>
<tr>
<th>TheName</th>
<th>	SomeValue</th>
<th>	Somedate</th>
<th>	SomeID</th>
<th>	SomeName</th>
<th>	SomeNumber</th>
</tr>
<tr>
<td>Chris</td>
<td>	2012-01-01</td>
<td>	Bla2</td>
<td>	8</td>
<td>	200</td>
<td>	400</td>
</tr>
<tr>
<td>Denis</td>
<td>	2011-01-01</td>
<td>	Bla</td>
<td>	5</td>
<td>	100</td>
<td>	300</td>
</tr>
<tr>
<td>Ted</td>
<td>	2013-01-01</td>
<td>	Bla3</td>
<td>	9</td>
<td>	300</td>
<td>	500</td>
</tr>
</table>
</div>
<p>As you can see it is the same as the PIVOT query which wasn&#8217;t dynamic</p>
<p>Now add another type and add also rows for employees with values for this type</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
</pre></td><td class="de1"><pre class="de1"><span class="kw1">INSERT</span> SomeTable <span class="kw1">VALUES</span><span class="br0">&#40;</span><span class="nu0">6</span>,<span class="st0">'SomeJunk'</span><span class="br0">&#41;</span>
&nbsp;
<span class="kw1">INSERT</span> SomeValue <span class="kw1">VALUES</span> <span class="br0">&#40;</span><span class="nu0">1</span>,<span class="nu0">6</span>,<span class="st0">'1000'</span><span class="br0">&#41;</span>
<span class="kw1">INSERT</span> SomeValue <span class="kw1">VALUES</span> <span class="br0">&#40;</span><span class="nu0">2</span>,<span class="nu0">6</span>,<span class="st0">'2000'</span><span class="br0">&#41;</span>
<span class="kw1">INSERT</span> SomeValue <span class="kw1">VALUES</span> <span class="br0">&#40;</span><span class="nu0">3</span>,<span class="nu0">6</span>,<span class="st0">'3000'</span><span class="br0">&#41;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">INSERT SomeTable VALUES(6,'SomeJunk')

INSERT SomeValue VALUES (1,6,'1000')
INSERT SomeValue VALUES (2,6,'2000')
INSERT SomeValue VALUES (3,6,'3000')</pre></div></div>

<p>If you execute the proc again, you will see that you now get back the new column</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
</pre></td><td class="de1"><pre class="de1"><span class="kw1">EXEC</span> prCrossTab</pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">EXEC prCrossTab</pre></div></div>

<p>Here is the output, you now have that additional column</p>
<div class="tables">
<table>
<tr>
<th>TheName</th>
<th>	SomeValue</th>
<th>	Somedate</th>
<th>	SomeID</th>
<th>	SomeName</th>
<th>	SomeNumber</th>
<th>	SomeJunk</th>
</tr>
<tr>
<td>Chris</td>
<td>	2012-01-01</td>
<td>	Bla2</td>
<td>	8</td>
<td>	200</td>
<td>	400</td>
<td>	2000</td>
</tr>
<tr>
<td>Denis</td>
<td>	2011-01-01</td>
<td>	Bla</td>
<td>	5</td>
<td>	100</td>
<td>	300</td>
<td>	1000</td>
</tr>
<tr>
<td>Ted</td>
<td>	2013-01-01</td>
<td>	Bla3</td>
<td>	9</td>
<td>	300</td>
<td>	500</td>
<td>	3000</td>
</tr>
</table>
</div>
<p>That is it, as you can see the PIVOT operator is pretty powerful, combined with dynamic SQL you can create a true crosstab query without even needing to know how many different values you have.</p>
<p>I have used the dynamic PIVOT technique to quickly copy and paste a result into Excel which had several hundred columns across and several thousand rows</p>
<p>Come back tomorrow for&#8230;&#8230;.UNPIVOT</p>
]]></content:encoded>
			<wfw:commentRss>/index.php/datamgmt/datadesign/sql-advent-2011-day-7/feed/</wfw:commentRss>
		<slash:comments>0</slash:comments>
		</item>
		<item>
		<title>Tokenizing filenames in SQL Server</title>
		<link>/index.php/datamgmt/dbprogramming/tokenizing-filenames-in-sql-server/</link>
		<comments>/index.php/datamgmt/dbprogramming/tokenizing-filenames-in-sql-server/#comments</comments>
		<pubDate>Wed, 20 Oct 2010 15:10:34 +0000</pubDate>
		<dc:creator><![CDATA[SQLDenis]]></dc:creator>
				<category><![CDATA[Database Programming]]></category>
		<category><![CDATA[Microsoft SQL Server]]></category>
		<category><![CDATA[function]]></category>
		<category><![CDATA[pivot]]></category>
		<category><![CDATA[sql server 2005]]></category>
		<category><![CDATA[sql server 2008]]></category>
		<category><![CDATA[transpose]]></category>

		<guid isPermaLink="false">/index.php/2010/10/tokenizing-filenames-in-sql-server/</guid>
		<description><![CDATA[Someone at my job needed to grab a filepath, take out the filename and then split all the pieces into their own columns which were separated by either a dot or an underscore. If you had the following table

CREATE TABLE #test (id INT primary key, PATH&#8230;]]></description>
				<content:encoded><![CDATA[<p>Someone at my job needed to grab a filepath, take out the filename and then split all the pieces into their own columns which were separated by either a dot or an underscore. If you had the following table</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
</pre></td><td class="de1"><pre class="de1"><span class="kw1">CREATE</span> <span class="kw1">TABLE</span> #test <span class="br0">&#40;</span>id <span class="kw1">INT</span> <span class="kw1">primary</span> <span class="kw1">key</span>, <span class="kw1">PATH</span> <span class="kw1">VARCHAR</span><span class="br0">&#40;</span><span class="nu0">1000</span><span class="br0">&#41;</span><span class="br0">&#41;</span>
<span class="kw1">INSERT</span> #test <span class="kw1">VALUES</span><span class="br0">&#40;</span><span class="nu0">1</span>,<span class="st0">'Y:dgfdgdgd_Databla_2010_10_14_Pre_Calc.BAK'</span><span class="br0">&#41;</span>
<span class="kw1">INSERT</span> #test <span class="kw1">VALUES</span><span class="br0">&#40;</span><span class="nu0">2</span>,<span class="st0">'Y:dgfdbla_2010_10_15_Pre_Calc.BAK'</span><span class="br0">&#41;</span>
<span class="kw1">INSERT</span> #test <span class="kw1">VALUES</span><span class="br0">&#40;</span><span class="nu0">4</span>,<span class="st0">'Y:dgfdgdgdgdgdgdgdSome_Databla_2010_16_Pre_Calc.BAK'</span><span class="br0">&#41;</span>
<span class="kw1">INSERT</span> #test <span class="kw1">VALUES</span><span class="br0">&#40;</span><span class="nu0">3</span>,<span class="st0">'Y:dgfdgdgdgdgdgdgdSome_Databla_2010_11_12_Pre_Calc.BAK'</span><span class="br0">&#41;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">CREATE TABLE #test (id INT primary key, PATH VARCHAR(1000))
INSERT #test VALUES(1,'Y:dgfdgdgd_Databla_2010_10_14_Pre_Calc.BAK')
INSERT #test VALUES(2,'Y:dgfdbla_2010_10_15_Pre_Calc.BAK')
INSERT #test VALUES(4,'Y:dgfdgdgdgdgdgdgdSome_Databla_2010_16_Pre_Calc.BAK')
INSERT #test VALUES(3,'Y:dgfdgdgdgdgdgdgdSome_Databla_2010_11_12_Pre_Calc.BAK')</pre></div></div>

<p>Then this was the required output.</p>
<div class="tables">
<table>
<tr>
<th>id</th>
<th>	PATH</th>
<th>	1</th>
<th>	2</th>
<th>	3</th>
<th>	4</th>
<th>	5</th>
<th>	6</th>
<th>	7</th>
<th>	8</th>
<th>	9</th>
</tr>
<tr>
<td>1</td>
<td>	bla_2010_10_14_Pre_Calc_BAK</td>
<td>	bla</td>
<td>	2010</td>
<td>	10</td>
<td>	14</td>
<td>	Pre</td>
<td>	Calc</td>
<td>	BAK	</td>
<td>NULL</td>
<td>	NULL</td>
</tr>
<tr>
<td>2</td>
<td>	bla_2010_10_15_Pre_Calc_BAK</td>
<td>	bla</td>
<td>	2010</td>
<td>	10</td>
<td>	15</td>
<td>	Pre</td>
<td>	Calc</td>
<td>	BAK</td>
<td>	NULL</td>
<td>	NULL</td>
</tr>
<tr>
<td>3</td>
<td>	bla_2010_11_12_Pre_Calc_BAK</td>
<td>	bla</td>
<td>	2010</td>
<td>	11</td>
<td>	12</td>
<td>	Pre</td>
<td>	Calc</td>
<td>	BAK</td>
<td>	NULL</td>
<td>	NULL</td>
</tr>
<tr>
<td>4</td>
<td>	bla_2010_16_Pre_Calc_BAK</td>
<td>	bla</td>
<td>	2010</td>
<td>	16</td>
<td>	Pre</td>
<td>	Calc</td>
<td>	BAK</td>
<td>	NULL</td>
<td>	NULL</td>
<td>	NULL</td>
</tr>
</table>
</div>
<p>I thought that this was an interesting exercise, the person who asked me about this wrote some procedures and user defined functions but it was too slow because he was using a lot of charindex and substring functions and storing results in intermediate variables, then continued parsing until the end of the string.</p>
<p>In order to attack this problem you have to divide and conquer. Here are the four steps that are needed<br />
<strong>
<ol>
<li>Take the dot out</li>
<li>Get just the filename</li>
<li>Split the string</li>
<li>Pivot the results</li>
</ol>
<p></strong></p>
<p>
<h2>1 Take the dot out</h2>
<p>This is pretty easy, all you have to do is use the replace function and replace &#8216;.&#8217; with &#8216;_&#8217;</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
</pre></td><td class="de1"><pre class="de1"><span class="kw1">declare</span> @FilePath <span class="kw1">varchar</span><span class="br0">&#40;</span><span class="nu0">100</span><span class="br0">&#41;</span>
<span class="kw1">SELECT</span> @FilePath <span class="sy0">=</span> <span class="st0">'Y:dgfdgdgd_Databla_2010_10_14_Pre_Calc.BAK'</span>
<span class="kw1">SELECT</span> <span class="kw2">REPLACE</span><span class="br0">&#40;</span>@FilePath,<span class="st0">'.'</span>,<span class="st0">'_'</span><span class="br0">&#41;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">declare @FilePath varchar(100)
SELECT @FilePath = 'Y:dgfdgdgd_Databla_2010_10_14_Pre_Calc.BAK'
SELECT REPLACE(@FilePath,'.','_')</pre></div></div>

<p>Result<br />
&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;-<br />
Y:dgfdgdgd_Databla_2010_10_14_Pre_Calc_BAK</p>
<p>
<h2>2 Get just the filename</h2>
<p>To get just the filename, you use the reverse function, then you look for the position of the first backslash, you will then use the right function and use the position of the first backslash as the number of characters to keep. You add -1 to the length because you do not want the backslash included.</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
</pre></td><td class="de1"><pre class="de1"><span class="kw1">declare</span> @FilePath <span class="kw1">varchar</span><span class="br0">&#40;</span><span class="nu0">100</span><span class="br0">&#41;</span>
<span class="kw1">SELECT</span> @FilePath <span class="sy0">=</span> <span class="st0">'Y:dgfdgdgd_Databla_2010_10_14_Pre_Calc.BAK'</span>
<span class="kw1">SELECT</span> <span class="kw1">RIGHT</span><span class="br0">&#40;</span>@FilePath,<span class="kw2">PATINDEX</span><span class="br0">&#40;</span><span class="st0">'%%'</span>,<span class="kw2">REVERSE</span><span class="br0">&#40;</span>@FilePath<span class="br0">&#41;</span><span class="br0">&#41;</span><span class="sy0">-</span><span class="nu0">1</span><span class="br0">&#41;</span> <span class="kw1">AS</span> <span class="kw1">PATH</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">declare @FilePath varchar(100)
SELECT @FilePath = 'Y:dgfdgdgd_Databla_2010_10_14_Pre_Calc.BAK'
SELECT RIGHT(@FilePath,PATINDEX('%%',REVERSE(@FilePath))-1) AS PATH</pre></div></div>

<p>Result<br />
&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;-<br />
bla_2010_10_14_Pre_Calc.BAK</p>
<p>
<h2>2A combine 1 and 2</h2>
<p>This is just a combination of 1 and 2, take the dot out and get just the file name</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
</pre></td><td class="de1"><pre class="de1"><span class="kw1">declare</span> @FilePath <span class="kw1">varchar</span><span class="br0">&#40;</span><span class="nu0">100</span><span class="br0">&#41;</span>
<span class="kw1">SELECT</span> @FilePath <span class="sy0">=</span> <span class="st0">'Y:dgfdgdgd_Databla_2010_10_14_Pre_Calc.BAK'</span>
<span class="kw1">SELECT</span> <span class="kw1">RIGHT</span><span class="br0">&#40;</span><span class="kw2">REPLACE</span><span class="br0">&#40;</span>@FilePath,<span class="st0">'.'</span>,<span class="st0">'_'</span><span class="br0">&#41;</span>,<span class="kw2">PATINDEX</span><span class="br0">&#40;</span><span class="st0">'%%'</span>,<span class="kw2">REVERSE</span><span class="br0">&#40;</span>@FilePath<span class="br0">&#41;</span><span class="br0">&#41;</span><span class="sy0">-</span><span class="nu0">1</span><span class="br0">&#41;</span> <span class="kw1">AS</span> <span class="kw1">PATH</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">declare @FilePath varchar(100)
SELECT @FilePath = 'Y:dgfdgdgd_Databla_2010_10_14_Pre_Calc.BAK'
SELECT RIGHT(REPLACE(@FilePath,'.','_'),PATINDEX('%%',REVERSE(@FilePath))-1) AS PATH</pre></div></div>

<p>Result<br />
&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8211;<br />
bla_2010_10_14_Pre_Calc_BAK</p>
<p>
<h2>3 Split the string</h2>
<p>To split the string we can use the built in table of numbers master..spt_values. Running the code below</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
</pre></td><td class="de1"><pre class="de1"><span class="kw1">declare</span> @FilePath <span class="kw1">varchar</span><span class="br0">&#40;</span><span class="nu0">100</span><span class="br0">&#41;</span>
<span class="kw1">SELECT</span> @FilePath <span class="sy0">=</span> <span class="st0">'Y:dgfdgdgd_Databla_2010_10_14_Pre_Calc.BAK'</span>
<span class="kw1">SELECT</span> @FilePath <span class="sy0">=</span> <span class="kw1">RIGHT</span><span class="br0">&#40;</span><span class="kw2">REPLACE</span><span class="br0">&#40;</span>@FilePath,<span class="st0">'.'</span>,<span class="st0">'_'</span><span class="br0">&#41;</span>,<span class="kw2">PATINDEX</span><span class="br0">&#40;</span><span class="st0">'%%'</span>,<span class="kw2">REVERSE</span><span class="br0">&#40;</span>@FilePath<span class="br0">&#41;</span><span class="br0">&#41;</span><span class="sy0">-</span><span class="nu0">1</span><span class="br0">&#41;</span> 
&nbsp;
<span class="kw1">SELECT</span> @FilePath <span class="kw1">as</span> FilePath, <span class="kw2">SUBSTRING</span><span class="br0">&#40;</span><span class="st0">'_'</span> <span class="sy0">+</span> @FilePath <span class="sy0">+</span> <span class="st0">'_'</span>, Number <span class="sy0">+</span> <span class="nu0">1</span>,
&nbsp; &nbsp; <span class="kw2">CHARINDEX</span><span class="br0">&#40;</span><span class="st0">'_'</span>, <span class="st0">'_'</span> <span class="sy0">+</span> @FilePath <span class="sy0">+</span> <span class="st0">'_'</span>, Number <span class="sy0">+</span> <span class="nu0">1</span><span class="br0">&#41;</span> <span class="sy0">-</span> Number <span class="sy0">-</span><span class="nu0">1</span><span class="br0">&#41;</span><span class="kw1">AS</span> <span class="kw1">VALUE</span>
&nbsp; &nbsp; <span class="kw1">FROM</span> master..<span class="me1">spt_values</span> v
&nbsp; &nbsp; <span class="kw1">WHERE</span> TYPE <span class="sy0">=</span> <span class="st0">'P'</span>
&nbsp; &nbsp; <span class="sy0">AND</span> Number <span class="sy0">&lt;=</span> <span class="kw2">LEN</span><span class="br0">&#40;</span><span class="st0">'_'</span> <span class="sy0">+</span> @FilePath &nbsp;<span class="sy0">+</span> <span class="st0">'_'</span><span class="br0">&#41;</span> <span class="sy0">-</span> <span class="nu0">1</span>
&nbsp; &nbsp; <span class="sy0">AND</span> <span class="kw2">SUBSTRING</span><span class="br0">&#40;</span><span class="st0">'_'</span> <span class="sy0">+</span> @FilePath &nbsp;<span class="sy0">+</span> <span class="st0">'_'</span>, Number, <span class="nu0">1</span><span class="br0">&#41;</span> <span class="sy0">=</span> <span class="st0">'_'</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">declare @FilePath varchar(100)
SELECT @FilePath = 'Y:dgfdgdgd_Databla_2010_10_14_Pre_Calc.BAK'
SELECT @FilePath = RIGHT(REPLACE(@FilePath,'.','_'),PATINDEX('%%',REVERSE(@FilePath))-1) 

SELECT @FilePath as FilePath, SUBSTRING('_' + @FilePath + '_', Number + 1,
    CHARINDEX('_', '_' + @FilePath + '_', Number + 1) - Number -1)AS VALUE
    FROM master..spt_values v
    WHERE TYPE = 'P'
    AND Number &lt;= LEN('_' + @FilePath  + '_') - 1
    AND SUBSTRING('_' + @FilePath  + '_', Number, 1) = '_'</pre></div></div>

<p>This is the output</p>
<div class="tables">
<table>
<tr>
<th>FilePath</th>
<th>VALUE</th>
</tr>
<tr>
<td>bla_2010_10_14_Pre_Calc_BAK</td>
<td>	bla</td>
</tr>
<tr>
<td>bla_2010_10_14_Pre_Calc_BAK</td>
<td>	2010</td>
</tr>
<tr>
<td>bla_2010_10_14_Pre_Calc_BAK</td>
<td>	10</td>
</tr>
<tr>
<td>bla_2010_10_14_Pre_Calc_BAK</td>
<td>	14</td>
</tr>
<tr>
<td>bla_2010_10_14_Pre_Calc_BAK</td>
<td>	Pre</td>
</tr>
<tr>
<td>bla_2010_10_14_Pre_Calc_BAK</td>
<td>	Calc</td>
</tr>
<tr>
<td>bla_2010_10_14_Pre_Calc_BAK</td>
<td>	BAK</td>
</tr>
</table>
</div>
<p>We are almost there, instead of just one string we want to grab the whole table. We do a cross join with the numbers table and also use the ROW_NUMBER function to assign a column number which we will use as the column name later<br />
Run this to see what we have so far</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
</pre></td><td class="de1"><pre class="de1"><span class="kw1">SELECT</span> id,<span class="kw1">PATH</span>, <span class="kw2">SUBSTRING</span><span class="br0">&#40;</span><span class="st0">'_'</span> <span class="sy0">+</span> <span class="kw1">PATH</span> <span class="sy0">+</span> <span class="st0">'_'</span>, Number <span class="sy0">+</span> <span class="nu0">1</span>,
&nbsp; &nbsp; <span class="kw2">CHARINDEX</span><span class="br0">&#40;</span><span class="st0">'_'</span>, <span class="st0">'_'</span> <span class="sy0">+</span> <span class="kw1">PATH</span> <span class="sy0">+</span> <span class="st0">'_'</span>, Number <span class="sy0">+</span> <span class="nu0">1</span><span class="br0">&#41;</span> <span class="sy0">-</span> Number <span class="sy0">-</span><span class="nu0">1</span><span class="br0">&#41;</span><span class="kw1">AS</span> <span class="kw1">VALUE</span>,
&nbsp; &nbsp; ROW_NUMBER<span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="kw1">OVER</span> <span class="br0">&#40;</span>PARTITION <span class="kw1">BY</span> id <span class="kw1">ORDER</span> <span class="kw1">BY</span> id,number <span class="br0">&#41;</span> <span class="kw1">AS</span> <span class="kw1">ROW</span>
&nbsp; &nbsp; <span class="kw1">FROM</span> master..<span class="me1">spt_values</span> v
&nbsp; &nbsp; <span class="sy0">CROSS</span> <span class="sy0">JOIN</span> <span class="br0">&#40;</span><span class="kw1">SELECT</span> id,<span class="kw1">RIGHT</span><span class="br0">&#40;</span><span class="kw2">REPLACE</span><span class="br0">&#40;</span><span class="kw1">PATH</span>,<span class="st0">'.'</span>,<span class="st0">'_'</span><span class="br0">&#41;</span>,<span class="kw2">PATINDEX</span><span class="br0">&#40;</span><span class="st0">'%%'</span>,<span class="kw2">REVERSE</span><span class="br0">&#40;</span><span class="kw1">PATH</span><span class="br0">&#41;</span><span class="br0">&#41;</span><span class="sy0">-</span><span class="nu0">1</span><span class="br0">&#41;</span> <span class="kw1">AS</span> <span class="kw1">PATH</span> &nbsp;
&nbsp; &nbsp; <span class="kw1">FROM</span> #test <span class="br0">&#41;</span> <span class="kw1">AS</span> #test
&nbsp; &nbsp; <span class="kw1">WHERE</span> TYPE <span class="sy0">=</span> <span class="st0">'P'</span>
&nbsp; &nbsp; <span class="sy0">AND</span> Number <span class="sy0">&lt;=</span> <span class="kw2">LEN</span><span class="br0">&#40;</span><span class="st0">'_'</span> <span class="sy0">+</span> <span class="kw1">PATH</span> &nbsp;<span class="sy0">+</span> <span class="st0">'_'</span><span class="br0">&#41;</span> <span class="sy0">-</span> <span class="nu0">1</span>
&nbsp; &nbsp; <span class="sy0">AND</span> <span class="kw2">SUBSTRING</span><span class="br0">&#40;</span><span class="st0">'_'</span> <span class="sy0">+</span> <span class="kw1">PATH</span> &nbsp;<span class="sy0">+</span> <span class="st0">'_'</span>, Number, <span class="nu0">1</span><span class="br0">&#41;</span> <span class="sy0">=</span> <span class="st0">'_'</span>
&nbsp; &nbsp; </pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">SELECT id,PATH, SUBSTRING('_' + PATH + '_', Number + 1,
    CHARINDEX('_', '_' + PATH + '_', Number + 1) - Number -1)AS VALUE,
    ROW_NUMBER() OVER (PARTITION BY id ORDER BY id,number ) AS ROW
    FROM master..spt_values v
    CROSS JOIN (SELECT id,RIGHT(REPLACE(PATH,'.','_'),PATINDEX('%%',REVERSE(PATH))-1) AS PATH  
    FROM #test ) AS #test
    WHERE TYPE = 'P'
    AND Number &lt;= LEN('_' + PATH  + '_') - 1
    AND SUBSTRING('_' + PATH  + '_', Number, 1) = '_'
    </pre></div></div>

<p>Here is the output</p>
<div class="tables">
<table>
<tr>
<th>id</th>
<th>	PATH</th>
<th>	VALUE</th>
<th>	ROW</th>
</tr>
<tr>
<td>	1	</td>
<td>	bla_2010_10_14_Pre_Calc_BAK	</td>
<td>	bla	</td>
<td>	1	</td>
</tr>
<tr>
<td>	1	</td>
<td>	bla_2010_10_14_Pre_Calc_BAK	</td>
<td>	2010	</td>
<td>	2	</td>
</tr>
<tr>
<td>	1	</td>
<td>	bla_2010_10_14_Pre_Calc_BAK	</td>
<td>	10	</td>
<td>	3	</td>
</tr>
<tr>
<td>	1	</td>
<td>	bla_2010_10_14_Pre_Calc_BAK	</td>
<td>	14	</td>
<td>	4	</td>
</tr>
<tr>
<td>	1	</td>
<td>	bla_2010_10_14_Pre_Calc_BAK	</td>
<td>	Pre	</td>
<td>	5	</td>
</tr>
<tr>
<td>	1	</td>
<td>	bla_2010_10_14_Pre_Calc_BAK	</td>
<td>	Calc	</td>
<td>	6	</td>
</tr>
<tr>
<td>	1	</td>
<td>	bla_2010_10_14_Pre_Calc_BAK	</td>
<td>	BAK	</td>
<td>	7	</td>
</tr>
<tr>
<td>	2	</td>
<td>	bla_2010_10_15_Pre_Calc_BAK	</td>
<td>	bla	</td>
<td>	1	</td>
</tr>
<tr>
<td>	2	</td>
<td>	bla_2010_10_15_Pre_Calc_BAK	</td>
<td>	2010	</td>
<td>	2	</td>
</tr>
<tr>
<td>	2	</td>
<td>	bla_2010_10_15_Pre_Calc_BAK	</td>
<td>	10	</td>
<td>	3	</td>
</tr>
<tr>
<td>	2	</td>
<td>	bla_2010_10_15_Pre_Calc_BAK	</td>
<td>	15	</td>
<td>	4	</td>
</tr>
<tr>
<td>	2	</td>
<td>	bla_2010_10_15_Pre_Calc_BAK	</td>
<td>	Pre	</td>
<td>	5	</td>
</tr>
<tr>
<td>	2	</td>
<td>	bla_2010_10_15_Pre_Calc_BAK	</td>
<td>	Calc	</td>
<td>	6	</td>
</tr>
<tr>
<td>	2	</td>
<td>	bla_2010_10_15_Pre_Calc_BAK	</td>
<td>	BAK	</td>
<td>	7	</td>
</tr>
<tr>
<td>	3	</td>
<td>	bla_2010_11_12_Pre_Calc_BAK	</td>
<td>	bla	</td>
<td>	1	</td>
</tr>
<tr>
<td>	3	</td>
<td>	bla_2010_11_12_Pre_Calc_BAK	</td>
<td>	2010	</td>
<td>	2	</td>
</tr>
<tr>
<td>	3	</td>
<td>	bla_2010_11_12_Pre_Calc_BAK	</td>
<td>	11	</td>
<td>	3	</td>
</tr>
<tr>
<td>	3	</td>
<td>	bla_2010_11_12_Pre_Calc_BAK	</td>
<td>	12	</td>
<td>	4	</td>
</tr>
<tr>
<td>	3	</td>
<td>	bla_2010_11_12_Pre_Calc_BAK	</td>
<td>	Pre	</td>
<td>	5	</td>
</tr>
<tr>
<td>	3	</td>
<td>	bla_2010_11_12_Pre_Calc_BAK	</td>
<td>	Calc	</td>
<td>	6	</td>
</tr>
<tr>
<td>	3	</td>
<td>	bla_2010_11_12_Pre_Calc_BAK	</td>
<td>	BAK	</td>
<td>	7	</td>
</tr>
<tr>
<td>	4	</td>
<td>	bla_2010_16_Pre_Calc_BAK	</td>
<td>	bla	</td>
<td>	1	</td>
</tr>
<tr>
<td>	4	</td>
<td>	bla_2010_16_Pre_Calc_BAK	</td>
<td>	2010	</td>
<td>	2	</td>
</tr>
<tr>
<td>	4	</td>
<td>	bla_2010_16_Pre_Calc_BAK	</td>
<td>	16	</td>
<td>	3	</td>
</tr>
<tr>
<td>	4	</td>
<td>	bla_2010_16_Pre_Calc_BAK	</td>
<td>	Pre	</td>
<td>	4	</td>
</tr>
<tr>
<td>	4	</td>
<td>	bla_2010_16_Pre_Calc_BAK	</td>
<td>	Calc	</td>
<td>	5	</td>
</tr>
<tr>
<td>	4	</td>
<td>	bla_2010_16_Pre_Calc_BAK	</td>
<td>	BAK	</td>
<td>	6	</td>
</tr>
</table>
</div>
<p>The missing piece is transposing the columns, this is easily accomplished by using the PIVOT operator. As you can see we use the ROW_NUMBER function to create a number for us, this number is then used as a column name by the Pivot operator. Here is the final query which produced the desired output</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
</pre></td><td class="de1"><pre class="de1"><span class="kw1">SELECT</span> <span class="sy0">*</span> <span class="kw1">FROM</span>
&nbsp; &nbsp;<span class="br0">&#40;</span> 
&nbsp; &nbsp; <span class="kw1">SELECT</span> id,<span class="kw1">PATH</span>, <span class="kw2">SUBSTRING</span><span class="br0">&#40;</span><span class="st0">'_'</span> <span class="sy0">+</span> <span class="kw1">PATH</span> <span class="sy0">+</span> <span class="st0">'_'</span>, Number <span class="sy0">+</span> <span class="nu0">1</span>,
&nbsp; &nbsp; <span class="kw2">CHARINDEX</span><span class="br0">&#40;</span><span class="st0">'_'</span>, <span class="st0">'_'</span> <span class="sy0">+</span> <span class="kw1">PATH</span> <span class="sy0">+</span> <span class="st0">'_'</span>, Number <span class="sy0">+</span> <span class="nu0">1</span><span class="br0">&#41;</span> <span class="sy0">-</span> Number <span class="sy0">-</span><span class="nu0">1</span><span class="br0">&#41;</span><span class="kw1">AS</span> <span class="kw1">VALUE</span>,
&nbsp; &nbsp; ROW_NUMBER<span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="kw1">OVER</span> <span class="br0">&#40;</span>PARTITION <span class="kw1">BY</span> id <span class="kw1">ORDER</span> <span class="kw1">BY</span> id,number <span class="br0">&#41;</span> <span class="kw1">AS</span> <span class="kw1">ROW</span>
&nbsp; &nbsp; <span class="kw1">FROM</span> master..<span class="me1">spt_values</span> v
&nbsp; &nbsp; <span class="sy0">CROSS</span> <span class="sy0">JOIN</span> <span class="br0">&#40;</span><span class="kw1">SELECT</span> id,<span class="kw1">RIGHT</span><span class="br0">&#40;</span><span class="kw2">REPLACE</span><span class="br0">&#40;</span><span class="kw1">PATH</span>,<span class="st0">'.'</span>,<span class="st0">'_'</span><span class="br0">&#41;</span>,<span class="kw2">PATINDEX</span><span class="br0">&#40;</span><span class="st0">'%%'</span>,<span class="kw2">REVERSE</span><span class="br0">&#40;</span><span class="kw1">PATH</span><span class="br0">&#41;</span><span class="br0">&#41;</span><span class="sy0">-</span><span class="nu0">1</span><span class="br0">&#41;</span> <span class="kw1">AS</span> <span class="kw1">PATH</span> &nbsp;
&nbsp; &nbsp; <span class="kw1">FROM</span> #test <span class="br0">&#41;</span> <span class="kw1">AS</span> #test
&nbsp; &nbsp; <span class="kw1">WHERE</span> TYPE <span class="sy0">=</span> <span class="st0">'P'</span>
&nbsp; &nbsp; <span class="sy0">AND</span> Number <span class="sy0">&lt;=</span> <span class="kw2">LEN</span><span class="br0">&#40;</span><span class="st0">'_'</span> <span class="sy0">+</span> <span class="kw1">PATH</span> &nbsp;<span class="sy0">+</span> <span class="st0">'_'</span><span class="br0">&#41;</span> <span class="sy0">-</span> <span class="nu0">1</span>
&nbsp; &nbsp; <span class="sy0">AND</span> <span class="kw2">SUBSTRING</span><span class="br0">&#40;</span><span class="st0">'_'</span> <span class="sy0">+</span> <span class="kw1">PATH</span> &nbsp;<span class="sy0">+</span> <span class="st0">'_'</span>, Number, <span class="nu0">1</span><span class="br0">&#41;</span> <span class="sy0">=</span> <span class="st0">'_'</span><span class="br0">&#41;</span> <span class="kw1">AS</span> pivTemp
&nbsp; &nbsp; PIVOT
<span class="br0">&#40;</span> &nbsp; <span class="kw2">MAX</span><span class="br0">&#40;</span><span class="kw1">VALUE</span><span class="br0">&#41;</span>
&nbsp; &nbsp; <span class="kw1">FOR</span> <span class="kw1">ROW</span> <span class="sy0">IN</span> <span class="br0">&#40;</span><span class="br0">&#91;</span><span class="nu0">1</span><span class="br0">&#93;</span>,<span class="br0">&#91;</span><span class="nu0">2</span><span class="br0">&#93;</span>,<span class="br0">&#91;</span><span class="nu0">3</span><span class="br0">&#93;</span>,<span class="br0">&#91;</span><span class="nu0">4</span><span class="br0">&#93;</span>,<span class="br0">&#91;</span><span class="nu0">5</span><span class="br0">&#93;</span>,<span class="br0">&#91;</span><span class="nu0">6</span><span class="br0">&#93;</span>,<span class="br0">&#91;</span><span class="nu0">7</span><span class="br0">&#93;</span>,<span class="br0">&#91;</span><span class="nu0">8</span><span class="br0">&#93;</span>,<span class="br0">&#91;</span><span class="nu0">9</span><span class="br0">&#93;</span><span class="br0">&#41;</span>
&nbsp; <span class="br0">&#41;</span> <span class="kw1">AS</span> pivTable</pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">SELECT * FROM
   ( 
    SELECT id,PATH, SUBSTRING('_' + PATH + '_', Number + 1,
    CHARINDEX('_', '_' + PATH + '_', Number + 1) - Number -1)AS VALUE,
    ROW_NUMBER() OVER (PARTITION BY id ORDER BY id,number ) AS ROW
    FROM master..spt_values v
    CROSS JOIN (SELECT id,RIGHT(REPLACE(PATH,'.','_'),PATINDEX('%%',REVERSE(PATH))-1) AS PATH  
    FROM #test ) AS #test
    WHERE TYPE = 'P'
    AND Number &lt;= LEN('_' + PATH  + '_') - 1
    AND SUBSTRING('_' + PATH  + '_', Number, 1) = '_') AS pivTemp
    PIVOT
(   MAX(VALUE)
    FOR ROW IN ([1],[2],[3],[4],[5],[6],[7],[8],[9])
  ) AS pivTable</pre></div></div>

<p>The query produces the desired output.</p>
<div class="tables">
<table>
<tr>
<th>id</th>
<th>	PATH</th>
<th>	1</th>
<th>	2</th>
<th>	3</th>
<th>	4</th>
<th>	5</th>
<th>	6</th>
<th>	7</th>
<th>	8</th>
<th>	9</th>
</tr>
<tr>
<td>1</td>
<td>	bla_2010_10_14_Pre_Calc_BAK</td>
<td>	bla</td>
<td>	2010</td>
<td>	10</td>
<td>	14</td>
<td>	Pre</td>
<td>	Calc</td>
<td>	BAK	</td>
<td>NULL</td>
<td>	NULL</td>
</tr>
<tr>
<td>2</td>
<td>	bla_2010_10_15_Pre_Calc_BAK</td>
<td>	bla</td>
<td>	2010</td>
<td>	10</td>
<td>	15</td>
<td>	Pre</td>
<td>	Calc</td>
<td>	BAK</td>
<td>	NULL</td>
<td>	NULL</td>
</tr>
<tr>
<td>3</td>
<td>	bla_2010_11_12_Pre_Calc_BAK</td>
<td>	bla</td>
<td>	2010</td>
<td>	11</td>
<td>	12</td>
<td>	Pre</td>
<td>	Calc</td>
<td>	BAK</td>
<td>	NULL</td>
<td>	NULL</td>
</tr>
<tr>
<td>4</td>
<td>	bla_2010_16_Pre_Calc_BAK</td>
<td>	bla</td>
<td>	2010</td>
<td>	16</td>
<td>	Pre</td>
<td>	Calc</td>
<td>	BAK</td>
<td>	NULL</td>
<td>	NULL</td>
<td>	NULL</td>
</tr>
</table>
</div>
<p></p>
<h2>Conclusion</h2>
<p>As you can see, if you apply small steps and divide the problem, you can easily solve it even if it looks very difficult at first glance. Remember most likely you can already use something which is built into the product, try not to reinvent the wheel.</p>
<p>*** <strong>Remember, if you have a SQL related question, try our <a href="http://forum.lessthandot.com/viewforum.php?f=17">Microsoft SQL Server Programming</a> forum or our <a href="http://forum.lessthandot.com/viewforum.php?f=22">Microsoft SQL Server Admin</a> forum</strong><ins></ins></p>
]]></content:encoded>
			<wfw:commentRss>/index.php/datamgmt/dbprogramming/tokenizing-filenames-in-sql-server/feed/</wfw:commentRss>
		<slash:comments>3</slash:comments>
		</item>
	</channel>
</rss>
