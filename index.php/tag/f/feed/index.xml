<?xml version="1.0" encoding="UTF-8"?><rss version="2.0"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:atom="http://www.w3.org/2005/Atom"
	xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
	xmlns:slash="http://purl.org/rss/1.0/modules/slash/"
	>

<channel>
	<title>f# &#8211; LessthanDot</title>
	<atom:link href="/index.php/tag/f/feed/" rel="self" type="application/rss+xml" />
	<link>/</link>
	<description>A Technical Community for IT Professionals</description>
	<lastBuildDate>Sat, 09 Mar 2019 12:50:36 +0000</lastBuildDate>
	<language>en-US</language>
	<sy:updatePeriod>hourly</sy:updatePeriod>
	<sy:updateFrequency>1</sy:updateFrequency>
	<generator>https://wordpress.org/?v=4.6.1</generator>
	<item>
		<title>Machete &#8211; A scripting runtime for .NET</title>
		<link>/index.php/desktopdev/mstech/machete-a-scripting-runtime-for/</link>
		<comments>/index.php/desktopdev/mstech/machete-a-scripting-runtime-for/#comments</comments>
		<pubDate>Mon, 07 Mar 2011 20:21:00 +0000</pubDate>
		<dc:creator><![CDATA[chaospandion]]></dc:creator>
				<category><![CDATA[C#]]></category>
		<category><![CDATA[Microsoft Technologies]]></category>
		<category><![CDATA[.net]]></category>
		<category><![CDATA[c#]]></category>
		<category><![CDATA[ecmascript]]></category>
		<category><![CDATA[f#]]></category>
		<category><![CDATA[javascript]]></category>
		<category><![CDATA[machete]]></category>
		<category><![CDATA[scripting]]></category>

		<guid isPermaLink="false">/index.php/2011/03/machete-a-scripting-runtime-for/</guid>
		<description><![CDATA[In an attempt to overcome by perfectionism I've decided to open source my long term side project Machete for the world to see. Machete is my own dialect of the ECMAScript 5 standard or as it is more commonly called JavaScript. 


  The compiler is wr&#8230;]]></description>
				<content:encoded><![CDATA[<p>In an attempt to overcome my perfectionism I&#8217;ve decided to open source my long term side project Machete for the world to see. Machete is my own dialect of the ECMAScript 5 standard or as it is more commonly called JavaScript.</p>
<h1>Features</h1>
<p>Cleaner lambda expressions:</p>
<pre style="background-color:#EEEEEE;padding:5px;"><code>var succinct = (x, y) x + y;
var verbose = function (x, y) { return x + y; };</code></pre>
<p>First class iteration support with the foreach loop and generators.</p>
<pre style="background-color:#EEEEEE;padding:5px;"><code>var numbers = generator {
    yield 1;
    yield 2;
    yield 3;
};

foreach (var n in numbers) {
    Output.write(n);
}   

foreach (var e in ["Array", " objects", " are", " iterable", "!"]) {
    Output.write(e);
} 

foreach (var c in "Strings are iterable!") {
    Output.write(c);
}</code></pre>
<h1 style="margin-bottom:10px;margin-top:15px">Implementation</h1>
<ul>
<li>The compiler is written in F# and uses the library <a href="https://bitbucket.org/fparsec/main/overview">FParsec</a>.</li>
<li>The runtime is written in C# and is hosted by .NET.</li>
<li>It currently has over 400 tests with many more on the way.</li>
</ul>
<p>Machete is the product of almost a years worth of research, design, and coding. I have it hosted on GitHub so please stop by and fork the project. I would really love to up my test count dramatically and test cases from the community would be invaluable. Without further ado, the link to my repository.</p>
<p><a href="https://github.com/ChaosPandion/Machete">GitHub Repository For Machete</a></p>
]]></content:encoded>
			<wfw:commentRss>/index.php/desktopdev/mstech/machete-a-scripting-runtime-for/feed/</wfw:commentRss>
		<slash:comments>8</slash:comments>
		</item>
		<item>
		<title>Raleigh Code Camp Followup</title>
		<link>/index.php/desktopdev/mstech/raleigh-code-camp-followup/</link>
		<comments>/index.php/desktopdev/mstech/raleigh-code-camp-followup/#comments</comments>
		<pubDate>Mon, 08 Nov 2010 10:44:35 +0000</pubDate>
		<dc:creator><![CDATA[Eli Weinstock-Herman (tarwn)]]></dc:creator>
				<category><![CDATA[General Purpose Languages]]></category>
		<category><![CDATA[Microsoft Technologies]]></category>
		<category><![CDATA[alm]]></category>
		<category><![CDATA[c#]]></category>
		<category><![CDATA[code camp]]></category>
		<category><![CDATA[f#]]></category>
		<category><![CDATA[ruby]]></category>
		<category><![CDATA[unit testing]]></category>

		<guid isPermaLink="false">/index.php/2010/11/raleigh-code-camp-followup/</guid>
		<description><![CDATA[Saturday started off cold and rainy, but it didn't matter because, for over 100 of us, there were more important things going on. Namely sessions ranging from the one I presented, Unit Testing, to specific C#, jQuery, database, ALM, Silverlight, Ruby, and Python topics. In fact there were so many specific topics and I heard so many good things about all of the sessions that I wish I could have twinned or tripled myself to attend them all.]]></description>
				<content:encoded><![CDATA[<p>Saturday started off cold and rainy, but it didn&#8217;t matter because, for over 100 of us, there were more important things going on. Namely sessions ranging from the one I presented, Unit Testing, to specific C#, jQuery, database, ALM, Silverlight, Ruby, and Python topics. In fact there were so many specific topics and I heard so many good things about all of the sessions that I wish I could have twinned or tripled myself to attend them all. </p>
<div style="float: left; margin: .5em; padding: .25em; border: 1px solid #dddddd;">
<img src="http://tiernok.com/_n_images/presentations/UnitTesting2.jpg" alt="" />
</div>
<p>My session was the first one in the craftsmanship series and it was a lot of fun. I purposefully left 15 minutes at the end so we could talk more to peoples specific environments and challenges and I like to think at least one person in my session will be trying some unit testing next week. The slides and notes handout are posted <a href="http://tiernok.com/presentation.php">on my site</a> (the handout is enough for a quick overview).</p>
<p>The next session was an excellent ALM session from Steve Andrews (<a href="http://www.platinumbay.com/blogs/" title="Steve's blog">blog</a>|<a href="http://twitter.com/SteveAndrews" title="Steve on Twitter">twitter</a>). Steve&#8217;s session covered a big picture view of selecting a strategy for branching and merging, some of the advances ALM has made with 2010, and some of the things build definitions are able to do right out of the box. He did an excellent job of providing a base of knowledge to attach all those little tidbits I&#8217;d picked up on my own.</p>
<p>After lunch, and a book raffle, I attended Mike O&#8217;Brien&#8217;s (<a href="http://blog.mikeobrien.net/" title="Mike's blog">blog</a>|<a href="http://twitter.com/hcoverlambda" title="mike's twitter page">twitter</a>) F# session, finally catching up a little on an item that has been sitting on my &#8220;find out more&#8221; list for a while. Mike exceeded my expectations for the session, not just showing us the language but really diving into what makes the functional paradigm different from the imperative. Coming out of his session I can tell I&#8217;ll be using F# in the near future, both to continue expanding my use of Functional languages and to have that skill (and mindset) available when using Functional constructs in .Net.</p>
<p>Rob Rowe (<a href="http://twitter.com/rippinrobr" title="Rob on twitter">twitter</a>) led a session on generating Data Assemblies using Iron Ruby. Frankly I didn&#8217;t know what to expect going into his session, as Ruby has never made it high enough on my &#8220;to learn&#8221; list to know what I was walking into. Rob&#8217;s session used Ruby, but the bigger focus was on data assembly generation. From a few scripts he was able to generate both IL and CodeDom-generated code to build an entire data model layer of an application. A few more clicks and he had an MVC front-end. The walk-through of his process opened up a lot of new subjects for me (IL generation, CodeDom, Ruby) and I&#8217;m starting to think I need a real &#8220;to learn&#8221; list to keep it all straight.</p>
<p>Chris Eargle (<a href="http://www.kodefuguru.com/" title="Chris's blog">blog</a>|<a href="http://twitter.com/kodefuguru" title="Chris on twitter">twitter</a>) did a last minute session on C# Ninjitsu, straining our brains and walking us through some interesting aspects of the C# language. Chris did the entire presentation on the fly, as his office suite had expired that morning. His session was a good choice for the last one of the day, as he kept it lively and flowed smoothly from one interesting construct to another. </p>
<p>The day ended with a raffle from the sponsors who made this event possible. I walked away with an enterprise suite of software from DevExpress (which I&#8217;m not planning on sharing, but may end up in a blog or two). Over the course of the day I got to meet a lot of fantastic people, had a lot of fun presenting on Unit Testing, and overall just had a blast. I&#8217;m looking forward to the next one and, if your in the Raleigh area, I hope to see you out at the User Group meetings.</p>
]]></content:encoded>
			<wfw:commentRss>/index.php/desktopdev/mstech/raleigh-code-camp-followup/feed/</wfw:commentRss>
		<slash:comments>1</slash:comments>
		</item>
		<item>
		<title>Productive Programing With Pattern Matching</title>
		<link>/index.php/desktopdev/mstech/productive-programing-with-pattern-match/</link>
		<comments>/index.php/desktopdev/mstech/productive-programing-with-pattern-match/#comments</comments>
		<pubDate>Fri, 10 Sep 2010 00:36:58 +0000</pubDate>
		<dc:creator><![CDATA[chaospandion]]></dc:creator>
				<category><![CDATA[Microsoft Technologies]]></category>
		<category><![CDATA[.net]]></category>
		<category><![CDATA[f#]]></category>

		<guid isPermaLink="false">/index.php/2010/09/productive-programing-with-pattern-match/</guid>
		<description><![CDATA[Personally I have been sold on F# for a long time but some people however will need a lot of convincing before they move out of their comfort zone. Hopefully after reading this you will be more inclined to try it out. Imagine you were given a directory full of files that did not have [&#8230;]]]></description>
				<content:encoded><![CDATA[<p>Personally I have been sold on F# for a long time but some people however will need a lot of convincing before they move out of their comfort zone. Hopefully after reading this you will be more inclined to try it out. </p>
<p>Imagine you were given a directory full of files that did not have any file extensions and were told to figure out the file extension for every file. Picture how you might do this in VB or C#. Now take a look at this:</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="ocaml"><thead><tr><td colspan="2"  class="head">OCaml</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
</pre></td><td class="de1"><pre class="de1"><span class="co1">(*</span>
<span class="co1">Notice how we don't need to specify the type for filePaths?</span>
<span class="co1">The compiler will infer the type based off how we use the parameter.</span>
<span class="co1">When we call File.OpenRead the compiler will know that filePaths has to be a</span>
<span class="co1">string seq or IEnumerable&lt;string&gt; in C# speak.</span>
<span class="co1">*)</span>
<span class="kw1">let</span> getUnknownFileExtensions filePaths <span class="sy0">=</span>
&nbsp; &nbsp; filePaths
&nbsp; &nbsp; <span class="sy0">|&gt;</span> Seq<span class="sy0">.</span>map<span class="br0">&#40;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">fun</span> filePath <span class="sy0">-&gt;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; use fs <span class="sy0">=</span> System<span class="sy0">.</span>IO<span class="sy0">.</span>File<span class="sy0">.</span>OpenRead<span class="br0">&#40;</span>filePath<span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">let</span> buffer <span class="sy0">=</span> <span class="kw2">Array</span><span class="sy0">.</span>zeroCreate <span class="nu0">8</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">let</span> read <span class="sy0">=</span> fs<span class="sy0">.</span>Read<span class="br0">&#40;</span>buffer, <span class="nu0">0</span>, <span class="nu0">8</span><span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">match</span> buffer <span class="kw1">with</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="co1">(*The underscore tells the compiler that we dont care what the byte is at that index.*)</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="sy0">|</span> <span class="br0">&#91;</span><span class="sy0">|</span> 0xFFuy<span class="sy0">;</span> 0xD8uy<span class="sy0">;</span> _<span class="sy0">;</span> _<span class="sy0">;</span> _<span class="sy0">;</span> _<span class="sy0">;</span> _<span class="sy0">;</span> _<span class="sy0">;</span> <span class="sy0">|</span><span class="br0">&#93;</span> <span class="sy0">-&gt;</span> 
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#40;</span>filePath, <span class="st0">&quot;.jpg&quot;</span><span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="sy0">|</span> <span class="br0">&#91;</span><span class="sy0">|</span> 0x25uy<span class="sy0">;</span> 0x50uy<span class="sy0">;</span> 0x44uy<span class="sy0">;</span> 0x46uy<span class="sy0">;</span> _<span class="sy0">;</span> _<span class="sy0">;</span> _<span class="sy0">;</span> _<span class="sy0">;</span> <span class="sy0">|</span><span class="br0">&#93;</span> <span class="sy0">-&gt;</span> 
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#40;</span>filePath, <span class="st0">&quot;.pdf&quot;</span><span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="sy0">|</span> <span class="br0">&#91;</span><span class="sy0">|</span> 0x50uy<span class="sy0">;</span> 0x4Buy<span class="sy0">;</span> 0x03uy<span class="sy0">;</span> 0x04uy<span class="sy0">;</span> _<span class="sy0">;</span> _<span class="sy0">;</span> _<span class="sy0">;</span> _<span class="sy0">;</span> <span class="sy0">|</span><span class="br0">&#93;</span> <span class="sy0">-&gt;</span> 
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#40;</span>filePath, <span class="st0">&quot;.docx&quot;</span><span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="sy0">|</span> <span class="br0">&#91;</span><span class="sy0">|</span> 0xD0uy<span class="sy0">;</span> 0xCFuy<span class="sy0">;</span> 0x11uy<span class="sy0">;</span> 0xE0uy<span class="sy0">;</span> 0xA1uy<span class="sy0">;</span> 0xB1uy<span class="sy0">;</span> 0x1Auy<span class="sy0">;</span> 0xE1uy<span class="sy0">;</span> <span class="sy0">|</span><span class="br0">&#93;</span> <span class="sy0">-&gt;</span> 
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#40;</span>filePath, <span class="st0">&quot;.doc&quot;</span><span class="br0">&#41;</span> 
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="sy0">|</span> _ <span class="sy0">-&gt;</span> 
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#40;</span>filePath, <span class="st0">&quot;.unk&quot;</span><span class="br0">&#41;</span>
&nbsp; &nbsp; <span class="br0">&#41;</span>
&nbsp; &nbsp; <span class="sy0">|&gt;</span> Seq<span class="sy0">.</span>iter<span class="br0">&#40;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">fun</span> <span class="br0">&#40;</span>filePath, extension<span class="br0">&#41;</span> <span class="sy0">-&gt;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; System<span class="sy0">.</span>IO<span class="sy0">.</span>File<span class="sy0">.</span>Move<span class="br0">&#40;</span>filePath, filePath <span class="sy0">+</span> extension<span class="br0">&#41;</span>
&nbsp; &nbsp; <span class="br0">&#41;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">(*
Notice how we don't need to specify the type for filePaths?
The compiler will infer the type based off how we use the parameter.
When we call File.OpenRead the compiler will know that filePaths has to be a
string seq or IEnumerable&lt;string&gt; in C# speak.
*)
let getUnknownFileExtensions filePaths =
    filePaths
    |&gt; Seq.map(
        fun filePath -&gt;
            use fs = System.IO.File.OpenRead(filePath)
            let buffer = Array.zeroCreate 8
            let read = fs.Read(buffer, 0, 8)
            match buffer with
            (*The underscore tells the compiler that we dont care what the byte is at that index.*)
            | [| 0xFFuy; 0xD8uy; _; _; _; _; _; _; |] -&gt; 
                (filePath, ".jpg")
            | [| 0x25uy; 0x50uy; 0x44uy; 0x46uy; _; _; _; _; |] -&gt; 
                (filePath, ".pdf")
            | [| 0x50uy; 0x4Buy; 0x03uy; 0x04uy; _; _; _; _; |] -&gt; 
                (filePath, ".docx")
            | [| 0xD0uy; 0xCFuy; 0x11uy; 0xE0uy; 0xA1uy; 0xB1uy; 0x1Auy; 0xE1uy; |] -&gt; 
                (filePath, ".doc") 
            | _ -&gt; 
                (filePath, ".unk")
    )
    |&gt; Seq.iter(
        fun (filePath, extension) -&gt;
            System.IO.File.Move(filePath, filePath + extension)
    )</pre></div></div>

<p>Now that is what I call productive programming!</p>
]]></content:encoded>
			<wfw:commentRss>/index.php/desktopdev/mstech/productive-programing-with-pattern-match/feed/</wfw:commentRss>
		<slash:comments>1</slash:comments>
		</item>
		<item>
		<title>Visual Studio 2010 and .NET Framework 4 Training Kit June 2010 Release Available</title>
		<link>/index.php/desktopdev/mstech/visual-studio-2010-and-net-framework-4-t/</link>
		<comments>/index.php/desktopdev/mstech/visual-studio-2010-and-net-framework-4-t/#respond</comments>
		<pubDate>Sun, 20 Jun 2010 13:05:32 +0000</pubDate>
		<dc:creator><![CDATA[SQLDenis]]></dc:creator>
				<category><![CDATA[C#]]></category>
		<category><![CDATA[Microsoft Technologies]]></category>
		<category><![CDATA[VB.NET]]></category>
		<category><![CDATA[.net framework 4]]></category>
		<category><![CDATA[ado.net data services]]></category>
		<category><![CDATA[c#]]></category>
		<category><![CDATA[f#]]></category>
		<category><![CDATA[parallel extensions]]></category>
		<category><![CDATA[visual basic]]></category>
		<category><![CDATA[visual studio 2010]]></category>
		<category><![CDATA[wcf]]></category>
		<category><![CDATA[wpf]]></category>
		<category><![CDATA[wwf]]></category>

		<guid isPermaLink="false">/index.php/2010/06/visual-studio-2010-and-net-framework-4-t/</guid>
		<description><![CDATA[Microsoft has made available for download the June 2010 Release of the Visual Studio 2010 and .NET Framework 4 Training Kit. The Visual Studio 2010 and .NET Framework 4 Training Kit includes presentations, hands-on labs, and demos. This content is designed to help you learn how to utilize the Visual Studio 2010 features and a [&#8230;]]]></description>
				<content:encoded><![CDATA[<p>Microsoft has made available for download the June 2010 Release of the Visual Studio 2010 and .NET Framework 4 Training Kit.</p>
<p>The Visual Studio 2010 and .NET Framework 4 Training Kit includes presentations, hands-on labs, and demos. This content is designed to help you learn how to utilize the Visual Studio 2010 features and a variety of framework technologies including:<br />
C# 4<br />
Visual Basic 10<br />
F#<br />
Parallel Extensions<br />
Windows Communication Foundation<br />
Windows Workflow<br />
Windows Presentation Foundation<br />
ASP.NET 4<br />
Windows 7<br />
Entity Framework<br />
ADO.NET Data Services<br />
Managed Extensibility Framework<br />
Visual Studio Team System</p>
<p>The size of the download file is 178.0 MB and you can download it here: http://www.microsoft.com/downloads/details.aspx?familyid=752CB725-969B-4732-A383-ED5740F02E93&amp;displaylang=en</p>
<p>Channel 9 also has a bunch of video available, you can find all 41 videos here: http://channel9.msdn.com/shows/10-4/</p>
]]></content:encoded>
			<wfw:commentRss>/index.php/desktopdev/mstech/visual-studio-2010-and-net-framework-4-t/feed/</wfw:commentRss>
		<slash:comments>0</slash:comments>
		</item>
		<item>
		<title>F# Asynchronous Workflows</title>
		<link>/index.php/desktopdev/mstech/f-asynchronous-workflows/</link>
		<comments>/index.php/desktopdev/mstech/f-asynchronous-workflows/#respond</comments>
		<pubDate>Fri, 26 Feb 2010 17:00:07 +0000</pubDate>
		<dc:creator><![CDATA[chaospandion]]></dc:creator>
				<category><![CDATA[Microsoft Technologies]]></category>
		<category><![CDATA[f#]]></category>

		<guid isPermaLink="false">/index.php/2010/02/f-asynchronous-workflows/</guid>
		<description><![CDATA[Asynchronous work flows are a very powerful tool in programming. They allow your threads to do other work while you wait for results from a long running piece of work. How would you write an asynchronous work flow in C#? Logically you might consider chaining together callbacks. &#60;code&#62; &#60;span class="MT_blue"&#62;new&#60;/span&#62; Client().Connect(settings, (c1, ex1) =&#62; { [&#8230;]]]></description>
				<content:encoded><![CDATA[<p>Asynchronous work flows are a very powerful tool in programming. They allow your threads to do other work while you wait for results from a long running piece of work. How would you write an asynchronous work flow in C#? Logically you might consider chaining together callbacks.</p>
<pre>&lt;code&gt;
&lt;span class="MT_blue"&gt;new&lt;/span&gt; Client().Connect(settings, (c1, ex1) =&gt; {
    &lt;span class="MT_green"&gt;// prepare data to send&lt;/span&gt;
    c.Send(sendData1, (c2, ex2) =&gt; {
        c2.Receive((c3, dt1, ex3) =&gt; {
            &lt;span class="MT_green"&gt;// parse data and prepare response&lt;/span&gt;
            c3.Send(sendData2, (c4, ex4) =&gt; {
                c4.Disconnect((c5, ex5) =&gt; {
                    c5.Dispose();
                });
            });
        });
    });
});
&lt;/code&gt;</pre>
<p>There is a good reason you never see code like this. For one, it is highly indented and this makes it a bit awkward to read. More importantly, this approach puts your code at risk of a great deal of name conflicts, as the compiler will create a closure for each lambda and capture all of the values in the previous levels. This means you have to come up with a different name for the parameters in each lambda. Resolving this issue could involve creating an additional class to contain the necessary methods, potentially complicating a task that seems like it should be simple. This is where F# asynchronous work flows come to play.</p>
<pre>&lt;code&gt;
async {
    &lt;span class="MT_blue"&gt;try&lt;/span&gt;
        &lt;span class="MT_blue"&gt;use&lt;/span&gt; client = &lt;span class="MT_blue"&gt;new&lt;/span&gt; Client()
        &lt;span class="MT_blue"&gt;do!&lt;/span&gt; client.Connect settings
        &lt;span class="MT_green"&gt;// prepare data to send&lt;/span&gt;
        &lt;span class="MT_blue"&gt;do!&lt;/span&gt; client.Send sendData1
        &lt;span class="MT_blue"&gt;let!&lt;/span&gt; dt1 = client.Receive ()
        &lt;span class="MT_green"&gt;// parse data and prepare response&lt;/span&gt;
        &lt;span class="MT_blue"&gt;do!&lt;/span&gt; client.Send sendData2
        &lt;span class="MT_blue"&gt;do!&lt;/span&gt; client.Disconnect ()
    &lt;span class="MT_blue"&gt;with&lt;/span&gt;
    | ex -&gt;
        &lt;span class="MT_green"&gt;// handle exception&lt;/span&gt;       
} |&gt; Asnyc.Start &lt;span class="MT_green"&gt;// run in the thread pool&lt;/span&gt; 
&lt;/code&gt;</pre>
<p></p>
<p>This is almost a literal translation of the C# except for one thing. Notice how the C# version threads through an exception parameter? In F# you have first class error handling in asynchronous work flows so the first failure will will call your exception handling code.</p>
<p>The first class support for asynchronous work flows is an amazing feature of F#. It allows you to create simple elegant code right where you need it. Think about some of your synchronous projects that just don&#8217;t have the performance you need and consider F# as a powerful solution to you problem.</p>
<p><a href="http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/">F# &#8211; Microsoft Research</a><br />
<a href="http://msdn.microsoft.com/en-us/fsharp/default.aspx">F# &#8211; MSDN</a></p>
]]></content:encoded>
			<wfw:commentRss>/index.php/desktopdev/mstech/f-asynchronous-workflows/feed/</wfw:commentRss>
		<slash:comments>0</slash:comments>
		</item>
		<item>
		<title>Visual Studio 2010 Screenshots</title>
		<link>/index.php/desktopdev/mstech/visual-studio-2010-screenshots/</link>
		<comments>/index.php/desktopdev/mstech/visual-studio-2010-screenshots/#comments</comments>
		<pubDate>Tue, 19 May 2009 14:23:00 +0000</pubDate>
		<dc:creator><![CDATA[SQLDenis]]></dc:creator>
				<category><![CDATA[Microsoft Technologies]]></category>
		<category><![CDATA[f#]]></category>
		<category><![CDATA[visual studio 2010]]></category>
		<category><![CDATA[windows 7]]></category>
		<category><![CDATA[wpf]]></category>

		<guid isPermaLink="false">/index.php/2009/05/visual-studio-2010-screenshots/</guid>
		<description><![CDATA[Visual Studio 2010 has been made available to MSDN subscribers yesterday. I downloaded Visual Studio 2010 today and installed it on Windows 7 RC. I took some images so that you can see what it looks like

Here is what the setup screen looks like, noth&#8230;]]></description>
				<content:encoded><![CDATA[<p>Visual Studio 2010 has been made available to MSDN subscribers yesterday. I downloaded Visual Studio 2010 today and installed it on Windows 7 RC. I took some images so that you can see what it looks like</p>
<p>The new welcome screen in Visual Studio 2010</p>
<div class="image_block"><a href="/wp-content/uploads/blogs/ITProfessionals/Denis/vs20101.png?mtime=1357606093"><img alt="" src="/wp-content/uploads/blogs/ITProfessionals/Denis/vs20101.png?mtime=1357606093" width="735" height="521" /></a></div>
<p>
In Visual Studio 2010 you can target frameworks 2.0, 3.0, 3.5 and 4.0</p>
<div class="image_block"><a href="/wp-content/uploads/blogs/ITProfessionals/Denis/vs20102.png?mtime=1357606111"><img alt="" src="/wp-content/uploads/blogs/ITProfessionals/Denis/vs20102.png?mtime=1357606111" width="605" height="657" /></a></div>
<p>
The toolbox has changed in Visual Studio 2010. it looks a lot cleaner to me. Finally we have a toolbox which does not resemble the Visual Basic 4 toolbox anymore</p>
<div class="image_block"><a href="/wp-content/uploads/blogs/ITProfessionals/Denis/vs20103.png?mtime=1357606121"><img alt="" src="/wp-content/uploads/blogs/ITProfessionals/Denis/vs20103.png?mtime=1357606121" width="864" height="643" /></a></div>
<p>
Finally here is what a WPF project looks like</p>
<div class="image_block"><a href="/wp-content/uploads/blogs/ITProfessionals/Denis/vs20104.png?mtime=1357606132"><img alt="" src="/wp-content/uploads/blogs/ITProfessionals/Denis/vs20104.png?mtime=1357606132" width="436" height="638" /></a></div>
<p></p>
<p>So what do you think, do you like the looks of Visual Studio 2010?</p>
]]></content:encoded>
			<wfw:commentRss>/index.php/desktopdev/mstech/visual-studio-2010-screenshots/feed/</wfw:commentRss>
		<slash:comments>5</slash:comments>
		</item>
		<item>
		<title>F# Developer Center</title>
		<link>/index.php/desktopdev/mstech/f-developer-center/</link>
		<comments>/index.php/desktopdev/mstech/f-developer-center/#respond</comments>
		<pubDate>Fri, 05 Sep 2008 15:48:45 +0000</pubDate>
		<dc:creator><![CDATA[SQLDenis]]></dc:creator>
				<category><![CDATA[Microsoft Technologies]]></category>
		<category><![CDATA[f#]]></category>
		<category><![CDATA[functional programming]]></category>

		<guid isPermaLink="false">/index.php/2008/09/f-developer-center/</guid>
		<description><![CDATA[Microsoft has launched the F# Developer Center Here you can learn everything about Microsoft&#8217;s functional programming language F# (pronounced F sharp). There are links to forums, blogs, projects on codeplex, code gallery samples, videos and much more. Also check out the Getting Started with F# section, here you can download the latest F# CTP and [&#8230;]]]></description>
				<content:encoded><![CDATA[<p>Microsoft has launched the <a href="http://msdn.microsoft.com/en-us/fsharp/default.aspx">F# Developer Center</a></p>
<p>Here you can learn everything about Microsoft&#8217;s functional programming language F# (pronounced F sharp). There are links to forums, blogs, projects on codeplex, code gallery samples, videos and much more.</p>
<p>Also check out the Getting Started with F# section, here you can download the latest F# CTP and three sample chapters of the Expert F# book are also available for preview</p>
]]></content:encoded>
			<wfw:commentRss>/index.php/desktopdev/mstech/f-developer-center/feed/</wfw:commentRss>
		<slash:comments>0</slash:comments>
		</item>
	</channel>
</rss>
