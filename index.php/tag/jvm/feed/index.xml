<?xml version="1.0" encoding="UTF-8"?><rss version="2.0"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:atom="http://www.w3.org/2005/Atom"
	xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
	xmlns:slash="http://purl.org/rss/1.0/modules/slash/"
	>

<channel>
	<title>jvm &#8211; LessthanDot</title>
	<atom:link href="/index.php/tag/jvm/feed/" rel="self" type="application/rss+xml" />
	<link>/</link>
	<description>A Technical Community for IT Professionals</description>
	<lastBuildDate>Sat, 09 Mar 2019 12:50:36 +0000</lastBuildDate>
	<language>en-US</language>
	<sy:updatePeriod>hourly</sy:updatePeriod>
	<sy:updateFrequency>1</sy:updateFrequency>
	<generator>https://wordpress.org/?v=4.6.1</generator>
	<item>
		<title>Scala: The difference between val and var</title>
		<link>/index.php/enterprisedev/appserver/jee/scala-the-difference-between-val/</link>
		<comments>/index.php/enterprisedev/appserver/jee/scala-the-difference-between-val/#respond</comments>
		<pubDate>Sat, 12 Jan 2013 10:25:00 +0000</pubDate>
		<dc:creator><![CDATA[SQLDenis]]></dc:creator>
				<category><![CDATA[Application Lifecycle Management]]></category>
		<category><![CDATA[Java EE]]></category>
		<category><![CDATA[functional programming]]></category>
		<category><![CDATA[java]]></category>
		<category><![CDATA[jvm]]></category>
		<category><![CDATA[polyglot]]></category>
		<category><![CDATA[scala]]></category>

		<guid isPermaLink="false">/index.php/2013/01/scala-the-difference-between-val/</guid>
		<description><![CDATA[This is a short Scala post to explain what the difference is between val and var. I was showing some Scala code to a co-worker this past week and he was asking what the difference was between val and var. It is quite simple:]]></description>
				<content:encoded><![CDATA[<p>This is a short Scala post to explain what the difference is between val and var. I was showing some Scala code to a co-worker this past week and he was asking what the difference was between val and var. It is quite simple:</p>
<p><strong>val</strong> defines a fixed value, it is a read only variable<br />
<strong>var</strong> defines a mutable variable, this variable can be modified</p>
<p>In Java you would use final to create a variable which would be read only, this is the same as val in Scala. </p>
<p>Let&#8217;s look at some very simple Scala code.</p>
<pre>object Test {

  def main(args: Array[String]) = println("done with main")
  
var Test1 =5
println("Test1 " + Test1)
  
Test1 = 6
println("Test1 " + Test1)

}</pre>
<p>Running the code above will give the following output<br />
Test1 5<br />
Test1 6<br />
done with main</p>
<p>If you are trying to use val, you will get an error, change var to val and see if you can compile the code</p>
<pre>object Test {

  def main(args: Array[String]) = println("done with main")
  
val Test1 =5
println("Test1 " + Test1)
  
Test1 = 6
println("Test1 " + Test1)

}</pre>
<p>Here is the error, the code won&#8217;t even compile</p>
<pre>Description		Resource	Path		Location	Type
reassignment to val	Test.scala	/ScalaTemp/src	line 8		Scala Problem</pre>
<p>So as you can see, val is read only, while with var you can modify the variable.</p>
<p>If you want to play around with Scala, take a look at <a href="/index.php/EnterpriseDev/AppServer/JEE/installing-scala-2-10-on">Installing Scala 2.10 on Eclipse Juno</a></p>
]]></content:encoded>
			<wfw:commentRss>/index.php/enterprisedev/appserver/jee/scala-the-difference-between-val/feed/</wfw:commentRss>
		<slash:comments>0</slash:comments>
		</item>
		<item>
		<title>Review of The Well-Grounded Java Developer</title>
		<link>/index.php/enterprisedev/appserver/jee/review-of-the-well-grounded/</link>
		<comments>/index.php/enterprisedev/appserver/jee/review-of-the-well-grounded/#comments</comments>
		<pubDate>Wed, 09 Jan 2013 15:12:00 +0000</pubDate>
		<dc:creator><![CDATA[SQLDenis]]></dc:creator>
				<category><![CDATA[Application Lifecycle Management]]></category>
		<category><![CDATA[Java EE]]></category>
		<category><![CDATA[book]]></category>
		<category><![CDATA[book review]]></category>
		<category><![CDATA[groovy]]></category>
		<category><![CDATA[java functional programming]]></category>
		<category><![CDATA[jvm]]></category>
		<category><![CDATA[maven]]></category>
		<category><![CDATA[polyglot]]></category>
		<category><![CDATA[scala]]></category>

		<guid isPermaLink="false">/index.php/2013/01/review-of-the-well-grounded/</guid>
		<description><![CDATA[This is a review of The Well-Grounded Java Developer, Vital techniques of Java 7 and polyglot programming. Written by Benjamin J. Evans and Martijn Verburg. The book was published in July, 2012 and it contains 496 pages

This is an excellent&#8230;]]></description>
				<content:encoded><![CDATA[<p>This is a review of <a href="http://www.amazon.com/gp/product/1617290068/ref=as_li_ss_tl?ie=UTF8&amp;tag=sql08-20&amp;linkCode=as2&amp;camp=1789&amp;creative=390957&amp;creativeASIN=1617290068">The Well-Grounded Java Developer, Vital techniques of Java 7 and polyglot programming</a>. Written by Benjamin J. Evans and Martijn Verburg. The book was published in July, 2012 and it contains 496 pages</p>
<p><a href="/wp-content/uploads/blogs/EnterpriseDev/Denis/evans_cover150.jpg?mtime=1357748948"><img alt="" src="/wp-content/uploads/blogs/EnterpriseDev/Denis/evans_cover150.jpg?mtime=1357748948" width="150" height="188" style="float:left;margin:0 5px 0 0;" /></a>Right from the start I want to say that this is an excellent book and I highly recommend it. One thing you do need to be aware about is that in order to use this book you need to know Java. If you don&#8217;t know Java then this is not the book for you. This book is all about bringing you to the next level as a Java developer by showing you how to do continuous integration, dependency injection, testing, performance tuning, and more.<br />
This book even shows you how to use different languages that run on the JVM. The book is written in a easy and concise style, everything is very clear. I also love the annotations which are sprinkled throughout the book, they give some nice background information. While the chapters on Groovy, Scala and Clojure are not a complete reference for the language, they do provide enough material to form a nice foundation, now you can further explore the language on your own.</p>
<p>The book is split up in four parts, I will list each part with the chapters within that part and will give a brief summary what the part is about</p>
<p><strong>Part 1 Developing with Java 7</strong><br />
Chapter 1 Introducing Java 7<br />
Chapter 2 New I/O</p>
<p>This section shows you what was added in Java 7, for example you can now use strings in switch statements, try-with-resources(similar to a using statement in c#, it frees up the resources after it is done). The Java IO stuff has been rewritten and much easier to use, where you had to write a whole bunch of code before, you can now do the same in much less code. Some things that did not exist in Java in terms of IO but now does exist are explained as well.</p>
<p><strong>Part 2 Vital techniques</strong><br />
Chapter 3 Dependency Injection<br />
Chapter 4 Modern concurrency<br />
Chapter 5 Class files and bytecode<br />
Chapter 6 Understanding performance tuning</p>
<p>This part has a lot of stuff and as a Java developer you should really know how this stuff works if you want to get to the next level. Dependency Injection(DI) and inversion of control (IoC) are covered, Guice 3, the reference implementation for DI in Java is also covered. Concurrency before Java 5 and concurrency now is covered. Concurrency will be a must now that we have multi-CPU and multi-core everywhere, you better get your wits around it. There is a whole chapter on the class files itself and how they are loaded as well as what they compile into. These are fun details and will show you exactly what happens when you compile and execute a class. Evereybody&#8217;s favorite subject performance tuning is covered in this part of the book as well.</p>
<p><strong>Part 3 Polyglot programming on the JVM</strong><br />
Chapter 7 Alternative JVM languages<br />
Chapter 8 Groovy: Java’s dynamic friend<br />
Chapter 9 Scala: powerful and concise<br />
Chapter 10 Clojure: safer programming</p>
<p>This is a very interesting part of the book and I would suggest not to skip it. There are 3 type of languages covered in this part:<br />
Groovy, a dynamic language<br />
Scala, a functional language<br />
Clojure, a Lisp for functional programming</p>
<p>Take a look at these languages and you will be amazed how much Java boilerplate code you can eliminate by using these languages instead. Some of the functional is a little bit of a paradigm shift and you might need some time adjusting. You will also see how you can interoperate between these languages and Java.</p>
<p><strong>Part 4 Crafting the polyglot project</strong><br />
Chapter 11 Test-driven development<br />
Chapter 12 Build and continuous integration<br />
Chapter 13 Rapid web development<br />
Chapter 14 Staying well-grounded</p>
<p>The last part is all about automation and making your life easier. If you are a developer who still deploys stuff by using FTP to move JAR, EAR and WAR files, pay attention. Maven is covered as the build automation tool, Jenkins is the  continuous integration tool. In the Rapid web development chapter Grails is explored.</p>
<hr />
Let me just repeat again that I think this is an awesome book and as a Java developer you have to check it out. The one thing that is missing from the book is ORM, it is covered a little in the testing chapter but if you want to know about ORM, you will need to pick out some other book just for that.</p>
<p>You can download the following chapters to get a feel for the book</p>
<p><a href="http://www.manning.com/evans/TWGJD_sample_ch01.pdf">Sample chapter 1</a><br />
<a href="http://www.manning.com/evans/TWGJD_sample_ch04.pdf">Sample chapter 4</a></p>
<p>Head on over to Amazon for other reviews of <a href="http://www.amazon.com/gp/product/1617290068/ref=as_li_ss_tl?ie=UTF8&amp;tag=sql08-20&amp;linkCode=as2&amp;camp=1789&amp;creative=390957&amp;creativeASIN=1617290068">The Well-Grounded Java Developer, Vital techniques of Java 7 and polyglot programming</a><br />
The site for the book can be found here: http://www.manning.com/evans/ </p>
<hr />
Below is the complete table of contents so that you have a little more details about each chapter.</p>
<p><strong>Part 1 Developing with Java 7<br />
Chapter 1 Introducing Java 7<br />
</strong>The language and the platform<br />
Small is beautiful—Project Coin<br />
The changes in Project Coin<br />
Summary</p>
<p><strong>Chapter 2 New I/O</strong><br />
Java I/O—a history<br />
Path—a foundation of file-based I/O<br />
Dealing with directories and directory trees<br />
Filesystem I/O with NIO.2<br />
Asynchronous I/O operations<br />
Tidying up Socket-Channel functionality<br />
Summary</p>
<p><strong>Part 2 Vital techniques<br />
Chapter 3 Dependency Injection</strong><br />
Inject some knowledge—understanding IoC and DI<br />
Standardized DI in Java<br />
Guice 3—the reference implementation for DI in Java<br />
Summary</p>
<p><strong>Chapter 4 Modern concurrency</strong><br />
Concurrency theory—a primer<br />
Block-structured concurrency (pre-Java 5)<br />
Building blocks for modern concurrent applications<br />
Controlling execution<br />
The fork/join framework<br />
The Java Memory Model (JMM)<br />
Summary</p>
<p><strong>Chapter 5 Class files and bytecode</strong><br />
Classloading and class objects<br />
Using method handles<br />
Examining class files<br />
Bytecode<br />
Invokedynamic<br />
Summary</p>
<p><strong>Chapter 6 Understanding performance tuning</strong><br />
Performance terminology—some basic definitions<br />
A pragmatic approach to performance analysis<br />
What went wrong? Why we have to care<br />
A question of time—from the hardware up<br />
Garbage collection<br />
JIT compilation with HotSpot<br />
Summary</p>
<p><strong>Part 3 Polyglot programming on the JVM<br />
Chapter 7 Alternative JVM languages<br />
</strong>Java too clumsy? Them’s fighting words!<br />
Language zoology<br />
Polyglot programming on the JVM<br />
How to choose a non-Java language for your project<br />
How the JVM supports alternative languages<br />
Summary</p>
<p><strong>Chapter 8 Groovy: Java’s dynamic friend</strong><br />
Getting started with Groovy<br />
Groovy 101—syntax and semantics<br />
Differences from Java—traps for new players<br />
Groovy features not (yet) in Java<br />
Interoperating between Groovy and Java<br />
Summary</p>
<p><strong>Chapter 9 Scala: powerful and concise</strong><br />
A quick tour of Scala<br />
Is Scala right for my project?<br />
Making code beautiful again with Scala<br />
Scala’s object model—similar but different<br />
Data structures and collections<br />
Introduction to actors<br />
Summary</p>
<p><strong>Chapter 10 Clojure: safer programming</strong><br />
Introducing Clojure<br />
Looking for Clojure—syntax and semantics<br />
Working with functions and loops in Clojure<br />
Introducing Clojure sequences<br />
Interoperating between Clojure and Java<br />
Concurrent Clojure<br />
Summary</p>
<p><strong>Part 4 Crafting the polyglot project<br />
Chapter 11 Test-driven development<br />
</strong>TDD in a nutshell<br />
Test doubles<br />
Introducing ScalaTest<br />
Summary</p>
<p><strong>Chapter 12 Build and continuous integration</strong><br />
Getting started with Maven 3<br />
Maven 3—a quick-start project<br />
Maven 3—the Java7developer build<br />
Jenkins—serving your CI needs<br />
Code metrics with Maven and Jenkins<br />
Leiningen<br />
Summary</p>
<p><strong>Chapter 13 Rapid web development</strong><br />
The problem with Java-based web frameworks<br />
Criteria in selecting a web framework<br />
Getting started with Grails<br />
Grails quick-start project<br />
Further Grails exploration<br />
Getting started with Compojure<br />
A sample Compojure project—“Am I an Otter or Not?”<br />
Summary</p>
<p><strong>Chapter 14 Staying well-grounded</strong><br />
What to expect in Java 8<br />
Polyglot programming<br />
Future concurrency trends<br />
New directions in the JVM</p>
]]></content:encoded>
			<wfw:commentRss>/index.php/enterprisedev/appserver/jee/review-of-the-well-grounded/feed/</wfw:commentRss>
		<slash:comments>4</slash:comments>
		</item>
		<item>
		<title>Installing Scala 2.10 on Eclipse Juno</title>
		<link>/index.php/enterprisedev/appserver/jee/installing-scala-2-10-on/</link>
		<comments>/index.php/enterprisedev/appserver/jee/installing-scala-2-10-on/#comments</comments>
		<pubDate>Sat, 05 Jan 2013 13:46:00 +0000</pubDate>
		<dc:creator><![CDATA[SQLDenis]]></dc:creator>
				<category><![CDATA[Application Lifecycle Management]]></category>
		<category><![CDATA[Java EE]]></category>
		<category><![CDATA[functional programming]]></category>
		<category><![CDATA[java]]></category>
		<category><![CDATA[jvm]]></category>
		<category><![CDATA[polyglot]]></category>
		<category><![CDATA[scala]]></category>

		<guid isPermaLink="false">/index.php/2013/01/installing-scala-2-10-on/</guid>
		<description><![CDATA[Scala 2.10 was released yesterday and I decided to take a look at it. But first what is Scala anyway? From the Scala site: 

Scala is a general purpose programming language designed to express common programming patterns in a concise, elegant, and typ&#8230;]]></description>
				<content:encoded><![CDATA[<p>As part of my <a href="/index.php/ITProfessionals/ProfessionalDevelopment/ah-yes-those-pesky-resolutions">resolutions for the year</a> I said I would write more blog posts and also get into different technology. I decided to take a look at Scala. Well it turns out Scala 2.10 was released yesterday. But first what is Scala anyway? From the Scala site:  </p>
<blockquote><p>Scala is a general purpose programming language designed to express common programming patterns in a concise, elegant, and type-safe way. It smoothly integrates features of object-oriented and functional languages, enabling Java and other programmers to be more productive. Code sizes are typically reduced by a factor of two to three when compared to an equivalent Java application.</p></blockquote>
<p>Scala is an object oriented, functional, statically typed language. You could probably compare it to F# if you are a .NET programmer.</p>
<p>The first thing you have to do is downloading version 2.10 of Scala, you can download that version here: http://www.scala-lang.org/downloads</p>
<p>After it is downloaded and installed, it is time to get the Eclipse plugin for Scala 2.10</p>
<p>The way you do this is you click on Help followed by Install New Software&#8230; from the menu in Eclipse</p>
<div class="image_block"><a href="/wp-content/uploads/blogs/EnterpriseDev/Denis/juno2.PNG?mtime=1357398056"><img alt="" src="/wp-content/uploads/blogs/EnterpriseDev/Denis/juno2.PNG?mtime=1357398056" width="552" height="169" /></a></div>
<p>Click on the Add button</p>
<div class="image_block"><a href="/wp-content/uploads/blogs/EnterpriseDev/Denis/juno3.PNG?mtime=1357398065"><img alt="" src="/wp-content/uploads/blogs/EnterpriseDev/Denis/juno3.PNG?mtime=1357398065" width="476" height="177" /></a></div>
<p>For Eclipse Juno you need to use the following URL in the location box http://download.scala-ide.org/sdk/e38/scala210/dev/site/<br />
For Eclipse Indigo use the following URL http://download.scala-ide.org/sdk/e37/scala210/dev/site/<br />
Give a name for the repository, I named mine Scala 10 for Eclipse Juno. Hit Ok</p>
<div class="image_block"><a href="/wp-content/uploads/blogs/EnterpriseDev/Denis/juno4.PNG?mtime=1357398076"><img alt="" src="/wp-content/uploads/blogs/EnterpriseDev/Denis/juno4.PNG?mtime=1357398076" width="300" height="165" /></a></div>
<p>Hit next</p>
<p>On the Install Details form you will see Scala IDE for Eclipse<br />
You can expand it to reveal the following</p>
<div class="image_block"><a href="/wp-content/uploads/blogs/EnterpriseDev/Denis/juno5.PNG?mtime=1357398089"><img alt="" src="/wp-content/uploads/blogs/EnterpriseDev/Denis/juno5.PNG?mtime=1357398089" width="352" height="152" /></a></div>
<p>Hit next to accept the license, hit finish.</p>
<p>Now Eclipse will ask you to restart. After Eclipse is restarted it is time to create our first Scala application<br />
From the menu go to File and then select New Project. Navigate to Scala Wizards and select Scala Project</p>
<div class="image_block"><a href="/wp-content/uploads/blogs/EnterpriseDev/Denis/juno6.PNG?mtime=1357398099"><img alt="" src="/wp-content/uploads/blogs/EnterpriseDev/Denis/juno6.PNG?mtime=1357398099" width="562" height="361" /></a></div>
<p>Now that the project is created let&#8217;s create a simple object</p>
<p>Right click on the Scala Project from the package Explorer and select New&#8211;> Scala Object</p>
<div class="image_block"><a href="/wp-content/uploads/blogs/EnterpriseDev/Denis/juno7.PNG?mtime=1357398110"><img alt="" src="/wp-content/uploads/blogs/EnterpriseDev/Denis/juno7.PNG?mtime=1357398110" width="510" height="573" /></a></div>
<p>Give it a name and check <em>public static void main</em></p>
<p>You should have something like this</p>
<pre>object Test2 {

  def main(args: Array[String]): Unit = {}

}</pre>
<p>Let&#8217;s make it more interesting by generating some output</p>
<pre>object Test2 {

  def main(args: Array[String]): Unit = {}

	val (name, site, role) = getSomeInfo()
	println("Name is " + name)
	println("Site is " + site)
	println("Role is " + role)

	def getSomeInfo() = {
    ("SQLDenis", "LessThanDot", "blogger")
	}
}</pre>
<p>Run it by selecting Run As&#8211;> Scala Application from the Run as button</p>
<div class="image_block"><a href="/wp-content/uploads/blogs/EnterpriseDev/Denis/juno10.PNG?mtime=1357399576"><img alt="" src="/wp-content/uploads/blogs/EnterpriseDev/Denis/juno10.PNG?mtime=1357399576" width="455" height="48" /></a></div>
<p>Your output should be the following<br />
Name is SQLDenis<br />
Site is LessThanDot<br />
Role is blogger</p>
<p>Why don&#8217;t we add a simple loop to our code? Here is what needs to be added</p>
<pre>	for (i &lt;- 1 to 3) {
		print(i + ",")
	}
	println(" Testing 1,2,3.....")</pre>
<p>Here is the whole code</p>
<pre>object Test2 {

  def main(args: Array[String]): Unit = {}

	val (name, site, role) = getSomeInfo()
	println("Name is " + name)
	println("Site is " + site)
	println("Role is " + role)
	
	for (i &lt;- 1 to 3) {
		print(i + ",")
	}
	println(" Testing 1,2,3.....")

	def getSomeInfo() = {
    ("SQLDenis", "LessThanDot", "blogger")
	}
}</pre>
<p>Run it again, here is what the output should be</p>
<p>Name is SQLDenis<br />
Site is LessThanDot<br />
Role is blogger<br />
1,2,3, Testing 1,2,3&#8230;..<br />
Here is what my Eclipse window looks like</p>
<div class="image_block"><a href="/wp-content/uploads/blogs/EnterpriseDev/Denis/juno9.PNG?mtime=1357398314"><img alt="" src="/wp-content/uploads/blogs/EnterpriseDev/Denis/juno9.PNG?mtime=1357398314" width="595" height="523" /></a></div>
<p>In case you are interested in all the new stuff in Scala 2.10, take a look at the stuff below.</p>
<hr />
<p>The Scala 2.10.0 codebase includes the following new features and changes:&nbsp;</p>
<ul>
<li>Value Classes
<ul>
<li>A class may now extend <code>AnyVal</code> to make it behave like a struct type (restrictions apply).</li>
<li><a href="http://docs.scala-lang.org/overviews/core/value-classes.html">http://docs.scala-lang.org/overviews/core/value-classes.html</a></li>
</ul>
</li>
<li>Implicit Classes
<ul>
<li>The implicit modifier now also applies to class definitions to reduce the boilerplate of implicit wrappers.</li>
<li><a href="http://docs.scala-lang.org/sips/pending/implicit-classes.html">http://docs.scala-lang.org/sips/pending/implicit-classes.html</a></li>
</ul>
</li>
<li>String Interpolation
<ul>
<li><code>val what = "awesome"; println(s"string interpolation is ${what.toUpperCase}!")</code></li>
<li><a href="http://docs.scala-lang.org/overviews/core/string-interpolation.html">http://docs.scala-lang.org/overviews/core/string-interpolation.html</a></li>
</ul>
</li>
<li>Futures and Promises
<ul>
<li>Asynchronously get some JSON: <code>for (req &lt;- WS.url(restApiUrl).get()) yield (req.json  "users").as[List[User]]</code> (uses play!)</li>
<li><a href="http://docs.scala-lang.org/overviews/core/futures.html">http://docs.scala-lang.org/overviews/core/futures.html</a></li>
</ul>
</li>
<li>Dynamic and applyDynamic
<ul>
<li><code>x.foo</code> becomes <code>x.applyDynamic("foo")</code> if <code>x</code>&#8216;s type does not define a <code>foo</code>, but is a subtype of <code>Dynamic</code></li>
<li><a href="http://docs.scala-lang.org/sips/pending/type-dynamic.html">http://docs.scala-lang.org/sips/pending/type-dynamic.html</a></li>
</ul>
</li>
<li>Dependent method types:
<ul>
<li><code>def identity(x: AnyRef): x.type = x</code> // the return type says we return exactly what we got</li>
</ul>
</li>
<li>New ByteCode emitter based on ASM
<ul>
<li>Can target JDK 1.5, 1.6 and 1.7</li>
<li>Emits 1.6 bytecode by default</li>
<li>Old 1.5 backend is deprecated</li>
</ul>
</li>
<li>A new Pattern Matcher
<ul>
<li>rewritten from scratch to generate more robust code (no more <a href="https://issues.scala-lang.org/browse/SI-1133">exponential blow-up</a>!)</li>
<li>code generation and analyses are now independent (the latter can be turned off with <code>-Xno-patmat-analysis</code>)</li>
</ul>
</li>
<li>Scaladoc Improvements
<ul>
<li>Implicits (-implicits flag)</li>
<li>Diagrams (-diagrams flag, requires graphviz)</li>
<li>Groups (-groups)</li>
</ul>
</li>
<li>Modularized Language features
<ul>
<li>Get on top of the advanced Scala features used in your codebase by explicitly importing them.</li>
<li><a href="http://docs.scala-lang.org/sips/pending/modularizing-language-features.html">http://docs.scala-lang.org/sips/pending/modularizing-language-features.html</a></li>
</ul>
</li>
<li>Parallel Collections are now configurable with custom thread pools
<ul>
<li><a href="http://docs.scala-lang.org/overviews/parallel-collections/overview.html">http://docs.scala-lang.org/overviews/parallel-collections/overview.html</a></li>
</ul>
</li>
<li>Akka Actors now part of the distribution
<ul>
<li>The original Scala actors are now deprecated.</li>
<li>See the <a href="http://docs.scala-lang.org/actors-migration/">actors migration project</a> for more information.</li>
</ul>
</li>
<li>Performance Improvements
<ul>
<li>Faster inliner</li>
<li>`Range#sum is now O(1)</li>
<li>Update of ForkJoin library</li>
<li>Fixes in immutable <code>TreeSet</code>/<code>TreeMap</code></li>
<li>Improvements to PartialFunctions</li>
</ul>
</li>
<li>Addition of <code>???</code> and <code>NotImplementedError</code></li>
<li>Addition of <code>IsTraversableOnce</code> + <code>IsTraversableLike</code> type classes for extension methods</li>
<li>Deprecations and cleanup
<ul>
<li>Floating point and octal literal syntax deprecation</li>
<li>Removed scala.dbc</li>
</ul>
</li>
</ul>
<h3 id="Experimentalfeatures">Experimental features</h3>
<p>The following exciting &#8212; experimental &#8212; features are part of 2.10.0:</p>
<ul>
<li>Scala Reflection
<ul>
<li><a href="https://docs.google.com/document/d/1Z1VhhNPplbUpaZPIYdc0_EUv5RiGQ2X4oqp0i-vz1qw/edit#heading=h.pqwdkl">https://docs.google.com/document/d/1Z1VhhNPplbUpaZPIYdc0_EUv5RiGQ2X4oqp0i-vz1qw/edit#heading=h.pqwdkl</a></li>
</ul>
</li>
<li>Macros
<ul>
<li><a href="http://docs.scala-lang.org/overviews/macros/overview.html">http://docs.scala-lang.org/overviews/macros/overview.html</a></li>
</ul>
</li>
</ul>
<p>
<hr />
That is all for this post, Scala is just one of the languages I will explore in my quest to be more of a polyglot this year. Have you looked at Scala or some other functional language like F#?</p>
<p>Edit&#8230;&#8230;.</p>
<p>And I played a little more with this and decided to do one of our <a href="http://forum.lessthandot.com/viewtopic.php?f=102&amp;t=1608">Friday the Thirteenths</a></p>
<p>Here is a solution that someone posted in Java</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="java"><thead><tr><td colspan="2"  class="head">Java</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
</pre></td><td class="de1"><pre class="de1"><span class="kw1">import</span> <span class="co2">java.text.DateFormat</span><span class="sy0">;</span>
<span class="kw1">import</span> <span class="co2">java.text.SimpleDateFormat</span><span class="sy0">;</span>
<span class="kw1">import</span> <span class="co2">java.util.Calendar</span><span class="sy0">;</span>
<span class="kw1">import</span> <span class="co2">java.util.GregorianCalendar</span><span class="sy0">;</span>
&nbsp;
<span class="kw1">public</span> <span class="kw1">class</span> Test
<span class="br0">&#123;</span>
&nbsp; &nbsp;<span class="kw1">private</span> <span class="kw1">static</span> <span class="kw1">final</span> <span class="kw3">DateFormat</span> format <span class="sy0">=</span> <span class="kw1">new</span> <span class="kw3">SimpleDateFormat</span><span class="br0">&#40;</span><span class="st0">&quot;EEE MMM dd yyyy&quot;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp;
&nbsp; &nbsp;<span class="kw1">public</span> <span class="kw1">static</span> <span class="kw4">void</span> main<span class="br0">&#40;</span><span class="kw3">String</span>... <span class="me1">args</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; <span class="kw3">GregorianCalendar</span> cal <span class="sy0">=</span> <span class="kw1">new</span> <span class="kw3">GregorianCalendar</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; <span class="kw3">GregorianCalendar</span> stopDate <span class="sy0">=</span> <span class="kw1">new</span> <span class="kw3">GregorianCalendar</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; stopDate.<span class="me1">add</span><span class="br0">&#40;</span><span class="kw3">Calendar</span>.<span class="me1">YEAR</span>, <span class="nu0">10</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp;
&nbsp; &nbsp; &nbsp; <span class="co1">// Move ahead to the next Friday</span>
&nbsp; &nbsp; &nbsp; <span class="kw1">while</span> <span class="br0">&#40;</span>cal.<span class="me1">get</span><span class="br0">&#40;</span><span class="kw3">Calendar</span>.<span class="me1">DAY_OF_WEEK</span><span class="br0">&#41;</span> <span class="sy0">!=</span> <span class="nu0">6</span><span class="br0">&#41;</span> cal.<span class="me1">add</span><span class="br0">&#40;</span><span class="kw3">Calendar</span>.<span class="me1">DATE</span>, <span class="nu0">1</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp;
&nbsp; &nbsp; &nbsp; <span class="kw1">while</span> <span class="br0">&#40;</span>cal.<span class="me1">before</span><span class="br0">&#40;</span>stopDate<span class="br0">&#41;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span class="kw1">if</span> <span class="br0">&#40;</span>cal.<span class="me1">get</span><span class="br0">&#40;</span><span class="kw3">Calendar</span>.<span class="me1">DAY_OF_MONTH</span><span class="br0">&#41;</span> <span class="sy0">==</span> <span class="nu0">13</span><span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw3">System</span>.<span class="me1">out</span>.<span class="me1">println</span><span class="br0">&#40;</span>format.<span class="me1">format</span><span class="br0">&#40;</span>cal.<span class="me1">getTime</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#41;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; cal.<span class="me1">add</span><span class="br0">&#40;</span><span class="kw3">Calendar</span>.<span class="me1">DATE</span>, <span class="nu0">7</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp; &nbsp;<span class="br0">&#125;</span>
<span class="br0">&#125;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.GregorianCalendar;
 
public class Test
{
   private static final DateFormat format = new SimpleDateFormat("EEE MMM dd yyyy");
   
   public static void main(String... args) {
      GregorianCalendar cal = new GregorianCalendar();
      GregorianCalendar stopDate = new GregorianCalendar();
      stopDate.add(Calendar.YEAR, 10);
       
      // Move ahead to the next Friday
      while (cal.get(Calendar.DAY_OF_WEEK) != 6) cal.add(Calendar.DATE, 1);
       
      while (cal.before(stopDate)) {
         if (cal.get(Calendar.DAY_OF_MONTH) == 13)
            System.out.println(format.format(cal.getTime()));
           
            cal.add(Calendar.DATE, 7);
      }
   }
}</pre></div></div>

<p>In Scala you don&#8217;t have to change that much, you can leave or take out the semicolons, here is the code</p>
<pre>object Test2 {
  
import java.text.DateFormat
import java.text.SimpleDateFormat
import java.util.Calendar
import java.util.GregorianCalendar

  def main(args: Array[String]): Unit = {}
  val DateFormat  = new SimpleDateFormat("EEE MMM dd yyyy")
  
  val cal = new GregorianCalendar()
  val stopDate = new GregorianCalendar()
  stopDate.add(Calendar.YEAR, 10);
      
  while (cal.get(Calendar.DAY_OF_WEEK) != 6) cal.add(Calendar.DATE, 1)
	 
  while (cal.before(stopDate)) {
         if (cal.get(Calendar.DAY_OF_MONTH) == 13)
            println(DateFormat.format(cal.getTime()))
           cal.add(Calendar.DATE, 7);
      
   }
		
}</pre>
<p>And here is the output</p>
<p>Fri Sep 13 2013<br />
Fri Dec 13 2013<br />
Fri Jun 13 2014<br />
Fri Feb 13 2015<br />
Fri Mar 13 2015<br />
Fri Nov 13 2015<br />
Fri May 13 2016<br />
Fri Jan 13 2017<br />
Fri Oct 13 2017<br />
Fri Apr 13 2018<br />
Fri Jul 13 2018<br />
Fri Sep 13 2019<br />
Fri Dec 13 2019<br />
Fri Mar 13 2020<br />
Fri Nov 13 2020<br />
Fri Aug 13 2021<br />
Fri May 13 2022</p>
<p>With SQL Server, you can just use a number table</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
</pre></td><td class="de1"><pre class="de1"><span class="kw1">SELECT</span> <span class="kw2">DATEADD</span><span class="br0">&#40;</span>m, number,<span class="st0">'1998-01-13'</span><span class="br0">&#41;</span>
&nbsp;<span class="kw1">FROM</span> &nbsp;master..<span class="me1">spt_values</span> <span class="kw1">WHERE</span> type <span class="sy0">=</span> <span class="st0">'P'</span>
and <span class="kw2">DATENAME</span><span class="br0">&#40;</span>dw,<span class="kw2">DATEADD</span><span class="br0">&#40;</span>m, number,<span class="st0">'1998-01-13'</span><span class="br0">&#41;</span><span class="br0">&#41;</span> <span class="sy0">=</span> <span class="st0">'friday'</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">SELECT DATEADD(m, number,'1998-01-13')
 FROM  master..spt_values WHERE type = 'P'
and DATENAME(dw,DATEADD(m, number,'1998-01-13')) = 'friday'</pre></div></div>

<p>That is really it for this post&#8230;</p>
]]></content:encoded>
			<wfw:commentRss>/index.php/enterprisedev/appserver/jee/installing-scala-2-10-on/feed/</wfw:commentRss>
		<slash:comments>1</slash:comments>
		</item>
		<item>
		<title>Java Training Day 5</title>
		<link>/index.php/enterprisedev/application-lifecycle-management/java-training-day-5/</link>
		<comments>/index.php/enterprisedev/application-lifecycle-management/java-training-day-5/#respond</comments>
		<pubDate>Sat, 01 Dec 2012 00:41:00 +0000</pubDate>
		<dc:creator><![CDATA[SQLDenis]]></dc:creator>
				<category><![CDATA[Application Lifecycle Management]]></category>
		<category><![CDATA[io]]></category>
		<category><![CDATA[java]]></category>
		<category><![CDATA[javabean]]></category>
		<category><![CDATA[jsp]]></category>
		<category><![CDATA[jvm]]></category>
		<category><![CDATA[sockets]]></category>

		<guid isPermaLink="false">/index.php/2012/11/java-training-day-5/</guid>
		<description><![CDATA[Last day of the training and I am glad it is over...this stuff is draining

Here is what was covered today

Network Programming
Low Level TCP/IP Protocols
IPv4 and IPv6
UDP Multicast
TCP/IP

Message Based protocols
HTTP
Connections framework&#8230;]]></description>
				<content:encoded><![CDATA[<p>Last day of the training and I am glad it is over&#8230;this stuff is draining</p>
<p>Here is what was covered today</p>
<p><strong>Network Programming</strong><br />
Low Level TCP/IP Protocols<br />
IPv4 and IPv6<br />
UDP Multicast<br />
TCP/IP</p>
<p>Message Based protocols<br />
HTTP<br />
Connections framework using URL (Unified Resource Locator)</p>
<p>Remote Objects<br />
RMI (Remote Method Invocation)<br />
CORBA (Common Object Request Broker Architecture)</p>
<p>Optional packages supporting additional protocols<br />
SOAP, Mail etc etc</p>
<p>We talked about port numbers, here are some common ones that you might know</p>
<p>20 &amp; 21: File Transfer Protocol (FTP)<br />
22: Secure Shell (SSH)<br />
23: Telnet remote login service<br />
25: Simple Mail Transfer Protocol (SMTP)<br />
53: Domain Name System (DNS) service<br />
80: Hypertext Transfer Protocol (HTTP)<br />
110: Post Office Protocol (POP3)<br />
119: Network News Transfer Protocol (NNTP)<br />
143: Internet Message Access Protocol (IMAP)<br />
161: Simple Network Management Protocol (SNMP)<br />
443: HTTP Secure (HTTPS)</p>
<p><strong>Threads</strong><br />
In an operating process, each running program is basically a process<br />
The operating system schedules processes for execution<br />
Each process has its own (virtual) address space<br />
Communications between processes is hampered by context switching</p>
<p>A thread is a flow of execution within a java process<br />
The JVM schedules therads for execution<br />
Threads share access to java objects<br />
Communication between threads is quick</p>
<p>On multi-CPU/multi-core machines, several threads can execute at the same time</p>
<p><strong>Executing with threads</strong><br />
One thread is started automatically to execute main()<br />
The main() method may start additional threads<br />
Single threaded applications run until main() terminates<br />
Multi threaded applications run until all threads have terminated or if one of the threads calls System.exit()</p>
<p><strong>Static methods manipulate the current thread</strong><br />
currentThread() returns a refernce to the thread that is currently executing<br />
yield() pauses the currently executing thread<br />
sleep(int ms) blocks the currently executing thread for a specific milliseconds</p>
<p><strong>Instance methods that manipulate a particular thread</strong><br />
start() starts thread execution<br />
getName() gets the name of the thread<br />
interrupt() throws an exception or sets the interrupt status<br />
join() waits for the thread to die<br />
setPriority set the priority for a thread </p>
<p>The run() method will hold the code to be executed by a thread</p>
<p>The stop(), suspend() and resume() methods are deprecated</p>
<p>Local variables are never shared between threads, threads can share memory on the heap like static variables, instance variables and members of arrays<br />
We covered synchronization, thread scheduling</p>
<p><strong>JDBC</strong><br />
WE covered the regular DB related stuff, how to connect to a DB, explanation what the 4 type of jdbc drivers are, executing, statements, prepared statements and stored procedures</p>
<p><strong>Web programming</strong><br />
We covered servlets, JSP, javabeans, struts, mvc&#8230;pretty much similar stuff I was doing in 2001 but now we have many more frameworks to makes things easier</p>
]]></content:encoded>
			<wfw:commentRss>/index.php/enterprisedev/application-lifecycle-management/java-training-day-5/feed/</wfw:commentRss>
		<slash:comments>0</slash:comments>
		</item>
		<item>
		<title>Java Training Day 4</title>
		<link>/index.php/enterprisedev/appserver/java-training-day-4/</link>
		<comments>/index.php/enterprisedev/appserver/java-training-day-4/#respond</comments>
		<pubDate>Thu, 29 Nov 2012 18:55:00 +0000</pubDate>
		<dc:creator><![CDATA[SQLDenis]]></dc:creator>
				<category><![CDATA[Application Lifecycle Management]]></category>
		<category><![CDATA[Application Server]]></category>
		<category><![CDATA[Java EE]]></category>
		<category><![CDATA[encapsulation]]></category>
		<category><![CDATA[generics]]></category>
		<category><![CDATA[inheritance]]></category>
		<category><![CDATA[java]]></category>
		<category><![CDATA[jvm]]></category>
		<category><![CDATA[polymorphism]]></category>

		<guid isPermaLink="false">/index.php/2012/11/java-training-day-4/</guid>
		<description><![CDATA[Java Day 4

The Collections Framework
Legacy Container Classes
A container is an object that holds a collection of other objects
An array is a simple container. Arrays have a couple of limitations
. The size is fixed
. All the members of the arra&#8230;]]></description>
				<content:encoded><![CDATA[<p>Today was day four of our Java training, we looked at generics, collection and IO today, here is what was covered</p>
<p><strong>The Collections Framework</strong><br />
Legacy Container Classes<br />
A container is an object that holds a collection of other objects<br />
An array is a simple container. Arrays have a couple of limitations<br />
. The size is fixed<br />
. All the members of the array must be of the same type<br />
. You can&#8217;t add methods and attributes to an array</p>
<p>The java.util package has two container classes as well as an supporting interface</p>
<p>Vector class<br />
Has add() and remove() methods, the elementAt() method let&#8217;s you retrieve an element at a specified index<br />
The Stack subclass provides the push() and pop() methods, this will support a LIFO stack</p>
<p>Hashtable class<br />
This is an expandable associative array<br />
The entries are stored as key/value pairs, no dups allowed<br />
The Properties subclass will hold the name/value pairs</p>
<p>The Enumeration interface can be used to traverse either the vector or the hashtable objects. Enumeration  has hasMoreElements() and nextElements() methods</p>
<p>Legacy Container Classes Disadvantages<br />
It is not type safe, the containers can hold any kind of objects<br />
The references must be downcast explicitly if you want to access the objects<br />
They are synchronized, performance hit<br />
Code needs to be rewritten if you want to replace one container with a container from another type</p>
<p>Vector,  Hashtable and the Enumeration interface in Java SE 5+<br />
Vector,  Hashtable and the Enumeration interface have been redefined as generics<br />
Vector is now Vector&lt;E&gt; and it implements the List&lt;E&gt;&gt; interface<br />
Hashtable  is now Hashtable &lt;K,V&gt; and implements the Map&lt;K ,V&gt; interface<br />
Enumeration  is now Enumeration &lt;E&gt;.<br />
Enumeration   has been superseded by the Iterator interface</p>
<p>The enhanced for loop (or for each loop) works automatically with the generic versions of the containers</p>
<p>Collections Framework<br />
The Collections Framework is a unified framework fo manipulating collections of objects<br />
Programmers can choose from a variety of structures</p>
<p>The collections framework consists of:</p>
<ul>
<li>Collection Interfaces &#8211; Represent different types of collections, such as sets, lists and maps. These interfaces form the basis of the framework.</li>
<li>General-purpose Implementations &#8211; Primary implementations of the collection interfaces.</li>
<li>Legacy Implementations &#8211; The collection classes from earlier releases, Vector and Hashtable, have been retrofitted to implement the collection interfaces.</li>
<li>Special-purpose Implementations &#8211; Implementations designed for use in special situations. These implementations display nonstandard performance characteristics, usage restrictions, or behavior.</li>
<li>Concurrent Implementations &#8211; Implementations designed for highly concurrent use.<br />
Wrapper Implementations &#8211; Add functionality, such as synchronization, to other implementations.</li>
<li>Convenience Implementations &#8211; High-performance &#8220;mini-implementations&#8221; of the collection interfaces.</li>
<li>Abstract Implementations &#8211; Partial implementations of the collection interfaces to facilitate custom implementations.</li>
<li>Algorithms &#8211; Static methods that perform useful functions on collections, such as sorting a list.</li>
<li>Infrastructure &#8211; Interfaces that provide essential support for the collection interfaces.</li>
<li>Array Utilities &#8211; Utility functions for arrays of primitives and reference objects. Not, strictly speaking, a part of the Collections Framework, this functionality was added to the Java platform at the same time and relies on some of the same infrastructure.</li>
</ul>
<p>Collection Implementations<br />
The general purpose implementations are summarized in the table below:</p>
<div class="tables">
<table border="0">
<thead>
<tr>
<th colspan="2" rowspan="2" align="center" border="0">&nbsp;</th>
<th colspan="5"><font size="+1">Implementations</font></th>
</tr>
<tr>
<th>Hash Table</th>
<th>Resizable Array</th>
<th>Balanced Tree</th>
<th>Linked List</th>
<th>Hash Table + Linked List</th>
</tr>
<tr>
<th rowspan="4"><font size="+1">Interfaces</font></th>
<th>Set</th>
<td><a href=
"http://docs.oracle.com/javase/6/docs/api/java/utilhttp://docs.oracle.com/javase/6/docs/api/java/util/HashSet.html"><tt>HashSet</tt></a></td>
<td>&nbsp;</td>
<td><a href=
"http://docs.oracle.com/javase/6/docs/api/java/utilhttp://docs.oracle.com/javase/6/docs/api/java/util/TreeSet.html"><tt>TreeSet</tt></a></td>
<td>&nbsp;</td>
<td><a href=
"http://docs.oracle.com/javase/6/docs/api/java/utilhttp://docs.oracle.com/javase/6/docs/api/java/util/LinkedHashSet.html"><tt>LinkedHashSet</tt></a></td>
</tr>
<tr>
<th>List</th>
<td>&nbsp;</td>
<td><a href=
"http://docs.oracle.com/javase/6/docs/api/java/utilhttp://docs.oracle.com/javase/6/docs/api/java/util/ArrayList.html"><tt>ArrayList</tt></a></td>
<td>&nbsp;</td>
<td><a href=
"http://docs.oracle.com/javase/6/docs/api/java/utilhttp://docs.oracle.com/javase/6/docs/api/java/util/LinkedList.html"><tt>LinkedList</tt></a></td>
<td>&nbsp;</td>
</tr>
<tr>
<th>Deque</th>
<td>&nbsp;</td>
<td><a href=
"http://docs.oracle.com/javase/6/docs/api/java/utilhttp://docs.oracle.com/javase/6/docs/api/java/util/ArrayDeque.html"><tt>ArrayDeque</tt></a></td>
<td>&nbsp;</td>
<td><a href=
"http://docs.oracle.com/javase/6/docs/api/java/utilhttp://docs.oracle.com/javase/6/docs/api/java/util/LinkedList.html"><tt>LinkedList</tt></a></td>
<td>&nbsp;</td>
</tr>
<tr>
<th>Map</th>
<td><a href=
"http://docs.oracle.com/javase/6/docs/api/java/utilhttp://docs.oracle.com/javase/6/docs/api/java/util/HashMap.html"><tt>HashMap</tt></a></td>
<td>&nbsp;</td>
<td><a href=
"http://docs.oracle.com/javase/6/docs/api/java/utilhttp://docs.oracle.com/javase/6/docs/api/java/util/TreeMap.html"><tt>TreeMap</tt></a></td>
<td>&nbsp;</td>
<td><a href=
"http://docs.oracle.com/javase/6/docs/api/java/utilhttp://docs.oracle.com/javase/6/docs/api/java/util/LinkedHashMap.html"><tt>LinkedHashMap</tt></a></td>
</tr>
</thead>
</table>
</div>
<p>Code to the interface, not to the class, you can now change the container without having to make code changes</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="java"><thead><tr><td colspan="2"  class="head">Java</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
</pre></td><td class="de1"><pre class="de1">ArrayList<span class="sy0">&lt;</span>Integer<span class="sy0">&gt;</span> &nbsp; list &nbsp;<span class="sy0">=</span> <span class="kw1">new</span> ArrayList<span class="sy0">&lt;</span>Integer<span class="sy0">&gt;</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
LinkedList<span class="sy0">&lt;</span>Integer<span class="sy0">&gt;</span> &nbsp;list <span class="sy0">=</span> &nbsp;<span class="kw1">new</span> LinkedList<span class="sy0">&lt;</span>Integer<span class="sy0">&gt;</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">ArrayList&lt;Integer&gt;   list  = new ArrayList&lt;Integer&gt;();
LinkedList&lt;Integer&gt;  list =  new LinkedList&lt;Integer&gt;();</pre></div></div>


<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="java"><thead><tr><td colspan="2"  class="head">Java</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
</pre></td><td class="de1"><pre class="de1">List<span class="sy0">&lt;</span>Integer<span class="sy0">&gt;</span> list &nbsp;<span class="sy0">=</span> <span class="kw1">new</span> ArrayList<span class="sy0">&lt;</span>Integer<span class="sy0">&gt;</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
List<span class="sy0">&lt;</span>Integer<span class="sy0">&gt;</span> list <span class="sy0">=</span> &nbsp;<span class="kw1">new</span> LinkedList<span class="sy0">&lt;</span>Integer<span class="sy0">&gt;</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">List&lt;Integer&gt; list  = new ArrayList&lt;Integer&gt;();
List&lt;Integer&gt; list =  new LinkedList&lt;Integer&gt;();</pre></div></div>

<p>There is a tutorial availabe on the Oracle website here: http://docs.oracle.com/javase/tutorial/collections/index.html</p>
<p><strong>Exceptions</strong></p>
<p>Traditional<br />
Inefficient, checks must be done even if stuff doesn&#8217;t blow up<br />
Difficult to maintain<br />
Using a return value as both an output value and an error status is confusing<br />
Compiler does not enforce error checking</p>
<p>Using Exceptions<br />
Compiler can enforce proper exception handling<br />
Exception is caught by a block designed to handle the exception<br />
Errors cause by constructors, initializers and other code that doesn&#8217;t return a return value</p>
<p>All exceptions objects are subclasses of java.lang.Throwable and they inherit its methods<br />
Error, Exception and RuntimeException are treated differently by the compiler<br />
Error, this mean as major system-level error occured<br />
RuntimeException , logic or data validateion error that should have been found and fixed during development<br />
Exception, run-time problems like a file that can&#8217;t be found or a network problem</p>
<p>A program can catch exceptions by using a combination of the try, catch, and finally blocks.</p>
<p>The try block identifies a block of code in which an exception can occur.<br />
The catch block identifies a block of code, known as an exception handler, that can handle a particular type of exception.<br />
The finally block identifies a block of code that is guaranteed to execute, and is the right place to close files, recover resources, and otherwise clean up after the code enclosed in the try block.</p>
<p><strong>Assert</strong><br />
This was added in Java 1.4, it is a simple way to check run-time conditions and throw exceptions when you are debugging code<br />
It can be enabled or disabled at runtime, by default they are disabled, use the -ea switch from the command line to enable it. Since Java doesn&#8217;t have a preprocessor this would be a way to do testing without having to modify the code</p>
<p><strong>Input/Output</strong><br />
We looked at IO and the different IO classes to work with files, streams sockets etc etc</p>
<p>Here is a list of the I/O Streams</p>
<p>Byte Streams<br />
handle I/O of raw binary data.</p>
<p>Character Streams<br />
handle I/O of character data, automatically handling translation to and from the local character set.</p>
<p>Buffered Streams<br />
optimize input and output by reducing the number of calls to the native API.</p>
<p>Scanning and Formatting<br />
allows a program to read and write formatted text.</p>
<p>I/O from the Command Line<br />
describes the Standard Streams and the Console object.</p>
<p>Data Streams<br />
handle binary I/O of primitive data type and String values.</p>
<p>Object Streams<br />
handle binary I/O of objects.</p>
<p>That is all for today</p>
]]></content:encoded>
			<wfw:commentRss>/index.php/enterprisedev/appserver/java-training-day-4/feed/</wfw:commentRss>
		<slash:comments>0</slash:comments>
		</item>
	</channel>
</rss>
