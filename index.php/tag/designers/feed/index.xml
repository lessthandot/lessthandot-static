<?xml version="1.0" encoding="UTF-8"?><rss version="2.0"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:atom="http://www.w3.org/2005/Atom"
	xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
	xmlns:slash="http://purl.org/rss/1.0/modules/slash/"
	>

<channel>
	<title>designers &#8211; LessthanDot</title>
	<atom:link href="/index.php/tag/designers/feed/" rel="self" type="application/rss+xml" />
	<link>/</link>
	<description>A Technical Community for IT Professionals</description>
	<lastBuildDate>Sat, 09 Mar 2019 12:50:36 +0000</lastBuildDate>
	<language>en-US</language>
	<sy:updatePeriod>hourly</sy:updatePeriod>
	<sy:updateFrequency>1</sy:updateFrequency>
	<generator>https://wordpress.org/?v=4.6.1</generator>
	<item>
		<title>SQL Advent 2012: Recap</title>
		<link>/index.php/datamgmt/dbprogramming/sql-advent-2012-recap/</link>
		<comments>/index.php/datamgmt/dbprogramming/sql-advent-2012-recap/#respond</comments>
		<pubDate>Tue, 25 Dec 2012 09:28:00 +0000</pubDate>
		<dc:creator><![CDATA[SQLDenis]]></dc:creator>
				<category><![CDATA[Business Intelligence]]></category>
		<category><![CDATA[Database Programming]]></category>
		<category><![CDATA[Microsoft SQL Server]]></category>
		<category><![CDATA[Microsoft SQL Server Admin]]></category>
		<category><![CDATA[ddl]]></category>
		<category><![CDATA[designers]]></category>
		<category><![CDATA[sql advent 2012]]></category>
		<category><![CDATA[sql server 2008]]></category>
		<category><![CDATA[sql server 2008 r2]]></category>
		<category><![CDATA[sql server 2012]]></category>
		<category><![CDATA[ssms]]></category>

		<guid isPermaLink="false">/index.php/2012/12/sql-advent-2012-recap/</guid>
		<description><![CDATA[A recap of all the SQL Advent 2012 posts]]></description>
				<content:encoded><![CDATA[<p>Another year, another SQL Advent calendar has come to an end. This year there was not much SQL code after day 10, I still hope you found it interesting and useful. Here is a list off all the posts with a little blurb about them.</p>
<p>SQL Advent 2012 Day 24: <a href="/index.php/DataMgmt/DBProgramming/MSSQLServer/getting-help">Getting help</a><br />
In this post I showed you where to get help and how to use twitter to get some help</p>
<p>SQL Advent 2012 Day 23: <a href="/index.php/DataMgmt/business-intelligence-1/get-the-tools-you-need">Get the tools you need to be more productive</a><br />
In this post I tried to show you that tools will pay for themselves</p>
<p>SQL Advent 2012 Day 22: <a href="/index.php/DataMgmt/business-intelligence-1/testing-your-backup-and-failover">Testing your backup and failover strategy</a><br />
This post was all about the importance of testing your backup and failover strategy</p>
<p>SQL Advent 2012 Day 21: <a href="/index.php/DataMgmt/DBAdmin/MSSQLServerAdmin/with-vldbs-it-matters-what">With VLDBs it matters what you do and how you do it</a><br />
With little databases you can get away with doing stupid stuff, with large databases not so much</p>
<p>SQL Advent 2012 Day 20: <a href="/index.php/DataMgmt/business-intelligence-1/use-the-new-features">Use the new features</a><br />
This post detailed why it was important to use the features and functionality</p>
<p>SQL Advent 2012 Day 19: <a href="/index.php/DataMgmt/DBProgramming/how-to-improve-your-tech">How to improve your tech skills</a><br />
The post showed you a couple of ways to improve your tech skills</p>
<p>SQL Advent 2012 Day 18: <a href="/index.php/DataMgmt/DBAdmin/MSSQLServerAdmin/stay-relevant-and-marketable">Stay relevant and marketable</a><br />
If you don&#8217;t keep up, you will lose</p>
<p>SQL Advent 2012 Day 17: <a href="/index.php/DataMgmt/business-intelligence-1/no-matter-how-long-you">No matter how long you are on the wrong path, go back</a><br />
Sometimes it is better to start from scratch than continue down the wrong path</p>
<p>SQL Advent 2012 Day 16: <a href="/index.php/DataMgmt/DataDesign/lack-of-database-design-and">Lack of database design and normalization</a><br />
We don&#8217;t need no stinking keys</p>
<p>SQL Advent 2012 Day 15: <a href="/index.php/DataMgmt/DBAdmin/MSSQLServerAdmin/benefits-of-indexes">Benefits of Indexes</a><br />
Why do we need indexes and what purpose do they serve?</p>
<p>SQL Advent 2012 Day 14: <a href="/index.php/DataMgmt/business-intelligence-1/when-to-say-no">When to say no</a><br />
Sometines you have to say no&#8230;.even to your boss</p>
<p>SQL Advent 2012 Day 13: <a href="/index.php/DataMgmt/DBAdmin/MSSQLServerAdmin/features-enabled-that-are-not">Features enabled that are not used</a><br />
Disable and shutdown services and feature that are not used</p>
<p>SQL Advent 2012 Day 12: <a href="/index.php/DataMgmt/DBAdmin/MSSQLServerAdmin/proactive-notifications">Proactive notifications</a><br />
Get notified before the client or your boss about errors</p>
<p>SQL Advent 2012 Day 11: <a href="/index.php/DataMgmt/DBProgramming/MSSQLServer/cursors-and-loops">Cursors and loops</a><br />
Cursors are almost always evil</p>
<p>SQL Advent 2012 Day 10: <a href="/index.php/DataMgmt/business-intelligence-1/sql-server-maintenance">SQL Server Maintenance</a><br />
Maintenance is unfortunately required, machines and software are not completely autotuned yet</p>
<p>SQL Advent 2012 Day 9: <a href="/index.php/DataMgmt/DBProgramming/MSSQLServer/sql-advent-2012-day-10">Reinventing the wheel</a><br />
Why write something if it already exist</p>
<p>SQL Advent 2012 Day 8: <a href="/index.php/DataMgmt/DBProgramming/MSSQLServer/foreign-keys">Foreign Keys</a><br />
A small post showing that you don&#8217;t always need a primary key for a foreign key</p>
<p>SQL Advent 2012 Day 7: <a href="/index.php/DataMgmt/DBAdmin/MSSQLServerAdmin/lack-of-constraints">Lack of constraints</a><br />
Constraints in a database guarantee data integrity</p>
<p>SQL Advent 2012 Day 6: <a href="/index.php/DataMgmt/DBProgramming/standardized-naming-and-other-conventions">Standardized Naming And Other Conventions</a><br />
If you have a standard, everything will be easier</p>
<p>SQL Advent 2012 Day 5: <a href="/index.php/DataMgmt/DBAdmin/MSSQLServerAdmin/do-not-trust-the-ssms">Do not trust the SSMS designers</a><br />
SOmetimes a simple click can cause a lot of data to be moved behind the scenes</p>
<p>SQL Advent 2012 Day 4: <a href="/index.php/DataMgmt/DBProgramming/triggers-what-to-do-what">Triggers, what to do, what not to do</a><br />
Some best practices around triggers</p>
<p>SQL Advent 2012 Day 3: <a href="/index.php/DataMgmt/DBProgramming/sargable-queries">Sargable Queries</a><br />
How to write queries that will take advantage of indexes</p>
<p>SQL Advent 2012 Day 2: <a href="/index.php/DataMgmt/DBProgramming/data-typeshttp:///index.php/DataMgmt/DBProgramming/data-types">Data types storage differences</a><br />
Make sure you know the difference between the different data types and how they are stored</p>
<p>SQL Advent 2012 Day 1: <a href="/index.php/DataMgmt/DBAdmin/MSSQLServerAdmin/sizing-database-files">Sizing database files</a><br />
You have to presize your databases if you want optimal performance</p>
]]></content:encoded>
			<wfw:commentRss>/index.php/datamgmt/dbprogramming/sql-advent-2012-recap/feed/</wfw:commentRss>
		<slash:comments>0</slash:comments>
		</item>
		<item>
		<title>SQL Advent 2012 Day 6: Standardized Naming And Other Conventions</title>
		<link>/index.php/datamgmt/dbprogramming/standardized-naming-and-other-conventions/</link>
		<comments>/index.php/datamgmt/dbprogramming/standardized-naming-and-other-conventions/#comments</comments>
		<pubDate>Thu, 06 Dec 2012 09:36:00 +0000</pubDate>
		<dc:creator><![CDATA[SQLDenis]]></dc:creator>
				<category><![CDATA[Business Intelligence]]></category>
		<category><![CDATA[Database Programming]]></category>
		<category><![CDATA[Microsoft SQL Server]]></category>
		<category><![CDATA[Microsoft SQL Server Admin]]></category>
		<category><![CDATA[conventions]]></category>
		<category><![CDATA[ddl]]></category>
		<category><![CDATA[designers]]></category>
		<category><![CDATA[sql advent 2012]]></category>
		<category><![CDATA[sql server 2008]]></category>
		<category><![CDATA[sql server 2008 r2]]></category>
		<category><![CDATA[sql server 2012]]></category>
		<category><![CDATA[ssms]]></category>

		<guid isPermaLink="false">/index.php/2012/12/standardized-naming-and-other-conventions/</guid>
		<description><![CDATA[Every company needs to have standards that developers need to follow in order to make maintenance easier down the road. There are several things that you can standardize on:

The naming of objects
The layout of code including comments
The way that e&#8230;]]></description>
				<content:encoded><![CDATA[<p>This is day six of the <a href="/index.php/DataMgmt/DBProgramming/sql-advent-2012-here-is">SQL Advent 2012 series</a> of blog posts. Today we are going to look at standardized naming conventions and other conventions that you should standardize as well. Every company needs to have standards that developers need to follow in order to make maintenance easier down the road. There are several things that you can standardize on, here are just a few:</p>
<p>The naming of objects<br />
The layout of code including comments<br />
The way that error handling is done</p>
<p>
<h2>The naming of objects</h2>
<p>I am not a fan of underscores and we tend to name our objects CamelCased<br />
Stored procedures are usually prefixed with usp_ or pr but never sp_<br />
I also wrote about about this in the using the <a href="/index.php/DataMgmt/DataDesign/iso-11179-naming-conventions">ISO-11179 Naming Conventions</a> post<br />
Never use Hungarian notation on column names or variables, I have worked with tables that looked like this</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
</pre></td><td class="de1"><pre class="de1"><span class="kw1">CREATE</span> <span class="kw1">TABLE</span> tblEmployee<span class="br0">&#40;</span>
strFirstName <span class="kw1">varchar</span><span class="br0">&#40;</span><span class="nu0">255</span><span class="br0">&#41;</span>,
strLastName <span class="kw1">varchar</span><span class="br0">&#40;</span><span class="nu0">255</span><span class="br0">&#41;</span>,
intAge&nbsp; <span class="kw1">int</span>,
dtmBirthDate <span class="kw1">datetime</span>
.......
.......
<span class="br0">&#41;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">CREATE TABLE tblEmployee(
strFirstName varchar(255),
strLastName varchar(255),
intAge	int,
dtmBirthDate datetime
.......
.......
)</pre></div></div>

<p>If you have intellisense in SSMS, having every table start with tbl is making it pretty useless. Also sometimes the data type of a column will change but of course nobody goes back to rename the column to reflect this because it will break code all over the place</p>
<p>Instead of </p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
</pre></td><td class="de1"><pre class="de1"><span class="co1">-- the salary for the employee</span>
<span class="kw1">declare</span> @decValue <span class="kw1">decimal</span><span class="br0">&#40;</span><span class="nu0">20</span>,<span class="nu0">2</span><span class="br0">&#41;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">-- the salary for the employee
declare @decValue decimal(20,2)</pre></div></div>

<p>It would be better to have something like the following</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
</pre></td><td class="de1"><pre class="de1"><span class="kw1">declare</span> @EmployeeSalary <span class="kw1">decimal</span><span class="br0">&#40;</span><span class="nu0">20</span>,<span class="nu0">2</span><span class="br0">&#41;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">declare @EmployeeSalary decimal(20,2)</pre></div></div>

<p>Now I don&#8217;t have to scroll all the way to the top to figure out what is actually stored in this variable, EmployeeSalary pretty much describes what it is and I can also pretty much assume that this will be some amount and not a date as well</p>
<p>
<h2>The layout of code including comments</h2>
<p>I have worked with code that was all in lowercase and all in uppercase. I have no problem with either but if you at least standardize on one or the other it will be a little easier to jump from your code to someone else&#8217;s code<br />
You can setup standard templates in SSMS for your organization, you can get to it from the menu bar, View&#8211;> Template Explorer or hit CTRL + ALT + T</p>
<p>Now expand the Stored Procedures folder</p>
<div class="image_block"><a href="/wp-content/uploads/blogs/DataMgmt/Denis/ADvent/TemplateBrowserProcs.PNG?mtime=1354732944"><img alt="SSMS Template Browser Stored Procedures Folder Expanded" src="/wp-content/uploads/blogs/DataMgmt/Denis/ADvent/TemplateBrowserProcs.PNG?mtime=1354732944" width="254" height="292" /></a></div>
<p>The basic stored procedure template looks like this</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
</pre></td><td class="de1"><pre class="de1"><span class="co1">-- =============================================</span>
<span class="co1">-- Create basic stored procedure template</span>
<span class="co1">-- =============================================</span>
&nbsp;
<span class="co1">-- Drop stored procedure if it already exists</span>
<span class="kw1">IF</span> <span class="sy0">EXISTS</span> <span class="br0">&#40;</span>
&nbsp; <span class="kw1">SELECT</span> <span class="sy0">*</span> 
&nbsp; &nbsp; <span class="kw1">FROM</span> <span class="sy0">IN</span>F<span class="sy0">OR</span>MATION_SCHEMA.<span class="me1">ROUTINES</span> 
&nbsp; &nbsp;<span class="kw1">WHERE</span> SPECIFIC_SCHEMA <span class="sy0">=</span> N<span class="st0">'&lt;Schema_Name, sysname, Schema_Name&gt;'</span>
&nbsp; &nbsp; &nbsp;<span class="sy0">AND</span> SPECIFIC_NAME <span class="sy0">=</span> N<span class="st0">'&lt;Procedure_Name, sysname, Procedure_Name&gt;'</span> 
<span class="br0">&#41;</span>
&nbsp; &nbsp;<span class="kw1">DROP</span> <span class="kw1">PROCEDURE</span> <span class="sy0">&lt;</span>Schema_Name, sysname, Schema_Name<span class="sy0">&gt;</span>.<span class="sy0">&lt;</span>Procedure_Name, sysname, Procedure_Name<span class="sy0">&gt;</span>
GO
&nbsp;
<span class="kw1">CREATE</span> <span class="kw1">PROCEDURE</span> <span class="sy0">&lt;</span>Schema_Name, sysname, Schema_Name<span class="sy0">&gt;</span>.<span class="sy0">&lt;</span>Procedure_Name, sysname, Procedure_Name<span class="sy0">&gt;</span>
&nbsp; &nbsp; <span class="sy0">&lt;</span>@param1, sysname, @p1<span class="sy0">&gt;</span> <span class="sy0">&lt;</span>datatype_for_param1, , int<span class="sy0">&gt;</span> <span class="sy0">=</span> <span class="sy0">&lt;</span>default_value_for_param1, , <span class="nu0">0</span><span class="sy0">&gt;</span>, 
&nbsp; &nbsp; <span class="sy0">&lt;</span>@param2, sysname, @p2<span class="sy0">&gt;</span> <span class="sy0">&lt;</span>datatype_for_param2, , int<span class="sy0">&gt;</span> <span class="sy0">=</span> <span class="sy0">&lt;</span>default_value_for_param2, , <span class="nu0">0</span><span class="sy0">&gt;</span>
<span class="kw1">AS</span>
&nbsp; &nbsp; <span class="kw1">SELECT</span> @p1, @p2
GO
&nbsp;
<span class="co1">-- =============================================</span>
<span class="co1">-- Example to execute the stored procedure</span>
<span class="co1">-- =============================================</span>
<span class="kw1">EXECUTE</span> <span class="sy0">&lt;</span>Schema_Name, sysname, Schema_Name<span class="sy0">&gt;</span>.<span class="sy0">&lt;</span>Procedure_Name, sysname, Procedure_Name<span class="sy0">&gt;</span> <span class="sy0">&lt;</span>value_for_param1, , <span class="nu0">1</span><span class="sy0">&gt;</span>, <span class="sy0">&lt;</span>value_for_param2, , <span class="nu0">2</span><span class="sy0">&gt;</span>
GO</pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">-- =============================================
-- Create basic stored procedure template
-- =============================================

-- Drop stored procedure if it already exists
IF EXISTS (
  SELECT * 
    FROM INFORMATION_SCHEMA.ROUTINES 
   WHERE SPECIFIC_SCHEMA = N'&lt;Schema_Name, sysname, Schema_Name&gt;'
     AND SPECIFIC_NAME = N'&lt;Procedure_Name, sysname, Procedure_Name&gt;' 
)
   DROP PROCEDURE &lt;Schema_Name, sysname, Schema_Name&gt;.&lt;Procedure_Name, sysname, Procedure_Name&gt;
GO

CREATE PROCEDURE &lt;Schema_Name, sysname, Schema_Name&gt;.&lt;Procedure_Name, sysname, Procedure_Name&gt;
	&lt;@param1, sysname, @p1&gt; &lt;datatype_for_param1, , int&gt; = &lt;default_value_for_param1, , 0&gt;, 
	&lt;@param2, sysname, @p2&gt; &lt;datatype_for_param2, , int&gt; = &lt;default_value_for_param2, , 0&gt;
AS
	SELECT @p1, @p2
GO

-- =============================================
-- Example to execute the stored procedure
-- =============================================
EXECUTE &lt;Schema_Name, sysname, Schema_Name&gt;.&lt;Procedure_Name, sysname, Procedure_Name&gt; &lt;value_for_param1, , 1&gt;, &lt;value_for_param2, , 2&gt;
GO</pre></div></div>

<p>You can modify this template, give it to every developer and now you all have the same template. What can be done with templates can also be done with snippets, if you do Tools&#8211;>Code Snippets Manager, you can see all the snippets that are available, you can add your own snippets so that all developers will have the same snippets for comment tasks.</p>
<p>Standardize on comments as well<br />
<br />
<h2>The way that error handling is done</h2>
<p>I like to have all the errors in one place, this way I know where to look if there are errors. Capture the proc or trigger that threw the error, it if is a multi-step proc then also note the code section in the proc, this will greatly reduce the time it will take you to pinpoint where the problem is. Michelle Ufford has a nice example here: <a href="http://sqlfool.com/2008/12/error-handling-in-t-sql/">Error Handling in T-SQL</a> that you can use and implement in your own shop.</p>
<p>There are many more things that you need to standardize on, the thing that bothers me the most is when I see dates in all kind of formats when passed in as strings, use YYYYMMDD, this will make it non ambiguous.</p>
<p>That is all for day six of the <a href="/index.php/DataMgmt/DBProgramming/sql-advent-2012-here-is">SQL Advent 2012 series</a>, come back tomorrow for the next one, you can also check out all the posts from last year here: <a href="/index.php/DataMgmt/DataDesign/sql-advent-2011-recap">SQL Advent 2011 Recap</a></p>
]]></content:encoded>
			<wfw:commentRss>/index.php/datamgmt/dbprogramming/standardized-naming-and-other-conventions/feed/</wfw:commentRss>
		<slash:comments>3</slash:comments>
		</item>
		<item>
		<title>SQL Advent 2012 Day 5: Do not trust the SSMS designers</title>
		<link>/index.php/datamgmt/dbprogramming/do-not-trust-the-ssms/</link>
		<comments>/index.php/datamgmt/dbprogramming/do-not-trust-the-ssms/#comments</comments>
		<pubDate>Wed, 05 Dec 2012 12:54:00 +0000</pubDate>
		<dc:creator><![CDATA[SQLDenis]]></dc:creator>
				<category><![CDATA[Business Intelligence]]></category>
		<category><![CDATA[Database Administration]]></category>
		<category><![CDATA[Database Programming]]></category>
		<category><![CDATA[Microsoft SQL Server]]></category>
		<category><![CDATA[Microsoft SQL Server Admin]]></category>
		<category><![CDATA[ddl]]></category>
		<category><![CDATA[designers]]></category>
		<category><![CDATA[sql advent 2012]]></category>
		<category><![CDATA[sql server 2008]]></category>
		<category><![CDATA[sql server 2008 r2]]></category>
		<category><![CDATA[sql server 2012]]></category>
		<category><![CDATA[ssms]]></category>

		<guid isPermaLink="false">/index.php/2012/12/do-not-trust-the-ssms/</guid>
		<description><![CDATA[Today we are going to look at why you need to be able to write your own DDL statements.

Read the following two lines, have you ever answered that or has anyone every answered that when asked this question?

Question: How do you add a primary key to a table?
Answer: I click on the yellow key icon in SSMS!]]></description>
				<content:encoded><![CDATA[<p>This is day five of the <a href="/index.php/DataMgmt/DBProgramming/sql-advent-2012-here-is">SQL Advent 2012 series</a> of blog posts. Today we are going to look at why you need to be able to write your own DDL statements.</p>
<p>Read the following two lines, have you ever answered that or has anyone every answered that when asked this question?</p>
<p>Question: How do you add a primary key to a table?<br />
Answer: I click on the yellow key icon in SSMS!</p>
<p>Technically, yes, that will create a primary key on the table but what will happen when you do that? Let&#8217;s take a look at some examples.</p>
<p>First create this very simple table</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
</pre></td><td class="de1"><pre class="de1"><span class="kw1">CREATE</span> <span class="kw1">TABLE</span> TestInt<span class="br0">&#40;</span>Col1 <span class="kw1">tinyint</span> not null<span class="br0">&#41;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">CREATE TABLE TestInt(Col1 tinyint not null)</pre></div></div>

<p>Now they users changed their mind and want to insert values that go beyond what a tinyint can hold. If you try to insert 300, you will get an error</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
</pre></td><td class="de1"><pre class="de1"><span class="kw1">INSERT</span> TestInt <span class="kw1">VALUES</span><span class="br0">&#40;</span><span class="nu0">300</span><span class="br0">&#41;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">INSERT TestInt VALUES(300)</pre></div></div>

<p>Msg 220, Level 16, State 2, Line 2<br />
Arithmetic overflow error for data type tinyint, value = 300.<br />
The statement has been terminated.</p>
<p>No, problem, I will just change the data type</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
</pre></td><td class="de1"><pre class="de1"><span class="kw1">ALTER</span> <span class="kw1">TABLE</span> TestInt <span class="kw1">ALTER</span> <span class="kw1">COLUMN</span> Col1 <span class="kw1">int</span> <span class="sy0">NOT</span> <span class="sy0">NULL</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">ALTER TABLE TestInt ALTER COLUMN Col1 int NOT NULL</pre></div></div>

<p>But what if you use the SSMS designer by right clicking on the table, choosing design and then changing the data type from tinyint to int? Here is what SSMS will do behind the scenes for you</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
</pre></td><td class="de1"><pre class="de1"><span class="coMULTI">/* To prevent any potential data loss issues, you should review this script in detail before running it outside the context of the database designer.*/</span>
<span class="kw1">BEGIN</span> <span class="kw1">TRANSACTION</span>
<span class="kw1">SET</span> QUOTED_IDENTIFIER <span class="kw1">ON</span>
<span class="kw1">SET</span> ARITHAB<span class="sy0">OR</span>T <span class="kw1">ON</span>
<span class="kw1">SET</span> NUMERIC_ROUNDAB<span class="sy0">OR</span>T <span class="kw1">OFF</span>
<span class="kw1">SET</span> CONCAT_<span class="sy0">NULL</span>_YIELDS_<span class="sy0">NULL</span> <span class="kw1">ON</span>
<span class="kw1">SET</span> ANSI_<span class="sy0">NULL</span>S <span class="kw1">ON</span>
<span class="kw1">SET</span> ANSI_PADD<span class="sy0">IN</span>G <span class="kw1">ON</span>
<span class="kw1">SET</span> ANSI_WARN<span class="sy0">IN</span>GS <span class="kw1">ON</span>
<span class="kw1">COMMIT</span>
<span class="kw1">BEGIN</span> <span class="kw1">TRANSACTION</span>
GO
<span class="kw1">CREATE</span> <span class="kw1">TABLE</span> dbo.<span class="me1">Tmp_TestInt</span>
&nbsp; &nbsp; <span class="br0">&#40;</span>
&nbsp; &nbsp; Col1 <span class="kw1">int</span> <span class="sy0">NULL</span>
&nbsp; &nbsp; <span class="br0">&#41;</span> &nbsp;<span class="kw1">ON</span> <span class="br0">&#91;</span><span class="kw1">PRIMARY</span><span class="br0">&#93;</span>
GO
<span class="kw1">ALTER</span> <span class="kw1">TABLE</span> dbo.<span class="me1">Tmp_TestInt</span> <span class="kw1">SET</span> <span class="br0">&#40;</span>LOCK_ESCALATION <span class="sy0">=</span> <span class="kw1">TABLE</span><span class="br0">&#41;</span>
GO
<span class="kw1">IF</span> <span class="sy0">EXISTS</span><span class="br0">&#40;</span><span class="kw1">SELECT</span> <span class="sy0">*</span> <span class="kw1">FROM</span> dbo.<span class="me1">TestInt</span><span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp;<span class="kw1">EXEC</span><span class="br0">&#40;</span><span class="st0">'INSERT INTO dbo.Tmp_TestInt (Col1)</span>
<span class="st0">&nbsp; &nbsp; &nbsp; &nbsp; SELECT CONVERT(int, Col1) FROM dbo.TestInt WITH (HOLDLOCK TABLOCKX)'</span><span class="br0">&#41;</span>
GO
<span class="kw1">DROP</span> <span class="kw1">TABLE</span> dbo.<span class="me1">TestInt</span>
GO
<span class="kw1">EXECUTE</span> <span class="kw3">sp_rename</span> N<span class="st0">'dbo.Tmp_TestInt'</span>, N<span class="st0">'TestInt'</span>, <span class="st0">'OBJECT'</span> 
GO
<span class="kw1">COMMIT</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">/* To prevent any potential data loss issues, you should review this script in detail before running it outside the context of the database designer.*/
BEGIN TRANSACTION
SET QUOTED_IDENTIFIER ON
SET ARITHABORT ON
SET NUMERIC_ROUNDABORT OFF
SET CONCAT_NULL_YIELDS_NULL ON
SET ANSI_NULLS ON
SET ANSI_PADDING ON
SET ANSI_WARNINGS ON
COMMIT
BEGIN TRANSACTION
GO
CREATE TABLE dbo.Tmp_TestInt
	(
	Col1 int NULL
	)  ON [PRIMARY]
GO
ALTER TABLE dbo.Tmp_TestInt SET (LOCK_ESCALATION = TABLE)
GO
IF EXISTS(SELECT * FROM dbo.TestInt)
	 EXEC('INSERT INTO dbo.Tmp_TestInt (Col1)
		SELECT CONVERT(int, Col1) FROM dbo.TestInt WITH (HOLDLOCK TABLOCKX)')
GO
DROP TABLE dbo.TestInt
GO
EXECUTE sp_rename N'dbo.Tmp_TestInt', N'TestInt', 'OBJECT' 
GO
COMMIT</pre></div></div>

<p>That is right, it will create a new table, dump all the rows into this table, drop the original table and then rename the table that was just created to match the orginal table. This is overkill.</p>
<p>What about adding some defaults to the table, if you use the SSMS table designer, it will just create those and you have no way to specify a name for the default.</p>
<p>Here is how to create a default with T-SQL, now you can specify a name and make sure it matches your shop&#8217;s naming convention</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
</pre></td><td class="de1"><pre class="de1"><span class="kw1">ALTER</span> <span class="kw1">TABLE</span> dbo.<span class="me1">TestInt</span> <span class="kw1">ADD</span> <span class="kw1">CONSTRAINT</span>
&nbsp; &nbsp; DF_TestInt_Col1 <span class="kw1">DEFAULT</span> <span class="nu0">1</span> <span class="kw1">FOR</span> Col1</pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">ALTER TABLE dbo.TestInt ADD CONSTRAINT
	DF_TestInt_Col1 DEFAULT 1 FOR Col1</pre></div></div>

<p>About that yellow key icon, let&#8217;s add a primary key to our table, I can do the following with T-SQL, I can also make it non clustered if I want to</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
</pre></td><td class="de1"><pre class="de1"><span class="kw1">ALTER</span> <span class="kw1">TABLE</span> dbo.<span class="me1">TestInt</span> <span class="kw1">ADD</span> <span class="kw1">CONSTRAINT</span>
&nbsp; &nbsp; PK_TestInt <span class="kw1">PRIMARY</span> <span class="kw1">KEY</span> <span class="kw1">CLUSTERED</span> 
&nbsp; &nbsp; <span class="br0">&#40;</span>Col1<span class="br0">&#41;</span> &nbsp;<span class="kw1">ON</span> <span class="br0">&#91;</span><span class="kw1">PRIMARY</span><span class="br0">&#93;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">ALTER TABLE dbo.TestInt ADD CONSTRAINT
	PK_TestInt PRIMARY KEY CLUSTERED 
	(Col1)  ON [PRIMARY]</pre></div></div>

<p>Click that yellow key icon and here is what happens behind the scenes, I have not found a way to make it non clustered from the designer</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
</pre></td><td class="de1"><pre class="de1"><span class="coMULTI">/* To prevent any potential data loss issues, you should review this script in detail before running it outside the context of the database designer.*/</span>
<span class="kw1">BEGIN</span> <span class="kw1">TRANSACTION</span>
<span class="kw1">SET</span> QUOTED_IDENTIFIER <span class="kw1">ON</span>
<span class="kw1">SET</span> ARITHAB<span class="sy0">OR</span>T <span class="kw1">ON</span>
<span class="kw1">SET</span> NUMERIC_ROUNDAB<span class="sy0">OR</span>T <span class="kw1">OFF</span>
<span class="kw1">SET</span> CONCAT_<span class="sy0">NULL</span>_YIELDS_<span class="sy0">NULL</span> <span class="kw1">ON</span>
<span class="kw1">SET</span> ANSI_<span class="sy0">NULL</span>S <span class="kw1">ON</span>
<span class="kw1">SET</span> ANSI_PADD<span class="sy0">IN</span>G <span class="kw1">ON</span>
<span class="kw1">SET</span> ANSI_WARN<span class="sy0">IN</span>GS <span class="kw1">ON</span>
<span class="kw1">COMMIT</span>
<span class="kw1">BEGIN</span> <span class="kw1">TRANSACTION</span>
GO
<span class="kw1">ALTER</span> <span class="kw1">TABLE</span> dbo.<span class="me1">TestInt</span>
&nbsp; &nbsp; <span class="kw1">DROP</span> <span class="kw1">CONSTRAINT</span> DF_TestInt_Col1
GO
<span class="kw1">CREATE</span> <span class="kw1">TABLE</span> dbo.<span class="me1">Tmp_TestInt</span>
&nbsp; &nbsp; <span class="br0">&#40;</span>
&nbsp; &nbsp; Col1 <span class="kw1">int</span> <span class="sy0">NOT</span> <span class="sy0">NULL</span>
&nbsp; &nbsp; <span class="br0">&#41;</span> &nbsp;<span class="kw1">ON</span> <span class="br0">&#91;</span><span class="kw1">PRIMARY</span><span class="br0">&#93;</span>
GO
<span class="kw1">ALTER</span> <span class="kw1">TABLE</span> dbo.<span class="me1">Tmp_TestInt</span> <span class="kw1">SET</span> <span class="br0">&#40;</span>LOCK_ESCALATION <span class="sy0">=</span> <span class="kw1">TABLE</span><span class="br0">&#41;</span>
GO
<span class="kw1">ALTER</span> <span class="kw1">TABLE</span> dbo.<span class="me1">Tmp_TestInt</span> <span class="kw1">ADD</span> <span class="kw1">CONSTRAINT</span>
&nbsp; &nbsp; DF_TestInt_Col1 <span class="kw1">DEFAULT</span> <span class="br0">&#40;</span><span class="br0">&#40;</span><span class="nu0">1</span><span class="br0">&#41;</span><span class="br0">&#41;</span> <span class="kw1">FOR</span> Col1
GO
<span class="kw1">IF</span> <span class="sy0">EXISTS</span><span class="br0">&#40;</span><span class="kw1">SELECT</span> <span class="sy0">*</span> <span class="kw1">FROM</span> dbo.<span class="me1">TestInt</span><span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp;<span class="kw1">EXEC</span><span class="br0">&#40;</span><span class="st0">'INSERT INTO dbo.Tmp_TestInt (Col1)</span>
<span class="st0">&nbsp; &nbsp; &nbsp; &nbsp; SELECT Col1 FROM dbo.TestInt WITH (HOLDLOCK TABLOCKX)'</span><span class="br0">&#41;</span>
GO
<span class="kw1">DROP</span> <span class="kw1">TABLE</span> dbo.<span class="me1">TestInt</span>
GO
<span class="kw1">EXECUTE</span> <span class="kw3">sp_rename</span> N<span class="st0">'dbo.Tmp_TestInt'</span>, N<span class="st0">'TestInt'</span>, <span class="st0">'OBJECT'</span> 
GO
<span class="kw1">ALTER</span> <span class="kw1">TABLE</span> dbo.<span class="me1">TestInt</span> <span class="kw1">ADD</span> <span class="kw1">CONSTRAINT</span>
&nbsp; &nbsp; PK_TestInt <span class="kw1">PRIMARY</span> <span class="kw1">KEY</span> <span class="kw1">CLUSTERED</span> 
&nbsp; &nbsp; <span class="br0">&#40;</span>
&nbsp; &nbsp; Col1
&nbsp; &nbsp; <span class="br0">&#41;</span> <span class="kw1">WITH</span><span class="br0">&#40;</span> STATISTICS_N<span class="sy0">OR</span>ECOMPUTE <span class="sy0">=</span> <span class="kw1">OFF</span>, IGN<span class="sy0">OR</span>E_DUP_KEY <span class="sy0">=</span> <span class="kw1">OFF</span>, <span class="sy0">ALL</span>OW_ROW_LOCKS <span class="sy0">=</span> <span class="kw1">ON</span>, <span class="sy0">ALL</span>OW_PAGE_LOCKS <span class="sy0">=</span> <span class="kw1">ON</span><span class="br0">&#41;</span> <span class="kw1">ON</span> <span class="br0">&#91;</span><span class="kw1">PRIMARY</span><span class="br0">&#93;</span>
&nbsp;
GO
<span class="kw1">COMMIT</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">/* To prevent any potential data loss issues, you should review this script in detail before running it outside the context of the database designer.*/
BEGIN TRANSACTION
SET QUOTED_IDENTIFIER ON
SET ARITHABORT ON
SET NUMERIC_ROUNDABORT OFF
SET CONCAT_NULL_YIELDS_NULL ON
SET ANSI_NULLS ON
SET ANSI_PADDING ON
SET ANSI_WARNINGS ON
COMMIT
BEGIN TRANSACTION
GO
ALTER TABLE dbo.TestInt
	DROP CONSTRAINT DF_TestInt_Col1
GO
CREATE TABLE dbo.Tmp_TestInt
	(
	Col1 int NOT NULL
	)  ON [PRIMARY]
GO
ALTER TABLE dbo.Tmp_TestInt SET (LOCK_ESCALATION = TABLE)
GO
ALTER TABLE dbo.Tmp_TestInt ADD CONSTRAINT
	DF_TestInt_Col1 DEFAULT ((1)) FOR Col1
GO
IF EXISTS(SELECT * FROM dbo.TestInt)
	 EXEC('INSERT INTO dbo.Tmp_TestInt (Col1)
		SELECT Col1 FROM dbo.TestInt WITH (HOLDLOCK TABLOCKX)')
GO
DROP TABLE dbo.TestInt
GO
EXECUTE sp_rename N'dbo.Tmp_TestInt', N'TestInt', 'OBJECT' 
GO
ALTER TABLE dbo.TestInt ADD CONSTRAINT
	PK_TestInt PRIMARY KEY CLUSTERED 
	(
	Col1
	) WITH( STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]

GO
COMMIT</pre></div></div>

<p>You might ask yourself why you should care, all the tables are small, this is not a big issue. This might be true now, what if you start a new job and now you have to supply alter, delete and create scripts? Now you are in trouble. I used to do the same when I started, I used the designers for everything, I didn&#8217;t even know Query Analyzer existed when I started, I created and modified the stored procedures straight inside Enterprise Manager. Trying to modify a view that had a CASE statement in Enterprise Manager from the designer&#8230;.yeah good luck with that one&#8230;.you would get some error that it wasn&#8217;t supported, I believe it also injected TOP 100 PERCENT ORDER BY in the view as well</p>
<p>I don&#8217;t miss those days at all. Get to learn T-SQL and get to love it, you might suffer when you start but you will become a better database developer.</p>
<p>Aaron Bertrand also has a post that you should read about the designers:<a href="http://sqlblog.com/blogs/aaron_bertrand/archive/2009/10/14/bad-habits-to-kick-using-the-visual-designers.aspx"> Bad habits to kick : using the visual designers</a></p>
<p>That is all for day five of the <a href="/index.php/DataMgmt/DBProgramming/sql-advent-2012-here-is">SQL Advent 2012 series</a>, come back tomorrow for the next one, you can also check out all the posts from last year here: <a href="/index.php/DataMgmt/DataDesign/sql-advent-2011-recap">SQL Advent 2011 Recap</a></p>
]]></content:encoded>
			<wfw:commentRss>/index.php/datamgmt/dbprogramming/do-not-trust-the-ssms/feed/</wfw:commentRss>
		<slash:comments>7</slash:comments>
		</item>
	</channel>
</rss>
