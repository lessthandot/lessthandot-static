<?xml version="1.0" encoding="UTF-8"?><rss version="2.0"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:atom="http://www.w3.org/2005/Atom"
	xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
	xmlns:slash="http://purl.org/rss/1.0/modules/slash/"
	>

<channel>
	<title>tip &#8211; LessthanDot</title>
	<atom:link href="/index.php/tag/tip/feed/" rel="self" type="application/rss+xml" />
	<link>/</link>
	<description>A Technical Community for IT Professionals</description>
	<lastBuildDate>Sat, 09 Mar 2019 12:50:36 +0000</lastBuildDate>
	<language>en-US</language>
	<sy:updatePeriod>hourly</sy:updatePeriod>
	<sy:updateFrequency>1</sy:updateFrequency>
	<generator>https://wordpress.org/?v=4.6.1</generator>
	<item>
		<title>Where to find the xtype info for SQL Server in a table</title>
		<link>/index.php/datamgmt/dbprogramming/where-to-find-the-xtype/</link>
		<comments>/index.php/datamgmt/dbprogramming/where-to-find-the-xtype/#comments</comments>
		<pubDate>Fri, 26 Apr 2013 14:48:00 +0000</pubDate>
		<dc:creator><![CDATA[SQLDenis]]></dc:creator>
				<category><![CDATA[Database Programming]]></category>
		<category><![CDATA[Microsoft SQL Server]]></category>
		<category><![CDATA[Microsoft SQL Server Admin]]></category>
		<category><![CDATA[howto]]></category>
		<category><![CDATA[sql server 2000]]></category>
		<category><![CDATA[sql server 2005]]></category>
		<category><![CDATA[sql server 2008]]></category>
		<category><![CDATA[sql server 2012]]></category>
		<category><![CDATA[table]]></category>
		<category><![CDATA[tip]]></category>

		<guid isPermaLink="false">/index.php/2013/04/where-to-find-the-xtype/</guid>
		<description><![CDATA[If you look at the sys.sysobjects view, you will see an xtype column listed

Object type. Can be one of the following object types:
AF = Aggregate function (CLR)
C = CHECK constraint
D = Default or DEFAULT constraint
F = FOREIGN KEY constraint
L&#8230;]]></description>
				<content:encoded><![CDATA[<p>If you look at the sys.sysobjects view, you will see a xtype column listed</p>
<p>Object type. Can be one of the following object types:<br />
AF = Aggregate function (CLR)<br />
C = CHECK constraint<br />
D = Default or DEFAULT constraint<br />
F = FOREIGN KEY constraint<br />
L = Log<br />
FN = Scalar function<br />
FS = Assembly (CLR) scalar-function<br />
FT = Assembly (CLR) table-valued function<br />
IF = In-lined table-function<br />
IT = Internal table<br />
P = Stored procedure<br />
PC = Assembly (CLR) stored-procedure<br />
PK = PRIMARY KEY constraint (type is K)<br />
RF = Replication filter stored procedure<br />
S = System table<br />
SN = Synonym<br />
SQ = Service queue<br />
TA = Assembly (CLR) DML trigger<br />
TF = Table function<br />
TR = SQL DML Trigger<br />
TT = Table type<br />
U = User table<br />
UQ = UNIQUE constraint (type is K)<br />
V = View<br />
X = Extended stored procedure</p>
<p>However there is no table in SQL Server that holds this info&#8230;.or is there?</p>
<p>I answered <a href="http://stackoverflow.com/questions/16243857/is-there-a-table-that-holds-the-listing-of-xtype-descriptions">this question</a> today and decided to share here as well</p>
<p>Here is how you can find that info, you can use my favorite table spt_values</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
</pre></td><td class="de1"><pre class="de1"><span class="kw1">SELECT</span> name
<span class="kw1">FROM</span> master..<span class="me1">spt_values</span>
<span class="kw1">WHERE</span> type <span class="sy0">=</span> <span class="st0">'O9T'</span>
<span class="sy0">AND</span> number &nbsp;<span class="sy0">=</span> <span class="sy0">-</span><span class="nu0">1</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">SELECT name
FROM master..spt_values
WHERE type = 'O9T'
AND number  = -1</pre></div></div>

<p>This is the output</p>
<p>AF: aggregate function<br />
AP: application<br />
C : check cns<br />
D : default (maybe cns)<br />
EN: event notification<br />
F : foreign key cns<br />
FN: scalar function<br />
FS: assembly scalar function<br />
FT: assembly table function<br />
IF: inline function<br />
IS: inline scalar function<br />
IT: internal table<br />
L : log<br />
P : stored procedure<br />
PC : assembly stored procedure<br />
PK: primary key cns<br />
R : rule<br />
RF: replication filter proc<br />
S : system table<br />
SN: synonym<br />
SQ: queue<br />
TA: assembly trigger<br />
TF: table function<br />
TR: trigger<br />
U : user table<br />
UQ: unique key cns<br />
V : view<br />
X : extended stored proc</p>
<p>Now if you want to split it into two columns, you can use the LEFT and RIGHT functions together with the PATINDEX function</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
</pre></td><td class="de1"><pre class="de1"><span class="kw1">SELECT</span> <span class="kw1">LEFT</span><span class="br0">&#40;</span>name,<span class="kw2">PATINDEX</span><span class="br0">&#40;</span><span class="st0">'%:%'</span>,name<span class="br0">&#41;</span><span class="sy0">-</span><span class="nu0">1</span><span class="br0">&#41;</span> <span class="kw1">AS</span> xtype,
<span class="kw1">RIGHT</span><span class="br0">&#40;</span>name, <span class="br0">&#40;</span><span class="kw2">LEN</span><span class="br0">&#40;</span>name<span class="br0">&#41;</span> <span class="sy0">-</span> <span class="kw2">PATINDEX</span><span class="br0">&#40;</span><span class="st0">'%:%'</span>,name<span class="br0">&#41;</span><span class="br0">&#41;</span><span class="br0">&#41;</span> <span class="kw1">AS</span> Description
<span class="kw1">FROM</span> master..<span class="me1">spt_values</span>
<span class="kw1">WHERE</span> type <span class="sy0">=</span> <span class="st0">'O9T'</span>
<span class="sy0">AND</span> number &nbsp;<span class="sy0">=</span> <span class="sy0">-</span><span class="nu0">1</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">SELECT LEFT(name,PATINDEX('%:%',name)-1) AS xtype,
RIGHT(name, (LEN(name) - PATINDEX('%:%',name))) AS Description
FROM master..spt_values
WHERE type = 'O9T'
AND number  = -1</pre></div></div>

<p>Here is the result</p>
<pre>xtype	Description
AF	 aggregate function
AP	 application
C 	 check cns
D 	 default (maybe cns)
EN	 event notification
F 	 foreign key cns
FN	 scalar function
FS	 assembly scalar function
FT	 assembly table function
IF	 inline function
IS	 inline scalar function
IT	 internal table
L 	 log
P 	 stored procedure
PC 	 assembly stored procedure
PK	 primary key cns
R 	 rule
RF	 replication filter proc
S 	 system table
SN	 synonym
SQ	 queue
TA	 assembly trigger
TF	 table function
TR	 trigger
U 	 user table
UQ	 unique key cns
V 	 view
X 	 extended stored proc</pre>
]]></content:encoded>
			<wfw:commentRss>/index.php/datamgmt/dbprogramming/where-to-find-the-xtype/feed/</wfw:commentRss>
		<slash:comments>3</slash:comments>
		</item>
		<item>
		<title>Unique index difference between Oracle and SQL Server</title>
		<link>/index.php/datamgmt/dbprogramming/unique-index-difference-between-oracle/</link>
		<comments>/index.php/datamgmt/dbprogramming/unique-index-difference-between-oracle/#comments</comments>
		<pubDate>Tue, 19 Mar 2013 21:55:00 +0000</pubDate>
		<dc:creator><![CDATA[SQLDenis]]></dc:creator>
				<category><![CDATA[Database Programming]]></category>
		<category><![CDATA[Microsoft SQL Server]]></category>
		<category><![CDATA[Microsoft SQL Server Admin]]></category>
		<category><![CDATA[Oracle]]></category>
		<category><![CDATA[Oracle Admin]]></category>
		<category><![CDATA[gotcha]]></category>
		<category><![CDATA[null]]></category>
		<category><![CDATA[oracle]]></category>
		<category><![CDATA[sql server]]></category>
		<category><![CDATA[tip]]></category>

		<guid isPermaLink="false">/index.php/2013/03/unique-index-difference-between-oracle/</guid>
		<description><![CDATA[When working with different database systems you have to be aware that some things work differently from one system to another. I already blogged a couple of times about differences between SQl Server and Oracle, those post are the following
Truncate r&#8230;]]></description>
				<content:encoded><![CDATA[<p>When working with different database systems you have to be aware that some things work differently from one system to another. I already blogged a couple of times about differences between SQl Server and Oracle, those post are the following<br />
<a href="/index.php/DataMgmt/DBAdmin/MSSQLServerAdmin/truncate-rollback-differences-between-sql">Truncate rollback differences between SQL Server and Oracle</a><br />
<a href="/index.php/DataMgmt/DBProgramming/Oracle/differences-between-oracle-and-sql">Differences between Oracle and SQL Server when working with NULL and blank values</a><br />
<a href="/index.php/DataMgmt/DBProgramming/Oracle/an-oracle-null-blank-gotcha">An Oracle NULL/Blank gotcha when coming from SQL Server</a>. </p>
<p>Today we are going to look at the difference between a unique index in Oracle and in SQL Server.</p>
<p>Let&#8217;s start with SQL Server. First create this table and also this index</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
</pre></td><td class="de1"><pre class="de1"><span class="kw1">CREATE</span> <span class="kw1">TABLE</span> TestUnique <span class="br0">&#40;</span>Id <span class="kw1">int</span><span class="br0">&#41;</span>
&nbsp;
&nbsp;
<span class="kw1">CREATE</span> <span class="kw1">UNIQUE</span> <span class="kw1">INDEX</span> SomeIndex <span class="kw1">ON</span> TESTUNIQUE <span class="br0">&#40;</span>ID<span class="br0">&#41;</span>;</pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">CREATE TABLE TestUnique (Id int)


CREATE UNIQUE INDEX SomeIndex ON TESTUNIQUE (ID);</pre></div></div>

<p>Insert the following two rows</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
</pre></td><td class="de1"><pre class="de1"><span class="kw1">INSERT</span> <span class="kw1">INTO</span> TestUnique <span class="kw1">VALUES</span><span class="br0">&#40;</span><span class="nu0">1</span><span class="br0">&#41;</span>;
<span class="kw1">INSERT</span> <span class="kw1">INTO</span> TestUnique <span class="kw1">VALUES</span><span class="br0">&#40;</span>null<span class="br0">&#41;</span>;</pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">INSERT INTO TestUnique VALUES(1);
INSERT INTO TestUnique VALUES(null);</pre></div></div>

<p>Now let&#8217;s insert one more NULL</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
</pre></td><td class="de1"><pre class="de1"><span class="kw1">INSERT</span> <span class="kw1">INTO</span> TestUnique <span class="kw1">VALUES</span><span class="br0">&#40;</span>null<span class="br0">&#41;</span>;</pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">INSERT INTO TestUnique VALUES(null);</pre></div></div>

<p>Here is the error<br />
<em>Msg 2601, Level 14, State 1, Line 1<br />
Cannot insert duplicate key row in object &#8216;dbo.TestUnique&#8217; with unique index &#8216;SomeIndex&#8217;. The duplicate key value is (<null>).<br />
The statement has been terminated.</null></em></p>
<p>As you can see you can only have one NULL value in the table</p>
<p>What about Oracle? Let&#8217;s take a look. Run this whole block, it will create a table, a unique index and will insert the same data<br />
</p>
<pre>CREATE TABLE TestUnique (Id int);

CREATE UNIQUE INDEX INDEX1 ON TESTUNIQUE (ID);

INSERT INTO TestUnique VALUES(1);
INSERT INTO TestUnique VALUES(null);
INSERT INTO TestUnique VALUES(null);

SELECT * FROM TestUnique;</pre>
<p>Here is what it looks like from SQL developer</p>
<div class="image_block"><a href="/wp-content/uploads/blogs/DataMgmt/Denis/Oracle/OracleSQLOutput.PNG?mtime=1363737088"><img alt="" src="/wp-content/uploads/blogs/DataMgmt/Denis/Oracle/OracleSQLOutput.PNG?mtime=1363737088" width="379" height="377" /></a></div>
<p>As you can see SQL Server only allows one NULL value while Oracle allows multiple NULL values. You have to be aware of these differences otherwise you might get unintended behavior from your programs</p>
<p>If you try to insert the value 1 again, you will get the following error</p>
<p>Error report:</p>
<pre>SQL Error: ORA-00001: unique constraint (SYSTEM.INDEX1) violated
00001. 00000 -  "unique constraint (%s.%s) violated"
*Cause:    An UPDATE or INSERT statement attempted to insert a duplicate key.
           For Trusted Oracle configured in DBMS MAC mode, you may see
           this message if a duplicate entry exists at a different level.
*Action:   Either remove the unique restriction or do not insert the key.</pre>
<p>Come back tomorrow to see how you can create an index in SQL Server that will allow multiple NULL values. You can find that post here: <a href="/index.php/DataMgmt/DBProgramming/MSSQLServer/creating-a-sql-server-unique">Creating a SQL Server Unique Index that behaves like an Oracle Unique Index</a></p>
]]></content:encoded>
			<wfw:commentRss>/index.php/datamgmt/dbprogramming/unique-index-difference-between-oracle/feed/</wfw:commentRss>
		<slash:comments>1</slash:comments>
		</item>
		<item>
		<title>An Oracle NULL/Blank gotcha when coming from SQL Server</title>
		<link>/index.php/datamgmt/dbprogramming/mssqlserver/an-oracle-null-blank-gotcha/</link>
		<comments>/index.php/datamgmt/dbprogramming/mssqlserver/an-oracle-null-blank-gotcha/#respond</comments>
		<pubDate>Sun, 10 Feb 2013 19:43:00 +0000</pubDate>
		<dc:creator><![CDATA[SQLDenis]]></dc:creator>
				<category><![CDATA[Microsoft SQL Server]]></category>
		<category><![CDATA[Oracle]]></category>
		<category><![CDATA[gotcha]]></category>
		<category><![CDATA[null]]></category>
		<category><![CDATA[oracle]]></category>
		<category><![CDATA[sql server]]></category>
		<category><![CDATA[tip]]></category>

		<guid isPermaLink="false">/index.php/2013/02/an-oracle-null-blank-gotcha/</guid>
		<description><![CDATA[In my Differences between Oracle and SQL Server when working with NULL and blank values  post I already showed you how blanks and NULLS are handled differently between Oracle and SQL Server. Today I found another interesting tidbit.

I you have a varc&#8230;]]></description>
				<content:encoded><![CDATA[<p>In my <a href="/index.php/DataMgmt/DBProgramming/Oracle/differences-between-oracle-and-sql">Differences between Oracle and SQL Server when working with NULL and blank values</a>  post I already showed you how blanks and NULLS are handled differently between Oracle and SQL Server. Today I found another interesting tidbit.</p>
<p>I you have a varchar or char datatype in SQL Server and you store a blank, you get back a blank or padded spaces.</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
</pre></td><td class="de1"><pre class="de1"><span class="kw1">DECLARE</span> @Test1 <span class="kw1">varchar</span><span class="br0">&#40;</span><span class="nu0">10</span><span class="br0">&#41;</span> <span class="sy0">=</span> <span class="st0">''</span>
<span class="kw1">DECLARE</span> @Test2 <span class="kw1">char</span><span class="br0">&#40;</span><span class="nu0">10</span><span class="br0">&#41;</span> <span class="sy0">=</span> <span class="st0">''</span>
&nbsp;
<span class="kw1">SELECT</span> @Test1,@Test2</pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">DECLARE @Test1 varchar(10) = ''
DECLARE @Test2 char(10) = ''

SELECT @Test1,@Test2</pre></div></div>

<p>The output is one blank and ten spaces.  </p>
<p>You can verify this by using the <code>DATALENGTH </code>function .</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
</pre></td><td class="de1"><pre class="de1"><span class="kw1">DECLARE</span> @Test1 <span class="kw1">varchar</span><span class="br0">&#40;</span><span class="nu0">10</span><span class="br0">&#41;</span> <span class="sy0">=</span> <span class="st0">''</span>
<span class="kw1">DECLARE</span> @Test2 <span class="kw1">char</span><span class="br0">&#40;</span><span class="nu0">10</span><span class="br0">&#41;</span> <span class="sy0">=</span> <span class="st0">''</span>
&nbsp;
<span class="kw1">SELECT</span> datalength<span class="br0">&#40;</span>@Test1<span class="br0">&#41;</span>,datalength<span class="br0">&#40;</span>@Test2<span class="br0">&#41;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">DECLARE @Test1 varchar(10) = ''
DECLARE @Test2 char(10) = ''

SELECT datalength(@Test1),datalength(@Test2)</pre></div></div>

<p>Ouput</p>
<pre>0     10</pre>
<p>In Oracle&#8230;not the same</p>
<p>If you run this</p>
<pre>SET SERVEROUTPUT ON
 DECLARE 
    Test1 varchar(10):='';
    Test2 char(10):='';
BEGIN
  IF Test1 IS NULL 
  THEN
  DBMS_OUTPUT.PUT_LINE('Test1 is null');
  ELSE
  DBMS_OUTPUT.PUT_LINE('Test1 is NOT null');
  END IF;
  IF Test2 IS NULL 
  THEN
  DBMS_OUTPUT.PUT_LINE('Test2 is null');
  ELSE
  DBMS_OUTPUT.PUT_LINE('Test2 is NOT null');
  END IF;
END;</pre>
<p>Output</p>
<pre>anonymous block completed
Test1 is null
Test2 is NOT null</pre>
<p>As you can see the varchar variable becomes NULL while the nchar variable gets padded</p>
<p>However when inserting into a table this becomes a little bit different with Oracle</p>
<p>Running this in SQL Server</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
</pre></td><td class="de1"><pre class="de1"><span class="kw1">CREATE</span> <span class="kw1">TABLE</span> TestNull<span class="br0">&#40;</span>Col1 <span class="kw1">CHAR</span><span class="br0">&#40;</span><span class="nu0">10</span><span class="br0">&#41;</span>,Col2 <span class="kw1">VARCHAR</span><span class="br0">&#40;</span><span class="nu0">10</span><span class="br0">&#41;</span><span class="br0">&#41;</span>;
<span class="kw1">INSERT</span> <span class="kw1">INTO</span> TestNull <span class="kw1">VALUES</span><span class="br0">&#40;</span><span class="sy0">NULL</span>,<span class="sy0">NULL</span><span class="br0">&#41;</span>;
<span class="kw1">INSERT</span> <span class="kw1">INTO</span> TestNull <span class="kw1">VALUES</span><span class="br0">&#40;</span><span class="st0">''</span>,<span class="st0">''</span><span class="br0">&#41;</span>;
&nbsp;
<span class="kw1">SELECT</span> <span class="sy0">*</span> <span class="kw1">FROM</span> TestNull;</pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">CREATE TABLE TestNull(Col1 CHAR(10),Col2 VARCHAR(10));
INSERT INTO TestNull VALUES(NULL,NULL);
INSERT INTO TestNull VALUES('','');

SELECT * FROM TestNull;</pre></div></div>

<p>Output</p>
<pre>Col1	Col2
NULL	NULL
          	</pre>
<p>You get a row with NULLS and a row with blanks, same as with the variables</p>
<p>Running that in Oracle</p>
<pre>CREATE TABLE TestNull(Col1 CHAR(10),Col2 VARCHAR(10));
INSERT INTO TestNull VALUES(NULL,NULL);
INSERT INTO TestNull VALUES('','');

SELECT * FROM TestNull;</pre>
<p>Here is what you get</p>
<div class="image_block"><a href="/wp-content/uploads/blogs/DataMgmt/Denis/Oracle/OracleOutput.PNG?mtime=1360532250"><img alt="" src="/wp-content/uploads/blogs/DataMgmt/Denis/Oracle/OracleOutput.PNG?mtime=1360532250" width="290" height="229" /></a></div>
<p>As you can see when inserting NULL or a blank into a char column into a table, it does NOT get padded like it did with the variable<br />
If converting code between these two database systems be aware of these kind of things</p>
]]></content:encoded>
			<wfw:commentRss>/index.php/datamgmt/dbprogramming/mssqlserver/an-oracle-null-blank-gotcha/feed/</wfw:commentRss>
		<slash:comments>0</slash:comments>
		</item>
		<item>
		<title>Truncate rollback differences between SQL Server and Oracle</title>
		<link>/index.php/datamgmt/dbadmin/mssqlserveradmin/truncate-rollback-differences-between-sql/</link>
		<comments>/index.php/datamgmt/dbadmin/mssqlserveradmin/truncate-rollback-differences-between-sql/#respond</comments>
		<pubDate>Sun, 06 Jan 2013 22:27:00 +0000</pubDate>
		<dc:creator><![CDATA[SQLDenis]]></dc:creator>
				<category><![CDATA[Business Intelligence]]></category>
		<category><![CDATA[Microsoft SQL Server]]></category>
		<category><![CDATA[Microsoft SQL Server Admin]]></category>
		<category><![CDATA[Oracle]]></category>
		<category><![CDATA[Oracle Admin]]></category>
		<category><![CDATA[gotcha]]></category>
		<category><![CDATA[oracle]]></category>
		<category><![CDATA[sql server]]></category>
		<category><![CDATA[tip]]></category>
		<category><![CDATA[truncate]]></category>

		<guid isPermaLink="false">/index.php/2013/01/truncate-rollback-differences-between-sql/</guid>
		<description><![CDATA[I wrote a blogpost about the fact that there is a common myth that you can't rollback a truncate statement in SQL this post was written on June 13, 2007 and it showed you that you could rollback a truncate. Here is some code that shows that.

CREATE&#8230;]]></description>
				<content:encoded><![CDATA[<p>I wrote a blogpost about the fact that there is a common myth that you can&#8217;t rollback a truncate statement in SQL <a href="http://sqlblog.com/blogs/denis_gobo/archive/2007/06/13/1458.aspx">this post was written on June 13, 2007</a> and it showed you that you could rollback a truncate. Here is some code that shows that.</p>
<p>First create this very simple table</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
</pre></td><td class="de1"><pre class="de1"><span class="kw1">CREATE</span> <span class="kw1">TABLE</span> dbo.<span class="me1">TruncateTest</span> <span class="br0">&#40;</span>ID <span class="kw1">int</span> <span class="kw1">IDENTITY</span> <span class="kw1">PRIMARY</span> <span class="kw1">KEY</span>, 
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; SomeOtherCol <span class="kw1">varchar</span><span class="br0">&#40;</span><span class="nu0">49</span><span class="br0">&#41;</span><span class="br0">&#41;</span>
GO</pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">CREATE TABLE dbo.TruncateTest (ID int IDENTITY PRIMARY KEY, 
				SomeOtherCol varchar(49))
GO</pre></div></div>

<p>Add the following two rows</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
</pre></td><td class="de1"><pre class="de1"><span class="kw1">INSERT</span> dbo.<span class="me1">TruncateTest</span> <span class="kw1">VALUES</span><span class="br0">&#40;</span><span class="nu0">1</span><span class="br0">&#41;</span>
<span class="kw1">INSERT</span> dbo.<span class="me1">TruncateTest</span> <span class="kw1">VALUES</span><span class="br0">&#40;</span><span class="nu0">1</span><span class="br0">&#41;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">INSERT dbo.TruncateTest VALUES(1)
INSERT dbo.TruncateTest VALUES(1)</pre></div></div>

<p>Now execute this whole block in one shot, you will see three resultsets, two of them will have two rows and one resultset will be empty</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
</pre></td><td class="de1"><pre class="de1"><span class="kw1">SELECT</span> <span class="sy0">*</span> <span class="kw1">FROM</span> dbo.<span class="me1">TruncateTest</span> <span class="co1">-- 2 rows</span>
&nbsp;
<span class="kw1">BEGIN</span> <span class="kw1">TRAN</span>
&nbsp; &nbsp; <span class="kw1">TRUNCATE</span> <span class="kw1">TABLE</span> dbo.<span class="me1">TruncateTest</span>
&nbsp; &nbsp; <span class="kw1">SELECT</span> <span class="sy0">*</span> <span class="kw1">FROM</span> dbo.<span class="me1">TruncateTest</span> <span class="co1">-- 0 rows</span>
<span class="kw1">ROLLBACK</span> <span class="kw1">TRAN</span>
&nbsp;
<span class="kw1">SELECT</span> <span class="sy0">*</span> <span class="kw1">FROM</span> dbo.<span class="me1">TruncateTest</span> &nbsp;<span class="co1">-- 2 rows again after rollback</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">SELECT * FROM dbo.TruncateTest -- 2 rows
 
BEGIN TRAN
    TRUNCATE TABLE dbo.TruncateTest
    SELECT * FROM dbo.TruncateTest -- 0 rows
ROLLBACK TRAN
 
SELECT * FROM dbo.TruncateTest  -- 2 rows again after rollback</pre></div></div>

<p>Here is the output</p>
<pre>ID          SomeOtherCol
----------- -------------------------------------------------
1           1
2           1

(2 row(s) affected)

ID          SomeOtherCol
----------- -------------------------------------------------

(0 row(s) affected)

ID          SomeOtherCol
----------- -------------------------------------------------
1           1
2           1

(2 row(s) affected)</pre>
<p>As you can see the table was empty at one point, however the table has the same two rows again, if you execute this query, you will see those two row again</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
</pre></td><td class="de1"><pre class="de1"><span class="kw1">SELECT</span> <span class="sy0">*</span> <span class="kw1">FROM</span> dbo.<span class="me1">TruncateTest</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">SELECT * FROM dbo.TruncateTest</pre></div></div>

<h2>What about Oracle, can you rollback a truncate statement?</h2>
<p>In SQL Server the minimum permission required is ALTER on table_name. TRUNCATE TABLE permissions default to the table owner, members of the sysadmin fixed server role, and the db_owner and db_ddladmin fixed database roles, I blogged about this as well in the post <a href="/index.php/DataMgmt/DBProgramming/MSSQLServer/why-do-you-need-additional">Why do you need additional privileges for truncate table compared to delete?</a> </p>
<p>In Oracle to truncate a table, the table must be in your schema or you must have DROP ANY TABLE system privilege.</p>
<p>In Oracle a truncate statement is actually a DDL statement, you CANNOT rollback a truncate after it has happened. A truncate statement removes all rows  and returns the freed space to the tablespace containing the table.</p>
<p>Please keep these differences in mind when working with different platforms, don&#8217;t assume anything, it will bite you in the butt, always reference the documentation. For some more Oracle and SQL Server differences, see also my post <a href="/index.php/DataMgmt/DBProgramming/Oracle/differences-between-oracle-and-sql">Differences between Oracle and SQL Server when working with NULL and blank values</a></p>
]]></content:encoded>
			<wfw:commentRss>/index.php/datamgmt/dbadmin/mssqlserveradmin/truncate-rollback-differences-between-sql/feed/</wfw:commentRss>
		<slash:comments>0</slash:comments>
		</item>
		<item>
		<title>What is the Dual table in Oracle and why do I need it?</title>
		<link>/index.php/datamgmt/dbadmin/mssqlserveradmin/what-is-the-dual-table/</link>
		<comments>/index.php/datamgmt/dbadmin/mssqlserveradmin/what-is-the-dual-table/#comments</comments>
		<pubDate>Sun, 06 Jan 2013 13:36:00 +0000</pubDate>
		<dc:creator><![CDATA[SQLDenis]]></dc:creator>
				<category><![CDATA[Microsoft SQL Server]]></category>
		<category><![CDATA[Microsoft SQL Server Admin]]></category>
		<category><![CDATA[Oracle]]></category>
		<category><![CDATA[Oracle Admin]]></category>
		<category><![CDATA[gotcha]]></category>
		<category><![CDATA[oracle]]></category>
		<category><![CDATA[sql server]]></category>
		<category><![CDATA[tip]]></category>

		<guid isPermaLink="false">/index.php/2013/01/what-is-the-dual-table/</guid>
		<description><![CDATA[When coming from SQL Server, you might find it weird that you don't see code that looks like this


select 2

That code won't run in Oracle, unlike SQL Server, Oracle requires the use of the FROM clause in its syntax. This is why Oracle has DUAL]]></description>
				<content:encoded><![CDATA[<p>When coming from SQL Server, you might find it weird that you don&#8217;t see code that looks like this in Oracle&#8217;s PL/SQL</p>
<pre>select 2

select sysdate --  getdate()in SQL Server</pre>
<p>Unlike with SQL Server that code won&#8217;t run in Oracle, Oracle requires the use of the FROM clause in its syntax. This is why Oracle has the DUAL table.</p>
<p>If you try to run something like this</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
</pre></td><td class="de1"><pre class="de1"><span class="kw1">select</span> <span class="nu0">2</span>;</pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">select 2;</pre></div></div>

<p>you will get the following error</p>
<p><em>ORA-00923: FROM keyword not found where expected<br />
00923. 00000 &#8211;  &#8220;FROM keyword not found where expected&#8221;</em></p>
<p>I decided to see where the Dual table came from.</p>
<p>From wikipedia</p>
<blockquote><p>The DUAL table was created by Charles Weiss of Oracle corporation to provide a table for joining in internal views:</p>
<p>I created the DUAL table as an underlying object in the Oracle Data Dictionary. It was never meant to be seen itself, but instead used inside a view that was expected to be queried. The idea was that you could do a JOIN to the DUAL table and create two rows in the result for every one row in your table. Then, by using GROUP BY, the resulting join could be summarized to show the amount of storage for the DATA extent and for the INDEX extent(s). The name, DUAL, seemed apt for the process of creating a pair of rows from just one.</p>
<p>The original DUAL table had two rows in it (hence its name), but subsequently it only had one row.</p></blockquote>
<p>Running the following code</p>
<pre>select * from dual;</pre>
<p>Give you a resultset of 1 row with 1 column named DUMMY with the value X</p>
<p><a href="/wp-content/uploads/blogs/DataMgmt/Denis/Oracle/OracleDual.PNG?mtime=1357485931"><img alt="" src="/wp-content/uploads/blogs/DataMgmt/Denis/Oracle/OracleDual.PNG?mtime=1357485931" width="315" height="74" /></a></p>
<p>So there you have it, this is why the Dual table exists.</p>
<p>If you need to do something like this</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
</pre></td><td class="de1"><pre class="de1"><span class="kw1">SELECT</span> <span class="nu0">3</span><span class="sy0">/</span><span class="nu0">2</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">SELECT 3/2</pre></div></div>

<p>in Oracle it needs to be </p>
<pre>SELECT 3/2 from dual;</pre>
<p>However Oracle returns 1.5 while SQL Server will return 1, SQL Server does integer math and Oracle does not. That is another difference you need to be aware of, this is more problematic when moving from Oracle SQL Server and then wondering where all the decimals went.</p>
]]></content:encoded>
			<wfw:commentRss>/index.php/datamgmt/dbadmin/mssqlserveradmin/what-is-the-dual-table/feed/</wfw:commentRss>
		<slash:comments>1</slash:comments>
		</item>
		<item>
		<title>Differences between Oracle and SQL Server when working with NULL and blank values</title>
		<link>/index.php/datamgmt/dbadmin/mssqlserveradmin/differences-between-oracle-and-sql/</link>
		<comments>/index.php/datamgmt/dbadmin/mssqlserveradmin/differences-between-oracle-and-sql/#comments</comments>
		<pubDate>Sun, 06 Jan 2013 09:45:00 +0000</pubDate>
		<dc:creator><![CDATA[SQLDenis]]></dc:creator>
				<category><![CDATA[Microsoft SQL Server]]></category>
		<category><![CDATA[Microsoft SQL Server Admin]]></category>
		<category><![CDATA[Oracle]]></category>
		<category><![CDATA[Oracle Admin]]></category>
		<category><![CDATA[gotcha]]></category>
		<category><![CDATA[null]]></category>
		<category><![CDATA[oracle]]></category>
		<category><![CDATA[sql server]]></category>
		<category><![CDATA[tip]]></category>

		<guid isPermaLink="false">/index.php/2013/01/differences-between-oracle-and-sql/</guid>
		<description><![CDATA[If you ever have to start working with Oracle you have to keep in mind that NULLs and blank values don't work exactly the same as in SQL Server. Let's take a look at some examples

Create this table and insert some rows
create table TestNull(Col2 var&#8230;]]></description>
				<content:encoded><![CDATA[<p>If you ever have to start working with Oracle you have to keep in mind that NULLs and blank values don&#8217;t work exactly the same as in SQL Server. Let&#8217;s take a look at some examples</p>
<p>Create this table and insert some rows</p>
<pre>create table TestNull(Col2 varchar(100));
insert into TestNull values(NULL);
insert into TestNull values('Bla');
insert into TestNull values('');
insert into TestNull values(' ');</pre>
<p>As you can see we inserted four rows, one row is null, one row is blank, one row has a space and one row has Bla.</p>
<p>Now let&#8217;s run the following query</p>
<pre>SELECT Col2,
  NVL(Col2,'EmptyOrNull') a,
  COALESCE(Col2,'EmptyOrNull') b,
  ascii(col2) c
FROM TestNull;</pre>
<p>Here are the results in a html table</p>
<div class="tables">
<table border="1">
<tr>
<th>COL2</th>
<th>	A</th>
<th>	B</th>
<th>	C</th>
</tr>
<tr>
<td>null</td>
<td>	EmptyOrNull</td>
<td>	EmptyOrNull</td>
<td>null</td>
</tr>
<tr>
<td>Bla</td>
<td>	Bla</td>
<td>	Bla</td>
<td>	66</td>
</tr>
<tr>
<td>null</td>
<td>	EmptyOrNull</td>
<td>	EmptyOrNull</td>
<td>null</td>
</tr>
<tr>
<td> </td>
<td>	 </td>
<td>	 </td>
<td>	32</td>
</tr>
</table>
</div>
<p>Here is an image of the same results<br />
<a href="/wp-content/uploads/blogs/DataMgmt/Denis/Oracle/OracleResults.PNG?mtime=1357471831"><img alt="Oracle SQL Developer Results" title="Oracle SQL Developer Results" src="/wp-content/uploads/blogs/DataMgmt/Denis/Oracle/OracleResults.PNG?mtime=1357471831" width="318" height="135" /></a></p>
<p>See what happened, Oracle changed the blanks to NULLs. </p>
<p>We can easily test this theory, let&#8217;s create a table with a column that has a not null constraint</p>
<pre>create table TestNull2(Col2 varchar(100) not null);</pre>
<p>Now of course if you try to insert a NULL it will blow up</p>
<pre>insert into TestNull2 values(NULL);</pre>
<p>Here is the error<br />
<em>SQL Error: ORA-01400: cannot insert NULL into (&#8220;SYSTEM&#8221;.&#8221;TESTNULL2&#8243;.&#8221;COL2&#8243;)<br />
01400. 00000 &#8211;  &#8220;cannot insert NULL into (%s)&#8221;</em></p>
<p>Inserting Bla works without a problem</p>
<pre>insert into TestNull2 values('Bla');</pre>
<p>What about a blank, what will happen now?</p>
<pre>insert into TestNull2 values('');</pre>
<p><em>SQL Error: ORA-01400: cannot insert NULL into (&#8220;SYSTEM&#8221;.&#8221;TESTNULL2&#8243;.&#8221;COL2&#8243;)<br />
01400. 00000 &#8211;  &#8220;cannot insert NULL into (%s)&#8221;</em></p>
<p>As you can see the blank gets converted to a NULL and you get the same error. This is very different from SQL Server.</p>
<p>Will a space succeed?</p>
<pre>insert into TestNull2 values(' ');</pre>
<p>A space is no problem.</p>
<p><strong>Coalesce differences</strong><br />
Just be aware that coalesce won&#8217;t work the same either. Oracle doesn&#8217;t have isnull but it has the nvl function instead</p>
<p>Run the following two statements</p>
<pre>select nvl('','No') as a
from dual;</pre>
<pre>select coalesce('','No') as a
from dual;</pre>
<p>In both cases you are getting No back from the function, as you can see a blank is treated as null.</p>
<p>Be aware of these differences between Oracle and SQL Server, you could have some strange results back from queries if you assume it works the same</p>
<p>We will take a look at that strange table <em>dual </em>in another post</p>
]]></content:encoded>
			<wfw:commentRss>/index.php/datamgmt/dbadmin/mssqlserveradmin/differences-between-oracle-and-sql/feed/</wfw:commentRss>
		<slash:comments>1</slash:comments>
		</item>
		<item>
		<title>Don&#8217;t put a return statement in a stored procedure inside a transaction</title>
		<link>/index.php/datamgmt/datadesign/don-t-put-a-return/</link>
		<comments>/index.php/datamgmt/datadesign/don-t-put-a-return/#comments</comments>
		<pubDate>Fri, 18 May 2012 00:57:00 +0000</pubDate>
		<dc:creator><![CDATA[SQLDenis]]></dc:creator>
				<category><![CDATA[Data Modelling and Design]]></category>
		<category><![CDATA[Database Programming]]></category>
		<category><![CDATA[Microsoft SQL Server]]></category>
		<category><![CDATA[Microsoft SQL Server Admin]]></category>
		<category><![CDATA[how to]]></category>
		<category><![CDATA[sql server 2005]]></category>
		<category><![CDATA[sql server 2008]]></category>
		<category><![CDATA[sql server 2012]]></category>
		<category><![CDATA[tip]]></category>

		<guid isPermaLink="false">/index.php/2012/05/don-t-put-a-return/</guid>
		<description><![CDATA[I answered the following question earlier this evening: Return an output parameter from SQL Server via a stored procedure and c#

Here is the proc in question, take a good look at it, do you see the problem?

ALTER PROCEDURE [dbo].[Insert_UnknownCus&#8230;]]></description>
				<content:encoded><![CDATA[<p>I answered the following question earlier this evening: <a href="http://stackoverflow.com/questions/10645730/return-an-output-parameter-from-sql-server-via-a-stored-procedure-and-c-sharp/10645751#10645751">Return an output parameter from SQL Server via a stored procedure and c#</a></p>
<p>Here is the proc in question, take a good look at it, do you see the problem?</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
</pre></td><td class="de1"><pre class="de1"><span class="kw1">ALTER</span> <span class="kw1">PROCEDURE</span> <span class="br0">&#91;</span>dbo<span class="br0">&#93;</span>.<span class="br0">&#91;</span>Insert_UnknownCustomer_Quote_Document<span class="br0">&#93;</span>
<span class="co1">-- Add the parameters for the stored procedure here</span>
@NewDocumentFileName <span class="kw1">nvarchar</span><span class="br0">&#40;</span><span class="nu0">100</span><span class="br0">&#41;</span>,
@NewDocumentWordCount <span class="kw1">int</span>,
@NewQuoteAmount <span class="kw1">money</span>,
@NewQuoteNumber <span class="kw1">int</span> <span class="kw1">OUTPUT</span> <span class="sy0">=</span> <span class="nu0">0</span>
&nbsp;
<span class="kw1">AS</span>
&nbsp;
<span class="kw1">DECLARE</span> @Today <span class="kw1">datetime</span>
<span class="kw1">SELECT</span> @Today <span class="sy0">=</span> <span class="kw2">GETDATE</span><span class="br0">&#40;</span><span class="br0">&#41;</span>
&nbsp;
<span class="kw1">BEGIN</span> <span class="kw1">TRANSACTION</span>
<span class="kw1">BEGIN</span> <span class="kw1">TRY</span>
&nbsp;
<span class="kw1">BEGIN</span>
<span class="co1">-- SET NOCOUNT ON added to prevent extra result sets from interfering with SELECT statements.</span>
<span class="kw1">SET</span> <span class="kw1">NOCOUNT</span> <span class="kw1">ON</span>;
&nbsp;
&nbsp;
<span class="co1">-- Insert statements for procedure here</span>
<span class="kw1">INSERT</span> <span class="kw1">INTO</span> dbo.<span class="me1">Customers</span><span class="br0">&#40;</span>DateAdded<span class="br0">&#41;</span>
<span class="kw1">VALUES</span> <span class="br0">&#40;</span>@Today<span class="br0">&#41;</span>
&nbsp;
<span class="kw1">INSERT</span> <span class="kw1">INTO</span> dbo.<span class="me1">Quotes</span><span class="br0">&#40;</span>CustomerID, QuoteAmount, QuoteDate<span class="br0">&#41;</span>
<span class="kw1">VALUES</span> <span class="br0">&#40;</span>@@<span class="kw1">IDENTITY</span>, @NewQuoteAmount, @Today<span class="br0">&#41;</span>
&nbsp;
<span class="kw1">SELECT</span> @NewQuoteNumber <span class="sy0">=</span> @@<span class="kw1">IDENTITY</span>
<span class="kw1">INSERT</span> <span class="kw1">INTO</span> dbo.<span class="me1">DocumentFiles</span><span class="br0">&#40;</span>QuoteNumber, DocumentFileName, DocumentFileWordCount<span class="br0">&#41;</span>
<span class="kw1">VALUES</span> <span class="br0">&#40;</span>@NewQuoteNumber, @NewDocumentFileName, @NewDocumentWordCount<span class="br0">&#41;</span>
&nbsp;
<span class="co1">-- Return quote number</span>
<span class="kw1">RETURN</span> @NewQuoteNumber
&nbsp;
<span class="kw1">END</span>
<span class="kw1">COMMIT</span> <span class="kw1">TRANSACTION</span>
<span class="kw1">END</span> <span class="kw1">TRY</span>
&nbsp;
<span class="kw1">BEGIN</span> <span class="kw1">CATCH</span>
<span class="kw1">ROLLBACK</span> <span class="kw1">TRANSACTION</span>
<span class="kw1">PRINT</span> <span class="st0">'Transaction rolled back.'</span>
<span class="kw1">END</span> <span class="kw1">CATCH</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">ALTER PROCEDURE [dbo].[Insert_UnknownCustomer_Quote_Document]
-- Add the parameters for the stored procedure here
@NewDocumentFileName nvarchar(100),
@NewDocumentWordCount int,
@NewQuoteAmount money,
@NewQuoteNumber int OUTPUT = 0

AS

DECLARE @Today datetime
SELECT @Today = GETDATE()

BEGIN TRANSACTION
BEGIN TRY

BEGIN
-- SET NOCOUNT ON added to prevent extra result sets from interfering with SELECT statements.
SET NOCOUNT ON;


-- Insert statements for procedure here
INSERT INTO dbo.Customers(DateAdded)
VALUES (@Today)

INSERT INTO dbo.Quotes(CustomerID, QuoteAmount, QuoteDate)
VALUES (@@IDENTITY, @NewQuoteAmount, @Today)

SELECT @NewQuoteNumber = @@IDENTITY
INSERT INTO dbo.DocumentFiles(QuoteNumber, DocumentFileName, DocumentFileWordCount)
VALUES (@NewQuoteNumber, @NewDocumentFileName, @NewDocumentWordCount)

-- Return quote number
RETURN @NewQuoteNumber

END
COMMIT TRANSACTION
END TRY

BEGIN CATCH
ROLLBACK TRANSACTION
PRINT 'Transaction rolled back.'
END CATCH</pre></div></div>

<p>Here is a simplified version</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
</pre></td><td class="de1"><pre class="de1"><span class="kw1">CREATE</span> <span class="kw1">proc</span> prTest
<span class="kw1">as</span>
<span class="kw1">DECLARE</span> @id <span class="kw1">int</span>
&nbsp;
<span class="kw1">BEGIN</span> <span class="kw1">TRAN</span>
&nbsp; &nbsp; <span class="kw1">INSERT</span> TestID <span class="kw1">DEFAULT</span> <span class="kw1">VALUES</span>
&nbsp;
&nbsp; &nbsp; <span class="kw1">SELECT</span> @id &nbsp;<span class="sy0">=</span><span class="kw2">SCOPE_IDENTITY</span><span class="br0">&#40;</span><span class="br0">&#41;</span>
&nbsp;
&nbsp; &nbsp; <span class="kw1">RETURN</span> @id
<span class="kw1">COMMIT</span> <span class="kw1">TRAN</span>
GO</pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">CREATE proc prTest
as
DECLARE @id int

BEGIN TRAN
	INSERT TestID DEFAULT VALUES

	SELECT @id  =SCOPE_IDENTITY()

	RETURN @id
COMMIT TRAN
GO</pre></div></div>

<p>Do you see it?</p>
<p>Let&#8217;s see what happens when you try running it</p>
<p>First create this table</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
</pre></td><td class="de1"><pre class="de1"><span class="kw1">CREATE</span> <span class="kw1">TABLE</span> TestID <span class="br0">&#40;</span>id <span class="kw1">int</span> <span class="kw1">identity</span><span class="br0">&#41;</span>
go</pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">CREATE TABLE TestID (id int identity)
go</pre></div></div>

<p>Here is the proc again</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
</pre></td><td class="de1"><pre class="de1"><span class="kw1">CREATE</span> <span class="kw1">proc</span> prTest
<span class="kw1">as</span>
<span class="kw1">DECLARE</span> @id <span class="kw1">int</span>
&nbsp;
<span class="kw1">BEGIN</span> <span class="kw1">TRAN</span>
&nbsp; &nbsp; <span class="kw1">INSERT</span> TestID <span class="kw1">DEFAULT</span> <span class="kw1">VALUES</span>
&nbsp;
&nbsp; &nbsp; <span class="kw1">SELECT</span> @id &nbsp;<span class="sy0">=</span><span class="kw2">SCOPE_IDENTITY</span><span class="br0">&#40;</span><span class="br0">&#41;</span>
&nbsp;
&nbsp; &nbsp; <span class="kw1">RETURN</span> @id
<span class="kw1">COMMIT</span> <span class="kw1">TRAN</span>
GO</pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">CREATE proc prTest
as
DECLARE @id int

BEGIN TRAN
	INSERT TestID DEFAULT VALUES

	SELECT @id  =SCOPE_IDENTITY()

	RETURN @id
COMMIT TRAN
GO</pre></div></div>

<p>Go ahead and execute it</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
</pre></td><td class="de1"><pre class="de1"><span class="kw1">DECLARE</span> @id <span class="kw1">int</span>
<span class="kw1">EXEC</span> @id <span class="sy0">=</span> prTest
<span class="kw1">SELECT</span> @id</pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">DECLARE @id int
EXEC @id = prTest
SELECT @id</pre></div></div>

<p><em>Msg 266, Level 16, State 2, Procedure prTest, Line 0<br />
Transaction count after EXECUTE indicates a mismatching number of BEGIN and COMMIT statements. Previous count = 0, current count = 1.</em></p>
<p>So the stored procedure blew up, no big deal right?<br />
Open a new query window, run this</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
</pre></td><td class="de1"><pre class="de1"><span class="kw1">SELECT</span> <span class="sy0">*</span> <span class="kw1">FROM</span> TestID</pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">SELECT * FROM TestID</pre></div></div>

<p>Take a note of the SPID in the status bar next to the username</p>
<p>As you can see the query is stuck<br />
Now open yet another window and execute this</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
</pre></td><td class="de1"><pre class="de1"><span class="kw1">SELECT</span> blocking_session_id,<span class="sy0">*</span> 
<span class="kw1">FROM</span> sys.<span class="me1">dm_exec_requests</span>
<span class="kw1">WHERE</span> blocking_session_id <span class="sy0">&lt;&gt;</span> <span class="nu0">0</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">SELECT blocking_session_id,* 
FROM sys.dm_exec_requests
WHERE blocking_session_id &lt;&gt; 0</pre></div></div>

<p>You will see that the SPID of the session where the select is running is returned by this query</p>
<p>As you can see, the transaction is still active and not committed, this is why the select statement is blocked</p>
<p>Go back to the first query window and either run COMMIT or ROLLBACK, the query will finish now</p>
<p>In the stored procedure, the return statement should come after the commit, it should look like this</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
</pre></td><td class="de1"><pre class="de1"><span class="kw1">ALTER</span> <span class="kw1">proc</span> prTest
<span class="kw1">as</span>
<span class="kw1">DECLARE</span> @id <span class="kw1">int</span>
&nbsp;
<span class="kw1">BEGIN</span> <span class="kw1">TRAN</span>
&nbsp; &nbsp; <span class="kw1">INSERT</span> TestID <span class="kw1">DEFAULT</span> <span class="kw1">VALUES</span>
&nbsp;
&nbsp; &nbsp; <span class="kw1">SELECT</span> @id &nbsp;<span class="sy0">=</span><span class="kw2">SCOPE_IDENTITY</span><span class="br0">&#40;</span><span class="br0">&#41;</span>
&nbsp;
&nbsp;
<span class="kw1">COMMIT</span> <span class="kw1">TRAN</span>
<span class="kw1">RETURN</span> @id
GO</pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">ALTER proc prTest
as
DECLARE @id int

BEGIN TRAN
	INSERT TestID DEFAULT VALUES

	SELECT @id  =SCOPE_IDENTITY()


COMMIT TRAN
RETURN @id
GO</pre></div></div>

<p>Now, you won&#8217;t get an error or a hanging transaction. Run it again</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
</pre></td><td class="de1"><pre class="de1"><span class="kw1">DECLARE</span> @id <span class="kw1">int</span>
<span class="kw1">EXEC</span> @id <span class="sy0">=</span> prTest
<span class="kw1">SELECT</span> @id</pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">DECLARE @id int
EXEC @id = prTest
SELECT @id</pre></div></div>

<p>It works now</p>
<p>In general, I don&#8217;t like to use return statements to return IDs, I like to use OUTPUT parameters instead, return statements in my opinion are to be used to return a status code</p>
<p>Here is what the proc would look like with an OUTPUT parameter</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
</pre></td><td class="de1"><pre class="de1"><span class="kw1">ALTER</span> <span class="kw1">proc</span> prTest @id <span class="kw1">int</span> <span class="kw1">OUTPUT</span>
<span class="kw1">AS</span>
&nbsp;
<span class="kw1">BEGIN</span> <span class="kw1">TRAN</span>
&nbsp; &nbsp; <span class="kw1">INSERT</span> TestID <span class="kw1">DEFAULT</span> <span class="kw1">VALUES</span>
&nbsp;
&nbsp; &nbsp; <span class="kw1">SELECT</span> @id &nbsp;<span class="sy0">=</span><span class="kw2">SCOPE_IDENTITY</span><span class="br0">&#40;</span><span class="br0">&#41;</span>
<span class="kw1">COMMIT</span> <span class="kw1">TRAN</span>
GO</pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">ALTER proc prTest @id int OUTPUT
AS

BEGIN TRAN
	INSERT TestID DEFAULT VALUES

	SELECT @id  =SCOPE_IDENTITY()
COMMIT TRAN
GO</pre></div></div>

<p>Here is how you call it</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
</pre></td><td class="de1"><pre class="de1"><span class="kw1">DECLARE</span> @id <span class="kw1">int</span>
<span class="kw1">EXEC</span> &nbsp;prTest @id <span class="kw1">output</span>
<span class="kw1">SELECT</span> @id</pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">DECLARE @id int
EXEC  prTest @id output
SELECT @id</pre></div></div>

<p>Do you use a return statement to return identity values or do you use output parameters or do you use a plain vanilla SELECT statement? Leave me a comment and let me know</p>
]]></content:encoded>
			<wfw:commentRss>/index.php/datamgmt/datadesign/don-t-put-a-return/feed/</wfw:commentRss>
		<slash:comments>3</slash:comments>
		</item>
		<item>
		<title>Dammit people, get to know check constraints and use them!</title>
		<link>/index.php/datamgmt/datadesign/dammit-people-get-to-know/</link>
		<comments>/index.php/datamgmt/datadesign/dammit-people-get-to-know/#comments</comments>
		<pubDate>Tue, 03 Apr 2012 23:05:00 +0000</pubDate>
		<dc:creator><![CDATA[SQLDenis]]></dc:creator>
				<category><![CDATA[Data Modelling and Design]]></category>
		<category><![CDATA[Database Programming]]></category>
		<category><![CDATA[Microsoft SQL Server]]></category>
		<category><![CDATA[Microsoft SQL Server Admin]]></category>
		<category><![CDATA[check constraints]]></category>
		<category><![CDATA[ow to]]></category>
		<category><![CDATA[sql server 2005]]></category>
		<category><![CDATA[sql server 2008]]></category>
		<category><![CDATA[sql server 2012]]></category>
		<category><![CDATA[tip]]></category>
		<category><![CDATA[trick]]></category>

		<guid isPermaLink="false">/index.php/2012/04/dammit-people-get-to-know/</guid>
		<description><![CDATA[A couple of months back we were interviewing people for 2 positions, one of the questions I like to ask is the following: If you have a column in a table that's an integer data type how can you restrict the values to be between 1 and 10? Most of the peo&#8230;]]></description>
				<content:encoded><![CDATA[<p>A couple of months back we were interviewing people for 2 positions, one of the questions I like to ask is the following: If you have a column in a table that&#8217;s an integer data type how can you restrict the values to be between 1 and 10? Most of the people start by saying that they restrict it in the application, when I ask how they would prevent from someone who has write access to do it they usually say that they would add a trigger. Only about 20% of the people know that there is something in the table designer where they can enter a range. Between 5 and 10% of the people know that this is called a <strong>check constraint</strong>. If you know what a check constraint is&#8230;bravo, you my friend are an elitist!</p>
<p>I forgot about these interviews but this question <a href="http://stackoverflow.com/questions/10002798/overriding-the-maximum-value-of-a-bigint-datatype-in-mssql">Overriding the maximum value of a bigint datatype in MSSQL</a> made it reappear like a phoenix that rises from the ashes.</p>
<p>Let&#8217;s look at some examples</p>
<p>First create this table</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
</pre></td><td class="de1"><pre class="de1"><span class="kw1">create</span> <span class="kw1">table</span> SomeTable<span class="br0">&#40;</span>code <span class="kw1">char</span><span class="br0">&#40;</span><span class="nu0">3</span><span class="br0">&#41;</span> not null<span class="br0">&#41;</span>
GO</pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">create table SomeTable(code char(3) not null)
GO</pre></div></div>

<p>Now let&#8217;s say we want to restrict the values that you can insert to only accept characters from a through z, here is what the constraint looks like</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
</pre></td><td class="de1"><pre class="de1"><span class="kw1">alter</span> <span class="kw1">table</span> SomeTable <span class="kw1">add</span> &nbsp;<span class="kw1">constraint</span> ck_bla
<span class="kw1">check</span> <span class="br0">&#40;</span>code like <span class="st0">'[a-Z][a-Z][a-Z]'</span> <span class="br0">&#41;</span>
GO</pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">alter table SomeTable add  constraint ck_bla
check (code like '[a-Z][a-Z][a-Z]' )
GO</pre></div></div>

<p>If you now run the following insert statement&#8230;.</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
</pre></td><td class="de1"><pre class="de1"><span class="kw1">insert</span> SomeTable <span class="kw1">values</span> <span class="br0">&#40;</span><span class="st0">'123'</span><span class="br0">&#41;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">insert SomeTable values ('123')</pre></div></div>

<p>You get this error message back</p>
<p><em>Msg 547, Level 16, State 0, Line 1<br />
The INSERT statement conflicted with the CHECK constraint &#8220;ck_bla&#8221;. The conflict occurred in database &#8220;tempdb&#8221;, table &#8220;dbo.SomeTable&#8221;, column &#8216;code&#8217;.<br />
The statement has been terminated.</em></p>
<p>What if you have a tinyint column but you want to make sure that values are less then 100? Easy as well, first create this table</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
</pre></td><td class="de1"><pre class="de1"><span class="kw1">create</span> <span class="kw1">table</span> SomeTable2<span class="br0">&#40;</span>SomeCol <span class="kw1">tinyint</span> not null<span class="br0">&#41;</span>
GO</pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">create table SomeTable2(SomeCol tinyint not null)
GO</pre></div></div>

<p>Now add this constraint</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
</pre></td><td class="de1"><pre class="de1"><span class="kw1">alter</span> <span class="kw1">table</span> SomeTable2 <span class="kw1">add</span> &nbsp;<span class="kw1">constraint</span> ck_SomeTable2
<span class="kw1">check</span> <span class="br0">&#40;</span>SomeCol <span class="sy0">&lt;</span> <span class="nu0">100</span> <span class="br0">&#41;</span>
GO</pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">alter table SomeTable2 add  constraint ck_SomeTable2
check (SomeCol &lt; 100 )
GO</pre></div></div>

<p>Try to insert the value 100</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
</pre></td><td class="de1"><pre class="de1"><span class="kw1">insert</span> SomeTable2 <span class="kw1">values</span> <span class="br0">&#40;</span><span class="st0">'100'</span><span class="br0">&#41;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">insert SomeTable2 values ('100')</pre></div></div>

<p><em>Msg 547, Level 16, State 0, Line 2<br />
The INSERT statement conflicted with the CHECK constraint &#8220;ck_SomeTable2&#8221;. The conflict occurred in database &#8220;tempdb&#8221;, table &#8220;dbo.SomeTable2&#8221;, column &#8216;SomeCol&#8217;.<br />
The statement has been terminated.</em></p>
<p>Okay, what happens if you try to insert -1?</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
</pre></td><td class="de1"><pre class="de1"><span class="kw1">insert</span> SomeTable2 <span class="kw1">values</span> <span class="br0">&#40;</span><span class="st0">'-1'</span><span class="br0">&#41;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">insert SomeTable2 values ('-1')</pre></div></div>

<p><em>Msg 244, Level 16, State 1, Line 1<br />
The conversion of the varchar value &#8216;-1&#8217; overflowed an INT1 column. Use a larger integer column.<br />
The statement has been terminated.</em></p>
<p>As you can see you also get an error, however this is not from the constraint but the error is raised because the tinyint datatype can&#8217;t be less than 0</p>
<p>Check constraint can also be tied to a user defined function and you can also use regular expressions. Ranges can also be used, for example<em> salary >= 15000 AND salary <= 100000</em></p>
<p>Check (no pun intended) out this post also <a href="/index.php/DataMgmt/DBProgramming/sql-server-does-support-regular-expressi">SQL Server does support regular expressions in check constraints, triggers are not always needed</a>, it has examples about creating a case sensitive check constraint</p>
]]></content:encoded>
			<wfw:commentRss>/index.php/datamgmt/datadesign/dammit-people-get-to-know/feed/</wfw:commentRss>
		<slash:comments>3</slash:comments>
		</item>
		<item>
		<title>How to connect to SQL Server when your default database is unavailable</title>
		<link>/index.php/datamgmt/datadesign/how-to-connect-to-sql/</link>
		<comments>/index.php/datamgmt/datadesign/how-to-connect-to-sql/#comments</comments>
		<pubDate>Sat, 14 Jan 2012 18:11:00 +0000</pubDate>
		<dc:creator><![CDATA[SQLDenis]]></dc:creator>
				<category><![CDATA[Data Modelling and Design]]></category>
		<category><![CDATA[Database Programming]]></category>
		<category><![CDATA[Microsoft SQL Server]]></category>
		<category><![CDATA[Microsoft SQL Server Admin]]></category>
		<category><![CDATA[connecting]]></category>
		<category><![CDATA[connection]]></category>
		<category><![CDATA[how to]]></category>
		<category><![CDATA[sql server 2005]]></category>
		<category><![CDATA[sql server 2008]]></category>
		<category><![CDATA[tip]]></category>

		<guid isPermaLink="false">/index.php/2012/01/how-to-connect-to-sql/</guid>
		<description><![CDATA[I was restoring a TB+ sized database on our staging database today. Someone needed to use a different database but he couldn't login because the database I was restoring was the default database for the login he was using. I told him to click on the Opt&#8230;]]></description>
				<content:encoded><![CDATA[<p>I was restoring a TB+ sized database on our staging database today. Someone needed to use a different database but he couldn&#8217;t login because the database I was restoring was the default database for the login he was using. I told him to click on the Options button in the connection dialog and specify another database. I guess there was an misunderstanding because he couldn&#8217;t get it to work. This means it is time for a blog post.</p>
<p>First, let&#8217;s create two databases</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
</pre></td><td class="de1"><pre class="de1"><span class="kw1">CREATE</span> <span class="kw1">DATABASE</span> Test1
GO
&nbsp;
<span class="kw1">CREATE</span> <span class="kw1">DATABASE</span> Test2
GO</pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">CREATE DATABASE Test1
GO

CREATE DATABASE Test2
GO</pre></div></div>

<p>Now create a new login named TestLogin with a password of Test</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
</pre></td><td class="de1"><pre class="de1"><span class="kw1">USE</span> <span class="br0">&#91;</span>master<span class="br0">&#93;</span>
GO
<span class="kw1">CREATE</span> LOG<span class="sy0">IN</span> <span class="br0">&#91;</span>TestLogin<span class="br0">&#93;</span> <span class="kw1">WITH</span> PASSW<span class="sy0">OR</span>D<span class="sy0">=</span>N<span class="st0">'Test'</span>, DEFAULT_DATABASE<span class="sy0">=</span><span class="br0">&#91;</span>Test1<span class="br0">&#93;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">USE [master]
GO
CREATE LOGIN [TestLogin] WITH PASSWORD=N'Test', DEFAULT_DATABASE=[Test1]</pre></div></div>

<p>Add the login we just created to the Test1 database and make the login part of the db_owner role</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
</pre></td><td class="de1"><pre class="de1"><span class="kw1">USE</span> <span class="br0">&#91;</span>Test1<span class="br0">&#93;</span>
GO
<span class="kw1">CREATE</span> <span class="kw1">USER</span> <span class="br0">&#91;</span>TestLogin<span class="br0">&#93;</span> <span class="kw1">FOR</span> LOG<span class="sy0">IN</span> <span class="br0">&#91;</span>TestLogin<span class="br0">&#93;</span>
GO
<span class="kw1">USE</span> <span class="br0">&#91;</span>Test1<span class="br0">&#93;</span>
GO
<span class="kw1">ALTER</span> <span class="kw1">ROLE</span> <span class="br0">&#91;</span>db_owner<span class="br0">&#93;</span> <span class="kw1">ADD</span> MEMBER <span class="br0">&#91;</span>TestLogin<span class="br0">&#93;</span>
GO</pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">USE [Test1]
GO
CREATE USER [TestLogin] FOR LOGIN [TestLogin]
GO
USE [Test1]
GO
ALTER ROLE [db_owner] ADD MEMBER [TestLogin]
GO</pre></div></div>

<p>Add the login we just created to the Test2 database and make the login part of the db_owner role</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
</pre></td><td class="de1"><pre class="de1"><span class="kw1">USE</span> <span class="br0">&#91;</span>Test2<span class="br0">&#93;</span>
GO
<span class="kw1">CREATE</span> <span class="kw1">USER</span> <span class="br0">&#91;</span>TestLogin<span class="br0">&#93;</span> <span class="kw1">FOR</span> LOG<span class="sy0">IN</span> <span class="br0">&#91;</span>TestLogin<span class="br0">&#93;</span>
GO
<span class="kw1">USE</span> <span class="br0">&#91;</span>Test2<span class="br0">&#93;</span>
GO
<span class="kw1">ALTER</span> <span class="kw1">ROLE</span> <span class="br0">&#91;</span>db_owner<span class="br0">&#93;</span> <span class="kw1">ADD</span> MEMBER <span class="br0">&#91;</span>TestLogin<span class="br0">&#93;</span>
GO</pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">USE [Test2]
GO
CREATE USER [TestLogin] FOR LOGIN [TestLogin]
GO
USE [Test2]
GO
ALTER ROLE [db_owner] ADD MEMBER [TestLogin]
GO</pre></div></div>

<p>Make sure that you can login with the TestLogin account</p>
<p>Now that you know that you can login with the TestLogin account, use another account and put the Test1 in offline mode</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
</pre></td><td class="de1"><pre class="de1"><span class="kw1">ALTER</span> <span class="kw1">DATABASE</span> Test1 <span class="kw1">SET</span> OFFL<span class="sy0">IN</span>E</pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">ALTER DATABASE Test1 SET OFFLINE</pre></div></div>

<p>Now if you try to login with the TestLogin account, you will see the following error</p>
<p><em><strong>Login failed for user &#8216;TestLogin&#8217;. (Microsoft SQL Server, Error: 18456)</strong></em></p>
<p>Here is what you need to do, on the connect to server window, click on the options button</p>
<div class="image_block"><a href="/wp-content/uploads/blogs/DataMgmt/Denis/Options.PNG?mtime=1326571296"><img alt="" src="/wp-content/uploads/blogs/DataMgmt/Denis/Options.PNG?mtime=1326571296" width="405" height="204" /></a></div>
<p>That will open the Connection Properties tab</p>
<div class="image_block"><a href="/wp-content/uploads/blogs/DataMgmt/Denis/BrowseServer.PNG?mtime=1326571269"><img alt="" src="/wp-content/uploads/blogs/DataMgmt/Denis/BrowseServer.PNG?mtime=1326571269" width="401" height="348" /></a></div>
<p>Whatever you do, do not select <em>Browse server&#8230;</em> from the connect to database option, if you do that you will get the following error</p>
<div class="image_block"><a href="/wp-content/uploads/blogs/DataMgmt/Denis/BrowseServerError.PNG?mtime=1326571280"><img alt="" src="/wp-content/uploads/blogs/DataMgmt/Denis/BrowseServerError.PNG?mtime=1326571280" width="614" height="167" /></a></div>
<p>Just type the database name of the database that is not offline instead
<div class="image_block"><a href="/wp-content/uploads/blogs/DataMgmt/Denis/Test2.PNG?mtime=1326571594"><img alt="" src="/wp-content/uploads/blogs/DataMgmt/Denis/Test2.PNG?mtime=1326571594" width="388" height="174" /></a></div>
<p>As you will see you can connect without a problem now</p>
<p>Hopefully this will help someone else in the future also</p>
]]></content:encoded>
			<wfw:commentRss>/index.php/datamgmt/datadesign/how-to-connect-to-sql/feed/</wfw:commentRss>
		<slash:comments>2</slash:comments>
		</item>
		<item>
		<title>SQL Advent 2011 Day 15: Joins</title>
		<link>/index.php/datamgmt/datadesign/sql-advent-2011-day-15/</link>
		<comments>/index.php/datamgmt/datadesign/sql-advent-2011-day-15/#comments</comments>
		<pubDate>Fri, 16 Dec 2011 00:37:00 +0000</pubDate>
		<dc:creator><![CDATA[SQLDenis]]></dc:creator>
				<category><![CDATA[Data Modelling and Design]]></category>
		<category><![CDATA[Database Programming]]></category>
		<category><![CDATA[Microsoft SQL Server]]></category>
		<category><![CDATA[Microsoft SQL Server Admin]]></category>
		<category><![CDATA[how to]]></category>
		<category><![CDATA[joins]]></category>
		<category><![CDATA[sql server 2005]]></category>
		<category><![CDATA[sql server 2008]]></category>
		<category><![CDATA[tip]]></category>

		<guid isPermaLink="false">/index.php/2011/12/sql-advent-2011-day-15/</guid>
		<description><![CDATA[In my Are you ready for SQL Server 2012 or are you still partying like it is 1999? post, I wrote about how you should start using SQL Server 2005 and SQL Server 2008 functionality now in order to prepare for SQL Server 2012. I still see tons of code tha&#8230;]]></description>
				<content:encoded><![CDATA[<p>In my <a href="/index.php/DataMgmt/DataDesign/are-you-ready-for-sql">Are you ready for SQL Server 2012 or are you still partying like it is 1999?</a> post, I wrote about how you should start using SQL Server 2005 and SQL Server 2008 functionality now in order to prepare for SQL Server 2012. I still see tons of code that is written in the pre 2005 style and people still keep using those functions, procs and statements even though SQL Server 2005 and 2008 have much better functionality.</p>
<p>Today we are going to take a look at joins. SQL Server supports the ANSI SQL-92 (new style) syntax and the ANSI-SQL-89 (old style) syntax. Let&#8217;s take a look at both for INNER, OUTER and CROSS joins. This post is not about JOIN fundamentals, the internet is full of those and I won&#8217;t go into too much detail here, this post is mostly about showing you the difference between new and old style syntax.</p>
<p>Before we start, create these two extremely simple tables</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
</pre></td><td class="de1"><pre class="de1"><span class="kw1">CREATE</span> <span class="kw1">TABLE</span> Test1<span class="br0">&#40;</span>id <span class="kw1">int</span><span class="br0">&#41;</span>
go
&nbsp;
<span class="kw1">INSERT</span> Test1 <span class="kw1">VALUES</span><span class="br0">&#40;</span><span class="nu0">1</span><span class="br0">&#41;</span>
<span class="kw1">INSERT</span> Test1 <span class="kw1">VALUES</span><span class="br0">&#40;</span><span class="nu0">2</span><span class="br0">&#41;</span>
<span class="kw1">INSERT</span> Test1 <span class="kw1">VALUES</span><span class="br0">&#40;</span><span class="nu0">3</span><span class="br0">&#41;</span>
<span class="kw1">INSERT</span> Test1 <span class="kw1">VALUES</span><span class="br0">&#40;</span><span class="nu0">4</span><span class="br0">&#41;</span>
<span class="kw1">INSERT</span> Test1 <span class="kw1">VALUES</span><span class="br0">&#40;</span><span class="nu0">5</span><span class="br0">&#41;</span>
&nbsp;
&nbsp;
<span class="kw1">CREATE</span> <span class="kw1">TABLE</span> Test2<span class="br0">&#40;</span>id <span class="kw1">int</span><span class="br0">&#41;</span>
go
&nbsp;
<span class="kw1">INSERT</span> Test2 <span class="kw1">VALUES</span><span class="br0">&#40;</span><span class="nu0">1</span><span class="br0">&#41;</span>
<span class="kw1">INSERT</span> Test2 <span class="kw1">VALUES</span><span class="br0">&#40;</span><span class="nu0">2</span><span class="br0">&#41;</span>
<span class="kw1">INSERT</span> Test2 <span class="kw1">VALUES</span><span class="br0">&#40;</span><span class="nu0">3</span><span class="br0">&#41;</span>
<span class="kw1">INSERT</span> Test2 <span class="kw1">VALUES</span><span class="br0">&#40;</span><span class="nu0">4</span><span class="br0">&#41;</span>
<span class="kw1">INSERT</span> Test2 <span class="kw1">VALUES</span><span class="br0">&#40;</span><span class="nu0">6</span><span class="br0">&#41;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">CREATE TABLE Test1(id int)
go

INSERT Test1 VALUES(1)
INSERT Test1 VALUES(2)
INSERT Test1 VALUES(3)
INSERT Test1 VALUES(4)
INSERT Test1 VALUES(5)


CREATE TABLE Test2(id int)
go

INSERT Test2 VALUES(1)
INSERT Test2 VALUES(2)
INSERT Test2 VALUES(3)
INSERT Test2 VALUES(4)
INSERT Test2 VALUES(6)</pre></div></div>

<p>As you can see, each table has one row that does not exists in the other table</p>
<h2>The INNER JOIN</h2>
<p>Here is how you do an INNER JOIN in the old style syntax</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
</pre></td><td class="de1"><pre class="de1"><span class="kw1">SELECT</span> <span class="sy0">*</span> <span class="kw1">FROM</span> Test1 t1,Test2 t2
<span class="kw1">WHERE</span> t1.<span class="me1">id</span> <span class="sy0">=</span> t2.<span class="me1">id</span> </pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">SELECT * FROM Test1 t1,Test2 t2
WHERE t1.id = t2.id </pre></div></div>

<p>Here is how you do it with the new style syntax</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
</pre></td><td class="de1"><pre class="de1"><span class="kw1">SELECT</span> <span class="sy0">*</span> <span class="kw1">FROM</span> Test1 t1
<span class="sy0">JOIN</span> Test2 t2
<span class="kw1">ON</span> t1.<span class="me1">id</span> <span class="sy0">=</span> t2.<span class="me1">id</span> </pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">SELECT * FROM Test1 t1
JOIN Test2 t2
ON t1.id = t2.id </pre></div></div>

<p>Both will return the following results set</p>
<pre>id	id
1	1
2	2
3	3
4	4</pre>
<p>The danger with the old style syntax is that you can forget the WHERE clause, with the new style syntax you will get an error</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
</pre></td><td class="de1"><pre class="de1"><span class="kw1">SELECT</span> <span class="sy0">*</span> <span class="kw1">FROM</span> Test1 t1
<span class="sy0">JOIN</span> Test2 t2</pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">SELECT * FROM Test1 t1
JOIN Test2 t2</pre></div></div>

<p><em>Msg 102, Level 15, State 1, Line 2<br />
Incorrect syntax near &#8216;t2&#8217;.</em></p>
<p>Now run this</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
</pre></td><td class="de1"><pre class="de1"><span class="kw1">SELECT</span> <span class="sy0">*</span> <span class="kw1">FROM</span> Test1 t1,Test2 t2 </pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">SELECT * FROM Test1 t1,Test2 t2 </pre></div></div>

<p>Output</p>
<pre>id	id
1	1
2	1
3	1
4	1
5	1
1	2
2	2
3	2
4	2
5	2
1	3
2	3
3	3
4	3
5	3
1	4
2	4
3	4
4	4
5	4
1	6
2	6
3	6
4	6
5	6</pre>
<p>As you can see, that created a Cartesian Product or CROSS JOIN, in the next section we will take a look at that</p>
<h2>The CROSS JOIN</h2>
<p>A CROSS JOIN or Cartesian Product will take each row in one table and match that with all rows from the second table. The size of a Cartesian product result set is the number of rows in the first table multiplied by the number of rows in the second table, in our case it is 5 x 5 = 25 rows</p>
<p>Here is the old style syntax we saw before</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
</pre></td><td class="de1"><pre class="de1"><span class="kw1">SELECT</span> <span class="sy0">*</span> <span class="kw1">FROM</span> Test1 t1,Test2 t2</pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">SELECT * FROM Test1 t1,Test2 t2</pre></div></div>

<p>Here is the new style syntax</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
</pre></td><td class="de1"><pre class="de1"><span class="kw1">SELECT</span> <span class="sy0">*</span> <span class="kw1">FROM</span> Test1
<span class="sy0">CROSS</span> <span class="sy0">JOIN</span> Test2</pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">SELECT * FROM Test1
CROSS JOIN Test2</pre></div></div>

<p>Output</p>
<pre>id	id
1	1
2	1
3	1
4	1
5	1
1	2
2	2
3	2
4	2
5	2
1	3
2	3
3	3
4	3
5	3
1	4
2	4
3	4
4	4
5	4
1	6
2	6
3	6
4	6
5	6</pre>
<p>I like the new style syntax much better, your intentions are clear, I know by looking at the code that the developer wanted a CROSS JOIN, with the old style syntax you always wonder if somehow they forgot the WHERE clause</p>
<p>Here is another way to do a CROSS JOIN, you can use CROSS APPLY</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
</pre></td><td class="de1"><pre class="de1"><span class="kw1">SELECT</span> <span class="sy0">*</span> <span class="kw1">FROM</span> Test1
<span class="sy0">CROSS</span> APPLY Test2</pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">SELECT * FROM Test1
CROSS APPLY Test2</pre></div></div>

<p>I will cover CROSS APPLY and OUTER APPLY in another post</p>
<h2>The OUTER JOIN</h2>
<p>The OUTER JOIN will take all rows from one table and match all the rows from the other table, when there is no match a row with NULLS will be returned. Let&#8217;s take a look</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
</pre></td><td class="de1"><pre class="de1"><span class="kw1">SELECT</span> <span class="sy0">*</span> <span class="kw1">FROM</span> Test1 t1
<span class="kw1">LEFT</span> <span class="sy0">OUTER</span> <span class="sy0">JOIN</span> Test2 t2
<span class="kw1">ON</span> t1.<span class="me1">id</span> <span class="sy0">=</span> t2.<span class="me1">id</span> </pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">SELECT * FROM Test1 t1
LEFT OUTER JOIN Test2 t2
ON t1.id = t2.id </pre></div></div>

<p>Output</p>
<pre>1	1
2	2
3	3
4	4
5	NULL</pre>
<p>As you can see for id 5, there is no matching row in table Test2 so a NULL is returned</p>
<p>Here is what the old style syntax looks like, go ahead and run it</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
</pre></td><td class="de1"><pre class="de1"><span class="kw1">SELECT</span> <span class="sy0">*</span> <span class="kw1">FROM</span> Test1 t1,Test2 t2
<span class="kw1">WHERE</span> t1.<span class="me1">id</span> <span class="sy0">*=</span> t2.<span class="me1">id</span> </pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">SELECT * FROM Test1 t1,Test2 t2
WHERE t1.id *= t2.id </pre></div></div>

<p>Msg 102, Level 15, State 1, Line 2<br />
Incorrect syntax near &#8216;*=&#8217;.</p>
<p>That is right, this syntax is deprecated and you won&#8217;t be able to use it anymore, get in the habit of using the OUTER JOIN syntax. BTW OUTER is optional, you can just specify LEFT JOIN, the queries below are identical</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
</pre></td><td class="de1"><pre class="de1"><span class="kw1">SELECT</span> <span class="sy0">*</span> <span class="kw1">FROM</span> Test1 t1
<span class="kw1">LEFT</span> <span class="sy0">JOIN</span> Test2 t2
<span class="kw1">ON</span> t1.<span class="me1">id</span> <span class="sy0">=</span> t2.<span class="me1">id</span> 
&nbsp;
&nbsp;
<span class="kw1">SELECT</span> <span class="sy0">*</span> <span class="kw1">FROM</span> Test1 t1
<span class="kw1">LEFT</span> <span class="sy0">OUTER</span> <span class="sy0">JOIN</span> Test2 t2
<span class="kw1">ON</span> t1.<span class="me1">id</span> <span class="sy0">=</span> t2.<span class="me1">id</span> </pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">SELECT * FROM Test1 t1
LEFT JOIN Test2 t2
ON t1.id = t2.id 


SELECT * FROM Test1 t1
LEFT OUTER JOIN Test2 t2
ON t1.id = t2.id </pre></div></div>

<p>The RIGHT JOIN is the same as the LEFT JOIN but reversed</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
</pre></td><td class="de1"><pre class="de1"><span class="kw1">SELECT</span> <span class="sy0">*</span> <span class="kw1">FROM</span> Test1 t1
<span class="kw1">RIGHT</span> <span class="sy0">JOIN</span> Test2 t2
<span class="kw1">ON</span> t1.<span class="me1">id</span> <span class="sy0">=</span> t2.<span class="me1">id</span> </pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">SELECT * FROM Test1 t1
RIGHT JOIN Test2 t2
ON t1.id = t2.id </pre></div></div>

<p></p>
<pre>id      id
1	1
2	2
3	3
4	4
NULL	6</pre>
<p>This two queries will give the exact same output</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
</pre></td><td class="de1"><pre class="de1"><span class="kw1">SELECT</span> t1.<span class="sy0">*</span>,t2.<span class="sy0">*</span> <span class="kw1">FROM</span> Test1 t1
<span class="kw1">RIGHT</span> <span class="sy0">JOIN</span> Test2 t2
<span class="kw1">ON</span> t1.<span class="me1">id</span> <span class="sy0">=</span> t2.<span class="me1">id</span> 
&nbsp;
<span class="kw1">SELECT</span> t1.<span class="sy0">*</span>,t2.<span class="sy0">*</span> &nbsp;<span class="kw1">FROM</span> Test2 t2
<span class="kw1">LEFT</span> <span class="sy0">JOIN</span> Test1 t1
<span class="kw1">ON</span> t1.<span class="me1">id</span> <span class="sy0">=</span> t2.<span class="me1">id</span> </pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">SELECT t1.*,t2.* FROM Test1 t1
RIGHT JOIN Test2 t2
ON t1.id = t2.id 

SELECT t1.*,t2.*  FROM Test2 t2
LEFT JOIN Test1 t1
ON t1.id = t2.id </pre></div></div>

<p>As you can see if you use RIGHT instead of LEFT and flip the tables around, it is the same exact query</p>
<p>Just as with the LEFT JOIN, you can use the old style RIGHT JOIN syntax anymore</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
</pre></td><td class="de1"><pre class="de1"><span class="kw1">SELECT</span> <span class="sy0">*</span> <span class="kw1">FROM</span> Test1 t1,Test2 t2
<span class="kw1">WHERE</span> t1.<span class="me1">id</span> <span class="sy0">=*</span> t2.<span class="me1">id</span> </pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">SELECT * FROM Test1 t1,Test2 t2
WHERE t1.id =* t2.id </pre></div></div>

<p>Msg 102, Level 15, State 1, Line 2<br />
Incorrect syntax near &#8216;*&#8217;.</p>
<p>A FULL OUTER JOIN will do an OUTER JOIN on both tables, whatever doesn match in either table will get a NULL in the result</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
</pre></td><td class="de1"><pre class="de1"><span class="kw1">SELECT</span> t1.<span class="sy0">*</span>,t2.<span class="sy0">*</span> &nbsp;<span class="kw1">FROM</span> Test2 t2
<span class="kw1">FULL</span> <span class="sy0">OUTER</span> <span class="sy0">JOIN</span> Test1 t1
<span class="kw1">ON</span> t1.<span class="me1">id</span> <span class="sy0">=</span> t2.<span class="me1">id</span> </pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">SELECT t1.*,t2.*  FROM Test2 t2
FULL OUTER JOIN Test1 t1
ON t1.id = t2.id </pre></div></div>

<p></p>
<pre>id	id
1	1
2	2
3	3
4	4
NULL	6
5	NULL</pre>
<p>As you can see each column has one NULL for the row missing in the table.</p>
<p>Just as with LEFT and RIGHT JOINS, OUTER is optional, you can leave it out</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
</pre></td><td class="de1"><pre class="de1"><span class="kw1">SELECT</span> t1.<span class="sy0">*</span>,t2.<span class="sy0">*</span> &nbsp;<span class="kw1">FROM</span> Test2 t2
<span class="kw1">FULL</span> <span class="sy0">JOIN</span> Test1 t1
<span class="kw1">ON</span> t1.<span class="me1">id</span> <span class="sy0">=</span> t2.<span class="me1">id</span> </pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">SELECT t1.*,t2.*  FROM Test2 t2
FULL JOIN Test1 t1
ON t1.id = t2.id </pre></div></div>

<p>That is it for today&#8217;s post, come back tomorrow for OUTER and CROSS APPLY</p>
]]></content:encoded>
			<wfw:commentRss>/index.php/datamgmt/datadesign/sql-advent-2011-day-15/feed/</wfw:commentRss>
		<slash:comments>1</slash:comments>
		</item>
	</channel>
</rss>
