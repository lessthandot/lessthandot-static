<?xml version="1.0" encoding="UTF-8"?><rss version="2.0"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:atom="http://www.w3.org/2005/Atom"
	xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
	xmlns:slash="http://purl.org/rss/1.0/modules/slash/"
	>

<channel>
	<title>testing &#8211; LessthanDot</title>
	<atom:link href="/index.php/tag/testing/feed/" rel="self" type="application/rss+xml" />
	<link>/</link>
	<description>A Technical Community for IT Professionals</description>
	<lastBuildDate>Sat, 09 Mar 2019 12:50:36 +0000</lastBuildDate>
	<language>en-US</language>
	<sy:updatePeriod>hourly</sy:updatePeriod>
	<sy:updateFrequency>1</sy:updateFrequency>
	<generator>https://wordpress.org/?v=4.6.1</generator>
	<item>
		<title>SSIS Performance Testing</title>
		<link>/index.php/datamgmt/ssis/ssis-performance-testing/</link>
		<comments>/index.php/datamgmt/ssis/ssis-performance-testing/#comments</comments>
		<pubDate>Tue, 08 Apr 2014 07:54:01 +0000</pubDate>
		<dc:creator><![CDATA[Koen Verbeeck]]></dc:creator>
				<category><![CDATA[SSIS]]></category>
		<category><![CDATA[integration services]]></category>
		<category><![CDATA[performance]]></category>
		<category><![CDATA[ssis]]></category>
		<category><![CDATA[syndicated]]></category>
		<category><![CDATA[testing]]></category>
		<category><![CDATA[tuning]]></category>

		<guid isPermaLink="false">/?p=2549</guid>
		<description><![CDATA[I had to do some performance testing for an upcoming MSSQLTips article and I thought I’d share the framework I used in a blog post. First of all we have to log start and end dates of the package to a table so we can easily calculate the duration a package took to finish. This [&#8230;]]]></description>
				<content:encoded><![CDATA[<p>I had to do some performance testing for an upcoming <a href="http://www.mssqltips.com/">MSSQLTips</a> article and I thought I’d share the framework I used in a blog post.</p>
<p>First of all we have to log start and end dates of the package to a table so we can easily calculate the duration a package took to finish. This can probably be calculated from the SSIS catalog as well, but I was a bit too <del>busy</del> lazy to find out how to do this. Anyway, the logging table is created using the following statement:</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
</pre></td><td class="de1"><pre class="de1"><span class="kw1">IF</span> <span class="sy0">NOT</span> <span class="sy0">EXISTS</span> <span class="br0">&#40;</span><span class="kw1">SELECT</span> <span class="sy0">*</span> <span class="kw1">FROM</span> sys.<span class="me1">objects</span> <span class="kw1">WHERE</span> <span class="kw2">object_id</span> <span class="sy0">=</span> <span class="kw2">OBJECT_ID</span><span class="br0">&#40;</span>N<span class="st0">'[dbo].[PackageLogging]'</span><span class="br0">&#41;</span> <span class="sy0">AND</span> type in <span class="br0">&#40;</span>N<span class="st0">'U'</span><span class="br0">&#41;</span><span class="br0">&#41;</span>
<span class="kw1">BEGIN</span>
&nbsp; &nbsp; <span class="kw1">CREATE</span> <span class="kw1">TABLE</span> <span class="br0">&#91;</span>dbo<span class="br0">&#93;</span>.<span class="br0">&#91;</span>PackageLogging<span class="br0">&#93;</span><span class="br0">&#40;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#91;</span>ID<span class="br0">&#93;</span> <span class="br0">&#91;</span><span class="kw1">int</span><span class="br0">&#93;</span> <span class="kw1">IDENTITY</span><span class="br0">&#40;</span><span class="nu0">1</span>,<span class="nu0">1</span><span class="br0">&#41;</span> <span class="sy0">NOT</span> <span class="sy0">NULL</span>,
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#91;</span>RunID<span class="br0">&#93;</span> <span class="br0">&#91;</span><span class="kw1">int</span><span class="br0">&#93;</span> <span class="sy0">NOT</span> <span class="sy0">NULL</span>,
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#91;</span>PackageName<span class="br0">&#93;</span> <span class="br0">&#91;</span><span class="kw1">varchar</span><span class="br0">&#93;</span><span class="br0">&#40;</span><span class="nu0">50</span><span class="br0">&#41;</span> <span class="sy0">NOT</span> <span class="sy0">NULL</span>,
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#91;</span>StartDate<span class="br0">&#93;</span> <span class="br0">&#91;</span>datetime2<span class="br0">&#93;</span><span class="br0">&#40;</span><span class="nu0">7</span><span class="br0">&#41;</span> <span class="sy0">NOT</span> <span class="sy0">NULL</span>,
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#91;</span>EndDate<span class="br0">&#93;</span> <span class="br0">&#91;</span>datetime2<span class="br0">&#93;</span><span class="br0">&#40;</span><span class="nu0">7</span><span class="br0">&#41;</span> <span class="sy0">NULL</span>
&nbsp; &nbsp; <span class="br0">&#41;</span>;
<span class="kw1">END</span>
GO</pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[PackageLogging]') AND type in (N'U'))
BEGIN
	CREATE TABLE [dbo].[PackageLogging](
		[ID] [int] IDENTITY(1,1) NOT NULL,
		[RunID] [int] NOT NULL,
		[PackageName] [varchar](50) NOT NULL,
		[StartDate] [datetime2](7) NOT NULL,
		[EndDate] [datetime2](7) NULL
	);
END
GO</pre></div></div>

<p>The RunID column is populated by a package parameter; I will come back to this later on.</p>
<p><a href="/wp-content/uploads/2014/04/TestSSISPerf_parameter.png"><img class="alignnone size-full wp-image-2558" alt="TestSSISPerf_parameter" src="/wp-content/uploads/2014/04/TestSSISPerf_parameter.png" width="559" height="115" srcset="/wp-content/uploads/2014/04/TestSSISPerf_parameter.png 559w, /wp-content/uploads/2014/04/TestSSISPerf_parameter-300x61.png 300w" sizes="(max-width: 559px) 100vw, 559px" /></a></p>
<p>The package starts with an Execute SQL Task to log the start. I use the following SSIS expression to construct the SQL statement on the fly, allowing you to easy copy-paste the logging task between packages.</p>
<blockquote><p>&#8220;INSERT INTO dbo.PackageLogging(RunID, PackageName,StartDate) VALUES (&#8221; +  (DT_STR,10,1252)@[$Package::RunID] + &#8220;,'&#8221; +  @[System::PackageName] + &#8220;&#8216;,SYSDATETIME());&#8221;</p></blockquote>
<p>At the end of the control flow, there is an Execute SQL Task that updates the EndDate of the previously inserted row. The expression looks like this:</p>
<blockquote><p>&#8220;UPDATE dbo.PackageLogging SET [EndDate] = SYSDATETIME() WHERE RunID = &#8221; + (DT_STR,10,1252)  @[$Package::RunID] + &#8221; AND PackageName = &#8216;&#8221; +  @[System::PackageName] + &#8220;&#8216;;&#8221;</p></blockquote>
<p>The RunID parameter is important to link those two Execute SQL Tasks together. A typical control flow looks like this:</p>
<p><a href="/wp-content/uploads/2014/04/TestSSISPerf_controllflow.png"><img class="alignnone  wp-image-2560" alt="TestSSISPerf_controllflow" src="/wp-content/uploads/2014/04/TestSSISPerf_controllflow.png" width="286" height="329" srcset="/wp-content/uploads/2014/04/TestSSISPerf_controllflow.png 358w, /wp-content/uploads/2014/04/TestSSISPerf_controllflow-261x300.png 261w" sizes="(max-width: 286px) 100vw, 286px" /></a></p>
<p>Logging is the first step, now we have to run the package of course. I created a stored procedure that allows me to easily start a package in the SSIS catalog.</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
</pre></td><td class="de1"><pre class="de1"><span class="kw1">CREATE</span> <span class="kw1">PROC</span> <span class="br0">&#91;</span>dbo<span class="br0">&#93;</span>.<span class="br0">&#91;</span>RunPackage<span class="br0">&#93;</span>
&nbsp; &nbsp; <span class="br0">&#40;</span>@RunID &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">INT</span>
&nbsp; &nbsp; ,@PackageName &nbsp; <span class="kw1">VARCHAR</span><span class="br0">&#40;</span><span class="nu0">50</span><span class="br0">&#41;</span>
&nbsp; &nbsp; ,@FolderName&nbsp; &nbsp; <span class="kw1">VARCHAR</span><span class="br0">&#40;</span><span class="nu0">50</span><span class="br0">&#41;</span>
&nbsp; &nbsp; ,@ProjectName &nbsp; <span class="kw1">VARCHAR</span><span class="br0">&#40;</span><span class="nu0">50</span><span class="br0">&#41;</span>
&nbsp; &nbsp; ,@Synchronized&nbsp; <span class="kw1">BIT</span> <span class="sy0">=</span> <span class="nu0">1</span> <span class="co1">-- run synchronously by default</span>
&nbsp; &nbsp; <span class="br0">&#41;</span>
<span class="kw1">AS</span>
<span class="kw1">DECLARE</span> @execution_id <span class="kw1">BIGINT</span>;
&nbsp;
<span class="kw1">EXEC</span> <span class="br0">&#91;</span>SSISDB<span class="br0">&#93;</span>.<span class="br0">&#91;</span><span class="kw1">catalog</span><span class="br0">&#93;</span>.<span class="br0">&#91;</span>create_execution<span class="br0">&#93;</span>
&nbsp; &nbsp; &nbsp;@package_name&nbsp; &nbsp; &nbsp; <span class="sy0">=</span> @PackageName
&nbsp; &nbsp; ,@execution_id&nbsp; &nbsp; &nbsp; <span class="sy0">=</span> @execution_id <span class="kw1">OUTPUT</span>
&nbsp; &nbsp; ,@folder_name &nbsp; &nbsp; &nbsp; <span class="sy0">=</span> @FolderName
&nbsp; &nbsp; ,@project_name&nbsp; &nbsp; &nbsp; <span class="sy0">=</span> @ProjectName
&nbsp; &nbsp; ,@use32bitruntime &nbsp; <span class="sy0">=</span> <span class="kw1">False</span>
&nbsp; &nbsp; ,@reference_id&nbsp; &nbsp; &nbsp; <span class="sy0">=</span> <span class="sy0">NULL</span>;
&nbsp;
<span class="co1">--SELECT @execution_id;</span>
&nbsp;
<span class="kw1">EXEC</span> <span class="br0">&#91;</span>SSISDB<span class="br0">&#93;</span>.<span class="br0">&#91;</span><span class="kw1">catalog</span><span class="br0">&#93;</span>.<span class="br0">&#91;</span>set_execution_parameter_value<span class="br0">&#93;</span>
&nbsp; &nbsp; &nbsp;@execution_id
&nbsp; &nbsp; ,@object_type &nbsp; &nbsp; &nbsp; <span class="sy0">=</span> <span class="nu0">30</span>
&nbsp; &nbsp; ,@parameter_name&nbsp; &nbsp; <span class="sy0">=</span> N<span class="st0">'RunID'</span>
&nbsp; &nbsp; ,@parameter_value &nbsp; <span class="sy0">=</span> @RunID;
&nbsp;
<span class="kw1">EXEC</span> <span class="br0">&#91;</span>SSISDB<span class="br0">&#93;</span>.<span class="br0">&#91;</span><span class="kw1">catalog</span><span class="br0">&#93;</span>.<span class="br0">&#91;</span>set_execution_parameter_value<span class="br0">&#93;</span>
&nbsp; &nbsp; &nbsp;@execution_id
&nbsp; &nbsp; ,@object_type &nbsp; &nbsp; &nbsp; <span class="sy0">=</span> <span class="nu0">50</span>
&nbsp; &nbsp; ,@parameter_name&nbsp; &nbsp; <span class="sy0">=</span> N<span class="st0">'SYNCHRONIZED'</span>
&nbsp; &nbsp; ,@parameter_value &nbsp; <span class="sy0">=</span> @Synchronized;
&nbsp;
<span class="kw1">EXEC</span> <span class="br0">&#91;</span>SSISDB<span class="br0">&#93;</span>.<span class="br0">&#91;</span><span class="kw1">catalog</span><span class="br0">&#93;</span>.<span class="br0">&#91;</span>start_execution<span class="br0">&#93;</span> @execution_id;
&nbsp;
GO</pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">CREATE PROC [dbo].[RunPackage]
	(@RunID			INT
	,@PackageName	VARCHAR(50)
	,@FolderName	VARCHAR(50)
	,@ProjectName	VARCHAR(50)
	,@Synchronized	BIT = 1 -- run synchronously by default
	)
AS
DECLARE @execution_id BIGINT;

EXEC [SSISDB].[catalog].[create_execution]
	 @package_name		= @PackageName
	,@execution_id		= @execution_id OUTPUT
	,@folder_name		= @FolderName
	,@project_name		= @ProjectName
	,@use32bitruntime	= False
	,@reference_id		= NULL;

--SELECT @execution_id;

EXEC [SSISDB].[catalog].[set_execution_parameter_value]
	 @execution_id
	,@object_type		= 30
	,@parameter_name	= N'RunID'
	,@parameter_value	= @RunID;

EXEC [SSISDB].[catalog].[set_execution_parameter_value]
	 @execution_id
	,@object_type		= 50
	,@parameter_name	= N'SYNCHRONIZED'
	,@parameter_value	= @Synchronized;

EXEC [SSISDB].[catalog].[start_execution] @execution_id;

GO</pre></div></div>

<p>The proc passes the @RunID parameter to the package, as well as other usual suspects, such as the package name, folder name and project name. You can also choose if a package is run synchronously or asynchronously. When run synchronously, the stored procedure doesn’t finish until the package is finished as well.</p>
<p>Using this stored procedure, it is easy to run a package multiple times in a row using a WHILE loop.</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
</pre></td><td class="de1"><pre class="de1"><span class="kw1">DECLARE</span> @RunID <span class="kw1">INT</span> <span class="sy0">=</span> <span class="nu0">1</span>;
&nbsp;
<span class="kw1">WHILE</span> <span class="br0">&#40;</span>@RunID <span class="sy0">&lt;=</span> <span class="nu0">10</span><span class="br0">&#41;</span>
<span class="kw1">BEGIN</span>
&nbsp; &nbsp; <span class="kw1">EXEC</span> dbo.<span class="me1">RunPackage</span> @RunID, <span class="st0">'myPackage.dtsx'</span>, <span class="st0">'myFolder'</span>, <span class="st0">'myProject'</span>, <span class="nu0">1</span>;
&nbsp; &nbsp; <span class="kw1">SET</span> @RunID <span class="sy0">+=</span> <span class="nu0">1</span>;
<span class="kw1">END</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">DECLARE @RunID INT = 1;

WHILE (@RunID &lt;= 10)
BEGIN
	EXEC dbo.RunPackage @RunID, 'myPackage.dtsx', 'myFolder', 'myProject', 1;
	SET @RunID += 1;
END</pre></div></div>

<p>The package is run synchronously, so that multiple instances do not run at the same time. This eliminates resource contention and gives us a clearer result of the performance of the individual package.</p>
<p>Using the following query, it is easy to build a nice chart in SSRS:</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
</pre></td><td class="de1"><pre class="de1"><span class="kw1">SELECT</span>
&nbsp; &nbsp; &nbsp;<span class="br0">&#91;</span>RunID<span class="br0">&#93;</span>
&nbsp; &nbsp; ,<span class="br0">&#91;</span>PackageName<span class="br0">&#93;</span>
&nbsp; &nbsp; ,<span class="br0">&#91;</span>Duration<span class="br0">&#93;</span> <span class="sy0">=</span> <span class="kw2">DATEDIFF</span><span class="br0">&#40;</span>MILLISECOND,StartDate,EndDate<span class="br0">&#41;</span> <span class="sy0">/</span> <span class="nu0">1000.0</span>
&nbsp; &nbsp; ,<span class="br0">&#91;</span>Mean<span class="br0">&#93;</span> <span class="sy0">=</span> PERCENTILE_CONT<span class="br0">&#40;</span><span class="nu0">0.5</span><span class="br0">&#41;</span> WITH<span class="sy0">IN</span> <span class="kw1">GROUP</span> <span class="br0">&#40;</span><span class="kw1">ORDER</span> <span class="kw1">BY</span> <span class="kw2">DATEDIFF</span><span class="br0">&#40;</span>MILLISECOND,StartDate,EndDate<span class="br0">&#41;</span> <span class="sy0">/</span> <span class="nu0">1000.0</span><span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">OVER</span> <span class="br0">&#40;</span>PARTITION <span class="kw1">BY</span> PackageName<span class="br0">&#41;</span>
<span class="kw1">FROM</span> <span class="br0">&#91;</span>dbo<span class="br0">&#93;</span>.<span class="br0">&#91;</span>PackageLogging<span class="br0">&#93;</span>
<span class="kw1">ORDER</span> <span class="kw1">BY</span> ID;</pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">SELECT
	 [RunID]
	,[PackageName]
	,[Duration] = DATEDIFF(MILLISECOND,StartDate,EndDate) / 1000.0
	,[Mean] = PERCENTILE_CONT(0.5) WITHIN GROUP (ORDER BY DATEDIFF(MILLISECOND,StartDate,EndDate) / 1000.0)
					OVER (PARTITION BY PackageName)
FROM [dbo].[PackageLogging]
ORDER BY ID;</pre></div></div>

<p>The result:</p>
<p><a href="/wp-content/uploads/2014/04/TestSSISPerf_chart.png"><img class="alignnone  wp-image-2559" alt="TestSSISPerf_chart" src="/wp-content/uploads/2014/04/TestSSISPerf_chart.png" width="542" height="315" srcset="/wp-content/uploads/2014/04/TestSSISPerf_chart.png 774w, /wp-content/uploads/2014/04/TestSSISPerf_chart-300x174.png 300w" sizes="(max-width: 542px) 100vw, 542px" /></a></p>
<p>I used RunID as category, PackageName as the series and the Duration/Mean as the values. I created a custom palette where I forced the Duration measure and the Mean to have the same color.</p>
<p>If you want to know what that chart is all about and what I was optimizing, keep your eye on the MSSQLTIPS website!</p>
<p><strong>UPDATE<br />
</strong>The MSSQLTips article mentioned in this blog post: <a href="http://www.mssqltips.com/sqlservertip/3217/improve-ssis-data-flow-buffer-performance/">Improve SSIS data flow buffer performance</a>.</p>
]]></content:encoded>
			<wfw:commentRss>/index.php/datamgmt/ssis/ssis-performance-testing/feed/</wfw:commentRss>
		<slash:comments>2</slash:comments>
		</item>
		<item>
		<title>Wrap inserts in a transaction for faster performance</title>
		<link>/index.php/datamgmt/dbprogramming/wrap-inserts-in-a-transaction/</link>
		<comments>/index.php/datamgmt/dbprogramming/wrap-inserts-in-a-transaction/#comments</comments>
		<pubDate>Wed, 13 Mar 2013 13:54:00 +0000</pubDate>
		<dc:creator><![CDATA[SQLDenis]]></dc:creator>
				<category><![CDATA[Business Intelligence]]></category>
		<category><![CDATA[Database Programming]]></category>
		<category><![CDATA[Microsoft SQL Server]]></category>
		<category><![CDATA[Microsoft SQL Server Admin]]></category>
		<category><![CDATA[performance]]></category>
		<category><![CDATA[sql server 2008]]></category>
		<category><![CDATA[sql server 2012]]></category>
		<category><![CDATA[testing]]></category>
		<category><![CDATA[transactions]]></category>

		<guid isPermaLink="false">/index.php/2013/03/wrap-inserts-in-a-transaction/</guid>
		<description><![CDATA[Sometimes you have to insert a bunch of data and you can't use BCP or another bulk load method. When you do single row inserts, SQL Server wraps these inserts inside an implicit transaction. Did you know that if you use an explicit transaction that the&#8230;]]></description>
				<content:encoded><![CDATA[<p>Sometimes you have to insert a bunch of data and you can&#8217;t use BCP or another bulk load method. When you do single row inserts, SQL Server wraps these inserts inside an implicit transaction. Did you know that if you use an explicit transaction that the inserts will be much faster? I touched upon this earlier in this post <a href="/index.php/DataMgmt/DBProgramming/mongodb-vs-sql-server-insert-comparison">MongoDB vs. SQL Server &#8211; INSERT comparison part deux</a> but since someone asked about this today, I decided to take another look with different run sizes as well</p>
<p>Let&#8217;s take a look. first create the following table</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
</pre></td><td class="de1"><pre class="de1"><span class="kw1">CREATE</span> <span class="kw1">TABLE</span> Sometest<span class="br0">&#40;</span>id <span class="kw1">INT</span> <span class="kw1">PRIMARY</span> <span class="kw1">KEY</span>, SomeCol <span class="kw1">VARCHAR</span><span class="br0">&#40;</span><span class="nu0">200</span><span class="br0">&#41;</span>, SomeDate <span class="kw1">DATETIME</span>,SomeCol2 <span class="kw1">VARCHAR</span><span class="br0">&#40;</span><span class="nu0">200</span><span class="br0">&#41;</span>, SomeDate2 <span class="kw1">DATETIME</span>,
SomeCol3 <span class="kw1">VARCHAR</span><span class="br0">&#40;</span><span class="nu0">200</span><span class="br0">&#41;</span>, SomeDate3 <span class="kw1">DATETIME</span>,SomeCol4 <span class="kw1">VARCHAR</span><span class="br0">&#40;</span><span class="nu0">200</span><span class="br0">&#41;</span>, SomeDate4 <span class="kw1">DATETIME</span><span class="br0">&#41;</span>
GO</pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">CREATE TABLE Sometest(id INT PRIMARY KEY, SomeCol VARCHAR(200), SomeDate DATETIME,SomeCol2 VARCHAR(200), SomeDate2 DATETIME,
SomeCol3 VARCHAR(200), SomeDate3 DATETIME,SomeCol4 VARCHAR(200), SomeDate4 DATETIME)
GO</pre></div></div>

<p>Now run the following code</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
</pre></td><td class="de1"><pre class="de1"><span class="kw1">TRUNCATE</span> <span class="kw1">TABLE</span> Sometest
<span class="kw1">DECLARE</span> @<span class="kw1">start</span> <span class="kw1">DATETIME</span> <span class="sy0">=</span> <span class="kw2">GETDATE</span><span class="br0">&#40;</span><span class="br0">&#41;</span>
<span class="kw1">SET</span> <span class="kw1">NOCOUNT</span> <span class="kw1">ON</span>
<span class="co1">--BEGIN TRAN</span>
<span class="kw1">DECLARE</span> @id <span class="kw1">INT</span> <span class="sy0">=</span><span class="nu0">0</span>
<span class="kw1">WHILE</span> @id <span class="sy0">&lt;</span> <span class="nu0">50000</span>
<span class="kw1">BEGIN</span>
&nbsp; &nbsp; <span class="kw1">INSERT</span> Sometest
&nbsp; &nbsp; <span class="kw1">SELECT</span> @id ,<span class="st0">'BlaBlaBlaBlaBlaBlaBlaBlaBlaBla111111'</span>,<span class="kw2">GETDATE</span><span class="br0">&#40;</span><span class="br0">&#41;</span>,
&nbsp; &nbsp; <span class="st0">'BlaBlaBlaBlaBlaBlaBlaBlaBlaBla2222'</span>,<span class="kw2">GETDATE</span><span class="br0">&#40;</span><span class="br0">&#41;</span>,
&nbsp; &nbsp; <span class="st0">'BlaBlaBlaBlaBlaBlaBlaBlaBlaBla3333'</span>,<span class="kw2">GETDATE</span><span class="br0">&#40;</span><span class="br0">&#41;</span>,
&nbsp; &nbsp; <span class="st0">'BlaBlaBlaBlaBlaBlaBlaBlaBlaBla4444'</span>,<span class="kw2">GETDATE</span><span class="br0">&#40;</span><span class="br0">&#41;</span>
<span class="kw1">SET</span> @id<span class="sy0">+=</span><span class="nu0">1</span>
<span class="kw1">END</span>
<span class="co1">--COMMIT</span>
<span class="kw1">SELECT</span> <span class="kw2">DATEDIFF</span><span class="br0">&#40;</span>ms,@<span class="kw1">start</span>,<span class="kw2">GETDATE</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#41;</span>
<span class="kw1">SELECT</span> <span class="kw2">COUNT</span><span class="br0">&#40;</span><span class="sy0">*</span><span class="br0">&#41;</span> <span class="kw1">FROM</span> Sometest</pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">TRUNCATE TABLE Sometest
DECLARE @start DATETIME = GETDATE()
SET NOCOUNT ON
--BEGIN TRAN
DECLARE @id INT =0
WHILE @id &lt; 50000
BEGIN
	INSERT Sometest
	SELECT @id ,'BlaBlaBlaBlaBlaBlaBlaBlaBlaBla111111',GETDATE(),
	'BlaBlaBlaBlaBlaBlaBlaBlaBlaBla2222',GETDATE(),
	'BlaBlaBlaBlaBlaBlaBlaBlaBlaBla3333',GETDATE(),
	'BlaBlaBlaBlaBlaBlaBlaBlaBlaBla4444',GETDATE()
SET @id+=1
END
--COMMIT
SELECT DATEDIFF(ms,@start,GETDATE())
SELECT COUNT(*) FROM Sometest</pre></div></div>

<p>That takes 1153 milliseconds on my machine</p>
<p>Run the same code but now uncomment the transaction</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
</pre></td><td class="de1"><pre class="de1"><span class="kw1">TRUNCATE</span> <span class="kw1">TABLE</span> Sometest
<span class="kw1">DECLARE</span> @<span class="kw1">start</span> <span class="kw1">DATETIME</span> <span class="sy0">=</span> <span class="kw2">GETDATE</span><span class="br0">&#40;</span><span class="br0">&#41;</span>
<span class="kw1">SET</span> <span class="kw1">NOCOUNT</span> <span class="kw1">ON</span>
<span class="kw1">BEGIN</span> <span class="kw1">TRAN</span>
<span class="kw1">DECLARE</span> @id <span class="kw1">INT</span> <span class="sy0">=</span><span class="nu0">0</span>
<span class="kw1">WHILE</span> @id <span class="sy0">&lt;</span> <span class="nu0">50000</span>
<span class="kw1">BEGIN</span>
&nbsp; &nbsp; <span class="kw1">INSERT</span> Sometest
&nbsp; &nbsp; <span class="kw1">SELECT</span> @id ,<span class="st0">'BlaBlaBlaBlaBlaBlaBlaBlaBlaBla111111'</span>,<span class="kw2">GETDATE</span><span class="br0">&#40;</span><span class="br0">&#41;</span>,
&nbsp; &nbsp; <span class="st0">'BlaBlaBlaBlaBlaBlaBlaBlaBlaBla2222'</span>,<span class="kw2">GETDATE</span><span class="br0">&#40;</span><span class="br0">&#41;</span>,
&nbsp; &nbsp; <span class="st0">'BlaBlaBlaBlaBlaBlaBlaBlaBlaBla3333'</span>,<span class="kw2">GETDATE</span><span class="br0">&#40;</span><span class="br0">&#41;</span>,
&nbsp; &nbsp; <span class="st0">'BlaBlaBlaBlaBlaBlaBlaBlaBlaBla4444'</span>,<span class="kw2">GETDATE</span><span class="br0">&#40;</span><span class="br0">&#41;</span>
<span class="kw1">SET</span> @id<span class="sy0">+=</span><span class="nu0">1</span>
<span class="kw1">END</span>
<span class="kw1">COMMIT</span>
<span class="kw1">SELECT</span> <span class="kw2">DATEDIFF</span><span class="br0">&#40;</span>ms,@<span class="kw1">start</span>,<span class="kw2">GETDATE</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#41;</span>
<span class="kw1">SELECT</span> <span class="kw2">COUNT</span><span class="br0">&#40;</span><span class="sy0">*</span><span class="br0">&#41;</span> <span class="kw1">FROM</span> Sometest</pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">TRUNCATE TABLE Sometest
DECLARE @start DATETIME = GETDATE()
SET NOCOUNT ON
BEGIN TRAN
DECLARE @id INT =0
WHILE @id &lt; 50000
BEGIN
	INSERT Sometest
	SELECT @id ,'BlaBlaBlaBlaBlaBlaBlaBlaBlaBla111111',GETDATE(),
	'BlaBlaBlaBlaBlaBlaBlaBlaBlaBla2222',GETDATE(),
	'BlaBlaBlaBlaBlaBlaBlaBlaBlaBla3333',GETDATE(),
	'BlaBlaBlaBlaBlaBlaBlaBlaBlaBla4444',GETDATE()
SET @id+=1
END
COMMIT
SELECT DATEDIFF(ms,@start,GETDATE())
SELECT COUNT(*) FROM Sometest</pre></div></div>

<p>That is almost twice as fast (or almost half as slow), it takes 673 milliseconds</p>
<p>Here is what the numbers look like on my machine for different insert sizes</p>
<pre>Inserts	no tran	explicit transaction
100000  18030   10800
50000	 9363	 5516
5000	 1130	  760
5000	 190	  103
1000	  40       23</pre>
<p>As you can see, when you have an explicit transaction it is much faster than when you don&#8217;t specify a transaction</p>
]]></content:encoded>
			<wfw:commentRss>/index.php/datamgmt/dbprogramming/wrap-inserts-in-a-transaction/feed/</wfw:commentRss>
		<slash:comments>2</slash:comments>
		</item>
		<item>
		<title>SQL Advent 2012 Day 22: Testing your backup and failover strategy</title>
		<link>/index.php/webdev/business-intelligence/testing-your-backup-and-failover/</link>
		<comments>/index.php/webdev/business-intelligence/testing-your-backup-and-failover/#respond</comments>
		<pubDate>Sat, 22 Dec 2012 21:31:00 +0000</pubDate>
		<dc:creator><![CDATA[SQLDenis]]></dc:creator>
				<category><![CDATA[Business Intelligence]]></category>
		<category><![CDATA[backup]]></category>
		<category><![CDATA[restore]]></category>
		<category><![CDATA[sql advent 2012]]></category>
		<category><![CDATA[sql server 2008]]></category>
		<category><![CDATA[sql server 2008 r2]]></category>
		<category><![CDATA[sql server 2012]]></category>
		<category><![CDATA[testing]]></category>

		<guid isPermaLink="false">/index.php/2012/12/testing-your-backup-and-failover/</guid>
		<description><![CDATA[This is day twenty-two of the SQL Advent 2012 series of blog posts. Today we are going to look at how to test your backup and failover strategy]]></description>
				<content:encoded><![CDATA[<p>This is day twenty-two of the <a href="/index.php/DataMgmt/DBProgramming/sql-advent-2012-here-is">SQL Advent 2012 series</a> of blog posts. Today we are going to look at how to test your backup and failover strategy</p>
<p>Let&#8217;s say your CEO comes to you and asks if your backups are good, you say yes, the CEO proceeds to tell you that the board will be arriving in 5 minutes and he will do a hard unplug of your main server. Have the backup restored within 1 hour. How comfortable are you now? Do you actually even test your backups, how do you know that they are not corrupt? What about failover to the other data center, has this been tested, do you know that it will work? </p>
<p>With Hurricane Sandy causing havoc a couple of weeks ago where whole data centers ran out of fuel and generators didn&#8217;t start up, there are a whole bunch of companies rethinking their HA/DR strategy. Is it really wise having your data center not enough geographically dispersed. I mean if your main data center is in New York City and your backup data center is in Jersey City or Secaucus then you will be in trouble when a storm like Sandy comes along.</p>
<div class="image_block"><a href="/wp-content/uploads/blogs/DataMgmt/Denis/ADvent/Storm.PNG?mtime=1356218425"><img alt="" title="Hi I am Sandy...I am here to destroy your backups" src="/wp-content/uploads/blogs/DataMgmt/Denis/ADvent/Storm.PNG?mtime=1356218425" width="560" height="328" /></a></div>
<p>One way I test backups is that I keep a hot backup server for some of the databases that are not changing as frequently as others. I basically have SQL jobs that backup the databases from one server straight to the other server, then a restore is done, permissions are fixed and checkdb is run. Another way I test the backups  with some bigger databases is that I do restores to our staging server once a week or so, these restores take about 6 hours or so.</p>
<p>You need to test restoring full backups, you also need to test applying differential and transaction log backups. Ideally you want this automated.</p>
<p>Where do you store your backups? Next to the server in a bin are all the tapes? Bad idea. You need to store the backups offsite or be doing backups to the other datacenter. Your backups cannot be <em>only </em>in the same location as the server that you are backing up from.</p>
<p>See also this post by Ted Krueger for some more backup information: <a href="/index.php/DataMgmt/DBAdmin/MSSQLServerAdmin/backups-are-for-sissies">Backups are for sissies!!!</a></p>
<p>We have a 200 page or so document that explains in detail what needs to happen if we switch data centers or if we have to rebuild a whole data center in the case of a catastrophe. How long would it take you to rebuild a server, install SQL server, installing all the apps and making sure that all the permissions are correct&#8230;&#8230;.oh what&#8230;oh you didn&#8217;t think you needed to backup master and tempdb. Hopefully you have all your jobs and SSIS packages scripted out or backed up. What about the permissions and accounts, do you know all the accounts that you need to create in case you don&#8217;t have a master backup?</p>
<p>When you boss asks next time what you do all day, make sure to tell him or her that you are making sure that in the case of a catastrophe the company is back in business in an instant, it is part of your job and your duty to yourself and the company</p>
<p>That is all for day twenty-two of the <a href="/index.php/DataMgmt/DBProgramming/sql-advent-2012-here-is">SQL Advent 2012 series</a>, come back tomorrow for the next one, you can also check out all the posts from last year here: <a href="/index.php/DataMgmt/DataDesign/sql-advent-2011-recap">SQL Advent 2011 Recap</a></p>
]]></content:encoded>
			<wfw:commentRss>/index.php/webdev/business-intelligence/testing-your-backup-and-failover/feed/</wfw:commentRss>
		<slash:comments>0</slash:comments>
		</item>
		<item>
		<title>Writing Perl Tests with Test::More</title>
		<link>/index.php/webdev/serverprogramming/writing-perl-tests-with-test/</link>
		<comments>/index.php/webdev/serverprogramming/writing-perl-tests-with-test/#comments</comments>
		<pubDate>Sat, 15 Jan 2011 14:29:00 +0000</pubDate>
		<dc:creator><![CDATA[Rob Earl]]></dc:creator>
				<category><![CDATA[Server Programming]]></category>
		<category><![CDATA[oop]]></category>
		<category><![CDATA[perl]]></category>
		<category><![CDATA[testing]]></category>

		<guid isPermaLink="false">/index.php/2011/01/writing-perl-tests-with-test/</guid>
		<description><![CDATA[Writing tests for code is just as important as writing the code itself. Time spent writing tests is less time spent tracking down and fixing bugs, making it a great investment. Despite knowing this it can sometimes be hard to force yourself to stop codi&#8230;]]></description>
				<content:encoded><![CDATA[<p>Writing tests for code is just as important as writing the code itself. Time spent writing tests is less time spent tracking down and fixing bugs, making it a great investment. Despite knowing this it can sometimes be hard to force yourself to stop coding and write tests. Fortunately, Perl has some modules to make it pretty simple. Here&#8217;s the module we&#8217;re going to be testing:</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="perl"><thead><tr><td colspan="2"  class="head">Perl</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
</pre></td><td class="de1"><pre class="de1"><span class="co1">#!/usr/bin/perl</span>
&nbsp;
<span class="kw3">package</span> MyMaths<span class="sy0">;</span>
<span class="kw2">use</span> strict<span class="sy0">;</span>
&nbsp;
<span class="kw2">sub</span> <span class="kw2">new</span>
<span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">my</span> <span class="re0">$proto</span> <span class="sy0">=</span> <span class="kw3">shift</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">my</span> <span class="re0">$class</span> <span class="sy0">=</span> <span class="kw3">ref</span><span class="br0">&#40;</span><span class="re0">$proto</span><span class="br0">&#41;</span> <span class="sy0">||</span> <span class="re0">$proto</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">my</span> <span class="re0">$self</span> <span class="sy0">=</span> <span class="br0">&#123;</span><span class="br0">&#125;</span><span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw3">bless</span><span class="br0">&#40;</span><span class="re0">$self</span><span class="sy0">,</span> <span class="re0">$class</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw3">return</span> <span class="re0">$self</span><span class="sy0">;</span>
<span class="br0">&#125;</span>
&nbsp;
<span class="kw2">sub</span> add
<span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">my</span> <span class="re0">$self</span> <span class="sy0">=</span> <span class="kw3">shift</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">my</span> <span class="re0">$total</span> <span class="sy0">=</span> <span class="nu0">0</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">foreach</span> <span class="kw1">my</span> <span class="re0">$factor</span> <span class="br0">&#40;</span><span class="co5">@_</span><span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="re0">$total</span> <span class="sy0">+=</span> <span class="re0">$factor</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw3">return</span> <span class="re0">$total</span><span class="sy0">;</span>
<span class="br0">&#125;</span>
&nbsp;
<span class="nu0">1</span><span class="sy0">;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">#!/usr/bin/perl
 
package MyMaths;
use strict;
 
sub new
{
        my $proto = shift;
        my $class = ref($proto) || $proto;
        my $self = {};
 
        bless($self, $class);
        return $self;
}
 
sub add
{
        my $self = shift;
        my $total = 0;
        foreach my $factor (@_)
        {
                $total += $factor;
        }
        return $total;
}
 
1;</pre></div></div>

<p>As you can see, we have a simple class with one method, add, which adds together all the arguments passed to it. We now need to define a test file for this module, called mymaths.t:</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="perl"><thead><tr><td colspan="2"  class="head">Perl</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
</pre></td><td class="de1"><pre class="de1"><span class="co1">#!/usr/bin/perl</span>
&nbsp;
<span class="kw2">use</span> Test<span class="sy0">::</span><span class="me2">More</span> tests<span class="sy0">=&gt;</span><span class="nu0">6</span><span class="sy0">;</span>
<span class="kw2">use</span> MyMaths<span class="sy0">;</span>
&nbsp;
<span class="re0">$mymaths</span> <span class="sy0">=</span> <span class="kw2">new</span> MyMaths<span class="sy0">;</span>
is<span class="br0">&#40;</span> <span class="re0">$mymaths</span><span class="sy0">-&gt;</span><span class="me1">add</span><span class="br0">&#40;</span><span class="nu0">1</span><span class="sy0">,</span><span class="nu0">2</span><span class="sy0">,</span><span class="nu0">3</span><span class="br0">&#41;</span><span class="sy0">,</span> <span class="nu0">6</span><span class="sy0">,</span> <span class="st0">&quot;1 + 2 + 3 = 6&quot;</span><span class="br0">&#41;</span><span class="sy0">;</span>
is<span class="br0">&#40;</span> <span class="re0">$mymaths</span><span class="sy0">-&gt;</span><span class="me1">add</span><span class="br0">&#40;</span><span class="nu0">6</span><span class="sy0">,</span><span class="nu0">2</span><span class="br0">&#41;</span><span class="sy0">,</span> <span class="nu0">8</span><span class="sy0">,</span><span class="st0">&quot;6 + 2 = 8&quot;</span><span class="br0">&#41;</span><span class="sy0">;</span>
is<span class="br0">&#40;</span> <span class="re0">$mymaths</span><span class="sy0">-&gt;</span><span class="me1">add</span><span class="br0">&#40;</span><span class="nu0">1</span><span class="sy0">,</span><span class="nu0">2</span><span class="sy0">,</span><span class="nu0">3</span><span class="sy0">,</span><span class="nu0">4</span><span class="br0">&#41;</span><span class="sy0">,</span> <span class="nu0">10</span><span class="sy0">,</span> <span class="st0">&quot;1 + 2 + 3 + 4 = 10&quot;</span><span class="br0">&#41;</span><span class="sy0">;</span>
is<span class="br0">&#40;</span> <span class="re0">$mymaths</span><span class="sy0">-&gt;</span><span class="me1">add</span><span class="br0">&#40;</span><span class="nu0">1</span><span class="sy0">,</span><span class="nu0">2</span><span class="br0">&#41;</span><span class="sy0">,</span> <span class="nu0">3</span><span class="sy0">,</span> <span class="st0">&quot;1 + 2 = 3&quot;</span><span class="br0">&#41;</span><span class="sy0">;</span>
is<span class="br0">&#40;</span> <span class="re0">$mymaths</span><span class="sy0">-&gt;</span><span class="me1">add</span><span class="br0">&#40;</span><span class="nu0">2</span><span class="br0">&#41;</span><span class="sy0">,</span> <span class="nu0">2</span><span class="sy0">,</span> <span class="st0">&quot;2 = 2&quot;</span><span class="br0">&#41;</span><span class="sy0">;</span>
is<span class="br0">&#40;</span> <span class="re0">$mymaths</span><span class="sy0">-&gt;</span><span class="me1">add</span><span class="br0">&#40;</span><span class="nu0">2</span><span class="sy0">,-</span><span class="nu0">1</span><span class="br0">&#41;</span><span class="sy0">,</span> <span class="nu0">1</span><span class="sy0">,</span> <span class="st0">&quot;2 + -1 = 1&quot;</span><span class="br0">&#41;</span><span class="sy0">;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">#!/usr/bin/perl
 
use Test::More tests=&gt;6;
use MyMaths;
 
$mymaths = new MyMaths;
is( $mymaths-&gt;add(1,2,3), 6, "1 + 2 + 3 = 6");
is( $mymaths-&gt;add(6,2), 8,"6 + 2 = 8");
is( $mymaths-&gt;add(1,2,3,4), 10, "1 + 2 + 3 + 4 = 10");
is( $mymaths-&gt;add(1,2), 3, "1 + 2 = 3");
is( $mymaths-&gt;add(2), 2, "2 = 2");
is( $mymaths-&gt;add(2,-1), 1, "2 + -1 = 1");</pre></div></div>

<p>This test file uses the is() method of the builtin Test::More module. This method takes 3 arguments: the test, the expected result and a description. If a test fails, is() will give some feedback on the test.</p>
<p><strong>edit:</strong> To run the tests use the `prove` utility which is part of the Test::Harness package:</p>
<p><code class="codespan">prove -v mymaths.t</code></p>
<p>Run all tests in the current directory with:<br />
<code class="codespan">prove -v .</code></p>
<p><del cite="/index.php/WebDev/ServerProgramming/writing-perl-tests-with-test#c7568">To run the tests we use another builtin module, Test::Harness. Create tests.pl:</del></p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="perl"><thead><tr><td colspan="2"  class="head">Perl</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
</pre></td><td class="de1"><pre class="de1"><span class="co1">#!/usr/bin/perl</span>
&nbsp;
<span class="kw2">use</span> Test<span class="sy0">::</span><span class="me2">Harness</span> <span class="kw3">qw</span><span class="br0">&#40;</span><span class="re0">&amp;runtests</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
<span class="re0">@tests</span> <span class="sy0">=</span> <span class="sy0">@</span><span class="kw2">ARGV</span> <span class="sy0">?</span> <span class="sy0">@</span><span class="kw2">ARGV</span> <span class="sy0">:</span> <span class="sy0">&lt;*.</span>t<span class="sy0">&gt;;</span>
&nbsp;
runtests <span class="re0">@tests</span><span class="sy0">;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">#!/usr/bin/perl
 
use Test::Harness qw(&amp;runtests);
 
@tests = @ARGV ? @ARGV : &lt;*.t&gt;;
 
runtests @tests;</pre></div></div>

<p><del>This script can either be run with a list of test files as arguments, or with no arguments to run all test files. Running the script results in:</del></p>
<pre>./mymaths.t .. 
1..6
ok 1 - 1 + 2 + 3 = 6
ok 2 - 6 + 2 = 8
ok 3 - 1 + 2 + 3 + 4 = 10
ok 4 - 1 + 2 = 3
ok 5 - 2 = 2
ok 6 - 2 + -1 = 1
ok
All tests successful.
Files=1, Tests=6,  0 wallclock secs ( 0.01 usr  0.02 sys +  0.02 cusr  0.01 csys =  0.06 CPU)
Result: PASS</pre>
<p>Everything went fine, as expected. Now go back to the original class definition and make a typo on line 22, so it reads = instead of += and rerun the tests:</p>
<pre>./mymaths.t .. 
1..6
not ok 1 - 1 + 2 + 3 = 6
not ok 2 - 6 + 2 = 8
not ok 3 - 1 + 2 + 3 + 4 = 10
not ok 4 - 1 + 2 = 3
ok 5 - 2 = 2
not ok 6 - 2 + -1 = 1

#   Failed test '1 + 2 + 3 = 6'
#   at ./mymaths.t line 7.
#          got: '3'
#     expected: '6'

#   Failed test '6 + 2 = 8'
#   at ./mymaths.t line 8.
#          got: '2'
#     expected: '8'

#   Failed test '1 + 2 + 3 + 4 = 10'
#   at ./mymaths.t line 9.
#          got: '4'
#     expected: '10'

#   Failed test '1 + 2 = 3'
#   at ./mymaths.t line 10.
#          got: '2'
#     expected: '3'

#   Failed test '2 + -1 = 1'
#   at ./mymaths.t line 12.
#          got: '-1'
#     expected: '1'
# Looks like you failed 5 tests of 6.
Dubious, test returned 5 (wstat 1280, 0x500)
Failed 5/6 subtests 

Test Summary Report
-------------------
./mymaths.t (Wstat: 1280 Tests: 6 Failed: 5)
  Failed tests:  1-4, 6
  Non-zero exit status: 5
Files=1, Tests=6,  0 wallclock secs ( 0.03 usr  0.00 sys +  0.03 cusr  0.00 csys =  0.06 CPU)
Result: FAIL</pre>
<p>Most of the tests failed and gave good feedback to help find the problem.</p>
<h2>Summary</h2>
<p>Although writing tests can be a chore it is worth doing. If you write tests a little at a time:</p>
<ul>
<li>When you design a class.</li>
<li>When you add a method to a class.</li>
<li>When you find a bug.</li>
</ul>
<p>You&#8217;ll develop a good library of tests without too much effort.</p>
<p>Further reading: <a href="http://perldoc.perl.org/Test/More.html">Test::More perldoc</a></p>
]]></content:encoded>
			<wfw:commentRss>/index.php/webdev/serverprogramming/writing-perl-tests-with-test/feed/</wfw:commentRss>
		<slash:comments>9</slash:comments>
		</item>
		<item>
		<title>Your testbed has to have the same volume of data as on production in order to simulate normal usage</title>
		<link>/index.php/datamgmt/datadesign/your-testbed-has-to-have-the-same-volume/</link>
		<comments>/index.php/datamgmt/datadesign/your-testbed-has-to-have-the-same-volume/#comments</comments>
		<pubDate>Tue, 02 Jun 2009 13:55:54 +0000</pubDate>
		<dc:creator><![CDATA[SQLDenis]]></dc:creator>
				<category><![CDATA[Data Modelling and Design]]></category>
		<category><![CDATA[database]]></category>
		<category><![CDATA[performance]]></category>
		<category><![CDATA[testing]]></category>

		<guid isPermaLink="false">/index.php/2009/06/your-testbed-has-to-have-the-same-volume/</guid>
		<description><![CDATA[Your testbed has to have the same volume of data as on production otherwise you are not really testing anything. This blogpost is kind of a rant after I noticed this post on Stackoverflow I do not believe there is a problem with the create trigger statement itself. The create trigger statement was successful and [&#8230;]]]></description>
				<content:encoded><![CDATA[<p>Your testbed has to have the same volume of data as on production otherwise you are not really testing anything.</p>
<p>This blogpost is kind of a rant after I noticed <a href="http://stackoverflow.com/questions/230642/create-trigger-is-taking-more-than-30-minutes-on-sql-server-2005/939616#939616">this post</a> on Stackoverflow</p>
<blockquote><p>I do not believe there is a problem with the create trigger statement itself. The create trigger statement was successful and quick in a test environment, and the trigger works correctly when rows are inserted/updated to the table. Although when I created the trigger on the test database there was no load on the table and it had considerably less rows, which is different than on the live/production database (<strong>100 vs. 13,000,000</strong>+).</p></blockquote>
<p>Now how on earth can you expect anything to behave the same when you compare 100 rows against 13 million?<br />
This is one of the fundamental flaws when people design a database, move it to production and then find out that it blows up/breaks down/is unusable on production</p>
<p>The worst case I have seen was when someone designed a table with a CompanyName column which was CHAR(5000). Yes you read that right CHAR(5000) nor VARCHAR(5000). On &#8216;staging&#8217; it was all fine with 50 rows or so. They moved this to production loaded it up with 100000 rows and it was slow as hell. What can you expect when you have only one row per page&#8230;..this was just terrible.</p>
<p>I understand that not every shop has the money to store terabytes of data but guess what? You can buy a USB TB hard drive for about $100. Plug in 5 of those and test with volume otherwise you will suffer later.</p>
<p>Now let&#8217;s look at some code to see what the difference is</p>
<p>First create these two tables</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
</pre></td><td class="de1"><pre class="de1"><span class="kw1">create</span> <span class="kw1">table</span> TestSmall <span class="br0">&#40;</span>id <span class="kw1">int</span> <span class="kw1">identity</span> not null,Somevalue <span class="kw1">char</span><span class="br0">&#40;</span><span class="nu0">108</span><span class="br0">&#41;</span>,SomeValue2 <span class="kw1">uniqueidentifier</span><span class="br0">&#41;</span>
go
&nbsp;
<span class="kw1">create</span> <span class="kw1">table</span> TestBig <span class="br0">&#40;</span>id <span class="kw1">int</span> <span class="kw1">identity</span> not null,Somevalue <span class="kw1">char</span><span class="br0">&#40;</span><span class="nu0">108</span><span class="br0">&#41;</span>,SomeValue2 <span class="kw1">uniqueidentifier</span><span class="br0">&#41;</span>
go</pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">create table TestSmall (id int identity not null,Somevalue char(108),SomeValue2 uniqueidentifier)
go

create table TestBig (id int identity not null,Somevalue char(108),SomeValue2 uniqueidentifier)
go</pre></div></div>

<p>We will populate the small table with 256 rows and the big one with 65536 rows</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
</pre></td><td class="de1"><pre class="de1"><span class="co1">--256 rows</span>
<span class="kw1">insert</span> TestSmall
<span class="kw1">select</span> <span class="kw1">convert</span><span class="br0">&#40;</span><span class="kw1">varchar</span><span class="br0">&#40;</span><span class="nu0">36</span><span class="br0">&#41;</span>,newid<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#41;</span>
&nbsp;<span class="sy0">+</span> <span class="kw1">convert</span><span class="br0">&#40;</span><span class="kw1">varchar</span><span class="br0">&#40;</span><span class="nu0">36</span><span class="br0">&#41;</span>,newid<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#41;</span>
&nbsp;<span class="sy0">+</span> <span class="kw1">convert</span><span class="br0">&#40;</span><span class="kw1">varchar</span><span class="br0">&#40;</span><span class="nu0">36</span><span class="br0">&#41;</span>,newid<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#41;</span>,newid<span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="kw1">from</span> master..<span class="me1">spt_values</span> t1
<span class="kw1">where</span> t1.<span class="me1">type</span> <span class="sy0">=</span> <span class="st0">'p'</span>
and t1.<span class="me1">number</span> <span class="sy0">&lt;</span> <span class="nu0">256</span>
go
&nbsp;
<span class="co1">--65536 rows</span>
<span class="kw1">insert</span> TestBig
<span class="kw1">select</span> <span class="kw1">convert</span><span class="br0">&#40;</span><span class="kw1">varchar</span><span class="br0">&#40;</span><span class="nu0">36</span><span class="br0">&#41;</span>,newid<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#41;</span>
&nbsp;<span class="sy0">+</span> <span class="kw1">convert</span><span class="br0">&#40;</span><span class="kw1">varchar</span><span class="br0">&#40;</span><span class="nu0">36</span><span class="br0">&#41;</span>,newid<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#41;</span>
&nbsp;<span class="sy0">+</span> <span class="kw1">convert</span><span class="br0">&#40;</span><span class="kw1">varchar</span><span class="br0">&#40;</span><span class="nu0">36</span><span class="br0">&#41;</span>,newid<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#41;</span>,newid<span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="kw1">from</span> master..<span class="me1">spt_values</span> t1
outer apply master..<span class="me1">spt_values</span> t2
<span class="kw1">where</span> t1.<span class="me1">type</span> <span class="sy0">=</span> <span class="st0">'p'</span>
and t1.<span class="me1">number</span> <span class="sy0">&lt;</span> <span class="nu0">256</span>
and t2.<span class="me1">type</span> <span class="sy0">=</span> <span class="st0">'p'</span>
and t2.<span class="me1">number</span> <span class="sy0">&lt;</span> <span class="nu0">256</span>
go</pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">--256 rows
insert TestSmall
select convert(varchar(36),newid())
 + convert(varchar(36),newid())
 + convert(varchar(36),newid()),newid() from master..spt_values t1
where t1.type = 'p'
and t1.number &lt; 256
go

--65536 rows
insert TestBig
select convert(varchar(36),newid())
 + convert(varchar(36),newid())
 + convert(varchar(36),newid()),newid() from master..spt_values t1
outer apply master..spt_values t2
where t1.type = 'p'
and t1.number &lt; 256
and t2.type = 'p'
and t2.number &lt; 256
go</pre></div></div>

<p>Now we will create a clustered index on each table</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
</pre></td><td class="de1"><pre class="de1"><span class="kw1">create</span> <span class="kw1">clustered</span> <span class="kw1">index</span> ix_somevalue_small <span class="kw1">on</span> TestSmall<span class="br0">&#40;</span>Somevalue<span class="br0">&#41;</span>
go
<span class="kw1">create</span> <span class="kw1">clustered</span> <span class="kw1">index</span> ix_somevalue_big <span class="kw1">on</span> TestBig<span class="br0">&#40;</span>Somevalue<span class="br0">&#41;</span>
go</pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">create clustered index ix_somevalue_small on TestSmall(Somevalue)
go
create clustered index ix_somevalue_big on TestBig(Somevalue)
go</pre></div></div>

<p>Time to run some code<br />
First we have to turn on statistics for time</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
</pre></td><td class="de1"><pre class="de1"><span class="kw1">set</span> <span class="kw1">statistics</span> io <span class="kw1">on</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">set statistics io on</pre></div></div>

<p>Now run these queries</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
</pre></td><td class="de1"><pre class="de1"><span class="kw1">select</span> <span class="sy0">*</span> <span class="kw1">from</span> TestSmall
<span class="kw1">where</span> Somevalue like <span class="st0">'2%'</span>
&nbsp;
<span class="kw1">select</span> <span class="sy0">*</span> <span class="kw1">from</span> TestBig
<span class="kw1">where</span> Somevalue like <span class="st0">'2%'</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">select * from TestSmall
where Somevalue like '2%'

select * from TestBig
where Somevalue like '2%'</pre></div></div>

<p>Table &#8216;TestSmall&#8217;. Scan count 1, logical reads 2, physical reads 0<br />
Table &#8216;TestBig&#8217;. Scan count 1, logical reads 74, physical reads 0</p>
<p>As you can see the reads are much higher for the TestBig table, this is of course not surprising since the TestBig has a lot more rows</p>
<p>What will happen if we write a non sargable query by using a function in the WHERE clause?</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
</pre></td><td class="de1"><pre class="de1"><span class="kw1">select</span> <span class="sy0">*</span> <span class="kw1">from</span> TestSmall
<span class="kw1">where</span> <span class="kw1">left</span><span class="br0">&#40;</span>Somevalue,<span class="nu0">1</span><span class="br0">&#41;</span> <span class="sy0">=</span> <span class="st0">'2'</span>
&nbsp;
<span class="kw1">select</span> <span class="sy0">*</span> <span class="kw1">from</span> TestBig
<span class="kw1">where</span> <span class="kw1">left</span><span class="br0">&#40;</span>Somevalue,<span class="nu0">1</span><span class="br0">&#41;</span> <span class="sy0">=</span> <span class="st0">'2'</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">select * from TestSmall
where left(Somevalue,1) = '2'

select * from TestBig
where left(Somevalue,1) = '2'</pre></div></div>

<p>Table &#8216;TestSmall&#8217;. Scan count 1, logical reads 7, physical reads 0<br />
Table &#8216;TestBig&#8217;. Scan count 1, logical reads 1132, physical reads 0</p>
<p>Okay, so the smaller table had 3.5 times more reads while the bigger table had 15 times more reads. Just imagine what would happen if the bigger table was even bigger?</p>
<p>Time to turn of the statistics for IO</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
</pre></td><td class="de1"><pre class="de1"><span class="kw1">set</span> <span class="kw1">statistics</span> io <span class="kw1">off</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">set statistics io off</pre></div></div>

<p>Now we will look at statistics for time, you can do that by running the following command</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
</pre></td><td class="de1"><pre class="de1"><span class="kw1">set</span> <span class="kw1">statistics</span> <span class="kw1">time</span> <span class="kw1">on</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">set statistics time on</pre></div></div>

<p>Let&#8217;s run the same queries again</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
</pre></td><td class="de1"><pre class="de1"><span class="kw1">select</span> <span class="sy0">*</span> <span class="kw1">from</span> TestSmall
<span class="kw1">where</span> Somevalue like <span class="st0">'2%'</span>
&nbsp;
<span class="kw1">select</span> <span class="sy0">*</span> <span class="kw1">from</span> TestBig
<span class="kw1">where</span> Somevalue like <span class="st0">'2%'</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">select * from TestSmall
where Somevalue like '2%'

select * from TestBig
where Somevalue like '2%'</pre></div></div>

<p> SQL Server Execution Times:<br />
   CPU time = 0 ms,  elapsed time = 0 ms.</p>
<p> SQL Server Execution Times:<br />
   CPU time = 15 ms,  elapsed time = 97 ms.</p>
<p>As you can see the numbers are much better for the smaller table<br />
When we do the non sargable queries the numbers don&#8217;t increase for the smaller table but they do for the bigger table</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
</pre></td><td class="de1"><pre class="de1"><span class="kw1">select</span> <span class="sy0">*</span> <span class="kw1">from</span> TestSmall
<span class="kw1">where</span> <span class="kw1">left</span><span class="br0">&#40;</span>Somevalue,<span class="nu0">1</span><span class="br0">&#41;</span> <span class="sy0">=</span> <span class="st0">'2'</span>
&nbsp;
<span class="kw1">select</span> <span class="sy0">*</span> <span class="kw1">from</span> TestBig
<span class="kw1">where</span> <span class="kw1">left</span><span class="br0">&#40;</span>Somevalue,<span class="nu0">1</span><span class="br0">&#41;</span> <span class="sy0">=</span> <span class="st0">'2'</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">select * from TestSmall
where left(Somevalue,1) = '2'

select * from TestBig
where left(Somevalue,1) = '2'</pre></div></div>

<p> SQL Server Execution Times:<br />
   CPU time = 0 ms,  elapsed time = 0 ms.</p>
<p> SQL Server Execution Times:<br />
   CPU time = 31 ms,  elapsed time = 132 ms.</p>
<p>Since data might be cached and you would like to start fresh every time you can execute the following command to clear the cache</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
</pre></td><td class="de1"><pre class="de1"><span class="kw1">dbcc</span> freeproccache
<span class="kw1">dbcc</span> dropcleanbuffers</pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">dbcc freeproccache
dbcc dropcleanbuffers</pre></div></div>

<p>Finally I will leave you with execution plan pics</p>
<p><strong>Sargable Query</strong></p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
</pre></td><td class="de1"><pre class="de1"><span class="kw1">select</span> <span class="sy0">*</span> <span class="kw1">from</span> TestSmall
<span class="kw1">where</span> Somevalue like <span class="st0">'2%'</span>
&nbsp;
<span class="kw1">select</span> <span class="sy0">*</span> <span class="kw1">from</span> TestBig
<span class="kw1">where</span> Somevalue like <span class="st0">'2%'</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">select * from TestSmall
where Somevalue like '2%'

select * from TestBig
where Somevalue like '2%'</pre></div></div>

<p><img src="http://imgur.com/9qRfI.png" alt="Sargable Query" /></p>
<p><strong>Non Sargable Query</strong></p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
</pre></td><td class="de1"><pre class="de1"><span class="kw1">select</span> <span class="sy0">*</span> <span class="kw1">from</span> TestSmall
<span class="kw1">where</span> <span class="kw1">left</span><span class="br0">&#40;</span>Somevalue,<span class="nu0">1</span><span class="br0">&#41;</span> <span class="sy0">=</span> <span class="st0">'2'</span>
&nbsp;
<span class="kw1">select</span> <span class="sy0">*</span> <span class="kw1">from</span> TestBig
<span class="kw1">where</span> <span class="kw1">left</span><span class="br0">&#40;</span>Somevalue,<span class="nu0">1</span><span class="br0">&#41;</span> <span class="sy0">=</span> <span class="st0">'2'</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">select * from TestSmall
where left(Somevalue,1) = '2'

select * from TestBig
where left(Somevalue,1) = '2'</pre></div></div>

<p><img src="http://imgur.com/mHaI0.png" alt="Non Sargable Query" /></p>
<p></p>
<p>*** <strong>If you have a SQL related question try our <a href="http://forum.lessthandot.com/viewforum.php?f=17">Microsoft SQL Server Programming</a> forum or our <a href="http://forum.lessthandot.com/viewforum.php?f=22">Microsoft SQL Server Admin</a> forum</strong><ins></ins></p>
]]></content:encoded>
			<wfw:commentRss>/index.php/datamgmt/datadesign/your-testbed-has-to-have-the-same-volume/feed/</wfw:commentRss>
		<slash:comments>9</slash:comments>
		</item>
		<item>
		<title>CHESS: An Automated Concurrency Testing Tool</title>
		<link>/index.php/desktopdev/mstech/chess-an-automated-concurrency-testing-t/</link>
		<comments>/index.php/desktopdev/mstech/chess-an-automated-concurrency-testing-t/#respond</comments>
		<pubDate>Thu, 11 Dec 2008 18:29:08 +0000</pubDate>
		<dc:creator><![CDATA[SQLDenis]]></dc:creator>
				<category><![CDATA[Microsoft Technologies]]></category>
		<category><![CDATA[chess]]></category>
		<category><![CDATA[concurrency]]></category>
		<category><![CDATA[ms research]]></category>
		<category><![CDATA[parallel computing]]></category>
		<category><![CDATA[programming]]></category>
		<category><![CDATA[rise]]></category>
		<category><![CDATA[software engineering research]]></category>
		<category><![CDATA[testing]]></category>
		<category><![CDATA[tools]]></category>

		<guid isPermaLink="false">/index.php/2008/12/chess-an-automated-concurrency-testing-t/</guid>
		<description><![CDATA[CHESS is an automated tool from Microsoft Research for finding errors in multithreaded software by systematic exploration of thread schedules. It finds errors, such as data-races, deadlocks, hangs, and data-corruption induced access violations, that are extremely hard to find with current testing tools. Once CHESS locates an error, it provides a fully repeatable execution of [&#8230;]]]></description>
				<content:encoded><![CDATA[<p>CHESS is an automated tool from Microsoft Research for finding errors in multithreaded software by systematic exploration of thread schedules. It finds errors, such as data-races, deadlocks, hangs, and data-corruption induced access violations, that are extremely hard to find with current testing tools. Once CHESS locates an error, it provides a fully repeatable execution of the program leading to the error, thus greatly aiding the debugging process. In addition, CHESS provides a valuable and novel notion of test coverage suitable for multithreaded programs. CHESS can use existing concurrent test cases and is therefore easy to deploy. Both developers and testers should find CHESS useful.</p>
<p>More on Channel 9 (including video) http://channel9.msdn.com/shows/Going+Deep/CHESS-An-Automated-Concurrency-Testing-Tool/</p>
]]></content:encoded>
			<wfw:commentRss>/index.php/desktopdev/mstech/chess-an-automated-concurrency-testing-t/feed/</wfw:commentRss>
		<slash:comments>0</slash:comments>
		</item>
	</channel>
</rss>
