<?xml version="1.0" encoding="UTF-8"?><rss version="2.0"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:atom="http://www.w3.org/2005/Atom"
	xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
	xmlns:slash="http://purl.org/rss/1.0/modules/slash/"
	>

<channel>
	<title>sp_executesql &#8211; LessthanDot</title>
	<atom:link href="/index.php/tag/sp_executesql/feed/" rel="self" type="application/rss+xml" />
	<link>/</link>
	<description>A Technical Community for IT Professionals</description>
	<lastBuildDate>Sat, 09 Mar 2019 12:50:36 +0000</lastBuildDate>
	<language>en-US</language>
	<sy:updatePeriod>hourly</sy:updatePeriod>
	<sy:updateFrequency>1</sy:updateFrequency>
	<generator>https://wordpress.org/?v=4.6.1</generator>
	<item>
		<title>Avoid Conversions In Execution Plans By Using sp_executesql Instead of Exec</title>
		<link>/index.php/datamgmt/datadesign/avoid-conversions-in-execution-plans-by/</link>
		<comments>/index.php/datamgmt/datadesign/avoid-conversions-in-execution-plans-by/#comments</comments>
		<pubDate>Wed, 10 Jun 2009 13:44:00 +0000</pubDate>
		<dc:creator><![CDATA[SQLDenis]]></dc:creator>
				<category><![CDATA[Data Modelling and Design]]></category>
		<category><![CDATA[dynamic sql]]></category>
		<category><![CDATA[exec]]></category>
		<category><![CDATA[sp_executesql]]></category>
		<category><![CDATA[sql]]></category>

		<guid isPermaLink="false">/index.php/2009/06/avoid-conversions-in-execution-plans-by/</guid>
		<description><![CDATA[Yesterday in the Changing exec to sp_executesql doesn't provide any benefit if you are not using parameters correctly post I showed you that sp_executesql is better than exec because you get plan reuse and the procedure cache doesn't get bloated. 
Toda&#8230;]]></description>
				<content:encoded><![CDATA[<p>Yesterday in the <a href="/index.php/DataMgmt/DataDesign/changing-exec-to-sp_executesql-doesn-t-p">Changing exec to sp_executesql doesn&#8217;t provide any benefit if you are not using parameters correctly</a> post I showed you that sp_executesql is better than exec because you get plan reuse and the procedure cache doesn&#8217;t get bloated.<br />
Today I will show you that sp_executesql is better than exec or ad hoc queries when you deal with conversions in execution plans</p>
<p>First create this table and populate it with some data</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
</pre></td><td class="de1"><pre class="de1"><span class="kw1">create</span> <span class="kw1">table</span> TestPerf<span class="br0">&#40;</span>&nbsp; id <span class="kw1">int</span> not null,
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; SomeCol1 <span class="kw1">nvarchar</span><span class="br0">&#40;</span><span class="nu0">20</span><span class="br0">&#41;</span>,
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; SomeValue <span class="kw1">smallint</span><span class="br0">&#41;</span>
&nbsp;
&nbsp;
<span class="kw1">insert</span> TestPerf <span class="kw1">values</span><span class="br0">&#40;</span><span class="nu0">1</span>,<span class="st0">'Test'</span>,<span class="nu0">1</span><span class="br0">&#41;</span>
<span class="kw1">insert</span> TestPerf <span class="kw1">values</span><span class="br0">&#40;</span><span class="nu0">2</span>,<span class="st0">'Aest'</span>,<span class="nu0">257</span><span class="br0">&#41;</span>
<span class="kw1">insert</span> TestPerf <span class="kw1">values</span><span class="br0">&#40;</span><span class="nu0">3</span>,<span class="st0">'Best'</span>,<span class="nu0">258</span><span class="br0">&#41;</span>
<span class="kw1">insert</span> TestPerf <span class="kw1">values</span><span class="br0">&#40;</span><span class="nu0">4</span>,<span class="st0">'Cest'</span>,<span class="nu0">259</span><span class="br0">&#41;</span>
<span class="kw1">insert</span> TestPerf <span class="kw1">values</span><span class="br0">&#40;</span><span class="nu0">5</span>,<span class="st0">'Dest'</span>,<span class="nu0">251</span><span class="br0">&#41;</span>
<span class="kw1">insert</span> TestPerf <span class="kw1">values</span><span class="br0">&#40;</span><span class="nu0">6</span>,<span class="st0">'Eest'</span>,<span class="nu0">252</span><span class="br0">&#41;</span>
<span class="kw1">insert</span> TestPerf <span class="kw1">values</span><span class="br0">&#40;</span><span class="nu0">7</span>,<span class="st0">'Fest'</span>,<span class="nu0">253</span><span class="br0">&#41;</span>
<span class="kw1">insert</span> TestPerf <span class="kw1">values</span><span class="br0">&#40;</span><span class="nu0">8</span>,<span class="st0">'Gest'</span>,<span class="nu0">254</span><span class="br0">&#41;</span>
<span class="kw1">insert</span> TestPerf <span class="kw1">values</span><span class="br0">&#40;</span><span class="nu0">9</span>,<span class="st0">'Hest'</span>,<span class="nu0">255</span><span class="br0">&#41;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">create table TestPerf(	id int not null,
			SomeCol1 nvarchar(20),
			SomeValue smallint)


insert TestPerf values(1,'Test',1)
insert TestPerf values(2,'Aest',257)
insert TestPerf values(3,'Best',258)
insert TestPerf values(4,'Cest',259)
insert TestPerf values(5,'Dest',251)
insert TestPerf values(6,'Eest',252)
insert TestPerf values(7,'Fest',253)
insert TestPerf values(8,'Gest',254)
insert TestPerf values(9,'Hest',255)</pre></div></div>

<p>Take a look this query</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
</pre></td><td class="de1"><pre class="de1"><span class="kw1">select</span> <span class="sy0">*</span> <span class="kw1">from</span> TestPerf
<span class="kw1">where</span> SomeCol1 <span class="sy0">=</span> <span class="st0">'Test'</span>
and SomeValue <span class="sy0">=</span> <span class="nu0">1</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">select * from TestPerf
where SomeCol1 = 'Test'
and SomeValue = 1</pre></div></div>

<p>Run the query</p>
<p>Here is the execution plan</p>
<p><em><br />
 |&#8211;Table Scan(OBJECT:([testpage].[dbo].[TestPerf]),<br />
 WHERE:([testpage].[dbo].[TestPerf].[SomeValue]=CONVERT_IMPLICIT(smallint,[@2],0)<br />
 AND [testpage].[dbo].[TestPerf].[SomeCol1]=CONVERT_IMPLICIT(nvarchar(4000),[@1],0)))</em></p>
<p>As you can see the value 1 needs to be converted to smallint and &#8216;Test&#8217; Needs to be converted to nvarchar. You can actually see what the value is converted to by using the SQL_VARIANT_PROPERTY function.<br />
When you run the following query</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
</pre></td><td class="de1"><pre class="de1"><span class="kw1">SELECT</span> <span class="kw2">SQL_VARIANT_PROPERTY</span><span class="br0">&#40;</span><span class="nu0">1</span>, <span class="st0">'BaseType'</span><span class="br0">&#41;</span> <span class="kw1">AS</span> <span class="br0">&#91;</span>Base Type<span class="br0">&#93;</span>,
&nbsp; &nbsp; &nbsp; &nbsp;<span class="kw2">SQL_VARIANT_PROPERTY</span><span class="br0">&#40;</span><span class="nu0">1</span>, <span class="st0">'Precision'</span><span class="br0">&#41;</span> <span class="kw1">AS</span> <span class="br0">&#91;</span><span class="kw1">PRECISION</span><span class="br0">&#93;</span>,
&nbsp; &nbsp; &nbsp; &nbsp;<span class="kw2">SQL_VARIANT_PROPERTY</span><span class="br0">&#40;</span><span class="nu0">1</span>, <span class="st0">'Scale'</span><span class="br0">&#41;</span> <span class="kw1">AS</span> <span class="br0">&#91;</span>Scale<span class="br0">&#93;</span>
&nbsp;
<span class="kw1">union</span> all
<span class="kw1">SELECT</span> <span class="kw2">SQL_VARIANT_PROPERTY</span><span class="br0">&#40;</span><span class="st0">'Test'</span>, <span class="st0">'BaseType'</span><span class="br0">&#41;</span> <span class="kw1">AS</span> <span class="br0">&#91;</span>Base Type<span class="br0">&#93;</span>,
&nbsp; &nbsp; &nbsp; &nbsp;<span class="kw2">SQL_VARIANT_PROPERTY</span><span class="br0">&#40;</span><span class="st0">'Test'</span>, <span class="st0">'Precision'</span><span class="br0">&#41;</span> <span class="kw1">AS</span> <span class="br0">&#91;</span><span class="kw1">PRECISION</span><span class="br0">&#93;</span>,
&nbsp; &nbsp; &nbsp; &nbsp;<span class="kw2">SQL_VARIANT_PROPERTY</span><span class="br0">&#40;</span><span class="st0">'Test'</span>, <span class="st0">'Scale'</span><span class="br0">&#41;</span> <span class="kw1">AS</span> <span class="br0">&#91;</span>Scale<span class="br0">&#93;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">SELECT SQL_VARIANT_PROPERTY(1, 'BaseType') AS [Base Type],
       SQL_VARIANT_PROPERTY(1, 'Precision') AS [PRECISION],
       SQL_VARIANT_PROPERTY(1, 'Scale') AS [Scale]

union all
SELECT SQL_VARIANT_PROPERTY('Test', 'BaseType') AS [Base Type],
       SQL_VARIANT_PROPERTY('Test', 'Precision') AS [PRECISION],
       SQL_VARIANT_PROPERTY('Test', 'Scale') AS [Scale]</pre></div></div>

<p>you get this as output</p>
<pre>Base Type	PRECISION	Scale
int	        10	        0
varchar	        0	        0</pre>
<p>so the value 1 becomes an int and &#8216;test&#8217; is varchar</p>
<p>Exec with dynamic SQL is not any better than ad hoc of course since the same query gets generated as with the ad hoc query<br />
Here is such a query</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
</pre></td><td class="de1"><pre class="de1"><span class="kw1">declare</span> @SomeValue <span class="kw1">smallint</span>
<span class="kw1">declare</span> @SomeCol1 <span class="kw1">nvarchar</span><span class="br0">&#40;</span><span class="nu0">20</span><span class="br0">&#41;</span>
&nbsp;
<span class="kw1">select</span> @SomeValue <span class="sy0">=</span> <span class="nu0">1</span>,@SomeCol1 <span class="sy0">=</span> <span class="st0">'Test'</span>
&nbsp;
<span class="kw1">declare</span> @<span class="kw1">SQL</span> <span class="kw1">nvarchar</span><span class="br0">&#40;</span><span class="nu0">1000</span><span class="br0">&#41;</span>
<span class="kw1">select</span> @<span class="kw1">SQL</span> <span class="sy0">=</span> <span class="st0">'select * from dbo.TestPerf</span>
<span class="st0">where SomeCol1 = '</span><span class="st0">''</span> <span class="sy0">+</span> @SomeCol1 <span class="sy0">+</span><span class="st0">''</span><span class="st0">'</span>
<span class="st0">and SomeValue = '</span> <span class="sy0">+</span> <span class="kw1">convert</span><span class="br0">&#40;</span><span class="kw1">nvarchar</span><span class="br0">&#40;</span><span class="nu0">10</span><span class="br0">&#41;</span>,@SomeValue<span class="br0">&#41;</span> 
&nbsp;
<span class="kw1">exec</span> <span class="br0">&#40;</span>@<span class="kw1">SQL</span><span class="br0">&#41;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">declare @SomeValue smallint
declare @SomeCol1 nvarchar(20)

select @SomeValue = 1,@SomeCol1 = 'Test'

declare @SQL nvarchar(1000)
select @SQL = 'select * from dbo.TestPerf
where SomeCol1 = ''' + @SomeCol1 +'''
and SomeValue = ' + convert(nvarchar(10),@SomeValue) 

exec (@SQL)</pre></div></div>

<p>Here is the execution plan</p>
<pre> |--Table Scan(OBJECT:([testpage].[dbo].[TestPerf]), 
 WHERE:([testpage].[dbo].[TestPerf].[SomeValue]=CONVERT_IMPLICIT(smallint,[@2],0) 
 AND [testpage].[dbo].[TestPerf].[SomeCol1]=CONVERT_IMPLICIT(nvarchar(4000),[@1],0)))</pre>
<p>Ideally you want a query with parameters; below is the quey</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
</pre></td><td class="de1"><pre class="de1"><span class="kw1">declare</span> @SomeValue <span class="kw1">smallint</span>
<span class="kw1">declare</span> @SomeCol1 <span class="kw1">nvarchar</span><span class="br0">&#40;</span><span class="nu0">20</span><span class="br0">&#41;</span>
&nbsp;
<span class="kw1">select</span> @SomeValue <span class="sy0">=</span> <span class="nu0">1</span>,@SomeCol1 <span class="sy0">=</span> <span class="st0">'Test'</span>
&nbsp;
<span class="kw1">select</span> <span class="sy0">*</span> <span class="kw1">from</span> dbo.<span class="me1">TestPerf</span>
<span class="kw1">where</span> SomeCol1 <span class="sy0">=</span> &nbsp;@SomeCol1 
and SomeValue <span class="sy0">=</span> @SomeValue </pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">declare @SomeValue smallint
declare @SomeCol1 nvarchar(20)

select @SomeValue = 1,@SomeCol1 = 'Test'

select * from dbo.TestPerf
where SomeCol1 =  @SomeCol1 
and SomeValue = @SomeValue </pre></div></div>

<p>Here is the execution plan</p>
<pre>  
 |--Table Scan(OBJECT:([testpage].[dbo].[TestPerf]),
 WHERE:([testpage].[dbo].[TestPerf].[SomeValue]=[@SomeValue] 
 AND [testpage].[dbo].[TestPerf].[SomeCol1]=[@SomeCol1]))</pre>
<p>As you can see no conversions here</p>
<p>Now let&#8217;s take a look at how we can take the dynamic query from before and use sp_executesql to get rid of conversions</p>
<p>Run this query</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
</pre></td><td class="de1"><pre class="de1"><span class="kw1">declare</span> @SomeValue <span class="kw1">smallint</span>
<span class="kw1">declare</span> @SomeCol1 <span class="kw1">nvarchar</span><span class="br0">&#40;</span><span class="nu0">20</span><span class="br0">&#41;</span>
&nbsp;
<span class="kw1">select</span> @SomeValue <span class="sy0">=</span> <span class="nu0">1</span>,@SomeCol1 <span class="sy0">=</span> <span class="st0">'Test'</span>
&nbsp;
&nbsp;
<span class="kw1">declare</span> @<span class="kw1">SQL</span> <span class="kw1">nvarchar</span><span class="br0">&#40;</span><span class="nu0">1000</span><span class="br0">&#41;</span>
<span class="kw1">select</span> @<span class="kw1">SQL</span> <span class="sy0">=</span> <span class="st0">'select * from dbo.TestPerf</span>
<span class="st0">where SomeCol1 = @InnerSomeCol1 </span>
<span class="st0">and SomeValue = &nbsp;@InnerSomeValue'</span> 
&nbsp;
<span class="kw1">declare</span> @ParmDefinition <span class="kw1">nvarchar</span><span class="br0">&#40;</span><span class="nu0">500</span><span class="br0">&#41;</span>
<span class="kw1">SET</span> @ParmDefinition <span class="sy0">=</span> N<span class="st0">'@InnerSomeValue smallint ,@InnerSomeCol1 nvarchar(20)'</span>
&nbsp;
&nbsp;
&nbsp;
<span class="kw1">exec</span> <span class="kw3">sp_executesql</span> &nbsp;@<span class="kw1">SQL</span>,@ParmDefinition,
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; @InnerSomeValue <span class="sy0">=</span> @SomeValue,
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; @InnerSomeCol1 &nbsp;<span class="sy0">=</span> @SomeCol1</pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">declare @SomeValue smallint
declare @SomeCol1 nvarchar(20)

select @SomeValue = 1,@SomeCol1 = 'Test'


declare @SQL nvarchar(1000)
select @SQL = 'select * from dbo.TestPerf
where SomeCol1 = @InnerSomeCol1 
and SomeValue =  @InnerSomeValue' 

declare @ParmDefinition nvarchar(500)
SET @ParmDefinition = N'@InnerSomeValue smallint ,@InnerSomeCol1 nvarchar(20)'



exec sp_executesql 	@SQL,@ParmDefinition,
			@InnerSomeValue = @SomeValue,
			@InnerSomeCol1 	= @SomeCol1</pre></div></div>

<p>Here is the execution plan</p>
<div class="image_block"><a href="/wp-content/uploads/blogs/DataMgmt/Denis/mongo/ExecPlan1.PNG?mtime=1357609354"><img alt="" src="/wp-content/uploads/blogs/DataMgmt/Denis/mongo/ExecPlan1.PNG?mtime=1357609354" width="308" height="181" /></a></div>
<p>As you can see there were no conversions.</p>
<div style="border:1px solid black;background-color:#444;color:white;margin:0 20px;padding:0 5px 0 5px;"><span class="MT_larger"><em><strong>How to avoid conversions</strong></em></span><span class="MT_smaller"></p>
<p></span>The thing that is important with a query like that is that the parameters inside the dynamic sql match the data types of the columns.</div>
<p>So for this part of the query</p>
<pre>   select @SQL = 'select * from dbo.TestPerf
   where &lt;strong&gt;SomeCol1 = @InnerSomeCol1&lt;/strong&gt; 
   and &lt;strong&gt;SomeValue =  @InnerSomeValue'&lt;/strong&gt; </pre>
<p>The SomeCol1 column and the  @InnerSomeCol1 param/variable have to be of the same datatype,<br />
the SomeValue column and the  @InnerSomeValue  param/variable also have to be of the same datatype in order to prevent conversions</p>
<p>Let&#8217;s look at something else<br />
The query from before with parameters</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
</pre></td><td class="de1"><pre class="de1"><span class="kw1">declare</span> @SomeValue <span class="kw1">smallint</span>
<span class="kw1">declare</span> @SomeCol1 <span class="kw1">nvarchar</span><span class="br0">&#40;</span><span class="nu0">20</span><span class="br0">&#41;</span>
&nbsp;
<span class="kw1">select</span> @SomeValue <span class="sy0">=</span> <span class="nu0">1</span>,@SomeCol1 <span class="sy0">=</span> <span class="st0">'Test'</span>
&nbsp;
<span class="kw1">select</span> <span class="sy0">*</span> <span class="kw1">from</span> dbo.<span class="me1">TestPerf</span>
<span class="kw1">where</span> SomeCol1 <span class="sy0">=</span> &nbsp;@SomeCol1 
and SomeValue <span class="sy0">=</span> @SomeValue </pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">declare @SomeValue smallint
declare @SomeCol1 nvarchar(20)

select @SomeValue = 1,@SomeCol1 = 'Test'

select * from dbo.TestPerf
where SomeCol1 =  @SomeCol1 
and SomeValue = @SomeValue </pre></div></div>

<p>Here is the execution plan</p>
<pre>  
 |--Table Scan(OBJECT:([testpage].[dbo].[TestPerf]), 
 WHERE:([testpage].[dbo].[TestPerf].[SomeValue]=[@SomeValue] 
 AND [testpage].[dbo].[TestPerf].[SomeCol1]=[@SomeCol1]))</pre>
<p>what happens if you change the params to this</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
</pre></td><td class="de1"><pre class="de1"><span class="kw1">declare</span> @SomeValue <span class="kw1">int</span>
<span class="kw1">declare</span> @SomeCol1 <span class="kw1">varchar</span><span class="br0">&#40;</span><span class="nu0">20</span><span class="br0">&#41;</span>
&nbsp;
<span class="kw1">select</span> @SomeValue <span class="sy0">=</span> <span class="nu0">1</span>,@SomeCol1 <span class="sy0">=</span> <span class="st0">'Test'</span>
&nbsp;
<span class="kw1">select</span> <span class="sy0">*</span> <span class="kw1">from</span> dbo.<span class="me1">TestPerf</span>
<span class="kw1">where</span> SomeCol1 <span class="sy0">=</span> &nbsp;@SomeCol1 
and SomeValue <span class="sy0">=</span> @SomeValue </pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">declare @SomeValue int
declare @SomeCol1 varchar(20)

select @SomeValue = 1,@SomeCol1 = 'Test'

select * from dbo.TestPerf
where SomeCol1 =  @SomeCol1 
and SomeValue = @SomeValue </pre></div></div>

<p>Here is the execution plan</p>
<pre>  
 |--Table Scan(OBJECT:([testpage].[dbo].[TestPerf]), 
 WHERE:([testpage].[dbo].[TestPerf].[SomeValue]=[@SomeValue] 
 AND [testpage].[dbo].[TestPerf].[SomeCol1]=CONVERT_IMPLICIT(nvarchar(20),[@SomeCol1],0)))</pre>
<p>We still get a conversion on the nvarchar SomeCol1 column</p>
<p>What happens if we change the outer parameter data types in the following dynamic query?</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
</pre></td><td class="de1"><pre class="de1"><span class="kw1">declare</span> @SomeValue <span class="kw1">smallint</span>
<span class="kw1">declare</span> @SomeCol1 <span class="kw1">nvarchar</span><span class="br0">&#40;</span><span class="nu0">20</span><span class="br0">&#41;</span>
&nbsp;
<span class="kw1">select</span> @SomeValue <span class="sy0">=</span> <span class="nu0">1</span>,@SomeCol1 <span class="sy0">=</span> <span class="st0">'Test'</span>
&nbsp;
&nbsp;
<span class="kw1">declare</span> @<span class="kw1">SQL</span> <span class="kw1">nvarchar</span><span class="br0">&#40;</span><span class="nu0">1000</span><span class="br0">&#41;</span>
<span class="kw1">select</span> @<span class="kw1">SQL</span> <span class="sy0">=</span> <span class="st0">'select * from dbo.TestPerf</span>
<span class="st0">where SomeCol1 = @InnerSomeCol1 </span>
<span class="st0">and SomeValue = &nbsp;@InnerSomeValue'</span> 
&nbsp;
<span class="kw1">declare</span> @ParmDefinition <span class="kw1">nvarchar</span><span class="br0">&#40;</span><span class="nu0">500</span><span class="br0">&#41;</span>
<span class="kw1">SET</span> @ParmDefinition <span class="sy0">=</span> N<span class="st0">'@InnerSomeValue smallint ,@InnerSomeCol1 nvarchar(20)'</span>
&nbsp;
&nbsp;
&nbsp;
<span class="kw1">exec</span> <span class="kw3">sp_executesql</span> &nbsp;@<span class="kw1">SQL</span>,@ParmDefinition,
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; @InnerSomeValue <span class="sy0">=</span> @SomeValue,
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; @InnerSomeCol1 &nbsp;<span class="sy0">=</span> @SomeCol1</pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">declare @SomeValue smallint
declare @SomeCol1 nvarchar(20)

select @SomeValue = 1,@SomeCol1 = 'Test'


declare @SQL nvarchar(1000)
select @SQL = 'select * from dbo.TestPerf
where SomeCol1 = @InnerSomeCol1 
and SomeValue =  @InnerSomeValue' 

declare @ParmDefinition nvarchar(500)
SET @ParmDefinition = N'@InnerSomeValue smallint ,@InnerSomeCol1 nvarchar(20)'



exec sp_executesql 	@SQL,@ParmDefinition,
			@InnerSomeValue = @SomeValue,
			@InnerSomeCol1 	= @SomeCol1</pre></div></div>

<p>Here is the execution plan</p>
<div class="image_block"><a href="/wp-content/uploads/blogs/DataMgmt/Denis/mongo/ExecPlan2.PNG?mtime=1357609363"><img alt="" src="/wp-content/uploads/blogs/DataMgmt/Denis/mongo/ExecPlan2.PNG?mtime=1357609363" width="306" height="177" /></a></div>
<p>Now we will change the parameters from <strong>smallint </strong>and <strong>nvarchar </strong>to <strong>int </strong>and <strong>varchar </strong>in the query below. This won&#8217;t make any difference in the execution plan because the parameters used in the plan are still of the correct datatype since the inner parameters are used not the outer ones!!</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
</pre></td><td class="de1"><pre class="de1"><span class="coMULTI">/*changed from</span>
<span class="coMULTI">declare @SomeValue smallint</span>
<span class="coMULTI">declare @SomeCol1 nvarchar(20)*/</span>
&nbsp;
<span class="kw1">declare</span> @SomeValue <span class="kw1">int</span>
<span class="kw1">declare</span> @SomeCol1 <span class="kw1">varchar</span><span class="br0">&#40;</span><span class="nu0">20</span><span class="br0">&#41;</span>
&nbsp;
<span class="kw1">select</span> @SomeValue <span class="sy0">=</span> <span class="nu0">1</span>,@SomeCol1 <span class="sy0">=</span> <span class="st0">'Test'</span>
&nbsp;
&nbsp;
<span class="kw1">declare</span> @<span class="kw1">SQL</span> <span class="kw1">nvarchar</span><span class="br0">&#40;</span><span class="nu0">1000</span><span class="br0">&#41;</span>
<span class="kw1">select</span> @<span class="kw1">SQL</span> <span class="sy0">=</span> <span class="st0">'select * from dbo.TestPerf</span>
<span class="st0">where SomeCol1 = @InnerSomeCol1 </span>
<span class="st0">and SomeValue = &nbsp;@InnerSomeValue'</span> 
&nbsp;
<span class="kw1">declare</span> @ParmDefinition <span class="kw1">nvarchar</span><span class="br0">&#40;</span><span class="nu0">500</span><span class="br0">&#41;</span>
<span class="kw1">SET</span> @ParmDefinition <span class="sy0">=</span> N<span class="st0">'@InnerSomeValue smallint ,@InnerSomeCol1 nvarchar(20)'</span>
&nbsp;
&nbsp;
&nbsp;
<span class="kw1">exec</span> <span class="kw3">sp_executesql</span> &nbsp;@<span class="kw1">SQL</span>,@ParmDefinition,
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; @InnerSomeValue <span class="sy0">=</span> @SomeValue,
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; @InnerSomeCol1 &nbsp;<span class="sy0">=</span> @SomeCol1</pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">/*changed from
declare @SomeValue smallint
declare @SomeCol1 nvarchar(20)*/

declare @SomeValue int
declare @SomeCol1 varchar(20)

select @SomeValue = 1,@SomeCol1 = 'Test'


declare @SQL nvarchar(1000)
select @SQL = 'select * from dbo.TestPerf
where SomeCol1 = @InnerSomeCol1 
and SomeValue =  @InnerSomeValue' 

declare @ParmDefinition nvarchar(500)
SET @ParmDefinition = N'@InnerSomeValue smallint ,@InnerSomeCol1 nvarchar(20)'



exec sp_executesql 	@SQL,@ParmDefinition,
			@InnerSomeValue = @SomeValue,
			@InnerSomeCol1 	= @SomeCol1</pre></div></div>

<p>Here is the execution plan</p>
<div class="image_block"><a href="/wp-content/uploads/blogs/DataMgmt/Denis/mongo/ExecPlan3.PNG?mtime=1357609373"><img alt="" src="/wp-content/uploads/blogs/DataMgmt/Denis/mongo/ExecPlan3.PNG?mtime=1357609373" width="299" height="182" /></a></div>
<p>That wraps up this blog post</p>
<p></p>
<p>*** <strong>If you have a SQL related question try our <a href="http://forum.lessthandot.com/viewforum.php?f=17">Microsoft SQL Server Programming</a> forum or our <a href="http://forum.lessthandot.com/viewforum.php?f=22">Microsoft SQL Server Admin</a> forum</strong><ins></ins></p>
]]></content:encoded>
			<wfw:commentRss>/index.php/datamgmt/datadesign/avoid-conversions-in-execution-plans-by/feed/</wfw:commentRss>
		<slash:comments>6</slash:comments>
		</item>
		<item>
		<title>Changing exec to sp_executesql doesn&#8217;t provide any benefit if you are not using parameters correctly</title>
		<link>/index.php/datamgmt/datadesign/changing-exec-to-sp_executesql-doesn-t-p/</link>
		<comments>/index.php/datamgmt/datadesign/changing-exec-to-sp_executesql-doesn-t-p/#comments</comments>
		<pubDate>Tue, 09 Jun 2009 18:36:42 +0000</pubDate>
		<dc:creator><![CDATA[SQLDenis]]></dc:creator>
				<category><![CDATA[Data Modelling and Design]]></category>
		<category><![CDATA[dynamic sql]]></category>
		<category><![CDATA[exec]]></category>
		<category><![CDATA[sp_executesql]]></category>
		<category><![CDATA[sql]]></category>

		<guid isPermaLink="false">/index.php/2009/06/changing-exec-to-sp_executesql-doesn-t-p/</guid>
		<description><![CDATA[Changing exec to sp_executesql doesn't provide any benefit if you are not using parameters correctly



I was looking through some code recently and noticed all these sp_executesql calls which did not use parameters correctly.
A typical SQL stateme&#8230;]]></description>
				<content:encoded><![CDATA[<p>Changing exec to sp_executesql doesn&#8217;t provide any benefit if you are not using parameters correctly</p>
<p>I was looking through some code recently and noticed all these sp_executesql calls which did not use parameters correctly.<br />
A typical SQL statement would look like this</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
</pre></td><td class="de1"><pre class="de1"><span class="kw1">declare</span> @Col2 <span class="kw1">smallint</span>
<span class="kw1">declare</span> @Col1 <span class="kw1">int</span>
&nbsp;
<span class="kw1">select</span> @Col2 <span class="sy0">=</span> <span class="nu0">4</span>,@Col1 <span class="sy0">=</span> <span class="nu0">5</span>
&nbsp;
<span class="kw1">declare</span> @<span class="kw1">SQL</span> <span class="kw1">nvarchar</span><span class="br0">&#40;</span><span class="nu0">1000</span><span class="br0">&#41;</span>
<span class="kw1">select</span> @<span class="kw1">SQL</span> <span class="sy0">=</span> <span class="st0">'select * from test</span>
<span class="st0">where Col2 = '</span> <span class="sy0">+</span> <span class="kw1">convert</span><span class="br0">&#40;</span><span class="kw1">varchar</span><span class="br0">&#40;</span><span class="nu0">10</span><span class="br0">&#41;</span>,@Col2<span class="br0">&#41;</span><span class="sy0">+</span> <span class="st0">'</span>
<span class="st0">and Col1 = '</span> <span class="sy0">+</span> <span class="kw1">convert</span><span class="br0">&#40;</span><span class="kw1">varchar</span><span class="br0">&#40;</span><span class="nu0">10</span><span class="br0">&#41;</span>,@Col1<span class="br0">&#41;</span>
&nbsp;
&nbsp;
&nbsp;
<span class="kw1">exec</span> <span class="kw3">sp_executesql</span> @<span class="kw1">SQL</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">declare @Col2 smallint
declare @Col1 int

select @Col2 = 4,@Col1 = 5

declare @SQL nvarchar(1000)
select @SQL = 'select * from test
where Col2 = ' + convert(varchar(10),@Col2)+ '
and Col1 = ' + convert(varchar(10),@Col1)



exec sp_executesql @SQL</pre></div></div>

<p>What that code does is it builds a SQL statement and executes it. The problem is that when you do something like that the query plan will not be reused when you change the values of @Col2  and @Col1. When a new plan is generated everytime your values change you will bloat SQL Server&#8217;s procedure cache and less memory will be available for data.<br />
Below is some code to demonstrate what I mean, I have tested this code on SQL Server 2008 only!!</p>
<p>First create this table</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
</pre></td><td class="de1"><pre class="de1"><span class="kw1">create</span> <span class="kw1">table</span> dbo.<span class="me1">test</span> <span class="br0">&#40;</span>Col1 <span class="kw1">int</span> <span class="kw1">primary</span> <span class="kw1">key</span>,
Col2 <span class="kw1">smallint</span> not null,
SomeDate <span class="kw1">datetime</span> <span class="kw1">default</span> <span class="kw2">getdate</span><span class="br0">&#40;</span><span class="br0">&#41;</span>,
SomeValue <span class="kw1">char</span><span class="br0">&#40;</span><span class="nu0">10</span><span class="br0">&#41;</span> <span class="kw1">default</span> <span class="st0">'ABCDEFG'</span><span class="br0">&#41;</span>
GO</pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">create table dbo.test (Col1 int primary key,
Col2 smallint not null,
SomeDate datetime default getdate(),
SomeValue char(10) default 'ABCDEFG')
GO</pre></div></div>

<p>Insert a bunch of rows</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
</pre></td><td class="de1"><pre class="de1"><span class="kw1">insert</span> dbo.<span class="me1">test</span><span class="br0">&#40;</span>Col1,Col2<span class="br0">&#41;</span>
<span class="kw1">select</span> number<span class="sy0">+</span> <span class="nu0">1</span>,number <span class="kw1">from</span> master..<span class="me1">spt_values</span>
<span class="kw1">where</span> type <span class="sy0">=</span> <span class="st0">'P'</span>
<span class="kw1">order</span> <span class="kw1">by</span> number</pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">insert dbo.test(Col1,Col2)
select number+ 1,number from master..spt_values
where type = 'P'
order by number</pre></div></div>

<p>Now let&#8217;s see what we inserted</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
</pre></td><td class="de1"><pre class="de1"><span class="kw1">select</span> <span class="sy0">*</span> <span class="kw1">from</span> dbo.<span class="me1">test</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">select * from dbo.test</pre></div></div>

<p>(results abridged)<br />
Col1	Col2	SomeDate	SomeValue<br />
1	0	2009-06-09 11:50:04.327	ABCDEFG<br />
2	1	2009-06-09 11:50:04.327	ABCDEFG<br />
3	2	2009-06-09 11:50:04.327	ABCDEFG<br />
4	3	2009-06-09 11:50:04.327	ABCDEFG<br />
5	4	2009-06-09 11:50:04.327	ABCDEFG<br />
6	5	2009-06-09 11:50:04.327	ABCDEFG<br />
7	6	2009-06-09 11:50:04.327	ABCDEFG<br />
&#8230;..<br />
&#8230;..<br />
&#8230;..<br />
2047	2046	2009-06-09 11:50:04.327	ABCDEFG<br />
2048	2047	2009-06-09 11:50:04.327	ABCDEFG  </p>
<p>First let&#8217;s clear our procedure cache</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
</pre></td><td class="de1"><pre class="de1"><span class="kw1">dbcc</span> freeproccache</pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">dbcc freeproccache</pre></div></div>

<p>run these 2 queries 5 times</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
</pre></td><td class="de1"><pre class="de1"><span class="kw1">select</span> <span class="sy0">*</span> <span class="kw1">from</span> dbo.<span class="me1">test</span>
<span class="kw1">where</span> Col2 <span class="sy0">=</span> <span class="nu0">3</span>
and Col1 <span class="sy0">=</span> <span class="nu0">4</span>
go
&nbsp;
<span class="kw1">select</span> <span class="sy0">*</span> <span class="kw1">from</span> dbo.<span class="me1">test</span>
<span class="kw1">where</span> Col2 <span class="sy0">=</span> <span class="nu0">4</span>
and Col1 <span class="sy0">=</span> <span class="nu0">5</span>
go</pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">select * from dbo.test
where Col2 = 3
and Col1 = 4
go

select * from dbo.test
where Col2 = 4
and Col1 = 5
go</pre></div></div>

<p>Now run the following query to see how many plans we have.</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
</pre></td><td class="de1"><pre class="de1"><span class="kw1">select</span> q.<span class="kw1">text</span>,cp.<span class="me1">usecounts</span>,cp.<span class="me1">objtype</span>,p.<span class="sy0">*</span>,
q.<span class="sy0">*</span>,
cp.<span class="me1">plan_handle</span>
<span class="kw1">from</span>
sys.<span class="me1">dm_exec_cached_plans</span> cp
cross apply sys.<span class="me1">dm_exec_query_plan</span><span class="br0">&#40;</span>cp.<span class="me1">plan_handle</span><span class="br0">&#41;</span> p
cross apply sys.<span class="me1">dm_exec_sql_text</span><span class="br0">&#40;</span>cp.<span class="me1">plan_handle</span><span class="br0">&#41;</span> <span class="kw1">as</span> q
<span class="kw1">where</span>
cp.<span class="me1">cacheobjtype</span> <span class="sy0">=</span> <span class="st0">'Compiled Plan'</span> and q.<span class="kw1">text</span> &nbsp;like <span class="st0">'%dbo.test%'</span>
and q.<span class="kw1">text</span> &nbsp;not like <span class="st0">'%sys.dm_exec_cached_plans %'</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">select q.text,cp.usecounts,cp.objtype,p.*,
q.*,
cp.plan_handle
from
sys.dm_exec_cached_plans cp
cross apply sys.dm_exec_query_plan(cp.plan_handle) p
cross apply sys.dm_exec_sql_text(cp.plan_handle) as q
where
cp.cacheobjtype = 'Compiled Plan' and q.text  like '%dbo.test%'
and q.text  not like '%sys.dm_exec_cached_plans %'</pre></div></div>

<p>As you can see we have 2 plans and each was used 5 times. So for each change in the value a new plan gets generated</p>
<p>Let&#8217;s clear the cache again</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
</pre></td><td class="de1"><pre class="de1"><span class="kw1">dbcc</span> freeproccache</pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">dbcc freeproccache</pre></div></div>

<p>Using dynamic SQL with changing parameters also creates a new plan every time you change the values of the parameters.<br />
Run the following block of code 5 times</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
</pre></td><td class="de1"><pre class="de1"><span class="kw1">declare</span> @Col2 <span class="kw1">smallint</span>
<span class="kw1">declare</span> @Col1 <span class="kw1">int</span>
&nbsp;
<span class="kw1">select</span> @Col2 <span class="sy0">=</span> <span class="nu0">11</span>,@Col1 <span class="sy0">=</span> <span class="nu0">12</span>
&nbsp;
<span class="kw1">declare</span> @<span class="kw1">SQL</span> <span class="kw1">varchar</span><span class="br0">&#40;</span><span class="nu0">1000</span><span class="br0">&#41;</span>
<span class="kw1">select</span> @<span class="kw1">SQL</span> <span class="sy0">=</span> <span class="st0">'select * from dbo.test</span>
<span class="st0">where Col2 = '</span> <span class="sy0">+</span> <span class="kw1">convert</span><span class="br0">&#40;</span><span class="kw1">varchar</span><span class="br0">&#40;</span><span class="nu0">10</span><span class="br0">&#41;</span>,@Col2<span class="br0">&#41;</span><span class="sy0">+</span> <span class="st0">'</span>
<span class="st0">and Col1 = '</span> <span class="sy0">+</span> <span class="kw1">convert</span><span class="br0">&#40;</span><span class="kw1">varchar</span><span class="br0">&#40;</span><span class="nu0">10</span><span class="br0">&#41;</span>,@Col1<span class="br0">&#41;</span>
&nbsp;
&nbsp;
<span class="kw1">exec</span> <span class="br0">&#40;</span>@<span class="kw1">SQL</span><span class="br0">&#41;</span>
&nbsp;
go
&nbsp;
<span class="kw1">declare</span> @Col2 <span class="kw1">smallint</span>
<span class="kw1">declare</span> @Col1 <span class="kw1">int</span>
&nbsp;
<span class="kw1">select</span> @Col2 <span class="sy0">=</span> <span class="nu0">12</span>,@Col1 <span class="sy0">=</span> <span class="nu0">13</span>
&nbsp;
<span class="kw1">declare</span> @<span class="kw1">SQL</span> <span class="kw1">varchar</span><span class="br0">&#40;</span><span class="nu0">1000</span><span class="br0">&#41;</span>
<span class="kw1">select</span> @<span class="kw1">SQL</span> <span class="sy0">=</span> <span class="st0">'select * from dbo.test</span>
<span class="st0">where Col2 = '</span> <span class="sy0">+</span> <span class="kw1">convert</span><span class="br0">&#40;</span><span class="kw1">varchar</span><span class="br0">&#40;</span><span class="nu0">10</span><span class="br0">&#41;</span>,@Col2<span class="br0">&#41;</span><span class="sy0">+</span> <span class="st0">'</span>
<span class="st0">and Col1 = '</span> <span class="sy0">+</span> <span class="kw1">convert</span><span class="br0">&#40;</span><span class="kw1">varchar</span><span class="br0">&#40;</span><span class="nu0">10</span><span class="br0">&#41;</span>,@Col1<span class="br0">&#41;</span>
&nbsp;
&nbsp;
<span class="kw1">exec</span> <span class="br0">&#40;</span>@<span class="kw1">SQL</span><span class="br0">&#41;</span>
go</pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">declare @Col2 smallint
declare @Col1 int

select @Col2 = 11,@Col1 = 12

declare @SQL varchar(1000)
select @SQL = 'select * from dbo.test
where Col2 = ' + convert(varchar(10),@Col2)+ '
and Col1 = ' + convert(varchar(10),@Col1)


exec (@SQL)

go

declare @Col2 smallint
declare @Col1 int

select @Col2 = 12,@Col1 = 13

declare @SQL varchar(1000)
select @SQL = 'select * from dbo.test
where Col2 = ' + convert(varchar(10),@Col2)+ '
and Col1 = ' + convert(varchar(10),@Col1)


exec (@SQL)
go</pre></div></div>

<p>Now let&#8217;s see how many plans we have</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
</pre></td><td class="de1"><pre class="de1"><span class="kw1">select</span> q.<span class="kw1">text</span>,cp.<span class="me1">usecounts</span>,cp.<span class="me1">objtype</span>,p.<span class="sy0">*</span>,
q.<span class="sy0">*</span>,
cp.<span class="me1">plan_handle</span>
<span class="kw1">from</span>
sys.<span class="me1">dm_exec_cached_plans</span> cp
cross apply sys.<span class="me1">dm_exec_query_plan</span><span class="br0">&#40;</span>cp.<span class="me1">plan_handle</span><span class="br0">&#41;</span> p
cross apply sys.<span class="me1">dm_exec_sql_text</span><span class="br0">&#40;</span>cp.<span class="me1">plan_handle</span><span class="br0">&#41;</span> <span class="kw1">as</span> q
<span class="kw1">where</span>
cp.<span class="me1">cacheobjtype</span> <span class="sy0">=</span> <span class="st0">'Compiled Plan'</span> and q.<span class="kw1">text</span> &nbsp;like <span class="st0">'%dbo.test%'</span>
and q.<span class="kw1">text</span> &nbsp;not like <span class="st0">'%sys.dm_exec_cached_plans %'</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">select q.text,cp.usecounts,cp.objtype,p.*,
q.*,
cp.plan_handle
from
sys.dm_exec_cached_plans cp
cross apply sys.dm_exec_query_plan(cp.plan_handle) p
cross apply sys.dm_exec_sql_text(cp.plan_handle) as q
where
cp.cacheobjtype = 'Compiled Plan' and q.text  like '%dbo.test%'
and q.text  not like '%sys.dm_exec_cached_plans %'</pre></div></div>

<p>As you can see we have 2 plans with a count of 5 for each.</p>
<p>Now let&#8217;s convert that query to use sp_executesql instead of exec</p>
<p>Run the query below</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
</pre></td><td class="de1"><pre class="de1"><span class="kw1">declare</span> @Col2 <span class="kw1">smallint</span>
<span class="kw1">declare</span> @Col1 <span class="kw1">int</span>
&nbsp;
<span class="kw1">select</span> @Col2 <span class="sy0">=</span> <span class="nu0">3</span>,@Col1 <span class="sy0">=</span> <span class="nu0">4</span>
&nbsp;
<span class="kw1">declare</span> @<span class="kw1">SQL</span> <span class="kw1">varchar</span><span class="br0">&#40;</span><span class="nu0">1000</span><span class="br0">&#41;</span>
<span class="kw1">select</span> @<span class="kw1">SQL</span> <span class="sy0">=</span> <span class="st0">'select * from dbo.test</span>
<span class="st0">where Col2 = '</span> <span class="sy0">+</span> <span class="kw1">convert</span><span class="br0">&#40;</span><span class="kw1">varchar</span><span class="br0">&#40;</span><span class="nu0">10</span><span class="br0">&#41;</span>,@Col2<span class="br0">&#41;</span><span class="sy0">+</span> <span class="st0">'</span>
<span class="st0">and Col1 = '</span> <span class="sy0">+</span> <span class="kw1">convert</span><span class="br0">&#40;</span><span class="kw1">varchar</span><span class="br0">&#40;</span><span class="nu0">10</span><span class="br0">&#41;</span>,@Col1<span class="br0">&#41;</span>
&nbsp;
&nbsp;
&nbsp;
<span class="kw1">exec</span> <span class="kw3">sp_executesql</span> @<span class="kw1">SQL</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">declare @Col2 smallint
declare @Col1 int

select @Col2 = 3,@Col1 = 4

declare @SQL varchar(1000)
select @SQL = 'select * from dbo.test
where Col2 = ' + convert(varchar(10),@Col2)+ '
and Col1 = ' + convert(varchar(10),@Col1)



exec sp_executesql @SQL</pre></div></div>

<p>And you get the following message<br />
<strong>Server: Msg 214, Level 16, State 2, Procedure sp_executesql, Line 1<br />
Procedure expects parameter &#8216;@statement&#8217; of type &#8216;ntext/nchar/nvarchar&#8217;.</strong></p>
<p>This is because sp_executesql expects nvarchar and not varchar</p>
<p>Below is the correct query(but it is not correctly parameterized). First clear the cache again</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
</pre></td><td class="de1"><pre class="de1"><span class="kw1">dbcc</span> freeproccache</pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">dbcc freeproccache</pre></div></div>

<p>Now run the following queries 5 times each</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
</pre></td><td class="de1"><pre class="de1"><span class="kw1">declare</span> @Col2 <span class="kw1">smallint</span>
<span class="kw1">declare</span> @Col1 <span class="kw1">int</span>
&nbsp;
<span class="kw1">select</span> @Col2 <span class="sy0">=</span> <span class="nu0">23</span>,@Col1 <span class="sy0">=</span> <span class="nu0">24</span>
&nbsp;
<span class="kw1">declare</span> @<span class="kw1">SQL</span> <span class="kw1">nvarchar</span><span class="br0">&#40;</span><span class="nu0">1000</span><span class="br0">&#41;</span>
<span class="kw1">select</span> @<span class="kw1">SQL</span> <span class="sy0">=</span> <span class="st0">'select * from dbo.test</span>
<span class="st0">where Col2 = '</span> <span class="sy0">+</span> <span class="kw1">convert</span><span class="br0">&#40;</span><span class="kw1">varchar</span><span class="br0">&#40;</span><span class="nu0">10</span><span class="br0">&#41;</span>,@Col2<span class="br0">&#41;</span><span class="sy0">+</span> <span class="st0">'</span>
<span class="st0">and Col1 = '</span> <span class="sy0">+</span> <span class="kw1">convert</span><span class="br0">&#40;</span><span class="kw1">varchar</span><span class="br0">&#40;</span><span class="nu0">10</span><span class="br0">&#41;</span>,@Col1<span class="br0">&#41;</span>
&nbsp;
&nbsp;
<span class="kw1">exec</span> <span class="kw3">sp_executesql</span> @<span class="kw1">SQL</span>
Go
&nbsp;
&nbsp;
<span class="kw1">declare</span> @Col2 <span class="kw1">smallint</span>
<span class="kw1">declare</span> @Col1 <span class="kw1">int</span>
&nbsp;
<span class="kw1">select</span> @Col2 <span class="sy0">=</span> <span class="nu0">22</span>,@Col1 <span class="sy0">=</span> <span class="nu0">23</span>
&nbsp;
<span class="kw1">declare</span> @<span class="kw1">SQL</span> <span class="kw1">nvarchar</span><span class="br0">&#40;</span><span class="nu0">1000</span><span class="br0">&#41;</span>
<span class="kw1">select</span> @<span class="kw1">SQL</span> <span class="sy0">=</span> <span class="st0">'select * from dbo.test</span>
<span class="st0">where Col2 = '</span> <span class="sy0">+</span> <span class="kw1">convert</span><span class="br0">&#40;</span><span class="kw1">varchar</span><span class="br0">&#40;</span><span class="nu0">10</span><span class="br0">&#41;</span>,@Col2<span class="br0">&#41;</span><span class="sy0">+</span> <span class="st0">'</span>
<span class="st0">and Col1 = '</span> <span class="sy0">+</span> <span class="kw1">convert</span><span class="br0">&#40;</span><span class="kw1">varchar</span><span class="br0">&#40;</span><span class="nu0">10</span><span class="br0">&#41;</span>,@Col1<span class="br0">&#41;</span>
&nbsp;
&nbsp;
&nbsp;
<span class="kw1">exec</span> <span class="kw3">sp_executesql</span> @<span class="kw1">SQL</span>
GO</pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">declare @Col2 smallint
declare @Col1 int

select @Col2 = 23,@Col1 = 24

declare @SQL nvarchar(1000)
select @SQL = 'select * from dbo.test
where Col2 = ' + convert(varchar(10),@Col2)+ '
and Col1 = ' + convert(varchar(10),@Col1)


exec sp_executesql @SQL
Go


declare @Col2 smallint
declare @Col1 int

select @Col2 = 22,@Col1 = 23

declare @SQL nvarchar(1000)
select @SQL = 'select * from dbo.test
where Col2 = ' + convert(varchar(10),@Col2)+ '
and Col1 = ' + convert(varchar(10),@Col1)



exec sp_executesql @SQL
GO</pre></div></div>

<p>Now check again for the plans</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
</pre></td><td class="de1"><pre class="de1"><span class="kw1">select</span> q.<span class="kw1">text</span>,cp.<span class="me1">usecounts</span>,cp.<span class="me1">objtype</span>,p.<span class="sy0">*</span>,
q.<span class="sy0">*</span>,
cp.<span class="me1">plan_handle</span>
<span class="kw1">from</span>
sys.<span class="me1">dm_exec_cached_plans</span> cp
cross apply sys.<span class="me1">dm_exec_query_plan</span><span class="br0">&#40;</span>cp.<span class="me1">plan_handle</span><span class="br0">&#41;</span> p
cross apply sys.<span class="me1">dm_exec_sql_text</span><span class="br0">&#40;</span>cp.<span class="me1">plan_handle</span><span class="br0">&#41;</span> <span class="kw1">as</span> q
<span class="kw1">where</span>
cp.<span class="me1">cacheobjtype</span> <span class="sy0">=</span> <span class="st0">'Compiled Plan'</span> and q.<span class="kw1">text</span> &nbsp;like <span class="st0">'%dbo.test%'</span>
and q.<span class="kw1">text</span> &nbsp;not like <span class="st0">'%sys.dm_exec_cached_plans %'</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">select q.text,cp.usecounts,cp.objtype,p.*,
q.*,
cp.plan_handle
from
sys.dm_exec_cached_plans cp
cross apply sys.dm_exec_query_plan(cp.plan_handle) p
cross apply sys.dm_exec_sql_text(cp.plan_handle) as q
where
cp.cacheobjtype = 'Compiled Plan' and q.text  like '%dbo.test%'
and q.text  not like '%sys.dm_exec_cached_plans %'</pre></div></div>

<p>As you can see we have 2 plans with a count of 5 for each. This is because we didn&#8217;t use sp_executesql correctly and the engine couldn&#8217;t reuse the plan. Here is what Books On Line has to say</p>
<blockquote><p>sp_executesql can be used instead of stored procedures to execute a Transact-SQL statement a number of times when the change in parameter values to the statement is the only variation. Because the Transact-SQL statement itself remains constant and only the parameter values change, the Microsoft® SQL Server™ query optimizer is likely to reuse the execution plan it generates for the first execution.</p></blockquote>
<p>Below is the query which is correctly parameterized. As you can see we have variables inside the string and at execution time we pass values by means of other variables to it.</p>
<p> First clear the cache again</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
</pre></td><td class="de1"><pre class="de1"><span class="kw1">dbcc</span> freeproccache</pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">dbcc freeproccache</pre></div></div>

<p>Now run the following queries 5 times each</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
</pre></td><td class="de1"><pre class="de1"><span class="kw1">declare</span> @Col2 <span class="kw1">smallint</span>, @Col1 <span class="kw1">int</span>
<span class="kw1">select</span> @Col2 <span class="sy0">=</span> <span class="nu0">3</span>,@Col1 <span class="sy0">=</span> <span class="nu0">4</span>
&nbsp;
&nbsp;
<span class="kw1">declare</span> @<span class="kw1">SQL</span> <span class="kw1">nvarchar</span><span class="br0">&#40;</span><span class="nu0">1000</span><span class="br0">&#41;</span>
<span class="kw1">select</span> @<span class="kw1">SQL</span> <span class="sy0">=</span> <span class="st0">'select * from dbo.test</span>
<span class="st0">where Col2 = @InnerCol2 and Col1 = @InnerCol1'</span> 
&nbsp;
<span class="kw1">declare</span> @ParmDefinition <span class="kw1">nvarchar</span><span class="br0">&#40;</span><span class="nu0">500</span><span class="br0">&#41;</span>
<span class="kw1">SET</span> @ParmDefinition <span class="sy0">=</span> N<span class="st0">'@InnerCol2 smallint ,@InnerCol1 int'</span>
&nbsp;
&nbsp;
&nbsp;
<span class="kw1">exec</span> <span class="kw3">sp_executesql</span> &nbsp;@<span class="kw1">SQL</span>,@ParmDefinition,
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; @InnerCol2 &nbsp;<span class="sy0">=</span> @Col2,
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; @InnerCol1 &nbsp;<span class="sy0">=</span> @Col1
go
&nbsp;
&nbsp;
<span class="kw1">declare</span> @Col2 <span class="kw1">smallint</span>, @Col1 <span class="kw1">int</span>
<span class="kw1">select</span> @Col2 <span class="sy0">=</span> <span class="nu0">3</span>,@Col1 <span class="sy0">=</span> <span class="nu0">4</span>
&nbsp;
&nbsp;
<span class="kw1">declare</span> @<span class="kw1">SQL</span> <span class="kw1">nvarchar</span><span class="br0">&#40;</span><span class="nu0">1000</span><span class="br0">&#41;</span>
<span class="kw1">select</span> @<span class="kw1">SQL</span> <span class="sy0">=</span> <span class="st0">'select * from dbo.test</span>
<span class="st0">where Col2 = @InnerCol2 and Col1 = @InnerCol1'</span> 
&nbsp;
<span class="kw1">declare</span> @ParmDefinition <span class="kw1">nvarchar</span><span class="br0">&#40;</span><span class="nu0">500</span><span class="br0">&#41;</span>
<span class="kw1">SET</span> @ParmDefinition <span class="sy0">=</span> N<span class="st0">'@InnerCol2 smallint ,@InnerCol1 int'</span>
&nbsp;
&nbsp;
&nbsp;
<span class="kw1">exec</span> <span class="kw3">sp_executesql</span> &nbsp;@<span class="kw1">SQL</span>,@ParmDefinition,
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; @InnerCol2 &nbsp;<span class="sy0">=</span> @Col2,
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; @InnerCol1 &nbsp;<span class="sy0">=</span> @Col1
&nbsp;
go</pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">declare @Col2 smallint, @Col1 int
select @Col2 = 3,@Col1 = 4


declare @SQL nvarchar(1000)
select @SQL = 'select * from dbo.test
where Col2 = @InnerCol2 and Col1 = @InnerCol1' 

declare @ParmDefinition nvarchar(500)
SET @ParmDefinition = N'@InnerCol2 smallint ,@InnerCol1 int'



exec sp_executesql 	@SQL,@ParmDefinition,
			@InnerCol2 	= @Col2,
			@InnerCol1 	= @Col1
go


declare @Col2 smallint, @Col1 int
select @Col2 = 3,@Col1 = 4


declare @SQL nvarchar(1000)
select @SQL = 'select * from dbo.test
where Col2 = @InnerCol2 and Col1 = @InnerCol1' 

declare @ParmDefinition nvarchar(500)
SET @ParmDefinition = N'@InnerCol2 smallint ,@InnerCol1 int'



exec sp_executesql 	@SQL,@ParmDefinition,
			@InnerCol2 	= @Col2,
			@InnerCol1 	= @Col1

go</pre></div></div>

<p>Check the plans again</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
</pre></td><td class="de1"><pre class="de1"><span class="kw1">select</span> q.<span class="kw1">text</span>,cp.<span class="me1">usecounts</span>,cp.<span class="me1">objtype</span>,p.<span class="sy0">*</span>,
q.<span class="sy0">*</span>,
cp.<span class="me1">plan_handle</span>
<span class="kw1">from</span>
sys.<span class="me1">dm_exec_cached_plans</span> cp
cross apply sys.<span class="me1">dm_exec_query_plan</span><span class="br0">&#40;</span>cp.<span class="me1">plan_handle</span><span class="br0">&#41;</span> p
cross apply sys.<span class="me1">dm_exec_sql_text</span><span class="br0">&#40;</span>cp.<span class="me1">plan_handle</span><span class="br0">&#41;</span> <span class="kw1">as</span> q
<span class="kw1">where</span>
cp.<span class="me1">cacheobjtype</span> <span class="sy0">=</span> <span class="st0">'Compiled Plan'</span> and q.<span class="kw1">text</span> &nbsp;like <span class="st0">'%dbo.test%'</span>
and q.<span class="kw1">text</span> &nbsp;not like <span class="st0">'%sys.dm_exec_cached_plans %'</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">select q.text,cp.usecounts,cp.objtype,p.*,
q.*,
cp.plan_handle
from
sys.dm_exec_cached_plans cp
cross apply sys.dm_exec_query_plan(cp.plan_handle) p
cross apply sys.dm_exec_sql_text(cp.plan_handle) as q
where
cp.cacheobjtype = 'Compiled Plan' and q.text  like '%dbo.test%'
and q.text  not like '%sys.dm_exec_cached_plans %'</pre></div></div>

<p>And you will see that we have only one plan with a count of 10</p>
<p>Instead of running the query like we did before we can also do the following. We only have to declare everything once and then we just need to change the values of the parameters before executing</p>
<p>First clear the cache yet again</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
</pre></td><td class="de1"><pre class="de1"><span class="kw1">dbcc</span> freeproccache</pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">dbcc freeproccache</pre></div></div>

<p>Here is the rewritten query, execute it 5 times</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
</pre></td><td class="de1"><pre class="de1"><span class="kw1">declare</span> @Col2 <span class="kw1">smallint</span>, @Col1 <span class="kw1">int</span>
<span class="kw1">select</span> @Col2 <span class="sy0">=</span> <span class="nu0">3</span>,@Col1 <span class="sy0">=</span> <span class="nu0">4</span>
&nbsp;
&nbsp;
<span class="kw1">declare</span> @<span class="kw1">SQL</span> <span class="kw1">nvarchar</span><span class="br0">&#40;</span><span class="nu0">1000</span><span class="br0">&#41;</span>
<span class="kw1">select</span> @<span class="kw1">SQL</span> <span class="sy0">=</span> <span class="st0">'select * from dbo.test</span>
<span class="st0">where Col2 = @InnerCol2 and Col1 = @InnerCol1'</span> 
&nbsp;
<span class="kw1">declare</span> @ParmDefinition <span class="kw1">nvarchar</span><span class="br0">&#40;</span><span class="nu0">500</span><span class="br0">&#41;</span>
<span class="kw1">SET</span> @ParmDefinition <span class="sy0">=</span> N<span class="st0">'@InnerCol2 smallint ,@InnerCol1 int'</span>
&nbsp;
&nbsp;
&nbsp;
<span class="kw1">exec</span> <span class="kw3">sp_executesql</span> &nbsp;@<span class="kw1">SQL</span>,@ParmDefinition,
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; @InnerCol2 &nbsp;<span class="sy0">=</span> @Col2,
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; @InnerCol1 &nbsp;<span class="sy0">=</span> @Col1
&nbsp;
<span class="co1">--change param values and run the same query</span>
<span class="kw1">select</span> @Col2 <span class="sy0">=</span> <span class="nu0">2</span>,@Col1 <span class="sy0">=</span> <span class="nu0">3</span>
<span class="kw1">exec</span> <span class="kw3">sp_executesql</span> &nbsp;@<span class="kw1">SQL</span>,@ParmDefinition,
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; @InnerCol2 &nbsp;<span class="sy0">=</span> @Col2,
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; @InnerCol1 &nbsp;<span class="sy0">=</span> @Col1
&nbsp;
go </pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">declare @Col2 smallint, @Col1 int
select @Col2 = 3,@Col1 = 4


declare @SQL nvarchar(1000)
select @SQL = 'select * from dbo.test
where Col2 = @InnerCol2 and Col1 = @InnerCol1' 

declare @ParmDefinition nvarchar(500)
SET @ParmDefinition = N'@InnerCol2 smallint ,@InnerCol1 int'



exec sp_executesql 	@SQL,@ParmDefinition,
			@InnerCol2 	= @Col2,
			@InnerCol1 	= @Col1

--change param values and run the same query
select @Col2 = 2,@Col1 = 3
exec sp_executesql 	@SQL,@ParmDefinition,
			@InnerCol2 	= @Col2,
			@InnerCol1 	= @Col1

go </pre></div></div>

<p>And we will check the plans yet again</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
</pre></td><td class="de1"><pre class="de1"><span class="kw1">select</span> q.<span class="kw1">text</span>,cp.<span class="me1">usecounts</span>,cp.<span class="me1">objtype</span>,p.<span class="sy0">*</span>,
q.<span class="sy0">*</span>,
cp.<span class="me1">plan_handle</span>
<span class="kw1">from</span>
sys.<span class="me1">dm_exec_cached_plans</span> cp
cross apply sys.<span class="me1">dm_exec_query_plan</span><span class="br0">&#40;</span>cp.<span class="me1">plan_handle</span><span class="br0">&#41;</span> p
cross apply sys.<span class="me1">dm_exec_sql_text</span><span class="br0">&#40;</span>cp.<span class="me1">plan_handle</span><span class="br0">&#41;</span> <span class="kw1">as</span> q
<span class="kw1">where</span>
cp.<span class="me1">cacheobjtype</span> <span class="sy0">=</span> <span class="st0">'Compiled Plan'</span> and q.<span class="kw1">text</span> &nbsp;like <span class="st0">'%dbo.test%'</span>
and q.<span class="kw1">text</span> &nbsp;not like <span class="st0">'%sys.dm_exec_cached_plans %'</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">select q.text,cp.usecounts,cp.objtype,p.*,
q.*,
cp.plan_handle
from
sys.dm_exec_cached_plans cp
cross apply sys.dm_exec_query_plan(cp.plan_handle) p
cross apply sys.dm_exec_sql_text(cp.plan_handle) as q
where
cp.cacheobjtype = 'Compiled Plan' and q.text  like '%dbo.test%'
and q.text  not like '%sys.dm_exec_cached_plans %'</pre></div></div>

<p>As you can see we still have a count of 10 and only one plan.</p>
<p>As you can see sp_executesql can be beneficial for performance when used correctly. Using sp_executesql will also give you some additional features you can&#8217;t do with EXEC.</p>
<p>How would you get a count of rows in a table? with EXEC you need to use a temp table and populate that, with sp_executesql you can use an output variable</p>
<p>Take a look at the following queries</p>
<p>Here is the EXEC version</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
</pre></td><td class="de1"><pre class="de1"><span class="co1">--EXEC (SQL)</span>
<span class="kw1">DECLARE</span> @TableName <span class="kw1">VARCHAR</span><span class="br0">&#40;</span><span class="nu0">100</span><span class="br0">&#41;</span>,
@TableCount <span class="kw1">INT</span>,
@<span class="kw1">SQL</span> <span class="kw1">NVARCHAR</span><span class="br0">&#40;</span><span class="nu0">100</span><span class="br0">&#41;</span>
&nbsp;
&nbsp;
<span class="kw1">CREATE</span> <span class="kw1">TABLE</span> #temp <span class="br0">&#40;</span>Totalcount <span class="kw1">INT</span><span class="br0">&#41;</span>
<span class="kw1">SELECT</span> @TableName <span class="sy0">=</span> <span class="st0">'test'</span>
<span class="kw1">SELECT</span> @<span class="kw1">SQL</span> <span class="sy0">=</span> <span class="st0">'Insert into #temp Select Count(*) from '</span> <span class="sy0">+</span> @TableName
&nbsp;
<span class="kw1">EXEC</span><span class="br0">&#40;</span> @<span class="kw1">SQL</span><span class="br0">&#41;</span>
&nbsp;
<span class="kw1">SELECT</span> @TableCount <span class="sy0">=</span> Totalcount <span class="kw1">FROM</span> #temp
&nbsp;
<span class="kw1">SELECT</span> @TableCount <span class="kw1">as</span> TheCount
&nbsp;
<span class="kw1">DROP</span> <span class="kw1">TABLE</span> #temp
GO</pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">--EXEC (SQL)
DECLARE @TableName VARCHAR(100),
@TableCount INT,
@SQL NVARCHAR(100)
 
 
CREATE TABLE #temp (Totalcount INT)
SELECT @TableName = 'test'
SELECT @SQL = 'Insert into #temp Select Count(*) from ' + @TableName
 
EXEC( @SQL)
 
SELECT @TableCount = Totalcount FROM #temp
 
SELECT @TableCount as TheCount
 
DROP TABLE #temp
GO</pre></div></div>

<p>Here is the sp_executesql version</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
</pre></td><td class="de1"><pre class="de1"><span class="co1">--sp_executesql</span>
<span class="kw1">DECLARE</span> @TableName <span class="kw1">VARCHAR</span><span class="br0">&#40;</span><span class="nu0">100</span><span class="br0">&#41;</span>,
@TableCount <span class="kw1">INT</span>,
@<span class="kw1">SQL</span> <span class="kw1">NVARCHAR</span><span class="br0">&#40;</span><span class="nu0">100</span><span class="br0">&#41;</span>
&nbsp;
<span class="kw1">SELECT</span> @TableName <span class="sy0">=</span> <span class="st0">'Test'</span>
<span class="kw1">SELECT</span> @<span class="kw1">SQL</span> <span class="sy0">=</span> N<span class="st0">'SELECT @InnerTableCount = COUNT(*) FROM '</span> <span class="sy0">+</span> @TableName
&nbsp;
<span class="kw1">EXEC</span> <span class="kw3">SP_EXECUTESQL</span> @<span class="kw1">SQL</span>, N<span class="st0">'@InnerTableCount INT OUTPUT'</span>, @TableCount <span class="kw1">OUTPUT</span>
&nbsp;
<span class="kw1">SELECT</span> @TableCount
GO</pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">--sp_executesql
DECLARE @TableName VARCHAR(100),
@TableCount INT,
@SQL NVARCHAR(100)
 
SELECT @TableName = 'Test'
SELECT @SQL = N'SELECT @InnerTableCount = COUNT(*) FROM ' + @TableName
 
EXEC SP_EXECUTESQL @SQL, N'@InnerTableCount INT OUTPUT', @TableCount OUTPUT
 
SELECT @TableCount
GO</pre></div></div>

<p>There are more differences between EXEC and sp_executesql, one of the more important one is that sp_executesql can protect you from <strong>SQL Injection</strong>. I encourage you to read <a href="http://www.sommarskog.se/dynamic_sql.html">The curse and blessings of dynamic SQL</a> to learn more stuff</p>
<p>I have written a follow up to this post that explains how to avoid conversions. Here is the link: <a href="/index.php/DataMgmt/DataDesign/avoid-conversions-in-execution-plans-by">Avoid Conversions In Execution Plans By Using sp_executesql Instead of Exec</a></p>
<p></p>
<p>*** <strong>If you have a SQL related question try our <a href="http://forum.lessthandot.com/viewforum.php?f=17">Microsoft SQL Server Programming</a> forum or our <a href="http://forum.lessthandot.com/viewforum.php?f=22">Microsoft SQL Server Admin</a> forum</strong><ins></ins></p>
]]></content:encoded>
			<wfw:commentRss>/index.php/datamgmt/datadesign/changing-exec-to-sp_executesql-doesn-t-p/feed/</wfw:commentRss>
		<slash:comments>10</slash:comments>
		</item>
	</channel>
</rss>
