<?xml version="1.0" encoding="UTF-8"?><rss version="2.0"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:atom="http://www.w3.org/2005/Atom"
	xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
	xmlns:slash="http://purl.org/rss/1.0/modules/slash/"
	>

<channel>
	<title>.net 4.0 &#8211; LessthanDot</title>
	<atom:link href="/index.php/tag/net-4-0/feed/" rel="self" type="application/rss+xml" />
	<link>/</link>
	<description>A Technical Community for IT Professionals</description>
	<lastBuildDate>Sat, 09 Mar 2019 12:50:36 +0000</lastBuildDate>
	<language>en-US</language>
	<sy:updatePeriod>hourly</sy:updatePeriod>
	<sy:updateFrequency>1</sy:updateFrequency>
	<generator>https://wordpress.org/?v=4.6.1</generator>
	<item>
		<title>Optional and named arguments in C# a comparison with SQL Server stored procs</title>
		<link>/index.php/desktopdev/mstech/optional-and-named-arguments-in-c-a-comp/</link>
		<comments>/index.php/desktopdev/mstech/optional-and-named-arguments-in-c-a-comp/#comments</comments>
		<pubDate>Fri, 12 Jun 2009 13:29:57 +0000</pubDate>
		<dc:creator><![CDATA[SQLDenis]]></dc:creator>
				<category><![CDATA[Microsoft Technologies]]></category>
		<category><![CDATA[.net 4.0]]></category>
		<category><![CDATA[c#]]></category>
		<category><![CDATA[visual studio 2010]]></category>

		<guid isPermaLink="false">/index.php/2009/06/optional-and-named-arguments-in-c-a-comp/</guid>
		<description><![CDATA[I was thinking about writing a post about how C# is morphing into SQL because I noticed that C# has added named and optional arguments. Remember the Compound Operators Or How T-SQL Is Morphing Into VB Or C#? This is basically the same kind of thing only it goes into the other direction. For some [&#8230;]]]></description>
				<content:encoded><![CDATA[<p>I was thinking about writing a post about <em>how C# is morphing into SQL</em> because I noticed that C# has added named and optional arguments. Remember the <a href="/index.php/DataMgmt/DataDesign/compound-operators-or-how-t-sql-is-morph">Compound Operators Or How T-SQL Is Morphing Into VB Or C#</a>? This is basically the same kind of thing only it goes into the other direction. </p>
<p>For some bizarre reason Chrissie had the same idea yesterday and posted the following post: <a href="/index.php/DesktopDev/MSTech/what-so-special-about-optional-named-par">What so special about Optional/named parameters</a>. From that article you will learn that VB already had this back in the vb4 days.</p>
<p>So let&#8217;s get started. First the SQL Server version<br />
Create the following stored procedure which has 3 optional parameters</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
</pre></td><td class="de1"><pre class="de1"><span class="kw1">create</span> <span class="kw1">procedure</span> OptionalTest
@Param1 <span class="kw1">varchar</span><span class="br0">&#40;</span><span class="nu0">10</span><span class="br0">&#41;</span>,
@Param2 <span class="kw1">varchar</span><span class="br0">&#40;</span><span class="nu0">10</span><span class="br0">&#41;</span> <span class="sy0">=</span> <span class="st0">'Two'</span>,
@Param3 <span class="kw1">varchar</span><span class="br0">&#40;</span><span class="nu0">10</span><span class="br0">&#41;</span> <span class="sy0">=</span> <span class="st0">'Three'</span>,
@Param4 <span class="kw1">varchar</span><span class="br0">&#40;</span><span class="nu0">10</span><span class="br0">&#41;</span> <span class="sy0">=</span> <span class="sy0">NULL</span>
&nbsp;
<span class="kw1">as</span>
<span class="kw1">begin</span>
&nbsp; &nbsp; <span class="kw1">print</span> <span class="st0">'@Param1 &nbsp;= '</span> <span class="sy0">+</span> @Param1
&nbsp; &nbsp; <span class="kw1">print</span> <span class="st0">'@Param2 &nbsp;= '</span> <span class="sy0">+</span> @Param2
&nbsp; &nbsp; <span class="kw1">print</span> <span class="st0">'@Param3 &nbsp;= '</span> <span class="sy0">+</span> @Param3
&nbsp; &nbsp; <span class="kw1">print</span> <span class="st0">'@Param4 &nbsp;= '</span> <span class="sy0">+</span> <span class="kw1">coalesce</span><span class="br0">&#40;</span>@Param4,<span class="st0">''</span><span class="br0">&#41;</span>
<span class="kw1">end</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">create procedure OptionalTest
@Param1 varchar(10),
@Param2 varchar(10) = 'Two',
@Param3 varchar(10) = 'Three',
@Param4 varchar(10) = NULL

as
begin
	print '@Param1  = ' + @Param1
	print '@Param2  = ' + @Param2
	print '@Param3  = ' + @Param3
	print '@Param4  = ' + coalesce(@Param4,'')
end</pre></div></div>

<p>Execute it with just the first parameter</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
</pre></td><td class="de1"><pre class="de1"><span class="kw1">exec</span> OptionalTest <span class="st0">'bla'</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">exec OptionalTest 'bla'</pre></div></div>

<p>Here is the output<br />
@Param1  = bla<br />
@Param2  = Two<br />
@Param3  = Three<br />
@Param4  = </p>
<p>When executing it with values for the first two parameters the output for the 2nd parameter changes</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
</pre></td><td class="de1"><pre class="de1"><span class="kw1">exec</span> OptionalTest <span class="st0">'bla'</span> ,<span class="st0">'Twelve'</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">exec OptionalTest 'bla' ,'Twelve'</pre></div></div>

<p>@Param1  = bla<br />
@Param2  = Twelve<br />
@Param3  = Three<br />
@Param4  = </p>
<p>When executing with three parameters the third value changes</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
</pre></td><td class="de1"><pre class="de1"><span class="kw1">exec</span> OptionalTest <span class="st0">'bla'</span> ,<span class="st0">'Twelve'</span>,<span class="st0">'Thirsty'</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">exec OptionalTest 'bla' ,'Twelve','Thirsty'</pre></div></div>

<p>@Param1  = bla<br />
@Param2  = Twelve<br />
@Param3  = Thirsty<br />
@Param4  = </p>
<p>And with four parameters all the values that are passed in are printed</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
</pre></td><td class="de1"><pre class="de1"><span class="kw1">exec</span> OptionalTest <span class="st0">'bla'</span> ,<span class="st0">'Twelve'</span>,<span class="st0">'Thirsty'</span>,<span class="st0">'Forty'</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">exec OptionalTest 'bla' ,'Twelve','Thirsty','Forty'</pre></div></div>

<p>@Param1  = bla<br />
@Param2  = Twelve<br />
@Param3  = Thirsty<br />
@Param4  = Forty</p>
<p>If we pass in the first parameter and we olso want to pass in the third parameter we need to use named parameters, in this case we do this @Param3 = &#8216;Thirsty&#8217;</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
</pre></td><td class="de1"><pre class="de1"><span class="kw1">exec</span> OptionalTest <span class="st0">'bla'</span> ,@Param3 <span class="sy0">=</span> <span class="st0">'Thirsty'</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">exec OptionalTest 'bla' ,@Param3 = 'Thirsty'</pre></div></div>

<p>@Param1  = bla<br />
@Param2  = Two<br />
@Param3  = Thirsty<br />
@Param4  = </p>
<p>If you want to pass in the first and the fourt parameter then you need to name the fourth one</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
</pre></td><td class="de1"><pre class="de1"><span class="kw1">exec</span> OptionalTest <span class="st0">'bla'</span> ,@Param4 <span class="sy0">=</span> <span class="st0">'Thirsty'</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">exec OptionalTest 'bla' ,@Param4 = 'Thirsty'</pre></div></div>

<p>@Param1  = bla<br />
@Param2  = Two<br />
@Param3  = Three<br />
@Param4  = Thirsty</p>
<p>Omitting parameters won&#8217;t run or parse for that matter</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
</pre></td><td class="de1"><pre class="de1"><span class="kw1">exec</span> OptionalTest <span class="st0">'bla'</span> ,,,<span class="st0">'Thirsty'</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">exec OptionalTest 'bla' ,,,'Thirsty'</pre></div></div>

<p>Server: Msg 102, Level 15, State 1, Line 1<br />
Incorrect syntax near &#8216;,&#8217;.</p>
<p>You can use nulls but as you can see from the output nothing gets printed at all for paraeter 2 or 3, this is because when you concatenate a NULL value with something else you get nothing back</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
</pre></td><td class="de1"><pre class="de1"><span class="kw1">exec</span> OptionalTest <span class="st0">'bla'</span> ,null,null,<span class="st0">'Thirsty'</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">exec OptionalTest 'bla' ,null,null,'Thirsty'</pre></div></div>

<p>@Param1  = bla</p>
<p>@Param4  = Thirsty</p>
<p>Now we can take a look at the c# version, the c# version is almost identical except that the first parameter is optional where this is not the case with the proc</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="csharp"><thead><tr><td colspan="2"  class="head">C#</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
</pre></td><td class="de1"><pre class="de1"><span class="kw1">using</span> <span class="co3">System</span><span class="sy0">;</span>
<span class="kw1">using</span> <span class="co3">System.Collections.Generic</span><span class="sy0">;</span>
<span class="kw1">using</span> <span class="co3">System.Linq</span><span class="sy0">;</span>
<span class="kw1">using</span> <span class="co3">System.Text</span><span class="sy0">;</span>
&nbsp;
<span class="kw1">namespace</span> ConsoleApplication1
<span class="br0">&#123;</span>
&nbsp; &nbsp; <span class="kw4">class</span> Program
&nbsp; &nbsp; <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">static</span> <span class="kw4">void</span> Main<span class="br0">&#40;</span><span class="kw4">string</span><span class="br0">&#91;</span><span class="br0">&#93;</span> args<span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Program p <span class="sy0">=</span> <span class="kw3">new</span> Program<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Console<span class="sy0">.</span><span class="me1">WriteLine</span><span class="br0">&#40;</span><span class="st0">&quot;p.OptionalTest(bla);&quot;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; p<span class="sy0">.</span><span class="me1">OptionalTest</span><span class="br0">&#40;</span><span class="st0">&quot;bla&quot;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Console<span class="sy0">.</span><span class="me1">WriteLine</span><span class="br0">&#40;</span><span class="st0">&quot;p.OptionalTest(bla,twelve)&quot;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; p<span class="sy0">.</span><span class="me1">OptionalTest</span><span class="br0">&#40;</span><span class="st0">&quot;bla&quot;</span>,<span class="st0">&quot;Twelve&quot;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Console<span class="sy0">.</span><span class="me1">WriteLine</span><span class="br0">&#40;</span><span class="st0">&quot;p.OptionalTest(bla,twelve,Thirsty)&quot;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; p<span class="sy0">.</span><span class="me1">OptionalTest</span><span class="br0">&#40;</span><span class="st0">&quot;bla&quot;</span>, <span class="st0">&quot;Twelve&quot;</span>,<span class="st0">&quot;Thirsty&quot;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Console<span class="sy0">.</span><span class="me1">WriteLine</span><span class="br0">&#40;</span><span class="st0">&quot;p.OptionalTest(bla,twelve,Thirsty,Forty)&quot;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; p<span class="sy0">.</span><span class="me1">OptionalTest</span><span class="br0">&#40;</span><span class="st0">&quot;bla&quot;</span>, <span class="st0">&quot;Twelve&quot;</span>, <span class="st0">&quot;Thirsty&quot;</span>,<span class="st0">&quot;Forty&quot;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Console<span class="sy0">.</span><span class="me1">WriteLine</span><span class="br0">&#40;</span><span class="st0">&quot;p.OptionalTest(bla,param3:Thirsty)&quot;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; p<span class="sy0">.</span><span class="me1">OptionalTest</span><span class="br0">&#40;</span><span class="st0">&quot;bla&quot;</span>, <span class="st0">&quot;Twelve&quot;</span>, param3<span class="sy0">:</span> <span class="st0">&quot;Thirsty&quot;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Console<span class="sy0">.</span><span class="me1">WriteLine</span><span class="br0">&#40;</span><span class="st0">&quot;p.OptionalTest(bla,param4:Thirsty)&quot;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; p<span class="sy0">.</span><span class="me1">OptionalTest</span><span class="br0">&#40;</span><span class="st0">&quot;bla&quot;</span>, <span class="st0">&quot;Twelve&quot;</span>, param4<span class="sy0">:</span> <span class="st0">&quot;Thirsty&quot;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="co1">//p.OptionalTest(&quot;bla&quot;, ,, &quot;Thirsty&quot;);</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="co1">//argument missing won't compile</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Console<span class="sy0">.</span><span class="me1">WriteLine</span><span class="br0">&#40;</span><span class="st0">&quot;p.OptionalTest(bla,null,null,Thirsty)&quot;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; p<span class="sy0">.</span><span class="me1">OptionalTest</span><span class="br0">&#40;</span><span class="st0">&quot;bla&quot;</span>,<span class="kw1">null</span>,<span class="kw1">null</span>, <span class="st0">&quot;Thirsty&quot;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Console<span class="sy0">.</span><span class="me1">ReadLine</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">public</span> <span class="kw4">int</span> OptionalTest<span class="br0">&#40;</span><span class="kw4">string</span> param1 <span class="sy0">=</span> <span class="st0">&quot;2&quot;</span>, <span class="kw4">string</span> param2 <span class="sy0">=</span> <span class="st0">&quot;two&quot;</span>, <span class="kw4">string</span> param3 <span class="sy0">=</span> <span class="st0">&quot;three&quot;</span>, <span class="kw4">string</span> param4 <span class="sy0">=</span> <span class="kw1">null</span><span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Console<span class="sy0">.</span><span class="me1">WriteLine</span><span class="br0">&#40;</span><span class="st0">&quot;param1 = &quot;</span> <span class="sy0">+</span> param1<span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Console<span class="sy0">.</span><span class="me1">WriteLine</span><span class="br0">&#40;</span><span class="st0">&quot;param2 = &quot;</span> <span class="sy0">+</span> param2<span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Console<span class="sy0">.</span><span class="me1">WriteLine</span><span class="br0">&#40;</span><span class="st0">&quot;param3 = &quot;</span> <span class="sy0">+</span> param3<span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Console<span class="sy0">.</span><span class="me1">WriteLine</span><span class="br0">&#40;</span><span class="st0">&quot;param4 = &quot;</span> <span class="sy0">+</span> param4<span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Console<span class="sy0">.</span><span class="me1">WriteLine</span><span class="br0">&#40;</span><span class="st0">&quot;nr&quot;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">return</span> <span class="nu0">0</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp; &nbsp; <span class="br0">&#125;</span>
<span class="br0">&#125;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

namespace ConsoleApplication1
{
    class Program
    {
        static void Main(string[] args)
        {
            Program p = new Program();
            Console.WriteLine("p.OptionalTest(bla);");
            p.OptionalTest("bla");

            Console.WriteLine("p.OptionalTest(bla,twelve)");
            p.OptionalTest("bla","Twelve");

            Console.WriteLine("p.OptionalTest(bla,twelve,Thirsty)");
            p.OptionalTest("bla", "Twelve","Thirsty");

            Console.WriteLine("p.OptionalTest(bla,twelve,Thirsty,Forty)");
            p.OptionalTest("bla", "Twelve", "Thirsty","Forty");

            Console.WriteLine("p.OptionalTest(bla,param3:Thirsty)");
            p.OptionalTest("bla", "Twelve", param3: "Thirsty");

            Console.WriteLine("p.OptionalTest(bla,param4:Thirsty)");
            p.OptionalTest("bla", "Twelve", param4: "Thirsty");

            //p.OptionalTest("bla", ,, "Thirsty");
            //argument missing won't compile

            Console.WriteLine("p.OptionalTest(bla,null,null,Thirsty)");
            p.OptionalTest("bla",null,null, "Thirsty");
            Console.ReadLine();

            
        }

        public int OptionalTest(string param1 = "2", string param2 = "two", string param3 = "three", string param4 = null)
        {
            Console.WriteLine("param1 = " + param1);
            Console.WriteLine("param2 = " + param2);
            Console.WriteLine("param3 = " + param3);
            Console.WriteLine("param4 = " + param4);
            Console.WriteLine("nr");
            return 0;
        }
    }
}</pre></div></div>

<p>Here is the output from those calls</p>
<p>            p.OptionalTest(&#8220;bla&#8221;);<br />
            param1 = bla<br />
            param2 = two<br />
            param3 = three<br />
            param4 =</p>
<p>            p.OptionalTest(&#8220;bla&#8221;,&#8221;twelve&#8221;)<br />
            param1 = bla<br />
            param2 = Twelve<br />
            param3 = three<br />
            param4 =</p>
<p>            p.OptionalTest(&#8220;bla&#8221;,&#8221;twelve&#8221;,&#8221;Thirsty&#8221;)<br />
            param1 = bla<br />
            param2 = Twelve<br />
            param3 = Thirsty<br />
            param4 =</p>
<p>            p.OptionalTest(&#8220;bla&#8221;,&#8221;twelve&#8221;,&#8221;Thirsty&#8221;,&#8221;Forty&#8221;)<br />
            param1 = bla<br />
            param2 = Twelve<br />
            param3 = Thirsty<br />
            param4 = Forty</p>
<p>            p.OptionalTest(&#8220;bla&#8221;,param3:&#8221;Thirsty&#8221;)<br />
            param1 = bla<br />
            param2 = Twelve<br />
            param3 = Thirsty<br />
            param4 =</p>
<p>            p.OptionalTest(&#8220;bla&#8221;,param4:&#8221;Thirsty&#8221;)<br />
            param1 = bla<br />
            param2 = Twelve<br />
            param3 = three<br />
            param4 = Thirsty</p>
<p>            p.OptionalTest(&#8220;bla&#8221;,null,null,&#8221;Thirsty&#8221;)<br />
            param1 = bla<br />
            param2 =<br />
            param3 =<br />
            param4 = Thirsty</p>
<p>As you can see there is almost no difference between SQL and C# when calling with named parameters</p>
<p>exec OptionalTest &#8216;bla&#8217; ,@Param4 = &#8216;Thirsty&#8217;<br />
p.OptionalTest(&#8220;bla&#8221;,param4:&#8221;Thirsty&#8221;)</p>
<p>Now you might ask yourself why do we need this? Have you ever called Office COM components? Here is what you would do now</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="csharp"><thead><tr><td colspan="2"  class="head">C#</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
</pre></td><td class="de1"><pre class="de1">word<span class="sy0">.</span><span class="me1">Documents</span><span class="sy0">.</span><span class="kw1">Add</span><span class="br0">&#40;</span><span class="br0">&#41;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">word.Documents.Add()</pre></div></div>

<p>instead of this</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="csharp"><thead><tr><td colspan="2"  class="head">C#</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
</pre></td><td class="de1"><pre class="de1">word<span class="sy0">.</span><span class="me1">Documents</span><span class="sy0">.</span><span class="kw1">Add</span><span class="br0">&#40;</span><span class="kw1">ref</span> oTemplate, <span class="kw1">ref</span> missing, <span class="kw1">ref</span> missing, <span class="kw1">ref</span>
isVisible<span class="br0">&#41;</span><span class="sy0">;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">word.Documents.Add(ref oTemplate, ref missing, ref missing, ref
isVisible);</pre></div></div>

<p>Some of these things might take up to 50 parameters and most of them might be optional, in a case like that optional and named parameters are great!!</p>
<p>If you want to watch a bunch of videos about Visual Studio 2010 then check out the following link: <a href="/index.php/WebDev/WebDesignGraphicsStyling/learn-visual-studio-2010-now-by-watching">Learn Visual Studio 2010 now by watching these videos</a> In that post I have collected over 20 videos that will help you learn the new stuff in Visual Studio 2010 and the .NET framework 4.0</p>
<p>If you want to learn more about c# 4.0 check out the following video with Anders Hejlsberg<br />
http://channel9.msdn.com/posts/VisualStudio/C-40-Questions-and-reasons-behind-the-answers/</p>
<p>Also worthwhile <a href="http://blogs.msdn.com/charlie/archive/2008/10/28/linq-farm-covariance-and-contravariance-in-visual-studio-2010.aspx">C# 4.0 support for covariance and contravariance</a> and <a href="http://code.msdn.microsoft.com/Release/ProjectReleases.aspx?ProjectName=csharpfuture&amp;ReleaseId=1686&amp;wa=wsignin1.0">New C# 4.0 Features Paper</a></p>
]]></content:encoded>
			<wfw:commentRss>/index.php/desktopdev/mstech/optional-and-named-arguments-in-c-a-comp/feed/</wfw:commentRss>
		<slash:comments>1</slash:comments>
		</item>
		<item>
		<title>Visual Studio 2010 and the .NET Framework 4.0 Week, 12 videos on Channel 9</title>
		<link>/index.php/desktopdev/mstech/visual-studio-2010-and-the-net-framework-9/</link>
		<comments>/index.php/desktopdev/mstech/visual-studio-2010-and-the-net-framework-9/#respond</comments>
		<pubDate>Mon, 10 Nov 2008 13:01:20 +0000</pubDate>
		<dc:creator><![CDATA[SQLDenis]]></dc:creator>
				<category><![CDATA[Microsoft Technologies]]></category>
		<category><![CDATA[.net 4.0]]></category>
		<category><![CDATA[c# 4.0 sharepoint server]]></category>
		<category><![CDATA[vb 10]]></category>
		<category><![CDATA[video]]></category>
		<category><![CDATA[visual studio 2010]]></category>

		<guid isPermaLink="false">/index.php/2008/11/visual-studio-2010-and-the-net-framework-9/</guid>
		<description><![CDATA[The week of November 10th is Visual Studio 2010 and the .NET Framework 4.0 week on Channel 9! They will have 12 videos going live this week featuring interviews with various members of the Visual Studio and the .NET Framework product teams, including several screencast demonstrations of the latest bits. Stay tuned to http://channel9.msdn.com/VisualStudio/ for [&#8230;]]]></description>
				<content:encoded><![CDATA[<p>The week of November 10th is Visual Studio 2010 and the .NET Framework 4.0 week on Channel 9! They will have 12 videos going live this week featuring interviews with various members of the Visual Studio and the .NET Framework product teams, including several screencast demonstrations of the latest bits.</p>
<p>Stay tuned to http://channel9.msdn.com/VisualStudio/ for all of the action. Here&#8217;s the lineup:</p>
<p><strong>Monday, November 10th:</strong><br />
&#8211; Visual Studio 2010 Overview with Jason Zander</p>
<p><strong>Languages Day (Tuesday, November 11th):</strong><br />
&#8211; C# 4.0 Implementation and Design Questions<br />
&#8211; VB 10<br />
&#8211; C++ 10: 10 is the new 6</p>
<p><strong>The IDE (Wednesday, November 12th):</strong><br />
&#8211; Being Code-Focused with Visual Studio 2010<br />
&#8211; Test-Driven Development and Visual Studio 2010</p>
<p><strong>Concurrency and Parallelism (Thursday, November 13th):</strong><br />
&#8211; Parallel Extensions in the .NET Framework 4.0<br />
&#8211; Parallel Patterns Library (Native Parallelism)<br />
&#8211; Parallel Debugging Tools in Visual Studio 2010</p>
<p><strong>Web Tools (Friday, October 3rd):</strong> ??? (probably a typo)<br />
&#8211; Sharepoint Development with Visual Studio 2010<br />
&#8211; Web Development and Deployment with Visual Studio 2010</p>
]]></content:encoded>
			<wfw:commentRss>/index.php/desktopdev/mstech/visual-studio-2010-and-the-net-framework-9/feed/</wfw:commentRss>
		<slash:comments>0</slash:comments>
		</item>
		<item>
		<title>.NET Framework 4 Poster In PDF and DeepZoom Formats</title>
		<link>/index.php/desktopdev/mstech/net-framework-4-poster-in-pdf-and-deepzo/</link>
		<comments>/index.php/desktopdev/mstech/net-framework-4-poster-in-pdf-and-deepzo/#comments</comments>
		<pubDate>Thu, 30 Oct 2008 13:25:36 +0000</pubDate>
		<dc:creator><![CDATA[SQLDenis]]></dc:creator>
				<category><![CDATA[Microsoft Technologies]]></category>
		<category><![CDATA[.net 4.0]]></category>
		<category><![CDATA[poster]]></category>

		<guid isPermaLink="false">/index.php/2008/10/net-framework-4-poster-in-pdf-and-deepzo/</guid>
		<description><![CDATA[Brad Abrams has on his blog 2 versions of the .NET Framework 4 poster, he has a PDF version and a DeepZoom version. You will need SilverLight for the DeepZoom version Get them both here: http://blogs.msdn.com/brada/archive/2008/10/29/net-framework-4-poster.aspx]]></description>
				<content:encoded><![CDATA[<p>Brad Abrams has on his blog 2 versions of the .NET Framework 4 poster, he has a PDF version and a DeepZoom version. You will need SilverLight for the DeepZoom version</p>
<p><img src="http://i35.tinypic.com/169jc7t.png" border="0" alt=".NET Framework 4 Poster" /></p>
<p>Get them both here: http://blogs.msdn.com/brada/archive/2008/10/29/net-framework-4-poster.aspx</p>
]]></content:encoded>
			<wfw:commentRss>/index.php/desktopdev/mstech/net-framework-4-poster-in-pdf-and-deepzo/feed/</wfw:commentRss>
		<slash:comments>1</slash:comments>
		</item>
	</channel>
</rss>
