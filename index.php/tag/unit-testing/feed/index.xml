<?xml version="1.0" encoding="UTF-8"?><rss version="2.0"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:atom="http://www.w3.org/2005/Atom"
	xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
	xmlns:slash="http://purl.org/rss/1.0/modules/slash/"
	>

<channel>
	<title>unit testing &#8211; LessthanDot</title>
	<atom:link href="/index.php/tag/unit-testing/feed/" rel="self" type="application/rss+xml" />
	<link>/</link>
	<description>A Technical Community for IT Professionals</description>
	<lastBuildDate>Sat, 09 Mar 2019 12:50:36 +0000</lastBuildDate>
	<language>en-US</language>
	<sy:updatePeriod>hourly</sy:updatePeriod>
	<sy:updateFrequency>1</sy:updateFrequency>
	<generator>https://wordpress.org/?v=4.6.1</generator>
	<item>
		<title>Continuous Javascript Test Execution with WallabyJS</title>
		<link>/index.php/webdev/continuous-javascript-test-execution-with-wallabyjs/</link>
		<comments>/index.php/webdev/continuous-javascript-test-execution-with-wallabyjs/#respond</comments>
		<pubDate>Thu, 13 Oct 2016 19:53:07 +0000</pubDate>
		<dc:creator><![CDATA[Eli Weinstock-Herman (tarwn)]]></dc:creator>
				<category><![CDATA[Web Developer]]></category>
		<category><![CDATA[jasmine]]></category>
		<category><![CDATA[javascript]]></category>
		<category><![CDATA[requirejs]]></category>
		<category><![CDATA[unit testing]]></category>
		<category><![CDATA[wallabyjs]]></category>

		<guid isPermaLink="false">/?p=4676</guid>
		<description><![CDATA[After working with NCrunch building and running tests in the background for the last several years, it feels like something is broken when I have to wait for test results or push a button to start running them. JavaScript runners just didn&#8217;t feel like they provided the same level of development feedback, whether they were [&#8230;]]]></description>
				<content:encoded><![CDATA[<p>After working with NCrunch building and running tests in the background for the last several years, it feels like something is broken when I have to wait for test results or push a button to start running them. JavaScript runners just didn&#8217;t feel like they provided the same level of development feedback, whether they were command-line runners with gulp tasks, plugins like Chutzpah, or dedicated runners like Karma.</p>
<p><em>I&#8217;ve posted previously on both <a href="/index.php/enterprisedev/unittest/reducing-code-build-test-friction/">NCrunch</a> and <a href="/index.php/webdev/uidevelopment/javascript/continuous-javascript-testing-with-karma/">Karma</a>, test runners that run .Net and Javascript code continuously behind the scenes as you develop.</em></p>
<p><a href="https://wallabyjs.com/">WallabyJS</a> is like NCrunch for Javascript. It radiates test statuses directly in your IDE as you edit your code, letting you know what&#8217;s workign and not working without any extra action. No switching to a secondary screen or manually running and waiting for results. It has wide support, integrating with the IntelliJ platform, Visual Studio, Visual Studio Code, Sublime, and more. </p>
<p>I used this sample project throughout the post: <A href="https://github.com/tarwn/townthing">github.com/tarwn/townthing</a>. It is a small sandbox project that uses RequireJS and had been configured for Karma as well as having a Jasmine SpecRunner for running the tests in the browser. Hopefully this means Wallaby will be able to slide right in.</p>
<h2>From Zero to Wallaby, in Visual Studio Code</h2>
<p>First step, open Visual Studio Code and install the extension: ext install wallaby-vscode</p>
<p>Wallaby has a really easy to follow &#8220;getting started&#8221; guide that I mostly ignored: <A href="https://wallabyjs.com/docs/config/overview.html">https://wallabyjs.com/docs/config/overview.html</a></p>
<p>I didn&#8217;t pay a lot of attention, but jumped straight to pushing Ctrl+Shift+R, R after installing the extension. It prompted me to identify a config file (I created an empty &#8220;wallaby.js&#8221; file), then upset my firewall briefly by running node.js (which I allowed).</p>
<p>I then created my wallaby.js configuration using a short example of using wallaby with RequireJS: <a href="https://github.com/wallabyjs/wallaby-requirejs-sample">github.com/wallabyjs/wallaby-requirejs-sample</a></p>
<p><b>wallaby.js</b></p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="javascript"><thead><tr><td colspan="2"  class="head">Javascript</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
</pre></td><td class="de1"><pre class="de1">module.<span class="me1">exports</span> <span class="sy0">=</span> <span class="kw1">function</span> <span class="br0">&#40;</span>wallaby<span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; <span class="kw1">return</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; files<span class="sy0">:</span> <span class="br0">&#91;</span>
&nbsp; &nbsp; &nbsp; <span class="br0">&#123;</span> pattern<span class="sy0">:</span> <span class="st0">'town/js/lib/require-2.1.11.js'</span><span class="sy0">,</span> instrument<span class="sy0">:</span> <span class="kw2">false</span> <span class="br0">&#125;</span><span class="sy0">,</span>
&nbsp; &nbsp; &nbsp; <span class="br0">&#123;</span> pattern<span class="sy0">:</span> <span class="st0">'town/js/lib/*.js'</span><span class="sy0">,</span> load<span class="sy0">:</span> <span class="kw2">false</span> <span class="br0">&#125;</span><span class="sy0">,</span>
&nbsp; &nbsp; &nbsp; <span class="br0">&#123;</span> pattern<span class="sy0">:</span> <span class="st0">'town/js/src/*.js'</span><span class="sy0">,</span> load<span class="sy0">:</span> <span class="kw2">false</span> <span class="br0">&#125;</span><span class="sy0">,</span>
&nbsp; &nbsp; &nbsp; <span class="br0">&#123;</span> pattern<span class="sy0">:</span> <span class="st0">'town/js/test/test-main.js'</span> <span class="br0">&#125;</span>
&nbsp; &nbsp; <span class="br0">&#93;</span><span class="sy0">,</span>
&nbsp;
&nbsp; &nbsp; tests<span class="sy0">:</span> <span class="br0">&#91;</span>
&nbsp; &nbsp; &nbsp; <span class="br0">&#123;</span> pattern<span class="sy0">:</span> <span class="st0">'town/js/test/*.spec.js'</span><span class="sy0">,</span> load<span class="sy0">:</span> <span class="kw2">false</span> <span class="br0">&#125;</span><span class="sy0">,</span>
&nbsp; &nbsp; <span class="br0">&#93;</span><span class="sy0">,</span>
&nbsp;
&nbsp; &nbsp; testFramework<span class="sy0">:</span> <span class="st0">'jasmine'</span>
&nbsp; <span class="br0">&#125;</span><span class="sy0">;</span>
<span class="br0">&#125;</span><span class="sy0">;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">module.exports = function (wallaby) {
  return {
    files: [
      { pattern: 'town/js/lib/require-2.1.11.js', instrument: false },
      { pattern: 'town/js/lib/*.js', load: false },
      { pattern: 'town/js/src/*.js', load: false },
      { pattern: 'town/js/test/test-main.js' }
    ],

    tests: [
      { pattern: 'town/js/test/*.spec.js', load: false },
    ],

    testFramework: 'jasmine'
  };
};</pre></div></div>

<p>This identifies all the files and tests for wallaby, but tells it not to actually load anything but RequireJS and and my RequireJS configuration (tets-main.js).</p>
<p>Currently, my test main is focused on running karma, but we can easily switch it to be able to run either.</p>
<p><b>test-main.js</b></p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="javascript"><thead><tr><td colspan="2"  class="head">Javascript</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
</pre></td><td class="de1"><pre class="de1"><span class="kw1">var</span> tests <span class="sy0">=</span> <span class="br0">&#91;</span><span class="br0">&#93;</span><span class="sy0">;</span>
&nbsp;
<span class="kw1">var</span> baseUrl <span class="sy0">=</span> <span class="st0">''</span><span class="sy0">;</span>
<span class="kw1">var</span> isUsingKarma <span class="sy0">=</span> <span class="br0">&#40;</span>window.__karma__ <span class="sy0">!=</span> <span class="kw2">undefined</span><span class="br0">&#41;</span><span class="sy0">;</span>
<span class="kw1">var</span> isUsingWallaby <span class="sy0">=</span> <span class="br0">&#40;</span>wallaby <span class="sy0">!=</span> <span class="kw2">undefined</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
<span class="kw1">if</span><span class="br0">&#40;</span>isUsingKarma<span class="br0">&#41;</span><span class="br0">&#123;</span>
&nbsp; baseUrl <span class="sy0">=</span> <span class="st0">'/base/src'</span><span class="sy0">;</span>
&nbsp; <span class="kw1">for</span> <span class="br0">&#40;</span><span class="kw1">var</span> file <span class="kw1">in</span> window.__karma__.<span class="me1">files</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; <span class="kw1">if</span> <span class="br0">&#40;</span>window.__karma__.<span class="me1">files</span>.<span class="kw3">hasOwnProperty</span><span class="br0">&#40;</span>file<span class="br0">&#41;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; <span class="kw1">if</span> <span class="br0">&#40;</span><span class="co2">/spec\.js$/</span>.<span class="me1">test</span><span class="br0">&#40;</span>file<span class="br0">&#41;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; tests.<span class="me1">push</span><span class="br0">&#40;</span>file<span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp; <span class="br0">&#125;</span>
<span class="br0">&#125;</span>
<span class="kw1">else</span> <span class="kw1">if</span><span class="br0">&#40;</span>isUsingWallaby<span class="br0">&#41;</span><span class="br0">&#123;</span>
&nbsp; baseUrl <span class="sy0">=</span> <span class="st0">'/town/js/src'</span><span class="sy0">;</span>
&nbsp; wallaby.<span class="me1">delayStart</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; tests <span class="sy0">=</span> wallaby.<span class="me1">tests</span><span class="sy0">;</span> &nbsp;
<span class="br0">&#125;</span>
&nbsp;
requirejs.<span class="me1">config</span><span class="br0">&#40;</span><span class="br0">&#123;</span>
&nbsp; <span class="co1">// Karma serves files from '/base'</span>
&nbsp; baseUrl<span class="sy0">:</span> baseUrl<span class="sy0">,</span>
&nbsp;
&nbsp; paths<span class="sy0">:</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; <span class="st0">&quot;knockout&quot;</span><span class="sy0">:</span> <span class="st0">&quot;../lib/knockout-3.0.0&quot;</span><span class="sy0">,</span>
&nbsp; &nbsp; <span class="st0">&quot;Squire&quot;</span><span class="sy0">:</span> <span class="st0">&quot;../lib/Squire&quot;</span>
&nbsp; <span class="br0">&#125;</span>
<span class="br0">&#125;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
<span class="co1">// Let's get started!</span>
require<span class="br0">&#40;</span>tests<span class="sy0">,</span> <span class="kw1">function</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#123;</span>
&nbsp;
&nbsp; <span class="kw1">if</span><span class="br0">&#40;</span>isUsingKarma<span class="br0">&#41;</span>
&nbsp; &nbsp; window.__karma__.<span class="me1">start</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; <span class="kw1">else</span> <span class="kw1">if</span><span class="br0">&#40;</span>isUsingWallaby<span class="br0">&#41;</span>
&nbsp; &nbsp; wallaby.<span class="me1">start</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
<span class="br0">&#125;</span><span class="br0">&#41;</span><span class="sy0">;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">var tests = [];

var baseUrl = '';
var isUsingKarma = (window.__karma__ != undefined);
var isUsingWallaby = (wallaby != undefined);

if(isUsingKarma){
  baseUrl = '/base/src';
  for (var file in window.__karma__.files) {
    if (window.__karma__.files.hasOwnProperty(file)) {
      if (/spec\.js$/.test(file)) {
        tests.push(file);
      }
    }
  }
}
else if(isUsingWallaby){
  baseUrl = '/town/js/src';
  wallaby.delayStart();
  tests = wallaby.tests;  
}

requirejs.config({
  // Karma serves files from '/base'
  baseUrl: baseUrl,

  paths: {
    "knockout": "../lib/knockout-3.0.0",
    "Squire": "../lib/Squire"
  }
});

// Let's get started!
require(tests, function(){

  if(isUsingKarma)
  	window.__karma__.start();
  else if(isUsingWallaby)
    wallaby.start();

});</pre></div></div>

<p>The key parts are to ensure I delay wallaby to start, set the test collection and baseUrl for requireJS, then start the tests inside a require statement at the end.</p>
<p><i>Note: I did manage to completely lock up Visual Studio Code while updating the test-main file, but I&#8217;m not sure if that was VS Code&#8217;s fault or Wallaby&#8217;s</i></p>
<p>And there we go. As I type my code in the editor, I get instant notifications of errors (including some handy hover boxes with details) and my test markers turn green/red as I fix and break tests.</p>
<p>Here is the working code:<br />
<div id="attachment_4678" style="width: 810px" class="wp-caption alignleft"><a href="/wp-content/uploads/2016/10/PassingTests.png"><img src="/wp-content/uploads/2016/10/PassingTests-1024x338.png" alt="Passing Tests w/ Inline Markers and Wallaby Console" width="800"" class="size-large wp-image-4678" srcset="/wp-content/uploads/2016/10/PassingTests-1024x338.png 1024w, /wp-content/uploads/2016/10/PassingTests-300x99.png 300w" sizes="(max-width: 1024px) 100vw, 1024px" /></a><p class="wp-caption-text">Passing Tests w/ Inline Markers and Wallaby Console</p></div></p>
<p>and now when I add a &#8220;+ 1&#8221; to the end of the line without even saving the file, the test marker turns red and I get instant results in the console below:<br />
<div id="attachment_4679" style="width: 810px" class="wp-caption alignleft"><a href="/wp-content/uploads/2016/10/FailingTests.png"><img src="/wp-content/uploads/2016/10/FailingTests-1024x436.png" alt="Failing Tests - Red Marker, Clickable Console Details" width="800" class="size-large wp-image-4679" srcset="/wp-content/uploads/2016/10/FailingTests-1024x436.png 1024w, /wp-content/uploads/2016/10/FailingTests-300x127.png 300w" sizes="(max-width: 1024px) 100vw, 1024px" /></a><p class="wp-caption-text">Failing Tests &#8211; Red Marker, Clickable Console Details</p></div></p>
<p>This is much closer to the experience you get with NCrunch and Visual Studio Code is actually a more limited wallaby experience than other editors. The setup was quicker than karma, even though I&#8217;ve setup karma more times. If you work in Javascript daily, this is definitely worth a long look.</p>
]]></content:encoded>
			<wfw:commentRss>/index.php/webdev/continuous-javascript-test-execution-with-wallabyjs/feed/</wfw:commentRss>
		<slash:comments>0</slash:comments>
		</item>
		<item>
		<title>AngularJS vs Knockout &#8211; Automated Testing (7 of 8)</title>
		<link>/index.php/webdev/uidevelopment/angularjs-vs-knockout-automated-testing-7/</link>
		<comments>/index.php/webdev/uidevelopment/angularjs-vs-knockout-automated-testing-7/#respond</comments>
		<pubDate>Tue, 15 Oct 2013 13:00:00 +0000</pubDate>
		<dc:creator><![CDATA[Eli Weinstock-Herman (tarwn)]]></dc:creator>
				<category><![CDATA[Javascript]]></category>
		<category><![CDATA[UI Development]]></category>
		<category><![CDATA[angularjs]]></category>
		<category><![CDATA[jasmine]]></category>
		<category><![CDATA[knockout]]></category>
		<category><![CDATA[unit testing]]></category>
		<category><![CDATA[you better mock yourself]]></category>

		<guid isPermaLink="false">/index.php/2013/10/angularjs-vs-knockout-automated-testing-7/</guid>
		<description><![CDATA[I'm reviewing Angular and Knockout to determine which would fit better for a variety of upcoming projects. As we get into projects that are larger than a few small views and routes, the ability to add automated testing becomes important.  Unit testing p&#8230;]]></description>
				<content:encoded><![CDATA[<p>I&#8217;m reviewing Angular and Knockout to determine which would fit better for a variety of upcoming projects. As we get into projects that are larger than a few small views and routes, the ability to add automated testing becomes important.  Unit testing provides a safety net against future us screwing up the code that present us is writing, can be used before we write the code (TDD) or after, and helps us keep some of the complexity in check as the project size grows and ages. Let&#8217;s put AngularJS and Knockout under test.</p>
<div style="background-color: #eeeeee; padding: 1em;">
This is the seventh of eight posts looking at the capabilities of knockout and Angular. In the <a href="/index.php/WebDev/UIDevelopment/angularjs-vs-knockout-introduction-1" title="AngularJS vs Knockout - Introduction">introduction post</a>, I outlined the capabilities that I am evaluating for. In the <a href="/index.php/WebDev/UIDevelopment/angularjs-vs-knockout-modules-and-di-6" title="AngularJS vs Knockout - Modules and DI">sixth post</a>, I looked at Modules and Dependency injection, an important lead up to this post, which intends to jump into unit testing those modules.
</div>
<p>All of the examples presented throughout the series are available in the <a href="https://github.com/tarwn/AngularJS-vs-Knockout/" title="View all of the post examples on github">tarwn/AngularJS-vs-Knockout</a> repository on github.</p>
<p>In both sections I&#8217;ll be using <a href="http://pivotal.github.io/jasmine/">Jasmine 1.3.1</a>, the focus is on how the libraries are to test, so this will provide a somewhat level playing field. We&#8217;ll be testing the modules from the previous post, so I&#8217;ll also be including <a href="http://requirejs.org/">RequireJS</a> for the Knockout side of things, but skipping script.js and going with standard script tags for the Angular side (aka, being lazy). I&#8217;ll also be pulling in <a href="https://github.com/iammerrick/Squire.js/">Squire.js</a> and <a href="https://github.com/derickbailey/jasmine.async">Jasmine.Async</a> to add mocking for RequireJS and asynchronous shortcut methods for Jasmine, respectively.</p>
<p>Both sets of tests are tested from a single Jasmine testrunner, in the github repository: <a href="https://github.com/tarwn/AngularJS-vs-Knockout/blob/master/SpecRunner.html" title="View full example file on github">SpecRunner.html</a></p>
<h2>Unit Testing AngularJS</h2>
<p>Unit Testing is of huge importance to the AngularJS team, for which I can&#8217;t applaud them enough. It is constantly mentioned in documentation and tutorials and has resulted in the <a href="http://karma-runner.github.io/0.10/index.html">karma</a> test runner, a tool I&#8217;m impatient to start playing with but unfortunately have not yet had time for.</p>
<h3>AngularJS Modules Under Test</h3>
<p>In the <a href="/index.php/WebDev/UIDevelopment/angularjs-vs-knockout-modules-and-di-6">previous post</a>, we had sampleApp and sampleServices modules that we moved into external files, using script.js as an asynchronous module loader. Other than creating a copy of the files and putting them in a new folder (js/UnitTesting) specific to this post, no modifications have been made.</p>
<p>Relevant sections of <a href="https://github.com/tarwn/AngularJS-vs-Knockout/blob/master/SpecRunner.html" title="View full example file on github">SpecRunner.html</a></p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="html4strict"><thead><tr><td colspan="2"  class="head">HTML</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
</pre></td><td class="de1"><pre class="de1"><span class="sc2">&lt;<span class="kw2">html</span>&gt;</span>
<span class="sc2">&lt;<span class="kw2">head</span>&gt;</span>
&nbsp; &nbsp; <span class="sc-1">&lt;!-- ... --&gt;</span>
&nbsp;
&nbsp; &nbsp; <span class="sc-1">&lt;!-- Angular files libraries --&gt;</span>
&nbsp; &nbsp; <span class="sc2">&lt;<span class="kw2">script</span> <span class="kw3">src</span><span class="sy0">=</span><span class="st0">&quot;Angular/js/lib/angular-1.0.8.min.js&quot;</span>&gt;&lt;<span class="sy0">/</span><span class="kw2">script</span>&gt;</span>
&nbsp; &nbsp; <span class="sc2">&lt;<span class="kw2">script</span> <span class="kw3">src</span><span class="sy0">=</span><span class="st0">&quot;Angular/js/lib/angular-mocks.js&quot;</span>&gt;&lt;<span class="sy0">/</span><span class="kw2">script</span>&gt;</span>
&nbsp; &nbsp; <span class="sc-1">&lt;!-- Angular source files --&gt;</span>
&nbsp; &nbsp; <span class="sc2">&lt;<span class="kw2">script</span> <span class="kw3">src</span><span class="sy0">=</span><span class="st0">&quot;Angular/js/UnitTesting/sampleApp.js&quot;</span>&gt;&lt;<span class="sy0">/</span><span class="kw2">script</span>&gt;</span>
&nbsp; &nbsp; <span class="sc2">&lt;<span class="kw2">script</span> <span class="kw3">src</span><span class="sy0">=</span><span class="st0">&quot;Angular/js/UnitTesting/sampleServices.js&quot;</span>&gt;&lt;<span class="sy0">/</span><span class="kw2">script</span>&gt;</span>
&nbsp; &nbsp; <span class="sc-1">&lt;!-- Angular specs --&gt;</span>
&nbsp; &nbsp; <span class="sc2">&lt;<span class="kw2">script</span> <span class="kw3">src</span><span class="sy0">=</span><span class="st0">&quot;Angular/UnitTestingSpecs.js&quot;</span>&gt;&lt;<span class="sy0">/</span><span class="kw2">script</span>&gt;</span>
&nbsp;
&nbsp; &nbsp; <span class="sc-1">&lt;!-- ... --&gt;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">&lt;html&gt;
&lt;head&gt;
    &lt;!-- ... --&gt;

    &lt;!-- Angular files libraries --&gt;
    &lt;script src="Angular/js/lib/angular-1.0.8.min.js"&gt;&lt;/script&gt;
    &lt;script src="Angular/js/lib/angular-mocks.js"&gt;&lt;/script&gt;
    &lt;!-- Angular source files --&gt;
    &lt;script src="Angular/js/UnitTesting/sampleApp.js"&gt;&lt;/script&gt;
    &lt;script src="Angular/js/UnitTesting/sampleServices.js"&gt;&lt;/script&gt;
    &lt;!-- Angular specs --&gt;
    &lt;script src="Angular/UnitTestingSpecs.js"&gt;&lt;/script&gt;

    &lt;!-- ... --&gt;</pre></div></div>

<p>The specs file then handles mocking the service for the controller and defines the tests I want to run:</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="javascript"><thead><tr><td colspan="2"  class="head">Javascript</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
</pre></td><td class="de1"><pre class="de1"><span class="co1">// &nbsp;borrowed heavily from http://www.benlesh.com/2013/05/angularjs-unit-testing-controllers.html</span>
describe<span class="br0">&#40;</span><span class="st0">&quot;Angular&quot;</span><span class="sy0">,</span> <span class="kw1">function</span> <span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; describe<span class="br0">&#40;</span><span class="st0">&quot;Testing the ModuleDIController&quot;</span><span class="sy0">,</span> <span class="kw1">function</span> <span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">var</span> $scope <span class="sy0">=</span> <span class="kw2">null</span><span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">var</span> expectedServiceResponse <span class="sy0">=</span> <span class="br0">&#91;</span><span class="br0">&#123;</span> name<span class="sy0">:</span> <span class="st0">&quot;A&quot;</span><span class="sy0">,</span> number<span class="sy0">:</span> <span class="nu0">123</span> <span class="br0">&#125;</span><span class="br0">&#93;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">var</span> mockService <span class="sy0">=</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; getList<span class="sy0">:</span> <span class="kw1">function</span> <span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span> <span class="kw1">return</span> expectedServiceResponse<span class="sy0">;</span> <span class="br0">&#125;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span><span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; beforeEach<span class="br0">&#40;</span>module<span class="br0">&#40;</span><span class="st0">'sampleApp'</span><span class="br0">&#41;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; beforeEach<span class="br0">&#40;</span>inject<span class="br0">&#40;</span><span class="kw1">function</span> <span class="br0">&#40;</span>$rootScope<span class="sy0">,</span> $controller<span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; $scope <span class="sy0">=</span> $rootScope.$new<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; $controller<span class="br0">&#40;</span><span class="st0">'ModuleDIController'</span><span class="sy0">,</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; $scope<span class="sy0">:</span> $scope<span class="sy0">,</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ListOfItemsService<span class="sy0">:</span> mockService
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span><span class="br0">&#41;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; <span class="co1">// ... tests here ...</span>
&nbsp; &nbsp; <span class="br0">&#125;</span><span class="br0">&#41;</span><span class="sy0">;</span>
<span class="br0">&#125;</span><span class="br0">&#41;</span><span class="sy0">;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">//  borrowed heavily from http://www.benlesh.com/2013/05/angularjs-unit-testing-controllers.html
describe("Angular", function () {
    describe("Testing the ModuleDIController", function () {
        var $scope = null;

        var expectedServiceResponse = [{ name: "A", number: 123 }];
        var mockService = {
            getList: function () { return expectedServiceResponse; }
        };

        beforeEach(module('sampleApp'));
        beforeEach(inject(function ($rootScope, $controller) {
            $scope = $rootScope.$new();
            $controller('ModuleDIController', {
                $scope: $scope,
                ListOfItemsService: mockService
            });
        }));

        // ... tests here ...
    });
});</pre></div></div>

<p>If you&#8217;re going to work with AngularJS, read everything on <a href="http://www.benlesh.com/" title="Benjamin Lesh: Try, Catch, Fail">Ben Lesh&#8217;s</a> (<a href="https://twitter.com/BenLesh" title="@BenLesh on twitter">@BenLesh</a>) site. It helped me tremendously for both this post and the custom validation section of the validation post. </p>
<p>The spec file starts off by defining both a mock service and the expected response it is going to return. Before each test I load a fresh  sampleApp module, ensuring a clean starting point. Then I use <a href="http://docs.angularjs.org/api/angular.mock.inject" title="AngularJS: angular.mock.inject">inject</a> to create an $injector that will be used for resolving references in my tests, which resolves the ModuleDIController by passing in the provided scope and my mock service.<br />
That last part works, but honestly I only sort of understand what it&#8217;s doing. Even after several more readings of the pages on the injector and the mock.inject call, I&#8217;m still not 100% sure I grasp more than the basic operation.</p>
<p>The tests themselves are pretty straightforward at that point:</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="javascript"><thead><tr><td colspan="2"  class="head">Javascript</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
</pre></td><td class="de1"><pre class="de1">it<span class="br0">&#40;</span><span class="st0">'should start with an empty list of items'</span><span class="sy0">,</span> <span class="kw1">function</span> <span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; expect<span class="br0">&#40;</span>$scope.<span class="me1">listOfItems</span><span class="br0">&#41;</span>.<span class="me1">toEqual</span><span class="br0">&#40;</span><span class="br0">&#91;</span><span class="br0">&#93;</span><span class="br0">&#41;</span><span class="sy0">;</span>
<span class="br0">&#125;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
it<span class="br0">&#40;</span><span class="st0">'should populate list from service when fillItems() is called'</span><span class="sy0">,</span> <span class="kw1">function</span> <span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; $scope.<span class="me1">fillItems</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; expect<span class="br0">&#40;</span>$scope.<span class="me1">listOfItems</span><span class="br0">&#41;</span>.<span class="me1">toEqual</span><span class="br0">&#40;</span>expectedServiceResponse<span class="br0">&#41;</span><span class="sy0">;</span>
<span class="br0">&#125;</span><span class="br0">&#41;</span><span class="sy0">;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">it('should start with an empty list of items', function () {
    expect($scope.listOfItems).toEqual([]);
});

it('should populate list from service when fillItems() is called', function () {
    $scope.fillItems();
    expect($scope.listOfItems).toEqual(expectedServiceResponse);
});</pre></div></div>

<p>And there we have it, verification that our controller uses the service properly to fill it&#8217;s local collection.</p>
<p>This may not be that complicated a test, but once we have the basic components together, extending it to more complex cases is pretty straightforward.</p>
<h2>Unit Testing Knockout/RequireJS</h2>
<p>Unit testing modules defined with RequireJS is challenging. There are a couple libraries out there that people have built to inject mocks and the documentation is sparse for all the examples I found. I chose SquireJS due to having slightly more documentation than the others, but it still took a few iterations to get it working (then I lost those changes and had to redo them after not looking at the code for a couple weeks).</p>
<h3>Knockout/RequireJS Modules Under Test</h3>
<p>In the <a href="/index.php/WebDev/UIDevelopment/angularjs-vs-knockout-modules-and-di-6">previous post</a>, we had sampleApp/ModuleDIModel and sampleServices/ListOfItemsService modules being loaded by RequireJS. Like the AngularJS example, the only change I have made is to move a copy of these files into a folder specific for this post (js/UnitTesting).</p>
<p>Relevant sections of <a href="https://github.com/tarwn/AngularJS-vs-Knockout/blob/master/SpecRunner.html" title="View full example file on github">SpecRunner.html</a></p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="html4strict"><thead><tr><td colspan="2"  class="head">HTML</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
</pre></td><td class="de1"><pre class="de1"><span class="sc2">&lt;<span class="kw2">html</span>&gt;</span>
<span class="sc2">&lt;<span class="kw2">head</span>&gt;</span>
&nbsp; &nbsp; <span class="sc-1">&lt;!-- ... --&gt;</span>
&nbsp;
&nbsp; &nbsp; <span class="sc-1">&lt;!-- Knockout + RequireJS files --&gt;</span>
&nbsp; &nbsp; <span class="sc2">&lt;<span class="kw2">script</span> <span class="kw3">src</span><span class="sy0">=</span><span class="st0">&quot;Knockout/js/lib/knockout-2.3.0.min.js&quot;</span>&gt;&lt;<span class="sy0">/</span><span class="kw2">script</span>&gt;</span>
&nbsp; &nbsp; <span class="sc2">&lt;<span class="kw2">script</span> <span class="kw3">src</span><span class="sy0">=</span><span class="st0">&quot;Knockout/js/lib/require-2.1.8.min.js&quot;</span>&gt;&lt;<span class="sy0">/</span><span class="kw2">script</span>&gt;</span>
&nbsp; &nbsp; <span class="sc-1">&lt;!-- Knockout specs --&gt;</span> &nbsp; &nbsp;
&nbsp; &nbsp; <span class="sc2">&lt;<span class="kw2">script</span> <span class="kw3">src</span><span class="sy0">=</span><span class="st0">&quot;Knockout/UnitTestingSpecs.js&quot;</span>&gt;&lt;<span class="sy0">/</span><span class="kw2">script</span>&gt;</span>
&nbsp;
&nbsp; &nbsp; <span class="sc-1">&lt;!-- ... --&gt;</span>
&nbsp; <span class="sc2">&lt;<span class="sy0">/</span><span class="kw2">script</span>&gt;</span>
<span class="sc2">&lt;<span class="sy0">/</span><span class="kw2">head</span>&gt;</span>
<span class="sc2">&lt;<span class="kw2">body</span>&gt;</span>
<span class="sc2">&lt;<span class="sy0">/</span><span class="kw2">body</span>&gt;</span>
<span class="sc2">&lt;<span class="sy0">/</span><span class="kw2">html</span>&gt;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">&lt;html&gt;
&lt;head&gt;
    &lt;!-- ... --&gt;

    &lt;!-- Knockout + RequireJS files --&gt;
    &lt;script src="Knockout/js/lib/knockout-2.3.0.min.js"&gt;&lt;/script&gt;
    &lt;script src="Knockout/js/lib/require-2.1.8.min.js"&gt;&lt;/script&gt;
    &lt;!-- Knockout specs --&gt;    
    &lt;script src="Knockout/UnitTestingSpecs.js"&gt;&lt;/script&gt;

    &lt;!-- ... --&gt;
  &lt;/script&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;/body&gt;
&lt;/html&gt;</pre></div></div>

<p>Like the AngularJS example, the specs file is responsible for supplying the mocks and defining the tests:</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="javascript"><thead><tr><td colspan="2"  class="head">Javascript</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
</pre></td><td class="de1"><pre class="de1">require.<span class="me1">config</span><span class="br0">&#40;</span><span class="br0">&#123;</span>
&nbsp; &nbsp; baseUrl<span class="sy0">:</span> <span class="st0">&quot;Knockout/js/UnitTesting&quot;</span><span class="sy0">,</span>
&nbsp; &nbsp; paths<span class="sy0">:</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="st0">&quot;Squire&quot;</span><span class="sy0">:</span> <span class="st0">&quot;../../js/lib/Squire&quot;</span>
&nbsp; &nbsp; <span class="br0">&#125;</span>
<span class="br0">&#125;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
describe<span class="br0">&#40;</span><span class="st0">&quot;Knockout&quot;</span><span class="sy0">,</span> <span class="kw1">function</span> <span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; 
&nbsp; &nbsp; describe<span class="br0">&#40;</span><span class="st0">&quot;Testing the ModuleDIModel&quot;</span><span class="sy0">,</span> <span class="kw1">function</span> <span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">var</span> async <span class="sy0">=</span> <span class="kw1">new</span> AsyncSpec<span class="br0">&#40;</span><span class="kw1">this</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">var</span> viewmodel <span class="sy0">=</span> <span class="kw2">null</span><span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">var</span> expectedServiceResponse <span class="sy0">=</span> <span class="br0">&#91;</span><span class="br0">&#123;</span> name<span class="sy0">:</span> <span class="st0">&quot;A&quot;</span><span class="sy0">,</span> number<span class="sy0">:</span> <span class="nu0">123</span> <span class="br0">&#125;</span><span class="br0">&#93;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">var</span> mockService <span class="sy0">=</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; getList<span class="sy0">:</span> <span class="kw1">function</span> <span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span> <span class="kw1">return</span> expectedServiceResponse<span class="sy0">;</span> <span class="br0">&#125;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span><span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; async.<span class="me1">beforeEach</span><span class="br0">&#40;</span><span class="kw1">function</span> <span class="br0">&#40;</span>done<span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; require<span class="br0">&#40;</span><span class="br0">&#91;</span><span class="st0">'Squire'</span><span class="br0">&#93;</span><span class="sy0">,</span> <span class="kw1">function</span> <span class="br0">&#40;</span>Squire<span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">var</span> squire <span class="sy0">=</span> <span class="kw1">new</span> Squire<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; squire.<span class="me1">mock</span><span class="br0">&#40;</span><span class="st0">&quot;sampleServices/ListOfItemsService&quot;</span><span class="sy0">,</span> mockService<span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; .<span class="me1">require</span><span class="br0">&#40;</span><span class="br0">&#91;</span><span class="st0">&quot;sampleApp/ModuleDIModel&quot;</span><span class="br0">&#93;</span><span class="sy0">,</span> <span class="kw1">function</span> <span class="br0">&#40;</span>ModuleDIModel<span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; viewmodel <span class="sy0">=</span> <span class="kw1">new</span> ModuleDIModel<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; done<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; <span class="co1">// ... tests here</span>
&nbsp; &nbsp; <span class="br0">&#125;</span><span class="br0">&#41;</span><span class="sy0">;</span>
<span class="br0">&#125;</span><span class="br0">&#41;</span><span class="sy0">;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">require.config({
    baseUrl: "Knockout/js/UnitTesting",
    paths: {
        "Squire": "../../js/lib/Squire"
    }
});

describe("Knockout", function () {
    
    describe("Testing the ModuleDIModel", function () {
        var async = new AsyncSpec(this);
        var viewmodel = null;

        var expectedServiceResponse = [{ name: "A", number: 123 }];
        var mockService = {
            getList: function () { return expectedServiceResponse; }
        };

        async.beforeEach(function (done) {
            require(['Squire'], function (Squire) {
                var squire = new Squire();
                squire.mock("sampleServices/ListOfItemsService", mockService)
                      .require(["sampleApp/ModuleDIModel"], function (ModuleDIModel) {
                          viewmodel = new ModuleDIModel();
                          done();
                      });
            });
        });

        // ... tests here
    });
});</pre></div></div>

<p>I start out by configuring the base URL for the file that will be under test and the path for Squire. Like the AngularJS example, the first real step is defining the mock service and it&#8217;s expected response. Before each test, I then use Squire to mock the ListOfItemsService and load a fresh copy of the Model I am putting under test to ensure each test starts with a clean slate.</p>
<p>Like before, the tests themselves are pretty straightforward at that point:</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="javascript"><thead><tr><td colspan="2"  class="head">Javascript</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
</pre></td><td class="de1"><pre class="de1">it<span class="br0">&#40;</span><span class="st0">&quot;should start with an empty list of items&quot;</span><span class="sy0">,</span> <span class="kw1">function</span> <span class="br0">&#40;</span>done<span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; expect<span class="br0">&#40;</span>viewmodel.<span class="me1">listOfItems</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#41;</span>.<span class="me1">toEqual</span><span class="br0">&#40;</span><span class="br0">&#91;</span><span class="br0">&#93;</span><span class="br0">&#41;</span><span class="sy0">;</span>
<span class="br0">&#125;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
it<span class="br0">&#40;</span><span class="st0">&quot;should populate list from service when fillItems() is called&quot;</span><span class="sy0">,</span> <span class="kw1">function</span> <span class="br0">&#40;</span>done<span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; viewmodel.<span class="me1">fillItems</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; expect<span class="br0">&#40;</span>viewmodel.<span class="me1">listOfItems</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#41;</span>.<span class="me1">toEqual</span><span class="br0">&#40;</span>expectedServiceResponse<span class="br0">&#41;</span><span class="sy0">;</span>
<span class="br0">&#125;</span><span class="br0">&#41;</span><span class="sy0">;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">it("should start with an empty list of items", function (done) {
    expect(viewmodel.listOfItems()).toEqual([]);
});

it("should populate list from service when fillItems() is called", function (done) {
    viewmodel.fillItems();
    expect(viewmodel.listOfItems()).toEqual(expectedServiceResponse);
});</pre></div></div>

<p>With the exception of having a viewmodel variable instead of a $scope variable and evaluating the listOfItems value with ()&#8217;s, the tests are almost identical to AngularJS&#8217;s.</p>
<p>As I mentioned at the beginning, the documentation was sparse, so for once the Knockout/RequireJS side of things took more twiddling and frustration to get working. Now that I do have the tests working, though, I think it&#8217;s given me enough of a grasp of the mechanism that I could handle more complex test cases just as easily as I felt I could with AngularJS.</p>
<h2>Some Differences</h2>
<p>There were a number of frustrations before I got this working.</p>
<h3>Injecting Dependencies</h3>
<p>Again, kudos to the AngularJS team for making testing such a major focus. Unfortunately, I&#8217;m still parsing and re-parsing the inject() documentation to try and understand how what I did above works. I think part of the problem is that it&#8217;s a little recursive, as the injector is being used and replaced all at once&#8230;or something. Basically I&#8217;m a monkey with a lighter at this point, I know how to make the fire come out but have no idea why or how it does so.</p>
<p>And then we get to RequireJS, which has no focus on unit testing and the couple libraries that have tied into it have very few blogs posts and little documentation behind them. Once I got this first example together, I am feeling much more confidant about doing it again. Unlike Angular&#8217;s inject method, I think I have a pretty good idea how Squire works, but it was still frustrating to get that first test worked out.</p>
<h3>Documentation</h3>
<p>Usually AngularJS is the one that leaves me confused and forcing myself to reread the documentation. In this case, there are a lot of great posts out there that allowed me to ignore the documentation until I got it working (at which point I went back and started rereading it). Did I mention <a href="http://www.benlesh.com/2013/06/angular-js-unit-testing-services.html" title="Ben Lesh - Try, Catch, Fail - 'Angular JS - Unit Testing - Services'">Ben&#8217;s posts</a>?</p>
<p>Mocking modules for RequireJS was much more sparse. To the point where I started recognizing their page titles in google as I was searching alternative terms to try and get more information. There are a very small number of posts on Squire, a few on testr.js, etc. I think the new secret phrase for people looking into this should be &#8220;hurp durp example&#8221;. If you have spent any time looking into this topic, you not only know what I&#8217;m talking about, you&#8217;ve also read it like 40 times in case you missed something.</p>
<h2>Final Thoughts</h2>
<p>The AngularJS side was faster to get up to speed on and required fewer external dependencies. The Knockout/RequireJS side required me to pull in Squire and Jasmine.async and was tougher to get running initially. But now that I have them both running, I&#8217;ve found I don&#8217;t have a strong opinion about either of them, neither looks like it will be that much harder to extend or build more tests with. </p>
<p>I am definitely looking forward to playing with <a href="http://karma-runner.github.io/0.10/index.html">Karma</a> in the near future. I am used to continuous test execution and coverage with <a href="/index.php/EnterpriseDev/UnitTest/reducing-code-build-test-friction" title="LessThanDot Blog - 
Reducing Code-Build-Test Friction with NCrunch">NCrunch</a> and going back to manually executing tests has been annoying.</p>
<div style="background-color: #DDDDDD; padding: 8px; width: 400px;">
<h3>Knockout vs AngularJS</h3>
<ul style="margin: 0px; padding: 4px;">
<li><a href="/index.php/WebDev/UIDevelopment/angularjs-vs-knockout-introduction-1">Introductory Post</a></li>
<li><a href="/index.php/WebDev/UIDevelopment/angularjs-vs-knockout-data-binding-2">Data Binding</a></li>
<li><a href="/index.php/WebDev/UIDevelopment/angularjs-vs-knockout-validation-3">Validation</a></li>
<li><a href="/index.php/WebDev/UIDevelopment/angularjs-vs-knockout-serialization-4">Serialization</a></li>
<li><a href="/index.php/WebDev/UIDevelopment/angularjs-vs-knockout-templating-5">Templating</a></li>
<li><a href="/index.php/WebDev/UIDevelopment/angularjs-vs-knockout-modules-and-di-6">Modules + Dependency Injection</a></li>
<li><b>Automated Testing</b></li>
<li><a href="/index.php/WebDev/UIDevelopment/AJAX/angularjs-vs-knockout-spa-routing-history-8">SPA Routing/History</a></li>
<li><a href="/index.php/WebDev/UIDevelopment/angularjs-vs-knockout-final-thoughts-9">Final, Final Thoughts</a></li>
</ul>
</div>
]]></content:encoded>
			<wfw:commentRss>/index.php/webdev/uidevelopment/angularjs-vs-knockout-automated-testing-7/feed/</wfw:commentRss>
		<slash:comments>0</slash:comments>
		</item>
		<item>
		<title>Real World Azure &#8211; Queue PopReceiptMismatch Bug</title>
		<link>/index.php/desktopdev/mstech/real-world-azure-queue-popreceiptmismatch/</link>
		<comments>/index.php/desktopdev/mstech/real-world-azure-queue-popreceiptmismatch/#respond</comments>
		<pubDate>Mon, 09 Sep 2013 12:41:00 +0000</pubDate>
		<dc:creator><![CDATA[Eli Weinstock-Herman (tarwn)]]></dc:creator>
				<category><![CDATA[Microsoft Technologies]]></category>
		<category><![CDATA[azure queue service]]></category>
		<category><![CDATA[real world azure]]></category>
		<category><![CDATA[unit testing]]></category>
		<category><![CDATA[windows azure]]></category>

		<guid isPermaLink="false">/index.php/2013/09/real-world-azure-queue-popreceiptmismatch/</guid>
		<description><![CDATA[This week I'm starting a new series on "Real World Azure". These are stories or issues I have run into while working with Azure in the "Real World". Today we're looking at a bug in the Azure API for Queue Services that appears to have been around for at&#8230;]]></description>
				<content:encoded><![CDATA[<p>This week I&#8217;m starting a new series on &#8220;Real World Azure&#8221;. These are stories or issues I have run into while working with Azure in the &#8220;Real World&#8221;. Today we&#8217;re looking at a bug in the Azure API for Queue Services that appears to have been around for at least the last two versions of the storage API (prior to 2011-08-18, or SDK 1.7).</p>
<div style="background-color: #ffff99; padding: .5em; margin: 1em;">
<h2 style="margin: .5em 0px;">Real World Azure</h2>
<p>There are a lot of great resources out there on Azure, from demos to webcasts to white papers filled with architectural diagrams. This is to be expected. Microsoft products tend to focus on the 15 minute demo or polished architecture diagram in an enterprise whitepaper, a controlled exposure of only a subset of the functionality you will use in the real world.</p>
<p>I have used Azure daily for years on live business and personal projects, not demos. From supporting production systems running hundred of millions of storage transactions to figuring out why a change to the Azure Management API limits sends certain legacy code into a death spiral to working directly with the APIs in 3-4 different languages to months where we had 2-4 active support cases at any time. These are examples found in the real, production usage.
</p></div>
<p>Today we&#8217;re looking at a longstanding bug in the <a href="http://www.windowsazure.com/en-us/develop/net/how-to-guides/queue-service/" title="Azure Queue Service on WindowsAzure.com">Azure Queue Service</a> that I&#8217;ve been struggling with lately. </p>
<h2>What is the Azure Queue Service?</h2>
<p>The Queue Service allows you to create Queues and Put and Get messages from those queues. Queues in the Queue Service are equally accessible from any number of other Azure services or sites, making it an excellent mechanism for communicating between services.</p>
<p>The Queue uses a two-phase Get/Delete process for dequeueing Messages. When you Get the item, it goes invisible for a period of time you specify until you have finished and call Delete. If you have network problems, a system crash, or other unforeseen circumstances, the item resurfaces in it&#8217;s original position, allowing another of your resources to pick it up and finish executing it instead of losing it forever. </p>
<div style="text-align: center; color: #666666; margin: .5em"">
   <img src="http://tiernok.com/LTDBlog/RealWorldAzure/TwoStepDequeue.png" /><br />
   GETting a Message makes it invisible, DELETEing removes it
</div>
<p>An Update method provides the ability to resurface the Message, extend the visibility timeout, or update the contents of the Message. This last option shows up in Microsoft examples where they have multi-phase work, so when a Message resurfaces you can pick the work up at the last step it reached instead of starting from the beginning (not my recommendation, but that&#8217;s another topic).</p>
<p>The ability to break down work into atomic units and then spin up N units consuming items from that queue is a powerful tool for horizontally scaling work.</p>
<h2>The PopReceipt &#8211; Not Just for GetMessage Calls</h2>
<p>To prevent other processes from updating a Message that has been Get-ed, a unique PopReceipt is issued with the GetMessage response. Later UpdateMessage and DeleteMessage calls are required to have this PopReceipt to access the item. This prevents crosstalk or a Message resurfacing and being picked up by a second worker, then being updated or deleted by the original worker. Very handy.</p>
<p>But wait, I thought this was all to resolve cases where the first system has gone down, why would it try to update that Message again if it&#8217;s down or rebooted?</p>
<p>Setting aside the case where you were persisting the Message Id and PopReceipt somewhere that is accessible when your system un-crashes (don&#8217;t do that), there is one other catch to all of this. Every time you call UpdateMessage to extend the visibility timeout or update the content, a new PopReceipt is issued. This means that in order to continue processing it and complete (Update and Delete) you have to have perfect tracking of the latest PopReceipt throughout the lifetime of the job.  </p>
<p>So when you have a network error (which is the subject of another post and numerous support tickets) and don&#8217;t receive the response to a successful UpdateMessage, you lose the last PopReceipt, even if you can continue and successfully complete processing and only lost one Update call out of 100 during the lifetime of a long-lived Message.</p>
<h2>The PopReceiptMismatch Error</h2>
<p>The Azure REST API outlines all of the errors you can expect to get back, nicely broken down into a <a href="http://msdn.microsoft.com/en-us/library/windowsazure/dd179357.aspx">common set of errors</a> and service-specific lists (<a href="http://msdn.microsoft.com/en-us/library/windowsazure/dd179446.aspx">Queue Service Errors</a>).</p>
<p>The error code we are looking at is:</p>
<div style="background-color: #EEEEEE; margin: .5em; padding: .5em">
PopReceiptMismatch: Bad Request (400) &#8211; The specified pop receipt did not match the pop receipt for a dequeued message.
</div>
<p>The <a href="http://msdn.microsoft.com/en-us/library/windowsazure/dd179347.aspx">Delete Message</a> (Last updated Sept, 2011) documentation specifically outlines this scenario:</p>
<blockquote><p>If a message with a matching pop receipt is not found, the service returns status code 400 (Bad Request), with additional error information indicating that the cause of the failure was a mismatched pop receipt.</p></blockquote>
<p>The <a href="http://msdn.microsoft.com/en-us/library/windowsazure/hh452234.aspx">Update Message</a> (Last updated Sept, 2011) documentation is less specific but sounds like we should expect the same error (emphasis mine):</p>
<blockquote><p>
An Update Message operation will fail if the specified message does not exist in the queue, or if the specified <strong>pop receipt does not match</strong>
</p></blockquote>
<p>So it makes sense that if we GetMessage and somehow have an out of date PopReceipt or attempt to use a PopReceipt that belongs to a different item, we would receive a PopReceiptMismatch error.</p>
<p><strong>Actual Response:</strong></p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="xml"><thead><tr><td colspan="2"  class="head">XML</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
</pre></td><td class="de1"><pre class="de1"><span class="sc3"><span class="re1">&lt;?xml</span> <span class="re0">version</span>=<span class="st0">&quot;1.0&quot;</span> <span class="re0">encoding</span>=<span class="st0">&quot;utf-8&quot;</span><span class="re2">?&gt;</span></span>
<span class="sc3"><span class="re1">&lt;Error<span class="re2">&gt;</span></span></span>
&nbsp; &nbsp;<span class="sc3"><span class="re1">&lt;Code<span class="re2">&gt;</span></span></span>MessageNotFound<span class="sc3"><span class="re1">&lt;/Code<span class="re2">&gt;</span></span></span>
&nbsp; &nbsp;<span class="sc3"><span class="re1">&lt;Message<span class="re2">&gt;</span></span></span>The specified message does not exist.
RequestId:98bd9fb1-d32f-45bd-9159-c900a9b2fed3
Time:2013-09-07T17:04:30.5469796Z<span class="sc3"><span class="re1">&lt;/Message<span class="re2">&gt;</span></span></span>
<span class="sc3"><span class="re1">&lt;/Error<span class="re2">&gt;</span></span></span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">&lt;?xml version="1.0" encoding="utf-8"?&gt;
&lt;Error&gt;
   &lt;Code&gt;MessageNotFound&lt;/Code&gt;
   &lt;Message&gt;The specified message does not exist.
RequestId:98bd9fb1-d32f-45bd-9159-c900a9b2fed3
Time:2013-09-07T17:04:30.5469796Z&lt;/Message&gt;
&lt;/Error&gt;</pre></div></div>

<p>Wait, what? 404, MessageNotFound, &#8220;The specified message does not exist.&#8221;? </p>
<p>That doesn&#8217;t match the documentation OR sound correct?</p>
<h2>The PopReceiptMismatch Bug</h2>
<p>I&#8217;ve written a series of unit tests that show that you receive &#8220;Item not found&#8221; from using an outdated PopReceipt, a PopReceipt from another queue&#8217;s item, and a fabricated PopReceipt. All cases where I would expect to receive the PopReceiptMismatch error.</p>
<p><a href="https://github.com/tarwn/AzureQueueIssues/blob/master/PopReceiptMismatchReturnsWrongError.cs">AzureQueueIssues/PopReceiptMismatchReturnsWrongError.cs</a> (Full code available on Github)</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="csharp"><thead><tr><td colspan="2"  class="head">C#</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
</pre></td><td class="de1"><pre class="de1"><span class="br0">&#91;</span>Test<span class="br0">&#93;</span>
<span class="kw1">public</span> <span class="kw4">void</span> UpdateMessage_UsingIncorrectPopReceipt_Returns400PopReceiptMismatch<span class="br0">&#40;</span><span class="br0">&#41;</span>
<span class="br0">&#123;</span>
&nbsp; &nbsp; <span class="co1">// Create the queue client</span>
&nbsp; &nbsp; <span class="kw1">var</span> queueClient <span class="sy0">=</span> _account<span class="sy0">.</span><span class="me1">CreateCloudQueueClient</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; <span class="co1">// Retrieve a reference to a queue</span>
&nbsp; &nbsp; <span class="kw1">var</span> queue <span class="sy0">=</span> queueClient<span class="sy0">.</span><span class="me1">GetQueueReference</span><span class="br0">&#40;</span><span class="st0">&quot;unit-test&quot;</span> <span class="sy0">+</span> Guid<span class="sy0">.</span><span class="me1">NewGuid</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">.</span><span class="me1">ToString</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; queue<span class="sy0">.</span><span class="me1">CreateIfNotExists</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; queue<span class="sy0">.</span><span class="me1">Clear</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; <span class="co1">// let's queue up a sample message</span>
&nbsp; &nbsp; <span class="kw1">var</span> message <span class="sy0">=</span> <span class="kw3">new</span> CloudQueueMessage<span class="br0">&#40;</span><span class="st0">&quot;test content&quot;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; <span class="co1">// note the unecessary difference in terminology between API (Put) and reference SDK (Add)</span>
&nbsp; &nbsp; queue<span class="sy0">.</span><span class="me1">AddMessage</span><span class="br0">&#40;</span>message<span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; <span class="co1">// now we get the item and violate the first Get's popreceipt</span>
&nbsp; &nbsp; <span class="kw1">var</span> queueMessage1 <span class="sy0">=</span> queue<span class="sy0">.</span><span class="me1">GetMessage</span><span class="br0">&#40;</span>TimeSpan<span class="sy0">.</span><span class="me1">FromSeconds</span><span class="br0">&#40;</span><span class="nu0">1</span><span class="br0">&#41;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; Thread<span class="sy0">.</span><span class="me1">Sleep</span><span class="br0">&#40;</span>TimeSpan<span class="sy0">.</span><span class="me1">FromSeconds</span><span class="br0">&#40;</span><span class="nu0">2</span><span class="br0">&#41;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; <span class="kw1">var</span> queueMessage2 <span class="sy0">=</span> queue<span class="sy0">.</span><span class="me1">GetMessage</span><span class="br0">&#40;</span>TimeSpan<span class="sy0">.</span><span class="me1">FromSeconds</span><span class="br0">&#40;</span><span class="nu0">60</span><span class="br0">&#41;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; <span class="co1">// and just to be absolutely clear that we didn't get the same receipt a second time</span>
&nbsp; &nbsp; Assert<span class="sy0">.</span><span class="me1">AreNotEqual</span><span class="br0">&#40;</span>queueMessage1<span class="sy0">.</span><span class="me1">PopReceipt</span>, queueMessage2<span class="sy0">.</span><span class="me1">PopReceipt</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; <span class="co1">// now lets harvest the error from using the first popreceipt</span>
&nbsp; &nbsp; <span class="kw4">int</span> statusCode <span class="sy0">=</span> <span class="sy0">-</span><span class="nu0">1</span><span class="sy0">;</span>
&nbsp; &nbsp; <span class="kw4">string</span> status <span class="sy0">=</span> <span class="st0">&quot;not defined&quot;</span><span class="sy0">;</span>
&nbsp; &nbsp; <span class="kw1">try</span>
&nbsp; &nbsp; <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; queue<span class="sy0">.</span><span class="me1">UpdateMessage</span><span class="br0">&#40;</span>queueMessage1, TimeSpan<span class="sy0">.</span><span class="me1">FromSeconds</span><span class="br0">&#40;</span><span class="nu0">60</span><span class="br0">&#41;</span>, Microsoft<span class="sy0">.</span><span class="me1">WindowsAzure</span><span class="sy0">.</span><span class="me1">Storage</span><span class="sy0">.</span><span class="me1">Queue</span><span class="sy0">.</span><span class="me1">MessageUpdateFields</span><span class="sy0">.</span><span class="me1">Visibility</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp; &nbsp; <span class="kw1">catch</span> <span class="br0">&#40;</span>StorageException exc<span class="br0">&#41;</span>
&nbsp; &nbsp; <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; statusCode <span class="sy0">=</span> exc<span class="sy0">.</span><span class="me1">RequestInformation</span><span class="sy0">.</span><span class="me1">HttpStatusCode</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; status <span class="sy0">=</span> exc<span class="sy0">.</span><span class="me1">RequestInformation</span><span class="sy0">.</span><span class="me1">HttpStatusMessage</span><span class="sy0">;</span>
&nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp;
&nbsp; &nbsp; <span class="co1">// prove that the item is still valid and it was definately a popreceipt mismatch</span>
&nbsp; &nbsp; queue<span class="sy0">.</span><span class="me1">UpdateMessage</span><span class="br0">&#40;</span>queueMessage2, TimeSpan<span class="sy0">.</span><span class="me1">FromSeconds</span><span class="br0">&#40;</span><span class="nu0">60</span><span class="br0">&#41;</span>, Microsoft<span class="sy0">.</span><span class="me1">WindowsAzure</span><span class="sy0">.</span><span class="me1">Storage</span><span class="sy0">.</span><span class="me1">Queue</span><span class="sy0">.</span><span class="me1">MessageUpdateFields</span><span class="sy0">.</span><span class="me1">Visibility</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; <span class="co1">//cleanup</span>
&nbsp; &nbsp; queue<span class="sy0">.</span><span class="me1">Delete</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; <span class="co1">// documented response</span>
&nbsp; &nbsp; Assert<span class="sy0">.</span><span class="me1">AreEqual</span><span class="br0">&#40;</span>Error_PopReceiptMismatchMessage, status<span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; Assert<span class="sy0">.</span><span class="me1">AreEqual</span><span class="br0">&#40;</span>ErrorCode_PopReceiptMismatch, statusCode<span class="br0">&#41;</span><span class="sy0">;</span>
<span class="br0">&#125;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">[Test]
public void UpdateMessage_UsingIncorrectPopReceipt_Returns400PopReceiptMismatch()
{
	// Create the queue client
	var queueClient = _account.CreateCloudQueueClient();

	// Retrieve a reference to a queue
	var queue = queueClient.GetQueueReference("unit-test" + Guid.NewGuid().ToString());
	queue.CreateIfNotExists();
	queue.Clear();

	// let's queue up a sample message
	var message = new CloudQueueMessage("test content");
	// note the unecessary difference in terminology between API (Put) and reference SDK (Add)
	queue.AddMessage(message);

	// now we get the item and violate the first Get's popreceipt
	var queueMessage1 = queue.GetMessage(TimeSpan.FromSeconds(1));
	Thread.Sleep(TimeSpan.FromSeconds(2));
	var queueMessage2 = queue.GetMessage(TimeSpan.FromSeconds(60));
	// and just to be absolutely clear that we didn't get the same receipt a second time
	Assert.AreNotEqual(queueMessage1.PopReceipt, queueMessage2.PopReceipt);

	// now lets harvest the error from using the first popreceipt
	int statusCode = -1;
	string status = "not defined";
	try
	{
		queue.UpdateMessage(queueMessage1, TimeSpan.FromSeconds(60), Microsoft.WindowsAzure.Storage.Queue.MessageUpdateFields.Visibility);
	}
	catch (StorageException exc)
	{
		statusCode = exc.RequestInformation.HttpStatusCode;
		status = exc.RequestInformation.HttpStatusMessage;
	}

	// prove that the item is still valid and it was definately a popreceipt mismatch
	queue.UpdateMessage(queueMessage2, TimeSpan.FromSeconds(60), Microsoft.WindowsAzure.Storage.Queue.MessageUpdateFields.Visibility);

	//cleanup
	queue.Delete();

	// documented response
	Assert.AreEqual(Error_PopReceiptMismatchMessage, status);
	Assert.AreEqual(ErrorCode_PopReceiptMismatch, statusCode);
}</pre></div></div>

<p>By getting a Message, allowing it&#8217;s visibility timeout to expire, and getting it a second time, we can ensure the original popreceipt is no longer valid.</p>
<p>(and that I can&#8217;t spell definitely without spellcheck)</p>
<p>In a <a href="http://social.msdn.microsoft.com/Forums/windowsazure/en-US/aab37e27-2f04-47db-9e1d-66fd224ac925/handling-queue-message-deletion-error">forum post from 2011</a> a microsoft representative said that the PopReceiptMismatch error is not supposed to be returned for all Pop Receipt Mismatches, only when you use a PopReceipt from another message/queue. His answer indicated that this was an error in the documentation (common response on the forums: service works right the way it is, the documentation must be incorrect). </p>
<p>The cross-queue case is of course included in a test like the one above and available on Github. Spoiler: 404 Message does not exist.</p>
<p><strong>Conclusion: </strong> When a Message does not exist or it exists but you have the wrong PopReceiptMismatch, you will receive &#8220;The specified message does not exist.&#8221;</p>
<p>Here are the tests that I ran against live Azure and the latest emulator:</p>
<style>
dt, dd{
   display: block !important;
   float: none !important;
}
dd{
   display: block !important;
   float: none !important;
   margin: .25em 0 1em 1em !important;
}
</style>
<dl>
<dt>UpdateMessage_UsingIncorrectPopReceipt_Returns400PopReceiptMismatch</dt>
<dd>Fails, receives 404, Message does not exist</dd>
<dt>UpdateMessage_UsingHandWrittenCode_Returns204NoContentOnSuccesfulUpdate</dt>
<dd>Success, verifies code to consume API works for use in later tests</dd>
<dt>UpdateMessage_UsingIncorrectPopReceiptFormat_ReturnsInvalidParameterAndNotPopReceiptMismatch</dt>
<dd>Success, the Common Service Errors documentation is correct, this does not return PopReceiptMismatch as was outlined in the 2011 forum post</dd>
<dt>UpdateMessage_UsingMadeUpButValidFormatPopReceipt_Returns400PopReceiptMismatch</dt>
<dd>Fails, receives 404, Message does not exist</dd>
</dl>
<p>So either this is a bug in the Azure Service code, which continued through at least 2 later versions of the API and at least two versions of the Storage Emulator, or this was intended. Given the granularity and number of service errors defined throughout the rest of the service, the first case is more likely. </p>
<p>As an additional level of confirmation, during a recent Azure support case, the person helping me was sidetracked off into other investigations because he also expected us to be receiving (400) PopReceiptMismatch for this situation. Even the Storage Analytics logs reflects this as a 404.</p>
<h2>The Workaround</h2>
<p>There isn&#8217;t one. </p>
<p>Unfortunately there is no method we can call to determine if the Message actually still exists or not.</p>
<p>The two resolutions I have considered require an absurd amount of extra development. One way would be to build a proxy or logging layer that logs every single call we make, centrally, and tracks the latest state every message is in per our calls out to the service. The next option would be to consume the Analytics logs and track the latest status available even if the individual HTTP call ran into an error during reception. Both of which seem like as much work as building our own queue service.</p>
<h2>Questions</h2>
<p>There are several things it would be nice to know:</p>
<p><strong>1) Confirmation of this bug as well as an indication of when it will be fixed. </strong><br />
Unfortunately it is entirely possible someone has built logic that relies on the incorrect error message (and how they tell which case it is, I have no idea), so I suspect an API version would be required to fix it safely.</p>
<p><strong>2) Why hasn&#8217;t this been uncovered in Microsoft&#8217;s integration testing on the service? </strong><br />
I have a custom SDK that consumes the API. One responsibility of this library is to map received errors into specific custom Exception types (I find these far easier to use then having one StorageException with codes, like the reference SDK from Microsoft). To build automated test cases for this library, I copied the Error Code tables from the documentation and made TestCase attributes with search/replace and some regex magic. A similar method could be used for Integration tests. Add in a tool like <a href="http://fitnesse.org/">FitNesse</a>, and their MSDN documentation could serve as the list of test cases automatically.</p>
<p><strong>3) Why does the PopReceipt change on Updates?</strong><br />
Why do the PopReceipts change on Updates at all? I can&#8217;t think of a single valid case where this is useful. In fact this smells an awful lot like a developer taking a shortcut while working on the Azure service and calling or re-using logic from GetMessage and getting this extra behavior by accident. I haven&#8217;t been able to find an answer to this question yet.</p>
<p>More Real World Azure to come. Technical issues, how to work with support and their limitations, my personal known issues list, and so on.</p>
]]></content:encoded>
			<wfw:commentRss>/index.php/desktopdev/mstech/real-world-azure-queue-popreceiptmismatch/feed/</wfw:commentRss>
		<slash:comments>0</slash:comments>
		</item>
		<item>
		<title>Testing the Not-So-Testable HttpWebResponse</title>
		<link>/index.php/desktopdev/mstech/testing-httpwebresponse/</link>
		<comments>/index.php/desktopdev/mstech/testing-httpwebresponse/#comments</comments>
		<pubDate>Mon, 10 Dec 2012 14:56:00 +0000</pubDate>
		<dc:creator><![CDATA[Eli Weinstock-Herman (tarwn)]]></dc:creator>
				<category><![CDATA[C#]]></category>
		<category><![CDATA[Microsoft Technologies]]></category>
		<category><![CDATA[mocking]]></category>
		<category><![CDATA[unit testing]]></category>

		<guid isPermaLink="false">/index.php/2012/12/testing-httpwebresponse/</guid>
		<description><![CDATA[Recently I was working on a library to consume a REST API without exposing any of the specifics to the rest of the application. Implementing a common interface and set of custom exceptions was easy enough, but exercising the internal logic was going to be tough.]]></description>
				<content:encoded><![CDATA[<p>Recently I was working on a library to consume a REST API without exposing any of the specifics to the rest of the application. Implementing a common interface and set of custom exceptions was easy enough, but exercising the internal logic was going to be tough. </p>
<p>While I could use the live REST API to verify the general logic worked, I had limited options when it came to the full range of HTTP responses and communication failures. Add in the impact those live API calls would have on my build process performance, the occasional failures of my build due the imperfections of talking to a live service, and the overhead of maintaining separation between my test and live data in that service&#8230;what I really had on my hands was the beginning of years of random, painful maintenance.</p>
<p>If only I could mock WebRequest and have it return carefully crafted responses to test my code with, all without ever touching the real network.</p>
<blockquote><p><a href="http://msdn.microsoft.com/en-us/library/system.net.httpwebresponse.aspx" title="HttpWebResponse on MSDN">MSDN</a>: You should never directly create an instance of the HttpWebResponse class.</p></blockquote>
<p>Hmm, ok, maybe not.</p>
<p>Despite having done this search before, this time around I uncovered a couple posts that helped me find a solution to this whole mess. Although not before I left some helpful feedback on the MSDN page about the difference between opinion and documentation.</p>
<p>Yep, making friends.</p>
<p><i>The source code for this post is located on github, with the sample service implementation and test projects: <a href="https://github.com/tarwn/TestableHttpWebResponse" title="tarwn/TestableHttpWebResponse on github">tarwn/TestableHttpWebResponse</a></i></p>
<h2>Let&#8217;s Start with the Tests</h2>
<p>I&#8217;ve created a sample service implementation with two API call implementations. Each one builds a WebRequest, executes it, and analyzes the response. A retry policy wraps around the request execution, evaluating exceptions to determine whether to retry or map them to a local exception type to be rethrown.</p>
<p>Here is an example of one of those calls and the synchronous method it uses internally:</p>
<p><b>TestableHttpWebResponse.Sample/SampleService.cs</b></p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="text"><thead><tr><td colspan="2"  class="head">Text</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
</pre></td><td class="de1"><pre class="de1">public class SampleService
{
&nbsp; &nbsp; // ...
&nbsp;
&nbsp; &nbsp; public ServiceResponse ListRemoteStuff(string operation)
&nbsp; &nbsp; {
&nbsp; &nbsp; &nbsp; &nbsp; var uri = new Uri(_baseUri, operation);
&nbsp; &nbsp; &nbsp; &nbsp; var request = WebRequest.Create(uri);
&nbsp; &nbsp; &nbsp; &nbsp; request.Headers.Add(&quot;version&quot;, &quot;123-awesome&quot;);
&nbsp; &nbsp; &nbsp; &nbsp; return SendRequest(request);
&nbsp; &nbsp; }
&nbsp; &nbsp; 
&nbsp; &nbsp; // ...
&nbsp;
&nbsp; &nbsp; private ServiceResponse SendRequest(WebRequest request)
&nbsp; &nbsp; {
&nbsp; &nbsp; &nbsp; &nbsp; return _retryPolicy.ExecuteAction&lt;ServiceResponse&gt;(() =&gt;
&nbsp; &nbsp; &nbsp; &nbsp; {
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; try
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; {
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; var response = (HttpWebResponse)request.GetResponse();
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; var reader = new StreamReader(response.GetResponseStream());
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; var message = reader.ReadToEnd();
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; return new ServiceResponse() { IsSuccess = true, Message = message };
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; catch (WebException we)
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; {
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; throw MappedException(we);
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }
&nbsp; &nbsp; &nbsp; &nbsp; });
&nbsp; &nbsp; }
&nbsp;
&nbsp; &nbsp; // ...
}</pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">public class SampleService
{
	// ...

	public ServiceResponse ListRemoteStuff(string operation)
	{
		var uri = new Uri(_baseUri, operation);
		var request = WebRequest.Create(uri);
		request.Headers.Add("version", "123-awesome");
		return SendRequest(request);
	}
	
	// ...

	private ServiceResponse SendRequest(WebRequest request)
	{
		return _retryPolicy.ExecuteAction&lt;ServiceResponse&gt;(() =&gt;
		{
			try
			{
				var response = (HttpWebResponse)request.GetResponse();
				var reader = new StreamReader(response.GetResponseStream());
				var message = reader.ReadToEnd();
				return new ServiceResponse() { IsSuccess = true, Message = message };
			}
			catch (WebException we)
			{
				throw MappedException(we);
			}
		});
	}

	// ...
}</pre></div></div>

<p>Testing a method like this typically requires an integration test against the live service. With the provided TestableHttpWebResponse and TestableWebRequest, however, we can set up an expected request and response and verify the service reacts appropriately.</p>
<p><b>1: Register the TestableWebRequestCreateFactory</b><br />
WebRequest.Create(<i>uri</i>) uses a factory to produce the relevant WebRequest instance of a Uri, based on the prefix. So first things first, lets register a new prefix and a factory to serve up requests:</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="text"><thead><tr><td colspan="2"  class="head">Text</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
</pre></td><td class="de1"><pre class="de1">[TestFixtureSetUp]
public void TestFixtureSetup()
{
&nbsp; &nbsp; WebRequest.RegisterPrefix(&quot;test&quot;, TestableWebRequestCreateFactory.GetFactory());
}</pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">[TestFixtureSetUp]
public void TestFixtureSetup()
{
	WebRequest.RegisterPrefix("test", TestableWebRequestCreateFactory.GetFactory());
}</pre></div></div>

<p>TestableWebRequestCreateFactory.GetFactory() exposes a singleton that can be referenced from any of the tests in this class. When the WebRequest object receives a Uri starting with &#8220;test://&#8221;, it will call the associated factory, giving us the opportunity to respond with a Request object of our choosing.</p>
<p>A common base URI will prove helpful as we write the tests:</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="text"><thead><tr><td colspan="2"  class="head">Text</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
</pre></td><td class="de1"><pre class="de1">public Uri BaseUri { get { return new Uri(&quot;test://mydomain.com/api/&quot;); } }</pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">public Uri BaseUri { get { return new Uri("test://mydomain.com/api/"); } }</pre></div></div>

<p><b>2: Building a Test</b></p>
<p>The easiest test to start with is one that will test the &#8220;happy path&#8221; where our API call receives a 200 Success response. </p>
<p>First we need to set up the request:</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="text"><thead><tr><td colspan="2"  class="head">Text</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
</pre></td><td class="de1"><pre class="de1">var operation = &quot;ListOfStuff&quot;;
var expectedRequest = new TestableWebRequest(new Uri(BaseUri, operation));</pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">var operation = "ListOfStuff";
var expectedRequest = new TestableWebRequest(new Uri(BaseUri, operation));</pre></div></div>

<p>Next we need to set up the response the request will return when it is executed:</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="text"><thead><tr><td colspan="2"  class="head">Text</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
</pre></td><td class="de1"><pre class="de1">expectedRequest.EnqueueResponse(HttpStatusCode.OK, &quot;Success&quot;, &quot;Even More Success&quot;, false);</pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">expectedRequest.EnqueueResponse(HttpStatusCode.OK, "Success", "Even More Success", false);</pre></div></div>

<p>And then add it to the Factory so it will be available when WebRequest calls it:</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="text"><thead><tr><td colspan="2"  class="head">Text</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
</pre></td><td class="de1"><pre class="de1">TestableWebRequestCreateFactory.GetFactory().AddRequest(expectedRequest);</pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">TestableWebRequestCreateFactory.GetFactory().AddRequest(expectedRequest);</pre></div></div>

<p>Put all of this together and we have:</p>
<p><b>TestableHttpWebResponse.Sample.Tests/SampleServiceTests.cs</b></p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="text"><thead><tr><td colspan="2"  class="head">Text</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
</pre></td><td class="de1"><pre class="de1">[Test]
public void ListRemoteStuff_ValidRequest_ReturnsSuccessfulResponse()
{
&nbsp; &nbsp; var operation = &quot;ListOfStuff&quot;;
&nbsp; &nbsp; var expectedRequest = new TestableWebRequest(new Uri(BaseUri, operation));
&nbsp; &nbsp; expectedRequest.EnqueueResponse(HttpStatusCode.OK, &quot;Success&quot;, &quot;Even More Success&quot;, false);
&nbsp; &nbsp; TestableWebRequestCreateFactory.GetFactory().AddRequest(expectedRequest);
&nbsp; &nbsp; var service = new SampleService(BaseUri);
&nbsp;
&nbsp; &nbsp; var response = service.ListRemoteStuff(operation);
&nbsp;
&nbsp; &nbsp; Assert.IsTrue(response.IsSuccess);
}</pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">[Test]
public void ListRemoteStuff_ValidRequest_ReturnsSuccessfulResponse()
{
	var operation = "ListOfStuff";
	var expectedRequest = new TestableWebRequest(new Uri(BaseUri, operation));
	expectedRequest.EnqueueResponse(HttpStatusCode.OK, "Success", "Even More Success", false);
	TestableWebRequestCreateFactory.GetFactory().AddRequest(expectedRequest);
	var service = new SampleService(BaseUri);

	var response = service.ListRemoteStuff(operation);

	Assert.IsTrue(response.IsSuccess);
}</pre></div></div>

<p>This exercises the entire successful path of the operation without any additional abstractions in our API code or reliance on external communications and services.</p>
<h2>Testing Http Status Codes</h2>
<p>Another tricky part of testing a service is figuring out how to test HTTP codes other then the success case. </p>
<p>The sample service maps received Protocol Errors (401, 404, etc) to a local exception so the code consuming this library doesn&#8217;t have to know how to parse WebExceptions. </p>
<p><b>TestableHttpWebResponse.Sample/SampleService.cs</b></p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="text"><thead><tr><td colspan="2"  class="head">Text</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
</pre></td><td class="de1"><pre class="de1">private Exception MappedException(WebException we)
{
&nbsp; &nbsp; // map to custom exceptions
&nbsp; &nbsp; if (we.Status == WebExceptionStatus.ProtocolError)
&nbsp; &nbsp; {
&nbsp; &nbsp; &nbsp; &nbsp; var reader = new StreamReader(we.Response.GetResponseStream());
&nbsp; &nbsp; &nbsp; &nbsp; var message = reader.ReadToEnd();
&nbsp; &nbsp; &nbsp; &nbsp; var httpResponse = (HttpWebResponse)we.Response;
&nbsp; &nbsp; &nbsp; &nbsp; switch (httpResponse.StatusCode)
&nbsp; &nbsp; &nbsp; &nbsp; {
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; case HttpStatusCode.NotFound:
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; if (httpResponse.StatusDescription.Contains(&quot;Dohicky&quot;))
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; return new DohickyNotFoundException(message, we);
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; else
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; return new GenericNotFoundException(message, we);
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; default:
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; return new ExampleOfAnotherUsefulException(message, we);
&nbsp; &nbsp; &nbsp; &nbsp; }
&nbsp; &nbsp; }
&nbsp; &nbsp; else
&nbsp; &nbsp; &nbsp; &nbsp; return new SampleServiceOutageException(we);
}</pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">private Exception MappedException(WebException we)
{
	// map to custom exceptions
	if (we.Status == WebExceptionStatus.ProtocolError)
	{
		var reader = new StreamReader(we.Response.GetResponseStream());
		var message = reader.ReadToEnd();
		var httpResponse = (HttpWebResponse)we.Response;
		switch (httpResponse.StatusCode)
		{
			case HttpStatusCode.NotFound:
				if (httpResponse.StatusDescription.Contains("Dohicky"))
					return new DohickyNotFoundException(message, we);
				else
					return new GenericNotFoundException(message, we);
			default:
				return new ExampleOfAnotherUsefulException(message, we);
		}
	}
	else
		return new SampleServiceOutageException(we);
}</pre></div></div>

<p>Exercising the mapping logic is going to require the WebRequest to receive a WebException. Let&#8217;s make that happen.</p>
<p><i>Yes, I know a HEAD request will break this, that&#8217;s why it&#8217;s called &#8220;sample&#8221; code <img src="https://s.w.org/images/core/emoji/2/72x72/1f642.png" alt="🙂" class="wp-smiley" style="height: 1em; max-height: 1em;" /></i></p>
<p>In the first test, we used the EnqueueResponse method of the TestableWebRequest to set up a 200 Success response. It&#8217;s just as simple to return a 404 Http code with the expected message and request body:</p>
<p><b>TestableHttpWebResponse.Sample.Tests/SampleServiceTests.cs</b></p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="text"><thead><tr><td colspan="2"  class="head">Text</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
</pre></td><td class="de1"><pre class="de1">expectedRequest.EnqueueResponse(HttpStatusCode.NotFound, &quot;Dohicky not found&quot;, &quot;I couldn't find your dohicky because I don't like you&quot;, true);</pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">expectedRequest.EnqueueResponse(HttpStatusCode.NotFound, "Dohicky not found", "I couldn't find your dohicky because I don't like you", true);</pre></div></div>

<p>Which allows us to create the ExpectedException test:</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="text"><thead><tr><td colspan="2"  class="head">Text</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
</pre></td><td class="de1"><pre class="de1">[Test]
[ExpectedException(typeof(DohickyNotFoundException))]
public void ListRemoteStuff_404DohickeyNotFound_ThrowsDohickeyNotFoundException()
{
&nbsp; &nbsp; var operation = &quot;ListOfStuff&quot;;
&nbsp; &nbsp; var expectedRequest = new TestableWebRequest(new Uri(BaseUri, operation));
&nbsp; &nbsp; expectedRequest.EnqueueResponse(HttpStatusCode.NotFound, &quot;Dohicky not found&quot;, &quot;I couldn't find your dohicky because I don't like you&quot;, true);
&nbsp; &nbsp; TestableWebRequestCreateFactory.GetFactory().AddRequest(expectedRequest);
&nbsp; &nbsp; var service = new SampleService(BaseUri);
&nbsp;
&nbsp; &nbsp; var response = service.ListRemoteStuff(operation);
&nbsp;
&nbsp; &nbsp; // expect exception
}</pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">[Test]
[ExpectedException(typeof(DohickyNotFoundException))]
public void ListRemoteStuff_404DohickeyNotFound_ThrowsDohickeyNotFoundException()
{
	var operation = "ListOfStuff";
	var expectedRequest = new TestableWebRequest(new Uri(BaseUri, operation));
	expectedRequest.EnqueueResponse(HttpStatusCode.NotFound, "Dohicky not found", "I couldn't find your dohicky because I don't like you", true);
	TestableWebRequestCreateFactory.GetFactory().AddRequest(expectedRequest);
	var service = new SampleService(BaseUri);

	var response = service.ListRemoteStuff(operation);

	// expect exception
}</pre></div></div>

<h2>Testing Other WebExceptions</h2>
<p>What about connection failures? Well there is another version of the EnqueueResponse method that allows us to queue up an exception to be returned from the Request, like so:</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="text"><thead><tr><td colspan="2"  class="head">Text</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
</pre></td><td class="de1"><pre class="de1">expectedRequest.EnqueueResponse(new WebException(&quot;I'm broke!&quot;, WebExceptionStatus.ConnectFailure));</pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">expectedRequest.EnqueueResponse(new WebException("I'm broke!", WebExceptionStatus.ConnectFailure));</pre></div></div>

<p>Just like the previous test, we can use that response to put together a full test</p>
<p><b>TestableHttpWebResponse.Sample.Tests/SampleServiceTests.cs</b></p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="text"><thead><tr><td colspan="2"  class="head">Text</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
</pre></td><td class="de1"><pre class="de1">[Test]
[ExpectedException(typeof(SampleServiceOutageException))]
public void ListRemoteStuff_ServiceOutage_ThrowsSampleServiceOutage()
{
&nbsp; &nbsp; var operation = &quot;ListOfStuff&quot;;
&nbsp; &nbsp; var expectedRequest = new TestableWebRequest(new Uri(BaseUri, operation));
&nbsp; &nbsp; expectedRequest.EnqueueResponse(new WebException(&quot;I'm broke!&quot;, WebExceptionStatus.ConnectFailure));
&nbsp; &nbsp; TestableWebRequestCreateFactory.GetFactory().AddRequest(expectedRequest);
&nbsp; &nbsp; var service = new SampleService(BaseUri);
&nbsp;
&nbsp; &nbsp; var response = service.ListRemoteStuff(operation);
&nbsp;
&nbsp; &nbsp; // expect exception
}</pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">[Test]
[ExpectedException(typeof(SampleServiceOutageException))]
public void ListRemoteStuff_ServiceOutage_ThrowsSampleServiceOutage()
{
	var operation = "ListOfStuff";
	var expectedRequest = new TestableWebRequest(new Uri(BaseUri, operation));
	expectedRequest.EnqueueResponse(new WebException("I'm broke!", WebExceptionStatus.ConnectFailure));
	TestableWebRequestCreateFactory.GetFactory().AddRequest(expectedRequest);
	var service = new SampleService(BaseUri);

	var response = service.ListRemoteStuff(operation);

	// expect exception
}</pre></div></div>

<h2>Testing the Retry Policy</h2>
<p>Retry policies are trickier, in that they need to be able to execute a Request multiple times and receive new responses. By enqueueing (sp?) multiple responses on the request, we can exercise the retry policy:</p>
<p><b>TestableHttpWebResponse.Sample.Tests/SampleServiceTests.cs</b></p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="text"><thead><tr><td colspan="2"  class="head">Text</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
</pre></td><td class="de1"><pre class="de1">[Test]
public void ListRemoteStuff_TimeoutOccurs_TruesASecondTime()
{
&nbsp; &nbsp; var operation = &quot;ListOfStuff&quot;;
&nbsp; &nbsp; var expectedRequest = new TestableWebRequest(new Uri(BaseUri, operation));
&nbsp; &nbsp; expectedRequest.EnqueueResponse(new TimeoutException(&quot;took too long, so sorry&quot;))
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;.EnqueueResponse(HttpStatusCode.OK, &quot;All Good&quot;, &quot;Nothing to see, please move along&quot;, false);
&nbsp; &nbsp; TestableWebRequestCreateFactory.GetFactory().AddRequest(expectedRequest);
&nbsp; &nbsp; var service = new SampleService(BaseUri);
&nbsp;
&nbsp; &nbsp; var response = service.ListRemoteStuff(operation);
&nbsp;
&nbsp; &nbsp; Assert.AreEqual(&quot;Nothing to see, please move along&quot;, response.Message);
}</pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">[Test]
public void ListRemoteStuff_TimeoutOccurs_TruesASecondTime()
{
	var operation = "ListOfStuff";
	var expectedRequest = new TestableWebRequest(new Uri(BaseUri, operation));
	expectedRequest.EnqueueResponse(new TimeoutException("took too long, so sorry"))
				   .EnqueueResponse(HttpStatusCode.OK, "All Good", "Nothing to see, please move along", false);
	TestableWebRequestCreateFactory.GetFactory().AddRequest(expectedRequest);
	var service = new SampleService(BaseUri);

	var response = service.ListRemoteStuff(operation);

	Assert.AreEqual("Nothing to see, please move along", response.Message);
}</pre></div></div>

<p>And there we have it, all the various flavors of an HttpWebRequest.</p>
<h2>The Testable Classes</h2>
<p>The Testable classes are still under construction. At the time of this post they support the functionality above as well as the ability to set and verify Request Headers and write and verify the Request stream contents (upload). Currently the asynchronous methods (BeginGetResponse/EndGetResponse) are not implemented, but I&#8217;ll be adding those soon along with SampleService calls that exercise those via TPL and async/await logic. I&#8217;ll also be looking through WebRequest for other properties or methods I haven&#8217;t imlpemented yet to see what&#8217;s useful.</p>
<p>Hopefully others will find this useful as well.</p>
]]></content:encoded>
			<wfw:commentRss>/index.php/desktopdev/mstech/testing-httpwebresponse/feed/</wfw:commentRss>
		<slash:comments>2</slash:comments>
		</item>
		<item>
		<title>Continuous Delivery Project &#8211; Incorporating the Unit Tests</title>
		<link>/index.php/enterprisedev/unittest/continuous-delivery-project-incorporating-the/</link>
		<comments>/index.php/enterprisedev/unittest/continuous-delivery-project-incorporating-the/#comments</comments>
		<pubDate>Mon, 19 Dec 2011 13:44:00 +0000</pubDate>
		<dc:creator><![CDATA[Eli Weinstock-Herman (tarwn)]]></dc:creator>
				<category><![CDATA[Application Lifecycle Management]]></category>
		<category><![CDATA[Unit Testing]]></category>
		<category><![CDATA[asp.net mvc]]></category>
		<category><![CDATA[continuous delivery]]></category>
		<category><![CDATA[continuous integration]]></category>
		<category><![CDATA[jenkins]]></category>
		<category><![CDATA[ms test]]></category>
		<category><![CDATA[mvc music store]]></category>
		<category><![CDATA[unit testing]]></category>

		<guid isPermaLink="false">/index.php/2011/12/continuous-delivery-project-incorporating-the/</guid>
		<description><![CDATA[The purpose of the integration build is to bring potential issues to the surface as quickly as possible. Unit tests run quickly and adding them to the continuous integration build helps flush out defects as close to the beginning of the process as possible. Generally build engines will support unit test framework by directly integrating with them or by providing an ability to execute the test framework and import their results.]]></description>
				<content:encoded><![CDATA[<p>The purpose of the integration build is to bring potential issues to the surface as quickly as possible. Unit tests run quickly and adding them to the continuous integration build helps flush out defects as close to the beginning of the process as possible. Generally build engines will support unit test framework by directly integrating with them or by providing an ability to execute the test framework and import their results.</p>
<div style="text-align: center; font-size: .9em; color: #666666;">
	<img src="http://tiernok.com/LTDBlog/ContinuousDelivery/Overview_p3.png" title="Delivery Pipeline - Focus of Current Post" /><br />
	Delivery Pipeline &#8211; Focus of Current Post
</div>
<p>This is the fourth post in a multi-part series on my Continuous Delivery pipeline project. The <a href="/index.php/EnterpriseDev/UnitTest/continuous-delivery-project-making-mvcmusicstore" title="Making MVCMusic Store Testable">previous post</a> followed the changes necessary to add unit testing to the MVC Music Store project, a process that ended in the creation of unit tests for the Checkout process. In this post I will configure the CI build job to run the unit test suite, including extra steps necessary to get the MS Test framework runnable on the build server.</p>
<h2>Run the Build</h2>
<p>With the automated build already polling changes from the source code repository, this process actually started while I was still writing the initial unit tests for the prior post. With the little red &#8220;failed build&#8221; dot as my guide, and the ever present twitter bot reminding me on each broken commit, I ended up working on both the unit tests and the server configuration in overlapping steps.</p>
<div style="text-align: center; font-size: .9em; color: #666666;">
	<a href="http://tiernok.com/LTDBlog/ContinuousDelivery/unittest_firstfail.png" title="Larger picture" target="_blank"><img src="http://tiernok.com/LTDBlog/ContinuousDelivery/unittest_firstfail.png" title="Failing Unit Test Build" /></a><br />
	Failing Unit Test Build
</div>
<p>The initial build failure was due to the addition of the MS Test project to the solution. This test project includes necessary references for the MS Test libraries, but unfortunately those libraries are not included in the project or as part of the .Net framework installation. This causes the build to fail with missing reference errors.</p>
<p>There are several blogs and methods outlined to get MS Test running on a build server, including some registry hacks and other unsupported trickery. After spending some time exploring that route, I eventually gave up and installed Visual Studio on the test server. </p>
<p><i>This is an area that Microsoft could definitely use some improvement in (MS Test integration), but what&#8217;s interesting is that many experts on continuous delivery (of which I am definitely not one) actually suggest using the same software on the build server as the developers use to minimize differences in the builds. Whatever the case, the choice of MS Test generally ends with us having Visual Studio on our build server.</i></p>
<p>Once the install was completed and I had patched Visual Studio up to date, I was able to run successful builds again.</p>
<h2>Run the Tests in the Build</h2>
<p>At this point I am building the test project every time the build runs, but I&#8217;m not actually running any of the tests. In order to run the tests, I am going to drop to the command line and run the MS Test executable directly. To execute a command directly as a build step, I&#8217;ll add a &#8220;Windows Batch Command&#8221; step to the &#8220;Build&#8221; section of my CI Build job.</p>
<div style="text-align: center; font-size: .9em; color: #666666;">
	<a href="http://tiernok.com/LTDBlog/ContinuousDelivery/unittest_command.png" title="Larger picture" target="_blank"><img src="http://tiernok.com/LTDBlog/ContinuousDelivery/unittest_command.png" title="Jenkins Configuration - New Windows Batch Command" /></a><br />
	Jenkins Configuration &#8211; New Windows Batch Command
</div>
<p>The MS Test executable is located in the Visual Studio folder at <code class="codespan">C:Program Files (x86)Microsoft Visual Studio 10.0Common7IDEmstest.exe</code>. I&#8217;ll execute this against the compiled assembly from the MVCMusicStoreTests project and configure the results file to land somewhere obvious so i can import it later. </p>
<p>Jenkins provides a list of variables we can use in commands, in this case I&#8217;ll use the %WORKSPACE% variable to locate the assembly:<br />
<code class="codespan">"C:Program Files (x86)Microsoft Visual Studio 10.0Common7IDEmstest.exe" /resultsfile:"%WORKSPACE%MvcMusicStoreTestsbinReleaseMyTests.Results.xml" /testcontainer:"%WORKSPACE%MvcMusicStoreTestsbinReleaseMvcMusicStoreTests.dll" /nologo</code></p>
<p>At this point, I can run the build again but it doesn&#8217;t show anything different than before until I open the command log. Inside the command log I can see that the tests ran successfully as part of the build. I also can manually verify the results file was published to the location I specified above.</p>
<h2>Integrating the Test Run</h2>
<p>To integrate the MS Test results into Jenkins, I&#8217;ll use a plugin to map the MS Test format to a format that Jenkins natively understands (Junit XML results). A plugin is available from the &#8220;Manage Plugins&#8221; screen (Jenkins, Manage Jenkins, Manage Plugins, Click the Available Tab) to do this work for me. </p>
<p>After the plugin installs successfully, there is a new entry in the &#8220;Post-Build Actions&#8221; section of the job configuration. All I need to do is check the new &#8220;Publish MSTest test result report&#8221; checkbox and enter the path I used above for the result files. </p>
<div style="text-align: center; font-size: .9em; color: #666666;">
	<a href="http://tiernok.com/LTDBlog/ContinuousDelivery/unittest_results.png" title="Larger picture" target="_blank"><img src="http://tiernok.com/LTDBlog/ContinuousDelivery/unittest_results.png" title="Jenkins Configuration - New Windows Batch Command" /></a><br />
	Jenkins Configuration &#8211; New Windows Batch Command
</div>
<p>Now when I run the build again, a new section shows up on the run summary screen that indicates I don&#8217;t have any failing tests. Clicking that link for more details, I can see that Jenkins has parsed that results file from MS Test and provided information on all of the running tests and their execution times.</p>
<div style="text-align: center; font-size: .9em; color: #666666;">
	<a href="http://tiernok.com/LTDBlog/ContinuousDelivery/unittest_success.png" title="Larger picture" target="_blank"><img src="http://tiernok.com/LTDBlog/ContinuousDelivery/unittest_success.png" title="Jenkins Configuration - Successful Job w/ Unit Tests" /></a><br />
	Jenkins Configuration &#8211; Successful Job w/ Unit Tests
</div>
<p>In addition to the test information, there is also a new menu item on the left side named &#8220;History&#8221;. Clicking this will show historical information on the test runs, including a graph of the execution times and test counts. </p>
<div style="text-align: center; font-size: .9em; color: #666666;">
	<a href="http://tiernok.com/LTDBlog/ContinuousDelivery/unittest_history_lg.png" title="Larger picture" target="_blank"><img src="http://tiernok.com/LTDBlog/ContinuousDelivery/unittest_history.png" title="Jenkins Configuration - Unit Test History" /></a><br />
	Jenkins Configuration &#8211; Unit Test History
</div>
<p><i>Note: If, like me, you didn&#8217;t bother to define a server name in the Jenkins configuration panel, you will find that some of these links will not work from a remote server because they are defined with the full server name instead of relative links.</i></p>
<p>I am naturally paranoid when things work right away, so at this point I purposefully broke a unit test and reran the build to verify it would report it correctly.</p>
<div style="text-align: center; font-size: .9em; color: #666666;">
	<a href="http://tiernok.com/LTDBlog/ContinuousDelivery/unittest_failedrun_lg.png" title="Larger picture" target="_blank"><img src="http://tiernok.com/LTDBlog/ContinuousDelivery/unittest_failedrun.png" title="Jenkins Configuration - Failed Unit Test Run" /></a><br />
	Failed Unit Test Run
</div>
<p>And my twitter bot is, of course, more than happy to broadcast that failure far and wide.</p>
<div style="text-align: center; font-size: .9em; color: #666666;">
	<a href="https://twitter.com/#!/TarwnBuildSrvr" title="@TarwnBuildSrvr on Twitter" target="_blank"><img src="http://tiernok.com/LTDBlog/ContinuousDelivery/unittest_twitter.png" title="Jenkins Configuration - Failed Unit Test Run" /></a><br />
	Failed Unit Test Run
</div>
<h2>Next Steps</h2>
<p>With unit tests integrated into the build job, I am nearly done with the Continuous Integration stage of this pipeline. The last thing step will be to verify the packaged code can actually be deployed and to build in the ability to smoke test that deployed code.</p>
<style>
.thelist li{ color: #666666; }
.thelist .cur{ font-style: italic; color: black; }
</style>
<ul class="thelist">
<li><a href="http://wiki.lessthandot.com/index.php/Eli%27s_Continuous_Delivery_Project" title="Wiki post for Eli's Continuous Delivery Project">Wiki Post</a></li>
<li><a href="/index.php/EnterpriseDev/application-lifecycle-management/starting-a-continuous-delivery-project" title="Starting a Continuous Delivery Project">Starting a Continuous Delivery Project</a></li>
<li><a href="/index.php/EnterpriseDev/application-lifecycle-management/continuous-delivery-project-setting-up" title="Setting up the Continuous Integration stage">Setting up the Continuous Integration stage</a></li>
<li><a href="/index.php/EnterpriseDev/UnitTest/continuous-delivery-project-making-mvcmusicstore" title="Making ASP.Net MVC Music Store Testable">Making ASP.Net MVC Music Store Testable</a></li>
<li class="cur"><a href="/index.php/EnterpriseDev/UnitTest/continuous-delivery-project-incorporating-the" title="Incorporating Unit Tests in the CI stage">Incorporating Unit Tests in the CI stage</a></li>
<li><a href="/index.php/EnterpriseDev/application-lifecycle-management/continuous-delivery-project-deploy-and" title="Deploy and Smoke Test">Deploy and Smoke Test</a></li>
<li><a href="/index.php/EnterpriseDev/application-lifecycle-management/continuous-delivery-adding-an-automated" title="Adding an Automated Interface Testing stage">Adding an Automated Interface Testing stage</a></li>
<li><a href="/index.php/EnterpriseDev/application-lifecycle-management/continuous-delivery-dashboard-qa-and" title="Dashboard, QA and Production Deployment stage">Dashboard, QA and Production Deployment stage</a></li>
</ul>
]]></content:encoded>
			<wfw:commentRss>/index.php/enterprisedev/unittest/continuous-delivery-project-incorporating-the/feed/</wfw:commentRss>
		<slash:comments>1</slash:comments>
		</item>
		<item>
		<title>Continuous Delivery Project &#8211; Making MVCMusicStore Testable</title>
		<link>/index.php/enterprisedev/unittest/continuous-delivery-project-making-mvcmusicstore/</link>
		<comments>/index.php/enterprisedev/unittest/continuous-delivery-project-making-mvcmusicstore/#respond</comments>
		<pubDate>Fri, 16 Dec 2011 11:28:00 +0000</pubDate>
		<dc:creator><![CDATA[Eli Weinstock-Herman (tarwn)]]></dc:creator>
				<category><![CDATA[Application Lifecycle Management]]></category>
		<category><![CDATA[Unit Testing]]></category>
		<category><![CDATA[asp.net mvc]]></category>
		<category><![CDATA[continuous delivery]]></category>
		<category><![CDATA[ms test]]></category>
		<category><![CDATA[mvc music store]]></category>
		<category><![CDATA[mvccontrib]]></category>
		<category><![CDATA[rhinomocks]]></category>
		<category><![CDATA[unit testing]]></category>

		<guid isPermaLink="false">/index.php/2011/12/continuous-delivery-project-making-mvcmusicstore/</guid>
		<description><![CDATA[It can be challenging to add unit testing to a project that was built without planning to incorporate it. The ASP.Net MVC Music Store tutorial was not built with unit testing in mind, but today we're going to walk through the addition of Controller unit tests, focusing on a controller that directly references Entity Framework objects and implicitly interacts with ASP.Net Membership objects and Request data from the current HttpContext.]]></description>
				<content:encoded><![CDATA[<p>It can be challenging to add unit testing to a project that was built without planning to incorporate it. The ASP.Net MVC Music Store tutorial was not built with unit testing in mind, but today we&#8217;re going to walk through the addition of Controller unit tests, focusing on a controller that directly references Entity Framework objects and implicitly interacts with ASP.Net Membership objects and Request data from the current HttpContext.</p>
<div style="text-align: center; font-size: .9em; color: #666666;">
	<img src="http://tiernok.com/LTDBlog/ContinuousDelivery/Overview_p2.png" title="Delivery Pipeline - Focus of Current Post" /><br />
	Delivery Pipeline &#8211; Focus of Current Post
</div>
<p>This is the third post in a multi-part series on my Continuous Delivery pipeline project. The <a href="/index.php/EnterpriseDev/application-lifecycle-management/continuous-delivery-project-setting-up" title="Starting the Continuous Delivery project">previous post</a> followed the setup of the Continuous Integration engine and the CI build job. This post follows the addition of Unit Tests to the ASP.Net MVC Music Store application so those tests can be incorporated in the CI build job (in the next post).</p>
<h2>Adding the Unit Tests</h2>
<p>I chose to use MS Test for the Unit Test project due to it&#8217;s integration into Visual Studio. Later I&#8217;ll use Nunit for the automated interface testing where that integration is not as useful. This will also let us see both integrated into the build engine as we add those portions in.</p>
<p>The first step to adding Unit Testing to an existing project is picking a place to start. I selected the CheckoutController, as it is one of the more complex controllers in the project and will provide the best set of examples. Besides the implicit access of HttpContext data and instantiating the MusicStoreEntities DbContext directly, the Checkout Controller interacts with a cart model object that also interacts with HttpContext and it own instance of the DbContext.</p>
<p><i>Note: There is a <a href="http://msdn.microsoft.com/en-us/gg618510" title="ASP.NET MVC 3 Testing">MSDN Hands On Lab</a> to add &#8220;Unit Tests&#8221; to the MVCMusicStore site. The methods outlined in that post are lower impact to the production code (little or no changes required), but is actually Integration Testing, since the tests are executing across more than one unit of code and across application boundaries to a database. Integration Tests are useful, but typically more costly to maintain, provide less specific information, take longer to run, and are more fragile than unit tests. This is not to say that they aren&#8217;t useful, just that they are different.</i></p>
<p>The code for this project is available in a <a href="https://bitbucket.org/tarwn/mvcmusicstore.main/changesets" title="Changesets for the source code">BitBucket repository</a>, but the order I follow here will be somewhat different than the actual order of the changesets, as the changes for this post overlapped some with the content of the next post.</p>
<h2>Testable Entity Framework</h2>
<p>Before writing the first test, I need to drive a wedge between the Entity Framework DbContext and the Controllers so I can give the controller a data context that doesn&#8217;t really talk to a database. Currently the CheckoutController creates an instance of the MusicStoreEntities object when it is instantiated, and that instantiated MusicStoreEntities object gets it&#8217;s connection information from the web.config:</p>
<p><b>MVCMusicStore/Controllers/CheckoutController.cs</b></p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="csharp"><thead><tr><td colspan="2"  class="head">C#</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
</pre></td><td class="de1"><pre class="de1"><span class="kw1">namespace</span> MvcMusicStore<span class="sy0">.</span><span class="me1">Controllers</span> <span class="br0">&#123;</span>
&nbsp;
&nbsp; &nbsp; <span class="br0">&#91;</span>Authorize<span class="br0">&#93;</span>
&nbsp; &nbsp; <span class="kw1">public</span> <span class="kw4">class</span> CheckoutController <span class="sy0">:</span> Controller <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; MusicStoreEntities storeDB <span class="sy0">=</span> <span class="kw3">new</span> MusicStoreEntities<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">const</span> <span class="kw4">string</span> PromoCode <span class="sy0">=</span> <span class="st0">&quot;FREE&quot;</span><span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; <span class="co1">//</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="co1">// GET: /Checkout/AddressAndPayment</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">public</span> ActionResult AddressAndPayment<span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">return</span> View<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span>
<span class="sy0">...</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">namespace MvcMusicStore.Controllers {

	[Authorize]
	public class CheckoutController : Controller {
		MusicStoreEntities storeDB = new MusicStoreEntities();
		const string PromoCode = "FREE";

		//
		// GET: /Checkout/AddressAndPayment
		public ActionResult AddressAndPayment() {
			return View();
		}
...</pre></div></div>

<p>Replacing this concrete object with an interface will allow the production version of the site to continue working with a live database context while providing the ability to use a fake version for testing. </p>
<p>To create the replacement, I&#8217;ll start replacing the concrete context with the name of an interface, then use the errors from the compiler to help define the minimum set of interface members required to satisfy the production code.</p>
<p><b>MVCMusicStore/Controllers/CheckoutController.cs</b></p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="csharp"><thead><tr><td colspan="2"  class="head">C#</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
</pre></td><td class="de1"><pre class="de1"><span class="kw1">namespace</span> MvcMusicStore<span class="sy0">.</span><span class="me1">Controllers</span> <span class="br0">&#123;</span>
&nbsp;
&nbsp; &nbsp; <span class="br0">&#91;</span>Authorize<span class="br0">&#93;</span>
&nbsp; &nbsp; <span class="kw1">public</span> <span class="kw4">class</span> CheckoutController <span class="sy0">:</span> Controller <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; IMusicStoreEntities storeDB<span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">const</span> <span class="kw4">string</span> PromoCode <span class="sy0">=</span> <span class="st0">&quot;FREE&quot;</span><span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">public</span> CheckoutController<span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="sy0">:</span> <span class="kw1">this</span><span class="br0">&#40;</span><span class="kw3">new</span> MusicStoreEntities<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span> <span class="br0">&#125;</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">public</span> CheckoutController<span class="br0">&#40;</span>IMusicStoreEntities storeDb<span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">this</span><span class="sy0">.</span><span class="me1">storeDB</span> <span class="sy0">=</span> storeDb<span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span>
<span class="sy0">...</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">namespace MvcMusicStore.Controllers {

	[Authorize]
	public class CheckoutController : Controller {
		IMusicStoreEntities storeDB;
		const string PromoCode = "FREE";

		public CheckoutController() : this(new MusicStoreEntities()) { }

		public CheckoutController(IMusicStoreEntities storeDb) {
			this.storeDB = storeDb;
		}
...</pre></div></div>

<p><i>Why define the interface first and debug forward? Why not build a copy of the DbContext first? Starting with a minimal interface like this will help me keep the interface to the minimum necessary functionality. Had I started with the DbContext I could easily start defining methods that seem like they will be useful at some point, but don&#8217;t reflect what I will actually need or may never be used. Extra code is extra maintenance and finding out sooner that something doesn&#8217;t work (or is unnecessary) leads to less wasted effort.</i></p>
<p>The first error is the attempted assignment of the new MusicStoreEntities to the IMusicStoreEntities constructor. That one is easy enough to resolve:</p>
<p><b>MVCMusicStore/Models/MusicStoreEntities.cs</b></p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="csharp"><thead><tr><td colspan="2"  class="head">C#</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
</pre></td><td class="de1"><pre class="de1"><span class="kw1">namespace</span> MvcMusicStore<span class="sy0">.</span><span class="me1">Models</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; <span class="kw1">public</span> <span class="kw4">class</span> MusicStoreEntities <span class="sy0">:</span> DbContext, IMusicStoreEntities <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="co1">// ...</span>
&nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp;
&nbsp; &nbsp; <span class="kw1">public</span> <span class="kw4">interface</span> IMusicStoreEntities <span class="br0">&#123;</span> <span class="br0">&#125;</span>
<span class="br0">&#125;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">namespace MvcMusicStore.Models {
	public class MusicStoreEntities : DbContext, IMusicStoreEntities {
		// ...
	}

	public interface IMusicStoreEntities { }
}</pre></div></div>

<p>I&#8217;ve added the interface declaration and the implements statement to MusicStoreEntities. Next I&#8217;ll define the collections and make sure the interface implements IDisposable:</p>
<p><b>MVCMusicStore/Models/MusicStoreEntities.cs</b></p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="csharp"><thead><tr><td colspan="2"  class="head">C#</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
</pre></td><td class="de1"><pre class="de1"><span class="kw1">namespace</span> MvcMusicStore<span class="sy0">.</span><span class="me1">Models</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; <span class="kw1">public</span> <span class="kw4">class</span> MusicStoreEntities <span class="sy0">:</span> DbContext, IMusicStoreEntities <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">public</span> IDbSet<span class="sy0">&lt;</span>Album<span class="sy0">&gt;</span> Albums <span class="br0">&#123;</span> <span class="kw1">get</span><span class="sy0">;</span> <span class="kw1">set</span><span class="sy0">;</span> <span class="br0">&#125;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">public</span> IDbSet<span class="sy0">&lt;</span>Genre<span class="sy0">&gt;</span> Genres <span class="br0">&#123;</span> <span class="kw1">get</span><span class="sy0">;</span> <span class="kw1">set</span><span class="sy0">;</span> <span class="br0">&#125;</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">public</span> IDbSet<span class="sy0">&lt;</span>Artist<span class="sy0">&gt;</span> Artists <span class="br0">&#123;</span> <span class="kw1">get</span><span class="sy0">;</span> <span class="kw1">set</span><span class="sy0">;</span> <span class="br0">&#125;</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">public</span> IDbSet<span class="sy0">&lt;</span>Cart<span class="sy0">&gt;</span> Carts <span class="br0">&#123;</span> <span class="kw1">get</span><span class="sy0">;</span> <span class="kw1">set</span><span class="sy0">;</span> <span class="br0">&#125;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">public</span> IDbSet<span class="sy0">&lt;</span>Order<span class="sy0">&gt;</span> Orders <span class="br0">&#123;</span> <span class="kw1">get</span><span class="sy0">;</span> <span class="kw1">set</span><span class="sy0">;</span> <span class="br0">&#125;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">public</span> IDbSet<span class="sy0">&lt;</span>OrderDetail<span class="sy0">&gt;</span> OrderDetails <span class="br0">&#123;</span> <span class="kw1">get</span><span class="sy0">;</span> <span class="kw1">set</span><span class="sy0">;</span> <span class="br0">&#125;</span>
&nbsp;
&nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp;
&nbsp; &nbsp; <span class="kw1">public</span> <span class="kw4">interface</span> IMusicStoreEntities <span class="sy0">:</span> IDisposable <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; IDbSet<span class="sy0">&lt;</span>Album<span class="sy0">&gt;</span> Albums <span class="br0">&#123;</span> <span class="kw1">get</span><span class="sy0">;</span> <span class="kw1">set</span><span class="sy0">;</span> <span class="br0">&#125;</span>
&nbsp; &nbsp; &nbsp; &nbsp; IDbSet<span class="sy0">&lt;</span>Genre<span class="sy0">&gt;</span> Genres <span class="br0">&#123;</span> <span class="kw1">get</span><span class="sy0">;</span> <span class="kw1">set</span><span class="sy0">;</span> <span class="br0">&#125;</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; IDbSet<span class="sy0">&lt;</span>Artist<span class="sy0">&gt;</span> Artists <span class="br0">&#123;</span> <span class="kw1">get</span><span class="sy0">;</span> <span class="kw1">set</span><span class="sy0">;</span> <span class="br0">&#125;</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; IDbSet<span class="sy0">&lt;</span>Cart<span class="sy0">&gt;</span> Carts <span class="br0">&#123;</span> <span class="kw1">get</span><span class="sy0">;</span> <span class="kw1">set</span><span class="sy0">;</span> <span class="br0">&#125;</span>
&nbsp; &nbsp; &nbsp; &nbsp; IDbSet<span class="sy0">&lt;</span>Order<span class="sy0">&gt;</span> Orders <span class="br0">&#123;</span> <span class="kw1">get</span><span class="sy0">;</span> <span class="kw1">set</span><span class="sy0">;</span> <span class="br0">&#125;</span>
&nbsp; &nbsp; &nbsp; &nbsp; IDbSet<span class="sy0">&lt;</span>OrderDetail<span class="sy0">&gt;</span> OrderDetails <span class="br0">&#123;</span> <span class="kw1">get</span><span class="sy0">;</span> <span class="kw1">set</span><span class="sy0">;</span> <span class="br0">&#125;</span>
&nbsp; &nbsp; <span class="br0">&#125;</span>
<span class="br0">&#125;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">namespace MvcMusicStore.Models {
	public class MusicStoreEntities : DbContext, IMusicStoreEntities {
		public IDbSet&lt;Album&gt; Albums { get; set; }
		public IDbSet&lt;Genre&gt; Genres { get; set; }

		public IDbSet&lt;Artist&gt; Artists { get; set; }

		public IDbSet&lt;Cart&gt; Carts { get; set; }
		public IDbSet&lt;Order&gt; Orders { get; set; }
		public IDbSet&lt;OrderDetail&gt; OrderDetails { get; set; }

	}

	public interface IMusicStoreEntities : IDisposable {
		IDbSet&lt;Album&gt; Albums { get; set; }
		IDbSet&lt;Genre&gt; Genres { get; set; }

		IDbSet&lt;Artist&gt; Artists { get; set; }

		IDbSet&lt;Cart&gt; Carts { get; set; }
		IDbSet&lt;Order&gt; Orders { get; set; }
		IDbSet&lt;OrderDetail&gt; OrderDetails { get; set; }
	}
}</pre></div></div>

<p>At this point I have a couple errors to clean up. In one case the compiler is upset with using Include() off of an IDbSet instance, this is easily solved by adding <code class="codespan">using System.Data.Entity;</code> to the file so the extension will be available. The second error points out a missing SaveChanges call on my interface which I can easily add:</p>
<p><b>MVCMusicStore/Models/MusicStoreEntities.cs</b></p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="csharp"><thead><tr><td colspan="2"  class="head">C#</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
</pre></td><td class="de1"><pre class="de1"><span class="kw1">namespace</span> MvcMusicStore<span class="sy0">.</span><span class="me1">Models</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; <span class="kw1">public</span> <span class="kw4">class</span> MusicStoreEntities <span class="sy0">:</span> DbContext, IMusicStoreEntities <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="co1">// ...</span>
&nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp;
&nbsp; &nbsp; <span class="kw1">public</span> <span class="kw4">interface</span> IMusicStoreEntities <span class="sy0">:</span> IDisposable <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="co1">// ...</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw4">int</span> SaveChanges<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; <span class="br0">&#125;</span>
<span class="br0">&#125;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">namespace MvcMusicStore.Models {
	public class MusicStoreEntities : DbContext, IMusicStoreEntities {
		// ...
	}

	public interface IMusicStoreEntities : IDisposable {
		// ...

		int SaveChanges();
	}
}</pre></div></div>

<p>With those last couple changes completed, the build is happy and I have a minimal interface. </p>
<p>Next I want to replace the behavior in the controllers of creating their own local DbContext instance with using one that is provided to them. I started this by defining the two constructors above for my CheckoutController, but rather than copy and paste this new behavior to all of the controllers, I&#8217;ll move the responsibility to a ControllerBase class:</p>
<p><b>MVCMusicStore/Controllers/ControllerBase.cs</b> (New File)</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="csharp"><thead><tr><td colspan="2"  class="head">C#</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
</pre></td><td class="de1"><pre class="de1"><span class="kw1">namespace</span> MvcMusicStore<span class="sy0">.</span><span class="me1">Controllers</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; <span class="kw1">public</span> <span class="kw4">class</span> ControllerBase <span class="sy0">:</span>Controller <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">private</span> IMusicStoreEntities _storeDB<span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">protected</span> IMusicStoreEntities StoreDB <span class="br0">&#123;</span> <span class="kw1">get</span> <span class="br0">&#123;</span> <span class="kw1">return</span> _storeDB<span class="sy0">;</span> <span class="br0">&#125;</span> <span class="br0">&#125;</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">public</span> ControllerBase<span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="sy0">:</span> <span class="kw1">this</span><span class="br0">&#40;</span><span class="kw3">new</span> MusicStoreEntities<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span> <span class="br0">&#125;</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">public</span> ControllerBase<span class="br0">&#40;</span>IMusicStoreEntities storeDb<span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; _storeDB <span class="sy0">=</span> storeDb<span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp; &nbsp; <span class="br0">&#125;</span>
<span class="br0">&#125;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">namespace MvcMusicStore.Controllers {
	public class ControllerBase :Controller {
		private IMusicStoreEntities _storeDB;

		protected IMusicStoreEntities StoreDB { get { return _storeDB; } }

		public ControllerBase() : this(new MusicStoreEntities()) { }

		public ControllerBase(IMusicStoreEntities storeDb) {
			_storeDB = storeDb;
		}
	}
}</pre></div></div>

<p><b>MVCMusicStore/Controllers/CheckoutController.cs</b> (New File)</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="csharp"><thead><tr><td colspan="2"  class="head">C#</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
</pre></td><td class="de1"><pre class="de1"><span class="kw1">namespace</span> MvcMusicStore<span class="sy0">.</span><span class="me1">Controllers</span> <span class="br0">&#123;</span>
&nbsp;
&nbsp; &nbsp; <span class="br0">&#91;</span>Authorize<span class="br0">&#93;</span>
&nbsp; &nbsp; <span class="kw1">public</span> <span class="kw4">class</span> CheckoutController <span class="sy0">:</span> ControllerBase <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">const</span> <span class="kw4">string</span> PromoCode <span class="sy0">=</span> <span class="st0">&quot;FREE&quot;</span><span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">public</span> CheckoutController<span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span> <span class="br0">&#125;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">public</span> CheckoutController<span class="br0">&#40;</span>IMusicStoreEntities storeDb<span class="br0">&#41;</span> <span class="sy0">:</span> <span class="kw1">base</span><span class="br0">&#40;</span>storeDb<span class="br0">&#41;</span> <span class="br0">&#123;</span> <span class="br0">&#125;</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; <span class="co1">// ...</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; <span class="co1">//</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="co1">// POST: /Checkout/AddressAndPayment</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#91;</span>HttpPost<span class="br0">&#93;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">public</span> ActionResult AddressAndPayment<span class="br0">&#40;</span>FormCollection values<span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="co1">// ...</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="co1">//Save Order</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; StoreDB<span class="sy0">.</span><span class="me1">Orders</span><span class="sy0">.</span><span class="kw1">Add</span><span class="br0">&#40;</span>order<span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; StoreDB<span class="sy0">.</span><span class="me1">SaveChanges</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="co1">// ...</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; <span class="co1">// ...</span>
&nbsp; &nbsp; <span class="br0">&#125;</span>
<span class="br0">&#125;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">namespace MvcMusicStore.Controllers {

	[Authorize]
	public class CheckoutController : ControllerBase {
		const string PromoCode = "FREE";

		public CheckoutController() { }
		public CheckoutController(IMusicStoreEntities storeDb) : base(storeDb) { }

		// ...

		//
		// POST: /Checkout/AddressAndPayment
		[HttpPost]
		public ActionResult AddressAndPayment(FormCollection values) {
			// ...
				//Save Order
				StoreDB.Orders.Add(order);
				StoreDB.SaveChanges();
			// ...
		}

		// ...
	}
}</pre></div></div>

<p>After replacing the private variable and constructors from the CheckoutController with inheritance from the ControllerBase, the three places referencing the old variable are showing as errors and I&#8217;ll simply update them to the public property in the ControllerBase. </p>
<p>The last place I need to change is the ShoppingCart object. Despite being a model object, the ShoppingCart object instantiates it&#8217;s own local instance of the MusicStoreEntities context. The first time I converted the project, I missed this case and had some odd unit test results until I realized the cart was still accessing a real database.</p>
<p><i>In larger projects it can be common to have components separately instantiated in random nooks and crannies, not only making it tricky to convert for unit testing but also making the production code more fragile and harder to change and troubleshoot. After replacing the local ones, it&#8217;s a good idea to execute some searches through the codebase to find other references to the concrete classes.</i></p>
<p>Just like the Controllers, I&#8217;ll update the ShoppingCart object to use the interface and use <a href="http://en.wikipedia.org/wiki/Dependency_injection" title="Dependancy Injection at Wikipedia">Dependancy Injection</a> to pass in the context I expect it to use. Besides updating the constructor to require an IMusicStoreEntities context, I&#8217;ll also need to update the static methods that return instances of the cart:</p>
<p><b>MVCMusicStore/Models/ShoppingCart.cs</b> (New File)</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="csharp"><thead><tr><td colspan="2"  class="head">C#</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
</pre></td><td class="de1"><pre class="de1"><span class="kw1">namespace</span> MvcMusicStore<span class="sy0">.</span><span class="me1">Models</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; <span class="kw1">public</span> <span class="kw1">partial</span> <span class="kw4">class</span> ShoppingCart <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; IMusicStoreEntities storeDB<span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; <span class="co1">// ...</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">public</span> ShoppingCart<span class="br0">&#40;</span>IMusicStoreEntities dbContext<span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">this</span><span class="sy0">.</span><span class="me1">storeDB</span> <span class="sy0">=</span> dbContext<span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp; &nbsp; &nbsp; &nbsp; 
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">public</span> <span class="kw1">static</span> ShoppingCart GetCart<span class="br0">&#40;</span>HttpContextBase context, IMusicStoreEntities dbContext<span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">var</span> cart <span class="sy0">=</span> <span class="kw3">new</span> ShoppingCart<span class="br0">&#40;</span>dbContext<span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; cart<span class="sy0">.</span><span class="me1">ShoppingCartId</span> <span class="sy0">=</span> cart<span class="sy0">.</span><span class="me1">GetCartId</span><span class="br0">&#40;</span>context<span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">return</span> cart<span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; <span class="co1">// Helper method to simplify shopping cart calls</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">public</span> <span class="kw1">static</span> ShoppingCart GetCart<span class="br0">&#40;</span>Controller controller, IMusicStoreEntities dbContext<span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">return</span> GetCart<span class="br0">&#40;</span>controller<span class="sy0">.</span><span class="me1">HttpContext</span>, dbContext<span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; <span class="co1">// ...</span>
&nbsp; &nbsp; <span class="br0">&#125;</span>
<span class="br0">&#125;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">namespace MvcMusicStore.Models {
	public partial class ShoppingCart {
		IMusicStoreEntities storeDB;

		// ...

		public ShoppingCart(IMusicStoreEntities dbContext) {
			this.storeDB = dbContext;
		}
		
		public static ShoppingCart GetCart(HttpContextBase context, IMusicStoreEntities dbContext) {
			var cart = new ShoppingCart(dbContext);
			cart.ShoppingCartId = cart.GetCartId(context);
			return cart;
		}

		// Helper method to simplify shopping cart calls
		public static ShoppingCart GetCart(Controller controller, IMusicStoreEntities dbContext) {
			return GetCart(controller.HttpContext, dbContext);
		}

		// ...
	}
}</pre></div></div>

<p>With these changes added, the next build errors direct me to the places that need to pass the extra argument. For the CheckoutController, I&#8217;ll use the public property exposed by the Controllerbase. For the AccountController I need to instantiate a MusicStoreEntities object to pass (or convert it to use ControllerBase), and for the others I can plug in their local storeDb variable.</p>
<p><i>Note: In my <a href="https://bitbucket.org/tarwn/mvcmusicstore.main/changeset/82d254cd9f1d" title="First Changeset for Unit Test Changes">implementation</a>, I went ahead and converted all of my controllers over to the new ControllerBase. The downside of this method is that the more you convert, the more you have to test. Since I don&#8217;t have unit tests in place, this means a full manual regression test. On a larger project I would limit my changes only to the pieces I was planning on adding unit tests to and had time to manually regression test, but I would build my objects (like the ControllerBase) in such a way that the next conversions could take advantage and extend them when it&#8217;s their turn.</i></p>
<h2>Adding a Test Project</h2>
<p>After manually regression testing my changes to ensure they work, I&#8217;ll add the test project and create the first test class.</p>
<p>To get started, I&#8217;ll create the test project and use the package manager to get the RhinoMocks package. This will allow me to mock some of the resources the controller requires. With the project and resuorces ready, I can create the first CheckoutController test.</p>
<p><b>MvcMusicStoreTests/Controllers/CheckoutController.cs</b></p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="csharp"><thead><tr><td colspan="2"  class="head">C#</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
</pre></td><td class="de1"><pre class="de1"><span class="kw1">namespace</span> MvcMusicStoreTests<span class="sy0">.</span><span class="me1">Controllers</span> <span class="br0">&#123;</span>
&nbsp;
&nbsp; &nbsp; <span class="br0">&#91;</span>TestClass<span class="br0">&#93;</span>
&nbsp; &nbsp; <span class="kw1">public</span> <span class="kw4">class</span> CheckoutControllerTests <span class="br0">&#123;</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#91;</span>TestMethod<span class="br0">&#93;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">public</span> <span class="kw4">void</span> AddressAndPayment_ReturnsView<span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; CheckoutController controller <span class="sy0">=</span> <span class="kw3">new</span> CheckoutController<span class="br0">&#40;</span>MusicStoreEntitiesFactory<span class="sy0">.</span><span class="me1">GetEmpty</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ActionResult result <span class="sy0">=</span> controller<span class="sy0">.</span><span class="me1">AddressAndPayment</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Assert<span class="sy0">.</span><span class="me1">IsNotNull</span><span class="br0">&#40;</span>result<span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp; &nbsp; <span class="br0">&#125;</span>
<span class="br0">&#125;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">namespace MvcMusicStoreTests.Controllers {

	[TestClass]
	public class CheckoutControllerTests {

		[TestMethod]
		public void AddressAndPayment_ReturnsView() {
			CheckoutController controller = new CheckoutController(MusicStoreEntitiesFactory.GetEmpty());

			ActionResult result = controller.AddressAndPayment();

			Assert.IsNotNull(result);
		}
	}
}</pre></div></div>

<p>This test is using the Arrange, Act, Assert (AAA) unit testing pattern and is a basic test that asserts that the CheckoutController returns a result when we call AddressAndPayment. In the first step I call a Factory class to populate the data context of our CheckoutController. I have also started abstracting out obvious resources that will need to be fleshed out later, but haven&#8217;t started to define what those behaviors will be (I&#8217;ll let future tests decide that for me).</p>
<p><i>You may also notice that the folder structure for my test matches the structure for the class that is under tests, this makes it easier to keep the project organized and to find matching files across the projects.</i></p>
<p><b>MvcMusicStoreTests/MusicStoreEntitiesFactory.cs</b></p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="csharp"><thead><tr><td colspan="2"  class="head">C#</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
</pre></td><td class="de1"><pre class="de1"><span class="kw1">namespace</span> MvcMusicStoreTests <span class="br0">&#123;</span>
&nbsp; &nbsp; <span class="kw4">class</span> MusicStoreEntitiesFactory <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">public</span> <span class="kw1">static</span> IMusicStoreEntities GetEmpty<span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">return</span> MockRepository<span class="sy0">.</span><span class="me1">GenerateMock</span><span class="sy0">&lt;</span>IMusicStoreEntities<span class="sy0">&gt;</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp; &nbsp; <span class="br0">&#125;</span>
<span class="br0">&#125;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">namespace MvcMusicStoreTests {
	class MusicStoreEntitiesFactory {
		public static IMusicStoreEntities GetEmpty() {
			return MockRepository.GenerateMock&lt;IMusicStoreEntities&gt;();
		}
	}
}</pre></div></div>

<p>I don&#8217;t actually need any data yet, so I can use RhinoMock&#8217;s MockRepository to automaitcally create a stub implementation of the IMusicStoreEntities interface the controller requires.</p>
<h2>Fake Db and Http Contexts</h2>
<p>Now that I have a basic unit test working, I can start moving into more complex (and useful) tests. This is where things start to get challenging. The data context is already abstracted from the controllers, but the framework also depends heavily on the web server context, including bits like querystring and form post variables from the client browser, session and cookie state containers, and additional context for Membership information.</p>
<p>While it is possible to start mocking or stubbing our way through this whole list, it can be pretty painful and isn&#8217;t really necessary. This particular problem has already been solved before, so I&#8217;ll import the MVC3 TestHelper package (<a href="http://nuget.org/List/Packages/MvcContrib.Mvc3.TestHelper-ci" title="Install the MvcContrib.Mvc3.TestHelper-ci package from Nuget">Install-Package MvcContrib.Mvc3.TestHelper-ci</a>) to do the work for me.</p>
<h3>Initial Data-Free Tests</h3>
<p>I&#8217;m going to continue to ease into making this controller testable by choosing an action that has minimal data store interactions. This will allow me to focus on getting the HttpContext work out of the way first, instead of trying to do both at the same time.</p>
<p>Rather than trying to guess ahead as to what pieces of the package I&#8217;ll need, I&#8217;m going to create an instance of the test and build out just the logic I need to make it pass (Test Driven Test Development?). Here is that test:</p>
<p><b>MvcMusicStoreTests/Controllers/CheckoutController.cs</b></p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="csharp"><thead><tr><td colspan="2"  class="head">C#</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
</pre></td><td class="de1"><pre class="de1"><span class="kw1">namespace</span> MvcMusicStoreTests<span class="sy0">.</span><span class="me1">Controllers</span> <span class="br0">&#123;</span>
&nbsp;
&nbsp; &nbsp; <span class="br0">&#91;</span>TestClass<span class="br0">&#93;</span>
&nbsp; &nbsp; <span class="kw1">public</span> <span class="kw4">class</span> CheckoutControllerTests <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="co1">// ...</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#91;</span>TestMethod<span class="br0">&#93;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">public</span> <span class="kw4">void</span> AddressAndPayment_PostInvalidOrderNoPromotion_ReturnsOrderWithErrors<span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; CheckoutController controller <span class="sy0">=</span> GetWiredUpController<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; FormCollection orderCollection <span class="sy0">=</span> <span class="kw3">new</span> FormCollection<span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#123;</span><span class="st0">&quot;FirstName&quot;</span>,<span class="st0">&quot;fn&quot;</span><span class="br0">&#125;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; controller<span class="sy0">.</span><span class="me1">ValueProvider</span> <span class="sy0">=</span> orderCollection<span class="sy0">.</span><span class="me1">ToValueProvider</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ViewResult result <span class="sy0">=</span> controller<span class="sy0">.</span><span class="me1">AddressAndPayment</span><span class="br0">&#40;</span>orderCollection<span class="br0">&#41;</span> <span class="kw1">as</span> ViewResult<span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Assert<span class="sy0">.</span><span class="me1">IsInstanceOfType</span><span class="br0">&#40;</span>result<span class="sy0">.</span><span class="me1">ViewData</span><span class="sy0">.</span><span class="me1">Model</span>, <span class="kw3">typeof</span><span class="br0">&#40;</span>Order<span class="br0">&#41;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Assert<span class="sy0">.</span><span class="me1">AreNotEqual</span><span class="br0">&#40;</span><span class="nu0">0</span>, result<span class="sy0">.</span><span class="me1">ViewData</span><span class="sy0">.</span><span class="me1">ModelState</span><span class="sy0">.</span><span class="me1">Count</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp; &nbsp; <span class="br0">&#125;</span>
<span class="br0">&#125;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">namespace MvcMusicStoreTests.Controllers {

	[TestClass]
	public class CheckoutControllerTests {
		// ...

		[TestMethod]
		public void AddressAndPayment_PostInvalidOrderNoPromotion_ReturnsOrderWithErrors() {
			CheckoutController controller = GetWiredUpController();
			FormCollection orderCollection = new FormCollection() {
				{"FirstName","fn"}
			};
			controller.ValueProvider = orderCollection.ToValueProvider();

			ViewResult result = controller.AddressAndPayment(orderCollection) as ViewResult;

			Assert.IsInstanceOfType(result.ViewData.Model, typeof(Order));
			Assert.AreNotEqual(0, result.ViewData.ModelState.Count);
		}
	}
}</pre></div></div>

<p>I&#8217;m relegating the logic of creating the controller to a local function called <code class="codespan">GetWiredUpController()</code>, trusting it to return a functioning controller. I then create a FormCollection of values and assign it to the controller as if they had been sent from a client browser. The rest of the code is the Act and Assert steps of the test to call the controller and verify the result.</p>
<p>On the first run, the <code class="codespan">GetWiredUpController()</code> method isn&#8217;t giving me everything I need, but I can work through that iteratively until I have all the pieces I need. This took several iterations, so I&#8217;ll skip ahead to the end results. </p>
<p><b>MvcMusicStoreTests/Controllers/CheckoutController.cs</b></p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="csharp"><thead><tr><td colspan="2"  class="head">C#</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
</pre></td><td class="de1"><pre class="de1"><span class="kw1">namespace</span> MvcMusicStoreTests<span class="sy0">.</span><span class="me1">Controllers</span> <span class="br0">&#123;</span>
&nbsp;
&nbsp; &nbsp; <span class="br0">&#91;</span>TestClass<span class="br0">&#93;</span>
&nbsp; &nbsp; <span class="kw1">public</span> <span class="kw4">class</span> CheckoutControllerTests <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="co1">// ...</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">private</span> CheckoutController GetWiredUpController<span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; CheckoutController controller <span class="sy0">=</span> <span class="kw3">new</span> CheckoutController<span class="br0">&#40;</span>MusicStoreEntitiesFactory<span class="sy0">.</span><span class="me1">GetEmpty</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; TestControllerBuilder _builder <span class="sy0">=</span> <span class="kw3">new</span> TestControllerBuilder<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; _builder<span class="sy0">.</span><span class="me1">HttpContext</span><span class="sy0">.</span><span class="me1">User</span> <span class="sy0">=</span> <span class="kw3">new</span> FakeUser<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; _builder<span class="sy0">.</span><span class="me1">InitializeController</span><span class="br0">&#40;</span>controller<span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">return</span> controller<span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp; &nbsp; <span class="br0">&#125;</span>
<span class="br0">&#125;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">namespace MvcMusicStoreTests.Controllers {

	[TestClass]
	public class CheckoutControllerTests {
		// ...

		private CheckoutController GetWiredUpController() {
			CheckoutController controller = new CheckoutController(MusicStoreEntitiesFactory.GetEmpty());
			TestControllerBuilder _builder = new TestControllerBuilder();
			_builder.HttpContext.User = new FakeUser();

			_builder.InitializeController(controller);
			return controller;
		}
	}
}</pre></div></div>

<p>Like the initial test, I create the controller and populate it with an empty IMusicStoreEntities call from the factory. I then create an instance of the TestControllerBuilder class from the MVCContrib package, which will wire together all the stubs and fakes necessary to present Application, Session, and other necessary HttpContext values to the controller. I&#8217;ll add my own FakeUser object (an implementation of IPrincipal) to the builder, then have it do it&#8217;s magic on the CheckoutController instance. Voila, one fully wired up CheckoutController.</p>
<h3>Totally Faked Out, Just Add Data&#8230;</h3>
<p>Now that I have the controller logic able to run independently from a real HTTP request, I can return to finish work on the methods that interact more heavily with the data store.</p>
<p>In order to inject some fake data, I need to replace the stubbed out IMusicStoreEntities data context in the MusicStoreEntitiesFactory with a concrete Fake implementation. This will allow me to add collections that I can locally push data into in order to setup scenarios for individual tests.</p>
<p><b>MvcMusicStoreTests/MusicStoreEntitiesFactory.cs</b></p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="csharp"><thead><tr><td colspan="2"  class="head">C#</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
</pre></td><td class="de1"><pre class="de1"><span class="kw1">namespace</span> MvcMusicStoreTests <span class="br0">&#123;</span>
&nbsp; &nbsp; <span class="kw4">class</span> MusicStoreEntitiesFactory <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">public</span> <span class="kw1">static</span> IMusicStoreEntities GetEmpty<span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; FakeDataStore datastore <span class="sy0">=</span> <span class="kw3">new</span> FakeDataStore<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; datastore<span class="sy0">.</span><span class="me1">Albums</span> <span class="sy0">=</span> <span class="kw3">new</span> FakeDbSet<span class="sy0">&lt;</span>Album<span class="sy0">&gt;</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; datastore<span class="sy0">.</span><span class="me1">Artists</span> <span class="sy0">=</span> <span class="kw3">new</span> FakeDbSet<span class="sy0">&lt;</span>Artist<span class="sy0">&gt;</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; datastore<span class="sy0">.</span><span class="me1">Carts</span> <span class="sy0">=</span> <span class="kw3">new</span> FakeDbSet<span class="sy0">&lt;</span>Cart<span class="sy0">&gt;</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; datastore<span class="sy0">.</span><span class="me1">Genres</span> <span class="sy0">=</span> <span class="kw3">new</span> FakeDbSet<span class="sy0">&lt;</span>Genre<span class="sy0">&gt;</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; datastore<span class="sy0">.</span><span class="me1">OrderDetails</span> <span class="sy0">=</span> <span class="kw3">new</span> FakeDbSet<span class="sy0">&lt;</span>OrderDetail<span class="sy0">&gt;</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; datastore<span class="sy0">.</span><span class="me1">Orders</span> <span class="sy0">=</span> <span class="kw3">new</span> FakeDbSet<span class="sy0">&lt;</span>Order<span class="sy0">&gt;</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">return</span> datastore<span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp; &nbsp; <span class="br0">&#125;</span>
<span class="br0">&#125;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">namespace MvcMusicStoreTests {
	class MusicStoreEntitiesFactory {
		public static IMusicStoreEntities GetEmpty() {
			FakeDataStore datastore = new FakeDataStore();
			datastore.Albums = new FakeDbSet&lt;Album&gt;();
			datastore.Artists = new FakeDbSet&lt;Artist&gt;();
			datastore.Carts = new FakeDbSet&lt;Cart&gt;();
			datastore.Genres = new FakeDbSet&lt;Genre&gt;();
			datastore.OrderDetails = new FakeDbSet&lt;OrderDetail&gt;();
			datastore.Orders = new FakeDbSet&lt;Order&gt;();
			return datastore;
		}
	}
}</pre></div></div>

<p>The fake implementations of the <a href="https://bitbucket.org/tarwn/mvcmusicstore.main/src/8831221efe43/MvcMusicStoreTests/Fakes/FakeDataStore.cs" title="See the FakeDataStore class" target="_blank">datastore</a> exposes collections that implement <a href="https://bitbucket.org/tarwn/mvcmusicstore.main/src/8831221efe43/MvcMusicStoreTests/Fakes/FakeDbSet.cs" title="See the FakeDbSet class" target="_blank">IDbSet</a>. With this setup, it is easy to add test data on a per-test basis and without the overhead of a database (work) or some form of test data management (more work).</p>
<p>Using this new capability, I can start building out more extensive tests.</p>
<p><b>MvcMusicStoreTests/Controllers/CheckoutController.cs</b></p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="csharp"><thead><tr><td colspan="2"  class="head">C#</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
</pre></td><td class="de1"><pre class="de1"><span class="kw1">namespace</span> MvcMusicStoreTests<span class="sy0">.</span><span class="me1">Controllers</span> <span class="br0">&#123;</span>
&nbsp;
&nbsp; &nbsp; <span class="br0">&#91;</span>TestClass<span class="br0">&#93;</span>
&nbsp; &nbsp; <span class="kw1">public</span> <span class="kw4">class</span> CheckoutControllerTests <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="co1">// ...</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#91;</span>TestMethod<span class="br0">&#93;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">public</span> <span class="kw4">void</span> Complete_ValidOrderIdAndUser_ReturnsProperView<span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; FakeDataStore dataStore <span class="sy0">=</span> MusicStoreEntitiesFactory<span class="sy0">.</span><span class="me1">GetEmpty</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; dataStore<span class="sy0">.</span><span class="me1">Orders</span><span class="sy0">.</span><span class="kw1">Add</span><span class="br0">&#40;</span><span class="kw3">new</span> Order<span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span> OrderId<span class="sy0">=</span><span class="nu0">5</span>, Username<span class="sy0">=</span><span class="st0">&quot;Bob&quot;</span> <span class="br0">&#125;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; FakeUser user <span class="sy0">=</span> <span class="kw3">new</span> FakeUser<span class="br0">&#40;</span><span class="kw3">new</span> FakeIdentity<span class="br0">&#40;</span><span class="st0">&quot;Bob&quot;</span>,<span class="st0">&quot;&quot;</span>,<span class="kw1">true</span><span class="br0">&#41;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; CheckoutController controller <span class="sy0">=</span> GetWiredUpController<span class="br0">&#40;</span>store<span class="sy0">:</span> dataStore, user<span class="sy0">:</span> user<span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ViewResult result <span class="sy0">=</span> controller<span class="sy0">.</span><span class="me1">Complete</span><span class="br0">&#40;</span><span class="nu0">5</span><span class="br0">&#41;</span> <span class="kw1">as</span> ViewResult<span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Assert<span class="sy0">.</span><span class="me1">AreEqual</span><span class="br0">&#40;</span><span class="nu0">5</span>, result<span class="sy0">.</span><span class="me1">ViewData</span><span class="sy0">.</span><span class="me1">Model</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">namespace MvcMusicStoreTests.Controllers {

	[TestClass]
	public class CheckoutControllerTests {
		// ...

		[TestMethod]
		public void Complete_ValidOrderIdAndUser_ReturnsProperView() {
			FakeDataStore dataStore = MusicStoreEntitiesFactory.GetEmpty();
			dataStore.Orders.Add(new Order() { OrderId=5, Username="Bob" });
			FakeUser user = new FakeUser(new FakeIdentity("Bob","",true));
			CheckoutController controller = GetWiredUpController(store: dataStore, user: user);
			
			ViewResult result = controller.Complete(5) as ViewResult;

			Assert.AreEqual(5, result.ViewData.Model);
		}</pre></div></div>

<p>Without any database or HttpContext, I can now test that a valid user with a valid order id will complete processing successfully. I&#8217;ve extended the WiredUpController to take optional arguments to simplify creating scenarios specific to an individual test, again adding functionality only as we need it to satisfy our tests.</p>
<p>With a working fake data context a working fake HttpContext and sample tests that interact with both, I can make additional tests very easily and have the groundwork in place to start adding test coverage to other controllers.</p>
<h2>Finishing Up</h2>
<p>The source code is available <a href="https://bitbucket.org/tarwn/mvcmusicstore.main/src" title="Source code on BitBucket">on BitBucket</a>. Initially I went down a number of blind alleys before I started using the MVC3 Contrib package, that one decision greatly simplified seperating the test code from it&#8217;s expectations of a real HttpContext. I tried to cover the most important parts and this same process should be applicable to other projects as well. If you have any questions about how I got from one step to the next, or what happened between changesets in the source repository, please don&#8217;t hesitate to ask here, in the forum, or via the contact form on my website.</p>
<p>Creating the tests incrementally and writing only the minimum code necessary may have looked longer, but it actually helped create a pretty tight codebase for the testing and helped to uncover the lack of server-side validation in the checkout routine, a bug in the tutorial code. Had I tried to build everything I needed up front, I probably would have gone further down several blind alleys and ended up with a much larger codebase then I actually needed.</p>
<h2>Next Steps</h2>
<p>The project now has the beginning of unit test coverage and the tools necessary to start spreading those tests to the rest of our controllers. In the next post I&#8217;ll incorporate these test into the build process, running and capturing the test results as part of the CI build job.</p>
<style>
.thelist li{ color: #666666; }
.thelist .cur{ font-style: italic; color: black; }
</style>
<ul class="thelist">
<li><a href="http://wiki.lessthandot.com/index.php/Eli%27s_Continuous_Delivery_Project" title="Wiki post for Eli's Continuous Delivery Project">Wiki Post</a></li>
<li><a href="/index.php/EnterpriseDev/application-lifecycle-management/starting-a-continuous-delivery-project" title="Starting a Continuous Delivery Project">Starting a Continuous Delivery Project</a></li>
<li><a href="/index.php/EnterpriseDev/application-lifecycle-management/continuous-delivery-project-setting-up" title="Setting up the Continuous Integration stage">Setting up the Continuous Integration stage</a></li>
<li class="cur"><a href="/index.php/EnterpriseDev/UnitTest/continuous-delivery-project-making-mvcmusicstore" title="Making ASP.Net MVC Music Store Testable">Making ASP.Net MVC Music Store Testable</a></li>
<li><a href="/index.php/EnterpriseDev/UnitTest/continuous-delivery-project-incorporating-the" title="Incorporating Unit Tests in the CI stage">Incorporating Unit Tests in the CI stage</a></li>
<li><a href="/index.php/EnterpriseDev/application-lifecycle-management/continuous-delivery-project-deploy-and" title="Deploy and Smoke Test">Deploy and Smoke Test</a></li>
<li><a href="/index.php/EnterpriseDev/application-lifecycle-management/continuous-delivery-adding-an-automated" title="Adding an Automated Interface Testing stage">Adding an Automated Interface Testing stage</a></li>
<li><a href="/index.php/EnterpriseDev/application-lifecycle-management/continuous-delivery-dashboard-qa-and" title="Dashboard, QA and Production Deployment stage">Dashboard, QA and Production Deployment stage</a></li>
</ul>
]]></content:encoded>
			<wfw:commentRss>/index.php/enterprisedev/unittest/continuous-delivery-project-making-mvcmusicstore/feed/</wfw:commentRss>
		<slash:comments>0</slash:comments>
		</item>
		<item>
		<title>Starting a Continuous Delivery Project</title>
		<link>/index.php/enterprisedev/application-lifecycle-management/starting-a-continuous-delivery-project/</link>
		<comments>/index.php/enterprisedev/application-lifecycle-management/starting-a-continuous-delivery-project/#comments</comments>
		<pubDate>Wed, 14 Dec 2011 10:43:00 +0000</pubDate>
		<dc:creator><![CDATA[Eli Weinstock-Herman (tarwn)]]></dc:creator>
				<category><![CDATA[Application Lifecycle Management]]></category>
		<category><![CDATA[asp.net mvc]]></category>
		<category><![CDATA[continuous delivery]]></category>
		<category><![CDATA[continuous integration]]></category>
		<category><![CDATA[mvc music store]]></category>
		<category><![CDATA[unit testing]]></category>

		<guid isPermaLink="false">/index.php/2011/12/starting-a-continuous-delivery-project/</guid>
		<description><![CDATA[I find that often the hardest part of trying a new technology or principle is finding a project that is simple enough to work on in my spare time, yet complex enough to be useful. Several weeks ago I came up with the idea to use a common project to serve as a platform for additional projects and experiments. The first project, build an automated pipeline that will verify the project remains stable (or notify me when it isn't) throughout its lifetime.]]></description>
				<content:encoded><![CDATA[<p>I find that often the hardest part of trying a new technology or principle is finding a project that is simple enough to work on in my spare time, yet complex enough to be useful. Several weeks ago I came up with the idea to use a common project to serve as a platform for additional projects and experiments. The first project, build an automated pipeline that will verify the project remains stable (or notify me when it isn&#8217;t) throughout its lifetime.</p>
<h2>Why a Continuous Delivery Model?</h2>
<p>Continuous Delivery focuses on standardizing the environments and processes for product delivery, with an aim to create a clear and consistent process from committing new code to having a deliverable product. Creating a consistent process reduces variability and risks involved with manual deployment, ensures all &#8220;ready to be released&#8221; products meet our build and testing standards, creates a faster feedback loop so that problems are detected sooner (and thus can be fixed cheaper), and adds a level of auditability that rarely exists with manual deployment processes. </p>
<p>There is a good article <a href="http://www.informit.com/articles/article.aspx?p=1641923" title="Continuous Delivery: The Value Proposition">on InformIT</a> by Jez Humble (who also coauthored the book <a href="http://www.amazon.com/Continuous-Delivery-Deployment-Automation-Addison-Wesley/dp/0321601912/" title="Continuous Delivery at Amazon">Continuous Delivery</a>) that covers the benefits more in depth.</p>
<p>So why use a continuous delivery model for my home lab? </p>
<p>When I spend a weekend playing with caching in my ASP.Net project, I want to be able to walk away from the project knowing it still works and I won&#8217;t be spending my next Saturday trying to figure what I did to break my test systems. This project will also provide a future testbed for load testing and static analysis tools. </p>
<p>Plus seeing all the green &#8220;pass&#8221; lights is nice <img src="https://s.w.org/images/core/emoji/2/72x72/1f642.png" alt="🙂" class="wp-smiley" style="height: 1em; max-height: 1em;" /></p>
<h2>Designing the Process</h2>
<p>I already know several of the components I am going to use. In some cases I have purposefully decided to use technologies I am not familiar with. I am going to be enforcing unit and acceptance tests, potentially adding static analysis tools, and publishing the results to the world via public code repositories, this blog, and a wiki entry.</p>
<p><i>One of the challenges is that all work on this project, including background research, will be in my spare time. My current work environment doesn&#8217;t include a CI system and some of the technologies are new to me. In addition, this project will also be competing with new computer games that come out and my 9 month old son. So it may take more then a few weekends.</i></p>
<h3>The Project</h3>
<p>Prior to designing the deployment pipeline, I selected the project that will serve as the ongoing guinea pig. The ASP.Net MVC3 Music Store tutorial project offered an opportunity to work more with ASP.Net MVC and Entity Framework Code-First as well as serve as a future platform to play with adaptive web design techniques, HTML 5, various output and data caching methods, data layer implementations or NoSQL back-ends, and I&#8217;m sure many more ideas I have yet to consider. It&#8217;s both big enough to have a variety of use cases but small enough that I can finish future projects in a weekend or two.</p>
<h3>The Pipeline</h3>
<p>The delivery pipeline will look something like this:</p>
<div style="text-align: center; font-size: .9em; color: #666666;">
	<img src="http://tiernok.com/LTDBlog/ContinuousDelivery/Overview.png" title="Pipeline overview diagram" /><br />
	Overview of the delivery pipeline
</div>
<p>Initially there won&#8217;t be any configuration management or database change management, and the test coverage will be less than complete. These are all follow-up projects I can take on once I get the main pipeline working.</p>
<h3>Technology Selection</h3>
<p>There are (or were) a number of technology decisions needed to get started. This is the line-up:</p>
<dl>
<dt>ASP.Net MVC 3</dt>
<dd>Development stage, to get more practice with MVC</dd>
<dt>Entity Framework</dt>
<dd>Development stage, I don&#8217;t really care for entity framework, so I&#8217;m trying to use it more</dd>
<dt>MS Test</dt>
<dd>Development stage, I like MS Test for the dev stage because of it&#8217;s integration into Visual Studio</dd>
<dt>Mercurial</dt>
<dd>Source Control, local and BitBucket</dd>
<dt>Jenkins</dt>
<dd>Jenkins, I&#8217;d heard good things about it, lots of plugins, I&#8217;d only ever used TFS in the past for CI and Chrissie already has posts on TeamCity <img src="https://s.w.org/images/core/emoji/2/72x72/1f642.png" alt="🙂" class="wp-smiley" style="height: 1em; max-height: 1em;" /></dd>
<dt>MS Build</dt>
<dd>CI Stage, MS Build to build the code, transform configurations, and create the deployment package</dd>
<dt>MS Test</dt>
<dd>CI Stage, MS Test standalone executable to run the MS Test unit tests</dd>
<dt>IIS 7</dt>
<dd>Deploy Steps, IIS 7 supports the new webdeploy capabilities, which will make deployment much easier</dd>
<dt>MS Deploy</dt>
<dd>Deploy Steps, I haven&#8217;t had an opportunity to do more than push the &#8220;Deploy&#8221; button in WebMatrix, looking forward to getting more in depth with WebDeploy</dd>
<dt>VBScript</dt>
<dd>Deploy Steps, A small vbscript capable of using XMLHTTP to make raw HTTP GET requests (potentially switch to PowerShell later)</dd>
<dt>Nunit</dt>
<dd>Automated Test Stage, Platform and testrunner for the automated interface tests</dd>
<dt>Selenium WebDriver</dt>
<dd>Automated Test Stage, Automated interface testing to be driven by the Nunit framework</dd>
<dt>Build Pipeline Plugin</dt>
<dd>Dashboard, There is a build pipeline plugin for Jenkins that I intend to try out</dd>
<dt>Twitter</dt>
<dd>Communications, I&#8217;ll be using twitter for status notifications at each stage</dd>
</dl>
<p>There are also a number of other plugins for Jenkins which I&#8217;ll mention at the appropriate steps.</p>
<h2>Next Steps</h2>
<p>That&#8217;s the setup. I&#8217;ve created <a href="http://forum.lessthandot.com/viewtopic.php?f=121&amp;t=15760" title="Forum post for discussion">a forum post</a> to discuss the whole process (although comments on individual blogs are obviously still welcome). I also have created <a href="http://wiki.lessthandot.com/index.php/Eli%27s_Continuous_Delivery_Project" title="Wiki post for Eli's Continuous Delivery Project">a wiki page</a> to tie all the posts together and give a current status for the project. You can also watch me break things by following <a href="http://twitter.com/TarwnBuildSrvr" title="Eli's Build Server on Twitter">@TarwnBuildSrvr</a> (currently pretty dull output, may be another project there). I&#8217;ll also post the &#8216;production&#8217; URL for the project and URLs for the source code on bitbucket.</p>
<style>
.thelist li{ color: #666666; }
.thelist .cur{ font-style: italic; color: black; }
</style>
<ul class="thelist">
<li><a href="http://wiki.lessthandot.com/index.php/Eli%27s_Continuous_Delivery_Project" title="Wiki post for Eli's Continuous Delivery Project">Wiki Post</a></li>
<li class="cur"><a href="/index.php/EnterpriseDev/application-lifecycle-management/starting-a-continuous-delivery-project" title="Starting a Continuous Delivery Project">Starting a Continuous Delivery Project</a></li>
<li><a href="/index.php/EnterpriseDev/application-lifecycle-management/continuous-delivery-project-setting-up" title="Setting up the Continuous Integration stage">Setting up the Continuous Integration stage</a></li>
<li><a href="/index.php/EnterpriseDev/UnitTest/continuous-delivery-project-making-mvcmusicstore" title="Making ASP.Net MVC Music Store Testable">Making ASP.Net MVC Music Store Testable</a></li>
<li><a href="/index.php/EnterpriseDev/UnitTest/continuous-delivery-project-incorporating-the" title="Incorporating Unit Tests in the CI stage">Incorporating Unit Tests in the CI stage</a></li>
<li><a href="/index.php/EnterpriseDev/application-lifecycle-management/continuous-delivery-project-deploy-and" title="Deploy and Smoke Test">Deploy and Smoke Test</a></li>
<li><a href="/index.php/EnterpriseDev/application-lifecycle-management/continuous-delivery-adding-an-automated" title="Adding an Automated Interface Testing stage">Adding an Automated Interface Testing stage</a></li>
<li><a href="/index.php/EnterpriseDev/application-lifecycle-management/continuous-delivery-dashboard-qa-and" title="Dashboard, QA and Production Deployment stage">Dashboard, QA and Production Deployment stage</a></li>
</ul>
]]></content:encoded>
			<wfw:commentRss>/index.php/enterprisedev/application-lifecycle-management/starting-a-continuous-delivery-project/feed/</wfw:commentRss>
		<slash:comments>1</slash:comments>
		</item>
		<item>
		<title>Zero-One-Some Testing</title>
		<link>/index.php/datamgmt/datadesign/zero-one-some-testing/</link>
		<comments>/index.php/datamgmt/datadesign/zero-one-some-testing/#comments</comments>
		<pubDate>Tue, 13 Dec 2011 11:33:00 +0000</pubDate>
		<dc:creator><![CDATA[George Mastros (gmmastros)]]></dc:creator>
				<category><![CDATA[Data Modelling and Design]]></category>
		<category><![CDATA[Database Programming]]></category>
		<category><![CDATA[Microsoft SQL Server]]></category>
		<category><![CDATA[tsqlt]]></category>
		<category><![CDATA[unit testing]]></category>

		<guid isPermaLink="false">/index.php/2011/12/zero-one-some-testing/</guid>
		<description><![CDATA[I met Denis and Sebastian over a year ago when I attended their session on test driven database development.  Since then, I have been using tSQLt to add unit tests to my database.  The following post was written by Denis Lloyd Jr.


About the Series&#8230;]]></description>
				<content:encoded><![CDATA[<p><em>I met Denis and Sebastian over a year ago when I attended their session on test driven database development.  Since then, I have been using tSQLt to add unit tests to my database.  The following post was written by Denis Lloyd Jr.</em></p>
<h2>About the Series</h2>
<p>Test case heuristics are patterns used to help decide the next test to write and ensure test coverage of requirements. This is the second post on a series of test case heuristics pertaining to database testing.</p>
<p>I&#8217;m trying out a new way of delivering series to a wider audience &#8211; post sharing! The series home is at: http://testdrivendatabases.com/test-heuristics where you can find links to all articles in the series. The posts will be scattered over a variety of websites and blogs.</p>
<h2>Definition:</h2>
<p>Zero-One-Some says that if multiple instances of a value are allowed, then there should be a test for zero of them; one of them; and some of them. Zero-One-Some is sometimes referred to as Zero-One-Many and is often related to cardinality in the database.</p>
<p>For example, a view may return multiple records. When testing the view, a test should be written where we expect zero records returned; another test for exactly one record returned; and another test for several rows returned.</p>
<div class="image_block"><a href="/media/blogs/DataMgmt/ZeroOneZomeTesting.png?mtime=1323782210"><img src="/wp-content/uploads/blogs/DataMgmt/ZeroOneZomeTesting.png?mtime=1323782210" alt="" width="898" height="240" /></a></div>
<p>Zero-One-Some may be considered both on the input (e.g. a loop that may process multiple values) or the output (e.g. a query that returns multiple rows).</p>
<h2>Purpose:</h2>
<p>Zero-One-Some testing helps:</p>
<ul>
<li>Focus on correct behavior when there are multiple inputs or outputs</li>
<li>Clarify the requirements when zero records should be processed; a common source of database defects.</li>
<li>Prevent mistakes when using grouping in queries</li>
</ul>
<h2>Example:</h2>
<p>The business would like a report of the number of orders and the total revenue from those orders for each of the last 3 months. The report may look like this:</p>
<pre>Month             Number of Orders              Revenue from Orders
Nov 2011          52                            $3582.00
Oct 2011          70                            $12399.50
Sep 2011          30                            $899.55</pre>
<p>It is clear from this requirement that multiple orders must be processed. By applying zero-one-some, we are forced to ask the following questions:</p>
<ul>
<li>If there are no orders in the past 3 months, what should the report display? Should it list each month with 0 orders and $0?</li>
<li>If there are no orders for any particular month, should that month still be listed in the report?</li>
<li>Aggregations are always interesting spots to test. If there is a null value for an order amount, how should that be treated in the sum? If it’s not included in the revenue, should it also not be included in the count?</li>
</ul>
<h2>Notes:</h2>
<p>Tests for zero records seem to uncover missing requirements or defects in code involving aggregations or in places where programmers assume that there will simply be data (perhaps because their test database already has data in it).</p>
<p>Whereas tests for one and some records seem to uncover more problems in loops when a specific exit condition is needed.</p>
<p>Tests for multiple (&#8220;some&#8221;) records may also be useful when data can be duplicated. Often we assume that data being processed is unique, but asking the question, &#8220;what if there are multiple instances of the same record?&#8221; can be illuminating.</p>
<h2>Special Cases:</h2>
<p><strong>Joins</strong>: When multiple tables are joined together in a query, we must often consider the cardinality of the relationship between the tables. Is there a one-to-one relationship between the tables (and is that relationship enforced)? How about a one-to-many or a many-to-many relationship? These impact what tests are needed.</p>
<p>The join type (e.g. inner, left or right outer, full) must also be considered. These are a few of the possibilities:</p>
<ul>
<li>A record exists in the left table, but there are no matches in the right table.</li>
<li>A record exists in the left table and there is exactly one match in the right table.</li>
<li>A record exists in the left table and has multiple matches in the right table.</li>
<li>A record exists in the right table, but has no matches in the left table.</li>
<li>And so on&#8230;</li>
</ul>
<p><strong>Filters</strong>: Zero-one-some is also particularly useful in filters, such as WHERE clauses. Consider the following sub-query, for example:</p>
<pre>SELECT Name   
FROM OrderMgmt.Customer  
WHERE CustomerId =        
    (SELECT CustomerId          
       FROM OrderMgmt.Order         
      WHERE OrderId = @OrderId)  </pre>
<p>While this is a simplistic case, the programmer is likely expecting exactly one record to be returned from the sub-query. If the sub-query returns zero or multiple records though, the actual behavior of this query may not be so pleasant.</p>
]]></content:encoded>
			<wfw:commentRss>/index.php/datamgmt/datadesign/zero-one-some-testing/feed/</wfw:commentRss>
		<slash:comments>1</slash:comments>
		</item>
		<item>
		<title>Getting Started with JavaScript Unit Testing</title>
		<link>/index.php/webdev/uidevelopment/javascript/getting-started-with-javascript-unit/</link>
		<comments>/index.php/webdev/uidevelopment/javascript/getting-started-with-javascript-unit/#comments</comments>
		<pubDate>Mon, 26 Sep 2011 09:58:00 +0000</pubDate>
		<dc:creator><![CDATA[Eli Weinstock-Herman (tarwn)]]></dc:creator>
				<category><![CDATA[Javascript]]></category>
		<category><![CDATA[javascript]]></category>
		<category><![CDATA[jstestdriver]]></category>
		<category><![CDATA[qunit]]></category>
		<category><![CDATA[unit testing]]></category>

		<guid isPermaLink="false">/index.php/2011/09/getting-started-with-javascript-unit/</guid>
		<description><![CDATA[Recently I decided to start doing JavaScript code katas. I've been using JavaScript for around ten years, but there there are still a lot of aspects I don't know well or that I could use more practice in. Case in point, I had never used a unit testing framework with javascript.]]></description>
				<content:encoded><![CDATA[<p>Recently I decided to start doing JavaScript <a href="/index.php/ITProfessionals/ProfessionalDevelopment/using-code-katas-to-improve" title="Read Post: Using Code Katas to Improve Programming Skills">code katas.</a> I&#8217;ve been using JavaScript for around ten years, but there there are still a lot of aspects I don&#8217;t know well or that I could use more practice in. Case in point, I had never used a unit testing framework with javascript. Having never unit tested JavaScript before, I used a scientific tool to carefully select from amongst the numerous unit testing packages available.</p>
<p>I typed &#8220;javascript unit testing&#8221; into Google and started reading.</p>
<h2>jsTestDriver</h2>
<p><a href="http://code.google.com/p/js-test-driver/wiki/GettingStarted" title="Visit the jsTestDriver wiki">jsTestDriver</a> was listed on a wide number of sites as one of the top JavaScript unit testing tools and fit an initial requirement I set myself of running outside of a browser. jsTestDriver runs as a client-server pair, the client sending tests to the server, which then runs them on a captured browser. The advantage of this method is it can easily be integrated with a code editor or as part of an automated build.</p>
<p>The jsTestDriver site includes plugins for Eclipse, Maven, and IntelliJ. I also found an article on <a href="http://slmoloch.blogspot.com/2009/08/how-to-run-jstestdriver-with-visual_02.html" title="Read the Visual Studio post">using it with Visual Studio</a> and it was fairly easy setting it up as a user tool in EditPlus.</p>
<div style="text-align: center; margin: 1em; color: #666666; font-size: 80%">
<img src="http://tiernok.com/LTDBlog/jsunittest/editplus.png" alt="Screenshot of EditPlus" /><br />
Screenshot of EditPlus Settings
</div>
<p>Though I&#8217;m not using the feature, jsTestDriver provides a flag to specify an output file for the results, enabling us to use it as part of a continuous build.</p>
<h3>The Setup</h3>
<p>Setting up jsTestDriver on my system was fairly straightforward.</p>
<ol>
<li>Download Java &#8211; Visit <a href="http://java.com/" title="Java website">java.com</a> and download the appropriate installer, run the installer, remember to go into the control panel and fiddle with Java&#8217;s update settings</li>
<li>Download the jar file &#8211; Visit the <a href="http://code.google.com/p/js-test-driver/downloads/list" title="View the jsTestDriver downloads">project on Google</a> and download a copy of the jar file (I used the self-contained version)</li>
<li>Create folders &#8211; Create a top level folder and two sub folders (for instance, src and src-test). Put the jar in the top level folder</li>
<li>Create a conf file &#8211; I used the one in the <a href="http://code.google.com/p/js-test-driver/wiki/GettingStarted#Writing_configuration_file" title="Visit the Getting Started guide">Getting Started Guide</a> as a starting point</li>
</ol>
<p>At this point we should be able to fire up the server for the first time and verify everything is ready to go. I created a .cmd file on my system for the server so I could easily start it:</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="text"><thead><tr><td colspan="2"  class="head">Text</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
</pre></td><td class="de1"><pre class="de1">&quot;C:Program Files (x86)Javajre6binjava&quot; -jar JsTestDriver-1.3.2.jar --port 4224 --browser &quot;C:Documents and SettingsTarwnLocal SettingsApplication DataGoogleChromeApplicationchrome.exe&quot;</pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">"C:Program Files (x86)Javajre6binjava" -jar JsTestDriver-1.3.2.jar --port 4224 --browser "C:Documents and SettingsTarwnLocal SettingsApplication DataGoogleChromeApplicationchrome.exe"</pre></div></div>

<p>What this does is starts the jsTestDriver jar on port 4224 and also automatically starts up an instance of chrome that will be captured by the server to run tests. I was initially using Firefox but jsTestDriver can&#8217;t intercept the console log the way it can with Chrome, so I wasn&#8217;t getting very good output for failed or errored tests.</p>
<p>Next I created a .cmd file to run all the tests in my folders:</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="text"><thead><tr><td colspan="2"  class="head">Text</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
</pre></td><td class="de1"><pre class="de1">&quot;C:Program Files (x86)Javajre6binjava&quot; -jar JsTestDriver-1.3.2.jar --tests all
pause</pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">"C:Program Files (x86)Javajre6binjava" -jar JsTestDriver-1.3.2.jar --tests all
pause</pre></div></div>

<p>This tells jsTestDriver to run all available tests (based on the settings in the conf) using a jsTestDriver server on port 4224. I ended up not using this cmd file very frequently, as it was much handier to be able to run them from a key command inside my editor.</p>
<h3>Writing Tests</h3>
<p>Once we have gotten this far, we can start writing some simple tests.</p>
<p>In each directory (src and src-test), create a file named &#8220;mystuff.js&#8221;.</p>
<p><b>src/mystuff.js</b></p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="javascript"><thead><tr><td colspan="2"  class="head">Javascript</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
</pre></td><td class="de1"><pre class="de1">myAwesomeApp <span class="sy0">=</span> <span class="br0">&#123;</span><span class="br0">&#125;</span><span class="sy0">;</span>
&nbsp;
myAwesomeApp.<span class="me1">MyAwesomeClass</span> <span class="sy0">=</span> <span class="kw1">function</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#123;</span><span class="br0">&#125;</span><span class="sy0">;</span>
&nbsp;
myAwesomeApp.<span class="me1">MyAwesomeClass</span>.<span class="kw1">prototype</span>.<span class="me1">add</span> <span class="sy0">=</span> <span class="kw1">function</span><span class="br0">&#40;</span>num0<span class="sy0">,</span> num1<span class="br0">&#41;</span><span class="br0">&#123;</span>
&nbsp; &nbsp; <span class="kw1">return</span> num0 <span class="sy0">+</span> num1<span class="sy0">;</span>
<span class="br0">&#125;</span><span class="sy0">;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">myAwesomeApp = {};

myAwesomeApp.MyAwesomeClass = function(){};

myAwesomeApp.MyAwesomeClass.prototype.add = function(num0, num1){
	return num0 + num1;
};</pre></div></div>

<p><b>src-test/mystuff.js</b></p>
<pre>TestCase("Sample Test Case",{

	"test Number plus Zero Equals Number": function(){
		var adder = new myAwesomeApp.MyAwesomeClass();
		assertEquals(5, adder.add(5,0));
	},
	"test Number plus Number Equals Sum": function(){
		var adder = new myAwesomeApp.MyAwesomeClass();
		assertEquals(8, adder.add(5,3));
	},
	"test Zero plus Number Equals Number": function(){
		var adder = new myAwesomeApp.MyAwesomeClass();
		assertEquals(5, adder.add(0,5));
	},
	"test Number plus Negative of Number Equals Zero": function(){
		var adder = new myAwesomeApp.MyAwesomeClass();
		assertEquals(0, adder.add(5,-5));
	},
	"test Fails miserably": function(){
		fail("miserably");
	}
});</pre>
<p>JavaScript provides a number of different methods to define objects with functions, in the source class I used the prototype method and in the tests file I used an object literal. For jsTestDriver, the important part is that the tests in the object we pass to TestCase begin with the word test, and the object literal method seemed like a friendlier layout for a test file.</p>
<h3>Running Tests</h3>
<p>Once we have the two files in place, start the server by issuing the following command (or creating the cmd file like me):</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="text"><thead><tr><td colspan="2"  class="head">Text</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
</pre></td><td class="de1"><pre class="de1">&quot;C:Program Files (x86)Javajre6binjava&quot; -jar ../JsTestDriver-1.3.2.jar --port 4224 --browser &quot;C:Documents and SettingsTarwnLocal SettingsApplication DataGoogleChromeApplicationchrome.exe&quot;</pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">"C:Program Files (x86)Javajre6binjava" -jar ../JsTestDriver-1.3.2.jar --port 4224 --browser "C:Documents and SettingsTarwnLocal SettingsApplication DataGoogleChromeApplicationchrome.exe"</pre></div></div>

<p>You will need to update the browser and java paths to reflect your own.</p>
<p>Once the browser has started and it has been captured by the server for testing, it will look like this:</p>
<div style="text-align: center; margin: 1em; color: #666666; font-size: 80%">
<img src="http://tiernok.com/LTDBlog/jsunittest/jsTestDriver.png" alt="Chrome captured by jsTestDriver Server" /><br />
Chrome captured by jsTestDriver Server
</div>
<p>Now we can run our tests by issuing the following command:</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="text"><thead><tr><td colspan="2"  class="head">Text</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
</pre></td><td class="de1"><pre class="de1">&quot;C:Program Files (x86)Javajre6binjava&quot; -jar ../JsTestDriver-1.3.2.jar --tests all</pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">"C:Program Files (x86)Javajre6binjava" -jar ../JsTestDriver-1.3.2.jar --tests all</pre></div></div>

<p>Again, you will need to change the java path to reflect your own (or remove it if you have added it to your PATH variable).</p>
<p>The results should look something like this:</p>
<pre style="margin: 1em; border: 1px solid #999999; padding: 1em;">
....F
Total 5 tests (Passed: 4; Fails: 1; Errors: 0) (0.00 ms)
  Chrome 13.0.782.220 Windows: Run 5 tests (Passed: 4; Fails: 1; Errors 0) (0.00 ms)
    Object Literal Test Case.test Fails miserably failed (0.00 ms): AssertError: miserably
      AssertError: miserably
          at Object.test Fails miserably (http://localhost:4224/test/src-test/mystuff.js:22:3)

Tests failed: Tests failed. See log for details.
</pre>
<p>The top reflects the tests that have run at a glance with .s for passing tests, Fs for failed, and E for errored. Afterwards we get a summary of the total counts and then a section for the one browser we ran with. jsTestDriver allows you to capture multiple browsers, so we could configure this to run our tests across chrome, firefox, and IE simultaneously.</p>
<p>jsTestDriver also supports &#8220;setup&#8221; and &#8220;teardown&#8221; functions to run before and after tests. </p>
<h2>Qunit</h2>
<p>Qunit is a browser-based solution that was built to unit test the jQuery framework. Qunit has fewer requirements to run, but because it runs directly in a browser it means we have to switch windows and refresh in order to get an updated test run.</p>
<h3>The Setup</h3>
<p>Because Qunit will run in our browser, there are relatively few requirements and unlike jsTestDriver, none of them are installations.</p>
<ol>
<li>We already made our folders, so nothing to do here</li>
<li>Download the necessary include files to the top level: <a href="http://code.jquery.com/qunit/qunit-git.js" title="Download qunit.js">qunit.js</a> and <a href="http://code.jquery.com/qunit/qunit-git.css" title="Download qunit.css">qunit.css</a> (I renamed mine without the -git)</li>
<li>Create an empty html file in the top level</li>
</ol>
<p>The empty file will be our test runner. Update the file to look like this:</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="html4strict"><thead><tr><td colspan="2"  class="head">HTML</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
</pre></td><td class="de1"><pre class="de1"><span class="sc2">&lt;DOCTYPE html&gt;</span>
<span class="sc2">&lt;<span class="kw2">html</span>&gt;</span>
<span class="sc2">&lt;<span class="kw2">head</span>&gt;</span>
&nbsp; &nbsp; <span class="sc2">&lt;<span class="kw2">script</span> <span class="kw3">src</span><span class="sy0">=</span><span class="st0">&quot;http://code.jquery.com/jquery-1.6.4.min.js&quot;</span> <span class="kw3">type</span><span class="sy0">=</span><span class="st0">&quot;text/javascript&quot;</span>&gt;&lt;<span class="sy0">/</span><span class="kw2">script</span>&gt;</span>
&nbsp; &nbsp; <span class="sc2">&lt;<span class="kw2">script</span> <span class="kw3">src</span><span class="sy0">=</span><span class="st0">&quot;qunit.js&quot;</span> <span class="kw3">type</span><span class="sy0">=</span><span class="st0">&quot;text/javascript&quot;</span>&gt;&lt;<span class="sy0">/</span><span class="kw2">script</span>&gt;</span>
&nbsp; &nbsp; <span class="sc2">&lt;<span class="kw2">link</span> <span class="kw3">rel</span><span class="sy0">=</span><span class="st0">&quot;stylesheet&quot;</span> <span class="kw3">media</span><span class="sy0">=</span><span class="st0">&quot;all&quot;</span> <span class="kw3">href</span><span class="sy0">=</span><span class="st0">&quot;qunit.css&quot;</span> <span class="sy0">/</span>&gt;</span>
&nbsp;
&nbsp; &nbsp; <span class="sc2">&lt;<span class="kw2">script</span> <span class="kw3">src</span><span class="sy0">=</span><span class="st0">&quot;src/mystuff.js&quot;</span> <span class="kw3">type</span><span class="sy0">=</span><span class="st0">&quot;text/javascript&quot;</span>&gt;&lt;<span class="sy0">/</span><span class="kw2">script</span>&gt;</span>
&nbsp; &nbsp; <span class="sc2">&lt;<span class="kw2">script</span> <span class="kw3">src</span><span class="sy0">=</span><span class="st0">&quot;src-test/mystuff_qunit.js&quot;</span> <span class="kw3">type</span><span class="sy0">=</span><span class="st0">&quot;text/javascript&quot;</span>&gt;&lt;<span class="sy0">/</span><span class="kw2">script</span>&gt;</span>
&nbsp;
<span class="sc2">&lt;<span class="sy0">/</span><span class="kw2">head</span>&gt;</span>
<span class="sc2">&lt;<span class="kw2">body</span>&gt;</span>
&nbsp; &nbsp; <span class="sc2">&lt;<span class="kw2">h1</span> <span class="kw3">id</span><span class="sy0">=</span><span class="st0">&quot;qunit-header&quot;</span>&gt;</span>MyStuff<span class="sc2">&lt;<span class="sy0">/</span><span class="kw2">h1</span>&gt;</span>
&nbsp; &nbsp; <span class="sc2">&lt;<span class="kw2">h2</span> <span class="kw3">id</span><span class="sy0">=</span><span class="st0">&quot;qunit-banner&quot;</span>&gt;&lt;<span class="sy0">/</span><span class="kw2">h2</span>&gt;</span>
&nbsp; &nbsp; <span class="sc2">&lt;<span class="kw2">h2</span> <span class="kw3">id</span><span class="sy0">=</span><span class="st0">&quot;qunit-userAgent&quot;</span>&gt;&lt;<span class="sy0">/</span><span class="kw2">h2</span>&gt;</span>
&nbsp; &nbsp; <span class="sc2">&lt;<span class="kw2">ol</span> <span class="kw3">id</span><span class="sy0">=</span><span class="st0">&quot;qunit-tests&quot;</span>&gt;&lt;<span class="sy0">/</span><span class="kw2">ol</span>&gt;</span>
<span class="sc2">&lt;<span class="sy0">/</span><span class="kw2">body</span>&gt;</span>
<span class="sc2">&lt;<span class="sy0">/</span><span class="kw2">html</span>&gt;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">&lt;DOCTYPE html&gt;
&lt;html&gt;
&lt;head&gt;
	&lt;script src="http://code.jquery.com/jquery-1.6.4.min.js" type="text/javascript"&gt;&lt;/script&gt;
	&lt;script src="qunit.js" type="text/javascript"&gt;&lt;/script&gt;
	&lt;link rel="stylesheet" media="all" href="qunit.css" /&gt;

	&lt;script src="src/mystuff.js" type="text/javascript"&gt;&lt;/script&gt;
	&lt;script src="src-test/mystuff_qunit.js" type="text/javascript"&gt;&lt;/script&gt;

&lt;/head&gt;
&lt;body&gt;
	&lt;h1 id="qunit-header"&gt;MyStuff&lt;/h1&gt;
	&lt;h2 id="qunit-banner"&gt;&lt;/h2&gt;
	&lt;h2 id="qunit-userAgent"&gt;&lt;/h2&gt;
	&lt;ol id="qunit-tests"&gt;&lt;/ol&gt;
&lt;/body&gt;
&lt;/html&gt;</pre></div></div>

<p>As you can see, we are referencing a CDNed version of jQuery, the local qunit files we downloaded, our source file, and a test js file we haven&#8217;t created yet. The remainder of the HTML will be used by Qunit to display the results.</p>
<h3>Writing Tests</h3>
<p>Writing test in Qunit is pretty straightforward. Since we already have the src/mystuff.js file from above, we can jump right in and create a qunit version of our test cases.</p>
<p><b>src-test/mystuff_qunit.js</b></p>
<pre>module("Sample Test Case");

test("Number plus Zero Equals Number", function(){
	var adder = new myAwesomeApp.MyAwesomeClass();
	equals( adder.add(5,0),5);
});

test("Number plus Number Equals Sum", function(){
	var adder = new myAwesomeApp.MyAwesomeClass();
	equals(adder.add(5,3),8);
});

test("Zero plus Number Equals Number", function(){
	var adder = new myAwesomeApp.MyAwesomeClass();
	equals(adder.add(0,5),5);
});

test("Number plus Negative of Number Equals Zero", function(){
	var adder = new myAwesomeApp.MyAwesomeClass();
	equals(adder.add(5,-5),0);
});

test("Fails miserably", function(){
	ok(false,"miserably");
});</pre>
<p>Qunit&#8217;s <i>equals</i> method has it&#8217;s actual and expected arguments reversed from jsTestDriver, instead expecting them in this order: <i>Qunit.equals(actual, expected)</i>. I didn&#8217;t originally notice this and had to update both the jsTestDriver test mapping script and the sample above (here and in bitbucket).</p>
<h3>Running Tests</h3>
<p>Opening the testrunner html file, we should now see it display a block for each test that we have defined above.</p>
<div style="text-align: center; margin: 1em; color: #666666; font-size: 80%">
<img src="http://tiernok.com/LTDBlog/jsunittest/qunit.png" alt="QUnit Results" /><br />
QUnit Results
</div>
<p>Failed tests automatically display details. Any test can be toggled open/closed by clicking it&#8217;s name, and a handy &#8220;rerun&#8221; button lets us re-run a single test.</p>
<h2>Combining Them</h2>
<p>By writing a small amount of glue script, I was able to re-use my jsTestDriver tests in Qunit. Since I am currently only using a small subset of assertions and using the object literal method, the glue script is limited to only exactly what I needed.</p>
<p>Add this file to the top level folder:<br />
<b>jsTestDriverInQunit.js</b></p>
<pre>/* bare minimum to run jsTestDriver tests as Qunit tests */
function TestCase(name, tests){
        if(tests != null)
                module(name);
        for(var key in tests){
                if(tests[key] instanceof Function &amp;&amp; key.indexOf("test") == 0){
                        test(key,tests[key]);
                }
        }
        return function(){};
}

function assertEquals(arg0,arg1){
        equals(arg1,arg0);
}
function fail(msg){
        ok(false,msg);
}</pre>
<p>And update the testrunner HTML file we created to look like this:</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="html4strict"><thead><tr><td colspan="2"  class="head">HTML</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
</pre></td><td class="de1"><pre class="de1"><span class="sc2">&lt;DOCTYPE html&gt;</span>
<span class="sc2">&lt;<span class="kw2">html</span>&gt;</span>
<span class="sc2">&lt;<span class="kw2">head</span>&gt;</span>
&nbsp; &nbsp; <span class="sc2">&lt;<span class="kw2">script</span> <span class="kw3">src</span><span class="sy0">=</span><span class="st0">&quot;http://code.jquery.com/jquery-1.6.4.min.js&quot;</span> <span class="kw3">type</span><span class="sy0">=</span><span class="st0">&quot;text/javascript&quot;</span>&gt;&lt;<span class="sy0">/</span><span class="kw2">script</span>&gt;</span>
&nbsp; &nbsp; <span class="sc2">&lt;<span class="kw2">script</span> <span class="kw3">src</span><span class="sy0">=</span><span class="st0">&quot;qunit.js&quot;</span> <span class="kw3">type</span><span class="sy0">=</span><span class="st0">&quot;text/javascript&quot;</span>&gt;&lt;<span class="sy0">/</span><span class="kw2">script</span>&gt;</span>
&nbsp; &nbsp; <span class="sc2">&lt;<span class="kw2">script</span> <span class="kw3">src</span><span class="sy0">=</span><span class="st0">&quot;jsTestDriverInQunit.js&quot;</span> <span class="kw3">type</span><span class="sy0">=</span><span class="st0">&quot;text/javascript&quot;</span>&gt;&lt;<span class="sy0">/</span><span class="kw2">script</span>&gt;</span>
&nbsp; &nbsp; <span class="sc2">&lt;<span class="kw2">link</span> <span class="kw3">rel</span><span class="sy0">=</span><span class="st0">&quot;stylesheet&quot;</span> <span class="kw3">media</span><span class="sy0">=</span><span class="st0">&quot;all&quot;</span> <span class="kw3">href</span><span class="sy0">=</span><span class="st0">&quot;qunit.css&quot;</span> <span class="sy0">/</span>&gt;</span>
&nbsp;
&nbsp; &nbsp; <span class="sc2">&lt;<span class="kw2">script</span> <span class="kw3">src</span><span class="sy0">=</span><span class="st0">&quot;src/mystuff.js&quot;</span> <span class="kw3">type</span><span class="sy0">=</span><span class="st0">&quot;text/javascript&quot;</span>&gt;&lt;<span class="sy0">/</span><span class="kw2">script</span>&gt;</span>
&nbsp; &nbsp; <span class="sc2">&lt;<span class="kw2">script</span> <span class="kw3">src</span><span class="sy0">=</span><span class="st0">&quot;src-test/mystuff.js&quot;</span> <span class="kw3">type</span><span class="sy0">=</span><span class="st0">&quot;text/javascript&quot;</span>&gt;&lt;<span class="sy0">/</span><span class="kw2">script</span>&gt;</span>
<span class="sc2">&lt;<span class="sy0">/</span><span class="kw2">head</span>&gt;</span>
<span class="sc2">&lt;<span class="kw2">body</span>&gt;</span>
&nbsp; &nbsp; <span class="sc2">&lt;<span class="kw2">h1</span> <span class="kw3">id</span><span class="sy0">=</span><span class="st0">&quot;qunit-header&quot;</span>&gt;</span>MyStuff<span class="sc2">&lt;<span class="sy0">/</span><span class="kw2">h1</span>&gt;</span>
&nbsp; &nbsp; <span class="sc2">&lt;<span class="kw2">h2</span> <span class="kw3">id</span><span class="sy0">=</span><span class="st0">&quot;qunit-banner&quot;</span>&gt;&lt;<span class="sy0">/</span><span class="kw2">h2</span>&gt;</span>
&nbsp; &nbsp; <span class="sc2">&lt;<span class="kw2">h2</span> <span class="kw3">id</span><span class="sy0">=</span><span class="st0">&quot;qunit-userAgent&quot;</span>&gt;&lt;<span class="sy0">/</span><span class="kw2">h2</span>&gt;</span>
&nbsp; &nbsp; <span class="sc2">&lt;<span class="kw2">ol</span> <span class="kw3">id</span><span class="sy0">=</span><span class="st0">&quot;qunit-tests&quot;</span>&gt;&lt;<span class="sy0">/</span><span class="kw2">ol</span>&gt;</span>
<span class="sc2">&lt;<span class="sy0">/</span><span class="kw2">body</span>&gt;</span>
<span class="sc2">&lt;<span class="sy0">/</span><span class="kw2">html</span>&gt;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">&lt;DOCTYPE html&gt;
&lt;html&gt;
&lt;head&gt;
	&lt;script src="http://code.jquery.com/jquery-1.6.4.min.js" type="text/javascript"&gt;&lt;/script&gt;
	&lt;script src="qunit.js" type="text/javascript"&gt;&lt;/script&gt;
	&lt;script src="jsTestDriverInQunit.js" type="text/javascript"&gt;&lt;/script&gt;
	&lt;link rel="stylesheet" media="all" href="qunit.css" /&gt;

	&lt;script src="src/mystuff.js" type="text/javascript"&gt;&lt;/script&gt;
	&lt;script src="src-test/mystuff.js" type="text/javascript"&gt;&lt;/script&gt;
&lt;/head&gt;
&lt;body&gt;
	&lt;h1 id="qunit-header"&gt;MyStuff&lt;/h1&gt;
	&lt;h2 id="qunit-banner"&gt;&lt;/h2&gt;
	&lt;h2 id="qunit-userAgent"&gt;&lt;/h2&gt;
	&lt;ol id="qunit-tests"&gt;&lt;/ol&gt;
&lt;/body&gt;
&lt;/html&gt;</pre></div></div>

<p>And now whether we run the jsTestDriver client/server or open the Qunit file, we will be running the same exact set of tests.</p>
<p>There is also a <a href="http://code.google.com/p/js-test-driver/wiki/QUnitAdapter" title="Go to the QUnitAdapter project">project</a> that translates Qunit tests into tests that can be run with jsTestDriver.</p>
<p>All of the source code for this post (as well as the content of a couple programming katas) can be found in my <a href="https://bitbucket.org/tarwn/katas.javascript/src" title="Go to the source for the post">javascript repository</a> on BitBucket. The folder structure is slightly different to cut down on duplication of resources.</p>
]]></content:encoded>
			<wfw:commentRss>/index.php/webdev/uidevelopment/javascript/getting-started-with-javascript-unit/feed/</wfw:commentRss>
		<slash:comments>6</slash:comments>
		</item>
		<item>
		<title>Unit Testing Costs Too Much &#8211; Too Many Things To Learn</title>
		<link>/index.php/webdev/serverprogramming/unit-testing-costs-too-much-too-many-thi/</link>
		<comments>/index.php/webdev/serverprogramming/unit-testing-costs-too-much-too-many-thi/#comments</comments>
		<pubDate>Mon, 22 Nov 2010 11:46:43 +0000</pubDate>
		<dc:creator><![CDATA[Eli Weinstock-Herman (tarwn)]]></dc:creator>
				<category><![CDATA[ASP.NET]]></category>
		<category><![CDATA[Server Programming]]></category>
		<category><![CDATA[ms test]]></category>
		<category><![CDATA[unit testing]]></category>
		<category><![CDATA[visual studio]]></category>

		<guid isPermaLink="false">/index.php/2010/11/unit-testing-costs-too-much-too-many-thi/</guid>
		<description><![CDATA[For someone that is just interested in trying out Unit Testing the number of topics out there can seem overwhelming. From passionate articles about using TDD, to deeply technical articles around the differences in mocking frameworks, to complete sidetracks into architecture theory and how to make code more testable...just learning enough to get started and try out Unit Testing can seem like you need weeks of classes.]]></description>
				<content:encoded><![CDATA[<p>For someone that is just interested in trying out Unit Testing the number of topics out there can seem overwhelming. From passionate articles about using TDD, to deeply technical articles around the differences in mocking frameworks, to complete sidetracks into architecture theory and how to make code more testable&#8230;just learning enough to get started and try out Unit Testing can seem like you need weeks of classes.</p>
<p>If you&#8217;re just catching up, I&#8217;ve been sharing commentary on the costs (and value) of Unit Testing, starting with <a href="/index.php/DesktopDev/GeneralPurposeLanguages/unit-testing-costs-too-much" title="Check out the first post">a brief (intended to be humorous) post</a>, a presentation at the <a href="/index.php/DesktopDev/MSTech/raleigh-code-camp-followup" title="Read the codecamp review">Raleigh CodeCamp</a>, and last weeks discussion of the <a href="/index.php/DesktopDev/GeneralPurposeLanguages/unit-testing-costs-too-much-twice-the-co" title="Read the post on the twice the code issue">&#8220;Twice as Much Code&#8221;</a> issue.</p>
<p>This article will try to convey the ease with which you can add Unit Testing to a current project without (in the case of visual studio) extra downloads, installs, or configurations. Costing only a few minutes, and without any of the other terminology, products, or theory, we can get started trying out this Unit Testing concept in our own environment.</p>
<h2>TDD, Mocks, Testability&#8230;</h2>
<p>Automated unit testing has been around for a while and, as such, there has been time for people to define common methods to help make code more testable, components to help reduce the burden of testing certain complex interactions, and processes whose value we may not currently have the context with which to understand.</p>
<p>But we don&#8217;t need any of it to get started.</p>
<p>The only thing we need to get started with Unit Testing is some source code and a Unit Testing framework. This post uses a Microsoft .Net environment with Visual Studio 2010. This actually makes my life even easier because a testing framework is included with Visual Studio, meaning there are no extra downloads, installs, or configurations required; We can start trying it out right now.</p>
<h2>Adding Unit Testing to a Project</h2>
<p>The project we are working with is a basic ASP.Net web application project that I built very quickly for sample purposes. This project can be <a href="http://tiernok.com/LTDBlog/UnitTestingExample.zip" title="ZIP Archive of test code and database backup">downloaded here</a> and includes the sample project and a backup of the SQL database. Feel free to download and follow along, or simply read the post.</p>
<p>Our goal is to quickly add Unit Testing to a pseudo &#8216;existing&#8217; application and position ourselves to take advantage of Unit Testing as we continue to maintain or work on this &#8216;existing&#8217; application.</p>
<h3>Adding the Unit Testing Project</h3>
<p>Opening the project in Visual Studio presents us with our basic Web Application. To get started we right-click the solution and add a Unit Testing Project.</p>
<div class="imgBox">
<a href="http://tiernok.com/LTDBlog/unittesting/orig/AddProject.png" title="See larger image size"><img src="http://tiernok.com/LTDBlog/unittesting/AddProject.png" alt="Adding a Unit Test Project" /></a><br />
Adding a Unit Test Project
</div>
<div class="imgBox">
<a href="http://tiernok.com/LTDBlog/unittesting/orig/AddProject2.png" title="See larger image size"><img src="http://tiernok.com/LTDBlog/unittesting/AddProject2.png" alt="Adding a Unit Test Project" /></a><br />
Adding a Unit Test Project
</div>
<p>Visual Studio will add our new Test Project to the solution and along with an automatically generated Unit Test class. </p>
<p>Next we need to add a reference to the Unit Test project, allowing it to reference the Web Application project we are going to be testing.</p>
<div class="imgBox">
<a href="http://tiernok.com/LTDBlog/unittesting/orig/AddReference.png" title="See larger image size"><img src="http://tiernok.com/LTDBlog/unittesting/AddReference.png" alt="Reference the Project to Test" /></a><br />
Reference the Project to Test
</div>
<div class="imgBox">
<a href="http://tiernok.com/LTDBlog/unittesting/orig/AddReference2.png" title="See larger image size"><img src="http://tiernok.com/LTDBlog/unittesting/AddReference2.png" alt="Reference the Project to Test" /></a><br />
Reference the Project to Test
</div>
<p>We&#8217;ve now added Unit Testing to the solution. In doing so, Visual Studio has done a few extra steps for us, adding a toolbar as well as some generated files.</p>
<h3>The New Toolbar</h3>
<p>The new toolbar in Visual Studio will helps us easily manage and run our tests. </p>
<div class="imgBox">
<a href="http://tiernok.com/LTDBlog/unittesting/orig/UnitTestToolbar.png" title="See larger image size"><img src="http://tiernok.com/LTDBlog/unittesting/UnitTestToolbar.png" alt="Unit Test Toolbar" /></a><br />
Visual Studio&#8217;s Unit Test Toolbar
</div>
<p>From left to right:</p>
<dl>
<dt>New Test</dt>
<dd>Creates additional unit test class files and provides access to a wizard to help create individual unit test functions</dd>
<dt>Run Tests in Current Context</dt>
<dd>Runs the unit tests in the current context of the cursor (selected test, all tests in a class, etc)</dd>
<dt>Run All Tests in Solution</dt>
<dd>As advertised, runs all available Unit Test Methods in the solution</dd>
<dt>Test View</dt>
<dd>A side panel to show all tests in solution</dd>
<dt>Test List Editor</dt>
<dd>An editor to show all tests, allow tests to be organized into lists, and allow specific sets of tests to be selected and run (or debugged)</dd>
<dt>Test Results</dt>
<dd>Shows results of the last test run</dd>
<dt>Test Runs</dt>
<dd>Status of test runs (local or from a remote controller)</dd>
</dl>
<p>Some of these tools also show up in the right click context menu (like Create Unit Test) and have hotkeys (such as the Ctrl+R,A chord to run all tests). Initially you should start with the Test List Editor and the Run All Tests button, the rest will come with time.</p>
<h3>The First Generated Test Class</h3>
<p>Back to the test project for a moment. When we added our new test project, Visual Studio gave us our first Test Class file, complete with some content. Normally I delete most of this and write it myself, if I need it, but it&#8217;s useful while you are still learning what&#8217;s available and the syntax to take advantage of it.</p>
<div class="imgBox">
<a href="http://tiernok.com/LTDBlog/unittesting/orig/GeneratedCode.png" title="See larger image size"><img src="http://tiernok.com/LTDBlog/unittesting/GeneratedCode.png" alt="Generated Code" /></a><br />
Generated Test Code
</div>
<ol style="list-style-type: upper-alpha;">
<li>Test Class Declaration &#8211; Using the [TestClass] attribute tells the Unit Testing framework that this class will have test methods in it</li>
<li>TestContext &#8211; Stores information for the tests (notably ASP.Net page tests and data driven tests) &#8211; subject of a whole different blog post</li>
<li>Additional Test Attributes &#8211; this commented out section contains additional method definitions we can use for setting up or tearing down test data and objects before and after each test or each test run</li>
<li>Our first Unit Test method &#8211; Visual Studio has provided us without first test method, complete with the [TestMethod] attribute that it uses to locate all unit tests in the class</li>
</ol>
<p>For this example we&#8217;re going to cut out most of the clutter and start with this:</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="csharp"><thead><tr><td colspan="2"  class="head">C#</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
</pre></td><td class="de1"><pre class="de1"><span class="kw1">using</span> <span class="co3">System</span><span class="sy0">;</span>
<span class="kw1">using</span> <span class="co3">System.Text</span><span class="sy0">;</span>
<span class="kw1">using</span> <span class="co3">System.Collections.Generic</span><span class="sy0">;</span>
<span class="kw1">using</span> <span class="co3">System.Linq</span><span class="sy0">;</span>
<span class="kw1">using</span> <span class="co3">Microsoft.VisualStudio.TestTools.UnitTesting</span><span class="sy0">;</span>
&nbsp;
<span class="kw1">namespace</span> MyFirstTestProject <span class="br0">&#123;</span>
&nbsp; &nbsp; <span class="br0">&#91;</span>TestClass<span class="br0">&#93;</span>
&nbsp; &nbsp; <span class="kw1">public</span> <span class="kw4">class</span> UnitTest1 <span class="br0">&#123;</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#91;</span>TestMethod<span class="br0">&#93;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">public</span> <span class="kw4">void</span> TestMethod1<span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="co1">// Do Stuff</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp; &nbsp; <span class="br0">&#125;</span>
<span class="br0">&#125;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">using System;
using System.Text;
using System.Collections.Generic;
using System.Linq;
using Microsoft.VisualStudio.TestTools.UnitTesting;

namespace MyFirstTestProject {
	[TestClass]
	public class UnitTest1 {

		[TestMethod]
		public void TestMethod1() {
			// Do Stuff
		}
	}
}</pre></div></div>

<p>Now that we&#8217;ve looked around, lets go ahead and make our first test.</p>
<h2>Our First Unit Test</h2>
<p>The sample project has all of it&#8217;s logic and code written directly in the code behind. For the purposes of this example we would like to debug and correct the address formatting. Occasionally it appears to output an extra address 2 line when it shouldn&#8217;t and, instead of manually troubleshooting, we will be using Unit Tests to troubleshoot and correct the error.</p>
<h3>Extract Logic to Test</h3>
<p>The first thing we will do is extract that logic out of the code behind and put it in a function. Separation of the presentation and logic is a good practice, but often we will run into existing projects that did not follow this. In those cases we need to extract the logic so it can be called from our tests (or other pages that need the same functionality).</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="csharp"><thead><tr><td colspan="2"  class="head">C#</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
</pre></td><td class="de1"><pre class="de1">&nbsp; &nbsp; &nbsp; &nbsp;<span class="kw1">protected</span> <span class="kw4">void</span> rptCustomers_ItemDataBound<span class="br0">&#40;</span><span class="kw4">object</span> sender, RepeaterItemEventArgs e<span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Label lblName <span class="sy0">=</span> <span class="br0">&#40;</span>Label<span class="br0">&#41;</span> e<span class="sy0">.</span><span class="me1">Item</span><span class="sy0">.</span><span class="me1">FindControl</span><span class="br0">&#40;</span><span class="st0">&quot;lblName&quot;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Label lblAddress <span class="sy0">=</span> <span class="br0">&#40;</span>Label<span class="br0">&#41;</span> e<span class="sy0">.</span><span class="me1">Item</span><span class="sy0">.</span><span class="me1">FindControl</span><span class="br0">&#40;</span><span class="st0">&quot;lblAddress&quot;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Label lblID <span class="sy0">=</span> <span class="br0">&#40;</span>Label<span class="br0">&#41;</span> e<span class="sy0">.</span><span class="me1">Item</span><span class="sy0">.</span><span class="me1">FindControl</span><span class="br0">&#40;</span><span class="st0">&quot;lblID&quot;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; LinkButton lbEdit <span class="sy0">=</span> <span class="br0">&#40;</span>LinkButton<span class="br0">&#41;</span> e<span class="sy0">.</span><span class="me1">Item</span><span class="sy0">.</span><span class="me1">FindControl</span><span class="br0">&#40;</span><span class="st0">&quot;lbEdit&quot;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; DataRowView dr <span class="sy0">=</span> <span class="br0">&#40;</span>DataRowView<span class="br0">&#41;</span>e<span class="sy0">.</span><span class="me1">Item</span><span class="sy0">.</span><span class="me1">DataItem</span><span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; lblID<span class="sy0">.</span><span class="me1">Text</span> <span class="sy0">=</span> dr<span class="br0">&#91;</span><span class="st0">&quot;Customer_ID&quot;</span><span class="br0">&#93;</span><span class="sy0">.</span><span class="me1">ToString</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; lblName<span class="sy0">.</span><span class="me1">Text</span> <span class="sy0">=</span> dr<span class="br0">&#91;</span><span class="st0">&quot;Name&quot;</span><span class="br0">&#93;</span><span class="sy0">.</span><span class="me1">ToString</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; lblAddress<span class="sy0">.</span><span class="me1">Text</span> <span class="sy0">=</span> dr<span class="br0">&#91;</span><span class="st0">&quot;Address_1&quot;</span><span class="br0">&#93;</span><span class="sy0">.</span><span class="me1">ToString</span><span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="sy0">+</span> <span class="st0">&quot;&lt;br/&gt;&quot;</span> <span class="sy0">+</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span class="br0">&#40;</span><span class="sy0">!</span><span class="kw4">string</span><span class="sy0">.</span><span class="me1">IsNullOrEmpty</span><span class="br0">&#40;</span>dr<span class="br0">&#91;</span><span class="st0">&quot;Address_2&quot;</span><span class="br0">&#93;</span><span class="sy0">.</span><span class="me1">ToString</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#41;</span> <span class="sy0">?</span> dr<span class="br0">&#91;</span><span class="st0">&quot;Address_2&quot;</span><span class="br0">&#93;</span><span class="sy0">.</span><span class="me1">ToString</span><span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="sy0">+</span> <span class="st0">&quot;&lt;br/&gt;&quot;</span> <span class="sy0">:</span> <span class="st0">&quot;&quot;</span><span class="br0">&#41;</span> <span class="sy0">+</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;dr<span class="br0">&#91;</span><span class="st0">&quot;City&quot;</span><span class="br0">&#93;</span><span class="sy0">.</span><span class="me1">ToString</span><span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="sy0">+</span> <span class="st0">&quot; &quot;</span> <span class="sy0">+</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;dr<span class="br0">&#91;</span><span class="st0">&quot;State&quot;</span><span class="br0">&#93;</span><span class="sy0">.</span><span class="me1">ToString</span><span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="sy0">+</span> <span class="st0">&quot;, &quot;</span> <span class="sy0">+</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;dr<span class="br0">&#91;</span><span class="st0">&quot;Zip&quot;</span><span class="br0">&#93;</span><span class="sy0">.</span><span class="me1">ToString</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; lbEdit<span class="sy0">.</span><span class="me1">CommandArgument</span> <span class="sy0">=</span> dr<span class="br0">&#91;</span><span class="st0">&quot;Customer_ID&quot;</span><span class="br0">&#93;</span><span class="sy0">.</span><span class="me1">ToString</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">       protected void rptCustomers_ItemDataBound(object sender, RepeaterItemEventArgs e) {
            Label lblName = (Label) e.Item.FindControl("lblName");
            Label lblAddress = (Label) e.Item.FindControl("lblAddress");
            Label lblID = (Label) e.Item.FindControl("lblID");
            LinkButton lbEdit = (LinkButton) e.Item.FindControl("lbEdit");
            DataRowView dr = (DataRowView)e.Item.DataItem;

            lblID.Text = dr["Customer_ID"].ToString();
            lblName.Text = dr["Name"].ToString();
            lblAddress.Text = dr["Address_1"].ToString() + "&lt;br/&gt;" +
                   (!string.IsNullOrEmpty(dr["Address_2"].ToString()) ? dr["Address_2"].ToString() + "&lt;br/&gt;" : "") +
                   dr["City"].ToString() + " " +
                   dr["State"].ToString() + ", " +
                   dr["Zip"].ToString();
            lbEdit.CommandArgument = dr["Customer_ID"].ToString();
        }</pre></div></div>

<p>To separate the address formatting out of the code behind, we will create a new class named <em>CustomerInfo</em>, add a method named <em>GetFormattedAddress</em>, and then extract the logic from the code behind and replace it with a call to our new method:</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="csharp"><thead><tr><td colspan="2"  class="head">C#</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
</pre></td><td class="de1"><pre class="de1">&nbsp; &nbsp; &nbsp; &nbsp;<span class="kw1">protected</span> <span class="kw4">void</span> rptCustomers_ItemDataBound<span class="br0">&#40;</span><span class="kw4">object</span> sender, RepeaterItemEventArgs e<span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="co1">//...</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; lblAddress<span class="sy0">.</span><span class="me1">Text</span> <span class="sy0">=</span> CustomerInformation<span class="sy0">.</span><span class="me1">GetFormattedAddress</span><span class="br0">&#40;</span>dr<span class="br0">&#91;</span><span class="st0">&quot;Address_1&quot;</span><span class="br0">&#93;</span><span class="sy0">.</span><span class="me1">ToString</span><span class="br0">&#40;</span><span class="br0">&#41;</span>,
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; dr<span class="br0">&#91;</span><span class="st0">&quot;Address_2&quot;</span><span class="br0">&#93;</span><span class="sy0">.</span><span class="me1">ToString</span><span class="br0">&#40;</span><span class="br0">&#41;</span>,
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; dr<span class="br0">&#91;</span><span class="st0">&quot;City&quot;</span><span class="br0">&#93;</span><span class="sy0">.</span><span class="me1">ToString</span><span class="br0">&#40;</span><span class="br0">&#41;</span>,
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; dr<span class="br0">&#91;</span><span class="st0">&quot;State&quot;</span><span class="br0">&#93;</span><span class="sy0">.</span><span class="me1">ToString</span><span class="br0">&#40;</span><span class="br0">&#41;</span>,
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; dr<span class="br0">&#91;</span><span class="st0">&quot;Zip&quot;</span><span class="br0">&#93;</span><span class="sy0">.</span><span class="me1">ToString</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="co1">//...</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">       protected void rptCustomers_ItemDataBound(object sender, RepeaterItemEventArgs e) {
            //...
			lblAddress.Text = CustomerInformation.GetFormattedAddress(dr["Address_1"].ToString(),
										dr["Address_2"].ToString(),
										dr["City"].ToString(),
										dr["State"].ToString(),
										dr["Zip"].ToString());
            //...
        }</pre></div></div>

<p>And the new class and method look like:</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="csharp"><thead><tr><td colspan="2"  class="head">C#</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
</pre></td><td class="de1"><pre class="de1">&nbsp; &nbsp; <span class="kw1">public</span> <span class="kw4">class</span> CustomerInformation <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">public</span> <span class="kw1">static</span> <span class="kw4">string</span> GetFormattedAddress<span class="br0">&#40;</span><span class="kw4">string</span> address1, <span class="kw4">string</span> address2, <span class="kw4">string</span> city, <span class="kw4">string</span> state, <span class="kw4">string</span> zip<span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="co1">//lblAddress.Text = dr[&quot;Address_1&quot;].ToString() + &quot;&lt;br/&gt;&quot; +</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="co1">// &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; (!string.IsNullOrEmpty(dr[&quot;Address_2&quot;].ToString()) ? dr[&quot;Address_2&quot;].ToString() + &quot;&lt;br/&gt;&quot; : &quot;&quot;) +</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="co1">// &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; dr[&quot;City&quot;].ToString() + &quot; &quot; +</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="co1">// &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; dr[&quot;State&quot;].ToString() + &quot;, &quot; +</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="co1">// &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; dr[&quot;Zip&quot;].ToString();</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">return</span> address1 <span class="sy0">+</span> <span class="st0">&quot;&lt;br/&gt;&quot;</span> <span class="sy0">+</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#40;</span><span class="sy0">!</span><span class="kw4">string</span><span class="sy0">.</span><span class="me1">IsNullOrEmpty</span><span class="br0">&#40;</span>address2<span class="br0">&#41;</span> <span class="sy0">?</span> address2 <span class="sy0">+</span> <span class="st0">&quot;&lt;br/&gt;&quot;</span> <span class="sy0">:</span> <span class="st0">&quot;&quot;</span><span class="br0">&#41;</span> <span class="sy0">+</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; city <span class="sy0">+</span> <span class="st0">&quot; &quot;</span> <span class="sy0">+</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; state <span class="sy0">+</span> <span class="st0">&quot;, &quot;</span> <span class="sy0">+</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; zip<span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp; &nbsp; <span class="br0">&#125;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">	public class CustomerInformation {
		public static string GetFormattedAddress(string address1, string address2, string city, string state, string zip) {
			//lblAddress.Text = dr["Address_1"].ToString() + "&lt;br/&gt;" +
			//               (!string.IsNullOrEmpty(dr["Address_2"].ToString()) ? dr["Address_2"].ToString() + "&lt;br/&gt;" : "") +
			//               dr["City"].ToString() + " " +
			//               dr["State"].ToString() + ", " +
			//               dr["Zip"].ToString();

			return address1 + "&lt;br/&gt;" +
			(!string.IsNullOrEmpty(address2) ? address2 + "&lt;br/&gt;" : "") +
			city + " " +
			state + ", " +
			zip;
		}
	}</pre></div></div>

<p>Now that we have a separate method to work with, we can create Unit Test methods to both troubleshoot our error and provide a defense from it occurring again.</p>
<h3>Create the First Test</h3>
<p>Back in our test project, Visual Studio had created a shell of a method for us to fill in with our test logic. The key difference between a Unit Test method and a regular method is the <em>[TestMethod]</em> decoration and the use of a class named <em>Assert</em> to communicate and test expectations.</p>
<p>When we build unit tests, we want to keep them small and simple. This reduces the complexity of the tests, makes them easier to add, change, and remove as our application is modified. The smaller and more straightforward the tests are, the easier it will be to determine what they do 3 years from now or when one of our coworkers is working with something we originally wrote.</p>
<p>Part of keeping our tests simple is using a good, consistent naming pattern. I recently started using one that Roy Osherove (<a href="/index.php/Architect/IntroductionArchitectureDesign/an-interview-with-roy-osherove-autor-of-" title="Read the interview here at LessThanDot">interview</a>|<a href="http://weblogs.asp.net/rosherove/" title="Visit Roy Osherove's blog">blog</a>|<a href="http://twitter.com/RoyOsherove" title="@RoyOsherove on Twitter">twitter</a>) included in his book. </p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="csharp"><thead><tr><td colspan="2"  class="head">C#</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
</pre></td><td class="de1"><pre class="de1"><span class="br0">&#91;</span>TestMethod<span class="br0">&#93;</span>
<span class="kw1">public</span> <span class="kw4">void</span> MethodUnderTest_Scenario_Expectation<span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span><span class="br0">&#125;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">[TestMethod]
public void MethodUnderTest_Scenario_Expectation() {}</pre></div></div>

<p>It is a long name pattern, but it reduces the need to add commenting, communicates the purpose and expectation of the test succinctly, and helps force me to keep my tests simpler. If I can&#8217;t communicate the full intent of the test in this simple manner, then I know I have made them overly complex. Communicating the intent is useful when we see a list of tests after a test run or as part of a build.</p>
<p>In this case we are testing the new GetFormattedText method, the scenario is that our address 2 field is empty, and our expectation is that we will receive back two lines of formatted HTML:</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="csharp"><thead><tr><td colspan="2"  class="head">C#</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
</pre></td><td class="de1"><pre class="de1"><span class="br0">&#91;</span>TestMethod<span class="br0">&#93;</span>
<span class="kw1">public</span> <span class="kw4">void</span> GetFormattedText_Address2EmptyString_ReturnsTwoHtmlLines<span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; <span class="co1">// arrange - setup necessary resources</span>
&nbsp;
&nbsp; &nbsp; <span class="co1">// act - act on the unit we are testing</span>
&nbsp; &nbsp; <span class="kw4">string</span> result <span class="sy0">=</span> CustomerInformation<span class="sy0">.</span><span class="me1">GetFormattedAddress</span><span class="br0">&#40;</span><span class="st0">&quot;a&quot;</span>, <span class="st0">&quot;&quot;</span>, <span class="st0">&quot;b&quot;</span>, <span class="st0">&quot;c&quot;</span>, <span class="st0">&quot;d&quot;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; <span class="co1">// assert - test our expectations</span>
&nbsp; &nbsp; Assert<span class="sy0">.</span><span class="me1">AreEqual</span><span class="sy0">&lt;</span><span class="kw4">string</span><span class="sy0">&gt;</span><span class="br0">&#40;</span><span class="st0">&quot;a&lt;br/&gt;b c, d&quot;</span>, result<span class="br0">&#41;</span><span class="sy0">;</span>
<span class="br0">&#125;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">[TestMethod]
public void GetFormattedText_Address2EmptyString_ReturnsTwoHtmlLines() {
    // arrange - setup necessary resources

    // act - act on the unit we are testing
    string result = CustomerInformation.GetFormattedAddress("a", "", "b", "c", "d");

    // assert - test our expectations
    Assert.AreEqual&lt;string&gt;("a&lt;br/&gt;b c, d", result);
}</pre></div></div>

<div class="note">
Note: The code in this function follows a common pattern for creating tests, called the <a href="http://c2.com/cgi/wiki?ArrangeActAssert" title="Read about the AAA pattern">AAA (Arrange, Act, Assert) pattern</a>. This is one more method I use to keep my tests consistent (and consistency improves maintainability and readability), though I usually do not include the comments.
</div>
<p>Our test method calls the new GetFormattedAddress method with values for all of the arguments but address2, which is passed as an empty string. Then we use the Assert.AreEqual(<em>expected</em>,<em>actual</em>) method to tell the test framework that we expect the result to match the string <code class="codespan">"a&lt;br /&gt;b c, d"</code>. On running this test (Ctrl+R, A), Visual Studio will give us a little green checkmark to indicate that the code met our expectations (no Assertions were in error).</p>
<p><em>Note: if you are following along with this project in Visual Studio, you will need to add a &#8220;using UnitTestPresentation;&#8221; to the top of your test class</em></p>
<div class="imgBox">
<a href="http://tiernok.com/LTDBlog/unittesting/orig/TestRun1.png" title="See larger image size"><img src="http://tiernok.com/LTDBlog/unittesting/TestRun1.png" alt="Test Run results" /></a><br />
Viewing Test Run Results
</div>
<p>Technically we could list as many assert statements as we want in the function, but this contradicts our Keep-it-Simple philosophy above and Visual Studio stops evaluating assertions in an individual method after the first one fails. It&#8217;s a good practice to try and limit the number Asserts so that each test method is testing one expectation and, when the customer&#8217;s expectations change, it is obvious where we have to make updates and what is impacted.</p>
<h3>Flushing Out the Problem</h3>
<p>Well, we have our first test and it doesn&#8217;t appear to have found the problem. However we can quickly add additional tests by copying that initial test, creating new method names, and tweaking the arguments we are testing.</p>
<p>Here I have created two additional tests: <br /> <code class="codespan">GetFormattedText_Address2Null_ReturnsTwoHtmlLines()</code> and <code class="codespan">GetFormattedText_Address2Whitespace_ReturnsTwoHtmlLines()</code></p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="csharp"><thead><tr><td colspan="2"  class="head">C#</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
</pre></td><td class="de1"><pre class="de1"><span class="br0">&#91;</span>TestMethod<span class="br0">&#93;</span>
<span class="kw1">public</span> <span class="kw4">void</span> GetFormattedText_Address2Null_ReturnsTwoHtmlLines<span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp;
&nbsp; &nbsp; <span class="kw4">string</span> result <span class="sy0">=</span> CustomerInformation<span class="sy0">.</span><span class="me1">GetFormattedAddress</span><span class="br0">&#40;</span><span class="st0">&quot;a&quot;</span>, <span class="kw1">null</span>, <span class="st0">&quot;b&quot;</span>, <span class="st0">&quot;c&quot;</span>, <span class="st0">&quot;d&quot;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; Assert<span class="sy0">.</span><span class="me1">AreEqual</span><span class="sy0">&lt;</span><span class="kw4">string</span><span class="sy0">&gt;</span><span class="br0">&#40;</span><span class="st0">&quot;a&lt;br/&gt;b c, d&quot;</span>, result<span class="br0">&#41;</span><span class="sy0">;</span>
<span class="br0">&#125;</span>
&nbsp;
<span class="br0">&#91;</span>TestMethod<span class="br0">&#93;</span>
<span class="kw1">public</span> <span class="kw4">void</span> GetFormattedText_Address2Whitespace_ReturnsTwoHtmlLines<span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp;
&nbsp; &nbsp; <span class="kw4">string</span> result <span class="sy0">=</span> CustomerInformation<span class="sy0">.</span><span class="me1">GetFormattedAddress</span><span class="br0">&#40;</span><span class="st0">&quot;a&quot;</span>, <span class="st0">&quot; &nbsp;&quot;</span>, <span class="st0">&quot;b&quot;</span>, <span class="st0">&quot;c&quot;</span>, <span class="st0">&quot;d&quot;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; Assert<span class="sy0">.</span><span class="me1">AreEqual</span><span class="sy0">&lt;</span><span class="kw4">string</span><span class="sy0">&gt;</span><span class="br0">&#40;</span><span class="st0">&quot;a&lt;br/&gt;b c, d&quot;</span>, result<span class="br0">&#41;</span><span class="sy0">;</span>
<span class="br0">&#125;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">[TestMethod]
public void GetFormattedText_Address2Null_ReturnsTwoHtmlLines() {

    string result = CustomerInformation.GetFormattedAddress("a", null, "b", "c", "d");

    Assert.AreEqual&lt;string&gt;("a&lt;br/&gt;b c, d", result);
}

[TestMethod]
public void GetFormattedText_Address2Whitespace_ReturnsTwoHtmlLines() {

    string result = CustomerInformation.GetFormattedAddress("a", "  ", "b", "c", "d");

    Assert.AreEqual&lt;string&gt;("a&lt;br/&gt;b c, d", result);
}</pre></div></div>

<p>And when we run our tests this time, we can see that the last one is the case where our function isn&#8217;t working correctly.</p>
<div class="imgBox">
<a href="http://tiernok.com/LTDBlog/unittesting/orig/TestRun2.png" title="See larger image size"><img src="http://tiernok.com/LTDBlog/unittesting/TestRun2.png" alt="Test Run results" /></a><br />
Viewing Test Run Results
</div>
<p>So apparently when we have whitespace in Address Line 2, the formatting function wasn&#8217;t smart enough to ignore it. This is easy to fix and we now have 3 tests that can verify our fix will works properly.</p>
<h2>Wrapping Up</h2>
<p>And that&#8217;s all it takes. </p>
<p>During the CodeCamp presentation we were able to extract, repair, and extend the validation logic for the save button on this form in a similar time period and, later in the session, someone suggested an improvement to the corrected formatting function that took less than 30 seconds to add and verify (shorter than even pulling up the website).</p>
<p>Hopefully this shows how easy it would be to get started with Unit Testing on an existing project. Rather than being an activity that will take days, you can add and start trying this technology in less than an hour. Using only as much as we covered here, you can start seeing value with your existing and new projects and learn enough to be able to evaluate more advanced techniques, other testing frameworks, and additional resources.</p>
<p>Sample code and previous articles in this unplanned series:</p>
<ul>
<li>Initial &#8220;Unit Testing Costs Too Much&#8221; post: <a href="/index.php/DesktopDev/GeneralPurposeLanguages/unit-testing-costs-too-much" title="Check out the first post">Unit Testing Costs Too Much</a></li>
<li>Code camp review and links for slides: <a href="/index.php/All/?p=999" title="Code Camp review">Raleigh Code Camp Followup</a></li>
<li>2x Code Followup: <a href="/index.php/DesktopDev/GeneralPurposeLanguages/unit-testing-costs-too-much-twice-the-co" title="Read more on the 2x Code topic">Unit Testing Costs Too Much &#8211; Twice The Code = Value?</a></li>
<li>Sample Code: <a href="http://tiernok.com/LTDBlog/UnitTestingExample.zip" title="ZIP Archive of test code and database backup">ZIP Archive of Sample Project and Database Backup</a></li>
</ul>
<style>
.imgBox{border:1px solid #CCCCCC; background-color: #EEEEEE; padding: .5em; text-align: center; display: inline-block; font-size: .8em; margin: .25em;}
</style>
]]></content:encoded>
			<wfw:commentRss>/index.php/webdev/serverprogramming/unit-testing-costs-too-much-too-many-thi/feed/</wfw:commentRss>
		<slash:comments>2</slash:comments>
		</item>
	</channel>
</rss>
