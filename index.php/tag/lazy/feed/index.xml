<?xml version="1.0" encoding="UTF-8"?><rss version="2.0"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:atom="http://www.w3.org/2005/Atom"
	xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
	xmlns:slash="http://purl.org/rss/1.0/modules/slash/"
	>

<channel>
	<title>lazy &#8211; LessthanDot</title>
	<atom:link href="/index.php/tag/lazy/feed/" rel="self" type="application/rss+xml" />
	<link>/</link>
	<description>A Technical Community for IT Professionals</description>
	<lastBuildDate>Sat, 09 Mar 2019 12:50:36 +0000</lastBuildDate>
	<language>en-US</language>
	<sy:updatePeriod>hourly</sy:updatePeriod>
	<sy:updateFrequency>1</sy:updateFrequency>
	<generator>https://wordpress.org/?v=4.6.1</generator>
	<item>
		<title>Lazy Coding?</title>
		<link>/index.php/desktopdev/mstech/lazy-coding/</link>
		<comments>/index.php/desktopdev/mstech/lazy-coding/#respond</comments>
		<pubDate>Thu, 11 Mar 2010 14:03:43 +0000</pubDate>
		<dc:creator><![CDATA[chaospandion]]></dc:creator>
				<category><![CDATA[C#]]></category>
		<category><![CDATA[Microsoft Technologies]]></category>
		<category><![CDATA[.net]]></category>
		<category><![CDATA[c#]]></category>
		<category><![CDATA[lazy]]></category>

		<guid isPermaLink="false">/index.php/2010/03/lazy-coding/</guid>
		<description><![CDATA[Are you waiting for .NET 4.0 to take advantage of lazy initialization? Now you don&#8217;t have to. The question you need to ask yourself is why haven&#8217;t I already made this myself? Aren&#8217;t we all a little lazy? /// &#60;summary&#62; /// Provides support for lazy initialization. /// &#60;/summary&#62; /// &#60;typeparam name="T"&#62;Specifies the type of object [&#8230;]]]></description>
				<content:encoded><![CDATA[<p>Are you waiting for .NET 4.0 to take advantage of lazy initialization? Now you don&#8217;t have to. The question you need to ask yourself is why haven&#8217;t I already made this myself?</p>
<p><em>Aren&#8217;t we all a little lazy?</em></p>
<pre>/// &lt;summary&gt;
/// Provides support for lazy initialization.
/// &lt;/summary&gt;
/// &lt;typeparam name="T"&gt;Specifies the type of object that is being lazily initialized.&lt;/typeparam&gt;
public sealed class Lazy&lt;T&gt;
{
	private readonly Func&lt;T&gt; createValue;
	private volatile bool isValueCreated;
	private T value;


	/// &lt;summary&gt;
	/// Gets the lazily initialized value of the current Lazy{T} instance.
	/// &lt;/summary&gt;
	public T Value
	{
		get
		{
			if (!isValueCreated)
			{
				lock (this)
				{
					if (!isValueCreated)
					{
						value = createValue();
						isValueCreated = true;
					}
				}
			}
			return value;
		}
	}		

	/// &lt;summary&gt;
	/// Gets a value that indicates whether a value has been created for this Lazy{T} instance.
	/// &lt;/summary&gt;
	public bool IsValueCreated
	{
		get 
		{
			lock (this)
			{
				return isValueCreated;
			} 
		}
	}


	/// &lt;summary&gt;
	/// Initializes a new instance of the Lazy{T} class.
	/// &lt;/summary&gt;
	/// &lt;param name="createValue"&gt;The delegate that produces the value when it is needed.&lt;/param&gt;
	public Lazy(Func&lt;T&gt; createValue)
	{
		if (createValue == null) throw new ArgumentNullException("createValue");

		this.createValue = createValue;
	}


	/// &lt;summary&gt;
	/// Creates and returns a string representation of the Lazy{T}.Value.
	/// &lt;/summary&gt;
	/// &lt;returns&gt;The string representation of the Lazy{T}.Value property.&lt;/returns&gt;
	public override string ToString()
	{
		return Value.ToString();
	}
}</pre>
<p><strong>Example Usage</strong></p>
<pre>public int MyProperty
{
    get { return myProperty.Value; }
}
private readonly Lazy&lt;int&gt; myProperty = new Lazy&lt;int&gt;(() =&gt; 2);</pre>
]]></content:encoded>
			<wfw:commentRss>/index.php/desktopdev/mstech/lazy-coding/feed/</wfw:commentRss>
		<slash:comments>0</slash:comments>
		</item>
	</channel>
</rss>
