<?xml version="1.0" encoding="UTF-8"?><rss version="2.0"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:atom="http://www.w3.org/2005/Atom"
	xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
	xmlns:slash="http://purl.org/rss/1.0/modules/slash/"
	>

<channel>
	<title>javascript &#8211; LessthanDot</title>
	<atom:link href="/index.php/tag/javascript-2/feed/" rel="self" type="application/rss+xml" />
	<link>/</link>
	<description>A Technical Community for IT Professionals</description>
	<lastBuildDate>Sat, 09 Mar 2019 12:50:36 +0000</lastBuildDate>
	<language>en-US</language>
	<sy:updatePeriod>hourly</sy:updatePeriod>
	<sy:updateFrequency>1</sy:updateFrequency>
	<generator>https://wordpress.org/?v=4.6.1</generator>
	<item>
		<title>Continuous Javascript Test Execution with WallabyJS</title>
		<link>/index.php/webdev/continuous-javascript-test-execution-with-wallabyjs/</link>
		<comments>/index.php/webdev/continuous-javascript-test-execution-with-wallabyjs/#respond</comments>
		<pubDate>Thu, 13 Oct 2016 19:53:07 +0000</pubDate>
		<dc:creator><![CDATA[Eli Weinstock-Herman (tarwn)]]></dc:creator>
				<category><![CDATA[Web Developer]]></category>
		<category><![CDATA[jasmine]]></category>
		<category><![CDATA[javascript]]></category>
		<category><![CDATA[requirejs]]></category>
		<category><![CDATA[unit testing]]></category>
		<category><![CDATA[wallabyjs]]></category>

		<guid isPermaLink="false">/?p=4676</guid>
		<description><![CDATA[After working with NCrunch building and running tests in the background for the last several years, it feels like something is broken when I have to wait for test results or push a button to start running them. JavaScript runners just didn&#8217;t feel like they provided the same level of development feedback, whether they were [&#8230;]]]></description>
				<content:encoded><![CDATA[<p>After working with NCrunch building and running tests in the background for the last several years, it feels like something is broken when I have to wait for test results or push a button to start running them. JavaScript runners just didn&#8217;t feel like they provided the same level of development feedback, whether they were command-line runners with gulp tasks, plugins like Chutzpah, or dedicated runners like Karma.</p>
<p><em>I&#8217;ve posted previously on both <a href="/index.php/enterprisedev/unittest/reducing-code-build-test-friction/">NCrunch</a> and <a href="/index.php/webdev/uidevelopment/javascript/continuous-javascript-testing-with-karma/">Karma</a>, test runners that run .Net and Javascript code continuously behind the scenes as you develop.</em></p>
<p><a href="https://wallabyjs.com/">WallabyJS</a> is like NCrunch for Javascript. It radiates test statuses directly in your IDE as you edit your code, letting you know what&#8217;s workign and not working without any extra action. No switching to a secondary screen or manually running and waiting for results. It has wide support, integrating with the IntelliJ platform, Visual Studio, Visual Studio Code, Sublime, and more. </p>
<p>I used this sample project throughout the post: <A href="https://github.com/tarwn/townthing">github.com/tarwn/townthing</a>. It is a small sandbox project that uses RequireJS and had been configured for Karma as well as having a Jasmine SpecRunner for running the tests in the browser. Hopefully this means Wallaby will be able to slide right in.</p>
<h2>From Zero to Wallaby, in Visual Studio Code</h2>
<p>First step, open Visual Studio Code and install the extension: ext install wallaby-vscode</p>
<p>Wallaby has a really easy to follow &#8220;getting started&#8221; guide that I mostly ignored: <A href="https://wallabyjs.com/docs/config/overview.html">https://wallabyjs.com/docs/config/overview.html</a></p>
<p>I didn&#8217;t pay a lot of attention, but jumped straight to pushing Ctrl+Shift+R, R after installing the extension. It prompted me to identify a config file (I created an empty &#8220;wallaby.js&#8221; file), then upset my firewall briefly by running node.js (which I allowed).</p>
<p>I then created my wallaby.js configuration using a short example of using wallaby with RequireJS: <a href="https://github.com/wallabyjs/wallaby-requirejs-sample">github.com/wallabyjs/wallaby-requirejs-sample</a></p>
<p><b>wallaby.js</b></p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="javascript"><thead><tr><td colspan="2"  class="head">Javascript</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
</pre></td><td class="de1"><pre class="de1">module.<span class="me1">exports</span> <span class="sy0">=</span> <span class="kw1">function</span> <span class="br0">&#40;</span>wallaby<span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; <span class="kw1">return</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; files<span class="sy0">:</span> <span class="br0">&#91;</span>
&nbsp; &nbsp; &nbsp; <span class="br0">&#123;</span> pattern<span class="sy0">:</span> <span class="st0">'town/js/lib/require-2.1.11.js'</span><span class="sy0">,</span> instrument<span class="sy0">:</span> <span class="kw2">false</span> <span class="br0">&#125;</span><span class="sy0">,</span>
&nbsp; &nbsp; &nbsp; <span class="br0">&#123;</span> pattern<span class="sy0">:</span> <span class="st0">'town/js/lib/*.js'</span><span class="sy0">,</span> load<span class="sy0">:</span> <span class="kw2">false</span> <span class="br0">&#125;</span><span class="sy0">,</span>
&nbsp; &nbsp; &nbsp; <span class="br0">&#123;</span> pattern<span class="sy0">:</span> <span class="st0">'town/js/src/*.js'</span><span class="sy0">,</span> load<span class="sy0">:</span> <span class="kw2">false</span> <span class="br0">&#125;</span><span class="sy0">,</span>
&nbsp; &nbsp; &nbsp; <span class="br0">&#123;</span> pattern<span class="sy0">:</span> <span class="st0">'town/js/test/test-main.js'</span> <span class="br0">&#125;</span>
&nbsp; &nbsp; <span class="br0">&#93;</span><span class="sy0">,</span>
&nbsp;
&nbsp; &nbsp; tests<span class="sy0">:</span> <span class="br0">&#91;</span>
&nbsp; &nbsp; &nbsp; <span class="br0">&#123;</span> pattern<span class="sy0">:</span> <span class="st0">'town/js/test/*.spec.js'</span><span class="sy0">,</span> load<span class="sy0">:</span> <span class="kw2">false</span> <span class="br0">&#125;</span><span class="sy0">,</span>
&nbsp; &nbsp; <span class="br0">&#93;</span><span class="sy0">,</span>
&nbsp;
&nbsp; &nbsp; testFramework<span class="sy0">:</span> <span class="st0">'jasmine'</span>
&nbsp; <span class="br0">&#125;</span><span class="sy0">;</span>
<span class="br0">&#125;</span><span class="sy0">;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">module.exports = function (wallaby) {
  return {
    files: [
      { pattern: 'town/js/lib/require-2.1.11.js', instrument: false },
      { pattern: 'town/js/lib/*.js', load: false },
      { pattern: 'town/js/src/*.js', load: false },
      { pattern: 'town/js/test/test-main.js' }
    ],

    tests: [
      { pattern: 'town/js/test/*.spec.js', load: false },
    ],

    testFramework: 'jasmine'
  };
};</pre></div></div>

<p>This identifies all the files and tests for wallaby, but tells it not to actually load anything but RequireJS and and my RequireJS configuration (tets-main.js).</p>
<p>Currently, my test main is focused on running karma, but we can easily switch it to be able to run either.</p>
<p><b>test-main.js</b></p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="javascript"><thead><tr><td colspan="2"  class="head">Javascript</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
</pre></td><td class="de1"><pre class="de1"><span class="kw1">var</span> tests <span class="sy0">=</span> <span class="br0">&#91;</span><span class="br0">&#93;</span><span class="sy0">;</span>
&nbsp;
<span class="kw1">var</span> baseUrl <span class="sy0">=</span> <span class="st0">''</span><span class="sy0">;</span>
<span class="kw1">var</span> isUsingKarma <span class="sy0">=</span> <span class="br0">&#40;</span>window.__karma__ <span class="sy0">!=</span> <span class="kw2">undefined</span><span class="br0">&#41;</span><span class="sy0">;</span>
<span class="kw1">var</span> isUsingWallaby <span class="sy0">=</span> <span class="br0">&#40;</span>wallaby <span class="sy0">!=</span> <span class="kw2">undefined</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
<span class="kw1">if</span><span class="br0">&#40;</span>isUsingKarma<span class="br0">&#41;</span><span class="br0">&#123;</span>
&nbsp; baseUrl <span class="sy0">=</span> <span class="st0">'/base/src'</span><span class="sy0">;</span>
&nbsp; <span class="kw1">for</span> <span class="br0">&#40;</span><span class="kw1">var</span> file <span class="kw1">in</span> window.__karma__.<span class="me1">files</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; <span class="kw1">if</span> <span class="br0">&#40;</span>window.__karma__.<span class="me1">files</span>.<span class="kw3">hasOwnProperty</span><span class="br0">&#40;</span>file<span class="br0">&#41;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; <span class="kw1">if</span> <span class="br0">&#40;</span><span class="co2">/spec\.js$/</span>.<span class="me1">test</span><span class="br0">&#40;</span>file<span class="br0">&#41;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; tests.<span class="me1">push</span><span class="br0">&#40;</span>file<span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp; <span class="br0">&#125;</span>
<span class="br0">&#125;</span>
<span class="kw1">else</span> <span class="kw1">if</span><span class="br0">&#40;</span>isUsingWallaby<span class="br0">&#41;</span><span class="br0">&#123;</span>
&nbsp; baseUrl <span class="sy0">=</span> <span class="st0">'/town/js/src'</span><span class="sy0">;</span>
&nbsp; wallaby.<span class="me1">delayStart</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; tests <span class="sy0">=</span> wallaby.<span class="me1">tests</span><span class="sy0">;</span> &nbsp;
<span class="br0">&#125;</span>
&nbsp;
requirejs.<span class="me1">config</span><span class="br0">&#40;</span><span class="br0">&#123;</span>
&nbsp; <span class="co1">// Karma serves files from '/base'</span>
&nbsp; baseUrl<span class="sy0">:</span> baseUrl<span class="sy0">,</span>
&nbsp;
&nbsp; paths<span class="sy0">:</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; <span class="st0">&quot;knockout&quot;</span><span class="sy0">:</span> <span class="st0">&quot;../lib/knockout-3.0.0&quot;</span><span class="sy0">,</span>
&nbsp; &nbsp; <span class="st0">&quot;Squire&quot;</span><span class="sy0">:</span> <span class="st0">&quot;../lib/Squire&quot;</span>
&nbsp; <span class="br0">&#125;</span>
<span class="br0">&#125;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
<span class="co1">// Let's get started!</span>
require<span class="br0">&#40;</span>tests<span class="sy0">,</span> <span class="kw1">function</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#123;</span>
&nbsp;
&nbsp; <span class="kw1">if</span><span class="br0">&#40;</span>isUsingKarma<span class="br0">&#41;</span>
&nbsp; &nbsp; window.__karma__.<span class="me1">start</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; <span class="kw1">else</span> <span class="kw1">if</span><span class="br0">&#40;</span>isUsingWallaby<span class="br0">&#41;</span>
&nbsp; &nbsp; wallaby.<span class="me1">start</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
<span class="br0">&#125;</span><span class="br0">&#41;</span><span class="sy0">;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">var tests = [];

var baseUrl = '';
var isUsingKarma = (window.__karma__ != undefined);
var isUsingWallaby = (wallaby != undefined);

if(isUsingKarma){
  baseUrl = '/base/src';
  for (var file in window.__karma__.files) {
    if (window.__karma__.files.hasOwnProperty(file)) {
      if (/spec\.js$/.test(file)) {
        tests.push(file);
      }
    }
  }
}
else if(isUsingWallaby){
  baseUrl = '/town/js/src';
  wallaby.delayStart();
  tests = wallaby.tests;  
}

requirejs.config({
  // Karma serves files from '/base'
  baseUrl: baseUrl,

  paths: {
    "knockout": "../lib/knockout-3.0.0",
    "Squire": "../lib/Squire"
  }
});

// Let's get started!
require(tests, function(){

  if(isUsingKarma)
  	window.__karma__.start();
  else if(isUsingWallaby)
    wallaby.start();

});</pre></div></div>

<p>The key parts are to ensure I delay wallaby to start, set the test collection and baseUrl for requireJS, then start the tests inside a require statement at the end.</p>
<p><i>Note: I did manage to completely lock up Visual Studio Code while updating the test-main file, but I&#8217;m not sure if that was VS Code&#8217;s fault or Wallaby&#8217;s</i></p>
<p>And there we go. As I type my code in the editor, I get instant notifications of errors (including some handy hover boxes with details) and my test markers turn green/red as I fix and break tests.</p>
<p>Here is the working code:<br />
<div id="attachment_4678" style="width: 810px" class="wp-caption alignleft"><a href="/wp-content/uploads/2016/10/PassingTests.png"><img src="/wp-content/uploads/2016/10/PassingTests-1024x338.png" alt="Passing Tests w/ Inline Markers and Wallaby Console" width="800"" class="size-large wp-image-4678" srcset="/wp-content/uploads/2016/10/PassingTests-1024x338.png 1024w, /wp-content/uploads/2016/10/PassingTests-300x99.png 300w" sizes="(max-width: 1024px) 100vw, 1024px" /></a><p class="wp-caption-text">Passing Tests w/ Inline Markers and Wallaby Console</p></div></p>
<p>and now when I add a &#8220;+ 1&#8221; to the end of the line without even saving the file, the test marker turns red and I get instant results in the console below:<br />
<div id="attachment_4679" style="width: 810px" class="wp-caption alignleft"><a href="/wp-content/uploads/2016/10/FailingTests.png"><img src="/wp-content/uploads/2016/10/FailingTests-1024x436.png" alt="Failing Tests - Red Marker, Clickable Console Details" width="800" class="size-large wp-image-4679" srcset="/wp-content/uploads/2016/10/FailingTests-1024x436.png 1024w, /wp-content/uploads/2016/10/FailingTests-300x127.png 300w" sizes="(max-width: 1024px) 100vw, 1024px" /></a><p class="wp-caption-text">Failing Tests &#8211; Red Marker, Clickable Console Details</p></div></p>
<p>This is much closer to the experience you get with NCrunch and Visual Studio Code is actually a more limited wallaby experience than other editors. The setup was quicker than karma, even though I&#8217;ve setup karma more times. If you work in Javascript daily, this is definitely worth a long look.</p>
]]></content:encoded>
			<wfw:commentRss>/index.php/webdev/continuous-javascript-test-execution-with-wallabyjs/feed/</wfw:commentRss>
		<slash:comments>0</slash:comments>
		</item>
		<item>
		<title>Bundling with the RequireJS Optimizer</title>
		<link>/index.php/webdev/bundling-with-the-requirejs-optimizer/</link>
		<comments>/index.php/webdev/bundling-with-the-requirejs-optimizer/#respond</comments>
		<pubDate>Thu, 19 Feb 2015 11:50:58 +0000</pubDate>
		<dc:creator><![CDATA[Eli Weinstock-Herman (tarwn)]]></dc:creator>
				<category><![CDATA[Javascript]]></category>
		<category><![CDATA[Web Developer]]></category>
		<category><![CDATA[javascript]]></category>
		<category><![CDATA[requirejs]]></category>

		<guid isPermaLink="false">/?p=3171</guid>
		<description><![CDATA[When we build sites using an AMD library like RequireJS, we will have a long list of files that need to be downloaded when someone uses the site. More files means more trips to the server and more download time. Minifying files and using gzip can speed up the download times, but neither affects the [&#8230;]]]></description>
				<content:encoded><![CDATA[<p>When we build sites using an AMD library like <a href="http://requirejs.org/">RequireJS</a>, we will have a long list of files that need to be downloaded when someone uses the site. More files means more trips to the server and more download time. Minifying files and using gzip can speed up the download times, but neither affects the Round Trip Time (RTT) that even a cache validation incurs, clogging up a request pipeline just to ask the server if an ETag or last modified date is still valid.</p>
<p>So let&#8217;s see one way we can improve things, with small (14 requests) and larger (194 requests) page loads as an example.</p>
<h2>RequireJS Bundling</h2>
<p>There are several different ways you can bundle scripts with RequireJS, but I wanted to start out exploring their <a href="http://requirejs.org/docs/optimization.html">optimizer</a>. The advantage of using the optimizer is that it can intelligently trace the module dependencies and include them for me rather than requiring me to figure out all the dependencies and ensure I bundle them up in the right grouping and order.</p>
<p>I started with a very small application just to play around and see what the impact would be. It consists of an HTML page, a couple 3rd party libraries, and 10 JS files I wrote. On loading the page, it uses a require statement to load two of the files (and thus all of their dependencies). My plan is to build a replacement set so I can load a single file and have it also load in all of the dependencies, in the right order to prevent independent network requests for other dependencies.</p>
<p>Sample Site Structure:</p>
<pre>town/
   index.html
   js/
      lib/
         jquery.js
         knockout.js
         require.js
         Squire.js
         jasmine/
            ... jasmine files ...
      src/
         app.js
         ... 9 more hand-written files ...
      test/
         ... several JS spec files ...
   styles/
         ... css file ...
   images/
         ... image files ...
tools/
   r.js
   ... my config will go here ...
js-built/ 
   ... bundle + minified files will be created here ...</pre>
<p>This project also has some test files mixed in both the lib folder and a parallel test folder, which we want to exclude from processing at all (on a larger project this would be going through a build process, no point eating up CPU time minifying files that will never go to production).</p>
<p>You can feed the optimizer either command-line options or an options file, I suggest putting everything in a configuration file for repeatability (and readability).</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="javascript"><thead><tr><td colspan="2"  class="head">Javascript</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
</pre></td><td class="de1"><pre class="de1"><span class="br0">&#123;</span>
&nbsp; &nbsp; appDir<span class="sy0">:</span> <span class="st0">'../town/js'</span><span class="sy0">,</span>
&nbsp; &nbsp; baseUrl<span class="sy0">:</span> <span class="st0">'src'</span><span class="sy0">,</span>
&nbsp; &nbsp; paths<span class="sy0">:</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; knockout<span class="sy0">:</span> <span class="st0">'../lib/knockout-3.0.0'</span>
&nbsp; &nbsp; <span class="br0">&#125;</span><span class="sy0">,</span>
&nbsp; &nbsp; dir<span class="sy0">:</span> <span class="st0">'../js-built'</span><span class="sy0">,</span>
&nbsp; &nbsp; fileExclusionRegExp<span class="sy0">:</span> <span class="co2">/(^test|Squire|jasmine|require)/</span><span class="sy0">,</span>
&nbsp; &nbsp; modules<span class="sy0">:</span> <span class="br0">&#91;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; name<span class="sy0">:</span> <span class="st0">'app'</span><span class="sy0">,</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; include<span class="sy0">:</span> <span class="br0">&#91;</span><span class="st0">'app'</span><span class="sy0">,</span> <span class="st0">'townViewModel'</span><span class="br0">&#93;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp; &nbsp; <span class="br0">&#93;</span>
<span class="br0">&#125;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">{
    appDir: '../town/js',
    baseUrl: 'src',
    paths: {
        knockout: '../lib/knockout-3.0.0'
    },
    dir: '../js-built',
    fileExclusionRegExp: /(^test|Squire|jasmine|require)/,
    modules: [
        {
            name: 'app',
            include: ['app', 'townViewModel']
        }
    ]
}</pre></div></div>

<p>The optimizer produces a new &#8220;app.js&#8221; file for me in the js-built folder and I can copy that over my existing source file. Notice how I did not have to define every single file, the optimizer will take the two modules in the &#8220;include&#8221; and trace all of their dependencies for me. There is also an option to exclude individual files or other defined bundles.</p>
<p>Config Translation:</p>
<ul>
<li>appDir: The path to the js file, relative to the tools directory where r.js lives (not relative to where we execute node from)</li>
<li>baseUrl: Base URL used for RequireJs modules, relative to that appdir (Further note below)</li>
<li>paths: RequireJS paths (had I been using a config file w/ RequireJS, I could have supplied that instead of redefining paths here)</li>
<li>dir: Output directory (also the working directory for the optimizer), relative to the r.js file again</li>
<li>fileExclusionRegExp: the optimizer ignores any file or directory that matches this regular expression (Further note below)</li>
<li>modules: an array of modules to build, which can depend on earlier modules (this is a small app so I put everything in a single module)</li>
</ul>
<p>As I worked with this smaller example and a much larger one, here are some issues I ran into:</p>
<ul>
<li>appDir: I ran into problems defining appDir too deeply and had to define it at the shared higher level (but only on the larger project, so this may be a side effect of the next item)</li>
<li>paths: On the larger project I had a number of paths defined with a starting slash, which works fine for a site but the optimizer translates as &#8220;look on the root of the drive&#8221;, not seeing any reason for those to be root paths, I fixed them in my main RequireJS config to be relative</li>
<li>fileExclusionRegExp: I attempted to invert this into an opt-in list using negative lookaheads, but was unable to get it to match more than one value for lookaheads, despite testing the expression elsewhere</li>
<li>optimize: can be used to turn off minification, which was necessary before I figured out how to filter out some 3rd party files that the optimizer would exit with an error over</li>
</ul>
<p>I did run into some other issues, here and there, but unfortunately was not keeping track of them at the time.</p>
<h2>Results</h2>
<p>To work around the &#8220;localhost is crazy fast&#8221; issue, we can use Chrome to load sites with throttled connections (Dev Tools, Toggle Device mode with the phone icon, change the Network dropdown). For these results I used the 3G option (100 RTT), which is only about 10% slower than the ping from my house to my personal website and at 750kbps, matches the type of shared bandwidth people might see if their company is keeping costs low and over-utilizing a cheaper internet connection. Improvements we make for our slower visitors only makes the experience that much better for our faster ones.</p>
<h3>Sample Site Results</h3>
<p>I ran the site with and without caching enabled, refreshing and capturing only the best possible result I saw. Here&#8217;s what I saw for the Vanilla site, with and without caching:</p>
<div id="attachment_3172" style="width: 510px" class="wp-caption aligncenter"><a href="/wp-content/uploads/2015/02/100RTT_Vanilla.png"><img src="/wp-content/uploads/2015/02/100RTT_Vanilla.png" alt="Small Sample Load - 100RTT/750kbps - Vanilla" width="451" height="30" class="size-full wp-image-3172" srcset="/wp-content/uploads/2015/02/100RTT_Vanilla.png 451w, /wp-content/uploads/2015/02/100RTT_Vanilla-300x19.png 300w" sizes="(max-width: 451px) 100vw, 451px" /></a><p class="wp-caption-text">Small Sample Load &#8211; 100RTT/750kbps &#8211; Vanilla</p></div>
<div id="attachment_3173" style="width: 510px" class="wp-caption aligncenter"><a href="/wp-content/uploads/2015/02/100RTT_Vanilla_Cache.png"><img src="/wp-content/uploads/2015/02/100RTT_Vanilla_Cache.png" alt="Small Sample Load - 100RTT/750kbps - Vanilla, Cached" width="447" height="23" class="size-full wp-image-3173" srcset="/wp-content/uploads/2015/02/100RTT_Vanilla_Cache.png 447w, /wp-content/uploads/2015/02/100RTT_Vanilla_Cache-300x15.png 300w" sizes="(max-width: 447px) 100vw, 447px" /></a><p class="wp-caption-text">Small Sample Site &#8211; 100RTT/750kbps &#8211; Vanilla Cached</p></div>
<p>After using the optimizer (bundled and minified), the best results I received were:</p>
<div id="attachment_3174" style="width: 510px" class="wp-caption aligncenter"><a href="/wp-content/uploads/2015/02/100RTT_BundledMinified.png"><img src="/wp-content/uploads/2015/02/100RTT_BundledMinified.png" alt="Small Sample Load - 100RTT/750kbps - Bundled, Minified" width="446" height="26" class="size-full wp-image-3174" srcset="/wp-content/uploads/2015/02/100RTT_BundledMinified.png 446w, /wp-content/uploads/2015/02/100RTT_BundledMinified-300x17.png 300w" sizes="(max-width: 446px) 100vw, 446px" /></a><p class="wp-caption-text">Small Sample Load &#8211; 100RTT/750kbps &#8211; Bundled, Minified</p></div>
<div id="attachment_3175" style="width: 510px" class="wp-caption aligncenter"><a href="/wp-content/uploads/2015/02/100RTT_BundledMinified_Cache.png"><img src="/wp-content/uploads/2015/02/100RTT_BundledMinified_Cache.png" alt="Small Sample Load - 100RTT/750kbps - Bundled, Minified, Cached" width="436" height="23" class="size-full wp-image-3175" srcset="/wp-content/uploads/2015/02/100RTT_BundledMinified_Cache.png 436w, /wp-content/uploads/2015/02/100RTT_BundledMinified_Cache-300x15.png 300w" sizes="(max-width: 436px) 100vw, 436px" /></a><p class="wp-caption-text">Small Sample Load &#8211; 100RTT/750kbps &#8211; Bundled, Minified, Cached</p></div>
<p>The best vanilla load was 14 requests at 1.88 seconds, with a best cache time of 456ms. The optimized version reduced this to 4 requests at 1.44 seconds, with a best cache of 311ms.</p>
<h3>Larger Site Results</h3>
<p>While there was a visible difference in the small site, I also wanted to see what would happen in a larger example. The larger site has almost 200 requests, including AJAX calls to an external API and numerous image and CSS resources that have not been optimized yet. Like the small example above, we are not using gzip in this example. Using the same 100RTT setting in chrome (which also impacts us more in this case, due to the 750kbps speed), here are before and after timings:</p>
<div id="attachment_3180" style="width: 510px" class="wp-caption aligncenter"><a href="/wp-content/uploads/2015/02/Large_100RTT_Vanilla.png"><img src="/wp-content/uploads/2015/02/Large_100RTT_Vanilla.png" alt="Large Sample Load - 100RTT/750kbps - Vanilla" width="447" class="size-full wp-image-3180" srcset="/wp-content/uploads/2015/02/Large_100RTT_Vanilla.png 894w, /wp-content/uploads/2015/02/Large_100RTT_Vanilla-300x14.png 300w" sizes="(max-width: 894px) 100vw, 894px" /></a><p class="wp-caption-text">Large Sample Load &#8211; 100RTT/750kbps &#8211; Vanilla</p></div>
<div id="attachment_3181" style="width: 510px" class="wp-caption aligncenter"><a href="/wp-content/uploads/2015/02/Large_100RTT_Vanilla_Cached.png"><img src="/wp-content/uploads/2015/02/Large_100RTT_Vanilla_Cached.png" alt="Large Sample Load - 100RTT/750kbps - Vanilla, Cached" width="438" class="size-full wp-image-3181" srcset="/wp-content/uploads/2015/02/Large_100RTT_Vanilla_Cached.png 877w, /wp-content/uploads/2015/02/Large_100RTT_Vanilla_Cached-300x18.png 300w" sizes="(max-width: 877px) 100vw, 877px" /></a><p class="wp-caption-text">Large Sample Load &#8211; 100RTT/750kbps &#8211; Vanilla, Cached</p></div>
<p>After using the optimizer to create 2 minified bundles:</p>
<div id="attachment_3178" style="width: 510px" class="wp-caption aligncenter"><a href="/wp-content/uploads/2015/02/Large_100RTT_BundledMinified.png"><img src="/wp-content/uploads/2015/02/Large_100RTT_BundledMinified.png" alt="Large Sample Load - 100RTT/750kbps - Bundled, Minified" width="438" class="size-full wp-image-3178" srcset="/wp-content/uploads/2015/02/Large_100RTT_BundledMinified.png 877w, /wp-content/uploads/2015/02/Large_100RTT_BundledMinified-300x16.png 300w" sizes="(max-width: 877px) 100vw, 877px" /></a><p class="wp-caption-text">Large Sample Load &#8211; 100RTT/750kbps &#8211; Bundled, Minified</p></div>
<div id="attachment_3179" style="width: 510px" class="wp-caption aligncenter"><a href="/wp-content/uploads/2015/02/Large_100RTT_BundledMinified_Cached.png"><img src="/wp-content/uploads/2015/02/Large_100RTT_BundledMinified_Cached.png" alt="Large Sample Load - 100RTT/750kbps - Bundled, Minified, Cached" width="429" class="size-full wp-image-3179" srcset="/wp-content/uploads/2015/02/Large_100RTT_BundledMinified_Cached.png 858w, /wp-content/uploads/2015/02/Large_100RTT_BundledMinified_Cached-300x14.png 300w" sizes="(max-width: 858px) 100vw, 858px" /></a><p class="wp-caption-text">Large Sample Load &#8211; 100RTT/750kbps &#8211; Bundled, Minified, Cached</p></div>
<p>The best vanilla load is 194 requests at 16.18s, which drops to 2.91 seconds with cache. With bundling and minification, that drops to 31 requests at 10.3 seconds, which drops to 27 requests and 2.89 seconds with cache.</p>
<p>The configuration for this site continued to be almost as light-weight as the small sample site above, so despite the number of files increasing by greater than an order of magnitude, the ability for the optimizer to trace those dependencies for me meant that I was able to bundle all of these files with a configuration that was only about twice as long as the small sample site above.</p>
]]></content:encoded>
			<wfw:commentRss>/index.php/webdev/bundling-with-the-requirejs-optimizer/feed/</wfw:commentRss>
		<slash:comments>0</slash:comments>
		</item>
		<item>
		<title>Continuous Javascript Testing with Karma</title>
		<link>/index.php/webdev/uidevelopment/javascript/continuous-javascript-testing-with-karma/</link>
		<comments>/index.php/webdev/uidevelopment/javascript/continuous-javascript-testing-with-karma/#comments</comments>
		<pubDate>Thu, 03 Apr 2014 15:27:39 +0000</pubDate>
		<dc:creator><![CDATA[Eli Weinstock-Herman (tarwn)]]></dc:creator>
				<category><![CDATA[Javascript]]></category>
		<category><![CDATA[Unit Testing]]></category>
		<category><![CDATA[jasmine]]></category>
		<category><![CDATA[javascript]]></category>
		<category><![CDATA[karma]]></category>
		<category><![CDATA[requirejs]]></category>

		<guid isPermaLink="false">/?p=2483</guid>
		<description><![CDATA[I use a continuous testing tool named NCrunch for all of my .Net code. In fact, NCrunch has spoiled me so much that manually running tests is bordering on painful. I&#8217;ve gotten used to doing absolutely nothing and still having the latest build results, test results, code coverage, highlighted execution paths for failed tests, and [&#8230;]]]></description>
				<content:encoded><![CDATA[<p>I use a continuous testing tool named <a href="http://www.ncrunch.net/">NCrunch</a> for all of my .Net code. In fact,  <a href="/index.php/enterprisedev/unittest/reducing-code-build-test-friction/">NCrunch has spoiled me</a> so much that manually running tests is bordering on painful. I&#8217;ve gotten used to doing absolutely nothing and still having the latest build results, test results, code coverage, highlighted execution paths for failed tests, and little hover notices on each line that passed an exception. Make a change, magic happens. All coding should work like that.</p>
<p>The AngularJS team has built a continuous javascript testrunner named <a href="http://karma-runner.github.io/">karma</a>, so of course I&#8217;m going to give it a try. </p>
<p>At the time of this post, the current version is 0.12 and I will be using Jasmine 2.0 (<a href="/index.php/webdev/uidevelopment/javascript/testing-asynchronous-javascript-w-jasmine/" title="Testing Asynchronous Javascript w/ Jasmine 2.0.0">woo, Async!</a>), RequireJS (also a <a href="/index.php/webdev/uidevelopment/javascript/unit-testing-with-jasmine-2-0-and-require-js/" title="Unit Testing with Jasmine 2.0 and Require.JS">recent topic</a>), and <a href="https://github.com/iammerrick/Squire.js/" title="iammerrick/Squire.js on github">Squire.js</a> (for injecting mocks). The sample project I&#8217;m using for demos is just something that was handy that already had some tests.</p>
<h1>Setting up Karma</h1>
<p>Setting up karma is pretty straightforward. The karma site has clear information already on how to <a href="http://karma-runner.github.io/0.12/intro/installation.html" title="Karma - Installation">install the package</a> and <a href="http://karma-runner.github.io/0.10/intro/configuration.html" title="Karma - Configuration">set up the configuration</a>, so I&#8217;m not going to go into the details on that.</p>
<p>One minor variance is that I chose to install karma local to my project rather than globally, so I&#8217;ll have to run the tools from the node_modules subdirectory.</p>
<p>I created a package.json file for my project:</p>
<p><b>package.json: </b> <a href="https://github.com/tarwn/townthing/blob/master/package.json">townthing/package.json</a></p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="javascript"><thead><tr><td colspan="2"  class="head">Javascript</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
</pre></td><td class="de1"><pre class="de1"><span class="br0">&#123;</span>
&nbsp; &nbsp; <span class="st0">&quot;name&quot;</span><span class="sy0">:</span> <span class="st0">&quot;townthing&quot;</span><span class="sy0">,</span>
&nbsp; &nbsp; <span class="st0">&quot;version&quot;</span><span class="sy0">:</span> <span class="st0">&quot;0.1.0&quot;</span><span class="sy0">,</span>
&nbsp; &nbsp; <span class="st0">&quot;description&quot;</span><span class="sy0">:</span> <span class="st0">&quot;sample project I'm playing with&quot;</span><span class="sy0">,</span>
&nbsp; &nbsp; <span class="st0">&quot;repository&quot;</span><span class="sy0">:</span> <span class="st0">&quot;https://github.com/tarwn/townthing&quot;</span><span class="sy0">,</span>
&nbsp;
&nbsp; &nbsp; <span class="st0">&quot;devDependencies&quot;</span><span class="sy0">:</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="st0">&quot;karma&quot;</span><span class="sy0">:</span> <span class="st0">&quot;~0.11&quot;</span><span class="sy0">,</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="st0">&quot;karma-jasmine&quot;</span><span class="sy0">:</span> <span class="st0">&quot;~0.2&quot;</span><span class="sy0">,</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="st0">&quot;karma-phantomjs-launcher&quot;</span><span class="sy0">:</span> <span class="st0">&quot;~0.1&quot;</span><span class="sy0">,</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="st0">&quot;karma-chrome-launcher&quot;</span><span class="sy0">:</span> <span class="st0">&quot;~0.1&quot;</span>
&nbsp; &nbsp; <span class="br0">&#125;</span>
<span class="br0">&#125;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">{
	"name": "townthing",
	"version": "0.1.0",
	"description": "sample project I'm playing with",
	"repository": "https://github.com/tarwn/townthing",

	"devDependencies": {
		"karma": "~0.11",
		"karma-jasmine": "~0.2",
		"karma-phantomjs-launcher": "~0.1",
		"karma-chrome-launcher": "~0.1"
	}
}</pre></div></div>

<div style="background-color: #eeeeee; padding: .5em;">
<b>Important Note:</b> Be careful with your versions. I&#8217;ve found out the hard way that karma keeps their dependencies wide open &#8220;*&#8221; until they are ready to move versions, then they lock them down to something that may not actually be the latest version. Karma 0.10 worked fine with karma-jasmine 0.2 until they released 0.10.10 which locked in a requirement for karma-jasmine ~0.1. More recently the karma-phantomjs-launcher has revved to 1.3, which somehow broke a perfectly working 0.12 karma against 1.2 despite there being no actual code changes (I suspect a versioning side-effect mixed with their *-version acceptance).
</div>
<p>And then go through the steps to create my karma configuration:<br />
<b>karma.conf.js: </b> <a href="https://github.com/tarwn/townthing/blob/master/karma.conf.js">townthing/karma.conf.js</a></p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="javascript"><thead><tr><td colspan="2"  class="head">Javascript</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
</pre></td><td class="de1"><pre class="de1">module.<span class="me1">exports</span> <span class="sy0">=</span> <span class="kw1">function</span><span class="br0">&#40;</span>config<span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; config.<span class="kw1">set</span><span class="br0">&#40;</span><span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; basePath<span class="sy0">:</span> <span class="st0">'town/js'</span><span class="sy0">,</span>
&nbsp; &nbsp; &nbsp; &nbsp; frameworks<span class="sy0">:</span> <span class="br0">&#91;</span><span class="st0">'jasmine'</span><span class="sy0">,</span> <span class="st0">'requirejs'</span><span class="br0">&#93;</span><span class="sy0">,</span>
&nbsp; &nbsp; &nbsp; &nbsp; files<span class="sy0">:</span> <span class="br0">&#91;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="st0">'test/test-main.js'</span><span class="sy0">,</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#123;</span>pattern<span class="sy0">:</span> <span class="st0">'**/*.js'</span><span class="sy0">,</span> included<span class="sy0">:</span> <span class="kw2">false</span><span class="br0">&#125;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#93;</span><span class="sy0">,</span>
&nbsp; &nbsp; &nbsp; &nbsp; exclude<span class="sy0">:</span> <span class="br0">&#91;</span> <span class="st0">'**/main.js'</span> <span class="br0">&#93;</span><span class="sy0">,</span>
&nbsp; &nbsp; &nbsp; &nbsp; reporters<span class="sy0">:</span> <span class="br0">&#91;</span><span class="st0">'dots'</span><span class="br0">&#93;</span><span class="sy0">,</span>
&nbsp; &nbsp; &nbsp; &nbsp; port<span class="sy0">:</span> <span class="nu0">9876</span><span class="sy0">,</span>
&nbsp; &nbsp; &nbsp; &nbsp; colors<span class="sy0">:</span> <span class="kw2">true</span><span class="sy0">,</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="co1">// possible values: config.LOG_DISABLE || config.LOG_ERROR || config.LOG_WARN || config.LOG_INFO || config.LOG_DEBUG</span>
&nbsp; &nbsp; &nbsp; &nbsp; logLevel<span class="sy0">:</span> config.<span class="me1">LOG_DEBUG</span><span class="sy0">,</span>
&nbsp; &nbsp; &nbsp; &nbsp; autoWatch<span class="sy0">:</span> <span class="kw2">true</span><span class="sy0">,</span>
&nbsp; &nbsp; &nbsp; &nbsp; browsers<span class="sy0">:</span> <span class="br0">&#91;</span><span class="st0">'PhantomJS'</span><span class="br0">&#93;</span><span class="sy0">,</span>
&nbsp; &nbsp; &nbsp; &nbsp; captureTimeout<span class="sy0">:</span> <span class="nu0">60000</span><span class="sy0">,</span>
&nbsp; &nbsp; &nbsp; &nbsp; singleRun<span class="sy0">:</span> <span class="kw2">false</span>
&nbsp; &nbsp; <span class="br0">&#125;</span><span class="br0">&#41;</span><span class="sy0">;</span>
<span class="br0">&#125;</span><span class="sy0">;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">module.exports = function(config) {
	config.set({
		basePath: 'town/js',
		frameworks: ['jasmine', 'requirejs'],
		files: [
		  'test/test-main.js',
		  {pattern: '**/*.js', included: false}
		],
		exclude: [ '**/main.js' ],
		reporters: ['dots'],
		port: 9876,
		colors: true,
		// possible values: config.LOG_DISABLE || config.LOG_ERROR || config.LOG_WARN || config.LOG_INFO || config.LOG_DEBUG
		logLevel: config.LOG_DEBUG,
		autoWatch: true,
		browsers: ['PhantomJS'],
		captureTimeout: 60000,
		singleRun: false
	});
};</pre></div></div>

<p>I already had a set of 68 specs configured to run from my SpecRunner file, with my Require.js configuration specified inline. Before I co-opted this project as a blog example, the tests were specified in script tags, but I have moved them to a require() statement and used the custom boot script created for my <a href="/index.php/webdev/uidevelopment/javascript/unit-testing-with-jasmine-2-0-and-require-js/">Jasmine 2.0 and RequireJS post</a>.</p>
<p><b>SpecRunner:</b> <a href="https://github.com/tarwn/townthing/blob/54f182bf96ff036a8765f421884d465d890c598c/town/js/test/SpecRunner.html">townthing/js/test/SpecRunner.json</a></p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="html4strict"><thead><tr><td colspan="2"  class="head">HTML</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
</pre></td><td class="de1"><pre class="de1"><span class="sc0">&lt;!DOCTYPE HTML&gt;</span>
<span class="sc2">&lt;<span class="kw2">html</span>&gt;</span>
<span class="sc2">&lt;<span class="kw2">head</span>&gt;</span>
&nbsp; &nbsp; <span class="sc2">&lt;<span class="kw2">meta</span> <span class="kw3">http-equiv</span><span class="sy0">=</span><span class="st0">&quot;Content-Type&quot;</span> <span class="kw3">content</span><span class="sy0">=</span><span class="st0">&quot;text/html; charset=UTF-8&quot;</span>&gt;</span>
&nbsp; &nbsp; <span class="sc2">&lt;<span class="kw2">title</span>&gt;</span>Jasmine Spec Runner v2.0.0<span class="sc2">&lt;<span class="sy0">/</span><span class="kw2">title</span>&gt;</span>
&nbsp;
&nbsp; &nbsp; <span class="sc2">&lt;<span class="kw2">link</span> <span class="kw3">rel</span><span class="sy0">=</span><span class="st0">&quot;shortcut icon&quot;</span> <span class="kw3">type</span><span class="sy0">=</span><span class="st0">&quot;image/png&quot;</span> <span class="kw3">href</span><span class="sy0">=</span><span class="st0">&quot;../lib/jasmine-2.0.0/jasmine_favicon.png&quot;</span>&gt;</span>
&nbsp; &nbsp; <span class="sc2">&lt;<span class="kw2">link</span> <span class="kw3">rel</span><span class="sy0">=</span><span class="st0">&quot;stylesheet&quot;</span> <span class="kw3">type</span><span class="sy0">=</span><span class="st0">&quot;text/css&quot;</span> <span class="kw3">href</span><span class="sy0">=</span><span class="st0">&quot;../lib/jasmine-2.0.0/jasmine.css&quot;</span>&gt;</span>
&nbsp;
&nbsp; &nbsp; <span class="sc2">&lt;<span class="kw2">script</span> <span class="kw3">type</span><span class="sy0">=</span><span class="st0">&quot;text/javascript&quot;</span> <span class="kw3">src</span><span class="sy0">=</span><span class="st0">&quot;../lib/jasmine-2.0.0/jasmine.js&quot;</span>&gt;&lt;<span class="sy0">/</span><span class="kw2">script</span>&gt;</span>
&nbsp; &nbsp; <span class="sc2">&lt;<span class="kw2">script</span> <span class="kw3">type</span><span class="sy0">=</span><span class="st0">&quot;text/javascript&quot;</span> <span class="kw3">src</span><span class="sy0">=</span><span class="st0">&quot;../lib/jasmine-2.0.0/jasmine-html.js&quot;</span>&gt;&lt;<span class="sy0">/</span><span class="kw2">script</span>&gt;</span>
&nbsp; &nbsp; <span class="sc2">&lt;<span class="kw2">script</span> <span class="kw3">type</span><span class="sy0">=</span><span class="st0">&quot;text/javascript&quot;</span> <span class="kw3">src</span><span class="sy0">=</span><span class="st0">&quot;../lib/jasmine-2.0.0/boot-without-onload.js&quot;</span>&gt;&lt;<span class="sy0">/</span><span class="kw2">script</span>&gt;</span>
&nbsp;
&nbsp; &nbsp; <span class="sc2">&lt;<span class="kw2">script</span> <span class="kw3">src</span><span class="sy0">=</span><span class="st0">&quot;../lib/require-2.1.11.js&quot;</span>&gt;&lt;<span class="sy0">/</span><span class="kw2">script</span>&gt;</span>
&nbsp;
&nbsp; &nbsp; <span class="sc2">&lt;<span class="kw2">script</span> <span class="kw3">type</span><span class="sy0">=</span><span class="st0">&quot;text/javascript&quot;</span>&gt;</span>
&nbsp; &nbsp; require.config({
&nbsp; &nbsp; &nbsp; &nbsp; baseUrl: &quot;../src&quot;,
&nbsp; &nbsp; &nbsp; &nbsp; paths: {
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;knockout&quot;: &quot;../lib/knockout-3.0.0&quot;,
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;Squire&quot;: &quot;../lib/Squire&quot;
&nbsp; &nbsp; &nbsp; &nbsp; }
&nbsp; &nbsp; });
&nbsp;
&nbsp; &nbsp; require(['../test/compass.spec', '../test/tile.spec', '../test/tree.spec', '../test/weather.spec'],function(){
&nbsp; &nbsp; &nbsp; &nbsp; window.executeTests();
&nbsp; &nbsp; });
&nbsp; &nbsp; <span class="sc2">&lt;<span class="sy0">/</span><span class="kw2">script</span>&gt;</span>
<span class="sc2">&lt;<span class="sy0">/</span><span class="kw2">head</span>&gt;</span>
<span class="sc2">&lt;<span class="kw2">body</span>&gt;</span>
<span class="sc2">&lt;<span class="sy0">/</span><span class="kw2">body</span>&gt;</span>
<span class="sc2">&lt;<span class="sy0">/</span><span class="kw2">html</span>&gt;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">&lt;!DOCTYPE HTML&gt;
&lt;html&gt;
&lt;head&gt;
	&lt;meta http-equiv="Content-Type" content="text/html; charset=UTF-8"&gt;
	&lt;title&gt;Jasmine Spec Runner v2.0.0&lt;/title&gt;

	&lt;link rel="shortcut icon" type="image/png" href="../lib/jasmine-2.0.0/jasmine_favicon.png"&gt;
	&lt;link rel="stylesheet" type="text/css" href="../lib/jasmine-2.0.0/jasmine.css"&gt;

	&lt;script type="text/javascript" src="../lib/jasmine-2.0.0/jasmine.js"&gt;&lt;/script&gt;
	&lt;script type="text/javascript" src="../lib/jasmine-2.0.0/jasmine-html.js"&gt;&lt;/script&gt;
	&lt;script type="text/javascript" src="../lib/jasmine-2.0.0/boot-without-onload.js"&gt;&lt;/script&gt;

	&lt;script src="../lib/require-2.1.11.js"&gt;&lt;/script&gt;

	&lt;script type="text/javascript"&gt;
	require.config({
		baseUrl: "../src",
		paths: {
			"knockout": "../lib/knockout-3.0.0",
			"Squire": "../lib/Squire"
		}
	});

	require(['../test/compass.spec', '../test/tile.spec', '../test/tree.spec', '../test/weather.spec'],function(){
		window.executeTests();
	});
	&lt;/script&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;/body&gt;
&lt;/html&gt;</pre></div></div>

<p>The folder structure is a little odd, as this was originally just a play project. My test libraries are mixed with the core libraries and my specs and src have a flat structure. Were this a production project, I would also try to find a way to combine this inline config with the one below and generate the list of spec files instead of hand-coding them.</p>
<p>Because I am using RequireJS, I&#8217;ve included that option in my configuration and created a RequireJS configuration based on the one supplied in the <a href="http://karma-runner.github.io/0.10/plus/requirejs.html" title="Karma - RequireJS">RequireJS instructions</a> on the karma site.</p>
<p><b>test-main.js: </b> <a href="">townthing/town/js/test/test-main.js</a></p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="javascript"><thead><tr><td colspan="2"  class="head">Javascript</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
</pre></td><td class="de1"><pre class="de1"><span class="kw1">var</span> tests <span class="sy0">=</span> <span class="br0">&#91;</span><span class="br0">&#93;</span><span class="sy0">;</span>
<span class="kw1">for</span> <span class="br0">&#40;</span><span class="kw1">var</span> file <span class="kw1">in</span> window.__karma__.<span class="me1">files</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; <span class="kw1">if</span> <span class="br0">&#40;</span>window.__karma__.<span class="me1">files</span>.<span class="kw3">hasOwnProperty</span><span class="br0">&#40;</span>file<span class="br0">&#41;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">if</span> <span class="br0">&#40;</span><span class="co2">/spec\.js$/</span>.<span class="me1">test</span><span class="br0">&#40;</span>file<span class="br0">&#41;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; tests.<span class="me1">push</span><span class="br0">&#40;</span>file<span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp; &nbsp; <span class="br0">&#125;</span>
<span class="br0">&#125;</span>
&nbsp;
requirejs.<span class="me1">config</span><span class="br0">&#40;</span><span class="br0">&#123;</span>
&nbsp; &nbsp; <span class="co1">// Karma serves files from '/base'</span>
&nbsp; &nbsp; baseUrl<span class="sy0">:</span> <span class="st0">'/base/src'</span><span class="sy0">,</span>
&nbsp;
&nbsp; &nbsp; paths<span class="sy0">:</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="st0">&quot;knockout&quot;</span><span class="sy0">:</span> <span class="st0">&quot;../lib/knockout-3.0.0&quot;</span><span class="sy0">,</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="st0">&quot;Squire&quot;</span><span class="sy0">:</span> <span class="st0">&quot;../lib/Squire&quot;</span>
&nbsp; &nbsp; <span class="br0">&#125;</span>
<span class="br0">&#125;</span><span class="br0">&#41;</span><span class="sy0">;</span>
require<span class="br0">&#40;</span>tests<span class="sy0">,</span> <span class="kw1">function</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#123;</span>
&nbsp; &nbsp; window.__karma__.<span class="me1">start</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
<span class="br0">&#125;</span><span class="br0">&#41;</span><span class="sy0">;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">var tests = [];
for (var file in window.__karma__.files) {
	if (window.__karma__.files.hasOwnProperty(file)) {
		if (/spec\.js$/.test(file)) {
			tests.push(file);
		}
	}
}

requirejs.config({
    // Karma serves files from '/base'
    baseUrl: '/base/src',

	paths: {
		"knockout": "../lib/knockout-3.0.0",
		"Squire": "../lib/Squire"
	}
});
require(tests, function(){
	window.__karma__.start();
});</pre></div></div>

<p>The biggest difference between my script and the sample one is I am loading the tests and starting karma after the configuration, rather than inside it. I am using Squire to mock several of the RequireJS modules for tests, had I used the configuration to start karma then each time I created a new instal of Squire I would have kicked off conflicting runs when it ran the same configuration.</p>
<p>Running karma locally is then as easy as: <code>node .\node_modules\karma\bin\karma start karma.conf.js</code></p>
<p>It&#8217;s only a few more steps to create a single test-main.js that both the jasmine SpecRunner file and karma can share.</p>
<h1>The Results</h1>
<p>Once I have the configurations set up, my tests run successfully from karma. I have them configured to use PhantomJS, but can also override that by sending in command-line arguments to do a single-run in other browsers (like Chrome) when I need to troubleshoot.</p>
<p><code>node .\node_modules\karma\bin\karma start karma.conf.js --single-run</code></p>
<div id="attachment_2492" style="width: 577px" class="wp-caption aligncenter"><a href="/wp-content/uploads/2014/03/karma.png"><img src="/wp-content/uploads/2014/03/karma.png" alt="Successful Tests w/ Non-Impacting Errors" width="567" class="size-full wp-image-2492" srcset="/wp-content/uploads/2014/03/karma.png 567w, /wp-content/uploads/2014/03/karma-300x113.png 300w" sizes="(max-width: 567px) 100vw, 567px" /></a><p class="wp-caption-text">Successful Tests w/ Non-Impacting Errors</p></div>
<p>I was getting errors about missing timestamps when Squire loads some of the dependencies, but the files are found so I&#8217;m not sure why they are occurring (and they don&#8217;t happen on one of my other projects). I found a similar <a href="https://github.com/princed/karma-chai-plugins/issues/4">issue</a> and <a href="http://stackoverflow.com/questions/20733090/karma-error-there-is-no-timestamp-for">stackoverflow</a> question, so I&#8217;m not the only one with this particular issue. </p>
<p><code>node .\node_modules\karma\bin\karma start karma.conf.js --single-run</code></p>
<div id="attachment_2543" style="width: 815px" class="wp-caption aligncenter"><a href="/wp-content/uploads/2014/04/karma2.png"><img src="/wp-content/uploads/2014/04/karma2.png" alt="Karma Run - Take 2 - (Node hasn&#039;t eaten my blue background in this window)" width="805" height="88" class="size-full wp-image-2543" srcset="/wp-content/uploads/2014/04/karma2.png 805w, /wp-content/uploads/2014/04/karma2-300x32.png 300w" sizes="(max-width: 805px) 100vw, 805px" /></a><p class="wp-caption-text">Karma Run &#8211; Take 2 &#8211; (Node hasn&#8217;t eaten my blue background in this window)</p></div>
<p>I was able to correct the issue from switching my test-main.js require basePath from &#8220;base/src&#8221; to &#8220;/base/src&#8221;, I&#8217;m still digging into why this worked.</p>
<h1>My Thoughts</h1>
<p>NCrunch set the bar high, and while karma runs my tests continuously, I think comparing it NCrunch would be unfair to karma because it just isn&#8217;t in the same league.</p>
<p>Running locally, Karma does not give me that much more value than just refreshing a SpecRunner file in the browser. With the browser I have to change Alt+Tab to the window and F5 refresh, with karma the console output of test results is there, but it doesn&#8217;t have the browser&#8217;s ability to click on an error and see the code in context, see files that didn&#8217;t load correctly, etc. Karma has a plugin infrastructure for other reporters, but the few I&#8217;ve looked at have been focused on providing static files. I briefly looked at an HTML reporter in the hope that it might do some AJAX-y magic, but it simply created HTML output files.</p>
<p>One thing I really like about karma is it&#8217;s ability to easily plug in other browsers and run across one or more simultaneously. In a build server environment, this would mean I could easily run my JS unit tests across a wide set of browsers, collect the results, and then either capture the text output from karma or use a plugin for my build server to integrate in the results.</p>
<p>So overall, I think it makes a great tool for running unit tests the same locally and on the build server and being able to easily do so across a wide range of browsers, but I really don&#8217;t like the choice of using the console as the primary output. I think they overlooked the fact that they already have a browser front-end and a web server that could have been used to provide a richer front-end (potentially one that could be compared to NCrunch) and stil had a slimmer console or other-plugin-of-choice reporting mechanism for those that prefer it or are automating against it.</p>
]]></content:encoded>
			<wfw:commentRss>/index.php/webdev/uidevelopment/javascript/continuous-javascript-testing-with-karma/feed/</wfw:commentRss>
		<slash:comments>4</slash:comments>
		</item>
		<item>
		<title>Unit Testing with Jasmine 2.0 and Require.JS</title>
		<link>/index.php/webdev/uidevelopment/javascript/unit-testing-with-jasmine-2-0-and-require-js/</link>
		<comments>/index.php/webdev/uidevelopment/javascript/unit-testing-with-jasmine-2-0-and-require-js/#comments</comments>
		<pubDate>Tue, 04 Mar 2014 13:41:12 +0000</pubDate>
		<dc:creator><![CDATA[Eli Weinstock-Herman (tarwn)]]></dc:creator>
				<category><![CDATA[Javascript]]></category>
		<category><![CDATA[Unit Testing]]></category>
		<category><![CDATA[jasmine]]></category>
		<category><![CDATA[javascript]]></category>
		<category><![CDATA[requirejs]]></category>

		<guid isPermaLink="false">/?p=2475</guid>
		<description><![CDATA[Jasmine 2.0 has changed how it loads and executes tests, using a boot script now to handle the details. If you try to plug some require() calls into the sample SpecRunner.html page, Jasmine will be done and finished before the require() statement loads the test modules and their dependencies. The problem is that RequireJS loads [&#8230;]]]></description>
				<content:encoded><![CDATA[<p>Jasmine 2.0 has changed how it loads and executes tests, using a boot script now to handle the details. If you try to plug some require() calls into the sample SpecRunner.html page, Jasmine will be done and finished before the require() statement loads the test modules and their dependencies.</p>
<p>The problem is that RequireJS loads the dependencies asynchronously, but the standard boot script for Jasmine runs when window.onload is called. So how do we fix it?</p>
<h2>Option 1: Call window.onload Ourselves</h2>
<p>One option to solve this is to simply call window.onload again:</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="html4strict"><thead><tr><td colspan="2"  class="head">HTML</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
</pre></td><td class="de1"><pre class="de1"><span class="sc2">&lt;<span class="kw2">script</span> <span class="kw3">type</span><span class="sy0">=</span><span class="st0">&quot;text/javascript&quot;</span> <span class="kw3">src</span><span class="sy0">=</span><span class="st0">&quot;tests/lib/jasmine-2.0.0/jasmine.js&quot;</span>&gt;&lt;<span class="sy0">/</span><span class="kw2">script</span>&gt;</span>
<span class="sc2">&lt;<span class="kw2">script</span> <span class="kw3">type</span><span class="sy0">=</span><span class="st0">&quot;text/javascript&quot;</span> <span class="kw3">src</span><span class="sy0">=</span><span class="st0">&quot;tests/lib/jasmine-2.0.0/jasmine-html.js&quot;</span>&gt;&lt;<span class="sy0">/</span><span class="kw2">script</span>&gt;</span>
<span class="sc2">&lt;<span class="kw2">script</span> <span class="kw3">type</span><span class="sy0">=</span><span class="st0">&quot;text/javascript&quot;</span> <span class="kw3">src</span><span class="sy0">=</span><span class="st0">&quot;tests/lib/jasmine-2.0.0/boot.js&quot;</span>&gt;&lt;<span class="sy0">/</span><span class="kw2">script</span>&gt;</span>
<span class="sc2">&lt;<span class="kw2">script</span> <span class="kw3">type</span><span class="sy0">=</span><span class="st0">&quot;text/javascript&quot;</span> <span class="kw3">src</span><span class="sy0">=</span><span class="st0">&quot;lib/require-2.1.8.min.js&quot;</span> data-main<span class="sy0">=</span><span class="st0">&quot;test-main&quot;</span>&gt;&lt;<span class="sy0">/</span><span class="kw2">script</span>&gt;</span>
&nbsp;
<span class="sc2">&lt;<span class="kw2">script</span> <span class="kw3">type</span><span class="sy0">=</span><span class="st0">&quot;text/javascript&quot;</span>&gt;</span>
&nbsp; &nbsp; // list spec files here
&nbsp; &nbsp; require([
&nbsp; &nbsp; &nbsp; &nbsp; &quot;spec/someAwesomeProcess.spec&quot;,
&nbsp; &nbsp; &nbsp; &nbsp; &quot;spec/anotherAwesomeProcess.spec&quot;
&nbsp;
&nbsp; &nbsp; ], function () {
&nbsp; &nbsp; &nbsp; &nbsp; window.onload();
&nbsp; &nbsp; });
<span class="sc2">&lt;<span class="sy0">/</span><span class="kw2">script</span>&gt;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">&lt;script type="text/javascript" src="tests/lib/jasmine-2.0.0/jasmine.js"&gt;&lt;/script&gt;
&lt;script type="text/javascript" src="tests/lib/jasmine-2.0.0/jasmine-html.js"&gt;&lt;/script&gt;
&lt;script type="text/javascript" src="tests/lib/jasmine-2.0.0/boot.js"&gt;&lt;/script&gt;
&lt;script type="text/javascript" src="lib/require-2.1.8.min.js" data-main="test-main"&gt;&lt;/script&gt;

&lt;script type="text/javascript"&gt;
	// list spec files here
	require([
		"spec/someAwesomeProcess.spec",
		"spec/anotherAwesomeProcess.spec"

	], function () {
		window.onload();
	});
&lt;/script&gt;</pre></div></div>

<p>But that&#8217;s icky and causes you to have two test bars across the screen (and probably doesn&#8217;t work well with other reporters either).</p>
<p><a href="/wp-content/uploads/2014/02/JasmineDoubleFail.png"><img src="/wp-content/uploads/2014/02/JasmineDoubleFail.png" alt="JasmineDoubleFail" width="726" height="182" class="aligncenter size-full wp-image-2477" srcset="/wp-content/uploads/2014/02/JasmineDoubleFail.png 726w, /wp-content/uploads/2014/02/JasmineDoubleFail-300x75.png 300w" sizes="(max-width: 726px) 100vw, 726px" /></a></p>
<p>Yeah, that&#8217;s special.</p>
<h2>Option 2: Custom Boot Script</h2>
<p>Or we can fix the root cause, the fact that the tests are running on window.onload and that doesn&#8217;t play well with AMD. The boot script included with Jasmine is supposed to be a template that can be customized to your own needs, so let&#8217;s take advantage of that. Copying the existing boot script, we can replace the section that registers the tests to onload with one that will add a callable method to the window:</p>
<p><b>boot-without-onload.js</b></p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="javascript"><thead><tr><td colspan="2"  class="head">Javascript</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
</pre></td><td class="de1"><pre class="de1">&nbsp; <span class="coMULTI">/**</span>
<span class="coMULTI">&nbsp; &nbsp;* ## Execution</span>
<span class="coMULTI">&nbsp; &nbsp;*</span>
<span class="coMULTI">&nbsp; &nbsp;* No onload, only on demand now</span>
<span class="coMULTI">&nbsp; &nbsp;*/</span>
&nbsp;
&nbsp; window.<span class="me1">executeTests</span> <span class="sy0">=</span> <span class="kw1">function</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#123;</span>
&nbsp; &nbsp; htmlReporter.<span class="me1">initialize</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; env.<span class="me1">execute</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; <span class="br0">&#125;</span><span class="sy0">;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">  /**
   * ## Execution
   *
   * No onload, only on demand now
   */

  window.executeTests = function(){
    htmlReporter.initialize();
    env.execute();
  };</pre></div></div>

<p>And then update our SpecRunner to include this replacement boot script and require the test files prior to executing the tests:</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="html4strict"><thead><tr><td colspan="2"  class="head">HTML</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
</pre></td><td class="de1"><pre class="de1">&nbsp; &nbsp; <span class="sc2">&lt;<span class="kw2">script</span> <span class="kw3">type</span><span class="sy0">=</span><span class="st0">&quot;text/javascript&quot;</span> <span class="kw3">src</span><span class="sy0">=</span><span class="st0">&quot;tests/lib/jasmine-2.0.0/jasmine.js&quot;</span>&gt;&lt;<span class="sy0">/</span><span class="kw2">script</span>&gt;</span>
&nbsp; &nbsp; <span class="sc2">&lt;<span class="kw2">script</span> <span class="kw3">type</span><span class="sy0">=</span><span class="st0">&quot;text/javascript&quot;</span> <span class="kw3">src</span><span class="sy0">=</span><span class="st0">&quot;tests/lib/jasmine-2.0.0/jasmine-html.js&quot;</span>&gt;&lt;<span class="sy0">/</span><span class="kw2">script</span>&gt;</span>
&nbsp; &nbsp; <span class="sc2">&lt;<span class="kw2">script</span> <span class="kw3">type</span><span class="sy0">=</span><span class="st0">&quot;text/javascript&quot;</span> <span class="kw3">src</span><span class="sy0">=</span><span class="st0">&quot;tests/lib/jasmine-2.0.0/boot-without-onload.js&quot;</span>&gt;&lt;<span class="sy0">/</span><span class="kw2">script</span>&gt;</span>
&nbsp; &nbsp; <span class="sc2">&lt;<span class="kw2">script</span> <span class="kw3">type</span><span class="sy0">=</span><span class="st0">&quot;text/javascript&quot;</span> <span class="kw3">src</span><span class="sy0">=</span><span class="st0">&quot;lib/require-2.1.8.min.js&quot;</span> data-main<span class="sy0">=</span><span class="st0">&quot;test-main&quot;</span>&gt;&lt;<span class="sy0">/</span><span class="kw2">script</span>&gt;</span>
&nbsp;
&nbsp; &nbsp; <span class="sc2">&lt;<span class="kw2">script</span> <span class="kw3">type</span><span class="sy0">=</span><span class="st0">&quot;text/javascript&quot;</span>&gt;</span>
&nbsp; &nbsp; &nbsp; &nbsp; // list spec files here
&nbsp; &nbsp; &nbsp; &nbsp; require([
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;spec/someAwesomeProcess.spec&quot;,
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;spec/anotherAwesomeProcess.spec&quot;
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; ], function () {
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; window.executeTests();
&nbsp; &nbsp; &nbsp; &nbsp; });
&nbsp; &nbsp; <span class="sc2">&lt;<span class="sy0">/</span><span class="kw2">script</span>&gt;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">    &lt;script type="text/javascript" src="tests/lib/jasmine-2.0.0/jasmine.js"&gt;&lt;/script&gt;
    &lt;script type="text/javascript" src="tests/lib/jasmine-2.0.0/jasmine-html.js"&gt;&lt;/script&gt;
    &lt;script type="text/javascript" src="tests/lib/jasmine-2.0.0/boot-without-onload.js"&gt;&lt;/script&gt;
    &lt;script type="text/javascript" src="lib/require-2.1.8.min.js" data-main="test-main"&gt;&lt;/script&gt;

    &lt;script type="text/javascript"&gt;
        // list spec files here
        require([
            "spec/someAwesomeProcess.spec",
            "spec/anotherAwesomeProcess.spec"

        ], function () {
            window.executeTests();
        });
    &lt;/script&gt;</pre></div></div>

<p>And there we go, Jasmine is now working exactly the same as if we were running without RequireJS (and had pasted 500 script tags in the file).</p>
]]></content:encoded>
			<wfw:commentRss>/index.php/webdev/uidevelopment/javascript/unit-testing-with-jasmine-2-0-and-require-js/feed/</wfw:commentRss>
		<slash:comments>4</slash:comments>
		</item>
		<item>
		<title>Using T4 templates for Centralized Javascript</title>
		<link>/index.php/webdev/serverprogramming/aspnet/using-t4-templates-for-centralized/</link>
		<comments>/index.php/webdev/serverprogramming/aspnet/using-t4-templates-for-centralized/#respond</comments>
		<pubDate>Fri, 02 Dec 2011 15:42:00 +0000</pubDate>
		<dc:creator><![CDATA[Eli Weinstock-Herman (tarwn)]]></dc:creator>
				<category><![CDATA[ASP.NET]]></category>
		<category><![CDATA[Javascript]]></category>
		<category><![CDATA[javascript]]></category>
		<category><![CDATA[t4-template]]></category>

		<guid isPermaLink="false">/index.php/2011/12/using-t4-templates-for-centralized/</guid>
		<description><![CDATA[In my previous post I mentioned that I was looking for an answer to the age-old question of how to manage common CSS and JavaScript across multiple projects (specifically ASP.Net projects). Using T4 templates, I was able to not only create a common location for CSS files, but to take it a step farther and use Less in ordr to simplify that common CSS even further.]]></description>
				<content:encoded><![CDATA[<p>In my previous post I mentioned that I was looking for an answer to the age-old question of how to manage common CSS and JavaScript across multiple projects (specifically ASP.Net projects). Using T4 templates, I was able to not only create a common location for CSS files, but to take it a step farther and use Less in ordr to simplify that common CSS even further.</p>
<p>But we left JavaScript out of the equation.</p>
<h2>T4&#8217;ing the JavaScript</h2>
<p>As a reminder, I am looking for a clean way to store shared JavaScript and CSS in a single place so I share it amongst several web projects and also make changes to the files on the fly and see them in the browser without a costly solution rebuild.</p>
<p>On the JavaScript side of things I decided to write my own little T4 template. The goal was to be able to pick up all of the *.js files in a central location, merge them, and save them out as a common file that I could then include in my local projects. </p>
<p>My solution layout is similar to the one in the prior post:</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="text"><thead><tr><td colspan="2"  class="head">Text</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
</pre></td><td class="de1"><pre class="de1">/SolutionName/Common/NN-*.js files
/SolutionName/Project1/scripts/CommonJS.tt
/SolutionName/Project2/scripts/CommonJS.tt</pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">/SolutionName/Common/NN-*.js files
/SolutionName/Project1/scripts/CommonJS.tt
/SolutionName/Project2/scripts/CommonJS.tt</pre></div></div>

<p>I prefix my common javascript files with a 2-digit number so I can include them in a planned order every time.</p>
<p><b>CommonJS.tt</b></p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="csharp"><thead><tr><td colspan="2"  class="head">C#</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
</pre></td><td class="de1"><pre class="de1"><span class="sy0">&lt;</span><span class="co2">#@ template language=&quot;C#&quot; hostspecific=&quot;True&quot; #&gt;</span>
<span class="sy0">&lt;</span><span class="co2">#@ import namespace=&quot;System&quot; #&gt;</span>
<span class="sy0">&lt;</span><span class="co2">#@ import namespace=&quot;System.IO&quot; #&gt;</span>
<span class="sy0">&lt;</span><span class="co2">#@ import namespace=&quot;Microsoft.VisualStudio.TextTemplating&quot; #&gt;</span>
<span class="sy0">&lt;</span><span class="co2">#@ Output Extension=&quot;.js&quot; #&gt;</span>
<span class="sy0">&lt;</span><span class="co2">#</span>
<span class="coMULTI">/*-------------------------------------------------*/</span>
<span class="co1">// Settings &nbsp; &nbsp; &nbsp;</span>
<span class="coMULTI">/*-------------------------------------------------*/</span>
<span class="kw4">string</span> _targetDirectory <span class="sy0">=</span> <span class="st_h">@&quot;....Common&quot;</span><span class="sy0">;</span>
<span class="coMULTI">/*-------------------------------------------------*/</span>
Directory<span class="sy0">.</span><span class="me1">SetCurrentDirectory</span><span class="br0">&#40;</span>Path<span class="sy0">.</span><span class="me1">GetDirectoryName</span><span class="br0">&#40;</span>Host<span class="sy0">.</span><span class="me1">TemplateFile</span><span class="br0">&#41;</span> <span class="sy0">+</span> _targetDirectory<span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
<span class="kw1">var</span> filespec <span class="sy0">=</span> <span class="st0">&quot;*.js&quot;</span><span class="sy0">;</span>
<span class="kw1">var</span> files <span class="sy0">=</span> Directory<span class="sy0">.</span><span class="me1">GetFiles</span><span class="br0">&#40;</span><span class="st0">&quot;.&quot;</span>,filespec<span class="br0">&#41;</span><span class="sy0">;</span>
<span class="co2">#&gt;</span>
<span class="coMULTI">/*</span>
<span class="coMULTI">CommandJavascript.js</span>
<span class="coMULTI">Converted at: &lt;#= DateTime.Now.ToShortDateString() #&gt; &lt;#= DateTime.Now.ToShortTimeString() #&gt;</span>
<span class="coMULTI">File List (&lt;#= files.Length #&gt; Found):</span>
<span class="coMULTI">&lt;#= &quot;t&quot; + String.Join(&quot;nt&quot;, files) #&gt;</span>
<span class="coMULTI">*/</span>
<span class="sy0">&lt;</span><span class="co2">#</span>
<span class="kw1">foreach</span><span class="br0">&#40;</span><span class="kw1">var</span> jsFile <span class="kw1">in</span> files<span class="br0">&#41;</span> 
<span class="br0">&#123;</span>
&nbsp; &nbsp; Write<span class="br0">&#40;</span><span class="st0">&quot;/* ----------- &quot;</span> <span class="sy0">+</span> jsFile <span class="sy0">+</span> <span class="st0">&quot; ----------- */n&quot;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; <span class="kw1">using</span><span class="br0">&#40;</span>StreamReader sr <span class="sy0">=</span> File<span class="sy0">.</span><span class="me1">OpenText</span><span class="br0">&#40;</span>jsFile<span class="br0">&#41;</span><span class="br0">&#41;</span>
&nbsp; &nbsp; <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; Write<span class="br0">&#40;</span>sr<span class="sy0">.</span><span class="me1">ReadToEnd</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; sr<span class="sy0">.</span><span class="me1">Close</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp; &nbsp; Write<span class="br0">&#40;</span><span class="st0">&quot;n/* ----------- &quot;</span> <span class="sy0">+</span> jsFile <span class="sy0">+</span> <span class="st0">&quot; ----------- */nn&quot;</span><span class="br0">&#41;</span><span class="sy0">;</span>
<span class="br0">&#125;</span>
<span class="co2">#&gt;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">&lt;#@ template language="C#" hostspecific="True" #&gt;
&lt;#@ import namespace="System" #&gt;
&lt;#@ import namespace="System.IO" #&gt;
&lt;#@ import namespace="Microsoft.VisualStudio.TextTemplating" #&gt;
&lt;#@ Output Extension=".js" #&gt;
&lt;#
/*-------------------------------------------------*/
// Settings      
/*-------------------------------------------------*/
string _targetDirectory = @"....Common";
/*-------------------------------------------------*/
Directory.SetCurrentDirectory(Path.GetDirectoryName(Host.TemplateFile) + _targetDirectory);

var filespec = "*.js";
var files = Directory.GetFiles(".",filespec);
#&gt;
/*
CommandJavascript.js
Converted at: &lt;#= DateTime.Now.ToShortDateString() #&gt; &lt;#= DateTime.Now.ToShortTimeString() #&gt;
File List (&lt;#= files.Length #&gt; Found):
&lt;#= "t" + String.Join("nt", files) #&gt;
*/
&lt;#
foreach(var jsFile in files) 
{
	Write("/* ----------- " + jsFile + " ----------- */n");
	using(StreamReader sr = File.OpenText(jsFile))
	{
		Write(sr.ReadToEnd());
		sr.Close();
	}
	Write("n/* ----------- " + jsFile + " ----------- */nn");
}
#&gt;</pre></div></div>

<p>Place this file in our project, update the _targetDirectory variable and we have a quick way to pull common javascript down to our projects.</p>
<p>The output file is a merged version of all of the *.js files found in the common folder. I also output comments around each file block to make it easy to track back to the original file, if needed.</p>
<h2>The Price of Hack and Slash Code</h2>
<p>I put this script together very quickly and, as such, it is missing some features I think would be nice additions. The ability to execute a minification run at the end would be nice, as would the <a href="http://blogs.msdn.com/davidebb/archive/2009/06/26/the-mvc-t4-template-is-now-up-on-codeplex-and-it-does-change-your-code-a-bit.aspx" title="MVC T4 article that discusses the concept of saving a template file to force regeneration">MarkDirty</a> feature that was in the T4CSS.tt code. </p>
<p>As with the previous post, the <a href="https://bitbucket.org/tarwn/aspnet_sharedresourceswitht4/overview" title="Sample project on BitBucket">sample project is available</a>, so you can look at (or download) a working example if you would like.</p>
<p>And that is that. Shortest Eli post ever? Maybe <img src="https://s.w.org/images/core/emoji/2/72x72/1f642.png" alt="🙂" class="wp-smiley" style="height: 1em; max-height: 1em;" /></p>
]]></content:encoded>
			<wfw:commentRss>/index.php/webdev/serverprogramming/aspnet/using-t4-templates-for-centralized/feed/</wfw:commentRss>
		<slash:comments>0</slash:comments>
		</item>
		<item>
		<title>CSS, Javascript, T4 Templates, and Less, Oh My</title>
		<link>/index.php/webdev/serverprogramming/aspnet/css-javascript-t4-templates-and-less/</link>
		<comments>/index.php/webdev/serverprogramming/aspnet/css-javascript-t4-templates-and-less/#comments</comments>
		<pubDate>Fri, 02 Dec 2011 13:02:00 +0000</pubDate>
		<dc:creator><![CDATA[Eli Weinstock-Herman (tarwn)]]></dc:creator>
				<category><![CDATA[ASP.NET]]></category>
		<category><![CDATA[Javascript]]></category>
		<category><![CDATA[XHTML and CSS]]></category>
		<category><![CDATA[css]]></category>
		<category><![CDATA[javascript]]></category>
		<category><![CDATA[less]]></category>
		<category><![CDATA[t4-template]]></category>

		<guid isPermaLink="false">/index.php/2011/12/css-javascript-t4-templates-and-less/</guid>
		<description><![CDATA[For the past few months, I have been looking for a way to define some JS and CSS files that would be shared between multiple projects in an ASP.Net solution. The intent is to define common scripts and CSS in one place instead of trying to keep multiple copies of it in sync or implementing an internal CDN with a versioning scheme. The challenge is finding a way to do this with a minimum of impact on the development, deployment, and production processes.]]></description>
				<content:encoded><![CDATA[<p>For the past few months, I have been looking for a way to define some JS and CSS files that would be shared between multiple projects in an ASP.Net solution. The intent is to define common scripts and CSS in one place instead of trying to keep multiple copies of it in sync or implementing an internal CDN with a versioning scheme. The challenge is finding a way to do this with a minimum of impact on the development, deployment, and production processes.</p>
<h2>The Shared Project</h2>
<p>Yesterday the best solution I was also the best one I had thought of on my own, which was to create a shared project and use pre- or post-build commands to copy the common files to the relevant web projects. Unfortunately this doesn&#8217;t solve the &#8220;let me edit a file without rebuilding&#8221; unless I then edit the copied file, test, and remember to paste the changes back into the source without first building and wiping out my temporary changes.</p>
<p>Yuck.</p>
<p>This wasn&#8217;t going to make life that much easier.</p>
<h2>Start with just the CSS?</h2>
<p>This morning, while looking into the potential of using LESS or SASS to reduce the repetitiveness of the files, I realized I had the potential for a much better solution. If I had a way to compile a LESS or SASS file on the fly into a CSS file, then I could still put my common CSS in a central location and just use an import statement in a template in each project to pull those common values in. </p>
<p>I initially looked at using SASS with the <a href="http://visualstudiogallery.msdn.microsoft.com/2b96d16a-c986-4501-8f97-8008f9db141a" title="Mindscape Web Workbench extension on VisualStudioGallery">Mindscape Web Workbench</a> plugin. This seemed like a good solution, but something I read recently about design-time T4 templates led me to wonder if someone had created a T4 template that would transform LESS or SASS syntax into a nice clean CSS file. </p>
<p>What did we do before search engines&#8230;</p>
<h2>Implement T4CSS Template</h2>
<p>Phil Haack (<a href="http://haacked.com/" title="Phil's blog">blog</a>|<a href="https://twitter.com/#!/haacked" title="@haacked on twitter">twitter</a>) posted a blog in 2009 on <a href="http://haacked.com/archive/2009/12/02/t4-template-for-less-css.aspx" title="T4CSS: A T4 Template for .Less CSS With Compression">exactly this topic</a>. He created a T4 template for Visual Studio 2008 that would use the dotless C# assembly to convert LESS files to static CSS files and provided to the <a href="http://www.dotlesscss.org/" title="Visit the .Less Site">.Less site</a>.</p>
<p>Now we&#8217;re cooking.</p>
<p>First we need to download the t4css package from github: https://github.com/dotless/dotless/downloads</p>
<p>There are two files we are concerned with, the dotless.Core DLL and the T4CSS.tt template file. The template file is placed in our CSS folder in our site. </p>
<div style="font-size: .9em; background-color: #eeeeee; padding: .5em;">
<h3>Referencing the Assembly</h3>
<p>Unfortunately Visual Studio 2010&#8217;s T4 implementation no longer accesses assemblies through the project references, but this still leaves us with <a href="http://weblogs.asp.net/lhunt/archive/2010/05/04/t4-template-error-assembly-directive-cannot-locate-referenced-assembly-in-visual-studio-2010-project.aspx" title="T4 Template error - Assembly Directive cannot locate referenced assembly in Visual Studio 2010 project">a few options</a>. Given that I want to share this among several projects, I put the dotless.Core DLL in a folder at my solution level and updated the path in the T4 template to use the solution path macro.
</div>
<p>Next I created a sample file to play with, which I called test.less.css (fancy, I know). I also modified the settings section of the T4CSS.tt file, setting _runOnBuild and _useCssExtension to &#8220;true&#8221;. This will cause the template to run on each build, as well as when I trigger it, and it will look for files ending in &#8220;.less.css&#8221; instead of just &#8220;.less&#8221;. This gives us some CSS intellisense with minimal hassle, though Mindscape&#8217;s Web Workbench apparently handles this out of the box and there is <a href="http://visualstudiogallery.msdn.microsoft.com/dd5635b0-3c70-484f-abcb-cbdcabaa9923" title="CSS Is Less">an extension</a> to make VS treat the less extension as a CSS format.</p>
<div style="font-size: .9em; background-color: #eeeeee; padding: .5em;">
There is also a <a href="http://visualstudiogallery.msdn.microsoft.com/e646c6ec-87a7-45ea-81e8-d655a3d3e73e?SRC=VSIDE" title="LessExtension">LessExtension</a> in the gallery that seems to offer some of the functionality I already have with the T4 template, but I didn&#8217;t have a chance to play with it.
</div>
<p>If we keep the T4CSS file open, it will mark itself as unsaved each time it runs, so using Ctrl+Shift+S will save it and regenerate the output CSS. At least that&#8217;s the theory. Unfortunately in my case, it seems that the template file was being saved prior to the css file, so I&#8217;ve taken to pressing Ctrl+S and then Ctrl+Shift+S after making a quick change in my CSS (which is still way better than a Rebuild All would be).</p>
<p><i>Note: There is also  the &#8220;Transform All Templates&#8221; button on the top of the solution explorer if I don&#8217;t feel like double-saving. I could also add a shortcut in  the keyboard commands list (Tools -> Options -> Environment -> Keyboard) for &#8220;TextTransformation.TransformAllTemplates</i></p>
<h2>Working Across Projects</h2>
<p>This solution hasn&#8217;t quite given me the &#8220;save the file and refresh the page&#8221; ease of use of a static CSS file. This means if you are editing a less file that more than one template references, and you don&#8217;t have all the templates open, you could get out of sync. To help keep things clean in source control, this means you should run a complete build (to let all the transforms run) or use. </p>
<p>To make this work for multiple projects we can add a folder at the solution level with our less files and use the @import statement to pull them in. Except now we can&#8217;t do the .less.css trick anymore because less doesn&#8217;t process @import&#8217;s ending in CSS, assuming they are intended to be regular css imports. At this point, it&#8217;s probably time to stop fighting it, apply the &#8220;Less is CSS&#8221; extension I mentioned above, and change back to using .less instead of .less.css. Fun times.</p>
<p>So what we end up with is a folder structure that looks like:</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="text"><thead><tr><td colspan="2"  class="head">Text</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
</pre></td><td class="de1"><pre class="de1">&nbsp; &nbsp; 
/SolutionName/Common/dotless.Core.dll
/SolutionName/Common/common.less
/SolutionName/Project1/css/T4CSS.tt
/SolutionName/Project1/css/stylesheet.less
/SolutionName/Project2/css/T4CSS.tt
/SolutionName/Project2/css/stylesheet.less</pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">	
/SolutionName/Common/dotless.Core.dll
/SolutionName/Common/common.less
/SolutionName/Project1/css/T4CSS.tt
/SolutionName/Project1/css/stylesheet.less
/SolutionName/Project2/css/T4CSS.tt
/SolutionName/Project2/css/stylesheet.less</pre></div></div>

<p>And inside the project-specific .less files we have an import at the top, like so:</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="css"><thead><tr><td colspan="2"  class="head">CSS</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
</pre></td><td class="de1"><pre class="de1"><span class="co1">@import &quot;../../Common/common.less&quot;;</span>
&nbsp;
<span class="coMULTI">/* plus some project specific-stuff */</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">@import "../../Common/common.less";

/* plus some project specific-stuff */</pre></div></div>

<p>And there we have it, shared CSS. I posted a <a href="https://bitbucket.org/tarwn/aspnet_sharedresourceswitht4/overview" title="See project on BitBucket">working sample project on BitBucket</a> if you want to browse it in detail.</p>
<h2>I Specifically Heard You Say JavaScript</h2>
<p>I intend to solve the common javascript issue the same way, except in this case I will write my own T4 templates to directly copy the files from the common area that are needed in each project. This will provide me with an easy way to manage common scripts in a central location, the ability to edit and refresh my page to test changes without rebuilds, and can easily be extended to include minified versions of the files.</p>
]]></content:encoded>
			<wfw:commentRss>/index.php/webdev/serverprogramming/aspnet/css-javascript-t4-templates-and-less/feed/</wfw:commentRss>
		<slash:comments>1</slash:comments>
		</item>
		<item>
		<title>Getting Started with JavaScript Unit Testing</title>
		<link>/index.php/webdev/uidevelopment/javascript/getting-started-with-javascript-unit/</link>
		<comments>/index.php/webdev/uidevelopment/javascript/getting-started-with-javascript-unit/#comments</comments>
		<pubDate>Mon, 26 Sep 2011 09:58:00 +0000</pubDate>
		<dc:creator><![CDATA[Eli Weinstock-Herman (tarwn)]]></dc:creator>
				<category><![CDATA[Javascript]]></category>
		<category><![CDATA[javascript]]></category>
		<category><![CDATA[jstestdriver]]></category>
		<category><![CDATA[qunit]]></category>
		<category><![CDATA[unit testing]]></category>

		<guid isPermaLink="false">/index.php/2011/09/getting-started-with-javascript-unit/</guid>
		<description><![CDATA[Recently I decided to start doing JavaScript code katas. I've been using JavaScript for around ten years, but there there are still a lot of aspects I don't know well or that I could use more practice in. Case in point, I had never used a unit testing framework with javascript.]]></description>
				<content:encoded><![CDATA[<p>Recently I decided to start doing JavaScript <a href="/index.php/ITProfessionals/ProfessionalDevelopment/using-code-katas-to-improve" title="Read Post: Using Code Katas to Improve Programming Skills">code katas.</a> I&#8217;ve been using JavaScript for around ten years, but there there are still a lot of aspects I don&#8217;t know well or that I could use more practice in. Case in point, I had never used a unit testing framework with javascript. Having never unit tested JavaScript before, I used a scientific tool to carefully select from amongst the numerous unit testing packages available.</p>
<p>I typed &#8220;javascript unit testing&#8221; into Google and started reading.</p>
<h2>jsTestDriver</h2>
<p><a href="http://code.google.com/p/js-test-driver/wiki/GettingStarted" title="Visit the jsTestDriver wiki">jsTestDriver</a> was listed on a wide number of sites as one of the top JavaScript unit testing tools and fit an initial requirement I set myself of running outside of a browser. jsTestDriver runs as a client-server pair, the client sending tests to the server, which then runs them on a captured browser. The advantage of this method is it can easily be integrated with a code editor or as part of an automated build.</p>
<p>The jsTestDriver site includes plugins for Eclipse, Maven, and IntelliJ. I also found an article on <a href="http://slmoloch.blogspot.com/2009/08/how-to-run-jstestdriver-with-visual_02.html" title="Read the Visual Studio post">using it with Visual Studio</a> and it was fairly easy setting it up as a user tool in EditPlus.</p>
<div style="text-align: center; margin: 1em; color: #666666; font-size: 80%">
<img src="http://tiernok.com/LTDBlog/jsunittest/editplus.png" alt="Screenshot of EditPlus" /><br />
Screenshot of EditPlus Settings
</div>
<p>Though I&#8217;m not using the feature, jsTestDriver provides a flag to specify an output file for the results, enabling us to use it as part of a continuous build.</p>
<h3>The Setup</h3>
<p>Setting up jsTestDriver on my system was fairly straightforward.</p>
<ol>
<li>Download Java &#8211; Visit <a href="http://java.com/" title="Java website">java.com</a> and download the appropriate installer, run the installer, remember to go into the control panel and fiddle with Java&#8217;s update settings</li>
<li>Download the jar file &#8211; Visit the <a href="http://code.google.com/p/js-test-driver/downloads/list" title="View the jsTestDriver downloads">project on Google</a> and download a copy of the jar file (I used the self-contained version)</li>
<li>Create folders &#8211; Create a top level folder and two sub folders (for instance, src and src-test). Put the jar in the top level folder</li>
<li>Create a conf file &#8211; I used the one in the <a href="http://code.google.com/p/js-test-driver/wiki/GettingStarted#Writing_configuration_file" title="Visit the Getting Started guide">Getting Started Guide</a> as a starting point</li>
</ol>
<p>At this point we should be able to fire up the server for the first time and verify everything is ready to go. I created a .cmd file on my system for the server so I could easily start it:</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="text"><thead><tr><td colspan="2"  class="head">Text</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
</pre></td><td class="de1"><pre class="de1">&quot;C:Program Files (x86)Javajre6binjava&quot; -jar JsTestDriver-1.3.2.jar --port 4224 --browser &quot;C:Documents and SettingsTarwnLocal SettingsApplication DataGoogleChromeApplicationchrome.exe&quot;</pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">"C:Program Files (x86)Javajre6binjava" -jar JsTestDriver-1.3.2.jar --port 4224 --browser "C:Documents and SettingsTarwnLocal SettingsApplication DataGoogleChromeApplicationchrome.exe"</pre></div></div>

<p>What this does is starts the jsTestDriver jar on port 4224 and also automatically starts up an instance of chrome that will be captured by the server to run tests. I was initially using Firefox but jsTestDriver can&#8217;t intercept the console log the way it can with Chrome, so I wasn&#8217;t getting very good output for failed or errored tests.</p>
<p>Next I created a .cmd file to run all the tests in my folders:</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="text"><thead><tr><td colspan="2"  class="head">Text</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
</pre></td><td class="de1"><pre class="de1">&quot;C:Program Files (x86)Javajre6binjava&quot; -jar JsTestDriver-1.3.2.jar --tests all
pause</pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">"C:Program Files (x86)Javajre6binjava" -jar JsTestDriver-1.3.2.jar --tests all
pause</pre></div></div>

<p>This tells jsTestDriver to run all available tests (based on the settings in the conf) using a jsTestDriver server on port 4224. I ended up not using this cmd file very frequently, as it was much handier to be able to run them from a key command inside my editor.</p>
<h3>Writing Tests</h3>
<p>Once we have gotten this far, we can start writing some simple tests.</p>
<p>In each directory (src and src-test), create a file named &#8220;mystuff.js&#8221;.</p>
<p><b>src/mystuff.js</b></p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="javascript"><thead><tr><td colspan="2"  class="head">Javascript</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
</pre></td><td class="de1"><pre class="de1">myAwesomeApp <span class="sy0">=</span> <span class="br0">&#123;</span><span class="br0">&#125;</span><span class="sy0">;</span>
&nbsp;
myAwesomeApp.<span class="me1">MyAwesomeClass</span> <span class="sy0">=</span> <span class="kw1">function</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#123;</span><span class="br0">&#125;</span><span class="sy0">;</span>
&nbsp;
myAwesomeApp.<span class="me1">MyAwesomeClass</span>.<span class="kw1">prototype</span>.<span class="me1">add</span> <span class="sy0">=</span> <span class="kw1">function</span><span class="br0">&#40;</span>num0<span class="sy0">,</span> num1<span class="br0">&#41;</span><span class="br0">&#123;</span>
&nbsp; &nbsp; <span class="kw1">return</span> num0 <span class="sy0">+</span> num1<span class="sy0">;</span>
<span class="br0">&#125;</span><span class="sy0">;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">myAwesomeApp = {};

myAwesomeApp.MyAwesomeClass = function(){};

myAwesomeApp.MyAwesomeClass.prototype.add = function(num0, num1){
	return num0 + num1;
};</pre></div></div>

<p><b>src-test/mystuff.js</b></p>
<pre>TestCase("Sample Test Case",{

	"test Number plus Zero Equals Number": function(){
		var adder = new myAwesomeApp.MyAwesomeClass();
		assertEquals(5, adder.add(5,0));
	},
	"test Number plus Number Equals Sum": function(){
		var adder = new myAwesomeApp.MyAwesomeClass();
		assertEquals(8, adder.add(5,3));
	},
	"test Zero plus Number Equals Number": function(){
		var adder = new myAwesomeApp.MyAwesomeClass();
		assertEquals(5, adder.add(0,5));
	},
	"test Number plus Negative of Number Equals Zero": function(){
		var adder = new myAwesomeApp.MyAwesomeClass();
		assertEquals(0, adder.add(5,-5));
	},
	"test Fails miserably": function(){
		fail("miserably");
	}
});</pre>
<p>JavaScript provides a number of different methods to define objects with functions, in the source class I used the prototype method and in the tests file I used an object literal. For jsTestDriver, the important part is that the tests in the object we pass to TestCase begin with the word test, and the object literal method seemed like a friendlier layout for a test file.</p>
<h3>Running Tests</h3>
<p>Once we have the two files in place, start the server by issuing the following command (or creating the cmd file like me):</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="text"><thead><tr><td colspan="2"  class="head">Text</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
</pre></td><td class="de1"><pre class="de1">&quot;C:Program Files (x86)Javajre6binjava&quot; -jar ../JsTestDriver-1.3.2.jar --port 4224 --browser &quot;C:Documents and SettingsTarwnLocal SettingsApplication DataGoogleChromeApplicationchrome.exe&quot;</pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">"C:Program Files (x86)Javajre6binjava" -jar ../JsTestDriver-1.3.2.jar --port 4224 --browser "C:Documents and SettingsTarwnLocal SettingsApplication DataGoogleChromeApplicationchrome.exe"</pre></div></div>

<p>You will need to update the browser and java paths to reflect your own.</p>
<p>Once the browser has started and it has been captured by the server for testing, it will look like this:</p>
<div style="text-align: center; margin: 1em; color: #666666; font-size: 80%">
<img src="http://tiernok.com/LTDBlog/jsunittest/jsTestDriver.png" alt="Chrome captured by jsTestDriver Server" /><br />
Chrome captured by jsTestDriver Server
</div>
<p>Now we can run our tests by issuing the following command:</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="text"><thead><tr><td colspan="2"  class="head">Text</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
</pre></td><td class="de1"><pre class="de1">&quot;C:Program Files (x86)Javajre6binjava&quot; -jar ../JsTestDriver-1.3.2.jar --tests all</pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">"C:Program Files (x86)Javajre6binjava" -jar ../JsTestDriver-1.3.2.jar --tests all</pre></div></div>

<p>Again, you will need to change the java path to reflect your own (or remove it if you have added it to your PATH variable).</p>
<p>The results should look something like this:</p>
<pre style="margin: 1em; border: 1px solid #999999; padding: 1em;">
....F
Total 5 tests (Passed: 4; Fails: 1; Errors: 0) (0.00 ms)
  Chrome 13.0.782.220 Windows: Run 5 tests (Passed: 4; Fails: 1; Errors 0) (0.00 ms)
    Object Literal Test Case.test Fails miserably failed (0.00 ms): AssertError: miserably
      AssertError: miserably
          at Object.test Fails miserably (http://localhost:4224/test/src-test/mystuff.js:22:3)

Tests failed: Tests failed. See log for details.
</pre>
<p>The top reflects the tests that have run at a glance with .s for passing tests, Fs for failed, and E for errored. Afterwards we get a summary of the total counts and then a section for the one browser we ran with. jsTestDriver allows you to capture multiple browsers, so we could configure this to run our tests across chrome, firefox, and IE simultaneously.</p>
<p>jsTestDriver also supports &#8220;setup&#8221; and &#8220;teardown&#8221; functions to run before and after tests. </p>
<h2>Qunit</h2>
<p>Qunit is a browser-based solution that was built to unit test the jQuery framework. Qunit has fewer requirements to run, but because it runs directly in a browser it means we have to switch windows and refresh in order to get an updated test run.</p>
<h3>The Setup</h3>
<p>Because Qunit will run in our browser, there are relatively few requirements and unlike jsTestDriver, none of them are installations.</p>
<ol>
<li>We already made our folders, so nothing to do here</li>
<li>Download the necessary include files to the top level: <a href="http://code.jquery.com/qunit/qunit-git.js" title="Download qunit.js">qunit.js</a> and <a href="http://code.jquery.com/qunit/qunit-git.css" title="Download qunit.css">qunit.css</a> (I renamed mine without the -git)</li>
<li>Create an empty html file in the top level</li>
</ol>
<p>The empty file will be our test runner. Update the file to look like this:</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="html4strict"><thead><tr><td colspan="2"  class="head">HTML</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
</pre></td><td class="de1"><pre class="de1"><span class="sc2">&lt;DOCTYPE html&gt;</span>
<span class="sc2">&lt;<span class="kw2">html</span>&gt;</span>
<span class="sc2">&lt;<span class="kw2">head</span>&gt;</span>
&nbsp; &nbsp; <span class="sc2">&lt;<span class="kw2">script</span> <span class="kw3">src</span><span class="sy0">=</span><span class="st0">&quot;http://code.jquery.com/jquery-1.6.4.min.js&quot;</span> <span class="kw3">type</span><span class="sy0">=</span><span class="st0">&quot;text/javascript&quot;</span>&gt;&lt;<span class="sy0">/</span><span class="kw2">script</span>&gt;</span>
&nbsp; &nbsp; <span class="sc2">&lt;<span class="kw2">script</span> <span class="kw3">src</span><span class="sy0">=</span><span class="st0">&quot;qunit.js&quot;</span> <span class="kw3">type</span><span class="sy0">=</span><span class="st0">&quot;text/javascript&quot;</span>&gt;&lt;<span class="sy0">/</span><span class="kw2">script</span>&gt;</span>
&nbsp; &nbsp; <span class="sc2">&lt;<span class="kw2">link</span> <span class="kw3">rel</span><span class="sy0">=</span><span class="st0">&quot;stylesheet&quot;</span> <span class="kw3">media</span><span class="sy0">=</span><span class="st0">&quot;all&quot;</span> <span class="kw3">href</span><span class="sy0">=</span><span class="st0">&quot;qunit.css&quot;</span> <span class="sy0">/</span>&gt;</span>
&nbsp;
&nbsp; &nbsp; <span class="sc2">&lt;<span class="kw2">script</span> <span class="kw3">src</span><span class="sy0">=</span><span class="st0">&quot;src/mystuff.js&quot;</span> <span class="kw3">type</span><span class="sy0">=</span><span class="st0">&quot;text/javascript&quot;</span>&gt;&lt;<span class="sy0">/</span><span class="kw2">script</span>&gt;</span>
&nbsp; &nbsp; <span class="sc2">&lt;<span class="kw2">script</span> <span class="kw3">src</span><span class="sy0">=</span><span class="st0">&quot;src-test/mystuff_qunit.js&quot;</span> <span class="kw3">type</span><span class="sy0">=</span><span class="st0">&quot;text/javascript&quot;</span>&gt;&lt;<span class="sy0">/</span><span class="kw2">script</span>&gt;</span>
&nbsp;
<span class="sc2">&lt;<span class="sy0">/</span><span class="kw2">head</span>&gt;</span>
<span class="sc2">&lt;<span class="kw2">body</span>&gt;</span>
&nbsp; &nbsp; <span class="sc2">&lt;<span class="kw2">h1</span> <span class="kw3">id</span><span class="sy0">=</span><span class="st0">&quot;qunit-header&quot;</span>&gt;</span>MyStuff<span class="sc2">&lt;<span class="sy0">/</span><span class="kw2">h1</span>&gt;</span>
&nbsp; &nbsp; <span class="sc2">&lt;<span class="kw2">h2</span> <span class="kw3">id</span><span class="sy0">=</span><span class="st0">&quot;qunit-banner&quot;</span>&gt;&lt;<span class="sy0">/</span><span class="kw2">h2</span>&gt;</span>
&nbsp; &nbsp; <span class="sc2">&lt;<span class="kw2">h2</span> <span class="kw3">id</span><span class="sy0">=</span><span class="st0">&quot;qunit-userAgent&quot;</span>&gt;&lt;<span class="sy0">/</span><span class="kw2">h2</span>&gt;</span>
&nbsp; &nbsp; <span class="sc2">&lt;<span class="kw2">ol</span> <span class="kw3">id</span><span class="sy0">=</span><span class="st0">&quot;qunit-tests&quot;</span>&gt;&lt;<span class="sy0">/</span><span class="kw2">ol</span>&gt;</span>
<span class="sc2">&lt;<span class="sy0">/</span><span class="kw2">body</span>&gt;</span>
<span class="sc2">&lt;<span class="sy0">/</span><span class="kw2">html</span>&gt;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">&lt;DOCTYPE html&gt;
&lt;html&gt;
&lt;head&gt;
	&lt;script src="http://code.jquery.com/jquery-1.6.4.min.js" type="text/javascript"&gt;&lt;/script&gt;
	&lt;script src="qunit.js" type="text/javascript"&gt;&lt;/script&gt;
	&lt;link rel="stylesheet" media="all" href="qunit.css" /&gt;

	&lt;script src="src/mystuff.js" type="text/javascript"&gt;&lt;/script&gt;
	&lt;script src="src-test/mystuff_qunit.js" type="text/javascript"&gt;&lt;/script&gt;

&lt;/head&gt;
&lt;body&gt;
	&lt;h1 id="qunit-header"&gt;MyStuff&lt;/h1&gt;
	&lt;h2 id="qunit-banner"&gt;&lt;/h2&gt;
	&lt;h2 id="qunit-userAgent"&gt;&lt;/h2&gt;
	&lt;ol id="qunit-tests"&gt;&lt;/ol&gt;
&lt;/body&gt;
&lt;/html&gt;</pre></div></div>

<p>As you can see, we are referencing a CDNed version of jQuery, the local qunit files we downloaded, our source file, and a test js file we haven&#8217;t created yet. The remainder of the HTML will be used by Qunit to display the results.</p>
<h3>Writing Tests</h3>
<p>Writing test in Qunit is pretty straightforward. Since we already have the src/mystuff.js file from above, we can jump right in and create a qunit version of our test cases.</p>
<p><b>src-test/mystuff_qunit.js</b></p>
<pre>module("Sample Test Case");

test("Number plus Zero Equals Number", function(){
	var adder = new myAwesomeApp.MyAwesomeClass();
	equals( adder.add(5,0),5);
});

test("Number plus Number Equals Sum", function(){
	var adder = new myAwesomeApp.MyAwesomeClass();
	equals(adder.add(5,3),8);
});

test("Zero plus Number Equals Number", function(){
	var adder = new myAwesomeApp.MyAwesomeClass();
	equals(adder.add(0,5),5);
});

test("Number plus Negative of Number Equals Zero", function(){
	var adder = new myAwesomeApp.MyAwesomeClass();
	equals(adder.add(5,-5),0);
});

test("Fails miserably", function(){
	ok(false,"miserably");
});</pre>
<p>Qunit&#8217;s <i>equals</i> method has it&#8217;s actual and expected arguments reversed from jsTestDriver, instead expecting them in this order: <i>Qunit.equals(actual, expected)</i>. I didn&#8217;t originally notice this and had to update both the jsTestDriver test mapping script and the sample above (here and in bitbucket).</p>
<h3>Running Tests</h3>
<p>Opening the testrunner html file, we should now see it display a block for each test that we have defined above.</p>
<div style="text-align: center; margin: 1em; color: #666666; font-size: 80%">
<img src="http://tiernok.com/LTDBlog/jsunittest/qunit.png" alt="QUnit Results" /><br />
QUnit Results
</div>
<p>Failed tests automatically display details. Any test can be toggled open/closed by clicking it&#8217;s name, and a handy &#8220;rerun&#8221; button lets us re-run a single test.</p>
<h2>Combining Them</h2>
<p>By writing a small amount of glue script, I was able to re-use my jsTestDriver tests in Qunit. Since I am currently only using a small subset of assertions and using the object literal method, the glue script is limited to only exactly what I needed.</p>
<p>Add this file to the top level folder:<br />
<b>jsTestDriverInQunit.js</b></p>
<pre>/* bare minimum to run jsTestDriver tests as Qunit tests */
function TestCase(name, tests){
        if(tests != null)
                module(name);
        for(var key in tests){
                if(tests[key] instanceof Function &amp;&amp; key.indexOf("test") == 0){
                        test(key,tests[key]);
                }
        }
        return function(){};
}

function assertEquals(arg0,arg1){
        equals(arg1,arg0);
}
function fail(msg){
        ok(false,msg);
}</pre>
<p>And update the testrunner HTML file we created to look like this:</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="html4strict"><thead><tr><td colspan="2"  class="head">HTML</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
</pre></td><td class="de1"><pre class="de1"><span class="sc2">&lt;DOCTYPE html&gt;</span>
<span class="sc2">&lt;<span class="kw2">html</span>&gt;</span>
<span class="sc2">&lt;<span class="kw2">head</span>&gt;</span>
&nbsp; &nbsp; <span class="sc2">&lt;<span class="kw2">script</span> <span class="kw3">src</span><span class="sy0">=</span><span class="st0">&quot;http://code.jquery.com/jquery-1.6.4.min.js&quot;</span> <span class="kw3">type</span><span class="sy0">=</span><span class="st0">&quot;text/javascript&quot;</span>&gt;&lt;<span class="sy0">/</span><span class="kw2">script</span>&gt;</span>
&nbsp; &nbsp; <span class="sc2">&lt;<span class="kw2">script</span> <span class="kw3">src</span><span class="sy0">=</span><span class="st0">&quot;qunit.js&quot;</span> <span class="kw3">type</span><span class="sy0">=</span><span class="st0">&quot;text/javascript&quot;</span>&gt;&lt;<span class="sy0">/</span><span class="kw2">script</span>&gt;</span>
&nbsp; &nbsp; <span class="sc2">&lt;<span class="kw2">script</span> <span class="kw3">src</span><span class="sy0">=</span><span class="st0">&quot;jsTestDriverInQunit.js&quot;</span> <span class="kw3">type</span><span class="sy0">=</span><span class="st0">&quot;text/javascript&quot;</span>&gt;&lt;<span class="sy0">/</span><span class="kw2">script</span>&gt;</span>
&nbsp; &nbsp; <span class="sc2">&lt;<span class="kw2">link</span> <span class="kw3">rel</span><span class="sy0">=</span><span class="st0">&quot;stylesheet&quot;</span> <span class="kw3">media</span><span class="sy0">=</span><span class="st0">&quot;all&quot;</span> <span class="kw3">href</span><span class="sy0">=</span><span class="st0">&quot;qunit.css&quot;</span> <span class="sy0">/</span>&gt;</span>
&nbsp;
&nbsp; &nbsp; <span class="sc2">&lt;<span class="kw2">script</span> <span class="kw3">src</span><span class="sy0">=</span><span class="st0">&quot;src/mystuff.js&quot;</span> <span class="kw3">type</span><span class="sy0">=</span><span class="st0">&quot;text/javascript&quot;</span>&gt;&lt;<span class="sy0">/</span><span class="kw2">script</span>&gt;</span>
&nbsp; &nbsp; <span class="sc2">&lt;<span class="kw2">script</span> <span class="kw3">src</span><span class="sy0">=</span><span class="st0">&quot;src-test/mystuff.js&quot;</span> <span class="kw3">type</span><span class="sy0">=</span><span class="st0">&quot;text/javascript&quot;</span>&gt;&lt;<span class="sy0">/</span><span class="kw2">script</span>&gt;</span>
<span class="sc2">&lt;<span class="sy0">/</span><span class="kw2">head</span>&gt;</span>
<span class="sc2">&lt;<span class="kw2">body</span>&gt;</span>
&nbsp; &nbsp; <span class="sc2">&lt;<span class="kw2">h1</span> <span class="kw3">id</span><span class="sy0">=</span><span class="st0">&quot;qunit-header&quot;</span>&gt;</span>MyStuff<span class="sc2">&lt;<span class="sy0">/</span><span class="kw2">h1</span>&gt;</span>
&nbsp; &nbsp; <span class="sc2">&lt;<span class="kw2">h2</span> <span class="kw3">id</span><span class="sy0">=</span><span class="st0">&quot;qunit-banner&quot;</span>&gt;&lt;<span class="sy0">/</span><span class="kw2">h2</span>&gt;</span>
&nbsp; &nbsp; <span class="sc2">&lt;<span class="kw2">h2</span> <span class="kw3">id</span><span class="sy0">=</span><span class="st0">&quot;qunit-userAgent&quot;</span>&gt;&lt;<span class="sy0">/</span><span class="kw2">h2</span>&gt;</span>
&nbsp; &nbsp; <span class="sc2">&lt;<span class="kw2">ol</span> <span class="kw3">id</span><span class="sy0">=</span><span class="st0">&quot;qunit-tests&quot;</span>&gt;&lt;<span class="sy0">/</span><span class="kw2">ol</span>&gt;</span>
<span class="sc2">&lt;<span class="sy0">/</span><span class="kw2">body</span>&gt;</span>
<span class="sc2">&lt;<span class="sy0">/</span><span class="kw2">html</span>&gt;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">&lt;DOCTYPE html&gt;
&lt;html&gt;
&lt;head&gt;
	&lt;script src="http://code.jquery.com/jquery-1.6.4.min.js" type="text/javascript"&gt;&lt;/script&gt;
	&lt;script src="qunit.js" type="text/javascript"&gt;&lt;/script&gt;
	&lt;script src="jsTestDriverInQunit.js" type="text/javascript"&gt;&lt;/script&gt;
	&lt;link rel="stylesheet" media="all" href="qunit.css" /&gt;

	&lt;script src="src/mystuff.js" type="text/javascript"&gt;&lt;/script&gt;
	&lt;script src="src-test/mystuff.js" type="text/javascript"&gt;&lt;/script&gt;
&lt;/head&gt;
&lt;body&gt;
	&lt;h1 id="qunit-header"&gt;MyStuff&lt;/h1&gt;
	&lt;h2 id="qunit-banner"&gt;&lt;/h2&gt;
	&lt;h2 id="qunit-userAgent"&gt;&lt;/h2&gt;
	&lt;ol id="qunit-tests"&gt;&lt;/ol&gt;
&lt;/body&gt;
&lt;/html&gt;</pre></div></div>

<p>And now whether we run the jsTestDriver client/server or open the Qunit file, we will be running the same exact set of tests.</p>
<p>There is also a <a href="http://code.google.com/p/js-test-driver/wiki/QUnitAdapter" title="Go to the QUnitAdapter project">project</a> that translates Qunit tests into tests that can be run with jsTestDriver.</p>
<p>All of the source code for this post (as well as the content of a couple programming katas) can be found in my <a href="https://bitbucket.org/tarwn/katas.javascript/src" title="Go to the source for the post">javascript repository</a> on BitBucket. The folder structure is slightly different to cut down on duplication of resources.</p>
]]></content:encoded>
			<wfw:commentRss>/index.php/webdev/uidevelopment/javascript/getting-started-with-javascript-unit/feed/</wfw:commentRss>
		<slash:comments>6</slash:comments>
		</item>
		<item>
		<title>Google realizes that JavaScript is a dead end programming language, to be replaced by Dart a new language</title>
		<link>/index.php/webdev/webdesigngraphicsstyling/google-realizes-that-javascript-is/</link>
		<comments>/index.php/webdev/webdesigngraphicsstyling/google-realizes-that-javascript-is/#comments</comments>
		<pubDate>Sun, 11 Sep 2011 20:57:00 +0000</pubDate>
		<dc:creator><![CDATA[SQLDenis]]></dc:creator>
				<category><![CDATA[AJAX]]></category>
		<category><![CDATA[Javascript]]></category>
		<category><![CDATA[Web Design, Graphics and Styling]]></category>
		<category><![CDATA[dart]]></category>
		<category><![CDATA[javascript]]></category>
		<category><![CDATA[programming]]></category>
		<category><![CDATA[web]]></category>

		<guid isPermaLink="false">/index.php/2011/09/google-realizes-that-javascript-is/</guid>
		<description><![CDATA[All the way back in 2010 Google realized that JavaScript is a dead end programming language.

Here is what was posted on the com.googlegroups.google-caja-discuss list

Javascript has fundamental flaws that cannot be fixed merely by evolving the
lan&#8230;]]></description>
				<content:encoded><![CDATA[<p>All the way back in 2010 Google realized that JavaScript is a dead end programming language.</p>
<p>Here is what was posted on the <a href="http://markmail.org/message/uro3jtoitlmq6x7t">com.googlegroups.google-caja-discuss</a> list</p>
<blockquote><p>Javascript has fundamental flaws that cannot be fixed merely by evolving the<br />
language.  We&#8217;ll adopt a two-pronged strategy for the future of Javascript:</p>
<p>   &#8211; Harmony (low risk/low reward): continue working in conjunction with<br />
   TC39 (the EcmaScript standards body) to evolve Javascript<br />
   &#8211; Dash (high risk/high reward): Develop a new language (called Dash) that<br />
   aims to maintain the dynamic nature of Javascript but have a better<br />
   performance profile and be amenable to tooling for large projects. Push for<br />
   Dash to become an open standard and be adopted by other browsers. Developers<br />
   using Dash tooling will be able to use a cross-compiler to target Javascript<br />
   for browsers that do not support Dash natively.</p></blockquote>
<p>A new language will be announced at the goto conference named Dart, the keynote will be:  <a href="http://gotocon.com/aarhus-2011/presentation/Opening%20Keynote:%20Dart,%20a%20new%20programming%20language%20for%20structured%20web%20programming">Opening Keynote: Dart, a new programming language for structured web programming</a></p>
<p>Assuming that Dash is now called Dart, here is what it is supposed to do, again according to the posting on the com.googlegroups.google-caja-discuss list</p>
<blockquote><p>Dash is the leapfrog effort that is designed to be a clean break from<br />
Javascript.  It will seek to keep the parts that have made the Internet so<br />
successful, but fill in holes everyone agrees it has.</p>
<p>Dash is designed with three perspectives in mind:</p>
<p>   &#8211; Performance &#8212; Dash is designed with performance characteristics in<br />
   mind, so that it is possible to create VMs that do not have the performance<br />
   problems that all EcmaScript VMs must have.<br />
   &#8211; Developer Usability &#8212; Dash is designed to keep the dynamic,<br />
   easy-to-get-started, no-compile nature of Javascript that has made the web<br />
   platform the clear winner for hobbyist developers.<br />
   &#8211; Ability to be Tooled &#8212; Dash is designed to be more easily tooled (e.g.<br />
   with optional types) for large-scale projects that require<br />
   code-comprehension features such as refactoring and finding callsites.<br />
    Dash, however, does not require tooling to be effective&#8211;small-scale<br />
   developers may still be satisfied with a text editor.</p>
<p>Dash is also designed to be securable, where that ability does not seriously<br />
conflict with the three main goals.</p>
<p>Dash will be designed to be consumed in a number of locations:</p>
<p>   &#8211; Browser VM &#8212; Our aspiration is that Dash will ultimately be a viable<br />
   substitute for Javascript as the native client-side language of choice<br />
   across all browsers.<br />
   &#8211; Front-end Server &#8212; Dash will be designed as a language that can be<br />
   used server-side for things up to the size of Google-scale Front Ends.  This<br />
   will allow large scale applications to unify on a single language for client<br />
   and front end code.<br />
   &#8211; Dash Cross Compiler &#8212; Dash will be designed so that a large subset of<br />
   it can be compiled to target legacy Javascript platforms so teams that<br />
   commit to using Dash do not have to seriously limit their reach.  Platforms<br />
   that have a Dash VM can operate on the original Dash code without<br />
   translation and take advantage of the increased performance.  One of the<br />
   ways we will evolve Harmony is to be a better target for such compiled Dash<br />
   code.</p></blockquote>
<p>So far we don&#8217;t know much about this new language except for what they say about Dash, we can assume that it will address some of the points that were posted in the list which I shared in this post earlier</p>
<p>Even if this new language is better than JavaScript will all the other browser vendors be on board? Remember that Google launched the <a href="http://golang.org/">Go language</a> last year, what happened to that?</p>
<p>I am skeptical about all of this but of course I could be dead wrong</p>
<p>Time will tell&#8230;&#8230;&#8230;</p>
]]></content:encoded>
			<wfw:commentRss>/index.php/webdev/webdesigngraphicsstyling/google-realizes-that-javascript-is/feed/</wfw:commentRss>
		<slash:comments>1</slash:comments>
		</item>
		<item>
		<title>What Does a Web Developer Need To Know</title>
		<link>/index.php/webdev/uidevelopment/what-does-a-web-developer/</link>
		<comments>/index.php/webdev/uidevelopment/what-does-a-web-developer/#comments</comments>
		<pubDate>Tue, 28 Jun 2011 09:54:00 +0000</pubDate>
		<dc:creator><![CDATA[Eli Weinstock-Herman (tarwn)]]></dc:creator>
				<category><![CDATA[AJAX]]></category>
		<category><![CDATA[Javascript]]></category>
		<category><![CDATA[Server Programming]]></category>
		<category><![CDATA[UI Development]]></category>
		<category><![CDATA[XHTML and CSS]]></category>
		<category><![CDATA[asp.net]]></category>
		<category><![CDATA[competency]]></category>
		<category><![CDATA[css]]></category>
		<category><![CDATA[design]]></category>
		<category><![CDATA[html]]></category>
		<category><![CDATA[javascript]]></category>
		<category><![CDATA[jsp]]></category>
		<category><![CDATA[php]]></category>
		<category><![CDATA[seo]]></category>
		<category><![CDATA[table layout]]></category>
		<category><![CDATA[w3c]]></category>

		<guid isPermaLink="false">/index.php/2011/06/what-does-a-web-developer/</guid>
		<description><![CDATA[What is a web developer? Recently I was involved in a discussion about the skills a web developer is expected to have and how interesting it has been to watch common bad practices (like table layout and SQL injection) continue to spread. So in the nature of Denis's What does a SQL Server developer need to know? post, I present the web developer breakdown.]]></description>
				<content:encoded><![CDATA[<p>What is a web developer? Recently I was involved in a discussion about the skills a web developer is expected to have and how interesting it has been to watch common bad practices (like table layout and SQL injection) continue to spread. So in the nature of Denis&#8217;s <a href="/index.php/DataMgmt/DBProgramming/MSSQLServer/what-does-a-sql-server" title="Read Denis's post">What does a SQL Server developer need to know?</a> post, I present the web developer breakdown.</p>
<h2>What Level Am I?</h2>
<p>Rather than try and attach years of experience to this scale, I&#8217;m going to present a list of major areas and skills, questions, or topics in each area. I&#8217;ve tried to capture whether I feel a skill is required to be an Intermediate or Advanced web developer. </p>
<p>I put this list together based on my own experience, 20-30 web developer interview lists, and some feedback from others.</p>
<p>Beginner: Knows some of the items on the list<br />
Intermediate: Knows most intermediate items and some advanced<br />
Advanced: Knows almost everything on the list</p>
<style>
.oneshottable { border: 1px solid #444444; border-collapse: collapse; width: 100%; margin-bottom: 12px; }
.oneshottable th { background-color: #444444; color: white; text-transform: uppercase; font-weight: bold; padding: 4px;font-size: 90%; }
.oneshottable td{ padding: 1px 2px; min-width: 20px; border-bottom: 1px solid #999999; font-size: 80%;}
.oneshottable td.summary:first-child{ text-align: left; font-weight: normal; padding: 3px;}
.oneshottable td:first-child{ text-align: center; font-weight: bold }
</style>
<table class="oneshottable">
<tbody>
<tr>
<th colspan="2">HTML</th>
</tr>
<tr>
<td colspan="2" class="summary">The ability to produce clean, valid, maintainable HTML is critical for a web developer. Current standards include HTML 4.01 (1999), XHTML 1 (2000), and the beginning of HTML 5 (2011)</td>
</tr>
<tr>
<td>I</td>
<td>The effect of doctypes, can code a mostly valid site without looking up the rules</td>
</tr>
<tr>
<td>A</td>
<td>The effect of content-types and how to set or debug them</td>
</tr>
<tr>
<td>I</td>
<td>Knows (and use) all of these without looking them up:  html, head, title, meta, script, style, link, body, a, strong, em, ul, ol, li, table, tr, th, td, h1-5, input, select, option, img, p, span, div, pre, textarea</td>
</tr>
<tr>
<td>A</td>
<td>And most of these: dl/dt/dd, thead, tbody, tfoot, abbr, acronym, applet, object, blockquote, iframe, label, map, optgroup, sup, sub, base, fieldset</td>
</tr>
<tr>
<td>A</td>
<td>Can name/explain at least 15 of the new HTML5 tags</td>
</tr>
<tr>
<td>I</td>
<td>Knows the escapes for &amp;, &lt;, &gt;, &copy;, ASCII characters (though you may have to look up the character code)</td>
</tr>
<tr>
<td>A</td>
<td>Can explain how HTTP works (headers, redirects, header requests, clientside caching)</td>
</tr>
<tr>
<td>I</td>
<td>Knows how to link to a position in a page</td>
</tr>
</tbody>
</table>
<table class="oneshottable">
<tbody>
<tr>
<th colspan="2">CSS</th>
</tr>
<tr>
<td colspan="2" class="summary">Cascading Style Sheets are used to describe the way an HTML documented should be presented. CSS 1 was released in 1996 and the latest published recommendation is CSS 3. </td>
</tr>
<tr>
<td>I</td>
<td>Difference between display inline, block, and inline-block and what the default value is for div, span, a, b</td>
</tr>
<tr>
<td>I</td>
<td>Difference between position static, relative, fixed, absolute</td>
</tr>
<tr>
<td>I</td>
<td>What z-index is and how to use it</td>
</tr>
<tr>
<td>A</td>
<td>How z-index is calculated by individual browsers</td>
</tr>
<tr>
<td>I</td>
<td>Difference between padding and margin</td>
</tr>
<tr>
<td>I</td>
<td>Difference between display: none and visibility: hidden</td>
</tr>
<tr>
<td>I</td>
<td>Purpose and use of &#8220;media&#8221;</td>
</tr>
<tr>
<td>I</td>
<td>Able to describe and calculate specificity</td>
</tr>
<tr>
<td>I</td>
<td>Knows at least a few attribute selectors</td>
</tr>
<tr>
<td>A</td>
<td>Can describe pseudo-classes and know many without looking them up</td>
</tr>
</tbody>
</table>
<table class="oneshottable">
<tbody>
<tr>
<th colspan="2">Javascript</th>
</tr>
<tr>
<td colspan="2" class="summary">Javascript has become the defacto scripting language for web browsers, one of only a few ways to create client-side interactions consistently across available browsers. JavaScript was first shipped in 1995 as part of the Netscape browser.</td>
</tr>
<tr>
<td>I</td>
<td>How to write a basic function, inline event handler, and a non-inline event handler (raw or w/ a package)</td>
</tr>
<tr>
<td>I</td>
<td>Can write one or or more methods to make an AJAX call with reference material</td>
</tr>
<tr>
<td>A</td>
<td>Can write one or or more methods to make an AJAX call without reference material</td>
</tr>
<tr>
<td>I</td>
<td>Knows at least one framework (jQuery, Prototype, YUI, Dojo, MooTools, …)</td>
</tr>
<tr>
<td>I</td>
<td>Can create classes (function or literal)</td>
</tr>
<tr>
<td>A</td>
<td>Knows and can use prototype (little &#8216;p&#8217;, not the framework)</td>
</tr>
<tr>
<td>I</td>
<td>Can dynamically find and add elements to the page using DOM or a framework (without looking it up)</td>
</tr>
</tbody>
</table>
<table class="oneshottable">
<tbody>
<tr>
<th colspan="2">Tools</th>
</tr>
<tr>
<td colspan="2" class="summary">Along with standard languages, there are numerous tools available to help validate, evaluate, and improve existing websites. Similar to a spell-checking tool in a word processing application, these tools can help us catch errors and oversights in our websites.</td>
</tr>
<tr>
<td>A</td>
<td>Can name at least one site, application, or organization that has an HTML validation tool</td>
</tr>
<tr>
<td>A</td>
<td>Can name at least one site, application, or organization that has an CSS validation tool</td>
</tr>
<tr>
<td>A</td>
<td>Can name at least one site, application, or organization that has an SEO scoring tool</td>
</tr>
<tr>
<td>A</td>
<td>Can name at least one site, application, or organization that has an Accessibility evaluation tool</td>
</tr>
</tbody>
</table>
<table class="oneshottable">
<tbody>
<tr>
<th colspan="2">Server-Side Programming</th>
</tr>
<tr>
<td colspan="2" class="summary">The shift to dynamic, server-generated websites in the mid-to-late 90&#8217;s was responsible for shifting the focus of the web from document retrieval to interactivity, commerce, and services.</td>
</tr>
<tr>
<td>I</td>
<td>Knows at least 2 server-side technologies &#8211; Perl, PHP, ASP 3, JSP, Java Servlets, CFM, ASP.Net (WebPages, Web Forms, MVC), Ruby on Rails, Python (WSGI, CGI, mod_python), etc</td>
</tr>
<tr>
<td>A</td>
<td>Knows more than 4 of the above list</td>
</tr>
<tr>
<td>I</td>
<td>Can explain difference between stateful and stateless development</td>
</tr>
<tr>
<td>I</td>
<td>Can explain how sessions work</td>
</tr>
<tr>
<td>I</td>
<td>Can explain how cookies work</td>
</tr>
<tr>
<td>I</td>
<td>Difference between GET and POST and how known languages present this information</td>
</tr>
<tr>
<td>I</td>
<td>Pros and cons of client-side vs server-side validation</td>
</tr>
<tr>
<td>A</td>
<td>Understands the basics of (SOAP) web services, how to implement them, and how they work</td>
</tr>
</tbody>
</table>
<table class="oneshottable">
<tbody>
<tr>
<th colspan="2">Data</th>
</tr>
<tr>
<td colspan="2" class="summary">Most web applications have some form of data store behind them. Several forms of storage and caching mechanisms exist and being able to build a basic system often requires at least a basic level of knowledge in these areas.</td>
</tr>
<tr>
<td>I</td>
<td>Can build databases, define queries, and debug on at least one major RDBMS</td>
</tr>
<tr>
<td>A</td>
<td>Knows basics for normalization and can create a basic data model to describe their database</td>
</tr>
<tr>
<td>I</td>
<td>Can work with at least one NoSQL database or data cache</td>
</tr>
<tr>
<td>I</td>
<td>Can write match and search regular expressions</td>
</tr>
<tr>
<td>A</td>
<td>Can write match and search regular expressions without a reference in more than one language</td>
</tr>
</tbody>
</table>
<table class="oneshottable">
<tbody>
<tr>
<th colspan="2">Web Server</th>
</tr>
<tr>
<td colspan="2" class="summary">Using a server-side technology to generate HTML generally requires a web server. The two largest install bases are Microsoft IIS 7.5 and Apache 2.2.</td>
</tr>
<tr>
<td>I</td>
<td>Understands the basics of how the web server (Apache or IIS) works and can create a new site</td>
</tr>
<tr>
<td>A</td>
<td>Can explain URL rewriting and implement on at least one system</td>
</tr>
</tbody>
</table>
<table class="oneshottable">
<tbody>
<tr>
<th colspan="2">Performance</th>
</tr>
<tr>
<td colspan="2" class="summary">Tuning a website to run in an optimal fashion can sometimes be the difference between paying for a single server or multiple servers, between a responsive site and one that fails under load. </td>
</tr>
<tr>
<td>A</td>
<td>Understands and can implement data caching</td>
</tr>
<tr>
<td>A</td>
<td>Understands and can implement page caching</td>
</tr>
<tr>
<td>A</td>
<td>Can use one or more page performance or load testing tools</td>
</tr>
<tr>
<td>I</td>
<td>Tools/methods and purpose of minification of JS and CSS</td>
</tr>
<tr>
<td>A</td>
<td>Understands and uses CDNs when possible</td>
</tr>
</tbody>
</table>
<table class="oneshottable">
<tbody>
<tr>
<th colspan="2">Testing</th>
</tr>
<tr>
<td colspan="2" class="summary">As the technology behind the web has developed, tools to help automate some of the repetition involved in testing websites has likewise evolved.</td>
</tr>
<tr>
<td>A</td>
<td>Can use one or more automated tools for interface testing</td>
</tr>
</tbody>
</table>
<table class="oneshottable">
<tbody>
<tr>
<th colspan="2">Security</th>
</tr>
<tr>
<td colspan="2" class="summary">As recent news stories have reminded us, security is an ongoing requirement for websites. Understanding the basics of security can help us build security in from day one rather than trying to squeeze it in at the end.</td>
</tr>
<tr>
<td>I</td>
<td>SQL Injection &#8211; what it is, how to prevent it</td>
</tr>
<tr>
<td>I</td>
<td>Cross site scripting &#8211; what it is, how to prevent it</td>
</tr>
<tr>
<td>A</td>
<td>Cross Site Request Forgery &#8211; what it is, how to prevent it</td>
</tr>
<tr>
<td>I</td>
<td>Understand hashing, salting, and importance of storing critical information in hashed or encrypted formats</td>
</tr>
<tr>
<td>I</td>
<td>Cookies &#8211; Understand session hijacking and dangers of storing user information or identification</td>
</tr>
</tbody>
</table>
<table class="oneshottable">
<tbody>
<tr>
<th colspan="2">Design Principles</th>
</tr>
<tr>
<td colspan="2" class="summary">Being able to implement common design patterns without restoring to hacks is an important part of being a web developer (as opposed to a hobbiest). While it may prove impossible to build a site without some form of hack, hacks should not be the only tool in the toolbox.</td>
</tr>
<tr>
<td>I</td>
<td>Table Layout &#8211; what it is, why it&#8217;s bad (at least three reasons)</td>
</tr>
<tr>
<td>A</td>
<td>Can implement multi-column fixed, fluid, and elastic layouts without reference material</td>
</tr>
<tr>
<td>A</td>
<td>Table Layout &#8211; and why using CSS for table layout (display: table, table-cell, etc) is not bad</td>
</tr>
<tr>
<td>A</td>
<td>Can explain and implement fixed, fluid (liquid), and elastic layouts</td>
</tr>
<tr>
<td>A</td>
<td>Can implement multi-column fixed, fluid, and elastic layouts without reference material</td>
</tr>
</tbody>
</table>
<table class="oneshottable">
<tbody>
<tr>
<th colspan="2">Meta</th>
</tr>
<tr>
<td colspan="2" class="summary">Metadata (data about data) is critical to helping people and search engines find resources in our sites and applications.</td>
</tr>
<tr>
<td>I</td>
<td>Knows purpose of description, keyword tags</td>
</tr>
<tr>
<td>I</td>
<td>Knows purpose of robots.txt file</td>
</tr>
<tr>
<td>A</td>
<td>Knows purpose and can implement sitemap.xml file</td>
</tr>
<tr>
<td>A</td>
<td>You know the basics for SEO</td>
</tr>
<tr>
<td>A</td>
<td>You&#8217;ve implemented some form of browser analytics</td>
</tr>
<tr>
<td>A</td>
<td>Microformats </td>
</tr>
<tr>
<td>A</td>
<td>You know what WCAG is and how to test conformance</td>
</tr>
<tr>
<td>A</td>
<td>You know what semantic markup is</td>
</tr>
</tbody>
</table>
<table class="oneshottable">
<tbody>
<tr>
<th colspan="2">Disqualifiers/Limiters</th>
</tr>
<tr>
<td colspan="2" class="summary">These are topics I consider to be critical to advancement. They reflect common misunderstandings or bad practices that an experienced web developer has to grow past in order to advance their skillset.</td>
</tr>
<tr>
<td>B</td>
<td>Backbutton doesn&#8217;t work w/ your sites, would prefer to disable it altogether</td>
</tr>
<tr>
<td>B</td>
<td>You protect images from download by implementing right click intercepts, layering transparent images in top, etc</td>
</tr>
<tr>
<td>I</td>
<td>Implement performance tuning without before/after measurements</td>
</tr>
<tr>
<td>B</td>
<td>Table layout</td>
</tr>
</tbody>
</table>
<p><em>Note: Disqualifiers indicate that you won&#8217;t progress past [B]eginner or [I]ntermediate levels until you stop doing them and understand why doing them was a bad idea</em></p>
<h2>What&#8217;s Missing</h2>
<p>There are several things that were intentionally left out of this list. Some were hard to quantity in a general manner, others I was unsure how relevant they were. And I&#8217;m sure people will be kind enough to add additional oversights and revisions below.</p>
<p>Missing Categories:</p>
<ul>
<li>Level of knowledge with server-side languages</li>
<li>Project management skills</li>
<li>Documentation and Modeling skills</li>
<li>Design and Graphics skills</li>
<li>Application Lifecycle Management &#8211; Source Control, Deployment, etc</li>
</ul>
<p>Extra items that didn&#8217;t make it in:</p>
<ul>
<li>Can implement RSS and ATOM feeds</li>
<li>Can implement a web farm</li>
<li>Implemented single-signon (openID, SAML, etc)</li>
<li>Knows how to implement XML data islands (still relevant?)</li>
<li>Knows how to create DTDs and/or XSDs</li>
<li>Can write regular expressions without a reference</li>
<li>Knows relevant tools for Yahoo (SiteExplorer), Google, Bing for managing site information</li>
<li>Schema.org &#8211; it belongs in the Meta category but I didn&#8217;t know what level of skill, knowledge, or adoption I should include considering it&#8217;s newness and several other factors</li>
</ul>
<p>There is also the fact that we often get caught up maintaining or even adding on to a site that violates many of the skills and standards you see in this list. This doesn&#8217;t prevent us from writing good, clean, semantic sites the rest of the time and being forced to write poor code does not make on inherently less skilled.</p>
<h2>A Brief Digression, or Why an App Dev is Not a Web Dev</h2>
<p>At one point web development was seen as less exciting and far less complex than application development. It is still seen as extremely similar to application development, so much so that it is quite normal to hire a good or great application developer and expect them to be a good or great web developer. </p>
<p>Unfortunately it doesn&#8217;t quite work that way, as web development has grown extremely complex since the first dynamic sites started showing up in the late 90&#8217;s. Doubly unfortunately, web development is based on a stateless model instead of the stateful one most application developers are used to, uses a fluid layout instead of the grid layout, and sneaks a lot of extra communications and caching into the mix. This is a series of paradigm shifts not unlike the one between procedural, object oriented, and functional programming.</p>
]]></content:encoded>
			<wfw:commentRss>/index.php/webdev/uidevelopment/what-does-a-web-developer/feed/</wfw:commentRss>
		<slash:comments>9</slash:comments>
		</item>
		<item>
		<title>Machete &#8211; A scripting runtime for .NET</title>
		<link>/index.php/desktopdev/mstech/machete-a-scripting-runtime-for/</link>
		<comments>/index.php/desktopdev/mstech/machete-a-scripting-runtime-for/#comments</comments>
		<pubDate>Mon, 07 Mar 2011 20:21:00 +0000</pubDate>
		<dc:creator><![CDATA[chaospandion]]></dc:creator>
				<category><![CDATA[C#]]></category>
		<category><![CDATA[Microsoft Technologies]]></category>
		<category><![CDATA[.net]]></category>
		<category><![CDATA[c#]]></category>
		<category><![CDATA[ecmascript]]></category>
		<category><![CDATA[f#]]></category>
		<category><![CDATA[javascript]]></category>
		<category><![CDATA[machete]]></category>
		<category><![CDATA[scripting]]></category>

		<guid isPermaLink="false">/index.php/2011/03/machete-a-scripting-runtime-for/</guid>
		<description><![CDATA[In an attempt to overcome by perfectionism I've decided to open source my long term side project Machete for the world to see. Machete is my own dialect of the ECMAScript 5 standard or as it is more commonly called JavaScript. 


  The compiler is wr&#8230;]]></description>
				<content:encoded><![CDATA[<p>In an attempt to overcome my perfectionism I&#8217;ve decided to open source my long term side project Machete for the world to see. Machete is my own dialect of the ECMAScript 5 standard or as it is more commonly called JavaScript.</p>
<h1>Features</h1>
<p>Cleaner lambda expressions:</p>
<pre style="background-color:#EEEEEE;padding:5px;"><code>var succinct = (x, y) x + y;
var verbose = function (x, y) { return x + y; };</code></pre>
<p>First class iteration support with the foreach loop and generators.</p>
<pre style="background-color:#EEEEEE;padding:5px;"><code>var numbers = generator {
    yield 1;
    yield 2;
    yield 3;
};

foreach (var n in numbers) {
    Output.write(n);
}   

foreach (var e in ["Array", " objects", " are", " iterable", "!"]) {
    Output.write(e);
} 

foreach (var c in "Strings are iterable!") {
    Output.write(c);
}</code></pre>
<h1 style="margin-bottom:10px;margin-top:15px">Implementation</h1>
<ul>
<li>The compiler is written in F# and uses the library <a href="https://bitbucket.org/fparsec/main/overview">FParsec</a>.</li>
<li>The runtime is written in C# and is hosted by .NET.</li>
<li>It currently has over 400 tests with many more on the way.</li>
</ul>
<p>Machete is the product of almost a years worth of research, design, and coding. I have it hosted on GitHub so please stop by and fork the project. I would really love to up my test count dramatically and test cases from the community would be invaluable. Without further ado, the link to my repository.</p>
<p><a href="https://github.com/ChaosPandion/Machete">GitHub Repository For Machete</a></p>
]]></content:encoded>
			<wfw:commentRss>/index.php/desktopdev/mstech/machete-a-scripting-runtime-for/feed/</wfw:commentRss>
		<slash:comments>8</slash:comments>
		</item>
	</channel>
</rss>
