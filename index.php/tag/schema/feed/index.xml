<?xml version="1.0" encoding="UTF-8"?><rss version="2.0"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:atom="http://www.w3.org/2005/Atom"
	xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
	xmlns:slash="http://purl.org/rss/1.0/modules/slash/"
	>

<channel>
	<title>schema &#8211; LessthanDot</title>
	<atom:link href="/index.php/tag/schema/feed/" rel="self" type="application/rss+xml" />
	<link>/</link>
	<description>A Technical Community for IT Professionals</description>
	<lastBuildDate>Sat, 09 Mar 2019 12:50:36 +0000</lastBuildDate>
	<language>en-US</language>
	<sy:updatePeriod>hourly</sy:updatePeriod>
	<sy:updateFrequency>1</sy:updateFrequency>
	<generator>https://wordpress.org/?v=4.6.1</generator>
	<item>
		<title>Intellisense for custom XML in Visual Studio</title>
		<link>/index.php/desktopdev/mstech/vs2012/intellisense-for-custom-xml-in/</link>
		<comments>/index.php/desktopdev/mstech/vs2012/intellisense-for-custom-xml-in/#comments</comments>
		<pubDate>Mon, 06 May 2013 13:44:00 +0000</pubDate>
		<dc:creator><![CDATA[Eli Weinstock-Herman (tarwn)]]></dc:creator>
				<category><![CDATA[Vistual Studio 2012]]></category>
		<category><![CDATA[intellisense]]></category>
		<category><![CDATA[schema]]></category>
		<category><![CDATA[visual studio]]></category>
		<category><![CDATA[xml]]></category>

		<guid isPermaLink="false">/index.php/2013/05/intellisense-for-custom-xml-in/</guid>
		<description><![CDATA[This is one of those things that I only need once every several months and always forget how to do. Working with custom XML in Visual Studio is a whole lot easier with intellisense. Schema errors are highlighted, enumerated values are displayed, and the amount of typing goes from full tag names to just a few characters followed by tab to complete.]]></description>
				<content:encoded><![CDATA[<p>This is one of those things that I only need once every several months and always forget how to do. Working with custom XML in Visual Studio is a whole lot easier with intellisense. Schema errors are highlighted, enumerated values are displayed, and the amount of typing goes from full tag names to just a few characters followed by tab to complete.</p>
<p>There are a few ways to do this, but if you have a schema (XSD) for the file, then here are the steps to make the magic happen.</p>
<h2>Sample Files</h2>
<p>So let&#8217;s assume for the moment that you have the following sample files:</p>
<p><b>AwesomeFile.xml</b></p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="xml"><thead><tr><td colspan="2"  class="head">XML</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
</pre></td><td class="de1"><pre class="de1"><span class="sc3"><span class="re1">&lt;?xml</span> <span class="re0">version</span>=<span class="st0">&quot;1.0&quot;</span> <span class="re0">encoding</span>=<span class="st0">&quot;utf-8&quot;</span> <span class="re2">?&gt;</span></span>
<span class="sc3"><span class="re1">&lt;AwesomeList<span class="re2">&gt;</span></span></span>
&nbsp; &nbsp; <span class="sc3"><span class="re1">&lt;AwesomeItem</span> <span class="re0">AwesomenessFactor</span>=<span class="st0">&quot;11&quot;</span><span class="re2">&gt;</span></span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="sc3"><span class="re1">&lt;AwesomeType<span class="re2">&gt;</span></span></span>Is Awesome<span class="sc3"><span class="re1">&lt;/AwesomeType<span class="re2">&gt;</span></span></span>
&nbsp; &nbsp; <span class="sc3"><span class="re1">&lt;/AwesomeItem<span class="re2">&gt;</span></span></span>
<span class="sc3"><span class="re1">&lt;/AwesomeList<span class="re2">&gt;</span></span></span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">&lt;?xml version="1.0" encoding="utf-8" ?&gt;
&lt;AwesomeList&gt;
	&lt;AwesomeItem AwesomenessFactor="11"&gt;
		&lt;AwesomeType&gt;Is Awesome&lt;/AwesomeType&gt;
	&lt;/AwesomeItem&gt;
&lt;/AwesomeList&gt;</pre></div></div>

<p><b>Awesome.xsd</b></p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="xml"><thead><tr><td colspan="2"  class="head">XML</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
</pre></td><td class="de1"><pre class="de1"><span class="sc3"><span class="re1">&lt;?xml</span> <span class="re0">version</span>=<span class="st0">&quot;1.0&quot;</span> <span class="re0">encoding</span>=<span class="st0">&quot;utf-8&quot;</span><span class="re2">?&gt;</span></span>
<span class="sc3"><span class="re1">&lt;xs:schema</span> <span class="re0">id</span>=<span class="st0">&quot;MyAwesomeSchema&quot;</span></span>
<span class="sc3"> &nbsp; &nbsp;<span class="re0">xmlns:xs</span>=<span class="st0">&quot;http://www.w3.org/2001/XMLSchema&quot;</span><span class="re2">&gt;</span></span>
&nbsp;
&nbsp; &nbsp; <span class="sc3"><span class="re1">&lt;xs:simpleType</span> <span class="re0">name</span>=<span class="st0">&quot;AwesomeLevel&quot;</span><span class="re2">&gt;</span></span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="sc3"><span class="re1">&lt;xs:restriction</span> <span class="re0">base</span>=<span class="st0">&quot;xs:integer&quot;</span><span class="re2">&gt;</span></span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="sc3"><span class="re1">&lt;xs:enumeration</span> <span class="re0">value</span>=<span class="st0">&quot;1&quot;</span><span class="re2">&gt;</span><span class="re1">&lt;/xs:enumeration<span class="re2">&gt;</span></span></span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="sc3"><span class="re1">&lt;xs:enumeration</span> <span class="re0">value</span>=<span class="st0">&quot;5&quot;</span><span class="re2">&gt;</span><span class="re1">&lt;/xs:enumeration<span class="re2">&gt;</span></span></span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="sc3"><span class="re1">&lt;xs:enumeration</span> <span class="re0">value</span>=<span class="st0">&quot;10&quot;</span><span class="re2">&gt;</span><span class="re1">&lt;/xs:enumeration<span class="re2">&gt;</span></span></span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="sc3"><span class="re1">&lt;xs:enumeration</span> <span class="re0">value</span>=<span class="st0">&quot;11&quot;</span><span class="re2">&gt;</span><span class="re1">&lt;/xs:enumeration<span class="re2">&gt;</span></span></span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="sc3"><span class="re1">&lt;/xs:restriction<span class="re2">&gt;</span></span></span>
&nbsp; &nbsp; <span class="sc3"><span class="re1">&lt;/xs:simpleType<span class="re2">&gt;</span></span></span>
&nbsp;
&nbsp; &nbsp; <span class="sc3"><span class="re1">&lt;xs:complexType</span> <span class="re0">name</span>=<span class="st0">&quot;AwesomeElement&quot;</span><span class="re2">&gt;</span></span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="sc3"><span class="re1">&lt;xs:sequence<span class="re2">&gt;</span></span></span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="sc3"><span class="re1">&lt;xs:element</span> <span class="re0">name</span>=<span class="st0">&quot;AwesomeType&quot;</span> <span class="re0">type</span>=<span class="st0">&quot;xs:string&quot;</span><span class="re2">&gt;</span><span class="re1">&lt;/xs:element<span class="re2">&gt;</span></span></span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="sc3"><span class="re1">&lt;/xs:sequence<span class="re2">&gt;</span></span></span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="sc3"><span class="re1">&lt;xs:attribute</span> <span class="re0">name</span>=<span class="st0">&quot;AwesomenessFactor&quot;</span> <span class="re0">type</span>=<span class="st0">&quot;AwesomeLevel&quot;</span> <span class="re0">use</span>=<span class="st0">&quot;required&quot;</span><span class="re2">&gt;</span><span class="re1">&lt;/xs:attribute<span class="re2">&gt;</span></span></span>
&nbsp; &nbsp; <span class="sc3"><span class="re1">&lt;/xs:complexType<span class="re2">&gt;</span></span></span>
&nbsp;
&nbsp; &nbsp; <span class="sc3"><span class="re1">&lt;xs:element</span> <span class="re0">name</span>=<span class="st0">&quot;AwesomeList&quot;</span><span class="re2">&gt;</span></span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="sc3"><span class="re1">&lt;xs:complexType<span class="re2">&gt;</span></span></span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="sc3"><span class="re1">&lt;xs:sequence<span class="re2">&gt;</span></span></span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="sc3"><span class="re1">&lt;xs:element</span> <span class="re0">name</span>=<span class="st0">&quot;AwesomeItem&quot;</span> <span class="re0">type</span>=<span class="st0">&quot;AwesomeElement&quot;</span> <span class="re0">minOccurs</span>=<span class="st0">&quot;0&quot;</span> <span class="re0">maxOccurs</span>=<span class="st0">&quot;unbounded&quot;</span><span class="re2">&gt;</span></span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="sc3"><span class="re1">&lt;/xs:element<span class="re2">&gt;</span></span></span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="sc3"><span class="re1">&lt;/xs:sequence<span class="re2">&gt;</span></span></span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="sc3"><span class="re1">&lt;/xs:complexType<span class="re2">&gt;</span></span></span>
&nbsp; &nbsp; <span class="sc3"><span class="re1">&lt;/xs:element<span class="re2">&gt;</span></span></span>
&nbsp; &nbsp; 
<span class="sc3"><span class="re1">&lt;/xs:schema<span class="re2">&gt;</span></span></span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">&lt;?xml version="1.0" encoding="utf-8"?&gt;
&lt;xs:schema id="MyAwesomeSchema"
    xmlns:xs="http://www.w3.org/2001/XMLSchema"&gt;

	&lt;xs:simpleType name="AwesomeLevel"&gt;
		&lt;xs:restriction base="xs:integer"&gt;
			&lt;xs:enumeration value="1"&gt;&lt;/xs:enumeration&gt;
			&lt;xs:enumeration value="5"&gt;&lt;/xs:enumeration&gt;
			&lt;xs:enumeration value="10"&gt;&lt;/xs:enumeration&gt;
			&lt;xs:enumeration value="11"&gt;&lt;/xs:enumeration&gt;
		&lt;/xs:restriction&gt;
	&lt;/xs:simpleType&gt;

	&lt;xs:complexType name="AwesomeElement"&gt;
		&lt;xs:sequence&gt;
			&lt;xs:element name="AwesomeType" type="xs:string"&gt;&lt;/xs:element&gt;
		&lt;/xs:sequence&gt;
		&lt;xs:attribute name="AwesomenessFactor" type="AwesomeLevel" use="required"&gt;&lt;/xs:attribute&gt;
	&lt;/xs:complexType&gt;

	&lt;xs:element name="AwesomeList"&gt;
		&lt;xs:complexType&gt;
			&lt;xs:sequence&gt;
				&lt;xs:element name="AwesomeItem" type="AwesomeElement" minOccurs="0" maxOccurs="unbounded"&gt;
				&lt;/xs:element&gt;
			&lt;/xs:sequence&gt;
		&lt;/xs:complexType&gt;
	&lt;/xs:element&gt;
	
&lt;/xs:schema&gt;</pre></div></div>

<p>Visual Studio gives us handy intellisense suggestions and warnings when we&#8217;re writing the schema because we have specified a namespace it knows, but how do we get that usefulness when we&#8217;re adding more content to our awesome XML file?</p>
<h2>More Cowbell</h2>
<p>Turns out, adding this functionality is pretty easy. Visual Studio is smart enough to use know schemas, so all we have to do is provide the information that makes our schema known and relevant for our XML file. </p>
<p>For this example I am assuming that the two files are in the same folder. I&#8217;ve also made the file complex enough that the additions we make should work for far more complex setups also.</p>
<p>Here&#8217;s the steps:</p>
<ol>
<li>Define a target namespace on the schema</li>
<li>Define the empty namespace of the schema as this namespace</li>
<li>set attributeFormDefault to unqualified so attributes in our XML file won&#8217;t require namespace declarations</li>
<li>Add the namespace declaration to the XML file</li>
</ol>
<p>Updating our files (and adding comments to reflect the list above), we have:</p>
<p><b>AwesomeFile.xml</b></p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="xml"><thead><tr><td colspan="2"  class="head">XML</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
</pre></td><td class="de1"><pre class="de1"><span class="sc3"><span class="re1">&lt;?xml</span> <span class="re0">version</span>=<span class="st0">&quot;1.0&quot;</span> <span class="re0">encoding</span>=<span class="st0">&quot;utf-8&quot;</span> <span class="re2">?&gt;</span></span>
<span class="sc3"><span class="re1">&lt;AwesomeList</span> <span class="re0">xmlns</span>=<span class="st0">&quot;my://awesomeness&quot;</span><span class="re2">&gt;</span></span> <span class="sc-1">&lt;!-- (4) --&gt;</span>
&nbsp; &nbsp; <span class="sc3"><span class="re1">&lt;AwesomeItem</span> <span class="re0">AwesomenessFactor</span>=<span class="st0">&quot;11&quot;</span><span class="re2">&gt;</span></span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="sc3"><span class="re1">&lt;AwesomeType<span class="re2">&gt;</span></span></span>Is Awesome<span class="sc3"><span class="re1">&lt;/AwesomeType<span class="re2">&gt;</span></span></span>
&nbsp; &nbsp; <span class="sc3"><span class="re1">&lt;/AwesomeItem<span class="re2">&gt;</span></span></span>
<span class="sc3"><span class="re1">&lt;/AwesomeList<span class="re2">&gt;</span></span></span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">&lt;?xml version="1.0" encoding="utf-8" ?&gt;
&lt;AwesomeList xmlns="my://awesomeness"&gt; &lt;!-- (4) --&gt;
	&lt;AwesomeItem AwesomenessFactor="11"&gt;
		&lt;AwesomeType&gt;Is Awesome&lt;/AwesomeType&gt;
	&lt;/AwesomeItem&gt;
&lt;/AwesomeList&gt;</pre></div></div>

<p><b>Awesome.xsd</b></p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="xml"><thead><tr><td colspan="2"  class="head">XML</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
</pre></td><td class="de1"><pre class="de1"><span class="sc3"><span class="re1">&lt;?xml</span> <span class="re0">version</span>=<span class="st0">&quot;1.0&quot;</span> <span class="re0">encoding</span>=<span class="st0">&quot;utf-8&quot;</span><span class="re2">?&gt;</span></span>
<span class="sc3"><span class="re1">&lt;xs:schema</span> <span class="re0">id</span>=<span class="st0">&quot;MyAwesomeSchema&quot;</span></span>
<span class="sc3"> &nbsp; &nbsp;<span class="re0">xmlns:xs</span>=<span class="st0">&quot;http://www.w3.org/2001/XMLSchema&quot;</span></span>
<span class="sc3">&nbsp; &nbsp; &nbsp; &nbsp; <span class="re0">targetNamespace</span>=<span class="st0">&quot;my://awesomeness&quot;</span> &lt;!-- <span class="br0">&#40;</span>1<span class="br0">&#41;</span> --<span class="re2">&gt;</span></span>
&nbsp; &nbsp; &nbsp; &nbsp; xmlns=&quot;my://awesomeness&quot; <span class="sc-1">&lt;!-- (2) --&gt;</span>
&nbsp; &nbsp; &nbsp; &nbsp; attributeFormDefault=&quot;unqualified&quot; <span class="sc-1">&lt;!-- (3) --&gt;</span>
&nbsp; &nbsp; &nbsp; &nbsp; elementFormDefault=&quot;qualified&quot;&gt;
&nbsp;
&nbsp; &nbsp; <span class="sc3"><span class="re1">&lt;xs:simpleType</span> <span class="re0">name</span>=<span class="st0">&quot;AwesomeLevel&quot;</span><span class="re2">&gt;</span></span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="sc3"><span class="re1">&lt;xs:restriction</span> <span class="re0">base</span>=<span class="st0">&quot;xs:integer&quot;</span><span class="re2">&gt;</span></span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="sc3"><span class="re1">&lt;xs:enumeration</span> <span class="re0">value</span>=<span class="st0">&quot;1&quot;</span><span class="re2">&gt;</span><span class="re1">&lt;/xs:enumeration<span class="re2">&gt;</span></span></span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="sc3"><span class="re1">&lt;xs:enumeration</span> <span class="re0">value</span>=<span class="st0">&quot;5&quot;</span><span class="re2">&gt;</span><span class="re1">&lt;/xs:enumeration<span class="re2">&gt;</span></span></span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="sc3"><span class="re1">&lt;xs:enumeration</span> <span class="re0">value</span>=<span class="st0">&quot;10&quot;</span><span class="re2">&gt;</span><span class="re1">&lt;/xs:enumeration<span class="re2">&gt;</span></span></span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="sc3"><span class="re1">&lt;xs:enumeration</span> <span class="re0">value</span>=<span class="st0">&quot;11&quot;</span><span class="re2">&gt;</span><span class="re1">&lt;/xs:enumeration<span class="re2">&gt;</span></span></span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="sc3"><span class="re1">&lt;/xs:restriction<span class="re2">&gt;</span></span></span>
&nbsp; &nbsp; <span class="sc3"><span class="re1">&lt;/xs:simpleType<span class="re2">&gt;</span></span></span>
&nbsp;
&nbsp; &nbsp; <span class="sc3"><span class="re1">&lt;xs:complexType</span> <span class="re0">name</span>=<span class="st0">&quot;AwesomeElement&quot;</span><span class="re2">&gt;</span></span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="sc3"><span class="re1">&lt;xs:sequence<span class="re2">&gt;</span></span></span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="sc3"><span class="re1">&lt;xs:element</span> <span class="re0">name</span>=<span class="st0">&quot;AwesomeType&quot;</span> <span class="re0">type</span>=<span class="st0">&quot;xs:string&quot;</span><span class="re2">&gt;</span><span class="re1">&lt;/xs:element<span class="re2">&gt;</span></span></span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="sc3"><span class="re1">&lt;/xs:sequence<span class="re2">&gt;</span></span></span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="sc3"><span class="re1">&lt;xs:attribute</span> <span class="re0">name</span>=<span class="st0">&quot;AwesomenessFactor&quot;</span> <span class="re0">type</span>=<span class="st0">&quot;AwesomeLevel&quot;</span> <span class="re0">use</span>=<span class="st0">&quot;required&quot;</span><span class="re2">&gt;</span><span class="re1">&lt;/xs:attribute<span class="re2">&gt;</span></span></span>
&nbsp; &nbsp; <span class="sc3"><span class="re1">&lt;/xs:complexType<span class="re2">&gt;</span></span></span>
&nbsp;
&nbsp; &nbsp; <span class="sc3"><span class="re1">&lt;xs:element</span> <span class="re0">name</span>=<span class="st0">&quot;AwesomeList&quot;</span><span class="re2">&gt;</span></span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="sc3"><span class="re1">&lt;xs:complexType<span class="re2">&gt;</span></span></span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="sc3"><span class="re1">&lt;xs:sequence<span class="re2">&gt;</span></span></span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="sc3"><span class="re1">&lt;xs:element</span> <span class="re0">name</span>=<span class="st0">&quot;AwesomeItem&quot;</span> <span class="re0">type</span>=<span class="st0">&quot;AwesomeElement&quot;</span> <span class="re0">minOccurs</span>=<span class="st0">&quot;0&quot;</span> <span class="re0">maxOccurs</span>=<span class="st0">&quot;unbounded&quot;</span><span class="re2">&gt;</span></span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="sc3"><span class="re1">&lt;/xs:element<span class="re2">&gt;</span></span></span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="sc3"><span class="re1">&lt;/xs:sequence<span class="re2">&gt;</span></span></span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="sc3"><span class="re1">&lt;/xs:complexType<span class="re2">&gt;</span></span></span>
&nbsp; &nbsp; <span class="sc3"><span class="re1">&lt;/xs:element<span class="re2">&gt;</span></span></span>
&nbsp;
<span class="sc3"><span class="re1">&lt;/xs:schema<span class="re2">&gt;</span></span></span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">&lt;?xml version="1.0" encoding="utf-8"?&gt;
&lt;xs:schema id="MyAwesomeSchema"
    xmlns:xs="http://www.w3.org/2001/XMLSchema"
		targetNamespace="my://awesomeness" &lt;!-- (1) --&gt;
		xmlns="my://awesomeness" &lt;!-- (2) --&gt;
		attributeFormDefault="unqualified" &lt;!-- (3) --&gt;
		elementFormDefault="qualified"&gt;

	&lt;xs:simpleType name="AwesomeLevel"&gt;
		&lt;xs:restriction base="xs:integer"&gt;
			&lt;xs:enumeration value="1"&gt;&lt;/xs:enumeration&gt;
			&lt;xs:enumeration value="5"&gt;&lt;/xs:enumeration&gt;
			&lt;xs:enumeration value="10"&gt;&lt;/xs:enumeration&gt;
			&lt;xs:enumeration value="11"&gt;&lt;/xs:enumeration&gt;
		&lt;/xs:restriction&gt;
	&lt;/xs:simpleType&gt;

	&lt;xs:complexType name="AwesomeElement"&gt;
		&lt;xs:sequence&gt;
			&lt;xs:element name="AwesomeType" type="xs:string"&gt;&lt;/xs:element&gt;
		&lt;/xs:sequence&gt;
		&lt;xs:attribute name="AwesomenessFactor" type="AwesomeLevel" use="required"&gt;&lt;/xs:attribute&gt;
	&lt;/xs:complexType&gt;

	&lt;xs:element name="AwesomeList"&gt;
		&lt;xs:complexType&gt;
			&lt;xs:sequence&gt;
				&lt;xs:element name="AwesomeItem" type="AwesomeElement" minOccurs="0" maxOccurs="unbounded"&gt;
				&lt;/xs:element&gt;
			&lt;/xs:sequence&gt;
		&lt;/xs:complexType&gt;
	&lt;/xs:element&gt;

&lt;/xs:schema&gt;</pre></div></div>

<p>And there we have it.</p>
<h2>Results</h2>
<p>Now when we start typing in the XML file we will get intellisense suggestions/completion:</p>
<div style="text-align:center; margin: .5em 0;">
   <img src="http://tiernok.com/LTDBlog/XmlSchemaIntellisense/Intellisense.png" alt="Intellisense suggestions" />
</div>
<p>We also get warnings when we forget a required attribute:</p>
<div style="text-align:center; margin: .5em 0;">
   <img src="http://tiernok.com/LTDBlog/XmlSchemaIntellisense/SchemaWarning.png" alt="Intellisense suggestions" />
</div>
<p>And when we use the wrong type:</p>
<div style="text-align:center; margin: .5em 0;">
   <img src="http://tiernok.com/LTDBlog/XmlSchemaIntellisense/WrongTypeWarning.png" alt="Intellisense suggestions" />
</div>
<p><i>Hopefully the custom color scheme isn&#8217;t confusing, was feeling too lazy to switch it and switch it back</i></p>
]]></content:encoded>
			<wfw:commentRss>/index.php/desktopdev/mstech/vs2012/intellisense-for-custom-xml-in/feed/</wfw:commentRss>
		<slash:comments>4</slash:comments>
		</item>
		<item>
		<title>SQL Advent 2011 Day 4: Schemas</title>
		<link>/index.php/datamgmt/datadesign/sql-advent-2011-day-4/</link>
		<comments>/index.php/datamgmt/datadesign/sql-advent-2011-day-4/#comments</comments>
		<pubDate>Sun, 04 Dec 2011 10:12:00 +0000</pubDate>
		<dc:creator><![CDATA[SQLDenis]]></dc:creator>
				<category><![CDATA[Data Modelling and Design]]></category>
		<category><![CDATA[Database Programming]]></category>
		<category><![CDATA[Microsoft SQL Server]]></category>
		<category><![CDATA[Microsoft SQL Server Admin]]></category>
		<category><![CDATA[how to]]></category>
		<category><![CDATA[schema]]></category>
		<category><![CDATA[skills]]></category>
		<category><![CDATA[sql server 2005]]></category>
		<category><![CDATA[sql server 2008]]></category>

		<guid isPermaLink="false">/index.php/2011/12/sql-advent-2011-day-4/</guid>
		<description><![CDATA[In my Are you ready for SQL Server 2012 or are you still partying like it is 1999? post, I wrote about how you should start using SQL Server 2005 and SQL Server 2008 functionality now in order to prepare for SQL Server 2012. I still see tons of code tha&#8230;]]></description>
				<content:encoded><![CDATA[<p>In my <a href="/index.php/DataMgmt/DataDesign/are-you-ready-for-sql">Are you ready for SQL Server 2012 or are you still partying like it is 1999?</a> post, I wrote about how you should start using SQL Server 2005 and SQL Server 2008 functionality now in order to prepare for SQL Server 2012. I still see tons of code that is written in the pre 2005 style and people still keep using those functions, procs and statements even though SQL Server 2005 and 2008 have much better functionality.</p>
<p>In today&#8217;s post I will cover schemas. Schemas were introduced in SQL Server 2005, each schema is basically a distinct namespace in a database. A schema exists independently of the database user who created it. A schema is simply a container of objects. The owner of a schema can be any user, the ownership of the schema is transferable.</p>
<p>Let&#8217;s see how this all works, first create a new login name Denis with a highly secure password</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
</pre></td><td class="de1"><pre class="de1"><span class="kw1">USE</span> master
GO
<span class="kw1">CREATE</span> LOG<span class="sy0">IN</span> Denis <span class="kw1">WITH</span> PASSW<span class="sy0">OR</span>D <span class="sy0">=</span> <span class="st0">'Bla'</span>
GO</pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">USE master
GO
CREATE LOGIN Denis WITH PASSWORD = 'Bla'
GO</pre></div></div>

<p></p>
<p>To run all this code correctly, you should have two connections to the database we will create, one connection should be your admin connection, the other connection should be connected as this new user we just created.</p>
<p>Now create a new database named SalesStuff</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
</pre></td><td class="de1"><pre class="de1"><span class="kw1">CREATE</span> <span class="kw1">DATABASE</span> SalesStuff
GO</pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">CREATE DATABASE SalesStuff
GO</pre></div></div>

<p></p>
<p>Inside the SalesStuff database create a new user which is mapped to the login Denis</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
</pre></td><td class="de1"><pre class="de1"><span class="kw1">USE</span> SalesStuff
GO
<span class="kw1">CREATE</span> <span class="kw1">USER</span> Denis <span class="kw1">FOR</span> LOG<span class="sy0">IN</span> Denis
GO</pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">USE SalesStuff
GO
CREATE USER Denis FOR LOGIN Denis
GO</pre></div></div>

<p></p>
<p>Create a schema in the SalesStuff database named Sales, also create a table named Orders in that schema</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
</pre></td><td class="de1"><pre class="de1"><span class="kw1">CREATE</span> <span class="kw1">SCHEMA</span> Sales
GO
<span class="kw1">CREATE</span> <span class="kw1">TABLE</span> Sales.<span class="me1">Orders</span>
<span class="br0">&#40;</span>OrderID <span class="kw1">int</span>, OrderDate <span class="kw1">date</span>, OrderAmount <span class="kw1">decimal</span><span class="br0">&#40;</span><span class="nu0">30</span>,<span class="nu0">2</span><span class="br0">&#41;</span><span class="br0">&#41;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">CREATE SCHEMA Sales
GO
CREATE TABLE Sales.Orders
(OrderID int, OrderDate date, OrderAmount decimal(30,2))</pre></div></div>

<p></p>
<p>Now login to the database with the Denis account and run the query below</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
</pre></td><td class="de1"><pre class="de1"><span class="kw1">select</span> <span class="sy0">*</span> <span class="kw1">from</span> orders</pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">select * from orders</pre></div></div>

<p></p>
<p>You should see the following error.<br />
<em>Msg 208, Level 16, State 1, Line 1<br />
Invalid object name &#8216;orders&#8217;.</em></p>
<p>The problem is that when you login, your default schema is not Sales and so the Orders table can&#8217;t be found. Prefix the table with the schema and try again</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
</pre></td><td class="de1"><pre class="de1"><span class="kw1">select</span> <span class="sy0">*</span> <span class="kw1">from</span> Sales.<span class="me1">Orders</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">select * from Sales.Orders</pre></div></div>

<p></p>
<p>You get this error message<br />
<em>Msg 229, Level 14, State 5, Line 1<br />
The SELECT permission was denied on the object &#8216;Orders&#8217;, database &#8216;SalesStuff&#8217;, schema &#8216;Sales&#8217;.</em></p>
<p>We need to give the Denis user select permissions for this table. Login as the admin and run the query below</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
</pre></td><td class="de1"><pre class="de1"><span class="kw1">GRANT</span> <span class="kw1">SELECT</span> <span class="kw1">ON</span> <span class="kw1">SCHEMA</span>::Sales <span class="kw1">TO</span> Denis</pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">GRANT SELECT ON SCHEMA::Sales TO Denis</pre></div></div>

<p></p>
<p>That query gave the user Denis select permissions on all tables in the Sales schema. Notice the double colon syntax, that is how you need to grant, deny and revoke permissions. If you run the select query again, you will get back an empty resultset.</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
</pre></td><td class="de1"><pre class="de1"><span class="kw1">select</span> <span class="sy0">*</span> <span class="kw1">from</span> Sales.<span class="me1">Orders</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">select * from Sales.Orders</pre></div></div>

<p></p>
<p>Let&#8217;s try to do an insert</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
</pre></td><td class="de1"><pre class="de1"><span class="kw1">insert</span> Sales.<span class="me1">Orders</span> <span class="kw1">values</span><span class="br0">&#40;</span><span class="nu0">1</span>,<span class="kw2">getdate</span><span class="br0">&#40;</span><span class="br0">&#41;</span>,<span class="nu0">100</span><span class="br0">&#41;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">insert Sales.Orders values(1,getdate(),100)</pre></div></div>

<p></p>
<p>As expected, that fails also</p>
<p>Msg 229, Level 14, State 5, Line 1<br />
<em>The INSERT permission was denied on the object &#8216;Orders&#8217;, database &#8216;SalesStuff&#8217;, schema &#8216;Sales&#8217;.</em></p>
<p>Go back to the admin query window, run the query below to give the insert permissions</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
</pre></td><td class="de1"><pre class="de1"><span class="kw1">GRANT</span> <span class="kw1">INSERT</span> <span class="kw1">ON</span> <span class="kw1">SCHEMA</span>::Sales <span class="kw1">TO</span> Denis</pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">GRANT INSERT ON SCHEMA::Sales TO Denis</pre></div></div>

<p></p>
<p>If you try the insert again, it will succeed</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
</pre></td><td class="de1"><pre class="de1"><span class="kw1">insert</span> Sales.<span class="me1">Orders</span> <span class="kw1">values</span><span class="br0">&#40;</span><span class="nu0">1</span>,<span class="kw2">getdate</span><span class="br0">&#40;</span><span class="br0">&#41;</span>,<span class="nu0">100</span><span class="br0">&#41;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">insert Sales.Orders values(1,getdate(),100)</pre></div></div>

<p></p>
<p>Remember how we tried to select from the table without specifying the schema? Let&#8217;s try that again</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
</pre></td><td class="de1"><pre class="de1"><span class="kw1">select</span> <span class="sy0">*</span> <span class="kw1">from</span> Orders</pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">select * from Orders</pre></div></div>

<p></p>
<p><em>Msg 208, Level 16, State 1, Line 1<br />
Invalid object name &#8216;Orders&#8217;.</em></p>
<p>Same error, let&#8217;s fix that</p>
<p>Go back to the admin query window and execute the query below</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
</pre></td><td class="de1"><pre class="de1"><span class="kw1">ALTER</span> <span class="kw1">USER</span> Denis
<span class="kw1">WITH</span> DEFAULT_SCHEMA <span class="sy0">=</span> Sales</pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">ALTER USER Denis
WITH DEFAULT_SCHEMA = Sales</pre></div></div>

<p></p>
<p>We just made the Sales schema the default schema for the user Denis. Now if we specify the schema or if we omit the schema, we get back the same result</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
</pre></td><td class="de1"><pre class="de1"><span class="kw1">select</span> <span class="sy0">*</span> <span class="kw1">from</span> Orders
<span class="kw1">select</span> <span class="sy0">*</span> <span class="kw1">from</span> Sales.<span class="me1">Orders</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">select * from Orders
select * from Sales.Orders</pre></div></div>

<p></p>
<p>Go back to the admin connection and create this stored procedure</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
</pre></td><td class="de1"><pre class="de1"><span class="kw1">create</span> <span class="kw1">procedure</span> Sales.<span class="me1">prtest1</span>
<span class="kw1">as</span>
<span class="kw1">select</span> <span class="nu0">1</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">create procedure Sales.prtest1
as
select 1</pre></div></div>

<p></p>
<p>Go to the query window for the user Denis and run the proc</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
</pre></td><td class="de1"><pre class="de1"><span class="kw1">exec</span> prtest1</pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">exec prtest1</pre></div></div>

<p></p>
<p>Msg 229, Level 14, State 5, Procedure prtest1, Line 1<br />
The EXECUTE permission was denied on the object &#8216;prtest1&#8217;, database &#8216;SalesStuff&#8217;, schema &#8216;dbo&#8217;.</p>
<p>As you can see, we don&#8217;t have execute permissions for the stored procedure.<br />
Bring up the admin query window and give Denis execute permissions on the schema</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
</pre></td><td class="de1"><pre class="de1"><span class="kw1">GRANT</span> <span class="kw1">execute</span> <span class="kw1">ON</span> <span class="kw1">SCHEMA</span>::Sales <span class="kw1">TO</span> Denis</pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">GRANT execute ON SCHEMA::Sales TO Denis</pre></div></div>

<p></p>
<p>Now if you try to execute the proc from the connection which is logged in as Denis it succeeds</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
</pre></td><td class="de1"><pre class="de1"><span class="kw1">exec</span> prtest1</pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">exec prtest1</pre></div></div>

<p></p>
<p>Go back yet again to the admin query window and create another stored procedure</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
</pre></td><td class="de1"><pre class="de1"><span class="kw1">create</span> <span class="kw1">procedure</span> Sales.<span class="me1">prtest2</span>
<span class="kw1">as</span>
<span class="kw1">select</span> <span class="nu0">2</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">create procedure Sales.prtest2
as
select 2</pre></div></div>

<p></p>
<p>Now if you go back to the connection for user Denis and execute the proc we just created, it also is successful. </p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
</pre></td><td class="de1"><pre class="de1"><span class="kw1">exec</span> prtest2</pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">exec prtest2</pre></div></div>

<p></p>
<p>As you can see, once you have execute permissions on a schema, you don&#8217;t have to go and explicitly give execute permissions for every stored procedure</p>
<p>To see all the tables that you have select permissions on, you can run the query below from the connection logged in as Denis. It will return 1 if you have select permissions or 0 if you don&#8217;t</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
</pre></td><td class="de1"><pre class="de1"><span class="kw1">SELECT</span> HAS_PERMS_BY_NAME
<span class="br0">&#40;</span><span class="kw2">QUOTENAME</span><span class="br0">&#40;</span>SCHEMA_NAME<span class="br0">&#40;</span>schema_id<span class="br0">&#41;</span><span class="br0">&#41;</span> <span class="sy0">+</span> <span class="st0">'.'</span> <span class="sy0">+</span> <span class="kw2">QUOTENAME</span><span class="br0">&#40;</span>name<span class="br0">&#41;</span>, 
&nbsp; &nbsp; <span class="st0">'OBJECT'</span>, <span class="st0">'SELECT'</span><span class="br0">&#41;</span> <span class="kw1">AS</span> have_select, name <span class="kw1">FROM</span> sys.<span class="me1">tables</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">SELECT HAS_PERMS_BY_NAME
(QUOTENAME(SCHEMA_NAME(schema_id)) + '.' + QUOTENAME(name), 
    'OBJECT', 'SELECT') AS have_select, name FROM sys.tables</pre></div></div>

<p>
Output<br />
&#8212;&#8212;&#8212;&#8212;&#8212;<br />
1	Orders</p>
<p>For procs it will return 1 if you have execute permissions, if you don&#8217;t have execute permissions then the proc is not returned. Run the query below from the connection logged in as Denis</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
</pre></td><td class="de1"><pre class="de1"><span class="kw1">SELECT</span> HAS_PERMS_BY_NAME
<span class="br0">&#40;</span><span class="kw2">QUOTENAME</span><span class="br0">&#40;</span>SCHEMA_NAME<span class="br0">&#40;</span>schema_id<span class="br0">&#41;</span><span class="br0">&#41;</span> <span class="sy0">+</span> <span class="st0">'.'</span> <span class="sy0">+</span> <span class="kw2">QUOTENAME</span><span class="br0">&#40;</span>name<span class="br0">&#41;</span>, 
&nbsp; &nbsp; <span class="st0">'OBJECT'</span>, <span class="st0">'exec'</span><span class="br0">&#41;</span> <span class="kw1">AS</span> have_select, name <span class="kw1">FROM</span> sys.<span class="me1">procedures</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">SELECT HAS_PERMS_BY_NAME
(QUOTENAME(SCHEMA_NAME(schema_id)) + '.' + QUOTENAME(name), 
    'OBJECT', 'exec') AS have_select, name FROM sys.procedures</pre></div></div>

<p>
Output<br />
&#8212;&#8212;&#8212;&#8212;&#8212;<br />
1	prtest1<br />
1	prtest2</p>
<p>As you can see you get 2 rows back</p>
<p>No go back to the admin connection and deny execute on the schema</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
</pre></td><td class="de1"><pre class="de1"><span class="kw1">DENY</span> <span class="kw1">EXECUTE</span> <span class="kw1">ON</span> <span class="kw1">SCHEMA</span>::Sales <span class="kw1">TO</span> Denis</pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">DENY EXECUTE ON SCHEMA::Sales TO Denis</pre></div></div>

<p></p>
<p> Run the query below from the connection logged in as Denis</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
</pre></td><td class="de1"><pre class="de1"><span class="kw1">SELECT</span> HAS_PERMS_BY_NAME
<span class="br0">&#40;</span><span class="kw2">QUOTENAME</span><span class="br0">&#40;</span>SCHEMA_NAME<span class="br0">&#40;</span>schema_id<span class="br0">&#41;</span><span class="br0">&#41;</span> <span class="sy0">+</span> <span class="st0">'.'</span> <span class="sy0">+</span> <span class="kw2">QUOTENAME</span><span class="br0">&#40;</span>name<span class="br0">&#41;</span>, 
&nbsp; &nbsp; <span class="st0">'OBJECT'</span>, <span class="st0">'exec'</span><span class="br0">&#41;</span> <span class="kw1">AS</span> have_select, name <span class="kw1">FROM</span> sys.<span class="me1">procedures</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">SELECT HAS_PERMS_BY_NAME
(QUOTENAME(SCHEMA_NAME(schema_id)) + '.' + QUOTENAME(name), 
    'OBJECT', 'exec') AS have_select, name FROM sys.procedures</pre></div></div>

<p></p>
<p>As you can see nothing is returned at all</p>
<h2>So what is so cool about schemas anyway?</h2>
<p>When you start using schemas, you have a way to logically group a bunch of objects together. For example if you have a Sales and a Marketing schema then if you need to find a specific table that has something to do with Sales, you don&#8217;t have to look up and down in object explorer to find the table, it should be sorted under the sales schema. Permissions are also easier, you give the sales person permission to the Sales schema and if new tables are added he or she will have the select permission the moment the table is created.<br />
When using schemas you now can have a table named Customers in both schemas without a problem and each will hold data just for the department that uses the schema the table is in.</p>
<h2>Read more</h2>
<p>This was just a small overview, I did not cover all the things you need to know about schemas in SQL Server. Take a look at <a href="http://msdn.microsoft.com/en-us/library/dd283095.aspx">SQL Server Best Practices – Implementation of Database Object Schemas</a> to get some more details about how to use schemas.</p>
]]></content:encoded>
			<wfw:commentRss>/index.php/datamgmt/datadesign/sql-advent-2011-day-4/feed/</wfw:commentRss>
		<slash:comments>1</slash:comments>
		</item>
		<item>
		<title>Using schemas to maintain order as a DBA</title>
		<link>/index.php/datamgmt/datadesign/grouping-dba-junk/</link>
		<comments>/index.php/datamgmt/datadesign/grouping-dba-junk/#comments</comments>
		<pubDate>Fri, 26 Feb 2010 13:28:54 +0000</pubDate>
		<dc:creator><![CDATA[Ted Krueger (onpnt)]]></dc:creator>
				<category><![CDATA[Data Modelling and Design]]></category>
		<category><![CDATA[Database Administration]]></category>
		<category><![CDATA[Database Programming]]></category>
		<category><![CDATA[IBM DB2 Admin]]></category>
		<category><![CDATA[Microsoft SQL Server]]></category>
		<category><![CDATA[Microsoft SQL Server Admin]]></category>
		<category><![CDATA[MySQL Admin]]></category>
		<category><![CDATA[Oracle Admin]]></category>
		<category><![CDATA[dba]]></category>
		<category><![CDATA[schema]]></category>
		<category><![CDATA[sql server]]></category>

		<guid isPermaLink="false">/index.php/2010/02/grouping-dba-junk/</guid>
		<description><![CDATA[Chaos or order? Managing objects in large and small installations of SQL Server can be a job in itself at times. In particular, for the DBA, objects we create on the instances we manage more often than not are found littered over the user and system databases. These objects more often are found in the [&#8230;]]]></description>
				<content:encoded><![CDATA[<p></p>
<h2>Chaos or order?</h2>
<p>
Managing objects in large and small installations of SQL Server can be a job in itself at times. In particular, for the DBA, objects we create on the instances we manage more often than not are found littered over the user and system databases. These objects more often are found in the master database in SQL Server. Really, why not put them there? We are the “masters” over the database server right? SSMS has this quality to it that when we connect to it, we get the master database glaring us in the face by default just like a booby.  So of course that means we create our objects there. Right? </p>
<div class="image_block"><img src="/wp-content/uploads/blogs/DataMgmt/booby.gif" alt="" title="" width="460" height="504" /></p>
<h3>Who&#8217;s really the booby?</h3>
</div>
<p>
After years managing the databases, we may find ourselves feeling just like that booby when it takes minutes, hours and sometimes even failing to find the scripts we previously created to maintain our database servers.
</p>
<p>
Maintaining order as a DBA starts with our own messes. That’s a pretty direct statement we can really dive into. SQL Server has for many versions given us the ability to manage our messes by grouping them into meaningful areas called schemas. Many times people set schemas aside and only think of them as a security method but they are much more. They take the booby out of us!
</p>
<p>
In my own installations each instance contains a DBA database and everything I do as a DBA or Developer resides in there. To learn more about that first step in maintaining order check out, &#8220;<a href="/index.php/DataMgmt/DBAdmin/MSSQLServerAdmin/instance-design-where-to-do-your-work-as">Instance design; Where to do your work as a DBA and DB Developer</a>&#8220;.</p>
<p>We can go much farther than that knowing schemas are available to us by grouping objects specific to other databases we maintain.
</p>
<p>
Let’s say we have two databases on an instance named, ERP and WMS. In our DBA database we can create schemas to match the databases such as WMS_OBJ and ERP_OBJ. Now when we create procedures, function, views and so on we can put them into the schema that represents the database they refer to.</p>
<pre>CREATE PROCEDURE WMS_OBJ.GRABAWIDGET
AS
SELECT WIDGETS FROM WMS.WIDGET_TABLE</pre>
<p>Without much thought we can quickly find all our objects </p>
<pre>SELECT * FROM INFORMATION_SCHEMA.ROUTINES 
WHERE SPECIFIC_SCHEMA = 'WMS_OBJ'</pre>
<p></p>
<p>Quickly we see the grouping and maintenance benefits of doing this but it doesn’t stop there. Once these objects are grouped in schemas, we can manage all of them as a single entity. They can be scripted to DR sites quickly, replicated, moved and a really cool point, we can authorize users to gain access to these schemas. If new team members come into your group you can quickly give them the schema rights they need to get started while maintaining the other schemas and security levels. We can transfer objects from schema to schema as well making migrations quicker and easier.
</p>
<h2>Take aways…</h2>
<p>
In all, schemas make us better DBAs by allowing us quicker responses to situations by having order on our database servers. Security is stronger and better managed as well. Upon connecting to SSMS, first check to see if you are in the master database.  Get in the habit of working outside the master database for greater control and to leave a smaller footprint on the system side of SQL Server. Take a few minutes to look at the objects used daily, monthly or even yearly and see if they can be grouped into schemas. After the initial work of creating the schemas and moving objects to them, I think order just may be achieved.</p>
]]></content:encoded>
			<wfw:commentRss>/index.php/datamgmt/datadesign/grouping-dba-junk/feed/</wfw:commentRss>
		<slash:comments>3</slash:comments>
		</item>
	</channel>
</rss>
