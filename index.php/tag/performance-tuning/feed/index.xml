<?xml version="1.0" encoding="UTF-8"?><rss version="2.0"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:atom="http://www.w3.org/2005/Atom"
	xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
	xmlns:slash="http://purl.org/rss/1.0/modules/slash/"
	>

<channel>
	<title>performance tuning &#8211; LessthanDot</title>
	<atom:link href="/index.php/tag/performance-tuning/feed/" rel="self" type="application/rss+xml" />
	<link>/</link>
	<description>A Technical Community for IT Professionals</description>
	<lastBuildDate>Sat, 09 Mar 2019 12:50:36 +0000</lastBuildDate>
	<language>en-US</language>
	<sy:updatePeriod>hourly</sy:updatePeriod>
	<sy:updateFrequency>1</sy:updateFrequency>
	<generator>https://wordpress.org/?v=4.6.1</generator>
	<item>
		<title>Slow source? Make your data flow buffers smaller!</title>
		<link>/index.php/datamgmt/dbprogramming/mssqlserver/slow-source/</link>
		<comments>/index.php/datamgmt/dbprogramming/mssqlserver/slow-source/#respond</comments>
		<pubDate>Wed, 30 Jan 2013 12:15:00 +0000</pubDate>
		<dc:creator><![CDATA[Koen Verbeeck]]></dc:creator>
				<category><![CDATA[Business Intelligence]]></category>
		<category><![CDATA[Microsoft SQL Server]]></category>
		<category><![CDATA[SSIS]]></category>
		<category><![CDATA[buffer]]></category>
		<category><![CDATA[data flow]]></category>
		<category><![CDATA[defaultbuffermaxrows]]></category>
		<category><![CDATA[defaultbuffersize]]></category>
		<category><![CDATA[performance tuning]]></category>
		<category><![CDATA[sql server]]></category>
		<category><![CDATA[ssis]]></category>

		<guid isPermaLink="false">/index.php/2013/01/slow-source/</guid>
		<description><![CDATA[This blog post describes how making the data flow buffers smaller might give a performance boost in some scenarios.]]></description>
				<content:encoded><![CDATA[<p style="text-align: justify;"><a href="/media/users/koenverbeeck/SlowSource/PropertySettings.PNG?mtime=1359554797"><img style="float: left;" src="/wp-content/uploads/users/koenverbeeck/SlowSource/PropertySettings.PNG?mtime=1359554797" alt="" width="222" height="84" /></a></p>
<p style="text-align: justify;">Whoa whoah. Aren’t you supposed to increase your data flow buffer size in order to speed up your packages? If you have enough memory and you can process more rows at the same time because your buffer is larger, that’s what we want, right? Yes, this is confirmed by the old blog post <a href="http://blogs.msdn.com/b/sqlperf/archive/2007/05/11/adjust-buffer-size-in-ssis-data-flow-task.aspx">Adjust buffer size in SSIS data flow task</a> by the SQL Server Performance Team. But this is only true when your source is fast enough to fill those buffers. If you have very large buffers, the remainder of the data flow is just waiting for the slow source to fill a buffer, which is just time going to waste.</p>
<p><span style="text-align: justify;">Rob Farley (</span><a style="text-align: justify;" href="http://sqlblog.com/blogs/rob_farley/default.aspx">blog </a><span style="text-align: justify;">| </span><a style="text-align: justify;" href="https://twitter.com/rob_farley">twitter</a><span style="text-align: justify;">) describes the concept in his excellent blog post </span><a style="text-align: justify;" href="http://sqlblog.com/blogs/rob_farley/archive/2011/02/17/the-ssis-tuning-tip-that-everyone-misses.aspx">The SSIS tuning tip that everyone misses</a><span style="text-align: justify;">. Basically, it’s about filling your buffers with data as soon as possible, so other data flow tasks can start working on it. Rob achieved his goal by specifying a query hint, but you can do the same by making your buffers smaller. Because, a smaller buffer takes less time to be filled with data and can be passed on the data flow much quicker. Jamie Thomson (</span><a style="text-align: justify;" href="http://sqlblog.com/blogs/jamie_thomson/default.aspx">blog</a><span style="text-align: justify;"> | </span><a style="text-align: justify;" href="https://twitter.com/jamiet">twitter</a><span style="text-align: justify;">) describes the effect in his blog post </span><a style="text-align: justify;" href="http://consultingblogs.emc.com/jamiethomson/archive/2007/12/18/SSIS_3A00_-A-performance-tuning-success-story.aspx">SSIS: A performance tuning success story</a><span style="text-align: justify;">. I also encountered a similar story in a </span><a style="text-align: justify;" href="http://www.sqlservercentral.com/Forums/Topic1404429-364-1.aspx#bm1404567">forum thread</a><span style="text-align: justify;">.</span></p>
<p style="text-align: justify;"><a href="/media/users/koenverbeeck/SlowSource/Pending.PNG?mtime=1359554789"><img style="float: left;" src="/wp-content/uploads/users/koenverbeeck/SlowSource/Pending.PNG?mtime=1359554789" alt="" width="157" height="154" /></a></p>
<p style="text-align: justify;">I’ll share on of my success stories as well. In my recent Oracle migration, I was transferring a table from Oracle to SQL Server using SSIS. The table wasn’t really large, only about 90,000 rows, but one column contained XML files. These were stored in the Oracle database as a CLOB column (Character Large Object) and in SQL Server as a NVARCHAR(MAX) column. Some of these XML could be quite large, some up to 50MB. When I ran my package using the default settings, 10MB for <em>DefaultBufferSize</em> and 10,000 for <em>DefaultBufferMaxRows</em>, I had to store a long time at a yellow source, without any data being transferred.</p>
<p><span style="text-align: justify;">After almost 35 minutes, the package finished loading all the rows into SQL Server.</span></p>
<p style="text-align: justify;"><a style="text-align: center;" href="/media/users/koenverbeeck/SlowSource/Output1.PNG?mtime=1359554758"><img src="/wp-content/uploads/users/koenverbeeck/SlowSource/Output1.PNG?mtime=1359554758" alt="" width="796" height="190" /></a></p>
<p><span style="text-align: justify;">However, when I changed the </span><em>DefaultBufferMaxRows</em><span style="text-align: justify;"> to 500, the package finished in a mere 11 minutes!</span></p>
<p style="text-align: justify;"><a style="text-align: center;" href="/media/users/koenverbeeck/SlowSource/Output2.PNG?mtime=1359554763"><img src="/wp-content/uploads/users/koenverbeeck/SlowSource/Output2.PNG?mtime=1359554763" alt="" width="792" height="184" /></a></p>
<p><span style="text-align: justify;">To make sure this incredible speed-up wasn’t the result of any caching on the source, I ran the package again with the default settings:</span></p>
<p style="text-align: justify;"><a style="text-align: center;" href="/media/users/koenverbeeck/SlowSource/Output3.PNG?mtime=1359554783"><img src="/wp-content/uploads/users/koenverbeeck/SlowSource/Output3.PNG?mtime=1359554783" alt="" width="794" height="181" /></a></p>
<p><span style="text-align: justify;">Possible caching seems to nibble 2 minutes off (or it just might be coincidence), but it isn’t responsible for making the packages run three times as fast.</span></p>
<p style="text-align: justify;">Why the big difference? I created an Excel graph displaying the size of the CLOB column for the first 20,000 rows, which roughly equals 2 buffers when the default settings are used. I used the function <a href="http://docs.oracle.com/cd/B19306_01/appdev.102/b14258/d_lob.htm">DBMS_LOB.getlength</a> to get the number of characters in a particular XML file in the CLOB column. Assuming every character equals one byte, this is the same as the size in bytes. I’m educated as an engineer, so g = 10, &#928; = 3 and my CLOB columns contains only singe byte characters and no multi-byte characters <img src="https://s.w.org/images/core/emoji/2/72x72/1f642.png" alt="🙂" class="wp-smiley" style="height: 1em; max-height: 1em;" /> If there are multi-byte characters present, the following values in the graph represent the possible minimal size of the XML value. It might be bigger in reality.</p>
<div class="image_block" style="text-align: center;"><a href="/media/users/koenverbeeck/SlowSource/Graph.PNG?mtime=1359554752"><img src="/wp-content/uploads/users/koenverbeeck/SlowSource/Graph.PNG?mtime=1359554752" alt="" width="507" height="317" /></a></div>
<p><span style="text-align: justify;">We can see that around row 2800 a 20 megabyte CLOB value shows up, followed by several other large XML files. In the second buffer we have even larger XML files, one of 25MB and one of 40MB. Needless to say, it takes a while for SSIS can fill a buffer with this large data. Once a buffer is full, it is passed immediately to the destination. It’s possible the next buffer is very quickly populated if the next rows contain only XML files of a few kilobytes large. But because the destination is still processing the previous large buffer, we get an effect called </span><em>pipeline backpressure</em><span style="text-align: justify;">, which is described in detail by Todd McDermid (</span><a style="text-align: justify;" href="http://toddmcdermid.blogspot.be/">blog </a><span style="text-align: justify;">| </span><a style="text-align: justify;" href="https://twitter.com/Todd_McDermid">twitter</a><span style="text-align: justify;">) in his blog post </span><a style="text-align: justify;" href="http://toddmcdermid.blogspot.be/2011/07/what-is-pipeline-backpressure.html">What is Pipeline Backpressure?</a><span style="text-align: justify;">. When we combine these two effects – a slow source and an occasional pipeline backpressure – we get a very slow package.</span></p>
<p style="text-align: justify;">When we use a much smaller buffer – 500 rows in my case – the source can already fill up a few buffers before the first large XML is reached. This keeps the destination busy while the source processes these big rows. Because the larger XML files are uniformly distributed over the table, we can take full advantage of this effect, cutting the total package runtime to one third.</p>
<p style="text-align: justify;"><strong>Conclusion</strong></p>
<p style="text-align: justify;">When dealing with a slow source, it might be beneficial to lower the size of the data flow buffer in order to get better performance. Don’t do this all the time! Most of the time the default settings are good enough and if the source is fast you might benefit from bigger buffers. As always, test test test and then put it in production.</p>
]]></content:encoded>
			<wfw:commentRss>/index.php/datamgmt/dbprogramming/mssqlserver/slow-source/feed/</wfw:commentRss>
		<slash:comments>0</slash:comments>
		</item>
		<item>
		<title>T-SQL Tuesday #38 – Resolving an SSIS package performance problem</title>
		<link>/index.php/datamgmt/dbprogramming/mssqlserver/t-sql-tuesday-38-resolving/</link>
		<comments>/index.php/datamgmt/dbprogramming/mssqlserver/t-sql-tuesday-38-resolving/#comments</comments>
		<pubDate>Tue, 08 Jan 2013 05:04:00 +0000</pubDate>
		<dc:creator><![CDATA[Koen Verbeeck]]></dc:creator>
				<category><![CDATA[Microsoft SQL Server]]></category>
		<category><![CDATA[SSIS]]></category>
		<category><![CDATA[performance tuning]]></category>
		<category><![CDATA[ssis]]></category>
		<category><![CDATA[t-sql]]></category>

		<guid isPermaLink="false">/index.php/2013/01/t-sql-tuesday-38-resolving/</guid>
		<description><![CDATA[This is my contribution to T-SQL Tuesday #38: Standing Firm. I describe how I resolved an SSIS package performance issue.]]></description>
				<content:encoded><![CDATA[<p class="MsoNormal" style="text-align: justify;"><span lang="EN-US"> </span></p>
<div class="image_block" style="text-align: justify;">
<div class="image_block" style="text-align: justify;"><a href="http://jasonbrimhall.info/2013/01/02/t-sql-tuesday-38-standing-firm/"><img style="float: left;" src="/wp-content/uploads/users/koenverbeeck/TSQL2sday37/TSQL2sday.PNG?mtime=1355209029" alt="" width="133" height="134" /></a></div>
<p>It’s this time of the month again: the T-SQL Tuesday is back and Jason Brimhall (<a href="http://jasonbrimhall.info/">blog</a> | <a href="https://twitter.com/sqlrnnr">twitter</a>) is hosting the 38<sup>th</sup> installment. The theme is <em>“standing firm”</em>, which basically means to tell a story about one of these words: <em>resolve, resolution</em> or <em>resolute</em>. My contribution will be a story on how I once <strong>resolved<em> </em></strong>an issue with an SSIS package taking more than one hour to complete.</div>
<p><span style="text-align: justify;">At a client, they had a package developed some time ago and after a while it started to slow down enormously, to the point where it took over one hour to complete, if it completed at all. Sometimes out-of-memory exceptions where thrown and they had to start all over again. They asked if I could take a look at the package and perhaps speed it up a little. The package was not a typical data warehouse scenario, but ran on a normalized database which was being used as an OLTP application database and a reporting database at the same time (don’t get me started on the design). The package itself was pretty complex &#8211; especially the data flow &#8211; and it managed quite a workflow. The data set being handled was large, but not that large to be a gigantic problem.</span></p>
<p class="MsoNormal" style="text-align: justify;"><span lang="EN-US">I took a quick look on the package and some things immediately popped out:</span></p>
<ul style="margin-left: 20pt; list-style-position: outside;">
<li><em><span lang="EN-US">Lookup components </span></em><span style="text-align: justify; text-indent: -18pt;" lang="EN-US">There were quite a few of them and some of those had either partial or no caching and even worse, they all used the dropdown box to select the table. This is a big red flag.</span></li>
<li><em><span lang="EN-US">OLE DB Commands</span></em><span style="text-indent: -18pt;" lang="EN-US"> I just hate those pesky little buggers. They fire off a statement for each row in your data flow, causing an avalanche of transactions against the database. The database in question was on Full Recovery Model, something I had no control over, so logging exploded when this package ran. If you thought the previous bullet is a red flag, this one is Defcon 2.</span></li>
<li><em><span lang="EN-US">OLE DB Destinations without the Fast Load option </span></em><span style="text-align: justify; text-indent: -18pt;" lang="EN-US">Pretty much the same as an OLE DB command. Each insert is a separate transaction instead of a bulk insert.</span></li>
<li><em><span lang="EN-US">Redundant or unnecessary logic</span></em><span style="text-align: justify; text-indent: -18pt;" lang="EN-US"> Obviously, this is to be avoided.</span></li>
</ul>
<p><!--[if !supportLists]--></p>
<p class="MsoNormal" style="text-align: justify;"><span lang="EN-US">So how do you tackle a package like this? Let’s start with the Lookups. Most of the referenced tables were pretty large, but if you write a query retrieving only the columns you actually need instead of using the dropdown box, you can fit a whole lot more rows in memory. I guess the original creator of the package used partial or no caching because the referenced data sets were too big to fit all in memory. I wrote a few queries selecting only the lookup keys and the columns needing to be retrieved (which is the point of a lookup obviously) and suddenly everything fitted nicely in memory with the Full caching option. Nice.</span></p>
<p class="MsoNormal" style="text-align: justify;"><span lang="EN-US">The OLE DB commands. Usually they are used to execute UPDATE statements, as there isn’t a way to do set based updates in the data flow. I got rid of them by creating temporary tables in the beginning of the package and inserting the data into the temp table with an OLE DB Destination using the Fast Load option. After the data flow, I use an Execute SQL Task to execute a set-based UPDATE statement by doing an inner join between the destination table and the temp table. You can’t believe the performance improvement you get using this technique on large data sets. I’m a strong advocate of using a hybrid combination of SSIS components and T-SQL in SSIS packages. For the time being, updates certainly belong in the T-SQL realm.</span></p>
<p class="MsoNormal" style="text-align: justify;"><span lang="EN-US">The OLE DB Destinations without the Fast Load option. No idea why the default was changed to a worse option, but it was quickly resolved: simply change it to the fast load option and you’re good to go.</span></p>
<p class="MsoNormal" style="text-align: justify;"><span lang="EN-US">Finally I looked at the logic of the package itself. There were some script components doing pretty basic stuff (I guess the creator was a .NET developer doing his first SSIS development) so I removed them and moved all the logic to the source query. I also removed columns that weren’t used in the data flow. In SSIS, it’s very important to get your row size as small as possible in order to get as many rows as possible in one buffer. I also enhanced the buffer size, so I could get rows faster in and out the data flow. To finish everything off, I removed a SORT component used to remove duplicates and used a DISTINCT clause in the source query. A SORT component is a blocking component – DEFCON 1 for large data sets – and is to be avoided at all costs.</span></p>
<p class="MsoNormal" style="text-align: justify;"><span lang="EN-US">All this work took one afternoon. I ran the package and behold, it ran in a mere 4 minutes. From over one hour to just a couple of minutes. The sad part is most performance bottlenecks could easily be avoided. By being <em>resolute</em> (see what I did there?) about some very simple SSIS design principles, you can make a big difference in the performance of a package. If you’re interested in SSIS performance tuning, start at this magnificent SQLCAT article: <a href="http://sqlcat.com/sqlcat/b/top10lists/archive/2008/10/01/top-10-sql-server-integration-services-best-practices.aspx?PageIndex=2">Top 10 SQL Server Integration Services Best Practices</a>. It’s my bible when tuning SSIS packages.</span></p>
]]></content:encoded>
			<wfw:commentRss>/index.php/datamgmt/dbprogramming/mssqlserver/t-sql-tuesday-38-resolving/feed/</wfw:commentRss>
		<slash:comments>3</slash:comments>
		</item>
		<item>
		<title>SQL Advent 2012 Day 3: Sargable Queries</title>
		<link>/index.php/datamgmt/dbprogramming/sargable-queries/</link>
		<comments>/index.php/datamgmt/dbprogramming/sargable-queries/#comments</comments>
		<pubDate>Mon, 03 Dec 2012 13:44:00 +0000</pubDate>
		<dc:creator><![CDATA[SQLDenis]]></dc:creator>
				<category><![CDATA[Business Intelligence]]></category>
		<category><![CDATA[Database Programming]]></category>
		<category><![CDATA[Microsoft SQL Server]]></category>
		<category><![CDATA[Microsoft SQL Server Admin]]></category>
		<category><![CDATA[database]]></category>
		<category><![CDATA[indexing]]></category>
		<category><![CDATA[performance tuning]]></category>
		<category><![CDATA[rdbms]]></category>
		<category><![CDATA[sargable]]></category>
		<category><![CDATA[sql]]></category>
		<category><![CDATA[sql server 2008]]></category>
		<category><![CDATA[sql server 2012]]></category>
		<category><![CDATA[t-sql]]></category>

		<guid isPermaLink="false">/index.php/2012/12/sargable-queries/</guid>
		<description><![CDATA[This is day three of the SQL Advent 2012 series of blog posts. Today we are going to look at sargable queries. You might ask yourself, what is this weird term sargable. Sargable  comes from searchable argument, sometimes also referred as Search ARGument&#8230;]]></description>
				<content:encoded><![CDATA[<p>This is day three of the <a href="/index.php/DataMgmt/DBProgramming/sql-advent-2012-here-is">SQL Advent 2012 series</a> of blog posts. Today we are going to look at sargable queries. You might ask yourself, what is this weird term sargable. Sargable  comes from searchable argument, sometimes also referred as <span class="MT_red">S</span>earch <span class="MT_red">ARG</span>ument <span class="MT_red">ABLE</span>. What that means is that the query will be able to use an index, a seek will be performed instead of a scan. In general any time you have a function wrapped around a column, an index won&#8217;t be used</p>
<p>Some examples that are not sargable </p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
</pre></td><td class="de1"><pre class="de1"><span class="kw1">WHERE</span> <span class="kw1">LEFT</span><span class="br0">&#40;</span>Name,<span class="nu0">1</span><span class="br0">&#41;</span> <span class="sy0">=</span> <span class="st0">'S'</span>
<span class="kw1">WHERE</span> <span class="kw1">Year</span><span class="br0">&#40;</span>SomeDate<span class="br0">&#41;</span> <span class="sy0">=</span> <span class="nu0">2012</span>
<span class="kw1">WHERE</span> OrderID <span class="sy0">*</span> <span class="nu0">3</span> <span class="sy0">=</span> <span class="nu0">33000</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">WHERE LEFT(Name,1) = 'S'
WHERE Year(SomeDate) = 2012
WHERE OrderID * 3 = 33000</pre></div></div>

<p>Those three should be rewritten like this in order to become sargable </p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
</pre></td><td class="de1"><pre class="de1"><span class="kw1">WHERE</span> Name <span class="sy0">LIKE</span> <span class="st0">'S%'</span>
<span class="kw1">WHERE</span> SomeDate <span class="sy0">&gt;=</span> <span class="st0">'20120101'</span> <span class="sy0">AND</span> SomeDate <span class="sy0">&lt;</span> <span class="st0">'20130101'</span>
<span class="kw1">WHERE</span> OrderID <span class="sy0">=</span> <span class="nu0">33000</span><span class="sy0">/</span><span class="nu0">3</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">WHERE Name LIKE 'S%'
WHERE SomeDate &gt;= '20120101' AND SomeDate &lt; '20130101'
WHERE OrderID = 33000/3</pre></div></div>

<p>Let&#8217;s create a table, insert some data so that we can look at the execution plan<br />
Create this simple table</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
</pre></td><td class="de1"><pre class="de1"><span class="kw1">CREATE</span> <span class="kw1">TABLE</span> Test<span class="br0">&#40;</span>SomeID <span class="kw1">varchar</span><span class="br0">&#40;</span><span class="nu0">100</span><span class="br0">&#41;</span><span class="br0">&#41;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">CREATE TABLE Test(SomeID varchar(100))</pre></div></div>

<p>Let&#8217;s insert some data that will start with a letter followed by some digits</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
</pre></td><td class="de1"><pre class="de1"><span class="kw1">INSERT</span> Test
<span class="kw1">SELECT</span> <span class="kw1">LEFT</span><span class="br0">&#40;</span>v2.<span class="me1">type</span>,<span class="nu0">1</span><span class="br0">&#41;</span> <span class="sy0">+</span><span class="kw1">RIGHT</span><span class="br0">&#40;</span><span class="st0">'0000'</span> <span class="sy0">+</span> <span class="kw1">CONVERT</span><span class="br0">&#40;</span><span class="kw1">varchar</span><span class="br0">&#40;</span><span class="nu0">4</span><span class="br0">&#41;</span>,v1.<span class="me1">number</span><span class="br0">&#41;</span>,<span class="nu0">4</span><span class="br0">&#41;</span> 
<span class="kw1">FROM</span> master..<span class="me1">spt_values</span> v1
<span class="sy0">CROSS</span> <span class="sy0">JOIN</span> <span class="br0">&#40;</span><span class="kw1">SELECT</span> <span class="kw1">DISTINCT</span> <span class="kw1">LEFT</span><span class="br0">&#40;</span>type,<span class="nu0">1</span><span class="br0">&#41;</span> <span class="kw1">AS</span> type 
<span class="kw1">FROM</span> master..<span class="me1">spt_values</span><span class="br0">&#41;</span> v2
<span class="kw1">WHERE</span> v1.<span class="me1">type</span> <span class="sy0">=</span> <span class="st0">'p'</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">INSERT Test
SELECT LEFT(v2.type,1) +RIGHT('0000' + CONVERT(varchar(4),v1.number),4) 
FROM master..spt_values v1
CROSS JOIN (SELECT DISTINCT LEFT(type,1) AS type 
FROM master..spt_values) v2
WHERE v1.type = 'p'</pre></div></div>

<p>That insert should have generated 32768 rows</p>
<p>Now create this index on that table</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
</pre></td><td class="de1"><pre class="de1"><span class="kw1">CREATE</span> <span class="kw1">CLUSTERED</span> <span class="kw1">INDEX</span> cx_test <span class="kw1">ON</span> Test<span class="br0">&#40;</span>SomeID<span class="br0">&#41;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">CREATE CLUSTERED INDEX cx_test ON Test(SomeID)</pre></div></div>

<p>Let&#8217;s take a look at the execution plan, hit CTRL + M, this will add the execution plan once the query is done running</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
</pre></td><td class="de1"><pre class="de1"><span class="kw1">SELECT</span> <span class="sy0">*</span> <span class="kw1">FROM</span> Test
<span class="kw1">WHERE</span> SomeID <span class="sy0">LIKE</span> <span class="st0">'s%'</span>
&nbsp;
<span class="kw1">SELECT</span> <span class="sy0">*</span> <span class="kw1">FROM</span> Test
<span class="kw1">WHERE</span> <span class="kw1">LEFT</span><span class="br0">&#40;</span>SomeID,<span class="nu0">1</span><span class="br0">&#41;</span> <span class="sy0">=</span> <span class="st0">'s'</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">SELECT * FROM Test
WHERE SomeID LIKE 's%'

SELECT * FROM Test
WHERE LEFT(SomeID,1) = 's'</pre></div></div>

<p>Here is what the plans looks like</p>
<div class="image_block"><a href="/wp-content/uploads/blogs/DataMgmt/Denis/Excecutionplan.PNG?mtime=1354498760"><img alt="" src="/wp-content/uploads/blogs/DataMgmt/Denis/Excecutionplan.PNG?mtime=1354498760" width="447" height="295" /></a></div>
<p>As you can see it is 9% versus 91% between the two queries, that is a big difference<br />
Hit CTRL + M again to disable the inclusion of the plan</p>
<p>Run this codeblock, it will give you the plans in a text format</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
</pre></td><td class="de1"><pre class="de1"><span class="kw1">SET</span> SHOWPLAN_TEXT <span class="kw1">ON</span>
GO
&nbsp;
<span class="kw1">SELECT</span> <span class="sy0">*</span> <span class="kw1">FROM</span> Test
<span class="kw1">WHERE</span> SomeID <span class="sy0">LIKE</span> <span class="st0">'s%'</span>
&nbsp;
<span class="kw1">SELECT</span> <span class="sy0">*</span> <span class="kw1">FROM</span> Test
<span class="kw1">WHERE</span> <span class="kw1">LEFT</span><span class="br0">&#40;</span>SomeID,<span class="nu0">1</span><span class="br0">&#41;</span> <span class="sy0">=</span> <span class="st0">'s'</span>
GO
&nbsp;
<span class="kw1">SET</span> SHOWPLAN_TEXT <span class="kw1">OFF</span>
GO</pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">SET SHOWPLAN_TEXT ON
GO

SELECT * FROM Test
WHERE SomeID LIKE 's%'

SELECT * FROM Test
WHERE LEFT(SomeID,1) = 's'
GO

SET SHOWPLAN_TEXT OFF
GO</pre></div></div>

<p>Here are the two plans</p>
<blockquote><p>|&#8211;Clustered Index Seek(OBJECT:([master].[dbo].[Test].[cx_test]),<br />
  SEEK:([master].[dbo].[Test].[SomeID] >= &#8216;Rþ&#8217; AND [master].[dbo].[Test].[SomeID] < 'T'),  
  WHERE:([master].[dbo].[Test].[SomeID] like 's%') ORDERED FORWARD)

    |--Clustered Index Scan(OBJECT:([master].[dbo].[Test].[cx_test]), 
	WHERE:(substring([master].[dbo].[Test].[SomeID],(1),(1))='s'))
</p></blockquote>
<p>As you can see the top one while looking more complicated is actually giving you a seek</p>
<h2>Making a case sensitive search sargable</h2>
<p>Now let&#8217;s take a look at how we can make a case sensitive search sargable as well<br />
In order to do a search and make it case sensitive, you have to have a case sensitive collation, if your table is not created with a case sensitive collation then you can supply it as part of the query</p>
<p>Here is an example to demonstrate what I mean</p>
<p>This is a simple table created without a collation</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
</pre></td><td class="de1"><pre class="de1"><span class="kw1">CREATE</span> <span class="kw1">TABLE</span> TempCase1 <span class="br0">&#40;</span>Val <span class="kw1">CHAR</span><span class="br0">&#40;</span><span class="nu0">1</span><span class="br0">&#41;</span><span class="br0">&#41;</span>
<span class="kw1">INSERT</span> TempCase1 <span class="kw1">VALUES</span><span class="br0">&#40;</span><span class="st0">'A'</span><span class="br0">&#41;</span>
<span class="kw1">INSERT</span> TempCase1 <span class="kw1">VALUES</span><span class="br0">&#40;</span><span class="st0">'a'</span><span class="br0">&#41;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">CREATE TABLE TempCase1 (Val CHAR(1))
INSERT TempCase1 VALUES('A')
INSERT TempCase1 VALUES('a')</pre></div></div>

<p>Running this select statement will return both rows </p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
</pre></td><td class="de1"><pre class="de1"><span class="kw1">SELECT</span> <span class="sy0">*</span> <span class="kw1">FROM</span> TempCase1
<span class="kw1">WHERE</span> Val <span class="sy0">=</span> <span class="st0">'A'</span> </pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">SELECT * FROM TempCase1
WHERE Val = 'A' </pre></div></div>

<p>Val<br />
&#8212;&#8211;<br />
A<br />
a</p>
<p>Now create the same kind of table but with a case sensitive collation</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
</pre></td><td class="de1"><pre class="de1"><span class="kw1">CREATE</span> <span class="kw1">TABLE</span> TempCase2 <span class="br0">&#40;</span>Val <span class="kw1">CHAR</span><span class="br0">&#40;</span><span class="nu0">1</span><span class="br0">&#41;</span> <span class="kw1">COLLATE</span> SQL_Latin1_General_CP1_CS_AS<span class="br0">&#41;</span>
<span class="kw1">INSERT</span> TempCase2 <span class="kw1">VALUES</span><span class="br0">&#40;</span><span class="st0">'A'</span><span class="br0">&#41;</span>
<span class="kw1">INSERT</span> TempCase2 <span class="kw1">VALUES</span><span class="br0">&#40;</span><span class="st0">'a'</span><span class="br0">&#41;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">CREATE TABLE TempCase2 (Val CHAR(1) COLLATE SQL_Latin1_General_CP1_CS_AS)
INSERT TempCase2 VALUES('A')
INSERT TempCase2 VALUES('a')</pre></div></div>

<p>Run the same query</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
</pre></td><td class="de1"><pre class="de1"><span class="kw1">SELECT</span> <span class="sy0">*</span> <span class="kw1">FROM</span> TempCase2
<span class="kw1">WHERE</span> Val <span class="sy0">=</span> <span class="st0">'A'</span> </pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">SELECT * FROM TempCase2
WHERE Val = 'A' </pre></div></div>

<p>Val<br />
&#8212;&#8211;<br />
A</p>
<p>As you can see you only get the one row now that matches the case</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
</pre></td><td class="de1"><pre class="de1"><span class="kw1">SELECT</span> <span class="sy0">*</span> <span class="kw1">FROM</span> TempCase1
<span class="kw1">WHERE</span> Val <span class="sy0">=</span> <span class="st0">'A'</span> <span class="kw1">COLLATE</span> SQL_Latin1_General_CP1_CS_AS</pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">SELECT * FROM TempCase1
WHERE Val = 'A' COLLATE SQL_Latin1_General_CP1_CS_AS</pre></div></div>

<p>Val<br />
&#8212;&#8211;<br />
A<br />
a</p>
<p>Now let&#8217;s take a look at how we can make the case sensitive search sargable</p>
<p>First create this table and insert some data</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
</pre></td><td class="de1"><pre class="de1"><span class="kw1">CREATE</span> <span class="kw1">TABLE</span> TempCase <span class="br0">&#40;</span>Val <span class="kw1">CHAR</span><span class="br0">&#40;</span><span class="nu0">1</span><span class="br0">&#41;</span><span class="br0">&#41;</span>
&nbsp;
<span class="kw1">INSERT</span> TempCase <span class="kw1">VALUES</span><span class="br0">&#40;</span><span class="st0">'A'</span><span class="br0">&#41;</span>
<span class="kw1">INSERT</span> TempCase <span class="kw1">VALUES</span><span class="br0">&#40;</span><span class="st0">'B'</span><span class="br0">&#41;</span>
<span class="kw1">INSERT</span> TempCase <span class="kw1">VALUES</span><span class="br0">&#40;</span><span class="st0">'C'</span><span class="br0">&#41;</span>
<span class="kw1">INSERT</span> TempCase <span class="kw1">VALUES</span><span class="br0">&#40;</span><span class="st0">'D'</span><span class="br0">&#41;</span>
<span class="kw1">INSERT</span> TempCase <span class="kw1">VALUES</span><span class="br0">&#40;</span><span class="st0">'E'</span><span class="br0">&#41;</span>
<span class="kw1">INSERT</span> TempCase <span class="kw1">VALUES</span><span class="br0">&#40;</span><span class="st0">'F'</span><span class="br0">&#41;</span>
<span class="kw1">INSERT</span> TempCase <span class="kw1">VALUES</span><span class="br0">&#40;</span><span class="st0">'G'</span><span class="br0">&#41;</span>
<span class="kw1">INSERT</span> TempCase <span class="kw1">VALUES</span><span class="br0">&#40;</span><span class="st0">'H'</span><span class="br0">&#41;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">CREATE TABLE TempCase (Val CHAR(1))
 
INSERT TempCase VALUES('A')
INSERT TempCase VALUES('B')
INSERT TempCase VALUES('C')
INSERT TempCase VALUES('D')
INSERT TempCase VALUES('E')
INSERT TempCase VALUES('F')
INSERT TempCase VALUES('G')
INSERT TempCase VALUES('H')</pre></div></div>

<p>Now we will insert some lowercase characters</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
</pre></td><td class="de1"><pre class="de1"><span class="kw1">INSERT</span> TempCase
<span class="kw1">SELECT</span> <span class="kw2">LOWER</span><span class="br0">&#40;</span>Val<span class="br0">&#41;</span> <span class="kw1">FROM</span> TempCase</pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">INSERT TempCase
SELECT LOWER(Val) FROM TempCase</pre></div></div>

<p>Now we will create our real table which will have 65536 rows</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
</pre></td><td class="de1"><pre class="de1"><span class="kw1">CREATE</span> <span class="kw1">TABLE</span> CaseSensitiveSearch <span class="br0">&#40;</span>Val <span class="kw1">VARCHAR</span><span class="br0">&#40;</span><span class="nu0">50</span><span class="br0">&#41;</span><span class="br0">&#41;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">CREATE TABLE CaseSensitiveSearch (Val VARCHAR(50))</pre></div></div>

<p>We will do a couple of cross joins to generate the data for our queries</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
</pre></td><td class="de1"><pre class="de1"><span class="kw1">INSERT</span> CaseSensitiveSearch
<span class="kw1">SELECT</span> t1.<span class="me1">val</span> <span class="sy0">+</span> t2.<span class="me1">val</span> <span class="sy0">+</span> t3.<span class="me1">val</span> <span class="sy0">+</span> t4.<span class="me1">val</span>
<span class="kw1">FROM</span> TempCase t1
<span class="sy0">CROSS</span> <span class="sy0">JOIN</span> TempCase t2
<span class="sy0">CROSS</span> <span class="sy0">JOIN</span> TempCase t3
<span class="sy0">CROSS</span> <span class="sy0">JOIN</span> TempCase t4</pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">INSERT CaseSensitiveSearch
SELECT t1.val + t2.val + t3.val + t4.val
FROM TempCase t1
CROSS JOIN TempCase t2
CROSS JOIN TempCase t3
CROSS JOIN TempCase t4</pre></div></div>

<p>Create an index on the table</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
</pre></td><td class="de1"><pre class="de1"><span class="kw1">CREATE</span> <span class="kw1">INDEX</span> IX_SearchVal <span class="kw1">ON</span> CaseSensitiveSearch<span class="br0">&#40;</span>Val<span class="br0">&#41;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">CREATE INDEX IX_SearchVal ON CaseSensitiveSearch(Val)</pre></div></div>

<p>Just like before, if we run this we will get back the exact value we passed in and also all the upper case and lower case variations</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
</pre></td><td class="de1"><pre class="de1"><span class="kw1">SELECT</span> <span class="sy0">*</span> <span class="kw1">FROM</span> CaseSensitiveSearch
<span class="kw1">WHERE</span> Val <span class="sy0">=</span> <span class="st0">'ABCD'</span> </pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">SELECT * FROM CaseSensitiveSearch
WHERE Val = 'ABCD' </pre></div></div>

<p>Here are the results of that query<br />
Val<br />
&#8212;&#8211;<br />
AbCd<br />
ABcd<br />
Abcd<br />
ABCd<br />
aBCd<br />
abCd<br />
aBcd<br />
abcd<br />
abCD<br />
aBcD<br />
abcD<br />
aBCD<br />
ABCD<br />
AbCD<br />
ABcD<br />
AbcD</p>
<p>If you add the collation to the query, you will get only what matches your value</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
</pre></td><td class="de1"><pre class="de1"><span class="kw1">SELECT</span> <span class="sy0">*</span> <span class="kw1">FROM</span> CaseSensitiveSearch
<span class="kw1">WHERE</span> Val <span class="sy0">=</span> <span class="st0">'ABCD'</span> <span class="kw1">COLLATE</span> SQL_Latin1_General_CP1_CS_AS</pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">SELECT * FROM CaseSensitiveSearch
WHERE Val = 'ABCD' COLLATE SQL_Latin1_General_CP1_CS_AS</pre></div></div>

<p>Here is the result, it maches what was passed in<br />
Val<br />
&#8212;<br />
ABCD</p>
<p>The problem with the query above is that it will cause a scan. So what can we do, how can we make it perform better?  It is simple combine the two queries<br />
First grab all case sensitive and case insensitive values and then after that filter out the case insensitive values</p>
<p>Here is what that query will look like</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
</pre></td><td class="de1"><pre class="de1"><span class="kw1">SELECT</span> <span class="sy0">*</span> <span class="kw1">FROM</span> CaseSensitiveSearch
<span class="kw1">WHERE</span> Val <span class="sy0">=</span> <span class="st0">'ABCD'</span> <span class="kw1">COLLATE</span> SQL_Latin1_General_CP1_CS_AS
<span class="sy0">AND</span> Val <span class="sy0">LIKE</span> <span class="st0">'ABCD'</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">SELECT * FROM CaseSensitiveSearch
WHERE Val = 'ABCD' COLLATE SQL_Latin1_General_CP1_CS_AS
AND Val LIKE 'ABCD'</pre></div></div>

<p>AND Val LIKE &#8216;ABCD&#8217; will result in a seek, now when it also does the Val = &#8216;ABCD&#8217; COLLATE SQL_Latin1_General_CP1_CS_AS part, it only returns the row that matches your value</p>
<p>If you run both queries, you can look at the plan difference (hit CTRL + M so that the plan is included)</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
</pre></td><td class="de1"><pre class="de1"><span class="kw1">SELECT</span> <span class="sy0">*</span> <span class="kw1">FROM</span> CaseSensitiveSearch
<span class="kw1">WHERE</span> Val <span class="sy0">=</span> <span class="st0">'ABCD'</span> <span class="kw1">COLLATE</span> SQL_Latin1_General_CP1_CS_AS
&nbsp;
&nbsp;
&nbsp;
<span class="kw1">SELECT</span> <span class="sy0">*</span> <span class="kw1">FROM</span> CaseSensitiveSearch
<span class="kw1">WHERE</span> Val <span class="sy0">=</span> <span class="st0">'ABCD'</span> <span class="kw1">COLLATE</span> SQL_Latin1_General_CP1_CS_AS
<span class="sy0">AND</span> Val <span class="sy0">LIKE</span> <span class="st0">'ABCD'</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">SELECT * FROM CaseSensitiveSearch
WHERE Val = 'ABCD' COLLATE SQL_Latin1_General_CP1_CS_AS



SELECT * FROM CaseSensitiveSearch
WHERE Val = 'ABCD' COLLATE SQL_Latin1_General_CP1_CS_AS
AND Val LIKE 'ABCD'</pre></div></div>

<p>Here is the plan</p>
<div class="image_block"><a href="/wp-content/uploads/blogs/DataMgmt/Denis/ExcecutionPlan2008.PNG?mtime=1354548699"><img alt="" src="/wp-content/uploads/blogs/DataMgmt/Denis/ExcecutionPlan2008.PNG?mtime=1354548699" width="903" height="364" /></a></div>
<p>As you can see, there is a big difference between the two</p>
<p>Here is the plan in text as well</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
</pre></td><td class="de1"><pre class="de1"><span class="kw1">SET</span> SHOWPLAN_TEXT <span class="kw1">ON</span>
GO
&nbsp;
<span class="kw1">SELECT</span> <span class="sy0">*</span> <span class="kw1">FROM</span> CaseSensitiveSearch
<span class="kw1">WHERE</span> Val <span class="sy0">=</span> <span class="st0">'ABCD'</span> <span class="kw1">COLLATE</span> SQL_Latin1_General_CP1_CS_AS
&nbsp;
&nbsp;
&nbsp;
<span class="kw1">SELECT</span> <span class="sy0">*</span> <span class="kw1">FROM</span> CaseSensitiveSearch
<span class="kw1">WHERE</span> Val <span class="sy0">=</span> <span class="st0">'ABCD'</span> <span class="kw1">COLLATE</span> SQL_Latin1_General_CP1_CS_AS
<span class="sy0">AND</span> Val <span class="sy0">LIKE</span> <span class="st0">'ABCD'</span>
&nbsp;
GO
&nbsp;
<span class="kw1">SET</span> SHOWPLAN_TEXT <span class="kw1">OFF</span>
GO</pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">SET SHOWPLAN_TEXT ON
GO
 
SELECT * FROM CaseSensitiveSearch
WHERE Val = 'ABCD' COLLATE SQL_Latin1_General_CP1_CS_AS



SELECT * FROM CaseSensitiveSearch
WHERE Val = 'ABCD' COLLATE SQL_Latin1_General_CP1_CS_AS
AND Val LIKE 'ABCD'

GO
 
SET SHOWPLAN_TEXT OFF
GO</pre></div></div>

<blockquote><p>  |&#8211;Table Scan(OBJECT:([tempdb].[dbo].[CaseSensitiveSearch]),<br />
   WHERE:(CONVERT_IMPLICIT(varchar(50),[tempdb].[dbo].[CaseSensitiveSearch].[Val],0)=CONVERT(varchar(8000),[@1],0)))</p>
<p>    |&#8211;Index Seek(OBJECT:([tempdb].[dbo].[CaseSensitiveSearch].[IX_SearchVal]), SEEK:([tempdb].[dbo].[CaseSensitiveSearch].[Val] >= &#8216;ABCD&#8217;<br />
     AND [tempdb].[dbo].[CaseSensitiveSearch].[Val] <= 'ABCD'), 
      WHERE:(CONVERT_IMPLICIT(varchar(50),[tempdb].[dbo].[CaseSensitiveSearch].[Val],0)='ABCD' AND [tempdb].[dbo].[CaseSensitiveSearch].[Val] like 'ABCD') ORDERED FORWARD)</p></blockquote>
<p>Also take a look at <a href="/index.php/DataMgmt/DataDesign/only-in-a-database-can-you-get-1000-impr">Only In A Database Can You Get 1000% + Improvement By Changing A Few Lines Of Code</a> to see how this works with dates</p>
<p>That is all for day three of the SQL Advent 2012 series, come back tomorrow for the next one, you can also check out all the posts from last year here: <a href="/index.php/DataMgmt/DataDesign/sql-advent-2011-recap">SQL Advent 2011 Recap</a></p>
]]></content:encoded>
			<wfw:commentRss>/index.php/datamgmt/dbprogramming/sargable-queries/feed/</wfw:commentRss>
		<slash:comments>2</slash:comments>
		</item>
		<item>
		<title>Interview with Brent Ozar about the book Professional SQL Server 2008 Internals and Troubleshooting</title>
		<link>/index.php/datamgmt/dbprogramming/interview-with-brent-ozar-about-the-book/</link>
		<comments>/index.php/datamgmt/dbprogramming/interview-with-brent-ozar-about-the-book/#comments</comments>
		<pubDate>Wed, 13 Jan 2010 19:01:27 +0000</pubDate>
		<dc:creator><![CDATA[SQLDenis]]></dc:creator>
				<category><![CDATA[Database Administration]]></category>
		<category><![CDATA[Database Programming]]></category>
		<category><![CDATA[Microsoft SQL Server]]></category>
		<category><![CDATA[Microsoft SQL Server Admin]]></category>
		<category><![CDATA[book]]></category>
		<category><![CDATA[interview]]></category>
		<category><![CDATA[performance tuning]]></category>
		<category><![CDATA[sql server 2008]]></category>

		<guid isPermaLink="false">/index.php/2010/01/interview-with-brent-ozar-about-the-book/</guid>
		<description><![CDATA[I noticed Brent Ozar worked on a SQL book titled: Professional SQL Server 2008 Internals and Troubleshooting. This book is now available and I decided to ask Brent some questions about this book. This interview was conducted by email, enjoy. Denis: Is the book geared towards a beginner/intermediate level user or do you have to [&#8230;]]]></description>
				<content:encoded><![CDATA[<p>I noticed Brent Ozar worked on a SQL book titled: <a href="http://www.amazon.com/gp/product/0470484284?ie=UTF8&amp;tag=sql08-20&amp;linkCode=as2&amp;camp=1789&amp;creative=390957&amp;creativeASIN=0470484284">Professional SQL Server 2008 Internals and Troubleshooting</a>. This book is now available and I decided to ask Brent some questions about this book. This interview was conducted by email, enjoy.</p>
<p><strong>Denis: Is the book geared towards a beginner/intermediate level user or do you have to be an advanced user to really utilize the information in this book?</strong></p>
<p>I like to think that the reader is somebody who&#8217;s been managing SQL Servers for a year or two and is getting frustrated.  He doesn&#8217;t understand what&#8217;s going on inside the engine when a query runs.  He&#8217;s not satisfied with just creating more indexes or running sp_who2 &#8211; he wants to know what&#8217;s actually happening under the hood.  He can&#8217;t afford top-notch consultants, or he can&#8217;t get good ones locally, or he wants to BECOME a top-notch consultant.</p>
<p>This book covers so many gray areas that traditional books haven&#8217;t covered.  CPUs matter.  Memory matters.  Storage matters.  Latching matters.  Traditional SQL books haven&#8217;t dived deeply enough into these subjects, and I think this book does.</p>
<p><strong>Denis: What are the most important things a person can do to master SQL troubleshooting?</strong></p>
<p>Don&#8217;t change anything you don&#8217;t fully understand, and don&#8217;t take anybody&#8217;s word for anything.  Just because you read a recommendation in a forum that your server will go faster when MAXDOP is set to 1 doesn&#8217;t mean it&#8217;s going to work in your individual situation.  Just because MAXDOP = 1 makes one of your servers faster doesn&#8217;t mean it&#8217;ll make them all faster.  When you change settings, you change the way SQL Server behaves, and you should understand the ramifications.</p>
<p>One of the first things I do when I&#8217;m troubleshooting a server is find out all of the non-default settings.  Don&#8217;t assume AUTO_CLOSE is turned off &#8211; people do crazy things.  I make a list of everything that isn&#8217;t set at factory defaults, and I start asking why.  Don&#8217;t get me wrong &#8211; there&#8217;s some easy knobs to turn in order to make SQL Server go faster, like Instant File Initialization, but there&#8217;s not a lot of surefire tweaks that work in every single situation.</p>
<p><strong>Denis: With the addition of Dynamic Management Views is it now easier to find bottlenecks than before?</strong></p>
<p>Without a doubt.  Whenever I present on DMVs, I hear a chorus of questions asking how to get that same information in SQL Server 2000.  DMVs are without a doubt the most helpful thing in my troubleshooting and tuning.  Managing a SQL Server without querying the DMVs is like trying to bake a cake without knowing how the oven temperature control works.  Your results will definitely vary from cake to cake.</p>
<p><strong>Denis: What is your favorite Dynamic Management View to troubleshoot performance?</strong></p>
<p>sys.dm_db_missing_index_details, I wish I could quit you.</p>
<p>I do &#8220;weekend&#8221; performance tuning on the side, so when I troubleshoot performance, I&#8217;m usually looking at a database I&#8217;ve never seen before.  Indexing is tough to do right, and easy to do wrong.  I can usually get huge performance improvements by tweaking the index strategy.  The missing index DMVs give me a starting point without having to run traces.  They&#8217;re still not a silver bullet &#8211; they&#8217;re like the Index Tuning WIzard or Database Tuning Advisor in that they can give some pretty nasty advice.  When used properly, though, they can give huge performance boosts. </p>
<p><strong>Denis: Is there a place for Solid State Drives, perhaps for tempdb or is it still too early for mission critical servers?</strong></p>
<p>Last year when I spoke about performance tuning at a Quest event in California, there were already several folks there using SSD drives packaged in PCI Express cards like Fusion-io, and they were using it for more than just TempDB too.  When you&#8217;re really desperate for performance, like when your app just won&#8217;t scale and you&#8217;re out of space for more SAN gear, you get desperate, and you&#8217;ll try those cutting-edge technologies before the rest of us.  Those people are out there already, dancing on the edge, and I&#8217;m hearing good reports back.</p>
<p>I think it&#8217;s a bad idea for mission critical servers because truly mission critical databases should be on clusters, and most SANs don&#8217;t take solid state drives yet.  I think the best use for SSDs in SANs is for automated tiering systems where the SAN controller automatically moves data around based on how often it&#8217;s accessed.  Data that&#8217;s very, very frequently read can get migrated onto SSD.  That&#8217;s still a high-end SAN feature though, not mainstream.</p>
<p><strong>Denis: Should we be looking at Page Life Expectancy or Buffer Cache Hit Ratio and why?</strong></p>
<p>We should be looking at Page Life Expectancy, but only in combination with all of the metrics packaged together.  I talked about this in my blog post, Bottlenecks and Bank Balances:</p>
<p>http://www.brentozar.com/archive/2009/10/bottlenecks-and-bank-balances/</p>
<p>At the end of the day, does it really matter whether your Page Life Expectancy is 70 or 700 or 7000?  Is that your biggest bottleneck, and are the application users satisfied with performance?  I&#8217;ve managed servers with abysmal Page Life Expectancy numbers (like below 60) that the business was completely satisfied with.  Some applications just aren&#8217;t important or aren&#8217;t worth spending extra money/time/resources on.</p>
<p><strong>Denis: What part of SQL troubleshooting do people struggle the most with?</strong></p>
<p>Reading execution plans and doing something about it.  I bought Grant Fritchey&#8217;s book, SQL Server 2008 Query Performance Tuning Distilled, for that exact reason &#8211; I just couldn&#8217;t read the plans well enough, and the question comes up so gosh-darned often.  I&#8217;m working with a company now that sends me execution plans so large that I would need to print them out on wallpaper and paste it up in a conference room.  There comes a point where you have to draw the line and say, &#8220;It&#8217;s not a matter of tuning this query &#8211; it&#8217;s a matter of dumping this query and asking what the user is really trying to accomplish, and how we can meet their needs.&#8221;</p>
<p><strong>Denis: Can you name some tools that will help with troubleshooting performance?<br />
</strong><br />
I work for Quest Software, but even if I didn&#8217;t, I&#8217;d name-drop Foglight Performance Analysis.  It samples SQL Server&#8217;s memory space, captures performance data without requiring a trace, and gives you a gorgeous slice &amp; dice user interface to quickly find the nastiest queries, applications, and users.  There&#8217;s flat-out nothing like it on the market.</p>
<p>I couldn&#8217;t imagine performance tuning without Bill Graziano&#8217;s fantastic utility ClearTrace.  If you don&#8217;t have Foglight PA, you&#8217;ll be running traces to capture queries, and ClearTrace really helps you make sense of trace file contents.  I can fire up ClearTrace and find problem queries very fast.</p>
<p>In the book, I wrote the Performance Dashboard chapter, and I&#8217;d highly recommend that for anybody who has zero budget for SQL Server tools.  It&#8217;s not perfect &#8211; it&#8217;s far from it &#8211; but it&#8217;s one heck of a big leap forward when you&#8217;re stumbling around in the dark trying to find bottlenecks.</p>
<p><strong>Denis: What are some of the biggest mistakes people make when setting up a new server in terms of performance?</strong> </p>
<p>Not using Instant File Initialization, not aligning their partitions, and remote desktopping into the server to run things like SQL Server Management Studio.  STOP remote controlling your servers.  SSMS burns up memory that should be dedicated to the database engine.  I&#8217;ve got a setup checklist on my site, too:</p>
<p>http://www.brentozar.com/archive/2008/03/sql-server-2005-setup-checklist-part-1-before-the-install/</p>
<p><strong>Denis: Which chapter was the hardest to write and can you explain why?<br />
Both of them.</strong></p>
<p>Lemme make one thing perfectly clear: I am the dumbest author involved in this book.  For real.  When I first got the chance to be involved with this book, I looked at the available chapter list and said, &#8220;I&#8217;ll take storage and the Performance Dashboard.&#8221;  I took storage because I loooooove storage, and I took the Performance Dashboard because I thought it would be easy.</p>
<p>The storage chapter was hard because I wanted to keep working on it forever.  One of my coauthors said he spent 1,200 hours on one chapter, and I can see how that would happen.  As I was writing and editing the storage chapter, I just kept thinking of more and more things I wanted to throw in there, but when you&#8217;re writing, you have to make sure you&#8217;re covering each subject well enough.  I didn&#8217;t want to do a half-ass job covering a million topics.  I eventually had to cut myself off to do my day job, and I&#8217;m still killing myself over things I didn&#8217;t get to include.  I didn&#8217;t include the infamous 15-second IO warning events, for example.  I&#8217;m hoping we get to do a SQL 2008 R2 version so I can expand it.</p>
<p>The Performance Dashboard chapter was hard because I wrote it and then said, &#8220;Okay, this is not nearly enough information.&#8221;  I dove into creating new reports because really, if you&#8217;re going to go down the Performance Dashboard route, you&#8217;re going to want to roll your own stuff too.  I didn&#8217;t originally sign onto the project to write an SSRS book (because I&#8217;m an SSRS noob) but I had to include some stuff on it, and that made me nervous.</p>
<p><strong>Denis: Will you write another book?</strong><br />
Originally I said no.  I yelled no from the mountaintops.  Now, wouldn&#8217;t you know it, I&#8217;m finishing an ebook as we speak.  This one&#8217;s on Twitter though.  I don&#8217;t think I&#8217;ll do another ground-up from-scratch technical book.  I have amazing respect for guys like Ross Mistry who keep banging out books.</p>
<p><strong>Denis: What SQL books are on your bookshelf?</strong></p>
<p>SQL Server Query Performance Tuning Distilled by Grant Fritchey<br />
SQL Server 2005 Performance Tuning by Steven Wort, Christian Bolton, Justin Langford, and more<br />
Inside SQL Server 2008 T-SQL Querying by Itzik Ben Gan and others<br />
Oracle and VMware by Bert Scalzo<br />
The Wine Trials 2010 by Robin Goldstein and Alexis Herschkowitsch (databases and drinks go together like developers and cursors)<br />
And tons more, but that&#8217;s a good start.</p>
<p><strong>Denis: Who are your favorite authors?</strong></p>
<p>I really like reading James Rowland-Jones&#8217; chapter on Latching in our book.  He has a really good sense of humor that plays well in print.</p>
<p>I like that Kevin Kline writes like he talks &#8211; he makes complex topics deceptively simple.  Anybody can sandblast you with fifty-cent words, but Kevin distills things down in a way that&#8217;s easy to read quickly.</p>
<p>Tim Ford spends entirely too much time writing his next book and needs to blog more, because he&#8217;s hilarious, and I&#8217;m going through withdrawal.</p>
<p>My favorite authors of all time, though, would be Dave Eggers, Douglas Adams, and Garrison Keillor &#8211; and the poet W. H. Auden for good measure.  I&#8217;m no Paul Randal &#8211; I think I read maybe 10 books in 2009, and I don&#8217;t see that changing in 2010.</p>
<p><strong>Denis: How are you involved with SQLServerpedia?</strong></p>
<p>There&#8217;s only two of us really heavily involved on a day-to-day basis.  Brett Epps handles everything technical &#8211; if it involves PHP, graphics, MySQL, anything like that, that&#8217;s his full time job.  (I&#8217;m thankful for him, because when I was the guy doing that, the site looked bad and performed worse.)  I handle everything else &#8211; working with the bloggers, checking article submissions, planning promotions, coming up with what we&#8217;re going to do next.  I get a lot of logistical support from a bunch of Questies &#8211; Christian Hasker, Andy Grant, Betsy Mendenhall, Heather Eichman, and Stephanie McCulloch &#8211; but most of the work is still me.</p>
<p>I love it.  I really wish I had more hours in the day to spend on SQLServerPedia.  We&#8217;ve got a million cool ideas, and it just comes down to manpower.</p>
<p><strong>Denis: Where can we expect to see you in 2010? Any conferences, seminars, trade shows or classrooms perhaps?</strong></p>
<p>EVERYWHERE, MUHAHAHA.  Okay, maybe not.  I&#8217;ll be at the WorkTamer conferences in Canada, the Microsoft MVP Summit in Seattle, SQLSaturday Chicago, the PASS Summit in Seattle, and maybe the European one as well.  I&#8217;m aiming for the Microsoft Certified Master program in March, and if that happens, I&#8217;ll be off the radar for a few weeks.</p>
<p>I&#8217;ve got a day-long free virtual event coming in February with Kevin Kline and Ari Weil, too &#8211; we&#8217;ll be talking DMVs all day long.  More news soon&#8230;</p>
<p>That is it,  thanks to Brent for the interview, you can visit Brent&#8217;s site here: http://www.brentozar.com/ and you can follow him on twitter here: http://twitter.com/brento</p>
<p>To check out the book, visit the wrox site here: http://www.wrox.com/WileyCDA/WroxTitle/Professional-SQL-Server-2008-Internals-and-Troubleshooting.productCd-0470484284.html or Amazon here: <a href="http://www.amazon.com/gp/product/0470484284?ie=UTF8&amp;tag=sql08-20&amp;linkCode=as2&amp;camp=1789&amp;creative=390957&amp;creativeASIN=0470484284">Professional SQL Server 2008 Internals and Troubleshooting</a></p>
]]></content:encoded>
			<wfw:commentRss>/index.php/datamgmt/dbprogramming/interview-with-brent-ozar-about-the-book/feed/</wfw:commentRss>
		<slash:comments>2</slash:comments>
		</item>
		<item>
		<title>The SQL Server Memory Leak Confusion</title>
		<link>/index.php/datamgmt/datadesign/the-sql-server-memory-leak-confusion/</link>
		<comments>/index.php/datamgmt/datadesign/the-sql-server-memory-leak-confusion/#comments</comments>
		<pubDate>Wed, 07 Jan 2009 12:47:46 +0000</pubDate>
		<dc:creator><![CDATA[SQLDenis]]></dc:creator>
				<category><![CDATA[Data Modelling and Design]]></category>
		<category><![CDATA[myth]]></category>
		<category><![CDATA[performance tuning]]></category>
		<category><![CDATA[sql server]]></category>

		<guid isPermaLink="false">/index.php/2009/01/the-sql-server-memory-leak-confusion/</guid>
		<description><![CDATA[Not too many moons ago when I started out with SQL Server I was convinced that there was a memory leak inside SQL Server. I ran it locally and the RAM usage just keep growing and growing until my computer was so slow that I had to restart SQL Server. This fixed things for a [&#8230;]]]></description>
				<content:encoded><![CDATA[<p>Not too many moons ago when I started out with SQL Server I was convinced that there was a memory leak inside SQL Server. I ran it locally and the RAM usage just keep growing and growing until my computer was so slow that I had to restart SQL Server. This fixed things for a while but after I ran some poorly written queries it would spike up again and stay high.</p>
<p>There are question about this in forums/fora/newgroups all the time, people think that the sqlserver.exe process has a gigantic memory leak. This is just not true, the reason SQL Server will use as much memory as it can possible grab is that it is much more expensive to read from disk than from RAM. This is also the reason that you want as much RAM as you can afford to make SQL Server happy (and your customers). If your database is not gigantic it is possible that all your data could be in RAM.</p>
<p>How do you know you need more RAM?<br />
Take a look at your Buffer Cache Hit Ratio, ideally you want to be at 95% plus.<br />
Mine right now is 99.927 which is very good. To look at the Buffer Cache Hit Ratio you need to open up Performance in Control Panel&#8211;>Administrative Tools. Click on the + to add a new counter, from the Performance object select <em>SQL Server: Buffer Manager</em>, from the Select counters from list select <em>buffer cache hit ratio</em><br />
Take a look at the screen shot below if the text is too confusing</p>
<p><a href="http://www.flickr.com/photos/denisgobo/3177172358/" title="Buffer Cache Hit Ratio by Denis Gobo, on Flickr"><img src="http://farm4.static.flickr.com/3460/3177172358_88e1952570_o.jpg" width="381" height="377" alt="Buffer Cache Hit Ratio" /></a></p>
<p>So in the end there is no memory leak, because RAM is so much faster than disk SQL Server will use all it can grab. Solid State Disks might change that in the future but for now these Solid State Disks are not large enough<br />
</p>
<p>If you are running SQL Server on your local machine make sure that you cap the memory it can use to something like 500MB or 25% less than the total memory on the machine. This will prevent it from slowing down your machine.</p>
<p>*** <strong>If you have a SQL related question try our <a href="http://forum.lessthandot.com/viewforum.php?f=17">Microsoft SQL Server Programming</a> forum or our <a href="http://forum.lessthandot.com/viewforum.php?f=22">Microsoft SQL Server Admin</a> forum</strong><ins></ins></p>
]]></content:encoded>
			<wfw:commentRss>/index.php/datamgmt/datadesign/the-sql-server-memory-leak-confusion/feed/</wfw:commentRss>
		<slash:comments>8</slash:comments>
		</item>
		<item>
		<title>sqltrace: A Tool Every SQL Server Developer Should Have</title>
		<link>/index.php/datamgmt/datadesign/sqltrace-a-tool-every-sql-server-develop/</link>
		<comments>/index.php/datamgmt/datadesign/sqltrace-a-tool-every-sql-server-develop/#respond</comments>
		<pubDate>Wed, 03 Dec 2008 13:08:11 +0000</pubDate>
		<dc:creator><![CDATA[SQLDenis]]></dc:creator>
				<category><![CDATA[Data Modelling and Design]]></category>
		<category><![CDATA[performance tuning]]></category>
		<category><![CDATA[sql server 2005]]></category>
		<category><![CDATA[sql server 2008]]></category>
		<category><![CDATA[tool]]></category>
		<category><![CDATA[trace]]></category>
		<category><![CDATA[tuning]]></category>

		<guid isPermaLink="false">/index.php/2008/12/sqltrace-a-tool-every-sql-server-develop/</guid>
		<description><![CDATA[sqtlrace is a stored procedure written by Lee Tudor (a.k.a Mr Tea.) The procedure takes an SQL batch as its first argument, sets up a trace filtered to include the current connection only, runs the batch, and summarises the trace information per statement in the batch. This can be a very handy tool to track [&#8230;]]]></description>
				<content:encoded><![CDATA[<p><strong>sqtlrace</strong> is a stored procedure written by Lee Tudor (a.k.a Mr Tea.) The procedure takes an SQL batch as its first argument, sets up a trace filtered to include the current connection only, runs the batch, and summarises the trace information per statement in the batch. This can be a very handy tool to track down performance bottlenecks in a longer stored procedure, not the least if there are calls to nested procedures.</p>
<p>You can also use sqltrace to capture the query plans from a batch. This makes it possible to capture a single plan in a deep chain of nested stored procedures without drowning in all the other plans. This is particularly convenient with SSMS 2008: if you click on the XML document for the plan in grid mode, the graphical plans open directly.</p>
<p>Erland Sommarskog is hosting this on his site, you can get the source code and more info here: http://www.sommarskog.se/sqlutil/sqltrace.html</p>
]]></content:encoded>
			<wfw:commentRss>/index.php/datamgmt/datadesign/sqltrace-a-tool-every-sql-server-develop/feed/</wfw:commentRss>
		<slash:comments>0</slash:comments>
		</item>
		<item>
		<title>Only In A Database Can You Get 1000% + Improvement By Changing A Few Lines Of Code</title>
		<link>/index.php/datamgmt/datadesign/only-in-a-database-can-you-get-1000-impr/</link>
		<comments>/index.php/datamgmt/datadesign/only-in-a-database-can-you-get-1000-impr/#comments</comments>
		<pubDate>Sun, 17 Aug 2008 11:55:47 +0000</pubDate>
		<dc:creator><![CDATA[SQLDenis]]></dc:creator>
				<category><![CDATA[Data Modelling and Design]]></category>
		<category><![CDATA[database]]></category>
		<category><![CDATA[dates]]></category>
		<category><![CDATA[indexing]]></category>
		<category><![CDATA[performance tuning]]></category>
		<category><![CDATA[rdbms]]></category>
		<category><![CDATA[sql]]></category>
		<category><![CDATA[t-sql]]></category>
		<category><![CDATA[temporal data]]></category>

		<guid isPermaLink="false">/index.php/2008/08/only-in-a-database-can-you-get-1000-impr/</guid>
		<description><![CDATA[Take a look at this query. T-SQL1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 select * from &#160; &#40; &#160; select customer_id, 'MTD' [&#8230;]]]></description>
				<content:encoded><![CDATA[<p>Take a look at this query.</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
</pre></td><td class="de1"><pre class="de1"><span class="kw1">select</span> <span class="sy0">*</span> <span class="kw1">from</span>
&nbsp;
<span class="br0">&#40;</span>
&nbsp;
<span class="kw1">select</span> customer_id, <span class="st0">'MTD'</span> <span class="kw1">as</span> record_type, <span class="kw2">count</span><span class="br0">&#40;</span><span class="sy0">*</span><span class="br0">&#41;</span>, <span class="kw2">sum</span><span class="br0">&#40;</span>...<span class="br0">&#41;</span>, <span class="kw2">avg</span><span class="br0">&#40;</span>...<span class="br0">&#41;</span>
&nbsp;
<span class="kw1">from</span> payment_table
&nbsp;
&nbsp;
<span class="kw1">where</span> <span class="kw1">year</span><span class="br0">&#40;</span>payment_dt<span class="br0">&#41;</span> <span class="sy0">=</span> <span class="kw1">year</span><span class="br0">&#40;</span><span class="kw2">getDate</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#41;</span>
&nbsp;
and <span class="kw1">month</span><span class="br0">&#40;</span>payment_dt<span class="br0">&#41;</span> <span class="sy0">=</span> <span class="kw1">month</span><span class="br0">&#40;</span><span class="kw2">getDate</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#41;</span> 
&nbsp;
<span class="kw1">group</span> <span class="kw1">by</span> customer_id<span class="br0">&#41;</span> MTD_payments
&nbsp;
<span class="kw1">UNION</span> <span class="sy0">ALL</span>
&nbsp;
<span class="br0">&#40;</span>
&nbsp;
<span class="kw1">select</span> customer_id, <span class="st0">'YTD'</span> <span class="kw1">as</span> record_type, <span class="kw2">count</span><span class="br0">&#40;</span><span class="sy0">*</span><span class="br0">&#41;</span>, <span class="kw2">sum</span><span class="br0">&#40;</span>...<span class="br0">&#41;</span>, <span class="kw2">avg</span><span class="br0">&#40;</span>...<span class="br0">&#41;</span>
&nbsp;
<span class="kw1">from</span> payment_table
&nbsp;
<span class="kw1">where</span> 
&nbsp;
<span class="kw1">where</span> <span class="kw1">year</span><span class="br0">&#40;</span>payment_dt<span class="br0">&#41;</span> <span class="sy0">=</span> <span class="kw1">year</span><span class="br0">&#40;</span><span class="kw2">getDate</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#41;</span>
&nbsp;
<span class="kw1">group</span> <span class="kw1">by</span> customer_id<span class="br0">&#41;</span> YTD_payments
&nbsp;
<span class="kw1">UNION</span> <span class="sy0">ALL</span>
&nbsp;
<span class="br0">&#40;</span>
&nbsp;
<span class="kw1">select</span> customer_id, <span class="st0">'LTD'</span> <span class="kw1">as</span> record_type, <span class="kw2">count</span><span class="br0">&#40;</span><span class="sy0">*</span><span class="br0">&#41;</span>, <span class="kw2">sum</span><span class="br0">&#40;</span>...<span class="br0">&#41;</span>, <span class="kw2">avg</span><span class="br0">&#40;</span>...<span class="br0">&#41;</span>
&nbsp;
<span class="kw1">from</span> payment_table<span class="br0">&#41;</span> LTD_payments
&nbsp;
<span class="br0">&#41;</span> payments_report
&nbsp;
<span class="kw1">order</span> <span class="kw1">by</span> customer_id, record_type</pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">select * from

(

select customer_id, 'MTD' as record_type, count(*), sum(...), avg(...)

from payment_table


where year(payment_dt) = year(getDate())

and month(payment_dt) = month(getDate()) 

group by customer_id) MTD_payments

UNION ALL

(

select customer_id, 'YTD' as record_type, count(*), sum(...), avg(...)

from payment_table

where 

where year(payment_dt) = year(getDate())

group by customer_id) YTD_payments

UNION ALL

(

select customer_id, 'LTD' as record_type, count(*), sum(...), avg(...)

from payment_table) LTD_payments

) payments_report

order by customer_id, record_type</pre></div></div>

<p>Can you see the problem?<br />
A person had this query, it would run for over 24 hours. Wow, that is pretty bad, I don&#8217;t think I had ever written something that ran over an hour, and the ones I did were mostly defragmentation and update statistics jobs.</p>
<p>The problem is that the following piece of code</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
</pre></td><td class="de1"><pre class="de1"><span class="kw1">where</span> <span class="kw1">year</span><span class="br0">&#40;</span>payment_dt<span class="br0">&#41;</span> <span class="sy0">=</span> <span class="kw1">year</span><span class="br0">&#40;</span><span class="kw2">getDate</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#41;</span>
and <span class="kw1">month</span><span class="br0">&#40;</span>payment_dt<span class="br0">&#41;</span> <span class="sy0">=</span> <span class="kw1">month</span><span class="br0">&#40;</span><span class="kw2">getDate</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#41;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">where year(payment_dt) = year(getDate())
and month(payment_dt) = month(getDate())</pre></div></div>

<p>is not sargable. First what does it mean to be sargable? A query is said to be sargable if the DBMS engine can take advantage of an index to speed up the execution of the query (using index seeks, not covering indexes). The term is derived from a contraction of Search ARGument Able.</p>
<p>This query is not sargable because there is a function on the column, whenever you use a function on the column you will not get an index seek but an index scan. The difference between an index seek and an index scan can be explained like this: when searching for something in a book, you go to the index in the back find the page number and go to the page, that is an index seek. When looking for something in a book you go from page one until the last page, read all the words on all the ages and get what you need, that was an index scan. Do you see how much more expensive in terms of performance that was?</p>
<p>Let&#8217;s get back to the query, what can we do to make this piece of code use an index seek?</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
</pre></td><td class="de1"><pre class="de1"><span class="kw1">where</span> <span class="kw1">year</span><span class="br0">&#40;</span>payment_dt<span class="br0">&#41;</span> <span class="sy0">=</span> <span class="kw1">year</span><span class="br0">&#40;</span><span class="kw2">getDate</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#41;</span>
and <span class="kw1">month</span><span class="br0">&#40;</span>payment_dt<span class="br0">&#41;</span> <span class="sy0">=</span> <span class="kw1">month</span><span class="br0">&#40;</span><span class="kw2">getDate</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#41;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">where year(payment_dt) = year(getDate())
and month(payment_dt) = month(getDate())</pre></div></div>

<p>You would change it to this:</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
</pre></td><td class="de1"><pre class="de1"><span class="kw1">where</span> payment_dt <span class="sy0">&gt;=</span> <span class="kw2">dateadd</span><span class="br0">&#40;</span>mm, <span class="kw2">datediff</span><span class="br0">&#40;</span>mm, <span class="nu0">0</span>, <span class="kw2">getdate</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#41;</span><span class="sy0">+</span><span class="nu0">0</span>, <span class="nu0">0</span><span class="br0">&#41;</span>
and payment_dt <span class="sy0">&lt;</span> <span class="kw2">dateadd</span><span class="br0">&#40;</span>mm, <span class="kw2">datediff</span><span class="br0">&#40;</span>mm, <span class="nu0">0</span>, <span class="kw2">getdate</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#41;</span><span class="sy0">+</span><span class="nu0">1</span>, <span class="nu0">0</span><span class="br0">&#41;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">where payment_dt &gt;= dateadd(mm, datediff(mm, 0, getdate())+0, 0)
and payment_dt &lt; dateadd(mm, datediff(mm, 0, getdate())+1, 0)</pre></div></div>

<p>You can see the complete question on the MSDN forum site here:<br />
http://social.msdn.microsoft.com/Forums/en-US/transactsql/thread/d8464d33-38cc-48ba-bd15-5e7d14eeb19c</p>
<p>The Person said that his query went from over 24 hours to 36 seconds. Wow!! That is very significant. hardware cannot help you out if you have bad queries like that.</p>
<p>The same exact day I answered a very similar question, take a look here: http://social.msdn.microsoft.com/Forums/en-US/transactsql/thread/6107ec5c-b671-485f-941e-4efdf3d2fc66</p>
<p>The person had this</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
</pre></td><td class="de1"><pre class="de1"><span class="sy0">AND</span> <span class="kw2">DATEDIFF</span><span class="br0">&#40;</span>d, <span class="st0">'08/10/2008'</span>, DateCreated<span class="br0">&#41;</span> <span class="sy0">&gt;=</span> <span class="nu0">0</span>
<span class="sy0">AND</span> <span class="kw2">DATEDIFF</span><span class="br0">&#40;</span>d, DateCreated, <span class="st0">'08/15/2008'</span><span class="br0">&#41;</span> <span class="sy0">&gt;=</span> <span class="nu0">0</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">AND DATEDIFF(d, '08/10/2008', DateCreated) &gt;= 0
AND DATEDIFF(d, DateCreated, '08/15/2008') &gt;= 0</pre></div></div>

<p>I told him to change it to this</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
</pre></td><td class="de1"><pre class="de1"><span class="sy0">AND</span> DateCreated <span class="sy0">&gt;=</span> <span class="st0">'08/10/2008'</span>
and DateCreated <span class="sy0">&lt;</span> <span class="st0">'08/16/2008'</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">AND DateCreated &gt;= '08/10/2008'
and DateCreated &lt; '08/16/2008'</pre></div></div>

<p>And that solved that query. If you are interested in some more performance, I have written some <a href="http://wiki.lessthandot.com/index.php/SQL_Server_Programming_Hacks_-_100%2B_List#Query_Optimization">Query Optimization</a>  items on the LessThanDot Wiki. Below are some direct links</p>
<pre>&lt;a href="http://wiki.lessthandot.com/index.php/Case_Sensitive_Search" title="Case Sensitive Search"&gt;Case Sensitive Search&lt;/a&gt;
&lt;a href="http://wiki.lessthandot.com/index.php/No_Functions_on_Left_Side_of_Operator" title="No Functions on Left Side of Operator"&gt;No Functions on Left Side of Operator&lt;/a&gt;
&lt;a href="http://wiki.lessthandot.com/index.php/Query_Optimizations_With_Dates" title="Query Optimizations With Dates"&gt;Query Optimizations With Dates&lt;/a&gt;
&lt;a href="http://wiki.lessthandot.com/index.php/Optimization:_Set_Nocount_On" title="Optimization: Set Nocount On"&gt;Optimization: Set Nocount On&lt;/a&gt;
&lt;a href="http://wiki.lessthandot.com/index.php/No_Math_In_Where_Clause" title="No Math In Where Clause"&gt;No Math In Where Clause&lt;/a&gt;
&lt;a href="http://wiki.lessthandot.com/index.php/Don%27t_Use_%28select_%2A%29%2C_but_List_Columns" title="Don't Use (select *), but List Columns"&gt;Don't Use (select *), but List Columns&lt;/a&gt;</pre>
<p>If you are interested in some blogposts about dates, take a look at these two which I wrote earlier<br />
<a href="/index.php/DataMgmt/DataDesign/how-are-dates-stored-in-sql-server">How Are Dates Stored In SQL Server?</a><br />
<a href="/index.php/DataMgmt/DataDesign/how-does-between-work-with-dates-in-sql-">Do You Know How Between Works With Dates?</a></p>
]]></content:encoded>
			<wfw:commentRss>/index.php/datamgmt/datadesign/only-in-a-database-can-you-get-1000-impr/feed/</wfw:commentRss>
		<slash:comments>20</slash:comments>
		</item>
	</channel>
</rss>
