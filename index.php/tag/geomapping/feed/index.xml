<?xml version="1.0" encoding="UTF-8"?><rss version="2.0"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:atom="http://www.w3.org/2005/Atom"
	xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
	xmlns:slash="http://purl.org/rss/1.0/modules/slash/"
	>

<channel>
	<title>geomapping &#8211; LessthanDot</title>
	<atom:link href="/index.php/tag/geomapping/feed/" rel="self" type="application/rss+xml" />
	<link>/</link>
	<description>A Technical Community for IT Professionals</description>
	<lastBuildDate>Sat, 09 Mar 2019 12:50:36 +0000</lastBuildDate>
	<language>en-US</language>
	<sy:updatePeriod>hourly</sy:updatePeriod>
	<sy:updateFrequency>1</sy:updateFrequency>
	<generator>https://wordpress.org/?v=4.6.1</generator>
	<item>
		<title>SQL Server 2008 Proximity Search With The Geography Data Type</title>
		<link>/index.php/datamgmt/datadesign/sql-server-2008-proximity-search-with-th/</link>
		<comments>/index.php/datamgmt/datadesign/sql-server-2008-proximity-search-with-th/#comments</comments>
		<pubDate>Wed, 11 Feb 2009 18:27:31 +0000</pubDate>
		<dc:creator><![CDATA[SQLDenis]]></dc:creator>
				<category><![CDATA[Data Modelling and Design]]></category>
		<category><![CDATA[Microsoft SQL Server]]></category>
		<category><![CDATA[geography]]></category>
		<category><![CDATA[geomapping]]></category>
		<category><![CDATA[spatial data]]></category>
		<category><![CDATA[sql server 2008]]></category>

		<guid isPermaLink="false">/index.php/2009/02/sql-server-2008-proximity-search-with-th/</guid>
		<description><![CDATA[George and I decided to show you how you can do simple radius searches based on Zip Codes, he did the SQL 2005 and before version here:   SQL Server Zipcode Latitude/Longitude proximity distance search and I will do the SQL Server 2008 version.

The f&#8230;]]></description>
				<content:encoded><![CDATA[<p>George and I decided to show you how you can do simple radius searches based on Zip Codes, he did the SQL 2005 and before version here:   <a href="/index.php/DataMgmt/DataDesign/sql-server-zipcode-latitude-longitude-pr">SQL Server Zipcode Latitude/Longitude proximity distance search</a> and I will do the SQL Server 2008 version.</p>
<p>The first thing we need to do is load our data. There are various sources for this data, ranging from free to expensive monthly subscriptions. One source of free data is: http://download.geonames.org/export/zip/ make sure to grab the US.ZIP file for this demo. Unrar/Unzip the file and you will have a US.txt file.</p>
<p>Once you have downloaded your data, the next step is to import it in to your database. You can use the following script to do it.</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
</pre></td><td class="de1"><pre class="de1"><span class="kw1">CREATE</span> <span class="kw1">TABLE</span> ZipCodesTemp<span class="br0">&#40;</span>
&nbsp; &nbsp; <span class="br0">&#91;</span>Country<span class="br0">&#93;</span> <span class="br0">&#91;</span><span class="kw1">VARCHAR</span><span class="br0">&#93;</span><span class="br0">&#40;</span><span class="nu0">2</span><span class="br0">&#41;</span> <span class="sy0">NULL</span>,
&nbsp; &nbsp; <span class="br0">&#91;</span>ZipCode<span class="br0">&#93;</span> <span class="br0">&#91;</span><span class="kw1">VARCHAR</span><span class="br0">&#93;</span><span class="br0">&#40;</span><span class="nu0">5</span><span class="br0">&#41;</span> <span class="sy0">NULL</span>,
&nbsp; &nbsp; <span class="br0">&#91;</span>City<span class="br0">&#93;</span> <span class="br0">&#91;</span><span class="kw1">VARCHAR</span><span class="br0">&#93;</span><span class="br0">&#40;</span><span class="nu0">200</span><span class="br0">&#41;</span> <span class="sy0">NULL</span>,
&nbsp; &nbsp; <span class="br0">&#91;</span><span class="kw1">STATE</span><span class="br0">&#93;</span> <span class="br0">&#91;</span><span class="kw1">VARCHAR</span><span class="br0">&#93;</span><span class="br0">&#40;</span><span class="nu0">50</span><span class="br0">&#41;</span> <span class="sy0">NULL</span>,
&nbsp; &nbsp; <span class="br0">&#91;</span>StateAbbreviation<span class="br0">&#93;</span> <span class="br0">&#91;</span><span class="kw1">VARCHAR</span><span class="br0">&#93;</span><span class="br0">&#40;</span><span class="nu0">2</span><span class="br0">&#41;</span> <span class="sy0">NULL</span>,
&nbsp; &nbsp; <span class="br0">&#91;</span>County<span class="br0">&#93;</span> <span class="br0">&#91;</span><span class="kw1">VARCHAR</span><span class="br0">&#93;</span><span class="br0">&#40;</span><span class="nu0">50</span><span class="br0">&#41;</span> <span class="sy0">NULL</span>,
&nbsp; &nbsp; <span class="br0">&#91;</span>Unused1<span class="br0">&#93;</span> <span class="br0">&#91;</span><span class="kw1">VARCHAR</span><span class="br0">&#93;</span><span class="br0">&#40;</span><span class="nu0">5</span><span class="br0">&#41;</span> <span class="sy0">NULL</span>,
&nbsp; &nbsp; <span class="br0">&#91;</span>Unused2<span class="br0">&#93;</span> <span class="br0">&#91;</span><span class="kw1">VARCHAR</span><span class="br0">&#93;</span><span class="br0">&#40;</span><span class="nu0">1</span><span class="br0">&#41;</span> <span class="sy0">NULL</span>,
&nbsp; &nbsp; <span class="br0">&#91;</span>Latitude<span class="br0">&#93;</span> <span class="br0">&#91;</span><span class="kw1">DECIMAL</span><span class="br0">&#93;</span><span class="br0">&#40;</span><span class="nu0">8</span>,<span class="nu0">5</span><span class="br0">&#41;</span> <span class="sy0">NULL</span>,
&nbsp; &nbsp; <span class="br0">&#91;</span>Longitude<span class="br0">&#93;</span> <span class="br0">&#91;</span><span class="kw1">DECIMAL</span><span class="br0">&#93;</span><span class="br0">&#40;</span><span class="nu0">8</span>,<span class="nu0">5</span><span class="br0">&#41;</span> <span class="sy0">NULL</span>,
&nbsp; &nbsp; <span class="br0">&#91;</span>Unused3<span class="br0">&#93;</span> <span class="br0">&#91;</span><span class="kw1">VARCHAR</span><span class="br0">&#93;</span><span class="br0">&#40;</span><span class="nu0">1</span><span class="br0">&#41;</span> <span class="sy0">NULL</span>
&nbsp; &nbsp; <span class="br0">&#41;</span>
&nbsp;
&nbsp;
<span class="kw1">DECLARE</span> @bulk_cmd <span class="kw1">VARCHAR</span><span class="br0">&#40;</span><span class="nu0">1000</span><span class="br0">&#41;</span>
<span class="kw1">SET</span> @bulk_cmd <span class="sy0">=</span> <span class="st0">'BULK INSERT ZipCodesTemp</span>
<span class="st0"> &nbsp; FROM '</span><span class="st0">'C:YourFolderUS.txt'</span><span class="st0">'</span>
<span class="st0"> &nbsp; WITH (FIELDTERMINATOR='</span><span class="st0">'t'</span><span class="st0">', ROWTERMINATOR = '</span><span class="st0">''</span><span class="sy0">+</span><span class="kw1">CHAR</span><span class="br0">&#40;</span><span class="nu0">10</span><span class="br0">&#41;</span><span class="sy0">+</span><span class="st0">''</span><span class="st0">')'</span>
&nbsp;
<span class="kw1">EXEC</span><span class="br0">&#40;</span>@bulk_cmd<span class="br0">&#41;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">CREATE TABLE ZipCodesTemp(
    [Country] [VARCHAR](2) NULL,
    [ZipCode] [VARCHAR](5) NULL,
    [City] [VARCHAR](200) NULL,
    [STATE] [VARCHAR](50) NULL,
    [StateAbbreviation] [VARCHAR](2) NULL,
    [County] [VARCHAR](50) NULL,
    [Unused1] [VARCHAR](5) NULL,
    [Unused2] [VARCHAR](1) NULL,
    [Latitude] [DECIMAL](8,5) NULL,
    [Longitude] [DECIMAL](8,5) NULL,
    [Unused3] [VARCHAR](1) NULL
    )


DECLARE @bulk_cmd VARCHAR(1000)
SET @bulk_cmd = 'BULK INSERT ZipCodesTemp
   FROM ''C:YourFolderUS.txt''
   WITH (FIELDTERMINATOR=''t'', ROWTERMINATOR = '''+CHAR(10)+''')'
 
EXEC(@bulk_cmd)</pre></div></div>

<p>Now you will create this table</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
</pre></td><td class="de1"><pre class="de1"><span class="kw1">CREATE</span> <span class="kw1">TABLE</span> ZipCodes<span class="br0">&#40;</span>
&nbsp; &nbsp; <span class="br0">&#91;</span>Country<span class="br0">&#93;</span> <span class="br0">&#91;</span><span class="kw1">VARCHAR</span><span class="br0">&#93;</span><span class="br0">&#40;</span><span class="nu0">2</span><span class="br0">&#41;</span> &nbsp;<span class="sy0">NULL</span>,
&nbsp; &nbsp; <span class="br0">&#91;</span>ZipCode<span class="br0">&#93;</span> <span class="br0">&#91;</span><span class="kw1">VARCHAR</span><span class="br0">&#93;</span><span class="br0">&#40;</span><span class="nu0">5</span><span class="br0">&#41;</span> <span class="sy0">NOT</span> <span class="sy0">NULL</span>,
&nbsp; &nbsp; <span class="br0">&#91;</span>City<span class="br0">&#93;</span> <span class="br0">&#91;</span><span class="kw1">VARCHAR</span><span class="br0">&#93;</span><span class="br0">&#40;</span><span class="nu0">200</span><span class="br0">&#41;</span> &nbsp;<span class="sy0">NULL</span>,
&nbsp; &nbsp; <span class="br0">&#91;</span><span class="kw1">STATE</span><span class="br0">&#93;</span> <span class="br0">&#91;</span><span class="kw1">VARCHAR</span><span class="br0">&#93;</span><span class="br0">&#40;</span><span class="nu0">50</span><span class="br0">&#41;</span> &nbsp;<span class="sy0">NULL</span>,
&nbsp; &nbsp; <span class="br0">&#91;</span>StateAbbreviation<span class="br0">&#93;</span> <span class="br0">&#91;</span><span class="kw1">VARCHAR</span><span class="br0">&#93;</span><span class="br0">&#40;</span><span class="nu0">2</span><span class="br0">&#41;</span> &nbsp;<span class="sy0">NULL</span>,
&nbsp; &nbsp; <span class="br0">&#91;</span>County<span class="br0">&#93;</span> <span class="br0">&#91;</span><span class="kw1">VARCHAR</span><span class="br0">&#93;</span><span class="br0">&#40;</span><span class="nu0">50</span><span class="br0">&#41;</span> <span class="sy0">NULL</span>,
&nbsp; &nbsp; <span class="br0">&#91;</span>Latitude<span class="br0">&#93;</span> <span class="br0">&#91;</span><span class="kw1">DECIMAL</span><span class="br0">&#93;</span><span class="br0">&#40;</span><span class="nu0">8</span>,<span class="nu0">5</span><span class="br0">&#41;</span> <span class="sy0">NOT</span> <span class="sy0">NULL</span>,
&nbsp; &nbsp; <span class="br0">&#91;</span>Longitude<span class="br0">&#93;</span> <span class="br0">&#91;</span><span class="kw1">DECIMAL</span><span class="br0">&#93;</span><span class="br0">&#40;</span><span class="nu0">8</span>,<span class="nu0">5</span><span class="br0">&#41;</span> <span class="sy0">NOT</span> <span class="sy0">NULL</span>,
&nbsp; &nbsp; <span class="br0">&#91;</span>GeogCol1<span class="br0">&#93;</span> <span class="br0">&#91;</span>GEOGRAPHY<span class="br0">&#93;</span> &nbsp;<span class="sy0">NULL</span>,
&nbsp; &nbsp; <span class="br0">&#91;</span>GeogColTemp<span class="br0">&#93;</span> <span class="br0">&#91;</span><span class="kw1">varchar</span><span class="br0">&#93;</span><span class="br0">&#40;</span><span class="nu0">100</span><span class="br0">&#41;</span> <span class="sy0">NULL</span>
&nbsp; &nbsp; <span class="br0">&#41;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">CREATE TABLE ZipCodes(
    [Country] [VARCHAR](2)  NULL,
    [ZipCode] [VARCHAR](5) NOT NULL,
    [City] [VARCHAR](200)  NULL,
    [STATE] [VARCHAR](50)  NULL,
    [StateAbbreviation] [VARCHAR](2)  NULL,
    [County] [VARCHAR](50) NULL,
    [Latitude] [DECIMAL](8,5) NOT NULL,
    [Longitude] [DECIMAL](8,5) NOT NULL,
    [GeogCol1] [GEOGRAPHY]  NULL,
    [GeogColTemp] [varchar](100) NULL
    )</pre></div></div>

<p>There is at least one duplicate row in this file so we will import only uniques</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
</pre></td><td class="de1"><pre class="de1"><span class="kw1">INSERT</span> &nbsp;ZipCodes <span class="br0">&#40;</span>Country,ZipCode,City,<span class="kw1">STATE</span>,StateAbbreviation,County,Latitude,Longitude<span class="br0">&#41;</span>
<span class="kw1">SELECT</span> <span class="kw1">DISTINCT</span> Country,ZipCode,City,<span class="kw1">STATE</span>,StateAbbreviation,County,Latitude,Longitude
<span class="kw1">FROM</span> &nbsp;ZipCodesTemp</pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">INSERT  ZipCodes (Country,ZipCode,City,STATE,StateAbbreviation,County,Latitude,Longitude)
SELECT DISTINCT Country,ZipCode,City,STATE,StateAbbreviation,County,Latitude,Longitude
FROM  ZipCodesTemp</pre></div></div>

<p>Our next step will be to update the GeogCol1 table with something that SQL server can understand.<br />
Here is some sample code that displays the format of this datatype</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
</pre></td><td class="de1"><pre class="de1"><span class="kw1">DECLARE</span> @h geography;
<span class="kw1">SET</span> @h <span class="sy0">=</span> geography::STGeomFromText<span class="br0">&#40;</span><span class="st0">'POINT(-77.36750 38.98390)'</span>, <span class="nu0">4326</span><span class="br0">&#41;</span>;
<span class="kw1">SELECT</span> @h</pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">DECLARE @h geography;
SET @h = geography::STGeomFromText('POINT(-77.36750 38.98390)', 4326);
SELECT @h</pre></div></div>

<p>output<br />
&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;-<br />
0xE6100000010C6744696FF07D4340EC51B81E855753C0</p>
<p>As you can see it is some binary data. This data is using the World Geodetic System 1984 (WGS 84)</p>
<p>To see if this is supported in your database you can run this query</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
</pre></td><td class="de1"><pre class="de1"><span class="kw1">SELECT</span> <span class="sy0">*</span> <span class="kw1">FROM</span> sys.<span class="me1">spatial_reference_systems</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">SELECT * FROM sys.spatial_reference_systems</pre></div></div>

<p>And yes in my database it has a spatial_reference_id of 4326</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
</pre></td><td class="de1"><pre class="de1"><span class="kw1">SELECT</span> <span class="sy0">*</span> <span class="kw1">FROM</span> sys.<span class="me1">spatial_reference_systems</span>
<span class="kw1">WHERE</span> spatial_reference_id <span class="sy0">=</span> <span class="nu0">4326</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">SELECT * FROM sys.spatial_reference_systems
WHERE spatial_reference_id = 4326</pre></div></div>

<p>Here is the meta data</p>
<p>GEOGCS[&#8220;WGS 84&#8221;, DATUM[&#8220;World Geodetic System 1984&#8221;,<br />
ELLIPSOID[&#8220;WGS 84&#8221;, 6378137, 298.257223563]], PRIMEM[&#8220;Greenwich&#8221;, 0],<br />
UNIT[&#8220;Degree&#8221;, 0.0174532925199433]]</p>
<p>Back to our code, in order to have this data in our table</p>
<p>SET @h = geography::STGeomFromText(&#8216;POINT(-77.36750 38.98390)&#8217;, 4326);</p>
<p>We need to do some things, first we update our temp column</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
</pre></td><td class="de1"><pre class="de1"><span class="kw1">UPDATE</span> zipcodes 
<span class="kw1">SET</span> GeogColTemp<span class="sy0">=</span> <span class="st0">'POINT('</span> <span class="sy0">+</span> <span class="kw1">convert</span><span class="br0">&#40;</span><span class="kw1">varchar</span><span class="br0">&#40;</span><span class="nu0">100</span><span class="br0">&#41;</span>,longitude<span class="br0">&#41;</span> 
<span class="sy0">+</span><span class="st0">' '</span> <span class="sy0">+</span> &nbsp;<span class="kw1">convert</span><span class="br0">&#40;</span><span class="kw1">varchar</span><span class="br0">&#40;</span><span class="nu0">100</span><span class="br0">&#41;</span>,latitude<span class="br0">&#41;</span> <span class="sy0">+</span><span class="st0">')'</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">UPDATE zipcodes 
SET GeogColTemp= 'POINT(' + convert(varchar(100),longitude) 
+' ' +  convert(varchar(100),latitude) +')'</pre></div></div>

<p>Now we can update out geography column</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
</pre></td><td class="de1"><pre class="de1"><span class="kw1">UPDATE</span> zipcodes 
<span class="kw1">SET</span> GeogCol1 <span class="sy0">=</span> &nbsp;geography::STGeomFromText<span class="br0">&#40;</span>GeogColTemp,<span class="nu0">4326</span><span class="br0">&#41;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">UPDATE zipcodes 
SET GeogCol1 =  geography::STGeomFromText(GeogColTemp,4326)</pre></div></div>

<p>We can drop the temp column now</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
</pre></td><td class="de1"><pre class="de1"><span class="kw1">ALTER</span> <span class="kw1">TABLE</span> zipcodes <span class="kw1">DROP</span> <span class="kw1">COLUMN</span> GeogColTemp</pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">ALTER TABLE zipcodes DROP COLUMN GeogColTemp</pre></div></div>

<p>Now we have to add a primary key, this is needed because otherwise we won&#8217;t be able to create our spatial index and the following message would be displayed</p>
<p>Server: Msg 12008, Level 16, State 1, Line 1<br />
Table &#8216;zipcodes&#8217; does not have a clustered primary key as required by the spatial index. Make sure that the primary key column exists on the table before creating a spatial index.</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
</pre></td><td class="de1"><pre class="de1"><span class="kw1">ALTER</span> <span class="kw1">TABLE</span> zipcodes <span class="kw1">ADD</span> 
&nbsp; &nbsp; <span class="kw1">CONSTRAINT</span> <span class="br0">&#91;</span>PK_ZipCode<span class="br0">&#93;</span> <span class="kw1">PRIMARY</span> <span class="kw1">KEY</span> &nbsp;<span class="kw1">CLUSTERED</span> 
&nbsp; &nbsp; <span class="br0">&#40;</span>
&nbsp; &nbsp; &nbsp; &nbsp; Zipcode,
&nbsp; &nbsp; &nbsp; &nbsp; Longitude
&nbsp; &nbsp; <span class="br0">&#41;</span> <span class="kw1">WITH</span> &nbsp;<span class="kw1">FILLFACTOR</span> <span class="sy0">=</span> <span class="nu0">100</span> </pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">ALTER TABLE zipcodes ADD 
	CONSTRAINT [PK_ZipCode] PRIMARY KEY  CLUSTERED 
	(
		Zipcode,
		Longitude
	) WITH  FILLFACTOR = 100 </pre></div></div>

<p>Create the spatial index</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
</pre></td><td class="de1"><pre class="de1"><span class="kw1">CREATE</span> SPATIAL <span class="kw1">INDEX</span> SIndx_SpatialTable_geography_col1 
&nbsp; &nbsp;<span class="kw1">ON</span> zipcodes<span class="br0">&#40;</span>GeogCol1<span class="br0">&#41;</span>;</pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">CREATE SPATIAL INDEX SIndx_SpatialTable_geography_col1 
   ON zipcodes(GeogCol1);</pre></div></div>

<p>first I will show you an example to calculate the distance that you can execute</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
</pre></td><td class="de1"><pre class="de1"><span class="kw1">DECLARE</span> @g geography;
<span class="kw1">DECLARE</span> @h geography;
<span class="kw1">SET</span> @h <span class="sy0">=</span> geography::STGeomFromText<span class="br0">&#40;</span><span class="st0">'POINT(-77.36750 38.98390)'</span>, <span class="nu0">4326</span><span class="br0">&#41;</span>;
<span class="kw1">SET</span> @g <span class="sy0">=</span> geography::STGeomFromText<span class="br0">&#40;</span><span class="st0">'POINT(-77.36160 38.85570)'</span>, <span class="nu0">4326</span><span class="br0">&#41;</span>;
<span class="kw1">SELECT</span> @g.<span class="me1">STDistance</span><span class="br0">&#40;</span>@h<span class="br0">&#41;</span><span class="sy0">/</span><span class="nu0">1609.344</span>;</pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">DECLARE @g geography;
DECLARE @h geography;
SET @h = geography::STGeomFromText('POINT(-77.36750 38.98390)', 4326);
SET @g = geography::STGeomFromText('POINT(-77.36160 38.85570)', 4326);
SELECT @g.STDistance(@h)/1609.344;</pre></div></div>

<p>as you can see the distance is 8.8490611480890067</p>
<p>Now I want to see all the zipcode which are within 20 miles of zipcode 10028 (yes I used to live there)</p>
<p>Here is a way that will take a long time since it is not sargable, this will take about 2 seconds</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
</pre></td><td class="de1"><pre class="de1"><span class="kw1">SELECT</span> h.<span class="sy0">*</span> 
<span class="kw1">FROM</span> zipcodes g 
<span class="sy0">JOIN</span> zipcodes h <span class="kw1">on</span> g.<span class="me1">zipcode</span> <span class="sy0">&lt;&gt;</span> h.<span class="me1">zipcode</span>
<span class="sy0">AND</span> g.<span class="me1">zipcode</span> <span class="sy0">=</span> <span class="st0">'10028'</span>
<span class="sy0">AND</span> h.<span class="me1">zipcode</span> <span class="sy0">&lt;&gt;</span> <span class="st0">'10028'</span>
<span class="kw1">WHERE</span> g.<span class="me1">GeogCol1</span>.<span class="me1">STDistance</span><span class="br0">&#40;</span>h.<span class="me1">GeogCol1</span><span class="br0">&#41;</span><span class="sy0">/</span><span class="nu0">1609.344</span> <span class="sy0">&lt;=</span> <span class="nu0">20</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">SELECT h.* 
FROM zipcodes g 
JOIN zipcodes h on g.zipcode &lt;&gt; h.zipcode
AND g.zipcode = '10028'
AND h.zipcode &lt;&gt; '10028'
WHERE g.GeogCol1.STDistance(h.GeogCol1)/1609.344 &lt;= 20</pre></div></div>

<p>Now we all know functions on the left side of the operator are bad, here is how this is optimized, we switch the calculation to the right side of the = sign</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
</pre></td><td class="de1"><pre class="de1"><span class="kw1">SELECT</span> h.<span class="sy0">*</span> 
<span class="kw1">FROM</span> zipcodes g 
<span class="sy0">JOIN</span> zipcodes h <span class="kw1">on</span> g.<span class="me1">zipcode</span> <span class="sy0">&lt;&gt;</span> h.<span class="me1">zipcode</span>
<span class="sy0">AND</span> g.<span class="me1">zipcode</span> <span class="sy0">=</span> <span class="st0">'10028'</span>
<span class="sy0">AND</span> h.<span class="me1">zipcode</span> <span class="sy0">&lt;&gt;</span> <span class="st0">'10028'</span>
<span class="kw1">WHERE</span> g.<span class="me1">GeogCol1</span>.<span class="me1">STDistance</span><span class="br0">&#40;</span>h.<span class="me1">GeogCol1</span><span class="br0">&#41;</span><span class="sy0">&lt;=</span><span class="br0">&#40;</span><span class="nu0">20</span> <span class="sy0">*</span> <span class="nu0">1609.344</span><span class="br0">&#41;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">SELECT h.* 
FROM zipcodes g 
JOIN zipcodes h on g.zipcode &lt;&gt; h.zipcode
AND g.zipcode = '10028'
AND h.zipcode &lt;&gt; '10028'
WHERE g.GeogCol1.STDistance(h.GeogCol1)&lt;=(20 * 1609.344)</pre></div></div>

<p>that ran in between 15 and 60 milliseconds</p>
<p>To find everything between 10 and 20 miles you can use this</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
</pre></td><td class="de1"><pre class="de1"><span class="kw1">SELECT</span> h.<span class="sy0">*</span> 
<span class="kw1">FROM</span> zipcodes g 
<span class="sy0">JOIN</span> zipcodes h <span class="kw1">on</span> g.<span class="me1">zipcode</span> <span class="sy0">&lt;&gt;</span> h.<span class="me1">zipcode</span>
<span class="sy0">AND</span> g.<span class="me1">zipcode</span> <span class="sy0">=</span> <span class="st0">'10028'</span>
<span class="sy0">AND</span> h.<span class="me1">zipcode</span> <span class="sy0">&lt;&gt;</span> <span class="st0">'10028'</span>
<span class="kw1">WHERE</span> g.<span class="me1">GeogCol1</span>.<span class="me1">STDistance</span><span class="br0">&#40;</span>h.<span class="me1">GeogCol1</span><span class="br0">&#41;</span><span class="sy0">&lt;=</span><span class="br0">&#40;</span><span class="nu0">20</span> <span class="sy0">*</span> <span class="nu0">1609.344</span><span class="br0">&#41;</span>
<span class="sy0">AND</span> g.<span class="me1">GeogCol1</span>.<span class="me1">STDistance</span><span class="br0">&#40;</span>h.<span class="me1">GeogCol1</span><span class="br0">&#41;</span><span class="sy0">&gt;=</span> <span class="br0">&#40;</span><span class="nu0">10</span> <span class="sy0">*</span> <span class="nu0">1609.344</span><span class="br0">&#41;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">SELECT h.* 
FROM zipcodes g 
JOIN zipcodes h on g.zipcode &lt;&gt; h.zipcode
AND g.zipcode = '10028'
AND h.zipcode &lt;&gt; '10028'
WHERE g.GeogCol1.STDistance(h.GeogCol1)&lt;=(20 * 1609.344)
AND g.GeogCol1.STDistance(h.GeogCol1)&gt;= (10 * 1609.344)</pre></div></div>

<p>As you can see doing stuff like this on SQL Server 2008 is fairly easy because of the geograpy data type</p>
<p>*** <strong>If you have a SQL related question try our <a href="http://forum.lessthandot.com/viewforum.php?f=17">Microsoft SQL Server Programming</a> forum or our <a href="http://forum.lessthandot.com/viewforum.php?f=22">Microsoft SQL Server Admin</a> forum</strong><ins></ins></p>
]]></content:encoded>
			<wfw:commentRss>/index.php/datamgmt/datadesign/sql-server-2008-proximity-search-with-th/feed/</wfw:commentRss>
		<slash:comments>50</slash:comments>
		</item>
	</channel>
</rss>
