<?xml version="1.0" encoding="UTF-8"?><rss version="2.0"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:atom="http://www.w3.org/2005/Atom"
	xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
	xmlns:slash="http://purl.org/rss/1.0/modules/slash/"
	>

<channel>
	<title>development &#8211; LessthanDot</title>
	<atom:link href="/index.php/tag/development/feed/" rel="self" type="application/rss+xml" />
	<link>/</link>
	<description>A Technical Community for IT Professionals</description>
	<lastBuildDate>Sat, 09 Mar 2019 12:50:36 +0000</lastBuildDate>
	<language>en-US</language>
	<sy:updatePeriod>hourly</sy:updatePeriod>
	<sy:updateFrequency>1</sy:updateFrequency>
	<generator>https://wordpress.org/?v=4.6.1</generator>
	<item>
		<title>Using Code Katas to Improve Programming Skills</title>
		<link>/index.php/itprofessionals/professionaldevelopment/using-code-katas-to-improve/</link>
		<comments>/index.php/itprofessionals/professionaldevelopment/using-code-katas-to-improve/#comments</comments>
		<pubDate>Tue, 20 Sep 2011 09:56:00 +0000</pubDate>
		<dc:creator><![CDATA[Eli Weinstock-Herman (tarwn)]]></dc:creator>
				<category><![CDATA[Professional Development]]></category>
		<category><![CDATA[development]]></category>
		<category><![CDATA[kata]]></category>
		<category><![CDATA[programming]]></category>

		<guid isPermaLink="false">/index.php/2011/09/using-code-katas-to-improve/</guid>
		<description><![CDATA[Feelings about programming katas tend to fall into one of 3 buckets; disdain, indifference, or appreciation. The indifferent crowd generally doesn't see what you learn from repeating the same coding exercise, while the disdainful crowd feels the same way, but at a much louder (and of course disdainful) volume. That leaves the group that feel there is value in repetitively coding the same exercise or coding numerous small code examples.]]></description>
				<content:encoded><![CDATA[<p>Feelings about programming katas tend to fall into one of 3 buckets; disdain, indifference, or appreciation. The indifferent crowd generally doesn&#8217;t see what you learn from repeating the same coding exercise, while the disdainful crowd feels the same way, but at a much louder (and of course disdainful) volume. That leaves the group that feel there is value in repetitively coding the same exercise or coding numerous small code examples.</p>
<p>I was in the indifferent group, but then I tried it.</p>
<h2>Where I Started</h2>
<p><img src="http://tiernok.com/LTDBlog/clock.png" style="float: right; margin: 0px 0px 10px 10px" /></p>
<p>After finishing <a href="http://www.amazon.com/gp/product/0137081073" title="The Clean Coder at Amazon">The Clean Coder</a> recently, I decided to give this kata thing a try. I started out with a fairly simple problem in a language I was comfortable with and spent 15-30 minutes each night trying a different variant or constraint. What I found was that even the act of setting up for a kata was a learning experience, in one case learning an entirely new unit test framework before I could even begin.</p>
<p>Fast forward a couple weeks and I think this is becoming a regular part of my ongoing development. I&#8217;ve even taken to synching my local mercurial repositories up to <a href="http://bitbucket.org/tarwn" title="Go to my BitBucket account">my BitBucket account</a> so that others can take advantage of the pre-setup projects and test scenarios. (I haven&#8217;t quite embraced the throw-away aspect yet, but I suspect I won&#8217;t be keeping all of my repetitive attempts.)</p>
<p>In the past several weeks I&#8217;ve gained a lot more practice with mercurial, played with some concepts in C# (like Continuation Passing Style), and started digging into unit testing JavaScript. I&#8217;ve learned markdown simply by spending an hour or two formatting a series of text documents (an uninspired exercise, I&#8217;ll admit) and .. well, for the not much time investment I can already see that this will be a good habit to add.</p>
<h2>Why (or How) it Works</h2>
<p>So why, then, do people do this? Obviously it takes time to write a program, no matter how small. <a href="http://www.objectmentor.com/omTeam/martin_r.html">Robert C. Martin</a>, author of The Clean Coder above, swears by this practice. Jeff Atwood is another who <a href="http://www.codinghorror.com/blog/2008/06/the-ultimate-code-kata.html">wrote about katas</a>. Dave Thomas (first kata link below) introduced the term as co-author of The Pragmatic Programmer. </p>
<p>But where is the value in repeating a simple exercise?</p>
<h3>The Challenge</h3>
<p>The first thing that struck me about code katas is their similarity to forum questions the LTD group used to hijack, back in the day. Someone would come up with a perfectly reasonable solution to a somewhat reasonable problem, then 2 or 3 of us would turn it into a 30 reply post, each trying to find a shorter, faster, whackier, whatever-er method of solving the same problem. In fact, the reason I learned how to use python and perl in classic ASP web pages was due to challenges like this.</p>
<p>The value of short, varied approaches is it forces us to stretch our knowledge of a language or syntax. Playing with constraints (performance, code length, memory limits, etc) help us explore more about a language or technology and choosing a short exercise as a base means we spend most of our time in that exploration, rather than in the act of retyping a solution or having to build a large structure to work with.</p>
<h3>Focus</h3>
<p><img src="http://tiernok.com/LTDBlog/Scores2.png" style="float: right; margin: 0px 0px 10px 10px" /></p>
<p>By selecting a fairly simple problem, we can choose to focus on any other aspect of programming that we want. Besides introducing rules or constraints to make the program more challenging, we can also use repetition of a simple, known problem to better get to know our tools or learn new supporting tools. Examples include improving use of keyboard shortcuts, trying out methods like TDD, and training ourselves on new habits or standards. By working on something we already know the answer to, we are free to play with the aspects of how we get to that answer.</p>
<h3>No Loss</h3>
<p>The last benefit to a programming kata is we can throw it away when we&#8217;re done or even stop it halfway and simply delete it. Whatever aspect we have chosen to focus on or challenge ourselves with, this is still a small bit of practice code. Rather than trying to learn something new with a piece of code we will eventually have to support, we can play in a sandbox and put it away when we&#8217;re done.</p>
<h2>Where Can You Start</h2>
<p>So, if you wanted to try this out, where could you start?</p>
<ul>
<li><a href="http://codekata.pragprog.com/">CodeKata.PragProg.com</a> &#8211; Dave Thomas has listed 21 programming and non-programming exercises</li>
<li>Forums &#8211; Find a forum question that requires more than 5 lines of code for an answer. Write it, reinvent it, mix, repeat</li>
<li><a href="http://codingdojo.org/cgi-bin/wiki.pl?KataCatalogue">Coding Dojo</a> &#8211; A catalog of 23 katas</li>
<li><a href="http://projecteuler.net/">Project Euler</a> &#8211; a series of challenging math problems that make excellent practice problems</li>
<li><a href="http://topcoder.com/">TopCoder</a> &#8211; Though it exists as a programming competition, the sample and practice problems at TopCoder make good katas (if you can get the crash-friendly interface to work and find them, that is)</li>
<li>Blogging &#8211; Writing about a topic forces us to explore and better define or communicate it</li>
</ul>
<p>The best way to start is to pick something you feel like you can finish in 15-30 minutes and try to do a variant of it every day or two. If you feel like you&#8217;re not getting any value out of it after a week or two, you can stop; your time investment has been low. If you do start seeing some value in it, though, you have another tool for keeping your skills relevant and sharp.</p>
]]></content:encoded>
			<wfw:commentRss>/index.php/itprofessionals/professionaldevelopment/using-code-katas-to-improve/feed/</wfw:commentRss>
		<slash:comments>7</slash:comments>
		</item>
		<item>
		<title>Building a Lightweight Project Management Process</title>
		<link>/index.php/itprofessionals/projectmanagement/building-a-lightweight-project-management-process/</link>
		<comments>/index.php/itprofessionals/projectmanagement/building-a-lightweight-project-management-process/#comments</comments>
		<pubDate>Mon, 18 Jul 2011 10:40:00 +0000</pubDate>
		<dc:creator><![CDATA[Eli Weinstock-Herman (tarwn)]]></dc:creator>
				<category><![CDATA[IT Processes]]></category>
		<category><![CDATA[Project Management]]></category>
		<category><![CDATA[agile]]></category>
		<category><![CDATA[development]]></category>
		<category><![CDATA[lean]]></category>
		<category><![CDATA[project management]]></category>
		<category><![CDATA[visual board]]></category>

		<guid isPermaLink="false">/index.php/2011/07/building-a-lightweight-project-management-process/</guid>
		<description><![CDATA[Working as a Software Developer* in a range of small companies and organizations, I've had the opportunity to work on quite a number of different projects. That experience has given me a healthy appreciation for how not to execute projects, as well as a healthy respect for process. Recently I pulled together a basic process to help manage the development tasks I am working on, track completion against my estimates, and a number of other things. It takes roughly an hour every two weeks and 5-10 minutes per day to maintain.]]></description>
				<content:encoded><![CDATA[<p>Working as a Software Developer* in a range of small companies and organizations, I&#8217;ve had the opportunity to work on quite a number of different projects. That experience has given me a healthy appreciation for how not to execute projects, as well as a healthy respect for process. Recently I pulled together a basic process to help manage the development tasks I am working on, track completion against my estimates, and a number of other things. It takes roughly an hour every two weeks and 5-10 minutes per day to maintain.</p>
<p>This isn&#8217;t a new process or even a sales pitch on how you too can implement my process and save thousands. It&#8217;s simply a walk through of the challenges that led to the process, the tools and practices I incorporated, and the steps I followed to build a lightweight process.</p>
<p><em>*Software Developer: It seems every developer position I&#8217;ve held has had a different definition of &#8216;Developer&#8217; (<a href="/index.php/ITProfessionals/ProfessionalDevelopment/the-programmer-vs-the-developer" title="Read more on my thoughts of the Developer vs Programmer title">and &#8216;Programmer&#8217;</a>, and&#8230;you get the point). The positive side of this is lots of great experiences, the negative side is all the fun things I got to use/do and never again.</em></p>
<h2>Building a Process</h2>
<p>Just as we do (or should do) when building software, we need to have a purpose. Often the largest, clumsiest processes occur through a lack of focus or a desire to focus in every direction (ultimate flexibility, no limits, etc). That lack of focus leads everyone to add their own bits to the mix. One person adds what worked in his last project, someone else adds something she always wanted to try, more pieces are added to cover ever eventuality or risk that can be thought of&#8230;.and Colossus is born, moving so slowly that all involved often think they are moving backwards and could be beaten by a 2 man team in a garage.</p>
<p>The purpose of process is to provide consistency and ground rules. A good process is an enabler.</p>
<p>I know, that sounds odd (and many of you probably think you are totally against having any process), so lets try a comparison.</p>
<p>Say we&#8217;re working on a software development project and we are required to deliver code documentation as part of the project. Once upon a time this would have required a great deal of time to put together, keep up to date as changes occurred, etc. It probably would have been a full time job on any team over 3-4 developers. Then someone came along and said &#8220;Look, if we comment every function like so, then I can write a script to extract those comments and automatically build the documentation.&#8221;</p>
<p>In the software world we call this a &#8220;convention&#8221;. Incorporating conventions into our practice allows us to automate or get some extra value out of something simply because it&#8217;s been done in a consistent manner (possibly with an extra step or two sprinkled on top). </p>
<p>Process is not inherently bad. Like writing software, there is never only one answer and even using the latest and greatest of tools you can build a ghastly, unmaintainable mess. </p>
<h2>So Back to My Process</h2>
<p>So recently I started the new job and I was given responsibility for adding some new capabilities to a system. I had the freedom to define my own processes, determine how I was going to get the work done, and so on. The critical deliverable was only delivery of working software, added in a manner not inconsistent with the existing platform.</p>
<p><b>My focus for the process is:</b></p>
<ul>
<li>Know as far ahead of time as possible if I was diverging from initial estimates </li>
<li>Collect just enough data to re-estimate completion if order of tasks changed, interruptions occurred, etc</li>
<li>Have a sense of accomplishment, see the work getting done</li>
<li>Have a way to track how much of my time is spent on interruptive tasks, scope additions, etc</li>
</ul>
<p>So this is my bare minimum set of requirements from my process, my focus. </p>
<p><b>Then we have some challenges:</b></p>
<ul>
<li>High potential for variability/change
<ul>
<li>I am new to the company and have a poorer feel for what they need than more experienced employees</li>
<li>The company hasn&#8217;t had this type of system before, so the requirements will be more changeable and will require greater refinement along the way</li>
<li>I don&#8217;t have direct contact with stakeholders or end users</li>
</ul>
</li>
<li>Limited experience with tools (existing, in-house architecture/codebase)
<ul>
<li>I am not comfortable (or was not) with the system I was adding onto</li>
<li>Standards are limited to finding existing examples to duplicate</li>
<li>Expected to convert some existing components for wider use w/ my portion without disrupting their existing functions</li>
</ul>
</li>
<li>No automated testing &#8211; the framework is challenging for unit testing</li>
<li>Live environment &#8211; though my pieces of the system would not be live for weeks or months, the system is deployed weekly and existing portions would be used and revised</li>
<li>I am a team of one &#8211; limits flexibility, easier to get &#8220;stuck in the mud&#8221; without someone to pull me out, limited to my own experiences </li>
</ul>
<p>So having a focus and an understanding of my initial challenges, I built an initial process.</p>
<h2>The End Process</h2>
<p>From the focus and challenges above, I pulled together a minimal process. Let&#8217;s look at that process then circle back around to the &#8220;why was that piece chosen&#8221;. This process borrows heavily from Lean and Scrum processes, incorporating the idea of iterations (or sprints), a visual board, and a burndown chart. </p>
<p>I started by identifying the major features we were looking for in the system. Once I had these (through a series of conversations and prototyping), I had my manager prioritize them and help group them into potential releases. Initially this proved to be 3 major releases and a few extra features that would be prioritized after the last release.</p>
<div style="color: #666666; text-align: center; font-size: .8em;">
   <a href="http://tiernok.com/LTDBlog/process/FeaturesLg.png" title="View the fullsize version"><img src="http://tiernok.com/LTDBlog/process/FeaturesSm.png" alt="Feature list spreadsheet" /></a><br />
   Spreadsheet of prioritized features and releases
</div>
<p>I put all of these features into a spreadsheet, along with their priority and a rough estimate in ideal days. In a separate page of the spreadsheet I broke down each of the features into individual tasks and estimated those tasks in hours. There was a little variance between my individual task estimates and the feature estimates, but they averaged out. </p>
<div style="color: #666666; text-align: center; font-size: .8em;">
   <a href="http://tiernok.com/LTDBlog/process/TasksLg.png" title="View the fullsize version"><img src="http://tiernok.com/LTDBlog/process/TasksSm.png" alt="Task list spreadsheet" /></a><br />
   Spreadsheet of features broken down into tasks
</div>
<p>In a third tab, I created a list of the available workdays for the project, an iteration code, a number of hours available for each day (initially 6), a calculation for number of hours remaining in the iteration, and an empty column for the number of task hours remaining. I then created a pivot chart for this table, grouping by the iteration so I could easily display a burndown chart of the expected hours being done against the actual tasks being completed.</p>
<div style="color: #666666; text-align: center; font-size: .8em;">
   <a href="http://tiernok.com/LTDBlog/process/TrackingLg.png" title="View the fullsize version"><img src="http://tiernok.com/LTDBlog/process/TrackingSm.png" alt="Tracking spreadsheet" /></a><br />
   Spreadsheet for tracking actual vs estimated work against tasks
</div>
<div style="color: #666666; text-align: center; font-size: .8em;">
   <a href="http://tiernok.com/LTDBlog/process/BurndownLg.png" title="View the fullsize version"><img src="http://tiernok.com/LTDBlog/process/BurndownSm.png" alt="Tracking spreadsheet" /></a><br />
   Burndown chart from tracking data
</div>
<p>The last spreadsheet step was to load up my first iteration without overloading myself. Adding an iteration code to my task list tab and some calculated fields (visible in the task spreadsheet screenshot above) let me total up how many estimated hours I was loading into the iteration.</p>
<div style="color: #666666; text-align: center; font-size: .8em;">
   <img src="http://tiernok.com/LTDBlog/process/CapacityAssigned.png" alt="Tracking spreadsheet" /><br />
   Simple graphs of available capacity vs assigned tasks
</div>
<p>After setting up the spreadsheet, I setup a visual board in the corner of my whiteboard. I created columns for tasks that were ready to be worked (tasks assigned to the current iteration), tasks in progress, tasks completed and waiting for the weekly deployment, and tasks that were completed and in the live environment. Within a couple days I also added an express lane at the bottom for bugs and high priority feature revisions.</p>
<div style="text-align: center; font-size: .9em; color: #666666;">
   <img src="http://tiernok.com/LTDBlog/process/board.png" alt="Visual Board Pictures" /><br />
   Pictures of visual board over time
</div>
<p>The sticky notes were kept fairly simple. The color indicates the type and each has the name of the task and the iteration code written on it. Though I did not implement WIP limits (Kanban) on my columns, I have unofficial numbers in my head to help me limit task switching.</p>
<p>As the iterations progress, I calculate how many estimated hours of work I get done per day and update that value in the third tab of my spreadsheet. This ratio of estimation hours to real hours then helps me project forward and see if I am on track for the final release, need to refine some tasks to reduce their estimated time, or potentially have some time to pull in tasks at the end. </p>
<h2>How I Got Here</h2>
<p>So I started with a focus and some challenges and ended up with all of that (which is actually a fairly lightweight process, it just took a lot of space to write it up). Here&#8217;s the connections:</p>
<h3>Why Iterative?</h3>
<p>I chose to use an iterative process to help manage the risks for variability and my own limited experience. An iterative process would help me course correct far sooner and take advantage of my growing experience in the company and with the software instead of trying to base the entire project off of my knowledge on day one. </p>
<p>So the iterative process was chosen to help reduce the impact of risks involved with my knowledge of the software and my understanding of the requirements, as well as refinements that were expected to occur along the way.</p>
<h3>Why a spreadsheet? Why estimated hours?</h3>
<p>I chose to use a spreadsheet and this method of estimated vs real hours to address measurement of actual execution against estimated and provide an ability and data to re-estimate tasks as time progressed.</p>
<h3>Can I have your spreadsheet?</h3>
<p>Below is a link for the sample workbook I put together for the images in this post. Being an example, it hasn&#8217;t actually gone through the process of being used, revised, marked up, etc like the actual one I use. </p>
<p><a href="http://tiernok.com/LTDBlog/process/SampleWorkbook.xlsx" title="Download sample workbook">Download the workbook</a></p>
<p>It has no instructions, no notes, and is in XLSX format. </p>
<h3>Why such small tasks?</h3>
<p>Why did I break down the features at all? They&#8217;re only a few days worth of work, couldn&#8217;t I have just used those?</p>
<p>Well yes and no. By going with smaller tasks I can usually move one or two tasks from doing to done in any given day, which feeds back into my feelings of productivity and such. Smaller tasks also help me find out I&#8217;ve gone off the rails sooner or that I missed something critical. Additionally, smaller tasks are easier to move around, if I intend to do task 1A-1C but a bug comes in, I can wrap up my work on 1A, do the bug, then come back to 1B with a much lower task switching cost then if I was switching inside feature 1. </p>
<p>Small tasks also feed back into estimates, force us to evaluate the features more deeply, bring future issues to the surface early enough that we can start asking questions before we get to do-or-die time, etc.</p>
<h3>Seriously, Sticky Notes?</h3>
<p>I chose the visual board for several reasons. The first is that seeing the work flow across the board helps give me a sense of accomplishment. Good morale and a sense of accomplishment help keep me from getting bogged down or feeling like I&#8217;m not making progress. The visual board also gave me a way to see the level of revisions that were occurring and the impact they were having as the iteration progressed.</p>
<p>The final advantage was that the board reduced the time it took me to switch tasks, at any time I could glance at the board and see what I was working on last, what I would likely be working on next, etc. When I go into work after a 3 day weekend, it will take me longer to boot up my computer than to determine what I was working on. I also have a visual of how many tasks I am trying to work on simultaneously, and that causes me to try and limit that number, reducing task switching. In Lean terms, I have reduced my changeover time, some of the waste involved in those changeovers, and the number of changeovers that occur (splitting releases into features into smaller tasks also reduced my batch size).</p>
<h3>What&#8217;s Missing?</h3>
<p>The only challenges that my process did not address were a method to limit the risk of working on live software without a safety net (other than manual testing). I did address this, but that&#8217;s probably for another post.</p>
<h2>Wrapping Up</h2>
<p>The most critical part of creating a process is to know why your creating it. Without a focus, without knowing the goals and risks, you run the risk of creating something that costs more than it solves. Like programming or any other skill, selecting and building a good process is easier the more you do it. Pay attention not just to what does work, but also to what doesn&#8217;t. My process is not perfect and it will have failures, I intend to learn from them. But I&#8217;m also learning from the processes I see others following. </p>
<p>If you are interested, here are some random links on related topics (plenty more in my <a href="http://www.delicious.com/tarwn" title="Eli's bookmarks on Delicious">Delicious bookmarks</a>).</p>
<ul>
<li><a href="http://kosmothink.com/2010/12/31/the-uncertainty-principal-or-how-to-choose-the-right-methodology/" title="The Uncertainty Principle OR How to Choose the Right Methodology - Kosmothink">The Uncertainty Principle OR How to Choose the Right Methodology &#8211; Kosmothink</a></li>
<li><a href="http://www.projectsmart.co.uk/waterfall-v-agile-how-should-i-approach-my-software-development-project.html" title="Waterfall v Agile: How Should I Approach My Software Development Project?">Waterfall v Agile: How Should I Approach My Software Development Project?</a></li>
<li><a href="http://lisamdrake.wordpress.com/2011/05/28/time-boxing-strategies-to-help-you-get-things-done-in-your-project/" title="Time Boxing Strategies to Help You Get Things Done in Your Project">Time Boxing Strategies to Help You Get Things Done in Your Project</a></li>
<li><a href="http://www.jessefewell.com/2009/12/20/methodology-doesnt-matter/" title="Methodology Doesn’t Matter">Methodology Doesn’t Matter</a></li>
<li><a href="http://www.xqa.com.ar/visualmanagement/2009/02/visual-management-for-agile-teams/" title="Visual Management for Agile Teams">Visual Management for Agile Teams</a></li>
</ul>
]]></content:encoded>
			<wfw:commentRss>/index.php/itprofessionals/projectmanagement/building-a-lightweight-project-management-process/feed/</wfw:commentRss>
		<slash:comments>2</slash:comments>
		</item>
		<item>
		<title>Resources for Professional Development</title>
		<link>/index.php/itprofessionals/professionaldevelopment/resources-for-professional-development/</link>
		<comments>/index.php/itprofessionals/professionaldevelopment/resources-for-professional-development/#comments</comments>
		<pubDate>Thu, 22 Jul 2010 20:36:24 +0000</pubDate>
		<dc:creator><![CDATA[Eli Weinstock-Herman (tarwn)]]></dc:creator>
				<category><![CDATA[Professional Development]]></category>
		<category><![CDATA[development]]></category>

		<guid isPermaLink="false">/index.php/2010/07/resources-for-professional-development/</guid>
		<description><![CDATA[Waiting for your company to provide training courses or advancement opportunities? It might be a long wait. Unfortunately many companies overlook professional development or consistently sacrifice it when the first round of annual budget cuts occur. Even when we do get training opportunities, many of us continue to select classes at random, based on what [&#8230;]]]></description>
				<content:encoded><![CDATA[<p>Waiting for your company to provide training courses or advancement opportunities? It might be a long wait. Unfortunately many companies overlook professional development or consistently sacrifice it when the first round of annual budget cuts occur. Even when we do get training opportunities, many of us continue to select classes at random, based on what seems interesting at the moment.</p>
<p>We live in a field that is expanding daily, where the environment we work in is drastically different from what it was 5 years ago and from what it will be 5 years from now. Whether we plan on being in a different role or not, advancing our skills and staying in step with the market is a must.</p>
<p>This post covers a number of helpful links and ideas for staying up to date in our field.</p>
<h2>Development Plans</h2>
<p>Creating a development plan can help provide focus and give us a measure of our progress. These articles provide additional information on creating and refining our plans:</p>
<ul style="margin: 1em 2em;">
<li><a href="http://www.informit.com/guides/content.aspx?g=sqlserver&amp;seqNum=356" title="Read SQL Server Professional Development Plan, Part 1">SQL Server Professional Development Plan, Part 1</a> and <a href="http://www.informit.com/guides/content.aspx?g=sqlserver&amp;seqNum=357" title="Read SQL Server Professional Development Plan, Part 2">Part 2</a> by Buck Woody (<a href="http://blogs.msdn.com/b/buckwoody/" title="Buck Woody's blog">blog</a> | <a href="http://twitter.com/buckwoody" title="Buck Woody on twitter">twitter</a>)</li>
<li><a href="http://www.greatleadershipbydan.com/2008/11/how-to-write-great-individual.html" title="Read How to Write a Great Individual Development Plan (IDP)">How to Write a Great Individual Development Plan (IDP)</a> and a great <a href="http://www.greatleadershipbydan.com/2008/04/checklist-for-great-individual.html" title="Read Checklist for Great Individual">checklist</a> by Dan McCarthy (<a href="http://www.greatleadershipbydan.com/" title="Great Leadership blog by Dan McCarthy">blog</a> | <a href="http://twitter.com/greatleadership" title="Dan McCarthy on Twitter">twitter</a>)</li>
<li><a href="http://facility9.com/2009/09/14/your-own-personal-development-plan" title="Read Your Own Personal Development Plan">Your Own Personal Development Plan</a> by Jeremiah Peschka (<a href="http://facility9.com/" title="facility9 blog">blog</a> | <a href="http://twitter.com/peschkaj" title="Jeremiah on Twitter">twitter</a>)</li>
</ul>
<h2>Tools and Processes</h2>
<p>Once we have a plan, we need to be able to execute it. Having tools to help us execute the plan, methods of communicating the plan, and tricks for finding time can all help us be successful. </p>
<ul style="margin: 1em 2em;">
<li>The <a href="http://personalkanban.com/personal-kanban-101/" title="More information on Personal Kanban">Personal Kanban</a> site has a lot of good information on creating a visual board and process to help manage short and long term tasks</li>
<li>Jes Borland (<a href="http://jesborland.wordpress.com/" title="Jes Borland's blog">blog</a> | <a href="http://twitter.com/grrl_geek" title="Jes Borland on Twitter">twitter</a>) helps track her progress by reporting a <a href="http://jesborland.wordpress.com/2010/07/08/2010-quarter-2-goal-review/" title="2010 Quarter 2 Goal Review by Jes Borland">Quarterly Status</a> to her friends and the wider community</li>
<li>And <a href="http://www.openforum.com/idea-hub/topics/lifestyle/article/80-ways-to-steal-valuable-minutes-for-your-work-day-glen-stansberry" title="Read 80 Ways to Steal Valuable Minutes for Your Work Day">American Express&#8217;s OPEN Forum </a> has a number of ideas on where we can find time to execute</li>
</ul>
<h2>Free and Cheap Resources</h2>
<p>Not all development costs money. My own plan includes a certain amount of blog writing (free), reading a certain number of articles each week (free), an ongoing effort to keep up to date with webinars and webcasts (free), and attendance (and beginning to speak) at user groups and events (the free kind).</p>
<p>I can&#8217;t afford Tech-Ed or the PASS Summit, but I can afford:</p>
<ul style="margin: 1em 2em;">
<li>Watching the <a href="http://www.msteched.com/" title="Watch recorded Tech-Ed sessions">recorded Tech-Ed sessions</a> for free at MSDN (I&#8217;ve had over <a href="http://delicious.com/tarwn/tech-ed" title="Eli's Tech-Ed Delicious bookmarks">11 hours</a> of free training so far)</li>
<li>Watching the <a href="http://www.sqlpass.org/LearningCenter/SummitOnDemand/Summit2008.aspx" title="2008 PASS Summmit recordings">2008 PASS Summit recordings</a> for free (requires login)</li>
<li>Catching free <a href="https://msevents.microsoft.com/CUI/default.aspx?culture=en-US" title="Microsoft Events Home">live and recorded webcasts</a> from Microsoft</li>
</ul>
<p>Plus there are events like <a href="http://www.sqlsaturday.com/" title="SQLSaturday website">SQLSaturday</a>, <a href="http://www.google.com/search?q=code+camp" title="Search for Code Camps">Code Camps</a>, and user groups galore that don&#8217;t cost $1000&#8217;s to attend.</p>
<p>If you need more ideas, Ted (<a href="/index.php/All/?summary.php?author=68" title="Ted's blog posts">blog</a> | <a href="http://twitter.com/onpnt" title="Ted on Twitter">twitter</a>) posted an article with more SQL Resources <a href="/index.php/ITProfessionals/EthicsIT/sql-help-and-resources" title="SQL Community Services - Resources everywhere!">here</a> and I presented a list of ideas in <a href="/index.php/ITProfessionals/ITProcesses/there-is-never-time-for-part-1" title="Read Part 1 of the "There is Never Time For..." series">Part 1</a> of the &#8220;There is Never Time For&#8230;&#8221; series.</p>
<p>Have more ideas or links for resources? Add them to the comments below. I&#8217;m always on the lookout for more ideas and I&#8217;m sure others would appreciate them as well.</p>
]]></content:encoded>
			<wfw:commentRss>/index.php/itprofessionals/professionaldevelopment/resources-for-professional-development/feed/</wfw:commentRss>
		<slash:comments>2</slash:comments>
		</item>
		<item>
		<title>Developing KBay: It&#8217;s All About the Team</title>
		<link>/index.php/webdev/webdesigngraphicsstyling/developing-kbay-what-went-right/</link>
		<comments>/index.php/webdev/webdesigngraphicsstyling/developing-kbay-what-went-right/#comments</comments>
		<pubDate>Wed, 18 Nov 2009 13:14:59 +0000</pubDate>
		<dc:creator><![CDATA[ThatRickGuy]]></dc:creator>
				<category><![CDATA[Web Design, Graphics and Styling]]></category>
		<category><![CDATA[development]]></category>
		<category><![CDATA[silverlight]]></category>
		<category><![CDATA[team]]></category>

		<guid isPermaLink="false">/index.php/2009/11/developing-kbay-what-went-right/</guid>
		<description><![CDATA[Hello Everyone, Rick here again with another little blurb on my most recent Silverlight project, KBay. Today, I&#8217;d like to write a little bit about what went right. Separation of Power One of the biggest attributes of KBay&#8217;s success, IMO, was the segregation of development. My coworker Adam (Hi Adam!) and I handled the majority [&#8230;]]]></description>
				<content:encoded><![CDATA[<p>Hello Everyone,</p>
<p style="text-indent: 30pt;">Rick here again with another little blurb on my most recent Silverlight project, KBay. Today, I&#8217;d like to write a little bit about what went right.</p>
<p><img src="http://ringdev.com/code/KBayHome.PNG" alt="KBay Home Page" title="KBay Home Page " style="margin-left:50px;" /></p>
<h3>Separation of Power</h3>
<p style="text-indent: 30pt;">One of the biggest attributes of KBay&#8217;s success, IMO, was the segregation of development. My coworker Adam (Hi Adam!) and I handled the majority of the work for this project. The initial goal was to try to involve everyone on the App Dev team, to give them more exposure to Silverlight. But with the tight time-line and other priorities, we couldn&#8217;t keep the whole team on page. So after some initial design meetings and DB layout, it largely fell to Adam and me to get it to work. </p>
<h3>Balance Your Strengths</h3>
<p style="text-indent: 30pt;">Adam and I approached the problem from our own strengths. Both of us are more than capable of writing the entire solution, but we both have our strengths and weaknesses. In my case, my experience with Blend and XAML, along with some rudimentary graphics arts knowledge, really allowed me to speed through the front end, while Adam&#8217;s envelope pushing experience with LINQ and Generics allowed him to come up with some really awesome solutions to communication and technical issues.</p>
<h3>Two Heads are Better Than One</h3>
<p style="text-indent: 30pt;">This separation really allowed us to greatly improve not just our development speed, but it also worked as a sort of code review, where we were both interacting with each other&#8217;s interfaces. Since we had virtually no requirements for the project, it allowed us to brainstorm freely and to consider many options that neither of us would have thought of on our own. </p>
<h3>Lather, Rinse, Repeat</h3>
<p style="text-indent: 30pt;">Both of us were so struck by how excellently this approach worked in our environment, that we have recommended to our management that we reuse it in more projects . And so far, it has continued to work exceptionally well.</p>
<h3>One of These Things is Not Like the Others</h3>
<p style="text-indent: 30pt;">Working in Silverlight, unlike any other mainstream MS platform, means that your only option for interacting with the server is via Webservice or WCF calls. Not only are these the only options (aside from some socket options) but they are also entirely Async in their behavior. </p>
<h3>Limits Are Good?</h3>
<p style="text-indent: 30pt;">This limitation opens up a number of options and challenges. First, there is a crystal clear separation between the presentation layer and the business/data layer. It allows for developers to be very pure on either side. A web service does nothing for layout and the UI does nothing for data manipulation (save for maybe some caching). </p>
<h3>Green Light Go! Red Light Stop!</h3>
<p style="text-indent: 30pt;">Second, the UI developer can track explicitly when any IO begins and ends, and with a bit of wrapping, control the UI accordingly.</p>
<h3>Unit Testing Made Easy!</h3>
<p style="text-indent: 30pt;">Third, and probably best of all, since almost all of the functionality is being controlled by web services, it is really easy to isolate functionality for integrated unit testing. This has been a huge boon for us in terms of stability of deployments, even in the dev environment with multiple developers. It takes 20 seconds to run every single method through all of our known use cases, and those unit tests are run before every deployment. These unit tests are a critical to reducing risks for off-schedule deployments.</p>
<h3>Are Limits Bad?</h3>
<p style="text-indent: 30pt;">Maybe &#8216;limits&#8217; isn&#8217;t the right word for this. You can still do almost everything you can do through other platforms, you just have to go about it through entirely different means. The limits that exist force developers to go through the new means, using async communication and webservices/WCF instead of continuing to depend on integrated IO and synchronous processing. So while there is a learning curve in changing the way we approach problems in Silverlight, I think that overcoming that curve will enable more developers to think in a parallel style. Removing the interface from the process, and making the processes async forces developers to partake in good development practices. Because every time I see a Windows app go to a white screen because some developer tried running I/O operations on the GUI thread, I cry a little on the inside.</p>
<h3>I Love Log</h3>
<p style="text-indent: 30pt;">That&#8217;s it for the more abstract summary of the KBay project. I promise my next segment will deal with more of the technical nuts and bolts of the project. Including the communication layer and my personal favorite, LOGGING!!!</p>
<p>-Rick</p>
]]></content:encoded>
			<wfw:commentRss>/index.php/webdev/webdesigngraphicsstyling/developing-kbay-what-went-right/feed/</wfw:commentRss>
		<slash:comments>1</slash:comments>
		</item>
		<item>
		<title>5 Books Every Developer Should Read</title>
		<link>/index.php/desktopdev/mstech/5-books-every-developer-should-read/</link>
		<comments>/index.php/desktopdev/mstech/5-books-every-developer-should-read/#comments</comments>
		<pubDate>Sun, 20 Jul 2008 18:12:06 +0000</pubDate>
		<dc:creator><![CDATA[SQLDenis]]></dc:creator>
				<category><![CDATA[Microsoft Technologies]]></category>
		<category><![CDATA[architecture]]></category>
		<category><![CDATA[book]]></category>
		<category><![CDATA[design]]></category>
		<category><![CDATA[design patterns]]></category>
		<category><![CDATA[development]]></category>
		<category><![CDATA[programming]]></category>
		<category><![CDATA[toread]]></category>

		<guid isPermaLink="false">/index.php/2008/07/5-books-every-developer-should-read/</guid>
		<description><![CDATA[Which books should you read/buy when you are a programmer? I have listed 5 books that have helped me a lot. The books that I have chosen are not specific to any language although some of the books have examples in one language only. Design Patterns has examples in smalltalk and C++ but since the [&#8230;]]]></description>
				<content:encoded><![CDATA[<p>Which books should you read/buy when you are a programmer? I have listed 5 books that have helped me a lot. The books that I have chosen are not specific to any language although some of the books have examples in one language only. Design Patterns has examples in smalltalk and C++ but since the code is not very complicated you should have no problem converting it to your language of choice. I have included links to sample chapters for the books where I could find them. For some of the books I have also provided links to the author&#8217;s site; some of them have additional material so that you can look at that. I have also provided Amazon links so that you can read reviews. All of these books are rated 4 stars or higher. I have also provided alternate books if I felt that there were more choices for the same subject</p>
<p><strong><span style="font-size:130%;color:#cc0000;"><a href="http://www.amazon.com/exec/obidos/ASIN/0201633612/sql08-20/102-1687136-8876917?%5Fencoding=UTF8&amp;camp=1789&amp;link%5Fcode=xm2">Design Patterns</a></span></strong><br />
This book is one of the seminal books on patterns in software development. If you are a professional software developer, you must read this. If you are learning to write good software, this is a book that you will need to take on at some point</p>
<p>Design Patterns <a href="http://lci.cs.ubbcluj.ro/~raduking/Books/Design%20Patterns/">Site</a></p>
<p><span style="font-size:130%;color:#cc0000;"><strong><a href="http://www.amazon.com/exec/obidos/ASIN/0735619670/sql08-20/102-5735017-0910517?%5Fencoding=UTF8&amp;camp=1789&amp;link%5Fcode=xm2">Code Complete</a><br />
</strong></span>Code complete provides the reader with an insight into how<br />
to write good and easy to understand code. You will come away from this book with an appreciation of the thought process that should go into writing every class, routine, comment etc&#8230;</p>
<p>Software development steps are outlined clearly. Pitfalls to avoid are discussed and rewards obtained from good code is explained. The author tells you what you need to know and most importantly why you need this information. If one applies the ideas in this book, I think you will be a better programmer.</p>
<p>Sample Chapter: <a href="http://www.cc2e.com/docs/Chapter1-Welcome.pdf">Chapter 1: Welcome (pdf)</a><br />
Sample Chapter: <a href="http://www.cc2e.com/docs/Chapter5-Design.pdf">Chapter 5: Design in Construction (pdf)</a></p>
<p>Code Complete Author&#8217;s <a href="http://www.cc2e.com/">Site</a></p>
<p><span style="font-size:130%;color:#cc0000;"><strong><a href="http://www.amazon.com/exec/obidos/ASIN/020161622X/sql08-20/102-5735017-0910517?%5Fencoding=UTF8&amp;camp=1789&amp;link%5Fcode=xm2">The Pragmatic Programmer</a><br />
</strong></span>The pragmatic programmer provides invaluable advice to those who are just starting to program, and those who have been programing for years. By following the authors&#8217; simple rules you should have gained some programming wisdom that a programmer would realize in a decade.</p>
<p><strong>Extracts from the book</strong><br />
<a href="http://www.pragmaticprogrammer.com/ppbook/extracts/preface.html">The Preface</a><br />
<a href="http://www.pragmaticprogrammer.com/ppbook/extracts/no_broken_windows.html">Software Entropy</a><br />
<a href="http://www.pragmaticprogrammer.com/ppbook/extracts/coincidence.html">Programming by Coincidence</a><br />
<a href="http://www.pragmaticprogrammer.com/ppbook/extracts/wizards.html">Evil Wizards</a><br />
<a href="http://www.pragmaticprogrammer.com/ppbook/extracts/balance_resources.html">Balance Resources</a><br />
<a href="http://www.pragmaticprogrammer.com/ppbook/extracts/rule_list.html">Summary of the book&#8217;s tips</a><br />
<a href="http://www.pragmaticprogrammer.com/ppbook/extracts/contents.html">Contents</a></p>
<p><strong><a href="http://www.amazon.com/exec/obidos/ASIN/0201485672/sql08-20/102-5735017-0910517?%5Fencoding=UTF8&amp;camp=1789&amp;link%5Fcode=xm2"><span style="font-size:130%;">Refactoring</span> </a><br />
</strong>This book will change the way you think about and working with exisiting code. It&#8217;ll teach you that changing/modifying software is a fact of life. Martin Fowler does a awesome job of describing how to improve the design of existing code by performing various refactorings. Various design patterns are mentioned throughout the text, that is another reason why the design patterns book is so important</p>
<p>Sample Chapter: <a href="http://www.awprofessional.com/content/images/0201485672/samplechapter/chap4.html">Refactoring, a First Example</a></p>
<p><span style="font-size:130%;color:#cc0000;"><strong><a href="http://www.amazon.com/exec/obidos/ASIN/0321321278/sql08-20/102-5735017-0910517?%5Fencoding=UTF8&amp;camp=1789&amp;link%5Fcode=xm2">UML 2 and the Unified Process: Practical Object-Oriented Analysis and Design, 2nd Edition</a></strong></span><br />
UML has grown. A few years ago, when UML was just getting accepted, a book on how to use it would have been much thinner. But the successful broad uptake of UML led to its semantic notation being expanded. What the authors give us here is a thorough exposition of UML 2.0 and how to use it. It also goes into the Unified Process for running a project, and how this can be documented in UML</p>
<p>Sample Chapter: <a href="http://www.awprofessional.com/content/images/0321321278/samplechapter/arlow_ch09.pdf">Relationships </a></p>
<p>And here are a couple of more choices instead of the books above<br />
<a href="http://www.amazon.com/exec/obidos/ASIN/0135974445/sql08-20/102-1687136-8876917?%5Fencoding=UTF8&amp;camp=1789&amp;link%5Fcode=xm2">Agile Software Development, Principles, Patterns, and Practices</a><br />
<a href="http://www.amazon.com/exec/obidos/ASIN/0471197130/sql08-20/102-1687136-8876917?%5Fencoding=UTF8&amp;camp=1789&amp;link%5Fcode=xm2">AntiPatterns</a><br />
<a href="http://www.amazon.com/exec/obidos/ASIN/0596008740/sql08-20/102-1687136-8876917?%5Fencoding=UTF8&amp;camp=1789&amp;link%5Fcode=xm2">Prefactoring </a><br />
<a href="http://www.amazon.com/exec/obidos/ASIN/1932394613/sql08-20/102-5735017-0910517?%5Fencoding=UTF8&amp;camp=1789&amp;link%5Fcode=xm2">Ajax in Action</a><br />
<a href="http://www.amazon.com/exec/obidos/ASIN/0596007124/sql08-20/102-5735017-0910517?%5Fencoding=UTF8&amp;camp=1789&amp;link%5Fcode=xm2">Head First Design Patterns</a></p>
]]></content:encoded>
			<wfw:commentRss>/index.php/desktopdev/mstech/5-books-every-developer-should-read/feed/</wfw:commentRss>
		<slash:comments>7</slash:comments>
		</item>
	</channel>
</rss>
