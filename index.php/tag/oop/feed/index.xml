<?xml version="1.0" encoding="UTF-8"?><rss version="2.0"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:atom="http://www.w3.org/2005/Atom"
	xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
	xmlns:slash="http://purl.org/rss/1.0/modules/slash/"
	>

<channel>
	<title>oop &#8211; LessthanDot</title>
	<atom:link href="/index.php/tag/oop/feed/" rel="self" type="application/rss+xml" />
	<link>/</link>
	<description>A Technical Community for IT Professionals</description>
	<lastBuildDate>Sat, 09 Mar 2019 12:50:36 +0000</lastBuildDate>
	<language>en-US</language>
	<sy:updatePeriod>hourly</sy:updatePeriod>
	<sy:updateFrequency>1</sy:updateFrequency>
	<generator>https://wordpress.org/?v=4.6.1</generator>
	<item>
		<title>Java Training Day 1</title>
		<link>/index.php/enterprisedev/appserver/jee/java-training-day-1/</link>
		<comments>/index.php/enterprisedev/appserver/jee/java-training-day-1/#respond</comments>
		<pubDate>Mon, 26 Nov 2012 19:22:00 +0000</pubDate>
		<dc:creator><![CDATA[SQLDenis]]></dc:creator>
				<category><![CDATA[Application Lifecycle Management]]></category>
		<category><![CDATA[Java EE]]></category>
		<category><![CDATA[JBoss]]></category>
		<category><![CDATA[Websphere]]></category>
		<category><![CDATA[eclipse]]></category>
		<category><![CDATA[java]]></category>
		<category><![CDATA[maven]]></category>
		<category><![CDATA[netbeans]]></category>
		<category><![CDATA[oop]]></category>

		<guid isPermaLink="false">/index.php/2012/11/java-training-day-1/</guid>
		<description><![CDATA[Today is day one of the Java class I am taking this week. I am just dumping some of the stuff that I am hearing about, some of the stuff I might already know.
Java is a general purpose language, it is interperted, output is by&#8230;]]></description>
				<content:encoded><![CDATA[<p>Java Training Day 1<br />
&#8212;<br />
Today is day one of the Java class I am taking this week. I am just dumping some of the stuff that I am hearing about, some of the stuff I might already know.<br />
Java is a general purpose language, it is interperted, output is bytecode, you need to have a Java Virtual Machine on the target machine in order to run a Java program.<br />
A Java file gets compiled to a system-neutral format which is a class file and gets a .class extension, this is compressed and not really human readable</p>
<p>Classes are organized in a group called a package, a package is very similar to a .net namespace. You use this so that you don&#8217;t get collisions if you have two classes with the same name.</p>
<p>You use javadoc to generate standard formatted documentation.</p>
<p><strong>Java community process(JCP)</strong><br />
Formal community-driven process to drive the Java standard, the iste is http://jcp.org/</p>
<p>Deprecate, use annotation and then when you compile your class, you will get a warning so that you will know that you will need to rewrite that piece of the code.</p>
<p>Java is case sensitive, all reserved java keywords are lowercase</p>
<p>In a class the main routine is the start of a program<br />
The main routine will look like this</p>
<p>public static void main(String[] args) {&#8230;&#8230;.}</p>
<p>A java source file has to end in  .java, for example  MyClass.java this will produce a file called MyClass.class. you can&#8217;t have more than one public class in a source file, you cannot have partial classes like in .net either.</p>
<p>Java runs on top of the JVM, the JVM is different per operating system. No need to recompile Java&#8230;Write once run everywhere&#8230;.some people like to say write once&#8230;debug everywhere  <img src="https://s.w.org/images/core/emoji/2/72x72/1f642.png" alt="ðŸ™‚" class="wp-smiley" style="height: 1em; max-height: 1em;" /></p>
<p><strong>Java versions and flavors</strong><br />
Java 1.0, 1.1<br />
Java 2 	1.2, 1.3, 1.4, 1.5<br />
Java 5  also sometimes called 1.5, 1.5 is when they shifted to integers again<br />
Java 6<br />
Java 7</p>
<p>The different flavors of Java and their old and new names<br />
J2SE  	Java SE<br />
J2EE	Java EE<br />
J2ME	Java ME</p>
<p><strong>Base libraries to provide common functionality</strong><br />
Here are just some of them</p>
<p>java.lang<br />
java.lang contains fundamental classes and interfaces closely tied to the language and runtime system.</p>
<p>java.io/java.nio/java.net<br />
I/O and networking access the platform file system, and more generally networks through the java.io, java.nio and java.net packages. </p>
<p>java.math<br />
Mathematics package: java.math provides mathematical expressions and evaluation, as well as arbitrary-precision decimal and integer number datatypes.</p>
<p>java.text<br />
Text: java.text deals with text, dates, numbers, and messages.</p>
<p>javax.crypto<br />
Security is provided by java.security and encryption services are provided by javax.crypto.</p>
<p>java.sql<br />
Databases: access to SQL databases via java.sql</p>
<p>java.beans<br />
Java Beans: java.beans provides ways to manipulate reusable components.</p>
<p><strong>Types of Java Software</strong><br />
Class Libraries<br />
Standalone Java<br />
Applets<br />
Servlets, JSP and tag libraries<br />
Enterprise Java Beans</p>
<p><strong>Enterprise Application Servers</strong><br />
Here are a couple of Java Enterprise Application Servers and their vendors<br />
GlassFish	Oracle/Sun<br />
Weblogic	Oracle/BEA<br />
Webshere	IBM<br />
JBoss		Red Hat</p>
<p><strong>Environment variables</strong><br />
Oh how I used to hate dealing with these variables, stuff wouldn&#8217;t work if this wasn&#8217;t setup correctly<br />
There are a couple of environment variables that you need</p>
<p><strong>JAVA_HOME</strong><br />
This will be use by the tools in the JDK</p>
<p><strong>PATH</strong><br />
This is used by the operating system to find the compiler and other programs, add the/bin directory</p>
<p><strong>CLASSPATH</strong><br />
This is used by the Java Virtual Machine to find application specific classes at compile as well as run time</p>
<p><strong>JDK Bin directory</strong><br />
THe JDK Bin directory holds all the programs used by the JDK to do what is needed for Java to function<br />
There are programs to compile java, to run java, to create JAR files, to create javadoc documentation files etc etc<br />
Mine is installed here C:Program FilesJavajdk1.7.0_07bin</p>
<p>Here is screenshot of my directory with some of those programs</p>
<div class="image_block"><a href="/wp-content/uploads/blogs/EnterpriseDev/JavaBinDirectory.PNG?mtime=1353948732"><img alt="" src="/wp-content/uploads/blogs/EnterpriseDev/JavaBinDirectory.PNG?mtime=1353948732" width="795" height="635" /></a></div>
<p>There is something called jvisualvm.exe, this is know as Java VisualVM, from the Oracle documentation: http://docs.oracle.com/javase/6/docs/technotes/tools/share/jvisualvm.html<br />
Java VisualVM is an intuitive graphical user interface that provides detailed information about Java technology-based applications (Java applications) while they are running on a given Java Virtual Machine (JVM*). The name Java VisualVM comes from the fact that Java VisualVM provides information about the JVM software visually.</p>
<p>Java VisualVM combines several monitoring, troubleshooting, and profiling utilities into a single tool. For example, most of the functionality offered by the standalone tools jmap, jinfo, jstat and jstack have been integrated into Java VisualVM. Other functionalities, such as some of those offered by the JConsole tool, can be added as optional plug-ins.</p>
<p>Here are some screenshots of the tool in action while running against Eclipse</p>
<div class="image_block"><a href="/wp-content/uploads/blogs/EnterpriseDev/VisualVMMonitor.PNG?mtime=1353948863"><img alt="" src="/wp-content/uploads/blogs/EnterpriseDev/VisualVMMonitor.PNG?mtime=1353948863" width="929" height="579" /></a></div>
<div class="image_block"><a href="/wp-content/uploads/blogs/EnterpriseDev/VisualVMThreads.PNG?mtime=1353948850"><img alt="" src="/wp-content/uploads/blogs/EnterpriseDev/VisualVMThreads.PNG?mtime=1353948850" width="919" height="581" /></a></div>
<div class="image_block"><a href="/wp-content/uploads/blogs/EnterpriseDev/VisualVMThreadsTable.PNG?mtime=1353948837"><img alt="" src="/wp-content/uploads/blogs/EnterpriseDev/VisualVMThreadsTable.PNG?mtime=1353948837" width="930" height="594" /></a></div>
<p>Always include . as part of the classpath, this ensure that the current directory is searched in case of a default package</p>
<p><strong>JAR</strong><br />
Java Archive, this is an archived file holding all the classes and a manifest describing what is in the archive</p>
<p>There are related files that are used based on the type of application, here is what info wikipedia has listed</p>
<p>WAR (Web application archive) files, also Java archives, store XML files, Java classes, JavaServer Pages and other objects for Web Applications.<br />
RAR (resource adapter archive) files (not to be confused with the RAR file format), also Java archives, store XML files, Java classes and other objects for J2EE Connector Architecture (JCA) applications.<br />
EAR (enterprise archive) files provide composite Java archives which combine XML files, Java classes and other objects including JAR, WAR and RAR Java archive files for Enterprise Applications.<br />
SAR (service archive) is similar to EAR. It provides a service.xml file and accompanying JAR files.<br />
APK (Android Application Package), a variant of the Java archive format, is used for Android applications.[3]</p>
<p>We compiled and ran some programs from the command line, it is amazing how many people have problems with the path and classpath variables to get it to work&#8230;but we all did and now we are allowed to use Eclipese or Netbeans instead</p>
<p><strong>Javadoc comments</strong><br />
We looked at how to do javadoc comments, basically the first line has to start with /**</p>
<p>There are also tags that you can use, it is recommended to use this order</p>
<p>@author (classes and interfaces only, required)<br />
@version (classes and interfaces only, required. See footnote 1)<br />
@param (methods and constructors only)<br />
@return (methods only)<br />
@exception (@throws is a synonym added in Javadoc 1.2)<br />
@see<br />
@since<br />
@serial (or @serialField or @serialData)<br />
@deprecated (see How and When To Deprecate APIs)</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="java"><thead><tr><td colspan="2"  class="head">Java</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
</pre></td><td class="de1"><pre class="de1">Here is an example
&nbsp;
&nbsp; &nbsp;<span class="co3">/**</span>
<span class="co3">&nbsp; &nbsp; &nbsp;* Disposes of this graphics context once it is no longer </span>
<span class="co3">&nbsp; &nbsp; &nbsp;* referenced.</span>
<span class="co3">&nbsp; &nbsp; &nbsp;*</span>
<span class="co3">&nbsp; &nbsp; &nbsp;* @see &nbsp; &nbsp; &nbsp; #dispose()</span>
<span class="co3">&nbsp; &nbsp; &nbsp;* @since &nbsp; &nbsp; 1.0</span>
<span class="co3">&nbsp; &nbsp; &nbsp;*/</span>
&nbsp; &nbsp; <span class="kw1">public</span> <span class="kw4">void</span> finalize<span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; dispose<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; <span class="br0">&#125;</span>
<span class="br0">&#125;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">Here is an example

   /**
     * Disposes of this graphics context once it is no longer 
     * referenced.
     *
     * @see       #dispose()
     * @since     1.0
     */
    public void finalize() {
        dispose();
    }
}</pre></div></div>

<p><strong>Identifiers</strong><br />
Can have letters and numbers, cannot begin with a digit</p>
<p>The reason most programming language don&#8217;t allow identifiers to start with a digit is simple</p>
<p>int 6;<br />
6=5;</p>
<p>See that? Since an identifier can be 1 character, you could create something named 5 or 6 or even 256, this rule prevents you doing such stuff</p>
<p>Variables can me made constant by using the final keyword for example</p>
<p>final int MAX_VALUE = 40;</p>
<p>You can also do this<br />
final int BOILING_POINT;<br />
BOILING_POINT; = 100;</p>
<p>Once you assign the value, you can&#8217;t change BOILING_POINT anymore</p>
<p>We learned about scope and learned that depending on where the variable is declared, it might not be visible outside of the block, this is the same as in other languages (local variables)</p>
<p>When you want to have only one copy of a class variable, make it static, then if you instatiate 100 classes they all point to the same variable instead of having 100 variables in memory<br />
Static variables are available to use as soon as a class is loaded</p>
<p>Brain fried&#8230;&#8230;time to go&#8230;&#8230;..  back tomorrow</p>
]]></content:encoded>
			<wfw:commentRss>/index.php/enterprisedev/appserver/jee/java-training-day-1/feed/</wfw:commentRss>
		<slash:comments>0</slash:comments>
		</item>
		<item>
		<title>Writing Perl Tests with Test::More</title>
		<link>/index.php/webdev/serverprogramming/writing-perl-tests-with-test/</link>
		<comments>/index.php/webdev/serverprogramming/writing-perl-tests-with-test/#comments</comments>
		<pubDate>Sat, 15 Jan 2011 14:29:00 +0000</pubDate>
		<dc:creator><![CDATA[Rob Earl]]></dc:creator>
				<category><![CDATA[Server Programming]]></category>
		<category><![CDATA[oop]]></category>
		<category><![CDATA[perl]]></category>
		<category><![CDATA[testing]]></category>

		<guid isPermaLink="false">/index.php/2011/01/writing-perl-tests-with-test/</guid>
		<description><![CDATA[Writing tests for code is just as important as writing the code itself. Time spent writing tests is less time spent tracking down and fixing bugs, making it a great investment. Despite knowing this it can sometimes be hard to force yourself to stop codi&#8230;]]></description>
				<content:encoded><![CDATA[<p>Writing tests for code is just as important as writing the code itself. Time spent writing tests is less time spent tracking down and fixing bugs, making it a great investment. Despite knowing this it can sometimes be hard to force yourself to stop coding and write tests. Fortunately, Perl has some modules to make it pretty simple. Here&#8217;s the module we&#8217;re going to be testing:</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="perl"><thead><tr><td colspan="2"  class="head">Perl</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
</pre></td><td class="de1"><pre class="de1"><span class="co1">#!/usr/bin/perl</span>
&nbsp;
<span class="kw3">package</span> MyMaths<span class="sy0">;</span>
<span class="kw2">use</span> strict<span class="sy0">;</span>
&nbsp;
<span class="kw2">sub</span> <span class="kw2">new</span>
<span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">my</span> <span class="re0">$proto</span> <span class="sy0">=</span> <span class="kw3">shift</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">my</span> <span class="re0">$class</span> <span class="sy0">=</span> <span class="kw3">ref</span><span class="br0">&#40;</span><span class="re0">$proto</span><span class="br0">&#41;</span> <span class="sy0">||</span> <span class="re0">$proto</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">my</span> <span class="re0">$self</span> <span class="sy0">=</span> <span class="br0">&#123;</span><span class="br0">&#125;</span><span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw3">bless</span><span class="br0">&#40;</span><span class="re0">$self</span><span class="sy0">,</span> <span class="re0">$class</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw3">return</span> <span class="re0">$self</span><span class="sy0">;</span>
<span class="br0">&#125;</span>
&nbsp;
<span class="kw2">sub</span> add
<span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">my</span> <span class="re0">$self</span> <span class="sy0">=</span> <span class="kw3">shift</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">my</span> <span class="re0">$total</span> <span class="sy0">=</span> <span class="nu0">0</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">foreach</span> <span class="kw1">my</span> <span class="re0">$factor</span> <span class="br0">&#40;</span><span class="co5">@_</span><span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="re0">$total</span> <span class="sy0">+=</span> <span class="re0">$factor</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw3">return</span> <span class="re0">$total</span><span class="sy0">;</span>
<span class="br0">&#125;</span>
&nbsp;
<span class="nu0">1</span><span class="sy0">;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">#!/usr/bin/perl
 
package MyMaths;
use strict;
 
sub new
{
        my $proto = shift;
        my $class = ref($proto) || $proto;
        my $self = {};
 
        bless($self, $class);
        return $self;
}
 
sub add
{
        my $self = shift;
        my $total = 0;
        foreach my $factor (@_)
        {
                $total += $factor;
        }
        return $total;
}
 
1;</pre></div></div>

<p>As you can see, we have a simple class with one method, add, which adds together all the arguments passed to it. We now need to define a test file for this module, called mymaths.t:</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="perl"><thead><tr><td colspan="2"  class="head">Perl</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
</pre></td><td class="de1"><pre class="de1"><span class="co1">#!/usr/bin/perl</span>
&nbsp;
<span class="kw2">use</span> Test<span class="sy0">::</span><span class="me2">More</span> tests<span class="sy0">=&gt;</span><span class="nu0">6</span><span class="sy0">;</span>
<span class="kw2">use</span> MyMaths<span class="sy0">;</span>
&nbsp;
<span class="re0">$mymaths</span> <span class="sy0">=</span> <span class="kw2">new</span> MyMaths<span class="sy0">;</span>
is<span class="br0">&#40;</span> <span class="re0">$mymaths</span><span class="sy0">-&gt;</span><span class="me1">add</span><span class="br0">&#40;</span><span class="nu0">1</span><span class="sy0">,</span><span class="nu0">2</span><span class="sy0">,</span><span class="nu0">3</span><span class="br0">&#41;</span><span class="sy0">,</span> <span class="nu0">6</span><span class="sy0">,</span> <span class="st0">&quot;1 + 2 + 3 = 6&quot;</span><span class="br0">&#41;</span><span class="sy0">;</span>
is<span class="br0">&#40;</span> <span class="re0">$mymaths</span><span class="sy0">-&gt;</span><span class="me1">add</span><span class="br0">&#40;</span><span class="nu0">6</span><span class="sy0">,</span><span class="nu0">2</span><span class="br0">&#41;</span><span class="sy0">,</span> <span class="nu0">8</span><span class="sy0">,</span><span class="st0">&quot;6 + 2 = 8&quot;</span><span class="br0">&#41;</span><span class="sy0">;</span>
is<span class="br0">&#40;</span> <span class="re0">$mymaths</span><span class="sy0">-&gt;</span><span class="me1">add</span><span class="br0">&#40;</span><span class="nu0">1</span><span class="sy0">,</span><span class="nu0">2</span><span class="sy0">,</span><span class="nu0">3</span><span class="sy0">,</span><span class="nu0">4</span><span class="br0">&#41;</span><span class="sy0">,</span> <span class="nu0">10</span><span class="sy0">,</span> <span class="st0">&quot;1 + 2 + 3 + 4 = 10&quot;</span><span class="br0">&#41;</span><span class="sy0">;</span>
is<span class="br0">&#40;</span> <span class="re0">$mymaths</span><span class="sy0">-&gt;</span><span class="me1">add</span><span class="br0">&#40;</span><span class="nu0">1</span><span class="sy0">,</span><span class="nu0">2</span><span class="br0">&#41;</span><span class="sy0">,</span> <span class="nu0">3</span><span class="sy0">,</span> <span class="st0">&quot;1 + 2 = 3&quot;</span><span class="br0">&#41;</span><span class="sy0">;</span>
is<span class="br0">&#40;</span> <span class="re0">$mymaths</span><span class="sy0">-&gt;</span><span class="me1">add</span><span class="br0">&#40;</span><span class="nu0">2</span><span class="br0">&#41;</span><span class="sy0">,</span> <span class="nu0">2</span><span class="sy0">,</span> <span class="st0">&quot;2 = 2&quot;</span><span class="br0">&#41;</span><span class="sy0">;</span>
is<span class="br0">&#40;</span> <span class="re0">$mymaths</span><span class="sy0">-&gt;</span><span class="me1">add</span><span class="br0">&#40;</span><span class="nu0">2</span><span class="sy0">,-</span><span class="nu0">1</span><span class="br0">&#41;</span><span class="sy0">,</span> <span class="nu0">1</span><span class="sy0">,</span> <span class="st0">&quot;2 + -1 = 1&quot;</span><span class="br0">&#41;</span><span class="sy0">;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">#!/usr/bin/perl
 
use Test::More tests=&gt;6;
use MyMaths;
 
$mymaths = new MyMaths;
is( $mymaths-&gt;add(1,2,3), 6, "1 + 2 + 3 = 6");
is( $mymaths-&gt;add(6,2), 8,"6 + 2 = 8");
is( $mymaths-&gt;add(1,2,3,4), 10, "1 + 2 + 3 + 4 = 10");
is( $mymaths-&gt;add(1,2), 3, "1 + 2 = 3");
is( $mymaths-&gt;add(2), 2, "2 = 2");
is( $mymaths-&gt;add(2,-1), 1, "2 + -1 = 1");</pre></div></div>

<p>This test file uses the is() method of the builtin Test::More module. This method takes 3 arguments: the test, the expected result and a description. If a test fails, is() will give some feedback on the test.</p>
<p><strong>edit:</strong> To run the tests use the `prove` utility which is part of the Test::Harness package:</p>
<p><code class="codespan">prove -v mymaths.t</code></p>
<p>Run all tests in the current directory with:<br />
<code class="codespan">prove -v .</code></p>
<p><del cite="/index.php/WebDev/ServerProgramming/writing-perl-tests-with-test#c7568">To run the tests we use another builtin module, Test::Harness. Create tests.pl:</del></p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="perl"><thead><tr><td colspan="2"  class="head">Perl</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
</pre></td><td class="de1"><pre class="de1"><span class="co1">#!/usr/bin/perl</span>
&nbsp;
<span class="kw2">use</span> Test<span class="sy0">::</span><span class="me2">Harness</span> <span class="kw3">qw</span><span class="br0">&#40;</span><span class="re0">&amp;runtests</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
<span class="re0">@tests</span> <span class="sy0">=</span> <span class="sy0">@</span><span class="kw2">ARGV</span> <span class="sy0">?</span> <span class="sy0">@</span><span class="kw2">ARGV</span> <span class="sy0">:</span> <span class="sy0">&lt;*.</span>t<span class="sy0">&gt;;</span>
&nbsp;
runtests <span class="re0">@tests</span><span class="sy0">;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">#!/usr/bin/perl
 
use Test::Harness qw(&amp;runtests);
 
@tests = @ARGV ? @ARGV : &lt;*.t&gt;;
 
runtests @tests;</pre></div></div>

<p><del>This script can either be run with a list of test files as arguments, or with no arguments to run all test files. Running the script results in:</del></p>
<pre>./mymaths.t .. 
1..6
ok 1 - 1 + 2 + 3 = 6
ok 2 - 6 + 2 = 8
ok 3 - 1 + 2 + 3 + 4 = 10
ok 4 - 1 + 2 = 3
ok 5 - 2 = 2
ok 6 - 2 + -1 = 1
ok
All tests successful.
Files=1, Tests=6,  0 wallclock secs ( 0.01 usr  0.02 sys +  0.02 cusr  0.01 csys =  0.06 CPU)
Result: PASS</pre>
<p>Everything went fine, as expected. Now go back to the original class definition and make a typo on line 22, so it reads = instead of += and rerun the tests:</p>
<pre>./mymaths.t .. 
1..6
not ok 1 - 1 + 2 + 3 = 6
not ok 2 - 6 + 2 = 8
not ok 3 - 1 + 2 + 3 + 4 = 10
not ok 4 - 1 + 2 = 3
ok 5 - 2 = 2
not ok 6 - 2 + -1 = 1

#   Failed test '1 + 2 + 3 = 6'
#   at ./mymaths.t line 7.
#          got: '3'
#     expected: '6'

#   Failed test '6 + 2 = 8'
#   at ./mymaths.t line 8.
#          got: '2'
#     expected: '8'

#   Failed test '1 + 2 + 3 + 4 = 10'
#   at ./mymaths.t line 9.
#          got: '4'
#     expected: '10'

#   Failed test '1 + 2 = 3'
#   at ./mymaths.t line 10.
#          got: '2'
#     expected: '3'

#   Failed test '2 + -1 = 1'
#   at ./mymaths.t line 12.
#          got: '-1'
#     expected: '1'
# Looks like you failed 5 tests of 6.
Dubious, test returned 5 (wstat 1280, 0x500)
Failed 5/6 subtests 

Test Summary Report
-------------------
./mymaths.t (Wstat: 1280 Tests: 6 Failed: 5)
  Failed tests:  1-4, 6
  Non-zero exit status: 5
Files=1, Tests=6,  0 wallclock secs ( 0.03 usr  0.00 sys +  0.03 cusr  0.00 csys =  0.06 CPU)
Result: FAIL</pre>
<p>Most of the tests failed and gave good feedback to help find the problem.</p>
<h2>Summary</h2>
<p>Although writing tests can be a chore it is worth doing. If you write tests a little at a time:</p>
<ul>
<li>When you design a class.</li>
<li>When you add a method to a class.</li>
<li>When you find a bug.</li>
</ul>
<p>You&#8217;ll develop a good library of tests without too much effort.</p>
<p>Further reading: <a href="http://perldoc.perl.org/Test/More.html">Test::More perldoc</a></p>
]]></content:encoded>
			<wfw:commentRss>/index.php/webdev/serverprogramming/writing-perl-tests-with-test/feed/</wfw:commentRss>
		<slash:comments>9</slash:comments>
		</item>
		<item>
		<title>Nice .NET Design Patterns Articles</title>
		<link>/index.php/webdev/webdesigngraphicsstyling/nice-net-design-patterns-articles/</link>
		<comments>/index.php/webdev/webdesigngraphicsstyling/nice-net-design-patterns-articles/#respond</comments>
		<pubDate>Wed, 17 Sep 2008 13:40:00 +0000</pubDate>
		<dc:creator><![CDATA[SQLDenis]]></dc:creator>
				<category><![CDATA[Web Design, Graphics and Styling]]></category>
		<category><![CDATA[.net]]></category>
		<category><![CDATA[c#]]></category>
		<category><![CDATA[design patterns]]></category>
		<category><![CDATA[oop]]></category>
		<category><![CDATA[singleton]]></category>

		<guid isPermaLink="false">/index.php/2008/09/nice-net-design-patterns-articles/</guid>
		<description><![CDATA[The DotNetSlackers site has a nice series of articles about design patterns. The articles were written by Granville Barnett and are a very good read. Here is what is in the first four articles. Design Patterns â€“ Part 1 Learn how to design more robust and maintainable code by incorporating design patterns into your software [&#8230;]]]></description>
				<content:encoded><![CDATA[<p>The DotNetSlackers site has a nice series of articles about design patterns. The articles were written by Granville Barnett and are a very good read. Here is what is in the first four articles.</p>
<p><a href="http://dotnetslackers.com/articles/designpatterns/Design-Patterns-Part-1.aspx">Design Patterns â€“ Part 1</a><br />
Learn how to design more robust and maintainable code by incorporating design patterns into your software projects.<br />
1 Introduction<br />
2 The strategy pattern<br />
3 Implementing our design<br />
4 Summary</p>
<p><a href="http://dotnetslackers.com/articles/designpatterns/Design-Patterns-Part-2.aspx">Design Patterns â€“ Part 2</a><br />
In this part of the design patterns series we will take a look at the observer design pattern.<br />
1 Introduction<br />
2 What is the observer pattern?<br />
3 The Design<br />
4 Implementing our design<br />
5 Arenâ€™t events already in .NET?<br />
6 Summary</p>
<p><a href="http://dotnetslackers.com/articles/designpatterns/Design-Patterns-Part-3.aspx">Design Patterns â€“ Part 3</a><br />
In this part of the design patterns series we will take a look at the factory pattern.<br />
1 Introduction<br />
2 The simple factory<br />
3 Factory pattern<br />
4 Summary</p>
<p><a href="http://dotnetslackers.com/articles/designpatterns/Design-Patterns-Part-4.aspx">Design Patterns â€“ Part 4</a><br />
In this part of the design patterns series we will look at the singleton pattern.<br />
1 Introduction<br />
2 How is a singleton typically implemented?<br />
3 The static modifier<br />
4 Issues with our first design<br />
5 beforefieldinit<br />
6 Summary<br />
7 Acknowledgements<br />
8 References</p>
<p>So what are you waiting for? Start reading the articles!</p>
]]></content:encoded>
			<wfw:commentRss>/index.php/webdev/webdesigngraphicsstyling/nice-net-design-patterns-articles/feed/</wfw:commentRss>
		<slash:comments>0</slash:comments>
		</item>
	</channel>
</rss>
