<?xml version="1.0" encoding="UTF-8"?><rss version="2.0"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:atom="http://www.w3.org/2005/Atom"
	xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
	xmlns:slash="http://purl.org/rss/1.0/modules/slash/"
	>

<channel>
	<title>i heard you like followups &#8211; LessthanDot</title>
	<atom:link href="/index.php/tag/i-heard-you-like-followups/feed/" rel="self" type="application/rss+xml" />
	<link>/</link>
	<description>A Technical Community for IT Professionals</description>
	<lastBuildDate>Sat, 09 Mar 2019 12:50:36 +0000</lastBuildDate>
	<language>en-US</language>
	<sy:updatePeriod>hourly</sy:updatePeriod>
	<sy:updateFrequency>1</sy:updateFrequency>
	<generator>https://wordpress.org/?v=4.6.1</generator>
	<item>
		<title>More PetaPoco: Id&#8217;s and Multi-POCO queries</title>
		<link>/index.php/desktopdev/mstech/csharp/more-petapoco-id-s-and/</link>
		<comments>/index.php/desktopdev/mstech/csharp/more-petapoco-id-s-and/#comments</comments>
		<pubDate>Wed, 02 May 2012 08:23:00 +0000</pubDate>
		<dc:creator><![CDATA[Eli Weinstock-Herman (tarwn)]]></dc:creator>
				<category><![CDATA[C#]]></category>
		<category><![CDATA[c#]]></category>
		<category><![CDATA[i heard you like followups]]></category>
		<category><![CDATA[micro orm]]></category>
		<category><![CDATA[petapoco]]></category>

		<guid isPermaLink="false">/index.php/2012/05/more-petapoco-id-s-and/</guid>
		<description><![CDATA[So yesterday Chrissie and I did posts on Simple.Data and PetaPoco. Today he followed up with more complex examples, including keys and multiple table queries.

PetaPoco is built specifically with primary keys as a first class citizen, so it will be in&#8230;]]></description>
				<content:encoded><![CDATA[<p>So yesterday Chrissie and I did posts on <a href="/index.php/DesktopDev/MSTech/simple-data-and-vb-net" title="Simple.Data and VB.Net the beginning">Simple.Data</a> and <a href="/index.php/DesktopDev/MSTech/CSharp/playing-with-petapoco" title="Playing with PetaPoco">PetaPoco</a>. Today he <a href="/index.php/DesktopDev/MSTech/more-simple-data-with-vb" title="More Simple.Data with VB.Net: adding fields and tables">followed up</a> with more complex examples, including keys and multiple table queries.</p>
<p>PetaPoco is built specifically with primary keys as a first class citizen, so it will be interesting to see how it compares.</p>
<h2>Adding a column</h2>
<p>Like Simple.Data, adding a column to our database table is no problem at all. First lets add the column to our database, then we&#8217;ll look at how that affects both our existing code and an updated POCO with a matching field.</p>
<p>Like before, I&#8217;ll use the more concise syntax of PetaPoco to add the column instead of the standard ADO logic:</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="csharp"><thead><tr><td colspan="2"  class="head">C#</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
</pre></td><td class="de1"><pre class="de1"><span class="kw1">private</span> <span class="kw4">void</span> CreateTable<span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; <span class="kw1">using</span> <span class="br0">&#40;</span><span class="kw1">var</span> db <span class="sy0">=</span> <span class="kw3">new</span> Database<span class="br0">&#40;</span><span class="st0">&quot;DataSource=&quot;</span>test<span class="sy0">.</span><span class="me1">sdf</span><span class="st0">&quot;; Password=&quot;</span>chrissiespassword<span class="st0">&quot;&quot;</span>, <span class="st0">&quot;System.Data.SqlServerCe.4.0&quot;</span><span class="br0">&#41;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; db<span class="sy0">.</span><span class="me1">Execute</span><span class="br0">&#40;</span><span class="st0">&quot;CREATE TABLE Person (Id int IDENTITY(1,1) PRIMARY KEY, LastName nvarchar (40) NOT NULL, FirstName nvarchar (40));&quot;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; <span class="br0">&#125;</span>
<span class="br0">&#125;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">private void CreateTable() {
	using (var db = new Database("DataSource="test.sdf"; Password="chrissiespassword"", "System.Data.SqlServerCe.4.0")) {
		db.Execute("CREATE TABLE Person (Id int IDENTITY(1,1) PRIMARY KEY, LastName nvarchar (40) NOT NULL, FirstName nvarchar (40));");
	}
}</pre></div></div>

<p>After adding this additional column, we can still use the original POCO as PetaPoco will map the columns that are present in the POCO without complaining about leftovers. In the case where we allowed PetaPoco to build the query for us, we get more concise SQL that only queries for the columns  with matching properties in that smaller POCO class:</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="csharp"><thead><tr><td colspan="2"  class="head">C#</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
</pre></td><td class="de1"><pre class="de1"><span class="co1">// SQL = SELECT [Person].[LastName], [Person].[FirstName] FROM [Person] WHERE lastname=@0</span>
<span class="kw1">private</span> <span class="kw4">void</span> SelectDecoratedRecords<span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; <span class="kw1">using</span> <span class="br0">&#40;</span><span class="kw1">var</span> db <span class="sy0">=</span> GetDatabase<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">var</span> results <span class="sy0">=</span> db<span class="sy0">.</span><span class="me1">Query</span><span class="sy0">&lt;</span>DecoratedPerson<span class="sy0">&gt;</span><span class="br0">&#40;</span><span class="st0">&quot;WHERE lastname=@0&quot;</span>, <span class="st0">&quot;lastname1&quot;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; <span class="br0">&#125;</span>
<span class="br0">&#125;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">// SQL = SELECT [Person].[LastName], [Person].[FirstName] FROM [Person] WHERE lastname=@0
private void SelectDecoratedRecords() {
	using (var db = GetDatabase()) {
		var results = db.Query&lt;DecoratedPerson&gt;("WHERE lastname=@0", "lastname1");
	}
}</pre></div></div>

<p>Now let&#8217;s add the new column to both our raw POCO and the decorated POCO:</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="csharp"><thead><tr><td colspan="2"  class="head">C#</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
</pre></td><td class="de1"><pre class="de1">&nbsp; &nbsp; <span class="kw1">public</span> <span class="kw4">class</span> Person <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">public</span> <span class="kw4">int</span> Id <span class="br0">&#123;</span> <span class="kw1">get</span><span class="sy0">;</span> <span class="kw1">set</span><span class="sy0">;</span> <span class="br0">&#125;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">public</span> <span class="kw4">string</span> LastName <span class="br0">&#123;</span> <span class="kw1">get</span><span class="sy0">;</span> <span class="kw1">set</span><span class="sy0">;</span> <span class="br0">&#125;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">public</span> <span class="kw4">string</span> FirstName <span class="br0">&#123;</span> <span class="kw1">get</span><span class="sy0">;</span> <span class="kw1">set</span><span class="sy0">;</span> <span class="br0">&#125;</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">public</span> <span class="kw1">override</span> <span class="kw4">string</span> ToString<span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">return</span> <span class="kw4">String</span><span class="sy0">.</span><span class="me1">Format</span><span class="br0">&#40;</span><span class="st0">&quot;{0}: {1}, {2}&quot;</span>, Id, LastName, FirstName<span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp;
&nbsp; &nbsp; <span class="br0">&#91;</span>TableName<span class="br0">&#40;</span><span class="st0">&quot;Person&quot;</span><span class="br0">&#41;</span><span class="br0">&#93;</span>
&nbsp; &nbsp; <span class="br0">&#91;</span>PrimaryKey<span class="br0">&#40;</span><span class="st0">&quot;Id&quot;</span>,autoIncrement<span class="sy0">=</span><span class="kw1">true</span><span class="br0">&#41;</span><span class="br0">&#93;</span>
&nbsp; &nbsp; <span class="kw1">public</span> <span class="kw4">class</span> DecoratedPerson <span class="sy0">:</span> Person <span class="br0">&#123;</span> <span class="br0">&#125;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">	public class Person {
		public int Id { get; set; }
		public string LastName { get; set; }
		public string FirstName { get; set; }

		public override string ToString() {
			return String.Format("{0}: {1}, {2}", Id, LastName, FirstName);
		}
	}

	[TableName("Person")]
	[PrimaryKey("Id",autoIncrement=true)]
	public class DecoratedPerson : Person { }</pre></div></div>

<p>Without changing of the logic, the function from above will populate the extra column in our non-decorated POCO and the SQL generated by the short query version above will now include the Id column:</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="csharp"><thead><tr><td colspan="2"  class="head">C#</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
</pre></td><td class="de1"><pre class="de1"><span class="co1">//SQL: SELECT * FROM Person WHERE lastname=@0</span>
<span class="kw1">private</span> <span class="kw4">void</span> SelectRecords<span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; <span class="kw1">using</span> <span class="br0">&#40;</span><span class="kw1">var</span> db <span class="sy0">=</span> GetDatabase<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">var</span> results <span class="sy0">=</span> db<span class="sy0">.</span><span class="me1">Query</span><span class="sy0">&lt;</span>Person<span class="sy0">&gt;</span><span class="br0">&#40;</span><span class="st0">&quot;SELECT * FROM Person WHERE lastname=@0&quot;</span>, <span class="st0">&quot;lastname1&quot;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; <span class="br0">&#125;</span>
<span class="br0">&#125;</span>
&nbsp;
<span class="co1">//SQL: SELECT [Person].[Id], [Person].[LastName], [Person].[FirstName] FROM [Person] WHERE lastname=@0</span>
<span class="kw1">private</span> <span class="kw4">void</span> SelectDecoratedRecords<span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; <span class="kw1">using</span> <span class="br0">&#40;</span><span class="kw1">var</span> db <span class="sy0">=</span> GetDatabase<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">var</span> results <span class="sy0">=</span> db<span class="sy0">.</span><span class="me1">Query</span><span class="sy0">&lt;</span>DecoratedPerson<span class="sy0">&gt;</span><span class="br0">&#40;</span><span class="st0">&quot;WHERE lastname=@0&quot;</span>, <span class="st0">&quot;lastname1&quot;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; <span class="br0">&#125;</span>
<span class="br0">&#125;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">//SQL: SELECT * FROM Person WHERE lastname=@0
private void SelectRecords() {
	using (var db = GetDatabase()) {
		var results = db.Query&lt;Person&gt;("SELECT * FROM Person WHERE lastname=@0", "lastname1");
	}
}

//SQL: SELECT [Person].[Id], [Person].[LastName], [Person].[FirstName] FROM [Person] WHERE lastname=@0
private void SelectDecoratedRecords() {
	using (var db = GetDatabase()) {
		var results = db.Query&lt;DecoratedPerson&gt;("WHERE lastname=@0", "lastname1");
	}
}</pre></div></div>

<p>Yesterdays third insert option, using an undecorated object and counting on reflection to match up columns to properties, will fail now because it will attempt to insert a value into that ID field, but using it in a select would still work. The first option, where we supplied the name of the table, will have to be updated to also supply the name of the ID and a boolean to indicate that it is autoincrementing. The second option, inserting the decorated object, requires no changes at all. </p>
<h2>Adding a Table</h2>
<p>Following Chrissie&#8217;s lead, lets add an address table and an undeclared foreign key relationship from the Person table (I have to tease him about something).</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="csharp"><thead><tr><td colspan="2"  class="head">C#</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
</pre></td><td class="de1"><pre class="de1"><span class="kw1">private</span> <span class="kw4">void</span> CreateTables<span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; <span class="kw1">using</span> <span class="br0">&#40;</span><span class="kw1">var</span> db <span class="sy0">=</span> <span class="kw3">new</span> Database<span class="br0">&#40;</span><span class="st0">&quot;DataSource=&quot;</span>test<span class="sy0">.</span><span class="me1">sdf</span><span class="st0">&quot;; Password=&quot;</span>chrissiespassword<span class="st0">&quot;&quot;</span>, <span class="st0">&quot;System.Data.SqlServerCe.4.0&quot;</span><span class="br0">&#41;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; db<span class="sy0">.</span><span class="me1">Execute</span><span class="br0">&#40;</span><span class="st0">&quot;CREATE TABLE Person (Id int IDENTITY(1,1) PRIMARY KEY, LastName nvarchar (40) NOT NULL, FirstName nvarchar (40), AddressId int NOT NULL);&quot;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; db<span class="sy0">.</span><span class="me1">Execute</span><span class="br0">&#40;</span><span class="st0">&quot;CREATE TABLE Address (Id int IDENTITY(1,1) PRIMARY KEY, Street nvarchar (40) NOT NULL, HouseNumber nvarchar (10));&quot;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; <span class="br0">&#125;</span>
<span class="br0">&#125;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">private void CreateTables() {
	using (var db = new Database("DataSource="test.sdf"; Password="chrissiespassword"", "System.Data.SqlServerCe.4.0")) {
		db.Execute("CREATE TABLE Person (Id int IDENTITY(1,1) PRIMARY KEY, LastName nvarchar (40) NOT NULL, FirstName nvarchar (40), AddressId int NOT NULL);");
		db.Execute("CREATE TABLE Address (Id int IDENTITY(1,1) PRIMARY KEY, Street nvarchar (40) NOT NULL, HouseNumber nvarchar (10));");
	}
}</pre></div></div>

<p>And I will add an additional Person POCO to reflect the new column, as well as an Address POCO to reflect the new table. The simpler query logic is addictive, so I&#8217;ve decorated both POCOs (I&#8217;ll explain the ResultColumn later):</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="csharp"><thead><tr><td colspan="2"  class="head">C#</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
</pre></td><td class="de1"><pre class="de1"><span class="br0">&#91;</span>TableName<span class="br0">&#40;</span><span class="st0">&quot;Person&quot;</span><span class="br0">&#41;</span><span class="br0">&#93;</span>
<span class="br0">&#91;</span>PrimaryKey<span class="br0">&#40;</span><span class="st0">&quot;Id&quot;</span>, autoIncrement <span class="sy0">=</span> <span class="kw1">true</span><span class="br0">&#41;</span><span class="br0">&#93;</span>
<span class="kw1">public</span> <span class="kw4">class</span> Person <span class="br0">&#123;</span>
&nbsp; &nbsp; <span class="kw1">public</span> <span class="kw4">int</span> Id <span class="br0">&#123;</span> <span class="kw1">get</span><span class="sy0">;</span> <span class="kw1">set</span><span class="sy0">;</span> <span class="br0">&#125;</span>
&nbsp; &nbsp; <span class="kw1">public</span> <span class="kw4">string</span> LastName <span class="br0">&#123;</span> <span class="kw1">get</span><span class="sy0">;</span> <span class="kw1">set</span><span class="sy0">;</span> <span class="br0">&#125;</span>
&nbsp; &nbsp; <span class="kw1">public</span> <span class="kw4">string</span> FirstName <span class="br0">&#123;</span> <span class="kw1">get</span><span class="sy0">;</span> <span class="kw1">set</span><span class="sy0">;</span> <span class="br0">&#125;</span>
&nbsp; &nbsp; <span class="kw1">public</span> <span class="kw4">int</span> AddressId <span class="br0">&#123;</span> <span class="kw1">get</span><span class="sy0">;</span> <span class="kw1">set</span><span class="sy0">;</span> <span class="br0">&#125;</span>
&nbsp; &nbsp; <span class="br0">&#91;</span>ResultColumn<span class="br0">&#93;</span> <span class="kw1">public</span> Address Address <span class="br0">&#123;</span> <span class="kw1">get</span><span class="sy0">;</span> <span class="kw1">set</span><span class="sy0">;</span> <span class="br0">&#125;</span>
&nbsp;
&nbsp; &nbsp; <span class="kw1">public</span> <span class="kw1">override</span> <span class="kw4">string</span> ToString<span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">return</span> <span class="kw4">String</span><span class="sy0">.</span><span class="me1">Format</span><span class="br0">&#40;</span><span class="st0">&quot;{0}: {1}, {2}&quot;</span>, Id, LastName, FirstName<span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; <span class="br0">&#125;</span>
<span class="br0">&#125;</span>
&nbsp;
<span class="br0">&#91;</span>TableName<span class="br0">&#40;</span><span class="st0">&quot;Address&quot;</span><span class="br0">&#41;</span><span class="br0">&#93;</span>
<span class="br0">&#91;</span>PrimaryKey<span class="br0">&#40;</span><span class="st0">&quot;Id&quot;</span>, autoIncrement <span class="sy0">=</span> <span class="kw1">true</span><span class="br0">&#41;</span><span class="br0">&#93;</span>
<span class="kw1">public</span> <span class="kw4">class</span> Address <span class="br0">&#123;</span>
&nbsp; &nbsp; <span class="kw1">public</span> <span class="kw4">int</span> Id <span class="br0">&#123;</span> <span class="kw1">get</span><span class="sy0">;</span> <span class="kw1">set</span><span class="sy0">;</span> <span class="br0">&#125;</span>
&nbsp; &nbsp; <span class="kw1">public</span> <span class="kw4">string</span> Street <span class="br0">&#123;</span> <span class="kw1">get</span><span class="sy0">;</span> <span class="kw1">set</span><span class="sy0">;</span> <span class="br0">&#125;</span>
&nbsp; &nbsp; <span class="kw1">public</span> <span class="kw4">string</span> HouseNumber <span class="br0">&#123;</span> <span class="kw1">get</span><span class="sy0">;</span> <span class="kw1">set</span><span class="sy0">;</span> <span class="br0">&#125;</span>
<span class="br0">&#125;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">[TableName("Person")]
[PrimaryKey("Id", autoIncrement = true)]
public class Person {
	public int Id { get; set; }
	public string LastName { get; set; }
	public string FirstName { get; set; }
	public int AddressId { get; set; }
	[ResultColumn] public Address Address { get; set; }

	public override string ToString() {
		return String.Format("{0}: {1}, {2}", Id, LastName, FirstName);
	}
}

[TableName("Address")]
[PrimaryKey("Id", autoIncrement = true)]
public class Address {
	public int Id { get; set; }
	public string Street { get; set; }
	public string HouseNumber { get; set; }
}</pre></div></div>

<p>Following Chrissie&#8217;s lead, I&#8217;ll query for the related records separately first:</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="csharp"><thead><tr><td colspan="2"  class="head">C#</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
</pre></td><td class="de1"><pre class="de1"><span class="kw1">public</span> <span class="kw4">void</span> QuerySeperately<span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; <span class="co1">// already called CreateDatabase()</span>
&nbsp; &nbsp; <span class="co1">// already called CreateTables()</span>
&nbsp; &nbsp; <span class="kw1">using</span> <span class="br0">&#40;</span><span class="kw1">var</span> db <span class="sy0">=</span> GetDatabase<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; db<span class="sy0">.</span><span class="me1">Insert</span><span class="br0">&#40;</span><span class="kw3">new</span> Address<span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span> Street <span class="sy0">=</span> <span class="st0">&quot;street1&quot;</span>, HouseNumber <span class="sy0">=</span> <span class="st0">&quot;1&quot;</span> <span class="br0">&#125;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; db<span class="sy0">.</span><span class="me1">Insert</span><span class="br0">&#40;</span><span class="kw3">new</span> Person<span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span> LastName <span class="sy0">=</span> <span class="st0">&quot;lastname1&quot;</span>, FirstName <span class="sy0">=</span> <span class="st0">&quot;firstname1&quot;</span>, AddressId <span class="sy0">=</span> <span class="nu0">1</span> <span class="br0">&#125;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; db<span class="sy0">.</span><span class="me1">Insert</span><span class="br0">&#40;</span><span class="kw3">new</span> Person<span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span> LastName <span class="sy0">=</span> <span class="st0">&quot;lastname2&quot;</span>, FirstName <span class="sy0">=</span> <span class="st0">&quot;firstname2&quot;</span>, AddressId <span class="sy0">=</span> <span class="nu0">1</span> <span class="br0">&#125;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">var</span> results <span class="sy0">=</span> db<span class="sy0">.</span><span class="me1">Query</span><span class="sy0">&lt;</span>Person<span class="sy0">&gt;</span><span class="br0">&#40;</span><span class="st0">&quot;WHERE LastName=@0&quot;</span>, <span class="st0">&quot;lastname1&quot;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">foreach</span> <span class="br0">&#40;</span><span class="kw1">var</span> person <span class="kw1">in</span> results<span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Console<span class="sy0">.</span><span class="me1">WriteLine</span><span class="br0">&#40;</span><span class="st0">&quot;Person: {0} {1} {2}&quot;</span>, person<span class="sy0">.</span><span class="me1">Id</span>, person<span class="sy0">.</span><span class="me1">LastName</span>, person<span class="sy0">.</span><span class="me1">FirstName</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">var</span> address <span class="sy0">=</span> db<span class="sy0">.</span><span class="me1">Single</span><span class="sy0">&lt;</span>Address<span class="sy0">&gt;</span><span class="br0">&#40;</span><span class="st0">&quot;Where Id=@0&quot;</span>, person<span class="sy0">.</span><span class="me1">AddressId</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Console<span class="sy0">.</span><span class="me1">WriteLine</span><span class="br0">&#40;</span><span class="st0">&quot;Address: {0} {1}&quot;</span>, address<span class="sy0">.</span><span class="me1">Street</span>, address<span class="sy0">.</span><span class="me1">HouseNumber</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw4">int</span> count <span class="sy0">=</span> db<span class="sy0">.</span><span class="me1">ExecuteScalar</span><span class="sy0">&lt;</span><span class="kw4">int</span><span class="sy0">&gt;</span><span class="br0">&#40;</span><span class="st0">&quot;SELECT COUNT(*) FROM Person WHERE LastName=@0&quot;</span>, <span class="st0">&quot;lastname1&quot;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; Console<span class="sy0">.</span><span class="me1">WriteLine</span><span class="br0">&#40;</span><span class="st0">&quot;Count: &quot;</span> <span class="sy0">+</span> count<span class="sy0">.</span><span class="me1">ToString</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; <span class="br0">&#125;</span>
<span class="br0">&#125;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">public void QuerySeperately() {
	// already called CreateDatabase()
	// already called CreateTables()
	using (var db = GetDatabase()) {
		db.Insert(new Address() { Street = "street1", HouseNumber = "1" });
		db.Insert(new Person() { LastName = "lastname1", FirstName = "firstname1", AddressId = 1 });
		db.Insert(new Person() { LastName = "lastname2", FirstName = "firstname2", AddressId = 1 });

		var results = db.Query&lt;Person&gt;("WHERE LastName=@0", "lastname1");
		foreach (var person in results) {
			Console.WriteLine("Person: {0} {1} {2}", person.Id, person.LastName, person.FirstName);
			var address = db.Single&lt;Address&gt;("Where Id=@0", person.AddressId);
			Console.WriteLine("Address: {0} {1}", address.Street, address.HouseNumber);
		}

		int count = db.ExecuteScalar&lt;int&gt;("SELECT COUNT(*) FROM Person WHERE LastName=@0", "lastname1");
		Console.WriteLine("Count: " + count.ToString());
	}
}</pre></div></div>

<p>As he pointed out, this method doesn&#8217;t perform well. We can replace this with a single query using the <a href="http://www.toptensoftware.com/Articles/111/PetaPoco-Experimental-Multi-Poco-Queries" title="Read more about this at TopTen Software">Multi-POCO</a> support.</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="csharp"><thead><tr><td colspan="2"  class="head">C#</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
</pre></td><td class="de1"><pre class="de1"><span class="kw1">public</span> <span class="kw4">void</span> QueryMultiStyle<span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span> 
&nbsp; &nbsp; <span class="co1">// already called CreateDatabase()</span>
&nbsp; &nbsp; <span class="co1">// already called CreateTables()</span>
&nbsp; &nbsp; <span class="kw1">using</span> <span class="br0">&#40;</span><span class="kw1">var</span> db <span class="sy0">=</span> GetDatabase<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; db<span class="sy0">.</span><span class="me1">Insert</span><span class="br0">&#40;</span><span class="kw3">new</span> Address<span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span> Street <span class="sy0">=</span> <span class="st0">&quot;street1&quot;</span>, HouseNumber <span class="sy0">=</span> <span class="st0">&quot;1&quot;</span> <span class="br0">&#125;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; db<span class="sy0">.</span><span class="me1">Insert</span><span class="br0">&#40;</span><span class="kw3">new</span> Person<span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span> LastName <span class="sy0">=</span> <span class="st0">&quot;lastname1&quot;</span>, FirstName <span class="sy0">=</span> <span class="st0">&quot;firstname1&quot;</span>, AddressId <span class="sy0">=</span> <span class="nu0">1</span> <span class="br0">&#125;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; db<span class="sy0">.</span><span class="me1">Insert</span><span class="br0">&#40;</span><span class="kw3">new</span> Person<span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span> LastName <span class="sy0">=</span> <span class="st0">&quot;lastname1&quot;</span>, FirstName <span class="sy0">=</span> <span class="st0">&quot;firstname2&quot;</span>, AddressId <span class="sy0">=</span> <span class="nu0">1</span> <span class="br0">&#125;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">var</span> results <span class="sy0">=</span> db<span class="sy0">.</span><span class="me1">Query</span><span class="sy0">&lt;</span>Person, Address<span class="sy0">&gt;</span><span class="br0">&#40;</span><span class="st_h">@&quot;</span>
<span class="st_h">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; SELECT Person.*, Address.* </span>
<span class="st_h">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; FROM Person </span>
<span class="st_h">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; INNER JOIN Address ON Person.AddressId = Address.Id </span>
<span class="st_h">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; WHERE Person.lastname=@0&quot;</span>, <span class="st0">&quot;lastname1&quot;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">foreach</span> <span class="br0">&#40;</span><span class="kw1">var</span> person <span class="kw1">in</span> results<span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Console<span class="sy0">.</span><span class="me1">WriteLine</span><span class="br0">&#40;</span><span class="st0">&quot;Person: {0} {1}&quot;</span>, person<span class="sy0">.</span><span class="me1">LastName</span>, person<span class="sy0">.</span><span class="me1">FirstName</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Console<span class="sy0">.</span><span class="me1">WriteLine</span><span class="br0">&#40;</span><span class="st0">&quot;Address: {0} {1}&quot;</span>, person<span class="sy0">.</span><span class="me1">Address</span><span class="sy0">.</span><span class="me1">Street</span>, person<span class="sy0">.</span><span class="me1">Address</span><span class="sy0">.</span><span class="me1">HouseNumber</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp; &nbsp; <span class="br0">&#125;</span>
<span class="br0">&#125;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">public void QueryMultiStyle() { 
	// already called CreateDatabase()
	// already called CreateTables()
	using (var db = GetDatabase()) {
		db.Insert(new Address() { Street = "street1", HouseNumber = "1" });
		db.Insert(new Person() { LastName = "lastname1", FirstName = "firstname1", AddressId = 1 });
		db.Insert(new Person() { LastName = "lastname1", FirstName = "firstname2", AddressId = 1 });

		var results = db.Query&lt;Person, Address&gt;(@"
							  SELECT Person.*, Address.* 
							  FROM Person 
								INNER JOIN Address ON Person.AddressId = Address.Id 
							  WHERE Person.lastname=@0", "lastname1");
		foreach (var person in results) {
			Console.WriteLine("Person: {0} {1}", person.LastName, person.FirstName);
			Console.WriteLine("Address: {0} {1}", person.Address.Street, person.Address.HouseNumber);
		}
	}
}</pre></div></div>

<p>PetaPoco has the ability to map the results of JOINs to several objects, but it&#8217;s kind of tricky. The simplest method is to return the fields in the same order as the generic object list. What PetaPoco then does is attempt to process each column in the result from left to right, moving to the next object in line when it reaches a column that doesn&#8217;t exist in the first or has already been populated. So in this case, because both of the tables and POCOs have an &#8220;Id&#8221;, when the result set reaches the second id it makes the logical conclusion that it is time to start mapping the Address object. PetaPoco uses type detection in the Person object to locate a property to assign the Address instance to.</p>
<p>There is also more extensive capabilities available to use lambdas to manage the multi-POCO mapping on our own, and if we wanted to we could easily define a single POCO object that had all the necessary fields for both tables. Logic for <a href="http://www.toptensoftware.com/Articles/115/PetaPoco-Mapping-One-to-Many-and-Many-to-One-Relationships" title="PetaPoco - Mapping One-to-Many and Many-to-One Relationships">One-to-many joins</a> is more complex and I haven&#8217;t had time to dig fully into the intricacies yet.</p>
<p>The last trick was the ResultColumn attribute I used above. By default PetaPoco assumes that all of the properties in our POCO are going to be inserted into the database. ResultColumn properties are ignored for inserts and updates, but can still be selected into. In this case I&#8217;m using it to have PetaPoco ignore the column, but the real purpose would be to allow me to return an additional calculated column, aggregate, or other value that wouldn&#8217;t have meaning in an INSERT or UPDATE. </p>
<p><i>Note: There is an Ignore attribute that would have worked just as well and been a better fit, but then I wouldn&#8217;t have had a chance to talk about the ResultColumn <img src="https://s.w.org/images/core/emoji/2/72x72/1f642.png" alt="🙂" class="wp-smiley" style="height: 1em; max-height: 1em;" /></i></p>
<h2>Conclusion</h2>
<p>So there we go. We can add auto-incrementing IDs very easily, PetaPoco is smart enough to map partial objects, and there is some really neat stuff available for multi-POCO joins. I&#8217;ve continued to update the <a href="https://github.com/tarwn/PetaPocoSample" title="Sample code on github">github repository</a>, so feel free to grab a copy of the code and play around with yourself.</p>
]]></content:encoded>
			<wfw:commentRss>/index.php/desktopdev/mstech/csharp/more-petapoco-id-s-and/feed/</wfw:commentRss>
		<slash:comments>5</slash:comments>
		</item>
	</channel>
</rss>
