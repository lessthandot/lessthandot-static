<?xml version="1.0" encoding="UTF-8"?><rss version="2.0"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:atom="http://www.w3.org/2005/Atom"
	xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
	xmlns:slash="http://purl.org/rss/1.0/modules/slash/"
	>

<channel>
	<title>trick &#8211; LessthanDot</title>
	<atom:link href="/index.php/tag/trick/feed/" rel="self" type="application/rss+xml" />
	<link>/</link>
	<description>A Technical Community for IT Professionals</description>
	<lastBuildDate>Sat, 09 Mar 2019 12:50:36 +0000</lastBuildDate>
	<language>en-US</language>
	<sy:updatePeriod>hourly</sy:updatePeriod>
	<sy:updateFrequency>1</sy:updateFrequency>
	<generator>https://wordpress.org/?v=4.6.1</generator>
	<item>
		<title>Dammit people, get to know check constraints and use them!</title>
		<link>/index.php/datamgmt/datadesign/dammit-people-get-to-know/</link>
		<comments>/index.php/datamgmt/datadesign/dammit-people-get-to-know/#comments</comments>
		<pubDate>Tue, 03 Apr 2012 23:05:00 +0000</pubDate>
		<dc:creator><![CDATA[SQLDenis]]></dc:creator>
				<category><![CDATA[Data Modelling and Design]]></category>
		<category><![CDATA[Database Programming]]></category>
		<category><![CDATA[Microsoft SQL Server]]></category>
		<category><![CDATA[Microsoft SQL Server Admin]]></category>
		<category><![CDATA[check constraints]]></category>
		<category><![CDATA[ow to]]></category>
		<category><![CDATA[sql server 2005]]></category>
		<category><![CDATA[sql server 2008]]></category>
		<category><![CDATA[sql server 2012]]></category>
		<category><![CDATA[tip]]></category>
		<category><![CDATA[trick]]></category>

		<guid isPermaLink="false">/index.php/2012/04/dammit-people-get-to-know/</guid>
		<description><![CDATA[A couple of months back we were interviewing people for 2 positions, one of the questions I like to ask is the following: If you have a column in a table that's an integer data type how can you restrict the values to be between 1 and 10? Most of the peo&#8230;]]></description>
				<content:encoded><![CDATA[<p>A couple of months back we were interviewing people for 2 positions, one of the questions I like to ask is the following: If you have a column in a table that&#8217;s an integer data type how can you restrict the values to be between 1 and 10? Most of the people start by saying that they restrict it in the application, when I ask how they would prevent from someone who has write access to do it they usually say that they would add a trigger. Only about 20% of the people know that there is something in the table designer where they can enter a range. Between 5 and 10% of the people know that this is called a <strong>check constraint</strong>. If you know what a check constraint is&#8230;bravo, you my friend are an elitist!</p>
<p>I forgot about these interviews but this question <a href="http://stackoverflow.com/questions/10002798/overriding-the-maximum-value-of-a-bigint-datatype-in-mssql">Overriding the maximum value of a bigint datatype in MSSQL</a> made it reappear like a phoenix that rises from the ashes.</p>
<p>Let&#8217;s look at some examples</p>
<p>First create this table</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
</pre></td><td class="de1"><pre class="de1"><span class="kw1">create</span> <span class="kw1">table</span> SomeTable<span class="br0">&#40;</span>code <span class="kw1">char</span><span class="br0">&#40;</span><span class="nu0">3</span><span class="br0">&#41;</span> not null<span class="br0">&#41;</span>
GO</pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">create table SomeTable(code char(3) not null)
GO</pre></div></div>

<p>Now let&#8217;s say we want to restrict the values that you can insert to only accept characters from a through z, here is what the constraint looks like</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
</pre></td><td class="de1"><pre class="de1"><span class="kw1">alter</span> <span class="kw1">table</span> SomeTable <span class="kw1">add</span> &nbsp;<span class="kw1">constraint</span> ck_bla
<span class="kw1">check</span> <span class="br0">&#40;</span>code like <span class="st0">'[a-Z][a-Z][a-Z]'</span> <span class="br0">&#41;</span>
GO</pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">alter table SomeTable add  constraint ck_bla
check (code like '[a-Z][a-Z][a-Z]' )
GO</pre></div></div>

<p>If you now run the following insert statement&#8230;.</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
</pre></td><td class="de1"><pre class="de1"><span class="kw1">insert</span> SomeTable <span class="kw1">values</span> <span class="br0">&#40;</span><span class="st0">'123'</span><span class="br0">&#41;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">insert SomeTable values ('123')</pre></div></div>

<p>You get this error message back</p>
<p><em>Msg 547, Level 16, State 0, Line 1<br />
The INSERT statement conflicted with the CHECK constraint &#8220;ck_bla&#8221;. The conflict occurred in database &#8220;tempdb&#8221;, table &#8220;dbo.SomeTable&#8221;, column &#8216;code&#8217;.<br />
The statement has been terminated.</em></p>
<p>What if you have a tinyint column but you want to make sure that values are less then 100? Easy as well, first create this table</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
</pre></td><td class="de1"><pre class="de1"><span class="kw1">create</span> <span class="kw1">table</span> SomeTable2<span class="br0">&#40;</span>SomeCol <span class="kw1">tinyint</span> not null<span class="br0">&#41;</span>
GO</pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">create table SomeTable2(SomeCol tinyint not null)
GO</pre></div></div>

<p>Now add this constraint</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
</pre></td><td class="de1"><pre class="de1"><span class="kw1">alter</span> <span class="kw1">table</span> SomeTable2 <span class="kw1">add</span> &nbsp;<span class="kw1">constraint</span> ck_SomeTable2
<span class="kw1">check</span> <span class="br0">&#40;</span>SomeCol <span class="sy0">&lt;</span> <span class="nu0">100</span> <span class="br0">&#41;</span>
GO</pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">alter table SomeTable2 add  constraint ck_SomeTable2
check (SomeCol &lt; 100 )
GO</pre></div></div>

<p>Try to insert the value 100</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
</pre></td><td class="de1"><pre class="de1"><span class="kw1">insert</span> SomeTable2 <span class="kw1">values</span> <span class="br0">&#40;</span><span class="st0">'100'</span><span class="br0">&#41;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">insert SomeTable2 values ('100')</pre></div></div>

<p><em>Msg 547, Level 16, State 0, Line 2<br />
The INSERT statement conflicted with the CHECK constraint &#8220;ck_SomeTable2&#8221;. The conflict occurred in database &#8220;tempdb&#8221;, table &#8220;dbo.SomeTable2&#8221;, column &#8216;SomeCol&#8217;.<br />
The statement has been terminated.</em></p>
<p>Okay, what happens if you try to insert -1?</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
</pre></td><td class="de1"><pre class="de1"><span class="kw1">insert</span> SomeTable2 <span class="kw1">values</span> <span class="br0">&#40;</span><span class="st0">'-1'</span><span class="br0">&#41;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">insert SomeTable2 values ('-1')</pre></div></div>

<p><em>Msg 244, Level 16, State 1, Line 1<br />
The conversion of the varchar value &#8216;-1&#8217; overflowed an INT1 column. Use a larger integer column.<br />
The statement has been terminated.</em></p>
<p>As you can see you also get an error, however this is not from the constraint but the error is raised because the tinyint datatype can&#8217;t be less than 0</p>
<p>Check constraint can also be tied to a user defined function and you can also use regular expressions. Ranges can also be used, for example<em> salary >= 15000 AND salary <= 100000</em></p>
<p>Check (no pun intended) out this post also <a href="/index.php/DataMgmt/DBProgramming/sql-server-does-support-regular-expressi">SQL Server does support regular expressions in check constraints, triggers are not always needed</a>, it has examples about creating a case sensitive check constraint</p>
]]></content:encoded>
			<wfw:commentRss>/index.php/datamgmt/datadesign/dammit-people-get-to-know/feed/</wfw:commentRss>
		<slash:comments>3</slash:comments>
		</item>
		<item>
		<title>How to capture the error output from xp_cmdshell in SQL Server</title>
		<link>/index.php/datamgmt/dbprogramming/how-to-capture-error-output-from-xp_cmds/</link>
		<comments>/index.php/datamgmt/dbprogramming/how-to-capture-error-output-from-xp_cmds/#comments</comments>
		<pubDate>Wed, 22 Sep 2010 13:37:55 +0000</pubDate>
		<dc:creator><![CDATA[SQLDenis]]></dc:creator>
				<category><![CDATA[Database Programming]]></category>
		<category><![CDATA[Microsoft SQL Server]]></category>
		<category><![CDATA[error]]></category>
		<category><![CDATA[how to]]></category>
		<category><![CDATA[sql server 2005]]></category>
		<category><![CDATA[sql server 2008]]></category>
		<category><![CDATA[tip]]></category>
		<category><![CDATA[trick]]></category>
		<category><![CDATA[xp_cmdshell]]></category>

		<guid isPermaLink="false">/index.php/2010/09/how-to-capture-error-output-from-xp_cmds/</guid>
		<description><![CDATA[A person asked the following question: I am running the following command: EXEC @ReturnCode = master.dbo.xp_cmdshell @cmdline On the Results tab I get 2 lines Could not find a part of the path &#8216;serverdirectoryfilename&#8217;. NULL How do I capture the first line in an error message? I tried using a Try Catch block with &#8220;SELECT [&#8230;]]]></description>
				<content:encoded><![CDATA[<p>A person asked the following question:</p>
<blockquote><p>I am running the following command:</p>
<p>EXEC @ReturnCode = master.dbo.xp_cmdshell @cmdline</p>
<p>On the Results tab I get 2 lines Could not find a part of the path &#8216;serverdirectoryfilename&#8217;. NULL</p>
<p>How do I capture the first line in an error message? I tried using a Try Catch block with &#8220;SELECT @ErrorMessage = ERROR_MESSAGE()&#8221; and it doesn&#8217;t grab it.</p>
<p>The message is not coming from sys.messages. Where is this error message coming from then?</p></blockquote>
<p>First of all that message comes from the Command Shell/DOS, not from SQL Server. There is a way to grab the message if you store the output in a table. The xp_cmdshell proc will return 1 if there is a failure and 0 if it executed succesfully<br />
So if you were to execute the bogus command <em>bla bla c:</em> you would get the following output</p>
<p><em>&#8216;bla&#8217; is not recognized as an internal or external command,operable program or batch file.</em></p>
<p>If you did something like <em>dir z:</em> when you don&#8217;t have a z drive you would see the following</p>
<p><em>The system cannot find the path specified.</em></p>
<p>Now let&#8217;s look at some code by running a dir command on a drive that doesn&#8217;t exist, if you do have a z drive then change it to something that you don&#8217;t have</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
</pre></td><td class="de1"><pre class="de1"><span class="kw1">DECLARE</span> @cmdline <span class="kw1">VARCHAR</span><span class="br0">&#40;</span><span class="nu0">500</span><span class="br0">&#41;</span>,
&nbsp; &nbsp; &nbsp; &nbsp; @ReturnCode <span class="kw1">INT</span>, 
&nbsp; &nbsp; &nbsp; &nbsp; @ErrorMessage <span class="kw1">varchar</span><span class="br0">&#40;</span><span class="nu0">2000</span><span class="br0">&#41;</span>
&nbsp;
<span class="co1">--Command to execute</span>
<span class="kw1">SELECT</span> @cmdline <span class="sy0">=</span> <span class="st0">'dir z:'</span>
&nbsp;
<span class="co1">-- Initialize variable</span>
<span class="kw1">SELECT</span> @ErrorMessage <span class="sy0">=</span> <span class="st0">''</span>
&nbsp;
<span class="co1">--Create temp table to hold result</span>
<span class="kw1">CREATE</span> <span class="kw1">TABLE</span> #temp <span class="br0">&#40;</span>SomeCol <span class="kw1">VARCHAR</span><span class="br0">&#40;</span><span class="nu0">500</span><span class="br0">&#41;</span><span class="br0">&#41;</span>
&nbsp;
<span class="co1">--dump result into temp table</span>
<span class="kw1">INSERT</span> #temp
<span class="kw1">EXEC</span> @ReturnCode <span class="sy0">=</span> master.<span class="me1">dbo</span>.<span class="me1">xp_cmdshell</span> @cmdline
&nbsp;
<span class="co1">-- If we have an error populate variable</span>
<span class="kw1">IF</span> @ReturnCode <span class="sy0">&lt;&gt;</span> <span class="nu0">0</span>
<span class="kw1">BEGIN</span>
&nbsp; &nbsp; <span class="kw1">SELECT</span> @ErrorMessage <span class="sy0">=</span> @ErrorMessage <span class="sy0">+</span> SomeCol &nbsp; 
&nbsp; &nbsp; <span class="kw1">FROM</span> #temp
&nbsp; &nbsp; <span class="kw1">WHERE</span> SomeCol <span class="kw1">IS</span> <span class="sy0">NOT</span> <span class="sy0">NULL</span>
&nbsp;
&nbsp; &nbsp; <span class="co1">--Display error message and return code</span>
&nbsp; &nbsp; <span class="kw1">SELECT</span> @ErrorMessage <span class="kw1">as</span> ErrorMessage &nbsp;,@ReturnCode <span class="kw1">as</span> ReturnCode
&nbsp;
<span class="kw1">END</span>
<span class="co1">-- Look how 'green' we are</span>
<span class="kw1">DROP</span> <span class="kw1">TABLE</span> #temp</pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">DECLARE @cmdline VARCHAR(500),
		@ReturnCode INT, 
		@ErrorMessage varchar(2000)

--Command to execute
SELECT @cmdline = 'dir z:'

-- Initialize variable
SELECT @ErrorMessage = ''

--Create temp table to hold result
CREATE TABLE #temp (SomeCol VARCHAR(500))

--dump result into temp table
INSERT #temp
EXEC @ReturnCode = master.dbo.xp_cmdshell @cmdline

-- If we have an error populate variable
IF @ReturnCode &lt;&gt; 0
BEGIN
	SELECT @ErrorMessage = @ErrorMessage + SomeCol   
	FROM #temp
	WHERE SomeCol IS NOT NULL

	--Display error message and return code
	SELECT @ErrorMessage as ErrorMessage  ,@ReturnCode as ReturnCode

END
-- Look how 'green' we are
DROP TABLE #temp</pre></div></div>

<p>After you run that you should see the following<br />
</p>
<div class="tables">
<table cellpadding="1" cellspacing="1" border="1">
<tr>
<th>ErrorMessage</th>
<th>ReturnCode</th>
</tr>
<tr>
<td>The system cannot find the path specified.</td>
<td>1</td>
</tr>
</table>
</div>
<p>Change

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
</pre></td><td class="de1"><pre class="de1"><span class="kw1">SELECT</span> @cmdline <span class="sy0">=</span> <span class="st0">'dir z:'</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">SELECT @cmdline = 'dir z:'</pre></div></div>

<p> to

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
</pre></td><td class="de1"><pre class="de1"><span class="kw1">SELECT</span> @cmdline <span class="sy0">=</span> <span class="st0">'bla bla z:'</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">SELECT @cmdline = 'bla bla z:'</pre></div></div>

<p>Run the code again and now you should see the following output.<br />
</p>
<div class="tables">
<table cellpadding="1" cellspacing="1" border="1">
<tr>
<th>ErrorMessage</th>
<th>ReturnCode</th>
</tr>
<tr>
<td>&#8216;bla&#8217; is not recognized as an internal or external command,operable program or batch file.</td>
<td>1</td>
</tr>
</table>
</div>
<p>That is it for this post; as you can see there is a way to grab the error message from xp_cmdshell</p>
<p>*** <strong>Remember, if you have a SQL related question, try our <a href="http://forum.lessthandot.com/viewforum.php?f=17">Microsoft SQL Server Programming</a> forum or our <a href="http://forum.lessthandot.com/viewforum.php?f=22">Microsoft SQL Server Admin</a> forum</strong><ins></ins></p>
]]></content:encoded>
			<wfw:commentRss>/index.php/datamgmt/dbprogramming/how-to-capture-error-output-from-xp_cmds/feed/</wfw:commentRss>
		<slash:comments>1</slash:comments>
		</item>
		<item>
		<title>How to clean a table from badly named column names</title>
		<link>/index.php/datamgmt/datadesign/how-to-clean-a-table-from-badly-named-co/</link>
		<comments>/index.php/datamgmt/datadesign/how-to-clean-a-table-from-badly-named-co/#comments</comments>
		<pubDate>Fri, 11 Jun 2010 10:41:12 +0000</pubDate>
		<dc:creator><![CDATA[SQLDenis]]></dc:creator>
				<category><![CDATA[Data Modelling and Design]]></category>
		<category><![CDATA[how to]]></category>
		<category><![CDATA[naming conventions]]></category>
		<category><![CDATA[sql server 2005]]></category>
		<category><![CDATA[sql server 2008]]></category>
		<category><![CDATA[tip]]></category>
		<category><![CDATA[trick]]></category>

		<guid isPermaLink="false">/index.php/2010/06/how-to-clean-a-table-from-badly-named-co/</guid>
		<description><![CDATA[Someone gives you a backup of a database, you restore it and the first thing you notice is that the column names have percent signs and underscores in them. It would be easy to fix this if it was one table but in this case there are hundreds of tables. The solution is to loop [&#8230;]]]></description>
				<content:encoded><![CDATA[<p>Someone gives you a backup of a database, you restore it and the first thing you notice is that the column names have percent signs and underscores in them.<br />
It would be easy to fix this if it was one table but in this case there are hundreds of tables.</p>
<p>The solution is to loop over information_schema.columns, find all the columns that have those characters and then rename those columns by using the sp_rename procedure. I will show you two ways to do this, one way that executes the code and one way that generates a script that you then can execute.</p>
<h1>Execute the code automatically</h1>
<p>First create these two tables</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
</pre></td><td class="de1"><pre class="de1"><span class="kw1">CREATE</span> <span class="kw1">TABLE</span> Test <span class="br0">&#40;</span><span class="br0">&#91;</span>col<span class="sy0">%</span>1<span class="br0">&#93;</span> <span class="kw1">VARCHAR</span><span class="br0">&#40;</span><span class="nu0">50</span><span class="br0">&#41;</span>,<span class="br0">&#91;</span>col_2<span class="br0">&#93;</span> <span class="kw1">VARCHAR</span><span class="br0">&#40;</span><span class="nu0">40</span><span class="br0">&#41;</span><span class="br0">&#41;</span>
GO
&nbsp;
<span class="kw1">CREATE</span> <span class="kw1">TABLE</span> Test2 <span class="br0">&#40;</span><span class="br0">&#91;</span>col<span class="sy0">%</span>2<span class="br0">&#93;</span> <span class="kw1">VARCHAR</span><span class="br0">&#40;</span><span class="nu0">50</span><span class="br0">&#41;</span>,<span class="br0">&#91;</span>col_3<span class="br0">&#93;</span> <span class="kw1">VARCHAR</span><span class="br0">&#40;</span><span class="nu0">40</span><span class="br0">&#41;</span>, <span class="br0">&#91;</span>Col_<span class="sy0">%</span>_<span class="sy0">%</span>4<span class="br0">&#93;</span> <span class="kw1">int</span><span class="br0">&#41;</span>
GO</pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">CREATE TABLE Test ([col%1] VARCHAR(50),[col_2] VARCHAR(40))
GO

CREATE TABLE Test2 ([col%2] VARCHAR(50),[col_3] VARCHAR(40), [Col_%_%4] int)
GO</pre></div></div>

<p>Now here is the code that will rename this in one shot. I have placed comments in the code to show you what the code does. If you want to know how sp_rename works visit the Books On Line link here: http://msdn.microsoft.com/en-us/library/ms188351.aspx</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
</pre></td><td class="de1"><pre class="de1"><span class="co1">--Grab the table and columns that we need and store it in a temp table</span>
<span class="kw1">SELECT</span> <span class="kw1">IDENTITY</span><span class="br0">&#40;</span><span class="kw1">INT</span>,<span class="nu0">1</span>,<span class="nu0">1</span><span class="br0">&#41;</span> <span class="kw1">AS</span> id ,column_name,table_name, table_schema
<span class="kw1">INTO</span> #LOOP
<span class="kw1">FROM</span> information_schema.<span class="me1">columns</span>
<span class="kw1">WHERE</span> column_name <span class="sy0">LIKE</span> <span class="st0">'%[%]%'</span> <span class="co1">--need to use brackets to escape %</span>
<span class="sy0">OR</span> column_name <span class="sy0">LIKE</span> <span class="st0">'%[_]%'</span> &nbsp; &nbsp;<span class="co1">--need to use brackets to escape _</span>
&nbsp;
<span class="co1">--set up loop variables</span>
<span class="kw1">DECLARE</span> @maxID <span class="kw1">INT</span>, @loopid <span class="kw1">INT</span>
<span class="kw1">SELECT</span> @loopid <span class="sy0">=</span><span class="nu0">1</span> &nbsp;<span class="co1">--start of loop</span>
<span class="kw1">SELECT</span> @maxID <span class="sy0">=</span> <span class="kw2">MAX</span><span class="br0">&#40;</span>id<span class="br0">&#41;</span> <span class="kw1">FROM</span> #LOOP <span class="co1">--end of loop</span>
&nbsp;
&nbsp;
<span class="co1">--setup table and column name variables</span>
<span class="kw1">DECLARE</span> &nbsp;@columnName <span class="kw1">VARCHAR</span><span class="br0">&#40;</span><span class="nu0">100</span><span class="br0">&#41;</span>
<span class="kw1">DECLARE</span> &nbsp;@TableColumnNAme <span class="kw1">VARCHAR</span><span class="br0">&#40;</span><span class="nu0">100</span><span class="br0">&#41;</span>
&nbsp;
<span class="co1">--loop until the end</span>
<span class="kw1">WHILE</span> @loopid <span class="sy0">&lt;=</span> @maxID
<span class="kw1">BEGIN</span>
&nbsp;
<span class="co1">--populate variables and take % and _ out from the column name</span>
<span class="kw1">SELECT</span> @TableColumnNAme <span class="sy0">=</span> <span class="kw2">QUOTENAME</span><span class="br0">&#40;</span>TABLE_SCHEMA<span class="br0">&#41;</span> <span class="sy0">+</span> <span class="st0">'.'</span> <span class="sy0">+</span> <span class="kw2">QUOTENAME</span><span class="br0">&#40;</span>TABLE_NAME<span class="br0">&#41;</span> <span class="sy0">+</span> <span class="st0">'.'</span> <span class="sy0">+</span> <span class="kw2">QUOTENAME</span><span class="br0">&#40;</span>COLUMN_NAME<span class="br0">&#41;</span>,
@columnName <span class="sy0">=</span> <span class="kw2">REPLACE</span><span class="br0">&#40;</span><span class="kw2">REPLACE</span><span class="br0">&#40;</span>COLUMN_NAME,<span class="st0">'%'</span>,<span class="st0">''</span><span class="br0">&#41;</span>,<span class="st0">'_'</span>,<span class="st0">''</span><span class="br0">&#41;</span>
<span class="kw1">FROM</span> #LOOP <span class="kw1">WHERE</span> id <span class="sy0">=</span> @loopid
&nbsp;
&nbsp;
<span class="co1">--rename the column</span>
<span class="kw1">EXEC</span> <span class="kw3">sp_rename</span> @TableColumnNAme, @columnName, <span class="st0">'COLUMN'</span>;
&nbsp;
<span class="co1">--increment loop</span>
<span class="kw1">SET</span> @loopid <span class="sy0">=</span> @loopid <span class="sy0">+</span> <span class="nu0">1</span>
<span class="kw1">END</span>
&nbsp;
<span class="kw1">DROP</span> <span class="kw1">TABLE</span> #LOOP</pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">--Grab the table and columns that we need and store it in a temp table
SELECT IDENTITY(INT,1,1) AS id ,column_name,table_name, table_schema
INTO #LOOP
FROM information_schema.columns
WHERE column_name LIKE '%[%]%' --need to use brackets to escape %
OR column_name LIKE '%[_]%'    --need to use brackets to escape _

--set up loop variables
DECLARE @maxID INT, @loopid INT
SELECT @loopid =1  --start of loop
SELECT @maxID = MAX(id) FROM #LOOP --end of loop


--setup table and column name variables
DECLARE  @columnName VARCHAR(100)
DECLARE  @TableColumnNAme VARCHAR(100)

--loop until the end
WHILE @loopid &lt;= @maxID
BEGIN

--populate variables and take % and _ out from the column name
SELECT @TableColumnNAme = QUOTENAME(TABLE_SCHEMA) + '.' + QUOTENAME(TABLE_NAME) + '.' + QUOTENAME(COLUMN_NAME),
@columnName = REPLACE(REPLACE(COLUMN_NAME,'%',''),'_','')
FROM #LOOP WHERE id = @loopid


--rename the column
EXEC sp_rename @TableColumnNAme, @columnName, 'COLUMN';

--increment loop
SET @loopid = @loopid + 1
END

DROP TABLE #LOOP</pre></div></div>

<p>Run a simple select statement to verify that the columns have been renamed</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
</pre></td><td class="de1"><pre class="de1"><span class="kw1">SELECT</span> <span class="sy0">*</span> <span class="kw1">FROM</span> Test2</pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">SELECT * FROM Test2</pre></div></div>

<p>As you can see, there are no more underscores and percent signs in the column names.</p>
<h1>Generate a T-SQL Script</h1>
<p>Here is the other way of doing the same thing. First drop and create the tables again</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
</pre></td><td class="de1"><pre class="de1"><span class="kw1">DROP</span> <span class="kw1">TABLE</span> Test,Test2
&nbsp;
<span class="kw1">CREATE</span> <span class="kw1">TABLE</span> Test <span class="br0">&#40;</span><span class="br0">&#91;</span>col<span class="sy0">%</span>1<span class="br0">&#93;</span> <span class="kw1">VARCHAR</span><span class="br0">&#40;</span><span class="nu0">50</span><span class="br0">&#41;</span>,<span class="br0">&#91;</span>col_2<span class="br0">&#93;</span> <span class="kw1">VARCHAR</span><span class="br0">&#40;</span><span class="nu0">40</span><span class="br0">&#41;</span><span class="br0">&#41;</span>
GO
&nbsp;
<span class="kw1">CREATE</span> <span class="kw1">TABLE</span> Test2 <span class="br0">&#40;</span><span class="br0">&#91;</span>col<span class="sy0">%</span>2<span class="br0">&#93;</span> <span class="kw1">VARCHAR</span><span class="br0">&#40;</span><span class="nu0">50</span><span class="br0">&#41;</span>,<span class="br0">&#91;</span>col_3<span class="br0">&#93;</span> <span class="kw1">VARCHAR</span><span class="br0">&#40;</span><span class="nu0">40</span><span class="br0">&#41;</span>, <span class="br0">&#91;</span>Col_<span class="sy0">%</span>_<span class="sy0">%</span>4<span class="br0">&#93;</span> <span class="kw1">int</span><span class="br0">&#41;</span>
GO</pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">DROP TABLE Test,Test2

CREATE TABLE Test ([col%1] VARCHAR(50),[col_2] VARCHAR(40))
GO

CREATE TABLE Test2 ([col%2] VARCHAR(50),[col_3] VARCHAR(40), [Col_%_%4] int)
GO</pre></div></div>

<p>Now hit CTRL + T to display the output in text, run the query below</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
</pre></td><td class="de1"><pre class="de1"><span class="kw1">SELECT</span>&nbsp; &nbsp; &nbsp; <span class="st0">'EXEC sp_rename '</span><span class="st0">''</span> 
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="sy0">+</span> <span class="kw2">QUOTENAME</span><span class="br0">&#40;</span>TABLE_SCHEMA<span class="br0">&#41;</span> <span class="sy0">+</span> <span class="st0">'.'</span> 
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="sy0">+</span> <span class="kw2">QUOTENAME</span><span class="br0">&#40;</span>TABLE_NAME<span class="br0">&#41;</span> <span class="sy0">+</span> <span class="st0">'.'</span> 
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="sy0">+</span> <span class="kw2">QUOTENAME</span><span class="br0">&#40;</span>COLUMN_NAME<span class="br0">&#41;</span> <span class="sy0">+</span> <span class="st0">''</span><span class="st0">', '</span><span class="st0">''</span> 
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="sy0">+</span> <span class="kw2">REPLACE</span><span class="br0">&#40;</span><span class="kw2">REPLACE</span><span class="br0">&#40;</span>COLUMN_NAME, <span class="st0">'%'</span>, <span class="st0">''</span><span class="br0">&#41;</span>, <span class="st0">'_'</span>, <span class="st0">''</span><span class="br0">&#41;</span> <span class="sy0">+</span> <span class="st0">''</span><span class="st0">', '</span><span class="st0">'COLUMN'</span><span class="st0">' '</span> 
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="sy0">+</span> <span class="kw1">CHAR</span><span class="br0">&#40;</span><span class="nu0">13</span><span class="br0">&#41;</span> <span class="sy0">+</span> <span class="kw1">CHAR</span><span class="br0">&#40;</span><span class="nu0">10</span><span class="br0">&#41;</span> <span class="sy0">+</span> <span class="st0">'GO'</span> &nbsp;<span class="sy0">+</span> <span class="kw1">CHAR</span><span class="br0">&#40;</span><span class="nu0">13</span><span class="br0">&#41;</span> <span class="sy0">+</span> <span class="kw1">CHAR</span><span class="br0">&#40;</span><span class="nu0">10</span><span class="br0">&#41;</span> &nbsp;
<span class="kw1">FROM</span> <span class="sy0">IN</span>F<span class="sy0">OR</span>MATION_SCHEMA.<span class="me1">COLUMNS</span> 
<span class="kw1">WHERE</span> column_name <span class="sy0">LIKE</span> <span class="st0">'%[%]%'</span>
<span class="sy0">OR</span> column_name <span class="sy0">LIKE</span> <span class="st0">'%[_]%'</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">SELECT		'EXEC sp_rename ''' 
			+ QUOTENAME(TABLE_SCHEMA) + '.' 
			+ QUOTENAME(TABLE_NAME) + '.' 
			+ QUOTENAME(COLUMN_NAME) + ''', ''' 
			+ REPLACE(REPLACE(COLUMN_NAME, '%', ''), '_', '') + ''', ''COLUMN'' ' 
			+ CHAR(13) + CHAR(10) + 'GO'  + CHAR(13) + CHAR(10)  
FROM INFORMATION_SCHEMA.COLUMNS 
WHERE column_name LIKE '%[%]%'
OR column_name LIKE '%[_]%'</pre></div></div>

<p>The output from that query is the following T-SQL</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
</pre></td><td class="de1"><pre class="de1"><span class="kw1">EXEC</span> <span class="kw3">sp_rename</span> <span class="st0">'[dbo].[Test].[col%1]'</span>, <span class="st0">'col1'</span>, <span class="st0">'COLUMN'</span> 
GO
<span class="kw1">EXEC</span> <span class="kw3">sp_rename</span> <span class="st0">'[dbo].[Test2].[col%2]'</span>, <span class="st0">'col2'</span>, <span class="st0">'COLUMN'</span> 
GO
<span class="kw1">EXEC</span> <span class="kw3">sp_rename</span> <span class="st0">'[dbo].[Test2].[Col_%_%4]'</span>, <span class="st0">'Col4'</span>, <span class="st0">'COLUMN'</span> 
GO
<span class="kw1">EXEC</span> <span class="kw3">sp_rename</span> <span class="st0">'[dbo].[Test].[col_2]'</span>, <span class="st0">'col2'</span>, <span class="st0">'COLUMN'</span> 
GO
<span class="kw1">EXEC</span> <span class="kw3">sp_rename</span> <span class="st0">'[dbo].[Test2].[col_3]'</span>, <span class="st0">'col3'</span>, <span class="st0">'COLUMN'</span> 
GO</pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">EXEC sp_rename '[dbo].[Test].[col%1]', 'col1', 'COLUMN' 
GO
EXEC sp_rename '[dbo].[Test2].[col%2]', 'col2', 'COLUMN' 
GO
EXEC sp_rename '[dbo].[Test2].[Col_%_%4]', 'Col4', 'COLUMN' 
GO
EXEC sp_rename '[dbo].[Test].[col_2]', 'col2', 'COLUMN' 
GO
EXEC sp_rename '[dbo].[Test2].[col_3]', 'col3', 'COLUMN' 
GO</pre></div></div>

<p>You can run that SQL and then you can run the same query against the table to see that the columns names don&#8217;t have those unwanted characters anymore</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
</pre></td><td class="de1"><pre class="de1"><span class="kw1">select</span> <span class="sy0">*</span> <span class="kw1">from</span> Test2</pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">select * from Test2</pre></div></div>

<p>As you can see, there are no more underscores and percent signs in the column names.</p>
<p>There you have it, two ways to do the same thing. Which way do you prefer, the first or the second?</p>
<p>*** <strong>Remember, if you have a SQL related question, try our <a href="http://forum.lessthandot.com/viewforum.php?f=17">Microsoft SQL Server Programming</a> forum or our <a href="http://forum.lessthandot.com/viewforum.php?f=22">Microsoft SQL Server Admin</a> forum</strong><ins></ins></p>
]]></content:encoded>
			<wfw:commentRss>/index.php/datamgmt/datadesign/how-to-clean-a-table-from-badly-named-co/feed/</wfw:commentRss>
		<slash:comments>4</slash:comments>
		</item>
		<item>
		<title>How to refresh the local IntelliSense cache in SQL Server Management Studio</title>
		<link>/index.php/datamgmt/dbprogramming/how-to-refresh-the-local-intellisense-ca/</link>
		<comments>/index.php/datamgmt/dbprogramming/how-to-refresh-the-local-intellisense-ca/#comments</comments>
		<pubDate>Sat, 05 Jun 2010 12:12:00 +0000</pubDate>
		<dc:creator><![CDATA[SQLDenis]]></dc:creator>
				<category><![CDATA[Database Programming]]></category>
		<category><![CDATA[intellisense]]></category>
		<category><![CDATA[tip]]></category>
		<category><![CDATA[trick]]></category>

		<guid isPermaLink="false">/index.php/2010/06/how-to-refresh-the-local-intellisense-ca/</guid>
		<description><![CDATA[This question came up again yesterday in our SQL Server forum so I decided to create a short blog post about it.
The version of SQL Server Management Studio that ships with SQL Server2008 comes with IntelliSense enabled, I still think IntelliSense is s&#8230;]]></description>
				<content:encoded><![CDATA[<p>This question came up again yesterday in our<a href="http://forum.lessthandot.com/viewtopic.php?f=17&amp;t=11028"> SQL Server forum</a> so I decided to create a short blog post about it.<br />
The version of SQL Server Management Studio that ships with SQL Server2008 comes with IntelliSense enabled, I still think IntelliSense is sometimes more in my way than it is useful but I won&#8217;t bore you with that. </p>
<p>What will eventually happen is that if you create new tables and stored procedures IntelliSense  will not know about those, when this happens you have to refresh the local IntelliSense  cache for it to <em>see</em> the new objects.</p>
<p>There are two ways to do it, if you are a shortcut impaired developer then here is how you do it. Click on Edit&#8211;>IntelliSense&#8211;>Refresh Local Cache</p>
<p><img src="/wp-content/uploads/blogs/DataMgmt//Intelli2.PNG" alt=" refresh the local IntelliSense cache in SQL Server Management Studio" title=" refresh the local IntelliSense cache in SQL Server Management Studio" width="483" height="463" /></p>
<p>Or you can just hit the <strong>CTRL + SHIFT + R</strong> shortcut. Of course Query Analyzer users will remember CTRL + SHIFT + R being the shortcut to uncomment something.</p>
<p>Hopefully this will help someone  <img src="https://s.w.org/images/core/emoji/2/72x72/1f642.png" alt="🙂" class="wp-smiley" style="height: 1em; max-height: 1em;" /></p>
<p>I also created a copy of this on our wiki here: <a href="http://wiki.lessthandot.com/index.php/IntelliSense_does_not_see_new_objects_in_SQL_Server_Management_Studio">IntelliSense does not see new objects in SQL Server Management Studio</a></p>
<p>*** <strong>Remember, if you have a SQL related question, try our <a href="http://forum.lessthandot.com/viewforum.php?f=17">Microsoft SQL Server Programming</a> forum or our <a href="http://forum.lessthandot.com/viewforum.php?f=22">Microsoft SQL Server Admin</a> forum</strong><ins></ins></p>
]]></content:encoded>
			<wfw:commentRss>/index.php/datamgmt/dbprogramming/how-to-refresh-the-local-intellisense-ca/feed/</wfw:commentRss>
		<slash:comments>5</slash:comments>
		</item>
		<item>
		<title>Finding Out How Many Times A Table Is Being Used In Ad Hoc Or Procedure Calls In SQL Server 2005 And 2008</title>
		<link>/index.php/datamgmt/dbprogramming/finding-out-how-many-times-a-table-is-be-2008/</link>
		<comments>/index.php/datamgmt/dbprogramming/finding-out-how-many-times-a-table-is-be-2008/#comments</comments>
		<pubDate>Mon, 03 Aug 2009 12:15:54 +0000</pubDate>
		<dc:creator><![CDATA[SQLDenis]]></dc:creator>
				<category><![CDATA[Database Programming]]></category>
		<category><![CDATA[Microsoft SQL Server]]></category>
		<category><![CDATA[dmv]]></category>
		<category><![CDATA[dynamic management view]]></category>
		<category><![CDATA[sql server 2005]]></category>
		<category><![CDATA[sql server 2008]]></category>
		<category><![CDATA[tip]]></category>
		<category><![CDATA[trick]]></category>

		<guid isPermaLink="false">/index.php/2009/08/finding-out-how-many-times-a-table-is-be-2008/</guid>
		<description><![CDATA[This was asked on twitter the other day and I emailed the person the solution to this. The solution uses dynamic management views and it is not perfect because of a couple of reasons. 1) The dynamic management views don&#8217;t keep this information forever, restart the server and your data is gone 2) If your [&#8230;]]]></description>
				<content:encoded><![CDATA[<p>This was asked on twitter the other day and I emailed the person the solution to this. The solution uses dynamic management views and it is not perfect because of a couple of reasons.<br />
1) The dynamic management views don&#8217;t keep this information forever, restart the server and your data is gone<br />
2) If your table name is in a comment it will be picked up by this query<br />
3) If the table name is part of another object it will also be picked up, for example if you have a table name customer and a view name customers then it will return a row if customers was part of the query but you are lloking for the customer table</p>
<p>So let&#8217;s look at some code<br />
First create the following stored procedure</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
</pre></td><td class="de1"><pre class="de1"><span class="kw1">create</span> <span class="kw1">proc</span> prTestProc
<span class="kw1">as</span>
<span class="kw1">select</span> <span class="sy0">*</span> <span class="kw1">from</span> master..<span class="me1">spt_values</span> <span class="kw1">where</span> type <span class="sy0">=</span> <span class="st0">'P'</span>
go</pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">create proc prTestProc
as
select * from master..spt_values where type = 'P'
go</pre></div></div>

<p>Now run this query 5 times</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
</pre></td><td class="de1"><pre class="de1"><span class="kw1">select</span> <span class="sy0">*</span> <span class="kw1">from</span> master..<span class="me1">spt_values</span> <span class="kw1">where</span> type <span class="sy0">=</span> <span class="st0">'P'</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">select * from master..spt_values where type = 'P'</pre></div></div>

<p>Run this query 6 times</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
</pre></td><td class="de1"><pre class="de1"><span class="kw1">select</span> <span class="kw2">count</span><span class="br0">&#40;</span><span class="sy0">*</span><span class="br0">&#41;</span> <span class="kw1">from</span> master..<span class="me1">spt_values</span> <span class="kw1">where</span> type <span class="sy0">=</span> <span class="st0">'P'</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">select count(*) from master..spt_values where type = 'P'</pre></div></div>

<p>Run this query 7 times</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
</pre></td><td class="de1"><pre class="de1"><span class="kw1">select</span> <span class="kw2">count</span><span class="br0">&#40;</span><span class="sy0">*</span><span class="br0">&#41;</span> <span class="kw1">from</span> master..<span class="me1">spt_values</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">select count(*) from master..spt_values</pre></div></div>

<p>Run this query 8 times</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
</pre></td><td class="de1"><pre class="de1"><span class="kw1">select</span> <span class="kw2">count</span><span class="br0">&#40;</span><span class="sy0">*</span><span class="br0">&#41;</span> <span class="kw1">from</span> master..<span class="me1">spt_values</span> <span class="kw1">where</span> type <span class="sy0">&lt;&gt;</span> <span class="st0">'P'</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">select count(*) from master..spt_values where type &lt;&gt; 'P'</pre></div></div>

<p>Run this stored procedure 9 times</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
</pre></td><td class="de1"><pre class="de1"><span class="kw1">exec</span> prTestProc</pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">exec prTestProc</pre></div></div>

<p>Now let&#8217;s look at the output. Here is the query that returns all the queries, their execution counts, if they were ad hoc or not and their last execution time. The query works by using the sys.dm_exec_query_stats and sys.dm_exec_sql_text dynamic management views to bring back the SQL statements themselves. </p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
</pre></td><td class="de1"><pre class="de1"><span class="kw1">SELECT</span> <span class="sy0">*</span> <span class="kw1">FROM</span><span class="br0">&#40;</span><span class="kw1">SELECT</span> <span class="kw1">coalesce</span><span class="br0">&#40;</span><span class="kw2">object_name</span><span class="br0">&#40;</span>s2.<span class="me1">objectid</span><span class="br0">&#41;</span>,<span class="st0">'Ad-Hoc'</span><span class="br0">&#41;</span> <span class="kw1">as</span> ProcName,execution_count, 
&nbsp; &nbsp; <span class="br0">&#40;</span><span class="kw1">SELECT</span> <span class="kw1">TOP</span> <span class="nu0">1</span> <span class="kw2">SUBSTRING</span><span class="br0">&#40;</span>s2.<span class="kw1">text</span>,statement_start_offset <span class="sy0">/</span> <span class="nu0">2</span><span class="sy0">+</span><span class="nu0">1</span> , 
&nbsp; &nbsp; &nbsp; <span class="br0">&#40;</span> <span class="br0">&#40;</span><span class="kw1">CASE</span> <span class="kw1">WHEN</span> statement_end_offset <span class="sy0">=</span> <span class="sy0">-</span><span class="nu0">1</span> 
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span class="kw1">THEN</span> <span class="br0">&#40;</span><span class="kw2">LEN</span><span class="br0">&#40;</span><span class="kw1">CONVERT</span><span class="br0">&#40;</span><span class="kw1">nvarchar</span><span class="br0">&#40;</span><span class="kw2">max</span><span class="br0">&#41;</span>,s2.<span class="kw1">text</span><span class="br0">&#41;</span><span class="br0">&#41;</span> <span class="sy0">*</span> <span class="nu0">2</span><span class="br0">&#41;</span> 
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span class="kw1">ELSE</span> statement_end_offset <span class="kw1">END</span><span class="br0">&#41;</span> &nbsp;<span class="sy0">-</span> statement_start_offset<span class="br0">&#41;</span> <span class="sy0">/</span> <span class="nu0">2</span><span class="sy0">+</span><span class="nu0">1</span><span class="br0">&#41;</span><span class="br0">&#41;</span> &nbsp;<span class="kw1">AS</span> sql_statement,
&nbsp; &nbsp; &nbsp; &nbsp;last_execution_time
<span class="kw1">FROM</span> sys.<span class="me1">dm_exec_query_stats</span> <span class="kw1">AS</span> s1 
<span class="sy0">CROSS</span> APPLY sys.<span class="me1">dm_exec_sql_text</span><span class="br0">&#40;</span>sql_handle<span class="br0">&#41;</span> <span class="kw1">AS</span> s2 <span class="br0">&#41;</span> x
<span class="kw1">where</span> sql_statement like <span class="st0">'%spt_values%'</span>
<span class="sy0">AND</span> sql_statement <span class="sy0">NOT</span> like <span class="st0">'SELECT * FROM(SELECT coalesce(object_name(s2.objectid)%'</span>
<span class="kw1">ORDER</span> <span class="kw1">BY</span> execution_count <span class="kw1">desc</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">SELECT * FROM(SELECT coalesce(object_name(s2.objectid),'Ad-Hoc') as ProcName,execution_count, 
    (SELECT TOP 1 SUBSTRING(s2.text,statement_start_offset / 2+1 , 
      ( (CASE WHEN statement_end_offset = -1 
         THEN (LEN(CONVERT(nvarchar(max),s2.text)) * 2) 
         ELSE statement_end_offset END)  - statement_start_offset) / 2+1))  AS sql_statement,
       last_execution_time
FROM sys.dm_exec_query_stats AS s1 
CROSS APPLY sys.dm_exec_sql_text(sql_handle) AS s2 ) x
where sql_statement like '%spt_values%'
AND sql_statement NOT like 'SELECT * FROM(SELECT coalesce(object_name(s2.objectid)%'
ORDER BY execution_count desc</pre></div></div>

<p>Here is the output</p>
<pre>ProcName	execution_count	sql_statement							last_execution_time
prTestProc	9		select * from master..spt_values where type = 'P'  		2009-08-03 10:11:38.810
Ad-Hoc		8		SELECT COUNT(*) FROM [master]..[spt_values] WHERE [type]&lt;&gt;@1	2009-08-03 10:11:22.857
Ad-Hoc		7		select count(*) from master..spt_values   			2009-08-03 10:11:19.107
Ad-Hoc		6		select count(*) from master..spt_values where type = 'P'  	2009-08-03 10:11:15.760
Ad-Hoc		5		select * from master..spt_values where type = 'P'  		2009-08-03 10:11:12.280</pre>
<p>Let&#8217;s look at the query in more detail</p>
<p>This line below has the name of the table we are searching for</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
</pre></td><td class="de1"><pre class="de1"><span class="kw1">where</span> sql_statement like <span class="st0">'%spt_values%'</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">where sql_statement like '%spt_values%'</pre></div></div>

<p>The line below excludes the query that we are running itself since that is not what we want to return</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
</pre></td><td class="de1"><pre class="de1"><span class="sy0">AND</span> sql_statement <span class="sy0">NOT</span> like <span class="st0">'SELECT * FROM(SELECT COALESCE(OBJECT_NAME(s2.objectid)%'</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">AND sql_statement NOT like 'SELECT * FROM(SELECT COALESCE(OBJECT_NAME(s2.objectid)%'</pre></div></div>

<p>The line below will return Ad Hoc or the name of the object that the code was in, if s2.objectid is NULL then it was an Ad-Hoc query</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
</pre></td><td class="de1"><pre class="de1"><span class="kw1">coalesce</span><span class="br0">&#40;</span><span class="kw2">object_name</span><span class="br0">&#40;</span>s2.<span class="me1">objectid</span><span class="br0">&#41;</span>,<span class="st0">'Ad Hoc'</span><span class="br0">&#41;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">coalesce(object_name(s2.objectid),'Ad Hoc')</pre></div></div>

<p>As you can see this is probably good enough to give you some quick results to find out if a table is used so that you can drop it. The way I do this is I rename the table by prefixing it with 2 underscores, this enables two things for me<br />
1) I can quickly find the table since it will be on top in the object explorer<br />
2) I don&#8217;t have to think what the original name was, I just remove the 2 leading underscores</p>
<p>Of course you can also run a trace and then store that in a file, this enables you then to parse the file with a trace tool (more on that later this week when I will blog about a couple of free trace tools, Ami Levin just notified me about a new free trace tool so I will include that one). You could also use Extended Events to do something like this but I like this approach because it is very simple and you can all do it in T-SQL</p>
<p></p>
<p>*** <strong>If you have a SQL related question try our <a href="http://forum.lessthandot.com/viewforum.php?f=17">Microsoft SQL Server Programming</a> forum or our <a href="http://forum.lessthandot.com/viewforum.php?f=22">Microsoft SQL Server Admin</a> forum</strong><ins></ins></p>
]]></content:encoded>
			<wfw:commentRss>/index.php/datamgmt/dbprogramming/finding-out-how-many-times-a-table-is-be-2008/feed/</wfw:commentRss>
		<slash:comments>7</slash:comments>
		</item>
		<item>
		<title>Can&#8217;t depend on sp_depends? Try using sp_refreshsqlmodule</title>
		<link>/index.php/datamgmt/datadesign/can-t-depend-on-sp_depends-try-using-sp_/</link>
		<comments>/index.php/datamgmt/datadesign/can-t-depend-on-sp_depends-try-using-sp_/#respond</comments>
		<pubDate>Fri, 26 Jun 2009 14:17:48 +0000</pubDate>
		<dc:creator><![CDATA[SQLDenis]]></dc:creator>
				<category><![CDATA[Data Modelling and Design]]></category>
		<category><![CDATA[howto]]></category>
		<category><![CDATA[sql server 2008]]></category>
		<category><![CDATA[trick]]></category>

		<guid isPermaLink="false">/index.php/2009/06/can-t-depend-on-sp_depends-try-using-sp_/</guid>
		<description><![CDATA[This will not work on SQL Server 2000 since the sp_refreshsqlmodule does not exists on that version! A while back in the What is deferred name resolution and why do you need to care? blogpost I showed you that sp_depens is not reliable because you can create procedures that reference objects that have not been [&#8230;]]]></description>
				<content:encoded><![CDATA[<p>This will not work on SQL Server 2000 since the sp_refreshsqlmodule does not exists on that version!</p>
<p>A while back in the <a href="/index.php/DataMgmt/DataDesign/what-is-deferred-name-resolution-and-why">What is deferred name resolution and why do you need to care?</a> blogpost I showed you that sp_depens is not reliable because you can create procedures that reference objects that have not been created yet.</p>
<p>You can use sp_refreshsqlmodule to help &#8216;fix&#8217; that<br />
let&#8217;s take a look at how that works</p>
<p>First create this awesome stored procedure</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
</pre></td><td class="de1"><pre class="de1"><span class="kw1">create</span> <span class="kw1">procedure</span> prBla
<span class="kw1">as</span>
<span class="kw1">select</span> <span class="sy0">*</span> <span class="kw1">from</span> Blah 
go</pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">create procedure prBla
as
select * from Blah 
go</pre></div></div>

<p>Now execute sp_depends</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
</pre></td><td class="de1"><pre class="de1"><span class="kw1">exec</span> <span class="kw3">sp_depends</span> <span class="st0">'Blah'</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">exec sp_depends 'Blah'</pre></div></div>

<p>Server: Msg 15009, Level 16, State 1, Procedure sp_depends, Line 25<br />
The object &#8216;Blah&#8217; does not exist in database &#8216;tempdb&#8217; or is invalid for this operation.</p>
<p>So that tells us that the table Blah does not exist. Fine, what happens if we run sp_depends for the proc?</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
</pre></td><td class="de1"><pre class="de1"><span class="kw1">exec</span> <span class="kw3">sp_depends</span> <span class="st0">'prBla'</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">exec sp_depends 'prBla'</pre></div></div>

<p>Object does not reference any object, and no objects reference it.</p>
<p>That makes sense since the table does not exist. Let&#8217;s create this table</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
</pre></td><td class="de1"><pre class="de1"><span class="kw1">create</span> <span class="kw1">table</span> Blah
<span class="br0">&#40;</span>SomeCol <span class="kw1">int</span><span class="br0">&#41;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">create table Blah
(SomeCol int)</pre></div></div>

<p>Now run sp_depends again for the table and the project</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
</pre></td><td class="de1"><pre class="de1"><span class="kw1">exec</span> <span class="kw3">sp_depends</span> <span class="st0">'Blah'</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">exec sp_depends 'Blah'</pre></div></div>

<p>Object does not reference any object, and no objects reference it.</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
</pre></td><td class="de1"><pre class="de1"><span class="kw1">exec</span> <span class="kw3">sp_depends</span> <span class="st0">'prBla'</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">exec sp_depends 'prBla'</pre></div></div>

<p>Object does not reference any object, and no objects reference it.</p>
<p>Okay so SQL server knows that the table Blah has been created but it still does not know that it is beeing used in the proc</p>
<p>Will executing the proc change that perhaps?</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
</pre></td><td class="de1"><pre class="de1"><span class="kw1">exec</span> &nbsp;prBla</pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">exec  prBla</pre></div></div>


<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
</pre></td><td class="de1"><pre class="de1"><span class="kw1">exec</span> <span class="kw3">sp_depends</span> <span class="st0">'Blah'</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">exec sp_depends 'Blah'</pre></div></div>

<p>Object does not reference any object, and no objects reference it.</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
</pre></td><td class="de1"><pre class="de1"><span class="kw1">exec</span> <span class="kw3">sp_depends</span> <span class="st0">'prBla'</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">exec sp_depends 'prBla'</pre></div></div>

<p>Object does not reference any object, and no objects reference it.</p>
<p>Nope, no such luck, that didn&#8217;t do anything<br />
Now execute the sp_refreshsqlmodule proc</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
</pre></td><td class="de1"><pre class="de1"><span class="kw1">exec</span> sp_refreshsqlmodule <span class="st0">'prBla'</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">exec sp_refreshsqlmodule 'prBla'</pre></div></div>

<p>Execute sp_depends again</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
</pre></td><td class="de1"><pre class="de1"><span class="kw1">exec</span> <span class="kw3">sp_depends</span> <span class="st0">'Blah'</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">exec sp_depends 'Blah'</pre></div></div>

<p>In the current database, the specified object is referenced by the following:</p>
<pre>name		type
dbo.prBla	stored procedure</pre>
<p>Yep, now it is showing us that table Blah is used by the stored proc prBla<br />
Will it work when we run sp_depends for the stored procedure?</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
</pre></td><td class="de1"><pre class="de1"><span class="kw1">exec</span> <span class="kw3">sp_depends</span> <span class="st0">'prBla'</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">exec sp_depends 'prBla'</pre></div></div>

<p>In the current database, the specified object references the following:</p>
<pre>name		type		updated	selected	column
dbo.Blah	user table	no	yes		SomeCol</pre>
<p>And as you can see it also shows that the table is used..like Borat would say &#8220;Very Nice&#8221;</p>
<p>Clean up by dropping these sample objects</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
</pre></td><td class="de1"><pre class="de1"><span class="kw1">drop</span> <span class="kw1">table</span> Blah
go
<span class="kw1">drop</span> <span class="kw1">procedure</span> prBla
go</pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">drop table Blah
go
drop procedure prBla
go</pre></div></div>

<p></p>
<p>*** <strong>If you have a SQL related question try our <a href="http://forum.lessthandot.com/viewforum.php?f=17">Microsoft SQL Server Programming</a> forum or our <a href="http://forum.lessthandot.com/viewforum.php?f=22">Microsoft SQL Server Admin</a> forum</strong><ins></ins></p>
]]></content:encoded>
			<wfw:commentRss>/index.php/datamgmt/datadesign/can-t-depend-on-sp_depends-try-using-sp_/feed/</wfw:commentRss>
		<slash:comments>0</slash:comments>
		</item>
		<item>
		<title>How To Name Default Constraints And How To Drop Default Constraint Without A Name In SQL Server</title>
		<link>/index.php/datamgmt/dbprogramming/how-to-name-default-constraints-and-how/</link>
		<comments>/index.php/datamgmt/dbprogramming/how-to-name-default-constraints-and-how/#comments</comments>
		<pubDate>Wed, 18 Feb 2009 15:14:30 +0000</pubDate>
		<dc:creator><![CDATA[SQLDenis]]></dc:creator>
				<category><![CDATA[Database Programming]]></category>
		<category><![CDATA[Microsoft SQL Server]]></category>
		<category><![CDATA[best practice]]></category>
		<category><![CDATA[pitfall]]></category>
		<category><![CDATA[sql server 2000]]></category>
		<category><![CDATA[sql server 2005]]></category>
		<category><![CDATA[sql server 2008]]></category>
		<category><![CDATA[tip]]></category>
		<category><![CDATA[trick]]></category>

		<guid isPermaLink="false">/index.php/2009/02/how-to-name-default-constraints-and-how/</guid>
		<description><![CDATA[Take a look at this code

create table Foo2(id int,
id2 int constraint DefaultID2 default 1)

As you can see it is a simple table with 2 columns, the second column has a constraint on it named DefaultID2.
We can verify that the table has a default&#8230;]]></description>
				<content:encoded><![CDATA[<p>Take a look at this code</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
</pre></td><td class="de1"><pre class="de1"><span class="kw1">create</span> <span class="kw1">table</span> Foo2<span class="br0">&#40;</span>id <span class="kw1">int</span>,
id2 <span class="kw1">int</span> <span class="kw1">constraint</span> DefaultID2 <span class="kw1">default</span> <span class="nu0">1</span><span class="br0">&#41;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">create table Foo2(id int,
id2 int constraint DefaultID2 default 1)</pre></div></div>

<p>As you can see it is a simple table with 2 columns, the second column has a constraint on it named DefaultID2.<br />
We can verify that the table has a default on that column by writing something like this</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
</pre></td><td class="de1"><pre class="de1"><span class="kw1">select</span> column_default 
<span class="kw1">from</span> information_schema.<span class="me1">columns</span> 
<span class="kw1">where</span> table_name <span class="sy0">=</span> <span class="st0">'Foo2'</span> 
and column_name <span class="sy0">=</span> <span class="st0">'id2'</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">select column_default 
from information_schema.columns 
where table_name = 'Foo2' 
and column_name = 'id2'</pre></div></div>

<p>this is the output<br />
((1))</p>
<p>How can you get the default name?<br />
On version 7 and up run this</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
</pre></td><td class="de1"><pre class="de1"><span class="kw1">select</span> s.<span class="me1">name</span> <span class="co1">--default name</span>
<span class="kw1">from</span> sysobjects s 
join syscolumns c <span class="kw1">on</span> s.<span class="me1">parent_obj</span> <span class="sy0">=</span> c.<span class="me1">id</span>
<span class="kw1">where</span> s.<span class="me1">xtype</span> <span class="sy0">=</span> <span class="st0">'d'</span>
and c.<span class="me1">cdefault</span> <span class="sy0">=</span> s.<span class="me1">id</span>
and parent_obj<span class="sy0">=</span> <span class="kw2">object_id</span><span class="br0">&#40;</span><span class="st0">'Foo2'</span><span class="br0">&#41;</span>
and c.<span class="me1">name</span> <span class="sy0">=</span><span class="st0">'id2'</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">select s.name --default name
from sysobjects s 
join syscolumns c on s.parent_obj = c.id
where s.xtype = 'd'
and c.cdefault = s.id
and parent_obj= object_id('Foo2')
and c.name ='id2'</pre></div></div>

<p>On 2005 and up run this(the previous code also runs on SQL Server 2005 and SQL Server 2008)</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
</pre></td><td class="de1"><pre class="de1"><span class="kw1">select</span> s.<span class="me1">name</span> <span class="co1">--default name</span>
<span class="kw1">from</span> sys.<span class="me1">sysobjects</span> s 
join sys.<span class="me1">syscolumns</span> c <span class="kw1">on</span> s.<span class="me1">parent_obj</span> <span class="sy0">=</span> c.<span class="me1">id</span>
<span class="kw1">where</span> s.<span class="me1">xtype</span> <span class="sy0">=</span> <span class="st0">'d'</span>
and c.<span class="me1">cdefault</span> <span class="sy0">=</span> s.<span class="me1">id</span>
and parent_obj<span class="sy0">=</span> <span class="kw2">object_id</span><span class="br0">&#40;</span><span class="st0">'Foo2'</span><span class="br0">&#41;</span>
and c.<span class="me1">name</span> <span class="sy0">=</span><span class="st0">'id2'</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">select s.name --default name
from sys.sysobjects s 
join sys.syscolumns c on s.parent_obj = c.id
where s.xtype = 'd'
and c.cdefault = s.id
and parent_obj= object_id('Foo2')
and c.name ='id2'</pre></div></div>

<p>How do you drop such a constraint? Very easy you do this</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
</pre></td><td class="de1"><pre class="de1"><span class="kw1">ALTER</span> <span class="kw1">table</span> foo2 <span class="kw1">drop</span> DefaultID2</pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">ALTER table foo2 drop DefaultID2</pre></div></div>

<p>Now we will create a table with two default constraints and both of them will be created without a name when running the create table DDL</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
</pre></td><td class="de1"><pre class="de1"><span class="kw1">create</span> <span class="kw1">table</span> Foo<span class="br0">&#40;</span>id <span class="kw1">int</span> <span class="kw1">default</span> <span class="nu0">0</span>,
id2 <span class="kw1">int</span> <span class="kw1">default</span> <span class="nu0">1</span><span class="br0">&#41;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">create table Foo(id int default 0,
id2 int default 1)</pre></div></div>

<p>Now let&#8217;s see if the default is created</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
</pre></td><td class="de1"><pre class="de1"><span class="kw1">select</span> column_default 
<span class="kw1">from</span> information_schema.<span class="me1">columns</span> 
<span class="kw1">where</span> table_name <span class="sy0">=</span> <span class="st0">'Foo'</span> 
and column_name <span class="sy0">=</span> <span class="st0">'id2'</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">select column_default 
from information_schema.columns 
where table_name = 'Foo' 
and column_name = 'id2'</pre></div></div>

<p>This still returns this output<br />
((1))</p>
<p>All fine, now how can we drop the default for the id2 column on the Foo table?</p>
<p>Running this code</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
</pre></td><td class="de1"><pre class="de1"><span class="kw1">select</span> s.<span class="me1">name</span> <span class="co1">--default name</span>
<span class="kw1">from</span> sys.<span class="me1">sysobjects</span> s 
join sys.<span class="me1">syscolumns</span> c <span class="kw1">on</span> s.<span class="me1">parent_obj</span> <span class="sy0">=</span> c.<span class="me1">id</span>
<span class="kw1">where</span> s.<span class="me1">xtype</span> <span class="sy0">=</span> <span class="st0">'d'</span>
and c.<span class="me1">cdefault</span> <span class="sy0">=</span> s.<span class="me1">id</span>
and parent_obj<span class="sy0">=</span> <span class="kw2">object_id</span><span class="br0">&#40;</span><span class="st0">'Foo'</span><span class="br0">&#41;</span>
and c.<span class="me1">name</span> <span class="sy0">=</span><span class="st0">'id2'</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">select s.name --default name
from sys.sysobjects s 
join sys.syscolumns c on s.parent_obj = c.id
where s.xtype = 'd'
and c.cdefault = s.id
and parent_obj= object_id('Foo')
and c.name ='id2'</pre></div></div>

<p>Will give use the default name, in this case it is DF__Foo__id2__7D439ABD<br />
So now we can drop the default by doing this</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
</pre></td><td class="de1"><pre class="de1"><span class="kw1">ALTER</span> <span class="kw1">table</span> foo2 <span class="kw1">drop</span> DF__Foo__id2__7D439ABD</pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">ALTER table foo2 drop DF__Foo__id2__7D439ABD</pre></div></div>

<p>So what is the big deal you say?<br />
Let&#8217;s  say you do this on a staging box and want to create a script to hand over to someone else who will run it on the production box<br />
If you create you script on the staging box and the person runs it on production he will see something like this</p>
<p>erver: Msg 3733, Level 16, State 2, Line 1<br />
Constraint &#8216;DF__Foo__id2__7D439ABD&#8217; does not belong to table &#8216;foo2&#8217;.<br />
Server: Msg 3727, Level 16, State 1, Line 1<br />
Could not drop constraint. See previous errors.</p>
<p>Then you will get a call that your script is broken, you will tell him that it works on staging. In the end you will have to do something like this so that it can run on any server as long as the table and column name are the same</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
</pre></td><td class="de1"><pre class="de1"><span class="kw1">declare</span> @<span class="kw1">default</span> sysname
<span class="kw1">declare</span> @tableName sysname
<span class="kw1">declare</span> @columnname sysname
&nbsp;
<span class="kw1">select</span> @tableName &nbsp;<span class="sy0">=</span> <span class="st0">'Foo'</span> <span class="co1">--table name</span>
<span class="kw1">select</span> @columnname <span class="sy0">=</span> <span class="st0">'id2'</span> <span class="co1">--column name</span>
&nbsp;
<span class="co1">--check for SQL Server Version</span>
<span class="kw1">if</span> <span class="kw1">coalesce</span><span class="br0">&#40;</span><span class="kw2">parsename</span><span class="br0">&#40;</span><span class="kw1">convert</span><span class="br0">&#40;</span><span class="kw1">varchar</span><span class="br0">&#40;</span><span class="nu0">50</span><span class="br0">&#41;</span>,<span class="kw2">SERVERPROPERTY</span> <span class="br0">&#40;</span> <span class="st0">'ProductVersion'</span> <span class="br0">&#41;</span><span class="br0">&#41;</span>,<span class="nu0">4</span><span class="br0">&#41;</span>,
&nbsp; &nbsp; <span class="kw2">parsename</span><span class="br0">&#40;</span><span class="kw1">convert</span><span class="br0">&#40;</span><span class="kw1">varchar</span><span class="br0">&#40;</span><span class="nu0">50</span><span class="br0">&#41;</span>,<span class="kw2">SERVERPROPERTY</span> <span class="br0">&#40;</span> <span class="st0">'ProductVersion'</span> <span class="br0">&#41;</span><span class="br0">&#41;</span>,<span class="nu0">3</span><span class="br0">&#41;</span><span class="br0">&#41;</span> <span class="sy0">&gt;</span> <span class="nu0">8</span>
&nbsp;
&nbsp; &nbsp; <span class="kw1">select</span> @<span class="kw1">default</span><span class="sy0">=</span> s.<span class="me1">name</span> <span class="co1">--default name</span>
&nbsp; &nbsp; <span class="kw1">from</span> sysobjects s 
&nbsp; &nbsp; join syscolumns c <span class="kw1">on</span> s.<span class="me1">parent_obj</span> <span class="sy0">=</span> c.<span class="me1">id</span>
&nbsp; &nbsp; <span class="kw1">where</span> s.<span class="me1">xtype</span> <span class="sy0">=</span> <span class="st0">'d'</span>
&nbsp; &nbsp; and c.<span class="me1">cdefault</span> <span class="sy0">=</span> s.<span class="me1">id</span>
&nbsp; &nbsp; and parent_obj<span class="sy0">=</span> <span class="kw2">object_id</span><span class="br0">&#40;</span>@tableName<span class="br0">&#41;</span>
&nbsp; &nbsp; and c.<span class="me1">name</span> <span class="sy0">=</span>@columnname
&nbsp;
<span class="kw1">else</span>
&nbsp;
&nbsp; &nbsp; <span class="kw1">select</span> @<span class="kw1">default</span><span class="sy0">=</span> s.<span class="me1">name</span> <span class="co1">--default name</span>
&nbsp; &nbsp; <span class="kw1">from</span> sys.<span class="me1">sysobjects</span> s 
&nbsp; &nbsp; join sys.<span class="me1">syscolumns</span> c <span class="kw1">on</span> s.<span class="me1">parent_obj</span> <span class="sy0">=</span> c.<span class="me1">id</span>
&nbsp; &nbsp; <span class="kw1">where</span> s.<span class="me1">xtype</span> <span class="sy0">=</span> <span class="st0">'d'</span>
&nbsp; &nbsp; and c.<span class="me1">cdefault</span> <span class="sy0">=</span> s.<span class="me1">id</span>
&nbsp; &nbsp; and parent_obj<span class="sy0">=</span> <span class="kw2">object_id</span><span class="br0">&#40;</span>@tableName<span class="br0">&#41;</span>
&nbsp; &nbsp; and c.<span class="me1">name</span> <span class="sy0">=</span>@columnname
&nbsp;
&nbsp;
&nbsp;
<span class="co1">--test first</span>
<span class="kw1">print</span><span class="br0">&#40;</span> <span class="st0">'alter table '</span> <span class="sy0">+</span> @tableName <span class="sy0">+</span><span class="st0">' drop &nbsp;'</span> <span class="sy0">+</span> @<span class="kw1">default</span> <span class="br0">&#41;</span>
<span class="co1">--exec ( 'alter table ' + @tableName +' drop &nbsp;' + @default )</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">declare @default sysname
declare @tableName sysname
declare @columnname sysname

select @tableName  = 'Foo' --table name
select @columnname = 'id2' --column name

--check for SQL Server Version
if coalesce(parsename(convert(varchar(50),SERVERPROPERTY ( 'ProductVersion' )),4),
	parsename(convert(varchar(50),SERVERPROPERTY ( 'ProductVersion' )),3)) &gt; 8

	select @default= s.name --default name
	from sysobjects s 
	join syscolumns c on s.parent_obj = c.id
	where s.xtype = 'd'
	and c.cdefault = s.id
	and parent_obj= object_id(@tableName)
	and c.name =@columnname

else

	select @default= s.name --default name
	from sys.sysobjects s 
	join sys.syscolumns c on s.parent_obj = c.id
	where s.xtype = 'd'
	and c.cdefault = s.id
	and parent_obj= object_id(@tableName)
	and c.name =@columnname



--test first
print( 'alter table ' + @tableName +' drop  ' + @default )
--exec ( 'alter table ' + @tableName +' drop  ' + @default )</pre></div></div>

<p>I commented out the exec and put print instead so that you can see what would get executed</p>
<p>A best practice is always to name your constraint because it will save you a lot of headaches down the road</p>
<p></p>
<p>*** <strong>If you have a SQL related question try our <a href="http://forum.lessthandot.com/viewforum.php?f=17">Microsoft SQL Server Programming</a> forum or our <a href="http://forum.lessthandot.com/viewforum.php?f=22">Microsoft SQL Server Admin</a> forum</strong><ins></ins></p>
]]></content:encoded>
			<wfw:commentRss>/index.php/datamgmt/dbprogramming/how-to-name-default-constraints-and-how/feed/</wfw:commentRss>
		<slash:comments>3</slash:comments>
		</item>
		<item>
		<title>Suppress string or binary data would be truncated messages with the ANSI WARNINGS setting</title>
		<link>/index.php/datamgmt/dbprogramming/mssqlserver/surpress-string-or-binary-data-would-be/</link>
		<comments>/index.php/datamgmt/dbprogramming/mssqlserver/surpress-string-or-binary-data-would-be/#comments</comments>
		<pubDate>Mon, 09 Feb 2009 15:13:45 +0000</pubDate>
		<dc:creator><![CDATA[SQLDenis]]></dc:creator>
				<category><![CDATA[Microsoft SQL Server]]></category>
		<category><![CDATA[sql server 2000]]></category>
		<category><![CDATA[sql server 2005]]></category>
		<category><![CDATA[sql server 2008]]></category>
		<category><![CDATA[tip]]></category>
		<category><![CDATA[trick]]></category>

		<guid isPermaLink="false">/index.php/2009/02/surpress-string-or-binary-data-would-be/</guid>
		<description><![CDATA[String or binary data would be truncated. How can I suppress that message? This is a frequent enough question on various forums, I answered this one also today and decided to create a quick blog post about this. Run this code T-SQL1 2 3 4 create table bla&#40;id varchar&#40;2&#41;&#41; go &#160; insert bla values &#40;'123'&#41; [&#8230;]]]></description>
				<content:encoded><![CDATA[<p>String or binary data would be truncated. How can I suppress that message?</p>
<p>This is a frequent enough question on various forums, I answered this one also today and decided to create a quick blog post about this.</p>
<p>Run this code</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
</pre></td><td class="de1"><pre class="de1"><span class="kw1">create</span> <span class="kw1">table</span> bla<span class="br0">&#40;</span>id <span class="kw1">varchar</span><span class="br0">&#40;</span><span class="nu0">2</span><span class="br0">&#41;</span><span class="br0">&#41;</span>
go
&nbsp;
<span class="kw1">insert</span> bla <span class="kw1">values</span> <span class="br0">&#40;</span><span class="st0">'123'</span><span class="br0">&#41;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">create table bla(id varchar(2))
go

insert bla values ('123')</pre></div></div>

<p>You will get the following message:<br />
Server: Msg 8152, Level 16, State 14, Line 1<br />
String or binary data would be truncated.<br />
The statement has been terminated.</p>
<p>But what if you don&#8217;t care about if data is truncated, what if you want to store only what fits? You could do something like this</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
</pre></td><td class="de1"><pre class="de1"><span class="kw1">insert</span> bla <span class="kw1">values</span> <span class="br0">&#40;</span><span class="kw1">left</span><span class="br0">&#40;</span><span class="st0">'123'</span>,<span class="nu0">2</span><span class="br0">&#41;</span><span class="br0">&#41;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">insert bla values (left('123',2))</pre></div></div>

<p>But since most programmers are lazy they prefer not to change code (and introduce bugs)</p>
<p>Here is one way to do it without changing code but by setting ANSI Warnings to off</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
</pre></td><td class="de1"><pre class="de1"><span class="kw1">SET</span> ANSI_WARN<span class="sy0">IN</span>GS &nbsp;<span class="kw1">OFF</span>
&nbsp;
<span class="kw1">insert</span> bla <span class="kw1">values</span> <span class="br0">&#40;</span><span class="st0">'123'</span><span class="br0">&#41;</span>
&nbsp;
<span class="kw1">SET</span> ANSI_WARN<span class="sy0">IN</span>GS &nbsp;<span class="kw1">ON</span> <span class="co1">--set it back on so code following this won't be messed up</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">SET ANSI_WARNINGS  OFF

insert bla values ('123')

SET ANSI_WARNINGS  ON --set it back on so code following this won't be messed up</pre></div></div>

<p>Now I am not saying that you should do this because setting ANSI warning off also does this: When ON, divide-by-zero and arithmetic overflow errors cause the statement to be rolled back and an error message is generated. When OFF, divide-by-zero and arithmetic overflow errors cause null values to be returned</p>
<p>Lookup <a href="http://msdn.microsoft.com/en-us/library/ms190368.aspx">SET ANSI_WARNINGS</a> in BOL before setting it to off and messing up some other code.</p>
]]></content:encoded>
			<wfw:commentRss>/index.php/datamgmt/dbprogramming/mssqlserver/surpress-string-or-binary-data-would-be/feed/</wfw:commentRss>
		<slash:comments>10</slash:comments>
		</item>
		<item>
		<title>how to make sure that the view will have the underlying table changes by using sp_refreshview</title>
		<link>/index.php/datamgmt/datadesign/how-to-make-sure-that-the-view-will-have/</link>
		<comments>/index.php/datamgmt/datadesign/how-to-make-sure-that-the-view-will-have/#comments</comments>
		<pubDate>Wed, 28 Jan 2009 14:32:44 +0000</pubDate>
		<dc:creator><![CDATA[SQLDenis]]></dc:creator>
				<category><![CDATA[Data Modelling and Design]]></category>
		<category><![CDATA[how to]]></category>
		<category><![CDATA[sql server 2000]]></category>
		<category><![CDATA[sql server 2005]]></category>
		<category><![CDATA[sql server 2008]]></category>
		<category><![CDATA[tip]]></category>
		<category><![CDATA[trick]]></category>
		<category><![CDATA[views]]></category>

		<guid isPermaLink="false">/index.php/2009/01/how-to-make-sure-that-the-view-will-have/</guid>
		<description><![CDATA[sp_refreshview or how to make sure that the view will have the underlying table changes Got a question about this on our Microsoft SQL Server Programming Forum so you know it is time for a quick blog post. Did you know that when you create a view and then later change the table the view [&#8230;]]]></description>
				<content:encoded><![CDATA[<p><strong>sp_refreshview or how to make sure that the view will have the underlying table changes</strong></p>
<p>Got a question about this on our <a href="http://forum.lessthandot.com/viewforum.php?f=17">Microsoft SQL Server Programming Forum</a> so you know it is time for a quick blog post.</p>
<p>Did you know that when you create a view and then later change the table the view is not updated?<br />
let me show you what I mean.<br />
Run the following block of code</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
</pre></td><td class="de1"><pre class="de1"><span class="kw1">CREATE</span> <span class="kw1">TABLE</span> TestTable <span class="br0">&#40;</span>id <span class="kw1">INT</span>,SomeCol <span class="kw1">VARCHAR</span><span class="br0">&#40;</span><span class="nu0">666</span><span class="br0">&#41;</span><span class="br0">&#41;</span>
GO
&nbsp;
<span class="kw1">INSERT</span> TestTable <span class="kw1">VALUES</span><span class="br0">&#40;</span><span class="nu0">1</span>,<span class="st0">'ABC'</span><span class="br0">&#41;</span>
GO
&nbsp;
<span class="kw1">SELECT</span> <span class="sy0">*</span> <span class="kw1">FROM</span> TestTable
GO
&nbsp;
<span class="kw1">CREATE</span> <span class="kw1">VIEW</span> TestView
<span class="kw1">AS</span>
<span class="kw1">SELECT</span> <span class="sy0">*</span> <span class="kw1">FROM</span> TestTable
GO
&nbsp;
<span class="kw1">SELECT</span> <span class="sy0">*</span> <span class="kw1">FROM</span> TestView
GO</pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">CREATE TABLE TestTable (id INT,SomeCol VARCHAR(666))
GO

INSERT TestTable VALUES(1,'ABC')
GO

SELECT * FROM TestTable
GO

CREATE VIEW TestView
AS
SELECT * FROM TestTable
GO

SELECT * FROM TestView
GO</pre></div></div>

<p>Now we will change that table by adding another column</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
</pre></td><td class="de1"><pre class="de1"><span class="kw1">ALTER</span> <span class="kw1">TABLE</span> TestTable
<span class="kw1">ADD</span> Col2 <span class="kw1">DATETIME</span> <span class="kw1">DEFAULT</span> <span class="kw1">CURRENT_TIMESTAMP</span>
GO
&nbsp;
<span class="kw1">INSERT</span> TestTable<span class="br0">&#40;</span>id,SomeCol<span class="br0">&#41;</span> <span class="kw1">VALUES</span><span class="br0">&#40;</span><span class="nu0">2</span>,<span class="st0">'XYZ'</span><span class="br0">&#41;</span>
GO</pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">ALTER TABLE TestTable
ADD Col2 DATETIME DEFAULT CURRENT_TIMESTAMP
GO

INSERT TestTable(id,SomeCol) VALUES(2,'XYZ')
GO</pre></div></div>

<p>Now run the selects again</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
</pre></td><td class="de1"><pre class="de1"><span class="kw1">SELECT</span> <span class="sy0">*</span> <span class="kw1">FROM</span> TestTable
GO
&nbsp;
<span class="kw1">SELECT</span> <span class="sy0">*</span> <span class="kw1">FROM</span> TestView
GO</pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">SELECT * FROM TestTable
GO

SELECT * FROM TestView
GO</pre></div></div>

<p>See what happened? The TestView does not include the Col2 column. So what can you do? There are at least two things that you can do. You can recreate the view with a create or alter statement or you can use sp_refreshview, run the code below to see how that works</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
</pre></td><td class="de1"><pre class="de1"><span class="kw3">sp_refreshview</span> TestView
GO
&nbsp;
<span class="co1">--All good now</span>
<span class="kw1">SELECT</span> <span class="sy0">*</span> <span class="kw1">FROM</span> TestView
GO
&nbsp;
&nbsp;
<span class="co1">--Clean up this mess--</span>
<span class="kw1">DROP</span> <span class="kw1">VIEW</span> TestView
GO
&nbsp;
&nbsp;
<span class="kw1">DROP</span> <span class="kw1">TABLE</span> TestTable
GO</pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">sp_refreshview TestView
GO

--All good now
SELECT * FROM TestView
GO


--Clean up this mess--
DROP VIEW TestView
GO


DROP TABLE TestTable
GO</pre></div></div>

<p>And yes I know &#8216;real&#8217; SQL programmers never use SELECT * and &#8216;real&#8217; SQL programmers name their defaults <img src="https://s.w.org/images/core/emoji/2/72x72/1f609.png" alt="😉" class="wp-smiley" style="height: 1em; max-height: 1em;" /></p>
<p></p>
<p>*** <strong>If you have a SQL related question try our <a href="http://forum.lessthandot.com/viewforum.php?f=17">Microsoft SQL Server Programming</a> forum or our <a href="http://forum.lessthandot.com/viewforum.php?f=22">Microsoft SQL Server Admin</a> forum</strong><ins></ins></p>
]]></content:encoded>
			<wfw:commentRss>/index.php/datamgmt/datadesign/how-to-make-sure-that-the-view-will-have/feed/</wfw:commentRss>
		<slash:comments>4</slash:comments>
		</item>
		<item>
		<title>What is deferred name resolution and why do you need to care?</title>
		<link>/index.php/datamgmt/datadesign/what-is-deferred-name-resolution-and-why/</link>
		<comments>/index.php/datamgmt/datadesign/what-is-deferred-name-resolution-and-why/#comments</comments>
		<pubDate>Mon, 08 Sep 2008 12:23:59 +0000</pubDate>
		<dc:creator><![CDATA[SQLDenis]]></dc:creator>
				<category><![CDATA[Data Modelling and Design]]></category>
		<category><![CDATA[gotcha]]></category>
		<category><![CDATA[howto]]></category>
		<category><![CDATA[sql server]]></category>
		<category><![CDATA[t-sql]]></category>
		<category><![CDATA[tip]]></category>
		<category><![CDATA[trick]]></category>

		<guid isPermaLink="false">/index.php/2008/09/what-is-deferred-name-resolution-and-why/</guid>
		<description><![CDATA[So I posted a teaser in the puzzles forum. Without running this, try to guess what will happen? T-SQL1 2 3 4 5 6 7 8 9 10 11 12 13 14 DECLARE @x INT &#160; SET @x = 1 &#160; IF &#40;@x = 0&#41; BEGIN &#160; &#160; SELECT 1 AS VALUE INTO #temptable END [&#8230;]]]></description>
				<content:encoded><![CDATA[<p>So I posted <a href="http://forum.lessthandot.com/viewtopic.php?f=102&amp;t=2829">a teaser in the puzzles forum</a>. Without running this, try to guess what will happen?</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
</pre></td><td class="de1"><pre class="de1"><span class="kw1">DECLARE</span> @x <span class="kw1">INT</span>
&nbsp;
<span class="kw1">SET</span> @x <span class="sy0">=</span> <span class="nu0">1</span>
&nbsp;
<span class="kw1">IF</span> <span class="br0">&#40;</span>@x <span class="sy0">=</span> <span class="nu0">0</span><span class="br0">&#41;</span>
<span class="kw1">BEGIN</span>
&nbsp; &nbsp; <span class="kw1">SELECT</span> <span class="nu0">1</span> <span class="kw1">AS</span> <span class="kw1">VALUE</span> <span class="kw1">INTO</span> #temptable
<span class="kw1">END</span>
<span class="kw1">ELSE</span>
<span class="kw1">BEGIN</span>
&nbsp; &nbsp;<span class="kw1">SELECT</span> <span class="nu0">2</span> <span class="kw1">AS</span> <span class="kw1">VALUE</span> <span class="kw1">INTO</span> #temptable
<span class="kw1">END</span>
&nbsp;
<span class="kw1">SELECT</span> <span class="sy0">*</span> <span class="kw1">FROM</span> #temptable <span class="co1">--what does this return</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">DECLARE @x INT
 
SET @x = 1
 
IF (@x = 0)
BEGIN
    SELECT 1 AS VALUE INTO #temptable
END
ELSE
BEGIN
   SELECT 2 AS VALUE INTO #temptable
END
 
SELECT * FROM #temptable --what does this return</pre></div></div>

<p>This is the error you get<br />
Server: Msg 2714, Level 16, State 1, Line 12<br />
There is already an object named &#8216;#temptable&#8217; in the database.</p>
<p>You can do something like this to get around the issue with the temp table</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
</pre></td><td class="de1"><pre class="de1"><span class="kw1">DECLARE</span> @x <span class="kw1">INT</span>
&nbsp;
<span class="kw1">SET</span> @x <span class="sy0">=</span> <span class="nu0">1</span>
&nbsp;
<span class="kw1">CREATE</span> <span class="kw1">TABLE</span> #temptable <span class="br0">&#40;</span><span class="kw1">VALUE</span> <span class="kw1">int</span><span class="br0">&#41;</span>
<span class="kw1">IF</span> <span class="br0">&#40;</span>@x <span class="sy0">=</span> <span class="nu0">0</span><span class="br0">&#41;</span>
<span class="kw1">BEGIN</span>
&nbsp; &nbsp; <span class="kw1">INSERT</span> #temptable
&nbsp; &nbsp; <span class="kw1">SELECT</span> <span class="nu0">1</span> 
<span class="kw1">END</span>
<span class="kw1">ELSE</span>
<span class="kw1">BEGIN</span>
&nbsp; &nbsp; <span class="kw1">INSERT</span> #temptable
&nbsp; &nbsp; <span class="kw1">SELECT</span> <span class="nu0">2</span>
<span class="kw1">END</span>
&nbsp;
<span class="kw1">SELECT</span> <span class="sy0">*</span> <span class="kw1">FROM</span> #temptable <span class="co1">--what does this return</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">DECLARE @x INT
 
SET @x = 1
 
CREATE TABLE #temptable (VALUE int)
IF (@x = 0)
BEGIN
    INSERT #temptable
    SELECT 1 
END
ELSE
BEGIN
    INSERT #temptable
    SELECT 2
END
 
SELECT * FROM #temptable --what does this return</pre></div></div>

<p>So what is thing called Deferred Name Resolution? Here is what is explained in Books On Line</p>
<blockquote><p>When a stored procedure is created, the statements in the procedure are parsed for syntactical accuracy. If a syntactical error is encountered in the procedure definition, an error is returned and the stored procedure is not created. If the statements are syntactically correct, the text of the stored procedure is stored in the syscomments system table.</p>
<p>When a stored procedure is executed for the first time, the query processor reads the text of the stored procedure from the syscomments system table of the procedure and checks that the names of the objects used by the procedure are present. This process is called deferred name resolution because objects referenced by the stored procedure need not exist when the stored procedure is created, but only when it is executed.</p>
<p>In the resolution stage, Microsoft SQL Server 2000 also performs other validation activities (for example, checking the compatibility of a column data type with variables). If the objects referenced by the stored procedure are missing when the stored procedure is executed, the stored procedure stops executing when it gets to the statement that references the missing object. In this case, or if other errors are found in the resolution stage, an error is returned.</p></blockquote>
<p>So what is happening is that beginning with SQL server 7 deferred name resolution was enabled for real tables but not for temporary tables. If you change the code to use a real table instead of a temporary table you won&#8217;t have any problem<br />
Run this to see what I mean</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
</pre></td><td class="de1"><pre class="de1"><span class="kw1">DECLARE</span> @x <span class="kw1">INT</span>
&nbsp;
<span class="kw1">SET</span> @x <span class="sy0">=</span> <span class="nu0">1</span>
&nbsp;
<span class="kw1">IF</span> <span class="br0">&#40;</span>@x <span class="sy0">=</span> <span class="nu0">0</span><span class="br0">&#41;</span>
<span class="kw1">BEGIN</span>
&nbsp; &nbsp; <span class="kw1">SELECT</span> <span class="nu0">1</span> <span class="kw1">AS</span> <span class="kw1">VALUE</span> <span class="kw1">INTO</span> temptable
<span class="kw1">END</span>
<span class="kw1">ELSE</span>
<span class="kw1">BEGIN</span>
&nbsp; &nbsp;<span class="kw1">SELECT</span> <span class="nu0">2</span> <span class="kw1">AS</span> <span class="kw1">VALUE</span> <span class="kw1">INTO</span> temptable
<span class="kw1">END</span>
&nbsp;
<span class="kw1">SELECT</span> <span class="sy0">*</span> <span class="kw1">FROM</span> temptable <span class="co1">--what does this return</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">DECLARE @x INT
 
SET @x = 1
 
IF (@x = 0)
BEGIN
    SELECT 1 AS VALUE INTO temptable
END
ELSE
BEGIN
   SELECT 2 AS VALUE INTO temptable
END
 
SELECT * FROM temptable --what does this return</pre></div></div>

<p>What about variables? Let&#8217;s try it out, run this</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
</pre></td><td class="de1"><pre class="de1"><span class="kw1">DECLARE</span> @x <span class="kw1">INT</span>
&nbsp;
<span class="kw1">SET</span> @x <span class="sy0">=</span> <span class="nu0">1</span>
&nbsp;
<span class="kw1">IF</span> <span class="br0">&#40;</span>@x <span class="sy0">=</span> <span class="nu0">0</span><span class="br0">&#41;</span>
<span class="kw1">BEGIN</span>
&nbsp; &nbsp; <span class="kw1">DECLARE</span> @i <span class="kw1">INT</span>
&nbsp; &nbsp; <span class="kw1">SELECT</span> @i <span class="sy0">=</span> <span class="nu0">5</span>
<span class="kw1">END</span>
<span class="kw1">ELSE</span>
<span class="kw1">BEGIN</span>
&nbsp; &nbsp;<span class="kw1">DECLARE</span> @i <span class="kw1">INT</span>
&nbsp; &nbsp;<span class="kw1">SELECT</span> @i <span class="sy0">=</span> <span class="nu0">6</span>
<span class="kw1">END</span>
&nbsp;
<span class="kw1">SELECT</span> @i</pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">DECLARE @x INT
 
SET @x = 1
 
IF (@x = 0)
BEGIN
    DECLARE @i INT
    SELECT @i = 5
END
ELSE
BEGIN
   DECLARE @i INT
   SELECT @i = 6
END
 
SELECT @i</pre></div></div>

<p>And you get the follwing error<br />
Server: Msg 134, Level 15, State 1, Line 13<br />
The variable name &#8216;@i&#8217; has already been declared. Variable names must be unique within a query batch or stored procedure.</p>
<p>Now why do you need to care about deferred name resolution? Let&#8217;s take another example from a blogpost I made a while back: <a href="http://sqlblog.com/blogs/denis_gobo/archive/2008/05/06/6653.aspx">Do you depend on sp_depends (no pun intended)</a> </p>
<p>First create this proc</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
</pre></td><td class="de1"><pre class="de1"><span class="kw1">CREATE</span> <span class="kw1">PROC</span> SomeTestProc
<span class="kw1">AS</span>
<span class="kw1">SELECT</span> dbo.<span class="me1">somefuction</span><span class="br0">&#40;</span><span class="nu0">1</span><span class="br0">&#41;</span>
GO</pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">CREATE PROC SomeTestProc
AS
SELECT dbo.somefuction(1)
GO</pre></div></div>

<p>now create this function</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
</pre></td><td class="de1"><pre class="de1"><span class="kw1">CREATE</span> <span class="kw1">FUNCTION</span> somefuction<span class="br0">&#40;</span>@id <span class="kw1">int</span><span class="br0">&#41;</span>
<span class="kw1">RETURNS</span> <span class="kw1">int</span>
<span class="kw1">AS</span>
<span class="kw1">BEGIN</span>
<span class="kw1">SELECT</span> @id <span class="sy0">=</span> <span class="nu0">1</span>
<span class="kw1">RETURN</span> @id
<span class="kw1">END</span>
Go</pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">CREATE FUNCTION somefuction(@id int)
RETURNS int
AS
BEGIN
SELECT @id = 1
RETURN @id
END
Go</pre></div></div>

<p>now run this</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
</pre></td><td class="de1"><pre class="de1"><span class="kw3">sp_depends</span> <span class="st0">'somefuction'</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">sp_depends 'somefuction'</pre></div></div>

<p>result: Object does not reference any object, and no objects reference it.</p>
<p>Most people will not create a proc before they have created the function. So when does this behavior rear its ugly head? When you script out all the objects in a database, if the function or any objects referenced by an object are created after the object that references them then sp_depends won&#8217;t be 100% correct</p>
<p>SQL Server 2005 makes it pretty easy to do it yourself</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
</pre></td><td class="de1"><pre class="de1"><span class="kw1">SELECT</span> specific_name,<span class="sy0">*</span> 
<span class="kw1">FROM</span> information_schema.<span class="me1">routines</span> 
<span class="kw1">WHERE</span> object_definition<span class="br0">&#40;</span><span class="kw2">object_id</span><span class="br0">&#40;</span>specific_name<span class="br0">&#41;</span><span class="br0">&#41;</span> <span class="sy0">LIKE</span> <span class="st0">'%somefuction%'</span> 
<span class="sy0">AND</span> routine_type <span class="sy0">=</span> <span class="st0">'procedure'</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">SELECT specific_name,* 
FROM information_schema.routines 
WHERE object_definition(object_id(specific_name)) LIKE '%somefuction%' 
AND routine_type = 'procedure'</pre></div></div>

]]></content:encoded>
			<wfw:commentRss>/index.php/datamgmt/datadesign/what-is-deferred-name-resolution-and-why/feed/</wfw:commentRss>
		<slash:comments>4</slash:comments>
		</item>
	</channel>
</rss>
