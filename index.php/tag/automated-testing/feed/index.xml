<?xml version="1.0" encoding="UTF-8"?><rss version="2.0"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:atom="http://www.w3.org/2005/Atom"
	xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
	xmlns:slash="http://purl.org/rss/1.0/modules/slash/"
	>

<channel>
	<title>automated testing &#8211; LessthanDot</title>
	<atom:link href="/index.php/tag/automated-testing/feed/" rel="self" type="application/rss+xml" />
	<link>/</link>
	<description>A Technical Community for IT Professionals</description>
	<lastBuildDate>Sat, 09 Mar 2019 12:50:36 +0000</lastBuildDate>
	<language>en-US</language>
	<sy:updatePeriod>hourly</sy:updatePeriod>
	<sy:updateFrequency>1</sy:updateFrequency>
	<generator>https://wordpress.org/?v=4.6.1</generator>
	<item>
		<title>Advanced Smoke Testing with PhantomJS</title>
		<link>/index.php/webdev/advanced-smoke-testing-with-phantomjs/</link>
		<comments>/index.php/webdev/advanced-smoke-testing-with-phantomjs/#comments</comments>
		<pubDate>Wed, 26 Aug 2015 12:16:24 +0000</pubDate>
		<dc:creator><![CDATA[Eli Weinstock-Herman (tarwn)]]></dc:creator>
				<category><![CDATA[Web Developer]]></category>
		<category><![CDATA[automated testing]]></category>

		<guid isPermaLink="false">/?p=4086</guid>
		<description><![CDATA[Recently I found myself wanting a new kind of safety net. There are any number of surprise problems that can show up in front-end development, from mistyped image URLs to bad output when the minification script barfs to the unexpected surprises after adding new dependencies. As an application scales from smaller to larger, it becomes [&#8230;]]]></description>
				<content:encoded><![CDATA[<p>Recently I found myself wanting a new kind of safety net. There are any number of surprise problems that can show up in front-end development, from mistyped image URLs to bad output when the minification script barfs to the unexpected surprises after adding new dependencies. As an application scales from smaller to larger, it becomes even more time consuming to check all of the interfaces and look for little things like 404s, script errors, and odd side effects. </p>
<p>While manual testing is possible, we&#8217;re only human and will eventually miss something. Plus there&#8217;s the ongoing cost of doing all that testing. Enter the computer, better suited at repetitive tasks in a fraction of the time. </p>
<p>So here are the things we want to test:</p>
<ul>
<li>No 404s</li>
<li>No Script Errors</li>
<li>Load time (and comparison to a standard expectation)</li>
<li>File count (and comparison&#8230;)</li>
<li>File count (and comparison&#8230;)</li>
</ul>
<p>And here are the hard parts:</p>
<ul>
<li>Most of the pages I want to test are behind logins</li>
<li>Some have load delays</li>
<li>All have logic that runs after DOMReady to render for the user</li>
<li>It has to run on my local dev environment as well as against a deployed environment</li>
</ul>
<p>And lastly, I want to touch enough of the files to warm up static file caches and kick off any run-time compilation that needs to take place.</p>
<p>This script is a work in progress, so far it seems reusable and handles script error detection and 404 detection. It supports adhoc assertions against the page as well, for verifying elements are present or the title.</p>
<h1>Getting Started</h1>
<p>It was pretty clear I needed to be able to perform actions against a browser, evaluate the state of elements, and test assertions against both the state and resources that were loaded. <a href="/index.php/webdev/uidevelopment/automated-web-testing-with-selenium-2/" title="Less Than Dot: Automated Web Testing With Selenium 2">Selenium/WebDriver</a> provides some of the capabilities I need, but not all of them. Another option would be a proxy between a Selenium implementation and the web server, but this seems like I&#8217;m layering on extra complexity. After looking at several headless browsers, I decided <a href="http://phantomjs.org/">PhantomJS</a> had the closest set of features I needed.</p>
<p>I started with a script to test the LessThanDot.com login process. This gives me a lot of the basics I need, allowing me to come back later to add the more complex logic I will need for a modular SPA with delayed loading animations and so on. Knowing the fragility that occurs any time you write code directly against a browser page, I chose to separate my test script from the browser control logic from the page definitions. I based my abstractions on the <a href="/index.php/webdev/uidevelopment/automated-web-testing-with-selenium-2/">PageObject</a> pattern to define and maintain the individual pages separately from the control logic and the test steps.</p>
<p><a href="/wp-content/uploads/2015/08/AdvancedSmokeTest_00.png"><img src="/wp-content/uploads/2015/08/AdvancedSmokeTest_00.png" alt="AdvancedSmokeTest_00" width="411" height="267" class="aligncenter size-full wp-image-4090" srcset="/wp-content/uploads/2015/08/AdvancedSmokeTest_00.png 411w, /wp-content/uploads/2015/08/AdvancedSmokeTest_00-300x194.png 300w" sizes="(max-width: 411px) 100vw, 411px" /></a></p>
<p>The Test Script(s) describe the steps we want to take as we browse the site and verifies the browsing experience matches what we were expecting. The BrowserController manages the page lifecycle as a page is loaded, translating it into the matching page object that our test will interact with. The custom pages extend the Basic Page object, adding in logic to find specific element son the page, like a login button or username input.</p>
<h1>Test Script</h1>
<p>This test script is designed to verify the following path:</p>
<ol>
<li>Open http://lessthandot.com/</li>
<li>Verify the title is correct and that we aren&#8217;t logged in yet</li>
<li>Click the &#8220;login&#8221; link in the nav bar</li>
<li>Verify we&#8217;re on the login page</li>
<li>Enter my username and password, then click the &#8220;Login&#8221; button</li>
<li>Get the success message</li>
<li>Verify the page then redirects back to where I started, http://lesssthandot.com/</li>
</ol>
<p>Writing this script uncovered several peculiarities in the site title and URLs that I hadn&#8217;t noticed before and would have fixed if I had had this tool when we were initially building it.</p>
<p><a href="https://github.com/tarwn/Blog_PhantomExperiments/blob/master/AdvancedSmokeTest/test.js">/AdvancedSmokeTest/test.js</a></p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="javascript"><thead><tr><td colspan="2"  class="head">Javascript</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
</pre></td><td class="de1"><pre class="de1"><span class="co1">// ... load dependencies ...</span>
&nbsp;
<span class="co1">// ... capture args for username, password, etc ...</span>
&nbsp;
<span class="co1">// setup controller</span>
<span class="kw1">var</span> logger <span class="sy0">=</span> <span class="kw1">new</span> BasicLogger<span class="br0">&#40;</span><span class="nu0">1</span><span class="br0">&#41;</span><span class="sy0">;</span>
<span class="kw1">var</span> controller <span class="sy0">=</span> <span class="kw1">new</span> BrowserController<span class="br0">&#40;</span><span class="st0">'./pages'</span><span class="sy0">,</span> <span class="st0">'./browser'</span><span class="sy0">,</span> logger<span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
<span class="co1">// ... add a bunch of google addresses to URLs and erors we get ...</span>
&nbsp;
<span class="co1">// run test</span>
Promise.<span class="me1">resolve</span><span class="br0">&#40;</span><span class="br0">&#41;</span>.<span class="me1">then</span><span class="br0">&#40;</span><span class="kw1">function</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#123;</span>
&nbsp;
&nbsp; &nbsp; logger.<span class="me1">stdout</span><span class="br0">&#40;</span><span class="st0">'Step 1'</span><span class="sy0">,</span> <span class="st0">'Load the site, we won<span class="es0">\'</span>t be logged in'</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; <span class="kw1">return</span> controller.<span class="me1">goToUrl</span><span class="br0">&#40;</span><span class="st0">'http://lessthandot.com/'</span><span class="br0">&#41;</span><span class="sy0">;</span>
<span class="br0">&#125;</span><span class="br0">&#41;</span>.<span class="me1">then</span><span class="br0">&#40;</span><span class="kw1">function</span><span class="br0">&#40;</span>pageObject<span class="br0">&#41;</span><span class="br0">&#123;</span>
&nbsp; &nbsp; assert.<span class="me1">equal</span><span class="br0">&#40;</span>pageObject.<span class="me1">getUrl</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">,</span> <span class="st0">'http://lessthandot.com/'</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; assert.<span class="me1">equal</span><span class="br0">&#40;</span>pageObject.<span class="me1">getTitle</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">,</span> <span class="st0">'Less Than Dot - Launchpad - Less Than Dot'</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; assert.<span class="me1">ok</span><span class="br0">&#40;</span>pageObject.<span class="me1">getIsLoggedOut</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">,</span> <span class="st0">'Logged out on initial visit'</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; logger.<span class="me1">stdout</span><span class="br0">&#40;</span><span class="st0">'Step 2'</span><span class="sy0">,</span> <span class="st0">'Navigate to Login Page from menu'</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; <span class="kw1">return</span> pageObject.<span class="me1">pressLogin</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
<span class="br0">&#125;</span><span class="br0">&#41;</span>.<span class="me1">then</span><span class="br0">&#40;</span><span class="kw1">function</span><span class="br0">&#40;</span>pageObject<span class="br0">&#41;</span><span class="br0">&#123;</span>
&nbsp; &nbsp; assert.<span class="me1">equal</span><span class="br0">&#40;</span>pageObject.<span class="me1">getUrl</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">,</span> <span class="st0">'http://lessthandot.com/login.php?backtrack=http://lessthandot.com/index.php?'</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; assert.<span class="me1">equal</span><span class="br0">&#40;</span>pageObject.<span class="me1">getTitle</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">,</span> <span class="st0">'Less Than Dot - Launchpad - Less Than Dot - Login'</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; logger.<span class="me1">stdout</span><span class="br0">&#40;</span><span class="st0">'Step 3'</span><span class="sy0">,</span> <span class="st0">'Perform login'</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; pageObject.<span class="me1">typeUsername</span><span class="br0">&#40;</span>config.<span class="me1">username</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; pageObject.<span class="me1">typePassword</span><span class="br0">&#40;</span>config.<span class="me1">password</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; <span class="kw1">return</span> pageObject.<span class="me1">clickLoginButton</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
<span class="br0">&#125;</span><span class="br0">&#41;</span>.<span class="me1">then</span><span class="br0">&#40;</span><span class="kw1">function</span><span class="br0">&#40;</span>pageObject<span class="br0">&#41;</span><span class="br0">&#123;</span>
&nbsp; &nbsp; assert.<span class="me1">equal</span><span class="br0">&#40;</span>pageObject.<span class="me1">getUrl</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">,</span> <span class="st0">'http://lessthandot.com/login.php?backtrack=http://lessthandot.com/index.php?'</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; assert.<span class="me1">ok</span><span class="br0">&#40;</span>pageObject.<span class="me1">getIsLoggedIn</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">,</span> <span class="st0">'Logged in now'</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; logger.<span class="me1">stdout</span><span class="br0">&#40;</span><span class="st0">'Step 4'</span><span class="sy0">,</span> <span class="st0">'Wait for automatic redirect'</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; <span class="kw1">return</span> pageObject.<span class="me1">waitForRedirectTo</span><span class="br0">&#40;</span><span class="st0">'http://lessthandot.com/'</span><span class="br0">&#41;</span><span class="sy0">;</span>
<span class="br0">&#125;</span><span class="br0">&#41;</span>.<span class="me1">then</span><span class="br0">&#40;</span><span class="kw1">function</span><span class="br0">&#40;</span>pageObject<span class="br0">&#41;</span><span class="br0">&#123;</span>
&nbsp; &nbsp; assert.<span class="me1">equal</span><span class="br0">&#40;</span>pageObject.<span class="me1">getUrl</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">,</span> <span class="st0">'http://lessthandot.com/index.php?'</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; assert.<span class="me1">equal</span><span class="br0">&#40;</span>pageObject.<span class="me1">getTitle</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">,</span> <span class="st0">'Less Than Dot - Launchpad - Less Than Dot'</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; logger.<span class="me1">stdout</span><span class="br0">&#40;</span><span class="st0">'Success'</span><span class="sy0">,</span> <span class="st0">'We have logged in successfully.'</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; controller.<span class="me1">phantomPage</span>.<span class="me1">render</span><span class="br0">&#40;</span><span class="st0">'success.png'</span><span class="br0">&#41;</span><span class="sy0">;</span>
<span class="br0">&#125;</span><span class="br0">&#41;</span>.<span class="kw1">catch</span><span class="br0">&#40;</span><span class="kw1">function</span><span class="br0">&#40;</span>err<span class="br0">&#41;</span><span class="br0">&#123;</span>
&nbsp; &nbsp; <span class="kw1">if</span><span class="br0">&#40;</span>err.<span class="me1">name</span> <span class="sy0">==</span> <span class="st0">'AssertionError'</span><span class="br0">&#41;</span><span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; logger.<span class="me1">error</span><span class="br0">&#40;</span><span class="st0">'ASSERT FAIL'</span><span class="sy0">,</span> err.<span class="me1">message</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp; &nbsp; <span class="kw1">else</span> <span class="kw1">if</span><span class="br0">&#40;</span>err.<span class="me1">message</span><span class="br0">&#41;</span><span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; logger.<span class="me1">error</span><span class="br0">&#40;</span><span class="st0">'Test'</span><span class="sy0">,</span> <span class="st0">'unhandled error: '</span> <span class="sy0">+</span> err.<span class="me1">name</span> <span class="sy0">+</span> <span class="st0">':'</span> <span class="sy0">+</span> err.<span class="me1">message</span> <span class="sy0">+</span> <span class="st0">'<span class="es0">\n</span>Stack Trace:<span class="es0">\n</span>'</span> <span class="sy0">+</span> err.<span class="me1">stack</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp; &nbsp; <span class="kw1">else</span><span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; logger.<span class="me1">error</span><span class="br0">&#40;</span><span class="st0">'Test'</span><span class="sy0">,</span> <span class="st0">'unhandled error: '</span> <span class="sy0">+</span> err<span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp; &nbsp; controller.<span class="me1">phantomPage</span>.<span class="me1">render</span><span class="br0">&#40;</span><span class="st0">'lasterror.png'</span><span class="br0">&#41;</span><span class="sy0">;</span>
<span class="br0">&#125;</span><span class="br0">&#41;</span>.<span class="kw1">finally</span><span class="br0">&#40;</span><span class="kw1">function</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#123;</span>
&nbsp; &nbsp; phantom.<span class="me1">exit</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
<span class="br0">&#125;</span><span class="br0">&#41;</span><span class="sy0">;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">// ... load dependencies ...

// ... capture args for username, password, etc ...

// setup controller
var logger = new BasicLogger(1);
var controller = new BrowserController('./pages', './browser', logger);

// ... add a bunch of google addresses to URLs and erors we get ...

// run test
Promise.resolve().then(function(){

	logger.stdout('Step 1', 'Load the site, we won\'t be logged in');
	return controller.goToUrl('http://lessthandot.com/');
}).then(function(pageObject){
	assert.equal(pageObject.getUrl(), 'http://lessthandot.com/');
	assert.equal(pageObject.getTitle(), 'Less Than Dot - Launchpad - Less Than Dot');
	assert.ok(pageObject.getIsLoggedOut(), 'Logged out on initial visit');

	logger.stdout('Step 2', 'Navigate to Login Page from menu');
	return pageObject.pressLogin();
}).then(function(pageObject){
	assert.equal(pageObject.getUrl(), 'http://lessthandot.com/login.php?backtrack=http://lessthandot.com/index.php?');
	assert.equal(pageObject.getTitle(), 'Less Than Dot - Launchpad - Less Than Dot - Login');

	logger.stdout('Step 3', 'Perform login');
	pageObject.typeUsername(config.username);
	pageObject.typePassword(config.password);
	return pageObject.clickLoginButton();
}).then(function(pageObject){
	assert.equal(pageObject.getUrl(), 'http://lessthandot.com/login.php?backtrack=http://lessthandot.com/index.php?');
	assert.ok(pageObject.getIsLoggedIn(), 'Logged in now');

	logger.stdout('Step 4', 'Wait for automatic redirect');
	return pageObject.waitForRedirectTo('http://lessthandot.com/');
}).then(function(pageObject){
	assert.equal(pageObject.getUrl(), 'http://lessthandot.com/index.php?');
	assert.equal(pageObject.getTitle(), 'Less Than Dot - Launchpad - Less Than Dot');

	logger.stdout('Success', 'We have logged in successfully.');
	controller.phantomPage.render('success.png');
}).catch(function(err){
	if(err.name == 'AssertionError'){
		logger.error('ASSERT FAIL', err.message);
	}
	else if(err.message){
		logger.error('Test', 'unhandled error: ' + err.name + ':' + err.message + '\nStack Trace:\n' + err.stack);
	}
	else{
		logger.error('Test', 'unhandled error: ' + err);
	}
	controller.phantomPage.render('lasterror.png');
}).finally(function(){
	phantom.exit();
});</pre></div></div>

<p>The script mostly follows the list from above. I use a Promise library (<a href="https://github.com/petkaantonov/bluebird/blob/master/API.md">bluebird</a>) for asynchronous actions (load this website and let me know when it&#8217;s ready). When each action returns, I make assertions about what the page state is supposed to be, with the mechanics of how I do things like figuring out our login status or how to type a username value into the right box hidden inside the page object. If those assertions fail, they are thrown as errors and the script skips to the catch statement at the end to report the failure.</p>
<p>In the error state, I take a screenshot to help debug. In the success, I take a screenshot to later us for either version comparison or a slideshow.</p>
<p>The logger object replaced console.log so I could fine tune the level of information going to the console and put some easily parsed codes on the lines as well:</p>
<p>Example Output:</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="text"><thead><tr><td colspan="2"  class="head">Text</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
</pre></td><td class="de1"><pre class="de1">[OUT] [Step 1 &nbsp; &nbsp; &nbsp; &nbsp; ] Load the site, we won't be logged in
[---] [goToUrl &nbsp; &nbsp; &nbsp; &nbsp;] http://lessthandot.com/
[---] [onUrlChanged &nbsp; ] Going to http://lessthandot.com/
[---] [onLoadFinished ] Page &quot;http://lessthandot.com/&quot; loaded with status success
[---] [setLoaded &nbsp; &nbsp; &nbsp;] Page loaded in 2125ms :: http://lessthandot.com/
[OUT] [Step 2 &nbsp; &nbsp; &nbsp; &nbsp; ] Navigate to Login Page from menu
[---] [onUrlChanged &nbsp; ] Going to http://lessthandot.com/login.php?backtrack=http://lessthandot.com/index.php?
[---] [onLoadFinished ] Page &quot;http://lessthandot.com/login.php?backtrack=http://lessthandot.com/index.php?&quot; loaded with status success
[---] [setLoaded &nbsp; &nbsp; &nbsp;] Page loaded in 965ms :: http://lessthandot.com/login.php?backtrack=http://lessthandot.com/index.php?
[OUT] [Step 3 &nbsp; &nbsp; &nbsp; &nbsp; ] Perform login
[---] [onUrlChanged &nbsp; ] Going to http://lessthandot.com/login.php?backtrack=http://lessthandot.com/index.php?
[---] [onLoadFinished ] Page &quot;http://lessthandot.com/login.php?backtrack=http://lessthandot.com/index.php?&quot; loaded with status success
[---] [setLoaded &nbsp; &nbsp; &nbsp;] Page loaded in 984ms :: http://lessthandot.com/login.php?backtrack=http://lessthandot.com/index.php?
[OUT] [Step 4 &nbsp; &nbsp; &nbsp; &nbsp; ] Wait for automatic redirect
[---] [onUrlChanged &nbsp; ] Going to http://lessthandot.com/index.php?
[---] [onLoadFinished ] Page &quot;http://lessthandot.com/index.php?&quot; loaded with status success
[---] [setLoaded &nbsp; &nbsp; &nbsp;] Page loaded in 4206ms :: http://lessthandot.com/index.php?
[OUT] [Success &nbsp; &nbsp; &nbsp; &nbsp;] We have logged in successfully.</pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">[OUT] [Step 1         ] Load the site, we won't be logged in
[---] [goToUrl        ] http://lessthandot.com/
[---] [onUrlChanged   ] Going to http://lessthandot.com/
[---] [onLoadFinished ] Page "http://lessthandot.com/" loaded with status success
[---] [setLoaded      ] Page loaded in 2125ms :: http://lessthandot.com/
[OUT] [Step 2         ] Navigate to Login Page from menu
[---] [onUrlChanged   ] Going to http://lessthandot.com/login.php?backtrack=http://lessthandot.com/index.php?
[---] [onLoadFinished ] Page "http://lessthandot.com/login.php?backtrack=http://lessthandot.com/index.php?" loaded with status success
[---] [setLoaded      ] Page loaded in 965ms :: http://lessthandot.com/login.php?backtrack=http://lessthandot.com/index.php?
[OUT] [Step 3         ] Perform login
[---] [onUrlChanged   ] Going to http://lessthandot.com/login.php?backtrack=http://lessthandot.com/index.php?
[---] [onLoadFinished ] Page "http://lessthandot.com/login.php?backtrack=http://lessthandot.com/index.php?" loaded with status success
[---] [setLoaded      ] Page loaded in 984ms :: http://lessthandot.com/login.php?backtrack=http://lessthandot.com/index.php?
[OUT] [Step 4         ] Wait for automatic redirect
[---] [onUrlChanged   ] Going to http://lessthandot.com/index.php?
[---] [onLoadFinished ] Page "http://lessthandot.com/index.php?" loaded with status success
[---] [setLoaded      ] Page loaded in 4206ms :: http://lessthandot.com/index.php?
[OUT] [Success        ] We have logged in successfully.</pre></div></div>

<h1>BrowserController</h1>
<p>The BrowserController wraps around the PhantomJS page events and pushes the appropriate values into a loaded pageObject and/op handles errors. Script and resource errors are surfaced as &#8220;reject&#8221; calls (which are then handled by the catch back in the test). The onUrlChanged event followed by an onLoadFinished event allows the BrowserController to know a page has been loaded so it can compose additional page behavior logic onto the base page, passing it back to the test. It also has the ability to tie into events that will help track the number and size of files, and potentially even checks that specific files were or were not included (bundles versus individual scripts, for instance).</p>
<div style="padding: .5em; margin: .5em; background-color: #eeeeee;"><b>Ask Me About PhantomJS and GZip</b><br />I later found out that size is not going to happen. Phantom doesn&#8217;t&#8217;t handle/expose gzip or chunked file size properly even when supplied in the Response headers. &#8220;Disable gzip&#8221; was a common &#8220;fix&#8221; that totally ignores the fact that the only reason to use Phantom is to validate your site and turning off gzip means you&#8217;re validating it completely unrealistically (since you probably had it turned on for a reason).</div>
<p>Moving on&#8230;0&#8230;</p>
<p><a href="https://github.com/tarwn/Blog_PhantomExperiments/blob/master/AdvancedSmokeTest/browser/browserController.js">/AdvancedSmokeTest/browser/browserController.js</a></p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="javascript"><thead><tr><td colspan="2"  class="head">Javascript</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72
73
74
75
76
77
78
79
80
81
82
83
84
85
86
87
88
89
90
91
92
93
94
95
96
97
98
99
100
101
102
103
104
105
106
107
108
109
110
111
112
113
</pre></td><td class="de1"><pre class="de1"><span class="kw1">function</span> BrowserController<span class="br0">&#40;</span>pageDir<span class="sy0">,</span> browserControllerDir<span class="sy0">,</span> logger<span class="br0">&#41;</span><span class="br0">&#123;</span>
&nbsp; &nbsp; <span class="kw1">var</span> self <span class="sy0">=</span> <span class="kw1">this</span><span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; <span class="co1">// ... some setup ...</span>
&nbsp;
&nbsp; &nbsp; self.<span class="me1">preloadPagesDefinitions</span> <span class="sy0">=</span> <span class="kw1">function</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="co1">// .. pre-load the page object definitions we provide the path too above ...</span>
&nbsp; &nbsp; <span class="br0">&#125;</span><span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; self.<span class="me1">goToUrl</span> <span class="sy0">=</span> <span class="kw1">function</span><span class="br0">&#40;</span>url<span class="br0">&#41;</span><span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; self.<span class="me1">logger</span>.<span class="me1">debug</span><span class="br0">&#40;</span><span class="nu0">1</span><span class="sy0">,</span><span class="st0">'goToUrl'</span><span class="sy0">,</span> url<span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">return</span> self.<span class="me1">loadNewPage</span><span class="br0">&#40;</span><span class="kw1">function</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; self.<span class="me1">phantomPage</span>.<span class="me1">open</span><span class="br0">&#40;</span>url<span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; <span class="br0">&#125;</span><span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; self.<span class="me1">loadNewPage</span> <span class="sy0">=</span> <span class="kw1">function</span><span class="br0">&#40;</span>navigationAction<span class="br0">&#41;</span><span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">return</span> <span class="kw1">new</span> Promise<span class="br0">&#40;</span><span class="kw1">function</span><span class="br0">&#40;</span>resolve<span class="sy0">,</span> reject<span class="br0">&#41;</span><span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; self.<span class="me1">preloadPagesDefinitions</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">var</span> newUrlCalledYet <span class="sy0">=</span> <span class="kw2">false</span><span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="co1">// setup to capture error conditions</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; self.<span class="me1">phantomPage</span>.<span class="me1">onResourceTimeout</span> <span class="sy0">=</span> <span class="kw1">function</span><span class="br0">&#40;</span>request<span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="co1">// ...</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; reject<span class="br0">&#40;</span><span class="st0">'Page timed out'</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span><span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; self.<span class="me1">phantomPage</span>.<span class="me1">onResourceError</span> <span class="sy0">=</span> <span class="kw1">function</span><span class="br0">&#40;</span>resourceError<span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">if</span><span class="br0">&#40;</span>self.<span class="me1">isIgnorableError</span><span class="br0">&#40;</span>resourceError.<span class="me1">url</span><span class="br0">&#41;</span><span class="br0">&#41;</span><span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="co1">// ...</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">return</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="co1">// ...</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; reject<span class="br0">&#40;</span><span class="st0">'Page load error'</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span><span class="sy0">;</span>
&nbsp; &nbsp; 
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; setTimeout<span class="br0">&#40;</span><span class="kw1">function</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">if</span><span class="br0">&#40;</span><span class="sy0">!</span>currentPage.<span class="me1">isLoaded</span><span class="br0">&#41;</span><span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; reject<span class="br0">&#40;</span><span class="st0">'After 15 seconds I gave up'</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span><span class="sy0">,</span> <span class="nu0">15000</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; self.<span class="me1">isIgnorableError</span> <span class="sy0">=</span> <span class="kw1">function</span><span class="br0">&#40;</span>msg<span class="br0">&#41;</span><span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">return</span> _.<span class="me1">some</span><span class="br0">&#40;</span>self.<span class="me1">ignorableErrors</span><span class="sy0">,</span> <span class="kw1">function</span><span class="br0">&#40;</span>ignorableError<span class="br0">&#41;</span><span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">return</span> msg.<span class="me1">match</span><span class="br0">&#40;</span>ignorableError<span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span><span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; self.<span class="me1">phantomPage</span>.<span class="me1">onError</span> <span class="sy0">=</span> <span class="kw1">function</span><span class="br0">&#40;</span>msg<span class="sy0">,</span> trace<span class="br0">&#41;</span><span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">if</span><span class="br0">&#40;</span>self.<span class="me1">isIgnorableError</span><span class="br0">&#40;</span>msg<span class="br0">&#41;</span><span class="br0">&#41;</span><span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="co1">// ...</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">return</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">var</span> traceContent <span class="sy0">=</span> <span class="co1">// ...</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="co1">// ...</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; reject<span class="br0">&#40;</span><span class="st0">'Browser script error occurred.<span class="es0">\n</span>Message: '</span> <span class="sy0">+</span> msg <span class="sy0">+</span> <span class="st0">'<span class="es0">\n</span>Trace:<span class="es0">\n</span>'</span> <span class="sy0">+</span> traceContent.<span class="me1">join</span><span class="br0">&#40;</span><span class="st0">'<span class="es0">\n</span>'</span><span class="br0">&#41;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span><span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="co1">// setup to capture when page load finishes</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; self.<span class="me1">phantomPage</span>.<span class="me1">onLoadFinished</span> <span class="sy0">=</span> <span class="kw1">function</span><span class="br0">&#40;</span>status<span class="br0">&#41;</span><span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">if</span><span class="br0">&#40;</span>newUrlCalledYet<span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">try</span><span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="co1">// ...</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; currentPage.<span class="me1">setLoaded</span><span class="br0">&#40;</span>status<span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">if</span><span class="br0">&#40;</span>status <span class="sy0">===</span> <span class="st0">&quot;success&quot;</span><span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; resolve<span class="br0">&#40;</span>currentPage<span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">catch</span><span class="br0">&#40;</span>err<span class="br0">&#41;</span><span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; reject<span class="br0">&#40;</span>err<span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span><span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="co1">// track navigation and information events</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="co1">// ... more events ...</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; self.<span class="me1">phantomPage</span>.<span class="me1">onUrlChanged</span> <span class="sy0">=</span> <span class="kw1">function</span><span class="br0">&#40;</span>targetUrl<span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; self.<span class="me1">logger</span>.<span class="me1">debug</span><span class="br0">&#40;</span><span class="nu0">1</span><span class="sy0">,</span> <span class="st0">'onUrlChanged'</span><span class="sy0">,</span> <span class="st0">'Going to '</span> <span class="sy0">+</span> targetUrl<span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; newUrlCalledYet <span class="sy0">=</span> <span class="kw2">true</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span><span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="co1">// execute navigation action</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">var</span> currentPage <span class="sy0">=</span> <span class="kw1">new</span> BasicPage<span class="br0">&#40;</span>self.<span class="me1">phantomPage</span><span class="sy0">,</span> logger<span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; navigationAction<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span><span class="br0">&#41;</span>.<span class="me1">then</span><span class="br0">&#40;</span><span class="kw1">function</span><span class="br0">&#40;</span>currentPage<span class="br0">&#41;</span><span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="co1">// attach pageutils</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">return</span> pageUtils.<span class="me1">initializeUtils</span><span class="br0">&#40;</span>self.<span class="me1">phantomPage</span><span class="sy0">,</span> browserControllerDir<span class="br0">&#41;</span>.<span class="me1">then</span><span class="br0">&#40;</span><span class="kw1">function</span><span class="br0">&#40;</span>feedback<span class="br0">&#41;</span><span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">return</span> currentPage<span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span><span class="br0">&#41;</span>.<span class="me1">then</span><span class="br0">&#40;</span><span class="kw1">function</span><span class="br0">&#40;</span>currentPage<span class="br0">&#41;</span><span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">var</span> url <span class="sy0">=</span> self.<span class="me1">phantomPage</span>.<span class="me1">url</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; _.<span class="me1">forEach</span><span class="br0">&#40;</span>knownPages<span class="sy0">,</span> <span class="kw1">function</span><span class="br0">&#40;</span>knownPage<span class="br0">&#41;</span><span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">if</span><span class="br0">&#40;</span>url.<span class="me1">match</span><span class="br0">&#40;</span>knownPage.<span class="me1">pattern</span><span class="br0">&#41;</span><span class="br0">&#41;</span><span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; knownPage.<span class="me1">attachBehavior</span><span class="br0">&#40;</span>currentPage<span class="sy0">,</span> self.<span class="me1">phantomPage</span><span class="sy0">,</span> self.<span class="me1">loadNewPage</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">return</span> currentPage<span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span><span class="br0">&#41;</span>.<span class="me1">then</span><span class="br0">&#40;</span><span class="kw1">function</span><span class="br0">&#40;</span>currentPage<span class="br0">&#41;</span><span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">return</span> currentPage<span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; <span class="br0">&#125;</span><span class="sy0">;</span>
&nbsp;
<span class="br0">&#125;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">function BrowserController(pageDir, browserControllerDir, logger){
	var self = this;

	// ... some setup ...

	self.preloadPagesDefinitions = function(){
		// .. pre-load the page object definitions we provide the path too above ...
	};

	self.goToUrl = function(url){
		self.logger.debug(1,'goToUrl', url);

		return self.loadNewPage(function(){
			self.phantomPage.open(url);
		});
	};

	self.loadNewPage = function(navigationAction){
		return new Promise(function(resolve, reject){
			self.preloadPagesDefinitions();

			var newUrlCalledYet = false;

			// setup to capture error conditions
			self.phantomPage.onResourceTimeout = function(request) {
				// ...
				reject('Page timed out');
			};

			self.phantomPage.onResourceError = function(resourceError) {
				if(self.isIgnorableError(resourceError.url)){
					// ...
					return;
				}

				// ...
				reject('Page load error');
			};
	
			setTimeout(function(){
				if(!currentPage.isLoaded){
					reject('After 15 seconds I gave up');
				}
			}, 15000);
			
			self.isIgnorableError = function(msg){
				return _.some(self.ignorableErrors, function(ignorableError){
					return msg.match(ignorableError);
				});
			};

			self.phantomPage.onError = function(msg, trace){
				if(self.isIgnorableError(msg)){
					// ...
					return;
				}

				var traceContent = // ...

				// ...
				reject('Browser script error occurred.\nMessage: ' + msg + '\nTrace:\n' + traceContent.join('\n'));
			};

			// setup to capture when page load finishes
			self.phantomPage.onLoadFinished = function(status){
				if(newUrlCalledYet)
				{
					try{
						// ...
						currentPage.setLoaded(status);

						if(status === "success")
							resolve(currentPage);
					}
					catch(err){
						reject(err);
					}
				}
			};

			// track navigation and information events

			// ... more events ...
			
			self.phantomPage.onUrlChanged = function(targetUrl) {
				self.logger.debug(1, 'onUrlChanged', 'Going to ' + targetUrl);
				newUrlCalledYet = true;
			};

			// execute navigation action
			var currentPage = new BasicPage(self.phantomPage, logger);
			navigationAction();

		}).then(function(currentPage){
			// attach pageutils
			return pageUtils.initializeUtils(self.phantomPage, browserControllerDir).then(function(feedback){
				return currentPage;
			});

		}).then(function(currentPage){
			var url = self.phantomPage.url;
			_.forEach(knownPages, function(knownPage){
				if(url.match(knownPage.pattern)){
					knownPage.attachBehavior(currentPage, self.phantomPage, self.loadNewPage);
				}
			});
			return currentPage;
		}).then(function(currentPage){
			return currentPage;
		});
	};

}</pre></div></div>

<p>The main work for the BrowserController is near the end. We pass in a navigation action to perform that we know will be asynchronous, after wiring up all of the events it needs to watch it then executes that action and waits for the response to finish (the first then). This is triggered by the onLoadFinished event being called after the page has finished loading, which calls the resolve() method. We then attach some additional page utilities (jQuery if it isn&#8217;t present, an autotype plugin) and then scan through the list of known pages we preloaded at the top and add the behavior of each one that matches to the basicPage we started with.</p>
<p>Along the way, we also have hooks into other properties, like timeouts and resource load errors, which will call the reject() method instead of resolve. This causes a break in the script, skipping ahead to the catch in the outer test script.</p>
<h1>A PageObject</h1>
<p>The PageObjects are pretty simple. They have a match function to help compare against a URL and some functions that abstract interactions with the browser as a simple function we can call from our tests. This ensures that if we change around the screens or make changes to elements we care about, we only have to update our page abstraction and not track down ID or CSS magic strings throughout the test code.</p>
<p>Rather than make my page objects match one-to-one to a browser page, I have chosen to compose the behavior from multiple pages. So for this test I have an anyPage that supports any page in the LessThanDot website, and I have the loginPage which is the specific behavior you would only find on the login page. When the login page is loaded, the BrowserController will attach the behavior from both of these pages, reducing the need to duplicate the logic in &#8220;anyPage&#8221; in every page (assuming I have more of them, which I will for my real test case).</p>
<p><a href="https://github.com/tarwn/Blog_PhantomExperiments/blob/master/AdvancedSmokeTest/pages/anyPage.js">/AdvancedSmokeTest/pages/anyPage.js</a></p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="javascript"><thead><tr><td colspan="2"  class="head">Javascript</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
</pre></td><td class="de1"><pre class="de1"><span class="kw1">var</span> pageUtils <span class="sy0">=</span> require<span class="br0">&#40;</span><span class="st0">&quot;../browser/pageUtils&quot;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
module.<span class="me1">exports</span> <span class="sy0">=</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; name<span class="sy0">:</span> <span class="st0">&quot;anyPage&quot;</span><span class="sy0">,</span>
&nbsp; &nbsp; description<span class="sy0">:</span> <span class="st0">&quot;common behavior for all lessthandot pages&quot;</span><span class="sy0">,</span>
&nbsp; &nbsp; pattern<span class="sy0">:</span> <span class="co2">/.*/</span><span class="sy0">,</span>
&nbsp; &nbsp; attachBehavior<span class="sy0">:</span> <span class="kw1">function</span><span class="br0">&#40;</span>basicPageObject<span class="sy0">,</span> phantomPage<span class="sy0">,</span> loadNewPage<span class="br0">&#41;</span><span class="br0">&#123;</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; basicPageObject.<span class="me1">getIsLoggedIn</span> <span class="sy0">=</span> <span class="kw1">function</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">return</span> pageUtils.<span class="me1">getElement</span><span class="br0">&#40;</span>phantomPage<span class="sy0">,</span> <span class="st0">'#snav a:contains(&quot;Logout&quot;)'</span><span class="br0">&#41;</span>.<span class="me1">getIsVisible</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span><span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; basicPageObject.<span class="me1">getIsLoggedOut</span> <span class="sy0">=</span> <span class="kw1">function</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">return</span> pageUtils.<span class="me1">getElement</span><span class="br0">&#40;</span>phantomPage<span class="sy0">,</span> <span class="st0">'#snav a:contains(&quot;Login&quot;)'</span><span class="br0">&#41;</span>.<span class="me1">getIsVisible</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span><span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; basicPageObject.<span class="me1">getLogInWelcomeText</span> <span class="sy0">=</span> <span class="kw1">function</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">return</span> pageUtils.<span class="me1">getElement</span><span class="br0">&#40;</span>phantomPage<span class="sy0">,</span> <span class="st0">'#snav'</span><span class="br0">&#41;</span>.<span class="me1">getInnerText</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span><span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; basicPageObject.<span class="me1">pressLogin</span> <span class="sy0">=</span> <span class="kw1">function</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">return</span> loadNewPage<span class="br0">&#40;</span><span class="kw1">function</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; pageUtils.<span class="me1">getElement</span><span class="br0">&#40;</span>phantomPage<span class="sy0">,</span> <span class="st0">'#snav a:contains(&quot;Login&quot;)'</span><span class="br0">&#41;</span>.<span class="me1">click</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span><span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; basicPageObject.<span class="me1">waitForRedirectTo</span> <span class="sy0">=</span> <span class="kw1">function</span><span class="br0">&#40;</span>url<span class="br0">&#41;</span><span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">return</span> loadNewPage<span class="br0">&#40;</span><span class="kw1">function</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="co1">// just wait patiently...</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="co1">// and then we could then an assertion with a URL if we had assertions...</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span><span class="sy0">;</span>
&nbsp; &nbsp; <span class="br0">&#125;</span>
<span class="br0">&#125;</span><span class="sy0">;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">var pageUtils = require("../browser/pageUtils");

module.exports = {
	name: "anyPage",
	description: "common behavior for all lessthandot pages",
	pattern: /.*/,
	attachBehavior: function(basicPageObject, phantomPage, loadNewPage){

		basicPageObject.getIsLoggedIn = function(){
			return pageUtils.getElement(phantomPage, '#snav a:contains("Logout")').getIsVisible();
		};

		basicPageObject.getIsLoggedOut = function(){
			return pageUtils.getElement(phantomPage, '#snav a:contains("Login")').getIsVisible();
		};

		basicPageObject.getLogInWelcomeText = function(){
			return pageUtils.getElement(phantomPage, '#snav').getInnerText();
		};

		basicPageObject.pressLogin = function(){
			return loadNewPage(function(){
				pageUtils.getElement(phantomPage, '#snav a:contains("Login")').click();
			});
		};

		basicPageObject.waitForRedirectTo = function(url){
			return loadNewPage(function(){
				// just wait patiently...
			});
			// and then we could then an assertion with a URL if we had assertions...
		};
	}
};</pre></div></div>

<p>You can see this is a pretty small file and it wouldn&#8217;t be hard to define multiple of these pages to support a larger number of tests. The pageUtils library provides the ability to get DOM elements that have been wrapped with helper functions for visibility, click interaction, and even typing values. We expose abstractions that are simple enough to describe to someone over the phone (are you logged in? what does the welcome text say? Press the login button) and wire this to the lower-level language the browser&#8217;s JavaScript engine understands.</p>
<h1>But that&#8217;s not everything&#8230;</h1>
<p>This provides a base I need to start implementing smoke tests against my target front-end application. My next steps will be to layer in logic to track the files being downloaded and build statistics around timing and quantity. I currently output a log message for the page load time, but would like to expose this as a property instead so we could assert against it. I also want to add some masking capabilities to the output to mask things like the password values I have passed in so they don&#8217;t get preserved in a build server log somewhere. </p>
]]></content:encoded>
			<wfw:commentRss>/index.php/webdev/advanced-smoke-testing-with-phantomjs/feed/</wfw:commentRss>
		<slash:comments>3</slash:comments>
		</item>
		<item>
		<title>Automated Web Testing with Selenium WebDriver</title>
		<link>/index.php/webdev/uidevelopment/automated-web-testing-with-selenium-2/</link>
		<comments>/index.php/webdev/uidevelopment/automated-web-testing-with-selenium-2/#comments</comments>
		<pubDate>Wed, 02 Nov 2011 10:27:00 +0000</pubDate>
		<dc:creator><![CDATA[Eli Weinstock-Herman (tarwn)]]></dc:creator>
				<category><![CDATA[UI Development]]></category>
		<category><![CDATA[automated testing]]></category>
		<category><![CDATA[selenium]]></category>
		<category><![CDATA[webdriver]]></category>

		<guid isPermaLink="false">/index.php/2011/11/automated-web-testing-with-selenium-2/</guid>
		<description><![CDATA[Last week we created a pair of smoke tests with the Selenium IDE tool. Several people commented, with varying levels of politeness, about the downsides of Selenium IDE. Today we are going to get into the nuts and bolts of coding automated tests against the WebDriver library.]]></description>
				<content:encoded><![CDATA[<p>Last week we created a pair of smoke tests with the <a href="/index.php/WebDev/UIDevelopment/automated-web-testing-with-selenium" title="Read last week's post">Selenium IDE</a> tool. Several people commented, with varying levels of politeness, about the downsides of Selenium IDE. There are even those that will tell you not to use it at all, to immediately bypass Selenium IDE and go straight to code. My opinion is that this is a matter of context. </p>
<p>Today we are going to get into the nuts and bolts of coding automated tests against the WebDriver library. Before we get into that, however, let&#8217;s discuss when it is appropriate to make this transition.</p>
<h2>Context and When to Transition</h2>
<p>Most projects that are using browser automation are large and require a fairly complex set of tests. The solutions they are using are at least at the level we will be working at today, if not further down the road to automated acceptance testing. A higher level of complexity across a much larger project is just not manageable with Selenium IDE, so many people are used to bypassing it immediately and going straight to a code solution.</p>
<p>Context is king. For small teams or sites, there is value in being able to put together some quick tests that can be run regularly without making an investment in creating a custom framework. It can also be a useful tool when you have a legacy site and just want to make sure it hasn&#8217;t fallen over.</p>
<p>Not everyone has worked in the context of these larger projects or has worked extensively with Selenium. If you are getting started for the first time or currently using Selenium IDE, here are some signs to consider moving to a custom solution:</p>
<ul>
<li>You often update a number of tests simultaneously to change element names</li>
<li>Sacrificing your computer while the tests run is becoming a nuisance</li>
<li>You want to share the tests with team members, others in your company, or your client</li>
<li>Maintaining the test suite list in the IDE tasks longer than creating tests</li>
<li>You are starting to build tests for every feature you add to the software</li>
<li>You want to tie the tests into the automated build system for your software</li>
</ul>
<p>In these cases, you have likely scaled past the point where Selenium IDE is enabling you, into a range where it&#8217;s costs outweigh it&#8217;s gains.</p>
<h2>The Next Step for Web Automation</h2>
<p>The next step in automating web interface tests is to use the Selenium WebDriver library to code the tests. Writing our own framework has some inherent advantages and disadvantages.</p>
<p>Pros: Free, Reduced Duplication, Easy to share, Relatively easy to automate<br />
Cons: Increased cost, Increased risk due to code errors, Increased complexity<br />
Neutral: Level of fragility depends on level of developer</p>
<p>There are Selenium WebDriver libraries for Java, Python, Ruby, and .Net. By using an existing Unit testing framework we don&#8217;t have to write our own Test Runner and it is likely to have documentation and/or plugins for integrating into most of the popular build engines.</p>
<p>For the purpose of this post, we are again going to create tests against my contact page, but we&#8217;ll be increasing the number of tests. We will be using the .Net driver, C#, and the MS Test framework.</p>
<p><em>Note: I would advise this unit test project be separate from the overall solution for your application. Keeping it separate means you can version it separately, build and run it separately, and easily run the real unit tests in your product solution without accidentally running the interface ones as well.</p>
<p>Note 2: I had intended to do this in VB.Net originally, but the downside of switching easily between languages in the same IDE is that sometimes you find yourself writing in the wrong one without even realizing it.</em></p>
<h2>Getting Started</h2>
<p>After creating our .Net solution to house the test project, we need to add a reference to the Selenium WebDriver library. This can be downloaded from the <a href="http://seleniumhq.org/download/" title="Selenium WebDriver download page">Web Driver Download page</a> or added via NuGet:</p>
<div class="commandWrapper">
<div class="commandPrompt">
<p class="command">PM&gt; Install-Package Selenium.WebDriver</p>
</div>
</div>
<p><em>Note: If you don&#8217;t have NuGet installed, I highly recommend you go check it out at <a href="http://nuget.org/" title="NuGet.org">http://nuget.org/</a> or read more about it in <a href="http://msdn.microsoft.com/en-us/magazine/hh547106.aspx" title="Manage Project Libraries with NuGet by Phil Haack">this recent MSDN article</a>. NuGet is a package manager that allows us to quickly download, install, and update 3rd party packages in Visual Studio. It not only makes it easier to keep 3rd party libraries up to date, but also makes a number of packages more accessible, since they generally install the appropriate settings and references to easily get us started.</em></p>
<p>Once we have all of that set up, we can create a single class file with a quick test function to verify we&#8217;re ready to go:</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="csharp"><thead><tr><td colspan="2"  class="head">C#</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
</pre></td><td class="de1"><pre class="de1"><span class="kw1">using</span> <span class="co3">System</span><span class="sy0">;</span>
<span class="kw1">using</span> <span class="co3">Microsoft.VisualStudio.TestTools.UnitTesting</span><span class="sy0">;</span>
<span class="kw1">using</span> <span class="co3">OpenQA.Selenium.Firefox</span><span class="sy0">;</span>
&nbsp;
<span class="kw1">namespace</span> SampleWebDriverUnitTest <span class="br0">&#123;</span>
&nbsp;
&nbsp; &nbsp; <span class="br0">&#91;</span>TestClass<span class="br0">&#93;</span>
&nbsp; &nbsp; <span class="kw1">public</span> <span class="kw4">class</span> GettingStartedTest <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">public</span> GettingStartedTest<span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span> <span class="br0">&#125;</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#91;</span>TestMethod<span class="br0">&#93;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">public</span> <span class="kw4">void</span> GettingStarted_BasicFireFoxGET_LoadsPage<span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">using</span> <span class="br0">&#40;</span>FirefoxDriver driver <span class="sy0">=</span> <span class="kw3">new</span> FirefoxDriver<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; driver<span class="sy0">.</span><span class="me1">Url</span> <span class="sy0">=</span> <span class="st0">&quot;http://tiernok.com&quot;/</span><span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; driver<span class="sy0">.</span><span class="me1">Navigate</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Assert<span class="sy0">.</span><span class="me1">AreEqual</span><span class="br0">&#40;</span><span class="st0">&quot;Eli Weinstock-Herman | Tarwn&quot;</span>, driver<span class="sy0">.</span><span class="me1">Title</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp; &nbsp; <span class="br0">&#125;</span>
<span class="br0">&#125;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">using System;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using OpenQA.Selenium.Firefox;

namespace SampleWebDriverUnitTest {

	[TestClass]
	public class GettingStartedTest {
		public GettingStartedTest() { }

		[TestMethod]
		public void GettingStarted_BasicFireFoxGET_LoadsPage() {
			using (FirefoxDriver driver = new FirefoxDriver()) {
				driver.Url = "http://tiernok.com/";

				driver.Navigate();

				Assert.AreEqual("Eli Weinstock-Herman | Tarwn", driver.Title);
			}
		}
	}
}</pre></div></div>

<p>This is all it takes to get our first test. Create the solution, add the reference, create the test class and method. Since it&#8217;s MS Test, Ctrl+R, A will run all of our tests in the integrated test runner.</p>
<p>Selenium WebDriver is written in a somewhat fluent syntax, so for the rest of the post we will combine the URL and navigation into a single statement: driver.Navigate().GoToUrl(&#8220;http://tiernok.com&/#8221;);</p>
<h2>The First Test Cases</h2>
<p>Last time we started off by testing navigation to the home page and the presence of two books, then we tested submitting a form would correctly fail validation when it was missing a required field. Today we&#8217;re going to extend that form validation check, a more complex example in Selenium IDE that will be handled fairly easily in our new framework.</p>
<h3>The Email Form</h3>
<p>These are the situations we want to test for the email form:</p>
<blockquote><p>
	When I submit the form without an email address, it displays an error.<br />
	When I submit the form without a name, it displays an error.<br />
	When I submit the form without a message, it displays an error.<br />
	When I submit the form with all of the fields filled in, it displays a success message.
</p></blockquote>
<p>The steps for these tests are going to be similar to the second test we created in Selenium IDE last week. </p>
<h3>Exporting a Selenium IDE Test Case</h3>
<p>Selenium IDE has a feature that allows us to export tests, so when we are getting started we can look at that export to get a feel for how the code version will function. To export a test, open Selenium IDE, go to File, Export Text Case As, and choose C# (WebDriver). A C# file will be generated with the test case converted to an NUnit Test. The file includes some test setup and teardown methods, as well as the following test method:</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="csharp"><thead><tr><td colspan="2"  class="head">C#</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
</pre></td><td class="de1"><pre class="de1"><span class="br0">&#91;</span>Test<span class="br0">&#93;</span>
<span class="kw1">public</span> <span class="kw4">void</span> TheContactPageReturnsErrorWhenEmailFieldEmptyTest<span class="br0">&#40;</span><span class="br0">&#41;</span>
<span class="br0">&#123;</span>
&nbsp; &nbsp; driver<span class="sy0">.</span><span class="me1">Navigate</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">.</span><span class="me1">GoToUrl</span><span class="br0">&#40;</span><span class="st0">&quot;/&quot;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; driver<span class="sy0">.</span><span class="me1">FindElement</span><span class="br0">&#40;</span><span class="kw1">By</span><span class="sy0">.</span><span class="me1">LinkText</span><span class="br0">&#40;</span><span class="st0">&quot;Contact&quot;</span><span class="br0">&#41;</span><span class="br0">&#41;</span><span class="sy0">.</span><span class="me1">Click</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; driver<span class="sy0">.</span><span class="me1">FindElement</span><span class="br0">&#40;</span><span class="kw1">By</span><span class="sy0">.</span><span class="me1">Id</span><span class="br0">&#40;</span><span class="st0">&quot;itxtFromName&quot;</span><span class="br0">&#41;</span><span class="br0">&#41;</span><span class="sy0">.</span><span class="me1">Clear</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; driver<span class="sy0">.</span><span class="me1">FindElement</span><span class="br0">&#40;</span><span class="kw1">By</span><span class="sy0">.</span><span class="me1">Id</span><span class="br0">&#40;</span><span class="st0">&quot;itxtFromName&quot;</span><span class="br0">&#41;</span><span class="br0">&#41;</span><span class="sy0">.</span><span class="me1">SendKeys</span><span class="br0">&#40;</span><span class="st0">&quot;Selenium Test&quot;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; driver<span class="sy0">.</span><span class="me1">FindElement</span><span class="br0">&#40;</span><span class="kw1">By</span><span class="sy0">.</span><span class="me1">Id</span><span class="br0">&#40;</span><span class="st0">&quot;itxtBody&quot;</span><span class="br0">&#41;</span><span class="br0">&#41;</span><span class="sy0">.</span><span class="me1">Clear</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; driver<span class="sy0">.</span><span class="me1">FindElement</span><span class="br0">&#40;</span><span class="kw1">By</span><span class="sy0">.</span><span class="me1">Id</span><span class="br0">&#40;</span><span class="st0">&quot;itxtBody&quot;</span><span class="br0">&#41;</span><span class="br0">&#41;</span><span class="sy0">.</span><span class="me1">SendKeys</span><span class="br0">&#40;</span><span class="st0">&quot;This is my Selenium Message&quot;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; driver<span class="sy0">.</span><span class="me1">FindElement</span><span class="br0">&#40;</span><span class="kw1">By</span><span class="sy0">.</span><span class="me1">CssSelector</span><span class="br0">&#40;</span><span class="st0">&quot;input[type=&quot;</span>submit<span class="st0">&quot;]&quot;</span><span class="br0">&#41;</span><span class="br0">&#41;</span><span class="sy0">.</span><span class="me1">Click</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; Assert<span class="sy0">.</span><span class="me1">AreEqual</span><span class="br0">&#40;</span><span class="st0">&quot;Please fill in all three entries before sending the message.&quot;</span>, driver<span class="sy0">.</span><span class="me1">FindElement</span><span class="br0">&#40;</span><span class="kw1">By</span><span class="sy0">.</span><span class="me1">CssSelector</span><span class="br0">&#40;</span><span class="st0">&quot;.err&quot;</span><span class="br0">&#41;</span><span class="br0">&#41;</span><span class="sy0">.</span><span class="me1">Text</span><span class="br0">&#41;</span><span class="sy0">;</span>
<span class="br0">&#125;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">[Test]
public void TheContactPageReturnsErrorWhenEmailFieldEmptyTest()
{
    driver.Navigate().GoToUrl("/");
    driver.FindElement(By.LinkText("Contact")).Click();
    driver.FindElement(By.Id("itxtFromName")).Clear();
    driver.FindElement(By.Id("itxtFromName")).SendKeys("Selenium Test");
    driver.FindElement(By.Id("itxtBody")).Clear();
    driver.FindElement(By.Id("itxtBody")).SendKeys("This is my Selenium Message");
    driver.FindElement(By.CssSelector("input[type="submit"]")).Click();
    Assert.AreEqual("Please fill in all three entries before sending the message.", driver.FindElement(By.CssSelector(".err")).Text);
}</pre></div></div>

<p>Initially this may look more complicated then the Selenium IDE command steps, but really the only difference is that we are explicitly finding the elements we want to act on before acting, which was was more implicit in Selenium IDE. </p>
<p>Converting this to an MS Test is not difficult, but we will want to wrap the tests in a using statement so that driver gets properly disposed (MS Test doesn&#8217;t run cleanup properly when an exception occurs).</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="csharp"><thead><tr><td colspan="2"  class="head">C#</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
</pre></td><td class="de1"><pre class="de1"><span class="br0">&#91;</span>TestMethod<span class="br0">&#93;</span>
<span class="kw1">public</span> <span class="kw4">void</span> ContactPageReturnsErrorWhenEmailFieldEmpty<span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; <span class="kw1">using</span> <span class="br0">&#40;</span>FirefoxDriver driver <span class="sy0">=</span> <span class="kw3">new</span> FirefoxDriver<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; driver<span class="sy0">.</span><span class="me1">Navigate</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">.</span><span class="me1">GoToUrl</span><span class="br0">&#40;</span><span class="st0">&quot;http://tiernok.com/&quot;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; driver<span class="sy0">.</span><span class="me1">FindElement</span><span class="br0">&#40;</span><span class="kw1">By</span><span class="sy0">.</span><span class="me1">LinkText</span><span class="br0">&#40;</span><span class="st0">&quot;Contact&quot;</span><span class="br0">&#41;</span><span class="br0">&#41;</span><span class="sy0">.</span><span class="me1">Click</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; driver<span class="sy0">.</span><span class="me1">FindElement</span><span class="br0">&#40;</span><span class="kw1">By</span><span class="sy0">.</span><span class="me1">Id</span><span class="br0">&#40;</span><span class="st0">&quot;itxtFromName&quot;</span><span class="br0">&#41;</span><span class="br0">&#41;</span><span class="sy0">.</span><span class="me1">Clear</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; driver<span class="sy0">.</span><span class="me1">FindElement</span><span class="br0">&#40;</span><span class="kw1">By</span><span class="sy0">.</span><span class="me1">Id</span><span class="br0">&#40;</span><span class="st0">&quot;itxtFromName&quot;</span><span class="br0">&#41;</span><span class="br0">&#41;</span><span class="sy0">.</span><span class="me1">SendKeys</span><span class="br0">&#40;</span><span class="st0">&quot;Selenium Test&quot;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; driver<span class="sy0">.</span><span class="me1">FindElement</span><span class="br0">&#40;</span><span class="kw1">By</span><span class="sy0">.</span><span class="me1">Id</span><span class="br0">&#40;</span><span class="st0">&quot;itxtBody&quot;</span><span class="br0">&#41;</span><span class="br0">&#41;</span><span class="sy0">.</span><span class="me1">Clear</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; driver<span class="sy0">.</span><span class="me1">FindElement</span><span class="br0">&#40;</span><span class="kw1">By</span><span class="sy0">.</span><span class="me1">Id</span><span class="br0">&#40;</span><span class="st0">&quot;itxtBody&quot;</span><span class="br0">&#41;</span><span class="br0">&#41;</span><span class="sy0">.</span><span class="me1">SendKeys</span><span class="br0">&#40;</span><span class="st0">&quot;This is my Selenium Message&quot;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; driver<span class="sy0">.</span><span class="me1">FindElement</span><span class="br0">&#40;</span><span class="kw1">By</span><span class="sy0">.</span><span class="me1">CssSelector</span><span class="br0">&#40;</span><span class="st0">&quot;input[type=&quot;</span>submit<span class="st0">&quot;]&quot;</span><span class="br0">&#41;</span><span class="br0">&#41;</span><span class="sy0">.</span><span class="me1">Click</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; Assert<span class="sy0">.</span><span class="me1">AreEqual</span><span class="br0">&#40;</span><span class="st0">&quot;Please fill in all three entries before sending the message.&quot;</span>, driver<span class="sy0">.</span><span class="me1">FindElement</span><span class="br0">&#40;</span><span class="kw1">By</span><span class="sy0">.</span><span class="me1">CssSelector</span><span class="br0">&#40;</span><span class="st0">&quot;.err&quot;</span><span class="br0">&#41;</span><span class="br0">&#41;</span><span class="sy0">.</span><span class="me1">Text</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; <span class="br0">&#125;</span>
<span class="br0">&#125;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">[TestMethod]
public void ContactPageReturnsErrorWhenEmailFieldEmpty() {
	using (FirefoxDriver driver = new FirefoxDriver()) {
		driver.Navigate().GoToUrl("http://tiernok.com/");
		driver.FindElement(By.LinkText("Contact")).Click();
		driver.FindElement(By.Id("itxtFromName")).Clear();
		driver.FindElement(By.Id("itxtFromName")).SendKeys("Selenium Test");
		driver.FindElement(By.Id("itxtBody")).Clear();
		driver.FindElement(By.Id("itxtBody")).SendKeys("This is my Selenium Message");
		driver.FindElement(By.CssSelector("input[type="submit"]")).Click();
		Assert.AreEqual("Please fill in all three entries before sending the message.", driver.FindElement(By.CssSelector(".err")).Text);
	}
}</pre></div></div>

<p>The only real changes have been the addition of the using statement and changing the decorated attribute from NUnit&#8217;s Test to MS Test&#8217;s TestMethod. </p>
<h3>The Rest of the Test Cases</h3>
<p>Based on this one test, we can easily create tests to satisfy the other conditions:</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="csharp"><thead><tr><td colspan="2"  class="head">C#</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
</pre></td><td class="de1"><pre class="de1"><span class="br0">&#91;</span>TestMethod<span class="br0">&#93;</span>
<span class="kw1">public</span> <span class="kw4">void</span> ContactPageReturnsErrorWhenNameFieldEmpty<span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; <span class="kw1">using</span> <span class="br0">&#40;</span>FirefoxDriver driver <span class="sy0">=</span> <span class="kw3">new</span> FirefoxDriver<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; driver<span class="sy0">.</span><span class="me1">Navigate</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">.</span><span class="me1">GoToUrl</span><span class="br0">&#40;</span><span class="st0">&quot;http://tiernok.com/&quot;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; driver<span class="sy0">.</span><span class="me1">FindElement</span><span class="br0">&#40;</span><span class="kw1">By</span><span class="sy0">.</span><span class="me1">LinkText</span><span class="br0">&#40;</span><span class="st0">&quot;Contact&quot;</span><span class="br0">&#41;</span><span class="br0">&#41;</span><span class="sy0">.</span><span class="me1">Click</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; driver<span class="sy0">.</span><span class="me1">FindElement</span><span class="br0">&#40;</span><span class="kw1">By</span><span class="sy0">.</span><span class="me1">Id</span><span class="br0">&#40;</span><span class="st0">&quot;itxtFromEmail&quot;</span><span class="br0">&#41;</span><span class="br0">&#41;</span><span class="sy0">.</span><span class="me1">Clear</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; driver<span class="sy0">.</span><span class="me1">FindElement</span><span class="br0">&#40;</span><span class="kw1">By</span><span class="sy0">.</span><span class="me1">Id</span><span class="br0">&#40;</span><span class="st0">&quot;itxtFromEmail&quot;</span><span class="br0">&#41;</span><span class="br0">&#41;</span><span class="sy0">.</span><span class="me1">SendKeys</span><span class="br0">&#40;</span>EmailAddress<span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; driver<span class="sy0">.</span><span class="me1">FindElement</span><span class="br0">&#40;</span><span class="kw1">By</span><span class="sy0">.</span><span class="me1">Id</span><span class="br0">&#40;</span><span class="st0">&quot;itxtBody&quot;</span><span class="br0">&#41;</span><span class="br0">&#41;</span><span class="sy0">.</span><span class="me1">Clear</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; driver<span class="sy0">.</span><span class="me1">FindElement</span><span class="br0">&#40;</span><span class="kw1">By</span><span class="sy0">.</span><span class="me1">Id</span><span class="br0">&#40;</span><span class="st0">&quot;itxtBody&quot;</span><span class="br0">&#41;</span><span class="br0">&#41;</span><span class="sy0">.</span><span class="me1">SendKeys</span><span class="br0">&#40;</span><span class="st0">&quot;This is my Selenium Message&quot;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; driver<span class="sy0">.</span><span class="me1">FindElement</span><span class="br0">&#40;</span><span class="kw1">By</span><span class="sy0">.</span><span class="me1">CssSelector</span><span class="br0">&#40;</span><span class="st0">&quot;input[type=&quot;</span>submit<span class="st0">&quot;]&quot;</span><span class="br0">&#41;</span><span class="br0">&#41;</span><span class="sy0">.</span><span class="me1">Click</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; Assert<span class="sy0">.</span><span class="me1">AreEqual</span><span class="br0">&#40;</span><span class="st0">&quot;Please fill in all three entries before sending the message.&quot;</span>, driver<span class="sy0">.</span><span class="me1">FindElement</span><span class="br0">&#40;</span><span class="kw1">By</span><span class="sy0">.</span><span class="me1">CssSelector</span><span class="br0">&#40;</span><span class="st0">&quot;.err&quot;</span><span class="br0">&#41;</span><span class="br0">&#41;</span><span class="sy0">.</span><span class="me1">Text</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; <span class="br0">&#125;</span>
<span class="br0">&#125;</span>
&nbsp;
<span class="br0">&#91;</span>TestMethod<span class="br0">&#93;</span>
<span class="kw1">public</span> <span class="kw4">void</span> ContactPageReturnsErrorWhenMessageFieldEmpty<span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; <span class="kw1">using</span> <span class="br0">&#40;</span>FirefoxDriver driver <span class="sy0">=</span> <span class="kw3">new</span> FirefoxDriver<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; driver<span class="sy0">.</span><span class="me1">Navigate</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">.</span><span class="me1">GoToUrl</span><span class="br0">&#40;</span><span class="st0">&quot;http://tiernok.com/&quot;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; driver<span class="sy0">.</span><span class="me1">FindElement</span><span class="br0">&#40;</span><span class="kw1">By</span><span class="sy0">.</span><span class="me1">LinkText</span><span class="br0">&#40;</span><span class="st0">&quot;Contact&quot;</span><span class="br0">&#41;</span><span class="br0">&#41;</span><span class="sy0">.</span><span class="me1">Click</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; driver<span class="sy0">.</span><span class="me1">FindElement</span><span class="br0">&#40;</span><span class="kw1">By</span><span class="sy0">.</span><span class="me1">Id</span><span class="br0">&#40;</span><span class="st0">&quot;itxtFromName&quot;</span><span class="br0">&#41;</span><span class="br0">&#41;</span><span class="sy0">.</span><span class="me1">Clear</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; driver<span class="sy0">.</span><span class="me1">FindElement</span><span class="br0">&#40;</span><span class="kw1">By</span><span class="sy0">.</span><span class="me1">Id</span><span class="br0">&#40;</span><span class="st0">&quot;itxtFromName&quot;</span><span class="br0">&#41;</span><span class="br0">&#41;</span><span class="sy0">.</span><span class="me1">SendKeys</span><span class="br0">&#40;</span><span class="st0">&quot;Selenium Test&quot;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; driver<span class="sy0">.</span><span class="me1">FindElement</span><span class="br0">&#40;</span><span class="kw1">By</span><span class="sy0">.</span><span class="me1">Id</span><span class="br0">&#40;</span><span class="st0">&quot;itxtFromEmail&quot;</span><span class="br0">&#41;</span><span class="br0">&#41;</span><span class="sy0">.</span><span class="me1">Clear</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; driver<span class="sy0">.</span><span class="me1">FindElement</span><span class="br0">&#40;</span><span class="kw1">By</span><span class="sy0">.</span><span class="me1">Id</span><span class="br0">&#40;</span><span class="st0">&quot;itxtFromEmail&quot;</span><span class="br0">&#41;</span><span class="br0">&#41;</span><span class="sy0">.</span><span class="me1">SendKeys</span><span class="br0">&#40;</span>EmailAddress<span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; driver<span class="sy0">.</span><span class="me1">FindElement</span><span class="br0">&#40;</span><span class="kw1">By</span><span class="sy0">.</span><span class="me1">CssSelector</span><span class="br0">&#40;</span><span class="st0">&quot;input[type=&quot;</span>submit<span class="st0">&quot;]&quot;</span><span class="br0">&#41;</span><span class="br0">&#41;</span><span class="sy0">.</span><span class="me1">Click</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; Assert<span class="sy0">.</span><span class="me1">AreEqual</span><span class="br0">&#40;</span><span class="st0">&quot;Please fill in all three entries before sending the message.&quot;</span>, driver<span class="sy0">.</span><span class="me1">FindElement</span><span class="br0">&#40;</span><span class="kw1">By</span><span class="sy0">.</span><span class="me1">CssSelector</span><span class="br0">&#40;</span><span class="st0">&quot;.err&quot;</span><span class="br0">&#41;</span><span class="br0">&#41;</span><span class="sy0">.</span><span class="me1">Text</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; <span class="br0">&#125;</span>
<span class="br0">&#125;</span>
&nbsp;
<span class="br0">&#91;</span>TestMethod<span class="br0">&#93;</span>
<span class="kw1">public</span> <span class="kw4">void</span> ContactPageReturnsSuccessWhenAllFieldsProvided<span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; <span class="kw1">using</span> <span class="br0">&#40;</span>FirefoxDriver driver <span class="sy0">=</span> <span class="kw3">new</span> FirefoxDriver<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; driver<span class="sy0">.</span><span class="me1">Navigate</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">.</span><span class="me1">GoToUrl</span><span class="br0">&#40;</span><span class="st0">&quot;http://tiernok.com/&quot;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; driver<span class="sy0">.</span><span class="me1">FindElement</span><span class="br0">&#40;</span><span class="kw1">By</span><span class="sy0">.</span><span class="me1">LinkText</span><span class="br0">&#40;</span><span class="st0">&quot;Contact&quot;</span><span class="br0">&#41;</span><span class="br0">&#41;</span><span class="sy0">.</span><span class="me1">Click</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; driver<span class="sy0">.</span><span class="me1">FindElement</span><span class="br0">&#40;</span><span class="kw1">By</span><span class="sy0">.</span><span class="me1">Id</span><span class="br0">&#40;</span><span class="st0">&quot;itxtFromName&quot;</span><span class="br0">&#41;</span><span class="br0">&#41;</span><span class="sy0">.</span><span class="me1">Clear</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; driver<span class="sy0">.</span><span class="me1">FindElement</span><span class="br0">&#40;</span><span class="kw1">By</span><span class="sy0">.</span><span class="me1">Id</span><span class="br0">&#40;</span><span class="st0">&quot;itxtFromName&quot;</span><span class="br0">&#41;</span><span class="br0">&#41;</span><span class="sy0">.</span><span class="me1">SendKeys</span><span class="br0">&#40;</span><span class="st0">&quot;Selenium Test&quot;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; driver<span class="sy0">.</span><span class="me1">FindElement</span><span class="br0">&#40;</span><span class="kw1">By</span><span class="sy0">.</span><span class="me1">Id</span><span class="br0">&#40;</span><span class="st0">&quot;itxtFromEmail&quot;</span><span class="br0">&#41;</span><span class="br0">&#41;</span><span class="sy0">.</span><span class="me1">Clear</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; driver<span class="sy0">.</span><span class="me1">FindElement</span><span class="br0">&#40;</span><span class="kw1">By</span><span class="sy0">.</span><span class="me1">Id</span><span class="br0">&#40;</span><span class="st0">&quot;itxtFromEmail&quot;</span><span class="br0">&#41;</span><span class="br0">&#41;</span><span class="sy0">.</span><span class="me1">SendKeys</span><span class="br0">&#40;</span>EmailAddress<span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; driver<span class="sy0">.</span><span class="me1">FindElement</span><span class="br0">&#40;</span><span class="kw1">By</span><span class="sy0">.</span><span class="me1">Id</span><span class="br0">&#40;</span><span class="st0">&quot;itxtBody&quot;</span><span class="br0">&#41;</span><span class="br0">&#41;</span><span class="sy0">.</span><span class="me1">Clear</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; driver<span class="sy0">.</span><span class="me1">FindElement</span><span class="br0">&#40;</span><span class="kw1">By</span><span class="sy0">.</span><span class="me1">Id</span><span class="br0">&#40;</span><span class="st0">&quot;itxtBody&quot;</span><span class="br0">&#41;</span><span class="br0">&#41;</span><span class="sy0">.</span><span class="me1">SendKeys</span><span class="br0">&#40;</span><span class="st0">&quot;This is my Selenium Message&quot;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; driver<span class="sy0">.</span><span class="me1">FindElement</span><span class="br0">&#40;</span><span class="kw1">By</span><span class="sy0">.</span><span class="me1">CssSelector</span><span class="br0">&#40;</span><span class="st0">&quot;input[type=&quot;</span>submit<span class="st0">&quot;]&quot;</span><span class="br0">&#41;</span><span class="br0">&#41;</span><span class="sy0">.</span><span class="me1">Click</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; Assert<span class="sy0">.</span><span class="me1">AreEqual</span><span class="br0">&#40;</span><span class="st0">&quot;Thanks, your message has been sent successfully.&quot;</span>, driver<span class="sy0">.</span><span class="me1">FindElement</span><span class="br0">&#40;</span><span class="kw1">By</span><span class="sy0">.</span><span class="me1">CssSelector</span><span class="br0">&#40;</span><span class="st0">&quot;.suc&quot;</span><span class="br0">&#41;</span><span class="br0">&#41;</span><span class="sy0">.</span><span class="me1">Text</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; <span class="br0">&#125;</span>
<span class="br0">&#125;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">[TestMethod]
public void ContactPageReturnsErrorWhenNameFieldEmpty() {
	using (FirefoxDriver driver = new FirefoxDriver()) {
		driver.Navigate().GoToUrl("http://tiernok.com/");
		driver.FindElement(By.LinkText("Contact")).Click();
		driver.FindElement(By.Id("itxtFromEmail")).Clear();
		driver.FindElement(By.Id("itxtFromEmail")).SendKeys(EmailAddress);
		driver.FindElement(By.Id("itxtBody")).Clear();
		driver.FindElement(By.Id("itxtBody")).SendKeys("This is my Selenium Message");
		driver.FindElement(By.CssSelector("input[type="submit"]")).Click();
		Assert.AreEqual("Please fill in all three entries before sending the message.", driver.FindElement(By.CssSelector(".err")).Text);
	}
}

[TestMethod]
public void ContactPageReturnsErrorWhenMessageFieldEmpty() {
	using (FirefoxDriver driver = new FirefoxDriver()) {
		driver.Navigate().GoToUrl("http://tiernok.com/");
		driver.FindElement(By.LinkText("Contact")).Click();
		driver.FindElement(By.Id("itxtFromName")).Clear();
		driver.FindElement(By.Id("itxtFromName")).SendKeys("Selenium Test");
		driver.FindElement(By.Id("itxtFromEmail")).Clear();
		driver.FindElement(By.Id("itxtFromEmail")).SendKeys(EmailAddress);
		driver.FindElement(By.CssSelector("input[type="submit"]")).Click();
		Assert.AreEqual("Please fill in all three entries before sending the message.", driver.FindElement(By.CssSelector(".err")).Text);
	}
}

[TestMethod]
public void ContactPageReturnsSuccessWhenAllFieldsProvided() {
	using (FirefoxDriver driver = new FirefoxDriver()) {
		driver.Navigate().GoToUrl("http://tiernok.com/");
		driver.FindElement(By.LinkText("Contact")).Click();
		driver.FindElement(By.Id("itxtFromName")).Clear();
		driver.FindElement(By.Id("itxtFromName")).SendKeys("Selenium Test");
		driver.FindElement(By.Id("itxtFromEmail")).Clear();
		driver.FindElement(By.Id("itxtFromEmail")).SendKeys(EmailAddress);
		driver.FindElement(By.Id("itxtBody")).Clear();
		driver.FindElement(By.Id("itxtBody")).SendKeys("This is my Selenium Message");
		driver.FindElement(By.CssSelector("input[type="submit"]")).Click();
		Assert.AreEqual("Thanks, your message has been sent successfully.", driver.FindElement(By.CssSelector(".suc")).Text);
	}
}</pre></div></div>

<p>Theoretically we&#8217;re done, if we had a few more cases we could keep copying and pasting our way to the finish line. If you recall, however, one of the goals of  moving from Selenium IDE method to a custom solution was to reduce the amount of duplication and the fragility that duplication causes. So far all we have done is transfer that fragility from a series of test cases in the IDE to a series of unit tests in C#.</p>
<h2>Reducing Test Fragility</h2>
<p>When we start writing more than basic smoke tests, we are going to be accessing items repetitively and duplicating ourselves more often. Switching to code has allowed us to create additional tests very quickly, but we haven&#8217;t really solved the duplication issue yet.</p>
<p>There&#8217;s two approaches we can take at this point, abstracting the duplication on our own or using the Page Factory from the Support library to implement the <a href="http://code.google.com/p/selenium/wiki/PageObjects" title="More information on Page Object">Page Object</a> pattern. </p>
<p>The idea of the Page Object pattern is to represent each page in our target application as a class in our test framework. This allows us to reflect functionality and changes in the real page with functionality or changes in our class. Rather than locating and interacting with individual controls in a browser, our tests than interact with these Page Object classes as representations of what the browser should be seeing. </p>
<p>Given we are just getting started with the code approach, lets use the Page Object approach for the Contact page and use the PageFactory that is provided in the Support library to help with the wiring.</p>
<h3>Creating the Contact PageObject</h3>
<p>Before we start making code changes, we need to get the Support library. As before, we can either download it from the <a href="http://seleniumhq.org/download/" title="Selenium WebDriver download page">Selenium website</a> or install it via NuGet:</p>
<div class="commandWrapper">
<div class="commandPrompt">
<p class="command">PM&gt; Install-Package Selenium.Support</p>
</div>
</div>
<p>Next we are going to start modeling our page. Since there is a common layout throughout the site, I&#8217;ll first create a base page object to represent the common elements (like navigation menu items) we will be interacting with:</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="csharp"><thead><tr><td colspan="2"  class="head">C#</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
</pre></td><td class="de1"><pre class="de1"><span class="kw1">namespace</span> SampleWebDriverUnitTest<span class="sy0">.</span><span class="me1">Pages</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; <span class="kw4">class</span> PageBase <span class="br0">&#123;</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#91;</span>FindsBy<span class="br0">&#40;</span>How <span class="sy0">=</span> How<span class="sy0">.</span><span class="me1">LinkText</span>, <span class="kw1">Using</span> <span class="sy0">=</span> <span class="st0">&quot;Contact&quot;</span><span class="br0">&#41;</span><span class="br0">&#93;</span>
&nbsp; &nbsp; &nbsp; &nbsp; IWebElement ContactLink<span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">public</span> <span class="kw4">void</span> NavigateContactLink<span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ContactLink<span class="sy0">.</span><span class="me1">Click</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp;
&nbsp; &nbsp; <span class="br0">&#125;</span>
<span class="br0">&#125;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">namespace SampleWebDriverUnitTest.Pages {
	class PageBase {

		[FindsBy(How = How.LinkText, Using = "Contact")]
		IWebElement ContactLink;

		public void NavigateContactLink() {
			ContactLink.Click();
		}

	}
}</pre></div></div>

<p>Then we can extend this class to define the elements that are specific to the Contact form:</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="csharp"><thead><tr><td colspan="2"  class="head">C#</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
</pre></td><td class="de1"><pre class="de1"><span class="kw1">namespace</span> SampleWebDriverUnitTest<span class="sy0">.</span><span class="me1">Pages</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; <span class="kw4">class</span> ContactPage <span class="sy0">:</span> PageBase <span class="br0">&#123;</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#91;</span>FindsBy<span class="br0">&#40;</span>How<span class="sy0">=</span>How<span class="sy0">.</span><span class="me1">Id</span>, <span class="kw1">Using</span><span class="sy0">=</span><span class="st0">&quot;itxtFromEmail&quot;</span><span class="br0">&#41;</span><span class="br0">&#93;</span>
&nbsp; &nbsp; &nbsp; &nbsp; IWebElement EmailInput<span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#91;</span>FindsBy<span class="br0">&#40;</span>How <span class="sy0">=</span> How<span class="sy0">.</span><span class="me1">Id</span>, <span class="kw1">Using</span> <span class="sy0">=</span> <span class="st0">&quot;itxtFromName&quot;</span><span class="br0">&#41;</span><span class="br0">&#93;</span>
&nbsp; &nbsp; &nbsp; &nbsp; IWebElement NameInput<span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#91;</span>FindsBy<span class="br0">&#40;</span>How <span class="sy0">=</span> How<span class="sy0">.</span><span class="me1">Id</span>, <span class="kw1">Using</span> <span class="sy0">=</span> <span class="st0">&quot;itxtBody&quot;</span><span class="br0">&#41;</span><span class="br0">&#93;</span>
&nbsp; &nbsp; &nbsp; &nbsp; IWebElement BodyInput<span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#91;</span>FindsBy<span class="br0">&#40;</span>How <span class="sy0">=</span> How<span class="sy0">.</span><span class="me1">CssSelector</span>, <span class="kw1">Using</span> <span class="sy0">=</span> <span class="st0">&quot;input[type=submit]&quot;</span><span class="br0">&#41;</span><span class="br0">&#93;</span>
&nbsp; &nbsp; &nbsp; &nbsp; IWebElement SubmitInput<span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#91;</span>FindsBy<span class="br0">&#40;</span>How <span class="sy0">=</span> How<span class="sy0">.</span><span class="me1">CssSelector</span>, <span class="kw1">Using</span> <span class="sy0">=</span> <span class="st0">&quot;.err&quot;</span><span class="br0">&#41;</span><span class="br0">&#93;</span>
&nbsp; &nbsp; &nbsp; &nbsp; IWebElement ErrorMessage<span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#91;</span>FindsBy<span class="br0">&#40;</span>How <span class="sy0">=</span> How<span class="sy0">.</span><span class="me1">CssSelector</span>, <span class="kw1">Using</span> <span class="sy0">=</span> <span class="st0">&quot;.suc&quot;</span><span class="br0">&#41;</span><span class="br0">&#93;</span>
&nbsp; &nbsp; &nbsp; &nbsp; IWebElement SuccessMessage<span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">public</span> <span class="kw4">void</span> SendEmail<span class="br0">&#40;</span><span class="kw4">string</span> name, <span class="kw4">string</span> email, <span class="kw4">string</span> body<span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">if</span> <span class="br0">&#40;</span><span class="sy0">!</span><span class="kw4">string</span><span class="sy0">.</span><span class="me1">IsNullOrEmpty</span><span class="br0">&#40;</span>email<span class="br0">&#41;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; EmailInput<span class="sy0">.</span><span class="me1">Clear</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; EmailInput<span class="sy0">.</span><span class="me1">SendKeys</span><span class="br0">&#40;</span>email<span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">if</span> <span class="br0">&#40;</span><span class="sy0">!</span><span class="kw4">string</span><span class="sy0">.</span><span class="me1">IsNullOrEmpty</span><span class="br0">&#40;</span>name<span class="br0">&#41;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; NameInput<span class="sy0">.</span><span class="me1">Clear</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; NameInput<span class="sy0">.</span><span class="me1">SendKeys</span><span class="br0">&#40;</span>name<span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">if</span> <span class="br0">&#40;</span><span class="sy0">!</span><span class="kw4">string</span><span class="sy0">.</span><span class="me1">IsNullOrEmpty</span><span class="br0">&#40;</span>body<span class="br0">&#41;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; BodyInput<span class="sy0">.</span><span class="me1">Clear</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; BodyInput<span class="sy0">.</span><span class="me1">SendKeys</span><span class="br0">&#40;</span>body<span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; SubmitInput<span class="sy0">.</span><span class="me1">Click</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; <span class="co1">// try/catches below are due to selenium using exceptions to indicate search failures rather than an empty result or null</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">public</span> <span class="kw4">bool</span> IsDisplayingValidationError<span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">get</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">try</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">return</span> ErrorMessage<span class="sy0">.</span><span class="me1">Displayed</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">catch</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">return</span> <span class="kw1">false</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">public</span> <span class="kw4">bool</span> IsDisplayingSuccessMessage <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">get</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">try</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">return</span> SuccessMessage<span class="sy0">.</span><span class="me1">Displayed</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">catch</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">return</span> <span class="kw1">false</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span> &nbsp; 
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp; &nbsp; <span class="br0">&#125;</span>
<span class="br0">&#125;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">namespace SampleWebDriverUnitTest.Pages {
	class ContactPage : PageBase {

		[FindsBy(How=How.Id, Using="itxtFromEmail")]
		IWebElement EmailInput;

		[FindsBy(How = How.Id, Using = "itxtFromName")]
		IWebElement NameInput;

		[FindsBy(How = How.Id, Using = "itxtBody")]
		IWebElement BodyInput;

		[FindsBy(How = How.CssSelector, Using = "input[type=submit]")]
		IWebElement SubmitInput;

		[FindsBy(How = How.CssSelector, Using = ".err")]
		IWebElement ErrorMessage;

		[FindsBy(How = How.CssSelector, Using = ".suc")]
		IWebElement SuccessMessage;

		public void SendEmail(string name, string email, string body) {
			if (!string.IsNullOrEmpty(email)) {
				EmailInput.Clear();
				EmailInput.SendKeys(email);
			}

			if (!string.IsNullOrEmpty(name)) {
				NameInput.Clear();
				NameInput.SendKeys(name);
			}

			if (!string.IsNullOrEmpty(body)) {
				BodyInput.Clear();
				BodyInput.SendKeys(body);
			}

			SubmitInput.Click();
		}

		// try/catches below are due to selenium using exceptions to indicate search failures rather than an empty result or null

		public bool IsDisplayingValidationError{
			get {
				try {
					return ErrorMessage.Displayed;
				}
				catch {
					return false;
				}
			}
		}

		public bool IsDisplayingSuccessMessage {
			get {
				try {
					return SuccessMessage.Displayed;
				}
				catch {
					return false;
				}	
			}
		}
	}
}</pre></div></div>

<p>The PageFactory object is responsible for wiring our page objects to the actual page displayed in the browser. It attempts to match each IWebElement in the class to an element in the web page. By default, if you do not decorate the field with the FindsBy decorator then it will search for an element who&#8217;s ID matches the variable name. I prefer to explicitly specify the find criteria, though, as this lets me name my variables consistently and limits the impact of an HTML change to a single decorator instead of causing a property name change.</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="csharp"><thead><tr><td colspan="2"  class="head">C#</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
</pre></td><td class="de1"><pre class="de1"><span class="br0">&#91;</span>TestMethod<span class="br0">&#93;</span>
<span class="kw1">public</span> <span class="kw4">void</span> ContactPageReturnsErrorWhenEmailFieldEmpty_PageObjectVersion<span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; <span class="kw1">using</span> <span class="br0">&#40;</span>FirefoxDriver driver <span class="sy0">=</span> <span class="kw3">new</span> FirefoxDriver<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; driver<span class="sy0">.</span><span class="me1">Navigate</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">.</span><span class="me1">GoToUrl</span><span class="br0">&#40;</span><span class="st0">&quot;http://tiernok.com/&quot;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; Pages<span class="sy0">.</span><span class="me1">PageBase</span> homepage <span class="sy0">=</span> <span class="kw3">new</span> Pages<span class="sy0">.</span><span class="me1">PageBase</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; PageFactory<span class="sy0">.</span><span class="me1">InitElements</span><span class="br0">&#40;</span>driver, homepage<span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; homepage<span class="sy0">.</span><span class="me1">NavigateContactLink</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; Pages<span class="sy0">.</span><span class="me1">ContactPage</span> contactPage <span class="sy0">=</span> <span class="kw3">new</span> Pages<span class="sy0">.</span><span class="me1">ContactPage</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; PageFactory<span class="sy0">.</span><span class="me1">InitElements</span><span class="br0">&#40;</span>driver, contactPage<span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; contactPage<span class="sy0">.</span><span class="me1">SendEmail</span><span class="br0">&#40;</span><span class="st0">&quot;Selenium Test&quot;</span>, <span class="st0">&quot;&quot;</span>, <span class="st0">&quot;This is my Selenium Test Message&quot;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; Assert<span class="sy0">.</span><span class="me1">IsTrue</span><span class="br0">&#40;</span>contactPage<span class="sy0">.</span><span class="me1">IsDisplayingValidationError</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; <span class="br0">&#125;</span>
<span class="br0">&#125;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">[TestMethod]
public void ContactPageReturnsErrorWhenEmailFieldEmpty_PageObjectVersion() {
	using (FirefoxDriver driver = new FirefoxDriver()) {
		driver.Navigate().GoToUrl("http://tiernok.com/");

		Pages.PageBase homepage = new Pages.PageBase();
		PageFactory.InitElements(driver, homepage);
		homepage.NavigateContactLink();

		Pages.ContactPage contactPage = new Pages.ContactPage();
		PageFactory.InitElements(driver, contactPage);
		contactPage.SendEmail("Selenium Test", "", "This is my Selenium Test Message");

		Assert.IsTrue(contactPage.IsDisplayingValidationError);
	}
}</pre></div></div>

<p>The new code:</p>
<ul>
<ol>navigates to the site</ol>
<ol>creates an instance of the base page</ol>
<ol>clicks the navigation link for the Contact Page</ol>
<ol>assumes it is on the contact page and creates an instance of that object</ol>
<ol>Sends an email with two of the three values filled in</ol>
<ol>Asserts that the error message is displayed</ol>
</ul>
<p>However, this code still has problems. </p>
<h3>Refining and Correcting the First Test</h3>
<p>The current code, in my opinion, doesn&#8217;t fail soon enough if it is on the wrong page. In addition, this first test we&#8217;ve converted is not very readable and I can already tell there is going to be a lot of duplication in later tests. Let&#8217;s do some refactoring.</p>
<p>Rather than repetitively initializing page objects in each test and and adding title verification to each test, lets move that behavior to the PageBase so we can easily do it for every page we load.</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="csharp"><thead><tr><td colspan="2"  class="head">C#</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
</pre></td><td class="de1"><pre class="de1"><span class="kw4">class</span> PageBase <span class="br0">&#123;</span>
&nbsp; &nbsp; <span class="kw1">public</span> RemoteWebDriver Driver <span class="br0">&#123;</span> <span class="kw1">get</span><span class="sy0">;</span> <span class="kw1">set</span><span class="sy0">;</span> <span class="br0">&#125;</span>
&nbsp; &nbsp; <span class="kw1">public</span> <span class="kw4">string</span> ExpectedTitle <span class="br0">&#123;</span> <span class="kw1">get</span><span class="sy0">;</span>set<span class="sy0">;</span> <span class="br0">&#125;</span>
&nbsp;
&nbsp; &nbsp; <span class="co1">// ... unchanged code ...</span>
&nbsp;
&nbsp; &nbsp; <span class="kw1">public</span> <span class="kw1">static</span> TPage GetInstance<span class="sy0">&lt;</span>TPage<span class="sy0">&gt;</span><span class="br0">&#40;</span>RemoteWebDriver driver, <span class="kw4">string</span> expectedTitle<span class="br0">&#41;</span> <span class="kw1">where</span> TPage <span class="sy0">:</span> PageBase, <span class="kw3">new</span><span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; TPage pageInstance <span class="sy0">=</span> <span class="kw3">new</span> TPage<span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span> 
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ExpectedTitle <span class="sy0">=</span> expectedTitle,
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Driver <span class="sy0">=</span> driver
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; PageFactory<span class="sy0">.</span><span class="me1">InitElements</span><span class="br0">&#40;</span>driver, pageInstance<span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; Assert<span class="sy0">.</span><span class="me1">AreEqual</span><span class="br0">&#40;</span>pageInstance<span class="sy0">.</span><span class="me1">ExpectedTitle</span>, driver<span class="sy0">.</span><span class="me1">Title</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">return</span> pageInstance<span class="sy0">;</span>
&nbsp; &nbsp; <span class="br0">&#125;</span>
<span class="br0">&#125;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">class PageBase {
	public RemoteWebDriver Driver { get; set; }
	public string ExpectedTitle { get;set; }

	// ... unchanged code ...

	public static TPage GetInstance&lt;TPage&gt;(RemoteWebDriver driver, string expectedTitle) where TPage : PageBase, new() {
		TPage pageInstance = new TPage() { 
			ExpectedTitle = expectedTitle,
			Driver = driver
		};
		PageFactory.InitElements(driver, pageInstance);

		Assert.AreEqual(pageInstance.ExpectedTitle, driver.Title);

		return pageInstance;
	}
}</pre></div></div>

<p>Now we have a single generic call that can create a Page (provided it inherits from PageBase and has a constructor) and execute an assertion on it&#8217;s title. Lets update the NavigateContactLink method to return an initialized ContactPage instance, since this will be a consistent next step each time we navigate to a new page. This reduces the amount of code in the test and adds an automatic check to ensure we have reached the page we were expecting.</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="csharp"><thead><tr><td colspan="2"  class="head">C#</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
</pre></td><td class="de1"><pre class="de1"><span class="kw4">class</span> PageBase <span class="br0">&#123;</span>
&nbsp; &nbsp; <span class="co1">// ... unchanged ...</span>
&nbsp;
&nbsp; &nbsp; <span class="kw1">public</span> ContactPage NavigateContactLink<span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; ContactLink<span class="sy0">.</span><span class="me1">Click</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">return</span> GetInstance<span class="sy0">&lt;</span>ContactPage<span class="sy0">&gt;</span><span class="br0">&#40;</span>Driver, <span class="st0">&quot;Eli Weinstock-Herman | Tarwn - Contact&quot;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp;
&nbsp; &nbsp; <span class="co1">// ... unchanged ...</span>
<span class="br0">&#125;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">class PageBase {
	// ... unchanged ...

	public ContactPage NavigateContactLink() {
		ContactLink.Click();
		return GetInstance&lt;ContactPage&gt;(Driver, "Eli Weinstock-Herman | Tarwn - Contact");
	}

	// ... unchanged ...
}</pre></div></div>

<p>Our refactored test now looks like this:</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="csharp"><thead><tr><td colspan="2"  class="head">C#</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
</pre></td><td class="de1"><pre class="de1"><span class="br0">&#91;</span>TestMethod<span class="br0">&#93;</span>
<span class="kw1">public</span> <span class="kw4">void</span> ContactPageReturnsErrorWhenEmailFieldEmpty_PageObjectVersion<span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; <span class="kw1">using</span> <span class="br0">&#40;</span>FirefoxDriver driver <span class="sy0">=</span> <span class="kw3">new</span> FirefoxDriver<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; driver<span class="sy0">.</span><span class="me1">Navigate</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">.</span><span class="me1">GoToUrl</span><span class="br0">&#40;</span><span class="st0">&quot;http://tiernok.com/&quot;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; PageBase homepage <span class="sy0">=</span> PageBase<span class="sy0">.</span><span class="me1">GetInstance</span><span class="sy0">&lt;</span>PageBase<span class="sy0">&gt;</span><span class="br0">&#40;</span>driver, <span class="st0">&quot;Eli Weinstock-Herman | Tarwn&quot;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; ContactPage contactPage <span class="sy0">=</span> homepage<span class="sy0">.</span><span class="me1">NavigateContactLink</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; 
&nbsp; &nbsp; &nbsp; &nbsp; contactPage<span class="sy0">.</span><span class="me1">SendEmail</span><span class="br0">&#40;</span><span class="st0">&quot;Selenium Test&quot;</span>, <span class="st0">&quot;&quot;</span>, <span class="st0">&quot;This is my Selenium Test Message&quot;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; Assert<span class="sy0">.</span><span class="me1">IsTrue</span><span class="br0">&#40;</span>contactPage<span class="sy0">.</span><span class="me1">IsDisplayingValidationError</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; <span class="br0">&#125;</span>
<span class="br0">&#125;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">[TestMethod]
public void ContactPageReturnsErrorWhenEmailFieldEmpty_PageObjectVersion() {
	using (FirefoxDriver driver = new FirefoxDriver()) {
		driver.Navigate().GoToUrl("http://tiernok.com/");

		PageBase homepage = PageBase.GetInstance&lt;PageBase&gt;(driver, "Eli Weinstock-Herman | Tarwn");
		ContactPage contactPage = homepage.NavigateContactLink();
		
		contactPage.SendEmail("Selenium Test", "", "This is my Selenium Test Message");

		Assert.IsTrue(contactPage.IsDisplayingValidationError);
	}
}</pre></div></div>

<p>There is still some additional refactoring we could do, but this is far more readable, has reduced the level of duplication, and added title checks.</p>
<h3>Converting the Remaining Tests</h3>
<p>Converting the remining tests is a straightforward exercise.</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="csharp"><thead><tr><td colspan="2"  class="head">C#</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
</pre></td><td class="de1"><pre class="de1"><span class="br0">&#91;</span>TestMethod<span class="br0">&#93;</span>
<span class="kw1">public</span> <span class="kw4">void</span> ContactPageReturnsErrorWhenEmailFieldEmpty<span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; <span class="kw1">using</span> <span class="br0">&#40;</span>FirefoxDriver driver <span class="sy0">=</span> <span class="kw3">new</span> FirefoxDriver<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; driver<span class="sy0">.</span><span class="me1">Navigate</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">.</span><span class="me1">GoToUrl</span><span class="br0">&#40;</span><span class="st0">&quot;http://tiernok.com/&quot;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; PageBase homepage <span class="sy0">=</span> PageBase<span class="sy0">.</span><span class="me1">GetInstance</span><span class="sy0">&lt;</span>PageBase<span class="sy0">&gt;</span><span class="br0">&#40;</span>driver, <span class="st0">&quot;Eli Weinstock-Herman | Tarwn&quot;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; ContactPage contactPage <span class="sy0">=</span> homepage<span class="sy0">.</span><span class="me1">NavigateContactLink</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; contactPage<span class="sy0">.</span><span class="me1">SendEmail</span><span class="br0">&#40;</span><span class="st0">&quot;Selenium Test&quot;</span>, <span class="st0">&quot;&quot;</span>, <span class="st0">&quot;This is my Selenium Test Message&quot;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; Assert<span class="sy0">.</span><span class="me1">IsTrue</span><span class="br0">&#40;</span>contactPage<span class="sy0">.</span><span class="me1">IsDisplayingValidationError</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; <span class="br0">&#125;</span>
<span class="br0">&#125;</span>
&nbsp;
<span class="br0">&#91;</span>TestMethod<span class="br0">&#93;</span>
<span class="kw1">public</span> <span class="kw4">void</span> ContactPageReturnsErrorWhenNameFieldEmpty<span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; <span class="kw1">using</span> <span class="br0">&#40;</span>FirefoxDriver driver <span class="sy0">=</span> <span class="kw3">new</span> FirefoxDriver<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; driver<span class="sy0">.</span><span class="me1">Navigate</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">.</span><span class="me1">GoToUrl</span><span class="br0">&#40;</span><span class="st0">&quot;http://tiernok.com/&quot;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; PageBase homepage <span class="sy0">=</span> PageBase<span class="sy0">.</span><span class="me1">GetInstance</span><span class="sy0">&lt;</span>PageBase<span class="sy0">&gt;</span><span class="br0">&#40;</span>driver, <span class="st0">&quot;Eli Weinstock-Herman | Tarwn&quot;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; ContactPage contactPage <span class="sy0">=</span> homepage<span class="sy0">.</span><span class="me1">NavigateContactLink</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; contactPage<span class="sy0">.</span><span class="me1">SendEmail</span><span class="br0">&#40;</span><span class="st0">&quot;&quot;</span>, EmailAddress, <span class="st0">&quot;This is my Selenium Test Message&quot;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; Assert<span class="sy0">.</span><span class="me1">IsTrue</span><span class="br0">&#40;</span>contactPage<span class="sy0">.</span><span class="me1">IsDisplayingValidationError</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; <span class="br0">&#125;</span>
<span class="br0">&#125;</span>
&nbsp;
<span class="br0">&#91;</span>TestMethod<span class="br0">&#93;</span>
<span class="kw1">public</span> <span class="kw4">void</span> ContactPageReturnsErrorWhenMessageFieldEmpty<span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; <span class="kw1">using</span> <span class="br0">&#40;</span>FirefoxDriver driver <span class="sy0">=</span> <span class="kw3">new</span> FirefoxDriver<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; driver<span class="sy0">.</span><span class="me1">Navigate</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">.</span><span class="me1">GoToUrl</span><span class="br0">&#40;</span><span class="st0">&quot;http://tiernok.com/&quot;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; PageBase homepage <span class="sy0">=</span> PageBase<span class="sy0">.</span><span class="me1">GetInstance</span><span class="sy0">&lt;</span>PageBase<span class="sy0">&gt;</span><span class="br0">&#40;</span>driver, <span class="st0">&quot;Eli Weinstock-Herman | Tarwn&quot;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; ContactPage contactPage <span class="sy0">=</span> homepage<span class="sy0">.</span><span class="me1">NavigateContactLink</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; contactPage<span class="sy0">.</span><span class="me1">SendEmail</span><span class="br0">&#40;</span><span class="st0">&quot;Selenium Test&quot;</span>, EmailAddress, <span class="st0">&quot;&quot;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; Assert<span class="sy0">.</span><span class="me1">IsTrue</span><span class="br0">&#40;</span>contactPage<span class="sy0">.</span><span class="me1">IsDisplayingValidationError</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; <span class="br0">&#125;</span>
<span class="br0">&#125;</span>
&nbsp;
<span class="br0">&#91;</span>TestMethod<span class="br0">&#93;</span>
<span class="kw1">public</span> <span class="kw4">void</span> ContactPageReturnsSuccessWhenAllFieldsProvided<span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; <span class="kw1">using</span> <span class="br0">&#40;</span>FirefoxDriver driver <span class="sy0">=</span> <span class="kw3">new</span> FirefoxDriver<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; driver<span class="sy0">.</span><span class="me1">Navigate</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">.</span><span class="me1">GoToUrl</span><span class="br0">&#40;</span><span class="st0">&quot;http://tiernok.com/&quot;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; PageBase homepage <span class="sy0">=</span> PageBase<span class="sy0">.</span><span class="me1">GetInstance</span><span class="sy0">&lt;</span>PageBase<span class="sy0">&gt;</span><span class="br0">&#40;</span>driver, <span class="st0">&quot;Eli Weinstock-Herman | Tarwn&quot;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; ContactPage contactPage <span class="sy0">=</span> homepage<span class="sy0">.</span><span class="me1">NavigateContactLink</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; contactPage<span class="sy0">.</span><span class="me1">SendEmail</span><span class="br0">&#40;</span><span class="st0">&quot;Selenium Test&quot;</span>, EmailAddress, <span class="st0">&quot;This is my Selenium Message&quot;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; Assert<span class="sy0">.</span><span class="me1">IsTrue</span><span class="br0">&#40;</span>contactPage<span class="sy0">.</span><span class="me1">IsDisplayingSuccessMessage</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; <span class="br0">&#125;</span>
<span class="br0">&#125;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">[TestMethod]
public void ContactPageReturnsErrorWhenEmailFieldEmpty() {
	using (FirefoxDriver driver = new FirefoxDriver()) {
		driver.Navigate().GoToUrl("http://tiernok.com/");
		PageBase homepage = PageBase.GetInstance&lt;PageBase&gt;(driver, "Eli Weinstock-Herman | Tarwn");
		ContactPage contactPage = homepage.NavigateContactLink();

		contactPage.SendEmail("Selenium Test", "", "This is my Selenium Test Message");

		Assert.IsTrue(contactPage.IsDisplayingValidationError);
	}
}

[TestMethod]
public void ContactPageReturnsErrorWhenNameFieldEmpty() {
	using (FirefoxDriver driver = new FirefoxDriver()) {
		driver.Navigate().GoToUrl("http://tiernok.com/");
		PageBase homepage = PageBase.GetInstance&lt;PageBase&gt;(driver, "Eli Weinstock-Herman | Tarwn");
		ContactPage contactPage = homepage.NavigateContactLink();

		contactPage.SendEmail("", EmailAddress, "This is my Selenium Test Message");

		Assert.IsTrue(contactPage.IsDisplayingValidationError);
	}
}

[TestMethod]
public void ContactPageReturnsErrorWhenMessageFieldEmpty() {
	using (FirefoxDriver driver = new FirefoxDriver()) {
		driver.Navigate().GoToUrl("http://tiernok.com/");
		PageBase homepage = PageBase.GetInstance&lt;PageBase&gt;(driver, "Eli Weinstock-Herman | Tarwn");
		ContactPage contactPage = homepage.NavigateContactLink();

		contactPage.SendEmail("Selenium Test", EmailAddress, "");

		Assert.IsTrue(contactPage.IsDisplayingValidationError);
	}
}

[TestMethod]
public void ContactPageReturnsSuccessWhenAllFieldsProvided() {
	using (FirefoxDriver driver = new FirefoxDriver()) {
		driver.Navigate().GoToUrl("http://tiernok.com/");
		PageBase homepage = PageBase.GetInstance&lt;PageBase&gt;(driver, "Eli Weinstock-Herman | Tarwn");
		ContactPage contactPage = homepage.NavigateContactLink();

		contactPage.SendEmail("Selenium Test", EmailAddress, "This is my Selenium Message");

		Assert.IsTrue(contactPage.IsDisplayingSuccessMessage);
	}
}</pre></div></div>

<p>There is additional refactoring we could do at this stage. The hardcoded page titles and repeated driver.Navigate() calls could be cleaned up to further reduce duplication and make the tests more readable. As we add more pages and more tests, we are going to find other common functionality to refactor and other necessary functionality to add. The framework I end up building through aggressive refactoring of these tests may not look like the one that you end up with, but we will be reaching in the same direction.</p>
<h2>Review</h2>
<p>We have created the beginning of a more extensive test framework that enables us to create more complex tests with less duplication and effort. Refactoring common elements improved maintainability and our ability to react to changes, while using the PageObject pattern has started to separate the subject of our tests from the mechanics of how we interact with the browser.</p>
<p>As before, though, there are some points to return to.</p>
<h3>Complexity, Investment, and Code Errors</h3>
<p>Getting started with some Selenium IDE tests was pretty easy. A customer solution, by comparison, scales farther but requires more up front investment and introduces the potential for errors inside the framework that could adversely affect the test results. Despite using an existing Test Runner and the PageFactory object for wiring, I still managed to make errors along the way. In one case, I actually lost time chasing down something that I thought was a timing issue (which you will run into at some point) that was actually a simple error in my code.</p>
<p>Experience helps a lot in this area, as does following good code craftsmanship standards, refactoring aggressively, using consistent naming, and trying to keep the bigger picture of the framework in mind. Along the way I made variable type selections to specifically set myself up for later additions I want (choosing RemoteWebDriver over IWebDriver in several cases, for instance) and despite needing only one NavigateClick function for this sample, I created a pattern I would intend to follow for the rest of the navigation menu. Experience will help tell us these things are available, but first we have to make the mistakes and experiments along the way to gain that experience.</p>
<h3>Moving Forward</h3>
<p>From automating basic smoke tests and HTML element interactions we have moved into the realm of interacting with web pages and actions on those web pages. We can abstract a step further, though, and start focusing on validating what the end user has asked for. The next level is a framework that abstracts the web page away, leaving us to interact with higher level functions and processes, validating whether the application fulfills the users acceptance criteria.</p>
<h3>Finishing Up</h3>
<p>The Selenium WebDriver library offers some great capabilities. Using a handy Unit Testing framework and Test Runner can help give us a solution that is halfway between automated acceptance testing and Selenium IDE in a fairly short period of time. There are still a lot of areas we haven&#8217;t discussed, such as integrating with a build server or tying into multiple browser drivers, but this post has already run a bit longer than the prior one. If you are interested, the code for this post is in a <a href="https://bitbucket.org/tarwn/seleniumwebdriversample/" title="Source code for the post">mercurial repository on bitbucket</a> and as always we can continue discussing any of the points in the post in the comments here or in the forum area.</p>
]]></content:encoded>
			<wfw:commentRss>/index.php/webdev/uidevelopment/automated-web-testing-with-selenium-2/feed/</wfw:commentRss>
		<slash:comments>18</slash:comments>
		</item>
		<item>
		<title>Automated Web Testing with Selenium IDE</title>
		<link>/index.php/webdev/uidevelopment/automated-web-testing-with-selenium/</link>
		<comments>/index.php/webdev/uidevelopment/automated-web-testing-with-selenium/#comments</comments>
		<pubDate>Wed, 26 Oct 2011 11:18:00 +0000</pubDate>
		<dc:creator><![CDATA[Eli Weinstock-Herman (tarwn)]]></dc:creator>
				<category><![CDATA[UI Development]]></category>
		<category><![CDATA[automated testing]]></category>
		<category><![CDATA[integration testing]]></category>
		<category><![CDATA[selenium]]></category>

		<guid isPermaLink="false">/index.php/2011/10/automated-web-testing-with-selenium/</guid>
		<description><![CDATA[How long does it take to browse through a website after each build and make sure none of the pages have mysteriously blown up? 5 Minutes? 20? No time at all? The time we invest in manual testing adds up. As we switch focus to newer parts of a site we may even stop testing the ones we 'finished', confidant that they're stable and won't be affected by our newer changes (yeah right).]]></description>
				<content:encoded><![CDATA[<p>How long does it take to browse through a website after each build and make sure none of the pages have mysteriously blown up? 5 Minutes? 20? No time at all? The time we invest in manual testing adds up. As we switch focus to newer parts of a site we may even stop testing the ones we &#8216;finished&#8217;, confident that they&#8217;re stable and won&#8217;t be affected by our newer changes (yeah right). And despite the time spent manually testing, we still eventually deploy issues that a 30s check in the right part of the application would have detected.</p>
<p>Enter browser automation tools, such as Selenium. With browser automation tools we can invest some extra time up front to define those manual tests in code, then continue to run those tests long past the time we would have stopped doing it manually. </p>
<p><em>Note: This post is a walk-through for creating some automated browser test cases. To get the most from it you will probably want to download the tool below and launch it from a second browser so you can follow along. It assumes you have Firefox installed and are comfortable with HTML and css selectors.</em></p>
<h2>The Smoke Test</h2>
<p>There are levels to automated testing, starting with &#8220;none&#8221; and ending with some fairly complex industry packages and/or in-house frameworks. Today we&#8217;re going to look at the cheapest option, recording and rerunning a set of tests using <a href="http://seleniumhq.org/projects/ide/" title="Go to the Selenium IDE website">Selenium IDE</a>, a Firefox browser plugin. At this level we can replace many of our manual smoke tests with an automated set for a low initial investment.</p>
<p>Selenium IDE is a browser plugin that can record and playback actions we make in the browser. Using Selenium we can record a set of paths through our website, add some checks, and be reasonably confidant that the site is still working. </p>
<p>Pros: Free, Low up front time cost<br />
Cons: Tests are fragile*, Potential for lots of duplication*, tests run on local browser<br />
Neutral: There&#8217;s a learning curve but good documentation and quick feedback*</p>
<p>* I&#8217;ll come back to these three points</p>
<p>For the purposes of the post, we will use a couple pages from my personal website. We will create two tests to verify the main page loads properly and that the contact form submits and validates properly. In the even that I make a change to a shared file, these tests will ensure the pages continue to pass some basic tests.</p>
<h2>Getting Started</h2>
<p>First we need to download the plugin (assuming you have Firefox installed): <a href="http://seleniumhq.org/download/" title="Download the plugin">Download Selenium IDE</a>.</p>
<p>After downloading the plugin and restarting, we should have a &#8220;Selenium IDE&#8221; option in the Tools menu (Windows users can press the &#8216;Alt&#8217; key to see the top menu). </p>
<div style="text-align: center; margin: 1em; color: #666666; font-size: 80%">
<img src="http://tiernok.com/LTDBlog/selenium/FF_Menu.jpg" alt="Selenium IDE in Firefox" /><br />
Selenium IDE in the Firefox Menu
</div>
<p>Pressing that Selenium IDE button will give us both a popup interface and a set of release notes that unfortunately are probably less than useful to a first time user.</p>
<div style="text-align: center; margin: 1em; color: #666666; font-size: 80%">
<img src="http://tiernok.com/LTDBlog/selenium/SeleniumIDE.jpg" alt="Selenium IDE" /><br />
Selenium IDE
</div>
<p>The main areas of the interface are:</p>
<ul>
<li>A test case list on the left which displays the list of &#8220;Test Cases&#8221; in the current &#8220;Test Suite&#8221;</li>
<li>A command window in the main viewing area, which will display the individual commands we execute as part of selected test case</li>
<li>A series of tabs at the bottom, of which we will only be interacting with the Log and Reference initially</li>
</ul>
<p>So now that we have an interface, lets jump into creating the first test case to give us something to explore.</p>
<p><em>Note: The FireBug Firefox extension is an invaluable tool when working with Selenium, I highly recommend you <a href="http://getfirebug.com/" title="Go get Firebug Extension">download FireBug</a> if you don&#8217;t already have it.</em></p>
<h2>The First Test Case</h2>
<p>Before we start recording our first test case, it&#8217;s a good idea to create a saved Test Suite file. Pay careful attention to the title bar for the file dialog, as it will first ask you to save the Untitled test and then ask to save the Untitled Test Suite. Out of personal preference, I use a &#8220;.testsuite&#8221; and &#8220;.test&#8221; extension for my selenium IDE files.</p>
<dl>
<dt>Test Suite </dt>
<dd>A group of test cases, including their name and filename</dd>
<dt>Test Case</dt>
<dd>A series of commands that reports a single Pass/Fail result when they are run</dd>
</dl>
<p>We are now ready to start recording our first test. This test will click the &#8220;home&#8221; link in my website, verify we are on the right page, and verify two books are shown from my reading list.</p>
<h3>Creating a Basic Recording</h3>
<p>With our browser open, click the red circular icon on the right side of the Selenium IDE toolbar <img src="http://tiernok.com/LTDBlog/selenium/SeleniumIDE_RecordButton.jpg" alt="Record button" />. This tells Selenium IDE to start recording our browser interactions. Returning to the browser window, enter &#8220;http://tiernok.com&/#8221; in the address bar to navigate to the site. Click the &#8220;home&#8221; link in the navigation will load the index page. Once this is done, we can return to the IDE and stop the recording by pressing the record button again.</p>
<p>At this point we see a few things in the interface. </p>
<div style="text-align: center; margin: 1em; color: #666666; font-size: 80%">
<img src="http://tiernok.com/LTDBlog/selenium/SeleniumIDE_Rec_01.jpg" alt="Selenium IDE - Getting Started" /><br />
Selenium IDE &#8211; Getting Started
</div>
<p>The Base URL field above the toolbar has populated with the URL of the site we are testing, the &#8220;Untitled&#8221; test case has a star next to it to indicate unsaved changes, and the command list in the right window has been populated with two commands. Let&#8217;s save these changes (Ctrl + S) and test them. Navigate the browser to a different site, return to the Selenium IDE window, and press the &#8220;Play Current Test Case&#8221; button (the play symbol with a single horizontal line in focus). As expected, the browser opens the root URL (step 1), then presses the &#8220;Home&#8221; link. The results are displayed under the test case list as 1 Run and 0 Failures and we see the details of the commands echoed in the Log tab at the bottom. </p>
<p>Now that we have the mechanics, lets add verifications. We are going to make some assertions about what should be displayed in the page and Selenium IDE will test them for us. The first thing we want to do is make sure we ended up on the correct page, which we can do by asserting the title of the page. </p>
<h3>Adding a simple Assertion</h3>
<p>To add an assertion command in the command list, select the empty row below the &#8220;clickAndWait&#8221; command.</p>
<div style="text-align: center; margin: 1em; color: #666666; font-size: 80%">
<img src="http://tiernok.com/LTDBlog/selenium/SeleniumIDE_Rec_02.jpg" alt="Selenium IDE - Adding a Command" /><br />
Selenium IDE &#8211; Adding a Command
</div>
<p>Under the command list, we have three inputs for the new command: &#8220;Command&#8221;, &#8220;Target&#8221;, and &#8220;Value&#8221;. Theoretically these are used to define what command Selenium should execute, the target it is acting on, and a value for the command. These are not always 100% accurate, as we are about to see.</p>
<p>In this case we want the command &#8220;assertTitle&#8221; to indicate our expectation to Selenium that the page title will be a specific value. As we start typing it, the command dropdown will filter the list of available commands. Once the command is entered, Selenium IDE populates the reference tab with additional information about that command. Since &#8220;assertTitle&#8221; doesn&#8217;t have a target, we can simply enter the value of the page title into the &#8220;value&#8221; field. </p>
<p>Let&#8217;s try an incorrect value first, just to see what happens when a test fails. Enter &#8220;ice cream&#8221; or something else nonsensical as the value and run the Test Case again.</p>
<p>The result is different this time. Under the Test Case list we still have 1 run, but now we have 1 failure and a red bar. In the command list to the right, the &#8220;assertTitle&#8221; line has a red background (unless it currently has focus). In the log at the bottom we have some red text indicating the command that failed.</p>
<div style="text-align: center; margin: 1em; color: #666666; font-size: 80%">
<img src="http://tiernok.com/LTDBlog/selenium/SeleniumIDE_Rec_03.jpg" alt="Selenium IDE - Results" /><br />
Selenium IDE &#8211; Results
</div>
<p>We have actually learned one more thing. If we look closely at the error we will see that it tried to match the page title against an empty string and failed. The &#8220;assertTitle&#8221; command actually reads it&#8217;s argument from the &#8220;target&#8221; input, not the &#8220;value&#8221; one. A better way to think of these inputs is as &#8220;Argument 1&#8221; and &#8220;Argument 2&#8221; rather than as &#8220;Target&#8221; and &#8220;Value&#8221;. If we put the value &#8220;Eli Weinstock-Herman | Tarwn&#8221; in the &#8220;target&#8221; input and run the tests again, it should Pass.</p>
<div style="text-align: center; margin: 1em; color: #666666; font-size: 80%">
<img src="http://tiernok.com/LTDBlog/selenium/SeleniumIDE_Rec_04.jpg" alt="Selenium IDE - Results" /><br />
Selenium IDE &#8211; Results
</div>
<p>Which it does. Now we need to move on to the slightly more complex case of verifying the presence of elements that change on every page load.</p>
<h3>Asserting Something Is Present</h3>
<p>There are a couple different commands we could use to create this test. For the purposes of the post, we will use the &#8220;assertElementPresent&#8221; command to verify the first and second books are available. Using Firebug (F12, Inspect button, hover over a book), we can see there is a &#8220;book&#8221; CSS class that wraps around the image and title text of each book. </p>
<p>Add a new command to the Test Case, this time entering &#8220;assertElementPresent&#8221; in the &#8220;Command&#8221; input with a target of &#8220;css=.book&#8221;. There are several locators we can use here, for instance xpath= would allow us to use an xpath locator. To verify the target string, press the &#8220;Find&#8221; button tot he right of the input. If Selenium is able to find a match, the element will flash briefly in the browser window. Additionally, double clicking the command in the command list will test just that line and report the result.</p>
<p>To test that there are two books, we are going to be sneaky and use the CSS selector &#8220;css=.book + .book&#8221;. Since this CSS path will only locate an element if it finds two book elements in a row, it is an easy way to verify that both are present. We can update the command with this new locator target and run the Test Case to see it passes successfully. </p>
<div style="text-align: center; margin: 1em; color: #666666; font-size: 80%">
<img src="http://tiernok.com/LTDBlog/selenium/SeleniumIDE_Rec_05.jpg" alt="Selenium IDE - Test Case Commands" /><br />
Selenium IDE &#8211; Test Case Commands
</div>
<p>The last thing we need to do is rename the Test Case to something useful. Right-Click the Test Case in the Test Case list on the left and edit the test name. I named my test &#8220;HomeLinkDisplaysHomePageWithBooks&#8221;, which may seem a bit clumsy but tells me exactly what I&#8217;m tetsing without loking at the details.</p>
<p><em>Note: Attempting to test too many concepts in a single test makes the test more fragile (ie, increases the frequency we will need to update it as we make site changes) and requires more digging to determine what failed when the test doesn&#8217;t Pass. A Descriptive name is not only useful but helps keep me from combining too many tests.</p>
<p>Note #2: Another option for this test would have been the <a href="http://release.seleniumhq.org/selenium-core/1.0/reference.html#storeXpathCount" title="See more information in the Selenium IDE Reference">&#8220;assertXpathCount&#8221; command</a> that allows us to enter an xpath argument and verify the return count matches a specific number.</em></p>
<h2>The Second Test Case &#8211; Adding some Interaction</h2>
<p>Now that we can create a test case that makes some basic assertions about the page, it&#8217;s time to move on to a test that requires some interaction. In this case we are going to test that the contact form properly submits and returns an error when we enter less than the required number of inputs.</p>
<h3>Recording the Test</h3>
<p>To start, lets create a new test case by selecting &#8220;New Test Case&#8221; from the File menu in Selenium IDE. Like we did with the original test, lets save this one before we make any changes. I am going to call my test &#8220;ContactPageReturnsErrorWhenEmailFieldEmpty.test&#8221;. </p>
<p><em>Note: Something to consider when naming tests is how you want to organize them. Besides being descriptive, I also try to use a consistent pattern to make them easily sortable/searchable in the file system.</em></p>
<p>Let&#8217;s start another recording and open &#8220;http://tiernok.com&/#8221; again. Click the &#8220;Contact&#8221; link in the top navigation, enter text in the Name and Message inputs in the form, then press the submit button. That&#8217;s the whole workflow, so lets stop the recording and see what we have.</p>
<div style="text-align: center; margin: 1em; color: #666666; font-size: 80%">
<img src="http://tiernok.com/LTDBlog/selenium/SeleniumIDE_Rec_06.jpg" alt="Selenium IDE - Test Recording" /><br />
Selenium IDE &#8211; Test Recording
</div>
<p>This test has some new commands in it, but they are pretty self explanatory. We opened the root site, clicked on the &#8220;Contact&#8221; link and waited for the page to load, typed in two input boxes, and clicked the submit button, again waiting for the next page to load. To finish up the test, lets add an assertion for the error message.</p>
<h3>Asserting the Error Message</h3>
<p>Like the earlier Test Case, there are a few different ways we can write this assertion. In this case the two obvious methods are using either &#8220;assertTextPresent&#8221;, which tests that the text shows up somewhere on the page, &#8220;assertElementPresent&#8221;, which could look for an element with the &#8220;.err&#8221; CSS class, or &#8220;assertText&#8221;, which combines the two commands above to test that a specific element has specific text.</p>
<div style="text-align: center; margin: 1em; color: #666666; font-size: 80%">
<img src="http://tiernok.com/LTDBlog/selenium/SeleniumIDE_Rec_07.jpg" alt="Selenium IDE - Error Assertion" /><br />
Selenium IDE &#8211; Error Assertion
</div>
<p>I&#8217;ve used the last option in my Test Case (as well as Firebug again to locate the element in the browser). If I save the Test Case and run it, I should see the browser run through the steps and Pass, just like our earlier test.</p>
<p><em>Note: You may have noticed the Fast-&gt;Slow slider above the Test Case list on the left. This slider controls how fast or slow the individual commands are run when processing the tests. It can be helpful to run individual tests slowly, but the fast setting is useful when you want to run multiple tests or the whole set.</em></p>
<h2>Review</h2>
<p>Through the course of the post we have created two basic tests. Neither took very long to create and it wouldn&#8217;t take long to expand this suite to cover the entire site. Selenium IDE makes it easy to create basic test cases and tie them together into a suite. The tools, augmented with Firebug, make it fairly easy to build the series of commands for each Test Case and there is a fairly detailed <a href="http://release.seleniumhq.org/selenium-core/1.0/reference.html" title="View the command reference">command reference</a> available.</p>
<p>However there were some points I mentioned above that I need to return to.</p>
<h3>Test Fragility and Duplication</h3>
<p>Tests in Selenium IDE tend to be somewhat fragile. In general, automated interface tests have a certain level of fragility because it&#8217;s easy to break them simply by moving a few elements around or renaming some controls. The Selenium IDE is on the extreme side of this curve because these values are used at the individual command level rather than having a central list of search or match strings.</p>
<p>We can reduce the effects of this fragility by keeping tests shorter, as shorter tests are easier to correct or update. Selenium IDE has the ability to define suite-level variables, so in some cases I created variables for common strings and put those declarations in a first &#8220;test case&#8221;.</p>
<h3>Other Limitations</h3>
<p>In addition to the fragility above, there are other limitations. Using a Test Suite to test two separate base URLs (for instance a Dev and a QA version or local and production) is difficult and requires some trickery. Scaling the tests can also be tricky, especially if you are used to the ability to run categories of unit tests or select subsets to run on the fly. There is also the issue of leaving your PC alone long enough to run the tests, since the browser will steal focus as it&#8217;s running tests.</p>
<p><em>Note: There is also another oddity. When you have Selenium IDE open, links that open in new tabs or windows will be opened in a new window without the ability to scroll. This has gotten me more than once.</em></p>
<h3>And That&#8217;s a Wrap</h3>
<p>Selenium IDE offers an excellent first step for verifying everything is working from the interface level. It also provides a great introduction into the mindset of using a web automation framework for testing and has a lot of power for a very cheap price. While there are some limits to how far this approach will get you, the gains are fairly cheap and can be a real time saver. In a later post I will talk about the next step, interfacing directly with Selenium WebDriver from code to test a site.</p>
<p>Next Post: <a href="/index.php/WebDev/UIDevelopment/automated-web-testing-with-selenium-2" title="Automated Web Testing with Selenium WebDriver">Automated Web Testing with Selenium WebDriver</a></p>
]]></content:encoded>
			<wfw:commentRss>/index.php/webdev/uidevelopment/automated-web-testing-with-selenium/feed/</wfw:commentRss>
		<slash:comments>8</slash:comments>
		</item>
	</channel>
</rss>
