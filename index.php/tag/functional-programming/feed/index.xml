<?xml version="1.0" encoding="UTF-8"?><rss version="2.0"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:atom="http://www.w3.org/2005/Atom"
	xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
	xmlns:slash="http://purl.org/rss/1.0/modules/slash/"
	>

<channel>
	<title>functional programming &#8211; LessthanDot</title>
	<atom:link href="/index.php/tag/functional-programming/feed/" rel="self" type="application/rss+xml" />
	<link>/</link>
	<description>A Technical Community for IT Professionals</description>
	<lastBuildDate>Sat, 09 Mar 2019 12:50:36 +0000</lastBuildDate>
	<language>en-US</language>
	<sy:updatePeriod>hourly</sy:updatePeriod>
	<sy:updateFrequency>1</sy:updateFrequency>
	<generator>https://wordpress.org/?v=4.6.1</generator>
	<item>
		<title>Scala: The difference between val and var</title>
		<link>/index.php/enterprisedev/appserver/jee/scala-the-difference-between-val/</link>
		<comments>/index.php/enterprisedev/appserver/jee/scala-the-difference-between-val/#respond</comments>
		<pubDate>Sat, 12 Jan 2013 10:25:00 +0000</pubDate>
		<dc:creator><![CDATA[SQLDenis]]></dc:creator>
				<category><![CDATA[Application Lifecycle Management]]></category>
		<category><![CDATA[Java EE]]></category>
		<category><![CDATA[functional programming]]></category>
		<category><![CDATA[java]]></category>
		<category><![CDATA[jvm]]></category>
		<category><![CDATA[polyglot]]></category>
		<category><![CDATA[scala]]></category>

		<guid isPermaLink="false">/index.php/2013/01/scala-the-difference-between-val/</guid>
		<description><![CDATA[This is a short Scala post to explain what the difference is between val and var. I was showing some Scala code to a co-worker this past week and he was asking what the difference was between val and var. It is quite simple:]]></description>
				<content:encoded><![CDATA[<p>This is a short Scala post to explain what the difference is between val and var. I was showing some Scala code to a co-worker this past week and he was asking what the difference was between val and var. It is quite simple:</p>
<p><strong>val</strong> defines a fixed value, it is a read only variable<br />
<strong>var</strong> defines a mutable variable, this variable can be modified</p>
<p>In Java you would use final to create a variable which would be read only, this is the same as val in Scala. </p>
<p>Let&#8217;s look at some very simple Scala code.</p>
<pre>object Test {

  def main(args: Array[String]) = println("done with main")
  
var Test1 =5
println("Test1 " + Test1)
  
Test1 = 6
println("Test1 " + Test1)

}</pre>
<p>Running the code above will give the following output<br />
Test1 5<br />
Test1 6<br />
done with main</p>
<p>If you are trying to use val, you will get an error, change var to val and see if you can compile the code</p>
<pre>object Test {

  def main(args: Array[String]) = println("done with main")
  
val Test1 =5
println("Test1 " + Test1)
  
Test1 = 6
println("Test1 " + Test1)

}</pre>
<p>Here is the error, the code won&#8217;t even compile</p>
<pre>Description		Resource	Path		Location	Type
reassignment to val	Test.scala	/ScalaTemp/src	line 8		Scala Problem</pre>
<p>So as you can see, val is read only, while with var you can modify the variable.</p>
<p>If you want to play around with Scala, take a look at <a href="/index.php/EnterpriseDev/AppServer/JEE/installing-scala-2-10-on">Installing Scala 2.10 on Eclipse Juno</a></p>
]]></content:encoded>
			<wfw:commentRss>/index.php/enterprisedev/appserver/jee/scala-the-difference-between-val/feed/</wfw:commentRss>
		<slash:comments>0</slash:comments>
		</item>
		<item>
		<title>Installing Scala 2.10 on Eclipse Juno</title>
		<link>/index.php/enterprisedev/appserver/jee/installing-scala-2-10-on/</link>
		<comments>/index.php/enterprisedev/appserver/jee/installing-scala-2-10-on/#comments</comments>
		<pubDate>Sat, 05 Jan 2013 13:46:00 +0000</pubDate>
		<dc:creator><![CDATA[SQLDenis]]></dc:creator>
				<category><![CDATA[Application Lifecycle Management]]></category>
		<category><![CDATA[Java EE]]></category>
		<category><![CDATA[functional programming]]></category>
		<category><![CDATA[java]]></category>
		<category><![CDATA[jvm]]></category>
		<category><![CDATA[polyglot]]></category>
		<category><![CDATA[scala]]></category>

		<guid isPermaLink="false">/index.php/2013/01/installing-scala-2-10-on/</guid>
		<description><![CDATA[Scala 2.10 was released yesterday and I decided to take a look at it. But first what is Scala anyway? From the Scala site: 

Scala is a general purpose programming language designed to express common programming patterns in a concise, elegant, and typ&#8230;]]></description>
				<content:encoded><![CDATA[<p>As part of my <a href="/index.php/ITProfessionals/ProfessionalDevelopment/ah-yes-those-pesky-resolutions">resolutions for the year</a> I said I would write more blog posts and also get into different technology. I decided to take a look at Scala. Well it turns out Scala 2.10 was released yesterday. But first what is Scala anyway? From the Scala site:  </p>
<blockquote><p>Scala is a general purpose programming language designed to express common programming patterns in a concise, elegant, and type-safe way. It smoothly integrates features of object-oriented and functional languages, enabling Java and other programmers to be more productive. Code sizes are typically reduced by a factor of two to three when compared to an equivalent Java application.</p></blockquote>
<p>Scala is an object oriented, functional, statically typed language. You could probably compare it to F# if you are a .NET programmer.</p>
<p>The first thing you have to do is downloading version 2.10 of Scala, you can download that version here: http://www.scala-lang.org/downloads</p>
<p>After it is downloaded and installed, it is time to get the Eclipse plugin for Scala 2.10</p>
<p>The way you do this is you click on Help followed by Install New Software&#8230; from the menu in Eclipse</p>
<div class="image_block"><a href="/wp-content/uploads/blogs/EnterpriseDev/Denis/juno2.PNG?mtime=1357398056"><img alt="" src="/wp-content/uploads/blogs/EnterpriseDev/Denis/juno2.PNG?mtime=1357398056" width="552" height="169" /></a></div>
<p>Click on the Add button</p>
<div class="image_block"><a href="/wp-content/uploads/blogs/EnterpriseDev/Denis/juno3.PNG?mtime=1357398065"><img alt="" src="/wp-content/uploads/blogs/EnterpriseDev/Denis/juno3.PNG?mtime=1357398065" width="476" height="177" /></a></div>
<p>For Eclipse Juno you need to use the following URL in the location box http://download.scala-ide.org/sdk/e38/scala210/dev/site/<br />
For Eclipse Indigo use the following URL http://download.scala-ide.org/sdk/e37/scala210/dev/site/<br />
Give a name for the repository, I named mine Scala 10 for Eclipse Juno. Hit Ok</p>
<div class="image_block"><a href="/wp-content/uploads/blogs/EnterpriseDev/Denis/juno4.PNG?mtime=1357398076"><img alt="" src="/wp-content/uploads/blogs/EnterpriseDev/Denis/juno4.PNG?mtime=1357398076" width="300" height="165" /></a></div>
<p>Hit next</p>
<p>On the Install Details form you will see Scala IDE for Eclipse<br />
You can expand it to reveal the following</p>
<div class="image_block"><a href="/wp-content/uploads/blogs/EnterpriseDev/Denis/juno5.PNG?mtime=1357398089"><img alt="" src="/wp-content/uploads/blogs/EnterpriseDev/Denis/juno5.PNG?mtime=1357398089" width="352" height="152" /></a></div>
<p>Hit next to accept the license, hit finish.</p>
<p>Now Eclipse will ask you to restart. After Eclipse is restarted it is time to create our first Scala application<br />
From the menu go to File and then select New Project. Navigate to Scala Wizards and select Scala Project</p>
<div class="image_block"><a href="/wp-content/uploads/blogs/EnterpriseDev/Denis/juno6.PNG?mtime=1357398099"><img alt="" src="/wp-content/uploads/blogs/EnterpriseDev/Denis/juno6.PNG?mtime=1357398099" width="562" height="361" /></a></div>
<p>Now that the project is created let&#8217;s create a simple object</p>
<p>Right click on the Scala Project from the package Explorer and select New&#8211;> Scala Object</p>
<div class="image_block"><a href="/wp-content/uploads/blogs/EnterpriseDev/Denis/juno7.PNG?mtime=1357398110"><img alt="" src="/wp-content/uploads/blogs/EnterpriseDev/Denis/juno7.PNG?mtime=1357398110" width="510" height="573" /></a></div>
<p>Give it a name and check <em>public static void main</em></p>
<p>You should have something like this</p>
<pre>object Test2 {

  def main(args: Array[String]): Unit = {}

}</pre>
<p>Let&#8217;s make it more interesting by generating some output</p>
<pre>object Test2 {

  def main(args: Array[String]): Unit = {}

	val (name, site, role) = getSomeInfo()
	println("Name is " + name)
	println("Site is " + site)
	println("Role is " + role)

	def getSomeInfo() = {
    ("SQLDenis", "LessThanDot", "blogger")
	}
}</pre>
<p>Run it by selecting Run As&#8211;> Scala Application from the Run as button</p>
<div class="image_block"><a href="/wp-content/uploads/blogs/EnterpriseDev/Denis/juno10.PNG?mtime=1357399576"><img alt="" src="/wp-content/uploads/blogs/EnterpriseDev/Denis/juno10.PNG?mtime=1357399576" width="455" height="48" /></a></div>
<p>Your output should be the following<br />
Name is SQLDenis<br />
Site is LessThanDot<br />
Role is blogger</p>
<p>Why don&#8217;t we add a simple loop to our code? Here is what needs to be added</p>
<pre>	for (i &lt;- 1 to 3) {
		print(i + ",")
	}
	println(" Testing 1,2,3.....")</pre>
<p>Here is the whole code</p>
<pre>object Test2 {

  def main(args: Array[String]): Unit = {}

	val (name, site, role) = getSomeInfo()
	println("Name is " + name)
	println("Site is " + site)
	println("Role is " + role)
	
	for (i &lt;- 1 to 3) {
		print(i + ",")
	}
	println(" Testing 1,2,3.....")

	def getSomeInfo() = {
    ("SQLDenis", "LessThanDot", "blogger")
	}
}</pre>
<p>Run it again, here is what the output should be</p>
<p>Name is SQLDenis<br />
Site is LessThanDot<br />
Role is blogger<br />
1,2,3, Testing 1,2,3&#8230;..<br />
Here is what my Eclipse window looks like</p>
<div class="image_block"><a href="/wp-content/uploads/blogs/EnterpriseDev/Denis/juno9.PNG?mtime=1357398314"><img alt="" src="/wp-content/uploads/blogs/EnterpriseDev/Denis/juno9.PNG?mtime=1357398314" width="595" height="523" /></a></div>
<p>In case you are interested in all the new stuff in Scala 2.10, take a look at the stuff below.</p>
<hr />
<p>The Scala 2.10.0 codebase includes the following new features and changes:&nbsp;</p>
<ul>
<li>Value Classes
<ul>
<li>A class may now extend <code>AnyVal</code> to make it behave like a struct type (restrictions apply).</li>
<li><a href="http://docs.scala-lang.org/overviews/core/value-classes.html">http://docs.scala-lang.org/overviews/core/value-classes.html</a></li>
</ul>
</li>
<li>Implicit Classes
<ul>
<li>The implicit modifier now also applies to class definitions to reduce the boilerplate of implicit wrappers.</li>
<li><a href="http://docs.scala-lang.org/sips/pending/implicit-classes.html">http://docs.scala-lang.org/sips/pending/implicit-classes.html</a></li>
</ul>
</li>
<li>String Interpolation
<ul>
<li><code>val what = "awesome"; println(s"string interpolation is ${what.toUpperCase}!")</code></li>
<li><a href="http://docs.scala-lang.org/overviews/core/string-interpolation.html">http://docs.scala-lang.org/overviews/core/string-interpolation.html</a></li>
</ul>
</li>
<li>Futures and Promises
<ul>
<li>Asynchronously get some JSON: <code>for (req &lt;- WS.url(restApiUrl).get()) yield (req.json  "users").as[List[User]]</code> (uses play!)</li>
<li><a href="http://docs.scala-lang.org/overviews/core/futures.html">http://docs.scala-lang.org/overviews/core/futures.html</a></li>
</ul>
</li>
<li>Dynamic and applyDynamic
<ul>
<li><code>x.foo</code> becomes <code>x.applyDynamic("foo")</code> if <code>x</code>&#8216;s type does not define a <code>foo</code>, but is a subtype of <code>Dynamic</code></li>
<li><a href="http://docs.scala-lang.org/sips/pending/type-dynamic.html">http://docs.scala-lang.org/sips/pending/type-dynamic.html</a></li>
</ul>
</li>
<li>Dependent method types:
<ul>
<li><code>def identity(x: AnyRef): x.type = x</code> // the return type says we return exactly what we got</li>
</ul>
</li>
<li>New ByteCode emitter based on ASM
<ul>
<li>Can target JDK 1.5, 1.6 and 1.7</li>
<li>Emits 1.6 bytecode by default</li>
<li>Old 1.5 backend is deprecated</li>
</ul>
</li>
<li>A new Pattern Matcher
<ul>
<li>rewritten from scratch to generate more robust code (no more <a href="https://issues.scala-lang.org/browse/SI-1133">exponential blow-up</a>!)</li>
<li>code generation and analyses are now independent (the latter can be turned off with <code>-Xno-patmat-analysis</code>)</li>
</ul>
</li>
<li>Scaladoc Improvements
<ul>
<li>Implicits (-implicits flag)</li>
<li>Diagrams (-diagrams flag, requires graphviz)</li>
<li>Groups (-groups)</li>
</ul>
</li>
<li>Modularized Language features
<ul>
<li>Get on top of the advanced Scala features used in your codebase by explicitly importing them.</li>
<li><a href="http://docs.scala-lang.org/sips/pending/modularizing-language-features.html">http://docs.scala-lang.org/sips/pending/modularizing-language-features.html</a></li>
</ul>
</li>
<li>Parallel Collections are now configurable with custom thread pools
<ul>
<li><a href="http://docs.scala-lang.org/overviews/parallel-collections/overview.html">http://docs.scala-lang.org/overviews/parallel-collections/overview.html</a></li>
</ul>
</li>
<li>Akka Actors now part of the distribution
<ul>
<li>The original Scala actors are now deprecated.</li>
<li>See the <a href="http://docs.scala-lang.org/actors-migration/">actors migration project</a> for more information.</li>
</ul>
</li>
<li>Performance Improvements
<ul>
<li>Faster inliner</li>
<li>`Range#sum is now O(1)</li>
<li>Update of ForkJoin library</li>
<li>Fixes in immutable <code>TreeSet</code>/<code>TreeMap</code></li>
<li>Improvements to PartialFunctions</li>
</ul>
</li>
<li>Addition of <code>???</code> and <code>NotImplementedError</code></li>
<li>Addition of <code>IsTraversableOnce</code> + <code>IsTraversableLike</code> type classes for extension methods</li>
<li>Deprecations and cleanup
<ul>
<li>Floating point and octal literal syntax deprecation</li>
<li>Removed scala.dbc</li>
</ul>
</li>
</ul>
<h3 id="Experimentalfeatures">Experimental features</h3>
<p>The following exciting &#8212; experimental &#8212; features are part of 2.10.0:</p>
<ul>
<li>Scala Reflection
<ul>
<li><a href="https://docs.google.com/document/d/1Z1VhhNPplbUpaZPIYdc0_EUv5RiGQ2X4oqp0i-vz1qw/edit#heading=h.pqwdkl">https://docs.google.com/document/d/1Z1VhhNPplbUpaZPIYdc0_EUv5RiGQ2X4oqp0i-vz1qw/edit#heading=h.pqwdkl</a></li>
</ul>
</li>
<li>Macros
<ul>
<li><a href="http://docs.scala-lang.org/overviews/macros/overview.html">http://docs.scala-lang.org/overviews/macros/overview.html</a></li>
</ul>
</li>
</ul>
<p>
<hr />
That is all for this post, Scala is just one of the languages I will explore in my quest to be more of a polyglot this year. Have you looked at Scala or some other functional language like F#?</p>
<p>Edit&#8230;&#8230;.</p>
<p>And I played a little more with this and decided to do one of our <a href="http://forum.lessthandot.com/viewtopic.php?f=102&amp;t=1608">Friday the Thirteenths</a></p>
<p>Here is a solution that someone posted in Java</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="java"><thead><tr><td colspan="2"  class="head">Java</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
</pre></td><td class="de1"><pre class="de1"><span class="kw1">import</span> <span class="co2">java.text.DateFormat</span><span class="sy0">;</span>
<span class="kw1">import</span> <span class="co2">java.text.SimpleDateFormat</span><span class="sy0">;</span>
<span class="kw1">import</span> <span class="co2">java.util.Calendar</span><span class="sy0">;</span>
<span class="kw1">import</span> <span class="co2">java.util.GregorianCalendar</span><span class="sy0">;</span>
&nbsp;
<span class="kw1">public</span> <span class="kw1">class</span> Test
<span class="br0">&#123;</span>
&nbsp; &nbsp;<span class="kw1">private</span> <span class="kw1">static</span> <span class="kw1">final</span> <span class="kw3">DateFormat</span> format <span class="sy0">=</span> <span class="kw1">new</span> <span class="kw3">SimpleDateFormat</span><span class="br0">&#40;</span><span class="st0">&quot;EEE MMM dd yyyy&quot;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp;
&nbsp; &nbsp;<span class="kw1">public</span> <span class="kw1">static</span> <span class="kw4">void</span> main<span class="br0">&#40;</span><span class="kw3">String</span>... <span class="me1">args</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; <span class="kw3">GregorianCalendar</span> cal <span class="sy0">=</span> <span class="kw1">new</span> <span class="kw3">GregorianCalendar</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; <span class="kw3">GregorianCalendar</span> stopDate <span class="sy0">=</span> <span class="kw1">new</span> <span class="kw3">GregorianCalendar</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; stopDate.<span class="me1">add</span><span class="br0">&#40;</span><span class="kw3">Calendar</span>.<span class="me1">YEAR</span>, <span class="nu0">10</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp;
&nbsp; &nbsp; &nbsp; <span class="co1">// Move ahead to the next Friday</span>
&nbsp; &nbsp; &nbsp; <span class="kw1">while</span> <span class="br0">&#40;</span>cal.<span class="me1">get</span><span class="br0">&#40;</span><span class="kw3">Calendar</span>.<span class="me1">DAY_OF_WEEK</span><span class="br0">&#41;</span> <span class="sy0">!=</span> <span class="nu0">6</span><span class="br0">&#41;</span> cal.<span class="me1">add</span><span class="br0">&#40;</span><span class="kw3">Calendar</span>.<span class="me1">DATE</span>, <span class="nu0">1</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp;
&nbsp; &nbsp; &nbsp; <span class="kw1">while</span> <span class="br0">&#40;</span>cal.<span class="me1">before</span><span class="br0">&#40;</span>stopDate<span class="br0">&#41;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span class="kw1">if</span> <span class="br0">&#40;</span>cal.<span class="me1">get</span><span class="br0">&#40;</span><span class="kw3">Calendar</span>.<span class="me1">DAY_OF_MONTH</span><span class="br0">&#41;</span> <span class="sy0">==</span> <span class="nu0">13</span><span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw3">System</span>.<span class="me1">out</span>.<span class="me1">println</span><span class="br0">&#40;</span>format.<span class="me1">format</span><span class="br0">&#40;</span>cal.<span class="me1">getTime</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#41;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; cal.<span class="me1">add</span><span class="br0">&#40;</span><span class="kw3">Calendar</span>.<span class="me1">DATE</span>, <span class="nu0">7</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp; &nbsp;<span class="br0">&#125;</span>
<span class="br0">&#125;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.GregorianCalendar;
 
public class Test
{
   private static final DateFormat format = new SimpleDateFormat("EEE MMM dd yyyy");
   
   public static void main(String... args) {
      GregorianCalendar cal = new GregorianCalendar();
      GregorianCalendar stopDate = new GregorianCalendar();
      stopDate.add(Calendar.YEAR, 10);
       
      // Move ahead to the next Friday
      while (cal.get(Calendar.DAY_OF_WEEK) != 6) cal.add(Calendar.DATE, 1);
       
      while (cal.before(stopDate)) {
         if (cal.get(Calendar.DAY_OF_MONTH) == 13)
            System.out.println(format.format(cal.getTime()));
           
            cal.add(Calendar.DATE, 7);
      }
   }
}</pre></div></div>

<p>In Scala you don&#8217;t have to change that much, you can leave or take out the semicolons, here is the code</p>
<pre>object Test2 {
  
import java.text.DateFormat
import java.text.SimpleDateFormat
import java.util.Calendar
import java.util.GregorianCalendar

  def main(args: Array[String]): Unit = {}
  val DateFormat  = new SimpleDateFormat("EEE MMM dd yyyy")
  
  val cal = new GregorianCalendar()
  val stopDate = new GregorianCalendar()
  stopDate.add(Calendar.YEAR, 10);
      
  while (cal.get(Calendar.DAY_OF_WEEK) != 6) cal.add(Calendar.DATE, 1)
	 
  while (cal.before(stopDate)) {
         if (cal.get(Calendar.DAY_OF_MONTH) == 13)
            println(DateFormat.format(cal.getTime()))
           cal.add(Calendar.DATE, 7);
      
   }
		
}</pre>
<p>And here is the output</p>
<p>Fri Sep 13 2013<br />
Fri Dec 13 2013<br />
Fri Jun 13 2014<br />
Fri Feb 13 2015<br />
Fri Mar 13 2015<br />
Fri Nov 13 2015<br />
Fri May 13 2016<br />
Fri Jan 13 2017<br />
Fri Oct 13 2017<br />
Fri Apr 13 2018<br />
Fri Jul 13 2018<br />
Fri Sep 13 2019<br />
Fri Dec 13 2019<br />
Fri Mar 13 2020<br />
Fri Nov 13 2020<br />
Fri Aug 13 2021<br />
Fri May 13 2022</p>
<p>With SQL Server, you can just use a number table</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
</pre></td><td class="de1"><pre class="de1"><span class="kw1">SELECT</span> <span class="kw2">DATEADD</span><span class="br0">&#40;</span>m, number,<span class="st0">'1998-01-13'</span><span class="br0">&#41;</span>
&nbsp;<span class="kw1">FROM</span> &nbsp;master..<span class="me1">spt_values</span> <span class="kw1">WHERE</span> type <span class="sy0">=</span> <span class="st0">'P'</span>
and <span class="kw2">DATENAME</span><span class="br0">&#40;</span>dw,<span class="kw2">DATEADD</span><span class="br0">&#40;</span>m, number,<span class="st0">'1998-01-13'</span><span class="br0">&#41;</span><span class="br0">&#41;</span> <span class="sy0">=</span> <span class="st0">'friday'</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">SELECT DATEADD(m, number,'1998-01-13')
 FROM  master..spt_values WHERE type = 'P'
and DATENAME(dw,DATEADD(m, number,'1998-01-13')) = 'friday'</pre></div></div>

<p>That is really it for this post&#8230;</p>
]]></content:encoded>
			<wfw:commentRss>/index.php/enterprisedev/appserver/jee/installing-scala-2-10-on/feed/</wfw:commentRss>
		<slash:comments>1</slash:comments>
		</item>
		<item>
		<title>F# Developer Center</title>
		<link>/index.php/desktopdev/mstech/f-developer-center/</link>
		<comments>/index.php/desktopdev/mstech/f-developer-center/#respond</comments>
		<pubDate>Fri, 05 Sep 2008 15:48:45 +0000</pubDate>
		<dc:creator><![CDATA[SQLDenis]]></dc:creator>
				<category><![CDATA[Microsoft Technologies]]></category>
		<category><![CDATA[f#]]></category>
		<category><![CDATA[functional programming]]></category>

		<guid isPermaLink="false">/index.php/2008/09/f-developer-center/</guid>
		<description><![CDATA[Microsoft has launched the F# Developer Center Here you can learn everything about Microsoft&#8217;s functional programming language F# (pronounced F sharp). There are links to forums, blogs, projects on codeplex, code gallery samples, videos and much more. Also check out the Getting Started with F# section, here you can download the latest F# CTP and [&#8230;]]]></description>
				<content:encoded><![CDATA[<p>Microsoft has launched the <a href="http://msdn.microsoft.com/en-us/fsharp/default.aspx">F# Developer Center</a></p>
<p>Here you can learn everything about Microsoft&#8217;s functional programming language F# (pronounced F sharp). There are links to forums, blogs, projects on codeplex, code gallery samples, videos and much more.</p>
<p>Also check out the Getting Started with F# section, here you can download the latest F# CTP and three sample chapters of the Expert F# book are also available for preview</p>
]]></content:encoded>
			<wfw:commentRss>/index.php/desktopdev/mstech/f-developer-center/feed/</wfw:commentRss>
		<slash:comments>0</slash:comments>
		</item>
	</channel>
</rss>
