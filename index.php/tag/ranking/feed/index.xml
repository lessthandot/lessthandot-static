<?xml version="1.0" encoding="UTF-8"?><rss version="2.0"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:atom="http://www.w3.org/2005/Atom"
	xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
	xmlns:slash="http://purl.org/rss/1.0/modules/slash/"
	>

<channel>
	<title>ranking &#8211; LessthanDot</title>
	<atom:link href="/index.php/tag/ranking/feed/" rel="self" type="application/rss+xml" />
	<link>/</link>
	<description>A Technical Community for IT Professionals</description>
	<lastBuildDate>Sat, 09 Mar 2019 12:50:36 +0000</lastBuildDate>
	<language>en-US</language>
	<sy:updatePeriod>hourly</sy:updatePeriod>
	<sy:updateFrequency>1</sy:updateFrequency>
	<generator>https://wordpress.org/?v=4.6.1</generator>
	<item>
		<title>Does anyone use the  NTILE() windowing function?</title>
		<link>/index.php/datamgmt/dbprogramming/does-anyone-use-the-ntile/</link>
		<comments>/index.php/datamgmt/dbprogramming/does-anyone-use-the-ntile/#comments</comments>
		<pubDate>Wed, 16 Jan 2013 12:22:00 +0000</pubDate>
		<dc:creator><![CDATA[SQLDenis]]></dc:creator>
				<category><![CDATA[Database Programming]]></category>
		<category><![CDATA[Microsoft SQL Server]]></category>
		<category><![CDATA[ntile]]></category>
		<category><![CDATA[ranking]]></category>
		<category><![CDATA[windowing functions]]></category>

		<guid isPermaLink="false">/index.php/2013/01/does-anyone-use-the-ntile/</guid>
		<description><![CDATA[A question was asked on StackOverflow about how NTILE() works: Want to learn more on NTILE() I answered that question and then started thinking about NTILE(), I realized that I have never used this function in production code. Everytime I used it was fo&#8230;]]></description>
				<content:encoded><![CDATA[<p>A question was asked on StackOverflow about how NTILE() works: <a href="http://stackoverflow.com/questions/14355324/want-to-learn-more-on-ntile">Want to learn more on NTILE()</a> I answered that question and then started thinking about NTILE(), I realized that I have never used this function in production code. Everytime I used it was for demoware purposes. I did a quick check against a bunch of databases</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
</pre></td><td class="de1"><pre class="de1"><span class="kw1">SELECT</span> <span class="sy0">*</span> <span class="kw1">FROM</span> sys.<span class="me1">sql_modules</span>
<span class="kw1">WHERE</span> OBJECT_DEF<span class="sy0">IN</span>ITION<span class="br0">&#40;</span><span class="kw2">object_id</span><span class="br0">&#41;</span> <span class="sy0">LIKE</span> <span class="st0">'%ntile%'</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">SELECT * FROM sys.sql_modules
WHERE OBJECT_DEFINITION(object_id) LIKE '%ntile%'</pre></div></div>

<p>&#8212;&#8212;-<br />
(0 row(s) affected)</p>
<p>Doesn&#8217;t exist. I also have a hard time figuring out where I would use it, maybe if I want to put an equal number or rows in a bunch of buckets, maybe then this will be used to call another process asynchronously?</p>
<p>For you that don&#8217;t know what NTILE() does it basically distributes the rows in a bunch of groups. If you specify 2 groups and you have 10 rows then each group will have 5 rows.</p>
<p>Let&#8217;s look at some code to understand how it works, first create this simple table</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
</pre></td><td class="de1"><pre class="de1"><span class="kw1">CREATE</span> <span class="kw1">TABLE</span> &nbsp;#temp<span class="br0">&#40;</span>StudentID <span class="kw1">CHAR</span><span class="br0">&#40;</span><span class="nu0">2</span><span class="br0">&#41;</span>, &nbsp;Score &nbsp;<span class="kw1">INT</span><span class="br0">&#41;</span> 
&nbsp;
<span class="kw1">INSERT</span> #temp &nbsp;<span class="kw1">VALUES</span><span class="br0">&#40;</span><span class="st0">'S1'</span>,<span class="nu0">75</span> <span class="br0">&#41;</span> 
<span class="kw1">INSERT</span> #temp &nbsp;<span class="kw1">VALUES</span><span class="br0">&#40;</span><span class="st0">'S2'</span>,<span class="nu0">83</span><span class="br0">&#41;</span>
<span class="kw1">INSERT</span> #temp &nbsp;<span class="kw1">VALUES</span><span class="br0">&#40;</span><span class="st0">'S3'</span>,<span class="nu0">91</span><span class="br0">&#41;</span>
<span class="kw1">INSERT</span> #temp &nbsp;<span class="kw1">VALUES</span><span class="br0">&#40;</span><span class="st0">'S4'</span>,<span class="nu0">83</span><span class="br0">&#41;</span>
<span class="kw1">INSERT</span> #temp &nbsp;<span class="kw1">VALUES</span><span class="br0">&#40;</span><span class="st0">'S5'</span>,<span class="nu0">93</span> <span class="br0">&#41;</span> </pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">CREATE TABLE  #temp(StudentID CHAR(2),  Score  INT) 

INSERT #temp  VALUES('S1',75 ) 
INSERT #temp  VALUES('S2',83)
INSERT #temp  VALUES('S3',91)
INSERT #temp  VALUES('S4',83)
INSERT #temp  VALUES('S5',93 ) </pre></div></div>

<p>Now if you use NTILE() to create 2 buckets, you will see 1 and 2 as NtileValue</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
</pre></td><td class="de1"><pre class="de1"><span class="kw1">SELECT</span> NTILE<span class="br0">&#40;</span><span class="nu0">2</span><span class="br0">&#41;</span> <span class="kw1">OVER</span><span class="br0">&#40;</span><span class="kw1">ORDER</span> <span class="kw1">BY</span> Score<span class="br0">&#41;</span> <span class="kw1">AS</span> NtileValue,<span class="sy0">*</span>
<span class="kw1">FROM</span> #temp
<span class="kw1">ORDER</span> <span class="kw1">BY</span> <span class="nu0">1</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">SELECT NTILE(2) OVER(ORDER BY Score) AS NtileValue,*
FROM #temp
ORDER BY 1</pre></div></div>

<p>Here are the results:</p>
<pre>NtileValue	StudentID	Score
1		S1		75
1		S2		83
1		S4		83
2		S3		91
2		S5		93</pre>
<p>Since the number of rows are not even, the first bucket will have three rows and the second bucket will have two rows</p>
<p>Let&#8217;s add one more row to this table</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
</pre></td><td class="de1"><pre class="de1"><span class="kw1">INSERT</span> #temp &nbsp;<span class="kw1">VALUES</span><span class="br0">&#40;</span><span class="st0">'S6'</span>,<span class="nu0">92</span> <span class="br0">&#41;</span> </pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">INSERT #temp  VALUES('S6',92 ) </pre></div></div>

<p>Now let&#8217;s run the same query as before</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
</pre></td><td class="de1"><pre class="de1"><span class="kw1">SELECT</span> NTILE<span class="br0">&#40;</span><span class="nu0">2</span><span class="br0">&#41;</span> <span class="kw1">OVER</span><span class="br0">&#40;</span><span class="kw1">ORDER</span> <span class="kw1">BY</span> Score<span class="br0">&#41;</span> <span class="kw1">AS</span> NtileValue,<span class="sy0">*</span>
<span class="kw1">FROM</span> #temp
<span class="kw1">ORDER</span> <span class="kw1">BY</span> <span class="nu0">1</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">SELECT NTILE(2) OVER(ORDER BY Score) AS NtileValue,*
FROM #temp
ORDER BY 1</pre></div></div>

<p>Here are the results:</p>
<pre>NtileValue	StudentID	Score
1		S1		75
1		S2		83
1		S4		83
2		S3		91
2		S6		92
2		S5		93</pre>
<p>As you can see both buckets now have three rows</p>
<p>What if we use NTILE(3)?</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
</pre></td><td class="de1"><pre class="de1"><span class="kw1">SELECT</span> NTILE<span class="br0">&#40;</span><span class="nu0">3</span><span class="br0">&#41;</span> <span class="kw1">OVER</span><span class="br0">&#40;</span><span class="kw1">ORDER</span> <span class="kw1">BY</span> Score<span class="br0">&#41;</span> <span class="kw1">AS</span> NtileValue,<span class="sy0">*</span>
<span class="kw1">FROM</span> #temp
<span class="kw1">ORDER</span> <span class="kw1">BY</span> <span class="nu0">1</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">SELECT NTILE(3) OVER(ORDER BY Score) AS NtileValue,*
FROM #temp
ORDER BY 1</pre></div></div>

<p>Here are the results:</p>
<pre>NtileValue	StudentID	Score
1		S1		75
1		S2		83
2		S4		83
2		S3		91
3		S6		92
3		S5		93</pre>
<p>As expected, you now get three buckets back.</p>
<p>So do you use NTILE() currently or do you have plans to use it in the future?</p>
]]></content:encoded>
			<wfw:commentRss>/index.php/datamgmt/dbprogramming/does-anyone-use-the-ntile/feed/</wfw:commentRss>
		<slash:comments>4</slash:comments>
		</item>
		<item>
		<title>SQL Advent 2011 Day 6: Windowing functions</title>
		<link>/index.php/datamgmt/datadesign/sql-advent-2011-day-6/</link>
		<comments>/index.php/datamgmt/datadesign/sql-advent-2011-day-6/#comments</comments>
		<pubDate>Tue, 06 Dec 2011 10:10:00 +0000</pubDate>
		<dc:creator><![CDATA[SQLDenis]]></dc:creator>
				<category><![CDATA[Data Modelling and Design]]></category>
		<category><![CDATA[dense_rank]]></category>
		<category><![CDATA[rank]]></category>
		<category><![CDATA[ranking]]></category>
		<category><![CDATA[row_number]]></category>
		<category><![CDATA[sql server 2005]]></category>
		<category><![CDATA[sql server 2008]]></category>
		<category><![CDATA[windowing]]></category>

		<guid isPermaLink="false">/index.php/2011/12/sql-advent-2011-day-6/</guid>
		<description><![CDATA[In my Are you ready for SQL Server 2012 or are you still partying like it is 1999? post, I wrote about how you should start using SQL Server 2005 and SQL Server 2008 functionality now in order to prepare for SQL Server 2012. I still see tons of code tha&#8230;]]></description>
				<content:encoded><![CDATA[<p>In my <a href="/index.php/DataMgmt/DataDesign/are-you-ready-for-sql">Are you ready for SQL Server 2012 or are you still partying like it is 1999?</a> post, I wrote about how you should start using SQL Server 2005 and SQL Server 2008 functionality now in order to prepare for SQL Server 2012. I still see tons of code that is written in the pre 2005 style and people still keep using those functions, procs and statements even though SQL Server 2005 and 2008 have much better functionality.</p>
<p>In today&#8217;s post I will cover Windowing functions. SQL Server 2005 introduced 4 windowing functions, these functions are ROW_NUMBER(), RANK(), DENSE_RANK() and NTILE().</p>
<p>The functions make it very easy to add a number to a resultset or do paging without having to use TOP and SET ROWCOUNT<br />
In the 2000 days you would have to use either a running count or you would insert into a temporary table with an identity column and select from that table ordered by the identity column.</p>
<p>In order to run all the examples we need to create a simple table first.</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
</pre></td><td class="de1"><pre class="de1"><span class="kw1">IF</span> <span class="kw2">OBJECT_ID</span><span class="br0">&#40;</span><span class="st0">'tempdb..#Rankings'</span><span class="br0">&#41;</span> <span class="kw1">IS</span> <span class="sy0">NOT</span> <span class="sy0">NULL</span>
<span class="kw1">DROP</span> <span class="kw1">TABLE</span> #Rankings
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;
&nbsp; &nbsp;<span class="kw1">CREATE</span> <span class="kw1">TABLE</span> #Rankings <span class="br0">&#40;</span><span class="kw1">Value</span> <span class="kw1">CHAR</span><span class="br0">&#40;</span><span class="nu0">1</span><span class="br0">&#41;</span><span class="br0">&#41;</span>
&nbsp; &nbsp; <span class="kw1">INSERT</span> <span class="kw1">INTO</span> #Rankings
&nbsp; &nbsp; <span class="kw1">SELECT</span> <span class="st0">'A'</span> <span class="kw1">UNION</span> <span class="sy0">ALL</span>
&nbsp; &nbsp; <span class="kw1">SELECT</span> <span class="st0">'B'</span> <span class="kw1">UNION</span> <span class="sy0">ALL</span>
&nbsp; &nbsp; <span class="kw1">SELECT</span> <span class="st0">'C'</span> <span class="kw1">UNION</span> <span class="sy0">ALL</span>
&nbsp; &nbsp; <span class="kw1">SELECT</span> <span class="st0">'D'</span> <span class="kw1">UNION</span> <span class="sy0">ALL</span>
&nbsp; &nbsp; <span class="kw1">SELECT</span> <span class="st0">'E'</span> <span class="kw1">UNION</span> <span class="sy0">ALL</span>
&nbsp; &nbsp; <span class="kw1">SELECT</span> <span class="st0">'F'</span>
&nbsp; &nbsp; </pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">IF OBJECT_ID('tempdb..#Rankings') IS NOT NULL
DROP TABLE #Rankings
		   
		   
   CREATE TABLE #Rankings (Value CHAR(1))
    INSERT INTO #Rankings
    SELECT 'A' UNION ALL
    SELECT 'B' UNION ALL
    SELECT 'C' UNION ALL
    SELECT 'D' UNION ALL
    SELECT 'E' UNION ALL
    SELECT 'F'
    </pre></div></div>

<p>
<h2>ROW_NUMBER</h2>
<p>The ROW_NUMBER function  returns the sequential number of a row within a partition of a result set, starting at 1 for the first row in each partition. The syntax might look complicated the first time you use it but it is really not</p>
<p>The query below will simply add a number to the resultset</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
</pre></td><td class="de1"><pre class="de1"><span class="kw1">SELECT</span> ROW_NUMBER<span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="kw1">OVER</span> <span class="br0">&#40;</span> <span class="kw1">ORDER</span> <span class="kw1">BY</span> <span class="kw1">Value</span><span class="br0">&#41;</span> <span class="kw1">AS</span> <span class="kw1">Row</span>,<span class="sy0">*</span>
<span class="kw1">FROM</span> #Rankings
<span class="kw1">ORDER</span> <span class="kw1">BY</span> <span class="kw1">Row</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">SELECT ROW_NUMBER() OVER ( ORDER BY Value) AS Row,*
FROM #Rankings
ORDER BY Row</pre></div></div>

<p>
<pre>Row                  Value
-------------------- -----
1                    A
2                    B
3                    C
4                    D
5                    E
6                    F</pre>
<p></p>
<p>Let&#8217;s add some more rows so that the table is not unique anymore</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
</pre></td><td class="de1"><pre class="de1">&nbsp;<span class="kw1">INSERT</span> <span class="kw1">INTO</span> #Rankings
&nbsp; &nbsp; <span class="kw1">SELECT</span> <span class="st0">'A'</span> <span class="kw1">UNION</span> <span class="sy0">ALL</span>
&nbsp; &nbsp; <span class="kw1">SELECT</span> <span class="st0">'B'</span> <span class="kw1">UNION</span> <span class="sy0">ALL</span>
&nbsp; &nbsp; <span class="kw1">SELECT</span> <span class="st0">'C'</span> </pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse"> INSERT INTO #Rankings
    SELECT 'A' UNION ALL
    SELECT 'B' UNION ALL
    SELECT 'C' </pre></div></div>

<p>    </p>
<p>When we run the same query again, you can see that it is ordered by Value and the Row column matches that ordering. You can also see that bot rows with the value A have a different row number</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
</pre></td><td class="de1"><pre class="de1"><span class="kw1">SELECT</span> ROW_NUMBER<span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="kw1">OVER</span> <span class="br0">&#40;</span> <span class="kw1">ORDER</span> <span class="kw1">BY</span> <span class="kw1">Value</span><span class="br0">&#41;</span> <span class="kw1">AS</span> <span class="kw1">Row</span>,<span class="sy0">*</span>
<span class="kw1">FROM</span> #Rankings
<span class="kw1">ORDER</span> <span class="kw1">BY</span> <span class="kw1">Row</span> &nbsp; &nbsp;</pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">SELECT ROW_NUMBER() OVER ( ORDER BY Value) AS Row,*
FROM #Rankings
ORDER BY Row    </pre></div></div>

<pre>Row                  Value
-------------------- -----
1                    A
2                    A
3                    B
4                    B
5                    C
6                    C
7                    D
8                    E
9                    F</pre>
<p></p>
<p>You can add more than one ranking function in the same query, in the query below we will add two row numbers, one will be sorted ascending and one will be sorted descending</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
</pre></td><td class="de1"><pre class="de1"><span class="kw1">SELECT</span> ROW_NUMBER<span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="kw1">OVER</span> <span class="br0">&#40;</span> <span class="kw1">ORDER</span> <span class="kw1">BY</span> <span class="kw1">Value</span><span class="br0">&#41;</span> <span class="kw1">AS</span> <span class="kw1">Row</span>,
&nbsp; &nbsp; &nbsp; &nbsp;ROW_NUMBER<span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="kw1">OVER</span> <span class="br0">&#40;</span> <span class="kw1">ORDER</span> <span class="kw1">BY</span> <span class="kw1">Value</span> <span class="kw1">DESC</span><span class="br0">&#41;</span> <span class="kw1">AS</span> RowDesc,<span class="sy0">*</span>
<span class="kw1">FROM</span> #Rankings
<span class="kw1">ORDER</span> <span class="kw1">BY</span> <span class="kw1">Row</span> &nbsp; &nbsp;</pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">SELECT ROW_NUMBER() OVER ( ORDER BY Value) AS Row,
	   ROW_NUMBER() OVER ( ORDER BY Value DESC) AS RowDesc,*
FROM #Rankings
ORDER BY Row    </pre></div></div>

<p>
<pre>Row                  RowDesc              Value
-------------------- -------------------- -----
1                    8                    A
2                    9                    A
3                    6                    B
4                    7                    B
5                    4                    C
6                    5                    C
7                    3                    D
8                    2                    E
9                    1                    F</pre>
<p></p>
<p>As you can see Row is ordered ascending and RowDesc is ordered descending</p>
<p>
<h2>RANK</h2>
<p>The RANK function is similar to ROW_NUMBER but it will keep the same number for the same value, it also skips numbers when the value changes</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
</pre></td><td class="de1"><pre class="de1"><span class="kw1">SELECT</span> RANK<span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="kw1">OVER</span> <span class="br0">&#40;</span> <span class="kw1">ORDER</span> <span class="kw1">BY</span> <span class="kw1">Value</span><span class="br0">&#41;</span> <span class="kw1">AS</span> <span class="kw1">Row</span>,<span class="sy0">*</span>
<span class="kw1">FROM</span> #Rankings
<span class="kw1">ORDER</span> <span class="kw1">BY</span> <span class="kw1">Row</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">SELECT RANK() OVER ( ORDER BY Value) AS Row,*
FROM #Rankings
ORDER BY Row</pre></div></div>

<p>
<pre>Row                  Value
-------------------- -----
1                    A
1                    A
3                    B
3                    B
5                    C
5                    C
7                    D
8                    E
9                    F</pre>
<p></p>
<p>Now the rows with the value A have the same exact number, but did you notice that it skips numbers? What if you don&#8217;t want to skip numbers? You can use DENSE_RANK for that</p>
<p>
<h2>DENSE_RANK</h2>
<p>The DENSE_RANK function is similar to the RANK function, the difference is that numbers are not skipped when the value changes</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
</pre></td><td class="de1"><pre class="de1"><span class="kw1">SELECT</span> DENSE_RANK<span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="kw1">OVER</span> <span class="br0">&#40;</span> <span class="kw1">ORDER</span> <span class="kw1">BY</span> <span class="kw1">Value</span><span class="br0">&#41;</span> <span class="kw1">AS</span> <span class="kw1">Row</span>,<span class="sy0">*</span>
<span class="kw1">FROM</span> #Rankings
<span class="kw1">ORDER</span> <span class="kw1">BY</span> <span class="kw1">Row</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">SELECT DENSE_RANK() OVER ( ORDER BY Value) AS Row,*
FROM #Rankings
ORDER BY Row</pre></div></div>

<p>
<pre>Row                  Value
-------------------- -----
1                    A
1                    A
2                    B
2                    B
3                    C
3                    C
4                    D
5                    E
6                    F</pre>
<p></p>
<h2>More examples</h2>
<p>Now let&#8217;s take a look at some more examples. First drop the table we created earlier and create this table instead</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
</pre></td><td class="de1"><pre class="de1">&nbsp;<span class="kw1">IF</span> <span class="kw2">OBJECT_ID</span><span class="br0">&#40;</span><span class="st0">'tempdb..#Rankings'</span><span class="br0">&#41;</span> <span class="kw1">IS</span> <span class="sy0">NOT</span> <span class="sy0">NULL</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span class="kw1">DROP</span> <span class="kw1">TABLE</span> #Rankings
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;GO
<span class="kw1">CREATE</span> <span class="kw1">TABLE</span> #Rankings <span class="br0">&#40;</span><span class="kw1">Value</span> <span class="kw1">CHAR</span><span class="br0">&#40;</span><span class="nu0">1</span><span class="br0">&#41;</span>, SomeValue <span class="kw1">int</span><span class="br0">&#41;</span>
&nbsp;
&nbsp; &nbsp; <span class="kw1">INSERT</span> <span class="kw1">INTO</span> #Rankings
&nbsp; &nbsp; <span class="kw1">SELECT</span> <span class="st0">'A'</span>,<span class="nu0">1</span> <span class="kw1">UNION</span> <span class="sy0">ALL</span>
&nbsp; &nbsp; <span class="kw1">SELECT</span> <span class="st0">'A'</span>,<span class="nu0">2</span> <span class="kw1">UNION</span> <span class="sy0">ALL</span>
&nbsp; &nbsp; <span class="kw1">SELECT</span> <span class="st0">'A'</span>,<span class="nu0">3</span> <span class="kw1">UNION</span> <span class="sy0">ALL</span>
&nbsp; &nbsp; <span class="kw1">SELECT</span> <span class="st0">'B'</span>,<span class="nu0">2</span> <span class="kw1">UNION</span> <span class="sy0">ALL</span>
&nbsp; &nbsp; <span class="kw1">SELECT</span> <span class="st0">'C'</span>,<span class="nu0">3</span> <span class="kw1">UNION</span> <span class="sy0">ALL</span>
&nbsp; &nbsp; <span class="kw1">SELECT</span> <span class="st0">'C'</span>,<span class="nu0">3</span> <span class="kw1">UNION</span> <span class="sy0">ALL</span>
&nbsp; &nbsp; <span class="kw1">SELECT</span> <span class="st0">'C'</span>,<span class="nu0">9</span> <span class="kw1">UNION</span> <span class="sy0">ALL</span>
&nbsp; &nbsp; <span class="kw1">SELECT</span> <span class="st0">'D'</span>,<span class="nu0">4</span> <span class="kw1">UNION</span> <span class="sy0">ALL</span>
&nbsp; &nbsp; <span class="kw1">SELECT</span> <span class="st0">'E'</span>,<span class="nu0">5</span> <span class="kw1">UNION</span> <span class="sy0">ALL</span>
&nbsp; &nbsp; <span class="kw1">SELECT</span> <span class="st0">'F'</span>,<span class="nu0">6</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse"> IF OBJECT_ID('tempdb..#Rankings') IS NOT NULL
		   DROP TABLE #Rankings
		   GO
CREATE TABLE #Rankings (Value CHAR(1), SomeValue int)

    INSERT INTO #Rankings
    SELECT 'A',1 UNION ALL
    SELECT 'A',2 UNION ALL
    SELECT 'A',3 UNION ALL
    SELECT 'B',2 UNION ALL
    SELECT 'C',3 UNION ALL
    SELECT 'C',3 UNION ALL
    SELECT 'C',9 UNION ALL
    SELECT 'D',4 UNION ALL
    SELECT 'E',5 UNION ALL
    SELECT 'F',6</pre></div></div>

<p>   </p>
<p>Now let&#8217;s run our simple ROW_NUMBER query again</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
</pre></td><td class="de1"><pre class="de1"><span class="kw1">SELECT</span> ROW_NUMBER<span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="kw1">OVER</span> <span class="br0">&#40;</span> <span class="kw1">ORDER</span> <span class="kw1">BY</span> <span class="kw1">Value</span><span class="br0">&#41;</span> <span class="kw1">AS</span> <span class="kw1">Row</span>,<span class="sy0">*</span>
<span class="kw1">FROM</span> #Rankings
<span class="kw1">ORDER</span> <span class="kw1">BY</span> <span class="kw1">Row</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">SELECT ROW_NUMBER() OVER ( ORDER BY Value) AS Row,*
FROM #Rankings
ORDER BY Row</pre></div></div>

<p>
<pre>Row                  Value SomeValue
-------------------- ----- -----------
1                    A     1
2                    A     2
3                    A     3
4                    B     2
5                    C     3
6                    C     3
7                    C     9
8                    D     4
9                    E     5
10                   F     6</pre>
<p></p>
<p>So, nothing special, what if you want the number start over when the value column changes. This would be a sample output</p>
<p>A 1<br />
A 2<br />
A 3<br />
B 1<br />
C 1<br />
C 2</p>
<p>In order to do that, you can use partition, if you partition by Value, when the Value changes the number will start from 1 again. Here is what the query looks like</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
</pre></td><td class="de1"><pre class="de1">&nbsp;<span class="kw1">SELECT</span> ROW_NUMBER<span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="kw1">OVER</span> <span class="br0">&#40;</span> PARTITION <span class="kw1">BY</span> <span class="kw1">Value</span> <span class="kw1">ORDER</span> <span class="kw1">BY</span> SomeValue <span class="kw1">DESC</span><span class="br0">&#41;</span> <span class="kw1">AS</span> <span class="kw1">Row</span>,<span class="sy0">*</span>
<span class="kw1">FROM</span> #Rankings
<span class="kw1">ORDER</span> <span class="kw1">BY</span> <span class="kw1">Row</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse"> SELECT ROW_NUMBER() OVER ( PARTITION BY Value ORDER BY SomeValue DESC) AS Row,*
FROM #Rankings
ORDER BY Row</pre></div></div>

<p>
<pre>Row                  Value SomeValue
-------------------- ----- -----------
1                    A     3
2                    A     2
3                    A     1
1                    B     2
1                    C     9
2                    C     3
3                    C     3
1                    D     4
1                    E     5
1                    F     6</pre>
<p></p>
<p>How about only returning the distinct value in the Value column together with the max value of the SomeValue column? In order to do that, you can use a Common Table Expression (see <a href="/index.php/DataMgmt/DBProgramming/MSSQLServer/sql-advent-2011-day-5">SQL Advent 2011 Day 5: Common Table Expressions</a> for some information about  Common Table Expressions), you partition by Value and then you select all the rows that are 1</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
</pre></td><td class="de1"><pre class="de1">;<span class="kw1">WITH</span> cte <span class="kw1">AS</span><span class="br0">&#40;</span> <span class="kw1">SELECT</span> ROW_NUMBER<span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="kw1">OVER</span> <span class="br0">&#40;</span> PARTITION <span class="kw1">BY</span> <span class="kw1">Value</span> <span class="kw1">ORDER</span> <span class="kw1">BY</span> SomeValue <span class="kw1">DESC</span><span class="br0">&#41;</span> <span class="kw1">AS</span> <span class="kw1">Row</span>,<span class="sy0">*</span>
<span class="kw1">FROM</span> #Rankings<span class="br0">&#41;</span>
&nbsp;
<span class="kw1">SELECT</span> <span class="sy0">*</span> <span class="kw1">FROM</span> cte <span class="kw1">WHERE</span> <span class="kw1">row</span> <span class="sy0">=</span> <span class="nu0">1</span>
<span class="kw1">ORDER</span> <span class="kw1">By</span> <span class="kw1">Value</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">;WITH cte AS( SELECT ROW_NUMBER() OVER ( PARTITION BY Value ORDER BY SomeValue DESC) AS Row,*
FROM #Rankings)

SELECT * FROM cte WHERE row = 1
ORDER By Value</pre></div></div>

<p>
<pre>Row                  Value SomeValue
-------------------- ----- -----------
1                    A     3
1                    B     2
1                    C     9
1                    D     4
1                    E     5
1                    F     6</pre>
<p></p>
<p>That was pretty simple, now for a more complex example</p>
<p>This example is from Itzik Ben-Gan, I am not sure if I saw it in a forum or news group, it is really cool if you think about how the code works</p>
<p>First create this table </p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
</pre></td><td class="de1"><pre class="de1"><span class="kw1">CREATE</span> <span class="kw1">TABLE</span> #Test <span class="br0">&#40;</span>ID <span class="kw1">INT</span> <span class="kw1">IDENTITY</span> not null, SomeDate <span class="kw1">DATETIME</span>, CrewID <span class="kw1">CHAR</span><span class="br0">&#40;</span><span class="nu0">2</span><span class="br0">&#41;</span><span class="br0">&#41;</span>
&nbsp;
<span class="kw1">INSERT</span> #Test <span class="kw1">VALUES</span><span class="br0">&#40;</span><span class="st0">'6/1/2008'</span>, <span class="st0">'1'</span><span class="br0">&#41;</span>
<span class="kw1">INSERT</span> #Test <span class="kw1">VALUES</span><span class="br0">&#40;</span><span class="st0">'6/2/2008'</span>, <span class="st0">'1'</span><span class="br0">&#41;</span>
<span class="kw1">INSERT</span> #Test <span class="kw1">VALUES</span><span class="br0">&#40;</span><span class="st0">'6/2/2008'</span>, <span class="st0">'1'</span><span class="br0">&#41;</span>
<span class="kw1">INSERT</span> #Test <span class="kw1">VALUES</span><span class="br0">&#40;</span><span class="st0">'6/3/2008'</span>, <span class="st0">'1'</span><span class="br0">&#41;</span>
<span class="kw1">INSERT</span> #Test <span class="kw1">VALUES</span><span class="br0">&#40;</span><span class="st0">'6/4/2008'</span>, <span class="st0">'1'</span><span class="br0">&#41;</span>
<span class="kw1">INSERT</span> #Test <span class="kw1">VALUES</span><span class="br0">&#40;</span><span class="st0">'6/6/2008'</span>, <span class="st0">'1'</span><span class="br0">&#41;</span>
<span class="kw1">INSERT</span> #Test <span class="kw1">VALUES</span><span class="br0">&#40;</span><span class="st0">'6/7/2008'</span>, <span class="st0">'1'</span><span class="br0">&#41;</span>
<span class="kw1">INSERT</span> #Test <span class="kw1">VALUES</span><span class="br0">&#40;</span><span class="st0">'6/10/2008'</span>, <span class="st0">'1'</span><span class="br0">&#41;</span>
<span class="kw1">INSERT</span> #Test <span class="kw1">VALUES</span><span class="br0">&#40;</span><span class="st0">'6/10/2008'</span>, <span class="st0">'1'</span><span class="br0">&#41;</span>
<span class="kw1">INSERT</span> #Test <span class="kw1">VALUES</span><span class="br0">&#40;</span><span class="st0">'6/29/2008'</span>, <span class="st0">'1'</span><span class="br0">&#41;</span>
<span class="kw1">INSERT</span> #Test <span class="kw1">VALUES</span><span class="br0">&#40;</span><span class="st0">'6/30/2008'</span>, <span class="st0">'1'</span><span class="br0">&#41;</span>
&nbsp;
<span class="kw1">INSERT</span> #Test <span class="kw1">VALUES</span><span class="br0">&#40;</span><span class="st0">'7/1/2008'</span>, <span class="st0">'2'</span><span class="br0">&#41;</span>
<span class="kw1">INSERT</span> #Test <span class="kw1">VALUES</span><span class="br0">&#40;</span><span class="st0">'7/2/2008'</span>, <span class="st0">'2'</span><span class="br0">&#41;</span>
<span class="kw1">INSERT</span> #Test <span class="kw1">VALUES</span><span class="br0">&#40;</span><span class="st0">'7/3/2008'</span>, <span class="st0">'2'</span><span class="br0">&#41;</span>
<span class="kw1">INSERT</span> #Test <span class="kw1">VALUES</span><span class="br0">&#40;</span><span class="st0">'7/3/2008'</span>, <span class="st0">'2'</span><span class="br0">&#41;</span>
<span class="kw1">INSERT</span> #Test <span class="kw1">VALUES</span><span class="br0">&#40;</span><span class="st0">'7/4/2008'</span>, <span class="st0">'2'</span><span class="br0">&#41;</span>
<span class="kw1">INSERT</span> #Test <span class="kw1">VALUES</span><span class="br0">&#40;</span><span class="st0">'7/6/2008'</span>, <span class="st0">'2'</span><span class="br0">&#41;</span>
<span class="kw1">INSERT</span> #Test <span class="kw1">VALUES</span><span class="br0">&#40;</span><span class="st0">'7/7/2008'</span>, <span class="st0">'2'</span><span class="br0">&#41;</span>
<span class="kw1">INSERT</span> #Test <span class="kw1">VALUES</span><span class="br0">&#40;</span><span class="st0">'7/10/2008'</span>, <span class="st0">'2'</span><span class="br0">&#41;</span>
<span class="kw1">INSERT</span> #Test <span class="kw1">VALUES</span><span class="br0">&#40;</span><span class="st0">'7/10/2008'</span>, <span class="st0">'2'</span><span class="br0">&#41;</span>
<span class="kw1">INSERT</span> #Test <span class="kw1">VALUES</span><span class="br0">&#40;</span><span class="st0">'7/20/2008'</span>, <span class="st0">'2'</span><span class="br0">&#41;</span>
<span class="kw1">INSERT</span> #Test <span class="kw1">VALUES</span><span class="br0">&#40;</span><span class="st0">'7/21/2008'</span>, <span class="st0">'2'</span><span class="br0">&#41;</span>
<span class="kw1">INSERT</span> #Test <span class="kw1">VALUES</span><span class="br0">&#40;</span><span class="st0">'7/29/2008'</span>, <span class="st0">'2'</span><span class="br0">&#41;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">CREATE TABLE #Test (ID INT IDENTITY not null, SomeDate DATETIME, CrewID CHAR(2))
 
INSERT #Test VALUES('6/1/2008', '1')
INSERT #Test VALUES('6/2/2008', '1')
INSERT #Test VALUES('6/2/2008', '1')
INSERT #Test VALUES('6/3/2008', '1')
INSERT #Test VALUES('6/4/2008', '1')
INSERT #Test VALUES('6/6/2008', '1')
INSERT #Test VALUES('6/7/2008', '1')
INSERT #Test VALUES('6/10/2008', '1')
INSERT #Test VALUES('6/10/2008', '1')
INSERT #Test VALUES('6/29/2008', '1')
INSERT #Test VALUES('6/30/2008', '1')
 
INSERT #Test VALUES('7/1/2008', '2')
INSERT #Test VALUES('7/2/2008', '2')
INSERT #Test VALUES('7/3/2008', '2')
INSERT #Test VALUES('7/3/2008', '2')
INSERT #Test VALUES('7/4/2008', '2')
INSERT #Test VALUES('7/6/2008', '2')
INSERT #Test VALUES('7/7/2008', '2')
INSERT #Test VALUES('7/10/2008', '2')
INSERT #Test VALUES('7/10/2008', '2')
INSERT #Test VALUES('7/20/2008', '2')
INSERT #Test VALUES('7/21/2008', '2')
INSERT #Test VALUES('7/29/2008', '2')</pre></div></div>

<p>Here is the desired output</p>
<p>
<pre>CrewID startdate  enddate
------ ---------- ----------
1      2008-06-01 2008-06-04
1      2008-06-06 2008-06-07
1      2008-06-10 2008-06-10
1      2008-06-29 2008-06-30
2      2008-07-01 2008-07-04
2      2008-07-06 2008-07-07
2      2008-07-10 2008-07-10
2      2008-07-20 2008-07-21
2      2008-07-29 2008-07-29</pre>
<p>
As you can see if the cleaning crew cleaned for more than one continuous day then use the min and max dates from the range. If the same day shows up more than once then use it only ones. when a break occurs, start with another day</p>
<p>And here is the solution</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
</pre></td><td class="de1"><pre class="de1">;<span class="kw1">WITH</span> c <span class="kw1">AS</span>
<span class="br0">&#40;</span>
&nbsp; <span class="kw1">SELECT</span> CrewID, SomeDate,
&nbsp; &nbsp; <span class="kw2">DATEADD</span><span class="br0">&#40;</span><span class="kw1">DAY</span>, <span class="sy0">-</span><span class="nu0">1</span><span class="sy0">*</span>DENSE_RANK<span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="kw1">OVER</span> <span class="br0">&#40;</span>PARTITION <span class="kw1">BY</span> CrewID <span class="kw1">ORDER</span> <span class="kw1">BY</span> SomeDate<span class="br0">&#41;</span>,
SomeDate<span class="br0">&#41;</span> <span class="kw1">AS</span> Grouped
&nbsp; <span class="kw1">FROM</span> #Test
<span class="br0">&#41;</span>
<span class="kw1">SELECT</span> CrewID, <span class="kw2">MIN</span><span class="br0">&#40;</span>SomeDate<span class="br0">&#41;</span> <span class="kw1">AS</span> startdate, <span class="kw2">MAX</span><span class="br0">&#40;</span>SomeDate<span class="br0">&#41;</span> <span class="kw1">AS</span> enddate
<span class="kw1">FROM</span> c
<span class="kw1">GROUP</span> <span class="kw1">BY</span> CrewID, Grouped
<span class="kw1">ORDER</span> <span class="kw1">BY</span> CrewID,startdate;</pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">;WITH c AS
(
  SELECT CrewID, SomeDate,
    DATEADD(DAY, -1*DENSE_RANK() OVER (PARTITION BY CrewID ORDER BY SomeDate),
SomeDate) AS Grouped
  FROM #Test
)
SELECT CrewID, MIN(SomeDate) AS startdate, MAX(SomeDate) AS enddate
FROM c
GROUP BY CrewID, Grouped
ORDER BY CrewID,startdate;</pre></div></div>

<p>That is all for today, come back tomorrow for some more goodies</p>
]]></content:encoded>
			<wfw:commentRss>/index.php/datamgmt/datadesign/sql-advent-2011-day-6/feed/</wfw:commentRss>
		<slash:comments>3</slash:comments>
		</item>
		<item>
		<title>T-SQL Tuesday #016 Grouping Market Data With T-SQL</title>
		<link>/index.php/datamgmt/datadesign/t-sql-tuesday-016-grouping/</link>
		<comments>/index.php/datamgmt/datadesign/t-sql-tuesday-016-grouping/#comments</comments>
		<pubDate>Tue, 08 Mar 2011 10:52:00 +0000</pubDate>
		<dc:creator><![CDATA[SQLDenis]]></dc:creator>
				<category><![CDATA[Data Modelling and Design]]></category>
		<category><![CDATA[grouping]]></category>
		<category><![CDATA[ranking]]></category>
		<category><![CDATA[t-sql tuesday]]></category>

		<guid isPermaLink="false">/index.php/2011/03/t-sql-tuesday-016-grouping/</guid>
		<description><![CDATA[This month's T-SQL Tuesday is hosted by Jes Borland and it is all about grouping and aggregate functions, here is my attempt. I wrote most of this post on my way to the MVP summit in Seattle. This post is all about the stock market, charting data for In&#8230;]]></description>
				<content:encoded><![CDATA[<p><a href="/index.php/DataMgmt/DBProgramming/come-one-come-all-to"><img src="/wp-content/uploads/blogs/DataMgmt/olap_1.gif" /></a></p>
<p>This month&#8217;s T-SQL Tuesday is hosted by <a href="/index.php/DataMgmt/?disp=authdir&amp;author=420">Jes Borland</a> and it is all about grouping and aggregate functions, here is my attempt. I wrote most of this post on my way to the MVP summit in Seattle. This post is all about the stock market, charting data for Intraday chart and for end of day charts. This post contains a lot of code and I apologize for that, I just want you to be able to run the code, in order to do that we have to setup all the tables and data.</p>
<p>Most people think of aggregate/grouping functions being Min, Max, Avg, Sum etc etc. To me Row_number and other ranking/windowing functions, datepart, converting to date, year() and month() can also be considered grouping<br />
<br />
When I say <em>intraday</em>, I mean the values that you would see for a stock if you would pull up a chart at 3 PM, in this case it would be a chart from 9:30 AM till 4PM if this was traded on for example the NYSE or NASDAQ.</p>
<p><em>End of day values</em> are close values, so for example the close price for Apple on March 4 was $360.</p>
<p>We are going to chart intraday in either 1 day or 5 day charts. If it is one day we will chart in minutes, if it is 5 days we will chart in 5 minute increments.<br />
For end of day data we are going to chart daily if it is 1 month, 3 months or 6 months and weekly if it is greater than 6 months.</p>
<p>So to start we are going to make up some tables with some fake data.</p>
<h3>Preparing the tables and data</h3>
<p>First we need a table of symbols (some people will call them tickers). This table is very simple, all it has is a SymbolID and a Symbol. In reality this table would look different because sometimes companies will change the symbol, when Sun Microsystems changed from SUNW to JAVA is one such example.<br />
Here is the table</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
</pre></td><td class="de1"><pre class="de1"><span class="kw1">CREATE</span> <span class="kw1">TABLE</span> Symbols <span class="br0">&#40;</span>
&nbsp; &nbsp; &nbsp; &nbsp;SymbolID <span class="kw1">INT</span> <span class="sy0">NOT</span> <span class="sy0">NULL</span> <span class="kw1">PRIMARY</span> <span class="kw1">KEY</span>,
&nbsp; &nbsp; &nbsp; &nbsp;Symbol <span class="kw1">VARCHAR</span><span class="br0">&#40;</span><span class="nu0">20</span><span class="br0">&#41;</span> <span class="sy0">NOT</span> <span class="sy0">NULL</span><span class="br0">&#41;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">CREATE TABLE Symbols (
       SymbolID INT NOT NULL PRIMARY KEY,
       Symbol VARCHAR(20) NOT NULL)</pre></div></div>

<p>We will insert these 4 symbols</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
</pre></td><td class="de1"><pre class="de1"><span class="kw1">INSERT</span> Symbols <span class="kw1">VALUES</span><span class="br0">&#40;</span><span class="nu0">1</span>,<span class="st0">'ABC'</span><span class="br0">&#41;</span>
<span class="kw1">INSERT</span> Symbols <span class="kw1">VALUES</span><span class="br0">&#40;</span><span class="nu0">2</span>,<span class="st0">'DEF'</span><span class="br0">&#41;</span>
<span class="kw1">INSERT</span> Symbols <span class="kw1">VALUES</span><span class="br0">&#40;</span><span class="nu0">3</span>,<span class="st0">'MNO'</span><span class="br0">&#41;</span>
<span class="kw1">INSERT</span> Symbols <span class="kw1">VALUES</span><span class="br0">&#40;</span><span class="nu0">4</span>,<span class="st0">'XYZ'</span><span class="br0">&#41;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">INSERT Symbols VALUES(1,'ABC')
INSERT Symbols VALUES(2,'DEF')
INSERT Symbols VALUES(3,'MNO')
INSERT Symbols VALUES(4,'XYZ')</pre></div></div>

<p>Next up is the creation of the table of numbers, this will facilitate the creation of the data later on.</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
</pre></td><td class="de1"><pre class="de1"><span class="kw1">CREATE</span> <span class="kw1">TABLE</span> Numbers <span class="br0">&#40;</span>number <span class="kw1">INT</span> <span class="sy0">NOT</span> <span class="sy0">NULL</span> &nbsp;<span class="kw1">PRIMARY</span> <span class="kw1">KEY</span><span class="br0">&#41;</span>
GO</pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">CREATE TABLE Numbers (number INT NOT NULL  PRIMARY KEY)
GO</pre></div></div>

<p>This will populate the table with 90000 rows.</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
</pre></td><td class="de1"><pre class="de1"><span class="kw1">INSERT</span> Numbers
<span class="kw1">SELECT</span> <span class="kw1">TOP</span> <span class="nu0">90000</span> ROW_NUMBER<span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="kw1">OVER</span><span class="br0">&#40;</span><span class="kw1">ORDER</span> <span class="kw1">BY</span> s1.<span class="me1">id</span> <span class="br0">&#41;</span>
<span class="kw1">FROM</span> sysobjects s1,sysobjects s2,sysobjects s3</pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">INSERT Numbers
SELECT TOP 90000 ROW_NUMBER() OVER(ORDER BY s1.id )
FROM sysobjects s1,sysobjects s2,sysobjects s3</pre></div></div>

<p>Next up is a table that will hold some time information</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
</pre></td><td class="de1"><pre class="de1"><span class="kw1">CREATE</span> <span class="kw1">TABLE</span> TempTickTime <span class="br0">&#40;</span> TickTime <span class="kw1">DATETIME</span> <span class="sy0">NOT</span> <span class="sy0">NULL</span><span class="br0">&#41;</span>
GO</pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">CREATE TABLE TempTickTime ( TickTime DATETIME NOT NULL)
GO</pre></div></div>

<p>This will populate that table with 30 second intervals between 2011-02-28 09:30:30.000 and 2011-03-31 15:30:00.000 only when it is between 9:30 AM and 4 PM</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
</pre></td><td class="de1"><pre class="de1"><span class="kw1">DECLARE</span> @StartTime <span class="kw1">DATETIME</span> <span class="sy0">=</span> <span class="st0">'20110228 09:30:00'</span>
<span class="kw1">INSERT</span> TempTickTime
<span class="kw1">SELECT</span> <span class="kw2">DATEADD</span><span class="br0">&#40;</span>s,number <span class="sy0">*</span> <span class="nu0">30</span>,@StartTime<span class="br0">&#41;</span>
<span class="kw1">FROM</span> Numbers
<span class="kw1">WHERE</span> &nbsp;<span class="kw1">CONVERT</span><span class="br0">&#40;</span><span class="kw1">TIME</span>, <span class="kw2">DATEADD</span><span class="br0">&#40;</span>s,number <span class="sy0">*</span> <span class="nu0">30</span>,@StartTime<span class="br0">&#41;</span><span class="br0">&#41;</span> <span class="sy0">BETWEEN</span> <span class="st0">'09:30:00.0000000'</span> <span class="sy0">AND</span> <span class="st0">'16:00:00.0000000'</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">DECLARE @StartTime DATETIME = '20110228 09:30:00'
INSERT TempTickTime
SELECT DATEADD(s,number * 30,@StartTime)
FROM Numbers
WHERE  CONVERT(TIME, DATEADD(s,number * 30,@StartTime)) BETWEEN '09:30:00.0000000' AND '16:00:00.0000000'</pre></div></div>

<p>Now when you deal with global markets, some instruments trade Monday through Friday, some of them trade Sunday till Thursday and there are other variations.<br />
From the 4 tickers we have, two will trade Monday through Friday and two will trade Sunday till Thursday</p>
<p>Create this table and populate it as follows</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
</pre></td><td class="de1"><pre class="de1"><span class="kw1">CREATE</span> <span class="kw1">TABLE</span> TickData <span class="br0">&#40;</span>
&nbsp; &nbsp; &nbsp; &nbsp;SymbolID <span class="kw1">INT</span> <span class="sy0">NOT</span> <span class="sy0">NULL</span>,
&nbsp; &nbsp; &nbsp; &nbsp;TickTime <span class="kw1">DATETIME</span> <span class="sy0">NOT</span> <span class="sy0">NULL</span>,
&nbsp; &nbsp; &nbsp; &nbsp;TickPrice <span class="kw1">DECIMAL</span> <span class="br0">&#40;</span><span class="nu0">20</span>,<span class="nu0">10</span><span class="br0">&#41;</span> <span class="sy0">NOT</span> <span class="sy0">NULL</span><span class="br0">&#41;</span>
&nbsp;
&nbsp;
<span class="kw1">SET</span> DATEFIRST <span class="nu0">1</span> <span class="co1">--Default to Sunday as 1</span>
&nbsp;
<span class="kw1">INSERT</span> TickData
<span class="kw1">SELECT</span> SymbolId,tickTime,<span class="nu0">1100</span> <span class="sy0">+</span> <span class="nu0">1</span> <span class="sy0">*</span> <span class="kw2">RAND</span><span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="sy0">*</span> <span class="kw1">CONVERT</span><span class="br0">&#40;</span><span class="kw1">FLOAT</span>,tickTime<span class="br0">&#41;</span> <span class="sy0">*</span> SymbolId<span class="sy0">/</span><span class="nu0">2.01</span>
<span class="kw1">FROM</span> TempTickTime t
<span class="sy0">CROSS</span> <span class="sy0">JOIN</span> Symbols s
<span class="kw1">WHERE</span> <span class="kw2">DATEPART</span><span class="br0">&#40;</span>dw,tickTime<span class="br0">&#41;</span> <span class="sy0">BETWEEN</span> <span class="nu0">2</span> <span class="sy0">AND</span> <span class="nu0">6</span> <span class="co1">--Monday till Friday</span>
<span class="sy0">AND</span> s.<span class="me1">SymbolID</span> <span class="sy0">IN</span> <span class="br0">&#40;</span><span class="nu0">1</span>,<span class="nu0">2</span><span class="br0">&#41;</span>
<span class="kw1">ORDER</span> <span class="kw1">BY</span> tickTime
&nbsp;
&nbsp;
<span class="kw1">INSERT</span> TickData
<span class="kw1">SELECT</span> SymbolId,tickTime,<span class="nu0">1100</span> <span class="sy0">+</span> <span class="nu0">1</span> <span class="sy0">*</span> <span class="kw2">RAND</span><span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="sy0">*</span> <span class="kw1">CONVERT</span><span class="br0">&#40;</span><span class="kw1">FLOAT</span>,tickTime<span class="br0">&#41;</span> <span class="sy0">*</span> SymbolId<span class="sy0">/</span><span class="nu0">2.01</span>
<span class="kw1">FROM</span> TempTickTime t
<span class="sy0">CROSS</span> <span class="sy0">JOIN</span> Symbols s
<span class="kw1">WHERE</span> <span class="kw2">DATEPART</span><span class="br0">&#40;</span>dw,tickTime<span class="br0">&#41;</span> <span class="sy0">BETWEEN</span> <span class="nu0">1</span> <span class="sy0">AND</span> <span class="nu0">5</span> <span class="co1">--Sunday till Thursday</span>
<span class="sy0">AND</span> s.<span class="me1">SymbolID</span> <span class="sy0">IN</span> <span class="br0">&#40;</span><span class="nu0">3</span>,<span class="nu0">4</span><span class="br0">&#41;</span>
<span class="kw1">ORDER</span> <span class="kw1">BY</span> tickTime</pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">CREATE TABLE TickData (
       SymbolID INT NOT NULL,
       TickTime DATETIME NOT NULL,
       TickPrice DECIMAL (20,10) NOT NULL)
 

SET DATEFIRST 1 --Default to Sunday as 1
 
INSERT TickData
SELECT SymbolId,tickTime,1100 + 1 * RAND() * CONVERT(FLOAT,tickTime) * SymbolId/2.01
FROM TempTickTime t
CROSS JOIN Symbols s
WHERE DATEPART(dw,tickTime) BETWEEN 2 AND 6 --Monday till Friday
AND s.SymbolID IN (1,2)
ORDER BY tickTime
 

INSERT TickData
SELECT SymbolId,tickTime,1100 + 1 * RAND() * CONVERT(FLOAT,tickTime) * SymbolId/2.01
FROM TempTickTime t
CROSS JOIN Symbols s
WHERE DATEPART(dw,tickTime) BETWEEN 1 AND 5 --Sunday till Thursday
AND s.SymbolID IN (3,4)
ORDER BY tickTime</pre></div></div>

<p>What the query does is insert the SymbolID, the ticktime and then a pseudo random value that represents the price. The query also is grouping by day of week by using the DATEPART function.</p>
<p>We are done with intraday data, next up is end of day</p>
<p>First create this table</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
</pre></td><td class="de1"><pre class="de1"><span class="kw1">CREATE</span> <span class="kw1">TABLE</span> EODData <span class="br0">&#40;</span>
&nbsp; &nbsp; &nbsp; &nbsp;SymbolID <span class="kw1">INT</span> <span class="sy0">NOT</span> <span class="sy0">NULL</span>,
&nbsp; &nbsp; &nbsp; &nbsp;SomeDate <span class="kw1">DATETIME</span> <span class="sy0">NOT</span> <span class="sy0">NULL</span>,
&nbsp; &nbsp; &nbsp; &nbsp;TickPrice <span class="kw1">DECIMAL</span> <span class="br0">&#40;</span><span class="nu0">20</span>,<span class="nu0">10</span><span class="br0">&#41;</span> <span class="sy0">NOT</span> <span class="sy0">NULL</span>,
&nbsp; &nbsp; &nbsp; &nbsp;IsEndOfWeek <span class="kw1">tinyint</span> <span class="sy0">NOT</span> <span class="sy0">NULL</span><span class="br0">&#41;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">CREATE TABLE EODData (
       SymbolID INT NOT NULL,
       SomeDate DATETIME NOT NULL,
       TickPrice DECIMAL (20,10) NOT NULL,
       IsEndOfWeek tinyint NOT NULL)</pre></div></div>

<p>In the query below we are grabbing the max time per day for a SymbolID and the associated price for that time. We are in essence grouping by SymbolId and Date, since we are ordering by TickTime  descending and we are only grabbing where the ROW value is 1, we will get the latest value for a day.</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
</pre></td><td class="de1"><pre class="de1">;<span class="kw1">WITH</span> CTE <span class="kw1">AS</span><span class="br0">&#40;</span><span class="kw1">SELECT</span> <span class="sy0">*</span>,
ROW_NUMBER<span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="kw1">OVER</span> <span class="br0">&#40;</span>PARTITION <span class="kw1">BY</span> SymbolId,<span class="kw1">CONVERT</span><span class="br0">&#40;</span><span class="kw1">DATE</span>,TickTime<span class="br0">&#41;</span> <span class="kw1">ORDER</span> <span class="kw1">BY</span> TickTime <span class="kw1">DESC</span><span class="br0">&#41;</span> <span class="kw1">AS</span> <span class="kw1">ROW</span>
<span class="kw1">FROM</span> TickData<span class="br0">&#41;</span>
&nbsp;
<span class="kw1">INSERT</span> EODData
<span class="kw1">SELECT</span> SymbolId,<span class="kw1">CONVERT</span><span class="br0">&#40;</span><span class="kw1">DATE</span>,TickTime<span class="br0">&#41;</span>,TickPrice,<span class="nu0">0</span> <span class="kw1">FROM</span> CTE
<span class="kw1">WHERE</span> <span class="kw1">ROW</span> <span class="sy0">=</span> <span class="nu0">1</span>
<span class="kw1">ORDER</span> <span class="kw1">BY</span> SymbolID,<span class="kw1">CONVERT</span><span class="br0">&#40;</span><span class="kw1">DATE</span>,TickTime<span class="br0">&#41;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">;WITH CTE AS(SELECT *,
ROW_NUMBER() OVER (PARTITION BY SymbolId,CONVERT(DATE,TickTime) ORDER BY TickTime DESC) AS ROW
FROM TickData)
 
INSERT EODData
SELECT SymbolId,CONVERT(DATE,TickTime),TickPrice,0 FROM CTE
WHERE ROW = 1
ORDER BY SymbolID,CONVERT(DATE,TickTime)</pre></div></div>

<p>Here is another way of doing the insert by grouping by SymbolId and converting the TickTime to a date and grabbing the max TickTime for that, with this derived table we join back to the TickData table and do our inserts.</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
</pre></td><td class="de1"><pre class="de1"><span class="co1">--INSERT EODData</span>
<span class="kw1">SELECT</span> t.<span class="me1">SymbolId</span>,<span class="kw1">CONVERT</span><span class="br0">&#40;</span><span class="kw1">DATE</span>,TickTime<span class="br0">&#41;</span>,TickPrice,<span class="nu0">0</span>
<span class="kw1">FROM</span> TickData t
<span class="sy0">JOIN</span><span class="br0">&#40;</span>
&nbsp; &nbsp; &nbsp; &nbsp;<span class="kw1">SELECT</span> SymbolId,<span class="kw2">MAX</span><span class="br0">&#40;</span>TickTime<span class="br0">&#41;</span> <span class="kw1">as</span> MaxTime
&nbsp; &nbsp; &nbsp; &nbsp;<span class="kw1">FROM</span> TickData
&nbsp; &nbsp; &nbsp; &nbsp;<span class="kw1">GROUP</span> <span class="kw1">BY</span> SymbolId,<span class="kw1">CONVERT</span><span class="br0">&#40;</span><span class="kw1">DATE</span>,TickTime<span class="br0">&#41;</span><span class="br0">&#41;</span> x <span class="kw1">on</span>
t.<span class="me1">SymbolId</span> <span class="sy0">=</span> x.<span class="me1">SymbolId</span>
and t.<span class="me1">TickTime</span> <span class="sy0">=</span> &nbsp;x.<span class="me1">MaxTime</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">--INSERT EODData
SELECT t.SymbolId,CONVERT(DATE,TickTime),TickPrice,0
FROM TickData t
JOIN(
       SELECT SymbolId,MAX(TickTime) as MaxTime
       FROM TickData
       GROUP BY SymbolId,CONVERT(DATE,TickTime)) x on
t.SymbolId = x.SymbolId
and t.TickTime =  x.MaxTime</pre></div></div>

<p>Here is where we do some grouping, in order to grab the last possible value for a week, we need to group by SymbolID, year, month and the week number.</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
</pre></td><td class="de1"><pre class="de1"><span class="kw1">SELECT</span> SymbolId,<span class="kw2">MAX</span><span class="br0">&#40;</span>SomeDate<span class="br0">&#41;</span> <span class="kw1">as</span> MaxDate
<span class="kw1">FROM</span> EODData
<span class="kw1">GROUP</span> <span class="kw1">BY</span> SymbolId,<span class="kw1">YEAR</span><span class="br0">&#40;</span>SomeDate<span class="br0">&#41;</span>, <span class="kw1">MONTH</span><span class="br0">&#40;</span>SomeDate<span class="br0">&#41;</span>,<span class="kw2">DATEPART</span><span class="br0">&#40;</span>wk,SomeDate<span class="br0">&#41;</span>
<span class="kw1">order</span> <span class="kw1">by</span> SymbolID, MaxDate</pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">SELECT SymbolId,MAX(SomeDate) as MaxDate
FROM EODData
GROUP BY SymbolId,YEAR(SomeDate), MONTH(SomeDate),DATEPART(wk,SomeDate)
order by SymbolID, MaxDate</pre></div></div>

<p>That query produces the following output, as you can see it has the latest value for each week for each symbol.<br />
</p>
<div class="tables">
<table>
<tr>
<th>SymbolId</th>
<th>MaxDate</th>
</tr>
<tr>
<td>1</td>
<td>2011-03-05 00:00:00.000</td>
</tr>
<tr>
<td>1</td>
<td>2011-03-12 00:00:00.000</td>
</tr>
<tr>
<td>1</td>
<td>2011-03-19 00:00:00.000</td>
</tr>
<tr>
<td>1</td>
<td>2011-03-26 00:00:00.000</td>
</tr>
<tr>
<td>1</td>
<td>2011-03-31 00:00:00.000</td>
</tr>
<tr>
<td>2</td>
<td>2011-03-05 00:00:00.000</td>
</tr>
<tr>
<td>2</td>
<td>2011-03-12 00:00:00.000</td>
</tr>
<tr>
<td>2</td>
<td>2011-03-19 00:00:00.000</td>
</tr>
<tr>
<td>2</td>
<td>2011-03-26 00:00:00.000</td>
</tr>
<tr>
<td>2</td>
<td>2011-03-31 00:00:00.000</td>
</tr>
<tr>
<td>3</td>
<td>2011-02-28 00:00:00.000</td>
</tr>
<tr>
<td>3</td>
<td>2011-03-04 00:00:00.000</td>
</tr>
<tr>
<td>3</td>
<td>2011-03-11 00:00:00.000</td>
</tr>
<tr>
<td>3</td>
<td>2011-03-18 00:00:00.000</td>
</tr>
<tr>
<td>3</td>
<td>2011-03-25 00:00:00.000</td>
</tr>
<tr>
<td>3</td>
<td>2011-03-31 00:00:00.000</td>
</tr>
<tr>
<td>4</td>
<td>2011-02-28 00:00:00.000</td>
</tr>
<tr>
<td>4</td>
<td>2011-03-04 00:00:00.000</td>
</tr>
<tr>
<td>4</td>
<td>2011-03-11 00:00:00.000</td>
</tr>
<tr>
<td>4</td>
<td>2011-03-18 00:00:00.000</td>
</tr>
<tr>
<td>4</td>
<td>2011-03-25 00:00:00.000</td>
</tr>
<tr>
<td>4</td>
<td>2011-03-31 00:00:00.000</td>
</tr>
</table>
</div>
<p>
Here is an example of how to join the grouping query to the table so that we can get all the details for the row, we will use this as the basis for our update later on</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
</pre></td><td class="de1"><pre class="de1"><span class="kw1">SELECT</span> e.<span class="sy0">*</span> <span class="kw1">from</span> EODData e
join <span class="br0">&#40;</span>
&nbsp; &nbsp; &nbsp; &nbsp;<span class="kw1">SELECT</span> SymbolId,<span class="kw2">MAX</span><span class="br0">&#40;</span>SomeDate<span class="br0">&#41;</span> <span class="kw1">as</span> MaxDate
&nbsp; &nbsp; &nbsp; &nbsp;<span class="kw1">FROM</span> EODData
&nbsp; &nbsp; &nbsp; &nbsp;<span class="kw1">GROUP</span> <span class="kw1">BY</span> SymbolId,<span class="kw1">YEAR</span><span class="br0">&#40;</span>SomeDate<span class="br0">&#41;</span>, <span class="kw1">MONTH</span><span class="br0">&#40;</span>SomeDate<span class="br0">&#41;</span>,<span class="kw2">DATEPART</span><span class="br0">&#40;</span>wk,SomeDate<span class="br0">&#41;</span><span class="br0">&#41;</span> x
<span class="kw1">on</span> e.<span class="me1">SomeDAte</span> <span class="sy0">=</span> x.<span class="me1">MaxDate</span>
and e.<span class="me1">SymbolId</span> <span class="sy0">=</span>x.<span class="me1">SymbolId</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">SELECT e.* from EODData e
join (
       SELECT SymbolId,MAX(SomeDate) as MaxDate
       FROM EODData
       GROUP BY SymbolId,YEAR(SomeDate), MONTH(SomeDate),DATEPART(wk,SomeDate)) x
on e.SomeDAte = x.MaxDate
and e.SymbolId =x.SymbolId</pre></div></div>

<p>And here is how we update the IsEndOfWeek column with the value 1 for the rows that fall on the end of the week</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
</pre></td><td class="de1"><pre class="de1"><span class="kw1">UPDATE</span> &nbsp;e
<span class="kw1">SET</span> e.<span class="me1">IsEndOfWeek</span> <span class="sy0">=</span> <span class="nu0">1</span>
<span class="kw1">FROM</span> EODData e
<span class="sy0">JOIN</span> <span class="br0">&#40;</span><span class="kw1">SELECT</span> SymbolId,<span class="kw2">MAX</span><span class="br0">&#40;</span>SomeDate<span class="br0">&#41;</span> <span class="kw1">AS</span> MaxDate
&nbsp; &nbsp; &nbsp; &nbsp;<span class="kw1">FROM</span> EODData
&nbsp; &nbsp; &nbsp; &nbsp;<span class="kw1">GROUP</span> <span class="kw1">BY</span> SymbolId,<span class="kw1">YEAR</span><span class="br0">&#40;</span>SomeDate<span class="br0">&#41;</span>, <span class="kw1">MONTH</span><span class="br0">&#40;</span>SomeDate<span class="br0">&#41;</span>,<span class="kw2">DATEPART</span><span class="br0">&#40;</span>wk,SomeDate<span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp;<span class="br0">&#41;</span> x
<span class="kw1">ON</span> e.<span class="me1">SomeDate</span> <span class="sy0">=</span> x.<span class="me1">MaxDate</span>
<span class="sy0">AND</span> e.<span class="me1">SymbolId</span> <span class="sy0">=</span>x.<span class="me1">SymbolId</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">UPDATE  e
SET e.IsEndOfWeek = 1
FROM EODData e
JOIN (SELECT SymbolId,MAX(SomeDate) AS MaxDate
       FROM EODData
       GROUP BY SymbolId,YEAR(SomeDate), MONTH(SomeDate),DATEPART(wk,SomeDate)
       ) x
ON e.SomeDate = x.MaxDate
AND e.SymbolId =x.SymbolId</pre></div></div>

<h3>Charting end of day values</h3>
<p>If we chart 1,3 or 6 months we will use daily values</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
</pre></td><td class="de1"><pre class="de1"><span class="kw1">SELECT</span> <span class="sy0">*</span>
<span class="kw1">FROM</span> EODData
<span class="kw1">WHERE</span> SymbolId <span class="sy0">=</span> <span class="nu0">1</span>
<span class="kw1">ORDER</span> <span class="kw1">BY</span> SomeDate</pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">SELECT *
FROM EODData
WHERE SymbolId = 1
ORDER BY SomeDate</pre></div></div>

<p>If we chart anything over 6 months we want to grab weekly values, the query for that is now really simple</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
</pre></td><td class="de1"><pre class="de1"><span class="kw1">SELECT</span> <span class="sy0">*</span>
<span class="kw1">FROM</span> EODData
<span class="kw1">WHERE</span> SymbolId <span class="sy0">=</span> <span class="nu0">1</span>
<span class="sy0">AND</span> IsEndOfWeek <span class="sy0">=</span> <span class="nu0">1</span>
<span class="kw1">ORDER</span> <span class="kw1">BY</span> SomeDate</pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">SELECT *
FROM EODData
WHERE SymbolId = 1
AND IsEndOfWeek = 1
ORDER BY SomeDate</pre></div></div>

<h3>Charting intraday data</h3>
<p>If we want data for a 1 day chart then we are going to grab in 1 minute intervals, if we are going to chart 5 days we will grab in 5 minute chunks.</p>
<p>There is going to be a lot going on in the following code snippet so I will try to explain it in the comments</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
</pre></td><td class="de1"><pre class="de1"><span class="kw1">DECLARE</span> @StartDate <span class="kw1">DATETIME</span> <span class="sy0">=</span> <span class="st0">'2011-03-01 09:30:00.000'</span>
<span class="kw1">DECLARE</span> @TimeSpan <span class="kw1">INT</span> <span class="sy0">=</span> <span class="nu0">5</span>
<span class="co1">-- 1 &nbsp;will return 2011-03-31 00:00:00.000</span>
<span class="co1">-- 5 &nbsp;will return 2011-03-25 00:00:00.000</span>
&nbsp;
<span class="co1">--Grab latest 1 or 5 days, we have to account for weekends and markets being closed, this is why we do @TimeSpan * 5</span>
<span class="co1">-- and then we do top @TimeSpan..which can be 1 or 5</span>
<span class="co1">-- we convert to date so that we get distinct dates</span>
<span class="kw1">SELECT</span> &nbsp;<span class="kw1">TOP</span> <span class="br0">&#40;</span>@TimeSpan<span class="br0">&#41;</span> @StartDate <span class="sy0">=</span> Today 
&nbsp; &nbsp; <span class="kw1">FROM</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#40;</span><span class="kw1">SELECT</span> &nbsp;<span class="kw1">DISTINCT</span> <span class="kw1">TOP</span> <span class="br0">&#40;</span>@TimeSpan <span class="sy0">*</span> <span class="nu0">5</span><span class="br0">&#41;</span> <span class="kw1">CONVERT</span><span class="br0">&#40;</span><span class="kw1">DATE</span>,TickTime<span class="br0">&#41;</span> <span class="kw1">AS</span> Today
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">FROM</span> dbo.<span class="me1">TickData</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">WHERE</span> SymbolID <span class="sy0">=</span> &nbsp;<span class="nu0">1</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="sy0">AND</span> TickTime <span class="sy0">&gt;</span> @StartDate 
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">ORDER</span> <span class="kw1">BY</span> <span class="kw1">CONVERT</span><span class="br0">&#40;</span><span class="kw1">DATE</span>,TickTime<span class="br0">&#41;</span> <span class="kw1">DESC</span><span class="br0">&#41;</span> x
&nbsp; &nbsp; <span class="kw1">ORDER</span> <span class="kw1">BY</span> Today <span class="kw1">DESC</span>
&nbsp; &nbsp; 
&nbsp;
<span class="co1">--We have t and q for column names because this is being generated as JSON and we want the data to be as small as possible</span>
<span class="kw1">SELECT</span> 
&nbsp; &nbsp; t1.<span class="me1">TickTime</span> <span class="kw1">AS</span> t,
&nbsp; &nbsp; t1.<span class="me1">TickPrice</span> <span class="kw1">AS</span> q
&nbsp; &nbsp; <span class="kw1">FROM</span> dbo.<span class="me1">TickData</span> t1
&nbsp; &nbsp; <span class="sy0">JOIN</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#40;</span><span class="kw1">SELECT</span> SymbolID, <span class="kw2">MAX</span><span class="br0">&#40;</span>TickTime<span class="br0">&#41;</span> <span class="kw1">AS</span> Ticktime,<span class="kw2">DATEPART</span><span class="br0">&#40;</span>mi,ticktime<span class="br0">&#41;</span> <span class="kw1">AS</span> TickMinute
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">FROM</span> dbo.<span class="me1">TickData</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">WHERE</span> SymbolID <span class="sy0">=</span> &nbsp;<span class="nu0">1</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="sy0">AND</span> ticktime <span class="sy0">&gt;=</span> @StartDate
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">GROUP</span> <span class="kw1">BY</span> SymbolID,<span class="kw2">DATEPART</span><span class="br0">&#40;</span>hh,TickTime<span class="br0">&#41;</span>,<span class="kw2">DATEPART</span><span class="br0">&#40;</span>mi,ticktime<span class="br0">&#41;</span>,<span class="kw2">DATEPART</span><span class="br0">&#40;</span>dd,ticktime<span class="br0">&#41;</span><span class="br0">&#41;</span> x
&nbsp; &nbsp; <span class="kw1">ON</span> x.<span class="me1">SymbolID</span> <span class="sy0">=</span> t1.<span class="me1">SymbolID</span>
&nbsp; &nbsp; <span class="sy0">AND</span> x.<span class="me1">Ticktime</span> <span class="sy0">=</span> t1.<span class="me1">Ticktime</span>
&nbsp; &nbsp; <span class="kw1">WHERE</span> t1.<span class="me1">SymbolID</span> <span class="sy0">=</span> <span class="nu0">1</span>
&nbsp; &nbsp; <span class="sy0">AND</span> TickMinute <span class="sy0">%</span> &nbsp;@TimeSpan <span class="sy0">=</span> <span class="nu0">0</span> &nbsp;<span class="co1">--0nly grab the minutes what the value of @TimeSpan holds</span>
&nbsp; &nbsp; <span class="kw1">ORDER</span> <span class="kw1">BY</span> t1.<span class="me1">TickTime</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">DECLARE @StartDate DATETIME = '2011-03-01 09:30:00.000'
DECLARE @TimeSpan INT = 5
-- 1  will return 2011-03-31 00:00:00.000
-- 5  will return 2011-03-25 00:00:00.000

--Grab latest 1 or 5 days, we have to account for weekends and markets being closed, this is why we do @TimeSpan * 5
-- and then we do top @TimeSpan..which can be 1 or 5
-- we convert to date so that we get distinct dates
SELECT  TOP (@TimeSpan) @StartDate = Today 
	FROM
		(SELECT  DISTINCT TOP (@TimeSpan * 5) CONVERT(DATE,TickTime) AS Today
		FROM dbo.TickData
		WHERE SymbolID =  1
		AND TickTime &gt; @StartDate 
		ORDER BY CONVERT(DATE,TickTime) DESC) x
	ORDER BY Today DESC
	

--We have t and q for column names because this is being generated as JSON and we want the data to be as small as possible
SELECT 
	t1.TickTime AS t,
	t1.TickPrice AS q
	FROM dbo.TickData t1
	JOIN
		(SELECT SymbolID, MAX(TickTime) AS Ticktime,DATEPART(mi,ticktime) AS TickMinute
		FROM dbo.TickData
		WHERE SymbolID =  1
		AND ticktime &gt;= @StartDate
		GROUP BY SymbolID,DATEPART(hh,TickTime),DATEPART(mi,ticktime),DATEPART(dd,ticktime)) x
	ON x.SymbolID = t1.SymbolID
	AND x.Ticktime = t1.Ticktime
	WHERE t1.SymbolID = 1
	AND TickMinute %  @TimeSpan = 0  --0nly grab the minutes what the value of @TimeSpan holds
	ORDER BY t1.TickTime</pre></div></div>

<p>Take a look at this line AND TickMinute %  @TimeSpan = 0<br />
So basically we are aggregating in 1 or 5 minutes (really whatever @TimeSpan is, if it is 3 then it will be in 3 minute chunks). We are using the % <a href="http://msdn.microsoft.com/en-us/library/ms190279.aspx">(Modulo)</a> operator to accomplish this.</p>
<p>&#8211;If you run the code above with @TimeSpan = 5, you get data in 5 minute intervals<br />
DECLARE @TimeSpan INT = 5</p>
<div class="tables">
<table>
<tr>
<th>t</th>
<th>q</th>
</tr>
<tr>
<td>2011-03-31 09:30:30.000</td>
<td>	17132.3582356171</td>
</tr>
<tr>
<td>2011-03-31 09:35:30.000</td>
<td>	17132.3596056885</td>
</tr>
<tr>
<td>2011-03-31 09:40:30.000</td>
<td>	17132.3609757598</td>
</tr>
<tr>
<td>2011-03-31 09:45:30.000</td>
<td>	17132.3623458311</td>
</tr>
</table>
</div>
<p>&#8211;If you run the code above with @TimeSpan = 1, you get data in 1 minute intervals<br />
DECLARE @TimeSpan INT = 1</p>
<div class="tables">
<table>
<tr>
<th>t</th>
<th>q</th>
</tr>
<tr>
<td>2011-03-31 09:30:30.000</td>
<td>	17132.3582356171</td>
</tr>
<tr>
<td>2011-03-31 09:31:30.000</td>
<td>	17132.3585096314</td>
</tr>
<tr>
<td>2011-03-31 09:32:30.000</td>
<td>	17132.3587836457</td>
</tr>
<tr>
<td>2011-03-31 09:33:30.000</td>
<td>	17132.3590576599</td>
</tr>
<tr>
<td>2011-03-31 09:34:30.000</td>
<td>	17132.3593316742</td>
</tr>
<tr>
<td>2011-03-31 09:35:30.000</td>
<td>	17132.3596056885</td>
</tr>
<tr>
<td>2011-03-31 09:36:30.000</td>
<td>	17132.3598797027</td>
</tr>
</table>
</div>
<p>That is it for this post, there is a lot of code but hopefully you can get an idea of what it all does, if you have any questions leave me a comment.</p>
<p>*** <strong>Remember, if you have a SQL related question, try our <a href="http://forum.lessthandot.com/viewforum.php?f=17">Microsoft SQL Server Programming</a> forum or our <a href="http://forum.lessthandot.com/viewforum.php?f=22">Microsoft SQL Server Admin</a> forum</strong><ins></ins></p>
]]></content:encoded>
			<wfw:commentRss>/index.php/datamgmt/datadesign/t-sql-tuesday-016-grouping/feed/</wfw:commentRss>
		<slash:comments>4</slash:comments>
		</item>
	</channel>
</rss>
