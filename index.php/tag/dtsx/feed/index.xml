<?xml version="1.0" encoding="UTF-8"?><rss version="2.0"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:atom="http://www.w3.org/2005/Atom"
	xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
	xmlns:slash="http://purl.org/rss/1.0/modules/slash/"
	>

<channel>
	<title>dtsx &#8211; LessthanDot</title>
	<atom:link href="/index.php/tag/dtsx/feed/" rel="self" type="application/rss+xml" />
	<link>/</link>
	<description>A Technical Community for IT Professionals</description>
	<lastBuildDate>Sat, 09 Mar 2019 12:50:36 +0000</lastBuildDate>
	<language>en-US</language>
	<sy:updatePeriod>hourly</sy:updatePeriod>
	<sy:updateFrequency>1</sy:updateFrequency>
	<generator>https://wordpress.org/?v=4.6.1</generator>
	<item>
		<title>Have SQL, will travel – East Iowa SQL Saturday</title>
		<link>/index.php/datamgmt/datadesign/sqlsatiowarecap/</link>
		<comments>/index.php/datamgmt/datadesign/sqlsatiowarecap/#comments</comments>
		<pubDate>Mon, 20 Sep 2010 16:41:35 +0000</pubDate>
		<dc:creator><![CDATA[Ted Krueger (onpnt)]]></dc:creator>
				<category><![CDATA[Data Modelling and Design]]></category>
		<category><![CDATA[Database Administration]]></category>
		<category><![CDATA[Database Programming]]></category>
		<category><![CDATA[Microsoft SQL Server]]></category>
		<category><![CDATA[Microsoft SQL Server Admin]]></category>
		<category><![CDATA[configuration files]]></category>
		<category><![CDATA[configuration variables]]></category>
		<category><![CDATA[dtsx]]></category>
		<category><![CDATA[parent child packages]]></category>
		<category><![CDATA[sql saturday]]></category>
		<category><![CDATA[sql server 2008]]></category>
		<category><![CDATA[ssis]]></category>

		<guid isPermaLink="false">/index.php/2010/09/sqlsatiowarecap/</guid>
		<description><![CDATA[This past weekend I traveled to Iowa City to hold a session on SSIS basics.  The drive was worth it (even the hours looking at the back of a semi while the highway was at a dead stop).  My session went extremely well and the group that attended the session was interactive and we all had a great time together.  Interactive groups always make sessions more enjoyable.  Ask questions and give your own experiences!  Even the speakers gain more from speaking when the group gets into it.  There were some takeaways of my own that I will write up based on some questions and promises to the group (yes, I haven’t forgotten).  I hope to have those posted very soon.  One was the baseline collection that I have mentioned over the past few weeks.  This was based off a blog series that I discussed on collecting and making baselines a must with your SQL Server environments.  I’m writing a new series of packages to handle this in a friendly and portable upload for everyone and hope to have it done soon.]]></description>
				<content:encoded><![CDATA[<p>This past weekend I traveled to Iowa City to hold a session on SSIS basics.  The drive was worth it (even the hours looking at the back of a semi while the highway was at a dead stop).  My session went extremely well and the group that attended the session was interactive and we all had a great time together.  Interactive groups always make sessions more enjoyable.  Ask questions and give your own experiences!  Even the speakers gain more from speaking when the group gets into it.  There were some takeaways of my own that I will write up based on some questions and promises to the group (yes, I haven’t forgotten).  I hope to have those posted very soon.  One was the baseline collection that I have mentioned over the past few weeks.  This was based off a blog series that I discussed on collecting and making baselines a must with your SQL Server environments.  I&#8217;m writing a new series of packages to handle this in a friendly and portable upload for everyone and hope to have it done soon. </p>
<p>
<div class="image_block"><img src="/wp-content/uploads/blogs/DataMgmt/applause.gif" alt="" title="" width="176" height="133" align="left" /></div>
<p>I&#8217;d like to single out the team that organized East Iowa SQL Saturday.  If the measure of success is measured from the people reviewing the actions of others, then I’d like to say, the East Iowa SQL Saturday team is nothing short of a very successful group of leaders and organizers.  One thing that really stood out to me was the time allocated per session.  My session alone was a revamp of a user group session.  We know that user group meetings run hours so it was difficult but doable to make this session shrink to the normal SQL Saturday 45-50 minutes times.  What the team did for this SQL Saturday was allocate an hour and fifteen minutes per session though.  That was a great change and I heard from other speakers that they also thought it was a really good time to be given. I’d like to thank them personally for the excellent job in organizing and changing it up to make it that much better.</p>
<p>SQL Saturdays are an excellent way for everyone to network.  This event gave me the chance to finally meet and have great conversations with people that I have wanted to meet for a very long time.  I had some excellent conversations with Kathi Kellenberger (<a href="http://www.sqlservercentral.com/blogs/kathi_kellenberger/default.aspx">blog</a> | <a href="http://twitter.com/auntkathi">twitter</a>), Kendra Little (<a href="http://littlekendra.com/">blog</a> | <a href="http://twitter.com/Kendra_Little">twitter</a>) and Arie Jones (<a href="http://www.programmersedge.com/">blog</a> | <a href="http://twitter.com/programmersedge">twitter</a>).  I have wanted to meet these great community contributors for some time.  I also had the chance to catch up with Jason Strate (<a href="http://www.jasonstrate.com/">blog</a> | <a href="http://twitter.com/StrateSQL">twitter</a>) and Sarah (awesome honorary SQL peep), Jes Borland (<a href="http://jesborland.wordpress.com/">blog</a> | <a href="http://twitter.com/grrl_geek">twitter</a>), Wendy Pastrick (<a href="http://wendyverse.blogspot.com/">blog</a> | <a href="http://twitter.com/wendy_dance">Twitter</a>), and Bob Pusateri (<a href="http://www.bobpusateri.com/">blog</a> | <a href="http://twitter.com/SQLBob">twitter</a>).  Oh and watch Michelle Ufford (<a href="http://www.sqlfool.com/">blog</a> | <a href="http://twitter.com/sqlfool">twitter</a>), Ed Leighton-Dick (<a href="http://sqlfool.com/">blog</a> | <a href="http://twitter.com/eleightondick">twitter</a>) and Jeff Belina (<a href="http://twitter.com/jbelina">twitter</a>) with help from Chris Leonard (<a href="http://www.databaseguy.com/">blog</a> | <a href="http://twitter.com/databaseguy">twitter</a>) run around like crazy as the event rolled on.  Being a former SQL Saturday organizer, I have great respect for these people.  A lot goes into these events and the day of is very stressful to say the least.  This one went smoothly from the outside looking in and that is a successful event in anyone’s eyes.  I managed to find Chris a few times while walking the halls from the speaker lounge back to the main event and thank him for the great organizing efforts.  Having the chance to talk to these talented individuals is enough value in coming to these events.  (I even had the chance to heckle Arie and Jason a bit).  If you did miss this SQL Saturday and want to chance to heckle those guys, no worries.  Click the blog links by their names and have at the comments section.  I’m sure they will love me for that.</p>
<p>This SQL Saturday also played out a WIT (Women in Technology) lunch panel.  The setting was my very good friend, Jes Borland, Wendy Pastrick and Kathi Kellenberger up in front of the entire SQL Saturday attendance discussing what WIT is and how to achieve the goals of bringing more women into technology based careers.  I enjoyed hearing all the sides of the discussions.  This event has me looking very much forward to PASS and the WIT sessions that will be held there this year.</p>
<p><strong>Final note on <a href="http://www.sqlsaturday.com/">SQL Saturday</a> Events</strong> </p>
<p>
<div class="image_block"><img src="/wp-content/uploads/blogs/DataMgmt/blogtweetspeak.png" alt="" title="" width="135" height="467" align="left" /></div>
<p>Weekends are a time that many spend with friends and family or relaxing by doing the things we simply work to be able to do.  We recap the long weeks that we have at work, daily schedules and laugh about the events that we all enjoy so much with others.  Needless to say, work typically isn’t part of a normal weekend outside of a yard that has grass growing out of control or weeds for flower beds more so than flowers.  This past weekend I traveled to Iowa City for the second East Iowa SQL Saturday to hold a session on SSIS.  You may think that this sounds like work.  In fact, it is the furthest thing from work.  Speakers, organizers and volunteers alike do not look at putting our energy into events like SQL Saturday as work at all.  See, the SQL Community is most of our friends and family.  We cherish these events and look forward to giving all that we have back with them.</p>
<p>If you are in the position of not being a past speaker, organizer or volunteer, ask yourself: why am I not doing the same thing?  You should consider it.  If I’ve learned one thing over the years as a community member, it is that the knowledge, memories and camaraderie that comes from this great community matches no other.  SQL Saturday events hold true to that and being part of them only gives back to you in growth as an individual and community.</p>
<p>As an attendee or one that is thinking about attending a SQL Saturday or even your local user group, what you read is the absolute truth.  Just that aspect of the power that goes into forming these and other events should show you that attending these events is not going to be a letdown.  And if you are or ever have been letdown by a SQL Saturday or other community event, please, send me or any other community member an email about your experience.  I guarantee that even if I don’t speak for everyone you may talk to, I will do everything I have to correct your experience so the next one will be an event you will recap the same way as I have here.</p>
<p><strong>Thanks again to the East Iowa SQL Saturday Team.  I truthfully cannot wait until next year so make the trip across the state to Iowa once again to see you all.</strong></p>
]]></content:encoded>
			<wfw:commentRss>/index.php/datamgmt/datadesign/sqlsatiowarecap/feed/</wfw:commentRss>
		<slash:comments>3</slash:comments>
		</item>
		<item>
		<title>Making SSIS Dynamic: Passing variables between packages</title>
		<link>/index.php/datamgmt/datadesign/variables-ssis-dynamic-parent-to-child/</link>
		<comments>/index.php/datamgmt/datadesign/variables-ssis-dynamic-parent-to-child/#comments</comments>
		<pubDate>Thu, 19 Aug 2010 11:03:16 +0000</pubDate>
		<dc:creator><![CDATA[Ted Krueger (onpnt)]]></dc:creator>
				<category><![CDATA[Data Modelling and Design]]></category>
		<category><![CDATA[Database Administration]]></category>
		<category><![CDATA[Database Programming]]></category>
		<category><![CDATA[Microsoft SQL Server]]></category>
		<category><![CDATA[Microsoft SQL Server Admin]]></category>
		<category><![CDATA[configuration files]]></category>
		<category><![CDATA[configuration variables]]></category>
		<category><![CDATA[dtsx]]></category>
		<category><![CDATA[parent child packages]]></category>
		<category><![CDATA[sql server 2008]]></category>
		<category><![CDATA[ssis]]></category>

		<guid isPermaLink="false">/index.php/2010/08/variables-ssis-dynamic-parent-to-child/</guid>
		<description><![CDATA[So far, we showed how to manipulate connections so we can freely move packages from server to server without the need to open them in BIDS and change connections.  This allows us to manage packages easily, not only from a development stand point, but allows for teams to pass along our packages and then move them without being required to either open them or have BIDS to change these critical connections.]]></description>
				<content:encoded><![CDATA[<p>So far, we showed <a href="/index.php/DataMgmt/DBAdmin/making-ssis-dynamic-configuration-manage">how to manipulate connections</a> so we can freely move packages from server to server without the need to open them in BIDS and change connections.  This allows us to manage packages easily, not only from a development stand point, but allows for teams to pass along our packages and then move them without being required to either open them or have BIDS to change these critical connections.</p>
<p>Another method to push dynamically setting package executions is to utilize multiple packages.  Using multiple packages in an overall process allows for reuse of packages themselves.  This also allows us to manage processes that are much larger than normal.  Consider a process that handles dozens of tasks that prepare and manipulate data so it can be uploaded into several different unique databases.  To further promote this, imagine these databases are remotely distributed across your wide area network.  By setting a parent package to handle the data forming and validations, we can then pass result sets down to several other packages preset as basic Data Flow packages to import a set result set into a database.</p>
<p>We could do this in one package by configuring each connection including flat files, sources and destinations.  However, we could also do this by means of passing to a package the destination variables themselves.  This way we can reuse a package for multiple other tasks if we wanted to.</p>
<p><strong>Showing Parent to Child in action</strong></p>
<p>To show how we can do this, we will use another form of configurations management to pass variables from the parent package to the child package.  Let’s build an example to pass ServerName and DefaultCatalog for another connection.</p>
<p>First, add a new package to the existing solution we started manipulating the connection with configuration files on.  If you did not run through that example, create a new solution and add a new package.  Leave the default, package name.  Now create another package and again, leave the default, package1.dtsx name.</p>
<p>Drag an Execute Package Task over into the Control Flow.  Double click the new task to launch the Execute Package Task Editor.  Select the Package window from the left panel, select File System from the Location list and then drop down Connection and click, new connection</p>
<div class="image_block"><img src="/wp-content/uploads/blogs/DataMgmt/dynossis_10.gif" alt="" title="" width="513" height="127" /></div>
<p>In the File Connection Manager Editor, click the Browse button.  By default, new packages that are created as files are stored in the product folder.  If this doesn’t default to that location, browse to your projects folder.  Select Package1.dtsx for the file and click OK to save the new package connection.</p>
<div class="image_block"><img src="/wp-content/uploads/blogs/DataMgmt/dynossis_11.gif" alt="" title="" width="499" height="397" /></div>
<p>Open Package1.dtsx in the designer now and add a connection to the Connection Managers area.  If you have never added a connection to an SSIS package, right click the Connection Managers area in the middle lower area of the designer.  Select the type of connection you want to use then.   You can use the previous connection created in the last article if it is easier.</p>
<div class="image_block"><img src="/wp-content/uploads/blogs/DataMgmt/dynossis_12.gif" alt="" title="" width="499" height="124" /></div>
<p>Next we will need the same variables (names are not required to be the same from parent to child).  Go to the Variables dialog.  The Variables editor is located to the left of the default BIDS environment and can be viewed by clicking the, Variables tab near the lower part of the window.  Create two variables, ServerName and DefaultCatalog, both with a data type of String.  Leave the default values empty.</p>
<div class="image_block"><img src="/wp-content/uploads/blogs/DataMgmt/dynossis_13.gif" alt="" title="" width="223" height="91" /></div>
<p>Now we are ready to use the variables to set the connection properties.  Highlight the connection in the Connection Managers window so the properties dialog shows all the available properties we can set.  Click the expressions textbox to open up the expression editor.  (as shown below)</p>
<div class="image_block"><img src="/wp-content/uploads/blogs/DataMgmt/dynossis_14.gif" alt="" title="" width="628" height="215" /></div>
<p>Set ConnectionString to the following expression</p>
<pre>"Data Source=" + @[User::ServerName]  + ";Initial Catalog=" + @[User::DefaultCatalog]   + ";Provider=SQLNCLI10.1;Integrated Security=SSPI;"</pre>
<p>Then make ServerName and InitialCatalog the value of the matching variables.</p>
<div class="image_block"><img src="/wp-content/uploads/blogs/DataMgmt/dynossis_15.gif" alt="" title="" width="758" height="242" /></div>
<p>In order to pass the variables to the child package, Package1.dtsx, we need to go into the child package and configure the variables from the parent package to be assigned to the variables local to the child.</p>
<p>To do this, right click an empty space in the Control Flow window and select Package Configurations. Click Add to open a new configuration in the Package Configuration Organizer window that is launched.</p>
<div class="image_block"><img src="/wp-content/uploads/blogs/DataMgmt/dynossis_16.gif" alt="" title="" width="421" height="201" /></div>
<p>In the Configuration Type select, Parent package variable and then enter the name of the variable to manipulate.  Once this is completed, click next so we can set the object level properties.</p>
<div class="image_block"><img src="/wp-content/uploads/blogs/DataMgmt/dynossis_17.gif" alt="" title="" width="320" height="317" /></div>
<p>Scroll to the Package&#8211;>Variables section and then highlight Value.  This is what will physically and dynamically set the Value of the variable.</p>
<p>Once completed, you should have the following listening in the configurations.  Note that ServerSourceConfig is a configuration file from the previous article.</p>
<div class="image_block"><img src="/wp-content/uploads/blogs/DataMgmt/dynossis_18.gif" alt="" title="" width="628" height="163" /></div>
<p>Now that we’ve setup and configured the relationships from the parent variables to the child variables, we can test this.</p>
<p>I like script tasks in the IDE as a quick test for variables values.  It is just one of those old school methods.  So add a script task to the child package, Pacakge1.dtsx.  Enter in the ReadOnlyVariables</p>
<pre>User::DefaultCatalog,User::ServerName</pre>
<p>And then use this code</p>
<pre>        public void Main()
        {
            MessageBox.Show(Dts.Variables["ServerName"].Value.ToString());
            MessageBox.Show(Dts.Variables["DefaultCatalog"].Value.ToString());
    MessageBox.Show(Dts.Connections["DestinationConnection_Server2008R2"].ConnectionString.ToString());
            Dts.TaskResult = (int)ScriptResults.Success;
        }</pre>
</p>
<p>Save both packages and then execute the, Execute Package Task in Package.dtsx<br />
You should be presented with the message box showing your values for server name and initial catalog.  This moves into the dynamic expressions for the connection string of the connection.</p>
<p>More importantly, the connection string was dynamically generated</p>
<div class="image_block"><img src="/wp-content/uploads/blogs/DataMgmt/dynossis_19.gif" alt="" title="" width="370" height="168" /></div>
<p><strong>Conclusion for now</strong></p>
<p>We’ve only scratched the surface so far on making communications from parent to child packages flow along with true dynamic values so we can reuse packages.  This and several other techniques make developing SSIS packages flow from system to system and even provide the ability for automated DR strategies with simply storing a configuration file just for the purpose of DR (or HA).</p>
]]></content:encoded>
			<wfw:commentRss>/index.php/datamgmt/datadesign/variables-ssis-dynamic-parent-to-child/feed/</wfw:commentRss>
		<slash:comments>2</slash:comments>
		</item>
		<item>
		<title>Making SSIS Dynamic: Configuration Management</title>
		<link>/index.php/datamgmt/datadesign/making-ssis-dynamic-configuration-manage/</link>
		<comments>/index.php/datamgmt/datadesign/making-ssis-dynamic-configuration-manage/#comments</comments>
		<pubDate>Wed, 18 Aug 2010 09:52:32 +0000</pubDate>
		<dc:creator><![CDATA[Ted Krueger (onpnt)]]></dc:creator>
				<category><![CDATA[Data Modelling and Design]]></category>
		<category><![CDATA[Database Administration]]></category>
		<category><![CDATA[Database Programming]]></category>
		<category><![CDATA[Microsoft SQL Server]]></category>
		<category><![CDATA[Microsoft SQL Server Admin]]></category>
		<category><![CDATA[configuration files]]></category>
		<category><![CDATA[configuration variables]]></category>
		<category><![CDATA[dtsx]]></category>
		<category><![CDATA[parent child packages]]></category>
		<category><![CDATA[sql server 2008]]></category>
		<category><![CDATA[ssis]]></category>

		<guid isPermaLink="false">/index.php/2010/08/making-ssis-dynamic-configuration-manage/</guid>
		<description><![CDATA[Every task that is out there to enable SSIS to be more, 'dynamic', ensures that we can develop reusable and more manageable solutions.  Variables and configuration files along with all package configurations are all part in allowing packages to become dynamic in this way.  You may be thinking right now that it would be cool to something like a date variable so you could use it in an Execute SQL Statement or such.  That and a lot of other common uses are indeed, all part of making a package dynamic.  However, we can push this much further and bring out the essential foundation of configurations and variables in working freely from environment to environment.]]></description>
				<content:encoded><![CDATA[<p>Every task that is out there to enable SSIS to be more, &#8216;dynamic&#8217;, ensures that we can develop reusable and more manageable solutions.  Variables and configuration files along with package configurations are all part in allowing packages to become dynamic in this way.  You may be thinking right now that it would be cool to have something like a date variable so you could use it in an Execute SQL Statement or such.  That and a lot of other common uses are indeed, part of making a package dynamic.  However, we can push this much further and bring out the essential foundation of configurations and variables in working freely from environment to environment.</p>
<p>To get going, let’s look at one of the most common settings you will have internal to your packages: database connections.  The connection management in SSIS allows us to completely set all the key properties of the connections internally from the use of configuration management.</p>
<p><strong>The example:</strong></p>
<p>Create a new package to start adding and editing some tasks.  In the package, create an ADO.NET connection named, ServerSourceConnection.  Set this connection to an available instance and save the connection.  To configure this to be manipulated with a configuration file, right click an empty space in the Control Flow window and select, Package Configurations…</p>
<div class="image_block"><img src="/wp-content/uploads/blogs/DataMgmt/dynossis_1.gif" alt="" title="" width="319" height="227" /></div>
<p>Click the check box to &#8220;Enable package configurations&#8221; and then click, Add.</p>
<p>Clicking the add button will launch the Package Configuration Wizard (PCW).  The Wizard and many others in SSIS cover all the settings very well without having to go through a lot of manual work.  Remember, we want to be efficient.  Don’t be afraid of using the wizards for configuring SSIS. </p>
<p>In the PCW, we want to select an XML configuration file as our type of configuration.  Next, if you have a preexisting configuration file to add to, you can enter it into the 	configuration file name box.  If you do not, simply enter a physical path and file name where you want the package stored for now.</p>
<div class="image_block"><img src="/wp-content/uploads/blogs/DataMgmt/dynossis_2.gif" alt="" title="" width="628" height="227" /></div>
<p>Click next to move onto the properties that can be set.  For the example, we want to configure the connection ServerSourceConnection.  To do this we need to know server name, default catalog, connection string and, if you are not using Windows authentication, the username and password. </p>
<blockquote><p><span class="MT_orange">Note: It is not recommended to store the passwords here.  Although the encryption of the passwords will be performed on saving the package, it is still a good idea to secure the package and connection so the databases by forcing this to be entered later.</span> </p></blockquote>
<p>In the properties dialog, expand Connection Managers and then expand into the ServerSourceConnection.  This will expose the properties we can check that we want to be included in the configuration file.  Check ConnectionString, InitialCatalog and Servername.  Then click Next to exit the properties section. </p>
<div class="image_block"><img src="/wp-content/uploads/blogs/DataMgmt/dynossis_3.gif" alt="" title="" width="458" height="323" /></div>
</p>
<p>After hitting next, all that remains is to set the name of the configuration and save the configuration file.   We’ll use, ServerSourceConfigFile and then hit Finish to save and exit the wizard.</p>
<p>So far we haven’t changed anything as far as the connection goes.  If you open the connection, you will see the same settings you originally saved.  If we execute a basic Execute SQL Task, we will see in the Message panel that SSIS attempts to connect to our configuration file and read any differentiating configurations that we have set from it.   This is because the configuration file will obtain the settings that were previously set in the connection (or other objects you set) and place them in the values of the configuration file XML ConfigurationValue #text areas. </p>
<p>We want to show this in real-time though so let’s change the XML configuration file to point to a different instance than the one we set in the Connection.</p>
<div class="image_block"><img src="/wp-content/uploads/blogs/DataMgmt/dynossis_4.gif" alt="" title="" width="628" height="209" /></div>
<p>Above we changed the values in the connection string to handle the instance name, the default catalog and the server name.  Notice that we didn’t change the default catalog in the connection string.  This is to show that the catalog setting of the property outside the connection string will still override the actual value in the connection string itself. </p>
<p>There is one catch here we need to go over.  Configuration files can be wrong while in development and you have not saved or executed a package.  (In a way, a timing issue with what the state and context your package is while creating it)   If your configuration file is found to be wrong and the connection cannot be made, SSIS will look to what you’ve set internally in the normal configuration of the connection string.  This is primarily a problem with the IDE.  So at this point, save everything before executing and pushing on.</p>
<p><strong>Showing Execution</strong></p>
<p>Of course we want to make sure this is all reading from the configuration file, so let&#8217;s enter an incorrect database in the configuration file to show a failure. </p>
<p>In your configuration file, enter a database that does not exist.</p>
<div class="image_block"><img src="/wp-content/uploads/blogs/DataMgmt/dynossis_5.gif" alt="" title="" width="610" height="82" /></div>
<p>Of course, if for some reason you decided last week to create a database named, IdoNotExist, try something else.</p>
<p>Now add logging to the package to capture the information as the execution of the package flows. </p>
<p>Do this by right clicking an empty space in the Control Flow and selecting, Logging…</p>
<div class="image_block"><img src="/wp-content/uploads/blogs/DataMgmt/dynossis_6.gif" alt="" title="" width="351" height="126" /></div>
<p>Enable logging by selecting the Package container and click Add for a new Text File provider.  In the Details tab of the logging provider, check Diagnostic.  This will enable us to see log entries when the connection is read.</p>
<p>Now that we have logging setup, we can watch the connection being called.  </p>
<p>To test that, set the following basic Execute SQL Task up.</p>
<div class="image_block"><img src="/wp-content/uploads/blogs/DataMgmt/dynossis_7.gif" alt="" title="" width="628" height="324" /></div>
<p>
<blockquote><span class="MT_red">Note: We are selecting from the sys.databases which requires heightened security rights on the server state.  If you do not have these rights, SELECT from any table.  The task and test here is to simply return a small amount of data to validate our configuration changes.</span></p></blockquote>
<p>Execute the task and follow along in the Message panel</p>
<div class="image_block"><img src="/wp-content/uploads/blogs/DataMgmt/dynossis_8.gif" alt="" title="" width="628" height="252" /></div>
<p>Reading our log, we can see that the incorrect catalog was used.  If you open the configuration of the connection now from the connection manager window, the incorrect database would have been set there as well at run-time. </p>
<blockquote><p>ConnectionString: Data Source=LKFW0133TK2005;Initial Catalog=IdoNotExist;Integrated Security=True;</p></blockquote>
<p><strong>OK, make it green now</strong></p>
<p>Switch the default catalog back to master or an existing database you have rights to connect to and run the package again</p>
<div class="image_block"><img src="/wp-content/uploads/blogs/DataMgmt/dynossis_9.gif" alt="" title="" width="628" height="148" /></div>
</p>
<p><strong>Accomplishments</strong></p>
<p>The main objective we accomplished today is to provide a way to move this and other packages from servers like development, staging, user acceptance testing and production.  This all being done without any need to open the package but instead, edit our XML configuration file and pointing to the other servers and databases.  </p>
<p>Next, we’ll discuss variables between packages.  By passing variables between packages we can create a highly dynamic flow and ability to reuse template packages at will for tasks.  Look for that article soon.</p></p>
]]></content:encoded>
			<wfw:commentRss>/index.php/datamgmt/datadesign/making-ssis-dynamic-configuration-manage/feed/</wfw:commentRss>
		<slash:comments>3</slash:comments>
		</item>
	</channel>
</rss>
