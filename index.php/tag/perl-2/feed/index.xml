<?xml version="1.0" encoding="UTF-8"?><rss version="2.0"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:atom="http://www.w3.org/2005/Atom"
	xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
	xmlns:slash="http://purl.org/rss/1.0/modules/slash/"
	>

<channel>
	<title>perl &#8211; LessthanDot</title>
	<atom:link href="/index.php/tag/perl-2/feed/" rel="self" type="application/rss+xml" />
	<link>/</link>
	<description>A Technical Community for IT Professionals</description>
	<lastBuildDate>Sat, 09 Mar 2019 12:50:36 +0000</lastBuildDate>
	<language>en-US</language>
	<sy:updatePeriod>hourly</sy:updatePeriod>
	<sy:updateFrequency>1</sy:updateFrequency>
	<generator>https://wordpress.org/?v=4.6.1</generator>
	<item>
		<title>Create HTML from output of Perl::Critic</title>
		<link>/index.php/webdev/perl/create-html-from-output-of/</link>
		<comments>/index.php/webdev/perl/create-html-from-output-of/#comments</comments>
		<pubDate>Sat, 22 Sep 2012 07:46:00 +0000</pubDate>
		<dc:creator><![CDATA[Rob Earl]]></dc:creator>
				<category><![CDATA[Perl]]></category>
		<category><![CDATA[code quality]]></category>
		<category><![CDATA[critic]]></category>
		<category><![CDATA[html]]></category>
		<category><![CDATA[perl]]></category>
		<category><![CDATA[perlcritic]]></category>

		<guid isPermaLink="false">/index.php/2012/09/create-html-from-output-of/</guid>
		<description><![CDATA[Perl::Critic is great. If you haven't tried it, you should. It has helped me improve the quality of my code no end.

I wrote this script to make it easier to view the feedback in the context of the code itself. When run in a directory containing Perl&#8230;]]></description>
				<content:encoded><![CDATA[<p><a href="http://search.cpan.org/~thaljef/Perl-Critic-1.118/lib/Perl/Critic.pm">Perl::Critic</a> is great. If you haven&#8217;t tried it, you should. It can help you improve the quality of your code no end.</p>
<p>I wrote this script to make it easier to view the feedback in the context of the code itself. When run in a directory containing Perl code it&#8217;ll create a critic_html directory containing index.html summarizing the results:</p>
<p><img src="/wp-content/uploads/blogs/WebDev/CriticHtml/critic-html-index.jpg" alt="critic_html/index.html" title="" /></p>
<p>Clicking through to any of the files will give you all the violations found by Perl::Critic, inline with the code:</p>
<p><img src="/wp-content/uploads/blogs/WebDev/CriticHtml/critic-html-code.jpg" alt="" title="" /></p>
<p>In addition to Perl::Critic, the script uses Template::Toolkit to format the output. The code below and templates can be found in the attached <a href="/wp-content/uploads/blogs/WebDev/CriticHtml/critic_html.zip">critic_html.zip</a></p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="perl"><thead><tr><td colspan="2"  class="head">Perl</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72
73
74
75
</pre></td><td class="de1"><pre class="de1"><span class="co1">#!/usr/bin/perl</span>
&nbsp;
<span class="kw2">use</span> strict<span class="sy0">;</span>
<span class="kw2">use</span> warnings<span class="sy0">;</span>
&nbsp;
<span class="kw2">use</span> Perl<span class="sy0">::</span><span class="me2">Critic</span><span class="sy0">;</span>
<span class="kw2">use</span> Perl<span class="sy0">::</span><span class="me2">Critic</span><span class="sy0">::</span><span class="me2">Utils</span><span class="sy0">;</span>
&nbsp;
<span class="kw2">use</span> Template<span class="sy0">;</span>
<span class="kw2">use</span> Cwd <span class="kw3">qw</span><span class="br0">&#40;</span>abs_path<span class="br0">&#41;</span><span class="sy0">;</span>
<span class="kw2">use</span> File<span class="sy0">::</span><span class="me2">Basename</span><span class="sy0">;</span>
<span class="kw2">use</span> English <span class="kw3">qw</span><span class="br0">&#40;</span><span class="sy0">-</span>no_match_vars<span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
<span class="kw2">use</span> constant SEVERITY &nbsp;<span class="sy0">=&gt;</span> <span class="nu0">1</span><span class="sy0">;</span> <span class="co1"># Include all violations.</span>
<span class="kw2">use</span> constant SKIP_GOOD <span class="sy0">=&gt;</span> <span class="nu0">0</span><span class="sy0">;</span> <span class="co1"># Skip files with no violations?</span>
&nbsp;
<span class="kw3">mkdir</span> <span class="st_h">'critic_html'</span><span class="sy0">;</span>
<span class="kw3">mkdir</span> <span class="st_h">'critic_html/src'</span><span class="sy0">;</span>
&nbsp;
<span class="kw2">use</span> autodie<span class="sy0">;</span>
&nbsp;
<span class="co1"># Analyse all perl files below the current directory.</span>
<span class="kw1">my</span> <span class="re0">@files</span> <span class="sy0">=</span> Perl<span class="sy0">::</span><span class="me2">Critic</span><span class="sy0">::</span><span class="me2">Utils</span><span class="sy0">::</span><span class="me2">all_perl_files</span><span class="br0">&#40;</span><span class="kw3">q</span><span class="br0">&#123;</span><span class="sy0">.</span><span class="br0">&#125;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
<span class="kw1">my</span> <span class="re0">@summary</span> <span class="sy0">=</span> <span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span> <span class="co1"># Store statistics on each file processed.</span>
&nbsp;
<span class="kw1">foreach</span> <span class="kw1">my</span> <span class="re0">$file</span> <span class="br0">&#40;</span><span class="re0">@files</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; <span class="co1"># Create a new Critic for per file statistics.</span>
&nbsp; &nbsp; <span class="kw1">my</span> <span class="re0">$critic</span> <span class="sy0">=</span> Perl<span class="sy0">::</span><span class="me2">Critic</span><span class="sy0">-&gt;</span><span class="kw2">new</span><span class="br0">&#40;</span> <span class="st_h">'-severity'</span> <span class="sy0">=&gt;</span> SEVERITY <span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; <span class="kw1">my</span> <span class="re0">$file_safe</span> <span class="sy0">=</span> <span class="re0">$file</span><span class="sy0">;</span>
&nbsp; &nbsp; <span class="re0">$file_safe</span> <span class="sy0">=~</span> <span class="co2">s/[W]/_/g</span><span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; <span class="kw1">my</span> <span class="re0">@violations</span> <span class="sy0">=</span> <span class="re0">$critic</span><span class="sy0">-&gt;</span><span class="me1">critique</span><span class="br0">&#40;</span><span class="re0">$file</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; <span class="kw1">next</span> <span class="kw1">if</span> <span class="br0">&#40;</span><span class="sy0">!</span><span class="re0">@violations</span> <span class="sy0">&amp;&amp;</span> SKIP_GOOD<span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; <span class="kw3">push</span> <span class="re0">@summary</span><span class="sy0">,</span> <span class="br0">&#123;</span> <span class="st_h">'filename'</span> <span class="sy0">=&gt;</span> <span class="re0">$file</span><span class="sy0">,</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span class="st_h">'link'</span> &nbsp; &nbsp; <span class="sy0">=&gt;</span> <span class="st0">&quot;src/$file_safe.html&quot;</span><span class="sy0">,</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span class="st_h">'stats'</span> &nbsp; &nbsp;<span class="sy0">=&gt;</span> <span class="re0">$critic</span><span class="sy0">-&gt;</span><span class="me1">statistics</span><span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="br0">&#125;</span><span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; <span class="kw3">open</span> <span class="kw1">my</span> <span class="re0">$FH</span><span class="sy0">,</span> <span class="st_h">'&lt;'</span><span class="sy0">,</span> <span class="re0">$file</span><span class="sy0">;</span>
&nbsp; &nbsp; <span class="kw1">my</span> <span class="re0">@lines</span> <span class="sy0">=</span> <span class="sy0">&lt;</span><span class="re0">$FH</span><span class="sy0">&gt;;</span>
&nbsp; &nbsp; <span class="kw3">close</span> <span class="re0">$FH</span><span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; <span class="co1"># Attach all violations to the line they were found on.</span>
&nbsp; &nbsp; <span class="kw1">my</span> <span class="re0">@violations_by_line</span> <span class="sy0">=</span> <span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; <span class="kw1">my</span> <span class="re0">$line_number</span> <span class="sy0">=</span> <span class="nu0">1</span><span class="sy0">;</span>
&nbsp; &nbsp; <span class="kw1">foreach</span> <span class="kw1">my</span> <span class="re0">$line</span> <span class="br0">&#40;</span><span class="re0">@lines</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="co1"># Get all the violations for the current line.</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">my</span> <span class="re0">@line_violations</span> <span class="sy0">=</span> <span class="kw3">grep</span> <span class="br0">&#123;</span> <span class="co5">$_</span><span class="sy0">-&gt;</span><span class="me1">line_number</span><span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="sy0">==</span> <span class="re0">$line_number</span><span class="br0">&#125;</span> <span class="re0">@violations</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw3">push</span> <span class="re0">@violations_by_line</span><span class="sy0">,</span> <span class="br0">&#123;</span> <span class="st_h">'number'</span> &nbsp;<span class="sy0">=&gt;</span> <span class="re0">$line_number</span><span class="sy0">,</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="st_h">'content'</span> <span class="sy0">=&gt;</span> <span class="re0">$line</span><span class="sy0">,</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="st_h">'violations'</span> <span class="sy0">=&gt;</span> <span class="re0">@line_violations</span> <span class="br0">&#125;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="re0">$line_number</span><span class="sy0">++;</span>
&nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp;
&nbsp; &nbsp; write_html<span class="br0">&#40;</span><span class="st0">&quot;critic_html/src/$file_safe.html&quot;</span><span class="sy0">,</span> <span class="st_h">'codefile'</span><span class="sy0">,</span> <span class="br0">&#123;</span> <span class="st_h">'title'</span> <span class="sy0">=&gt;</span> <span class="st0">&quot;Critic Analysis of $file&quot;</span><span class="sy0">,</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="st_h">'lines'</span> <span class="sy0">=&gt;</span> <span class="re0">@violations_by_line</span> <span class="br0">&#125;</span> <span class="br0">&#41;</span><span class="sy0">;</span>
<span class="br0">&#125;</span>
&nbsp;
write_html<span class="br0">&#40;</span><span class="st_h">'critic_html/index.html'</span><span class="sy0">,</span> <span class="st_h">'index'</span><span class="sy0">,</span> <span class="br0">&#123;</span> <span class="st_h">'title'</span> <span class="sy0">=&gt;</span> <span class="st_h">'Perl::Critic::HTML Summary'</span><span class="sy0">,</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="st_h">'files'</span> <span class="sy0">=&gt;</span> <span class="re0">@summary</span> <span class="br0">&#125;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
<span class="kw2">sub</span> write_html <span class="br0">&#123;</span>
&nbsp; &nbsp; <span class="kw1">my</span> <span class="br0">&#40;</span><span class="re0">$filename</span><span class="sy0">,</span> <span class="re0">$template</span><span class="sy0">,</span> <span class="re0">$data</span><span class="br0">&#41;</span> <span class="sy0">=</span> <span class="co5">@_</span><span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; <span class="co1"># Include templates from the install directory.</span>
&nbsp; &nbsp; <span class="kw1">my</span> <span class="re0">$tt</span> <span class="sy0">=</span> Template<span class="sy0">-&gt;</span><span class="kw2">new</span><span class="br0">&#40;</span><span class="br0">&#123;</span> <span class="st_h">'INCLUDE_PATH'</span> <span class="sy0">=&gt;</span> dirname<span class="br0">&#40;</span>abs_path<span class="br0">&#40;</span><span class="re0">$PROGRAM_NAME</span><span class="br0">&#41;</span><span class="br0">&#41;</span><span class="sy0">.</span><span class="st_h">'/templates'</span> <span class="br0">&#125;</span> <span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; <span class="kw3">print</span> <span class="st0">&quot;Writing $filenamen&quot;</span><span class="sy0">;</span>
&nbsp; &nbsp; <span class="kw3">open</span> <span class="kw1">my</span> <span class="re0">$FILE</span><span class="sy0">,</span> <span class="st_h">'&gt;'</span><span class="sy0">,</span> <span class="re0">$filename</span><span class="sy0">;</span>
&nbsp; &nbsp; <span class="re0">$tt</span><span class="sy0">-&gt;</span><span class="me1">process</span><span class="br0">&#40;</span><span class="re0">$template</span><span class="sy0">,</span> <span class="re0">$data</span><span class="sy0">,</span> <span class="re0">$FILE</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; <span class="kw3">close</span> <span class="re0">$FILE</span><span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; <span class="kw3">return</span><span class="sy0">;</span>
<span class="br0">&#125;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">#!/usr/bin/perl

use strict;
use warnings;

use Perl::Critic;
use Perl::Critic::Utils;

use Template;
use Cwd qw(abs_path);
use File::Basename;
use English qw(-no_match_vars);

use constant SEVERITY  =&gt; 1; # Include all violations.
use constant SKIP_GOOD =&gt; 0; # Skip files with no violations?

mkdir 'critic_html';
mkdir 'critic_html/src';

use autodie;

# Analyse all perl files below the current directory.
my @files = Perl::Critic::Utils::all_perl_files(q{.});

my @summary = (); # Store statistics on each file processed.

foreach my $file (@files) {
    # Create a new Critic for per file statistics.
    my $critic = Perl::Critic-&gt;new( '-severity' =&gt; SEVERITY );

    my $file_safe = $file;
    $file_safe =~ s/[W]/_/g;

    my @violations = $critic-&gt;critique($file);
    next if (!@violations &amp;&amp; SKIP_GOOD);

    push @summary, { 'filename' =&gt; $file,
                     'link'     =&gt; "src/$file_safe.html",
                     'stats'    =&gt; $critic-&gt;statistics() };

    open my $FH, '&lt;', $file;
    my @lines = &lt;$FH&gt;;
    close $FH;

    # Attach all violations to the line they were found on.
    my @violations_by_line = ();
    my $line_number = 1;
    foreach my $line (@lines) {
        # Get all the violations for the current line.
        my @line_violations = grep { $_-&gt;line_number() == $line_number} @violations;
        push @violations_by_line, { 'number'  =&gt; $line_number,
                                    'content' =&gt; $line,
                                    'violations' =&gt; @line_violations };
        $line_number++;
    }

    write_html("critic_html/src/$file_safe.html", 'codefile', { 'title' =&gt; "Critic Analysis of $file",
                                                                'lines' =&gt; @violations_by_line } );
}

write_html('critic_html/index.html', 'index', { 'title' =&gt; 'Perl::Critic::HTML Summary',
                                                'files' =&gt; @summary });

sub write_html {
    my ($filename, $template, $data) = @_;

    # Include templates from the install directory.
    my $tt = Template-&gt;new({ 'INCLUDE_PATH' =&gt; dirname(abs_path($PROGRAM_NAME)).'/templates' } );
    print "Writing $filenamen";
    open my $FILE, '&gt;', $filename;
    $tt-&gt;process($template, $data, $FILE);
    close $FILE;

    return;
}</pre></div></div>

]]></content:encoded>
			<wfw:commentRss>/index.php/webdev/perl/create-html-from-output-of/feed/</wfw:commentRss>
		<slash:comments>1</slash:comments>
		</item>
		<item>
		<title>Taming RSS Feeds with XML::RSS and Template::Toolkit</title>
		<link>/index.php/webdev/serverprogramming/taming-rss-feeds-with-xml/</link>
		<comments>/index.php/webdev/serverprogramming/taming-rss-feeds-with-xml/#comments</comments>
		<pubDate>Fri, 14 Sep 2012 11:01:00 +0000</pubDate>
		<dc:creator><![CDATA[Rob Earl]]></dc:creator>
				<category><![CDATA[Perl]]></category>
		<category><![CDATA[Server Programming]]></category>
		<category><![CDATA[feed]]></category>
		<category><![CDATA[perl]]></category>
		<category><![CDATA[rss]]></category>
		<category><![CDATA[template]]></category>
		<category><![CDATA[toolkit]]></category>
		<category><![CDATA[xml]]></category>

		<guid isPermaLink="false">/index.php/2012/09/taming-rss-feeds-with-xml/</guid>
		<description><![CDATA[This is a remarkably simple trick which I've found very handy. With a few lines of Perl you can take any RSS feed and format it to your liking.

Get the Feed

You can do this using LWP::Simple:


use LWP::Simple;

my $feed_url = 'http://feeds.b&/#8230;]]></description>
				<content:encoded><![CDATA[<p>This is a remarkably simple trick which I&#8217;ve found very handy. With a few lines of Perl you can take any RSS feed and format it to your liking.</p>
<h1></h1>
<h1>Get the Feed</h1>
<p>You can do this using <a href="http://search.cpan.org/~gaas/libwww-perl-6.04/lib/LWP/Simple.pm">LWP::Simple</a>:</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="perl"><thead><tr><td colspan="2"  class="head">Perl</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
</pre></td><td class="de1"><pre class="de1"><span class="kw2">use</span> LWP<span class="sy0">::</span><span class="me2">Simple</span><span class="sy0">;</span>
&nbsp;
<span class="kw1">my</span> <span class="re0">$feed_url</span> <span class="sy0">=</span> <span class="st_h">'http://feeds.bbci.co.uk/news/rss.xml'</span><span class="sy0">;</span>
<span class="kw1">my</span> <span class="re0">$feed</span> <span class="sy0">=</span> get<span class="br0">&#40;</span><span class="re0">$feed_url</span><span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">or</span> <span class="kw3">die</span> <span class="br0">&#40;</span><span class="st0">&quot;Failed to fetch feed.&quot;</span><span class="br0">&#41;</span><span class="sy0">;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">use LWP::Simple;

my $feed_url = 'http://feeds.bbci.co.uk/news/rss.xml';
my $feed = get($feed_url)
        or die ("Failed to fetch feed.");</pre></div></div>

<h1></h1>
<h1>Process the Raw Result</h1>
<p>Using <a href="http://search.cpan.org/~kellan/XML-RSS-1.05/lib/RSS.pm">XML::RSS</a>, convert the raw feed into a more manageable hash.</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="perl"><thead><tr><td colspan="2"  class="head">Perl</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
</pre></td><td class="de1"><pre class="de1"><span class="kw2">use</span> XML<span class="sy0">::</span><span class="me2">RSS</span><span class="sy0">;</span>
&nbsp;
<span class="kw1">my</span> <span class="re0">$rss</span> <span class="sy0">=</span> XML<span class="sy0">::</span><span class="me2">RSS</span><span class="sy0">-&gt;</span><span class="kw2">new</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
<span class="re0">$rss</span><span class="sy0">-&gt;</span><span class="me1">parse</span><span class="br0">&#40;</span><span class="re0">$feed</span><span class="br0">&#41;</span><span class="sy0">;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">use XML::RSS;

my $rss = XML::RSS-&gt;new();
$rss-&gt;parse($feed);</pre></div></div>

<h1></h1>
<h1>Format to Your Liking</h1>
<p><a href="http://template-toolkit.org/">Template::Toolkit</a> can take in a <a href="http://template-toolkit.org/docs/manual/Syntax.html">template</a> and a hash reference of values to substitute into the template.</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="perl"><thead><tr><td colspan="2"  class="head">Perl</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
</pre></td><td class="de1"><pre class="de1"><span class="co1"># Define a template</span>
<span class="kw1">my</span> <span class="re0">$template</span> <span class="sy0">=</span> <span class="co4">&lt;&lt;&quot;TEMPLATE&quot;;</span>
<span class="co4">[% channel.title %]</span>
&nbsp;
<span class="co4">Headlines:</span>
<span class="co4">[% FOREACH item = items %]</span>
<span class="co4">[% item.pubDate %]t[% item.title %]</span>
<span class="co4">[% END %]</span>
<span class="co4">TEMPLATE</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse"># Define a template
my $template = &lt;&lt;"TEMPLATE";
[% channel.title %]

Headlines:
[% FOREACH item = items %]
[% item.pubDate %]t[% item.title %]
[% END %]
TEMPLATE</pre></div></div>

<p>This simple template will take the BBC news feed from above and print out a list of headlines with publication dates.</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="perl"><thead><tr><td colspan="2"  class="head">Perl</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
</pre></td><td class="de1"><pre class="de1"><span class="kw1">my</span> <span class="re0">$tt</span> <span class="sy0">=</span> Template<span class="sy0">-&gt;</span><span class="kw2">new</span><span class="br0">&#40;</span><span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">or</span> <span class="kw3">die</span> <span class="br0">&#40;</span><span class="st0">&quot;Failed to load template: $Template::ERRORn&quot;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
<span class="co1"># Combine the template with the processed RSS feed.</span>
<span class="re0">$tt</span><span class="sy0">-&gt;</span><span class="me1">process</span> <span class="br0">&#40;</span> <span class="re0">$template</span><span class="sy0">,</span> <span class="re0">$rss</span> <span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">or</span> <span class="kw3">die</span> <span class="re0">$tt</span><span class="sy0">-&gt;</span><span class="me1">error</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">my $tt = Template-&gt;new()
        or die ("Failed to load template: $Template::ERRORn");

# Combine the template with the processed RSS feed.
$tt-&gt;process ( $template, $rss )
        or die $tt-&gt;error();</pre></div></div>

<h1></h1>
<h1>Putting it All Together</h1>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="perl"><thead><tr><td colspan="2"  class="head">Perl</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
</pre></td><td class="de1"><pre class="de1"><span class="co1">#!/usr/bin/perl</span>
<span class="kw2">use</span> strict<span class="sy0">;</span>
<span class="kw2">use</span> warnings<span class="sy0">;</span>
&nbsp;
<span class="kw2">use</span> XML<span class="sy0">::</span><span class="me2">RSS</span><span class="sy0">;</span>
<span class="kw2">use</span> LWP<span class="sy0">::</span><span class="me2">Simple</span><span class="sy0">;</span>
<span class="kw2">use</span> Template<span class="sy0">;</span>
&nbsp;
<span class="co1">##################</span>
<span class="co1"># Configuration:</span>
<span class="co1">#</span>
<span class="co1">##################</span>
<span class="kw1">my</span> <span class="re0">$feed_url</span> <span class="sy0">=</span> <span class="st_h">'http://feeds.bbci.co.uk/news/rss.xml'</span><span class="sy0">;</span>
<span class="kw1">my</span> <span class="re0">$template</span> <span class="sy0">=</span> <span class="co4">&lt;&lt;&quot;TEMPLATE&quot;;</span>
<span class="co4">[% channel.title %]</span>
&nbsp;
<span class="co4">Headlines:</span>
<span class="co4">[% FOREACH item = items %]</span>
<span class="co4">[% item.pubDate %]t[% item.title %]</span>
<span class="co4">[% END %]</span>
<span class="co4">TEMPLATE</span>
&nbsp;
<span class="co1">##################</span>
<span class="co1">##################</span>
&nbsp;
<span class="kw1">my</span> <span class="re0">$tt</span> <span class="sy0">=</span> Template<span class="sy0">-&gt;</span><span class="kw2">new</span><span class="br0">&#40;</span><span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">or</span> <span class="kw3">die</span> <span class="br0">&#40;</span><span class="st0">&quot;Failed to load template: $Template::ERRORn&quot;</span><span class="br0">&#41;</span><span class="sy0">;</span>
<span class="kw1">my</span> <span class="re0">$feed</span> <span class="sy0">=</span> get<span class="br0">&#40;</span><span class="re0">$feed_url</span><span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">or</span> <span class="kw3">die</span> <span class="br0">&#40;</span><span class="st_h">'Failed to fetch feed.'</span><span class="br0">&#41;</span><span class="sy0">;</span>
<span class="kw1">my</span> <span class="re0">$rss</span> <span class="sy0">=</span> XML<span class="sy0">::</span><span class="me2">RSS</span><span class="sy0">-&gt;</span><span class="kw2">new</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
<span class="re0">$rss</span><span class="sy0">-&gt;</span><span class="me1">parse</span><span class="br0">&#40;</span><span class="re0">$feed</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
<span class="re0">$tt</span><span class="sy0">-&gt;</span><span class="me1">process</span> <span class="br0">&#40;</span> <span class="re0">$template</span><span class="sy0">,</span> <span class="re0">$rss</span> <span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">or</span> <span class="kw3">die</span> <span class="re0">$tt</span><span class="sy0">-&gt;</span><span class="me1">error</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">#!/usr/bin/perl
use strict;
use warnings;

use XML::RSS;
use LWP::Simple;
use Template;

##################
# Configuration:
#
##################
my $feed_url = 'http://feeds.bbci.co.uk/news/rss.xml';
my $template = &lt;&lt;"TEMPLATE";
[% channel.title %]

Headlines:
[% FOREACH item = items %]
[% item.pubDate %]t[% item.title %]
[% END %]
TEMPLATE

##################
##################

my $tt = Template-&gt;new()
        or die ("Failed to load template: $Template::ERRORn");
my $feed = get($feed_url)
        or die ('Failed to fetch feed.');
my $rss = XML::RSS-&gt;new();
$rss-&gt;parse($feed);

$tt-&gt;process ( $template, $rss )
        or die $tt-&gt;error();</pre></div></div>


<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="bash"><thead><tr><td colspan="2"  class="head">Bash</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
</pre></td><td class="de1"><pre class="de1">rob<span class="sy0">@</span>arrakis:~<span class="sy0">/</span>public_html<span class="sy0">/</span>rss-reader$ <span class="kw2">perl</span> rss-reader.pl 
BBC News - Home
&nbsp;
Headlines:
&nbsp;
Fri, <span class="nu0">14</span> Sep <span class="nu0">2012</span> <span class="nu0">12</span>:<span class="nu0">15</span>:<span class="nu0">22</span> GMT &nbsp; Kate privacy invasion <span class="st_h">'grotesque'</span>
&nbsp;
Fri, <span class="nu0">14</span> Sep <span class="nu0">2012</span> <span class="nu0">11</span>:<span class="nu0">49</span>:<span class="nu0">10</span> GMT &nbsp; US missions on film protest alert
&nbsp;
Fri, <span class="nu0">14</span> Sep <span class="nu0">2012</span> <span class="nu0">12</span>:<span class="nu0">25</span>:<span class="nu0">25</span> GMT &nbsp; Alps attack girl returning to UK
&nbsp;
Fri, <span class="nu0">14</span> Sep <span class="nu0">2012</span> <span class="nu0">10</span>:<span class="nu0">17</span>:03 GMT &nbsp; Woman is held after car body <span class="kw2">find</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">rob@arrakis:~/public_html/rss-reader$ perl rss-reader.pl 
BBC News - Home

Headlines:

Fri, 14 Sep 2012 12:15:22 GMT	Kate privacy invasion 'grotesque'

Fri, 14 Sep 2012 11:49:10 GMT	US missions on film protest alert

Fri, 14 Sep 2012 12:25:25 GMT	Alps attack girl returning to UK

Fri, 14 Sep 2012 10:17:03 GMT	Woman is held after car body find</pre></div></div>

<p>In this example the RSS feed and template are defined in code but they can just as easily be defined in files or a database allowing for changes/additions without deploying new code.</p>
]]></content:encoded>
			<wfw:commentRss>/index.php/webdev/serverprogramming/taming-rss-feeds-with-xml/feed/</wfw:commentRss>
		<slash:comments>3</slash:comments>
		</item>
		<item>
		<title>Using a Perl Singleton to Share Values Between Objects</title>
		<link>/index.php/webdev/serverprogramming/using-a-perl-singleton/</link>
		<comments>/index.php/webdev/serverprogramming/using-a-perl-singleton/#comments</comments>
		<pubDate>Wed, 12 Sep 2012 14:54:00 +0000</pubDate>
		<dc:creator><![CDATA[Rob Earl]]></dc:creator>
				<category><![CDATA[Perl]]></category>
		<category><![CDATA[Server Programming]]></category>
		<category><![CDATA[design patterns]]></category>
		<category><![CDATA[perl]]></category>
		<category><![CDATA[singleton]]></category>

		<guid isPermaLink="false">/index.php/2012/09/using-a-perl-singleton/</guid>
		<description><![CDATA[It's been quite a while since I last posted here. Since my last entry I got a new job,  got married, went on honeymoon (got back yesterday!) and spent quite a lot of time maintaining legacy Perl code.

One thing I see a lot is sharing objects by passi&#8230;]]></description>
				<content:encoded><![CDATA[<p>It&#8217;s been quite a while since I last posted here. Since my last entry I got a new job,  got married, went on honeymoon (got back yesterday!) and spent quite a lot of time maintaining legacy Perl code.</p>
<p>One thing I see a lot is sharing objects by passing them to the constructor of a new object. This is fine until you&#8217;re dealing with complicated sets of objects within objects. </p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="perl"><thead><tr><td colspan="2"  class="head">Perl</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
</pre></td><td class="de1"><pre class="de1"><span class="co1">#!/usr/bin/perl</span>
&nbsp;
<span class="kw2">use</span> strict<span class="sy0">;</span>
&nbsp;
<span class="co1"># Read some variables out of a configuration file.</span>
<span class="kw1">my</span> <span class="re0">$config</span> <span class="sy0">=</span> get_config<span class="br0">&#40;</span><span class="re0">$config_file</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
<span class="co1"># Create a new object which contains an object which uses some values from the config.</span>
<span class="kw1">my</span> <span class="re0">$object</span> <span class="sy0">=</span> MyObject<span class="sy0">-&gt;</span><span class="kw2">new</span><span class="br0">&#40;</span><span class="re0">$config</span><span class="br0">&#41;</span><span class="sy0">;</span>
<span class="re0">$object</span><span class="sy0">-&gt;</span><span class="me1">do_something</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
<span class="kw3">package</span> MyObject<span class="sy0">;</span>
&nbsp;
<span class="kw2">sub</span> <span class="kw2">new</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; <span class="kw1">my</span> <span class="re0">$class</span> <span class="sy0">=</span> <span class="kw3">shift</span><span class="sy0">;</span>
&nbsp; &nbsp; <span class="kw1">my</span> <span class="re0">$config</span> <span class="sy0">=</span> <span class="kw3">shift</span><span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; <span class="co1"># Store the config incase we create any objects which need it.</span>
&nbsp; &nbsp; <span class="kw1">my</span> <span class="re0">$self</span> <span class="sy0">=</span> <span class="br0">&#123;</span> <span class="st_h">'config'</span> <span class="sy0">=&gt;</span> <span class="re0">$config</span> <span class="br0">&#125;</span><span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; <span class="kw3">return</span> <span class="kw3">bless</span> <span class="re0">$self</span><span class="sy0">,</span> <span class="re0">$class</span><span class="sy0">;</span>
<span class="br0">&#125;</span>
&nbsp;
<span class="kw2">sub</span> do_something <span class="br0">&#123;</span>
&nbsp; &nbsp; <span class="kw1">my</span> <span class="re0">$self</span> <span class="sy0">=</span> <span class="kw3">shift</span><span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; <span class="kw1">my</span> <span class="re0">$object2</span> <span class="sy0">=</span> MyObject2<span class="sy0">-&gt;</span><span class="kw2">new</span><span class="br0">&#40;</span><span class="re0">$self</span><span class="sy0">-&gt;</span><span class="br0">&#123;</span><span class="st_h">'config'</span><span class="br0">&#125;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; <span class="kw3">return</span> <span class="re0">$object2</span><span class="sy0">-&gt;</span><span class="me1">do_something_else</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
<span class="br0">&#125;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">#!/usr/bin/perl

use strict;

# Read some variables out of a configuration file.
my $config = get_config($config_file);

# Create a new object which contains an object which uses some values from the config.
my $object = MyObject-&gt;new($config);
$object-&gt;do_something();

package MyObject;

sub new {
    my $class = shift;
    my $config = shift;

    # Store the config incase we create any objects which need it.
    my $self = { 'config' =&gt; $config };

    return bless $self, $class;
}

sub do_something {
    my $self = shift;

    my $object2 = MyObject2-&gt;new($self-&gt;{'config'});

    return $object2-&gt;do_something_else();
}</pre></div></div>

<p>MyObject is now holding a reference to the config object which it doesn&#8217;t need directly. This will only get worse if MyObject2 needs another object which requires the config object, etc.</p>
<p>Instead we could use a singleton object:</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="perl"><thead><tr><td colspan="2"  class="head">Perl</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
</pre></td><td class="de1"><pre class="de1"><span class="kw3">package</span> MyConfigObject<span class="sy0">;</span>
&nbsp;
<span class="kw2">use</span> strict<span class="sy0">;</span>
<span class="kw2">use</span> Carp<span class="sy0">;</span>
&nbsp;
<span class="kw1">my</span> <span class="re0">$config</span> <span class="sy0">=</span> <span class="kw3">undef</span><span class="sy0">;</span>
&nbsp;
<span class="kw2">sub</span> <span class="kw2">new</span> <span class="br0">&#123;</span>
&nbsp;
&nbsp; &nbsp; <span class="kw1">if</span><span class="br0">&#40;</span><span class="sy0">!</span><span class="re0">$config</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">my</span> <span class="re0">$class</span> <span class="sy0">=</span> <span class="kw3">shift</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">my</span> <span class="re0">$config_file</span> <span class="sy0">=</span> <span class="kw3">shift</span><span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; croak <span class="kw1">unless</span> <span class="re0">$config_file</span><span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; <span class="re0">$config</span> <span class="sy0">=</span> <span class="kw3">bless</span> <span class="br0">&#123;</span><span class="br0">&#125;</span><span class="sy0">,</span> <span class="re0">$class</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="re0">$config</span><span class="sy0">-&gt;</span><span class="me1">parse_file</span><span class="br0">&#40;</span><span class="re0">$config_file</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp;
&nbsp; &nbsp; <span class="kw3">return</span> <span class="re0">$config</span><span class="sy0">;</span>
<span class="br0">&#125;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">package MyConfigObject;

use strict;
use Carp;

my $config = undef;

sub new {

    if(!$config) {
        my $class = shift;
        my $config_file = shift;

        croak unless $config_file;

        $config = bless {}, $class;
        $config-&gt;parse_file($config_file);
    }

    return $config;
}</pre></div></div>

<p>The example above changes to:</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="perl"><thead><tr><td colspan="2"  class="head">Perl</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
</pre></td><td class="de1"><pre class="de1"><span class="co1">#!/usr/bin/perl</span>
&nbsp;
<span class="kw2">use</span> strict<span class="sy0">;</span>
&nbsp;
<span class="co1"># Create a new object to hold the values from our config file.</span>
<span class="kw1">my</span> <span class="re0">$config</span> <span class="sy0">=</span> MyConfigObject<span class="sy0">-&gt;</span><span class="kw2">new</span><span class="br0">&#40;</span><span class="re0">$config_file</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
<span class="co1"># Create a new object which contains an object which uses some values from the config.</span>
<span class="kw1">my</span> <span class="re0">$object</span> <span class="sy0">=</span> MyObject<span class="sy0">-&gt;</span><span class="kw2">new</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
<span class="re0">$object</span><span class="sy0">-&gt;</span><span class="me1">do_something</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
<span class="kw3">package</span> MyObject<span class="sy0">;</span>
&nbsp;
<span class="kw2">sub</span> <span class="kw2">new</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; <span class="kw1">my</span> <span class="re0">$class</span> <span class="sy0">=</span> <span class="kw3">shift</span><span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; <span class="kw3">return</span> <span class="kw3">bless</span> <span class="br0">&#123;</span><span class="br0">&#125;</span><span class="sy0">,</span> <span class="re0">$class</span><span class="sy0">;</span>
<span class="br0">&#125;</span>
&nbsp;
<span class="kw2">sub</span> do_something <span class="br0">&#123;</span>
&nbsp; &nbsp; <span class="kw1">my</span> <span class="re0">$self</span> <span class="sy0">=</span> <span class="kw3">shift</span><span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; <span class="kw1">my</span> <span class="re0">$object2</span> <span class="sy0">=</span> MyObject2<span class="sy0">-&gt;</span><span class="kw2">new</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; <span class="kw3">return</span> <span class="re0">$object2</span><span class="sy0">-&gt;</span><span class="me1">do_something_else</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
<span class="br0">&#125;</span>
&nbsp;
<span class="kw3">package</span> MyObject2<span class="sy0">;</span>
&nbsp;
<span class="kw2">sub</span> <span class="kw2">new</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; <span class="co1"># Get the config object</span>
&nbsp; &nbsp; <span class="kw1">my</span> <span class="re0">$config</span> <span class="sy0">=</span> MyConfigObject<span class="sy0">-&gt;</span><span class="kw2">new</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; <span class="co1"># Do some stuff with it!</span>
<span class="br0">&#125;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">#!/usr/bin/perl

use strict;

# Create a new object to hold the values from our config file.
my $config = MyConfigObject-&gt;new($config_file);

# Create a new object which contains an object which uses some values from the config.
my $object = MyObject-&gt;new();
$object-&gt;do_something();

package MyObject;

sub new {
    my $class = shift;

    return bless {}, $class;
}

sub do_something {
    my $self = shift;

    my $object2 = MyObject2-&gt;new();

    return $object2-&gt;do_something_else();
}

package MyObject2;

sub new {
    # Get the config object
    my $config = MyConfigObject-&gt;new();

    # Do some stuff with it!
}</pre></div></div>

<p>Whenever we need to use a value from the config file, we create a new MyConfigObject and get the instance we already created without having to reparse the config file or maintain complicated links through parent objects.</p>
]]></content:encoded>
			<wfw:commentRss>/index.php/webdev/serverprogramming/using-a-perl-singleton/feed/</wfw:commentRss>
		<slash:comments>5</slash:comments>
		</item>
		<item>
		<title>Writing Perl Tests with Test::More</title>
		<link>/index.php/webdev/serverprogramming/writing-perl-tests-with-test/</link>
		<comments>/index.php/webdev/serverprogramming/writing-perl-tests-with-test/#comments</comments>
		<pubDate>Sat, 15 Jan 2011 14:29:00 +0000</pubDate>
		<dc:creator><![CDATA[Rob Earl]]></dc:creator>
				<category><![CDATA[Server Programming]]></category>
		<category><![CDATA[oop]]></category>
		<category><![CDATA[perl]]></category>
		<category><![CDATA[testing]]></category>

		<guid isPermaLink="false">/index.php/2011/01/writing-perl-tests-with-test/</guid>
		<description><![CDATA[Writing tests for code is just as important as writing the code itself. Time spent writing tests is less time spent tracking down and fixing bugs, making it a great investment. Despite knowing this it can sometimes be hard to force yourself to stop codi&#8230;]]></description>
				<content:encoded><![CDATA[<p>Writing tests for code is just as important as writing the code itself. Time spent writing tests is less time spent tracking down and fixing bugs, making it a great investment. Despite knowing this it can sometimes be hard to force yourself to stop coding and write tests. Fortunately, Perl has some modules to make it pretty simple. Here&#8217;s the module we&#8217;re going to be testing:</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="perl"><thead><tr><td colspan="2"  class="head">Perl</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
</pre></td><td class="de1"><pre class="de1"><span class="co1">#!/usr/bin/perl</span>
&nbsp;
<span class="kw3">package</span> MyMaths<span class="sy0">;</span>
<span class="kw2">use</span> strict<span class="sy0">;</span>
&nbsp;
<span class="kw2">sub</span> <span class="kw2">new</span>
<span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">my</span> <span class="re0">$proto</span> <span class="sy0">=</span> <span class="kw3">shift</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">my</span> <span class="re0">$class</span> <span class="sy0">=</span> <span class="kw3">ref</span><span class="br0">&#40;</span><span class="re0">$proto</span><span class="br0">&#41;</span> <span class="sy0">||</span> <span class="re0">$proto</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">my</span> <span class="re0">$self</span> <span class="sy0">=</span> <span class="br0">&#123;</span><span class="br0">&#125;</span><span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw3">bless</span><span class="br0">&#40;</span><span class="re0">$self</span><span class="sy0">,</span> <span class="re0">$class</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw3">return</span> <span class="re0">$self</span><span class="sy0">;</span>
<span class="br0">&#125;</span>
&nbsp;
<span class="kw2">sub</span> add
<span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">my</span> <span class="re0">$self</span> <span class="sy0">=</span> <span class="kw3">shift</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">my</span> <span class="re0">$total</span> <span class="sy0">=</span> <span class="nu0">0</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">foreach</span> <span class="kw1">my</span> <span class="re0">$factor</span> <span class="br0">&#40;</span><span class="co5">@_</span><span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="re0">$total</span> <span class="sy0">+=</span> <span class="re0">$factor</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw3">return</span> <span class="re0">$total</span><span class="sy0">;</span>
<span class="br0">&#125;</span>
&nbsp;
<span class="nu0">1</span><span class="sy0">;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">#!/usr/bin/perl
 
package MyMaths;
use strict;
 
sub new
{
        my $proto = shift;
        my $class = ref($proto) || $proto;
        my $self = {};
 
        bless($self, $class);
        return $self;
}
 
sub add
{
        my $self = shift;
        my $total = 0;
        foreach my $factor (@_)
        {
                $total += $factor;
        }
        return $total;
}
 
1;</pre></div></div>

<p>As you can see, we have a simple class with one method, add, which adds together all the arguments passed to it. We now need to define a test file for this module, called mymaths.t:</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="perl"><thead><tr><td colspan="2"  class="head">Perl</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
</pre></td><td class="de1"><pre class="de1"><span class="co1">#!/usr/bin/perl</span>
&nbsp;
<span class="kw2">use</span> Test<span class="sy0">::</span><span class="me2">More</span> tests<span class="sy0">=&gt;</span><span class="nu0">6</span><span class="sy0">;</span>
<span class="kw2">use</span> MyMaths<span class="sy0">;</span>
&nbsp;
<span class="re0">$mymaths</span> <span class="sy0">=</span> <span class="kw2">new</span> MyMaths<span class="sy0">;</span>
is<span class="br0">&#40;</span> <span class="re0">$mymaths</span><span class="sy0">-&gt;</span><span class="me1">add</span><span class="br0">&#40;</span><span class="nu0">1</span><span class="sy0">,</span><span class="nu0">2</span><span class="sy0">,</span><span class="nu0">3</span><span class="br0">&#41;</span><span class="sy0">,</span> <span class="nu0">6</span><span class="sy0">,</span> <span class="st0">&quot;1 + 2 + 3 = 6&quot;</span><span class="br0">&#41;</span><span class="sy0">;</span>
is<span class="br0">&#40;</span> <span class="re0">$mymaths</span><span class="sy0">-&gt;</span><span class="me1">add</span><span class="br0">&#40;</span><span class="nu0">6</span><span class="sy0">,</span><span class="nu0">2</span><span class="br0">&#41;</span><span class="sy0">,</span> <span class="nu0">8</span><span class="sy0">,</span><span class="st0">&quot;6 + 2 = 8&quot;</span><span class="br0">&#41;</span><span class="sy0">;</span>
is<span class="br0">&#40;</span> <span class="re0">$mymaths</span><span class="sy0">-&gt;</span><span class="me1">add</span><span class="br0">&#40;</span><span class="nu0">1</span><span class="sy0">,</span><span class="nu0">2</span><span class="sy0">,</span><span class="nu0">3</span><span class="sy0">,</span><span class="nu0">4</span><span class="br0">&#41;</span><span class="sy0">,</span> <span class="nu0">10</span><span class="sy0">,</span> <span class="st0">&quot;1 + 2 + 3 + 4 = 10&quot;</span><span class="br0">&#41;</span><span class="sy0">;</span>
is<span class="br0">&#40;</span> <span class="re0">$mymaths</span><span class="sy0">-&gt;</span><span class="me1">add</span><span class="br0">&#40;</span><span class="nu0">1</span><span class="sy0">,</span><span class="nu0">2</span><span class="br0">&#41;</span><span class="sy0">,</span> <span class="nu0">3</span><span class="sy0">,</span> <span class="st0">&quot;1 + 2 = 3&quot;</span><span class="br0">&#41;</span><span class="sy0">;</span>
is<span class="br0">&#40;</span> <span class="re0">$mymaths</span><span class="sy0">-&gt;</span><span class="me1">add</span><span class="br0">&#40;</span><span class="nu0">2</span><span class="br0">&#41;</span><span class="sy0">,</span> <span class="nu0">2</span><span class="sy0">,</span> <span class="st0">&quot;2 = 2&quot;</span><span class="br0">&#41;</span><span class="sy0">;</span>
is<span class="br0">&#40;</span> <span class="re0">$mymaths</span><span class="sy0">-&gt;</span><span class="me1">add</span><span class="br0">&#40;</span><span class="nu0">2</span><span class="sy0">,-</span><span class="nu0">1</span><span class="br0">&#41;</span><span class="sy0">,</span> <span class="nu0">1</span><span class="sy0">,</span> <span class="st0">&quot;2 + -1 = 1&quot;</span><span class="br0">&#41;</span><span class="sy0">;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">#!/usr/bin/perl
 
use Test::More tests=&gt;6;
use MyMaths;
 
$mymaths = new MyMaths;
is( $mymaths-&gt;add(1,2,3), 6, "1 + 2 + 3 = 6");
is( $mymaths-&gt;add(6,2), 8,"6 + 2 = 8");
is( $mymaths-&gt;add(1,2,3,4), 10, "1 + 2 + 3 + 4 = 10");
is( $mymaths-&gt;add(1,2), 3, "1 + 2 = 3");
is( $mymaths-&gt;add(2), 2, "2 = 2");
is( $mymaths-&gt;add(2,-1), 1, "2 + -1 = 1");</pre></div></div>

<p>This test file uses the is() method of the builtin Test::More module. This method takes 3 arguments: the test, the expected result and a description. If a test fails, is() will give some feedback on the test.</p>
<p><strong>edit:</strong> To run the tests use the `prove` utility which is part of the Test::Harness package:</p>
<p><code class="codespan">prove -v mymaths.t</code></p>
<p>Run all tests in the current directory with:<br />
<code class="codespan">prove -v .</code></p>
<p><del cite="/index.php/WebDev/ServerProgramming/writing-perl-tests-with-test#c7568">To run the tests we use another builtin module, Test::Harness. Create tests.pl:</del></p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="perl"><thead><tr><td colspan="2"  class="head">Perl</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
</pre></td><td class="de1"><pre class="de1"><span class="co1">#!/usr/bin/perl</span>
&nbsp;
<span class="kw2">use</span> Test<span class="sy0">::</span><span class="me2">Harness</span> <span class="kw3">qw</span><span class="br0">&#40;</span><span class="re0">&amp;runtests</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
<span class="re0">@tests</span> <span class="sy0">=</span> <span class="sy0">@</span><span class="kw2">ARGV</span> <span class="sy0">?</span> <span class="sy0">@</span><span class="kw2">ARGV</span> <span class="sy0">:</span> <span class="sy0">&lt;*.</span>t<span class="sy0">&gt;;</span>
&nbsp;
runtests <span class="re0">@tests</span><span class="sy0">;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">#!/usr/bin/perl
 
use Test::Harness qw(&amp;runtests);
 
@tests = @ARGV ? @ARGV : &lt;*.t&gt;;
 
runtests @tests;</pre></div></div>

<p><del>This script can either be run with a list of test files as arguments, or with no arguments to run all test files. Running the script results in:</del></p>
<pre>./mymaths.t .. 
1..6
ok 1 - 1 + 2 + 3 = 6
ok 2 - 6 + 2 = 8
ok 3 - 1 + 2 + 3 + 4 = 10
ok 4 - 1 + 2 = 3
ok 5 - 2 = 2
ok 6 - 2 + -1 = 1
ok
All tests successful.
Files=1, Tests=6,  0 wallclock secs ( 0.01 usr  0.02 sys +  0.02 cusr  0.01 csys =  0.06 CPU)
Result: PASS</pre>
<p>Everything went fine, as expected. Now go back to the original class definition and make a typo on line 22, so it reads = instead of += and rerun the tests:</p>
<pre>./mymaths.t .. 
1..6
not ok 1 - 1 + 2 + 3 = 6
not ok 2 - 6 + 2 = 8
not ok 3 - 1 + 2 + 3 + 4 = 10
not ok 4 - 1 + 2 = 3
ok 5 - 2 = 2
not ok 6 - 2 + -1 = 1

#   Failed test '1 + 2 + 3 = 6'
#   at ./mymaths.t line 7.
#          got: '3'
#     expected: '6'

#   Failed test '6 + 2 = 8'
#   at ./mymaths.t line 8.
#          got: '2'
#     expected: '8'

#   Failed test '1 + 2 + 3 + 4 = 10'
#   at ./mymaths.t line 9.
#          got: '4'
#     expected: '10'

#   Failed test '1 + 2 = 3'
#   at ./mymaths.t line 10.
#          got: '2'
#     expected: '3'

#   Failed test '2 + -1 = 1'
#   at ./mymaths.t line 12.
#          got: '-1'
#     expected: '1'
# Looks like you failed 5 tests of 6.
Dubious, test returned 5 (wstat 1280, 0x500)
Failed 5/6 subtests 

Test Summary Report
-------------------
./mymaths.t (Wstat: 1280 Tests: 6 Failed: 5)
  Failed tests:  1-4, 6
  Non-zero exit status: 5
Files=1, Tests=6,  0 wallclock secs ( 0.03 usr  0.00 sys +  0.03 cusr  0.00 csys =  0.06 CPU)
Result: FAIL</pre>
<p>Most of the tests failed and gave good feedback to help find the problem.</p>
<h2>Summary</h2>
<p>Although writing tests can be a chore it is worth doing. If you write tests a little at a time:</p>
<ul>
<li>When you design a class.</li>
<li>When you add a method to a class.</li>
<li>When you find a bug.</li>
</ul>
<p>You&#8217;ll develop a good library of tests without too much effort.</p>
<p>Further reading: <a href="http://perldoc.perl.org/Test/More.html">Test::More perldoc</a></p>
]]></content:encoded>
			<wfw:commentRss>/index.php/webdev/serverprogramming/writing-perl-tests-with-test/feed/</wfw:commentRss>
		<slash:comments>9</slash:comments>
		</item>
	</channel>
</rss>
