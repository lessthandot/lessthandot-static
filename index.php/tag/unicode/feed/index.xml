<?xml version="1.0" encoding="UTF-8"?><rss version="2.0"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:atom="http://www.w3.org/2005/Atom"
	xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
	xmlns:slash="http://purl.org/rss/1.0/modules/slash/"
	>

<channel>
	<title>unicode &#8211; LessthanDot</title>
	<atom:link href="/index.php/tag/unicode/feed/" rel="self" type="application/rss+xml" />
	<link>/</link>
	<description>A Technical Community for IT Professionals</description>
	<lastBuildDate>Sat, 09 Mar 2019 12:50:36 +0000</lastBuildDate>
	<language>en-US</language>
	<sy:updatePeriod>hourly</sy:updatePeriod>
	<sy:updateFrequency>1</sy:updateFrequency>
	<generator>https://wordpress.org/?v=4.6.1</generator>
	<item>
		<title>Python 3.5+: Unicode output for Windows Console</title>
		<link>/index.php/desktopdev/python-3-6-unicode-output-for-windows-console/</link>
		<comments>/index.php/desktopdev/python-3-6-unicode-output-for-windows-console/#respond</comments>
		<pubDate>Sun, 20 Nov 2016 16:10:02 +0000</pubDate>
		<dc:creator><![CDATA[Eli Weinstock-Herman (tarwn)]]></dc:creator>
				<category><![CDATA[Desktop Developer]]></category>
		<category><![CDATA[python]]></category>
		<category><![CDATA[unicode]]></category>

		<guid isPermaLink="false">/?p=4812</guid>
		<description><![CDATA[I&#8217;ve tripped over this on 2 machines now and end up at the same out of date StackOverflow post, so maybe this will help someone else. Python 3.5, not 3.6, I had that wrong initially ðŸ™‚ Situation When you try to print a string with a Unicode character to the console on Windows in Python, [&#8230;]]]></description>
				<content:encoded><![CDATA[<p>I&#8217;ve tripped over this on 2 machines now and end up at the same out of date StackOverflow post, so maybe this will help someone else.</p>
<div style="border: #FFCCCC 2px solid; background-color: #FFDDDD; padding: 1em;">Python 3.5, not 3.6, I had that wrong initially <img src="https://s.w.org/images/core/emoji/2/72x72/1f642.png" alt="ðŸ™‚" class="wp-smiley" style="height: 1em; max-height: 1em;" /></div>
<p><b>Situation</b><br />
When you try to print a string with a Unicode character to the console on Windows in Python, you get:<br />
<code>UnicodeEncodeError: 'charmap' codec can't encode characters in position 20-21: character maps to &lt;undefined&gt;</code></p>
<p>Looking something like this:<br />
<div id="attachment_4813" style="width: 810px" class="wp-caption alignleft"><a href="/wp-content/uploads/2016/11/python_console_unicode_error.png"><img src="/wp-content/uploads/2016/11/python_console_unicode_error.png" alt="Python UnicodeEncodeError" width="800" class="size-full wp-image-4813" srcset="/wp-content/uploads/2016/11/python_console_unicode_error.png 868w, /wp-content/uploads/2016/11/python_console_unicode_error-300x54.png 300w" sizes="(max-width: 868px) 100vw, 868px" /></a><p class="wp-caption-text">Python UnicodeEncodeError</p></div></p>
<p><b>Fix</b><br />
Windows command-line supports unicode now, and Python 3.6+ ties into this support automatically (prior version requires win-unicode-console). You just need a slight bit of magic dust.</p>
<p>Add an environment variable named PYTHONIOENCODING to your environment settings, like so:<br />
<div id="attachment_4814" style="width: 595px" class="wp-caption alignleft"><a href="/wp-content/uploads/2016/11/envvars.png"><img src="/wp-content/uploads/2016/11/envvars.png" alt="PYTHONIOENCODING Environment Variable" width="585" height="101" class="size-full wp-image-4814" srcset="/wp-content/uploads/2016/11/envvars.png 585w, /wp-content/uploads/2016/11/envvars-300x51.png 300w" sizes="(max-width: 585px) 100vw, 585px" /></a><p class="wp-caption-text">PYTHONIOENCODING Environment Variable</p></div></p>
<p>And now when you execute, you get console output instead of an error:<br />
<div id="attachment_4815" style="width: 292px" class="wp-caption alignleft"><a href="/wp-content/uploads/2016/11/python_console_unicode_success.png"><img src="/wp-content/uploads/2016/11/python_console_unicode_success.png" alt="Python Console Output without Unicode Error" width="282" height="74" class="size-full wp-image-4815" /></a><p class="wp-caption-text">Python Console Output without Unicode Error</p></div></p>
]]></content:encoded>
			<wfw:commentRss>/index.php/desktopdev/python-3-6-unicode-output-for-windows-console/feed/</wfw:commentRss>
		<slash:comments>0</slash:comments>
		</item>
		<item>
		<title>Misconceptions about unicode in SQL Server</title>
		<link>/index.php/datamgmt/datadesign/misconceptions-about-unicode-in-sql-serv/</link>
		<comments>/index.php/datamgmt/datadesign/misconceptions-about-unicode-in-sql-serv/#comments</comments>
		<pubDate>Sat, 07 Aug 2010 16:17:37 +0000</pubDate>
		<dc:creator><![CDATA[SQLDenis]]></dc:creator>
				<category><![CDATA[Data Modelling and Design]]></category>
		<category><![CDATA[datalength]]></category>
		<category><![CDATA[len]]></category>
		<category><![CDATA[myth]]></category>
		<category><![CDATA[nvarchar]]></category>
		<category><![CDATA[sql server]]></category>
		<category><![CDATA[sql server 2005]]></category>
		<category><![CDATA[sql server 2008]]></category>
		<category><![CDATA[unicode]]></category>

		<guid isPermaLink="false">/index.php/2010/08/misconceptions-about-unicode-in-sql-serv/</guid>
		<description><![CDATA[I was browsing around last night on the internet and a person wanted to know what data type to use to store a course name. Here is an answer he got: I would recommend nvarchar or varchar for the name. Use nvarchar if you anticipate there ever being a point in the future that you [&#8230;]]]></description>
				<content:encoded><![CDATA[<p>I was browsing around last night on the internet and a person wanted to know what data type to use to store a course name. Here is an answer he got:</p>
<blockquote><p>I would recommend nvarchar or varchar for the name. Use nvarchar if you anticipate there ever being a point in the future that you will need to support foreign languages that might contain unicode characters that are not supported by varchar.<strong> I would look at the longest name I anticipate needing, double it&#8217;s length and then round up to the nearest 50. So if &#8220;Introduction to Partial Differential Equations&#8221; at 48 then I would make it varchar(100)</strong></p></blockquote>
<p>Okay so that part in bold is completely wrong, Nvarchar uses 2 bytes per character for storage but you do not specify that. So if you want to store the character &#25991; you need nchar(1) not nchar(2).</p>
<p>Run this and you will see the character &#25991; in the output<br />
<strong>
<pre>declare @n nchar(1)
set @n = N'æ–‡' 

select @n</pre>
<p></strong></p>
<p><em>And no, there is no mistake, the reason I didn&#8217;t use the codeblock that I use for the rest of this post is that the &#25991; character gets changed to <code>&amp;#25991 so the SQL would be incorrect</code></em></p>
<p>Also be aware that you need to have the N in front of the string, this tells SQL Server that it has to treat it as unicode. If you do this &#8216;&#25991;&#8217; instead of N&#8217;&#25991;&#8217; you will get a question mark in the output.</p>
<p>What if you wanted to store over 4000 characters in a nvarchar? Varchar goes up to 8000 characters but nvarchar only goes up to 4000 characters, take a look and run the statement below.</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
</pre></td><td class="de1"><pre class="de1"><span class="kw1">DECLARE</span> @n <span class="kw1">NVARCHAR</span><span class="br0">&#40;</span><span class="nu0">4001</span><span class="br0">&#41;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">DECLARE @n NVARCHAR(4001)</pre></div></div>

<p>Below is the error that you will get.<br />
<em>Msg 2717, Level 16, State 2, Line 1<br />
The size (4001) given to the parameter &#8216;@n&#8217; exceeds the maximum allowed (4000).</em></p>
<p>But there is hope, you can use NVARCHAR(max) to store up to 2GB of data, so about a billion characters or so</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
</pre></td><td class="de1"><pre class="de1"><span class="kw1">DECLARE</span> @n <span class="kw1">NVARCHAR</span><span class="br0">&#40;</span><span class="kw2">max</span><span class="br0">&#41;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">DECLARE @n NVARCHAR(max)</pre></div></div>

<p>One more thing to be aware of when using unicode is that LEN will give you the number of characters but DATALENGTH will give you the storage required to store the character(s)</p>
<p>Run this</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
</pre></td><td class="de1"><pre class="de1"><span class="kw1">SELECT</span> <span class="kw2">LEN</span><span class="br0">&#40;</span>N<span class="st0">'1'</span><span class="br0">&#41;</span>,DATALENGTH<span class="br0">&#40;</span>N<span class="st0">'1'</span><span class="br0">&#41;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">SELECT LEN(N'1'),DATALENGTH(N'1')</pre></div></div>

<p>LEN returns 1 and DATALENGTH returns 2. To learn more about LEN and DATALENGTH, take a look at the <a href="/index.php/DataMgmt/DBProgramming/the-differences-between-len-and-dataleng">The differences between LEN and DATALENGTH in SQL Server</a> post I wrote a while back.</p>
<p>That is all for this short weekend post.</p>
<p>*** <strong>Remember, if you have a SQL related question, try our <a href="http://forum.lessthandot.com/viewforum.php?f=17">Microsoft SQL Server Programming</a> forum or our <a href="http://forum.lessthandot.com/viewforum.php?f=22">Microsoft SQL Server Admin</a> forum</strong><ins></ins></p>
]]></content:encoded>
			<wfw:commentRss>/index.php/datamgmt/datadesign/misconceptions-about-unicode-in-sql-serv/feed/</wfw:commentRss>
		<slash:comments>2</slash:comments>
		</item>
		<item>
		<title>SQL Server Decode/Encode unicode data</title>
		<link>/index.php/datamgmt/datadesign/sql-server-decode-encode-unicode-data/</link>
		<comments>/index.php/datamgmt/datadesign/sql-server-decode-encode-unicode-data/#comments</comments>
		<pubDate>Wed, 08 Jul 2009 10:43:10 +0000</pubDate>
		<dc:creator><![CDATA[George Mastros (gmmastros)]]></dc:creator>
				<category><![CDATA[Data Modelling and Design]]></category>
		<category><![CDATA[Microsoft SQL Server]]></category>
		<category><![CDATA[unicode]]></category>

		<guid isPermaLink="false">/index.php/2009/07/sql-server-decode-encode-unicode-data/</guid>
		<description><![CDATA[Not all systems can correctly accommodate Unicode data. Therefore, it&#8217;s not uncommon to receive data that is encoded in such a way that it can be stored in an ASCII format. Of course, SQL Server can store Unicode data easily if you use the nvarchar data type. Converting to and from Unicode data can be [&#8230;]]]></description>
				<content:encoded><![CDATA[<p>Not all systems can correctly accommodate Unicode data.  Therefore, it&#8217;s not uncommon to receive data that is encoded in such a way that it can be stored in an ASCII format.  Of course, SQL Server can store Unicode data easily if you use the nvarchar data type.  Converting to and from Unicode data can be time consuming.  When you receive data that is Unicode encoded, I suggest you decode it and store it in an nvarchar column.  This will result in better performance.</p>
<p>Usually, when Unicode is encoded in an ASCII format, the Unicode value is somehow embedded within it.  For example, the Greek letter Omega &#937;, has a Unicode value of 937.  It may be encoded like this: &#937;</p>
<p>Usually, non Unicode data will not be encoded.  So you may see a string like this: &#8220;&#937;mega&#8221;</p>
<p>Converting from an encoded string to a real Unicode string is more difficult than it may seem.  There are 65,535 possible Unicode characters (the first 255 match ASCII characters).  The example I showed has 3 digit Unicode values, but we should also be able to accommodate 4 and 5 digit Unicode characters too.</p>
<p>The basis for the function below is the CharIndex SQL Server functions.  CharIndex has an optional 3rd parameter that allows you to specify where (within the string) to start searching.  What we do is first find where the encoded Unicode data starts, and then where it ends.  Once we know this, we do a simple replace.  Since there can be multiple encoded Unicode characters, we put the whole thing in to a while loop.</p>
<pre>Create Function DecodeUnicodeData(@Data nVarChar(4000), @Prefix VarChar(100), @Suffix VarChar(100))
Returns nvarchar(4000)
As
Begin
  Declare @Start Int
  Declare @End Int

  While CharIndex(@Prefix, @Data) &gt; 0
    Begin
      Set @Start = CharIndex(@Prefix, @Data)
      Set @End = CharIndex(@Suffix, @Data, @Start)

      Set @Data = Replace(@Data, SubString(@Data, @Start, @End -@Start + Len(@Suffix)),NCHAR(SubString(@Data, @Start+ Len(@Prefix),@End -@Start - Len(@Prefix))))
    End
  
  Return @Data

End</pre>
<p>You can call it like this:</p>
<pre>Select dbo.DecodeUnicodeData('&amp;#937;mega', '&amp;#', ';')</pre>
<p>This blog wouldn&#8217;t be complete if I didn&#8217;t also give you a function for encoding data, too.  What I mean is, suppose you need to supply data in this format.  How would you do it?</p>
<pre>Create Function EncodeUnicodeData(@Data NVarChar(4000), @Prefix VarChar(20), @Suffix VarChar(20))
Returns VarChar(8000)
As 
Begin
  Declare @i Int
  Declare @Output VarChar(8000)

  Set @i = 1
  Set @Output = ''

  While @i &lt;= Len(@Data)	
    Begin
      If Unicode(SubString(@Data, @i, 1)) &gt; 255
        Set @Output = @Output + @Prefix + Convert(VarChar(5),Unicode(SubString(@Data, @i, 1))) + @Suffix
      Else
        Set @Output = @Output + SubString(@Data, @i, 1)

      Set @i = @i + 1
    End

  Return @Output
End</pre>
<p>You can call it like this:</p>
<pre>Select dbo.EncodeUnicodeData(N'&amp;#937;mega', '&amp;#', ';')</pre>
]]></content:encoded>
			<wfw:commentRss>/index.php/datamgmt/datadesign/sql-server-decode-encode-unicode-data/feed/</wfw:commentRss>
		<slash:comments>3</slash:comments>
		</item>
	</channel>
</rss>
