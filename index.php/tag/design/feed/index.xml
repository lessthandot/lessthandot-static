<?xml version="1.0" encoding="UTF-8"?><rss version="2.0"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:atom="http://www.w3.org/2005/Atom"
	xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
	xmlns:slash="http://purl.org/rss/1.0/modules/slash/"
	>

<channel>
	<title>design &#8211; LessthanDot</title>
	<atom:link href="/index.php/tag/design/feed/" rel="self" type="application/rss+xml" />
	<link>/</link>
	<description>A Technical Community for IT Professionals</description>
	<lastBuildDate>Sat, 09 Mar 2019 12:50:36 +0000</lastBuildDate>
	<language>en-US</language>
	<sy:updatePeriod>hourly</sy:updatePeriod>
	<sy:updateFrequency>1</sy:updateFrequency>
	<generator>https://wordpress.org/?v=4.6.1</generator>
	<item>
		<title>SQL Advent 2012, here is what is coming</title>
		<link>/index.php/datamgmt/dbprogramming/sql-advent-2012-here-is/</link>
		<comments>/index.php/datamgmt/dbprogramming/sql-advent-2012-here-is/#comments</comments>
		<pubDate>Sun, 25 Nov 2012 22:40:00 +0000</pubDate>
		<dc:creator><![CDATA[SQLDenis]]></dc:creator>
				<category><![CDATA[Business Intelligence]]></category>
		<category><![CDATA[Database Administration]]></category>
		<category><![CDATA[Database Programming]]></category>
		<category><![CDATA[Microsoft SQL Server]]></category>
		<category><![CDATA[database]]></category>
		<category><![CDATA[design]]></category>
		<category><![CDATA[how to]]></category>
		<category><![CDATA[sql server 2000]]></category>
		<category><![CDATA[sql server 2005]]></category>
		<category><![CDATA[sql server 2008]]></category>
		<category><![CDATA[sql server 2012]]></category>
		<category><![CDATA[tables]]></category>

		<guid isPermaLink="false">/index.php/2012/11/sql-advent-2012-here-is/</guid>
		<description><![CDATA[I decided to do a SQL Advent series of posts this year as well, this year I will focus on best practices. In case you are interested in last year's posts, all of them are listed here: SQL Advent 2011 Recap

Here is what the preliminary 25 posts will l&#8230;]]></description>
				<content:encoded><![CDATA[<p>I decided to do a SQL Advent series of posts this year as well, this year I will focus on best practices. In case you are interested in last year&#8217;s posts, all of them are listed here: <a href="/index.php/DataMgmt/DataDesign/sql-advent-2011-recap">SQL Advent 2011 Recap</a></p>
<p>Here is what the 25 posts will look like, the order that the posts are listed is not the same that they will be posted, I will randomly pick and choose</p>
<p>1 <a href="/index.php/DataMgmt/DBProgramming/data-types">Data types storage differences</a><br />
2 <a href="/index.php/DataMgmt/DBProgramming/sargable-queries">Sargable queries</a><br />
3 Recap<br />
4 <a href="/index.php/DataMgmt/DBProgramming/triggers-what-to-do-what">Triggers, what to do, what not to do</a><br />
5 <a href="/index.php/DataMgmt/DBAdmin/MSSQLServerAdmin/sizing-database-files">Sizing Files</a><br />
6 <a href="/index.php/DataMgmt/DBAdmin/MSSQLServerAdmin/benefits-of-indexes">Benefits of Indexes</a><br />
7 <a href="/index.php/DataMgmt/DBProgramming/MSSQLServer/foreign-keys">Foreign Keys</a><br />
8 <a href="/index.php/DataMgmt/DBProgramming/standardized-naming-and-other-conventions">Standardized naming conventions</a><br />
9 <a href="/index.php/DataMgmt/DBAdmin/MSSQLServerAdmin/do-not-trust-the-ssms">Don’t trust the designers</a><br />
10 <a href="/index.php/DataMgmt/DBAdmin/MSSQLServerAdmin/lack-of-constraints">Lack of constraints</a><br />
11 <a href="/index.php/DataMgmt/business-intelligence-1/when-to-say-no">When to say no</a><br />
12 <a href="/index.php/DataMgmt/DBAdmin/MSSQLServerAdmin/features-enabled-that-are-not">Features enabled that are not used</a><br />
13 <a href="/index.php/DataMgmt/business-intelligence-1/sql-server-maintenance">Maintenance</a><br />
14 <a href="/index.php/DataMgmt/DBAdmin/MSSQLServerAdmin/proactive-notifications">Proactive notifications</a><br />
15 <a href="/index.php/DataMgmt/DBProgramming/MSSQLServer/sql-advent-2012-day-10">Reinventing the wheel</a><br />
16 <a href="/index.php/DataMgmt/DBProgramming/MSSQLServer/cursors-and-loops">Loops and cursors</a><br />
17 <a href="/index.php/DataMgmt/DataDesign/lack-of-database-design-and">Lack of database design and normalization</a><br />
18 <a href="/index.php/DataMgmt/business-intelligence-1/use-the-new-features">Use the new features</a><br />
19 <a href="/index.php/DataMgmt/DBAdmin/MSSQLServerAdmin/stay-relevant-and-marketable">Stay relevant and marketable</a><br />
20 <a href="/index.php/DataMgmt/business-intelligence-1/get-the-tools-you-need">Get the tools you need to be more productive</a><br />
21 <a href="/index.php/DataMgmt/DBProgramming/MSSQLServer/getting-help">How to get help</a><br />
22 <a href="/index.php/DataMgmt/business-intelligence-1/testing-your-backup-and-failoverhttp:///index.php/DataMgmt/business-intelligence-1/testing-your-backup-and-failover">Testing a backup strategy</a><br />
23 <a href="/index.php/DataMgmt/business-intelligence-1/no-matter-how-long-you">No matter how long you are on the wrong path, go back</a><br />
24 <a href="/index.php/DataMgmt/DBAdmin/MSSQLServerAdmin/with-vldbs-it-matters-what">With VLDBs it matters what you do and how you do it</a><br />
25 <a href="/index.php/DataMgmt/DBProgramming/how-to-improve-your-tech">How to improve your tech skills</a></p>
<p>Let me know if that list seems fine or if you would like to see something else, also let me know in which topic you have absolutely no interest in</p>
]]></content:encoded>
			<wfw:commentRss>/index.php/datamgmt/dbprogramming/sql-advent-2012-here-is/feed/</wfw:commentRss>
		<slash:comments>4</slash:comments>
		</item>
		<item>
		<title>SQL Advent 2011 Recap</title>
		<link>/index.php/datamgmt/datadesign/sql-advent-2011-recap/</link>
		<comments>/index.php/datamgmt/datadesign/sql-advent-2011-recap/#respond</comments>
		<pubDate>Sun, 25 Dec 2011 10:22:00 +0000</pubDate>
		<dc:creator><![CDATA[SQLDenis]]></dc:creator>
				<category><![CDATA[Data Modelling and Design]]></category>
		<category><![CDATA[database]]></category>
		<category><![CDATA[design]]></category>
		<category><![CDATA[how to]]></category>
		<category><![CDATA[sql server 2000]]></category>
		<category><![CDATA[sql server 2005]]></category>
		<category><![CDATA[sql server 2008]]></category>
		<category><![CDATA[tables]]></category>

		<guid isPermaLink="false">/index.php/2011/12/sql-advent-2011-recap/</guid>
		<description><![CDATA[Here is a recap of all the 24 SQL Advent 2011 posts
Day 1: Date and time
In this post I covered the new date, datetime2 and time datatypes
  
Day 2: System tables and catalog views
In this post we took a look what the replacements are for the all s&#8230;]]></description>
				<content:encoded><![CDATA[<p>SQL Advent 2011 has come to an end. I had lots of fun writing these but I wished I started earlier instead of 2 days before December 1, on some days I was really racing against the clock and I feel like I made some posts much shorter than I had in mind initially. But it is what it is, I hope you enjoyed them, maybe I will do this again next year.</p>
<p>Here is a recap of all the 24 SQL Advent 2011 posts.</p>
<p>Day 1: <a href="/index.php/DataMgmt/DBProgramming/MSSQLServer/sql-advent-2011-day-1">Date and time</a><br />
In this post I covered the new date, datetime2 and time datatypes</p>
<p>Day 2: <a href="/index.php/DataMgmt/DBAdmin/MSSQLServerAdmin/sql-advent-2011-day-2">System tables and catalog views</a><br />
In this post we took a look what the replacements are for the all system tables and also gave you a table with the new catalog view/compatibility view equivalent of the old system table</p>
<p>Day 3: <a href="/index.php/DataMgmt/DataDesign/sql-advent-2011-day-3">Partitioning</a><br />
In this post I looked at partitioning in pre sql 2005 days by showing you how to create partitioned views. I also showed you how to user partitioned function in sql 2005 and up</p>
<p>Day 4: <a href="/index.php/DataMgmt/DBProgramming/MSSQLServer/sql-advent-2011-day-4">Schemas</a><br />
In this post I show you what schemas are and how they can help with security and logical grouping of objects</p>
<p>Day 5: <a href="/index.php/DataMgmt/DBProgramming/MSSQLServer/sql-advent-2011-day-5">Common Table Expressions</a><br />
The Common Table Expressions post showed you what Common Table Expressions are and how they can be used to simplify your code</p>
<p>Day 6: <a href="/index.php/DataMgmt/DataDesign/sql-advent-2011-day-6">Windowing functions</a><br />
The Windowing functions post showed you how to do different kinds of rankings</p>
<p>Day 7: <a href="/index.php/DataMgmt/DataDesign/sql-advent-2011-day-7">Crosstab with PIVOT</a><br />
This post was all about pivoting/transposing/crosstabbing data with the PIVOT operator, also was shown how to do it dynamically</p>
<p>Day 8: <a href="/index.php/DataMgmt/DataDesign/sql-advent-2011-day-8">UNPIVOT</a><br />
This post showed you how to use UNPIVOT to get the reversed effect of PIVOT</p>
<p>Day 9: <a href="/index.php/DataMgmt/DataDesign/sql-advent-2011-day-9">Dynamic TOP</a><br />
The dynamic TOP post showed you how to do dynamic TOP without dynamic SQL or SET ROWCOUNT</p>
<p>Day 10: <a href="/index.php/DataMgmt/DBProgramming/MSSQLServer/sql-advent-2011-day-10">Upsert by using the Merge statement</a><br />
This post was all about how to use MERGE to do an UPSERT (Update if it exists otherwise insert)</p>
<p>Day 11: <a href="/index.php/DataMgmt/DataDesign/sql-advent-2011-day-11">DML statements with the OUTPUT clause</a><br />
This post showed the usefulness of the OUTPUT clause</p>
<p>Day 12: <a href="/index.php/DataMgmt/DBProgramming/MSSQLServer/sql-advent-2011-day-12">Table Value Constructor</a><br />
This post showed you how to use Table Value Constructor</p>
<p>Day 13: <a href="/index.php/DataMgmt/DBAdmin/MSSQLServerAdmin/sql-advent-2011-day-13">DDL Triggers</a><br />
The DDL trigger post showed you how to use DDL triggers and also explained why you might want to use them</p>
<p>Day 14: <a href="/index.php/DataMgmt/DBProgramming/MSSQLServer/sql-advent-2011-day-14">EXCEPT and INTERSECT SET Operations</a><br />
This post was all about the two new SET Operations EXCEPT and INTERSECT </p>
<p>Day 15: <a href="/index.php/DataMgmt/DBProgramming/MSSQLServer/sql-advent-2011-day-15">Joins</a><br />
This post showed you how to use the newer ANSI SQL JOIN syntax and also showed you what was deprecated</p>
<p>Day 16: <a href="/index.php/DataMgmt/DataDesign/sql-advent-2011-day-16">CROSS APPLY and OUTER APPLY</a><br />
Shown was how to use APPLY with derived tables as well as functions</p>
<p>Day 17: <a href="/index.php/DataMgmt/DBProgramming/MSSQLServer/sql-advent-2011-day-17">varchar(max)</a><br />
In this post I showed you why varchar(max) is much better than the text data type</p>
<p>Day 18: <a href="/index.php/DataMgmt/DBProgramming/MSSQLServer/sql-advent-2011-day-18">Table-valued Parameters</a><br />
I showed you how to use Table-valued Parameters to pass around tables</p>
<p>Day 19: <a href="/index.php/DataMgmt/DBAdmin/MSSQLServerAdmin/sql-advent-2011-day-19">Filtered Indexes</a><br />
In this post I showed you how to create a filtered index and why it can be beneficial in your database</p>
<p>Day 20: <a href="/index.php/DataMgmt/DataDesign/sql-advent-2011-day-20">Indexes with Included Columns</a><br />
On this day I showed you how to cover you query by using Indexes with Included Columns</p>
<p>Day 21: <a href="/index.php/DataMgmt/DBProgramming/MSSQLServer/try-catch-sql-advent-2011">TRY CATCH</a><br />
Error handling go better in SQL Server 2005 and I show you how to use TRY CATCH</p>
<p>Day 22: <a href="/index.php/DataMgmt/DataDesign/dynamic-management-views">Dynamic Management Views</a><br />
In this post I show how you can use Dynamic Management Views to get all kinds of information about your server and databases</p>
<p>Day 23: <a href="/index.php/DataMgmt/DBProgramming/MSSQLServer/object_definition-sql-advent-2011-day">OBJECT_DEFINITION</a><br />
The OBJECT_DEFINITION covers ways to get the text of an object and also show you why it is better than sp_helptext or syscomments</p>
<p>Day 24: <a href="/index.php/DataMgmt/DataDesign/index-rebuild-and-reorganize-sql">Index REBUILD and REORGANIZE</a><br />
This post is all about rebuilding and reorganizing(defragmenting) indexes</p>
<p>There are tons of other things that I did not cover, here is just a small list of them</p>
<p>SQLCLR<br />
ServiceBroker<br />
FILESTREAM<br />
Geometry, Geography and HierarchyID data types<br />
Transparent Data Encryption<br />
DB Mirroring<br />
Policy Management<br />
Resource Governor</p>
<p>Tomorrow we will finally look at some new and shiny T-SQL enhancements in SQL Server 2012, I will provide a list of all the new  SQL Server 2012 post I have written in the last 6 months or so</p>
]]></content:encoded>
			<wfw:commentRss>/index.php/datamgmt/datadesign/sql-advent-2011-recap/feed/</wfw:commentRss>
		<slash:comments>0</slash:comments>
		</item>
		<item>
		<title>What Does a Web Developer Need To Know</title>
		<link>/index.php/webdev/uidevelopment/what-does-a-web-developer/</link>
		<comments>/index.php/webdev/uidevelopment/what-does-a-web-developer/#comments</comments>
		<pubDate>Tue, 28 Jun 2011 09:54:00 +0000</pubDate>
		<dc:creator><![CDATA[Eli Weinstock-Herman (tarwn)]]></dc:creator>
				<category><![CDATA[AJAX]]></category>
		<category><![CDATA[Javascript]]></category>
		<category><![CDATA[Server Programming]]></category>
		<category><![CDATA[UI Development]]></category>
		<category><![CDATA[XHTML and CSS]]></category>
		<category><![CDATA[asp.net]]></category>
		<category><![CDATA[competency]]></category>
		<category><![CDATA[css]]></category>
		<category><![CDATA[design]]></category>
		<category><![CDATA[html]]></category>
		<category><![CDATA[javascript]]></category>
		<category><![CDATA[jsp]]></category>
		<category><![CDATA[php]]></category>
		<category><![CDATA[seo]]></category>
		<category><![CDATA[table layout]]></category>
		<category><![CDATA[w3c]]></category>

		<guid isPermaLink="false">/index.php/2011/06/what-does-a-web-developer/</guid>
		<description><![CDATA[What is a web developer? Recently I was involved in a discussion about the skills a web developer is expected to have and how interesting it has been to watch common bad practices (like table layout and SQL injection) continue to spread. So in the nature of Denis's What does a SQL Server developer need to know? post, I present the web developer breakdown.]]></description>
				<content:encoded><![CDATA[<p>What is a web developer? Recently I was involved in a discussion about the skills a web developer is expected to have and how interesting it has been to watch common bad practices (like table layout and SQL injection) continue to spread. So in the nature of Denis&#8217;s <a href="/index.php/DataMgmt/DBProgramming/MSSQLServer/what-does-a-sql-server" title="Read Denis's post">What does a SQL Server developer need to know?</a> post, I present the web developer breakdown.</p>
<h2>What Level Am I?</h2>
<p>Rather than try and attach years of experience to this scale, I&#8217;m going to present a list of major areas and skills, questions, or topics in each area. I&#8217;ve tried to capture whether I feel a skill is required to be an Intermediate or Advanced web developer. </p>
<p>I put this list together based on my own experience, 20-30 web developer interview lists, and some feedback from others.</p>
<p>Beginner: Knows some of the items on the list<br />
Intermediate: Knows most intermediate items and some advanced<br />
Advanced: Knows almost everything on the list</p>
<style>
.oneshottable { border: 1px solid #444444; border-collapse: collapse; width: 100%; margin-bottom: 12px; }
.oneshottable th { background-color: #444444; color: white; text-transform: uppercase; font-weight: bold; padding: 4px;font-size: 90%; }
.oneshottable td{ padding: 1px 2px; min-width: 20px; border-bottom: 1px solid #999999; font-size: 80%;}
.oneshottable td.summary:first-child{ text-align: left; font-weight: normal; padding: 3px;}
.oneshottable td:first-child{ text-align: center; font-weight: bold }
</style>
<table class="oneshottable">
<tbody>
<tr>
<th colspan="2">HTML</th>
</tr>
<tr>
<td colspan="2" class="summary">The ability to produce clean, valid, maintainable HTML is critical for a web developer. Current standards include HTML 4.01 (1999), XHTML 1 (2000), and the beginning of HTML 5 (2011)</td>
</tr>
<tr>
<td>I</td>
<td>The effect of doctypes, can code a mostly valid site without looking up the rules</td>
</tr>
<tr>
<td>A</td>
<td>The effect of content-types and how to set or debug them</td>
</tr>
<tr>
<td>I</td>
<td>Knows (and use) all of these without looking them up:  html, head, title, meta, script, style, link, body, a, strong, em, ul, ol, li, table, tr, th, td, h1-5, input, select, option, img, p, span, div, pre, textarea</td>
</tr>
<tr>
<td>A</td>
<td>And most of these: dl/dt/dd, thead, tbody, tfoot, abbr, acronym, applet, object, blockquote, iframe, label, map, optgroup, sup, sub, base, fieldset</td>
</tr>
<tr>
<td>A</td>
<td>Can name/explain at least 15 of the new HTML5 tags</td>
</tr>
<tr>
<td>I</td>
<td>Knows the escapes for &amp;, &lt;, &gt;, &copy;, ASCII characters (though you may have to look up the character code)</td>
</tr>
<tr>
<td>A</td>
<td>Can explain how HTTP works (headers, redirects, header requests, clientside caching)</td>
</tr>
<tr>
<td>I</td>
<td>Knows how to link to a position in a page</td>
</tr>
</tbody>
</table>
<table class="oneshottable">
<tbody>
<tr>
<th colspan="2">CSS</th>
</tr>
<tr>
<td colspan="2" class="summary">Cascading Style Sheets are used to describe the way an HTML documented should be presented. CSS 1 was released in 1996 and the latest published recommendation is CSS 3. </td>
</tr>
<tr>
<td>I</td>
<td>Difference between display inline, block, and inline-block and what the default value is for div, span, a, b</td>
</tr>
<tr>
<td>I</td>
<td>Difference between position static, relative, fixed, absolute</td>
</tr>
<tr>
<td>I</td>
<td>What z-index is and how to use it</td>
</tr>
<tr>
<td>A</td>
<td>How z-index is calculated by individual browsers</td>
</tr>
<tr>
<td>I</td>
<td>Difference between padding and margin</td>
</tr>
<tr>
<td>I</td>
<td>Difference between display: none and visibility: hidden</td>
</tr>
<tr>
<td>I</td>
<td>Purpose and use of &#8220;media&#8221;</td>
</tr>
<tr>
<td>I</td>
<td>Able to describe and calculate specificity</td>
</tr>
<tr>
<td>I</td>
<td>Knows at least a few attribute selectors</td>
</tr>
<tr>
<td>A</td>
<td>Can describe pseudo-classes and know many without looking them up</td>
</tr>
</tbody>
</table>
<table class="oneshottable">
<tbody>
<tr>
<th colspan="2">Javascript</th>
</tr>
<tr>
<td colspan="2" class="summary">Javascript has become the defacto scripting language for web browsers, one of only a few ways to create client-side interactions consistently across available browsers. JavaScript was first shipped in 1995 as part of the Netscape browser.</td>
</tr>
<tr>
<td>I</td>
<td>How to write a basic function, inline event handler, and a non-inline event handler (raw or w/ a package)</td>
</tr>
<tr>
<td>I</td>
<td>Can write one or or more methods to make an AJAX call with reference material</td>
</tr>
<tr>
<td>A</td>
<td>Can write one or or more methods to make an AJAX call without reference material</td>
</tr>
<tr>
<td>I</td>
<td>Knows at least one framework (jQuery, Prototype, YUI, Dojo, MooTools, …)</td>
</tr>
<tr>
<td>I</td>
<td>Can create classes (function or literal)</td>
</tr>
<tr>
<td>A</td>
<td>Knows and can use prototype (little &#8216;p&#8217;, not the framework)</td>
</tr>
<tr>
<td>I</td>
<td>Can dynamically find and add elements to the page using DOM or a framework (without looking it up)</td>
</tr>
</tbody>
</table>
<table class="oneshottable">
<tbody>
<tr>
<th colspan="2">Tools</th>
</tr>
<tr>
<td colspan="2" class="summary">Along with standard languages, there are numerous tools available to help validate, evaluate, and improve existing websites. Similar to a spell-checking tool in a word processing application, these tools can help us catch errors and oversights in our websites.</td>
</tr>
<tr>
<td>A</td>
<td>Can name at least one site, application, or organization that has an HTML validation tool</td>
</tr>
<tr>
<td>A</td>
<td>Can name at least one site, application, or organization that has an CSS validation tool</td>
</tr>
<tr>
<td>A</td>
<td>Can name at least one site, application, or organization that has an SEO scoring tool</td>
</tr>
<tr>
<td>A</td>
<td>Can name at least one site, application, or organization that has an Accessibility evaluation tool</td>
</tr>
</tbody>
</table>
<table class="oneshottable">
<tbody>
<tr>
<th colspan="2">Server-Side Programming</th>
</tr>
<tr>
<td colspan="2" class="summary">The shift to dynamic, server-generated websites in the mid-to-late 90&#8217;s was responsible for shifting the focus of the web from document retrieval to interactivity, commerce, and services.</td>
</tr>
<tr>
<td>I</td>
<td>Knows at least 2 server-side technologies &#8211; Perl, PHP, ASP 3, JSP, Java Servlets, CFM, ASP.Net (WebPages, Web Forms, MVC), Ruby on Rails, Python (WSGI, CGI, mod_python), etc</td>
</tr>
<tr>
<td>A</td>
<td>Knows more than 4 of the above list</td>
</tr>
<tr>
<td>I</td>
<td>Can explain difference between stateful and stateless development</td>
</tr>
<tr>
<td>I</td>
<td>Can explain how sessions work</td>
</tr>
<tr>
<td>I</td>
<td>Can explain how cookies work</td>
</tr>
<tr>
<td>I</td>
<td>Difference between GET and POST and how known languages present this information</td>
</tr>
<tr>
<td>I</td>
<td>Pros and cons of client-side vs server-side validation</td>
</tr>
<tr>
<td>A</td>
<td>Understands the basics of (SOAP) web services, how to implement them, and how they work</td>
</tr>
</tbody>
</table>
<table class="oneshottable">
<tbody>
<tr>
<th colspan="2">Data</th>
</tr>
<tr>
<td colspan="2" class="summary">Most web applications have some form of data store behind them. Several forms of storage and caching mechanisms exist and being able to build a basic system often requires at least a basic level of knowledge in these areas.</td>
</tr>
<tr>
<td>I</td>
<td>Can build databases, define queries, and debug on at least one major RDBMS</td>
</tr>
<tr>
<td>A</td>
<td>Knows basics for normalization and can create a basic data model to describe their database</td>
</tr>
<tr>
<td>I</td>
<td>Can work with at least one NoSQL database or data cache</td>
</tr>
<tr>
<td>I</td>
<td>Can write match and search regular expressions</td>
</tr>
<tr>
<td>A</td>
<td>Can write match and search regular expressions without a reference in more than one language</td>
</tr>
</tbody>
</table>
<table class="oneshottable">
<tbody>
<tr>
<th colspan="2">Web Server</th>
</tr>
<tr>
<td colspan="2" class="summary">Using a server-side technology to generate HTML generally requires a web server. The two largest install bases are Microsoft IIS 7.5 and Apache 2.2.</td>
</tr>
<tr>
<td>I</td>
<td>Understands the basics of how the web server (Apache or IIS) works and can create a new site</td>
</tr>
<tr>
<td>A</td>
<td>Can explain URL rewriting and implement on at least one system</td>
</tr>
</tbody>
</table>
<table class="oneshottable">
<tbody>
<tr>
<th colspan="2">Performance</th>
</tr>
<tr>
<td colspan="2" class="summary">Tuning a website to run in an optimal fashion can sometimes be the difference between paying for a single server or multiple servers, between a responsive site and one that fails under load. </td>
</tr>
<tr>
<td>A</td>
<td>Understands and can implement data caching</td>
</tr>
<tr>
<td>A</td>
<td>Understands and can implement page caching</td>
</tr>
<tr>
<td>A</td>
<td>Can use one or more page performance or load testing tools</td>
</tr>
<tr>
<td>I</td>
<td>Tools/methods and purpose of minification of JS and CSS</td>
</tr>
<tr>
<td>A</td>
<td>Understands and uses CDNs when possible</td>
</tr>
</tbody>
</table>
<table class="oneshottable">
<tbody>
<tr>
<th colspan="2">Testing</th>
</tr>
<tr>
<td colspan="2" class="summary">As the technology behind the web has developed, tools to help automate some of the repetition involved in testing websites has likewise evolved.</td>
</tr>
<tr>
<td>A</td>
<td>Can use one or more automated tools for interface testing</td>
</tr>
</tbody>
</table>
<table class="oneshottable">
<tbody>
<tr>
<th colspan="2">Security</th>
</tr>
<tr>
<td colspan="2" class="summary">As recent news stories have reminded us, security is an ongoing requirement for websites. Understanding the basics of security can help us build security in from day one rather than trying to squeeze it in at the end.</td>
</tr>
<tr>
<td>I</td>
<td>SQL Injection &#8211; what it is, how to prevent it</td>
</tr>
<tr>
<td>I</td>
<td>Cross site scripting &#8211; what it is, how to prevent it</td>
</tr>
<tr>
<td>A</td>
<td>Cross Site Request Forgery &#8211; what it is, how to prevent it</td>
</tr>
<tr>
<td>I</td>
<td>Understand hashing, salting, and importance of storing critical information in hashed or encrypted formats</td>
</tr>
<tr>
<td>I</td>
<td>Cookies &#8211; Understand session hijacking and dangers of storing user information or identification</td>
</tr>
</tbody>
</table>
<table class="oneshottable">
<tbody>
<tr>
<th colspan="2">Design Principles</th>
</tr>
<tr>
<td colspan="2" class="summary">Being able to implement common design patterns without restoring to hacks is an important part of being a web developer (as opposed to a hobbiest). While it may prove impossible to build a site without some form of hack, hacks should not be the only tool in the toolbox.</td>
</tr>
<tr>
<td>I</td>
<td>Table Layout &#8211; what it is, why it&#8217;s bad (at least three reasons)</td>
</tr>
<tr>
<td>A</td>
<td>Can implement multi-column fixed, fluid, and elastic layouts without reference material</td>
</tr>
<tr>
<td>A</td>
<td>Table Layout &#8211; and why using CSS for table layout (display: table, table-cell, etc) is not bad</td>
</tr>
<tr>
<td>A</td>
<td>Can explain and implement fixed, fluid (liquid), and elastic layouts</td>
</tr>
<tr>
<td>A</td>
<td>Can implement multi-column fixed, fluid, and elastic layouts without reference material</td>
</tr>
</tbody>
</table>
<table class="oneshottable">
<tbody>
<tr>
<th colspan="2">Meta</th>
</tr>
<tr>
<td colspan="2" class="summary">Metadata (data about data) is critical to helping people and search engines find resources in our sites and applications.</td>
</tr>
<tr>
<td>I</td>
<td>Knows purpose of description, keyword tags</td>
</tr>
<tr>
<td>I</td>
<td>Knows purpose of robots.txt file</td>
</tr>
<tr>
<td>A</td>
<td>Knows purpose and can implement sitemap.xml file</td>
</tr>
<tr>
<td>A</td>
<td>You know the basics for SEO</td>
</tr>
<tr>
<td>A</td>
<td>You&#8217;ve implemented some form of browser analytics</td>
</tr>
<tr>
<td>A</td>
<td>Microformats </td>
</tr>
<tr>
<td>A</td>
<td>You know what WCAG is and how to test conformance</td>
</tr>
<tr>
<td>A</td>
<td>You know what semantic markup is</td>
</tr>
</tbody>
</table>
<table class="oneshottable">
<tbody>
<tr>
<th colspan="2">Disqualifiers/Limiters</th>
</tr>
<tr>
<td colspan="2" class="summary">These are topics I consider to be critical to advancement. They reflect common misunderstandings or bad practices that an experienced web developer has to grow past in order to advance their skillset.</td>
</tr>
<tr>
<td>B</td>
<td>Backbutton doesn&#8217;t work w/ your sites, would prefer to disable it altogether</td>
</tr>
<tr>
<td>B</td>
<td>You protect images from download by implementing right click intercepts, layering transparent images in top, etc</td>
</tr>
<tr>
<td>I</td>
<td>Implement performance tuning without before/after measurements</td>
</tr>
<tr>
<td>B</td>
<td>Table layout</td>
</tr>
</tbody>
</table>
<p><em>Note: Disqualifiers indicate that you won&#8217;t progress past [B]eginner or [I]ntermediate levels until you stop doing them and understand why doing them was a bad idea</em></p>
<h2>What&#8217;s Missing</h2>
<p>There are several things that were intentionally left out of this list. Some were hard to quantity in a general manner, others I was unsure how relevant they were. And I&#8217;m sure people will be kind enough to add additional oversights and revisions below.</p>
<p>Missing Categories:</p>
<ul>
<li>Level of knowledge with server-side languages</li>
<li>Project management skills</li>
<li>Documentation and Modeling skills</li>
<li>Design and Graphics skills</li>
<li>Application Lifecycle Management &#8211; Source Control, Deployment, etc</li>
</ul>
<p>Extra items that didn&#8217;t make it in:</p>
<ul>
<li>Can implement RSS and ATOM feeds</li>
<li>Can implement a web farm</li>
<li>Implemented single-signon (openID, SAML, etc)</li>
<li>Knows how to implement XML data islands (still relevant?)</li>
<li>Knows how to create DTDs and/or XSDs</li>
<li>Can write regular expressions without a reference</li>
<li>Knows relevant tools for Yahoo (SiteExplorer), Google, Bing for managing site information</li>
<li>Schema.org &#8211; it belongs in the Meta category but I didn&#8217;t know what level of skill, knowledge, or adoption I should include considering it&#8217;s newness and several other factors</li>
</ul>
<p>There is also the fact that we often get caught up maintaining or even adding on to a site that violates many of the skills and standards you see in this list. This doesn&#8217;t prevent us from writing good, clean, semantic sites the rest of the time and being forced to write poor code does not make on inherently less skilled.</p>
<h2>A Brief Digression, or Why an App Dev is Not a Web Dev</h2>
<p>At one point web development was seen as less exciting and far less complex than application development. It is still seen as extremely similar to application development, so much so that it is quite normal to hire a good or great application developer and expect them to be a good or great web developer. </p>
<p>Unfortunately it doesn&#8217;t quite work that way, as web development has grown extremely complex since the first dynamic sites started showing up in the late 90&#8217;s. Doubly unfortunately, web development is based on a stateless model instead of the stateful one most application developers are used to, uses a fluid layout instead of the grid layout, and sneaks a lot of extra communications and caching into the mix. This is a series of paradigm shifts not unlike the one between procedural, object oriented, and functional programming.</p>
]]></content:encoded>
			<wfw:commentRss>/index.php/webdev/uidevelopment/what-does-a-web-developer/feed/</wfw:commentRss>
		<slash:comments>9</slash:comments>
		</item>
		<item>
		<title>Use a database how it was intended to be used</title>
		<link>/index.php/datamgmt/datadesign/use-a-database-how-it/</link>
		<comments>/index.php/datamgmt/datadesign/use-a-database-how-it/#comments</comments>
		<pubDate>Mon, 04 Apr 2011 23:40:00 +0000</pubDate>
		<dc:creator><![CDATA[SQLDenis]]></dc:creator>
				<category><![CDATA[Data Modelling and Design]]></category>
		<category><![CDATA[Database Programming]]></category>
		<category><![CDATA[Microsoft SQL Server]]></category>
		<category><![CDATA[design]]></category>
		<category><![CDATA[normalization]]></category>

		<guid isPermaLink="false">/index.php/2011/04/use-a-database-how-it/</guid>
		<description><![CDATA[Take a look at this piece of junk code, what pops up in your head when you look at this
CREATE FUNCTION [dbo].[age](@set varchar(10))
RETURNS TABLE
AS
BEGIN
    IF  (@set = 'tall')
         SELECT * from player where height &#62; 180
    ELSE IF (&#8230;]]></description>
				<content:encoded><![CDATA[<p>Take a look at this piece of <del>junk</del> code, what pops up in your head when you look at this?</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
</pre></td><td class="de1"><pre class="de1"><span class="kw1">CREATE</span> <span class="kw1">FUNCTION</span> <span class="br0">&#91;</span>dbo<span class="br0">&#93;</span>.<span class="br0">&#91;</span>age<span class="br0">&#93;</span><span class="br0">&#40;</span>@<span class="kw1">set</span> <span class="kw1">varchar</span><span class="br0">&#40;</span><span class="nu0">10</span><span class="br0">&#41;</span><span class="br0">&#41;</span>
<span class="kw1">RETURNS</span> <span class="kw1">TABLE</span>
<span class="kw1">AS</span>
<span class="kw1">BEGIN</span>
&nbsp; &nbsp; <span class="kw1">IF</span> &nbsp;<span class="br0">&#40;</span>@<span class="kw1">set</span> <span class="sy0">=</span> <span class="st0">'tall'</span><span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span class="kw1">SELECT</span> <span class="sy0">*</span> <span class="kw1">from</span> player <span class="kw1">where</span> height <span class="sy0">&gt;</span> <span class="nu0">180</span>
&nbsp; &nbsp; <span class="kw1">ELSE</span> <span class="kw1">IF</span> <span class="br0">&#40;</span>@<span class="kw1">set</span> <span class="sy0">=</span> <span class="st0">'average'</span><span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span class="kw1">SELECT</span> <span class="sy0">*</span> <span class="kw1">from</span> player <span class="kw1">where</span> height <span class="sy0">&gt;=</span> <span class="nu0">155</span> and height <span class="sy0">&lt;=</span><span class="nu0">175</span>
&nbsp; &nbsp; <span class="kw1">ELSE</span> <span class="kw1">IF</span> <span class="br0">&#40;</span>@<span class="kw1">set</span> <span class="sy0">=</span> <span class="st0">'low'</span><span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span class="kw1">SELECT</span> <span class="sy0">*</span> <span class="kw1">from</span> player <span class="kw1">where</span> height <span class="sy0">&lt;</span> <span class="nu0">155</span>
<span class="kw1">END</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">CREATE FUNCTION [dbo].[age](@set varchar(10))
RETURNS TABLE
AS
BEGIN
    IF  (@set = 'tall')
         SELECT * from player where height &gt; 180
    ELSE IF (@set = 'average')
         SELECT * from player where height &gt;= 155 and height &lt;=175
    ELSE IF (@set = 'low')
         SELECT * from player where height &lt; 155
END</pre></div></div>

<p>If you are thinking <em>silly you, you can&#8217;t have an IF statement like that in a function</em>, then you have disappointed me. What you really should be saying is the following: <a href="http://stackoverflow.com/questions/5544269/tsql-if-else-statement-inside-table-valued-functions-cant-go-through/5544320#5544320">why are you hardcoding this, create a heights table and then grab all the heights that are valid for the range</a></p>
<p>Yes, I grabbed this example from the following question: <a href="http://stackoverflow.com/questions/5544269/tsql-if-else-statement-inside-table-valued-functions-cant-go-through">TSQL &#8211; If..Else statement inside Table-Valued Functions &#8211; cant go through…</a>. As you can see several people answered with how to use a CASE statement instead. That is all nice and dandy but the information should be in a table instead</p>
<h1>Single Source of Truth</h1>
<p>The thing that is wrong with that piece of code posted is not the fact that the IF statement doesn&#8217;t work but the fact that a table was not used to store the info. If you are using a table then you can populate a drop down in a form, use the table in  the function, in other procedures, views etc etc. If you need to make a change, you do it in one place and one place only. </p>
<p>This is a very important thing to understand, if you have the same information from 10 different sources all over the place hen when you need to make a change you are bound to make mistakes. Can you imagine if you need to store tax information, having this hardcoded like that? That is insanity.</p>
<p>It is not difficult to create such a table.<br />
Here is a sample table</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
</pre></td><td class="de1"><pre class="de1"><span class="kw1">CREATE</span> <span class="kw1">TABLE</span> Heights <span class="br0">&#40;</span>&nbsp; 
&nbsp; &nbsp; HeightId <span class="kw1">int</span> <span class="kw1">primary</span> <span class="kw1">key</span> not null,
&nbsp; &nbsp; HeightDescription <span class="kw1">varchar</span><span class="br0">&#40;</span><span class="nu0">20</span><span class="br0">&#41;</span> not null,
&nbsp; &nbsp; StartRange <span class="kw1">smallint</span> not null,
&nbsp; &nbsp; EndRange <span class="kw1">smallint</span> not null<span class="br0">&#41;</span>
GO</pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">CREATE TABLE Heights (	
	HeightId int primary key not null,
	HeightDescription varchar(20) not null,
	StartRange smallint not null,
	EndRange smallint not null)
GO</pre></div></div>

<p>Now let&#8217;s insert some data</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
</pre></td><td class="de1"><pre class="de1"><span class="kw1">INSERT</span> Heights <span class="kw1">values</span><span class="br0">&#40;</span><span class="nu0">1</span>,<span class="st0">'Small'</span>,<span class="nu0">0</span>,<span class="nu0">154</span><span class="br0">&#41;</span>
<span class="kw1">INSERT</span> Heights <span class="kw1">values</span><span class="br0">&#40;</span><span class="nu0">2</span>,<span class="st0">'Average'</span>,<span class="nu0">155</span>,<span class="nu0">175</span><span class="br0">&#41;</span>
<span class="kw1">INSERT</span> Heights <span class="kw1">values</span><span class="br0">&#40;</span><span class="nu0">3</span>,<span class="st0">'Tall'</span>,<span class="nu0">176</span>,<span class="nu0">300</span><span class="br0">&#41;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">INSERT Heights values(1,'Small',0,154)
INSERT Heights values(2,'Average',155,175)
INSERT Heights values(3,'Tall',176,300)</pre></div></div>

<p>Now if I want to know if 181 centimeters is considered tall or not, I can run this</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
</pre></td><td class="de1"><pre class="de1"><span class="kw1">SELECT</span> HeightDescription
<span class="kw1">FROM</span> Heights
<span class="kw1">WHERE</span> <span class="nu0">181</span> between StartRange and EndRange</pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">SELECT HeightDescription
FROM Heights
WHERE 181 between StartRange and EndRange</pre></div></div>

<p>Let&#8217;s continue by adding another table, this table will have some people and their height. </p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
</pre></td><td class="de1"><pre class="de1"><span class="kw1">CREATE</span> <span class="kw1">TABLE</span> Players<span class="br0">&#40;</span>Player <span class="kw1">varchar</span><span class="br0">&#40;</span><span class="nu0">200</span><span class="br0">&#41;</span>,Height <span class="kw1">smallint</span><span class="br0">&#41;</span>
GO</pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">CREATE TABLE Players(Player varchar(200),Height smallint)
GO</pre></div></div>

<p>The following people are the shortest and tallest people on record</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
</pre></td><td class="de1"><pre class="de1"><span class="kw1">INSERT</span> Players <span class="kw1">values</span><span class="br0">&#40;</span><span class="st0">'Robert Wadlow'</span>,<span class="nu0">272</span><span class="br0">&#41;</span>
<span class="kw1">INSERT</span> Players <span class="kw1">values</span><span class="br0">&#40;</span><span class="st0">'John Rogan'</span>,<span class="nu0">267</span><span class="br0">&#41;</span>
<span class="kw1">INSERT</span> Players <span class="kw1">values</span><span class="br0">&#40;</span><span class="st0">'June Rey Balawing'</span>,<span class="nu0">56</span><span class="br0">&#41;</span>
<span class="kw1">INSERT</span> Players <span class="kw1">values</span><span class="br0">&#40;</span><span class="st0">'Gul Mohammed'</span>,<span class="nu0">57</span><span class="br0">&#41;</span>
<span class="kw1">INSERT</span> Players <span class="kw1">values</span><span class="br0">&#40;</span><span class="st0">'Pauline Musters'</span>,<span class="nu0">58</span><span class="br0">&#41;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">INSERT Players values('Robert Wadlow',272)
INSERT Players values('John Rogan',267)
INSERT Players values('June Rey Balawing',56)
INSERT Players values('Gul Mohammed',57)
INSERT Players values('Pauline Musters',58)</pre></div></div>

<p>Now when I want to list all the tall people, my query looks like this</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
</pre></td><td class="de1"><pre class="de1"><span class="kw1">SELECT</span> p.<span class="sy0">*</span> 
<span class="kw1">FROM</span> Players p 
<span class="sy0">JOIN</span> Heights h <span class="kw1">on</span> p.<span class="me1">Height</span> between h.<span class="me1">StartRange</span> and h.<span class="me1">EndRange</span>
<span class="kw1">where</span> h.<span class="me1">HeightDescription</span> <span class="sy0">=</span> <span class="st0">'Tall'</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">SELECT p.* 
FROM Players p 
JOIN Heights h on p.Height between h.StartRange and h.EndRange
where h.HeightDescription = 'Tall'</pre></div></div>

<p>When I want to list all the tall people, my query looks like this</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
</pre></td><td class="de1"><pre class="de1"><span class="kw1">SELECT</span> p.<span class="sy0">*</span> 
<span class="kw1">FROM</span> Players p 
<span class="sy0">JOIN</span> Heights h <span class="kw1">on</span> p.<span class="me1">Height</span> between h.<span class="me1">StartRange</span> and h.<span class="me1">EndRange</span>
<span class="kw1">where</span> h.<span class="me1">HeightDescription</span> <span class="sy0">=</span> <span class="st0">'Small'</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">SELECT p.* 
FROM Players p 
JOIN Heights h on p.Height between h.StartRange and h.EndRange
where h.HeightDescription = 'Small'</pre></div></div>

<p>If tomorrow I decide that tall people have to be taller than 180 centimeters, I only have to change this in 1 place. This is much cleaner and also easily maintainable.</p>
<p>P.S.<br />
Yes, I know, instead of having a player column I should have at least first and last name columns (preferably in a person table) but in the day and age of internet induced ADD I didn&#8217;t feel it would add anything to the point I was trying to make in this post&#8230;&#8230;so forgive me</p>
<p>*** <strong>Remember, if you have a SQL related question, try our <a href="http://forum.lessthandot.com/viewforum.php?f=17">Microsoft SQL Server Programming</a> forum or our <a href="http://forum.lessthandot.com/viewforum.php?f=22">Microsoft SQL Server Admin</a> forum</strong><ins></ins></p>
]]></content:encoded>
			<wfw:commentRss>/index.php/datamgmt/datadesign/use-a-database-how-it/feed/</wfw:commentRss>
		<slash:comments>11</slash:comments>
		</item>
		<item>
		<title>Use alter table alter column to change datatypes for a column in SQL Server</title>
		<link>/index.php/datamgmt/datadesign/use-alter-table-alter-column-to-change-d/</link>
		<comments>/index.php/datamgmt/datadesign/use-alter-table-alter-column-to-change-d/#respond</comments>
		<pubDate>Tue, 19 Jan 2010 16:10:48 +0000</pubDate>
		<dc:creator><![CDATA[SQLDenis]]></dc:creator>
				<category><![CDATA[Data Modelling and Design]]></category>
		<category><![CDATA[Database Administration]]></category>
		<category><![CDATA[Database Programming]]></category>
		<category><![CDATA[Microsoft SQL Server]]></category>
		<category><![CDATA[Microsoft SQL Server Admin]]></category>
		<category><![CDATA[database]]></category>
		<category><![CDATA[design]]></category>
		<category><![CDATA[how to]]></category>
		<category><![CDATA[sql server 2000]]></category>
		<category><![CDATA[sql server 2005]]></category>
		<category><![CDATA[sql server 2008]]></category>
		<category><![CDATA[tables]]></category>

		<guid isPermaLink="false">/index.php/2010/01/use-alter-table-alter-column-to-change-d/</guid>
		<description><![CDATA[This question popped in the microsoft.public.sqlserver.programming forum yesterday. A person wanted to change a column from varchar 500 to varchar 2000. This is actually pretty easy to do in SQL Server, you can use the alter table alter column command Let&#8217;s take a quick look at how this works First create this table T-SQL1 2 [&#8230;]]]></description>
				<content:encoded><![CDATA[<p>This question popped in the<a href="http://groups.google.com/group/microsoft.public.sqlserver.programming/browse_thread/thread/91c5da9982cfb1cf?hl=en#"> microsoft.public.sqlserver.programming</a> forum yesterday. A person wanted to change a column from varchar 500 to varchar 2000. This is actually pretty easy to do in SQL Server, you can use the <em>alter table alter column</em> command<br />
Let&#8217;s take a quick look at how this works<br />
First create this table</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
</pre></td><td class="de1"><pre class="de1"><span class="kw1">CREATE</span> <span class="kw1">TABLE</span> <span class="br0">&#91;</span>TestTable<span class="br0">&#93;</span> <span class="br0">&#40;</span>
<span class="br0">&#91;</span>id<span class="br0">&#93;</span> <span class="br0">&#91;</span><span class="kw1">int</span><span class="br0">&#93;</span> <span class="kw1">IDENTITY</span> <span class="br0">&#40;</span><span class="nu0">1</span>, <span class="nu0">1</span><span class="br0">&#41;</span> <span class="sy0">NOT</span> <span class="sy0">NULL</span> ,
<span class="br0">&#91;</span>itemdate<span class="br0">&#93;</span> <span class="br0">&#91;</span><span class="kw1">datetime</span><span class="br0">&#93;</span> <span class="sy0">NOT</span> <span class="sy0">NULL</span> ,
<span class="br0">&#91;</span>title<span class="br0">&#93;</span> <span class="br0">&#91;</span><span class="kw1">varchar</span><span class="br0">&#93;</span> <span class="br0">&#40;</span><span class="nu0">500</span><span class="br0">&#41;</span> <span class="sy0">NOT</span> <span class="sy0">NULL</span> ,
<span class="br0">&#41;</span> <span class="kw1">ON</span> <span class="br0">&#91;</span><span class="kw1">PRIMARY</span><span class="br0">&#93;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">CREATE TABLE [TestTable] (
[id] [int] IDENTITY (1, 1) NOT NULL ,
[itemdate] [datetime] NOT NULL ,
[title] [varchar] (500) NOT NULL ,
) ON [PRIMARY]</pre></div></div>

<p>Now insert one row of data</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
</pre></td><td class="de1"><pre class="de1"><span class="kw1">insert</span> <span class="br0">&#91;</span>TestTable<span class="br0">&#93;</span>
<span class="kw1">select</span> <span class="kw2">getdate</span><span class="br0">&#40;</span><span class="br0">&#41;</span>,<span class="st0">'bla'</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">insert [TestTable]
select getdate(),'bla'</pre></div></div>

<p>Now do a simple select and verify that you have one row of data</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
</pre></td><td class="de1"><pre class="de1"><span class="kw1">select</span> <span class="sy0">*</span> <span class="kw1">from</span> <span class="br0">&#91;</span>TestTable<span class="br0">&#93;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">select * from [TestTable]</pre></div></div>

<p>Results</p>
<pre>id          itemdate                title
----------- ----------------------- ----------
1           2010-01-18 17:28:19.820 bla</pre>
<p>We will change the column from varchar 500 to varchar 2000. All you have to do is alter table [table name] alter column [column name] [new data type and length]<br />
So in this case the command would look like this</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
</pre></td><td class="de1"><pre class="de1"><span class="kw1">alter</span> <span class="kw1">table</span> <span class="br0">&#91;</span>TestTable<span class="br0">&#93;</span> <span class="kw1">alter</span> <span class="kw1">column</span> <span class="br0">&#91;</span>title<span class="br0">&#93;</span> <span class="br0">&#91;</span><span class="kw1">varchar</span><span class="br0">&#93;</span> <span class="br0">&#40;</span><span class="nu0">2000</span><span class="br0">&#41;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">alter table [TestTable] alter column [title] [varchar] (2000)</pre></div></div>

<p>To verify that indeed the column is now varchar 2000 run the following query</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
</pre></td><td class="de1"><pre class="de1"><span class="kw1">select</span> COLUMN_NAME,DATA_TYPE,CHARACTER_MAXIMUM_LENGTH
<span class="kw1">from</span> <span class="sy0">IN</span>F<span class="sy0">OR</span>MATION_SCHEMA.<span class="me1">COLUMNS</span>
<span class="kw1">where</span> table_name <span class="sy0">=</span> <span class="st0">'TestTable'</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">select COLUMN_NAME,DATA_TYPE,CHARACTER_MAXIMUM_LENGTH
from INFORMATION_SCHEMA.COLUMNS
where table_name = 'TestTable'</pre></div></div>

<p>Results</p>
<pre>COLUMN_NAME    DATA_TYPE       CHARACTER_MAXIMUM_LENGTH
-------------- -----------------------------------------
id              int             NULL
itemdate        datetime        NULL
title           varchar         2000</pre>
<p>Now let&#8217;s change the datetime column to a varchar, execute the following query</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
</pre></td><td class="de1"><pre class="de1"><span class="kw1">alter</span> <span class="kw1">table</span> <span class="br0">&#91;</span>TestTable<span class="br0">&#93;</span> <span class="kw1">alter</span> <span class="kw1">column</span> <span class="br0">&#91;</span>itemdate<span class="br0">&#93;</span> <span class="br0">&#91;</span><span class="kw1">varchar</span><span class="br0">&#93;</span> <span class="br0">&#40;</span><span class="nu0">49</span><span class="br0">&#41;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">alter table [TestTable] alter column [itemdate] [varchar] (49)</pre></div></div>

<p>Now verify that it was changed</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
</pre></td><td class="de1"><pre class="de1"><span class="kw1">select</span> COLUMN_NAME,DATA_TYPE,CHARACTER_MAXIMUM_LENGTH
<span class="kw1">from</span> <span class="sy0">IN</span>F<span class="sy0">OR</span>MATION_SCHEMA.<span class="me1">COLUMNS</span>
<span class="kw1">where</span> table_name <span class="sy0">=</span> <span class="st0">'TestTable'</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">select COLUMN_NAME,DATA_TYPE,CHARACTER_MAXIMUM_LENGTH
from INFORMATION_SCHEMA.COLUMNS
where table_name = 'TestTable'</pre></div></div>

<p>Results</p>
<pre>COLUMN_NAME    DATA_TYPE       CHARACTER_MAXIMUM_LENGTH
-------------- -----------------------------------------
id              int             NULL
itemdate        varchar         49
title           varchar         2000</pre>
<p>Insert a new row</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
</pre></td><td class="de1"><pre class="de1"><span class="kw1">insert</span> <span class="br0">&#91;</span>TestTable<span class="br0">&#93;</span>
<span class="kw1">select</span> <span class="kw2">getdate</span><span class="br0">&#40;</span><span class="br0">&#41;</span>,<span class="st0">'bla'</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">insert [TestTable]
select getdate(),'bla'</pre></div></div>

<p>Now check what is in the table</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
</pre></td><td class="de1"><pre class="de1"><span class="kw1">select</span> <span class="sy0">*</span> <span class="kw1">from</span> <span class="br0">&#91;</span>TestTable<span class="br0">&#93;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">select * from [TestTable]</pre></div></div>

<p>Results</p>
<pre>id          itemdate                                          title
----------- ------------------------------------------------- -----------
1           Jan 18 2010  5:28PM                               bla
2           Jan 18 2010  5:30PM                               bla</pre>
<p>Now we will add a column. The command to add a column is very similar to the one where you alter a column, the difference is that you don&#8217;t use the column keyword. Below is a query that will add an int column with a default of 0</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
</pre></td><td class="de1"><pre class="de1"><span class="kw1">alter</span> <span class="kw1">table</span> <span class="br0">&#91;</span>TestTable<span class="br0">&#93;</span> <span class="kw1">add</span> &nbsp;<span class="br0">&#91;</span>SomeInt<span class="br0">&#93;</span> <span class="kw1">int</span> <span class="kw1">default</span> <span class="nu0">0</span> not null</pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">alter table [TestTable] add  [SomeInt] int default 0 not null</pre></div></div>

<p>Run this query to see what is in the table now</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
</pre></td><td class="de1"><pre class="de1"><span class="kw1">select</span> <span class="sy0">*</span> <span class="kw1">from</span> <span class="br0">&#91;</span>TestTable<span class="br0">&#93;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">select * from [TestTable]</pre></div></div>

<p>Results</p>
<pre>id          itemdate                    title     SomeInt
----------- ---------------------------- ---------- -----------
1           Jan 18 2010  5:28PM         bla       0
2           Jan 18 2010  5:30PM         bla       0</pre>
<p>As you can see the column was added and the default of 0 was used.</p>
<p>We can interrogate the INFORMATION_SCHEMA.COLUMNS view again to verify that the column is there</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
</pre></td><td class="de1"><pre class="de1"><span class="kw1">select</span> COLUMN_NAME,DATA_TYPE,CHARACTER_MAXIMUM_LENGTH
<span class="kw1">from</span> <span class="sy0">IN</span>F<span class="sy0">OR</span>MATION_SCHEMA.<span class="me1">COLUMNS</span>
<span class="kw1">where</span> table_name <span class="sy0">=</span> <span class="st0">'TestTable'</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">select COLUMN_NAME,DATA_TYPE,CHARACTER_MAXIMUM_LENGTH
from INFORMATION_SCHEMA.COLUMNS
where table_name = 'TestTable'</pre></div></div>

<p>Results</p>
<pre>COLUMN_NAME    DATA_TYPE       CHARACTER_MAXIMUM_LENGTH
-------------- -----------------------------------------
id              int             NULL
itemdate        varchar         49
title           varchar         2000
SomeInt		int		NULL</pre>
<p>Now let&#8217;s insert a row, we will use a value of 2 for the newly added SomeInt column</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
</pre></td><td class="de1"><pre class="de1"><span class="kw1">insert</span> <span class="br0">&#91;</span>TestTable<span class="br0">&#93;</span>
<span class="kw1">select</span> <span class="kw2">getdate</span><span class="br0">&#40;</span><span class="br0">&#41;</span>,<span class="st0">'bla'</span>,<span class="nu0">2</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">insert [TestTable]
select getdate(),'bla',2</pre></div></div>

<p>When we run this query again</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
</pre></td><td class="de1"><pre class="de1"><span class="kw1">select</span> <span class="sy0">*</span> <span class="kw1">from</span> <span class="br0">&#91;</span>TestTable<span class="br0">&#93;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">select * from [TestTable]</pre></div></div>

<p>We can see that the value 2 is there</p>
<p>Results</p>
<pre>id          itemdate			title     SomeInt
----------- ------------------------------------------------- 
1           Jan 18 2010  5:28PM           bla       0
2           Jan 18 2010  5:30PM           bla       0
3           Jan 18 2010  5:33PM           bla       2</pre>
<p>If you try to change a column to a datatype which is incompatible with the data that is stored you will get an error message</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
</pre></td><td class="de1"><pre class="de1"><span class="kw1">alter</span> <span class="kw1">table</span> <span class="br0">&#91;</span>TestTable<span class="br0">&#93;</span> <span class="kw1">alter</span> <span class="kw1">column</span> <span class="br0">&#91;</span>itemdate<span class="br0">&#93;</span> <span class="kw1">int</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">alter table [TestTable] alter column [itemdate] int</pre></div></div>

<p>Here is the error for the above command<br />
<strong>Msg 245, Level 16, State 1, Line 1<br />
Conversion failed when converting the varchar value &#8216;Jan 18 2010  5:12PM&#8217; to data type int.<br />
The statement has been terminated.</strong></p>
<p>That is it for this post, as you can see it is pretty easy to change the data type of a column by using the alter table alter column command</p>
<p>*** <strong>Remember, if you have a SQL related question try our <a href="http://forum.lessthandot.com/viewforum.php?f=17">Microsoft SQL Server Programming</a> forum or our <a href="http://forum.lessthandot.com/viewforum.php?f=22">Microsoft SQL Server Admin</a> forum</strong><ins></ins></p>
]]></content:encoded>
			<wfw:commentRss>/index.php/datamgmt/datadesign/use-alter-table-alter-column-to-change-d/feed/</wfw:commentRss>
		<slash:comments>0</slash:comments>
		</item>
		<item>
		<title>Patterns And Practices Application Architecture Guide 2.0, Something Everyone Should Read</title>
		<link>/index.php/architect/hardwareinfrastructuredesign/patterns-and-practices-application-archi/</link>
		<comments>/index.php/architect/hardwareinfrastructuredesign/patterns-and-practices-application-archi/#respond</comments>
		<pubDate>Thu, 12 Mar 2009 11:04:46 +0000</pubDate>
		<dc:creator><![CDATA[SQLDenis]]></dc:creator>
				<category><![CDATA[Hardware and Infrastructure Design]]></category>
		<category><![CDATA[architecture]]></category>
		<category><![CDATA[best practices]]></category>
		<category><![CDATA[cheat sheets]]></category>
		<category><![CDATA[data access]]></category>
		<category><![CDATA[design]]></category>
		<category><![CDATA[design patterns]]></category>
		<category><![CDATA[workflow]]></category>

		<guid isPermaLink="false">/index.php/2009/03/patterns-and-practices-application-archi/</guid>
		<description><![CDATA[I was listening to show number 426 on dotnetrocks: Rob Boucher on Application Architecture Guidance! They mentioned the Patterns And Practices Application Architecture Guide 2.0, this guide is available for free on codeplex.

Although it is a Microsof&#8230;]]></description>
				<content:encoded><![CDATA[<p>I was listening to show number 426 on dotnetrocks: <a href="http://www.dotnetrocks.com/default.aspx?showNum=426">Rob Boucher on Application Architecture Guidance!</a> They mentioned the <a href="http://www.codeplex.com/AppArchGuide">Patterns And Practices Application Architecture Guide 2.0</a>, this guide is available for free on codeplex.</p>
<p>Although it is a Microsoft technology centric guide, there should be chapters for every developer in your group.<br />
Here is one example from the book</p>
<h3>
Key Design Principles<br />
</h3>
<p>When getting started with your design, bear in mind the key principles that will help you to create architecture that meets “best practices,” minimizes costs and maintenance requirements, and promotes usability and extendibility. The key principles are:
<ul>
<li><b>Separation of concerns</b>. Break your application into distinct features that overlap in functionality as little as possible.</li>
<li><b>Single Responsibility Principle</b>. Each component or a module should be responsible for only a specific feature or functionality.</li>
<li><b>Principle of least knowledge</b>.** A component or an object should not know about internal details of other components or objects. Also known as the Law of Demeter** (LoD).</li>
<li><b>Don’t Repeat Yourself (DRY)</b>. There should be only one component providing a specific functionality; the functionality should not be duplicated in any other component.</li>
<li><b>Avoid doing a big design upfront</b>. If your application requirements are unclear, or if there is a possibility of the design evolving over time, avoid making a large design effort prematurely. This design principle is often abbreviated as BDUF. </li>
<li><b>Prefer composition over inheritance</b>. Wherever possible, use composition over inheritance when reusing functionality because inheritance increases the dependency between parent and child classes, thereby limiting the reuse of child classes.</li>
</ul>
<p>The nice thing is that each chapter has a resource section at the bottom so that you can dive deep into a specific topic mentioned in the chapter itself. This is great stuff and I recommend that you check out this guide. You also might want to listen to the dotnetrocks podcast about this guide: http://www.dotnetrocks.com/default.aspx?showNum=426</p>
<p>Here is a list of all the chapters, make sure you check out the cheat sheets</p>
<h3>
Chapters<br />
</h3>
<ul>
<li><a href="http://apparchguide.codeplex.com/Wiki/View.aspx?title=Introduction%20V2&amp;referringTitle=Home">Introduction</a></li>
<li><a href="http://apparchguide.codeplex.com/Wiki/View.aspx?title=Architecture%20and%20Design%20Solutions%20At%20a%20Glance&amp;referringTitle=Home">Architecture and Design Solutions At a Glance</a></li>
<li><a href="http://apparchguide.codeplex.com/Wiki/View.aspx?title=Fast%20Track&amp;referringTitle=Home">Fast Track</a></li>
</ul>
<h4>
Part I, Fundamentals<br />
</h4>
<ul>
<li><a href="http://apparchguide.codeplex.com/Wiki/View.aspx?title=Chapter%201%20-%20Architecture%20Fundamentals&amp;referringTitle=Home">Chapter 1 &#8211; Fundamentals of Application Architecture </a></li>
<li><a href="http://apparchguide.codeplex.com/Wiki/View.aspx?title=.NET%20Platform%20Overview%20V2&amp;referringTitle=Home">Chapter 2 &#8211; .NET Platform Overview</a></li>
<li><a href="http://apparchguide.codeplex.com/Wiki/View.aspx?title=Chapter%203%20-%20Architecture%20and%20Design%20Guidelines&amp;referringTitle=Home">Chapter 3 &#8211; Architecture and Design Guidelines</a></li>
</ul>
<h4>
Part II, Design<br />
</h4>
<ul>
<li><a href="http://apparchguide.codeplex.com/Wiki/View.aspx?title=Chapter%204%20-%20Designing%20Your%20Architecture&amp;referringTitle=Home">Chapter 4 &#8211; Designing Your Architecture</a></li>
<li><a href="http://apparchguide.codeplex.com/Wiki/View.aspx?title=Chapter%205%20-%20Deployment%20Patterns&amp;referringTitle=Home">Chapter 5 &#8211; Deployment Patterns</a></li>
<li><a href="http://apparchguide.codeplex.com/Wiki/View.aspx?title=Chapter%206%20-%20Architectural%20Styles&amp;referringTitle=Home">Chapter 6 &#8211; Architectural Styles</a></li>
<li><a href="http://apparchguide.codeplex.com/Wiki/View.aspx?title=Chapter%207%20-%20Quality%20Attributes&amp;referringTitle=Home">Chapter 7 &#8211; Quality Attributes</a></li>
<li><a href="http://apparchguide.codeplex.com/Wiki/View.aspx?title=Chapter%208%20-%20Communication%20Guidelines&amp;referringTitle=Home">Chapter 8 &#8211; Communication Guidelines</a></li>
</ul>
<h4>
Part III, Layers<br />
</h4>
<ul>
<li><a href="http://apparchguide.codeplex.com/Wiki/View.aspx?title=Chapter%209%20-%20Layers%20and%20Tiers&amp;referringTitle=Home">Chapter 9 &#8211; Layers and Tiers</a></li>
<li><a href="http://apparchguide.codeplex.com/Wiki/View.aspx?title=Chapter%2010%20-%20Presentation%20Layer%20Guidelines&amp;referringTitle=Home">Chapter 10 &#8211; Presentation Layer Guidelines</a></li>
<li><a href="http://apparchguide.codeplex.com/Wiki/View.aspx?title=Chapter%2011%20-%20Business%20Layer%20Guidelines&amp;referringTitle=Home">Chapter 11 &#8211; Business Layer Guidelines</a></li>
<li><a href="http://apparchguide.codeplex.com/Wiki/View.aspx?title=Chapter%2012%20-%20Data%20Access%20Layer%20Guidelines&amp;referringTitle=Home">Chapter 12 &#8211; Data Access Layer Guidelines</a></li>
<li><a href="http://apparchguide.codeplex.com/Wiki/View.aspx?title=Chapter%2013%20-%20Service%20Layer%20Guidelines&amp;referringTitle=Home">Chapter 13 &#8211; Service Layer Guidelines</a></li>
</ul>
<h4>
Part IV, Archetypes<br />
</h4>
<ul>
<li><a href="http://apparchguide.codeplex.com/Wiki/View.aspx?title=Chapter%2014%20-%20Application%20Archetypes&amp;referringTitle=Home">Chapter 14 &#8211; Application Archetypes</a></li>
<li><a href="http://apparchguide.codeplex.com/Wiki/View.aspx?title=Chapter%2015%20-%20Web%20Applications&amp;referringTitle=Home">Chapter 15 &#8211; Web Applications</a></li>
<li><a href="http://apparchguide.codeplex.com/Wiki/View.aspx?title=Chapter%2016%20-%20Rich%20Internet%20Applications%20%28RIA%29&amp;referringTitle=Home">Chapter 16 &#8211; Rich Internet Applications (RIA)</a></li>
<li><a href="http://apparchguide.codeplex.com/Wiki/View.aspx?title=Chapter%2017%20-%20Rich%20Client%20Applications&amp;referringTitle=Home">Chapter 17 &#8211; Rich Client Applications</a></li>
<li><a href="http://apparchguide.codeplex.com/Wiki/View.aspx?title=Chapter%2018%20-%20Services&amp;referringTitle=Home">Chapter 18 &#8211; Services</a></li>
<li><a href="http://apparchguide.codeplex.com/Wiki/View.aspx?title=Chapter%2019%20-%20Mobile%20Applications&amp;referringTitle=Home">Chapter 19 &#8211; Mobile Applications</a></li>
<li><a href="http://apparchguide.codeplex.com/Wiki/View.aspx?title=Chapter%2020%20-%20Office%20Business%20Applications%20%28OBA%29&amp;referringTitle=Home">Chapter 20 &#8211; Office Business Applications (OBA)</a></li>
<li><a href="http://apparchguide.codeplex.com/Wiki/View.aspx?title=Chapter%2021%20-%20SharePoint%20LOB%20Applications&amp;referringTitle=Home">Chapter 21 &#8211; SharePoint Line-Of-Business (LOB) Applications</a></li>
</ul>
<h4>
Appendix<br />
</h4>
<ul>
<li><a href="http://apparchguide.codeplex.com/Wiki/View.aspx?title=Pattern%20Catalog%20V2&amp;referringTitle=Home">Cheat Sheet &#8211; patterns &amp; practices Pattern Catalog</a></li>
<li><a href="http://apparchguide.codeplex.com/Wiki/View.aspx?title=Cheat%20Sheet%20-%20Presentation%20Technology%20Matrix&amp;referringTitle=Home">Cheat Sheet &#8211; Presentation Technology Matrix</a></li>
<li><a href="http://apparchguide.codeplex.com/Wiki/View.aspx?title=Cheat%20Sheet%20-%20Data%20Access%20Technology%20Matrix&amp;referringTitle=Home">Cheat Sheet &#8211; Data Access Technology Matrix</a></li>
<li><a href="http://apparchguide.codeplex.com/Wiki/View.aspx?title=Cheat%20Sheet%20-%20Workflow%20Technology%20Matrix&amp;referringTitle=Home">Cheat Sheet &#8211; Workflow Technology Matrix</a></li>
<li><a href="http://apparchguide.codeplex.com/Wiki/View.aspx?title=Cheat%20Sheet%20-%20Integration%20Technology%20Matrix&amp;referringTitle=Home">Cheat Sheet &#8211; Integration Technology Matrix</a></li>
</ul>
<h3>
Errata Page<br />
</h3>
<ul>
<li><a href="http://apparchguide.codeplex.com/Wiki/View.aspx?title=Errata%20Page&amp;referringTitle=Home">Errata Page</a></li>
</ul>
]]></content:encoded>
			<wfw:commentRss>/index.php/architect/hardwareinfrastructuredesign/patterns-and-practices-application-archi/feed/</wfw:commentRss>
		<slash:comments>0</slash:comments>
		</item>
		<item>
		<title>5 Books Every Developer Should Read</title>
		<link>/index.php/desktopdev/mstech/5-books-every-developer-should-read/</link>
		<comments>/index.php/desktopdev/mstech/5-books-every-developer-should-read/#comments</comments>
		<pubDate>Sun, 20 Jul 2008 18:12:06 +0000</pubDate>
		<dc:creator><![CDATA[SQLDenis]]></dc:creator>
				<category><![CDATA[Microsoft Technologies]]></category>
		<category><![CDATA[architecture]]></category>
		<category><![CDATA[book]]></category>
		<category><![CDATA[design]]></category>
		<category><![CDATA[design patterns]]></category>
		<category><![CDATA[development]]></category>
		<category><![CDATA[programming]]></category>
		<category><![CDATA[toread]]></category>

		<guid isPermaLink="false">/index.php/2008/07/5-books-every-developer-should-read/</guid>
		<description><![CDATA[Which books should you read/buy when you are a programmer? I have listed 5 books that have helped me a lot. The books that I have chosen are not specific to any language although some of the books have examples in one language only. Design Patterns has examples in smalltalk and C++ but since the [&#8230;]]]></description>
				<content:encoded><![CDATA[<p>Which books should you read/buy when you are a programmer? I have listed 5 books that have helped me a lot. The books that I have chosen are not specific to any language although some of the books have examples in one language only. Design Patterns has examples in smalltalk and C++ but since the code is not very complicated you should have no problem converting it to your language of choice. I have included links to sample chapters for the books where I could find them. For some of the books I have also provided links to the author&#8217;s site; some of them have additional material so that you can look at that. I have also provided Amazon links so that you can read reviews. All of these books are rated 4 stars or higher. I have also provided alternate books if I felt that there were more choices for the same subject</p>
<p><strong><span style="font-size:130%;color:#cc0000;"><a href="http://www.amazon.com/exec/obidos/ASIN/0201633612/sql08-20/102-1687136-8876917?%5Fencoding=UTF8&amp;camp=1789&amp;link%5Fcode=xm2">Design Patterns</a></span></strong><br />
This book is one of the seminal books on patterns in software development. If you are a professional software developer, you must read this. If you are learning to write good software, this is a book that you will need to take on at some point</p>
<p>Design Patterns <a href="http://lci.cs.ubbcluj.ro/~raduking/Books/Design%20Patterns/">Site</a></p>
<p><span style="font-size:130%;color:#cc0000;"><strong><a href="http://www.amazon.com/exec/obidos/ASIN/0735619670/sql08-20/102-5735017-0910517?%5Fencoding=UTF8&amp;camp=1789&amp;link%5Fcode=xm2">Code Complete</a><br />
</strong></span>Code complete provides the reader with an insight into how<br />
to write good and easy to understand code. You will come away from this book with an appreciation of the thought process that should go into writing every class, routine, comment etc&#8230;</p>
<p>Software development steps are outlined clearly. Pitfalls to avoid are discussed and rewards obtained from good code is explained. The author tells you what you need to know and most importantly why you need this information. If one applies the ideas in this book, I think you will be a better programmer.</p>
<p>Sample Chapter: <a href="http://www.cc2e.com/docs/Chapter1-Welcome.pdf">Chapter 1: Welcome (pdf)</a><br />
Sample Chapter: <a href="http://www.cc2e.com/docs/Chapter5-Design.pdf">Chapter 5: Design in Construction (pdf)</a></p>
<p>Code Complete Author&#8217;s <a href="http://www.cc2e.com/">Site</a></p>
<p><span style="font-size:130%;color:#cc0000;"><strong><a href="http://www.amazon.com/exec/obidos/ASIN/020161622X/sql08-20/102-5735017-0910517?%5Fencoding=UTF8&amp;camp=1789&amp;link%5Fcode=xm2">The Pragmatic Programmer</a><br />
</strong></span>The pragmatic programmer provides invaluable advice to those who are just starting to program, and those who have been programing for years. By following the authors&#8217; simple rules you should have gained some programming wisdom that a programmer would realize in a decade.</p>
<p><strong>Extracts from the book</strong><br />
<a href="http://www.pragmaticprogrammer.com/ppbook/extracts/preface.html">The Preface</a><br />
<a href="http://www.pragmaticprogrammer.com/ppbook/extracts/no_broken_windows.html">Software Entropy</a><br />
<a href="http://www.pragmaticprogrammer.com/ppbook/extracts/coincidence.html">Programming by Coincidence</a><br />
<a href="http://www.pragmaticprogrammer.com/ppbook/extracts/wizards.html">Evil Wizards</a><br />
<a href="http://www.pragmaticprogrammer.com/ppbook/extracts/balance_resources.html">Balance Resources</a><br />
<a href="http://www.pragmaticprogrammer.com/ppbook/extracts/rule_list.html">Summary of the book&#8217;s tips</a><br />
<a href="http://www.pragmaticprogrammer.com/ppbook/extracts/contents.html">Contents</a></p>
<p><strong><a href="http://www.amazon.com/exec/obidos/ASIN/0201485672/sql08-20/102-5735017-0910517?%5Fencoding=UTF8&amp;camp=1789&amp;link%5Fcode=xm2"><span style="font-size:130%;">Refactoring</span> </a><br />
</strong>This book will change the way you think about and working with exisiting code. It&#8217;ll teach you that changing/modifying software is a fact of life. Martin Fowler does a awesome job of describing how to improve the design of existing code by performing various refactorings. Various design patterns are mentioned throughout the text, that is another reason why the design patterns book is so important</p>
<p>Sample Chapter: <a href="http://www.awprofessional.com/content/images/0201485672/samplechapter/chap4.html">Refactoring, a First Example</a></p>
<p><span style="font-size:130%;color:#cc0000;"><strong><a href="http://www.amazon.com/exec/obidos/ASIN/0321321278/sql08-20/102-5735017-0910517?%5Fencoding=UTF8&amp;camp=1789&amp;link%5Fcode=xm2">UML 2 and the Unified Process: Practical Object-Oriented Analysis and Design, 2nd Edition</a></strong></span><br />
UML has grown. A few years ago, when UML was just getting accepted, a book on how to use it would have been much thinner. But the successful broad uptake of UML led to its semantic notation being expanded. What the authors give us here is a thorough exposition of UML 2.0 and how to use it. It also goes into the Unified Process for running a project, and how this can be documented in UML</p>
<p>Sample Chapter: <a href="http://www.awprofessional.com/content/images/0321321278/samplechapter/arlow_ch09.pdf">Relationships </a></p>
<p>And here are a couple of more choices instead of the books above<br />
<a href="http://www.amazon.com/exec/obidos/ASIN/0135974445/sql08-20/102-1687136-8876917?%5Fencoding=UTF8&amp;camp=1789&amp;link%5Fcode=xm2">Agile Software Development, Principles, Patterns, and Practices</a><br />
<a href="http://www.amazon.com/exec/obidos/ASIN/0471197130/sql08-20/102-1687136-8876917?%5Fencoding=UTF8&amp;camp=1789&amp;link%5Fcode=xm2">AntiPatterns</a><br />
<a href="http://www.amazon.com/exec/obidos/ASIN/0596008740/sql08-20/102-1687136-8876917?%5Fencoding=UTF8&amp;camp=1789&amp;link%5Fcode=xm2">Prefactoring </a><br />
<a href="http://www.amazon.com/exec/obidos/ASIN/1932394613/sql08-20/102-5735017-0910517?%5Fencoding=UTF8&amp;camp=1789&amp;link%5Fcode=xm2">Ajax in Action</a><br />
<a href="http://www.amazon.com/exec/obidos/ASIN/0596007124/sql08-20/102-5735017-0910517?%5Fencoding=UTF8&amp;camp=1789&amp;link%5Fcode=xm2">Head First Design Patterns</a></p>
]]></content:encoded>
			<wfw:commentRss>/index.php/desktopdev/mstech/5-books-every-developer-should-read/feed/</wfw:commentRss>
		<slash:comments>7</slash:comments>
		</item>
	</channel>
</rss>
