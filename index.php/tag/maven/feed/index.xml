<?xml version="1.0" encoding="UTF-8"?><rss version="2.0"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:atom="http://www.w3.org/2005/Atom"
	xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
	xmlns:slash="http://purl.org/rss/1.0/modules/slash/"
	>

<channel>
	<title>maven &#8211; LessthanDot</title>
	<atom:link href="/index.php/tag/maven/feed/" rel="self" type="application/rss+xml" />
	<link>/</link>
	<description>A Technical Community for IT Professionals</description>
	<lastBuildDate>Sat, 09 Mar 2019 12:50:36 +0000</lastBuildDate>
	<language>en-US</language>
	<sy:updatePeriod>hourly</sy:updatePeriod>
	<sy:updateFrequency>1</sy:updateFrequency>
	<generator>https://wordpress.org/?v=4.6.1</generator>
	<item>
		<title>Review of The Well-Grounded Java Developer</title>
		<link>/index.php/enterprisedev/appserver/jee/review-of-the-well-grounded/</link>
		<comments>/index.php/enterprisedev/appserver/jee/review-of-the-well-grounded/#comments</comments>
		<pubDate>Wed, 09 Jan 2013 15:12:00 +0000</pubDate>
		<dc:creator><![CDATA[SQLDenis]]></dc:creator>
				<category><![CDATA[Application Lifecycle Management]]></category>
		<category><![CDATA[Java EE]]></category>
		<category><![CDATA[book]]></category>
		<category><![CDATA[book review]]></category>
		<category><![CDATA[groovy]]></category>
		<category><![CDATA[java functional programming]]></category>
		<category><![CDATA[jvm]]></category>
		<category><![CDATA[maven]]></category>
		<category><![CDATA[polyglot]]></category>
		<category><![CDATA[scala]]></category>

		<guid isPermaLink="false">/index.php/2013/01/review-of-the-well-grounded/</guid>
		<description><![CDATA[This is a review of The Well-Grounded Java Developer, Vital techniques of Java 7 and polyglot programming. Written by Benjamin J. Evans and Martijn Verburg. The book was published in July, 2012 and it contains 496 pages

This is an excellent&#8230;]]></description>
				<content:encoded><![CDATA[<p>This is a review of <a href="http://www.amazon.com/gp/product/1617290068/ref=as_li_ss_tl?ie=UTF8&amp;tag=sql08-20&amp;linkCode=as2&amp;camp=1789&amp;creative=390957&amp;creativeASIN=1617290068">The Well-Grounded Java Developer, Vital techniques of Java 7 and polyglot programming</a>. Written by Benjamin J. Evans and Martijn Verburg. The book was published in July, 2012 and it contains 496 pages</p>
<p><a href="/wp-content/uploads/blogs/EnterpriseDev/Denis/evans_cover150.jpg?mtime=1357748948"><img alt="" src="/wp-content/uploads/blogs/EnterpriseDev/Denis/evans_cover150.jpg?mtime=1357748948" width="150" height="188" style="float:left;margin:0 5px 0 0;" /></a>Right from the start I want to say that this is an excellent book and I highly recommend it. One thing you do need to be aware about is that in order to use this book you need to know Java. If you don&#8217;t know Java then this is not the book for you. This book is all about bringing you to the next level as a Java developer by showing you how to do continuous integration, dependency injection, testing, performance tuning, and more.<br />
This book even shows you how to use different languages that run on the JVM. The book is written in a easy and concise style, everything is very clear. I also love the annotations which are sprinkled throughout the book, they give some nice background information. While the chapters on Groovy, Scala and Clojure are not a complete reference for the language, they do provide enough material to form a nice foundation, now you can further explore the language on your own.</p>
<p>The book is split up in four parts, I will list each part with the chapters within that part and will give a brief summary what the part is about</p>
<p><strong>Part 1 Developing with Java 7</strong><br />
Chapter 1 Introducing Java 7<br />
Chapter 2 New I/O</p>
<p>This section shows you what was added in Java 7, for example you can now use strings in switch statements, try-with-resources(similar to a using statement in c#, it frees up the resources after it is done). The Java IO stuff has been rewritten and much easier to use, where you had to write a whole bunch of code before, you can now do the same in much less code. Some things that did not exist in Java in terms of IO but now does exist are explained as well.</p>
<p><strong>Part 2 Vital techniques</strong><br />
Chapter 3 Dependency Injection<br />
Chapter 4 Modern concurrency<br />
Chapter 5 Class files and bytecode<br />
Chapter 6 Understanding performance tuning</p>
<p>This part has a lot of stuff and as a Java developer you should really know how this stuff works if you want to get to the next level. Dependency Injection(DI) and inversion of control (IoC) are covered, Guice 3, the reference implementation for DI in Java is also covered. Concurrency before Java 5 and concurrency now is covered. Concurrency will be a must now that we have multi-CPU and multi-core everywhere, you better get your wits around it. There is a whole chapter on the class files itself and how they are loaded as well as what they compile into. These are fun details and will show you exactly what happens when you compile and execute a class. Evereybody&#8217;s favorite subject performance tuning is covered in this part of the book as well.</p>
<p><strong>Part 3 Polyglot programming on the JVM</strong><br />
Chapter 7 Alternative JVM languages<br />
Chapter 8 Groovy: Java’s dynamic friend<br />
Chapter 9 Scala: powerful and concise<br />
Chapter 10 Clojure: safer programming</p>
<p>This is a very interesting part of the book and I would suggest not to skip it. There are 3 type of languages covered in this part:<br />
Groovy, a dynamic language<br />
Scala, a functional language<br />
Clojure, a Lisp for functional programming</p>
<p>Take a look at these languages and you will be amazed how much Java boilerplate code you can eliminate by using these languages instead. Some of the functional is a little bit of a paradigm shift and you might need some time adjusting. You will also see how you can interoperate between these languages and Java.</p>
<p><strong>Part 4 Crafting the polyglot project</strong><br />
Chapter 11 Test-driven development<br />
Chapter 12 Build and continuous integration<br />
Chapter 13 Rapid web development<br />
Chapter 14 Staying well-grounded</p>
<p>The last part is all about automation and making your life easier. If you are a developer who still deploys stuff by using FTP to move JAR, EAR and WAR files, pay attention. Maven is covered as the build automation tool, Jenkins is the  continuous integration tool. In the Rapid web development chapter Grails is explored.</p>
<hr />
Let me just repeat again that I think this is an awesome book and as a Java developer you have to check it out. The one thing that is missing from the book is ORM, it is covered a little in the testing chapter but if you want to know about ORM, you will need to pick out some other book just for that.</p>
<p>You can download the following chapters to get a feel for the book</p>
<p><a href="http://www.manning.com/evans/TWGJD_sample_ch01.pdf">Sample chapter 1</a><br />
<a href="http://www.manning.com/evans/TWGJD_sample_ch04.pdf">Sample chapter 4</a></p>
<p>Head on over to Amazon for other reviews of <a href="http://www.amazon.com/gp/product/1617290068/ref=as_li_ss_tl?ie=UTF8&amp;tag=sql08-20&amp;linkCode=as2&amp;camp=1789&amp;creative=390957&amp;creativeASIN=1617290068">The Well-Grounded Java Developer, Vital techniques of Java 7 and polyglot programming</a><br />
The site for the book can be found here: http://www.manning.com/evans/ </p>
<hr />
Below is the complete table of contents so that you have a little more details about each chapter.</p>
<p><strong>Part 1 Developing with Java 7<br />
Chapter 1 Introducing Java 7<br />
</strong>The language and the platform<br />
Small is beautiful—Project Coin<br />
The changes in Project Coin<br />
Summary</p>
<p><strong>Chapter 2 New I/O</strong><br />
Java I/O—a history<br />
Path—a foundation of file-based I/O<br />
Dealing with directories and directory trees<br />
Filesystem I/O with NIO.2<br />
Asynchronous I/O operations<br />
Tidying up Socket-Channel functionality<br />
Summary</p>
<p><strong>Part 2 Vital techniques<br />
Chapter 3 Dependency Injection</strong><br />
Inject some knowledge—understanding IoC and DI<br />
Standardized DI in Java<br />
Guice 3—the reference implementation for DI in Java<br />
Summary</p>
<p><strong>Chapter 4 Modern concurrency</strong><br />
Concurrency theory—a primer<br />
Block-structured concurrency (pre-Java 5)<br />
Building blocks for modern concurrent applications<br />
Controlling execution<br />
The fork/join framework<br />
The Java Memory Model (JMM)<br />
Summary</p>
<p><strong>Chapter 5 Class files and bytecode</strong><br />
Classloading and class objects<br />
Using method handles<br />
Examining class files<br />
Bytecode<br />
Invokedynamic<br />
Summary</p>
<p><strong>Chapter 6 Understanding performance tuning</strong><br />
Performance terminology—some basic definitions<br />
A pragmatic approach to performance analysis<br />
What went wrong? Why we have to care<br />
A question of time—from the hardware up<br />
Garbage collection<br />
JIT compilation with HotSpot<br />
Summary</p>
<p><strong>Part 3 Polyglot programming on the JVM<br />
Chapter 7 Alternative JVM languages<br />
</strong>Java too clumsy? Them’s fighting words!<br />
Language zoology<br />
Polyglot programming on the JVM<br />
How to choose a non-Java language for your project<br />
How the JVM supports alternative languages<br />
Summary</p>
<p><strong>Chapter 8 Groovy: Java’s dynamic friend</strong><br />
Getting started with Groovy<br />
Groovy 101—syntax and semantics<br />
Differences from Java—traps for new players<br />
Groovy features not (yet) in Java<br />
Interoperating between Groovy and Java<br />
Summary</p>
<p><strong>Chapter 9 Scala: powerful and concise</strong><br />
A quick tour of Scala<br />
Is Scala right for my project?<br />
Making code beautiful again with Scala<br />
Scala’s object model—similar but different<br />
Data structures and collections<br />
Introduction to actors<br />
Summary</p>
<p><strong>Chapter 10 Clojure: safer programming</strong><br />
Introducing Clojure<br />
Looking for Clojure—syntax and semantics<br />
Working with functions and loops in Clojure<br />
Introducing Clojure sequences<br />
Interoperating between Clojure and Java<br />
Concurrent Clojure<br />
Summary</p>
<p><strong>Part 4 Crafting the polyglot project<br />
Chapter 11 Test-driven development<br />
</strong>TDD in a nutshell<br />
Test doubles<br />
Introducing ScalaTest<br />
Summary</p>
<p><strong>Chapter 12 Build and continuous integration</strong><br />
Getting started with Maven 3<br />
Maven 3—a quick-start project<br />
Maven 3—the Java7developer build<br />
Jenkins—serving your CI needs<br />
Code metrics with Maven and Jenkins<br />
Leiningen<br />
Summary</p>
<p><strong>Chapter 13 Rapid web development</strong><br />
The problem with Java-based web frameworks<br />
Criteria in selecting a web framework<br />
Getting started with Grails<br />
Grails quick-start project<br />
Further Grails exploration<br />
Getting started with Compojure<br />
A sample Compojure project—“Am I an Otter or Not?”<br />
Summary</p>
<p><strong>Chapter 14 Staying well-grounded</strong><br />
What to expect in Java 8<br />
Polyglot programming<br />
Future concurrency trends<br />
New directions in the JVM</p>
]]></content:encoded>
			<wfw:commentRss>/index.php/enterprisedev/appserver/jee/review-of-the-well-grounded/feed/</wfw:commentRss>
		<slash:comments>4</slash:comments>
		</item>
		<item>
		<title>Java Training Day 1</title>
		<link>/index.php/enterprisedev/appserver/jee/java-training-day-1/</link>
		<comments>/index.php/enterprisedev/appserver/jee/java-training-day-1/#respond</comments>
		<pubDate>Mon, 26 Nov 2012 19:22:00 +0000</pubDate>
		<dc:creator><![CDATA[SQLDenis]]></dc:creator>
				<category><![CDATA[Application Lifecycle Management]]></category>
		<category><![CDATA[Java EE]]></category>
		<category><![CDATA[JBoss]]></category>
		<category><![CDATA[Websphere]]></category>
		<category><![CDATA[eclipse]]></category>
		<category><![CDATA[java]]></category>
		<category><![CDATA[maven]]></category>
		<category><![CDATA[netbeans]]></category>
		<category><![CDATA[oop]]></category>

		<guid isPermaLink="false">/index.php/2012/11/java-training-day-1/</guid>
		<description><![CDATA[Today is day one of the Java class I am taking this week. I am just dumping some of the stuff that I am hearing about, some of the stuff I might already know.
Java is a general purpose language, it is interperted, output is by&#8230;]]></description>
				<content:encoded><![CDATA[<p>Java Training Day 1<br />
&#8212;<br />
Today is day one of the Java class I am taking this week. I am just dumping some of the stuff that I am hearing about, some of the stuff I might already know.<br />
Java is a general purpose language, it is interperted, output is bytecode, you need to have a Java Virtual Machine on the target machine in order to run a Java program.<br />
A Java file gets compiled to a system-neutral format which is a class file and gets a .class extension, this is compressed and not really human readable</p>
<p>Classes are organized in a group called a package, a package is very similar to a .net namespace. You use this so that you don&#8217;t get collisions if you have two classes with the same name.</p>
<p>You use javadoc to generate standard formatted documentation.</p>
<p><strong>Java community process(JCP)</strong><br />
Formal community-driven process to drive the Java standard, the iste is http://jcp.org/</p>
<p>Deprecate, use annotation and then when you compile your class, you will get a warning so that you will know that you will need to rewrite that piece of the code.</p>
<p>Java is case sensitive, all reserved java keywords are lowercase</p>
<p>In a class the main routine is the start of a program<br />
The main routine will look like this</p>
<p>public static void main(String[] args) {&#8230;&#8230;.}</p>
<p>A java source file has to end in  .java, for example  MyClass.java this will produce a file called MyClass.class. you can&#8217;t have more than one public class in a source file, you cannot have partial classes like in .net either.</p>
<p>Java runs on top of the JVM, the JVM is different per operating system. No need to recompile Java&#8230;Write once run everywhere&#8230;.some people like to say write once&#8230;debug everywhere  <img src="https://s.w.org/images/core/emoji/2/72x72/1f642.png" alt="🙂" class="wp-smiley" style="height: 1em; max-height: 1em;" /></p>
<p><strong>Java versions and flavors</strong><br />
Java 1.0, 1.1<br />
Java 2 	1.2, 1.3, 1.4, 1.5<br />
Java 5  also sometimes called 1.5, 1.5 is when they shifted to integers again<br />
Java 6<br />
Java 7</p>
<p>The different flavors of Java and their old and new names<br />
J2SE  	Java SE<br />
J2EE	Java EE<br />
J2ME	Java ME</p>
<p><strong>Base libraries to provide common functionality</strong><br />
Here are just some of them</p>
<p>java.lang<br />
java.lang contains fundamental classes and interfaces closely tied to the language and runtime system.</p>
<p>java.io/java.nio/java.net<br />
I/O and networking access the platform file system, and more generally networks through the java.io, java.nio and java.net packages. </p>
<p>java.math<br />
Mathematics package: java.math provides mathematical expressions and evaluation, as well as arbitrary-precision decimal and integer number datatypes.</p>
<p>java.text<br />
Text: java.text deals with text, dates, numbers, and messages.</p>
<p>javax.crypto<br />
Security is provided by java.security and encryption services are provided by javax.crypto.</p>
<p>java.sql<br />
Databases: access to SQL databases via java.sql</p>
<p>java.beans<br />
Java Beans: java.beans provides ways to manipulate reusable components.</p>
<p><strong>Types of Java Software</strong><br />
Class Libraries<br />
Standalone Java<br />
Applets<br />
Servlets, JSP and tag libraries<br />
Enterprise Java Beans</p>
<p><strong>Enterprise Application Servers</strong><br />
Here are a couple of Java Enterprise Application Servers and their vendors<br />
GlassFish	Oracle/Sun<br />
Weblogic	Oracle/BEA<br />
Webshere	IBM<br />
JBoss		Red Hat</p>
<p><strong>Environment variables</strong><br />
Oh how I used to hate dealing with these variables, stuff wouldn&#8217;t work if this wasn&#8217;t setup correctly<br />
There are a couple of environment variables that you need</p>
<p><strong>JAVA_HOME</strong><br />
This will be use by the tools in the JDK</p>
<p><strong>PATH</strong><br />
This is used by the operating system to find the compiler and other programs, add the/bin directory</p>
<p><strong>CLASSPATH</strong><br />
This is used by the Java Virtual Machine to find application specific classes at compile as well as run time</p>
<p><strong>JDK Bin directory</strong><br />
THe JDK Bin directory holds all the programs used by the JDK to do what is needed for Java to function<br />
There are programs to compile java, to run java, to create JAR files, to create javadoc documentation files etc etc<br />
Mine is installed here C:Program FilesJavajdk1.7.0_07bin</p>
<p>Here is screenshot of my directory with some of those programs</p>
<div class="image_block"><a href="/wp-content/uploads/blogs/EnterpriseDev/JavaBinDirectory.PNG?mtime=1353948732"><img alt="" src="/wp-content/uploads/blogs/EnterpriseDev/JavaBinDirectory.PNG?mtime=1353948732" width="795" height="635" /></a></div>
<p>There is something called jvisualvm.exe, this is know as Java VisualVM, from the Oracle documentation: http://docs.oracle.com/javase/6/docs/technotes/tools/share/jvisualvm.html<br />
Java VisualVM is an intuitive graphical user interface that provides detailed information about Java technology-based applications (Java applications) while they are running on a given Java Virtual Machine (JVM*). The name Java VisualVM comes from the fact that Java VisualVM provides information about the JVM software visually.</p>
<p>Java VisualVM combines several monitoring, troubleshooting, and profiling utilities into a single tool. For example, most of the functionality offered by the standalone tools jmap, jinfo, jstat and jstack have been integrated into Java VisualVM. Other functionalities, such as some of those offered by the JConsole tool, can be added as optional plug-ins.</p>
<p>Here are some screenshots of the tool in action while running against Eclipse</p>
<div class="image_block"><a href="/wp-content/uploads/blogs/EnterpriseDev/VisualVMMonitor.PNG?mtime=1353948863"><img alt="" src="/wp-content/uploads/blogs/EnterpriseDev/VisualVMMonitor.PNG?mtime=1353948863" width="929" height="579" /></a></div>
<div class="image_block"><a href="/wp-content/uploads/blogs/EnterpriseDev/VisualVMThreads.PNG?mtime=1353948850"><img alt="" src="/wp-content/uploads/blogs/EnterpriseDev/VisualVMThreads.PNG?mtime=1353948850" width="919" height="581" /></a></div>
<div class="image_block"><a href="/wp-content/uploads/blogs/EnterpriseDev/VisualVMThreadsTable.PNG?mtime=1353948837"><img alt="" src="/wp-content/uploads/blogs/EnterpriseDev/VisualVMThreadsTable.PNG?mtime=1353948837" width="930" height="594" /></a></div>
<p>Always include . as part of the classpath, this ensure that the current directory is searched in case of a default package</p>
<p><strong>JAR</strong><br />
Java Archive, this is an archived file holding all the classes and a manifest describing what is in the archive</p>
<p>There are related files that are used based on the type of application, here is what info wikipedia has listed</p>
<p>WAR (Web application archive) files, also Java archives, store XML files, Java classes, JavaServer Pages and other objects for Web Applications.<br />
RAR (resource adapter archive) files (not to be confused with the RAR file format), also Java archives, store XML files, Java classes and other objects for J2EE Connector Architecture (JCA) applications.<br />
EAR (enterprise archive) files provide composite Java archives which combine XML files, Java classes and other objects including JAR, WAR and RAR Java archive files for Enterprise Applications.<br />
SAR (service archive) is similar to EAR. It provides a service.xml file and accompanying JAR files.<br />
APK (Android Application Package), a variant of the Java archive format, is used for Android applications.[3]</p>
<p>We compiled and ran some programs from the command line, it is amazing how many people have problems with the path and classpath variables to get it to work&#8230;but we all did and now we are allowed to use Eclipese or Netbeans instead</p>
<p><strong>Javadoc comments</strong><br />
We looked at how to do javadoc comments, basically the first line has to start with /**</p>
<p>There are also tags that you can use, it is recommended to use this order</p>
<p>@author (classes and interfaces only, required)<br />
@version (classes and interfaces only, required. See footnote 1)<br />
@param (methods and constructors only)<br />
@return (methods only)<br />
@exception (@throws is a synonym added in Javadoc 1.2)<br />
@see<br />
@since<br />
@serial (or @serialField or @serialData)<br />
@deprecated (see How and When To Deprecate APIs)</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="java"><thead><tr><td colspan="2"  class="head">Java</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
</pre></td><td class="de1"><pre class="de1">Here is an example
&nbsp;
&nbsp; &nbsp;<span class="co3">/**</span>
<span class="co3">&nbsp; &nbsp; &nbsp;* Disposes of this graphics context once it is no longer </span>
<span class="co3">&nbsp; &nbsp; &nbsp;* referenced.</span>
<span class="co3">&nbsp; &nbsp; &nbsp;*</span>
<span class="co3">&nbsp; &nbsp; &nbsp;* @see &nbsp; &nbsp; &nbsp; #dispose()</span>
<span class="co3">&nbsp; &nbsp; &nbsp;* @since &nbsp; &nbsp; 1.0</span>
<span class="co3">&nbsp; &nbsp; &nbsp;*/</span>
&nbsp; &nbsp; <span class="kw1">public</span> <span class="kw4">void</span> finalize<span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; dispose<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; <span class="br0">&#125;</span>
<span class="br0">&#125;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">Here is an example

   /**
     * Disposes of this graphics context once it is no longer 
     * referenced.
     *
     * @see       #dispose()
     * @since     1.0
     */
    public void finalize() {
        dispose();
    }
}</pre></div></div>

<p><strong>Identifiers</strong><br />
Can have letters and numbers, cannot begin with a digit</p>
<p>The reason most programming language don&#8217;t allow identifiers to start with a digit is simple</p>
<p>int 6;<br />
6=5;</p>
<p>See that? Since an identifier can be 1 character, you could create something named 5 or 6 or even 256, this rule prevents you doing such stuff</p>
<p>Variables can me made constant by using the final keyword for example</p>
<p>final int MAX_VALUE = 40;</p>
<p>You can also do this<br />
final int BOILING_POINT;<br />
BOILING_POINT; = 100;</p>
<p>Once you assign the value, you can&#8217;t change BOILING_POINT anymore</p>
<p>We learned about scope and learned that depending on where the variable is declared, it might not be visible outside of the block, this is the same as in other languages (local variables)</p>
<p>When you want to have only one copy of a class variable, make it static, then if you instatiate 100 classes they all point to the same variable instead of having 100 variables in memory<br />
Static variables are available to use as soon as a class is loaded</p>
<p>Brain fried&#8230;&#8230;time to go&#8230;&#8230;..  back tomorrow</p>
]]></content:encoded>
			<wfw:commentRss>/index.php/enterprisedev/appserver/jee/java-training-day-1/feed/</wfw:commentRss>
		<slash:comments>0</slash:comments>
		</item>
		<item>
		<title>Back to Java after an eleven year hiatus, what are some good resources you recommend?</title>
		<link>/index.php/enterprisedev/appserver/jee/back-to-java-after-an/</link>
		<comments>/index.php/enterprisedev/appserver/jee/back-to-java-after-an/#respond</comments>
		<pubDate>Sun, 25 Nov 2012 22:34:00 +0000</pubDate>
		<dc:creator><![CDATA[SQLDenis]]></dc:creator>
				<category><![CDATA[BEA WebLogic and Aqualogic]]></category>
		<category><![CDATA[Java EE]]></category>
		<category><![CDATA[Websphere]]></category>
		<category><![CDATA[eclipse]]></category>
		<category><![CDATA[java]]></category>
		<category><![CDATA[maven]]></category>
		<category><![CDATA[netbeans]]></category>

		<guid isPermaLink="false">/index.php/2012/11/back-to-java-after-an/</guid>
		<description><![CDATA[This week eleven coworkers and myself will be in Java training for most of the time, I haven't touched Java since 2001. I did a bunch of research over the 4 day weekend to get a little head start.

I installed Netbeans and Eclipse to see how they are&#8230;]]></description>
				<content:encoded><![CDATA[<p><a href="http://www.flickr.com/photos/mrjoro/22752982/" title="Java Logo by mrjoro, on Flickr"><img src="http://farm1.staticflickr.com/17/22752982_28bfc98f68_m.jpg" width="240" height="180" alt="Java Logo" /></a></p>
<p>This week eleven coworkers and myself will be in Java training for most of the time, I haven&#8217;t touched Java since 2001. I did a bunch of research over the 4 day weekend to get a little head start.</p>
<p>I installed Netbeans and Eclipse to see how they are different<br />
I played around with Tapestry and took a look at Struts<br />
I used JUnit to write a couple of tests<br />
I installed Maven and used that to bring down the sample Tapestry project<br />
I installed and configured HyperSQL (with sa and blank password&#8230;  ouch!!!)</p>
<p>It seems to me that there are a whole lot of things that I need to know, twelve years ago none of this stuff existed. I also seems to me that the language itself hasn&#8217;t changed so much compared to C#. I might also take a look at Scala down the road, some of that stuff seems interesting. </p>
<p>When I used Java in 2000 and 2001 it was primarily to do JSP development. The main project at that time was converting a ColdFusion site to JSP. The IDE that we used at that time was Kawa, we also gave Visual Cafe a spin. I must say that the IDE is much much better than what existed twelve years ago. Eclipse has a robust plugin system and computers have advanced in speed over the past twelve years so that Java apps don&#8217;t feels slow on the desktop anymore</p>
<p>Over the next five days, I will blog about what I did and learned, I will also probably put some stuff on our wiki so that I can have it as a reference/cheat sheet</p>
<p>Here is my question to you&#8230;..What are some of your favorite resources for Java and the Java ecosystem? I am looking for blogs to subscribe to, people to follow on twitter, if you have a favorite Java book then tell me about it. My favorite books from 2001 were Core Java, Volume I and II, I am happy to see that the 9th edition is coming out on December 10th: <a href="http://www.amazon.com/gp/product/0137081898/ref=as_li_ss_tl?ie=UTF8&amp;camp=1789&amp;creative=390957&amp;creativeASIN=0137081898&amp;linkCode=as2&amp;tag=sql08-20">Core Java Volume I&#8211;Fundamentals (9th Edition) (Core Series)</a>. If you know of any good podcasts then tell me about those as well</p>
]]></content:encoded>
			<wfw:commentRss>/index.php/enterprisedev/appserver/jee/back-to-java-after-an/feed/</wfw:commentRss>
		<slash:comments>0</slash:comments>
		</item>
	</channel>
</rss>
