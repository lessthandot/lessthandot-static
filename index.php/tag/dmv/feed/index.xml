<?xml version="1.0" encoding="UTF-8"?><rss version="2.0"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:atom="http://www.w3.org/2005/Atom"
	xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
	xmlns:slash="http://purl.org/rss/1.0/modules/slash/"
	>

<channel>
	<title>dmv &#8211; LessthanDot</title>
	<atom:link href="/index.php/tag/dmv/feed/" rel="self" type="application/rss+xml" />
	<link>/</link>
	<description>A Technical Community for IT Professionals</description>
	<lastBuildDate>Sat, 09 Mar 2019 12:50:36 +0000</lastBuildDate>
	<language>en-US</language>
	<sy:updatePeriod>hourly</sy:updatePeriod>
	<sy:updateFrequency>1</sy:updateFrequency>
	<generator>https://wordpress.org/?v=4.6.1</generator>
	<item>
		<title>New Dynamic Management Views in SQL Server 2014 CTP1</title>
		<link>/index.php/datamgmt/dbprogramming/new-dynamic-management-views-in/</link>
		<comments>/index.php/datamgmt/dbprogramming/new-dynamic-management-views-in/#respond</comments>
		<pubDate>Tue, 25 Jun 2013 07:59:00 +0000</pubDate>
		<dc:creator><![CDATA[SQLDenis]]></dc:creator>
				<category><![CDATA[Database Programming]]></category>
		<category><![CDATA[Microsoft SQL Server]]></category>
		<category><![CDATA[Microsoft SQL Server Admin]]></category>
		<category><![CDATA[dmv]]></category>
		<category><![CDATA[dynamic management view]]></category>
		<category><![CDATA[hekaton]]></category>
		<category><![CDATA[sql server 2014]]></category>

		<guid isPermaLink="false">/index.php/2013/06/new-dynamic-management-views-in/</guid>
		<description><![CDATA[There are 26 new Dynamic Management Views in SQl Server 2014 CTP1.

Here is a list of these DMVs in alphabetical order

sys.dm_db_merge_requests
sys.dm_db_xtp_checkpoint
sys.dm_db_xtp_checkpoint_files
sys.dm_db_xtp_gc_cycle_stats
sys.dm_db_xtp_h&#8230;]]></description>
				<content:encoded><![CDATA[<p>There are 26 new Dynamic Management Views in SQl Server 2014 CTP1.</p>
<p>Here is a list of these DMVs in alphabetical order</p>
<p>sys.dm_db_merge_requests<br />
sys.dm_db_xtp_checkpoint<br />
sys.dm_db_xtp_checkpoint_files<br />
sys.dm_db_xtp_gc_cycle_stats<br />
sys.dm_db_xtp_hash_index_stats<br />
sys.dm_db_xtp_index_stats<br />
sys.dm_db_xtp_memory_consumers<br />
sys.dm_db_xtp_object_stats<br />
sys.dm_db_xtp_table_memory_stats<br />
sys.dm_db_xtp_transactions<br />
sys.dm_io_cluster_shared_volumes<br />
sys.dm_os_buffer_pool_extension_configuration<br />
sys.dm_resource_governor_resource_pool_volumes<br />
sys.dm_xe_database_session_event_actions<br />
sys.dm_xe_database_session_events<br />
sys.dm_xe_database_session_object_columns<br />
sys.dm_xe_database_session_targets<br />
sys.dm_xe_database_sessions<br />
sys.dm_xtp_consumer_memory_usage<br />
sys.dm_xtp_gc_queue_stats<br />
sys.dm_xtp_gc_stats<br />
sys.dm_xtp_memory_stats<br />
sys.dm_xtp_system_memory_consumers<br />
sys.dm_xtp_threads<br />
sys.dm_xtp_transaction_recent_rows<br />
sys.dm_xtp_transaction_stats</p>
<p>The DMVs that start with sys.dm_db_xtp or sys.dm_xtp are Hekaton (In-Memory OLTP) specific DMVs<br />
The DMVs that start with sys.dm_db_xtp return information about individual Hekaton enabled databases, The DMVs that start with sys.dm_xtp_* provide information about the instance.</p>
<p>There are also a bunch of Extended Events DMVs as well</p>
<p>In total there are now 204 DMVs in SQL Server 2014</p>
]]></content:encoded>
			<wfw:commentRss>/index.php/datamgmt/dbprogramming/new-dynamic-management-views-in/feed/</wfw:commentRss>
		<slash:comments>0</slash:comments>
		</item>
		<item>
		<title>An easier way to get SQL Server startup parameters: the sys.dm_server_registry dmv</title>
		<link>/index.php/datamgmt/dbadmin/an-easier-way-to-get/</link>
		<comments>/index.php/datamgmt/dbadmin/an-easier-way-to-get/#comments</comments>
		<pubDate>Sun, 24 Feb 2013 22:51:00 +0000</pubDate>
		<dc:creator><![CDATA[SQLDenis]]></dc:creator>
				<category><![CDATA[Database Administration]]></category>
		<category><![CDATA[Microsoft SQL Server]]></category>
		<category><![CDATA[Microsoft SQL Server Admin]]></category>
		<category><![CDATA[dmv]]></category>
		<category><![CDATA[dynamic management view]]></category>
		<category><![CDATA[registry]]></category>
		<category><![CDATA[sql server 2012]]></category>
		<category><![CDATA[startup options]]></category>

		<guid isPermaLink="false">/index.php/2013/02/an-easier-way-to-get/</guid>
		<description><![CDATA[When you install SQL Server, Setup will write a set of default startup options to the Windows registry. You can use the startup options to specify an alternate master database file, master database log file, or error log file.

Here is what the defaul&#8230;]]></description>
				<content:encoded><![CDATA[<p>When you install SQL Server, Setup will write a set of default startup options to the Windows registry. You can use the startup options to specify an alternate master database file, master database log file, or error log file.</p>
<p>Here is what the default options are according to Books on line</p>
<div class="tables">
<table>
<tr>
<th>Default startup options</th>
<th>Description</th>
</tr>
<tr>
<td>
<p><strong>-d </strong><span class="parameter">master_file_path</span></p>
</td>
<td>
<p>The fully qualified path for the master database file (typically, C:Program FilesMicrosoft SQL ServerMSSQL.<span class="parameter">n</span>MSSQLDatamaster.mdf). If you do not provide this option, the existing registry parameters are used.</p>
</td>
</tr>
<tr>
<td>
<p><strong>-e </strong><span class="parameter">error_log_path</span></p>
</td>
<td>
<p>The fully qualified path for the error log file (typically, C:Program FilesMicrosoft SQL ServerMSSQL.<span class="parameter">n</span>MSSQLLOGERRORLOG). If you do not provide this option, the existing registry parameters are used.</p>
</td>
</tr>
<tr>
<td>
<p><strong>-l </strong><span class="parameter">master_log_path</span></p>
</td>
<td>
<p>The fully qualified path for the master database log file (typically C:Program FilesMicrosoft SQL ServerMSSQL.<span class="parameter">n</span>MSSQLDatamastlog.ldf). If you do not specify this option, the existing registry parameters are used.</p>
</td>
</tr>
</table>
</div>
<p>If you want to get the startup parameters for SQL Server, you can either read the registry or open up SQL Server Configuration Manager and look at the Startup Parameters tab, here is what it looks like on my laptop</p>
<div class="image_block"><a href="/wp-content/uploads/blogs/DataMgmt/Denis/StartupParameters.PNG?mtime=1361752440"><img alt="SQL Server Configuration Manager: Startup Parameters" title="SQL Server Configuration Manager: Startup Parameters" src="/wp-content/uploads/blogs/DataMgmt/Denis/StartupParameters.PNG?mtime=1361752440" width="417" height="481" /></a></div>
<p>Did you know that you can do this in an easier way on SQL Server 2012? No, I am not talking about using the undocumented <code>xp_regread </code>stored procedure. A new dynamic management view was introduced, this view is sys.dm_server_registry.</p>
<p>Now if I want to see the parameters, all I need is</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
</pre></td><td class="de1"><pre class="de1"><span class="kw1">SELECT</span> registry_key, value_name, value_data
<span class="kw1">FROM</span> sys.<span class="me1">dm_server_registry</span>
<span class="kw1">WHERE</span> registry_key <span class="sy0">LIKE</span> N<span class="st0">'%MSSQLServerParameters'</span>;</pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">SELECT registry_key, value_name, value_data
FROM sys.dm_server_registry
WHERE registry_key LIKE N'%MSSQLServerParameters';</pre></div></div>

<p>Output will be something like the following, I made value_data shorter and left out registry_key from the output so that it would fit on one line</p>
<pre>value_name	value_data
SQLArg0	        -dC:MSSQLDATAmaster.mdf
SQLArg1	        -eC:MSSQLLogERRORLOG
SQLArg2	        -lC:MSSQLDATAmastlog.ldf</pre>
<p>There is more that you can do, let&#8217;s see I want to know some stuff about SQL agent</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
</pre></td><td class="de1"><pre class="de1"><span class="kw1">SELECT</span> &nbsp;value_name, value_data
<span class="kw1">FROM</span> sys.<span class="me1">dm_server_registry</span>
<span class="kw1">WHERE</span> registry_key <span class="sy0">LIKE</span> N<span class="st0">'%SQLServerAgent%'</span>;</pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">SELECT  value_name, value_data
FROM sys.dm_server_registry
WHERE registry_key LIKE N'%SQLServerAgent%';</pre></div></div>

<p>output</p>
<pre>value_name	        value_data
ObjectName	        NT ServiceSQLSERVERAGENT
ImagePath	        "C:MSSQLBinnSQLAGENT.EXE" -i MSSQLSERVER
Start	                2
DependOnService	        MSSQLSERVER 
ErrorLoggingLevel	3
JobHistoryMaxRows	1000
JobHistoryMaxRowsPerJob	100
WorkingDirectory	C:MSSQLJOBS</pre>
<p>To see all that this dmv returns, execute the following</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
</pre></td><td class="de1"><pre class="de1"><span class="kw1">SELECT</span> registry_key, value_name, value_data
<span class="kw1">FROM</span> sys.<span class="me1">dm_server_registry</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">SELECT registry_key, value_name, value_data
FROM sys.dm_server_registry</pre></div></div>

<p>It returns 99 rows on my laptop, most of the stuff is TCP/IP related.</p>
]]></content:encoded>
			<wfw:commentRss>/index.php/datamgmt/dbadmin/an-easier-way-to-get/feed/</wfw:commentRss>
		<slash:comments>1</slash:comments>
		</item>
		<item>
		<title>SQL Advent 2011 Day 22: Dynamic Management Views</title>
		<link>/index.php/datamgmt/datadesign/dynamic-management-views/</link>
		<comments>/index.php/datamgmt/datadesign/dynamic-management-views/#comments</comments>
		<pubDate>Thu, 22 Dec 2011 08:52:00 +0000</pubDate>
		<dc:creator><![CDATA[SQLDenis]]></dc:creator>
				<category><![CDATA[Data Modelling and Design]]></category>
		<category><![CDATA[dmv]]></category>
		<category><![CDATA[dynamic management views]]></category>
		<category><![CDATA[profiling]]></category>
		<category><![CDATA[sql server 2005]]></category>
		<category><![CDATA[sql server 2008]]></category>

		<guid isPermaLink="false">/index.php/2011/12/dynamic-management-views/</guid>
		<description><![CDATA[Today we are going to take a look at Dynamic Management Views. Dynamic Management Views is one of my favorite things that they have added to the SQL Server product. Instead of running all kinds of stored procedures, dbcc commands and selects from table, you can get all that information now from the Dynamic Management Views, all you need to know is what view will get you the information you need.
      
      
        
          I/O Related Dynamic Management Views and Functions
        
      
    
    
      
        
          Change Tracking Related Dynamic Management&#8230;]]></description>
				<content:encoded><![CDATA[<p>In my <a href="/index.php/DataMgmt/DataDesign/are-you-ready-for-sql">Are you ready for SQL Server 2012 or are you still partying like it is 1999?</a> post, I wrote about how you should start using SQL Server 2005 and SQL Server 2008 functionality now in order to prepare for SQL Server 2012. I still see tons of code that is written in the pre 2005 style and people still keep using those functions, procs and statements even though SQL Server 2005 and 2008 have much better functionality.</p>
<p>Today we are going to take a look at Dynamic Management Views. Dynamic Management Views is one of my favorite things that they have added to the SQL Server product. Instead of running all kinds of stored procedures, dbcc commands and selects from table, you can get all that information now from the Dynamic Management Views, all you need to know is what view will get you the information you need.</p>
<p>Let&#8217;s take a look at some examples. This query below will give me the top 50 most executed statements in stored procedures</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
</pre></td><td class="de1"><pre class="de1"><span class="kw1">SELECT</span> <span class="kw1">TOP</span> <span class="nu0">50</span> <span class="sy0">*</span> <span class="kw1">FROM</span><span class="br0">&#40;</span><span class="kw1">SELECT</span> <span class="kw1">COALESCE</span><span class="br0">&#40;</span><span class="kw2">OBJECT_NAME</span><span class="br0">&#40;</span>s2.<span class="me1">objectid</span><span class="br0">&#41;</span>,<span class="st0">'Ad-Hoc'</span><span class="br0">&#41;</span> <span class="kw1">AS</span> ProcName,execution_count,s2.<span class="me1">objectid</span>,
&nbsp; &nbsp; <span class="br0">&#40;</span><span class="kw1">SELECT</span> <span class="kw1">TOP</span> <span class="nu0">1</span> <span class="kw2">SUBSTRING</span><span class="br0">&#40;</span>s2.<span class="kw1">TEXT</span>,statement_start_offset <span class="sy0">/</span> <span class="nu0">2</span><span class="sy0">+</span><span class="nu0">1</span> ,
&nbsp; &nbsp; &nbsp; <span class="br0">&#40;</span> <span class="br0">&#40;</span><span class="kw1">CASE</span> <span class="kw1">WHEN</span> statement_end_offset <span class="sy0">=</span> <span class="sy0">-</span><span class="nu0">1</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span class="kw1">THEN</span> <span class="br0">&#40;</span><span class="kw2">LEN</span><span class="br0">&#40;</span><span class="kw1">CONVERT</span><span class="br0">&#40;</span><span class="kw1">NVARCHAR</span><span class="br0">&#40;</span><span class="kw2">MAX</span><span class="br0">&#41;</span>,s2.<span class="kw1">TEXT</span><span class="br0">&#41;</span><span class="br0">&#41;</span> <span class="sy0">*</span> <span class="nu0">2</span><span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span class="kw1">ELSE</span> statement_end_offset <span class="kw1">END</span><span class="br0">&#41;</span> &nbsp;<span class="sy0">-</span> statement_start_offset<span class="br0">&#41;</span> <span class="sy0">/</span> <span class="nu0">2</span><span class="sy0">+</span><span class="nu0">1</span><span class="br0">&#41;</span><span class="br0">&#41;</span> <span class="kw1">AS</span> sql_statement,
&nbsp; &nbsp; &nbsp; &nbsp;last_execution_time
<span class="kw1">FROM</span> sys.<span class="me1">dm_exec_query_stats</span> <span class="kw1">AS</span> s1
<span class="sy0">CROSS</span> APPLY sys.<span class="me1">dm_exec_sql_text</span><span class="br0">&#40;</span>sql_handle<span class="br0">&#41;</span> <span class="kw1">AS</span> s2 <span class="br0">&#41;</span> x
<span class="kw1">WHERE</span> sql_statement <span class="sy0">NOT</span> like <span class="st0">'SELECT * FROM(SELECT coalesce(object_name(s2.objectid)%'</span>
and OBJECTPROPERTYEX<span class="br0">&#40;</span>x.<span class="me1">objectid</span>,<span class="st0">'IsProcedure'</span><span class="br0">&#41;</span> <span class="sy0">=</span> <span class="nu0">1</span>
and exists <span class="br0">&#40;</span><span class="kw1">SELECT</span> <span class="nu0">1</span> <span class="kw1">FROM</span> sys.<span class="me1">procedures</span> s
<span class="kw1">WHERE</span> s.<span class="me1">is_ms_shipped</span> <span class="sy0">=</span> <span class="nu0">0</span>
and s.<span class="me1">name</span> <span class="sy0">=</span> x.<span class="me1">ProcName</span> <span class="br0">&#41;</span>
<span class="kw1">ORDER</span> <span class="kw1">BY</span> execution_count <span class="kw1">DESC</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">SELECT TOP 50 * FROM(SELECT COALESCE(OBJECT_NAME(s2.objectid),'Ad-Hoc') AS ProcName,execution_count,s2.objectid,
    (SELECT TOP 1 SUBSTRING(s2.TEXT,statement_start_offset / 2+1 ,
      ( (CASE WHEN statement_end_offset = -1
         THEN (LEN(CONVERT(NVARCHAR(MAX),s2.TEXT)) * 2)
         ELSE statement_end_offset END)  - statement_start_offset) / 2+1)) AS sql_statement,
       last_execution_time
FROM sys.dm_exec_query_stats AS s1
CROSS APPLY sys.dm_exec_sql_text(sql_handle) AS s2 ) x
WHERE sql_statement NOT like 'SELECT * FROM(SELECT coalesce(object_name(s2.objectid)%'
and OBJECTPROPERTYEX(x.objectid,'IsProcedure') = 1
and exists (SELECT 1 FROM sys.procedures s
WHERE s.is_ms_shipped = 0
and s.name = x.ProcName )
ORDER BY execution_count DESC</pre></div></div>

<p>Here is some sample output</p>
<pre>proc            count           objectid        statement               last_execution_time
----------------------------------------------------------------------------------------------
usp_AddLast	42757230	517576882	UPDATE dbo.LastSome	2010-04-14 14:15:33.433
usp_AddLast	42757230	517576882	IF EXISTS(   SELECT 	2010-04-14 14:15:33.433
usp_Update	20290	        725577623	update t  set pclose	2010-04-14 14:15:33.433
usp_Update	20288	        725577623	update t  set pclose	2010-04-14 14:15:33.453
usp_GetLast3	3188	        501576825	SELECT distinct l.Sy	2010-04-14 14:14:33.350
usp_Historical	168	        1029578706	select * from Histor	2010-04-14 14:02:08.190
usp_AddLast	3	        517576882	INSERT dbo.Sometable	2010-04-07 08:42:57.040
usp_GetLast2	3	        965578478	SELECT l.Symbol,   q	2010-04-06 16:14:49.523
usp_Historical2	2	        1045578763	select SomeNumber,G	2010-04-14 12:10:48.860
usp_GetLast	1	        901578250	SELECT distinct l.Sy	2010-02-12 09:11:59.840</pre>
<p>As you can see the first two rows are for the same stored procedure, what if you only want to know the procedure names? You can use the following query for that, I grouped them by name and then used the max count of the statement itself as the execution count, you could also use SUM instead of MAX. If you have a lot of if else conditions then max might not give you the whole picture.</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
</pre></td><td class="de1"><pre class="de1"><span class="kw1">SELECT</span> <span class="kw1">TOP</span> <span class="nu0">50</span> <span class="sy0">*</span> <span class="kw1">FROM</span>
&nbsp; &nbsp; <span class="br0">&#40;</span><span class="kw1">SELECT</span> <span class="kw2">OBJECT_NAME</span><span class="br0">&#40;</span>s2.<span class="me1">objectid</span><span class="br0">&#41;</span> <span class="kw1">AS</span> ProcName,
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw2">MAX</span><span class="br0">&#40;</span>execution_count<span class="br0">&#41;</span> <span class="kw1">AS</span> execution_count,s2.<span class="me1">objectid</span>,
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw2">MAX</span><span class="br0">&#40;</span>last_execution_time<span class="br0">&#41;</span> <span class="kw1">AS</span> last_execution_time
<span class="kw1">FROM</span> sys.<span class="me1">dm_exec_query_stats</span> <span class="kw1">AS</span> s1
<span class="sy0">CROSS</span> APPLY sys.<span class="me1">dm_exec_sql_text</span><span class="br0">&#40;</span>sql_handle<span class="br0">&#41;</span> <span class="kw1">AS</span> s2
<span class="kw1">GROUP</span> <span class="kw1">BY</span> <span class="kw2">OBJECT_NAME</span><span class="br0">&#40;</span>s2.<span class="me1">objectid</span><span class="br0">&#41;</span>,s2.<span class="me1">objectid</span><span class="br0">&#41;</span> x
<span class="kw1">WHERE</span> OBJECTPROPERTYEX<span class="br0">&#40;</span>x.<span class="me1">objectid</span>,<span class="st0">'IsProcedure'</span><span class="br0">&#41;</span> <span class="sy0">=</span> <span class="nu0">1</span>
<span class="sy0">AND</span> <span class="sy0">EXISTS</span> <span class="br0">&#40;</span><span class="kw1">SELECT</span> <span class="nu0">1</span> <span class="kw1">FROM</span> sys.<span class="me1">procedures</span> s
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">WHERE</span> s.<span class="me1">is_ms_shipped</span> <span class="sy0">=</span> <span class="nu0">0</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="sy0">AND</span> s.<span class="me1">name</span> <span class="sy0">=</span> x.<span class="me1">ProcName</span> <span class="br0">&#41;</span>
<span class="kw1">ORDER</span> <span class="kw1">BY</span> execution_count <span class="kw1">DESC</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">SELECT TOP 50 * FROM
    (SELECT OBJECT_NAME(s2.objectid) AS ProcName,
        MAX(execution_count) AS execution_count,s2.objectid,
        MAX(last_execution_time) AS last_execution_time
FROM sys.dm_exec_query_stats AS s1
CROSS APPLY sys.dm_exec_sql_text(sql_handle) AS s2
GROUP BY OBJECT_NAME(s2.objectid),s2.objectid) x
WHERE OBJECTPROPERTYEX(x.objectid,'IsProcedure') = 1
AND EXISTS (SELECT 1 FROM sys.procedures s
            WHERE s.is_ms_shipped = 0
            AND s.name = x.ProcName )
ORDER BY execution_count DESC</pre></div></div>

<p>Here is the output</p>
<pre>proc            count           objectid        last_execution_time
----------------------------------------------------------------------
usp_AddLast	42667941	517576882	2010-04-14 14:08:48.287
usp_Update	20263		725577623	2010-04-14 14:08:48.307
usp_GetLast3	3180		501576825	2010-04-14 14:07:10.513
usp_Historical	168		1029578706	2010-04-14 14:02:08.190
usp_GetLast2	3		965578478	2010-04-06 16:14:49.523
usp_Historical2	2		1045578763	2010-04-14 12:10:48.860
usp_GetLast	1		901578250	2010-02-12 09:11:59.840</pre>
<p></p>
<p>Imagine doing stuff like this in the SQL Server 2000 days&#8230;..better get profiler and some traces running.</p>
<p>What if you want to know the stored procedures with the highest average CPU time in SQL Server? That is pretty easy as well, here is the query for that</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
</pre></td><td class="de1"><pre class="de1"><span class="kw1">SELECT</span> <span class="kw1">TOP</span> <span class="nu0">50</span> <span class="sy0">*</span> <span class="kw1">FROM</span>
&nbsp; &nbsp; <span class="br0">&#40;</span><span class="kw1">SELECT</span> <span class="kw2">OBJECT_NAME</span><span class="br0">&#40;</span>s2.<span class="me1">objectid</span><span class="br0">&#41;</span> <span class="kw1">AS</span> ProcName,
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw2">SUM</span><span class="br0">&#40;</span>s1.<span class="me1">total_worker_time</span><span class="sy0">/</span>s1.<span class="me1">execution_count</span><span class="br0">&#41;</span> <span class="kw1">AS</span> AverageCPUTime,s2.<span class="me1">objectid</span>,
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw2">SUM</span><span class="br0">&#40;</span>execution_count<span class="br0">&#41;</span> <span class="kw1">AS</span> execution_count
<span class="kw1">FROM</span> sys.<span class="me1">dm_exec_query_stats</span> <span class="kw1">AS</span> s1
<span class="sy0">CROSS</span> APPLY sys.<span class="me1">dm_exec_sql_text</span><span class="br0">&#40;</span>sql_handle<span class="br0">&#41;</span> <span class="kw1">AS</span> s2
<span class="kw1">GROUP</span> <span class="kw1">BY</span> <span class="kw2">OBJECT_NAME</span><span class="br0">&#40;</span>s2.<span class="me1">objectid</span><span class="br0">&#41;</span>,objectid<span class="br0">&#41;</span> x
<span class="kw1">WHERE</span> OBJECTPROPERTYEX<span class="br0">&#40;</span>x.<span class="me1">objectid</span>,<span class="st0">'IsProcedure'</span><span class="br0">&#41;</span> <span class="sy0">=</span> <span class="nu0">1</span>
<span class="sy0">AND</span> <span class="sy0">EXISTS</span> <span class="br0">&#40;</span><span class="kw1">SELECT</span> <span class="nu0">1</span> <span class="kw1">FROM</span> sys.<span class="me1">procedures</span> s
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">WHERE</span> s.<span class="me1">is_ms_shipped</span> <span class="sy0">=</span> <span class="nu0">0</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="sy0">AND</span> s.<span class="me1">name</span> <span class="sy0">=</span> x.<span class="me1">ProcName</span> <span class="br0">&#41;</span>
<span class="kw1">ORDER</span> <span class="kw1">BY</span> AverageCPUTime <span class="kw1">DESC</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">SELECT TOP 50 * FROM
    (SELECT OBJECT_NAME(s2.objectid) AS ProcName,
        SUM(s1.total_worker_time/s1.execution_count) AS AverageCPUTime,s2.objectid,
        SUM(execution_count) AS execution_count
FROM sys.dm_exec_query_stats AS s1
CROSS APPLY sys.dm_exec_sql_text(sql_handle) AS s2
GROUP BY OBJECT_NAME(s2.objectid),objectid) x
WHERE OBJECTPROPERTYEX(x.objectid,'IsProcedure') = 1
AND EXISTS (SELECT 1 FROM sys.procedures s
            WHERE s.is_ms_shipped = 0
            AND s.name = x.ProcName )
ORDER BY AverageCPUTime DESC</pre></div></div>

<p>
Output</p>
<pre>proc            AverageCPUTime objectid    execution_count
----------------------------------------------------------------------
usp_Update	17152	       725577623	41074
usp_GetLast3	333		965578478	3
usp_GetLast2	145		501576825	3237
usp_Historical	70		1029578706	170
usp_AddLast	36		517576882	87154735
usp_GetLast	0		901578250	1
usp_Historical2	0		1045578763	2</pre>
<p>Wow, that usp_Update proc really sucks  <img src="https://s.w.org/images/core/emoji/2/72x72/1f642.png" alt="🙂" class="wp-smiley" style="height: 1em; max-height: 1em;" /></p>
<p>Here is another one of my favorite queries. How long will the database restore take?<br />
Run the query below and you will know</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
</pre></td><td class="de1"><pre class="de1"><span class="kw1">SELECT</span>
&nbsp; &nbsp; d.<span class="me1">PERCENT_COMPLETE</span> <span class="kw1">AS</span> <span class="br0">&#91;</span><span class="sy0">%</span>Complete<span class="br0">&#93;</span>,
&nbsp; &nbsp; d.<span class="me1">TOTAL_ELAPSED_TIME</span><span class="sy0">/</span><span class="nu0">60000</span> <span class="kw1">AS</span> ElapsedTimeMin,
&nbsp; &nbsp; d.<span class="me1">ESTIMATED_COMPLETION_TIME</span><span class="sy0">/</span><span class="nu0">60000</span> &nbsp; <span class="kw1">AS</span> TimeRemainingMin,
&nbsp; &nbsp; d.<span class="me1">TOTAL_ELAPSED_TIME</span><span class="sy0">*</span><span class="nu0">0.00000024</span> <span class="kw1">AS</span> ElapsedTimeHours,
&nbsp; &nbsp; d.<span class="me1">ESTIMATED_COMPLETION_TIME</span><span class="sy0">*</span><span class="nu0">0.00000024</span> &nbsp;<span class="kw1">AS</span> TimeRemainingHours,
&nbsp; &nbsp; s.<span class="kw1">TEXT</span> <span class="kw1">AS</span> Command
<span class="kw1">FROM</span> &nbsp; &nbsp;sys.<span class="me1">dm_exec_requests</span> d
<span class="sy0">CROSS</span> APPLY sys.<span class="me1">dm_exec_sql_text</span><span class="br0">&#40;</span>d.<span class="me1">sql_handle</span><span class="br0">&#41;</span><span class="kw1">AS</span> s
<span class="kw1">WHERE</span> &nbsp;d.<span class="me1">COMMAND</span> <span class="sy0">LIKE</span> <span class="st0">'RESTORE DATABASE%'</span>
<span class="kw1">ORDER</span> &nbsp; <span class="kw1">BY</span> <span class="nu0">2</span> <span class="kw1">DESC</span>, <span class="nu0">3</span> <span class="kw1">DESC</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">SELECT
    d.PERCENT_COMPLETE AS [%Complete],
    d.TOTAL_ELAPSED_TIME/60000 AS ElapsedTimeMin,
    d.ESTIMATED_COMPLETION_TIME/60000   AS TimeRemainingMin,
    d.TOTAL_ELAPSED_TIME*0.00000024 AS ElapsedTimeHours,
    d.ESTIMATED_COMPLETION_TIME*0.00000024  AS TimeRemainingHours,
    s.TEXT AS Command
FROM    sys.dm_exec_requests d
CROSS APPLY sys.dm_exec_sql_text(d.sql_handle)AS s
WHERE  d.COMMAND LIKE 'RESTORE DATABASE%'
ORDER   BY 2 DESC, 3 DESC</pre></div></div>

<p>For all the sessions that are connected, what state are they in? The query below will give you a quick count</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
</pre></td><td class="de1"><pre class="de1"><span class="kw1">SELECT</span> <span class="kw2">COUNT</span><span class="br0">&#40;</span><span class="sy0">*</span><span class="br0">&#41;</span> <span class="kw1">AS</span> StatusCount,<span class="kw1">CASE</span> status
<span class="kw1">WHEN</span> <span class="st0">'Running'</span> <span class="kw1">THEN</span> <span class="st0">'Running - Currently running one or more requests'</span>
<span class="kw1">WHEN</span> <span class="st0">'Sleeping '</span> <span class="kw1">THEN</span> <span class="st0">'Sleeping - Currently running no requests'</span>
<span class="kw1">WHEN</span> <span class="st0">'Preconnect '</span> <span class="kw1">THEN</span> <span class="st0">'Session is in the Resource Governor classifier'</span>
<span class="kw1">ELSE</span> <span class="st0">'Dormant – Session is in prelogin state'</span> <span class="kw1">END</span> status
<span class="kw1">FROM</span> sys.<span class="me1">dm_exec_sessions</span>
<span class="kw1">GROUP</span> <span class="kw1">BY</span> status</pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">SELECT COUNT(*) AS StatusCount,CASE status
WHEN 'Running' THEN 'Running - Currently running one or more requests'
WHEN 'Sleeping ' THEN 'Sleeping - Currently running no requests'
WHEN 'Preconnect ' THEN 'Session is in the Resource Governor classifier'
ELSE 'Dormant – Session is in prelogin state' END status
FROM sys.dm_exec_sessions
GROUP BY status</pre></div></div>

<p>Just a quick count of all the transaction isolation levels</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
</pre></td><td class="de1"><pre class="de1"><span class="kw1">SELECT</span> <span class="kw2">COUNT</span><span class="br0">&#40;</span><span class="sy0">*</span><span class="br0">&#41;</span>,<span class="kw1">CASE</span> transaction_isolation_level
<span class="kw1">WHEN</span> <span class="nu0">0</span> <span class="kw1">THEN</span> <span class="st0">'Unspecified'</span>
<span class="kw1">WHEN</span> <span class="nu0">1</span> <span class="kw1">THEN</span> <span class="st0">'ReadUncomitted'</span>
<span class="kw1">WHEN</span> <span class="nu0">2</span> <span class="kw1">THEN</span> <span class="st0">'Readcomitted'</span>
<span class="kw1">WHEN</span> <span class="nu0">3</span> <span class="kw1">THEN</span> <span class="st0">'Repeatable'</span>
<span class="kw1">WHEN</span> <span class="nu0">4</span> <span class="kw1">THEN</span> <span class="st0">'Serializable'</span>
<span class="kw1">WHEN</span> <span class="nu0">5</span> <span class="kw1">THEN</span> <span class="st0">'Snapshot'</span> <span class="kw1">END</span> <span class="kw1">AS</span> TRANSACTION_ISOLATION_LEVEL
<span class="kw1">FROM</span> sys.<span class="me1">dm_exec_sessions</span>
<span class="kw1">GROUP</span> <span class="kw1">BY</span> transaction_isolation_level</pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">SELECT COUNT(*),CASE transaction_isolation_level
WHEN 0 THEN 'Unspecified'
WHEN 1 THEN 'ReadUncomitted'
WHEN 2 THEN 'Readcomitted'
WHEN 3 THEN 'Repeatable'
WHEN 4 THEN 'Serializable'
WHEN 5 THEN 'Snapshot' END AS TRANSACTION_ISOLATION_LEVEL
FROM sys.dm_exec_sessions
GROUP BY transaction_isolation_level</pre></div></div>

<p>To see what the SET options are that you are using in your connection, use the following query, leave out the WHERE clause if you want to know it for all connections. The query returns pretty much what DBCC USERINFO returns but you can run this for all connected sessions in one shot</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
</pre></td><td class="de1"><pre class="de1"><span class="kw1">SELECT</span> <span class="kw2">@@SPID</span> <span class="kw1">AS</span> SPID,
&nbsp;text_size,
&nbsp;<span class="kw1">language</span>,
&nbsp;lock_timeout,
&nbsp;date_first,
&nbsp;date_format,
<span class="kw1">CASE</span> quoted_identifier
<span class="kw1">WHEN</span> <span class="nu0">1</span> <span class="kw1">THEN</span> <span class="st0">'SET'</span> <span class="kw1">ELSE</span> <span class="st0">'OFF'</span> <span class="kw1">END</span> QUOTED_IDENTIFIER,
<span class="kw1">CASE</span> arithabort
<span class="kw1">WHEN</span> <span class="nu0">1</span> <span class="kw1">THEN</span> <span class="st0">'SET'</span> <span class="kw1">ELSE</span> <span class="st0">'OFF'</span> <span class="kw1">END</span> ARITHAB<span class="sy0">OR</span>T,
<span class="kw1">CASE</span> ansi_null_dflt_on
<span class="kw1">WHEN</span> <span class="nu0">1</span> <span class="kw1">THEN</span> <span class="st0">'SET'</span> <span class="kw1">ELSE</span> <span class="st0">'OFF'</span> <span class="kw1">END</span> ANSI_<span class="sy0">NULL</span>_DFLT_ON,
<span class="kw1">CASE</span> ansi_defaults
<span class="kw1">WHEN</span> <span class="nu0">1</span> <span class="kw1">THEN</span> <span class="st0">'SET'</span> <span class="kw1">ELSE</span> <span class="st0">'OFF'</span> <span class="kw1">END</span> ANSI_DEFAULTS ,
<span class="kw1">CASE</span> ansi_warnings
<span class="kw1">WHEN</span> <span class="nu0">1</span> <span class="kw1">THEN</span> <span class="st0">'SET'</span> <span class="kw1">ELSE</span> <span class="st0">'OFF'</span> <span class="kw1">END</span> ANSI_WARN<span class="sy0">IN</span>GS,
<span class="kw1">CASE</span> ansi_padding
<span class="kw1">WHEN</span> <span class="nu0">1</span> <span class="kw1">THEN</span> <span class="st0">'SET'</span> <span class="kw1">ELSE</span> <span class="st0">'OFF'</span> <span class="kw1">END</span> ANSI_PADD<span class="sy0">IN</span>G,
<span class="kw1">CASE</span> ansi_nulls
<span class="kw1">WHEN</span> <span class="nu0">1</span> <span class="kw1">THEN</span> <span class="st0">'SET'</span> <span class="kw1">ELSE</span> <span class="st0">'OFF'</span> <span class="kw1">END</span> ANSI_<span class="sy0">NULL</span>S,
<span class="kw1">CASE</span> concat_null_yields_null
<span class="kw1">WHEN</span> <span class="nu0">1</span> <span class="kw1">THEN</span> <span class="st0">'SET'</span> <span class="kw1">ELSE</span> <span class="st0">'OFF'</span> <span class="kw1">END</span> CONCAT_<span class="sy0">NULL</span>_YIELDS_<span class="sy0">NULL</span>,
<span class="kw1">CASE</span> transaction_isolation_level
<span class="kw1">WHEN</span> <span class="nu0">0</span> <span class="kw1">THEN</span> <span class="st0">'Unspecified'</span>
<span class="kw1">WHEN</span> <span class="nu0">1</span> <span class="kw1">THEN</span> <span class="st0">'ReadUncomitted'</span>
<span class="kw1">WHEN</span> <span class="nu0">2</span> <span class="kw1">THEN</span> <span class="st0">'Readcomitted'</span>
<span class="kw1">WHEN</span> <span class="nu0">3</span> <span class="kw1">THEN</span> <span class="st0">'Repeatable'</span>
<span class="kw1">WHEN</span> <span class="nu0">4</span> <span class="kw1">THEN</span> <span class="st0">'Serializable'</span>
<span class="kw1">WHEN</span> <span class="nu0">5</span> <span class="kw1">THEN</span> <span class="st0">'Snapshot'</span> <span class="kw1">END</span> <span class="kw1">AS</span> TRANSACTION_ISOLATION_LEVEL
<span class="kw1">FROM</span> sys.<span class="me1">dm_exec_sessions</span>
<span class="kw1">WHERE</span> session_id <span class="sy0">=</span> <span class="kw2">@@SPID</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">SELECT @@SPID AS SPID,
 text_size,
 language,
 lock_timeout,
 date_first,
 date_format,
CASE quoted_identifier
WHEN 1 THEN 'SET' ELSE 'OFF' END QUOTED_IDENTIFIER,
CASE arithabort
WHEN 1 THEN 'SET' ELSE 'OFF' END ARITHABORT,
CASE ansi_null_dflt_on
WHEN 1 THEN 'SET' ELSE 'OFF' END ANSI_NULL_DFLT_ON,
CASE ansi_defaults
WHEN 1 THEN 'SET' ELSE 'OFF' END ANSI_DEFAULTS ,
CASE ansi_warnings
WHEN 1 THEN 'SET' ELSE 'OFF' END ANSI_WARNINGS,
CASE ansi_padding
WHEN 1 THEN 'SET' ELSE 'OFF' END ANSI_PADDING,
CASE ansi_nulls
WHEN 1 THEN 'SET' ELSE 'OFF' END ANSI_NULLS,
CASE concat_null_yields_null
WHEN 1 THEN 'SET' ELSE 'OFF' END CONCAT_NULL_YIELDS_NULL,
CASE transaction_isolation_level
WHEN 0 THEN 'Unspecified'
WHEN 1 THEN 'ReadUncomitted'
WHEN 2 THEN 'Readcomitted'
WHEN 3 THEN 'Repeatable'
WHEN 4 THEN 'Serializable'
WHEN 5 THEN 'Snapshot' END AS TRANSACTION_ISOLATION_LEVEL
FROM sys.dm_exec_sessions
WHERE session_id = @@SPID</pre></div></div>

<p>Here is another one where you had to run performance counter back in the 2000 days. This query will get you the page life expectancy for your server</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
</pre></td><td class="de1"><pre class="de1"><span class="kw1">SELECT</span> <span class="sy0">*</span>
<span class="kw1">FROM</span> sys.<span class="me1">dm_os_performance_counters</span> &nbsp;
<span class="kw1">WHERE</span> counter_name <span class="sy0">=</span> <span class="st0">'Page life expectancy'</span>
<span class="sy0">AND</span> <span class="kw2">OBJECT_NAME</span> <span class="sy0">=</span> <span class="st0">'SQLServer:Buffer Manager'</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">SELECT *
FROM sys.dm_os_performance_counters  
WHERE counter_name = 'Page life expectancy'
AND OBJECT_NAME = 'SQLServer:Buffer Manager'</pre></div></div>

<p>Here is another short one, what account are my services running under?</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
</pre></td><td class="de1"><pre class="de1"><span class="kw1">SELECT</span> &nbsp;<span class="kw1">distinct</span> servicename,
&nbsp;service_account,status_desc
<span class="kw1">FROM</span> &nbsp; &nbsp;sys.<span class="me1">dm_server_services</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">SELECT  distinct servicename,
 service_account,status_desc
FROM    sys.dm_server_services</pre></div></div>

<p>Output</p>
<pre>servicename			service_account			status_desc
SQL Server (MSSQLSERVER)	NT ServiceMSSQLSERVER		Running
SQL Server Agent (MSSQLSERVER)	NT ServiceSQLSERVERAGENT	Stopped</pre>
<p>I only listed a handful of Dynamic Management Views, SQL Server 2008 R2 has 135 Dynamic Management Views, SQL Server 2012 as of CTP 3 has 174 Dynamic Management Views</p>
<p>Here is how you can get a list of all of them</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
</pre></td><td class="de1"><pre class="de1"><span class="kw1">SELECT</span> <span class="sy0">*</span> <span class="kw1">FROM</span> master.<span class="me1">sys</span>.<span class="me1">sysobjects</span>
<span class="kw1">WHERE</span> name like <span class="st0">'dm[_]%'</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">SELECT * FROM master.sys.sysobjects
WHERE name like 'dm[_]%'</pre></div></div>

<p>The list below links to Books On Line for related Dynamic Management Views, if you want to know about mirroring Dynamic Management Views then click on the <a href="http://msdn.microsoft.com/en-us/library/ms173571.aspx">Database Mirroring Related Dynamic Management Views</a> link. I would say, go to each section and maybe spend a week on it&#8230;by the middle of spring you should be the Dynamic Management Views master  <img src="https://s.w.org/images/core/emoji/2/72x72/1f642.png" alt="🙂" class="wp-smiley" style="height: 1em; max-height: 1em;" /></p>
<p><a href="http://msdn.microsoft.com/en-us/library/bb522478.aspx">Change Data Capture Related Dynamic Management Views</a><br />
<a href="http://msdn.microsoft.com/en-us/library/ms190314.aspx">I/O Related Dynamic Management Views and Functions</a><br />
<a href="http://msdn.microsoft.com/en-us/library/cc627419.aspx">Change Tracking Related Dynamic Management Views</a><br />
<a href="http://msdn.microsoft.com/en-us/library/bb630390.aspx">Object Related Dynamic Management Views and Functions</a><br />
<a href="http://msdn.microsoft.com/en-us/library/ms179982.aspx">Common Language Runtime Related Dynamic Management Views</a><br />
<a href="http://msdn.microsoft.com/en-us/library/ms187407.aspx">Query Notifications Related Dynamic Management Views</a><br />
<a href="http://msdn.microsoft.com/en-us/library/ms173571.aspx">Database Mirroring Related Dynamic Management Views</a><br />
<a href="http://msdn.microsoft.com/en-us/library/ms176053.aspx">Replication Related Dynamic Management Views</a><br />
<a href="http://msdn.microsoft.com/en-us/library/ms181626.aspx">Database Related Dynamic Management Views</a><br />
<a href="http://msdn.microsoft.com/en-us/library/bb934218.aspx">Resource Governor Dynamic Management Views</a><br />
<a href="http://msdn.microsoft.com/en-us/library/ms188068.aspx">Execution Related Dynamic Management Views and Functions</a><br />
<a href="http://msdn.microsoft.com/en-us/library/ms176110.aspx">Service Broker Related Dynamic Management Views</a><br />
<a href="http://msdn.microsoft.com/en-us/library/bb677293.aspx">Extended Events Dynamic Management Views</a><br />
<a href="http://msdn.microsoft.com/en-us/library/ms176083.aspx">SQL Server Operating System Related Dynamic Management Views</a><br />
<a href="http://msdn.microsoft.com/en-us/library/ms174971.aspx">Full-Text Search Related Dynamic Management Views</a><br />
<a href="http://msdn.microsoft.com/en-us/library/ms178621.aspx">Transaction Related Dynamic Management Views and Functions</a><br />
<a href="http://msdn.microsoft.com/en-us/library/ms187974.aspx">Index Related Dynamic Management Views and Functions</a><br />
<a href="http://msdn.microsoft.com/en-us/library/bb677257.aspx">Security Related Dynamic Management Views</a><br />
<a href="http://msdn.microsoft.com/en-us/library/ff773106.aspx">Filestream-Related Dynamic Management Views (Transact-SQL)</a></p>
<p>That is all for today, come back tomorrow for the next part in this series</p>
]]></content:encoded>
			<wfw:commentRss>/index.php/datamgmt/datadesign/dynamic-management-views/feed/</wfw:commentRss>
		<slash:comments>1</slash:comments>
		</item>
		<item>
		<title>SQL Advent 2011 Day 2: system tables and catalog views</title>
		<link>/index.php/datamgmt/datadesign/sql-advent-2011-day-2/</link>
		<comments>/index.php/datamgmt/datadesign/sql-advent-2011-day-2/#respond</comments>
		<pubDate>Fri, 02 Dec 2011 09:07:00 +0000</pubDate>
		<dc:creator><![CDATA[SQLDenis]]></dc:creator>
				<category><![CDATA[Data Modelling and Design]]></category>
		<category><![CDATA[Microsoft SQL Server Admin]]></category>
		<category><![CDATA[administration]]></category>
		<category><![CDATA[dmv]]></category>
		<category><![CDATA[sql server 2005]]></category>
		<category><![CDATA[sql server 2008]]></category>
		<category><![CDATA[views]]></category>

		<guid isPermaLink="false">/index.php/2011/12/sql-advent-2011-day-2/</guid>
		<description><![CDATA[With the introduction of SQL Server 2005 system tables have been deprecated, there are three new set of objects to replace system tables: Compatibility Views, Dynamic Management Views and Catalog Views.

Compatibility views replace the system tables, so while you still can use syscolumns, you should get into the habit of using sys.columns instead]]></description>
				<content:encoded><![CDATA[<p>In my <a href="/index.php/DataMgmt/DataDesign/are-you-ready-for-sql">Are you ready for SQL Server 2012 or are you still partying like it is 1999?</a> post, I wrote about how you should start using SQL Server 2005 and SQL Server 2008 functionality now in order to prepare for SQL Server 2012. I still see tons of code that is written in the pre 2005 style and people still keep using those functions, procs and statements even though SQL Server 2005 and 2008 have much better functionality.</p>
<p>With the introduction of SQL Server 2005 system tables have been deprecated, there are three new set of objects to replace system tables: Compatibility Views, Dynamic Management Views and Catalog Views. </p>
<p>Compatibility views replace the system tables, so while you still can use syscolumns, you should get into the habit of using sys.columns instead</p>
<h2>Every database</h2>
<p>The following table maps the system tables or functions that live in every database in SQL Server 2000 to their equivalent system views or functions in SQL Server 2008.</p>
<div class="tables">
<table>
<tr>
<th>	System table or function	</th>
<th>	System view or function	</th>
<th>	Type of view or function	</th>
</tr>
<tr>
<td>	fn_virtualfilestats	</td>
<td>	sys.dm_io_virtual_file_stats	</td>
<td>	Dynamic management view	</td>
</tr>
<tr>
<td>	syscolumns	</td>
<td>	sys.columns	</td>
<td>	Catalog view	</td>
</tr>
<tr>
<td>	syscomments	</td>
<td>	sys.sql_modules	</td>
<td>	Catalog view	</td>
</tr>
<tr>
<td>	sysconstraints	</td>
<td>	sys.check_constraints	</td>
<td>	Catalog view	</td>
</tr>
<tr>
<td>		</td>
<td>	sys.default_constraints	</td>
<td>	Catalog view	</td>
</tr>
<tr>
<td>		</td>
<td>	sys.key_constraints	</td>
<td>	Catalog view	</td>
</tr>
<tr>
<td>		</td>
<td>	sys.foreign_keys	</td>
<td>	Catalog view	</td>
</tr>
<tr>
<td>	sysdepends	</td>
<td>	sys.sql_expression_dependencies	</td>
<td>	Catalog view	</td>
</tr>
<tr>
<td>	sysfilegroups	</td>
<td>	sys.filegroups	</td>
<td>	Catalog view	</td>
</tr>
<tr>
<td>	sysfiles	</td>
<td>	sys.database_files	</td>
<td>	Catalog view	</td>
</tr>
<tr>
<td>	sysforeignkeys	</td>
<td>	sys.foreign_key_columns	</td>
<td>	Catalog view	</td>
</tr>
<tr>
<td>	sysindexes	</td>
<td>	sys.indexes	</td>
<td>	Catalog view	</td>
</tr>
<tr>
<td>		</td>
<td>	sys.partitions	</td>
<td>	Catalog view	</td>
</tr>
<tr>
<td>		</td>
<td>	sys.allocation_units	</td>
<td>	Catalog view	</td>
</tr>
<tr>
<td>		</td>
<td>	sys.dm_db_partition_stats	</td>
<td>	Dynamic management view	</td>
</tr>
<tr>
<td>	sysindexkeys	</td>
<td>	sys.index_columns	</td>
<td>	Catalog view	</td>
</tr>
<tr>
<td>	sysmembers	</td>
<td>	sys.database_role_members	</td>
<td>	Catalog view	</td>
</tr>
<tr>
<td>	sysobjects	</td>
<td>	sys.objects	</td>
<td>	Catalog view	</td>
</tr>
<tr>
<td>	syspermissions	</td>
<td>	sys.database_permissions	</td>
<td>	Catalog view	</td>
</tr>
<tr>
<td>		</td>
<td>	sys.server_permissions	</td>
<td>	Catalog view	</td>
</tr>
<tr>
<td>	sysprotects	</td>
<td>	sys.database_permissions	</td>
<td>	Catalog view	</td>
</tr>
<tr>
<td>		</td>
<td>	sys.server_permissions	</td>
<td>	Catalog view	</td>
</tr>
<tr>
<td>	sysreferences	</td>
<td>	sys.foreign_keys	</td>
<td>	Catalog view	</td>
</tr>
<tr>
<td>	systypes	</td>
<td>	sys.types	</td>
<td>	Catalog view	</td>
</tr>
<tr>
<td>	sysusers	</td>
<td>	sys.database_principals	</td>
<td>	Catalog view	</td>
</tr>
<tr>
<td>	sysfulltextcatalogs	</td>
<td>	sys.fulltext_catalogs	</td>
<td>	Catalog view	</td>
</tr>
</table>
</div>
<p>
<h2>Master database</h2>
<p>The following table maps the system tables inside the master database in SQL Server 2000 to their equivalent system views or functions in SQL Server 2008.</p>
<div class="tables">
<table>
<tr>
<th>	System table	</th>
<th>	System views or functions	</th>
<th>	Type of view or function	</th>
</tr>
<tr>
<td>	sysaltfiles	</td>
<td>	sys.master_files	</td>
<td>	Catalog view	</td>
</tr>
<tr>
<td>	syscacheobjects	</td>
<td>	sys.dm_exec_cached_plans	</td>
<td>	Dynamic management view	</td>
</tr>
<tr>
<td>		</td>
<td>	sys.dm_exec_plan_attributes ()	</td>
<td>	Dynamic management view	</td>
</tr>
<tr>
<td>		</td>
<td>	sys.dm_exec_sql_text	</td>
<td>	Dynamic management view	</td>
</tr>
<tr>
<td>		</td>
<td>	sys.dm_exec_cached_plan_dependent_objects	</td>
<td>	Dynamic management view	</td>
</tr>
<tr>
<td>	syscharsets	</td>
<td>	sys.syscharsets	</td>
<td>	Compatibility view	</td>
</tr>
<tr>
<td>	sysconfigures	</td>
<td>	sys.configurations	</td>
<td>	Catalog view	</td>
</tr>
<tr>
<td>	syscurconfigs	</td>
<td>	sys.configurations	</td>
<td>	Catalog view	</td>
</tr>
<tr>
<td>	sysdatabases	</td>
<td>	sys.databases	</td>
<td>	Catalog view	</td>
</tr>
<tr>
<td>	sysdevices	</td>
<td>	sys.backup_devices	</td>
<td>	Catalog view	</td>
</tr>
<tr>
<td>	syslanguages	</td>
<td>	sys.syslanguages	</td>
<td>	Compatibility view	</td>
</tr>
<tr>
<td>	syslockinfo	</td>
<td>	sys.dm_tran_locks	</td>
<td>	Dynamic management view	</td>
</tr>
<tr>
<td>	syslocks	</td>
<td>	sys.dm_tran_locks	</td>
<td>	Dynamic management view	</td>
</tr>
<tr>
<td>	syslogins	</td>
<td>	sys.server_principals	</td>
<td>	Catalog view	</td>
</tr>
<tr>
<td>		</td>
<td>	sys.sql_logins	</td>
<td>		</td>
</tr>
<tr>
<td>	sysmessages	</td>
<td>	sys.messages	</td>
<td>	Catalog view	</td>
</tr>
<tr>
<td>	sysoledbusers	</td>
<td>	sys.linked_logins	</td>
<td>	Catalog view	</td>
</tr>
<tr>
<td>	sysopentapes	</td>
<td>	sys.dm_io_backup_tapes	</td>
<td>	Dynamic management view	</td>
</tr>
<tr>
<td>	sysperfinfo	</td>
<td>	sys.dm_os_performance_counters	</td>
<td>	Dynamic management view	</td>
</tr>
<tr>
<td>	sysprocesses	</td>
<td>	sys.dm_exec_connections	</td>
<td>	Dynamic management view	</td>
</tr>
<tr>
<td>		</td>
<td>	sys.dm_exec_sessions	</td>
<td>	Dynamic management view	</td>
</tr>
<tr>
<td>		</td>
<td>	sys.dm_exec_requests	</td>
<td>	Dynamic management view	</td>
</tr>
<tr>
<td>	sysremotelogins	</td>
<td>	sys.remote_logins	</td>
<td>	Catalog view	</td>
</tr>
<tr>
<td>	sysservers	</td>
<td>	sys.servers	</td>
<td>	Catalog view	</td>
</tr>
</table>
</div>
<p>As you can see in the tables above, the sysobjects system table maps to sys.objects.  In SQL Server 2005 we actually have a couple of views that take parts of sysobjects, below are these views</p>
<p>sys.tables<br />
sys.procedures<br />
sys.views<br />
sys.triggers</p>
<p>As you can see, you now have a view for just tables, triggers, procedures and views.</p>
<p></p>
<h2>Some examples</h2>
<p>Although Dynamic Management Views are listed in the tables above, I will not give examples in this post, I will have another post in this series focusing just on Dynamic Management Views.</p>
<p>If you wanted a list of all stored procedures in SQL Server 2000, you would typically do something like the following</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
</pre></td><td class="de1"><pre class="de1"><span class="kw1">SELECT</span> name 
<span class="kw1">FROM</span> sysobjects
<span class="kw1">WHERE</span> type <span class="sy0">=</span> <span class="st0">'P'</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">SELECT name 
FROM sysobjects
WHERE type = 'P'</pre></div></div>

<p>In SQL Server 2005 and up, you now have a view just for procedures</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
</pre></td><td class="de1"><pre class="de1"><span class="kw1">SELECT</span> name 
<span class="kw1">FROM</span> sys.<span class="me1">procedures</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">SELECT name 
FROM sys.procedures</pre></div></div>

<p>If you run those two queries you might get a different number of rows back, this is because the sys.procedures view has these 4 kinds of procedures</p>
<ul>
<li>P = SQL Stored procedure</li>
<li>X = Extended stored procedure</li>
<li>RF = Replication-filter-procedure</li>
<li>PC = Assembly (CLR) stored-procedure</li>
</ul>
<p>In order to make them the same you would do</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
</pre></td><td class="de1"><pre class="de1"><span class="kw1">SELECT</span> name <span class="kw1">FROM</span> sysobjects
<span class="kw1">WHERE</span> type <span class="sy0">IN</span> <span class="br0">&#40;</span> <span class="st0">'P'</span>,<span class="st0">'PC'</span>,<span class="st0">'RF'</span>,<span class="st0">'X'</span><span class="br0">&#41;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">SELECT name FROM sysobjects
WHERE type IN ( 'P','PC','RF','X')</pre></div></div>

<p>That is the same as</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
</pre></td><td class="de1"><pre class="de1"><span class="kw1">SELECT</span> name 
<span class="kw1">FROM</span> sys.<span class="me1">procedures</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">SELECT name 
FROM sys.procedures</pre></div></div>

<p>A quick count of all the procs grouped by type</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
</pre></td><td class="de1"><pre class="de1"><span class="kw1">SELECT</span> <span class="kw2">COUNT</span><span class="br0">&#40;</span><span class="sy0">*</span><span class="br0">&#41;</span>, type_desc
<span class="kw1">FROM</span> sys.<span class="me1">procedures</span>
<span class="kw1">GROUP</span> <span class="kw1">BY</span> type_desc</pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">SELECT COUNT(*), type_desc
FROM sys.procedures
GROUP BY type_desc</pre></div></div>

<p>A nice thing about these new views is that they have creation as well as modified dates, you can quickly see if a proc was ever modified or not</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
</pre></td><td class="de1"><pre class="de1"><span class="kw1">SELECT</span> name,
&nbsp; &nbsp; <span class="kw1">CASE</span> <span class="kw1">WHEN</span> create_date <span class="sy0">=</span> modify_date 
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">THEN</span> <span class="st0">'Never Modified'</span> 
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">ELSE</span> <span class="st0">'Modified'</span> <span class="kw1">END</span> <span class="kw1">AS</span> modified
&nbsp;<span class="kw1">FROM</span> sys.<span class="me1">procedures</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">SELECT name,
	CASE WHEN create_date = modify_date 
			THEN 'Never Modified' 
		ELSE 'Modified' END AS modified
 FROM sys.procedures</pre></div></div>

<p>Or if you just want a list of procedures that have never been modified (by way of an alter statement, not a drop and a create of course)</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
</pre></td><td class="de1"><pre class="de1"><span class="kw1">SELECT</span> name
&nbsp;<span class="kw1">FROM</span> sys.<span class="me1">procedures</span>
<span class="kw1">WHERE</span> create_date <span class="sy0">=</span> modify_date</pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">SELECT name
 FROM sys.procedures
WHERE create_date = modify_date</pre></div></div>

<hr />
Let&#8217;s look at some other examples. The sys.messages view in  the master database is a replacement for the sysmessages system table. If you run these 2 queries which bring back the same error message you will notice something interesting.</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
</pre></td><td class="de1"><pre class="de1"><span class="kw1">SELECT</span> <span class="sy0">*</span> 
<span class="kw1">FROM</span> master..<span class="me1">sysmessages</span>
<span class="kw1">WHERE</span> error<span class="sy0">=</span> <span class="nu0">1481</span>
<span class="sy0">AND</span> msglangid <span class="sy0">=</span> <span class="nu0">1033</span>
&nbsp;
&nbsp;
<span class="kw1">SELECT</span> <span class="sy0">*</span> 
<span class="kw1">FROM</span> master.<span class="me1">sys</span>.<span class="me1">messages</span>
<span class="kw1">WHERE</span> &nbsp;message_id <span class="sy0">=</span><span class="nu0">1481</span>
<span class="sy0">AND</span> language_id <span class="sy0">=</span> <span class="nu0">1033</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">SELECT * 
FROM master..sysmessages
WHERE error= 1481
AND msglangid = 1033


SELECT * 
FROM master.sys.messages
WHERE  message_id =1481
AND language_id = 1033</pre></div></div>

<p>output<br />
&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;</p>
<p><em>Database mirroring could not repair physical page %S_PGID in database &#8220;%.*ls&#8221;. The mirroring partner could not be contacted or did not provide a copy of the page. Possible reasons include a lack of network connectivity or that the copy of the page kept by</p>
<p>Database mirroring could not repair physical page %S_PGID in database &#8220;%.*ls&#8221;. The mirroring partner could not be contacted or did not provide a copy of the page. Possible reasons include a lack of network connectivity or that the copy of the page kept by the partner is also corrupted. To learn whether the partners are currently connected, view the mirroring_state_desc column of the sys.database_mirroring catalog view. If they are connected, for information about why the partner could not provide a copy of the page, examine its error log entries from around the time when this message was reported. Try to resolve the error and resume mirroring.</em></p>
<p>As you can see the text is truncated to 255 characters in the old system views, in the new view you see the whole message.</p>
<p>I only showed you examples for two of these tables, if I did all of them this post would take forever to write. You can investigate the other tables by yourself, maybe pick one or two a day and mess around with some queries.</p>
<p>I would say, take a look at these views, start using them, learn them well because they will help you do your job better.</p>
]]></content:encoded>
			<wfw:commentRss>/index.php/datamgmt/datadesign/sql-advent-2011-day-2/feed/</wfw:commentRss>
		<slash:comments>0</slash:comments>
		</item>
		<item>
		<title>How much longer will the SQL Server database restore take</title>
		<link>/index.php/datamgmt/datadesign/how-much-longer-will-the/</link>
		<comments>/index.php/datamgmt/datadesign/how-much-longer-will-the/#comments</comments>
		<pubDate>Fri, 02 Sep 2011 11:12:00 +0000</pubDate>
		<dc:creator><![CDATA[SQLDenis]]></dc:creator>
				<category><![CDATA[Data Modelling and Design]]></category>
		<category><![CDATA[Database Programming]]></category>
		<category><![CDATA[Microsoft SQL Server]]></category>
		<category><![CDATA[Microsoft SQL Server Admin]]></category>
		<category><![CDATA[dmv]]></category>
		<category><![CDATA[dynamic management views]]></category>
		<category><![CDATA[restore]]></category>

		<guid isPermaLink="false">/index.php/2011/09/how-much-longer-will-the/</guid>
		<description><![CDATA[Frequently you will be asked how much longer a restore will take because someone needs to do something with that specific database that is restoring right now

Of course we all know that the RESTORE DATABASE command has the STATS n option, this will g&#8230;]]></description>
				<content:encoded><![CDATA[<p>Frequently you will be asked how much longer a restore will take because someone needs to do something with that specific database that is restoring right now</p>
<p>Of course we all know that the RESTORE DATABASE command has the STATS n option, this will give you the percentage completed. This is nice but it doesn&#8217;t tell you when it will complete and if someone else started the restore how will you know how long it will take in that case?</p>
<p>Fear not, here is a query that will tell you exactly how long</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
</pre></td><td class="de1"><pre class="de1"><span class="kw1">SELECT</span>&nbsp; 
&nbsp; &nbsp; d.<span class="me1">PERCENT_COMPLETE</span> <span class="kw1">AS</span> <span class="br0">&#91;</span><span class="sy0">%</span>Complete<span class="br0">&#93;</span>,
&nbsp; &nbsp; d.<span class="me1">TOTAL_ELAPSED_TIME</span><span class="sy0">/</span><span class="nu0">60000</span> <span class="kw1">AS</span> ElapsedTimeMin,
&nbsp; &nbsp; d.<span class="me1">ESTIMATED_COMPLETION_TIME</span><span class="sy0">/</span><span class="nu0">60000</span> &nbsp; <span class="kw1">AS</span> TimeRemainingMin,
&nbsp; &nbsp; d.<span class="me1">TOTAL_ELAPSED_TIME</span><span class="sy0">*</span><span class="nu0">0.00000024</span> <span class="kw1">AS</span> ElapsedTimeHours,
&nbsp; &nbsp; d.<span class="me1">ESTIMATED_COMPLETION_TIME</span><span class="sy0">*</span><span class="nu0">0.00000024</span>&nbsp; <span class="kw1">AS</span> TimeRemainingHours,
&nbsp; &nbsp; s.<span class="kw1">text</span> <span class="kw1">AS</span> Command
<span class="kw1">FROM</span>&nbsp; &nbsp; sys.<span class="me1">dm_exec_requests</span> d 
<span class="sy0">CROSS</span> APPLY sys.<span class="me1">dm_exec_sql_text</span><span class="br0">&#40;</span>d.<span class="me1">sql_handle</span><span class="br0">&#41;</span><span class="kw1">as</span> s
<span class="kw1">WHERE</span> &nbsp;d.<span class="me1">COMMAND</span> <span class="sy0">LIKE</span> <span class="st0">'RESTORE DATABASE%'</span>
<span class="kw1">ORDER</span> &nbsp; <span class="kw1">BY</span> <span class="nu0">2</span> <span class="kw1">desc</span>, <span class="nu0">3</span> <span class="kw1">DESC</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">SELECT	
    d.PERCENT_COMPLETE AS [%Complete],
    d.TOTAL_ELAPSED_TIME/60000 AS ElapsedTimeMin,
    d.ESTIMATED_COMPLETION_TIME/60000	AS TimeRemainingMin,
    d.TOTAL_ELAPSED_TIME*0.00000024 AS ElapsedTimeHours,
    d.ESTIMATED_COMPLETION_TIME*0.00000024	AS TimeRemainingHours,
    s.text AS Command
FROM	sys.dm_exec_requests d 
CROSS APPLY sys.dm_exec_sql_text(d.sql_handle)as s
WHERE  d.COMMAND LIKE 'RESTORE DATABASE%'
ORDER	BY 2 desc, 3 DESC</pre></div></div>

<p>Here is the output for a fairly large database restore that I started last night</p>
<div class="tables">
<table>
<tr>
<th>%Complete</th>
<th>	ElapsedTimeMin</th>
<th>	TimeRemainingMin</th>
<th>	ElapsedTimeHours</th>
<th>	TimeRemainingHours</th>
<th>	Command</th>
</tr>
<tr>
<td>78.6186</td>
<td>	766</td>
<td>	208</td>
<td>	11.03301576</td>
<td>	2.99693760</td>
<td>	RESTORE database SomeDB</td>
</tr>
<table>
<p> As you can see the query returns elapsed time both in hours and minutes, time remaining  both in hours and minutes and also the percentage complete</p>
<p>Hopefully this will help you with those nagging types&#8230;&#8230;.<br />
</table>
</table>
</div>
]]></content:encoded>
			<wfw:commentRss>/index.php/datamgmt/datadesign/how-much-longer-will-the/feed/</wfw:commentRss>
		<slash:comments>14</slash:comments>
		</item>
		<item>
		<title>12 ways to break your database server before the first transaction</title>
		<link>/index.php/datamgmt/datadesign/configuring-sql-server-dba/</link>
		<comments>/index.php/datamgmt/datadesign/configuring-sql-server-dba/#comments</comments>
		<pubDate>Wed, 19 May 2010 10:15:58 +0000</pubDate>
		<dc:creator><![CDATA[Ted Krueger (onpnt)]]></dc:creator>
				<category><![CDATA[Data Modelling and Design]]></category>
		<category><![CDATA[Database Administration]]></category>
		<category><![CDATA[Database Programming]]></category>
		<category><![CDATA[Microsoft SQL Server]]></category>
		<category><![CDATA[Microsoft SQL Server Admin]]></category>
		<category><![CDATA[dmf]]></category>
		<category><![CDATA[dmv]]></category>
		<category><![CDATA[index]]></category>
		<category><![CDATA[maintenance]]></category>
		<category><![CDATA[performance]]></category>
		<category><![CDATA[sql server 2005]]></category>
		<category><![CDATA[sql server 2008]]></category>

		<guid isPermaLink="false">/index.php/2010/05/configuring-sql-server-dba/</guid>
		<description><![CDATA[Defaults hurt.  They take a 3 inch splinter and try to bury it as far up and under your nail as far as they possibly can.  Every database server has a task.  A mission if you will.  That mission is to serve the data and secure the data.  Some need 32GB of RAM; some need 3GB of RAM.  This one might need 32 spindles on RAID 3 billion.]]></description>
				<content:encoded><![CDATA[<p>
<h3>1.	Not adjusting memory settings on your database server</h3>
<p>Below is a screen shot of the dreaded default 214748367 maximum server memory allowed to SQL Server.  Will it take it? Yes, it will.  It holds no sympathy for others and will leave no crumbs behind for mere OS operations or paging.  Set this to an allowable maximum based on your server’s actual available memory.  Leave some for the OS to survive.  The server will thank you later.  Trust me!</p>
<div class="image_block"><img src="/wp-content/uploads/blogs/DataMgmt/memmaximum_BAD.gif" alt="" title="" width="448" height="401" /></div>
</p>
<p></p>
<p><h3>2.	Installing EVERYTHING by default</h3>
<p>Defaults hurt.  They take a 3 inch splinter and try to bury it as far up and under your nail as far as they possibly can.  Every database server has a task.  A mission if you will.  That mission is to serve the data and secure the data.  Some need 32GB of RAM; some need 3GB of RAM.  This one might need 32 spindles on RAID 3 billion.  Point is: There are no defaults that match your installation.  Do not take them for granted and do not expect them to be your saving grace preventing some research.  Know what hurts even more? Installing all of the features on one server when you only need one of them can cause as much of a problem as leaving default settings in place.  Try to install the features that you know will be utilized so you can utilize the resources of the server to what it is meant for?
</p>
<p></p>
<p><h3>3.	Enabling CLR and abusing it</h3>
<p>CLR is a foundation, a pillar of strength and power, a stance in front of an angry mob preventing chaos, the punk rocker that stands above the exhausted and pile-driven leftovers from a slam dance session.  Embrace CLR like it is hiding under the couch and can save the puzzle you spent days working on but has that one piece missing, causing nothing but pain and agony with failure to your hard work.  OK, now STOP!  With great power brings great failure.  CLR will and can take you to the next level of strength and functionality to your trials with SQL Server as a DBA and Developer.  CLR can also and will take everything it wants when not managed from your database server.  This will leave it starving for more and hung in the shadows begging for a restart.
</p>
<p></p>
<p><h3>4.	Handing out the SA password like it was free ice cream day. </h3>
<p>SA is a landmark and an object not to be tangled with.  Think of Dirty Harry and that monster 44 Magnum facing you down.  OK, now hand the 44 over to someone and ask them to point it at you.  Feel good?  NO!  Keep SA as your protection.  Do not use it unless it is called upon in a time of need.  Yes, even the sysadmin(s) should have their own security model and SA is not part of it.
</p>
<p></p>
<p><h3>5.	Never maintaining indexes and statistics</h3>
<p>You’ve spent days researching and configuring IO, memory, SQL Server configurations down to the last MAXDOP setting.  It truly is a remarkable feeling you can only explain by feeling it yourself.  Problem is, when it stops there and maintaining the database server is left to the planning and implementation.  Indexes and Statistics alike need special care.  They can enforce performance beyond your most exotic dreams when used and maintained.  They can become your nightmarish horrors if not maintained at the same time.
</p>
<p></p>
<p><h3>6.	Installing EVERYTHING including binary, data and log files to the C drive</h3>
<p>If you are installing SQL Server on your desktop or laptop at home and have one 25GB drive, then sure, install to the C drive.  Most of us have those “server” things.  They have drive bays, and sometimes we even get a D or an E drive.  When you install SQL Server it will want and request you to install everything to the C drive (or the volume letter you pick for the OS).  It’s ok for the setup team to do this.  I respect that not all best practices can be programmed into everything.  So here is the almighty: If you have a data drive, log drive and OS drive or anything other than the drive for the OS, please use it for your data.  Your database server will thank you when it is not contending with other IO operations.
</p>
<p></p>
<p><h3>7.	Relying on RAID as a recovery plan</h3>
<p>RAID is not going to save you.  Before last year or so when it was publicized that a company literally was found whimpering in the corner after losing all of their data from relying on RAID levels to protect against failures, we didn’t think it was possible to fathom this concept.  Who would think this way?  Well, someone did, so we need to say it.
</p>
<p></p>
<p><h3>8.	Think you are protected from disasters without HA or DR?</h3>
<p>Disasters are inevitable.  We cannot hide from them and they jump up behind us when we least expect it.  Plan for it, test for it and become familiar with it.  SQL Server has many native features that can be used to handle HA and DR.  When lightning hits the building, a river decides to create a lake near your cube, a tornado says hello to the data center (face to face) or even an earthquake decides to open a nice pretty hole in the earth and eat the very data you vowed to protect, HA and DR will be there to rescue you (and your job).
</p>
<p></p>
<p><h3>9.	Under-sizing your installation</h3>
<p>Sizing is an art for database servers.  It is also an art form to not size your database server correctly.  Not doing so will cost much more in the long run.  There will be cost both in dollars and downtime (which just means more dollars – lost).
</p>
<p></p>
<p><h3>10.	Forgetting the network is just as important as IO performance</h3>
<p>It’s the network! Blaming the network on slow performance is fun.  Network and database administrators like to blame each other on performance being slow.  The nice part about the network is if there isn’t much monitoring in place, we can get away with it as DBAs so much easier.  OK, is it really the network or not?  If you do not have a network that is stable and can handle your data flying around the business, your hardcore, supersonic, beefy, brat- eating server doesn’t help you at all.  Get with your network group and discuss the amount of expected data.  ASYNC_NETWORK_IO waits are not fun when you are plagued with them on a database server.
</p>
<p></p>
<p><h3>11.	Allowing Jane and John to write T-SQL because they know how to write SELECT *</h3>
<p>So the CFO comes to your office and he just went to this really cool lightshow expo in Vegas to release SQL Server 30099 R500.  Best lightshow he has ever seen.  Even better was that the really good sales guy up on the stage popped open SQL Server Management Studio version fifty billion and started bringing up data.  Yes, you guessed it.  He just asked for you to install that really neat tool on his laptop so he can, &#8220;Get data&#8221;.  Scary!  Put policies in place to prevent this.  Even for senior staff.  Someone in an office with their finger on the F5 key and a SELECT * FROM reallybloodyhugeandwidetable is your nightmare come true.
</p>
<p></p>
<p><h3>12.	Backups are for sissies so I don’t do them or restore them to test</h3>
<p>Everyone knows the signature.  It’s comical in passing and at user group meetings.  Is it true?  Not even close.  Backups are your foundation for recovery.  Your ability to save the universe from data gremlins that chew their way through your NIC port into the chassis, feasting on the RAM before moving to your beloved disk.  Wait, listen to this:</p>
<p><b>Jan:</b><i> My database blew up.  Something about corrupt, torn pages and Google can’t save me.  John, can you help?</i></p>
<p><b>John:</b><i> Jan, let’s just restore to the other server so we can figure this out without being on the verge of heart attacks.  </i></p>
<p><b>jan :</b> <i>backups?</i></p>
<p>Don’t be that person!  Backup your data and back it up as much as you possibly can.  Most of all restore it wherever you can to test it, well, can be restored.  This is a nice feature to know you have before you need to have it.</p>
]]></content:encoded>
			<wfw:commentRss>/index.php/datamgmt/datadesign/configuring-sql-server-dba/feed/</wfw:commentRss>
		<slash:comments>8</slash:comments>
		</item>
		<item>
		<title>Index DMV usage considerations</title>
		<link>/index.php/datamgmt/datadesign/think-before-you-f5-on-dmvs/</link>
		<comments>/index.php/datamgmt/datadesign/think-before-you-f5-on-dmvs/#comments</comments>
		<pubDate>Wed, 31 Mar 2010 12:56:42 +0000</pubDate>
		<dc:creator><![CDATA[Ted Krueger (onpnt)]]></dc:creator>
				<category><![CDATA[Data Modelling and Design]]></category>
		<category><![CDATA[Database Administration]]></category>
		<category><![CDATA[Database Programming]]></category>
		<category><![CDATA[Microsoft SQL Server]]></category>
		<category><![CDATA[Microsoft SQL Server Admin]]></category>
		<category><![CDATA[dmf]]></category>
		<category><![CDATA[dmv]]></category>
		<category><![CDATA[index]]></category>
		<category><![CDATA[maintenance]]></category>
		<category><![CDATA[performance]]></category>
		<category><![CDATA[sql server 2005]]></category>
		<category><![CDATA[sql server 2008]]></category>

		<guid isPermaLink="false">/index.php/2010/03/think-before-you-f5-on-dmvs/</guid>
		<description><![CDATA[Index DMV/DMF goodness!  SQL Server 2005 and up has given us the ability to truly be more efficient in gathering information in which we can be more proactive.  With everything these objects give us, a price has to be paid.  We will discuss that price but first, we’ll go over a few major features that DMV/DMF has provided to us in regards to indexes to help us in our daily tasks.]]></description>
				<content:encoded><![CDATA[<h2>Let’s think about it for a minute</h2>
<p>
Index DMV (Dynamic Management Views)/DMF (Dynamic Management Functions) goodness!  SQL Server 2005 and up has given us the ability to truly be more efficient in gathering information with which we can be more proactive.  With everything these objects give us, a price has to be paid.  We will discuss that price but first, we’ll go over a few major features that DMV/DMF has provided to us in regards to indexes to help us in our daily tasks.
</p>
<p>
Index maintenance is a major part in the typical day to day DBA tasks.  Monitoring fragmentation, usage, and lack of usage is something that, if gone without for long, will cause severe and noticeable performance problems.  There is no question about it, Indexes are essential.  We cannot afford to ignore embracing them as objects that save poor and even well structured queries from causing crippling resource consumption issues.  The user community has little patience for slow applications.  Users also will not stand for where the problems are and only want resolution so they can make it from 9 to 5 without headaches.  In short, the DBA is a hired gun by the users and as such, are our customers.  In this, it is our highest priority to keep the quality of our services as high as you would expect from any sale of services or goods.
</p>
<p>
In order to maintain our primary task of keeping indexes from being the problem and always the solution, we have at our disposal in SQL Server 2005+, the sys.dm_db_index_physical_stats DMV.  Prior to SQL Server 2005, finding index usage and statistics was a painful process.  Profiler would need to be utilized while capturing execution plans and other pertinent information.  Once gathered, would be used in long daunting analysis tasks to determine index creation or maintenance needs.  In some cases those tasks ended still in index creation that may not be optimal.
</p>
<p>
To use dm_db_index_physical_stats please refer to Denis Gobo’s (<a href="/index.php/All/?disp=authdir&amp;author=4">Blog</a> | <a href="http://twitter.com/denisgobo">Twitter</a>) blog, “<a href="/index.php/DataMgmt/DataDesign/finding-fragmentation-of-an-index-and-fi">Finding Fragmentation of an Index and Fixing It</a>”.  Denis does a very good job at showing cause and effect of the process of using this DMV in an efficient manner.<br />
<br />
Another SQL community favorite is Michelle Ufford’s (<a href="http://sqlfool.com/">Blog</a> | <a href="http://twitter.com/sqlfool">Twitter</a>) script on <a href="http://sqlfool.com/2009/06/index-defrag-script-v30/">finding and resolving index problems</a>.  This excellent script that can is an all in one scheduling plan to perform unattended maintenance on index fragmentation.</p>
<p>
The next major task a DBA can perform is actually finding indexes that the optimizer ‘thinks’ should be created.  We can return missing indexes primarily by using the sys.dm_db_missing_index_group_stats DMV.  This joined to several other key DMVs can show you not only missing indexes, but with a little scripting, actually result in the CREATE INDEX statement itself to create for review.  To pick on Michelle again, we can look to her excellent blog, “<a href="http://sqlfool.com/2009/04/a-look-at-missing-indexes/">A look at missing indexes</a>”.
</p>
<p>
The third major key index operation is to find unused indexes.  Unused indexes can scream &#8220;performance killer&#8221;.  Not only are these indexes taking up space on disk and backups but they are causing transactions to run slower due to the need to update them along with the primary data.  Remember, when you insert/update/delete, you need to maintain all of the indexes.   This goes further into maintaining these unused indexes with the first fragmentation task discussed.  To find these unused indexes and determine if removing them is appropriate, we have the dm_db_index_usage_stats DMV.  This DMV can return unused indexes based on the sys.indexes system view.  This is done by using a NOT EXISTS or other means on the dm_db_index_usage_stats from the sys.indexes and results in any index that does not have an active log for usage.  Hence, is not being fully utilized and should be determined if required.  </p>
<h2>Now for the meat of it and the point</h2>
<p>
All of this is extremely useful for maintaining, removing and creating indexes.  To bring this even further into lazy DBA themes, Jason Strate (<a href="http://stratesql.com/">Blog</a> | <a href="http://twitter.com/stratesql">Twitter</a>) has created the <a href="http://stratesql.com/2009/07/20/analyzing-your-indexes-with-a-custom-report.aspx">IndexAnalysis</a> reporting solution and scripts.  Jason has taken the best of all worlds of Index DMV and DMF usage to Reporting Services in a solution that can be easily reviewed for all these major key analysis steps.  </p>
<p>Most DBAs in the community are going to tell you this is all without a doubt, critical knowledge.  In SQL forums around the community, they are also posted as quick information gathering tools to obtain information to assist in performance problems.  Again, this is all true and the best practice troubleshooting steps.  However, there is one major aspect to these types of queries that are also a critical piece of knowledge.  That is, these queries themselves are very resource intensive.  In order to show that, let’s run one of the typical fragmentation search queries on a test server.  </p>
<p>The below charts are from Idera SQLDM and used only to show a high level view of the effects of the DMVs.  Disk IO is focused on as that pertains to one of the largest performance bottlenecks you can have.  IO will also starve other normal operations from working optimally. </p>
<p>The query that will be used is below and part from Denis Gobo’s blog referred to above while removing the direct condition to look at only one index.</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
</pre></td><td class="de1"><pre class="de1"><span class="kw1">SELECT</span> <span class="kw2">OBJECT_NAME</span><span class="br0">&#40;</span><span class="kw2">OBJECT_ID</span><span class="br0">&#41;</span> <span class="kw1">AS</span> Tablename,s.<span class="me1">name</span> <span class="kw1">AS</span> Indexname
,index_type_desc
,avg_fragmentation_in_percent
,page_count
<span class="kw1">FROM</span> sys.<span class="me1">dm_db_index_physical_stats</span> <span class="br0">&#40;</span><span class="kw2">DB_ID</span><span class="br0">&#40;</span><span class="br0">&#41;</span>, <span class="sy0">NULL</span>, <span class="sy0">NULL</span> , <span class="sy0">NULL</span>, N<span class="st0">'LIMITED'</span><span class="br0">&#41;</span> d
join sysindexes s <span class="kw1">ON</span> d.<span class="kw2">OBJECT_ID</span> <span class="sy0">=</span> s.<span class="me1">id</span>
and d.<span class="me1">index_id</span> <span class="sy0">=</span> s.<span class="me1">indid</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">SELECT OBJECT_NAME(OBJECT_ID) AS Tablename,s.name AS Indexname
,index_type_desc
,avg_fragmentation_in_percent
,page_count
FROM sys.dm_db_index_physical_stats (DB_ID(), NULL, NULL , NULL, N'LIMITED') d
join sysindexes s ON d.OBJECT_ID = s.id
and d.index_id = s.indid</pre></div></div>

<p>
Prior to executing this query, our server was running as follows<br />
</p>
<div class="image_block"><img src="/wp-content/uploads/blogs/DataMgmt/dmv_idx_1.gif" alt="" title="" width="426" height="161" /></div>
<div class="image_block"><img src="/wp-content/uploads/blogs/DataMgmt/dmv_idx_2.gif" alt="" title="" width="426" height="161" /></div>
<p>Once executing the query we quickly see extremely high IO.  IO is our major concern here.  This will slow the server down noticeably and cause other operations to suffer its wrath.</p>
<div class="image_block"><img src="/wp-content/uploads/blogs/DataMgmt/dmv_idx_3.gif" alt="" title="" width="433" height="161" /></div>
<div class="image_block"><img src="/wp-content/uploads/blogs/DataMgmt/dmv_idx_4.gif" alt="" title="" width="435" height="161" /></div>
</p>
<p>
This test was crude and we didn’t go into detail of the IO and exact reactions to running the query on the server.  You can see from the charts that the query was killed very quickly.  We only wanted to show the start of the resource consumption and overhead.  The objective and take away is the knowledge that these queries do in fact have their own resource intensive requirements.  When running them due to maintenance, forum support from community members or other means in obtaining them, take care in the time that you do so.  In some cases, these queries and other DMVs cannot be stopped until completion.  For a truly in-depth and excellent look at usage, check Paul Randal&#8217;s (<a href="http://www.sqlskills.com/BLOGS/PAUL/">Blog</a> | <a href="http://www.twitter.com/PaulRandal">Twitter</a>) blog, &#8220;<a href="http://www.sqlskills.com/BLOGS/PAUL/post/Inside-sysdm_db_index_physical_stats.aspx">Inside sys.dm_db_index_physical_stats</a>&#8220;.</p>
<p>It is much more optimal when executing these queries during normal business hours if a query can be singled out as a performance problem. This provides the ability to select only the statistics for one index or one table.  When obtaining help, always question the queries provided by any of the members helping.  No offense will be taken by the SQL community supporters if questions are asked of the performance factor of running provided scripts during normal operating times.  If offense it taken, this typically means the impact is unknown and more reason to question it.
</p>
<p><strong>Special thanks to Jes (<a href="http://jesborland.wordpress.com/">Blog</a> | <a href="http://twitter.com/grrl_geek">Twitter</a>) for the review <img src="https://s.w.org/images/core/emoji/2/72x72/1f642.png" alt="🙂" class="wp-smiley" style="height: 1em; max-height: 1em;" /></strong></p>
]]></content:encoded>
			<wfw:commentRss>/index.php/datamgmt/datadesign/think-before-you-f5-on-dmvs/feed/</wfw:commentRss>
		<slash:comments>1</slash:comments>
		</item>
		<item>
		<title>Use sys.dm_os_performance_counters to get your Buffer cache hit ratio and Page life expectancy counters</title>
		<link>/index.php/datamgmt/dbprogramming/use-sys-dm_os_performance_counters-to-ge/</link>
		<comments>/index.php/datamgmt/dbprogramming/use-sys-dm_os_performance_counters-to-ge/#comments</comments>
		<pubDate>Fri, 22 Jan 2010 13:23:49 +0000</pubDate>
		<dc:creator><![CDATA[SQLDenis]]></dc:creator>
				<category><![CDATA[Database Administration]]></category>
		<category><![CDATA[Database Programming]]></category>
		<category><![CDATA[Microsoft SQL Server]]></category>
		<category><![CDATA[Microsoft SQL Server Admin]]></category>
		<category><![CDATA[dmv]]></category>
		<category><![CDATA[performance]]></category>
		<category><![CDATA[sql server 2000]]></category>
		<category><![CDATA[sql server 2005]]></category>
		<category><![CDATA[sql server 2008]]></category>

		<guid isPermaLink="false">/index.php/2010/01/use-sys-dm_os_performance_counters-to-ge/</guid>
		<description><![CDATA[In order to figure out if you need more memory for a SQL Server you can start by taking a look at Buffer cache hit ratio and Page life expectancy. Buffer cache hit ratio Here is what Books On Line has to say about Buffer cache hit ratio Buffer cache hit ratio Percentage of pages [&#8230;]]]></description>
				<content:encoded><![CDATA[<p>In order to figure out if you need more memory for a SQL Server you can start by taking a look at Buffer cache hit ratio and Page life expectancy.</p>
<h2>Buffer cache hit ratio</h2>
<p>Here is what Books On Line has to say about Buffer cache hit ratio<br />
<em>Buffer cache hit ratio<br />
Percentage of pages found in the buffer cache without having to read from disk. The ratio is the total number of cache hits divided by the total number of cache lookups over the last few thousand page accesses. After a long period of time, the ratio moves very little. Because reading from the cache is much less expensive than reading from disk, you want this ratio to be high. Generally, you can increase the buffer cache hit ratio by increasing the amount of memory available to SQL Server.<br />
</em></p>
<p>Basically what this means is what is the percentage that SQL Server had the data in cache and did not have to read the data from disk. Ideally you want this number to be as close to 100 as possible.</p>
<p>In order to calculate the Buffer cache hit ratio we need to query the sys.dm_os_performance_counters dynamic management view. There are 2 counters we need in order to do our calculation, one counter is Buffer cache hit ratio and the other counter is Buffer cache hit ratio base. We divide <em>Buffer cache hit ratio</em> base by <em>Buffer cache hit ratio</em> and it will give us the Buffer cache hit ratio.<br />
Here is the query that will do that, this query will only work on SQL Server 2005 and up.</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
</pre></td><td class="de1"><pre class="de1"><span class="kw1">SELECT</span> <span class="br0">&#40;</span>a.<span class="me1">cntr_value</span> <span class="sy0">*</span> <span class="nu0">1.0</span> <span class="sy0">/</span> b.<span class="me1">cntr_value</span><span class="br0">&#41;</span> <span class="sy0">*</span> <span class="nu0">100.0</span> <span class="kw1">as</span> BufferCacheHitRatio
<span class="kw1">FROM</span> sys.<span class="me1">dm_os_performance_counters</span> &nbsp;a
<span class="sy0">JOIN</span> &nbsp;<span class="br0">&#40;</span><span class="kw1">SELECT</span> cntr_value,<span class="kw2">OBJECT_NAME</span> 
&nbsp; &nbsp; <span class="kw1">FROM</span> sys.<span class="me1">dm_os_performance_counters</span> &nbsp;
&nbsp; &nbsp; <span class="kw1">WHERE</span> counter_name <span class="sy0">=</span> <span class="st0">'Buffer cache hit ratio base'</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="sy0">AND</span> <span class="kw2">OBJECT_NAME</span> <span class="sy0">=</span> <span class="st0">'SQLServer:Buffer Manager'</span><span class="br0">&#41;</span> b <span class="kw1">ON</span> &nbsp;a.<span class="kw2">OBJECT_NAME</span> <span class="sy0">=</span> b.<span class="kw2">OBJECT_NAME</span>
<span class="kw1">WHERE</span> a.<span class="me1">counter_name</span> <span class="sy0">=</span> <span class="st0">'Buffer cache hit ratio'</span>
<span class="sy0">AND</span> a.<span class="kw2">OBJECT_NAME</span> <span class="sy0">=</span> <span class="st0">'SQLServer:Buffer Manager'</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">SELECT (a.cntr_value * 1.0 / b.cntr_value) * 100.0 as BufferCacheHitRatio
FROM sys.dm_os_performance_counters  a
JOIN  (SELECT cntr_value,OBJECT_NAME 
	FROM sys.dm_os_performance_counters  
  	WHERE counter_name = 'Buffer cache hit ratio base'
        AND OBJECT_NAME = 'SQLServer:Buffer Manager') b ON  a.OBJECT_NAME = b.OBJECT_NAME
WHERE a.counter_name = 'Buffer cache hit ratio'
AND a.OBJECT_NAME = 'SQLServer:Buffer Manager'</pre></div></div>

<h2 id="PLE">Page life expectancy</h2>
<p>Now let&#8217;s look at Page life expectancy.<br />
Page life expectancy is the number of seconds a page will stay in the buffer pool, ideally it should be above 300 seconds. If it is less than 300 seconds this could indicate memory pressure, a cache flush or missing indexes.</p>
<p>Here is how to get the Page life expectancy</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
</pre></td><td class="de1"><pre class="de1"><span class="kw1">SELECT</span> <span class="sy0">*</span>
<span class="kw1">FROM</span> sys.<span class="me1">dm_os_performance_counters</span> &nbsp;
<span class="kw1">WHERE</span> counter_name <span class="sy0">=</span> <span class="st0">'Page life expectancy'</span>
<span class="sy0">AND</span> <span class="kw2">OBJECT_NAME</span> <span class="sy0">=</span> <span class="st0">'SQLServer:Buffer Manager'</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">SELECT *
FROM sys.dm_os_performance_counters  
WHERE counter_name = 'Page life expectancy'
AND OBJECT_NAME = 'SQLServer:Buffer Manager'</pre></div></div>

<p>What I currently get for the queries is a Page life expectancy of 470333 and the Buffer cache hit ratio is 100.<strong> What I would like you to do is run these 2 queries on your systems and leave me the results in a comment so that we can compare</strong></p>
<p>Also take a look at how to capture this info if you prefer to run perfmon (or if you are still running SQL Server 2000) by reading this excellent article by Brent Ozar here: <a href="http://www.brentozar.com/archive/2006/12/dba-101-using-perfmon-for-sql-performance-tuning/">SQL Server Perfmon (Performance Monitor) Best Practices</a></p>
<p>*** <strong>Remember, if you have a SQL related question try our <a href="http://forum.lessthandot.com/viewforum.php?f=17">Microsoft SQL Server Programming</a> forum or our <a href="http://forum.lessthandot.com/viewforum.php?f=22">Microsoft SQL Server Admin</a> forum</strong><ins></ins></p>
]]></content:encoded>
			<wfw:commentRss>/index.php/datamgmt/dbprogramming/use-sys-dm_os_performance_counters-to-ge/feed/</wfw:commentRss>
		<slash:comments>14</slash:comments>
		</item>
		<item>
		<title>Find Out If You Are Using Deprecated Features In SQL Server 2008</title>
		<link>/index.php/datamgmt/datadesign/find-out-if-you-are-using-deprecated-fea-2008/</link>
		<comments>/index.php/datamgmt/datadesign/find-out-if-you-are-using-deprecated-fea-2008/#comments</comments>
		<pubDate>Thu, 14 Jan 2010 16:58:41 +0000</pubDate>
		<dc:creator><![CDATA[SQLDenis]]></dc:creator>
				<category><![CDATA[Data Modelling and Design]]></category>
		<category><![CDATA[Database Administration]]></category>
		<category><![CDATA[Database Programming]]></category>
		<category><![CDATA[Microsoft SQL Server]]></category>
		<category><![CDATA[Microsoft SQL Server Admin]]></category>
		<category><![CDATA[dmv]]></category>
		<category><![CDATA[dynamic management views]]></category>
		<category><![CDATA[sql server 2005]]></category>
		<category><![CDATA[sql server 2008]]></category>

		<guid isPermaLink="false">/index.php/2010/01/find-out-if-you-are-using-deprecated-fea-2008/</guid>
		<description><![CDATA[Yesterday we used the sys.dm_os_performance_counters dynamic management view in the post Find Out What Percent Of The Log Is Being Used For Each Database In SQL Server 2005 and 2008 to find out the log space used, today we will use this dynamic management view to find out if we are using any deprecated features. [&#8230;]]]></description>
				<content:encoded><![CDATA[<p>Yesterday we used the sys.dm_os_performance_counters dynamic management view in the post <a href="/index.php/DataMgmt/DBAdmin/MSSQLServerAdmin/find-out-what-percent-of-the-log-is-bein-2008">Find Out What Percent Of The Log Is Being Used For Each Database In SQL Server 2005 and 2008</a> to find out the log space used,  today we will use this dynamic management view to find out if we are using any deprecated features.</p>
<p>So you have upgraded your old server to SQL Server 2008 and you wonder if you have any deprecated features in your code. Well, there is a query for that, if I run this query below on one of my test servers where I have some databases that I just restored from a 2000 instance I get some results back</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
</pre></td><td class="de1"><pre class="de1"><span class="kw1">select</span> instance_name,cntr_value 
<span class="kw1">from</span> sys.<span class="me1">dm_os_performance_counters</span>
<span class="kw1">where</span> <span class="kw2">Object_name</span> <span class="sy0">=</span> <span class="st0">'SQLServer:Deprecated Features'</span>
and cntr_value <span class="sy0">&gt;</span> <span class="nu0">0</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">select instance_name,cntr_value 
from sys.dm_os_performance_counters
where Object_name = 'SQLServer:Deprecated Features'
and cntr_value &gt; 0</pre></div></div>

<p>Here is the output from that query</p>
<pre>instance_name   					cntr_value
Macedonian                                                    	2
Lithuanian_Classic                                            	2
Korean_Wansung_Unicode                                        	2
Hindi                                                         	2
Azeri_Latin_90                                                	2
Azeri_Cyrillic_90                                             	2
'@' and names that start with '@@' as Transact-SQL identifiers	20
String literals as column aliases                             	646
ROWGUIDCOL                                                    	104
PERMISSIONS                                                   	2
'::' function calling syntax                                  	5
Oldstyle RAISERROR                                            	34
CREATE_DROP_DEFAULT                                           	15
Numbered stored procedures                                    	2
fulltext_catalogs.data_space_id                               	9
fulltext_catalogs.path                                        	9
sql_dependencies                                              	5
sysprocesses                                                  	4
numbered_procedures                                           	17
syscurconfigs                                                 	1
sysdatabases                                                  	73
sysaltfiles                                                   	9
syslogins                                                     	21
sysservers                                                    	2
sysindexkeys                                                  	24
syscolumns                                                    	29
sysindexes                                                    	14
sysreferences                                                 	17
sysfilegroups                                                 	1
sysfiles                                                      	392
sysobjects                                                    	59
sysusers                                                      	7
sysdepends                                                    	3
SET ANSI_PADDING OFF                                          	68
SET CONCAT_NULL_YIELDS_NULL OFF                               	68
SET ANSI_NULLS OFF                                            	68
SET ROWCOUNT                                                  	1485
Database compatibility level 80                               	21
ALTER DATABASE WITH TORN_PAGE_DETECTION                       	2
sp_dboption                                                   	1
sp_addlogin                                                   	1
DATABASEPROPERTYEX('IsFullTextEnabled')                       	369
DATABASEPROPERTY                                              	22576
INDEX_OPTION                                                  	25
XP_API                                                        	28
USER_ID                                                       	48
DBCC SHOWCONTIG                                               	4
Table hint without WITH                                       	603
Data types: text ntext or image                               	546
More than two-part column name                                	2
NOLOCK or READUNCOMMITTED in UPDATE or DELETE                 	1566                                                                                   </pre>
<p>Keep  in mind that I have some throw-away databases that I use to answer questions on newsgroups so some of these things that show up might be because of that.</p>
<p>So how does this query help you? Well, you are at least aware that you are using these deprecated features inside your code somewhere. It is time to call the object_definition function to find exactly where this happens <img src="https://s.w.org/images/core/emoji/2/72x72/1f642.png" alt="🙂" class="wp-smiley" style="height: 1em; max-height: 1em;" /></p>
<p>It could also be that internal code uses these deprecated features&#8230;.wouldn&#8217;t that be ironic?</p>
<p>You can also take a look at these blog posts by <a href="/index.php/All/?disp=authdir&amp;author=10">George Mastros</a> that show you how you can find out where some of this stuff is called from</p>
<p><a href="/index.php/DataMgmt/DataDesign/identify-procedures-that-call-sql-server">Identify procedures that call SQL Server undocumented procedures</a><br />
<a href="/index.php/DataMgmt/DBProgramming/don-t-use-text-datatype-for-sql-2005-and">Don&#8217;t use text datatype for SQL 2005 and up</a></p>
<p>In case you don&#8217;t have access to this dynamic management view, here is the whole list of deprcated features that this query returns</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
</pre></td><td class="de1"><pre class="de1"><span class="kw1">select</span> instance_name 
<span class="kw1">from</span> sys.<span class="me1">dm_os_performance_counters</span>
<span class="kw1">where</span> <span class="kw2">Object_name</span> <span class="sy0">=</span> <span class="st0">'SQLServer:Deprecated Features'</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">select instance_name 
from sys.dm_os_performance_counters
where Object_name = 'SQLServer:Deprecated Features'</pre></div></div>

<p>ALTER LOGIN WITH SET CREDENTIAL<br />
SQL_AltDiction_CP1253_CS_AS<br />
Macedonian<br />
Lithuanian_Classic<br />
Korean_Wansung_Unicode<br />
Hindi<br />
Azeri_Latin_90<br />
Azeri_Cyrillic_90<br />
sp_detach_db @keepfulltextindexfile<br />
DESX algorithm<br />
Vardecimal storage format<br />
SET DISABLE_DEF_CNST_CHK<br />
DEFAULT keyword as a default value<br />
&#8216;@&#8217; and names that start with &#8216;@@&#8217; as Transact-SQL identifiers<br />
&#8216;#&#8217; and &#8216;##&#8217; as the name of temporary tables and stored procedures<br />
String literals as column aliases<br />
IDENTITYCOL<br />
ROWGUIDCOL<br />
XMLDATA<br />
COMPUTE [BY]<br />
INSERT NULL into TIMESTAMP columns<br />
Non-ANSI *= or =* outer join operators<br />
FASTFIRSTROW<br />
sp_configure &#8216;ft notify bandwidth (min)&#8217;<br />
sp_configure &#8216;ft notify bandwidth (max)&#8217;<br />
sp_configure &#8216;ft crawl bandwidth (min)&#8217;<br />
sp_configure &#8216;ft crawl bandwidth (max)&#8217;<br />
sp_configure &#8216;priority boost&#8217;<br />
sp_configure &#8216;set working set size&#8217;<br />
sp_configure &#8216;open objects&#8217;<br />
sp_configure &#8216;locks&#8217;<br />
sp_configure &#8216;allow updates&#8217;<br />
sp_configure &#8216;disallow results from triggers&#8217;<br />
CREATE TRIGGER WITH APPEND<br />
PERMISSIONS<br />
GROUP BY ALL<br />
Multiple table hints without comma<br />
HOLDLOCK table hint without parenthesis<br />
&#8216;::&#8217; function calling syntax<br />
SETUSER<br />
Oldstyle RAISERROR<br />
DROP INDEX with two-part name<br />
Create/alter SOAP endpoint<br />
CREATE_DROP_DEFAULT<br />
CREATE_DROP_RULE<br />
Numbered stored procedures<br />
TIMESTAMP<br />
dm_fts_memory_buffers.row_count<br />
dm_fts_active_catalogs.row_count_in_thousands<br />
dm_fts_active_catalogs.worker_count<br />
dm_fts_active_catalogs.previous_status_description<br />
dm_fts_active_catalogs.previous_status<br />
dm_fts_active_catalogs.status_description<br />
dm_fts_active_catalogs.status<br />
dm_fts_active_catalogs.is_paused<br />
fulltext_catalogs.file_id<br />
fulltext_catalogs.data_space_id<br />
fulltext_catalogs.path<br />
dm_fts_memory_buffers<br />
dm_fts_active_catalogs<br />
fulltext_catalogs<br />
endpoint_webmethods<br />
soap_endpoints<br />
sql_dependencies<br />
sysperfinfo<br />
fn_servershareddrives<br />
fn_virtualservernodes<br />
sysprocesses<br />
syscacheobjects<br />
fn_get_sql<br />
database_principal_aliases<br />
numbered_procedure_parameters<br />
numbered_procedures<br />
syscurconfigs<br />
sysconfigures<br />
sysopentapes<br />
sysdevices<br />
syslockinfo<br />
sysdatabases<br />
sysaltfiles<br />
syslogins<br />
sysoledbusers<br />
sysremotelogins<br />
sysmessages<br />
sysservers<br />
systypes<br />
sysindexkeys<br />
syscolumns<br />
sysindexes<br />
sysconstraints<br />
sysforeignkeys<br />
sysreferences<br />
sysfilegroups<br />
sysfiles<br />
syscomments<br />
sysobjects<br />
sysusers<br />
sysdepends<br />
sysfulltextcatalogs<br />
syspermissions<br />
sysprotects<br />
sysmembers<br />
sp_fulltext_service @action=resource_usage<br />
sp_fulltext_service @action=data_timeout<br />
sp_fulltext_service @action=connect_timeout<br />
sp_fulltext_service @action=clean_up<br />
MODIFY FILEGROUP READWRITE<br />
MODIFY FILEGROUP READONLY<br />
UPDATETEXT or WRITETEXT<br />
READTEXT<br />
SET ANSI_PADDING OFF<br />
SET CONCAT_NULL_YIELDS_NULL OFF<br />
SET ANSI_NULLS OFF<br />
SET REMOTE_PROC_TRANSACTIONS<br />
SET ROWCOUNT<br />
Database compatibility level 90<br />
Database compatibility level 80<br />
RESTORE DATABASE or LOG WITH PASSWORD<br />
RESTORE DATABASE or LOG WITH MEDIAPASSWORD<br />
ADDING TAPE DEVICE<br />
BACKUP DATABASE or LOG TO TAPE<br />
BACKUP DATABASE or LOG WITH PASSWORD<br />
BACKUP DATABASE or LOG WITH MEDIAPASSWORD<br />
ALTER DATABASE WITH TORN_PAGE_DETECTION<br />
RESTORE DATABASE or LOG WITH DBO_ONLY<br />
sp_estimated_rowsize_reduction_for_vardecimal<br />
sp_helpdevice<br />
sp_lock<br />
sp_getbindtoken<br />
sp_bindsession<br />
sp_helpextendedproc<br />
sp_dropextendedproc<br />
sp_addextendedproc<br />
sp_help_fulltext_catalog_components<br />
sp_help_fulltext_tables_cursor<br />
sp_help_fulltext_tables<br />
sp_help_fulltext_columns_cursor<br />
sp_help_fulltext_columns<br />
sp_help_fulltext_catalogs_cursor<br />
sp_help_fulltext_catalogs<br />
sp_fulltext_column<br />
sp_fulltext_table<br />
sp_fulltext_database<br />
sp_fulltext_catalog<br />
sp_db_vardecimal_storage_format<br />
sp_resetstatus<br />
sp_attach_single_file_db<br />
sp_attach_db<br />
sp_dbcmptlevel<br />
sp_renamedb<br />
sp_indexoption<br />
sp_dboption<br />
sp_dbremove<br />
sp_create_removable<br />
sp_certify_removable<br />
sp_remoteoption<br />
sp_helpremotelogin<br />
sp_dropremotelogin<br />
sp_addremotelogin<br />
sp_addserver<br />
sp_depends<br />
sp_dropalias<br />
sp_unbindrule<br />
sp_bindrule<br />
sp_unbindefault<br />
sp_bindefault<br />
sp_droptype<br />
sp_addtype<br />
sp_change_users_login<br />
sp_srvrolepermission<br />
sp_dbfixedrolepermission<br />
xp_loginconfig<br />
sp_changeobjectowner<br />
sp_droprole<br />
sp_addrole<br />
sp_approlepassword<br />
sp_dropapprole<br />
sp_addapprole<br />
sp_revokedbaccess<br />
sp_grantdbaccess<br />
sp_dropuser<br />
sp_adduser<br />
sp_defaultlanguage<br />
sp_defaultdb<br />
sp_password<br />
xp_revokelogin<br />
xp_grantlogin<br />
sp_revokelogin<br />
sp_denylogin<br />
sp_grantlogin<br />
sp_droplogin<br />
sp_addlogin<br />
IN PATH<br />
FULLTEXTSERVICEPROPERTY(&#8216;ConnectTimeout&#8217;)<br />
FULLTEXTSERVICEPROPERTY(&#8216;DataTimeout&#8217;)<br />
FULLTEXTSERVICEPROPERTY(&#8216;ResourceUsage&#8217;)<br />
DATABASEPROPERTYEX(&#8216;IsFullTextEnabled&#8217;)<br />
FULLTEXTCATALOGPROPERTY(&#8216;LogSize&#8217;)<br />
FULLTEXTCATALOGPROPERTY(&#8216;PopulateStatus&#8217;)<br />
DATABASEPROPERTY<br />
sp_configure &#8216;remote proc trans&#8217;<br />
SET OFFSETS<br />
ALL Permission<br />
INSERT_HINTS<br />
INDEX_OPTION<br />
OLEDB for ad hoc connections<br />
XP_API<br />
Using OLEDB for linked servers<br />
DBCC INDEXDEFRAG<br />
REMSERVER<br />
INDEXKEY_PROPERTY<br />
USER_ID<br />
FILE_ID<br />
EXTPROP_LEVEL0USER<br />
EXTPROP_LEVEL0TYPE<br />
Returning results from trigger<br />
DBCC [UN]PINTABLE<br />
DBCC DBREINDEX<br />
DBCC SHOWCONTIG<br />
Text in row table option<br />
Table hint without WITH<br />
Indirect TVF hints<br />
TEXTVALID<br />
TEXTPTR<br />
Data types: text ntext or image<br />
More than two-part column name<br />
Index view select list without COUNT_BIG(*)<br />
NOLOCK or READUNCOMMITTED in UPDATE or DELETE          </p>
<p>*** <strong>Remember, if you have a SQL related question try our <a href="http://forum.lessthandot.com/viewforum.php?f=17">Microsoft SQL Server Programming</a> forum or our <a href="http://forum.lessthandot.com/viewforum.php?f=22">Microsoft SQL Server Admin</a> forum</strong><ins></ins></p>
]]></content:encoded>
			<wfw:commentRss>/index.php/datamgmt/datadesign/find-out-if-you-are-using-deprecated-fea-2008/feed/</wfw:commentRss>
		<slash:comments>5</slash:comments>
		</item>
		<item>
		<title>Find Out What Percent Of The Log Is Being Used For Each Database In SQL Server 2005 and 2008</title>
		<link>/index.php/datamgmt/dbprogramming/find-out-what-percent-of-the-log-is-bein-2008/</link>
		<comments>/index.php/datamgmt/dbprogramming/find-out-what-percent-of-the-log-is-bein-2008/#comments</comments>
		<pubDate>Wed, 13 Jan 2010 15:38:54 +0000</pubDate>
		<dc:creator><![CDATA[SQLDenis]]></dc:creator>
				<category><![CDATA[Database Administration]]></category>
		<category><![CDATA[Database Programming]]></category>
		<category><![CDATA[Microsoft SQL Server]]></category>
		<category><![CDATA[Microsoft SQL Server Admin]]></category>
		<category><![CDATA[dmv]]></category>
		<category><![CDATA[dynamic management views]]></category>
		<category><![CDATA[sql server 2005]]></category>
		<category><![CDATA[sql server 2008]]></category>

		<guid isPermaLink="false">/index.php/2010/01/find-out-what-percent-of-the-log-is-bein-2008/</guid>
		<description><![CDATA[Sometimes you want to quickly see the percentage of log spaced that each database is using on your server. In SQL Server 2005 and 2008 you can use the sys.dm_os_performance_counters dynamic management view to find out this information. The query below will list all database and the percentage of log spaced used. The cntr_value column [&#8230;]]]></description>
				<content:encoded><![CDATA[<p>Sometimes you want to quickly see the percentage of log spaced that each database is using on your server. In SQL Server 2005 and 2008 you can use the sys.dm_os_performance_counters dynamic management view to find out this information. The query below will list all database and the percentage of log spaced used. The cntr_value column will have the percent of the log file that is being used and instance_name will be the database name.</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
</pre></td><td class="de1"><pre class="de1"><span class="kw1">select</span> instance_name,cntr_value <span class="kw1">from</span> sys.<span class="me1">dm_os_performance_counters</span>
<span class="kw1">where</span> <span class="kw2">Object_name</span> <span class="sy0">=</span> <span class="st0">'SQLServer:Databases'</span> &nbsp; 
and counter_name <span class="sy0">=</span> <span class="st0">'Percent Log Used'</span> 
and instance_name <span class="sy0">&lt;&gt;</span> <span class="st0">'_Total'</span> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;
<span class="kw1">order</span> <span class="kw1">by</span> &nbsp; cntr_value <span class="kw1">desc</span> &nbsp;</pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">select instance_name,cntr_value from sys.dm_os_performance_counters
where Object_name = 'SQLServer:Databases'   
and counter_name = 'Percent Log Used' 
and instance_name &lt;&gt; '_Total'                                                                                                                          
order by   cntr_value desc  </pre></div></div>

<p>Here is the output from that query.</p>
<pre>&lt;strong&gt;instance_name       cntr_value&lt;/strong&gt;
model		    90
ReportServerTempDB  66
master              65
mssqlsystemresource 55
ReportServer        55
tempdb              50
msdb                5</pre>
<p>Notice that I filtered out the total with this clause <em>and instance_name <> &#8216;_Total&#8217;</em> The total number doesn&#8217;t really make sense for that query. </p>
<p>Now let&#8217;s take a look at another query. What if I want to know the size in KB for each log size and also for all of them combined? Here is the query for that.</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
</pre></td><td class="de1"><pre class="de1"><span class="kw1">select</span> instance_name,cntr_value <span class="kw1">from</span> sys.<span class="me1">dm_os_performance_counters</span>
<span class="kw1">where</span> <span class="kw2">Object_name</span> <span class="sy0">=</span> <span class="st0">'SQLServer:Databases'</span> &nbsp; 
and counter_name <span class="sy0">=</span> <span class="st0">'Log File(s) Size (KB)'</span> &nbsp; 
<span class="kw1">order</span> <span class="kw1">by</span> &nbsp; cntr_value <span class="kw1">desc</span> </pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">select instance_name,cntr_value from sys.dm_os_performance_counters
where Object_name = 'SQLServer:Databases'   
and counter_name = 'Log File(s) Size (KB)'   
order by   cntr_value desc </pre></div></div>

<p>Here is the output from that query.</p>
<pre>&lt;strong&gt;instance_name		cntr_value&lt;/strong&gt;
_Total			37524936
iSource_Report		14539576
iSource_Distribution	13217784
DJHFI_Research_db	8207096
msdb			625784
tempdb			102136
master			2808
ReportServer		1016
model			1016
ReportServerTempDB	760
mssqlsystemresource	504</pre>
<p>As you can see _Total is the first thing listed and it is actually a sum of all the log files in the query. The numbers don&#8217;t add up in my output because I removed some database names after running the query.</p>
<p>Since I showed you how to do the log files, here is a way how to show the size of all the data files. here is the query for the data files</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
</pre></td><td class="de1"><pre class="de1"><span class="kw1">select</span> instance_name,cntr_value <span class="kw1">from</span> sys.<span class="me1">dm_os_performance_counters</span>
<span class="kw1">where</span> <span class="kw2">Object_name</span> <span class="sy0">=</span> <span class="st0">'SQLServer:Databases'</span> &nbsp; 
and counter_name <span class="sy0">=</span> <span class="st0">'Data File(s) Size (KB)'</span> &nbsp; 
<span class="kw1">order</span> <span class="kw1">by</span> &nbsp; cntr_value <span class="kw1">desc</span> </pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">select instance_name,cntr_value from sys.dm_os_performance_counters
where Object_name = 'SQLServer:Databases'   
and counter_name = 'Data File(s) Size (KB)'   
order by   cntr_value desc </pre></div></div>

<p>And here is the output</p>
<pre>&lt;strong&gt;instance_name		cntr_value&lt;/strong&gt;
_Total			58232704
msdb                    13512512
tempdb                  1542720
mssqlsystemresource     39232
master                  6720
ReportServer            4288
ReportServerTempDB      3264
model                   2240</pre>
<p>And just as with the log size query, you can see _Total is the first thing listed and it is actually a sum of all the data files in the query. The numbers don&#8217;t add up in my output because I removed some database names after running the query.</p>
<p>I will be back with another post tomorrow showing you how you can use the sys.dm_os_performance_counters dynamic management view to see if you are still using any deprecated features in your database.</p>
<p>*** <strong>Remember, if you have a SQL related question try our <a href="http://forum.lessthandot.com/viewforum.php?f=17">Microsoft SQL Server Programming</a> forum or our <a href="http://forum.lessthandot.com/viewforum.php?f=22">Microsoft SQL Server Admin</a> forum</strong><ins></ins></p>
]]></content:encoded>
			<wfw:commentRss>/index.php/datamgmt/dbprogramming/find-out-what-percent-of-the-log-is-bein-2008/feed/</wfw:commentRss>
		<slash:comments>2</slash:comments>
		</item>
	</channel>
</rss>
