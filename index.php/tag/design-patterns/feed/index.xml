<?xml version="1.0" encoding="UTF-8"?><rss version="2.0"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:atom="http://www.w3.org/2005/Atom"
	xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
	xmlns:slash="http://purl.org/rss/1.0/modules/slash/"
	>

<channel>
	<title>design patterns &#8211; LessthanDot</title>
	<atom:link href="/index.php/tag/design-patterns/feed/" rel="self" type="application/rss+xml" />
	<link>/</link>
	<description>A Technical Community for IT Professionals</description>
	<lastBuildDate>Sat, 09 Mar 2019 12:50:36 +0000</lastBuildDate>
	<language>en-US</language>
	<sy:updatePeriod>hourly</sy:updatePeriod>
	<sy:updateFrequency>1</sy:updateFrequency>
	<generator>https://wordpress.org/?v=4.6.1</generator>
	<item>
		<title>Using a Perl Singleton to Share Values Between Objects</title>
		<link>/index.php/webdev/serverprogramming/using-a-perl-singleton/</link>
		<comments>/index.php/webdev/serverprogramming/using-a-perl-singleton/#comments</comments>
		<pubDate>Wed, 12 Sep 2012 14:54:00 +0000</pubDate>
		<dc:creator><![CDATA[Rob Earl]]></dc:creator>
				<category><![CDATA[Perl]]></category>
		<category><![CDATA[Server Programming]]></category>
		<category><![CDATA[design patterns]]></category>
		<category><![CDATA[perl]]></category>
		<category><![CDATA[singleton]]></category>

		<guid isPermaLink="false">/index.php/2012/09/using-a-perl-singleton/</guid>
		<description><![CDATA[It's been quite a while since I last posted here. Since my last entry I got a new job,  got married, went on honeymoon (got back yesterday!) and spent quite a lot of time maintaining legacy Perl code.

One thing I see a lot is sharing objects by passi&#8230;]]></description>
				<content:encoded><![CDATA[<p>It&#8217;s been quite a while since I last posted here. Since my last entry I got a new job,  got married, went on honeymoon (got back yesterday!) and spent quite a lot of time maintaining legacy Perl code.</p>
<p>One thing I see a lot is sharing objects by passing them to the constructor of a new object. This is fine until you&#8217;re dealing with complicated sets of objects within objects. </p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="perl"><thead><tr><td colspan="2"  class="head">Perl</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
</pre></td><td class="de1"><pre class="de1"><span class="co1">#!/usr/bin/perl</span>
&nbsp;
<span class="kw2">use</span> strict<span class="sy0">;</span>
&nbsp;
<span class="co1"># Read some variables out of a configuration file.</span>
<span class="kw1">my</span> <span class="re0">$config</span> <span class="sy0">=</span> get_config<span class="br0">&#40;</span><span class="re0">$config_file</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
<span class="co1"># Create a new object which contains an object which uses some values from the config.</span>
<span class="kw1">my</span> <span class="re0">$object</span> <span class="sy0">=</span> MyObject<span class="sy0">-&gt;</span><span class="kw2">new</span><span class="br0">&#40;</span><span class="re0">$config</span><span class="br0">&#41;</span><span class="sy0">;</span>
<span class="re0">$object</span><span class="sy0">-&gt;</span><span class="me1">do_something</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
<span class="kw3">package</span> MyObject<span class="sy0">;</span>
&nbsp;
<span class="kw2">sub</span> <span class="kw2">new</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; <span class="kw1">my</span> <span class="re0">$class</span> <span class="sy0">=</span> <span class="kw3">shift</span><span class="sy0">;</span>
&nbsp; &nbsp; <span class="kw1">my</span> <span class="re0">$config</span> <span class="sy0">=</span> <span class="kw3">shift</span><span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; <span class="co1"># Store the config incase we create any objects which need it.</span>
&nbsp; &nbsp; <span class="kw1">my</span> <span class="re0">$self</span> <span class="sy0">=</span> <span class="br0">&#123;</span> <span class="st_h">'config'</span> <span class="sy0">=&gt;</span> <span class="re0">$config</span> <span class="br0">&#125;</span><span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; <span class="kw3">return</span> <span class="kw3">bless</span> <span class="re0">$self</span><span class="sy0">,</span> <span class="re0">$class</span><span class="sy0">;</span>
<span class="br0">&#125;</span>
&nbsp;
<span class="kw2">sub</span> do_something <span class="br0">&#123;</span>
&nbsp; &nbsp; <span class="kw1">my</span> <span class="re0">$self</span> <span class="sy0">=</span> <span class="kw3">shift</span><span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; <span class="kw1">my</span> <span class="re0">$object2</span> <span class="sy0">=</span> MyObject2<span class="sy0">-&gt;</span><span class="kw2">new</span><span class="br0">&#40;</span><span class="re0">$self</span><span class="sy0">-&gt;</span><span class="br0">&#123;</span><span class="st_h">'config'</span><span class="br0">&#125;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; <span class="kw3">return</span> <span class="re0">$object2</span><span class="sy0">-&gt;</span><span class="me1">do_something_else</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
<span class="br0">&#125;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">#!/usr/bin/perl

use strict;

# Read some variables out of a configuration file.
my $config = get_config($config_file);

# Create a new object which contains an object which uses some values from the config.
my $object = MyObject-&gt;new($config);
$object-&gt;do_something();

package MyObject;

sub new {
    my $class = shift;
    my $config = shift;

    # Store the config incase we create any objects which need it.
    my $self = { 'config' =&gt; $config };

    return bless $self, $class;
}

sub do_something {
    my $self = shift;

    my $object2 = MyObject2-&gt;new($self-&gt;{'config'});

    return $object2-&gt;do_something_else();
}</pre></div></div>

<p>MyObject is now holding a reference to the config object which it doesn&#8217;t need directly. This will only get worse if MyObject2 needs another object which requires the config object, etc.</p>
<p>Instead we could use a singleton object:</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="perl"><thead><tr><td colspan="2"  class="head">Perl</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
</pre></td><td class="de1"><pre class="de1"><span class="kw3">package</span> MyConfigObject<span class="sy0">;</span>
&nbsp;
<span class="kw2">use</span> strict<span class="sy0">;</span>
<span class="kw2">use</span> Carp<span class="sy0">;</span>
&nbsp;
<span class="kw1">my</span> <span class="re0">$config</span> <span class="sy0">=</span> <span class="kw3">undef</span><span class="sy0">;</span>
&nbsp;
<span class="kw2">sub</span> <span class="kw2">new</span> <span class="br0">&#123;</span>
&nbsp;
&nbsp; &nbsp; <span class="kw1">if</span><span class="br0">&#40;</span><span class="sy0">!</span><span class="re0">$config</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">my</span> <span class="re0">$class</span> <span class="sy0">=</span> <span class="kw3">shift</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">my</span> <span class="re0">$config_file</span> <span class="sy0">=</span> <span class="kw3">shift</span><span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; croak <span class="kw1">unless</span> <span class="re0">$config_file</span><span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; <span class="re0">$config</span> <span class="sy0">=</span> <span class="kw3">bless</span> <span class="br0">&#123;</span><span class="br0">&#125;</span><span class="sy0">,</span> <span class="re0">$class</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="re0">$config</span><span class="sy0">-&gt;</span><span class="me1">parse_file</span><span class="br0">&#40;</span><span class="re0">$config_file</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp;
&nbsp; &nbsp; <span class="kw3">return</span> <span class="re0">$config</span><span class="sy0">;</span>
<span class="br0">&#125;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">package MyConfigObject;

use strict;
use Carp;

my $config = undef;

sub new {

    if(!$config) {
        my $class = shift;
        my $config_file = shift;

        croak unless $config_file;

        $config = bless {}, $class;
        $config-&gt;parse_file($config_file);
    }

    return $config;
}</pre></div></div>

<p>The example above changes to:</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="perl"><thead><tr><td colspan="2"  class="head">Perl</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
</pre></td><td class="de1"><pre class="de1"><span class="co1">#!/usr/bin/perl</span>
&nbsp;
<span class="kw2">use</span> strict<span class="sy0">;</span>
&nbsp;
<span class="co1"># Create a new object to hold the values from our config file.</span>
<span class="kw1">my</span> <span class="re0">$config</span> <span class="sy0">=</span> MyConfigObject<span class="sy0">-&gt;</span><span class="kw2">new</span><span class="br0">&#40;</span><span class="re0">$config_file</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
<span class="co1"># Create a new object which contains an object which uses some values from the config.</span>
<span class="kw1">my</span> <span class="re0">$object</span> <span class="sy0">=</span> MyObject<span class="sy0">-&gt;</span><span class="kw2">new</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
<span class="re0">$object</span><span class="sy0">-&gt;</span><span class="me1">do_something</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
<span class="kw3">package</span> MyObject<span class="sy0">;</span>
&nbsp;
<span class="kw2">sub</span> <span class="kw2">new</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; <span class="kw1">my</span> <span class="re0">$class</span> <span class="sy0">=</span> <span class="kw3">shift</span><span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; <span class="kw3">return</span> <span class="kw3">bless</span> <span class="br0">&#123;</span><span class="br0">&#125;</span><span class="sy0">,</span> <span class="re0">$class</span><span class="sy0">;</span>
<span class="br0">&#125;</span>
&nbsp;
<span class="kw2">sub</span> do_something <span class="br0">&#123;</span>
&nbsp; &nbsp; <span class="kw1">my</span> <span class="re0">$self</span> <span class="sy0">=</span> <span class="kw3">shift</span><span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; <span class="kw1">my</span> <span class="re0">$object2</span> <span class="sy0">=</span> MyObject2<span class="sy0">-&gt;</span><span class="kw2">new</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; <span class="kw3">return</span> <span class="re0">$object2</span><span class="sy0">-&gt;</span><span class="me1">do_something_else</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
<span class="br0">&#125;</span>
&nbsp;
<span class="kw3">package</span> MyObject2<span class="sy0">;</span>
&nbsp;
<span class="kw2">sub</span> <span class="kw2">new</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; <span class="co1"># Get the config object</span>
&nbsp; &nbsp; <span class="kw1">my</span> <span class="re0">$config</span> <span class="sy0">=</span> MyConfigObject<span class="sy0">-&gt;</span><span class="kw2">new</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; <span class="co1"># Do some stuff with it!</span>
<span class="br0">&#125;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">#!/usr/bin/perl

use strict;

# Create a new object to hold the values from our config file.
my $config = MyConfigObject-&gt;new($config_file);

# Create a new object which contains an object which uses some values from the config.
my $object = MyObject-&gt;new();
$object-&gt;do_something();

package MyObject;

sub new {
    my $class = shift;

    return bless {}, $class;
}

sub do_something {
    my $self = shift;

    my $object2 = MyObject2-&gt;new();

    return $object2-&gt;do_something_else();
}

package MyObject2;

sub new {
    # Get the config object
    my $config = MyConfigObject-&gt;new();

    # Do some stuff with it!
}</pre></div></div>

<p>Whenever we need to use a value from the config file, we create a new MyConfigObject and get the instance we already created without having to reparse the config file or maintain complicated links through parent objects.</p>
]]></content:encoded>
			<wfw:commentRss>/index.php/webdev/serverprogramming/using-a-perl-singleton/feed/</wfw:commentRss>
		<slash:comments>5</slash:comments>
		</item>
		<item>
		<title>Patterns And Practices Application Architecture Guide 2.0, Something Everyone Should Read</title>
		<link>/index.php/architect/hardwareinfrastructuredesign/patterns-and-practices-application-archi/</link>
		<comments>/index.php/architect/hardwareinfrastructuredesign/patterns-and-practices-application-archi/#respond</comments>
		<pubDate>Thu, 12 Mar 2009 11:04:46 +0000</pubDate>
		<dc:creator><![CDATA[SQLDenis]]></dc:creator>
				<category><![CDATA[Hardware and Infrastructure Design]]></category>
		<category><![CDATA[architecture]]></category>
		<category><![CDATA[best practices]]></category>
		<category><![CDATA[cheat sheets]]></category>
		<category><![CDATA[data access]]></category>
		<category><![CDATA[design]]></category>
		<category><![CDATA[design patterns]]></category>
		<category><![CDATA[workflow]]></category>

		<guid isPermaLink="false">/index.php/2009/03/patterns-and-practices-application-archi/</guid>
		<description><![CDATA[I was listening to show number 426 on dotnetrocks: Rob Boucher on Application Architecture Guidance! They mentioned the Patterns And Practices Application Architecture Guide 2.0, this guide is available for free on codeplex.

Although it is a Microsof&#8230;]]></description>
				<content:encoded><![CDATA[<p>I was listening to show number 426 on dotnetrocks: <a href="http://www.dotnetrocks.com/default.aspx?showNum=426">Rob Boucher on Application Architecture Guidance!</a> They mentioned the <a href="http://www.codeplex.com/AppArchGuide">Patterns And Practices Application Architecture Guide 2.0</a>, this guide is available for free on codeplex.</p>
<p>Although it is a Microsoft technology centric guide, there should be chapters for every developer in your group.<br />
Here is one example from the book</p>
<h3>
Key Design Principles<br />
</h3>
<p>When getting started with your design, bear in mind the key principles that will help you to create architecture that meets “best practices,” minimizes costs and maintenance requirements, and promotes usability and extendibility. The key principles are:
<ul>
<li><b>Separation of concerns</b>. Break your application into distinct features that overlap in functionality as little as possible.</li>
<li><b>Single Responsibility Principle</b>. Each component or a module should be responsible for only a specific feature or functionality.</li>
<li><b>Principle of least knowledge</b>.** A component or an object should not know about internal details of other components or objects. Also known as the Law of Demeter** (LoD).</li>
<li><b>Don’t Repeat Yourself (DRY)</b>. There should be only one component providing a specific functionality; the functionality should not be duplicated in any other component.</li>
<li><b>Avoid doing a big design upfront</b>. If your application requirements are unclear, or if there is a possibility of the design evolving over time, avoid making a large design effort prematurely. This design principle is often abbreviated as BDUF. </li>
<li><b>Prefer composition over inheritance</b>. Wherever possible, use composition over inheritance when reusing functionality because inheritance increases the dependency between parent and child classes, thereby limiting the reuse of child classes.</li>
</ul>
<p>The nice thing is that each chapter has a resource section at the bottom so that you can dive deep into a specific topic mentioned in the chapter itself. This is great stuff and I recommend that you check out this guide. You also might want to listen to the dotnetrocks podcast about this guide: http://www.dotnetrocks.com/default.aspx?showNum=426</p>
<p>Here is a list of all the chapters, make sure you check out the cheat sheets</p>
<h3>
Chapters<br />
</h3>
<ul>
<li><a href="http://apparchguide.codeplex.com/Wiki/View.aspx?title=Introduction%20V2&amp;referringTitle=Home">Introduction</a></li>
<li><a href="http://apparchguide.codeplex.com/Wiki/View.aspx?title=Architecture%20and%20Design%20Solutions%20At%20a%20Glance&amp;referringTitle=Home">Architecture and Design Solutions At a Glance</a></li>
<li><a href="http://apparchguide.codeplex.com/Wiki/View.aspx?title=Fast%20Track&amp;referringTitle=Home">Fast Track</a></li>
</ul>
<h4>
Part I, Fundamentals<br />
</h4>
<ul>
<li><a href="http://apparchguide.codeplex.com/Wiki/View.aspx?title=Chapter%201%20-%20Architecture%20Fundamentals&amp;referringTitle=Home">Chapter 1 &#8211; Fundamentals of Application Architecture </a></li>
<li><a href="http://apparchguide.codeplex.com/Wiki/View.aspx?title=.NET%20Platform%20Overview%20V2&amp;referringTitle=Home">Chapter 2 &#8211; .NET Platform Overview</a></li>
<li><a href="http://apparchguide.codeplex.com/Wiki/View.aspx?title=Chapter%203%20-%20Architecture%20and%20Design%20Guidelines&amp;referringTitle=Home">Chapter 3 &#8211; Architecture and Design Guidelines</a></li>
</ul>
<h4>
Part II, Design<br />
</h4>
<ul>
<li><a href="http://apparchguide.codeplex.com/Wiki/View.aspx?title=Chapter%204%20-%20Designing%20Your%20Architecture&amp;referringTitle=Home">Chapter 4 &#8211; Designing Your Architecture</a></li>
<li><a href="http://apparchguide.codeplex.com/Wiki/View.aspx?title=Chapter%205%20-%20Deployment%20Patterns&amp;referringTitle=Home">Chapter 5 &#8211; Deployment Patterns</a></li>
<li><a href="http://apparchguide.codeplex.com/Wiki/View.aspx?title=Chapter%206%20-%20Architectural%20Styles&amp;referringTitle=Home">Chapter 6 &#8211; Architectural Styles</a></li>
<li><a href="http://apparchguide.codeplex.com/Wiki/View.aspx?title=Chapter%207%20-%20Quality%20Attributes&amp;referringTitle=Home">Chapter 7 &#8211; Quality Attributes</a></li>
<li><a href="http://apparchguide.codeplex.com/Wiki/View.aspx?title=Chapter%208%20-%20Communication%20Guidelines&amp;referringTitle=Home">Chapter 8 &#8211; Communication Guidelines</a></li>
</ul>
<h4>
Part III, Layers<br />
</h4>
<ul>
<li><a href="http://apparchguide.codeplex.com/Wiki/View.aspx?title=Chapter%209%20-%20Layers%20and%20Tiers&amp;referringTitle=Home">Chapter 9 &#8211; Layers and Tiers</a></li>
<li><a href="http://apparchguide.codeplex.com/Wiki/View.aspx?title=Chapter%2010%20-%20Presentation%20Layer%20Guidelines&amp;referringTitle=Home">Chapter 10 &#8211; Presentation Layer Guidelines</a></li>
<li><a href="http://apparchguide.codeplex.com/Wiki/View.aspx?title=Chapter%2011%20-%20Business%20Layer%20Guidelines&amp;referringTitle=Home">Chapter 11 &#8211; Business Layer Guidelines</a></li>
<li><a href="http://apparchguide.codeplex.com/Wiki/View.aspx?title=Chapter%2012%20-%20Data%20Access%20Layer%20Guidelines&amp;referringTitle=Home">Chapter 12 &#8211; Data Access Layer Guidelines</a></li>
<li><a href="http://apparchguide.codeplex.com/Wiki/View.aspx?title=Chapter%2013%20-%20Service%20Layer%20Guidelines&amp;referringTitle=Home">Chapter 13 &#8211; Service Layer Guidelines</a></li>
</ul>
<h4>
Part IV, Archetypes<br />
</h4>
<ul>
<li><a href="http://apparchguide.codeplex.com/Wiki/View.aspx?title=Chapter%2014%20-%20Application%20Archetypes&amp;referringTitle=Home">Chapter 14 &#8211; Application Archetypes</a></li>
<li><a href="http://apparchguide.codeplex.com/Wiki/View.aspx?title=Chapter%2015%20-%20Web%20Applications&amp;referringTitle=Home">Chapter 15 &#8211; Web Applications</a></li>
<li><a href="http://apparchguide.codeplex.com/Wiki/View.aspx?title=Chapter%2016%20-%20Rich%20Internet%20Applications%20%28RIA%29&amp;referringTitle=Home">Chapter 16 &#8211; Rich Internet Applications (RIA)</a></li>
<li><a href="http://apparchguide.codeplex.com/Wiki/View.aspx?title=Chapter%2017%20-%20Rich%20Client%20Applications&amp;referringTitle=Home">Chapter 17 &#8211; Rich Client Applications</a></li>
<li><a href="http://apparchguide.codeplex.com/Wiki/View.aspx?title=Chapter%2018%20-%20Services&amp;referringTitle=Home">Chapter 18 &#8211; Services</a></li>
<li><a href="http://apparchguide.codeplex.com/Wiki/View.aspx?title=Chapter%2019%20-%20Mobile%20Applications&amp;referringTitle=Home">Chapter 19 &#8211; Mobile Applications</a></li>
<li><a href="http://apparchguide.codeplex.com/Wiki/View.aspx?title=Chapter%2020%20-%20Office%20Business%20Applications%20%28OBA%29&amp;referringTitle=Home">Chapter 20 &#8211; Office Business Applications (OBA)</a></li>
<li><a href="http://apparchguide.codeplex.com/Wiki/View.aspx?title=Chapter%2021%20-%20SharePoint%20LOB%20Applications&amp;referringTitle=Home">Chapter 21 &#8211; SharePoint Line-Of-Business (LOB) Applications</a></li>
</ul>
<h4>
Appendix<br />
</h4>
<ul>
<li><a href="http://apparchguide.codeplex.com/Wiki/View.aspx?title=Pattern%20Catalog%20V2&amp;referringTitle=Home">Cheat Sheet &#8211; patterns &amp; practices Pattern Catalog</a></li>
<li><a href="http://apparchguide.codeplex.com/Wiki/View.aspx?title=Cheat%20Sheet%20-%20Presentation%20Technology%20Matrix&amp;referringTitle=Home">Cheat Sheet &#8211; Presentation Technology Matrix</a></li>
<li><a href="http://apparchguide.codeplex.com/Wiki/View.aspx?title=Cheat%20Sheet%20-%20Data%20Access%20Technology%20Matrix&amp;referringTitle=Home">Cheat Sheet &#8211; Data Access Technology Matrix</a></li>
<li><a href="http://apparchguide.codeplex.com/Wiki/View.aspx?title=Cheat%20Sheet%20-%20Workflow%20Technology%20Matrix&amp;referringTitle=Home">Cheat Sheet &#8211; Workflow Technology Matrix</a></li>
<li><a href="http://apparchguide.codeplex.com/Wiki/View.aspx?title=Cheat%20Sheet%20-%20Integration%20Technology%20Matrix&amp;referringTitle=Home">Cheat Sheet &#8211; Integration Technology Matrix</a></li>
</ul>
<h3>
Errata Page<br />
</h3>
<ul>
<li><a href="http://apparchguide.codeplex.com/Wiki/View.aspx?title=Errata%20Page&amp;referringTitle=Home">Errata Page</a></li>
</ul>
]]></content:encoded>
			<wfw:commentRss>/index.php/architect/hardwareinfrastructuredesign/patterns-and-practices-application-archi/feed/</wfw:commentRss>
		<slash:comments>0</slash:comments>
		</item>
		<item>
		<title>Nice .NET Design Patterns Articles</title>
		<link>/index.php/webdev/webdesigngraphicsstyling/nice-net-design-patterns-articles/</link>
		<comments>/index.php/webdev/webdesigngraphicsstyling/nice-net-design-patterns-articles/#respond</comments>
		<pubDate>Wed, 17 Sep 2008 13:40:00 +0000</pubDate>
		<dc:creator><![CDATA[SQLDenis]]></dc:creator>
				<category><![CDATA[Web Design, Graphics and Styling]]></category>
		<category><![CDATA[.net]]></category>
		<category><![CDATA[c#]]></category>
		<category><![CDATA[design patterns]]></category>
		<category><![CDATA[oop]]></category>
		<category><![CDATA[singleton]]></category>

		<guid isPermaLink="false">/index.php/2008/09/nice-net-design-patterns-articles/</guid>
		<description><![CDATA[The DotNetSlackers site has a nice series of articles about design patterns. The articles were written by Granville Barnett and are a very good read. Here is what is in the first four articles. Design Patterns – Part 1 Learn how to design more robust and maintainable code by incorporating design patterns into your software [&#8230;]]]></description>
				<content:encoded><![CDATA[<p>The DotNetSlackers site has a nice series of articles about design patterns. The articles were written by Granville Barnett and are a very good read. Here is what is in the first four articles.</p>
<p><a href="http://dotnetslackers.com/articles/designpatterns/Design-Patterns-Part-1.aspx">Design Patterns – Part 1</a><br />
Learn how to design more robust and maintainable code by incorporating design patterns into your software projects.<br />
1 Introduction<br />
2 The strategy pattern<br />
3 Implementing our design<br />
4 Summary</p>
<p><a href="http://dotnetslackers.com/articles/designpatterns/Design-Patterns-Part-2.aspx">Design Patterns – Part 2</a><br />
In this part of the design patterns series we will take a look at the observer design pattern.<br />
1 Introduction<br />
2 What is the observer pattern?<br />
3 The Design<br />
4 Implementing our design<br />
5 Aren’t events already in .NET?<br />
6 Summary</p>
<p><a href="http://dotnetslackers.com/articles/designpatterns/Design-Patterns-Part-3.aspx">Design Patterns – Part 3</a><br />
In this part of the design patterns series we will take a look at the factory pattern.<br />
1 Introduction<br />
2 The simple factory<br />
3 Factory pattern<br />
4 Summary</p>
<p><a href="http://dotnetslackers.com/articles/designpatterns/Design-Patterns-Part-4.aspx">Design Patterns – Part 4</a><br />
In this part of the design patterns series we will look at the singleton pattern.<br />
1 Introduction<br />
2 How is a singleton typically implemented?<br />
3 The static modifier<br />
4 Issues with our first design<br />
5 beforefieldinit<br />
6 Summary<br />
7 Acknowledgements<br />
8 References</p>
<p>So what are you waiting for? Start reading the articles!</p>
]]></content:encoded>
			<wfw:commentRss>/index.php/webdev/webdesigngraphicsstyling/nice-net-design-patterns-articles/feed/</wfw:commentRss>
		<slash:comments>0</slash:comments>
		</item>
		<item>
		<title>5 Books Every Developer Should Read</title>
		<link>/index.php/desktopdev/mstech/5-books-every-developer-should-read/</link>
		<comments>/index.php/desktopdev/mstech/5-books-every-developer-should-read/#comments</comments>
		<pubDate>Sun, 20 Jul 2008 18:12:06 +0000</pubDate>
		<dc:creator><![CDATA[SQLDenis]]></dc:creator>
				<category><![CDATA[Microsoft Technologies]]></category>
		<category><![CDATA[architecture]]></category>
		<category><![CDATA[book]]></category>
		<category><![CDATA[design]]></category>
		<category><![CDATA[design patterns]]></category>
		<category><![CDATA[development]]></category>
		<category><![CDATA[programming]]></category>
		<category><![CDATA[toread]]></category>

		<guid isPermaLink="false">/index.php/2008/07/5-books-every-developer-should-read/</guid>
		<description><![CDATA[Which books should you read/buy when you are a programmer? I have listed 5 books that have helped me a lot. The books that I have chosen are not specific to any language although some of the books have examples in one language only. Design Patterns has examples in smalltalk and C++ but since the [&#8230;]]]></description>
				<content:encoded><![CDATA[<p>Which books should you read/buy when you are a programmer? I have listed 5 books that have helped me a lot. The books that I have chosen are not specific to any language although some of the books have examples in one language only. Design Patterns has examples in smalltalk and C++ but since the code is not very complicated you should have no problem converting it to your language of choice. I have included links to sample chapters for the books where I could find them. For some of the books I have also provided links to the author&#8217;s site; some of them have additional material so that you can look at that. I have also provided Amazon links so that you can read reviews. All of these books are rated 4 stars or higher. I have also provided alternate books if I felt that there were more choices for the same subject</p>
<p><strong><span style="font-size:130%;color:#cc0000;"><a href="http://www.amazon.com/exec/obidos/ASIN/0201633612/sql08-20/102-1687136-8876917?%5Fencoding=UTF8&amp;camp=1789&amp;link%5Fcode=xm2">Design Patterns</a></span></strong><br />
This book is one of the seminal books on patterns in software development. If you are a professional software developer, you must read this. If you are learning to write good software, this is a book that you will need to take on at some point</p>
<p>Design Patterns <a href="http://lci.cs.ubbcluj.ro/~raduking/Books/Design%20Patterns/">Site</a></p>
<p><span style="font-size:130%;color:#cc0000;"><strong><a href="http://www.amazon.com/exec/obidos/ASIN/0735619670/sql08-20/102-5735017-0910517?%5Fencoding=UTF8&amp;camp=1789&amp;link%5Fcode=xm2">Code Complete</a><br />
</strong></span>Code complete provides the reader with an insight into how<br />
to write good and easy to understand code. You will come away from this book with an appreciation of the thought process that should go into writing every class, routine, comment etc&#8230;</p>
<p>Software development steps are outlined clearly. Pitfalls to avoid are discussed and rewards obtained from good code is explained. The author tells you what you need to know and most importantly why you need this information. If one applies the ideas in this book, I think you will be a better programmer.</p>
<p>Sample Chapter: <a href="http://www.cc2e.com/docs/Chapter1-Welcome.pdf">Chapter 1: Welcome (pdf)</a><br />
Sample Chapter: <a href="http://www.cc2e.com/docs/Chapter5-Design.pdf">Chapter 5: Design in Construction (pdf)</a></p>
<p>Code Complete Author&#8217;s <a href="http://www.cc2e.com/">Site</a></p>
<p><span style="font-size:130%;color:#cc0000;"><strong><a href="http://www.amazon.com/exec/obidos/ASIN/020161622X/sql08-20/102-5735017-0910517?%5Fencoding=UTF8&amp;camp=1789&amp;link%5Fcode=xm2">The Pragmatic Programmer</a><br />
</strong></span>The pragmatic programmer provides invaluable advice to those who are just starting to program, and those who have been programing for years. By following the authors&#8217; simple rules you should have gained some programming wisdom that a programmer would realize in a decade.</p>
<p><strong>Extracts from the book</strong><br />
<a href="http://www.pragmaticprogrammer.com/ppbook/extracts/preface.html">The Preface</a><br />
<a href="http://www.pragmaticprogrammer.com/ppbook/extracts/no_broken_windows.html">Software Entropy</a><br />
<a href="http://www.pragmaticprogrammer.com/ppbook/extracts/coincidence.html">Programming by Coincidence</a><br />
<a href="http://www.pragmaticprogrammer.com/ppbook/extracts/wizards.html">Evil Wizards</a><br />
<a href="http://www.pragmaticprogrammer.com/ppbook/extracts/balance_resources.html">Balance Resources</a><br />
<a href="http://www.pragmaticprogrammer.com/ppbook/extracts/rule_list.html">Summary of the book&#8217;s tips</a><br />
<a href="http://www.pragmaticprogrammer.com/ppbook/extracts/contents.html">Contents</a></p>
<p><strong><a href="http://www.amazon.com/exec/obidos/ASIN/0201485672/sql08-20/102-5735017-0910517?%5Fencoding=UTF8&amp;camp=1789&amp;link%5Fcode=xm2"><span style="font-size:130%;">Refactoring</span> </a><br />
</strong>This book will change the way you think about and working with exisiting code. It&#8217;ll teach you that changing/modifying software is a fact of life. Martin Fowler does a awesome job of describing how to improve the design of existing code by performing various refactorings. Various design patterns are mentioned throughout the text, that is another reason why the design patterns book is so important</p>
<p>Sample Chapter: <a href="http://www.awprofessional.com/content/images/0201485672/samplechapter/chap4.html">Refactoring, a First Example</a></p>
<p><span style="font-size:130%;color:#cc0000;"><strong><a href="http://www.amazon.com/exec/obidos/ASIN/0321321278/sql08-20/102-5735017-0910517?%5Fencoding=UTF8&amp;camp=1789&amp;link%5Fcode=xm2">UML 2 and the Unified Process: Practical Object-Oriented Analysis and Design, 2nd Edition</a></strong></span><br />
UML has grown. A few years ago, when UML was just getting accepted, a book on how to use it would have been much thinner. But the successful broad uptake of UML led to its semantic notation being expanded. What the authors give us here is a thorough exposition of UML 2.0 and how to use it. It also goes into the Unified Process for running a project, and how this can be documented in UML</p>
<p>Sample Chapter: <a href="http://www.awprofessional.com/content/images/0321321278/samplechapter/arlow_ch09.pdf">Relationships </a></p>
<p>And here are a couple of more choices instead of the books above<br />
<a href="http://www.amazon.com/exec/obidos/ASIN/0135974445/sql08-20/102-1687136-8876917?%5Fencoding=UTF8&amp;camp=1789&amp;link%5Fcode=xm2">Agile Software Development, Principles, Patterns, and Practices</a><br />
<a href="http://www.amazon.com/exec/obidos/ASIN/0471197130/sql08-20/102-1687136-8876917?%5Fencoding=UTF8&amp;camp=1789&amp;link%5Fcode=xm2">AntiPatterns</a><br />
<a href="http://www.amazon.com/exec/obidos/ASIN/0596008740/sql08-20/102-1687136-8876917?%5Fencoding=UTF8&amp;camp=1789&amp;link%5Fcode=xm2">Prefactoring </a><br />
<a href="http://www.amazon.com/exec/obidos/ASIN/1932394613/sql08-20/102-5735017-0910517?%5Fencoding=UTF8&amp;camp=1789&amp;link%5Fcode=xm2">Ajax in Action</a><br />
<a href="http://www.amazon.com/exec/obidos/ASIN/0596007124/sql08-20/102-5735017-0910517?%5Fencoding=UTF8&amp;camp=1789&amp;link%5Fcode=xm2">Head First Design Patterns</a></p>
]]></content:encoded>
			<wfw:commentRss>/index.php/desktopdev/mstech/5-books-every-developer-should-read/feed/</wfw:commentRss>
		<slash:comments>7</slash:comments>
		</item>
	</channel>
</rss>
