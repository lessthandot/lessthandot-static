<?xml version="1.0" encoding="UTF-8"?><rss version="2.0"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:atom="http://www.w3.org/2005/Atom"
	xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
	xmlns:slash="http://purl.org/rss/1.0/modules/slash/"
	>

<channel>
	<title>ms test &#8211; LessthanDot</title>
	<atom:link href="/index.php/tag/ms-test/feed/" rel="self" type="application/rss+xml" />
	<link>/</link>
	<description>A Technical Community for IT Professionals</description>
	<lastBuildDate>Sat, 09 Mar 2019 12:50:36 +0000</lastBuildDate>
	<language>en-US</language>
	<sy:updatePeriod>hourly</sy:updatePeriod>
	<sy:updateFrequency>1</sy:updateFrequency>
	<generator>https://wordpress.org/?v=4.6.1</generator>
	<item>
		<title>Continuous Delivery Project &#8211; Incorporating the Unit Tests</title>
		<link>/index.php/enterprisedev/unittest/continuous-delivery-project-incorporating-the/</link>
		<comments>/index.php/enterprisedev/unittest/continuous-delivery-project-incorporating-the/#comments</comments>
		<pubDate>Mon, 19 Dec 2011 13:44:00 +0000</pubDate>
		<dc:creator><![CDATA[Eli Weinstock-Herman (tarwn)]]></dc:creator>
				<category><![CDATA[Application Lifecycle Management]]></category>
		<category><![CDATA[Unit Testing]]></category>
		<category><![CDATA[asp.net mvc]]></category>
		<category><![CDATA[continuous delivery]]></category>
		<category><![CDATA[continuous integration]]></category>
		<category><![CDATA[jenkins]]></category>
		<category><![CDATA[ms test]]></category>
		<category><![CDATA[mvc music store]]></category>
		<category><![CDATA[unit testing]]></category>

		<guid isPermaLink="false">/index.php/2011/12/continuous-delivery-project-incorporating-the/</guid>
		<description><![CDATA[The purpose of the integration build is to bring potential issues to the surface as quickly as possible. Unit tests run quickly and adding them to the continuous integration build helps flush out defects as close to the beginning of the process as possible. Generally build engines will support unit test framework by directly integrating with them or by providing an ability to execute the test framework and import their results.]]></description>
				<content:encoded><![CDATA[<p>The purpose of the integration build is to bring potential issues to the surface as quickly as possible. Unit tests run quickly and adding them to the continuous integration build helps flush out defects as close to the beginning of the process as possible. Generally build engines will support unit test framework by directly integrating with them or by providing an ability to execute the test framework and import their results.</p>
<div style="text-align: center; font-size: .9em; color: #666666;">
	<img src="http://tiernok.com/LTDBlog/ContinuousDelivery/Overview_p3.png" title="Delivery Pipeline - Focus of Current Post" /><br />
	Delivery Pipeline &#8211; Focus of Current Post
</div>
<p>This is the fourth post in a multi-part series on my Continuous Delivery pipeline project. The <a href="/index.php/EnterpriseDev/UnitTest/continuous-delivery-project-making-mvcmusicstore" title="Making MVCMusic Store Testable">previous post</a> followed the changes necessary to add unit testing to the MVC Music Store project, a process that ended in the creation of unit tests for the Checkout process. In this post I will configure the CI build job to run the unit test suite, including extra steps necessary to get the MS Test framework runnable on the build server.</p>
<h2>Run the Build</h2>
<p>With the automated build already polling changes from the source code repository, this process actually started while I was still writing the initial unit tests for the prior post. With the little red &#8220;failed build&#8221; dot as my guide, and the ever present twitter bot reminding me on each broken commit, I ended up working on both the unit tests and the server configuration in overlapping steps.</p>
<div style="text-align: center; font-size: .9em; color: #666666;">
	<a href="http://tiernok.com/LTDBlog/ContinuousDelivery/unittest_firstfail.png" title="Larger picture" target="_blank"><img src="http://tiernok.com/LTDBlog/ContinuousDelivery/unittest_firstfail.png" title="Failing Unit Test Build" /></a><br />
	Failing Unit Test Build
</div>
<p>The initial build failure was due to the addition of the MS Test project to the solution. This test project includes necessary references for the MS Test libraries, but unfortunately those libraries are not included in the project or as part of the .Net framework installation. This causes the build to fail with missing reference errors.</p>
<p>There are several blogs and methods outlined to get MS Test running on a build server, including some registry hacks and other unsupported trickery. After spending some time exploring that route, I eventually gave up and installed Visual Studio on the test server. </p>
<p><i>This is an area that Microsoft could definitely use some improvement in (MS Test integration), but what&#8217;s interesting is that many experts on continuous delivery (of which I am definitely not one) actually suggest using the same software on the build server as the developers use to minimize differences in the builds. Whatever the case, the choice of MS Test generally ends with us having Visual Studio on our build server.</i></p>
<p>Once the install was completed and I had patched Visual Studio up to date, I was able to run successful builds again.</p>
<h2>Run the Tests in the Build</h2>
<p>At this point I am building the test project every time the build runs, but I&#8217;m not actually running any of the tests. In order to run the tests, I am going to drop to the command line and run the MS Test executable directly. To execute a command directly as a build step, I&#8217;ll add a &#8220;Windows Batch Command&#8221; step to the &#8220;Build&#8221; section of my CI Build job.</p>
<div style="text-align: center; font-size: .9em; color: #666666;">
	<a href="http://tiernok.com/LTDBlog/ContinuousDelivery/unittest_command.png" title="Larger picture" target="_blank"><img src="http://tiernok.com/LTDBlog/ContinuousDelivery/unittest_command.png" title="Jenkins Configuration - New Windows Batch Command" /></a><br />
	Jenkins Configuration &#8211; New Windows Batch Command
</div>
<p>The MS Test executable is located in the Visual Studio folder at <code class="codespan">C:Program Files (x86)Microsoft Visual Studio 10.0Common7IDEmstest.exe</code>. I&#8217;ll execute this against the compiled assembly from the MVCMusicStoreTests project and configure the results file to land somewhere obvious so i can import it later. </p>
<p>Jenkins provides a list of variables we can use in commands, in this case I&#8217;ll use the %WORKSPACE% variable to locate the assembly:<br />
<code class="codespan">"C:Program Files (x86)Microsoft Visual Studio 10.0Common7IDEmstest.exe" /resultsfile:"%WORKSPACE%MvcMusicStoreTestsbinReleaseMyTests.Results.xml" /testcontainer:"%WORKSPACE%MvcMusicStoreTestsbinReleaseMvcMusicStoreTests.dll" /nologo</code></p>
<p>At this point, I can run the build again but it doesn&#8217;t show anything different than before until I open the command log. Inside the command log I can see that the tests ran successfully as part of the build. I also can manually verify the results file was published to the location I specified above.</p>
<h2>Integrating the Test Run</h2>
<p>To integrate the MS Test results into Jenkins, I&#8217;ll use a plugin to map the MS Test format to a format that Jenkins natively understands (Junit XML results). A plugin is available from the &#8220;Manage Plugins&#8221; screen (Jenkins, Manage Jenkins, Manage Plugins, Click the Available Tab) to do this work for me. </p>
<p>After the plugin installs successfully, there is a new entry in the &#8220;Post-Build Actions&#8221; section of the job configuration. All I need to do is check the new &#8220;Publish MSTest test result report&#8221; checkbox and enter the path I used above for the result files. </p>
<div style="text-align: center; font-size: .9em; color: #666666;">
	<a href="http://tiernok.com/LTDBlog/ContinuousDelivery/unittest_results.png" title="Larger picture" target="_blank"><img src="http://tiernok.com/LTDBlog/ContinuousDelivery/unittest_results.png" title="Jenkins Configuration - New Windows Batch Command" /></a><br />
	Jenkins Configuration &#8211; New Windows Batch Command
</div>
<p>Now when I run the build again, a new section shows up on the run summary screen that indicates I don&#8217;t have any failing tests. Clicking that link for more details, I can see that Jenkins has parsed that results file from MS Test and provided information on all of the running tests and their execution times.</p>
<div style="text-align: center; font-size: .9em; color: #666666;">
	<a href="http://tiernok.com/LTDBlog/ContinuousDelivery/unittest_success.png" title="Larger picture" target="_blank"><img src="http://tiernok.com/LTDBlog/ContinuousDelivery/unittest_success.png" title="Jenkins Configuration - Successful Job w/ Unit Tests" /></a><br />
	Jenkins Configuration &#8211; Successful Job w/ Unit Tests
</div>
<p>In addition to the test information, there is also a new menu item on the left side named &#8220;History&#8221;. Clicking this will show historical information on the test runs, including a graph of the execution times and test counts. </p>
<div style="text-align: center; font-size: .9em; color: #666666;">
	<a href="http://tiernok.com/LTDBlog/ContinuousDelivery/unittest_history_lg.png" title="Larger picture" target="_blank"><img src="http://tiernok.com/LTDBlog/ContinuousDelivery/unittest_history.png" title="Jenkins Configuration - Unit Test History" /></a><br />
	Jenkins Configuration &#8211; Unit Test History
</div>
<p><i>Note: If, like me, you didn&#8217;t bother to define a server name in the Jenkins configuration panel, you will find that some of these links will not work from a remote server because they are defined with the full server name instead of relative links.</i></p>
<p>I am naturally paranoid when things work right away, so at this point I purposefully broke a unit test and reran the build to verify it would report it correctly.</p>
<div style="text-align: center; font-size: .9em; color: #666666;">
	<a href="http://tiernok.com/LTDBlog/ContinuousDelivery/unittest_failedrun_lg.png" title="Larger picture" target="_blank"><img src="http://tiernok.com/LTDBlog/ContinuousDelivery/unittest_failedrun.png" title="Jenkins Configuration - Failed Unit Test Run" /></a><br />
	Failed Unit Test Run
</div>
<p>And my twitter bot is, of course, more than happy to broadcast that failure far and wide.</p>
<div style="text-align: center; font-size: .9em; color: #666666;">
	<a href="https://twitter.com/#!/TarwnBuildSrvr" title="@TarwnBuildSrvr on Twitter" target="_blank"><img src="http://tiernok.com/LTDBlog/ContinuousDelivery/unittest_twitter.png" title="Jenkins Configuration - Failed Unit Test Run" /></a><br />
	Failed Unit Test Run
</div>
<h2>Next Steps</h2>
<p>With unit tests integrated into the build job, I am nearly done with the Continuous Integration stage of this pipeline. The last thing step will be to verify the packaged code can actually be deployed and to build in the ability to smoke test that deployed code.</p>
<style>
.thelist li{ color: #666666; }
.thelist .cur{ font-style: italic; color: black; }
</style>
<ul class="thelist">
<li><a href="http://wiki.lessthandot.com/index.php/Eli%27s_Continuous_Delivery_Project" title="Wiki post for Eli's Continuous Delivery Project">Wiki Post</a></li>
<li><a href="/index.php/EnterpriseDev/application-lifecycle-management/starting-a-continuous-delivery-project" title="Starting a Continuous Delivery Project">Starting a Continuous Delivery Project</a></li>
<li><a href="/index.php/EnterpriseDev/application-lifecycle-management/continuous-delivery-project-setting-up" title="Setting up the Continuous Integration stage">Setting up the Continuous Integration stage</a></li>
<li><a href="/index.php/EnterpriseDev/UnitTest/continuous-delivery-project-making-mvcmusicstore" title="Making ASP.Net MVC Music Store Testable">Making ASP.Net MVC Music Store Testable</a></li>
<li class="cur"><a href="/index.php/EnterpriseDev/UnitTest/continuous-delivery-project-incorporating-the" title="Incorporating Unit Tests in the CI stage">Incorporating Unit Tests in the CI stage</a></li>
<li><a href="/index.php/EnterpriseDev/application-lifecycle-management/continuous-delivery-project-deploy-and" title="Deploy and Smoke Test">Deploy and Smoke Test</a></li>
<li><a href="/index.php/EnterpriseDev/application-lifecycle-management/continuous-delivery-adding-an-automated" title="Adding an Automated Interface Testing stage">Adding an Automated Interface Testing stage</a></li>
<li><a href="/index.php/EnterpriseDev/application-lifecycle-management/continuous-delivery-dashboard-qa-and" title="Dashboard, QA and Production Deployment stage">Dashboard, QA and Production Deployment stage</a></li>
</ul>
]]></content:encoded>
			<wfw:commentRss>/index.php/enterprisedev/unittest/continuous-delivery-project-incorporating-the/feed/</wfw:commentRss>
		<slash:comments>1</slash:comments>
		</item>
		<item>
		<title>Continuous Delivery Project &#8211; Making MVCMusicStore Testable</title>
		<link>/index.php/enterprisedev/unittest/continuous-delivery-project-making-mvcmusicstore/</link>
		<comments>/index.php/enterprisedev/unittest/continuous-delivery-project-making-mvcmusicstore/#respond</comments>
		<pubDate>Fri, 16 Dec 2011 11:28:00 +0000</pubDate>
		<dc:creator><![CDATA[Eli Weinstock-Herman (tarwn)]]></dc:creator>
				<category><![CDATA[Application Lifecycle Management]]></category>
		<category><![CDATA[Unit Testing]]></category>
		<category><![CDATA[asp.net mvc]]></category>
		<category><![CDATA[continuous delivery]]></category>
		<category><![CDATA[ms test]]></category>
		<category><![CDATA[mvc music store]]></category>
		<category><![CDATA[mvccontrib]]></category>
		<category><![CDATA[rhinomocks]]></category>
		<category><![CDATA[unit testing]]></category>

		<guid isPermaLink="false">/index.php/2011/12/continuous-delivery-project-making-mvcmusicstore/</guid>
		<description><![CDATA[It can be challenging to add unit testing to a project that was built without planning to incorporate it. The ASP.Net MVC Music Store tutorial was not built with unit testing in mind, but today we're going to walk through the addition of Controller unit tests, focusing on a controller that directly references Entity Framework objects and implicitly interacts with ASP.Net Membership objects and Request data from the current HttpContext.]]></description>
				<content:encoded><![CDATA[<p>It can be challenging to add unit testing to a project that was built without planning to incorporate it. The ASP.Net MVC Music Store tutorial was not built with unit testing in mind, but today we&#8217;re going to walk through the addition of Controller unit tests, focusing on a controller that directly references Entity Framework objects and implicitly interacts with ASP.Net Membership objects and Request data from the current HttpContext.</p>
<div style="text-align: center; font-size: .9em; color: #666666;">
	<img src="http://tiernok.com/LTDBlog/ContinuousDelivery/Overview_p2.png" title="Delivery Pipeline - Focus of Current Post" /><br />
	Delivery Pipeline &#8211; Focus of Current Post
</div>
<p>This is the third post in a multi-part series on my Continuous Delivery pipeline project. The <a href="/index.php/EnterpriseDev/application-lifecycle-management/continuous-delivery-project-setting-up" title="Starting the Continuous Delivery project">previous post</a> followed the setup of the Continuous Integration engine and the CI build job. This post follows the addition of Unit Tests to the ASP.Net MVC Music Store application so those tests can be incorporated in the CI build job (in the next post).</p>
<h2>Adding the Unit Tests</h2>
<p>I chose to use MS Test for the Unit Test project due to it&#8217;s integration into Visual Studio. Later I&#8217;ll use Nunit for the automated interface testing where that integration is not as useful. This will also let us see both integrated into the build engine as we add those portions in.</p>
<p>The first step to adding Unit Testing to an existing project is picking a place to start. I selected the CheckoutController, as it is one of the more complex controllers in the project and will provide the best set of examples. Besides the implicit access of HttpContext data and instantiating the MusicStoreEntities DbContext directly, the Checkout Controller interacts with a cart model object that also interacts with HttpContext and it own instance of the DbContext.</p>
<p><i>Note: There is a <a href="http://msdn.microsoft.com/en-us/gg618510" title="ASP.NET MVC 3 Testing">MSDN Hands On Lab</a> to add &#8220;Unit Tests&#8221; to the MVCMusicStore site. The methods outlined in that post are lower impact to the production code (little or no changes required), but is actually Integration Testing, since the tests are executing across more than one unit of code and across application boundaries to a database. Integration Tests are useful, but typically more costly to maintain, provide less specific information, take longer to run, and are more fragile than unit tests. This is not to say that they aren&#8217;t useful, just that they are different.</i></p>
<p>The code for this project is available in a <a href="https://bitbucket.org/tarwn/mvcmusicstore.main/changesets" title="Changesets for the source code">BitBucket repository</a>, but the order I follow here will be somewhat different than the actual order of the changesets, as the changes for this post overlapped some with the content of the next post.</p>
<h2>Testable Entity Framework</h2>
<p>Before writing the first test, I need to drive a wedge between the Entity Framework DbContext and the Controllers so I can give the controller a data context that doesn&#8217;t really talk to a database. Currently the CheckoutController creates an instance of the MusicStoreEntities object when it is instantiated, and that instantiated MusicStoreEntities object gets it&#8217;s connection information from the web.config:</p>
<p><b>MVCMusicStore/Controllers/CheckoutController.cs</b></p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="csharp"><thead><tr><td colspan="2"  class="head">C#</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
</pre></td><td class="de1"><pre class="de1"><span class="kw1">namespace</span> MvcMusicStore<span class="sy0">.</span><span class="me1">Controllers</span> <span class="br0">&#123;</span>
&nbsp;
&nbsp; &nbsp; <span class="br0">&#91;</span>Authorize<span class="br0">&#93;</span>
&nbsp; &nbsp; <span class="kw1">public</span> <span class="kw4">class</span> CheckoutController <span class="sy0">:</span> Controller <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; MusicStoreEntities storeDB <span class="sy0">=</span> <span class="kw3">new</span> MusicStoreEntities<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">const</span> <span class="kw4">string</span> PromoCode <span class="sy0">=</span> <span class="st0">&quot;FREE&quot;</span><span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; <span class="co1">//</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="co1">// GET: /Checkout/AddressAndPayment</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">public</span> ActionResult AddressAndPayment<span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">return</span> View<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span>
<span class="sy0">...</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">namespace MvcMusicStore.Controllers {

	[Authorize]
	public class CheckoutController : Controller {
		MusicStoreEntities storeDB = new MusicStoreEntities();
		const string PromoCode = "FREE";

		//
		// GET: /Checkout/AddressAndPayment
		public ActionResult AddressAndPayment() {
			return View();
		}
...</pre></div></div>

<p>Replacing this concrete object with an interface will allow the production version of the site to continue working with a live database context while providing the ability to use a fake version for testing. </p>
<p>To create the replacement, I&#8217;ll start replacing the concrete context with the name of an interface, then use the errors from the compiler to help define the minimum set of interface members required to satisfy the production code.</p>
<p><b>MVCMusicStore/Controllers/CheckoutController.cs</b></p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="csharp"><thead><tr><td colspan="2"  class="head">C#</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
</pre></td><td class="de1"><pre class="de1"><span class="kw1">namespace</span> MvcMusicStore<span class="sy0">.</span><span class="me1">Controllers</span> <span class="br0">&#123;</span>
&nbsp;
&nbsp; &nbsp; <span class="br0">&#91;</span>Authorize<span class="br0">&#93;</span>
&nbsp; &nbsp; <span class="kw1">public</span> <span class="kw4">class</span> CheckoutController <span class="sy0">:</span> Controller <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; IMusicStoreEntities storeDB<span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">const</span> <span class="kw4">string</span> PromoCode <span class="sy0">=</span> <span class="st0">&quot;FREE&quot;</span><span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">public</span> CheckoutController<span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="sy0">:</span> <span class="kw1">this</span><span class="br0">&#40;</span><span class="kw3">new</span> MusicStoreEntities<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span> <span class="br0">&#125;</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">public</span> CheckoutController<span class="br0">&#40;</span>IMusicStoreEntities storeDb<span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">this</span><span class="sy0">.</span><span class="me1">storeDB</span> <span class="sy0">=</span> storeDb<span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span>
<span class="sy0">...</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">namespace MvcMusicStore.Controllers {

	[Authorize]
	public class CheckoutController : Controller {
		IMusicStoreEntities storeDB;
		const string PromoCode = "FREE";

		public CheckoutController() : this(new MusicStoreEntities()) { }

		public CheckoutController(IMusicStoreEntities storeDb) {
			this.storeDB = storeDb;
		}
...</pre></div></div>

<p><i>Why define the interface first and debug forward? Why not build a copy of the DbContext first? Starting with a minimal interface like this will help me keep the interface to the minimum necessary functionality. Had I started with the DbContext I could easily start defining methods that seem like they will be useful at some point, but don&#8217;t reflect what I will actually need or may never be used. Extra code is extra maintenance and finding out sooner that something doesn&#8217;t work (or is unnecessary) leads to less wasted effort.</i></p>
<p>The first error is the attempted assignment of the new MusicStoreEntities to the IMusicStoreEntities constructor. That one is easy enough to resolve:</p>
<p><b>MVCMusicStore/Models/MusicStoreEntities.cs</b></p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="csharp"><thead><tr><td colspan="2"  class="head">C#</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
</pre></td><td class="de1"><pre class="de1"><span class="kw1">namespace</span> MvcMusicStore<span class="sy0">.</span><span class="me1">Models</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; <span class="kw1">public</span> <span class="kw4">class</span> MusicStoreEntities <span class="sy0">:</span> DbContext, IMusicStoreEntities <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="co1">// ...</span>
&nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp;
&nbsp; &nbsp; <span class="kw1">public</span> <span class="kw4">interface</span> IMusicStoreEntities <span class="br0">&#123;</span> <span class="br0">&#125;</span>
<span class="br0">&#125;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">namespace MvcMusicStore.Models {
	public class MusicStoreEntities : DbContext, IMusicStoreEntities {
		// ...
	}

	public interface IMusicStoreEntities { }
}</pre></div></div>

<p>I&#8217;ve added the interface declaration and the implements statement to MusicStoreEntities. Next I&#8217;ll define the collections and make sure the interface implements IDisposable:</p>
<p><b>MVCMusicStore/Models/MusicStoreEntities.cs</b></p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="csharp"><thead><tr><td colspan="2"  class="head">C#</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
</pre></td><td class="de1"><pre class="de1"><span class="kw1">namespace</span> MvcMusicStore<span class="sy0">.</span><span class="me1">Models</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; <span class="kw1">public</span> <span class="kw4">class</span> MusicStoreEntities <span class="sy0">:</span> DbContext, IMusicStoreEntities <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">public</span> IDbSet<span class="sy0">&lt;</span>Album<span class="sy0">&gt;</span> Albums <span class="br0">&#123;</span> <span class="kw1">get</span><span class="sy0">;</span> <span class="kw1">set</span><span class="sy0">;</span> <span class="br0">&#125;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">public</span> IDbSet<span class="sy0">&lt;</span>Genre<span class="sy0">&gt;</span> Genres <span class="br0">&#123;</span> <span class="kw1">get</span><span class="sy0">;</span> <span class="kw1">set</span><span class="sy0">;</span> <span class="br0">&#125;</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">public</span> IDbSet<span class="sy0">&lt;</span>Artist<span class="sy0">&gt;</span> Artists <span class="br0">&#123;</span> <span class="kw1">get</span><span class="sy0">;</span> <span class="kw1">set</span><span class="sy0">;</span> <span class="br0">&#125;</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">public</span> IDbSet<span class="sy0">&lt;</span>Cart<span class="sy0">&gt;</span> Carts <span class="br0">&#123;</span> <span class="kw1">get</span><span class="sy0">;</span> <span class="kw1">set</span><span class="sy0">;</span> <span class="br0">&#125;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">public</span> IDbSet<span class="sy0">&lt;</span>Order<span class="sy0">&gt;</span> Orders <span class="br0">&#123;</span> <span class="kw1">get</span><span class="sy0">;</span> <span class="kw1">set</span><span class="sy0">;</span> <span class="br0">&#125;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">public</span> IDbSet<span class="sy0">&lt;</span>OrderDetail<span class="sy0">&gt;</span> OrderDetails <span class="br0">&#123;</span> <span class="kw1">get</span><span class="sy0">;</span> <span class="kw1">set</span><span class="sy0">;</span> <span class="br0">&#125;</span>
&nbsp;
&nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp;
&nbsp; &nbsp; <span class="kw1">public</span> <span class="kw4">interface</span> IMusicStoreEntities <span class="sy0">:</span> IDisposable <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; IDbSet<span class="sy0">&lt;</span>Album<span class="sy0">&gt;</span> Albums <span class="br0">&#123;</span> <span class="kw1">get</span><span class="sy0">;</span> <span class="kw1">set</span><span class="sy0">;</span> <span class="br0">&#125;</span>
&nbsp; &nbsp; &nbsp; &nbsp; IDbSet<span class="sy0">&lt;</span>Genre<span class="sy0">&gt;</span> Genres <span class="br0">&#123;</span> <span class="kw1">get</span><span class="sy0">;</span> <span class="kw1">set</span><span class="sy0">;</span> <span class="br0">&#125;</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; IDbSet<span class="sy0">&lt;</span>Artist<span class="sy0">&gt;</span> Artists <span class="br0">&#123;</span> <span class="kw1">get</span><span class="sy0">;</span> <span class="kw1">set</span><span class="sy0">;</span> <span class="br0">&#125;</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; IDbSet<span class="sy0">&lt;</span>Cart<span class="sy0">&gt;</span> Carts <span class="br0">&#123;</span> <span class="kw1">get</span><span class="sy0">;</span> <span class="kw1">set</span><span class="sy0">;</span> <span class="br0">&#125;</span>
&nbsp; &nbsp; &nbsp; &nbsp; IDbSet<span class="sy0">&lt;</span>Order<span class="sy0">&gt;</span> Orders <span class="br0">&#123;</span> <span class="kw1">get</span><span class="sy0">;</span> <span class="kw1">set</span><span class="sy0">;</span> <span class="br0">&#125;</span>
&nbsp; &nbsp; &nbsp; &nbsp; IDbSet<span class="sy0">&lt;</span>OrderDetail<span class="sy0">&gt;</span> OrderDetails <span class="br0">&#123;</span> <span class="kw1">get</span><span class="sy0">;</span> <span class="kw1">set</span><span class="sy0">;</span> <span class="br0">&#125;</span>
&nbsp; &nbsp; <span class="br0">&#125;</span>
<span class="br0">&#125;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">namespace MvcMusicStore.Models {
	public class MusicStoreEntities : DbContext, IMusicStoreEntities {
		public IDbSet&lt;Album&gt; Albums { get; set; }
		public IDbSet&lt;Genre&gt; Genres { get; set; }

		public IDbSet&lt;Artist&gt; Artists { get; set; }

		public IDbSet&lt;Cart&gt; Carts { get; set; }
		public IDbSet&lt;Order&gt; Orders { get; set; }
		public IDbSet&lt;OrderDetail&gt; OrderDetails { get; set; }

	}

	public interface IMusicStoreEntities : IDisposable {
		IDbSet&lt;Album&gt; Albums { get; set; }
		IDbSet&lt;Genre&gt; Genres { get; set; }

		IDbSet&lt;Artist&gt; Artists { get; set; }

		IDbSet&lt;Cart&gt; Carts { get; set; }
		IDbSet&lt;Order&gt; Orders { get; set; }
		IDbSet&lt;OrderDetail&gt; OrderDetails { get; set; }
	}
}</pre></div></div>

<p>At this point I have a couple errors to clean up. In one case the compiler is upset with using Include() off of an IDbSet instance, this is easily solved by adding <code class="codespan">using System.Data.Entity;</code> to the file so the extension will be available. The second error points out a missing SaveChanges call on my interface which I can easily add:</p>
<p><b>MVCMusicStore/Models/MusicStoreEntities.cs</b></p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="csharp"><thead><tr><td colspan="2"  class="head">C#</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
</pre></td><td class="de1"><pre class="de1"><span class="kw1">namespace</span> MvcMusicStore<span class="sy0">.</span><span class="me1">Models</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; <span class="kw1">public</span> <span class="kw4">class</span> MusicStoreEntities <span class="sy0">:</span> DbContext, IMusicStoreEntities <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="co1">// ...</span>
&nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp;
&nbsp; &nbsp; <span class="kw1">public</span> <span class="kw4">interface</span> IMusicStoreEntities <span class="sy0">:</span> IDisposable <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="co1">// ...</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw4">int</span> SaveChanges<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; <span class="br0">&#125;</span>
<span class="br0">&#125;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">namespace MvcMusicStore.Models {
	public class MusicStoreEntities : DbContext, IMusicStoreEntities {
		// ...
	}

	public interface IMusicStoreEntities : IDisposable {
		// ...

		int SaveChanges();
	}
}</pre></div></div>

<p>With those last couple changes completed, the build is happy and I have a minimal interface. </p>
<p>Next I want to replace the behavior in the controllers of creating their own local DbContext instance with using one that is provided to them. I started this by defining the two constructors above for my CheckoutController, but rather than copy and paste this new behavior to all of the controllers, I&#8217;ll move the responsibility to a ControllerBase class:</p>
<p><b>MVCMusicStore/Controllers/ControllerBase.cs</b> (New File)</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="csharp"><thead><tr><td colspan="2"  class="head">C#</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
</pre></td><td class="de1"><pre class="de1"><span class="kw1">namespace</span> MvcMusicStore<span class="sy0">.</span><span class="me1">Controllers</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; <span class="kw1">public</span> <span class="kw4">class</span> ControllerBase <span class="sy0">:</span>Controller <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">private</span> IMusicStoreEntities _storeDB<span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">protected</span> IMusicStoreEntities StoreDB <span class="br0">&#123;</span> <span class="kw1">get</span> <span class="br0">&#123;</span> <span class="kw1">return</span> _storeDB<span class="sy0">;</span> <span class="br0">&#125;</span> <span class="br0">&#125;</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">public</span> ControllerBase<span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="sy0">:</span> <span class="kw1">this</span><span class="br0">&#40;</span><span class="kw3">new</span> MusicStoreEntities<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span> <span class="br0">&#125;</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">public</span> ControllerBase<span class="br0">&#40;</span>IMusicStoreEntities storeDb<span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; _storeDB <span class="sy0">=</span> storeDb<span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp; &nbsp; <span class="br0">&#125;</span>
<span class="br0">&#125;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">namespace MvcMusicStore.Controllers {
	public class ControllerBase :Controller {
		private IMusicStoreEntities _storeDB;

		protected IMusicStoreEntities StoreDB { get { return _storeDB; } }

		public ControllerBase() : this(new MusicStoreEntities()) { }

		public ControllerBase(IMusicStoreEntities storeDb) {
			_storeDB = storeDb;
		}
	}
}</pre></div></div>

<p><b>MVCMusicStore/Controllers/CheckoutController.cs</b> (New File)</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="csharp"><thead><tr><td colspan="2"  class="head">C#</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
</pre></td><td class="de1"><pre class="de1"><span class="kw1">namespace</span> MvcMusicStore<span class="sy0">.</span><span class="me1">Controllers</span> <span class="br0">&#123;</span>
&nbsp;
&nbsp; &nbsp; <span class="br0">&#91;</span>Authorize<span class="br0">&#93;</span>
&nbsp; &nbsp; <span class="kw1">public</span> <span class="kw4">class</span> CheckoutController <span class="sy0">:</span> ControllerBase <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">const</span> <span class="kw4">string</span> PromoCode <span class="sy0">=</span> <span class="st0">&quot;FREE&quot;</span><span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">public</span> CheckoutController<span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span> <span class="br0">&#125;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">public</span> CheckoutController<span class="br0">&#40;</span>IMusicStoreEntities storeDb<span class="br0">&#41;</span> <span class="sy0">:</span> <span class="kw1">base</span><span class="br0">&#40;</span>storeDb<span class="br0">&#41;</span> <span class="br0">&#123;</span> <span class="br0">&#125;</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; <span class="co1">// ...</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; <span class="co1">//</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="co1">// POST: /Checkout/AddressAndPayment</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#91;</span>HttpPost<span class="br0">&#93;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">public</span> ActionResult AddressAndPayment<span class="br0">&#40;</span>FormCollection values<span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="co1">// ...</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="co1">//Save Order</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; StoreDB<span class="sy0">.</span><span class="me1">Orders</span><span class="sy0">.</span><span class="kw1">Add</span><span class="br0">&#40;</span>order<span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; StoreDB<span class="sy0">.</span><span class="me1">SaveChanges</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="co1">// ...</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; <span class="co1">// ...</span>
&nbsp; &nbsp; <span class="br0">&#125;</span>
<span class="br0">&#125;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">namespace MvcMusicStore.Controllers {

	[Authorize]
	public class CheckoutController : ControllerBase {
		const string PromoCode = "FREE";

		public CheckoutController() { }
		public CheckoutController(IMusicStoreEntities storeDb) : base(storeDb) { }

		// ...

		//
		// POST: /Checkout/AddressAndPayment
		[HttpPost]
		public ActionResult AddressAndPayment(FormCollection values) {
			// ...
				//Save Order
				StoreDB.Orders.Add(order);
				StoreDB.SaveChanges();
			// ...
		}

		// ...
	}
}</pre></div></div>

<p>After replacing the private variable and constructors from the CheckoutController with inheritance from the ControllerBase, the three places referencing the old variable are showing as errors and I&#8217;ll simply update them to the public property in the ControllerBase. </p>
<p>The last place I need to change is the ShoppingCart object. Despite being a model object, the ShoppingCart object instantiates it&#8217;s own local instance of the MusicStoreEntities context. The first time I converted the project, I missed this case and had some odd unit test results until I realized the cart was still accessing a real database.</p>
<p><i>In larger projects it can be common to have components separately instantiated in random nooks and crannies, not only making it tricky to convert for unit testing but also making the production code more fragile and harder to change and troubleshoot. After replacing the local ones, it&#8217;s a good idea to execute some searches through the codebase to find other references to the concrete classes.</i></p>
<p>Just like the Controllers, I&#8217;ll update the ShoppingCart object to use the interface and use <a href="http://en.wikipedia.org/wiki/Dependency_injection" title="Dependancy Injection at Wikipedia">Dependancy Injection</a> to pass in the context I expect it to use. Besides updating the constructor to require an IMusicStoreEntities context, I&#8217;ll also need to update the static methods that return instances of the cart:</p>
<p><b>MVCMusicStore/Models/ShoppingCart.cs</b> (New File)</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="csharp"><thead><tr><td colspan="2"  class="head">C#</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
</pre></td><td class="de1"><pre class="de1"><span class="kw1">namespace</span> MvcMusicStore<span class="sy0">.</span><span class="me1">Models</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; <span class="kw1">public</span> <span class="kw1">partial</span> <span class="kw4">class</span> ShoppingCart <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; IMusicStoreEntities storeDB<span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; <span class="co1">// ...</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">public</span> ShoppingCart<span class="br0">&#40;</span>IMusicStoreEntities dbContext<span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">this</span><span class="sy0">.</span><span class="me1">storeDB</span> <span class="sy0">=</span> dbContext<span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp; &nbsp; &nbsp; &nbsp; 
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">public</span> <span class="kw1">static</span> ShoppingCart GetCart<span class="br0">&#40;</span>HttpContextBase context, IMusicStoreEntities dbContext<span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">var</span> cart <span class="sy0">=</span> <span class="kw3">new</span> ShoppingCart<span class="br0">&#40;</span>dbContext<span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; cart<span class="sy0">.</span><span class="me1">ShoppingCartId</span> <span class="sy0">=</span> cart<span class="sy0">.</span><span class="me1">GetCartId</span><span class="br0">&#40;</span>context<span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">return</span> cart<span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; <span class="co1">// Helper method to simplify shopping cart calls</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">public</span> <span class="kw1">static</span> ShoppingCart GetCart<span class="br0">&#40;</span>Controller controller, IMusicStoreEntities dbContext<span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">return</span> GetCart<span class="br0">&#40;</span>controller<span class="sy0">.</span><span class="me1">HttpContext</span>, dbContext<span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; <span class="co1">// ...</span>
&nbsp; &nbsp; <span class="br0">&#125;</span>
<span class="br0">&#125;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">namespace MvcMusicStore.Models {
	public partial class ShoppingCart {
		IMusicStoreEntities storeDB;

		// ...

		public ShoppingCart(IMusicStoreEntities dbContext) {
			this.storeDB = dbContext;
		}
		
		public static ShoppingCart GetCart(HttpContextBase context, IMusicStoreEntities dbContext) {
			var cart = new ShoppingCart(dbContext);
			cart.ShoppingCartId = cart.GetCartId(context);
			return cart;
		}

		// Helper method to simplify shopping cart calls
		public static ShoppingCart GetCart(Controller controller, IMusicStoreEntities dbContext) {
			return GetCart(controller.HttpContext, dbContext);
		}

		// ...
	}
}</pre></div></div>

<p>With these changes added, the next build errors direct me to the places that need to pass the extra argument. For the CheckoutController, I&#8217;ll use the public property exposed by the Controllerbase. For the AccountController I need to instantiate a MusicStoreEntities object to pass (or convert it to use ControllerBase), and for the others I can plug in their local storeDb variable.</p>
<p><i>Note: In my <a href="https://bitbucket.org/tarwn/mvcmusicstore.main/changeset/82d254cd9f1d" title="First Changeset for Unit Test Changes">implementation</a>, I went ahead and converted all of my controllers over to the new ControllerBase. The downside of this method is that the more you convert, the more you have to test. Since I don&#8217;t have unit tests in place, this means a full manual regression test. On a larger project I would limit my changes only to the pieces I was planning on adding unit tests to and had time to manually regression test, but I would build my objects (like the ControllerBase) in such a way that the next conversions could take advantage and extend them when it&#8217;s their turn.</i></p>
<h2>Adding a Test Project</h2>
<p>After manually regression testing my changes to ensure they work, I&#8217;ll add the test project and create the first test class.</p>
<p>To get started, I&#8217;ll create the test project and use the package manager to get the RhinoMocks package. This will allow me to mock some of the resources the controller requires. With the project and resuorces ready, I can create the first CheckoutController test.</p>
<p><b>MvcMusicStoreTests/Controllers/CheckoutController.cs</b></p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="csharp"><thead><tr><td colspan="2"  class="head">C#</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
</pre></td><td class="de1"><pre class="de1"><span class="kw1">namespace</span> MvcMusicStoreTests<span class="sy0">.</span><span class="me1">Controllers</span> <span class="br0">&#123;</span>
&nbsp;
&nbsp; &nbsp; <span class="br0">&#91;</span>TestClass<span class="br0">&#93;</span>
&nbsp; &nbsp; <span class="kw1">public</span> <span class="kw4">class</span> CheckoutControllerTests <span class="br0">&#123;</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#91;</span>TestMethod<span class="br0">&#93;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">public</span> <span class="kw4">void</span> AddressAndPayment_ReturnsView<span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; CheckoutController controller <span class="sy0">=</span> <span class="kw3">new</span> CheckoutController<span class="br0">&#40;</span>MusicStoreEntitiesFactory<span class="sy0">.</span><span class="me1">GetEmpty</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ActionResult result <span class="sy0">=</span> controller<span class="sy0">.</span><span class="me1">AddressAndPayment</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Assert<span class="sy0">.</span><span class="me1">IsNotNull</span><span class="br0">&#40;</span>result<span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp; &nbsp; <span class="br0">&#125;</span>
<span class="br0">&#125;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">namespace MvcMusicStoreTests.Controllers {

	[TestClass]
	public class CheckoutControllerTests {

		[TestMethod]
		public void AddressAndPayment_ReturnsView() {
			CheckoutController controller = new CheckoutController(MusicStoreEntitiesFactory.GetEmpty());

			ActionResult result = controller.AddressAndPayment();

			Assert.IsNotNull(result);
		}
	}
}</pre></div></div>

<p>This test is using the Arrange, Act, Assert (AAA) unit testing pattern and is a basic test that asserts that the CheckoutController returns a result when we call AddressAndPayment. In the first step I call a Factory class to populate the data context of our CheckoutController. I have also started abstracting out obvious resources that will need to be fleshed out later, but haven&#8217;t started to define what those behaviors will be (I&#8217;ll let future tests decide that for me).</p>
<p><i>You may also notice that the folder structure for my test matches the structure for the class that is under tests, this makes it easier to keep the project organized and to find matching files across the projects.</i></p>
<p><b>MvcMusicStoreTests/MusicStoreEntitiesFactory.cs</b></p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="csharp"><thead><tr><td colspan="2"  class="head">C#</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
</pre></td><td class="de1"><pre class="de1"><span class="kw1">namespace</span> MvcMusicStoreTests <span class="br0">&#123;</span>
&nbsp; &nbsp; <span class="kw4">class</span> MusicStoreEntitiesFactory <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">public</span> <span class="kw1">static</span> IMusicStoreEntities GetEmpty<span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">return</span> MockRepository<span class="sy0">.</span><span class="me1">GenerateMock</span><span class="sy0">&lt;</span>IMusicStoreEntities<span class="sy0">&gt;</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp; &nbsp; <span class="br0">&#125;</span>
<span class="br0">&#125;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">namespace MvcMusicStoreTests {
	class MusicStoreEntitiesFactory {
		public static IMusicStoreEntities GetEmpty() {
			return MockRepository.GenerateMock&lt;IMusicStoreEntities&gt;();
		}
	}
}</pre></div></div>

<p>I don&#8217;t actually need any data yet, so I can use RhinoMock&#8217;s MockRepository to automaitcally create a stub implementation of the IMusicStoreEntities interface the controller requires.</p>
<h2>Fake Db and Http Contexts</h2>
<p>Now that I have a basic unit test working, I can start moving into more complex (and useful) tests. This is where things start to get challenging. The data context is already abstracted from the controllers, but the framework also depends heavily on the web server context, including bits like querystring and form post variables from the client browser, session and cookie state containers, and additional context for Membership information.</p>
<p>While it is possible to start mocking or stubbing our way through this whole list, it can be pretty painful and isn&#8217;t really necessary. This particular problem has already been solved before, so I&#8217;ll import the MVC3 TestHelper package (<a href="http://nuget.org/List/Packages/MvcContrib.Mvc3.TestHelper-ci" title="Install the MvcContrib.Mvc3.TestHelper-ci package from Nuget">Install-Package MvcContrib.Mvc3.TestHelper-ci</a>) to do the work for me.</p>
<h3>Initial Data-Free Tests</h3>
<p>I&#8217;m going to continue to ease into making this controller testable by choosing an action that has minimal data store interactions. This will allow me to focus on getting the HttpContext work out of the way first, instead of trying to do both at the same time.</p>
<p>Rather than trying to guess ahead as to what pieces of the package I&#8217;ll need, I&#8217;m going to create an instance of the test and build out just the logic I need to make it pass (Test Driven Test Development?). Here is that test:</p>
<p><b>MvcMusicStoreTests/Controllers/CheckoutController.cs</b></p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="csharp"><thead><tr><td colspan="2"  class="head">C#</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
</pre></td><td class="de1"><pre class="de1"><span class="kw1">namespace</span> MvcMusicStoreTests<span class="sy0">.</span><span class="me1">Controllers</span> <span class="br0">&#123;</span>
&nbsp;
&nbsp; &nbsp; <span class="br0">&#91;</span>TestClass<span class="br0">&#93;</span>
&nbsp; &nbsp; <span class="kw1">public</span> <span class="kw4">class</span> CheckoutControllerTests <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="co1">// ...</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#91;</span>TestMethod<span class="br0">&#93;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">public</span> <span class="kw4">void</span> AddressAndPayment_PostInvalidOrderNoPromotion_ReturnsOrderWithErrors<span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; CheckoutController controller <span class="sy0">=</span> GetWiredUpController<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; FormCollection orderCollection <span class="sy0">=</span> <span class="kw3">new</span> FormCollection<span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#123;</span><span class="st0">&quot;FirstName&quot;</span>,<span class="st0">&quot;fn&quot;</span><span class="br0">&#125;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; controller<span class="sy0">.</span><span class="me1">ValueProvider</span> <span class="sy0">=</span> orderCollection<span class="sy0">.</span><span class="me1">ToValueProvider</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ViewResult result <span class="sy0">=</span> controller<span class="sy0">.</span><span class="me1">AddressAndPayment</span><span class="br0">&#40;</span>orderCollection<span class="br0">&#41;</span> <span class="kw1">as</span> ViewResult<span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Assert<span class="sy0">.</span><span class="me1">IsInstanceOfType</span><span class="br0">&#40;</span>result<span class="sy0">.</span><span class="me1">ViewData</span><span class="sy0">.</span><span class="me1">Model</span>, <span class="kw3">typeof</span><span class="br0">&#40;</span>Order<span class="br0">&#41;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Assert<span class="sy0">.</span><span class="me1">AreNotEqual</span><span class="br0">&#40;</span><span class="nu0">0</span>, result<span class="sy0">.</span><span class="me1">ViewData</span><span class="sy0">.</span><span class="me1">ModelState</span><span class="sy0">.</span><span class="me1">Count</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp; &nbsp; <span class="br0">&#125;</span>
<span class="br0">&#125;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">namespace MvcMusicStoreTests.Controllers {

	[TestClass]
	public class CheckoutControllerTests {
		// ...

		[TestMethod]
		public void AddressAndPayment_PostInvalidOrderNoPromotion_ReturnsOrderWithErrors() {
			CheckoutController controller = GetWiredUpController();
			FormCollection orderCollection = new FormCollection() {
				{"FirstName","fn"}
			};
			controller.ValueProvider = orderCollection.ToValueProvider();

			ViewResult result = controller.AddressAndPayment(orderCollection) as ViewResult;

			Assert.IsInstanceOfType(result.ViewData.Model, typeof(Order));
			Assert.AreNotEqual(0, result.ViewData.ModelState.Count);
		}
	}
}</pre></div></div>

<p>I&#8217;m relegating the logic of creating the controller to a local function called <code class="codespan">GetWiredUpController()</code>, trusting it to return a functioning controller. I then create a FormCollection of values and assign it to the controller as if they had been sent from a client browser. The rest of the code is the Act and Assert steps of the test to call the controller and verify the result.</p>
<p>On the first run, the <code class="codespan">GetWiredUpController()</code> method isn&#8217;t giving me everything I need, but I can work through that iteratively until I have all the pieces I need. This took several iterations, so I&#8217;ll skip ahead to the end results. </p>
<p><b>MvcMusicStoreTests/Controllers/CheckoutController.cs</b></p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="csharp"><thead><tr><td colspan="2"  class="head">C#</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
</pre></td><td class="de1"><pre class="de1"><span class="kw1">namespace</span> MvcMusicStoreTests<span class="sy0">.</span><span class="me1">Controllers</span> <span class="br0">&#123;</span>
&nbsp;
&nbsp; &nbsp; <span class="br0">&#91;</span>TestClass<span class="br0">&#93;</span>
&nbsp; &nbsp; <span class="kw1">public</span> <span class="kw4">class</span> CheckoutControllerTests <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="co1">// ...</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">private</span> CheckoutController GetWiredUpController<span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; CheckoutController controller <span class="sy0">=</span> <span class="kw3">new</span> CheckoutController<span class="br0">&#40;</span>MusicStoreEntitiesFactory<span class="sy0">.</span><span class="me1">GetEmpty</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; TestControllerBuilder _builder <span class="sy0">=</span> <span class="kw3">new</span> TestControllerBuilder<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; _builder<span class="sy0">.</span><span class="me1">HttpContext</span><span class="sy0">.</span><span class="me1">User</span> <span class="sy0">=</span> <span class="kw3">new</span> FakeUser<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; _builder<span class="sy0">.</span><span class="me1">InitializeController</span><span class="br0">&#40;</span>controller<span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">return</span> controller<span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp; &nbsp; <span class="br0">&#125;</span>
<span class="br0">&#125;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">namespace MvcMusicStoreTests.Controllers {

	[TestClass]
	public class CheckoutControllerTests {
		// ...

		private CheckoutController GetWiredUpController() {
			CheckoutController controller = new CheckoutController(MusicStoreEntitiesFactory.GetEmpty());
			TestControllerBuilder _builder = new TestControllerBuilder();
			_builder.HttpContext.User = new FakeUser();

			_builder.InitializeController(controller);
			return controller;
		}
	}
}</pre></div></div>

<p>Like the initial test, I create the controller and populate it with an empty IMusicStoreEntities call from the factory. I then create an instance of the TestControllerBuilder class from the MVCContrib package, which will wire together all the stubs and fakes necessary to present Application, Session, and other necessary HttpContext values to the controller. I&#8217;ll add my own FakeUser object (an implementation of IPrincipal) to the builder, then have it do it&#8217;s magic on the CheckoutController instance. Voila, one fully wired up CheckoutController.</p>
<h3>Totally Faked Out, Just Add Data&#8230;</h3>
<p>Now that I have the controller logic able to run independently from a real HTTP request, I can return to finish work on the methods that interact more heavily with the data store.</p>
<p>In order to inject some fake data, I need to replace the stubbed out IMusicStoreEntities data context in the MusicStoreEntitiesFactory with a concrete Fake implementation. This will allow me to add collections that I can locally push data into in order to setup scenarios for individual tests.</p>
<p><b>MvcMusicStoreTests/MusicStoreEntitiesFactory.cs</b></p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="csharp"><thead><tr><td colspan="2"  class="head">C#</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
</pre></td><td class="de1"><pre class="de1"><span class="kw1">namespace</span> MvcMusicStoreTests <span class="br0">&#123;</span>
&nbsp; &nbsp; <span class="kw4">class</span> MusicStoreEntitiesFactory <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">public</span> <span class="kw1">static</span> IMusicStoreEntities GetEmpty<span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; FakeDataStore datastore <span class="sy0">=</span> <span class="kw3">new</span> FakeDataStore<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; datastore<span class="sy0">.</span><span class="me1">Albums</span> <span class="sy0">=</span> <span class="kw3">new</span> FakeDbSet<span class="sy0">&lt;</span>Album<span class="sy0">&gt;</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; datastore<span class="sy0">.</span><span class="me1">Artists</span> <span class="sy0">=</span> <span class="kw3">new</span> FakeDbSet<span class="sy0">&lt;</span>Artist<span class="sy0">&gt;</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; datastore<span class="sy0">.</span><span class="me1">Carts</span> <span class="sy0">=</span> <span class="kw3">new</span> FakeDbSet<span class="sy0">&lt;</span>Cart<span class="sy0">&gt;</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; datastore<span class="sy0">.</span><span class="me1">Genres</span> <span class="sy0">=</span> <span class="kw3">new</span> FakeDbSet<span class="sy0">&lt;</span>Genre<span class="sy0">&gt;</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; datastore<span class="sy0">.</span><span class="me1">OrderDetails</span> <span class="sy0">=</span> <span class="kw3">new</span> FakeDbSet<span class="sy0">&lt;</span>OrderDetail<span class="sy0">&gt;</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; datastore<span class="sy0">.</span><span class="me1">Orders</span> <span class="sy0">=</span> <span class="kw3">new</span> FakeDbSet<span class="sy0">&lt;</span>Order<span class="sy0">&gt;</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">return</span> datastore<span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp; &nbsp; <span class="br0">&#125;</span>
<span class="br0">&#125;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">namespace MvcMusicStoreTests {
	class MusicStoreEntitiesFactory {
		public static IMusicStoreEntities GetEmpty() {
			FakeDataStore datastore = new FakeDataStore();
			datastore.Albums = new FakeDbSet&lt;Album&gt;();
			datastore.Artists = new FakeDbSet&lt;Artist&gt;();
			datastore.Carts = new FakeDbSet&lt;Cart&gt;();
			datastore.Genres = new FakeDbSet&lt;Genre&gt;();
			datastore.OrderDetails = new FakeDbSet&lt;OrderDetail&gt;();
			datastore.Orders = new FakeDbSet&lt;Order&gt;();
			return datastore;
		}
	}
}</pre></div></div>

<p>The fake implementations of the <a href="https://bitbucket.org/tarwn/mvcmusicstore.main/src/8831221efe43/MvcMusicStoreTests/Fakes/FakeDataStore.cs" title="See the FakeDataStore class" target="_blank">datastore</a> exposes collections that implement <a href="https://bitbucket.org/tarwn/mvcmusicstore.main/src/8831221efe43/MvcMusicStoreTests/Fakes/FakeDbSet.cs" title="See the FakeDbSet class" target="_blank">IDbSet</a>. With this setup, it is easy to add test data on a per-test basis and without the overhead of a database (work) or some form of test data management (more work).</p>
<p>Using this new capability, I can start building out more extensive tests.</p>
<p><b>MvcMusicStoreTests/Controllers/CheckoutController.cs</b></p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="csharp"><thead><tr><td colspan="2"  class="head">C#</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
</pre></td><td class="de1"><pre class="de1"><span class="kw1">namespace</span> MvcMusicStoreTests<span class="sy0">.</span><span class="me1">Controllers</span> <span class="br0">&#123;</span>
&nbsp;
&nbsp; &nbsp; <span class="br0">&#91;</span>TestClass<span class="br0">&#93;</span>
&nbsp; &nbsp; <span class="kw1">public</span> <span class="kw4">class</span> CheckoutControllerTests <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="co1">// ...</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#91;</span>TestMethod<span class="br0">&#93;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">public</span> <span class="kw4">void</span> Complete_ValidOrderIdAndUser_ReturnsProperView<span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; FakeDataStore dataStore <span class="sy0">=</span> MusicStoreEntitiesFactory<span class="sy0">.</span><span class="me1">GetEmpty</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; dataStore<span class="sy0">.</span><span class="me1">Orders</span><span class="sy0">.</span><span class="kw1">Add</span><span class="br0">&#40;</span><span class="kw3">new</span> Order<span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span> OrderId<span class="sy0">=</span><span class="nu0">5</span>, Username<span class="sy0">=</span><span class="st0">&quot;Bob&quot;</span> <span class="br0">&#125;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; FakeUser user <span class="sy0">=</span> <span class="kw3">new</span> FakeUser<span class="br0">&#40;</span><span class="kw3">new</span> FakeIdentity<span class="br0">&#40;</span><span class="st0">&quot;Bob&quot;</span>,<span class="st0">&quot;&quot;</span>,<span class="kw1">true</span><span class="br0">&#41;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; CheckoutController controller <span class="sy0">=</span> GetWiredUpController<span class="br0">&#40;</span>store<span class="sy0">:</span> dataStore, user<span class="sy0">:</span> user<span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ViewResult result <span class="sy0">=</span> controller<span class="sy0">.</span><span class="me1">Complete</span><span class="br0">&#40;</span><span class="nu0">5</span><span class="br0">&#41;</span> <span class="kw1">as</span> ViewResult<span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Assert<span class="sy0">.</span><span class="me1">AreEqual</span><span class="br0">&#40;</span><span class="nu0">5</span>, result<span class="sy0">.</span><span class="me1">ViewData</span><span class="sy0">.</span><span class="me1">Model</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">namespace MvcMusicStoreTests.Controllers {

	[TestClass]
	public class CheckoutControllerTests {
		// ...

		[TestMethod]
		public void Complete_ValidOrderIdAndUser_ReturnsProperView() {
			FakeDataStore dataStore = MusicStoreEntitiesFactory.GetEmpty();
			dataStore.Orders.Add(new Order() { OrderId=5, Username="Bob" });
			FakeUser user = new FakeUser(new FakeIdentity("Bob","",true));
			CheckoutController controller = GetWiredUpController(store: dataStore, user: user);
			
			ViewResult result = controller.Complete(5) as ViewResult;

			Assert.AreEqual(5, result.ViewData.Model);
		}</pre></div></div>

<p>Without any database or HttpContext, I can now test that a valid user with a valid order id will complete processing successfully. I&#8217;ve extended the WiredUpController to take optional arguments to simplify creating scenarios specific to an individual test, again adding functionality only as we need it to satisfy our tests.</p>
<p>With a working fake data context a working fake HttpContext and sample tests that interact with both, I can make additional tests very easily and have the groundwork in place to start adding test coverage to other controllers.</p>
<h2>Finishing Up</h2>
<p>The source code is available <a href="https://bitbucket.org/tarwn/mvcmusicstore.main/src" title="Source code on BitBucket">on BitBucket</a>. Initially I went down a number of blind alleys before I started using the MVC3 Contrib package, that one decision greatly simplified seperating the test code from it&#8217;s expectations of a real HttpContext. I tried to cover the most important parts and this same process should be applicable to other projects as well. If you have any questions about how I got from one step to the next, or what happened between changesets in the source repository, please don&#8217;t hesitate to ask here, in the forum, or via the contact form on my website.</p>
<p>Creating the tests incrementally and writing only the minimum code necessary may have looked longer, but it actually helped create a pretty tight codebase for the testing and helped to uncover the lack of server-side validation in the checkout routine, a bug in the tutorial code. Had I tried to build everything I needed up front, I probably would have gone further down several blind alleys and ended up with a much larger codebase then I actually needed.</p>
<h2>Next Steps</h2>
<p>The project now has the beginning of unit test coverage and the tools necessary to start spreading those tests to the rest of our controllers. In the next post I&#8217;ll incorporate these test into the build process, running and capturing the test results as part of the CI build job.</p>
<style>
.thelist li{ color: #666666; }
.thelist .cur{ font-style: italic; color: black; }
</style>
<ul class="thelist">
<li><a href="http://wiki.lessthandot.com/index.php/Eli%27s_Continuous_Delivery_Project" title="Wiki post for Eli's Continuous Delivery Project">Wiki Post</a></li>
<li><a href="/index.php/EnterpriseDev/application-lifecycle-management/starting-a-continuous-delivery-project" title="Starting a Continuous Delivery Project">Starting a Continuous Delivery Project</a></li>
<li><a href="/index.php/EnterpriseDev/application-lifecycle-management/continuous-delivery-project-setting-up" title="Setting up the Continuous Integration stage">Setting up the Continuous Integration stage</a></li>
<li class="cur"><a href="/index.php/EnterpriseDev/UnitTest/continuous-delivery-project-making-mvcmusicstore" title="Making ASP.Net MVC Music Store Testable">Making ASP.Net MVC Music Store Testable</a></li>
<li><a href="/index.php/EnterpriseDev/UnitTest/continuous-delivery-project-incorporating-the" title="Incorporating Unit Tests in the CI stage">Incorporating Unit Tests in the CI stage</a></li>
<li><a href="/index.php/EnterpriseDev/application-lifecycle-management/continuous-delivery-project-deploy-and" title="Deploy and Smoke Test">Deploy and Smoke Test</a></li>
<li><a href="/index.php/EnterpriseDev/application-lifecycle-management/continuous-delivery-adding-an-automated" title="Adding an Automated Interface Testing stage">Adding an Automated Interface Testing stage</a></li>
<li><a href="/index.php/EnterpriseDev/application-lifecycle-management/continuous-delivery-dashboard-qa-and" title="Dashboard, QA and Production Deployment stage">Dashboard, QA and Production Deployment stage</a></li>
</ul>
]]></content:encoded>
			<wfw:commentRss>/index.php/enterprisedev/unittest/continuous-delivery-project-making-mvcmusicstore/feed/</wfw:commentRss>
		<slash:comments>0</slash:comments>
		</item>
		<item>
		<title>Unit Testing Costs Too Much &#8211; Too Many Things To Learn</title>
		<link>/index.php/webdev/serverprogramming/unit-testing-costs-too-much-too-many-thi/</link>
		<comments>/index.php/webdev/serverprogramming/unit-testing-costs-too-much-too-many-thi/#comments</comments>
		<pubDate>Mon, 22 Nov 2010 11:46:43 +0000</pubDate>
		<dc:creator><![CDATA[Eli Weinstock-Herman (tarwn)]]></dc:creator>
				<category><![CDATA[ASP.NET]]></category>
		<category><![CDATA[Server Programming]]></category>
		<category><![CDATA[ms test]]></category>
		<category><![CDATA[unit testing]]></category>
		<category><![CDATA[visual studio]]></category>

		<guid isPermaLink="false">/index.php/2010/11/unit-testing-costs-too-much-too-many-thi/</guid>
		<description><![CDATA[For someone that is just interested in trying out Unit Testing the number of topics out there can seem overwhelming. From passionate articles about using TDD, to deeply technical articles around the differences in mocking frameworks, to complete sidetracks into architecture theory and how to make code more testable...just learning enough to get started and try out Unit Testing can seem like you need weeks of classes.]]></description>
				<content:encoded><![CDATA[<p>For someone that is just interested in trying out Unit Testing the number of topics out there can seem overwhelming. From passionate articles about using TDD, to deeply technical articles around the differences in mocking frameworks, to complete sidetracks into architecture theory and how to make code more testable&#8230;just learning enough to get started and try out Unit Testing can seem like you need weeks of classes.</p>
<p>If you&#8217;re just catching up, I&#8217;ve been sharing commentary on the costs (and value) of Unit Testing, starting with <a href="/index.php/DesktopDev/GeneralPurposeLanguages/unit-testing-costs-too-much" title="Check out the first post">a brief (intended to be humorous) post</a>, a presentation at the <a href="/index.php/DesktopDev/MSTech/raleigh-code-camp-followup" title="Read the codecamp review">Raleigh CodeCamp</a>, and last weeks discussion of the <a href="/index.php/DesktopDev/GeneralPurposeLanguages/unit-testing-costs-too-much-twice-the-co" title="Read the post on the twice the code issue">&#8220;Twice as Much Code&#8221;</a> issue.</p>
<p>This article will try to convey the ease with which you can add Unit Testing to a current project without (in the case of visual studio) extra downloads, installs, or configurations. Costing only a few minutes, and without any of the other terminology, products, or theory, we can get started trying out this Unit Testing concept in our own environment.</p>
<h2>TDD, Mocks, Testability&#8230;</h2>
<p>Automated unit testing has been around for a while and, as such, there has been time for people to define common methods to help make code more testable, components to help reduce the burden of testing certain complex interactions, and processes whose value we may not currently have the context with which to understand.</p>
<p>But we don&#8217;t need any of it to get started.</p>
<p>The only thing we need to get started with Unit Testing is some source code and a Unit Testing framework. This post uses a Microsoft .Net environment with Visual Studio 2010. This actually makes my life even easier because a testing framework is included with Visual Studio, meaning there are no extra downloads, installs, or configurations required; We can start trying it out right now.</p>
<h2>Adding Unit Testing to a Project</h2>
<p>The project we are working with is a basic ASP.Net web application project that I built very quickly for sample purposes. This project can be <a href="http://tiernok.com/LTDBlog/UnitTestingExample.zip" title="ZIP Archive of test code and database backup">downloaded here</a> and includes the sample project and a backup of the SQL database. Feel free to download and follow along, or simply read the post.</p>
<p>Our goal is to quickly add Unit Testing to a pseudo &#8216;existing&#8217; application and position ourselves to take advantage of Unit Testing as we continue to maintain or work on this &#8216;existing&#8217; application.</p>
<h3>Adding the Unit Testing Project</h3>
<p>Opening the project in Visual Studio presents us with our basic Web Application. To get started we right-click the solution and add a Unit Testing Project.</p>
<div class="imgBox">
<a href="http://tiernok.com/LTDBlog/unittesting/orig/AddProject.png" title="See larger image size"><img src="http://tiernok.com/LTDBlog/unittesting/AddProject.png" alt="Adding a Unit Test Project" /></a><br />
Adding a Unit Test Project
</div>
<div class="imgBox">
<a href="http://tiernok.com/LTDBlog/unittesting/orig/AddProject2.png" title="See larger image size"><img src="http://tiernok.com/LTDBlog/unittesting/AddProject2.png" alt="Adding a Unit Test Project" /></a><br />
Adding a Unit Test Project
</div>
<p>Visual Studio will add our new Test Project to the solution and along with an automatically generated Unit Test class. </p>
<p>Next we need to add a reference to the Unit Test project, allowing it to reference the Web Application project we are going to be testing.</p>
<div class="imgBox">
<a href="http://tiernok.com/LTDBlog/unittesting/orig/AddReference.png" title="See larger image size"><img src="http://tiernok.com/LTDBlog/unittesting/AddReference.png" alt="Reference the Project to Test" /></a><br />
Reference the Project to Test
</div>
<div class="imgBox">
<a href="http://tiernok.com/LTDBlog/unittesting/orig/AddReference2.png" title="See larger image size"><img src="http://tiernok.com/LTDBlog/unittesting/AddReference2.png" alt="Reference the Project to Test" /></a><br />
Reference the Project to Test
</div>
<p>We&#8217;ve now added Unit Testing to the solution. In doing so, Visual Studio has done a few extra steps for us, adding a toolbar as well as some generated files.</p>
<h3>The New Toolbar</h3>
<p>The new toolbar in Visual Studio will helps us easily manage and run our tests. </p>
<div class="imgBox">
<a href="http://tiernok.com/LTDBlog/unittesting/orig/UnitTestToolbar.png" title="See larger image size"><img src="http://tiernok.com/LTDBlog/unittesting/UnitTestToolbar.png" alt="Unit Test Toolbar" /></a><br />
Visual Studio&#8217;s Unit Test Toolbar
</div>
<p>From left to right:</p>
<dl>
<dt>New Test</dt>
<dd>Creates additional unit test class files and provides access to a wizard to help create individual unit test functions</dd>
<dt>Run Tests in Current Context</dt>
<dd>Runs the unit tests in the current context of the cursor (selected test, all tests in a class, etc)</dd>
<dt>Run All Tests in Solution</dt>
<dd>As advertised, runs all available Unit Test Methods in the solution</dd>
<dt>Test View</dt>
<dd>A side panel to show all tests in solution</dd>
<dt>Test List Editor</dt>
<dd>An editor to show all tests, allow tests to be organized into lists, and allow specific sets of tests to be selected and run (or debugged)</dd>
<dt>Test Results</dt>
<dd>Shows results of the last test run</dd>
<dt>Test Runs</dt>
<dd>Status of test runs (local or from a remote controller)</dd>
</dl>
<p>Some of these tools also show up in the right click context menu (like Create Unit Test) and have hotkeys (such as the Ctrl+R,A chord to run all tests). Initially you should start with the Test List Editor and the Run All Tests button, the rest will come with time.</p>
<h3>The First Generated Test Class</h3>
<p>Back to the test project for a moment. When we added our new test project, Visual Studio gave us our first Test Class file, complete with some content. Normally I delete most of this and write it myself, if I need it, but it&#8217;s useful while you are still learning what&#8217;s available and the syntax to take advantage of it.</p>
<div class="imgBox">
<a href="http://tiernok.com/LTDBlog/unittesting/orig/GeneratedCode.png" title="See larger image size"><img src="http://tiernok.com/LTDBlog/unittesting/GeneratedCode.png" alt="Generated Code" /></a><br />
Generated Test Code
</div>
<ol style="list-style-type: upper-alpha;">
<li>Test Class Declaration &#8211; Using the [TestClass] attribute tells the Unit Testing framework that this class will have test methods in it</li>
<li>TestContext &#8211; Stores information for the tests (notably ASP.Net page tests and data driven tests) &#8211; subject of a whole different blog post</li>
<li>Additional Test Attributes &#8211; this commented out section contains additional method definitions we can use for setting up or tearing down test data and objects before and after each test or each test run</li>
<li>Our first Unit Test method &#8211; Visual Studio has provided us without first test method, complete with the [TestMethod] attribute that it uses to locate all unit tests in the class</li>
</ol>
<p>For this example we&#8217;re going to cut out most of the clutter and start with this:</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="csharp"><thead><tr><td colspan="2"  class="head">C#</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
</pre></td><td class="de1"><pre class="de1"><span class="kw1">using</span> <span class="co3">System</span><span class="sy0">;</span>
<span class="kw1">using</span> <span class="co3">System.Text</span><span class="sy0">;</span>
<span class="kw1">using</span> <span class="co3">System.Collections.Generic</span><span class="sy0">;</span>
<span class="kw1">using</span> <span class="co3">System.Linq</span><span class="sy0">;</span>
<span class="kw1">using</span> <span class="co3">Microsoft.VisualStudio.TestTools.UnitTesting</span><span class="sy0">;</span>
&nbsp;
<span class="kw1">namespace</span> MyFirstTestProject <span class="br0">&#123;</span>
&nbsp; &nbsp; <span class="br0">&#91;</span>TestClass<span class="br0">&#93;</span>
&nbsp; &nbsp; <span class="kw1">public</span> <span class="kw4">class</span> UnitTest1 <span class="br0">&#123;</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#91;</span>TestMethod<span class="br0">&#93;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">public</span> <span class="kw4">void</span> TestMethod1<span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="co1">// Do Stuff</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp; &nbsp; <span class="br0">&#125;</span>
<span class="br0">&#125;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">using System;
using System.Text;
using System.Collections.Generic;
using System.Linq;
using Microsoft.VisualStudio.TestTools.UnitTesting;

namespace MyFirstTestProject {
	[TestClass]
	public class UnitTest1 {

		[TestMethod]
		public void TestMethod1() {
			// Do Stuff
		}
	}
}</pre></div></div>

<p>Now that we&#8217;ve looked around, lets go ahead and make our first test.</p>
<h2>Our First Unit Test</h2>
<p>The sample project has all of it&#8217;s logic and code written directly in the code behind. For the purposes of this example we would like to debug and correct the address formatting. Occasionally it appears to output an extra address 2 line when it shouldn&#8217;t and, instead of manually troubleshooting, we will be using Unit Tests to troubleshoot and correct the error.</p>
<h3>Extract Logic to Test</h3>
<p>The first thing we will do is extract that logic out of the code behind and put it in a function. Separation of the presentation and logic is a good practice, but often we will run into existing projects that did not follow this. In those cases we need to extract the logic so it can be called from our tests (or other pages that need the same functionality).</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="csharp"><thead><tr><td colspan="2"  class="head">C#</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
</pre></td><td class="de1"><pre class="de1">&nbsp; &nbsp; &nbsp; &nbsp;<span class="kw1">protected</span> <span class="kw4">void</span> rptCustomers_ItemDataBound<span class="br0">&#40;</span><span class="kw4">object</span> sender, RepeaterItemEventArgs e<span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Label lblName <span class="sy0">=</span> <span class="br0">&#40;</span>Label<span class="br0">&#41;</span> e<span class="sy0">.</span><span class="me1">Item</span><span class="sy0">.</span><span class="me1">FindControl</span><span class="br0">&#40;</span><span class="st0">&quot;lblName&quot;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Label lblAddress <span class="sy0">=</span> <span class="br0">&#40;</span>Label<span class="br0">&#41;</span> e<span class="sy0">.</span><span class="me1">Item</span><span class="sy0">.</span><span class="me1">FindControl</span><span class="br0">&#40;</span><span class="st0">&quot;lblAddress&quot;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Label lblID <span class="sy0">=</span> <span class="br0">&#40;</span>Label<span class="br0">&#41;</span> e<span class="sy0">.</span><span class="me1">Item</span><span class="sy0">.</span><span class="me1">FindControl</span><span class="br0">&#40;</span><span class="st0">&quot;lblID&quot;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; LinkButton lbEdit <span class="sy0">=</span> <span class="br0">&#40;</span>LinkButton<span class="br0">&#41;</span> e<span class="sy0">.</span><span class="me1">Item</span><span class="sy0">.</span><span class="me1">FindControl</span><span class="br0">&#40;</span><span class="st0">&quot;lbEdit&quot;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; DataRowView dr <span class="sy0">=</span> <span class="br0">&#40;</span>DataRowView<span class="br0">&#41;</span>e<span class="sy0">.</span><span class="me1">Item</span><span class="sy0">.</span><span class="me1">DataItem</span><span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; lblID<span class="sy0">.</span><span class="me1">Text</span> <span class="sy0">=</span> dr<span class="br0">&#91;</span><span class="st0">&quot;Customer_ID&quot;</span><span class="br0">&#93;</span><span class="sy0">.</span><span class="me1">ToString</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; lblName<span class="sy0">.</span><span class="me1">Text</span> <span class="sy0">=</span> dr<span class="br0">&#91;</span><span class="st0">&quot;Name&quot;</span><span class="br0">&#93;</span><span class="sy0">.</span><span class="me1">ToString</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; lblAddress<span class="sy0">.</span><span class="me1">Text</span> <span class="sy0">=</span> dr<span class="br0">&#91;</span><span class="st0">&quot;Address_1&quot;</span><span class="br0">&#93;</span><span class="sy0">.</span><span class="me1">ToString</span><span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="sy0">+</span> <span class="st0">&quot;&lt;br/&gt;&quot;</span> <span class="sy0">+</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span class="br0">&#40;</span><span class="sy0">!</span><span class="kw4">string</span><span class="sy0">.</span><span class="me1">IsNullOrEmpty</span><span class="br0">&#40;</span>dr<span class="br0">&#91;</span><span class="st0">&quot;Address_2&quot;</span><span class="br0">&#93;</span><span class="sy0">.</span><span class="me1">ToString</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#41;</span> <span class="sy0">?</span> dr<span class="br0">&#91;</span><span class="st0">&quot;Address_2&quot;</span><span class="br0">&#93;</span><span class="sy0">.</span><span class="me1">ToString</span><span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="sy0">+</span> <span class="st0">&quot;&lt;br/&gt;&quot;</span> <span class="sy0">:</span> <span class="st0">&quot;&quot;</span><span class="br0">&#41;</span> <span class="sy0">+</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;dr<span class="br0">&#91;</span><span class="st0">&quot;City&quot;</span><span class="br0">&#93;</span><span class="sy0">.</span><span class="me1">ToString</span><span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="sy0">+</span> <span class="st0">&quot; &quot;</span> <span class="sy0">+</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;dr<span class="br0">&#91;</span><span class="st0">&quot;State&quot;</span><span class="br0">&#93;</span><span class="sy0">.</span><span class="me1">ToString</span><span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="sy0">+</span> <span class="st0">&quot;, &quot;</span> <span class="sy0">+</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;dr<span class="br0">&#91;</span><span class="st0">&quot;Zip&quot;</span><span class="br0">&#93;</span><span class="sy0">.</span><span class="me1">ToString</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; lbEdit<span class="sy0">.</span><span class="me1">CommandArgument</span> <span class="sy0">=</span> dr<span class="br0">&#91;</span><span class="st0">&quot;Customer_ID&quot;</span><span class="br0">&#93;</span><span class="sy0">.</span><span class="me1">ToString</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">       protected void rptCustomers_ItemDataBound(object sender, RepeaterItemEventArgs e) {
            Label lblName = (Label) e.Item.FindControl("lblName");
            Label lblAddress = (Label) e.Item.FindControl("lblAddress");
            Label lblID = (Label) e.Item.FindControl("lblID");
            LinkButton lbEdit = (LinkButton) e.Item.FindControl("lbEdit");
            DataRowView dr = (DataRowView)e.Item.DataItem;

            lblID.Text = dr["Customer_ID"].ToString();
            lblName.Text = dr["Name"].ToString();
            lblAddress.Text = dr["Address_1"].ToString() + "&lt;br/&gt;" +
                   (!string.IsNullOrEmpty(dr["Address_2"].ToString()) ? dr["Address_2"].ToString() + "&lt;br/&gt;" : "") +
                   dr["City"].ToString() + " " +
                   dr["State"].ToString() + ", " +
                   dr["Zip"].ToString();
            lbEdit.CommandArgument = dr["Customer_ID"].ToString();
        }</pre></div></div>

<p>To separate the address formatting out of the code behind, we will create a new class named <em>CustomerInfo</em>, add a method named <em>GetFormattedAddress</em>, and then extract the logic from the code behind and replace it with a call to our new method:</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="csharp"><thead><tr><td colspan="2"  class="head">C#</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
</pre></td><td class="de1"><pre class="de1">&nbsp; &nbsp; &nbsp; &nbsp;<span class="kw1">protected</span> <span class="kw4">void</span> rptCustomers_ItemDataBound<span class="br0">&#40;</span><span class="kw4">object</span> sender, RepeaterItemEventArgs e<span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="co1">//...</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; lblAddress<span class="sy0">.</span><span class="me1">Text</span> <span class="sy0">=</span> CustomerInformation<span class="sy0">.</span><span class="me1">GetFormattedAddress</span><span class="br0">&#40;</span>dr<span class="br0">&#91;</span><span class="st0">&quot;Address_1&quot;</span><span class="br0">&#93;</span><span class="sy0">.</span><span class="me1">ToString</span><span class="br0">&#40;</span><span class="br0">&#41;</span>,
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; dr<span class="br0">&#91;</span><span class="st0">&quot;Address_2&quot;</span><span class="br0">&#93;</span><span class="sy0">.</span><span class="me1">ToString</span><span class="br0">&#40;</span><span class="br0">&#41;</span>,
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; dr<span class="br0">&#91;</span><span class="st0">&quot;City&quot;</span><span class="br0">&#93;</span><span class="sy0">.</span><span class="me1">ToString</span><span class="br0">&#40;</span><span class="br0">&#41;</span>,
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; dr<span class="br0">&#91;</span><span class="st0">&quot;State&quot;</span><span class="br0">&#93;</span><span class="sy0">.</span><span class="me1">ToString</span><span class="br0">&#40;</span><span class="br0">&#41;</span>,
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; dr<span class="br0">&#91;</span><span class="st0">&quot;Zip&quot;</span><span class="br0">&#93;</span><span class="sy0">.</span><span class="me1">ToString</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="co1">//...</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">       protected void rptCustomers_ItemDataBound(object sender, RepeaterItemEventArgs e) {
            //...
			lblAddress.Text = CustomerInformation.GetFormattedAddress(dr["Address_1"].ToString(),
										dr["Address_2"].ToString(),
										dr["City"].ToString(),
										dr["State"].ToString(),
										dr["Zip"].ToString());
            //...
        }</pre></div></div>

<p>And the new class and method look like:</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="csharp"><thead><tr><td colspan="2"  class="head">C#</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
</pre></td><td class="de1"><pre class="de1">&nbsp; &nbsp; <span class="kw1">public</span> <span class="kw4">class</span> CustomerInformation <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">public</span> <span class="kw1">static</span> <span class="kw4">string</span> GetFormattedAddress<span class="br0">&#40;</span><span class="kw4">string</span> address1, <span class="kw4">string</span> address2, <span class="kw4">string</span> city, <span class="kw4">string</span> state, <span class="kw4">string</span> zip<span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="co1">//lblAddress.Text = dr[&quot;Address_1&quot;].ToString() + &quot;&lt;br/&gt;&quot; +</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="co1">// &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; (!string.IsNullOrEmpty(dr[&quot;Address_2&quot;].ToString()) ? dr[&quot;Address_2&quot;].ToString() + &quot;&lt;br/&gt;&quot; : &quot;&quot;) +</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="co1">// &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; dr[&quot;City&quot;].ToString() + &quot; &quot; +</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="co1">// &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; dr[&quot;State&quot;].ToString() + &quot;, &quot; +</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="co1">// &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; dr[&quot;Zip&quot;].ToString();</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">return</span> address1 <span class="sy0">+</span> <span class="st0">&quot;&lt;br/&gt;&quot;</span> <span class="sy0">+</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#40;</span><span class="sy0">!</span><span class="kw4">string</span><span class="sy0">.</span><span class="me1">IsNullOrEmpty</span><span class="br0">&#40;</span>address2<span class="br0">&#41;</span> <span class="sy0">?</span> address2 <span class="sy0">+</span> <span class="st0">&quot;&lt;br/&gt;&quot;</span> <span class="sy0">:</span> <span class="st0">&quot;&quot;</span><span class="br0">&#41;</span> <span class="sy0">+</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; city <span class="sy0">+</span> <span class="st0">&quot; &quot;</span> <span class="sy0">+</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; state <span class="sy0">+</span> <span class="st0">&quot;, &quot;</span> <span class="sy0">+</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; zip<span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp; &nbsp; <span class="br0">&#125;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">	public class CustomerInformation {
		public static string GetFormattedAddress(string address1, string address2, string city, string state, string zip) {
			//lblAddress.Text = dr["Address_1"].ToString() + "&lt;br/&gt;" +
			//               (!string.IsNullOrEmpty(dr["Address_2"].ToString()) ? dr["Address_2"].ToString() + "&lt;br/&gt;" : "") +
			//               dr["City"].ToString() + " " +
			//               dr["State"].ToString() + ", " +
			//               dr["Zip"].ToString();

			return address1 + "&lt;br/&gt;" +
			(!string.IsNullOrEmpty(address2) ? address2 + "&lt;br/&gt;" : "") +
			city + " " +
			state + ", " +
			zip;
		}
	}</pre></div></div>

<p>Now that we have a separate method to work with, we can create Unit Test methods to both troubleshoot our error and provide a defense from it occurring again.</p>
<h3>Create the First Test</h3>
<p>Back in our test project, Visual Studio had created a shell of a method for us to fill in with our test logic. The key difference between a Unit Test method and a regular method is the <em>[TestMethod]</em> decoration and the use of a class named <em>Assert</em> to communicate and test expectations.</p>
<p>When we build unit tests, we want to keep them small and simple. This reduces the complexity of the tests, makes them easier to add, change, and remove as our application is modified. The smaller and more straightforward the tests are, the easier it will be to determine what they do 3 years from now or when one of our coworkers is working with something we originally wrote.</p>
<p>Part of keeping our tests simple is using a good, consistent naming pattern. I recently started using one that Roy Osherove (<a href="/index.php/Architect/IntroductionArchitectureDesign/an-interview-with-roy-osherove-autor-of-" title="Read the interview here at LessThanDot">interview</a>|<a href="http://weblogs.asp.net/rosherove/" title="Visit Roy Osherove's blog">blog</a>|<a href="http://twitter.com/RoyOsherove" title="@RoyOsherove on Twitter">twitter</a>) included in his book. </p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="csharp"><thead><tr><td colspan="2"  class="head">C#</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
</pre></td><td class="de1"><pre class="de1"><span class="br0">&#91;</span>TestMethod<span class="br0">&#93;</span>
<span class="kw1">public</span> <span class="kw4">void</span> MethodUnderTest_Scenario_Expectation<span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span><span class="br0">&#125;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">[TestMethod]
public void MethodUnderTest_Scenario_Expectation() {}</pre></div></div>

<p>It is a long name pattern, but it reduces the need to add commenting, communicates the purpose and expectation of the test succinctly, and helps force me to keep my tests simpler. If I can&#8217;t communicate the full intent of the test in this simple manner, then I know I have made them overly complex. Communicating the intent is useful when we see a list of tests after a test run or as part of a build.</p>
<p>In this case we are testing the new GetFormattedText method, the scenario is that our address 2 field is empty, and our expectation is that we will receive back two lines of formatted HTML:</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="csharp"><thead><tr><td colspan="2"  class="head">C#</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
</pre></td><td class="de1"><pre class="de1"><span class="br0">&#91;</span>TestMethod<span class="br0">&#93;</span>
<span class="kw1">public</span> <span class="kw4">void</span> GetFormattedText_Address2EmptyString_ReturnsTwoHtmlLines<span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; <span class="co1">// arrange - setup necessary resources</span>
&nbsp;
&nbsp; &nbsp; <span class="co1">// act - act on the unit we are testing</span>
&nbsp; &nbsp; <span class="kw4">string</span> result <span class="sy0">=</span> CustomerInformation<span class="sy0">.</span><span class="me1">GetFormattedAddress</span><span class="br0">&#40;</span><span class="st0">&quot;a&quot;</span>, <span class="st0">&quot;&quot;</span>, <span class="st0">&quot;b&quot;</span>, <span class="st0">&quot;c&quot;</span>, <span class="st0">&quot;d&quot;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; <span class="co1">// assert - test our expectations</span>
&nbsp; &nbsp; Assert<span class="sy0">.</span><span class="me1">AreEqual</span><span class="sy0">&lt;</span><span class="kw4">string</span><span class="sy0">&gt;</span><span class="br0">&#40;</span><span class="st0">&quot;a&lt;br/&gt;b c, d&quot;</span>, result<span class="br0">&#41;</span><span class="sy0">;</span>
<span class="br0">&#125;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">[TestMethod]
public void GetFormattedText_Address2EmptyString_ReturnsTwoHtmlLines() {
    // arrange - setup necessary resources

    // act - act on the unit we are testing
    string result = CustomerInformation.GetFormattedAddress("a", "", "b", "c", "d");

    // assert - test our expectations
    Assert.AreEqual&lt;string&gt;("a&lt;br/&gt;b c, d", result);
}</pre></div></div>

<div class="note">
Note: The code in this function follows a common pattern for creating tests, called the <a href="http://c2.com/cgi/wiki?ArrangeActAssert" title="Read about the AAA pattern">AAA (Arrange, Act, Assert) pattern</a>. This is one more method I use to keep my tests consistent (and consistency improves maintainability and readability), though I usually do not include the comments.
</div>
<p>Our test method calls the new GetFormattedAddress method with values for all of the arguments but address2, which is passed as an empty string. Then we use the Assert.AreEqual(<em>expected</em>,<em>actual</em>) method to tell the test framework that we expect the result to match the string <code class="codespan">"a&lt;br /&gt;b c, d"</code>. On running this test (Ctrl+R, A), Visual Studio will give us a little green checkmark to indicate that the code met our expectations (no Assertions were in error).</p>
<p><em>Note: if you are following along with this project in Visual Studio, you will need to add a &#8220;using UnitTestPresentation;&#8221; to the top of your test class</em></p>
<div class="imgBox">
<a href="http://tiernok.com/LTDBlog/unittesting/orig/TestRun1.png" title="See larger image size"><img src="http://tiernok.com/LTDBlog/unittesting/TestRun1.png" alt="Test Run results" /></a><br />
Viewing Test Run Results
</div>
<p>Technically we could list as many assert statements as we want in the function, but this contradicts our Keep-it-Simple philosophy above and Visual Studio stops evaluating assertions in an individual method after the first one fails. It&#8217;s a good practice to try and limit the number Asserts so that each test method is testing one expectation and, when the customer&#8217;s expectations change, it is obvious where we have to make updates and what is impacted.</p>
<h3>Flushing Out the Problem</h3>
<p>Well, we have our first test and it doesn&#8217;t appear to have found the problem. However we can quickly add additional tests by copying that initial test, creating new method names, and tweaking the arguments we are testing.</p>
<p>Here I have created two additional tests: <br /> <code class="codespan">GetFormattedText_Address2Null_ReturnsTwoHtmlLines()</code> and <code class="codespan">GetFormattedText_Address2Whitespace_ReturnsTwoHtmlLines()</code></p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="csharp"><thead><tr><td colspan="2"  class="head">C#</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
</pre></td><td class="de1"><pre class="de1"><span class="br0">&#91;</span>TestMethod<span class="br0">&#93;</span>
<span class="kw1">public</span> <span class="kw4">void</span> GetFormattedText_Address2Null_ReturnsTwoHtmlLines<span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp;
&nbsp; &nbsp; <span class="kw4">string</span> result <span class="sy0">=</span> CustomerInformation<span class="sy0">.</span><span class="me1">GetFormattedAddress</span><span class="br0">&#40;</span><span class="st0">&quot;a&quot;</span>, <span class="kw1">null</span>, <span class="st0">&quot;b&quot;</span>, <span class="st0">&quot;c&quot;</span>, <span class="st0">&quot;d&quot;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; Assert<span class="sy0">.</span><span class="me1">AreEqual</span><span class="sy0">&lt;</span><span class="kw4">string</span><span class="sy0">&gt;</span><span class="br0">&#40;</span><span class="st0">&quot;a&lt;br/&gt;b c, d&quot;</span>, result<span class="br0">&#41;</span><span class="sy0">;</span>
<span class="br0">&#125;</span>
&nbsp;
<span class="br0">&#91;</span>TestMethod<span class="br0">&#93;</span>
<span class="kw1">public</span> <span class="kw4">void</span> GetFormattedText_Address2Whitespace_ReturnsTwoHtmlLines<span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp;
&nbsp; &nbsp; <span class="kw4">string</span> result <span class="sy0">=</span> CustomerInformation<span class="sy0">.</span><span class="me1">GetFormattedAddress</span><span class="br0">&#40;</span><span class="st0">&quot;a&quot;</span>, <span class="st0">&quot; &nbsp;&quot;</span>, <span class="st0">&quot;b&quot;</span>, <span class="st0">&quot;c&quot;</span>, <span class="st0">&quot;d&quot;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; Assert<span class="sy0">.</span><span class="me1">AreEqual</span><span class="sy0">&lt;</span><span class="kw4">string</span><span class="sy0">&gt;</span><span class="br0">&#40;</span><span class="st0">&quot;a&lt;br/&gt;b c, d&quot;</span>, result<span class="br0">&#41;</span><span class="sy0">;</span>
<span class="br0">&#125;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">[TestMethod]
public void GetFormattedText_Address2Null_ReturnsTwoHtmlLines() {

    string result = CustomerInformation.GetFormattedAddress("a", null, "b", "c", "d");

    Assert.AreEqual&lt;string&gt;("a&lt;br/&gt;b c, d", result);
}

[TestMethod]
public void GetFormattedText_Address2Whitespace_ReturnsTwoHtmlLines() {

    string result = CustomerInformation.GetFormattedAddress("a", "  ", "b", "c", "d");

    Assert.AreEqual&lt;string&gt;("a&lt;br/&gt;b c, d", result);
}</pre></div></div>

<p>And when we run our tests this time, we can see that the last one is the case where our function isn&#8217;t working correctly.</p>
<div class="imgBox">
<a href="http://tiernok.com/LTDBlog/unittesting/orig/TestRun2.png" title="See larger image size"><img src="http://tiernok.com/LTDBlog/unittesting/TestRun2.png" alt="Test Run results" /></a><br />
Viewing Test Run Results
</div>
<p>So apparently when we have whitespace in Address Line 2, the formatting function wasn&#8217;t smart enough to ignore it. This is easy to fix and we now have 3 tests that can verify our fix will works properly.</p>
<h2>Wrapping Up</h2>
<p>And that&#8217;s all it takes. </p>
<p>During the CodeCamp presentation we were able to extract, repair, and extend the validation logic for the save button on this form in a similar time period and, later in the session, someone suggested an improvement to the corrected formatting function that took less than 30 seconds to add and verify (shorter than even pulling up the website).</p>
<p>Hopefully this shows how easy it would be to get started with Unit Testing on an existing project. Rather than being an activity that will take days, you can add and start trying this technology in less than an hour. Using only as much as we covered here, you can start seeing value with your existing and new projects and learn enough to be able to evaluate more advanced techniques, other testing frameworks, and additional resources.</p>
<p>Sample code and previous articles in this unplanned series:</p>
<ul>
<li>Initial &#8220;Unit Testing Costs Too Much&#8221; post: <a href="/index.php/DesktopDev/GeneralPurposeLanguages/unit-testing-costs-too-much" title="Check out the first post">Unit Testing Costs Too Much</a></li>
<li>Code camp review and links for slides: <a href="/index.php/All/?p=999" title="Code Camp review">Raleigh Code Camp Followup</a></li>
<li>2x Code Followup: <a href="/index.php/DesktopDev/GeneralPurposeLanguages/unit-testing-costs-too-much-twice-the-co" title="Read more on the 2x Code topic">Unit Testing Costs Too Much &#8211; Twice The Code = Value?</a></li>
<li>Sample Code: <a href="http://tiernok.com/LTDBlog/UnitTestingExample.zip" title="ZIP Archive of test code and database backup">ZIP Archive of Sample Project and Database Backup</a></li>
</ul>
<style>
.imgBox{border:1px solid #CCCCCC; background-color: #EEEEEE; padding: .5em; text-align: center; display: inline-block; font-size: .8em; margin: .25em;}
</style>
]]></content:encoded>
			<wfw:commentRss>/index.php/webdev/serverprogramming/unit-testing-costs-too-much-too-many-thi/feed/</wfw:commentRss>
		<slash:comments>2</slash:comments>
		</item>
	</channel>
</rss>
