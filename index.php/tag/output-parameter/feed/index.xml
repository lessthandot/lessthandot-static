<?xml version="1.0" encoding="UTF-8"?><rss version="2.0"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:atom="http://www.w3.org/2005/Atom"
	xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
	xmlns:slash="http://purl.org/rss/1.0/modules/slash/"
	>

<channel>
	<title>output parameter &#8211; LessthanDot</title>
	<atom:link href="/index.php/tag/output-parameter/feed/" rel="self" type="application/rss+xml" />
	<link>/</link>
	<description>A Technical Community for IT Professionals</description>
	<lastBuildDate>Sat, 09 Mar 2019 12:50:36 +0000</lastBuildDate>
	<language>en-US</language>
	<sy:updatePeriod>hourly</sy:updatePeriod>
	<sy:updateFrequency>1</sy:updateFrequency>
	<generator>https://wordpress.org/?v=4.6.1</generator>
	<item>
		<title>How to capture the error output from a stored procedure when calling another stored procedure in SQL Server?</title>
		<link>/index.php/datamgmt/datadesign/how-to-capture-the-error/</link>
		<comments>/index.php/datamgmt/datadesign/how-to-capture-the-error/#respond</comments>
		<pubDate>Thu, 01 Dec 2011 15:22:00 +0000</pubDate>
		<dc:creator><![CDATA[SQLDenis]]></dc:creator>
				<category><![CDATA[Data Modelling and Design]]></category>
		<category><![CDATA[Database Programming]]></category>
		<category><![CDATA[Microsoft SQL Server]]></category>
		<category><![CDATA[Microsoft SQL Server Admin]]></category>
		<category><![CDATA[error]]></category>
		<category><![CDATA[how to]]></category>
		<category><![CDATA[output parameter]]></category>
		<category><![CDATA[sql server 2005]]></category>
		<category><![CDATA[sql server 2008]]></category>
		<category><![CDATA[tip]]></category>

		<guid isPermaLink="false">/index.php/2011/12/how-to-capture-the-error/</guid>
		<description><![CDATA[This is a quick post, this question was asked recently

I have a stored procedure which is being called by some business objects and it's working fine. I want to extend this stored procedure to call a new stored procedure (basically it will insert som&#8230;]]></description>
				<content:encoded><![CDATA[<p>This is a quick post, this <a href="http://stackoverflow.com/questions/8171359/capture-the-error-output-from-a-stored-procedure-when-calling-another-stored-pro/8171572#8171572">question</a> was asked recently</p>
<blockquote><p>I have a stored procedure which is being called by some business objects and it&#8217;s working fine. I want to extend this stored procedure to call a new stored procedure (basically it will insert some of the passed in data into another table), but this isn&#8217;t working. How can I get the error output back from both stored procedures?</p></blockquote>
<p>This is pretty simple to do if you capture the output from the first procedure and then you can use an output parameter to pass it back. Here is a very simple version of how it would work</p>
<p>This is our first proc, as you can see I hardcoded the value 1 so that we are sure this is returned from the first proc</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
</pre></td><td class="de1"><pre class="de1"><span class="kw1">CREATE</span> <span class="kw1">PROC</span> prtest1
<span class="kw1">AS</span>
<span class="kw1">RETURN</span> <span class="nu0">1</span> <span class="co1">--@@error</span>
GO</pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">CREATE PROC prtest1
AS
RETURN 1 --@@error
GO</pre></div></div>

<p>This is our second proc, as you can see I hardcoded the value 2 so that we are sure this is returned from the first proc. You can also see that I store the return value from the stored procedure prtest1 in the @error and this is an output parameter</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
</pre></td><td class="de1"><pre class="de1"><span class="kw1">CREATE</span> <span class="kw1">PROC</span> prtest2 @error <span class="kw1">INT</span> <span class="kw1">OUTPUT</span>
<span class="kw1">AS</span>
<span class="kw1">EXEC</span> @error <span class="sy0">=</span> prtest1
<span class="kw1">RETURN</span> <span class="nu0">2</span> <span class="co1">--@@error</span>
GO</pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">CREATE PROC prtest2 @error INT OUTPUT
AS
EXEC @error = prtest1
RETURN 2 --@@error
GO</pre></div></div>

<p>Here is now how you bring both statuses back by using a combination of a return value and an output parameter. this part <em>EXEC @SecondProc = prtest2</em> will get the return value. </p>
<p>This part <em>@error = @FirstProc   OUTPUT </em>will get the value that is returned from the output parameter</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
</pre></td><td class="de1"><pre class="de1"><span class="kw1">DECLARE</span> @SecondProc <span class="kw1">INT</span>, @FirstProc <span class="kw1">INT</span>
<span class="kw1">EXEC</span> @SecondProc <span class="sy0">=</span> prtest2 @error <span class="sy0">=</span> @FirstProc &nbsp; <span class="kw1">OUTPUT</span>
&nbsp;
<span class="kw1">SELECT</span> @SecondProc &nbsp;<span class="kw1">AS</span> <span class="br0">&#91;</span>2nd<span class="br0">&#93;</span>,@FirstProc <span class="kw1">AS</span> <span class="br0">&#91;</span>1st<span class="br0">&#93;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">DECLARE @SecondProc INT, @FirstProc INT
EXEC @SecondProc = prtest2 @error = @FirstProc   OUTPUT

SELECT @SecondProc  AS [2nd],@FirstProc AS [1st]</pre></div></div>

<p>Output<br />
&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;</p>
<pre>2nd	1st
2	1	</pre>
<p>I prefer to return errors that I capture from within the proc as output parameters, I will also use the <em>ERROR_MESSAGE()</em> function to return something that makes more sense to the user than a number. Below is an example</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
</pre></td><td class="de1"><pre class="de1"><span class="kw1">BEGIN</span> <span class="kw1">TRY</span>
&nbsp; &nbsp; &nbsp;<span class="kw1">SELECT</span> <span class="nu0">1</span><span class="sy0">/</span><span class="nu0">0</span>
<span class="kw1">END</span> <span class="kw1">TRY</span>
&nbsp;
<span class="kw1">BEGIN</span> <span class="kw1">CATCH</span>
&nbsp; &nbsp; &nbsp;<span class="kw1">SELECT</span> ERR<span class="sy0">OR</span>_MESSAGE<span class="br0">&#40;</span><span class="br0">&#41;</span>, <span class="kw2">@@ERROR</span>
<span class="kw1">END</span> <span class="kw1">CATCH</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">BEGIN TRY
     SELECT 1/0
END TRY

BEGIN CATCH
     SELECT ERROR_MESSAGE(), @@ERROR
END CATCH</pre></div></div>

<p>Output<br />
&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;-<br />
Divide BY zero ERROR encountered. 8134</p>
<p>What is better for the end user 8134 or &#8220;Divide BY zero ERROR encountered.&#8221;?</p>
]]></content:encoded>
			<wfw:commentRss>/index.php/datamgmt/datadesign/how-to-capture-the-error/feed/</wfw:commentRss>
		<slash:comments>0</slash:comments>
		</item>
	</channel>
</rss>
