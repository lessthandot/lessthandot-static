<?xml version="1.0" encoding="UTF-8"?><rss version="2.0"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:atom="http://www.w3.org/2005/Atom"
	xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
	xmlns:slash="http://purl.org/rss/1.0/modules/slash/"
	>

<channel>
	<title>howto &#8211; LessthanDot</title>
	<atom:link href="/index.php/tag/howto/feed/" rel="self" type="application/rss+xml" />
	<link>/</link>
	<description>A Technical Community for IT Professionals</description>
	<lastBuildDate>Sat, 09 Mar 2019 12:50:36 +0000</lastBuildDate>
	<language>en-US</language>
	<sy:updatePeriod>hourly</sy:updatePeriod>
	<sy:updateFrequency>1</sy:updateFrequency>
	<generator>https://wordpress.org/?v=4.6.1</generator>
	<item>
		<title>Where to find the xtype info for SQL Server in a table</title>
		<link>/index.php/datamgmt/dbprogramming/where-to-find-the-xtype/</link>
		<comments>/index.php/datamgmt/dbprogramming/where-to-find-the-xtype/#comments</comments>
		<pubDate>Fri, 26 Apr 2013 14:48:00 +0000</pubDate>
		<dc:creator><![CDATA[SQLDenis]]></dc:creator>
				<category><![CDATA[Database Programming]]></category>
		<category><![CDATA[Microsoft SQL Server]]></category>
		<category><![CDATA[Microsoft SQL Server Admin]]></category>
		<category><![CDATA[howto]]></category>
		<category><![CDATA[sql server 2000]]></category>
		<category><![CDATA[sql server 2005]]></category>
		<category><![CDATA[sql server 2008]]></category>
		<category><![CDATA[sql server 2012]]></category>
		<category><![CDATA[table]]></category>
		<category><![CDATA[tip]]></category>

		<guid isPermaLink="false">/index.php/2013/04/where-to-find-the-xtype/</guid>
		<description><![CDATA[If you look at the sys.sysobjects view, you will see an xtype column listed

Object type. Can be one of the following object types:
AF = Aggregate function (CLR)
C = CHECK constraint
D = Default or DEFAULT constraint
F = FOREIGN KEY constraint
L&#8230;]]></description>
				<content:encoded><![CDATA[<p>If you look at the sys.sysobjects view, you will see a xtype column listed</p>
<p>Object type. Can be one of the following object types:<br />
AF = Aggregate function (CLR)<br />
C = CHECK constraint<br />
D = Default or DEFAULT constraint<br />
F = FOREIGN KEY constraint<br />
L = Log<br />
FN = Scalar function<br />
FS = Assembly (CLR) scalar-function<br />
FT = Assembly (CLR) table-valued function<br />
IF = In-lined table-function<br />
IT = Internal table<br />
P = Stored procedure<br />
PC = Assembly (CLR) stored-procedure<br />
PK = PRIMARY KEY constraint (type is K)<br />
RF = Replication filter stored procedure<br />
S = System table<br />
SN = Synonym<br />
SQ = Service queue<br />
TA = Assembly (CLR) DML trigger<br />
TF = Table function<br />
TR = SQL DML Trigger<br />
TT = Table type<br />
U = User table<br />
UQ = UNIQUE constraint (type is K)<br />
V = View<br />
X = Extended stored procedure</p>
<p>However there is no table in SQL Server that holds this info&#8230;.or is there?</p>
<p>I answered <a href="http://stackoverflow.com/questions/16243857/is-there-a-table-that-holds-the-listing-of-xtype-descriptions">this question</a> today and decided to share here as well</p>
<p>Here is how you can find that info, you can use my favorite table spt_values</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
</pre></td><td class="de1"><pre class="de1"><span class="kw1">SELECT</span> name
<span class="kw1">FROM</span> master..<span class="me1">spt_values</span>
<span class="kw1">WHERE</span> type <span class="sy0">=</span> <span class="st0">'O9T'</span>
<span class="sy0">AND</span> number &nbsp;<span class="sy0">=</span> <span class="sy0">-</span><span class="nu0">1</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">SELECT name
FROM master..spt_values
WHERE type = 'O9T'
AND number  = -1</pre></div></div>

<p>This is the output</p>
<p>AF: aggregate function<br />
AP: application<br />
C : check cns<br />
D : default (maybe cns)<br />
EN: event notification<br />
F : foreign key cns<br />
FN: scalar function<br />
FS: assembly scalar function<br />
FT: assembly table function<br />
IF: inline function<br />
IS: inline scalar function<br />
IT: internal table<br />
L : log<br />
P : stored procedure<br />
PC : assembly stored procedure<br />
PK: primary key cns<br />
R : rule<br />
RF: replication filter proc<br />
S : system table<br />
SN: synonym<br />
SQ: queue<br />
TA: assembly trigger<br />
TF: table function<br />
TR: trigger<br />
U : user table<br />
UQ: unique key cns<br />
V : view<br />
X : extended stored proc</p>
<p>Now if you want to split it into two columns, you can use the LEFT and RIGHT functions together with the PATINDEX function</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
</pre></td><td class="de1"><pre class="de1"><span class="kw1">SELECT</span> <span class="kw1">LEFT</span><span class="br0">&#40;</span>name,<span class="kw2">PATINDEX</span><span class="br0">&#40;</span><span class="st0">'%:%'</span>,name<span class="br0">&#41;</span><span class="sy0">-</span><span class="nu0">1</span><span class="br0">&#41;</span> <span class="kw1">AS</span> xtype,
<span class="kw1">RIGHT</span><span class="br0">&#40;</span>name, <span class="br0">&#40;</span><span class="kw2">LEN</span><span class="br0">&#40;</span>name<span class="br0">&#41;</span> <span class="sy0">-</span> <span class="kw2">PATINDEX</span><span class="br0">&#40;</span><span class="st0">'%:%'</span>,name<span class="br0">&#41;</span><span class="br0">&#41;</span><span class="br0">&#41;</span> <span class="kw1">AS</span> Description
<span class="kw1">FROM</span> master..<span class="me1">spt_values</span>
<span class="kw1">WHERE</span> type <span class="sy0">=</span> <span class="st0">'O9T'</span>
<span class="sy0">AND</span> number &nbsp;<span class="sy0">=</span> <span class="sy0">-</span><span class="nu0">1</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">SELECT LEFT(name,PATINDEX('%:%',name)-1) AS xtype,
RIGHT(name, (LEN(name) - PATINDEX('%:%',name))) AS Description
FROM master..spt_values
WHERE type = 'O9T'
AND number  = -1</pre></div></div>

<p>Here is the result</p>
<pre>xtype	Description
AF	 aggregate function
AP	 application
C 	 check cns
D 	 default (maybe cns)
EN	 event notification
F 	 foreign key cns
FN	 scalar function
FS	 assembly scalar function
FT	 assembly table function
IF	 inline function
IS	 inline scalar function
IT	 internal table
L 	 log
P 	 stored procedure
PC 	 assembly stored procedure
PK	 primary key cns
R 	 rule
RF	 replication filter proc
S 	 system table
SN	 synonym
SQ	 queue
TA	 assembly trigger
TF	 table function
TR	 trigger
U 	 user table
UQ	 unique key cns
V 	 view
X 	 extended stored proc</pre>
]]></content:encoded>
			<wfw:commentRss>/index.php/datamgmt/dbprogramming/where-to-find-the-xtype/feed/</wfw:commentRss>
		<slash:comments>3</slash:comments>
		</item>
		<item>
		<title>New Collection of SQL Server Videos on Channel 9</title>
		<link>/index.php/datamgmt/datadesign/new-collection-of-sql-server/</link>
		<comments>/index.php/datamgmt/datadesign/new-collection-of-sql-server/#respond</comments>
		<pubDate>Sat, 05 Mar 2011 18:39:00 +0000</pubDate>
		<dc:creator><![CDATA[SQLDenis]]></dc:creator>
				<category><![CDATA[Data Modelling and Design]]></category>
		<category><![CDATA[Database Programming]]></category>
		<category><![CDATA[Microsoft SQL Server]]></category>
		<category><![CDATA[Microsoft SQL Server Admin]]></category>
		<category><![CDATA[denali]]></category>
		<category><![CDATA[howto]]></category>
		<category><![CDATA[sql server 2008 r2]]></category>
		<category><![CDATA[videos]]></category>

		<guid isPermaLink="false">/index.php/2011/03/new-collection-of-sql-server/</guid>
		<description><![CDATA[There are 13 new videos on channel 9 posted about SQL Server.  The non-marketing videos (by engineering PMs) give customers peek into the goals and visions why certain SQL Server features were decided and implemented. Below is a list with a little blurb&#8230;]]></description>
				<content:encoded><![CDATA[<p>There are 13 new videos on channel 9 posted about SQL Server.  The non-marketing videos (by engineering PMs) give customers peek into the goals and visions why certain SQL Server features were decided and implemented. Below is a list with a little blurb what the video is about.</p>
<p>They have the following formats available</p>
<p>High Quality WMV (PC, XBox, MCE)<br />
MP3 (Audio only)<br />
Medium Quality WMV (Lo-band, Mobile)<br />
High Quality MP4 (iPad, WP7)<br />
MP4 (iPod, Zune HD)</p>
<p><strong><a href="http://channel9.msdn.com/posts/Upgrade-Your-Database">Upgrade Your Database</a></strong><br />
Joe Yong<br />
Learn improvements/enhancements on upgrade experience for SQL Server from Joe Yong, Senior Program Manager from SQL Server China Research &amp; Development Manageability team.</p>
<p><strong><a href="http://channel9.msdn.com/posts/SQL-Server-Data-Programmability-Tools">Data Programmability Tools </a></strong><br />
Krzysztof Kozielczyk<br />
Learn about the vision of database programmability tools for SQL Server &#8220;Denali&#8221; from Krzysztof Kozielczyk, Program Manager from SQL Server Programmability team.</p>
<p><strong><a href="http://channel9.msdn.com/posts/SQL-Server-Appliance">SQL Server appliance</a></strong><br />
Britt Johnston<br />
Learn the upcoming SQL Server appliances from Britt Johnston, Principal Group Manager from SQL Server Appliance Engineering team.</p>
<p><strong><a href="http://channel9.msdn.com/posts/Parallel-Data-Warehouse">Parallel Data Warehouse</a></strong><br />
Dandy Weyn<br />
Learn massive parallel architecture of SQL Server Parallel Data Warehouse from Dandy Weyn, Senior Technical Product Manager from SQL Server marketing team.</p>
<p><strong><a href="http://channel9.msdn.com/posts/SQL-Server-Virtualization">SQL Server virtualization</a></strong><br />
Guy Bowerman<br />
Learn how decisions were made for SQL Server virtualization from Guy Bowerman, Senior Program Manager from SQL Server Engine team.</p>
<p><strong><a href="http://channel9.msdn.com/posts/SQL-Server-Security">SQL Server security</a></strong><br />
Il-Sung Lee<br />
Learn security &amp; compliance features for SQL Server from Il-Sung Lee, Senior Program Manager from SQL Server Engine Security team.</p>
<p><strong><a href="http://channel9.msdn.com/posts/SQL-Server-AlwaysOn">SQL Server AlwaysOn</a></strong><br />
Justin Erickson<br />
Learn about AlwaysOn &#8211; HA/DR improvements/enhancements for SQL Server from Justin Erickson, Senior Program Manager from SQL Server Engine team.</p>
<p><strong><a href="http://channel9.msdn.com/posts/SQL-Server-Backup-Compression">SQL Server backup compression</a></strong><br />
Kevin Farlee<br />
Learn about the choices made for SQL Server backup compression from Kevin Farlee, Senior Program Manager from SQL Server Storage Engine team.</p>
<p><strong><a href="http://channel9.msdn.com/posts/SQL-Server-Integration-Services">SQL Server Integration Services</a></strong><br />
Kevin McGuire<br />
Learn improvements/enhancements on SQL Server &#8220;Denali&#8221; Integration Services from Kevin McGuire, Principal Architect from SQL Server Integration Services team.</p>
<p><strong><a href="http://channel9.msdn.com/posts/SQL-Server-Non-Relational">SQL Server Non-Relational</a></strong><br />
Michael Rys<br />
Learn improvements/enhancements on SQL Server non-relational features from Michael Rys, Principal Program Manager from SQL Server Engine team.</p>
<p><strong><a href="http://channel9.msdn.com/posts/SQL-Server-CLR">SQL Server CLR</a></strong><br />
RobAnn Mateja<br />
Learn improvements/enhancements on CLR for SQL Server from RobAnn Mateja, Senior Program Manager from SQL Server Engine team.</p>
<p><strong><a href="http://channel9.msdn.com/posts/SQL-Server-Data-Compression">SQL Server Data Compression</a></strong><br />
Sunil Agarwal<br />
Learn data compression for SQL Server from Sunil Agarwal, Principal Program Manager from SQL Server Engine Storage team.</p>
<p><strong><a href="http://channel9.msdn.com/posts/SQL-Server-Manageability">SQL Server Manageability</a></strong><br />
Vinod Jagannathan<br />
Learn manageability vision for SQL Server from Vinod Jagannathan, Senior Program Manager from SQL Server Manageability team.</p>
]]></content:encoded>
			<wfw:commentRss>/index.php/datamgmt/datadesign/new-collection-of-sql-server/feed/</wfw:commentRss>
		<slash:comments>0</slash:comments>
		</item>
		<item>
		<title>Checking for NULL values in all columns that allow NULLS in all the tables</title>
		<link>/index.php/datamgmt/dbprogramming/checking-for-null-values-in-all-columns/</link>
		<comments>/index.php/datamgmt/dbprogramming/checking-for-null-values-in-all-columns/#comments</comments>
		<pubDate>Wed, 16 Jun 2010 14:39:00 +0000</pubDate>
		<dc:creator><![CDATA[SQLDenis]]></dc:creator>
				<category><![CDATA[Database Programming]]></category>
		<category><![CDATA[Microsoft SQL Server]]></category>
		<category><![CDATA[howto]]></category>
		<category><![CDATA[sql server 2005]]></category>
		<category><![CDATA[sql server 2008]]></category>
		<category><![CDATA[t-sql]]></category>
		<category><![CDATA[tip]]></category>

		<guid isPermaLink="false">/index.php/2010/06/checking-for-null-values-in-all-columns/</guid>
		<description><![CDATA[This post is based on a question I answered earlier today, someone wanted to check all columns that allow NULL for NULL values in all tables. The reason people might want to do this check is that they want to make all the columns not nullable in a database (after all we all know that [&#8230;]]]></description>
				<content:encoded><![CDATA[<p>This post is based on a question I answered earlier today, someone wanted to check all columns that allow NULL for NULL values in all tables. The reason people might want to do this check is that they want to make all the columns not nullable in a database (after all we all know that developers hate NULLs). </p>
<p>The Stored Procedure below is based on the code that <a href="/index.php/All/?disp=authdir&amp;author=10">George Mastros</a> wrote for the following blog post: <a href="/index.php/DataMgmt/DataDesign/the-ten-most-asked-sql-server-questions--1#2">Search all columns in all the tables in a database for a specific value</a></p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
</pre></td><td class="de1"><pre class="de1"><span class="kw1">CREATE</span> <span class="kw1">PROCEDURE</span> FindColumnsWithNulls
<span class="kw1">AS</span>
<span class="kw1">SET</span> <span class="kw1">NOCOUNT</span> <span class="kw1">ON</span>
&nbsp;
<span class="kw1">DECLARE</span> @Temp <span class="kw1">TABLE</span><span class="br0">&#40;</span>RowId <span class="kw1">INT</span> <span class="kw1">IDENTITY</span><span class="br0">&#40;</span><span class="nu0">1</span>,<span class="nu0">1</span><span class="br0">&#41;</span>, 
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; SchemaName sysname, 
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; TableName sysname, 
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ColumnName SysName, 
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; DataType <span class="kw1">VARCHAR</span><span class="br0">&#40;</span><span class="nu0">100</span><span class="br0">&#41;</span>, 
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; DataFound <span class="kw1">BIT</span><span class="br0">&#41;</span>
&nbsp;
&nbsp; &nbsp; <span class="co1">--grab the columns that we care about</span>
&nbsp; &nbsp; <span class="kw1">INSERT</span> &nbsp;<span class="kw1">INTO</span> @Temp<span class="br0">&#40;</span>TableName,SchemaName, ColumnName, DataType<span class="br0">&#41;</span>
&nbsp; &nbsp; <span class="kw1">SELECT</span> &nbsp;C.<span class="me1">Table_Name</span>,C.<span class="me1">TABLE_SCHEMA</span>, C.<span class="me1">Column_Name</span>, C.<span class="me1">Data_Type</span>
&nbsp; &nbsp; <span class="kw1">FROM</span> &nbsp; &nbsp;Information_Schema.<span class="me1">Columns</span> <span class="kw1">AS</span> C
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">INNER</span> Join Information_Schema.<span class="me1">Tables</span> <span class="kw1">AS</span> T
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">ON</span> C.<span class="me1">Table_Name</span> <span class="sy0">=</span> T.<span class="me1">Table_Name</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="sy0">AND</span> C.<span class="me1">TABLE_SCHEMA</span> <span class="sy0">=</span> T.<span class="me1">TABLE_SCHEMA</span>
&nbsp; &nbsp; <span class="kw1">WHERE</span> &nbsp; Table_Type <span class="sy0">=</span> <span class="st0">'Base Table'</span> &nbsp;<span class="co1">--only tables, no views</span>
&nbsp; &nbsp; <span class="sy0">AND</span> C.<span class="me1">IS_NULLABLE</span> <span class="sy0">=</span> <span class="st0">'YES'</span> &nbsp;<span class="co1">--obviously only check nullable columns</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 
&nbsp;
&nbsp;
<span class="kw1">DECLARE</span> @i <span class="kw1">INT</span>
<span class="kw1">DECLARE</span> @<span class="kw2">MAX</span> <span class="kw1">INT</span>
<span class="kw1">DECLARE</span> @TableName sysname
<span class="kw1">DECLARE</span> @ColumnName sysname
<span class="kw1">DECLARE</span> @SchemaName sysname
<span class="kw1">DECLARE</span> @<span class="kw1">SQL</span> <span class="kw1">NVARCHAR</span><span class="br0">&#40;</span><span class="nu0">4000</span><span class="br0">&#41;</span>
<span class="kw1">DECLARE</span> @<span class="kw1">PARAMETERS</span> <span class="kw1">NVARCHAR</span><span class="br0">&#40;</span><span class="nu0">4000</span><span class="br0">&#41;</span>
<span class="kw1">DECLARE</span> @DataExists <span class="kw1">BIT</span>
<span class="kw1">DECLARE</span> @SQLTemplate <span class="kw1">NVARCHAR</span><span class="br0">&#40;</span><span class="nu0">4000</span><span class="br0">&#41;</span>
&nbsp;
<span class="kw1">SELECT</span> &nbsp;@SQLTemplate <span class="sy0">=</span> <span class="st0">'If Exists(Select 1</span>
<span class="st0"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;From &nbsp; ReplaceTableName</span>
<span class="st0"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;Where &nbsp;[ReplaceColumnName] IS NULL)</span>
<span class="st0"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Set @DataExists = 1</span>
<span class="st0"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Else</span>
<span class="st0"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Set @DataExists = 0'</span>,
&nbsp; &nbsp; &nbsp; &nbsp; @<span class="kw1">PARAMETERS</span> <span class="sy0">=</span> <span class="st0">'@DataExists Bit OUTPUT'</span>,
&nbsp; &nbsp; &nbsp; &nbsp; @i <span class="sy0">=</span> <span class="nu0">1</span>
&nbsp;
<span class="kw1">SELECT</span> @i <span class="sy0">=</span> <span class="nu0">1</span>, @<span class="kw2">MAX</span> <span class="sy0">=</span> <span class="kw2">MAX</span><span class="br0">&#40;</span>RowId<span class="br0">&#41;</span>
<span class="kw1">FROM</span> &nbsp; @Temp
&nbsp;<span class="co1">--loop over all the columns </span>
<span class="kw1">WHILE</span> @i <span class="sy0">&lt;=</span> @<span class="kw2">MAX</span>
&nbsp; &nbsp; <span class="kw1">BEGIN</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="co1">--change the place holder with the real name </span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">SELECT</span> &nbsp;@<span class="kw1">SQL</span> <span class="sy0">=</span> <span class="kw2">REPLACE</span><span class="br0">&#40;</span><span class="kw2">REPLACE</span><span class="br0">&#40;</span>@SQLTemplate, <span class="st0">'ReplaceTableName'</span>, 
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span class="kw2">QUOTENAME</span><span class="br0">&#40;</span>SchemaName<span class="br0">&#41;</span> <span class="sy0">+</span> <span class="st0">'.'</span> <span class="sy0">+</span> 
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span class="kw2">QUOTENAME</span><span class="br0">&#40;</span>TableName<span class="br0">&#41;</span><span class="br0">&#41;</span>, <span class="st0">'ReplaceColumnName'</span>, ColumnName<span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">FROM</span> &nbsp; &nbsp;@Temp
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">WHERE</span> &nbsp; RowId <span class="sy0">=</span> @i
&nbsp;
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; <span class="co1">-- PRINT @SQL -- poor man's debugger &nbsp;<img src="https://s.w.org/images/core/emoji/2/72x72/1f642.png" alt="🙂" class="wp-smiley" style="height: 1em; max-height: 1em;" /></span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">EXEC</span> <span class="kw3">SP_EXECUTESQL</span> @<span class="kw1">SQL</span>, @<span class="kw1">PARAMETERS</span>, @DataExists <span class="sy0">=</span> @DataExists <span class="kw1">OUTPUT</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; <span class="co1">--update result table if a NULL is found</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">IF</span> @DataExists <span class="sy0">=</span><span class="nu0">1</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">UPDATE</span> @Temp <span class="kw1">SET</span> DataFound <span class="sy0">=</span> <span class="nu0">1</span> <span class="kw1">WHERE</span> RowId <span class="sy0">=</span> @i
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">SET</span> @i <span class="sy0">=</span> @i <span class="sy0">+</span> <span class="nu0">1</span>
&nbsp; &nbsp; <span class="kw1">END</span>
&nbsp;
<span class="co1">--Report to the user how many columns have NULLS</span>
<span class="kw1">SELECT</span> &nbsp;SchemaName,TableName, ColumnName,DataType
<span class="kw1">FROM</span> &nbsp; &nbsp;@Temp
<span class="kw1">WHERE</span> &nbsp; DataFound <span class="sy0">=</span> <span class="nu0">1</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">CREATE PROCEDURE FindColumnsWithNulls
AS
SET NOCOUNT ON
 
DECLARE @Temp TABLE(RowId INT IDENTITY(1,1), 
                    SchemaName sysname, 
                    TableName sysname, 
                    ColumnName SysName, 
                    DataType VARCHAR(100), 
                    DataFound BIT)
 
    --grab the columns that we care about
    INSERT  INTO @Temp(TableName,SchemaName, ColumnName, DataType)
    SELECT  C.Table_Name,C.TABLE_SCHEMA, C.Column_Name, C.Data_Type
    FROM    Information_Schema.Columns AS C
            INNER Join Information_Schema.Tables AS T
                ON C.Table_Name = T.Table_Name
        AND C.TABLE_SCHEMA = T.TABLE_SCHEMA
    WHERE   Table_Type = 'Base Table'  --only tables, no views
    AND C.IS_NULLABLE = 'YES'  --obviously only check nullable columns
            
 
 
DECLARE @i INT
DECLARE @MAX INT
DECLARE @TableName sysname
DECLARE @ColumnName sysname
DECLARE @SchemaName sysname
DECLARE @SQL NVARCHAR(4000)
DECLARE @PARAMETERS NVARCHAR(4000)
DECLARE @DataExists BIT
DECLARE @SQLTemplate NVARCHAR(4000)
 
SELECT  @SQLTemplate = 'If Exists(Select 1
                                          From   ReplaceTableName
                                          Where  [ReplaceColumnName] IS NULL)
                                     Set @DataExists = 1
                                 Else
                                     Set @DataExists = 0',
        @PARAMETERS = '@DataExists Bit OUTPUT',
        @i = 1
 
SELECT @i = 1, @MAX = MAX(RowId)
FROM   @Temp
 --loop over all the columns 
WHILE @i &lt;= @MAX
    BEGIN
        --change the place holder with the real name 
        SELECT  @SQL = REPLACE(REPLACE(@SQLTemplate, 'ReplaceTableName', 
                       QUOTENAME(SchemaName) + '.' + 
                       QUOTENAME(TableName)), 'ReplaceColumnName', ColumnName)
        FROM    @Temp
        WHERE   RowId = @i
 
 
        -- PRINT @SQL -- poor man's debugger  <img src="https://s.w.org/images/core/emoji/2/72x72/1f642.png" alt="🙂" class="wp-smiley" style="height: 1em; max-height: 1em;" />

        EXEC SP_EXECUTESQL @SQL, @PARAMETERS, @DataExists = @DataExists OUTPUT
 
        --update result table if a NULL is found
        IF @DataExists =1
            UPDATE @Temp SET DataFound = 1 WHERE RowId = @i
 
        SET @i = @i + 1
    END
 
--Report to the user how many columns have NULLS
SELECT  SchemaName,TableName, ColumnName,DataType
FROM    @Temp
WHERE   DataFound = 1</pre></div></div>

<p>You can call the code like this</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
</pre></td><td class="de1"><pre class="de1"><span class="kw1">exec</span> FindColumnsWithNulls</pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">exec FindColumnsWithNulls</pre></div></div>

<p>You will get a &#8216;report&#8217; that lists SchemaName, TableName, ColumnName and DataType</p>
<p>This proc does not tell you how many NULLS you have in a column, it will just report that the column has at least one NULL value. With the output from the proc, it is pretty easy for you to find how many NULLS there are and then update the value to something that is not NULL</p>
<p>*** <strong>If you have a SQL related question try our <a href="http://forum.lessthandot.com/viewforum.php?f=17">Microsoft SQL Server Programming</a> forum or our <a href="http://forum.lessthandot.com/viewforum.php?f=22">Microsoft SQL Server Admin</a> forum</strong><ins></ins></p>
]]></content:encoded>
			<wfw:commentRss>/index.php/datamgmt/dbprogramming/checking-for-null-values-in-all-columns/feed/</wfw:commentRss>
		<slash:comments>2</slash:comments>
		</item>
		<item>
		<title>Three different ways of populating variables with configuration values in SQL Server</title>
		<link>/index.php/datamgmt/dbprogramming/three-different-ways-of-populating-varia/</link>
		<comments>/index.php/datamgmt/dbprogramming/three-different-ways-of-populating-varia/#comments</comments>
		<pubDate>Wed, 19 May 2010 22:58:00 +0000</pubDate>
		<dc:creator><![CDATA[SQLDenis]]></dc:creator>
				<category><![CDATA[Database Administration]]></category>
		<category><![CDATA[Database Programming]]></category>
		<category><![CDATA[Microsoft SQL Server]]></category>
		<category><![CDATA[Microsoft SQL Server Admin]]></category>
		<category><![CDATA[howto]]></category>
		<category><![CDATA[sql server 2000]]></category>
		<category><![CDATA[sql server 2005]]></category>
		<category><![CDATA[sql server 2008]]></category>
		<category><![CDATA[tip]]></category>

		<guid isPermaLink="false">/index.php/2010/05/three-different-ways-of-populating-varia/</guid>
		<description><![CDATA[I have a bunch of processes that run at then end of the day. Some of these processes are configured dynamic since table names, server names, database names and a whole bunch of other stuff might change.
SO you migh have a (over simplified here) table l&#8230;]]></description>
				<content:encoded><![CDATA[<p>I have a bunch of processes that run at then end of the day. Some of these processes are configured dynamic since table names, server names, database names and a whole bunch of other stuff might change.<br />
So you might have a (over simplified here) table like this</p>
<pre>Typeid	        TypeName		TypeValue
1		ActiveServerName	SQLDenisDB1
1		DatabaseName		MyDB
1		LogTableName		LogFileTable</pre>
<p>And there might be a dozen more configurations for a process<br />
In general people will do 3 selects if there are 3 values, let&#8217;s take a look at what I mean. First create this table</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
</pre></td><td class="de1"><pre class="de1"><span class="kw1">CREATE</span> <span class="kw1">TABLE</span> SomeConfigurations<span class="br0">&#40;</span>Typeid <span class="kw1">INT</span> <span class="sy0">NOT</span> <span class="sy0">NULL</span>, 
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; TypeName <span class="kw1">VARCHAR</span><span class="br0">&#40;</span><span class="nu0">100</span><span class="br0">&#41;</span>, 
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; TypeValue <span class="kw1">VARCHAR</span><span class="br0">&#40;</span><span class="nu0">100</span><span class="br0">&#41;</span><span class="br0">&#41;</span>
&nbsp;
<span class="kw1">INSERT</span> SomeConfigurations <span class="kw1">VALUES</span> <span class="br0">&#40;</span><span class="nu0">1</span>,<span class="st0">'ActiveServerName'</span>,<span class="st0">'SQLDenisDB1'</span><span class="br0">&#41;</span>
<span class="kw1">INSERT</span> SomeConfigurations <span class="kw1">VALUES</span> <span class="br0">&#40;</span><span class="nu0">1</span>,<span class="st0">'DatabaseName'</span>,<span class="st0">'MyDB'</span><span class="br0">&#41;</span>
<span class="kw1">INSERT</span> SomeConfigurations <span class="kw1">VALUES</span> <span class="br0">&#40;</span><span class="nu0">1</span>,<span class="st0">'LogTableName'</span>,<span class="st0">'LogFileTable'</span><span class="br0">&#41;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">CREATE TABLE SomeConfigurations(Typeid INT NOT NULL, 
			TypeName VARCHAR(100), 
			TypeValue VARCHAR(100))

INSERT SomeConfigurations VALUES (1,'ActiveServerName','SQLDenisDB1')
INSERT SomeConfigurations VALUES (1,'DatabaseName','MyDB')
INSERT SomeConfigurations VALUES (1,'LogTableName','LogFileTable')</pre></div></div>

<h2>One select per value</h2>
<p>This is what I usually see, one query for each value.</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
</pre></td><td class="de1"><pre class="de1"><span class="kw1">DECLARE</span> @ActiveServerName <span class="kw1">VARCHAR</span><span class="br0">&#40;</span><span class="nu0">100</span><span class="br0">&#41;</span>,
&nbsp; &nbsp; &nbsp; &nbsp; @DatabaseName <span class="kw1">VARCHAR</span><span class="br0">&#40;</span><span class="nu0">100</span><span class="br0">&#41;</span>,
&nbsp; &nbsp; &nbsp; &nbsp; @LogTableName <span class="kw1">VARCHAR</span><span class="br0">&#40;</span><span class="nu0">100</span><span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; 
&nbsp;
<span class="kw1">SELECT</span> @ActiveServerName <span class="sy0">=</span> TypeValue
<span class="kw1">FROM</span> SomeConfigurations
<span class="kw1">WHERE</span> Typeid <span class="sy0">=</span><span class="nu0">1</span>
<span class="sy0">AND</span> TypeName <span class="sy0">=</span> <span class="st0">'ActiveServerName'</span>
&nbsp;
<span class="kw1">SELECT</span> @DatabaseName <span class="sy0">=</span> TypeValue
<span class="kw1">FROM</span> SomeConfigurations
<span class="kw1">WHERE</span> Typeid <span class="sy0">=</span><span class="nu0">1</span>
<span class="sy0">AND</span> TypeName <span class="sy0">=</span> <span class="st0">'DatabaseName'</span>
&nbsp;
<span class="kw1">SELECT</span> @LogTableName <span class="sy0">=</span> TypeValue
<span class="kw1">FROM</span> SomeConfigurations
<span class="kw1">WHERE</span> Typeid <span class="sy0">=</span><span class="nu0">1</span>
<span class="sy0">AND</span> TypeName <span class="sy0">=</span> <span class="st0">'LogTableName'</span>
&nbsp;
<span class="kw1">SELECT</span> @ActiveServerName,@DatabaseName,@LogTableName</pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">DECLARE @ActiveServerName VARCHAR(100),
		@DatabaseName VARCHAR(100),
		@LogTableName VARCHAR(100)
		

SELECT @ActiveServerName = TypeValue
FROM SomeConfigurations
WHERE Typeid =1
AND TypeName = 'ActiveServerName'

SELECT @DatabaseName = TypeValue
FROM SomeConfigurations
WHERE Typeid =1
AND TypeName = 'DatabaseName'

SELECT @LogTableName = TypeValue
FROM SomeConfigurations
WHERE Typeid =1
AND TypeName = 'LogTableName'

SELECT @ActiveServerName,@DatabaseName,@LogTableName</pre></div></div>

<p>Okay so that is not really something I want to maintain. I guess if you get paid by lines of code written it makes you look good <img src="https://s.w.org/images/core/emoji/2/72x72/1f642.png" alt="🙂" class="wp-smiley" style="height: 1em; max-height: 1em;" /><br />
Next up.. a different approach&#8230;</p>
<h2>Enter the pivot.</h2>
<p>Pivot was introduced in SQL Server 2005 and here is how you can change those three selects into one select</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
</pre></td><td class="de1"><pre class="de1"><span class="kw1">DECLARE</span> @ActiveServerName <span class="kw1">VARCHAR</span><span class="br0">&#40;</span><span class="nu0">100</span><span class="br0">&#41;</span>,
&nbsp; &nbsp; &nbsp; &nbsp; @DatabaseName <span class="kw1">VARCHAR</span><span class="br0">&#40;</span><span class="nu0">100</span><span class="br0">&#41;</span>,
&nbsp; &nbsp; &nbsp; &nbsp; @LogTableName <span class="kw1">VARCHAR</span><span class="br0">&#40;</span><span class="nu0">100</span><span class="br0">&#41;</span>
&nbsp;
<span class="kw1">SELECT</span> @ActiveServerName <span class="sy0">=</span> ActiveServerName,
@DatabaseName <span class="sy0">=</span> DatabaseName,
@LogTableName <span class="sy0">=</span> LogTableName
<span class="kw1">FROM</span>
<span class="br0">&#40;</span><span class="kw1">SELECT</span> TypeName,TypeValue
<span class="kw1">FROM</span> SomeConfigurations
<span class="kw1">WHERE</span> Typeid <span class="sy0">=</span><span class="nu0">1</span><span class="br0">&#41;</span> <span class="kw1">AS</span> pivTemp
PIVOT
<span class="br0">&#40;</span> &nbsp; <span class="kw2">MAX</span><span class="br0">&#40;</span>TypeValue<span class="br0">&#41;</span>
&nbsp; &nbsp; <span class="kw1">FOR</span> TypeName <span class="sy0">IN</span> <span class="br0">&#40;</span>ActiveServerName,DatabaseName,LogTableName<span class="br0">&#41;</span>
<span class="br0">&#41;</span> <span class="kw1">AS</span> pivTable
&nbsp;
<span class="kw1">SELECT</span> @ActiveServerName,@DatabaseName,@LogTableName</pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">DECLARE @ActiveServerName VARCHAR(100),
		@DatabaseName VARCHAR(100),
		@LogTableName VARCHAR(100)

SELECT @ActiveServerName = ActiveServerName,
@DatabaseName = DatabaseName,
@LogTableName = LogTableName
FROM
(SELECT TypeName,TypeValue
FROM SomeConfigurations
WHERE Typeid =1) AS pivTemp
PIVOT
(   MAX(TypeValue)
    FOR TypeName IN (ActiveServerName,DatabaseName,LogTableName)
) AS pivTable

SELECT @ActiveServerName,@DatabaseName,@LogTableName</pre></div></div>

<p>I prefer that over those three selects any time. Not only is it less code but it is also faster because it touches the tables once. If you want to learn more about PIVOT and UNPIVOT, then visit the following books on line link: http://msdn.microsoft.com/en-us/library/ms177410.aspx</p>
<h2>If you are running software from the last century: case to the rescue</h2>
<p>Even for you people who are still on SQL Server 2000 there is a way to do this in one select, take a look at the query below</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
</pre></td><td class="de1"><pre class="de1"><span class="kw1">DECLARE</span> @ActiveServerName <span class="kw1">VARCHAR</span><span class="br0">&#40;</span><span class="nu0">100</span><span class="br0">&#41;</span>,
&nbsp; &nbsp; &nbsp; &nbsp; @DatabaseName <span class="kw1">VARCHAR</span><span class="br0">&#40;</span><span class="nu0">100</span><span class="br0">&#41;</span>,
&nbsp; &nbsp; &nbsp; &nbsp; @LogTableName <span class="kw1">VARCHAR</span><span class="br0">&#40;</span><span class="nu0">100</span><span class="br0">&#41;</span>
&nbsp;
<span class="kw1">SELECT</span> 
@ActiveServerName &nbsp; <span class="sy0">=</span> <span class="kw2">MAX</span><span class="br0">&#40;</span><span class="kw1">CASE</span> TypeName <span class="kw1">WHEN</span> <span class="st0">'ActiveServerName'</span> <span class="kw1">THEN</span> TypeValue <span class="kw1">ELSE</span> <span class="st0">''</span> <span class="kw1">END</span><span class="br0">&#41;</span>,
@DatabaseName &nbsp; &nbsp; &nbsp; <span class="sy0">=</span> <span class="kw2">MAX</span><span class="br0">&#40;</span><span class="kw1">CASE</span> TypeName <span class="kw1">WHEN</span> <span class="st0">'DatabaseName'</span> &nbsp; &nbsp; <span class="kw1">THEN</span> TypeValue <span class="kw1">ELSE</span> <span class="st0">''</span> <span class="kw1">END</span><span class="br0">&#41;</span>,
@LogTableName &nbsp; &nbsp; &nbsp; <span class="sy0">=</span> <span class="kw2">MAX</span><span class="br0">&#40;</span><span class="kw1">CASE</span> TypeName <span class="kw1">WHEN</span> <span class="st0">'LogTableName'</span> &nbsp; &nbsp; <span class="kw1">THEN</span> TypeValue <span class="kw1">ELSE</span> <span class="st0">''</span> <span class="kw1">END</span><span class="br0">&#41;</span> 
<span class="kw1">FROM</span> SomeConfigurations
<span class="kw1">WHERE</span> Typeid <span class="sy0">=</span><span class="nu0">1</span>
&nbsp;
<span class="kw1">SELECT</span> @ActiveServerName,@DatabaseName,@LogTableName</pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">DECLARE @ActiveServerName VARCHAR(100),
		@DatabaseName VARCHAR(100),
		@LogTableName VARCHAR(100)

SELECT 
@ActiveServerName	= MAX(CASE TypeName WHEN 'ActiveServerName' THEN TypeValue ELSE '' END),
@DatabaseName		= MAX(CASE TypeName WHEN 'DatabaseName'		THEN TypeValue ELSE '' END),
@LogTableName		= MAX(CASE TypeName WHEN 'LogTableName'		THEN TypeValue ELSE '' END) 
FROM SomeConfigurations
WHERE Typeid =1

SELECT @ActiveServerName,@DatabaseName,@LogTableName</pre></div></div>

<p>And the same applies here as to pivot, this query will hit the table only one time.</p>
<p>So in the end, which do you prefer?</p>
<p>A) 3 selects (because you get paid by lines of code)<br />
B) Pivot (because nobody else understand pivot syntax, so this is job security)<br />
C) Case statement (because you are still running NT 4.0 with SQL Server 2000 SP4)</p>
<p>*** <strong>Remember, if you have a SQL related question, try our <a href="http://forum.lessthandot.com/viewforum.php?f=17">Microsoft SQL Server Programming</a> forum or our <a href="http://forum.lessthandot.com/viewforum.php?f=22">Microsoft SQL Server Admin</a> forum</strong><ins></ins></p>
]]></content:encoded>
			<wfw:commentRss>/index.php/datamgmt/dbprogramming/three-different-ways-of-populating-varia/feed/</wfw:commentRss>
		<slash:comments>4</slash:comments>
		</item>
		<item>
		<title>How to use T-SQL to get the command line startup parameters that were used to start SQL Server</title>
		<link>/index.php/datamgmt/datadesign/how-to-use-t-sql-to-get-the-command-line/</link>
		<comments>/index.php/datamgmt/datadesign/how-to-use-t-sql-to-get-the-command-line/#respond</comments>
		<pubDate>Tue, 18 May 2010 15:04:07 +0000</pubDate>
		<dc:creator><![CDATA[SQLDenis]]></dc:creator>
				<category><![CDATA[Data Modelling and Design]]></category>
		<category><![CDATA[Database Administration]]></category>
		<category><![CDATA[Database Programming]]></category>
		<category><![CDATA[Microsoft SQL Server]]></category>
		<category><![CDATA[Microsoft SQL Server Admin]]></category>
		<category><![CDATA[howto]]></category>
		<category><![CDATA[sql server 2005]]></category>
		<category><![CDATA[sql server 2008]]></category>
		<category><![CDATA[tip]]></category>

		<guid isPermaLink="false">/index.php/2010/05/how-to-use-t-sql-to-get-the-command-line/</guid>
		<description><![CDATA[This is just a quick blogpost that will show you how you can use T-SQL to get the command line startup parameters that were used to start SQL Server. Before I start I want to warn you that you do not try NET START and NET STOP on a production server since you might mess [&#8230;]]]></description>
				<content:encoded><![CDATA[<p>This is just a quick blogpost that will show you how you can use T-SQL to get the command line startup parameters that were used to start SQL Server. Before I start I want to warn you that you <strong>do not try NET START and NET STOP on a production server since you might mess stuff up big time!!</strong>.</p>
<p>In order to start SQL Server with parameters we can use the configuration tool or we can use the command line, of course we will use the command line</p>
<p>I advise you to read the <a href="http://wiki.lessthandot.com/index.php/Using_the_Command_Line_to_manage_SQL_Server_services">Using the Command Line to manage SQL Server services</a> wiki article first before continuing.<br />
First we are going to start SQL Server with the -c parameter</p>
<h2>Starting SQL Server with one startup parameter</h2>
<p><em>-c<br />
Shortens startup time when starting SQL Server from the command prompt. Typically, the SQL Server Database Engine starts as a service by calling the Service Control Manager. Because the SQL Server Database Engine does not start as a service when starting from the command prompt, use -c to skip this step.</em></p>
<p>If your SQL Server is running then you need to shut it down first. You can either do it from SSMS, the service or from a command line like this: <em>NET STOP MSSQLSERVER</em> </p>
<p>Now it is time to start up SQL Server with the -c parameter, here is how you do that, open a command prompt and type <em>NET START MSSQLSERVER /c</em><br />
Your output should look like this</p>
<p>The SQL Server (MSSQLSERVER) service is starting.<br />
The SQL Server (MSSQLSERVER) service was started successfully.</p>
<p>Now we can use the undocumented sp_readerrorlog proc to see what we started with, you can also just open up your error log of course.<br />
More info about how to use sp_readerrorlog is available on our wiki here: <a href="http://wiki.lessthandot.com/index.php/Read_the_error_log_with_T-SQL">Read the error log with T-SQL</a></p>
<p>To search the current error log we can do this</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
</pre></td><td class="de1"><pre class="de1"><span class="kw1">EXEC</span> sp_readerrorlog <span class="nu0">0</span>, <span class="nu0">1</span>, <span class="st0">'Command Line Startup Parameters'</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">EXEC sp_readerrorlog 0, 1, 'Command Line Startup Parameters'</pre></div></div>

<p>Here is the output<br />
2010-05-18 12:36:51.010	Server	Command Line Startup Parameters:    /c</p>
<p>You can also use 2 search arguments like this</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
</pre></td><td class="de1"><pre class="de1"><span class="kw1">EXEC</span> sp_readerrorlog <span class="nu0">0</span>, <span class="nu0">1</span>, <span class="st0">'Command Line Startup Parameters'</span>,<span class="st0">'/c'</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">EXEC sp_readerrorlog 0, 1, 'Command Line Startup Parameters','/c'</pre></div></div>

<p>Output is the same<br />
2010-05-18 12:36:51.010	Server	Command Line Startup Parameters:    /c</p>
<p>Now, let&#8217;s stop the SQL Server instance, type this in a command window: <em>NET STOP MSSQLSERVER </em></p>
<p>Your output should look like this
<pre>The SQL Server (MSSQLSERVER) service is stopping.
The SQL Server (MSSQLSERVER) service was stopped successfully.</pre>
<h2>Starting SQL Server with two startup parameters</h2>
<p>I am adding another parameter, this time I will add the -g parameter</p>
<p><em>-g<br />
Specifies an integer number of megabytes (MB) of memory that SQL Server will leave available for memory allocations within the SQL Server process, but outside the SQL Server memory pool. The memory outside of the memory pool is the area used by SQL Server for loading items such as extended procedure .dll files, the OLE DB providers referenced by distributed queries, and automation objects referenced in Transact-SQL statements. The default is 256 MB.</em></p>
<p>Type this in a command window to start SQL Server with both the c and the g startup parameter: <em>NET START MSSQLSERVER /c /g 5000</em></p>
<p>Your output should look like this
<pre>The SQL Server (MSSQLSERVER) service is starting.
The SQL Server (MSSQLSERVER) service was started successfully.</pre>
<p>Now let&#8217;s run the same stored procedure from before</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
</pre></td><td class="de1"><pre class="de1"><span class="kw1">EXEC</span> sp_readerrorlog <span class="nu0">0</span>, <span class="nu0">1</span>, <span class="st0">'Command Line Startup Parameters'</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">EXEC sp_readerrorlog 0, 1, 'Command Line Startup Parameters'</pre></div></div>

<p>And here is the output<br />
2010-05-18 12:37:54.820	Server	Command Line Startup Parameters:    /c    /g</p>
<p>Now you can also search for /c or /g and the result is the same as before<br />
Search for /c</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
</pre></td><td class="de1"><pre class="de1"><span class="kw1">EXEC</span> sp_readerrorlog <span class="nu0">0</span>, <span class="nu0">1</span>, <span class="st0">'Command Line Startup Parameters'</span>,<span class="st0">'/c'</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">EXEC sp_readerrorlog 0, 1, 'Command Line Startup Parameters','/c'</pre></div></div>

<p>Search for /g</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
</pre></td><td class="de1"><pre class="de1"><span class="kw1">EXEC</span> sp_readerrorlog <span class="nu0">0</span>, <span class="nu0">1</span>, <span class="st0">'Command Line Startup Parameters'</span>,<span class="st0">'/g'</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">EXEC sp_readerrorlog 0, 1, 'Command Line Startup Parameters','/g'</pre></div></div>

<p>So there you have it EXEC sp_readerrorlog 0, 1, &#8216;Command Line Startup Parameters&#8217; is a quick way to check how SQL Server was started without looking through your error log</p>
<p>*** <strong>Remember, if you have a SQL related question, try our <a href="http://forum.lessthandot.com/viewforum.php?f=17">Microsoft SQL Server Programming</a> forum or our <a href="http://forum.lessthandot.com/viewforum.php?f=22">Microsoft SQL Server Admin</a> forum</strong><ins></ins></p>
]]></content:encoded>
			<wfw:commentRss>/index.php/datamgmt/datadesign/how-to-use-t-sql-to-get-the-command-line/feed/</wfw:commentRss>
		<slash:comments>0</slash:comments>
		</item>
		<item>
		<title>Debugging 64 bit SSIS packages</title>
		<link>/index.php/datamgmt/dbprogramming/debugging-64-bit-ssis-packages/</link>
		<comments>/index.php/datamgmt/dbprogramming/debugging-64-bit-ssis-packages/#respond</comments>
		<pubDate>Sun, 25 Apr 2010 17:44:00 +0000</pubDate>
		<dc:creator><![CDATA[SQLDenis]]></dc:creator>
				<category><![CDATA[Database Programming]]></category>
		<category><![CDATA[Microsoft SQL Server]]></category>
		<category><![CDATA[debugging]]></category>
		<category><![CDATA[howto]]></category>
		<category><![CDATA[ssis]]></category>
		<category><![CDATA[yip]]></category>

		<guid isPermaLink="false">/index.php/2010/04/debugging-64-bit-ssis-packages/</guid>
		<description><![CDATA[If you ever try to debug a script task by setting a breakpoint and the package is on a 64 bit machine it will just ignpore the breakpoint. I ran into this problem myself a while ago and this week a co-worker also ran into it and asked me how to resolve it. It is [&#8230;]]]></description>
				<content:encoded><![CDATA[<p>If you ever try to debug a script task by setting a breakpoint and the package is on a 64 bit machine it will just ignpore the breakpoint.<br />
I ran into this problem myself a while ago and this week a co-worker also ran into it and asked me how to resolve it.</p>
<p>It is pretty simple, all you have to do is click on <em>Project</em>, then select <em>Debug Properties</em>. Under <em>Configuration Properties</em>, click on <em>Debugging</em>. Make <em>Run64BitRuntime</em> <em>False</em>. See image below. </p>
<p><img src="/wp-content/uploads/blogs/DataMgmt//debug2.png" alt="" title="" width="696" height="422" /></p>
<p>Now start the debugger again, you will see now that it will stop at the breakpoint.</p>
<p>I also captured  it in a video and uploaded it on YouTube, there is even a HD 720p format<br />
[video:youtube:VJrshV22MD4]</p>
<p>*** <strong>Remember, if you have a SQL related question, try our <a href="http://forum.lessthandot.com/viewforum.php?f=17">Microsoft SQL Server Programming</a> forum or our <a href="http://forum.lessthandot.com/viewforum.php?f=22">Microsoft SQL Server Admin</a> forum</strong><ins></ins></p>
]]></content:encoded>
			<wfw:commentRss>/index.php/datamgmt/dbprogramming/debugging-64-bit-ssis-packages/feed/</wfw:commentRss>
		<slash:comments>0</slash:comments>
		</item>
		<item>
		<title>Can&#8217;t depend on sp_depends? Try using sp_refreshsqlmodule</title>
		<link>/index.php/datamgmt/datadesign/can-t-depend-on-sp_depends-try-using-sp_/</link>
		<comments>/index.php/datamgmt/datadesign/can-t-depend-on-sp_depends-try-using-sp_/#respond</comments>
		<pubDate>Fri, 26 Jun 2009 14:17:48 +0000</pubDate>
		<dc:creator><![CDATA[SQLDenis]]></dc:creator>
				<category><![CDATA[Data Modelling and Design]]></category>
		<category><![CDATA[howto]]></category>
		<category><![CDATA[sql server 2008]]></category>
		<category><![CDATA[trick]]></category>

		<guid isPermaLink="false">/index.php/2009/06/can-t-depend-on-sp_depends-try-using-sp_/</guid>
		<description><![CDATA[This will not work on SQL Server 2000 since the sp_refreshsqlmodule does not exists on that version! A while back in the What is deferred name resolution and why do you need to care? blogpost I showed you that sp_depens is not reliable because you can create procedures that reference objects that have not been [&#8230;]]]></description>
				<content:encoded><![CDATA[<p>This will not work on SQL Server 2000 since the sp_refreshsqlmodule does not exists on that version!</p>
<p>A while back in the <a href="/index.php/DataMgmt/DataDesign/what-is-deferred-name-resolution-and-why">What is deferred name resolution and why do you need to care?</a> blogpost I showed you that sp_depens is not reliable because you can create procedures that reference objects that have not been created yet.</p>
<p>You can use sp_refreshsqlmodule to help &#8216;fix&#8217; that<br />
let&#8217;s take a look at how that works</p>
<p>First create this awesome stored procedure</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
</pre></td><td class="de1"><pre class="de1"><span class="kw1">create</span> <span class="kw1">procedure</span> prBla
<span class="kw1">as</span>
<span class="kw1">select</span> <span class="sy0">*</span> <span class="kw1">from</span> Blah 
go</pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">create procedure prBla
as
select * from Blah 
go</pre></div></div>

<p>Now execute sp_depends</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
</pre></td><td class="de1"><pre class="de1"><span class="kw1">exec</span> <span class="kw3">sp_depends</span> <span class="st0">'Blah'</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">exec sp_depends 'Blah'</pre></div></div>

<p>Server: Msg 15009, Level 16, State 1, Procedure sp_depends, Line 25<br />
The object &#8216;Blah&#8217; does not exist in database &#8216;tempdb&#8217; or is invalid for this operation.</p>
<p>So that tells us that the table Blah does not exist. Fine, what happens if we run sp_depends for the proc?</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
</pre></td><td class="de1"><pre class="de1"><span class="kw1">exec</span> <span class="kw3">sp_depends</span> <span class="st0">'prBla'</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">exec sp_depends 'prBla'</pre></div></div>

<p>Object does not reference any object, and no objects reference it.</p>
<p>That makes sense since the table does not exist. Let&#8217;s create this table</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
</pre></td><td class="de1"><pre class="de1"><span class="kw1">create</span> <span class="kw1">table</span> Blah
<span class="br0">&#40;</span>SomeCol <span class="kw1">int</span><span class="br0">&#41;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">create table Blah
(SomeCol int)</pre></div></div>

<p>Now run sp_depends again for the table and the project</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
</pre></td><td class="de1"><pre class="de1"><span class="kw1">exec</span> <span class="kw3">sp_depends</span> <span class="st0">'Blah'</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">exec sp_depends 'Blah'</pre></div></div>

<p>Object does not reference any object, and no objects reference it.</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
</pre></td><td class="de1"><pre class="de1"><span class="kw1">exec</span> <span class="kw3">sp_depends</span> <span class="st0">'prBla'</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">exec sp_depends 'prBla'</pre></div></div>

<p>Object does not reference any object, and no objects reference it.</p>
<p>Okay so SQL server knows that the table Blah has been created but it still does not know that it is beeing used in the proc</p>
<p>Will executing the proc change that perhaps?</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
</pre></td><td class="de1"><pre class="de1"><span class="kw1">exec</span> &nbsp;prBla</pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">exec  prBla</pre></div></div>


<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
</pre></td><td class="de1"><pre class="de1"><span class="kw1">exec</span> <span class="kw3">sp_depends</span> <span class="st0">'Blah'</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">exec sp_depends 'Blah'</pre></div></div>

<p>Object does not reference any object, and no objects reference it.</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
</pre></td><td class="de1"><pre class="de1"><span class="kw1">exec</span> <span class="kw3">sp_depends</span> <span class="st0">'prBla'</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">exec sp_depends 'prBla'</pre></div></div>

<p>Object does not reference any object, and no objects reference it.</p>
<p>Nope, no such luck, that didn&#8217;t do anything<br />
Now execute the sp_refreshsqlmodule proc</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
</pre></td><td class="de1"><pre class="de1"><span class="kw1">exec</span> sp_refreshsqlmodule <span class="st0">'prBla'</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">exec sp_refreshsqlmodule 'prBla'</pre></div></div>

<p>Execute sp_depends again</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
</pre></td><td class="de1"><pre class="de1"><span class="kw1">exec</span> <span class="kw3">sp_depends</span> <span class="st0">'Blah'</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">exec sp_depends 'Blah'</pre></div></div>

<p>In the current database, the specified object is referenced by the following:</p>
<pre>name		type
dbo.prBla	stored procedure</pre>
<p>Yep, now it is showing us that table Blah is used by the stored proc prBla<br />
Will it work when we run sp_depends for the stored procedure?</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
</pre></td><td class="de1"><pre class="de1"><span class="kw1">exec</span> <span class="kw3">sp_depends</span> <span class="st0">'prBla'</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">exec sp_depends 'prBla'</pre></div></div>

<p>In the current database, the specified object references the following:</p>
<pre>name		type		updated	selected	column
dbo.Blah	user table	no	yes		SomeCol</pre>
<p>And as you can see it also shows that the table is used..like Borat would say &#8220;Very Nice&#8221;</p>
<p>Clean up by dropping these sample objects</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
</pre></td><td class="de1"><pre class="de1"><span class="kw1">drop</span> <span class="kw1">table</span> Blah
go
<span class="kw1">drop</span> <span class="kw1">procedure</span> prBla
go</pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">drop table Blah
go
drop procedure prBla
go</pre></div></div>

<p></p>
<p>*** <strong>If you have a SQL related question try our <a href="http://forum.lessthandot.com/viewforum.php?f=17">Microsoft SQL Server Programming</a> forum or our <a href="http://forum.lessthandot.com/viewforum.php?f=22">Microsoft SQL Server Admin</a> forum</strong><ins></ins></p>
]]></content:encoded>
			<wfw:commentRss>/index.php/datamgmt/datadesign/can-t-depend-on-sp_depends-try-using-sp_/feed/</wfw:commentRss>
		<slash:comments>0</slash:comments>
		</item>
		<item>
		<title>Replace Your Case When Then Else Syntax With the Sign Function In SQL Server</title>
		<link>/index.php/datamgmt/datadesign/replace-your-case-when-then-else-syntax/</link>
		<comments>/index.php/datamgmt/datadesign/replace-your-case-when-then-else-syntax/#comments</comments>
		<pubDate>Mon, 22 Jun 2009 12:50:30 +0000</pubDate>
		<dc:creator><![CDATA[SQLDenis]]></dc:creator>
				<category><![CDATA[Data Modelling and Design]]></category>
		<category><![CDATA[Database Programming]]></category>
		<category><![CDATA[Microsoft SQL Server]]></category>
		<category><![CDATA[functions]]></category>
		<category><![CDATA[howto]]></category>
		<category><![CDATA[sql server 2000]]></category>
		<category><![CDATA[sql server 2008]]></category>

		<guid isPermaLink="false">/index.php/2009/06/replace-your-case-when-then-else-syntax/</guid>
		<description><![CDATA[If you want to show a 1 when there is a value for something in the column and 0 if none of the rows have that values you typically do something like this T-SQL1 CASE WHEN SUM&#40;CONVERT&#40;INT,SomeValue&#41;&#41; &#62; 0 THEN 1 ELSE 0 END CASE WHEN SUM(CONVERT(INT,SomeValue)) &#62; 0 THEN 1 ELSE 0 END Basically [&#8230;]]]></description>
				<content:encoded><![CDATA[<p>If you want to show a 1 when there is a value for something in the column and 0 if none of the rows have that values you typically do something like this</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
</pre></td><td class="de1"><pre class="de1"><span class="kw1">CASE</span> <span class="kw1">WHEN</span> <span class="kw2">SUM</span><span class="br0">&#40;</span><span class="kw1">CONVERT</span><span class="br0">&#40;</span><span class="kw1">INT</span>,SomeValue<span class="br0">&#41;</span><span class="br0">&#41;</span> <span class="sy0">&gt;</span> <span class="nu0">0</span> <span class="kw1">THEN</span> <span class="nu0">1</span> <span class="kw1">ELSE</span> <span class="nu0">0</span> <span class="kw1">END</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">CASE WHEN SUM(CONVERT(INT,SomeValue)) &gt; 0 THEN 1 ELSE 0 END</pre></div></div>

<p>Basically you sum it up and if the sum is greater than 0 then you show 1 otherwise you show 0<br />
Here is what it might look like in code</p>
<p>First create the following table with this data</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
</pre></td><td class="de1"><pre class="de1"><span class="kw1">create</span> <span class="kw1">table</span> #Cars<span class="br0">&#40;</span>id <span class="kw1">int</span>,brand <span class="kw1">varchar</span><span class="br0">&#40;</span><span class="nu0">20</span><span class="br0">&#41;</span>,HasDefects <span class="kw1">bit</span><span class="br0">&#41;</span>
&nbsp;
<span class="kw1">insert</span> #Cars <span class="kw1">values</span><span class="br0">&#40;</span><span class="nu0">1</span>,<span class="st0">'Chevy Corvette'</span>,<span class="nu0">1</span><span class="br0">&#41;</span>
<span class="kw1">insert</span> #Cars <span class="kw1">values</span><span class="br0">&#40;</span><span class="nu0">2</span>,<span class="st0">'Ford Taurus'</span>,<span class="nu0">0</span><span class="br0">&#41;</span>
<span class="kw1">insert</span> #Cars <span class="kw1">values</span><span class="br0">&#40;</span><span class="nu0">3</span>,<span class="st0">'Ford Taurus'</span>,<span class="nu0">1</span><span class="br0">&#41;</span>
<span class="kw1">insert</span> #Cars <span class="kw1">values</span><span class="br0">&#40;</span><span class="nu0">4</span>,<span class="st0">'BMW 635 CSi'</span>,<span class="nu0">0</span><span class="br0">&#41;</span>
<span class="kw1">insert</span> #Cars <span class="kw1">values</span><span class="br0">&#40;</span><span class="nu0">5</span>,<span class="st0">'BMW 635 CSi'</span>,<span class="nu0">0</span><span class="br0">&#41;</span>
<span class="kw1">insert</span> #Cars <span class="kw1">values</span><span class="br0">&#40;</span><span class="nu0">6</span>,<span class="st0">'Fiat 500'</span>,<span class="nu0">1</span><span class="br0">&#41;</span>
<span class="kw1">insert</span> #Cars <span class="kw1">values</span><span class="br0">&#40;</span><span class="nu0">7</span>,<span class="st0">'Fiat 500'</span>,<span class="nu0">1</span><span class="br0">&#41;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">create table #Cars(id int,brand varchar(20),HasDefects bit)

insert #Cars values(1,'Chevy Corvette',1)
insert #Cars values(2,'Ford Taurus',0)
insert #Cars values(3,'Ford Taurus',1)
insert #Cars values(4,'BMW 635 CSi',0)
insert #Cars values(5,'BMW 635 CSi',0)
insert #Cars values(6,'Fiat 500',1)
insert #Cars values(7,'Fiat 500',1)</pre></div></div>

<p>And here is our CASE WHEN THEN ELSE query</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
</pre></td><td class="de1"><pre class="de1"><span class="kw1">SELECT</span> brand,<span class="kw1">CASE</span> <span class="kw1">WHEN</span> <span class="kw2">SUM</span><span class="br0">&#40;</span><span class="kw1">convert</span><span class="br0">&#40;</span><span class="kw1">int</span>,HasDefects<span class="br0">&#41;</span><span class="br0">&#41;</span> <span class="sy0">&gt;</span> <span class="nu0">0</span> <span class="kw1">THEN</span> <span class="nu0">1</span> <span class="kw1">ELSE</span> <span class="nu0">0</span> <span class="kw1">END</span> <span class="kw1">AS</span> HasDefects
<span class="kw1">from</span> #Cars
<span class="kw1">group</span> <span class="kw1">by</span> brand</pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">SELECT brand,CASE WHEN SUM(convert(int,HasDefects)) &gt; 0 THEN 1 ELSE 0 END AS HasDefects
from #Cars
group by brand</pre></div></div>

<p>We need to convert HasDefects to an integer before using the sum function, otherwise you will get the following error</p>
<p><em>Server: Msg 409, Level 16, State 2, Line 1<br />
The sum or average aggregate operation cannot take a bit data type as an argument.</em></p>
<p>So how can we change that to use the sign function? It is very easy all you have to do is wrap the sign function around the sign function</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
</pre></td><td class="de1"><pre class="de1"><span class="kw1">select</span> brand, <span class="kw2">sign</span><span class="br0">&#40;</span><span class="kw2">sum</span><span class="br0">&#40;</span><span class="kw1">convert</span><span class="br0">&#40;</span><span class="kw1">int</span>,HasDefects<span class="br0">&#41;</span><span class="br0">&#41;</span><span class="br0">&#41;</span> <span class="kw1">as</span> HasDefects
<span class="kw1">from</span> #Cars
<span class="kw1">group</span> <span class="kw1">by</span> brand</pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">select brand, sign(sum(convert(int,HasDefects))) as HasDefects
from #Cars
group by brand</pre></div></div>

<p>Here is our output<br />
&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8211;</p>
<pre>brand	HasDefects
BMW 635 CSi	0
Chevy Corvette	1
Fiat 500	1
Ford Taurus	1</pre>
<p>As you can see that made the code smaller by about 20 bytes. This of course will only work if you want 0 and 1; if you want more posibilities then you need to use case. Another reason why you maybe don&#8217;t want to use the sign function is that someone looking at your code might not immediately know what the code is supposed to do.<br />
Remember you should always write code with the assumption that the person who will be maintaining your code is a psychopatic killer who has your address  <img src="https://s.w.org/images/core/emoji/2/72x72/1f609.png" alt="😉" class="wp-smiley" style="height: 1em; max-height: 1em;" /></p>
<p>How does the sign function work? </p>
<p>If the value is negative then -1 is returned<br />
If the value is positive then 1 is returned<br />
If the value is 0 then 0 is returned<br />
If the value is NULL then NULL is returned</p>
<p>Scale will affect the output also; if you use -22.0001 then  -1.0000 will be returned and if you use -22.01 then -1.00 will be returned<br />
Here is a query you can run to see what sign returns for different values</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
</pre></td><td class="de1"><pre class="de1"><span class="kw1">select</span> &nbsp;<span class="kw2">sign</span> <span class="br0">&#40;</span><span class="nu0">0</span><span class="br0">&#41;</span>, &nbsp;<span class="co1">-- 0</span>
&nbsp; &nbsp; <span class="kw2">sign</span> <span class="br0">&#40;</span><span class="nu0">1</span><span class="br0">&#41;</span>, &nbsp;<span class="co1">-- 1</span>
&nbsp; &nbsp; <span class="kw2">sign</span> <span class="br0">&#40;</span><span class="sy0">-</span><span class="nu0">1</span><span class="br0">&#41;</span>, <span class="co1">-- -1</span>
&nbsp; &nbsp; <span class="kw2">sign</span> <span class="br0">&#40;</span>null<span class="br0">&#41;</span>, <span class="co1">--null</span>
&nbsp; &nbsp; <span class="kw2">sign</span> <span class="br0">&#40;</span><span class="sy0">-</span><span class="nu0">200</span><span class="br0">&#41;</span>, <span class="co1">-- -1</span>
&nbsp; &nbsp; <span class="kw2">sign</span> <span class="br0">&#40;</span><span class="nu0">200</span><span class="br0">&#41;</span>, &nbsp;<span class="co1">-- 1</span>
&nbsp; &nbsp; <span class="kw2">sign</span> <span class="br0">&#40;</span><span class="sy0">-</span><span class="nu0">22.0001</span><span class="br0">&#41;</span>, <span class="co1">-- -1.0000</span>
&nbsp; &nbsp; <span class="kw2">sign</span> <span class="br0">&#40;</span><span class="nu0">22.0001</span><span class="br0">&#41;</span>, &nbsp;<span class="co1">-- 1.0000</span>
&nbsp; &nbsp; <span class="kw2">sign</span> <span class="br0">&#40;</span><span class="sy0">-</span><span class="nu0">22.01</span><span class="br0">&#41;</span>, <span class="co1">-- -1.00</span>
&nbsp; &nbsp; <span class="kw2">sign</span> <span class="br0">&#40;</span><span class="nu0">22.01</span><span class="br0">&#41;</span> &nbsp;<span class="co1">-- 1.00</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">select 	sign (0),  -- 0
	sign (1),  -- 1
	sign (-1), -- -1
	sign (null), --null
	sign (-200), -- -1
	sign (200),  -- 1
	sign (-22.0001), -- -1.0000
	sign (22.0001),  -- 1.0000
	sign (-22.01), -- -1.00
	sign (22.01)  -- 1.00</pre></div></div>

<p>On our wiki there is an article that shows you another 9 lesser know functions; these functions are</p>
<p>BINARY_CHECKSUM<br />
COLUMNPROPERTY<br />
DATALENGTH<br />
ASCII, CHAR,UNICODE<br />
NULLIF<br />
PARSENAME<br />
STUFF<br />
REVERSE<br />
GETUTCDATE</p>
<p>You can find that article here <a href="http://wiki.lessthandot.com/index.php/Ten_SQL_Server_Functions_That_You_Have_Ignored_Until_Now">Ten SQL Server Functions That You Have Ignored Until Now</a></p>
<p></p>
<p>*** <strong>If you have a SQL related question try our <a href="http://forum.lessthandot.com/viewforum.php?f=17">Microsoft SQL Server Programming</a> forum or our <a href="http://forum.lessthandot.com/viewforum.php?f=22">Microsoft SQL Server Admin</a> forum</strong><ins></ins></p>
]]></content:encoded>
			<wfw:commentRss>/index.php/datamgmt/datadesign/replace-your-case-when-then-else-syntax/feed/</wfw:commentRss>
		<slash:comments>1</slash:comments>
		</item>
		<item>
		<title>Listing All The User-Defined Data Types That Were Created On Your SQL Server</title>
		<link>/index.php/datamgmt/datadesign/listing-all-the-user-defined-data-types/</link>
		<comments>/index.php/datamgmt/datadesign/listing-all-the-user-defined-data-types/#respond</comments>
		<pubDate>Tue, 16 Jun 2009 15:25:14 +0000</pubDate>
		<dc:creator><![CDATA[SQLDenis]]></dc:creator>
				<category><![CDATA[Data Modelling and Design]]></category>
		<category><![CDATA[howto]]></category>
		<category><![CDATA[sql server 2000]]></category>
		<category><![CDATA[sql server 2005]]></category>
		<category><![CDATA[sql server 2008]]></category>

		<guid isPermaLink="false">/index.php/2009/06/listing-all-the-user-defined-data-types/</guid>
		<description><![CDATA[If you have a bunch of User-Defined Data Types in your databases and you would like to get a list of them then you can run the following query On SQL Server 2000 and up T-SQL1 2 select * from systypes where xusertype &#62; 256 select * from systypes where xusertype &#62; 256 or On [&#8230;]]]></description>
				<content:encoded><![CDATA[<p>If you have a bunch of User-Defined Data Types in your databases and you would like to get a list of them then you can run the following query</p>
<p>On SQL Server 2000 and up</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
</pre></td><td class="de1"><pre class="de1"><span class="kw1">select</span> <span class="sy0">*</span> <span class="kw1">from</span> systypes
<span class="kw1">where</span> xusertype <span class="sy0">&gt;</span> <span class="nu0">256</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">select * from systypes
where xusertype &gt; 256</pre></div></div>

<p>or</p>
<p>On SQL Server 2005 and up</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
</pre></td><td class="de1"><pre class="de1"><span class="kw1">SELECT</span> <span class="sy0">*</span> <span class="kw1">FROM</span> sys.<span class="me1">Types</span> 
<span class="kw1">WHERE</span> is_user_defined <span class="sy0">=</span> <span class="nu0">1</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">SELECT * FROM sys.Types 
WHERE is_user_defined = 1</pre></div></div>

<p>Let&#8217;s take a look how this works by adding a couple of User-Defined Data Types. we will add a birthday type which will be a datetime (on SQL Server 2008 it should be a date) and a StateCode which is a char(2)</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
</pre></td><td class="de1"><pre class="de1"><span class="kw1">USE</span> master
<span class="kw1">EXEC</span> <span class="kw3">sp_addtype</span> birthday, <span class="kw1">datetime</span>, <span class="st0">'NULL'</span>
Go
<span class="kw1">EXEC</span> <span class="kw3">sp_addtype</span> StateCode,<span class="st0">'Char(2)'</span> , <span class="st0">'NULL'</span>
Go</pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">USE master
EXEC sp_addtype birthday, datetime, 'NULL'
Go
EXEC sp_addtype StateCode,'Char(2)' , 'NULL'
Go</pre></div></div>

<p>Now we can create  a table which uses these two types</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
</pre></td><td class="de1"><pre class="de1"><span class="kw1">create</span> <span class="kw1">table</span> TestType <span class="br0">&#40;</span>Birthday birthday,<span class="kw1">State</span> StateCode<span class="br0">&#41;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">create table TestType (Birthday birthday,State StateCode)</pre></div></div>

<p>Insert some data</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
</pre></td><td class="de1"><pre class="de1"><span class="kw1">insert</span> TestType <span class="kw1">values</span><span class="br0">&#40;</span><span class="st0">'19100101'</span>,<span class="st0">'NY'</span><span class="br0">&#41;</span>
<span class="kw1">insert</span> TestType <span class="kw1">values</span><span class="br0">&#40;</span><span class="st0">'19800101'</span>,<span class="st0">'CA'</span><span class="br0">&#41;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">insert TestType values('19100101','NY')
insert TestType values('19800101','CA')</pre></div></div>

<p>And we can query the data as usual</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
</pre></td><td class="de1"><pre class="de1"><span class="kw1">select</span> <span class="sy0">*</span> <span class="kw1">from</span> TestType</pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">select * from TestType</pre></div></div>

<p>To see what data type is actually used to store the data we can run the following query</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
</pre></td><td class="de1"><pre class="de1"><span class="kw1">select</span> column_name,data_type,character_maximum_length
<span class="kw1">from</span> information_schema.<span class="me1">columns</span>
<span class="kw1">where</span> table_name <span class="sy0">=</span> <span class="st0">'TestType'</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">select column_name,data_type,character_maximum_length
from information_schema.columns
where table_name = 'TestType'</pre></div></div>

<p>output</p>
<pre>-----------------
column_name	data_type	character_maximum_length
Birthday	datetime	
State		char		2</pre>
<p></p>
<p>As you can see datetime and char(2) are used</p>
<p>We can also use the SysTypes (SQL Server 2000 and up) and Sys.Types system tables/catalog views</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
</pre></td><td class="de1"><pre class="de1"><span class="kw1">SELECT</span> s.<span class="me1">name</span>,s2.<span class="me1">name</span>,s2.<span class="me1">length</span>
&nbsp;<span class="kw1">FROM</span> SysTypes s
join SysTypes s2 <span class="kw1">on</span> s.<span class="me1">xtype</span> <span class="sy0">=</span> s2.<span class="me1">xtype</span>
<span class="kw1">WHERE</span> s.<span class="me1">xusertype</span> <span class="sy0">&gt;</span> <span class="nu0">256</span>
and s2.<span class="me1">xusertype</span> <span class="sy0">&lt;=</span> <span class="nu0">256</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">SELECT s.name,s2.name,s2.length
 FROM SysTypes s
join SysTypes s2 on s.xtype = s2.xtype
WHERE s.xusertype &gt; 256
and s2.xusertype &lt;= 256</pre></div></div>

<p>output</p>
<pre>----------------------
name		name		length
birthday	datetime	8
StateCode	char		8000</pre>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
</pre></td><td class="de1"><pre class="de1"><span class="kw1">SELECT</span> s.<span class="me1">name</span>,s2.<span class="me1">name</span>,s2.<span class="me1">max_length</span>
<span class="kw1">FROM</span> Sys.<span class="me1">Types</span> s
join Sys.<span class="me1">Types</span> s2 <span class="kw1">on</span> s2.<span class="me1">user_type_id</span> <span class="sy0">=</span> s.<span class="me1">system_type_id</span>
<span class="kw1">WHERE</span> s.<span class="me1">is_user_defined</span> <span class="sy0">=</span> <span class="nu0">1</span>
and s2.<span class="me1">is_user_defined</span> <span class="sy0">=</span> <span class="nu0">0</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">SELECT s.name,s2.name,s2.max_length
FROM Sys.Types s
join Sys.Types s2 on s2.user_type_id = s.system_type_id
WHERE s.is_user_defined = 1
and s2.is_user_defined = 0</pre></div></div>

<p>output</p>
<pre>----------------------
name		name		length
birthday	datetime	8
StateCode	char		8000</pre>
<p>How do you drop a User-Defined Data Type?<br />
Here is how you do it. Run the following query</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
</pre></td><td class="de1"><pre class="de1"><span class="kw1">USE</span> master
<span class="kw1">EXEC</span> <span class="kw3">sp_droptype</span> <span class="st0">'birthday'</span>
GO</pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">USE master
EXEC sp_droptype 'birthday'
GO</pre></div></div>

<p>As you can see you get the following error<br />
Server: Msg 15180, Level 16, State 1, Procedure sp_droptype, Line 32<br />
Cannot drop. The data type is being used.</p>
<p>So we first need to drop the table that is using this data type</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
</pre></td><td class="de1"><pre class="de1"><span class="kw1">drop</span> <span class="kw1">table</span> TestType</pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">drop table TestType</pre></div></div>

<p>Now we can try again</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
</pre></td><td class="de1"><pre class="de1"><span class="kw1">USE</span> master
<span class="kw1">EXEC</span> <span class="kw3">sp_droptype</span> <span class="st0">'StateCode'</span>
&nbsp;
&nbsp;
&nbsp;
<span class="kw1">USE</span> master
<span class="kw1">EXEC</span> <span class="kw3">sp_droptype</span> <span class="st0">'birthday'</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">USE master
EXEC sp_droptype 'StateCode'



USE master
EXEC sp_droptype 'birthday'</pre></div></div>

<p>And that drops the User-Defined Data Types we created</p>
<p></p>
<p>*** <strong>If you have a SQL related question try our <a href="http://forum.lessthandot.com/viewforum.php?f=17">Microsoft SQL Server Programming</a> forum or our <a href="http://forum.lessthandot.com/viewforum.php?f=22">Microsoft SQL Server Admin</a> forum</strong><ins></ins></p>
]]></content:encoded>
			<wfw:commentRss>/index.php/datamgmt/datadesign/listing-all-the-user-defined-data-types/feed/</wfw:commentRss>
		<slash:comments>0</slash:comments>
		</item>
		<item>
		<title>What is deferred name resolution and why do you need to care?</title>
		<link>/index.php/datamgmt/datadesign/what-is-deferred-name-resolution-and-why/</link>
		<comments>/index.php/datamgmt/datadesign/what-is-deferred-name-resolution-and-why/#comments</comments>
		<pubDate>Mon, 08 Sep 2008 12:23:59 +0000</pubDate>
		<dc:creator><![CDATA[SQLDenis]]></dc:creator>
				<category><![CDATA[Data Modelling and Design]]></category>
		<category><![CDATA[gotcha]]></category>
		<category><![CDATA[howto]]></category>
		<category><![CDATA[sql server]]></category>
		<category><![CDATA[t-sql]]></category>
		<category><![CDATA[tip]]></category>
		<category><![CDATA[trick]]></category>

		<guid isPermaLink="false">/index.php/2008/09/what-is-deferred-name-resolution-and-why/</guid>
		<description><![CDATA[So I posted a teaser in the puzzles forum. Without running this, try to guess what will happen? T-SQL1 2 3 4 5 6 7 8 9 10 11 12 13 14 DECLARE @x INT &#160; SET @x = 1 &#160; IF &#40;@x = 0&#41; BEGIN &#160; &#160; SELECT 1 AS VALUE INTO #temptable END [&#8230;]]]></description>
				<content:encoded><![CDATA[<p>So I posted <a href="http://forum.lessthandot.com/viewtopic.php?f=102&amp;t=2829">a teaser in the puzzles forum</a>. Without running this, try to guess what will happen?</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
</pre></td><td class="de1"><pre class="de1"><span class="kw1">DECLARE</span> @x <span class="kw1">INT</span>
&nbsp;
<span class="kw1">SET</span> @x <span class="sy0">=</span> <span class="nu0">1</span>
&nbsp;
<span class="kw1">IF</span> <span class="br0">&#40;</span>@x <span class="sy0">=</span> <span class="nu0">0</span><span class="br0">&#41;</span>
<span class="kw1">BEGIN</span>
&nbsp; &nbsp; <span class="kw1">SELECT</span> <span class="nu0">1</span> <span class="kw1">AS</span> <span class="kw1">VALUE</span> <span class="kw1">INTO</span> #temptable
<span class="kw1">END</span>
<span class="kw1">ELSE</span>
<span class="kw1">BEGIN</span>
&nbsp; &nbsp;<span class="kw1">SELECT</span> <span class="nu0">2</span> <span class="kw1">AS</span> <span class="kw1">VALUE</span> <span class="kw1">INTO</span> #temptable
<span class="kw1">END</span>
&nbsp;
<span class="kw1">SELECT</span> <span class="sy0">*</span> <span class="kw1">FROM</span> #temptable <span class="co1">--what does this return</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">DECLARE @x INT
 
SET @x = 1
 
IF (@x = 0)
BEGIN
    SELECT 1 AS VALUE INTO #temptable
END
ELSE
BEGIN
   SELECT 2 AS VALUE INTO #temptable
END
 
SELECT * FROM #temptable --what does this return</pre></div></div>

<p>This is the error you get<br />
Server: Msg 2714, Level 16, State 1, Line 12<br />
There is already an object named &#8216;#temptable&#8217; in the database.</p>
<p>You can do something like this to get around the issue with the temp table</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
</pre></td><td class="de1"><pre class="de1"><span class="kw1">DECLARE</span> @x <span class="kw1">INT</span>
&nbsp;
<span class="kw1">SET</span> @x <span class="sy0">=</span> <span class="nu0">1</span>
&nbsp;
<span class="kw1">CREATE</span> <span class="kw1">TABLE</span> #temptable <span class="br0">&#40;</span><span class="kw1">VALUE</span> <span class="kw1">int</span><span class="br0">&#41;</span>
<span class="kw1">IF</span> <span class="br0">&#40;</span>@x <span class="sy0">=</span> <span class="nu0">0</span><span class="br0">&#41;</span>
<span class="kw1">BEGIN</span>
&nbsp; &nbsp; <span class="kw1">INSERT</span> #temptable
&nbsp; &nbsp; <span class="kw1">SELECT</span> <span class="nu0">1</span> 
<span class="kw1">END</span>
<span class="kw1">ELSE</span>
<span class="kw1">BEGIN</span>
&nbsp; &nbsp; <span class="kw1">INSERT</span> #temptable
&nbsp; &nbsp; <span class="kw1">SELECT</span> <span class="nu0">2</span>
<span class="kw1">END</span>
&nbsp;
<span class="kw1">SELECT</span> <span class="sy0">*</span> <span class="kw1">FROM</span> #temptable <span class="co1">--what does this return</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">DECLARE @x INT
 
SET @x = 1
 
CREATE TABLE #temptable (VALUE int)
IF (@x = 0)
BEGIN
    INSERT #temptable
    SELECT 1 
END
ELSE
BEGIN
    INSERT #temptable
    SELECT 2
END
 
SELECT * FROM #temptable --what does this return</pre></div></div>

<p>So what is thing called Deferred Name Resolution? Here is what is explained in Books On Line</p>
<blockquote><p>When a stored procedure is created, the statements in the procedure are parsed for syntactical accuracy. If a syntactical error is encountered in the procedure definition, an error is returned and the stored procedure is not created. If the statements are syntactically correct, the text of the stored procedure is stored in the syscomments system table.</p>
<p>When a stored procedure is executed for the first time, the query processor reads the text of the stored procedure from the syscomments system table of the procedure and checks that the names of the objects used by the procedure are present. This process is called deferred name resolution because objects referenced by the stored procedure need not exist when the stored procedure is created, but only when it is executed.</p>
<p>In the resolution stage, Microsoft SQL Server 2000 also performs other validation activities (for example, checking the compatibility of a column data type with variables). If the objects referenced by the stored procedure are missing when the stored procedure is executed, the stored procedure stops executing when it gets to the statement that references the missing object. In this case, or if other errors are found in the resolution stage, an error is returned.</p></blockquote>
<p>So what is happening is that beginning with SQL server 7 deferred name resolution was enabled for real tables but not for temporary tables. If you change the code to use a real table instead of a temporary table you won&#8217;t have any problem<br />
Run this to see what I mean</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
</pre></td><td class="de1"><pre class="de1"><span class="kw1">DECLARE</span> @x <span class="kw1">INT</span>
&nbsp;
<span class="kw1">SET</span> @x <span class="sy0">=</span> <span class="nu0">1</span>
&nbsp;
<span class="kw1">IF</span> <span class="br0">&#40;</span>@x <span class="sy0">=</span> <span class="nu0">0</span><span class="br0">&#41;</span>
<span class="kw1">BEGIN</span>
&nbsp; &nbsp; <span class="kw1">SELECT</span> <span class="nu0">1</span> <span class="kw1">AS</span> <span class="kw1">VALUE</span> <span class="kw1">INTO</span> temptable
<span class="kw1">END</span>
<span class="kw1">ELSE</span>
<span class="kw1">BEGIN</span>
&nbsp; &nbsp;<span class="kw1">SELECT</span> <span class="nu0">2</span> <span class="kw1">AS</span> <span class="kw1">VALUE</span> <span class="kw1">INTO</span> temptable
<span class="kw1">END</span>
&nbsp;
<span class="kw1">SELECT</span> <span class="sy0">*</span> <span class="kw1">FROM</span> temptable <span class="co1">--what does this return</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">DECLARE @x INT
 
SET @x = 1
 
IF (@x = 0)
BEGIN
    SELECT 1 AS VALUE INTO temptable
END
ELSE
BEGIN
   SELECT 2 AS VALUE INTO temptable
END
 
SELECT * FROM temptable --what does this return</pre></div></div>

<p>What about variables? Let&#8217;s try it out, run this</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
</pre></td><td class="de1"><pre class="de1"><span class="kw1">DECLARE</span> @x <span class="kw1">INT</span>
&nbsp;
<span class="kw1">SET</span> @x <span class="sy0">=</span> <span class="nu0">1</span>
&nbsp;
<span class="kw1">IF</span> <span class="br0">&#40;</span>@x <span class="sy0">=</span> <span class="nu0">0</span><span class="br0">&#41;</span>
<span class="kw1">BEGIN</span>
&nbsp; &nbsp; <span class="kw1">DECLARE</span> @i <span class="kw1">INT</span>
&nbsp; &nbsp; <span class="kw1">SELECT</span> @i <span class="sy0">=</span> <span class="nu0">5</span>
<span class="kw1">END</span>
<span class="kw1">ELSE</span>
<span class="kw1">BEGIN</span>
&nbsp; &nbsp;<span class="kw1">DECLARE</span> @i <span class="kw1">INT</span>
&nbsp; &nbsp;<span class="kw1">SELECT</span> @i <span class="sy0">=</span> <span class="nu0">6</span>
<span class="kw1">END</span>
&nbsp;
<span class="kw1">SELECT</span> @i</pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">DECLARE @x INT
 
SET @x = 1
 
IF (@x = 0)
BEGIN
    DECLARE @i INT
    SELECT @i = 5
END
ELSE
BEGIN
   DECLARE @i INT
   SELECT @i = 6
END
 
SELECT @i</pre></div></div>

<p>And you get the follwing error<br />
Server: Msg 134, Level 15, State 1, Line 13<br />
The variable name &#8216;@i&#8217; has already been declared. Variable names must be unique within a query batch or stored procedure.</p>
<p>Now why do you need to care about deferred name resolution? Let&#8217;s take another example from a blogpost I made a while back: <a href="http://sqlblog.com/blogs/denis_gobo/archive/2008/05/06/6653.aspx">Do you depend on sp_depends (no pun intended)</a> </p>
<p>First create this proc</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
</pre></td><td class="de1"><pre class="de1"><span class="kw1">CREATE</span> <span class="kw1">PROC</span> SomeTestProc
<span class="kw1">AS</span>
<span class="kw1">SELECT</span> dbo.<span class="me1">somefuction</span><span class="br0">&#40;</span><span class="nu0">1</span><span class="br0">&#41;</span>
GO</pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">CREATE PROC SomeTestProc
AS
SELECT dbo.somefuction(1)
GO</pre></div></div>

<p>now create this function</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
</pre></td><td class="de1"><pre class="de1"><span class="kw1">CREATE</span> <span class="kw1">FUNCTION</span> somefuction<span class="br0">&#40;</span>@id <span class="kw1">int</span><span class="br0">&#41;</span>
<span class="kw1">RETURNS</span> <span class="kw1">int</span>
<span class="kw1">AS</span>
<span class="kw1">BEGIN</span>
<span class="kw1">SELECT</span> @id <span class="sy0">=</span> <span class="nu0">1</span>
<span class="kw1">RETURN</span> @id
<span class="kw1">END</span>
Go</pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">CREATE FUNCTION somefuction(@id int)
RETURNS int
AS
BEGIN
SELECT @id = 1
RETURN @id
END
Go</pre></div></div>

<p>now run this</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
</pre></td><td class="de1"><pre class="de1"><span class="kw3">sp_depends</span> <span class="st0">'somefuction'</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">sp_depends 'somefuction'</pre></div></div>

<p>result: Object does not reference any object, and no objects reference it.</p>
<p>Most people will not create a proc before they have created the function. So when does this behavior rear its ugly head? When you script out all the objects in a database, if the function or any objects referenced by an object are created after the object that references them then sp_depends won&#8217;t be 100% correct</p>
<p>SQL Server 2005 makes it pretty easy to do it yourself</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
</pre></td><td class="de1"><pre class="de1"><span class="kw1">SELECT</span> specific_name,<span class="sy0">*</span> 
<span class="kw1">FROM</span> information_schema.<span class="me1">routines</span> 
<span class="kw1">WHERE</span> object_definition<span class="br0">&#40;</span><span class="kw2">object_id</span><span class="br0">&#40;</span>specific_name<span class="br0">&#41;</span><span class="br0">&#41;</span> <span class="sy0">LIKE</span> <span class="st0">'%somefuction%'</span> 
<span class="sy0">AND</span> routine_type <span class="sy0">=</span> <span class="st0">'procedure'</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">SELECT specific_name,* 
FROM information_schema.routines 
WHERE object_definition(object_id(specific_name)) LIKE '%somefuction%' 
AND routine_type = 'procedure'</pre></div></div>

]]></content:encoded>
			<wfw:commentRss>/index.php/datamgmt/datadesign/what-is-deferred-name-resolution-and-why/feed/</wfw:commentRss>
		<slash:comments>4</slash:comments>
		</item>
	</channel>
</rss>
