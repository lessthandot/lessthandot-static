<?xml version="1.0" encoding="UTF-8"?><rss version="2.0"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:atom="http://www.w3.org/2005/Atom"
	xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
	xmlns:slash="http://purl.org/rss/1.0/modules/slash/"
	>

<channel>
	<title>database &#8211; LessthanDot</title>
	<atom:link href="/index.php/tag/database/feed/" rel="self" type="application/rss+xml" />
	<link>/</link>
	<description>A Technical Community for IT Professionals</description>
	<lastBuildDate>Sat, 09 Mar 2019 12:50:36 +0000</lastBuildDate>
	<language>en-US</language>
	<sy:updatePeriod>hourly</sy:updatePeriod>
	<sy:updateFrequency>1</sy:updateFrequency>
	<generator>https://wordpress.org/?v=4.6.1</generator>
	<item>
		<title>SQL Advent 2012 Day 4: Triggers, what to do, what not to do</title>
		<link>/index.php/datamgmt/dbprogramming/triggers-what-to-do-what/</link>
		<comments>/index.php/datamgmt/dbprogramming/triggers-what-to-do-what/#comments</comments>
		<pubDate>Tue, 04 Dec 2012 10:04:00 +0000</pubDate>
		<dc:creator><![CDATA[SQLDenis]]></dc:creator>
				<category><![CDATA[Business Intelligence]]></category>
		<category><![CDATA[Database Programming]]></category>
		<category><![CDATA[Microsoft SQL Server]]></category>
		<category><![CDATA[Microsoft SQL Server Admin]]></category>
		<category><![CDATA[database]]></category>
		<category><![CDATA[ddl triggers]]></category>
		<category><![CDATA[dml triggers]]></category>
		<category><![CDATA[rdbms]]></category>
		<category><![CDATA[sql]]></category>
		<category><![CDATA[sql server 2008]]></category>
		<category><![CDATA[sql server 2012]]></category>
		<category><![CDATA[t-sql]]></category>
		<category><![CDATA[triggers]]></category>

		<guid isPermaLink="false">/index.php/2012/12/triggers-what-to-do-what/</guid>
		<description><![CDATA[This is day four of the SQL Advent 2012 series of blog posts. Today we are going to look at triggers. Triggers are a great way to keep your database in a consistent state. There are two types of triggers, DML triggers and DLL triggers. DML triggers  res&#8230;]]></description>
				<content:encoded><![CDATA[<p>This is day four of the <a href="/index.php/DataMgmt/DBProgramming/sql-advent-2012-here-is">SQL Advent 2012 series</a> of blog posts. Today we are going to look at triggers. Triggers are a great way to keep your database in a consistent state. There are two types of triggers, DML triggers and DLL triggers. DML triggers  respond to Data Manipulation Statements (Insert, Delete, Update) DDL triggers respond to Data Definition Language events. </p>
<p>Some things that DML triggers are used for:</p>
<ul>
<li>Keeps your databases from having wrong data by doing checks that can&#8217;t be handled with constraints</li>
<li>Filling in values that are not supplied and can&#8217;t be handled through default constraints since these don&#8217;t fire on updates </li>
<li>Calculation summary values and updates the summary table with that value</li>
<li>Used as a mechanism to maintain an audit trail for DML statements</li>
</ul>
<p>Some things that DDL triggers are used for:</p>
<ul>
<li>Automatically add columns to a table if they were not added, for example LastUpdated and InsertedBy columns</li>
<li>Notify a DBA when a database has been created, dropped or altered</li>
<li>Used as a mechanism to maintain an audit trail for DDL statements, capture every time an object has been created, dropped or altered and by who</li>
</ul>
<p>Most common mistake people make when first starting writing triggers is that they write it in such a way that it will only work if you insert/update/delete one row at a time. A trigger fires per batch not per row, you have to take this into consideration otherwise your DML statements will blow up. How to do this is explained in this post <a href="/index.php/DataMgmt/DBProgramming/MSSQLServer/best-practice-coding-sql-server-triggers">Best Practice: Coding SQL Server triggers for multi-row operations</a>, there is no point recreating that post here.</p>
<p>Another problem that I see is that some people think a trigger is SQL Server&#8217;s version of crontab, you will see code that sends email, kicks off jobs, runs stored procedures. This is the wrong approach, a trigger should be lean and mean, it should execute as fast as possible, if you need to do some additional things then dump some data from the trigger into a processing table and then use that table to do your additional tasks. Don&#8217;t use triggers as a messaging system either, SQL Server comes with Service Broker, use that instead. Triggers might look like hammers to some people but I guarantee you not everything is a nail&#8230;.</p>
<p>You could end up with a real difficult thing to debug, one trigger that kicks off other triggers, now have fun debugging the trigger hell you got yourself into&#8230;.or worse debug this mess if you inherited this&#8230;.this is like the GOTO spaghetti code of databases.</p>
<p>Since triggers work besides the scenes you might spend hours debugging something only to find out that a trigger modified the value</p>
<p>One thing I always find interesting is when someone sees two <em>n rows affected</em> statements when they only did one insert, you know a person like that has not been exposed to triggers yet</p>
<p>Some people will say that you don&#8217;t need triggers for anything and that they do more harm than good, I myself don&#8217;t agree with that, triggers have a place but they should not be abused and overused, the same can be said of views</p>
<p>What is your opinion, are triggers needed or are they not needed?</p>
<p>That is all for day four of the <a href="/index.php/DataMgmt/DBProgramming/sql-advent-2012-here-is">SQL Advent 2012 series</a>, come back tomorrow for the next one, you can also check out all the posts from last year here: <a href="/index.php/DataMgmt/DataDesign/sql-advent-2011-recap">SQL Advent 2011 Recap</a></p>
]]></content:encoded>
			<wfw:commentRss>/index.php/datamgmt/dbprogramming/triggers-what-to-do-what/feed/</wfw:commentRss>
		<slash:comments>2</slash:comments>
		</item>
		<item>
		<title>SQL Advent 2012 Day 3: Sargable Queries</title>
		<link>/index.php/datamgmt/dbprogramming/sargable-queries/</link>
		<comments>/index.php/datamgmt/dbprogramming/sargable-queries/#comments</comments>
		<pubDate>Mon, 03 Dec 2012 13:44:00 +0000</pubDate>
		<dc:creator><![CDATA[SQLDenis]]></dc:creator>
				<category><![CDATA[Business Intelligence]]></category>
		<category><![CDATA[Database Programming]]></category>
		<category><![CDATA[Microsoft SQL Server]]></category>
		<category><![CDATA[Microsoft SQL Server Admin]]></category>
		<category><![CDATA[database]]></category>
		<category><![CDATA[indexing]]></category>
		<category><![CDATA[performance tuning]]></category>
		<category><![CDATA[rdbms]]></category>
		<category><![CDATA[sargable]]></category>
		<category><![CDATA[sql]]></category>
		<category><![CDATA[sql server 2008]]></category>
		<category><![CDATA[sql server 2012]]></category>
		<category><![CDATA[t-sql]]></category>

		<guid isPermaLink="false">/index.php/2012/12/sargable-queries/</guid>
		<description><![CDATA[This is day three of the SQL Advent 2012 series of blog posts. Today we are going to look at sargable queries. You might ask yourself, what is this weird term sargable. Sargable  comes from searchable argument, sometimes also referred as Search ARGument&#8230;]]></description>
				<content:encoded><![CDATA[<p>This is day three of the <a href="/index.php/DataMgmt/DBProgramming/sql-advent-2012-here-is">SQL Advent 2012 series</a> of blog posts. Today we are going to look at sargable queries. You might ask yourself, what is this weird term sargable. Sargable  comes from searchable argument, sometimes also referred as <span class="MT_red">S</span>earch <span class="MT_red">ARG</span>ument <span class="MT_red">ABLE</span>. What that means is that the query will be able to use an index, a seek will be performed instead of a scan. In general any time you have a function wrapped around a column, an index won&#8217;t be used</p>
<p>Some examples that are not sargable </p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
</pre></td><td class="de1"><pre class="de1"><span class="kw1">WHERE</span> <span class="kw1">LEFT</span><span class="br0">&#40;</span>Name,<span class="nu0">1</span><span class="br0">&#41;</span> <span class="sy0">=</span> <span class="st0">'S'</span>
<span class="kw1">WHERE</span> <span class="kw1">Year</span><span class="br0">&#40;</span>SomeDate<span class="br0">&#41;</span> <span class="sy0">=</span> <span class="nu0">2012</span>
<span class="kw1">WHERE</span> OrderID <span class="sy0">*</span> <span class="nu0">3</span> <span class="sy0">=</span> <span class="nu0">33000</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">WHERE LEFT(Name,1) = 'S'
WHERE Year(SomeDate) = 2012
WHERE OrderID * 3 = 33000</pre></div></div>

<p>Those three should be rewritten like this in order to become sargable </p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
</pre></td><td class="de1"><pre class="de1"><span class="kw1">WHERE</span> Name <span class="sy0">LIKE</span> <span class="st0">'S%'</span>
<span class="kw1">WHERE</span> SomeDate <span class="sy0">&gt;=</span> <span class="st0">'20120101'</span> <span class="sy0">AND</span> SomeDate <span class="sy0">&lt;</span> <span class="st0">'20130101'</span>
<span class="kw1">WHERE</span> OrderID <span class="sy0">=</span> <span class="nu0">33000</span><span class="sy0">/</span><span class="nu0">3</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">WHERE Name LIKE 'S%'
WHERE SomeDate &gt;= '20120101' AND SomeDate &lt; '20130101'
WHERE OrderID = 33000/3</pre></div></div>

<p>Let&#8217;s create a table, insert some data so that we can look at the execution plan<br />
Create this simple table</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
</pre></td><td class="de1"><pre class="de1"><span class="kw1">CREATE</span> <span class="kw1">TABLE</span> Test<span class="br0">&#40;</span>SomeID <span class="kw1">varchar</span><span class="br0">&#40;</span><span class="nu0">100</span><span class="br0">&#41;</span><span class="br0">&#41;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">CREATE TABLE Test(SomeID varchar(100))</pre></div></div>

<p>Let&#8217;s insert some data that will start with a letter followed by some digits</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
</pre></td><td class="de1"><pre class="de1"><span class="kw1">INSERT</span> Test
<span class="kw1">SELECT</span> <span class="kw1">LEFT</span><span class="br0">&#40;</span>v2.<span class="me1">type</span>,<span class="nu0">1</span><span class="br0">&#41;</span> <span class="sy0">+</span><span class="kw1">RIGHT</span><span class="br0">&#40;</span><span class="st0">'0000'</span> <span class="sy0">+</span> <span class="kw1">CONVERT</span><span class="br0">&#40;</span><span class="kw1">varchar</span><span class="br0">&#40;</span><span class="nu0">4</span><span class="br0">&#41;</span>,v1.<span class="me1">number</span><span class="br0">&#41;</span>,<span class="nu0">4</span><span class="br0">&#41;</span> 
<span class="kw1">FROM</span> master..<span class="me1">spt_values</span> v1
<span class="sy0">CROSS</span> <span class="sy0">JOIN</span> <span class="br0">&#40;</span><span class="kw1">SELECT</span> <span class="kw1">DISTINCT</span> <span class="kw1">LEFT</span><span class="br0">&#40;</span>type,<span class="nu0">1</span><span class="br0">&#41;</span> <span class="kw1">AS</span> type 
<span class="kw1">FROM</span> master..<span class="me1">spt_values</span><span class="br0">&#41;</span> v2
<span class="kw1">WHERE</span> v1.<span class="me1">type</span> <span class="sy0">=</span> <span class="st0">'p'</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">INSERT Test
SELECT LEFT(v2.type,1) +RIGHT('0000' + CONVERT(varchar(4),v1.number),4) 
FROM master..spt_values v1
CROSS JOIN (SELECT DISTINCT LEFT(type,1) AS type 
FROM master..spt_values) v2
WHERE v1.type = 'p'</pre></div></div>

<p>That insert should have generated 32768 rows</p>
<p>Now create this index on that table</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
</pre></td><td class="de1"><pre class="de1"><span class="kw1">CREATE</span> <span class="kw1">CLUSTERED</span> <span class="kw1">INDEX</span> cx_test <span class="kw1">ON</span> Test<span class="br0">&#40;</span>SomeID<span class="br0">&#41;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">CREATE CLUSTERED INDEX cx_test ON Test(SomeID)</pre></div></div>

<p>Let&#8217;s take a look at the execution plan, hit CTRL + M, this will add the execution plan once the query is done running</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
</pre></td><td class="de1"><pre class="de1"><span class="kw1">SELECT</span> <span class="sy0">*</span> <span class="kw1">FROM</span> Test
<span class="kw1">WHERE</span> SomeID <span class="sy0">LIKE</span> <span class="st0">'s%'</span>
&nbsp;
<span class="kw1">SELECT</span> <span class="sy0">*</span> <span class="kw1">FROM</span> Test
<span class="kw1">WHERE</span> <span class="kw1">LEFT</span><span class="br0">&#40;</span>SomeID,<span class="nu0">1</span><span class="br0">&#41;</span> <span class="sy0">=</span> <span class="st0">'s'</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">SELECT * FROM Test
WHERE SomeID LIKE 's%'

SELECT * FROM Test
WHERE LEFT(SomeID,1) = 's'</pre></div></div>

<p>Here is what the plans looks like</p>
<div class="image_block"><a href="/wp-content/uploads/blogs/DataMgmt/Denis/Excecutionplan.PNG?mtime=1354498760"><img alt="" src="/wp-content/uploads/blogs/DataMgmt/Denis/Excecutionplan.PNG?mtime=1354498760" width="447" height="295" /></a></div>
<p>As you can see it is 9% versus 91% between the two queries, that is a big difference<br />
Hit CTRL + M again to disable the inclusion of the plan</p>
<p>Run this codeblock, it will give you the plans in a text format</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
</pre></td><td class="de1"><pre class="de1"><span class="kw1">SET</span> SHOWPLAN_TEXT <span class="kw1">ON</span>
GO
&nbsp;
<span class="kw1">SELECT</span> <span class="sy0">*</span> <span class="kw1">FROM</span> Test
<span class="kw1">WHERE</span> SomeID <span class="sy0">LIKE</span> <span class="st0">'s%'</span>
&nbsp;
<span class="kw1">SELECT</span> <span class="sy0">*</span> <span class="kw1">FROM</span> Test
<span class="kw1">WHERE</span> <span class="kw1">LEFT</span><span class="br0">&#40;</span>SomeID,<span class="nu0">1</span><span class="br0">&#41;</span> <span class="sy0">=</span> <span class="st0">'s'</span>
GO
&nbsp;
<span class="kw1">SET</span> SHOWPLAN_TEXT <span class="kw1">OFF</span>
GO</pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">SET SHOWPLAN_TEXT ON
GO

SELECT * FROM Test
WHERE SomeID LIKE 's%'

SELECT * FROM Test
WHERE LEFT(SomeID,1) = 's'
GO

SET SHOWPLAN_TEXT OFF
GO</pre></div></div>

<p>Here are the two plans</p>
<blockquote><p>|&#8211;Clustered Index Seek(OBJECT:([master].[dbo].[Test].[cx_test]),<br />
  SEEK:([master].[dbo].[Test].[SomeID] >= &#8216;Rþ&#8217; AND [master].[dbo].[Test].[SomeID] < 'T'),  
  WHERE:([master].[dbo].[Test].[SomeID] like 's%') ORDERED FORWARD)

    |--Clustered Index Scan(OBJECT:([master].[dbo].[Test].[cx_test]), 
	WHERE:(substring([master].[dbo].[Test].[SomeID],(1),(1))='s'))
</p></blockquote>
<p>As you can see the top one while looking more complicated is actually giving you a seek</p>
<h2>Making a case sensitive search sargable</h2>
<p>Now let&#8217;s take a look at how we can make a case sensitive search sargable as well<br />
In order to do a search and make it case sensitive, you have to have a case sensitive collation, if your table is not created with a case sensitive collation then you can supply it as part of the query</p>
<p>Here is an example to demonstrate what I mean</p>
<p>This is a simple table created without a collation</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
</pre></td><td class="de1"><pre class="de1"><span class="kw1">CREATE</span> <span class="kw1">TABLE</span> TempCase1 <span class="br0">&#40;</span>Val <span class="kw1">CHAR</span><span class="br0">&#40;</span><span class="nu0">1</span><span class="br0">&#41;</span><span class="br0">&#41;</span>
<span class="kw1">INSERT</span> TempCase1 <span class="kw1">VALUES</span><span class="br0">&#40;</span><span class="st0">'A'</span><span class="br0">&#41;</span>
<span class="kw1">INSERT</span> TempCase1 <span class="kw1">VALUES</span><span class="br0">&#40;</span><span class="st0">'a'</span><span class="br0">&#41;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">CREATE TABLE TempCase1 (Val CHAR(1))
INSERT TempCase1 VALUES('A')
INSERT TempCase1 VALUES('a')</pre></div></div>

<p>Running this select statement will return both rows </p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
</pre></td><td class="de1"><pre class="de1"><span class="kw1">SELECT</span> <span class="sy0">*</span> <span class="kw1">FROM</span> TempCase1
<span class="kw1">WHERE</span> Val <span class="sy0">=</span> <span class="st0">'A'</span> </pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">SELECT * FROM TempCase1
WHERE Val = 'A' </pre></div></div>

<p>Val<br />
&#8212;&#8211;<br />
A<br />
a</p>
<p>Now create the same kind of table but with a case sensitive collation</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
</pre></td><td class="de1"><pre class="de1"><span class="kw1">CREATE</span> <span class="kw1">TABLE</span> TempCase2 <span class="br0">&#40;</span>Val <span class="kw1">CHAR</span><span class="br0">&#40;</span><span class="nu0">1</span><span class="br0">&#41;</span> <span class="kw1">COLLATE</span> SQL_Latin1_General_CP1_CS_AS<span class="br0">&#41;</span>
<span class="kw1">INSERT</span> TempCase2 <span class="kw1">VALUES</span><span class="br0">&#40;</span><span class="st0">'A'</span><span class="br0">&#41;</span>
<span class="kw1">INSERT</span> TempCase2 <span class="kw1">VALUES</span><span class="br0">&#40;</span><span class="st0">'a'</span><span class="br0">&#41;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">CREATE TABLE TempCase2 (Val CHAR(1) COLLATE SQL_Latin1_General_CP1_CS_AS)
INSERT TempCase2 VALUES('A')
INSERT TempCase2 VALUES('a')</pre></div></div>

<p>Run the same query</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
</pre></td><td class="de1"><pre class="de1"><span class="kw1">SELECT</span> <span class="sy0">*</span> <span class="kw1">FROM</span> TempCase2
<span class="kw1">WHERE</span> Val <span class="sy0">=</span> <span class="st0">'A'</span> </pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">SELECT * FROM TempCase2
WHERE Val = 'A' </pre></div></div>

<p>Val<br />
&#8212;&#8211;<br />
A</p>
<p>As you can see you only get the one row now that matches the case</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
</pre></td><td class="de1"><pre class="de1"><span class="kw1">SELECT</span> <span class="sy0">*</span> <span class="kw1">FROM</span> TempCase1
<span class="kw1">WHERE</span> Val <span class="sy0">=</span> <span class="st0">'A'</span> <span class="kw1">COLLATE</span> SQL_Latin1_General_CP1_CS_AS</pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">SELECT * FROM TempCase1
WHERE Val = 'A' COLLATE SQL_Latin1_General_CP1_CS_AS</pre></div></div>

<p>Val<br />
&#8212;&#8211;<br />
A<br />
a</p>
<p>Now let&#8217;s take a look at how we can make the case sensitive search sargable</p>
<p>First create this table and insert some data</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
</pre></td><td class="de1"><pre class="de1"><span class="kw1">CREATE</span> <span class="kw1">TABLE</span> TempCase <span class="br0">&#40;</span>Val <span class="kw1">CHAR</span><span class="br0">&#40;</span><span class="nu0">1</span><span class="br0">&#41;</span><span class="br0">&#41;</span>
&nbsp;
<span class="kw1">INSERT</span> TempCase <span class="kw1">VALUES</span><span class="br0">&#40;</span><span class="st0">'A'</span><span class="br0">&#41;</span>
<span class="kw1">INSERT</span> TempCase <span class="kw1">VALUES</span><span class="br0">&#40;</span><span class="st0">'B'</span><span class="br0">&#41;</span>
<span class="kw1">INSERT</span> TempCase <span class="kw1">VALUES</span><span class="br0">&#40;</span><span class="st0">'C'</span><span class="br0">&#41;</span>
<span class="kw1">INSERT</span> TempCase <span class="kw1">VALUES</span><span class="br0">&#40;</span><span class="st0">'D'</span><span class="br0">&#41;</span>
<span class="kw1">INSERT</span> TempCase <span class="kw1">VALUES</span><span class="br0">&#40;</span><span class="st0">'E'</span><span class="br0">&#41;</span>
<span class="kw1">INSERT</span> TempCase <span class="kw1">VALUES</span><span class="br0">&#40;</span><span class="st0">'F'</span><span class="br0">&#41;</span>
<span class="kw1">INSERT</span> TempCase <span class="kw1">VALUES</span><span class="br0">&#40;</span><span class="st0">'G'</span><span class="br0">&#41;</span>
<span class="kw1">INSERT</span> TempCase <span class="kw1">VALUES</span><span class="br0">&#40;</span><span class="st0">'H'</span><span class="br0">&#41;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">CREATE TABLE TempCase (Val CHAR(1))
 
INSERT TempCase VALUES('A')
INSERT TempCase VALUES('B')
INSERT TempCase VALUES('C')
INSERT TempCase VALUES('D')
INSERT TempCase VALUES('E')
INSERT TempCase VALUES('F')
INSERT TempCase VALUES('G')
INSERT TempCase VALUES('H')</pre></div></div>

<p>Now we will insert some lowercase characters</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
</pre></td><td class="de1"><pre class="de1"><span class="kw1">INSERT</span> TempCase
<span class="kw1">SELECT</span> <span class="kw2">LOWER</span><span class="br0">&#40;</span>Val<span class="br0">&#41;</span> <span class="kw1">FROM</span> TempCase</pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">INSERT TempCase
SELECT LOWER(Val) FROM TempCase</pre></div></div>

<p>Now we will create our real table which will have 65536 rows</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
</pre></td><td class="de1"><pre class="de1"><span class="kw1">CREATE</span> <span class="kw1">TABLE</span> CaseSensitiveSearch <span class="br0">&#40;</span>Val <span class="kw1">VARCHAR</span><span class="br0">&#40;</span><span class="nu0">50</span><span class="br0">&#41;</span><span class="br0">&#41;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">CREATE TABLE CaseSensitiveSearch (Val VARCHAR(50))</pre></div></div>

<p>We will do a couple of cross joins to generate the data for our queries</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
</pre></td><td class="de1"><pre class="de1"><span class="kw1">INSERT</span> CaseSensitiveSearch
<span class="kw1">SELECT</span> t1.<span class="me1">val</span> <span class="sy0">+</span> t2.<span class="me1">val</span> <span class="sy0">+</span> t3.<span class="me1">val</span> <span class="sy0">+</span> t4.<span class="me1">val</span>
<span class="kw1">FROM</span> TempCase t1
<span class="sy0">CROSS</span> <span class="sy0">JOIN</span> TempCase t2
<span class="sy0">CROSS</span> <span class="sy0">JOIN</span> TempCase t3
<span class="sy0">CROSS</span> <span class="sy0">JOIN</span> TempCase t4</pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">INSERT CaseSensitiveSearch
SELECT t1.val + t2.val + t3.val + t4.val
FROM TempCase t1
CROSS JOIN TempCase t2
CROSS JOIN TempCase t3
CROSS JOIN TempCase t4</pre></div></div>

<p>Create an index on the table</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
</pre></td><td class="de1"><pre class="de1"><span class="kw1">CREATE</span> <span class="kw1">INDEX</span> IX_SearchVal <span class="kw1">ON</span> CaseSensitiveSearch<span class="br0">&#40;</span>Val<span class="br0">&#41;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">CREATE INDEX IX_SearchVal ON CaseSensitiveSearch(Val)</pre></div></div>

<p>Just like before, if we run this we will get back the exact value we passed in and also all the upper case and lower case variations</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
</pre></td><td class="de1"><pre class="de1"><span class="kw1">SELECT</span> <span class="sy0">*</span> <span class="kw1">FROM</span> CaseSensitiveSearch
<span class="kw1">WHERE</span> Val <span class="sy0">=</span> <span class="st0">'ABCD'</span> </pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">SELECT * FROM CaseSensitiveSearch
WHERE Val = 'ABCD' </pre></div></div>

<p>Here are the results of that query<br />
Val<br />
&#8212;&#8211;<br />
AbCd<br />
ABcd<br />
Abcd<br />
ABCd<br />
aBCd<br />
abCd<br />
aBcd<br />
abcd<br />
abCD<br />
aBcD<br />
abcD<br />
aBCD<br />
ABCD<br />
AbCD<br />
ABcD<br />
AbcD</p>
<p>If you add the collation to the query, you will get only what matches your value</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
</pre></td><td class="de1"><pre class="de1"><span class="kw1">SELECT</span> <span class="sy0">*</span> <span class="kw1">FROM</span> CaseSensitiveSearch
<span class="kw1">WHERE</span> Val <span class="sy0">=</span> <span class="st0">'ABCD'</span> <span class="kw1">COLLATE</span> SQL_Latin1_General_CP1_CS_AS</pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">SELECT * FROM CaseSensitiveSearch
WHERE Val = 'ABCD' COLLATE SQL_Latin1_General_CP1_CS_AS</pre></div></div>

<p>Here is the result, it maches what was passed in<br />
Val<br />
&#8212;<br />
ABCD</p>
<p>The problem with the query above is that it will cause a scan. So what can we do, how can we make it perform better?  It is simple combine the two queries<br />
First grab all case sensitive and case insensitive values and then after that filter out the case insensitive values</p>
<p>Here is what that query will look like</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
</pre></td><td class="de1"><pre class="de1"><span class="kw1">SELECT</span> <span class="sy0">*</span> <span class="kw1">FROM</span> CaseSensitiveSearch
<span class="kw1">WHERE</span> Val <span class="sy0">=</span> <span class="st0">'ABCD'</span> <span class="kw1">COLLATE</span> SQL_Latin1_General_CP1_CS_AS
<span class="sy0">AND</span> Val <span class="sy0">LIKE</span> <span class="st0">'ABCD'</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">SELECT * FROM CaseSensitiveSearch
WHERE Val = 'ABCD' COLLATE SQL_Latin1_General_CP1_CS_AS
AND Val LIKE 'ABCD'</pre></div></div>

<p>AND Val LIKE &#8216;ABCD&#8217; will result in a seek, now when it also does the Val = &#8216;ABCD&#8217; COLLATE SQL_Latin1_General_CP1_CS_AS part, it only returns the row that matches your value</p>
<p>If you run both queries, you can look at the plan difference (hit CTRL + M so that the plan is included)</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
</pre></td><td class="de1"><pre class="de1"><span class="kw1">SELECT</span> <span class="sy0">*</span> <span class="kw1">FROM</span> CaseSensitiveSearch
<span class="kw1">WHERE</span> Val <span class="sy0">=</span> <span class="st0">'ABCD'</span> <span class="kw1">COLLATE</span> SQL_Latin1_General_CP1_CS_AS
&nbsp;
&nbsp;
&nbsp;
<span class="kw1">SELECT</span> <span class="sy0">*</span> <span class="kw1">FROM</span> CaseSensitiveSearch
<span class="kw1">WHERE</span> Val <span class="sy0">=</span> <span class="st0">'ABCD'</span> <span class="kw1">COLLATE</span> SQL_Latin1_General_CP1_CS_AS
<span class="sy0">AND</span> Val <span class="sy0">LIKE</span> <span class="st0">'ABCD'</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">SELECT * FROM CaseSensitiveSearch
WHERE Val = 'ABCD' COLLATE SQL_Latin1_General_CP1_CS_AS



SELECT * FROM CaseSensitiveSearch
WHERE Val = 'ABCD' COLLATE SQL_Latin1_General_CP1_CS_AS
AND Val LIKE 'ABCD'</pre></div></div>

<p>Here is the plan</p>
<div class="image_block"><a href="/wp-content/uploads/blogs/DataMgmt/Denis/ExcecutionPlan2008.PNG?mtime=1354548699"><img alt="" src="/wp-content/uploads/blogs/DataMgmt/Denis/ExcecutionPlan2008.PNG?mtime=1354548699" width="903" height="364" /></a></div>
<p>As you can see, there is a big difference between the two</p>
<p>Here is the plan in text as well</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
</pre></td><td class="de1"><pre class="de1"><span class="kw1">SET</span> SHOWPLAN_TEXT <span class="kw1">ON</span>
GO
&nbsp;
<span class="kw1">SELECT</span> <span class="sy0">*</span> <span class="kw1">FROM</span> CaseSensitiveSearch
<span class="kw1">WHERE</span> Val <span class="sy0">=</span> <span class="st0">'ABCD'</span> <span class="kw1">COLLATE</span> SQL_Latin1_General_CP1_CS_AS
&nbsp;
&nbsp;
&nbsp;
<span class="kw1">SELECT</span> <span class="sy0">*</span> <span class="kw1">FROM</span> CaseSensitiveSearch
<span class="kw1">WHERE</span> Val <span class="sy0">=</span> <span class="st0">'ABCD'</span> <span class="kw1">COLLATE</span> SQL_Latin1_General_CP1_CS_AS
<span class="sy0">AND</span> Val <span class="sy0">LIKE</span> <span class="st0">'ABCD'</span>
&nbsp;
GO
&nbsp;
<span class="kw1">SET</span> SHOWPLAN_TEXT <span class="kw1">OFF</span>
GO</pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">SET SHOWPLAN_TEXT ON
GO
 
SELECT * FROM CaseSensitiveSearch
WHERE Val = 'ABCD' COLLATE SQL_Latin1_General_CP1_CS_AS



SELECT * FROM CaseSensitiveSearch
WHERE Val = 'ABCD' COLLATE SQL_Latin1_General_CP1_CS_AS
AND Val LIKE 'ABCD'

GO
 
SET SHOWPLAN_TEXT OFF
GO</pre></div></div>

<blockquote><p>  |&#8211;Table Scan(OBJECT:([tempdb].[dbo].[CaseSensitiveSearch]),<br />
   WHERE:(CONVERT_IMPLICIT(varchar(50),[tempdb].[dbo].[CaseSensitiveSearch].[Val],0)=CONVERT(varchar(8000),[@1],0)))</p>
<p>    |&#8211;Index Seek(OBJECT:([tempdb].[dbo].[CaseSensitiveSearch].[IX_SearchVal]), SEEK:([tempdb].[dbo].[CaseSensitiveSearch].[Val] >= &#8216;ABCD&#8217;<br />
     AND [tempdb].[dbo].[CaseSensitiveSearch].[Val] <= 'ABCD'), 
      WHERE:(CONVERT_IMPLICIT(varchar(50),[tempdb].[dbo].[CaseSensitiveSearch].[Val],0)='ABCD' AND [tempdb].[dbo].[CaseSensitiveSearch].[Val] like 'ABCD') ORDERED FORWARD)</p></blockquote>
<p>Also take a look at <a href="/index.php/DataMgmt/DataDesign/only-in-a-database-can-you-get-1000-impr">Only In A Database Can You Get 1000% + Improvement By Changing A Few Lines Of Code</a> to see how this works with dates</p>
<p>That is all for day three of the SQL Advent 2012 series, come back tomorrow for the next one, you can also check out all the posts from last year here: <a href="/index.php/DataMgmt/DataDesign/sql-advent-2011-recap">SQL Advent 2011 Recap</a></p>
]]></content:encoded>
			<wfw:commentRss>/index.php/datamgmt/dbprogramming/sargable-queries/feed/</wfw:commentRss>
		<slash:comments>2</slash:comments>
		</item>
		<item>
		<title>SQL Advent 2012, here is what is coming</title>
		<link>/index.php/datamgmt/dbprogramming/sql-advent-2012-here-is/</link>
		<comments>/index.php/datamgmt/dbprogramming/sql-advent-2012-here-is/#comments</comments>
		<pubDate>Sun, 25 Nov 2012 22:40:00 +0000</pubDate>
		<dc:creator><![CDATA[SQLDenis]]></dc:creator>
				<category><![CDATA[Business Intelligence]]></category>
		<category><![CDATA[Database Administration]]></category>
		<category><![CDATA[Database Programming]]></category>
		<category><![CDATA[Microsoft SQL Server]]></category>
		<category><![CDATA[database]]></category>
		<category><![CDATA[design]]></category>
		<category><![CDATA[how to]]></category>
		<category><![CDATA[sql server 2000]]></category>
		<category><![CDATA[sql server 2005]]></category>
		<category><![CDATA[sql server 2008]]></category>
		<category><![CDATA[sql server 2012]]></category>
		<category><![CDATA[tables]]></category>

		<guid isPermaLink="false">/index.php/2012/11/sql-advent-2012-here-is/</guid>
		<description><![CDATA[I decided to do a SQL Advent series of posts this year as well, this year I will focus on best practices. In case you are interested in last year's posts, all of them are listed here: SQL Advent 2011 Recap

Here is what the preliminary 25 posts will l&#8230;]]></description>
				<content:encoded><![CDATA[<p>I decided to do a SQL Advent series of posts this year as well, this year I will focus on best practices. In case you are interested in last year&#8217;s posts, all of them are listed here: <a href="/index.php/DataMgmt/DataDesign/sql-advent-2011-recap">SQL Advent 2011 Recap</a></p>
<p>Here is what the 25 posts will look like, the order that the posts are listed is not the same that they will be posted, I will randomly pick and choose</p>
<p>1 <a href="/index.php/DataMgmt/DBProgramming/data-types">Data types storage differences</a><br />
2 <a href="/index.php/DataMgmt/DBProgramming/sargable-queries">Sargable queries</a><br />
3 Recap<br />
4 <a href="/index.php/DataMgmt/DBProgramming/triggers-what-to-do-what">Triggers, what to do, what not to do</a><br />
5 <a href="/index.php/DataMgmt/DBAdmin/MSSQLServerAdmin/sizing-database-files">Sizing Files</a><br />
6 <a href="/index.php/DataMgmt/DBAdmin/MSSQLServerAdmin/benefits-of-indexes">Benefits of Indexes</a><br />
7 <a href="/index.php/DataMgmt/DBProgramming/MSSQLServer/foreign-keys">Foreign Keys</a><br />
8 <a href="/index.php/DataMgmt/DBProgramming/standardized-naming-and-other-conventions">Standardized naming conventions</a><br />
9 <a href="/index.php/DataMgmt/DBAdmin/MSSQLServerAdmin/do-not-trust-the-ssms">Don’t trust the designers</a><br />
10 <a href="/index.php/DataMgmt/DBAdmin/MSSQLServerAdmin/lack-of-constraints">Lack of constraints</a><br />
11 <a href="/index.php/DataMgmt/business-intelligence-1/when-to-say-no">When to say no</a><br />
12 <a href="/index.php/DataMgmt/DBAdmin/MSSQLServerAdmin/features-enabled-that-are-not">Features enabled that are not used</a><br />
13 <a href="/index.php/DataMgmt/business-intelligence-1/sql-server-maintenance">Maintenance</a><br />
14 <a href="/index.php/DataMgmt/DBAdmin/MSSQLServerAdmin/proactive-notifications">Proactive notifications</a><br />
15 <a href="/index.php/DataMgmt/DBProgramming/MSSQLServer/sql-advent-2012-day-10">Reinventing the wheel</a><br />
16 <a href="/index.php/DataMgmt/DBProgramming/MSSQLServer/cursors-and-loops">Loops and cursors</a><br />
17 <a href="/index.php/DataMgmt/DataDesign/lack-of-database-design-and">Lack of database design and normalization</a><br />
18 <a href="/index.php/DataMgmt/business-intelligence-1/use-the-new-features">Use the new features</a><br />
19 <a href="/index.php/DataMgmt/DBAdmin/MSSQLServerAdmin/stay-relevant-and-marketable">Stay relevant and marketable</a><br />
20 <a href="/index.php/DataMgmt/business-intelligence-1/get-the-tools-you-need">Get the tools you need to be more productive</a><br />
21 <a href="/index.php/DataMgmt/DBProgramming/MSSQLServer/getting-help">How to get help</a><br />
22 <a href="/index.php/DataMgmt/business-intelligence-1/testing-your-backup-and-failoverhttp:///index.php/DataMgmt/business-intelligence-1/testing-your-backup-and-failover">Testing a backup strategy</a><br />
23 <a href="/index.php/DataMgmt/business-intelligence-1/no-matter-how-long-you">No matter how long you are on the wrong path, go back</a><br />
24 <a href="/index.php/DataMgmt/DBAdmin/MSSQLServerAdmin/with-vldbs-it-matters-what">With VLDBs it matters what you do and how you do it</a><br />
25 <a href="/index.php/DataMgmt/DBProgramming/how-to-improve-your-tech">How to improve your tech skills</a></p>
<p>Let me know if that list seems fine or if you would like to see something else, also let me know in which topic you have absolutely no interest in</p>
]]></content:encoded>
			<wfw:commentRss>/index.php/datamgmt/dbprogramming/sql-advent-2012-here-is/feed/</wfw:commentRss>
		<slash:comments>4</slash:comments>
		</item>
		<item>
		<title>Downloading SQL Server Sample Databases much improved with new CodePlex changes</title>
		<link>/index.php/datamgmt/datadesign/downloading-sql-server-sample-databases/</link>
		<comments>/index.php/datamgmt/datadesign/downloading-sql-server-sample-databases/#comments</comments>
		<pubDate>Tue, 03 Apr 2012 23:35:00 +0000</pubDate>
		<dc:creator><![CDATA[SQLDenis]]></dc:creator>
				<category><![CDATA[Data Modelling and Design]]></category>
		<category><![CDATA[Database Programming]]></category>
		<category><![CDATA[Microsoft SQL Server Admin]]></category>
		<category><![CDATA[database]]></category>
		<category><![CDATA[samples]]></category>
		<category><![CDATA[sql server 2005]]></category>
		<category><![CDATA[sql server 2008]]></category>
		<category><![CDATA[sql server 2012]]></category>

		<guid isPermaLink="false">/index.php/2012/04/downloading-sql-server-sample-databases/</guid>
		<description><![CDATA[Today Microsoft has improved the experience of downloading the sample databases for SQL server. As you can see from the image above, you can now quickly see all the different versions and all you have to do is click on the database that you are interest&#8230;]]></description>
				<content:encoded><![CDATA[<div class="image_block"><a href="/wp-content/uploads/blogs/DataMgmt/Denis/DownloadDB.PNG?mtime=1333503077"><img alt="" src="/wp-content/uploads/blogs/DataMgmt/Denis/DownloadDB.PNG?mtime=1333503077" width="555" height="286" /></a></div>
<p>Today Microsoft has improved the experience of downloading the sample databases for SQL server. As you can see from the image above, you can now quickly see all the different versions and all you have to do is click on the database that you are interested in. Gone are the days that you would have to search for the correct version, this is much improved..big thanks to Microsoft for this</p>
<p>You can find the page here: http://msftdbprodsamples.codeplex.com/</p>
]]></content:encoded>
			<wfw:commentRss>/index.php/datamgmt/datadesign/downloading-sql-server-sample-databases/feed/</wfw:commentRss>
		<slash:comments>2</slash:comments>
		</item>
		<item>
		<title>SQL Advent 2011 Recap</title>
		<link>/index.php/datamgmt/datadesign/sql-advent-2011-recap/</link>
		<comments>/index.php/datamgmt/datadesign/sql-advent-2011-recap/#respond</comments>
		<pubDate>Sun, 25 Dec 2011 10:22:00 +0000</pubDate>
		<dc:creator><![CDATA[SQLDenis]]></dc:creator>
				<category><![CDATA[Data Modelling and Design]]></category>
		<category><![CDATA[database]]></category>
		<category><![CDATA[design]]></category>
		<category><![CDATA[how to]]></category>
		<category><![CDATA[sql server 2000]]></category>
		<category><![CDATA[sql server 2005]]></category>
		<category><![CDATA[sql server 2008]]></category>
		<category><![CDATA[tables]]></category>

		<guid isPermaLink="false">/index.php/2011/12/sql-advent-2011-recap/</guid>
		<description><![CDATA[Here is a recap of all the 24 SQL Advent 2011 posts
Day 1: Date and time
In this post I covered the new date, datetime2 and time datatypes
  
Day 2: System tables and catalog views
In this post we took a look what the replacements are for the all s&#8230;]]></description>
				<content:encoded><![CDATA[<p>SQL Advent 2011 has come to an end. I had lots of fun writing these but I wished I started earlier instead of 2 days before December 1, on some days I was really racing against the clock and I feel like I made some posts much shorter than I had in mind initially. But it is what it is, I hope you enjoyed them, maybe I will do this again next year.</p>
<p>Here is a recap of all the 24 SQL Advent 2011 posts.</p>
<p>Day 1: <a href="/index.php/DataMgmt/DBProgramming/MSSQLServer/sql-advent-2011-day-1">Date and time</a><br />
In this post I covered the new date, datetime2 and time datatypes</p>
<p>Day 2: <a href="/index.php/DataMgmt/DBAdmin/MSSQLServerAdmin/sql-advent-2011-day-2">System tables and catalog views</a><br />
In this post we took a look what the replacements are for the all system tables and also gave you a table with the new catalog view/compatibility view equivalent of the old system table</p>
<p>Day 3: <a href="/index.php/DataMgmt/DataDesign/sql-advent-2011-day-3">Partitioning</a><br />
In this post I looked at partitioning in pre sql 2005 days by showing you how to create partitioned views. I also showed you how to user partitioned function in sql 2005 and up</p>
<p>Day 4: <a href="/index.php/DataMgmt/DBProgramming/MSSQLServer/sql-advent-2011-day-4">Schemas</a><br />
In this post I show you what schemas are and how they can help with security and logical grouping of objects</p>
<p>Day 5: <a href="/index.php/DataMgmt/DBProgramming/MSSQLServer/sql-advent-2011-day-5">Common Table Expressions</a><br />
The Common Table Expressions post showed you what Common Table Expressions are and how they can be used to simplify your code</p>
<p>Day 6: <a href="/index.php/DataMgmt/DataDesign/sql-advent-2011-day-6">Windowing functions</a><br />
The Windowing functions post showed you how to do different kinds of rankings</p>
<p>Day 7: <a href="/index.php/DataMgmt/DataDesign/sql-advent-2011-day-7">Crosstab with PIVOT</a><br />
This post was all about pivoting/transposing/crosstabbing data with the PIVOT operator, also was shown how to do it dynamically</p>
<p>Day 8: <a href="/index.php/DataMgmt/DataDesign/sql-advent-2011-day-8">UNPIVOT</a><br />
This post showed you how to use UNPIVOT to get the reversed effect of PIVOT</p>
<p>Day 9: <a href="/index.php/DataMgmt/DataDesign/sql-advent-2011-day-9">Dynamic TOP</a><br />
The dynamic TOP post showed you how to do dynamic TOP without dynamic SQL or SET ROWCOUNT</p>
<p>Day 10: <a href="/index.php/DataMgmt/DBProgramming/MSSQLServer/sql-advent-2011-day-10">Upsert by using the Merge statement</a><br />
This post was all about how to use MERGE to do an UPSERT (Update if it exists otherwise insert)</p>
<p>Day 11: <a href="/index.php/DataMgmt/DataDesign/sql-advent-2011-day-11">DML statements with the OUTPUT clause</a><br />
This post showed the usefulness of the OUTPUT clause</p>
<p>Day 12: <a href="/index.php/DataMgmt/DBProgramming/MSSQLServer/sql-advent-2011-day-12">Table Value Constructor</a><br />
This post showed you how to use Table Value Constructor</p>
<p>Day 13: <a href="/index.php/DataMgmt/DBAdmin/MSSQLServerAdmin/sql-advent-2011-day-13">DDL Triggers</a><br />
The DDL trigger post showed you how to use DDL triggers and also explained why you might want to use them</p>
<p>Day 14: <a href="/index.php/DataMgmt/DBProgramming/MSSQLServer/sql-advent-2011-day-14">EXCEPT and INTERSECT SET Operations</a><br />
This post was all about the two new SET Operations EXCEPT and INTERSECT </p>
<p>Day 15: <a href="/index.php/DataMgmt/DBProgramming/MSSQLServer/sql-advent-2011-day-15">Joins</a><br />
This post showed you how to use the newer ANSI SQL JOIN syntax and also showed you what was deprecated</p>
<p>Day 16: <a href="/index.php/DataMgmt/DataDesign/sql-advent-2011-day-16">CROSS APPLY and OUTER APPLY</a><br />
Shown was how to use APPLY with derived tables as well as functions</p>
<p>Day 17: <a href="/index.php/DataMgmt/DBProgramming/MSSQLServer/sql-advent-2011-day-17">varchar(max)</a><br />
In this post I showed you why varchar(max) is much better than the text data type</p>
<p>Day 18: <a href="/index.php/DataMgmt/DBProgramming/MSSQLServer/sql-advent-2011-day-18">Table-valued Parameters</a><br />
I showed you how to use Table-valued Parameters to pass around tables</p>
<p>Day 19: <a href="/index.php/DataMgmt/DBAdmin/MSSQLServerAdmin/sql-advent-2011-day-19">Filtered Indexes</a><br />
In this post I showed you how to create a filtered index and why it can be beneficial in your database</p>
<p>Day 20: <a href="/index.php/DataMgmt/DataDesign/sql-advent-2011-day-20">Indexes with Included Columns</a><br />
On this day I showed you how to cover you query by using Indexes with Included Columns</p>
<p>Day 21: <a href="/index.php/DataMgmt/DBProgramming/MSSQLServer/try-catch-sql-advent-2011">TRY CATCH</a><br />
Error handling go better in SQL Server 2005 and I show you how to use TRY CATCH</p>
<p>Day 22: <a href="/index.php/DataMgmt/DataDesign/dynamic-management-views">Dynamic Management Views</a><br />
In this post I show how you can use Dynamic Management Views to get all kinds of information about your server and databases</p>
<p>Day 23: <a href="/index.php/DataMgmt/DBProgramming/MSSQLServer/object_definition-sql-advent-2011-day">OBJECT_DEFINITION</a><br />
The OBJECT_DEFINITION covers ways to get the text of an object and also show you why it is better than sp_helptext or syscomments</p>
<p>Day 24: <a href="/index.php/DataMgmt/DataDesign/index-rebuild-and-reorganize-sql">Index REBUILD and REORGANIZE</a><br />
This post is all about rebuilding and reorganizing(defragmenting) indexes</p>
<p>There are tons of other things that I did not cover, here is just a small list of them</p>
<p>SQLCLR<br />
ServiceBroker<br />
FILESTREAM<br />
Geometry, Geography and HierarchyID data types<br />
Transparent Data Encryption<br />
DB Mirroring<br />
Policy Management<br />
Resource Governor</p>
<p>Tomorrow we will finally look at some new and shiny T-SQL enhancements in SQL Server 2012, I will provide a list of all the new  SQL Server 2012 post I have written in the last 6 months or so</p>
]]></content:encoded>
			<wfw:commentRss>/index.php/datamgmt/datadesign/sql-advent-2011-recap/feed/</wfw:commentRss>
		<slash:comments>0</slash:comments>
		</item>
		<item>
		<title>Returning a value inserted in a table with a newsequentialid() default on a uniqueidentifier column</title>
		<link>/index.php/datamgmt/datadesign/returning-a-value-inserted-in/</link>
		<comments>/index.php/datamgmt/datadesign/returning-a-value-inserted-in/#comments</comments>
		<pubDate>Fri, 23 Sep 2011 15:47:00 +0000</pubDate>
		<dc:creator><![CDATA[SQLDenis]]></dc:creator>
				<category><![CDATA[Data Modelling and Design]]></category>
		<category><![CDATA[Database Programming]]></category>
		<category><![CDATA[Microsoft SQL Server]]></category>
		<category><![CDATA[Microsoft SQL Server Admin]]></category>
		<category><![CDATA[database]]></category>
		<category><![CDATA[how to]]></category>
		<category><![CDATA[sql server 2005]]></category>
		<category><![CDATA[sql server 2008]]></category>
		<category><![CDATA[uniqueidentifier]]></category>

		<guid isPermaLink="false">/index.php/2011/09/returning-a-value-inserted-in/</guid>
		<description><![CDATA[This question came up yesterday and I decided to do a little blog post about it. Someone wanted to know if there was something like @@identity/scope_identity() for a uniqueidentifier column with a default of newsequentialid(). There is not such a functi&#8230;]]></description>
				<content:encoded><![CDATA[<p>This <a href="http://forum.lessthandot.com/viewtopic.php?f=17&amp;t=15344">question</a> came up yesterday and I decided to do a little blog post about it. Someone wanted to know if there was something like @@identity/scope_identity() for a uniqueidentifier column with a default of newsequentialid(). There is not such a function but you can use OUTPUT INSERTED.Column to do something similar. Let&#8217;s take a look</p>
<p>First create this table</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
</pre></td><td class="de1"><pre class="de1"><span class="kw1">USE</span> tempdb
GO
<span class="kw1">CREATE</span> <span class="kw1">TABLE</span> bla<span class="br0">&#40;</span>ID <span class="kw1">INT</span>,SomeID <span class="kw1">UNIQUEIDENTIFIER</span> <span class="kw1">DEFAULT</span> newsequentialid<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#41;</span>
&nbsp;
&nbsp;
<span class="kw1">INSERT</span> bla <span class="br0">&#40;</span>ID<span class="br0">&#41;</span> <span class="kw1">VALUES</span><span class="br0">&#40;</span><span class="nu0">1</span><span class="br0">&#41;</span>
GO</pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">USE tempdb
GO
CREATE TABLE bla(ID INT,SomeID UNIQUEIDENTIFIER DEFAULT newsequentialid())


INSERT bla (ID) VALUES(1)
GO</pre></div></div>

<p>Do a simple select&#8230;.</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
</pre></td><td class="de1"><pre class="de1"><span class="kw1">SELECT</span> <span class="sy0">*</span> <span class="kw1">FROM</span> bla</pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">SELECT * FROM bla</pre></div></div>

<p>As you can see we have 1 row</p>
<pre>ID	SomeID
1	D6911D8A-0AE6-E011-A428-0021867E1D41</pre>
<p>Here is what the insert looks like that also returns the uniqueidentifier  just created by the newsequentialid()default</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
</pre></td><td class="de1"><pre class="de1"><span class="kw1">INSERT</span> bla <span class="br0">&#40;</span>ID<span class="br0">&#41;</span>
&nbsp; &nbsp; <span class="kw1">OUTPUT</span> <span class="sy0">IN</span>SERTED.<span class="me1">SomeID</span>
<span class="kw1">VALUES</span><span class="br0">&#40;</span><span class="nu0">2</span><span class="br0">&#41;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">INSERT bla (ID)
    OUTPUT INSERTED.SomeID
VALUES(2)</pre></div></div>

<p></p>
<pre>SomeID
28E798A8-0AE6-E011-A428-0021867E1D41</pre>
<p>As you can see you get the uniqueidentifier just created back, all we have added was OUTPUT INSERTED.SomeID between INSERT&#8230;.. and VALUES&#8230;&#8230;<br />
Pretty simple so far<br />
Now, we should have two rows in the table</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
</pre></td><td class="de1"><pre class="de1"><span class="kw1">SELECT</span> <span class="sy0">*</span> <span class="kw1">FROM</span> bla</pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">SELECT * FROM bla</pre></div></div>

<p></p>
<pre>ID	SomeID
1	D6911D8A-0AE6-E011-A428-0021867E1D41
2	28E798A8-0AE6-E011-A428-0021867E1D41</pre>
<p>You can also populate a table variable and then use that to return the values</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
</pre></td><td class="de1"><pre class="de1"><span class="kw1">DECLARE</span> @MyTableVar <span class="kw1">TABLE</span><span class="br0">&#40;</span> SomeID <span class="kw1">UNIQUEIDENTIFIER</span><span class="br0">&#41;</span>
<span class="kw1">INSERT</span> bla <span class="br0">&#40;</span>ID<span class="br0">&#41;</span>
&nbsp; &nbsp; <span class="kw1">OUTPUT</span> <span class="sy0">IN</span>SERTED.<span class="me1">SomeID</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">INTO</span> @MyTableVar
<span class="kw1">VALUES</span><span class="br0">&#40;</span><span class="nu0">3</span><span class="br0">&#41;</span>
&nbsp;
<span class="kw1">SELECT</span> SomeID <span class="kw1">FROM</span> @MyTableVar</pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">DECLARE @MyTableVar TABLE( SomeID UNIQUEIDENTIFIER)
INSERT bla (ID)
    OUTPUT INSERTED.SomeID
        INTO @MyTableVar
VALUES(3)
 
SELECT SomeID FROM @MyTableVar</pre></div></div>

<p></p>
<pre>SomeID
D26351C1-0AE6-E011-A428-0021867E1D41</pre>
<p>Finally we can run a select that confirms all 3 inserts actually have happened</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
</pre></td><td class="de1"><pre class="de1"><span class="kw1">SELECT</span> <span class="sy0">*</span> <span class="kw1">FROM</span> bla</pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">SELECT * FROM bla</pre></div></div>

<p>Here is the data, of course on your machine the values for SomeID won&#8217;t be the same<br />
</p>
<pre>ID	SomeID
1	D6911D8A-0AE6-E011-A428-0021867E1D41
2	28E798A8-0AE6-E011-A428-0021867E1D41
3	D26351C1-0AE6-E011-A428-0021867E1D41</pre>
<p>
That is it for this post, for some more OUTPUT examples take a look at <a href="/index.php/DataMgmt/DBProgramming/MSSQLServer/using-t-sql-output-and-merge">Using T-SQL OUTPUT and MERGE To Link Old and New Keys</a></p>
]]></content:encoded>
			<wfw:commentRss>/index.php/datamgmt/datadesign/returning-a-value-inserted-in/feed/</wfw:commentRss>
		<slash:comments>1</slash:comments>
		</item>
		<item>
		<title>SQL Server Denali CTP1 Announced at PASS</title>
		<link>/index.php/datamgmt/dbprogramming/sql-server-denali-ctp1-announced-at-pass/</link>
		<comments>/index.php/datamgmt/dbprogramming/sql-server-denali-ctp1-announced-at-pass/#comments</comments>
		<pubDate>Tue, 09 Nov 2010 16:31:30 +0000</pubDate>
		<dc:creator><![CDATA[SQLDenis]]></dc:creator>
				<category><![CDATA[Database Programming]]></category>
		<category><![CDATA[Microsoft SQL Server]]></category>
		<category><![CDATA[Microsoft SQL Server Admin]]></category>
		<category><![CDATA[ctp]]></category>
		<category><![CDATA[database]]></category>
		<category><![CDATA[sql server denali]]></category>

		<guid isPermaLink="false">/index.php/2010/11/sql-server-denali-ctp1-announced-at-pass/</guid>
		<description><![CDATA[Today at PASS the SQL Server team has publicly announced the first Community Technology Preview of the next version of SQL Server code named Denali. You can download it here: http://www.microsoft.com/downloads/en/details.aspx?FamilyID=6a04f16f-f6be-4f92&#8230;]]></description>
				<content:encoded><![CDATA[<div class="image_block"><img src="/wp-content/uploads/blogs/DataMgmt/Denali.PNG" alt="" title="" width="371" height="41" /></div>
<p>Today at PASS the SQL Server team has publicly announced the first Community Technology Preview of the next version of SQL Server code named Denali. You can download it here: http://www.microsoft.com/downloads/en/details.aspx?FamilyID=6a04f16f-f6be-4f92-9c92-f7e5677d91f9</p>
<p>I have been playing around with Denali for a couple of weeks now and created a couple of posts. Below is a list of the posts, click on each link to get some more information about Denali</p>
<p><a href="/index.php/DataMgmt/DataDesign/first-look-at-sql-server-management-stud">First look at SQL Server Management Studio Denali</a></p>
<p><a href="/index.php/DataMgmt/DBProgramming/screenshots-of-the-new-look-and-feel-of">Screenshots of the new look and feel of BIDS in Denali</a></p>
<p><a href="/index.php/DataMgmt/DBProgramming/MSSQLServer/find-what-is-deprecated-in-sql-server-de">Find what is deprecated in SQL Server Denali by using sys.dm_os_performance_counters</a></p>
<p><a href="Playing around with sys.dm_exec_describe_first_result_set and sys.dm_exec_describe_first_result_set_for_object">Playing around with sys.dm_exec_describe_first_result_set and sys.dm_exec_describe_first_result_set_for_object</a></p>
<p><a href="/index.php/DataMgmt/DataDesign/a-first-look-at-sequences-in-sql-server">A first look at sequences in SQL Server Denali</a></p>
<p><a href="/index.php/DataMgmt/DataDesign/don-t-install-denali-bids-side-by-side-w">Don’t install Denali BIDS side by side with a 2008 instance</a></p>
<p><a href="The new Dynamic Management Views in SQL Server Denali">The new Dynamic Management Views in SQL Server Denali</a></p>
<p><a href="/index.php/DataMgmt/DBProgramming/MSSQLServer/debugging-in-sql-server-denali">Debugging In SQL Server Denali</a></p>
<p><a href="/index.php/DataMgmt/DBProgramming/MSSQLServer/using-offset-n-rows-fetch-next-n-rows-on">Using OFFSET N ROWS FETCH NEXT N ROWS ONLY In SQL Server Denali for easy paging</a></p>
<p>These posts were all written without documentation available, it was mostly guess work but since documentation will be available with the public release of the CTP I will go into more detail the next couple of weeks</p>
]]></content:encoded>
			<wfw:commentRss>/index.php/datamgmt/dbprogramming/sql-server-denali-ctp1-announced-at-pass/feed/</wfw:commentRss>
		<slash:comments>1</slash:comments>
		</item>
		<item>
		<title>The new Dynamic Management Views in SQL Server Denali</title>
		<link>/index.php/datamgmt/datadesign/the-new-dynamic-management-views-in-sql/</link>
		<comments>/index.php/datamgmt/datadesign/the-new-dynamic-management-views-in-sql/#respond</comments>
		<pubDate>Tue, 09 Nov 2010 16:28:40 +0000</pubDate>
		<dc:creator><![CDATA[SQLDenis]]></dc:creator>
				<category><![CDATA[Data Modelling and Design]]></category>
		<category><![CDATA[ctp]]></category>
		<category><![CDATA[database]]></category>
		<category><![CDATA[sql server denali]]></category>

		<guid isPermaLink="false">/index.php/2010/11/the-new-dynamic-management-views-in-sql/</guid>
		<description><![CDATA[With SQL Server Denali CTP1 come 20 new dynamic management views, this brings the total number of dynamic management views to 155

Here is a list of the new dynamic management views, included is also the type of the dynamic management view&#8230;]]></description>
				<content:encoded><![CDATA[<p>With SQL Server Denali CTP1 come 20 new dynamic management views, this brings the total number of dynamic management views to 155</p>
<p>Here is a list of the new dynamic management views, included is also the type of the dynamic management view</p>
<div class="tables">
<table>
<tr>
<th>	DMV Name	</th>
<th>	DMV Type	</th>
</tr>
<tr>
<td>	dm_db_objects_disabled_on_compatibility_level_change	</td>
<td>	SQL_INLINE_TABLE_VALUED_FUNCTION	</td>
</tr>
<tr>
<td>	dm_db_uncontained_entities	</td>
<td>	VIEW	</td>
</tr>
<tr>
<td>	dm_exec_describe_first_result_set	</td>
<td>	SQL_INLINE_TABLE_VALUED_FUNCTION	</td>
</tr>
<tr>
<td>	dm_exec_describe_first_result_set_for_object	</td>
<td>	SQL_INLINE_TABLE_VALUED_FUNCTION	</td>
</tr>
<tr>
<td>	dm_fts_index_keywords_by_property	</td>
<td>	SQL_INLINE_TABLE_VALUED_FUNCTION	</td>
</tr>
<tr>
<td>	dm_hadr_availability_group_states	</td>
<td>	VIEW	</td>
</tr>
<tr>
<td>	dm_hadr_availability_replica_states	</td>
<td>	VIEW	</td>
</tr>
<tr>
<td>	dm_hadr_database_replica_states	</td>
<td>	VIEW	</td>
</tr>
<tr>
<td>	dm_hadr_database_synchronization_states	</td>
<td>	VIEW	</td>
</tr>
<tr>
<td>	dm_hadr_instance_node_map	</td>
<td>	VIEW	</td>
</tr>
<tr>
<td>	dm_hadr_name_id_map	</td>
<td>	VIEW	</td>
</tr>
<tr>
<td>	dm_logconsumer_cachebufferrefs	</td>
<td>	SQL_INLINE_TABLE_VALUED_FUNCTION	</td>
</tr>
<tr>
<td>	dm_logconsumer_privatecachebuffers	</td>
<td>	SQL_INLINE_TABLE_VALUED_FUNCTION	</td>
</tr>
<tr>
<td>	dm_logpool_consumers	</td>
<td>	SQL_INLINE_TABLE_VALUED_FUNCTION	</td>
</tr>
<tr>
<td>	dm_logpool_hashentries	</td>
<td>	VIEW	</td>
</tr>
<tr>
<td>	dm_logpool_sharedcachebuffers	</td>
<td>	SQL_INLINE_TABLE_VALUED_FUNCTION	</td>
</tr>
<tr>
<td>	dm_logpool_stats	</td>
<td>	VIEW	</td>
</tr>
<tr>
<td>	dm_logpoolmgr_freepools	</td>
<td>	SQL_INLINE_TABLE_VALUED_FUNCTION	</td>
</tr>
<tr>
<td>	dm_logpoolmgr_respoolsize	</td>
<td>	SQL_INLINE_TABLE_VALUED_FUNCTION	</td>
</tr>
<tr>
<td>	dm_logpoolmgr_stats	</td>
<td>	SQL_INLINE_TABLE_VALUED_FUNCTION	</td>
</tr>
</table>
</div>
<p>Unfortunately, when I downloaded this there was no documentation available yet, once documentation is available I will take a closer look at the new dynamic management views in Denali</p>
<p>If you would like a list of all dynamic management views in SQL Server Denali then run this query</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
</pre></td><td class="de1"><pre class="de1"><span class="kw1">select</span> <span class="sy0">*</span> <span class="kw1">from</span> sysobjects
<span class="kw1">where</span> name like <span class="st0">'dm[_]%'</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">select * from sysobjects
where name like 'dm[_]%'</pre></div></div>

<p>In this post <a href="/index.php/DataMgmt/DBProgramming/MSSQLServer/playing-around-with-sys-dm_exec_describe">Playing around with sys.dm_exec_describe_first_result_set And sys.dm_exec_describe_first_result_set_for_object</a> I am taking a quick look at two of those views</p>
<p>Click on the <a href="/index.php/All/sql+server+denali:">SQL Server Denali</a> tag to see all our SQL Server Denali related posts</p>
]]></content:encoded>
			<wfw:commentRss>/index.php/datamgmt/datadesign/the-new-dynamic-management-views-in-sql/feed/</wfw:commentRss>
		<slash:comments>0</slash:comments>
		</item>
		<item>
		<title>Playing around with sys.dm_exec_describe_first_result_set and sys.dm_exec_describe_first_result_set_for_object</title>
		<link>/index.php/datamgmt/dbprogramming/playing-around-with-sys-dm_exec_describe/</link>
		<comments>/index.php/datamgmt/dbprogramming/playing-around-with-sys-dm_exec_describe/#respond</comments>
		<pubDate>Tue, 09 Nov 2010 16:28:31 +0000</pubDate>
		<dc:creator><![CDATA[SQLDenis]]></dc:creator>
				<category><![CDATA[Database Programming]]></category>
		<category><![CDATA[Microsoft SQL Server]]></category>
		<category><![CDATA[ctp]]></category>
		<category><![CDATA[database]]></category>
		<category><![CDATA[sql server denali]]></category>

		<guid isPermaLink="false">/index.php/2010/11/playing-around-with-sys-dm_exec_describe/</guid>
		<description><![CDATA[If you have a stored procedure which returns two result sets up till now there was now way to get the meta data easily about the first result set. Let's take a look what is new in SQL Server Denali, first create this very simple stored procedure.

cre&#8230;]]></description>
				<content:encoded><![CDATA[<p>If you have a stored procedure which returns two result sets up till now there was now way to get the meta data easily about the first result set. Let&#8217;s take a look what is new in SQL Server Denali, first create this very simple stored procedure.</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
</pre></td><td class="de1"><pre class="de1"><span class="kw1">create</span> <span class="kw1">procedure</span> prTest
<span class="kw1">as</span>
<span class="kw1">select</span> <span class="nu0">1</span> <span class="kw1">as</span> a, <span class="st0">'B'</span> <span class="kw1">as</span> b
&nbsp;
<span class="kw1">select</span> <span class="st0">'A'</span> <span class="kw1">as</span> z, <span class="nu0">3</span> <span class="kw1">as</span> d
Go</pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">create procedure prTest
as
select 1 as a, 'B' as b

select 'A' as z, 3 as d
Go</pre></div></div>

<h2>sys.dm_exec_describe_first_result_set_for_object</h2>
<p>Run the following query</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
</pre></td><td class="de1"><pre class="de1"><span class="kw1">select</span> <span class="sy0">*</span> 
<span class="kw1">from</span> sys.<span class="me1">dm_exec_describe_first_result_set_for_object</span><span class="br0">&#40;</span><span class="kw2">OBJECT_ID</span><span class="br0">&#40;</span><span class="st0">'prTest'</span><span class="br0">&#41;</span>,<span class="nu0">1</span><span class="br0">&#41;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">select * 
from sys.dm_exec_describe_first_result_set_for_object(OBJECT_ID('prTest'),1)</pre></div></div>

<p>Here is partial output</p>
<div class="tables">
<table>
<tr>
<th>
is_hidden</th>
<th>
column_ordinal</th>
<th>
name</th>
<th>
is_nullable</th>
<th>
system_type_id</th>
<th>
system_type_name</th>
<th>
max_length</th>
<th>
precision</th>
<th>
scale</th>
</tr>
<tr>
<td>0</td>
<td>1</td>
<td>a</td>
<td>0</td>
<td>56</td>
<td>int</td>
<td>4</td>
<td>10</td>
<td>0</td>
</tr>
<tr>
<td>0</td>
<td>2</td>
<td>b</td>
<td>0</td>
<td>167</td>
<td>varchar(1)</td>
<td>1</td>
<td>0</td>
<td>0</td>
</tr>
</table>
</div>
<p>As you can see you get the name, type, precision, length and more about the resultset</p>
<h2>sys.dm_exec_describe_first_result_set</h2>
<p>This query is more interesting because it will look at a dynamic query. Let&#8217;s say your query is the following <em>&#8216;SELECT * FROM sysobjects SELECT 3&#8217;</em> passed in as a parameter</p>
<p>Here is how that would work</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
</pre></td><td class="de1"><pre class="de1"><span class="kw1">declare</span> @n <span class="kw1">nvarchar</span><span class="br0">&#40;</span><span class="nu0">100</span><span class="br0">&#41;</span> <span class="sy0">=</span> N<span class="st0">'SELECT * FROM sysobjects SELECT 3'</span>
&nbsp;
<span class="kw1">SELECT</span> <span class="sy0">*</span>
<span class="kw1">FROM</span> sys.<span class="me1">dm_exec_describe_first_result_set</span><span class="br0">&#40;</span>@n, <span class="sy0">NULL</span>, <span class="nu0">1</span><span class="br0">&#41;</span>;</pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">declare @n nvarchar(100) = N'SELECT * FROM sysobjects SELECT 3'

SELECT *
FROM sys.dm_exec_describe_first_result_set(@n, NULL, 1);</pre></div></div>

<p>Here is partial output</p>
<div class="tables">
<table>
<tr>
<th>
is_hidden</th>
<th>
column_ordinal</th>
<th>
name</th>
<th>
is_nullable</th>
<th>
system<br />_type_id</th>
<th>
system_type<br />_name</th>
<th>
max_length</th>
<th>
precision</th>
<th>
scale</th>
</tr>
<tr>
<td>	0	</td>
<td>	1	</td>
<td>	name	</td>
<td>	0	</td>
<td>	231	</td>
<td>	nvarchar(128)	</td>
<td>	256	</td>
<td>	0	</td>
<td>	0	</td>
</tr>
<tr>
<td>	0	</td>
<td>	2	</td>
<td>	id	</td>
<td>	0	</td>
<td>	56	</td>
<td>	int	</td>
<td>	4	</td>
<td>	10	</td>
<td>	0	</td>
</tr>
<tr>
<td>	0	</td>
<td>	3	</td>
<td>	xtype	</td>
<td>	0	</td>
<td>	175	</td>
<td>	char(2)	</td>
<td>	2	</td>
<td>	0	</td>
<td>	0	</td>
</tr>
<tr>
<td>	0	</td>
<td>	4	</td>
<td>	uid	</td>
<td>	1	</td>
<td>	52	</td>
<td>	smallint	</td>
<td>	2	</td>
<td>	5	</td>
<td>	0	</td>
</tr>
<tr>
<td>	0	</td>
<td>	5	</td>
<td>	info	</td>
<td>	1	</td>
<td>	52	</td>
<td>	smallint	</td>
<td>	2	</td>
<td>	5	</td>
<td>	0	</td>
</tr>
<tr>
<td>	0	</td>
<td>	6	</td>
<td>	status	</td>
<td>	1	</td>
<td>	56	</td>
<td>	int	</td>
<td>	4	</td>
<td>	10	</td>
<td>	0	</td>
</tr>
<tr>
<td>	0	</td>
<td>	7	</td>
<td>	base_schema_ver	</td>
<td>	1	</td>
<td>	56	</td>
<td>	int	</td>
<td>	4	</td>
<td>	10	</td>
<td>	0	</td>
</tr>
<tr>
<td>	0	</td>
<td>	8	</td>
<td>	replinfo	</td>
<td>	1	</td>
<td>	56	</td>
<td>	int	</td>
<td>	4	</td>
<td>	10	</td>
<td>	0	</td>
</tr>
<tr>
<td>	0	</td>
<td>	9	</td>
<td>	parent_obj	</td>
<td>	0	</td>
<td>	56	</td>
<td>	int	</td>
<td>	4	</td>
<td>	10	</td>
<td>	0	</td>
</tr>
<tr>
<td>	0	</td>
<td>	10	</td>
<td>	crdate	</td>
<td>	0	</td>
<td>	61	</td>
<td>	datetime	</td>
<td>	8	</td>
<td>	23	</td>
<td>	3	</td>
</tr>
<tr>
<td>	0	</td>
<td>	11	</td>
<td>	ftcatid	</td>
<td>	1	</td>
<td>	52	</td>
<td>	smallint	</td>
<td>	2	</td>
<td>	5	</td>
<td>	0	</td>
</tr>
<tr>
<td>	0	</td>
<td>	12	</td>
<td>	schema_ver	</td>
<td>	1	</td>
<td>	56	</td>
<td>	int	</td>
<td>	4	</td>
<td>	10	</td>
<td>	0	</td>
</tr>
<tr>
<td>	0	</td>
<td>	13	</td>
<td>	stats_schema_ver	</td>
<td>	1	</td>
<td>	56	</td>
<td>	int	</td>
<td>	4	</td>
<td>	10	</td>
<td>	0	</td>
</tr>
<tr>
<td>	0	</td>
<td>	14	</td>
<td>	type	</td>
<td>	1	</td>
<td>	175	</td>
<td>	char(2)	</td>
<td>	2	</td>
<td>	0	</td>
<td>	0	</td>
</tr>
<tr>
<td>	0	</td>
<td>	15	</td>
<td>	userstat	</td>
<td>	1	</td>
<td>	52	</td>
<td>	smallint	</td>
<td>	2	</td>
<td>	5	</td>
<td>	0	</td>
</tr>
<tr>
<td>	0	</td>
<td>	16	</td>
<td>	sysstat	</td>
<td>	1	</td>
<td>	52	</td>
<td>	smallint	</td>
<td>	2	</td>
<td>	5	</td>
<td>	0	</td>
</tr>
<tr>
<td>	0	</td>
<td>	17	</td>
<td>	indexdel	</td>
<td>	1	</td>
<td>	52	</td>
<td>	smallint	</td>
<td>	2	</td>
<td>	5	</td>
<td>	0	</td>
</tr>
<tr>
<td>	0	</td>
<td>	18	</td>
<td>	refdate	</td>
<td>	0	</td>
<td>	61	</td>
<td>	datetime	</td>
<td>	8	</td>
<td>	23	</td>
<td>	3	</td>
</tr>
<tr>
<td>	0	</td>
<td>	19	</td>
<td>	version	</td>
<td>	1	</td>
<td>	56	</td>
<td>	int	</td>
<td>	4	</td>
<td>	10	</td>
<td>	0	</td>
</tr>
<tr>
<td>	0	</td>
<td>	20	</td>
<td>	deltrig	</td>
<td>	1	</td>
<td>	56	</td>
<td>	int	</td>
<td>	4	</td>
<td>	10	</td>
<td>	0	</td>
</tr>
<tr>
<td>	0	</td>
<td>	21	</td>
<td>	instrig	</td>
<td>	1	</td>
<td>	56	</td>
<td>	int	</td>
<td>	4	</td>
<td>	10	</td>
<td>	0	</td>
</tr>
</table>
</div>
<p>As you can see you get the name, type, precision, length and more about the resultset, this is pretty neat especially for a query stored in a parameter.</p>
<p>When I wrote this post documentation was not yet available, so some of this stuff is written with a lot of guessing.</p>
<p>Click on the <a href="/index.php/All/sql+server+denali:">SQL Server Denali</a> tag to see all our SQL Server Denali related posts</p>
]]></content:encoded>
			<wfw:commentRss>/index.php/datamgmt/dbprogramming/playing-around-with-sys-dm_exec_describe/feed/</wfw:commentRss>
		<slash:comments>0</slash:comments>
		</item>
		<item>
		<title>Don&#8217;t install Denali BIDS side by side with a 2008 instance</title>
		<link>/index.php/datamgmt/datadesign/don-t-install-denali-bids-side-by-side-w/</link>
		<comments>/index.php/datamgmt/datadesign/don-t-install-denali-bids-side-by-side-w/#comments</comments>
		<pubDate>Tue, 09 Nov 2010 16:28:22 +0000</pubDate>
		<dc:creator><![CDATA[SQLDenis]]></dc:creator>
				<category><![CDATA[Data Modelling and Design]]></category>
		<category><![CDATA[bids]]></category>
		<category><![CDATA[ctp]]></category>
		<category><![CDATA[database]]></category>
		<category><![CDATA[sql server denali]]></category>
		<category><![CDATA[ssis]]></category>

		<guid isPermaLink="false">/index.php/2010/11/don-t-install-denali-bids-side-by-side-w/</guid>
		<description><![CDATA[If you already have a SQL Server 2008 or a SQL Server 2008 R2 instance then do not install SQL Server Denali as a named instance. If you do so then your current SSIS development environment will be broken. There is a reason there are virtual machines, I&#8230;]]></description>
				<content:encoded><![CDATA[<p>If you already have a SQL Server 2008 or a SQL Server 2008 R2 instance then do not install SQL Server Denali as a named instance. If you do so then your current SSIS development environment will be broken. There is a reason there are virtual machines, I recommend using <a href="http://www.virtualbox.org/">VirtualBox</a></p>
<p>With CTP1 of Denali, BIDS is still based on Visual Studio 2008, in a later version it will use the 2010 shell.</p>
<p>Anyway if you do install Denali as a named instance this is what happens when you try to create a new SSIS project</p>
<p><a href="http://www.flickr.com/photos/denisgobo/5151504623/" title="Denali SSIS Error by Denis Gobo, on Flickr"><img src="http://farm2.static.flickr.com/1079/5151504623_2289d67254.jpg" width="481" height="201" alt="Denali SSIS Error" /></a></p>
<p>Here is the text</p>
<p>&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;<br />
Microsoft Visual Studio<br />
&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;<br />
&#8216;C:UsersDenisAppDataLocalTemptemp.dtproj&#8217; cannot be opened because its project type (.dtproj) is not supported by this version of the application. </p>
<p>To open it, please use a version that supports this type of project.<br />
&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;<br />
OK   Help<br />
&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;</p>
<p>Here is also a small video I created</p>
[video:youtube:hdNeTWHiwW0]
<p>Click on the <a href="/index.php/All/sql+server+denali:">SQL Server Denali</a> tag to see all our SQL Server Denali related posts</p>
]]></content:encoded>
			<wfw:commentRss>/index.php/datamgmt/datadesign/don-t-install-denali-bids-side-by-side-w/feed/</wfw:commentRss>
		<slash:comments>2</slash:comments>
		</item>
	</channel>
</rss>
