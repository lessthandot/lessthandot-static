<?xml version="1.0" encoding="UTF-8"?><rss version="2.0"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:atom="http://www.w3.org/2005/Atom"
	xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
	xmlns:slash="http://purl.org/rss/1.0/modules/slash/"
	>

<channel>
	<title>less &#8211; LessthanDot</title>
	<atom:link href="/index.php/tag/less/feed/" rel="self" type="application/rss+xml" />
	<link>/</link>
	<description>A Technical Community for IT Professionals</description>
	<lastBuildDate>Sat, 09 Mar 2019 12:50:36 +0000</lastBuildDate>
	<language>en-US</language>
	<sy:updatePeriod>hourly</sy:updatePeriod>
	<sy:updateFrequency>1</sy:updateFrequency>
	<generator>https://wordpress.org/?v=4.6.1</generator>
	<item>
		<title>Self-Hosted Web &#8211; Updating assets without restarting the debugger</title>
		<link>/index.php/webdev/self-hosted-web-updating-assets-without-restarting-the-debugger/</link>
		<comments>/index.php/webdev/self-hosted-web-updating-assets-without-restarting-the-debugger/#respond</comments>
		<pubDate>Fri, 01 Jul 2016 17:43:54 +0000</pubDate>
		<dc:creator><![CDATA[Eli Weinstock-Herman (tarwn)]]></dc:creator>
				<category><![CDATA[Web Developer]]></category>
		<category><![CDATA[Gulp]]></category>
		<category><![CDATA[less]]></category>
		<category><![CDATA[WebAPI]]></category>

		<guid isPermaLink="false">/?p=4600</guid>
		<description><![CDATA[When you work with an ASP.Net project through Visual Studio, you can edit static files like CSS and JS files and see them immediately in your browser. Switch to a console application and self-hosted option, such as a self-hosted WebAPI or NancyFX site, and you&#8217;ll find that editing Content files will require restarting the debugger [&#8230;]]]></description>
				<content:encoded><![CDATA[<p>When you work with an ASP.Net project through Visual Studio, you can edit static files like CSS and JS files and see them immediately in your browser. Switch to a console application and self-hosted option, such as a self-hosted WebAPI or NancyFX site, and you&#8217;ll find that editing Content files will require restarting the debugger to see the changes.</p>
<p>I&#8217;ve lived with this in the past, but the regular delay became annoying so I decided to find a solution.</p>
<h2>Why don&#8217;t the new files show up?</h2>
<p>Web Projects run directly out of the project folder, so they are serving up the same version of the files we are editing, allowing real-time editing to be possible. With console applicaitons, we are editing the file in the project and relying on it being set to &#8220;Content&#8221; and &#8220;Copy Always&#8221; so the compiler will copy that content when we build. Since the application runs out of the bin folder, it&#8217;s limited to that out of date copy of the files.</p>
<div id="attachment_4601" style="width: 624px" class="wp-caption aligncenter"><a href="/wp-content/uploads/2016/06/AssetsFolder.png"><img src="/wp-content/uploads/2016/06/AssetsFolder.png" alt="Example Assets Folder" width="614" height="234" class="size-full wp-image-4601" srcset="/wp-content/uploads/2016/06/AssetsFolder.png 614w, /wp-content/uploads/2016/06/AssetsFolder-300x114.png 300w" sizes="(max-width: 614px) 100vw, 614px" /></a><p class="wp-caption-text">Example Assets Folder</p></div>
<p>So our edits are saved, but because we&#8217;re actually seeing a copy of the file in our browser, we don&#8217;t see the updates.</p>
<h2>Using Gulp to Push Updates to the bin folder</h2>
<p><a href="http://gulpjs.com/" target="_blank" title="gulp.js">Gulp</a> is a JavaScript task runner that uses file pipes to pick up files, run them through transformations, then output them. The project I was working on was already using a gulp task to transpile a LESS file into CSS, so it made sense to extend it to monitor all of my static assets and copy them to the bin folder when one of them changed.</p>
<p>If you haven&#8217;t used Gulp before, here is a good starter post: <a href="https://css-tricks.com/gulp-for-beginners/" title="CSS Tricks: Gulp for Beginners" target="_blank">CSS Tricks: Gulp for Beginners</a></p>
<p>I only have two tasks, and both are related to building or debugging my project, so my project.json file is fairly short (and I used dependencies rather than devDependencies):</p>
<p><b>package.json</b></p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="javascript"><thead><tr><td colspan="2"  class="head">Javascript</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
</pre></td><td class="de1"><pre class="de1"><span class="br0">&#123;</span>
&nbsp; <span class="st0">&quot;name&quot;</span><span class="sy0">:</span> <span class="st0">&quot;xyz-tooling&quot;</span><span class="sy0">,</span>
&nbsp; <span class="st0">&quot;version&quot;</span><span class="sy0">:</span> <span class="st0">&quot;0.1.0&quot;</span><span class="sy0">,</span>
&nbsp; <span class="st0">&quot;description&quot;</span><span class="sy0">:</span> <span class="st0">&quot;tooling for building/testing xyz local UI&quot;</span><span class="sy0">,</span>
&nbsp; <span class="st0">&quot;dependencies&quot;</span><span class="sy0">:</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; <span class="st0">&quot;gulp&quot;</span><span class="sy0">:</span> <span class="st0">&quot;~3.9.1&quot;</span><span class="sy0">,</span>
&nbsp; &nbsp; <span class="st0">&quot;gulp-less&quot;</span><span class="sy0">:</span> <span class="st0">&quot;~3.1.0&quot;</span><span class="sy0">,</span>
&nbsp; &nbsp; <span class="st0">&quot;gulp-watch&quot;</span><span class="sy0">:</span> <span class="st0">&quot;~4.3.8&quot;</span><span class="sy0">,</span>
&nbsp; &nbsp; <span class="st0">&quot;gulp-concat&quot;</span><span class="sy0">:</span> <span class="st0">&quot;~2.6.0&quot;</span><span class="sy0">,</span>
&nbsp; &nbsp; <span class="st0">&quot;gulp-insert&quot;</span><span class="sy0">:</span> <span class="st0">&quot;~0.5.0&quot;</span><span class="sy0">,</span>
&nbsp; &nbsp; <span class="st0">&quot;yargs&quot;</span><span class="sy0">:</span> <span class="st0">&quot;~4.7.1&quot;</span>
&nbsp; <span class="br0">&#125;</span>
<span class="br0">&#125;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">{
  "name": "xyz-tooling",
  "version": "0.1.0",
  "description": "tooling for building/testing xyz local UI",
  "dependencies": {
    "gulp": "~3.9.1",
    "gulp-less": "~3.1.0",
    "gulp-watch": "~4.3.8",
    "gulp-concat": "~2.6.0",
    "gulp-insert": "~0.5.0",
    "yargs": "~4.7.1"
  }
}</pre></div></div>

<p>The key ingredient is <a href="https://www.npmjs.com/package/gulp-watch" title="gulp-watch on npmjs.com" target="_blank">gulp-watch</a>. The &#8220;watch&#8221; task takes a wildcard path and watches the filesystem for changes to that path. When a file matching the path is changed, it calls the provided gulp tasks or function callback.</p>
<p>I have two tasks for gulp:
<ul>
<li>&#8220;less&#8221; &#8211; transpiles all *.less files in my assets folder and concatenates them into a single stylesheet.css file</li>
<li>&#8220;watch&#8221; &#8211; watches the contents of my assets folder and either runs them through the &#8220;less&#8221; task or copies them to the bin/Debug/Assets folder</li>
</ul>
<p><b>gulpfile.json</b>: Configuration</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="javascript"><thead><tr><td colspan="2"  class="head">Javascript</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
</pre></td><td class="de1"><pre class="de1"><span class="kw1">var</span> gulp <span class="sy0">=</span> require<span class="br0">&#40;</span><span class="st0">'gulp'</span><span class="br0">&#41;</span><span class="sy0">,</span>
&nbsp; &nbsp; less <span class="sy0">=</span> require<span class="br0">&#40;</span><span class="st0">'gulp-less'</span><span class="br0">&#41;</span><span class="sy0">,</span>
&nbsp; &nbsp; watch <span class="sy0">=</span> require<span class="br0">&#40;</span><span class="st0">'gulp-watch'</span><span class="br0">&#41;</span><span class="sy0">,</span>
&nbsp; &nbsp; insert <span class="sy0">=</span> require<span class="br0">&#40;</span><span class="st0">'gulp-insert'</span><span class="br0">&#41;</span><span class="sy0">,</span>
&nbsp; &nbsp; concat <span class="sy0">=</span> require<span class="br0">&#40;</span><span class="st0">'gulp-concat'</span><span class="br0">&#41;</span><span class="sy0">,</span>
&nbsp; &nbsp; argv <span class="sy0">=</span> require<span class="br0">&#40;</span><span class="st0">'yargs'</span><span class="br0">&#41;</span>.<span class="me1">argv</span><span class="sy0">;;</span>
&nbsp;
<span class="co1">// Configure</span>
<span class="kw1">var</span> config <span class="sy0">=</span> <span class="br0">&#123;</span> <span class="br0">&#125;</span><span class="sy0">;</span>
config.<span class="me1">assetsPath</span> <span class="sy0">=</span> <span class="st0">&quot;Assets&quot;</span><span class="sy0">;</span>
config.<span class="me1">assetsOutputPath</span> <span class="sy0">=</span> <span class="br0">&#40;</span>argv.<span class="me1">output</span> <span class="sy0">||</span> <span class="st0">&quot;bin/Debug/&quot;</span><span class="br0">&#41;</span> <span class="sy0">+</span> config.<span class="me1">assetsPath</span><span class="sy0">;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">var gulp = require('gulp'),
    less = require('gulp-less'),
    watch = require('gulp-watch'),
    insert = require('gulp-insert'),
    concat = require('gulp-concat'),
    argv = require('yargs').argv;;

// Configure
var config = { };
config.assetsPath = "Assets";
config.assetsOutputPath = (argv.output || "bin/Debug/") + config.assetsPath;</pre></div></div>

<p>I set a few configurations at the top of the file, including the name of the local Assets folder and an overridable path to the target Assets folder (which defaults to &#8220;bin/Debug/&#8221;).</p>
<p><b>gulpfile.json</b>: &#8220;less&#8221; Task</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="javascript"><thead><tr><td colspan="2"  class="head">Javascript</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
</pre></td><td class="de1"><pre class="de1">gulp.<span class="me1">task</span><span class="br0">&#40;</span><span class="st0">'less'</span><span class="sy0">,</span> <span class="kw1">function</span><span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; gulp.<span class="me1">src</span><span class="br0">&#40;</span>config.<span class="me1">assetsPath</span> <span class="sy0">+</span> <span class="st0">'/*.less'</span><span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; .<span class="me1">pipe</span><span class="br0">&#40;</span>less<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; .<span class="me1">pipe</span><span class="br0">&#40;</span>insert.<span class="me1">transform</span><span class="br0">&#40;</span><span class="kw1">function</span><span class="br0">&#40;</span>contents<span class="sy0">,</span> file<span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; console.<span class="me1">log</span><span class="br0">&#40;</span><span class="st0">'LESS Compilation: '</span> <span class="sy0">+</span> file.<span class="me1">path</span><span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">var</span> comment <span class="sy0">=</span> <span class="st0">'/************ local file: '</span> <span class="sy0">+</span> file.<span class="me1">path</span> <span class="sy0">+</span> <span class="st0">' ************/<span class="es0">\n</span>'</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">return</span> comment <span class="sy0">+</span> contents<span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span><span class="br0">&#41;</span><span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; .<span class="me1">pipe</span><span class="br0">&#40;</span>concat<span class="br0">&#40;</span><span class="st0">'stylesheet.css'</span><span class="br0">&#41;</span><span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; .<span class="me1">pipe</span><span class="br0">&#40;</span>gulp.<span class="me1">dest</span><span class="br0">&#40;</span>config.<span class="me1">assetsPath</span><span class="br0">&#41;</span><span class="br0">&#41;</span>
<span class="br0">&#125;</span><span class="br0">&#41;</span><span class="sy0">;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">gulp.task('less', function() {
    gulp.src(config.assetsPath + '/*.less')
        .pipe(less())
        .pipe(insert.transform(function(contents, file) {
            console.log('LESS Compilation: ' + file.path)
            var comment = '/************ local file: ' + file.path + ' ************/\n';
            return comment + contents;
        }))
        .pipe(concat('stylesheet.css'))
        .pipe(gulp.dest(config.assetsPath))
});</pre></div></div>

<p>The &#8220;less&#8221; task picks up all *.less files in the assets path, performs the LESS transpile on them, adds a prefix on the top of each file (this is a handy way to dynamically add copyright statements too), then concatenates to a single file.</p>
<p>In VisualStudio, I have a pre-build event that runs this command so I am executing my LESS transpile the same exact way if I do a Visual Studio build or the &#8220;watch&#8221; call later (the output stylesheet.css is ignored in my &#8220;.gitignore&#8221;, so my build process can use this same command as well).</p>
<p><b>gulpfile.json</b>: &#8220;watch&#8221; Task</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="javascript"><thead><tr><td colspan="2"  class="head">Javascript</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
</pre></td><td class="de1"><pre class="de1"><span class="co1">// Task: watch</span>
gulp.<span class="me1">task</span><span class="br0">&#40;</span><span class="st0">'watch'</span><span class="sy0">,</span> <span class="kw1">function</span> <span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; gulp.<span class="me1">watch</span><span class="br0">&#40;</span><span class="br0">&#91;</span> config.<span class="me1">assetsPath</span> <span class="sy0">+</span> <span class="st0">'/fonts/*.*'</span><span class="sy0">,</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;config.<span class="me1">assetsPath</span> <span class="sy0">+</span> <span class="st0">'/images/*.*'</span><span class="sy0">,</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;config.<span class="me1">assetsPath</span> <span class="sy0">+</span> <span class="st0">'/libs/*.*'</span><span class="sy0">,</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;config.<span class="me1">assetsPath</span> <span class="sy0">+</span> <span class="st0">'/src/*.*'</span><span class="sy0">,</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;config.<span class="me1">assetsPath</span> <span class="sy0">+</span> <span class="st0">'/*.js'</span><span class="sy0">,</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;config.<span class="me1">assetsPath</span> <span class="sy0">+</span> <span class="st0">'/*.html'</span><span class="sy0">,</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;config.<span class="me1">assetsPath</span> <span class="sy0">+</span> <span class="st0">'/*.css'</span> <span class="br0">&#93;</span><span class="sy0">,</span> handleChangedAssetFile<span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; <span class="co1">// pick up LESS files and compile them, 1st watch should pick up output and put it in correct spot</span>
&nbsp; &nbsp; gulp.<span class="me1">watch</span><span class="br0">&#40;</span>config.<span class="me1">assetsPath</span> <span class="sy0">+</span> <span class="st0">'/*.less'</span><span class="sy0">,</span> <span class="br0">&#91;</span><span class="st0">'less'</span><span class="br0">&#93;</span><span class="br0">&#41;</span><span class="sy0">;</span>
<span class="br0">&#125;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
<span class="kw1">function</span> handleChangedAssetFile<span class="br0">&#40;</span>obj<span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; <span class="kw1">if</span> <span class="br0">&#40;</span>obj.<span class="me1">type</span> <span class="sy0">===</span> <span class="st0">'changed'</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; console.<span class="me1">log</span><span class="br0">&#40;</span><span class="st0">'Asset Change: '</span> <span class="sy0">+</span> obj.<span class="me1">path</span><span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; gulp.<span class="me1">src</span><span class="br0">&#40;</span>obj.<span class="me1">path</span><span class="sy0">,</span> <span class="br0">&#123;</span> <span class="st0">&quot;base&quot;</span><span class="sy0">:</span> config.<span class="me1">assetsPath</span> <span class="br0">&#125;</span><span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; .<span class="me1">pipe</span><span class="br0">&#40;</span>gulp.<span class="me1">dest</span><span class="br0">&#40;</span>config.<span class="me1">assetsOutputPath</span><span class="br0">&#41;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; <span class="br0">&#125;</span>
<span class="br0">&#125;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">// Task: watch
gulp.task('watch', function () {
    gulp.watch([ config.assetsPath + '/fonts/*.*',
                 config.assetsPath + '/images/*.*',
                 config.assetsPath + '/libs/*.*',
                 config.assetsPath + '/src/*.*',
                 config.assetsPath + '/*.js',
                 config.assetsPath + '/*.html',
                 config.assetsPath + '/*.css' ], handleChangedAssetFile);

    // pick up LESS files and compile them, 1st watch should pick up output and put it in correct spot
    gulp.watch(config.assetsPath + '/*.less', ['less']);
});

function handleChangedAssetFile(obj) {
    if (obj.type === 'changed') {
        console.log('Asset Change: ' + obj.path)
        gulp.src(obj.path, { "base": config.assetsPath })
            .pipe(gulp.dest(config.assetsOutputPath));
    }
}</pre></div></div>

<p>I have two sets of files I want to handle, my LESS files and everything else. </p>
<p><u>Everything Else:</u> The first watch has everything except the LESS files and when a change occurs, it calls the handleChangedAssetFile method. This specifically targets only file changes, as I want to stop the debugger when I add a new file so I can remember to mark it as Content and Copy Always in the Properties pane. I also output the filename to the console as an easy way to confirm that a change has or has not been copied (it always is, but it&#8217;s easy to second guess when you make a change and the new file doesn&#8217;t do what you expect).</p>
<p><u>LESS Files:</u> The LESS file watch simply triggers the previously defined &#8216;less&#8217; task, which will transpile the LESS files again and produce a new stylesheet.css. When the updated stylesheet.css file is saved, the first watch notices the change and copies it to the bin folder.</p>
<h2>Using It</h2>
<p>I already keep a powershell console window open in the background in my project folder, so it&#8217;s no big deal to start the watch task and let it live back there in the background while I work (and it can continue running independent of starting and stopping the debugger, so I don&#8217;t have to ever think about it). The project I&#8217;m working on is still fairly small (frontend with ~ 10 screens/viewmodels, 5-6 services) and at this time it can recreate and copy the stylesheet faster than I can Alt+Tab to my browser and press F5.</p>
<div id="attachment_4602" style="width: 541px" class="wp-caption aligncenter"><a href="/wp-content/uploads/2016/06/CommandLine.png"><img src="/wp-content/uploads/2016/06/CommandLine.png" alt="Powershell Console" width="531" height="152" class="size-full wp-image-4602" srcset="/wp-content/uploads/2016/06/CommandLine.png 531w, /wp-content/uploads/2016/06/CommandLine-300x85.png 300w" sizes="(max-width: 531px) 100vw, 531px" /></a><p class="wp-caption-text">Powershell Console</p></div>
<p>My workflow now is to start the debugger that launches my console app, which launches a self-hosted WebAPI project, launch the watch task in my powershell window, then start working. The N-second delay of stopping and restarting the debugger no longer exists. As a secondary option, I can directly run the executable in my bin folder and work on the static assets without the debugger as well.</p>
]]></content:encoded>
			<wfw:commentRss>/index.php/webdev/self-hosted-web-updating-assets-without-restarting-the-debugger/feed/</wfw:commentRss>
		<slash:comments>0</slash:comments>
		</item>
		<item>
		<title>CSS, Javascript, T4 Templates, and Less, Oh My</title>
		<link>/index.php/webdev/serverprogramming/aspnet/css-javascript-t4-templates-and-less/</link>
		<comments>/index.php/webdev/serverprogramming/aspnet/css-javascript-t4-templates-and-less/#comments</comments>
		<pubDate>Fri, 02 Dec 2011 13:02:00 +0000</pubDate>
		<dc:creator><![CDATA[Eli Weinstock-Herman (tarwn)]]></dc:creator>
				<category><![CDATA[ASP.NET]]></category>
		<category><![CDATA[Javascript]]></category>
		<category><![CDATA[XHTML and CSS]]></category>
		<category><![CDATA[css]]></category>
		<category><![CDATA[javascript]]></category>
		<category><![CDATA[less]]></category>
		<category><![CDATA[t4-template]]></category>

		<guid isPermaLink="false">/index.php/2011/12/css-javascript-t4-templates-and-less/</guid>
		<description><![CDATA[For the past few months, I have been looking for a way to define some JS and CSS files that would be shared between multiple projects in an ASP.Net solution. The intent is to define common scripts and CSS in one place instead of trying to keep multiple copies of it in sync or implementing an internal CDN with a versioning scheme. The challenge is finding a way to do this with a minimum of impact on the development, deployment, and production processes.]]></description>
				<content:encoded><![CDATA[<p>For the past few months, I have been looking for a way to define some JS and CSS files that would be shared between multiple projects in an ASP.Net solution. The intent is to define common scripts and CSS in one place instead of trying to keep multiple copies of it in sync or implementing an internal CDN with a versioning scheme. The challenge is finding a way to do this with a minimum of impact on the development, deployment, and production processes.</p>
<h2>The Shared Project</h2>
<p>Yesterday the best solution I was also the best one I had thought of on my own, which was to create a shared project and use pre- or post-build commands to copy the common files to the relevant web projects. Unfortunately this doesn&#8217;t solve the &#8220;let me edit a file without rebuilding&#8221; unless I then edit the copied file, test, and remember to paste the changes back into the source without first building and wiping out my temporary changes.</p>
<p>Yuck.</p>
<p>This wasn&#8217;t going to make life that much easier.</p>
<h2>Start with just the CSS?</h2>
<p>This morning, while looking into the potential of using LESS or SASS to reduce the repetitiveness of the files, I realized I had the potential for a much better solution. If I had a way to compile a LESS or SASS file on the fly into a CSS file, then I could still put my common CSS in a central location and just use an import statement in a template in each project to pull those common values in. </p>
<p>I initially looked at using SASS with the <a href="http://visualstudiogallery.msdn.microsoft.com/2b96d16a-c986-4501-8f97-8008f9db141a" title="Mindscape Web Workbench extension on VisualStudioGallery">Mindscape Web Workbench</a> plugin. This seemed like a good solution, but something I read recently about design-time T4 templates led me to wonder if someone had created a T4 template that would transform LESS or SASS syntax into a nice clean CSS file. </p>
<p>What did we do before search engines&#8230;</p>
<h2>Implement T4CSS Template</h2>
<p>Phil Haack (<a href="http://haacked.com/" title="Phil's blog">blog</a>|<a href="https://twitter.com/#!/haacked" title="@haacked on twitter">twitter</a>) posted a blog in 2009 on <a href="http://haacked.com/archive/2009/12/02/t4-template-for-less-css.aspx" title="T4CSS: A T4 Template for .Less CSS With Compression">exactly this topic</a>. He created a T4 template for Visual Studio 2008 that would use the dotless C# assembly to convert LESS files to static CSS files and provided to the <a href="http://www.dotlesscss.org/" title="Visit the .Less Site">.Less site</a>.</p>
<p>Now we&#8217;re cooking.</p>
<p>First we need to download the t4css package from github: https://github.com/dotless/dotless/downloads</p>
<p>There are two files we are concerned with, the dotless.Core DLL and the T4CSS.tt template file. The template file is placed in our CSS folder in our site. </p>
<div style="font-size: .9em; background-color: #eeeeee; padding: .5em;">
<h3>Referencing the Assembly</h3>
<p>Unfortunately Visual Studio 2010&#8217;s T4 implementation no longer accesses assemblies through the project references, but this still leaves us with <a href="http://weblogs.asp.net/lhunt/archive/2010/05/04/t4-template-error-assembly-directive-cannot-locate-referenced-assembly-in-visual-studio-2010-project.aspx" title="T4 Template error - Assembly Directive cannot locate referenced assembly in Visual Studio 2010 project">a few options</a>. Given that I want to share this among several projects, I put the dotless.Core DLL in a folder at my solution level and updated the path in the T4 template to use the solution path macro.
</div>
<p>Next I created a sample file to play with, which I called test.less.css (fancy, I know). I also modified the settings section of the T4CSS.tt file, setting _runOnBuild and _useCssExtension to &#8220;true&#8221;. This will cause the template to run on each build, as well as when I trigger it, and it will look for files ending in &#8220;.less.css&#8221; instead of just &#8220;.less&#8221;. This gives us some CSS intellisense with minimal hassle, though Mindscape&#8217;s Web Workbench apparently handles this out of the box and there is <a href="http://visualstudiogallery.msdn.microsoft.com/dd5635b0-3c70-484f-abcb-cbdcabaa9923" title="CSS Is Less">an extension</a> to make VS treat the less extension as a CSS format.</p>
<div style="font-size: .9em; background-color: #eeeeee; padding: .5em;">
There is also a <a href="http://visualstudiogallery.msdn.microsoft.com/e646c6ec-87a7-45ea-81e8-d655a3d3e73e?SRC=VSIDE" title="LessExtension">LessExtension</a> in the gallery that seems to offer some of the functionality I already have with the T4 template, but I didn&#8217;t have a chance to play with it.
</div>
<p>If we keep the T4CSS file open, it will mark itself as unsaved each time it runs, so using Ctrl+Shift+S will save it and regenerate the output CSS. At least that&#8217;s the theory. Unfortunately in my case, it seems that the template file was being saved prior to the css file, so I&#8217;ve taken to pressing Ctrl+S and then Ctrl+Shift+S after making a quick change in my CSS (which is still way better than a Rebuild All would be).</p>
<p><i>Note: There is also  the &#8220;Transform All Templates&#8221; button on the top of the solution explorer if I don&#8217;t feel like double-saving. I could also add a shortcut in  the keyboard commands list (Tools -> Options -> Environment -> Keyboard) for &#8220;TextTransformation.TransformAllTemplates</i></p>
<h2>Working Across Projects</h2>
<p>This solution hasn&#8217;t quite given me the &#8220;save the file and refresh the page&#8221; ease of use of a static CSS file. This means if you are editing a less file that more than one template references, and you don&#8217;t have all the templates open, you could get out of sync. To help keep things clean in source control, this means you should run a complete build (to let all the transforms run) or use. </p>
<p>To make this work for multiple projects we can add a folder at the solution level with our less files and use the @import statement to pull them in. Except now we can&#8217;t do the .less.css trick anymore because less doesn&#8217;t process @import&#8217;s ending in CSS, assuming they are intended to be regular css imports. At this point, it&#8217;s probably time to stop fighting it, apply the &#8220;Less is CSS&#8221; extension I mentioned above, and change back to using .less instead of .less.css. Fun times.</p>
<p>So what we end up with is a folder structure that looks like:</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="text"><thead><tr><td colspan="2"  class="head">Text</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
</pre></td><td class="de1"><pre class="de1">&nbsp; &nbsp; 
/SolutionName/Common/dotless.Core.dll
/SolutionName/Common/common.less
/SolutionName/Project1/css/T4CSS.tt
/SolutionName/Project1/css/stylesheet.less
/SolutionName/Project2/css/T4CSS.tt
/SolutionName/Project2/css/stylesheet.less</pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">	
/SolutionName/Common/dotless.Core.dll
/SolutionName/Common/common.less
/SolutionName/Project1/css/T4CSS.tt
/SolutionName/Project1/css/stylesheet.less
/SolutionName/Project2/css/T4CSS.tt
/SolutionName/Project2/css/stylesheet.less</pre></div></div>

<p>And inside the project-specific .less files we have an import at the top, like so:</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="css"><thead><tr><td colspan="2"  class="head">CSS</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
</pre></td><td class="de1"><pre class="de1"><span class="co1">@import &quot;../../Common/common.less&quot;;</span>
&nbsp;
<span class="coMULTI">/* plus some project specific-stuff */</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">@import "../../Common/common.less";

/* plus some project specific-stuff */</pre></div></div>

<p>And there we have it, shared CSS. I posted a <a href="https://bitbucket.org/tarwn/aspnet_sharedresourceswitht4/overview" title="See project on BitBucket">working sample project on BitBucket</a> if you want to browse it in detail.</p>
<h2>I Specifically Heard You Say JavaScript</h2>
<p>I intend to solve the common javascript issue the same way, except in this case I will write my own T4 templates to directly copy the files from the common area that are needed in each project. This will provide me with an easy way to manage common scripts in a central location, the ability to edit and refresh my page to test changes without rebuilds, and can easily be extended to include minified versions of the files.</p>
]]></content:encoded>
			<wfw:commentRss>/index.php/webdev/serverprogramming/aspnet/css-javascript-t4-templates-and-less/feed/</wfw:commentRss>
		<slash:comments>1</slash:comments>
		</item>
	</channel>
</rss>
