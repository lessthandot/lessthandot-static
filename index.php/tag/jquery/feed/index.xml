<?xml version="1.0" encoding="UTF-8"?><rss version="2.0"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:atom="http://www.w3.org/2005/Atom"
	xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
	xmlns:slash="http://purl.org/rss/1.0/modules/slash/"
	>

<channel>
	<title>jquery &#8211; LessthanDot</title>
	<atom:link href="/index.php/tag/jquery/feed/" rel="self" type="application/rss+xml" />
	<link>/</link>
	<description>A Technical Community for IT Professionals</description>
	<lastBuildDate>Sat, 09 Mar 2019 12:50:36 +0000</lastBuildDate>
	<language>en-US</language>
	<sy:updatePeriod>hourly</sy:updatePeriod>
	<sy:updateFrequency>1</sy:updateFrequency>
	<generator>https://wordpress.org/?v=4.6.1</generator>
	<item>
		<title>Handling Unauthenticated AJAX Requests</title>
		<link>/index.php/webdev/uidevelopment/handling-unauthenticated-ajax-requests/</link>
		<comments>/index.php/webdev/uidevelopment/handling-unauthenticated-ajax-requests/#respond</comments>
		<pubDate>Wed, 15 Feb 2012 11:12:00 +0000</pubDate>
		<dc:creator><![CDATA[Alex Ullrich]]></dc:creator>
				<category><![CDATA[AJAX]]></category>
		<category><![CDATA[ASP.NET]]></category>
		<category><![CDATA[UI Development]]></category>
		<category><![CDATA[ajax]]></category>
		<category><![CDATA[asp.net mvc]]></category>
		<category><![CDATA[jquery]]></category>

		<guid isPermaLink="false">/index.php/2012/02/handling-unauthenticated-ajax-requests/</guid>
		<description><![CDATA[A common pattern that I use in creating ajaxy applications is to return a small HTML fragment from the request, and then inject this fragment into the DOM in the callback executed after a successful request.  This tends to be a bit simpler than returnin&#8230;]]></description>
				<content:encoded><![CDATA[<p>A common pattern that I use in creating ajaxy applications is to return a small HTML fragment from the request, and then inject this fragment into the DOM in the callback executed after a successful request.  This tends to be a bit simpler than returning JSON and picking it apart to update the page, but it has one major problem, at least when using normal forms authentication.  If the user gets logged out (either by logging out from another tab or an expiring session), the AJAX request gets redirected to the login page, which is then returned and inserted into the page.  You can see how hideous this can become in the picture below.</p>
<div class="image_block"><a href="/wp-content/uploads/blogs/WebDev/handling-unauthenticated-ajax-requests/bad-logon.PNG?mtime=1328983889"><img alt="" src="/wp-content/uploads/blogs/WebDev/handling-unauthenticated-ajax-requests/bad-logon.PNG?mtime=1328983889" width="941" height="644" /></a></div>
<p>In this case, when you sign up for a task it is supposed to return the updated task, and use this task to replace the notecard into the DOM on the right hand side.  It can actually get uglier, as we support signing up for multiple tasks at a time.  However, if the session expires we get a big, ugly login page displayed in the midst of all our pretty notecards.  What I&#8217;d like to find is a way to retain the convenience of using forms authentication, but handle scenarios like this more gracefully.</p>
<p>Adding a piece of metadata to the login page seemed like a good way to get this done without making things any harder on the user.  I initially wanted to get the login page classified as an error, so that redirection could be accomplished on the client side using the error callback available when using jQuery for AJAX requests.  This would be nice, but in jQuery 1.5 and above a &#8220;statusCode&#8221; callback has been added that is even nicer.  You can use the callback like this:</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="javascript"><thead><tr><td colspan="2"  class="head">Javascript</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
</pre></td><td class="de1"><pre class="de1">$.<span class="me1">ajax</span><span class="br0">&#40;</span><span class="br0">&#123;</span>
&nbsp; statusCode<span class="sy0">:</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; <span class="nu0">404</span><span class="sy0">:</span> <span class="kw1">function</span><span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; alert<span class="br0">&#40;</span><span class="st0">'page not found'</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp; <span class="br0">&#125;</span>
<span class="br0">&#125;</span><span class="br0">&#41;</span><span class="sy0">;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">$.ajax({
  statusCode: {
    404: function() {
      alert('page not found');
    }
  }
});</pre></div></div>

<p>The ease with which this allows you to define behavior for different status codes is fantastic.  As I set off down this path, the most obvious choice seemed to be adding a 401 (unauthorized) status code to the login page, but this got us into a weird redirect loop because forms authentication redirects all 401&#8217;s to the login page &#8211; causing you lose the return URL, and redirect users back to the login page once they are authenticated.  Not exactly a paragon of usability.</p>
<p>Having found this out the hard way, I decided a custom status code might be better.  It&#8217;s easy enough to add the custom status code to the login page with a single line of C#:</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="csharp"><thead><tr><td colspan="2"  class="head">C#</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
</pre></td><td class="de1"><pre class="de1">Response<span class="sy0">.</span><span class="me1">StatusCode</span> <span class="sy0">=</span> <span class="nu0">999</span><span class="sy0">;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">Response.StatusCode = 999;</pre></div></div>

<p>We can then make our requests using something along these lines:</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="javascript"><thead><tr><td colspan="2"  class="head">Javascript</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
</pre></td><td class="de1"><pre class="de1">$.<span class="me1">ajax</span><span class="br0">&#40;</span><span class="br0">&#123;</span>
&nbsp; &nbsp; type<span class="sy0">:</span> <span class="st0">'POST'</span><span class="sy0">,</span>
&nbsp; &nbsp; url<span class="sy0">:</span> <span class="st0">'/Task/SignUp'</span><span class="sy0">,</span>
&nbsp; &nbsp; data<span class="sy0">:</span> <span class="st0">'projectId='</span> <span class="sy0">+</span> pid <span class="sy0">+</span> <span class="st0">'&amp;storyId='</span> <span class="sy0">+</span> sid <span class="sy0">+</span> <span class="st0">'&amp;id='</span> <span class="sy0">+</span> id <span class="sy0">+</span> <span class="st0">'&amp;initials='</span> <span class="sy0">+</span> initials<span class="sy0">,</span>
&nbsp; &nbsp; success<span class="sy0">:</span> <span class="kw1">function</span> <span class="br0">&#40;</span>html<span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; $<span class="br0">&#40;</span><span class="st0">'#'</span> <span class="sy0">+</span> id<span class="br0">&#41;</span>.<span class="me1">replaceWith</span><span class="br0">&#40;</span>html<span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; <span class="br0">&#125;</span><span class="sy0">,</span>
&nbsp; &nbsp; statusCode<span class="sy0">:</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="nu0">999</span><span class="sy0">:</span> <span class="kw1">function</span><span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; location.<span class="me1">href</span> <span class="sy0">=</span> <span class="st0">'/Account/LogOn?returnUrl='</span> <span class="sy0">+</span> location.<span class="me1">href</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp; &nbsp; <span class="br0">&#125;</span>
<span class="br0">&#125;</span><span class="br0">&#41;</span><span class="sy0">;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">$.ajax({
    type: 'POST',
    url: '/Task/SignUp',
    data: 'projectId=' + pid + '&amp;storyId=' + sid + '&amp;id=' + id + '&amp;initials=' + initials,
    success: function (html) {
        $('#' + id).replaceWith(html);
    },
    statusCode: {
        999: function() {
            location.href = '/Account/LogOn?returnUrl=' + location.href;
        }
    }
});</pre></div></div>

<p>This works well enough, at least from cassini.  When deployed to an IIS server however, we noticed that the 999 status code was getting picked up by the error handling modules, and of course we did not have an error page set up for that code.  To get around that we had to add the following to the code to display our login view:</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="csharp"><thead><tr><td colspan="2"  class="head">C#</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
</pre></td><td class="de1"><pre class="de1">Response<span class="sy0">.</span><span class="me1">TrySkipIisCustomErrors</span> <span class="sy0">=</span> <span class="kw1">true</span><span class="sy0">;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">Response.TrySkipIisCustomErrors = true;</pre></div></div>

<p>That&#8217;s kind of nasty, but it seems to allow us to accomplish our goal.  I think I can stomach it on this one page in the name of improving the user&#8217;s experience on the site.  </p>
<p>There&#8217;s one more thing we can do to make our lives easier.  There is no special behavior in our statusCode handler, so it would be nice define it only once.  Luckily, the folks at jQuery are a step ahead of us.  We can define our statusCode handler using the ajaxSetup method in our master page:</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="javascript"><thead><tr><td colspan="2"  class="head">Javascript</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
</pre></td><td class="de1"><pre class="de1">$.<span class="me1">ajaxSetup</span><span class="br0">&#40;</span><span class="br0">&#123;</span>
&nbsp; &nbsp; statusCode<span class="sy0">:</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="nu0">999</span><span class="sy0">:</span> <span class="kw1">function</span> <span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; location.<span class="me1">href</span> <span class="sy0">=</span> <span class="st0">'/Account/LogOn?returnUrl='</span> <span class="sy0">+</span> location.<span class="me1">href</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp; &nbsp; <span class="br0">&#125;</span>
<span class="br0">&#125;</span><span class="br0">&#41;</span><span class="sy0">;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">$.ajaxSetup({
    statusCode: {
        999: function () {
            location.href = '/Account/LogOn?returnUrl=' + location.href;
        }
    }
});</pre></div></div>

<p>Now that everything is set up, we are properly redirected to the login page:</p>
<div class="image_block"><a href="/wp-content/uploads/blogs/WebDev/handling-unauthenticated-ajax-requests/good-logon.PNG?mtime=1328987447"><img alt="" src="/wp-content/uploads/blogs/WebDev/handling-unauthenticated-ajax-requests/good-logon.PNG?mtime=1328987447" width="557" height="435" /></a></div>
<p>I&#8217;m not sure this is the best solution to our problem, but it is certainly a solution.  It allows us to keep leveraging ASP.net&#8217;s built in error handling and authentication (I know they aren&#8217;t perfect, but they are good enough for us in this scenario) while making the user&#8217;s life a bit easier in the event something goes wrong.  In this case, my team is the primary user of the application so it makes our lives easier <img src="https://s.w.org/images/core/emoji/2/72x72/1f642.png" alt="🙂" class="wp-smiley" style="height: 1em; max-height: 1em;" /></p>
<p>Complete source code for the application in question is available on <a href="https://github.com/jawsthegame/PivotalExtension">github</a>.</p>
]]></content:encoded>
			<wfw:commentRss>/index.php/webdev/uidevelopment/handling-unauthenticated-ajax-requests/feed/</wfw:commentRss>
		<slash:comments>0</slash:comments>
		</item>
		<item>
		<title>ASP.NET MVC Release Candidate 2 Has Been Released</title>
		<link>/index.php/webdev/serveradmin/msiis/asp-net-mvc-release-candidate-2-has-been/</link>
		<comments>/index.php/webdev/serveradmin/msiis/asp-net-mvc-release-candidate-2-has-been/#respond</comments>
		<pubDate>Tue, 03 Mar 2009 23:48:47 +0000</pubDate>
		<dc:creator><![CDATA[SQLDenis]]></dc:creator>
				<category><![CDATA[AJAX]]></category>
		<category><![CDATA[ASP.NET]]></category>
		<category><![CDATA[Microsoft IIS]]></category>
		<category><![CDATA[asp.net 3.5]]></category>
		<category><![CDATA[asp.net mvc]]></category>
		<category><![CDATA[jquery]]></category>

		<guid isPermaLink="false">/index.php/2009/03/asp-net-mvc-release-candidate-2-has-been/</guid>
		<description><![CDATA[ASP.NET MVC Release Candidate 2 is ready for download Changes Since RC 1 Anti-Forgery Helpers Support Setting Cookie Path DefaultModelBinder Validation Messages Are Now Localizable New ValidationSummary Method Overload Supports Header Message jQuery Updated to Version 1.3.1 Setup Requires .NET Framework 3.5 SP1 Download ASP.NET MVC Release Candidate 2 here: http://www.microsoft.com/downloads/details.aspx?FamilyID=ee4b2e97-8a72-449a-82d2-2f720d421031&#38;displaylang=en Release Notes: http://go.microsoft.com/fwlink/?LinkId=137662 Overview [&#8230;]]]></description>
				<content:encoded><![CDATA[<p>ASP.NET MVC Release Candidate 2 is ready for download</p>
<p><strong>Changes Since RC 1</strong><br />
Anti-Forgery Helpers Support Setting Cookie Path<br />
DefaultModelBinder Validation Messages Are Now Localizable<br />
New ValidationSummary Method Overload Supports Header Message<br />
jQuery Updated to Version 1.3.1<br />
Setup Requires .NET Framework 3.5 SP1</p>
<p>Download ASP.NET MVC Release Candidate 2 here: http://www.microsoft.com/downloads/details.aspx?FamilyID=ee4b2e97-8a72-449a-82d2-2f720d421031&amp;displaylang=en</p>
<p>Release Notes: http://go.microsoft.com/fwlink/?LinkId=137662</p>
<p><strong>Overview</strong><br />
The ASP.NET MVC RC2 release provides a new Model-View-Controller (MVC) framework on top of the existing ASP.NET 3.5 runtime. This means that developers can take advantage of the MVC design patterns to create their Web Applications which includes the ability to achieve and maintain a clear separation of concerns (the UI or view from the business and application logic and backend data), as well as facilitate test driven development (TDD). The ASP.NET MVC framework defines a specific pattern to the Web Application folder structure and provides a controller base-class to handle and process requests for &#8220;actions&#8221;. Developers can take advantage of the specific Visual Studio 2008 MVC templates within this release to create their Web applications, which includes the ability to select a specific Unit Test structure to accompany their Web Application development.</p>
<p>The MVC framework is fully extensible at all points, allowing developers to create sophisticated structures that meet their needs, including for example Dependency Injection (DI) techniques, new view rendering engines or specialized controllers.</p>
<p>As the ASP.NET MVC framework is built on ASP.NET 3.5, developers can take advantage of many existing ASP.NET 3.5 features, such as localization, authorization, Profile etc.</p>
]]></content:encoded>
			<wfw:commentRss>/index.php/webdev/serveradmin/msiis/asp-net-mvc-release-candidate-2-has-been/feed/</wfw:commentRss>
		<slash:comments>0</slash:comments>
		</item>
		<item>
		<title>jQuery will ship with ASP.NET MVC and Visual Studio!</title>
		<link>/index.php/webdev/webdesigngraphicsstyling/jquery-will-ship-with-asp-net-mvc-and-vi/</link>
		<comments>/index.php/webdev/webdesigngraphicsstyling/jquery-will-ship-with-asp-net-mvc-and-vi/#respond</comments>
		<pubDate>Mon, 29 Sep 2008 11:06:08 +0000</pubDate>
		<dc:creator><![CDATA[SQLDenis]]></dc:creator>
				<category><![CDATA[Web Design, Graphics and Styling]]></category>
		<category><![CDATA[ajax]]></category>
		<category><![CDATA[asp.net mvc]]></category>
		<category><![CDATA[intellisense]]></category>
		<category><![CDATA[javascript]]></category>
		<category><![CDATA[jquery]]></category>
		<category><![CDATA[mvc]]></category>
		<category><![CDATA[visual studio]]></category>

		<guid isPermaLink="false">/index.php/2008/09/jquery-will-ship-with-asp-net-mvc-and-vi/</guid>
		<description><![CDATA[Now here is some exciting news if you are a web developer in a MSFT shop. Microsoft will ship jQuery with ASP.NET MVC and Visual Studio. John Resig writes: Microsoft is looking to make jQuery part of their official development platform. Their JavaScript offering today includes the ASP.NET Ajax Framework and they’re looking to expand [&#8230;]]]></description>
				<content:encoded><![CDATA[<p>Now here is some exciting news if you are a web developer in a MSFT shop. Microsoft will ship jQuery with ASP.NET MVC and Visual Studio.<br />
John Resig writes:<br />
<blockquote>Microsoft is looking to make jQuery part of their official development platform. Their JavaScript offering today includes the ASP.NET Ajax Framework and they’re looking to expand it with the use of jQuery. This means that jQuery will be distributed with Visual Studio (which will include jQuery intellisense, snippets, examples, and documentation).</p>
<p>Additionally Microsoft will be developing additional controls, or widgets, to run on top of jQuery that will be easily deployable within your .NET applications. jQuery helpers will also be included in the server-side portion of .NET development (in addition to the existing helpers) providing complementary functions to existing ASP.NET AJAX capabilities.</p></blockquote>
<p>Sweet, you will get jQuery intellisense <img src="https://s.w.org/images/core/emoji/2/72x72/1f642.png" alt="🙂" class="wp-smiley" style="height: 1em; max-height: 1em;" /></p>
<p>Read Jogn Resig&#8217;s announcement here: http://jquery.com/blog/2008/09/28/jquery-microsoft-nokia/</p>
<p>Read Scott Guthrie&#8217;s post here: http://weblogs.asp.net/scottgu/archive/2008/09/28/jquery-and-microsoft.aspx</p>
<p>Bertrand Le Roy has also a post here: http://weblogs.asp.net/bleroy/archive/2008/09/28/jquery-now-officially-part-of-the-net-developer-s-toolbox.aspx</p>
<p>Finally Scott Hanselman has also a post about this here: http://www.hanselman.com/blog/jQueryToShipWithASPNETMVCAndVisualStudio.aspx</p>
]]></content:encoded>
			<wfw:commentRss>/index.php/webdev/webdesigngraphicsstyling/jquery-will-ship-with-asp-net-mvc-and-vi/feed/</wfw:commentRss>
		<slash:comments>0</slash:comments>
		</item>
	</channel>
</rss>
