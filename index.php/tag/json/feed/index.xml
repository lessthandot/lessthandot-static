<?xml version="1.0" encoding="UTF-8"?><rss version="2.0"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:atom="http://www.w3.org/2005/Atom"
	xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
	xmlns:slash="http://purl.org/rss/1.0/modules/slash/"
	>

<channel>
	<title>json &#8211; LessthanDot</title>
	<atom:link href="/index.php/tag/json/feed/" rel="self" type="application/rss+xml" />
	<link>/</link>
	<description>A Technical Community for IT Professionals</description>
	<lastBuildDate>Sat, 09 Mar 2019 12:50:36 +0000</lastBuildDate>
	<language>en-US</language>
	<sy:updatePeriod>hourly</sy:updatePeriod>
	<sy:updateFrequency>1</sy:updateFrequency>
	<generator>https://wordpress.org/?v=4.6.1</generator>
	<item>
		<title>Mapping Complex types to/from JSON with JSON.Net</title>
		<link>/index.php/webdev/serverprogramming/aspnet/mapping-complex-types-tofrom-json-with-json-net/</link>
		<comments>/index.php/webdev/serverprogramming/aspnet/mapping-complex-types-tofrom-json-with-json-net/#comments</comments>
		<pubDate>Fri, 07 Jul 2017 11:54:10 +0000</pubDate>
		<dc:creator><![CDATA[Eli Weinstock-Herman (tarwn)]]></dc:creator>
				<category><![CDATA[ASP.NET]]></category>
		<category><![CDATA[C#]]></category>
		<category><![CDATA[json]]></category>
		<category><![CDATA[json.net]]></category>

		<guid isPermaLink="false">/?p=8680</guid>
		<description><![CDATA[In an earlier post I introduced a strongly typed Identity object I am using in an ASP.Net Core application to make my code and error messages more readable. I didn&#8217;t wanted that extra complexity reflected in my database or over the wire with an API. In this post we&#8217;ll look at a simple method to [&#8230;]]]></description>
				<content:encoded><![CDATA[<p>In an <a href="/index.php/desktopdev/mstech/csharp/mapping-complex-types-tofrom-the-db-with-petapoco/">earlier post</a> I introduced a strongly typed Identity object I am using in an ASP.Net Core application to make my code and error messages more readable. I didn&#8217;t wanted that extra complexity reflected in my database or over the wire with an API. In this post we&#8217;ll look at a simple method to map my strongly typed properties in C# to simpler values in JSON.</p>
<p>This is my desired state:</p>
<div id="attachment_8690" style="width: 634px" class="wp-caption aligncenter"><img src="/wp-content/uploads/2017/07/TransparentIdentityType.png" alt="Transparent Server Side Identity Type" width="624" height="121" class="size-full wp-image-8690" srcset="/wp-content/uploads/2017/07/TransparentIdentityType.png 624w, /wp-content/uploads/2017/07/TransparentIdentityType-300x58.png 300w" sizes="(max-width: 624px) 100vw, 624px" /><p class="wp-caption-text">Transparent Server Side Identity Type</p></div>
<p>I want a strongly typed Identity object in my API backend that transparently converts into a simple int value to/from the database and converts to an int or <code>null</code> for the front-end (null in cases where a permanent ID hasn&#8217;t been assigned yet). The right side of this was handled in that earlier post with a PetaPoco IMapper implementation registered globally for IIdentity<int> types. JSON.Net supports a similar method that I can register with ASP.Net Core.</p>
<p>This is what my ASP.Net MVC Method looks like:</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="csharp"><thead><tr><td colspan="2"  class="head">C#</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
</pre></td><td class="de1"><pre class="de1"><span class="br0">&#91;</span>HttpGet<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#93;</span>
<span class="kw1">public</span> async Task<span class="sy0">&lt;</span>List<span class="sy0">&lt;</span>ApplicationDTO<span class="sy0">&gt;&gt;</span> GetAllAsync<span class="br0">&#40;</span><span class="br0">&#41;</span>
<span class="br0">&#123;</span>
&nbsp; &nbsp; <span class="kw1">return</span> await _databaseStore<span class="sy0">.</span><span class="me1">Applications</span><span class="sy0">.</span><span class="me1">GetAllAsync</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
<span class="br0">&#125;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">[HttpGet()]
public async Task&lt;List&lt;ApplicationDTO&gt;&gt; GetAllAsync()
{
	return await _databaseStore.Applications.GetAllAsync();
}</pre></div></div>

<p>And this is what we see over the wire:</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="javascript"><thead><tr><td colspan="2"  class="head">Javascript</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
</pre></td><td class="de1"><pre class="de1"><span class="br0">&#91;</span>
&nbsp; <span class="br0">&#123;</span><span class="st0">&quot;id&quot;</span><span class="sy0">:</span><span class="nu0">2</span><span class="sy0">,</span> <span class="st0">&quot;organizationId&quot;</span><span class="sy0">:</span><span class="nu0">1</span><span class="sy0">,</span> <span class="st0">&quot;name&quot;</span><span class="sy0">:</span><span class="st0">&quot;Fictitious Co, LLC Application&quot;</span><span class="br0">&#125;</span>
<span class="br0">&#93;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">[
  {"id":2, "organizationId":1, "name":"Fictitious Co, LLC Application"}
]</pre></div></div>

<p>Here is the definition of the ApplicationDTO object:</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="csharp"><thead><tr><td colspan="2"  class="head">C#</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
</pre></td><td class="de1"><pre class="de1"><span class="kw1">public</span> <span class="kw4">class</span> ApplicationDTO
<span class="br0">&#123;</span> &nbsp; 
&nbsp; &nbsp; <span class="br0">&#91;</span>Obsolete<span class="br0">&#40;</span><span class="st0">&quot;Serialization use only&quot;</span>, <span class="kw1">true</span><span class="br0">&#41;</span><span class="br0">&#93;</span>
&nbsp; &nbsp; <span class="kw1">public</span> ApplicationDTO<span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span> <span class="br0">&#125;</span>
&nbsp;
&nbsp; &nbsp; <span class="kw1">public</span> ApplicationDTO<span class="br0">&#40;</span>AppId id, OrganizationId organizationid, <span class="kw4">string</span> name<span class="br0">&#41;</span>
&nbsp; &nbsp; <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; Id <span class="sy0">=</span> id<span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; OrganizationId <span class="sy0">=</span> organizationid<span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; Name <span class="sy0">=</span> name<span class="sy0">;</span>
&nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp; &nbsp; 
&nbsp; &nbsp; <span class="kw1">public</span> AppId Id <span class="br0">&#123;</span> <span class="kw1">get</span><span class="sy0">;</span> <span class="kw1">set</span><span class="sy0">;</span> <span class="br0">&#125;</span>
&nbsp; &nbsp; &nbsp; &nbsp; 
&nbsp; &nbsp; <span class="kw1">public</span> OrganizationId OrganizationId <span class="br0">&#123;</span> <span class="kw1">get</span><span class="sy0">;</span> <span class="kw1">set</span><span class="sy0">;</span> <span class="br0">&#125;</span>
&nbsp; &nbsp; &nbsp; &nbsp; 
&nbsp; &nbsp; <span class="kw1">public</span> <span class="kw4">string</span> Name <span class="br0">&#123;</span> <span class="kw1">get</span><span class="sy0">;</span> <span class="kw1">set</span><span class="sy0">;</span> <span class="br0">&#125;</span>
<span class="br0">&#125;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">public class ApplicationDTO
{   
    [Obsolete("Serialization use only", true)]
    public ApplicationDTO() { }
 
    public ApplicationDTO(AppId id, OrganizationId organizationid, string name)
    {
        Id = id;
        OrganizationId = organizationid;
        Name = name;
    }
    
    public AppId Id { get; set; }
        
    public OrganizationId OrganizationId { get; set; }
        
    public string Name { get; set; }
}</pre></div></div>

<p>Here is the definition of the OrganizationId Identity:</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="csharp"><thead><tr><td colspan="2"  class="head">C#</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
</pre></td><td class="de1"><pre class="de1"><span class="kw1">public</span> <span class="kw4">class</span> OrganizationId <span class="sy0">:</span> IIdentity<span class="sy0">&lt;</span><span class="kw4">int</span><span class="sy0">&gt;</span>
<span class="br0">&#123;</span> &nbsp; 
&nbsp; &nbsp; <span class="br0">&#91;</span>Obsolete<span class="br0">&#40;</span><span class="st0">&quot;Serialization use only&quot;</span>, <span class="kw1">true</span><span class="br0">&#41;</span><span class="br0">&#93;</span>
&nbsp; &nbsp; <span class="kw1">public</span> OrganizationId<span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span> <span class="br0">&#125;</span>
&nbsp; &nbsp; &nbsp;
&nbsp; &nbsp; <span class="kw1">public</span> OrganizationId<span class="br0">&#40;</span><span class="kw4">int</span> id<span class="br0">&#41;</span>
&nbsp; &nbsp; <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; RawValue <span class="sy0">=</span> id<span class="sy0">;</span>
&nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp; &nbsp; &nbsp;
&nbsp; &nbsp; <span class="kw1">public</span> <span class="kw4">int</span> RawValue <span class="br0">&#123;</span> <span class="kw1">get</span><span class="sy0">;</span> <span class="kw1">set</span><span class="sy0">;</span> <span class="br0">&#125;</span>
<span class="br0">&#125;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">public class OrganizationId : IIdentity&lt;int&gt;
{   
	[Obsolete("Serialization use only", true)]
	public OrganizationId() { }
	 
	public OrganizationId(int id)
	{
		RawValue = id;
	}
	 
	public int RawValue { get; set; }
}</pre></div></div>

<p>These are both generated code, with some of the extras left out (potentially a future post).</p>
<h2>Implementing a JSON.Net Mapper</h2>
<p>JSON.Net supports custom JsonConverter implementations that will let us transparently convert between IIdentity<int> objects in C# and int values JSON:</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="csharp"><thead><tr><td colspan="2"  class="head">C#</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
</pre></td><td class="de1"><pre class="de1"><span class="kw1">public</span> <span class="kw4">class</span> IdentityJsonConverter<span class="sy0">&lt;</span>T<span class="sy0">&gt;</span> <span class="sy0">:</span> JsonConverter
<span class="br0">&#123;</span>
&nbsp; &nbsp; <span class="kw1">public</span> <span class="kw1">override</span> <span class="kw4">void</span> WriteJson<span class="br0">&#40;</span>JsonWriter writer, <span class="kw4">object</span> <span class="kw1">value</span>, JsonSerializer serializer<span class="br0">&#41;</span>
&nbsp; &nbsp; <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; writer<span class="sy0">.</span><span class="me1">WriteValue</span><span class="br0">&#40;</span><span class="br0">&#40;</span><span class="br0">&#40;</span>IIdentity<span class="sy0">&lt;</span>T<span class="sy0">&gt;</span><span class="br0">&#41;</span><span class="kw1">value</span><span class="br0">&#41;</span><span class="sy0">.</span><span class="me1">RawValue</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp;
&nbsp; &nbsp; <span class="kw1">public</span> <span class="kw1">override</span> <span class="kw4">object</span> ReadJson<span class="br0">&#40;</span>JsonReader reader, Type objectType, <span class="kw4">object</span> existingValue, JsonSerializer serializer<span class="br0">&#41;</span>
&nbsp; &nbsp; <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">if</span> <span class="br0">&#40;</span>reader<span class="sy0">.</span><span class="kw1">Value</span> <span class="sy0">!=</span> <span class="kw1">null</span><span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">var</span> ctor <span class="sy0">=</span> objectType<span class="sy0">.</span><span class="me1">GetConstructor</span><span class="br0">&#40;</span><span class="kw3">new</span> Type<span class="br0">&#91;</span><span class="br0">&#93;</span> <span class="br0">&#123;</span> <span class="kw3">typeof</span><span class="br0">&#40;</span>T<span class="br0">&#41;</span> <span class="br0">&#125;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">var</span> obj <span class="sy0">=</span> ctor<span class="sy0">.</span><span class="me1">Invoke</span><span class="br0">&#40;</span><span class="kw3">new</span> <span class="kw4">object</span><span class="br0">&#91;</span><span class="br0">&#93;</span> <span class="br0">&#123;</span> <span class="br0">&#40;</span>T<span class="br0">&#41;</span>Convert<span class="sy0">.</span><span class="me1">ChangeType</span><span class="br0">&#40;</span>reader<span class="sy0">.</span><span class="kw1">Value</span>, <span class="kw3">typeof</span><span class="br0">&#40;</span>T<span class="br0">&#41;</span><span class="br0">&#41;</span> <span class="br0">&#125;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">return</span> obj<span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">else</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">return</span> <span class="kw1">null</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp;
&nbsp; &nbsp; <span class="kw1">public</span> <span class="kw1">override</span> <span class="kw4">bool</span> CanConvert<span class="br0">&#40;</span>Type objectType<span class="br0">&#41;</span>
&nbsp; &nbsp; <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">return</span> <span class="kw3">typeof</span><span class="br0">&#40;</span>IIdentity<span class="sy0">&lt;</span>T<span class="sy0">&gt;</span><span class="br0">&#41;</span><span class="sy0">.</span><span class="me1">IsAssignableFrom</span><span class="br0">&#40;</span>objectType<span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; <span class="br0">&#125;</span>
<span class="br0">&#125;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">public class IdentityJsonConverter&lt;T&gt; : JsonConverter
{
    public override void WriteJson(JsonWriter writer, object value, JsonSerializer serializer)
    {
        writer.WriteValue(((IIdentity&lt;T&gt;)value).RawValue);
    }

    public override object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer)
    {
        if (reader.Value != null)
        {
            var ctor = objectType.GetConstructor(new Type[] { typeof(T) });
            var obj = ctor.Invoke(new object[] { (T)Convert.ChangeType(reader.Value, typeof(T)) });
            return obj;
        }
        else
        {
            return null;
        }
    }

    public override bool CanConvert(Type objectType)
    {
        return typeof(IIdentity&lt;T&gt;).IsAssignableFrom(objectType);
    }
}</pre></div></div>

<p>How it works:</p>
<p><code>CanConvert</code> identifies any implementations of IIdentity<int> as something this converter can handle. </p>
<p><code>WriteJson</code> is called when JSON.Net is converting to JSON and simply returns the underlying value of my Identity. </p>
<p><code>ReadJson</code> is called to convert from raw JSON to C#. Converting JSON is slightly more complex, as I allow for null values from the client (it doesn&#8217;t generate id&#8217;s) so when the JSON value is null I pass that on as a null Identity. If it&#8217;s not null, I use reflection on the concrete Identity to find the single parameter constructor and invoke it with incoming JSON converted to the expected type (<code>int</code> for the examples above). </p>
<p>If I wasn&#8217;t generating these Identity classes, there would be some risk in assuming the presence of a constructor of that shape. Because I&#8217;m generating it, I can save time because i know it&#8217;s all or nothing, either all of the Identity objects will work or none of them will. </p>
<h2>Employing it in ASP.Net</h2>
<p>To use this custom JSONConverter when ASP.Net is serializing/deserializing Action responses and inputs, I add JSON options to MVC during the ConfigureServics call of Startup:</p>
<p><b>Startup.cs</b></p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="csharp"><thead><tr><td colspan="2"  class="head">C#</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
</pre></td><td class="de1"><pre class="de1"><span class="kw1">public</span> IServiceProvider ConfigureServices<span class="br0">&#40;</span>IServiceCollection services<span class="br0">&#41;</span>
<span class="br0">&#123;</span>
&nbsp; &nbsp; <span class="co1">// Add framework services.</span>
&nbsp; &nbsp; services<span class="sy0">.</span><span class="me1">AddMvc</span><span class="br0">&#40;</span><span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="sy0">.</span><span class="me1">AddJsonOptions</span><span class="br0">&#40;</span>options <span class="sy0">=&gt;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; options<span class="sy0">.</span><span class="me1">SerializerSettings</span><span class="sy0">.</span><span class="me1">Converters</span><span class="sy0">.</span><span class="kw1">Add</span><span class="br0">&#40;</span><span class="kw3">new</span> IdentityJsonConverter<span class="sy0">&lt;</span>Int32<span class="sy0">&gt;</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp;<span class="co1">// ...</span>
<span class="br0">&#125;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">public IServiceProvider ConfigureServices(IServiceCollection services)
{
    // Add framework services.
    services.AddMvc()
            .AddJsonOptions(options =&gt; {
                options.SerializerSettings.Converters.Add(new IdentityJsonConverter&lt;Int32&gt;());
            });

   // ...
}</pre></div></div>

<p>Now all attempts to deserialize a value into an IIdentity property and serialization to respond with one of these values will pass through the custom mapper and I have the benefit of my custom type in my server-side logic without any extra overhead in my client-side app or code to write as I add new models or properties.</p>
]]></content:encoded>
			<wfw:commentRss>/index.php/webdev/serverprogramming/aspnet/mapping-complex-types-tofrom-json-with-json-net/feed/</wfw:commentRss>
		<slash:comments>1</slash:comments>
		</item>
		<item>
		<title>AngularJS vs Knockout &#8211; Serialization (4 of 8)</title>
		<link>/index.php/webdev/uidevelopment/angularjs-vs-knockout-serialization-4/</link>
		<comments>/index.php/webdev/uidevelopment/angularjs-vs-knockout-serialization-4/#comments</comments>
		<pubDate>Thu, 10 Oct 2013 13:05:00 +0000</pubDate>
		<dc:creator><![CDATA[Eli Weinstock-Herman (tarwn)]]></dc:creator>
				<category><![CDATA[Javascript]]></category>
		<category><![CDATA[UI Development]]></category>
		<category><![CDATA[angularjs]]></category>
		<category><![CDATA[json]]></category>
		<category><![CDATA[knockout]]></category>
		<category><![CDATA[serialization]]></category>

		<guid isPermaLink="false">/index.php/2013/10/angularjs-vs-knockout-serialization-4/</guid>
		<description><![CDATA[I'm reviewing Angular and Knockout to determine which would fit better for a variety of upcoming projects. A key operation will be API GETs and POSTs, so how easy or hard will it be to serialize and send data models? Is my server going to have to wade t&#8230;]]></description>
				<content:encoded><![CDATA[<p>I&#8217;m reviewing Angular and Knockout to determine which would fit better for a variety of upcoming projects. A key operation will be API GETs and POSTs, so how easy or hard will it be to serialize and send data models? Is my server going to have to wade through extra framework properties?</p>
<div style="background-color: #eeeeee; padding: 1em;">
This is the fourth of eight posts looking at the capabilities of knockout and Angular. In the <a href="/index.php/WebDev/UIDevelopment/angularjs-vs-knockout-introduction-1" title="AngularJS vs Knockout - Introduction">introduction post</a>, I outlined the capabilities that I am evaluating for. In the <a href="/index.php/WebDev/UIDevelopment/angularjs-vs-knockout-validation-3" title="AngularJS vs Knockout - Validation">third post</a>, I looked at validation. This post is exploring serialization of data models and any ability to prevent frontend values from being sent to the server.
</div>
<p>All of the examples presented throughout the series are available in the <a href="https://github.com/tarwn/AngularJS-vs-Knockout/" title="View all of the post examples on github">tarwn/AngularJS-vs-Knockout</a> repository on github.</p>
<h2>Angular Serialization</h2>
<p>Angular provides a <a href="http://docs.angularjs.org/api/angular.toJson" title="angular.toJson in Angular Documentation">toJson</a> serialization method built in. toJson ignores any values that start with a $, which prevents it from serializing it&#8217;s internal properties into the JSON.</p>
<h3>Angular Serialization Example</h3>
<p>Full source available at <a href="https://github.com/tarwn/AngularJS-vs-Knockout/blob/master/Angular/Serialization.html" title="View full example file on github">Angular/Serialization.html</a>.</p>
<p>Serialization is fairly straightforward. In this example I decided I wanted to see the JSON as I changed values in the form, so I created a <a href="http://docs.angularjs.org/api/ng.$rootScope.Scope#$watch" title="AngularJS: Scope - $watch">$watch</a> to update a $json property on the scope as I changed values. The form includes a number value, a text value, and my example calculated value (a simple integer + 5 in this case).</p>
<div style="background-color: #eeeeee; padding: 1em;">
<strong><span class="MT_red">Warning:</span> </strong>I am only outputting the json to a property for illustration purposes so we can see what the output would be as we make changes. Updating a json property via a watch is not something you would do in a real application.
</div>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="javascript"><thead><tr><td colspan="2"  class="head">Javascript</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
</pre></td><td class="de1"><pre class="de1"><span class="kw1">var</span> sampleApp <span class="sy0">=</span> angular.<span class="me1">module</span><span class="br0">&#40;</span><span class="st0">'sampleApp'</span><span class="sy0">,</span> <span class="br0">&#91;</span><span class="br0">&#93;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
sampleApp.<span class="me1">controller</span><span class="br0">&#40;</span><span class="st0">'SerializationController'</span><span class="sy0">,</span> <span class="kw1">function</span> <span class="br0">&#40;</span>$scope<span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; $scope.<span class="me1">model</span> <span class="sy0">=</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; textValue<span class="sy0">:</span> <span class="st0">&quot;&quot;</span><span class="sy0">,</span>
&nbsp; &nbsp; &nbsp; &nbsp; integerValue<span class="sy0">:</span> <span class="nu0">0</span>
&nbsp; &nbsp; <span class="br0">&#125;</span><span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; <span class="co1">// this calculated value won't show up in json</span>
&nbsp; &nbsp; $scope.<span class="me1">model</span>.<span class="me1">getCalculatedInteger</span> <span class="sy0">=</span> <span class="kw1">function</span> <span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">return</span> $scope.<span class="me1">model</span>.<span class="me1">integerValue</span> <span class="sy0">+</span> <span class="nu0">5</span><span class="sy0">;</span>
&nbsp; &nbsp; <span class="br0">&#125;</span><span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; <span class="co1">// this one will show up</span>
&nbsp; &nbsp; $scope.<span class="me1">model</span>.<span class="me1">calculatedInteger</span> <span class="sy0">=</span> <span class="nu0">0</span><span class="sy0">;</span>
&nbsp; &nbsp; $scope.$watch<span class="br0">&#40;</span><span class="st0">'model.getCalculatedInteger()'</span><span class="sy0">,</span> <span class="kw1">function</span><span class="br0">&#40;</span>newVal<span class="sy0">,</span> oldVal<span class="br0">&#41;</span><span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; $scope.<span class="me1">model</span>.<span class="me1">calculatedInteger</span> <span class="sy0">=</span> $scope.<span class="me1">model</span>.<span class="me1">getCalculatedInteger</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; <span class="br0">&#125;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; <span class="co1">// json output when changes occur inside the model object</span>
&nbsp; &nbsp; $scope.$watch<span class="br0">&#40;</span><span class="st0">&quot;model&quot;</span><span class="sy0">,</span> <span class="kw1">function</span> <span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; $scope.$json <span class="sy0">=</span> angular.<span class="me1">toJson</span><span class="br0">&#40;</span>$scope.<span class="me1">model</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; <span class="br0">&#125;</span><span class="sy0">,</span> <span class="kw2">true</span><span class="br0">&#41;</span><span class="sy0">;</span>
<span class="br0">&#125;</span><span class="br0">&#41;</span><span class="sy0">;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">var sampleApp = angular.module('sampleApp', []);

sampleApp.controller('SerializationController', function ($scope) {
    $scope.model = {
        textValue: "",
        integerValue: 0
    };

    // this calculated value won't show up in json
    $scope.model.getCalculatedInteger = function () {
        return $scope.model.integerValue + 5;
    };

    // this one will show up
    $scope.model.calculatedInteger = 0;
    $scope.$watch('model.getCalculatedInteger()', function(newVal, oldVal){
        $scope.model.calculatedInteger = $scope.model.getCalculatedInteger();
    });

    // json output when changes occur inside the model object
    $scope.$watch("model", function () {
        $scope.$json = angular.toJson($scope.model);
    }, true);
});</pre></div></div>

<p>The controller and form is based on ones I used in prior examples, but I found I had to make modifications to make the serialization happy. </p>
<p>The first issue was that it will not serialize $scope, so I had to move the properties I want to serialize to an object inside scope. This seems reasonable, as the top level is unlikely to be an object I have read or want to write over the wire. It&#8217;s likely to have one or more data models attached to it and a variety of front-end specific values, so this limitation shouldn&#8217;t have any real world impact.</p>
<p>The second issue I ran into is the calculation I was using was a function rather than a property, so it isn&#8217;t serialized. I worked around this by adding a watch for the function result and a field to store the result of the function, using the watch to update the field. This works fine for my overly simplistic &#8220;plus 5&#8221; function, but I don&#8217;t know how well it would scale to watching several functions with multiple variables and calls out to complex sub-calculations, conditional operations, etc.</p>
<h2>Knockout Serialization</h2>
<p>Knockout includes a built-in <a href="http://knockoutjs.com/documentation/json-data.html" title="Knockout: Loading and Saving JSON data">toJson</a> function, just like Angular. Since Knockout tracks data using observables, it first converts all observables into raw values before serializing, so computed observables (roughly parallel to functions in AngularJS) and observables for raw values both get serialized without any difference. </p>
<h3>Simple Knockout Serialization</h3>
<p>Full source available at <a href="https://github.com/tarwn/AngularJS-vs-Knockout/blob/master/Knockout/Serialization.html" title="View full example file on github">Knockout/Serialization.html</a>.</p>
<p>Like the AngularJS example, we&#8217;re serializing a child model with text, an integer, and a calculated value of the integer + 5.</p>
<div style="background-color: #eeeeee; padding: 1em;">
<strong><span class="MT_red">Warning:</span> </strong>I have only included a json computed property for illustration purposes so we can see what the output would be as we make changes. In the real world you would only generate the JSON when you needed it, not in an observable like this.
</div>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="javascript"><thead><tr><td colspan="2"  class="head">Javascript</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
</pre></td><td class="de1"><pre class="de1"><span class="kw1">var</span> SerializationModel <span class="sy0">=</span> <span class="kw1">function</span> <span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; <span class="kw1">this</span>.<span class="me1">model</span> <span class="sy0">=</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; textValue<span class="sy0">:</span> ko.<span class="me1">observable</span><span class="br0">&#40;</span><span class="st0">&quot;&quot;</span><span class="br0">&#41;</span><span class="sy0">,</span>
&nbsp; &nbsp; &nbsp; &nbsp; integerValue<span class="sy0">:</span> ko.<span class="me1">observable</span><span class="br0">&#40;</span><span class="nu0">0</span><span class="br0">&#41;</span>
&nbsp; &nbsp; <span class="br0">&#125;</span><span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; <span class="kw1">this</span>.<span class="me1">model</span>.<span class="me1">calculatedInteger</span> <span class="sy0">=</span> ko.<span class="me1">computed</span><span class="br0">&#40;</span><span class="kw1">function</span> <span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">return</span> parseInt<span class="br0">&#40;</span><span class="kw1">this</span>.<span class="me1">model</span>.<span class="me1">integerValue</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#41;</span> <span class="sy0">+</span> <span class="nu0">5</span><span class="sy0">;</span>
&nbsp; &nbsp; <span class="br0">&#125;</span><span class="sy0">,</span> <span class="kw1">this</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; <span class="kw1">this</span>.<span class="me1">json</span> <span class="sy0">=</span> ko.<span class="me1">computed</span><span class="br0">&#40;</span><span class="kw1">function</span> <span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">return</span> ko.<span class="me1">toJSON</span><span class="br0">&#40;</span><span class="kw1">this</span>.<span class="me1">model</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; <span class="br0">&#125;</span><span class="sy0">,</span> <span class="kw1">this</span><span class="br0">&#41;</span><span class="sy0">;</span>
<span class="br0">&#125;</span><span class="sy0">;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">var SerializationModel = function () {
    this.model = {
        textValue: ko.observable(""),
        integerValue: ko.observable(0)
    };

    this.model.calculatedInteger = ko.computed(function () {
        return parseInt(this.model.integerValue()) + 5;
    }, this);

    this.json = ko.computed(function () {
        return ko.toJSON(this.model);
    }, this);
};</pre></div></div>

<p>The Knockout example was shorter due to the built-in <a href="http://knockoutjs.com/documentation/computedObservables.html" title="Knockout: Computed Observables">computed observable</a>. There weren&#8217;t really any gotchas to this example.</p>
<h3>Knockout Serialization with Filtering</h3>
<p>Full source available at <a href="https://github.com/tarwn/AngularJS-vs-Knockout/blob/master/Knockout/SerializationWithFiltering.html" title="View full example file on github">Knockout/SerializationWithFiltering.html</a>.</p>
<p>Unlike Angular, Knockout&#8217;s toJson method accepts an argument that allows you to filter or transform values as they are serialized. The function accepts a key value pair. Returning the value causes it to be included in the output, while returning undefined causes it to be left out of the serialization.</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="javascript"><thead><tr><td colspan="2"  class="head">Javascript</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
</pre></td><td class="de1"><pre class="de1"><span class="kw1">var</span> SerializationModel <span class="sy0">=</span> <span class="kw1">function</span> <span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; <span class="kw1">this</span>.<span class="me1">textValue</span> <span class="sy0">=</span> ko.<span class="me1">observable</span><span class="br0">&#40;</span><span class="st0">&quot;&quot;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; <span class="kw1">this</span>.<span class="me1">integerValue</span> <span class="sy0">=</span> ko.<span class="me1">observable</span><span class="br0">&#40;</span><span class="nu0">0</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; <span class="kw1">this</span>.<span class="me1">soonToBeFake</span> <span class="sy0">=</span> ko.<span class="me1">observable</span><span class="br0">&#40;</span><span class="st0">&quot;I will never get transmitted&quot;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; <span class="kw1">this</span>.<span class="me1">calculatedInteger</span> <span class="sy0">=</span> ko.<span class="me1">computed</span><span class="br0">&#40;</span><span class="kw1">function</span> <span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">return</span> parseInt<span class="br0">&#40;</span><span class="kw1">this</span>.<span class="me1">integerValue</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#41;</span> <span class="sy0">+</span> <span class="nu0">5</span><span class="sy0">;</span>
&nbsp; &nbsp; <span class="br0">&#125;</span><span class="sy0">,</span> <span class="kw1">this</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; <span class="co1">// calculate json, but filter out json property while doing so</span>
&nbsp; &nbsp; <span class="kw1">this</span>.<span class="me1">json</span> <span class="sy0">=</span> ko.<span class="me1">computed</span><span class="br0">&#40;</span><span class="kw1">function</span> <span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">return</span> ko.<span class="me1">toJSON</span><span class="br0">&#40;</span><span class="kw1">this</span><span class="sy0">,</span> <span class="kw1">function</span> <span class="br0">&#40;</span>key<span class="sy0">,</span> value<span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">if</span> <span class="br0">&#40;</span>key <span class="sy0">==</span> <span class="st0">&quot;json&quot;</span><span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">return</span> <span class="kw2">undefined</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">else</span> <span class="kw1">if</span> <span class="br0">&#40;</span>key <span class="sy0">==</span> <span class="st0">&quot;soonToBeFake&quot;</span><span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">return</span> <span class="st0">&quot;xxxxxx masked xxxxxx&quot;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">else</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">return</span> value<span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span><span class="sy0">,</span> <span class="st0">&quot; &quot;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; <span class="br0">&#125;</span><span class="sy0">,</span> <span class="kw1">this</span><span class="br0">&#41;</span><span class="sy0">;</span>
<span class="br0">&#125;</span><span class="sy0">;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">var SerializationModel = function () {
    this.textValue = ko.observable("");
    this.integerValue = ko.observable(0);
    this.soonToBeFake = ko.observable("I will never get transmitted");

    this.calculatedInteger = ko.computed(function () {
        return parseInt(this.integerValue()) + 5;
    }, this);

    // calculate json, but filter out json property while doing so
    this.json = ko.computed(function () {
        return ko.toJSON(this, function (key, value) {
            if (key == "json")
                return undefined;
            else if (key == "soonToBeFake")
                return "xxxxxx masked xxxxxx";
            else
                return value;
        }, " ");
    }, this);
};</pre></div></div>

<p>In this case I am serializing the top level viewmodel instead of sub-object. I am filtering out the &#8220;json&#8221; property and masking the content of the &#8220;soonToBeFake&#8221; property.</p>
<h2>Some Difference</h2>
<p>There&#8217;s not much to this one, but we did see a couple differences.</p>
<p><b>Computeds/Functions</b></p>
<p>Knockout computed values are automatically included in the serialization, while AngularJS requires extra steps of setting up a $watch and populating a field. </p>
<p>Unfortunately, AngularJS&#8217;s watches are updated far more frequently then knockout&#8217;s computeds and run the risk of causing infinite loops (or actually a maximum iteration error). At least <a href="http://www.benlesh.com/2013/08/angularjs-watch-digest-and-apply-oh-my.html">one post</a> I&#8217;ve read also suggest strongly not to use watches in controllers (lots of good stuff on Ben&#8217;s blog). </p>
<p>Note: Knockout has a section on <a href="http://knockoutjs.com/documentation/computedObservables.html#note_why_circular_dependencies_arent_meaningful" title="knockout - observables - circular dependencies">Circular Dependencies</a> that explains how computed observables avoid the infinite loop issue.</p>
<p><b>!Computed/Functions <span class="MT_orange">(Updated)</span></b></p>
<p>Phillip brought up a good point below. I&#8217;m reviewing these with some capabilities in mind, but also some ideas about projects I&#8217;m planning to use them in. I want my computed values to get sent over the wire, but he&#8217;s absolutely right that many projects do not.</p>
<p>In this case, Angular ignoring functions is a plus. There&#8217;s no extra work required to communicate only your model properties over the wire. With knockout, you would need to separate the model properties from the computed ones as two objects (a backing model + one with computeds wrapped around it), add a sub-object to hold your computeds and filter it out of serialization, use a naming convention that you can easily filter out, or assign them all as additional functions on the observable properties (thus accessible for binding, but ignored when evaluating the value of the observable). And someone will probably add some more options that I didn&#8217;t think of below.</p>
<p><b>Filtering and Masking</b></p>
<p>AngularJS automatically filters out anything starting with $, which is nice and requires no extra work. Knockout, on the other hand, doesn&#8217;t automatically filter anything out but does provide the ability to define your own filter and masking routine. </p>
<h2>Final Thoughts <span class="MT_orange">(Updated)</span></h2>
<p>Overall these were both fairly straight-forward. I feel the Knockout method was easier (and safer) to use <em>for the projects I had in mind</em>, since it has a mechanism to treat computed values the same as regular observables. I appreciate the ease of use of the Angular toJson function, but feel a little dirty using their internal variable naming pattern just to ignore values in serialization, especially when knockout (for a couple more lines of code) could duplicate this (<a href="https://github.com/tarwn/AngularJS-vs-Knockout/blob/master/Knockout/SerializationWithSpecialCharacterFiltering.html" title="Knockout example">sample on github</a> for any special character I wanted to use.</p>
<p>On the other hand, if you only want your raw model properties communicated to the server, then Angular&#8217;s going to be cleaner because you now have to add the extra logic to Knockout to suppress or separate the computed values from your model.</p>
<div style="background-color: #DDDDDD; padding: 8px; width: 400px;">
<h3>Knockout vs AngularJS</h3>
<ul style="margin: 0px; padding: 4px;">
<li><a href="/index.php/WebDev/UIDevelopment/angularjs-vs-knockout-introduction-1">Introductory Post</a></li>
<li><a href="/index.php/WebDev/UIDevelopment/angularjs-vs-knockout-data-binding-2">Data Binding</a></li>
<li><a href="/index.php/WebDev/UIDevelopment/angularjs-vs-knockout-validation-3">Validation</a></li>
<li><b>Serialization</b></li>
<li><a href="/index.php/WebDev/UIDevelopment/angularjs-vs-knockout-templating-5">Templating</a></li>
<li><a href="/index.php/WebDev/UIDevelopment/angularjs-vs-knockout-modules-and-di-6">Modules + Dependency Injection</a></li>
<li><a href="/index.php/WebDev/UIDevelopment/angularjs-vs-knockout-automated-testing-7">Automated Testing</a></li>
<li><a href="/index.php/WebDev/UIDevelopment/AJAX/angularjs-vs-knockout-spa-routing-history-8">SPA Routing/History</a></li>
<li><a href="/index.php/WebDev/UIDevelopment/angularjs-vs-knockout-final-thoughts-9">Final, Final Thoughts</a></li>
</ul>
</div>
]]></content:encoded>
			<wfw:commentRss>/index.php/webdev/uidevelopment/angularjs-vs-knockout-serialization-4/feed/</wfw:commentRss>
		<slash:comments>9</slash:comments>
		</item>
	</channel>
</rss>
