<?xml version="1.0" encoding="UTF-8"?><rss version="2.0"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:atom="http://www.w3.org/2005/Atom"
	xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
	xmlns:slash="http://purl.org/rss/1.0/modules/slash/"
	>

<channel>
	<title>sorting &#8211; LessthanDot</title>
	<atom:link href="/index.php/tag/sorting/feed/" rel="self" type="application/rss+xml" />
	<link>/</link>
	<description>A Technical Community for IT Professionals</description>
	<lastBuildDate>Sat, 09 Mar 2019 12:50:36 +0000</lastBuildDate>
	<language>en-US</language>
	<sy:updatePeriod>hourly</sy:updatePeriod>
	<sy:updateFrequency>1</sy:updateFrequency>
	<generator>https://wordpress.org/?v=4.6.1</generator>
	<item>
		<title>MongoDB: How to limit results and how to page through results</title>
		<link>/index.php/datamgmt/dbadmin/mssqlserveradmin/mongodb-how-to-limit-results/</link>
		<comments>/index.php/datamgmt/dbadmin/mssqlserveradmin/mongodb-how-to-limit-results/#respond</comments>
		<pubDate>Sat, 26 Jan 2013 12:41:00 +0000</pubDate>
		<dc:creator><![CDATA[SQLDenis]]></dc:creator>
				<category><![CDATA[Microsoft SQL Server Admin]]></category>
		<category><![CDATA[bigdata]]></category>
		<category><![CDATA[mongodb]]></category>
		<category><![CDATA[nosql]]></category>
		<category><![CDATA[paging]]></category>
		<category><![CDATA[sorting]]></category>

		<guid isPermaLink="false">/index.php/2013/01/mongodb-how-to-limit-results/</guid>
		<description><![CDATA[In this post we are going to take a look at how to limit results in MongoDB as well how to page through results. MongoDB use limit to limit the number of results return, MongoDB use skip to skip a number of records from the results set. Using limit in c&#8230;]]></description>
				<content:encoded><![CDATA[<p>In this post we are going to take a look at how to limit results in MongoDB as well how to page through results. MongoDB use limit to limit the number of results return, MongoDB use skip to skip a number of records from the results set. Using limit in conjunction with skip enables you to do paging in MongoDB.</p>
<p>Let&#8217;s take a look at how this works</p>
<p>To get started insert the following into your MongoDB database</p>
<pre>db.Blog.insert( { name : "Denis",  age : 20, city : "Princeton" } )
db.Blog.insert( { name : "Abe",    age : 30, city : "Amsterdam" } )
db.Blog.insert( { name : "John",   age : 40, city : "New York"  } )
db.Blog.insert( { name : "Xavier", age : 10, city : "Barcelona" } )
db.Blog.insert( { name : "Zen",    age : 50, city : "Kyoto"     } )</pre>
<p>To return everything, you would execute the following</p>
<pre>db.Blog.find()</pre>
<p>Here are the results</p>
<pre>{ "_id" : ObjectId("51028ae0a8c33b71ed76a807"), "name" : "Denis", "age" : 20, "city" : "Princeton" }
{ "_id" : ObjectId("51028ae0a8c33b71ed76a808"), "name" : "Abe", "age" : 30, "city" : "Amsterdam" }
{ "_id" : ObjectId("51028ae2a8c33b71ed76a809"), "name" : "John", "age" : 40, "city" : "New York" }
{ "_id" : ObjectId("51028ae2a8c33b71ed76a80a"), "name" : "Xavier", "age" : 10, "city" : "Barcelona" }
{ "_id" : ObjectId("51028ae4a8c33b71ed76a80b"), "name" : "Zen", "age" : 50, "city" : "Kyoto" }</pre>
<p>
<h2>Limiting results in MongoDB</h2>
<p>To return just the first 2 items from the collection</p>
<pre>db.Blog.find().limit(2)</pre>
<p>Here are the results</p>
<pre>{ "_id" : ObjectId("5103e22c88a39c3c0b2585e1"), "name" : "Denis", "age" : 20, "city" : "Princeton" }
{ "_id" : ObjectId("5103e22d88a39c3c0b2585e2"), "name" : "Abe", "age" : 30, "city" : "Amsterdam" }</pre>
<p>That are indeed the first two, but what if we want to have it sorted by name?<br />
In that case we can add sort, run the following</p>
<pre>db.Blog.find().sort({name: 1}).limit(2)</pre>
<p>Here are the results</p>
<pre>{ "_id" : ObjectId("5103e22d88a39c3c0b2585e2"), "name" : "Abe", "age" : 30, "city" : "Amsterdam" }
{ "_id" : ObjectId("5103e22c88a39c3c0b2585e1"), "name" : "Denis", "age" : 20, "city" : "Princeton" }</pre>
<p>We can of course only return name and nothing else, this was described in the post <a href="/index.php/DataMgmt/DBProgramming/mongodb-how-to-include-and">MongoDB: How to include and exclude the fields you want in results</a></p>
<p>Run the following</p>
<pre>db.Blog.find(null, {name: 1, _id: 0}).sort({name: 1}).limit(2)</pre>
<p>Here are the results</p>
<pre>{ "name" : "Abe" }
{ "name" : "Denis" }</pre>
<p>
<h2>Paging in MongoDB</h2>
<p>Now, let&#8217;s take a look at how we can return items 3 and 4, this would be John and Xavier. In this case we need to use skip, all we have to add is skip(2)</p>
<p>Here is what the command looks like, run the following</p>
<pre>db.Blog.find(null, {name: 1, _id: 0}).sort({name: 1}).limit(2).skip(2)</pre>
<p>And here are the results</p>
<pre>{ "name" : "John" }
{ "name" : "Xavier" }</pre>
<p>If you pass in values that are outside of the number of items in the collection, you won&#8217;t get an error but neither will you get results. If you were to skip 6 items, you won&#8217;t get anything back</p>
<pre>db.Blog.find(null, {name: 1, _id: 0}).sort({name: 1}).limit(2).skip(6)</pre>
<p>What if you want to return the items in the collection in the order that they were inserted onto disk? You can use the $natural parameter, the $natural parameter returns items according to their order on disk. If you use -1, you can get them returned in the reverse order</p>
<pre>db.Blog.find().sort( { $natural: -1 } )</pre>
<p>Here are the results </p>
<pre>{ "_id" : ObjectId("5103eaa688a39c3c0b2585ed"), "name" : "Zen", "age" : 50, "city" : "Kyoto" }
{ "_id" : ObjectId("5103eaa588a39c3c0b2585ec"), "name" : "Xavier", "age" : 10, "city" : "Barcelona" }
{ "_id" : ObjectId("5103eaa588a39c3c0b2585eb"), "name" : "John", "age" : 40, "city" : "New York" }
{ "_id" : ObjectId("5103eaa588a39c3c0b2585ea"), "name" : "Abe", "age" : 30, "city" : "Amsterdam" }
{ "_id" : ObjectId("5103eaa588a39c3c0b2585e9"), "name" : "Denis", "age" : 20, "city" : "Princeton" }</pre>
<p>Just a warning when using sort(), be aware of the following limitation</p>
<blockquote><p>Warning The sort function requires that the entire sort be able to complete within 32 megabytes. When the sort option consumes more than 32 megabytes, MongoDB will return an error. Use cursor.limit(), or create an index on the field that youâ€™re sorting to avoid this error.</p></blockquote>
<p>That is all for this post, if you are interested in my other MongoDB posts, you can find them here:<br />
<a href="/index.php/DataMgmt/DBProgramming/creating-mongodb-as-a-service">Install MongoDB as a Windows Service</a><br />
<a href="/index.php/DataMgmt/DBProgramming/doing-upserts-in-mongodb">UPSERTs with MongoDB</a><br />
<a href="/index.php/DataMgmt/DBProgramming/mongodb-how-to-sort-results">How to sort results in MongoDB</a><br />
<a href="/index.php/DataMgmt/DBProgramming/indexes-in-mongodb">Indexes in MongoDB: A quick overview</a><br />
<a href="/index.php/DataMgmt/DBProgramming/multidocument-updates-with-mongodb">Multidocument updates with MongoDB</a><br />
<a href="/index.php/DataMgmt/DBProgramming/mongodb-how-to-include-and">MongoDB: How to include and exclude the fields you want in results</a></p>
]]></content:encoded>
			<wfw:commentRss>/index.php/datamgmt/dbadmin/mssqlserveradmin/mongodb-how-to-limit-results/feed/</wfw:commentRss>
		<slash:comments>0</slash:comments>
		</item>
		<item>
		<title>MongoDB: How to include and exclude the fields you want in results</title>
		<link>/index.php/datamgmt/dbprogramming/mongodb-how-to-include-and/</link>
		<comments>/index.php/datamgmt/dbprogramming/mongodb-how-to-include-and/#respond</comments>
		<pubDate>Fri, 25 Jan 2013 11:54:00 +0000</pubDate>
		<dc:creator><![CDATA[SQLDenis]]></dc:creator>
				<category><![CDATA[Database Programming]]></category>
		<category><![CDATA[bigdata]]></category>
		<category><![CDATA[filtering]]></category>
		<category><![CDATA[mongodb]]></category>
		<category><![CDATA[nosql]]></category>
		<category><![CDATA[sorting]]></category>

		<guid isPermaLink="false">/index.php/2013/01/mongodb-how-to-include-and/</guid>
		<description><![CDATA[In this MongoDB post we are going to look at how to return only the fields you want. We already looked at how to sort the results in the MongoDB, how to sort results but we didn't show you how to return just the fields you want.

To get started insert&#8230;]]></description>
				<content:encoded><![CDATA[<p>In this MongoDB post we are going to look at how to return only the fields you want. We already looked at how to sort the results in the <a href="/index.php/DataMgmt/DBProgramming/mongodb-how-to-sort-results">MongoDB, how to sort results</a> post but we didn&#8217;t show you how to return just the fields you want.</p>
<p>To get started insert the following into your MongoDB database</p>
<pre>db.Blog.insert( { name : "Denis",  age : 20, city : "Princeton" } )
db.Blog.insert( { name : "Abe",    age : 30, city : "Amsterdam" } )
db.Blog.insert( { name : "John",   age : 40, city : "New York"  } )
db.Blog.insert( { name : "Xavier", age : 10, city : "Barcelona" } )
db.Blog.insert( { name : "Zen",    age : 50, city : "Kyoto"     } )</pre>
<p>To return everything, you would execute the following</p>
<pre>db.Blog.find()</pre>
<p>Here are the results</p>
<pre>{ "_id" : ObjectId("51028ae0a8c33b71ed76a807"), "name" : "Denis", "age" : 20, "city" : "Princeton" }
{ "_id" : ObjectId("51028ae0a8c33b71ed76a808"), "name" : "Abe", "age" : 30, "city" : "Amsterdam" }
{ "_id" : ObjectId("51028ae2a8c33b71ed76a809"), "name" : "John", "age" : 40, "city" : "New York" }
{ "_id" : ObjectId("51028ae2a8c33b71ed76a80a"), "name" : "Xavier", "age" : 10, "city" : "Barcelona" }
{ "_id" : ObjectId("51028ae4a8c33b71ed76a80b"), "name" : "Zen", "age" : 50, "city" : "Kyoto" }</pre>
<p>To return the name and not age or city, you would execute this</p>
<pre>db.Blog.find(null, {name: 1});</pre>
<p>Here are the results</p>
<pre>{ "_id" : ObjectId("51028ae0a8c33b71ed76a807"), "name" : "Denis" }
{ "_id" : ObjectId("51028ae0a8c33b71ed76a808"), "name" : "Abe" }
{ "_id" : ObjectId("51028ae2a8c33b71ed76a809"), "name" : "John" }
{ "_id" : ObjectId("51028ae2a8c33b71ed76a80a"), "name" : "Xavier" }
{ "_id" : ObjectId("51028ae4a8c33b71ed76a80b"), "name" : "Zen" }</pre>
<p>To return the name and age but not city, you would execute this</p>
<pre>db.Blog.find(null, {name: 1, age: 1});</pre>
<p>Here are the results</p>
<pre>{ "_id" : ObjectId("51028ae0a8c33b71ed76a807"), "name" : "Denis", "age" : 20 }
{ "_id" : ObjectId("51028ae0a8c33b71ed76a808"), "name" : "Abe", "age" : 30 }
{ "_id" : ObjectId("51028ae2a8c33b71ed76a809"), "name" : "John", "age" : 40 }
{ "_id" : ObjectId("51028ae2a8c33b71ed76a80a"), "name" : "Xavier", "age" : 10 }
{ "_id" : ObjectId("51028ae4a8c33b71ed76a80b"), "name" : "Zen", "age" : 50 }</pre>
<p>Do you notice that _id is always returned? What if you want to exclude _id from the results? You can exclude _id by adding <code>_id: 0</code></p>
<p>Here is how you return just the name</p>
<pre>db.Blog.find(null, {name: 1, _id: 0});</pre>
<p>Results are below</p>
<pre>{ "name" : "Denis" }
{ "name" : "Abe" }
{ "name" : "John" }
{ "name" : "Xavier" }
{ "name" : "Zen" }</pre>
<p>Here is how you return just the name and the age</p>
<pre>db.Blog.find(null, {name: 1, age: 1, _id: 0});</pre>
<p>Here are the results</p>
<pre>{ "name" : "Denis", "age" : 20 }
{ "name" : "Abe", "age" : 30 }
{ "name" : "John", "age" : 40 }
{ "name" : "Xavier", "age" : 10 }
{ "name" : "Zen", "age" : 50 }</pre>
<p>As you can see this is a little different from SQL, if you in SQL do something like <code>SELECT name, age FROM Table</code>, you won&#8217;t get the id or primary key back in the results by default</p>
<p>If you are interested in my other MongoDB posts, you can find them here:<br />
<a href="/index.php/DataMgmt/DBProgramming/creating-mongodb-as-a-service">Install MongoDB as a Windows Service</a><br />
<a href="/index.php/DataMgmt/DBProgramming/doing-upserts-in-mongodb">UPSERTs with MongoDB</a><br />
<a href="/index.php/DataMgmt/DBProgramming/mongodb-how-to-sort-results">How to sort results in MongoDB</a><br />
<a href="/index.php/DataMgmt/DBProgramming/indexes-in-mongodb">Indexes in MongoDB: A quick overview</a><br />
<a href="/index.php/DataMgmt/DBProgramming/multidocument-updates-with-mongodb">Multidocument updates with MongoDB</a></p>
]]></content:encoded>
			<wfw:commentRss>/index.php/datamgmt/dbprogramming/mongodb-how-to-include-and/feed/</wfw:commentRss>
		<slash:comments>0</slash:comments>
		</item>
		<item>
		<title>MongoDB, how to sort results</title>
		<link>/index.php/datamgmt/dbprogramming/mongodb-how-to-sort-results/</link>
		<comments>/index.php/datamgmt/dbprogramming/mongodb-how-to-sort-results/#comments</comments>
		<pubDate>Wed, 16 Jan 2013 08:38:00 +0000</pubDate>
		<dc:creator><![CDATA[SQLDenis]]></dc:creator>
				<category><![CDATA[Database Programming]]></category>
		<category><![CDATA[bigdata]]></category>
		<category><![CDATA[mongodb]]></category>
		<category><![CDATA[nosql]]></category>
		<category><![CDATA[sorting]]></category>

		<guid isPermaLink="false">/index.php/2013/01/mongodb-how-to-sort-results/</guid>
		<description><![CDATA[This is my third MongoDB post, in the first post we look at how we can install MongoDB as a Windows Service, In the second post we looked at how we could do UPSERTs with MongoDB, today we will look at how to sort results in MongoDB

Connect to MongoDB&#8230;]]></description>
				<content:encoded><![CDATA[<p>This is my third MongoDB post, in the first post we look at how we can <a href="/index.php/DataMgmt/DBProgramming/creating-mongodb-as-a-service">install MongoDB as a Windows Service</a>, In the second post we looked at how we could do <a href="/index.php/DataMgmt/DBProgramming/doing-upserts-in-mongodb">UPSERTs with MongoDB</a>, today we will look at how to sort results in MongoDB</p>
<p>Connect to MongoDB and insert the following data</p>
<pre>db.SortTest.insert( { name : "Denis", age : 20 } )
db.SortTest.insert( { name : "Abe", age : 30 } )
db.SortTest.insert( { name : "John", age : 40 } )
db.SortTest.insert( { name : "Xavier", age : 10 } )
db.SortTest.insert( { name : "Zen", age : 50 } )</pre>
<p>Now run this command</p>
<pre>db.SortTest.find()</pre>
<p>You should get back something like the following, the ObjectId will be different for you<br />
{ &#8220;_id&#8221; : ObjectId(&#8220;50f6811c03141917bce6459f&#8221;), &#8220;name&#8221; : &#8220;Denis&#8221;, &#8220;age&#8221; : 20 }<br />
{ &#8220;_id&#8221; : ObjectId(&#8220;50f6811d03141917bce645a0&#8221;), &#8220;name&#8221; : &#8220;Abe&#8221;, &#8220;age&#8221; : 30 }<br />
{ &#8220;_id&#8221; : ObjectId(&#8220;50f6811d03141917bce645a1&#8221;), &#8220;name&#8221; : &#8220;John&#8221;, &#8220;age&#8221; : 40 }<br />
{ &#8220;_id&#8221; : ObjectId(&#8220;50f6811d03141917bce645a2&#8221;), &#8220;name&#8221; : &#8220;Xavier&#8221;, &#8220;age&#8221; : 10 }<br />
{ &#8220;_id&#8221; : ObjectId(&#8220;50f6811e03141917bce645a3&#8221;), &#8220;name&#8221; : &#8220;Zen&#8221;, &#8220;age&#8221; : 50 }</p>
<p>Ordering in MongoDB is pretty easy, you add sort, then you specify the fields you want to sort on, use 1 for ascending and use -1 for descending</p>
<p>If we want to sort by name descending, we can use the following</p>
<pre>db.SortTest.find().sort({name: -1})</pre>
<p>Here are the results, as you can see they are sorted by name descending<br />
{ &#8220;_id&#8221; : ObjectId(&#8220;50f6811e03141917bce645a3&#8221;), &#8220;name&#8221; : &#8220;Zen&#8221;, &#8220;age&#8221; : 50 }<br />
{ &#8220;_id&#8221; : ObjectId(&#8220;50f6811d03141917bce645a2&#8221;), &#8220;name&#8221; : &#8220;Xavier&#8221;, &#8220;age&#8221; : 10 }<br />
{ &#8220;_id&#8221; : ObjectId(&#8220;50f6811d03141917bce645a1&#8221;), &#8220;name&#8221; : &#8220;John&#8221;, &#8220;age&#8221; : 40 }<br />
{ &#8220;_id&#8221; : ObjectId(&#8220;50f6811c03141917bce6459f&#8221;), &#8220;name&#8221; : &#8220;Denis&#8221;, &#8220;age&#8221; : 20 }<br />
{ &#8220;_id&#8221; : ObjectId(&#8220;50f6811d03141917bce645a0&#8221;), &#8220;name&#8221; : &#8220;Abe&#8221;, &#8220;age&#8221; : 30 }</p>
<p>To sort by name ascending, you just have to change -1 to 1</p>
<pre>db.SortTest.find().sort({name: 1})</pre>
<p>Here are the results and the names are now ascending<br />
{ &#8220;_id&#8221; : ObjectId(&#8220;50f6811d03141917bce645a0&#8221;), &#8220;name&#8221; : &#8220;Abe&#8221;, &#8220;age&#8221; : 30 }<br />
{ &#8220;_id&#8221; : ObjectId(&#8220;50f6811c03141917bce6459f&#8221;), &#8220;name&#8221; : &#8220;Denis&#8221;, &#8220;age&#8221; : 20 }<br />
{ &#8220;_id&#8221; : ObjectId(&#8220;50f6811d03141917bce645a1&#8221;), &#8220;name&#8221; : &#8220;John&#8221;, &#8220;age&#8221; : 40 }<br />
{ &#8220;_id&#8221; : ObjectId(&#8220;50f6811d03141917bce645a2&#8221;), &#8220;name&#8221; : &#8220;Xavier&#8221;, &#8220;age&#8221; : 10 }<br />
{ &#8220;_id&#8221; : ObjectId(&#8220;50f6811e03141917bce645a3&#8221;), &#8220;name&#8221; : &#8220;Zen&#8221;, &#8220;age&#8221; : 50 }</p>
<p>Here is age ascending</p>
<pre>db.SortTest.find().sort( { age: -1 } );</pre>
<p>Results<br />
{ &#8220;_id&#8221; : ObjectId(&#8220;50f6811e03141917bce645a3&#8221;), &#8220;name&#8221; : &#8220;Zen&#8221;, &#8220;age&#8221; : 50 }<br />
{ &#8220;_id&#8221; : ObjectId(&#8220;50f6811d03141917bce645a1&#8221;), &#8220;name&#8221; : &#8220;John&#8221;, &#8220;age&#8221; : 40 }<br />
{ &#8220;_id&#8221; : ObjectId(&#8220;50f6811d03141917bce645a0&#8221;), &#8220;name&#8221; : &#8220;Abe&#8221;, &#8220;age&#8221; : 30 }<br />
{ &#8220;_id&#8221; : ObjectId(&#8220;50f6811c03141917bce6459f&#8221;), &#8220;name&#8221; : &#8220;Denis&#8221;, &#8220;age&#8221; : 20 }<br />
{ &#8220;_id&#8221; : ObjectId(&#8220;50f6811d03141917bce645a2&#8221;), &#8220;name&#8221; : &#8220;Xavier&#8221;, &#8220;age&#8221; : 10 }</p>
<p>Here is age descending</p>
<pre>db.SortTest.find().sort( { age: 1 } );</pre>
<p>{ &#8220;_id&#8221; : ObjectId(&#8220;50f6811d03141917bce645a2&#8221;), &#8220;name&#8221; : &#8220;Xavier&#8221;, &#8220;age&#8221; : 10 }<br />
{ &#8220;_id&#8221; : ObjectId(&#8220;50f6811c03141917bce6459f&#8221;), &#8220;name&#8221; : &#8220;Denis&#8221;, &#8220;age&#8221; : 20 }<br />
{ &#8220;_id&#8221; : ObjectId(&#8220;50f6811d03141917bce645a0&#8221;), &#8220;name&#8221; : &#8220;Abe&#8221;, &#8220;age&#8221; : 30 }<br />
{ &#8220;_id&#8221; : ObjectId(&#8220;50f6811d03141917bce645a1&#8221;), &#8220;name&#8221; : &#8220;John&#8221;, &#8220;age&#8221; : 40 }<br />
{ &#8220;_id&#8221; : ObjectId(&#8220;50f6811e03141917bce645a3&#8221;), &#8220;name&#8221; : &#8220;Zen&#8221;, &#8220;age&#8221; : 50 }</p>
<p>Let&#8217;s do another insert, this one has the same name but a different age</p>
<pre>db.SortTest.insert( { name : "Abe", age : 50 } )</pre>
<p>Sorting by name again</p>
<pre>db.SortTest.find().sort({name: -1})</pre>
<p>As you can see Abe is there twice<br />
{ &#8220;_id&#8221; : ObjectId(&#8220;50f6811e03141917bce645a3&#8221;), &#8220;name&#8221; : &#8220;Zen&#8221;, &#8220;age&#8221; : 50 }<br />
{ &#8220;_id&#8221; : ObjectId(&#8220;50f6811d03141917bce645a2&#8221;), &#8220;name&#8221; : &#8220;Xavier&#8221;, &#8220;age&#8221; : 10 }<br />
{ &#8220;_id&#8221; : ObjectId(&#8220;50f6811d03141917bce645a1&#8221;), &#8220;name&#8221; : &#8220;John&#8221;, &#8220;age&#8221; : 40 }<br />
{ &#8220;_id&#8221; : ObjectId(&#8220;50f6811c03141917bce6459f&#8221;), &#8220;name&#8221; : &#8220;Denis&#8221;, &#8220;age&#8221; : 20 }<br />
{ &#8220;_id&#8221; : ObjectId(&#8220;50f6811d03141917bce645a0&#8221;), &#8220;name&#8221; : &#8220;Abe&#8221;, &#8220;age&#8221; : 30 }<br />
{ &#8220;_id&#8221; : ObjectId(&#8220;50f6818103141917bce645a4&#8221;), &#8220;name&#8221; : &#8220;Abe&#8221;, &#8220;age&#8221; : 50 }</p>
<p>Here is how you do a multi-field sort, it is pretty much the same as in SQL, you just add the other field and specify 1 or -1</p>
<p>So let&#8217;s sort by age descending and name ascending</p>
<pre>db.SortTest.find().sort( { age: -1 , name: 1} );</pre>
<p>Here are the results<br />
{ &#8220;_id&#8221; : ObjectId(&#8220;50f6818103141917bce645a4&#8221;), &#8220;name&#8221; : &#8220;Abe&#8221;, &#8220;age&#8221; : 50 }<br />
{ &#8220;_id&#8221; : ObjectId(&#8220;50f6811e03141917bce645a3&#8221;), &#8220;name&#8221; : &#8220;Zen&#8221;, &#8220;age&#8221; : 50 }<br />
{ &#8220;_id&#8221; : ObjectId(&#8220;50f6811d03141917bce645a1&#8221;), &#8220;name&#8221; : &#8220;John&#8221;, &#8220;age&#8221; : 40 }<br />
{ &#8220;_id&#8221; : ObjectId(&#8220;50f6811d03141917bce645a0&#8221;), &#8220;name&#8221; : &#8220;Abe&#8221;, &#8220;age&#8221; : 30 }<br />
{ &#8220;_id&#8221; : ObjectId(&#8220;50f6811c03141917bce6459f&#8221;), &#8220;name&#8221; : &#8220;Denis&#8221;, &#8220;age&#8221; : 20 }<br />
{ &#8220;_id&#8221; : ObjectId(&#8220;50f6811d03141917bce645a2&#8221;), &#8220;name&#8221; : &#8220;Xavier&#8221;, &#8220;age&#8221; : 10 }</p>
<p>Now, we are going to sort by age ascending and name descending</p>
<pre>db.SortTest.find().sort( { age: 1 , name: -1} );</pre>
<p>{ &#8220;_id&#8221; : ObjectId(&#8220;50f6811d03141917bce645a2&#8221;), &#8220;name&#8221; : &#8220;Xavier&#8221;, &#8220;age&#8221; : 10 }<br />
{ &#8220;_id&#8221; : ObjectId(&#8220;50f6811c03141917bce6459f&#8221;), &#8220;name&#8221; : &#8220;Denis&#8221;, &#8220;age&#8221; : 20 }<br />
{ &#8220;_id&#8221; : ObjectId(&#8220;50f6811d03141917bce645a0&#8221;), &#8220;name&#8221; : &#8220;Abe&#8221;, &#8220;age&#8221; : 30 }<br />
{ &#8220;_id&#8221; : ObjectId(&#8220;50f6811d03141917bce645a1&#8221;), &#8220;name&#8221; : &#8220;John&#8221;, &#8220;age&#8221; : 40 }<br />
{ &#8220;_id&#8221; : ObjectId(&#8220;50f6811e03141917bce645a3&#8221;), &#8220;name&#8221; : &#8220;Zen&#8221;, &#8220;age&#8221; : 50 }<br />
{ &#8220;_id&#8221; : ObjectId(&#8220;50f6818103141917bce645a4&#8221;), &#8220;name&#8221; : &#8220;Abe&#8221;, &#8220;age&#8221; : 50 }</p>
<p>As you can see sorting is very easy to do in MongoDB. One thing to keep in mind</p>
<blockquote><p>The sort function requires that the entire sort be able to complete within 32 megabytes. When the sort option consumes more than 32 megabytes, MongoDB will return an error. Use cursor.limit(), or create an index on the field that youâ€™re sorting to avoid this error.</p></blockquote>
<p>We are going to look at how to create indexes in the next post: <a href="/index.php/DataMgmt/DBProgramming/indexes-in-mongodb">Indexes in MongoDB: A quick overview</a></p>
<p>For more MongoDB posts, take a look at these</p>
<p><a href="/index.php/DataMgmt/DBProgramming/creating-mongodb-as-a-service">Install MongoDB as a Windows Service</a><br />
<a href="/index.php/DataMgmt/DBProgramming/doing-upserts-in-mongodb">UPSERTs with MongoDB</a><br />
<a href="/index.php/DataMgmt/DBProgramming/mongodb-how-to-sort-results">How to sort results in MongoDB</a><br />
<a href="/index.php/DataMgmt/DBProgramming/indexes-in-mongodb">Indexes in MongoDB: A quick overview</a><br />
<a href="/index.php/DataMgmt/DBProgramming/multidocument-updates-with-mongodb">Multidocument updates with MongoDB</a><br />
<a href="/index.php/DataMgmt/DBProgramming/mongodb-how-to-include-and">MongoDB: How to include and exclude the fields you want in results</a><br />
<a href="/index.php/DataMgmt/DBAdmin/MSSQLServerAdmin/mongodb-how-to-limit-results">MongoDB: How to limit results and how to page through results</a><br />
<a href="/index.php/DataMgmt/DBAdmin/MSSQLServerAdmin/mongodb-backup-and-restore-databases">MongoDB: How to backup and restore databases</a><br />
<a href="/index.php/DataMgmt/DBAdmin/mongodb-how-to-restore-collections">MongoDB: How to restore collections</a><br />
<a href="/index.php/DataMgmt/DBAdmin/mongodb-how-to-backup-all">MongoDB: How to backup all the databases with one command</a><br />
<a href="/index.php/DataMgmt/DBProgramming/mongodb-exporting-data-into-files">MongoDB: Exporting data into files</a><br />
<a href="/index.php/DataMgmt/DBAdmin/MSSQLServerAdmin/mongodb-how-to-drop-databases">MongoDB: How to drop databases and collections</a><br />
<a href="/index.php/DataMgmt/DBProgramming/mongodb-creating-capped-collections">MongoDB: Creating capped collections</a><br />
<a href="/index.php/DataMgmt/DBProgramming/mongodb-returning-documents-where-fields">MongoDB: Returning documents where fields are null or not existing</a><br />
<a href="/index.php/DataMgmt/DBAdmin/mongodb-using-the-web-based">MongoDB: Using the web-based administrative tool</a></p>
]]></content:encoded>
			<wfw:commentRss>/index.php/datamgmt/dbprogramming/mongodb-how-to-sort-results/feed/</wfw:commentRss>
		<slash:comments>1</slash:comments>
		</item>
	</channel>
</rss>
