<?xml version="1.0" encoding="UTF-8"?><rss version="2.0"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:atom="http://www.w3.org/2005/Atom"
	xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
	xmlns:slash="http://purl.org/rss/1.0/modules/slash/"
	>

<channel>
	<title>denali &#8211; LessthanDot</title>
	<atom:link href="/index.php/tag/denali/feed/" rel="self" type="application/rss+xml" />
	<link>/</link>
	<description>A Technical Community for IT Professionals</description>
	<lastBuildDate>Sat, 09 Mar 2019 12:50:36 +0000</lastBuildDate>
	<language>en-US</language>
	<sy:updatePeriod>hourly</sy:updatePeriod>
	<sy:updateFrequency>1</sy:updateFrequency>
	<generator>https://wordpress.org/?v=4.6.1</generator>
	<item>
		<title>SQL Server 2012 to be released Q1 2012</title>
		<link>/index.php/datamgmt/datadesign/sql-server-2012-to-be/</link>
		<comments>/index.php/datamgmt/datadesign/sql-server-2012-to-be/#respond</comments>
		<pubDate>Wed, 12 Oct 2011 13:48:00 +0000</pubDate>
		<dc:creator><![CDATA[SQLDenis]]></dc:creator>
				<category><![CDATA[Data Modelling and Design]]></category>
		<category><![CDATA[Microsoft SQL Server]]></category>
		<category><![CDATA[denali]]></category>
		<category><![CDATA[sql server 2012]]></category>

		<guid isPermaLink="false">/index.php/2011/10/sql-server-2012-to-be/</guid>
		<description><![CDATA[Ted Kummert, Senior VP, Business Platform Division announced at the PASS Summit 2011 Day One Keynote that the next version of SQL Server will be named SQL Server 2012 
SQL Server 2012 will be released in Q1 2012

They are a variety of clients already&#8230;]]></description>
				<content:encoded><![CDATA[<p>Ted Kummert, Senior VP, Business Platform Division announced at the PASS Summit 2011 Day One Keynote that the next version of SQL Server will be named SQL Server 2012<br />
SQL Server 2012 will be released in the first quarter of  2012</p>
<p>They are a variety of clients already running in production with CTP 3</p>
<p>I am pretty excited about SQL Server 2012, there are a lot of nice things that I will be able to utilize</p>
<p>Also announced SQL Server and SQL Server Parallel Data Warehouse connectors for Apache Hadoop and Excel add-ins for Apache Hive<br />
As a matter of fact Microsoft will submit to the Apache project to get Hadoop running on Windows. </p>
<p>The CTP of Hadoop on Windows Azure will be available by the end of the year </p>
<p>I wonder if it will get integrated with Dryad in some form or another</p>
<p>SQL Crescent will be called PowerView&#8230;.I don&#8217;t know about that PowerView sounds too close to PowerPivot.  PowerView will run on a Windows Phone, iPad2,  Android tablet</p>
<p>SQL Server code-named Data Explorer was also announced, it will be available by the end of this year. Data Explorer is self-service BI</p>
]]></content:encoded>
			<wfw:commentRss>/index.php/datamgmt/datadesign/sql-server-2012-to-be/feed/</wfw:commentRss>
		<slash:comments>0</slash:comments>
		</item>
		<item>
		<title>Microsoft SQL Server, codename &#8220;Denali&#8221;, will be the last release to support OLE DB, ODBC is the new new thing</title>
		<link>/index.php/datamgmt/datadesign/microsoft-sql-server-codename-denali/</link>
		<comments>/index.php/datamgmt/datadesign/microsoft-sql-server-codename-denali/#comments</comments>
		<pubDate>Tue, 30 Aug 2011 16:13:00 +0000</pubDate>
		<dc:creator><![CDATA[SQLDenis]]></dc:creator>
				<category><![CDATA[Data Modelling and Design]]></category>
		<category><![CDATA[Database Programming]]></category>
		<category><![CDATA[Microsoft SQL Server]]></category>
		<category><![CDATA[denali]]></category>
		<category><![CDATA[odbc]]></category>
		<category><![CDATA[ole db]]></category>
		<category><![CDATA[sql server]]></category>
		<category><![CDATA[sql server denali]]></category>

		<guid isPermaLink="false">/index.php/2011/08/microsoft-sql-server-codename-denali/</guid>
		<description><![CDATA[According to the Microsoft SQLNCli team blog, SQL Server, codename "Denali", will be the last release to support OLE DB.

Here is what they are currently saying

The next release of Microsoft SQL Server, codename “Denali”, will be the last release t&#8230;]]></description>
				<content:encoded><![CDATA[<p>According to the Microsoft SQLNCli team blog, SQL Server, codename &#8220;Denali&#8221;, will be the last release to support OLE DB.</p>
<p>Here is what they are currently saying</p>
<blockquote><p>The next release of Microsoft SQL Server, codename “Denali”, will be the last release to support OLE DB. OLE DB will be supported for 7 years from launch, the life of Denali support, to allow you a large window of opportunity for changing your applications before the deprecation. This deprecation applies to the Microsoft SQL Server OLE DB provider only. Other OLE DB providers as well as the OLE DB standard will continue to be supported until explicitly announced.</p>
<p>We encourage you to adopt ODBC in the development of your new and future versions of your application. You don’t need to change your existing applications using OLE DB, as they will continue to be supported for seven years from the launch of Denali, but you may want to consider migrating those applications to ODBC as a part of your future roadmap. </p></blockquote>
<p>And</p>
<blockquote><p>ODBC is the de-facto industry standard for native relational data access, which is supported on all platforms including SQL Azure. Cloud is universal and in order to support all client applications connecting from any platform to the cloud, Microsoft has been fully aligned with ODBC on SQL Azure, as ODBC is the only set of APIs that are available on all platforms including non-Windows platforms.</p></blockquote>
<p>Mmmm..it looks like ODBC is back from the dead&#8230;&#8230;.</p>
<p>What do you think&#8230;how will this impact you? Leave a comment if this affects you or if you have been using ODBC all along</p>
<p>More details including information on how to migrate your applications can be found here: http://blogs.msdn.com/b/sqlnativeclient/archive/2011/08/29/microsoft-is-aligning-with-odbc-for-native-relational-data-access.aspx</p>
]]></content:encoded>
			<wfw:commentRss>/index.php/datamgmt/datadesign/microsoft-sql-server-codename-denali/feed/</wfw:commentRss>
		<slash:comments>5</slash:comments>
		</item>
		<item>
		<title>SQL Server Code Name “Denali” CTP3 Product Guide available for download</title>
		<link>/index.php/datamgmt/datadesign/sql-server-code-name-denali-1/</link>
		<comments>/index.php/datamgmt/datadesign/sql-server-code-name-denali-1/#respond</comments>
		<pubDate>Wed, 10 Aug 2011 09:28:00 +0000</pubDate>
		<dc:creator><![CDATA[SQLDenis]]></dc:creator>
				<category><![CDATA[Data Modelling and Design]]></category>
		<category><![CDATA[denali]]></category>
		<category><![CDATA[documentation]]></category>
		<category><![CDATA[sql server]]></category>
		<category><![CDATA[video]]></category>

		<guid isPermaLink="false">/index.php/2011/08/sql-server-code-name-denali-1/</guid>
		<description><![CDATA[This is pretty cool and it is all in one place, the download is 456.0 MB

The SQL Server Code Name “Denali” CTP3 Product Guide includes useful resources and demos that will help IT Professionals better evaluate of CTP3.  This includes:
-          14&#8230;]]></description>
				<content:encoded><![CDATA[<p>This is pretty cool and it is all in one place, the download is 456.0 MB</p>
<p>I went through the guide and have listed all the white papers, demos, datasheets etc etc.</p>
<p><em>The SQL Server Code Name “Denali” CTP3 Product Guide includes useful resources and demos that will help IT Professionals better evaluate of CTP3.  This includes:<br />
<strong>          14 Product Datasheets</strong></p>
<ul>
<li>Denali Overview</li>
<li>SQL Server High Availability Features</li>
<li>Security and Compliance</li>
<li>Managed Self-Service BI</li>
<li>Reporting Services</li>
<li>Analysis Services</li>
<li>Predictive Analysis</li>
<li>Data Quality Services</li>
<li>Master Data Services</li>
<li>Integration Services</li>
<li>HP Microsoft Business Data Warehouse Appliance</li>
<li>HP Microsoft Business Data Warehouse Appliance Poster</li>
<li>Optimize SQL Server for Private Cloud poster</li>
<li>Hyper-V Private Cloud</li>
</ul>
<p><strong>8 PowerPoint Presentations</strong></p>
<ul>
<li>Denali Technical Overview</li>
<li>Microsoft SQL Server: The Data and BI Platform for Today and Tomorrow</li>
<li>For Partners &#8211; Exploring Opportunities with the Cloud-Ready Information Platform and SQL Server Code Name &#8220;Denali&#8221;</li>
<li>Security Features Overview</li>
<li>All Up Data Warehouse: From SMP to Parallel Data Warehouse</li>
<li>Optimize SQL Server for Private Cloud Technical Presentation</li>
<li>Introducing Microsoft SQL Server Developer Tools,Code Name &#8220;Juneau&#8221;: An Introduction to Doing Database Development in a Modern Way</li>
<li>Best Practices for Building Custom Open Data Protocol (OData) Services with Windows Azure</li>
</ul>
<p><strong>          5 Technical White Papers</strong></p>
<ul>
<li>Denali Technical Overview</li>
<li>Columnstore Indexes for Fast Data Warehouse Query Processing</li>
<li>New Spatial Features in SQL Server</li>
<li>Hyper-V Cloud Practice Builder Onboarding SQL Server Environments</li>
<li>Hyper-V is the best virtualization solution for SQL Server</li>
</ul>
<p><strong>          13 Hands-On Lab Preview Documents</strong></p>
<ul>
<li>User Defined Server Roles</li>
<li>Contained Databases in SQL Server Code Name Denali</li>
<li>Exploring Project Crescent</li>
<li>Migrating Crystal Reports to Microsoft SQL Server Reporting Services</li>
<li>SharePoint 2010 Reporting Services</li>
<li>SharePoint 2010 PerformancePoint Services</li>
<li>Developing a Business Intelligence Semantic Model</li>
<li>Analyzing and Reporting with the Excel 2010 Client</li>
<li>Build Your First Report with SQL Azure Reporting</li>
<li>Introduction to SQL Server Enterprise Information Management</li>
<li>Using SQL Server Developer Tools Codename Juneau to Develop Your SQL Server Denali Database</li>
<li>Distributed Replay in SQL Server Code Name Denali</li>
<li>Multi-Server Management in SQL Server Code Name Denali</li>
</ul>
<p><strong>          6 Click-Through Demonstrations</strong></p>
<ul>
<li>AlwaysOn Availability Groups</li>
<li>Reporting Services &#8211; Crescent Overview</li>
<li>SQL Server Private Cloud &#8211; Resource Pooling</li>
<li>SQL Server Private Cloud &#8211; Elasticity</li>
<li>SQL Server Private Cloud &#8211; Self-Service Provisioning</li>
<li>SQL Server Private Cloud &#8211; Control and Customize</li>
</ul>
<p><strong>          13 Self-Running Demonstrations</strong></p>
<ul>
<li>Contained Database Authentication and Default Schema for Groups</li>
<li>User Defined Audit and Audit Filtering</li>
<li>User Defined Server Roles</li>
<li>Denali Security Instructions and Scripts for Recreating the Self-Running Demos Zip File</li>
<li>Reporting Services &#8211; Crescent Overview</li>
<li>Introduction to Enterprise Information Management (EIM)</li>
<li>Demo 1 &#8211; Data Quality Services (DQS)</li>
<li>Demo 2 &#8211; Using SSIS with DQS for Data Cleansing</li>
<li>Demo 3 &#8211; Master Data Services (MDS) Add-in for Excel</li>
<li>Demo 4 &#8211; Using SSIS with MDS for Lookups</li>
<li>Demo 5 &#8211; Using Query Column Store</li>
<li>Conclusion for EIM Demonstrations</li>
<li>SQL Server Private Cloud &#8211; Resource Pooling</li>
<li>SQL Server Private Cloud &#8211; Elasticity</li>
<li>SQL Server Private Cloud &#8211; Self-Service Provisioning</li>
<li>SQL Server Private Cloud &#8211; Control and Customize</li>
</ul>
<p><strong>          26 Links to On-Line References</p>
<p>          44 Links to On-Line Videos including 26 Presentations from North America TechEd 2011</strong></em><br />
<br />
You can download it here: http://www.microsoft.com/download/en/details.aspx?id=27069</p>
]]></content:encoded>
			<wfw:commentRss>/index.php/datamgmt/datadesign/sql-server-code-name-denali-1/feed/</wfw:commentRss>
		<slash:comments>0</slash:comments>
		</item>
		<item>
		<title>TRY_CONVERT in SQL Server Denali CTP3</title>
		<link>/index.php/datamgmt/datadesign/try_convert-in-sql-server-denali/</link>
		<comments>/index.php/datamgmt/datadesign/try_convert-in-sql-server-denali/#respond</comments>
		<pubDate>Tue, 19 Jul 2011 22:54:00 +0000</pubDate>
		<dc:creator><![CDATA[SQLDenis]]></dc:creator>
				<category><![CDATA[Data Modelling and Design]]></category>
		<category><![CDATA[Database Programming]]></category>
		<category><![CDATA[Microsoft SQL Server]]></category>
		<category><![CDATA[Microsoft SQL Server Admin]]></category>
		<category><![CDATA[denali]]></category>
		<category><![CDATA[functions]]></category>
		<category><![CDATA[sql server]]></category>
		<category><![CDATA[try_convert]]></category>

		<guid isPermaLink="false">/index.php/2011/07/try_convert-in-sql-server-denali/</guid>
		<description><![CDATA[TRY_CONVERT  is a new function in SQL Server Denali CTP3, TRY_CONVERT   enables you to test if a value can be converted to a specific data type, TRY_CONVERT  returns a value cast to the specified data type if the cast succeeds; otherwise, TRY_CONVERT&#8230;]]></description>
				<content:encoded><![CDATA[<p>TRY_CONVERT  is a new function in SQL Server Denali CTP3, TRY_CONVERT   enables you to test if a value can be converted to a specific data type, TRY_CONVERT  returns a value cast to the specified data type if the cast succeeds; otherwise, TRY_CONVERT   returns null.</p>
<p>Here is what Books On Line has to say about TRY_CONVERT</p>
<p><em>TRY_CONVERT takes the value passed to it and tries to convert it to the specified data_type. If the cast succeeds, TRY_CONVERT returns the value as the specified data_type; if an error occurs, null is returned. However if you request a conversion that is explicitly not permitted, then TRY_CONVERT fails with an error.</p>
<p><strong>Arguments</strong></p>
<p><strong>data_type [ ( length ) ]</strong><br />
The data type into which to cast expression.</p>
<p><strong>expression</strong><br />
The value to be cast.</p>
<p><strong>style</strong><br />
Optional integer expression that specifies how the TRY_CONVERT function is to translate expression.</p>
<p>style accepts the same values as the style parameter of the CONVERT function. </p>
<p>The range of acceptable values is determined by the value of data_type. If style is null, then TRY_CONVERT returns null.</em></p>
<p>Here is what the syntax looks like</p>
<pre>TRY_CONVERT ( data_type [ ( length ) ], expression [, style ] )</pre>
<p>Let&#8217;s take a look how this all works, I will create a table and inserts some values</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
</pre></td><td class="de1"><pre class="de1"><span class="kw1">create</span> <span class="kw1">table</span> #test<span class="br0">&#40;</span>SomeCol <span class="kw1">varchar</span><span class="br0">&#40;</span><span class="nu0">100</span><span class="br0">&#41;</span><span class="br0">&#41;</span>
GO
&nbsp;
<span class="kw1">insert</span> #test <span class="kw1">values</span><span class="br0">&#40;</span><span class="st0">'1'</span><span class="br0">&#41;</span>
<span class="kw1">insert</span> #test <span class="kw1">values</span><span class="br0">&#40;</span><span class="st0">'.'</span><span class="br0">&#41;</span>
<span class="kw1">insert</span> #test <span class="kw1">values</span><span class="br0">&#40;</span><span class="st0">'$'</span><span class="br0">&#41;</span>
<span class="kw1">insert</span> #test <span class="kw1">values</span><span class="br0">&#40;</span><span class="st0">'ddd'</span><span class="br0">&#41;</span>
<span class="kw1">insert</span> #test <span class="kw1">values</span><span class="br0">&#40;</span><span class="st0">'---'</span><span class="br0">&#41;</span>
<span class="kw1">insert</span> #test <span class="kw1">values</span><span class="br0">&#40;</span><span class="st0">'000'</span><span class="br0">&#41;</span>
<span class="kw1">insert</span> #test <span class="kw1">values</span><span class="br0">&#40;</span><span class="st0">'123aaa1'</span><span class="br0">&#41;</span>
<span class="kw1">insert</span> #test <span class="kw1">values</span><span class="br0">&#40;</span><span class="st0">'2de'</span><span class="br0">&#41;</span>
<span class="kw1">insert</span> #test <span class="kw1">values</span><span class="br0">&#40;</span><span class="st0">'(((('</span><span class="br0">&#41;</span>
<span class="kw1">insert</span> #test <span class="kw1">values</span><span class="br0">&#40;</span><span class="st0">'20110230'</span><span class="br0">&#41;</span>
<span class="kw1">insert</span> #test <span class="kw1">values</span><span class="br0">&#40;</span><span class="st0">'20110228'</span><span class="br0">&#41;</span>
<span class="kw1">insert</span> #test <span class="kw1">values</span><span class="br0">&#40;</span><span class="st0">'14:58'</span><span class="br0">&#41;</span>
<span class="kw1">insert</span> #test <span class="kw1">values</span><span class="br0">&#40;</span><span class="st0">'16000228'</span><span class="br0">&#41;</span>
<span class="kw1">insert</span> #test <span class="kw1">values</span><span class="br0">&#40;</span><span class="st0">'0.12345678901'</span><span class="br0">&#41;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">create table #test(SomeCol varchar(100))
GO

insert #test values('1')
insert #test values('.')
insert #test values('$')
insert #test values('ddd')
insert #test values('---')
insert #test values('000')
insert #test values('123aaa1')
insert #test values('2de')
insert #test values('((((')
insert #test values('20110230')
insert #test values('20110228')
insert #test values('14:58')
insert #test values('16000228')
insert #test values('0.12345678901')</pre></div></div>

<p>Now, I will try to convert the values in the table to various data types</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
</pre></td><td class="de1"><pre class="de1"><span class="kw1">select</span> SomeCol,
&nbsp; &nbsp; &nbsp; &nbsp;TRY_CONVERT<span class="br0">&#40;</span><span class="kw1">float</span>,SomeCol<span class="br0">&#41;</span> <span class="kw1">as</span> <span class="kw1">float</span>,
&nbsp; &nbsp; &nbsp; &nbsp;TRY_CONVERT<span class="br0">&#40;</span><span class="kw1">date</span>,SomeCol<span class="br0">&#41;</span> <span class="kw1">as</span> <span class="kw1">date</span>,
&nbsp; &nbsp; &nbsp; &nbsp;TRY_CONVERT<span class="br0">&#40;</span>datetime2,SomeCol<span class="br0">&#41;</span> <span class="kw1">as</span> datetime2,
&nbsp; &nbsp; &nbsp; &nbsp;TRY_CONVERT<span class="br0">&#40;</span><span class="kw1">datetime</span>,SomeCol<span class="br0">&#41;</span> <span class="kw1">as</span> <span class="kw1">datetime</span>,
&nbsp; &nbsp; &nbsp; &nbsp;TRY_CONVERT<span class="br0">&#40;</span><span class="kw1">time</span>,SomeCol<span class="br0">&#41;</span> <span class="kw1">as</span> <span class="kw1">time</span>,
&nbsp; &nbsp; &nbsp; &nbsp;TRY_CONVERT<span class="br0">&#40;</span><span class="kw1">numeric</span><span class="br0">&#40;</span><span class="nu0">30</span>,<span class="nu0">10</span><span class="br0">&#41;</span>,SomeCol<span class="br0">&#41;</span> <span class="kw1">as</span> <span class="kw1">numeric</span>,
&nbsp; &nbsp; &nbsp; &nbsp;TRY_CONVERT<span class="br0">&#40;</span><span class="kw1">int</span>,SomeCol<span class="br0">&#41;</span> <span class="kw1">as</span> <span class="kw1">int</span>
<span class="kw1">FROm</span> #test</pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">select SomeCol,
	   TRY_CONVERT(float,SomeCol) as float,
	   TRY_CONVERT(date,SomeCol) as date,
	   TRY_CONVERT(datetime2,SomeCol) as datetime2,
	   TRY_CONVERT(datetime,SomeCol) as datetime,
	   TRY_CONVERT(time,SomeCol) as time,
	   TRY_CONVERT(numeric(30,10),SomeCol) as numeric,
	   TRY_CONVERT(int,SomeCol) as int
FROm #test</pre></div></div>

<p>Here is the result</p>
<div class="tables">
<table>
<tr>
<th>	SomeCol	</th>
<th>	float	</th>
<th>	date	</th>
<th>	datetime2	</th>
<th>	datetime	</th>
<th>	time	</th>
<th>	numeric	</th>
<th>	int	</th>
<tr>
<tr>
<td>	1	</td>
<td>	1	</td>
<td>	NULL	</td>
<td>	NULL	</td>
<td>	NULL	</td>
<td>	NULL	</td>
<td>	1	</td>
<td>	1	</td>
</tr>
<tr>
<td>	.	</td>
<td>	NULL	</td>
<td>	NULL	</td>
<td>	NULL	</td>
<td>	NULL	</td>
<td>	NULL	</td>
<td>	NULL	</td>
<td>	NULL	</td>
</tr>
<tr>
<td>	$	</td>
<td>	NULL	</td>
<td>	NULL	</td>
<td>	NULL	</td>
<td>	NULL	</td>
<td>	NULL	</td>
<td>	NULL	</td>
<td>	NULL	</td>
</tr>
<tr>
<td>	ddd	</td>
<td>	NULL	</td>
<td>	NULL	</td>
<td>	NULL	</td>
<td>	NULL	</td>
<td>	NULL	</td>
<td>	NULL	</td>
<td>	NULL	</td>
</tr>
<tr>
<td>	&#8212;	</td>
<td>	NULL	</td>
<td>	NULL	</td>
<td>	NULL	</td>
<td>	NULL	</td>
<td>	NULL	</td>
<td>	NULL	</td>
<td>	NULL	</td>
</tr>
<tr>
<td>	0	</td>
<td>	0	</td>
<td>	NULL	</td>
<td>	NULL	</td>
<td>	NULL	</td>
<td>	NULL	</td>
<td>	0	</td>
<td>	0	</td>
</tr>
<tr>
<td>	123aaa1	</td>
<td>	NULL	</td>
<td>	NULL	</td>
<td>	NULL	</td>
<td>	NULL	</td>
<td>	NULL	</td>
<td>	NULL	</td>
<td>	NULL	</td>
</tr>
<tr>
<td>	2de	</td>
<td>	NULL	</td>
<td>	NULL	</td>
<td>	NULL	</td>
<td>	NULL	</td>
<td>	NULL	</td>
<td>	NULL	</td>
<td>	NULL	</td>
</tr>
<tr>
<td>	((((	</td>
<td>	NULL	</td>
<td>	NULL	</td>
<td>	NULL	</td>
<td>	NULL	</td>
<td>	NULL	</td>
<td>	NULL	</td>
<td>	NULL	</td>
</tr>
<tr>
<td>	20110230	</td>
<td>	20110230	</td>
<td>	NULL	</td>
<td>	NULL	</td>
<td>	NULL	</td>
<td>	NULL	</td>
<td>	20110230.0000000000</td>
<td>	20110230	</td>
</tr>
<tr>
<td>	20110228	</td>
<td>	20110228	</td>
<td>	2011-02-28	</td>
<td>	00:00.0	</td>
<td>	00:00.0	</td>
<td>	00:00.0	</td>
<td>	20110228.0000000000</td>
<td>	20110228	</td>
</tr>
<tr>
<td>	14:58	</td>
<td>	NULL	</td>
<td>	1900-01-01	</td>
<td>	1900-01-01 14:58:00.0000000	</td>
<td>	1900-01-01 14:58:00.000	</td>
<td>	14:58:00.0000000	</td>
<td>	NULL	</td>
<td>	NULL	</td>
</tr>
<tr>
<td>	16000228	</td>
<td>	16000228	</td>
<td>	1600-02-28	</td>
<td>	1600-02-28 00:00:00.0000000	</td>
<td>	NULL	</td>
<td>	00:00.0	</td>
<td>	16000228.0000000000</td>
<td>	16000228	</td>
</tr>
<tr>
<td>	0.12345678901</td>
<td>	0.12345678901</td>
<td>	NULL	</td>
<td>	NULL	</td>
<td>	NULL	</td>
<td>	NULL	</td>
<td>	0.123456789	</td>
<td>	NULL	</td>
</tr>
</tr>
</tr>
</table></div>
<p>Pretty neat, as you can see if you for example try to convert 16000228	to a datetime you will get 0 since it falls out of the acceptable datetime range, for datetime2 and date you do get a value back. The conversion to numeric(30,10) also shows that the value is truncated after 10 decimals. This function is pretty handy since you won&#8217;t get the conversion errors you would get if you try to convert it with the regular convert function</p>
<p>You can also use CASE or IIF to return if the value can or cannot be converted, below is an example of both</p>
<p><strong>CASE</strong></p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
</pre></td><td class="de1"><pre class="de1"><span class="kw1">SELECT</span> 
&nbsp; &nbsp; <span class="kw1">CASE</span> <span class="kw1">WHEN</span> TRY_CONVERT<span class="br0">&#40;</span><span class="kw1">float</span>,<span class="st0">'bla'</span><span class="br0">&#41;</span> <span class="kw1">IS</span> <span class="sy0">NULL</span> 
&nbsp; &nbsp; <span class="kw1">THEN</span> <span class="st0">'Cast failed'</span>
&nbsp; &nbsp; <span class="kw1">ELSE</span> <span class="st0">'Cast succeeded'</span>
<span class="kw1">END</span> 
<span class="kw1">UNION</span>
<span class="kw1">SELECT</span> 
&nbsp; &nbsp; <span class="kw1">CASE</span> <span class="kw1">WHEN</span> TRY_CONVERT<span class="br0">&#40;</span><span class="kw1">float</span>,<span class="st0">'1'</span><span class="br0">&#41;</span> <span class="kw1">IS</span> <span class="sy0">NULL</span> 
&nbsp; &nbsp; <span class="kw1">THEN</span> <span class="st0">'Cast failed'</span>
&nbsp; &nbsp; <span class="kw1">ELSE</span> <span class="st0">'Cast succeeded'</span>
<span class="kw1">END</span> </pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">SELECT 
    CASE WHEN TRY_CONVERT(float,'bla') IS NULL 
    THEN 'Cast failed'
    ELSE 'Cast succeeded'
END 
UNION
SELECT 
    CASE WHEN TRY_CONVERT(float,'1') IS NULL 
    THEN 'Cast failed'
    ELSE 'Cast succeeded'
END </pre></div></div>

<p>&#8212;&#8212;&#8211;<br />
Cast failed<br />
Cast succeeded</p>
<p><strong>IIF</strong></p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
</pre></td><td class="de1"><pre class="de1"><span class="kw1">SELECT</span> IIF<span class="br0">&#40;</span>TRY_CONVERT<span class="br0">&#40;</span><span class="kw1">float</span>,<span class="st0">'bla'</span><span class="br0">&#41;</span><span class="kw1">IS</span> <span class="sy0">NULL</span>,<span class="st0">'Cast failed'</span>,<span class="st0">'Cast succeeded'</span><span class="br0">&#41;</span>
<span class="kw1">UNION</span>
<span class="kw1">SELECT</span> IIF<span class="br0">&#40;</span>TRY_CONVERT<span class="br0">&#40;</span><span class="kw1">float</span>,<span class="st0">'1'</span><span class="br0">&#41;</span><span class="kw1">IS</span> <span class="sy0">NULL</span>,<span class="st0">'Cast failed'</span>,<span class="st0">'Cast succeeded'</span><span class="br0">&#41;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">SELECT IIF(TRY_CONVERT(float,'bla')IS NULL,'Cast failed','Cast succeeded')
UNION
SELECT IIF(TRY_CONVERT(float,'1')IS NULL,'Cast failed','Cast succeeded')</pre></div></div>

<p>&#8212;&#8212;&#8211;<br />
Cast failed<br />
Cast succeeded</p>
<p>Be aware that if you pass in a NULL, then NULL is returned</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
</pre></td><td class="de1"><pre class="de1"><span class="kw1">select</span> &nbsp;TRY_CONVERT<span class="br0">&#40;</span> <span class="kw1">numeric</span><span class="br0">&#40;</span><span class="nu0">30</span>,<span class="nu0">10</span><span class="br0">&#41;</span>,null<span class="br0">&#41;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">select  TRY_CONVERT( numeric(30,10),null)</pre></div></div>

<p></p>
<p>TRY_CONVERT is something that was long overdue and it will eliminate a lot of issues, no more need for custom IsNumeric and IsInt functions, this one does it all.</p>
]]></content:encoded>
			<wfw:commentRss>/index.php/datamgmt/datadesign/try_convert-in-sql-server-denali/feed/</wfw:commentRss>
		<slash:comments>0</slash:comments>
		</item>
		<item>
		<title>Format function in SQL Server Denali CTP3</title>
		<link>/index.php/datamgmt/datadesign/format-function-in-sql-server/</link>
		<comments>/index.php/datamgmt/datadesign/format-function-in-sql-server/#respond</comments>
		<pubDate>Fri, 15 Jul 2011 08:30:00 +0000</pubDate>
		<dc:creator><![CDATA[SQLDenis]]></dc:creator>
				<category><![CDATA[Data Modelling and Design]]></category>
		<category><![CDATA[denali]]></category>
		<category><![CDATA[format]]></category>
		<category><![CDATA[functions]]></category>
		<category><![CDATA[localization]]></category>
		<category><![CDATA[sql server]]></category>

		<guid isPermaLink="false">/index.php/2011/07/format-function-in-sql-server/</guid>
		<description><![CDATA[SQL Server Denali CTP3 brings a couple of new functions, one of these is the FORMAT  function

The syntax of the format function looks like this

FORMAT ( value, format [, culture ] )

Here is what Books On Line has to say about the arguments that&#8230;]]></description>
				<content:encoded><![CDATA[<p>SQL Server Denali CTP3 brings a couple of new functions, one of these is the FORMAT  function</p>
<p>The syntax of the format function looks like this</p>
<p>FORMAT ( value, format [, culture ] )</p>
<p>Here is what Books On Line has to say about the arguments that you can pass in</p>
<p><em><strong>value</strong><br />
Expression of a supported data type to format.</p>
<p><strong>format</strong><br />
nvarchar format pattern.</p>
<p>The format argument must contain a valid .NET Framework format string, either as a standard format string (for example, &#8220;C&#8221; or &#8220;D&#8221;), or as a pattern of custom characters for dates and numeric values (for example, &#8220;MMMM dd, yyyy (dddd)&#8221;). Composite formatting is not supported. For a full explanation of these formatting patterns, please consult the.NET Framework documentation on string formatting in general, custom date and time formats, and custom number formats. A good starting point is the topic, &#8220;<a href="http://msdn.microsoft.com/en-us/library/26etazsy.aspx">Formatting Types.</a>&#8221;</p>
<p><strong>culture</strong><br />
Optional nvarchar argument specifying a culture.</p>
<p>If the culture argument is not provided, then the language of the current session is used. This language is set either implicitly, or explicitly by using the SET LANGUAGE statement. culture accepts any culture supported by the .NET Framework as an argument; it is not limited to the languages explicitly supported by SQL Server . If the culture argument is not valid, FORMAT raises an error.</em></p>
<p>
Before we continue, I recommend that you visit the <a href="http://msdn.microsoft.com/en-us/goglobal/bb896001.aspx">National Language Support (NLS) API Reference</a> page to see all the locales that are available</p>
<p>If you are a .NET programmer then this function should look very familiar to you</p>
<p>Let&#8217;s take a look at how it all works, first let&#8217;s create a table and inserts some locales info so that it will be easier to show the different output later</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
</pre></td><td class="de1"><pre class="de1"><span class="kw1">CREATE</span> <span class="kw1">TABLE</span> Locales<span class="br0">&#40;</span>locale <span class="kw1">varchar</span><span class="br0">&#40;</span><span class="nu0">100</span><span class="br0">&#41;</span><span class="br0">&#41;</span>
<span class="kw1">insert</span> Locales
<span class="kw1">select</span> <span class="st0">'en-US'</span> &nbsp; <span class="co1">--USA</span>
<span class="kw1">union</span>
<span class="kw1">select</span> <span class="st0">'nl'</span> <span class="co1">--Netherlands</span>
<span class="kw1">union</span>
<span class="kw1">select</span> <span class="st0">'fr'</span> &nbsp;<span class="co1">--France</span>
<span class="kw1">union</span>
<span class="kw1">select</span> <span class="st0">'de'</span> <span class="co1">--Germany</span>
<span class="kw1">union</span>
<span class="kw1">select</span> <span class="st0">'no'</span> &nbsp;<span class="co1">--Norway</span>
<span class="kw1">union</span>
<span class="kw1">select</span> <span class="st0">'ru'</span> <span class="co1">--Russia</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">CREATE TABLE Locales(locale varchar(100))
insert Locales
select 'en-US'   --USA
union
select 'nl' --Netherlands
union
select 'fr'  --France
union
select 'de' --Germany
union
select 'no'  --Norway
union
select 'ru' --Russia</pre></div></div>

<p>Now, let&#8217;s format some dates</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
</pre></td><td class="de1"><pre class="de1"><span class="kw1">DECLARE</span> @d <span class="kw1">DATETIME</span> <span class="sy0">=</span> <span class="st0">'01/01/2011'</span>;
&nbsp;
<span class="kw1">select</span> locale,F<span class="sy0">OR</span>MAT <span class="br0">&#40;</span> @d, <span class="st0">'d'</span>, locale <span class="br0">&#41;</span> <span class="kw1">AS</span> <span class="kw1">Result</span>,
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; F<span class="sy0">OR</span>MAT<span class="br0">&#40;</span> @d, <span class="st0">'yyyy-MM-dd'</span>, locale <span class="br0">&#41;</span> Result2
<span class="kw1">from</span> Locales</pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">DECLARE @d DATETIME = '01/01/2011';

select locale,FORMAT ( @d, 'd', locale ) AS Result,
              FORMAT( @d, 'yyyy-MM-dd', locale ) Result2
from Locales</pre></div></div>

<p>Here is what the output looks like, as you can see if you use specific formatting, the output is the same no matter what the locale is</p>
<div class="tables">
<table>
<tr>
<th>locale</th>
<th>	Result</th>
<th>Result2</th>
</tr>
<tr>
<td>de</td>
<td>	01.01.2011</td>
<td>	2011-01-01</td>
</tr>
<tr>
<td>en-US</td>
<td>	1/1/2011</td>
<td>	2011-01-01</td>
</tr>
<tr>
<td>fr</td>
<td>	01/01/2011</td>
<td>	2011-01-01</td>
</tr>
<tr>
<td>nl</td>
<td>	1-1-2011</td>
<td>	2011-01-01</td>
</tr>
<tr>
<td>no</td>
<td>	01.01.2011</td>
<td>	2011-01-01</td>
</tr>
<tr>
<td>ru</td>
<td>	01.01.2011</td>
<td>	2011-01-01</td>
</tr>
</table></div>
<p>Let&#8217;s look at another example, this one will format currency</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
</pre></td><td class="de1"><pre class="de1"><span class="kw1">select</span> locale,F<span class="sy0">OR</span>MAT <span class="br0">&#40;</span> <span class="nu0">100</span>, <span class="st0">'c'</span>, locale <span class="br0">&#41;</span> <span class="kw1">AS</span> <span class="kw1">Result</span>
<span class="kw1">from</span> Locales</pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">select locale,FORMAT ( 100, 'c', locale ) AS Result
from Locales</pre></div></div>

<p></p>
<div class="tables">
<table>
<tr>
<th>locale</th>
<th>	Result</th>
</tr>
<tr>
<td>de</td>
<td>	100,00 €</td>
</tr>
<tr>
<td>en-US</td>
<td>	$100.00</td>
</tr>
<tr>
<td>fr</td>
<td>	100,00 €</td>
</tr>
<tr>
<td>nl</td>
<td>	€ 100,00</td>
</tr>
<tr>
<td>no</td>
<td>	kr 100,00</td>
</tr>
<tr>
<td>ru</td>
<td>	100,00&#1088;.</td>
</tr>
</table></div>
<p>As you can see the currency symbol is different depending on what locale has been used, the symbol will also alternate between the end or the start of the output depending again on the locale</p>
<p>You can also specify the number of characters after the decimal point</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
</pre></td><td class="de1"><pre class="de1"><span class="kw1">select</span> locale,F<span class="sy0">OR</span>MAT <span class="br0">&#40;</span> <span class="nu0">100.34</span>, <span class="st0">'C1'</span>, locale <span class="br0">&#41;</span> <span class="kw1">AS</span> Result1,
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; F<span class="sy0">OR</span>MAT <span class="br0">&#40;</span> <span class="nu0">100.34</span>, <span class="st0">'C2'</span>, locale <span class="br0">&#41;</span> <span class="kw1">AS</span> Result2,
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; F<span class="sy0">OR</span>MAT <span class="br0">&#40;</span> <span class="nu0">100.34</span>, <span class="st0">'C3'</span>, locale <span class="br0">&#41;</span> <span class="kw1">AS</span> Result3,
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; F<span class="sy0">OR</span>MAT <span class="br0">&#40;</span> <span class="nu0">100.34</span>, <span class="st0">'C4'</span>, locale <span class="br0">&#41;</span> <span class="kw1">AS</span> Result4
<span class="kw1">from</span> Locales</pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">select locale,FORMAT ( 100.34, 'C1', locale ) AS Result1,
			  FORMAT ( 100.34, 'C2', locale ) AS Result2,
			  FORMAT ( 100.34, 'C3', locale ) AS Result3,
			  FORMAT ( 100.34, 'C4', locale ) AS Result4
from Locales</pre></div></div>

<p></p>
<div class="tables">
<table>
<tr>
<th>locale</th>
<th>	Result1</th>
<th>	Result2</th>
<th>	Result3</th>
<th>	Result4</th>
</tr>
<tr>
<td>de</td>
<td>	100,3 €	</td>
<td>100,34 €	</td>
<td>100,340 €	</td>
<td>100,3400 €</td>
</tr>
<tr>
<td>en-US</td>
<td>	$100.3	</td>
<td>$100.34	</td>
<td>$100.340	</td>
<td>$100.3400</td>
</tr>
<tr>
<td>fr</td>
<td>	100,3 €	</td>
<td>100,34 €	</td>
<td>100,340 €	</td>
<td>100,3400 €</td>
</tr>
<tr>
<td>nl</td>
<td>	€ 100,3	 </td>
<td>€ 100,34	</td>
<td>€ 100,340	</td>
<td>€ 100,3400</td>
</tr>
<tr>
<td>no</td>
<td>	kr 100,3	</td>
<td>kr 100,34	</td>
<td>kr 100,340	</td>
<td>kr 100,3400</td>
</tr>
<tr>
<td>ru</td>
<td>	100,3&#1088;.	</td>
<td>100,34&#1088;.	</td>
<td>100,340&#1088;.	</td>
<td>100,3400&#1088;.</td>
</tr>
</table></div>
<p>There you have it, formatted exactly like you want. I think the FORMAT function is a welcome addition, it will make formatting much easier than before when we have to mess around with CAST or CONVERT and style arguments</p>
]]></content:encoded>
			<wfw:commentRss>/index.php/datamgmt/datadesign/format-function-in-sql-server/feed/</wfw:commentRss>
		<slash:comments>0</slash:comments>
		</item>
		<item>
		<title>Concat function in SQL Server Denali CTP3</title>
		<link>/index.php/datamgmt/datadesign/concat-function-in-sql-server/</link>
		<comments>/index.php/datamgmt/datadesign/concat-function-in-sql-server/#comments</comments>
		<pubDate>Fri, 15 Jul 2011 07:53:00 +0000</pubDate>
		<dc:creator><![CDATA[SQLDenis]]></dc:creator>
				<category><![CDATA[Data Modelling and Design]]></category>
		<category><![CDATA[Database Programming]]></category>
		<category><![CDATA[Microsoft SQL Server]]></category>
		<category><![CDATA[Microsoft SQL Server Admin]]></category>
		<category><![CDATA[concat]]></category>
		<category><![CDATA[denali]]></category>
		<category><![CDATA[functions]]></category>
		<category><![CDATA[sql server]]></category>

		<guid isPermaLink="false">/index.php/2011/07/concat-function-in-sql-server/</guid>
		<description><![CDATA[SQL Server Denali CTP3 brings a couple of new functions, one of these is the CONCAT function. The CONCAT  function returns a string that is the result of concatenating two or more string values.

The syntax of the CONCAT function looks like this

CO&#8230;]]></description>
				<content:encoded><![CDATA[<p>SQL Server Denali CTP3 brings a couple of new functions, one of these is the CONCAT function. The CONCAT  function returns a string that is the result of concatenating two or more string values.</p>
<p>The syntax of the CONCAT function looks like this</p>
<pre>CONCAT ( string_value1, string_value2 [, string_valueN ] )</pre>
<p>You can concatenate between 2 and 254 values, if you use for example only one value, you will get an error</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
</pre></td><td class="de1"><pre class="de1"><span class="kw1">select</span> CONCAT <span class="br0">&#40;</span><span class="nu0">1</span><span class="br0">&#41;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">select CONCAT (1)</pre></div></div>

<p>Msg 189, Level 15, State 1, Line 1<br />
The concat function requires 2 to 254 arguments.</p>
<p>Here is some additional information</p>
<p><em>CONCAT takes a variable number of string arguments and concatenates them into a single string. It requires a minimum of two input values; otherwise, an error is raised. All arguments are implicitly converted to string types and then concatenated. Null values are implicitly converted to an empty string. If all the arguments are null, then an empty string of type varchar(1) is returned. The implicit conversion to strings follows the existing rules for data type conversions</em></p>
<p>Let&#8217;s run some code and do some comparison with a regular string concatenation by using the @val + @val2</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
</pre></td><td class="de1"><pre class="de1"><span class="kw1">declare</span> @i <span class="kw1">char</span><span class="br0">&#40;</span><span class="nu0">1</span><span class="br0">&#41;</span> &nbsp;<span class="sy0">=</span><span class="st0">'1'</span>
<span class="kw1">declare</span> @i3 <span class="kw1">char</span><span class="br0">&#40;</span><span class="nu0">1</span><span class="br0">&#41;</span> &nbsp;<span class="sy0">=</span><span class="st0">'3'</span>
&nbsp;
&nbsp;
<span class="kw1">select</span> CONCAT <span class="br0">&#40;</span>@i,@i3<span class="br0">&#41;</span>
<span class="kw1">select</span> @i<span class="sy0">+</span> &nbsp;@i3</pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">declare @i char(1)  ='1'
declare @i3 char(1)  ='3'


select CONCAT (@i,@i3)
select @i+  @i3</pre></div></div>

<p>&#8212;&#8212;<br />
13<br />
13</p>
<p>As you can see both of these return the value 13</p>
<p>What happens if one of the data type is an integer?</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
</pre></td><td class="de1"><pre class="de1"><span class="kw1">declare</span> @i <span class="kw1">char</span><span class="br0">&#40;</span><span class="nu0">1</span><span class="br0">&#41;</span> &nbsp;<span class="sy0">=</span><span class="st0">'1'</span>
<span class="kw1">declare</span> @i3 <span class="kw1">int</span> &nbsp;<span class="sy0">=</span><span class="st0">'3'</span>
&nbsp;
&nbsp;
<span class="kw1">select</span> CONCAT<span class="br0">&#40;</span>@i,@i3<span class="br0">&#41;</span>
<span class="kw1">select</span> @i<span class="sy0">+</span> &nbsp;@i3</pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">declare @i char(1)  ='1'
declare @i3 int  ='3'


select CONCAT(@i,@i3)
select @i+  @i3</pre></div></div>

<p>&#8212;&#8212;&#8212;&#8212;&#8212;&#8211;<br />
13<br />
4</p>
<p>As you can see CONCAT concatenates the values while the other method does arithmetic and adds the values since one of them is an integer</p>
<p>Here is another example that does the same</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
</pre></td><td class="de1"><pre class="de1"><span class="kw1">declare</span> @i <span class="kw1">char</span><span class="br0">&#40;</span><span class="nu0">1</span><span class="br0">&#41;</span> &nbsp;<span class="sy0">=</span><span class="st0">'1'</span>
<span class="kw1">declare</span> @i2 <span class="kw1">int</span> &nbsp;<span class="sy0">=</span><span class="nu0">2</span>
<span class="kw1">declare</span> @i3 <span class="kw1">char</span><span class="br0">&#40;</span><span class="nu0">1</span><span class="br0">&#41;</span> &nbsp;<span class="sy0">=</span><span class="st0">'3'</span>
&nbsp;
&nbsp;
<span class="kw1">select</span> CONCAT<span class="br0">&#40;</span>@i,@i2,@i3<span class="br0">&#41;</span>
&nbsp;
<span class="kw1">select</span> @i<span class="sy0">+</span> @i2<span class="sy0">+</span> @i3</pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">declare @i char(1)  ='1'
declare @i2 int  =2
declare @i3 char(1)  ='3'


select CONCAT(@i,@i2,@i3)

select @i+ @i2+ @i3</pre></div></div>

<p>&#8212;&#8212;&#8212;&#8212;&#8212;&#8211;<br />
123<br />
6</p>
<p>What happens if one of the values is NULL?</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
</pre></td><td class="de1"><pre class="de1"><span class="kw1">declare</span> @i <span class="kw1">char</span><span class="br0">&#40;</span><span class="nu0">1</span><span class="br0">&#41;</span> &nbsp;<span class="sy0">=</span><span class="st0">'1'</span>
<span class="kw1">declare</span> @i2 <span class="kw1">int</span> &nbsp;<span class="sy0">=</span>null
<span class="kw1">declare</span> @i3 <span class="kw1">char</span><span class="br0">&#40;</span><span class="nu0">1</span><span class="br0">&#41;</span> &nbsp;<span class="sy0">=</span><span class="st0">'3'</span>
&nbsp;
&nbsp;
<span class="kw1">select</span> CONCAT<span class="br0">&#40;</span>@i,@i2,@i3<span class="br0">&#41;</span>
&nbsp;
<span class="kw1">select</span> @i<span class="sy0">+</span> @i2<span class="sy0">+</span> @i3</pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">declare @i char(1)  ='1'
declare @i2 int  =null
declare @i3 char(1)  ='3'


select CONCAT(@i,@i2,@i3)

select @i+ @i2+ @i3</pre></div></div>

<p>&#8212;&#8212;&#8212;&#8212;&#8211;<br />
13<br />
null</p>
<p>As you can see the CONCAT functions makes the NULL an empty string while the other method does not.</p>
<p>In order to get the same output, the old method is a lot more code</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
</pre></td><td class="de1"><pre class="de1"><span class="kw1">declare</span> @i <span class="kw1">char</span><span class="br0">&#40;</span><span class="nu0">1</span><span class="br0">&#41;</span> &nbsp;<span class="sy0">=</span><span class="st0">'1'</span>
<span class="kw1">declare</span> @i2 <span class="kw1">int</span> &nbsp;<span class="sy0">=</span>null
<span class="kw1">declare</span> @i3 <span class="kw1">char</span><span class="br0">&#40;</span><span class="nu0">1</span><span class="br0">&#41;</span> &nbsp;<span class="sy0">=</span><span class="st0">'3'</span>
&nbsp;
&nbsp;
<span class="kw1">select</span> CONCAT<span class="br0">&#40;</span>@i,@i2,@i3<span class="br0">&#41;</span>
&nbsp;
&nbsp;
<span class="kw1">select</span> isnull<span class="br0">&#40;</span>@i,<span class="st0">''</span><span class="br0">&#41;</span><span class="sy0">+</span> isnull<span class="br0">&#40;</span><span class="kw1">convert</span><span class="br0">&#40;</span><span class="kw1">varchar</span><span class="br0">&#40;</span><span class="nu0">10</span><span class="br0">&#41;</span>,@i2<span class="br0">&#41;</span>,<span class="st0">''</span><span class="br0">&#41;</span><span class="sy0">+</span> isnull<span class="br0">&#40;</span>@i3,<span class="st0">''</span><span class="br0">&#41;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">declare @i char(1)  ='1'
declare @i2 int  =null
declare @i3 char(1)  ='3'


select CONCAT(@i,@i2,@i3)


select isnull(@i,'')+ isnull(convert(varchar(10),@i2),'')+ isnull(@i3,'')</pre></div></div>

<p>&#8212;&#8211;<br />
13<br />
13</p>
<p>So what is your opinion, are you happy that the CONCAT function has been added to SQL Server?</p>
]]></content:encoded>
			<wfw:commentRss>/index.php/datamgmt/datadesign/concat-function-in-sql-server/feed/</wfw:commentRss>
		<slash:comments>9</slash:comments>
		</item>
		<item>
		<title>ColumnStore Index limitations in SQL Server Denali CTP3</title>
		<link>/index.php/datamgmt/datadesign/columnstore-index-limitations-in-sql/</link>
		<comments>/index.php/datamgmt/datadesign/columnstore-index-limitations-in-sql/#comments</comments>
		<pubDate>Thu, 14 Jul 2011 00:22:00 +0000</pubDate>
		<dc:creator><![CDATA[SQLDenis]]></dc:creator>
				<category><![CDATA[Data Modelling and Design]]></category>
		<category><![CDATA[Database Administration]]></category>
		<category><![CDATA[Database Programming]]></category>
		<category><![CDATA[Microsoft SQL Server]]></category>
		<category><![CDATA[Microsoft SQL Server Admin]]></category>
		<category><![CDATA[apollo]]></category>
		<category><![CDATA[columnstore]]></category>
		<category><![CDATA[denali]]></category>
		<category><![CDATA[olap]]></category>
		<category><![CDATA[oltp]]></category>

		<guid isPermaLink="false">/index.php/2011/07/columnstore-index-limitations-in-sql/</guid>
		<description><![CDATA[If you have been working with Sybase IQ then you might be familiar with what a columnstore database is.

SQL Server has added a new type of index which is column based instead of row based, this is the columnstore index. I will create another post thi&#8230;]]></description>
				<content:encoded><![CDATA[<p>If you have been working with <a href="/index.php/DataMgmt/DataDesign/sybase-iq-is-a-columnar-database-why-sho">Sybase IQ</a> then you might be familiar with what a columnstore database is.</p>
<p>SQL Server has added a new type of index which is column based instead of row based, this is the columnstore index. I will create another post this week that will show you how to create such an index, right now I will only show you the difference between a query against a regular index and against a columnstore index, this way you can get an idea of the performance difference.</p>
<p>Both of these tables have identical data and have 1 million rows.</p>
<pre>SELECT COUNT(*),SomeValue FROM TestRowStore 
group by SomeValue

SELECT COUNT(*),SomeValue FROM TestColumnStore 
group by SomeValue</pre>
<p>Here is the execution plan for this query, click on the image for a larger size</p>
<p><a href="http://www.flickr.com/photos/denisgobo/5935723862/sizes/l/in/photostream/" title="ColumnStore Index by Denis Gobo, on Flickr"><img src="http://farm7.static.flickr.com/6021/5935723862_8f99cca495_b.jpg" width="1024" height="261" alt="ColumnStore Index Execution Plan" /></a></p>
<p>As you can see the columnstore index performs better.</p>
<p>Here are the reads</p>
<p><em>Table &#8216;TestRowStore&#8217;. Scan count 3, <strong>logical reads 9636</strong>, physical reads 0, read-ahead reads 0<br />
Table &#8216;TestColumnStore&#8217;. Scan count 2, <strong>logical reads 8</strong>, physical reads 0, read-ahead reads 0</em></p>
<p>The difference in reads is dramatic</p>
<p>And here are the execution times</p>
<p><em> SQL Server Execution Times:<br />
   CPU time = 328 ms,  elapsed time = <strong>185 ms</strong>.</p>
<p> SQL Server Execution Times:<br />
   CPU time = 0 ms,  elapsed time = <strong>3 ms</strong>.</em><br />
<br />
This is all cool right? Unfortunately, there are things you cannot do (yet) when using a columnstore index.<br />
A table with a columnstore index is read only, and cannot be updated(another post will talk about using partitions to makes this less painful)<br />
Right now, a columnstore index supports only common business data types like int, real, string, money, datetime, the decimal data type has to be less than 18 digits.<br />
You cannot truncate a table with a columnstore index</p>
<p>I decided to look in the sysmessages table for any messages that had columnstore in the description</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
</pre></td><td class="de1"><pre class="de1"><span class="kw1">select</span> &nbsp;description &nbsp;<span class="kw1">from</span> sys.<span class="me1">sysmessages</span>
<span class="kw1">where</span> msglangid <span class="sy0">=</span> <span class="nu0">1033</span>
and description like<span class="st0">'%columnstore%'</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">select  description  from sys.sysmessages
where msglangid = 1033
and description like'%columnstore%'</pre></div></div>

<p>Here is the whole list of errors that SQL Server might throw when you try to do things that are not supported. Keep in mind that sysmessages only returns the first 255 characters so some of the messages are cut</p>
<p><em>
<ul>
<li>SQL Server cannot load database &#8216;%.*ls&#8217; because it contains a columnstore index. The currently installed edition of SQL Server does not support columnstore indexes. Either disable the columnstore index in the database by using a supported edition of SQL S</li>
<li>The Cross Rowset check on columnstore index object ID %d, index ID %d, partition ID %I64d. Drop and recreate the columnstore index.</li>
<li>CREATE INDEX statement failed because a columnstore index cannot be unique. Create the columnstore index without the UNIQUE keyword or create a unique index without the COLUMNSTORE keyword.</li>
<li>CREATE INDEX statement failed because specifying sort order (ASC or DESC) is not allowed when creating a columnstore index. Create the columnstore index without specifying a sort order.</li>
<li>CREATE INDEX statement failed because a columnstore index cannot be created on a view. Consider creating a columnstore index on the base table or creating an index without the COLUMNSTORE keyword on the view.</li>
<li>CREATE INDEX statement failed because column &#8216;%.*ls&#8217; on table &#8216;%.*ls&#8217; is a computed column and a columnstore index cannot be created on a computed column. Consider creating a nonclustered columnstore index on a subset of columns that does not include the </li>
<li>CREATE INDEX statement failed because a columnstore index cannot be a filtered index. Consider creating a columnstore index without the predicate filter.</li>
<li>CREATE INDEX statement failed because a columnstore index cannot be created on a sparse column. Consider creating a nonclustered columnstore index on a subset of columns that does not include any sparse columns.</li>
<li>CREATE INDEX statement failed because a columnstore index cannot have included columns.   Create the columnstore index on the desired columns without specifying any included columns.</li>
<li>CREATE INDEX statement failed because a columnstore index cannot be created on a column with filestream data. Consider creating a nonclustered columnstore index on a subset of columns that does not include any columns with filestream data.</li>
<li>CREATE INDEX statement failed because specifying FILESTREAM_ON is not allowed when creating a columnstore index. Consider creating a columnstore index on columns without filestream data and omit the FILESTREAM_ON specification.</li>
<li>CREATE INDEX statement failed because a columnstore index cannot be created on a column set. Consider creating a nonclustered columnstore index on a subset of columns in the table that does not contain a column set or any sparse columns.</li>
<li>CREATE INDEX statement failed because a columnstore index cannot be created in this edition of SQL Server.   See Books Online for more details on feature support in different SQL Server editions.</li>
<li>CREATE INDEX statement failed because a columnstore index must be partition-aligned with the base table. Create the columnstore index using the same partition function and same (or equivalent) partition scheme as the base table.  If the base table is not </li>
<li>CREATE INDEX statement failed because specifying %S_MSG is not allowed when creating a columnstore index. Consider creating a columnstore index without specifying %S_MSG.</li>
<li>CREATE INDEX statement failed because the %S_MSG option is not allowed when creating a columnstore index. Create the columnstore index without specifying the %S_MSG option.</li>
<li>CREATE INDEX statement failed because specifying DATA_COMPRESSION is not allowed when creating a columnstore index. Consider creating a columnstore index without specifying DATA_COMPRESSION.  Columnstore indexes are always compressed automatically.</li>
<li>ALTER TABLE statement failed because the definition of a column cannot be changed if the column is part of a columnstore index. Consider dropping the columnstore index, altering the column, then creating a new columnstore index.</li>
<li>ALTER INDEX statement failed because a columnstore index cannot be reorganized. Reorganization of a columnstore index is not necessary.</li>
<li>ALTER INDEX REBUILD statement failed because specifying %S_MSG is not allowed when rebuilding a columnstore index. Rebuild the columnstore index without specifying %S_MSG.</li>
<li>ALTER INDEX REBUILD statement failed because the %S_MSG option is not allowed when rebuilding a columnstore index. Rebuild the columnstore index without specifying the %S_MSG option.</li>
<li>ALTER INDEX REBUILD statement failed because specifying DATA_COMPRESSION is not allowed when rebuilding a columnstore index. Rebuild the columnstore index without specifying DATA_COMPRESSION.  Columnstore indexes are always compressed automatically.</li>
<li>%S_MSG statement failed because data cannot be updated in a table with a columnstore index. Consider disabling the columnstore index before issuing the %S_MSG statement, then rebuilding the columnstore index after %S_MSG is complete.</li>
<li>DBCC DBREINDEX failed because specifying FILLFACTOR is not allowed when creating or rebuilding a columnstore index. Rebuild the columnstore index without specifying FILLFACTOR.</li>
<li>CREATE INDEX statement failed because specifying key list is not allowed when creating a clustered columnstore index. Create the clustered columnstore index without specifying key list.</li>
<li>UPDATE STATISTICS failed because statistics cannot be updated on a columnstore index.  UPDATE STATISTICS is valid only when used with the STATS_STREAM option.</li>
<li>Clustered columnstore index is not supported.</li>
<li>Multiple nonclustered columnstore indexes are not supported.</li>
<li>Conversion between columnstore index and relational index is not supported.</li>
<li>CREATE INDEX statement failed because a columnstore index cannot be created on a column with datatype decimal or numeric that has a precision that requires more than 8 bytes of storage. Consider either reducing the precision of column &#8216;%.*ls&#8217; to 18 or cre</li>
<li>CREATE INDEX statement failed because a columnstore index cannot be created on a datetimeoffset type with precision that requires more than 8 bytes of storage. Consider either reducing the precision of column &#8216;%.*ls&#8217; to datetimeoffset(n) where n = 0, 1, o</li>
<li>Cannot include column &#8216;%.*ls&#8217; in a columnstore index because the data type of the column is not supported in a columnstore index. The column may have been included explicitly (in the CREATE INDEX statement) or implicitly.  Implicit inclusion occurs when c</li>
<li>MERGE clause of ALTER PARTITION statement failed because two nonempty partitions containing a columnstore index cannot be merged. Consider disabling the columnstore index before issuing the ALTER PARTITION statement, then rebuilding the columnstore index </li>
<li>MERGE clause of ALTER PARTITION statement failed because two partitions on different filegroups cannot be merged if either partition contains columnstore index data. Consider disabling the columnstore index before issuing the ALTER PARTITION statement, th</li>
<li>SPLIT clause of ALTER PARTITION statement failed because the partition is not empty.  Only empty partitions can be split in when a columnstore index exists on the table. Consider disabling the columnstore index before issuing the ALTER PARTITION statement</li>
<li>The stored procedure, sp_tableoption failed because a table with a nonclustered columnstore index cannot be altered to use vardecimal storage format. Consider dropping the columnstore index.</li>
<li>CREATE INDEX statement failed because table &#8216;%.*ls&#8217; uses vardecimal storage format. A columnstore index cannot be created on a table using vardecimal storage. Consider rebuilding the table without vardecimal storage.</li>
<li>TRUNCATE TABLE statement failed because table &#8216;%.*ls&#8217; has a columnstore index on it. A table with a columnstore index cannot be truncated. Consider dropping the columnstore index then truncating the table.</li>
<li>CREATE INDEX statement failed because a columnstore index on a partitioned table must be partition-aligned with the base table. Consider dropping the columnstore index before creating a new clustered index.</li>
<li>DROP INDEX statement failed because a columnstore index on a partitioned table must be partition-aligned with the base table (heap). Consider dropping the columnstore index before dropping a clustered index.</li>
<li>%S_MSG statement failed because the operation cannot be performed online on a table with a columnstore index. Perform the operation without specifying the ONLINE option or drop (or disable) the columnstore index before performing the operation using the O</li>
<li>%s cannot be enabled on a table with a columnstore index.  Consider dropping columnstore index &#8216;%s&#8217; on table &#8216;%s&#8217;.</li>
<li>CREATE INDEX statement failed because a columnstore index cannot be created on a table enabled for %S_MSG.  Consider disabling %S_MSG and then creating the columnstore index.</li>
</ul>
<p></em></p>
<p>So with all these limitations why would you want to use this kind of index? This index is not for your typical OLTP workload, it is for people that want OLAP response time without having to create OLAP cubes, summary tables and indexed views. </p>
<p>I can already see a couple of places that I will be using columnstore indexes</p>
]]></content:encoded>
			<wfw:commentRss>/index.php/datamgmt/datadesign/columnstore-index-limitations-in-sql/feed/</wfw:commentRss>
		<slash:comments>3</slash:comments>
		</item>
		<item>
		<title>DATEFROMPARTS  and DATETIMEFROMPARTS functions in SQL Server Denali CTP3</title>
		<link>/index.php/datamgmt/datadesign/datefromparts-and-datetimefromparts-functions-in/</link>
		<comments>/index.php/datamgmt/datadesign/datefromparts-and-datetimefromparts-functions-in/#comments</comments>
		<pubDate>Wed, 13 Jul 2011 17:22:00 +0000</pubDate>
		<dc:creator><![CDATA[SQLDenis]]></dc:creator>
				<category><![CDATA[Data Modelling and Design]]></category>
		<category><![CDATA[Database Programming]]></category>
		<category><![CDATA[dates]]></category>
		<category><![CDATA[denali]]></category>
		<category><![CDATA[functions]]></category>

		<guid isPermaLink="false">/index.php/2011/07/datefromparts-and-datetimefromparts-functions-in/</guid>
		<description><![CDATA[Function 
         
         
          Syntax 
         
         
          Return value 
         
         
          Return data type 
         
        
       
       
         
           
            DATEFROMPARTS&#8230;]]></description>
				<content:encoded><![CDATA[<p>SQL Server Denali CTP3 has added a bunch of date/time functions.</p>
<p>In the <a href="/index.php/DataMgmt/DBProgramming/MSSQLServer/a-quick-look-at-the-1">A Quick look at the new EOMONTH function in SQL Server Denali CTP3</a> post I have already looked at the EOMONTH  function. In this post I want to take a look at the DATEFROMPARTS  and DATETIMEFROMPARTS functions</p>
<h2>DATEFROMPARTS</h2>
<p>If you are a .NET programmer then you probably know that you can construct a date by passing a bunch of integers to the DateTime constructor. To create a date of July, 13, 2011 you would do something like this</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="csharp"><thead><tr><td colspan="2"  class="head">C#</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
</pre></td><td class="de1"><pre class="de1">DateTime date1 <span class="sy0">=</span> <span class="kw3">new</span> DateTime<span class="br0">&#40;</span><span class="nu0">2011</span>, <span class="nu0">7</span>, <span class="nu0">13</span><span class="br0">&#41;</span><span class="sy0">;</span>
Console<span class="sy0">.</span><span class="me1">WriteLine</span><span class="br0">&#40;</span>date1<span class="sy0">.</span><span class="me1">ToString</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#41;</span><span class="sy0">;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">DateTime date1 = new DateTime(2011, 7, 13);
Console.WriteLine(date1.ToString());</pre></div></div>

<p>7/13/2011 12:00:00 AM</p>
<p>In SQL Server, you can do something similar now with the DATEFROMPARTS  function. Here is what the syntax looks like</p>
<p><em>DATEFROMPARTS ( year, month, day )</em></p>
<p>Here is an example</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
</pre></td><td class="de1"><pre class="de1"><span class="kw1">SELECT</span> DATEFROMPARTS <span class="br0">&#40;</span> <span class="nu0">2011</span>, <span class="nu0">7</span>, <span class="nu0">13</span> <span class="br0">&#41;</span> <span class="kw1">AS</span> <span class="kw1">Result</span>;</pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">SELECT DATEFROMPARTS ( 2011, 7, 13 ) AS Result;</pre></div></div>

<p>2011-07-13</p>
<p>If you pass in all ones, you will get year 1, month 1 and day 1</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
</pre></td><td class="de1"><pre class="de1"><span class="kw1">SELECT</span> DATEFROMPARTS<span class="br0">&#40;</span><span class="nu0">1</span>,<span class="nu0">1</span>,<span class="nu0">1</span><span class="br0">&#41;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">SELECT DATEFROMPARTS(1,1,1)</pre></div></div>

<p>0001-01-01</p>
<p>You can of course also pass in functions, so to get the first day of the current year and month, you would do this</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
</pre></td><td class="de1"><pre class="de1"><span class="kw1">SELECT</span> DATEFROMPARTS<span class="br0">&#40;</span><span class="kw1">year</span><span class="br0">&#40;</span><span class="kw2">getdate</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#41;</span>,<span class="kw1">month</span><span class="br0">&#40;</span><span class="kw2">getdate</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#41;</span>,<span class="nu0">1</span><span class="br0">&#41;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">SELECT DATEFROMPARTS(year(getdate()),month(getdate()),1)</pre></div></div>

<p>2011-07-01</p>
<p>Here is what BOL has to say about DATEFROMPARTS:</p>
<p><em>DATEFROMPARTS returns a date value with the date portion set to the specified year, month and day, and the time portion set to the default. If the arguments are not valid, then an error is raised. If required arguments are null, then null is returned.</em></p>
<h2>DATETIMEFROMPARTS </h2>
<p>The syntax for DATETIMEFROMPARTS  looks like this</p>
<p><em>DATETIMEFROMPARTS ( year, month, day, hour, minute, seconds, milliseconds )</em></p>
<p>If you were to pass in the same values as for date into the DATETIMEFROMPARTS function you will get an error</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
</pre></td><td class="de1"><pre class="de1"><span class="kw1">SELECT</span> DATETIMEFROMPARTS<span class="br0">&#40;</span><span class="nu0">1</span>,<span class="nu0">1</span>,<span class="nu0">1</span><span class="br0">&#41;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">SELECT DATETIMEFROMPARTS(1,1,1)</pre></div></div>

<p>Msg 174, Level 15, State 1, Line 1<br />
The datetimefromparts function requires 7 argument(s).</p>
<p>It would have been nice that the function returned you the datetime with every thing else as 0 instead of giving an error. </p>
<p>So if you have this in .NET</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="csharp"><thead><tr><td colspan="2"  class="head">C#</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
</pre></td><td class="de1"><pre class="de1">DateTime date1 <span class="sy0">=</span> <span class="kw3">new</span> DateTime<span class="br0">&#40;</span><span class="nu0">2011</span>, <span class="nu0">7</span>, <span class="nu0">13</span>, <span class="nu0">16</span>, <span class="nu0">32</span>, <span class="nu0">18</span>, <span class="nu0">500</span><span class="br0">&#41;</span><span class="sy0">;</span>
Console<span class="sy0">.</span><span class="me1">WriteLine</span><span class="br0">&#40;</span>date1<span class="sy0">.</span><span class="me1">ToString</span><span class="br0">&#40;</span><span class="st0">&quot;M/dd/yyyy h:mm:ss.fff tt&quot;</span><span class="br0">&#41;</span><span class="br0">&#41;</span><span class="sy0">;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">DateTime date1 = new DateTime(2011, 7, 13, 16, 32, 18, 500);
Console.WriteLine(date1.ToString("M/dd/yyyy h:mm:ss.fff tt"));</pre></div></div>

<p>7/13/2011 4:32:18.500 PM</p>
<p>You can do this in SQL</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
</pre></td><td class="de1"><pre class="de1"><span class="kw1">SELECT</span> DATETIMEFROMPARTS <span class="br0">&#40;</span> <span class="nu0">2011</span>, <span class="nu0">7</span>, <span class="nu0">13</span>, <span class="nu0">16</span>, <span class="nu0">32</span>, <span class="nu0">18</span>, <span class="nu0">500</span> <span class="br0">&#41;</span> <span class="kw1">AS</span> <span class="kw1">Result</span>;</pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">SELECT DATETIMEFROMPARTS ( 2011, 7, 13, 16, 32, 18, 500 ) AS Result;</pre></div></div>

<p>2011-07-13 16:32:18.500</p>
<p>There are a couple of things to be aware of<br />
You have to be within the valid datetime range (January 1, 1753, through December 31, 9999)</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
</pre></td><td class="de1"><pre class="de1"><span class="kw1">SELECT</span> DATETIMEFROMPARTS<span class="br0">&#40;</span><span class="nu0">1600</span>,<span class="nu0">1</span>,<span class="nu0">1</span>,<span class="nu0">1</span>,<span class="nu0">1</span>,<span class="nu0">1</span>,<span class="nu0">500</span><span class="br0">&#41;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">SELECT DATETIMEFROMPARTS(1600,1,1,1,1,1,500)</pre></div></div>

<p>Msg 289, Level 16, State 3, Line 1<br />
Cannot construct data type datetime, some of the arguments have values which are not valid.<br />
&#12288;</p>
<p>If you use datetime2, which goes back to year 1 then you are fine, however if you just change DATETIMEFROMPARTS to DATETIME2FROMPARTS you will have a problem, DATETIME2FROMPARTS needs also precision </p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
</pre></td><td class="de1"><pre class="de1"><span class="kw1">SELECT</span> DATETIME2FROMPARTS<span class="br0">&#40;</span><span class="nu0">1600</span>,<span class="nu0">1</span>,<span class="nu0">1</span>,<span class="nu0">1</span>,<span class="nu0">1</span>,<span class="nu0">1</span>,<span class="nu0">500</span><span class="br0">&#41;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">SELECT DATETIME2FROMPARTS(1600,1,1,1,1,1,500)</pre></div></div>

<p>Msg 174, Level 15, State 1, Line 1<br />
The datetime2fromparts function requires 8 argument(s).<br />
&#12288;</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
</pre></td><td class="de1"><pre class="de1"><span class="kw1">SELECT</span> DATETIME2FROMPARTS<span class="br0">&#40;</span><span class="nu0">1600</span>,<span class="nu0">1</span>,<span class="nu0">1</span>,<span class="nu0">1</span>,<span class="nu0">1</span>,<span class="nu0">1</span>,<span class="nu0">500</span>,<span class="nu0">3</span><span class="br0">&#41;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">SELECT DATETIME2FROMPARTS(1600,1,1,1,1,1,500,3)</pre></div></div>

<p>1600-01-01 01:01:01.500</p>
<p>Here is what BOL has to say about DATETIMEFROMPARTS:</p>
<p><em>DATETIMEFROMPARTS returns a fully initialized datetime value. If the arguments are not valid, then an error is raised. If required arguments are null, then a null is returned.</em></p>
<p>Here is what BOL has to say about DATETIME2FROMPARTS:<br />
<em>DATETIME2FROMPARTS returns a fully initialized datetime2 value. If the arguments are not valid, an error is raised. If required arguments are null, then null is returned. However, if the precision argument is null, then an error is raised.</p>
<p>The fractions argument depends on the precision argument. For example, if precision is 7, then each fraction represents 100 nanoseconds; if precision is 3, then each fraction represents a millisecond. If the value of precision is zero, then the value of fractions must also be zero; otherwise, an error is raised.</em></p>
<p>Here is a list of some of these new date/time functions</p>
<div class="tables">
<table>
<tr>
<th>
<p>Function</p>
</th>
<th>
<p>Syntax</p>
</th>
<th>
<p>Return value</p>
</th>
<th>
<p>Return data type</p>
</th>
</tr>
<tr>
<td>
<p>
            <strong>DATEFROMPARTS </strong>
          </p>
</td>
<td>
<p>DATEFROMPARTS  ( year, month, day )</p>
</td>
<td>
<p>Returns a date value for the specified year, month, and day.</p>
</td>
<td>
<p>              date </p>
</td>
</tr>
<tr>
<td>
<p>
            <strong>DATETIME2FROMPARTS </strong>
          </p>
</td>
<td>
<p>DATETIME2FROMPARTS  ( year, month, day, hour, minute, seconds, fractions, precision )</p>
</td>
<td>
<p>Returns a datetime2 value for the specified date and time and with the specified precision.</p>
</td>
<td>
<p>              datetime2<br />
             <strong>(</strong> precision <strong>)</strong></p>
</td>
</tr>
<tr>
<td>
<p>
            <strong>DATETIMEFROMPARTS</strong>
          </p>
</td>
<td>
<p>DATETIMEFROMPARTS  ( year, month, day, hour, minute, seconds, milliseconds )</p>
</td>
<td>
<p>Returns a datetime value for the specified date and time.</p>
</td>
<td>
<p>              datetime </p>
</td>
</tr>
<tr>
<td>
<p>
            <strong>DATETIMEOFFSETFROMPARTS </strong>
          </p>
</td>
<td>
<p>DATETIMEOFFSETFROMPARTS  ( year, month, day, hour, minute, seconds, fractions, hour_offset, minute_offset, precision )</p>
</td>
<td>
<p>Returns a datetimeoffset value for the specified date and time and with the specified offsets and precision.</p>
</td>
<td>
<p>              datetime<br />
             <strong>(</strong> precision <strong>)</strong></p>
</td>
</tr>
<tr>
<td>
<p>
            <strong>SMALLDATETIMEFROMPARTS</strong>
          </p>
</td>
<td>
<p>SMALLDATETIMEFROMPARTS  ( year, month, day, hour, minute )</p>
</td>
<td>
<p>Returns a smalldatetime value for the specified date and time.</p>
</td>
<td>
<p>              smalldatetime </p>
</td>
</tr>
<tr>
<td>
<p>
            <strong>TIMEFROMPARTS </strong>
          </p>
</td>
<td>
<p>TIMEFROMPARTS  ( hour, minute, seconds, fractions, precision )</p>
</td>
<td>
<p>Returns a time value for the specified time and with the specified precision.</p>
</td>
<td>
<p>              time<br />
             <strong>(</strong> precision <strong>)</strong></p>
</td>
</tr>
<tr>
<td>
<p>
            <strong>EOMONTH </strong>
          </p>
</td>
<td>
<p>EOMONTH ( start_date [, month_to_add ] )</p>
</td>
<td>
<p>Returns the last day of the month that contains the specified date, with an optional offset.</p>
</td>
<td>
<p>
                 Return type is the type of start_date or datetime2(7).</p>
</td>
</tr>
</table></div>
]]></content:encoded>
			<wfw:commentRss>/index.php/datamgmt/datadesign/datefromparts-and-datetimefromparts-functions-in/feed/</wfw:commentRss>
		<slash:comments>5</slash:comments>
		</item>
		<item>
		<title>A Quick look at the new EOMONTH function in SQL Server Denali CTP3</title>
		<link>/index.php/datamgmt/datadesign/a-quick-look-at-the-1/</link>
		<comments>/index.php/datamgmt/datadesign/a-quick-look-at-the-1/#comments</comments>
		<pubDate>Wed, 13 Jul 2011 14:09:00 +0000</pubDate>
		<dc:creator><![CDATA[SQLDenis]]></dc:creator>
				<category><![CDATA[Data Modelling and Design]]></category>
		<category><![CDATA[Database Programming]]></category>
		<category><![CDATA[Microsoft SQL Server]]></category>
		<category><![CDATA[Microsoft SQL Server Admin]]></category>
		<category><![CDATA[dates]]></category>
		<category><![CDATA[denali]]></category>
		<category><![CDATA[functions]]></category>

		<guid isPermaLink="false">/index.php/2011/07/a-quick-look-at-the-1/</guid>
		<description><![CDATA[SQL Server Denali CTP3  has a bunch of new date/time functions like DATEFROMPARTS,  DATETIMEFROMPARTS and EOMONTH

First let's take a look at EOMONTH.

The syntax for EOMONTH is

EOMONTH ( start_date [, month_to_add ] )

If you pass in getdate()&#8230;]]></description>
				<content:encoded><![CDATA[<p>SQL Server Denali CTP3  has a bunch of new date/time functions like DATEFROMPARTS,  DATETIMEFROMPARTS and EOMONTH</p>
<p>First let&#8217;s take a look at EOMONTH.</p>
<p>The syntax for EOMONTH is</p>
<pre>EOMONTH ( start_date [, month_to_add ] )</pre>
<p>If you pass in getdate() you will get the last day of the month for the current month</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
</pre></td><td class="de1"><pre class="de1"><span class="kw1">SELECT</span> EOMONTH<span class="br0">&#40;</span><span class="kw2">getdate</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#41;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">SELECT EOMONTH(getdate())</pre></div></div>

<p>2011-07-31 00:00:00.000</p>
<p>If you pass in a date, you will also get the last date for that month</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
</pre></td><td class="de1"><pre class="de1"><span class="kw1">SELECT</span> EOMONTH<span class="br0">&#40;</span><span class="st0">'20110615'</span><span class="br0">&#41;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">SELECT EOMONTH('20110615')</pre></div></div>

<p>2011-06-30 00:00:00.0000000</p>
<p>This function also accepts an optional parameter: month_to_add</p>
<p><em>month_to_add<br />
Optional integer expression specifying the number of months to add to start_date.</p>
<p>If this argument is specified, then EOMONTH adds the specified number of months to start_date, and then returns the last day of the month for the resulting date. If this addition overflows the valid range of dates, then an error is raised.</em></p>
<p>So if we pass 1 for month_to_add it will add a month</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
</pre></td><td class="de1"><pre class="de1"><span class="kw1">SELECT</span> EOMONTH<span class="br0">&#40;</span><span class="st0">'20110615'</span>,<span class="nu0">1</span><span class="br0">&#41;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">SELECT EOMONTH('20110615',1)</pre></div></div>

<p>2011-07-31 00:00:00.0000000</p>
<p>If we pass -1 for month_to_add it will subtract a month</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
</pre></td><td class="de1"><pre class="de1"><span class="kw1">SELECT</span> EOMONTH<span class="br0">&#40;</span><span class="st0">'20110615'</span>,<span class="sy0">-</span><span class="nu0">1</span><span class="br0">&#41;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">SELECT EOMONTH('20110615',-1)</pre></div></div>

<p>2011-05-31 00:00:00.0000000</p>
<p>The one problem with this function is that if you do a query and specify between some date and EOMONTH it won&#8217;t give you anything after midnight. I already explained that in this post: <a href="/index.php/DataMgmt/DataDesign/how-does-between-work-with-dates-in-sql-">How Does Between Work With Dates In SQL Server?</a></p>
<p>I also wonder why there is no SOMONTH function? Yes, I know it starts with 1, but if there is an <em>end of month</em> function then someone will also search for a <em>start of month</em> function.</p>
]]></content:encoded>
			<wfw:commentRss>/index.php/datamgmt/datadesign/a-quick-look-at-the-1/feed/</wfw:commentRss>
		<slash:comments>6</slash:comments>
		</item>
		<item>
		<title>A Quick look at the new IIF function in Denali CTP3</title>
		<link>/index.php/datamgmt/datadesign/a-quick-look-at-the/</link>
		<comments>/index.php/datamgmt/datadesign/a-quick-look-at-the/#comments</comments>
		<pubDate>Wed, 13 Jul 2011 13:19:00 +0000</pubDate>
		<dc:creator><![CDATA[SQLDenis]]></dc:creator>
				<category><![CDATA[Data Modelling and Design]]></category>
		<category><![CDATA[Database Programming]]></category>
		<category><![CDATA[Microsoft SQL Server]]></category>
		<category><![CDATA[Microsoft SQL Server Admin]]></category>
		<category><![CDATA[denali]]></category>
		<category><![CDATA[functions]]></category>
		<category><![CDATA[iif]]></category>

		<guid isPermaLink="false">/index.php/2011/07/a-quick-look-at-the/</guid>
		<description><![CDATA[Denali CTP3 comes with the IIF function, if you have used VB or Excel then you already know how this function works. In essence this function is a shorter version of a CASE statement. 

The syntax is as follows

IIF ( boolean_expression, true_value,&#8230;]]></description>
				<content:encoded><![CDATA[<p>Denali CTP3 comes with the IIF function, if you have used VB or Excel then you already know how this function works. In essence this function is a shorter version of a CASE statement. </p>
<p>The syntax is as follows</p>
<pre>IIF ( boolean_expression, true_value, false_value )</pre>
<p>So instead of this</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
</pre></td><td class="de1"><pre class="de1"><span class="kw1">SELECT</span> <span class="kw1">CASE</span> <span class="kw1">WHEN</span> <span class="nu0">1</span> <span class="sy0">=</span> <span class="nu0">2</span> <span class="kw1">THEN</span> <span class="st0">'equal'</span> <span class="kw1">ELSE</span> <span class="st0">'not equal'</span> <span class="kw1">END</span> <span class="kw1">AS</span> Comp</pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">SELECT CASE WHEN 1 = 2 THEN 'equal' ELSE 'not equal' END AS Comp</pre></div></div>

<p>We can do this</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
</pre></td><td class="de1"><pre class="de1"><span class="kw1">SELECT</span> IIF<span class="br0">&#40;</span><span class="nu0">1</span><span class="sy0">=</span><span class="nu0">2</span>,<span class="st0">'equal'</span>,<span class="st0">'not equal'</span><span class="br0">&#41;</span> <span class="kw1">as</span> Comp</pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">SELECT IIF(1=2,'equal','not equal') as Comp</pre></div></div>

<p>Both of those will return not equal</p>
<p>Be aware that you can&#8217;t use NULL like in the example below</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
</pre></td><td class="de1"><pre class="de1"><span class="kw1">SELECT</span> IIF<span class="br0">&#40;</span><span class="nu0">1</span><span class="sy0">=</span><span class="nu0">2</span>,<span class="sy0">NULL</span> ,<span class="sy0">NULL</span> <span class="br0">&#41;</span> <span class="kw1">as</span> calc</pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">SELECT IIF(1=2,NULL ,NULL ) as calc</pre></div></div>

<p>It throws an error (with a typo)</p>
<p>Msg 8133, Level 16, State 1, Line 1<br />
At <strong>lease </strong>one of the result expressions in a CASE specification must be an expression other than the NULL constant.</p>
<p>If you use a variable then you can use NULL</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
</pre></td><td class="de1"><pre class="de1"><span class="kw1">declare</span> @i <span class="kw1">int</span> <span class="sy0">=</span> <span class="sy0">NULL</span> 
&nbsp;
&nbsp;
<span class="kw1">SELECT</span> IIF<span class="br0">&#40;</span><span class="nu0">1</span><span class="sy0">=</span><span class="nu0">2</span>,@i,@i<span class="br0">&#41;</span> <span class="kw1">as</span> calc</pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">declare @i int = NULL 


SELECT IIF(1=2,@i,@i) as calc</pre></div></div>

<p>Here is some more info from Books On Line</p>
<p><em>IIF is a shorthand way for writing a CASE statement. It evaluates the Boolean expression passed as the first argument, and then returns either of the other two arguments based on the result of the evaluation. That is, the true_value is returned if the Boolean expression is true, and the false_value is returned if the Boolean expression is false or unknown. true_value and false_value can be of any type. The same rules that apply to the CASE statement for Boolean expressions, null handling, and return types also apply to IIF.</p>
<p>The fact that IIF is translated into CASE also has an impact on other aspects of the behavior of this function. Since CASE statements can nested only up to the level of 10, IIF statements can also be nested only up to the maximum level of 10. Also, IIF is remoted to other servers as a semantically equivalent CASE statement, with all the behaviors of a remoted CASE statement.</em></p>
<p>Here is a nested (silly) example</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
</pre></td><td class="de1"><pre class="de1"><span class="kw1">SELECT</span> IIF<span class="br0">&#40;</span><span class="nu0">1</span><span class="sy0">=</span><span class="nu0">2</span>,<span class="st0">'equal'</span>,IIF<span class="br0">&#40;</span><span class="nu0">4</span><span class="sy0">=</span><span class="nu0">2</span>,<span class="st0">'equal'</span>,<span class="st0">'not equal'</span><span class="br0">&#41;</span><span class="br0">&#41;</span> <span class="kw1">as</span> Comp</pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">SELECT IIF(1=2,'equal',IIF(4=2,'equal','not equal')) as Comp</pre></div></div>

<p>Here is another example that combines IIF with TRY_CONVERT to return if a value can be converted to a specific data type</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
</pre></td><td class="de1"><pre class="de1"><span class="kw1">SELECT</span> IIF<span class="br0">&#40;</span>TRY_CONVERT<span class="br0">&#40;</span><span class="kw1">float</span>,<span class="st0">'bla'</span><span class="br0">&#41;</span><span class="kw1">IS</span> <span class="sy0">NULL</span>,<span class="st0">'Cast failed'</span>,<span class="st0">'Cast succeeded'</span><span class="br0">&#41;</span>
<span class="kw1">UNION</span>
<span class="kw1">SELECT</span> IIF<span class="br0">&#40;</span>TRY_CONVERT<span class="br0">&#40;</span><span class="kw1">float</span>,<span class="st0">'1'</span><span class="br0">&#41;</span><span class="kw1">IS</span> <span class="sy0">NULL</span>,<span class="st0">'Cast failed'</span>,<span class="st0">'Cast succeeded'</span><span class="br0">&#41;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">SELECT IIF(TRY_CONVERT(float,'bla')IS NULL,'Cast failed','Cast succeeded')
UNION
SELECT IIF(TRY_CONVERT(float,'1')IS NULL,'Cast failed','Cast succeeded')</pre></div></div>

<p>&#8212;&#8212;&#8211;<br />
Cast failed<br />
Cast succeeded</p>
<p>I welcome this function, anything that makes the code shorter is welcomed with open arms by me.</p>
]]></content:encoded>
			<wfw:commentRss>/index.php/datamgmt/datadesign/a-quick-look-at-the/feed/</wfw:commentRss>
		<slash:comments>7</slash:comments>
		</item>
	</channel>
</rss>
