<?xml version="1.0" encoding="UTF-8"?><rss version="2.0"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:atom="http://www.w3.org/2005/Atom"
	xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
	xmlns:slash="http://purl.org/rss/1.0/modules/slash/"
	>

<channel>
	<title>windowing functions &#8211; LessthanDot</title>
	<atom:link href="/index.php/tag/windowing-functions/feed/" rel="self" type="application/rss+xml" />
	<link>/</link>
	<description>A Technical Community for IT Professionals</description>
	<lastBuildDate>Sat, 09 Mar 2019 12:50:36 +0000</lastBuildDate>
	<language>en-US</language>
	<sy:updatePeriod>hourly</sy:updatePeriod>
	<sy:updateFrequency>1</sy:updateFrequency>
	<generator>https://wordpress.org/?v=4.6.1</generator>
	<item>
		<title>Beware the defaults! (in windowing functions) &#8211; The Movie!</title>
		<link>/index.php/datamgmt/dbprogramming/mssqlserver/beware-the-defaults-in-windowing-functions-the-movie/</link>
		<comments>/index.php/datamgmt/dbprogramming/mssqlserver/beware-the-defaults-in-windowing-functions-the-movie/#comments</comments>
		<pubDate>Thu, 27 Nov 2014 14:30:53 +0000</pubDate>
		<dc:creator><![CDATA[Koen Verbeeck]]></dc:creator>
				<category><![CDATA[Microsoft SQL Server]]></category>
		<category><![CDATA[online training]]></category>
		<category><![CDATA[sql server]]></category>
		<category><![CDATA[syndicated]]></category>
		<category><![CDATA[t-sql]]></category>
		<category><![CDATA[webucator]]></category>
		<category><![CDATA[windowing functions]]></category>

		<guid isPermaLink="false">/?p=3071</guid>
		<description><![CDATA[I was recently contacted by the fine gents of Webucator, an online training services provider. In order to promote their SQL Server classes, they are doing a free series called SQL Server Solutions from the Web where they show different SQL Server solutions found in blog posts around the web. Essentially, they are turning blog posts [&#8230;]]]></description>
				<content:encoded><![CDATA[<p style="text-align: justify;">I was recently contacted by the fine gents of <a href="https://www.webucator.com/">Webucator</a>, an online training services provider. In order to promote their <a href="https://www.webucator.com/database/mssql.cfm">SQL Server classes</a>, they are doing a free series called <em>SQL Server Solutions from the Web</em> where they show different SQL Server solutions found in blog posts around the web. Essentially, they are turning blog posts into videos. They asked me if they could turn my blog post <a href="/index.php/datamgmt/dbprogramming/mssqlserver/beware-the-defaults-in-windowing-functions/">Beware the defaults! (in windowing functions)</a> into such a video and &#8211; humble as I am &#8211; I gave them permission to do so. And the result is now here for everyone to watch:</p>
<p><iframe width="500" height="281" src="https://www.youtube.com/embed/nBUnoVRjVSA?feature=oembed" frameborder="0" allowfullscreen></iframe></p>
<p style="text-align: justify;"><a href="https://www.youtube.com/watch?v=nBUnoVRjVSA">URL to Youtube video</a></p>
<p style="text-align: justify;">I&#8217;m quite pleased with the video &#8211; excellent <a href="http://technet.microsoft.com/en-us/sysinternals/bb897434.aspx">Zoomit </a>use by the way &#8211; as it highlights the most important aspects of my blog post:</p>
<ul style="text-align: justify;">
<li>For regular aggregation functions using the OVER clause, do not use the ORDER BY unless necessary because this invokes the horrible default of RANGE BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW.</li>
<li>If you do use the ORDER BY specify a correct sorting order.</li>
</ul>
<p style="text-align: justify;">Or even better, specify ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW or another framing option. Just not the default <img src="https://s.w.org/images/core/emoji/2/72x72/1f642.png" alt="🙂" class="wp-smiley" style="height: 1em; max-height: 1em;" /><br />
The one thing missing in the video &#8211; and I must confess I didn&#8217;t highlight it enough in my blog post &#8211; is the massive performance difference between ROWS and RANGE. I&#8217;m re-reading the excellent book by Itzik Ben-Gan about the <a href="http://www.amazon.com/Microsoft-High-Performance-Functions-Developer-Reference/dp/0735658366/ref=sr_1_1?ie=UTF8&amp;qid=1417091814&amp;sr=8-1&amp;keywords=windowing+functions">T-SQL windowing functions</a> and there Itzik explains why this is the case. In a nutshell:</p>
<p style="text-align: justify;">When using the ROWS window frame extent, the window spool operator can use an optimized in-memory work table which speeds things up tremendously. However, when using RANGE the typical on-disk work table has to be used, which is of course much slower. In theory, RANGE is equal to ROWS when the ordering values are unique within the partition, but the optimizer doesn&#8217;t check for uniqueness so RANGE will always default to the on-disk work table.</p>
<p style="text-align: justify;">If you were not convinced to always specify ROWS instead of the default RANGE, I hope you now are.</p>
]]></content:encoded>
			<wfw:commentRss>/index.php/datamgmt/dbprogramming/mssqlserver/beware-the-defaults-in-windowing-functions-the-movie/feed/</wfw:commentRss>
		<slash:comments>4</slash:comments>
		</item>
		<item>
		<title>Beware the defaults! (in windowing functions)</title>
		<link>/index.php/datamgmt/dbprogramming/mssqlserver/beware-the-defaults-in-windowing-functions/</link>
		<comments>/index.php/datamgmt/dbprogramming/mssqlserver/beware-the-defaults-in-windowing-functions/#comments</comments>
		<pubDate>Tue, 07 Oct 2014 12:22:28 +0000</pubDate>
		<dc:creator><![CDATA[Koen Verbeeck]]></dc:creator>
				<category><![CDATA[Microsoft SQL Server]]></category>
		<category><![CDATA[sql]]></category>
		<category><![CDATA[syndicated]]></category>
		<category><![CDATA[t-sql]]></category>
		<category><![CDATA[windowing functions]]></category>

		<guid isPermaLink="false">/?p=3007</guid>
		<description><![CDATA[Some time ago I was writing some windowing functions on a set of data. Basically I was looking for the last date an event had occurred for each type of event. Let’s illustrate with an example: T-SQL1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 CREATE TABLE dbo.TestOver &#160; [&#8230;]]]></description>
				<content:encoded><![CDATA[<p style="text-align: justify">Some time ago I was writing some windowing functions on a set of data. Basically I was looking for the last date an event had occurred for each type of event. Let’s illustrate with an example:</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
</pre></td><td class="de1"><pre class="de1"><span class="kw1">CREATE</span> <span class="kw1">TABLE</span> dbo.<span class="me1">TestOver</span>
&nbsp; &nbsp; <span class="br0">&#40;</span>ID <span class="kw1">INT</span> <span class="kw1">IDENTITY</span><span class="br0">&#40;</span><span class="nu0">1</span>,<span class="nu0">1</span><span class="br0">&#41;</span> <span class="kw1">PRIMARY</span> <span class="kw1">KEY</span> <span class="sy0">NOT</span> <span class="sy0">NULL</span>
&nbsp; &nbsp; ,<span class="br0">&#91;</span><span class="kw1">Group</span><span class="br0">&#93;</span> <span class="kw1">CHAR</span><span class="br0">&#40;</span><span class="nu0">1</span><span class="br0">&#41;</span> <span class="sy0">NOT</span> <span class="sy0">NULL</span>
&nbsp; &nbsp; ,<span class="kw1">Value</span> <span class="kw1">INT</span> <span class="sy0">NOT</span> <span class="sy0">NULL</span><span class="br0">&#41;</span>;
&nbsp;
<span class="kw1">INSERT</span> <span class="kw1">INTO</span> dbo.<span class="me1">TestOver</span><span class="br0">&#40;</span><span class="br0">&#91;</span><span class="kw1">Group</span><span class="br0">&#93;</span>,<span class="kw1">Value</span><span class="br0">&#41;</span>
<span class="kw1">VALUES</span>&nbsp; &nbsp;<span class="br0">&#40;</span><span class="st0">'A'</span>,<span class="nu0">1</span><span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; ,<span class="br0">&#40;</span><span class="st0">'A'</span>,<span class="nu0">2</span><span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; ,<span class="br0">&#40;</span><span class="st0">'A'</span>,<span class="nu0">3</span><span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; ,<span class="br0">&#40;</span><span class="st0">'A'</span>,<span class="nu0">4</span><span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; ,<span class="br0">&#40;</span><span class="st0">'B'</span>,<span class="nu0">5</span><span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; ,<span class="br0">&#40;</span><span class="st0">'B'</span>,<span class="nu0">6</span><span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; ,<span class="br0">&#40;</span><span class="st0">'B'</span>,<span class="nu0">7</span><span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; ,<span class="br0">&#40;</span><span class="st0">'B'</span>,<span class="nu0">8</span><span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; ,<span class="br0">&#40;</span><span class="st0">'B'</span>,<span class="nu0">9</span><span class="br0">&#41;</span>;</pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">CREATE TABLE dbo.TestOver
	(ID INT IDENTITY(1,1) PRIMARY KEY NOT NULL
	,[Group] CHAR(1) NOT NULL
	,Value INT NOT NULL);

INSERT INTO dbo.TestOver([Group],Value)
VALUES	 ('A',1)
		,('A',2)
		,('A',3)
		,('A',4)
		,('B',5)
		,('B',6)
		,('B',7)
		,('B',8)
		,('B',9);</pre></div></div>

<p style="text-align: justify">Using the data above, I need to find the value 4 for group A and the value 9 for group B. I first wrote the following T-SQL statement to retrieve the data:</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
</pre></td><td class="de1"><pre class="de1"><span class="kw1">SELECT</span> <span class="kw1">DISTINCT</span> <span class="br0">&#91;</span><span class="kw1">Group</span><span class="br0">&#93;</span>, <span class="kw2">MAX</span><span class="br0">&#40;</span><span class="kw1">Value</span><span class="br0">&#41;</span> <span class="kw1">OVER</span> <span class="br0">&#40;</span>PARTITION <span class="kw1">BY</span> <span class="br0">&#91;</span><span class="kw1">Group</span><span class="br0">&#93;</span> <span class="kw1">ORDER</span> <span class="kw1">BY</span> <span class="kw1">Value</span><span class="br0">&#41;</span>
<span class="kw1">FROM</span> dbo.<span class="me1">TestOver</span>;</pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">SELECT DISTINCT [Group], MAX(Value) OVER (PARTITION BY [Group] ORDER BY Value)
FROM dbo.TestOver;</pre></div></div>

<p style="text-align: justify"><a href="/wp-content/uploads/2014/10/query1.png"><img class="alignnone size-full wp-image-3013" src="/wp-content/uploads/2014/10/query1.png" alt="query1" width="595" height="290" srcset="/wp-content/uploads/2014/10/query1.png 595w, /wp-content/uploads/2014/10/query1-300x146.png 300w" sizes="(max-width: 595px) 100vw, 595px" /></a></p>
<p style="text-align: justify">The results are of course incorrect. A little baffled why this was the cause, I changed the ORDER BY to descending which gave me the results I wanted.</p>
<p style="text-align: justify"><a href="/wp-content/uploads/2014/10/query2.png"><img class="alignnone size-full wp-image-3011" src="/wp-content/uploads/2014/10/query2.png" alt="query2" width="617" height="142" srcset="/wp-content/uploads/2014/10/query2.png 617w, /wp-content/uploads/2014/10/query2-300x69.png 300w" sizes="(max-width: 617px) 100vw, 617px" /></a></p>
<p style="text-align: justify">I really didn’t think twice over this, until I joined the session <a href="http://www.sqlserverdays.be/powerful-t-sql-improvements-that-reduce-query-complexity/">Powerful T-SQL Improvements that Reduce Query Complexity</a> by Hugo Kornelis (<a href="http://sqlblog.com/blogs/hugo_kornelis/">blog</a> | <a href="https://twitter.com/Hugo_Kornelis">twitter</a>) on the SQL Server Days. I learned two things.</p>
<ol style="text-align: justify">
<li>You don’t need to specify the ORDER BY.</li>
</ol>
<p style="text-align: justify">In SQL Server 2005, the <a href="http://msdn.microsoft.com/en-us/library/ms189461(v=sql.90).aspx">OVER clause</a> was introduced and it simplified some aggregations like the one we’re doing here. When using the ranking window functions the ORDER BY clause is mandatory, but when using a regular aggregate window function the ORDER BY clause is not allowed. This gives us the following T-SQL which is the perfect solution for our problem here:</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
</pre></td><td class="de1"><pre class="de1"><span class="kw1">SELECT</span> <span class="kw1">DISTINCT</span> <span class="br0">&#91;</span><span class="kw1">Group</span><span class="br0">&#93;</span>, <span class="kw2">MAX</span><span class="br0">&#40;</span><span class="kw1">Value</span><span class="br0">&#41;</span> <span class="kw1">OVER</span> <span class="br0">&#40;</span>PARTITION <span class="kw1">BY</span> <span class="br0">&#91;</span><span class="kw1">Group</span><span class="br0">&#93;</span><span class="br0">&#41;</span>
<span class="kw1">FROM</span> dbo.<span class="me1">TestOver</span>;</pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">SELECT DISTINCT [Group], MAX(Value) OVER (PARTITION BY [Group])
FROM dbo.TestOver;</pre></div></div>

<p style="text-align: justify">To be honest, I completely forgot aggregate functions could be used this way. The PARTITION BY clause is optional as well, so you can have a completely empty OVER clause.</p>
<ol style="text-align: justify" start="2">
<li>When you do specify the ORDER BY, defaults come into play.</li>
</ol>
<p style="text-align: justify">Starting from SQL Server 2012, the T-SQL windowing functions and the <a href="http://msdn.microsoft.com/en-us/library/ms189461(v=sql.120).aspx">OVER clause</a> were greatly enhanced. Suddenly you can specify an ORDER BY for the aggregate windowing functions (which I did in the first attempts, remember?). However, if you specify an ORDER BY clause but no ROW or RANGE clause, SQL Server will apply the following defaults: RANGE UNBOUNDED PRECEDING as the lower limit and CURRENT ROW for the upper limit of the window. When Hugo explained this, I had my “Eureka” moment (or rather my “How could I have been this stupid?” moment). Because of these defaults, the MAX aggregate was calculated over the wrong windows! Let’s illustrate the concept for group A:</p>
<p style="text-align: justify"><a href="/wp-content/uploads/2014/10/windows.png"><img class="alignnone size-full wp-image-3012" src="/wp-content/uploads/2014/10/windows.png" alt="windows" width="204" height="189" /></a></p>
<p style="text-align: justify">Because of the defaults, the first window is limited to only one row. This means the MAX aggregate will return the value 1. In the second window, two rows are included and MAX will return 2 and so on. By reversing the sort order, the value 4 will always be included in the windows, so MAX will return the correct answers. However dropping the ORDER BY is in my opinion the cleanest option to solve the problem.</p>
<p style="text-align: justify"><strong>Conclusion</strong></p>
<p style="text-align: justify">Learn your T-SQL syntax and be aware of the defaults! Hugo also mentioned that ROWS <del>might</del> <strong>will</strong> have better performance than RANGE, so you better always specify your window frames to avoid the default.</p>
<p style="text-align: justify"><i>Update: I was contacted by the amazing Rob Farley who told me that ROWS will beat RANGE any day of the week and that you should always specify ROWS unless you really need RANGE.</i></p>
]]></content:encoded>
			<wfw:commentRss>/index.php/datamgmt/dbprogramming/mssqlserver/beware-the-defaults-in-windowing-functions/feed/</wfw:commentRss>
		<slash:comments>5</slash:comments>
		</item>
		<item>
		<title>Does anyone use the  NTILE() windowing function?</title>
		<link>/index.php/datamgmt/dbprogramming/does-anyone-use-the-ntile/</link>
		<comments>/index.php/datamgmt/dbprogramming/does-anyone-use-the-ntile/#comments</comments>
		<pubDate>Wed, 16 Jan 2013 12:22:00 +0000</pubDate>
		<dc:creator><![CDATA[SQLDenis]]></dc:creator>
				<category><![CDATA[Database Programming]]></category>
		<category><![CDATA[Microsoft SQL Server]]></category>
		<category><![CDATA[ntile]]></category>
		<category><![CDATA[ranking]]></category>
		<category><![CDATA[windowing functions]]></category>

		<guid isPermaLink="false">/index.php/2013/01/does-anyone-use-the-ntile/</guid>
		<description><![CDATA[A question was asked on StackOverflow about how NTILE() works: Want to learn more on NTILE() I answered that question and then started thinking about NTILE(), I realized that I have never used this function in production code. Everytime I used it was fo&#8230;]]></description>
				<content:encoded><![CDATA[<p>A question was asked on StackOverflow about how NTILE() works: <a href="http://stackoverflow.com/questions/14355324/want-to-learn-more-on-ntile">Want to learn more on NTILE()</a> I answered that question and then started thinking about NTILE(), I realized that I have never used this function in production code. Everytime I used it was for demoware purposes. I did a quick check against a bunch of databases</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
</pre></td><td class="de1"><pre class="de1"><span class="kw1">SELECT</span> <span class="sy0">*</span> <span class="kw1">FROM</span> sys.<span class="me1">sql_modules</span>
<span class="kw1">WHERE</span> OBJECT_DEF<span class="sy0">IN</span>ITION<span class="br0">&#40;</span><span class="kw2">object_id</span><span class="br0">&#41;</span> <span class="sy0">LIKE</span> <span class="st0">'%ntile%'</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">SELECT * FROM sys.sql_modules
WHERE OBJECT_DEFINITION(object_id) LIKE '%ntile%'</pre></div></div>

<p>&#8212;&#8212;-<br />
(0 row(s) affected)</p>
<p>Doesn&#8217;t exist. I also have a hard time figuring out where I would use it, maybe if I want to put an equal number or rows in a bunch of buckets, maybe then this will be used to call another process asynchronously?</p>
<p>For you that don&#8217;t know what NTILE() does it basically distributes the rows in a bunch of groups. If you specify 2 groups and you have 10 rows then each group will have 5 rows.</p>
<p>Let&#8217;s look at some code to understand how it works, first create this simple table</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
</pre></td><td class="de1"><pre class="de1"><span class="kw1">CREATE</span> <span class="kw1">TABLE</span> &nbsp;#temp<span class="br0">&#40;</span>StudentID <span class="kw1">CHAR</span><span class="br0">&#40;</span><span class="nu0">2</span><span class="br0">&#41;</span>, &nbsp;Score &nbsp;<span class="kw1">INT</span><span class="br0">&#41;</span> 
&nbsp;
<span class="kw1">INSERT</span> #temp &nbsp;<span class="kw1">VALUES</span><span class="br0">&#40;</span><span class="st0">'S1'</span>,<span class="nu0">75</span> <span class="br0">&#41;</span> 
<span class="kw1">INSERT</span> #temp &nbsp;<span class="kw1">VALUES</span><span class="br0">&#40;</span><span class="st0">'S2'</span>,<span class="nu0">83</span><span class="br0">&#41;</span>
<span class="kw1">INSERT</span> #temp &nbsp;<span class="kw1">VALUES</span><span class="br0">&#40;</span><span class="st0">'S3'</span>,<span class="nu0">91</span><span class="br0">&#41;</span>
<span class="kw1">INSERT</span> #temp &nbsp;<span class="kw1">VALUES</span><span class="br0">&#40;</span><span class="st0">'S4'</span>,<span class="nu0">83</span><span class="br0">&#41;</span>
<span class="kw1">INSERT</span> #temp &nbsp;<span class="kw1">VALUES</span><span class="br0">&#40;</span><span class="st0">'S5'</span>,<span class="nu0">93</span> <span class="br0">&#41;</span> </pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">CREATE TABLE  #temp(StudentID CHAR(2),  Score  INT) 

INSERT #temp  VALUES('S1',75 ) 
INSERT #temp  VALUES('S2',83)
INSERT #temp  VALUES('S3',91)
INSERT #temp  VALUES('S4',83)
INSERT #temp  VALUES('S5',93 ) </pre></div></div>

<p>Now if you use NTILE() to create 2 buckets, you will see 1 and 2 as NtileValue</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
</pre></td><td class="de1"><pre class="de1"><span class="kw1">SELECT</span> NTILE<span class="br0">&#40;</span><span class="nu0">2</span><span class="br0">&#41;</span> <span class="kw1">OVER</span><span class="br0">&#40;</span><span class="kw1">ORDER</span> <span class="kw1">BY</span> Score<span class="br0">&#41;</span> <span class="kw1">AS</span> NtileValue,<span class="sy0">*</span>
<span class="kw1">FROM</span> #temp
<span class="kw1">ORDER</span> <span class="kw1">BY</span> <span class="nu0">1</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">SELECT NTILE(2) OVER(ORDER BY Score) AS NtileValue,*
FROM #temp
ORDER BY 1</pre></div></div>

<p>Here are the results:</p>
<pre>NtileValue	StudentID	Score
1		S1		75
1		S2		83
1		S4		83
2		S3		91
2		S5		93</pre>
<p>Since the number of rows are not even, the first bucket will have three rows and the second bucket will have two rows</p>
<p>Let&#8217;s add one more row to this table</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
</pre></td><td class="de1"><pre class="de1"><span class="kw1">INSERT</span> #temp &nbsp;<span class="kw1">VALUES</span><span class="br0">&#40;</span><span class="st0">'S6'</span>,<span class="nu0">92</span> <span class="br0">&#41;</span> </pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">INSERT #temp  VALUES('S6',92 ) </pre></div></div>

<p>Now let&#8217;s run the same query as before</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
</pre></td><td class="de1"><pre class="de1"><span class="kw1">SELECT</span> NTILE<span class="br0">&#40;</span><span class="nu0">2</span><span class="br0">&#41;</span> <span class="kw1">OVER</span><span class="br0">&#40;</span><span class="kw1">ORDER</span> <span class="kw1">BY</span> Score<span class="br0">&#41;</span> <span class="kw1">AS</span> NtileValue,<span class="sy0">*</span>
<span class="kw1">FROM</span> #temp
<span class="kw1">ORDER</span> <span class="kw1">BY</span> <span class="nu0">1</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">SELECT NTILE(2) OVER(ORDER BY Score) AS NtileValue,*
FROM #temp
ORDER BY 1</pre></div></div>

<p>Here are the results:</p>
<pre>NtileValue	StudentID	Score
1		S1		75
1		S2		83
1		S4		83
2		S3		91
2		S6		92
2		S5		93</pre>
<p>As you can see both buckets now have three rows</p>
<p>What if we use NTILE(3)?</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
</pre></td><td class="de1"><pre class="de1"><span class="kw1">SELECT</span> NTILE<span class="br0">&#40;</span><span class="nu0">3</span><span class="br0">&#41;</span> <span class="kw1">OVER</span><span class="br0">&#40;</span><span class="kw1">ORDER</span> <span class="kw1">BY</span> Score<span class="br0">&#41;</span> <span class="kw1">AS</span> NtileValue,<span class="sy0">*</span>
<span class="kw1">FROM</span> #temp
<span class="kw1">ORDER</span> <span class="kw1">BY</span> <span class="nu0">1</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">SELECT NTILE(3) OVER(ORDER BY Score) AS NtileValue,*
FROM #temp
ORDER BY 1</pre></div></div>

<p>Here are the results:</p>
<pre>NtileValue	StudentID	Score
1		S1		75
1		S2		83
2		S4		83
2		S3		91
3		S6		92
3		S5		93</pre>
<p>As expected, you now get three buckets back.</p>
<p>So do you use NTILE() currently or do you have plans to use it in the future?</p>
]]></content:encoded>
			<wfw:commentRss>/index.php/datamgmt/dbprogramming/does-anyone-use-the-ntile/feed/</wfw:commentRss>
		<slash:comments>4</slash:comments>
		</item>
	</channel>
</rss>
