<?xml version="1.0" encoding="UTF-8"?><rss version="2.0"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:atom="http://www.w3.org/2005/Atom"
	xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
	xmlns:slash="http://purl.org/rss/1.0/modules/slash/"
	>

<channel>
	<title>math &#8211; LessthanDot</title>
	<atom:link href="/index.php/tag/math/feed/" rel="self" type="application/rss+xml" />
	<link>/</link>
	<description>A Technical Community for IT Professionals</description>
	<lastBuildDate>Sat, 09 Mar 2019 12:50:36 +0000</lastBuildDate>
	<language>en-US</language>
	<sy:updatePeriod>hourly</sy:updatePeriod>
	<sy:updateFrequency>1</sy:updateFrequency>
	<generator>https://wordpress.org/?v=4.6.1</generator>
	<item>
		<title>How to flip a bit in SQL Server by using the Bitwise NOT operator</title>
		<link>/index.php/datamgmt/dbprogramming/how-to-flip-a-bit-in-sql-server-by-using/</link>
		<comments>/index.php/datamgmt/dbprogramming/how-to-flip-a-bit-in-sql-server-by-using/#comments</comments>
		<pubDate>Wed, 29 Sep 2010 15:30:45 +0000</pubDate>
		<dc:creator><![CDATA[SQLDenis]]></dc:creator>
				<category><![CDATA[Database Programming]]></category>
		<category><![CDATA[Microsoft SQL Server]]></category>
		<category><![CDATA[bits]]></category>
		<category><![CDATA[bitwise]]></category>
		<category><![CDATA[bool]]></category>
		<category><![CDATA[math]]></category>
		<category><![CDATA[sql server 2005]]></category>
		<category><![CDATA[sql server 2008]]></category>
		<category><![CDATA[tinyint]]></category>

		<guid isPermaLink="false">/index.php/2010/09/how-to-flip-a-bit-in-sql-server-by-using/</guid>
		<description><![CDATA[This question came up today. in c# i have a: a = !a (if false makes it true, if true makes it false) in sql i want to do the same with a BIT variable In a language like C# you can use ! for a bool to make it become true if it was [&#8230;]]]></description>
				<content:encoded><![CDATA[<p>This question came up today.</p>
<blockquote><p>in c# i have a:</p>
<p> a = !a<br />
(if false makes it true, if true makes it false)</p>
<p>in sql i want to do the same with a BIT variable</p></blockquote>
<p>In a language like C# you can use ! for a bool to make it become true if it was false and vice versa</p>
<p>So if you run this</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="csharp"><thead><tr><td colspan="2"  class="head">C#</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
</pre></td><td class="de1"><pre class="de1">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 
<span class="kw4">bool</span> a <span class="sy0">=</span> <span class="kw1">true</span><span class="sy0">;</span>
a <span class="sy0">=</span> <span class="sy0">!</span>a<span class="sy0">;</span>
&nbsp;
Console<span class="sy0">.</span><span class="me1">WriteLine</span><span class="br0">&#40;</span>a<span class="sy0">.</span><span class="me1">ToString</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#41;</span><span class="sy0">;</span>
a <span class="sy0">=</span> <span class="sy0">!</span>a<span class="sy0">;</span>
Console<span class="sy0">.</span><span class="me1">WriteLine</span><span class="br0">&#40;</span>a<span class="sy0">.</span><span class="me1">ToString</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#41;</span><span class="sy0">;</span>
Console<span class="sy0">.</span><span class="me1">ReadLine</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">            
bool a = true;
a = !a;

Console.WriteLine(a.ToString());
a = !a;
Console.WriteLine(a.ToString());
Console.ReadLine();</pre></div></div>

<p>The output will be</p>
<p>False<br />
True</p>
<p>How can you do this in SQL Server? It is pretty easy, take a look</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
</pre></td><td class="de1"><pre class="de1"><span class="kw1">select</span> <span class="sy0">~</span> <span class="kw1">CONVERT</span><span class="br0">&#40;</span><span class="kw1">bit</span>,<span class="nu0">0</span><span class="br0">&#41;</span>
<span class="kw1">select</span> <span class="sy0">~</span> <span class="kw1">CONVERT</span><span class="br0">&#40;</span><span class="kw1">bit</span>,<span class="nu0">1</span><span class="br0">&#41;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">select ~ CONVERT(bit,0)
select ~ CONVERT(bit,1)</pre></div></div>

<p>The ~ symbol is the Bitwise NOT operator, here is what books on line has to say about the Bitwise NOT operator.</p>
<blockquote><p>The ~ bitwise operator performs a bitwise logical NOT for the expression, taking each bit in turn. If expression has a value of 0, the bits in the result set are set to 1; otherwise, the bit in the result is cleared to a value of 0. In other words, ones are changed to zeros and zeros are changed to ones.</p></blockquote>
<p>Let&#8217;s take a look at another example. What do you think will happen here?</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
</pre></td><td class="de1"><pre class="de1"><span class="kw1">select</span> <span class="sy0">~</span> <span class="kw1">CONVERT</span><span class="br0">&#40;</span><span class="kw1">tinyint</span>,<span class="nu0">0</span><span class="br0">&#41;</span>
<span class="kw1">select</span> <span class="sy0">~</span> <span class="kw1">CONVERT</span><span class="br0">&#40;</span><span class="kw1">tinyint</span>,<span class="nu0">1</span><span class="br0">&#41;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">select ~ CONVERT(tinyint,0)
select ~ CONVERT(tinyint,1)</pre></div></div>

<p>That actually returns<br />
255<br />
254</p>
<p>Why is that? Here is a simple explanation</p>
<p>With a tinyint possible values are between 0 and 255, when you have 0 all bits are turned off, when you flip it, you turn all bits on and you get 255</p>
<pre>00000000	= 0   ( 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0)
11111111	= 255 (1 + 2 + 4 + 8 + 16 + 32 + 64 + 128)</pre>
<p>When you have 1 all bits are turned off except for the first bit, when you flip it you turn all bits on except for the first bit</p>
<pre>00000001	=  1 ( 1 + 0 + 0 + 0 + 0 + 0 + 0 + 0)
11111110	= 254 (0 + 2 + 4 + 8 + 16 + 32 + 64 + 128)</pre>
<p>If you want to use tinyint or int you can use the following code</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
</pre></td><td class="de1"><pre class="de1"><span class="kw1">select</span> &nbsp;<span class="kw1">CONVERT</span><span class="br0">&#40;</span><span class="kw1">tinyint</span>,<span class="nu0">0</span><span class="br0">&#41;</span> <span class="sy0">^</span> <span class="nu0">1</span> <span class="kw1">as</span> <span class="br0">&#91;</span><span class="kw1">tinyint</span><span class="br0">&#93;</span>, <span class="nu0">0</span><span class="sy0">^</span><span class="nu0">1</span> <span class="kw1">as</span> <span class="br0">&#91;</span><span class="kw1">int</span><span class="br0">&#93;</span>
<span class="kw1">select</span> &nbsp;<span class="kw1">CONVERT</span><span class="br0">&#40;</span><span class="kw1">tinyint</span>,<span class="nu0">1</span><span class="br0">&#41;</span> <span class="sy0">^</span> <span class="nu0">1</span> <span class="kw1">as</span> <span class="br0">&#91;</span><span class="kw1">tinyint</span><span class="br0">&#93;</span>, <span class="nu0">1</span><span class="sy0">^</span><span class="nu0">1</span> <span class="kw1">as</span> <span class="br0">&#91;</span><span class="kw1">int</span><span class="br0">&#93;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">select  CONVERT(tinyint,0) ^ 1 as [tinyint], 0^1 as [int]
select  CONVERT(tinyint,1) ^ 1 as [tinyint], 1^1 as [int]</pre></div></div>

<p>The ^ operator is the Bitwise Exclusive OR operator. Here is what books on line has to say about Bitwise Exclusive OR</p>
<blockquote><p>The ^ bitwise operator performs a bitwise logical exclusive OR between the two expressions, taking each corresponding bit for both expressions. The bits in the result are set to 1 if either (but not both) bits (for the current bit being resolved) in the input expressions have a value of 1. If both bits are 0 or both bits are 1, the bit in the result is cleared to a value of 0. </p></blockquote>
<p>Let&#8217;s take a closer look</p>
<p><em>The bits in the result are set to 1 if either (but not both) bits (for the current bit being resolved) in the input expressions have a value of 1.</em></p>
<p><strong>0 ^ 1</strong><br />
00000000<br />
00000001<br />
&#8212;&#8212;&#8211;<br />
00000001	</p>
<p><em>If both bits are 0 or both bits are 1, the bit in the result is cleared to a value of 0.</em></p>
<p><strong>1^1</strong><br />
00000001<br />
00000001<br />
&#8212;&#8212;&#8211;<br />
00000000	</p>
<p>So in the end if you want to flip a bit use the Bitwise NOT operator</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
</pre></td><td class="de1"><pre class="de1"><span class="kw1">select</span> <span class="sy0">~</span> <span class="kw1">CONVERT</span><span class="br0">&#40;</span><span class="kw1">bit</span>,<span class="nu0">0</span><span class="br0">&#41;</span>
<span class="kw1">select</span> <span class="sy0">~</span> <span class="kw1">CONVERT</span><span class="br0">&#40;</span><span class="kw1">bit</span>,<span class="nu0">1</span><span class="br0">&#41;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">select ~ CONVERT(bit,0)
select ~ CONVERT(bit,1)</pre></div></div>

<p>*** <strong>Remember, if you have a SQL related question, try our <a href="http://forum.lessthandot.com/viewforum.php?f=17">Microsoft SQL Server Programming</a> forum or our <a href="http://forum.lessthandot.com/viewforum.php?f=22">Microsoft SQL Server Admin</a> forum</strong><ins></ins></p>
]]></content:encoded>
			<wfw:commentRss>/index.php/datamgmt/dbprogramming/how-to-flip-a-bit-in-sql-server-by-using/feed/</wfw:commentRss>
		<slash:comments>5</slash:comments>
		</item>
		<item>
		<title>Accurately Simulating Movement of a Tracked Vehicle in 2D Space</title>
		<link>/index.php/webdev/uidevelopment/accurately-simulating-movement-of-a-trac/</link>
		<comments>/index.php/webdev/uidevelopment/accurately-simulating-movement-of-a-trac/#comments</comments>
		<pubDate>Mon, 20 Sep 2010 16:41:38 +0000</pubDate>
		<dc:creator><![CDATA[Rob Earl]]></dc:creator>
				<category><![CDATA[UI Development]]></category>
		<category><![CDATA[c#]]></category>
		<category><![CDATA[java]]></category>
		<category><![CDATA[math]]></category>
		<category><![CDATA[simulation]]></category>
		<category><![CDATA[tracking]]></category>

		<guid isPermaLink="false">/index.php/2010/09/accurately-simulating-movement-of-a-trac/</guid>
		<description><![CDATA[As part of a simulation I've been developing I recently had to decide how to model movement of vehicles within a 2D space. To keep things simple I settled on a tracked vehicle. Each time the simulation updates I calculate how much the vehicle rotates an&#8230;]]></description>
				<content:encoded><![CDATA[<p><img align="right" src="/wp-content/uploads/users/robearl/TankMovement-Simplified.png" alt="Basic Tracked Movement" title="" />As part of a simulation I&#8217;ve been developing I recently had to decide how to model movement of vehicles within a 2D space. To keep things simple I settled on a tracked vehicle. Each time the simulation updates I calculate how much the vehicle rotates and how far it moves based on the speed of it&#8217;s tracks. From there I calculate the new coordinates for redrawing the vehicle.</p>
<p>Knowing the current location (<strong>x,y</strong>) and heading (<strong>h</strong>) I initially adopted a simplified way to calculate the rotation (<strong>g</strong>) and speed (<strong>s</strong>) based on the speed of the vehicle&#8217;s tracks (<strong>T<span class="MT_smaller">1</span></strong> and <strong>T<span class="MT_smaller">2</span></strong>) (Figure 1). With these variables I create a right angled triangle and use <a href="http://www.mathsisfun.com/sine-cosine-tangent.html">maths</a> to calculate how far the vehicle moves in the x and y coordinates in order to find it&#8217;s finishing location (<strong>x&#8217;,y&#8217;</strong>).</p>
<pre>x' = x + s * sin(h + g)
y' = y + s * cos(h + g)</pre>
<p>This method is a reasonable approximation for the movement of a tracked vehicle: It&#8217;ll move faster when you expect it to and it&#8217;ll turn faster when you expect it to. However, as a <a href="http://yourdaysarenumbered.co.uk/">stand up mathematician</a> pointed out to me, it&#8217;s not an accurate representation of what should actually be happening. I had also observed vehicles having problems turning to face something close to and behind them resulting in endless circling of the target.</p>
<h1>Improving Accuracy</h1>
<p>A more accurate representation is the vehicle travelling a distance, <strong>s</strong>, along the circumference of a circle who&#8217;s radius can be calculated based on <strong>T<span class="MT_smaller">1</span></strong>, <strong>T<span class="MT_smaller">2</span></strong> and the distance between the tracks (<strong>2d</strong>) (Figure 2).</p>
<p><img align="right" src="/wp-content/uploads/users/robearl/TankMovement-Complex-bare3.png" alt="Figure 2: More Accurate Movement" title="" />If <strong>T<span class="MT_smaller">2</span></strong> traces a circle of radius <strong>r</strong> then <strong>T<span class="MT_smaller">1</span></strong> traces a circle of radius <strong>r + 2d</strong>. Since <strong>d</strong> is static we can say that the ratio of <strong>T<span class="MT_smaller">1</span></strong> to <strong>T<span class="MT_smaller">2</span></strong> is proportional to the ratio of the radii. This gives us the following equation to solve:</p>
<pre>T1   r + 2d
-- = -------
T2     r</pre>
<p>Solving this for r gives us:</p>
<pre>r =     2d 
    ----------
     T1
     --  -  1
     T2</pre>
<h2>Rotation</h2>
<p>We now have a triangle with 2 sides of known length. If we divide this triangle in half we can use the right angles to determine the vehicle will move <strong>2g</strong> radians around the circle (Figure 3).</p>
<p>We can say that the ratio between <strong>2g</strong> and 2 PI radians (360 degrees) is the same as the ratio between <b>s</b> and the circumference of the circle (2 * PI * (<strong>r</strong> + <strong>d</strong>)). Setting them to equal we can solve for <strong>g</strong>.</p>
<p><img align="right" src="/wp-content/uploads/users/robearl/TankMovement-Complex-Solving.png" alt="Figure 3: Solving Triangles" title="" />
<pre>  2g                s
------  =  -----------------
2 * PI      2 * PI * (r + d)
       s
2g = -------
     r + d

2g = T1 + T2
    --------
       2
    --------
     r + d

2g =    T1 + T2
     --------------
      2 * ( r + d )

g  =     T1 + T2
      -------------
      4 * ( r + d )</pre>
<p>If we substitute in our value for <b>r</b> and simplify we end up with:</p>
<pre>g = T1 - T2
    --------
       4d</pre>
<p>Which is a fairly simple calculation that scales by the size of the organism. The other thing missing from the approximate calculation is that the change in heading is actually <b>2g</b>, as can be seen from the symmetry in our diagrams.</p>
<h2>Distance</h2>
<p>Now that we know the angles we can use the <a href="http://en.wikipedia.org/wiki/Law_of_sines">Law of Sines</a> to calculate the straight line distance, <strong>t</strong>, between our vehicle&#8217;s start and end points. </p>
<pre>r + d        t / 2
--------- = -------
sin(PI/2)    sin(g)

r + d     t / 2
-----  = -------
  1       sin(g)

sin(g) * (r + d) = t / 2

t = 2 * sin(g) * (r + d)</pre>
<p>Once again we can substitute in our value for <strong>r</strong> and simplify to get:</p>
<pre>t = d(T1 + T2)
    ---------- * 2 * sin(g)
      T1 - T2</pre>
<p>Now that we know the distance and we know the angle we can use the same method we used earlier to calculate the new coordinates:</p>
<pre>x' = x + t * sin(h + g)
y' = y + t * cos(h + g)</pre>
<h2>Applying Our Findings</h2>
<p>So far we&#8217;ve seen a lot of (possibly confusing) numbers and symbols but what do we actually have to do do add this to a simulation? Each time our vehicle updates we need to:</p>
<ol>
<li>Calculate <strong>g</strong>.</li>
<li>Calculate <strong>t</strong>.</li>
<li>Calculate <strong>x&#8217;</strong>.</li>
<li>Calculate <strong>y&#8217;</strong>.</li>
<li>Adjust the vehicle&#8217;s coordinates to <strong>x&#8217;,y&#8217;</strong>.</li>
<li>Adjust the vehicle&#8217;s heading (<strong>h</strong>) by <strong>2g</strong>.</li>
</ol>
<p>You may have noticed there&#8217;s a possible division by zero error when <strong>T<span class="MT_smaller">1</span></strong> equals <strong>T<span class="MT_smaller">2</span></strong>. To protect against this we can check if they&#8217;re equal (or catch the exception) and use the calculation:</p>
<pre>x' = x + T1 * sin(h)
y' = y + T1 * cos(h)</pre>
<h2>Example</h2>
<p>Let&#8217;s say our vehicle has the properties:</p>
<p>T<span class="MT_smaller">1</span> = 1.0 (Track 1 Speed)<br />
T<span class="MT_smaller">2</span> = 0.5 (Track 2 Speed)<br />
d = 2.0 (Half distance between tracks)<br />
x = 0 (Coordinate)<br />
y = 0 (Coordinate)<br />
h = 2 (Heading)</p>
<p>1. Calculate <strong>g</strong></p>
<pre>g = T1 - T2
    --------
       4d
g = 1.0 - 0.5     0.5
    ---------  =  --- = 0.0625
        8          8</pre>
<p>2. Calculate <strong>t</strong></p>
<pre>t = d(T1 + T2)
    ---------- * 2 * sin(g)
      T1 - T2
= 0 + (2 * (1.0 + 0.5) * 2 * sin(0.0625) ) / ( 1.0 - 0.5 )
= (6 * 0.06246 ) / 0.5
= 0.37476 * 2
= 0.74951</pre>
<p>3. Calculate <strong>x&#8217;</strong>.</p>
<pre>x' = x + t * sin(h + g)
= 0 +  0.74951 * sin(2.0625)
= 0.66072</pre>
<p>4. Calculate <strong>y&#8217;</strong>.</p>
<pre>y' = y + t * cos(h + g)
= 0 + 0.74951 * cos(2.0625)
= -0.35387</pre>
<p>2. Adjust <strong>h</strong> by <strong>2g</strong>.</p>
<pre>h' = h + 2g
h' = 2 + 2 * 0.0625
h' = 2.125</pre>
<p>After this update our new state is:</p>
<p>x = 0.66072<br />
y = -0.35387<br />
h = 2.125</p>
<p>In the following Java example the Vehicle&#8217;s update method would be called from the main program loop.</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="java"><thead><tr><td colspan="2"  class="head">Java</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
</pre></td><td class="de1"><pre class="de1"><span class="kw1">public</span> <span class="kw1">class</span> Vehicle
<span class="br0">&#123;</span>
&nbsp; <span class="kw1">private</span> <span class="kw4">double</span> x, y, heading<span class="sy0">;</span>
&nbsp; <span class="kw1">private</span> <span class="kw4">int</span> size, maxSpeed<span class="sy0">;</span>
&nbsp; <span class="coMULTI">/*</span>
<span class="coMULTI">&nbsp; &nbsp; &nbsp;Other methods for initialising and controlling the vehicle.</span>
<span class="coMULTI">&nbsp; */</span>
&nbsp; <span class="kw1">public</span> <span class="kw4">void</span> update<span class="br0">&#40;</span><span class="br0">&#41;</span>
&nbsp; <span class="br0">&#123;</span>
&nbsp; &nbsp; <span class="kw4">double</span> tracks<span class="br0">&#91;</span><span class="nu0">2</span><span class="br0">&#93;</span> <span class="sy0">=</span> controller.<span class="me1">getTrackSpeeds</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span> <span class="co1">// Get the track speeds from whatever class is controlling the vehicle.</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="co1">// Could be human input or any kind of AI controller.</span>
&nbsp; &nbsp; <span class="co1">// Calculate g.</span>
&nbsp; &nbsp; <span class="kw4">double</span> d <span class="sy0">=</span> <span class="kw1">this</span>.<span class="me1">size</span> <span class="sy0">/</span> <span class="nu0">2</span><span class="sy0">;</span>
&nbsp; &nbsp; <span class="kw4">double</span> g <span class="sy0">=</span> <span class="br0">&#40;</span>tracks<span class="br0">&#91;</span><span class="nu0">0</span><span class="br0">&#93;</span> <span class="sy0">-</span> tracks<span class="br0">&#91;</span><span class="nu0">1</span><span class="br0">&#93;</span><span class="br0">&#41;</span> <span class="sy0">/</span> <span class="br0">&#40;</span> d <span class="sy0">*</span> <span class="nu0">4</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; <span class="co1">// Calculate t.</span>
&nbsp; &nbsp; <span class="kw4">double</span> t <span class="sy0">=</span> <span class="nu0">0</span><span class="sy0">;</span>
&nbsp; &nbsp; <span class="kw1">if</span><span class="br0">&#40;</span>tracks<span class="br0">&#91;</span><span class="nu0">0</span><span class="br0">&#93;</span>.<span class="me1">equals</span><span class="br0">&#40;</span>tracks<span class="br0">&#91;</span><span class="nu0">1</span><span class="br0">&#93;</span><span class="br0">&#41;</span><span class="br0">&#41;</span> <span class="co1">// Use straight line calculation to avoid division by zero.</span>
&nbsp; &nbsp; <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; t <span class="sy0">=</span> tracks<span class="br0">&#91;</span><span class="nu0">0</span><span class="br0">&#93;</span><span class="sy0">;</span>
&nbsp; &nbsp; <span class="br0">&#125;</span> 
&nbsp; &nbsp; <span class="kw1">else</span>
&nbsp; &nbsp; <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; t <span class="sy0">=</span> <span class="br0">&#40;</span> d <span class="sy0">*</span> <span class="br0">&#40;</span> tracks<span class="br0">&#91;</span><span class="nu0">0</span><span class="br0">&#93;</span> <span class="sy0">+</span> tracks<span class="br0">&#91;</span><span class="nu0">1</span><span class="br0">&#93;</span> <span class="br0">&#41;</span> <span class="sy0">*</span> <span class="nu0">2</span> <span class="sy0">*</span> <span class="kw3">Math</span>.<span class="me1">sin</span><span class="br0">&#40;</span>g<span class="br0">&#41;</span> <span class="br0">&#41;</span> <span class="sy0">/</span> <span class="br0">&#40;</span> tracks<span class="br0">&#91;</span><span class="nu0">0</span><span class="br0">&#93;</span> <span class="sy0">-</span> tracks<span class="br0">&#91;</span><span class="nu0">1</span><span class="br0">&#93;</span> <span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp;
&nbsp; &nbsp; <span class="co1">// Update x.</span>
&nbsp; &nbsp; <span class="kw1">this</span>.<span class="me1">x</span> <span class="sy0">-=</span> t <span class="sy0">*</span> <span class="kw3">Math</span>.<span class="me1">sin</span><span class="br0">&#40;</span><span class="kw1">this</span>.<span class="me1">heading</span> <span class="sy0">+</span> g<span class="br0">&#41;</span><span class="sy0">;</span> <span class="co1">// See note below.</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 
&nbsp; &nbsp; <span class="co1">// Update y.</span>
&nbsp; &nbsp; <span class="kw1">this</span>.<span class="me1">y</span> <span class="sy0">+=</span> t <span class="sy0">*</span> <span class="kw3">Math</span>.<span class="me1">cos</span><span class="br0">&#40;</span><span class="kw1">this</span>.<span class="me1">heading</span> <span class="sy0">+</span> g<span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; <span class="co1">// Update the vehicle's heading.</span>
&nbsp; &nbsp; <span class="kw1">this</span>.<span class="me1">heading</span> <span class="sy0">+=</span> <span class="nu0">2</span> <span class="sy0">*</span> g<span class="sy0">;</span>
&nbsp; <span class="br0">&#125;</span>
<span class="br0">&#125;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">public class Vehicle
{
  private double x, y, heading;
  private int size, maxSpeed;
  /*
     Other methods for initialising and controlling the vehicle.
  */
  public void update()
  {
    double tracks[2] = controller.getTrackSpeeds(); // Get the track speeds from whatever class is controlling the vehicle.
                                                    // Could be human input or any kind of AI controller.
    // Calculate g.
    double d = this.size / 2;
    double g = (tracks[0] - tracks[1]) / ( d * 4);

    // Calculate t.
    double t = 0;
    if(tracks[0].equals(tracks[1])) // Use straight line calculation to avoid division by zero.
    {
      t = tracks[0];
    } 
    else
    {
      t = ( d * ( tracks[0] + tracks[1] ) * 2 * Math.sin(g) ) / ( tracks[0] - tracks[1] );
    }

    // Update x.
    this.x -= t * Math.sin(this.heading + g); // See note below.
                                              
    // Update y.
    this.y += t * Math.cos(this.heading + g);

    // Update the vehicle's heading.
    this.heading += 2 * g;
  }
}</pre></div></div>

<p>When updating the x coordinate we subtract because, when using a JPanel:</p>
<ul>
<li>0,0 is the top left corner.</li>
<li>A heading of 0 is down.</li>
</ul>
<p>Using a normal <a href="http://en.wikipedia.org/wiki/Sine_wave">sine wave</a> an increase in heading (<strong>h</strong>) would result in an increase in <strong>sine h</strong> and therefore, an increase in <strong>x</strong> which is the opposite of what is expected/required. </p>
<p>Inverting the wave ( multiply by -1 ) produces the correct behaviour.</p>
<h1>How Much Difference Does It Really Make?</h1>
<p>The accuracy of the basic method decreases as the section of the circle traversed in one increment moves further from a straight line. Therefore, it decreases as:</p>
<p><img align="right" src="/wp-content/uploads/users/robearl/Charts.png" alt="Comparison Charts" title="" />
<ul>
<li>Speed increases.</li>
<li>Turning circle decreases.</li>
</ul>
<p>To demonstrate just how much difference there can be I&#8217;ve used a fairly extreme case to produce the charts opposite:</p>
<p>T<span class="MT_smaller">1</span> = 10<br />
T<span class="MT_smaller">2</span> = -9<br />
d = 2</p>
<p>As we can see a vehicle turning in a tight circle at a fairly high speed has a much bigger turning circle using the approximate movement calculations than when using the improved calculations.</p>
<p>As the size of the vehicle is now taken into account we can make a vehicle less nimble with a larger turning circle simply by increasing it&#8217;s size. We can get a turning circle like the one below by increasing <strong>d</strong> to 60 without any need to introduce extra variables to clamp the rotation rate.</p>
<p><center><img src="/wp-content/uploads/users/robearl/Bigger.png" alt="Larger Vehicle" title="" /></center></p>
<p>The other difference which is fairly hard to quantify is that the vehicle movement was much smoother once the new calculations were implemented. This could be because the initial technique caused lots of over-rotating which required constant readjustment.</p>
]]></content:encoded>
			<wfw:commentRss>/index.php/webdev/uidevelopment/accurately-simulating-movement-of-a-trac/feed/</wfw:commentRss>
		<slash:comments>1</slash:comments>
		</item>
		<item>
		<title>Do we need to know basic math as programmers?</title>
		<link>/index.php/itprofessionals/ethicsit/do-we-need-to-know-basic-math-as-program/</link>
		<comments>/index.php/itprofessionals/ethicsit/do-we-need-to-know-basic-math-as-program/#comments</comments>
		<pubDate>Mon, 05 Oct 2009 12:11:53 +0000</pubDate>
		<dc:creator><![CDATA[SQLDenis]]></dc:creator>
				<category><![CDATA[Ethics and IT]]></category>
		<category><![CDATA[math]]></category>
		<category><![CDATA[rant]]></category>

		<guid isPermaLink="false">/index.php/2009/10/do-we-need-to-know-basic-math-as-program/</guid>
		<description><![CDATA[This is kind of a semi rant so if you don&#8217;t like to read those kind of things feel free to skip this post. How much math does a programmer need to know to do his job? These days with all the frameworks that exists you don&#8217;t need to know how to do a square [&#8230;]]]></description>
				<content:encoded><![CDATA[<p>This is kind of a semi rant so if you don&#8217;t like to read those kind of things feel free to skip this post.</p>
<p>How much math does a programmer need to know to do his job? These days with all the frameworks that exists you don&#8217;t need to know how to do a square root, a power function or a quick sort these will likely already be built in. What perplexes me is that someone would come out with a function to flip a sign. So if the number is 5 make it -5 and if it is -5 make it 5. Isn&#8217;t this simple math? Multiply by -1 and you are done!!</p>
<p>Take a look at this function that someone created on <a href="http://stackoverflow.com/questions/1059480/math-opposite-sign-function">StackOverflow</a></p>
<blockquote><p>Math opposite sign function?<br />
Does such function exist? I created my own but would like to use an official one:</p></blockquote>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="c"><thead><tr><td colspan="2"  class="head">C</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
</pre></td><td class="de1"><pre class="de1">private <span class="kw2">function</span> opposite<span class="br0">&#40;</span>number<span class="sy0">:</span>Number<span class="br0">&#41;</span><span class="sy0">:</span>Number
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">if</span> <span class="br0">&#40;</span>number <span class="sy0">&lt;</span> <span class="nu0">0</span><span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; number <span class="sy0">=</span> Math.<span class="kw3">abs</span><span class="br0">&#40;</span>number<span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">else</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; number <span class="sy0">=</span> <span class="sy0">-</span><span class="br0">&#40;</span>number<span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">return</span> number<span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">private function opposite(number:Number):Number
        {
                if (number &lt; 0)
                {
                        number = Math.abs(number);
                }
                else
                {
                        number = -(number);
                }
                return number;
        }</pre></div></div>

<p>If we visit the Java forums it doesn&#8217;t get any better, take a look at this thread: <a href="http://forums.sun.com/thread.jspa?threadID=5404590&amp;start=0">How do you Invert signed numbers?</a></p>
<blockquote><p>Hi there. </p>
<p>A simple question: How can I invert the sign of an integer? ie) convert -12 to +12? No doubt there is a really simple way to do this, but I&#8217;m stumped, I cannot find anything and I&#8217;ve been working on this program all day. </p>
<p>I&#8217;ll be very grateful to anyone who can let me know if Java provides a way to do this, or point me in the right direction if it takes some tweaking of binary numbers using the Math package or something. </p>
<p>Cheers!</p></blockquote>
<p>Here is one &#8216;solution&#8217;</p>
<pre>int x = numberToInvertSign;
boolean pos = x &gt; 0;
for(int i = 0; i &lt; 2*Math.abs(x); i++){
   if(pos){
      numberToInvertSign--;
   }
   else{
      numberToInvertSign++;
   }
}</pre>
<p>You have to love this &#8216;gem&#8217; (of course this is someone messing with the original poster)</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="java"><thead><tr><td colspan="2"  class="head">Java</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
</pre></td><td class="de1"><pre class="de1"><span class="kw1">switch</span> <span class="br0">&#40;</span>i<span class="br0">&#41;</span>
<span class="br0">&#123;</span>
&nbsp; <span class="kw1">case</span> <span class="nu0">1</span><span class="sy0">:</span> <span class="kw1">return</span> <span class="sy0">-</span><span class="nu0">1</span><span class="sy0">;</span>
&nbsp; <span class="kw1">case</span> <span class="nu0">2</span><span class="sy0">:</span> <span class="kw1">return</span> <span class="sy0">-</span><span class="nu0">2</span><span class="sy0">;</span>
&nbsp; <span class="kw1">case</span> <span class="nu0">3</span><span class="sy0">:</span> <span class="kw1">return</span> <span class="sy0">-</span><span class="nu0">3</span><span class="sy0">;</span>
&nbsp; <span class="co1">// ... etc, you get the proper pattern</span>
<span class="br0">&#125;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">switch (i)
{
  case 1: return -1;
  case 2: return -2;
  case 3: return -3;
  // ... etc, you get the proper pattern
}</pre></div></div>

<p>Looking at the php documentation for the <a href="http://us.php.net/manual/en/function.abs.php#58508">ABS function</a> we find a bunch of comments and replies to create a sign function</p>
<p></p>
<p>Isn&#8217;t this just basic math that was taught to us in grammar school? Of course it doesn&#8217;t stop here, how many people these day can convert numbers between hexadecimal (base-16), binary (base-2) and decimal (base-10) without using a tool?<br />
Of course the future is that people will rely more and more on frameworks and wizards, this could be bad if you need to fix something in your code. Take a look at jQuery, people just love this because JavaScript is hard and they don&#8217;t have to deal with it&#8230;the tool shields them from that. Another example is ORM&#8230;.people hate writing queries and just want to create some classes and then some tool will spit out all the CRUD code for them. Sometimes these tools produce some bad SQL and it takes a effort to figure out why your calls to the DB are suddenly slow</p>
<p>Enough ranting for the day&#8230;.<br />
What do you think is it inexcusable that a programmer does not know that you can flip a sign by doing the following</p>
<p>return -number  </p>
<p>or </p>
<p>return number * -1</p>
]]></content:encoded>
			<wfw:commentRss>/index.php/itprofessionals/ethicsit/do-we-need-to-know-basic-math-as-program/feed/</wfw:commentRss>
		<slash:comments>48</slash:comments>
		</item>
		<item>
		<title>Getting The Percentage Of NULLS And Values In A SQL Server Table</title>
		<link>/index.php/datamgmt/datadesign/title-1/</link>
		<comments>/index.php/datamgmt/datadesign/title-1/#respond</comments>
		<pubDate>Tue, 05 Aug 2008 12:09:49 +0000</pubDate>
		<dc:creator><![CDATA[SQLDenis]]></dc:creator>
				<category><![CDATA[Data Modelling and Design]]></category>
		<category><![CDATA[database]]></category>
		<category><![CDATA[math]]></category>
		<category><![CDATA[null]]></category>
		<category><![CDATA[sql]]></category>
		<category><![CDATA[sqlserver]]></category>

		<guid isPermaLink="false">/index.php/2008/08/title-1/</guid>
		<description><![CDATA[Sometimes you want to know what the percentage is of null values in a table for a Column Or you might want to know what the percentage of all values in a Column is grouped by value You can get these answers by running the code below First create this table T-SQL1 2 3 4 [&#8230;]]]></description>
				<content:encoded><![CDATA[<p>Sometimes you want to know what the percentage is of null values in a table for a Column<br />
Or you might want to know what the percentage of all values in a Column is grouped by value<br />
You can get these answers by running the code below</p>
<p>First create this table</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
</pre></td><td class="de1"><pre class="de1"><span class="kw1">CREATE</span> <span class="kw1">TABLE</span> #perc <span class="br0">&#40;</span> Column1 <span class="kw1">INT</span>,Column2 <span class="kw1">INT</span>,Column3 <span class="kw1">INT</span><span class="br0">&#41;</span>
<span class="kw1">INSERT</span> <span class="kw1">INTO</span> #perc
<span class="kw1">SELECT</span> <span class="sy0">NULL</span>,<span class="nu0">1</span>,<span class="nu0">1</span>
<span class="kw1">UNION</span> <span class="sy0">ALL</span>
<span class="kw1">SELECT</span> <span class="nu0">1</span>,<span class="nu0">1</span>,<span class="nu0">1</span>
<span class="kw1">UNION</span> <span class="sy0">ALL</span>
<span class="kw1">SELECT</span> <span class="sy0">NULL</span>,<span class="sy0">NULL</span>,<span class="nu0">1</span>
<span class="kw1">UNION</span> <span class="sy0">ALL</span>
<span class="kw1">SELECT</span> <span class="sy0">NULL</span>,<span class="nu0">1</span>,<span class="sy0">NULL</span>
<span class="kw1">UNION</span> <span class="sy0">ALL</span>
<span class="kw1">SELECT</span> <span class="sy0">NULL</span>,<span class="nu0">1</span>,<span class="nu0">1</span>
<span class="kw1">UNION</span> <span class="sy0">ALL</span>
<span class="kw1">SELECT</span> <span class="nu0">1</span>,<span class="nu0">1</span>,<span class="sy0">NULL</span>
<span class="kw1">UNION</span> <span class="sy0">ALL</span>
<span class="kw1">SELECT</span> <span class="sy0">NULL</span>,<span class="nu0">1</span>,<span class="nu0">1</span>
<span class="kw1">UNION</span> <span class="sy0">ALL</span>
<span class="kw1">SELECT</span> <span class="nu0">2</span>,<span class="nu0">1</span>,<span class="nu0">2</span>
<span class="kw1">UNION</span> <span class="sy0">ALL</span>
<span class="kw1">SELECT</span> <span class="nu0">3</span>,<span class="nu0">1</span>,<span class="nu0">1</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">CREATE TABLE #perc ( Column1 INT,Column2 INT,Column3 INT)
INSERT INTO #perc
SELECT NULL,1,1
UNION ALL
SELECT 1,1,1
UNION ALL
SELECT NULL,NULL,1
UNION ALL
SELECT NULL,1,NULL
UNION ALL
SELECT NULL,1,1
UNION ALL
SELECT 1,1,NULL
UNION ALL
SELECT NULL,1,1
UNION ALL
SELECT 2,1,2
UNION ALL
SELECT 3,1,1</pre></div></div>

<p>Get the percentage of nulls in all the Columns in my table</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
</pre></td><td class="de1"><pre class="de1"><span class="kw1">SELECT</span> <span class="nu0">100.0</span> <span class="sy0">*</span> <span class="kw2">SUM</span><span class="br0">&#40;</span><span class="kw1">CASE</span> <span class="kw1">WHEN</span> Column1 <span class="kw1">IS</span> <span class="sy0">NULL</span> <span class="kw1">THEN</span> <span class="nu0">1</span> <span class="kw1">ELSE</span> <span class="nu0">0</span> <span class="kw1">END</span><span class="br0">&#41;</span> <span class="sy0">/</span> <span class="kw2">COUNT</span><span class="br0">&#40;</span><span class="sy0">*</span><span class="br0">&#41;</span> <span class="kw1">AS</span> Column1Percent,
<span class="nu0">100.0</span> <span class="sy0">*</span> <span class="kw2">SUM</span><span class="br0">&#40;</span><span class="kw1">CASE</span> <span class="kw1">WHEN</span> Column2 <span class="kw1">IS</span> <span class="sy0">NULL</span> <span class="kw1">THEN</span> <span class="nu0">1</span> <span class="kw1">ELSE</span> <span class="nu0">0</span> <span class="kw1">END</span><span class="br0">&#41;</span> <span class="sy0">/</span> <span class="kw2">COUNT</span><span class="br0">&#40;</span><span class="sy0">*</span><span class="br0">&#41;</span> <span class="kw1">AS</span> Column2Percent,
<span class="nu0">100.0</span> <span class="sy0">*</span> <span class="kw2">SUM</span><span class="br0">&#40;</span><span class="kw1">CASE</span> <span class="kw1">WHEN</span> Column3 <span class="kw1">IS</span> <span class="sy0">NULL</span> <span class="kw1">THEN</span> <span class="nu0">1</span> <span class="kw1">ELSE</span> <span class="nu0">0</span> <span class="kw1">END</span><span class="br0">&#41;</span> <span class="sy0">/</span> <span class="kw2">COUNT</span><span class="br0">&#40;</span><span class="sy0">*</span><span class="br0">&#41;</span> <span class="kw1">AS</span> Column3Percent
<span class="kw1">FROM</span> #perc</pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">SELECT 100.0 * SUM(CASE WHEN Column1 IS NULL THEN 1 ELSE 0 END) / COUNT(*) AS Column1Percent,
100.0 * SUM(CASE WHEN Column2 IS NULL THEN 1 ELSE 0 END) / COUNT(*) AS Column2Percent,
100.0 * SUM(CASE WHEN Column3 IS NULL THEN 1 ELSE 0 END) / COUNT(*) AS Column3Percent
FROM #perc</pre></div></div>

<p>Output</p>
<pre>Column1Percent	Column2Percent	Column3Percent
55.555555555555	11.111111111111	22.222222222222</pre>
<p>Get the values and the percentage of all values for a Column</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
</pre></td><td class="de1"><pre class="de1"><span class="kw1">SELECT</span> Column3 <span class="kw1">AS</span> <span class="kw1">Value</span>,<span class="kw2">COUNT</span><span class="br0">&#40;</span><span class="sy0">*</span><span class="br0">&#41;</span> <span class="kw1">AS</span> ValueCount,
<span class="nu0">100.0</span> <span class="sy0">*</span> <span class="kw2">COUNT</span><span class="br0">&#40;</span><span class="kw1">coalesce</span><span class="br0">&#40;</span>Column3,<span class="nu0">0</span><span class="br0">&#41;</span><span class="br0">&#41;</span><span class="sy0">/</span><span class="br0">&#40;</span><span class="kw1">SELECT</span> <span class="kw2">COUNT</span><span class="br0">&#40;</span><span class="sy0">*</span><span class="br0">&#41;</span> <span class="kw1">FROM</span> #perc <span class="br0">&#41;</span> <span class="kw1">AS</span> Percentage
<span class="kw1">FROM</span> #perc
<span class="kw1">GROUP</span> <span class="kw1">BY</span> Column3
<span class="kw1">ORDER</span> <span class="kw1">BY</span> Percentage <span class="kw1">DESC</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">SELECT Column3 AS Value,COUNT(*) AS ValueCount,
100.0 * COUNT(coalesce(Column3,0))/(SELECT COUNT(*) FROM #perc ) AS Percentage
FROM #perc
GROUP BY Column3
ORDER BY Percentage DESC</pre></div></div>

<p>Output</p>
<pre>Value	ValueCount	Percentage
1	6	66.666666666666
NULL	2	22.222222222222
2	1	11.111111111111</pre>
]]></content:encoded>
			<wfw:commentRss>/index.php/datamgmt/datadesign/title-1/feed/</wfw:commentRss>
		<slash:comments>0</slash:comments>
		</item>
		<item>
		<title>Good SQL Articles To Read If You Can&#8217;t Afford Books</title>
		<link>/index.php/datamgmt/datadesign/good-sql-articles-to-read-if-you-can-t-a/</link>
		<comments>/index.php/datamgmt/datadesign/good-sql-articles-to-read-if-you-can-t-a/#comments</comments>
		<pubDate>Fri, 23 May 2008 13:11:30 +0000</pubDate>
		<dc:creator><![CDATA[SQLDenis]]></dc:creator>
				<category><![CDATA[Data Modelling and Design]]></category>
		<category><![CDATA[Microsoft SQL Server]]></category>
		<category><![CDATA[Microsoft SQL Server Admin]]></category>
		<category><![CDATA[database]]></category>
		<category><![CDATA[deadlocks]]></category>
		<category><![CDATA[functions]]></category>
		<category><![CDATA[howto]]></category>
		<category><![CDATA[math]]></category>
		<category><![CDATA[sql]]></category>
		<category><![CDATA[sqlserver]]></category>
		<category><![CDATA[tips]]></category>
		<category><![CDATA[toread]]></category>
		<category><![CDATA[tricks]]></category>

		<guid isPermaLink="false">/index.php/2008/05/good-sql-articles-to-read-if-you-can-t-a/</guid>
		<description><![CDATA[You have only $50 left and you can buy two DVDs or one SQL book, what do you do? I would buy the book but not every person has the same idea of a fun time. This is the reason why I present you with a bunch of links to articles which will give you [&#8230;]]]></description>
				<content:encoded><![CDATA[<p>You have only $50 left and you can buy two DVDs or one SQL book, what do you do? I would buy the book but not every person has the same idea of a fun time. This is the reason why I present you with a bunch of links to articles which will give you very good info. Some of this you won&#8217;t be able to find in a book anyway.</p>
<p><a href="http://www.sommarskog.se/dynamic_sql.html">The curse and blessings of dynamic SQL</a>. How you use dynamic SQL, when you should &#8211; and when you should not.</p>
<p><a href="http://www.sommarskog.se/arrays-in-sql.html">Arrays and Lists in SQL Server</a>. Several methods on how to pass an array of values from a client to SQL Server, and performance data about the methods. Two versions are available, one for SQL 2005 and one for SQL 2000 and earlier.</p>
<p><a href="http://www.sommarskog.se/error-handling-II.html">Implementing Error Handling with Stored Procedures</a> and <a href="http://www.sommarskog.se/error-handling-I.html">Error Handling in SQL Server – a Background</a>. Two articles on error handling in SQL Server.</p>
<p><a href="http://www.karaszi.com/SQLServer/info_datetime.asp">The ultimate guide to the datetime datatypes</a><br />
The purpose of this article is to explain how the datetime datatypes work in SQL Server, including common pitfalls and general recommendations.</p>
<p><a href="http://www.karaszi.com/SQLServer/info_sp_recompile_set.asp">Stored procedure recompiles and SET options</a><br />
Using stored procedures is generally considered a good thing. One advantage of stored procedures is that they are precompiled. This means that at execution time, SQL Server will fetch the precompiled procedure plan from cache memory (if exists) and execute it. This is generally faster than optimizing and compiling the code for each execution. However, under some circumstances, a procedure needs to be recompiled during execution.</p>
<p><a href="http://dotnetsamplechapters.blogspot.com/2007/09/do-you-know-how-between-works-with.html">Do You Know How Between Works With Dates?</a><br />
article explaining why it can be dangerous to use between with datetime data types</p>
<p><a href="http://dotnetsamplechapters.blogspot.com/2007/09/how-are-dates-stored-internally-in-sql.html">How Are Dates Stored Internally In SQL Server?</a><br />
Article explaining how datetimes are actually stored internally</p>
<p>Three part deadlock troubleshooting post, a must read if you want to understand how to resolve deadlocks.<br />
<a href="http://blogs.msdn.com/bartd/archive/2006/09/09/Deadlock-Troubleshooting_2C00_-Part-1.aspx">Deadlock Troubleshooting, Part 1</a><br />
<a href="http://blogs.msdn.com/bartd/archive/2006/09/13/Deadlock-Troubleshooting_2C00_-Part-2.aspx">Deadlock Troubleshooting, Part 2</a><br />
<a href="http://blogs.msdn.com/bartd/archive/2006/09/25/deadlock-troubleshooting-part-3.aspx">Deadlock Troubleshooting, Part 3</a></p>
<p><a href="http://dotnetsamplechapters.blogspot.com/2007/03/sql-server-2005-whitepapers-list.html">SQL Server 2005 Whitepapers List</a><br />
A list of 29 different SQL Server 2005 Whitepapers</p>
<p><a href="http://vyaskn.tripod.com/sql_server_check_identity_columns.htm">Keep a check on your IDENTITY columns in SQL Server</a>This article shows you how to keep an eye on your IDENTITY columns and find out before they run out of values, and fail with an arithmetic overflow error. </p>
<p><a href="http://www.projectdmx.com/tsql/strcleanup.aspx">Character replacements in T-SQL</a><br />
Quite often SQL programmers are left with the dirty job of working with badly formatted strings mostly generated from external sources. Typical examples are badly structured date values, social security numbers with misplaced hyphens, badly formatted phone numbers etc. When the data set if small, in many cases, one can easily fix by a one time cleanup code snippet, but for larger sets one will need more generalized routines.</p>
]]></content:encoded>
			<wfw:commentRss>/index.php/datamgmt/datadesign/good-sql-articles-to-read-if-you-can-t-a/feed/</wfw:commentRss>
		<slash:comments>19</slash:comments>
		</item>
	</channel>
</rss>
