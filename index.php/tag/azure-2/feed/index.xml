<?xml version="1.0" encoding="UTF-8"?><rss version="2.0"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:atom="http://www.w3.org/2005/Atom"
	xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
	xmlns:slash="http://purl.org/rss/1.0/modules/slash/"
	>

<channel>
	<title>azure &#8211; LessthanDot</title>
	<atom:link href="/index.php/tag/azure-2/feed/" rel="self" type="application/rss+xml" />
	<link>/</link>
	<description>A Technical Community for IT Professionals</description>
	<lastBuildDate>Sat, 09 Mar 2019 12:50:36 +0000</lastBuildDate>
	<language>en-US</language>
	<sy:updatePeriod>hourly</sy:updatePeriod>
	<sy:updateFrequency>1</sy:updateFrequency>
	<generator>https://wordpress.org/?v=4.6.1</generator>
	<item>
		<title>SQL is Hard (still): Reviving a stale application</title>
		<link>/index.php/datamgmt/dbprogramming/sql-is-hard-still-reviving-a-stale-application/</link>
		<comments>/index.php/datamgmt/dbprogramming/sql-is-hard-still-reviving-a-stale-application/#comments</comments>
		<pubDate>Tue, 06 Feb 2018 13:20:09 +0000</pubDate>
		<dc:creator><![CDATA[Eli Weinstock-Herman (tarwn)]]></dc:creator>
				<category><![CDATA[Database Programming]]></category>
		<category><![CDATA[azure]]></category>
		<category><![CDATA[sql]]></category>

		<guid isPermaLink="false">/?p=8853</guid>
		<description><![CDATA[Several years ago, I launched SQLisHard to help folks learn SQL. Some folks learn well from books or videos, but others learn best by getting in there and running queries. I monitored and tweaked things for about a year, trying to get the first set of exercises smoothed out. Then, like many folks, I was [&#8230;]]]></description>
				<content:encoded><![CDATA[<p>Several years ago, I <a href="/index.php/datamgmt/dbprogramming/sql-is-hard/" title="SQL is Hard launch post">launched SQLisHard</a> to help folks learn SQL. Some folks learn well from books or videos, but others learn best by getting in there and running queries. I monitored and tweaked things for about a year, trying to get the first set of exercises smoothed out. Then, like many folks, I was sidetracked by other projects and work responsibilities.</p>
<p><center></p>
<div class="wp-caption aligncenter" style="display: inline-block;">
<a href="http://www.sqlishard.com/" title="Visit SQL is Hard"><img src="http://www.sqlishard.com/Content/Screenshot.png" alt="SQL is Hard screenshot" /></a></p>
<div class="wp-caption-text">SQL is Hard website: Learning SQL through hands one exercises</div>
</div>
<p></center></p>
<p>For about $10/month, this little site has kept running and helping folks. I expected to see traffic die off, since I wasn&#8217;t adding more content. Instead, there&#8217;s been nearly 7000 folks that have stopped by and successfully completed one or more exercises despite a total lack of marketing.</p>
<p>The hosting is oversized for what it is, most of the technology is not what I would pick today for options, but it just keeps ticking. So I&#8217;m dusting off the build pipeline, rebuilding some data analytics so I can see what&#8217;s going on, and started fashioning a new set of exercises.</p>
<p>Here&#8217;s how I went about reviving the application.</p>
<h2>Delivering Change: The Build Pipeline</h2>
<p>One of the things that made it easy to tinker with SQLisHard is the build pipeline for delivering updates. Most of the scripts live in the repo, but I hadn&#8217;t bothered to document it. Luckily, I had an old backup of the original build server VM and was able to recreate the build process on a much newer one.</p>
<p>Why did I bother?</p>
<p>A build pipeline makes delivering changes consistent. This application has 2 separate databases, runs user-entered queries against a real database, and has to provide accurate feedback every time (or risk hurting someone&#8217;s progression). A pipeline provides both safety and speed. I was experimenting with several different things at the time, so I have rudimentary testing covering all types of situations. By the time the changes roll out to the website and apply changes to 2 separate SQL Server instances, that one button push has run:</p>
<ul>
<li>Clean nuget + npm installation to ensure consistency</li>
<li>MS Build to make sure they work</li>
<li>Some unit tests to make sure the code is happy</li>
<li>Applied SQL changes to two beta databases to verify updates work and complete quickly</li>
<li>Asset minification for faster site loading</li>
<li>Deployed the site to a beta web server</li>
<li>Run 13 quick UI tests via Chrome Headless to make sure everything plays together</li>
</ul>
<p>It was a little painful to bring back to life, but infinitely safer then applying changes manually. It&#8217;s past time for every company to run a pipeline, and I&#8217;m more than happy to dive into more details or other build services if folks are interested.</p>
<h2>Visibility into usage</h2>
<p>The 2013 version of SQL is Hard tracked statistics on how many folks were successful or unsuccessful at each step along the way.</p>
<blockquote class="twitter-tweet" data-lang="en"><p lang="en" dir="ltr">On the SQLisHard front, it looks like exercises 1.0, 1.2 and 4.0 need refinement, they have the highest error rates <a href="http://t.co/Hv5OfOL10L">pic.twitter.com/Hv5OfOL10L</a></p>
<p>&mdash; Eli Weinstock-Herman (@Tarwn) <a href="https://twitter.com/Tarwn/status/345526863428472835?ref_src=twsrc%5Etfw">June 14, 2013</a></p></blockquote>
<p><script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script></p>
<p>Visibility into the flow from step to step helped me make adjustments and help folks make it all the way through the exercises. This site used a bunch of experimental things, so the data originally lived in a beta Splunk Cloud offering that was discontinued years ago (and replaced by a cloud offering that did not have an API&#8230;). Unfortunately, this activity is not tracked well in the database either.</p>
<p>Azure Insights has come a long way, so I decided to switch to that and not get distracted by rewriting the database back-end. With a few lines of JavaScript, I now have live events flowing into pretty charts again:</p>
<div id="attachment_8855" style="width: 810px" class="wp-caption aligncenter"><img src="/wp-content/uploads/2017/12/SQLisHard_AzureInsights.png" alt="SQL is Hard: Azure Insights" width="800" height="341" class="size-full wp-image-8855" srcset="/wp-content/uploads/2017/12/SQLisHard_AzureInsights.png 800w, /wp-content/uploads/2017/12/SQLisHard_AzureInsights-300x128.png 300w, /wp-content/uploads/2017/12/SQLisHard_AzureInsights-768x327.png 768w" sizes="(max-width: 800px) 100vw, 800px" /><p class="wp-caption-text">SQL is Hard: Azure Insights</p></div>
<p>Every query someone tries in SQLisHard is executed against a sample database and returned to the front-end. Once the front-end receives the result, I send an event to Insights to report the Exercise Id and Status:</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="javascript"><thead><tr><td colspan="2"  class="head">Javascript</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
</pre></td><td class="de1"><pre class="de1">dataService.<span class="me1">exercises</span>.<span class="me1">executeQuery</span><span class="br0">&#40;</span>currentQuery.<span class="me1">toStatementDTO</span><span class="br0">&#40;</span>limitResults<span class="br0">&#41;</span><span class="sy0">,</span> <span class="kw1">function</span> <span class="br0">&#40;</span>data<span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; 
&nbsp; &nbsp; <span class="co1">// ... receive query results, extract completion status, and display ...</span>
&nbsp;
&nbsp; &nbsp; trackEvent<span class="br0">&#40;</span><span class="st0">'executeQuery'</span><span class="sy0">,</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; exerciseSet<span class="sy0">:</span> exercises<span class="br0">&#40;</span><span class="br0">&#41;</span>.<span class="me1">id</span><span class="sy0">,</span>
&nbsp; &nbsp; &nbsp; &nbsp; exercise<span class="sy0">:</span> exercises<span class="br0">&#40;</span><span class="br0">&#41;</span>.<span class="me1">currentExercise</span><span class="br0">&#40;</span><span class="br0">&#41;</span>.<span class="me1">id</span><span class="sy0">,</span>
&nbsp; &nbsp; &nbsp; &nbsp; completedSuccessfully<span class="sy0">:</span> exerciseCompleted
&nbsp; &nbsp; <span class="br0">&#125;</span><span class="br0">&#41;</span><span class="sy0">;</span>
<span class="br0">&#125;</span><span class="br0">&#41;</span><span class="sy0">;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">dataService.exercises.executeQuery(currentQuery.toStatementDTO(limitResults), function (data) {
    
    // ... receive query results, extract completion status, and display ...

    trackEvent('executeQuery', {
        exerciseSet: exercises().id,
        exercise: exercises().currentExercise().id,
        completedSuccessfully: exerciseCompleted
    });
});</pre></div></div>

<p>I query the data in Application Insights (https://azure.microsoft.com/en-us/services/application-insights/) to count the number of success/non-success calls have occurred for each exercise:</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="text"><thead><tr><td colspan="2"  class="head">Text</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
</pre></td><td class="de1"><pre class="de1">customEvents
| where timestamp &gt; now(-7d) 
| project exercise = tostring(customDimensions.exercise), success = tostring(customDimensions.completedSuccessfully)
| where notempty(exercise)
| summarize attempts=count() by exercise, success
| order by exercise asc, success desc
| render columnchart</pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">customEvents
| where timestamp &gt; now(-7d) 
| project exercise = tostring(customDimensions.exercise), success = tostring(customDimensions.completedSuccessfully)
| where notempty(exercise)
| summarize attempts=count() by exercise, success
| order by exercise asc, success desc
| render columnchart</pre></div></div>

<p>Where this pays off is when I start making new exercises public. Now I&#8217;ll have immediate visibility into how folks are progressing and I can try to improve the exercise descriptions to help as many folks get through as I can.</p>
<h2>New Exercises Coming Soon: Aggregation</h2>
<p>The first exercise set focused on some basic building block SELECT statements. We went through some beginning SELECT * statements, listed columns, and column aliases. We performed WHERE statements with equivalence, LIKE, and BETWEEN. Then we added in JOINs with ON statements.</p>
<p>One of the great things about a relational database is the ability to mine across those related datasets for new information. Aggregation plays a big part here, so I&#8217;ve started building an exercise set that looks like this:</p>
<ul>
<li>COUNT</li>
<li>SUM</li>
<li>GROUP BY one field</li>
<li>GROUP BY multiple fields</li>
<li>MIN/MAX</li>
<li>AVG/STDEV</li>
<li>HAVING</li>
<li>ORDER BY</li>
<li>Aggregation data from INNER JOIN</li>
<li>LEFT JOIN</li>
<li>Then possibly some tricks, like SUM(IF/ELSE/END) statements</li>
</ul>
<p>If this works out, I&#8217;ll have a test link posted on twitter (@sqlishard) and, after a trial period, will roll it out live.</p>
<p>I can&#8217;t promise this will usher in a great deal of additions, it&#8217;s hard to jump in this code base and not immediately start rewriting all the things plus I have a half-dozen other projects I&#8217;d like to be working on too. We&#8217;ll see what happens.</p>
]]></content:encoded>
			<wfw:commentRss>/index.php/datamgmt/dbprogramming/sql-is-hard-still-reviving-a-stale-application/feed/</wfw:commentRss>
		<slash:comments>2</slash:comments>
		</item>
		<item>
		<title>Deploying to ServiceFabric from TeamCity</title>
		<link>/index.php/enterprisedev/cloud/azure/deploying-to-servicefabric-from-teamcity/</link>
		<comments>/index.php/enterprisedev/cloud/azure/deploying-to-servicefabric-from-teamcity/#respond</comments>
		<pubDate>Mon, 07 Aug 2017 12:30:56 +0000</pubDate>
		<dc:creator><![CDATA[Eli Weinstock-Herman (tarwn)]]></dc:creator>
				<category><![CDATA[Azure]]></category>
		<category><![CDATA[azure]]></category>
		<category><![CDATA[powershell]]></category>
		<category><![CDATA[Service Fabric]]></category>
		<category><![CDATA[teamcity]]></category>

		<guid isPermaLink="false">/?p=8755</guid>
		<description><![CDATA[Recently I&#8217;ve been working on an application that runs partially in Azure ServiceFabric. I&#8217;ve created a local cluster to work against and now it&#8217;s time to configure my TeamCity deployment to deploy upgrades to my application automatically. Initial details: Deploying 2 projects: a .Net 4.6.2 ASP.Net Core app to web app .Net 4.6.2 ServiceFabric project [&#8230;]]]></description>
				<content:encoded><![CDATA[<p>Recently I&#8217;ve been working on an application that runs partially in Azure ServiceFabric. I&#8217;ve <a href="">created a local cluster</a> to work against and now it&#8217;s time to configure my TeamCity deployment to deploy upgrades to my application automatically.</p>
<p>Initial details:</p>
<ul>
<li>Deploying 2 projects:
<ul>
<li>a .Net 4.6.2 ASP.Net Core app to web app</li>
<li>.Net 4.6.2 ServiceFabric project to ServiceFabric cluster</li>
</ul>
</li>
<li>Server:
<ul>
<li>VM: 2-core, 2048 GB of RAM</li>
<li>Windows Server 2016 x64</li>
<li>TeamCity 2017.1</li>
<li>SQL Server 2016</li>
</ul>
</li>
</ul>
<p>In the previous post I walked through the setup of a Service Fabric cluster on a local Hyper-V server and 3 VMs, followed by publishing a Service Fabric service manually to the cluster. In this post, I&#8217;m evolving from the manual publish step to a TeamCity automated deployment.</p>
<p>Here are the system details:</p>
<ul>
<li><b>TeamCity</b>: VM w/ 2 cores assigned and 2048 MB of memory running Windows 2016 x64 with TeamCity 2017.1 and SQL Server 2016</li>
<li><b>ServiceFabricNodes:</b> 3 single core VMs w/ 2048 MB of memory running Windows 2016 x64</li>
</ul>
<p>Let&#8217;s go!</p>
<h2>Installing Dependencies</h2>
<p>This solution has two deliverables: a front-end API that is deployed to Azure Web Site (now App Service) and a back-end agent intended to run in Service Fabric. I&#8217;ve already setup a Continuous Integration step to build the projects, run the database migration, perform front-end gulp tasks, and verify a set of unit and integration tests, so I should have most of the dependencies I need.</p>
<p>I&#8217;ve installed VS 2017 Community, VS 2017 Build tools, <a href="https://docs.microsoft.com/en-us/azure/service-fabric/service-fabric-get-started">Service Fabric SDK 2.6.220</a>, Node.js 6.11.1 (LTS), NuGet 4.1, and <a href="https://github.com/jonnyzzz/TeamCity.Node">jonnyzzz&#8217;s Node plugin</a>. </p>
<div style="background-color: #eeeeee; margin: 1em; padding: 1em">
I installed VS 2017 because historically I&#8217;ve run into issues with Azure projects (and MVC before that, and parts of WebForms before that). I originally was opposed to have the IDE installed on the build server, but have since decided I don&#8217;t mind and look at it as building with the same toolset on the build server that I built and tested with locally.
</div>
<p>This is also the place I ran into the madness that is the current <a href="/index.php/itprofessionals/softwareandconfigmgmt/multiple-nuget-methods-for-vs2017-msbuild-15-in-teamcity/" title="Multiple NuGet Methods for VS2017 + MSBuild 15 in TeamCity">mess of NuGet and C# Projects</a>.</p>
<h2>Deploying the Service Fabric Project</h2>
<p>My build pipeline for this project will be a single CI stage that runs the tests for both projects, and package stage that packages releasable versions for both projects, then two independent deploy stages to deploy the website and service fabric packages to their appropriate places. </p>
<div id="attachment_8781" style="width: 557px" class="wp-caption aligncenter"><img src="/wp-content/uploads/2017/08/DeployserviceFabric.png" alt="Deployment Pipeline - API updates before ServiceFabric" width="547" height="129" class="size-full wp-image-8781" srcset="/wp-content/uploads/2017/08/DeployserviceFabric.png 547w, /wp-content/uploads/2017/08/DeployserviceFabric-300x71.png 300w" sizes="(max-width: 547px) 100vw, 547px" /><p class="wp-caption-text">Deployment Pipeline &#8211; API updates before ServiceFabric</p></div>
<p>This is my &#8220;good enough for now&#8221; setup. If I run into versioning issues, I can come back and add some backwards compatibility tests between the packages after CI and run the deployments serially instead of in parallel.</p>
<div id="attachment_8756" style="width: 310px" class="wp-caption aligncenter"><img src="/wp-content/uploads/2017/07/DeployScript-300x172.png" alt="Service Fabric Deploy Script" width="300" height="172" class="size-medium wp-image-8756" srcset="/wp-content/uploads/2017/07/DeployScript-300x172.png 300w, /wp-content/uploads/2017/07/DeployScript.png 520w" sizes="(max-width: 300px) 100vw, 300px" /><p class="wp-caption-text">Service Fabric Deploy Script</p></div>
<p>The Service Fabric package is created with a <code>Deploy-FabricApplication.ps1</code> script that we&#8217;ll use to deploy the package once it&#8217;s built.</p>
<p><b>Local Script Deploy to ServiceFabric</b></p>
<p>The first step is testing the script locally to make sure I know how to use it. </p>
<ol style="padding-left: 40px">
<li>Right click the Service Fabric project and select &#8220;Package&#8221;</li>
<li>Open a powershell console and direct it to the Scripts folder in the Service Fabric project</li>
<li>Run a sample deployment with any parameters you have in the file: <code>.\Deploy-FabricApplication.ps1 -ApplicationPackagePath '..\pkg\Debug\' -PublishProfileFile '..\PublishProfiles\Local.1Node.xml'  -ApplicationParameter @{PhantomAgent_InstanceCount='1'; CoordinatorURL='http://localhost:52860/' }</code></li>
</ol>
<p>I had to do this several times, so I also got to learn how to update versions:</p>
<ol style="padding-left: 40px">
<li>Add UpgradeDeployment to your PublishProfile:
<ul style="padding-left: 40px">
<li>Option 1: Right click in Visual Studio, select Publish, use the link near the bottom to edit your deployment options and then close the dialog, choose &#8220;yes&#8221; when it asks if you want to save the profile&#8221;</li>
<li>Option 2: Open the relevant PublishProfile XML file and add this to the bottom for the default Unmonitored Upgrade settings

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="xml"><thead><tr><td colspan="2"  class="head">XML</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
</pre></td><td class="de1"><pre class="de1"><span class="sc3"><span class="re1">&lt;UpgradeDeployment</span> <span class="re0">Mode</span>=<span class="st0">&quot;UnmonitoredAuto&quot;</span> <span class="re0">Enabled</span>=<span class="st0">&quot;true&quot;</span><span class="re2">&gt;</span></span>
&nbsp; &nbsp; <span class="sc3"><span class="re1">&lt;Parameters</span> <span class="re0">UpgradeReplicaSetCheckTimeoutSec</span>=<span class="st0">&quot;1&quot;</span> <span class="re0">Force</span>=<span class="st0">&quot;True&quot;</span> <span class="re2">/&gt;</span></span>
<span class="sc3"><span class="re1">&lt;/UpgradeDeployment<span class="re2">&gt;</span></span></span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">&lt;UpgradeDeployment Mode="UnmonitoredAuto" Enabled="true"&gt;
    &lt;Parameters UpgradeReplicaSetCheckTimeoutSec="1" Force="True" /&gt;
&lt;/UpgradeDeployment&gt;</pre></div></div>

</li>
</ul>
</li>
<li>Go to the pkg\Debug</li>
<li>Open [YourProject]Pkg\ServiceManifest.xml
<ol style="padding-left: 40px">
<li>Update the version in either <code>&lt;CodePackage Name="Code" Version="1.0.3"&gt;</code> or <code>&lt;ConfigPackage Name="Config" Version="1.0.4" /&gt;</code></li>
<li>Update the Package version in the <code>&lt;ServiceManifest … Version="1.0.2" …&gt;</code> root element</li>
<li>Save</li>
</ol>
</li>
<li>Open ApplicationManifest.xml
<ol style="padding-left: 40px">
<li>Find <code>&lt;ServiceManifestRef ..&gt;</code> and update ServiceManifestVersion to match the ServiceManifest version above</li>
<li>Update the ApplicationTypeVersion property in the <code>&lt;ApplicationManifest … &gt;</code> root element</li>
<li>Save</li>
</ol>
</li>
<li>Now try your deployment again!</li>
</ol>
<p>So now we have a working command locally, now we just have to get TeamCity to update versions appropriately and run this. </p>
<h3>Build the package</h3>
<p>Building the package is straightforward. We just need to build the package in release mode, then configure Archiving to capture the bin/Release folder and PublishProfiles folder.</p>
<p>The Build Step in my &#8220;Package Stage&#8221; configuration looks like this:</p>
<div id="attachment_8757" style="width: 1034px" class="wp-caption aligncenter"><img src="/wp-content/uploads/2017/07/BuildPackageStage-1024x730.png" alt="TeamCity Package Stage" width="1024" height="730" class="size-large wp-image-8757" srcset="/wp-content/uploads/2017/07/BuildPackageStage-1024x730.png 1024w, /wp-content/uploads/2017/07/BuildPackageStage-300x214.png 300w, /wp-content/uploads/2017/07/BuildPackageStage-768x548.png 768w, /wp-content/uploads/2017/07/BuildPackageStage.png 1491w" sizes="(max-width: 1024px) 100vw, 1024px" /><p class="wp-caption-text">TeamCity Package Stage</p></div>
<p>Once I have the package built, I am going to replace the versions with a value that ties to the TeamCity version number.</p>
<p>In the &#8220;General&#8221; tab in TeamCity, I use the build number token from my CI step as the version for this step:</p>
<div id="attachment_8758" style="width: 1034px" class="wp-caption aligncenter"><img src="/wp-content/uploads/2017/07/TeamCity_Package_BuildNumber-1024x51.png" alt="TeamCity Package Build Number" width="1024" height="51" class="size-large wp-image-8758" srcset="/wp-content/uploads/2017/07/TeamCity_Package_BuildNumber-1024x51.png 1024w, /wp-content/uploads/2017/07/TeamCity_Package_BuildNumber-300x15.png 300w, /wp-content/uploads/2017/07/TeamCity_Package_BuildNumber-768x38.png 768w" sizes="(max-width: 1024px) 100vw, 1024px" /><p class="wp-caption-text">TeamCity Package Build Number</p></div>
<p>My CI step has this for it&#8217;s build number:</p>
<div id="attachment_8759" style="width: 1034px" class="wp-caption aligncenter"><img src="/wp-content/uploads/2017/07/TeamCity_CI_BuildNumber-1024x73.png" alt="TeamCity CI Build Number" width="1024" height="73" class="size-large wp-image-8759" srcset="/wp-content/uploads/2017/07/TeamCity_CI_BuildNumber-1024x73.png 1024w, /wp-content/uploads/2017/07/TeamCity_CI_BuildNumber-300x21.png 300w, /wp-content/uploads/2017/07/TeamCity_CI_BuildNumber-768x54.png 768w, /wp-content/uploads/2017/07/TeamCity_CI_BuildNumber.png 1510w" sizes="(max-width: 1024px) 100vw, 1024px" /><p class="wp-caption-text">TeamCity CI Build Number</p></div>
<p>So now I will have a matching 1.X.0 value all the way from CI through to the ServiceFabric manager.</p>
<p>Then in a new build step, I replace the versions in my two manifest files with the build version token from TeamCity:</p>
<div id="attachment_8760" style="width: 1034px" class="wp-caption aligncenter"><img src="/wp-content/uploads/2017/07/TeamCity_Package_Versions-1024x201.png" alt="TeamCity Package Versions" width="1024" height="201" class="size-large wp-image-8760" srcset="/wp-content/uploads/2017/07/TeamCity_Package_Versions-1024x201.png 1024w, /wp-content/uploads/2017/07/TeamCity_Package_Versions-300x59.png 300w, /wp-content/uploads/2017/07/TeamCity_Package_Versions-768x151.png 768w" sizes="(max-width: 1024px) 100vw, 1024px" /><p class="wp-caption-text">TeamCity Package Versions</p></div>
<p>Finally, I add entries to the &#8220;Artifact Paths&#8221; back in the &#8220;General&#8221; tab to zip up the package for use by the next step:</p>
<div id="attachment_8761" style="width: 1034px" class="wp-caption aligncenter"><img src="/wp-content/uploads/2017/07/TeamCity_Package_Artifacts-1024x104.png" alt="TeamCity Package Artifacts" width="1024" height="104" class="size-large wp-image-8761" srcset="/wp-content/uploads/2017/07/TeamCity_Package_Artifacts-1024x104.png 1024w, /wp-content/uploads/2017/07/TeamCity_Package_Artifacts-300x30.png 300w, /wp-content/uploads/2017/07/TeamCity_Package_Artifacts-768x78.png 768w" sizes="(max-width: 1024px) 100vw, 1024px" /><p class="wp-caption-text">TeamCity Package Artifacts</p></div>
<p>The final steps look like this:</p>
<div id="attachment_8762" style="width: 1034px" class="wp-caption aligncenter"><img src="/wp-content/uploads/2017/07/TeamCity_Package_Steps-1024x234.png" alt="TeamCity Package Steps" width="1024" height="234" class="size-large wp-image-8762" srcset="/wp-content/uploads/2017/07/TeamCity_Package_Steps-1024x234.png 1024w, /wp-content/uploads/2017/07/TeamCity_Package_Steps-300x68.png 300w, /wp-content/uploads/2017/07/TeamCity_Package_Steps-768x175.png 768w, /wp-content/uploads/2017/07/TeamCity_Package_Steps.png 1517w" sizes="(max-width: 1024px) 100vw, 1024px" /><p class="wp-caption-text">TeamCity Package Steps</p></div>
<p>Running the build, I can verify everything is successful by opening up the archived package:</p>
<div id="attachment_8763" style="width: 1034px" class="wp-caption aligncenter"><img src="/wp-content/uploads/2017/07/TeamCity_Package_Success-1024x321.png" alt="TeamCity Package - Verifying Versions" width="1024" height="321" class="size-large wp-image-8763" srcset="/wp-content/uploads/2017/07/TeamCity_Package_Success-1024x321.png 1024w, /wp-content/uploads/2017/07/TeamCity_Package_Success-300x94.png 300w, /wp-content/uploads/2017/07/TeamCity_Package_Success-768x241.png 768w, /wp-content/uploads/2017/07/TeamCity_Package_Success.png 1392w" sizes="(max-width: 1024px) 100vw, 1024px" /><p class="wp-caption-text">TeamCity Package &#8211; Verifying Versions</p></div>
<h3>Deploy</h3>
<p>Now that I have a step building the files I need, I&#8217;ll add a new Build Configuration named &#8220;Deploy to Service Fabric&#8221;. I&#8217;ll set Snapshot and Artifact Dependencies to the prior Build Configuration and update the Build Number to use the value from that config (which is in turn using the one from CI).</p>
<div id="attachment_8764" style="width: 922px" class="wp-caption aligncenter"><img src="/wp-content/uploads/2017/07/TeamCity_Deploy_Dependencies.png" alt="TeamCity Deploy Dependencies" width="912" height="406" class="size-full wp-image-8764" srcset="/wp-content/uploads/2017/07/TeamCity_Deploy_Dependencies.png 912w, /wp-content/uploads/2017/07/TeamCity_Deploy_Dependencies-300x134.png 300w, /wp-content/uploads/2017/07/TeamCity_Deploy_Dependencies-768x342.png 768w" sizes="(max-width: 912px) 100vw, 912px" /><p class="wp-caption-text">TeamCity Deploy Dependencies</p></div>
<p>I have one build step, a powershell command that matches the manual one I was running earlier that is set to treat powershell errors as errors (instead of the default, warnings). I run this as a single PowerShell source script so I can use dot notation (ServiceFabric scripts make some assumptions about having the connection variable available):</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="text"><thead><tr><td colspan="2"  class="head">Text</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
</pre></td><td class="de1"><pre class="de1">Invoke-Expression &quot;. .\Deploy-FabricApplication.ps1 -ApplicationPackagePath ../../../Artifacts -PublishProfileFile ../PublishProfiles/LocalCluster.xml -ApplicationParameter @{PhantomAgent_InstanceCount='1'; CoordinatorURL='http://app.launchready.co/'}&quot;</pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">Invoke-Expression ". .\Deploy-FabricApplication.ps1 -ApplicationPackagePath ../../../Artifacts -PublishProfileFile ../PublishProfiles/LocalCluster.xml -ApplicationParameter @{PhantomAgent_InstanceCount='1'; CoordinatorURL='http://app.launchready.co/'}"</pre></div></div>

<p>My build step then runs this command like so:</p>
<div id="attachment_8765" style="width: 1034px" class="wp-caption aligncenter"><img src="/wp-content/uploads/2017/07/TeamCity_Deploy_Script-1024x272.png" alt="TeamCity Deploy Script" width="1024" height="272" class="size-large wp-image-8765" srcset="/wp-content/uploads/2017/07/TeamCity_Deploy_Script-1024x272.png 1024w, /wp-content/uploads/2017/07/TeamCity_Deploy_Script-300x80.png 300w, /wp-content/uploads/2017/07/TeamCity_Deploy_Script-768x204.png 768w, /wp-content/uploads/2017/07/TeamCity_Deploy_Script.png 1226w" sizes="(max-width: 1024px) 100vw, 1024px" /><p class="wp-caption-text">TeamCity Deploy Script</p></div>
<p>Note 1: Make sure your Server certificate is installed and permission granted to the user that TeamCity runs under.</p>
<p>Note 2: I also had to alter my LocalCluster.xml profile to <code>StoreLocation="LocalMachine"</code> instead of <code>StoreLocation="CurrentUser"</code>, since that I where I installed the certificate.</p>
<p>And there we have it:</p>
<div id="attachment_8766" style="width: 387px" class="wp-caption aligncenter"><img src="/wp-content/uploads/2017/07/TeamCity_Deploy_Success.png" alt="TeamCity Deploy Success for v1.43.0" width="377" height="104" class="size-full wp-image-8766" srcset="/wp-content/uploads/2017/07/TeamCity_Deploy_Success.png 377w, /wp-content/uploads/2017/07/TeamCity_Deploy_Success-300x83.png 300w" sizes="(max-width: 377px) 100vw, 377px" /><p class="wp-caption-text">TeamCity Deploy Success for v1.43.0</p></div>
<div id="attachment_8767" style="width: 817px" class="wp-caption aligncenter"><img src="/wp-content/uploads/2017/07/ServiceFabric_Deploy_Success.png" alt="ServiceFabric Success for v1.43.0" width="807" height="98" class="size-full wp-image-8767" srcset="/wp-content/uploads/2017/07/ServiceFabric_Deploy_Success.png 807w, /wp-content/uploads/2017/07/ServiceFabric_Deploy_Success-300x36.png 300w, /wp-content/uploads/2017/07/ServiceFabric_Deploy_Success-768x93.png 768w" sizes="(max-width: 807px) 100vw, 807px" /><p class="wp-caption-text">ServiceFabric Success for v1.43.0</p></div>
<p>We can see matching versions in both places (1.43.0), so we know the pipeline is functioning.</p>
]]></content:encoded>
			<wfw:commentRss>/index.php/enterprisedev/cloud/azure/deploying-to-servicefabric-from-teamcity/feed/</wfw:commentRss>
		<slash:comments>0</slash:comments>
		</item>
		<item>
		<title>Creating a local Service Fabric Cluster</title>
		<link>/index.php/enterprisedev/cloud/azure/creating-a-local-service-fabric-cluster/</link>
		<comments>/index.php/enterprisedev/cloud/azure/creating-a-local-service-fabric-cluster/#respond</comments>
		<pubDate>Wed, 26 Jul 2017 15:37:14 +0000</pubDate>
		<dc:creator><![CDATA[Eli Weinstock-Herman (tarwn)]]></dc:creator>
				<category><![CDATA[Azure]]></category>
		<category><![CDATA[azure]]></category>
		<category><![CDATA[powershell]]></category>
		<category><![CDATA[Service Fabric]]></category>

		<guid isPermaLink="false">/?p=8713</guid>
		<description><![CDATA[Working with Service Fabric and want a local cluster to test and develop against? Here&#8217;s the step-by-step path I took from a set of fresh Windows VMs to a running, secured Service Fabric cluster using self-signed X509 certificates. There are a number of Microsoft docs that cover this subject, this is a single beginning-to-end path [&#8230;]]]></description>
				<content:encoded><![CDATA[<p>Working with Service Fabric and want a local cluster to test and develop against? Here&#8217;s the step-by-step path I took from a set of fresh Windows VMs to a running, secured Service Fabric cluster using self-signed X509 certificates. There are a number of Microsoft docs that cover this subject, this is a single beginning-to-end path that also includes fixes for gaps or errors in those docs as I went.</p>
<p>Here are the technical details:</p>
<ul>
<li>3 Hyper-V VMs running Windows 2016 x64, single-core, 2046MB RAM</li>
<li>ServiceFabric 5.6.220.9494</li>
</ul>
<p>My VMs are: </p>
<ul>
<li>SFNode0 &#8211; 192.168.1.200</li>
<li>SFNode1 &#8211; 192.168.1.201</li>
<li>SFNode2 &#8211; 192.168.1.202</li>
</ul>
<p>Here we go!</p>
<h2>Step 1: Download the Service Fabric Standalone Package</h2>
<p>Starting on SFNode0, I <a href="https://docs.microsoft.com/en-us/azure/service-fabric/service-fabric-cluster-creation-for-windows-server#downloadpackage">download the package</a>. There is a brief struggle through the overly strict IE security settings (did you know docs.microsoft.com uses google-analytics?).</p>
<p>Unpack the downloaded archive and make a copy of the ClusterConfig.X509.MultiMachine.json so we can modify a copy without changing the original. I&#8217;ve named this &#8220;ClusterConfig.LaunchReady.LocalCluster.json&#8221; for my cluster.</p>
<h2>Step 2: Cluster Configuration File</h2>
<p>The configuration (or &#8220;manifest&#8221;) is explained in detail in <a href="https://docs.microsoft.com/en-us/azure/service-fabric/service-fabric-cluster-manifest">Microsoft Docs</a>. I&#8217;ll call out the specifics of what I&#8217;m changing as I go.</p>
<div id="attachment_8718" style="width: 1034px" class="wp-caption aligncenter"><img src="/wp-content/uploads/2017/07/SFNode0ConfigScreen.png" alt="Initial Cluster Configuration" width="1024" height="768" class="size-full wp-image-8718" srcset="/wp-content/uploads/2017/07/SFNode0ConfigScreen.png 1024w, /wp-content/uploads/2017/07/SFNode0ConfigScreen-300x225.png 300w, /wp-content/uploads/2017/07/SFNode0ConfigScreen-768x576.png 768w" sizes="(max-width: 1024px) 100vw, 1024px" /><p class="wp-caption-text">Initial Cluster Configuration</p></div>
<p>The first update is the name of the cluster:</p>
<pre>"name": "LaunchReady.LocalCluster",
"clusterConfigurationVersion": "1.0.0",
"apiVersion": "04-2017",</pre>
<p>The clusterConfigurationVersion and apiVersion can stay unchanged. Later when we make changes to the cluster, we&#8217;ll increment the clusterConfigurationVersion (and commit it to our git repository).</p>
<h3>Configuring Nodes</h3>
<p>The next section is the node definitions. I&#8217;ve updated these to reflect the names of my VMs, a common fault domain to indicate the shared server they are running on, and a common update domain (it woul dbe better to make these different, I wasn&#8217;t thinking when I first created this).</p>
<pre>{
	"nodeName": "SFNode0",
	"iPAddress": "SFNode0",
	"nodeTypeRef": "NodeType0",
	"faultDomain": "fd:/hyperv0",
	"upgradeDomain": "UD0"
},
{
	"nodeName": "SFNode1",
	"iPAddress": "SFNode1",
	"nodeTypeRef": "NodeType0",
	"faultDomain": "fd:/hyperv0",
	"upgradeDomain": "UD0"
},
{
	"nodeName": "SFNode2",
	"iPAddress": "SFNode2",
	"nodeTypeRef": "NodeType0",
	"faultDomain": "fd:/hyperv0",
	"upgradeDomain": "UD0"
}</pre>
<p>Here&#8217;s a break down of the properties:</p>
<ul>
<li>nodeName: is the name that we will see in logs and the management console.</li>
<li>iPAddress: is a discoverable name or IPAddress for the node</li>
<li>nodeTypeRef: NodeTypes are defined later in the configuration and represent port and reliability settings for the node <a href="https://docs.microsoft.com/en-us/azure/service-fabric/service-fabric-cluster-manifest#nodetypes">See MSDN</a></li>
<li>faultDomain: An indicator of (potentially) shared physical resources that the node relies on (if this goes down, all nodes with this indicator will as well)</li>
<li>upgradeDomain: Identifier to group (or not) which nodes will be upgraded simultaneously during an upgrade</li>
</ul>
<p>I am going to skip over the diagnosticsStore section for now, as the defaults will be good enough until I have the cluster running, which requires the configs above and the X509 configs coming up next.</p>
<h3>Configuring X509 certificates</h3>
<p>More background detail: <a href="https://docs.microsoft.com/en-us/azure/service-fabric/service-fabric-windows-cluster-x509-security">Secure a standalone cluster on Windows using X.509 certificates</a></p>
<p>I am going to secure this as if it is a production cluster, to ensure any work I do in my local lab won&#8217;t suddenly blow up when I switch to an Azure cluster, but I&#8217;ll use self-signed certificates since it is a local lab. I&#8217;ll use a single certificate for node-to-node and server-to-client (<code>ClusterCertificate</code>, <code>ServerCertificate</code>) because I don&#8217;t plan on performing certificate rollovers. I&#8217;ll have a second certificate for clients to authenticate with when connecting (<code>ClientCertificateThumbprints</code>).</p>
<div style="background-color: #FFCCCC; padding: 1em; margin: 1em;">
<b>Warning:</b> The <a href="https://docs.microsoft.com/en-us/azure/service-fabric/service-fabric-windows-cluster-x509-security#optional-create-a-self-signed-certificate">Self-Signed Certificate instructions</a> are generally ok, but make some assumptions about the Service Fabric SDK, copy and paste for Certificate Thumbprints, file permissions, etc. The instructions below borrow from this document, but correct some of those deficiencies and assumptions to work in the context of following the Service Fabric setup instructions.
</div>
<p>First, switch to a system that has the ServiceFabric SDK installed. It won&#8217;t be present on your nodes at this point. </p>
<p>Next copy the CertSetup.ps1 file to your desktop or another location that will allow you to edit the file (we don&#8217;t want to replace one the SDK relies on and Windows security will prevent you from saving over it in the current location).</p>
<p>Next, follow the instructions to generate a cluster/server certificate and a client certificate (I named mine &#8220;LaunchReadyLocalClusterCert&#8221; and &#8220;LaunchReadyLocalClientCert&#8221;). This requires editing the names in CertSetup.ps1 on line 22 (Cleanup-Cert function), line 96, and line 163.</p>
<p>Launch PowerShell as an Administrator, then run the altered script <code>.\CertSetup.ps1 -Install</code>. When it completes, edit the script to enter the second certificate subject name and run it a second time.</p>
<p>Opening &#8220;Manage computer certificates&#8221; from the Start menu, I can see my two certificates listed in Personal/Certificates:</p>
<div id="attachment_8719" style="width: 769px" class="wp-caption aligncenter"><img src="/wp-content/uploads/2017/07/Certificates.png" alt="Certificates Successfully Generated" width="759" height="155" class="size-full wp-image-8719" srcset="/wp-content/uploads/2017/07/Certificates.png 759w, /wp-content/uploads/2017/07/Certificates-300x61.png 300w" sizes="(max-width: 759px) 100vw, 759px" /><p class="wp-caption-text">Certificates Successfully Generated</p></div>
<p>To export these to pfx files, I copied the thumbprint from the details for each certificate and ran it like so:</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="powershell"><thead><tr><td colspan="2"  class="head">PowerShell</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
</pre></td><td class="de1"><pre class="de1"><span class="re0">$pswd</span> <span class="sy0">=</span> <span class="kw1">ConvertTo-SecureString</span> <span class="kw5">-String</span> <span class="st0">&quot;NotMyRealPassword!&quot;</span> <span class="kw5">-Force</span> –AsPlainText
&nbsp;
<span class="co1">#Client cert</span>
<span class="kw1">Get-ChildItem</span> <span class="kw5">-Path</span> <span class="st0">&quot;cert:\localMachine\my\ae 01 64 c8 27 56 71 59 e8 3b c9 37 c4 47 b8 75 7d 1c f3 7e&quot;</span> <span class="sy0">|</span> Export<span class="sy0">-</span>PfxCertificate <span class="kw5">-FilePath</span> C:\LaunchReadyLocalClientCert.pfx <span class="sy0">-</span>Password <span class="re0">$pswd</span>
<span class="co1">#Server cert</span>
<span class="kw1">Get-ChildItem</span> <span class="kw5">-Path</span> <span class="st0">&quot;cert:\localMachine\my\e7 98 12 6c 5c 04 46 55 ef ad f7 e3 99 88 0a 82 e7 87 c8 6f&quot;</span> <span class="sy0">|</span> Export<span class="sy0">-</span>PfxCertificate <span class="kw5">-FilePath</span> C:\LaunchReadyLocalClusterCert.pfx <span class="sy0">-</span>Password $pswd</pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">$pswd = ConvertTo-SecureString -String "NotMyRealPassword!" -Force –AsPlainText

#Client cert
Get-ChildItem -Path "cert:\localMachine\my\ae 01 64 c8 27 56 71 59 e8 3b c9 37 c4 47 b8 75 7d 1c f3 7e" | Export-PfxCertificate -FilePath C:\LaunchReadyLocalClientCert.pfx -Password $pswd
#Server cert
Get-ChildItem -Path "cert:\localMachine\my\e7 98 12 6c 5c 04 46 55 ef ad f7 e3 99 88 0a 82 e7 87 c8 6f" | Export-PfxCertificate -FilePath C:\LaunchReadyLocalClusterCert.pfx -Password $pswd</pre></div></div>

<div style="background-color: #FFFFCC; padding: 1em; margin: 1em;">
Potential Error: If you receive a null object error, you may have an invisible character at the beginning of the thumbprint. I put my cursor at the beginning of the thumbprint and pressed backspace once and was able to run the script no the next try.
</div>
<p>With the PFX files produced, now we have to get them onto the nodes. </p>
<p>The quickest solution, since I&#8217;m on the same network, is to open up a shared folder from my desktop temporarily and download to each of the 3 nodes. From the <a href="https://docs.microsoft.com/en-us/azure/service-fabric/service-fabric-windows-cluster-x509-security#install-the-certificates">Install the Certificates</a> instructions, I create a script to install the certs and copy their second script to set permissions and drop those in the fileshare also.</p>
<p><b>Install my certs:</b></p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="powershell"><thead><tr><td colspan="2"  class="head">PowerShell</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
</pre></td><td class="de1"><pre class="de1"><span class="re0">$pswd</span> <span class="sy0">=</span> <span class="kw1">ConvertTo-SecureString</span> <span class="kw5">-String</span> <span class="st0">&quot;NotMyRealPassword!&quot;</span> <span class="kw5">-Force</span> –AsPlainText
&nbsp;
<span class="co1">## Client Cert</span>
Import<span class="sy0">-</span>PfxCertificate <span class="sy0">-</span>Exportable <span class="sy0">-</span>CertStoreLocation Cert:\LocalMachine\My <span class="kw5">-FilePath</span> <span class="st0">&quot;C:\LaunchReadyLocalClientCert.pfx&quot;</span> <span class="sy0">-</span>Password <span class="br0">&#40;</span><span class="kw1">ConvertTo-SecureString</span> <span class="kw5">-String</span> <span class="re0">$pswd</span> <span class="kw5">-AsPlainText</span> <span class="kw5">-Force</span><span class="br0">&#41;</span>
<span class="co1">## Server Cert</span>
Import<span class="sy0">-</span>PfxCertificate <span class="sy0">-</span>Exportable <span class="sy0">-</span>CertStoreLocation Cert:\LocalMachine\My <span class="kw5">-FilePath</span> <span class="st0">&quot;C:\LaunchReadyLocalClusterCert.pfx&quot;</span> <span class="sy0">-</span>Password <span class="br0">&#40;</span><span class="kw1">ConvertTo-SecureString</span> <span class="kw5">-String</span> <span class="re0">$pswd</span> <span class="kw5">-AsPlainText</span> <span class="kw5">-Force</span><span class="br0">&#41;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">$pswd = ConvertTo-SecureString -String "NotMyRealPassword!" -Force –AsPlainText

## Client Cert
Import-PfxCertificate -Exportable -CertStoreLocation Cert:\LocalMachine\My -FilePath "C:\LaunchReadyLocalClientCert.pfx" -Password (ConvertTo-SecureString -String $pswd -AsPlainText -Force)
## Server Cert
Import-PfxCertificate -Exportable -CertStoreLocation Cert:\LocalMachine\My -FilePath "C:\LaunchReadyLocalClusterCert.pfx" -Password (ConvertTo-SecureString -String $pswd -AsPlainText -Force)</pre></div></div>

<p>On each node, I copy the 4 files, run the Install script, then run the Permissions script once for each Thumbprint:</p>
<div id="attachment_8720" style="width: 869px" class="wp-caption aligncenter"><img src="/wp-content/uploads/2017/07/InstallCertificates.png" alt="Install Certificates and Grant Access" width="859" height="586" class="size-full wp-image-8720" srcset="/wp-content/uploads/2017/07/InstallCertificates.png 859w, /wp-content/uploads/2017/07/InstallCertificates-300x205.png 300w, /wp-content/uploads/2017/07/InstallCertificates-768x524.png 768w" sizes="(max-width: 859px) 100vw, 859px" /><p class="wp-caption-text">Install Certificates and Grant Access</p></div>
<p>Finally, I return to SFNode0 and enter the thumbprints in the &#8220;Security&#8221; section of my cluster configuration, removing the ThumbprintSecondary properties, the ClientCertificateCommonNames property, and the ReverseProxyCertificate property that I don&#8217;t intend to use.</p>
<h2>Step 3: Test the Configuration</h3>
<p>Note: Make sure you look at the paths in the fabricSettings section and move these to a non-OS drive if available. These are not changeable once the cluster is created. I chose to keep the defaults for this local cluster.</p>
<p>Before testing, there are some notable prerequisites buried in the <a href="https://docs.microsoft.com/en-us/azure/service-fabric/service-fabric-cluster-standalone-deployment-preparation#step-7-environment-setup">Environment Setup</a>:</p>
<ul>
<li>#9: Add firewall entry to allow ports 135, 137, 138, 139, and 445</li>
</ul>
<p>To test the configuration, I opened a powershell console on SFNode0 and run <code>.\TestConfiguration.ps1 -ClusterConfigFilePath .\ClusterConfig.LaunchReady.LocalCluster.json</code></p>
<div style="background-color: #FFFFCC; padding: 1em; margin: 1em;">
Tip: open a powershell console to the current folder in Windows Explorer by typing &#8220;powershell&#8221; in the address bar!
</div>
<p>Here are the errors as I work through them:</p>
<h3>Name Resolution Failure</h3>
<p><b>Error:</b> &#8220;Machine &#8216;SFNode2&#8217; is not reachable on port 445. Check connectivity/open ports. Error: No such host is known&#8221;</p>
<p><b>Fix:</b> Name resolution failed to find the host on my local network, so I switched my <code>iPAddress</code> properties to actual IP Addresses.</p>
<h3>Missing Firewall Rule</h3>
<p><b>Error:</b> &#8220;Machine &#8216;SFNode2&#8217; is not reachable on port 445. Check connectivity/open ports. Error: A connection attempt failed because the conncted party did not properly respond…&#8221; (classic timeout error)</p>
<p><b>Fix:</b> Add the Firewall rule I mentioned above to allow traffic on 135, 137, 138, 139, and 445.</p>
<h3>SMB? Reboot all the things</h3>
<p><b>Error: </b> &#8220;Machine &#8216;SFNode2&#8217; is not reachable on port 445. Check connectivity/open ports. Error: The connection was actively refused&#8221;</p>
<p><b>Fix:</b><br />
1. Open the Network Adapter properties and make sure &#8220;File and Printer Sharing for Microsoft Networks&#8221; is enabled (or netstat -ao and make sure you&#8217;re listening on 445)<br />
2. Reboot <- It's like Windows NT all over again! (I don't know why this fixed it, but it did)

<img src="/wp-content/uploads/2017/07/SuccessfulConfigTest.png" alt="Successful Configuration Test" width="517" height="258" class="size-full wp-image-8721" srcset="/wp-content/uploads/2017/07/SuccessfulConfigTest.png 517w, /wp-content/uploads/2017/07/SuccessfulConfigTest-300x150.png 300w" sizes="(max-width: 517px) 100vw, 517px" /></p>
<p>Much Success!</p>
<h2>Step 4: Deploy the cluster</h3>
<p>Time to try deploying the cluster, using the provided <code>CreateServiceFabricCluster</code> script.</p>
<p>(cue ominous organ music)</p>
<p><code>.\CreateServiceFabricCluster.ps1 -ClusterConfigFilePath .\ClusterConfig.LaunchReady.LocalCluster.json -AcceptEULA</code></p>
<p>Here&#8217;s a summary of what the script is running (so you know it hasn&#8217;t gone off the rails):</p>
<ul>
<li>Check and create if necessary: Runtime directory</li>
<li>Check and create if necessary: Trace folder</li>
<li>Download Runtime package (small delay for download time)</li>
<li>Creating Service fabric Cluster…</li>
<li>Details per machine: Configuring, Configured, Started FabricInstallerSvc, …(HDD clicky clicky)…, Started FabricHostSvc, (short delay)</li>
<li>Your cluster is successful created! …</li>
</ul>
<p>This took a few minutes to run for me, but of course YMMV depending on internet speed, CPU resources, etc.</p>
<h2>Step 5: Connect to the cluster</h2>
<p>Connecting via web browser is easy, but the documentation assumes you are using an insecure setup. <code>http://localhost:19080/Explorer/index.html</code> will time out.</p>
<p>Use https instead and use something like Chrome instead of IE. Chrome will popup an option for you to select the Client Certificate we produced earlier, and then connect successfully:</p>
<div id="attachment_8722" style="width: 1034px" class="wp-caption aligncenter"><img src="/wp-content/uploads/2017/07/ServiceFabricDashboard-1024x593.png" alt="Service Fabric Dashboard" width="1024" height="593" class="size-large wp-image-8722" srcset="/wp-content/uploads/2017/07/ServiceFabricDashboard-1024x593.png 1024w, /wp-content/uploads/2017/07/ServiceFabricDashboard-300x174.png 300w, /wp-content/uploads/2017/07/ServiceFabricDashboard-768x444.png 768w, /wp-content/uploads/2017/07/ServiceFabricDashboard.png 1360w" sizes="(max-width: 1024px) 100vw, 1024px" /><p class="wp-caption-text">Service Fabric Dashboard</p></div>
<p>Because the certificate is self-generated, it will be treated as insecure by the browser and may require you to also go through a &#8220;no, really, I trust this certificate&#8221; routine.</p>
<h2>Step 6: Publish a ServiceFabric Project from VisualStudio</h2>
<p>Switching to Visual Studio, your ServiceFabric project should have a folder named &#8220;PublishProfiles&#8221;. Make a copy of the default &#8220;Cloud.xml&#8221; profile and rename it to &#8220;LocalCluster.xml&#8221;. </p>
<p>There is an example for connecting via X509 certificates in a comment in the xml file, so replace the current content with that example and edit appropriately. Use the Thumbprint from the Server certificate above (also can be found in the cluster manifest screen at https://(ip/ address):19080/Explorer/index.html#/tab/manifest).</p>
<p>My file now looks like this:</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="xml"><thead><tr><td colspan="2"  class="head">XML</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
</pre></td><td class="de1"><pre class="de1"><span class="sc3"><span class="re1">&lt;?xml</span> <span class="re0">version</span>=<span class="st0">&quot;1.0&quot;</span> <span class="re0">encoding</span>=<span class="st0">&quot;utf-8&quot;</span><span class="re2">?&gt;</span></span>
<span class="sc3"><span class="re1">&lt;PublishProfile</span> <span class="re0">xmlns</span>=<span class="st0">&quot;http://schemas.microsoft.com/2015/05/fabrictools&quot;</span><span class="re2">&gt;</span></span>
&nbsp; &nbsp; &nbsp; &nbsp;<span class="sc3"><span class="re1">&lt;ClusterConnectionParameters</span> <span class="re0">ConnectionEndpoint</span>=<span class="st0">&quot;192.168.173.200:19000&quot;</span></span>
<span class="sc3"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span class="re0">X509Credential</span>=<span class="st0">&quot;true&quot;</span></span>
<span class="sc3"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span class="re0">ServerCertThumbprint</span>=<span class="st0">&quot;E798126C5C044655EFADF7E399880A82E787C86F&quot;</span></span>
<span class="sc3"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span class="re0">FindType</span>=<span class="st0">&quot;FindByThumbprint&quot;</span></span>
<span class="sc3"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span class="re0">FindValue</span>=<span class="st0">&quot;E798126C5C044655EFADF7E399880A82E787C86F&quot;</span></span>
<span class="sc3"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span class="re0">StoreLocation</span>=<span class="st0">&quot;CurrentUser&quot;</span></span>
<span class="sc3"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span class="re0">StoreName</span>=<span class="st0">&quot;My&quot;</span> <span class="re2">/&gt;</span></span>
&nbsp;
&nbsp; <span class="sc3"><span class="re1">&lt;ApplicationParameterFile</span> <span class="re0">Path</span>=<span class="st0">&quot;..\ApplicationParameters\LocalCluster.xml&quot;</span> <span class="re2">/&gt;</span></span>
<span class="sc3"><span class="re1">&lt;/PublishProfile<span class="re2">&gt;</span></span></span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">&lt;?xml version="1.0" encoding="utf-8"?&gt;
&lt;PublishProfile xmlns="http://schemas.microsoft.com/2015/05/fabrictools"&gt;
       &lt;ClusterConnectionParameters ConnectionEndpoint="192.168.173.200:19000"
                                    X509Credential="true"
                                    ServerCertThumbprint="E798126C5C044655EFADF7E399880A82E787C86F"
                                    FindType="FindByThumbprint"
                                    FindValue="E798126C5C044655EFADF7E399880A82E787C86F"
                                    StoreLocation="CurrentUser"
                                    StoreName="My" /&gt;

  &lt;ApplicationParameterFile Path="..\ApplicationParameters\LocalCluster.xml" /&gt;
&lt;/PublishProfile&gt;</pre></div></div>

<p>Add the new profile file to the project in Visual Studio.</p>
<p>Right click the project and select &#8220;Publish&#8221;. In the Publish dialog, select your new Profile file from the first dropdown. The dialog will verify it can connect to the Cluster:</p>
<div id="attachment_8723" style="width: 648px" class="wp-caption aligncenter"><img src="/wp-content/uploads/2017/07/PublishPackage.png" alt="VS 2017 - Publish Package for Service Fabric" width="638" height="434" class="size-full wp-image-8723" srcset="/wp-content/uploads/2017/07/PublishPackage.png 638w, /wp-content/uploads/2017/07/PublishPackage-300x204.png 300w" sizes="(max-width: 638px) 100vw, 638px" /><p class="wp-caption-text">VS 2017 &#8211; Publish Package for Service Fabric</p></div>
<p>(Yes, I&#8217;m using a hotmail address, it amuses me <img src="https://s.w.org/images/core/emoji/2/72x72/1f642.png" alt="🙂" class="wp-smiley" style="height: 1em; max-height: 1em;" /> )</p>
<p>Click Publish and Visual Studio will build the project and publish it to the cluster. Visual Studio will provide feedback as it publishes the application and we can see the results in the dashboard:</p>
<div id="attachment_8724" style="width: 1034px" class="wp-caption aligncenter"><img src="/wp-content/uploads/2017/07/UnhealthyDeployedPackage-1024x879.png" alt="Unhealthy, But Deployed Dashboard View" width="1024" height="879" class="size-large wp-image-8724" srcset="/wp-content/uploads/2017/07/UnhealthyDeployedPackage-1024x879.png 1024w, /wp-content/uploads/2017/07/UnhealthyDeployedPackage-300x258.png 300w, /wp-content/uploads/2017/07/UnhealthyDeployedPackage-768x660.png 768w, /wp-content/uploads/2017/07/UnhealthyDeployedPackage.png 1345w" sizes="(max-width: 1024px) 100vw, 1024px" /><p class="wp-caption-text">Unhealthy, But Deployed Dashboard View</p></div>
<p>Successful deployment! Except my application is unhealthy in this case, which I will now go start to debug <img src="https://s.w.org/images/core/emoji/2/72x72/1f642.png" alt="🙂" class="wp-smiley" style="height: 1em; max-height: 1em;" /></p>
]]></content:encoded>
			<wfw:commentRss>/index.php/enterprisedev/cloud/azure/creating-a-local-service-fabric-cluster/feed/</wfw:commentRss>
		<slash:comments>0</slash:comments>
		</item>
		<item>
		<title>Real World Azure: Lease Container bug in Azure Storage API</title>
		<link>/index.php/enterprisedev/cloud/azure/real-world-azure-lease-container-bug-in-azure-storage-api/</link>
		<comments>/index.php/enterprisedev/cloud/azure/real-world-azure-lease-container-bug-in-azure-storage-api/#respond</comments>
		<pubDate>Mon, 16 Nov 2015 14:10:14 +0000</pubDate>
		<dc:creator><![CDATA[Eli Weinstock-Herman (tarwn)]]></dc:creator>
				<category><![CDATA[Azure]]></category>
		<category><![CDATA[azure]]></category>
		<category><![CDATA[real world azure]]></category>

		<guid isPermaLink="false">/?p=4250</guid>
		<description><![CDATA[Recently we&#8217;ve been working with the raw Azure Storage API to try and get to a more stable solution then the far more aggressively changing Azure Storage SDK. One of the goals is to be able to work equally well locally, against the emulator, and in production. We&#8217;re used to cases where the Emulator diverges [&#8230;]]]></description>
				<content:encoded><![CDATA[<p>Recently we&#8217;ve been working with the raw Azure Storage API to try and get to a more stable solution then the far more aggressively changing Azure Storage SDK. One of the goals is to be able to work equally well locally, against the emulator, and in production. We&#8217;re used to cases where the Emulator diverges from production or the documentation, but recently we found a case where the emulator and documentation match, but the production services appear to be wrong.</p>
<div style="background-color: #ffff99; padding: .5em; margin: 1em;">
<h2 style="margin: .5em 0px;">Real World Azure</h2>
<p>There are a lot of great resources out there on Azure, from demos to webcasts to white papers filled with architectural diagrams. This is to be expected. Microsoft products tend to focus on the 15 minute demo or polished architecture diagram in an enterprise whitepaper, a controlled exposure of only a subset of the functionality you will use in the real world.</p>
<p>I have used Azure daily for years on live business and personal projects, not demos. From supporting production systems running hundred of millions of storage transactions to figuring out why a change to the Azure Management API limits sends certain legacy code into a death spiral to working directly with the APIs in 3-4 different languages to months where we had 2-4 active support cases at any time. These are examples found in the real, production world.
</p></div>
<p>The prior &#8220;real world azure&#8221; post (September 2013) was a <a href="/index.php/desktopdev/mstech/real-world-azure-queue-popreceiptmismatch/">Azure API Queue bug</a> that is still present today.  </p>
<p>This newer bug is more minor, unless you are relying on the error codes to be correct, in which case it&#8217;s kind of painful. It&#8217;s also concerning because, while we don&#8217;t build Storage APIs and SDKs for a living, we caught this in our integration tests relatively quickly, but it appears to have been missed in Microsoft testing thus far.</p>
<h1>What is Azure Blob Storage?</h1>
<p>The shortest explanation I can provide for Azure Blob service is to think of it as an infinitely wide file system. Azure blobs reside in Containers (folders). We have the ability to Lease Containers or Blobs (think of leases as similar to file locks that have the option of automatically releasing at a future time). Once a Container or Blob is Leased, only operations that include the correct lease are allowed to operate on them (except some cases where having no lease is still allowed, like read/download).</p>
<h1>Leasing Non-Existent Containers</h2>
<p>The Azure REST API outlines all of the errors you can expect to get back, nicely broken down into a common set of errors and service-specific lists (<a href="https://msdn.microsoft.com/en-us/library/azure/dd179439.aspx" title="MSDN: Blob Service Errors">Blob Service Errors</a>).</p>
<p>The two error codes we are looking at are:</p>
<blockquote><p>
ContainerNotFound: Not Found (404) &#8211; The specified container does not exist.<br />
BlobNotFound: Not Found (404) &#8211; The specified blob does not exist.
</p></blockquote>
<p>A test for the <a href="https://msdn.microsoft.com/en-us/library/azure/jj159103.aspx" title="MSDN: LeaseContainer Operation">Lease Container Operation</a> can be implemented using the SDK like this:</p>
<p><a href="https://github.com/tarwn/AzureQueueIssues/blob/master/ContainerNotFoundReturnsWrongError.cs" title="ContainerNotFoundReturnsWrongError from tarwn/AzureQueueIssues on github">ContainerNotFoundReturnsWrongError.cs</a></p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="csharp"><thead><tr><td colspan="2"  class="head">C#</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
</pre></td><td class="de1"><pre class="de1"><span class="co1">/// &lt;summary&gt;</span>
<span class="co1">/// Emulator: Returns 404 Container Not Found (tested with 3.3 and other versions)</span>
<span class="co1">/// Azure API: Returns 404 Blob Not Found (tested with 3.3 and other versions)</span>
<span class="co1">/// &lt;/summary&gt;</span>
<span class="br0">&#91;</span>Test<span class="br0">&#93;</span>
<span class="kw1">public</span> <span class="kw4">void</span> AcquireLease_NonExistentContainer_ReturnsContainerNotFoundError<span class="br0">&#40;</span><span class="br0">&#41;</span>
<span class="br0">&#123;</span>
&nbsp; &nbsp; <span class="kw1">var</span> blobClient <span class="sy0">=</span> _account<span class="sy0">.</span><span class="me1">CreateCloudBlobClient</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; <span class="kw1">var</span> containerReference <span class="sy0">=</span> blobClient<span class="sy0">.</span><span class="me1">GetContainerReference</span><span class="br0">&#40;</span><span class="st0">&quot;nonexistent-container&quot;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; <span class="kw4">int</span> statusCode <span class="sy0">=</span> <span class="sy0">-</span><span class="nu0">1</span><span class="sy0">;</span>
&nbsp; &nbsp; <span class="kw4">string</span> status <span class="sy0">=</span> <span class="st0">&quot;not defined&quot;</span><span class="sy0">;</span>
&nbsp; &nbsp; <span class="kw1">try</span>
&nbsp; &nbsp; <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; containerReference<span class="sy0">.</span><span class="me1">AcquireLease</span><span class="br0">&#40;</span>TimeSpan<span class="sy0">.</span><span class="me1">FromSeconds</span><span class="br0">&#40;</span><span class="nu0">15</span><span class="br0">&#41;</span>, Guid<span class="sy0">.</span><span class="me1">NewGuid</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">.</span><span class="me1">ToString</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp; &nbsp; <span class="kw1">catch</span> <span class="br0">&#40;</span>StorageException exc<span class="br0">&#41;</span>
&nbsp; &nbsp; <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; statusCode <span class="sy0">=</span> exc<span class="sy0">.</span><span class="me1">RequestInformation</span><span class="sy0">.</span><span class="me1">HttpStatusCode</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; status <span class="sy0">=</span> exc<span class="sy0">.</span><span class="me1">RequestInformation</span><span class="sy0">.</span><span class="me1">HttpStatusMessage</span><span class="sy0">;</span>
&nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp;
&nbsp; &nbsp; Assert<span class="sy0">.</span><span class="me1">AreEqual</span><span class="br0">&#40;</span>ErrorCode_NotFound, statusCode<span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; Assert<span class="sy0">.</span><span class="me1">AreEqual</span><span class="br0">&#40;</span>ErrorStatus_ContainerNotFound, status<span class="br0">&#41;</span><span class="sy0">;</span>
<span class="br0">&#125;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">/// &lt;summary&gt;
/// Emulator: Returns 404 Container Not Found (tested with 3.3 and other versions)
/// Azure API: Returns 404 Blob Not Found (tested with 3.3 and other versions)
/// &lt;/summary&gt;
[Test]
public void AcquireLease_NonExistentContainer_ReturnsContainerNotFoundError()
{
    var blobClient = _account.CreateCloudBlobClient();
    var containerReference = blobClient.GetContainerReference("nonexistent-container");

    int statusCode = -1;
    string status = "not defined";
    try
    {
        containerReference.AcquireLease(TimeSpan.FromSeconds(15), Guid.NewGuid().ToString());
    }
    catch (StorageException exc)
    {
        statusCode = exc.RequestInformation.HttpStatusCode;
        status = exc.RequestInformation.HttpStatusMessage;
    }

    Assert.AreEqual(ErrorCode_NotFound, statusCode);
    Assert.AreEqual(ErrorStatus_ContainerNotFound, status);
}</pre></div></div>

<p><i>(There are also examples of raw HTTP implementations in that same test file to verify it is not an SDK error, which is also why we&#8217;ll look at the response at the network level using fiddler).</i></p>
<p>On the local emulator, this will return the following details (fiddler):</p>
<p><a href="/wp-content/uploads/2015/11/EmulatorFiddler.png"><img src="/wp-content/uploads/2015/11/EmulatorFiddler.png" alt="LeaseContainer - local Emulator response (Fiddler)" width="322" height="190" class="aligncenter size-full wp-image-4253" srcset="/wp-content/uploads/2015/11/EmulatorFiddler.png 322w, /wp-content/uploads/2015/11/EmulatorFiddler-300x177.png 300w" sizes="(max-width: 322px) 100vw, 322px" /></a></p>
<p>Against a production API, it returns the following details (fiddler):</p>
<p><a href="/wp-content/uploads/2015/11/LiveAzureFiddler.png"><img src="/wp-content/uploads/2015/11/LiveAzureFiddler.png" alt="LeaseContainer - Live Azure Response (Fiddler)" width="342" height="190" class="aligncenter size-full wp-image-4254" srcset="/wp-content/uploads/2015/11/LiveAzureFiddler.png 342w, /wp-content/uploads/2015/11/LiveAzureFiddler-300x166.png 300w" sizes="(max-width: 342px) 100vw, 342px" /></a></p>
<p>In this case, the emulator is correct, but the production Storage API returns the wrong error.</p>
<p>I tested this against multiple versions of the API, locally and in the cloud, and got the same results: the production Storage API returns the wrong error code for LeaseContainer operations.</p>
]]></content:encoded>
			<wfw:commentRss>/index.php/enterprisedev/cloud/azure/real-world-azure-lease-container-bug-in-azure-storage-api/feed/</wfw:commentRss>
		<slash:comments>0</slash:comments>
		</item>
		<item>
		<title>Speaking at ITPROceed 2015</title>
		<link>/index.php/webdev/business-intelligence/speaking-at-itproceed-2015/</link>
		<comments>/index.php/webdev/business-intelligence/speaking-at-itproceed-2015/#respond</comments>
		<pubDate>Wed, 27 May 2015 08:37:56 +0000</pubDate>
		<dc:creator><![CDATA[Koen Verbeeck]]></dc:creator>
				<category><![CDATA[Business Intelligence]]></category>
		<category><![CDATA[azure]]></category>
		<category><![CDATA[event]]></category>
		<category><![CDATA[itproceed]]></category>
		<category><![CDATA[microsoft]]></category>
		<category><![CDATA[power bi]]></category>
		<category><![CDATA[speaking]]></category>

		<guid isPermaLink="false">/?p=3383</guid>
		<description><![CDATA[This year I have the opportunity again to speak at ITPROceed, the biggest (Microsoft-related) conference in Belgium for the IT professional. The conference takes place the 11th of June at Utopolis Mechelen. My session is situated in the Data Platform &#38; Internet of Things track and is titled Demystifying Power BI. Basically it introduces the full Power [&#8230;]]]></description>
				<content:encoded><![CDATA[<p>This year I have the opportunity again to speak at <a href="http://azure.itproceed.be/">ITPROceed</a>, the biggest (Microsoft-related) conference in Belgium for the IT professional. The conference takes place the 11th of June at Utopolis Mechelen. My session is situated in the <em>Data Platform &amp; Internet of Things</em> track and is titled <em><span style="color: #000000">Demystifying Power</span></em><span style="color: #000000"> BI. Basically it introduces the full Power BI stack and highlights what you can use for which purpose in order to get rid of some of the confusion that lives in the market place. The abstract:</span></p>
<p>Is it an on-line cloud BI-platform? Or is it a collection of Excel add-ins? Is it a SharePoint feature? Or an off-line dashboard designer? It’s all that and even more.<br />
Power BI has many faces and this session aims to give a clear overview of what Power BI – Microsoft newest BI offering – is and what it isn’t.<br />
You will learn how you can use Power BI in your environment and how you can bring self-service BI to the next level.</p>
<p>You can check the full agenda <a href="http://azure.itproceed.be/agenda/">here</a>. There is still room available, so hurry up and register <a href="http://azure.itproceed.be/registration/">here</a>. Oh wait, I didn&#8217;t mention the best part yet: the event is totally free!</p>
<p>See you at ITPROceed!</p>
<p><a href="/wp-content/uploads/2015/05/itproceed.png"><img class="alignnone wp-image-3384" src="/wp-content/uploads/2015/05/itproceed.png" alt="itproceed" /></a></p>
]]></content:encoded>
			<wfw:commentRss>/index.php/webdev/business-intelligence/speaking-at-itproceed-2015/feed/</wfw:commentRss>
		<slash:comments>0</slash:comments>
		</item>
		<item>
		<title>Automated Deployment to Azure Hosted Services</title>
		<link>/index.php/enterprisedev/cloud/azure/automated-deployment-to-azure-hosted-services/</link>
		<comments>/index.php/enterprisedev/cloud/azure/automated-deployment-to-azure-hosted-services/#respond</comments>
		<pubDate>Tue, 27 May 2014 18:50:21 +0000</pubDate>
		<dc:creator><![CDATA[Eli Weinstock-Herman (tarwn)]]></dc:creator>
				<category><![CDATA[Azure]]></category>
		<category><![CDATA[automation]]></category>
		<category><![CDATA[azure]]></category>
		<category><![CDATA[deployment]]></category>
		<category><![CDATA[powershell]]></category>

		<guid isPermaLink="false">/?p=2644</guid>
		<description><![CDATA[Azure Hosted Services offers several really awesome features over using physical servers or standard VM infrastructure. Two of these are the staged deployment model and management SDK, which includes a powershell module. Using these two features, we are going to build a deployment script that deploys a new set of services (servers) in Azure, using [&#8230;]]]></description>
				<content:encoded><![CDATA[<p>Azure Hosted Services offers several really awesome features over using physical servers or standard VM infrastructure. Two of these are the staged deployment model and management SDK, which includes a powershell module. Using these two features, we are going to build a deployment script that deploys a new set of services (servers) in Azure, using a Virtual IP swap to replace the existing production instances only after the new deployment is fully running. </p>
<p>The goal of this post is to build a powershell script that will:</p>
<ul>
<li>Upload a compiled Package to Azure Storage</li>
<li>Create a new Staging deployment</li>
<li>Wait for all of the instances of the new deployment to be running</li>
<li>Promote the new deployment to Production</li>
<li>Stop the instances of the old production deployment and keep them handy in the Staging slot</li>
</ul>
<p>The sample project and script are available on github: <a href="https://github.com/tarwn/AzureHostedServiceDeploymentSample" title="tarwn/AzureHostedServiceDeploymentSample on github">tarwn/AzureHostedServiceDeploymentSample on github</a></p>
<p>This script is not intended to be production ready. I have spent no time at all refactoring into readily re-usable methods and do not use it in a production environment myself. It will show you how to use the individual methods and give you the pieces you need to build one that fits your processes.</p>
<h2>Initial Steps</h2>
<p>If you would like to build a sample project of your own and follow along, here&#8217;s the steps you will need to perform first:</p>
<ol style="margin-left:3em; line-height: 1.4em">
<li>Create an Azure project in Visual Studio &#8211; Create/attach one or more web or worker roles</li>
<li>Remove the Diagnostics entry in the web.config or add storage settings</li>
<li>In the Project References, select &#8220;Microsoft.Web.Infrastructure&#8221; and set &#8220;Copy Local&#8221; to &#8220;True&#8221;</li>
<li>Create a Hosted Service in the Azure Dashboard</li>
<li>Create a Storage Account in the Azure Dashboard (pick the same region as prior step)</li>
<li>Install the latest Azure SDK + Azure Powershell Module (available in Web Platform Installer)</li>
<li>Download your publish settings from https://windows.azure.com/download/publishprofile.aspx</li>
</ol>
<p>If you know your way around Azure, steps 4-7 are mostly reading <a href="http://xkcd.com/" title="If we are what we eat, what could be better for our brains than a steady diet of intelligent humor? And title tags, you have to love title tags.">xkcd</a> while the installers run.</p>
<h2>Create the Deployment Script</h2>
<p>Now that we have a project and all the prerequisites out of the way, let&#8217;s start building the script. As a reminder, these are the steps we intend to follow:</p>
<ul>
<li>Upload a compiled Package to Azure Storage</li>
<li>Create a new Staging deployment</li>
<li>Wait for all of the instances of the new deployment to be running</li>
<li>Promote the new deployment to Production</li>
<li>Suspend the instances of the old production deployment and keep them handy in the Staging slot</li>
</ul>
<p>Let&#8217;s go!</p>
<h3>Connect to Azure</h3>
<p>The first thing we need to do is import the Powershell module and use the publish settings to set our subscription.</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="powershell"><thead><tr><td colspan="2"  class="head">PowerShell</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
</pre></td><td class="de1"><pre class="de1">Import<span class="sy0">-</span>Module <span class="st0">&quot;C:\Program Files (x86)\Microsoft SDKs\Windows Azure\PowerShell\ServiceManagement\Azure\Azure.psd1&quot;</span>
&nbsp;
Import<span class="sy0">-</span>AzurePublishSettingsFile <span class="re0">$publishSettingsPath</span>
&nbsp;
Set<span class="sy0">-</span>AzureSubscription <span class="re0">$subscriptionName</span> <span class="sy0">-</span>CurrentStorageAccount <span class="re0">$storageAccountName</span>
&nbsp;
Select<span class="sy0">-</span>AzureSubscription <span class="re0">$subscriptionName</span> <span class="sy0">-</span>Current</pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">Import-Module "C:\Program Files (x86)\Microsoft SDKs\Windows Azure\PowerShell\ServiceManagement\Azure\Azure.psd1"

Import-AzurePublishSettingsFile $publishSettingsPath
 
Set-AzureSubscription $subscriptionName -CurrentStorageAccount $storageAccountName

Select-AzureSubscription $subscriptionName -Current</pre></div></div>

<p><i>$publishSettingsPath, $subscriptionName, and $storageAccountName are parameters I have passed into my script</i></p>
<p>We load the Azure module from the Microsoft SDKs folder (this is where it installs from Web PI). We then use the *.publishsettings file to &#8220;log in&#8221; to the Azure subscription, set the storage account we will be using by default, and set this subscription as the default one for our current powershell session.</p>
<div style="background-color: #eeeeee; padding: .5em 1em; margin: .5em .5em 1.5em .5em;">
<a href="http://msdn.microsoft.com/en-us/library/dn722512.aspx" title="Import-AzurePublishSettingsFile on MSDN">Import-AzurePublishSettingsFile</a> basically logs into your Azure account using the supplied publishsettings file, storing a management certificate and a subscription data file. Once we&#8217;re &#8220;logged in&#8221;, we can use the rest of the Azure cmdlets to interact with our Azure resources.</p>
<p><a href="http://msdn.microsoft.com/en-us/library/dn722501.aspx" title="Set-AzureSubscription on MSDN">Set-AzureSubscription</a> sets the &#8220;current&#8221; storage account for the subscription, basically defining a default so we don&#8217;t have to specify it throughout the script. Another option would be to use <a href="http://msdn.microsoft.com/en-us/library/dn495246.aspx" title="New-AzureStorageContext on MSDN">New-AzureStorageContext</a> to create context for the Storage Account and pass this to the calls that interact with Storage.</p>
<p><a href="http://msdn.microsoft.com/en-us/library/dn722499.aspx" title="Select-AzureSubscription">Select-AzureSubscription</a> does exactly what you would expect, it updates the subscription data in our Powershell context. By specifying -Current, we only update the subscription for our current session.
</div>
<h3>Upload a compiled Package to Azure Storage</h3>
<p>Now that we have access to Azure, we can move on to upload the package. This package can be generated from Visual Studio by right clicking on the Cloud Project and choosing &#8220;Package&#8221;. In an automated process, we can use MSBuild to create this package before calling this script to upload and deploy it.</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="powershell"><thead><tr><td colspan="2"  class="head">PowerShell</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
</pre></td><td class="de1"><pre class="de1"><span class="re0">$container</span> <span class="sy0">=</span> Get<span class="sy0">-</span>AzureStorageContainer <span class="kw5">-Name</span> <span class="re0">$containerName</span> <span class="kw5">-ErrorAction</span> SilentlyContinue
&nbsp;
<span class="kw3">if</span><span class="br0">&#40;</span><span class="sy0">!</span><span class="re0">$container</span><span class="br0">&#41;</span><span class="br0">&#123;</span>
&nbsp; &nbsp; New<span class="sy0">-</span>AzureStorageContainer <span class="kw5">-Name</span> <span class="re0">$containerName</span>
<span class="br0">&#125;</span>
&nbsp;
Set<span class="sy0">-</span>AzureStorageBlobContent <span class="kw4">-File</span> <span class="re0">$packagePath</span> <span class="kw5">-Container</span> <span class="re0">$containerName</span> `
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="sy0">-</span>Blob <span class="re0">$fullTargetPackageName</span> <span class="kw5">-Force</span>
&nbsp;
<span class="re0">$blobInfo</span> <span class="sy0">=</span> Get<span class="sy0">-</span>AzureStorageBlob &nbsp;<span class="kw5">-Container</span> <span class="re0">$containerName</span> <span class="sy0">-</span>blob <span class="re0">$fullTargetPackageName</span>
&nbsp;
<span class="re0">$packageUri</span> <span class="sy0">=</span> <span class="re0">$blobInfo</span>.ICloudBlob.Uri</pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">$container = Get-AzureStorageContainer -Name $containerName -ErrorAction SilentlyContinue

if(!$container){
    New-AzureStorageContainer -Name $containerName
}

Set-AzureStorageBlobContent -File $packagePath -Container $containerName `
                            -Blob $fullTargetPackageName -Force

$blobInfo = Get-AzureStorageBlob  -Container $containerName -blob $fullTargetPackageName

$packageUri = $blobInfo.ICloudBlob.Uri</pre></div></div>

<p><i>$packagePath and $containerName are parameters passed to the script, $fullTargetPackageName is generated with a timestamp.</i></p>
<p>First we create the container if it doesn&#8217;t already exist, then we upload the package (without prompting), and once that is complete we capture the blob information and extract the URL for later use in the deployment.</p>
<div style="background-color: #eeeeee; padding: .5em 1em; margin: .5em .5em 1.5em .5em;">
<a href="http://msdn.microsoft.com/en-us/library/dn495272.aspx" title="Get-AzureStorageContainer on MSDN">Get-AzureStorageContainer</a> attempts to retrieve a container with the given name. In this case I&#8217;ve used the ErrorAction of SilentlyContinue so that if it doesn&#8217;t exist I can create it.</p>
<p><a href="http://msdn.microsoft.com/en-us/library/dn495291.aspx" title="New-AzureStorageContainer on MSDN">New-AzureStorageContainer</a> creates a container with the given name. Since I haven&#8217;t specified permissions, the container will be created with the most restrictive rights.</p>
<p><a href="http://msdn.microsoft.com/en-us/library/dn495279.aspx" title="Set-AzureStorageBlobContent on MSDN">Set-AzureStorageBlobContent</a> uploads the contents of a file specified by -File to the given -Container value with a final name specified by the -Blob property. The -Force overrides any questions the command might have, like &#8220;are you sure you want to do that&#8221;.</p>
<p><a href="http://msdn.microsoft.com/en-us/library/dn495260.aspx" title="Get-AzureStorageBlob on MSDN">Get-AzureStorageBlob</a> retrieves the information about a given Blob, allowing us to extract the Uri property for later use.
</div>
<h3>Create a new Staging Deployment</h3>
<p>Once we have the package uploaded to blob storage, we are ready to create the new Staging deployment.  </p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="powershell"><thead><tr><td colspan="2"  class="head">PowerShell</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
</pre></td><td class="de1"><pre class="de1"><span class="re0">$deployment</span> <span class="sy0">=</span> Get<span class="sy0">-</span>AzureDeployment <span class="sy0">-</span>ServiceName <span class="re0">$serviceName</span> <span class="sy0">-</span>Slot Staging `
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw5">-ErrorAction</span> SilentlyContinue 
&nbsp;
<span class="kw3">if</span><span class="br0">&#40;</span><span class="re0">$deployment</span>.name <span class="kw4">-ne</span> <span class="re0">$null</span><span class="br0">&#41;</span><span class="br0">&#123;</span>
&nbsp; &nbsp; Remove<span class="sy0">-</span>AzureDeployment <span class="sy0">-</span>ServiceName <span class="re0">$serviceName</span> <span class="sy0">-</span>Slot Staging <span class="kw5">-Force</span>
<span class="br0">&#125;</span>
&nbsp;
New<span class="sy0">-</span>AzureDeployment <span class="sy0">-</span>ServiceName <span class="re0">$serviceName</span> <span class="sy0">-</span>Slot Staging <span class="sy0">-</span>Package <span class="re0">$packageUri</span> `
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="sy0">-</span>Configuration <span class="re0">$configPath</span> <span class="kw5">-Name</span> <span class="re0">$fullTargetDeploymentName</span> `
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="sy0">-</span>TreatWarningsAsError</pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">$deployment = Get-AzureDeployment -ServiceName $serviceName -Slot Staging `
                                  -ErrorAction SilentlyContinue 

if($deployment.name -ne $null){
    Remove-AzureDeployment -ServiceName $serviceName -Slot Staging -Force
}

New-AzureDeployment -ServiceName $serviceName -Slot Staging -Package $packageUri `
                    -Configuration $configPath -Name $fullTargetDeploymentName `
                    -TreatWarningsAsError</pre></div></div>

<p><i>The $servicename, $fulltargetDeploymentName, and $configPath are assumed to have been provided, while the $packageUri was defined in the previous step</i></p>
<p>Before we can create the new deployment, we check to see if there is already a deployment present in the Staging slot and delete it. We then create the new deployment, using the package we just uploaded and a local configuration (*.cscfg) file.</p>
<div style="background-color: #eeeeee; padding: .5em 1em; margin: .5em .5em 1.5em .5em;">
<a href="http://msdn.microsoft.com/en-us/library/dn495146.aspx" title="Get-AzureDeployment on MSDN">Get-AzureDeployment</a> retrieves details on the current deployment in the specified slot. I&#8217;ve used ErrorAction SilentlyContinue here because I am only making this call to determine if something is already there and don&#8217;t want to exit out if the slot turns out to be empty.</p>
<p><a href="http://msdn.microsoft.com/en-us/library/dn495296.aspx" title="Remove-AzureDeployment on MSDN">Remove-AzureDeployment</a> removes the deployment we have detected in the Staging slot, using -Force to again suppress any interactive questions the command might have.</p>
<p><a href="http://msdn.microsoft.com/en-us/library/dn495143.aspx" title="New-AzureDeployment on MSDN">New-AzureDeployment</a> creates a new deployment in the specified slot, using the supplied package URI and the configuration file path. I opted to treat warnings as errors because I&#8217;d rather clean up warnings immediately. Unfortunately this parameter does not support URLs. By default the deployment will be started, though there is a -DoNotStart parameter if you do not want this behavior.
</div>
<h3>Wait for all of the instances&#8230;</h3>
<p>The new deployment has been created and told to start, but it takes time for the individual instances to be provisioned and to go through their start-up sequence. </p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="powershell"><thead><tr><td colspan="2"  class="head">PowerShell</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
</pre></td><td class="de1"><pre class="de1"><span class="re0">$statusReady</span> <span class="sy0">=</span> <span class="st0">&quot;ReadyRole&quot;</span>
<span class="re0">$statusStopped</span> <span class="sy0">=</span> <span class="st0">&quot;StoppedVM&quot;</span>
&nbsp;
<span class="kw3">function</span> Get<span class="sy0">-</span>AllInstancesAreStatus<span class="br0">&#40;</span><span class="re0">$instances</span><span class="sy0">,</span> <span class="re0">$targetStatus</span><span class="br0">&#41;</span><span class="br0">&#123;</span>
&nbsp; &nbsp; <span class="kw3">foreach</span> <span class="br0">&#40;</span><span class="re0">$instance</span> <span class="kw3">in</span> <span class="re0">$instances</span><span class="br0">&#41;</span>
&nbsp; &nbsp; <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw3">if</span> <span class="br0">&#40;</span><span class="re0">$instance</span>.InstanceStatus <span class="kw4">-ne</span> <span class="re0">$targetStatus</span><span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw3">return</span> <span class="re0">$false</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp; &nbsp; <span class="kw3">return</span> <span class="re0">$true</span>
<span class="br0">&#125;</span>
&nbsp;
<span class="co1"># ... ... ...</span>
&nbsp;
<span class="re0">$deployment</span> <span class="sy0">=</span> Get<span class="sy0">-</span>AzureDeployment <span class="sy0">-</span>ServiceName <span class="re0">$serviceName</span> <span class="sy0">-</span>Slot Staging
&nbsp;
<span class="re0">$waitTime</span> <span class="sy0">=</span> <span class="br0">&#91;</span>System.Diagnostics.Stopwatch<span class="br0">&#93;</span>::StartNew<span class="br0">&#40;</span><span class="br0">&#41;</span>
<span class="kw3">while</span> <span class="br0">&#40;</span><span class="br0">&#40;</span>Get<span class="sy0">-</span>AllInstancesAreStatus <span class="re0">$deployment</span>.RoleInstanceList <span class="re0">$statusReady</span><span class="br0">&#41;</span> <span class="kw4">-eq</span> <span class="re0">$false</span><span class="br0">&#41;</span>
<span class="br0">&#123;</span>
&nbsp; &nbsp; <span class="kw3">if</span><span class="br0">&#40;</span><span class="re0">$waitTime</span>.Elapsed.TotalSeconds <span class="kw4">-gt</span> <span class="re0">$instancePollLimit</span><span class="br0">&#41;</span><span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw3">Throw</span> <span class="st0">&quot;$instancePollLimit seconds elapsed without all the instances reaching 'ReadyRun'&quot;</span>
&nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp;
&nbsp; &nbsp; <span class="kw1">Start-Sleep</span> <span class="kw5">-Seconds</span> <span class="re0">$instancePollRate</span>
&nbsp;
&nbsp; &nbsp; <span class="re0">$deployment</span> <span class="sy0">=</span> Get<span class="sy0">-</span>AzureDeployment <span class="sy0">-</span>ServiceName <span class="re0">$serviceName</span> <span class="sy0">-</span>Slot Staging
<span class="br0">&#125;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">$statusReady = "ReadyRole"
$statusStopped = "StoppedVM"

function Get-AllInstancesAreStatus($instances, $targetStatus){
    foreach ($instance in $instances)
    {
        if ($instance.InstanceStatus -ne $targetStatus)
        {
            return $false
        }
    }
    return $true
}

# ... ... ...

$deployment = Get-AzureDeployment -ServiceName $serviceName -Slot Staging

$waitTime = [System.Diagnostics.Stopwatch]::StartNew()
while ((Get-AllInstancesAreStatus $deployment.RoleInstanceList $statusReady) -eq $false)
{
    if($waitTime.Elapsed.TotalSeconds -gt $instancePollLimit){
        Throw "$instancePollLimit seconds elapsed without all the instances reaching 'ReadyRun'"
    }

    Start-Sleep -Seconds $instancePollRate

    $deployment = Get-AzureDeployment -ServiceName $serviceName -Slot Staging
}</pre></div></div>

<p><i>$serviceName is supplied as a script parameter.</i></p>
<p>While there are any instances that are not in &#8216;ReadyRun&#8217; status, we sleep for $instancepollRate seconds and continue to check again. If more than $instancePollLimit seconds go by while waiting, we&#8217;ll throw an error that will cause our script to exit.</p>
<p><b>This poll limit is necessary.</b> In the real world of Azure, you can have azure instances that do not boot for long periods of time. Additional logic has been added in Azure that is supposed to detect VMs not booting and replace them, but no one writes perfect code and I have experienced deployments hung for hours or more due to non-booting instances. We also can break our own code, resulting in rapidly re-booting instances that we would not want to deploy to production.</p>
<div style="background-color: #eeeeee; padding: .5em 1em; margin: .5em .5em 1.5em .5em;">
<a href="http://msdn.microsoft.com/en-us/library/dn495146.aspx" title="Get-AzureDeployment on MSDN">Get-AzureDeployment</a> gets the azure deployment details, including the list of instances with their names, current statuses, size, etc.
</div>
<h3>Promote the new deployment to Production, Suspend the old one</h3>
<p>Once the staging deployment is up and running, we can promote it to the Production slot.</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="powershell"><thead><tr><td colspan="2"  class="head">PowerShell</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
</pre></td><td class="de1"><pre class="de1">Move<span class="sy0">-</span>AzureDeployment <span class="sy0">-</span>ServiceName <span class="re0">$serviceName</span>
&nbsp;
<span class="re0">$deployment</span> <span class="sy0">=</span> Get<span class="sy0">-</span>AzureDeployment <span class="sy0">-</span>ServiceName <span class="re0">$serviceName</span> <span class="sy0">-</span>Slot Staging `
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw5">-ErrorAction</span> SilentlyContinue
&nbsp;
<span class="kw3">if</span><span class="br0">&#40;</span><span class="re0">$deployment</span>.DeploymentName <span class="kw4">-ne</span> <span class="re0">$null</span><span class="br0">&#41;</span><span class="br0">&#123;</span>
&nbsp; &nbsp; Set<span class="sy0">-</span>AzureDeployment <span class="kw5">-Status</span> <span class="sy0">-</span>ServiceName <span class="re0">$serviceName</span> <span class="sy0">-</span>Slot Staging `
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="sy0">-</span>NewStatus Suspended
<span class="br0">&#125;</span>
&nbsp;
Remove<span class="sy0">-</span>AzureAccount <span class="kw5">-Name</span> <span class="re0">$subscriptionName</span> <span class="kw5">-Force</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">Move-AzureDeployment -ServiceName $serviceName

$deployment = Get-AzureDeployment -ServiceName $serviceName -Slot Staging `
                                  -ErrorAction SilentlyContinue

if($deployment.DeploymentName -ne $null){
    Set-AzureDeployment -Status -ServiceName $serviceName -Slot Staging `
                        -NewStatus Suspended
}

Remove-AzureAccount -Name $subscriptionName -Force</pre></div></div>

<p><i>$serviceName is a parameter passed to the script</i></p>
<p>Performing the VIP swap is a simple command and the Powershell cmdlet turns that asynchronous method into a synchronous call for us, like so many of the others. Once the swap is complete, if we have a deployment in the Staging slot (the old Production one), we go ahead and tell it to suspend, but don&#8217;t wait for the individual instances to stop before exiting.</p>
<div style="background-color: #eeeeee; padding: .5em 1em; margin: .5em .5em 1.5em .5em;">
<a href="http://msdn.microsoft.com/en-us/library/dn495282.aspx" title="Move-AzureDeployment">Move-AzureDeployment</a> performs a VIP swap to swap the Staging and Production deployments.</p>
<p><a href="http://msdn.microsoft.com/en-us/library/dn495146.aspx" title="Get-AzureDeployment on MSDN">Get-AzureDeployment</a> gets the azure deployment details, including the list of instances with their names, current statuses, size, etc.</p>
<p><a href="http://msdn.microsoft.com/en-us/library/dn495140.aspx" title="Set-AzureDeployment">Set-AzureDeployment</a> with the -Status parameter is used to change the status of a given deployment, in this case Suspending the deployment in the Staging slot.</p>
<p><a href="http://msdn.microsoft.com/en-us/library/dn722529.aspx" title="Remove-AzureAccount on MSDN">Remove-AzureAccount</a> is used to remove the Azure subscription data from the Powershell session, basically the &#8220;logout&#8221; equivalent to Import-AzurePublishSettingsFile&#8217;s &#8220;login&#8221;
</div>
<h2>And we&#8217;re deployed&#8230;</h2>
<p>There is a full script available in the github repository here: <a href="https://github.com/tarwn/AzureHostedServiceDeploymentSample/blob/master/scripts/deployHostedService.ps1" title="/scripts/deployHostedService.ps1">/scripts/deployHostedService.ps1</a>. It is not clean and pretty, but it does have more output and error handling than the snippets above. Among other things, it does not clean out all those packages it uploads to blob storage and it most definitely should not be blindly pasted and used for your production environment.</p>
<p>While this may not be a production-ready script, it&#8217;s not far off (and I&#8217;ve used worse). The few cmdlets above should start to show the pattern that Microsoft used with this Powershell library. There are plenty of additional cmdlets to interact with storage services, VMs, affinity groups, HDInsight, Media Services&#8230;you name it, it&#8217;s probably in there.  </p>
<p>Writing this post, I am reminded how magical this all is. That sample project was only configured to ask for a single server, but I could just as easily have asked for 4 16-core servers and then added in additional web or worker roles, each with their own servers. And I could have done all of that without changing anything at all about this script and I would have had tons of servers deployed, load balanced, and ready to go with just a minor blip as I swapped them into production. I can remember projects with multi-hour manual deployment processes (and month or more system provisioning times), and we just replaced them with a one page script.</p>
<p>The best part is that, unlike some Microsoft frameworks/packages, this magic doesn&#8217;t just make a great demo, it also works in real production environments. </p>
]]></content:encoded>
			<wfw:commentRss>/index.php/enterprisedev/cloud/azure/automated-deployment-to-azure-hosted-services/feed/</wfw:commentRss>
		<slash:comments>0</slash:comments>
		</item>
		<item>
		<title>Expanding an Existing Azure VM System Drive</title>
		<link>/index.php/enterprisedev/cloud/azure/expanding-an-existing-azure-vm-system-drive/</link>
		<comments>/index.php/enterprisedev/cloud/azure/expanding-an-existing-azure-vm-system-drive/#comments</comments>
		<pubDate>Fri, 18 Apr 2014 18:37:18 +0000</pubDate>
		<dc:creator><![CDATA[Eli Weinstock-Herman (tarwn)]]></dc:creator>
				<category><![CDATA[Azure]]></category>
		<category><![CDATA[azure]]></category>

		<guid isPermaLink="false">/?p=2464</guid>
		<description><![CDATA[I have an Azure VM that was created back when the C: drives had an 30GB size limitation (which leaves maybe 8GB after all the OS files, Windows updates, etc). This present a considerable challenge when I go to install something that has to be installed on the C: Drive, like Visual Studio 2013. Finding [&#8230;]]]></description>
				<content:encoded><![CDATA[<p>I have an Azure VM that was created back when the C: drives had an 30GB size limitation (which leaves maybe 8GB after all the OS files, Windows updates, etc). This present a considerable challenge when I go to install something that has to be installed on the C: Drive, like Visual Studio 2013.</p>
<p>Finding a path from a 30GB primary drive to (anything larger) was a little rough, most of the information I found said you had delete the VM, download the drive, attach it to another VM as a secondary drive, extend it, then re-upload it and do some extra magic to make it usable as a primary drive again and then re-create the VM. Doing all of this from another VM inside Azure looked like it would speed things up a bit, but it was still a pretty painful process.</p>
<p>While I was trying the longer process though, I found a series of smaller tools that people had used to make individual steps easier. I was able to piece all of those together into a process that allowed me to extend the primary drive in place in less time than it took to delete and download the drive to another VM.</p>
<h2>The Quicker Process</h2>
<p>So, with a big fat &#8220;this worked on my machine and might blow up yours&#8221; disclaimer, here&#8217;s that process:</p>
<ol>
<li>Stop the server</li>
<li>Delete the server (but keep the drives)
<ul>
<li>Azure Dashboard &#8211; Virtual Machines</li>
<li>Select the Server</li>
<li>Press Delete</li>
<li>Select Delete but keep the drives option</li>
</ul>
</li>
<li>Backup the drive
<ul>
<li>Get azure-cli</li>
<li>use the following command to copy the existing VHD into a new location super-fast:

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="dos"><thead><tr><td colspan="2"  class="head">DOS</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
</pre></td><td class="de1"><pre class="de1">azure vm disk upload <span class="sy0">&lt;</span>source-path<span class="sy0">&gt;</span> <span class="sy0">&lt;</span>target-blob-url<span class="sy0">&gt;</span> <span class="sy0">&lt;</span>target-storage-account-key<span class="sy0">&gt;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">azure vm disk upload &lt;source-path&gt; &lt;target-blob-url&gt; &lt;target-storage-account-key&gt;</pre></div></div>

<p>		<em>Reference: <a href="http://michaelwasham.com/2012/08/07/copying-vhds-and-other-blobs-between-storage-accounts/">http://michaelwasham.com/2012/08/07/copying-vhds-and-other-blobs-between-storage-accounts/</a></em>
		</li>
</ul>
</li>
<li>Delete the disk
<ul>
<li>Azure Dashboard &#8211; Virtual Machines</li>
<li>Select Disks at top</li>
<li>Select the drive + press Delete</li>
<li>Select the &#8220;Delete and retain associated VHD&#8221; option</li>
</ul>
</li>
<li>Resize the Disk
<ul>
<li>Download WindowsAzureDiskResizer:<br />
		<a href="http://blog.maartenballiauw.be/post/2013/01/07/Tales-from-the-trenches-resizing-a-Windows-Azure-virtual-disk-the-smooth-way.aspx">http://blog.maartenballiauw.be/post/2013/01/07/Tales-from-the-trenches-resizing-a-Windows-Azure-virtual-disk-the-smooth-way.aspx</a></li>
<li>Use the WindowsAzureDiskResizer with a command like:

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="dos"><thead><tr><td colspan="2"  class="head">DOS</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
</pre></td><td class="de1"><pre class="de1">E:\Downloads\WindowsAzureDiskResizer-1.0.0.0<span class="sy0">&gt;</span>WindowsAzureDiskResizer.exe 120 &quot;<span class="sy0">&lt;</span>URL <span class="kw1">for</span> blob here<span class="sy0">&gt;</span>&quot;</pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">E:\Downloads\WindowsAzureDiskResizer-1.0.0.0&gt;WindowsAzureDiskResizer.exe 120 "&lt;URL for blob here&gt;"</pre></div></div>

<p>		Output will look like:</p>
<pre>		WindowsAzureDiskResizer v1.0.0.0
		Copyright 2013 Maarten Balliauw
		[4:20 PM] Determining blob size...
		[4:20 PM] Reading VHD file format footer...
		[4:20 PM] VHD file format fixed, current size 32212254720 bytes.
		[4:20 PM] Expanding containing blob...
		[4:20 PM] Updating VHD file format footer...
		[4:20 PM] New VHD file size 128849018880 bytes, checksum 4294960647.
		[4:20 PM] Writing VHD file format footer...
		[4:20 PM] Overwriting the old VHD file footer with zeroes...
		[4:20 PM] Done!
		</pre>
</li>
</ul>
</li>
<li>Re-Create the Disk
<ul>
<li>Azure Dashboard &#8211; Virtual Machines &#8211; Disks</li>
<li>Select &#8220;Create&#8221; at the bottom</li>
<li>Name the drive</li>
<li>Select the VHD you just resized</li>
<li>Check the &#8220;this contains an OS&#8221; box and select &#8220;Windows&#8221;</li>
</ul>
</li>
<li>Re-create the VM
<ul>
<li>Azure Dashboard</li>
<li>New &#8211; Compute &#8211; Virtual Machine &#8211; From Gallery</li>
<li>Select &#8220;My Disks&#8221;</li>
<li>Select the new drive you just re-created</li>
<li>Finish the wizard to setup the VM like it originally was</li>
<li>Attach any other drives it originally had (reboot?)</li>
<li>Configure ACL rules in the Endpoints of the Virtual Machine</li>
<li>RDP Connect to the server</li>
<li>you may need to use IP address at this point, my DNS wasn&#8217;t updating and I had used same name as original server</li>
</ul>
</li>
<li>Resize the disk
<ul>
<li>Open Server Manager</li>
<li>Select Storage, then Disk Management</li>
<li>Select the drive you resized</li>
<li>Right click and select &#8220;Expand&#8221;</li>
<li>Wizard!</li>
</ul>
</li>
<li>Hurrah, the disk is embiggened!</li>
</ol>
<p>And there you go, all without multi-GB downloads, re-uploads, etc.</p>
]]></content:encoded>
			<wfw:commentRss>/index.php/enterprisedev/cloud/azure/expanding-an-existing-azure-vm-system-drive/feed/</wfw:commentRss>
		<slash:comments>1</slash:comments>
		</item>
		<item>
		<title>Combine Azure Storage Analytics Logs with Powershell</title>
		<link>/index.php/enterprisedev/cloud/azure/combine-azure-storage-analytics-logs-with-powershell/</link>
		<comments>/index.php/enterprisedev/cloud/azure/combine-azure-storage-analytics-logs-with-powershell/#respond</comments>
		<pubDate>Fri, 14 Mar 2014 15:17:33 +0000</pubDate>
		<dc:creator><![CDATA[Eli Weinstock-Herman (tarwn)]]></dc:creator>
				<category><![CDATA[Azure]]></category>
		<category><![CDATA[azure]]></category>
		<category><![CDATA[powershell]]></category>

		<guid isPermaLink="false">/?p=2515</guid>
		<description><![CDATA[When you have Storage Analytics transaction logging turned on, it produces transaction log files for each service call you make to blob, table, or queue service. Unfortunately it captures these in multiple files per hour, stored in a folder hierarchy by service (blob, queue, table), year, month, day, and hour. Trying to dig through these [&#8230;]]]></description>
				<content:encoded><![CDATA[<p>When you have Storage Analytics transaction logging turned on, it produces transaction log files for each service call you make to blob, table, or queue service. Unfortunately it captures these in multiple files per hour, stored in a folder hierarchy by service (blob, queue, table), year, month, day, and hour. Trying to dig through these files or combine them into a single excel file can be time consuming and, unfortunately, is one of the first things you will be asked if you submit a storage-related support ticket. </p>
<div id="attachment_2518" style="width: 710px" class="wp-caption aligncenter"><a href="/wp-content/uploads/2014/03/AzureManagementStudio_RawLogs.png"><img src="/wp-content/uploads/2014/03/AzureManagementStudio_RawLogs.png" alt="1 Hour of Raw Diagnostics Logs (in Azure Management Studio)" width="700" height="423" class="size-full wp-image-2518" srcset="/wp-content/uploads/2014/03/AzureManagementStudio_RawLogs.png 700w, /wp-content/uploads/2014/03/AzureManagementStudio_RawLogs-300x181.png 300w" sizes="(max-width: 700px) 100vw, 700px" /></a><p class="wp-caption-text">1 Hour of Raw Diagnostics Logs (in Azure Management Studio)</p></div>
<p>At some point, I created a powershell script to do the heavy lifting for me. The goal was to be able to start anywhere in the folder hierarchy and combine the files, converting them from semi-colon to comma-delimited as it went. This way I could download one or more folders from any level to a single folder, run the powershell script, and spend my time filtering and querying in the resulting CSV instead of digging through multiple files.</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="powershell"><thead><tr><td colspan="2"  class="head">PowerShell</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
</pre></td><td class="de1"><pre class="de1">&nbsp;<span class="kw3">param</span> <span class="br0">&#40;</span>
&nbsp; &nbsp; <span class="br0">&#91;</span><span class="re3">string</span><span class="br0">&#93;</span>
&nbsp; &nbsp; <span class="br0">&#91;</span>Alias<span class="br0">&#40;</span><span class="st0">&quot;i&quot;</span><span class="br0">&#41;</span><span class="br0">&#93;</span>
&nbsp; &nbsp; <span class="re0">$InputFolder</span> <span class="sy0">=</span> <span class="st0">&quot;.&quot;</span><span class="sy0">,</span>
&nbsp; &nbsp; <span class="br0">&#91;</span><span class="re3">string</span><span class="br0">&#93;</span>
&nbsp; &nbsp; <span class="br0">&#91;</span>Alias<span class="br0">&#40;</span><span class="st0">&quot;o&quot;</span><span class="br0">&#41;</span><span class="br0">&#93;</span>
&nbsp; &nbsp; <span class="re0">$OutputFile</span> <span class="sy0">=</span> <span class="st0">&quot;CombinedFile.csv&quot;</span>
&nbsp;<span class="br0">&#41;</span>
&nbsp;
<span class="re0">$Headers</span> <span class="sy0">=</span> <span class="st0">&quot;Log Version&quot;</span><span class="sy0">,</span><span class="st0">&quot; Transaction Start Time&quot;</span><span class="sy0">,</span><span class="st0">&quot; REST Operation Type&quot;</span><span class="sy0">,</span><span class="st0">&quot; Request Status&quot;</span><span class="sy0">,</span><span class="st0">&quot; HTTP Status Code&quot;</span><span class="sy0">,</span><span class="st0">&quot; E2E Latency&quot;</span><span class="sy0">,</span><span class="st0">&quot; Server Latency&quot;</span><span class="sy0">,</span><span class="st0">&quot; Authentication type&quot;</span><span class="sy0">,</span><span class="st0">&quot; Requestor Account Name&quot;</span><span class="sy0">,</span><span class="st0">&quot; Owner Account Name&quot;</span><span class="sy0">,</span><span class="st0">&quot; Service Type&quot;</span><span class="sy0">,</span><span class="st0">&quot; Request URL&quot;</span><span class="sy0">,</span><span class="st0">&quot; Object Key&quot;</span><span class="sy0">,</span><span class="st0">&quot; Request ID&quot;</span><span class="sy0">,</span><span class="st0">&quot; Operation Number&quot;</span><span class="sy0">,</span><span class="st0">&quot; Client IP&quot;</span><span class="sy0">,</span><span class="st0">&quot; Request Version&quot;</span><span class="sy0">,</span><span class="st0">&quot; Request Header Size&quot;</span><span class="sy0">,</span><span class="st0">&quot; Request Packet Size&quot;</span><span class="sy0">,</span><span class="st0">&quot; Response Header Size&quot;</span><span class="sy0">,</span><span class="st0">&quot; Response Packet Size&quot;</span><span class="sy0">,</span><span class="st0">&quot; Request Content Length&quot;</span><span class="sy0">,</span><span class="st0">&quot; Request MD5&quot;</span><span class="sy0">,</span><span class="st0">&quot; Server MD5&quot;</span><span class="sy0">,</span><span class="st0">&quot; ETag&quot;</span><span class="sy0">,</span><span class="st0">&quot; Last Modified Time&quot;</span><span class="sy0">,</span><span class="st0">&quot; ConditionsUsed&quot;</span><span class="sy0">,</span><span class="st0">&quot; User Agent&quot;</span><span class="sy0">,</span><span class="st0">&quot; Referrer&quot;</span><span class="sy0">,</span><span class="st0">&quot; Client Request ID&quot;</span>
&nbsp;
<span class="br0">&#40;</span><span class="re0">$Headers</span> <span class="sy0">-</span>Join <span class="st0">&quot;,&quot;</span><span class="br0">&#41;</span> <span class="sy0">|</span> <span class="kw1">Set-Content</span> <span class="re0">$OutputFile</span>
&nbsp;
<span class="kw2">dir</span> <span class="kw5">-recurse</span> <span class="re0">$InputFolder</span> <span class="kw5">-Include</span> <span class="st0">&quot;*.log&quot;</span> <span class="sy0">|</span> <span class="sy0">%</span><span class="br0">&#123;</span> <span class="kw1">Import-Csv</span> <span class="kw6">$_</span>.FullName <span class="kw5">-Delimiter</span> <span class="st0">&quot;;&quot;</span> <span class="sy0">-</span>Header <span class="re0">$Headers</span> <span class="sy0">|</span> ConvertTo<span class="sy0">-</span>Csv <span class="kw5">-Delimiter</span> <span class="st0">&quot;,&quot;</span> <span class="kw5">-NoTypeInformation</span> <span class="sy0">|</span> <span class="kw2">select</span> <span class="sy0">-</span>skip <span class="nu0">1</span> <span class="sy0">|</span> <span class="kw1">Add-Content</span> <span class="re0">$OutputFile</span> <span class="br0">&#125;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse"> param (
    [string]
    [Alias("i")]
    $InputFolder = ".",
    [string]
    [Alias("o")]
    $OutputFile = "CombinedFile.csv"
 )

$Headers = "Log Version"," Transaction Start Time"," REST Operation Type"," Request Status"," HTTP Status Code"," E2E Latency"," Server Latency"," Authentication type"," Requestor Account Name"," Owner Account Name"," Service Type"," Request URL"," Object Key"," Request ID"," Operation Number"," Client IP"," Request Version"," Request Header Size"," Request Packet Size"," Response Header Size"," Response Packet Size"," Request Content Length"," Request MD5"," Server MD5"," ETag"," Last Modified Time"," ConditionsUsed"," User Agent"," Referrer"," Client Request ID"

($Headers -Join ",") | Set-Content $OutputFile

dir -recurse $InputFolder -Include "*.log" | %{ Import-Csv $_.FullName -Delimiter ";" -Header $Headers | ConvertTo-Csv -Delimiter "," -NoTypeInformation | select -skip 1 | Add-Content $OutputFile }</pre></div></div>

<p>Running it from a powershell prompt is easy. I downloaded a different hour&#8217;s worth of blob transactions to a folder named &#8220;blob_2014_03_11&#8221; and then ran:</p>
<p><code>.\CombineLogFiles.ps1  "blob_2014_03_11\1200" combinedfiles.csv </code></p>
<p>Quickly combining a sample download of 7000 transactions from multiple files into a single 3.4MB CSV almost instantaneously. </p>
]]></content:encoded>
			<wfw:commentRss>/index.php/enterprisedev/cloud/azure/combine-azure-storage-analytics-logs-with-powershell/feed/</wfw:commentRss>
		<slash:comments>0</slash:comments>
		</item>
		<item>
		<title>Azure Web Sites Deployment and Unit Testing</title>
		<link>/index.php/enterprisedev/cloud/azure/azure-web-sites-deployment-and-unit-testing/</link>
		<comments>/index.php/enterprisedev/cloud/azure/azure-web-sites-deployment-and-unit-testing/#comments</comments>
		<pubDate>Mon, 10 Mar 2014 12:18:26 +0000</pubDate>
		<dc:creator><![CDATA[Eli Weinstock-Herman (tarwn)]]></dc:creator>
				<category><![CDATA[Azure]]></category>
		<category><![CDATA[azure]]></category>
		<category><![CDATA[cassinidev]]></category>
		<category><![CDATA[nunit]]></category>
		<category><![CDATA[selenium]]></category>

		<guid isPermaLink="false">/?p=2354</guid>
		<description><![CDATA[The automatic deployment option of Azure Web Sites is really cool and demos well. A few months ago I was curious how far I could push it, whether I could replace more complex projects that I currently deploy from my build server. I had read a couple posts on unit testing during deployment, but so [&#8230;]]]></description>
				<content:encoded><![CDATA[<p>The automatic deployment option of Azure Web Sites is really cool and demos well. A few months ago I was curious how far I could push it, whether I could replace more complex projects that I currently deploy from my build server. I had read a couple posts on unit testing during deployment, but so far had not seen anyone take it all the way to interface testing. With tools like CassiniDev, Phantom, and Selenium, this seemed like a real possibility.</p>
<p>So the goal was to create an Azure Website, get the automated deployment working automatically when I commit, run Nunit tests with the Nunit test runner (not the VS runner), and then wire in UI testing with a combination of CassiniDev for hosting the site, Phantom as the browser, and Selenium as the magic that drives the two. </p>
<p>This post covers the parts that worked, creating the Azure Web Site, settings up automated depoyment from the git repository, and customizing the deployment process to run the Nunit test runner, failing the build when a test fails.</p>
<h2>From the Beginning</h2>
<p>This project started from an empty folder, the goal being to see how far I could push it until I ran into problems.</p>
<p>The first step was to create a github repository for the project and build the basic MVC4 project. I built just a basic MVC4 project with some text on a single page, just enough to show if it was working or not.</p>
<p>The source code is on github: <a href="https://github.com/tarwn/CloudPixiesAndGhosts" title="tarwn/CloudPixiesAndGhosts on github">https://github.com/tarwn/CloudPixiesAndGhosts</a></p>
<h2>Azure Website</h2>
<p>Once I had a basic &#8220;hello World&#8221; page and a github repository, it was time to create the Azure Website that would be the deployment target.</p>
<div id="attachment_2373" style="width: 310px" class="wp-caption aligncenter"><a href="/wp-content/uploads/2014/02/01_CreateSiteStep1.png"><img src="/wp-content/uploads/2014/02/01_CreateSiteStep1-300x199.png" alt="Create Azure Web Site - Step 1" width="300" height="199" class="size-medium wp-image-2373" srcset="/wp-content/uploads/2014/02/01_CreateSiteStep1-300x199.png 300w, /wp-content/uploads/2014/02/01_CreateSiteStep1.png 700w" sizes="(max-width: 300px) 100vw, 300px" /></a><p class="wp-caption-text">Create Azure Web Site &#8211; Step 1</p></div>
<p>The wizard has a github option, but due to the way github permissions work, it ends up needing far more permissions than I want to provide. Instead I have chosen to use the generic &#8220;External Repository&#8221; option. </p>
<div id="attachment_2374" style="width: 310px" class="wp-caption aligncenter"><a href="/wp-content/uploads/2014/02/01_CreateSiteStep2.png"><img src="/wp-content/uploads/2014/02/01_CreateSiteStep2-300x198.png" alt="Create Azure Web Site - Step 2" width="300" height="198" class="size-medium wp-image-2374" srcset="/wp-content/uploads/2014/02/01_CreateSiteStep2-300x198.png 300w, /wp-content/uploads/2014/02/01_CreateSiteStep2.png 700w" sizes="(max-width: 300px) 100vw, 300px" /></a><p class="wp-caption-text">Create Azure Web Site &#8211; Step 2</p></div>
<p>The last step is to provide those repository details</p>
<div id="attachment_2375" style="width: 310px" class="wp-caption aligncenter"><a href="/wp-content/uploads/2014/02/01_CreateSiteStep3.png"><img src="/wp-content/uploads/2014/02/01_CreateSiteStep3-300x191.png" alt="Create Azure Web Site - Step 3" width="300" height="191" class="size-medium wp-image-2375" srcset="/wp-content/uploads/2014/02/01_CreateSiteStep3-300x191.png 300w, /wp-content/uploads/2014/02/01_CreateSiteStep3.png 700w" sizes="(max-width: 300px) 100vw, 300px" /></a><p class="wp-caption-text">Create Azure Web Site &#8211; Step 3</p></div>
<p>And the Azure Website is running:</p>
<div id="attachment_2376" style="width: 710px" class="wp-caption aligncenter"><a href="/wp-content/uploads/2014/02/01_CreateSiteStep4.png"><img src="/wp-content/uploads/2014/02/01_CreateSiteStep4.png" alt="Azure Web Site - Running" width="700" height="27" class="size-full wp-image-2376" srcset="/wp-content/uploads/2014/02/01_CreateSiteStep4.png 700w, /wp-content/uploads/2014/02/01_CreateSiteStep4-300x11.png 300w" sizes="(max-width: 700px) 100vw, 700px" /></a><p class="wp-caption-text">Azure Web Site &#8211; Running</p></div>
<p>And my basic little web page is picked up by Azure Websites and deployed to the site:<br />
<div id="attachment_2377" style="width: 310px" class="wp-caption aligncenter"><a href="/wp-content/uploads/2014/02/01_CreateSiteStep5.png"><img src="/wp-content/uploads/2014/02/01_CreateSiteStep5-300x144.png" alt="Initial Deployments" width="300" height="144" class="size-medium wp-image-2377" srcset="/wp-content/uploads/2014/02/01_CreateSiteStep5-300x144.png 300w, /wp-content/uploads/2014/02/01_CreateSiteStep5.png 700w" sizes="(max-width: 300px) 100vw, 300px" /></a><p class="wp-caption-text">Initial Deployments</p></div></p>
<p>Giving us the &#8220;cloud&#8221; portion of the project name:</p>
<div id="attachment_2378" style="width: 398px" class="wp-caption aligncenter"><a href="/wp-content/uploads/2014/02/01_CreateSiteStep6.png"><img src="/wp-content/uploads/2014/02/01_CreateSiteStep6.png" alt="It&#039;s in the cloud!" width="388" height="165" class="size-full wp-image-2378" srcset="/wp-content/uploads/2014/02/01_CreateSiteStep6.png 388w, /wp-content/uploads/2014/02/01_CreateSiteStep6-300x127.png 300w" sizes="(max-width: 388px) 100vw, 388px" /></a><p class="wp-caption-text">It&#8217;s in the cloud!</p></div>
<p>There is one last step, though. Because I used the generic &#8220;External Repository&#8221; option, my code is not being deployed immediately when I commit it.</p>
<p>Luckily Azure Websites exposes a deployment trigger URL that we can plug into github to notify when a new commit is received.</p>
<p>In the Azure Website settings, we copy that &#8220;Deployment Trigger URL&#8221;:</p>
<div id="attachment_2371" style="width: 310px" class="wp-caption aligncenter"><a href="/wp-content/uploads/2014/02/01_AutoDeploymentStep1.png"><img src="/wp-content/uploads/2014/02/01_AutoDeploymentStep1-300x72.png" alt="Configuring the Build triggering - Step 1" width="300" height="72" class="size-medium wp-image-2371" srcset="/wp-content/uploads/2014/02/01_AutoDeploymentStep1-300x72.png 300w, /wp-content/uploads/2014/02/01_AutoDeploymentStep1.png 700w" sizes="(max-width: 300px) 100vw, 300px" /></a><p class="wp-caption-text">Configuring the Build triggering &#8211; Step 1</p></div>
<p>And then in the github settings for our project, we paste it in as a WebHoook URL:<br />
<div id="attachment_2372" style="width: 310px" class="wp-caption aligncenter"><a href="/wp-content/uploads/2014/02/01_AutoDeploymentStep2.png"><img src="/wp-content/uploads/2014/02/01_AutoDeploymentStep2-300x91.png" alt="Configuring the Build triggering - Step 2" width="300" height="91" class="size-medium wp-image-2372" srcset="/wp-content/uploads/2014/02/01_AutoDeploymentStep2-300x91.png 300w, /wp-content/uploads/2014/02/01_AutoDeploymentStep2.png 700w" sizes="(max-width: 300px) 100vw, 300px" /></a><p class="wp-caption-text">Configuring the Build triggering &#8211; Step 2</p></div></p>
<p>And now each time I commit new code to master, it runs through the automated deployment process.</p>
<h2>Add Unit Tests</h2>
<p>So far, the example code just has a single page that doesn&#8217;t really do anything worth unit testing. This isn&#8217;t intended to be a real-world sample, but it does need some simple logic to test.</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="csharp"><thead><tr><td colspan="2"  class="head">C#</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
</pre></td><td class="de1"><pre class="de1"><span class="kw1">public</span> ActionResult Index<span class="br0">&#40;</span><span class="br0">&#41;</span>
<span class="br0">&#123;</span>
&nbsp; &nbsp; <span class="kw1">return</span> View<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
<span class="br0">&#125;</span>
&nbsp;
<span class="kw1">public</span> ActionResult Text<span class="br0">&#40;</span><span class="kw4">string</span> text<span class="br0">&#41;</span>
<span class="br0">&#123;</span>
&nbsp; &nbsp; <span class="kw1">var</span> model <span class="sy0">=</span> <span class="kw3">new</span> TextModel<span class="br0">&#40;</span>text<span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; <span class="kw1">return</span> View<span class="br0">&#40;</span>model<span class="br0">&#41;</span><span class="sy0">;</span>
<span class="br0">&#125;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">public ActionResult Index()
{
    return View();
}

public ActionResult Text(string text)
{
    var model = new TextModel(text);
    return View(model);
}</pre></div></div>

<p>Now I&#8217;ve added actions and views for a simple form that asks for a piece of text, submits it, and then shows a response based on whetehr the txt is populated or not.</p>
<p>So we have a form:<br />
<div id="attachment_2379" style="width: 310px" class="wp-caption aligncenter"><a href="/wp-content/uploads/2014/02/02_AddAForm.png"><img src="/wp-content/uploads/2014/02/02_AddAForm-300x197.png" alt="Sample Form Web Page" width="300" height="197" class="size-medium wp-image-2379" srcset="/wp-content/uploads/2014/02/02_AddAForm-300x197.png 300w, /wp-content/uploads/2014/02/02_AddAForm.png 365w" sizes="(max-width: 300px) 100vw, 300px" /></a><p class="wp-caption-text">Sample Form Web Page</p></div></p>
<p>And the page it submits to:<br />
<div id="attachment_2380" style="width: 185px" class="wp-caption aligncenter"><a href="/wp-content/uploads/2014/02/02_AddAFormSubmitted.png"><img src="/wp-content/uploads/2014/02/02_AddAFormSubmitted.png" alt="Submission Page" width="175" height="162" class="size-full wp-image-2380" /></a><p class="wp-caption-text">Submission Page</p></div></p>
<p>This will be easy to unit test but give us the tooling we would need to do anything more complex.</p>
<p>The unit test project is <a href="https://github.com/tarwn/CloudPixiesAndGhosts/tree/master/CloudSiteTests">/CloudSiteTests</a>. My first steps are to add a reference to the web project, add nunit via Nuget, and create some tests.</p>
<p>The 3 initials tests I create pass locally:<br />
<div id="attachment_2382" style="width: 623px" class="wp-caption aligncenter"><a href="/wp-content/uploads/2014/02/02_MoreUnitTests.png"><img src="/wp-content/uploads/2014/02/02_MoreUnitTests.png" alt="Passing Unit Tests (NCrunch console)" width="613" height="99" class="size-full wp-image-2382" srcset="/wp-content/uploads/2014/02/02_MoreUnitTests.png 613w, /wp-content/uploads/2014/02/02_MoreUnitTests-300x48.png 300w" sizes="(max-width: 613px) 100vw, 613px" /></a><p class="wp-caption-text">Passing Unit Tests (NCrunch console)</p></div></p>
<p>Now I add a fourth test to handle the case where I submit the form with an empty input.</p>
<div id="attachment_2381" style="width: 676px" class="wp-caption aligncenter"><a href="/wp-content/uploads/2014/02/02_FailingUnitTest.png"><img src="/wp-content/uploads/2014/02/02_FailingUnitTest.png" alt="And now a failing one (NCrunch Console)" width="666" height="130" class="size-full wp-image-2381" srcset="/wp-content/uploads/2014/02/02_FailingUnitTest.png 666w, /wp-content/uploads/2014/02/02_FailingUnitTest-300x58.png 300w" sizes="(max-width: 666px) 100vw, 666px" /></a><p class="wp-caption-text">And now a failing one (NCrunch Console)</p></div>
<p>With a failing test in the mix, now we can customize our deployment to run the unit tests and we will know for sure when they are being run correctly.</p>
<h2>Customize the Deployment</h2>
<p>The next step is to create a custom deployment so we can modify it to also run the unit tests. The <a href="http://www.windowsazure.com/en-us/documentation/articles/command-line-tools/">Azure Command Line Tools</a> includes a set of commands to generate a basic deployment. We can then take this basic process and tune it to our needs.</p>
<p><strong>1.</strong> Install node.js, as azure cli runs on node: http://nodejs.org/</p>
<p><strong>2.</strong> Next we need to install the azure cli package. In a command line, run the following:</p>
<p><code>npm install azure-cli -g</code></p>
<p>This uses the node.js package manager to install the azure-cli package and installs it for global (-g) use, rather than for an individual project.</p>
<p><strong>3.</strong> Open up the root solution folder and check out the options we can use with cli command:</p>
<p><code>run: azure site deploymentscript -h</code></p>
<p><strong>4.</strong> To generate a deployment script, i&#8217;ll specify the aspWAP option and point to the project:</p>
<p><code>azure site deploymentscript --aspWAP CloudSite/CloudSite.csproj -s CloudPixiesAndGhosts.sln</code></p>
<p>This generates a .deployment and a deploy.cmd file.</p>
<p><strong>5.</strong> Run the deploy.cmd file to test it out</p>
<p>I received an error on my first run because nuget wasn&#8217;t available. I enabled package restore on the solution and tried again and it worked. Later I found the same section (Deployment section, subsection 1) of this script was failing on Azure, so I ended up commenting it out entirely.</p>
<p>This may no longer be an issue, the Azure team has been updating things frequently and newer versions may be improved since.</p>
<p><strong>6.</strong> Edit the deploy.cmd file to run my nunit tests (after adding the nunit executable to my project):</p>
<p>I added the following section to the command file to run my tests:</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="dos"><thead><tr><td colspan="2"  class="head">DOS</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
</pre></td><td class="de1"><pre class="de1"><span class="co2">:: 2. Tests</span>
<span class="kw3">echo</span> 2: Build and execute tests
&nbsp;
<span class="kw3">echo</span> 2a: Executing Unit Tests: CloudSiteTests
<span class="sy0">%</span><span class="re3">MSBUILD_PATH</span><span class="sy0">%</span> &quot;<span class="sy0">%</span><span class="re3">DEPLOYMENT_SOURCE</span><span class="sy0">%</span>\CloudSiteTests\CloudSiteTests.csproj&quot; /nologo /verbosity:m /t:Build /p:Configuration=Debug
<span class="kw1">call</span> &quot;tools/nunit-console.exe&quot; &quot;<span class="sy0">%</span><span class="re3">DEPLOYMENT_SOURCE</span><span class="sy0">%</span>\CloudSiteTests\bin\Debug\CloudSiteTests.dll&quot;
&nbsp;
<span class="kw1">IF</span> <span class="sy0">!</span><span class="kw2">ERRORLEVEL</span><span class="sy0">!</span> <span class="kw2">NEQ</span> 0 <span class="kw1">goto</span> error</pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">:: 2. Tests
echo 2: Build and execute tests

echo 2a: Executing Unit Tests: CloudSiteTests
%MSBUILD_PATH% "%DEPLOYMENT_SOURCE%\CloudSiteTests\CloudSiteTests.csproj" /nologo /verbosity:m /t:Build /p:Configuration=Debug
call "tools/nunit-console.exe" "%DEPLOYMENT_SOURCE%\CloudSiteTests\bin\Debug\CloudSiteTests.dll"

IF !ERRORLEVEL! NEQ 0 goto error</pre></div></div>

<p>Now when I commit all of these changes and the deployment runs in Azure, I get the following result:</p>
<div id="attachment_2384" style="width: 710px" class="wp-caption aligncenter"><a href="/wp-content/uploads/2014/02/02_UnitTestFailingDeployment.png"><img src="/wp-content/uploads/2014/02/02_UnitTestFailingDeployment.png" alt="Unit Test Failing Deployment" width="700" height="195" class="size-full wp-image-2384" srcset="/wp-content/uploads/2014/02/02_UnitTestFailingDeployment.png 700w, /wp-content/uploads/2014/02/02_UnitTestFailingDeployment-300x83.png 300w" sizes="(max-width: 700px) 100vw, 700px" /></a><p class="wp-caption-text">Unit Test Failing Deployment</p></div>
<p>The log for the deployment captures the results, so I can see exactly which test failed (and also, oddly, that they appeared to run the tests twice):</p>
<div id="attachment_2385" style="width: 710px" class="wp-caption aligncenter"><a href="/wp-content/uploads/2014/02/02_UnitTestResultsInLog.png"><img src="/wp-content/uploads/2014/02/02_UnitTestResultsInLog.png" alt="Detailed Log of Deployment Failure" width="700" height="489" class="size-full wp-image-2385" srcset="/wp-content/uploads/2014/02/02_UnitTestResultsInLog.png 700w, /wp-content/uploads/2014/02/02_UnitTestResultsInLog-300x209.png 300w" sizes="(max-width: 700px) 100vw, 700px" /></a><p class="wp-caption-text">Detailed Log of Deployment Failure</p></div>
<p>And then when I add some logic to make the test pass, I get this result:</p>
<div id="attachment_2383" style="width: 710px" class="wp-caption aligncenter"><a href="/wp-content/uploads/2014/02/02_RanTestsAndDeployed.png"><img src="/wp-content/uploads/2014/02/02_RanTestsAndDeployed.png" alt="Passing Unit tests and Successful Deployment" width="700" height="236" class="size-full wp-image-2383" srcset="/wp-content/uploads/2014/02/02_RanTestsAndDeployed.png 700w, /wp-content/uploads/2014/02/02_RanTestsAndDeployed-300x101.png 300w" sizes="(max-width: 700px) 100vw, 700px" /></a><p class="wp-caption-text">Passing Unit tests and Successful Deployment</p></div>
<p>And there we have it, Nunit unit tests running automatically during the deployment every time I commit to master.</p>
<h2>Sidenote: CassiniDev</h2>
<p>As I mentioned before, I originally had set out to get CassiniDev, Selenium, and Phantom all running in harmony as part of the build. I got CassiniDev and Selenium running locally, but couldn&#8217;t get CassiniDev to host the site during the deployment:</p>
<div id="attachment_2370" style="width: 710px" class="wp-caption aligncenter"><a href="/wp-content/uploads/2014/02/03_CassiniFailure.png"><img src="/wp-content/uploads/2014/02/03_CassiniFailure.png" alt="Network Permissions Denied for CassiniDev" width="700" height="306" class="size-full wp-image-2370" srcset="/wp-content/uploads/2014/02/03_CassiniFailure.png 700w, /wp-content/uploads/2014/02/03_CassiniFailure-300x131.png 300w" sizes="(max-width: 700px) 100vw, 700px" /></a><p class="wp-caption-text">Network Permissions Denied for CassiniDev</p></div>
<p>During the setup of the test, CassiniDev&#8217;s StartServer command receives an &#8220;Access Denied&#8221; exception.</p>
<p>This is the <a href="https://github.com/tarwn/CloudPixiesAndGhosts/tree/master/CloudPixiesTests">/CloudPixiesTests</a> project in the solution, if you&#8217;re curious. The Selenium + CassiniDev (ie, the magix pixies part of the repository name) runs fine locally. </p>
<h2>Would I Use This For Production?</h2>
<p>Personally, I wouldn&#8217;t use this as my test and deployment process. I think it&#8217;s a great system, but I miss too much from having a build server and have a high enough comfort level with build servers that this simplified setup doesn&#8217;t win me much (especially once you add in the limits on what you can do with the built-in staging platform).</p>
<p>I really like the deployment side of this and could see using it as the last mile, with a build server that automatically managed the build process and then either pushes to a repository or merges from the branch it&#8217;s building to the one that gets deployed. The only downside to this method would be applying schema updates to storage resources (SQL or serialized documents), as the actual deployment would then be operating asynchronously from your build process, but even that is solvable.</p>
]]></content:encoded>
			<wfw:commentRss>/index.php/enterprisedev/cloud/azure/azure-web-sites-deployment-and-unit-testing/feed/</wfw:commentRss>
		<slash:comments>2</slash:comments>
		</item>
		<item>
		<title>Azure Storage SDK 3.0.2 and Preview Azure Storage Emulator 2.2.1</title>
		<link>/index.php/enterprisedev/cloud/azure/azure-storage-sdk-3-0-2-and-preview-azure-storage-emulator-2-2-1/</link>
		<comments>/index.php/enterprisedev/cloud/azure/azure-storage-sdk-3-0-2-and-preview-azure-storage-emulator-2-2-1/#respond</comments>
		<pubDate>Mon, 17 Feb 2014 16:35:56 +0000</pubDate>
		<dc:creator><![CDATA[Eli Weinstock-Herman (tarwn)]]></dc:creator>
				<category><![CDATA[Azure]]></category>
		<category><![CDATA[azure]]></category>

		<guid isPermaLink="false">/?p=2401</guid>
		<description><![CDATA[Late in November, the Azure Storage team announced an update of the Storage Library that corresponds with the &#8220;2013-08-15&#8221; Storage API update. They weren&#8217;t explicit about it in the release post, but this was a major version upgrade to Azure Storage SDK 3.0. The 3.0.2 Storage SDK is not part of an official Azure SDK [&#8230;]]]></description>
				<content:encoded><![CDATA[<p>Late in November, the Azure Storage team announced an update of the Storage Library that corresponds with the &#8220;2013-08-15&#8221; Storage API update. They weren&#8217;t explicit about it in the release post, but this was a major version upgrade to Azure Storage SDK 3.0. The 3.0.2 Storage SDK is not part of an official Azure SDK release, the Azure 2.2 SDK officially shipped with Azure Storage 2.1.0.2 (<a href="http://msdn.microsoft.com/en-us/library/windowsazure/dn459835.aspx">release notes</a>). I expect the next Azure SDK will include this Storage SDK (or perhaps a 3.1 version, depending on timing).</p>
<p><i><a href="http://blogs.msdn.com/b/windowsazurestorage/archive/2013/11/27/windows-azure-storage-release-introducing-cors-json-minute-metrics-and-more.aspx">Read the SDK release announcement here, 27 Nov 2013</a></i></p>
<div style="background-color: #eeeeee; padding: .5em">
<strong>A Plethora of Version Numbers</strong></p>
<p>The Azure SDK is composed of a number of different assemblies and projects that are versioned independently. The Azure API has been updated annually for the last few years, the latest version being &#8220;2013-08-15&#8221;, a yyyy-MM-dd value. The Azure Storage SDK for .Net split from the main versioning between SDK 1.7 and 1.8, going from 1.7 to 2.0. The Azure ConfigurationManager assembly is currently on 2.0.2.11-something, is listed in nuget as 2.0.3, has a file version of 2.0.0.0, and is part of Azure SDK 2.2. I haven&#8217;t looked at the node, java, etc projects and have not looked terribly closely at the the rest of the assemblies that make up the .Net Azure SDK.</p>
<p>I&#8217;ll try to be clear which thing a version applies to as the post progresses.</p>
</div>
<p>Besides the confusion of mismatched version numbers, this version of the Storage SDK was released without local development (emulator) support. When released, there was no emulator support for &#8220;2013-08-15&#8221;, however a <a href="http://www.microsoft.com/en-us/download/details.aspx?id=41670">preview version of the emulator</a> has been released now, for those of us that depend on local development.</p>
<h2>Azure Storage SDK 1.7 (Silently?) Deprecated</h2>
<p>The 1.7 version of the sdk has been silently deprecated. I initially thought I missed the announcement in one of the SDK release posts, but I have been unable to find any news on this via web searches. But if you look in the right places in <a href="http://msdn.microsoft.com/en-us/library/wa_storage_mref_reference_home.aspx">MSDN documentation</a>:</p>
<div id="attachment_2408" style="width: 710px" class="wp-caption aligncenter"><a href="/wp-content/uploads/2014/02/AzureSDK1.7Deprecated.png"><img src="/wp-content/uploads/2014/02/AzureSDK1.7Deprecated.png" alt="MSDN Documents 1.7 as Deprecated, 3.0 as Recommended" width="700" height="187" class="size-full wp-image-2408" srcset="/wp-content/uploads/2014/02/AzureSDK1.7Deprecated.png 700w, /wp-content/uploads/2014/02/AzureSDK1.7Deprecated-300x80.png 300w" sizes="(max-width: 700px) 100vw, 700px" /></a><p class="wp-caption-text">MSDN Documents 1.7 as Deprecated, 3.0 as Recommended</p></div>
<p>There you have it, documented as deprecated and obviously updated some time in the few months to reflect 3.0.</p>
<h2>Links</h2>
<p>The preview version of the emulator can be found here: <a href="http://www.microsoft.com/en-us/download/details.aspx?id=41670">Windows Azure Storage Emulator 2.2.1 Preview </a>																	</p>
<p>The breaking changes from Storage SDK 2.1 and 2.2 to 3.0.2 are available here: <a href="https://github.com/WindowsAzure/azure-storage-net/blob/ffdb2ebaeede29449afb810bc94e4bb9224c9ca3/BreakingChanges.txt" title="3.0.2 Breaking Changes on github">3.0.2 Breaking Changes</a></p>
<p>The source code for the Storage SDK has moved. Perhaps to one-up the folder restructures that have happened a couple times in the past, they completely moved the storage code from <a href="https://github.com/WindowsAzure/azure-sdk-for-net" title="WindowsAzure/azure-sdk-for-net on github">WindowsAzure/azure-sdk-for-net</a> to <a href="https://github.com/WindowsAzure/azure-storage-net" title="WindowsAzure/azure-storage-net on github">WindowsAzure/azure-storage-net</a>. The older repository has branches for 1.7, 1.7.1, and 2.0 and tags for 5 flavors of 2.1 (storage sdk? azure sdk?) among others. The new one appears to just be 3.0.2 and, at the time of this writing, seems to be missing a lot of history and all the unit tests.</p>
<p>The MSDN documentation that indicates 1.7 is deprecated can be found here: <a href="http://msdn.microsoft.com/en-us/library/wa_storage_mref_reference_home.aspx">Storage Client Library (June 2012 and earlier)</a></p>
<h2>Opportunities to Improve</h2>
<p>I&#8217;m glad Microsoft is releasing more frequently instead of the 2-3+ year gaps it used to take, but I&#8217;d like to see them pay more attention to the impact these releases are having on customers.</p>
<p>The move from 1.7 to 2.0 dropped a number of synchronous methods, renamed the namespace, and shipped with the 1.8 Azure SDK which still required the 1.7 version of Storage for the diagnostics library. Right up until 2.0 sprang into the world (literally days prior), developers were still telling us that 1.7.1 was the future and we should be using that for some of the new features (feel free to compare <a href="https://github.com/WindowsAzure/azure-sdk-for-net/tree/sdk_1.7.1/microsoft-azure-api">1.7.1</a> and <a href="https://github.com/WindowsAzure/azure-sdk-for-net/tree/sdk-2.0/microsoft-azure-api/Services/Storage title="2.0 Storage Branch on github">2.0</a> on github). </p>
<p>I&#8217;m also still waiting to see the Storage SDK become friendly to unit testing, between the sealed classes, internal methods, and lack of abstractions, it still requires you to write your own storage abstraction layer on top of their storage abstraction in order to support unit testing.</p>
<p>Subsequent releases haven&#8217;t been that bad (after 1.7 to 2.0), but now we have another major version release, this time completely out of step with Azure releases and announced without even announcing the fact that it was a major version upgrade. </p>
<p>Updated versions of the storage emulator trail months behind the release, ensuring slow uptake of new versions or adding additional time and dollar expense by forcing customers to develop directly against real Azure Storage Services accounts.</p>
<p>And the removal of the unit tests doesn&#8217;t fill me with a high level of confidence either. I didn&#8217;t particularly like the style of the older tests, but at least they were there.</p>
<p>So here we are, at another major release and a silent deprecation of 1.7. I&#8217;ve personally wasted a lot of time upgrading from 1.7 to 1.7.1, then throwing that work out when 1.7.1 remained a preview (with all the extra conversation that causes in support cases) and 2.0 didn&#8217;t look anything at all like 1.7.1, upgrading to 2.0 and filling in the holes they decided to add, then backing it all out again due to other conflicts and the fact that none of this has any value at all for our customers and&#8230;well, you get the picture.</p>
<p>A huge part of the value in releasing more frequently is bringing the pain to the surface <em>and then fixing it</em>. It seems the frequent release half of the equation has happened, now I&#8217;m looking forward to the part where they start attacking these pains.</p>
]]></content:encoded>
			<wfw:commentRss>/index.php/enterprisedev/cloud/azure/azure-storage-sdk-3-0-2-and-preview-azure-storage-emulator-2-2-1/feed/</wfw:commentRss>
		<slash:comments>0</slash:comments>
		</item>
	</channel>
</rss>
