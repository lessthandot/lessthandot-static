<?xml version="1.0" encoding="UTF-8"?><rss version="2.0"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:atom="http://www.w3.org/2005/Atom"
	xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
	xmlns:slash="http://purl.org/rss/1.0/modules/slash/"
	>

<channel>
	<title>analysis &#8211; LessthanDot</title>
	<atom:link href="/index.php/tag/analysis/feed/" rel="self" type="application/rss+xml" />
	<link>/</link>
	<description>A Technical Community for IT Professionals</description>
	<lastBuildDate>Sat, 09 Mar 2019 12:50:36 +0000</lastBuildDate>
	<language>en-US</language>
	<sy:updatePeriod>hourly</sy:updatePeriod>
	<sy:updateFrequency>1</sy:updateFrequency>
	<generator>https://wordpress.org/?v=4.6.1</generator>
	<item>
		<title>CQL From Visual Studio With NDepend 3</title>
		<link>/index.php/architect/designingsoftware/cql-from-visual-studio-with-ndepend-3/</link>
		<comments>/index.php/architect/designingsoftware/cql-from-visual-studio-with-ndepend-3/#comments</comments>
		<pubDate>Mon, 06 Sep 2010 20:29:00 +0000</pubDate>
		<dc:creator><![CDATA[Alex Ullrich]]></dc:creator>
				<category><![CDATA[Designing Software]]></category>
		<category><![CDATA[.net]]></category>
		<category><![CDATA[analysis]]></category>
		<category><![CDATA[c#]]></category>
		<category><![CDATA[ndepend]]></category>

		<guid isPermaLink="false">/index.php/2010/09/cql-from-visual-studio-with-ndepend-3/</guid>
		<description><![CDATA[For the last few months I've had the pleasure of working with NDepend version 3.  Most of my development at home is on linux these days, so I haven't used it as much as I'd like, but I have been using it to poke around in various codebases and see what&#8230;]]></description>
				<content:encoded><![CDATA[<p>For the last few months I&#8217;ve had the pleasure of working with <a href="http://ndepend.com/">NDepend</a> version 3.  Most of my development at home is on linux these days, so I haven&#8217;t used it as much as I&#8217;d like, but I have been using it to poke around in various codebases and see what the new Visual Studio integration is all about.  The last version integrated with Visual Studio, technically speaking, but it didn&#8217;t seem nearly as thorough as what I&#8217;ve seen in version 3.  I suspect the improved extensibility model in VS 2010 has a lot to do with this, but can&#8217;t confirm (I haven&#8217;t tried it with 2008 either).</p>
<p>My favorite feature of NDepend has always been CQL, the SQL-like query language that allows you to query your codebase using a variety of common metrics.  This is the same as it ever was (the integration with VS is even quite similar) but with the more thorough integration it seems much more useful.  I like how easy it is now to keep an eye on my CQL constraints when I rebuild.</p>
<p>My favorite CQL feature is the ability to set up CQL constraints <em>from now</em>.  This is really cool for older projects, where it&#8217;s unrealistic to think that your team will be able to fix everything right away.  But what you can do with this feature is ensure that all <em>new or modified</em> code does measure up to your team&#8217;s standards.  You may not be able to clean up all those 1,000 line methods right away, but you <em>can</em> ensure that newer methods fit in a more reasonable size limit (like 975 <img src="https://s.w.org/images/core/emoji/2/72x72/1f609.png" alt="ðŸ˜‰" class="wp-smiley" style="height: 1em; max-height: 1em;" /> ).  This is one of the most useful features of the application, IMO.  The way it works is by allowing you to establish a baseline.  By comparing the code&#8217;s current state to this baseline, future analyses are able to determine which methods/types/etc are new or changed, and apply the constraint to only these methods/types/etc.  Sometimes I feel like this would be useful just to be able to concisely see which methods have been changed as well (version control logs aren&#8217;t the most friendly things to read, especially spread throughout a large codebase).  Below is a screenshot of this feature in action.</p>
<div class="image_block"><img src="/wp-content/uploads/blogs/Architect/CQL-VS-NDepend3/cqlexplorer.PNG" alt="CQL Explorer" title="CQL Explorer Screenshot" width="971" height="283" /></div>
<p>The first three queries listed are built in to NDepend.  I added the fourth, just to have a listing of new/changed methods ready.  The CQL for this query is simply

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="text"><thead><tr><td colspan="2"  class="head">Text</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
</pre></td><td class="de1"><pre class="de1">SELECT METHODS WHERE WasAdded OR CodeWasChanged</pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">SELECT METHODS WHERE WasAdded OR CodeWasChanged</pre></div></div>

<p>Not a bad way to keep an eye on what is getting changed in the codebase.  To get in this state I added three new methods to the codebase I was looking at (in a place that I could remove them easily since they are not only low quality but useless as well). Two had 7 parameters, putting them in violation of the constraint for basic quality principles.  I didn&#8217;t add any tests, so all three were in violation of the test coverage constraint.  And finally they all showed up in the list of new methods.  It&#8217;s worth noting the yellow circle at the bottom right as well &#8211; the yellow means that warnings were encountered when running the CQL portion of the analysis.  Green would be good, and red would mean I have some bad queries that can&#8217;t be run.  </p>
<p>Double clicking a row in the CQL Explorer will take you to the CQL Editor &#8211; from here you can view the results of the query, and the CQL it contains.  From there you can easily navigate to the method definition in your source code by double-clicking.  </p>
<div class="image_block"><img src="/wp-content/uploads/blogs/Architect/CQL-VS-NDepend3/cqleditor.PNG" alt="CQL Editor" title="CQL Editor Screenshot" width="457" height="913" /></div>
<p>One of the things I really like here is the comments in the built-in queries.  They contain numerous links to metric definitions on the NDepend website, and sometimes even links to blog entries where the lead developer, <a href="http://codebetter.com/blogs/patricksmacchia/default.aspx">Patrick Smacchia</a> has explained features in greater detail.  I really like this form of documentation, it makes it easier to keep up to date and also minimizes what needs to be stored on the user&#8217;s computer.  </p>
<p>What I was happiest to find in the VS integration is the ability to superimpose CQL results onto the metrics view.  The metrics view consists of a grid where each block represents a unit of code (type, method, etc&#8230;) and they are sized according to their value for the metric in question.  When running CQL queries, the units of code matching your criteria are highlighted, giving a great visualization of how much code exhibits the properties you are looking for.</p>
<div class="image_block"><img src="/wp-content/uploads/blogs/Architect/CQL-VS-NDepend3/metricsexplorer.PNG" alt="Metrics Explorer" title="CQL Metrics Explorer" width="887" height="686" /></div>
<p>The selected query (about types having too many efferent couplings) is the currently selected query, and I had moused over the QueryParser class to highlight it in pink and show the metrics summary on the right.  I find that having this built right into visual studio really helps me figure out where to focus my refactoring energy.</p>
<p>It looks as if a lot of effort went into <a href="http://codebetter.com/blogs/patricksmacchia/archive/2010/08/29/validating-code-rules-in-visual-studio.aspx">making the CQL validation phase fast</a>:<br />
<blockquote>CQL rules validation phase is fast. The performance challenge was to make this happens almost instantly to avoid slowing the developer machine. Hopefully for a large 100K Lines of Code application, code gets re-analyzed and 200 CQL rules can get checked, all within 3 seconds after the (re)compilation of one or several .NET assemblies. These fast performances were made possible thanks to the development of a new technology of incremental code analysis. With incremental code analysis, only modified code gets re-analyzed. I can attest that this was extremely challenging and complex development!</p></blockquote>
<p>From what I&#8217;ve seen, the effort&#8217;s been a success.  I&#8217;ve mostly been using it to look at different versions of <a href="http://lucene.apache.org/lucene.net/">Lucene.net</a>, as I&#8217;ve got some work to do to get some of my code to build in VS2010.  For this size codebase (~23k lines) the analysis is completed very quickly, even if I disable the incremental analysis.  The CQL validation portion completes almost instantly, and memory usage doesn&#8217;t seem to get out of hand even when keeping VS open for days.  I&#8217;d imagine if your computer can handle running Visual Studio to begin with, it won&#8217;t have too much trouble with the NDepend integration. I could see some of the VS add-ins that don&#8217;t play well with others causing issues, especially with a very large codebase, so I hope to go back and test with a larger codebase and some other add-ins installed eventually.</p>
<p>Most of the other NDepend goodies are available in VS now as well (Dependency Graphs, Test Coverage Analysis, Class Browser, etc&#8230;) but I won&#8217;t get into all that here.  I really see CQL as the app&#8217;s killer feature, and that is what I spend the most time thinking about.  There is a good overview of the app&#8217;s capabilities <a href="http://www.ndepend.com/Features.aspx#Tour">here</a> if you&#8217;d like to read more.</p>
]]></content:encoded>
			<wfw:commentRss>/index.php/architect/designingsoftware/cql-from-visual-studio-with-ndepend-3/feed/</wfw:commentRss>
		<slash:comments>1</slash:comments>
		</item>
		<item>
		<title>Fun With NDepend</title>
		<link>/index.php/desktopdev/mstech/fun-with-ndepend/</link>
		<comments>/index.php/desktopdev/mstech/fun-with-ndepend/#comments</comments>
		<pubDate>Mon, 22 Dec 2008 12:24:12 +0000</pubDate>
		<dc:creator><![CDATA[Alex Ullrich]]></dc:creator>
				<category><![CDATA[Microsoft Technologies]]></category>
		<category><![CDATA[.net]]></category>
		<category><![CDATA[analysis]]></category>
		<category><![CDATA[c#]]></category>
		<category><![CDATA[ndepend]]></category>

		<guid isPermaLink="false">/index.php/2008/12/fun-with-ndepend/</guid>
		<description><![CDATA[I just finished another course at school that involved studying an open-source application. I&#8217;ve gotten tired of studying Java and using Java tools, so I decided to try studying a .net project. Luckily I stumbled upon NDepend which is the most fully featured tool for studying .net code that I&#8217;ve seen to date. In the [&#8230;]]]></description>
				<content:encoded><![CDATA[<p>I just finished another course at school that involved studying an open-source application.  I&#8217;ve gotten tired of studying Java and using Java tools, so I decided to try studying a .net project.  Luckily I stumbled upon <a href="http://ndepend.com/">NDepend</a> which is the most fully featured tool for studying .net code that I&#8217;ve seen to date.</p>
<p>In the past when I needed to do some kind of code analysis (usually generating DSM&#8217;s and maybe taking a brief look at some metrics), Lutz Roeder&#8217;s (I mean red-gate&#8217;s) <a href="http://www.red-gate.com/products/reflector/index.htm">Reflector</a> and its&#8217; various <a href="http://www.codeplex.com/reflectoraddins">add-ins</a> has been sufficient for me, and not to mention free.  But I found these tools to be somewhat limiting when doing large amounts of analysis (the kind I don&#8217;t typically get time to do at work!)</p>
<p>I&#8217;ve really enjoyed working on these code analysis projects in the past, but this was my favorite one yet.  It was more enjoyable to me because I was working on a .net project, making it easier to see how I can directly apply this to my own work (while working on the Java projects does a good job of teaching the concepts involved, it is hard to apply them to my work without the tools).  But it was also enjoyable because NDepend was such a joy to use (and I think I&#8217;ve just barely scratched the surface of what it can do).</p>
<p>NDepend can do all the things you&#8217;d expect from a code analysis tool.  It does a good job creating DSM&#8217;s, has very pretty visual displays of said DSM&#8217;s, and provides quick access to code metrics. I especially like the mouse-over highlighting in the visual dependency graphs, which helps you to tell at a moments notice what depends on a class, what the class depends on, whether any cyclic dependencies are present, and a ballpark idea of how many dependencies exist.  I haven&#8217;t gotten into any of the .net or visual-studio specific features yet (but I am sure they will make life much easier).</p>
<p>My favorite feature (by far) in working on this project was its&#8217; &#8220;Code Query Language&#8221; (CQL).  CQL is a SQL-like dialect that lets you write queries directly against your codebase.  This allows you to get very quick answers to questions like &#8220;What classes in my assembly depend on FooClass?&#8221; or &#8220;How many classes have more than &lt;insert arbitrary threshold here&gt; Efferent Couplings?&#8221;.  So if you need to find out some information about your code, instead of compiling metrics and poring over the results, you only need to ask NDepend the question directly, and see the answer as fast as you can type.  After using this feature for a month or two, I don&#8217;t know how I could go back to living without it!</p>
<p>An example query would look something like this:</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="csharp"><thead><tr><td colspan="2"  class="head">C#</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
</pre></td><td class="de1"><pre class="de1"><span class="co1">// &lt;Name&gt;Most Complex Methods used by Type X&lt;/Name&gt;</span>
<span class="kw1">SELECT</span> TOP <span class="nu0">10</span> METHODS 
<span class="kw1">WHERE</span> IsUsedBy <span class="st0">&quot;AssemblyX.NamespaceY.TypeZ&quot;</span> 
ORDER <span class="kw1">BY</span> CyclomaticComplexity DESC</pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">// &lt;Name&gt;Most Complex Methods used by Type X&lt;/Name&gt;
SELECT TOP 10 METHODS 
WHERE IsUsedBy "AssemblyX.NamespaceY.TypeZ" 
ORDER BY CyclomaticComplexity DESC</pre></div></div>

<p>In a larger project, you can use the FROM clause to limit what you bring back to methods from a particular assembly or namespace, like so:</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="csharp"><thead><tr><td colspan="2"  class="head">C#</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
</pre></td><td class="de1"><pre class="de1"><span class="co1">// &lt;Name&gt;Most Complex Methods from Assembly Q used by Type X&lt;/Name&gt;</span>
<span class="kw1">SELECT</span> TOP <span class="nu0">10</span> METHODS 
<span class="kw1">FROM</span> ASSEMBLIES <span class="st0">&quot;AssemblyQ&quot;</span>
<span class="kw1">WHERE</span> IsUsedBy <span class="st0">&quot;AssemblyX.NamespaceY.TypeZ&quot;</span> 
ORDER <span class="kw1">BY</span> CyclomaticComplexity DESC</pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">// &lt;Name&gt;Most Complex Methods from Assembly Q used by Type X&lt;/Name&gt;
SELECT TOP 10 METHODS 
FROM ASSEMBLIES "AssemblyQ"
WHERE IsUsedBy "AssemblyX.NamespaceY.TypeZ" 
ORDER BY CyclomaticComplexity DESC</pre></div></div>

<p>Another cool thing about CQL is the ability to add constraints.  So you could set it up to be warned whenever you run analysis if you had a method with over 200 lines of code, or methods with excessive complexity and an insufficient number of comments.  Here is an example of a constraint that ships with NDepend, meant to warn the user if any fields break encapsulation.</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="csharp"><thead><tr><td colspan="2"  class="head">C#</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
</pre></td><td class="de1"><pre class="de1"><span class="co1">// &lt;Name&gt;Fields should be declared as private&lt;/Name&gt;</span>
WARN <span class="kw1">IF</span> Count <span class="sy0">&gt;</span> <span class="nu0">0</span> <span class="kw1">IN</span> <span class="kw1">SELECT</span> TOP <span class="nu0">10</span> FIELDS <span class="kw1">WHERE</span> 
&nbsp;<span class="sy0">!</span>IsPrivate AND 
&nbsp;<span class="co1">// These conditions filter cases where fields doesn't represent state that should be encapsulated. </span>
&nbsp;<span class="sy0">!</span>IsInFrameworkAssembly AND 
&nbsp;<span class="sy0">!</span>IsGeneratedByCompiler AND 
&nbsp;<span class="sy0">!</span>IsSpecialName AND 
&nbsp;<span class="sy0">!</span>IsInitOnly AND 
&nbsp;<span class="sy0">!</span>IsLiteral AND 
&nbsp;<span class="sy0">!</span>IsEnumValue</pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">// &lt;Name&gt;Fields should be declared as private&lt;/Name&gt;
WARN IF Count &gt; 0 IN SELECT TOP 10 FIELDS WHERE 
 !IsPrivate AND 
 // These conditions filter cases where fields doesn't represent state that should be encapsulated. 
 !IsInFrameworkAssembly AND 
 !IsGeneratedByCompiler AND 
 !IsSpecialName AND 
 !IsInitOnly AND 
 !IsLiteral AND 
 !IsEnumValue</pre></div></div>

<p>As I think these few examples show, this CQL is very intuitive, and I really recommend checking it out if you get a chance.  Even being quite the SQL junkie myself, I found it hard to find anything to complain about.  I especially liked the visual display of the query results.  Basically in the NDepend window there is a rectangle filled with unevenly sized blocks.  Each block represents a field or method (depending what you are looking at) and they form larger blocks representing types.  The blocks can be sized based on different attributes like number of lines of code, or number of efferent couplings.  Below is a screenshot (from NDepend&#8217;s website) showing what this looks like:</p>
<p><img src="http://www.ndepend.com/Res/NDependBig08.PNG" alt="screenshot" title="CQL Window Screenshot" /></p>
<p>When all is said and done, I&#8217;ve really come to love, and even depend on NDepend.  I think it will be an indisposable part of my toolkit.  What is scary about this is that I haven&#8217;t even gotten started yet.  I haven&#8217;t used the build comparison feature that lets you watch how your assembly evolves over time (in the past, when I&#8217;ve used the Java tools, I needed to create a separate project for each, version, and compare manually, so I&#8217;m sure I will love this feature!).  Another thing that I think is really cool is the fact that you can integrate the NDepend analysis with your build process, so you can be warned of violations of your established constraints in real time, not just whenever you get around to running another analysis.  You can even embed the constraints in your source code!  When I get into all these features I&#8217;ll be sure to share.</p>
<p>*** If you have questions on C#, check out our <a href="http://forum.lessthandot.com/viewforum.php?f=40">C# Forum</a> or even the <a href="http://forum.lessthandot.com/viewforum.php?f=27">ASP.net Forum</a></p>
]]></content:encoded>
			<wfw:commentRss>/index.php/desktopdev/mstech/fun-with-ndepend/feed/</wfw:commentRss>
		<slash:comments>2</slash:comments>
		</item>
	</channel>
</rss>
