<?xml version="1.0" encoding="UTF-8"?><rss version="2.0"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:atom="http://www.w3.org/2005/Atom"
	xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
	xmlns:slash="http://purl.org/rss/1.0/modules/slash/"
	>

<channel>
	<title>architecture &#8211; LessthanDot</title>
	<atom:link href="/index.php/tag/architecture/feed/" rel="self" type="application/rss+xml" />
	<link>/</link>
	<description>A Technical Community for IT Professionals</description>
	<lastBuildDate>Sat, 09 Mar 2019 12:50:36 +0000</lastBuildDate>
	<language>en-US</language>
	<sy:updatePeriod>hourly</sy:updatePeriod>
	<sy:updateFrequency>1</sy:updateFrequency>
	<generator>https://wordpress.org/?v=4.6.1</generator>
	<item>
		<title>From Eli&#8217;s Shelves: Books for IT Architecture</title>
		<link>/index.php/itprofessionals/itservicemanagement/from-elis-shelves-it-architecture/</link>
		<comments>/index.php/itprofessionals/itservicemanagement/from-elis-shelves-it-architecture/#respond</comments>
		<pubDate>Mon, 11 Jul 2011 15:54:00 +0000</pubDate>
		<dc:creator><![CDATA[Eli Weinstock-Herman (tarwn)]]></dc:creator>
				<category><![CDATA[IT Processes]]></category>
		<category><![CDATA[IT Service Management]]></category>
		<category><![CDATA[architecture]]></category>
		<category><![CDATA[books]]></category>

		<guid isPermaLink="false">/index.php/2011/07/from-elis-shelves-it-architecture/</guid>
		<description><![CDATA[Most companies reach a point in their lives when they realize that they aren't entirely sure what IT resources they have, how they're deployed, what direction they're headed, or whether they're ready for the next big shift from the business. Some companies visit this point multiple times, either in response to shifts in the company or business landscape or as a result of letting the environment devolve back into it's primordial beginnings.]]></description>
				<content:encoded><![CDATA[<p>Most companies reach a point in their lives when they realize that they aren&#8217;t entirely sure what IT resources they have, how they&#8217;re deployed, what direction they&#8217;re headed, or whether they&#8217;re ready for the next big shift from the business. Some companies visit this point multiple times, either in response to shifts in the company or business landscape or as a result of letting the environment devolve back into it&#8217;s primordial beginnings.</p>
<h2>IT/Business/Enterprise Architecture</h2>
<p>Today I&#8217;m offering up two books with tools and ideas to help us analyze our environments, align them with the business, and build frameworks or architectures for our environment that enable our business, rather than hold them back. The first book provides a basic framework, while the second communicates the importance of architecture to executive and non-IT personnel.</p>
<div style="float: left; padding: .5em; width: 170px; margin: 0em .5em .5em 0px; border: 1px solid #dddddd; color: #666666; font-size: .8em; text-align: center; position: relative;">
   <a href="http://www.amazon.com/Architecture-Toolkit-Jane-Carbone/dp/0131473794" title="IT Architecture Toolkit"><img src="http://tiernok.com/_n_images/books/at.jpg" alt="IT Architecture Toolkit" /></a><br />
   IT Architecture Toolkit
</div>
<h3><a href="http://www.amazon.com/Architecture-Toolkit-Jane-Carbone/dp/0131473794" title="IT Architecture Toolkit at Amazon">IT Architecture Toolkit</a><br />Jane A. Carbone</h3>
<p>This is a self-declared &#8216;Practical Guide&#8217; to enterprise architecture, aiming to help us get the work done without the depth of knowledge and practice that a full-time, experienced enterprise architect would bring to the table. There is little filler in this book, going straight from why architecture is important to the company into methods to analyze the current situation and defining a path forward. By the end of the process we have not only a vision and defined goal, but also projects, methods of estimating, metrics, assistance getting buy-in, and so on. <br />
The practices and methods described in the book will be familiar to those with more background in business or enterprise architecture, but are just as approachable for those that have not had the time to delve into these subjects. Even if you aren&#8217;t ready for a full blown architectural initiative, the ideas presented in many of the chapters are just as useful on a day-to-day IT management basis and provide good supplemental material.<br />
<br style="clear: left" /></p>
<div style="float: left; padding: .5em; width: 170px; margin: 0em .5em .5em 0px; border: 1px solid #dddddd; color: #666666; font-size: .8em; text-align: center; position: relative;">
   <a href="http://www.amazon.com/Enterprise-Architecture-Strategy-Foundation-Execution/dp/1591398398" title="Enterprise Architecture as Strategy at Amazon"><img src="http://tiernok.com/_n_images/books/eapas.jpg" alt="Enterprise Architecture as Strategy" /></a><br />
   Enterprise Architecture as Strategy
</div>
<h3><a href="http://www.amazon.com/Enterprise-Architecture-Strategy-Foundation-Execution/dp/1591398398" title="Enterprise Architecture as Strategy">Enterprise Architecture as Strategy</a><br />Jeanne W. Ross, Peter Weill, David C. Robertson</h3>
<p>Probably the hardest part of any IT initiative is explaining to executives and managers why we need to do it. Enterprise Architecture as Strategy focuses on that communication, on explaining to a non-IT executive what the value is of IT alignment with the business and a process for achieving that alignment between IT and the business. The advantage this book brings is not depth of detail into Enterprise Architecture models or practices, but the business viewpoint of the value of Enterprise Architecture and the language and methods it uses to communicate that language. This is not a for-technologists-by-technologists book, but rather closer to a for-the-business-by-the-business voice, and that difference in perspective is especially useful.</p>
<p><br style="clear: left" /></p>
<p>Love or hate the term &#8220;IT/Business Alignment&#8221;, there are still thousands of IT groups and businesses that are working towards disparate goals (or no goals at all). Books like the two above, as well as many others in the EA space, can help us get a better picture of where we are, build a direction for where we should be going, improve the position and agility of our business, and provide a number of tools that are usable even in day-to-day operation.</p>
]]></content:encoded>
			<wfw:commentRss>/index.php/itprofessionals/itservicemanagement/from-elis-shelves-it-architecture/feed/</wfw:commentRss>
		<slash:comments>0</slash:comments>
		</item>
		<item>
		<title>Model-View-Presenter: Looking at Passive View</title>
		<link>/index.php/architect/designingsoftware/model-view-presenter-looking-at-passive/</link>
		<comments>/index.php/architect/designingsoftware/model-view-presenter-looking-at-passive/#comments</comments>
		<pubDate>Thu, 15 Jul 2010 09:44:12 +0000</pubDate>
		<dc:creator><![CDATA[Eli Weinstock-Herman (tarwn)]]></dc:creator>
				<category><![CDATA[Designing Software]]></category>
		<category><![CDATA[Introduction to Architecture and Design]]></category>
		<category><![CDATA[architecture]]></category>
		<category><![CDATA[model view presenter]]></category>
		<category><![CDATA[passive view]]></category>
		<category><![CDATA[patterns]]></category>

		<guid isPermaLink="false">/index.php/2010/07/model-view-presenter-looking-at-passive/</guid>
		<description><![CDATA[Model-View-Presenter is an architecture pattern that defines a structure for behavior and logic at the UI level. M-V-P separates the logic of the presentation, such as interacting with back-end services and the business layer, from the mechanics of disp&#8230;]]></description>
				<content:encoded><![CDATA[<p>Model-View-Presenter is an architecture pattern that defines a structure for behavior and logic at the UI level. M-V-P separates the logic of the presentation, such as interacting with back-end services and the business layer, from the mechanics of displaying buttons and interface components. </p>
<p>I often build small projects to help understand and grow my skills as a developer, architect, and all-around technologist (as may be apparent from the <a href="/index.php/All/?disp=authdir&amp;author=9" target="_blank" title="See all of my posts at LTD">wide range of topics I post on</a>). Today I worked with a combination of Visio and Visual Studio to build a sample project to play with the Passive View concept and to help grow my own understanding of the concept. This post will cover the Visio side of my learning-curve.</p>
<p>You can read more about Model View Presenter at <a href="http://en.wikipedia.org/wiki/Model-view-presenter" target="_blank" title="Model-View-Presenter at Wikipedia">Wikipedia</a> and <a href=http://msdn.microsoft.com/en-us/magazine/cc188690.aspx"" target="_blank" title="Model View Presenter by Jean-Paul Boodhoo on MSDN">MSDN</a>. Perhaps the best information can be found on Martin Fowler&#8217;s site, where he has separate write-ups on <a href="http://www.martinfowler.com/eaaDev/PassiveScreen.html" target=_blank" title="Passive View pattern">Passive View</a> and <a href="http://www.martinfowler.com/eaaDev/SupervisingPresenter.html" target=_blank" title="Supervising Controller Pattern">Supervising Controller</a>.</p>
<div style="background-color:#FFFFCC; padding: .5em; margin: .5em; border: 1px solid #DDDDAA; color: #333333; font-size: 80%;">Note: I know some people were waiting for another Virtual Lab entry this week, and here I am writing about Architecture instead. Don&#8217;t worry, the virtual lab series will continue, I just felt like doing a write-up while I was playing this past weekend.</div>
<h2>Passive View</h2>
<p>Passive View is a subset of the Model-View-Presenter pattern. In Passive View, the interface is responsible for handling interface-specific logic, such as figuring out how to put a value in a textbox or react to events from button clicks, but all actions and logic outside of the raw UI are sent to the Presenter to execute or manage. The Presenter is responsible for calling business methods in the Business model and updating the data that is available in the View. </p>
<div style="text-align: center; font-size: .8em; color: #666666;">
<img src="http://tiernok.com/LTDBlog/MVP/mvp.png" alt="Basic Model-View-Presenter diagram" /><br />
Basic Model-View-Presenter Diagram
</div>
<p>From the outside in, the architecture for Passive View looks something like this:</p>
<ul>
<li>UI &#8211; The User Interface reflects what is going on beneath it by implementing one or more View interfaces</li>
<li>Presenter &#8211; The Presenter receives interactions from the UI or Model and updates the Views it is attached to</li>
<li>Model &#8211; The model is a facade or black box in our diagram, behind which is a business logic layer and data layer</li>
</ul>
<p>In a flat architecture we would collect data from the interface, perhaps do some business and data validation, and then save it directly to a database using stored procedures or inline SQL. Defining a data access layer (or data model like entity framework) allows our application to operate on cohesive, defined objects that are meaningful to the application and stored and retrieved consistently. Defining a business logic layer allows us to centralize business rules that operate on entities in our application in a manner that is consistent with the business and internally consistent in the application, minimizing the risk that occurs when making changes to the business flow. Separating the logic of populating inputs and responding to button presses on the UI from the information being communicated to the end user and conceptual responses to their input allows the system to interact with the user consistently across any number of interfaces into the same application.</p>
<p>The definition of each level increases our ability to automate testing and supports greater <a href="http://en.wikipedia.org/wiki/Separation_of_concerns" title="Separation of Concerns at Wikipedia" target="_blank">Separation of Concerns</a>.</p>
<h2>Implementing a Sample Project</h2>
<p>My learning exercise has been the the creation of an ASP.Net search page that allows an end user (customer) to search for finished products from the AdventureWorks sample database. The architecture and design decisions were done as an exercise in Visio using simple shapes and layouts.</p>
<p>My example application has several functional and non-functional requirements:</p>
<ol>
<li>Functional &#8211; Display product number, name, list price, and available quantity in tabular format</li>
<li>Functional &#8211; Provide a basic search input and button to search product names</li>
<li>Non-Functional &#8211; Implement an M-V-P pattern &#8211; Obviously the purpose of this whole exercise</li>
<li>Non-Functional &#8211; Use a simple model stack that can be easily replaced with a Service-Oriented one at a later time</li>
<li>Non-Functional &#8211; Build with the idea that we will later create a Silverlight or WPF front-end</li>
<li>Non-Functional &#8211; Make pretty pictures for article</li>
</ol>
<p><i>My unwritten, final requirement was to finish the whole thing in half a day, though luckily I didn&#8217;t define whether I intended that to mean 4 hours or 12.</i></p>
<h3>Initial Architecture</h3>
<p>To start I created a diagram of the application architecture:</p>
<div style="text-align: center; font-size: .8em; color: #666666;">
<img src="http://tiernok.com/LTDBlog/MVP/mvp_arch_01.png" alt="More extensive M-V-P Diagram" /><br />
More Extensive Model-View-Presenter Diagram
</div>
<p>The purple layer is my presentation layer, which reflects the View. The blue layer is my Presenter layer which contains the logic for interacting between the end user and interface as well as a definition, or contract, of the information available in the View. The Green is the Model (or is behind the model, depending on your viewpoint) and exposes business functions and data entities for the Presenter to interact with.</p>
<h3>Class Layout</h3>
<p>Once the high level diagram was completed, I could approach the task of creating some base classes and interfaces to use in implementing the project.</p>
<ul>
<li>Model.IModel &#8211; Generic Model Interface to expose business calls to Presenters</li>
<li>Presenter.IView &#8211; Generic View Interface that all Presenters can interact with and all screens implement</li>
<li>Presenter.BasePresenter &#8211; Generic Presenter class that all Presenters will implement</li>
</ul>
<p>To keep the project to a single morning but also allow the ability to come back and build a more architecturally sound solution, I implemented the Model in a very basic fashion that was referenced locally by the Presenter project and makes direct calls to SQL Server using ADO and parametrized, inline SQL. This buys me the benefits of having a well-defined Model (via the interface) but allows me concentrate my time and effort on the learning part of the project (ie, the M-V-P interaction and structure). Defining the model interface also leaves me open to come back and replace it with better separated code and the ability to create a model that acts as a facade to a service stack, instead of local DLLs.</p>
<ul>
<li>Model.BasicModel.Model &#8211; Basic implementation of a model that will interact with AdventureWorks on SQL Server</li>
<li>Model.Entities.Product &#8211; A Product Entity that can be communicated between an IModel instance and Presenter
<li>Presenter.ProductSearchPresenter &#8211; A Presenter to manage product search interface</li>
<li>Presenter.IProductSearchView &#8211; A view of the data involved in a product search</li>
<li>ProductSearch.aspx &#8211; A web page that implements the IProductSearchView and interacts with the ProductSearchPresenter</li>
</li>
</ul>
<p>My final Visio diagram ended up looking like this:</p>
<div style="text-align: center; font-size: .8em; color: #666666;">
<img src="http://tiernok.com/LTDBlog/MVP/mvp_arch_02.png" alt="Example Application Diagram" /><br />
Diagram of Example Application
</div>
<p>In this case the left side represents basic components (bases classes and interfaces) that are used to define common structure or contracts on the right side. </p>
<h2>The Code</h2>
<p>For the purposes of the example project, my view has properties for Search Text, a Search Count (number of results), Results (a generic list of the Product entity), and a boolean indicating whether there are results to display. My Web Form implements these properties, tying them to elements on the screen.</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="csharp"><thead><tr><td colspan="2"  class="head">C#</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
</pre></td><td class="de1"><pre class="de1">&nbsp;<span class="kw1">public</span> <span class="kw1">partial</span> <span class="kw4">class</span> WebForm1 <span class="sy0">:</span> <span class="kw5">System.<span class="me1">Web</span><span class="sy0">.</span><span class="me1">UI</span></span><span class="sy0">.</span><span class="me1">Page</span>, Presenter<span class="sy0">.</span><span class="me1">Views</span><span class="sy0">.</span><span class="me1">IProductSearchView</span> <span class="br0">&#123;</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; Presenter<span class="sy0">.</span><span class="me1">ProductSearchPresenter</span> _presenter<span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">protected</span> <span class="kw4">void</span> Page_Load<span class="br0">&#40;</span><span class="kw4">object</span> sender, EventArgs e<span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; btnSearch<span class="sy0">.</span><span class="me1">Click</span> <span class="sy0">+=</span> <span class="kw3">new</span> EventHandler<span class="br0">&#40;</span>btnSearch_Click<span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; rptProducts<span class="sy0">.</span><span class="me1">ItemDataBound</span> <span class="sy0">+=</span> <span class="kw3">new</span> RepeaterItemEventHandler<span class="br0">&#40;</span>rptProducts_ItemDataBound<span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; _presenter <span class="sy0">=</span> <span class="kw3">new</span> Presenter<span class="sy0">.</span><span class="me1">ProductSearchPresenter</span><span class="br0">&#40;</span><span class="kw3">new</span> Model<span class="sy0">.</span><span class="me1">LocalModel</span><span class="sy0">.</span><span class="me1">BasicModel</span><span class="br0">&#40;</span><span class="kw5">System.<span class="me1">Configuration</span></span><span class="sy0">.</span><span class="me1">ConfigurationManager</span><span class="sy0">.</span><span class="me1">ConnectionStrings</span><span class="br0">&#91;</span><span class="st0">&quot;AdventureWorks&quot;</span><span class="br0">&#93;</span><span class="sy0">.</span><span class="me1">ConnectionString</span><span class="br0">&#41;</span>, <span class="kw1">this</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp; &nbsp; &nbsp; &nbsp; 
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw4">void</span> btnSearch_Click<span class="br0">&#40;</span><span class="kw4">object</span> sender, EventArgs e<span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">this</span><span class="sy0">.</span>_presenter<span class="sy0">.</span><span class="me1">ExecuteProductSearch</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw4">string</span> Presenter<span class="sy0">.</span><span class="me1">Views</span><span class="sy0">.</span><span class="me1">IProductSearchView</span><span class="sy0">.</span><span class="me1">SearchText</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">get</span> <span class="br0">&#123;</span> <span class="kw1">return</span> tbSearch<span class="sy0">.</span><span class="me1">Text</span><span class="sy0">;</span> <span class="br0">&#125;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">set</span> <span class="br0">&#123;</span> tbSearch<span class="sy0">.</span><span class="me1">Text</span> <span class="sy0">=</span> <span class="kw1">value</span><span class="sy0">;</span> <span class="br0">&#125;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw4">int</span> Presenter<span class="sy0">.</span><span class="me1">Views</span><span class="sy0">.</span><span class="me1">IProductSearchView</span><span class="sy0">.</span><span class="me1">ResultCount</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">set</span> <span class="br0">&#123;</span> lblResultCount<span class="sy0">.</span><span class="me1">Text</span> <span class="sy0">=</span> <span class="kw1">value</span><span class="sy0">.</span><span class="me1">ToString</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span> <span class="br0">&#125;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; List<span class="sy0">&lt;</span>Model<span class="sy0">.</span><span class="me1">Entities</span><span class="sy0">.</span><span class="me1">Product</span><span class="sy0">&gt;</span> Presenter<span class="sy0">.</span><span class="me1">Views</span><span class="sy0">.</span><span class="me1">IProductSearchView</span><span class="sy0">.</span><span class="me1">SearchResults</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">set</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">if</span> <span class="br0">&#40;</span><span class="kw1">value</span> <span class="sy0">!=</span> <span class="kw1">null</span> <span class="sy0">&amp;&amp;</span> <span class="kw1">value</span><span class="sy0">.</span><span class="me1">Count</span> <span class="sy0">&gt;</span> <span class="nu0">0</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; rptProducts<span class="sy0">.</span><span class="me1">DataSource</span> <span class="sy0">=</span> <span class="kw1">value</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; rptProducts<span class="sy0">.</span><span class="me1">DataBind</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw4">bool</span> Presenter<span class="sy0">.</span><span class="me1">Views</span><span class="sy0">.</span><span class="me1">IProductSearchView</span><span class="sy0">.</span><span class="me1">DisplayResults</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">set</span> <span class="br0">&#123;</span> tblResults<span class="sy0">.</span><span class="me1">Visible</span> <span class="sy0">=</span> <span class="kw1">value</span><span class="sy0">;</span> <span class="br0">&#125;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span>
<span class="sy0">...</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse"> public partial class WebForm1 : System.Web.UI.Page, Presenter.Views.IProductSearchView {

        Presenter.ProductSearchPresenter _presenter;

        protected void Page_Load(object sender, EventArgs e) {
            btnSearch.Click += new EventHandler(btnSearch_Click);
            rptProducts.ItemDataBound += new RepeaterItemEventHandler(rptProducts_ItemDataBound);
            _presenter = new Presenter.ProductSearchPresenter(new Model.LocalModel.BasicModel(System.Configuration.ConfigurationManager.ConnectionStrings["AdventureWorks"].ConnectionString), this);
        }
        
        void btnSearch_Click(object sender, EventArgs e) {
            this._presenter.ExecuteProductSearch();
        }

        string Presenter.Views.IProductSearchView.SearchText {
            get { return tbSearch.Text; }
            set { tbSearch.Text = value; }
        }

        int Presenter.Views.IProductSearchView.ResultCount {
            set { lblResultCount.Text = value.ToString(); }
        }

        List&lt;Model.Entities.Product&gt; Presenter.Views.IProductSearchView.SearchResults {
            set {
                if (value != null &amp;&amp; value.Count &gt; 0) {
                    rptProducts.DataSource = value;
                    rptProducts.DataBind();
                }
            }
        }

        bool Presenter.Views.IProductSearchView.DisplayResults {
            set { tblResults.Visible = value; }
        }
...</pre></div></div>

<p>As the presenter populates properties in the view, the information is automatically reflected on the page. The actual logic of how the business functions are called and populate those properties are neatly packaged up in the Presenter and View interface and very little logic occurs in the actual web form.</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="csharp"><thead><tr><td colspan="2"  class="head">C#</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
</pre></td><td class="de1"><pre class="de1">&nbsp;<span class="kw1">public</span> <span class="kw4">class</span> ProductSearchPresenter <span class="sy0">:</span> BasePresenter <span class="br0">&#123;</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">protected</span> Views<span class="sy0">.</span><span class="me1">IProductSearchView</span> _view<span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">public</span> ProductSearchPresenter<span class="br0">&#40;</span>Model<span class="sy0">.</span><span class="me1">IModel</span> model, Views<span class="sy0">.</span><span class="me1">IProductSearchView</span> view<span class="br0">&#41;</span> <span class="sy0">:</span> <span class="kw1">base</span><span class="br0">&#40;</span>model<span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">this</span><span class="sy0">.</span>_view <span class="sy0">=</span> view<span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">this</span><span class="sy0">.</span>_view<span class="sy0">.</span><span class="me1">ResultCount</span> <span class="sy0">=</span> <span class="nu0">0</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">this</span><span class="sy0">.</span>_view<span class="sy0">.</span><span class="me1">DisplayResults</span> <span class="sy0">=</span> <span class="kw1">false</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">public</span> <span class="kw4">void</span> ExecuteProductSearch<span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; List<span class="sy0">&lt;</span>Model<span class="sy0">.</span><span class="me1">Entities</span><span class="sy0">.</span><span class="me1">Product</span><span class="sy0">&gt;</span> results<span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; results <span class="sy0">=</span> <span class="kw1">this</span><span class="sy0">.</span>_model<span class="sy0">.</span><span class="me1">SearchProduct</span><span class="br0">&#40;</span><span class="kw1">this</span><span class="sy0">.</span>_view<span class="sy0">.</span><span class="me1">SearchText</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">if</span> <span class="br0">&#40;</span>results<span class="sy0">.</span><span class="me1">Count</span> <span class="sy0">&gt;</span> <span class="nu0">0</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">this</span><span class="sy0">.</span>_view<span class="sy0">.</span><span class="me1">ResultCount</span> <span class="sy0">=</span> results<span class="sy0">.</span><span class="me1">Count</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">this</span><span class="sy0">.</span>_view<span class="sy0">.</span><span class="me1">DisplayResults</span> <span class="sy0">=</span> <span class="kw1">true</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">this</span><span class="sy0">.</span>_view<span class="sy0">.</span><span class="me1">SearchResults</span> <span class="sy0">=</span> results<span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">else</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">this</span><span class="sy0">.</span>_view<span class="sy0">.</span><span class="me1">ResultCount</span> <span class="sy0">=</span> <span class="nu0">0</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">this</span><span class="sy0">.</span>_view<span class="sy0">.</span><span class="me1">DisplayResults</span> <span class="sy0">=</span> <span class="kw1">false</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">this</span><span class="sy0">.</span>_view<span class="sy0">.</span><span class="me1">SearchResults</span> <span class="sy0">=</span> <span class="kw1">null</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp; &nbsp; <span class="br0">&#125;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse"> public class ProductSearchPresenter : BasePresenter {

        protected Views.IProductSearchView _view;

        public ProductSearchPresenter(Model.IModel model, Views.IProductSearchView view) : base(model) {
            this._view = view;
            this._view.ResultCount = 0;
            this._view.DisplayResults = false;
        }

        public void ExecuteProductSearch() {
            List&lt;Model.Entities.Product&gt; results;
            results = this._model.SearchProduct(this._view.SearchText);
            if (results.Count &gt; 0) {
                this._view.ResultCount = results.Count;
                this._view.DisplayResults = true;
                this._view.SearchResults = results;
            }
            else {
                this._view.ResultCount = 0;
                this._view.DisplayResults = false;
                this._view.SearchResults = null;
            }
        }
    }</pre></div></div>

<p>To create a unit test, we define a simple view that implements the view interface, execute the presenter logic, and verify the properties are populated the way we would expect when the same presenter calls are made from the interface.</p>
<h3>Extending the Architecture Further</h3>
<p>Extending the application to display product search in a different manner would only require the addition of a new interface that also implements the Product Search View. A Silverlight front-end would only require creating the basic project, implementing the product search View, and wiring the new interface controls to the view properties. To replace the direct mode reference with a service reference, we could create a service facade that implemented the IModel interface, connected to a local or remote WCF service behid the scenes to handle the real model logic. And finally, instead of counting on our QA department to test all of the application interactions, we can create unit tests directly against the Presenter and Views to ensure that all of the interactions below the top surface of the application are happening consistently and to our expectation.</p>
<h2>Your Turn</h2>
<p>Getting this much of the architecture working is a good first step. I took a number of shortcuts on the BasicModel class in my example, but I now have a functional Model-View-Presenter application to play with. Hopefully there was enough information in the article to interest you in trying this out on your own. I urge you to read the articles linked in the top of the post (or several more in my <a href="http://delicious.com/tarwn/model-view-presenter" title="Eli's Delicious bookmarks for M-V-P" target="_blank">Model-View-Presentation bookmarks</a>) and come up with your own diagrams and sample project. Even doing a small project will force you to run into questions and considerations you wouldn&#8217;t have had by simply reading about it, not to mention unrelated tidbits you will pick up along the way (for instance, I also learned about <a href="http://msdn.microsoft.com/en-us/library/ms668604.aspx" title="ObservableCollection at MSDN" target="_blank">ObservableCollections</a> today).</p>
]]></content:encoded>
			<wfw:commentRss>/index.php/architect/designingsoftware/model-view-presenter-looking-at-passive/feed/</wfw:commentRss>
		<slash:comments>11</slash:comments>
		</item>
		<item>
		<title>IT: Beyond the &#8216;Right Now&#8217; Problem</title>
		<link>/index.php/itprofessionals/itservicemanagement/it-beyond-the-right-now-problem/</link>
		<comments>/index.php/itprofessionals/itservicemanagement/it-beyond-the-right-now-problem/#comments</comments>
		<pubDate>Thu, 18 Mar 2010 13:22:28 +0000</pubDate>
		<dc:creator><![CDATA[Eli Weinstock-Herman (tarwn)]]></dc:creator>
				<category><![CDATA[IT Processes]]></category>
		<category><![CDATA[IT Service Management]]></category>
		<category><![CDATA[architecture]]></category>
		<category><![CDATA[it]]></category>
		<category><![CDATA[measurement]]></category>
		<category><![CDATA[world class]]></category>

		<guid isPermaLink="false">/index.php/2010/03/it-beyond-the-right-now-problem/</guid>
		<description><![CDATA[In an IT department there is a tendency to classify operations as being reactive or proactive and, often, pressure to have more of the latter and less of the former. Pressure, that is, until a PC breaks down, a network connection drops, a data record goes missing, or any of a dozen other issues which [&#8230;]]]></description>
				<content:encoded><![CDATA[<p>In an IT department there is a tendency to classify operations as being reactive or proactive and, often, pressure to have more of the latter and less of the former. Pressure, that is, until a PC breaks down, a network connection drops, a data record goes missing, or any of a dozen other issues which will ultimately receive more attention than disaster recovery, employee development, business analysis, strategic planning and the rest of a long list of proactive tasks. Immediate, defined problems are far easier to focus on than tenuous concepts of proactive prevention.</p>
<h2>Level of Pain</h2>
<p>One of the strongest drivers of IT prioritization is business pain. This pain can be immediate and obvious, such as hardware failures and software bugs, or it can be future and less evident, such as announced, critical IT plans for an upcoming merger. When the business feels pain then the value in projects is more immediately obvious and this allows many IT departments to slip into a reactive role. It is easier to take on obvious tasks, applying band-aids and surgery, then selling the business on the benefits of long-term planning and expenditures.</p>
<p>However we must keep in mind that businesses are not people and, though we use the metaphor of pain, there is a critical difference between how humans and how businesses deal with pain. As children we learn broad lessons from simple events. Touching a hot pan introduces a wariness of things that are on the stove, things that are hot, and possibly things that are making crackling noises. As we mature, these past events are remembered by our unconscious, making us wary of the next hot pan we come across without then need to actively examine every detail in our environment.</p>
<p>Businesses, on the other hand, will continue repeating the same error and require active attention from personnel to ensure they don&#8217;t continue picking up the pan every few minutes. It&#8217;s likely we have all seen this occur, an IT department that fixes the same network outage every month or that undergoes cultural transformation and then backslides a few months later. Businesses are far less able to operate on cruise control than people are and though we liken them to living organisms, we have to remember these critical differences. </p>
<h2>Maturing our Problem Solving</h2>
<p>In attempting to mature our organization from a reactive to proactive stance, we must address both the tendency for a company to undervalue proactive tasks and the tendency to repeat errors on the small and large scale. A department in a reactive stance is likely at their limit with day to day problems, as they have only ever defined themselves by these tasks and their hiring will in turn be defined by that capacity. While it may seem like this is a bad place to start, with our employee capacity already maxed out, what we actually have is a great deal of potential, if only we could resolve some of those repetitive problems.</p>
<h3>Transparency</h3>
<p>While many reactive departments will have metrics that they occasionally share, most will have little or no actual communication of their status with the outside business (except in arguments for headcount or to justify the length of time it takes to react to new issues). It may feel like your airing your dirty laundry, but communicating issues to the outside business will ultimately help you expose the importance of future-looking activities, show meaningful progress to the business without having to announce it, and provide your staff with pride in overcoming the challenges of the current environment.</p>
<p>But if it were easy, it wouldn&#8217;t be worth doing.</p>
<p>The first step is the hardest, providing visibility into a process that is simply running from one problem to the next. The two types of information you want to communicate to the wider business are service impact events and information on what the department is working on. Metrics posted on the front fo the intranet site or a <a href="/index.php/ITProfessionals/ITProcesses/applying-kanban-to-it-processes-part-2" title="Applying Kanban in IT - Help Desk Scenario">visual board</a> can be god mechanisms to build awareness of the tasks and task load the department is currently working on, while email is generally a good enough vehicle to deliver news of service outages and impacts.</p>
<div style="background-color: #eeeeee; padding: 1em; font-style: italic">
Side Note: While ticket closure or reception rates are interesting metrics, try researching other common metrics and pick ones that drive the behaviors you want in the department. For instance, reporting the ratio of time spent on reactive vs proactive tasks or direct measures of proactive tasks, such as number of systems with a disaster recovery plan or maximum and average length of time between tests of disaster recovery plans.
</div>
<p>Having the courage to post an honest evaluation of the state of the IT Department will buy you credibility, while compiling those numbers and sending notifications on outages will force you to evaluate what the business needs from the department and what areas to begin focusing on. Having numbers in public display will also create a faster feedback loop with the business, as members of the business will see the improvements across the whole company and not just as a function of their own individual requests.</p>
<h3>Visibility for Analysis</h3>
<p>The second type of visibility into tasks is just as critical. As problems occur and are corrected, they need to be recorded and cataloged. The data from this process is not only a perfect source for the business visibility above, it also provides a starting place for identifying common or repetitive problems. Just as touching a hot pan the first or second time will save us from touching it a third and fourth time, we need to examine our recurring issues and put a preventive measure in place.</p>
<div style="background-color: #eeeeee; padding: 1em; font-style: italic">
Side Note: When you start a tracking process, keep it as small as possible and review what you track regularly. Currently there is no tracking, so your initial process has to be as light as possible to get buy in from the members of the IT group. Start with a few key pieces of information and let the team take responsibility for experimenting with others in later feedback sessions. This will promote ownership of the process among the team and should lead to a higher success rate.
</div>
<p>Common information to track is a general description of a problem, the person who worked on the problem, the person who reported the problem, date the issue was received, date the issue was closed, and some high level information about the system involved or type of problem (hardware, software, training, whatever). You won&#8217;t get this right at first and, if it does it&#8217;s job, some of your early factors will stop being as significant once you start attacking the most prevalent types of problems.</p>
<p>After only a few weeks of gathering data it should be possible to start identifying some areas to focus on. This doesn&#8217;t require an expensive tool or analysis package, often a few columns of data in a spreadsheet with pivoting will net you some results. Look for the most common factors in recurrence, source of problems, equipment or software generating problems, etc. Make a list of the top 3; these are the areas to focus on first.</p>
<h3>Root Cause</h3>
<p>The business is becoming familiar with the number of issues that are flowing through the department and you have some clues on where to look to bring your issue rate down, now all we need to do is bring the two together. There are a number of methods and tools for locating the root cause of a problem, many not specific to IT. The method I prefer is the <a href="http://leanhomebuilding.wordpress.com/2010/02/17/creating-the-fishbone-5-why-analysis/" title="External LInk: Creatig the Fishbone/5-Why Analsysi" target="_blank">Fishbone/5-Why technique</a>, but there are many others that are just a <a href="http://www.google.com/search?q=root+cause+analysis" title="Root Cause Analysis on Goole" target="_blank">Google search</a> away.</p>
<p>Each of the items on your top 3 list is responsible for generating an appreciable amount of pain. In many cases it won&#8217;t even be on purpose (surely you didn&#8217;t think Bonnie down in purchasing had nothing better to do than generate IT tickets?). By using root cause analysis on your top 3 list, you shoudl be able to start identifying practices or problems that are responsible for the errors yuor actually receiving tickets for. Together with your team and potentially even some members of the affected departments, brainstorm some ideas that could resolve these root causes and try them out. At first the business may be wary about your team spending an afternoon brainstorming on issues they aren&#8217;t even seeing, but if you can start to report not just how many tickets your closing, but that the rate of tickets being submitted is slowly going down, then you will have a case for continuing.</p>
<p>To return to the pain metaphor, the business will slowly learn that many of the pains they have been suffering, are actually symptoms of longer-term illnesses. By addressing these illnesses, the team will be able to show improvements in the areas they worked on, continue to build credibility for working on non-obvious issues, and provide a foundation for taking on even less obvious issues, such as long term strategic planning.</p>
<p>One more step.</p>
<h2>The Wisdom of Age</h2>
<p>Now that the business trusts our judgment to spend time correcting ills that are readily apparent, we need to take what we have learned and start projecting forward. By this point the team is solving immediate and future problems with equal ease, members of the team are starting to show proclivities towards one or the other set of problems, and the business has been much more willing to try applying sometimes outlandish solutions to less than immediate problems. Time to scale up.</p>
<p>As our businesses continue to grow and mature, they are going to be looking at new markets, new acquisitions, new tools, new methods&#8230;.there is a whole lot of <em>&#8220;new&#8221;</em> coming for the business. IT can be a business driver and help provide tools that grow the bottom and top lines, but it won&#8217;t be able to help growth or accommodate change smoothly if all we are doing is solving immediate problems. Just as we collected information on individual pains that were occurring and used those to solve underlying problems, we need to start collecting information about the long terms plans from departments and executives. That information, in combination with our newly whetted imaginations and skills from root cause sessions, is going to help us start building a framework to solve &#8220;pains&#8221; that have not yet occurred. </p>
<p>Internally it is time to start planning. Each server and software package should have a next step, PC retention plans should be in place for end user equipment, that projector in the conference room should have plans for warranty extension or replacement. Software should be evaluated to determine how well it aligns with future plans to grow or acquire new businesses, the potential for the vendor staying in business, and the direction of competing packages. Competitors should be evaluated to see what technologies or services they are beginning to offer, emerging technologies evaluated to see if they can offer additional services to the customer and increase entanglement, and on, and on.</p>
<p>There&#8217;s a lot of catch up to do to get on top of your environment, but the end goal is worth it. Lower stress, higher pride, smoother operations&#8230;Just as a fit body is stricken less often by illness or infirmities, a fit IT group functions more smoothly and can handle a much wider range of calamity.</p>
<h2>More Information</h2>
<p>For more information on long term architectural planning and some additional information on taking your team to the next level, I highly recommend the following two books:</p>
<ul>
<li><a href="http://tiernok.com/books.php#at">IT Architecture Toolkit</a> &#8211; A pragmatic approach to analyzing, planning, and building the IT architecture </li>
<li><a href="http://tiernok.com/books.php#wci">World Class IT</a> &#8211; Focused on the executive and management levels, discusses principles and methods that can grow an IT organization to &#8216;World Class&#8217; status</li>
</ul>
<p><i>This is just a brief thought on another way of looking at IT maturity in business environments. Recently I&#8217;ve been tied up with <a href="http://tiernok.com/" title="Visit my site">refreshing my site</a> and trying to <a href="/index.php/WebDev/WebDesignGraphicsStyling/quick-beginners-look-at-seo" title="A Beginners Look at SEO">recapture my personal brand</a>. While I haven&#8217;t had as many opportunities to post as I would like, I have had the time to finish a couple new books and learn a few new things as I rolled out the site. More to come soon.</i></p>
]]></content:encoded>
			<wfw:commentRss>/index.php/itprofessionals/itservicemanagement/it-beyond-the-right-now-problem/feed/</wfw:commentRss>
		<slash:comments>2</slash:comments>
		</item>
		<item>
		<title>Patterns And Practices Application Architecture Guide 2.0, Something Everyone Should Read</title>
		<link>/index.php/architect/hardwareinfrastructuredesign/patterns-and-practices-application-archi/</link>
		<comments>/index.php/architect/hardwareinfrastructuredesign/patterns-and-practices-application-archi/#respond</comments>
		<pubDate>Thu, 12 Mar 2009 11:04:46 +0000</pubDate>
		<dc:creator><![CDATA[SQLDenis]]></dc:creator>
				<category><![CDATA[Hardware and Infrastructure Design]]></category>
		<category><![CDATA[architecture]]></category>
		<category><![CDATA[best practices]]></category>
		<category><![CDATA[cheat sheets]]></category>
		<category><![CDATA[data access]]></category>
		<category><![CDATA[design]]></category>
		<category><![CDATA[design patterns]]></category>
		<category><![CDATA[workflow]]></category>

		<guid isPermaLink="false">/index.php/2009/03/patterns-and-practices-application-archi/</guid>
		<description><![CDATA[I was listening to show number 426 on dotnetrocks: Rob Boucher on Application Architecture Guidance! They mentioned the Patterns And Practices Application Architecture Guide 2.0, this guide is available for free on codeplex.

Although it is a Microsof&#8230;]]></description>
				<content:encoded><![CDATA[<p>I was listening to show number 426 on dotnetrocks: <a href="http://www.dotnetrocks.com/default.aspx?showNum=426">Rob Boucher on Application Architecture Guidance!</a> They mentioned the <a href="http://www.codeplex.com/AppArchGuide">Patterns And Practices Application Architecture Guide 2.0</a>, this guide is available for free on codeplex.</p>
<p>Although it is a Microsoft technology centric guide, there should be chapters for every developer in your group.<br />
Here is one example from the book</p>
<h3>
Key Design Principles<br />
</h3>
<p>When getting started with your design, bear in mind the key principles that will help you to create architecture that meets “best practices,” minimizes costs and maintenance requirements, and promotes usability and extendibility. The key principles are:
<ul>
<li><b>Separation of concerns</b>. Break your application into distinct features that overlap in functionality as little as possible.</li>
<li><b>Single Responsibility Principle</b>. Each component or a module should be responsible for only a specific feature or functionality.</li>
<li><b>Principle of least knowledge</b>.** A component or an object should not know about internal details of other components or objects. Also known as the Law of Demeter** (LoD).</li>
<li><b>Don’t Repeat Yourself (DRY)</b>. There should be only one component providing a specific functionality; the functionality should not be duplicated in any other component.</li>
<li><b>Avoid doing a big design upfront</b>. If your application requirements are unclear, or if there is a possibility of the design evolving over time, avoid making a large design effort prematurely. This design principle is often abbreviated as BDUF. </li>
<li><b>Prefer composition over inheritance</b>. Wherever possible, use composition over inheritance when reusing functionality because inheritance increases the dependency between parent and child classes, thereby limiting the reuse of child classes.</li>
</ul>
<p>The nice thing is that each chapter has a resource section at the bottom so that you can dive deep into a specific topic mentioned in the chapter itself. This is great stuff and I recommend that you check out this guide. You also might want to listen to the dotnetrocks podcast about this guide: http://www.dotnetrocks.com/default.aspx?showNum=426</p>
<p>Here is a list of all the chapters, make sure you check out the cheat sheets</p>
<h3>
Chapters<br />
</h3>
<ul>
<li><a href="http://apparchguide.codeplex.com/Wiki/View.aspx?title=Introduction%20V2&amp;referringTitle=Home">Introduction</a></li>
<li><a href="http://apparchguide.codeplex.com/Wiki/View.aspx?title=Architecture%20and%20Design%20Solutions%20At%20a%20Glance&amp;referringTitle=Home">Architecture and Design Solutions At a Glance</a></li>
<li><a href="http://apparchguide.codeplex.com/Wiki/View.aspx?title=Fast%20Track&amp;referringTitle=Home">Fast Track</a></li>
</ul>
<h4>
Part I, Fundamentals<br />
</h4>
<ul>
<li><a href="http://apparchguide.codeplex.com/Wiki/View.aspx?title=Chapter%201%20-%20Architecture%20Fundamentals&amp;referringTitle=Home">Chapter 1 &#8211; Fundamentals of Application Architecture </a></li>
<li><a href="http://apparchguide.codeplex.com/Wiki/View.aspx?title=.NET%20Platform%20Overview%20V2&amp;referringTitle=Home">Chapter 2 &#8211; .NET Platform Overview</a></li>
<li><a href="http://apparchguide.codeplex.com/Wiki/View.aspx?title=Chapter%203%20-%20Architecture%20and%20Design%20Guidelines&amp;referringTitle=Home">Chapter 3 &#8211; Architecture and Design Guidelines</a></li>
</ul>
<h4>
Part II, Design<br />
</h4>
<ul>
<li><a href="http://apparchguide.codeplex.com/Wiki/View.aspx?title=Chapter%204%20-%20Designing%20Your%20Architecture&amp;referringTitle=Home">Chapter 4 &#8211; Designing Your Architecture</a></li>
<li><a href="http://apparchguide.codeplex.com/Wiki/View.aspx?title=Chapter%205%20-%20Deployment%20Patterns&amp;referringTitle=Home">Chapter 5 &#8211; Deployment Patterns</a></li>
<li><a href="http://apparchguide.codeplex.com/Wiki/View.aspx?title=Chapter%206%20-%20Architectural%20Styles&amp;referringTitle=Home">Chapter 6 &#8211; Architectural Styles</a></li>
<li><a href="http://apparchguide.codeplex.com/Wiki/View.aspx?title=Chapter%207%20-%20Quality%20Attributes&amp;referringTitle=Home">Chapter 7 &#8211; Quality Attributes</a></li>
<li><a href="http://apparchguide.codeplex.com/Wiki/View.aspx?title=Chapter%208%20-%20Communication%20Guidelines&amp;referringTitle=Home">Chapter 8 &#8211; Communication Guidelines</a></li>
</ul>
<h4>
Part III, Layers<br />
</h4>
<ul>
<li><a href="http://apparchguide.codeplex.com/Wiki/View.aspx?title=Chapter%209%20-%20Layers%20and%20Tiers&amp;referringTitle=Home">Chapter 9 &#8211; Layers and Tiers</a></li>
<li><a href="http://apparchguide.codeplex.com/Wiki/View.aspx?title=Chapter%2010%20-%20Presentation%20Layer%20Guidelines&amp;referringTitle=Home">Chapter 10 &#8211; Presentation Layer Guidelines</a></li>
<li><a href="http://apparchguide.codeplex.com/Wiki/View.aspx?title=Chapter%2011%20-%20Business%20Layer%20Guidelines&amp;referringTitle=Home">Chapter 11 &#8211; Business Layer Guidelines</a></li>
<li><a href="http://apparchguide.codeplex.com/Wiki/View.aspx?title=Chapter%2012%20-%20Data%20Access%20Layer%20Guidelines&amp;referringTitle=Home">Chapter 12 &#8211; Data Access Layer Guidelines</a></li>
<li><a href="http://apparchguide.codeplex.com/Wiki/View.aspx?title=Chapter%2013%20-%20Service%20Layer%20Guidelines&amp;referringTitle=Home">Chapter 13 &#8211; Service Layer Guidelines</a></li>
</ul>
<h4>
Part IV, Archetypes<br />
</h4>
<ul>
<li><a href="http://apparchguide.codeplex.com/Wiki/View.aspx?title=Chapter%2014%20-%20Application%20Archetypes&amp;referringTitle=Home">Chapter 14 &#8211; Application Archetypes</a></li>
<li><a href="http://apparchguide.codeplex.com/Wiki/View.aspx?title=Chapter%2015%20-%20Web%20Applications&amp;referringTitle=Home">Chapter 15 &#8211; Web Applications</a></li>
<li><a href="http://apparchguide.codeplex.com/Wiki/View.aspx?title=Chapter%2016%20-%20Rich%20Internet%20Applications%20%28RIA%29&amp;referringTitle=Home">Chapter 16 &#8211; Rich Internet Applications (RIA)</a></li>
<li><a href="http://apparchguide.codeplex.com/Wiki/View.aspx?title=Chapter%2017%20-%20Rich%20Client%20Applications&amp;referringTitle=Home">Chapter 17 &#8211; Rich Client Applications</a></li>
<li><a href="http://apparchguide.codeplex.com/Wiki/View.aspx?title=Chapter%2018%20-%20Services&amp;referringTitle=Home">Chapter 18 &#8211; Services</a></li>
<li><a href="http://apparchguide.codeplex.com/Wiki/View.aspx?title=Chapter%2019%20-%20Mobile%20Applications&amp;referringTitle=Home">Chapter 19 &#8211; Mobile Applications</a></li>
<li><a href="http://apparchguide.codeplex.com/Wiki/View.aspx?title=Chapter%2020%20-%20Office%20Business%20Applications%20%28OBA%29&amp;referringTitle=Home">Chapter 20 &#8211; Office Business Applications (OBA)</a></li>
<li><a href="http://apparchguide.codeplex.com/Wiki/View.aspx?title=Chapter%2021%20-%20SharePoint%20LOB%20Applications&amp;referringTitle=Home">Chapter 21 &#8211; SharePoint Line-Of-Business (LOB) Applications</a></li>
</ul>
<h4>
Appendix<br />
</h4>
<ul>
<li><a href="http://apparchguide.codeplex.com/Wiki/View.aspx?title=Pattern%20Catalog%20V2&amp;referringTitle=Home">Cheat Sheet &#8211; patterns &amp; practices Pattern Catalog</a></li>
<li><a href="http://apparchguide.codeplex.com/Wiki/View.aspx?title=Cheat%20Sheet%20-%20Presentation%20Technology%20Matrix&amp;referringTitle=Home">Cheat Sheet &#8211; Presentation Technology Matrix</a></li>
<li><a href="http://apparchguide.codeplex.com/Wiki/View.aspx?title=Cheat%20Sheet%20-%20Data%20Access%20Technology%20Matrix&amp;referringTitle=Home">Cheat Sheet &#8211; Data Access Technology Matrix</a></li>
<li><a href="http://apparchguide.codeplex.com/Wiki/View.aspx?title=Cheat%20Sheet%20-%20Workflow%20Technology%20Matrix&amp;referringTitle=Home">Cheat Sheet &#8211; Workflow Technology Matrix</a></li>
<li><a href="http://apparchguide.codeplex.com/Wiki/View.aspx?title=Cheat%20Sheet%20-%20Integration%20Technology%20Matrix&amp;referringTitle=Home">Cheat Sheet &#8211; Integration Technology Matrix</a></li>
</ul>
<h3>
Errata Page<br />
</h3>
<ul>
<li><a href="http://apparchguide.codeplex.com/Wiki/View.aspx?title=Errata%20Page&amp;referringTitle=Home">Errata Page</a></li>
</ul>
]]></content:encoded>
			<wfw:commentRss>/index.php/architect/hardwareinfrastructuredesign/patterns-and-practices-application-archi/feed/</wfw:commentRss>
		<slash:comments>0</slash:comments>
		</item>
		<item>
		<title>5 Books Every Developer Should Read</title>
		<link>/index.php/desktopdev/mstech/5-books-every-developer-should-read/</link>
		<comments>/index.php/desktopdev/mstech/5-books-every-developer-should-read/#comments</comments>
		<pubDate>Sun, 20 Jul 2008 18:12:06 +0000</pubDate>
		<dc:creator><![CDATA[SQLDenis]]></dc:creator>
				<category><![CDATA[Microsoft Technologies]]></category>
		<category><![CDATA[architecture]]></category>
		<category><![CDATA[book]]></category>
		<category><![CDATA[design]]></category>
		<category><![CDATA[design patterns]]></category>
		<category><![CDATA[development]]></category>
		<category><![CDATA[programming]]></category>
		<category><![CDATA[toread]]></category>

		<guid isPermaLink="false">/index.php/2008/07/5-books-every-developer-should-read/</guid>
		<description><![CDATA[Which books should you read/buy when you are a programmer? I have listed 5 books that have helped me a lot. The books that I have chosen are not specific to any language although some of the books have examples in one language only. Design Patterns has examples in smalltalk and C++ but since the [&#8230;]]]></description>
				<content:encoded><![CDATA[<p>Which books should you read/buy when you are a programmer? I have listed 5 books that have helped me a lot. The books that I have chosen are not specific to any language although some of the books have examples in one language only. Design Patterns has examples in smalltalk and C++ but since the code is not very complicated you should have no problem converting it to your language of choice. I have included links to sample chapters for the books where I could find them. For some of the books I have also provided links to the author&#8217;s site; some of them have additional material so that you can look at that. I have also provided Amazon links so that you can read reviews. All of these books are rated 4 stars or higher. I have also provided alternate books if I felt that there were more choices for the same subject</p>
<p><strong><span style="font-size:130%;color:#cc0000;"><a href="http://www.amazon.com/exec/obidos/ASIN/0201633612/sql08-20/102-1687136-8876917?%5Fencoding=UTF8&amp;camp=1789&amp;link%5Fcode=xm2">Design Patterns</a></span></strong><br />
This book is one of the seminal books on patterns in software development. If you are a professional software developer, you must read this. If you are learning to write good software, this is a book that you will need to take on at some point</p>
<p>Design Patterns <a href="http://lci.cs.ubbcluj.ro/~raduking/Books/Design%20Patterns/">Site</a></p>
<p><span style="font-size:130%;color:#cc0000;"><strong><a href="http://www.amazon.com/exec/obidos/ASIN/0735619670/sql08-20/102-5735017-0910517?%5Fencoding=UTF8&amp;camp=1789&amp;link%5Fcode=xm2">Code Complete</a><br />
</strong></span>Code complete provides the reader with an insight into how<br />
to write good and easy to understand code. You will come away from this book with an appreciation of the thought process that should go into writing every class, routine, comment etc&#8230;</p>
<p>Software development steps are outlined clearly. Pitfalls to avoid are discussed and rewards obtained from good code is explained. The author tells you what you need to know and most importantly why you need this information. If one applies the ideas in this book, I think you will be a better programmer.</p>
<p>Sample Chapter: <a href="http://www.cc2e.com/docs/Chapter1-Welcome.pdf">Chapter 1: Welcome (pdf)</a><br />
Sample Chapter: <a href="http://www.cc2e.com/docs/Chapter5-Design.pdf">Chapter 5: Design in Construction (pdf)</a></p>
<p>Code Complete Author&#8217;s <a href="http://www.cc2e.com/">Site</a></p>
<p><span style="font-size:130%;color:#cc0000;"><strong><a href="http://www.amazon.com/exec/obidos/ASIN/020161622X/sql08-20/102-5735017-0910517?%5Fencoding=UTF8&amp;camp=1789&amp;link%5Fcode=xm2">The Pragmatic Programmer</a><br />
</strong></span>The pragmatic programmer provides invaluable advice to those who are just starting to program, and those who have been programing for years. By following the authors&#8217; simple rules you should have gained some programming wisdom that a programmer would realize in a decade.</p>
<p><strong>Extracts from the book</strong><br />
<a href="http://www.pragmaticprogrammer.com/ppbook/extracts/preface.html">The Preface</a><br />
<a href="http://www.pragmaticprogrammer.com/ppbook/extracts/no_broken_windows.html">Software Entropy</a><br />
<a href="http://www.pragmaticprogrammer.com/ppbook/extracts/coincidence.html">Programming by Coincidence</a><br />
<a href="http://www.pragmaticprogrammer.com/ppbook/extracts/wizards.html">Evil Wizards</a><br />
<a href="http://www.pragmaticprogrammer.com/ppbook/extracts/balance_resources.html">Balance Resources</a><br />
<a href="http://www.pragmaticprogrammer.com/ppbook/extracts/rule_list.html">Summary of the book&#8217;s tips</a><br />
<a href="http://www.pragmaticprogrammer.com/ppbook/extracts/contents.html">Contents</a></p>
<p><strong><a href="http://www.amazon.com/exec/obidos/ASIN/0201485672/sql08-20/102-5735017-0910517?%5Fencoding=UTF8&amp;camp=1789&amp;link%5Fcode=xm2"><span style="font-size:130%;">Refactoring</span> </a><br />
</strong>This book will change the way you think about and working with exisiting code. It&#8217;ll teach you that changing/modifying software is a fact of life. Martin Fowler does a awesome job of describing how to improve the design of existing code by performing various refactorings. Various design patterns are mentioned throughout the text, that is another reason why the design patterns book is so important</p>
<p>Sample Chapter: <a href="http://www.awprofessional.com/content/images/0201485672/samplechapter/chap4.html">Refactoring, a First Example</a></p>
<p><span style="font-size:130%;color:#cc0000;"><strong><a href="http://www.amazon.com/exec/obidos/ASIN/0321321278/sql08-20/102-5735017-0910517?%5Fencoding=UTF8&amp;camp=1789&amp;link%5Fcode=xm2">UML 2 and the Unified Process: Practical Object-Oriented Analysis and Design, 2nd Edition</a></strong></span><br />
UML has grown. A few years ago, when UML was just getting accepted, a book on how to use it would have been much thinner. But the successful broad uptake of UML led to its semantic notation being expanded. What the authors give us here is a thorough exposition of UML 2.0 and how to use it. It also goes into the Unified Process for running a project, and how this can be documented in UML</p>
<p>Sample Chapter: <a href="http://www.awprofessional.com/content/images/0321321278/samplechapter/arlow_ch09.pdf">Relationships </a></p>
<p>And here are a couple of more choices instead of the books above<br />
<a href="http://www.amazon.com/exec/obidos/ASIN/0135974445/sql08-20/102-1687136-8876917?%5Fencoding=UTF8&amp;camp=1789&amp;link%5Fcode=xm2">Agile Software Development, Principles, Patterns, and Practices</a><br />
<a href="http://www.amazon.com/exec/obidos/ASIN/0471197130/sql08-20/102-1687136-8876917?%5Fencoding=UTF8&amp;camp=1789&amp;link%5Fcode=xm2">AntiPatterns</a><br />
<a href="http://www.amazon.com/exec/obidos/ASIN/0596008740/sql08-20/102-1687136-8876917?%5Fencoding=UTF8&amp;camp=1789&amp;link%5Fcode=xm2">Prefactoring </a><br />
<a href="http://www.amazon.com/exec/obidos/ASIN/1932394613/sql08-20/102-5735017-0910517?%5Fencoding=UTF8&amp;camp=1789&amp;link%5Fcode=xm2">Ajax in Action</a><br />
<a href="http://www.amazon.com/exec/obidos/ASIN/0596007124/sql08-20/102-5735017-0910517?%5Fencoding=UTF8&amp;camp=1789&amp;link%5Fcode=xm2">Head First Design Patterns</a></p>
]]></content:encoded>
			<wfw:commentRss>/index.php/desktopdev/mstech/5-books-every-developer-should-read/feed/</wfw:commentRss>
		<slash:comments>7</slash:comments>
		</item>
		<item>
		<title>Danger in Design: Why bother with Architecture ?</title>
		<link>/index.php/architect/hardwareinfrastructuredesign/why-bother-with-architecture/</link>
		<comments>/index.php/architect/hardwareinfrastructuredesign/why-bother-with-architecture/#comments</comments>
		<pubDate>Mon, 30 Jun 2008 10:36:11 +0000</pubDate>
		<dc:creator><![CDATA[damber]]></dc:creator>
				<category><![CDATA[Designing Multi-Application Solutions]]></category>
		<category><![CDATA[Designing Software]]></category>
		<category><![CDATA[Enterprise Architecture]]></category>
		<category><![CDATA[Hardware and Infrastructure Design]]></category>
		<category><![CDATA[Information and Integration Architecture]]></category>
		<category><![CDATA[Introduction to Architecture and Design]]></category>
		<category><![CDATA[architecture]]></category>
		<category><![CDATA[methodologies]]></category>
		<category><![CDATA[rationale]]></category>

		<guid isPermaLink="false">/index.php/2008/06/why-bother-with-architecture/</guid>
		<description><![CDATA[Creativity is a wonderful thing. It&#8217;s also something different for each of us, which is why sometimes our perspectives on the world can produce conflicting ideas on what is the right way and the wrong way to do things. This is a very common facet of the IT world, in particular making computer software, solutions [&#8230;]]]></description>
				<content:encoded><![CDATA[<p>Creativity is a wonderful thing.  It&#8217;s also something different for each of us, which is why sometimes our perspectives on the world can produce conflicting ideas on what is the right way and the wrong way to do things.  This is a very common facet of the IT world, in particular making computer software, solutions and services.  </p>
<h1>We don&#8217;t need architects!  &#8230;Do we ?</h1>
<p>It&#8217;s important for us to remember that we develop software to &#8220;do something&#8221; that we want it to do. In which case we need to continually review the success of that software or solution by evaluating it&#8217;s ability to meet our needs.  But who gets to say what those needs are, and how well they are met?  More importantly, what makes IT solutions good or bad ?  Is it how big they are ? Or how easy to use they are ?  Or maybe how efficiently they operate ? Or what about how well measured and managed they are ?  Or even how easy it is to change the way they work ?  What about all of the above, and much more&#8230;?</p>
<p>Getting to a point where a) you understand what success looks like, and b) you have a solution that delivers that success, can be achieved by using an Architect to facilitate and coordinate the construction of a design and resulting solution.  But that&#8217;s not always what happens. Apart from the many varying definitions of an architect&#8217;s role (and the different types of architects.. e.g. Enterprise Architect, Solutions Architect, Application Architect, Technical Architect,etc), there&#8217;s also often a perception from developers that architects are generally away with the fairies, dreaming up blue sky designs that are just not grounded in reality or worthwhile bothering with.  Additionally, a lot of businesses (too many unfortunately), just don&#8217;t understand the value of using an architect&#8230; Why pay someone to design the solution, when you&#8217;ve got business systems analysts and developers that can work it out between themselves ?</p>
<p> </p>
<h1>Winchester Mystery House, San Jose, CA</h1>
<p>Why indeed&#8230;  well, I thought it may be useful to post a little analogy with the &#8216;real world&#8217; &#8211; where architects and builders have been working together for many years to produce wonderful (and not so wonderful) buildings.</p>
<p>Firstly, let me introduce the Winchester Mystery House, of the Winchester Guns family fame:</p>
<div class="image_block"><img src="/wp-content/uploads/blogs/Architect/images/winchesterhouse.png" alt="" title="" width="440" height="286" /></div>
<p></p>
<h2>Functionally Rich</h2>
<ul>
<li>160 Rooms</li>
<li>47 Fireplaces</li>
<li>17 Chimneys</li>
<li>6 kitchens</li>
<li>10,000 windows</li>
</ul>
<p></p>
<h2>State of the Art Technology (at the time)</h2>
<ul>
<li>Wall Insulation</li>
<li>Push button gas lights</li>
<li>No-clog sink patent</li>
<li>Intercoms</li>
<li>Modern Heating &amp; Sewage</li>
</ul>
<p></p>
<h2>Total Cost</h2>
<p style="font-size: 1em;">$5.5m (~<span style="font-weight:800;">$300m</span> today) over <span style="font-weight: 800;">38 years</span> (1884 &#8211; 1922)</p>
<p></p>
<h2>But&#8230; <span style="color:#ff0000;">No Interoperability</span></h2>
<ul>
<li>65 doors to blank walls</li>
<li>13 abandoned staircases</li>
<li>24 skylights in floors</li>
<li>Rooms &#8220;build-around&#8221; other rooms</li>
<li>Enough keys to fill 2 large buckets</li>
</ul>
<p></p>
<p>Ouch.</p>
<p></p>
<h2>Due to the division of labour</h2>
<ul>
<li>Builders: 147</li>
<li>Architects: <span style="font-weight:800;text-decoration:underline;">0</span></li>
</ul>
<p></p>
<h2>Sound Familiar ?</h2>
<p>We&#8217;ve all worked on a project with something like this.  Usually because the system wasn&#8217;t really &#8216;designed&#8217; it just &#8216;happened&#8217;.  Maybe if we spent a little more time designing, and a little less building things would work a little better.  I bet they had some very talented builders working on this too &#8211; but their perspective wasn&#8217;t to make a solid overall design, it was to simply get on and do what they were tasked with.. sound familiar ?  How often do users come to a technical forum and ask for a solution to their problem to be faced with answers like &#8220;you need to normalise your database&#8221; etc, to which they simply retort &#8220;that&#8217;s not part of this project&#8221; ?  Too many, but sadly understandably so.</p>
<p>
A favourite Project Manager quote is &#8220;Failing to Plan is Planning to Fail&#8221;.  And they are generally right &#8211; not having a consistent, well thought out and planned design can lead to very complicated and difficult to manage, change or even use software.  Most architects will have come across solutions or applications that weren&#8217;t &#8216;designed&#8217; and just evolved, and will know just how much of a problem those applications really are.  This is <a href="http://www.sciam.com/article.cfm?id=softwares-dirty-little-secret&amp;sc=rss">Software&#8217;s Dirty Little Secret</a> &#8211; many systems have just &#8220;happened&#8221; without real thought to the design of the software.  And for that matter, haven&#8217;t thought about the application as part of a composite solution either &#8211; this is actually quite rare, even today with all the SOA hype of the last few years.
</p>
<h3>The Architect&#8217;s hand</h3>
<p>
Sometimes it might seem strange to developers that an architect wants to make a project use standards compliant technologies, standardised, re-usable or existing components, such as a Business Rules Engine, Reporting &amp; BI, Service Bus, Messaging Gateway, Portlets, etc &#8211; but this is what architecture is all about &#8211; not thinking about the one, single application or issue, but thinking about it&#8217;s co-existence in a much bigger world &#8211; not just the here and now functional requirements, but tomorrows new direction and demands.  Simplifying and standardising, Rationalising and Re-Using, Conceptualising and Componentising&#8230; the best architectures are easily understood, simple solutions that achieve a kind of elegance in concept and practicality in implementation.
</p>
<p>
There are several methodologies to use for developing an architecture &#8211; personally I use TOGAF which is more for generalist Enterprise &amp; Solutions Architecture development but the <acronym title="Architecture Development Methodology">ADM</acronym> can be applied in concept to designing most solutions/systems/applications.
</p>
<h2>So we do need to &#8220;do architecture&#8221; then?</h2>
<p>In short, Yes.  But how you actually &#8220;do architecture&#8221; depends greatly on the context.  There is a simple lesson here &#8211; architecture is all about simplifying and standardising the problem domain to provide an efficient, re-usable and consistent answer.  The important difference between a formal &#8220;architect&#8221; and a &#8220;builder&#8221; is not of technical expertise, but of perspective, so don&#8217;t assume that your most expert Java Programmer is naturally the architect to your solutions.  This doesn&#8217;t mean that an architect of all types shouldn&#8217;t possess good technical abilities and experience.</p>
<p>There is a nice <a href="http://msdn.microsoft.com/en-us/arcjournal/cc505968.aspx">overview of the different types of Architects</a> at the Microsoft Architecture Journal (which is often surprisingly not MS biased) written by IASA Sweden, however this misses out the technical/infrastructure architect from their Roles diagram, which is a key architect in any IT implementation.  Also, another article on the Architect Journal talks about <a href="http://msdn.microsoft.com/en-us/arcjournal/cc505974.aspx">what an architect actually is</a>, however is a little Software Architect focused.  Both interesting reads, especially for non-architects to understand how to &#8216;use&#8217; an architect (well, work with one effectively at least <img src="https://s.w.org/images/core/emoji/2/72x72/1f609.png" alt="😉" class="wp-smiley" style="height: 1em; max-height: 1em;" /> ). </p>
<h3>Some Exceptions..</h3>
<p>There are times when a formal architecture process is more of a hindrance than a help, and that is in R &amp; D contexts where rapid prototyping and proof of concept solutions are all about unrestricted creativity &#8211; in these cases architecture experience and knowledge is a good backdrop to help organise and focus ideas and channel that creativity into creating something unique.  (But&#8230; Remember that this is not production ready, it is a prototype in need of architectural design to create a production capable solution.  This is where too many rapid prototyping approaches get a bad name.)</p>
<p>
One thing I will write about soon is the risk of &#8216;over-designing&#8217; a solution, because sometimes it is easy to get carried away with design-pattern addiction and framework-itis and actually miss the whole point of the exercise.  Doing &#8216;too much&#8217; architecture can be as bad, and even worse than doing none.
</p>
<h2>And Finally&#8230;</h2>
<p>So&#8230; Yes &#8211; Sometimes it&#8217;s nice to just set out in your car and drive wherever the wind takes you until the fuel runs out.  But other times, and almost always when it is on &#8216;business time&#8217;, wandering aimlessly in the hope of finding something that might be useful is just not acceptable.  Having that vision, aspiration, direction and roadmap an architecture can bring to your project might seem like a chore and &#8220;impossible&#8221; to achieve to some people.. but how else will you get there, without ever actively and knowingly moving toward it ? Chance ?  Good Luck with that&#8230;</p>
<p>So, the next time you think about just winging it, and not bothering with architecture, just think about your software product as your own house that you wish to build &#8211; would you really just start building ?  Or even just draw up your own plans on visio and ask the builders to &#8216;sort it out&#8217; ?  </p>
<p><em>N.B. In the Winchester House example, strange as it may seem, the design actually met the brief &#8211; the needs of the owner weren&#8217;t really to design an architecturally great building, but just to have something creative to do.. it doesn&#8217;t matter that it wasn&#8217;t consistent, or standardised or even usable &#8211; it was the pleasure of doing that was needed, not the objective of greatness in form and function.  But have a think about that&#8230; when was the last time your boss suggested you design something for the fun of it, at the company&#8217;s expense, regardless of whether it results in some sort of throw-away chimera ? </em></p>
]]></content:encoded>
			<wfw:commentRss>/index.php/architect/hardwareinfrastructuredesign/why-bother-with-architecture/feed/</wfw:commentRss>
		<slash:comments>3</slash:comments>
		</item>
	</channel>
</rss>
