<?xml version="1.0" encoding="UTF-8"?><rss version="2.0"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:atom="http://www.w3.org/2005/Atom"
	xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
	xmlns:slash="http://purl.org/rss/1.0/modules/slash/"
	>

<channel>
	<title>datalength &#8211; LessthanDot</title>
	<atom:link href="/index.php/tag/datalength/feed/" rel="self" type="application/rss+xml" />
	<link>/</link>
	<description>A Technical Community for IT Professionals</description>
	<lastBuildDate>Sat, 09 Mar 2019 12:50:36 +0000</lastBuildDate>
	<language>en-US</language>
	<sy:updatePeriod>hourly</sy:updatePeriod>
	<sy:updateFrequency>1</sy:updateFrequency>
	<generator>https://wordpress.org/?v=4.6.1</generator>
	<item>
		<title>Misconceptions about unicode in SQL Server</title>
		<link>/index.php/datamgmt/datadesign/misconceptions-about-unicode-in-sql-serv/</link>
		<comments>/index.php/datamgmt/datadesign/misconceptions-about-unicode-in-sql-serv/#comments</comments>
		<pubDate>Sat, 07 Aug 2010 16:17:37 +0000</pubDate>
		<dc:creator><![CDATA[SQLDenis]]></dc:creator>
				<category><![CDATA[Data Modelling and Design]]></category>
		<category><![CDATA[datalength]]></category>
		<category><![CDATA[len]]></category>
		<category><![CDATA[myth]]></category>
		<category><![CDATA[nvarchar]]></category>
		<category><![CDATA[sql server]]></category>
		<category><![CDATA[sql server 2005]]></category>
		<category><![CDATA[sql server 2008]]></category>
		<category><![CDATA[unicode]]></category>

		<guid isPermaLink="false">/index.php/2010/08/misconceptions-about-unicode-in-sql-serv/</guid>
		<description><![CDATA[I was browsing around last night on the internet and a person wanted to know what data type to use to store a course name. Here is an answer he got: I would recommend nvarchar or varchar for the name. Use nvarchar if you anticipate there ever being a point in the future that you [&#8230;]]]></description>
				<content:encoded><![CDATA[<p>I was browsing around last night on the internet and a person wanted to know what data type to use to store a course name. Here is an answer he got:</p>
<blockquote><p>I would recommend nvarchar or varchar for the name. Use nvarchar if you anticipate there ever being a point in the future that you will need to support foreign languages that might contain unicode characters that are not supported by varchar.<strong> I would look at the longest name I anticipate needing, double it&#8217;s length and then round up to the nearest 50. So if &#8220;Introduction to Partial Differential Equations&#8221; at 48 then I would make it varchar(100)</strong></p></blockquote>
<p>Okay so that part in bold is completely wrong, Nvarchar uses 2 bytes per character for storage but you do not specify that. So if you want to store the character &#25991; you need nchar(1) not nchar(2).</p>
<p>Run this and you will see the character &#25991; in the output<br />
<strong>
<pre>declare @n nchar(1)
set @n = N'æ–‡' 

select @n</pre>
<p></strong></p>
<p><em>And no, there is no mistake, the reason I didn&#8217;t use the codeblock that I use for the rest of this post is that the &#25991; character gets changed to <code>&amp;#25991 so the SQL would be incorrect</code></em></p>
<p>Also be aware that you need to have the N in front of the string, this tells SQL Server that it has to treat it as unicode. If you do this &#8216;&#25991;&#8217; instead of N&#8217;&#25991;&#8217; you will get a question mark in the output.</p>
<p>What if you wanted to store over 4000 characters in a nvarchar? Varchar goes up to 8000 characters but nvarchar only goes up to 4000 characters, take a look and run the statement below.</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
</pre></td><td class="de1"><pre class="de1"><span class="kw1">DECLARE</span> @n <span class="kw1">NVARCHAR</span><span class="br0">&#40;</span><span class="nu0">4001</span><span class="br0">&#41;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">DECLARE @n NVARCHAR(4001)</pre></div></div>

<p>Below is the error that you will get.<br />
<em>Msg 2717, Level 16, State 2, Line 1<br />
The size (4001) given to the parameter &#8216;@n&#8217; exceeds the maximum allowed (4000).</em></p>
<p>But there is hope, you can use NVARCHAR(max) to store up to 2GB of data, so about a billion characters or so</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
</pre></td><td class="de1"><pre class="de1"><span class="kw1">DECLARE</span> @n <span class="kw1">NVARCHAR</span><span class="br0">&#40;</span><span class="kw2">max</span><span class="br0">&#41;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">DECLARE @n NVARCHAR(max)</pre></div></div>

<p>One more thing to be aware of when using unicode is that LEN will give you the number of characters but DATALENGTH will give you the storage required to store the character(s)</p>
<p>Run this</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
</pre></td><td class="de1"><pre class="de1"><span class="kw1">SELECT</span> <span class="kw2">LEN</span><span class="br0">&#40;</span>N<span class="st0">'1'</span><span class="br0">&#41;</span>,DATALENGTH<span class="br0">&#40;</span>N<span class="st0">'1'</span><span class="br0">&#41;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">SELECT LEN(N'1'),DATALENGTH(N'1')</pre></div></div>

<p>LEN returns 1 and DATALENGTH returns 2. To learn more about LEN and DATALENGTH, take a look at the <a href="/index.php/DataMgmt/DBProgramming/the-differences-between-len-and-dataleng">The differences between LEN and DATALENGTH in SQL Server</a> post I wrote a while back.</p>
<p>That is all for this short weekend post.</p>
<p>*** <strong>Remember, if you have a SQL related question, try our <a href="http://forum.lessthandot.com/viewforum.php?f=17">Microsoft SQL Server Programming</a> forum or our <a href="http://forum.lessthandot.com/viewforum.php?f=22">Microsoft SQL Server Admin</a> forum</strong><ins></ins></p>
]]></content:encoded>
			<wfw:commentRss>/index.php/datamgmt/datadesign/misconceptions-about-unicode-in-sql-serv/feed/</wfw:commentRss>
		<slash:comments>2</slash:comments>
		</item>
		<item>
		<title>The differences between LEN and DATALENGTH in SQL Server</title>
		<link>/index.php/datamgmt/dbprogramming/the-differences-between-len-and-dataleng/</link>
		<comments>/index.php/datamgmt/dbprogramming/the-differences-between-len-and-dataleng/#comments</comments>
		<pubDate>Mon, 20 Jul 2009 13:01:36 +0000</pubDate>
		<dc:creator><![CDATA[SQLDenis]]></dc:creator>
				<category><![CDATA[Database Programming]]></category>
		<category><![CDATA[Microsoft SQL Server]]></category>
		<category><![CDATA[datalength]]></category>
		<category><![CDATA[gotcha]]></category>
		<category><![CDATA[len]]></category>
		<category><![CDATA[t-sql]]></category>

		<guid isPermaLink="false">/index.php/2009/07/the-differences-between-len-and-dataleng/</guid>
		<description><![CDATA[The differences between LEN and DATALENGTH in SQL Server! I have seen a bunch of questions about this recently and decided to do a little post to clear up the confusion. First let&#8217;s take a look what Books On Line has to say about these two functions LEN Returns the number of characters, rather than [&#8230;]]]></description>
				<content:encoded><![CDATA[<p>The differences between LEN and DATALENGTH in SQL Server!<br />
I have seen a bunch of questions about this recently and decided to do a little post to clear up the confusion.<br />
First let&#8217;s take a look what Books On Line has to say about these two functions</p>
<p><strong>LEN</strong><br />
Returns the number of characters, rather than the number of bytes, of the given string expression, excluding trailing blanks.</p>
<p><strong>DATALENGTH</strong><br />
Returns the number of bytes used to represent any expression.</p>
<p>So what does that mean? It means that the LEN function will first right trim the value and then give you a count of the charaters, the DATALENGTH function on the other hand does not right trim the value and gives you the storage space required for the characters.</p>
<p>Take a look at this example</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
</pre></td><td class="de1"><pre class="de1"><span class="kw1">declare</span> @v <span class="kw1">nchar</span><span class="br0">&#40;</span><span class="nu0">5</span><span class="br0">&#41;</span>
<span class="kw1">select</span> @v <span class="sy0">=</span><span class="st0">'ABC &nbsp;'</span>
&nbsp;
&nbsp;
<span class="kw1">select</span> <span class="kw2">len</span><span class="br0">&#40;</span>@v<span class="br0">&#41;</span>,datalength<span class="br0">&#40;</span>@v<span class="br0">&#41;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">declare @v nchar(5)
select @v ='ABC  '


select len(@v),datalength(@v)</pre></div></div>

<p>The output for len is 3 while the output for datalength =10. The reason that datalength returns the value 10 is because nvarchar uses 2 bytes to store 1 character by using unicode while varchar is using ascii which requires 1 byte per charaters</p>
<p>Let&#8217;s take a look at some more data, first create this table</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
</pre></td><td class="de1"><pre class="de1"><span class="kw1">create</span> <span class="kw1">table</span> #TeslLen <span class="br0">&#40;</span> CharCol <span class="kw1">char</span><span class="br0">&#40;</span><span class="nu0">5</span><span class="br0">&#41;</span>, 
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; VarCharCol <span class="kw1">varchar</span><span class="br0">&#40;</span><span class="nu0">5</span><span class="br0">&#41;</span>,
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; NCharCol <span class="kw1">nchar</span><span class="br0">&#40;</span><span class="nu0">5</span><span class="br0">&#41;</span>, 
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; NVarCharCol <span class="kw1">nvarchar</span><span class="br0">&#40;</span><span class="nu0">5</span><span class="br0">&#41;</span><span class="br0">&#41;</span>
&nbsp;
&nbsp;
<span class="kw1">insert</span> #TeslLen <span class="kw1">values</span><span class="br0">&#40;</span><span class="st0">'A'</span>,<span class="st0">'A'</span>,<span class="st0">'A'</span>,<span class="st0">'A'</span><span class="br0">&#41;</span>
<span class="kw1">insert</span> #TeslLen <span class="kw1">values</span><span class="br0">&#40;</span><span class="st0">'AB'</span>,<span class="st0">'AB'</span>,<span class="st0">'AB'</span>,<span class="st0">'AB'</span><span class="br0">&#41;</span>
<span class="kw1">insert</span> #TeslLen <span class="kw1">values</span><span class="br0">&#40;</span><span class="st0">'ABC'</span>,<span class="st0">'ABC'</span>,<span class="st0">'ABC'</span>,<span class="st0">'ABC'</span><span class="br0">&#41;</span>
<span class="kw1">insert</span> #TeslLen <span class="kw1">values</span><span class="br0">&#40;</span><span class="st0">'ABCD'</span>,<span class="st0">'ABCD'</span>,<span class="st0">'ABCD'</span>,<span class="st0">'ABCD'</span><span class="br0">&#41;</span>
<span class="kw1">insert</span> #TeslLen <span class="kw1">values</span><span class="br0">&#40;</span><span class="st0">'ABCDE'</span>,<span class="st0">'ABCDE'</span>,<span class="st0">'ABCDE'</span>,<span class="st0">'ABCDE'</span><span class="br0">&#41;</span>
<span class="kw1">insert</span> #TeslLen <span class="kw1">values</span><span class="br0">&#40;</span><span class="st0">' '</span>,<span class="st0">' '</span>,<span class="st0">' '</span>,<span class="st0">' '</span><span class="br0">&#41;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">create table #TeslLen (	CharCol char(5), 
			VarCharCol varchar(5),
			NCharCol nchar(5), 
			NVarCharCol nvarchar(5))


insert #TeslLen values('A','A','A','A')
insert #TeslLen values('AB','AB','AB','AB')
insert #TeslLen values('ABC','ABC','ABC','ABC')
insert #TeslLen values('ABCD','ABCD','ABCD','ABCD')
insert #TeslLen values('ABCDE','ABCDE','ABCDE','ABCDE')
insert #TeslLen values(' ',' ',' ',' ')</pre></div></div>

<p>Now run the following query</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
</pre></td><td class="de1"><pre class="de1"><span class="kw1">select</span> CharCol <span class="kw1">as</span> <span class="kw1">Value</span>,<span class="kw2">len</span><span class="br0">&#40;</span>CharCol<span class="br0">&#41;</span> <span class="kw1">as</span> LenChar,DATALENGTH<span class="br0">&#40;</span>CharCol<span class="br0">&#41;</span> <span class="kw1">as</span> DLenChar,
&nbsp; &nbsp; <span class="kw2">len</span><span class="br0">&#40;</span>VarCharCol<span class="br0">&#41;</span> <span class="kw1">as</span> LenVarChar,DATALENGTH<span class="br0">&#40;</span>VarCharCol<span class="br0">&#41;</span><span class="kw1">as</span> DLenVarChar,
&nbsp; &nbsp; <span class="kw2">len</span><span class="br0">&#40;</span>NCharCol<span class="br0">&#41;</span> <span class="kw1">as</span> LenNChar,DATALENGTH<span class="br0">&#40;</span>NCharCol<span class="br0">&#41;</span> <span class="kw1">as</span> DLenNChar,
&nbsp; &nbsp; <span class="kw2">len</span><span class="br0">&#40;</span>NVarCharCol<span class="br0">&#41;</span> <span class="kw1">as</span> LenNVarChar,DATALENGTH<span class="br0">&#40;</span>NVarCharCol<span class="br0">&#41;</span> <span class="kw1">as</span> DLenNVarChar
<span class="kw1">from</span> #TeslLen</pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">select CharCol as Value,len(CharCol) as LenChar,DATALENGTH(CharCol) as DLenChar,
	len(VarCharCol) as LenVarChar,DATALENGTH(VarCharCol)as DLenVarChar,
	len(NCharCol) as LenNChar,DATALENGTH(NCharCol) as DLenNChar,
	len(NVarCharCol) as LenNVarChar,DATALENGTH(NVarCharCol) as DLenNVarChar
from #TeslLen</pre></div></div>

<p>Here is the output for all the columns with LEN and DATALENGTH</p>
<table border="1" cellspacing ="1" cellpadding ="1">
<tr>
<td>Value	</td>
<td>LenChar</td>
<td>	DatalengthChar	</td>
<td>LenVarChar</td>
<td>	DatalengthVarChar	</td>
<td>LenNChar	</td>
<td>DatalengthNChar</td>
<td>	LenNVarChar</td>
<td>	DatalengthNVarChar</td>
</tr>
<tr>
<td>A</td>
<td>    	1</td>
<td>	5</td>
<td>	1</td>
<td>	1</td>
<td>	1</td>
<td>	10</td>
<td>	1</td>
<td>	2</td>
</tr>
<tr>
<td>AB</td>
<td>   	2</td>
<td>	5</td>
<td>	2</td>
<td>	2</td>
<td>	2</td>
<td>	10</td>
<td>	2</td>
<td>	4</td>
</tr>
<tr>
<td>ABC</td>
<td>  	3</td>
<td>	5</td>
<td>	3</td>
<td>	3</td>
<td>	3</td>
<td>	10</td>
<td>	3</td>
<td>	6</td>
</tr>
<tr>
<td>ABCD</td>
<td> 	4</td>
<td>	5</td>
<td>	4</td>
<td>	4</td>
<td>	4</td>
<td>	10</td>
<td>	4</td>
<td>	8</td>
</tr>
<tr>
<td>ABCDE</td>
<td>	5</td>
<td>	5</td>
<td>	5</td>
<td>	5</td>
<td>	5</td>
<td>	10</td>
<td>	5</td>
<td>	10</td>
</tr>
<tr>
<td>  </td>
<td>   	0</td>
<td>	5</td>
<td>	0</td>
<td>	1</td>
<td>	0</td>
<td>	10</td>
<td>	0</td>
<td>	2</td>
</tr>
</table>
<p></p>
<p>*** <strong>If you have a SQL related question try our <a href="http://forum.lessthandot.com/viewforum.php?f=17">Microsoft SQL Server Programming</a> forum or our <a href="http://forum.lessthandot.com/viewforum.php?f=22">Microsoft SQL Server Admin</a> forum</strong><ins></ins></p>
]]></content:encoded>
			<wfw:commentRss>/index.php/datamgmt/dbprogramming/the-differences-between-len-and-dataleng/feed/</wfw:commentRss>
		<slash:comments>8</slash:comments>
		</item>
	</channel>
</rss>
