<?xml version="1.0" encoding="UTF-8"?><rss version="2.0"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:atom="http://www.w3.org/2005/Atom"
	xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
	xmlns:slash="http://purl.org/rss/1.0/modules/slash/"
	>

<channel>
	<title>simulation &#8211; LessthanDot</title>
	<atom:link href="/index.php/tag/simulation/feed/" rel="self" type="application/rss+xml" />
	<link>/</link>
	<description>A Technical Community for IT Professionals</description>
	<lastBuildDate>Sat, 09 Mar 2019 12:50:36 +0000</lastBuildDate>
	<language>en-US</language>
	<sy:updatePeriod>hourly</sy:updatePeriod>
	<sy:updateFrequency>1</sy:updateFrequency>
	<generator>https://wordpress.org/?v=4.6.1</generator>
	<item>
		<title>Scalability is Easy! (To Get Wrong)</title>
		<link>/index.php/architect/designingsoftware/scalability-is-easy-to-get/</link>
		<comments>/index.php/architect/designingsoftware/scalability-is-easy-to-get/#comments</comments>
		<pubDate>Wed, 05 Dec 2012 12:50:00 +0000</pubDate>
		<dc:creator><![CDATA[Eli Weinstock-Herman (tarwn)]]></dc:creator>
				<category><![CDATA[Designing Software]]></category>
		<category><![CDATA[parallel processing]]></category>
		<category><![CDATA[scalability]]></category>
		<category><![CDATA[simulation]]></category>

		<guid isPermaLink="false">/index.php/2012/12/scalability-is-easy-to-get/</guid>
		<description><![CDATA[Scalability is easy, provided you don't need it to work.

Probably the number one failure of system scaling is when people dive right in and start building. No baselines, limited measurements, no analysis, just a hypothesis and a whole lot of late nights tweaking the system.]]></description>
				<content:encoded><![CDATA[<p>Scalability is easy, provided you don&#8217;t need it to work.</p>
<p>Probably the number one failure of system scaling is when people dive right in and start building. No baselines, limited measurements, no analysis, just a hypothesis and a whole lot of late nights tweaking the system. With extra complexity comes extra costs, from the initial development through more expensive maintenance. Scale poorly and not only do we take on those extra complexity costs, but also the more obvious additional costs of the actual implementation (new servers, more resources, etc).</p>
<h2>The Somewhat Contrived Example</h2>
<p>Recently I&#8217;ve been working on a system to simulate parallelizing workloads, specifically workloads that depend on external resources with rate or load thresholds. Let&#8217;s use it to look at a somewhat contrived example.</p>
<div style="background-color: #eeeeee; padding: 1em; margin: 1em;">
Note: For this post, the simulated &#8220;service&#8221; has a 100 request/minute limit and throttles individual clients for 15 second windows. Individual operations consist of 50ms of local processing and a single service request that has 50ms of latency and 100 ms for processing and response time. Similar results can be achieved with more realistic batch sizes and rates, the smaller values just allow me to more quickly produce samples for the blog post.
</div>
<p>So the backstory is that I have a batch process that is running more and more slowly as we take on larger and more frequent workloads. </p>
<p>I start by testing the batch process locally so I can see how slow it is before I make changes.</p>
<div style="text-align: center; font-size: .8em; color: #666666">
	<img src="http://tiernok.com/LTDBlog/Scalability/Graph_01.png" alt="Graph - 1 Client, 60 Requests, 100rpm Limit" /><br />
	1 Client, 60 Requests, 100rpm
</div>
<p>Locally it runs pretty quickly, but I&#8217;m betting that parallelizing the process will give me a significant increase in speed.</p>
<div style="text-align: center; font-size: .8em; color: #666666">
	<img src="http://tiernok.com/LTDBlog/Scalability/Graph_02.png" alt="Graph - 1 Client vs 30 Clients, 60 Requests, 100rpm Limit" /><br />
	1 Client vs 30 Clients, 60 Requests, 100rpm
</div>
<p>Look how well that performance improved, I achieved better than a 6x improvement in performance. My job here is done. </p>
<p>Except when I try to push this to production, I start getting a lot of errors. </p>
<div style="text-align: center; font-size: .8em; color: #666666">
	<img src="http://tiernok.com/LTDBlog/Scalability/Graph_03.png" alt="Graph - 30 Clients, 300 Requests, 100rpm - 67% Failure Rate" /><br />
	30 Clients, 300 Requests, 100rpm &#8211; 67% Failure Rate
</div>
<p>As it turns out, the external API my process saves the data to has a rate limit. When I exceed the allowable rate, I&#8217;m throttled for a short period of time. Any requests I make during that throttle period are returned with errors indicating I&#8217;m throttled.</p>
<p>Hmm. Luckily there are a number of common patterns available to retry these types of failures. I&#8217;ll add an exponential back-off retry pattern so that when I get throttled my service will retry failed requests at slower rates until the service un-throttles me. While I&#8217;ve found plenty of code examples online, none of them seem to have recommendations, so I&#8217;ll just use one of the sample settings they provide.</p>
<div style="text-align: center; font-size: .8em; color: #666666">
	<img src="http://tiernok.com/LTDBlog/Scalability/Graph_04.png" alt="Graph - 30 Clients, 300 Requests, 100rpm, Retry Policy #1 - 7% Failure Rate" /><br />
	30 Clients, 300 Requests, 100rpm, Retry Policy #1 &#8211; 7% Failure Rate
</div>
<p>Hmm, better. My failure rate has gone way down. What if I tweak the values?</p>
<div style="text-align: center; font-size: .8em; color: #666666">
	<img src="http://tiernok.com/LTDBlog/Scalability/Graph_05.png" alt="Graph - 30 Clients, 300 Requests, 100rpm, Retry Policy #2 - 29% Failure Rate" /><br />
	30 Clients, 300 Requests, 100rpm, Retry Policy #2 &#8211; 29% Failure Rate
</div>
<p>Oh, that was bad, I obviously was on the right track before. What if I just extend the retry amount a bit to try and knock out the last bit of errors. </p>
<div style="text-align: center; font-size: .8em; color: #666666">
	<img src="http://tiernok.com/LTDBlog/Scalability/Graph_06.png" alt="Graph - 30 Clients, 300 Requests, 100rpm, Retry Policy #1B - 0% Failure Rate" /><br />
	30 Clients, 300 Requests, 100rpm, Retry Policy #1B &#8211; 0% Failure Rate
</div>
<p>Ok, perfect. Now I have a system that is more than 6 times faster than the original, can be easily extended by throwing more workers at it, and is actually in a better position to handle occasional slow downs from my 3rd-party service. </p>
<p>Success!</p>
<h2>Where I Went Wrong</h2>
<p>Ok, so maybe not. Over the course of my little story I went wrong in a number of places. Even though this was a contrived example, I&#8217;ve watched very similar scenarios play out in a number of different organizations with real systems.</p>
<h3>The Bottleneck</h3>
<p>The first and most critical problem was that I didn&#8217;t actually locate the bottleneck in my process, I simply tried to do more of the same. The <a href="http://en.wikipedia.org/wiki/Theory_of_constraints" title="Theory of Constraints at Wikipedia">Theory of Constraints</a> tells us that we can improve the rate of a process by identifying and exploiting the constraints. </p>
<p>In this system, the constraint looked like it was the sequential execution of the tasks, but in reality the constraint was the time it took to call the 3rd-party API. Had we identified that bottleneck before starting, we could have approached the problem differently.</p>
<div style="text-align: center; font-size: .8em; color: #666666">
	<img src="http://tiernok.com/LTDBlog/Scalability/ProcessChange.png" alt="Process - Alternative Design" /><br />
	Process &#8211; Alternative Design
</div>
<p>Rather than the parallel complexity, we can modify how the tasks are executed to try and take advantage of knowing where our bottleneck is. If the API allowed us to submit several requests in a batch, this redesign would net us several orders of magnitude improvement. Another option would be to run the results of the local processing into a queue and submit requests from there at a slow trickle, using only a percentage of our API limit so as not to disrupt any other real-time operations or batch processing the system supports. Another option we could take advantage of is not starting any of our expensive 3rd-party communications until we know that the entire job can actually be processed successfully through our local process.</p>
<p>Identifying the constraint unlocks the ability to turn the problem on it&#8217;s head and achieve higher improvements, typically by orders of magnitude.</p>
<h3>The Math Error</h3>
<p>I concluded the scenario above by assuming I had found a good solution that also had a lot of headroom. Unfortunately what I actually did was find the ceiling. I have tuned the retry policy to 30 parallel systems, increasing that number could easily destabilize it further and cause more errors or delays. The headroom is, in fact, an illusion.</p>
<h3>The Evolving Assumption</h3>
<p>Somewhere along the way I found 30 clients to be a great improvement and didn&#8217;t test other options. Then I made some assumptions about a retry policy. Then I tweaked that retry policy until the error rate disappeared. My assumptions made sense at the time, so I never questioned where they were leading me.</p>
<p>When I found a winning combination for my retry rate, I didn&#8217;t realize I was missing other, better options:</p>
<div style="text-align: center; font-size: .8em; color: #666666">
	<img src="http://tiernok.com/LTDBlog/Scalability/Graph_07.png" alt="Graph - 30 Clients, 300 Requests, 100rpm, Retry Policy #1B vs 4A-C" /><br />
	30 Clients, 300 Requests, 100rpm, Retry Policy #1B vs 4A-C
</div>
<p>What&#8217;s worse, is that trail of assumptions along the way was never re-validated. I concluded with a 6.5x improvement, but is that still accurate?</p>
<div style="text-align: center; font-size: .8em; color: #666666">
	<img src="http://tiernok.com/LTDBlog/Scalability/Graph_08.png" alt="Graph - 1-50 Clients, 300 Requests, 100rpm, Retry Policy #1B" /><br />
	1-50 Clients, 300 Requests, 100rpm, Retry Policy #1B
</div>
<p>When I run the same settings on a range of 1 to 50 clients, we can see that I lost that original 6x improvement along the way. All I have managed to do is add complexity and some very explicit costs for those additional systems.</p>
<p><i>Note: What happened to retry policy #3? Well originally 1B was actually named 3, then I decided to update the name halfway through the post but was too lazy to update all of the completed images. Oh well.</i></p>
<h2>Scaling the Wrong Thing</h2>
<p>This post used fairly small numbers, had I applied a larger workload, higher throughput rates, different throttling windows, the whole problem would have turned out differently. </p>
<p>When we set out to make a system scale, we need to identify the real scenarios we are trying to scale for and the bottlenecks that stand in our way. Blindly performance tuning can look like an improvement, but is really just a poor short term investment that often entrenches the current performance problems even more deeply. There are a lot of questions that should be asked about the intended result, responsiveness fo the system, other operations it has to support while under load, potential overlap of that load, the type of load, etc. The patterns for one system may have relevance for another, but could just as easily be completely incorrect.</p>
<p>How hard it is to scale a system is going to depend on a lot of factors. Getting it wrong just happens to be the easiest option.</p>
]]></content:encoded>
			<wfw:commentRss>/index.php/architect/designingsoftware/scalability-is-easy-to-get/feed/</wfw:commentRss>
		<slash:comments>4</slash:comments>
		</item>
		<item>
		<title>Accurately Simulating Movement of a Tracked Vehicle in 2D Space</title>
		<link>/index.php/webdev/uidevelopment/accurately-simulating-movement-of-a-trac/</link>
		<comments>/index.php/webdev/uidevelopment/accurately-simulating-movement-of-a-trac/#comments</comments>
		<pubDate>Mon, 20 Sep 2010 16:41:38 +0000</pubDate>
		<dc:creator><![CDATA[Rob Earl]]></dc:creator>
				<category><![CDATA[UI Development]]></category>
		<category><![CDATA[c#]]></category>
		<category><![CDATA[java]]></category>
		<category><![CDATA[math]]></category>
		<category><![CDATA[simulation]]></category>
		<category><![CDATA[tracking]]></category>

		<guid isPermaLink="false">/index.php/2010/09/accurately-simulating-movement-of-a-trac/</guid>
		<description><![CDATA[As part of a simulation I've been developing I recently had to decide how to model movement of vehicles within a 2D space. To keep things simple I settled on a tracked vehicle. Each time the simulation updates I calculate how much the vehicle rotates an&#8230;]]></description>
				<content:encoded><![CDATA[<p><img align="right" src="/wp-content/uploads/users/robearl/TankMovement-Simplified.png" alt="Basic Tracked Movement" title="" />As part of a simulation I&#8217;ve been developing I recently had to decide how to model movement of vehicles within a 2D space. To keep things simple I settled on a tracked vehicle. Each time the simulation updates I calculate how much the vehicle rotates and how far it moves based on the speed of it&#8217;s tracks. From there I calculate the new coordinates for redrawing the vehicle.</p>
<p>Knowing the current location (<strong>x,y</strong>) and heading (<strong>h</strong>) I initially adopted a simplified way to calculate the rotation (<strong>g</strong>) and speed (<strong>s</strong>) based on the speed of the vehicle&#8217;s tracks (<strong>T<span class="MT_smaller">1</span></strong> and <strong>T<span class="MT_smaller">2</span></strong>) (Figure 1). With these variables I create a right angled triangle and use <a href="http://www.mathsisfun.com/sine-cosine-tangent.html">maths</a> to calculate how far the vehicle moves in the x and y coordinates in order to find it&#8217;s finishing location (<strong>x&#8217;,y&#8217;</strong>).</p>
<pre>x' = x + s * sin(h + g)
y' = y + s * cos(h + g)</pre>
<p>This method is a reasonable approximation for the movement of a tracked vehicle: It&#8217;ll move faster when you expect it to and it&#8217;ll turn faster when you expect it to. However, as a <a href="http://yourdaysarenumbered.co.uk/">stand up mathematician</a> pointed out to me, it&#8217;s not an accurate representation of what should actually be happening. I had also observed vehicles having problems turning to face something close to and behind them resulting in endless circling of the target.</p>
<h1>Improving Accuracy</h1>
<p>A more accurate representation is the vehicle travelling a distance, <strong>s</strong>, along the circumference of a circle who&#8217;s radius can be calculated based on <strong>T<span class="MT_smaller">1</span></strong>, <strong>T<span class="MT_smaller">2</span></strong> and the distance between the tracks (<strong>2d</strong>) (Figure 2).</p>
<p><img align="right" src="/wp-content/uploads/users/robearl/TankMovement-Complex-bare3.png" alt="Figure 2: More Accurate Movement" title="" />If <strong>T<span class="MT_smaller">2</span></strong> traces a circle of radius <strong>r</strong> then <strong>T<span class="MT_smaller">1</span></strong> traces a circle of radius <strong>r + 2d</strong>. Since <strong>d</strong> is static we can say that the ratio of <strong>T<span class="MT_smaller">1</span></strong> to <strong>T<span class="MT_smaller">2</span></strong> is proportional to the ratio of the radii. This gives us the following equation to solve:</p>
<pre>T1   r + 2d
-- = -------
T2     r</pre>
<p>Solving this for r gives us:</p>
<pre>r =     2d 
    ----------
     T1
     --  -  1
     T2</pre>
<h2>Rotation</h2>
<p>We now have a triangle with 2 sides of known length. If we divide this triangle in half we can use the right angles to determine the vehicle will move <strong>2g</strong> radians around the circle (Figure 3).</p>
<p>We can say that the ratio between <strong>2g</strong> and 2 PI radians (360 degrees) is the same as the ratio between <b>s</b> and the circumference of the circle (2 * PI * (<strong>r</strong> + <strong>d</strong>)). Setting them to equal we can solve for <strong>g</strong>.</p>
<p><img align="right" src="/wp-content/uploads/users/robearl/TankMovement-Complex-Solving.png" alt="Figure 3: Solving Triangles" title="" />
<pre>  2g                s
------  =  -----------------
2 * PI      2 * PI * (r + d)
       s
2g = -------
     r + d

2g = T1 + T2
    --------
       2
    --------
     r + d

2g =    T1 + T2
     --------------
      2 * ( r + d )

g  =     T1 + T2
      -------------
      4 * ( r + d )</pre>
<p>If we substitute in our value for <b>r</b> and simplify we end up with:</p>
<pre>g = T1 - T2
    --------
       4d</pre>
<p>Which is a fairly simple calculation that scales by the size of the organism. The other thing missing from the approximate calculation is that the change in heading is actually <b>2g</b>, as can be seen from the symmetry in our diagrams.</p>
<h2>Distance</h2>
<p>Now that we know the angles we can use the <a href="http://en.wikipedia.org/wiki/Law_of_sines">Law of Sines</a> to calculate the straight line distance, <strong>t</strong>, between our vehicle&#8217;s start and end points. </p>
<pre>r + d        t / 2
--------- = -------
sin(PI/2)    sin(g)

r + d     t / 2
-----  = -------
  1       sin(g)

sin(g) * (r + d) = t / 2

t = 2 * sin(g) * (r + d)</pre>
<p>Once again we can substitute in our value for <strong>r</strong> and simplify to get:</p>
<pre>t = d(T1 + T2)
    ---------- * 2 * sin(g)
      T1 - T2</pre>
<p>Now that we know the distance and we know the angle we can use the same method we used earlier to calculate the new coordinates:</p>
<pre>x' = x + t * sin(h + g)
y' = y + t * cos(h + g)</pre>
<h2>Applying Our Findings</h2>
<p>So far we&#8217;ve seen a lot of (possibly confusing) numbers and symbols but what do we actually have to do do add this to a simulation? Each time our vehicle updates we need to:</p>
<ol>
<li>Calculate <strong>g</strong>.</li>
<li>Calculate <strong>t</strong>.</li>
<li>Calculate <strong>x&#8217;</strong>.</li>
<li>Calculate <strong>y&#8217;</strong>.</li>
<li>Adjust the vehicle&#8217;s coordinates to <strong>x&#8217;,y&#8217;</strong>.</li>
<li>Adjust the vehicle&#8217;s heading (<strong>h</strong>) by <strong>2g</strong>.</li>
</ol>
<p>You may have noticed there&#8217;s a possible division by zero error when <strong>T<span class="MT_smaller">1</span></strong> equals <strong>T<span class="MT_smaller">2</span></strong>. To protect against this we can check if they&#8217;re equal (or catch the exception) and use the calculation:</p>
<pre>x' = x + T1 * sin(h)
y' = y + T1 * cos(h)</pre>
<h2>Example</h2>
<p>Let&#8217;s say our vehicle has the properties:</p>
<p>T<span class="MT_smaller">1</span> = 1.0 (Track 1 Speed)<br />
T<span class="MT_smaller">2</span> = 0.5 (Track 2 Speed)<br />
d = 2.0 (Half distance between tracks)<br />
x = 0 (Coordinate)<br />
y = 0 (Coordinate)<br />
h = 2 (Heading)</p>
<p>1. Calculate <strong>g</strong></p>
<pre>g = T1 - T2
    --------
       4d
g = 1.0 - 0.5     0.5
    ---------  =  --- = 0.0625
        8          8</pre>
<p>2. Calculate <strong>t</strong></p>
<pre>t = d(T1 + T2)
    ---------- * 2 * sin(g)
      T1 - T2
= 0 + (2 * (1.0 + 0.5) * 2 * sin(0.0625) ) / ( 1.0 - 0.5 )
= (6 * 0.06246 ) / 0.5
= 0.37476 * 2
= 0.74951</pre>
<p>3. Calculate <strong>x&#8217;</strong>.</p>
<pre>x' = x + t * sin(h + g)
= 0 +  0.74951 * sin(2.0625)
= 0.66072</pre>
<p>4. Calculate <strong>y&#8217;</strong>.</p>
<pre>y' = y + t * cos(h + g)
= 0 + 0.74951 * cos(2.0625)
= -0.35387</pre>
<p>2. Adjust <strong>h</strong> by <strong>2g</strong>.</p>
<pre>h' = h + 2g
h' = 2 + 2 * 0.0625
h' = 2.125</pre>
<p>After this update our new state is:</p>
<p>x = 0.66072<br />
y = -0.35387<br />
h = 2.125</p>
<p>In the following Java example the Vehicle&#8217;s update method would be called from the main program loop.</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="java"><thead><tr><td colspan="2"  class="head">Java</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
</pre></td><td class="de1"><pre class="de1"><span class="kw1">public</span> <span class="kw1">class</span> Vehicle
<span class="br0">&#123;</span>
&nbsp; <span class="kw1">private</span> <span class="kw4">double</span> x, y, heading<span class="sy0">;</span>
&nbsp; <span class="kw1">private</span> <span class="kw4">int</span> size, maxSpeed<span class="sy0">;</span>
&nbsp; <span class="coMULTI">/*</span>
<span class="coMULTI">&nbsp; &nbsp; &nbsp;Other methods for initialising and controlling the vehicle.</span>
<span class="coMULTI">&nbsp; */</span>
&nbsp; <span class="kw1">public</span> <span class="kw4">void</span> update<span class="br0">&#40;</span><span class="br0">&#41;</span>
&nbsp; <span class="br0">&#123;</span>
&nbsp; &nbsp; <span class="kw4">double</span> tracks<span class="br0">&#91;</span><span class="nu0">2</span><span class="br0">&#93;</span> <span class="sy0">=</span> controller.<span class="me1">getTrackSpeeds</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span> <span class="co1">// Get the track speeds from whatever class is controlling the vehicle.</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="co1">// Could be human input or any kind of AI controller.</span>
&nbsp; &nbsp; <span class="co1">// Calculate g.</span>
&nbsp; &nbsp; <span class="kw4">double</span> d <span class="sy0">=</span> <span class="kw1">this</span>.<span class="me1">size</span> <span class="sy0">/</span> <span class="nu0">2</span><span class="sy0">;</span>
&nbsp; &nbsp; <span class="kw4">double</span> g <span class="sy0">=</span> <span class="br0">&#40;</span>tracks<span class="br0">&#91;</span><span class="nu0">0</span><span class="br0">&#93;</span> <span class="sy0">-</span> tracks<span class="br0">&#91;</span><span class="nu0">1</span><span class="br0">&#93;</span><span class="br0">&#41;</span> <span class="sy0">/</span> <span class="br0">&#40;</span> d <span class="sy0">*</span> <span class="nu0">4</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; <span class="co1">// Calculate t.</span>
&nbsp; &nbsp; <span class="kw4">double</span> t <span class="sy0">=</span> <span class="nu0">0</span><span class="sy0">;</span>
&nbsp; &nbsp; <span class="kw1">if</span><span class="br0">&#40;</span>tracks<span class="br0">&#91;</span><span class="nu0">0</span><span class="br0">&#93;</span>.<span class="me1">equals</span><span class="br0">&#40;</span>tracks<span class="br0">&#91;</span><span class="nu0">1</span><span class="br0">&#93;</span><span class="br0">&#41;</span><span class="br0">&#41;</span> <span class="co1">// Use straight line calculation to avoid division by zero.</span>
&nbsp; &nbsp; <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; t <span class="sy0">=</span> tracks<span class="br0">&#91;</span><span class="nu0">0</span><span class="br0">&#93;</span><span class="sy0">;</span>
&nbsp; &nbsp; <span class="br0">&#125;</span> 
&nbsp; &nbsp; <span class="kw1">else</span>
&nbsp; &nbsp; <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; t <span class="sy0">=</span> <span class="br0">&#40;</span> d <span class="sy0">*</span> <span class="br0">&#40;</span> tracks<span class="br0">&#91;</span><span class="nu0">0</span><span class="br0">&#93;</span> <span class="sy0">+</span> tracks<span class="br0">&#91;</span><span class="nu0">1</span><span class="br0">&#93;</span> <span class="br0">&#41;</span> <span class="sy0">*</span> <span class="nu0">2</span> <span class="sy0">*</span> <span class="kw3">Math</span>.<span class="me1">sin</span><span class="br0">&#40;</span>g<span class="br0">&#41;</span> <span class="br0">&#41;</span> <span class="sy0">/</span> <span class="br0">&#40;</span> tracks<span class="br0">&#91;</span><span class="nu0">0</span><span class="br0">&#93;</span> <span class="sy0">-</span> tracks<span class="br0">&#91;</span><span class="nu0">1</span><span class="br0">&#93;</span> <span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp;
&nbsp; &nbsp; <span class="co1">// Update x.</span>
&nbsp; &nbsp; <span class="kw1">this</span>.<span class="me1">x</span> <span class="sy0">-=</span> t <span class="sy0">*</span> <span class="kw3">Math</span>.<span class="me1">sin</span><span class="br0">&#40;</span><span class="kw1">this</span>.<span class="me1">heading</span> <span class="sy0">+</span> g<span class="br0">&#41;</span><span class="sy0">;</span> <span class="co1">// See note below.</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 
&nbsp; &nbsp; <span class="co1">// Update y.</span>
&nbsp; &nbsp; <span class="kw1">this</span>.<span class="me1">y</span> <span class="sy0">+=</span> t <span class="sy0">*</span> <span class="kw3">Math</span>.<span class="me1">cos</span><span class="br0">&#40;</span><span class="kw1">this</span>.<span class="me1">heading</span> <span class="sy0">+</span> g<span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; <span class="co1">// Update the vehicle's heading.</span>
&nbsp; &nbsp; <span class="kw1">this</span>.<span class="me1">heading</span> <span class="sy0">+=</span> <span class="nu0">2</span> <span class="sy0">*</span> g<span class="sy0">;</span>
&nbsp; <span class="br0">&#125;</span>
<span class="br0">&#125;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">public class Vehicle
{
  private double x, y, heading;
  private int size, maxSpeed;
  /*
     Other methods for initialising and controlling the vehicle.
  */
  public void update()
  {
    double tracks[2] = controller.getTrackSpeeds(); // Get the track speeds from whatever class is controlling the vehicle.
                                                    // Could be human input or any kind of AI controller.
    // Calculate g.
    double d = this.size / 2;
    double g = (tracks[0] - tracks[1]) / ( d * 4);

    // Calculate t.
    double t = 0;
    if(tracks[0].equals(tracks[1])) // Use straight line calculation to avoid division by zero.
    {
      t = tracks[0];
    } 
    else
    {
      t = ( d * ( tracks[0] + tracks[1] ) * 2 * Math.sin(g) ) / ( tracks[0] - tracks[1] );
    }

    // Update x.
    this.x -= t * Math.sin(this.heading + g); // See note below.
                                              
    // Update y.
    this.y += t * Math.cos(this.heading + g);

    // Update the vehicle's heading.
    this.heading += 2 * g;
  }
}</pre></div></div>

<p>When updating the x coordinate we subtract because, when using a JPanel:</p>
<ul>
<li>0,0 is the top left corner.</li>
<li>A heading of 0 is down.</li>
</ul>
<p>Using a normal <a href="http://en.wikipedia.org/wiki/Sine_wave">sine wave</a> an increase in heading (<strong>h</strong>) would result in an increase in <strong>sine h</strong> and therefore, an increase in <strong>x</strong> which is the opposite of what is expected/required. </p>
<p>Inverting the wave ( multiply by -1 ) produces the correct behaviour.</p>
<h1>How Much Difference Does It Really Make?</h1>
<p>The accuracy of the basic method decreases as the section of the circle traversed in one increment moves further from a straight line. Therefore, it decreases as:</p>
<p><img align="right" src="/wp-content/uploads/users/robearl/Charts.png" alt="Comparison Charts" title="" />
<ul>
<li>Speed increases.</li>
<li>Turning circle decreases.</li>
</ul>
<p>To demonstrate just how much difference there can be I&#8217;ve used a fairly extreme case to produce the charts opposite:</p>
<p>T<span class="MT_smaller">1</span> = 10<br />
T<span class="MT_smaller">2</span> = -9<br />
d = 2</p>
<p>As we can see a vehicle turning in a tight circle at a fairly high speed has a much bigger turning circle using the approximate movement calculations than when using the improved calculations.</p>
<p>As the size of the vehicle is now taken into account we can make a vehicle less nimble with a larger turning circle simply by increasing it&#8217;s size. We can get a turning circle like the one below by increasing <strong>d</strong> to 60 without any need to introduce extra variables to clamp the rotation rate.</p>
<p><center><img src="/wp-content/uploads/users/robearl/Bigger.png" alt="Larger Vehicle" title="" /></center></p>
<p>The other difference which is fairly hard to quantify is that the vehicle movement was much smoother once the new calculations were implemented. This could be because the initial technique caused lots of over-rotating which required constant readjustment.</p>
]]></content:encoded>
			<wfw:commentRss>/index.php/webdev/uidevelopment/accurately-simulating-movement-of-a-trac/feed/</wfw:commentRss>
		<slash:comments>1</slash:comments>
		</item>
	</channel>
</rss>
