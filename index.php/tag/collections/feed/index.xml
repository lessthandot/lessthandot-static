<?xml version="1.0" encoding="UTF-8"?><rss version="2.0"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:atom="http://www.w3.org/2005/Atom"
	xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
	xmlns:slash="http://purl.org/rss/1.0/modules/slash/"
	>

<channel>
	<title>collections &#8211; LessthanDot</title>
	<atom:link href="/index.php/tag/collections/feed/" rel="self" type="application/rss+xml" />
	<link>/</link>
	<description>A Technical Community for IT Professionals</description>
	<lastBuildDate>Sat, 09 Mar 2019 12:50:36 +0000</lastBuildDate>
	<language>en-US</language>
	<sy:updatePeriod>hourly</sy:updatePeriod>
	<sy:updateFrequency>1</sy:updateFrequency>
	<generator>https://wordpress.org/?v=4.6.1</generator>
	<item>
		<title>MongoDB: Returning documents where fields are null or not existing</title>
		<link>/index.php/datamgmt/dbprogramming/mongodb-returning-documents-where-fields/</link>
		<comments>/index.php/datamgmt/dbprogramming/mongodb-returning-documents-where-fields/#respond</comments>
		<pubDate>Sun, 17 Feb 2013 16:48:00 +0000</pubDate>
		<dc:creator><![CDATA[SQLDenis]]></dc:creator>
				<category><![CDATA[Database Programming]]></category>
		<category><![CDATA[bigdata]]></category>
		<category><![CDATA[collections]]></category>
		<category><![CDATA[mongodb]]></category>
		<category><![CDATA[nosql]]></category>
		<category><![CDATA[null]]></category>

		<guid isPermaLink="false">/index.php/2013/02/mongodb-returning-documents-where-fields/</guid>
		<description><![CDATA[In a regular SQL database, you can check if a column is null by using IS NULL
For example if you wanted to return all rows where the age is null, you would do the following

SELECT * 
FROM SomeTable
WHERE age IS NULL

In a NoSQL database it is po&#8230;]]></description>
				<content:encoded><![CDATA[<p>In a regular SQL database, you can check if a column is null by using IS NULL<br />
For example if you wanted to return all rows where the age is null, you would do the following</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="sql"><thead><tr><td colspan="2"  class="head">SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
</pre></td><td class="de1"><pre class="de1"><span class="kw1">SELECT</span> <span class="sy0">*</span> 
<span class="kw1">FROM</span> SomeTable
<span class="kw1">WHERE</span> age <span class="kw1">IS</span> <span class="kw1">NULL</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">SELECT * 
FROM SomeTable
WHERE age IS NULL</pre></div></div>

<p>In a NoSQL database it is possible that half the documents in a collection are omitted and maybe five are there with the value null. How can you know if the field is missing or has the value null?</p>
<p>Let&#8217;s take a quick look. First insert the following document into your collection</p>
<pre>db.Blog.insert( { name : "Denis2" } )</pre>
<p>As you can see it just has a name. Now let&#8217;s add another document this time with age as well, we will make the age NULL</p>
<pre>db.Blog.insert( { name : "Denis",  age : NULL} )</pre>
<p>You get the following error<br />
Sun Feb 17 13:44:58 ReferenceError: NULL is not defined (shell):1</p>
<p>This error occurs because you need to pass null in lowercase</p>
<pre>db.Blog.insert( { name : "Denis",  age : null } )</pre>
<p>Now if you execute the following</p>
<pre>db.Blog.find({age:null});</pre>
<p>You get back both document<br />
{ &#8220;_id&#8221; : ObjectId(&#8220;512118a7c1eca3d7ffcd00f9&#8221;), &#8220;name&#8221; : &#8220;Denis&#8221;, &#8220;age&#8221; : null }<br />
{ &#8220;_id&#8221; : ObjectId(&#8220;512123d9c1eca3d7ffcd00fa&#8221;), &#8220;name&#8221; : &#8220;Denis2&#8221; }</p>
<p>In order to return the document where the value that is stored is null, you can use <code>$type: 10</code>. What that means is that the field is of BSON Type Null </p>
<pre>db.Blog.find( { age: { $type: 10 } } )</pre>
<p>Here is the output</p>
<pre>{ "_id" : ObjectId("512118a7c1eca3d7ffcd00f9"), "name" : "Denis", "age" : null }</pre>
<p>In order to return the document where the field does not exist, you can use  <code>$exists: false</code></p>
<pre>db.Blog.find( { age: { $exists: false } } )</pre>
<p>Here is the output</p>
<pre>{ "_id" : ObjectId("512123d9c1eca3d7ffcd00fa"), "name" : "Denis2" }</pre>
<p>
That is all for this post, if you are interested in my other MongoDB posts, you can find them here:<br />
<a href="/index.php/DataMgmt/DBProgramming/creating-mongodb-as-a-service">Install MongoDB as a Windows Service</a><br />
<a href="/index.php/DataMgmt/DBProgramming/doing-upserts-in-mongodb">UPSERTs with MongoDB</a><br />
<a href="/index.php/DataMgmt/DBProgramming/mongodb-how-to-sort-results">How to sort results in MongoDB</a><br />
<a href="/index.php/DataMgmt/DBProgramming/indexes-in-mongodb">Indexes in MongoDB: A quick overview</a><br />
<a href="/index.php/DataMgmt/DBProgramming/multidocument-updates-with-mongodb">Multidocument updates with MongoDB</a><br />
<a href="/index.php/DataMgmt/DBProgramming/mongodb-how-to-include-and">MongoDB: How to include and exclude the fields you want in results</a><br />
<a href="/index.php/DataMgmt/DBAdmin/MSSQLServerAdmin/mongodb-how-to-limit-results">MongoDB: How to limit results and how to page through results</a><br />
<a href="/index.php/DataMgmt/DBAdmin/MSSQLServerAdmin/mongodb-backup-and-restore-databases">MongoDB: How to backup and restore databases</a><br />
<a href="/index.php/DataMgmt/DBAdmin/mongodb-how-to-restore-collections">MongoDB: How to restore collections</a><br />
<a href="/index.php/DataMgmt/DBAdmin/mongodb-how-to-backup-all">MongoDB: How to backup all the databases with one command</a><br />
<a href="/index.php/DataMgmt/DBProgramming/mongodb-exporting-data-into-files">MongoDB: Exporting data into files</a><br />
<a href="/index.php/DataMgmt/DBAdmin/MSSQLServerAdmin/mongodb-how-to-drop-databases">MongoDB: How to drop databases and collections</a><br />
<a href="/index.php/DataMgmt/DBProgramming/mongodb-creating-capped-collections">MongoDB: Creating capped collections</a></p>
]]></content:encoded>
			<wfw:commentRss>/index.php/datamgmt/dbprogramming/mongodb-returning-documents-where-fields/feed/</wfw:commentRss>
		<slash:comments>0</slash:comments>
		</item>
		<item>
		<title>MongoDB: Creating capped collections</title>
		<link>/index.php/datamgmt/dbprogramming/mongodb-creating-capped-collections/</link>
		<comments>/index.php/datamgmt/dbprogramming/mongodb-creating-capped-collections/#comments</comments>
		<pubDate>Wed, 06 Feb 2013 09:03:00 +0000</pubDate>
		<dc:creator><![CDATA[SQLDenis]]></dc:creator>
				<category><![CDATA[Database Programming]]></category>
		<category><![CDATA[bigdata]]></category>
		<category><![CDATA[collections]]></category>
		<category><![CDATA[mongodb]]></category>
		<category><![CDATA[nosql]]></category>

		<guid isPermaLink="false">/index.php/2013/02/mongodb-creating-capped-collections/</guid>
		<description><![CDATA[Let's say you have a collection and you are only interested in storing the last 50 items or so. Everytime you add a new item, you want the oldest item to disappear. What you can do is create a capped collection. Here are some behaviors that capped colle&#8230;]]></description>
				<content:encoded><![CDATA[<p>Let&#8217;s say you have a collection and you are only interested in storing the last 50 items or so. Everytime you add a new item, you want the oldest item to disappear. What you can do is create a capped collection. Here are some behaviors that capped collections have</p>
<blockquote><p>Capped collections guarantee preservation of the insertion order. As a result, queries do not need an index to return documents in insertion order. Without this indexing overhead, they can support higher insertion throughput.</p>
<p>Capped collections guarantee that insertion order is identical to the order on disk (natural order) and do so by prohibiting updates that increase document size. Capped collections only allow updates that fit the original document size, which ensures a document does not change its location on disk.</p>
<p>Capped collections automatically remove the oldest documents in the collection without requiring scripts or explicit remove operations.</p></blockquote>
<p>Here is the syntax for creating a capped collection of one megabyte</p>
<pre>db.createCollection('TestSize', {capped: true, size: 1048576})</pre>
<p>Let&#8217;s get started with some code, create a new database named TestCap</p>
<pre>use TestCap</pre>
<pre>switched to db TestCap</pre>
<p>Now instead of a megabyte capped collection, we are going to create a kilobyte capped collection</p>
<pre>db.createCollection('TestSize', {capped: true, size: 1024})</pre>
<pre>{ "ok" : 1 }</pre>
<p>Time to insert some data, we will make it simple by using a loop to insert 2000 items</p>
<pre>for (var i = 1; i &lt;= 2000; i++) db.TestSize.insert( { name : "denis" + i , age : i } )</pre>
<p>Time to check what is in the collection, you can use <code>db.collection.find()</code> to iterate through the collection, it will return you 20 items, if you press <code>it</code> it will give you the next 20 items</p>
<pre>db.TestSize.find()</pre>
<p>Here is the output</p>
<pre>{ "_id" : ObjectId("511232046ce24e7ea32698fb"), "name" : "denis1948", "age" : 1948 }
{ "_id" : ObjectId("511232046ce24e7ea32698fc"), "name" : "denis1949", "age" : 1949 }
{ "_id" : ObjectId("511232046ce24e7ea32698fd"), "name" : "denis1950", "age" : 1950 }
{ "_id" : ObjectId("511232046ce24e7ea32698fe"), "name" : "denis1951", "age" : 1951 }
{ "_id" : ObjectId("511232046ce24e7ea32698ff"), "name" : "denis1952", "age" : 1952 }
{ "_id" : ObjectId("511232046ce24e7ea3269900"), "name" : "denis1953", "age" : 1953 }
{ "_id" : ObjectId("511232046ce24e7ea3269901"), "name" : "denis1954", "age" : 1954 }
{ "_id" : ObjectId("511232046ce24e7ea3269902"), "name" : "denis1955", "age" : 1955 }
{ "_id" : ObjectId("511232046ce24e7ea3269903"), "name" : "denis1956", "age" : 1956 }
{ "_id" : ObjectId("511232046ce24e7ea3269904"), "name" : "denis1957", "age" : 1957 }
{ "_id" : ObjectId("511232046ce24e7ea3269905"), "name" : "denis1958", "age" : 1958 }
{ "_id" : ObjectId("511232046ce24e7ea3269906"), "name" : "denis1959", "age" : 1959 }
{ "_id" : ObjectId("511232046ce24e7ea3269907"), "name" : "denis1960", "age" : 1960 }
{ "_id" : ObjectId("511232046ce24e7ea3269908"), "name" : "denis1961", "age" : 1961 }
{ "_id" : ObjectId("511232046ce24e7ea3269909"), "name" : "denis1962", "age" : 1962 }
{ "_id" : ObjectId("511232046ce24e7ea326990a"), "name" : "denis1963", "age" : 1963 }
{ "_id" : ObjectId("511232046ce24e7ea326990b"), "name" : "denis1964", "age" : 1964 }
{ "_id" : ObjectId("511232046ce24e7ea326990c"), "name" : "denis1965", "age" : 1965 }
{ "_id" : ObjectId("511232046ce24e7ea326990d"), "name" : "denis1966", "age" : 1966 }
{ "_id" : ObjectId("511232046ce24e7ea326990e"), "name" : "denis1967", "age" : 1967 }
Type "it" for more
&gt; it
{ "_id" : ObjectId("511232046ce24e7ea326990f"), "name" : "denis1968", "age" : 1968 }
{ "_id" : ObjectId("511232046ce24e7ea3269910"), "name" : "denis1969", "age" : 1969 }
{ "_id" : ObjectId("511232046ce24e7ea3269911"), "name" : "denis1970", "age" : 1970 }
{ "_id" : ObjectId("511232046ce24e7ea3269912"), "name" : "denis1971", "age" : 1971 }
{ "_id" : ObjectId("511232046ce24e7ea3269913"), "name" : "denis1972", "age" : 1972 }
{ "_id" : ObjectId("511232046ce24e7ea3269914"), "name" : "denis1973", "age" : 1973 }
{ "_id" : ObjectId("511232046ce24e7ea3269915"), "name" : "denis1974", "age" : 1974 }
{ "_id" : ObjectId("511232046ce24e7ea3269916"), "name" : "denis1975", "age" : 1975 }
{ "_id" : ObjectId("511232046ce24e7ea3269917"), "name" : "denis1976", "age" : 1976 }
{ "_id" : ObjectId("511232046ce24e7ea3269918"), "name" : "denis1977", "age" : 1977 }
{ "_id" : ObjectId("511232046ce24e7ea3269919"), "name" : "denis1978", "age" : 1978 }
{ "_id" : ObjectId("511232046ce24e7ea326991a"), "name" : "denis1979", "age" : 1979 }
{ "_id" : ObjectId("511232046ce24e7ea326991b"), "name" : "denis1980", "age" : 1980 }
{ "_id" : ObjectId("511232046ce24e7ea326991c"), "name" : "denis1981", "age" : 1981 }
{ "_id" : ObjectId("511232046ce24e7ea326991d"), "name" : "denis1982", "age" : 1982 }
{ "_id" : ObjectId("511232046ce24e7ea326991e"), "name" : "denis1983", "age" : 1983 }
{ "_id" : ObjectId("511232046ce24e7ea326991f"), "name" : "denis1984", "age" : 1984 }
{ "_id" : ObjectId("511232046ce24e7ea3269920"), "name" : "denis1985", "age" : 1985 }
{ "_id" : ObjectId("511232046ce24e7ea3269921"), "name" : "denis1986", "age" : 1986 }
{ "_id" : ObjectId("511232046ce24e7ea3269922"), "name" : "denis1987", "age" : 1987 }
Type "it" for more
&gt; it
{ "_id" : ObjectId("511232046ce24e7ea3269923"), "name" : "denis1988", "age" : 1988 }
{ "_id" : ObjectId("511232046ce24e7ea3269924"), "name" : "denis1989", "age" : 1989 }
{ "_id" : ObjectId("511232046ce24e7ea3269925"), "name" : "denis1990", "age" : 1990 }
{ "_id" : ObjectId("511232046ce24e7ea3269926"), "name" : "denis1991", "age" : 1991 }
{ "_id" : ObjectId("511232046ce24e7ea3269927"), "name" : "denis1992", "age" : 1992 }
{ "_id" : ObjectId("511232046ce24e7ea3269928"), "name" : "denis1993", "age" : 1993 }
{ "_id" : ObjectId("511232046ce24e7ea3269929"), "name" : "denis1994", "age" : 1994 }
{ "_id" : ObjectId("511232046ce24e7ea326992a"), "name" : "denis1995", "age" : 1995 }
{ "_id" : ObjectId("511232046ce24e7ea326992b"), "name" : "denis1996", "age" : 1996 }
{ "_id" : ObjectId("511232046ce24e7ea326992c"), "name" : "denis1997", "age" : 1997 }
{ "_id" : ObjectId("511232046ce24e7ea326992d"), "name" : "denis1998", "age" : 1998 }
{ "_id" : ObjectId("511232046ce24e7ea326992e"), "name" : "denis1999", "age" : 1999 }
{ "_id" : ObjectId("511232046ce24e7ea326992f"), "name" : "denis2000", "age" : 2000 }</pre>
<p>If we do a count on the collection, we can find out how many items there are</p>
<pre>db.TestSize.count()</pre>
<p>That returns 53 for me</p>
<p>Let's add another item</p>
<pre>db.TestSize.insert( { name : "denis2001" , age : 2001 } )</pre>
<p>If we check the count again</p>
<pre>db.TestSize.count()</pre>
<p>That still returns 53. Before, the first item returned was the item with age of 1948, now that we added one more item, one should have been removed as well, we should see the item with age 1949 as the first item now.</p>
<pre>db.TestSize.find()</pre>
<p>Here is the output</p>
<pre>{ "_id" : ObjectId("511232046ce24e7ea32698fc"), "name" : "denis1949", "age" : 1949 }
{ "_id" : ObjectId("511232046ce24e7ea32698fd"), "name" : "denis1950", "age" : 1950 }
{ "_id" : ObjectId("511232046ce24e7ea32698fe"), "name" : "denis1951", "age" : 1951 }
{ "_id" : ObjectId("511232046ce24e7ea32698ff"), "name" : "denis1952", "age" : 1952 }
{ "_id" : ObjectId("511232046ce24e7ea3269900"), "name" : "denis1953", "age" : 1953 }
{ "_id" : ObjectId("511232046ce24e7ea3269901"), "name" : "denis1954", "age" : 1954 }
{ "_id" : ObjectId("511232046ce24e7ea3269902"), "name" : "denis1955", "age" : 1955 }
{ "_id" : ObjectId("511232046ce24e7ea3269903"), "name" : "denis1956", "age" : 1956 }
{ "_id" : ObjectId("511232046ce24e7ea3269904"), "name" : "denis1957", "age" : 1957 }
{ "_id" : ObjectId("511232046ce24e7ea3269905"), "name" : "denis1958", "age" : 1958 }
{ "_id" : ObjectId("511232046ce24e7ea3269906"), "name" : "denis1959", "age" : 1959 }
{ "_id" : ObjectId("511232046ce24e7ea3269907"), "name" : "denis1960", "age" : 1960 }
{ "_id" : ObjectId("511232046ce24e7ea3269908"), "name" : "denis1961", "age" : 1961 }
{ "_id" : ObjectId("511232046ce24e7ea3269909"), "name" : "denis1962", "age" : 1962 }
{ "_id" : ObjectId("511232046ce24e7ea326990a"), "name" : "denis1963", "age" : 1963 }
{ "_id" : ObjectId("511232046ce24e7ea326990b"), "name" : "denis1964", "age" : 1964 }
{ "_id" : ObjectId("511232046ce24e7ea326990c"), "name" : "denis1965", "age" : 1965 }
{ "_id" : ObjectId("511232046ce24e7ea326990d"), "name" : "denis1966", "age" : 1966 }
{ "_id" : ObjectId("511232046ce24e7ea326990e"), "name" : "denis1967", "age" : 1967 }
{ "_id" : ObjectId("511232046ce24e7ea326990f"), "name" : "denis1968", "age" : 1968 }
Type "it" for more
&gt; it
{ "_id" : ObjectId("511232046ce24e7ea3269910"), "name" : "denis1969", "age" : 1969 }
{ "_id" : ObjectId("511232046ce24e7ea3269911"), "name" : "denis1970", "age" : 1970 }
{ "_id" : ObjectId("511232046ce24e7ea3269912"), "name" : "denis1971", "age" : 1971 }
{ "_id" : ObjectId("511232046ce24e7ea3269913"), "name" : "denis1972", "age" : 1972 }
{ "_id" : ObjectId("511232046ce24e7ea3269914"), "name" : "denis1973", "age" : 1973 }
{ "_id" : ObjectId("511232046ce24e7ea3269915"), "name" : "denis1974", "age" : 1974 }
{ "_id" : ObjectId("511232046ce24e7ea3269916"), "name" : "denis1975", "age" : 1975 }
{ "_id" : ObjectId("511232046ce24e7ea3269917"), "name" : "denis1976", "age" : 1976 }
{ "_id" : ObjectId("511232046ce24e7ea3269918"), "name" : "denis1977", "age" : 1977 }
{ "_id" : ObjectId("511232046ce24e7ea3269919"), "name" : "denis1978", "age" : 1978 }
{ "_id" : ObjectId("511232046ce24e7ea326991a"), "name" : "denis1979", "age" : 1979 }
{ "_id" : ObjectId("511232046ce24e7ea326991b"), "name" : "denis1980", "age" : 1980 }
{ "_id" : ObjectId("511232046ce24e7ea326991c"), "name" : "denis1981", "age" : 1981 }
{ "_id" : ObjectId("511232046ce24e7ea326991d"), "name" : "denis1982", "age" : 1982 }
{ "_id" : ObjectId("511232046ce24e7ea326991e"), "name" : "denis1983", "age" : 1983 }
{ "_id" : ObjectId("511232046ce24e7ea326991f"), "name" : "denis1984", "age" : 1984 }
{ "_id" : ObjectId("511232046ce24e7ea3269920"), "name" : "denis1985", "age" : 1985 }
{ "_id" : ObjectId("511232046ce24e7ea3269921"), "name" : "denis1986", "age" : 1986 }
{ "_id" : ObjectId("511232046ce24e7ea3269922"), "name" : "denis1987", "age" : 1987 }
{ "_id" : ObjectId("511232046ce24e7ea3269923"), "name" : "denis1988", "age" : 1988 }
Type "it" for more
&gt; it
{ "_id" : ObjectId("511232046ce24e7ea3269924"), "name" : "denis1989", "age" : 1989 }
{ "_id" : ObjectId("511232046ce24e7ea3269925"), "name" : "denis1990", "age" : 1990 }
{ "_id" : ObjectId("511232046ce24e7ea3269926"), "name" : "denis1991", "age" : 1991 }
{ "_id" : ObjectId("511232046ce24e7ea3269927"), "name" : "denis1992", "age" : 1992 }
{ "_id" : ObjectId("511232046ce24e7ea3269928"), "name" : "denis1993", "age" : 1993 }
{ "_id" : ObjectId("511232046ce24e7ea3269929"), "name" : "denis1994", "age" : 1994 }
{ "_id" : ObjectId("511232046ce24e7ea326992a"), "name" : "denis1995", "age" : 1995 }
{ "_id" : ObjectId("511232046ce24e7ea326992b"), "name" : "denis1996", "age" : 1996 }
{ "_id" : ObjectId("511232046ce24e7ea326992c"), "name" : "denis1997", "age" : 1997 }
{ "_id" : ObjectId("511232046ce24e7ea326992d"), "name" : "denis1998", "age" : 1998 }
{ "_id" : ObjectId("511232046ce24e7ea326992e"), "name" : "denis1999", "age" : 1999 }
{ "_id" : ObjectId("511232046ce24e7ea326992f"), "name" : "denis2000", "age" : 2000 }
{ "_id" : ObjectId("511233896ce24e7ea3269930"), "name" : "denis2001", "age" : 2001 }</pre>
<p>And as expected the item with age 1949 was indeed the first item, the item we just inserted is now the last item</p>
<p>You can check if a collection is capped by using <code>db.Collection.isCapped()</code>. In our case the command would be</p>
<pre>db.TestSize.isCapped()</pre>
<p>The output will be <code>true</code> if the collection is capped.</p>
<p><strong>Restrictions</strong><br />
Here are some restrictions that you have to be aware of</p>
<blockquote><p>
You can update documents in a collection after inserting them; however, these updates cannot cause the documents to grow. If the update operation causes the document to grow beyond their original size, the update operation will fail.</p>
<p>If you plan to update documents in a capped collection, remember to create an index to prevent update operations that require a table scan.</p>
<p>You cannot delete documents from a capped collection. To remove all records from a capped collection, use the ‘emptycapped’ command. To remove the collection entirely, use the drop() method.
</p></blockquote>
<p>You can use capped collections if you are only interested in the last x number of items inserted, for example you want to show only the last 50 twitter messages or the last 100 trades for a particular stock.</p>
<p>
That is all for this post, if you are interested in my other MongoDB posts, you can find them here:<br />
<a href="/index.php/DataMgmt/DBProgramming/creating-mongodb-as-a-service">Install MongoDB as a Windows Service</a><br />
<a href="/index.php/DataMgmt/DBProgramming/doing-upserts-in-mongodb">UPSERTs with MongoDB</a><br />
<a href="/index.php/DataMgmt/DBProgramming/mongodb-how-to-sort-results">How to sort results in MongoDB</a><br />
<a href="/index.php/DataMgmt/DBProgramming/indexes-in-mongodb">Indexes in MongoDB: A quick overview</a><br />
<a href="/index.php/DataMgmt/DBProgramming/multidocument-updates-with-mongodb">Multidocument updates with MongoDB</a><br />
<a href="/index.php/DataMgmt/DBProgramming/mongodb-how-to-include-and">MongoDB: How to include and exclude the fields you want in results</a><br />
<a href="/index.php/DataMgmt/DBAdmin/MSSQLServerAdmin/mongodb-how-to-limit-results">MongoDB: How to limit results and how to page through results</a><br />
<a href="/index.php/DataMgmt/DBAdmin/MSSQLServerAdmin/mongodb-backup-and-restore-databases">MongoDB: How to backup and restore databases</a><br />
<a href="/index.php/DataMgmt/DBAdmin/mongodb-how-to-restore-collections">MongoDB: How to restore collections</a><br />
<a href="/index.php/DataMgmt/DBAdmin/mongodb-how-to-backup-all">MongoDB: How to backup all the databases with one command</a><br />
<a href="/index.php/DataMgmt/DBProgramming/mongodb-exporting-data-into-files">MongoDB: Exporting data into files</a><br />
<a href="/index.php/DataMgmt/DBAdmin/MSSQLServerAdmin/mongodb-how-to-drop-databases">MongoDB: How to drop databases and collections</a></p>
]]></content:encoded>
			<wfw:commentRss>/index.php/datamgmt/dbprogramming/mongodb-creating-capped-collections/feed/</wfw:commentRss>
		<slash:comments>1</slash:comments>
		</item>
		<item>
		<title>MongoDB: How to drop databases and collections</title>
		<link>/index.php/datamgmt/dbadmin/mssqlserveradmin/mongodb-how-to-drop-databases/</link>
		<comments>/index.php/datamgmt/dbadmin/mssqlserveradmin/mongodb-how-to-drop-databases/#respond</comments>
		<pubDate>Tue, 05 Feb 2013 08:47:00 +0000</pubDate>
		<dc:creator><![CDATA[SQLDenis]]></dc:creator>
				<category><![CDATA[Business Intelligence]]></category>
		<category><![CDATA[Microsoft SQL Server Admin]]></category>
		<category><![CDATA[bigdata]]></category>
		<category><![CDATA[collections]]></category>
		<category><![CDATA[databases]]></category>
		<category><![CDATA[mongodb]]></category>
		<category><![CDATA[nosql]]></category>

		<guid isPermaLink="false">/index.php/2013/02/mongodb-how-to-drop-databases/</guid>
		<description><![CDATA[In this post we are going to look at how to drop database and collections. We already covered backup and restores, now that you know how to do that, it is safe to cover dropping collections and databases

Execute the following command, it will create&#8230;]]></description>
				<content:encoded><![CDATA[<p>In this post we are going to look at how to drop database and collections. We already covered backup and restores, now that you know how to do that, it is safe to cover dropping collections and databases</p>
<p>Execute the following command, it will create the MultiCollection database if it doesn&#8217;t exist already</p>
<pre>use MultiCollection</pre>
<p>Now create these two collections</p>
<pre>db.Blog.insert( { name : "Denis",  age : 20 } )
db.Blog.insert( { name : "Abe",    age : 30 } )
db.Blog.insert( { name : "John",   age : 40 } )
db.Blog.insert( { name : "Xavier", age : 10 } )
db.Blog.insert( { name : "Zen",    age : 50 } )


db.People.insert( { name : "AADenis",  age : 0020 } )
db.People.insert( { name : "AAAbe",    age : 0030 } )
db.People.insert( { name : "AAJohn",   age : 0040 } )
db.People.insert( { name : "AAXavier", age : 0010 } )
db.People.insert( { name : "AAZen",    age : 0050 } )</pre>
<p>Now it is time to drop a collection. The syntax is pretty simple it is <code>db.CollectionName.drop()</code>. So if we wanted to drop the Blog collection it would be <code>db.Blog.drop()</code></p>
<p>Time to try it out, run the following</p>
<pre>db.Blog.drop()</pre>
<p>The output you get back is <code>true</code></p>
<p>Now if you do a find on the collection, you won&#8217;t get anything back</p>
<pre>db.Blog.find()</pre>
<p>That was pretty simple. Now let&#8217;s see how to drop a database. This is pretty easy as well, it is just <code>db.dropDatabase()</code>. I wished you had to specify the name of the database because you could be in the wrong database when executing the command</p>
<p>Execute this</p>
<pre>db.dropDatabase()</pre>
<p>Here is the output</p>
<pre>{ "dropped" : "MultiCollection", "ok" : 1 }</pre>
<p>Just be aware that you are still in the MultiCollection database, you can verify this by executing the following command</p>
<pre>db.getName()</pre>
<p>And here is the output</p>
<pre>MultiCollection</pre>
<p>If you now try to do a find for either collection that existed before you won&#8217;t get anything back</p>
<pre>db.People.find()
db.Blog.find()</pre>
<p>Doing a stats command on the database will tell you how many collections you have as well</p>
<pre>db.stats()</pre>
<p>Here is the output</p>
<pre>{
        "db" : "MultiCollection",
        "collections" : 0,
        "objects" : 0,
        "avgObjSize" : 0,
        "dataSize" : 0,
        "storageSize" : 0,
        "numExtents" : 0,
        "indexes" : 0,
        "indexSize" : 0,
        "fileSize" : 0,
        "nsSizeMB" : 0,
        "ok" : 1
}</pre>
<p>As you can see everything is pretty much 0</p>
<p>
That is all for this post, if you are interested in my other MongoDB posts, you can find them here:<br />
<a href="/index.php/DataMgmt/DBProgramming/creating-mongodb-as-a-service">Install MongoDB as a Windows Service</a><br />
<a href="/index.php/DataMgmt/DBProgramming/doing-upserts-in-mongodb">UPSERTs with MongoDB</a><br />
<a href="/index.php/DataMgmt/DBProgramming/mongodb-how-to-sort-results">How to sort results in MongoDB</a><br />
<a href="/index.php/DataMgmt/DBProgramming/indexes-in-mongodb">Indexes in MongoDB: A quick overview</a><br />
<a href="/index.php/DataMgmt/DBProgramming/multidocument-updates-with-mongodb">Multidocument updates with MongoDB</a><br />
<a href="/index.php/DataMgmt/DBProgramming/mongodb-how-to-include-and">MongoDB: How to include and exclude the fields you want in results</a><br />
<a href="/index.php/DataMgmt/DBAdmin/MSSQLServerAdmin/mongodb-how-to-limit-results">MongoDB: How to limit results and how to page through results</a><br />
<a href="/index.php/DataMgmt/DBAdmin/MSSQLServerAdmin/mongodb-backup-and-restore-databases">MongoDB: How to backup and restore databases</a><br />
<a href="/index.php/DataMgmt/DBAdmin/mongodb-how-to-restore-collections">MongoDB: How to restore collections</a><br />
<a href="/index.php/DataMgmt/DBAdmin/mongodb-how-to-backup-all">MongoDB: How to backup all the databases with one command</a><br />
<a href="/index.php/DataMgmt/DBProgramming/mongodb-exporting-data-into-files">MongoDB: Exporting data into files</a></p>
]]></content:encoded>
			<wfw:commentRss>/index.php/datamgmt/dbadmin/mssqlserveradmin/mongodb-how-to-drop-databases/feed/</wfw:commentRss>
		<slash:comments>0</slash:comments>
		</item>
		<item>
		<title>MongoDB: Exporting data into files</title>
		<link>/index.php/datamgmt/dbprogramming/mongodb-exporting-data-into-files/</link>
		<comments>/index.php/datamgmt/dbprogramming/mongodb-exporting-data-into-files/#comments</comments>
		<pubDate>Sun, 03 Feb 2013 11:25:00 +0000</pubDate>
		<dc:creator><![CDATA[SQLDenis]]></dc:creator>
				<category><![CDATA[Database Administration]]></category>
		<category><![CDATA[Database Programming]]></category>
		<category><![CDATA[bigdata]]></category>
		<category><![CDATA[collections]]></category>
		<category><![CDATA[export]]></category>
		<category><![CDATA[mongodb]]></category>
		<category><![CDATA[nosql]]></category>

		<guid isPermaLink="false">/index.php/2013/02/mongodb-exporting-data-into-files/</guid>
		<description><![CDATA[In this post we are going to take a look at how to export data into files. We are going to export data in json format as well as in csv format. To get started first connect to mongodb and create a new database named ExportDB

You can just execute the&#8230;]]></description>
				<content:encoded><![CDATA[<p>In this post we are going to take a look at how to export data into files. We are going to export data in json format as well as in csv format. To get started first connect to mongodb and create a new database named ExportDB</p>
<p>You can just execute the following to create this database</p>
<pre>use ExportDB</pre>
<p>You should get a message like the following</p>
<pre>switched to db ExportDb</pre>
<p>Insert these 5 items</p>
<pre>db.Person.insert( { name : "Denis",  age : 20, city : "Princeton" } )
db.Person.insert( { name : "Abe",    age : 30, city : "Amsterdam" } )
db.Person.insert( { name : "John",   age : 40, city : "New York"  } )
db.Person.insert( { name : "Xavier", age : 10, city : "Barcelona" } )
db.Person.insert( { name : "Zen",    age : 50, city : "Kyoto"     } )</pre>
<p>Now it is time to do the export. To do the export we will use the mongoexport utility, you can find this in the bin directory of your MongoDB install. I my case it is in the C:NoSQLmongodbbin directory. Open up a new command window and cd into the folder where mongoexport  is located.</p>
<p>
<h2>Export in json format</h2>
<p>To export the data, we need to tell mongoexport what database to use, what collection to use and optionally we also need to specify what fields to use. If you don&#8217;t specify the fields, you will get all of them. If we wanted to export the name and age fields from the Person collection in the ExportDb database, you would specify it like this</p>
<pre>mongoexport --db ExportDb --collection Person -fields name,age</pre>
<p>Here is the output</p>
<pre>C:NoSQLmongodbbin&gt;mongoexport --db ExportDb --collection Person -fields name,age
connected to: 127.0.0.1
{ "_id" : { "$oid" : "510e5da10e0a53ddf5f2865b" }, "name" : "Denis", "age" : 20 }
{ "_id" : { "$oid" : "510e5da20e0a53ddf5f2865c" }, "name" : "Abe", "age" : 30 }
{ "_id" : { "$oid" : "510e5da20e0a53ddf5f2865d" }, "name" : "John", "age" : 40 }
{ "_id" : { "$oid" : "510e5da20e0a53ddf5f2865e" }, "name" : "Xavier", "age" : 10 }
{ "_id" : { "$oid" : "510e5da80e0a53ddf5f2865f" }, "name" : "Zen", "age" : 50 }
exported 5 records</pre>
<p>As you can see you got the output in the window. What about a file? You can use -o with the filename to redirect output into a file, all we are adding is -o Person.txt to the previous command</p>
<pre>mongoexport --db ExportDb --collection Person  -fields name,age -o Person.txt</pre>
<p>Here is the output</p>
<pre>C:NoSQLmongodbbin&gt;mongoexport --db ExportDb --collection Person  -fields name,age -o Person.txt
connected to: 127.0.0.1
exported 5 records

C:NoSQLmongodbbin&gt;</pre>
<p>If you now locate the file in the bin directory and open the file, you should see something like this</p>
<div class="image_block"><a href="/wp-content/uploads/blogs/DataMgmt/Denis/mongo/PersonOutput.PNG?mtime=1359896992"><img alt="" src="/wp-content/uploads/blogs/DataMgmt/Denis/mongo/PersonOutput.PNG?mtime=1359896992" width="660" height="184" /></a></div>
<p>
<h2>Export in csv format</h2>
<p>Exporting in csv format is pretty much the same as before with the addition of &#8211;csv. Our command will look like this</p>
<pre>mongoexport --db ExportDb --collection Person --csv -fields name,age</pre>
<p>Here is the output</p>
<pre>C:NoSQLmongodbbin&gt;mongoexport --db ExportDb --collection Person --csv -fields name,age
connected to: 127.0.0.1
name,age
"Denis",20.0
"Abe",30.0
"John",40.0
"Xavier",10.0
"Zen",50.0
exported 5 records

C:NoSQLmongodbbin&gt;</pre>
<p>Just like before we want to direct the output into a file instead of onto the screen, we will just add -o Person.csv to the command , the command will look like this</p>
<p>mongoexport &#8211;db ExportDb &#8211;collection Person &#8211;csv -fields name,age -o Person.csv</p>
<pre>C:NoSQLmongodbbin&gt;mongoexport --db ExportDb --collection Person --csv -fields name,age -o Person.csv
connected to: 127.0.0.1
exported 5 records

C:NoSQLmongodbbin&gt;</pre>
<p>Now if we open up the file in notepad you will see the following</p>
<div class="image_block"><a href="/wp-content/uploads/blogs/DataMgmt/Denis/mongo/PersonOutputCsv.PNG?mtime=1359897545"><img alt="" src="/wp-content/uploads/blogs/DataMgmt/Denis/mongo/PersonOutputCsv.PNG?mtime=1359897545" width="289" height="181" /></a></div>
<p>If you open up the file in Excel, it will look like this</p>
<div class="image_block"><a href="/wp-content/uploads/blogs/DataMgmt/Denis/mongo/PersonOutputExcel.PNG?mtime=1359897556"><img alt="" src="/wp-content/uploads/blogs/DataMgmt/Denis/mongo/PersonOutputExcel.PNG?mtime=1359897556" width="498" height="362" /></a></div>
<p>There you have it, if you want to quickly export some data into file, you can use the mongoexport utility to accomplish that</p>
<p>
That is all for this post, if you are interested in my other MongoDB posts, you can find them here:<br />
<a href="/index.php/DataMgmt/DBProgramming/creating-mongodb-as-a-service">Install MongoDB as a Windows Service</a><br />
<a href="/index.php/DataMgmt/DBProgramming/doing-upserts-in-mongodb">UPSERTs with MongoDB</a><br />
<a href="/index.php/DataMgmt/DBProgramming/mongodb-how-to-sort-results">How to sort results in MongoDB</a><br />
<a href="/index.php/DataMgmt/DBProgramming/indexes-in-mongodb">Indexes in MongoDB: A quick overview</a><br />
<a href="/index.php/DataMgmt/DBProgramming/multidocument-updates-with-mongodb">Multidocument updates with MongoDB</a><br />
<a href="/index.php/DataMgmt/DBProgramming/mongodb-how-to-include-and">MongoDB: How to include and exclude the fields you want in results</a><br />
<a href="/index.php/DataMgmt/DBAdmin/MSSQLServerAdmin/mongodb-how-to-limit-results">MongoDB: How to limit results and how to page through results</a><br />
<a href="/index.php/DataMgmt/DBAdmin/MSSQLServerAdmin/mongodb-backup-and-restore-databases">MongoDB: How to backup and restore databases</a><br />
<a href="/index.php/DataMgmt/DBAdmin/mongodb-how-to-restore-collections">MongoDB: How to restore collections</a><br />
<a href="/index.php/DataMgmt/DBAdmin/mongodb-how-to-backup-all">MongoDB: How to backup all the databases with one command</a></p>
]]></content:encoded>
			<wfw:commentRss>/index.php/datamgmt/dbprogramming/mongodb-exporting-data-into-files/feed/</wfw:commentRss>
		<slash:comments>1</slash:comments>
		</item>
		<item>
		<title>MongoDB: How to backup all the databases with one command</title>
		<link>/index.php/datamgmt/dbadmin/mongodb-how-to-backup-all/</link>
		<comments>/index.php/datamgmt/dbadmin/mongodb-how-to-backup-all/#comments</comments>
		<pubDate>Fri, 01 Feb 2013 08:48:00 +0000</pubDate>
		<dc:creator><![CDATA[SQLDenis]]></dc:creator>
				<category><![CDATA[Database Administration]]></category>
		<category><![CDATA[backup]]></category>
		<category><![CDATA[bigdata]]></category>
		<category><![CDATA[collections]]></category>
		<category><![CDATA[mongodb]]></category>
		<category><![CDATA[nosql]]></category>
		<category><![CDATA[restore]]></category>

		<guid isPermaLink="false">/index.php/2013/02/mongodb-how-to-backup-all/</guid>
		<description><![CDATA[We looked at how to backup and restore databases in the post MongoDB: How to backup and restore databases. We also looked at how to restore collection in the post MongoDB: How to restore collections. Today we are going to look at how to backup all the d&#8230;]]></description>
				<content:encoded><![CDATA[<p>We looked at how to backup and restore databases in the post <a href="/index.php/DataMgmt/DBAdmin/MSSQLServerAdmin/mongodb-backup-and-restore-databases">MongoDB: How to backup and restore databases</a>. We also looked at how to restore collection in the post <a href="/index.php/DataMgmt/DBAdmin/mongodb-how-to-restore-collections">MongoDB: How to restore collections</a>. Today we are going to look at how to backup all the databases in one shot with one simple command. Before we get started connect to your MongoDB server, we are going to create a couple of databases</p>
<p>Run the following</p>
<pre>use MultiCollection

db.Blog.insert( { name : "Denis",  age : 20 } )
db.Blog.insert( { name : "Abe",    age : 30 } )
db.Blog.insert( { name : "John",   age : 40 } )
db.Blog.insert( { name : "Xavier", age : 10 } )
db.Blog.insert( { name : "Zen",    age : 50 } )


db.People.insert( { name : "AADenis",  age : 0020 } )
db.People.insert( { name : "AAAbe",    age : 0030 } )
db.People.insert( { name : "AAJohn",   age : 0040 } )
db.People.insert( { name : "AAXavier", age : 0010 } )
db.People.insert( { name : "AAZen",    age : 0050 } )


use SingleCollection

db.Blog.insert( { name : "Denis",  age : 20 } )
db.Blog.insert( { name : "Abe",    age : 30 } )
db.Blog.insert( { name : "John",   age : 40 } )
db.Blog.insert( { name : "Xavier", age : 10 } )
db.Blog.insert( { name : "Zen",    age : 50 } )

use TestDB

db.Test.insert( { name : "Denis",  age : 20 } )
db.Test.insert( { name : "Abe",    age : 30 } )
db.Test.insert( { name : "John",   age : 40 } )
db.Test.insert( { name : "Xavier", age : 10 } )
db.Test.insert( { name : "Zen",    age : 50 } )

use TestStuff

db.Stuff.insert( { name : "Denis",  age : 20 } )
db.Stuff.insert( { name : "Abe",    age : 30 } )
db.Stuff.insert( { name : "John",   age : 40 } )
db.Stuff.insert( { name : "Xavier", age : 10 } )
db.Stuff.insert( { name : "Zen",    age : 50 } )</pre>
<p>The code above will create 4 databases. Now it is time to back all the databases up. Open up another command window, navigate to the bin directory where MongoDB is installed</p>
<p>You can of course run the mongodump command for every database you have, for example</p>
<pre>mongodump --db MultiCollection
mongodump --db SingleCollection
mongodump --db TestDB
mongodump --db TestStuff</pre>
<p>But did you know that if you don&#8217;t specify a database that mongodump will back up all the databases? Try it out, run the following</p>
<p>mongodump </p>
<p>Here is what the output looks like</p>
<pre>C:NoSQLmongodbbin&gt;mongodump
connected to: 127.0.0.1
Fri Feb 01 05:41:33 all dbs
Fri Feb 01 05:41:35 DATABASE: MultiCollection    to     dump/MultiCollection
Fri Feb 01 05:41:35     MultiCollection.Blog to dump/MultiCollection/Blog.bson
Fri Feb 01 05:41:35              5 objects
Fri Feb 01 05:41:36     Metadata for MultiCollection.Blog to dump/MultiCollection/Blog.metadata.json
Fri Feb 01 05:41:36     MultiCollection.People to dump/MultiCollection/People.bson
Fri Feb 01 05:41:36              5 objects
Fri Feb 01 05:41:36 Metadata for MultiCollection.People to dump/MultiCollection/People.metadata.json
Fri Feb 01 05:41:36 DATABASE: SingleCollection   to     dump/SingleCollection
Fri Feb 01 05:41:36     SingleCollection.Blog to dump/SingleCollection/Blog.bson
Fri Feb 01 05:41:36              5 objects
Fri Feb 01 05:41:36     Metadata for SingleCollection.Blog to dump/SingleCollection/Blog.metadata.json
Fri Feb 01 05:41:36 DATABASE: TestDB     to     dump/TestDB
Fri Feb 01 05:41:36     TestDB.Test to dump/TestDB/Test.bson
Fri Feb 01 05:41:36              5 objects
Fri Feb 01 05:41:36     Metadata for TestDB.Test to dump/TestDB/Test.metadata.json
Fri Feb 01 05:41:36 DATABASE: TestStuff  to     dump/TestStuff
Fri Feb 01 05:41:36     TestStuff.Stuff to dump/TestStuff/Stuff.bson
Fri Feb 01 05:41:36              5 objects
Fri Feb 01 05:41:36     Metadata for TestStuff.Stuff to dump/TestStuff/Stuff.metadata.json
Fri Feb 01 05:41:36 DATABASE: admin      to     dump/admin

C:NoSQLmongodbbin&gt;</pre>
<p>If you look in your bin directory, you will see a dump directory, inside the dump directory, you will see a directory for every database that was backed up.</p>
<div class="image_block"><a href="/wp-content/uploads/blogs/DataMgmt/Denis/MultiDBackupMongoDB.PNG?mtime=1359714862"><img alt="" src="/wp-content/uploads/blogs/DataMgmt/Denis/MultiDBackupMongoDB.PNG?mtime=1359714862" width="640" height="265" /></a></div>
<p>
That is all for this post, if you are interested in my other MongoDB posts, you can find them here:<br />
<a href="/index.php/DataMgmt/DBProgramming/creating-mongodb-as-a-service">Install MongoDB as a Windows Service</a><br />
<a href="/index.php/DataMgmt/DBProgramming/doing-upserts-in-mongodb">UPSERTs with MongoDB</a><br />
<a href="/index.php/DataMgmt/DBProgramming/mongodb-how-to-sort-results">How to sort results in MongoDB</a><br />
<a href="/index.php/DataMgmt/DBProgramming/indexes-in-mongodb">Indexes in MongoDB: A quick overview</a><br />
<a href="/index.php/DataMgmt/DBProgramming/multidocument-updates-with-mongodb">Multidocument updates with MongoDB</a><br />
<a href="/index.php/DataMgmt/DBProgramming/mongodb-how-to-include-and">MongoDB: How to include and exclude the fields you want in results</a><br />
<a href="/index.php/DataMgmt/DBAdmin/MSSQLServerAdmin/mongodb-how-to-limit-results">MongoDB: How to limit results and how to page through results</a><br />
<a href="/index.php/DataMgmt/DBAdmin/MSSQLServerAdmin/mongodb-backup-and-restore-databases">MongoDB: How to backup and restore databases</a><br />
<a href="/index.php/DataMgmt/DBAdmin/mongodb-how-to-restore-collections">MongoDB: How to restore collections</a></p>
]]></content:encoded>
			<wfw:commentRss>/index.php/datamgmt/dbadmin/mongodb-how-to-backup-all/feed/</wfw:commentRss>
		<slash:comments>4</slash:comments>
		</item>
		<item>
		<title>MongoDB: How to restore collections</title>
		<link>/index.php/datamgmt/dbadmin/mongodb-how-to-restore-collections/</link>
		<comments>/index.php/datamgmt/dbadmin/mongodb-how-to-restore-collections/#respond</comments>
		<pubDate>Thu, 31 Jan 2013 20:08:00 +0000</pubDate>
		<dc:creator><![CDATA[SQLDenis]]></dc:creator>
				<category><![CDATA[Database Administration]]></category>
		<category><![CDATA[backup]]></category>
		<category><![CDATA[bigdata]]></category>
		<category><![CDATA[collections]]></category>
		<category><![CDATA[mongodb]]></category>
		<category><![CDATA[nosql]]></category>
		<category><![CDATA[restore]]></category>

		<guid isPermaLink="false">/index.php/2013/01/mongodb-how-to-restore-collections/</guid>
		<description><![CDATA[In yesterday's post MongoDB: How to backup and restore databases we looked at how to backup and restore a database, today we are going to look at how to restore a collection from a backup. Be aware that mongorestore and mongodump have to be executed fro&#8230;]]></description>
				<content:encoded><![CDATA[<p>In yesterday&#8217;s post <a href="/index.php/DataMgmt/DBAdmin/MSSQLServerAdmin/mongodb-backup-and-restore-databases">MongoDB: How to backup and restore databases</a> we looked at how to backup and restore a database, today we are going to look at how to restore a collection from a backup. Be aware that mongorestore and mongodump have to be executed from a command window in the bin directory where mongodb is. To execute the MongoDB commands you need to connect to mongodb first. On my PC this is in the directory C:NoSQLmongodbbin></p>
<p>In order to get started create a new database, name it MultiCollection </p>
<p>You can just run this command, it will switch to the MultiCollection database if it exists or otherwise it will create the MultiCollection database</p>
<pre>use MultiCollection</pre>
<p>Now add these two collections</p>
<pre>db.Blog.insert( { name : "Denis",  age : 20 } )
db.Blog.insert( { name : "Abe",    age : 30 } )
db.Blog.insert( { name : "John",   age : 40 } )
db.Blog.insert( { name : "Xavier", age : 10 } )
db.Blog.insert( { name : "Zen",    age : 50 } )


db.People.insert( { name : "AADenis",  age : 0020 } )
db.People.insert( { name : "AAAbe",    age : 0030 } )
db.People.insert( { name : "AAJohn",   age : 0040 } )
db.People.insert( { name : "AAXavier", age : 0010 } )
db.People.insert( { name : "AAZen",    age : 0050 } )</pre>
<p>Open a new command window, navigate to your mongodb bin directory. Now execute the <code>mongodump --db MultiCollection </code>command<br />
This command will backup the database into the dump directory, if this directory does not exist it will be created, in my case it will be located here C:NoSQLmongodbbindump. In the dump directory you will see a directory with the same name as the database that you are backing up</p>
<pre>mongodump --db MultiCollection</pre>
<p>Here is the output</p>
<pre>connected to: 127.0.0.1
Thu Jan 31 16:16:52 DATABASE: MultiCollection    to     dump/MultiCollection
Thu Jan 31 16:16:52     MultiCollection.Blog to dump/MultiCollection/Blog.bson
Thu Jan 31 16:16:52              5 objects
Thu Jan 31 16:16:52     Metadata for MultiCollection.Blog to dump/MultiCollection/Blog.metadata.json
Thu Jan 31 16:16:52     MultiCollection.People to dump/MultiCollection/People.bson
Thu Jan 31 16:16:52              5 objects
Thu Jan 31 16:16:52 Metadata for MultiCollection.People to dump/MultiCollection/People.metadata.json

C:NoSQLmongodbbin&gt;</pre>
<p>Now let&#8217;s add one more item to the People collection</p>
<pre>db.People.insert( { name : "ZZZZZZ",  age : 9999 } )</pre>
<p>Time to do the restore</p>
<pre>mongorestore dump/MultiCollection</pre>
<p>Here is the output</p>
<pre>connected to: 127.0.0.1
Thu Jan 31 16:20:52 dump/MultiCollection/Blog.bson
Thu Jan 31 16:20:52     going into namespace [MultiCollection.Blog]
Thu Jan 31 16:20:52 warning: Restoring to MultiCollection.Blog without dropping. Restored data will be inserted
raising errors; check your server log
5 objects found
Thu Jan 31 16:20:52     Creating index: { key: { _id: 1 }, ns: "MultiCollection.Blog", name: "_id_" }
Thu Jan 31 16:20:52 dump/MultiCollection/People.bson
Thu Jan 31 16:20:52     going into namespace [MultiCollection.People]
5 objects found
Thu Jan 31 16:20:52     Creating index: { key: { _id: 1 }, ns: "MultiCollection.People", name: "_id_" }</pre>
<p>Let&#8217;s take a look at what we have<br />
We should have 5 items since we did a backup before we added item 6, we restored that backup</p>
<pre>db.People.find()</pre>
<p>Output is here</p>
<pre>{ "_id" : ObjectId("510adec2d9a67956d3f4a44b"), "name" : "AADenis", "age" : 16 }
{ "_id" : ObjectId("510adec2d9a67956d3f4a44c"), "name" : "AAAbe", "age" : 24 }
{ "_id" : ObjectId("510adec2d9a67956d3f4a44d"), "name" : "AAJohn", "age" : 32 }
{ "_id" : ObjectId("510adec2d9a67956d3f4a44e"), "name" : "AAXavier", "age" : 8 }
{ "_id" : ObjectId("510adec5d9a67956d3f4a44f"), "name" : "AAZen", "age" : 40 }
{ "_id" : ObjectId("510ae0b8d9a67956d3f4a451"), "name" : "ZZZZZZ", "age" : 9999 }</pre>
<p>Something is not right, we still have 6 items. If you look back at the restore output, you will see the following warning</p>
<blockquote><p>warning: Restoring to MultiCollection.Blog without dropping. Restored data will be inserted<br />
raising errors; check your server log</p></blockquote>
<p>What we have to do is drop the collections first, you do that by specifying <code>--drop</code></p>
<p>Let&#8217;s do the restore again but now with the &#8211;drop option</p>
<pre>mongorestore dump/MultiCollection --drop</pre>
<p>Here is the output </p>
<pre>connected to: 127.0.0.1
Thu Jan 31 16:25:26 dump/MultiCollection/Blog.bson
Thu Jan 31 16:25:26     going into namespace [MultiCollection.Blog]
Thu Jan 31 16:25:26      dropping
5 objects found
Thu Jan 31 16:25:26     Creating index: { key: { _id: 1 }, ns: "MultiCollection.Blog", name: "_id_" }
Thu Jan 31 16:25:26 dump/MultiCollection/People.bson
Thu Jan 31 16:25:26     going into namespace [MultiCollection.People]
Thu Jan 31 16:25:26      dropping
5 objects found
Thu Jan 31 16:25:26     Creating index: { key: { _id: 1 }, ns: "MultiCollection.People", name: "_id_" }</pre>
<pre>db.People.find()</pre>
<p>Here are the results</p>
<pre>{ "_id" : ObjectId("510adec2d9a67956d3f4a44b"), "name" : "AADenis", "age" : 16 }
{ "_id" : ObjectId("510adec2d9a67956d3f4a44c"), "name" : "AAAbe", "age" : 24 }
{ "_id" : ObjectId("510adec2d9a67956d3f4a44d"), "name" : "AAJohn", "age" : 32 }
{ "_id" : ObjectId("510adec2d9a67956d3f4a44e"), "name" : "AAXavier", "age" : 8 }
{ "_id" : ObjectId("510adec5d9a67956d3f4a44f"), "name" : "AAZen", "age" : 40 }</pre>
<p>As you can see we have 5 items now</p>
<p>Let&#8217;s insert the same item again</p>
<pre>db.People.insert( { name : "ZZZZZZ",  age : 9999 } )</pre>
<p>Let&#8217;s also drop the Blog collection</p>
<pre>db.Blog.drop()</pre>
<p>Now if you do a find nothing is there</p>
<pre>db.Blog.find()</pre>
<p>In order to restore a collection, you need to use the &#8211;collection option and give the collection name, you also need to specify where the backup file is. In our case it is dump/Multicollection/Blog.bson. You will also see that information from the dump output<br />
<blockquote>MultiCollection.Blog to dump/MultiCollection/Blog.bson</p></blockquote>
<p>Run the following</p>
<pre>mongorestore --db MultiCollection --collection Blog dump/Multicollection/Blog.bson</pre>
<p>Here is the output</p>
<pre>connected to: 127.0.0.1
Thu Jan 31 17:01:28 dump/Multicollection/Blog.bson
Thu Jan 31 17:01:28     going into namespace [MultiCollection.Blog]
5 objects found
Thu Jan 31 17:01:28     Creating index: { key: { _id: 1 }, ns: "MultiCollection.Blog", name: "_id_" }</pre>
<p>Since we already dropped the collection manually we didn&#8217;t have to add the drop option. Let&#8217;s see what we have in the database now, People should have 6 items and Blog should have 5 items</p>
<pre>db.Blog.find()
{ "_id" : ObjectId("510adec1d9a67956d3f4a446"), "name" : "Denis", "age" : 20 }
{ "_id" : ObjectId("510adec1d9a67956d3f4a447"), "name" : "Abe", "age" : 30 }
{ "_id" : ObjectId("510adec2d9a67956d3f4a448"), "name" : "John", "age" : 40 }
{ "_id" : ObjectId("510adec2d9a67956d3f4a449"), "name" : "Xavier", "age" : 10 }
{ "_id" : ObjectId("510adec2d9a67956d3f4a44a"), "name" : "Zen", "age" : 50 }

db.People.find()
{ "_id" : ObjectId("510adec2d9a67956d3f4a44b"), "name" : "AADenis", "age" : 16 }
{ "_id" : ObjectId("510adec2d9a67956d3f4a44c"), "name" : "AAAbe", "age" : 24 }
{ "_id" : ObjectId("510adec2d9a67956d3f4a44d"), "name" : "AAJohn", "age" : 32 }
{ "_id" : ObjectId("510adec2d9a67956d3f4a44e"), "name" : "AAXavier", "age" : 8 }
{ "_id" : ObjectId("510adec5d9a67956d3f4a44f"), "name" : "AAZen", "age" : 40 }
{ "_id" : ObjectId("510ae75cd9a67956d3f4a453"), "name" : "ZZZZZZ", "age" : 9999 }</pre>
<p>As you can see the People collection did not get overwritten and the Blog collection got restored</p>
<p>That is all for this post, if you are interested in my other MongoDB posts, you can find them here:<br />
<a href="/index.php/DataMgmt/DBProgramming/creating-mongodb-as-a-service">Install MongoDB as a Windows Service</a><br />
<a href="/index.php/DataMgmt/DBProgramming/doing-upserts-in-mongodb">UPSERTs with MongoDB</a><br />
<a href="/index.php/DataMgmt/DBProgramming/mongodb-how-to-sort-results">How to sort results in MongoDB</a><br />
<a href="/index.php/DataMgmt/DBProgramming/indexes-in-mongodb">Indexes in MongoDB: A quick overview</a><br />
<a href="/index.php/DataMgmt/DBProgramming/multidocument-updates-with-mongodb">Multidocument updates with MongoDB</a><br />
<a href="/index.php/DataMgmt/DBProgramming/mongodb-how-to-include-and">MongoDB: How to include and exclude the fields you want in results</a><br />
<a href="/index.php/DataMgmt/DBAdmin/MSSQLServerAdmin/mongodb-how-to-limit-results">MongoDB: How to limit results and how to page through results</a><br />
<a href="/index.php/DataMgmt/DBAdmin/MSSQLServerAdmin/mongodb-backup-and-restore-databases">MongoDB: How to backup and restore databases</a></p>
]]></content:encoded>
			<wfw:commentRss>/index.php/datamgmt/dbadmin/mongodb-how-to-restore-collections/feed/</wfw:commentRss>
		<slash:comments>0</slash:comments>
		</item>
	</channel>
</rss>
