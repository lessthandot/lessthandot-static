<?xml version="1.0" encoding="UTF-8"?><rss version="2.0"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:atom="http://www.w3.org/2005/Atom"
	xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
	xmlns:slash="http://purl.org/rss/1.0/modules/slash/"
	>

<channel>
	<title>asp.net &#8211; LessthanDot</title>
	<atom:link href="/index.php/tag/asp-net/feed/" rel="self" type="application/rss+xml" />
	<link>/</link>
	<description>A Technical Community for IT Professionals</description>
	<lastBuildDate>Sat, 09 Mar 2019 12:50:36 +0000</lastBuildDate>
	<language>en-US</language>
	<sy:updatePeriod>hourly</sy:updatePeriod>
	<sy:updateFrequency>1</sy:updateFrequency>
	<generator>https://wordpress.org/?v=4.6.1</generator>
	<item>
		<title>ASP.Net &#8211; Ensure your Actions aren&#8217;t missing Authorization with Unit Tests</title>
		<link>/index.php/webdev/asp-net-ensure-your-actions-arent-missing-authorization-with-unit-tests/</link>
		<comments>/index.php/webdev/asp-net-ensure-your-actions-arent-missing-authorization-with-unit-tests/#comments</comments>
		<pubDate>Fri, 08 Apr 2016 13:44:47 +0000</pubDate>
		<dc:creator><![CDATA[Eli Weinstock-Herman (tarwn)]]></dc:creator>
				<category><![CDATA[ASP.NET]]></category>
		<category><![CDATA[Web Developer]]></category>
		<category><![CDATA[asp.net]]></category>
		<category><![CDATA[reflection]]></category>

		<guid isPermaLink="false">/?p=4470</guid>
		<description><![CDATA[Have you ever found yourself working on an ASP.net Action and noticed there isn&#8217;t a single Authorization attribute in sight? Or gone to edit an endpoint in WebAPI, only to realize you took a coffee break at exactly the wrong time and forgot to come back and add the authorization attribute&#8230;a month ago? Or the [&#8230;]]]></description>
				<content:encoded><![CDATA[<p>Have you ever found yourself working on an ASP.net Action and noticed there isn&#8217;t a single Authorization attribute in sight? Or gone to edit an endpoint in WebAPI, only to realize you took a coffee break at exactly the wrong time and forgot to come back and add the authorization attribute&#8230;a month ago? Or the time you found an MVC endpoint with WebAPI Authorization attributes on it? </p>
<p>While relying on code reviews and regular reminders to the team can reduce occurrences of this, we&#8217;re human and can only catch so much. Instead, it would be nice if a warning popped up before we ever pushed the code out: &#8220;You haven&#8217;t defined authentication for the XYZ endpoint yet!&#8221;. Luckily we have a CI environment (right???), so we can use Unit Tests to provide that warning and serve as a safety net to make sure we can&#8217;t push unprotected endpoints out to production.</p>
<p>Code for this post: <a href="https://github.com/tarwn/Blog_KnockoutMVVMPatterns/blob/master/CrossPlatformApp/CrossPlatformAppTests/AuthorizationSafetyNetTests.cs" title="Github: tarwn/Blog_KnockoutMVVMPatterns/.../AuthorizationSafetyNetTests.cs on github">Github: tarwn/Blog_KnockoutMVVMPatterns/&#8230;/AuthorizationSafetyNetTests.cs</a></p>
<h2>Detecting Authentication Holes for ASP.Net MVC</h2>
<p>The key ingredients of the test are going to be searching all of the Actions in Controllers and identifying whether they have a specific type of attribute at the Action, Controller, or Global level. A quick search could end you up on a StackOverflow post like these:</p>
<ul>
<li><a href="http://stackoverflow.com/questions/5796909/is-there-a-way-to-iterate-all-controllers-actions-in-an-asp-net-mvc3-site" title="StackOverflow: Is there a way to Iterate all Controllers/Actions in an ASP.NET MVC3 Site?">Is there a way to Iterate all Controllers/Actions in an ASP.NET MVC3 Site?</a></li>
<li><a href="http://stackoverflow.com/questions/21583278/getting-all-controllers-and-actions-names-in-c-sharp" title="StackOverflow: Getting All Controllers and Actions names in C#">Getting All Controllers and Actions names in C#</a></li>
</ul>
<p>The second actually has better examples which we can repurpose into a unit test:</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="csharp"><thead><tr><td colspan="2"  class="head">C#</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
</pre></td><td class="de1"><pre class="de1">Assembly asm <span class="sy0">=</span> Assembly<span class="sy0">.</span><span class="me1">GetExecutingAssembly</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
asm<span class="sy0">.</span><span class="me1">GetTypes</span><span class="br0">&#40;</span><span class="br0">&#41;</span>
&nbsp; &nbsp; <span class="sy0">.</span><span class="kw1">Where</span><span class="br0">&#40;</span>type<span class="sy0">=&gt;</span> <span class="kw3">typeof</span><span class="br0">&#40;</span>Controller<span class="br0">&#41;</span><span class="sy0">.</span><span class="me1">IsAssignableFrom</span><span class="br0">&#40;</span>type<span class="br0">&#41;</span><span class="br0">&#41;</span> <span class="co1">//filter controllers</span>
&nbsp; &nbsp; <span class="sy0">.</span><span class="me1">SelectMany</span><span class="br0">&#40;</span>type <span class="sy0">=&gt;</span> type<span class="sy0">.</span><span class="me1">GetMethods</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#41;</span>
&nbsp; &nbsp; <span class="sy0">.</span><span class="kw1">Where</span><span class="br0">&#40;</span>method <span class="sy0">=&gt;</span> method<span class="sy0">.</span><span class="me1">IsPublic</span> <span class="sy0">&amp;&amp;</span> <span class="sy0">!</span> method<span class="sy0">.</span><span class="me1">IsDefined</span><span class="br0">&#40;</span><span class="kw3">typeof</span><span class="br0">&#40;</span>NonActionAttribute<span class="br0">&#41;</span><span class="br0">&#41;</span><span class="br0">&#41;</span><span class="sy0">;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">Assembly asm = Assembly.GetExecutingAssembly();

asm.GetTypes()
    .Where(type=&gt; typeof(Controller).IsAssignableFrom(type)) //filter controllers
    .SelectMany(type =&gt; type.GetMethods())
    .Where(method =&gt; method.IsPublic &amp;&amp; ! method.IsDefined(typeof(NonActionAttribute)));</pre></div></div>

<p>For the purposes of this example, I know all of my MVC actions will have either an Authorization attribute implementing IAuthorizationFilter or the AllowAnonymous Attribute, so I can write a test that loops through each controller and then each action capturing a list of Actions that do not have one of these:</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="csharp"><thead><tr><td colspan="2"  class="head">C#</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
</pre></td><td class="de1"><pre class="de1"><span class="co1">// 0</span>
Func<span class="sy0">&lt;</span><span class="kw4">object</span>, <span class="kw4">bool</span><span class="sy0">&gt;</span> IsMVCAttributeAuth <span class="sy0">=</span> <span class="br0">&#40;</span>o<span class="br0">&#41;</span> <span class="sy0">=&gt;</span> <span class="br0">&#40;</span>o <span class="kw3">is</span> <span class="kw5">System.<span class="me1">Web</span></span><span class="sy0">.</span><span class="me1">Mvc</span><span class="sy0">.</span><span class="me1">IAuthorizationFilter</span> <span class="sy0">||</span> 
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; o <span class="kw3">is</span> <span class="kw5">System.<span class="me1">Web</span></span><span class="sy0">.</span><span class="me1">Mvc</span><span class="sy0">.</span><span class="me1">AllowAnonymousAttribute</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
<span class="br0">&#91;</span>Test<span class="br0">&#93;</span>
<span class="kw1">public</span> <span class="kw4">void</span> AllMvcActionsHaveExplicitAuthorizationDefined_UsingStandardReflection<span class="br0">&#40;</span><span class="br0">&#41;</span>
<span class="br0">&#123;</span>
&nbsp; &nbsp; <span class="kw1">var</span> actionsMissingAuth <span class="sy0">=</span> <span class="kw3">new</span> List<span class="sy0">&lt;</span><span class="kw4">string</span><span class="sy0">&gt;</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; <span class="co1">// 1</span>
&nbsp; &nbsp; <span class="kw1">var</span> controllers <span class="sy0">=</span> Assembly<span class="sy0">.</span><span class="me1">GetAssembly</span><span class="br0">&#40;</span><span class="kw3">typeof</span><span class="br0">&#40;</span>HomeController<span class="br0">&#41;</span><span class="br0">&#41;</span><span class="sy0">.</span><span class="me1">GetTypes</span><span class="br0">&#40;</span><span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="sy0">.</span><span class="kw1">Where</span><span class="br0">&#40;</span>t <span class="sy0">=&gt;</span> <span class="kw3">typeof</span><span class="br0">&#40;</span>IController<span class="br0">&#41;</span><span class="sy0">.</span><span class="me1">IsAssignableFrom</span><span class="br0">&#40;</span>t<span class="br0">&#41;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; <span class="kw1">foreach</span> <span class="br0">&#40;</span><span class="kw1">var</span> controller <span class="kw1">in</span> controllers<span class="br0">&#41;</span>
&nbsp; &nbsp; <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="co1">// 2</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="co1">// if the controller has it, all it's actions are covered also</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">if</span> <span class="br0">&#40;</span>controller<span class="sy0">.</span><span class="me1">GetCustomAttributes</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">.</span><span class="me1">Any</span><span class="br0">&#40;</span>a <span class="sy0">=&gt;</span> IsMVCAttributeAuth<span class="br0">&#40;</span>a<span class="br0">&#41;</span><span class="br0">&#41;</span><span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">continue</span><span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">var</span> actions <span class="sy0">=</span> controller<span class="sy0">.</span><span class="me1">GetMethods</span><span class="br0">&#40;</span>BindingFlags<span class="sy0">.</span><span class="me1">Instance</span> <span class="sy0">|</span> 
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; BindingFlags<span class="sy0">.</span><span class="me1">DeclaredOnly</span> <span class="sy0">|</span> 
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; BindingFlags<span class="sy0">.</span><span class="kw1">Public</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">foreach</span> <span class="br0">&#40;</span><span class="kw1">var</span> action <span class="kw1">in</span> actions<span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="co1">// 3</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="co1">// if the action has a defined authorization filter, it's covered</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">if</span> <span class="br0">&#40;</span>action<span class="sy0">.</span><span class="me1">GetCustomAttributes</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">.</span><span class="me1">Any</span><span class="br0">&#40;</span>a <span class="sy0">=&gt;</span> IsMVCAttributeAuth<span class="br0">&#40;</span>a<span class="br0">&#41;</span><span class="br0">&#41;</span><span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">continue</span><span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="co1">// no controller or action defined, add it to the list</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; actionsMissingAuth<span class="sy0">.</span><span class="kw1">Add</span><span class="br0">&#40;</span><span class="kw4">String</span><span class="sy0">.</span><span class="me1">Format</span><span class="br0">&#40;</span><span class="st0">&quot;{0}.{1}&quot;</span>, controller<span class="sy0">.</span><span class="me1">Name</span>, action<span class="sy0">.</span><span class="me1">Name</span><span class="br0">&#41;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp;
&nbsp; &nbsp; <span class="co1">// 4</span>
&nbsp; &nbsp; <span class="kw1">if</span> <span class="br0">&#40;</span>actionsMissingAuth<span class="sy0">.</span><span class="me1">Any</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#41;</span>
&nbsp; &nbsp; <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; Assert<span class="sy0">.</span><span class="me1">Fail</span><span class="br0">&#40;</span><span class="kw4">String</span><span class="sy0">.</span><span class="me1">Format</span><span class="br0">&#40;</span><span class="st0">&quot;{0} action(s) do not have explicit authorization: {1}&quot;</span>,
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; actionsMissingAuth<span class="sy0">.</span><span class="me1">Count</span>,
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw4">String</span><span class="sy0">.</span><span class="kw1">Join</span><span class="br0">&#40;</span><span class="st0">&quot;,&quot;</span>, actionsMissingAuth<span class="br0">&#41;</span><span class="br0">&#41;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; <span class="br0">&#125;</span>
<span class="br0">&#125;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">// 0
Func&lt;object, bool&gt; IsMVCAttributeAuth = (o) =&gt; (o is System.Web.Mvc.IAuthorizationFilter || 
                                                o is System.Web.Mvc.AllowAnonymousAttribute);

[Test]
public void AllMvcActionsHaveExplicitAuthorizationDefined_UsingStandardReflection()
{
    var actionsMissingAuth = new List&lt;string&gt;();

    // 1
    var controllers = Assembly.GetAssembly(typeof(HomeController)).GetTypes()
			      .Where(t =&gt; typeof(IController).IsAssignableFrom(t));

    foreach (var controller in controllers)
    {
        // 2
        // if the controller has it, all it's actions are covered also
        if (controller.GetCustomAttributes().Any(a =&gt; IsMVCAttributeAuth(a)))
            continue;

        var actions = controller.GetMethods(BindingFlags.Instance | 
                                            BindingFlags.DeclaredOnly | 
                                            BindingFlags.Public);
        foreach (var action in actions)
        {
            // 3
            // if the action has a defined authorization filter, it's covered
            if (action.GetCustomAttributes().Any(a =&gt; IsMVCAttributeAuth(a)))
                continue;

            // no controller or action defined, add it to the list
            actionsMissingAuth.Add(String.Format("{0}.{1}", controller.Name, action.Name));
        }
    }

    // 4
    if (actionsMissingAuth.Any())
    {
        Assert.Fail(String.Format("{0} action(s) do not have explicit authorization: {1}",
        			  actionsMissingAuth.Count,
        			  String.Join(",", actionsMissingAuth)));
    }
}</pre></div></div>

<ul>
<li>0: For readability in the tests, I moved the attribute check to an external variable</li>
<li>1: We&#8217;re in a separate test assembly, so get the assembly for the HomeController and get all types that implement IController</li>
<li>2: If any attributes on the controller match the attribute test, continue to the next controller (all of the actions are covered)</li>
<li>3: If any attributes on each action match the test, skip to the next attribute</li>
<li>4: After collecting a list of actions that are missing auth, we can now product a test failure message with the relevant information</li>
</ul>
<p>In my sample code I have an Action called &#8220;AccidentalOpenEndpoint&#8221; in my HomeController to show the test in action:</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="text"><thead><tr><td colspan="2"  class="head">Text</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
</pre></td><td class="de1"><pre class="de1">1 action(s) do not have explicit authorization: HomeController.AccidentalOpenEndpoint
&nbsp; &nbsp;at NUnit.Framework.Assert.Fail(String message, Object[] args)
&nbsp; &nbsp;at NUnit.Framework.Assert.Fail(String message)
&nbsp; &nbsp;at CrossPlatformAppTests.AuthorizationSafetyNetTests.AllMvcActionsHaveExplicitAuthorizationDefined_UsingStandardReflection() in E:\programming\KnockoutPostBigApp\CrossPlatformApp\CrossPlatformAppTests\AuthorizationSafetyNetTests.cs:line 68</pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">1 action(s) do not have explicit authorization: HomeController.AccidentalOpenEndpoint
   at NUnit.Framework.Assert.Fail(String message, Object[] args)
   at NUnit.Framework.Assert.Fail(String message)
   at CrossPlatformAppTests.AuthorizationSafetyNetTests.AllMvcActionsHaveExplicitAuthorizationDefined_UsingStandardReflection() in E:\programming\KnockoutPostBigApp\CrossPlatformApp\CrossPlatformAppTests\AuthorizationSafetyNetTests.cs:line 68</pre></div></div>

<p>This is good, but we can do better by taking advantage of the built in <a href="https://msdn.microsoft.com/en-us/library/system.web.mvc.reflectedcontrollerdescriptor%28v=vs.118%29.aspx" title="MSDN: ReflectedControllerDescriptor">ReflectedControllerDescriptor</a> class.</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="csharp"><thead><tr><td colspan="2"  class="head">C#</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
</pre></td><td class="de1"><pre class="de1"><span class="br0">&#91;</span>Test<span class="br0">&#93;</span>
<span class="kw1">public</span> <span class="kw4">void</span> AllMvcActionsHaveExplicitAuthorizationDefined<span class="br0">&#40;</span><span class="br0">&#41;</span>
<span class="br0">&#123;</span>
&nbsp; &nbsp; <span class="co1">// 1</span>
&nbsp; &nbsp; <span class="kw1">var</span> controllers <span class="sy0">=</span> Assembly<span class="sy0">.</span><span class="me1">GetAssembly</span><span class="br0">&#40;</span><span class="kw3">typeof</span><span class="br0">&#40;</span>HomeController<span class="br0">&#41;</span><span class="br0">&#41;</span><span class="sy0">.</span><span class="me1">GetTypes</span><span class="br0">&#40;</span><span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="sy0">.</span><span class="kw1">Where</span><span class="br0">&#40;</span>t <span class="sy0">=&gt;</span> <span class="kw3">typeof</span><span class="br0">&#40;</span>IController<span class="br0">&#41;</span><span class="sy0">.</span><span class="me1">IsAssignableFrom</span><span class="br0">&#40;</span>t<span class="br0">&#41;</span><span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="sy0">.</span><span class="kw1">Select</span><span class="br0">&#40;</span>c <span class="sy0">=&gt;</span> <span class="kw3">new</span> ReflectedControllerDescriptor<span class="br0">&#40;</span>c<span class="br0">&#41;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; <span class="co1">// 2</span>
&nbsp; &nbsp; <span class="kw1">var</span> actionsMissingAuth <span class="sy0">=</span> controllers<span class="sy0">.</span><span class="me1">SelectMany</span><span class="br0">&#40;</span>c <span class="sy0">=&gt;</span> c<span class="sy0">.</span><span class="me1">GetCanonicalActions</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#41;</span>
&nbsp; &nbsp; <span class="co1">// 3</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="sy0">.</span><span class="kw1">Where</span><span class="br0">&#40;</span>a <span class="sy0">=&gt;</span> <span class="sy0">!</span>a<span class="sy0">.</span><span class="me1">GetCustomAttributes</span><span class="br0">&#40;</span><span class="kw1">true</span><span class="br0">&#41;</span><span class="sy0">.</span><span class="me1">Any</span><span class="br0">&#40;</span>ca <span class="sy0">=&gt;</span> IsMVCAttributeAuth<span class="br0">&#40;</span>ca<span class="br0">&#41;</span><span class="br0">&#41;</span> <span class="sy0">&amp;&amp;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="sy0">!</span>a<span class="sy0">.</span><span class="me1">ControllerDescriptor</span><span class="sy0">.</span><span class="me1">ControllerType</span><span class="sy0">.</span><span class="me1">GetCustomAttributes</span><span class="br0">&#40;</span><span class="kw1">true</span><span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="sy0">.</span><span class="me1">Any</span><span class="br0">&#40;</span>c <span class="sy0">=&gt;</span> IsMVCAttributeAuth<span class="br0">&#40;</span>c<span class="br0">&#41;</span><span class="br0">&#41;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; <span class="co1">// 4</span>
&nbsp; &nbsp; <span class="kw1">if</span> <span class="br0">&#40;</span>actionsMissingAuth<span class="sy0">.</span><span class="me1">Any</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#41;</span>
&nbsp; &nbsp; <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">var</span> errorStrings <span class="sy0">=</span> actionsMissingAuth<span class="sy0">.</span><span class="kw1">Select</span><span class="br0">&#40;</span>a <span class="sy0">=&gt;</span> <span class="kw4">String</span><span class="sy0">.</span><span class="me1">Format</span><span class="br0">&#40;</span><span class="st0">&quot;{0}.{1}&quot;</span>, a<span class="sy0">.</span><span class="me1">ControllerDescriptor</span><span class="sy0">.</span><span class="me1">ControllerType</span><span class="sy0">.</span><span class="me1">Name</span>, a<span class="sy0">.</span><span class="me1">ActionName</span><span class="br0">&#41;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; Assert<span class="sy0">.</span><span class="me1">Fail</span><span class="br0">&#40;</span><span class="kw4">String</span><span class="sy0">.</span><span class="me1">Format</span><span class="br0">&#40;</span><span class="st0">&quot;{0} action(s) do not have explicit authorization: {1}&quot;</span>,
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; errorStrings<span class="sy0">.</span><span class="me1">Count</span><span class="br0">&#40;</span><span class="br0">&#41;</span>,
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw4">String</span><span class="sy0">.</span><span class="kw1">Join</span><span class="br0">&#40;</span><span class="st0">&quot;,&quot;</span>, errorStrings<span class="br0">&#41;</span><span class="br0">&#41;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; <span class="br0">&#125;</span>
<span class="br0">&#125;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">[Test]
public void AllMvcActionsHaveExplicitAuthorizationDefined()
{
    // 1
    var controllers = Assembly.GetAssembly(typeof(HomeController)).GetTypes()
                              .Where(t =&gt; typeof(IController).IsAssignableFrom(t))
                              .Select(c =&gt; new ReflectedControllerDescriptor(c));

    // 2
    var actionsMissingAuth = controllers.SelectMany(c =&gt; c.GetCanonicalActions())
    // 3
                                        .Where(a =&gt; !a.GetCustomAttributes(true).Any(ca =&gt; IsMVCAttributeAuth(ca)) &amp;&amp;
                                                    !a.ControllerDescriptor.ControllerType.GetCustomAttributes(true)
                                                                                .Any(c =&gt; IsMVCAttributeAuth(c)));
    // 4
    if (actionsMissingAuth.Any())
    {
        var errorStrings = actionsMissingAuth.Select(a =&gt; String.Format("{0}.{1}", a.ControllerDescriptor.ControllerType.Name, a.ActionName));
        Assert.Fail(String.Format("{0} action(s) do not have explicit authorization: {1}",
                                  errorStrings.Count(),
                                  String.Join(",", errorStrings)));
    }
}</pre></div></div>

<ul>
<li>1: Once again get all of the IController implementations in the assembly for HomeController, but this time wrap them in ReflectedControllerDescriptor&#8217;s</li>
<li>2: Use the ReflectedController&#8217;s built in &#8220;GetCanonicalActions&#8221; method to get a collection of ActionDescriptors</li>
<li>3: Get the attributes from the Action and it&#8217;s Controller and run them through the IsMVCAttributeAuth test</li>
<li>4: Once again, output a test failure message for Actions that didn&#8217;t pass the test</li>
</ul>
<p>This version is a lot more concise and has the additional advantage that it is using the same black magic internally to find Actions that MVC is, as opposed to use putting together a Flag enum for the fetMethods reflection call.</p>
<p>The output is the same:</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="text"><thead><tr><td colspan="2"  class="head">Text</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
</pre></td><td class="de1"><pre class="de1">1 action(s) do not have explicit authorization: HomeController.AccidentalOpenEndpoint
&nbsp; &nbsp;at NUnit.Framework.Assert.Fail(String message, Object[] args)
&nbsp; &nbsp;at NUnit.Framework.Assert.Fail(String message)
&nbsp; &nbsp;at CrossPlatformAppTests.AuthorizationSafetyNetTests.AllMvcActionsHaveExplicitAuthorizationDefined() in E:\programming\KnockoutPostBigApp\CrossPlatformApp\CrossPlatformAppTests\AuthorizationSafetyNetTests.cs:line 34</pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">1 action(s) do not have explicit authorization: HomeController.AccidentalOpenEndpoint
   at NUnit.Framework.Assert.Fail(String message, Object[] args)
   at NUnit.Framework.Assert.Fail(String message)
   at CrossPlatformAppTests.AuthorizationSafetyNetTests.AllMvcActionsHaveExplicitAuthorizationDefined() in E:\programming\KnockoutPostBigApp\CrossPlatformApp\CrossPlatformAppTests\AuthorizationSafetyNetTests.cs:line 34</pre></div></div>

<h2>Detecting Authentication Holes for WebAPI 2</h2>
<p>While we could use a reflection method for WebAPI also, there is actually a much better option available. WebAPI includes an <a href="https://blogs.msdn.microsoft.com/yaohuang1/2012/05/13/asp-net-web-api-introducing-iapiexplorerapiexplorer/" title="MSDN Blogs: ASP.NET Web API: Introducing IApiExplorer/ApiExplorer">APIExplorer</a> object that provides programmatic access to your WebAPI actions. It was built with documentation in mind, but also gives us exactly what we need to build an authentication verification test.</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="csharp"><thead><tr><td colspan="2"  class="head">C#</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
</pre></td><td class="de1"><pre class="de1"><span class="co1">// 0</span>
Func<span class="sy0">&lt;</span><span class="kw4">object</span>, <span class="kw4">bool</span><span class="sy0">&gt;</span> IsAPIAttributeAuth <span class="sy0">=</span> <span class="br0">&#40;</span>o<span class="br0">&#41;</span> <span class="sy0">=&gt;</span> <span class="br0">&#40;</span>o <span class="kw3">is</span> <span class="kw5">System.<span class="me1">Web</span></span><span class="sy0">.</span><span class="me1">Http</span><span class="sy0">.</span><span class="me1">Filters</span><span class="sy0">.</span><span class="me1">IAuthorizationFilter</span> <span class="sy0">||</span> 
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; o <span class="kw3">is</span> <span class="kw5">System.<span class="me1">Web</span></span><span class="sy0">.</span><span class="me1">Http</span><span class="sy0">.</span><span class="me1">AllowAnonymousAttribute</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
<span class="br0">&#91;</span>Test<span class="br0">&#93;</span>
<span class="kw1">public</span> <span class="kw4">void</span> AllApiActionsHaveExplicitAuthorizationDefined<span class="br0">&#40;</span><span class="br0">&#41;</span>
<span class="br0">&#123;</span>
&nbsp; &nbsp; <span class="co1">// 1</span>
&nbsp; &nbsp; <span class="kw1">var</span> httpConfiguration <span class="sy0">=</span> <span class="kw3">new</span> HttpConfiguration<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; WebApiConfig<span class="sy0">.</span><span class="me1">Register</span><span class="br0">&#40;</span>httpConfiguration<span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; httpConfiguration<span class="sy0">.</span><span class="me1">EnsureInitialized</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; <span class="kw1">var</span> explorer <span class="sy0">=</span> httpConfiguration<span class="sy0">.</span><span class="me1">Services</span><span class="sy0">.</span><span class="me1">GetApiExplorer</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; <span class="co1">// 2</span>
&nbsp; &nbsp; <span class="kw1">var</span> actionsMissingAuth <span class="sy0">=</span> explorer<span class="sy0">.</span><span class="me1">ApiDescriptions</span><span class="sy0">.</span><span class="kw1">Where</span><span class="br0">&#40;</span>a <span class="sy0">=&gt;</span> <span class="sy0">!</span>a<span class="sy0">.</span><span class="me1">ActionDescriptor</span><span class="sy0">.</span><span class="me1">GetCustomAttributes</span><span class="sy0">&lt;</span><span class="kw4">object</span><span class="sy0">&gt;</span><span class="br0">&#40;</span><span class="kw1">true</span><span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="sy0">.</span><span class="me1">Any</span><span class="br0">&#40;</span>o <span class="sy0">=&gt;</span> IsAPIAttributeAuth<span class="br0">&#40;</span>o<span class="br0">&#41;</span><span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="sy0">&amp;&amp;</span> <span class="sy0">!</span>a<span class="sy0">.</span><span class="me1">ActionDescriptor</span><span class="sy0">.</span><span class="me1">ControllerDescriptor</span><span class="sy0">.</span><span class="me1">ControllerType</span><span class="sy0">.</span><span class="me1">GetCustomAttributes</span><span class="br0">&#40;</span><span class="kw1">true</span><span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span class="sy0">.</span><span class="me1">Any</span><span class="br0">&#40;</span>o <span class="sy0">=&gt;</span> IsAPIAttributeAuth<span class="br0">&#40;</span>o<span class="br0">&#41;</span><span class="br0">&#41;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; <span class="co1">// 3</span>
&nbsp; &nbsp; <span class="kw1">if</span> <span class="br0">&#40;</span>actionsMissingAuth<span class="sy0">.</span><span class="me1">Any</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#41;</span>
&nbsp; &nbsp; <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">var</span> errorStrings <span class="sy0">=</span> actionsMissingAuth<span class="sy0">.</span><span class="kw1">Select</span><span class="br0">&#40;</span>a <span class="sy0">=&gt;</span> <span class="kw4">String</span><span class="sy0">.</span><span class="me1">Format</span><span class="br0">&#40;</span><span class="st0">&quot;{0}.{1}&quot;</span>,
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; a<span class="sy0">.</span><span class="me1">ActionDescriptor</span><span class="sy0">.</span><span class="me1">ControllerDescriptor</span><span class="sy0">.</span><span class="me1">ControllerType</span><span class="sy0">.</span><span class="me1">Name</span>, &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; a<span class="sy0">.</span><span class="me1">ActionDescriptor</span><span class="sy0">.</span><span class="me1">ActionName</span><span class="br0">&#41;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; Assert<span class="sy0">.</span><span class="me1">Fail</span><span class="br0">&#40;</span><span class="kw4">String</span><span class="sy0">.</span><span class="me1">Format</span><span class="br0">&#40;</span><span class="st0">&quot;{0} action(s) do not have explicit authorization: {1}&quot;</span>,
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; errorStrings<span class="sy0">.</span><span class="me1">Count</span><span class="br0">&#40;</span><span class="br0">&#41;</span>,
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw4">String</span><span class="sy0">.</span><span class="kw1">Join</span><span class="br0">&#40;</span><span class="st0">&quot;,&quot;</span>, errorStrings<span class="br0">&#41;</span><span class="br0">&#41;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; <span class="br0">&#125;</span>
<span class="br0">&#125;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">// 0
Func&lt;object, bool&gt; IsAPIAttributeAuth = (o) =&gt; (o is System.Web.Http.Filters.IAuthorizationFilter || 
                                                o is System.Web.Http.AllowAnonymousAttribute);

[Test]
public void AllApiActionsHaveExplicitAuthorizationDefined()
{
    // 1
    var httpConfiguration = new HttpConfiguration();
    WebApiConfig.Register(httpConfiguration);
    httpConfiguration.EnsureInitialized();
    var explorer = httpConfiguration.Services.GetApiExplorer();

    // 2
    var actionsMissingAuth = explorer.ApiDescriptions.Where(a =&gt; !a.ActionDescriptor.GetCustomAttributes&lt;object&gt;(true)
                                                                                    .Any(o =&gt; IsAPIAttributeAuth(o))
                                                              &amp;&amp; !a.ActionDescriptor.ControllerDescriptor.ControllerType.GetCustomAttributes(true)
                                                                                     .Any(o =&gt; IsAPIAttributeAuth(o)));

    // 3
    if (actionsMissingAuth.Any())
    {
        var errorStrings = actionsMissingAuth.Select(a =&gt; String.Format("{0}.{1}",
                                                                        a.ActionDescriptor.ControllerDescriptor.ControllerType.Name,                                                                                 
                                                                        a.ActionDescriptor.ActionName));
        Assert.Fail(String.Format("{0} action(s) do not have explicit authorization: {1}",
                                  errorStrings.Count(),
                                  String.Join(",", errorStrings)));
    }
}</pre></div></div>

<p>Similar to the MVC test, we are looking for any actions that don&#8217;t have an attribute implementing IAuthorizationFilter or AllowAnonymous attribute.</p>
<ul>
<li>0: Once again, I extracted the attribute test out for readability</li>
<li>1: Set up an HttpConfiguration object using the the same WebApiConfig we call during the global.asax and get an ApiExplorer instance</li>
<li>2: Get all of the custom attributes for each action + action&#8217;s controller and find the ones that don&#8217;t have a match for the attribute test</li>
<li>3: produce a test failure error mssage if any actions are uncovered</li>
</ul>
<p>If, like me, you use NCrunch locally, then you get this nice Red warning without any extra effort:</p>
<a href="/wp-content/uploads/2016/03/ASPNetAuthTests.png"><img src="/wp-content/uploads/2016/03/ASPNetAuthTests.png" alt="NCrunch Test Output" class="size-full wp-image-4472" srcset="/wp-content/uploads/2016/03/ASPNetAuthTests.png 1014w, /wp-content/uploads/2016/03/ASPNetAuthTests-300x85.png 300w" sizes="(max-width: 1014px) 100vw, 1014px" /></a>
<p>And there we go, a safety net against accidentally pushing an open endpoint that is built in to every single unit test run. </p>
]]></content:encoded>
			<wfw:commentRss>/index.php/webdev/asp-net-ensure-your-actions-arent-missing-authorization-with-unit-tests/feed/</wfw:commentRss>
		<slash:comments>4</slash:comments>
		</item>
		<item>
		<title>ASP.NET MVC 4 Razor Starter Guide &#8211; How to avoid punching your Laptop to Death</title>
		<link>/index.php/webdev/uidevelopment/ajax/asp-net-mvc-4-razor-starter/</link>
		<comments>/index.php/webdev/uidevelopment/ajax/asp-net-mvc-4-razor-starter/#comments</comments>
		<pubDate>Mon, 02 Dec 2013 01:16:00 +0000</pubDate>
		<dc:creator><![CDATA[Tahir Khalid]]></dc:creator>
				<category><![CDATA[AJAX]]></category>
		<category><![CDATA[$ not defined]]></category>
		<category><![CDATA[asp.net]]></category>
		<category><![CDATA[c#]]></category>
		<category><![CDATA[mvc 4]]></category>
		<category><![CDATA[razor]]></category>
		<category><![CDATA[starter guide]]></category>

		<guid isPermaLink="false">/index.php/2013/12/asp-net-mvc-4-razor-starter/</guid>
		<description><![CDATA[Hello and welcome to my seocond blog post for LessThanDot (I think) and in this post I will discuss how to setup a working ASP.NET MVC 4 (with Razor) project using the Empty Template.
That's right, a blank project, I didn't want the templates doing the&#8230;]]></description>
				<content:encoded><![CDATA[<p>Hello and welcome to my blog post for LessThanDot and in this post I will discuss how to setup a working ASP.NET MVC 4 (with Razor) project using the Empty Template.</p>
<p>That&#8217;s right, a blank project, I didn&#8217;t want the templates doing the work for me, I wanted to create a lean project that I had control over and I thought this would be easy enough but I was very wrong and tripped over a couple of times so hopefully this post will avoid any confusion and pain for newbies to the world of ASP.NET MVC (and avoid having to punch their laptop to death).</p>
<p>&#8220;Wait you punched your laptop to death?!&#8221;</p>
<p><img src="http://www.vurso.co.uk/ltd/mvc-4-with-razor-starter-guide/punchedmylaptoptodeath.jpg" alt="Punched My Laptop To Death @ vurso.co.uk" width="350" height="85" /></p>
<p>Yes, metaphorically speaking as per my above tweet&#8230;I came close to actually doing it in real life, that&#8217;s how frustrated I was but alas frustration can often lead to lots of fun learning which I did in between the random expletives and &#8220;WTF!&#8221; shouts throughout this process.</p>
<p>So lets start, the first thing you want to do is <span style="background-color: #ffcc00;">NOT USE THE TEMPLATES!</span> I know I know, sounds crazy but trust me you want to do it right and this is the best way my friends.</p>
<p>Start Visual Studio 2012 and then select the ASP.NET MVC 4 project type:</p>
<p><img src="http://www.vurso.co.uk/ltd/mvc-4-with-razor-starter-guide/aspdotnetmvc4projtype.JPG" alt="ASP.NET MVC 4 Project Type" width="350" height="35" /></p>
<p>Give the project a meaningful name and then left-click the OK button to continue. You will then be presented with the following screen (Project Tempaltes), select the <span style="background-color: #99ccff;">Empty</span> Project type and left-click OK to continue.</p>
<p><img src="http://www.vurso.co.uk/ltd/mvc-4-with-razor-starter-guide/projecttemplates.jpg" alt="ASP.NET MVC 4 Project Templates" width="280" height="165" /></p>
<p>If everything goes to plan Visual Studio will start generating your project folders and files and present you with the Empty Solution:</p>
<p><img src="http://www.vurso.co.uk/ltd/mvc-4-with-razor-starter-guide/emptysolution.jpg" alt="ASP.NET MVC 4 Empty Solution" width="185" height="180" /></p>
<p>You will need to do a few things first before the project can actually work (i.e. if you want to use any kind of JavaScript/jquery/ajax and Web Content).  First we need to add some folders so right-click the project name (MvcApplication3 fro example) and select <span style="background-color: #99ccff;">Add &gt; </span><span style="background-color: #99ccff;">New Folder</span> and label it <span style="background-color: #99ccff;">Scripts</span> (or alternatively if you have created another template based MVC site such as the Internet one just drag the Scripts folder from Windws Explorer into your Visual Studio 2012 IDE and drop it onto the project name which will cause Visual Studio 2012 to take a copy of the folder and create it locally with files below your project).</p>
<p>Expand the Views folder which currently only has the web.config file.  Right-click the Views folder and select <span style="background-color: #99ccff;">Add &gt; </span><span style="background-color: #99ccff;">New Folder</span> labelling it <span style="background-color: #99ccff;">Home</span>.  Create another one and call it <span style="background-color: #99ccff;">Shared</span>, these two folders will contain the default views Index.cshtml and _Layout.cshtml (the shared view is like the MasterPage from the previous ASP.NET Form development days, it is used as a global view providing common page structure and other features across your views).</p>
<p>Now the important bit, you need to download the correct Web.Optimization package as its not included in your project and trying to create, build and compile any kind of web enabled page will cause no end of grief no less messages such as:</p>
<p><span style="font-size: 14px; line-height: 18px; background-color: #eeeeee;"><span style="font-family: 'courier new', courier;">Compiler Error Message: CS0103: The name &#8216;Scripts&#8217; does not exist in the current context</span></span></p>
<p>You may also see initial errors such as:</p>
<p><span style="font-size: 14px; line-height: 18px; background-color: #eeeeee;"><span style="font-family: 'courier new', courier;">$ is not defined</span></span></p>
<p>All these can be avoided by running the following command from the nuget package manager command line.  To access the command line you need to display the command window:</p>
<p><img src="http://www.vurso.co.uk/ltd/mvc-4-with-razor-starter-guide/nugetcommandline.jpg" alt="nuget Package Manager Command Line" width="434" height="185" /></p>
<p>Left-clicking the Command Line option will display a new command window at the bottom of your IDE which lets you enter nuget package manager specific commands.  Enter the following command to download the correct package for your project:</p>
<p><img src="http://www.vurso.co.uk/ltd/mvc-4-with-razor-starter-guide/nugetpackageget.jpg" alt="Get nuget package from Visual Studio 2012" width="321" height="100" /></p>
<p>Once the package has been downloaded you will need to configure your <span style="background-color: #99ccff;">Web.Config</span> files, <span style="background-color: #99ccff;">Global.asax</span> file and add a new class in the <span style="background-color: #99ccff;">App_Start</span> folder so lets do this now.</p>
<p>Open up your root Web.config file and add the following line below the other namespaces (in the pages &gt; namespaces section):</p>
<pre style="font-family: Consolas; font-size: 13; color: #dfdfbf; background: #333333;"><span style="font-size: small;">&lt;<span style="color: #efc986;">add</span> namespace="<span style="color: #dfaf8f;">System.Web.WebPages</span>" /&gt;</span><span style="font-family: Consolas;">
</span></pre>
<p>You will also need to do the same for your other web.config file located in the root of the Views folder.</p>
<p>Next you need to modify your <span style="background-color: #99ccff;">Global.asax</span> file located in the root of the project and add the following line below the other statements in the <span style="background-color: #99ccff;">Application_Start()</span> method:</p>
<pre style="font-family: Consolas; font-size: 13; color: #dfdfbf; background: #333333;"><span style="font-size: small;"><span style="color: #8acccf;">BundleConfig</span>.RegisterBundles(<span style="color: #8acccf;">BundleTable</span>.Bundles);</span><span style="font-family: Consolas;">
</span></pre>
<p>Now you need to add a new class called BundleConfig.cs in the App_Start folder.  Modify the using block to look like this:</p>
<pre style="color: #dfdfbf; background-color: #333333; background-position: initial initial; background-repeat: initial initial;"><span style="font-size: small;"><span style="color: #efc986;">using</span> System.Web;
<span style="color: #efc986;">using</span> System.Web.Optimization;</span></pre>
<p>Modify the contents of the class block to look like this:</p>
<pre style="color: #dfdfbf; background-color: #333333; background-position: initial initial; background-repeat: initial initial;"><span style="font-size: small;"><span style="color: #7a987a;">// For more information on Bundling, visit http://go.microsoft.com/fwlink/?LinkId=254725</span>
<span style="color: #efc986;">public</span> <span style="color: #efc986;">static</span> <span style="color: #efc986;">void</span> RegisterBundles(<span style="color: #8acccf;">BundleCollection</span> bundles)
{
    bundles.Add(<span style="color: #efc986;">new</span> <span style="color: #8acccf;">ScriptBundle</span>(<span style="color: #dfaf8f;">"~/bundles/jquery"</span>).Include(
                <span style="color: #dfaf8f;">"~/Scripts/jquery-{version}.js"</span>));
 
    bundles.Add(<span style="color: #efc986;">new</span> <span style="color: #8acccf;">ScriptBundle</span>(<span style="color: #dfaf8f;">"~/bundles/jqueryui"</span>).Include(
                <span style="color: #dfaf8f;">"~/Scripts/jquery-ui-{version}.js"</span>));
 
    bundles.Add(<span style="color: #efc986;">new</span> <span style="color: #8acccf;">ScriptBundle</span>(<span style="color: #dfaf8f;">"~/bundles/jqueryval"</span>).Include(
                <span style="color: #dfaf8f;">"~/Scripts/jquery.unobtrusive*"</span>,
                <span style="color: #dfaf8f;">"~/Scripts/jquery.validate*"</span>));
 
    <span style="color: #7a987a;">// Use the development version of Modernizr to develop with and learn from. Then, when you're</span>
    <span style="color: #7a987a;">// ready for production, use the build tool at http://modernizr.com to pick only the tests you need./</span>
    bundles.Add(<span style="color: #efc986;">new</span> <span style="color: #8acccf;">ScriptBundle</span>(<span style="color: #dfaf8f;">"~/bundles/modernizr"</span>).Include(
                <span style="color: #dfaf8f;">"~/Scripts/modernizr-*"</span>));
}</span></pre>
<p>Now save the file and we need to create a controller file and two view pages.  Right-click the Controllers folder and left-click on <span style="background-color: #99ccff;">Add &gt; Controller&#8230;</span> to display the New Controller dialog:</p>
<p><img src="http://www.vurso.co.uk/ltd/mvc-4-with-razor-starter-guide/newcontroller.jpg" alt="New MVC 4 Controller" width="280" height="145" /></p>
<p>Give it the name <span style="background-color: #99ccff;">HomeController</span> and left-click on Add to continue.  Now we need to create the Index view the controller will work with.  Before we do that we need to create a view that will <a title="ASP.NET MVC 3: Layouts with Razor" href="http://weblogs.asp.net/scottgu/archive/2010/10/22/asp-net-mvc-3-layouts.aspx" target="_blank">&#8220;automagically&#8221; assign the same razor layout</a> to all your views so right-click the <span style="background-color: #99ccff;">Views</span> folder and left-click on <span style="background-color: #99ccff;">Add &gt; View&#8230;</span> (VS 2012 is clever enough to recognise the context you&#8217;re in, in this case the Views folder).  The Add View dialog box will appear:</p>
<p><img src="http://www.vurso.co.uk/ltd/mvc-4-with-razor-starter-guide/addview.jpg" alt="ASP.NET MVC 4 Add View" width="200" height="252" /></p>
<p>Make sure you un-tick the &#8220;Use a layout or master page:&#8221; checkbox (as all your views will be using this <span style="background-color: #99ccff;">_ViewStart</span> file).</p>
<p>Now modify the file to look like this:</p>
<pre style="color: #dfdfbf; background-color: #333333; background-position: initial initial; background-repeat: initial initial;"><span style="font-size: small;">@{
    Layout = <span style="color: #dfaf8f;">"~/Views/Shared/_Layout.cshtml"</span>;
}</span></pre>
<p>Next we need to create the Index View so right-click the Home folder (the one you created earlier) and select <span style="background-color: #99ccff;">Add &gt; View&#8230;</span> to display the Add View dialog box and label this view page <span style="background-color: #99ccff;">Index</span> and finally left-click Add to create it.</p>
<p>Modify the contents of the file to look like this:</p>
<pre style="color: #dfdfbf; background-color: #333333; background-position: initial initial; background-repeat: initial initial;"><span style="font-size: small;">@{
    ViewBag.Title = <span style="color: #dfaf8f;">"My first LTD Mvc 4 Index Page"</span>;
}
@<span style="color: #efc986;">using</span> (Html.BeginForm())
{
     &lt;<span style="color: #efc986;">h1</span>&gt;Hello, World!&lt;/<span style="color: #efc986;">h1</span>&gt;
}</span></pre>
<p>Finally you need to create the shared layout view page, right-click the <span style="background-color: #99ccff;">Shared</span> folder and left-click <span style="background-color: #99ccff;">Add &gt; View&#8230;</span> to display the Add View dialog box, label the view page as <span style="background-color: #99ccff;">_Layout</span> and ensure as with the previous pages the &#8220;Use a layout or master page&#8221; checkbox is un-ticked.</p>
<p>Modify the <span style="background-color: #99ccff;">_Layout.cshtml</span> view page to look like this:</p>
<pre style="color: #dfdfbf; background-color: #333333; background-position: initial initial; background-repeat: initial initial;"><span style="font-size: small;">&lt;!<span style="color: #efc986;">DOCTYPE</span> html&gt;
&lt;<span style="color: #efc986;">html</span> lang=<span style="color: #dfaf8f;">"en"</span>&gt;
&lt;<span style="color: #efc986;">head</span>&gt;
    &lt;<span style="color: #efc986;">meta</span> name=<span style="color: #dfaf8f;">"viewport"</span> content=<span style="color: #dfaf8f;">"width=device-width"</span> /&gt;
    &lt;<span style="color: #efc986;">title</span>&gt;@ViewBag.Title&lt;/<span style="color: #efc986;">title</span>&gt;
&lt;/<span style="color: #efc986;">head</span>&gt;
&lt;<span style="color: #efc986;">body</span>&gt;
    &lt;<span style="color: #efc986;">div</span>&gt;
        @RenderBody()
    &lt;/<span style="color: #efc986;">div</span>&gt;
    @<span style="color: #8acccf;">Scripts</span>.Render(<span style="color: #dfaf8f;">"~/bundles/jquery"</span>)
    @RenderSection(<span style="color: #dfaf8f;">"scripts"</span>, required: <span style="color: #efc986;">false</span>)
&lt;/<span style="color: #efc986;">body</span>&gt;
&lt;/<span style="color: #efc986;">html</span>&gt;</span></pre>
<p>This should be enough for you to compile the project however it will still cause you pain unless you save your project and restart Visual Studio 2012, after which the references and page helpers should kick into life.</p>
<p>Build and Compile your project and then press <span style="background-color: #99ccff;">F5</span> or click on the <span style="background-color: #99ccff;">Debug</span> button to fire up your project, if all has gone well you should see a simple page with the words &#8220;Hello, World!&#8221; across the top left.</p>
<p>Well done, now go make a cup of tea and eat some digestives.</p>
]]></content:encoded>
			<wfw:commentRss>/index.php/webdev/uidevelopment/ajax/asp-net-mvc-4-razor-starter/feed/</wfw:commentRss>
		<slash:comments>1</slash:comments>
		</item>
		<item>
		<title>Using IIS Rewrite Rules With SquishIt Cache Invalidation</title>
		<link>/index.php/webdev/serverprogramming/using-iis-rewrite-rules-to-improve/</link>
		<comments>/index.php/webdev/serverprogramming/using-iis-rewrite-rules-to-improve/#respond</comments>
		<pubDate>Sat, 03 Aug 2013 13:32:00 +0000</pubDate>
		<dc:creator><![CDATA[Alex Ullrich]]></dc:creator>
				<category><![CDATA[ASP.NET]]></category>
		<category><![CDATA[Microsoft IIS]]></category>
		<category><![CDATA[Server Programming]]></category>
		<category><![CDATA[asp.net]]></category>
		<category><![CDATA[squishit]]></category>

		<guid isPermaLink="false">/index.php/2013/08/using-iis-rewrite-rules-to-improve/</guid>
		<description><![CDATA[In version 0.9.2 and earlier, SquishIt had two options for handling browser cache invalidation.  The default behavior was to append the hash to the query string, and the other was to include the hash in the combined filename.  While both got the job don&#8230;]]></description>
				<content:encoded><![CDATA[<p>In version 0.9.2 and earlier, SquishIt had two options for handling browser cache invalidation.  The default behavior was to append the hash to the query string, and the other was to include the hash in the combined filename.  While both got the job done, they both came with advantages and disadvantages.  This post will attempt to cover those while also introducing a third option that is available starting in version 0.9.3.</p>
<h3>Querystring Invalidation</h3>
<p>SquishIt&#8217;s default versioning behavior is to append the versioning hash to the URL of a combined file as a query string parameter.  So a bundle set up like this:</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="csharp"><thead><tr><td colspan="2"  class="head">C#</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
</pre></td><td class="de1"><pre class="de1">Bundle<span class="sy0">.</span><span class="me1">JavaScript</span><span class="br0">&#40;</span><span class="br0">&#41;</span>
&nbsp; &nbsp;<span class="sy0">.</span><span class="kw1">Add</span><span class="br0">&#40;</span><span class="st0">&quot;/assets/js/jquery_1.7.2.js&quot;</span><span class="br0">&#41;</span>
&nbsp; &nbsp;<span class="sy0">.</span><span class="kw1">Add</span><span class="br0">&#40;</span><span class="st0">&quot;/assets/js/minifyjs_test.js&quot;</span><span class="br0">&#41;</span>
&nbsp; &nbsp;<span class="sy0">.</span><span class="me1">ForceRelease</span><span class="br0">&#40;</span><span class="br0">&#41;</span>
&nbsp; &nbsp;<span class="sy0">.</span><span class="me1">Render</span><span class="br0">&#40;</span><span class="st0">&quot;/output/minifyjs_test_output.js&quot;</span><span class="br0">&#41;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">Bundle.JavaScript()
   .Add("/assets/js/jquery_1.7.2.js")
   .Add("/assets/js/minifyjs_test.js")
   .ForceRelease()
   .Render("/output/minifyjs_test_output.js")</pre></div></div>

<p>Would render a script tag like this:</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="html4strict"><thead><tr><td colspan="2"  class="head">HTML</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
</pre></td><td class="de1"><pre class="de1"><span class="sc2">&lt;<span class="kw2">script</span> <span class="kw3">type</span><span class="sy0">=</span><span class="st0">&quot;text/javascript&quot;</span> <span class="kw3">src</span><span class="sy0">=</span><span class="st0">&quot;/output/minifyjs_test_output.js?{hashKeyName}={invalidationHash}&quot;</span>&gt;&lt;<span class="sy0">/</span><span class="kw2">script</span>&gt;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">&lt;script type="text/javascript" src="/output/minifyjs_test_output.js?{hashKeyName}={invalidationHash}"&gt;&lt;/script&gt;</pre></div></div>

<p>The main disadvantage of this is that it doesn&#8217;t work with all caching proxies, though it seems to be pretty consistently supported in modern browsers.  The advantage is that it only requires one set of combined files to be stored on the server.  This is usually the best choice for files served locally because it doesn&#8217;t require any cleanup of old files on the server.</p>
<h3>Filename Invalidation</h3>
<p>When using this strategy, hashes are written directly into the filename.  So a bundle set up like this:</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="csharp"><thead><tr><td colspan="2"  class="head">C#</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
</pre></td><td class="de1"><pre class="de1">Bundle<span class="sy0">.</span><span class="me1">JavaScript</span><span class="br0">&#40;</span><span class="br0">&#41;</span>
&nbsp; &nbsp;<span class="sy0">.</span><span class="kw1">Add</span><span class="br0">&#40;</span><span class="st0">&quot;/assets/js/jquery_1.7.2.js&quot;</span><span class="br0">&#41;</span>
&nbsp; &nbsp;<span class="sy0">.</span><span class="kw1">Add</span><span class="br0">&#40;</span><span class="st0">&quot;/assets/js/minifyjs_test.js&quot;</span><span class="br0">&#41;</span>
&nbsp; &nbsp;<span class="sy0">.</span><span class="me1">ForceRelease</span><span class="br0">&#40;</span><span class="br0">&#41;</span>
&nbsp; &nbsp;<span class="sy0">.</span><span class="me1">Render</span><span class="br0">&#40;</span><span class="st0">&quot;/output/minifyjs_test_output#.js&quot;</span><span class="br0">&#41;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">Bundle.JavaScript()
   .Add("/assets/js/jquery_1.7.2.js")
   .Add("/assets/js/minifyjs_test.js")
   .ForceRelease()
   .Render("/output/minifyjs_test_output#.js")</pre></div></div>

<p>Would render a script tag like this:</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="html4strict"><thead><tr><td colspan="2"  class="head">HTML</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
</pre></td><td class="de1"><pre class="de1"><span class="sc2">&lt;<span class="kw2">script</span> <span class="kw3">type</span><span class="sy0">=</span><span class="st0">&quot;text/javascript&quot;</span> <span class="kw3">src</span><span class="sy0">=</span><span class="st0">&quot;/output/minifyjs_test_output{invalidationHash}.js&quot;</span>&gt;&lt;<span class="sy0">/</span><span class="kw2">script</span>&gt;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">&lt;script type="text/javascript" src="/output/minifyjs_test_output{invalidationHash}.js"&gt;&lt;/script&gt;</pre></div></div>

<p>The main disadvantage of this strategy is that it tends to accumulate files over time. Because the hash is generated off of the combined file&#8217;s contents, every time a bundled script file or stylesheet changes, a new combined file is created. It eventually becomes necessary to clean this stuff up (The easiest way is to delete all files and reset the app pool, otherwise its usually safe to delete all but the most recent version for each combined file). The main advantage is that it is supported by all caching proxies &#8211; this consistent behavior makes it a good choice for CDN environments where you typically need to manage multiple versions of files anyway.</p>
<h3>Folder Invalidation</h3>
<p>This new strategy is similar to the filename invalidation strategy when it comes to output file naming, but behaves more like querystring invalidation in terms of disk footprint.  It is used similarly to the hash in filename option, in that you simply put a hash symbol in the path where you want the content&#8217;s hash to show up.  Unlike the hash in filename method, it requires you to use it explicitly because we need to be able to figure out the right folder to write files to.  So a bundle set up like this:</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="csharp"><thead><tr><td colspan="2"  class="head">C#</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
</pre></td><td class="de1"><pre class="de1">Bundle<span class="sy0">.</span><span class="me1">JavaScript</span><span class="br0">&#40;</span><span class="br0">&#41;</span>
&nbsp; &nbsp;<span class="sy0">.</span><span class="kw1">Add</span><span class="br0">&#40;</span><span class="st0">&quot;/assets/js/jquery_1.7.2.js&quot;</span><span class="br0">&#41;</span>
&nbsp; &nbsp;<span class="sy0">.</span><span class="kw1">Add</span><span class="br0">&#40;</span><span class="st0">&quot;/assets/js/minifyjs_test.js&quot;</span><span class="br0">&#41;</span>
&nbsp; &nbsp;<span class="sy0">.</span><span class="me1">WithCacheInvalidationStrategy</span><span class="br0">&#40;</span><span class="kw3">new</span> HashAsVirtualDirectoryCacheInvalidationStrategy<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#41;</span>
&nbsp; &nbsp;<span class="sy0">.</span><span class="me1">ForceRelease</span><span class="br0">&#40;</span><span class="br0">&#41;</span>
&nbsp; &nbsp;<span class="sy0">.</span><span class="me1">Render</span><span class="br0">&#40;</span><span class="st0">&quot;/output/#/minifyjs_test_output.js&quot;</span><span class="br0">&#41;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">Bundle.JavaScript()
   .Add("/assets/js/jquery_1.7.2.js")
   .Add("/assets/js/minifyjs_test.js")
   .WithCacheInvalidationStrategy(new HashAsVirtualDirectoryCacheInvalidationStrategy())
   .ForceRelease()
   .Render("/output/#/minifyjs_test_output.js")</pre></div></div>

<p>Would render a script tag like this:</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="html4strict"><thead><tr><td colspan="2"  class="head">HTML</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
</pre></td><td class="de1"><pre class="de1"><span class="sc2">&lt;<span class="kw2">script</span> <span class="kw3">type</span><span class="sy0">=</span><span class="st0">&quot;text/javascript&quot;</span> <span class="kw3">src</span><span class="sy0">=</span><span class="st0">&quot;/output/{invalidationHash}/minifyjs_test_output.js&quot;</span>&gt;&lt;<span class="sy0">/</span><span class="kw2">script</span>&gt;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">&lt;script type="text/javascript" src="/output/{invalidationHash}/minifyjs_test_output.js"&gt;&lt;/script&gt;</pre></div></div>

<p>From looking at these URLs it is clear that caching agents will handle this the same way they handled the URLs built with the filename invalidation strategy.  But the strategy actually scrubs the hash from the disk location for the bundle, meaning that only one file is generated.  We can then set up a rewrite rule to scrub the hash out of the URL for incoming requests like so.</p>
<p>So for IIS we could do something like this in our web.config:</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="xml"><thead><tr><td colspan="2"  class="head">XML</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
</pre></td><td class="de1"><pre class="de1">&nbsp; <span class="sc3"><span class="re1">&lt;system.webServer<span class="re2">&gt;</span></span></span>
&nbsp; &nbsp; <span class="sc-1">&lt;!-- snip --&gt;</span>
&nbsp; &nbsp; <span class="sc3"><span class="re1">&lt;rewrite<span class="re2">&gt;</span></span></span>
&nbsp; &nbsp; &nbsp; <span class="sc3"><span class="re1">&lt;rules<span class="re2">&gt;</span></span></span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="sc3"><span class="re1">&lt;rule</span> <span class="re0">name</span>=<span class="st0">&quot;squishit&quot;</span><span class="re2">&gt;</span></span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="sc3"><span class="re1">&lt;match</span> <span class="re0">url</span>=<span class="st0">&quot;([S]+)(/r-[w]+/)([S]+)&quot;</span> &nbsp;<span class="re2">/&gt;</span></span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="sc3"><span class="re1">&lt;action</span> <span class="re0">type</span>=<span class="st0">&quot;Rewrite&quot;</span> <span class="re0">url</span>=<span class="st0">&quot;{R:1}/{R:3}&quot;</span> <span class="re2">/&gt;</span></span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="sc3"><span class="re1">&lt;/rule<span class="re2">&gt;</span></span></span>
&nbsp; &nbsp; &nbsp; <span class="sc3"><span class="re1">&lt;/rules<span class="re2">&gt;</span></span></span>
&nbsp; &nbsp; <span class="sc3"><span class="re1">&lt;/rewrite<span class="re2">&gt;</span></span></span>
&nbsp; <span class="sc3"><span class="re1">&lt;/system.webServer<span class="re2">&gt;</span></span></span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">  &lt;system.webServer&gt;
    &lt;!-- snip --&gt;
    &lt;rewrite&gt;
      &lt;rules&gt;
        &lt;rule name="squishit"&gt;
          &lt;match url="([S]+)(/r-[w]+/)([S]+)"  /&gt;
          &lt;action type="Rewrite" url="{R:1}/{R:3}" /&gt;
        &lt;/rule&gt;
      &lt;/rules&gt;
    &lt;/rewrite&gt;
  &lt;/system.webServer&gt;</pre></div></div>

<p>To configure these options globally we can add the following in Application_Start:</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="csharp"><thead><tr><td colspan="2"  class="head">C#</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
</pre></td><td class="de1"><pre class="de1">Bundle<span class="sy0">.</span><span class="me1">ConfigureDefaults</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">.</span><span class="me1">UseCacheInvalidationStrategy</span><span class="br0">&#40;</span><span class="kw3">new</span> HashAsVirtualDirectoryCacheInvalidationStrategy<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#41;</span><span class="sy0">;</span> </pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">Bundle.ConfigureDefaults().UseCacheInvalidationStrategy(new HashAsVirtualDirectoryCacheInvalidationStrategy()); </pre></div></div>

<p>This will result in the supplied strategy being used for all bundles <strong>unless</strong> you override on a bundle using the method shown above.</p>
<p>The end result combines the advantages of querystring invalidation and filename invalidation for what should be a minimal performance hit.  Hopefully this comes in handy in the future.</p>
]]></content:encoded>
			<wfw:commentRss>/index.php/webdev/serverprogramming/using-iis-rewrite-rules-to-improve/feed/</wfw:commentRss>
		<slash:comments>0</slash:comments>
		</item>
		<item>
		<title>Upgrading from MVC3 to MVC4 and MVC4 Async</title>
		<link>/index.php/webdev/serverprogramming/aspnet/upgrading-from-mvc3-to-mvc4/</link>
		<comments>/index.php/webdev/serverprogramming/aspnet/upgrading-from-mvc3-to-mvc4/#comments</comments>
		<pubDate>Tue, 16 Jul 2013 18:00:00 +0000</pubDate>
		<dc:creator><![CDATA[Eli Weinstock-Herman (tarwn)]]></dc:creator>
				<category><![CDATA[ASP.NET]]></category>
		<category><![CDATA[asp.net]]></category>
		<category><![CDATA[load test]]></category>
		<category><![CDATA[mvc 4]]></category>
		<category><![CDATA[mvc music store]]></category>

		<guid isPermaLink="false">/index.php/2013/07/upgrading-from-mvc3-to-mvc4/</guid>
		<description><![CDATA[The other day I succumbed to the urge to upgrade my customized version of MVC Music store from ASP.Net MVC3 to MVC4. I had just finished watching Steve Sanderson's excellent TechDays 2012 session, C#5, ASP.NET MVC 4, and asynchronous Web applications (if you're doing ASP.Net MVC and haven't watched it, queue it up, awesome presentation).]]></description>
				<content:encoded><![CDATA[<p>The other day I succumbed to the urge to upgrade my customized version of <a href="/index.php/All/mvc+music+store:" title="All LTD blog posts on MVC Music Store">MVC Music store</a> from ASP.Net MVC3 to MVC4. I had just finished watching Steve Sanderson&#8217;s excellent TechDays 2012 session, <a href="http://channel9.msdn.com/Events/TechDays/Techdays-2012-the-Netherlands/2287" title="C#5, ASP.NET MVC 4, and asynchronous Web applications on Channel9">C#5, ASP.NET MVC 4, and asynchronous Web applications</a> (if you&#8217;re doing ASP.Net MVC and haven&#8217;t watched it, queue it up, awesome presentation). During the presentation, Steve used Apache Bench to show the improvements as he upgraded his small project from synchronous MVC4 to asynchronous MVC4, which got me wondering what effect MVC4 and Asynchronous MVC4 would show during the <a href="/index.php/EnterpriseDev/application-lifecycle-management/continuous-delivery-adding-the-load" title="Continuous Delivery - Adding the Load testing Stage">wcat load test step</a> in my MVC Music Store build process.</p>
<h2>The Upgrade to MVC4</h2>
<p>Upgrading from MVC3 to MVC4 was easy. I followed the instructions from the <a href="http://www.asp.net/whitepapers/mvc4-release-notes#_Toc303253806">MVC4 release notes</a> and committed my changes. </p>
<p>I installed Visual Studio 2012 on my build server (including .Net 4.5) so the build would run. Installing a copy on build servers is allowed under visual studio licensing models and while some people try to create a &#8216;pure&#8217; non-VS build experience, I think the only advantage one gets from this model is ensuring the production application is compiled in a different manner from the one the developers built and tested under.</p>
<p>VS upgraded, .Net upgraded, MVC upgraded, time to commit and push.</p>
<p>Build running, deploying for smoke test, failed. Page Won&#8217;t Load.</p>
<h3>Still Copying MVC3 DLLs to Build Output</h3>
<p>The CI build step runs the build and creates a publishable package that will be archived for all later build stages and final deployment. The last step of the CI stage deploys the package to a VM and does an HTTP GET on the front page, just to ensure it&#8217;s deployable. Turns out the site deployed fine, but the front page refused to display.</p>
<p><img src="http://tiernok.com/LTDBlog/MVC4/folders.png" alt="Project folders" style="margin: .5em .5em .5em 0; float: left;" />Deploying MVC3 early on took advantage of a special folder named _bin_deployableAssemblies, so MSBuild was overwriting the MVC4 assemblies with the contents of this folder (MVC3) and then giving me errors on the razor stack when I tried to actually load the page. The build server didn&#8217;t mind because it was using either GAC&#8217;d or Reference Assemblies instead of the local DLLs.</p>
<p>I initially delete the folder to fix this, which turned out to be overkill because I also had SQL Server CE assemblies in there. The final result was to clear out just the MVC3 assemblies from the folder, leaving the SQL Server CE ones.</p>
<p>I ran several builds through the load test step, with interesting results that I&#8217;ll show at the bottom.</p>
<h2>The Upgrade to Asynchronous</h2>
<p>I&#8217;ll be the first to call my changes hacky. In a prior post, I <a href="/index.php/DesktopDev/MSTech/CSharp/pick-the-right-storage-all" title="Pick the Right Storage: All SQL is Not Equal">switched SQL CE for full SQL Server</a> to fix a performance bottleneck. With the known bottleneck removed, I wasn&#8217;t sure what the current one was or if  Asynchronous MVC would improve things further, but I had high hopes.</p>
<p>You can see the final result on <a href="https://bitbucket.org/tarwn/mvcmusicstore.main/src" title="MVCMusicStore.Main on BitBucket">BitBucket</a>, but here&#8217;s a sample of the quick and dirty surgery:</p>
<p><b>MVCMusicStore.Main / MvcMusicStore / Controllers / HomeController.cs</b> (<a href="https://bitbucket.org/tarwn/mvcmusicstore.main/src/a3f3c943c685906a8986c2ce94c79db8bc04a577/MvcMusicStore/Controllers/HomeController.cs?at=default" title="File on BitBucket">see file</a>)</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="text"><thead><tr><td colspan="2"  class="head">Text</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
</pre></td><td class="de1"><pre class="de1">using System.Collections.Generic;
using System.Linq;
using System.Web.Mvc;
using MvcMusicStore.Models;
using System.Diagnostics.CodeAnalysis;
using System.Threading.Tasks;
&nbsp;
namespace MvcMusicStore.Controllers {
&nbsp; &nbsp; &nbsp; &nbsp; [SuppressMessage(&quot;Gendarme.Rules.Exceptions&quot;, &quot;UseObjectDisposedExceptionRule&quot;, Justification = &quot;If the controller is disposed mid-call we have bigger issues&quot;)]
&nbsp; &nbsp; &nbsp; &nbsp; public class HomeController : ControllerBase {
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; public HomeController() { }
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; public HomeController(IMusicStoreEntities storeDb) : base(storeDb) { }
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; //
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; // GET: /Home/
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; public async Task&lt;ActionResult&gt; IndexAsync() {
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; // Get most popular albums
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; var albums = await GetTopSellingAlbumsAsync(5);
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; return View(albums);
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; private async Task&lt;List&lt;Album&gt;&gt; GetTopSellingAlbumsAsync(int count) {
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; // Group the order details by album and return
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; // the albums with the highest count
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; return await Task.Factory.StartNew&lt;List&lt;Album&gt;&gt;(() =&gt;
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; {
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; return StoreDB.Albums
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; .OrderByDescending(a =&gt; a.OrderDetails.Count())
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; .Take(count)
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; .ToList();
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; });
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }
&nbsp; &nbsp; &nbsp; &nbsp; }
}</pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">using System.Collections.Generic;
using System.Linq;
using System.Web.Mvc;
using MvcMusicStore.Models;
using System.Diagnostics.CodeAnalysis;
using System.Threading.Tasks;

namespace MvcMusicStore.Controllers {
        [SuppressMessage("Gendarme.Rules.Exceptions", "UseObjectDisposedExceptionRule", Justification = "If the controller is disposed mid-call we have bigger issues")]
        public class HomeController : ControllerBase {

                public HomeController() { }
                public HomeController(IMusicStoreEntities storeDb) : base(storeDb) { }

                //
                // GET: /Home/
                public async Task&lt;ActionResult&gt; IndexAsync() {
                        // Get most popular albums
                        var albums = await GetTopSellingAlbumsAsync(5);
                        
                        return View(albums);
                }

                private async Task&lt;List&lt;Album&gt;&gt; GetTopSellingAlbumsAsync(int count) {
                        // Group the order details by album and return
                        // the albums with the highest count
                        return await Task.Factory.StartNew&lt;List&lt;Album&gt;&gt;(() =&gt;
                        {
                                return StoreDB.Albums
                                                                .OrderByDescending(a =&gt; a.OrderDetails.Count())
                                                                .Take(count)
                                                                .ToList();
                        });
                }
        }
}</pre></div></div>

<p>Each action has been converted to an async method returning a Task&lt;ActionResult&gt; and my ControllerBase object now inherits from AsyncController instead of Controller.</p>
<p>Because the query logic for this application is spread all over the place (which is common for entity framework in my experience), in some places I have tidy await calls to Async methods (like in the IndexAsync method above), and in some cases I have an inline await Task.Factory call (GetTopSellingAlbumsAsync action). <a href="http://entityframework.codeplex.com/wikipage?title=Roadmap" title="Entity Framework Roadmap">Entity Framework 6</a> will have asynchronous Query and Save capabilities, but I personally don&#8217;t care much for Entity Framework, so it&#8217;s unlikely I&#8217;ll go through the effort of upgrading this project from EF4 to EF6. In the meantime, I have added my own SaveAsync call to the IMusicStoreEntities interface and DbContext implementation and have added some dirty await/async calls throughout the codebase.</p>
<p>Final result? </p>
<h2>Graphs and Numbers, woohoo!</h2>
<p>So what happened when I upgrade to MVC4? faster, slower, &#8230; ? And how much faster did Asynchronous actions make it? 1 order of magnitude? 2 orders?</p>
<p>What happened was object lessons in why having load measurements are useful and why identifying your performance bottlenecks is critical, instead of treating asynchronous actions as magic pixie dust.</p>
<div style="text-align:center;">
   <img src="http://tiernok.com/LTDBlog/MVC4/rate.png" alt="Load test - Request Rates" />
</div>
<p>On the left side of this graph you can see that the MVC 3 rate has averaged 75 requests/second with a pretty high level of variability. Switching to MVC4 moved us to a much more consistent 95-100 requests/second average, then throwing async in the mix reduced the rate to the 80&#8217;s. In each case, the requests are all of the files our browser would request when we browse the index page, select a genre to the genre page, select an album to the album page, and then check out, so some of this is dynamic content and some is static image and script files.</p>
<div style="text-align:center;">
   <img src="http://tiernok.com/LTDBlog/MVC4/responseTime.png" alt="Load test - Response Times" />
</div>
<p>The other interesting number is the lack of difference in Response Times. Somehow MVC4 unlocked more throughput for the system without impacting the Response Time for those requests. There was also no change at all in Response Times at all after adding Async actions, something that underlines and bolds the fact that the database calls were not the performance bottleneck for these test VMs.</p>
<h2>I Should Upgrade to MVC4 Now!</h2>
<p>Well, yes, you should, but don&#8217;t expect a matching 30% performance improvement. This improvement was in my test systems which are all VMs residing on the same Hyper-V server, running simulated loads that don&#8217;t match what real traffic would look like on a real site with real networks and real servers. That being said, the point of the load test step is to let me know when something significant occurs and there was definitely a measurable, positive performance improvement when I performed the upgrade. Given the fact that I don&#8217;t have a pouch of magic pixie dust, I have to assume that either MVC 4 or .Net 4.5 made some improvements.</p>
<p>The moral of the async upgrade is to be aware of your assumptions. In the real world, had I made async-ified my codebase to get a performance improvement, I would have just added a great deal of extra code complexity for a net loss in performance. There was no science to my guess that async would make things faster, it was pure guesswork.</p>
]]></content:encoded>
			<wfw:commentRss>/index.php/webdev/serverprogramming/aspnet/upgrading-from-mvc3-to-mvc4/feed/</wfw:commentRss>
		<slash:comments>3</slash:comments>
		</item>
		<item>
		<title>Preprocessor Extensibility in SquishIt 0.9</title>
		<link>/index.php/webdev/serverprogramming/preprocessor-extensibility-in-squishit-0-9/</link>
		<comments>/index.php/webdev/serverprogramming/preprocessor-extensibility-in-squishit-0-9/#respond</comments>
		<pubDate>Fri, 05 Oct 2012 12:38:00 +0000</pubDate>
		<dc:creator><![CDATA[Alex Ullrich]]></dc:creator>
				<category><![CDATA[AJAX]]></category>
		<category><![CDATA[ASP.NET]]></category>
		<category><![CDATA[Javascript]]></category>
		<category><![CDATA[Server Programming]]></category>
		<category><![CDATA[XHTML and CSS]]></category>
		<category><![CDATA[asp.net]]></category>
		<category><![CDATA[squishit]]></category>

		<guid isPermaLink="false">/index.php/2012/10/preprocessor-extensibility-in-squishit-0-9/</guid>
		<description><![CDATA[For the past couple years, .net developers have been embracing various content preprocessors as they become more accessible.  For the same couple of years, we've been trying to keep up.  The dotLess port of the popular .less CSS extension has been getti&#8230;]]></description>
				<content:encoded><![CDATA[<p>For the past couple years, .net developers have been embracing various content preprocessors as they become more accessible.  For the same couple of years, we&#8217;ve been trying to keep up.  The <a href="http://www.dotlesscss.org/">dotLess</a> port of the popular .less CSS extension has been getting better by leaps and bounds. It has become almost trivial to embed a javascript compiler in .net these days (thanks to projects like <a href="http://jurassic.codeplex.com/">Jurassic</a>), enabling us to support things like coffeescript.  So we&#8217;re doing the obvious thing &#8211; stripping preprocessor support from our core library.</p>
<p>There are some good reasons for this.  Why force people to download things like Jurassic or dotLess if they don&#8217;t have the need?  The flipside of this is that we&#8217;d been deliberately avoiding adding support for SASS/SCSS because of concerns about linking to IronRuby &#8211; these concerns largely disappear when preprocessing becomes an opt-in behavior.  Some of these libraries don&#8217;t even work on Mono (I think .less might be the only one that works currently) so I feel extra bitter downloading code that won&#8217;t run on my platform of choice.  Finally, the growth in adoption has been so fast that frankly, we&#8217;re unable to keep up.</p>
<p>So let&#8217;s take a look at some of the original code (well not original as some of our refactorings did find their way to the 0.8.x branch).</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="csharp"><thead><tr><td colspan="2"  class="head">C#</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
</pre></td><td class="de1"><pre class="de1"><span class="kw1">internal</span> <span class="kw1">override</span> <span class="kw4">string</span> PreprocessForDebugging<span class="br0">&#40;</span><span class="kw4">string</span> filename<span class="br0">&#41;</span>
<span class="br0">&#123;</span>
&nbsp; &nbsp; <span class="kw1">if</span><span class="br0">&#40;</span>filename<span class="sy0">.</span><span class="me1">ToLower</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">.</span><span class="me1">EndsWith</span><span class="br0">&#40;</span><span class="st0">&quot;.coffee&quot;</span><span class="br0">&#41;</span><span class="br0">&#41;</span>
&nbsp; &nbsp; <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw4">string</span> js <span class="sy0">=</span> ProcessCoffee<span class="br0">&#40;</span>filename<span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; filename <span class="sy0">+=</span> debugExtension<span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">using</span><span class="br0">&#40;</span><span class="kw1">var</span> fileWriter <span class="sy0">=</span> fileWriterFactory<span class="sy0">.</span><span class="me1">GetFileWriter</span><span class="br0">&#40;</span>filename<span class="br0">&#41;</span><span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; fileWriter<span class="sy0">.</span><span class="me1">Write</span><span class="br0">&#40;</span>js<span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp; &nbsp; <span class="kw1">return</span> filename<span class="sy0">;</span>
<span class="br0">&#125;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">internal override string PreprocessForDebugging(string filename)
{
    if(filename.ToLower().EndsWith(".coffee"))
    {
        string js = ProcessCoffee(filename);
        filename += debugExtension;
        using(var fileWriter = fileWriterFactory.GetFileWriter(filename))
        {
            fileWriter.Write(js);
        }
    }
    return filename;
}</pre></div></div>

<p>As you can see, the trigger for preprocessing is the extension.  This is the desired behavior, but the way it was coded left it very brittle and made adding new preprocessors unwieldy.  So we set out to find a way to break this code out of the core library.  </p>
<p>The approach that we used was plugin based &#8211; we defined an interface and exposed a mechanism to register implementations of this interface with the core library.  Our original interface actually checked a file name to see if it needed preprocessing, so you could define any logic you wanted to determine whether to preprocess &#8211; we ended up eschewing this to go back to the extension-based decisions, for reasons that will be discussed later.  The interface looks like this:</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="csharp"><thead><tr><td colspan="2"  class="head">C#</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
</pre></td><td class="de1"><pre class="de1"><span class="kw1">public</span> <span class="kw4">interface</span> IPreprocessor
<span class="br0">&#123;</span>
&nbsp; &nbsp; <span class="kw4">bool</span> ValidFor<span class="br0">&#40;</span><span class="kw4">string</span> extension<span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; IProcessResult Process<span class="br0">&#40;</span><span class="kw4">string</span> filePath, <span class="kw4">string</span> content<span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; <span class="kw4">string</span><span class="br0">&#91;</span><span class="br0">&#93;</span> Extensions <span class="br0">&#123;</span> <span class="kw1">get</span><span class="sy0">;</span> <span class="br0">&#125;</span>
<span class="br0">&#125;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">public interface IPreprocessor
{
    bool ValidFor(string extension);
    IProcessResult Process(string filePath, string content);
    string[] Extensions { get; }
}</pre></div></div>

<p>The &#8220;ValidFor&#8221; method does exactly what it says &#8211; check if the preprocessor should be used with the supplied extension.  &#8220;Process&#8221; is where the actual preprocessing happens.  The array of extensions is exposed publicly to be used in registering the preprocessor &#8211; this is because each type of content bundle has a list of allowed extensions that is used to filter what gets included when we add a directory full of files.  Finally, the ProcessResult type includes a string representing preprocessed content and a list of any dependent files that were changed.  This last part was added by <a href="http://twitter.com/SimonPStevens">Simon Stevens</a> to enable <a href="https://github.com/jetheredge/SquishIt/pull/211">inclusion of .less imports as dependent files</a>.</p>
<p>Preprocessors can be registered two ways &#8211; both statically and with a particular bundle instance.  For the instance level configuration there is a method in the bundle&#8217;s fluent API called &#8220;WithPreprocessor&#8221; that allows inclusion of a preprocessor with that bundle instance.  Globally, we used the static &#8220;Bundle&#8221; class to allow preprocessor registration &#8211; methods exist there for registering script, style, and global preprocessors.  If preprocessors of the same type are registered both statically and with a bundle instance, the instance-level preprocessor will be used.</p>
<p>Now, back to why we decided to make preprocessor selection based on extension rather than the complete file name.  To understand, I guess all you have to do is read about the <a href="http://guides.rubyonrails.org/asset_pipeline.html">Asset Pipeline</a> in Ruby on Rails, but I will attempt to summarize here.  The beautiful thing about the pipeline approach is the ability to chain preprocessing steps.  This allows you to use ERB&#8217;s helper methods in your file <strong>prior to</strong> other preprocessing.  For example, if you wanted to use ERB helpers in a coffeescript file you can name your file file.js.coffee.erb &#8211; when an asset has the .coffee and .erb extensions, both preprocessors will be applied.  The order they are applied is driven by the reverse order of extensions, so *.coffee.erb would be preprocessed first by ERB and then by the coffeescript compiler.  Our goal was to emulate this behavior in SquishIt, and without matching preprocessors to extensions rather than filenames we wouldn&#8217;t have been able to.</p>
<p>Enabling this behavior is mostly a matter of finding preprocessors correctly.  We find them like so:</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="csharp"><thead><tr><td colspan="2"  class="head">C#</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
</pre></td><td class="de1"><pre class="de1"><span class="kw1">protected</span> IPreprocessor<span class="br0">&#91;</span><span class="br0">&#93;</span> FindPreprocessors<span class="br0">&#40;</span><span class="kw4">string</span> file<span class="br0">&#41;</span>
<span class="br0">&#123;</span>
&nbsp; &nbsp; <span class="kw1">return</span> file<span class="sy0">.</span><span class="me1">Split</span><span class="br0">&#40;</span><span class="st0">'.'</span><span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="sy0">.</span><span class="me1">Skip</span><span class="br0">&#40;</span><span class="nu0">1</span><span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="sy0">.</span><span class="me1">Reverse</span><span class="br0">&#40;</span><span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="sy0">.</span><span class="kw1">Select</span><span class="br0">&#40;</span>FindPreprocessor<span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="sy0">.</span><span class="kw1">Where</span><span class="br0">&#40;</span>p <span class="sy0">=&gt;</span> p <span class="sy0">!=</span> <span class="kw1">null</span><span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="sy0">.</span><span class="me1">ToArray</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
<span class="br0">&#125;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">protected IPreprocessor[] FindPreprocessors(string file)
{
    return file.Split('.')
        .Skip(1)
        .Reverse()
        .Select(FindPreprocessor)
        .Where(p =&gt; p != null)
        .ToArray();
}</pre></div></div>

<p>It&#8217;s important to note here that &#8220;FindPreprocessor&#8221; uses the firstpreprocessor it finds for a given extension &#8211; so we need to take care if implementing preprocessors for common file extensions like &#8220;.js&#8221;.  We can then use the preprocessors in the default order to process our content:</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="csharp"><thead><tr><td colspan="2"  class="head">C#</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
</pre></td><td class="de1"><pre class="de1"><span class="kw1">protected</span> <span class="kw4">string</span> PreprocessFile<span class="br0">&#40;</span><span class="kw4">string</span> file, IPreprocessor<span class="br0">&#91;</span><span class="br0">&#93;</span> preprocessors<span class="br0">&#41;</span>
<span class="br0">&#123;</span>
&nbsp; &nbsp; <span class="kw1">return</span> directoryWrapper<span class="sy0">.</span><span class="me1">ExecuteInDirectory</span><span class="br0">&#40;</span>Path<span class="sy0">.</span><span class="me1">GetDirectoryName</span><span class="br0">&#40;</span>file<span class="br0">&#41;</span>,
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="sy0">=&gt;</span> PreprocessContent<span class="br0">&#40;</span>file, preprocessors, ReadFile<span class="br0">&#40;</span>file<span class="br0">&#41;</span><span class="br0">&#41;</span><span class="br0">&#41;</span><span class="sy0">;</span>
<span class="br0">&#125;</span>
&nbsp;
<span class="kw1">protected</span> <span class="kw4">string</span> PreprocessContent<span class="br0">&#40;</span><span class="kw4">string</span> file, IPreprocessor<span class="br0">&#91;</span><span class="br0">&#93;</span> preprocessors, <span class="kw4">string</span> content<span class="br0">&#41;</span>
<span class="br0">&#123;</span>
&nbsp; &nbsp; <span class="kw1">return</span> preprocessors<span class="sy0">.</span><span class="me1">NullSafeAny</span><span class="br0">&#40;</span><span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span class="sy0">?</span> preprocessors<span class="sy0">.</span><span class="me1">Aggregate</span><span class="br0">&#40;</span>content, <span class="br0">&#40;</span>cntnt, pp<span class="br0">&#41;</span> <span class="sy0">=&gt;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">var</span> result <span class="sy0">=</span> pp<span class="sy0">.</span><span class="me1">Process</span><span class="br0">&#40;</span>file, cntnt<span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; bundleState<span class="sy0">.</span><span class="me1">DependentFiles</span><span class="sy0">.</span><span class="me1">AddRange</span><span class="br0">&#40;</span>result<span class="sy0">.</span><span class="me1">Dependencies</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">return</span> result<span class="sy0">.</span><span class="me1">Result</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span><span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span class="sy0">:</span> content<span class="sy0">;</span>
<span class="br0">&#125;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">protected string PreprocessFile(string file, IPreprocessor[] preprocessors)
{
    return directoryWrapper.ExecuteInDirectory(Path.GetDirectoryName(file),
        () =&gt; PreprocessContent(file, preprocessors, ReadFile(file)));
}

protected string PreprocessContent(string file, IPreprocessor[] preprocessors, string content)
{
    return preprocessors.NullSafeAny()
               ? preprocessors.Aggregate(content, (cntnt, pp) =&gt;
                                                      {
                                                          var result = pp.Process(file, cntnt);
                                                          bundleState.DependentFiles.AddRange(result.Dependencies);
                                                          return result.Result;
                                                      })
               : content;
}</pre></div></div>

<p>Despite the fact that we have totally broken everything users have come to depend on, we really do want to make the transition easier for people who were using .less or coffeescript with SquishIt.  This is where the tremendous <a href="http://nuget.org/packages/WebActivator">WebActivator</a> library comes in.  By including this library in our project, it allows us to define bits of code to run when the application starts up, like so:</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="csharp"><thead><tr><td colspan="2"  class="head">C#</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
</pre></td><td class="de1"><pre class="de1"><span class="br0">&#91;</span>assembly<span class="sy0">:</span> WebActivator<span class="sy0">.</span><span class="me1">PreApplicationStartMethod</span><span class="br0">&#40;</span><span class="kw3">typeof</span><span class="br0">&#40;</span>$rootnamespace$<span class="sy0">.</span><span class="me1">App_Start</span><span class="sy0">.</span><span class="me1">SquishItHogan</span><span class="br0">&#41;</span>, <span class="st0">&quot;Start&quot;</span><span class="br0">&#41;</span><span class="br0">&#93;</span>
&nbsp;
<span class="kw1">namespace</span> $rootnamespace$<span class="sy0">.</span><span class="me1">App_Start</span>
<span class="br0">&#123;</span>
&nbsp; &nbsp; <span class="kw1">using</span> <span class="co3">SquishIt.Framework</span><span class="sy0">;</span>
&nbsp; &nbsp; <span class="kw1">using</span> <span class="co3">SquishIt.Hogan</span><span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; <span class="kw1">public</span> <span class="kw4">class</span> SquishItHogan
&nbsp; &nbsp; <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">public</span> <span class="kw1">static</span> <span class="kw4">void</span> Start<span class="br0">&#40;</span><span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Bundle<span class="sy0">.</span><span class="me1">RegisterScriptPreprocessor</span><span class="br0">&#40;</span><span class="kw3">new</span> HoganPreprocessor<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp; &nbsp; <span class="br0">&#125;</span>
<span class="br0">&#125;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">[assembly: WebActivator.PreApplicationStartMethod(typeof($rootnamespace$.App_Start.SquishItHogan), "Start")]

namespace $rootnamespace$.App_Start
{
    using SquishIt.Framework;
    using SquishIt.Hogan;

    public class SquishItHogan
    {
        public static void Start()
        {
            Bundle.RegisterScriptPreprocessor(new HoganPreprocessor());
        }
    }
}</pre></div></div>

<p>Thanks to this snippet, you don&#8217;t actually need to do anything to hook up global preprocessing &#8211; just reference the dll containing your preprocessor and WebActivator.  This example is from the Hogan preprocessor, submitted by <a href="https://twitter.com/jincod">Abdrashitov Vadim</a>.  This pull request made me smile more than any I&#8217;ve seen in recent memory &#8211; a big part of the reason we moved to this model was to make it easier for people to define their own preprocessors and share them with the community.  To have one submitted by a user before we even had a production-ready release was just so cool.</p>
<p>I think this covers most of the changes, at least at a cursory level.  I hope to find the time to put together a bit of proper documentation in the next few months, but hopefully this will help in the meantime.  I&#8217;d like to extend a huge thanks to everyone who reported bugs in our pre-release versions, and to <a href="https://twitter.com/rlsdumont">Rodrigo Dumont</a> who provided the spark to get started on this stuff late last year.</p>
]]></content:encoded>
			<wfw:commentRss>/index.php/webdev/serverprogramming/preprocessor-extensibility-in-squishit-0-9/feed/</wfw:commentRss>
		<slash:comments>0</slash:comments>
		</item>
		<item>
		<title>What Does a Web Developer Need To Know</title>
		<link>/index.php/webdev/uidevelopment/what-does-a-web-developer/</link>
		<comments>/index.php/webdev/uidevelopment/what-does-a-web-developer/#comments</comments>
		<pubDate>Tue, 28 Jun 2011 09:54:00 +0000</pubDate>
		<dc:creator><![CDATA[Eli Weinstock-Herman (tarwn)]]></dc:creator>
				<category><![CDATA[AJAX]]></category>
		<category><![CDATA[Javascript]]></category>
		<category><![CDATA[Server Programming]]></category>
		<category><![CDATA[UI Development]]></category>
		<category><![CDATA[XHTML and CSS]]></category>
		<category><![CDATA[asp.net]]></category>
		<category><![CDATA[competency]]></category>
		<category><![CDATA[css]]></category>
		<category><![CDATA[design]]></category>
		<category><![CDATA[html]]></category>
		<category><![CDATA[javascript]]></category>
		<category><![CDATA[jsp]]></category>
		<category><![CDATA[php]]></category>
		<category><![CDATA[seo]]></category>
		<category><![CDATA[table layout]]></category>
		<category><![CDATA[w3c]]></category>

		<guid isPermaLink="false">/index.php/2011/06/what-does-a-web-developer/</guid>
		<description><![CDATA[What is a web developer? Recently I was involved in a discussion about the skills a web developer is expected to have and how interesting it has been to watch common bad practices (like table layout and SQL injection) continue to spread. So in the nature of Denis's What does a SQL Server developer need to know? post, I present the web developer breakdown.]]></description>
				<content:encoded><![CDATA[<p>What is a web developer? Recently I was involved in a discussion about the skills a web developer is expected to have and how interesting it has been to watch common bad practices (like table layout and SQL injection) continue to spread. So in the nature of Denis&#8217;s <a href="/index.php/DataMgmt/DBProgramming/MSSQLServer/what-does-a-sql-server" title="Read Denis's post">What does a SQL Server developer need to know?</a> post, I present the web developer breakdown.</p>
<h2>What Level Am I?</h2>
<p>Rather than try and attach years of experience to this scale, I&#8217;m going to present a list of major areas and skills, questions, or topics in each area. I&#8217;ve tried to capture whether I feel a skill is required to be an Intermediate or Advanced web developer. </p>
<p>I put this list together based on my own experience, 20-30 web developer interview lists, and some feedback from others.</p>
<p>Beginner: Knows some of the items on the list<br />
Intermediate: Knows most intermediate items and some advanced<br />
Advanced: Knows almost everything on the list</p>
<style>
.oneshottable { border: 1px solid #444444; border-collapse: collapse; width: 100%; margin-bottom: 12px; }
.oneshottable th { background-color: #444444; color: white; text-transform: uppercase; font-weight: bold; padding: 4px;font-size: 90%; }
.oneshottable td{ padding: 1px 2px; min-width: 20px; border-bottom: 1px solid #999999; font-size: 80%;}
.oneshottable td.summary:first-child{ text-align: left; font-weight: normal; padding: 3px;}
.oneshottable td:first-child{ text-align: center; font-weight: bold }
</style>
<table class="oneshottable">
<tbody>
<tr>
<th colspan="2">HTML</th>
</tr>
<tr>
<td colspan="2" class="summary">The ability to produce clean, valid, maintainable HTML is critical for a web developer. Current standards include HTML 4.01 (1999), XHTML 1 (2000), and the beginning of HTML 5 (2011)</td>
</tr>
<tr>
<td>I</td>
<td>The effect of doctypes, can code a mostly valid site without looking up the rules</td>
</tr>
<tr>
<td>A</td>
<td>The effect of content-types and how to set or debug them</td>
</tr>
<tr>
<td>I</td>
<td>Knows (and use) all of these without looking them up:  html, head, title, meta, script, style, link, body, a, strong, em, ul, ol, li, table, tr, th, td, h1-5, input, select, option, img, p, span, div, pre, textarea</td>
</tr>
<tr>
<td>A</td>
<td>And most of these: dl/dt/dd, thead, tbody, tfoot, abbr, acronym, applet, object, blockquote, iframe, label, map, optgroup, sup, sub, base, fieldset</td>
</tr>
<tr>
<td>A</td>
<td>Can name/explain at least 15 of the new HTML5 tags</td>
</tr>
<tr>
<td>I</td>
<td>Knows the escapes for &amp;, &lt;, &gt;, &copy;, ASCII characters (though you may have to look up the character code)</td>
</tr>
<tr>
<td>A</td>
<td>Can explain how HTTP works (headers, redirects, header requests, clientside caching)</td>
</tr>
<tr>
<td>I</td>
<td>Knows how to link to a position in a page</td>
</tr>
</tbody>
</table>
<table class="oneshottable">
<tbody>
<tr>
<th colspan="2">CSS</th>
</tr>
<tr>
<td colspan="2" class="summary">Cascading Style Sheets are used to describe the way an HTML documented should be presented. CSS 1 was released in 1996 and the latest published recommendation is CSS 3. </td>
</tr>
<tr>
<td>I</td>
<td>Difference between display inline, block, and inline-block and what the default value is for div, span, a, b</td>
</tr>
<tr>
<td>I</td>
<td>Difference between position static, relative, fixed, absolute</td>
</tr>
<tr>
<td>I</td>
<td>What z-index is and how to use it</td>
</tr>
<tr>
<td>A</td>
<td>How z-index is calculated by individual browsers</td>
</tr>
<tr>
<td>I</td>
<td>Difference between padding and margin</td>
</tr>
<tr>
<td>I</td>
<td>Difference between display: none and visibility: hidden</td>
</tr>
<tr>
<td>I</td>
<td>Purpose and use of &#8220;media&#8221;</td>
</tr>
<tr>
<td>I</td>
<td>Able to describe and calculate specificity</td>
</tr>
<tr>
<td>I</td>
<td>Knows at least a few attribute selectors</td>
</tr>
<tr>
<td>A</td>
<td>Can describe pseudo-classes and know many without looking them up</td>
</tr>
</tbody>
</table>
<table class="oneshottable">
<tbody>
<tr>
<th colspan="2">Javascript</th>
</tr>
<tr>
<td colspan="2" class="summary">Javascript has become the defacto scripting language for web browsers, one of only a few ways to create client-side interactions consistently across available browsers. JavaScript was first shipped in 1995 as part of the Netscape browser.</td>
</tr>
<tr>
<td>I</td>
<td>How to write a basic function, inline event handler, and a non-inline event handler (raw or w/ a package)</td>
</tr>
<tr>
<td>I</td>
<td>Can write one or or more methods to make an AJAX call with reference material</td>
</tr>
<tr>
<td>A</td>
<td>Can write one or or more methods to make an AJAX call without reference material</td>
</tr>
<tr>
<td>I</td>
<td>Knows at least one framework (jQuery, Prototype, YUI, Dojo, MooTools, …)</td>
</tr>
<tr>
<td>I</td>
<td>Can create classes (function or literal)</td>
</tr>
<tr>
<td>A</td>
<td>Knows and can use prototype (little &#8216;p&#8217;, not the framework)</td>
</tr>
<tr>
<td>I</td>
<td>Can dynamically find and add elements to the page using DOM or a framework (without looking it up)</td>
</tr>
</tbody>
</table>
<table class="oneshottable">
<tbody>
<tr>
<th colspan="2">Tools</th>
</tr>
<tr>
<td colspan="2" class="summary">Along with standard languages, there are numerous tools available to help validate, evaluate, and improve existing websites. Similar to a spell-checking tool in a word processing application, these tools can help us catch errors and oversights in our websites.</td>
</tr>
<tr>
<td>A</td>
<td>Can name at least one site, application, or organization that has an HTML validation tool</td>
</tr>
<tr>
<td>A</td>
<td>Can name at least one site, application, or organization that has an CSS validation tool</td>
</tr>
<tr>
<td>A</td>
<td>Can name at least one site, application, or organization that has an SEO scoring tool</td>
</tr>
<tr>
<td>A</td>
<td>Can name at least one site, application, or organization that has an Accessibility evaluation tool</td>
</tr>
</tbody>
</table>
<table class="oneshottable">
<tbody>
<tr>
<th colspan="2">Server-Side Programming</th>
</tr>
<tr>
<td colspan="2" class="summary">The shift to dynamic, server-generated websites in the mid-to-late 90&#8217;s was responsible for shifting the focus of the web from document retrieval to interactivity, commerce, and services.</td>
</tr>
<tr>
<td>I</td>
<td>Knows at least 2 server-side technologies &#8211; Perl, PHP, ASP 3, JSP, Java Servlets, CFM, ASP.Net (WebPages, Web Forms, MVC), Ruby on Rails, Python (WSGI, CGI, mod_python), etc</td>
</tr>
<tr>
<td>A</td>
<td>Knows more than 4 of the above list</td>
</tr>
<tr>
<td>I</td>
<td>Can explain difference between stateful and stateless development</td>
</tr>
<tr>
<td>I</td>
<td>Can explain how sessions work</td>
</tr>
<tr>
<td>I</td>
<td>Can explain how cookies work</td>
</tr>
<tr>
<td>I</td>
<td>Difference between GET and POST and how known languages present this information</td>
</tr>
<tr>
<td>I</td>
<td>Pros and cons of client-side vs server-side validation</td>
</tr>
<tr>
<td>A</td>
<td>Understands the basics of (SOAP) web services, how to implement them, and how they work</td>
</tr>
</tbody>
</table>
<table class="oneshottable">
<tbody>
<tr>
<th colspan="2">Data</th>
</tr>
<tr>
<td colspan="2" class="summary">Most web applications have some form of data store behind them. Several forms of storage and caching mechanisms exist and being able to build a basic system often requires at least a basic level of knowledge in these areas.</td>
</tr>
<tr>
<td>I</td>
<td>Can build databases, define queries, and debug on at least one major RDBMS</td>
</tr>
<tr>
<td>A</td>
<td>Knows basics for normalization and can create a basic data model to describe their database</td>
</tr>
<tr>
<td>I</td>
<td>Can work with at least one NoSQL database or data cache</td>
</tr>
<tr>
<td>I</td>
<td>Can write match and search regular expressions</td>
</tr>
<tr>
<td>A</td>
<td>Can write match and search regular expressions without a reference in more than one language</td>
</tr>
</tbody>
</table>
<table class="oneshottable">
<tbody>
<tr>
<th colspan="2">Web Server</th>
</tr>
<tr>
<td colspan="2" class="summary">Using a server-side technology to generate HTML generally requires a web server. The two largest install bases are Microsoft IIS 7.5 and Apache 2.2.</td>
</tr>
<tr>
<td>I</td>
<td>Understands the basics of how the web server (Apache or IIS) works and can create a new site</td>
</tr>
<tr>
<td>A</td>
<td>Can explain URL rewriting and implement on at least one system</td>
</tr>
</tbody>
</table>
<table class="oneshottable">
<tbody>
<tr>
<th colspan="2">Performance</th>
</tr>
<tr>
<td colspan="2" class="summary">Tuning a website to run in an optimal fashion can sometimes be the difference between paying for a single server or multiple servers, between a responsive site and one that fails under load. </td>
</tr>
<tr>
<td>A</td>
<td>Understands and can implement data caching</td>
</tr>
<tr>
<td>A</td>
<td>Understands and can implement page caching</td>
</tr>
<tr>
<td>A</td>
<td>Can use one or more page performance or load testing tools</td>
</tr>
<tr>
<td>I</td>
<td>Tools/methods and purpose of minification of JS and CSS</td>
</tr>
<tr>
<td>A</td>
<td>Understands and uses CDNs when possible</td>
</tr>
</tbody>
</table>
<table class="oneshottable">
<tbody>
<tr>
<th colspan="2">Testing</th>
</tr>
<tr>
<td colspan="2" class="summary">As the technology behind the web has developed, tools to help automate some of the repetition involved in testing websites has likewise evolved.</td>
</tr>
<tr>
<td>A</td>
<td>Can use one or more automated tools for interface testing</td>
</tr>
</tbody>
</table>
<table class="oneshottable">
<tbody>
<tr>
<th colspan="2">Security</th>
</tr>
<tr>
<td colspan="2" class="summary">As recent news stories have reminded us, security is an ongoing requirement for websites. Understanding the basics of security can help us build security in from day one rather than trying to squeeze it in at the end.</td>
</tr>
<tr>
<td>I</td>
<td>SQL Injection &#8211; what it is, how to prevent it</td>
</tr>
<tr>
<td>I</td>
<td>Cross site scripting &#8211; what it is, how to prevent it</td>
</tr>
<tr>
<td>A</td>
<td>Cross Site Request Forgery &#8211; what it is, how to prevent it</td>
</tr>
<tr>
<td>I</td>
<td>Understand hashing, salting, and importance of storing critical information in hashed or encrypted formats</td>
</tr>
<tr>
<td>I</td>
<td>Cookies &#8211; Understand session hijacking and dangers of storing user information or identification</td>
</tr>
</tbody>
</table>
<table class="oneshottable">
<tbody>
<tr>
<th colspan="2">Design Principles</th>
</tr>
<tr>
<td colspan="2" class="summary">Being able to implement common design patterns without restoring to hacks is an important part of being a web developer (as opposed to a hobbiest). While it may prove impossible to build a site without some form of hack, hacks should not be the only tool in the toolbox.</td>
</tr>
<tr>
<td>I</td>
<td>Table Layout &#8211; what it is, why it&#8217;s bad (at least three reasons)</td>
</tr>
<tr>
<td>A</td>
<td>Can implement multi-column fixed, fluid, and elastic layouts without reference material</td>
</tr>
<tr>
<td>A</td>
<td>Table Layout &#8211; and why using CSS for table layout (display: table, table-cell, etc) is not bad</td>
</tr>
<tr>
<td>A</td>
<td>Can explain and implement fixed, fluid (liquid), and elastic layouts</td>
</tr>
<tr>
<td>A</td>
<td>Can implement multi-column fixed, fluid, and elastic layouts without reference material</td>
</tr>
</tbody>
</table>
<table class="oneshottable">
<tbody>
<tr>
<th colspan="2">Meta</th>
</tr>
<tr>
<td colspan="2" class="summary">Metadata (data about data) is critical to helping people and search engines find resources in our sites and applications.</td>
</tr>
<tr>
<td>I</td>
<td>Knows purpose of description, keyword tags</td>
</tr>
<tr>
<td>I</td>
<td>Knows purpose of robots.txt file</td>
</tr>
<tr>
<td>A</td>
<td>Knows purpose and can implement sitemap.xml file</td>
</tr>
<tr>
<td>A</td>
<td>You know the basics for SEO</td>
</tr>
<tr>
<td>A</td>
<td>You&#8217;ve implemented some form of browser analytics</td>
</tr>
<tr>
<td>A</td>
<td>Microformats </td>
</tr>
<tr>
<td>A</td>
<td>You know what WCAG is and how to test conformance</td>
</tr>
<tr>
<td>A</td>
<td>You know what semantic markup is</td>
</tr>
</tbody>
</table>
<table class="oneshottable">
<tbody>
<tr>
<th colspan="2">Disqualifiers/Limiters</th>
</tr>
<tr>
<td colspan="2" class="summary">These are topics I consider to be critical to advancement. They reflect common misunderstandings or bad practices that an experienced web developer has to grow past in order to advance their skillset.</td>
</tr>
<tr>
<td>B</td>
<td>Backbutton doesn&#8217;t work w/ your sites, would prefer to disable it altogether</td>
</tr>
<tr>
<td>B</td>
<td>You protect images from download by implementing right click intercepts, layering transparent images in top, etc</td>
</tr>
<tr>
<td>I</td>
<td>Implement performance tuning without before/after measurements</td>
</tr>
<tr>
<td>B</td>
<td>Table layout</td>
</tr>
</tbody>
</table>
<p><em>Note: Disqualifiers indicate that you won&#8217;t progress past [B]eginner or [I]ntermediate levels until you stop doing them and understand why doing them was a bad idea</em></p>
<h2>What&#8217;s Missing</h2>
<p>There are several things that were intentionally left out of this list. Some were hard to quantity in a general manner, others I was unsure how relevant they were. And I&#8217;m sure people will be kind enough to add additional oversights and revisions below.</p>
<p>Missing Categories:</p>
<ul>
<li>Level of knowledge with server-side languages</li>
<li>Project management skills</li>
<li>Documentation and Modeling skills</li>
<li>Design and Graphics skills</li>
<li>Application Lifecycle Management &#8211; Source Control, Deployment, etc</li>
</ul>
<p>Extra items that didn&#8217;t make it in:</p>
<ul>
<li>Can implement RSS and ATOM feeds</li>
<li>Can implement a web farm</li>
<li>Implemented single-signon (openID, SAML, etc)</li>
<li>Knows how to implement XML data islands (still relevant?)</li>
<li>Knows how to create DTDs and/or XSDs</li>
<li>Can write regular expressions without a reference</li>
<li>Knows relevant tools for Yahoo (SiteExplorer), Google, Bing for managing site information</li>
<li>Schema.org &#8211; it belongs in the Meta category but I didn&#8217;t know what level of skill, knowledge, or adoption I should include considering it&#8217;s newness and several other factors</li>
</ul>
<p>There is also the fact that we often get caught up maintaining or even adding on to a site that violates many of the skills and standards you see in this list. This doesn&#8217;t prevent us from writing good, clean, semantic sites the rest of the time and being forced to write poor code does not make on inherently less skilled.</p>
<h2>A Brief Digression, or Why an App Dev is Not a Web Dev</h2>
<p>At one point web development was seen as less exciting and far less complex than application development. It is still seen as extremely similar to application development, so much so that it is quite normal to hire a good or great application developer and expect them to be a good or great web developer. </p>
<p>Unfortunately it doesn&#8217;t quite work that way, as web development has grown extremely complex since the first dynamic sites started showing up in the late 90&#8217;s. Doubly unfortunately, web development is based on a stateless model instead of the stateful one most application developers are used to, uses a fluid layout instead of the grid layout, and sneaks a lot of extra communications and caching into the mix. This is a series of paradigm shifts not unlike the one between procedural, object oriented, and functional programming.</p>
]]></content:encoded>
			<wfw:commentRss>/index.php/webdev/uidevelopment/what-does-a-web-developer/feed/</wfw:commentRss>
		<slash:comments>9</slash:comments>
		</item>
		<item>
		<title>The Many Functions of WebMatrix</title>
		<link>/index.php/webdev/serverprogramming/the-many-functions-of-webmatrix/</link>
		<comments>/index.php/webdev/serverprogramming/the-many-functions-of-webmatrix/#respond</comments>
		<pubDate>Thu, 23 Jun 2011 11:42:00 +0000</pubDate>
		<dc:creator><![CDATA[Eli Weinstock-Herman (tarwn)]]></dc:creator>
				<category><![CDATA[ASP.NET]]></category>
		<category><![CDATA[Classic ASP]]></category>
		<category><![CDATA[Server Programming]]></category>
		<category><![CDATA[asp.net]]></category>
		<category><![CDATA[razor]]></category>
		<category><![CDATA[webmatrix]]></category>

		<guid isPermaLink="false">/index.php/2011/06/the-many-functions-of-webmatrix/</guid>
		<description><![CDATA[Several weeks ago I started digging into WebMatrix. Over the course of a weekend I was able to put together a quick, functioning website, pick up some basics of working with WebMatrix and the deployment tool, and play with a few other technologies as well. Then I stepped back and realized I was only using a percentage of it's capabilities.]]></description>
				<content:encoded><![CDATA[<p>Several weeks ago I started digging into WebMatrix. Over the course of a weekend I was able to put together a quick, functioning website, pick up some basics of working with WebMatrix and the deployment tool, and play with a few other technologies as well. Then I stepped back and realized I was only using a percentage of it&#8217;s capabilities.</p>
<p>I&#8217;ve read a lot of blogs and articles on Web Matrix and none of them prepared me for the sheer range of capabilities this little tool offers. One would mention writing a web page, another would talk about deployment, a third about WordPress&#8230;it wasn&#8217;t until I started playing with it and went to write a blog entry of my own that I realized how much capability was packed into this one &#8216;little&#8217; tool. </p>
<p>This isn&#8217;t a deep dive, there&#8217;s plenty of those. This is a shallow float across the surface of what is actually a quite impressive (and don&#8217;t forget free) tool.</p>
<h2>What is WebMatrix?</h2>
<p>WebMatrix is a free web development tool from Microsoft that helps you create and publish websites.</p>
<p>So is it a tool? A set of templates? A language? A publication engine?</p>
<p>Yes.</p>
<p>And an IIS express manager, database configurator, generator of CMS-driven sites &#8230;The kitchen sink is in there somewhere.</p>
<h2>Building Sites</h2>
<p>WebMatrix works around the concept of a Site. A site can start as an entry in the gallery of pre-built packages or as a template and/or blank code files. </p>
<div style="border: 1px solid #AAAAAA; font-size: 80%; color: #666666; text-align: center; padding: 8px; margin: 8px;">
<img src="http://tiernok.com/LTDBlog/webmatrix/WebGallery.png" alt="Web Gallery" style="padding-bottom: 5px;" /><br />
Web Gallery in Web Matrix
</div>
<p>The Gallery option presents a list of 52 CMS, blogging, eCommerce, (the list goes on) packages that can be installed simply by selectig them. If I select the WordPress option, WebMatrix detects that I don&#8217;t have MyQSL installed and asks if I want to install it or have access to a remote installation. Other gallery options offer similar interactions for their own requirements, with the goal being a completely running system in only a few clicks. In the case of WordPress it will also detect whether you have PHP installed (more on that later) and install that as well.</p>
<div style="border: 1px solid #AAAAAA; font-size: 80%; color: #666666; text-align: center; padding: 8px; margin: 8px;">
<img src="http://tiernok.com/LTDBlog/webmatrix/Installing.png" alt="WordPress Install" style="padding-bottom: 5px;" /><br />
Installing WordPress
</div>
<p>With a download, a few button clicks, administrative permissions, and entry of some basic settings, I just installed a fully customizeable version of WordPress. Which is really cool, but also kind of scary if you think about how little technical knowledge I really needed and that there are dozens of other packages available.</p>
<p><em>Note: it was at this point I noticed my MySQL installation was annoyed and not running properly, leaving me stuck partway on the WordPress Install. So a big YMMV may be necessary here, as it seems my skill at causing things to break has managed to break yet another &#8220;Next, Next, Next&#8221; wizardy dialog.</em></p>
<p><strong>More Depth:</strong> <a href="http://drewby.com/a-wordpress-blog-in-15-minutes-with-webmatrix" title="A WordPress Blog in 15 Minutes with WebMatrix">A WordPress Blog in 15 Minutes with WebMatrix</a></p>
<h2>Building Sites &#8211; But Wait, There&#8217;s More</h2>
<p>Ok, so what if we want to build our own site?</p>
<div style="border: 1px solid #AAAAAA; font-size: 80%; color: #666666; text-align: center; padding: 8px; margin: 8px;">
<img src="http://tiernok.com/LTDBlog/webmatrix/SiteFromTemplate.png" alt="Creating Site From Template" style="padding-bottom: 5px;" /><br />
Creating Site from Template
</div>
<p>The other side of the Site creation process is the option to create one from a template. This offers five options ranging from &#8220;Empty Site&#8221; to &#8220;Start Site and even &#8220;Bakery&#8221;. If you start with one of the non-Empty sites you will be given all the files and folders for a fully functioning site. These sites are based on the new WebPages framework and written in the C#-style razor syntax. The WebPages framework was released in conjunction with WebMatrix and joins Web Forms and MVC as an available ASP.Net framework.</p>
<p>If we select the empty site option we&#8217;ll be presented with one lonely little robots.txt file and an empty folder. The interesting part is what happens when we ask to add a file. We receive a file creation dialog (which should be familiar to Visual Studio users) and, given what I have seen so far and my Visual Studio background, I expect a list of CSHTML files, CSS, and maybe a JS or HTML. </p>
<p>Nope.</p>
<p>HTML, CSS, JScript, and CSHTML are present, but so are (huge breath): VBHTML, 2 ASPX&#8217;s (VB + C#), Classic ASP, PHP, TXT, XML, 2 Class Files (VB + C#), 3 Global ASA[X]&#8217;s, 3 Master Pages, SQL, User Controls (VB + C#), and 4 web configs (.Net 2, 3, 3.5, 4).</p>
<p>The CSHTML and VBHTML options are using the new <a href="http://weblogs.asp.net/scottgu/archive/2010/07/02/introducing-razor.aspx" title="Razor engine announcement">razor engine</a> and this is the most commonly documented option both on the <a href="http://www.asp.net/web-pages" title="Resources at ASP.Net">ASP.Net website</a> and in blogs. The PHP option offers you a choice between installation of PHP 5.2 and 5.3 (enable it in IIS by checking the lonely PHP checkbox in the IIS/site settings) and away we go with some PHP-ing. </p>
<p>And to be honest I haven&#8217;t even had time to try the rest, but they all seem fairly self-explanatory and, if I could get PHP running in a new MS web tool in just a few moments, I don&#8217;t expect to see too many surprises from the cast of MS Web technologies. Although I do want to try the Classic ASP one, for nostalgia if nothing else.</p>
<p><strong>More Depth:</strong> <a href="http://www.asp.net/webmatrix/tutorials" title="WebMatrix Tutorials at ASP.net">Web Matrix Tutorials (CSHTML) at ASP.Net</a><br />
<strong>More Depth:</strong> <a href="http://blogs.msdn.com/b/brian_swan/archive/2010/07/12/creating-php-websites-with-webmatrix.aspx" title="Creating PHP Websites with WebMatrix">Creating PHP Websites with WebMatrix</a><br />
<strong>More Depth:</strong> <a href="/index.php/WebDev/UIDevelopment/AJAX/trying-out-webmatrix-and-razor" title="Chrissie - Trying Out WebMatrix and Razor">Trying Out WebMatrix and Razor</a> by Chrissie<br />
<strong>More Depth:</strong> Not finding a good Classic ASP link&#8230;</p>
<p>Unfortunately intellisense is either non-existent or just extremely limited and not noticeable after a day using Visual Studio. However, if you have Visual Studio available then you can click the Visual Studio button on the WebMatrix tool bar and the project and file you are currently working on will immediately open in Visual Studio, allowing you to take advantage of it&#8217;s more extensive editing (and of course intellisense) capabilities.</p>
<h2>Running and Debugging Sites</h2>
<p>With so many different options, running these sites must require jumping through a hoop, on fire, balancing a water balloon on our nose, right?</p>
<p>Not so much.</p>
<p>WebMatrix uses IIS Express internally and offers a simple interface to hook into just a few settings that will cover most of our needs. Press the &#8220;Run&#8221; button and we&#8217;re greeted with the current page run in whatever our default browser is. </p>
<div style="border: 1px solid #AAAAAA; font-size: 80%; color: #666666; text-align: center; padding: 8px; margin: 8px;">
<img src="http://tiernok.com/LTDBlog/webmatrix/Toolbar.png" alt="WebMatrix Files Toolbar" style="padding-bottom: 5px; max-width: 750px;" /><br />
WebMatrix Files Toolbar
</div>
<p>PHP? CSHTML? Text file? Doesn&#8217;t matter. Because IIS Express is running in the background, all WebMatrix has to do is fire a URL at a browser and we&#8217;re there. </p>
<p>Another advantage to this setup is that we don&#8217;t have to dig through yet another revision of the IIS management interface. Which is great for me, as I have been downgraded to just a programmer for the last few years and left most of my IIS management experience rusting away on the older IIS 6/5/4-style interface.</p>
<div style="border: 1px solid #AAAAAA; font-size: 80%; color: #666666; text-align: center; padding: 8px; margin: 8px;">
<img src="http://tiernok.com/LTDBlog/webmatrix/requests.png" alt="WebMatrix Requests Page" style="padding-bottom: 5px;" /><br />
IIS Requests Page
</div>
<p>Basic settings are available to manage our default site pages, enable PHP, change the .Net framework version, enable SSL, and so on. A page is also available to view the HTTP requests that are being made to the IIS instance, letting us see the lonely calls for a favicon go forever unanswered or the execution time for each individual HTTP request.</p>
<h2>Managing Data</h2>
<p>So we have web pages and a way to host them, what about managing the database behind the site? Yep, WebMatrix is there too.</p>
<p>The Databases tab will show you any connections we have configured for the site, as well as any SQL Compact databases (SDF files) available to the site. In our WordPress example this means we have a configured connection to a MySQL (5?) database. For my first sample site I have a SQL Compact database with the ability to manage the tables from inside Web Matrix. I haven&#8217;t connected to SQL Server from inside yet, so I can&#8217;t say whether it offers just a view of the connection, like MySQL, or more extensive management of the tables and queries like SQL Compact or an MDF in Visual Studio.</p>
<div style="border: 1px solid #AAAAAA; font-size: 80%; color: #666666; text-align: center; padding: 8px; margin: 8px;">
<img src="http://tiernok.com/LTDBlog/webmatrix/database.png" alt="SQL Compact View" style="padding-bottom: 5px;" /><br />
SQL Compact DB
</div>
<p>Later on when we deploy we get an interesting option for SDF files. They are treated separately from the main files and are not automatically selected as part of the sync (limiting the chances of a low-coffee-foot-shooting incident).</p>
<p><strong>More Depth:</strong> <a href=http://www.microsoft.com/web/post/connecting-to-a-sql-server-or-mysql-database-in-webmatrix"" title="Connecting to a SQL Server or MySQL Database in WebMatrix">Database Connections at Microsot.com</a><br />
<strong>More Depth:</strong> <a href="http://erikej.blogspot.com/" title="Everything SQL Server Compact">Everything SQL Server Compact site</a><br />
<strong>More Depth:</strong> <a href="https://xosfaere.wordpress.com/2011/01/30/entity-framework-code-first-development-with-sql-ce-4-0/" title="Code-First Development (EF) w/ SQL CE 4.0">Code-First Development (EF) w/ SQL CE 4.0</a> &#8211; I wonder, if you do it DB-first is the code actually larger than the DB?</p>
<h2>Site Reports</h2>
<p>To be honest I haven&#8217;t spent more than about 15 minutes in the site reports because there is just so much to Web Matrix.</p>
<p>I had difficulty creating reports for some sites because it seemed like the report engine would immediately run out and start trying to index the internet. Once I got that under control I was able to run a report of my site and get back some meaningful (and some not) information.</p>
<div style="border: 1px solid #AAAAAA; font-size: 80%; color: #666666; text-align: center; padding: 8px; margin: 8px;">
<img src="http://tiernok.com/LTDBlog/webmatrix/reports.png" alt="Reports" style="padding-bottom: 5px;" /><br />
WebMatrix Reports
</div>
<p>Basically the reporting mechanism attempts to walk through the entire site, gathering statistics on the amount of time each page took to run as well as SEO warnings and errors on each page. The output of the the SEO and Performance data comes with a slider that lets you dynamically filter the output from all information to just the most important subset.</p>
<div style="border: 1px solid #AAAAAA; font-size: 80%; color: #666666; text-align: center; padding: 8px; margin: 8px;">
<img src="http://tiernok.com/LTDBlog/webmatrix/slider.png" alt="Silder" style="padding-bottom: 5px;" /><br />
Report Slider
</div>
<p>For the SEO errors, selecting an individual error displays more information about the error. Probably the most consistent warning I received was leaving the the meta description tag off every page I had written (guilty as charged). Examples of other errors included broken hyperlinks, mixed canonical formats, and just plain bad URLs. </p>
<p><strong>More Depth:</strong> <a href="http://www.microsoft.com/web/post/webmatrix-reports-workspace-help" title="Reports Workspace Help">Webmatrix Reports Workspace Help</a><br />
<strong>More Depth:</strong> <a href="http://www.microsoft.com/web/post/use-webmatrix-to-optimize-your-site-for-search-engines" title="Use WebMatrix to optimize your site for search engines">Use WebMatrix to optimize your site for search engines</a></p>
<h2>Deploying a Site</h2>
<p>Web Matrix uses <a href="http://blogs.iis.net/msdeploy/" title="Official WebDeploy team blog">WebDeploy</a>, doing away with all the manual file dragging or xcopying. On the initial deployment we are asked to enter settings in for our host or, if we don&#8217;t have a host, the tool points us to a <a href="http://www.microsoft.com/web/Hosting/Home?" title="Find Web hosting at microsoft.com">host shopping page</a> to help us find one. Once we have a host, we return to the typical WebMatrix approach of only needing a few settings (instead of a reference manual the size of my car).</p>
<div style="border: 1px solid #AAAAAA; font-size: 80%; color: #666666; text-align: center; padding: 8px; margin: 8px;">
<img src="http://tiernok.com/LTDBlog/webmatrix/publish1.png" alt="Publishing" style="padding-bottom: 5px;" /><br />
WebMatrix Publishing
</div>
<p>The initial deployment only takes a few settings or, if you are like me and have a host that supports it, the download of a settings file. The only major hiccup I ran into was that at one point I had a SQL Compact database open in Visual Studio (or maybe just locked, not sure) and this caused all kinds of deployment problems. I have since decided that closing visual studio while deploying seems to be the safe, pain-free route.</p>
<p>Deployments after the initial one are not full site deployments. The tool will scan for changes that haven&#8217;t been deployed yet and provide us with the option of selecting which changes we would like to deploy. It automatically selects all file changes, but leaves SQL Compact files unchecked. </p>
<div style="border: 1px solid #AAAAAA; font-size: 80%; color: #666666; text-align: center; padding: 8px; margin: 8px;">
<img src="http://tiernok.com/LTDBlog/webmatrix/publish2.png" alt="Publishing" style="padding-bottom: 5px;" /><br />
WebMatrix Publishing
</div>
<p>One problem I have run into, coming from a larger scale database background, was that sometimes I would forget to download a fresh copy of the database before making schema changes (so I then had to download the database, make the changes again, then deploy it back to the live site).</p>
<p><strong>More Depth:</strong> <a href="http://learn.iis.net/page.aspx/871/publish-your-website/" title="Publish Your Website - IIS.Net">Publish Your Website &#8211; IIS.Net</a><br />
<strong>More Depth:</strong> <a href="http://www.hanselman.com/blog/MicrosoftWebMatrixInContextAndDeployingYourFirstSite.aspx" title="Microsoft WebMatrix in Context and Deploying Your First Site">Microsoft WebMatrix in Context and Deploying Your First Site &#8211; Scot Hanselman</a></p>
<h2>The Bad News</h2>
<p>Not all is perfect in WebMatrix land. There are a lot of developers that will dismiss it (and anyone using it) out of hand because they see it as a step backwards (it&#8217;s ok, though, you probably don&#8217;t want to see the code they&#8217;ve been writing anyway). </p>
<p>Perhaps the biggest problem I ran into while using it was the fact that the interface occasionally went wonky on my quad-core, 10GB of RAM system w/ a fairly expensive graphics card. Apparently this is due to the use of WPF, and I&#8217;m not the first LessThanDot-er that has had <a href="/index.php/DesktopDev/MSTech/a-few-reasons-why-i-m-not-yet-moving-to" title="Chrissie's post on A Few Reasons I'm Not Yet Moving to WPF">issues with WPF</a> (and yes, my graphics drivers are up to date).</p>
<p>There are times (like with the WordPress install above) when things won&#8217;t go 100% smoothly. I have only been using it for a few weeks and so far the level of issues has not been enough to warrant a rant on twitter or switching to another topic of study, but stay tuned, it&#8217;s still a young technology.</p>
<h2>Go Try It</h2>
<p>There is little reason not to try this tool. The <a href="http://www.microsoft.com/web/webmatrix/" title="WebMatrix page at Microsoft">download</a> is free, you don&#8217;t have to invest a lot of time to learn how to use a few options in it, and you might just find that it&#8217;s a useful tool to have in your toolbelt. If you are one of the crowd that&#8217;s convinced you don&#8217;t need to learn anything past the one technology you know (and use WITH NO LOCK everywhere) then this may be too complex for you, but the rest should at least give it a try, even the non-developers. Being able to spend an afternoon putting together even a fake little website can be a fun accomplishment and, for me at least, reminded me why I got into web development and programming in the first place.</p>
]]></content:encoded>
			<wfw:commentRss>/index.php/webdev/serverprogramming/the-many-functions-of-webmatrix/feed/</wfw:commentRss>
		<slash:comments>0</slash:comments>
		</item>
		<item>
		<title>Using Binding Redirects to Stay Out of DLL Hell</title>
		<link>/index.php/webdev/serverprogramming/using-binding-redirects-to-stay-out-of-d/</link>
		<comments>/index.php/webdev/serverprogramming/using-binding-redirects-to-stay-out-of-d/#comments</comments>
		<pubDate>Mon, 25 Oct 2010 14:14:00 +0000</pubDate>
		<dc:creator><![CDATA[Alex Ullrich]]></dc:creator>
				<category><![CDATA[ASP.NET]]></category>
		<category><![CDATA[Server Programming]]></category>
		<category><![CDATA[asp.net]]></category>
		<category><![CDATA[wcf]]></category>

		<guid isPermaLink="false">/index.php/2010/10/using-binding-redirects-to-stay-out-of-d/</guid>
		<description><![CDATA[We found ourselves in a tricky situation at work this week.  I'm surprised it hadn't come up before, but I suppose our customers aren't always the type to move to a new technology quickly.  But we had a customer trying to install the back end of our app&#8230;]]></description>
				<content:encoded><![CDATA[<p>We found ourselves in a tricky situation at work this week.  I&#8217;m surprised it hadn&#8217;t come up before, but I suppose our customers aren&#8217;t always the type to move to a new technology quickly.  But we had a customer trying to install the back end of our application on a Windows 2008 server, and having trouble.  We use AzMan to get our application&#8217;s permissions to work with windows authentication, and there was a new version included with server 2008.  Our application was compiled against the 2003 version, and it was having problems when installed in this environment.</p>
<p>We first tried updating our references to use the 2008 version, and this seemed to work fine.  Until people tried to install the most recent builds on XP and 2003 servers the next day.  Needless to say, we wanted to avoid building different installers for different operating systems.  The application had been running fine simply using the AzMan version found in the server&#8217;s GAC previously, so we decided to try and find a way to make it work that way.</p>
<p>Eventually we came across the idea of a <a href="http://msdn.microsoft.com/en-us/library/eftw1fys.aspx">Binding Redirect</a> and thought this might be helpful.  It seems like the redirect only works when pointing to a newer version of a referenced DLL, so we first changed our references to use the 1.0 version of AzMan (from windows 2000) and kicked of a fresh build of the installer.  We set up our redirects like so:</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="xml"><thead><tr><td colspan="2"  class="head">XML</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
</pre></td><td class="de1"><pre class="de1"><span class="sc3"><span class="re1">&lt;?xml</span> <span class="re0">version</span>=<span class="st0">&quot;1.0&quot;</span> <span class="re0">encoding</span>=<span class="st0">&quot;utf-8&quot;</span><span class="re2">?&gt;</span></span>
<span class="sc3"><span class="re1">&lt;configuration<span class="re2">&gt;</span></span></span>
&nbsp; <span class="sc3"><span class="re1">&lt;configSections<span class="re2">&gt;</span></span></span>
&nbsp; &nbsp; <span class="sc-1">&lt;!-- snip --&gt;</span>
&nbsp; <span class="sc3"><span class="re1">&lt;/configSections<span class="re2">&gt;</span></span></span>
&nbsp; &nbsp; <span class="sc3"><span class="re1">&lt;runtime<span class="re2">&gt;</span></span></span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="sc3"><span class="re1">&lt;assemblyBinding</span> <span class="re0">xmlns</span>=<span class="st0">&quot;urn:schemas-microsoft-com:asm.v1&quot;</span><span class="re2">&gt;</span></span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="sc3"><span class="re1">&lt;dependentAssembly<span class="re2">&gt;</span></span></span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="sc3"><span class="re1">&lt;assemblyIdentity</span> <span class="re0">name</span>=<span class="st0">&quot;Microsoft.Interop.Security.AzRoles&quot;</span></span>
<span class="sc3"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span class="re0">publicKeyToken</span>=<span class="st0">&quot;31bf3856ad364e35&quot;</span></span>
<span class="sc3"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span class="re0">culture</span>=<span class="st0">&quot;neutral&quot;</span> <span class="re2">/&gt;</span></span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="sc3"><span class="re1">&lt;bindingRedirect</span> <span class="re0">oldVersion</span>=<span class="st0">&quot;1.0.0.0&quot;</span></span>
<span class="sc3"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="re0">newVersion</span>=<span class="st0">&quot;2.0.0.0&quot;</span><span class="re2">/&gt;</span></span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="sc3"><span class="re1">&lt;bindingRedirect</span> <span class="re0">oldVersion</span>=<span class="st0">&quot;1.0.0.0&quot;</span></span>
<span class="sc3"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="re0">newVersion</span>=<span class="st0">&quot;1.2.0.0&quot;</span><span class="re2">/&gt;</span></span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="sc3"><span class="re1">&lt;/dependentAssembly<span class="re2">&gt;</span></span></span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="sc3"><span class="re1">&lt;/assemblyBinding<span class="re2">&gt;</span></span></span>
&nbsp; &nbsp; <span class="sc3"><span class="re1">&lt;/runtime<span class="re2">&gt;</span></span></span>
&nbsp; &nbsp; <span class="sc-1">&lt;!-- snip --&gt;</span>
<span class="sc3"><span class="re1">&lt;configuration<span class="re2">&gt;</span></span></span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">&lt;?xml version="1.0" encoding="utf-8"?&gt;
&lt;configuration&gt;
  &lt;configSections&gt;
    &lt;!-- snip --&gt;
  &lt;/configSections&gt;
    &lt;runtime&gt;
        &lt;assemblyBinding xmlns="urn:schemas-microsoft-com:asm.v1"&gt;
            &lt;dependentAssembly&gt;
                &lt;assemblyIdentity name="Microsoft.Interop.Security.AzRoles"
                              publicKeyToken="31bf3856ad364e35"
                              culture="neutral" /&gt;
                &lt;bindingRedirect oldVersion="1.0.0.0"
                                                 newVersion="2.0.0.0"/&gt;
                &lt;bindingRedirect oldVersion="1.0.0.0"
                                                 newVersion="1.2.0.0"/&gt;
            &lt;/dependentAssembly&gt;
        &lt;/assemblyBinding&gt;
    &lt;/runtime&gt;
    &lt;!-- snip --&gt;
&lt;configuration&gt;</pre></div></div>

<p>At first it didn&#8217;t work, but looking at the error we noticed that the app was looking for the 2.0 version of AzMan (on a 2003 box where we were expecting 1.2).  Wondering if the ordering of the redirects matters, we switched the two redirect lines and restarted IIS.  Lucky for us, it worked (on Windows 2008 R2, 2008 and 2003 sp2 boxes).  </p>
<p>This isn&#8217;t something I&#8217;ve had to do a lot, and I&#8217;m not sure it&#8217;s something I&#8217;d like to do too often (I may be overly obsessive about local references for a few reasons).  But for cases like this where you&#8217;re working with a legacy component that is tightly bound to the OS AND maintains a pretty consistent interface across versions, it can certainly come in handy.</p>
]]></content:encoded>
			<wfw:commentRss>/index.php/webdev/serverprogramming/using-binding-redirects-to-stay-out-of-d/feed/</wfw:commentRss>
		<slash:comments>1</slash:comments>
		</item>
		<item>
		<title>Patch for the ASP.NET Padding Oracle vulnerability has been released</title>
		<link>/index.php/webdev/serverprogramming/aspnet/patch-for-the-asp-net-padding-oracle-vul/</link>
		<comments>/index.php/webdev/serverprogramming/aspnet/patch-for-the-asp-net-padding-oracle-vul/#respond</comments>
		<pubDate>Tue, 28 Sep 2010 21:24:58 +0000</pubDate>
		<dc:creator><![CDATA[SQLDenis]]></dc:creator>
				<category><![CDATA[ASP.NET]]></category>
		<category><![CDATA[asp.net]]></category>
		<category><![CDATA[asp.net mvc]]></category>
		<category><![CDATA[mvc]]></category>
		<category><![CDATA[patch]]></category>
		<category><![CDATA[sharepoint]]></category>
		<category><![CDATA[vulnerability]]></category>

		<guid isPermaLink="false">/index.php/2010/09/patch-for-the-asp-net-padding-oracle-vul/</guid>
		<description><![CDATA[If you are running an ASP.NET, ASP.NET MVC or Sharepoint site, grab the patch for the ASP.NET Padding Oracle vulnerability 

Some info:
This security update resolves a publicly disclosed vulnerability in ASP.NET. The vulnerability could allow informa&#8230;]]></description>
				<content:encoded><![CDATA[<p>If you are running an ASP.NET, ASP.NET MVC or Sharepoint site, grab the patch for the ASP.NET Padding Oracle vulnerability </p>
<p>Some info:</p>
<blockquote><p>This security update resolves a publicly disclosed vulnerability in ASP.NET. The vulnerability could allow information disclosure. An attacker who successfully exploited this vulnerability could read data, such as the view state, which was encrypted by the server. This vulnerability can also be used for data tampering, which, if successfully exploited, could be used to decrypt and tamper with the data encrypted by the server. Microsoft .NET Framework versions prior to Microsoft .NET Framework 3.5 Service Pack 1 are not affected by the file content disclosure portion of this vulnerability.</p></blockquote>
<p>And a little more info:</p>
<blockquote><p>An information disclosure vulnerability exists in ASP.NET due to improper error handling during encryption padding verification. An attacker who successfully exploited this vulnerability could read data, such as the view state, which was encrypted by the server. This vulnerability can also be used for data tampering, which, if successfully exploited, could be used to decrypt and tamper with the data encrypted by the server. Note that this vulnerability would not allow an attacker to execute code or to elevate their user rights directly, but it could be used to produce information that could be used to try to further compromise the affected system. In Microsoft .NET Framework 3.5 Service Pack 1 and above,<strong> this vulnerability can also be used by an attacker to retrieve the contents of any file within the ASP.NET application, including web.config.</strong></p></blockquote>
<p>Get it here: http://www.microsoft.com/technet/security/bulletin/ms10-070.mspx</p>
<p>The Padding Oracle Exploit Tool is available here http://netifera.com/research/ in case you want to see how it works</p>
<p>Here is a video of the attack in action<br />
[video:youtube:yghiC_U2RaM]</p>
<p><strong>Again, get the patch here:</strong> http://www.microsoft.com/technet/security/bulletin/ms10-070.mspx</p>
]]></content:encoded>
			<wfw:commentRss>/index.php/webdev/serverprogramming/aspnet/patch-for-the-asp-net-padding-oracle-vul/feed/</wfw:commentRss>
		<slash:comments>0</slash:comments>
		</item>
		<item>
		<title>Some Thoughts on Session Management</title>
		<link>/index.php/webdev/serverprogramming/aspnet/some-thoughts-on-session-management/</link>
		<comments>/index.php/webdev/serverprogramming/aspnet/some-thoughts-on-session-management/#respond</comments>
		<pubDate>Mon, 16 Aug 2010 21:31:00 +0000</pubDate>
		<dc:creator><![CDATA[Alex Ullrich]]></dc:creator>
				<category><![CDATA[ASP.NET]]></category>
		<category><![CDATA[asp.net]]></category>
		<category><![CDATA[c#]]></category>
		<category><![CDATA[nhibernate]]></category>

		<guid isPermaLink="false">/index.php/2010/08/some-thoughts-on-session-management/</guid>
		<description><![CDATA[The last time I did a post on NHibernate (or any post for that matter &#8211; I guess I&#8217;ve been a bit busy) Ben asked a question about what I ended up using for session management in the application I&#8217;ve been working on. I guess I could come out and answer it, but I&#8217;d hardly [&#8230;]]]></description>
				<content:encoded><![CDATA[<p>The last time I did a post on NHibernate (or any post for that matter &#8211; I guess I&#8217;ve been a bit busy) <a href="/index.php/DesktopDev/MSTech/two-years-with-nhibernate-lessons-learne#c3958">Ben</a> asked a question about what I ended up using for session management in the application I&#8217;ve been working on.  I guess I could come out and answer it, but I&#8217;d hardly get a new post out of that.  Instead I will break out the tried and true answer for all things IT, &#8220;It depends&#8221;.  Let&#8217;s take a look at what it depends on.</p>
<h2>What is the Session?</h2>
<p>This is probably the best place to start.  If you&#8217;re used to working with ADO.net, jdbc, or something similar, it&#8217;s easy to think of the session as nothing more than a window into your database that allows you to execute queries, like an <a href="http://msdn.microsoft.com/en-us/library/system.data.idbconnection.aspx">IDbConnection</a>, but it does a lot more for you if you let it.  NHibernate sessions provide a great <a href="http://martinfowler.com/eaaCatalog/unitOfWork.html">Unit of Work</a> container, allowing you a great deal of control over how things get written to your database.  Unless you are using a stateless session (a session configured not to hold anything in memory) the session will also use NHibernate&#8217;s first level cache to store objects that are in use, helping you to avoid excessive trips to the database.</p>
<h2>What is your Unit of Work?</h2>
<p>This is the $64,000 question.  Once you know what your unit of work is, session management will more or less solve itself.  As you can imagine, this is highly dependent on the nature of the application you&#8217;re working on.  In most cases the unit of work is synonymous with a business transaction.  It represents the minimum amount of work that you want to commit to your underlying storage mechanism.  This is an all or nothing proposition &#8211; if your unit of work requires you to write four objects to a data store, and only three succeed, then the three that succeeded will be cancelled, or rolled back.  </p>
<p>Keeping this in mind, a desktop application using an embedded database for persistence may be able to get by with a single session for the life of the application, as long as transactions are properly committed and the session is flushed when the app shuts down.  This gives you the benefit of storing a LOT of data in the first level cache, which can be very beneficial when you&#8217;re positive no one else will be modifying it (though, with an in memory database you may not even need the first level cache <img src="https://s.w.org/images/core/emoji/2/72x72/1f609.png" alt="😉" class="wp-smiley" style="height: 1em; max-height: 1em;" /> ).  </p>
<p>At the other end of the spectrum you could find SOA type applications where the unit of work is performed across several round trips between client and server.  Using this strategy, subsequent requests to the server need to be able to find their way back to the same session that their work was started with, otherwise they won&#8217;t have the data they need.  In most cases I&#8217;d imagine this requires a more complete unit of work implementation that can be persisted across requests and use the NHibernate session under the hood.  </p>
<h2>What about Me?</h2>
<p>Like most people, I find myself somewhere in the middle of this spectrum.  My application is web-based, and the primary unit of work can be completed in a single request, so I ended up using a session per request strategy.  I found that <a href="http://structuremap.github.com/structuremap/index.html">StructureMap</a> makes managing this a lot easier.  I need to first register a Session Factory (as a singleton) with StructureMap.  I then tell StructureMap how to retrieve an ISession from this factory (using the ConstructedBy method), and also ensure that it caches sessions <em>per HTTP context</em>.  This is all registered from the application layer, but consumed farther down in the persistence layer.  Finally, in Application_EndRequest I call a function to clean up anything that StructureMap has cached by HTTP context.  </p>
<p>I mentioned that this was the &#8220;primary&#8221; unit of work, there is one area that this does not cover, and that is authentication.  For a while I used built in providers (for SQL Server, then the MySQL provider in MySQL.Data), but when I moved databases again (to postgres) I decided it was time to make a change.  Now I&#8217;m using a <a href="http://msdn.microsoft.com/en-us/library/system.web.security.membershipprovider.aspx">MembershipProvider</a> based on NHibernate, to ensure that it is as easy to move my authentication mechanism across database platforms as it is to move the domain logic.  To me, using the session per request strategy didn&#8217;t really make a lot of sense here because the provider isn&#8217;t really tied to the HTTP context, but to the application itself.  In addition, all data used by the authentication process can ONLY be changed through the membership provider.  So, for authentication I keep a single session open for the entire life of the application.  This would present some interesting challenges if I were to need to scale across multiple servers, but the code changes to the provider will not be too difficult.  In the meantime, I see some pretty good performance benefits from using the single session, as the provider rarely needs to hit the database, or even the second level cache (memcached).</p>
<p>In summary, I find it difficult to offer advice about session management without knowing more about the application.  Others have already explained the underlying concepts far better than I could ever hope to, so in a way writing this post feels like a complete waste.  But I like writing about my thought process when it comes to matters like these, so I did enjoy writing it.  And I think there is some value in sharing this thought process with others, so hopefully at least a few people get something out of reading it.  Especially Ben, if he&#8217;s still reading.</p>
]]></content:encoded>
			<wfw:commentRss>/index.php/webdev/serverprogramming/aspnet/some-thoughts-on-session-management/feed/</wfw:commentRss>
		<slash:comments>0</slash:comments>
		</item>
	</channel>
</rss>
