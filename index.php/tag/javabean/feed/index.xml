<?xml version="1.0" encoding="UTF-8"?><rss version="2.0"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:atom="http://www.w3.org/2005/Atom"
	xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
	xmlns:slash="http://purl.org/rss/1.0/modules/slash/"
	>

<channel>
	<title>javabean &#8211; LessthanDot</title>
	<atom:link href="/index.php/tag/javabean/feed/" rel="self" type="application/rss+xml" />
	<link>/</link>
	<description>A Technical Community for IT Professionals</description>
	<lastBuildDate>Sat, 09 Mar 2019 12:50:36 +0000</lastBuildDate>
	<language>en-US</language>
	<sy:updatePeriod>hourly</sy:updatePeriod>
	<sy:updateFrequency>1</sy:updateFrequency>
	<generator>https://wordpress.org/?v=4.6.1</generator>
	<item>
		<title>Java Training Day 5</title>
		<link>/index.php/enterprisedev/application-lifecycle-management/java-training-day-5/</link>
		<comments>/index.php/enterprisedev/application-lifecycle-management/java-training-day-5/#respond</comments>
		<pubDate>Sat, 01 Dec 2012 00:41:00 +0000</pubDate>
		<dc:creator><![CDATA[SQLDenis]]></dc:creator>
				<category><![CDATA[Application Lifecycle Management]]></category>
		<category><![CDATA[io]]></category>
		<category><![CDATA[java]]></category>
		<category><![CDATA[javabean]]></category>
		<category><![CDATA[jsp]]></category>
		<category><![CDATA[jvm]]></category>
		<category><![CDATA[sockets]]></category>

		<guid isPermaLink="false">/index.php/2012/11/java-training-day-5/</guid>
		<description><![CDATA[Last day of the training and I am glad it is over...this stuff is draining

Here is what was covered today

Network Programming
Low Level TCP/IP Protocols
IPv4 and IPv6
UDP Multicast
TCP/IP

Message Based protocols
HTTP
Connections framework&#8230;]]></description>
				<content:encoded><![CDATA[<p>Last day of the training and I am glad it is over&#8230;this stuff is draining</p>
<p>Here is what was covered today</p>
<p><strong>Network Programming</strong><br />
Low Level TCP/IP Protocols<br />
IPv4 and IPv6<br />
UDP Multicast<br />
TCP/IP</p>
<p>Message Based protocols<br />
HTTP<br />
Connections framework using URL (Unified Resource Locator)</p>
<p>Remote Objects<br />
RMI (Remote Method Invocation)<br />
CORBA (Common Object Request Broker Architecture)</p>
<p>Optional packages supporting additional protocols<br />
SOAP, Mail etc etc</p>
<p>We talked about port numbers, here are some common ones that you might know</p>
<p>20 &amp; 21: File Transfer Protocol (FTP)<br />
22: Secure Shell (SSH)<br />
23: Telnet remote login service<br />
25: Simple Mail Transfer Protocol (SMTP)<br />
53: Domain Name System (DNS) service<br />
80: Hypertext Transfer Protocol (HTTP)<br />
110: Post Office Protocol (POP3)<br />
119: Network News Transfer Protocol (NNTP)<br />
143: Internet Message Access Protocol (IMAP)<br />
161: Simple Network Management Protocol (SNMP)<br />
443: HTTP Secure (HTTPS)</p>
<p><strong>Threads</strong><br />
In an operating process, each running program is basically a process<br />
The operating system schedules processes for execution<br />
Each process has its own (virtual) address space<br />
Communications between processes is hampered by context switching</p>
<p>A thread is a flow of execution within a java process<br />
The JVM schedules therads for execution<br />
Threads share access to java objects<br />
Communication between threads is quick</p>
<p>On multi-CPU/multi-core machines, several threads can execute at the same time</p>
<p><strong>Executing with threads</strong><br />
One thread is started automatically to execute main()<br />
The main() method may start additional threads<br />
Single threaded applications run until main() terminates<br />
Multi threaded applications run until all threads have terminated or if one of the threads calls System.exit()</p>
<p><strong>Static methods manipulate the current thread</strong><br />
currentThread() returns a refernce to the thread that is currently executing<br />
yield() pauses the currently executing thread<br />
sleep(int ms) blocks the currently executing thread for a specific milliseconds</p>
<p><strong>Instance methods that manipulate a particular thread</strong><br />
start() starts thread execution<br />
getName() gets the name of the thread<br />
interrupt() throws an exception or sets the interrupt status<br />
join() waits for the thread to die<br />
setPriority set the priority for a thread </p>
<p>The run() method will hold the code to be executed by a thread</p>
<p>The stop(), suspend() and resume() methods are deprecated</p>
<p>Local variables are never shared between threads, threads can share memory on the heap like static variables, instance variables and members of arrays<br />
We covered synchronization, thread scheduling</p>
<p><strong>JDBC</strong><br />
WE covered the regular DB related stuff, how to connect to a DB, explanation what the 4 type of jdbc drivers are, executing, statements, prepared statements and stored procedures</p>
<p><strong>Web programming</strong><br />
We covered servlets, JSP, javabeans, struts, mvc&#8230;pretty much similar stuff I was doing in 2001 but now we have many more frameworks to makes things easier</p>
]]></content:encoded>
			<wfw:commentRss>/index.php/enterprisedev/application-lifecycle-management/java-training-day-5/feed/</wfw:commentRss>
		<slash:comments>0</slash:comments>
		</item>
	</channel>
</rss>
