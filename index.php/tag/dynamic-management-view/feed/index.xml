<?xml version="1.0" encoding="UTF-8"?><rss version="2.0"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:atom="http://www.w3.org/2005/Atom"
	xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
	xmlns:slash="http://purl.org/rss/1.0/modules/slash/"
	>

<channel>
	<title>dynamic management view &#8211; LessthanDot</title>
	<atom:link href="/index.php/tag/dynamic-management-view/feed/" rel="self" type="application/rss+xml" />
	<link>/</link>
	<description>A Technical Community for IT Professionals</description>
	<lastBuildDate>Sat, 09 Mar 2019 12:50:36 +0000</lastBuildDate>
	<language>en-US</language>
	<sy:updatePeriod>hourly</sy:updatePeriod>
	<sy:updateFrequency>1</sy:updateFrequency>
	<generator>https://wordpress.org/?v=4.6.1</generator>
	<item>
		<title>New Dynamic Management Views in SQL Server 2014 CTP1</title>
		<link>/index.php/datamgmt/dbprogramming/new-dynamic-management-views-in/</link>
		<comments>/index.php/datamgmt/dbprogramming/new-dynamic-management-views-in/#respond</comments>
		<pubDate>Tue, 25 Jun 2013 07:59:00 +0000</pubDate>
		<dc:creator><![CDATA[SQLDenis]]></dc:creator>
				<category><![CDATA[Database Programming]]></category>
		<category><![CDATA[Microsoft SQL Server]]></category>
		<category><![CDATA[Microsoft SQL Server Admin]]></category>
		<category><![CDATA[dmv]]></category>
		<category><![CDATA[dynamic management view]]></category>
		<category><![CDATA[hekaton]]></category>
		<category><![CDATA[sql server 2014]]></category>

		<guid isPermaLink="false">/index.php/2013/06/new-dynamic-management-views-in/</guid>
		<description><![CDATA[There are 26 new Dynamic Management Views in SQl Server 2014 CTP1.

Here is a list of these DMVs in alphabetical order

sys.dm_db_merge_requests
sys.dm_db_xtp_checkpoint
sys.dm_db_xtp_checkpoint_files
sys.dm_db_xtp_gc_cycle_stats
sys.dm_db_xtp_h&#8230;]]></description>
				<content:encoded><![CDATA[<p>There are 26 new Dynamic Management Views in SQl Server 2014 CTP1.</p>
<p>Here is a list of these DMVs in alphabetical order</p>
<p>sys.dm_db_merge_requests<br />
sys.dm_db_xtp_checkpoint<br />
sys.dm_db_xtp_checkpoint_files<br />
sys.dm_db_xtp_gc_cycle_stats<br />
sys.dm_db_xtp_hash_index_stats<br />
sys.dm_db_xtp_index_stats<br />
sys.dm_db_xtp_memory_consumers<br />
sys.dm_db_xtp_object_stats<br />
sys.dm_db_xtp_table_memory_stats<br />
sys.dm_db_xtp_transactions<br />
sys.dm_io_cluster_shared_volumes<br />
sys.dm_os_buffer_pool_extension_configuration<br />
sys.dm_resource_governor_resource_pool_volumes<br />
sys.dm_xe_database_session_event_actions<br />
sys.dm_xe_database_session_events<br />
sys.dm_xe_database_session_object_columns<br />
sys.dm_xe_database_session_targets<br />
sys.dm_xe_database_sessions<br />
sys.dm_xtp_consumer_memory_usage<br />
sys.dm_xtp_gc_queue_stats<br />
sys.dm_xtp_gc_stats<br />
sys.dm_xtp_memory_stats<br />
sys.dm_xtp_system_memory_consumers<br />
sys.dm_xtp_threads<br />
sys.dm_xtp_transaction_recent_rows<br />
sys.dm_xtp_transaction_stats</p>
<p>The DMVs that start with sys.dm_db_xtp or sys.dm_xtp are Hekaton (In-Memory OLTP) specific DMVs<br />
The DMVs that start with sys.dm_db_xtp return information about individual Hekaton enabled databases, The DMVs that start with sys.dm_xtp_* provide information about the instance.</p>
<p>There are also a bunch of Extended Events DMVs as well</p>
<p>In total there are now 204 DMVs in SQL Server 2014</p>
]]></content:encoded>
			<wfw:commentRss>/index.php/datamgmt/dbprogramming/new-dynamic-management-views-in/feed/</wfw:commentRss>
		<slash:comments>0</slash:comments>
		</item>
		<item>
		<title>An easier way to get SQL Server startup parameters: the sys.dm_server_registry dmv</title>
		<link>/index.php/datamgmt/dbadmin/an-easier-way-to-get/</link>
		<comments>/index.php/datamgmt/dbadmin/an-easier-way-to-get/#comments</comments>
		<pubDate>Sun, 24 Feb 2013 22:51:00 +0000</pubDate>
		<dc:creator><![CDATA[SQLDenis]]></dc:creator>
				<category><![CDATA[Database Administration]]></category>
		<category><![CDATA[Microsoft SQL Server]]></category>
		<category><![CDATA[Microsoft SQL Server Admin]]></category>
		<category><![CDATA[dmv]]></category>
		<category><![CDATA[dynamic management view]]></category>
		<category><![CDATA[registry]]></category>
		<category><![CDATA[sql server 2012]]></category>
		<category><![CDATA[startup options]]></category>

		<guid isPermaLink="false">/index.php/2013/02/an-easier-way-to-get/</guid>
		<description><![CDATA[When you install SQL Server, Setup will write a set of default startup options to the Windows registry. You can use the startup options to specify an alternate master database file, master database log file, or error log file.

Here is what the defaul&#8230;]]></description>
				<content:encoded><![CDATA[<p>When you install SQL Server, Setup will write a set of default startup options to the Windows registry. You can use the startup options to specify an alternate master database file, master database log file, or error log file.</p>
<p>Here is what the default options are according to Books on line</p>
<div class="tables">
<table>
<tr>
<th>Default startup options</th>
<th>Description</th>
</tr>
<tr>
<td>
<p><strong>-d </strong><span class="parameter">master_file_path</span></p>
</td>
<td>
<p>The fully qualified path for the master database file (typically, C:Program FilesMicrosoft SQL ServerMSSQL.<span class="parameter">n</span>MSSQLDatamaster.mdf). If you do not provide this option, the existing registry parameters are used.</p>
</td>
</tr>
<tr>
<td>
<p><strong>-e </strong><span class="parameter">error_log_path</span></p>
</td>
<td>
<p>The fully qualified path for the error log file (typically, C:Program FilesMicrosoft SQL ServerMSSQL.<span class="parameter">n</span>MSSQLLOGERRORLOG). If you do not provide this option, the existing registry parameters are used.</p>
</td>
</tr>
<tr>
<td>
<p><strong>-l </strong><span class="parameter">master_log_path</span></p>
</td>
<td>
<p>The fully qualified path for the master database log file (typically C:Program FilesMicrosoft SQL ServerMSSQL.<span class="parameter">n</span>MSSQLDatamastlog.ldf). If you do not specify this option, the existing registry parameters are used.</p>
</td>
</tr>
</table>
</div>
<p>If you want to get the startup parameters for SQL Server, you can either read the registry or open up SQL Server Configuration Manager and look at the Startup Parameters tab, here is what it looks like on my laptop</p>
<div class="image_block"><a href="/wp-content/uploads/blogs/DataMgmt/Denis/StartupParameters.PNG?mtime=1361752440"><img alt="SQL Server Configuration Manager: Startup Parameters" title="SQL Server Configuration Manager: Startup Parameters" src="/wp-content/uploads/blogs/DataMgmt/Denis/StartupParameters.PNG?mtime=1361752440" width="417" height="481" /></a></div>
<p>Did you know that you can do this in an easier way on SQL Server 2012? No, I am not talking about using the undocumented <code>xp_regread </code>stored procedure. A new dynamic management view was introduced, this view is sys.dm_server_registry.</p>
<p>Now if I want to see the parameters, all I need is</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
</pre></td><td class="de1"><pre class="de1"><span class="kw1">SELECT</span> registry_key, value_name, value_data
<span class="kw1">FROM</span> sys.<span class="me1">dm_server_registry</span>
<span class="kw1">WHERE</span> registry_key <span class="sy0">LIKE</span> N<span class="st0">'%MSSQLServerParameters'</span>;</pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">SELECT registry_key, value_name, value_data
FROM sys.dm_server_registry
WHERE registry_key LIKE N'%MSSQLServerParameters';</pre></div></div>

<p>Output will be something like the following, I made value_data shorter and left out registry_key from the output so that it would fit on one line</p>
<pre>value_name	value_data
SQLArg0	        -dC:MSSQLDATAmaster.mdf
SQLArg1	        -eC:MSSQLLogERRORLOG
SQLArg2	        -lC:MSSQLDATAmastlog.ldf</pre>
<p>There is more that you can do, let&#8217;s see I want to know some stuff about SQL agent</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
</pre></td><td class="de1"><pre class="de1"><span class="kw1">SELECT</span> &nbsp;value_name, value_data
<span class="kw1">FROM</span> sys.<span class="me1">dm_server_registry</span>
<span class="kw1">WHERE</span> registry_key <span class="sy0">LIKE</span> N<span class="st0">'%SQLServerAgent%'</span>;</pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">SELECT  value_name, value_data
FROM sys.dm_server_registry
WHERE registry_key LIKE N'%SQLServerAgent%';</pre></div></div>

<p>output</p>
<pre>value_name	        value_data
ObjectName	        NT ServiceSQLSERVERAGENT
ImagePath	        "C:MSSQLBinnSQLAGENT.EXE" -i MSSQLSERVER
Start	                2
DependOnService	        MSSQLSERVER 
ErrorLoggingLevel	3
JobHistoryMaxRows	1000
JobHistoryMaxRowsPerJob	100
WorkingDirectory	C:MSSQLJOBS</pre>
<p>To see all that this dmv returns, execute the following</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
</pre></td><td class="de1"><pre class="de1"><span class="kw1">SELECT</span> registry_key, value_name, value_data
<span class="kw1">FROM</span> sys.<span class="me1">dm_server_registry</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">SELECT registry_key, value_name, value_data
FROM sys.dm_server_registry</pre></div></div>

<p>It returns 99 rows on my laptop, most of the stuff is TCP/IP related.</p>
]]></content:encoded>
			<wfw:commentRss>/index.php/datamgmt/dbadmin/an-easier-way-to-get/feed/</wfw:commentRss>
		<slash:comments>1</slash:comments>
		</item>
		<item>
		<title>Finding Out How Many Times A Table Is Being Used In Ad Hoc Or Procedure Calls In SQL Server 2005 And 2008</title>
		<link>/index.php/datamgmt/dbprogramming/finding-out-how-many-times-a-table-is-be-2008/</link>
		<comments>/index.php/datamgmt/dbprogramming/finding-out-how-many-times-a-table-is-be-2008/#comments</comments>
		<pubDate>Mon, 03 Aug 2009 12:15:54 +0000</pubDate>
		<dc:creator><![CDATA[SQLDenis]]></dc:creator>
				<category><![CDATA[Database Programming]]></category>
		<category><![CDATA[Microsoft SQL Server]]></category>
		<category><![CDATA[dmv]]></category>
		<category><![CDATA[dynamic management view]]></category>
		<category><![CDATA[sql server 2005]]></category>
		<category><![CDATA[sql server 2008]]></category>
		<category><![CDATA[tip]]></category>
		<category><![CDATA[trick]]></category>

		<guid isPermaLink="false">/index.php/2009/08/finding-out-how-many-times-a-table-is-be-2008/</guid>
		<description><![CDATA[This was asked on twitter the other day and I emailed the person the solution to this. The solution uses dynamic management views and it is not perfect because of a couple of reasons. 1) The dynamic management views don&#8217;t keep this information forever, restart the server and your data is gone 2) If your [&#8230;]]]></description>
				<content:encoded><![CDATA[<p>This was asked on twitter the other day and I emailed the person the solution to this. The solution uses dynamic management views and it is not perfect because of a couple of reasons.<br />
1) The dynamic management views don&#8217;t keep this information forever, restart the server and your data is gone<br />
2) If your table name is in a comment it will be picked up by this query<br />
3) If the table name is part of another object it will also be picked up, for example if you have a table name customer and a view name customers then it will return a row if customers was part of the query but you are lloking for the customer table</p>
<p>So let&#8217;s look at some code<br />
First create the following stored procedure</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
</pre></td><td class="de1"><pre class="de1"><span class="kw1">create</span> <span class="kw1">proc</span> prTestProc
<span class="kw1">as</span>
<span class="kw1">select</span> <span class="sy0">*</span> <span class="kw1">from</span> master..<span class="me1">spt_values</span> <span class="kw1">where</span> type <span class="sy0">=</span> <span class="st0">'P'</span>
go</pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">create proc prTestProc
as
select * from master..spt_values where type = 'P'
go</pre></div></div>

<p>Now run this query 5 times</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
</pre></td><td class="de1"><pre class="de1"><span class="kw1">select</span> <span class="sy0">*</span> <span class="kw1">from</span> master..<span class="me1">spt_values</span> <span class="kw1">where</span> type <span class="sy0">=</span> <span class="st0">'P'</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">select * from master..spt_values where type = 'P'</pre></div></div>

<p>Run this query 6 times</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
</pre></td><td class="de1"><pre class="de1"><span class="kw1">select</span> <span class="kw2">count</span><span class="br0">&#40;</span><span class="sy0">*</span><span class="br0">&#41;</span> <span class="kw1">from</span> master..<span class="me1">spt_values</span> <span class="kw1">where</span> type <span class="sy0">=</span> <span class="st0">'P'</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">select count(*) from master..spt_values where type = 'P'</pre></div></div>

<p>Run this query 7 times</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
</pre></td><td class="de1"><pre class="de1"><span class="kw1">select</span> <span class="kw2">count</span><span class="br0">&#40;</span><span class="sy0">*</span><span class="br0">&#41;</span> <span class="kw1">from</span> master..<span class="me1">spt_values</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">select count(*) from master..spt_values</pre></div></div>

<p>Run this query 8 times</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
</pre></td><td class="de1"><pre class="de1"><span class="kw1">select</span> <span class="kw2">count</span><span class="br0">&#40;</span><span class="sy0">*</span><span class="br0">&#41;</span> <span class="kw1">from</span> master..<span class="me1">spt_values</span> <span class="kw1">where</span> type <span class="sy0">&lt;&gt;</span> <span class="st0">'P'</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">select count(*) from master..spt_values where type &lt;&gt; 'P'</pre></div></div>

<p>Run this stored procedure 9 times</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
</pre></td><td class="de1"><pre class="de1"><span class="kw1">exec</span> prTestProc</pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">exec prTestProc</pre></div></div>

<p>Now let&#8217;s look at the output. Here is the query that returns all the queries, their execution counts, if they were ad hoc or not and their last execution time. The query works by using the sys.dm_exec_query_stats and sys.dm_exec_sql_text dynamic management views to bring back the SQL statements themselves. </p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
</pre></td><td class="de1"><pre class="de1"><span class="kw1">SELECT</span> <span class="sy0">*</span> <span class="kw1">FROM</span><span class="br0">&#40;</span><span class="kw1">SELECT</span> <span class="kw1">coalesce</span><span class="br0">&#40;</span><span class="kw2">object_name</span><span class="br0">&#40;</span>s2.<span class="me1">objectid</span><span class="br0">&#41;</span>,<span class="st0">'Ad-Hoc'</span><span class="br0">&#41;</span> <span class="kw1">as</span> ProcName,execution_count, 
&nbsp; &nbsp; <span class="br0">&#40;</span><span class="kw1">SELECT</span> <span class="kw1">TOP</span> <span class="nu0">1</span> <span class="kw2">SUBSTRING</span><span class="br0">&#40;</span>s2.<span class="kw1">text</span>,statement_start_offset <span class="sy0">/</span> <span class="nu0">2</span><span class="sy0">+</span><span class="nu0">1</span> , 
&nbsp; &nbsp; &nbsp; <span class="br0">&#40;</span> <span class="br0">&#40;</span><span class="kw1">CASE</span> <span class="kw1">WHEN</span> statement_end_offset <span class="sy0">=</span> <span class="sy0">-</span><span class="nu0">1</span> 
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span class="kw1">THEN</span> <span class="br0">&#40;</span><span class="kw2">LEN</span><span class="br0">&#40;</span><span class="kw1">CONVERT</span><span class="br0">&#40;</span><span class="kw1">nvarchar</span><span class="br0">&#40;</span><span class="kw2">max</span><span class="br0">&#41;</span>,s2.<span class="kw1">text</span><span class="br0">&#41;</span><span class="br0">&#41;</span> <span class="sy0">*</span> <span class="nu0">2</span><span class="br0">&#41;</span> 
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span class="kw1">ELSE</span> statement_end_offset <span class="kw1">END</span><span class="br0">&#41;</span> &nbsp;<span class="sy0">-</span> statement_start_offset<span class="br0">&#41;</span> <span class="sy0">/</span> <span class="nu0">2</span><span class="sy0">+</span><span class="nu0">1</span><span class="br0">&#41;</span><span class="br0">&#41;</span> &nbsp;<span class="kw1">AS</span> sql_statement,
&nbsp; &nbsp; &nbsp; &nbsp;last_execution_time
<span class="kw1">FROM</span> sys.<span class="me1">dm_exec_query_stats</span> <span class="kw1">AS</span> s1 
<span class="sy0">CROSS</span> APPLY sys.<span class="me1">dm_exec_sql_text</span><span class="br0">&#40;</span>sql_handle<span class="br0">&#41;</span> <span class="kw1">AS</span> s2 <span class="br0">&#41;</span> x
<span class="kw1">where</span> sql_statement like <span class="st0">'%spt_values%'</span>
<span class="sy0">AND</span> sql_statement <span class="sy0">NOT</span> like <span class="st0">'SELECT * FROM(SELECT coalesce(object_name(s2.objectid)%'</span>
<span class="kw1">ORDER</span> <span class="kw1">BY</span> execution_count <span class="kw1">desc</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">SELECT * FROM(SELECT coalesce(object_name(s2.objectid),'Ad-Hoc') as ProcName,execution_count, 
    (SELECT TOP 1 SUBSTRING(s2.text,statement_start_offset / 2+1 , 
      ( (CASE WHEN statement_end_offset = -1 
         THEN (LEN(CONVERT(nvarchar(max),s2.text)) * 2) 
         ELSE statement_end_offset END)  - statement_start_offset) / 2+1))  AS sql_statement,
       last_execution_time
FROM sys.dm_exec_query_stats AS s1 
CROSS APPLY sys.dm_exec_sql_text(sql_handle) AS s2 ) x
where sql_statement like '%spt_values%'
AND sql_statement NOT like 'SELECT * FROM(SELECT coalesce(object_name(s2.objectid)%'
ORDER BY execution_count desc</pre></div></div>

<p>Here is the output</p>
<pre>ProcName	execution_count	sql_statement							last_execution_time
prTestProc	9		select * from master..spt_values where type = 'P'  		2009-08-03 10:11:38.810
Ad-Hoc		8		SELECT COUNT(*) FROM [master]..[spt_values] WHERE [type]&lt;&gt;@1	2009-08-03 10:11:22.857
Ad-Hoc		7		select count(*) from master..spt_values   			2009-08-03 10:11:19.107
Ad-Hoc		6		select count(*) from master..spt_values where type = 'P'  	2009-08-03 10:11:15.760
Ad-Hoc		5		select * from master..spt_values where type = 'P'  		2009-08-03 10:11:12.280</pre>
<p>Let&#8217;s look at the query in more detail</p>
<p>This line below has the name of the table we are searching for</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
</pre></td><td class="de1"><pre class="de1"><span class="kw1">where</span> sql_statement like <span class="st0">'%spt_values%'</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">where sql_statement like '%spt_values%'</pre></div></div>

<p>The line below excludes the query that we are running itself since that is not what we want to return</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
</pre></td><td class="de1"><pre class="de1"><span class="sy0">AND</span> sql_statement <span class="sy0">NOT</span> like <span class="st0">'SELECT * FROM(SELECT COALESCE(OBJECT_NAME(s2.objectid)%'</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">AND sql_statement NOT like 'SELECT * FROM(SELECT COALESCE(OBJECT_NAME(s2.objectid)%'</pre></div></div>

<p>The line below will return Ad Hoc or the name of the object that the code was in, if s2.objectid is NULL then it was an Ad-Hoc query</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
</pre></td><td class="de1"><pre class="de1"><span class="kw1">coalesce</span><span class="br0">&#40;</span><span class="kw2">object_name</span><span class="br0">&#40;</span>s2.<span class="me1">objectid</span><span class="br0">&#41;</span>,<span class="st0">'Ad Hoc'</span><span class="br0">&#41;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">coalesce(object_name(s2.objectid),'Ad Hoc')</pre></div></div>

<p>As you can see this is probably good enough to give you some quick results to find out if a table is used so that you can drop it. The way I do this is I rename the table by prefixing it with 2 underscores, this enables two things for me<br />
1) I can quickly find the table since it will be on top in the object explorer<br />
2) I don&#8217;t have to think what the original name was, I just remove the 2 leading underscores</p>
<p>Of course you can also run a trace and then store that in a file, this enables you then to parse the file with a trace tool (more on that later this week when I will blog about a couple of free trace tools, Ami Levin just notified me about a new free trace tool so I will include that one). You could also use Extended Events to do something like this but I like this approach because it is very simple and you can all do it in T-SQL</p>
<p></p>
<p>*** <strong>If you have a SQL related question try our <a href="http://forum.lessthandot.com/viewforum.php?f=17">Microsoft SQL Server Programming</a> forum or our <a href="http://forum.lessthandot.com/viewforum.php?f=22">Microsoft SQL Server Admin</a> forum</strong><ins></ins></p>
]]></content:encoded>
			<wfw:commentRss>/index.php/datamgmt/dbprogramming/finding-out-how-many-times-a-table-is-be-2008/feed/</wfw:commentRss>
		<slash:comments>7</slash:comments>
		</item>
	</channel>
</rss>
