<?xml version="1.0" encoding="UTF-8"?><rss version="2.0"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:atom="http://www.w3.org/2005/Atom"
	xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
	xmlns:slash="http://purl.org/rss/1.0/modules/slash/"
	>

<channel>
	<title>Azure Functions &#8211; LessthanDot</title>
	<atom:link href="/index.php/tag/azure-functions/feed/" rel="self" type="application/rss+xml" />
	<link>/</link>
	<description>A Technical Community for IT Professionals</description>
	<lastBuildDate>Sat, 09 Mar 2019 12:50:36 +0000</lastBuildDate>
	<language>en-US</language>
	<sy:updatePeriod>hourly</sy:updatePeriod>
	<sy:updateFrequency>1</sy:updateFrequency>
	<generator>https://wordpress.org/?v=4.6.1</generator>
	<item>
		<title>Using Azure Functions to add a Contact Form to a Static Site</title>
		<link>/index.php/enterprisedev/cloud/azure/using-azure-functions-to-add-a-contact-form-to-a-static-site/</link>
		<comments>/index.php/enterprisedev/cloud/azure/using-azure-functions-to-add-a-contact-form-to-a-static-site/#comments</comments>
		<pubDate>Fri, 27 Jan 2017 15:28:45 +0000</pubDate>
		<dc:creator><![CDATA[Eli Weinstock-Herman (tarwn)]]></dc:creator>
				<category><![CDATA[Azure]]></category>
		<category><![CDATA[Azure Functions]]></category>

		<guid isPermaLink="false">/?p=4979</guid>
		<description><![CDATA[My personal website is a static site: 100% HTML, JS, and CSS files with no server-side processing. I have custom code that pulls data from a variety of sources and builds updated versions of the files from templates, which are then deployed to the host. I do this to move the CPU latency of building [&#8230;]]]></description>
				<content:encoded><![CDATA[<p>My personal website is a static site: 100% HTML, JS, and CSS files with no server-side processing. I have custom code that pulls data from a variety of sources and builds updated versions of the files from templates, which are then deployed to the host. I do this to move the CPU latency of building the pages to my time, instead of charging it to visitors on each page hit. While I have a host, a strategy like this means I could also choose to host for free via github or similar services.</p>
<p>So there&#8217;s a great benefit to the reader and our wallet, but no server-side execution makes things like contact forms trickier. Luckily, Azure Functions or AWS Lambda can be used as a webhook to receive the form post and process it, costing nothing near nothing to use (AWS and Azure both offer a free tier for 1M requests/month and 400,000 GB-seconds of compute time).</p>
<p>So we swap out a hosted server at $x/month for free static page hosting and free contact form (and similar services), it just takes a little different type of work then building the standard PHP, ASP.Net, etc site.</p>
<h2>Creating the Azure Function</h2>
<p>First up, let&#8217;s build out an Azure Function to accept a form post and convert it to an email.</p>
<h3>Setting up the function</h3>
<p>From the Azure Dashboard, create a new &#8220;Azure Function App&#8221;.</p>
<div id="attachment_4981" style="width: 810px" class="wp-caption aligncenter"><a href="/wp-content/uploads/2017/01/Azure_0.png"><img src="/wp-content/uploads/2017/01/Azure_0.png" alt="Azure Function App - Getting Started" width="800" height="467" class="size-full wp-image-4981" srcset="/wp-content/uploads/2017/01/Azure_0.png 800w, /wp-content/uploads/2017/01/Azure_0-300x175.png 300w" sizes="(max-width: 800px) 100vw, 800px" /></a><p class="wp-caption-text">Azure Function App &#8211; Getting Started</p></div>
<p>The Azure Portal offers us a few options to get started quickly. Pick the one on the right &#8220;Webhook + API&#8221; to get a function set up with the trigger and output we need out of the box.</p>
<p>The trigger for the Azure Function is the Webhook endpoint:</p>
<div id="attachment_4998" style="width: 810px" class="wp-caption aligncenter"><a href="/wp-content/uploads/2017/01/Azure_1.png"><img src="/wp-content/uploads/2017/01/Azure_1.png" alt="Azure Function - Webhook Trigger" width="800" height="184" class="size-full wp-image-4998" srcset="/wp-content/uploads/2017/01/Azure_1.png 800w, /wp-content/uploads/2017/01/Azure_1-300x69.png 300w" sizes="(max-width: 800px) 100vw, 800px" /></a><p class="wp-caption-text">Azure Function &#8211; Webhook Trigger</p></div>
<p>We can customize this to listen only to the /contact route and POST messages:</p>
<div id="attachment_4983" style="width: 751px" class="wp-caption aligncenter"><a href="/wp-content/uploads/2017/01/Azure_2.png"><img src="/wp-content/uploads/2017/01/Azure_2.png" alt="Azure Function - Webhook Trigger Details" width="741" height="407" class="size-full wp-image-4983" srcset="/wp-content/uploads/2017/01/Azure_2.png 741w, /wp-content/uploads/2017/01/Azure_2-300x164.png 300w" sizes="(max-width: 741px) 100vw, 741px" /></a><p class="wp-caption-text">Azure Function &#8211; Webhook Trigger Details</p></div>
<p>There are other details we could configure, so as you do this you might start getting all kinds of other ideas (remember, 1M requests/month and 400,000 GB-seconds of compute time for FREE!).</p>
<p>We don&#8217;t have an input for this Azure Function, and the return value is simply the HTTP Response we&#8217;ll return form the trigger, so no further configuration to do:</p>
<div id="attachment_4984" style="width: 401px" class="wp-caption aligncenter"><a href="/wp-content/uploads/2017/01/Azure_3.png"><img src="/wp-content/uploads/2017/01/Azure_3.png" alt="Azure Function - Return Value" width="391" height="278" class="size-full wp-image-4984" srcset="/wp-content/uploads/2017/01/Azure_3.png 391w, /wp-content/uploads/2017/01/Azure_3-300x213.png 300w" sizes="(max-width: 391px) 100vw, 391px" /></a><p class="wp-caption-text">Azure Function &#8211; Return Value</p></div>
<p>We now have the &#8220;hello world&#8221; version of a webhook, let&#8217;s add more code.</p>
<h3>Coding the Contact Email and Response</h3>
<p>The function starts with some generated code that matches the variable names in the Trigger and Output (I picked C#, JavaScript is also an option), attempts to pull a value out of the querystring, and returns a &#8220;Hello&#8221; response:</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="csharp"><thead><tr><td colspan="2"  class="head">C#</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
</pre></td><td class="de1"><pre class="de1"><span class="kw1">using</span> <span class="co3">System.Net</span><span class="sy0">;</span>
&nbsp;
<span class="kw1">public</span> <span class="kw1">static</span> async Task<span class="sy0">&lt;</span>HttpResponseMessage<span class="sy0">&gt;</span> Run<span class="br0">&#40;</span>HttpRequestMessage req, TraceWriter log<span class="br0">&#41;</span>
<span class="br0">&#123;</span>
&nbsp; &nbsp; <span class="co1">// ... sample code we don't need that pulls name from querystring ...</span>
&nbsp;
&nbsp; &nbsp; <span class="kw1">return</span> name <span class="sy0">==</span> <span class="kw1">null</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="sy0">?</span> req<span class="sy0">.</span><span class="me1">CreateResponse</span><span class="br0">&#40;</span>HttpStatusCode<span class="sy0">.</span><span class="me1">BadRequest</span>, <span class="st0">&quot;Please pass a name on the query string or in the request body&quot;</span><span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="sy0">:</span> req<span class="sy0">.</span><span class="me1">CreateResponse</span><span class="br0">&#40;</span>HttpStatusCode<span class="sy0">.</span><span class="me1">OK</span>, <span class="st0">&quot;Hello &quot;</span> <span class="sy0">+</span> name<span class="br0">&#41;</span><span class="sy0">;</span>
<span class="br0">&#125;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">using System.Net;

public static async Task&lt;HttpResponseMessage&gt; Run(HttpRequestMessage req, TraceWriter log)
{
    // ... sample code we don't need that pulls name from querystring ...

    return name == null
        ? req.CreateResponse(HttpStatusCode.BadRequest, "Please pass a name on the query string or in the request body")
        : req.CreateResponse(HttpStatusCode.OK, "Hello " + name);
}</pre></div></div>

<p>Before we start in on the email code, let&#8217;s start by not putting the secrets right in the code. Functions have a built in method to manage secrets, but they&#8217;re not terribly easy to find. Click the &#8220;Function app settings&#8221; menu option at the bottom left to get to this screen:<br />
<div id="attachment_4985" style="width: 420px" class="wp-caption aligncenter"><a href="/wp-content/uploads/2017/01/Azure_4.png"><img src="/wp-content/uploads/2017/01/Azure_4.png" alt="Finding the App Settings, Step 1" width="410" height="249" class="size-full wp-image-4985" srcset="/wp-content/uploads/2017/01/Azure_4.png 410w, /wp-content/uploads/2017/01/Azure_4-300x182.png 300w" sizes="(max-width: 410px) 100vw, 410px" /></a><p class="wp-caption-text">Finding the App Settings, Step 1</p></div></p>
<p>Then click the &#8220;App Settings&#8221; button:</p>
<div id="attachment_4986" style="width: 420px" class="wp-caption aligncenter"><a href="/wp-content/uploads/2017/01/Azure_5.png"><img src="/wp-content/uploads/2017/01/Azure_5.png" alt="Finding the App Settings, Step 2" width="410" height="249" class="size-full wp-image-4986" srcset="/wp-content/uploads/2017/01/Azure_5.png 410w, /wp-content/uploads/2017/01/Azure_5-300x182.png 300w" sizes="(max-width: 410px) 100vw, 410px" /></a><p class="wp-caption-text">Finding the App Settings, Step 2</p></div>
<p>This will open another blade to the right. One of the sections is the &#8220;App settings&#8221; section. You can enter AppSettings key/value configurations here that will be available to your function code. In my case, I&#8217;m going to add in all of my SMTP settings so I don&#8217;t have them stored in the code when I later hook this to a git repository.</p>
<div id="attachment_4987" style="width: 378px" class="wp-caption aligncenter"><a href="/wp-content/uploads/2017/01/Azure_6.png"><img src="/wp-content/uploads/2017/01/Azure_6.png" alt="Adding SMTP AppSettings" width="368" height="459" class="size-full wp-image-4987" srcset="/wp-content/uploads/2017/01/Azure_6.png 368w, /wp-content/uploads/2017/01/Azure_6-240x300.png 240w" sizes="(max-width: 368px) 100vw, 368px" /></a><p class="wp-caption-text">Adding SMTP AppSettings</p></div>
<p>Now we can add some basic validation and some fairly standard &#8220;send an email&#8221; code. I&#8217;m accessing the stored secrets above via ConfigurationManager.AppSettings, as I would if you were writing a .Net application with an app.config. </p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="csharp"><thead><tr><td colspan="2"  class="head">C#</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
</pre></td><td class="de1"><pre class="de1"><span class="kw1">using</span> <span class="co3">System.Configuration</span><span class="sy0">;</span>
<span class="kw1">using</span> <span class="co3">System.Net</span><span class="sy0">;</span>
<span class="kw1">using</span> <span class="co3">System.Net.Mail</span><span class="sy0">;</span>
<span class="kw1">using</span> <span class="co3">System.Threading.Tasks</span><span class="sy0">;</span>
&nbsp;
<span class="kw1">public</span> <span class="kw1">static</span> async Task<span class="sy0">&lt;</span>HttpResponseMessage<span class="sy0">&gt;</span> Run<span class="br0">&#40;</span>HttpRequestMessage req, TraceWriter log<span class="br0">&#41;</span>
<span class="br0">&#123;</span>
&nbsp; &nbsp; log<span class="sy0">.</span><span class="me1">Info</span><span class="br0">&#40;</span><span class="st0">&quot;C# HTTP trigger function processed a request.&quot;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; <span class="co1">// 1: Get request body + validate required content is available</span>
&nbsp; &nbsp; <span class="kw1">var</span> postData <span class="sy0">=</span> await req<span class="sy0">.</span><span class="me1">Content</span><span class="sy0">.</span><span class="me1">ReadAsFormDataAsync</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; <span class="kw1">var</span> missingFields <span class="sy0">=</span> <span class="kw3">new</span> List<span class="sy0">&lt;</span><span class="kw4">string</span><span class="sy0">&gt;</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; <span class="kw1">if</span><span class="br0">&#40;</span>postData<span class="br0">&#91;</span><span class="st0">&quot;fromEmail&quot;</span><span class="br0">&#93;</span> <span class="sy0">==</span> <span class="kw1">null</span><span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; missingFields<span class="sy0">.</span><span class="kw1">Add</span><span class="br0">&#40;</span><span class="st0">&quot;fromEmail&quot;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; <span class="kw1">if</span><span class="br0">&#40;</span>postData<span class="br0">&#91;</span><span class="st0">&quot;message&quot;</span><span class="br0">&#93;</span> <span class="sy0">==</span> <span class="kw1">null</span><span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; missingFields<span class="sy0">.</span><span class="kw1">Add</span><span class="br0">&#40;</span><span class="st0">&quot;message&quot;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; 
&nbsp; &nbsp; <span class="kw1">if</span><span class="br0">&#40;</span>missingFields<span class="sy0">.</span><span class="me1">Any</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#41;</span>
&nbsp; &nbsp; <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">var</span> missingFieldsSummary <span class="sy0">=</span> <span class="kw4">String</span><span class="sy0">.</span><span class="kw1">Join</span><span class="br0">&#40;</span><span class="st0">&quot;, &quot;</span>, missingFields<span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">return</span> req<span class="sy0">.</span><span class="me1">CreateResponse</span><span class="br0">&#40;</span>HttpStatusCode<span class="sy0">.</span><span class="me1">BadRequest</span>, $<span class="st0">&quot;Missing field(s): {missingFieldsSummary}&quot;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp;
&nbsp; &nbsp; <span class="co1">// 2: Site settings</span>
&nbsp; &nbsp; <span class="kw1">var</span> smtpHost <span class="sy0">=</span> ConfigurationManager<span class="sy0">.</span><span class="me1">AppSettings</span><span class="br0">&#91;</span><span class="st0">&quot;smtpHost&quot;</span><span class="br0">&#93;</span><span class="sy0">;</span>
&nbsp; &nbsp; <span class="kw1">var</span> smtpPort <span class="sy0">=</span> Convert<span class="sy0">.</span><span class="me1">ToInt32</span><span class="br0">&#40;</span>ConfigurationManager<span class="sy0">.</span><span class="me1">AppSettings</span><span class="br0">&#91;</span><span class="st0">&quot;smtpPort&quot;</span><span class="br0">&#93;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; <span class="kw1">var</span> smtpEnableSsl <span class="sy0">=</span> Boolean<span class="sy0">.</span><span class="me1">Parse</span><span class="br0">&#40;</span>ConfigurationManager<span class="sy0">.</span><span class="me1">AppSettings</span><span class="br0">&#91;</span><span class="st0">&quot;smtpEnableSsl&quot;</span><span class="br0">&#93;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; <span class="kw1">var</span> smtpUser <span class="sy0">=</span> ConfigurationManager<span class="sy0">.</span><span class="me1">AppSettings</span><span class="br0">&#91;</span><span class="st0">&quot;smtpUser&quot;</span><span class="br0">&#93;</span><span class="sy0">;</span>
&nbsp; &nbsp; <span class="kw1">var</span> smtpPass <span class="sy0">=</span> ConfigurationManager<span class="sy0">.</span><span class="me1">AppSettings</span><span class="br0">&#91;</span><span class="st0">&quot;smtpPass&quot;</span><span class="br0">&#93;</span><span class="sy0">;</span>
&nbsp; &nbsp; <span class="kw1">var</span> toEmail <span class="sy0">=</span> ConfigurationManager<span class="sy0">.</span><span class="me1">AppSettings</span><span class="br0">&#91;</span><span class="st0">&quot;toEmail&quot;</span><span class="br0">&#93;</span><span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; <span class="co1">// 3: Build + Send the email</span>
&nbsp; &nbsp; MailMessage mailObj <span class="sy0">=</span> <span class="kw3">new</span> MailMessage<span class="br0">&#40;</span>postData<span class="br0">&#91;</span><span class="st0">&quot;fromEmail&quot;</span><span class="br0">&#93;</span>, toEmail, <span class="st0">&quot;Site Contact Form&quot;</span>, postData<span class="br0">&#91;</span><span class="st0">&quot;message&quot;</span><span class="br0">&#93;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; SmtpClient client <span class="sy0">=</span> <span class="kw3">new</span> SmtpClient<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; client<span class="sy0">.</span><span class="me1">Host</span> <span class="sy0">=</span> smtpHost<span class="sy0">;</span>
&nbsp; &nbsp; client<span class="sy0">.</span><span class="me1">Port</span> <span class="sy0">=</span> smtpPort<span class="sy0">;</span>
&nbsp; &nbsp; client<span class="sy0">.</span><span class="me1">EnableSsl</span> <span class="sy0">=</span> smtpEnableSsl<span class="sy0">;</span>
&nbsp; &nbsp; client<span class="sy0">.</span><span class="me1">DeliveryMethod</span> <span class="sy0">=</span> SmtpDeliveryMethod<span class="sy0">.</span><span class="me1">Network</span><span class="sy0">;</span>
&nbsp; &nbsp; client<span class="sy0">.</span><span class="me1">UseDefaultCredentials</span> <span class="sy0">=</span> <span class="kw1">false</span><span class="sy0">;</span>
&nbsp; &nbsp; client<span class="sy0">.</span><span class="me1">Credentials</span> <span class="sy0">=</span> <span class="kw3">new</span> <span class="kw5">System.<span class="me1">Net</span></span><span class="sy0">.</span><span class="me1">NetworkCredential</span><span class="br0">&#40;</span>smtpUser, smtpPass<span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; <span class="kw1">try</span>
&nbsp; &nbsp; <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; client<span class="sy0">.</span><span class="me1">Send</span><span class="br0">&#40;</span>mailObj<span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">return</span> req<span class="sy0">.</span><span class="me1">CreateResponse</span><span class="br0">&#40;</span>HttpStatusCode<span class="sy0">.</span><span class="me1">OK</span>, <span class="st0">&quot;Thanks!&quot;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp; &nbsp; <span class="kw1">catch</span> <span class="br0">&#40;</span>Exception ex<span class="br0">&#41;</span>
&nbsp; &nbsp; <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">return</span> req<span class="sy0">.</span><span class="me1">CreateResponse</span><span class="br0">&#40;</span>HttpStatusCode<span class="sy0">.</span><span class="me1">InternalServerError</span>, <span class="kw3">new</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; status <span class="sy0">=</span> <span class="kw1">false</span>,
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; message <span class="sy0">=</span> $<span class="st0">&quot;Email has not been sent: {ex.GetType()}&quot;</span> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; <span class="br0">&#125;</span>
<span class="br0">&#125;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">using System.Configuration;
using System.Net;
using System.Net.Mail;
using System.Threading.Tasks;

public static async Task&lt;HttpResponseMessage&gt; Run(HttpRequestMessage req, TraceWriter log)
{
    log.Info("C# HTTP trigger function processed a request.");

    // 1: Get request body + validate required content is available
    var postData = await req.Content.ReadAsFormDataAsync();
    var missingFields = new List&lt;string&gt;();
    if(postData["fromEmail"] == null)
        missingFields.Add("fromEmail");
    if(postData["message"] == null)
        missingFields.Add("message");
    
    if(missingFields.Any())
    {
        var missingFieldsSummary = String.Join(", ", missingFields);
        return req.CreateResponse(HttpStatusCode.BadRequest, $"Missing field(s): {missingFieldsSummary}");
    }

    // 2: Site settings
    var smtpHost = ConfigurationManager.AppSettings["smtpHost"];
    var smtpPort = Convert.ToInt32(ConfigurationManager.AppSettings["smtpPort"]);
    var smtpEnableSsl = Boolean.Parse(ConfigurationManager.AppSettings["smtpEnableSsl"]);
    var smtpUser = ConfigurationManager.AppSettings["smtpUser"];
    var smtpPass = ConfigurationManager.AppSettings["smtpPass"];
    var toEmail = ConfigurationManager.AppSettings["toEmail"];

    // 3: Build + Send the email
    MailMessage mailObj = new MailMessage(postData["fromEmail"], toEmail, "Site Contact Form", postData["message"]);
    SmtpClient client = new SmtpClient();
    client.Host = smtpHost;
    client.Port = smtpPort;
    client.EnableSsl = smtpEnableSsl;
    client.DeliveryMethod = SmtpDeliveryMethod.Network;
    client.UseDefaultCredentials = false;
    client.Credentials = new System.Net.NetworkCredential(smtpUser, smtpPass);

    try
    {
        client.Send(mailObj);
        return req.CreateResponse(HttpStatusCode.OK, "Thanks!");
    }
    catch (Exception ex)
    {
        return req.CreateResponse(HttpStatusCode.InternalServerError, new {
            status = false,
            message = $"Email has not been sent: {ex.GetType()}"            
        });
    }
}</pre></div></div>

<p>With the code in place, we can use a tool like Postman to fire off some test POSTs and verify all the pieces are connected.</p>
<p>Don&#8217;t grab the URL above your code screen yet, it probably has an Administrative key coded into it. Open the &#8220;Keys&#8221; panel from the button (#1 below) in the top right and select the &#8220;default&#8221; key in the &#8220;Function Keys&#8221; list. When you do this, it will update the Function Url  (#3) above the code panel to include this key instead of one of the Admin keys. As a final step, click the &#8220;Logs&#8221; (#2) button to open the log so you can see compile and run logs when it builds or is triggered. Now copy the Function URL (#3) so we can paste it into Postman to start testing.</p>
<div id="attachment_4999" style="width: 810px" class="wp-caption aligncenter"><a href="/wp-content/uploads/2017/01/Azure_7.png"><img src="/wp-content/uploads/2017/01/Azure_7.png" alt="Azure Functions - Key, Logs, and URL" width="800" height="131" class="size-full wp-image-4999" srcset="/wp-content/uploads/2017/01/Azure_7.png 800w, /wp-content/uploads/2017/01/Azure_7-300x49.png 300w" sizes="(max-width: 800px) 100vw, 800px" /></a><p class="wp-caption-text">Azure Functions &#8211; Key, Logs, and URL</p></div>
<p>In a new Postman request, enter the URL at the top, select &#8220;Post&#8221; as the method, and add in key/value pairs for the fromEmail and the message. Of course we expect this to fail the first time:</p>
<div id="attachment_5000" style="width: 810px" class="wp-caption aligncenter"><a href="/wp-content/uploads/2017/01/Azure_8.png"><img src="/wp-content/uploads/2017/01/Azure_8.png" alt="Azure Function - First Call Failed" width="800" height="385" class="size-full wp-image-5000" srcset="/wp-content/uploads/2017/01/Azure_8.png 800w, /wp-content/uploads/2017/01/Azure_8-300x144.png 300w" sizes="(max-width: 800px) 100vw, 800px" /></a><p class="wp-caption-text">Azure Function &#8211; First Call Failed</p></div>
<p>Fixing the code then nets us:</p>
<div id="attachment_5001" style="width: 810px" class="wp-caption aligncenter"><a href="/wp-content/uploads/2017/01/Azure_9.png"><img src="/wp-content/uploads/2017/01/Azure_9.png" alt="Azure Function - Second Call Failed" width="800" height="326" class="size-full wp-image-5001" srcset="/wp-content/uploads/2017/01/Azure_9.png 800w, /wp-content/uploads/2017/01/Azure_9-300x122.png 300w" sizes="(max-width: 800px) 100vw, 800px" /></a><p class="wp-caption-text">Azure Function &#8211; Second Call Failed</p></div>
<p>Because my code is expecting urlencoded form data and wasn&#8217;t able to parse any from the body. Once we switch that, we get:</p>
<div id="attachment_5002" style="width: 810px" class="wp-caption aligncenter"><a href="/wp-content/uploads/2017/01/Azure_10.png"><img src="/wp-content/uploads/2017/01/Azure_10.png" alt="Azure Function - Success" width="800" height="290" class="size-full wp-image-5002" srcset="/wp-content/uploads/2017/01/Azure_10.png 800w, /wp-content/uploads/2017/01/Azure_10-300x108.png 300w" sizes="(max-width: 800px) 100vw, 800px" /></a><p class="wp-caption-text">Azure Function &#8211; Success</p></div>
<p>Success!</p>
<h3>Building the HTML form</h3>
<p>Now we just need to switch from Postman to using an HTML form. Here&#8217;s a quick sample:</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="csharp"><thead><tr><td colspan="2"  class="head">C#</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
</pre></td><td class="de1"><pre class="de1"><span class="sy0">&lt;</span>h1<span class="sy0">&gt;</span>Contact Form<span class="sy0">&lt;/</span>h1<span class="sy0">&gt;</span>
Send me a message<span class="sy0">!</span> <span class="br0">&#40;</span>Congratulations <span class="kw1">for</span> finding <span class="kw1">this</span>, it<span class="st0">'s not an official part of the site!)</span>
<span class="st0">&lt;div id=&quot;contactForm&quot;&gt;</span>
<span class="st0"> &nbsp; &nbsp;Your Email: &lt;input type=&quot;text&quot; name=&quot;fromEmail&quot; /&gt;&lt;br /&gt;</span>
<span class="st0"> &nbsp; &nbsp;Message: &lt;br /&gt;</span>
<span class="st0"> &nbsp; &nbsp;&lt;textarea cols=&quot;60&quot; rows=&quot;4&quot; name=&quot;message&quot;&gt;&lt;/textarea&gt;&lt;br /&gt;</span>
<span class="st0"> &nbsp; &nbsp;&lt;input type=&quot;submit&quot; value=&quot;Send!&quot; /&gt;</span>
<span class="st0">&lt;/div&gt;</span>
&nbsp;
<span class="st0">&lt;script src=&quot;https://code.jquery.com/jquery-3.1.1.min.js&quot;&gt;&lt;/script&gt;</span>
<span class="st0">&lt;script type=&quot;text/javascript&quot;&gt;</span>
<span class="st0"> &nbsp; &nbsp;var url = &quot;https://eli-contactform.azurewebsites.net/api/contact?code=1pabaq6cdy2tt3f43t4uuqsemi8429ygl2n4ca6m9utugoz2gldiw15i5t61ew3pzzb7n60mb1emi&quot;;</span>
<span class="st0"> &nbsp; &nbsp;$(&quot;form&quot;).on('</span>submit<span class="st0">', function (event) {</span>
<span class="st0"> &nbsp; &nbsp; &nbsp; &nbsp;event.preventDefault();</span>
&nbsp;
<span class="st0"> &nbsp; &nbsp; &nbsp; &nbsp;// grab contact form data</span>
<span class="st0"> &nbsp; &nbsp; &nbsp; &nbsp;var data = $(this).serialize();</span>
&nbsp;
<span class="st0"> &nbsp; &nbsp; &nbsp; &nbsp;// hide prior errors, disable inputs while we'</span>re submitting
&nbsp; &nbsp; &nbsp; &nbsp; $<span class="br0">&#40;</span><span class="st0">&quot;#contactFormError&quot;</span><span class="br0">&#41;</span><span class="sy0">.</span><span class="me1">hide</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; $<span class="br0">&#40;</span><span class="st0">&quot;#contactForm input&quot;</span><span class="br0">&#41;</span><span class="sy0">.</span><span class="me1">prop</span><span class="br0">&#40;</span><span class="st0">'disabled'</span>, <span class="kw1">true</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; <span class="co1">// back in my day, we had to AJAX uphill both ways, in the snow, through cross-iframe scripts</span>
&nbsp; &nbsp; &nbsp; &nbsp; $<span class="sy0">.</span><span class="me1">ajax</span><span class="br0">&#40;</span><span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; type<span class="sy0">:</span> <span class="st0">&quot;POST&quot;</span>,
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; url<span class="sy0">:</span> url,
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; data<span class="sy0">:</span> data,
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; dataType<span class="sy0">:</span> <span class="st0">&quot;text&quot;</span>,
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; headers<span class="sy0">:</span> <span class="br0">&#123;</span><span class="st0">'Content-Type'</span><span class="sy0">:</span> <span class="st0">'application/x-www-form-urlencoded'</span><span class="br0">&#125;</span>,
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; success<span class="sy0">:</span> function <span class="br0">&#40;</span>respData<span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="co1">// Yay, success!!</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; $<span class="br0">&#40;</span><span class="st0">&quot;#contactForm&quot;</span><span class="br0">&#41;</span><span class="sy0">.</span><span class="me1">html</span><span class="br0">&#40;</span><span class="st0">&quot;&lt;div style='padding: 5em 1em; text-align: center; color: #008800'&gt;&quot;</span> <span class="sy0">+</span> respData <span class="sy0">+</span> <span class="st0">&quot;&lt;/div&gt;&quot;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span>,
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; error<span class="sy0">:</span> function <span class="br0">&#40;</span>jqXHR<span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="co1">// Boo, error...</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; $<span class="br0">&#40;</span><span class="st0">&quot;#contactFormError&quot;</span><span class="br0">&#41;</span><span class="sy0">.</span><span class="me1">html</span><span class="br0">&#40;</span><span class="st0">&quot;&lt;div style='padding: 1em; text-align: center; color: #660000'&gt;Sorry, an error occurred: &quot;</span> <span class="sy0">+</span> jqXHR<span class="sy0">.</span><span class="me1">responseText</span> <span class="sy0">+</span> <span class="st0">&quot;&lt;/div&gt;&quot;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; $<span class="br0">&#40;</span><span class="st0">&quot;#contactFormError&quot;</span><span class="br0">&#41;</span><span class="sy0">.</span><span class="me1">show</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; $<span class="br0">&#40;</span><span class="st0">&quot;#contactForm input&quot;</span><span class="br0">&#41;</span><span class="sy0">.</span><span class="me1">prop</span><span class="br0">&#40;</span><span class="st0">'disabled'</span>, <span class="kw1">false</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; <span class="br0">&#125;</span><span class="br0">&#41;</span><span class="sy0">;</span>
<span class="sy0">&lt;/</span>script<span class="sy0">&gt;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">&lt;h1&gt;Contact Form&lt;/h1&gt;
Send me a message! (Congratulations for finding this, it's not an official part of the site!)
&lt;div id="contactForm"&gt;
    Your Email: &lt;input type="text" name="fromEmail" /&gt;&lt;br /&gt;
    Message: &lt;br /&gt;
    &lt;textarea cols="60" rows="4" name="message"&gt;&lt;/textarea&gt;&lt;br /&gt;
    &lt;input type="submit" value="Send!" /&gt;
&lt;/div&gt;

&lt;script src="https://code.jquery.com/jquery-3.1.1.min.js"&gt;&lt;/script&gt;
&lt;script type="text/javascript"&gt;
    var url = "https://eli-contactform.azurewebsites.net/api/contact?code=1pabaq6cdy2tt3f43t4uuqsemi8429ygl2n4ca6m9utugoz2gldiw15i5t61ew3pzzb7n60mb1emi";
    $("form").on('submit', function (event) {
        event.preventDefault();

        // grab contact form data
        var data = $(this).serialize();

        // hide prior errors, disable inputs while we're submitting
        $("#contactFormError").hide();
        $("#contactForm input").prop('disabled', true);

        // back in my day, we had to AJAX uphill both ways, in the snow, through cross-iframe scripts
        $.ajax({
            type: "POST",
            url: url,
            data: data,
            dataType: "text",
            headers: {'Content-Type': 'application/x-www-form-urlencoded'},
            success: function (respData) {
                // Yay, success!!
                $("#contactForm").html("&lt;div style='padding: 5em 1em; text-align: center; color: #008800'&gt;" + respData + "&lt;/div&gt;");
            },
            error: function (jqXHR) {
                // Boo, error...
                $("#contactFormError").html("&lt;div style='padding: 1em; text-align: center; color: #660000'&gt;Sorry, an error occurred: " + jqXHR.responseText + "&lt;/div&gt;");
                $("#contactFormError").show();
                $("#contactForm input").prop('disabled', false);
            }
        });
    });
&lt;/script&gt;</pre></div></div>

<p>I use jQuery to post the form content because the Azure Function isn&#8217;t going to return a pretty HTML page. This way I can capture the output and use jQuery to tel the user whether it was successful or not.</p>
<p>There was one more catch the first time I tried this. Because I&#8217;m posting from my a page from my personal page to a domain in Azure, the calls initially fails with a Cross-Origin error. To enable Cross-Origin calls from your domain, go back to the Azure Functions interface in the App Settings section and open the CORS page:</p>
<div id="attachment_4992" style="width: 420px" class="wp-caption aligncenter"><a href="/wp-content/uploads/2017/01/Azure_11.png"><img src="/wp-content/uploads/2017/01/Azure_11.png" alt="Azure Function - CORS Config" width="410" height="249" class="size-full wp-image-4992" srcset="/wp-content/uploads/2017/01/Azure_11.png 410w, /wp-content/uploads/2017/01/Azure_11-300x182.png 300w" sizes="(max-width: 410px) 100vw, 410px" /></a><p class="wp-caption-text">Azure Function &#8211; CORS Config</p></div>
<p>This will open the list of domains allowed to make Cross-Origin calls (which will result in the necessary Cross-Origin-Access header being sent back so your browser will trust the content). Add your domain, save, and your jQuery calls should now work just fine.</p>
<div id="attachment_5003" style="width: 660px" class="wp-caption aligncenter"><a href="/wp-content/uploads/2017/01/Azure_14.png"><img src="/wp-content/uploads/2017/01/Azure_14.png" alt="Contact Form" width="650" height="269" class="size-full wp-image-5003" srcset="/wp-content/uploads/2017/01/Azure_14.png 650w, /wp-content/uploads/2017/01/Azure_14-300x124.png 300w" sizes="(max-width: 650px) 100vw, 650px" /></a><p class="wp-caption-text">Contact Form</p></div>
<div id="attachment_5004" style="width: 660px" class="wp-caption aligncenter"><a href="/wp-content/uploads/2017/01/Azure_13.png"><img src="/wp-content/uploads/2017/01/Azure_13.png" alt="Contact Form Success!!" width="650" height="236" class="size-full wp-image-5004" srcset="/wp-content/uploads/2017/01/Azure_13.png 650w, /wp-content/uploads/2017/01/Azure_13-300x108.png 300w" sizes="(max-width: 650px) 100vw, 650px" /></a><p class="wp-caption-text">Contact Form Success!!</p></div>
<p>And there we go, successful contact emails on the static page.</p>
<h2>Final Steps</h2>
<p>Besides making a nicer user experience than the one I hacked together there, one last step you should also take is to enter in a value for the maximum daily usage quota just to ensure no one finds your form and tries to DOS your credit card. </p>
<p>So there we go, a contact form for a static website that should run absolutely free. This is easily extended to other features when you take into account that you could also be dropping messages in a queue, saving to blobs, etc and then using an AJAX GET call to a webhook like this to get that stored content (basically a free, trigger-based API service). There&#8217;s all kinds of options you can fit inside the free level of these services that frees you from having to pay for a full web host.</p>
]]></content:encoded>
			<wfw:commentRss>/index.php/enterprisedev/cloud/azure/using-azure-functions-to-add-a-contact-form-to-a-static-site/feed/</wfw:commentRss>
		<slash:comments>1</slash:comments>
		</item>
		<item>
		<title>CSV file to API using Azure Functions (CSVaaS)</title>
		<link>/index.php/enterprisedev/cloud/azure/csv-file-to-api-using-azure-functions-csvaas/</link>
		<comments>/index.php/enterprisedev/cloud/azure/csv-file-to-api-using-azure-functions-csvaas/#comments</comments>
		<pubDate>Fri, 25 Nov 2016 14:18:56 +0000</pubDate>
		<dc:creator><![CDATA[Eli Weinstock-Herman (tarwn)]]></dc:creator>
				<category><![CDATA[Azure]]></category>
		<category><![CDATA[Azure APIM]]></category>
		<category><![CDATA[Azure Functions]]></category>

		<guid isPermaLink="false">/?p=4839</guid>
		<description><![CDATA[We&#8217;re living in the future. During a conversational aside the other day, the CEO recounted a story of someone he met that was willing to throw money at a product to make it easy to save an excel file and have it surface as an API. A few years ago that was server provisioning and [&#8230;]]]></description>
				<content:encoded><![CDATA[<p>We&#8217;re living in the future. During a conversational aside the other day, the CEO recounted a story of someone he met that was willing to throw money at a product to make it easy to save an excel file and have it surface as an API. A few years ago that was server provisioning and a couple days to a couple weeks of work, depending on the level of analytics, authentication, identity management, documentation, data entry system, and so on you wanted. With the explosion of tools and services we&#8217;re seeing in the cloud, now we can do this in an a few hours or less, with 200 lines of code and no servers.</p>
<h2>To Launch a managed API in less than 200 lines of code</h2>
<p>When I went down this path, I decided it had to be a realistic. The API side had to have authentication, analytics, rate limiting, documentation, subscriptions, and endpoints that reflect the latest dataset (&#8220;/latest&#8221;), the list of all files received (&#8220;/all&#8221;), and access to a specific dataset/CSV (&#8220;/archive/{name}&#8221;). The CSV side of things had to be incredibly simple, no new interfaces, upload tools, or anything. I want to save a file in a local folder and have the data available via an API on the internet.</p>
<div id="attachment_4840" style="width: 810px" class="wp-caption alignnone"><a href="/wp-content/uploads/2016/11/CSVaaS.png"><img src="/wp-content/uploads/2016/11/CSVaaS.png" alt="Transformation Pipeline - Saving a CSV in a folder to Managed API" width="960" height="235" class="size-full wp-image-4840" srcset="/wp-content/uploads/2016/11/CSVaaS.png 960w, /wp-content/uploads/2016/11/CSVaaS-300x73.png 300w" sizes="(max-width: 960px) 100vw, 960px" /></a><p class="wp-caption-text">Transformation Pipeline &#8211; Saving a CSV in a folder to Managed API</p></div>
<p>I drop a file in my Dropbox folder, it’s picked up and processed into a similarly named JSON blob, a &#8220;latest&#8221; JSON blob, and an entry in the &#8220;list&#8221; of archived entries, all in Azure Storage from the original CSV file within 15 seconds or less. API Management then serves as a gateway to give me rate-limited, documented, etc, etc access to those pre-generated JSON responses.</p>
<h3>Tools and Services</h3>
<p>Here&#8217;s the tools I used:</p>
<ul>
<li>Azure API Management &#8211; provides an API gateway with built-in authentication mechanisms, analytics, customizable policies, caching, and documentation with &#8220;Try It&#8221; interfaces</li>
<li>Azure Storage &#8211; provides infinite file storage where I can drop translated JSON files to serve as the back-end behind the API gateway</li>
<li>Azure Functions
<ul>
<li>#1: monitors dropbox and scoops up changes to convert them from CSV into JSON, saving to an &#8220;archive&#8221; container in Azure Storage</li>
<li>#2: monitors the &#8220;archive&#8221; container and publishes new entries by copying them to &#8220;public/latest&#8221; and adding them to a list in &#8220;listing/all&#8221;</li>
</ul>
</li>
<li>Microsoft Account &#8211; identity provider for API subscription</li>
<li>Dropbox &#8211; my end-user &#8220;UI&#8221;</li>
</ul>
<p>The only one of these that requires coding is the Azure Functions, and I did those in C#.</p>
<h3>$50/month for fancy features, $0.03/month without</h3>
<p>1GB of data / month of blob storage is about $0.03, 10GB would be around $0.20 or less. Processing 30 files/month via Azure Functions is free (at 1 second runs, 250K files would be $1.60/month), so less than $0.40/month if you could manage to copy 140 CSV files/hour for a month into dropbox (lots of coffee?). API Management is the expensive part (for this project), at $50/month for Developer level (but using it for a single API call is massive overkill, I would expect it to be serving up a lot more than that).</p>
<p>API Management offers a lot of extra capabilities, but if I didn&#8217;t want them I could just as easily publish the functions and blob endpoints as the API, at roughly $0.03/month.</p>
<h2>The File Transform Process</h2>
<p>So this CSV file: <a href="https://www.dropbox.com/s/3wqj4jpv4vru2a7/file1?dl=0">https://www.dropbox.com/s/3wqj4jpv4vru2a7/file1?dl=0</a></p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="text"><thead><tr><td colspan="2"  class="head">Text</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
</pre></td><td class="de1"><pre class="de1">MyString,MyNumber,MyBool,MyAlmostNumber,MyAlmostBool
&quot;ABC&quot;,123,true,456,false
&quot;DEF&quot;,124,false,555,true
&quot;GHI&quot;,125,True,whatever,more stuff</pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">MyString,MyNumber,MyBool,MyAlmostNumber,MyAlmostBool
"ABC",123,true,456,false
"DEF",124,false,555,true
"GHI",125,True,whatever,more stuff</pre></div></div>

<p>Turns into this JSON file: <a href="https://csvaas.blob.core.windows.net/archive/file1">https://csvaas.blob.core.windows.net/archive/file1</a></p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="javascript"><thead><tr><td colspan="2"  class="head">Javascript</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
</pre></td><td class="de1"><pre class="de1"><span class="br0">&#123;</span> &nbsp;
&nbsp; &nbsp;<span class="st0">&quot;info&quot;</span><span class="sy0">:</span><span class="br0">&#123;</span> &nbsp;
&nbsp; &nbsp; &nbsp; <span class="st0">&quot;sourceFile&quot;</span><span class="sy0">:</span><span class="st0">&quot;file1&quot;</span><span class="sy0">,</span>
&nbsp; &nbsp; &nbsp; <span class="st0">&quot;processedTime&quot;</span><span class="sy0">:</span><span class="st0">&quot;2016-11-24T14:20:19&quot;</span><span class="sy0">,</span>
&nbsp; &nbsp; &nbsp; <span class="st0">&quot;types&quot;</span><span class="sy0">:</span><span class="br0">&#91;</span> &nbsp;<span class="st0">&quot;String&quot;</span><span class="sy0">,</span> <span class="st0">&quot;Number&quot;</span><span class="sy0">,</span> <span class="st0">&quot;Boolean&quot;</span><span class="sy0">,</span> <span class="st0">&quot;String&quot;</span><span class="sy0">,</span> <span class="st0">&quot;String&quot;</span> <span class="br0">&#93;</span>
&nbsp; &nbsp;<span class="br0">&#125;</span><span class="sy0">,</span>
&nbsp; &nbsp;<span class="st0">&quot;rows&quot;</span><span class="sy0">:</span><span class="br0">&#91;</span> &nbsp;
&nbsp; &nbsp; &nbsp; <span class="br0">&#123;</span> &nbsp;<span class="st0">&quot;MyString&quot;</span><span class="sy0">:</span><span class="st0">&quot;ABC&quot;</span><span class="sy0">,</span> <span class="st0">&quot;MyNumber&quot;</span><span class="sy0">:</span><span class="nu0">123</span><span class="sy0">,</span> <span class="st0">&quot;MyBool&quot;</span><span class="sy0">:</span><span class="kw2">true</span><span class="sy0">,</span> <span class="st0">&quot;MyAlmostNumber&quot;</span><span class="sy0">:</span><span class="st0">&quot;456&quot;</span><span class="sy0">,</span> <span class="st0">&quot;MyAlmostBool&quot;</span><span class="sy0">:</span><span class="st0">&quot;false&quot;</span> <span class="br0">&#125;</span><span class="sy0">,</span>
&nbsp; &nbsp; &nbsp; <span class="br0">&#123;</span> &nbsp;<span class="st0">&quot;MyString&quot;</span><span class="sy0">:</span><span class="st0">&quot;DEF&quot;</span><span class="sy0">,</span> <span class="st0">&quot;MyNumber&quot;</span><span class="sy0">:</span><span class="nu0">124</span><span class="sy0">,</span> <span class="st0">&quot;MyBool&quot;</span><span class="sy0">:</span><span class="kw2">false</span><span class="sy0">,</span> <span class="st0">&quot;MyAlmostNumber&quot;</span><span class="sy0">:</span><span class="st0">&quot;555&quot;</span><span class="sy0">,</span> <span class="st0">&quot;MyAlmostBool&quot;</span><span class="sy0">:</span><span class="st0">&quot;true&quot;</span> <span class="br0">&#125;</span><span class="sy0">,</span>
&nbsp; &nbsp; &nbsp; <span class="br0">&#123;</span> &nbsp;<span class="st0">&quot;MyString&quot;</span><span class="sy0">:</span><span class="st0">&quot;GHI&quot;</span><span class="sy0">,</span> <span class="st0">&quot;MyNumber&quot;</span><span class="sy0">:</span><span class="nu0">125</span><span class="sy0">,</span> <span class="st0">&quot;MyBool&quot;</span><span class="sy0">:</span><span class="kw2">true</span><span class="sy0">,</span> <span class="st0">&quot;MyAlmostNumber&quot;</span><span class="sy0">:</span><span class="st0">&quot;whatever&quot;</span><span class="sy0">,</span> <span class="st0">&quot;MyAlmostBool&quot;</span><span class="sy0">:</span><span class="st0">&quot;more stuff&quot;</span> <span class="br0">&#125;</span>
&nbsp; &nbsp;<span class="br0">&#93;</span>
<span class="br0">&#125;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">{  
   "info":{  
      "sourceFile":"file1",
      "processedTime":"2016-11-24T14:20:19",
      "types":[  "String", "Number", "Boolean", "String", "String" ]
   },
   "rows":[  
      {  "MyString":"ABC", "MyNumber":123, "MyBool":true, "MyAlmostNumber":"456", "MyAlmostBool":"false" },
      {  "MyString":"DEF", "MyNumber":124, "MyBool":false, "MyAlmostNumber":"555", "MyAlmostBool":"true" },
      {  "MyString":"GHI", "MyNumber":125, "MyBool":true, "MyAlmostNumber":"whatever", "MyAlmostBool":"more stuff" }
   ]
}</pre></div></div>

<p>Which is then published to the listing: <a href="https://csvaas.blob.core.windows.net/listing/all">https://csvaas.blob.core.windows.net/listing/all</a></p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="javascript"><thead><tr><td colspan="2"  class="head">Javascript</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
</pre></td><td class="de1"><pre class="de1"><span class="br0">&#123;</span>
&nbsp; &nbsp; <span class="st0">&quot;LatestUpdate&quot;</span><span class="sy0">:</span><span class="st0">&quot;2016-11-24T14:29:21.1069912Z&quot;</span><span class="sy0">,</span>
&nbsp; &nbsp; <span class="st0">&quot;Items&quot;</span><span class="sy0">:</span><span class="br0">&#91;</span><span class="st0">&quot;file2&quot;</span><span class="sy0">,</span><span class="st0">&quot;file1&quot;</span><span class="br0">&#93;</span>
<span class="br0">&#125;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">{
    "LatestUpdate":"2016-11-24T14:29:21.1069912Z",
    "Items":["file2","file1"]
}</pre></div></div>

<p>And is surfaced as the latest record (which has probably changed by now): <a href="https://csvaas.blob.core.windows.net/public/latest">https://csvaas.blob.core.windows.net/public/latest</a></p>
<p>And these are the prepared responses for this API: <a href="https://csvaas.portal.azure-api.net/docs/services/5833743025491306b41695ff/operations/5833780425491306b4169603">CSVaaS Documentation</a></p>
<div id="attachment_4848" style="width: 810px" class="wp-caption alignnone"><a href="/wp-content/uploads/2016/11/APIM_Doc_1.jpg"><img src="/wp-content/uploads/2016/11/APIM_Doc_1.jpg" alt="Automatic Documentation, Code Samples, etc" width="800" height="391" class="size-full wp-image-4848" srcset="/wp-content/uploads/2016/11/APIM_Doc_1.jpg 800w, /wp-content/uploads/2016/11/APIM_Doc_1-300x146.jpg 300w" sizes="(max-width: 800px) 100vw, 800px" /></a><p class="wp-caption-text">Automatic Documentation, Code Samples, etc</p></div>
<p>Including example code in 7 languages and cUrl.</p>
<p>And, with a subscription id, you can run these directly in the page: <a href="https://csvaas.azure-api.net/latest">https://csvaas.azure-api.net/latest</a></p>
<div id="attachment_4849" style="width: 810px" class="wp-caption alignnone"><a href="/wp-content/uploads/2016/11/APIM_Doc_2.jpg"><img src="/wp-content/uploads/2016/11/APIM_Doc_2.jpg" alt="API Sample Run" width="800" height="564" class="size-full wp-image-4849" srcset="/wp-content/uploads/2016/11/APIM_Doc_2.jpg 800w, /wp-content/uploads/2016/11/APIM_Doc_2-300x211.jpg 300w" sizes="(max-width: 800px) 100vw, 800px" /></a><p class="wp-caption-text">API Sample Run</p></div>
<p>Behind the scenes, I can configure requirements around the subscriptions and approval process:</p>
<div id="attachment_4875" style="width: 659px" class="wp-caption alignnone"><a href="/wp-content/uploads/2016/11/CSVaaS_Settings.png"><img src="/wp-content/uploads/2016/11/CSVaaS_Settings.png" alt="Setting the service to require Subscriptions  and Administrator Approval" width="649" height="387" class="size-full wp-image-4875" srcset="/wp-content/uploads/2016/11/CSVaaS_Settings.png 649w, /wp-content/uploads/2016/11/CSVaaS_Settings-300x178.png 300w" sizes="(max-width: 649px) 100vw, 649px" /></a><p class="wp-caption-text">Setting the service to require Subscriptions  and Administrator Approval</p></div>
<p>I have access to high-level monitoring:</p>
<div id="attachment_4873" style="width: 692px" class="wp-caption alignnone"><a href="/wp-content/uploads/2016/11/CSVaaS1.png"><img src="/wp-content/uploads/2016/11/CSVaaS1.png" alt="Usage Analytics" width="682" height="214" class="size-full wp-image-4873" srcset="/wp-content/uploads/2016/11/CSVaaS1.png 682w, /wp-content/uploads/2016/11/CSVaaS1-300x94.png 300w" sizes="(max-width: 682px) 100vw, 682px" /></a><p class="wp-caption-text">Usage Analytics</p></div>
<p>And dive into details like response times around the world for specific date ranges and operations:<br />
<div id="attachment_4878" style="width: 810px" class="wp-caption alignnone"><a href="/wp-content/uploads/2016/11/CSVaaS_Analytics.jpg"><img src="/wp-content/uploads/2016/11/CSVaaS_Analytics.jpg" alt="Response Analytics for Geography by Date Rage, Operation, ..." width="800" height="319" class="size-full wp-image-4878" srcset="/wp-content/uploads/2016/11/CSVaaS_Analytics.jpg 800w, /wp-content/uploads/2016/11/CSVaaS_Analytics-300x119.jpg 300w" sizes="(max-width: 800px) 100vw, 800px" /></a><p class="wp-caption-text">Response Analytics for Geography by Date Rage, Operation, &#8230;</p></div></p>
<p>So I have pretty documentation, examples in numerous languages, try it right in the interface buttons, subscription management, and so on with no effort beyond defining the operations (and I could customize all of this if I felt like spending the time).</p>
<h2>Building It &#8211; Implementation Details</h2>
<p>Here&#8217;s the details of what it took to build it.</p>
<h3>Step 1: Storage</h3>
<p>Add a new Storage Account with a catchy name:<a href="https://docs.microsoft.com/en-us/azure/storage/storage-create-storage-account">About Azure Storage Accounts</a></p>
<p>Open the containers list and add an archive container to hold the JSON files and container(s) for the &#8220;latest&#8221; and &#8220;listing&#8221; blobs. We can use re-write rules in the API Management operations to flatten or translate these paths later.</p>
<h3>Step 2: API Management</h3>
<p>Add an API service via the dashboard. Configure it with a name and Web Service URL:</p>
<div id="attachment_4842" style="width: 810px" class="wp-caption alignnone"><a href="/wp-content/uploads/2016/11/APIM_1.jpg"><img src="/wp-content/uploads/2016/11/APIM_1.jpg" alt="Defining an Azure API" width="800" height="489" class="size-full wp-image-4842" srcset="/wp-content/uploads/2016/11/APIM_1.jpg 800w, /wp-content/uploads/2016/11/APIM_1-300x183.jpg 300w" sizes="(max-width: 800px) 100vw, 800px" /></a><p class="wp-caption-text">Defining an Azure API</p></div>
<p>To add Authentication, head to the Identities tab. I used a Microsoft Account for simplicity, but other options like Azure AD, Twitter, Facebook, etc are available out of the box (or you can choose to use certificates or BASIC auth at the API level).</p>
<p>Instructions to setup App Service, go through similar steps for the Identity tab: MS Auth: https://docs.microsoft.com/en-us/azure/app-service-mobile/app-service-mobile-how-to-configure-microsoft-authentication</p>
<div id="attachment_4843" style="width: 810px" class="wp-caption alignnone"><a href="/wp-content/uploads/2016/11/APIM_2.jpg"><img src="/wp-content/uploads/2016/11/APIM_2.jpg" alt="Defining API Identity Providers" width="800" height="497" class="size-full wp-image-4843" srcset="/wp-content/uploads/2016/11/APIM_2.jpg 800w, /wp-content/uploads/2016/11/APIM_2-300x186.jpg 300w" sizes="(max-width: 800px) 100vw, 800px" /></a><p class="wp-caption-text">Defining API Identity Providers</p></div>
<p>There is a Starter Product and an Unlimited Product already predefined. Use the Starter Product for now, since it has rate limits and such already defined, and associate the API with the Product.</p>
<div id="attachment_4844" style="width: 810px" class="wp-caption alignnone"><a href="/wp-content/uploads/2016/11/APIM_3.jpg"><img src="/wp-content/uploads/2016/11/APIM_3.jpg" alt="Defining API Product" width="800" height="253" class="size-full wp-image-4844" srcset="/wp-content/uploads/2016/11/APIM_3.jpg 800w, /wp-content/uploads/2016/11/APIM_3-300x94.jpg 300w" sizes="(max-width: 800px) 100vw, 800px" /></a><p class="wp-caption-text">Defining API Product</p></div>
<p>Now we need an API endpoint. Add an Operation, I chose to name my &#8220;latest&#8221;. It will concatenate this value automatically on the base URL provided in the first setup screen (or you can choose to rewrite to a different URL). I&#8217;m going with the simple option of matching my Blob name to the path.</p>
<div id="attachment_4845" style="width: 810px" class="wp-caption alignnone"><a href="/wp-content/uploads/2016/11/APIM_4.jpg"><img src="/wp-content/uploads/2016/11/APIM_4.jpg" alt="Defining an API Operation" width="800" height="419" class="size-full wp-image-4845" srcset="/wp-content/uploads/2016/11/APIM_4.jpg 800w, /wp-content/uploads/2016/11/APIM_4-300x157.jpg 300w" sizes="(max-width: 800px) 100vw, 800px" /></a><p class="wp-caption-text">Defining an API Operation</p></div>
<p>And we have an API.</p>
<h3>Step 3: Azure Function</h3>
<p>Provision an Azure Functions item from the dashboard, set it to the same resource group as the prior items and the storage account from #1, for simplicity. </p>
<h4>Step 3A: CSV to JSON</h4>
<p>Create a new function with a trigger of type &#8220;External File Trigger&#8221;. I chose Dropbox as my input and blob storage as my output, using the same &#8220;{name}&#8221; token in both names so that my incoming CSV file will generate a matching named JSON file in my output.</p>
<p>Lastly, write some code to convert the CSV to JSON. I used a nuget package, so I added a project.json to specify my dependencies:</p>

<p>And then a simple Run function to convert the incoming input file into the projected JSON for blob storage:</p>
<p><b><a href="https://github.com/tarwn/csvaas/blob/master/CSVaaSDropboxProcessing/run.csx">CSVaaSDropboxProcessing/run.csx</a></b></p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="csharp"><thead><tr><td colspan="2"  class="head">C#</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72
73
74
75
76
77
78
79
80
81
82
83
84
85
86
87
88
89
90
91
92
93
94
95
96
97
98
99
100
101
102
103
104
105
106
107
108
109
110
111
112
113
114
115
116
117
118
119
120
121
122
123
124
125
126
127
128
129
130
131
</pre></td><td class="de1"><pre class="de1"><span class="co2">#r &quot;Microsoft.WindowsAzure.Storage&quot;</span>
&nbsp;
<span class="kw1">using</span> <span class="co3">System</span><span class="sy0">;</span>
<span class="kw1">using</span> <span class="co3">System.Text</span><span class="sy0">;</span>
<span class="kw1">using</span> <span class="co3">System.Text.RegularExpressions</span><span class="sy0">;</span>
<span class="kw1">using</span> <span class="co3">CsvHelper</span><span class="sy0">;</span>
<span class="kw1">using</span> <span class="co3">Microsoft.WindowsAzure.Storage.Blob</span><span class="sy0">;</span>
&nbsp;
<span class="kw1">public</span> <span class="kw1">static</span> <span class="kw4">void</span> Run<span class="br0">&#40;</span>Stream input, <span class="kw4">string</span> name, CloudBlockBlob jsonFile, TraceWriter log<span class="br0">&#41;</span>
<span class="br0">&#123;</span>
&nbsp; &nbsp; log<span class="sy0">.</span><span class="me1">Info</span><span class="br0">&#40;</span>$<span class="st0">&quot;C# External trigger function processed file: &quot;</span> <span class="sy0">+</span> name<span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; <span class="kw1">var</span> boolRegex <span class="sy0">=</span> <span class="kw3">new</span> Regex<span class="br0">&#40;</span><span class="st_h">@&quot;^([Tt]rue|[Ff]alse)$&quot;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; <span class="kw1">var</span> numericRegex <span class="sy0">=</span> <span class="kw3">new</span> Regex<span class="br0">&#40;</span><span class="st_h">@&quot;^[\d\.,]*\d[\d\.,]*$&quot;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; <span class="kw1">var</span> reader <span class="sy0">=</span> <span class="kw3">new</span> StreamReader<span class="br0">&#40;</span>input<span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; <span class="kw1">var</span> csv <span class="sy0">=</span> <span class="kw3">new</span> CsvReader<span class="br0">&#40;</span>reader<span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; csv<span class="sy0">.</span><span class="me1">Configuration</span><span class="sy0">.</span><span class="me1">HasHeaderRecord</span> <span class="sy0">=</span> <span class="kw1">false</span><span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; <span class="kw1">var</span> headers <span class="sy0">=</span> <span class="kw3">new</span> List<span class="sy0">&lt;</span><span class="kw4">string</span><span class="sy0">&gt;</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; <span class="kw1">var</span> rows <span class="sy0">=</span> <span class="kw3">new</span> List<span class="sy0">&lt;</span>List<span class="sy0">&lt;</span><span class="kw4">string</span><span class="sy0">&gt;&gt;</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; InspectedType<span class="br0">&#91;</span><span class="br0">&#93;</span> types <span class="sy0">=</span> <span class="kw1">null</span><span class="sy0">;</span>
&nbsp; &nbsp; <span class="kw4">int</span> rowCount <span class="sy0">=</span> <span class="nu0">0</span><span class="sy0">;</span>
&nbsp; &nbsp; <span class="kw4">string</span> stringValue<span class="sy0">;</span>
&nbsp; &nbsp; <span class="kw1">while</span><span class="br0">&#40;</span>csv<span class="sy0">.</span><span class="me1">Read</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#41;</span>
&nbsp; &nbsp; <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">if</span><span class="br0">&#40;</span>rowCount <span class="sy0">==</span> <span class="nu0">0</span><span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">for</span><span class="br0">&#40;</span><span class="kw4">int</span> i<span class="sy0">=</span><span class="nu0">0</span><span class="sy0">;</span> csv<span class="sy0">.</span><span class="me1">TryGetField</span><span class="sy0">&lt;</span><span class="kw4">string</span><span class="sy0">&gt;</span><span class="br0">&#40;</span>i, <span class="kw1">out</span> stringValue<span class="br0">&#41;</span><span class="sy0">;</span> i<span class="sy0">++</span><span class="br0">&#41;</span> 
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; headers<span class="sy0">.</span><span class="kw1">Add</span><span class="br0">&#40;</span>stringValue<span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; types <span class="sy0">=</span> <span class="kw3">new</span> InspectedType<span class="br0">&#91;</span>headers<span class="sy0">.</span><span class="me1">Count</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#93;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; log<span class="sy0">.</span><span class="me1">Info</span><span class="br0">&#40;</span>$<span class="st0">&quot;Headers: &quot;</span> <span class="sy0">+</span> <span class="kw4">String</span><span class="sy0">.</span><span class="kw1">Join</span><span class="br0">&#40;</span><span class="st0">&quot;,&quot;</span>, headers<span class="br0">&#41;</span><span class="br0">&#41;</span><span class="sy0">;</span> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">else</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">var</span> row <span class="sy0">=</span> <span class="kw3">new</span> List<span class="sy0">&lt;</span><span class="kw4">string</span><span class="sy0">&gt;</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">for</span><span class="br0">&#40;</span><span class="kw4">int</span> i<span class="sy0">=</span><span class="nu0">0</span><span class="sy0">;</span> csv<span class="sy0">.</span><span class="me1">TryGetField</span><span class="sy0">&lt;</span><span class="kw4">string</span><span class="sy0">&gt;</span><span class="br0">&#40;</span>i, <span class="kw1">out</span> stringValue<span class="br0">&#41;</span><span class="sy0">;</span> i<span class="sy0">++</span><span class="br0">&#41;</span> 
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; row<span class="sy0">.</span><span class="kw1">Add</span><span class="br0">&#40;</span>stringValue<span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">if</span><span class="br0">&#40;</span>rowCount <span class="sy0">==</span> <span class="nu0">1</span><span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">if</span><span class="br0">&#40;</span>boolRegex<span class="sy0">.</span><span class="me1">IsMatch</span><span class="br0">&#40;</span>stringValue<span class="br0">&#41;</span><span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; types<span class="br0">&#91;</span>i<span class="br0">&#93;</span> <span class="sy0">=</span> InspectedType<span class="sy0">.</span><span class="me1">Boolean</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">else</span> <span class="kw1">if</span><span class="br0">&#40;</span>numericRegex<span class="sy0">.</span><span class="me1">IsMatch</span><span class="br0">&#40;</span>stringValue<span class="br0">&#41;</span><span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; types<span class="br0">&#91;</span>i<span class="br0">&#93;</span> <span class="sy0">=</span> InspectedType<span class="sy0">.</span><span class="me1">Number</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">else</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; types<span class="br0">&#91;</span>i<span class="br0">&#93;</span> <span class="sy0">=</span> InspectedType<span class="sy0">.</span><span class="kw4">String</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">else</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">if</span><span class="br0">&#40;</span>types<span class="br0">&#91;</span>i<span class="br0">&#93;</span> <span class="sy0">==</span> InspectedType<span class="sy0">.</span><span class="me1">Boolean</span> <span class="sy0">&amp;&amp;</span> <span class="sy0">!</span>boolRegex<span class="sy0">.</span><span class="me1">IsMatch</span><span class="br0">&#40;</span>stringValue<span class="br0">&#41;</span><span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; types<span class="br0">&#91;</span>i<span class="br0">&#93;</span> <span class="sy0">=</span> InspectedType<span class="sy0">.</span><span class="kw4">String</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">else</span> <span class="kw1">if</span><span class="br0">&#40;</span>types<span class="br0">&#91;</span>i<span class="br0">&#93;</span> <span class="sy0">==</span> InspectedType<span class="sy0">.</span><span class="me1">Number</span> <span class="sy0">&amp;&amp;</span> <span class="sy0">!</span>numericRegex<span class="sy0">.</span><span class="me1">IsMatch</span><span class="br0">&#40;</span>stringValue<span class="br0">&#41;</span><span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; types<span class="br0">&#91;</span>i<span class="br0">&#93;</span> <span class="sy0">=</span> InspectedType<span class="sy0">.</span><span class="kw4">String</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; rows<span class="sy0">.</span><span class="kw1">Add</span><span class="br0">&#40;</span>row<span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; log<span class="sy0">.</span><span class="me1">Info</span><span class="br0">&#40;</span>$<span class="st0">&quot;Row $rowCount: &quot;</span> <span class="sy0">+</span> <span class="kw4">String</span><span class="sy0">.</span><span class="kw1">Join</span><span class="br0">&#40;</span><span class="st0">&quot;,&quot;</span>, row<span class="br0">&#41;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp; &nbsp; &nbsp; &nbsp; rowCount<span class="sy0">++;</span>
&nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp;
&nbsp; &nbsp; log<span class="sy0">.</span><span class="me1">Info</span><span class="br0">&#40;</span><span class="st0">&quot;Inspected Row Types: &quot;</span> <span class="sy0">+</span> <span class="kw4">String</span><span class="sy0">.</span><span class="kw1">Join</span><span class="br0">&#40;</span><span class="st0">&quot;,&quot;</span>, types<span class="br0">&#41;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; <span class="kw1">var</span> time <span class="sy0">=</span> DateTime<span class="sy0">.</span><span class="me1">UtcNow</span><span class="sy0">.</span><span class="me1">ToString</span><span class="br0">&#40;</span><span class="st0">&quot;s&quot;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; <span class="kw1">var</span> typesDescription <span class="sy0">=</span> <span class="st0">&quot;<span class="es0">\&quot;</span>&quot;</span> <span class="sy0">+</span> <span class="kw4">String</span><span class="sy0">.</span><span class="kw1">Join</span><span class="br0">&#40;</span><span class="st0">&quot;<span class="es0">\&quot;</span>,<span class="es0">\&quot;</span>&quot;</span>, types<span class="br0">&#41;</span> <span class="sy0">+</span> <span class="st0">&quot;<span class="es0">\&quot;</span>&quot;</span><span class="sy0">;</span>
&nbsp; &nbsp; <span class="kw1">var</span> sb <span class="sy0">=</span> <span class="kw3">new</span> StringBuilder<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; sb<span class="sy0">.</span><span class="me1">AppendLine</span><span class="br0">&#40;</span><span class="st0">&quot;{&quot;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; sb<span class="sy0">.</span><span class="me1">AppendFormat</span><span class="br0">&#40;</span><span class="st0">&quot;<span class="es0">\&quot;</span>info<span class="es0">\&quot;</span>: {{ <span class="es0">\&quot;</span>sourceFile<span class="es0">\&quot;</span>: <span class="es0">\&quot;</span>{0}<span class="es0">\&quot;</span>, <span class="es0">\&quot;</span>processedTime<span class="es0">\&quot;</span>: <span class="es0">\&quot;</span>{1}<span class="es0">\&quot;</span>, <span class="es0">\&quot;</span>types<span class="es0">\&quot;</span>: [{2}] }},&quot;</span>,
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; name, time, typesDescription<span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; sb<span class="sy0">.</span><span class="me1">AppendLine</span><span class="br0">&#40;</span><span class="st0">&quot;<span class="es0">\&quot;</span>rows<span class="es0">\&quot;</span>: [&quot;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; <span class="kw4">bool</span> isFirstRow <span class="sy0">=</span> <span class="kw1">true</span><span class="sy0">;</span>
&nbsp; &nbsp; <span class="kw4">int</span> columnCount <span class="sy0">=</span> headers<span class="sy0">.</span><span class="me1">Count</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; <span class="kw1">foreach</span><span class="br0">&#40;</span><span class="kw1">var</span> row <span class="kw1">in</span> rows<span class="br0">&#41;</span>
&nbsp; &nbsp; <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">if</span><span class="br0">&#40;</span><span class="sy0">!</span>isFirstRow<span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; sb<span class="sy0">.</span><span class="me1">AppendLine</span><span class="br0">&#40;</span><span class="st0">&quot;,&quot;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp; &nbsp; &nbsp; &nbsp; isFirstRow <span class="sy0">=</span> <span class="kw1">false</span><span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">for</span><span class="br0">&#40;</span><span class="kw1">var</span> i <span class="sy0">=</span> <span class="nu0">0</span><span class="sy0">;</span> i <span class="sy0">&lt;</span> columnCount<span class="sy0">;</span> i<span class="sy0">++</span><span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">var</span> <span class="kw1">value</span> <span class="sy0">=</span> row<span class="br0">&#91;</span>i<span class="br0">&#93;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">if</span><span class="br0">&#40;</span>types<span class="br0">&#91;</span>i<span class="br0">&#93;</span> <span class="sy0">==</span> InspectedType<span class="sy0">.</span><span class="me1">Boolean</span><span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">value</span> <span class="sy0">=</span> row<span class="br0">&#91;</span>i<span class="br0">&#93;</span><span class="sy0">.</span><span class="me1">ToLower</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">else</span> <span class="kw1">if</span><span class="br0">&#40;</span>types<span class="br0">&#91;</span>i<span class="br0">&#93;</span> <span class="sy0">==</span> InspectedType<span class="sy0">.</span><span class="me1">Number</span><span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">value</span> <span class="sy0">=</span> row<span class="br0">&#91;</span>i<span class="br0">&#93;</span><span class="sy0">.</span><span class="me1">Replace</span><span class="br0">&#40;</span><span class="st0">&quot;,&quot;</span>, <span class="st0">&quot;&quot;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">else</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">value</span> <span class="sy0">=</span> <span class="st0">&quot;<span class="es0">\&quot;</span>&quot;</span> <span class="sy0">+</span> row<span class="br0">&#91;</span>i<span class="br0">&#93;</span><span class="sy0">.</span><span class="me1">Replace</span><span class="br0">&#40;</span><span class="st0">&quot;<span class="es0">\&quot;</span>&quot;</span>,<span class="st0">&quot;<span class="es0">\\</span><span class="es0">\&quot;</span>&quot;</span><span class="br0">&#41;</span> <span class="sy0">+</span> <span class="st0">&quot;<span class="es0">\&quot;</span>&quot;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; sb<span class="sy0">.</span><span class="me1">AppendFormat</span><span class="br0">&#40;</span><span class="st0">&quot;{0}<span class="es0">\&quot;</span>{1}<span class="es0">\&quot;</span>: {2}{3}&quot;</span>,
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; i <span class="sy0">==</span> <span class="nu0">0</span> <span class="sy0">?</span> <span class="st0">&quot;{&quot;</span> <span class="sy0">:</span> <span class="st0">&quot;, &quot;</span>, 
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; headers<span class="br0">&#91;</span>i<span class="br0">&#93;</span>, 
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">value</span>,
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; i <span class="sy0">==</span> columnCount <span class="sy0">-</span> <span class="nu0">1</span> <span class="sy0">?</span> <span class="st0">&quot;}&quot;</span> <span class="sy0">:</span> <span class="st0">&quot;&quot;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp; &nbsp; sb<span class="sy0">.</span><span class="me1">AppendLine</span><span class="br0">&#40;</span><span class="st0">&quot;]&quot;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; sb<span class="sy0">.</span><span class="me1">AppendLine</span><span class="br0">&#40;</span><span class="st0">&quot;}&quot;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; jsonFile<span class="sy0">.</span><span class="me1">UploadText</span><span class="br0">&#40;</span>sb<span class="sy0">.</span><span class="me1">ToString</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; jsonFile<span class="sy0">.</span><span class="me1">Properties</span><span class="sy0">.</span><span class="me1">ContentType</span> <span class="sy0">=</span> <span class="st0">&quot;application/json&quot;</span><span class="sy0">;</span>
&nbsp; &nbsp; jsonFile<span class="sy0">.</span><span class="me1">SetProperties</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
<span class="br0">&#125;</span>
&nbsp;
<span class="kw1">public</span> <span class="kw4">enum</span> InspectedType
<span class="br0">&#123;</span>
&nbsp; &nbsp; <span class="kw4">String</span> <span class="sy0">=</span> <span class="nu0">0</span>,
&nbsp; &nbsp; Number <span class="sy0">=</span> <span class="nu0">1</span>,
&nbsp; &nbsp; Boolean <span class="sy0">=</span> <span class="nu0">2</span> &nbsp; &nbsp;
<span class="br0">&#125;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">#r "Microsoft.WindowsAzure.Storage"

using System;
using System.Text;
using System.Text.RegularExpressions;
using CsvHelper;
using Microsoft.WindowsAzure.Storage.Blob;

public static void Run(Stream input, string name, CloudBlockBlob jsonFile, TraceWriter log)
{
    log.Info($"C# External trigger function processed file: " + name);

    var boolRegex = new Regex(@"^([Tt]rue|[Ff]alse)$");
    var numericRegex = new Regex(@"^[\d\.,]*\d[\d\.,]*$");

    var reader = new StreamReader(input);
    var csv = new CsvReader(reader);
    csv.Configuration.HasHeaderRecord = false;

    var headers = new List&lt;string&gt;();
    var rows = new List&lt;List&lt;string&gt;&gt;();
    InspectedType[] types = null;
    int rowCount = 0;
    string stringValue;
    while(csv.Read())
    {
        if(rowCount == 0)
        {
            for(int i=0; csv.TryGetField&lt;string&gt;(i, out stringValue); i++) 
            {
                headers.Add(stringValue);
            }
            types = new InspectedType[headers.Count()];
            log.Info($"Headers: " + String.Join(",", headers));            
        }
        else
        {
            var row = new List&lt;string&gt;();
            for(int i=0; csv.TryGetField&lt;string&gt;(i, out stringValue); i++) 
            {
                row.Add(stringValue);
                if(rowCount == 1)
                {
                    if(boolRegex.IsMatch(stringValue))
                    {
                        types[i] = InspectedType.Boolean;
                    }
                    else if(numericRegex.IsMatch(stringValue))
                    {
                        types[i] = InspectedType.Number;
                    }
                    else
                    {
                        types[i] = InspectedType.String;
                    }
                }
                else
                {
                    if(types[i] == InspectedType.Boolean &amp;&amp; !boolRegex.IsMatch(stringValue))
                    {
                        types[i] = InspectedType.String;
                    }
                    else if(types[i] == InspectedType.Number &amp;&amp; !numericRegex.IsMatch(stringValue))
                    {
                        types[i] = InspectedType.String;
                    }
                }
            }
            rows.Add(row);
            log.Info($"Row $rowCount: " + String.Join(",", row));
        }
        rowCount++;
    }

    log.Info("Inspected Row Types: " + String.Join(",", types));

    var time = DateTime.UtcNow.ToString("s");
    var typesDescription = "\"" + String.Join("\",\"", types) + "\"";
    var sb = new StringBuilder();
    sb.AppendLine("{");
    sb.AppendFormat("\"info\": {{ \"sourceFile\": \"{0}\", \"processedTime\": \"{1}\", \"types\": [{2}] }},",
                    name, time, typesDescription);

    sb.AppendLine("\"rows\": [");
    bool isFirstRow = true;
    int columnCount = headers.Count();
    foreach(var row in rows)
    {
        if(!isFirstRow)
        {
            sb.AppendLine(",");
        }
        isFirstRow = false;

        for(var i = 0; i &lt; columnCount; i++)
        {
            var value = row[i];
            if(types[i] == InspectedType.Boolean)
            {
                value = row[i].ToLower();
            }
            else if(types[i] == InspectedType.Number)
            {
                value = row[i].Replace(",", "");
            }
            else
            {
                value = "\"" + row[i].Replace("\"","\\\"") + "\"";
            }

            sb.AppendFormat("{0}\"{1}\": {2}{3}",
                            i == 0 ? "{" : ", ", 
                            headers[i], 
                            value,
                            i == columnCount - 1 ? "}" : "");
        }
    }
    sb.AppendLine("]");
    sb.AppendLine("}");

    jsonFile.UploadText(sb.ToString());
    jsonFile.Properties.ContentType = "application/json";
    jsonFile.SetProperties();
}

public enum InspectedType
{
    String = 0,
    Number = 1,
    Boolean = 2    
}</pre></div></div>

<p>Nearly all of the code is converting the CSV to JSON, almost no code is required to handle the storage, dropbox, etc interactions.</p>
<h4>Step 3B: Listing and Latest JSON</h4>
<p>Create a second Azure Function that watches the "Archive" blob, with a blob output with the "latest" name hardcoded, and input for the "listing" blob, and an "inout" blob for the listing. We reference the input twice because it lets us bind the input as a string for easy null checks, but a CloudBlockBlob for actual output so we can set the output blob properties to make it "application/json".</p>
<p><b><a href="https://github.com/tarwn/csvaas/blob/master/CSVaaSPublish/run.csx">CSVaaSPublish/run.csx</a></b></p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="csharp"><thead><tr><td colspan="2"  class="head">C#</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
</pre></td><td class="de1"><pre class="de1"><span class="co2">#r &quot;Microsoft.WindowsAzure.Storage&quot;</span>
&nbsp;
<span class="kw1">using</span> <span class="co3">Microsoft.WindowsAzure.Storage.Blob</span><span class="sy0">;</span>
<span class="kw1">using</span> <span class="co3">Newtonsoft.Json</span><span class="sy0">;</span>
&nbsp;
<span class="kw1">public</span> <span class="kw1">static</span> <span class="kw4">void</span> Run<span class="br0">&#40;</span>Stream triggerBlob, <span class="kw4">string</span> name, <span class="kw4">string</span> listBlobIn, CloudBlockBlob listBlobOut, Stream outputBlob, TraceWriter log<span class="br0">&#41;</span>
<span class="br0">&#123;</span>
&nbsp; &nbsp; <span class="co1">// publish &quot;latest&quot;</span>
&nbsp; &nbsp; triggerBlob<span class="sy0">.</span><span class="me1">CopyTo</span><span class="br0">&#40;</span>outputBlob<span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; <span class="co1">// add original item to archive &quot;all&quot; list</span>
&nbsp; &nbsp; CSVList list<span class="sy0">;</span>
&nbsp; &nbsp; <span class="kw1">if</span><span class="br0">&#40;</span><span class="sy0">!</span><span class="kw4">String</span><span class="sy0">.</span><span class="me1">IsNullOrEmpty</span><span class="br0">&#40;</span>listBlobIn<span class="br0">&#41;</span><span class="br0">&#41;</span>
&nbsp; &nbsp; <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; list <span class="sy0">=</span> JsonConvert<span class="sy0">.</span><span class="me1">DeserializeObject</span><span class="sy0">&lt;</span>CSVList<span class="sy0">&gt;</span><span class="br0">&#40;</span>listBlobIn<span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp; &nbsp; <span class="kw1">else</span><span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; list <span class="sy0">=</span> <span class="kw3">new</span> CSVList<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp;
&nbsp; &nbsp; list<span class="sy0">.</span><span class="me1">LatestUpdate</span> <span class="sy0">=</span> DateTime<span class="sy0">.</span><span class="me1">UtcNow</span><span class="sy0">;</span>
&nbsp; &nbsp; list<span class="sy0">.</span><span class="me1">Items</span><span class="sy0">.</span><span class="kw1">Add</span><span class="br0">&#40;</span>name<span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; listBlobOut<span class="sy0">.</span><span class="me1">UploadText</span><span class="br0">&#40;</span>JsonConvert<span class="sy0">.</span><span class="me1">SerializeObject</span><span class="br0">&#40;</span>list<span class="br0">&#41;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; listBlobOut<span class="sy0">.</span><span class="me1">Properties</span><span class="sy0">.</span><span class="me1">ContentType</span> <span class="sy0">=</span> <span class="st0">&quot;application/json&quot;</span><span class="sy0">;</span>
&nbsp; &nbsp; listBlobOut<span class="sy0">.</span><span class="me1">SetProperties</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
<span class="br0">&#125;</span>
&nbsp;
<span class="kw1">public</span> <span class="kw4">class</span> CSVList
<span class="br0">&#123;</span>
&nbsp; &nbsp; <span class="kw1">public</span> CSVList<span class="br0">&#40;</span><span class="br0">&#41;</span> 
&nbsp; &nbsp; <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; Items <span class="sy0">=</span> <span class="kw3">new</span> List<span class="sy0">&lt;</span><span class="kw4">string</span><span class="sy0">&gt;</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp;
&nbsp; &nbsp; <span class="kw1">public</span> DateTime LatestUpdate <span class="br0">&#123;</span> <span class="kw1">get</span><span class="sy0">;</span>set<span class="sy0">;</span> <span class="br0">&#125;</span>
&nbsp; &nbsp; <span class="kw1">public</span> List<span class="sy0">&lt;</span><span class="kw4">string</span><span class="sy0">&gt;</span> Items <span class="br0">&#123;</span> <span class="kw1">get</span><span class="sy0">;</span>set<span class="sy0">;</span> <span class="br0">&#125;</span> &nbsp; &nbsp;
<span class="br0">&#125;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">#r "Microsoft.WindowsAzure.Storage"

using Microsoft.WindowsAzure.Storage.Blob;
using Newtonsoft.Json;

public static void Run(Stream triggerBlob, string name, string listBlobIn, CloudBlockBlob listBlobOut, Stream outputBlob, TraceWriter log)
{
    // publish "latest"
    triggerBlob.CopyTo(outputBlob);

    // add original item to archive "all" list
    CSVList list;
    if(!String.IsNullOrEmpty(listBlobIn))
    {
        list = JsonConvert.DeserializeObject&lt;CSVList&gt;(listBlobIn);
    }
    else{
        list = new CSVList();
    }

    list.LatestUpdate = DateTime.UtcNow;
    list.Items.Add(name);

    listBlobOut.UploadText(JsonConvert.SerializeObject(list));
    listBlobOut.Properties.ContentType = "application/json";
    listBlobOut.SetProperties();
}

public class CSVList
{
    public CSVList() 
    {
        Items = new List&lt;string&gt;();
    }

    public DateTime LatestUpdate { get;set; }
    public List&lt;string&gt; Items { get;set; }    
}</pre></div></div>

<p>And there we have it, a CSV-powered API with full documentation, authentication via Microsoft as a single-sign on source, analytics, rate limits, and an interface that requires me to do nothing more than save my file in a folder and pay an extremely low consumption bill based on usage.</p>
<h2>Things I Figured Out</h2>
<p>Along the way I ran into a couple undocumented Functions issues, here's the details in case someone else does to.</p>
<p><b>CloudBlockBlob: Cannot bind blob to CloudBlockBlob using access Write</b><br />
The Issue:<br />
Part of the list of <a href="">available bindings</a> will complain if you set them as direction "in" or "out" and fail to work.</p>
<p>The Fix:<br />
Edit the function.json file directly, changing the "direction" property to "inout", an undocumented value that indicates that it is a bi-directional binding type.</p>
<p><b>CloudBlockBlob: Exception binding parameter 'output'</b><br />
The Issue:<br />
This happened on my Dropbox->Blob Function. When you create an ExternalFileTrigger, it also asks you to define an output. This is not a "blob" output, but a special ApiHub thing that doesn't have the same capabilities as a Blob output and can't handle the same range of bindings that the "blob" type can.</p>
<p>To Fix it:<br />
Edit the function.json file, changing the type to "blob" and pasting in a connection property that has been set up for a "blob" type (the ApiHub storage connection string won't work here either). Once you update both of these properties, everything is happy.</p>
]]></content:encoded>
			<wfw:commentRss>/index.php/enterprisedev/cloud/azure/csv-file-to-api-using-azure-functions-csvaas/feed/</wfw:commentRss>
		<slash:comments>1</slash:comments>
		</item>
	</channel>
</rss>
