<?xml version="1.0" encoding="UTF-8"?><rss version="2.0"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:atom="http://www.w3.org/2005/Atom"
	xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
	xmlns:slash="http://purl.org/rss/1.0/modules/slash/"
	>

<channel>
	<title>execution plan &#8211; LessthanDot</title>
	<atom:link href="/index.php/tag/execution-plan/feed/" rel="self" type="application/rss+xml" />
	<link>/</link>
	<description>A Technical Community for IT Professionals</description>
	<lastBuildDate>Sat, 09 Mar 2019 12:50:36 +0000</lastBuildDate>
	<language>en-US</language>
	<sy:updatePeriod>hourly</sy:updatePeriod>
	<sy:updateFrequency>1</sy:updateFrequency>
	<generator>https://wordpress.org/?v=4.6.1</generator>
	<item>
		<title>Getting started with Execution Plans</title>
		<link>/index.php/datamgmt/dbprogramming/getting-started-with-execution-plans/</link>
		<comments>/index.php/datamgmt/dbprogramming/getting-started-with-execution-plans/#comments</comments>
		<pubDate>Thu, 10 Jan 2013 07:52:00 +0000</pubDate>
		<dc:creator><![CDATA[Axel Achten (axel8s)]]></dc:creator>
				<category><![CDATA[Database Programming]]></category>
		<category><![CDATA[Microsoft SQL Server]]></category>
		<category><![CDATA[Microsoft SQL Server Admin]]></category>
		<category><![CDATA[execution plan]]></category>
		<category><![CDATA[query plan]]></category>

		<guid isPermaLink="false">/index.php/2013/01/getting-started-with-execution-plans/</guid>
		<description><![CDATA[Another document for the customer's DBA checklist. This time we are going to look how we find and read an Execution Plan from a query.
Showing an Execution Plan
I will only focus on the graphical Execution Plans and in the examples the AdventureWorks2&#8230;]]></description>
				<content:encoded><![CDATA[<p>Another document for the customer&#8217;s DBA checklist. This time we are going to look how we find and read an Execution Plan from a query.</p>
<p><b>Showing an Execution Plan</b><br />
I will only focus on the graphical Execution Plans and in the examples the AdventureWorks2008R2 OLTP database is used which you can download here.<br />
To see a Query Execution plan, you need to create a query:</p>
<pre>SELECT * FROM Sales.vStoreWithContacts</pre>
<p>And then you click the &#8220;Display Estimated Execution Plan&#8221; or the &#8220;Include Actual Execution Plan&#8221; button in the SQL Editor Toolbar of SQL Server Management Studio.</p>
<div class="image_block"><a href="/wp-content/uploads/blogs/DataMgmt/Axel8s/EP1.JPG?mtime=1357810925"><img alt="" src="/wp-content/uploads/blogs/DataMgmt/Axel8s/EP1.JPG?mtime=1357810925" width="730" height="129" /></a></div>
<p>The difference between the Estimated and the Actual plan is the execution of the query itself. When you hit the &#8220;Display Estimated Execution Plan&#8221; button, SQL Server Management Studio will immediately show you an Execution plan, however it&#8217;s an estimated plan and the query itself is NOT executed. When you hit the &#8220;Include Actual Execution Plan&#8221; nothing will happen until you execute the query. After execution of the query a third tab will appear in SSMS showing the Execution Plan that was actually used:</p>
<div class="image_block"><a href="/wp-content/uploads/blogs/DataMgmt/Axel8s/EP2.JPG?mtime=1357810925"><img alt="" src="/wp-content/uploads/blogs/DataMgmt/Axel8s/EP2.JPG?mtime=1357810925" width="1651" height="711" /></a></div>
<p><b>Reading Execution Plans</b><br />
When you want to read the above Execution Plan you have to read from right to left and from bottom to top. So SQL Server will start with</p>
<div class="image_block"><a href="/wp-content/uploads/blogs/DataMgmt/Axel8s/EP3.JPG?mtime=1357810926"><img alt="" src="/wp-content/uploads/blogs/DataMgmt/Axel8s/EP3.JPG?mtime=1357810926" width="232" height="200" /></a></div>
<p>And end with</p>
<div class="image_block"><a href="/wp-content/uploads/blogs/DataMgmt/Axel8s/EP4.JPG?mtime=1357810926"><img alt="" src="/wp-content/uploads/blogs/DataMgmt/Axel8s/EP4.JPG?mtime=1357810926" width="91" height="86" /></a></div>
<p>Other information you directly can see is the most expensive operation and based on the thickness of the connecting arrows you can see the amount of data thatï¿½s streaming through them:</p>
<div class="image_block"><a href="/wp-content/uploads/blogs/DataMgmt/Axel8s/EP5.JPG?mtime=1357810926"><img alt="" src="/wp-content/uploads/blogs/DataMgmt/Axel8s/EP5.JPG?mtime=1357810926" width="783" height="226" /></a></div>
<p><b>Finding more information</b><br />
When you hover your mouse over the arrows or operations in an Execution Plan a pop-up will appear giving you more detailed information about the rows or operation:</p>
<div class="image_block"><a href="/wp-content/uploads/blogs/DataMgmt/Axel8s/EP6.JPG?mtime=1357810926"><img alt="" src="/wp-content/uploads/blogs/DataMgmt/Axel8s/EP6.JPG?mtime=1357810926" width="225" height="270" /></a></div>
<p>Needless to say that the Actual Number of Rows and some other information will not be available in an Estimated Execution Plan. In the example above we see a big difference between the Estimated and the Actual Number of Rows which might indicate that our statistics are out of date.<br />
For even more information select an operation and open the Properties Window (F4):</p>
<div class="image_block"><a href="/wp-content/uploads/blogs/DataMgmt/Axel8s/EP7.JPG?mtime=1357810926"><img alt="" src="/wp-content/uploads/blogs/DataMgmt/Axel8s/EP7.JPG?mtime=1357810926" width="400" height="225" /></a></div>
<p>Another option to get more out of your Execution Plans is to download <a href="http://www.sqlsentry.com/plan-explorer/sql-server-query-view.asp">SQL Sentry Plan Explorer</a> more information is found at their site but here is a screenshot from the same Execution Plan in the Free Plan Explorer:</p>
<div class="image_block"><a href="/wp-content/uploads/blogs/DataMgmt/Axel8s/EP8.JPG?mtime=1357810926"><img alt="" src="/wp-content/uploads/blogs/DataMgmt/Axel8s/EP8.JPG?mtime=1357810926" width="1267" height="502" /></a></div>
<p>As you can see, the most expensive operation is highlighted in red and the tool also highlights the difference between the estimated and actual rows.</p>
<p><b>Missing index information</b><br />
When executing the following query:</p>
<pre>SELECT * FROM Sales.vStoreWithContacts
WHERE Firstname = 'Alan'</pre>
<p>You’ll see some green text in the top of the Execution Plan:</p>
<div class="image_block"><a href="/wp-content/uploads/blogs/DataMgmt/Axel8s/EP9.JPG?mtime=1357810926"><img alt="" src="/wp-content/uploads/blogs/DataMgmt/Axel8s/EP9.JPG?mtime=1357810926" width="1081" height="77" /></a></div>
<p>This information comes from the Dynamic Management View: sys.dm_db_missing_index_details. More information on Indexes is out of scope for this post but be careful with just implanting these Missing Indexes. They might improve the performance of this query but since they need to be maintained they can also slow down other operations on the database.</p>
<p><b>Comparing Execution Plans</b><br />
Are you rewriting a query and wondering which one should perform better? You can easily compare the Execution Plans of two queries. Just write these queries in one query window:</p>
<pre>SELECT * FROM Sales.vStoreWithContacts
WHERE Firstname NOT LIKE 'A%';

select * FROM Sales.vStoreWithContacts
WHERE FirstName IN (SELECT FirstName FROM Sales.vStoreWithContacts
WHERE FirstName NOT LIKE 'A%');
GO</pre>
<p>When you execute the queries you’ll see they both return the same 70 rows but when you look at the header of the Execution Plans you’ll see that the first query costs less than the second one in this batch:</p>
<div class="image_block"><a href="/wp-content/uploads/blogs/DataMgmt/Axel8s/ep10.JPG?mtime=1357810927"><img alt="" src="/wp-content/uploads/blogs/DataMgmt/Axel8s/ep10.JPG?mtime=1357810927" width="275" height="150" /></a></div>
<p><b>Conclusion</b><br />
Execution Plans gives us valuable information and a deep insight in how SQL Server executes the queries we write. Reading and understanding Execution Plans are essential for writing well performing queries.</p>
]]></content:encoded>
			<wfw:commentRss>/index.php/datamgmt/dbprogramming/getting-started-with-execution-plans/feed/</wfw:commentRss>
		<slash:comments>4</slash:comments>
		</item>
		<item>
		<title>RID Lookup take me down</title>
		<link>/index.php/datamgmt/datadesign/rid-lookup-sql-tuning/</link>
		<comments>/index.php/datamgmt/datadesign/rid-lookup-sql-tuning/#comments</comments>
		<pubDate>Sun, 18 Jul 2010 22:21:52 +0000</pubDate>
		<dc:creator><![CDATA[Ted Krueger (onpnt)]]></dc:creator>
				<category><![CDATA[Data Modelling and Design]]></category>
		<category><![CDATA[Database Administration]]></category>
		<category><![CDATA[Database Programming]]></category>
		<category><![CDATA[Microsoft SQL Server]]></category>
		<category><![CDATA[Microsoft SQL Server Admin]]></category>
		<category><![CDATA[execution plan]]></category>
		<category><![CDATA[query tuning]]></category>
		<category><![CDATA[rid lookup]]></category>
		<category><![CDATA[sql server 2008]]></category>
		<category><![CDATA[t-sql]]></category>

		<guid isPermaLink="false">/index.php/2010/07/rid-lookup-sql-tuning/</guid>
		<description><![CDATA[The scenario starts with a phone call from the support desk reporting failed integrations from the ERP system to the WMS system.  This integration process is critical for the production of items with the company to fulfill orders and build inventory.  Without the process, finished goods inventory is not posted and thus does not become available for sale.  This causes a more detrimental effect on financial reporting and filters down to the revolving reason we are in business -  making money.In a normal IT team structure, there are three high-level components we all start with to troubleshoot backend systems process failures:  Network, Systems/Applications and Database Server Performance.  Each team sector should work together and focus on their specialty to document possibly causes.  This will benefit the situation the best and also create a collaboration point where the team can compile everything found in order to proceed with the fix.   As a DBA you will find yourself in this situation often and there are a couple of key points you can focus on to quickly determine if the cause is the database server.  After your findings the DBA can then focus on areas to alter, tune or repair.]]></description>
				<content:encoded><![CDATA[<p>This is your query on a rollercoaster.  Not a fun trip and sometimes bringing a paper bag with you is a necessity.</p>
<div class="image_block"><img src="/wp-content/uploads/blogs/DataMgmt/rid_1.gif" alt="" title="" width="361" height="248" /></div>
</p>
<p><strong>It really happens</strong></p>
<p>The scenario starts with a phone call from the support desk reporting failed integrations from the ERP system to the WMS system.  This integration process is critical for the production of items with the company to fulfill orders and build inventory.  Without the process, finished goods inventory is not posted and thus does not become available for sale.  This causes a more detrimental effect on financial reporting and filters down to the revolving reason we are in business &#8211; making money.</p>
<p>In a normal IT team structure, there are three high-level components we all start with to troubleshoot backend systems process failures:  Network, Systems/Applications and Database Server Performance.  Each team sector should work together and focus on their specialty to document possibly causes.  This will benefit the situation the best and also create a collaboration point where the team can compile everything found in order to proceed with the fix.   As a DBA you will find yourself in this situation often and there are a couple of key points you can focus on to quickly determine if the cause is the database server.  After your findings the DBA can then focus on areas to alter, tune or repair.</p>
<p>In the scenario that my own team found themselves in recently, the troubleshooting steps lead to find timeouts occurring within the integration processing of the application.  The application was kind enough to have built in logging to show the query that was being timed out which greatly lowered the analytical stage in finding the root cause.  In most cases this isn&#8217;t logged but with the combination of profiler and monitoring during these timeouts, the query can be extracted in order to proceed with determining if it is the cause and possible resolution.</p>
<p>Once looking at the execution plan of the query that was in the log related to the timeouts, an RID Lookup operation was found with an Index Seek.  In some cases an RID Lookup may not cause any problems with performance and go without notice.  However is this case, the table in question that the query was requesting data from was roughly five millions rows.  This type of table size will cause the RID Lookup to slow the performance of even the simplest queries.</p>
<p><strong>Showing is learning</strong></p>
<p>To portray the data, indexes and query we will step through recreating the exact situation that occurred.</p>
<p>First step will be to create a database that we can work in.  We will then create an item table and load the item table from use of the AdventureWorks database table, &#8220;Production.Product&#8221;.</p>
<blockquote><p><span class="MT_red">Note: AdventureWorks can be used for this entire recreation but to retain the database as it is the secondary database was created for example purposes.</span></p></blockquote>
<p>Run the following to prepare the database and needed objects:</p>
<pre>USE master
GO
CREATE DATABASE [EXE_PLANS] ON  PRIMARY 
(NAME = N'EXE_PLANS', 
 FILENAME = N'C:Program FilesMicrosoft SQL ServerMSSQL10.MSSQLSERVERMSSQLDATAEXE_PLANS.mdf', 
 SIZE = 2048KB, 
 MAXSIZE = 1024000KB, 
 FILEGROWTH = 409600KB)
 LOG ON 
(NAME = N'EXE_PLANS_log', 
 FILENAME = N'C:Program FilesMicrosoft SQL ServerMSSQL10.MSSQLSERVERMSSQLDATAEXE_PLANS_log.ldf', 
 SIZE = 1024KB, 
 MAXSIZE = 102400KB, 
 FILEGROWTH = 10240KB)
GO

USE [EXE_PLANS]
GO
CREATE TABLE ITEMS
(ITEMCODE INT,
 ITEMNAME VARCHAR(50),
 LASTMODIFY DATETIME,
 CREATEDATE DATE,
 CREATETIME TIME)
GO

INSERT INTO ITEMS
SELECT 
 Prods.ProductID,
 Prods.[Name],
 GETDATE(),
 GETDATE(),
 GETDATE()
FROM 
AdventureWorks.Production.Product Prods</pre>
<p>Now that we have our testing area, we can create some common indexes that may be found on a table like the items tables.</p>
<p>First a nonclustered index on the ITEMCODE</p>
<pre>CREATE UNIQUE NONCLUSTERED INDEX IDX_ITEMID ON ITEMS
(ITEMCODE)
WITH (FILLFACTOR = 85)
GO</pre>
<p>Next, a nonclustered index on CREATETIME, ITEMCODE and CREATEDATE</p>
<pre>CREATE NONCLUSTERED INDEX IDX_PRODID_DATE_ASC ON ITEMS
(CREATETIME,ITEMCODE,CREATEDATE)
INCLUDE (ITEMNAME)
WITH (FILLFACTOR = 80)
GO</pre>
<p>Once these indexes are created we can run a basic query to extract ITEMNAME and CREATETIME with a WHERE clause only looking at a specific ITEMCODE value.  </p>
<pre>SELECT
 ITEMS.ITEMNAME,
 ITEMS.CREATETIME
FROM ITEMS
WHERE ITEMCODE = 1
GO</pre>
</p>
<p>We should be fine as the nonclustered index, &#8220;IDX_ITEMID&#8221; should be used in an index seek given the WHERE clause on ITEMCODE.  However, when we run this query to check the estimated execution plan, we can see we have a lookup occurring.</p>
<div class="image_block"><img src="/wp-content/uploads/blogs/DataMgmt/rid_2.gif" alt="" title="" width="624" height="368" /></div>
<p>The lookup is caused by the fact that there is not a covering index to fulfill the entire needs of the query.  The WHERE clause and columns returned combined equate to, &#8220;covering&#8221;.  In order to satisfy this query and remove the RID Lookup, we need to create a covering index or a clustered index on the ITEMCODE.   Creating a clustered index physically orders the data under the conditions of the index and in some cases (like this) that was not possible.  An effective solution in this case is a nonclustered index covering the entire query requirements.</p>
<blockquote><p><span class="MT_red">Note: Let&#8217;s say that the table in question isn&#8217;t a HEAP and there is an existing clustered index on a different key.  Since we can only have one clustered index per table, the resolution of ITEMCODE becoming a clustered index to resolve our RID Lookup is not possible.  A nonclustered index is then the only way to resolve (or remove) the RID Lookup.  </span></p></blockquote>
<p>To create a covering index we can do the following</p>
<pre>CREATE NONCLUSTERED INDEX IDX_COVERING_ASC ON ITEMS
(ITEMCODE,LASTMODIFY,ITEMNAME,CREATETIME)
WITH (FILLFACTOR=80)
GO</pre>
</p>
<p>After looking at our execution plan, we should see only the index seek operation being performed</p>
<div class="image_block"><img src="/wp-content/uploads/blogs/DataMgmt/rid_5.gif" alt="" title="" width="628" height="229" /></div>
<p>Let&#8217;s put things into perspective.  We all know an index seek is optimal (in most cases).  We do see our index seek in the execution plan prior to our resolution of a covering index but we have the handicap of the RID Lookup being performed in a nested loop with the index seek.  This will result in the cost of the index seek operation plus essentially the same effect of a table scan under a nested loop operation.  For each record we find in the index seek, we have to run out to the disk, find the remaining data we need in order to fulfill the needs of the query.<br />
This is all reflected in a nested loop operation.</p>
<p>What is shown below is the Index Seek retrieving the data directly based on the index pointers and requiring a need to loop back to the data to fulfill all of the data needed by the request.  This causes the query to perform slowly and also increases the possibility for high CPU utilization and high IO.  </p>
<div class="image_block"><img src="/wp-content/uploads/blogs/DataMgmt/rid_4.gif" alt="" title="" /></div>
</p>
<p>Basic troubleshooting steps of query performance like this should be a daily part of database tuning and monitoring.  Allowing changes to go directly into production database servers without the initiative of code reviews and heavy testing will allow these types of problems to happen.  The best resolution of all is to prevent these types of problems by not bypassing those normal transport objectives.</p>
<p>
<div class="image_block"><img src="/wp-content/uploads/blogs/DataMgmt/rid_grant.gif" alt="" title="" width="137" height="137" align="left" /></div>
<p>For learning more on Execution Plans, I highly recommend purchasing, <a href="http://www.amazon.com/Server-Execution-Plans-Grant-Fritchey/dp/1906434026">SQL Server Execution Plans</a> by Grant Fritchey.  This book goes into each operation you will encounter in plans and some ways to resolve operations that are not optimal.  Grant (<a href="http://twitter.com/gfritchey">Twitter</a> | <a href="http://scarydba.wordpress.com/">Blog</a>) is also a widely known and respected expert on Execution Plans and database tuning.  Reading his blog and following him will greatly benefit your daily work as a DBA or Developer on SQL Server.</p></p>
]]></content:encoded>
			<wfw:commentRss>/index.php/datamgmt/datadesign/rid-lookup-sql-tuning/feed/</wfw:commentRss>
		<slash:comments>5</slash:comments>
		</item>
		<item>
		<title>Is an index seek always better or faster than an index scan?</title>
		<link>/index.php/datamgmt/datadesign/is-an-index-scan-always-better-or-faster/</link>
		<comments>/index.php/datamgmt/datadesign/is-an-index-scan-always-better-or-faster/#comments</comments>
		<pubDate>Tue, 26 May 2009 15:52:00 +0000</pubDate>
		<dc:creator><![CDATA[SQLDenis]]></dc:creator>
				<category><![CDATA[Data Modelling and Design]]></category>
		<category><![CDATA[execution plan]]></category>
		<category><![CDATA[indexing]]></category>
		<category><![CDATA[sql server]]></category>

		<guid isPermaLink="false">/index.php/2009/05/is-an-index-scan-always-better-or-faster/</guid>
		<description><![CDATA[We all know that we should avoid index and table scans like the plague and try to get an index seek all the time.
Okay, what will happen if we fill a table with one million rows that have the same exact value and then create a clustered index on it.
Y&#8230;]]></description>
				<content:encoded><![CDATA[<p>We all know that we should avoid index and table scans like the plague and try to get an index seek all the time.<br />
Okay, what will happen if we fill a table with one million rows that have the same exact value and then create a clustered index on it.<br />
Yes, you can create a clustered index on a non unique column because SQL Server will create a uniquefier on that column to make the index unique.</p>
<p>Create the following table with a clustered index</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
</pre></td><td class="de1"><pre class="de1"><span class="kw1">create</span> <span class="kw1">table</span> TestIndex <span class="br0">&#40;</span><span class="kw1">Value</span> <span class="kw1">varchar</span><span class="br0">&#40;</span><span class="nu0">100</span><span class="br0">&#41;</span> not null<span class="br0">&#41;</span>
&nbsp;
<span class="kw1">create</span> <span class="kw1">clustered</span> <span class="kw1">index</span> ix_TestIndex <span class="kw1">on</span> TestIndex<span class="br0">&#40;</span><span class="kw1">Value</span><span class="br0">&#41;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">create table TestIndex (Value varchar(100) not null)

create clustered index ix_TestIndex on TestIndex(Value)</pre></div></div>

<p>Now insert a million rows with all the same value</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
</pre></td><td class="de1"><pre class="de1"><span class="kw1">insert</span> TestIndex
<span class="kw1">select</span> <span class="kw1">top</span> <span class="nu0">1000000</span> <span class="st0">'A'</span> <span class="kw1">from</span> master..<span class="me1">spt_values</span> s1
<span class="sy0">CROSS</span> <span class="sy0">JOIN</span> master..<span class="me1">spt_values</span> s2</pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">insert TestIndex
select top 1000000 'A' from master..spt_values s1
CROSS JOIN master..spt_values s2</pre></div></div>

<p>Now run the following and look at the execution plan</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
</pre></td><td class="de1"><pre class="de1"><span class="kw1">select</span> <span class="kw2">count</span><span class="br0">&#40;</span><span class="sy0">*</span><span class="br0">&#41;</span> <span class="kw1">from</span> TestIndex
<span class="kw1">where</span> <span class="kw1">Value</span> <span class="sy0">=</span> <span class="st0">'A'</span>
&nbsp;
&nbsp;
<span class="kw1">select</span> <span class="kw2">count</span><span class="br0">&#40;</span><span class="sy0">*</span><span class="br0">&#41;</span> <span class="kw1">from</span> TestIndex</pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">select count(*) from TestIndex
where Value = 'A'


select count(*) from TestIndex</pre></div></div>

<p>Here is what the plan looks like.<br />
</p>
<div class="image_block"><a href="/wp-content/uploads/blogs/DataMgmt/Denis/ADvent/plan0.PNG?mtime=1357604160"><img alt="" src="/wp-content/uploads/blogs/DataMgmt/Denis/ADvent/plan0.PNG?mtime=1357604160" width="654" height="279" /></a></div>
<p></p>
<p>Here is what the plan looks  like in text (you can get the output if you run SET SHOWPLAN_TEXT on first)</p>
<p> <em> |&#8211;Compute Scalar(DEFINE:([Expr1004]=CONVERT_IMPLICIT(int,[Expr1005],0)))<br />
       |&#8211;Stream Aggregate(DEFINE:([Expr1005]=Count(*)))<br />
            |&#8211;Clustered Index Seek(OBJECT:([Test].[dbo].[TestIndex].[ix_TestIndex]),<br />
		SEEK:([Test].[dbo].[TestIndex].[Value]=[@1]) ORDERED FORWARD)</p>
<p>  |&#8211;Compute Scalar(DEFINE:([Expr1004]=CONVERT_IMPLICIT(int,[Expr1005],0)))<br />
       |&#8211;Stream Aggregate(DEFINE:([Expr1005]=Count(*)))<br />
            |&#8211;Clustered Index Scan(OBJECT:([Test].[dbo].[TestIndex].[ix_TestIndex]))<br />
</em></p>
<p>What about IO, is that any different?</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
</pre></td><td class="de1"><pre class="de1"><span class="kw1">set</span> <span class="kw1">nocount</span> <span class="kw1">on</span>
<span class="kw1">set</span> <span class="kw1">statistics</span> io <span class="kw1">on</span>
<span class="kw1">select</span> <span class="kw2">count</span><span class="br0">&#40;</span><span class="sy0">*</span><span class="br0">&#41;</span> <span class="kw1">from</span> TestIndex
<span class="kw1">where</span> <span class="kw1">Value</span> <span class="sy0">=</span> <span class="st0">'A'</span>
&nbsp;
&nbsp;
<span class="kw1">select</span> <span class="kw2">count</span><span class="br0">&#40;</span><span class="sy0">*</span><span class="br0">&#41;</span> <span class="kw1">from</span> TestIndex
&nbsp;
<span class="kw1">set</span> <span class="kw1">statistics</span> io <span class="kw1">off</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">set nocount on
set statistics io on
select count(*) from TestIndex
where Value = 'A'


select count(*) from TestIndex

set statistics io off</pre></div></div>

<p><em>Table &#8216;TestIndex&#8217;. Scan count 1, logical reads 2491, physical reads 0,<br />
read-ahead reads 0, lob logical reads 0, lob physical reads 0, lob read-ahead reads 0.</p>
<p>Table &#8216;TestIndex&#8217;. Scan count 1, logical reads 2491, physical reads 0,<br />
read-ahead reads 0, lob logical reads 0, lob physical reads 0, lob read-ahead reads 0.</em></p>
<p>Looks the same to me</p>
<p>Now let&#8217;s take a look at the time it takes to run this</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
</pre></td><td class="de1"><pre class="de1"><span class="kw1">set</span> <span class="kw1">nocount</span> <span class="kw1">on</span>
<span class="kw1">set</span> <span class="kw1">statistics</span> <span class="kw1">time</span> <span class="kw1">on</span>
<span class="kw1">select</span> <span class="kw2">count</span><span class="br0">&#40;</span><span class="sy0">*</span><span class="br0">&#41;</span> <span class="kw1">from</span> TestIndex
<span class="kw1">where</span> <span class="kw1">Value</span> <span class="sy0">=</span> <span class="st0">'A'</span>
&nbsp;
&nbsp;
<span class="kw1">select</span> <span class="kw2">count</span><span class="br0">&#40;</span><span class="sy0">*</span><span class="br0">&#41;</span> <span class="kw1">from</span> TestIndex
&nbsp;
&nbsp;
<span class="kw1">set</span> <span class="kw1">statistics</span> <span class="kw1">time</span> <span class="kw1">off</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">set nocount on
set statistics time on
select count(*) from TestIndex
where Value = 'A'


select count(*) from TestIndex


set statistics time off</pre></div></div>

<p>Here is the output for that</p>
<p><em> SQL Server Execution Times:<br />
   CPU time = 110 ms,  elapsed time = 115 ms.</p>
<p> SQL Server Execution Times:<br />
   CPU time = 93 ms,  elapsed time = 106 ms.</em></p>
<p>BTW, you will also get an index seek if you specify a WHERE clause like this</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
</pre></td><td class="de1"><pre class="de1"><span class="kw1">select</span> <span class="kw2">count</span><span class="br0">&#40;</span><span class="sy0">*</span><span class="br0">&#41;</span> <span class="kw1">from</span> TestIndex
<span class="kw1">where</span> <span class="kw1">Value</span> <span class="sy0">&gt;</span> <span class="st0">''</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">select count(*) from TestIndex
where Value &gt; ''</pre></div></div>

<p>So there you have it, a seek is not always faster than a scan. And yes, I know that this is a silly example</p>
<p>Okay just for fun now let&#8217;s insert another million rows with the value B</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
</pre></td><td class="de1"><pre class="de1"><span class="kw1">insert</span> TestIndex
<span class="kw1">select</span> <span class="kw1">top</span> <span class="nu0">1000000</span> <span class="st0">'b'</span> <span class="kw1">from</span> master..<span class="me1">spt_values</span> s1
<span class="sy0">CROSS</span> <span class="sy0">JOIN</span> master..<span class="me1">spt_values</span> s2</pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">insert TestIndex
select top 1000000 'b' from master..spt_values s1
CROSS JOIN master..spt_values s2</pre></div></div>

<p>And now run this</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
</pre></td><td class="de1"><pre class="de1"><span class="kw1">select</span> <span class="kw2">count</span><span class="br0">&#40;</span><span class="sy0">*</span><span class="br0">&#41;</span> <span class="kw1">from</span> TestIndex
<span class="kw1">where</span> <span class="kw1">Value</span> in<span class="br0">&#40;</span> <span class="st0">'A'</span>,<span class="st0">'B'</span><span class="br0">&#41;</span>
&nbsp;
&nbsp;
&nbsp;
<span class="kw1">select</span> <span class="kw2">count</span><span class="br0">&#40;</span><span class="sy0">*</span><span class="br0">&#41;</span> <span class="kw1">from</span> TestIndex</pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">select count(*) from TestIndex
where Value in( 'A','B')



select count(*) from TestIndex</pre></div></div>

<p>You will see almost the same exact behaviour as before, a seek for the statement with the WHERE caluse and a scan for the statament without the WHERE clause.<br />
The difference between before and now is that parallelism is being used as you can see in the plan below<br />
</p>
<div class="image_block"><a href="/wp-content/uploads/blogs/DataMgmt/Denis/ADvent/Plan1.PNG?mtime=1357604252"><img alt="" src="/wp-content/uploads/blogs/DataMgmt/Denis/ADvent/Plan1.PNG?mtime=1357604252" width="740" height="272" /></a></div>
<p>Here is the text version of the execution plan</p>
<p> <em> |&#8211;Compute Scalar(DEFINE:([Expr1004]=CONVERT_IMPLICIT(int,[globalagg1006],0)))<br />
       |&#8211;Stream Aggregate(DEFINE:([globalagg1006]=SUM([partialagg1005])))<br />
            |&#8211;Parallelism(Gather Streams)<br />
                 |&#8211;Stream Aggregate(DEFINE:([partialagg1005]=Count(*)))<br />
                      |&#8211;Clustered Index Seek(OBJECT:([Test].[dbo].[TestIndex].[ix_TestIndex]),<br />
	SEEK:([Test].[dbo].[TestIndex].[Value]=&#8217;A&#8217; OR [Test].[dbo].[TestIndex].[Value]=&#8217;B&#8217;) ORDERED FORWARD)</p>
<p>  |&#8211;Compute Scalar(DEFINE:([Expr1004]=CONVERT_IMPLICIT(int,[globalagg1006],0)))<br />
       |&#8211;Stream Aggregate(DEFINE:([globalagg1006]=SUM([partialagg1005])))<br />
            |&#8211;Parallelism(Gather Streams)<br />
                 |&#8211;Stream Aggregate(DEFINE:([partialagg1005]=Count(*)))<br />
                      |&#8211;Clustered Index Scan(OBJECT:([Test].[dbo].[TestIndex].[ix_TestIndex]))</em></p>
<p>If we set the max degree of parallelism to 1 by using the MAXDOP option we get the same plan as before</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
</pre></td><td class="de1"><pre class="de1"><span class="kw1">select</span> <span class="kw2">count</span><span class="br0">&#40;</span><span class="sy0">*</span><span class="br0">&#41;</span> <span class="kw1">from</span> TestIndex
<span class="kw1">where</span> <span class="kw1">Value</span> <span class="sy0">=</span> <span class="st0">'A'</span>
<span class="kw1">option</span><span class="br0">&#40;</span>maxdop <span class="nu0">1</span><span class="br0">&#41;</span>
&nbsp;
&nbsp;
<span class="kw1">select</span> <span class="kw2">count</span><span class="br0">&#40;</span><span class="sy0">*</span><span class="br0">&#41;</span> <span class="kw1">from</span> TestIndex
<span class="kw1">option</span><span class="br0">&#40;</span>maxdop <span class="nu0">1</span><span class="br0">&#41;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">select count(*) from TestIndex
where Value = 'A'
option(maxdop 1)


select count(*) from TestIndex
option(maxdop 1)</pre></div></div>

<p>Here is the graphical plan<br />
</p>
<div class="image_block"><a href="/wp-content/uploads/blogs/DataMgmt/Denis/ADvent/Plan2.PNG?mtime=1357604265"><img alt="" src="/wp-content/uploads/blogs/DataMgmt/Denis/ADvent/Plan2.PNG?mtime=1357604265" width="681" height="323" /></a></div>
<p>Here is the text version of the plan</p>
<p>  <em>|&#8211;Compute Scalar(DEFINE:([Expr1004]=CONVERT_IMPLICIT(int,[Expr1005],0)))<br />
       |&#8211;Stream Aggregate(DEFINE:([Expr1005]=Count(*)))<br />
            |&#8211;Clustered Index Seek(OBJECT:([Test].[dbo].[TestIndex].[ix_TestIndex]),<br />
	SEEK:([Test].[dbo].[TestIndex].[Value]=&#8217;A&#8217;) ORDERED FORWARD)</p>
<p>  |&#8211;Compute Scalar(DEFINE:([Expr1004]=CONVERT_IMPLICIT(int,[Expr1007],0)))<br />
       |&#8211;Stream Aggregate(DEFINE:([Expr1007]=Count(*)))<br />
            |&#8211;Clustered Index Scan(OBJECT:([Test].[dbo].[TestIndex].[ix_TestIndex]))</em></p>
<p>So there you have it, nothing earth-shattering in this post but still nice to know that a seek is not always faster than a scan</p>
<p></p>
<p>*** <strong>If you have a SQL related question try our <a href="http://forum.lessthandot.com/viewforum.php?f=17">Microsoft SQL Server Programming</a> forum or our <a href="http://forum.lessthandot.com/viewforum.php?f=22">Microsoft SQL Server Admin</a> forum</strong><ins></ins></p>
]]></content:encoded>
			<wfw:commentRss>/index.php/datamgmt/datadesign/is-an-index-scan-always-better-or-faster/feed/</wfw:commentRss>
		<slash:comments>1</slash:comments>
		</item>
	</channel>
</rss>
