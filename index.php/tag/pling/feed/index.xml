<?xml version="1.0" encoding="UTF-8"?><rss version="2.0"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:atom="http://www.w3.org/2005/Atom"
	xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
	xmlns:slash="http://purl.org/rss/1.0/modules/slash/"
	>

<channel>
	<title>pling &#8211; LessthanDot</title>
	<atom:link href="/index.php/tag/pling/feed/" rel="self" type="application/rss+xml" />
	<link>/</link>
	<description>A Technical Community for IT Professionals</description>
	<lastBuildDate>Sat, 09 Mar 2019 12:50:36 +0000</lastBuildDate>
	<language>en-US</language>
	<sy:updatePeriod>hourly</sy:updatePeriod>
	<sy:updateFrequency>1</sy:updateFrequency>
	<generator>https://wordpress.org/?v=4.6.1</generator>
	<item>
		<title>Visual Studio 2010 Concurrency Profiling And Parallel Programming</title>
		<link>/index.php/architect/enterprisearchitecture/visual-studio-2010-concurrency-profiling/</link>
		<comments>/index.php/architect/enterprisearchitecture/visual-studio-2010-concurrency-profiling/#comments</comments>
		<pubDate>Sun, 14 Mar 2010 11:03:56 +0000</pubDate>
		<dc:creator><![CDATA[SQLDenis]]></dc:creator>
				<category><![CDATA[Enterprise Architecture]]></category>
		<category><![CDATA[c#]]></category>
		<category><![CDATA[concurrency]]></category>
		<category><![CDATA[multi core]]></category>
		<category><![CDATA[parallel programming]]></category>
		<category><![CDATA[pling]]></category>
		<category><![CDATA[profiling]]></category>

		<guid isPermaLink="false">/index.php/2010/03/visual-studio-2010-concurrency-profiling/</guid>
		<description><![CDATA[Visual Studio 2010 and .NET 4.0 are almost released, one of the new things that ship with this release is Parallel Programming. Since you can't buy a machine anymore with just one core it is time that we developers get intimate with concurrent programmi&#8230;]]></description>
				<content:encoded><![CDATA[<p>Visual Studio 2010 and .NET 4.0 are almost released, one of the new things that ship with this release is Parallel Programming. Since you can&#8217;t buy a machine anymore with just one core it is time that we developers get intimate with concurrent programming. I decided to play around with this a little today, this is not a real technical post, I mostly show you how you can get started and what new tools are available.</p>
<h2>Getting to know Parallel Programming with the .NET Framework 4</h2>
<p>The best way to learn about new additions to a framework is to look at some code. There are 22 samples for Parallel Programming with the .NET Framework 4 available on the  msdn code library. You can download the .NET Framework 4 Parallel Programming samples here: <a href="http://code.msdn.microsoft.com/ParExtSamples">Samples for Parallel Programming with the .NET Framework 4</a></p>
<p>Here is a screen shot of the Mandelbrot Fractals sample.<br />
<img src="/wp-content/uploads/blogs/Architect//Fractal.png" alt="" title="" width="407" height="405" /></p>
<p>If you run the sample on a 2 core machine you will see that the parallel execution is about 60% faster than the sequential one.</p>
<p>After I was done with the Mandelbrot Fractals sample, I decided to open up the ComputePi sample, after all it is Pi day today (2010.3.14)</p>
<p>Here is the code for the different ways of calculating Pi which is part of the ComputePi sample.</p>
<p><strong>Estimates the value of PI using a LINQ-based implementation</strong>.</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="csharp"><thead><tr><td colspan="2"  class="head">C#</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
</pre></td><td class="de1"><pre class="de1">&nbsp;
&nbsp; &nbsp; <span class="kw1">static</span> <span class="kw4">double</span> SerialLinqPi<span class="br0">&#40;</span><span class="br0">&#41;</span>
&nbsp; &nbsp; <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw4">double</span> step <span class="sy0">=</span> <span class="nu0">1.0</span> <span class="sy0">/</span> <span class="br0">&#40;</span><span class="kw4">double</span><span class="br0">&#41;</span>num_steps<span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">return</span> <span class="br0">&#40;</span><span class="kw1">from</span> i <span class="kw1">in</span> Enumerable<span class="sy0">.</span><span class="me1">Range</span><span class="br0">&#40;</span><span class="nu0">0</span>, num_steps<span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; let x <span class="sy0">=</span> <span class="br0">&#40;</span>i <span class="sy0">+</span> <span class="nu0">0.5</span><span class="br0">&#41;</span> <span class="sy0">*</span> step
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">select</span> <span class="nu0">4.0</span> <span class="sy0">/</span> <span class="br0">&#40;</span><span class="nu0">1.0</span> <span class="sy0">+</span> x <span class="sy0">*</span> x<span class="br0">&#41;</span><span class="br0">&#41;</span><span class="sy0">.</span><span class="me1">Sum</span><span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="sy0">*</span> step<span class="sy0">;</span>
&nbsp; &nbsp; <span class="br0">&#125;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse"> 
    static double SerialLinqPi()
    {
        double step = 1.0 / (double)num_steps;
        return (from i in Enumerable.Range(0, num_steps)
                let x = (i + 0.5) * step
                select 4.0 / (1.0 + x * x)).Sum() * step;
    }</pre></div></div>

<p><strong>Estimates the value of PI using a PLINQ-based implementation.</strong></p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="csharp"><thead><tr><td colspan="2"  class="head">C#</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
</pre></td><td class="de1"><pre class="de1">&nbsp; &nbsp; 
&nbsp; &nbsp; <span class="kw1">static</span> <span class="kw4">double</span> ParallelLinqPi<span class="br0">&#40;</span><span class="br0">&#41;</span>
&nbsp; &nbsp; <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw4">double</span> step <span class="sy0">=</span> <span class="nu0">1.0</span> <span class="sy0">/</span> <span class="br0">&#40;</span><span class="kw4">double</span><span class="br0">&#41;</span>num_steps<span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">return</span> <span class="br0">&#40;</span><span class="kw1">from</span> i <span class="kw1">in</span> ParallelEnumerable<span class="sy0">.</span><span class="me1">Range</span><span class="br0">&#40;</span><span class="nu0">0</span>, num_steps<span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; let x <span class="sy0">=</span> <span class="br0">&#40;</span>i <span class="sy0">+</span> <span class="nu0">0.5</span><span class="br0">&#41;</span> <span class="sy0">*</span> step
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">select</span> <span class="nu0">4.0</span> <span class="sy0">/</span> <span class="br0">&#40;</span><span class="nu0">1.0</span> <span class="sy0">+</span> x <span class="sy0">*</span> x<span class="br0">&#41;</span><span class="br0">&#41;</span><span class="sy0">.</span><span class="me1">Sum</span><span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="sy0">*</span> step<span class="sy0">;</span>
&nbsp; &nbsp; <span class="br0">&#125;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">    
    static double ParallelLinqPi()
    {
        double step = 1.0 / (double)num_steps;
        return (from i in ParallelEnumerable.Range(0, num_steps)
                let x = (i + 0.5) * step
                select 4.0 / (1.0 + x * x)).Sum() * step;
    }</pre></div></div>

<p><strong>Estimates the value of PI using a for loop.</strong></p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="csharp"><thead><tr><td colspan="2"  class="head">C#</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
</pre></td><td class="de1"><pre class="de1">&nbsp; &nbsp; 
&nbsp; &nbsp; <span class="kw1">static</span> <span class="kw4">double</span> SerialPi<span class="br0">&#40;</span><span class="br0">&#41;</span>
&nbsp; &nbsp; <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw4">double</span> sum <span class="sy0">=</span> <span class="nu0">0.0</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw4">double</span> step <span class="sy0">=</span> <span class="nu0">1.0</span> <span class="sy0">/</span> <span class="br0">&#40;</span><span class="kw4">double</span><span class="br0">&#41;</span>num_steps<span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">for</span> <span class="br0">&#40;</span><span class="kw4">int</span> i <span class="sy0">=</span> <span class="nu0">0</span><span class="sy0">;</span> i <span class="sy0">&lt;</span> num_steps<span class="sy0">;</span> i<span class="sy0">++</span><span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw4">double</span> x <span class="sy0">=</span> <span class="br0">&#40;</span>i <span class="sy0">+</span> <span class="nu0">0.5</span><span class="br0">&#41;</span> <span class="sy0">*</span> step<span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; sum <span class="sy0">=</span> sum <span class="sy0">+</span> <span class="nu0">4.0</span> <span class="sy0">/</span> <span class="br0">&#40;</span><span class="nu0">1.0</span> <span class="sy0">+</span> x <span class="sy0">*</span> x<span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">return</span> step <span class="sy0">*</span> sum<span class="sy0">;</span>
&nbsp; &nbsp; <span class="br0">&#125;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">    
    static double SerialPi()
    {
        double sum = 0.0;
        double step = 1.0 / (double)num_steps;
        for (int i = 0; i &lt; num_steps; i++)
        {
            double x = (i + 0.5) * step;
            sum = sum + 4.0 / (1.0 + x * x);
        }
        return step * sum;
    }</pre></div></div>

<p><strong>Estimates the value of PI using a Parallel.For.</strong></p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="csharp"><thead><tr><td colspan="2"  class="head">C#</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
</pre></td><td class="de1"><pre class="de1">&nbsp; &nbsp; <span class="kw1">static</span> <span class="kw4">double</span> ParallelPi<span class="br0">&#40;</span><span class="br0">&#41;</span>
&nbsp; &nbsp; <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw4">double</span> sum <span class="sy0">=</span> <span class="nu0">0.0</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw4">double</span> step <span class="sy0">=</span> <span class="nu0">1.0</span> <span class="sy0">/</span> <span class="br0">&#40;</span><span class="kw4">double</span><span class="br0">&#41;</span>num_steps<span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw4">object</span> monitor <span class="sy0">=</span> <span class="kw3">new</span> <span class="kw4">object</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; Parallel<span class="sy0">.</span><span class="kw1">For</span><span class="br0">&#40;</span><span class="nu0">0</span>, num_steps, <span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="sy0">=&gt;</span> <span class="nu0">0.0</span>, <span class="br0">&#40;</span>i, state, local<span class="br0">&#41;</span> <span class="sy0">=&gt;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw4">double</span> x <span class="sy0">=</span> <span class="br0">&#40;</span>i <span class="sy0">+</span> <span class="nu0">0.5</span><span class="br0">&#41;</span> <span class="sy0">*</span> step<span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">return</span> local <span class="sy0">+</span> <span class="nu0">4.0</span> <span class="sy0">/</span> <span class="br0">&#40;</span><span class="nu0">1.0</span> <span class="sy0">+</span> x <span class="sy0">*</span> x<span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span>, local <span class="sy0">=&gt;</span> <span class="br0">&#123;</span> <span class="kw1">lock</span> <span class="br0">&#40;</span>monitor<span class="br0">&#41;</span> sum <span class="sy0">+=</span> local<span class="sy0">;</span> <span class="br0">&#125;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">return</span> step <span class="sy0">*</span> sum<span class="sy0">;</span>
&nbsp; &nbsp; <span class="br0">&#125;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">    static double ParallelPi()
    {
        double sum = 0.0;
        double step = 1.0 / (double)num_steps;
        object monitor = new object();
        Parallel.For(0, num_steps, () =&gt; 0.0, (i, state, local) =&gt;
        {
            double x = (i + 0.5) * step;
            return local + 4.0 / (1.0 + x * x);
        }, local =&gt; { lock (monitor) sum += local; });
        return step * sum;
    }</pre></div></div>

<p><strong>Estimates the value of PI using a Parallel.ForEach and a range partitioner.</strong></p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="csharp"><thead><tr><td colspan="2"  class="head">C#</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
</pre></td><td class="de1"><pre class="de1">&nbsp; &nbsp; 
&nbsp; &nbsp; <span class="kw1">static</span> <span class="kw4">double</span> ParallelPartitionerPi<span class="br0">&#40;</span><span class="br0">&#41;</span>
&nbsp; &nbsp; <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw4">double</span> sum <span class="sy0">=</span> <span class="nu0">0.0</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw4">double</span> step <span class="sy0">=</span> <span class="nu0">1.0</span> <span class="sy0">/</span> <span class="br0">&#40;</span><span class="kw4">double</span><span class="br0">&#41;</span>num_steps<span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw4">object</span> monitor <span class="sy0">=</span> <span class="kw3">new</span> <span class="kw4">object</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; Parallel<span class="sy0">.</span><span class="kw1">ForEach</span><span class="br0">&#40;</span>Partitioner<span class="sy0">.</span><span class="me1">Create</span><span class="br0">&#40;</span><span class="nu0">0</span>, num_steps<span class="br0">&#41;</span>, <span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="sy0">=&gt;</span> <span class="nu0">0.0</span>, <span class="br0">&#40;</span>range, state, local<span class="br0">&#41;</span> <span class="sy0">=&gt;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">for</span> <span class="br0">&#40;</span><span class="kw4">int</span> i <span class="sy0">=</span> range<span class="sy0">.</span><span class="me1">Item1</span><span class="sy0">;</span> i <span class="sy0">&lt;</span> range<span class="sy0">.</span><span class="me1">Item2</span><span class="sy0">;</span> i<span class="sy0">++</span><span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw4">double</span> x <span class="sy0">=</span> <span class="br0">&#40;</span>i <span class="sy0">+</span> <span class="nu0">0.5</span><span class="br0">&#41;</span> <span class="sy0">*</span> step<span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; local <span class="sy0">+=</span> <span class="nu0">4.0</span> <span class="sy0">/</span> <span class="br0">&#40;</span><span class="nu0">1.0</span> <span class="sy0">+</span> x <span class="sy0">*</span> x<span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">return</span> local<span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span>, local <span class="sy0">=&gt;</span> <span class="br0">&#123;</span> <span class="kw1">lock</span> <span class="br0">&#40;</span>monitor<span class="br0">&#41;</span> sum <span class="sy0">+=</span> local<span class="sy0">;</span> <span class="br0">&#125;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">return</span> step <span class="sy0">*</span> sum<span class="sy0">;</span>
&nbsp; &nbsp; <span class="br0">&#125;</span>
<span class="br0">&#125;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">    
    static double ParallelPartitionerPi()
    {
        double sum = 0.0;
        double step = 1.0 / (double)num_steps;
        object monitor = new object();
        Parallel.ForEach(Partitioner.Create(0, num_steps), () =&gt; 0.0, (range, state, local) =&gt;
        {
            for (int i = range.Item1; i &lt; range.Item2; i++)
            {
                double x = (i + 0.5) * step;
                local += 4.0 / (1.0 + x * x);
            }
            return local;
        }, local =&gt; { lock (monitor) sum += local; });
        return step * sum;
    }
}</pre></div></div>

<p>Here are the results when you run the sample. The first column is the time in seconds and the second column has the method name.</p>
<pre>03.3369869: SerialLinqPi
02.1516130: ParallelLinqPi
01.0522855: SerialPi
00.6457441: ParallelPi
00.7098180: ParallelPartitionerPi</pre>
<p>Again these were from my dual core laptop, you might get a bigger difference if you run it on a quad core box.</p>
<h2>Profiling Performance</h2>
<p>Visual Studio 2010 ships with a couple of tools that will make your life easier if you do parallel programming. Launch the Performance Wizard from Tools&#8211;>Launch Performance Wizard<br />
<br /><img src="/wp-content/uploads/blogs/Architect//LaunchWizard.PNG" alt="" title="" width="479" height="217" /></p>
<p>After that a wizard will launch and you will see a window like the one in the sreenshot below<br />
<br /><img src="/wp-content/uploads/blogs/Architect//Profile Wizard.png" alt="" title="" width="647" height="556" /></p>
<p>Pick concurrency and visualize the behaviour of a multithreaded application.</p>
<p>After you are done, start your app and when you close the app, reports will be generated.<br />
If you don&#8217;t see the reports then do the following; click on View&#8211;>Other Windows&#8211;>Performance Explorer. </p>
<p>FYI, You need to run as admin to generate these report and if you are on a 64bit machine then you need to set the platform target to x86 in order to be able to generate these reports. I was greeted with the following message: <em>To enable complete call stacks on x64 platforms, executive paging must be disabled. A reboot is then required. To make this change, click &#8220;Yes&#8221;, save your work, and then reboot. For more information, see http://go.microsoft.com/fwlink/?LinkId=157265 </em>. After I rebooted everything worked.</p>
<p>There are 3 types of reports that you will see. Here is what the CPU Utilization report looks like.<br />
<img src="/wp-content/uploads/blogs/Architect//CPUUtil.PNG" alt="" title="" width="459" height="293" /></p>
<p>There is a report for threads<br />
<img src="/wp-content/uploads/blogs/Architect//Threads.PNG" alt="" title="" width="741" height="596" /></p>
<p>Finally there is also a report for cores<br />
<img src="/wp-content/uploads/blogs/Architect//Cores.PNG" alt="" title="" width="662" height="522" /></p>
<p>Instead of having 20 images embedded I decided that a video would be more useful. This video is about 1 minute and 52 seconds and it shows you what the tool looks like when I am clicking around in it.</p>
<p>Here is the HD Video version, I would suggest you click on the video and watch in on YouTube in 720P full screen format<br />
[video:youtube:Bofk3ecJOtk]</p>
<p></p>
<h2>Learning more about Concurrency Profiling and Parallel Programming</h2>
<p>To finalize this post, here are some links to technical resources that will help you with  Concurrency Profiling and Parallel Programming.</p>
<p>The <a href="http://social.msdn.microsoft.com/forums/en-us/vstsprofiler">Visual Studio Performance Tools (Profiler) msdn forum</a></p>
<p>The <a href="http://blogs.msdn.com/visualizeparallel/">Parallel Computing, Profiling and Debugging blog</a></p>
<p>Below is a 10 part blog post series by Reed Copsey, Jr about parallelism in .net</p>
<p><a title=Introduction href="http://reedcopsey.com/2010/01/19/parallelism-in-net-introduction/">Introduction</a></p>
<p><a title="Part 1, Decomposition" href="http://reedcopsey.com/2010/01/19/parallelism-in-net-part-1-decomposition/">Part 1, Decomposition</a><u><font color=#0066cc>&nbsp;</font></u></p>
<p><a href="http://reedcopsey.com/2010/01/20/parallelism-in-net-part-2-simple-imperative-data-parallelism/">Part 2, Simple Imperative Data Parallelism</a></p>
<p><a href="http://reedcopsey.com/2010/01/22/parallelism-in-net-part-3-imperative-data-parallelism-early-termination/">Part 3, Imperative Data Parallelism: Early Termination</a></p>
<p><a href="http://reedcopsey.com/2010/01/22/parallelism-in-net-part-4-imperative-data-parallelism-aggregation/">Part 4, Imperative Data Parallelism: Aggregation</a></p>
<p><a href="http://reedcopsey.com/2010/01/26/parallelism-in-net-part-5-partitioning-of-work/">Part 5, Partitioning of Work</a></p>
<p><a href="http://reedcopsey.com/2010/01/26/parallelism-in-net-part-6-declarative-data-parallelism/">Part 6, Declarative Data Parallelism</a></p>
<p><a href="http://reedcopsey.com/2010/01/28/parallelism-in-net-part-7-some-differences-between-plinq-and-linq-to-objects/">Part 7, Some Differences between PLINQ and LINQ to Objects</a></p>
<p><a href="http://reedcopsey.com/2010/02/03/parallelism-in-net-part-8-plinqs-forall-method/">Part 8, PLINQ’s ForAll Method</a></p>
<p><a href="http://reedcopsey.com/2010/02/11/parallelism-in-net-part-9-configuration-in-plinq-and-tpl/">Part 9, Configuration in PLINQ and TPL</a></p>
<p><a href="http://reedcopsey.com/2010/02/17/parallelism-in-net-part-10-cancellation-in-plinq-and-the-parallel-class/">Part 10, Cancellation in PLINQ and the Parallel class</a></p>
<p>So hopefully this post will spark your interest and you will take a look at these interesting technologies and tools.</p>
<p>Happy &#960; day ,and today is also Albert Einstein&#8217;s birthday.</p>
<p><img src="/wp-content/uploads/blogs/Architect//Pi_Pie.jpg" alt="" title="" width="577" height="576" /></p>
]]></content:encoded>
			<wfw:commentRss>/index.php/architect/enterprisearchitecture/visual-studio-2010-concurrency-profiling/feed/</wfw:commentRss>
		<slash:comments>3</slash:comments>
		</item>
	</channel>
</rss>
