<?xml version="1.0" encoding="UTF-8"?><rss version="2.0"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:atom="http://www.w3.org/2005/Atom"
	xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
	xmlns:slash="http://purl.org/rss/1.0/modules/slash/"
	>

<channel>
	<title>c# &#8211; LessthanDot</title>
	<atom:link href="/index.php/tag/c/feed/" rel="self" type="application/rss+xml" />
	<link>/</link>
	<description>A Technical Community for IT Professionals</description>
	<lastBuildDate>Sat, 09 Mar 2019 12:50:36 +0000</lastBuildDate>
	<language>en-US</language>
	<sy:updatePeriod>hourly</sy:updatePeriod>
	<sy:updateFrequency>1</sy:updateFrequency>
	<generator>https://wordpress.org/?v=4.6.1</generator>
	<item>
		<title>Compiled list of C# + .Net Features</title>
		<link>/index.php/desktopdev/mstech/compiled-list-of-c-net-features/</link>
		<comments>/index.php/desktopdev/mstech/compiled-list-of-c-net-features/#comments</comments>
		<pubDate>Mon, 07 Sep 2015 10:16:29 +0000</pubDate>
		<dc:creator><![CDATA[Eli Weinstock-Herman (tarwn)]]></dc:creator>
				<category><![CDATA[C#]]></category>
		<category><![CDATA[Microsoft Technologies]]></category>
		<category><![CDATA[.net]]></category>
		<category><![CDATA[c#]]></category>

		<guid isPermaLink="false">/?p=4112</guid>
		<description><![CDATA[We have talked about doing this at work for a while, so I finally sat down this weekend and tried to make a list of C# features that the team could share. We intend to use this to help gauge who the best people are to ask questions in different areas (C# isn&#8217;t our only [&#8230;]]]></description>
				<content:encoded><![CDATA[<p>We have talked about doing this at work for a while, so I finally sat down this weekend and tried to make a list of C# features that the team could share. We intend to use this to help gauge who the best people are to ask questions in different areas (C# isn&#8217;t our only list) as well as a list of things to learn when you&#8217;re bored (after crossing off all the ones you know). I added in some of the .Net framework features to round the list off.</p>
<p>Based on their relevance in our team, I left some grouped together (like unsafe code and WPF) and broke others into details (ASP.Net). Do you see any I missed? How much of the list have you worked with in production?</p>
<h1>C# Language Features</h1>
<p><b>Statements:</b></p>
<ul>
<li>[C# 1.0] Iteration: for, foreach, while, do</li>
<li>[C# 1.0] Jump: break, continue, goto, return</li>
<li>[C# 1.0] Empty statement</li>
<li>[C# 1.0] Labeled statements</li>
<li>[C# 1.0] Conditional: if elseif else switch case default</li>
<li>[C# 1.0] Catching exceptions: try catch finally</li>
<li>[C# 1.0] Checked/Unchecked statements</li>
<li>[C# 1.0] lock</li>
<li>[C# 1.0] using</li>
</ul>
<p><b>Operators:</b></p>
<ul>
<li>[C# 1.0] Arithmetic + &#8211; * / %</li>
<li>[C# 1.0] Logical Comparisons &#038; | ^ ! ~ &#038;&#038; || true false</li>
<li>[C# 1.0] String concatenation</li>
<li>[C# 1.0] Increment/Decrement (++x &#8211;x x++ x&#8211;)</li>
<li>[C# 1.0] Binary Shift (<< >>)</li>
<li>[C# 1.0] Comparison (==   !=   <   >   <=   >=)</li>
<li>[C# 1.0] Assignment (=   +=   -=   *=   /=   %=   &#038;=   |=   ^=   <<=   >>=)</li>
<li>[C# 1.0] Indexing []</li>
<li>[C# 1.0] Cast ()</li>
<li>[C# 1.0] Conditional/Ternary (condition)?(if-true):(if-false)</li>
<li>[C# 2.0] Null Coalescing: ??</li>
<li>[C# 6.0] Null Propagation: ?.</li>
<li>[C# 1.0] Type Information as is sizeof typeof</li>
</ul>
<p><b>Language Features:</b></p>
<ul>
<li>[C# 1.0] Arrays</li>
<li>[C# 1.0] Operator Overloading</li>
<li>[C# 1.0] Inheritance: extends base</li>
<li>[C# 1.0] Hiding: new</li>
<li>[C# 1.0] Access modifiers: public protected private internal &#8220;protected internal&#8221;</li>
<li>[C# 1.0] Modifiers &#8211; static instance const virtual overrides sealed extern</li>
<li>[C# 1.0] Property Declaration</li>
<li>[C# 1.0] Constructors</li>
<li>[C# 1.0] Static Constructors</li>
<li>[C# 1.0] Destructors</li>
<li>[C# 1.0] Nested Classes</li>
<li>[C# 1.0] Events, Declaration and Usage</li>
<li>[C# 1.0] Indexers</li>
<li>[C# 1.0] Properties</li>
<li>[C# 1.0] Interfaces</li>
<li>[C# 1.0] Structs</li>
<li>[C# 1.0] Enums</li>
<li>[C# 1.0] Delegates</li>
<li>[C# 1.0] Exceptions</li>
<li>[C# 1.0] Attributes</li>
<li>[C# 1.0] Unsafe Code: unsafe contexts, pointers, fixed/moveable variables, stack allocation</li>
<li>[C# 1.0] Boxing and Unboxing</li>
<li>[C# 1.0] Application Startup/Termination: Main, termination status code</li>
<li>[C# 1.0] Preprocessor Conditionals: #if #elif #else #endif</li>
<li>[C# 1.0] Preprocessor Declarations: #define #undef</li>
<li>[C# 1.0] Preprocessor Debug: #error</li>
<li>[C# 1.0] Preprocessor Region: #region #endregion</li>
<li>[C# 1.0] Preprocessor Region: #line</li>
<li>[C# 2.0] Preprocessor Region: #pragma warning</li>
<li>[C# 2.0] Generics &#8211; Usage</li>
<li>[C# 2.0] Generic Class Declaration</li>
<li>[C# 2.0] Generic Constraints: &#8220;where T&#8221;</li>
<li>[C# 2.0] Anonymous methods (inline delegates, closures)</li>
<li>[C# 2.0] Iterators: yield</li>
<li>[C# 2.0] Static Classes</li>
<li>[C# 2.0] Partial types: &#8220;public partial class XYZ&#8221;</li>
<li>[C# 2.0] Nullable types: &#8220;int? x = null&#8221;</li>
<li>[C# 2.0] namespace aliases: &#8220;using xyz = System.IO;&#8221;</li>
<li>[C# 2.0] Default value expression: default()</li>
<li>[C# 2.0] Conditional attribute</li>
<li>[C# 2.0] Fixed size buffers</li>
<li>[C# 2.0] Delegate Covariance/Contravariance</li>
<li>[C# 2.0] Friend Assemblies: aka &#8220;oops we made everything internal&#8221;</li>
<li>[C# 3.0] Implicitly Typed Local Variables: var</li>
<li>[C# 3.0] Extension Methods</li>
<li>[C# 3.0] Lambda expressions</li>
<li>[C# 3.0] Generic method Type Inference</li>
<li>[C# 3.0] Object and Collection Initializers</li>
<li>[C# 3.0] Anonymouse types</li>
<li>[C# 3.0] Implicitly typed arrays</li>
<li>[C# 3.0] Query Expressions: from into in join let orderby group select</li>
<li>[C# 3.0] Automatically implemented properties: &#8220;public int X { get; set; }&#8221;</li>
<li>[C# 3.0] Partial method declaration</li>
<li>[C# 4.0] Covariance, Contravariance</li>
<li>[C# 4.0] Dynamic Dispatch: dynamic</li>
<li>[C# 4.0] Named Arguments and Optional Parameters (for Methods)</li>
<li>[C# 5.0] Async modified: async await</li>
<li>[C# 5.0] Caller Information Attributes</li>
<li>[C# 6.0] Roslyn &#8211; Compiler-as-a-service</li>
<li>[C# 6.0] Initializers for Automatic Properties</li>
<li>[C# 6.0] Getter-only Automatic Properties</li>
<li>[C# 6.0] Lambda Expressions for Method Declaration</li>
<li>[C# 6.0] Lambda Expressions for Property Body Declaration</li>
<li>[C# 6.0] Using static</li>
<li>[C# 6.0] Null-conditional operators</li>
<li>[C# 6.0] String interpolation</li>
<li>[C# 6.0] nameof</li>
<li>[C# 6.0] Index Initializers syntax improvement</li>
<li>[C# 6.0] Exception filters</li>
<li>[C# 6.0] Exception filters</li>
</ul>
<p>Where&#8217;s LINQ???!? In the .Net Framework of course:</p>
<h1>.Net Framework Features</h1>
<p><b>.Net 1.0</b></p>
<ul>
<li>Collections: ArrayList, HashTable, Dictionary</li>
<li>Threading &#8211; ThreadPool, Thread, ThreadStart</li>
<li>Threading &#8211; Synchronized Regions: SynchronizationAttribute, Monitor (lock/SyncLock)</li>
<li>Threading &#8211; Manual Synchronization: Interlocked, WaitHandle/Mutex, ManualResetEvent, AutoResetEvent</li>
<li>ADO.Net &#8211; Database access using: Connection, Command, DataReader, DbParameter</li>
<li>ASP.Net &#8211; WebForms</li>
<li>ASP.Net &#8211; ASMX</li>
<li>ASP.Net &#8211; ASHX</li>
<li>ASP.Net &#8211; Page output caching</li>
<li>ASP.Net &#8211; Application Cache</li>
</ul>
<p><b>.Net 2.0</b></p>
<ul>
<li>Threading &#8211; BackgroundWorker</li>
<li>Threading &#8211; SynchronizationContext</li>
<li>Generics</li>
<li>Generic Collections: List&lt;T&gt;, Stack&lt;T&gt;, Queue&lt;T&gt;, Dictionary&lt;TKey,TValue&gt;, LinkedList&lt;T&gt;, SortedDictionary&lt;TKey,TValue&gt;, ReadOnlyCollection&lt;T&gt;, etc</li>
<li>Nullable types</li>
<li>Partial Classes</li>
<li>Anonymous methods</li>
<li>Iterators</li>
<li>Data Protection API</li>
<li>Globalization: Culture, CultureInfo</li>
<li>System.Diagnostics.EventLog</li>
<li>System.Net.Mail</li>
<li>ResGen.exe</li>
<li>Threading &#8211; System.Threading.Semaphore</li>
<li>ADO.Net &#8211; Asynchronous Processing</li>
<li>ADO.Net &#8211; SqlBulkCopy</li>
<li>ADO.Net &#8211; SQL Server User Defined Types</li>
<li>ADO.Net &#8211; SQL Server Max Data Types</li>
<li>ADO.Net &#8211; DataSet + DataAdapter Batch Processing</li>
<li>ADO.Net &#8211; Query Notifications</li>
<li>ADO.Net &#8211; Connection Pool Control</li>
<li>ADO.Net &#8211; System.Transactions</li>
<li>ADO.Net &#8211; DataTableReader</li>
<li>ADO.Net &#8211; Multiple Active Result Sets (MARS)</li>
<li>ASP.Net &#8211; Master/Content pages</li>
<li>ASP.Net &#8211; WebParts</li>
<li>ASP.Net &#8211; Skins/Themes</li>
<li>ASP.Net &#8211; Membership</li>
<li>ASP.Net &#8211; Profiles and Custom Profile Properties</li>
<li>ASP.Net &#8211; Cache Profiles</li>
<li>ASP.Net &#8211; Microsoft AJAX</li>
</ul>
<p><b>.Net 3.0</b></p>
<ul>
<li>WCF</li>
<li>WPF</li>
<li>Windows Workflow Foundation 1.0</li>
<li>Windows CardSpace</li>
</ul>
<p><b>.Net 3.5</b></p>
<ul>
<li>.Net Compact Framework</li>
<li>System.AddIn</li>
<li>Collections &#8211; HashSet&lt;T&gt;, SortedSet&lt;T&gt;</li>
<li>Pipes</li>
<li>LINQ</li>
<li>LINQ &#8211; Expression Trees</li>
<li>ADO.Net &#8211; LINQ to SQL</li>
<li>ADO.Net &#8211; LINQ to Dataset</li>
<li>ADO.Net &#8211; Entity Data Model / Entity Framework 1</li>
<li>ASP.Net &#8211; ScriptManager, AJAX Controls</li>
<li>ASP.net &#8211; Dynamic Data</li>
<li>Silverlight</li>
</ul>
<p><b>.Net 4.0</b></p>
<ul>
<li>AppDomain Monitoring</li>
<li>Code Contracts</li>
<li>Covariance and Contravariance in Generics</li>
<li>Memory Mapped Files</li>
<li>Portable Class Libraries</li>
<li>Threading &#8211; PLINQ (pop quiz: does AsParallel() go at the beginning or end of your LINQ statement? Why?)</li>
<li>Threading &#8211; TPL &#8211; System.Threading.Tasks</li>
<li>Threading &#8211; Barrier, SpinWait, SpinLock, CancellationTokens, BlockingCollection&lt;T&gt;</li>
<li>Threading &#8211; ConcurrentStack, ConcurrentQueue, ConcurrentDictionary, ConcurrentBag</li>
<li>Tuples (*sigh*)</li>
<li>IObservable, Reactive Extensions</li>
<li>ADO.Net &#8211; Entity Framework 4</li>
<li>MEF</li>
<li>ASP.Net &#8211; HTML5 form types</li>
<li>ASP.Net &#8211; Bundling and minification</li>
<li>ASP.Net &#8211; WebSocket Support</li>
<li>ASP.Net &#8211; Asynchronous Requests/Responses</li>
<li>ASP.Net &#8211; System.Net.Http</li>
<li>ASP.Net &#8211; MVC</li>
<li>ASP.Net &#8211; Web API 1</li>
<li>ASP.Net &#8211; Extensible Cache &#8211; OutputCacheProvider</li>
<li>ASP.Net &#8211; Extensible Request Validation &#8211; RequestValidator</li>
<li>ASP.Net &#8211; Resource Monitoring &#8211; appDomainResourceMonitoring</li>
</ul>
<p><b>.Net 4.5, 4.6</b></p>
<ul>
<li>AppContext Compatibility Switches</li>
<li>.Net Native</li>
<li>Threading &#8211; TPL Dataflow</li>
<li>System.Net.Http</li>
<li>System.Net.WebSockets</li>
<li>ADO.Net &#8211; SQLClient Streaming Support</li>
<li>ADO.Net &#8211; Async for Connection, DbCommand, DbDataReader, SqlCommand, SqlDataReader, SqlBulkCopy</li>
<li>ADO.Net &#8211; AlwaysOn support</li>
<li>ADO.Net &#8211; LocalDB</li>
<li>ADO.Net &#8211; Entity Framework 5</li>
<li>ADO.Net &#8211; Extended Protection</li>
<li>ASP.Net &#8211; Web API 2</li>
<li>ASP.Net &#8211; OData</li>
</ul>
<p>Whew, and that doesn&#8217;t even count all of the extra nuget packages that are out there now&#8230;It&#8217;s hard to remember how we managed without some of this stuff back in the 1.0 and 1.1 days.</p>
]]></content:encoded>
			<wfw:commentRss>/index.php/desktopdev/mstech/compiled-list-of-c-net-features/feed/</wfw:commentRss>
		<slash:comments>2</slash:comments>
		</item>
		<item>
		<title>Web API 2 &#8211; don&#8217;t get caught with your parameters down</title>
		<link>/index.php/webdev/web-api-2-dont-get-caught-with-your-parameters-down/</link>
		<comments>/index.php/webdev/web-api-2-dont-get-caught-with-your-parameters-down/#respond</comments>
		<pubDate>Wed, 26 Aug 2015 02:51:31 +0000</pubDate>
		<dc:creator><![CDATA[Tahir Khalid]]></dc:creator>
				<category><![CDATA[ASP.NET]]></category>
		<category><![CDATA[C#]]></category>
		<category><![CDATA[Microsoft Technologies]]></category>
		<category><![CDATA[Server Programming]]></category>
		<category><![CDATA[Web Developer]]></category>
		<category><![CDATA[.net 4.5]]></category>
		<category><![CDATA[c#]]></category>
		<category><![CDATA[web api 2]]></category>
		<category><![CDATA[web development]]></category>

		<guid isPermaLink="false">/?p=4130</guid>
		<description><![CDATA[Hi, A quick post for anyone else who has been literally dying from a lack of sleep trying to workout something that should be fairly simple. Quick background:  I got interested in Web API after I decided to build a friend a simple booking website driven by HTML5, jquery and originally an ASP.NET/c# .NET 4 [&#8230;]]]></description>
				<content:encoded><![CDATA[<p>Hi,</p>
<p>A quick post for anyone else who has been literally dying from a lack of sleep trying to workout something that should be fairly simple.</p>
<p>Quick background:  I got interested in Web API after I decided to build a friend a simple booking website driven by HTML5, jquery and originally an ASP.NET/c# .NET 4 Web Service.  Having tested it out I came across a CORS related issue and being very impatient I just could not be bothered to work around it (and lets face it, if you have to do that with CORS its a hack in my book, it just doesn&#8217;t feel right in the dynamic world of Web API 2.x).</p>
<p>So I thought it was about time I looked at Web API proper and as 2.0 had recently surfaced it was a good a time as any to jump on board.</p>
<p>First things first I created a simple test app remembering my good friend Kevin&#8217;s advice to me: &#8220;keep that **** simple or I will come round and choke you out!&#8221; &#8211; no greater words spoken.  I followed this good tutorial to get me started: <a title="Getting Started with ASP.NET Web API 2 (C#)" href="http://www.asp.net/web-api/overview/getting-started-with-aspnet-web-api/tutorial-your-first-web-api" target="_blank"><span style="color: #000000">Getting Started with ASP.NET Web API 2 </span></a><span style="color: #898989"><a title="Getting Started with ASP.NET Web API 2 (C#)" href="http://www.asp.net/web-api/overview/getting-started-with-aspnet-web-api/tutorial-your-first-web-api" target="_blank">(C#)</a> </span>however what seems to be a common occurrence with me, shit just goes wrong!</p>
<p>So what gives? Well I kept getting the dreaded 404 error when I adapted the tutorial to my simple project which consists of the following:</p>
<ul>
<li>HTML page that has a $.getJSON block which calls the uri (for this simple test I did which was to call a parameter less method, well I tried)</li>
<li>Web API 2 project consisting of:
<ul>
<li>simple entity called TestMessage that has a couple of properties like name, messagetext</li>
<li>simple controller inheriting from ApiController and implementing an IHttpActionResult method called GetMessage()</li>
</ul>
</li>
</ul>
<p>So noting too fancy:</p>
<pre>    public class TestMessage
    {
        public string Name{ get; set; }
        public string MessageText { get; set; }
    }</pre>
<p>The controller class:</p>
<pre>public IHttpActionResult GetMessage()
{
   return Ok("{}");
}</pre>
<p>The little gotcha above btw is that you need a return JSON object or null otherwise you will get a failed response at the client side, not the least of my worries though as I was getting another 404 message:</p>
<p>&#8220;No matching action method found in the selected controller&#8221;</p>
<p>Awesome, just what I was expecting!  I thought okay simple enough just a mismatch somewhere but nope wasn&#8217;t anything I tried and I spent days scouring through Stack Overflow (and occasionally crying) and other online resources (part of the problem being I had no clue what my question was to begin with or rather the correct search terms, this came later after much much pain and vomiting).</p>
<p>Some bright spark suggested decorating the method but that completely breaks the new Web API pattern, just didn&#8217;t seem right and felt like a major hack again so I went back to trying to workout how and why I was getting this 404 issue.  I even tried changing my client side call from $.getJSON to the old school $.Ajax making a GET call but still failed until I eventually came across a great post that set me on the right track (but wasn&#8217;t quite the complete solution).</p>
<p>By the way at any point in your development hell you go through this, make sure you get a handle on how to debug Web API using resources like <a title="Get Firebug" href="http://getfirebug.com/" target="_blank">Firebug </a>(Chrome Debugger is good but the layout is too shitty for me and I hate Google anyway) and <a title="Fiddler" href="http://www.telerik.com/fiddler" target="_blank">Fiddler </a>(an awesome tool for composing JSON requests and tracking requests/responses for stuff like Web API).</p>
<p>First I came across this great article by a cool developer called Dave Ward (author of the Encosia website): &#8220;<a title="Using jQuery to POST [FromBody] parameters to Web API" href="http://encosia.com/using-jquery-to-post-frombody-parameters-to-web-api/" target="_blank">Using jQuery to POST [FromBody] parameters to Web API</a>&#8221; however when I followed the steps mentioned by Dave I was still getting some problems namely I was not able to post any kind of JSON data using the getJSON jquery method so what the hell was going on, again?!  Well the first part was resolved by using the [FromBody] as suggested by Dave but something else was still causing my request to turn to shit.</p>
<p><span style="color: #999999"><em>Disclaimer: Shit is a universal word used by developers and has a neutral meaning neither an offensive or defensive word but cool all the same!</em></span></p>
<p>Turns out the JSON data was being passed in as a string and therefore just being ignored and set to null and the solution lay here in this awesome Stack Overflow post: <a title="http://stackoverflow.com/a/29978090" href="http://stackoverflow.com/a/29978090" target="_blank">http://stackoverflow.com/a/29978090</a></p>
<p>Yep everything is awesome now so the second part of the solution was to set the type of the incoming parameter to that of my entity i.e. the TestMessage class I pasted earlier in this post and then in my getJSON jquery method I did something like this:</p>
<pre>        function SendMessage() {
            $.getJSON("http://localhost/api/message/getmessage, { "name": "kermit", 
                      "messagetext": "hello, LTD!" })

                .done(function (data) {
                    $('#message').text("OK");
                })
                .fail(function (jqXHR, textStatus, err) {
                    $('#message').text('Error: ' + err);
                });
        }</pre>
<p>And hey presto all sorted.   What we did here was to create a complex parameter using a JSON format which is then passed through to the controller action GetMessage.  I expanded on this by making my action more complex using the excellent <a title="Newtonsoft Json.Net" href="http://www.newtonsoft.com/json" target="_blank">Newtonsoft JSON library</a> to assist with deserialising the data, inflating an entity and then building up an email message to send out using the <a title="System.Net.Mail Namespace" href="https://msdn.microsoft.com/en-us/library/system.net.mail(v=vs.110).aspx" target="_blank">System.Net.Mail</a> namespace.</p>
<p>Well that worked for me and I hope it works for you!</p>
]]></content:encoded>
			<wfw:commentRss>/index.php/webdev/web-api-2-dont-get-caught-with-your-parameters-down/feed/</wfw:commentRss>
		<slash:comments>0</slash:comments>
		</item>
		<item>
		<title>ASP.NET MVC 4 Razor Starter Guide &#8211; How to avoid punching your Laptop to Death</title>
		<link>/index.php/webdev/uidevelopment/ajax/asp-net-mvc-4-razor-starter/</link>
		<comments>/index.php/webdev/uidevelopment/ajax/asp-net-mvc-4-razor-starter/#comments</comments>
		<pubDate>Mon, 02 Dec 2013 01:16:00 +0000</pubDate>
		<dc:creator><![CDATA[Tahir Khalid]]></dc:creator>
				<category><![CDATA[AJAX]]></category>
		<category><![CDATA[$ not defined]]></category>
		<category><![CDATA[asp.net]]></category>
		<category><![CDATA[c#]]></category>
		<category><![CDATA[mvc 4]]></category>
		<category><![CDATA[razor]]></category>
		<category><![CDATA[starter guide]]></category>

		<guid isPermaLink="false">/index.php/2013/12/asp-net-mvc-4-razor-starter/</guid>
		<description><![CDATA[Hello and welcome to my seocond blog post for LessThanDot (I think) and in this post I will discuss how to setup a working ASP.NET MVC 4 (with Razor) project using the Empty Template.
That's right, a blank project, I didn't want the templates doing the&#8230;]]></description>
				<content:encoded><![CDATA[<p>Hello and welcome to my blog post for LessThanDot and in this post I will discuss how to setup a working ASP.NET MVC 4 (with Razor) project using the Empty Template.</p>
<p>That&#8217;s right, a blank project, I didn&#8217;t want the templates doing the work for me, I wanted to create a lean project that I had control over and I thought this would be easy enough but I was very wrong and tripped over a couple of times so hopefully this post will avoid any confusion and pain for newbies to the world of ASP.NET MVC (and avoid having to punch their laptop to death).</p>
<p>&#8220;Wait you punched your laptop to death?!&#8221;</p>
<p><img src="http://www.vurso.co.uk/ltd/mvc-4-with-razor-starter-guide/punchedmylaptoptodeath.jpg" alt="Punched My Laptop To Death @ vurso.co.uk" width="350" height="85" /></p>
<p>Yes, metaphorically speaking as per my above tweet&#8230;I came close to actually doing it in real life, that&#8217;s how frustrated I was but alas frustration can often lead to lots of fun learning which I did in between the random expletives and &#8220;WTF!&#8221; shouts throughout this process.</p>
<p>So lets start, the first thing you want to do is <span style="background-color: #ffcc00;">NOT USE THE TEMPLATES!</span> I know I know, sounds crazy but trust me you want to do it right and this is the best way my friends.</p>
<p>Start Visual Studio 2012 and then select the ASP.NET MVC 4 project type:</p>
<p><img src="http://www.vurso.co.uk/ltd/mvc-4-with-razor-starter-guide/aspdotnetmvc4projtype.JPG" alt="ASP.NET MVC 4 Project Type" width="350" height="35" /></p>
<p>Give the project a meaningful name and then left-click the OK button to continue. You will then be presented with the following screen (Project Tempaltes), select the <span style="background-color: #99ccff;">Empty</span> Project type and left-click OK to continue.</p>
<p><img src="http://www.vurso.co.uk/ltd/mvc-4-with-razor-starter-guide/projecttemplates.jpg" alt="ASP.NET MVC 4 Project Templates" width="280" height="165" /></p>
<p>If everything goes to plan Visual Studio will start generating your project folders and files and present you with the Empty Solution:</p>
<p><img src="http://www.vurso.co.uk/ltd/mvc-4-with-razor-starter-guide/emptysolution.jpg" alt="ASP.NET MVC 4 Empty Solution" width="185" height="180" /></p>
<p>You will need to do a few things first before the project can actually work (i.e. if you want to use any kind of JavaScript/jquery/ajax and Web Content).  First we need to add some folders so right-click the project name (MvcApplication3 fro example) and select <span style="background-color: #99ccff;">Add &gt; </span><span style="background-color: #99ccff;">New Folder</span> and label it <span style="background-color: #99ccff;">Scripts</span> (or alternatively if you have created another template based MVC site such as the Internet one just drag the Scripts folder from Windws Explorer into your Visual Studio 2012 IDE and drop it onto the project name which will cause Visual Studio 2012 to take a copy of the folder and create it locally with files below your project).</p>
<p>Expand the Views folder which currently only has the web.config file.  Right-click the Views folder and select <span style="background-color: #99ccff;">Add &gt; </span><span style="background-color: #99ccff;">New Folder</span> labelling it <span style="background-color: #99ccff;">Home</span>.  Create another one and call it <span style="background-color: #99ccff;">Shared</span>, these two folders will contain the default views Index.cshtml and _Layout.cshtml (the shared view is like the MasterPage from the previous ASP.NET Form development days, it is used as a global view providing common page structure and other features across your views).</p>
<p>Now the important bit, you need to download the correct Web.Optimization package as its not included in your project and trying to create, build and compile any kind of web enabled page will cause no end of grief no less messages such as:</p>
<p><span style="font-size: 14px; line-height: 18px; background-color: #eeeeee;"><span style="font-family: 'courier new', courier;">Compiler Error Message: CS0103: The name &#8216;Scripts&#8217; does not exist in the current context</span></span></p>
<p>You may also see initial errors such as:</p>
<p><span style="font-size: 14px; line-height: 18px; background-color: #eeeeee;"><span style="font-family: 'courier new', courier;">$ is not defined</span></span></p>
<p>All these can be avoided by running the following command from the nuget package manager command line.  To access the command line you need to display the command window:</p>
<p><img src="http://www.vurso.co.uk/ltd/mvc-4-with-razor-starter-guide/nugetcommandline.jpg" alt="nuget Package Manager Command Line" width="434" height="185" /></p>
<p>Left-clicking the Command Line option will display a new command window at the bottom of your IDE which lets you enter nuget package manager specific commands.  Enter the following command to download the correct package for your project:</p>
<p><img src="http://www.vurso.co.uk/ltd/mvc-4-with-razor-starter-guide/nugetpackageget.jpg" alt="Get nuget package from Visual Studio 2012" width="321" height="100" /></p>
<p>Once the package has been downloaded you will need to configure your <span style="background-color: #99ccff;">Web.Config</span> files, <span style="background-color: #99ccff;">Global.asax</span> file and add a new class in the <span style="background-color: #99ccff;">App_Start</span> folder so lets do this now.</p>
<p>Open up your root Web.config file and add the following line below the other namespaces (in the pages &gt; namespaces section):</p>
<pre style="font-family: Consolas; font-size: 13; color: #dfdfbf; background: #333333;"><span style="font-size: small;">&lt;<span style="color: #efc986;">add</span> namespace="<span style="color: #dfaf8f;">System.Web.WebPages</span>" /&gt;</span><span style="font-family: Consolas;">
</span></pre>
<p>You will also need to do the same for your other web.config file located in the root of the Views folder.</p>
<p>Next you need to modify your <span style="background-color: #99ccff;">Global.asax</span> file located in the root of the project and add the following line below the other statements in the <span style="background-color: #99ccff;">Application_Start()</span> method:</p>
<pre style="font-family: Consolas; font-size: 13; color: #dfdfbf; background: #333333;"><span style="font-size: small;"><span style="color: #8acccf;">BundleConfig</span>.RegisterBundles(<span style="color: #8acccf;">BundleTable</span>.Bundles);</span><span style="font-family: Consolas;">
</span></pre>
<p>Now you need to add a new class called BundleConfig.cs in the App_Start folder.  Modify the using block to look like this:</p>
<pre style="color: #dfdfbf; background-color: #333333; background-position: initial initial; background-repeat: initial initial;"><span style="font-size: small;"><span style="color: #efc986;">using</span> System.Web;
<span style="color: #efc986;">using</span> System.Web.Optimization;</span></pre>
<p>Modify the contents of the class block to look like this:</p>
<pre style="color: #dfdfbf; background-color: #333333; background-position: initial initial; background-repeat: initial initial;"><span style="font-size: small;"><span style="color: #7a987a;">// For more information on Bundling, visit http://go.microsoft.com/fwlink/?LinkId=254725</span>
<span style="color: #efc986;">public</span> <span style="color: #efc986;">static</span> <span style="color: #efc986;">void</span> RegisterBundles(<span style="color: #8acccf;">BundleCollection</span> bundles)
{
    bundles.Add(<span style="color: #efc986;">new</span> <span style="color: #8acccf;">ScriptBundle</span>(<span style="color: #dfaf8f;">"~/bundles/jquery"</span>).Include(
                <span style="color: #dfaf8f;">"~/Scripts/jquery-{version}.js"</span>));
 
    bundles.Add(<span style="color: #efc986;">new</span> <span style="color: #8acccf;">ScriptBundle</span>(<span style="color: #dfaf8f;">"~/bundles/jqueryui"</span>).Include(
                <span style="color: #dfaf8f;">"~/Scripts/jquery-ui-{version}.js"</span>));
 
    bundles.Add(<span style="color: #efc986;">new</span> <span style="color: #8acccf;">ScriptBundle</span>(<span style="color: #dfaf8f;">"~/bundles/jqueryval"</span>).Include(
                <span style="color: #dfaf8f;">"~/Scripts/jquery.unobtrusive*"</span>,
                <span style="color: #dfaf8f;">"~/Scripts/jquery.validate*"</span>));
 
    <span style="color: #7a987a;">// Use the development version of Modernizr to develop with and learn from. Then, when you're</span>
    <span style="color: #7a987a;">// ready for production, use the build tool at http://modernizr.com to pick only the tests you need./</span>
    bundles.Add(<span style="color: #efc986;">new</span> <span style="color: #8acccf;">ScriptBundle</span>(<span style="color: #dfaf8f;">"~/bundles/modernizr"</span>).Include(
                <span style="color: #dfaf8f;">"~/Scripts/modernizr-*"</span>));
}</span></pre>
<p>Now save the file and we need to create a controller file and two view pages.  Right-click the Controllers folder and left-click on <span style="background-color: #99ccff;">Add &gt; Controller&#8230;</span> to display the New Controller dialog:</p>
<p><img src="http://www.vurso.co.uk/ltd/mvc-4-with-razor-starter-guide/newcontroller.jpg" alt="New MVC 4 Controller" width="280" height="145" /></p>
<p>Give it the name <span style="background-color: #99ccff;">HomeController</span> and left-click on Add to continue.  Now we need to create the Index view the controller will work with.  Before we do that we need to create a view that will <a title="ASP.NET MVC 3: Layouts with Razor" href="http://weblogs.asp.net/scottgu/archive/2010/10/22/asp-net-mvc-3-layouts.aspx" target="_blank">&#8220;automagically&#8221; assign the same razor layout</a> to all your views so right-click the <span style="background-color: #99ccff;">Views</span> folder and left-click on <span style="background-color: #99ccff;">Add &gt; View&#8230;</span> (VS 2012 is clever enough to recognise the context you&#8217;re in, in this case the Views folder).  The Add View dialog box will appear:</p>
<p><img src="http://www.vurso.co.uk/ltd/mvc-4-with-razor-starter-guide/addview.jpg" alt="ASP.NET MVC 4 Add View" width="200" height="252" /></p>
<p>Make sure you un-tick the &#8220;Use a layout or master page:&#8221; checkbox (as all your views will be using this <span style="background-color: #99ccff;">_ViewStart</span> file).</p>
<p>Now modify the file to look like this:</p>
<pre style="color: #dfdfbf; background-color: #333333; background-position: initial initial; background-repeat: initial initial;"><span style="font-size: small;">@{
    Layout = <span style="color: #dfaf8f;">"~/Views/Shared/_Layout.cshtml"</span>;
}</span></pre>
<p>Next we need to create the Index View so right-click the Home folder (the one you created earlier) and select <span style="background-color: #99ccff;">Add &gt; View&#8230;</span> to display the Add View dialog box and label this view page <span style="background-color: #99ccff;">Index</span> and finally left-click Add to create it.</p>
<p>Modify the contents of the file to look like this:</p>
<pre style="color: #dfdfbf; background-color: #333333; background-position: initial initial; background-repeat: initial initial;"><span style="font-size: small;">@{
    ViewBag.Title = <span style="color: #dfaf8f;">"My first LTD Mvc 4 Index Page"</span>;
}
@<span style="color: #efc986;">using</span> (Html.BeginForm())
{
     &lt;<span style="color: #efc986;">h1</span>&gt;Hello, World!&lt;/<span style="color: #efc986;">h1</span>&gt;
}</span></pre>
<p>Finally you need to create the shared layout view page, right-click the <span style="background-color: #99ccff;">Shared</span> folder and left-click <span style="background-color: #99ccff;">Add &gt; View&#8230;</span> to display the Add View dialog box, label the view page as <span style="background-color: #99ccff;">_Layout</span> and ensure as with the previous pages the &#8220;Use a layout or master page&#8221; checkbox is un-ticked.</p>
<p>Modify the <span style="background-color: #99ccff;">_Layout.cshtml</span> view page to look like this:</p>
<pre style="color: #dfdfbf; background-color: #333333; background-position: initial initial; background-repeat: initial initial;"><span style="font-size: small;">&lt;!<span style="color: #efc986;">DOCTYPE</span> html&gt;
&lt;<span style="color: #efc986;">html</span> lang=<span style="color: #dfaf8f;">"en"</span>&gt;
&lt;<span style="color: #efc986;">head</span>&gt;
    &lt;<span style="color: #efc986;">meta</span> name=<span style="color: #dfaf8f;">"viewport"</span> content=<span style="color: #dfaf8f;">"width=device-width"</span> /&gt;
    &lt;<span style="color: #efc986;">title</span>&gt;@ViewBag.Title&lt;/<span style="color: #efc986;">title</span>&gt;
&lt;/<span style="color: #efc986;">head</span>&gt;
&lt;<span style="color: #efc986;">body</span>&gt;
    &lt;<span style="color: #efc986;">div</span>&gt;
        @RenderBody()
    &lt;/<span style="color: #efc986;">div</span>&gt;
    @<span style="color: #8acccf;">Scripts</span>.Render(<span style="color: #dfaf8f;">"~/bundles/jquery"</span>)
    @RenderSection(<span style="color: #dfaf8f;">"scripts"</span>, required: <span style="color: #efc986;">false</span>)
&lt;/<span style="color: #efc986;">body</span>&gt;
&lt;/<span style="color: #efc986;">html</span>&gt;</span></pre>
<p>This should be enough for you to compile the project however it will still cause you pain unless you save your project and restart Visual Studio 2012, after which the references and page helpers should kick into life.</p>
<p>Build and Compile your project and then press <span style="background-color: #99ccff;">F5</span> or click on the <span style="background-color: #99ccff;">Debug</span> button to fire up your project, if all has gone well you should see a simple page with the words &#8220;Hello, World!&#8221; across the top left.</p>
<p>Well done, now go make a cup of tea and eat some digestives.</p>
]]></content:encoded>
			<wfw:commentRss>/index.php/webdev/uidevelopment/ajax/asp-net-mvc-4-razor-starter/feed/</wfw:commentRss>
		<slash:comments>1</slash:comments>
		</item>
		<item>
		<title>Stupid me #3 – Building the script component</title>
		<link>/index.php/datamgmt/ssis/stupid-me-3-building-the/</link>
		<comments>/index.php/datamgmt/ssis/stupid-me-3-building-the/#respond</comments>
		<pubDate>Tue, 01 Oct 2013 13:05:00 +0000</pubDate>
		<dc:creator><![CDATA[Koen Verbeeck]]></dc:creator>
				<category><![CDATA[Business Intelligence]]></category>
		<category><![CDATA[SSIS]]></category>
		<category><![CDATA[.net]]></category>
		<category><![CDATA[c#]]></category>
		<category><![CDATA[script component]]></category>
		<category><![CDATA[ssis]]></category>
		<category><![CDATA[syndicated]]></category>

		<guid isPermaLink="false">/index.php/2013/10/stupid-me-3-building-the/</guid>
		<description><![CDATA[After over 6 months of silence, it is time again for another Stupid me™®©! For those unfamiliar with the concept:
Every time I do something “stupid”, which happens from time to time, I’ll do a little blog post on what happened and how I solved it. The&#8230;]]></description>
				<content:encoded><![CDATA[<p style="text-align: justify;">After over 6 months of silence, it is time again for another Stupid me™®©! For those unfamiliar with the concept:</p>
<p style="text-align: justify;"><em>Every time I do something “stupid”, which happens from time to time, I’ll do a little blog post on what happened and how I solved it. The reason for this is twofold: I’ll have a solution online I can consult if it happens again and other people can benefit from my mistakes as well. Because remember the ancient Chinese proverb</em>: <em>“It’s only stupid if you don’t turn it into a learning experience”. Okay, I might have made that last one up…</em></p>
<p style="text-align: justify;"><strong>The problem</strong></p>
<p style="text-align: justify;">From time to time I have to script out some logic using a Script Component in a SSIS package. Business as usual for most developers, but since I hardly have a .NET background, it’s always a very stressful experience (I may be over exaggerating a bit). Sometimes it happens I write a little piece of code with a small bug, it happens to the best of us.</p>
<p style="text-align: justify;"><a href="/media/users/koenverbeeck/StupidMe3/introducebug.PNG?mtime=1380632628"><img src="/wp-content/uploads/users/koenverbeeck/StupidMe3/introducebug.PNG?mtime=1380632628" alt="" width="540" height="120" /></a></p>
<p><span style="text-align: justify;">For those who haven’t noticed: you cannot store -1 in a byte. Anyway, the wonderful designer that is the Visual Studio shell fails to warn me of my little indiscretion. Leaving me with a script component that won’t compile.</span></p>
<p style="text-align: justify;"><a href="/media/users/koenverbeeck/StupidMe3/nocompile.PNG?mtime=1380632628"><img src="/wp-content/uploads/users/koenverbeeck/StupidMe3/nocompile.PNG?mtime=1380632628" alt="" width="676" height="212" /></a></p>
<p><span style="text-align: justify;">The matching errors aren’t helpful either.</span></p>
<p style="text-align: justify;"><a href="/media/users/koenverbeeck/StupidMe3/errors.PNG?mtime=1380632628"><img src="/wp-content/uploads/users/koenverbeeck/StupidMe3/errors.PNG?mtime=1380632628" alt="" width="853" height="307" /></a></p>
<p><span style="font-weight: bold; text-align: justify;">The solution</span></p>
<p style="text-align: justify;">The solution is elegant yet simple: we force the designer to tell us what’s wrong by building the code inside the script component.</p>
<p style="text-align: justify;"><a href="/media/users/koenverbeeck/StupidMe3/button.PNG?mtime=1380632628"><img src="/wp-content/uploads/users/koenverbeeck/StupidMe3/button.PNG?mtime=1380632628" alt="" width="467" height="125" /></a></p>
<p><span style="text-align: justify;">This results in a blue squiggly being added to the code, together with a decent explanation.</span></p>
<p style="text-align: justify;"><a href="/media/users/koenverbeeck/StupidMe3/buildscript.PNG?mtime=1380632628"><img src="/wp-content/uploads/users/koenverbeeck/StupidMe3/buildscript.PNG?mtime=1380632628" alt="" width="559" height="227" /></a></p>
<p><span style="text-align: justify;">The moral of this story: if the script component is giving you a hard time, hit that build button!</span></p>
]]></content:encoded>
			<wfw:commentRss>/index.php/datamgmt/ssis/stupid-me-3-building-the/feed/</wfw:commentRss>
		<slash:comments>0</slash:comments>
		</item>
		<item>
		<title>Auto-Verifying Moqs</title>
		<link>/index.php/enterprisedev/unittest/auto-verifying-moqs/</link>
		<comments>/index.php/enterprisedev/unittest/auto-verifying-moqs/#respond</comments>
		<pubDate>Thu, 20 Dec 2012 14:06:00 +0000</pubDate>
		<dc:creator><![CDATA[Alex Ullrich]]></dc:creator>
				<category><![CDATA[Unit Testing]]></category>
		<category><![CDATA[c#]]></category>
		<category><![CDATA[moq]]></category>
		<category><![CDATA[tdd]]></category>

		<guid isPermaLink="false">/index.php/2012/12/auto-verifying-moqs/</guid>
		<description><![CDATA[After years of only being familiar with Rhino mocks, I have been using Moq for the last 10 months or so.  For the most part, I like it better.  The syntax seems easier to get people up to speed on, and there are situations where it really cuts down on t&#8230;]]></description>
				<content:encoded><![CDATA[<p>After years of only being familiar with Rhino mocks, I have been using Moq for the last 10 months or so.  For the most part, I like it better.  The syntax seems easier to get people up to speed on, and there are situations where it really cuts down on the amount of test code you have to write.  This is about one of the situations where it doesn&#8217;t.</p>
<p>One of the things I always liked about Rhino Mocks was the idea of the mock repository, and the fact that when disposing of a mock repository all of your setups get verified automagically.  I have a lot of trouble remembering to add calls to VerifyAll when I&#8217;m adding functionality to existing tests because I got so used to this behavior in the past.  When I noticed some tests where I had unnecessary mocks setup today I decided to do something about it.  Its not really anything special but figued I&#8217;d share since I haven&#8217;t posted for a while.</p>
<p>Basically I added a base test fixture to the project that provides a means to create tracked mocks (similar to the MockRepository concept in Rhino).  It provides a method for mock creation, and adds all created mocks to a list that is then verified in the teardown method.  Pretty simple stuff but I found it handy.</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="csharp"><thead><tr><td colspan="2"  class="head">C#</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
</pre></td><td class="de1"><pre class="de1"><span class="kw1">using</span> <span class="co3">System.Collections.Generic</span><span class="sy0">;</span>
<span class="kw1">using</span> <span class="co3">Moq</span><span class="sy0">;</span>
<span class="kw1">using</span> <span class="co3">NUnit.Framework</span><span class="sy0">;</span>
&nbsp;
<span class="kw1">namespace</span> Project<span class="sy0">.</span><span class="me1">Tests</span>
<span class="br0">&#123;</span>
&nbsp; &nbsp; <span class="kw1">public</span> <span class="kw1">abstract</span> <span class="kw4">class</span> MockVerifyingTest
&nbsp; &nbsp; <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">readonly</span> List<span class="sy0">&lt;</span>Mock<span class="sy0">&gt;</span> _trackedMocks <span class="sy0">=</span> <span class="kw3">new</span> List<span class="sy0">&lt;</span>Mock<span class="sy0">&gt;</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">protected</span> Mock<span class="sy0">&lt;</span>T<span class="sy0">&gt;</span> GenerateTrackedMock<span class="sy0">&lt;</span>T<span class="sy0">&gt;</span><span class="br0">&#40;</span>MockBehavior mockBehavior <span class="sy0">=</span> MockBehavior<span class="sy0">.</span><span class="kw1">Default</span><span class="br0">&#41;</span> <span class="kw1">where</span> T <span class="sy0">:</span> <span class="kw4">class</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">var</span> mock <span class="sy0">=</span> <span class="kw3">new</span> Mock<span class="sy0">&lt;</span>T<span class="sy0">&gt;</span><span class="br0">&#40;</span>mockBehavior<span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; _trackedMocks<span class="sy0">.</span><span class="kw1">Add</span><span class="br0">&#40;</span>mock<span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">return</span> mock<span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#91;</span>TearDown<span class="br0">&#93;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">public</span> <span class="kw1">virtual</span> <span class="kw4">void</span> TearDown<span class="br0">&#40;</span><span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">try</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">foreach</span> <span class="br0">&#40;</span><span class="kw1">var</span> mock <span class="kw1">in</span> _trackedMocks<span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; mock<span class="sy0">.</span><span class="me1">VerifyAll</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">finally</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; _trackedMocks<span class="sy0">.</span><span class="me1">Clear</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp; &nbsp; <span class="br0">&#125;</span>
<span class="br0">&#125;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">using System.Collections.Generic;
using Moq;
using NUnit.Framework;

namespace Project.Tests
{
    public abstract class MockVerifyingTest
    {
        readonly List&lt;Mock&gt; _trackedMocks = new List&lt;Mock&gt;();

        protected Mock&lt;T&gt; GenerateTrackedMock&lt;T&gt;(MockBehavior mockBehavior = MockBehavior.Default) where T : class
        {
            var mock = new Mock&lt;T&gt;(mockBehavior);
            _trackedMocks.Add(mock);
            return mock;
        }

        [TearDown]
        public virtual void TearDown()
        {
            try
            {
                foreach (var mock in _trackedMocks)
                {
                    mock.VerifyAll();
                }
            }
            finally
            {
                _trackedMocks.Clear();
            }
        }
    }
}</pre></div></div>

<p>So now instead of something like this:</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="csharp"><thead><tr><td colspan="2"  class="head">C#</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
</pre></td><td class="de1"><pre class="de1"><span class="br0">&#91;</span>Test<span class="br0">&#93;</span>
<span class="kw1">public</span> <span class="kw4">void</span> ATest<span class="br0">&#40;</span><span class="br0">&#41;</span> 
<span class="br0">&#123;</span>
&nbsp; &nbsp; <span class="kw1">var</span> foo <span class="sy0">=</span> <span class="kw3">new</span> Mock<span class="sy0">&lt;</span>IFoo<span class="sy0">&gt;</span><span class="br0">&#40;</span>MockBehavior<span class="sy0">.</span><span class="me1">Strict</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; foo<span class="sy0">.</span><span class="me1">Setup</span><span class="br0">&#40;</span>f <span class="sy0">=&gt;</span> f<span class="sy0">.</span><span class="me1">GetSomething</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#41;</span><span class="sy0">.</span><span class="me1">Returns</span><span class="br0">&#40;</span><span class="kw3">new</span> Something<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; <span class="kw1">var</span> bar <span class="sy0">=</span> <span class="kw3">new</span> Bar<span class="br0">&#40;</span>foo<span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; bar<span class="sy0">.</span><span class="me1">CodeUnderTest</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; foo<span class="sy0">.</span><span class="me1">VerifyAll</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
<span class="br0">&#125;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">[Test]
public void ATest() 
{
    var foo = new Mock&lt;IFoo&gt;(MockBehavior.Strict);

    foo.Setup(f =&gt; f.GetSomething()).Returns(new Something());

    var bar = new Bar(foo);

    bar.CodeUnderTest();

    foo.VerifyAll();
}</pre></div></div>

<p>I can have my fixture inherit from MockVerifyingTest and write it like this:</p>
<p><

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="csharp"><thead><tr><td colspan="2"  class="head">C#</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
</pre></td><td class="de1"><pre class="de1"><span class="br0">&#91;</span>Test<span class="br0">&#93;</span>
<span class="kw1">public</span> <span class="kw4">void</span> ATest<span class="br0">&#40;</span><span class="br0">&#41;</span> 
<span class="br0">&#123;</span>
&nbsp; &nbsp; <span class="kw1">var</span> foo <span class="sy0">=</span> GenerateTrackedMock<span class="sy0">&lt;</span>IFoo<span class="sy0">&gt;</span><span class="br0">&#40;</span>MockBehavior<span class="sy0">.</span><span class="me1">Strict</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; foo<span class="sy0">.</span><span class="me1">Setup</span><span class="br0">&#40;</span>f <span class="sy0">=&gt;</span> f<span class="sy0">.</span><span class="me1">GetSomething</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#41;</span><span class="sy0">.</span><span class="me1">Returns</span><span class="br0">&#40;</span><span class="kw3">new</span> Something<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; <span class="kw1">var</span> bar <span class="sy0">=</span> <span class="kw3">new</span> Bar<span class="br0">&#40;</span>foo<span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; bar<span class="sy0">.</span><span class="me1">CodeUnderTest</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
<span class="br0">&#125;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">[Test]
public void ATest() 
{
    var foo = GenerateTrackedMock&lt;IFoo&gt;(MockBehavior.Strict);

    foo.Setup(f =&gt; f.GetSomething()).Returns(new Something());

    var bar = new Bar(foo);

    bar.CodeUnderTest();
}</pre></div></div>

<p>It only saves one line of test code in this example, but it can add up when dealing with tests that have several mocks.  I realize having this many mocks in play for a test is just asking for trouble, but I am dealing with a legacy system without any test coverage, so working in test coverage without any sweeping refactorings is imperative at this point.  We can make those changes later once we&#8217;ve gotten through a release or two with the code that is now under test <img src="https://s.w.org/images/core/emoji/2/72x72/1f642.png" alt="🙂" class="wp-smiley" style="height: 1em; max-height: 1em;" /></p>
]]></content:encoded>
			<wfw:commentRss>/index.php/enterprisedev/unittest/auto-verifying-moqs/feed/</wfw:commentRss>
		<slash:comments>0</slash:comments>
		</item>
		<item>
		<title>Copying Buckets With The Amazon S3 API</title>
		<link>/index.php/webdev/serverprogramming/copying-buckets-with-the-amazon-s3-api/</link>
		<comments>/index.php/webdev/serverprogramming/copying-buckets-with-the-amazon-s3-api/#comments</comments>
		<pubDate>Tue, 29 May 2012 14:43:00 +0000</pubDate>
		<dc:creator><![CDATA[Alex Ullrich]]></dc:creator>
				<category><![CDATA[ASP.NET]]></category>
		<category><![CDATA[Server Programming]]></category>
		<category><![CDATA[amazon]]></category>
		<category><![CDATA[c#]]></category>
		<category><![CDATA[linq]]></category>
		<category><![CDATA[rest]]></category>
		<category><![CDATA[s3]]></category>

		<guid isPermaLink="false">/index.php/2012/05/copying-buckets-with-the-amazon-s3-api/</guid>
		<description><![CDATA[One of the projects I have been working on is a system for managing content on our network of websites.  One of our requirements is that changes don't take effect immediately, but on a separate preview network where our customer can look to see that her&#8230;]]></description>
				<content:encoded><![CDATA[<p>One of the projects I have been working on is a system for managing content on our network of websites.  One of our requirements is that changes don&#8217;t take effect immediately, but on a separate preview network where our customer can look to see that her changes show the way she expected before pushing them into the production environment.  Because of this requirement, we need to maintain 2 separate sets of product images (hosted on Amazon S3, with their CloudFront CDN used for the production sites).</p>
<p>Allowing our content management system to save image changes to Amazon and render their locations in our app was trivial, but we found the push mechanism for moving changes into the live environment a bit challenging.  The work for moving database changes was already done when I started on the project, so most of the challenges I saw were in relation to copying the images.  What we really wanted was a true bucket copy (emptying the destination bucket altogether and replacing its content with that of the source bucket) &#8211; but the <a href="http://docs.amazonwebservices.com/AmazonS3/latest/API/RESTBucketOps.html">REST API for S3</a> does not support copy at the bucket level currently.</p>
<p>When designing our solution we needed to optimize not only on performance and maintainability, but on cost.  The <a href="http://aws.amazon.com/s3/pricing/">pricing model for S3</a> has charges associated with most request types so it&#8217;s not efficient to simply copy all the items in the source bucket to the destination.  In addition, this wouldn&#8217;t handle deleting objects that have been removed in the source bucket.  So the naive solution becomes a two step process of deleting all of a bucket&#8217;s content, then copying over all the content from the other bucket.  In a scenario where the actual degree of change is likely to be minimal incurring this kind of cost is not a great option (and it&#8217;s likely to perform poorly as well).  When you add the challenge of CDN cache invalidation and <a href="http://aws.amazon.com/cloudfront/pricing/">pricing for CloudFront</a> to the equation this looks even less attractive.</p>
<p>This post will go over the implementation we came up with for bucket copying.  Code is written in C# using the <a href="http://aws.amazon.com/sdkfornet/">AWS SDK for .net</a>, but it is all possible using the REST API directly.  I will add that the AWS SDK is a very nice tool &#8211; typically I would choose to use <a href="https://github.com/restsharp/restsharp">RestSharp</a> to go directly at the REST API, but Amazon has taken a lot of time to build a nice fluent syntax for building requests and some helper functions that make life easy enough to make it worth a look &#8211; it is far nicer than some of the other client libraries out there, in large part because it doesn&#8217;t try to hide the fact that you&#8217;re working with a set of webservices.  But I digress.  The process for copying a bucket is pretty straightforward:</p>
<ol>
<li>Check for destination bucket existence, create if needed</li>
<li>List Objects in Both Buckets</li>
<li>Identify keys for Insert, Update and Deletion (COPYs and DELETEs)</li>
<li>Perform COPY / DELETE</li>
<li>Invalidations (Updates only)</li>
</ol>
<p>So here we go.</p>
</p>
<h3>Check for Bucket Existence</h3>
<p>Checking for bucket existence is a piece of cake, thanks to a static helper function in the .net SDK that takes a bucket name and an s3 client.  I chose to hide this call behind an instance method so that I could mock it during unit tests, but this is not strictly necessary.  I think that behind the scenes this method simply issues a HEAD request on a bucket and returns false if a 404 is encountered.  As you&#8217;d expect creating the bucket is done via a PUT request on the bucket resource.  Code is as follows:</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="csharp"><thead><tr><td colspan="2"  class="head">C#</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
</pre></td><td class="de1"><pre class="de1"><span class="kw4">void</span> CreateDestinationBucketIfNeeded<span class="br0">&#40;</span><span class="kw4">string</span> bucketName<span class="br0">&#41;</span>
<span class="br0">&#123;</span>
&nbsp; &nbsp; <span class="kw1">if</span><span class="br0">&#40;</span><span class="sy0">!</span>BucketExists<span class="br0">&#40;</span>bucketName<span class="br0">&#41;</span><span class="br0">&#41;</span>
&nbsp; &nbsp; <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">var</span> request <span class="sy0">=</span> <span class="kw3">new</span> PutBucketRequest<span class="br0">&#40;</span><span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="sy0">.</span><span class="me1">WithBucketName</span><span class="br0">&#40;</span>bucketName<span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; _s3Client<span class="sy0">.</span><span class="me1">PutBucket</span><span class="br0">&#40;</span>request<span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; <span class="br0">&#125;</span>
<span class="br0">&#125;</span>
&nbsp;
<span class="kw1">public</span> <span class="kw1">virtual</span> <span class="kw4">bool</span> BucketExists<span class="br0">&#40;</span><span class="kw4">string</span> bucketName<span class="br0">&#41;</span>
<span class="br0">&#123;</span>
&nbsp; &nbsp; <span class="kw1">return</span> Amazon<span class="sy0">.</span><span class="me1">S3</span><span class="sy0">.</span><span class="me1">Util</span><span class="sy0">.</span><span class="me1">AmazonS3Util</span><span class="sy0">.</span><span class="me1">DoesS3BucketExist</span><span class="br0">&#40;</span>bucketName, _s3Client<span class="br0">&#41;</span><span class="sy0">;</span>
<span class="br0">&#125;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">void CreateDestinationBucketIfNeeded(string bucketName)
{
    if(!BucketExists(bucketName))
    {
        var request = new PutBucketRequest()
            .WithBucketName(bucketName);

        _s3Client.PutBucket(request);
    }
}

public virtual bool BucketExists(string bucketName)
{
    return Amazon.S3.Util.AmazonS3Util.DoesS3BucketExist(bucketName, _s3Client);
}</pre></div></div>

<h3>List Objects in a Bucket</h3>
<p>Listing objects in an S3 bucket is very easy.  You just need to issue a signed GET request to myBucket.s3.amazonaws.com.  The only gotcha is it only returns up to 1000 objects in a single response, so getting a complete list can take multiple requests.  It helps to know a few things when putting this together &#8211; first that objects are listed in alphabetical order, second that we can include a &#8220;marker&#8221; parameter in our request telling AWS what key to start with, and third that the response from this method includes an &#8220;IsTruncated&#8221; flag.  The C# code to list objects looks like this:</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="csharp"><thead><tr><td colspan="2"  class="head">C#</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
</pre></td><td class="de1"><pre class="de1">IEnumerable<span class="sy0">&lt;</span>S3Object<span class="sy0">&gt;</span> ObjectsFor<span class="br0">&#40;</span><span class="kw4">string</span> bucketName<span class="br0">&#41;</span>
<span class="br0">&#123;</span>
&nbsp; &nbsp; <span class="kw1">var</span> result <span class="sy0">=</span> <span class="kw3">new</span> List<span class="sy0">&lt;</span>S3Object<span class="sy0">&gt;</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; <span class="kw1">var</span> response <span class="sy0">=</span> <span class="kw3">new</span> ListObjectsResponse<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; <span class="kw1">do</span>
&nbsp; &nbsp; <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">var</span> request <span class="sy0">=</span> <span class="kw3">new</span> ListObjectsRequest<span class="br0">&#40;</span><span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="sy0">.</span><span class="me1">WithBucketName</span><span class="br0">&#40;</span>bucketName<span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">if</span><span class="br0">&#40;</span>response<span class="sy0">.</span><span class="me1">IsTruncated</span><span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; request<span class="sy0">.</span><span class="me1">Marker</span> <span class="sy0">=</span> response<span class="sy0">.</span><span class="me1">NextMarker</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; response <span class="sy0">=</span> _s3Client<span class="sy0">.</span><span class="me1">ListObjects</span><span class="br0">&#40;</span>request<span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; result<span class="sy0">.</span><span class="me1">AddRange</span><span class="br0">&#40;</span>response<span class="sy0">.</span><span class="me1">S3Objects</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; <span class="br0">&#125;</span> <span class="kw1">while</span><span class="br0">&#40;</span>response<span class="sy0">.</span><span class="me1">IsTruncated</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; 
&nbsp; &nbsp; response<span class="sy0">.</span><span class="me1">Dispose</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; <span class="kw1">return</span> result<span class="sy0">;</span>
<span class="br0">&#125;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">IEnumerable&lt;S3Object&gt; ObjectsFor(string bucketName)
{
    var result = new List&lt;S3Object&gt;();

    var response = new ListObjectsResponse();
    do
    {
        var request = new ListObjectsRequest()
            .WithBucketName(bucketName);

        if(response.IsTruncated)
        {
            request.Marker = response.NextMarker;
        }

        response = _s3Client.ListObjects(request);
        result.AddRange(response.S3Objects);

    } while(response.IsTruncated);
    
    response.Dispose();

    return result;
}</pre></div></div>

<h3>
<p>Identify Inserts, Updates and Deletes</p>
</h3>
<p>Once we have the contents of both buckets, we need to determine which objects need to be inserted to, updated in, and deleted from the destination bucket.  For deleted objects we will be issuing DELETE requests, and for Inserts and Updates we will be copying objects across using a special PUT request.  The DELETE requests can be batched, supporting up to 1000 deletions in a single request, while the PUT requests need to be issued on an object by object basis.</p>
<p>These subsets of can be identified by comparing the objects in source and destination bucket.  Deletes will include all objects in the destination that aren&#8217;t in the source.  Updates will include all objects present in both buckets that have changed (this can be determined by comparing the ETags on the objects).  Inserts will of course contain all objects that exist in the source but not the destination.</p>
<p>C# helps us out a bit here, as LINQ makes it easy to do these comparisons without having to do any nasty looping.  For the inserts and deletes we need to spoof an outer join which LINQ doesn&#8217;t really have a great API for, but I still find it helpful to be able to think about these operations in set-based terms instead of in terms of the tedious iterative comparison that actually gets done behind all the LINQ magic.</p>
<p>Code to identify these sets of objects can be found here:</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="csharp"><thead><tr><td colspan="2"  class="head">C#</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
</pre></td><td class="de1"><pre class="de1">IEnumerable<span class="sy0">&lt;</span>S3Object<span class="sy0">&gt;</span> ObjectsToUpdate<span class="br0">&#40;</span>IEnumerable<span class="sy0">&lt;</span>S3Object<span class="sy0">&gt;</span> sourceObjects, IEnumerable<span class="sy0">&lt;</span>S3Object<span class="sy0">&gt;</span> destinationObjects<span class="br0">&#41;</span>
<span class="br0">&#123;</span>
&nbsp; &nbsp; <span class="kw1">return</span> <span class="kw1">from</span> src <span class="kw1">in</span> sourceObjects
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span class="kw1">join</span> dest <span class="kw1">in</span> destinationObjects
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;on src<span class="sy0">.</span><span class="me1">Key</span> equals dest<span class="sy0">.</span><span class="me1">Key</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span class="kw1">where</span> src<span class="sy0">.</span><span class="me1">Size</span> <span class="sy0">&gt;</span> <span class="nu0">0</span> <span class="sy0">&amp;&amp;</span> src<span class="sy0">.</span><span class="me1">ETag</span> <span class="sy0">!=</span> dest<span class="sy0">.</span><span class="me1">ETag</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span class="kw1">select</span> src<span class="sy0">;</span>
<span class="br0">&#125;</span>
&nbsp;
IEnumerable<span class="sy0">&lt;</span>S3Object<span class="sy0">&gt;</span> ObjectsToInsert<span class="br0">&#40;</span>IEnumerable<span class="sy0">&lt;</span>S3Object<span class="sy0">&gt;</span> sourceObjects, IEnumerable<span class="sy0">&lt;</span>S3Object<span class="sy0">&gt;</span> destinationObjects<span class="br0">&#41;</span>
<span class="br0">&#123;</span>
&nbsp; &nbsp; <span class="kw1">return</span> <span class="kw1">from</span> src <span class="kw1">in</span> sourceObjects
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span class="kw1">join</span> dest <span class="kw1">in</span> destinationObjects
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;on src<span class="sy0">.</span><span class="me1">Key</span> equals dest<span class="sy0">.</span><span class="me1">Key</span> <span class="kw1">into</span> joinedObjects
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span class="kw1">from</span> coalescedDest <span class="kw1">in</span> joinedObjects<span class="sy0">.</span><span class="me1">DefaultIfEmpty</span><span class="br0">&#40;</span><span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span class="kw1">where</span> src<span class="sy0">.</span><span class="me1">Size</span> <span class="sy0">&gt;</span> <span class="nu0">0</span> <span class="sy0">&amp;&amp;</span> coalescedDest <span class="sy0">==</span> <span class="kw1">null</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span class="kw1">select</span> src<span class="sy0">;</span>
<span class="br0">&#125;</span>
&nbsp;
IEnumerable<span class="sy0">&lt;</span>S3Object<span class="sy0">&gt;</span> ObjectsToDelete<span class="br0">&#40;</span>IEnumerable<span class="sy0">&lt;</span>S3Object<span class="sy0">&gt;</span> sourceObjects, IEnumerable<span class="sy0">&lt;</span>S3Object<span class="sy0">&gt;</span> destinationObjects<span class="br0">&#41;</span>
<span class="br0">&#123;</span>
&nbsp; &nbsp; <span class="kw1">return</span> <span class="kw1">from</span> dest <span class="kw1">in</span> destinationObjects
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span class="kw1">join</span> src <span class="kw1">in</span> sourceObjects
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;on dest<span class="sy0">.</span><span class="me1">Key</span> equals src<span class="sy0">.</span><span class="me1">Key</span> <span class="kw1">into</span> joinedObjects
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span class="kw1">from</span> coalescedSrc <span class="kw1">in</span> joinedObjects<span class="sy0">.</span><span class="me1">DefaultIfEmpty</span><span class="br0">&#40;</span><span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span class="kw1">where</span> dest<span class="sy0">.</span><span class="me1">Size</span> <span class="sy0">&gt;</span> <span class="nu0">0</span> <span class="sy0">&amp;&amp;</span> coalescedSrc <span class="sy0">==</span> <span class="kw1">null</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span class="kw1">select</span> dest<span class="sy0">;</span>
<span class="br0">&#125;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">IEnumerable&lt;S3Object&gt; ObjectsToUpdate(IEnumerable&lt;S3Object&gt; sourceObjects, IEnumerable&lt;S3Object&gt; destinationObjects)
{
    return from src in sourceObjects
           join dest in destinationObjects
               on src.Key equals dest.Key
           where src.Size &gt; 0 &amp;&amp; src.ETag != dest.ETag
           select src;
}

IEnumerable&lt;S3Object&gt; ObjectsToInsert(IEnumerable&lt;S3Object&gt; sourceObjects, IEnumerable&lt;S3Object&gt; destinationObjects)
{
    return from src in sourceObjects
           join dest in destinationObjects
               on src.Key equals dest.Key into joinedObjects
           from coalescedDest in joinedObjects.DefaultIfEmpty()
           where src.Size &gt; 0 &amp;&amp; coalescedDest == null
           select src;
}

IEnumerable&lt;S3Object&gt; ObjectsToDelete(IEnumerable&lt;S3Object&gt; sourceObjects, IEnumerable&lt;S3Object&gt; destinationObjects)
{
    return from dest in destinationObjects
           join src in sourceObjects
               on dest.Key equals src.Key into joinedObjects
           from coalescedSrc in joinedObjects.DefaultIfEmpty()
           where dest.Size &gt; 0 &amp;&amp; coalescedSrc == null
           select dest;
}</pre></div></div>

<h3>Perform Insert/Delete</h3>
<p>Inserts and deletes are the easy part.  We just need to process the list of objects and issue the appropriate requests.  There are two important optimizations here &#8211; we can batch deletes, and we can parallelize copies.  Batching deletes will help to minimize network chatter, and parallelizing copies will help to force as much network chatter as possible into a shorter amount of time <img src="https://s.w.org/images/core/emoji/2/72x72/1f642.png" alt="🙂" class="wp-smiley" style="height: 1em; max-height: 1em;" />  I was torn on whether or not to paralellize the copies, but decided that in essence we are performing a ton of blocking I/O requests <em><strong>with another computer doing all the work</strong></em>.  If you have real concerns about flooding your network connection you may not want to make this optimization, or do it in a way that allows you to dial down the amount of concurrency but after testing with the calls made in parallel I found a copy of a bucket with ~500 objects finished in about 25% of the time on my dual core laptop, and I was sold.</p>
<p>The inserts are the easiest part:</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="csharp"><thead><tr><td colspan="2"  class="head">C#</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
</pre></td><td class="de1"><pre class="de1"><span class="kw4">void</span> CopyObjects<span class="br0">&#40;</span>IEnumerable<span class="sy0">&lt;</span>S3Object<span class="sy0">&gt;</span> items, Func<span class="sy0">&lt;</span>S3Object, CopyObjectRequest<span class="sy0">&gt;</span> requestBuilder<span class="br0">&#41;</span>
<span class="br0">&#123;</span>
&nbsp; &nbsp; <span class="kw1">var</span> exceptions <span class="sy0">=</span> <span class="kw3">new</span> ConcurrentQueue<span class="sy0">&lt;</span>Exception<span class="sy0">&gt;</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; Parallel<span class="sy0">.</span><span class="kw1">ForEach</span><span class="br0">&#40;</span>items, obj <span class="sy0">=&gt;</span>
&nbsp; &nbsp; <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">try</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">var</span> captured <span class="sy0">=</span> obj<span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">var</span> request <span class="sy0">=</span> requestBuilder<span class="br0">&#40;</span>obj<span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; _s3Client<span class="sy0">.</span><span class="me1">CopyObject</span><span class="br0">&#40;</span>request<span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">catch</span><span class="br0">&#40;</span>Exception ex<span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; exceptions<span class="sy0">.</span><span class="me1">Enqueue</span><span class="br0">&#40;</span>ex<span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp; &nbsp; <span class="br0">&#125;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; <span class="kw1">if</span><span class="br0">&#40;</span>exceptions<span class="sy0">.</span><span class="me1">Count</span> <span class="sy0">&gt;</span> <span class="nu0">0</span><span class="br0">&#41;</span> <span class="kw1">throw</span> <span class="kw3">new</span> AggregateException<span class="br0">&#40;</span>exceptions<span class="br0">&#41;</span><span class="sy0">;</span>
<span class="br0">&#125;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">void CopyObjects(IEnumerable&lt;S3Object&gt; items, Func&lt;S3Object, CopyObjectRequest&gt; requestBuilder)
{
    var exceptions = new ConcurrentQueue&lt;Exception&gt;();
    Parallel.ForEach(items, obj =&gt;
    {
        try
        {
            var captured = obj;
            var request = requestBuilder(obj);
            _s3Client.CopyObject(request);
        }
        catch(Exception ex)
        {
            exceptions.Enqueue(ex);
        }
    });

    if(exceptions.Count &gt; 0) throw new AggregateException(exceptions);
}</pre></div></div>

<p>Deletes were pretty simple as well, only difference being the batching of requests:</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="csharp"><thead><tr><td colspan="2"  class="head">C#</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
</pre></td><td class="de1"><pre class="de1"><span class="kw1">var</span> toDelete <span class="sy0">=</span> ObjectsToDelete<span class="br0">&#40;</span>sourceObjects, destinationObjects<span class="br0">&#41;</span><span class="sy0">.</span><span class="me1">ToList</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
<span class="kw1">while</span><span class="br0">&#40;</span>toDelete<span class="sy0">.</span><span class="me1">Count</span> <span class="sy0">&gt;</span> <span class="nu0">0</span><span class="br0">&#41;</span>
<span class="br0">&#123;</span>
&nbsp; &nbsp; <span class="kw1">var</span> batch <span class="sy0">=</span> toDelete<span class="sy0">.</span><span class="me1">Take</span><span class="br0">&#40;</span><span class="nu0">1000</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; <span class="kw1">var</span> request <span class="sy0">=</span> <span class="kw3">new</span> DeleteObjectsRequest<span class="br0">&#40;</span><span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="sy0">.</span><span class="me1">WithBucketName</span><span class="br0">&#40;</span>destinationBucket<span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="sy0">.</span><span class="me1">WithKeys</span><span class="br0">&#40;</span>batch<span class="sy0">.</span><span class="kw1">Select</span><span class="br0">&#40;</span>k <span class="sy0">=&gt;</span> <span class="kw3">new</span> KeyVersion<span class="br0">&#40;</span>k<span class="sy0">.</span><span class="me1">Key</span><span class="br0">&#41;</span><span class="br0">&#41;</span><span class="sy0">.</span><span class="me1">ToArray</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; _s3Client<span class="sy0">.</span><span class="me1">DeleteObjects</span><span class="br0">&#40;</span>request<span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; toDelete<span class="sy0">.</span><span class="me1">RemoveRange</span><span class="br0">&#40;</span><span class="nu0">0</span>, toDelete<span class="sy0">.</span><span class="me1">Count</span> <span class="sy0">&gt;</span> <span class="nu0">1000</span> <span class="sy0">?</span> <span class="nu0">1000</span> <span class="sy0">:</span> toDelete<span class="sy0">.</span><span class="me1">Count</span><span class="br0">&#41;</span><span class="sy0">;</span>
<span class="br0">&#125;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">var toDelete = ObjectsToDelete(sourceObjects, destinationObjects).ToList();

while(toDelete.Count &gt; 0)
{
    var batch = toDelete.Take(1000);
    var request = new DeleteObjectsRequest()
                        .WithBucketName(destinationBucket)
                        .WithKeys(batch.Select(k =&gt; new KeyVersion(k.Key)).ToArray());

    _s3Client.DeleteObjects(request);

    toDelete.RemoveRange(0, toDelete.Count &gt; 1000 ? 1000 : toDelete.Count);
}</pre></div></div>

<h3>Perform Updates</h3>
<p>This step is not really anything special but it is different enough for me to exclude it from it&#8217;s counterparts in step 3.  We are basically doing the same copy operation for each object that we did for the inserts, but we also need to worry about cache invalidation on the CloudFront CDN.  The invalidation can be batched, so it makes sense to build the list of keys updated while we do the copy, then send a single invalidation request.</p>
<p>So we can change the code for copy to something like this, taking an optional parameter containing a function to add the object&#8217;s key to a list of keys to be invalidated:</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="csharp"><thead><tr><td colspan="2"  class="head">C#</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
</pre></td><td class="de1"><pre class="de1"><span class="kw4">void</span> CopyObjects<span class="br0">&#40;</span>IEnumerable<span class="sy0">&lt;</span>S3Object<span class="sy0">&gt;</span> items, Func<span class="sy0">&lt;</span>S3Object, CopyObjectRequest<span class="sy0">&gt;</span> requestBuilder, Action<span class="sy0">&lt;</span><span class="kw4">string</span><span class="sy0">&gt;</span> addToInvalidationList <span class="sy0">=</span> <span class="kw1">null</span><span class="br0">&#41;</span>
<span class="br0">&#123;</span>
&nbsp; &nbsp; <span class="kw1">var</span> exceptions <span class="sy0">=</span> <span class="kw3">new</span> ConcurrentQueue<span class="sy0">&lt;</span>Exception<span class="sy0">&gt;</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; Parallel<span class="sy0">.</span><span class="kw1">ForEach</span><span class="br0">&#40;</span>items, obj <span class="sy0">=&gt;</span>
&nbsp; &nbsp; <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">try</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">var</span> captured <span class="sy0">=</span> obj<span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">var</span> request <span class="sy0">=</span> requestBuilder<span class="br0">&#40;</span>obj<span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; _s3Client<span class="sy0">.</span><span class="me1">CopyObject</span><span class="br0">&#40;</span>request<span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">if</span><span class="br0">&#40;</span>addToInvalidationList <span class="sy0">!=</span> <span class="kw1">null</span><span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; addToInvalidationList<span class="br0">&#40;</span>captured<span class="sy0">.</span><span class="me1">Key</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">catch</span><span class="br0">&#40;</span>Exception ex<span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; exceptions<span class="sy0">.</span><span class="me1">Enqueue</span><span class="br0">&#40;</span>ex<span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp; &nbsp; <span class="br0">&#125;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; <span class="kw1">if</span><span class="br0">&#40;</span>exceptions<span class="sy0">.</span><span class="me1">Count</span> <span class="sy0">&gt;</span> <span class="nu0">0</span><span class="br0">&#41;</span> <span class="kw1">throw</span> <span class="kw3">new</span> AggregateException<span class="br0">&#40;</span>exceptions<span class="br0">&#41;</span><span class="sy0">;</span>
<span class="br0">&#125;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">void CopyObjects(IEnumerable&lt;S3Object&gt; items, Func&lt;S3Object, CopyObjectRequest&gt; requestBuilder, Action&lt;string&gt; addToInvalidationList = null)
{
    var exceptions = new ConcurrentQueue&lt;Exception&gt;();
    Parallel.ForEach(items, obj =&gt;
    {
        try
        {
            var captured = obj;
            var request = requestBuilder(obj);
            _s3Client.CopyObject(request);
            if(addToInvalidationList != null)
                addToInvalidationList(captured.Key);
        }
        catch(Exception ex)
        {
            exceptions.Enqueue(ex);
        }
    });

    if(exceptions.Count &gt; 0) throw new AggregateException(exceptions);
}</pre></div></div>

<p>I&#8217;ll concede that this is not the simplest possible thing &#8211; it would probably be easier to call the old copy code and then pass the keys from the updated objects collection, but I do like that it captures the keys of the objects that are actually copied.  If we changed the approach to do something like what is happening with the delete operation that trims the collection while processing, the keys collection we pass for invalidation would end up empty.  I could also just have too much functional programming on the brain I guess <img src="https://s.w.org/images/core/emoji/2/72x72/1f609.png" alt="😉" class="wp-smiley" style="height: 1em; max-height: 1em;" /></p>
<p>Once we have the list of keys, performing the actual invalidation is relatively simple.  We do need to generate a unique &#8220;caller reference&#8221; that amazon uses to ensure that duplicate requests aren&#8217;t processed (remember, each object invalidated triggers some kind of action on potentially hundreds of servers, so this is not a cheap operation for you OR for Amazon).  The hardest part is probably identifying whether there is a CloudFront distribution to worry about in the first place.  The key to finding whether there is a distribution attached to a bucket or not relies on the knowledge that for an s3 origin, the DNSName property will be &#8220;bucketname.s3.amazonaws.com&#8221; &#8211; so by stripping out &#8220;.s3.amazonaws.com&#8221; from our available distributions&#8217; DNS names we can find if one matches our bucket.</p>
<p>The code for invalidation looks like this:</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="csharp"><thead><tr><td colspan="2"  class="head">C#</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
</pre></td><td class="de1"><pre class="de1"><span class="kw1">const</span> <span class="kw4">string</span> dateFormatWithMilliseconds <span class="sy0">=</span> <span class="st0">&quot;yyyy-MM-dd hh:mm:ss.ff&quot;</span><span class="sy0">;</span>
&nbsp;
<span class="kw4">void</span> InvalidateObjects<span class="br0">&#40;</span><span class="kw4">string</span> destinationBucket, List<span class="sy0">&lt;</span><span class="kw4">string</span><span class="sy0">&gt;</span> keysToInvalidate<span class="br0">&#41;</span>
<span class="br0">&#123;</span>
&nbsp; &nbsp; <span class="kw1">if</span><span class="br0">&#40;</span>keysToInvalidate<span class="sy0">.</span><span class="me1">Count</span> <span class="sy0">&gt;</span> <span class="nu0">0</span><span class="br0">&#41;</span>
&nbsp; &nbsp; <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">var</span> distId <span class="sy0">=</span> GetDistributionIdFor<span class="br0">&#40;</span>destinationBucket<span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">if</span><span class="br0">&#40;</span><span class="sy0">!</span><span class="kw4">string</span><span class="sy0">.</span><span class="me1">IsNullOrWhiteSpace</span><span class="br0">&#40;</span>distId<span class="br0">&#41;</span><span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">var</span> invalidationRequest <span class="sy0">=</span> <span class="kw3">new</span> PostInvalidationRequest<span class="br0">&#40;</span><span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="sy0">.</span><span class="me1">WithDistribtionId</span><span class="br0">&#40;</span>distId<span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="sy0">.</span><span class="me1">WithInvalidationBatch</span><span class="br0">&#40;</span><span class="kw3">new</span> InvalidationBatch<span class="br0">&#40;</span>DateTime<span class="sy0">.</span><span class="me1">Now</span><span class="sy0">.</span><span class="me1">ToString</span><span class="br0">&#40;</span>dateFormatWithMilliseconds<span class="br0">&#41;</span>,
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;keysToInvalidate<span class="br0">&#41;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; _cloudFrontClient<span class="sy0">.</span><span class="me1">PostInvalidation</span><span class="br0">&#40;</span>invalidationRequest<span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp; &nbsp; <span class="br0">&#125;</span>
<span class="br0">&#125;</span>
&nbsp;
<span class="kw1">const</span> <span class="kw4">string</span> amazonBucketUriSuffix <span class="sy0">=</span> <span class="st0">&quot;.s3.amazonaws.com&quot;</span><span class="sy0">;</span>
&nbsp;
<span class="kw4">string</span> GetDistributionIdFor<span class="br0">&#40;</span><span class="kw4">string</span> bucketName<span class="br0">&#41;</span>
<span class="br0">&#123;</span>
&nbsp; &nbsp; <span class="kw1">var</span> distributionNameAndIds <span class="sy0">=</span>
&nbsp; &nbsp; &nbsp; &nbsp; _cloudFrontClient<span class="sy0">.</span><span class="me1">ListDistributions</span><span class="br0">&#40;</span><span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="sy0">.</span><span class="me1">Distribution</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="sy0">.</span><span class="me1">ToDictionary</span><span class="br0">&#40;</span>cfd <span class="sy0">=&gt;</span> cfd<span class="sy0">.</span><span class="me1">DistributionConfig</span><span class="sy0">.</span><span class="me1">S3Origin</span><span class="sy0">.</span><span class="me1">DNSName</span><span class="sy0">.</span><span class="me1">Replace</span><span class="br0">&#40;</span>amazonBucketUriSuffix, <span class="st0">&quot;&quot;</span><span class="br0">&#41;</span>, cfd <span class="sy0">=&gt;</span> cfd<span class="sy0">.</span><span class="me1">Id</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; <span class="kw4">string</span> id <span class="sy0">=</span> <span class="kw1">null</span><span class="sy0">;</span>
&nbsp; &nbsp; distributionNameAndIds<span class="sy0">.</span><span class="me1">TryGetValue</span><span class="br0">&#40;</span>bucketName, <span class="kw1">out</span> id<span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; <span class="kw1">return</span> id<span class="sy0">;</span>
<span class="br0">&#125;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">const string dateFormatWithMilliseconds = "yyyy-MM-dd hh:mm:ss.ff";

void InvalidateObjects(string destinationBucket, List&lt;string&gt; keysToInvalidate)
{
    if(keysToInvalidate.Count &gt; 0)
    {
        var distId = GetDistributionIdFor(destinationBucket);
        if(!string.IsNullOrWhiteSpace(distId))
        {
            var invalidationRequest = new PostInvalidationRequest()
                .WithDistribtionId(distId)
                .WithInvalidationBatch(new InvalidationBatch(DateTime.Now.ToString(dateFormatWithMilliseconds),
                                                                     keysToInvalidate));

            _cloudFrontClient.PostInvalidation(invalidationRequest);
        }
    }
}

const string amazonBucketUriSuffix = ".s3.amazonaws.com";

string GetDistributionIdFor(string bucketName)
{
    var distributionNameAndIds =
        _cloudFrontClient.ListDistributions()
        .Distribution
        .ToDictionary(cfd =&gt; cfd.DistributionConfig.S3Origin.DNSName.Replace(amazonBucketUriSuffix, ""), cfd =&gt; cfd.Id);

    string id = null;
    distributionNameAndIds.TryGetValue(bucketName, out id);
    return id;
}</pre></div></div>

<h3>Tying it All Together</h3>
<p>OK so we have all these methods to facilitate copying buckets but how do we actually do it?  I&#8217;m glad you asked.</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="csharp"><thead><tr><td colspan="2"  class="head">C#</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
</pre></td><td class="de1"><pre class="de1"><span class="kw1">public</span> <span class="kw4">void</span> Copy<span class="br0">&#40;</span><span class="kw4">string</span> sourceBucket, <span class="kw4">string</span> destinationBucket<span class="br0">&#41;</span>
<span class="br0">&#123;</span>
&nbsp; &nbsp; CreateDestinationBucketIfNeeded<span class="br0">&#40;</span>destinationBucket<span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; <span class="kw1">var</span> sourceObjects <span class="sy0">=</span> ObjectsFor<span class="br0">&#40;</span>sourceBucket<span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; <span class="kw1">var</span> destinationObjects <span class="sy0">=</span> ObjectsFor<span class="br0">&#40;</span>destinationBucket<span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; <span class="kw1">var</span> toDelete <span class="sy0">=</span> ObjectsToDelete<span class="br0">&#40;</span>sourceObjects, destinationObjects<span class="br0">&#41;</span><span class="sy0">.</span><span class="me1">ToList</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; <span class="kw1">while</span><span class="br0">&#40;</span>toDelete<span class="sy0">.</span><span class="me1">Count</span> <span class="sy0">&gt;</span> <span class="nu0">0</span><span class="br0">&#41;</span>
&nbsp; &nbsp; <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">var</span> batch <span class="sy0">=</span> toDelete<span class="sy0">.</span><span class="me1">Take</span><span class="br0">&#40;</span><span class="nu0">1000</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">var</span> request <span class="sy0">=</span> <span class="kw3">new</span> DeleteObjectsRequest<span class="br0">&#40;</span><span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="sy0">.</span><span class="me1">WithBucketName</span><span class="br0">&#40;</span>destinationBucket<span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="sy0">.</span><span class="me1">WithKeys</span><span class="br0">&#40;</span>batch<span class="sy0">.</span><span class="kw1">Select</span><span class="br0">&#40;</span>k <span class="sy0">=&gt;</span> <span class="kw3">new</span> KeyVersion<span class="br0">&#40;</span>k<span class="sy0">.</span><span class="me1">Key</span><span class="br0">&#41;</span><span class="br0">&#41;</span><span class="sy0">.</span><span class="me1">ToArray</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; _s3Client<span class="sy0">.</span><span class="me1">DeleteObjects</span><span class="br0">&#40;</span>request<span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; toDelete<span class="sy0">.</span><span class="me1">RemoveRange</span><span class="br0">&#40;</span><span class="nu0">0</span>, toDelete<span class="sy0">.</span><span class="me1">Count</span> <span class="sy0">&gt;</span> <span class="nu0">1000</span> <span class="sy0">?</span> <span class="nu0">1000</span> <span class="sy0">:</span> toDelete<span class="sy0">.</span><span class="me1">Count</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp;
&nbsp; &nbsp; <span class="kw1">var</span> buildCopyRequest <span class="sy0">=</span> <span class="kw3">new</span> Func<span class="sy0">&lt;</span>S3Object, CopyObjectRequest<span class="sy0">&gt;</span><span class="br0">&#40;</span>s3obj <span class="sy0">=&gt;</span> <span class="kw3">new</span> CopyObjectRequest<span class="br0">&#40;</span><span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="sy0">.</span><span class="me1">WithSourceBucket</span><span class="br0">&#40;</span>sourceBucket<span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="sy0">.</span><span class="me1">WithDestinationBucket</span><span class="br0">&#40;</span>destinationBucket<span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="sy0">.</span><span class="me1">WithSourceKey</span><span class="br0">&#40;</span>s3obj<span class="sy0">.</span><span class="me1">Key</span><span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="sy0">.</span><span class="me1">WithDestinationKey</span><span class="br0">&#40;</span>s3obj<span class="sy0">.</span><span class="me1">Key</span><span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="sy0">.</span><span class="me1">WithCannedACL</span><span class="br0">&#40;</span>S3CannedACL<span class="sy0">.</span><span class="me1">PublicRead</span><span class="br0">&#41;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; CopyObjects<span class="br0">&#40;</span>ObjectsToInsert<span class="br0">&#40;</span>sourceObjects, destinationObjects<span class="br0">&#41;</span>, buildCopyRequest<span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; <span class="kw1">var</span> keysToInvalidate <span class="sy0">=</span> <span class="kw3">new</span> ConcurrentBag<span class="sy0">&lt;</span><span class="kw4">string</span><span class="sy0">&gt;</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; CopyObjects<span class="br0">&#40;</span>ObjectsToUpdate<span class="br0">&#40;</span>sourceObjects, destinationObjects<span class="br0">&#41;</span>, buildCopyRequest, keysToInvalidate<span class="sy0">.</span><span class="kw1">Add</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; InvalidateObjects<span class="br0">&#40;</span>destinationBucket, keysToInvalidate<span class="sy0">.</span><span class="me1">ToList</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#41;</span><span class="sy0">;</span>
<span class="br0">&#125;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">public void Copy(string sourceBucket, string destinationBucket)
{
    CreateDestinationBucketIfNeeded(destinationBucket);

    var sourceObjects = ObjectsFor(sourceBucket);
    var destinationObjects = ObjectsFor(destinationBucket);

    var toDelete = ObjectsToDelete(sourceObjects, destinationObjects).ToList();
    while(toDelete.Count &gt; 0)
    {
        var batch = toDelete.Take(1000);
        var request = new DeleteObjectsRequest()
            .WithBucketName(destinationBucket)
            .WithKeys(batch.Select(k =&gt; new KeyVersion(k.Key)).ToArray());

        _s3Client.DeleteObjects(request);

        toDelete.RemoveRange(0, toDelete.Count &gt; 1000 ? 1000 : toDelete.Count);
    }

    var buildCopyRequest = new Func&lt;S3Object, CopyObjectRequest&gt;(s3obj =&gt; new CopyObjectRequest()
        .WithSourceBucket(sourceBucket)
        .WithDestinationBucket(destinationBucket)
        .WithSourceKey(s3obj.Key)
        .WithDestinationKey(s3obj.Key)
        .WithCannedACL(S3CannedACL.PublicRead));

    CopyObjects(ObjectsToInsert(sourceObjects, destinationObjects), buildCopyRequest);

    var keysToInvalidate = new ConcurrentBag&lt;string&gt;();

    CopyObjects(ObjectsToUpdate(sourceObjects, destinationObjects), buildCopyRequest, keysToInvalidate.Add);

    InvalidateObjects(destinationBucket, keysToInvalidate.ToList());
}</pre></div></div>

<p>Note that the delete happens inline instead of in a separate method as with the copies.  This is because it wasn&#8217;t reusable, and because the act of deleting the items changes the collection.  As a result it seemed cleaner to just do it inline.</p>
<p>This is really all there is to it.  Hopefully copying buckets in this manner is something that finds its way into the REST API for S3 at some point, but in the meantime this process seems to be working pretty well.  It is not the prettiest code, but it runs reasonably fast for our smallish buckets, and I think it is doing a good job minimizing what our customer has to pay for the service each month.  It was interesting working on this problem, because it forced thinking about the problem in terms of Amazon&#8217;s pricing structure (though because Amazon doesn&#8217;t charge for data transfer within s3 regions it really becomes the same as thinking in terms of minimizing http requests).  This kind of thing isn&#8217;t always a driver of implementation so it was a nice mental exercise.  Now we just have to hope they never change their pricing structure <img src="https://s.w.org/images/core/emoji/2/72x72/1f609.png" alt="😉" class="wp-smiley" style="height: 1em; max-height: 1em;" /></p>
]]></content:encoded>
			<wfw:commentRss>/index.php/webdev/serverprogramming/copying-buckets-with-the-amazon-s3-api/feed/</wfw:commentRss>
		<slash:comments>6</slash:comments>
		</item>
		<item>
		<title>PetaPoco: Mapping related objects</title>
		<link>/index.php/desktopdev/mstech/csharp/petapoco-mapping-related-objects/</link>
		<comments>/index.php/desktopdev/mstech/csharp/petapoco-mapping-related-objects/#comments</comments>
		<pubDate>Mon, 07 May 2012 10:16:00 +0000</pubDate>
		<dc:creator><![CDATA[Eli Weinstock-Herman (tarwn)]]></dc:creator>
				<category><![CDATA[C#]]></category>
		<category><![CDATA[c#]]></category>
		<category><![CDATA[micro orm]]></category>
		<category><![CDATA[petapoco]]></category>
		<category><![CDATA[waiter theres sql in my orm]]></category>

		<guid isPermaLink="false">/index.php/2012/05/petapoco-mapping-related-objects/</guid>
		<description><![CDATA[In the prior PetaPoco post, I started to dig into many-to-one relationships a little. Chrissie followed up with yet more mapping behavior in his latest Simple.Data post, so I thought I would cover it in a bit more detail.]]></description>
				<content:encoded><![CDATA[<p>In the <a href="/index.php/DesktopDev/MSTech/CSharp/more-petapoco-id-s-and" title="More PetaPoco: Id's and Multi-POCO queries">prior PetaPoco post</a>, I started to dig into many-to-one relationships a little. Chrissie followed up with yet more mapping behavior in his <a href="/index.php/DesktopDev/MSTech/simple-data-and-complex-types" title="Simple.Data and complex types: many to one">latest Simple.Data post</a>, so I thought I would cover it in a bit more detail.</p>
<p><i>Note: Chrissie has also covered <a href="/index.php/DesktopDev/MSTech/simple-data-and-complex-types-1" title="Simple.Data and complex types: one to many">one-to-many</a> since I wrote this post the other night and has at least one more post following that</i></p>
<h2>Many flavors of Mapping Related Objects</h2>
<p>PetaPoco doesn&#8217;t offer the instrumentation for lazy loading, though it wouldn&#8217;t be too hard to add it to the T4 template that is provided to automatically generate POCOs from the database. Of course the POCOs would stop being POCOs at this point and I&#8217;d be showing off my ability to write lazy loading rather than the library at hand, so lets stick to what PetaPoco does out of the box.</p>
<p>That said, we still have a number of ways to map data from multi-table queries into objects.</p>
<p><i>Note: I am using the same tables and insert statements I used in the prior post to create the Person and Address table, so I&#8217;ve left those out of the examples below to reduce the noise a bit</i></p>
<h3>Automatic Mapping w/ Decorated Objects</h3>
<p>As we saw in the prior post, using a pair of decorated objects makes it pretty easy to map a JOIN to objects:</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="csharp"><thead><tr><td colspan="2"  class="head">C#</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
</pre></td><td class="de1"><pre class="de1"><span class="kw1">public</span> <span class="kw4">void</span> SelectUsingDecoratedClasses<span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; <span class="kw1">using</span> <span class="br0">&#40;</span><span class="kw1">var</span> db <span class="sy0">=</span> GetDatabase<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">var</span> results <span class="sy0">=</span> db<span class="sy0">.</span><span class="me1">Query</span><span class="sy0">&lt;</span>DecoratedPerson, DecoratedAddress<span class="sy0">&gt;</span><span class="br0">&#40;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="st_h">@&quot;SELECT Person.*, Address.* </span>
<span class="st_h">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; FROM Person </span>
<span class="st_h">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; INNER JOIN Address ON Person.AddressId = Address.Id </span>
<span class="st_h">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; WHERE Person.lastname=@0&quot;</span>, <span class="st0">&quot;lastname1&quot;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">foreach</span> <span class="br0">&#40;</span><span class="kw1">var</span> person <span class="kw1">in</span> results<span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Console<span class="sy0">.</span><span class="me1">WriteLine</span><span class="br0">&#40;</span><span class="st0">&quot;Person: {0} {1}&quot;</span>, person<span class="sy0">.</span><span class="me1">LastName</span>, person<span class="sy0">.</span><span class="me1">FirstName</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Console<span class="sy0">.</span><span class="me1">WriteLine</span><span class="br0">&#40;</span><span class="st0">&quot;Address: {0} {1}&quot;</span>, person<span class="sy0">.</span><span class="me1">Address</span><span class="sy0">.</span><span class="me1">Street</span>, person<span class="sy0">.</span><span class="me1">Address</span><span class="sy0">.</span><span class="me1">HouseNumber</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp; &nbsp; <span class="br0">&#125;</span>
<span class="br0">&#125;</span>
&nbsp;
<span class="br0">&#91;</span>TableName<span class="br0">&#40;</span><span class="st0">&quot;Person&quot;</span><span class="br0">&#41;</span><span class="br0">&#93;</span>
<span class="br0">&#91;</span>PrimaryKey<span class="br0">&#40;</span><span class="st0">&quot;Id&quot;</span>, autoIncrement <span class="sy0">=</span> <span class="kw1">true</span><span class="br0">&#41;</span><span class="br0">&#93;</span>
<span class="kw1">public</span> <span class="kw4">class</span> DecoratedPerson <span class="br0">&#123;</span>
&nbsp; &nbsp; <span class="kw1">public</span> <span class="kw4">int</span> Id <span class="br0">&#123;</span> <span class="kw1">get</span><span class="sy0">;</span> <span class="kw1">set</span><span class="sy0">;</span> <span class="br0">&#125;</span>
&nbsp; &nbsp; <span class="kw1">public</span> <span class="kw4">string</span> LastName <span class="br0">&#123;</span> <span class="kw1">get</span><span class="sy0">;</span> <span class="kw1">set</span><span class="sy0">;</span> <span class="br0">&#125;</span>
&nbsp; &nbsp; <span class="kw1">public</span> <span class="kw4">string</span> FirstName <span class="br0">&#123;</span> <span class="kw1">get</span><span class="sy0">;</span> <span class="kw1">set</span><span class="sy0">;</span> <span class="br0">&#125;</span>
&nbsp; &nbsp; <span class="kw1">public</span> <span class="kw4">int</span> AddressId <span class="br0">&#123;</span> <span class="kw1">get</span><span class="sy0">;</span> <span class="kw1">set</span><span class="sy0">;</span> <span class="br0">&#125;</span>
&nbsp;
&nbsp; &nbsp; <span class="br0">&#91;</span>Ignore<span class="br0">&#93;</span>
&nbsp; &nbsp; <span class="kw1">public</span> DecoratedAddress Address <span class="br0">&#123;</span> <span class="kw1">get</span><span class="sy0">;</span> <span class="kw1">set</span><span class="sy0">;</span> <span class="br0">&#125;</span>
&nbsp;
&nbsp; &nbsp; <span class="kw1">public</span> <span class="kw1">override</span> <span class="kw4">string</span> ToString<span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">return</span> <span class="kw4">String</span><span class="sy0">.</span><span class="me1">Format</span><span class="br0">&#40;</span><span class="st0">&quot;{0}: {1}, {2}&quot;</span>, Id, LastName, FirstName<span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; <span class="br0">&#125;</span>
<span class="br0">&#125;</span>
&nbsp;
<span class="br0">&#91;</span>TableName<span class="br0">&#40;</span><span class="st0">&quot;Address&quot;</span><span class="br0">&#41;</span><span class="br0">&#93;</span>
<span class="br0">&#91;</span>PrimaryKey<span class="br0">&#40;</span><span class="st0">&quot;Id&quot;</span>, autoIncrement <span class="sy0">=</span> <span class="kw1">true</span><span class="br0">&#41;</span><span class="br0">&#93;</span>
<span class="kw1">public</span> <span class="kw4">class</span> DecoratedAddress <span class="br0">&#123;</span>
&nbsp; &nbsp; <span class="kw1">public</span> <span class="kw4">int</span> Id <span class="br0">&#123;</span> <span class="kw1">get</span><span class="sy0">;</span> <span class="kw1">set</span><span class="sy0">;</span> <span class="br0">&#125;</span>
&nbsp; &nbsp; <span class="kw1">public</span> <span class="kw4">string</span> Street <span class="br0">&#123;</span> <span class="kw1">get</span><span class="sy0">;</span> <span class="kw1">set</span><span class="sy0">;</span> <span class="br0">&#125;</span>
&nbsp; &nbsp; <span class="kw1">public</span> <span class="kw4">string</span> HouseNumber <span class="br0">&#123;</span> <span class="kw1">get</span><span class="sy0">;</span> <span class="kw1">set</span><span class="sy0">;</span> <span class="br0">&#125;</span>
<span class="br0">&#125;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">public void SelectUsingDecoratedClasses() {
	using (var db = GetDatabase()) {
		var results = db.Query&lt;DecoratedPerson, DecoratedAddress&gt;(
					@"SELECT Person.*, Address.* 
					  FROM Person 
						INNER JOIN Address ON Person.AddressId = Address.Id 
					  WHERE Person.lastname=@0", "lastname1");

		foreach (var person in results) {
			Console.WriteLine("Person: {0} {1}", person.LastName, person.FirstName);
			Console.WriteLine("Address: {0} {1}", person.Address.Street, person.Address.HouseNumber);
		}
	}
}

[TableName("Person")]
[PrimaryKey("Id", autoIncrement = true)]
public class DecoratedPerson {
	public int Id { get; set; }
	public string LastName { get; set; }
	public string FirstName { get; set; }
	public int AddressId { get; set; }

	[Ignore]
	public DecoratedAddress Address { get; set; }

	public override string ToString() {
		return String.Format("{0}: {1}, {2}", Id, LastName, FirstName);
	}
}

[TableName("Address")]
[PrimaryKey("Id", autoIncrement = true)]
public class DecoratedAddress {
	public int Id { get; set; }
	public string Street { get; set; }
	public string HouseNumber { get; set; }
}</pre></div></div>

<h3>Defining Mappings</h3>
<p>While the previous example handled the mapping automatically and assigned the Address instance to the appropriate attribute in the Person, we also have the ability to define the mapping manually. </p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="csharp"><thead><tr><td colspan="2"  class="head">C#</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
</pre></td><td class="de1"><pre class="de1"><span class="kw1">public</span> <span class="kw4">void</span> SelectUsingMappingAndPOCO<span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; <span class="kw1">using</span> <span class="br0">&#40;</span><span class="kw1">var</span> db <span class="sy0">=</span> GetDatabase<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">var</span> results <span class="sy0">=</span> db<span class="sy0">.</span><span class="me1">Query</span><span class="sy0">&lt;</span>Person, Address, Person<span class="sy0">&gt;</span><span class="br0">&#40;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#40;</span>p, a<span class="br0">&#41;</span> <span class="sy0">=&gt;</span> <span class="br0">&#123;</span> p<span class="sy0">.</span><span class="me1">Address</span> <span class="sy0">=</span> a<span class="sy0">;</span> <span class="kw1">return</span> p<span class="sy0">;</span> <span class="br0">&#125;</span>,
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="st_h">@&quot;SELECT Person.*, Address.* </span>
<span class="st_h">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; FROM Person </span>
<span class="st_h">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; INNER JOIN Address ON Person.AddressId = Address.Id </span>
<span class="st_h">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; WHERE Person.lastname=@0&quot;</span>, <span class="st0">&quot;lastname1&quot;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; 
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">foreach</span> <span class="br0">&#40;</span><span class="kw1">var</span> person <span class="kw1">in</span> results<span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Console<span class="sy0">.</span><span class="me1">WriteLine</span><span class="br0">&#40;</span><span class="st0">&quot;Person: {0} {1}&quot;</span>, person<span class="sy0">.</span><span class="me1">LastName</span>, person<span class="sy0">.</span><span class="me1">FirstName</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Console<span class="sy0">.</span><span class="me1">WriteLine</span><span class="br0">&#40;</span><span class="st0">&quot;Address: {0} {1}&quot;</span>, person<span class="sy0">.</span><span class="me1">Address</span><span class="sy0">.</span><span class="me1">Street</span>, person<span class="sy0">.</span><span class="me1">Address</span><span class="sy0">.</span><span class="me1">HouseNumber</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp; &nbsp; <span class="br0">&#125;</span>
<span class="br0">&#125;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">public void SelectUsingMappingAndPOCO() {
	using (var db = GetDatabase()) {
		var results = db.Query&lt;Person, Address, Person&gt;(
					(p, a) =&gt; { p.Address = a; return p; },
					@"SELECT Person.*, Address.* 
						FROM Person 
						INNER JOIN Address ON Person.AddressId = Address.Id 
						WHERE Person.lastname=@0", "lastname1");
		
		foreach (var person in results) {
			Console.WriteLine("Person: {0} {1}", person.LastName, person.FirstName);
			Console.WriteLine("Address: {0} {1}", person.Address.Street, person.Address.HouseNumber);
		}
	}
}</pre></div></div>

<p>While this example achieves the same outcome as the prior one, the ability to provide our own mapping gives us some flexibility to add more complex logic during the mapping process, such as calculating additional field values or adding change tracking.</p>
<h3>Dynamics</h3>
<p>Of course PetaPoco also handles dynamics, however this is limited to outputting a single object to represent the results. This works well if we wanted to present a report view of the data and didn&#8217;t have any column names that repeat:</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="csharp"><thead><tr><td colspan="2"  class="head">C#</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
</pre></td><td class="de1"><pre class="de1"><span class="kw1">public</span> <span class="kw4">void</span> SelectWithDynamics<span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; <span class="kw1">using</span> <span class="br0">&#40;</span><span class="kw1">var</span> db <span class="sy0">=</span> GetDatabase<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">var</span> results <span class="sy0">=</span> db<span class="sy0">.</span><span class="me1">Query</span><span class="sy0">&lt;</span><span class="kw4">dynamic</span><span class="sy0">&gt;</span><span class="br0">&#40;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="st_h">@&quot;SELECT Person.*, Address.Street, Address.HouseNumber </span>
<span class="st_h">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; FROM Person </span>
<span class="st_h">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; INNER JOIN Address ON Person.AddressId = Address.Id </span>
<span class="st_h">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; WHERE Person.lastname=@0&quot;</span>, <span class="st0">&quot;lastname1&quot;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">foreach</span> <span class="br0">&#40;</span><span class="kw1">var</span> person <span class="kw1">in</span> results<span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Console<span class="sy0">.</span><span class="me1">WriteLine</span><span class="br0">&#40;</span><span class="st0">&quot;Person: {0} {1}&quot;</span>, person<span class="sy0">.</span><span class="me1">LastName</span>, person<span class="sy0">.</span><span class="me1">FirstName</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Console<span class="sy0">.</span><span class="me1">WriteLine</span><span class="br0">&#40;</span><span class="st0">&quot;Address: {0} {1}&quot;</span>, person<span class="sy0">.</span><span class="me1">Street</span>, person<span class="sy0">.</span><span class="me1">HouseNumber</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp; &nbsp; <span class="br0">&#125;</span>
<span class="br0">&#125;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">public void SelectWithDynamics() {
	using (var db = GetDatabase()) {
		var results = db.Query&lt;dynamic&gt;(
					@"SELECT Person.*, Address.Street, Address.HouseNumber 
						FROM Person 
						INNER JOIN Address ON Person.AddressId = Address.Id 
						WHERE Person.lastname=@0", "lastname1");

		foreach (var person in results) {
			Console.WriteLine("Person: {0} {1}", person.LastName, person.FirstName);
			Console.WriteLine("Address: {0} {1}", person.Street, person.HouseNumber);
		}
	}
}</pre></div></div>

<p>Instead of a dynamic, we could just as easily create a POCO for this report view, which would then be easy to offer as a service DTO or serializable object. </p>
<h3>One-to-Many</h3>
<p>Switching directions for a moment, let&#8217;s instead query for an address and all of it&#8217;s associated persons. First we&#8217;ll need an updated POCO:</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="csharp"><thead><tr><td colspan="2"  class="head">C#</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
</pre></td><td class="de1"><pre class="de1"><span class="kw1">public</span> <span class="kw4">class</span> AddressWithPeople <span class="sy0">:</span> Address <span class="br0">&#123;</span> 
&nbsp; &nbsp; <span class="kw1">public</span> List<span class="sy0">&lt;</span>Person<span class="sy0">&gt;</span> Persons <span class="br0">&#123;</span> <span class="kw1">get</span><span class="sy0">;</span> <span class="kw1">set</span><span class="sy0">;</span> <span class="br0">&#125;</span>
<span class="br0">&#125;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">public class AddressWithPeople : Address { 
	public List&lt;Person&gt; Persons { get; set; }
}</pre></div></div>

<p>Then with a slightly more complex mapping method, we can map a one-to-many to our new AddressWithPeople and existing Person POCOs:</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="csharp"><thead><tr><td colspan="2"  class="head">C#</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
</pre></td><td class="de1"><pre class="de1"><span class="kw1">public</span> <span class="kw4">void</span> SelectOneToMany<span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; <span class="kw1">using</span> <span class="br0">&#40;</span><span class="kw1">var</span> db <span class="sy0">=</span> GetDatabase<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">var</span> results <span class="sy0">=</span> db<span class="sy0">.</span><span class="me1">Query</span><span class="sy0">&lt;</span>AddressWithPeople, Person, AddressWithPeople<span class="sy0">&gt;</span><span class="br0">&#40;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw3">new</span> AddressToPersonRelator<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">.</span><span class="me1">MapIt</span>,
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="st_h">@&quot;SELECT Address.*, Person.*</span>
<span class="st_h">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; FROM Person </span>
<span class="st_h">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; INNER JOIN Address ON Person.AddressId = Address.Id </span>
<span class="st_h">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; WHERE Address.Id=@0&quot;</span>, <span class="nu0">1</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">foreach</span> <span class="br0">&#40;</span><span class="kw1">var</span> address <span class="kw1">in</span> results<span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Console<span class="sy0">.</span><span class="me1">WriteLine</span><span class="br0">&#40;</span><span class="st0">&quot;Address: {0} {1}&quot;</span>, address<span class="sy0">.</span><span class="me1">Street</span>, address<span class="sy0">.</span><span class="me1">HouseNumber</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">foreach</span><span class="br0">&#40;</span><span class="kw1">var</span> person <span class="kw1">in</span> address<span class="sy0">.</span><span class="me1">Persons</span><span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Console<span class="sy0">.</span><span class="me1">WriteLine</span><span class="br0">&#40;</span><span class="st0">&quot;tPerson: {0} {1}&quot;</span>, person<span class="sy0">.</span><span class="me1">LastName</span>, person<span class="sy0">.</span><span class="me1">FirstName</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp; &nbsp; <span class="br0">&#125;</span>
<span class="br0">&#125;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">public void SelectOneToMany() {
	using (var db = GetDatabase()) {
		var results = db.Query&lt;AddressWithPeople, Person, AddressWithPeople&gt;(
					new AddressToPersonRelator().MapIt,
					@"SELECT Address.*, Person.*
						FROM Person 
						INNER JOIN Address ON Person.AddressId = Address.Id 
						WHERE Address.Id=@0", 1);

		foreach (var address in results) {
			Console.WriteLine("Address: {0} {1}", address.Street, address.HouseNumber);
			foreach(var person in address.Persons)
				Console.WriteLine("tPerson: {0} {1}", person.LastName, person.FirstName);
		}
	}
}</pre></div></div>

<p>Of course, the magic in this case is the tricky part. In order to map the objects from the right side of the result set to the columns from my address on the left, I had to write a custom mapper that would keep track of the Address and add Person records to it while it remained the same. </p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="csharp"><thead><tr><td colspan="2"  class="head">C#</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
</pre></td><td class="de1"><pre class="de1"><span class="kw1">public</span> <span class="kw4">class</span> AddressToPersonRelator <span class="br0">&#123;</span>
&nbsp; &nbsp; <span class="kw1">public</span> AddressWithPeople current<span class="sy0">;</span>
&nbsp; &nbsp; 
&nbsp; &nbsp; <span class="kw1">public</span> AddressWithPeople MapIt<span class="br0">&#40;</span>AddressWithPeople a, Person p<span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">if</span> <span class="br0">&#40;</span>a <span class="sy0">==</span> <span class="kw1">null</span><span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">return</span> current<span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">if</span> <span class="br0">&#40;</span>a <span class="sy0">!=</span> <span class="kw1">null</span> <span class="sy0">&amp;&amp;</span> current <span class="sy0">!=</span> <span class="kw1">null</span> <span class="sy0">&amp;&amp;</span> a<span class="sy0">.</span><span class="me1">Id</span> <span class="sy0">==</span> current<span class="sy0">.</span><span class="me1">Id</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; current<span class="sy0">.</span><span class="me1">Persons</span><span class="sy0">.</span><span class="kw1">Add</span><span class="br0">&#40;</span>p<span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">return</span> <span class="kw1">null</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">var</span> prev <span class="sy0">=</span> current<span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; current <span class="sy0">=</span> a<span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; current<span class="sy0">.</span><span class="me1">Persons</span> <span class="sy0">=</span> <span class="kw3">new</span> List<span class="sy0">&lt;</span>Person<span class="sy0">&gt;</span><span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span> p <span class="br0">&#125;</span><span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">return</span> prev<span class="sy0">;</span>
&nbsp; &nbsp; <span class="br0">&#125;</span>
<span class="br0">&#125;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">public class AddressToPersonRelator {
	public AddressWithPeople current;
	
	public AddressWithPeople MapIt(AddressWithPeople a, Person p) {
		if (a == null)
			return current;

		if (a != null &amp;&amp; current != null &amp;&amp; a.Id == current.Id) {
			current.Persons.Add(p);
			return null;
		}

		var prev = current;
		current = a;
		current.Persons = new List&lt;Person&gt;() { p };

		return prev;
	}
}</pre></div></div>

<p>Even though I mostly copied this code from the official blogs, it was still more work than I would have liked just to map the records. However it wouldn&#8217;t be hard to convert this method to use generics and accept arguments for ID comparison and adding child record to the parent&#8217;s collection. Another option would be to use the <a href="http://nuget.org/packages/PetaPoco.RelationExtensions" title="PetaPoco.RelationExtensions package">PetaPoco.RelationExtensions nuget</a> package, which offers simplified methods for one-to-many and many-to-one mappings.</p>
<h2>Conclusion</h2>
<p>Although Chrissie and I have been posting in parallel, I think we&#8217;ve reached the point where the feature sets diverge. Simple.Data obviously offers a simpler looking syntax for more complex JOINs (especially if we start looking at one-to-many) and offers fluent, LINQ-based syntax. PetaPoco offers a very clean, very simple way to continue to use SQL to get our data and map it into POCOs or dynamics, with the flexibility to do it for us automatically, with help from decorators, or via specified mapping functions (not to mention the blazing performance). Hopefully seeing us play back and forth a bit will have inspired you to play with one or both of these in the future, and don&#8217;t be surprised if you see them reused in some of my future projects as well.</p>
<p>The examples above and several related ones are available in the <a href="https://github.com/tarwn/PetaPocoSample" title="Source on Github">source on GitHub</a> as well as examples of the methods for updates and the upserting Save() method.</p>
]]></content:encoded>
			<wfw:commentRss>/index.php/desktopdev/mstech/csharp/petapoco-mapping-related-objects/feed/</wfw:commentRss>
		<slash:comments>1</slash:comments>
		</item>
		<item>
		<title>More PetaPoco: Id&#8217;s and Multi-POCO queries</title>
		<link>/index.php/desktopdev/mstech/csharp/more-petapoco-id-s-and/</link>
		<comments>/index.php/desktopdev/mstech/csharp/more-petapoco-id-s-and/#comments</comments>
		<pubDate>Wed, 02 May 2012 08:23:00 +0000</pubDate>
		<dc:creator><![CDATA[Eli Weinstock-Herman (tarwn)]]></dc:creator>
				<category><![CDATA[C#]]></category>
		<category><![CDATA[c#]]></category>
		<category><![CDATA[i heard you like followups]]></category>
		<category><![CDATA[micro orm]]></category>
		<category><![CDATA[petapoco]]></category>

		<guid isPermaLink="false">/index.php/2012/05/more-petapoco-id-s-and/</guid>
		<description><![CDATA[So yesterday Chrissie and I did posts on Simple.Data and PetaPoco. Today he followed up with more complex examples, including keys and multiple table queries.

PetaPoco is built specifically with primary keys as a first class citizen, so it will be in&#8230;]]></description>
				<content:encoded><![CDATA[<p>So yesterday Chrissie and I did posts on <a href="/index.php/DesktopDev/MSTech/simple-data-and-vb-net" title="Simple.Data and VB.Net the beginning">Simple.Data</a> and <a href="/index.php/DesktopDev/MSTech/CSharp/playing-with-petapoco" title="Playing with PetaPoco">PetaPoco</a>. Today he <a href="/index.php/DesktopDev/MSTech/more-simple-data-with-vb" title="More Simple.Data with VB.Net: adding fields and tables">followed up</a> with more complex examples, including keys and multiple table queries.</p>
<p>PetaPoco is built specifically with primary keys as a first class citizen, so it will be interesting to see how it compares.</p>
<h2>Adding a column</h2>
<p>Like Simple.Data, adding a column to our database table is no problem at all. First lets add the column to our database, then we&#8217;ll look at how that affects both our existing code and an updated POCO with a matching field.</p>
<p>Like before, I&#8217;ll use the more concise syntax of PetaPoco to add the column instead of the standard ADO logic:</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="csharp"><thead><tr><td colspan="2"  class="head">C#</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
</pre></td><td class="de1"><pre class="de1"><span class="kw1">private</span> <span class="kw4">void</span> CreateTable<span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; <span class="kw1">using</span> <span class="br0">&#40;</span><span class="kw1">var</span> db <span class="sy0">=</span> <span class="kw3">new</span> Database<span class="br0">&#40;</span><span class="st0">&quot;DataSource=&quot;</span>test<span class="sy0">.</span><span class="me1">sdf</span><span class="st0">&quot;; Password=&quot;</span>chrissiespassword<span class="st0">&quot;&quot;</span>, <span class="st0">&quot;System.Data.SqlServerCe.4.0&quot;</span><span class="br0">&#41;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; db<span class="sy0">.</span><span class="me1">Execute</span><span class="br0">&#40;</span><span class="st0">&quot;CREATE TABLE Person (Id int IDENTITY(1,1) PRIMARY KEY, LastName nvarchar (40) NOT NULL, FirstName nvarchar (40));&quot;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; <span class="br0">&#125;</span>
<span class="br0">&#125;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">private void CreateTable() {
	using (var db = new Database("DataSource="test.sdf"; Password="chrissiespassword"", "System.Data.SqlServerCe.4.0")) {
		db.Execute("CREATE TABLE Person (Id int IDENTITY(1,1) PRIMARY KEY, LastName nvarchar (40) NOT NULL, FirstName nvarchar (40));");
	}
}</pre></div></div>

<p>After adding this additional column, we can still use the original POCO as PetaPoco will map the columns that are present in the POCO without complaining about leftovers. In the case where we allowed PetaPoco to build the query for us, we get more concise SQL that only queries for the columns  with matching properties in that smaller POCO class:</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="csharp"><thead><tr><td colspan="2"  class="head">C#</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
</pre></td><td class="de1"><pre class="de1"><span class="co1">// SQL = SELECT [Person].[LastName], [Person].[FirstName] FROM [Person] WHERE lastname=@0</span>
<span class="kw1">private</span> <span class="kw4">void</span> SelectDecoratedRecords<span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; <span class="kw1">using</span> <span class="br0">&#40;</span><span class="kw1">var</span> db <span class="sy0">=</span> GetDatabase<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">var</span> results <span class="sy0">=</span> db<span class="sy0">.</span><span class="me1">Query</span><span class="sy0">&lt;</span>DecoratedPerson<span class="sy0">&gt;</span><span class="br0">&#40;</span><span class="st0">&quot;WHERE lastname=@0&quot;</span>, <span class="st0">&quot;lastname1&quot;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; <span class="br0">&#125;</span>
<span class="br0">&#125;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">// SQL = SELECT [Person].[LastName], [Person].[FirstName] FROM [Person] WHERE lastname=@0
private void SelectDecoratedRecords() {
	using (var db = GetDatabase()) {
		var results = db.Query&lt;DecoratedPerson&gt;("WHERE lastname=@0", "lastname1");
	}
}</pre></div></div>

<p>Now let&#8217;s add the new column to both our raw POCO and the decorated POCO:</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="csharp"><thead><tr><td colspan="2"  class="head">C#</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
</pre></td><td class="de1"><pre class="de1">&nbsp; &nbsp; <span class="kw1">public</span> <span class="kw4">class</span> Person <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">public</span> <span class="kw4">int</span> Id <span class="br0">&#123;</span> <span class="kw1">get</span><span class="sy0">;</span> <span class="kw1">set</span><span class="sy0">;</span> <span class="br0">&#125;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">public</span> <span class="kw4">string</span> LastName <span class="br0">&#123;</span> <span class="kw1">get</span><span class="sy0">;</span> <span class="kw1">set</span><span class="sy0">;</span> <span class="br0">&#125;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">public</span> <span class="kw4">string</span> FirstName <span class="br0">&#123;</span> <span class="kw1">get</span><span class="sy0">;</span> <span class="kw1">set</span><span class="sy0">;</span> <span class="br0">&#125;</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">public</span> <span class="kw1">override</span> <span class="kw4">string</span> ToString<span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">return</span> <span class="kw4">String</span><span class="sy0">.</span><span class="me1">Format</span><span class="br0">&#40;</span><span class="st0">&quot;{0}: {1}, {2}&quot;</span>, Id, LastName, FirstName<span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp;
&nbsp; &nbsp; <span class="br0">&#91;</span>TableName<span class="br0">&#40;</span><span class="st0">&quot;Person&quot;</span><span class="br0">&#41;</span><span class="br0">&#93;</span>
&nbsp; &nbsp; <span class="br0">&#91;</span>PrimaryKey<span class="br0">&#40;</span><span class="st0">&quot;Id&quot;</span>,autoIncrement<span class="sy0">=</span><span class="kw1">true</span><span class="br0">&#41;</span><span class="br0">&#93;</span>
&nbsp; &nbsp; <span class="kw1">public</span> <span class="kw4">class</span> DecoratedPerson <span class="sy0">:</span> Person <span class="br0">&#123;</span> <span class="br0">&#125;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">	public class Person {
		public int Id { get; set; }
		public string LastName { get; set; }
		public string FirstName { get; set; }

		public override string ToString() {
			return String.Format("{0}: {1}, {2}", Id, LastName, FirstName);
		}
	}

	[TableName("Person")]
	[PrimaryKey("Id",autoIncrement=true)]
	public class DecoratedPerson : Person { }</pre></div></div>

<p>Without changing of the logic, the function from above will populate the extra column in our non-decorated POCO and the SQL generated by the short query version above will now include the Id column:</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="csharp"><thead><tr><td colspan="2"  class="head">C#</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
</pre></td><td class="de1"><pre class="de1"><span class="co1">//SQL: SELECT * FROM Person WHERE lastname=@0</span>
<span class="kw1">private</span> <span class="kw4">void</span> SelectRecords<span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; <span class="kw1">using</span> <span class="br0">&#40;</span><span class="kw1">var</span> db <span class="sy0">=</span> GetDatabase<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">var</span> results <span class="sy0">=</span> db<span class="sy0">.</span><span class="me1">Query</span><span class="sy0">&lt;</span>Person<span class="sy0">&gt;</span><span class="br0">&#40;</span><span class="st0">&quot;SELECT * FROM Person WHERE lastname=@0&quot;</span>, <span class="st0">&quot;lastname1&quot;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; <span class="br0">&#125;</span>
<span class="br0">&#125;</span>
&nbsp;
<span class="co1">//SQL: SELECT [Person].[Id], [Person].[LastName], [Person].[FirstName] FROM [Person] WHERE lastname=@0</span>
<span class="kw1">private</span> <span class="kw4">void</span> SelectDecoratedRecords<span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; <span class="kw1">using</span> <span class="br0">&#40;</span><span class="kw1">var</span> db <span class="sy0">=</span> GetDatabase<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">var</span> results <span class="sy0">=</span> db<span class="sy0">.</span><span class="me1">Query</span><span class="sy0">&lt;</span>DecoratedPerson<span class="sy0">&gt;</span><span class="br0">&#40;</span><span class="st0">&quot;WHERE lastname=@0&quot;</span>, <span class="st0">&quot;lastname1&quot;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; <span class="br0">&#125;</span>
<span class="br0">&#125;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">//SQL: SELECT * FROM Person WHERE lastname=@0
private void SelectRecords() {
	using (var db = GetDatabase()) {
		var results = db.Query&lt;Person&gt;("SELECT * FROM Person WHERE lastname=@0", "lastname1");
	}
}

//SQL: SELECT [Person].[Id], [Person].[LastName], [Person].[FirstName] FROM [Person] WHERE lastname=@0
private void SelectDecoratedRecords() {
	using (var db = GetDatabase()) {
		var results = db.Query&lt;DecoratedPerson&gt;("WHERE lastname=@0", "lastname1");
	}
}</pre></div></div>

<p>Yesterdays third insert option, using an undecorated object and counting on reflection to match up columns to properties, will fail now because it will attempt to insert a value into that ID field, but using it in a select would still work. The first option, where we supplied the name of the table, will have to be updated to also supply the name of the ID and a boolean to indicate that it is autoincrementing. The second option, inserting the decorated object, requires no changes at all. </p>
<h2>Adding a Table</h2>
<p>Following Chrissie&#8217;s lead, lets add an address table and an undeclared foreign key relationship from the Person table (I have to tease him about something).</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="csharp"><thead><tr><td colspan="2"  class="head">C#</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
</pre></td><td class="de1"><pre class="de1"><span class="kw1">private</span> <span class="kw4">void</span> CreateTables<span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; <span class="kw1">using</span> <span class="br0">&#40;</span><span class="kw1">var</span> db <span class="sy0">=</span> <span class="kw3">new</span> Database<span class="br0">&#40;</span><span class="st0">&quot;DataSource=&quot;</span>test<span class="sy0">.</span><span class="me1">sdf</span><span class="st0">&quot;; Password=&quot;</span>chrissiespassword<span class="st0">&quot;&quot;</span>, <span class="st0">&quot;System.Data.SqlServerCe.4.0&quot;</span><span class="br0">&#41;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; db<span class="sy0">.</span><span class="me1">Execute</span><span class="br0">&#40;</span><span class="st0">&quot;CREATE TABLE Person (Id int IDENTITY(1,1) PRIMARY KEY, LastName nvarchar (40) NOT NULL, FirstName nvarchar (40), AddressId int NOT NULL);&quot;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; db<span class="sy0">.</span><span class="me1">Execute</span><span class="br0">&#40;</span><span class="st0">&quot;CREATE TABLE Address (Id int IDENTITY(1,1) PRIMARY KEY, Street nvarchar (40) NOT NULL, HouseNumber nvarchar (10));&quot;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; <span class="br0">&#125;</span>
<span class="br0">&#125;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">private void CreateTables() {
	using (var db = new Database("DataSource="test.sdf"; Password="chrissiespassword"", "System.Data.SqlServerCe.4.0")) {
		db.Execute("CREATE TABLE Person (Id int IDENTITY(1,1) PRIMARY KEY, LastName nvarchar (40) NOT NULL, FirstName nvarchar (40), AddressId int NOT NULL);");
		db.Execute("CREATE TABLE Address (Id int IDENTITY(1,1) PRIMARY KEY, Street nvarchar (40) NOT NULL, HouseNumber nvarchar (10));");
	}
}</pre></div></div>

<p>And I will add an additional Person POCO to reflect the new column, as well as an Address POCO to reflect the new table. The simpler query logic is addictive, so I&#8217;ve decorated both POCOs (I&#8217;ll explain the ResultColumn later):</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="csharp"><thead><tr><td colspan="2"  class="head">C#</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
</pre></td><td class="de1"><pre class="de1"><span class="br0">&#91;</span>TableName<span class="br0">&#40;</span><span class="st0">&quot;Person&quot;</span><span class="br0">&#41;</span><span class="br0">&#93;</span>
<span class="br0">&#91;</span>PrimaryKey<span class="br0">&#40;</span><span class="st0">&quot;Id&quot;</span>, autoIncrement <span class="sy0">=</span> <span class="kw1">true</span><span class="br0">&#41;</span><span class="br0">&#93;</span>
<span class="kw1">public</span> <span class="kw4">class</span> Person <span class="br0">&#123;</span>
&nbsp; &nbsp; <span class="kw1">public</span> <span class="kw4">int</span> Id <span class="br0">&#123;</span> <span class="kw1">get</span><span class="sy0">;</span> <span class="kw1">set</span><span class="sy0">;</span> <span class="br0">&#125;</span>
&nbsp; &nbsp; <span class="kw1">public</span> <span class="kw4">string</span> LastName <span class="br0">&#123;</span> <span class="kw1">get</span><span class="sy0">;</span> <span class="kw1">set</span><span class="sy0">;</span> <span class="br0">&#125;</span>
&nbsp; &nbsp; <span class="kw1">public</span> <span class="kw4">string</span> FirstName <span class="br0">&#123;</span> <span class="kw1">get</span><span class="sy0">;</span> <span class="kw1">set</span><span class="sy0">;</span> <span class="br0">&#125;</span>
&nbsp; &nbsp; <span class="kw1">public</span> <span class="kw4">int</span> AddressId <span class="br0">&#123;</span> <span class="kw1">get</span><span class="sy0">;</span> <span class="kw1">set</span><span class="sy0">;</span> <span class="br0">&#125;</span>
&nbsp; &nbsp; <span class="br0">&#91;</span>ResultColumn<span class="br0">&#93;</span> <span class="kw1">public</span> Address Address <span class="br0">&#123;</span> <span class="kw1">get</span><span class="sy0">;</span> <span class="kw1">set</span><span class="sy0">;</span> <span class="br0">&#125;</span>
&nbsp;
&nbsp; &nbsp; <span class="kw1">public</span> <span class="kw1">override</span> <span class="kw4">string</span> ToString<span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">return</span> <span class="kw4">String</span><span class="sy0">.</span><span class="me1">Format</span><span class="br0">&#40;</span><span class="st0">&quot;{0}: {1}, {2}&quot;</span>, Id, LastName, FirstName<span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; <span class="br0">&#125;</span>
<span class="br0">&#125;</span>
&nbsp;
<span class="br0">&#91;</span>TableName<span class="br0">&#40;</span><span class="st0">&quot;Address&quot;</span><span class="br0">&#41;</span><span class="br0">&#93;</span>
<span class="br0">&#91;</span>PrimaryKey<span class="br0">&#40;</span><span class="st0">&quot;Id&quot;</span>, autoIncrement <span class="sy0">=</span> <span class="kw1">true</span><span class="br0">&#41;</span><span class="br0">&#93;</span>
<span class="kw1">public</span> <span class="kw4">class</span> Address <span class="br0">&#123;</span>
&nbsp; &nbsp; <span class="kw1">public</span> <span class="kw4">int</span> Id <span class="br0">&#123;</span> <span class="kw1">get</span><span class="sy0">;</span> <span class="kw1">set</span><span class="sy0">;</span> <span class="br0">&#125;</span>
&nbsp; &nbsp; <span class="kw1">public</span> <span class="kw4">string</span> Street <span class="br0">&#123;</span> <span class="kw1">get</span><span class="sy0">;</span> <span class="kw1">set</span><span class="sy0">;</span> <span class="br0">&#125;</span>
&nbsp; &nbsp; <span class="kw1">public</span> <span class="kw4">string</span> HouseNumber <span class="br0">&#123;</span> <span class="kw1">get</span><span class="sy0">;</span> <span class="kw1">set</span><span class="sy0">;</span> <span class="br0">&#125;</span>
<span class="br0">&#125;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">[TableName("Person")]
[PrimaryKey("Id", autoIncrement = true)]
public class Person {
	public int Id { get; set; }
	public string LastName { get; set; }
	public string FirstName { get; set; }
	public int AddressId { get; set; }
	[ResultColumn] public Address Address { get; set; }

	public override string ToString() {
		return String.Format("{0}: {1}, {2}", Id, LastName, FirstName);
	}
}

[TableName("Address")]
[PrimaryKey("Id", autoIncrement = true)]
public class Address {
	public int Id { get; set; }
	public string Street { get; set; }
	public string HouseNumber { get; set; }
}</pre></div></div>

<p>Following Chrissie&#8217;s lead, I&#8217;ll query for the related records separately first:</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="csharp"><thead><tr><td colspan="2"  class="head">C#</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
</pre></td><td class="de1"><pre class="de1"><span class="kw1">public</span> <span class="kw4">void</span> QuerySeperately<span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; <span class="co1">// already called CreateDatabase()</span>
&nbsp; &nbsp; <span class="co1">// already called CreateTables()</span>
&nbsp; &nbsp; <span class="kw1">using</span> <span class="br0">&#40;</span><span class="kw1">var</span> db <span class="sy0">=</span> GetDatabase<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; db<span class="sy0">.</span><span class="me1">Insert</span><span class="br0">&#40;</span><span class="kw3">new</span> Address<span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span> Street <span class="sy0">=</span> <span class="st0">&quot;street1&quot;</span>, HouseNumber <span class="sy0">=</span> <span class="st0">&quot;1&quot;</span> <span class="br0">&#125;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; db<span class="sy0">.</span><span class="me1">Insert</span><span class="br0">&#40;</span><span class="kw3">new</span> Person<span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span> LastName <span class="sy0">=</span> <span class="st0">&quot;lastname1&quot;</span>, FirstName <span class="sy0">=</span> <span class="st0">&quot;firstname1&quot;</span>, AddressId <span class="sy0">=</span> <span class="nu0">1</span> <span class="br0">&#125;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; db<span class="sy0">.</span><span class="me1">Insert</span><span class="br0">&#40;</span><span class="kw3">new</span> Person<span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span> LastName <span class="sy0">=</span> <span class="st0">&quot;lastname2&quot;</span>, FirstName <span class="sy0">=</span> <span class="st0">&quot;firstname2&quot;</span>, AddressId <span class="sy0">=</span> <span class="nu0">1</span> <span class="br0">&#125;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">var</span> results <span class="sy0">=</span> db<span class="sy0">.</span><span class="me1">Query</span><span class="sy0">&lt;</span>Person<span class="sy0">&gt;</span><span class="br0">&#40;</span><span class="st0">&quot;WHERE LastName=@0&quot;</span>, <span class="st0">&quot;lastname1&quot;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">foreach</span> <span class="br0">&#40;</span><span class="kw1">var</span> person <span class="kw1">in</span> results<span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Console<span class="sy0">.</span><span class="me1">WriteLine</span><span class="br0">&#40;</span><span class="st0">&quot;Person: {0} {1} {2}&quot;</span>, person<span class="sy0">.</span><span class="me1">Id</span>, person<span class="sy0">.</span><span class="me1">LastName</span>, person<span class="sy0">.</span><span class="me1">FirstName</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">var</span> address <span class="sy0">=</span> db<span class="sy0">.</span><span class="me1">Single</span><span class="sy0">&lt;</span>Address<span class="sy0">&gt;</span><span class="br0">&#40;</span><span class="st0">&quot;Where Id=@0&quot;</span>, person<span class="sy0">.</span><span class="me1">AddressId</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Console<span class="sy0">.</span><span class="me1">WriteLine</span><span class="br0">&#40;</span><span class="st0">&quot;Address: {0} {1}&quot;</span>, address<span class="sy0">.</span><span class="me1">Street</span>, address<span class="sy0">.</span><span class="me1">HouseNumber</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw4">int</span> count <span class="sy0">=</span> db<span class="sy0">.</span><span class="me1">ExecuteScalar</span><span class="sy0">&lt;</span><span class="kw4">int</span><span class="sy0">&gt;</span><span class="br0">&#40;</span><span class="st0">&quot;SELECT COUNT(*) FROM Person WHERE LastName=@0&quot;</span>, <span class="st0">&quot;lastname1&quot;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; Console<span class="sy0">.</span><span class="me1">WriteLine</span><span class="br0">&#40;</span><span class="st0">&quot;Count: &quot;</span> <span class="sy0">+</span> count<span class="sy0">.</span><span class="me1">ToString</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; <span class="br0">&#125;</span>
<span class="br0">&#125;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">public void QuerySeperately() {
	// already called CreateDatabase()
	// already called CreateTables()
	using (var db = GetDatabase()) {
		db.Insert(new Address() { Street = "street1", HouseNumber = "1" });
		db.Insert(new Person() { LastName = "lastname1", FirstName = "firstname1", AddressId = 1 });
		db.Insert(new Person() { LastName = "lastname2", FirstName = "firstname2", AddressId = 1 });

		var results = db.Query&lt;Person&gt;("WHERE LastName=@0", "lastname1");
		foreach (var person in results) {
			Console.WriteLine("Person: {0} {1} {2}", person.Id, person.LastName, person.FirstName);
			var address = db.Single&lt;Address&gt;("Where Id=@0", person.AddressId);
			Console.WriteLine("Address: {0} {1}", address.Street, address.HouseNumber);
		}

		int count = db.ExecuteScalar&lt;int&gt;("SELECT COUNT(*) FROM Person WHERE LastName=@0", "lastname1");
		Console.WriteLine("Count: " + count.ToString());
	}
}</pre></div></div>

<p>As he pointed out, this method doesn&#8217;t perform well. We can replace this with a single query using the <a href="http://www.toptensoftware.com/Articles/111/PetaPoco-Experimental-Multi-Poco-Queries" title="Read more about this at TopTen Software">Multi-POCO</a> support.</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="csharp"><thead><tr><td colspan="2"  class="head">C#</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
</pre></td><td class="de1"><pre class="de1"><span class="kw1">public</span> <span class="kw4">void</span> QueryMultiStyle<span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span> 
&nbsp; &nbsp; <span class="co1">// already called CreateDatabase()</span>
&nbsp; &nbsp; <span class="co1">// already called CreateTables()</span>
&nbsp; &nbsp; <span class="kw1">using</span> <span class="br0">&#40;</span><span class="kw1">var</span> db <span class="sy0">=</span> GetDatabase<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; db<span class="sy0">.</span><span class="me1">Insert</span><span class="br0">&#40;</span><span class="kw3">new</span> Address<span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span> Street <span class="sy0">=</span> <span class="st0">&quot;street1&quot;</span>, HouseNumber <span class="sy0">=</span> <span class="st0">&quot;1&quot;</span> <span class="br0">&#125;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; db<span class="sy0">.</span><span class="me1">Insert</span><span class="br0">&#40;</span><span class="kw3">new</span> Person<span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span> LastName <span class="sy0">=</span> <span class="st0">&quot;lastname1&quot;</span>, FirstName <span class="sy0">=</span> <span class="st0">&quot;firstname1&quot;</span>, AddressId <span class="sy0">=</span> <span class="nu0">1</span> <span class="br0">&#125;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; db<span class="sy0">.</span><span class="me1">Insert</span><span class="br0">&#40;</span><span class="kw3">new</span> Person<span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span> LastName <span class="sy0">=</span> <span class="st0">&quot;lastname1&quot;</span>, FirstName <span class="sy0">=</span> <span class="st0">&quot;firstname2&quot;</span>, AddressId <span class="sy0">=</span> <span class="nu0">1</span> <span class="br0">&#125;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">var</span> results <span class="sy0">=</span> db<span class="sy0">.</span><span class="me1">Query</span><span class="sy0">&lt;</span>Person, Address<span class="sy0">&gt;</span><span class="br0">&#40;</span><span class="st_h">@&quot;</span>
<span class="st_h">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; SELECT Person.*, Address.* </span>
<span class="st_h">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; FROM Person </span>
<span class="st_h">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; INNER JOIN Address ON Person.AddressId = Address.Id </span>
<span class="st_h">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; WHERE Person.lastname=@0&quot;</span>, <span class="st0">&quot;lastname1&quot;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">foreach</span> <span class="br0">&#40;</span><span class="kw1">var</span> person <span class="kw1">in</span> results<span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Console<span class="sy0">.</span><span class="me1">WriteLine</span><span class="br0">&#40;</span><span class="st0">&quot;Person: {0} {1}&quot;</span>, person<span class="sy0">.</span><span class="me1">LastName</span>, person<span class="sy0">.</span><span class="me1">FirstName</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Console<span class="sy0">.</span><span class="me1">WriteLine</span><span class="br0">&#40;</span><span class="st0">&quot;Address: {0} {1}&quot;</span>, person<span class="sy0">.</span><span class="me1">Address</span><span class="sy0">.</span><span class="me1">Street</span>, person<span class="sy0">.</span><span class="me1">Address</span><span class="sy0">.</span><span class="me1">HouseNumber</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp; &nbsp; <span class="br0">&#125;</span>
<span class="br0">&#125;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">public void QueryMultiStyle() { 
	// already called CreateDatabase()
	// already called CreateTables()
	using (var db = GetDatabase()) {
		db.Insert(new Address() { Street = "street1", HouseNumber = "1" });
		db.Insert(new Person() { LastName = "lastname1", FirstName = "firstname1", AddressId = 1 });
		db.Insert(new Person() { LastName = "lastname1", FirstName = "firstname2", AddressId = 1 });

		var results = db.Query&lt;Person, Address&gt;(@"
							  SELECT Person.*, Address.* 
							  FROM Person 
								INNER JOIN Address ON Person.AddressId = Address.Id 
							  WHERE Person.lastname=@0", "lastname1");
		foreach (var person in results) {
			Console.WriteLine("Person: {0} {1}", person.LastName, person.FirstName);
			Console.WriteLine("Address: {0} {1}", person.Address.Street, person.Address.HouseNumber);
		}
	}
}</pre></div></div>

<p>PetaPoco has the ability to map the results of JOINs to several objects, but it&#8217;s kind of tricky. The simplest method is to return the fields in the same order as the generic object list. What PetaPoco then does is attempt to process each column in the result from left to right, moving to the next object in line when it reaches a column that doesn&#8217;t exist in the first or has already been populated. So in this case, because both of the tables and POCOs have an &#8220;Id&#8221;, when the result set reaches the second id it makes the logical conclusion that it is time to start mapping the Address object. PetaPoco uses type detection in the Person object to locate a property to assign the Address instance to.</p>
<p>There is also more extensive capabilities available to use lambdas to manage the multi-POCO mapping on our own, and if we wanted to we could easily define a single POCO object that had all the necessary fields for both tables. Logic for <a href="http://www.toptensoftware.com/Articles/115/PetaPoco-Mapping-One-to-Many-and-Many-to-One-Relationships" title="PetaPoco - Mapping One-to-Many and Many-to-One Relationships">One-to-many joins</a> is more complex and I haven&#8217;t had time to dig fully into the intricacies yet.</p>
<p>The last trick was the ResultColumn attribute I used above. By default PetaPoco assumes that all of the properties in our POCO are going to be inserted into the database. ResultColumn properties are ignored for inserts and updates, but can still be selected into. In this case I&#8217;m using it to have PetaPoco ignore the column, but the real purpose would be to allow me to return an additional calculated column, aggregate, or other value that wouldn&#8217;t have meaning in an INSERT or UPDATE. </p>
<p><i>Note: There is an Ignore attribute that would have worked just as well and been a better fit, but then I wouldn&#8217;t have had a chance to talk about the ResultColumn <img src="https://s.w.org/images/core/emoji/2/72x72/1f642.png" alt="🙂" class="wp-smiley" style="height: 1em; max-height: 1em;" /></i></p>
<h2>Conclusion</h2>
<p>So there we go. We can add auto-incrementing IDs very easily, PetaPoco is smart enough to map partial objects, and there is some really neat stuff available for multi-POCO joins. I&#8217;ve continued to update the <a href="https://github.com/tarwn/PetaPocoSample" title="Sample code on github">github repository</a>, so feel free to grab a copy of the code and play around with yourself.</p>
]]></content:encoded>
			<wfw:commentRss>/index.php/desktopdev/mstech/csharp/more-petapoco-id-s-and/feed/</wfw:commentRss>
		<slash:comments>5</slash:comments>
		</item>
		<item>
		<title>Playing with PetaPoco</title>
		<link>/index.php/desktopdev/mstech/csharp/playing-with-petapoco/</link>
		<comments>/index.php/desktopdev/mstech/csharp/playing-with-petapoco/#comments</comments>
		<pubDate>Sun, 29 Apr 2012 12:40:00 +0000</pubDate>
		<dc:creator><![CDATA[Eli Weinstock-Herman (tarwn)]]></dc:creator>
				<category><![CDATA[C#]]></category>
		<category><![CDATA[c#]]></category>
		<category><![CDATA[lazy sunday]]></category>
		<category><![CDATA[micro orm]]></category>
		<category><![CDATA[petapoco]]></category>

		<guid isPermaLink="false">/index.php/2012/04/playing-with-petapoco/</guid>
		<description><![CDATA[Since Chrissie is playing around with Simple.Data today, I found some time to play with PetaPoco. PetaPoco is a single file micro ORM that uses MSIL generation to do it's magic. As the name suggests, it works with concrete POCOs, though support for dyna&#8230;]]></description>
				<content:encoded><![CDATA[<p>Since Chrissie is playing around with <a href="/index.php/DesktopDev/MSTech/simple-data-and-vb-net" title="Read Chrissie's post">Simple.Data</a> today, I found some time to play with <a href="http://www.toptensoftware.com/petapoco/" title="Main Site for PetaPoco">PetaPoco</a>. PetaPoco is a single file micro ORM that uses MSIL generation to do it&#8217;s magic. As the name suggests, it works with concrete POCOs, though support for dynamics is also being tested. It is designed to be fast and doesn&#8217;t try to reimplement SQL, so double win in my book. PetaPoco was created by Brad Robinson (<a href="http://www.toptensoftware.com/blog/" title="topten software blog">b</a> | <a href="http://twitter.com/toptensoftware" title="TopTenSoftware on twitter">t</a>).</p>
<p>It has been on my list to try for a while, so today seemed like a good day for it.</p>
<h2>Setting it up</h2>
<p>Setup is simple using Nuget:</p>
<ul>
<li>Install-Package <a href="http://nuget.org/List/Packages/PetaPoco" title="PetaPoco on nuget">PetaPoco</a></li>
<li>Install-Package <a href="http://nuget.org/packages/SqlServerCompact"
 title="SqlServerCompact on nuget">SqlServerCompact</a></li>
</ul>
<p>PetaPoco comes with a T4 template to generate POCOs from a database, all you have to do is add a connection string to your config and run the transform. This is a neat feature, but I didn&#8217;t plan to use it for this post so I excluded the files from my project.</p>
<p>PetaPoco supports SQL Server, SQL Server CE, MySQL, PostgreSQL and Oracle, and works with .Net 3.5 and Mono 2.6 forward. Documentation is available via the <a href="http://www.toptensoftware.com/petapoco/" title="PetaPoco main page">Main Page</a> and <a href="http://www.toptensoftware.com/Categories/PetaPoco" title="PetaPoco blog posts">blog posts</a>.</p>
<p>As Chrissie did in his post, we&#8217;re going to first create a Compact SQL database, except we&#8217;ll be doing it in C#.</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="csharp"><thead><tr><td colspan="2"  class="head">C#</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
</pre></td><td class="de1"><pre class="de1"><span class="kw1">private</span> SqlCeEngine CreateDatabase<span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; <span class="kw1">if</span> <span class="br0">&#40;</span>File<span class="sy0">.</span><span class="me1">Exists</span><span class="br0">&#40;</span><span class="st0">&quot;test.sdf&quot;</span><span class="br0">&#41;</span><span class="br0">&#41;</span> File<span class="sy0">.</span><span class="me1">Delete</span><span class="br0">&#40;</span><span class="st0">&quot;test.sdf&quot;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; <span class="kw4">string</span> connectionString <span class="sy0">=</span> <span class="st0">&quot;DataSource=&quot;</span>test<span class="sy0">.</span><span class="me1">sdf</span><span class="st0">&quot;; Password=&quot;</span>chrissiespassword<span class="st0">&quot;&quot;</span><span class="sy0">;</span>
&nbsp; &nbsp; <span class="kw1">var</span> en <span class="sy0">=</span> <span class="kw3">new</span> SqlCeEngine<span class="br0">&#40;</span>connectionString<span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; en<span class="sy0">.</span><span class="me1">CreateDatabase</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; <span class="kw1">return</span> en<span class="sy0">;</span>
<span class="br0">&#125;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">private SqlCeEngine CreateDatabase() {
	if (File.Exists("test.sdf")) File.Delete("test.sdf");

	string connectionString = "DataSource="test.sdf"; Password="chrissiespassword"";
	var en = new SqlCeEngine(connectionString);
	en.CreateDatabase();
	return en;
}</pre></div></div>

<p>Now that we have Chrissie&#8217;s database, lets add his table.</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="csharp"><thead><tr><td colspan="2"  class="head">C#</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
</pre></td><td class="de1"><pre class="de1"><span class="kw1">private</span> <span class="kw4">void</span> CreateTable<span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; <span class="kw1">using</span> <span class="br0">&#40;</span><span class="kw1">var</span> db <span class="sy0">=</span> <span class="kw3">new</span> Database<span class="br0">&#40;</span><span class="st0">&quot;DataSource=&quot;</span>test<span class="sy0">.</span><span class="me1">sdf</span><span class="st0">&quot;; Password=&quot;</span>chrissiespassword<span class="st0">&quot;&quot;</span>, <span class="st0">&quot;System.Data.SqlServerCe.4.0&quot;</span><span class="br0">&#41;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; db<span class="sy0">.</span><span class="me1">Execute</span><span class="br0">&#40;</span><span class="st0">&quot;CREATE TABLE Person (LastName nvarchar (40) NOT NULL, FirstName nvarchar (40))&quot;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; <span class="br0">&#125;</span>
<span class="br0">&#125;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">private void CreateTable() {
	using (var db = new Database("DataSource="test.sdf"; Password="chrissiespassword"", "System.Data.SqlServerCe.4.0")) {
		db.Execute("CREATE TABLE Person (LastName nvarchar (40) NOT NULL, FirstName nvarchar (40))");
	}
}</pre></div></div>

<p>This statement was quite a bit shorter using PetaPoco then it was with Simple.Data. The Database object takes care of the connection and command work for us, leaving us just the bits that are specific to our individual scenario. We still have the option of providing an IDbConnection if we want, which would be handy if we were using something like Sam Saffron&#8217;s <a href="http://miniprofiler.com/" title="MiniProfiler">MiniProfiler</a> and wanted to pass in a profiled connection object.</p>
<p>Because we want to play with concrete POCOs, I&#8217;m going to add a very plain POCO and a very basic decorated POCO:</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="csharp"><thead><tr><td colspan="2"  class="head">C#</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
</pre></td><td class="de1"><pre class="de1"><span class="kw1">public</span> <span class="kw4">class</span> Person <span class="br0">&#123;</span>
&nbsp; &nbsp; <span class="kw1">public</span> <span class="kw4">string</span> LastName <span class="br0">&#123;</span> <span class="kw1">get</span><span class="sy0">;</span> <span class="kw1">set</span><span class="sy0">;</span> <span class="br0">&#125;</span>
&nbsp; &nbsp; <span class="kw1">public</span> <span class="kw4">string</span> FirstName <span class="br0">&#123;</span> <span class="kw1">get</span><span class="sy0">;</span> <span class="kw1">set</span><span class="sy0">;</span> <span class="br0">&#125;</span>
<span class="br0">&#125;</span>
&nbsp;
<span class="br0">&#91;</span>PetaPoco<span class="sy0">.</span><span class="me1">TableName</span><span class="br0">&#40;</span><span class="st0">&quot;Person&quot;</span><span class="br0">&#41;</span><span class="br0">&#93;</span>
<span class="kw1">public</span> <span class="kw4">class</span> DecoratedPerson <span class="sy0">:</span> Person <span class="br0">&#123;</span> <span class="br0">&#125;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">public class Person {
	public string LastName { get; set; }
	public string FirstName { get; set; }
}

[PetaPoco.TableName("Person")]
public class DecoratedPerson : Person { }</pre></div></div>

<p>There are also attributes for the primary key* and the ability to explicitly define columns so PetaPoco will know which columns should be included in queries and which should not.</p>
<p><i>I have to say I was surprised Chrissie didn&#8217;t include a Primary Key given how many DBAs and DB Developers also blog here, brave man <img src="https://s.w.org/images/core/emoji/2/72x72/1f609.png" alt="😉" class="wp-smiley" style="height: 1em; max-height: 1em;" /></i></p>
<p>So as chrissie pointed out in his post, we&#8217;ve got the basic setup behind us and can now move forward to interacting with our new database.</p>
<h2>PetaPoco</h2>
<p>With a database created, lets go ahead and add some data to play with.</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="csharp"><thead><tr><td colspan="2"  class="head">C#</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
</pre></td><td class="de1"><pre class="de1">db<span class="sy0">.</span><span class="me1">Insert</span><span class="br0">&#40;</span><span class="st0">&quot;Person&quot;</span>, <span class="kw1">null</span>, <span class="kw3">new</span> Person<span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span> LastName <span class="sy0">=</span> <span class="st0">&quot;lastname1&quot;</span>, FirstName <span class="sy0">=</span> <span class="st0">&quot;firstname1&quot;</span> <span class="br0">&#125;</span><span class="br0">&#41;</span><span class="sy0">;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">db.Insert("Person", null, new Person() { LastName = "lastname1", FirstName = "firstname1" });</pre></div></div>

<p>The first overload of the Insert() method takes a table name, primary key name, and the POCO instance to insert. if we don&#8217;t mind add some decoration to our Person object, we can decorate the POCO with the table name and shrink it to this:</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="csharp"><thead><tr><td colspan="2"  class="head">C#</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
</pre></td><td class="de1"><pre class="de1">db<span class="sy0">.</span><span class="me1">Insert</span><span class="br0">&#40;</span><span class="kw3">new</span> DecoratedPerson<span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span> LastName <span class="sy0">=</span> <span class="st0">&quot;lastname2&quot;</span>, FirstName <span class="sy0">=</span> <span class="st0">&quot;firstname2&quot;</span> <span class="br0">&#125;</span><span class="br0">&#41;</span><span class="sy0">;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">db.Insert(new DecoratedPerson() { LastName = "lastname2", FirstName = "firstname2" });</pre></div></div>

<p>This method uses the table name attribute to generate the insert.</p>
<p>And last, if we want to keep our table and object names in sync, we can let reflection magically figure it out:</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="csharp"><thead><tr><td colspan="2"  class="head">C#</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
</pre></td><td class="de1"><pre class="de1">db<span class="sy0">.</span><span class="me1">Insert</span><span class="br0">&#40;</span><span class="kw3">new</span> Person<span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span> LastName <span class="sy0">=</span> <span class="st0">&quot;lastname3&quot;</span>, FirstName <span class="sy0">=</span> <span class="st0">&quot;firstname3&quot;</span> <span class="br0">&#125;</span><span class="br0">&#41;</span><span class="sy0">;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">db.Insert(new Person() { LastName = "lastname3", FirstName = "firstname3" });</pre></div></div>

<p>Now that we have some data in our database, lets look at a few ways to get it out.</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="csharp"><thead><tr><td colspan="2"  class="head">C#</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
</pre></td><td class="de1"><pre class="de1"><span class="co1">// select statement</span>
<span class="kw1">var</span> results <span class="sy0">=</span> db<span class="sy0">.</span><span class="me1">Query</span><span class="sy0">&lt;</span>Person<span class="sy0">&gt;</span><span class="br0">&#40;</span><span class="st0">&quot;SELECT * FROM Person WHERE lastname=@0&quot;</span>, <span class="st0">&quot;lastname1&quot;</span><span class="br0">&#41;</span><span class="sy0">;</span>
<span class="co1">// let PetaPoco generate the SELECT portion </span>
<span class="kw1">var</span> results <span class="sy0">=</span> db<span class="sy0">.</span><span class="me1">Query</span><span class="sy0">&lt;</span>DecoratedPerson<span class="sy0">&gt;</span><span class="br0">&#40;</span><span class="st0">&quot;WHERE lastname=@0&quot;</span>, <span class="st0">&quot;lastname1&quot;</span><span class="br0">&#41;</span><span class="sy0">;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">// select statement
var results = db.Query&lt;Person&gt;("SELECT * FROM Person WHERE lastname=@0", "lastname1");
// let PetaPoco generate the SELECT portion 
var results = db.Query&lt;DecoratedPerson&gt;("WHERE lastname=@0", "lastname1");</pre></div></div>

<p>We can execute a parameterized SQL statement fairly easily by using numbered parameters that will line up with the additional arguments we provide. In the second case we&#8217;re actually letting PetaPoco generate the SELECT portion of the statement for us, which will resolve to: <code class="codespan">SELECT [Person].[LastName], [Person].[FirstName] FROM [Person] WHERE lastname=@0</code>.</p>
<p>Executing specifically for a single record instead of querying for a collection is similarly straight forward:</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="csharp"><thead><tr><td colspan="2"  class="head">C#</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
</pre></td><td class="de1"><pre class="de1"><span class="co1">// select statement</span>
<span class="kw1">var</span> result <span class="sy0">=</span> db<span class="sy0">.</span><span class="me1">Single</span><span class="sy0">&lt;</span>Person<span class="sy0">&gt;</span><span class="br0">&#40;</span><span class="st0">&quot;SELECT * FROM Person WHERE lastname=@0&quot;</span>, <span class="st0">&quot;lastname1&quot;</span><span class="br0">&#41;</span><span class="sy0">;</span>
Console<span class="sy0">.</span><span class="me1">WriteLine</span><span class="br0">&#40;</span><span class="kw4">String</span><span class="sy0">.</span><span class="me1">Format</span><span class="br0">&#40;</span><span class="st0">&quot;{0}: {1}&quot;</span>, result<span class="sy0">.</span><span class="me1">GetType</span><span class="br0">&#40;</span><span class="br0">&#41;</span>, result<span class="br0">&#41;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
<span class="co1">// let PetaPoco generate the SELECT portion </span>
<span class="kw1">var</span> result <span class="sy0">=</span> db<span class="sy0">.</span><span class="me1">Single</span><span class="sy0">&lt;</span>DecoratedPerson<span class="sy0">&gt;</span><span class="br0">&#40;</span><span class="st0">&quot;WHERE lastname=@0&quot;</span>, <span class="st0">&quot;lastname1&quot;</span><span class="br0">&#41;</span><span class="sy0">;</span>
Console<span class="sy0">.</span><span class="me1">WriteLine</span><span class="br0">&#40;</span><span class="kw4">String</span><span class="sy0">.</span><span class="me1">Format</span><span class="br0">&#40;</span><span class="st0">&quot;{0}: {1}&quot;</span>, result<span class="sy0">.</span><span class="me1">GetType</span><span class="br0">&#40;</span><span class="br0">&#41;</span>, result<span class="br0">&#41;</span><span class="br0">&#41;</span><span class="sy0">;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">// select statement
var result = db.Single&lt;Person&gt;("SELECT * FROM Person WHERE lastname=@0", "lastname1");
Console.WriteLine(String.Format("{0}: {1}", result.GetType(), result));

// let PetaPoco generate the SELECT portion 
var result = db.Single&lt;DecoratedPerson&gt;("WHERE lastname=@0", "lastname1");
Console.WriteLine(String.Format("{0}: {1}", result.GetType(), result));</pre></div></div>

<p>And if we examine the output we&#8217;ll see they are concrete instances of our POCOs, not dynamics or proxies:<br />
<monospace><br />
PetaPocoSample.Person: lastname1, firstname1<br />
PetaPocoSample.DecoratedPerson: lastname1, firstname1<br />
</monospace></p>
<p>If we then follow Chrissie&#8217;s lead and add two records into the database that will match this criteria, we&#8217;ll receive an exception, as we would expect from a Single call. PetaPoco also offers a <code class="codespan">First&lt;T&gt;</code> implementation we could use in this situation, a <code class="codespan">SkipTake&lt;T&gt;</code> we could use to get the 2nd record, and a number of different ways to query multiple records out of the database:</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="csharp"><thead><tr><td colspan="2"  class="head">C#</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
</pre></td><td class="de1"><pre class="de1"><span class="co1">// T</span>
<span class="kw1">var</span> result <span class="sy0">=</span> db<span class="sy0">.</span><span class="me1">First</span><span class="sy0">&lt;</span>DecoratedPerson<span class="sy0">&gt;</span><span class="br0">&#40;</span><span class="st0">&quot;WHERE lastname=@0&quot;</span>, <span class="st0">&quot;lastname1&quot;</span><span class="br0">&#41;</span><span class="sy0">;</span>
<span class="co1">// List&lt;T&gt;</span>
<span class="kw1">var</span> results <span class="sy0">=</span> db<span class="sy0">.</span><span class="me1">SkipTake</span><span class="sy0">&lt;</span>DecoratedPerson<span class="sy0">&gt;</span><span class="br0">&#40;</span><span class="nu0">1</span>, <span class="nu0">1</span>, <span class="st0">&quot;WHERE lastname=@0&quot;</span>, <span class="st0">&quot;lastname1&quot;</span><span class="br0">&#41;</span><span class="sy0">;</span>
<span class="co1">//IEnumerable&lt;T&gt;</span>
<span class="kw1">var</span> results2 <span class="sy0">=</span> db<span class="sy0">.</span><span class="me1">Query</span><span class="sy0">&lt;</span>DecoratedPerson<span class="sy0">&gt;</span><span class="br0">&#40;</span><span class="st0">&quot;WHERE lastname=@0&quot;</span>, <span class="st0">&quot;lastname1&quot;</span><span class="br0">&#41;</span><span class="sy0">;</span>
<span class="co1">//List&lt;T&gt;</span>
<span class="kw1">var</span> results3 <span class="sy0">=</span> db<span class="sy0">.</span><span class="me1">Fetch</span><span class="sy0">&lt;</span>DecoratedPerson<span class="sy0">&gt;</span><span class="br0">&#40;</span><span class="st0">&quot;WHERE lastname=@0&quot;</span>, <span class="st0">&quot;lastname1&quot;</span><span class="br0">&#41;</span><span class="sy0">;</span>
<span class="co1">//Page&lt;T&gt; - page #2 and page size of 1</span>
<span class="kw1">var</span> results4 <span class="sy0">=</span> db<span class="sy0">.</span><span class="me1">Page</span><span class="sy0">&lt;</span>DecoratedPerson<span class="sy0">&gt;</span><span class="br0">&#40;</span><span class="nu0">2</span>, <span class="nu0">1</span>, <span class="st0">&quot;WHERE lastname=@0&quot;</span>, <span class="st0">&quot;lastname1&quot;</span><span class="br0">&#41;</span><span class="sy0">;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">// T
var result = db.First&lt;DecoratedPerson&gt;("WHERE lastname=@0", "lastname1");
// List&lt;T&gt;
var results = db.SkipTake&lt;DecoratedPerson&gt;(1, 1, "WHERE lastname=@0", "lastname1");
//IEnumerable&lt;T&gt;
var results2 = db.Query&lt;DecoratedPerson&gt;("WHERE lastname=@0", "lastname1");
//List&lt;T&gt;
var results3 = db.Fetch&lt;DecoratedPerson&gt;("WHERE lastname=@0", "lastname1");
//Page&lt;T&gt; - page #2 and page size of 1
var results4 = db.Page&lt;DecoratedPerson&gt;(2, 1, "WHERE lastname=@0", "lastname1");</pre></div></div>

<h2>Conclusion</h2>
<p>I haven&#8217;t done much with PetaPoco yet, but just from playing with these basic queries I can tell I want to spend some more time with it. The syntax is clean and focuses on simplifying the bits that are repeated in so many projects (connection and command wrangling, mapping) while leaving me the full power of SQL and not injecting an additional layer of abstraction to try to work through. On top of that, it performs very closely to the speed of hand-coded SqlDataReader statements (results available on <a href="http://code.google.com/p/dapper-dot-net/#Performance_of_SELECT_mapping_over_500_iterations_-_POCO_seriali" title="dapper-dot-net">the dapper-dot-net</a> page).</p>
<p>My sample code is up on <a href="https://github.com/tarwn/PetaPocoSample" title="Sample code on github">GitHub</a>.</p>
]]></content:encoded>
			<wfw:commentRss>/index.php/desktopdev/mstech/csharp/playing-with-petapoco/feed/</wfw:commentRss>
		<slash:comments>2</slash:comments>
		</item>
		<item>
		<title>Using SpecFlow to drive Selenium WebDriver Tests</title>
		<link>/index.php/enterprisedev/application-lifecycle-management/using-specflow-to/</link>
		<comments>/index.php/enterprisedev/application-lifecycle-management/using-specflow-to/#comments</comments>
		<pubDate>Mon, 30 Jan 2012 10:52:00 +0000</pubDate>
		<dc:creator><![CDATA[Eli Weinstock-Herman (tarwn)]]></dc:creator>
				<category><![CDATA[Application Lifecycle Management]]></category>
		<category><![CDATA[bdd]]></category>
		<category><![CDATA[c#]]></category>
		<category><![CDATA[gherkin]]></category>
		<category><![CDATA[nunit]]></category>
		<category><![CDATA[selenium]]></category>
		<category><![CDATA[specflow]]></category>

		<guid isPermaLink="false">/index.php/2012/01/using-specflow-to/</guid>
		<description><![CDATA[SpecFlow is a .Net library that allows us to describe user expectations in a consistent Domain-Specific Language that can be wired for automatic execution. By writing tests in a human readable manner, our tests can serve as a bridge between the users expectations and the code we spend time writing.]]></description>
				<content:encoded><![CDATA[<p><a href="http://specflow.org/" title="Visit http://specflow.org/">SpecFlow</a> is a .Net library that allows us to describe user expectations in a consistent Domain-Specific Language that can be wired for automatic execution. By writing executable tests in a human readable manner, our tests can serve as a bridge between the users expectations and the code we produce to meet them. </p>
<p>This post will walk through the benefits and high level details of these methods before diving into a practical example of implementing several tests against the MVC Music Store site from my <a href="http://wiki.lessthandot.com/index.php/Eli%27s_Continuous_Delivery_Project" title="Visit the Wiki page on my Continuous Delivery project">Continuous Delivery</a> project. Along the way we will also use Selenium Web Driver, the Page Object pattern, and Nunit as we interact with an ASP.Net MVC site.</p>
<div style="text-align: center; font-size: .9em; color: #666666;">
	<img src="http://www.tiernok.com/LTDBlog/SpecFlow/MusicStore.jpg" title="ASP.Net MVC Music Store" /><br />
	ASP.Net MVC Music Store
</div>
<h2>Why Executable Tests</h2>
<p>End users don&#8217;t have a very clear idea of what they need. This is reflected in the requirements gathering time of projects that operate from detailed, up front specs. It&#8217;s also reflected by Agile practices, which promote short, iterative coding phases, one purpose of which is to get quick user feedback specifically to mitigate this risk. </p>
<p>Our users aren&#8217;t to blame. </p>
<p>Part of the problem is our misunderstanding of what the users are trying to achieve. With different backgrounds, vocabularies, and general contexts, communication gaps and misunderstandings are to be expected. Add the fact that our end user often has only a vague definition in their own mind of what they want, which takes seeing or using a particular piece of software to determine whether their idea is works or needs further improvement or refinement. And as if that weren&#8217;t enough, there&#8217;s often a failure ask for the appropriate level of understanding committing code to editor.</p>
<p>Tests can&#8217;t solve all of these issues, but they can help close the gap.</p>
<h3>SpecFlow, Gherkin, and Readable Tests</h3>
<p>SpecFlow defines features (user stories) and scenarios in a language called <a href="https://github.com/cucumber/cucumber/wiki/Gherkin" title="GitHub page for Gherkin">Gherkin</a>, which describes itself as a <a href="http://martinfowler.com/bliki/BusinessReadableDSL.html" title="Martin Fowler on Business-Readable DSLs">Business-Readable Domain-Specific Language</a>. Using a structured language to define business expectations first requires us do the appropriate level of analysis, or at least ask ourselves what the appropriate level of analysis is. Using a business-readable syntax means we can share the written requirements with our end user and they can confirm (or help correct) our understanding of their expectations. </p>
<p>With our user expectations written in a clearly structured DSL, we can then use a parser to wire those expectations directly to test code, minimizing any further misunderstandings or translation errors that would occur if we were write up the executable tests separately. Now we can consistently test our application against the very clear expectations we have confirmed with the end user. </p>
<p>Following the Behavior Driven Development (BDD) or Acceptance Test Driven Development methods, if we wire these tests up prior to starting to code for them, then we can help keep our work targeted directly to the end user expectations, minimizing waste from unnecessary additions and catching potential problems far sooner.</p>
<h2>Introducing the project</h2>
<p>As part of the Continuous Delivery project I mentioned above, I implemented a barebones interface testing project that uses Selenium WebDriver and Nunit to execute a couple basic tests against a deployed MVC site. The raw source code for the project is available on <a href="https://bitbucket.org/tarwn/mvcmusicstore.interfacetests" title="tarwn/mvcmusicstore.interfacetests on BitBucket">BitBucket</a>.</p>
<p><i>If you haven&#8217;t used Selenium before or are unfamiliar with the Page Object pattern, you can find more information in <a href="/index.php/WebDev/UIDevelopment/automated-web-testing-with-selenium-2" title="My earlier Selenium post covering the Page Object pattern">this earlier post</a> which covers these topics in depth.</i></p>
<div style="text-align: center; font-size: .9em; color: #666666;">
	<img src="http://www.tiernok.com/LTDBlog/ContinuousDelivery/interfacetests.png" title="Interface Tests Project" /><br />
	MVCMusicStore Interface Tests Project
</div>
<p>Currently the project has a minimal base page object and a few lightly defined pages, just enough to support a test to browse the main navigation links through the site and verify some genre links work. The SpecFlow tests that I add to the project will force me to continue fleshing out the necessary functionality of the Page Library and test project as we need new functionality or shortcut methods to keep the test implementations clean and readable.</p>
<p>The tests are written in Nunit and extend a TestFixtureBase class that is responsible for initializing a RemoteWebDriver (browser) and quitting it for each individual test. A singleton Settings object exists to load settings from a local configuration file for the full test run, letting us provide a configured base URL and to later add sample values that are specific to the environments the tests run in.</p>
<h2>Adding SpecFlow</h2>
<p>The first step is to add SpecFlow. While there is a NuGet package for it, you will actually want to download the <a href="https://github.com/techtalk/SpecFlow/downloads" title="SpecFlow downloads on GitHub">SpecFlow installer</a> and install it. The installer includes templates, intellisense, and other bits and bobs that you won&#8217;t get with the NuGet package. That said, I actually did both, first installing it then using NuGet to pull down the package for my project so I could commit the packaged references to the projects source code repository.</p>
<p>After installing the full install package, there will be a few new items in the &#8220;Add New Items&#8221; menu in Visual Studio.</p>
<div style="text-align: center; font-size: .9em; color: #666666;">
	<img src="http://www.tiernok.com/LTDBlog/SpecFlow/AddNewItem.png" title="'Add New Item' dialog in Visual Studio" /><br />
	&#8220;Add New Item&#8221; dialog in Visual Studio
</div>
<p>The &#8220;SpecFlow Feature File&#8221; option will create a new pair of files for our feature and the generated code behind that feature. The feature is where we will write our user story and the individual scenarios in Gherkin. The generated code reflects the scenario as an Nunit test, with each step in the scenario treated as a potential function to call out to.</p>
<p>The &#8220;SpecFlow Step Definition&#8221; item is just a *.cs class file that we would put the individual step functions in for the tests to call. Both the Feature File and Step Definition file are populated with an addition sample as part of their template..</p>
<h2>Adding a SpecFlow feature</h2>
<p>To start with, lets discuss what we&#8217;re going to be testing. Since the application is a Music store, lets define how we want the cart total to work. Here&#8217;s the User Story (feature) we will be working with:</p>
<blockquote><p>As a shopper I would like to see my up to date cart total as part of each screen so I don&#8217;t have to visit my cart to verify my items are in it</p></blockquote>
<p>Now this probably sounds like enough to go ahead an implement it, but lets nail down some scenarios first. If I was an working with an end user, these are the type of things we would probably come up with:</p>
<ul>
<li>When I have nothing in my cart, it displays a total of 0</li>
<li>When I add an item to my cart, it displays a total of 1</li>
<li>When I add two of the same item to my cart, it displays a total of 2</li>
<li>When I add two separate items to my cart, it displays a total of 2</li>
<li>When I have two items in my cart and I remove one, it displays a total of 1</li>
<li>When I have two items in my cart, after I checkout it displays a total of 0</li>
</ul>
<p>Note that these are a collaborative effort. My pretend end user probably came up with some, which I then helped to expand on via questions and experience.</p>
<p>Writing this in a Feature File in Gherkin we would have something like:</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="text"><thead><tr><td colspan="2"  class="head">Text</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
</pre></td><td class="de1"><pre class="de1">Feature: Cart Total
&nbsp; &nbsp; As a shopper 
&nbsp; &nbsp; I want to see my cart total on every screen 
&nbsp; &nbsp; So I don't have to leave my current page to verify it's contents
&nbsp;
@UI
Scenario: Empty Cart
&nbsp; &nbsp; Given I have the Home Page open
&nbsp; &nbsp; Then the cart is empty
&nbsp;
@UI
Scenario: Add an Item
&nbsp; &nbsp; Given I have the Home Page open
&nbsp; &nbsp; And I select a genre from the left
&nbsp; &nbsp; And I select an album from the genre page
&nbsp; &nbsp; When I add the album to my cart
&nbsp; &nbsp; Then the cart has a total of 1
&nbsp;
...</pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">Feature: Cart Total
	As a shopper 
	I want to see my cart total on every screen 
	So I don't have to leave my current page to verify it's contents

@UI
Scenario: Empty Cart
	Given I have the Home Page open
	Then the cart is empty

@UI
Scenario: Add an Item
	Given I have the Home Page open
	And I select a genre from the left
	And I select an album from the genre page
	When I add the album to my cart
	Then the cart has a total of 1

...</pre></div></div>

<p>I&#8217;ve added a SpecFlow Feature File to the project and I can write all of the scenarios for the feature. After saving it, I can run the Nunit GUI and see a series of new, inconclusive tests, each named after the Scenario name I provided in the Feature File.</p>
<div style="text-align: center; font-size: .9em; color: #666666;">
	<img src="http://www.tiernok.com/LTDBlog/SpecFlow/NunitInconclusive.png" title="Inconclusive tests in Nunit GUI" /><br />
	Inconclusive tests in Nunit GUI
</div>
<p>Feature File: <a href="https://bitbucket.org/tarwn/mvcmusicstore.interfacetests/src/410c3ab7c869/MvcMusicStore.InterfaceTests/Features/Cart.feature" title="View the file on BitBucket">View the file on BitBucket</a></p>
<p>Now it&#8217;s time to start wiring them into the Page Library calls.</p>
<h2>Wiring in the Browser</h2>
<p>When each scenario runs, we want it to start clean with a fresh browser instance. This is similar to how the existing <a href="https://bitbucket.org/tarwn/mvcmusicstore.interfacetests/src/a7082afb8304/MvcMusicStore.InterfaceTests/TestFixtureBase.cs" title="View the class on BitBucket">TestFixtureBase</a> works, so we can reuse that object with a few tweaks. The challenge with the SpecFlow scenarios is that I will be reusing steps in several different features and I don&#8217;t want several different browsers to open based on which class is instantiated to make a coded step definition available. Also, unlike the current interface tests that execute inside a single method, the fact that we are running tests across multiple methods will make it trickier to keep track of the current page instance.</p>
<p>Based on coding up several earlier SpecFlow steps, I ended up with a base class for my step definitions that helped resolve both of these issues, while also providing some properties to help improve readability.</p>
<p><b>InterfaceTests/Features/FeatureBase.cs</b></p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="csharp"><thead><tr><td colspan="2"  class="head">C#</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
</pre></td><td class="de1"><pre class="de1"><span class="kw1">namespace</span> MvcMusicStore<span class="sy0">.</span><span class="me1">InterfaceTests</span><span class="sy0">.</span><span class="me1">Features</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">public</span> <span class="kw4">class</span> FeatureBase <span class="sy0">:</span> TestFixtureBase <span class="br0">&#123;</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="co2">#region Properties for Readability</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="co1">/// &lt;summary&gt;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="co1">/// Shortcut property to Settings.CurrentSettings.Defaults for readability</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="co1">/// &lt;/summary&gt;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">protected</span> DefaultValues <span class="kw1">Default</span> <span class="br0">&#123;</span> <span class="kw1">get</span> <span class="br0">&#123;</span> <span class="kw1">return</span> Settings<span class="sy0">.</span><span class="me1">CurrentSettings</span><span class="sy0">.</span><span class="me1">Defaults</span><span class="sy0">;</span> <span class="br0">&#125;</span> <span class="br0">&#125;</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="co1">/// &lt;summary&gt;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="co1">/// Sets the Current page to the specified value - provided to help readability</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="co1">/// &lt;/summary&gt;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">protected</span> PageBase NextPage <span class="br0">&#123;</span> <span class="kw1">set</span> <span class="br0">&#123;</span> CurrentPage <span class="sy0">=</span> <span class="kw1">value</span><span class="sy0">;</span> <span class="br0">&#125;</span> <span class="br0">&#125;</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="co2">#endregion</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">protected</span> PageBase CurrentPage <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">get</span> <span class="br0">&#123;</span> <span class="kw1">return</span> <span class="br0">&#40;</span>PageBase<span class="br0">&#41;</span>ScenarioContext<span class="sy0">.</span><span class="me1">Current</span><span class="br0">&#91;</span><span class="st0">&quot;CurrentPage&quot;</span><span class="br0">&#93;</span><span class="sy0">;</span> <span class="br0">&#125;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">set</span> <span class="br0">&#123;</span> ScenarioContext<span class="sy0">.</span><span class="me1">Current</span><span class="br0">&#91;</span><span class="st0">&quot;CurrentPage&quot;</span><span class="br0">&#93;</span> <span class="sy0">=</span> <span class="kw1">value</span><span class="sy0">;</span> <span class="br0">&#125;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#91;</span>BeforeScenario<span class="br0">&#40;</span><span class="st0">&quot;UI&quot;</span><span class="br0">&#41;</span><span class="br0">&#93;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">public</span> <span class="kw4">void</span> BeforeScenario<span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">if</span> <span class="br0">&#40;</span><span class="sy0">!</span>ScenarioContext<span class="sy0">.</span><span class="me1">Current</span><span class="sy0">.</span><span class="me1">ContainsKey</span><span class="br0">&#40;</span><span class="st0">&quot;CurrentDriver&quot;</span><span class="br0">&#41;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Test_Setup<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ScenarioContext<span class="sy0">.</span><span class="me1">Current</span><span class="sy0">.</span><span class="kw1">Add</span><span class="br0">&#40;</span><span class="st0">&quot;CurrentDriver&quot;</span>, CurrentDriver<span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">else</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; CurrentDriver <span class="sy0">=</span> <span class="br0">&#40;</span>RemoteWebDriver<span class="br0">&#41;</span>ScenarioContext<span class="sy0">.</span><span class="me1">Current</span><span class="br0">&#91;</span><span class="st0">&quot;CurrentDriver&quot;</span><span class="br0">&#93;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#91;</span>AfterScenario<span class="br0">&#40;</span><span class="st0">&quot;UI&quot;</span><span class="br0">&#41;</span><span class="br0">&#93;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">public</span> <span class="kw4">void</span> AfterScenario<span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">if</span> <span class="br0">&#40;</span>ScenarioContext<span class="sy0">.</span><span class="me1">Current</span><span class="sy0">.</span><span class="me1">ContainsKey</span><span class="br0">&#40;</span><span class="st0">&quot;CurrentDriver&quot;</span><span class="br0">&#41;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Test_Teardown<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ScenarioContext<span class="sy0">.</span><span class="me1">Current</span><span class="sy0">.</span><span class="kw1">Remove</span><span class="br0">&#40;</span><span class="st0">&quot;CurrentDriver&quot;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw4">string</span> s <span class="sy0">=</span> <span class="st0">&quot;&quot;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp;
<span class="br0">&#125;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">namespace MvcMusicStore.InterfaceTests.Features {
        public class FeatureBase : TestFixtureBase {

                #region Properties for Readability

                /// &lt;summary&gt;
                /// Shortcut property to Settings.CurrentSettings.Defaults for readability
                /// &lt;/summary&gt;
                protected DefaultValues Default { get { return Settings.CurrentSettings.Defaults; } }

                /// &lt;summary&gt;
                /// Sets the Current page to the specified value - provided to help readability
                /// &lt;/summary&gt;
                protected PageBase NextPage { set { CurrentPage = value; } }

                #endregion

                protected PageBase CurrentPage {
                        get { return (PageBase)ScenarioContext.Current["CurrentPage"]; }
                        set { ScenarioContext.Current["CurrentPage"] = value; }
                }

                [BeforeScenario("UI")]
                public void BeforeScenario() {
                        if (!ScenarioContext.Current.ContainsKey("CurrentDriver")) {
                                Test_Setup();
                                ScenarioContext.Current.Add("CurrentDriver", CurrentDriver);
                        }
                        else {
                                CurrentDriver = (RemoteWebDriver)ScenarioContext.Current["CurrentDriver"];
                        }
                }

                [AfterScenario("UI")]
                public void AfterScenario() {
                        if (ScenarioContext.Current.ContainsKey("CurrentDriver")) {
                                Test_Teardown();
                                ScenarioContext.Current.Remove("CurrentDriver");
                        }
                        string s = "";
                }
        }

}</pre></div></div>

<p>I&#8217;ve used the SpecFlow hooks for BeforeScenario and AfterScenario to handle initialization and I&#8217;ve used the provided ScenarioContext to help store a common driver and the current page. I&#8217;ve also specified that these hooks only occur for tests tagged with &#8220;UI&#8221; so I can later create some additional tests that will make direct calls to the JSON controller endpoints without spinning up a whole browser session.</p>
<p>At this point I still get all &#8220;Inconclusive&#8221; test results from Nunit, but I can see that each tests fires up a browser as Nunit progresses through the test run and the Before/AfterScenario hooks are called.</p>
<h2>Defining the Step Definition File</h2>
<p>With the Feature completed and a base Feature file created to handle our browser, it&#8217;s time to write the code that will be executed behind the individuals steps of the file.</p>
<p>Besides creating tests that result in &#8220;Inconclusive&#8221; results, SpecFlow also provides us with some basic code to get started with the step definition file. In the text output tab of the Nunit GUI we can see that each undefined step from SpecFlow outputs the information needed to implement the step, like so:</p>
<div style="text-align: center; font-size: .9em; color: #666666;">
	<img src="http://www.tiernok.com/LTDBlog/SpecFlow/NunitStepDefinition.png" title="Step Definition text in Nunit Text Output" /><br />
	Step Definition text in Nunit Text Output
</div>
<p>Back in Visual Studio I will create a new &#8220;SpecFlow Step Definition&#8221; file and copy the content of the Nunit Text output window into the class in this file, removing the unnecessary addition example steps and all the extra class definitions and plain text. Each statement that appears in a Scenario in the Feature File has a corresponding method in the generated Nunit test, so each one will need a method. I&#8217;ve actually cheated a little and reused some steps from some earlier SpecFlow features, so my final file only has the new steps defined:</p>
<p>The other steps are in a previously defined <a href="https://bitbucket.org/tarwn/mvcmusicstore.interfacetests/src/a7082afb8304/MvcMusicStore.InterfaceTests/Features/BrowsingSteps.cs" title="Previously Defined BrowsingSteps.cs file">Step Definition file</a>. I&#8217;ll probably centralize common steps at some point to make them easy to find, but for the meantime the base class will help keep the current page and web browser accessible to the steps in both files and I have few enough tests that I&#8217;ll remember where those definitions are (remind me I said this when I go back in a week and make a fuss on twitter about not remembering where they are).</p>
<p>Once I have the Step Definition methods setup, I can go ahead and wire in the code necessary to drive the browser. I&#8217;ll walk through the methods for the &#8220;Add an Item&#8221; feature.</p>
<p><b>InterfaceTests/Features/Cart.feature</b></p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="text"><thead><tr><td colspan="2"  class="head">Text</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
</pre></td><td class="de1"><pre class="de1">&nbsp; &nbsp; Given I have the Home Page open
&nbsp; &nbsp; And I select a genre from the left
&nbsp; &nbsp; And I select an album from the genre page
&nbsp; &nbsp; When I add the album to my cart
&nbsp; &nbsp; Then the cart has a total of 1</pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">	Given I have the Home Page open
	And I select a genre from the left
	And I select an album from the genre page
	When I add the album to my cart
	Then the cart has a total of 1</pre></div></div>

<p>Keep in mind if you look at the code repository some of these steps are in separate files.</p>
<h3>Given I have the Home Page Open</h3>
<p>Each of my scenarios starts with the same step, ensuring we have the browser open and pointing to the site. The step definition is then fairly straightforward, given the base class already ensures we have a fresh browser available:</p>
<p><b>InterfaceTests/Features/NavigationSteps.cs</b> &#8211; this is the step I borrowed from a previous test</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="csharp"><thead><tr><td colspan="2"  class="head">C#</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
</pre></td><td class="de1"><pre class="de1"><span class="br0">&#91;</span>Given<span class="br0">&#40;</span><span class="st_h">@&quot;I have the Home Page open&quot;</span><span class="br0">&#41;</span><span class="br0">&#93;</span>
<span class="kw1">public</span> <span class="kw4">void</span> IHaveTheHomePageOpen<span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; NextPage <span class="sy0">=</span> PageBase<span class="sy0">.</span><span class="me1">LoadIndexPage</span><span class="br0">&#40;</span>CurrentDriver, Settings<span class="sy0">.</span><span class="me1">CurrentSettings</span><span class="sy0">.</span><span class="me1">BaseUrl</span><span class="br0">&#41;</span><span class="sy0">;</span>
<span class="br0">&#125;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">[Given(@"I have the Home Page open")]
public void IHaveTheHomePageOpen() {
	NextPage = PageBase.LoadIndexPage(CurrentDriver, Settings.CurrentSettings.BaseUrl);
}</pre></div></div>

<p>The class definition for FeatureBase above includes a CurrentPage property that we use to store and retrieve the page object associated with the browsers current page. To improve readability a little, I&#8217;ve created the NextPage property, which is simply a setter for the CurrentPage one. </p>
<h3>And I select a genre from the left</h3>
<p>All pages in the application display the genre list on the left, so this makes a simple way to get to a specific genre page no matter where we are in the site.</p>
<p><b>InterfaceTests/Features/CartSteps.cs</b></p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="csharp"><thead><tr><td colspan="2"  class="head">C#</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
</pre></td><td class="de1"><pre class="de1"><span class="br0">&#91;</span>Given<span class="br0">&#40;</span><span class="st_h">@&quot;I select a genre from the left&quot;</span><span class="br0">&#41;</span><span class="br0">&#93;</span>
<span class="kw1">public</span> <span class="kw4">void</span> GivenISelectAGenreFromTheLeft<span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; NextPage <span class="sy0">=</span> CurrentPage<span class="sy0">.</span><span class="me1">SelectGenre</span><span class="br0">&#40;</span><span class="kw1">Default</span><span class="sy0">.</span><span class="me1">Genre</span><span class="sy0">.</span><span class="me1">Name</span><span class="br0">&#41;</span><span class="sy0">;</span>
<span class="br0">&#125;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">[Given(@"I select a genre from the left")]
public void GivenISelectAGenreFromTheLeft() {
	NextPage = CurrentPage.SelectGenre(Default.Genre.Name);
}</pre></div></div>

<p>All page objects extend the PageBase class, so I&#8217;ve added a partial class for PageBase (PageLibraryPageBase.Navigation.cs) that includes navigation and behavior that&#8217;s common to all pages in the application. </p>
<p><b>Default.Genre.Name</b>: As I mentioned earlier, there is a singleton Settings object that is responsible for loading settings from an XML file and making them available to the tests. I&#8217;ve added a <i>Genre</i> and <i>Album</i> element to the settings file so I can provide some default values without hardcoding them into the test code or, worse, each individual test. I then created another shortcut property in my FeatureBase so I can reference these values by the property name Default instead of the much longer Settings.CurrentSettings.Default.</p>
<h3>And I select an album from the genre page</h3>
<p>Once I have the genre page open, I can select an album that I intend to add to the cart.</p>
<p><b>InterfaceTests/Features/CartSteps.cs</b></p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="csharp"><thead><tr><td colspan="2"  class="head">C#</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
</pre></td><td class="de1"><pre class="de1"><span class="br0">&#91;</span>Given<span class="br0">&#40;</span><span class="st_h">@&quot;I select an album from the genre page&quot;</span><span class="br0">&#41;</span><span class="br0">&#93;</span>
<span class="kw1">public</span> <span class="kw4">void</span> GivenISelectAnAlbumFromTheGenrePage<span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; NextPage <span class="sy0">=</span> CurrentPage<span class="sy0">.</span><span class="kw1">As</span><span class="sy0">&lt;</span>BrowsePage<span class="sy0">&gt;</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">.</span><span class="me1">SelectAlbum</span><span class="br0">&#40;</span><span class="kw1">Default</span><span class="sy0">.</span><span class="me1">Album</span><span class="sy0">.</span><span class="me1">Name</span><span class="br0">&#41;</span><span class="sy0">;</span>
<span class="br0">&#125;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">[Given(@"I select an album from the genre page")]
public void GivenISelectAnAlbumFromTheGenrePage() {
	NextPage = CurrentPage.As&lt;BrowsePage&gt;().SelectAlbum(Default.Album.Name);
}</pre></div></div>

<p>One of the downsides of having a single property to track the current page is that it is typed as a PageBase object. I could add cast statements to each line, but by adding a generic method to handle the cast, I preserve the left-to-right reading order of the statement. Had I used an inline cast, we would be looking at:</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="csharp"><thead><tr><td colspan="2"  class="head">C#</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
</pre></td><td class="de1"><pre class="de1"><span class="br0">&#91;</span>Given<span class="br0">&#40;</span><span class="st_h">@&quot;I select an album from the genre page&quot;</span><span class="br0">&#41;</span><span class="br0">&#93;</span>
<span class="kw1">public</span> <span class="kw4">void</span> GivenISelectAnAlbumFromTheGenrePage<span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; NextPage <span class="sy0">=</span> <span class="br0">&#40;</span><span class="br0">&#40;</span>BrowsePage<span class="br0">&#41;</span>CurrentPage<span class="br0">&#41;</span><span class="sy0">.</span><span class="me1">SelectAlbum</span><span class="br0">&#40;</span><span class="kw1">Default</span><span class="sy0">.</span><span class="me1">Album</span><span class="sy0">.</span><span class="me1">Name</span><span class="br0">&#41;</span><span class="sy0">;</span>
<span class="br0">&#125;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">[Given(@"I select an album from the genre page")]
public void GivenISelectAnAlbumFromTheGenrePage() {
	NextPage = ((BrowsePage)CurrentPage).SelectAlbum(Default.Album.Name);
}</pre></div></div>

<p>Which just doesn&#8217;t seem as readable to me.</p>
<p>I&#8217;ve added the generic cast method to the PageBase method to make it easily accessible:</p>
<p><b>PageLibrary/Base/PageBase.cs</b></p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="csharp"><thead><tr><td colspan="2"  class="head">C#</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
</pre></td><td class="de1"><pre class="de1"><span class="kw1">public</span> <span class="kw1">abstract</span> <span class="kw1">partial</span> <span class="kw4">class</span> PageBase <span class="sy0">:</span> CommonBase <span class="br0">&#123;</span>
&nbsp;
&nbsp; &nbsp; <span class="co1">//...</span>
&nbsp; &nbsp; 
&nbsp; &nbsp; <span class="kw1">public</span> TPage <span class="kw1">As</span><span class="sy0">&lt;</span>TPage<span class="sy0">&gt;</span><span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="kw1">where</span> TPage <span class="sy0">:</span> PageBase, <span class="kw3">new</span><span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">return</span> <span class="br0">&#40;</span>TPage<span class="br0">&#41;</span><span class="kw1">this</span><span class="sy0">;</span>
&nbsp; &nbsp; <span class="br0">&#125;</span>
<span class="br0">&#125;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">public abstract partial class PageBase : CommonBase {

	//...
	
	public TPage As&lt;TPage&gt;() where TPage : PageBase, new() {
		return (TPage)this;
	}
}</pre></div></div>

<h3>When I add the album to my cart</h3>
<p>If you remember, the original scenario we listed above was &#8220;When I add an item to my cart, it displays a total of 1&#8221;. Often it is fairly easy to separate the Given portion of our scenario from the When/Then portion because the Given part is often the part that we took for granted when we were describing the scenario or when it was described to us.</p>
<p><b>InterfaceTests/Features/CartSteps.cs</b></p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="csharp"><thead><tr><td colspan="2"  class="head">C#</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
</pre></td><td class="de1"><pre class="de1"><span class="br0">&#91;</span>When<span class="br0">&#40;</span><span class="st_h">@&quot;I add the album to my cart&quot;</span><span class="br0">&#41;</span><span class="br0">&#93;</span>
<span class="kw1">public</span> <span class="kw4">void</span> WhenIAddTheAlbumToMyCart<span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; NextPage <span class="sy0">=</span> CurrentPage<span class="sy0">.</span><span class="kw1">As</span><span class="sy0">&lt;</span>AlbumDetailPage<span class="sy0">&gt;</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">.</span><span class="me1">AddToCart</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
<span class="br0">&#125;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">[When(@"I add the album to my cart")]
public void WhenIAddTheAlbumToMyCart() {
	NextPage = CurrentPage.As&lt;AlbumDetailPage&gt;().AddToCart();
}</pre></div></div>

<p>As you can tell by now, the actual logic that goes into the step definition files is fairly minimal. This is by design and is similar to the MVC concept of a thin controller. By keeping the page behavior in the page objects, we&#8217;re attempting to minimize the brittleness of our test code.</p>
<h3>Then the cart has a total of 1</h3>
<p>The last step is to verify the expectation. We&#8217;re going to do something a little special with this step because it matches a similar step across several of the tests, with the exception of the number we are expecting to see.</p>
<p><b>InterfaceTests/Features/CartSteps.cs</b></p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="csharp"><thead><tr><td colspan="2"  class="head">C#</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
</pre></td><td class="de1"><pre class="de1"><span class="br0">&#91;</span>Then<span class="br0">&#40;</span><span class="st_h">@&quot;the cart has a total of (d+)&quot;</span><span class="br0">&#41;</span><span class="br0">&#93;</span>
<span class="kw1">public</span> <span class="kw4">void</span> ThenTheCartHasATotalOf<span class="br0">&#40;</span><span class="kw4">int</span> expectedTotal<span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; CurrentPage<span class="sy0">.</span><span class="me1">VerifyCartTotalIs</span><span class="br0">&#40;</span>expectedTotal<span class="br0">&#41;</span><span class="sy0">;</span>
<span class="br0">&#125;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">[Then(@"the cart has a total of (d+)")]
public void ThenTheCartHasATotalOf(int expectedTotal) {
	CurrentPage.VerifyCartTotalIs(expectedTotal);
}</pre></div></div>

<p>SpecFlow allows us to enter a regular expression in the step definition, which it will then use to populate arguments for our step definition function. So instead of making a separate function for testing a cart total of 0, 1, and 2, I can make one function that tests whichever value matches the match group in my decorators expression.</p>
<h3>Result</h3>
<p>With all of the steps built, I can now run the test for verification:</p>
<div style="text-align: center; font-size: .9em; color: #666666;">
	<img src="http://www.tiernok.com/LTDBlog/SpecFlow/NunitAddItemDone.png" title="Pass test run for 'Add Item' scenario" /><br />
	Pass test run for &#8216;Add Item&#8217; scenario
</div>
<p>The text output tab of Nunit still provides us with information at the step level, but more importantly we now have a &#8220;Pass&#8221;.</p>
<h2>Wrapping Up</h2>
<p>By capturing the end users expectations in this way, we have some structure that helps gather them at a good level of detail while also providing a testable version that we can automatically run as we develop the solution and as a regression suite when we are finished. The requirements are readable by our end user, by ourselves, and can be programmed against. As we build up a library of common step definitions we will start being able to put new tests together even faster as well as have some visibility into what portions of the application are the most critical (if a step shows up in 50% of our tests, it&#8217;s a good bet it&#8217;s a lot more critical to the stability of our application than the item that shows up once in a single test).</p>
<p>All of the code for this project is available in <a href="https://bitbucket.org/tarwn/mvcmusicstore.interfacetests" title="tarwn/MvcMusicStore.InterfaceTests project on BitBucket">BitBucket</a>.</p>
]]></content:encoded>
			<wfw:commentRss>/index.php/enterprisedev/application-lifecycle-management/using-specflow-to/feed/</wfw:commentRss>
		<slash:comments>14</slash:comments>
		</item>
	</channel>
</rss>
