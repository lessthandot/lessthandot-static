<?xml version="1.0" encoding="UTF-8"?><rss version="2.0"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:atom="http://www.w3.org/2005/Atom"
	xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
	xmlns:slash="http://purl.org/rss/1.0/modules/slash/"
	>

<channel>
	<title>try_convert &#8211; LessthanDot</title>
	<atom:link href="/index.php/tag/try_convert/feed/" rel="self" type="application/rss+xml" />
	<link>/</link>
	<description>A Technical Community for IT Professionals</description>
	<lastBuildDate>Sat, 09 Mar 2019 12:50:36 +0000</lastBuildDate>
	<language>en-US</language>
	<sy:updatePeriod>hourly</sy:updatePeriod>
	<sy:updateFrequency>1</sy:updateFrequency>
	<generator>https://wordpress.org/?v=4.6.1</generator>
	<item>
		<title>TRY_CONVERT in SQL Server Denali CTP3</title>
		<link>/index.php/datamgmt/datadesign/try_convert-in-sql-server-denali/</link>
		<comments>/index.php/datamgmt/datadesign/try_convert-in-sql-server-denali/#respond</comments>
		<pubDate>Tue, 19 Jul 2011 22:54:00 +0000</pubDate>
		<dc:creator><![CDATA[SQLDenis]]></dc:creator>
				<category><![CDATA[Data Modelling and Design]]></category>
		<category><![CDATA[Database Programming]]></category>
		<category><![CDATA[Microsoft SQL Server]]></category>
		<category><![CDATA[Microsoft SQL Server Admin]]></category>
		<category><![CDATA[denali]]></category>
		<category><![CDATA[functions]]></category>
		<category><![CDATA[sql server]]></category>
		<category><![CDATA[try_convert]]></category>

		<guid isPermaLink="false">/index.php/2011/07/try_convert-in-sql-server-denali/</guid>
		<description><![CDATA[TRY_CONVERT  is a new function in SQL Server Denali CTP3, TRY_CONVERT   enables you to test if a value can be converted to a specific data type, TRY_CONVERT  returns a value cast to the specified data type if the cast succeeds; otherwise, TRY_CONVERT&#8230;]]></description>
				<content:encoded><![CDATA[<p>TRY_CONVERT  is a new function in SQL Server Denali CTP3, TRY_CONVERT   enables you to test if a value can be converted to a specific data type, TRY_CONVERT  returns a value cast to the specified data type if the cast succeeds; otherwise, TRY_CONVERT   returns null.</p>
<p>Here is what Books On Line has to say about TRY_CONVERT</p>
<p><em>TRY_CONVERT takes the value passed to it and tries to convert it to the specified data_type. If the cast succeeds, TRY_CONVERT returns the value as the specified data_type; if an error occurs, null is returned. However if you request a conversion that is explicitly not permitted, then TRY_CONVERT fails with an error.</p>
<p><strong>Arguments</strong></p>
<p><strong>data_type [ ( length ) ]</strong><br />
The data type into which to cast expression.</p>
<p><strong>expression</strong><br />
The value to be cast.</p>
<p><strong>style</strong><br />
Optional integer expression that specifies how the TRY_CONVERT function is to translate expression.</p>
<p>style accepts the same values as the style parameter of the CONVERT function. </p>
<p>The range of acceptable values is determined by the value of data_type. If style is null, then TRY_CONVERT returns null.</em></p>
<p>Here is what the syntax looks like</p>
<pre>TRY_CONVERT ( data_type [ ( length ) ], expression [, style ] )</pre>
<p>Let&#8217;s take a look how this all works, I will create a table and inserts some values</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
</pre></td><td class="de1"><pre class="de1"><span class="kw1">create</span> <span class="kw1">table</span> #test<span class="br0">&#40;</span>SomeCol <span class="kw1">varchar</span><span class="br0">&#40;</span><span class="nu0">100</span><span class="br0">&#41;</span><span class="br0">&#41;</span>
GO
&nbsp;
<span class="kw1">insert</span> #test <span class="kw1">values</span><span class="br0">&#40;</span><span class="st0">'1'</span><span class="br0">&#41;</span>
<span class="kw1">insert</span> #test <span class="kw1">values</span><span class="br0">&#40;</span><span class="st0">'.'</span><span class="br0">&#41;</span>
<span class="kw1">insert</span> #test <span class="kw1">values</span><span class="br0">&#40;</span><span class="st0">'$'</span><span class="br0">&#41;</span>
<span class="kw1">insert</span> #test <span class="kw1">values</span><span class="br0">&#40;</span><span class="st0">'ddd'</span><span class="br0">&#41;</span>
<span class="kw1">insert</span> #test <span class="kw1">values</span><span class="br0">&#40;</span><span class="st0">'---'</span><span class="br0">&#41;</span>
<span class="kw1">insert</span> #test <span class="kw1">values</span><span class="br0">&#40;</span><span class="st0">'000'</span><span class="br0">&#41;</span>
<span class="kw1">insert</span> #test <span class="kw1">values</span><span class="br0">&#40;</span><span class="st0">'123aaa1'</span><span class="br0">&#41;</span>
<span class="kw1">insert</span> #test <span class="kw1">values</span><span class="br0">&#40;</span><span class="st0">'2de'</span><span class="br0">&#41;</span>
<span class="kw1">insert</span> #test <span class="kw1">values</span><span class="br0">&#40;</span><span class="st0">'(((('</span><span class="br0">&#41;</span>
<span class="kw1">insert</span> #test <span class="kw1">values</span><span class="br0">&#40;</span><span class="st0">'20110230'</span><span class="br0">&#41;</span>
<span class="kw1">insert</span> #test <span class="kw1">values</span><span class="br0">&#40;</span><span class="st0">'20110228'</span><span class="br0">&#41;</span>
<span class="kw1">insert</span> #test <span class="kw1">values</span><span class="br0">&#40;</span><span class="st0">'14:58'</span><span class="br0">&#41;</span>
<span class="kw1">insert</span> #test <span class="kw1">values</span><span class="br0">&#40;</span><span class="st0">'16000228'</span><span class="br0">&#41;</span>
<span class="kw1">insert</span> #test <span class="kw1">values</span><span class="br0">&#40;</span><span class="st0">'0.12345678901'</span><span class="br0">&#41;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">create table #test(SomeCol varchar(100))
GO

insert #test values('1')
insert #test values('.')
insert #test values('$')
insert #test values('ddd')
insert #test values('---')
insert #test values('000')
insert #test values('123aaa1')
insert #test values('2de')
insert #test values('((((')
insert #test values('20110230')
insert #test values('20110228')
insert #test values('14:58')
insert #test values('16000228')
insert #test values('0.12345678901')</pre></div></div>

<p>Now, I will try to convert the values in the table to various data types</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
</pre></td><td class="de1"><pre class="de1"><span class="kw1">select</span> SomeCol,
&nbsp; &nbsp; &nbsp; &nbsp;TRY_CONVERT<span class="br0">&#40;</span><span class="kw1">float</span>,SomeCol<span class="br0">&#41;</span> <span class="kw1">as</span> <span class="kw1">float</span>,
&nbsp; &nbsp; &nbsp; &nbsp;TRY_CONVERT<span class="br0">&#40;</span><span class="kw1">date</span>,SomeCol<span class="br0">&#41;</span> <span class="kw1">as</span> <span class="kw1">date</span>,
&nbsp; &nbsp; &nbsp; &nbsp;TRY_CONVERT<span class="br0">&#40;</span>datetime2,SomeCol<span class="br0">&#41;</span> <span class="kw1">as</span> datetime2,
&nbsp; &nbsp; &nbsp; &nbsp;TRY_CONVERT<span class="br0">&#40;</span><span class="kw1">datetime</span>,SomeCol<span class="br0">&#41;</span> <span class="kw1">as</span> <span class="kw1">datetime</span>,
&nbsp; &nbsp; &nbsp; &nbsp;TRY_CONVERT<span class="br0">&#40;</span><span class="kw1">time</span>,SomeCol<span class="br0">&#41;</span> <span class="kw1">as</span> <span class="kw1">time</span>,
&nbsp; &nbsp; &nbsp; &nbsp;TRY_CONVERT<span class="br0">&#40;</span><span class="kw1">numeric</span><span class="br0">&#40;</span><span class="nu0">30</span>,<span class="nu0">10</span><span class="br0">&#41;</span>,SomeCol<span class="br0">&#41;</span> <span class="kw1">as</span> <span class="kw1">numeric</span>,
&nbsp; &nbsp; &nbsp; &nbsp;TRY_CONVERT<span class="br0">&#40;</span><span class="kw1">int</span>,SomeCol<span class="br0">&#41;</span> <span class="kw1">as</span> <span class="kw1">int</span>
<span class="kw1">FROm</span> #test</pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">select SomeCol,
	   TRY_CONVERT(float,SomeCol) as float,
	   TRY_CONVERT(date,SomeCol) as date,
	   TRY_CONVERT(datetime2,SomeCol) as datetime2,
	   TRY_CONVERT(datetime,SomeCol) as datetime,
	   TRY_CONVERT(time,SomeCol) as time,
	   TRY_CONVERT(numeric(30,10),SomeCol) as numeric,
	   TRY_CONVERT(int,SomeCol) as int
FROm #test</pre></div></div>

<p>Here is the result</p>
<div class="tables">
<table>
<tr>
<th>	SomeCol	</th>
<th>	float	</th>
<th>	date	</th>
<th>	datetime2	</th>
<th>	datetime	</th>
<th>	time	</th>
<th>	numeric	</th>
<th>	int	</th>
<tr>
<tr>
<td>	1	</td>
<td>	1	</td>
<td>	NULL	</td>
<td>	NULL	</td>
<td>	NULL	</td>
<td>	NULL	</td>
<td>	1	</td>
<td>	1	</td>
</tr>
<tr>
<td>	.	</td>
<td>	NULL	</td>
<td>	NULL	</td>
<td>	NULL	</td>
<td>	NULL	</td>
<td>	NULL	</td>
<td>	NULL	</td>
<td>	NULL	</td>
</tr>
<tr>
<td>	$	</td>
<td>	NULL	</td>
<td>	NULL	</td>
<td>	NULL	</td>
<td>	NULL	</td>
<td>	NULL	</td>
<td>	NULL	</td>
<td>	NULL	</td>
</tr>
<tr>
<td>	ddd	</td>
<td>	NULL	</td>
<td>	NULL	</td>
<td>	NULL	</td>
<td>	NULL	</td>
<td>	NULL	</td>
<td>	NULL	</td>
<td>	NULL	</td>
</tr>
<tr>
<td>	&#8212;	</td>
<td>	NULL	</td>
<td>	NULL	</td>
<td>	NULL	</td>
<td>	NULL	</td>
<td>	NULL	</td>
<td>	NULL	</td>
<td>	NULL	</td>
</tr>
<tr>
<td>	0	</td>
<td>	0	</td>
<td>	NULL	</td>
<td>	NULL	</td>
<td>	NULL	</td>
<td>	NULL	</td>
<td>	0	</td>
<td>	0	</td>
</tr>
<tr>
<td>	123aaa1	</td>
<td>	NULL	</td>
<td>	NULL	</td>
<td>	NULL	</td>
<td>	NULL	</td>
<td>	NULL	</td>
<td>	NULL	</td>
<td>	NULL	</td>
</tr>
<tr>
<td>	2de	</td>
<td>	NULL	</td>
<td>	NULL	</td>
<td>	NULL	</td>
<td>	NULL	</td>
<td>	NULL	</td>
<td>	NULL	</td>
<td>	NULL	</td>
</tr>
<tr>
<td>	((((	</td>
<td>	NULL	</td>
<td>	NULL	</td>
<td>	NULL	</td>
<td>	NULL	</td>
<td>	NULL	</td>
<td>	NULL	</td>
<td>	NULL	</td>
</tr>
<tr>
<td>	20110230	</td>
<td>	20110230	</td>
<td>	NULL	</td>
<td>	NULL	</td>
<td>	NULL	</td>
<td>	NULL	</td>
<td>	20110230.0000000000</td>
<td>	20110230	</td>
</tr>
<tr>
<td>	20110228	</td>
<td>	20110228	</td>
<td>	2011-02-28	</td>
<td>	00:00.0	</td>
<td>	00:00.0	</td>
<td>	00:00.0	</td>
<td>	20110228.0000000000</td>
<td>	20110228	</td>
</tr>
<tr>
<td>	14:58	</td>
<td>	NULL	</td>
<td>	1900-01-01	</td>
<td>	1900-01-01 14:58:00.0000000	</td>
<td>	1900-01-01 14:58:00.000	</td>
<td>	14:58:00.0000000	</td>
<td>	NULL	</td>
<td>	NULL	</td>
</tr>
<tr>
<td>	16000228	</td>
<td>	16000228	</td>
<td>	1600-02-28	</td>
<td>	1600-02-28 00:00:00.0000000	</td>
<td>	NULL	</td>
<td>	00:00.0	</td>
<td>	16000228.0000000000</td>
<td>	16000228	</td>
</tr>
<tr>
<td>	0.12345678901</td>
<td>	0.12345678901</td>
<td>	NULL	</td>
<td>	NULL	</td>
<td>	NULL	</td>
<td>	NULL	</td>
<td>	0.123456789	</td>
<td>	NULL	</td>
</tr>
</tr>
</tr>
</table></div>
<p>Pretty neat, as you can see if you for example try to convert 16000228	to a datetime you will get 0 since it falls out of the acceptable datetime range, for datetime2 and date you do get a value back. The conversion to numeric(30,10) also shows that the value is truncated after 10 decimals. This function is pretty handy since you won&#8217;t get the conversion errors you would get if you try to convert it with the regular convert function</p>
<p>You can also use CASE or IIF to return if the value can or cannot be converted, below is an example of both</p>
<p><strong>CASE</strong></p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
</pre></td><td class="de1"><pre class="de1"><span class="kw1">SELECT</span> 
&nbsp; &nbsp; <span class="kw1">CASE</span> <span class="kw1">WHEN</span> TRY_CONVERT<span class="br0">&#40;</span><span class="kw1">float</span>,<span class="st0">'bla'</span><span class="br0">&#41;</span> <span class="kw1">IS</span> <span class="sy0">NULL</span> 
&nbsp; &nbsp; <span class="kw1">THEN</span> <span class="st0">'Cast failed'</span>
&nbsp; &nbsp; <span class="kw1">ELSE</span> <span class="st0">'Cast succeeded'</span>
<span class="kw1">END</span> 
<span class="kw1">UNION</span>
<span class="kw1">SELECT</span> 
&nbsp; &nbsp; <span class="kw1">CASE</span> <span class="kw1">WHEN</span> TRY_CONVERT<span class="br0">&#40;</span><span class="kw1">float</span>,<span class="st0">'1'</span><span class="br0">&#41;</span> <span class="kw1">IS</span> <span class="sy0">NULL</span> 
&nbsp; &nbsp; <span class="kw1">THEN</span> <span class="st0">'Cast failed'</span>
&nbsp; &nbsp; <span class="kw1">ELSE</span> <span class="st0">'Cast succeeded'</span>
<span class="kw1">END</span> </pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">SELECT 
    CASE WHEN TRY_CONVERT(float,'bla') IS NULL 
    THEN 'Cast failed'
    ELSE 'Cast succeeded'
END 
UNION
SELECT 
    CASE WHEN TRY_CONVERT(float,'1') IS NULL 
    THEN 'Cast failed'
    ELSE 'Cast succeeded'
END </pre></div></div>

<p>&#8212;&#8212;&#8211;<br />
Cast failed<br />
Cast succeeded</p>
<p><strong>IIF</strong></p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
</pre></td><td class="de1"><pre class="de1"><span class="kw1">SELECT</span> IIF<span class="br0">&#40;</span>TRY_CONVERT<span class="br0">&#40;</span><span class="kw1">float</span>,<span class="st0">'bla'</span><span class="br0">&#41;</span><span class="kw1">IS</span> <span class="sy0">NULL</span>,<span class="st0">'Cast failed'</span>,<span class="st0">'Cast succeeded'</span><span class="br0">&#41;</span>
<span class="kw1">UNION</span>
<span class="kw1">SELECT</span> IIF<span class="br0">&#40;</span>TRY_CONVERT<span class="br0">&#40;</span><span class="kw1">float</span>,<span class="st0">'1'</span><span class="br0">&#41;</span><span class="kw1">IS</span> <span class="sy0">NULL</span>,<span class="st0">'Cast failed'</span>,<span class="st0">'Cast succeeded'</span><span class="br0">&#41;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">SELECT IIF(TRY_CONVERT(float,'bla')IS NULL,'Cast failed','Cast succeeded')
UNION
SELECT IIF(TRY_CONVERT(float,'1')IS NULL,'Cast failed','Cast succeeded')</pre></div></div>

<p>&#8212;&#8212;&#8211;<br />
Cast failed<br />
Cast succeeded</p>
<p>Be aware that if you pass in a NULL, then NULL is returned</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
</pre></td><td class="de1"><pre class="de1"><span class="kw1">select</span> &nbsp;TRY_CONVERT<span class="br0">&#40;</span> <span class="kw1">numeric</span><span class="br0">&#40;</span><span class="nu0">30</span>,<span class="nu0">10</span><span class="br0">&#41;</span>,null<span class="br0">&#41;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">select  TRY_CONVERT( numeric(30,10),null)</pre></div></div>

<p></p>
<p>TRY_CONVERT is something that was long overdue and it will eliminate a lot of issues, no more need for custom IsNumeric and IsInt functions, this one does it all.</p>
]]></content:encoded>
			<wfw:commentRss>/index.php/datamgmt/datadesign/try_convert-in-sql-server-denali/feed/</wfw:commentRss>
		<slash:comments>0</slash:comments>
		</item>
	</channel>
</rss>
