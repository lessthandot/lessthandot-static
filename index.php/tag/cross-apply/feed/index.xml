<?xml version="1.0" encoding="UTF-8"?><rss version="2.0"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:atom="http://www.w3.org/2005/Atom"
	xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
	xmlns:slash="http://purl.org/rss/1.0/modules/slash/"
	>

<channel>
	<title>cross apply &#8211; LessthanDot</title>
	<atom:link href="/index.php/tag/cross-apply/feed/" rel="self" type="application/rss+xml" />
	<link>/</link>
	<description>A Technical Community for IT Professionals</description>
	<lastBuildDate>Sat, 09 Mar 2019 12:50:36 +0000</lastBuildDate>
	<language>en-US</language>
	<sy:updatePeriod>hourly</sy:updatePeriod>
	<sy:updateFrequency>1</sy:updateFrequency>
	<generator>https://wordpress.org/?v=4.6.1</generator>
	<item>
		<title>Grouping and merging data with CROSS APPLY</title>
		<link>/index.php/datamgmt/dbprogramming/grouping-and-merging-data-with/</link>
		<comments>/index.php/datamgmt/dbprogramming/grouping-and-merging-data-with/#respond</comments>
		<pubDate>Mon, 12 Mar 2012 12:14:00 +0000</pubDate>
		<dc:creator><![CDATA[Axel Achten (axel8s)]]></dc:creator>
				<category><![CDATA[Database Programming]]></category>
		<category><![CDATA[Microsoft SQL Server]]></category>
		<category><![CDATA[cross apply]]></category>
		<category><![CDATA[for xml]]></category>
		<category><![CDATA[merging columns]]></category>
		<category><![CDATA[sql server]]></category>

		<guid isPermaLink="false">/index.php/2012/03/grouping-and-merging-data-with/</guid>
		<description><![CDATA[The first four letters in database administrator spell data so for some reason people see you as somebody who can do magic with all kinds of data. One of the requests I got was to start from an export of course data and to group the courses and merge th&#8230;]]></description>
				<content:encoded><![CDATA[<p>The first four letters in database administrator spell data so for some reason people see you as somebody who can do magic with all kinds of data. One of the requests I got was to start from an export of course data and to group the courses and merge the dates in a single column. I had to start with an Excel document and the result had to be in CSV format. For the import and export I used the Import/Export Wizard in real life but for this blog post I&#8217;ll use some sample data.<br />
First things first, let&#8217;s create a table to hold the data:</p>
<pre>CREATE TABLE CourseData (
	CourseCode varchar (10),
	CourseName varchar (100),
	CourseStartDate date
	)
GO</pre>
<p>Now let&#8217;s insert some data. Note that there are several courses with the different start dates. This was how the excel was given to me.</p>
<pre>DECLARE @i int = 1
WHILE @i &lt; 4
BEGIN
INSERT INTO CourseData
	VALUES ('10775A','Administering Microsoft SQL Server 2012 Databases',DATEADD(m,@i,getdate())),
			('10776A','Developing Microsoft SQL Server 2012 Databases',DATEADD(m,@i,getdate())),
			('10777A','Implementing a Data Warehouse with Microsoft SQL Server 2012 Databases',DATEADD(m,@i,getdate())),
			('10774A','Querying Microsoft SQL Server 2012',DATEADD(m,@i,getdate())),
			('10778A','Implementing Data Models and Reports with Microsoft SQL Server 2012',DATEADD(m,@i,getdate()))
SET @i = @i + 1
END
GO</pre>
<p>The result looks like this:</p>
<div class="image_block"><a href="/wp-content/uploads/blogs/DataMgmt/Axel8s/CrossApply1.png?mtime=1331554009"><img alt="" src="/wp-content/uploads/blogs/DataMgmt/Axel8s/CrossApply1.png?mtime=1331554009" width="488" height="284" /></a></div>
<p>Now if you look at the data you&#8217;ll see we have 3 lines per course each with a different date. The request was to have 1 line per course with all the dates in one field. To do this I&#8217;m &#8220;joining&#8221; the table to itself by using it as a normal table once and as XML the second time. Using the DISTINCT clause on the left side filters out the duplicate records. The FOR XML on the right side is used to make a dummy list of the dates the courses start. With the CROSS APPLY operator I&#8217;m joining the two results in a result set like requested by the customer:</p>
<pre>SELECT DISTINCT CourseCode, CourseName, Datelist 
	FROM CourseData AS o
CROSS APPLY
(SELECT CONVERT(varchar(10),CourseStartDate,103) + ' '
	FROM CourseData AS x
	WHERE o.CourseCode = x.CourseCode
	FOR XML path('')) AS dummy(datelist)
GO</pre>
<p>With the desired result:</p>
<div class="image_block"><a href="/wp-content/uploads/blogs/DataMgmt/Axel8s/CrossApply2.png?mtime=1331554024"><img alt="" src="/wp-content/uploads/blogs/DataMgmt/Axel8s/CrossApply2.png?mtime=1331554024" width="594" height="156" /></a></div>
<p>So maybe the end-user was right and we can do magic with data. I didn&#8217;t use the tools he expected but importing the Excel file into a SQL Server database brought it to my comfort zone where I could use the XML and CROSS APPLY possibilities of SQL Server to get the desired result.</p>
]]></content:encoded>
			<wfw:commentRss>/index.php/datamgmt/dbprogramming/grouping-and-merging-data-with/feed/</wfw:commentRss>
		<slash:comments>0</slash:comments>
		</item>
		<item>
		<title>SQL Advent 2011 Day 16: CROSS APPLY and OUTER APPLY</title>
		<link>/index.php/datamgmt/datadesign/sql-advent-2011-day-16/</link>
		<comments>/index.php/datamgmt/datadesign/sql-advent-2011-day-16/#respond</comments>
		<pubDate>Fri, 16 Dec 2011 19:12:00 +0000</pubDate>
		<dc:creator><![CDATA[SQLDenis]]></dc:creator>
				<category><![CDATA[Data Modelling and Design]]></category>
		<category><![CDATA[cross apply]]></category>
		<category><![CDATA[cross join]]></category>
		<category><![CDATA[outer apply]]></category>
		<category><![CDATA[sql server 2005]]></category>
		<category><![CDATA[sql server 2008]]></category>

		<guid isPermaLink="false">/index.php/2011/12/sql-advent-2011-day-16/</guid>
		<description><![CDATA[Today we are going to take a look at CROSS APPLY and OUTER APPLY. The APPLY operator is similar to a CROSS JOIN however you can return different set of rows for each row in the left table.]]></description>
				<content:encoded><![CDATA[<p>In my <a href="/index.php/DataMgmt/DataDesign/are-you-ready-for-sql">Are you ready for SQL Server 2012 or are you still partying like it is 1999?</a> post, I wrote about how you should start using SQL Server 2005 and SQL Server 2008 functionality now in order to prepare for SQL Server 2012. I still see tons of code that is written in the pre 2005 style and people still keep using those functions, procs and statements even though SQL Server 2005 and 2008 have much better functionality.</p>
<p>Today we are going to take a look at CROSS APPLY and OUTER APPLY. In yesterday&#8217;s <a href="/index.php/DataMgmt/DBProgramming/MSSQLServer/sql-advent-2011-day-15">JOIN</a> post I touched upon CROSS APPLY  briefly  today I want to took a closer look</p>
<p>The APPLY operator is similar to a CROSS JOIN however you can return different set of rows for each row in the left table. First create this table</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
</pre></td><td class="de1"><pre class="de1"><span class="kw1">CREATE</span> <span class="kw1">TABLE</span> Test1<span class="br0">&#40;</span>id <span class="kw1">INT</span><span class="br0">&#41;</span>
go
&nbsp;
<span class="kw1">INSERT</span> Test1 <span class="kw1">VALUES</span><span class="br0">&#40;</span><span class="nu0">1</span><span class="br0">&#41;</span>
<span class="kw1">INSERT</span> Test1 <span class="kw1">VALUES</span><span class="br0">&#40;</span><span class="nu0">2</span><span class="br0">&#41;</span>
<span class="kw1">INSERT</span> Test1 <span class="kw1">VALUES</span><span class="br0">&#40;</span><span class="nu0">3</span><span class="br0">&#41;</span>
<span class="kw1">INSERT</span> Test1 <span class="kw1">VALUES</span><span class="br0">&#40;</span><span class="nu0">4</span><span class="br0">&#41;</span>
<span class="kw1">INSERT</span> Test1 <span class="kw1">VALUES</span><span class="br0">&#40;</span><span class="nu0">5</span><span class="br0">&#41;</span>
&nbsp;
&nbsp;
<span class="kw1">CREATE</span> <span class="kw1">TABLE</span> Test2<span class="br0">&#40;</span>id <span class="kw1">int</span>,SomeID <span class="kw1">INT</span><span class="br0">&#41;</span>
go
&nbsp;
<span class="kw1">INSERT</span> Test2 <span class="kw1">VALUES</span><span class="br0">&#40;</span><span class="nu0">1</span>,<span class="nu0">1</span><span class="br0">&#41;</span>
<span class="kw1">INSERT</span> Test2 <span class="kw1">VALUES</span><span class="br0">&#40;</span><span class="nu0">1</span>,<span class="nu0">2</span><span class="br0">&#41;</span>
<span class="kw1">INSERT</span> Test2 <span class="kw1">VALUES</span><span class="br0">&#40;</span><span class="nu0">1</span>,<span class="nu0">3</span><span class="br0">&#41;</span>
<span class="kw1">INSERT</span> Test2 <span class="kw1">VALUES</span><span class="br0">&#40;</span><span class="nu0">2</span>,<span class="nu0">1</span><span class="br0">&#41;</span>
<span class="kw1">INSERT</span> Test2 <span class="kw1">VALUES</span><span class="br0">&#40;</span><span class="nu0">2</span>,<span class="nu0">2</span><span class="br0">&#41;</span>
<span class="kw1">INSERT</span> Test2 <span class="kw1">VALUES</span><span class="br0">&#40;</span><span class="nu0">2</span>,<span class="nu0">3</span><span class="br0">&#41;</span>
<span class="kw1">INSERT</span> Test2 <span class="kw1">VALUES</span><span class="br0">&#40;</span><span class="nu0">3</span>,<span class="nu0">1</span><span class="br0">&#41;</span>
<span class="kw1">INSERT</span> Test2 <span class="kw1">VALUES</span><span class="br0">&#40;</span><span class="nu0">3</span>,<span class="nu0">2</span><span class="br0">&#41;</span>
<span class="kw1">INSERT</span> Test2 <span class="kw1">VALUES</span><span class="br0">&#40;</span><span class="nu0">3</span>,<span class="nu0">3</span><span class="br0">&#41;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">CREATE TABLE Test1(id INT)
go
 
INSERT Test1 VALUES(1)
INSERT Test1 VALUES(2)
INSERT Test1 VALUES(3)
INSERT Test1 VALUES(4)
INSERT Test1 VALUES(5)
 
 
CREATE TABLE Test2(id int,SomeID INT)
go
 
INSERT Test2 VALUES(1,1)
INSERT Test2 VALUES(1,2)
INSERT Test2 VALUES(1,3)
INSERT Test2 VALUES(2,1)
INSERT Test2 VALUES(2,2)
INSERT Test2 VALUES(2,3)
INSERT Test2 VALUES(3,1)
INSERT Test2 VALUES(3,2)
INSERT Test2 VALUES(3,3)</pre></div></div>

<p>If you want to do a cartesian product, you can use one of these two queries, they return identical data, for each row in one table all the rows in the other tavle are returned, you will get back 45 rows</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
</pre></td><td class="de1"><pre class="de1"><span class="kw1">SELECT</span> <span class="sy0">*</span> <span class="kw1">FROM</span> Test1 t1
<span class="sy0">CROSS</span> APPLY Test2 t2
&nbsp;
<span class="kw1">SELECT</span> <span class="sy0">*</span> <span class="kw1">FROM</span> Test1 t1
<span class="sy0">CROSS</span> <span class="sy0">JOIN</span> Test2 t2</pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">SELECT * FROM Test1 t1
CROSS APPLY Test2 t2

SELECT * FROM Test1 t1
CROSS JOIN Test2 t2</pre></div></div>

<p>Let&#8217;s say I want to return all rows in table Test1, join that with all rows in table Test2 but I want only the two top rows in table Test2 ordered by SomeID descending</p>
<p>So from table Test2, what we want back is this</p>
<pre>Someid	ID
3	1
2	1
3	2
2	2
3	3
2	3</pre>
<p>Here is how you can do that by using the CROSS APPLY operator</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
</pre></td><td class="de1"><pre class="de1"><span class="kw1">SELECT</span> <span class="sy0">*</span> <span class="kw1">FROM</span> Test1 t1
<span class="sy0">CROSS</span> APPLY <span class="br0">&#40;</span><span class="kw1">SELECT</span> <span class="kw1">TOP</span><span class="br0">&#40;</span><span class="nu0">2</span><span class="br0">&#41;</span> Someid,ID <span class="kw1">FROM</span> Test2 t2
<span class="kw1">WHERE</span> t2.<span class="me1">id</span> <span class="sy0">=</span> t1.<span class="me1">id</span>
<span class="kw1">ORDER</span> <span class="kw1">BY</span> Someid <span class="kw1">DESC</span><span class="br0">&#41;</span> x</pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">SELECT * FROM Test1 t1
CROSS APPLY (SELECT TOP(2) Someid,ID FROM Test2 t2
WHERE t2.id = t1.id
ORDER BY Someid DESC) x</pre></div></div>

<p></p>
<pre>id	Someid	ID
1	3	1
1	2	1
2	3	2
2	2	2
3	3	3
3	2	3</pre>
<p>If you want to return all rows from table Test1 regardless if they exist in table Test2, you can change CROSS APPLY to OUTER APPLY</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
</pre></td><td class="de1"><pre class="de1"><span class="kw1">SELECT</span> <span class="sy0">*</span> <span class="kw1">FROM</span> Test1 t1
<span class="sy0">OUTER</span> APPLY <span class="br0">&#40;</span><span class="kw1">SELECT</span> <span class="kw1">TOP</span><span class="br0">&#40;</span><span class="nu0">2</span><span class="br0">&#41;</span> Someid,ID <span class="kw1">FROM</span> Test2 t2
<span class="kw1">WHERE</span> t2.<span class="me1">id</span> <span class="sy0">=</span> t1.<span class="me1">id</span>
<span class="kw1">ORDER</span> <span class="kw1">BY</span> Someid <span class="kw1">DESC</span><span class="br0">&#41;</span> x</pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">SELECT * FROM Test1 t1
OUTER APPLY (SELECT TOP(2) Someid,ID FROM Test2 t2
WHERE t2.id = t1.id
ORDER BY Someid DESC) x</pre></div></div>

<p></p>
<pre>id	Someid	ID
1	3	1
1	2	1
2	3	2
2	2	2
3	3	3
3	2	3
4	NULL	NULL
5	NULL	NULL</pre>
<p>As you can see, you got NULLS back for the rows with id 4 and 5, this is because table Test2 does not have those ids.</p>
<p>Now let&#8217;s put that derived table in a user defined function</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
</pre></td><td class="de1"><pre class="de1"><span class="kw1">CREATE</span> <span class="kw1">FUNCTION</span> fnTopTwoCustomers<span class="br0">&#40;</span>@id <span class="kw1">int</span><span class="br0">&#41;</span>
<span class="kw1">RETURNS</span> <span class="kw1">TABLE</span>
<span class="kw1">AS</span>
<span class="kw1">RETURN</span>
<span class="kw1">SELECT</span> <span class="kw1">TOP</span><span class="br0">&#40;</span><span class="nu0">2</span><span class="br0">&#41;</span> Someid,ID <span class="kw1">FROM</span> Test2 t2
<span class="kw1">WHERE</span> t2.<span class="me1">id</span> <span class="sy0">=</span> @id
<span class="kw1">ORDER</span> <span class="kw1">BY</span> Someid <span class="kw1">DESC</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">CREATE FUNCTION fnTopTwoCustomers(@id int)
RETURNS TABLE
AS
RETURN
SELECT TOP(2) Someid,ID FROM Test2 t2
WHERE t2.id = @id
ORDER BY Someid DESC</pre></div></div>

<p>A quick test with id 1 passed in</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
</pre></td><td class="de1"><pre class="de1"><span class="kw1">SELECT</span> <span class="sy0">*</span> <span class="kw1">FROM</span> dbo.<span class="me1">fnTopTwoCustomers</span><span class="br0">&#40;</span><span class="nu0">1</span><span class="br0">&#41;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">SELECT * FROM dbo.fnTopTwoCustomers(1)</pre></div></div>

<p></p>
<pre>Someid	ID
3	1
2	1</pre>
<p>Now let&#8217;s rewrite the queries from before to use this function instead of the derived table</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
</pre></td><td class="de1"><pre class="de1"><span class="kw1">SELECT</span> <span class="sy0">*</span> <span class="kw1">FROM</span> Test1 t1
<span class="sy0">CROSS</span> APPLY dbo.<span class="me1">fnTopTwoCustomers</span><span class="br0">&#40;</span>t1.<span class="me1">id</span><span class="br0">&#41;</span> x
&nbsp;
<span class="kw1">SELECT</span> <span class="sy0">*</span> <span class="kw1">FROM</span> Test1 t1
<span class="sy0">OUTER</span> APPLY dbo.<span class="me1">fnTopTwoCustomers</span><span class="br0">&#40;</span>t1.<span class="me1">id</span><span class="br0">&#41;</span> x</pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">SELECT * FROM Test1 t1
CROSS APPLY dbo.fnTopTwoCustomers(t1.id) x

SELECT * FROM Test1 t1
OUTER APPLY dbo.fnTopTwoCustomers(t1.id) x</pre></div></div>

<p>The output is the same as before but the code looks much cleaner and easier to maintain</p>
<p>That is all for today, come back tomorrow for the next post in this series</p>
]]></content:encoded>
			<wfw:commentRss>/index.php/datamgmt/datadesign/sql-advent-2011-day-16/feed/</wfw:commentRss>
		<slash:comments>0</slash:comments>
		</item>
	</channel>
</rss>
