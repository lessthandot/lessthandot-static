<?xml version="1.0" encoding="UTF-8"?><rss version="2.0"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:atom="http://www.w3.org/2005/Atom"
	xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
	xmlns:slash="http://purl.org/rss/1.0/modules/slash/"
	>

<channel>
	<title>grouping &#8211; LessthanDot</title>
	<atom:link href="/index.php/tag/grouping/feed/" rel="self" type="application/rss+xml" />
	<link>/</link>
	<description>A Technical Community for IT Professionals</description>
	<lastBuildDate>Sat, 09 Mar 2019 12:50:36 +0000</lastBuildDate>
	<language>en-US</language>
	<sy:updatePeriod>hourly</sy:updatePeriod>
	<sy:updateFrequency>1</sy:updateFrequency>
	<generator>https://wordpress.org/?v=4.6.1</generator>
	<item>
		<title>Use the GROUPING function to determine whether a value is NULL because of ROLLUP</title>
		<link>/index.php/datamgmt/datadesign/use-the-grouping-function-to/</link>
		<comments>/index.php/datamgmt/datadesign/use-the-grouping-function-to/#comments</comments>
		<pubDate>Wed, 23 Mar 2011 13:58:00 +0000</pubDate>
		<dc:creator><![CDATA[SQLDenis]]></dc:creator>
				<category><![CDATA[Data Modelling and Design]]></category>
		<category><![CDATA[Database Programming]]></category>
		<category><![CDATA[Microsoft SQL Server]]></category>
		<category><![CDATA[aggregations]]></category>
		<category><![CDATA[functions]]></category>
		<category><![CDATA[group by]]></category>
		<category><![CDATA[grouping]]></category>
		<category><![CDATA[rollup]]></category>
		<category><![CDATA[sql server 2008]]></category>

		<guid isPermaLink="false">/index.php/2011/03/use-the-grouping-function-to/</guid>
		<description><![CDATA[If you have been writing queries that use ROLLUP, you are probably aware that the aggregated rows return NULL for the column that you are grouping by. What if you already have a NULL value in that column, how can you know which row is the aggregated row&#8230;]]></description>
				<content:encoded><![CDATA[<p>If you have been writing queries that use ROLLUP, you are probably aware that the aggregated rows return NULL for the column that you are grouping by. What if you already have a NULL value in that column, how can you know which row is the aggregated row? Let&#8217;s take a look, first create this table</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
</pre></td><td class="de1"><pre class="de1"><span class="kw1">CREATE</span> <span class="kw1">TABLE</span> TestRollup<span class="br0">&#40;</span>Country <span class="kw1">VARCHAR</span><span class="br0">&#40;</span><span class="nu0">20</span><span class="br0">&#41;</span>,Col1 <span class="kw1">INT</span>, col2 <span class="kw1">INT</span><span class="br0">&#41;</span>
<span class="kw1">INSERT</span> TestRollup <span class="kw1">VALUES</span><span class="br0">&#40;</span><span class="st0">'United States'</span>,<span class="nu0">20</span>,<span class="nu0">10</span><span class="br0">&#41;</span>
<span class="kw1">INSERT</span> TestRollup <span class="kw1">VALUES</span><span class="br0">&#40;</span><span class="st0">'United States'</span>,<span class="nu0">30</span>,<span class="nu0">90</span><span class="br0">&#41;</span>
&nbsp;
<span class="kw1">INSERT</span> TestRollup <span class="kw1">VALUES</span><span class="br0">&#40;</span><span class="st0">'Denmark'</span>,<span class="nu0">20</span>,<span class="nu0">10</span><span class="br0">&#41;</span>
<span class="kw1">INSERT</span> TestRollup <span class="kw1">VALUES</span><span class="br0">&#40;</span><span class="st0">'Denmark'</span>,<span class="nu0">44</span>,<span class="nu0">33</span><span class="br0">&#41;</span>
&nbsp;
<span class="kw1">INSERT</span> TestRollup <span class="kw1">VALUES</span><span class="br0">&#40;</span><span class="st0">'Zimbabwe'</span>,<span class="nu0">20</span>,<span class="nu0">10</span><span class="br0">&#41;</span>
<span class="kw1">INSERT</span> TestRollup <span class="kw1">VALUES</span><span class="br0">&#40;</span><span class="st0">'Zimbabwe'</span>,<span class="nu0">20</span>,<span class="nu0">10</span><span class="br0">&#41;</span>
<span class="kw1">INSERT</span> TestRollup <span class="kw1">VALUES</span><span class="br0">&#40;</span><span class="st0">'Zimbabwe'</span>,<span class="nu0">20</span>,<span class="nu0">1000</span><span class="br0">&#41;</span>
<span class="kw1">INSERT</span> TestRollup <span class="kw1">VALUES</span><span class="br0">&#40;</span><span class="st0">'Zimbabwe'</span>,<span class="nu0">2000</span>,<span class="nu0">10</span><span class="br0">&#41;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">CREATE TABLE TestRollup(Country VARCHAR(20),Col1 INT, col2 INT)
INSERT TestRollup VALUES('United States',20,10)
INSERT TestRollup VALUES('United States',30,90)

INSERT TestRollup VALUES('Denmark',20,10)
INSERT TestRollup VALUES('Denmark',44,33)

INSERT TestRollup VALUES('Zimbabwe',20,10)
INSERT TestRollup VALUES('Zimbabwe',20,10)
INSERT TestRollup VALUES('Zimbabwe',20,1000)
INSERT TestRollup VALUES('Zimbabwe',2000,10)</pre></div></div>

<p>Now let&#8217;s do our simple ROLLUP query</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
</pre></td><td class="de1"><pre class="de1"><span class="kw1">SELECT</span> Country, <span class="kw2">SUM</span><span class="br0">&#40;</span>Col1<span class="br0">&#41;</span> Col1Sum, <span class="kw2">SUM</span><span class="br0">&#40;</span>col2<span class="br0">&#41;</span> <span class="kw1">AS</span> Col2Sum
<span class="kw1">FROM</span> TestRollup
<span class="kw1">GROUP</span> <span class="kw1">BY</span> Country <span class="kw1">WITH</span> <span class="kw1">ROLLUP</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">SELECT Country, SUM(Col1) Col1Sum, SUM(col2) AS Col2Sum
FROM TestRollup
GROUP BY Country WITH ROLLUP</pre></div></div>

<p>Here is the results</p>
<div class="tables">
<table>
<tr>
<th>Country</th>
<th>	Col1Sum</th>
<th>	Col2Sum</th>
</tr>
<tr>
<td>Denmark	</td>
<td>64</td>
<td>	43</td>
</tr>
<tr>
<td>United States</td>
<td>	50</td>
<td>	100</td>
</tr>
<tr>
<td>Zimbabwe	</td>
<td>2060</td>
<td>	1030</td>
</tr>
<tr>
<td>NULL	</td>
<td>2174</td>
<td>	1173</td>
</tr>
</table>
</div>
<p>We can easily determine that the Country column that has the value NULL is the total. What happens when we add the following row</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
</pre></td><td class="de1"><pre class="de1"><span class="kw1">INSERT</span> TestRollup <span class="kw1">VALUES</span><span class="br0">&#40;</span><span class="sy0">NULL</span>,<span class="nu0">2000</span>,<span class="nu0">3000</span><span class="br0">&#41;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">INSERT TestRollup VALUES(NULL,2000,3000)</pre></div></div>

<p>Now when we run the same query again, we have two rows where Country is NULL</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
</pre></td><td class="de1"><pre class="de1"><span class="kw1">SELECT</span> Country, <span class="kw2">SUM</span><span class="br0">&#40;</span>Col1<span class="br0">&#41;</span> Col1Sum, <span class="kw2">SUM</span><span class="br0">&#40;</span>col2<span class="br0">&#41;</span> <span class="kw1">AS</span> Col2Sum
<span class="kw1">FROM</span> TestRollup
<span class="kw1">GROUP</span> <span class="kw1">BY</span> Country <span class="kw1">WITH</span> <span class="kw1">ROLLUP</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">SELECT Country, SUM(Col1) Col1Sum, SUM(col2) AS Col2Sum
FROM TestRollup
GROUP BY Country WITH ROLLUP</pre></div></div>

<div class="tables">
<p>Here are the results</p>
<table>
<tr>
<th>Country</th>
<th>	Col1Sum</th>
<th>	Col2Sum</th>
</tr>
<tr>
<td>NULL</td>
<td>	2000</td>
<td>	3000</td>
</tr>
<tr>
<td>Denmark	</td>
<td>64</td>
<td>	43</td>
</tr>
<tr>
<td>United States</td>
<td>	50</td>
<td>	100</td>
</tr>
<tr>
<td>Zimbabwe	</td>
<td>2060</td>
<td>	1030</td>
</tr>
<tr>
<td>NULL	</td>
<td>4174</td>
<td>	4173</td>
</tr>
</table>
</div>
<p>To figure out which of the two is the one that is caused by ROLLUP, you can use the GROUPING function, the function will return 1 if it is aggregated and 0 otherwise.</p>
<p>Here is what Books On Line has to say about <a href="http://msdn.microsoft.com/en-us/library/ms178544.aspx">GROUPING</a></p>
<p><em><strong>GROUPING</strong><br />
Indicates whether a specified column expression in a GROUP BY list is aggregated or not. GROUPING returns 1 for aggregated or 0 for not aggregated in the result set. GROUPING can be used only in the SELECT &lt;select&gt; list, HAVING, and ORDER BY clauses when GROUP BY is specified.</p>
<p>GROUPING is used to distinguish the null values that are returned by ROLLUP, CUBE or GROUPING SETS from standard null values. The NULL returned as the result of a ROLLUP, CUBE or GROUPING SETS operation is a special use of NULL. This acts as a column placeholder in the result set and means all.</em></p>
<p>Now, let&#8217;s add GROUPING(Country) to our query</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
</pre></td><td class="de1"><pre class="de1"><span class="kw1">SELECT</span> Country, <span class="kw2">SUM</span><span class="br0">&#40;</span>Col1<span class="br0">&#41;</span> Col1Sum, <span class="kw2">SUM</span><span class="br0">&#40;</span>col2<span class="br0">&#41;</span> <span class="kw1">AS</span> Col2Sum, <span class="kw1">GROUPING</span><span class="br0">&#40;</span>Country<span class="br0">&#41;</span> <span class="kw1">AS</span> GroupingCountry
<span class="kw1">FROM</span> TestRollup
<span class="kw1">GROUP</span> <span class="kw1">BY</span> Country <span class="kw1">WITH</span> <span class="kw1">ROLLUP</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">SELECT Country, SUM(Col1) Col1Sum, SUM(col2) AS Col2Sum, GROUPING(Country) AS GroupingCountry
FROM TestRollup
GROUP BY Country WITH ROLLUP</pre></div></div>

<p>Here are the results, as you can see the function returns 1 for the aggregated row</p>
<div class="tables">
<table>
<tr>
<th>Country</th>
<th>	Col1Sum</th>
<th>	Col2Sum</th>
<th>	GroupingCountry</th>
</tr>
<tr>
<td>NULL</td>
<td>	2000</td>
<td>	3000</td>
<td>	0</td>
</tr>
<tr>
<td>Denmark</td>
<td>	64</td>
<td>	43</td>
<td>	0</td>
</tr>
<tr>
<td>United States</td>
<td>	50</td>
<td>	100</td>
<td>	0</td>
</tr>
<tr>
<td>Zimbabwe</td>
<td>	2060</td>
<td>	1030</td>
<td>	0</td>
</tr>
<tr>
<td>NULL</td>
<td>	4174</td>
<td>	4173</td>
<td>	1</td>
</tr>
</table>
</div>
<p>Now we can simply add a CASE expression to display Total for the aggregated column</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
</pre></td><td class="de1"><pre class="de1"><span class="kw1">SELECT</span> <span class="kw1">CASE</span> &nbsp;<span class="kw1">GROUPING</span><span class="br0">&#40;</span>Country<span class="br0">&#41;</span> <span class="kw1">WHEN</span> <span class="nu0">1</span> <span class="kw1">THEN</span> <span class="st0">'Total'</span> <span class="kw1">ELSE</span> Country <span class="kw1">END</span> Country, <span class="kw2">SUM</span><span class="br0">&#40;</span>Col1<span class="br0">&#41;</span> Col1Sum, <span class="kw2">SUM</span><span class="br0">&#40;</span>col2<span class="br0">&#41;</span> <span class="kw1">AS</span> Col2Sum
<span class="kw1">FROM</span> TestRollup
<span class="kw1">GROUP</span> <span class="kw1">BY</span> Country <span class="kw1">WITH</span> <span class="kw1">ROLLUP</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">SELECT CASE  GROUPING(Country) WHEN 1 THEN 'Total' ELSE Country END Country, SUM(Col1) Col1Sum, SUM(col2) AS Col2Sum
FROM TestRollup
GROUP BY Country WITH ROLLUP</pre></div></div>

<p>Here is what the results look like </p>
<div class="tables">
<table>
<tr>
<th>Country</th>
<th>	Col1Sum</th>
<th>	Col2Sum</th>
</tr>
<tr>
<td>NULL	</td>
<td>2000</td>
<td>	3000</td>
</tr>
<tr>
<td>Denmark	</td>
<td>64</td>
<td>	43</td>
</tr>
<tr>
<td>United States	</td>
<td>50</td>
<td>	100</td>
</tr>
<tr>
<td>Zimbabwe	</td>
<td>2060</td>
<td>	1030</td>
</tr>
<tr>
<td>Total	</td>
<td>4174</td>
<td>	4173</td>
</tr>
</table>
</div>
<p>That is it for this post, hopefully it will help someone</p>
<p>*** <strong>Remember, if you have a SQL related question, try our <a href="http://forum.lessthandot.com/viewforum.php?f=17">Microsoft SQL Server Programming</a> forum or our <a href="http://forum.lessthandot.com/viewforum.php?f=22">Microsoft SQL Server Admin</a> forum</strong><ins></ins></p>
]]></content:encoded>
			<wfw:commentRss>/index.php/datamgmt/datadesign/use-the-grouping-function-to/feed/</wfw:commentRss>
		<slash:comments>1</slash:comments>
		</item>
		<item>
		<title>T-SQL Tuesday #016 Grouping Market Data With T-SQL</title>
		<link>/index.php/datamgmt/datadesign/t-sql-tuesday-016-grouping/</link>
		<comments>/index.php/datamgmt/datadesign/t-sql-tuesday-016-grouping/#comments</comments>
		<pubDate>Tue, 08 Mar 2011 10:52:00 +0000</pubDate>
		<dc:creator><![CDATA[SQLDenis]]></dc:creator>
				<category><![CDATA[Data Modelling and Design]]></category>
		<category><![CDATA[grouping]]></category>
		<category><![CDATA[ranking]]></category>
		<category><![CDATA[t-sql tuesday]]></category>

		<guid isPermaLink="false">/index.php/2011/03/t-sql-tuesday-016-grouping/</guid>
		<description><![CDATA[This month's T-SQL Tuesday is hosted by Jes Borland and it is all about grouping and aggregate functions, here is my attempt. I wrote most of this post on my way to the MVP summit in Seattle. This post is all about the stock market, charting data for In&#8230;]]></description>
				<content:encoded><![CDATA[<p><a href="/index.php/DataMgmt/DBProgramming/come-one-come-all-to"><img src="/wp-content/uploads/blogs/DataMgmt/olap_1.gif" /></a></p>
<p>This month&#8217;s T-SQL Tuesday is hosted by <a href="/index.php/DataMgmt/?disp=authdir&amp;author=420">Jes Borland</a> and it is all about grouping and aggregate functions, here is my attempt. I wrote most of this post on my way to the MVP summit in Seattle. This post is all about the stock market, charting data for Intraday chart and for end of day charts. This post contains a lot of code and I apologize for that, I just want you to be able to run the code, in order to do that we have to setup all the tables and data.</p>
<p>Most people think of aggregate/grouping functions being Min, Max, Avg, Sum etc etc. To me Row_number and other ranking/windowing functions, datepart, converting to date, year() and month() can also be considered grouping<br />
<br />
When I say <em>intraday</em>, I mean the values that you would see for a stock if you would pull up a chart at 3 PM, in this case it would be a chart from 9:30 AM till 4PM if this was traded on for example the NYSE or NASDAQ.</p>
<p><em>End of day values</em> are close values, so for example the close price for Apple on March 4 was $360.</p>
<p>We are going to chart intraday in either 1 day or 5 day charts. If it is one day we will chart in minutes, if it is 5 days we will chart in 5 minute increments.<br />
For end of day data we are going to chart daily if it is 1 month, 3 months or 6 months and weekly if it is greater than 6 months.</p>
<p>So to start we are going to make up some tables with some fake data.</p>
<h3>Preparing the tables and data</h3>
<p>First we need a table of symbols (some people will call them tickers). This table is very simple, all it has is a SymbolID and a Symbol. In reality this table would look different because sometimes companies will change the symbol, when Sun Microsystems changed from SUNW to JAVA is one such example.<br />
Here is the table</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
</pre></td><td class="de1"><pre class="de1"><span class="kw1">CREATE</span> <span class="kw1">TABLE</span> Symbols <span class="br0">&#40;</span>
&nbsp; &nbsp; &nbsp; &nbsp;SymbolID <span class="kw1">INT</span> <span class="sy0">NOT</span> <span class="sy0">NULL</span> <span class="kw1">PRIMARY</span> <span class="kw1">KEY</span>,
&nbsp; &nbsp; &nbsp; &nbsp;Symbol <span class="kw1">VARCHAR</span><span class="br0">&#40;</span><span class="nu0">20</span><span class="br0">&#41;</span> <span class="sy0">NOT</span> <span class="sy0">NULL</span><span class="br0">&#41;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">CREATE TABLE Symbols (
       SymbolID INT NOT NULL PRIMARY KEY,
       Symbol VARCHAR(20) NOT NULL)</pre></div></div>

<p>We will insert these 4 symbols</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
</pre></td><td class="de1"><pre class="de1"><span class="kw1">INSERT</span> Symbols <span class="kw1">VALUES</span><span class="br0">&#40;</span><span class="nu0">1</span>,<span class="st0">'ABC'</span><span class="br0">&#41;</span>
<span class="kw1">INSERT</span> Symbols <span class="kw1">VALUES</span><span class="br0">&#40;</span><span class="nu0">2</span>,<span class="st0">'DEF'</span><span class="br0">&#41;</span>
<span class="kw1">INSERT</span> Symbols <span class="kw1">VALUES</span><span class="br0">&#40;</span><span class="nu0">3</span>,<span class="st0">'MNO'</span><span class="br0">&#41;</span>
<span class="kw1">INSERT</span> Symbols <span class="kw1">VALUES</span><span class="br0">&#40;</span><span class="nu0">4</span>,<span class="st0">'XYZ'</span><span class="br0">&#41;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">INSERT Symbols VALUES(1,'ABC')
INSERT Symbols VALUES(2,'DEF')
INSERT Symbols VALUES(3,'MNO')
INSERT Symbols VALUES(4,'XYZ')</pre></div></div>

<p>Next up is the creation of the table of numbers, this will facilitate the creation of the data later on.</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
</pre></td><td class="de1"><pre class="de1"><span class="kw1">CREATE</span> <span class="kw1">TABLE</span> Numbers <span class="br0">&#40;</span>number <span class="kw1">INT</span> <span class="sy0">NOT</span> <span class="sy0">NULL</span> &nbsp;<span class="kw1">PRIMARY</span> <span class="kw1">KEY</span><span class="br0">&#41;</span>
GO</pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">CREATE TABLE Numbers (number INT NOT NULL  PRIMARY KEY)
GO</pre></div></div>

<p>This will populate the table with 90000 rows.</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
</pre></td><td class="de1"><pre class="de1"><span class="kw1">INSERT</span> Numbers
<span class="kw1">SELECT</span> <span class="kw1">TOP</span> <span class="nu0">90000</span> ROW_NUMBER<span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="kw1">OVER</span><span class="br0">&#40;</span><span class="kw1">ORDER</span> <span class="kw1">BY</span> s1.<span class="me1">id</span> <span class="br0">&#41;</span>
<span class="kw1">FROM</span> sysobjects s1,sysobjects s2,sysobjects s3</pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">INSERT Numbers
SELECT TOP 90000 ROW_NUMBER() OVER(ORDER BY s1.id )
FROM sysobjects s1,sysobjects s2,sysobjects s3</pre></div></div>

<p>Next up is a table that will hold some time information</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
</pre></td><td class="de1"><pre class="de1"><span class="kw1">CREATE</span> <span class="kw1">TABLE</span> TempTickTime <span class="br0">&#40;</span> TickTime <span class="kw1">DATETIME</span> <span class="sy0">NOT</span> <span class="sy0">NULL</span><span class="br0">&#41;</span>
GO</pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">CREATE TABLE TempTickTime ( TickTime DATETIME NOT NULL)
GO</pre></div></div>

<p>This will populate that table with 30 second intervals between 2011-02-28 09:30:30.000 and 2011-03-31 15:30:00.000 only when it is between 9:30 AM and 4 PM</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
</pre></td><td class="de1"><pre class="de1"><span class="kw1">DECLARE</span> @StartTime <span class="kw1">DATETIME</span> <span class="sy0">=</span> <span class="st0">'20110228 09:30:00'</span>
<span class="kw1">INSERT</span> TempTickTime
<span class="kw1">SELECT</span> <span class="kw2">DATEADD</span><span class="br0">&#40;</span>s,number <span class="sy0">*</span> <span class="nu0">30</span>,@StartTime<span class="br0">&#41;</span>
<span class="kw1">FROM</span> Numbers
<span class="kw1">WHERE</span> &nbsp;<span class="kw1">CONVERT</span><span class="br0">&#40;</span><span class="kw1">TIME</span>, <span class="kw2">DATEADD</span><span class="br0">&#40;</span>s,number <span class="sy0">*</span> <span class="nu0">30</span>,@StartTime<span class="br0">&#41;</span><span class="br0">&#41;</span> <span class="sy0">BETWEEN</span> <span class="st0">'09:30:00.0000000'</span> <span class="sy0">AND</span> <span class="st0">'16:00:00.0000000'</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">DECLARE @StartTime DATETIME = '20110228 09:30:00'
INSERT TempTickTime
SELECT DATEADD(s,number * 30,@StartTime)
FROM Numbers
WHERE  CONVERT(TIME, DATEADD(s,number * 30,@StartTime)) BETWEEN '09:30:00.0000000' AND '16:00:00.0000000'</pre></div></div>

<p>Now when you deal with global markets, some instruments trade Monday through Friday, some of them trade Sunday till Thursday and there are other variations.<br />
From the 4 tickers we have, two will trade Monday through Friday and two will trade Sunday till Thursday</p>
<p>Create this table and populate it as follows</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
</pre></td><td class="de1"><pre class="de1"><span class="kw1">CREATE</span> <span class="kw1">TABLE</span> TickData <span class="br0">&#40;</span>
&nbsp; &nbsp; &nbsp; &nbsp;SymbolID <span class="kw1">INT</span> <span class="sy0">NOT</span> <span class="sy0">NULL</span>,
&nbsp; &nbsp; &nbsp; &nbsp;TickTime <span class="kw1">DATETIME</span> <span class="sy0">NOT</span> <span class="sy0">NULL</span>,
&nbsp; &nbsp; &nbsp; &nbsp;TickPrice <span class="kw1">DECIMAL</span> <span class="br0">&#40;</span><span class="nu0">20</span>,<span class="nu0">10</span><span class="br0">&#41;</span> <span class="sy0">NOT</span> <span class="sy0">NULL</span><span class="br0">&#41;</span>
&nbsp;
&nbsp;
<span class="kw1">SET</span> DATEFIRST <span class="nu0">1</span> <span class="co1">--Default to Sunday as 1</span>
&nbsp;
<span class="kw1">INSERT</span> TickData
<span class="kw1">SELECT</span> SymbolId,tickTime,<span class="nu0">1100</span> <span class="sy0">+</span> <span class="nu0">1</span> <span class="sy0">*</span> <span class="kw2">RAND</span><span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="sy0">*</span> <span class="kw1">CONVERT</span><span class="br0">&#40;</span><span class="kw1">FLOAT</span>,tickTime<span class="br0">&#41;</span> <span class="sy0">*</span> SymbolId<span class="sy0">/</span><span class="nu0">2.01</span>
<span class="kw1">FROM</span> TempTickTime t
<span class="sy0">CROSS</span> <span class="sy0">JOIN</span> Symbols s
<span class="kw1">WHERE</span> <span class="kw2">DATEPART</span><span class="br0">&#40;</span>dw,tickTime<span class="br0">&#41;</span> <span class="sy0">BETWEEN</span> <span class="nu0">2</span> <span class="sy0">AND</span> <span class="nu0">6</span> <span class="co1">--Monday till Friday</span>
<span class="sy0">AND</span> s.<span class="me1">SymbolID</span> <span class="sy0">IN</span> <span class="br0">&#40;</span><span class="nu0">1</span>,<span class="nu0">2</span><span class="br0">&#41;</span>
<span class="kw1">ORDER</span> <span class="kw1">BY</span> tickTime
&nbsp;
&nbsp;
<span class="kw1">INSERT</span> TickData
<span class="kw1">SELECT</span> SymbolId,tickTime,<span class="nu0">1100</span> <span class="sy0">+</span> <span class="nu0">1</span> <span class="sy0">*</span> <span class="kw2">RAND</span><span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="sy0">*</span> <span class="kw1">CONVERT</span><span class="br0">&#40;</span><span class="kw1">FLOAT</span>,tickTime<span class="br0">&#41;</span> <span class="sy0">*</span> SymbolId<span class="sy0">/</span><span class="nu0">2.01</span>
<span class="kw1">FROM</span> TempTickTime t
<span class="sy0">CROSS</span> <span class="sy0">JOIN</span> Symbols s
<span class="kw1">WHERE</span> <span class="kw2">DATEPART</span><span class="br0">&#40;</span>dw,tickTime<span class="br0">&#41;</span> <span class="sy0">BETWEEN</span> <span class="nu0">1</span> <span class="sy0">AND</span> <span class="nu0">5</span> <span class="co1">--Sunday till Thursday</span>
<span class="sy0">AND</span> s.<span class="me1">SymbolID</span> <span class="sy0">IN</span> <span class="br0">&#40;</span><span class="nu0">3</span>,<span class="nu0">4</span><span class="br0">&#41;</span>
<span class="kw1">ORDER</span> <span class="kw1">BY</span> tickTime</pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">CREATE TABLE TickData (
       SymbolID INT NOT NULL,
       TickTime DATETIME NOT NULL,
       TickPrice DECIMAL (20,10) NOT NULL)
 

SET DATEFIRST 1 --Default to Sunday as 1
 
INSERT TickData
SELECT SymbolId,tickTime,1100 + 1 * RAND() * CONVERT(FLOAT,tickTime) * SymbolId/2.01
FROM TempTickTime t
CROSS JOIN Symbols s
WHERE DATEPART(dw,tickTime) BETWEEN 2 AND 6 --Monday till Friday
AND s.SymbolID IN (1,2)
ORDER BY tickTime
 

INSERT TickData
SELECT SymbolId,tickTime,1100 + 1 * RAND() * CONVERT(FLOAT,tickTime) * SymbolId/2.01
FROM TempTickTime t
CROSS JOIN Symbols s
WHERE DATEPART(dw,tickTime) BETWEEN 1 AND 5 --Sunday till Thursday
AND s.SymbolID IN (3,4)
ORDER BY tickTime</pre></div></div>

<p>What the query does is insert the SymbolID, the ticktime and then a pseudo random value that represents the price. The query also is grouping by day of week by using the DATEPART function.</p>
<p>We are done with intraday data, next up is end of day</p>
<p>First create this table</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
</pre></td><td class="de1"><pre class="de1"><span class="kw1">CREATE</span> <span class="kw1">TABLE</span> EODData <span class="br0">&#40;</span>
&nbsp; &nbsp; &nbsp; &nbsp;SymbolID <span class="kw1">INT</span> <span class="sy0">NOT</span> <span class="sy0">NULL</span>,
&nbsp; &nbsp; &nbsp; &nbsp;SomeDate <span class="kw1">DATETIME</span> <span class="sy0">NOT</span> <span class="sy0">NULL</span>,
&nbsp; &nbsp; &nbsp; &nbsp;TickPrice <span class="kw1">DECIMAL</span> <span class="br0">&#40;</span><span class="nu0">20</span>,<span class="nu0">10</span><span class="br0">&#41;</span> <span class="sy0">NOT</span> <span class="sy0">NULL</span>,
&nbsp; &nbsp; &nbsp; &nbsp;IsEndOfWeek <span class="kw1">tinyint</span> <span class="sy0">NOT</span> <span class="sy0">NULL</span><span class="br0">&#41;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">CREATE TABLE EODData (
       SymbolID INT NOT NULL,
       SomeDate DATETIME NOT NULL,
       TickPrice DECIMAL (20,10) NOT NULL,
       IsEndOfWeek tinyint NOT NULL)</pre></div></div>

<p>In the query below we are grabbing the max time per day for a SymbolID and the associated price for that time. We are in essence grouping by SymbolId and Date, since we are ordering by TickTime  descending and we are only grabbing where the ROW value is 1, we will get the latest value for a day.</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
</pre></td><td class="de1"><pre class="de1">;<span class="kw1">WITH</span> CTE <span class="kw1">AS</span><span class="br0">&#40;</span><span class="kw1">SELECT</span> <span class="sy0">*</span>,
ROW_NUMBER<span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="kw1">OVER</span> <span class="br0">&#40;</span>PARTITION <span class="kw1">BY</span> SymbolId,<span class="kw1">CONVERT</span><span class="br0">&#40;</span><span class="kw1">DATE</span>,TickTime<span class="br0">&#41;</span> <span class="kw1">ORDER</span> <span class="kw1">BY</span> TickTime <span class="kw1">DESC</span><span class="br0">&#41;</span> <span class="kw1">AS</span> <span class="kw1">ROW</span>
<span class="kw1">FROM</span> TickData<span class="br0">&#41;</span>
&nbsp;
<span class="kw1">INSERT</span> EODData
<span class="kw1">SELECT</span> SymbolId,<span class="kw1">CONVERT</span><span class="br0">&#40;</span><span class="kw1">DATE</span>,TickTime<span class="br0">&#41;</span>,TickPrice,<span class="nu0">0</span> <span class="kw1">FROM</span> CTE
<span class="kw1">WHERE</span> <span class="kw1">ROW</span> <span class="sy0">=</span> <span class="nu0">1</span>
<span class="kw1">ORDER</span> <span class="kw1">BY</span> SymbolID,<span class="kw1">CONVERT</span><span class="br0">&#40;</span><span class="kw1">DATE</span>,TickTime<span class="br0">&#41;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">;WITH CTE AS(SELECT *,
ROW_NUMBER() OVER (PARTITION BY SymbolId,CONVERT(DATE,TickTime) ORDER BY TickTime DESC) AS ROW
FROM TickData)
 
INSERT EODData
SELECT SymbolId,CONVERT(DATE,TickTime),TickPrice,0 FROM CTE
WHERE ROW = 1
ORDER BY SymbolID,CONVERT(DATE,TickTime)</pre></div></div>

<p>Here is another way of doing the insert by grouping by SymbolId and converting the TickTime to a date and grabbing the max TickTime for that, with this derived table we join back to the TickData table and do our inserts.</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
</pre></td><td class="de1"><pre class="de1"><span class="co1">--INSERT EODData</span>
<span class="kw1">SELECT</span> t.<span class="me1">SymbolId</span>,<span class="kw1">CONVERT</span><span class="br0">&#40;</span><span class="kw1">DATE</span>,TickTime<span class="br0">&#41;</span>,TickPrice,<span class="nu0">0</span>
<span class="kw1">FROM</span> TickData t
<span class="sy0">JOIN</span><span class="br0">&#40;</span>
&nbsp; &nbsp; &nbsp; &nbsp;<span class="kw1">SELECT</span> SymbolId,<span class="kw2">MAX</span><span class="br0">&#40;</span>TickTime<span class="br0">&#41;</span> <span class="kw1">as</span> MaxTime
&nbsp; &nbsp; &nbsp; &nbsp;<span class="kw1">FROM</span> TickData
&nbsp; &nbsp; &nbsp; &nbsp;<span class="kw1">GROUP</span> <span class="kw1">BY</span> SymbolId,<span class="kw1">CONVERT</span><span class="br0">&#40;</span><span class="kw1">DATE</span>,TickTime<span class="br0">&#41;</span><span class="br0">&#41;</span> x <span class="kw1">on</span>
t.<span class="me1">SymbolId</span> <span class="sy0">=</span> x.<span class="me1">SymbolId</span>
and t.<span class="me1">TickTime</span> <span class="sy0">=</span> &nbsp;x.<span class="me1">MaxTime</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">--INSERT EODData
SELECT t.SymbolId,CONVERT(DATE,TickTime),TickPrice,0
FROM TickData t
JOIN(
       SELECT SymbolId,MAX(TickTime) as MaxTime
       FROM TickData
       GROUP BY SymbolId,CONVERT(DATE,TickTime)) x on
t.SymbolId = x.SymbolId
and t.TickTime =  x.MaxTime</pre></div></div>

<p>Here is where we do some grouping, in order to grab the last possible value for a week, we need to group by SymbolID, year, month and the week number.</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
</pre></td><td class="de1"><pre class="de1"><span class="kw1">SELECT</span> SymbolId,<span class="kw2">MAX</span><span class="br0">&#40;</span>SomeDate<span class="br0">&#41;</span> <span class="kw1">as</span> MaxDate
<span class="kw1">FROM</span> EODData
<span class="kw1">GROUP</span> <span class="kw1">BY</span> SymbolId,<span class="kw1">YEAR</span><span class="br0">&#40;</span>SomeDate<span class="br0">&#41;</span>, <span class="kw1">MONTH</span><span class="br0">&#40;</span>SomeDate<span class="br0">&#41;</span>,<span class="kw2">DATEPART</span><span class="br0">&#40;</span>wk,SomeDate<span class="br0">&#41;</span>
<span class="kw1">order</span> <span class="kw1">by</span> SymbolID, MaxDate</pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">SELECT SymbolId,MAX(SomeDate) as MaxDate
FROM EODData
GROUP BY SymbolId,YEAR(SomeDate), MONTH(SomeDate),DATEPART(wk,SomeDate)
order by SymbolID, MaxDate</pre></div></div>

<p>That query produces the following output, as you can see it has the latest value for each week for each symbol.<br />
</p>
<div class="tables">
<table>
<tr>
<th>SymbolId</th>
<th>MaxDate</th>
</tr>
<tr>
<td>1</td>
<td>2011-03-05 00:00:00.000</td>
</tr>
<tr>
<td>1</td>
<td>2011-03-12 00:00:00.000</td>
</tr>
<tr>
<td>1</td>
<td>2011-03-19 00:00:00.000</td>
</tr>
<tr>
<td>1</td>
<td>2011-03-26 00:00:00.000</td>
</tr>
<tr>
<td>1</td>
<td>2011-03-31 00:00:00.000</td>
</tr>
<tr>
<td>2</td>
<td>2011-03-05 00:00:00.000</td>
</tr>
<tr>
<td>2</td>
<td>2011-03-12 00:00:00.000</td>
</tr>
<tr>
<td>2</td>
<td>2011-03-19 00:00:00.000</td>
</tr>
<tr>
<td>2</td>
<td>2011-03-26 00:00:00.000</td>
</tr>
<tr>
<td>2</td>
<td>2011-03-31 00:00:00.000</td>
</tr>
<tr>
<td>3</td>
<td>2011-02-28 00:00:00.000</td>
</tr>
<tr>
<td>3</td>
<td>2011-03-04 00:00:00.000</td>
</tr>
<tr>
<td>3</td>
<td>2011-03-11 00:00:00.000</td>
</tr>
<tr>
<td>3</td>
<td>2011-03-18 00:00:00.000</td>
</tr>
<tr>
<td>3</td>
<td>2011-03-25 00:00:00.000</td>
</tr>
<tr>
<td>3</td>
<td>2011-03-31 00:00:00.000</td>
</tr>
<tr>
<td>4</td>
<td>2011-02-28 00:00:00.000</td>
</tr>
<tr>
<td>4</td>
<td>2011-03-04 00:00:00.000</td>
</tr>
<tr>
<td>4</td>
<td>2011-03-11 00:00:00.000</td>
</tr>
<tr>
<td>4</td>
<td>2011-03-18 00:00:00.000</td>
</tr>
<tr>
<td>4</td>
<td>2011-03-25 00:00:00.000</td>
</tr>
<tr>
<td>4</td>
<td>2011-03-31 00:00:00.000</td>
</tr>
</table>
</div>
<p>
Here is an example of how to join the grouping query to the table so that we can get all the details for the row, we will use this as the basis for our update later on</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
</pre></td><td class="de1"><pre class="de1"><span class="kw1">SELECT</span> e.<span class="sy0">*</span> <span class="kw1">from</span> EODData e
join <span class="br0">&#40;</span>
&nbsp; &nbsp; &nbsp; &nbsp;<span class="kw1">SELECT</span> SymbolId,<span class="kw2">MAX</span><span class="br0">&#40;</span>SomeDate<span class="br0">&#41;</span> <span class="kw1">as</span> MaxDate
&nbsp; &nbsp; &nbsp; &nbsp;<span class="kw1">FROM</span> EODData
&nbsp; &nbsp; &nbsp; &nbsp;<span class="kw1">GROUP</span> <span class="kw1">BY</span> SymbolId,<span class="kw1">YEAR</span><span class="br0">&#40;</span>SomeDate<span class="br0">&#41;</span>, <span class="kw1">MONTH</span><span class="br0">&#40;</span>SomeDate<span class="br0">&#41;</span>,<span class="kw2">DATEPART</span><span class="br0">&#40;</span>wk,SomeDate<span class="br0">&#41;</span><span class="br0">&#41;</span> x
<span class="kw1">on</span> e.<span class="me1">SomeDAte</span> <span class="sy0">=</span> x.<span class="me1">MaxDate</span>
and e.<span class="me1">SymbolId</span> <span class="sy0">=</span>x.<span class="me1">SymbolId</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">SELECT e.* from EODData e
join (
       SELECT SymbolId,MAX(SomeDate) as MaxDate
       FROM EODData
       GROUP BY SymbolId,YEAR(SomeDate), MONTH(SomeDate),DATEPART(wk,SomeDate)) x
on e.SomeDAte = x.MaxDate
and e.SymbolId =x.SymbolId</pre></div></div>

<p>And here is how we update the IsEndOfWeek column with the value 1 for the rows that fall on the end of the week</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
</pre></td><td class="de1"><pre class="de1"><span class="kw1">UPDATE</span> &nbsp;e
<span class="kw1">SET</span> e.<span class="me1">IsEndOfWeek</span> <span class="sy0">=</span> <span class="nu0">1</span>
<span class="kw1">FROM</span> EODData e
<span class="sy0">JOIN</span> <span class="br0">&#40;</span><span class="kw1">SELECT</span> SymbolId,<span class="kw2">MAX</span><span class="br0">&#40;</span>SomeDate<span class="br0">&#41;</span> <span class="kw1">AS</span> MaxDate
&nbsp; &nbsp; &nbsp; &nbsp;<span class="kw1">FROM</span> EODData
&nbsp; &nbsp; &nbsp; &nbsp;<span class="kw1">GROUP</span> <span class="kw1">BY</span> SymbolId,<span class="kw1">YEAR</span><span class="br0">&#40;</span>SomeDate<span class="br0">&#41;</span>, <span class="kw1">MONTH</span><span class="br0">&#40;</span>SomeDate<span class="br0">&#41;</span>,<span class="kw2">DATEPART</span><span class="br0">&#40;</span>wk,SomeDate<span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp;<span class="br0">&#41;</span> x
<span class="kw1">ON</span> e.<span class="me1">SomeDate</span> <span class="sy0">=</span> x.<span class="me1">MaxDate</span>
<span class="sy0">AND</span> e.<span class="me1">SymbolId</span> <span class="sy0">=</span>x.<span class="me1">SymbolId</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">UPDATE  e
SET e.IsEndOfWeek = 1
FROM EODData e
JOIN (SELECT SymbolId,MAX(SomeDate) AS MaxDate
       FROM EODData
       GROUP BY SymbolId,YEAR(SomeDate), MONTH(SomeDate),DATEPART(wk,SomeDate)
       ) x
ON e.SomeDate = x.MaxDate
AND e.SymbolId =x.SymbolId</pre></div></div>

<h3>Charting end of day values</h3>
<p>If we chart 1,3 or 6 months we will use daily values</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
</pre></td><td class="de1"><pre class="de1"><span class="kw1">SELECT</span> <span class="sy0">*</span>
<span class="kw1">FROM</span> EODData
<span class="kw1">WHERE</span> SymbolId <span class="sy0">=</span> <span class="nu0">1</span>
<span class="kw1">ORDER</span> <span class="kw1">BY</span> SomeDate</pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">SELECT *
FROM EODData
WHERE SymbolId = 1
ORDER BY SomeDate</pre></div></div>

<p>If we chart anything over 6 months we want to grab weekly values, the query for that is now really simple</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
</pre></td><td class="de1"><pre class="de1"><span class="kw1">SELECT</span> <span class="sy0">*</span>
<span class="kw1">FROM</span> EODData
<span class="kw1">WHERE</span> SymbolId <span class="sy0">=</span> <span class="nu0">1</span>
<span class="sy0">AND</span> IsEndOfWeek <span class="sy0">=</span> <span class="nu0">1</span>
<span class="kw1">ORDER</span> <span class="kw1">BY</span> SomeDate</pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">SELECT *
FROM EODData
WHERE SymbolId = 1
AND IsEndOfWeek = 1
ORDER BY SomeDate</pre></div></div>

<h3>Charting intraday data</h3>
<p>If we want data for a 1 day chart then we are going to grab in 1 minute intervals, if we are going to chart 5 days we will grab in 5 minute chunks.</p>
<p>There is going to be a lot going on in the following code snippet so I will try to explain it in the comments</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
</pre></td><td class="de1"><pre class="de1"><span class="kw1">DECLARE</span> @StartDate <span class="kw1">DATETIME</span> <span class="sy0">=</span> <span class="st0">'2011-03-01 09:30:00.000'</span>
<span class="kw1">DECLARE</span> @TimeSpan <span class="kw1">INT</span> <span class="sy0">=</span> <span class="nu0">5</span>
<span class="co1">-- 1 &nbsp;will return 2011-03-31 00:00:00.000</span>
<span class="co1">-- 5 &nbsp;will return 2011-03-25 00:00:00.000</span>
&nbsp;
<span class="co1">--Grab latest 1 or 5 days, we have to account for weekends and markets being closed, this is why we do @TimeSpan * 5</span>
<span class="co1">-- and then we do top @TimeSpan..which can be 1 or 5</span>
<span class="co1">-- we convert to date so that we get distinct dates</span>
<span class="kw1">SELECT</span> &nbsp;<span class="kw1">TOP</span> <span class="br0">&#40;</span>@TimeSpan<span class="br0">&#41;</span> @StartDate <span class="sy0">=</span> Today 
&nbsp; &nbsp; <span class="kw1">FROM</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#40;</span><span class="kw1">SELECT</span> &nbsp;<span class="kw1">DISTINCT</span> <span class="kw1">TOP</span> <span class="br0">&#40;</span>@TimeSpan <span class="sy0">*</span> <span class="nu0">5</span><span class="br0">&#41;</span> <span class="kw1">CONVERT</span><span class="br0">&#40;</span><span class="kw1">DATE</span>,TickTime<span class="br0">&#41;</span> <span class="kw1">AS</span> Today
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">FROM</span> dbo.<span class="me1">TickData</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">WHERE</span> SymbolID <span class="sy0">=</span> &nbsp;<span class="nu0">1</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="sy0">AND</span> TickTime <span class="sy0">&gt;</span> @StartDate 
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">ORDER</span> <span class="kw1">BY</span> <span class="kw1">CONVERT</span><span class="br0">&#40;</span><span class="kw1">DATE</span>,TickTime<span class="br0">&#41;</span> <span class="kw1">DESC</span><span class="br0">&#41;</span> x
&nbsp; &nbsp; <span class="kw1">ORDER</span> <span class="kw1">BY</span> Today <span class="kw1">DESC</span>
&nbsp; &nbsp; 
&nbsp;
<span class="co1">--We have t and q for column names because this is being generated as JSON and we want the data to be as small as possible</span>
<span class="kw1">SELECT</span> 
&nbsp; &nbsp; t1.<span class="me1">TickTime</span> <span class="kw1">AS</span> t,
&nbsp; &nbsp; t1.<span class="me1">TickPrice</span> <span class="kw1">AS</span> q
&nbsp; &nbsp; <span class="kw1">FROM</span> dbo.<span class="me1">TickData</span> t1
&nbsp; &nbsp; <span class="sy0">JOIN</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#40;</span><span class="kw1">SELECT</span> SymbolID, <span class="kw2">MAX</span><span class="br0">&#40;</span>TickTime<span class="br0">&#41;</span> <span class="kw1">AS</span> Ticktime,<span class="kw2">DATEPART</span><span class="br0">&#40;</span>mi,ticktime<span class="br0">&#41;</span> <span class="kw1">AS</span> TickMinute
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">FROM</span> dbo.<span class="me1">TickData</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">WHERE</span> SymbolID <span class="sy0">=</span> &nbsp;<span class="nu0">1</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="sy0">AND</span> ticktime <span class="sy0">&gt;=</span> @StartDate
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">GROUP</span> <span class="kw1">BY</span> SymbolID,<span class="kw2">DATEPART</span><span class="br0">&#40;</span>hh,TickTime<span class="br0">&#41;</span>,<span class="kw2">DATEPART</span><span class="br0">&#40;</span>mi,ticktime<span class="br0">&#41;</span>,<span class="kw2">DATEPART</span><span class="br0">&#40;</span>dd,ticktime<span class="br0">&#41;</span><span class="br0">&#41;</span> x
&nbsp; &nbsp; <span class="kw1">ON</span> x.<span class="me1">SymbolID</span> <span class="sy0">=</span> t1.<span class="me1">SymbolID</span>
&nbsp; &nbsp; <span class="sy0">AND</span> x.<span class="me1">Ticktime</span> <span class="sy0">=</span> t1.<span class="me1">Ticktime</span>
&nbsp; &nbsp; <span class="kw1">WHERE</span> t1.<span class="me1">SymbolID</span> <span class="sy0">=</span> <span class="nu0">1</span>
&nbsp; &nbsp; <span class="sy0">AND</span> TickMinute <span class="sy0">%</span> &nbsp;@TimeSpan <span class="sy0">=</span> <span class="nu0">0</span> &nbsp;<span class="co1">--0nly grab the minutes what the value of @TimeSpan holds</span>
&nbsp; &nbsp; <span class="kw1">ORDER</span> <span class="kw1">BY</span> t1.<span class="me1">TickTime</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">DECLARE @StartDate DATETIME = '2011-03-01 09:30:00.000'
DECLARE @TimeSpan INT = 5
-- 1  will return 2011-03-31 00:00:00.000
-- 5  will return 2011-03-25 00:00:00.000

--Grab latest 1 or 5 days, we have to account for weekends and markets being closed, this is why we do @TimeSpan * 5
-- and then we do top @TimeSpan..which can be 1 or 5
-- we convert to date so that we get distinct dates
SELECT  TOP (@TimeSpan) @StartDate = Today 
	FROM
		(SELECT  DISTINCT TOP (@TimeSpan * 5) CONVERT(DATE,TickTime) AS Today
		FROM dbo.TickData
		WHERE SymbolID =  1
		AND TickTime &gt; @StartDate 
		ORDER BY CONVERT(DATE,TickTime) DESC) x
	ORDER BY Today DESC
	

--We have t and q for column names because this is being generated as JSON and we want the data to be as small as possible
SELECT 
	t1.TickTime AS t,
	t1.TickPrice AS q
	FROM dbo.TickData t1
	JOIN
		(SELECT SymbolID, MAX(TickTime) AS Ticktime,DATEPART(mi,ticktime) AS TickMinute
		FROM dbo.TickData
		WHERE SymbolID =  1
		AND ticktime &gt;= @StartDate
		GROUP BY SymbolID,DATEPART(hh,TickTime),DATEPART(mi,ticktime),DATEPART(dd,ticktime)) x
	ON x.SymbolID = t1.SymbolID
	AND x.Ticktime = t1.Ticktime
	WHERE t1.SymbolID = 1
	AND TickMinute %  @TimeSpan = 0  --0nly grab the minutes what the value of @TimeSpan holds
	ORDER BY t1.TickTime</pre></div></div>

<p>Take a look at this line AND TickMinute %  @TimeSpan = 0<br />
So basically we are aggregating in 1 or 5 minutes (really whatever @TimeSpan is, if it is 3 then it will be in 3 minute chunks). We are using the % <a href="http://msdn.microsoft.com/en-us/library/ms190279.aspx">(Modulo)</a> operator to accomplish this.</p>
<p>&#8211;If you run the code above with @TimeSpan = 5, you get data in 5 minute intervals<br />
DECLARE @TimeSpan INT = 5</p>
<div class="tables">
<table>
<tr>
<th>t</th>
<th>q</th>
</tr>
<tr>
<td>2011-03-31 09:30:30.000</td>
<td>	17132.3582356171</td>
</tr>
<tr>
<td>2011-03-31 09:35:30.000</td>
<td>	17132.3596056885</td>
</tr>
<tr>
<td>2011-03-31 09:40:30.000</td>
<td>	17132.3609757598</td>
</tr>
<tr>
<td>2011-03-31 09:45:30.000</td>
<td>	17132.3623458311</td>
</tr>
</table>
</div>
<p>&#8211;If you run the code above with @TimeSpan = 1, you get data in 1 minute intervals<br />
DECLARE @TimeSpan INT = 1</p>
<div class="tables">
<table>
<tr>
<th>t</th>
<th>q</th>
</tr>
<tr>
<td>2011-03-31 09:30:30.000</td>
<td>	17132.3582356171</td>
</tr>
<tr>
<td>2011-03-31 09:31:30.000</td>
<td>	17132.3585096314</td>
</tr>
<tr>
<td>2011-03-31 09:32:30.000</td>
<td>	17132.3587836457</td>
</tr>
<tr>
<td>2011-03-31 09:33:30.000</td>
<td>	17132.3590576599</td>
</tr>
<tr>
<td>2011-03-31 09:34:30.000</td>
<td>	17132.3593316742</td>
</tr>
<tr>
<td>2011-03-31 09:35:30.000</td>
<td>	17132.3596056885</td>
</tr>
<tr>
<td>2011-03-31 09:36:30.000</td>
<td>	17132.3598797027</td>
</tr>
</table>
</div>
<p>That is it for this post, there is a lot of code but hopefully you can get an idea of what it all does, if you have any questions leave me a comment.</p>
<p>*** <strong>Remember, if you have a SQL related question, try our <a href="http://forum.lessthandot.com/viewforum.php?f=17">Microsoft SQL Server Programming</a> forum or our <a href="http://forum.lessthandot.com/viewforum.php?f=22">Microsoft SQL Server Admin</a> forum</strong><ins></ins></p>
]]></content:encoded>
			<wfw:commentRss>/index.php/datamgmt/datadesign/t-sql-tuesday-016-grouping/feed/</wfw:commentRss>
		<slash:comments>4</slash:comments>
		</item>
		<item>
		<title>Grouping datetime values in half hour blocks in SQL Server</title>
		<link>/index.php/datamgmt/datadesign/grouping-datetime-values-in-half-hour-bl/</link>
		<comments>/index.php/datamgmt/datadesign/grouping-datetime-values-in-half-hour-bl/#comments</comments>
		<pubDate>Fri, 29 May 2009 14:38:49 +0000</pubDate>
		<dc:creator><![CDATA[SQLDenis]]></dc:creator>
				<category><![CDATA[Data Modelling and Design]]></category>
		<category><![CDATA[dates]]></category>
		<category><![CDATA[datetime]]></category>
		<category><![CDATA[grouping]]></category>
		<category><![CDATA[sql server 2000]]></category>
		<category><![CDATA[sql server 2008]]></category>
		<category><![CDATA[time]]></category>

		<guid isPermaLink="false">/index.php/2009/05/grouping-datetime-values-in-half-hour-bl/</guid>
		<description><![CDATA[I answered this question a while back and decided to create a little blogpost. Let&#8217;s say you have the following datetime values 2009-05-12 11:13:19.667 2009-05-12 11:12:19.667 2009-05-12 11:33:19.667 2009-05-12 11:43:19.667 2009-05-12 11:03:19.667 2009-05-12 11:53:19.667 2009-05-12 11:53:19.667 2009-05-12 11:23:19.667 2009-05-12 12:13:19.667 2009-05-12 12:12:19.667 2009-05-12 13:33:19.667 2009-05-12 13:43:19.667 2009-05-12 14:03:19.667 2009-05-12 14:53:19.667 2009-05-12 15:53:19.667 2009-05-12 15:23:19.667 What [&#8230;]]]></description>
				<content:encoded><![CDATA[<p>I answered this question a while back and decided to create a little blogpost.</p>
<p>Let&#8217;s say you have the following datetime values</p>
<p>2009-05-12 11:13:19.667<br />
2009-05-12 11:12:19.667<br />
2009-05-12 11:33:19.667<br />
2009-05-12 11:43:19.667<br />
2009-05-12 11:03:19.667<br />
2009-05-12 11:53:19.667<br />
2009-05-12 11:53:19.667<br />
2009-05-12 11:23:19.667<br />
2009-05-12 12:13:19.667<br />
2009-05-12 12:12:19.667<br />
2009-05-12 13:33:19.667<br />
2009-05-12 13:43:19.667<br />
2009-05-12 14:03:19.667<br />
2009-05-12 14:53:19.667<br />
2009-05-12 15:53:19.667<br />
2009-05-12 15:23:19.667</p>
<p>What you want to do is break them into half hour blocks and count them, your output should look like this</p>
<p>vCount	time<br />
4	2009-05-12 11:00:00.000<br />
4	2009-05-12 11:30:00.000<br />
2	2009-05-12 12:00:00.000<br />
2	2009-05-12 13:30:00.000<br />
1	2009-05-12 14:00:00.000<br />
1	2009-05-12 14:30:00.000<br />
1	2009-05-12 15:00:00.000<br />
1	2009-05-12 15:30:00.000</p>
<p>This is simple to do with a CASE statement in SQL Server. First create the following table with sample data</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
</pre></td><td class="de1"><pre class="de1"><span class="kw1">create</span> <span class="kw1">table</span> #temp <span class="br0">&#40;</span>SomeDate <span class="kw1">datetime</span><span class="br0">&#41;</span>
<span class="kw1">insert</span> #temp <span class="kw1">values</span> <span class="br0">&#40;</span> <span class="st0">'2009-05-12 11:13:19.667'</span><span class="br0">&#41;</span>
<span class="kw1">insert</span> #temp <span class="kw1">values</span> <span class="br0">&#40;</span> <span class="st0">'2009-05-12 11:12:19.667'</span><span class="br0">&#41;</span>
<span class="kw1">insert</span> #temp <span class="kw1">values</span> <span class="br0">&#40;</span> <span class="st0">'2009-05-12 11:33:19.667'</span><span class="br0">&#41;</span>
<span class="kw1">insert</span> #temp <span class="kw1">values</span> <span class="br0">&#40;</span> <span class="st0">'2009-05-12 11:43:19.667'</span><span class="br0">&#41;</span>
<span class="kw1">insert</span> #temp <span class="kw1">values</span> <span class="br0">&#40;</span> <span class="st0">'2009-05-12 11:03:19.667'</span><span class="br0">&#41;</span>
<span class="kw1">insert</span> #temp <span class="kw1">values</span> <span class="br0">&#40;</span> <span class="st0">'2009-05-12 11:53:19.667'</span><span class="br0">&#41;</span>
<span class="kw1">insert</span> #temp <span class="kw1">values</span> <span class="br0">&#40;</span> <span class="st0">'2009-05-12 11:53:19.667'</span><span class="br0">&#41;</span>
<span class="kw1">insert</span> #temp <span class="kw1">values</span> <span class="br0">&#40;</span> <span class="st0">'2009-05-12 11:23:19.667'</span><span class="br0">&#41;</span>
&nbsp;
<span class="kw1">insert</span> #temp <span class="kw1">values</span> <span class="br0">&#40;</span> <span class="st0">'2009-05-12 12:13:19.667'</span><span class="br0">&#41;</span>
<span class="kw1">insert</span> #temp <span class="kw1">values</span> <span class="br0">&#40;</span> <span class="st0">'2009-05-12 12:12:19.667'</span><span class="br0">&#41;</span>
<span class="kw1">insert</span> #temp <span class="kw1">values</span> <span class="br0">&#40;</span> <span class="st0">'2009-05-12 13:33:19.667'</span><span class="br0">&#41;</span>
<span class="kw1">insert</span> #temp <span class="kw1">values</span> <span class="br0">&#40;</span> <span class="st0">'2009-05-12 13:43:19.667'</span><span class="br0">&#41;</span>
<span class="kw1">insert</span> #temp <span class="kw1">values</span> <span class="br0">&#40;</span> <span class="st0">'2009-05-12 14:03:19.667'</span><span class="br0">&#41;</span>
<span class="kw1">insert</span> #temp <span class="kw1">values</span> <span class="br0">&#40;</span> <span class="st0">'2009-05-12 14:53:19.667'</span><span class="br0">&#41;</span>
<span class="kw1">insert</span> #temp <span class="kw1">values</span> <span class="br0">&#40;</span> <span class="st0">'2009-05-12 15:53:19.667'</span><span class="br0">&#41;</span>
<span class="kw1">insert</span> #temp <span class="kw1">values</span> <span class="br0">&#40;</span> <span class="st0">'2009-05-12 15:23:19.667'</span><span class="br0">&#41;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">create table #temp (SomeDate datetime)
insert #temp values ( '2009-05-12 11:13:19.667')
insert #temp values ( '2009-05-12 11:12:19.667')
insert #temp values ( '2009-05-12 11:33:19.667')
insert #temp values ( '2009-05-12 11:43:19.667')
insert #temp values ( '2009-05-12 11:03:19.667')
insert #temp values ( '2009-05-12 11:53:19.667')
insert #temp values ( '2009-05-12 11:53:19.667')
insert #temp values ( '2009-05-12 11:23:19.667')

insert #temp values ( '2009-05-12 12:13:19.667')
insert #temp values ( '2009-05-12 12:12:19.667')
insert #temp values ( '2009-05-12 13:33:19.667')
insert #temp values ( '2009-05-12 13:43:19.667')
insert #temp values ( '2009-05-12 14:03:19.667')
insert #temp values ( '2009-05-12 14:53:19.667')
insert #temp values ( '2009-05-12 15:53:19.667')
insert #temp values ( '2009-05-12 15:23:19.667')</pre></div></div>

<p>Here is what the select statement looks like</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
</pre></td><td class="de1"><pre class="de1"><span class="kw1">select</span> <span class="kw2">count</span><span class="br0">&#40;</span><span class="sy0">*</span><span class="br0">&#41;</span> <span class="kw1">as</span> vCount,<span class="kw1">case</span> <span class="kw1">when</span> <span class="kw2">datepart</span><span class="br0">&#40;</span>mi,Somedate<span class="br0">&#41;</span> <span class="sy0">&lt;</span> <span class="nu0">30</span> 
<span class="kw1">then</span> <span class="kw2">dateadd</span><span class="br0">&#40;</span>hh, <span class="kw2">datediff</span><span class="br0">&#40;</span>hh, <span class="nu0">0</span>, Somedate<span class="br0">&#41;</span><span class="sy0">+</span><span class="nu0">0</span>, <span class="nu0">0</span><span class="br0">&#41;</span>
<span class="kw1">else</span> <span class="kw2">dateadd</span><span class="br0">&#40;</span>mi,<span class="nu0">30</span>,<span class="kw2">dateadd</span><span class="br0">&#40;</span>hh, <span class="kw2">datediff</span><span class="br0">&#40;</span>hh, <span class="nu0">0</span>, Somedate<span class="br0">&#41;</span><span class="sy0">+</span><span class="nu0">0</span>, <span class="nu0">0</span><span class="br0">&#41;</span><span class="br0">&#41;</span> <span class="kw1">end</span> <span class="kw1">as</span> <span class="kw1">time</span>
<span class="kw1">from</span> #temp
<span class="kw1">group</span> <span class="kw1">by</span> <span class="kw1">case</span> <span class="kw1">when</span> <span class="kw2">datepart</span><span class="br0">&#40;</span>mi,Somedate<span class="br0">&#41;</span> <span class="sy0">&lt;</span> <span class="nu0">30</span> <span class="kw1">then</span> <span class="kw2">dateadd</span><span class="br0">&#40;</span>hh, <span class="kw2">datediff</span><span class="br0">&#40;</span>hh, <span class="nu0">0</span>, Somedate<span class="br0">&#41;</span><span class="sy0">+</span><span class="nu0">0</span>, <span class="nu0">0</span><span class="br0">&#41;</span>
&nbsp;<span class="kw1">else</span> <span class="kw2">dateadd</span><span class="br0">&#40;</span>mi,<span class="nu0">30</span>,<span class="kw2">dateadd</span><span class="br0">&#40;</span>hh, <span class="kw2">datediff</span><span class="br0">&#40;</span>hh, <span class="nu0">0</span>, Somedate<span class="br0">&#41;</span><span class="sy0">+</span><span class="nu0">0</span>, <span class="nu0">0</span><span class="br0">&#41;</span><span class="br0">&#41;</span> <span class="kw1">end</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">select count(*) as vCount,case when datepart(mi,Somedate) &lt; 30 
then dateadd(hh, datediff(hh, 0, Somedate)+0, 0)
else dateadd(mi,30,dateadd(hh, datediff(hh, 0, Somedate)+0, 0)) end as time
from #temp
group by case when datepart(mi,Somedate) &lt; 30 then dateadd(hh, datediff(hh, 0, Somedate)+0, 0)
 else dateadd(mi,30,dateadd(hh, datediff(hh, 0, Somedate)+0, 0)) end</pre></div></div>

<p>As you can see we look at the minutes, if it is below 30 we make it 0 otherwise we make it 30.</p>
<p>Here is the output again</p>
<p>vCount	time<br />
4	2009-05-12 11:00:00.000<br />
4	2009-05-12 11:30:00.000<br />
2	2009-05-12 12:00:00.000<br />
2	2009-05-12 13:30:00.000<br />
1	2009-05-12 14:00:00.000<br />
1	2009-05-12 14:30:00.000<br />
1	2009-05-12 15:00:00.000<br />
1	2009-05-12 15:30:00.000</p>
<p>Here is what the data looks side by side if you run the following query</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
</pre></td><td class="de1"><pre class="de1"><span class="kw1">select</span> Somedate,<span class="kw1">case</span> <span class="kw1">when</span> <span class="kw2">datepart</span><span class="br0">&#40;</span>mi,Somedate<span class="br0">&#41;</span> <span class="sy0">&lt;</span> <span class="nu0">30</span> <span class="kw1">then</span> <span class="kw2">dateadd</span><span class="br0">&#40;</span>hh, <span class="kw2">datediff</span><span class="br0">&#40;</span>hh, <span class="nu0">0</span>, Somedate<span class="br0">&#41;</span><span class="sy0">+</span><span class="nu0">0</span>, <span class="nu0">0</span><span class="br0">&#41;</span>
&nbsp;<span class="kw1">else</span> <span class="kw2">dateadd</span><span class="br0">&#40;</span>mi,<span class="nu0">30</span>,<span class="kw2">dateadd</span><span class="br0">&#40;</span>hh, <span class="kw2">datediff</span><span class="br0">&#40;</span>hh, <span class="nu0">0</span>, Somedate<span class="br0">&#41;</span><span class="sy0">+</span><span class="nu0">0</span>, <span class="nu0">0</span><span class="br0">&#41;</span><span class="br0">&#41;</span> <span class="kw1">end</span>
<span class="kw1">from</span> #temp</pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">select Somedate,case when datepart(mi,Somedate) &lt; 30 then dateadd(hh, datediff(hh, 0, Somedate)+0, 0)
 else dateadd(mi,30,dateadd(hh, datediff(hh, 0, Somedate)+0, 0)) end
from #temp</pre></div></div>

<p>Somedate<br />
2009-05-12 11:13:19.667	2009-05-12 11:00:00.000<br />
2009-05-12 11:12:19.667	2009-05-12 11:00:00.000<br />
2009-05-12 11:33:19.667	2009-05-12 11:30:00.000<br />
2009-05-12 11:43:19.667	2009-05-12 11:30:00.000<br />
2009-05-12 11:03:19.667	2009-05-12 11:00:00.000<br />
2009-05-12 11:53:19.667	2009-05-12 11:30:00.000<br />
2009-05-12 11:53:19.667	2009-05-12 11:30:00.000<br />
2009-05-12 11:23:19.667	2009-05-12 11:00:00.000<br />
2009-05-12 12:13:19.667	2009-05-12 12:00:00.000<br />
2009-05-12 12:12:19.667	2009-05-12 12:00:00.000<br />
2009-05-12 13:33:19.667	2009-05-12 13:30:00.000<br />
2009-05-12 13:43:19.667	2009-05-12 13:30:00.000<br />
2009-05-12 14:03:19.667	2009-05-12 14:00:00.000<br />
2009-05-12 14:53:19.667	2009-05-12 14:30:00.000<br />
2009-05-12 15:53:19.667	2009-05-12 15:30:00.000<br />
2009-05-12 15:23:19.667	2009-05-12 15:00:00.000</p>
<p>To do the same for 15 minute blocks is just adding 2 more CASE statements</p>
<p>Here is what that looks like</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
</pre></td><td class="de1"><pre class="de1"><span class="kw1">select</span> <span class="kw2">count</span><span class="br0">&#40;</span><span class="sy0">*</span><span class="br0">&#41;</span> <span class="kw1">as</span> vCount,<span class="kw1">case</span> <span class="kw1">when</span> <span class="kw2">datepart</span><span class="br0">&#40;</span>mi,Somedate<span class="br0">&#41;</span> <span class="sy0">&lt;</span> <span class="nu0">15</span> 
<span class="kw1">then</span> <span class="kw2">dateadd</span><span class="br0">&#40;</span>hh, <span class="kw2">datediff</span><span class="br0">&#40;</span>hh, <span class="nu0">0</span>, Somedate<span class="br0">&#41;</span><span class="sy0">+</span><span class="nu0">0</span>, <span class="nu0">0</span><span class="br0">&#41;</span>
<span class="kw1">when</span> <span class="kw2">datepart</span><span class="br0">&#40;</span>mi,Somedate<span class="br0">&#41;</span> between <span class="nu0">15</span> and <span class="nu0">29</span>
<span class="kw1">then</span> <span class="kw2">dateadd</span><span class="br0">&#40;</span>mi,<span class="nu0">15</span>,<span class="kw2">dateadd</span><span class="br0">&#40;</span>hh, <span class="kw2">datediff</span><span class="br0">&#40;</span>hh, <span class="nu0">0</span>, Somedate<span class="br0">&#41;</span><span class="sy0">+</span><span class="nu0">0</span>, <span class="nu0">0</span><span class="br0">&#41;</span><span class="br0">&#41;</span>
<span class="kw1">when</span> <span class="kw2">datepart</span><span class="br0">&#40;</span>mi,Somedate<span class="br0">&#41;</span> between <span class="nu0">30</span> and <span class="nu0">44</span>
<span class="kw1">then</span> <span class="kw2">dateadd</span><span class="br0">&#40;</span>mi,<span class="nu0">30</span>,<span class="kw2">dateadd</span><span class="br0">&#40;</span>hh, <span class="kw2">datediff</span><span class="br0">&#40;</span>hh, <span class="nu0">0</span>, Somedate<span class="br0">&#41;</span><span class="sy0">+</span><span class="nu0">0</span>, <span class="nu0">0</span><span class="br0">&#41;</span><span class="br0">&#41;</span>
<span class="kw1">else</span> <span class="kw2">dateadd</span><span class="br0">&#40;</span>mi,<span class="nu0">45</span>,<span class="kw2">dateadd</span><span class="br0">&#40;</span>hh, <span class="kw2">datediff</span><span class="br0">&#40;</span>hh, <span class="nu0">0</span>, Somedate<span class="br0">&#41;</span><span class="sy0">+</span><span class="nu0">0</span>, <span class="nu0">0</span><span class="br0">&#41;</span><span class="br0">&#41;</span> <span class="kw1">end</span> <span class="kw1">as</span> <span class="kw1">time</span>
<span class="kw1">from</span> #temp
<span class="kw1">group</span> <span class="kw1">by</span> <span class="kw1">case</span> <span class="kw1">when</span> <span class="kw2">datepart</span><span class="br0">&#40;</span>mi,Somedate<span class="br0">&#41;</span> <span class="sy0">&lt;</span> <span class="nu0">15</span> 
<span class="kw1">then</span> <span class="kw2">dateadd</span><span class="br0">&#40;</span>hh, <span class="kw2">datediff</span><span class="br0">&#40;</span>hh, <span class="nu0">0</span>, Somedate<span class="br0">&#41;</span><span class="sy0">+</span><span class="nu0">0</span>, <span class="nu0">0</span><span class="br0">&#41;</span>
<span class="kw1">when</span> <span class="kw2">datepart</span><span class="br0">&#40;</span>mi,Somedate<span class="br0">&#41;</span> between <span class="nu0">15</span> and <span class="nu0">29</span>
<span class="kw1">then</span> <span class="kw2">dateadd</span><span class="br0">&#40;</span>mi,<span class="nu0">15</span>,<span class="kw2">dateadd</span><span class="br0">&#40;</span>hh, <span class="kw2">datediff</span><span class="br0">&#40;</span>hh, <span class="nu0">0</span>, Somedate<span class="br0">&#41;</span><span class="sy0">+</span><span class="nu0">0</span>, <span class="nu0">0</span><span class="br0">&#41;</span><span class="br0">&#41;</span>
<span class="kw1">when</span> <span class="kw2">datepart</span><span class="br0">&#40;</span>mi,Somedate<span class="br0">&#41;</span> between <span class="nu0">30</span> and <span class="nu0">44</span>
<span class="kw1">then</span> <span class="kw2">dateadd</span><span class="br0">&#40;</span>mi,<span class="nu0">30</span>,<span class="kw2">dateadd</span><span class="br0">&#40;</span>hh, <span class="kw2">datediff</span><span class="br0">&#40;</span>hh, <span class="nu0">0</span>, Somedate<span class="br0">&#41;</span><span class="sy0">+</span><span class="nu0">0</span>, <span class="nu0">0</span><span class="br0">&#41;</span><span class="br0">&#41;</span>
<span class="kw1">else</span> <span class="kw2">dateadd</span><span class="br0">&#40;</span>mi,<span class="nu0">45</span>,<span class="kw2">dateadd</span><span class="br0">&#40;</span>hh, <span class="kw2">datediff</span><span class="br0">&#40;</span>hh, <span class="nu0">0</span>, Somedate<span class="br0">&#41;</span><span class="sy0">+</span><span class="nu0">0</span>, <span class="nu0">0</span><span class="br0">&#41;</span><span class="br0">&#41;</span> <span class="kw1">end</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">select count(*) as vCount,case when datepart(mi,Somedate) &lt; 15 
then dateadd(hh, datediff(hh, 0, Somedate)+0, 0)
when datepart(mi,Somedate) between 15 and 29
then dateadd(mi,15,dateadd(hh, datediff(hh, 0, Somedate)+0, 0))
when datepart(mi,Somedate) between 30 and 44
then dateadd(mi,30,dateadd(hh, datediff(hh, 0, Somedate)+0, 0))
else dateadd(mi,45,dateadd(hh, datediff(hh, 0, Somedate)+0, 0)) end as time
from #temp
group by case when datepart(mi,Somedate) &lt; 15 
then dateadd(hh, datediff(hh, 0, Somedate)+0, 0)
when datepart(mi,Somedate) between 15 and 29
then dateadd(mi,15,dateadd(hh, datediff(hh, 0, Somedate)+0, 0))
when datepart(mi,Somedate) between 30 and 44
then dateadd(mi,30,dateadd(hh, datediff(hh, 0, Somedate)+0, 0))
else dateadd(mi,45,dateadd(hh, datediff(hh, 0, Somedate)+0, 0)) end</pre></div></div>

<p>vCount	time<br />
3	2009-05-12 11:00:00.000<br />
1	2009-05-12 11:15:00.000<br />
2	2009-05-12 11:30:00.000<br />
2	2009-05-12 11:45:00.000<br />
2	2009-05-12 12:00:00.000<br />
2	2009-05-12 13:30:00.000<br />
1	2009-05-12 14:00:00.000<br />
1	2009-05-12 14:45:00.000<br />
1	2009-05-12 15:15:00.000<br />
1	2009-05-12 15:45:00.000</p>
<p>There are other ways to skin this cat and maybe I will follow up on this next week</p>
<p></p>
<p>*** <strong>If you have a SQL related question try our <a href="http://forum.lessthandot.com/viewforum.php?f=17">Microsoft SQL Server Programming</a> forum or our <a href="http://forum.lessthandot.com/viewforum.php?f=22">Microsoft SQL Server Admin</a> forum</strong><ins></ins></p>
]]></content:encoded>
			<wfw:commentRss>/index.php/datamgmt/datadesign/grouping-datetime-values-in-half-hour-bl/feed/</wfw:commentRss>
		<slash:comments>7</slash:comments>
		</item>
	</channel>
</rss>
