<?xml version="1.0" encoding="UTF-8"?><rss version="2.0"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:atom="http://www.w3.org/2005/Atom"
	xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
	xmlns:slash="http://purl.org/rss/1.0/modules/slash/"
	>

<channel>
	<title>json.net &#8211; LessthanDot</title>
	<atom:link href="/index.php/tag/json-net/feed/" rel="self" type="application/rss+xml" />
	<link>/</link>
	<description>A Technical Community for IT Professionals</description>
	<lastBuildDate>Sat, 09 Mar 2019 12:50:36 +0000</lastBuildDate>
	<language>en-US</language>
	<sy:updatePeriod>hourly</sy:updatePeriod>
	<sy:updateFrequency>1</sy:updateFrequency>
	<generator>https://wordpress.org/?v=4.6.1</generator>
	<item>
		<title>Mapping Complex types to/from JSON with JSON.Net</title>
		<link>/index.php/webdev/serverprogramming/aspnet/mapping-complex-types-tofrom-json-with-json-net/</link>
		<comments>/index.php/webdev/serverprogramming/aspnet/mapping-complex-types-tofrom-json-with-json-net/#comments</comments>
		<pubDate>Fri, 07 Jul 2017 11:54:10 +0000</pubDate>
		<dc:creator><![CDATA[Eli Weinstock-Herman (tarwn)]]></dc:creator>
				<category><![CDATA[ASP.NET]]></category>
		<category><![CDATA[C#]]></category>
		<category><![CDATA[json]]></category>
		<category><![CDATA[json.net]]></category>

		<guid isPermaLink="false">/?p=8680</guid>
		<description><![CDATA[In an earlier post I introduced a strongly typed Identity object I am using in an ASP.Net Core application to make my code and error messages more readable. I didn&#8217;t wanted that extra complexity reflected in my database or over the wire with an API. In this post we&#8217;ll look at a simple method to [&#8230;]]]></description>
				<content:encoded><![CDATA[<p>In an <a href="/index.php/desktopdev/mstech/csharp/mapping-complex-types-tofrom-the-db-with-petapoco/">earlier post</a> I introduced a strongly typed Identity object I am using in an ASP.Net Core application to make my code and error messages more readable. I didn&#8217;t wanted that extra complexity reflected in my database or over the wire with an API. In this post we&#8217;ll look at a simple method to map my strongly typed properties in C# to simpler values in JSON.</p>
<p>This is my desired state:</p>
<div id="attachment_8690" style="width: 634px" class="wp-caption aligncenter"><img src="/wp-content/uploads/2017/07/TransparentIdentityType.png" alt="Transparent Server Side Identity Type" width="624" height="121" class="size-full wp-image-8690" srcset="/wp-content/uploads/2017/07/TransparentIdentityType.png 624w, /wp-content/uploads/2017/07/TransparentIdentityType-300x58.png 300w" sizes="(max-width: 624px) 100vw, 624px" /><p class="wp-caption-text">Transparent Server Side Identity Type</p></div>
<p>I want a strongly typed Identity object in my API backend that transparently converts into a simple int value to/from the database and converts to an int or <code>null</code> for the front-end (null in cases where a permanent ID hasn&#8217;t been assigned yet). The right side of this was handled in that earlier post with a PetaPoco IMapper implementation registered globally for IIdentity<int> types. JSON.Net supports a similar method that I can register with ASP.Net Core.</p>
<p>This is what my ASP.Net MVC Method looks like:</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="csharp"><thead><tr><td colspan="2"  class="head">C#</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
</pre></td><td class="de1"><pre class="de1"><span class="br0">&#91;</span>HttpGet<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#93;</span>
<span class="kw1">public</span> async Task<span class="sy0">&lt;</span>List<span class="sy0">&lt;</span>ApplicationDTO<span class="sy0">&gt;&gt;</span> GetAllAsync<span class="br0">&#40;</span><span class="br0">&#41;</span>
<span class="br0">&#123;</span>
&nbsp; &nbsp; <span class="kw1">return</span> await _databaseStore<span class="sy0">.</span><span class="me1">Applications</span><span class="sy0">.</span><span class="me1">GetAllAsync</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
<span class="br0">&#125;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">[HttpGet()]
public async Task&lt;List&lt;ApplicationDTO&gt;&gt; GetAllAsync()
{
	return await _databaseStore.Applications.GetAllAsync();
}</pre></div></div>

<p>And this is what we see over the wire:</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="javascript"><thead><tr><td colspan="2"  class="head">Javascript</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
</pre></td><td class="de1"><pre class="de1"><span class="br0">&#91;</span>
&nbsp; <span class="br0">&#123;</span><span class="st0">&quot;id&quot;</span><span class="sy0">:</span><span class="nu0">2</span><span class="sy0">,</span> <span class="st0">&quot;organizationId&quot;</span><span class="sy0">:</span><span class="nu0">1</span><span class="sy0">,</span> <span class="st0">&quot;name&quot;</span><span class="sy0">:</span><span class="st0">&quot;Fictitious Co, LLC Application&quot;</span><span class="br0">&#125;</span>
<span class="br0">&#93;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">[
  {"id":2, "organizationId":1, "name":"Fictitious Co, LLC Application"}
]</pre></div></div>

<p>Here is the definition of the ApplicationDTO object:</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="csharp"><thead><tr><td colspan="2"  class="head">C#</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
</pre></td><td class="de1"><pre class="de1"><span class="kw1">public</span> <span class="kw4">class</span> ApplicationDTO
<span class="br0">&#123;</span> &nbsp; 
&nbsp; &nbsp; <span class="br0">&#91;</span>Obsolete<span class="br0">&#40;</span><span class="st0">&quot;Serialization use only&quot;</span>, <span class="kw1">true</span><span class="br0">&#41;</span><span class="br0">&#93;</span>
&nbsp; &nbsp; <span class="kw1">public</span> ApplicationDTO<span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span> <span class="br0">&#125;</span>
&nbsp;
&nbsp; &nbsp; <span class="kw1">public</span> ApplicationDTO<span class="br0">&#40;</span>AppId id, OrganizationId organizationid, <span class="kw4">string</span> name<span class="br0">&#41;</span>
&nbsp; &nbsp; <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; Id <span class="sy0">=</span> id<span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; OrganizationId <span class="sy0">=</span> organizationid<span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; Name <span class="sy0">=</span> name<span class="sy0">;</span>
&nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp; &nbsp; 
&nbsp; &nbsp; <span class="kw1">public</span> AppId Id <span class="br0">&#123;</span> <span class="kw1">get</span><span class="sy0">;</span> <span class="kw1">set</span><span class="sy0">;</span> <span class="br0">&#125;</span>
&nbsp; &nbsp; &nbsp; &nbsp; 
&nbsp; &nbsp; <span class="kw1">public</span> OrganizationId OrganizationId <span class="br0">&#123;</span> <span class="kw1">get</span><span class="sy0">;</span> <span class="kw1">set</span><span class="sy0">;</span> <span class="br0">&#125;</span>
&nbsp; &nbsp; &nbsp; &nbsp; 
&nbsp; &nbsp; <span class="kw1">public</span> <span class="kw4">string</span> Name <span class="br0">&#123;</span> <span class="kw1">get</span><span class="sy0">;</span> <span class="kw1">set</span><span class="sy0">;</span> <span class="br0">&#125;</span>
<span class="br0">&#125;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">public class ApplicationDTO
{   
    [Obsolete("Serialization use only", true)]
    public ApplicationDTO() { }
 
    public ApplicationDTO(AppId id, OrganizationId organizationid, string name)
    {
        Id = id;
        OrganizationId = organizationid;
        Name = name;
    }
    
    public AppId Id { get; set; }
        
    public OrganizationId OrganizationId { get; set; }
        
    public string Name { get; set; }
}</pre></div></div>

<p>Here is the definition of the OrganizationId Identity:</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="csharp"><thead><tr><td colspan="2"  class="head">C#</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
</pre></td><td class="de1"><pre class="de1"><span class="kw1">public</span> <span class="kw4">class</span> OrganizationId <span class="sy0">:</span> IIdentity<span class="sy0">&lt;</span><span class="kw4">int</span><span class="sy0">&gt;</span>
<span class="br0">&#123;</span> &nbsp; 
&nbsp; &nbsp; <span class="br0">&#91;</span>Obsolete<span class="br0">&#40;</span><span class="st0">&quot;Serialization use only&quot;</span>, <span class="kw1">true</span><span class="br0">&#41;</span><span class="br0">&#93;</span>
&nbsp; &nbsp; <span class="kw1">public</span> OrganizationId<span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span> <span class="br0">&#125;</span>
&nbsp; &nbsp; &nbsp;
&nbsp; &nbsp; <span class="kw1">public</span> OrganizationId<span class="br0">&#40;</span><span class="kw4">int</span> id<span class="br0">&#41;</span>
&nbsp; &nbsp; <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; RawValue <span class="sy0">=</span> id<span class="sy0">;</span>
&nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp; &nbsp; &nbsp;
&nbsp; &nbsp; <span class="kw1">public</span> <span class="kw4">int</span> RawValue <span class="br0">&#123;</span> <span class="kw1">get</span><span class="sy0">;</span> <span class="kw1">set</span><span class="sy0">;</span> <span class="br0">&#125;</span>
<span class="br0">&#125;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">public class OrganizationId : IIdentity&lt;int&gt;
{   
	[Obsolete("Serialization use only", true)]
	public OrganizationId() { }
	 
	public OrganizationId(int id)
	{
		RawValue = id;
	}
	 
	public int RawValue { get; set; }
}</pre></div></div>

<p>These are both generated code, with some of the extras left out (potentially a future post).</p>
<h2>Implementing a JSON.Net Mapper</h2>
<p>JSON.Net supports custom JsonConverter implementations that will let us transparently convert between IIdentity<int> objects in C# and int values JSON:</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="csharp"><thead><tr><td colspan="2"  class="head">C#</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
</pre></td><td class="de1"><pre class="de1"><span class="kw1">public</span> <span class="kw4">class</span> IdentityJsonConverter<span class="sy0">&lt;</span>T<span class="sy0">&gt;</span> <span class="sy0">:</span> JsonConverter
<span class="br0">&#123;</span>
&nbsp; &nbsp; <span class="kw1">public</span> <span class="kw1">override</span> <span class="kw4">void</span> WriteJson<span class="br0">&#40;</span>JsonWriter writer, <span class="kw4">object</span> <span class="kw1">value</span>, JsonSerializer serializer<span class="br0">&#41;</span>
&nbsp; &nbsp; <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; writer<span class="sy0">.</span><span class="me1">WriteValue</span><span class="br0">&#40;</span><span class="br0">&#40;</span><span class="br0">&#40;</span>IIdentity<span class="sy0">&lt;</span>T<span class="sy0">&gt;</span><span class="br0">&#41;</span><span class="kw1">value</span><span class="br0">&#41;</span><span class="sy0">.</span><span class="me1">RawValue</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp;
&nbsp; &nbsp; <span class="kw1">public</span> <span class="kw1">override</span> <span class="kw4">object</span> ReadJson<span class="br0">&#40;</span>JsonReader reader, Type objectType, <span class="kw4">object</span> existingValue, JsonSerializer serializer<span class="br0">&#41;</span>
&nbsp; &nbsp; <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">if</span> <span class="br0">&#40;</span>reader<span class="sy0">.</span><span class="kw1">Value</span> <span class="sy0">!=</span> <span class="kw1">null</span><span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">var</span> ctor <span class="sy0">=</span> objectType<span class="sy0">.</span><span class="me1">GetConstructor</span><span class="br0">&#40;</span><span class="kw3">new</span> Type<span class="br0">&#91;</span><span class="br0">&#93;</span> <span class="br0">&#123;</span> <span class="kw3">typeof</span><span class="br0">&#40;</span>T<span class="br0">&#41;</span> <span class="br0">&#125;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">var</span> obj <span class="sy0">=</span> ctor<span class="sy0">.</span><span class="me1">Invoke</span><span class="br0">&#40;</span><span class="kw3">new</span> <span class="kw4">object</span><span class="br0">&#91;</span><span class="br0">&#93;</span> <span class="br0">&#123;</span> <span class="br0">&#40;</span>T<span class="br0">&#41;</span>Convert<span class="sy0">.</span><span class="me1">ChangeType</span><span class="br0">&#40;</span>reader<span class="sy0">.</span><span class="kw1">Value</span>, <span class="kw3">typeof</span><span class="br0">&#40;</span>T<span class="br0">&#41;</span><span class="br0">&#41;</span> <span class="br0">&#125;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">return</span> obj<span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">else</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">return</span> <span class="kw1">null</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp;
&nbsp; &nbsp; <span class="kw1">public</span> <span class="kw1">override</span> <span class="kw4">bool</span> CanConvert<span class="br0">&#40;</span>Type objectType<span class="br0">&#41;</span>
&nbsp; &nbsp; <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">return</span> <span class="kw3">typeof</span><span class="br0">&#40;</span>IIdentity<span class="sy0">&lt;</span>T<span class="sy0">&gt;</span><span class="br0">&#41;</span><span class="sy0">.</span><span class="me1">IsAssignableFrom</span><span class="br0">&#40;</span>objectType<span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; <span class="br0">&#125;</span>
<span class="br0">&#125;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">public class IdentityJsonConverter&lt;T&gt; : JsonConverter
{
    public override void WriteJson(JsonWriter writer, object value, JsonSerializer serializer)
    {
        writer.WriteValue(((IIdentity&lt;T&gt;)value).RawValue);
    }

    public override object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer)
    {
        if (reader.Value != null)
        {
            var ctor = objectType.GetConstructor(new Type[] { typeof(T) });
            var obj = ctor.Invoke(new object[] { (T)Convert.ChangeType(reader.Value, typeof(T)) });
            return obj;
        }
        else
        {
            return null;
        }
    }

    public override bool CanConvert(Type objectType)
    {
        return typeof(IIdentity&lt;T&gt;).IsAssignableFrom(objectType);
    }
}</pre></div></div>

<p>How it works:</p>
<p><code>CanConvert</code> identifies any implementations of IIdentity<int> as something this converter can handle. </p>
<p><code>WriteJson</code> is called when JSON.Net is converting to JSON and simply returns the underlying value of my Identity. </p>
<p><code>ReadJson</code> is called to convert from raw JSON to C#. Converting JSON is slightly more complex, as I allow for null values from the client (it doesn&#8217;t generate id&#8217;s) so when the JSON value is null I pass that on as a null Identity. If it&#8217;s not null, I use reflection on the concrete Identity to find the single parameter constructor and invoke it with incoming JSON converted to the expected type (<code>int</code> for the examples above). </p>
<p>If I wasn&#8217;t generating these Identity classes, there would be some risk in assuming the presence of a constructor of that shape. Because I&#8217;m generating it, I can save time because i know it&#8217;s all or nothing, either all of the Identity objects will work or none of them will. </p>
<h2>Employing it in ASP.Net</h2>
<p>To use this custom JSONConverter when ASP.Net is serializing/deserializing Action responses and inputs, I add JSON options to MVC during the ConfigureServics call of Startup:</p>
<p><b>Startup.cs</b></p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="csharp"><thead><tr><td colspan="2"  class="head">C#</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
</pre></td><td class="de1"><pre class="de1"><span class="kw1">public</span> IServiceProvider ConfigureServices<span class="br0">&#40;</span>IServiceCollection services<span class="br0">&#41;</span>
<span class="br0">&#123;</span>
&nbsp; &nbsp; <span class="co1">// Add framework services.</span>
&nbsp; &nbsp; services<span class="sy0">.</span><span class="me1">AddMvc</span><span class="br0">&#40;</span><span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="sy0">.</span><span class="me1">AddJsonOptions</span><span class="br0">&#40;</span>options <span class="sy0">=&gt;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; options<span class="sy0">.</span><span class="me1">SerializerSettings</span><span class="sy0">.</span><span class="me1">Converters</span><span class="sy0">.</span><span class="kw1">Add</span><span class="br0">&#40;</span><span class="kw3">new</span> IdentityJsonConverter<span class="sy0">&lt;</span>Int32<span class="sy0">&gt;</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp;<span class="co1">// ...</span>
<span class="br0">&#125;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">public IServiceProvider ConfigureServices(IServiceCollection services)
{
    // Add framework services.
    services.AddMvc()
            .AddJsonOptions(options =&gt; {
                options.SerializerSettings.Converters.Add(new IdentityJsonConverter&lt;Int32&gt;());
            });

   // ...
}</pre></div></div>

<p>Now all attempts to deserialize a value into an IIdentity property and serialization to respond with one of these values will pass through the custom mapper and I have the benefit of my custom type in my server-side logic without any extra overhead in my client-side app or code to write as I add new models or properties.</p>
]]></content:encoded>
			<wfw:commentRss>/index.php/webdev/serverprogramming/aspnet/mapping-complex-types-tofrom-json-with-json-net/feed/</wfw:commentRss>
		<slash:comments>1</slash:comments>
		</item>
	</channel>
</rss>
