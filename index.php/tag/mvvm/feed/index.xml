<?xml version="1.0" encoding="UTF-8"?><rss version="2.0"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:atom="http://www.w3.org/2005/Atom"
	xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
	xmlns:slash="http://purl.org/rss/1.0/modules/slash/"
	>

<channel>
	<title>mvvm &#8211; LessthanDot</title>
	<atom:link href="/index.php/tag/mvvm/feed/" rel="self" type="application/rss+xml" />
	<link>/</link>
	<description>A Technical Community for IT Professionals</description>
	<lastBuildDate>Sat, 09 Mar 2019 12:50:36 +0000</lastBuildDate>
	<language>en-US</language>
	<sy:updatePeriod>hourly</sy:updatePeriod>
	<sy:updateFrequency>1</sy:updateFrequency>
	<generator>https://wordpress.org/?v=4.6.1</generator>
	<item>
		<title>Easier Boundary Testing: Keep Parse/Validation/Format rules out of your HTML View</title>
		<link>/index.php/webdev/easier-boundary-testing-keep-parsevalidationformat-rules-out-of-your-html-view/</link>
		<comments>/index.php/webdev/easier-boundary-testing-keep-parsevalidationformat-rules-out-of-your-html-view/#respond</comments>
		<pubDate>Mon, 24 Oct 2016 19:49:12 +0000</pubDate>
		<dc:creator><![CDATA[Eli Weinstock-Herman (tarwn)]]></dc:creator>
				<category><![CDATA[Web Developer]]></category>
		<category><![CDATA[knockoutjs]]></category>
		<category><![CDATA[mvvm]]></category>

		<guid isPermaLink="false">/?p=4697</guid>
		<description><![CDATA[In a typical single-page application, type and validation logic is entered in the HTML view and we rely on our binding framework or a validation library to layer this behavior onto the form. There are trade-offs to this approach, which are mostly negative as you get into larger, longer-lived applications. When we embed validation rules [&#8230;]]]></description>
				<content:encoded><![CDATA[<p>In a typical single-page application, type and validation logic is entered in the HTML view and we rely on our binding framework or a validation library to layer this behavior onto the form. There are trade-offs to this approach, which are mostly negative as you get into larger, longer-lived applications. </p>
<p>When we embed validation rules and logic into the View, we&#8217;re mostly limited to UI Testing to validate them (the most costly layer of the <a href="https://www.mountaingoatsoftware.com/blog/the-forgotten-layer-of-the-test-automation-pyramid" title=""The Forgotten Layer of the Test Automation Pyramid>testing pyramid</a>). We also pay an ongoing tax of having to re-define rules every place we put an input field (how do we format percentages for this field? ah, the same way as the other 100 places). Some frameworks even pass invalid or undefined values through to the underlying code, forcing us to build extra layers of defensive logic throughout the codebase.  </p>
<p>Meanwhile, testing below the UI means we can do this:</p>
<div id="attachment_4703" style="width: 810px" class="wp-caption aligncenter"><a href="/wp-content/uploads/2016/10/FasterBoundaryTests1.png"><img src="/wp-content/uploads/2016/10/FasterBoundaryTests1.png" alt="Testing Model Inputs" width="800" class="size-full wp-image-4703" srcset="/wp-content/uploads/2016/10/FasterBoundaryTests1.png 943w, /wp-content/uploads/2016/10/FasterBoundaryTests1-300x133.png 300w" sizes="(max-width: 943px) 100vw, 943px" /></a><p class="wp-caption-text">Boundary Testing at Unit Test Speeds</p></div>
<p>In <a href="/index.php/webdev/mvvm-validation-with-knockoutjs-dont-put-it-in-the-viewhtml/" title="MVVM Validation with KnockoutJS – Don’t put it in the View/HTML">MVVM Validation with KnockoutJS – Don’t put it in the View/HTML</a>, I created a small, artificial codebase to show a method of embedding user input logic in code rather than HTML attributes. Some of the value to this approach includes being able to define a domain-specific set of formats/validation for your application, access to the read/write pipelines to add extra behavior or transformations, freedom to assume only good values make it into your business logic, and the ability to write basic unit tests to verify your application behavior for good and bad inputs. </p>
<p>Today we&#8217;ll explore one of the opportunities we left the door open to: whether validation rules like min/max are actually working correctly.</p>
<p><i>Code for this post is available here: <A href="https://github.com/tarwn/Blog_KnockoutMVVMPatterns/tree/master/validationWithTests">github.com/tarwn/Blog_KnockoutMVVMPatterns/**/validationWithTests</a></i></p>
<h2>Boundary Testing</h2>
<p>Boundary testing is testing the extreme edges of what is valid for our inputs, for instance what happens just inside the minimum value, at the minimum value, and just outside. Fuzz testing (which we&#8217;ll look at in a later post) is a technique that tests what happens when random, unexpected inputs occur. There are entire suites of tools built to do both of these things, but with our input logic abstracted away from the HTML, we can perform a level of these tests from unit tests code and get a large amount of the value we would get from a more costly UI testing setup at a fraction of the cost.</p>
<p>Let&#8217;s look at the basic sample form from the prior post:</p>
<div id="attachment_4416" style="width: 568px" class="wp-caption aligncenter"><a href="/wp-content/uploads/2016/02/Screenshot.png"><img src="/wp-content/uploads/2016/02/Screenshot.png" alt="Formatted and Validated Inputs" width="558" height="183" class="size-full wp-image-4416" srcset="/wp-content/uploads/2016/02/Screenshot.png 558w, /wp-content/uploads/2016/02/Screenshot-300x98.png 300w" sizes="(max-width: 558px) 100vw, 558px" /></a><p class="wp-caption-text">Formatted and Validated Inputs</p></div>
<p>The binding for each of these inputs binds to a userInput extension using <a href="http://knockoutjs.com/">knockoutjs</a>. The user input is defined as an extension of the underlying observable value, with a defined type, optional boundaries, and the source observable we are extending that is only set when the input is valid.</p>
<p>Here is the PresentationModel that wraps around our data Model and defines how we present the model to a human:</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="javascript"><thead><tr><td colspan="2"  class="head">Javascript</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
</pre></td><td class="de1"><pre class="de1"><span class="kw1">function</span> OrderLinePresentationModel<span class="br0">&#40;</span>orderLine<span class="br0">&#41;</span><span class="br0">&#123;</span>
&nbsp; &nbsp; <span class="kw1">var</span> self <span class="sy0">=</span> <span class="kw1">this</span><span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; self.<span class="me1">model</span> <span class="sy0">=</span> orderLine<span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; self.<span class="me1">name</span> <span class="sy0">=</span> orderLine.<span class="me1">name</span>.<span class="me1">extend</span><span class="br0">&#40;</span><span class="br0">&#123;</span> validate<span class="sy0">:</span> <span class="br0">&#123;</span> type<span class="sy0">:</span> stringType<span class="sy0">,</span> min<span class="sy0">:</span> <span class="nu0">1</span><span class="sy0">,</span> max<span class="sy0">:</span> <span class="nu0">25</span><span class="sy0">,</span> required<span class="sy0">:</span> <span class="kw2">true</span> <span class="br0">&#125;</span> <span class="br0">&#125;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; self.<span class="me1">quantity</span> <span class="sy0">=</span> orderLine.<span class="me1">quantity</span>.<span class="me1">extend</span><span class="br0">&#40;</span><span class="br0">&#123;</span> validate<span class="sy0">:</span> <span class="br0">&#123;</span> type<span class="sy0">:</span> integerType<span class="sy0">,</span> min<span class="sy0">:</span> <span class="nu0">1</span><span class="sy0">,</span> max<span class="sy0">:</span> <span class="nu0">500</span><span class="sy0">,</span> required<span class="sy0">:</span> <span class="kw2">true</span> <span class="br0">&#125;</span> <span class="br0">&#125;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; self.<span class="me1">price</span> <span class="sy0">=</span> orderLine.<span class="me1">price</span>.<span class="me1">extend</span><span class="br0">&#40;</span><span class="br0">&#123;</span> validate<span class="sy0">:</span> <span class="br0">&#123;</span> type<span class="sy0">:</span> currencyType<span class="sy0">,</span> min<span class="sy0">:</span> <span class="nu0">0</span><span class="sy0">,</span> max<span class="sy0">:</span> <span class="nu0">100</span><span class="sy0">,</span> required<span class="sy0">:</span> <span class="kw2">true</span> <span class="br0">&#125;</span> <span class="br0">&#125;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; self.<span class="me1">total</span> <span class="sy0">=</span> ko.<span class="me1">pureComputed</span><span class="br0">&#40;</span><span class="kw1">function</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">return</span> currencyType.<span class="me1">format</span><span class="br0">&#40;</span>orderLine.<span class="me1">total</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; <span class="br0">&#125;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; self.<span class="me1">isValid</span> <span class="sy0">=</span> ko.<span class="me1">pureComputed</span><span class="br0">&#40;</span><span class="kw1">function</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">return</span> <span class="sy0">!</span>self.<span class="me1">name</span>.<span class="me1">validation</span><span class="br0">&#40;</span><span class="br0">&#41;</span>.<span class="me1">isError</span><span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="sy0">&amp;&amp;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="sy0">!</span>self.<span class="me1">quantity</span>.<span class="me1">validation</span><span class="br0">&#40;</span><span class="br0">&#41;</span>.<span class="me1">isError</span><span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="sy0">&amp;&amp;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="sy0">!</span>self.<span class="me1">price</span>.<span class="me1">validation</span><span class="br0">&#40;</span><span class="br0">&#41;</span>.<span class="me1">isError</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; <span class="br0">&#125;</span><span class="br0">&#41;</span><span class="sy0">;</span>
<span class="br0">&#125;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">function OrderLinePresentationModel(orderLine){
	var self = this;

	self.model = orderLine;

	self.name = orderLine.name.extend({ validate: { type: stringType, min: 1, max: 25, required: true } });
	self.quantity = orderLine.quantity.extend({ validate: { type: integerType, min: 1, max: 500, required: true } });
	self.price = orderLine.price.extend({ validate: { type: currencyType, min: 0, max: 100, required: true } });

	self.total = ko.pureComputed(function(){
		return currencyType.format(orderLine.total());
	});

	self.isValid = ko.pureComputed(function(){
		return !self.name.validation().isError() &amp;&amp;
			!self.quantity.validation().isError() &amp;&amp;
			!self.price.validation().isError();
	});
}</pre></div></div>

<p>In English, we are exposing the following properties from the underlying OrderLine Model:</p>
<ul>
<li>Name &#8211; a string type that must have 1-25 characters</li>
<li>Quantity &#8211; an integer type that must be between 1 and 500</li>
<li>Price &#8211; a Currency type that must be between $0 and $100</li>
<li>Total &#8211; total for the line that is formatted as a Currency type</li>
<li>IsValid &#8211; A property that reflects whether all of the inputs have valid values</li>
</ul>
<p>The &#8220;type&#8221; objects are used during the read/write pipelines:</p>
<div id="attachment_4415" style="width: 510px" class="wp-caption aligncenter"><a href="/wp-content/uploads/2016/02/PresentationModel.png"><img src="/wp-content/uploads/2016/02/PresentationModel.png" alt="Presentation Model - Read/Write Pipelines" width="500" height="220" class="size-full wp-image-4415" srcset="/wp-content/uploads/2016/02/PresentationModel.png 500w, /wp-content/uploads/2016/02/PresentationModel-300x132.png 300w" sizes="(max-width: 500px) 100vw, 500px" /></a><p class="wp-caption-text">Presentation Model &#8211; Read/Write Pipelines</p></div>
<ul>
<li>On Read: Run the raw Model value through the Formatter to produce output</li>
<li>On Write/Input: Run the input through tryParse and then tryValidate (and then custom validation properties), only writing it to the underlying Model property if it passes both steps</li>
</ul>
<p>Here is what one of those &#8220;type&#8221; objects looks like as a literal:</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="javascript"><thead><tr><td colspan="2"  class="head">Javascript</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
</pre></td><td class="de1"><pre class="de1"><span class="kw1">return</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; emptyValue<span class="sy0">:</span> <span class="kw2">null</span><span class="sy0">,</span>
&nbsp; &nbsp; format<span class="sy0">:</span> <span class="kw1">function</span><span class="br0">&#40;</span>value<span class="br0">&#41;</span><span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">if</span><span class="br0">&#40;</span>value <span class="sy0">==</span> <span class="kw2">null</span><span class="br0">&#41;</span><span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">return</span> <span class="st0">''</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">else</span><span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">return</span> value.<span class="me1">toLocaleString</span><span class="br0">&#40;</span><span class="st0">'en-US'</span><span class="sy0">,</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; style<span class="sy0">:</span> <span class="st0">'currency'</span><span class="sy0">,</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; currency<span class="sy0">:</span> <span class="st0">'USD'</span><span class="sy0">,</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; currencyDisplay<span class="sy0">:</span> <span class="st0">'symbol'</span><span class="sy0">,</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; useGrouping<span class="sy0">:</span> <span class="kw2">true</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp; &nbsp; <span class="br0">&#125;</span><span class="sy0">,</span>
&nbsp; &nbsp; tryParse<span class="sy0">:</span> <span class="kw1">function</span><span class="br0">&#40;</span>value<span class="br0">&#41;</span><span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="co1">// strip out commas and $</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">var</span> parsedResult <span class="sy0">=</span> parseFloat<span class="br0">&#40;</span>value.<span class="me1">replace</span><span class="br0">&#40;</span><span class="co2">/[\$,]/g</span><span class="sy0">,</span><span class="st0">''</span><span class="br0">&#41;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">if</span><span class="br0">&#40;</span>isNaN<span class="br0">&#40;</span>parsedResult<span class="br0">&#41;</span><span class="br0">&#41;</span><span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">return</span> inputResult.<span class="me1">failedInput</span><span class="br0">&#40;</span><span class="st0">&quot;'&quot;</span> <span class="sy0">+</span> value <span class="sy0">+</span> <span class="st0">&quot;' is not a valid currency value&quot;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">else</span><span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">return</span> inputResult.<span class="me1">successfulInput</span><span class="br0">&#40;</span>parsedResult<span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp; &nbsp; <span class="br0">&#125;</span><span class="sy0">,</span>
&nbsp; &nbsp; tryValidate<span class="sy0">:</span> <span class="kw1">function</span><span class="br0">&#40;</span>value<span class="sy0">,</span> options<span class="br0">&#41;</span><span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">if</span><span class="br0">&#40;</span>options.<span class="me1">min</span> <span class="sy0">!=</span> <span class="kw2">undefined</span> <span class="sy0">&amp;&amp;</span> value <span class="sy0">&lt;</span> options.<span class="me1">min</span><span class="br0">&#41;</span><span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">return</span> inputResult.<span class="me1">failedInput</span><span class="br0">&#40;</span><span class="st0">&quot;'&quot;</span> <span class="sy0">+</span> value <span class="sy0">+</span> <span class="st0">&quot;' is less than the supported minimum of '&quot;</span> <span class="sy0">+</span> options.<span class="me1">min</span> <span class="sy0">+</span> <span class="st0">&quot;'&quot;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">if</span><span class="br0">&#40;</span>options.<span class="me1">max</span> <span class="sy0">!=</span> <span class="kw2">undefined</span> <span class="sy0">&amp;&amp;</span> value <span class="sy0">&gt;</span> options.<span class="me1">max</span><span class="br0">&#41;</span><span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">return</span> inputResult.<span class="me1">failedInput</span><span class="br0">&#40;</span><span class="st0">&quot;'&quot;</span> <span class="sy0">+</span> value <span class="sy0">+</span> <span class="st0">&quot;' is greater than the supported maximum of '&quot;</span> <span class="sy0">+</span> options.<span class="me1">max</span> <span class="sy0">+</span> <span class="st0">&quot;'&quot;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">return</span> inputResult.<span class="me1">successfulInput</span><span class="br0">&#40;</span>value<span class="br0">&#41;</span><span class="sy0">;</span>&nbsp; &nbsp; &nbsp; 
&nbsp; &nbsp; <span class="br0">&#125;</span>
<span class="br0">&#125;</span><span class="sy0">;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">return {
	emptyValue: null,
	format: function(value){
		if(value == null){
			return '';
		}
		else{
			return value.toLocaleString('en-US', {
				style: 'currency',
				currency: 'USD',
				currencyDisplay: 'symbol',
				useGrouping: true
			});
		}
	},
	tryParse: function(value){
		// strip out commas and $
		var parsedResult = parseFloat(value.replace(/[\$,]/g,''));
		if(isNaN(parsedResult)){
			return inputResult.failedInput("'" + value + "' is not a valid currency value");
		}
		else{
			return inputResult.successfulInput(parsedResult);
		}
	},
	tryValidate: function(value, options){
		if(options.min != undefined &amp;&amp; value &lt; options.min){
			return inputResult.failedInput("'" + value + "' is less than the supported minimum of '" + options.min + "'");
		}

		if(options.max != undefined &amp;&amp; value &gt; options.max){
			return inputResult.failedInput("'" + value + "' is greater than the supported maximum of '" + options.max + "'");
		}

		return inputResult.successfulInput(value);		
	}
};</pre></div></div>

<p>Using a knockout extension, we can ensure all writes pass through the parse and validate logic before being written to the true underlying model, surface an error state if either fails, and display a formatted value independent of the raw value in that underlying model.</p>
<h2>Adding Boundary Tests</h2>
<p>So we have two options for boundary testing, we can test each available &#8220;type&#8221; with some common boundary settings or we can test each PresentationModel&#8217;s inputs with the defined ones. The intent of the test is to make sure we handle boundaries the way we think we do, so I lean towards the more target &#8220;type&#8221; tests as getting the most bang for the buck.</p>
<div id="attachment_4703" style="width: 810px" class="wp-caption aligncenter"><a href="/wp-content/uploads/2016/10/FasterBoundaryTests1.png"><img src="/wp-content/uploads/2016/10/FasterBoundaryTests1.png" alt="Testing Model Inputs" width="800" class="size-full wp-image-4703" srcset="/wp-content/uploads/2016/10/FasterBoundaryTests1.png 943w, /wp-content/uploads/2016/10/FasterBoundaryTests1-300x133.png 300w" sizes="(max-width: 943px) 100vw, 943px" /></a><p class="wp-caption-text">Testing Model Inputs</p></div>
<p>Here is sample code for validating the boundaries on the Order Line, which has a text, integer, and currency input:<br />
<b>specs/models/orderLinePresentationModel.boundary.spec.js</b></p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="javascript"><thead><tr><td colspan="2"  class="head">Javascript</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
</pre></td><td class="de1"><pre class="de1">describe<span class="br0">&#40;</span><span class="st0">'boundary tests'</span><span class="sy0">,</span> <span class="kw1">function</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#123;</span>
&nbsp;
&nbsp; &nbsp; <span class="kw1">var</span> testCases <span class="sy0">=</span> <span class="br0">&#91;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#123;</span> name<span class="sy0">:</span> <span class="st0">'name input - shorter than min'</span><span class="sy0">,</span> field<span class="sy0">:</span> <span class="st0">'name'</span><span class="sy0">,</span> input<span class="sy0">:</span> <span class="st0">''</span><span class="sy0">,</span> isError<span class="sy0">:</span> <span class="kw2">true</span> <span class="br0">&#125;</span><span class="sy0">,</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#123;</span> name<span class="sy0">:</span> <span class="st0">'name input - longer than min'</span><span class="sy0">,</span> field<span class="sy0">:</span> <span class="st0">'name'</span><span class="sy0">,</span> input<span class="sy0">:</span> <span class="st0">'1'</span><span class="sy0">,</span> isError<span class="sy0">:</span> <span class="kw2">false</span> <span class="br0">&#125;</span><span class="sy0">,</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#123;</span> name<span class="sy0">:</span> <span class="st0">'name input - shorter than max'</span><span class="sy0">,</span> field<span class="sy0">:</span> <span class="st0">'name'</span><span class="sy0">,</span> input<span class="sy0">:</span> <span class="st0">'123456789012345678901234'</span><span class="sy0">,</span> isError<span class="sy0">:</span> <span class="kw2">false</span> <span class="br0">&#125;</span><span class="sy0">,</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#123;</span> name<span class="sy0">:</span> <span class="st0">'name input - max'</span><span class="sy0">,</span> field<span class="sy0">:</span> <span class="st0">'name'</span><span class="sy0">,</span> input<span class="sy0">:</span> <span class="st0">'1234567890123456789012345'</span><span class="sy0">,</span> isError<span class="sy0">:</span> <span class="kw2">false</span> <span class="br0">&#125;</span><span class="sy0">,</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#123;</span> name<span class="sy0">:</span> <span class="st0">'name input - longer than max'</span><span class="sy0">,</span> field<span class="sy0">:</span> <span class="st0">'name'</span><span class="sy0">,</span> input<span class="sy0">:</span> <span class="st0">'12345678901234567890123456'</span><span class="sy0">,</span> isError<span class="sy0">:</span> <span class="kw2">true</span> <span class="br0">&#125;</span><span class="sy0">,</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#123;</span> name<span class="sy0">:</span> <span class="st0">'quantity input - less than min'</span><span class="sy0">,</span> field<span class="sy0">:</span> <span class="st0">'quantity'</span><span class="sy0">,</span> input<span class="sy0">:</span> <span class="st0">'-1'</span><span class="sy0">,</span> isError<span class="sy0">:</span> <span class="kw2">true</span> <span class="br0">&#125;</span><span class="sy0">,</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#123;</span> name<span class="sy0">:</span> <span class="st0">'quantity input - min'</span><span class="sy0">,</span> field<span class="sy0">:</span> <span class="st0">'quantity'</span><span class="sy0">,</span> input<span class="sy0">:</span> <span class="st0">'1'</span><span class="sy0">,</span> isError<span class="sy0">:</span> <span class="kw2">false</span> <span class="br0">&#125;</span><span class="sy0">,</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#123;</span> name<span class="sy0">:</span> <span class="st0">'quantity input - above min'</span><span class="sy0">,</span> field<span class="sy0">:</span> <span class="st0">'quantity'</span><span class="sy0">,</span> input<span class="sy0">:</span> <span class="st0">'2'</span><span class="sy0">,</span> isError<span class="sy0">:</span> <span class="kw2">false</span> <span class="br0">&#125;</span><span class="sy0">,</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#123;</span> name<span class="sy0">:</span> <span class="st0">'quantity input - below max'</span><span class="sy0">,</span> field<span class="sy0">:</span> <span class="st0">'quantity'</span><span class="sy0">,</span> input<span class="sy0">:</span> <span class="st0">'499'</span><span class="sy0">,</span> isError<span class="sy0">:</span> <span class="kw2">false</span> <span class="br0">&#125;</span><span class="sy0">,</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#123;</span> name<span class="sy0">:</span> <span class="st0">'quantity input - max'</span><span class="sy0">,</span> field<span class="sy0">:</span> <span class="st0">'quantity'</span><span class="sy0">,</span> input<span class="sy0">:</span> <span class="st0">'500'</span><span class="sy0">,</span> isError<span class="sy0">:</span> <span class="kw2">false</span> <span class="br0">&#125;</span><span class="sy0">,</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#123;</span> name<span class="sy0">:</span> <span class="st0">'quantity input - above max'</span><span class="sy0">,</span> field<span class="sy0">:</span> <span class="st0">'quantity'</span><span class="sy0">,</span> input<span class="sy0">:</span> <span class="st0">'501'</span><span class="sy0">,</span> isError<span class="sy0">:</span> <span class="kw2">true</span> <span class="br0">&#125;</span><span class="sy0">,</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#123;</span> name<span class="sy0">:</span> <span class="st0">'price input - less than min'</span><span class="sy0">,</span> field<span class="sy0">:</span> <span class="st0">'price'</span><span class="sy0">,</span> input<span class="sy0">:</span> <span class="st0">'-1'</span><span class="sy0">,</span> isError<span class="sy0">:</span> <span class="kw2">true</span> <span class="br0">&#125;</span><span class="sy0">,</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#123;</span> name<span class="sy0">:</span> <span class="st0">'price input - min'</span><span class="sy0">,</span> field<span class="sy0">:</span> <span class="st0">'price'</span><span class="sy0">,</span> input<span class="sy0">:</span> <span class="st0">'1'</span><span class="sy0">,</span> isError<span class="sy0">:</span> <span class="kw2">false</span> <span class="br0">&#125;</span><span class="sy0">,</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#123;</span> name<span class="sy0">:</span> <span class="st0">'price input - above min'</span><span class="sy0">,</span> field<span class="sy0">:</span> <span class="st0">'price'</span><span class="sy0">,</span> input<span class="sy0">:</span> <span class="st0">'2'</span><span class="sy0">,</span> isError<span class="sy0">:</span> <span class="kw2">false</span> <span class="br0">&#125;</span><span class="sy0">,</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#123;</span> name<span class="sy0">:</span> <span class="st0">'price input - below max'</span><span class="sy0">,</span> field<span class="sy0">:</span> <span class="st0">'price'</span><span class="sy0">,</span> input<span class="sy0">:</span> <span class="st0">'99'</span><span class="sy0">,</span> isError<span class="sy0">:</span> <span class="kw2">false</span> <span class="br0">&#125;</span><span class="sy0">,</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#123;</span> name<span class="sy0">:</span> <span class="st0">'price input - max'</span><span class="sy0">,</span> field<span class="sy0">:</span> <span class="st0">'price'</span><span class="sy0">,</span> input<span class="sy0">:</span> <span class="st0">'100'</span><span class="sy0">,</span> isError<span class="sy0">:</span> <span class="kw2">false</span> <span class="br0">&#125;</span><span class="sy0">,</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#123;</span> name<span class="sy0">:</span> <span class="st0">'price input - above max'</span><span class="sy0">,</span> field<span class="sy0">:</span> <span class="st0">'price'</span><span class="sy0">,</span> input<span class="sy0">:</span> <span class="st0">'101'</span><span class="sy0">,</span> isError<span class="sy0">:</span> <span class="kw2">true</span> <span class="br0">&#125;</span><span class="sy0">,</span>
&nbsp;
&nbsp; &nbsp; <span class="br0">&#93;</span><span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; testCases.<span class="me1">forEach</span><span class="br0">&#40;</span><span class="kw1">function</span><span class="br0">&#40;</span>testCase<span class="br0">&#41;</span><span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">var</span> testName <span class="sy0">=</span> testCase.<span class="me1">name</span> <span class="sy0">+</span> <span class="st0">': is a '</span> <span class="sy0">+</span> <span class="br0">&#40;</span>testCase.<span class="me1">isError</span> <span class="sy0">?</span> <span class="st0">'validation error'</span> <span class="sy0">:</span> <span class="st0">'successful input'</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; it<span class="br0">&#40;</span>testName<span class="sy0">,</span> <span class="kw1">function</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">var</span> testLine <span class="sy0">=</span> <span class="kw1">new</span> OrderLineModel<span class="br0">&#40;</span><span class="br0">&#123;</span><span class="br0">&#125;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">var</span> testLineP <span class="sy0">=</span> <span class="kw1">new</span> OrderLinePresentationModel<span class="br0">&#40;</span>testLine<span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">var</span> inputUnderTest <span class="sy0">=</span> testLineP<span class="br0">&#91;</span>testCase.<span class="me1">field</span><span class="br0">&#93;</span><span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; inputUnderTest<span class="br0">&#40;</span>testCase.<span class="me1">input</span><span class="br0">&#41;</span><span class="sy0">;</span> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; expect<span class="br0">&#40;</span>inputUnderTest.<span class="me1">validation</span><span class="br0">&#40;</span><span class="br0">&#41;</span>.<span class="me1">isError</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#41;</span>.<span class="me1">toBe</span><span class="br0">&#40;</span>testCase.<span class="me1">isError</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; <span class="br0">&#125;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
<span class="br0">&#125;</span><span class="br0">&#41;</span><span class="sy0">;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">describe('boundary tests', function(){

	var testCases = [
		{ name: 'name input - shorter than min', field: 'name', input: '', isError: true },
		{ name: 'name input - longer than min', field: 'name', input: '1', isError: false },
		{ name: 'name input - shorter than max', field: 'name', input: '123456789012345678901234', isError: false },
		{ name: 'name input - max', field: 'name', input: '1234567890123456789012345', isError: false },
		{ name: 'name input - longer than max', field: 'name', input: '12345678901234567890123456', isError: true },

		{ name: 'quantity input - less than min', field: 'quantity', input: '-1', isError: true },
		{ name: 'quantity input - min', field: 'quantity', input: '1', isError: false },
		{ name: 'quantity input - above min', field: 'quantity', input: '2', isError: false },
		{ name: 'quantity input - below max', field: 'quantity', input: '499', isError: false },
		{ name: 'quantity input - max', field: 'quantity', input: '500', isError: false },
		{ name: 'quantity input - above max', field: 'quantity', input: '501', isError: true },

		{ name: 'price input - less than min', field: 'price', input: '-1', isError: true },
		{ name: 'price input - min', field: 'price', input: '1', isError: false },
		{ name: 'price input - above min', field: 'price', input: '2', isError: false },
		{ name: 'price input - below max', field: 'price', input: '99', isError: false },
		{ name: 'price input - max', field: 'price', input: '100', isError: false },
		{ name: 'price input - above max', field: 'price', input: '101', isError: true },

	];

	testCases.forEach(function(testCase){
		var testName = testCase.name + ': is a ' + (testCase.isError ? 'validation error' : 'successful input');

		it(testName, function(){
			var testLine = new OrderLineModel({});
			var testLineP = new OrderLinePresentationModel(testLine);
			var inputUnderTest = testLineP[testCase.field];

			inputUnderTest(testCase.input);				

			expect(inputUnderTest.validation().isError()).toBe(testCase.isError);
		});

	});

});</pre></div></div>

<p>So far not a lot of duplication of effort, but in a larger application we would expect to have 10s or 100s of integer, text, currency, date, etc inputs. So the effort to test at this Model level doesn&#8217;t seem to add much value over testing directly at the type level, unless we&#8217;re passing in custom validation that would cause a specific input to operate differently than others of a similar type.</p>
<div id="attachment_4702" style="width: 810px" class="wp-caption aligncenter"><a href="/wp-content/uploads/2016/10/FasterBoundaryTests2.png"><img src="/wp-content/uploads/2016/10/FasterBoundaryTests2.png" alt="Testing Input Types" width="800" class="size-full wp-image-4702" srcset="/wp-content/uploads/2016/10/FasterBoundaryTests2.png 940w, /wp-content/uploads/2016/10/FasterBoundaryTests2-300x103.png 300w" sizes="(max-width: 940px) 100vw, 940px" /></a><p class="wp-caption-text">Testing Input Types</p></div>
<p>Here&#8217;s how we can instead do boundary testing for the more generalized input type level:<br />
<b>specs/inputTypes/all.boundary.spec.js</b></p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="javascript"><thead><tr><td colspan="2"  class="head">Javascript</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
</pre></td><td class="de1"><pre class="de1">&nbsp; &nbsp; describe<span class="br0">&#40;</span><span class="st0">'boundary tests'</span><span class="sy0">,</span> <span class="kw1">function</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#123;</span>
&nbsp; &nbsp; 
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">var</span> testCases <span class="sy0">=</span> <span class="br0">&#91;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#123;</span> name<span class="sy0">:</span> <span class="st0">'currency input - less than min'</span><span class="sy0">,</span> &nbsp; options<span class="sy0">:</span> <span class="br0">&#123;</span> type<span class="sy0">:</span> currencyType<span class="sy0">,</span> min<span class="sy0">:</span> <span class="nu0">0</span><span class="sy0">,</span> max<span class="sy0">:</span> <span class="nu0">10</span> <span class="br0">&#125;</span><span class="sy0">,</span> input<span class="sy0">:</span> <span class="st0">'-.5'</span><span class="sy0">,</span> isError<span class="sy0">:</span> <span class="kw2">true</span> <span class="br0">&#125;</span><span class="sy0">,</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#123;</span> name<span class="sy0">:</span> <span class="st0">'currency input - min length'</span><span class="sy0">,</span>&nbsp; &nbsp; &nbsp; options<span class="sy0">:</span> <span class="br0">&#123;</span> type<span class="sy0">:</span> currencyType<span class="sy0">,</span> min<span class="sy0">:</span> <span class="nu0">0</span><span class="sy0">,</span> max<span class="sy0">:</span> <span class="nu0">10</span> <span class="br0">&#125;</span><span class="sy0">,</span> input<span class="sy0">:</span> <span class="st0">'0'</span><span class="sy0">,</span> isError<span class="sy0">:</span> <span class="kw2">false</span> <span class="br0">&#125;</span><span class="sy0">,</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#123;</span> name<span class="sy0">:</span> <span class="st0">'currency input - more than min'</span><span class="sy0">,</span> &nbsp; options<span class="sy0">:</span> <span class="br0">&#123;</span> type<span class="sy0">:</span> currencyType<span class="sy0">,</span> min<span class="sy0">:</span> <span class="nu0">0</span><span class="sy0">,</span> max<span class="sy0">:</span> <span class="nu0">10</span> <span class="br0">&#125;</span><span class="sy0">,</span> input<span class="sy0">:</span> <span class="st0">'2.5'</span><span class="sy0">,</span> isError<span class="sy0">:</span> <span class="kw2">false</span> <span class="br0">&#125;</span><span class="sy0">,</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#123;</span> name<span class="sy0">:</span> <span class="st0">'currency input - less than max'</span><span class="sy0">,</span> &nbsp; options<span class="sy0">:</span> <span class="br0">&#123;</span> type<span class="sy0">:</span> currencyType<span class="sy0">,</span> min<span class="sy0">:</span> <span class="nu0">0</span><span class="sy0">,</span> max<span class="sy0">:</span> <span class="nu0">10</span> <span class="br0">&#125;</span><span class="sy0">,</span> input<span class="sy0">:</span> <span class="st0">'7.5'</span><span class="sy0">,</span> isError<span class="sy0">:</span> <span class="kw2">false</span> <span class="br0">&#125;</span><span class="sy0">,</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#123;</span> name<span class="sy0">:</span> <span class="st0">'currency input - max'</span><span class="sy0">,</span> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; options<span class="sy0">:</span> <span class="br0">&#123;</span> type<span class="sy0">:</span> currencyType<span class="sy0">,</span> min<span class="sy0">:</span> <span class="nu0">0</span><span class="sy0">,</span> max<span class="sy0">:</span> <span class="nu0">10</span> <span class="br0">&#125;</span><span class="sy0">,</span> input<span class="sy0">:</span> <span class="st0">'10'</span><span class="sy0">,</span> isError<span class="sy0">:</span> <span class="kw2">false</span> <span class="br0">&#125;</span><span class="sy0">,</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#123;</span> name<span class="sy0">:</span> <span class="st0">'currency input - more than max'</span><span class="sy0">,</span> &nbsp; options<span class="sy0">:</span> <span class="br0">&#123;</span> type<span class="sy0">:</span> currencyType<span class="sy0">,</span> min<span class="sy0">:</span> <span class="nu0">0</span><span class="sy0">,</span> max<span class="sy0">:</span> <span class="nu0">10</span> <span class="br0">&#125;</span><span class="sy0">,</span> input<span class="sy0">:</span> <span class="st0">'10.5'</span><span class="sy0">,</span> isError<span class="sy0">:</span> <span class="kw2">true</span> <span class="br0">&#125;</span><span class="sy0">,</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; …
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#123;</span> name<span class="sy0">:</span> <span class="st0">'string input - longer than max'</span><span class="sy0">,</span> &nbsp; options<span class="sy0">:</span> <span class="br0">&#123;</span> type<span class="sy0">:</span> stringType<span class="sy0">,</span> min<span class="sy0">:</span> <span class="nu0">5</span><span class="sy0">,</span> max<span class="sy0">:</span> <span class="nu0">8</span> <span class="br0">&#125;</span><span class="sy0">,</span> input<span class="sy0">:</span> <span class="st0">'123456789'</span><span class="sy0">,</span> isError<span class="sy0">:</span> <span class="kw2">true</span> <span class="br0">&#125;</span><span class="sy0">,</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#93;</span><span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; testCases.<span class="me1">forEach</span><span class="br0">&#40;</span><span class="kw1">function</span><span class="br0">&#40;</span>testCase<span class="br0">&#41;</span><span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">var</span> testName <span class="sy0">=</span> testCase.<span class="me1">name</span> <span class="sy0">+</span> <span class="st0">': is a '</span> <span class="sy0">+</span> <span class="br0">&#40;</span>testCase.<span class="me1">isError</span> <span class="sy0">?</span> <span class="st0">'validation error'</span> <span class="sy0">:</span> <span class="st0">'successful input'</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; it<span class="br0">&#40;</span>testName<span class="sy0">,</span> <span class="kw1">function</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">var</span> testField <span class="sy0">=</span> ko.<span class="me1">observable</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">var</span> presentableTestField <span class="sy0">=</span> testField.<span class="me1">extend</span><span class="br0">&#40;</span><span class="br0">&#123;</span> validate<span class="sy0">:</span> testCase.<span class="me1">options</span> <span class="br0">&#125;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; presentableTestField<span class="br0">&#40;</span>testCase.<span class="me1">input</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; expect<span class="br0">&#40;</span>presentableTestField.<span class="me1">validation</span><span class="br0">&#40;</span><span class="br0">&#41;</span>.<span class="me1">isError</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#41;</span>.<span class="me1">toBe</span><span class="br0">&#40;</span>testCase.<span class="me1">isError</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; <span class="br0">&#125;</span><span class="br0">&#41;</span><span class="sy0">;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">	describe('boundary tests', function(){
	
		var testCases = [
			{ name: 'currency input - less than min',	options: { type: currencyType, min: 0, max: 10 }, input: '-.5', isError: true },
			{ name: 'currency input - min length',		options: { type: currencyType, min: 0, max: 10 }, input: '0', isError: false },
			{ name: 'currency input - more than min',	options: { type: currencyType, min: 0, max: 10 }, input: '2.5', isError: false },
			{ name: 'currency input - less than max',	options: { type: currencyType, min: 0, max: 10 }, input: '7.5', isError: false },
			{ name: 'currency input - max',				options: { type: currencyType, min: 0, max: 10 }, input: '10', isError: false },
			{ name: 'currency input - more than max',	options: { type: currencyType, min: 0, max: 10 }, input: '10.5', isError: true },

			…
			
			{ name: 'string input - longer than max',	options: { type: stringType, min: 5, max: 8 }, input: '123456789', isError: true },

		];

		testCases.forEach(function(testCase){
			var testName = testCase.name + ': is a ' + (testCase.isError ? 'validation error' : 'successful input');

			it(testName, function(){
				var testField = ko.observable();
				var presentableTestField = testField.extend({ validate: testCase.options });

				presentableTestField(testCase.input);

				expect(presentableTestField.validation().isError()).toBe(testCase.isError);
			});
		});

	});</pre></div></div>

<p>We have a common component that handles all input logic that is governed by each type, so now our tests focus just on the collision of the types and input logic. Rather than require our teammates to enter tests every time they re-use a type for a new field in a completely expected way, we now only need to add tests when they want to add in some custom validation specific to that field, getting the value from the boundary testing while minimizing the cost. </p>
<h2>But that&#8217;s not real user input?</h2>
<p>That&#8217;s true, it isn&#8217;t. And since we already put some thought into our abstraction of the user input logic, it&#8217;s possible this won&#8217;t catch any errors that a unit test would miss. On the other hand, had we included the validation and formatting as attributes in the HTML, not only would we have a lot of duplication of effort, this would have required us to pull out our UI automation frameworks, with all the performance and ongoing maintenance costs that assumes. Instead, we can implement boundary testing fairly cheaply even if we thin it might be overkill, and let it run with our unit test suite at unit test speeds. The only gap that real user inputs would add, at far higher cost, is whether we had bound the UI component correctly to the input behind the scenes, which feels like another class of problem which would have effect reaching far beyond boundary conditions and probably <a href="/index.php/webdev/using-selenium-for-view-testing-with-knockout-and-requirejs/" title="Using Selenium for View testing with knockout and RequireJS">should be tested on it&#8217;s own</a>.</p>
]]></content:encoded>
			<wfw:commentRss>/index.php/webdev/easier-boundary-testing-keep-parsevalidationformat-rules-out-of-your-html-view/feed/</wfw:commentRss>
		<slash:comments>0</slash:comments>
		</item>
		<item>
		<title>MVVM &#8211; The User as an Asynchronous API (w/ Knockout)</title>
		<link>/index.php/webdev/mvvm-the-user-as-an-asynchronous-api/</link>
		<comments>/index.php/webdev/mvvm-the-user-as-an-asynchronous-api/#respond</comments>
		<pubDate>Fri, 18 Mar 2016 12:38:37 +0000</pubDate>
		<dc:creator><![CDATA[Eli Weinstock-Herman (tarwn)]]></dc:creator>
				<category><![CDATA[Web Developer]]></category>
		<category><![CDATA[knockout]]></category>
		<category><![CDATA[mvvm]]></category>
		<category><![CDATA[Promises]]></category>

		<guid isPermaLink="false">/?p=4438</guid>
		<description><![CDATA[Early into development of a fairly large modular SPA, we found ourselves needing to ask the user a series of complex questions during a complex chain of business logic. We built a quick little ViewModel and template to display to the user, added some assignable callbacks that it would generate buttons for, and called it [&#8230;]]]></description>
				<content:encoded><![CDATA[<p>Early into development of a fairly large modular SPA, we found ourselves needing to ask the user a series of complex questions during a complex chain of business logic. We built a quick little ViewModel and template to display to the user, added some assignable callbacks that it would generate buttons for, and called it good.</p>
<p>Except it wasn&#8217;t.</p>
<p>The first issue we ran into was the difficulty in writing tests around this already incredibly complex business case and trying to fake expected user interaction with the callbacks. The next issue was how difficult it was for the next developer (and sometimes just us, a week later) to figure out which magic properties had to be set for dialogs to work correctly. Then we noticed that debugging was about 100x harder than we expected. So we went back to the drawing board.</p>
<p>Somewhere between looking into examples that use promises and talking through how a perfect test would look, we came upon something profound (to us at least): &#8220;the user is an asynchronous API&#8221;.</p>
<div style="background-color: #eeeeee; margin: .5em; margin-bottom: 1.5em; padding: .5em">Like the <a href="/index.php/webdev/mvvm-validation-with-knockoutjs-dont-put-it-in-the-viewhtml/" title="MVVM Validation with KnockoutJS – Don’t put it in the View/HTML">prior post</a>, the &#8220;Large modular SPA&#8221; in this case was a complete replatform of a 300+ KLOC Silverlight application with 30+ discrete screens ranging from &#8220;simple&#8221; in-screen search results that make IE tables weep, to complex SVG dashboards, to a multi-tabbed screen that can scale from 50 inputs to 1000&#8217;s, depending on the complexity of the user and their use case. </div>
<p>Th fulle sample code for these posts is on github here: <a href="https://github.com/tarwn/Blog_KnockoutMVVMPatterns/tree/master/userDialogs" title="tarwn/Blog_KnockoutMVVMPatterns/tree/master/userDialogs on github">tarwn/Blog_KnockoutMVVMPatterns</a></p>
<h2>An Example of Promises and API calls</h2>
<p>Let&#8217;s start with a sample of what it looks like when we call a regular server-side API.</p>
<div id="attachment_4454" style="width: 439px" class="wp-caption aligncenter"><a href="/wp-content/uploads/2016/03/ShippingForm.png"><img src="/wp-content/uploads/2016/03/ShippingForm.png" alt="Sample Shipping Address Form" width="429" height="299" class="size-full wp-image-4454" srcset="/wp-content/uploads/2016/03/ShippingForm.png 429w, /wp-content/uploads/2016/03/ShippingForm-300x209.png 300w" sizes="(max-width: 429px) 100vw, 429px" /></a><p class="wp-caption-text">Sample Shipping Address Form</p></div>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="html4strict"><thead><tr><td colspan="2"  class="head">HTML</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
</pre></td><td class="de1"><pre class="de1"><span class="sc2">&lt;<span class="kw2">h1</span>&gt;</span>A Basic Form + Fake API Call (Save Button)<span class="sc2">&lt;<span class="sy0">/</span><span class="kw2">h1</span>&gt;</span>
<span class="sc2">&lt;<span class="kw2">div</span> <span class="kw3">class</span><span class="sy0">=</span><span class="st0">&quot;form-area&quot;</span> data-bind<span class="sy0">=</span><span class="st0">&quot;with: shippingForm&quot;</span>&gt;</span>
&nbsp; &nbsp; <span class="sc2">&lt;<span class="kw2">h3</span>&gt;</span>Shipping Information<span class="sc2">&lt;<span class="sy0">/</span><span class="kw2">h3</span>&gt;</span>
&nbsp;
&nbsp; &nbsp; <span class="sc2">&lt;<span class="kw2">label</span> <span class="kw3">for</span><span class="sy0">=</span><span class="st0">&quot;txtName&quot;</span>&gt;</span>Name<span class="sc2">&lt;<span class="sy0">/</span><span class="kw2">label</span>&gt;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="sc2">&lt;<span class="kw2">input</span> <span class="kw3">type</span><span class="sy0">=</span><span class="st0">&quot;text&quot;</span> <span class="kw3">id</span><span class="sy0">=</span><span class="st0">&quot;txtName&quot;</span> data-bind<span class="sy0">=</span><span class="st0">&quot;value: newEntry().name&quot;</span> <span class="sy0">/</span>&gt;&lt;<span class="kw2">br</span> <span class="sy0">/</span>&gt;</span>
&nbsp;
&nbsp; &nbsp; <span class="sc-1">&lt;!-- ... etc ... --&gt;</span>
&nbsp;
&nbsp; &nbsp; <span class="sc2">&lt;<span class="kw2">div</span> <span class="kw3">class</span><span class="sy0">=</span><span class="st0">&quot;button-strip&quot;</span>&gt;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="sc2">&lt;<span class="kw2">input</span> <span class="kw3">type</span><span class="sy0">=</span><span class="st0">&quot;button&quot;</span> data-bind<span class="sy0">=</span><span class="st0">&quot;click: save, disable: isSaving, value: saveText&quot;</span> <span class="sy0">/</span>&gt;</span>
&nbsp; &nbsp; <span class="sc2">&lt;<span class="sy0">/</span><span class="kw2">div</span>&gt;</span>
<span class="sc2">&lt;<span class="sy0">/</span><span class="kw2">div</span>&gt;</span>
&nbsp;
<span class="sc2">&lt;<span class="kw2">script</span> <span class="kw3">type</span><span class="sy0">=</span><span class="st0">&quot;text/javascript&quot;</span>&gt;</span>
&nbsp;
//- Shipping Form Example
function ShippingFormViewModel(dataService){
&nbsp; &nbsp; var self = this;
&nbsp;
&nbsp; &nbsp; // ...
&nbsp;
&nbsp; &nbsp; self.save = function(){
&nbsp; &nbsp; &nbsp; &nbsp; if(self.isSaving())
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; return;
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; self.isSaving(true);
&nbsp; &nbsp; &nbsp; &nbsp; self.saveStatus(&quot;Saving...&quot;);
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; dataService.saveShippingAddress(self.newEntry())
&nbsp; &nbsp; &nbsp; &nbsp; .then(function(status){
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; self.isSaving(false);
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; self.saveStatus(status);
&nbsp; &nbsp; &nbsp; &nbsp; })
&nbsp; &nbsp; &nbsp; &nbsp; 
&nbsp; &nbsp; &nbsp; &nbsp; // ...
&nbsp; &nbsp; };
}
&nbsp;
<span class="sc2">&lt;<span class="sy0">/</span><span class="kw2">script</span>&gt;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">&lt;h1&gt;A Basic Form + Fake API Call (Save Button)&lt;/h1&gt;
&lt;div class="form-area" data-bind="with: shippingForm"&gt;
	&lt;h3&gt;Shipping Information&lt;/h3&gt;

	&lt;label for="txtName"&gt;Name&lt;/label&gt;
		&lt;input type="text" id="txtName" data-bind="value: newEntry().name" /&gt;&lt;br /&gt;

	&lt;!-- ... etc ... --&gt;

	&lt;div class="button-strip"&gt;
		&lt;input type="button" data-bind="click: save, disable: isSaving, value: saveText" /&gt;
	&lt;/div&gt;
&lt;/div&gt;

&lt;script type="text/javascript"&gt;

//- Shipping Form Example
function ShippingFormViewModel(dataService){
	var self = this;

	// ...

	self.save = function(){
		if(self.isSaving())
			return;

		self.isSaving(true);
		self.saveStatus("Saving...");

		dataService.saveShippingAddress(self.newEntry())
		.then(function(status){
			self.isSaving(false);
			self.saveStatus(status);
		})
		
		// ...
	};
}

&lt;/script&gt;</pre></div></div>

<p>Clicking the &#8220;Save&#8221; button updates some local values that will be used to modify the display, then calls saveShippingAddress on the service, which returns a promise. Once that service call is complete and the promise is resolved successfully, the display is updated again accordingly. </p>
<p>A test for the save method could then look like this:</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="javascript"><thead><tr><td colspan="2"  class="head">Javascript</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
</pre></td><td class="de1"><pre class="de1">it<span class="br0">&#40;</span><span class="st0">&quot;clears saving status when server save is successful&quot;</span><span class="sy0">,</span> <span class="kw1">function</span><span class="br0">&#40;</span>done<span class="br0">&#41;</span><span class="br0">&#123;</span>
&nbsp; &nbsp; <span class="co1">// arrange</span>
&nbsp; &nbsp; <span class="kw1">var</span> fakeService <span class="sy0">=</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; saveShippingAddress<span class="sy0">:</span> <span class="kw1">function</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#123;</span> <span class="kw1">return</span> Promise.<span class="me1">resolve</span><span class="br0">&#40;</span><span class="st0">'Success'</span><span class="br0">&#41;</span><span class="sy0">;</span> <span class="br0">&#125;</span>
&nbsp; &nbsp; <span class="br0">&#125;</span><span class="sy0">;</span>
&nbsp; &nbsp; <span class="kw1">var</span> vm <span class="sy0">=</span> <span class="kw1">new</span> ShippingFormViewModel<span class="br0">&#40;</span>fakeService<span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; <span class="co1">// act</span>
&nbsp; &nbsp; <span class="kw1">var</span> afterSave <span class="sy0">=</span> vm.<span class="me1">save</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; 
&nbsp; &nbsp; <span class="co1">// assert</span>
&nbsp; &nbsp; afterSave.<span class="me1">then</span><span class="br0">&#40;</span><span class="kw1">function</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#123;</span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 
&nbsp; &nbsp; &nbsp; &nbsp; expect<span class="br0">&#40;</span>vm.<span class="me1">saveStatus</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#41;</span>.<span class="me1">toBeNull</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; expect<span class="br0">&#40;</span>vm.<span class="me1">isSaving</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#41;</span>.<span class="me1">toBe</span><span class="br0">&#40;</span><span class="kw2">false</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; <span class="br0">&#125;</span><span class="br0">&#41;</span>.<span class="kw1">finally</span><span class="br0">&#40;</span>done<span class="sy0">,</span> done.<span class="me1">fail</span><span class="br0">&#41;</span><span class="sy0">;</span>
<span class="br0">&#125;</span><span class="br0">&#41;</span><span class="sy0">;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">it("clears saving status when server save is successful", function(done){
	// arrange
	var fakeService = {
		saveShippingAddress: function(){ return Promise.resolve('Success'); }
	};
	var vm = new ShippingFormViewModel(fakeService);

	// act
	var afterSave = vm.save();
	
	// assert
	afterSave.then(function(){			
		expect(vm.saveStatus()).toBeNull();
		expect(vm.isSaving()).toBe(false);
	}).finally(done, done.fail);
});</pre></div></div>

<p>The services are passed into the ViewModel when it&#8217;s created, keeping that logic separate and easy to maintain or change. We can write unit tests that pass in a fake version of the service, ready to pass a specific good or bad result, and ensure our business logic in the ViewModel continues to match our intent as the rest of the team extends it.</p>
<h2>Promises and User Dialogs</h2>
<p>The services for an API call are built as injectable components that we can easily fake and pre-program with good and bad responses for tests. After throwing out all the mess we did with objects with magic callback properties, label collections, and so on, we realized that asking the user a question is basically the same thing and we could build a similar looking component to abstract that away from our logic.</p>
<p>In this example, we are displaying a list of past orders and giving the user an opportunity to quickly reorder. </p>
<div id="attachment_4455" style="width: 426px" class="wp-caption aligncenter"><a href="/wp-content/uploads/2016/03/OrderForm.png"><img src="/wp-content/uploads/2016/03/OrderForm.png" alt="Sample Reorder Form" width="416" height="283" class="size-full wp-image-4455" srcset="/wp-content/uploads/2016/03/OrderForm.png 416w, /wp-content/uploads/2016/03/OrderForm-300x204.png 300w" sizes="(max-width: 416px) 100vw, 416px" /></a><p class="wp-caption-text">Sample Reorder Form</p></div>
<p>However, we have a business case that requires we check that each of those products is still supported before placing the re-order. If any are no longer available, we need to ask the user to choose to leave that product off their reorder or choose one of several alternatives.</p>
<div id="attachment_4456" style="width: 421px" class="wp-caption aligncenter"><a href="/wp-content/uploads/2016/03/ReorderFlow.png"><img src="/wp-content/uploads/2016/03/ReorderFlow.png" alt="Reorder Logic" width="411" height="565" class="size-full wp-image-4456" srcset="/wp-content/uploads/2016/03/ReorderFlow.png 411w, /wp-content/uploads/2016/03/ReorderFlow-218x300.png 218w" sizes="(max-width: 411px) 100vw, 411px" /></a><p class="wp-caption-text">Reorder Logic</p></div>
<p>Here is what the reorder function looks like with both the user and API treated as services:</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="javascript"><thead><tr><td colspan="2"  class="head">Javascript</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
</pre></td><td class="de1"><pre class="de1">self.<span class="me1">reorder</span> <span class="sy0">=</span> <span class="kw1">function</span><span class="br0">&#40;</span>priorOrder<span class="br0">&#41;</span><span class="br0">&#123;</span>
&nbsp; &nbsp; <span class="kw1">var</span> newOrder <span class="sy0">=</span> <span class="kw1">new</span> OrderModel<span class="br0">&#40;</span><span class="br0">&#123;</span> id<span class="sy0">:</span> <span class="st0">'pending'</span><span class="sy0">,</span> contents<span class="sy0">:</span><span class="br0">&#91;</span><span class="br0">&#93;</span><span class="sy0">,</span> price<span class="sy0">:</span> <span class="nu0">0</span> <span class="br0">&#125;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; self.<span class="me1">isReordering</span><span class="br0">&#40;</span><span class="kw2">true</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; <span class="co1">//= 1: begin checks on each product to verify we have stock for each of them</span>
&nbsp; &nbsp; <span class="kw1">var</span> stockChecks <span class="sy0">=</span> priorOrder.<span class="me1">contents</span><span class="br0">&#40;</span><span class="br0">&#41;</span>.<span class="me1">map</span><span class="br0">&#40;</span><span class="kw1">function</span><span class="br0">&#40;</span>product<span class="br0">&#41;</span><span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">return</span> dataService.<span class="me1">verifyStock</span><span class="br0">&#40;</span>product<span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; <span class="br0">&#125;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; <span class="co1">//= 2: add 'in stock' items to list, ask user about out of stock products</span>
&nbsp; &nbsp; Promise.<span class="me1">all</span><span class="br0">&#40;</span>stockChecks<span class="br0">&#41;</span>
&nbsp; &nbsp; .<span class="me1">then</span><span class="br0">&#40;</span><span class="kw1">function</span><span class="br0">&#40;</span>results<span class="br0">&#41;</span><span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="co1">//= 2.1: add 'in stock' products to the new order</span>
&nbsp; &nbsp; &nbsp; &nbsp; results.<span class="me1">filter</span><span class="br0">&#40;</span><span class="kw1">function</span><span class="br0">&#40;</span>result<span class="br0">&#41;</span><span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">if</span><span class="br0">&#40;</span>result.<span class="me1">status</span> <span class="sy0">==</span> <span class="st0">'in stock'</span><span class="br0">&#41;</span><span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; newOrder.<span class="me1">contents</span>.<span class="me1">push</span><span class="br0">&#40;</span>result.<span class="me1">product</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; <span class="co1">//= 2.2: Pass the list of 'out of stock' products to the next step to determine alternatives</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">var</span> outOfStockResults <span class="sy0">=</span> results.<span class="me1">filter</span><span class="br0">&#40;</span><span class="kw1">function</span><span class="br0">&#40;</span>result<span class="br0">&#41;</span><span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">return</span> result.<span class="me1">status</span> <span class="sy0">==</span> <span class="st0">'out of stock'</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">return</span> outOfStockResults<span class="sy0">;</span>
&nbsp; &nbsp; <span class="br0">&#125;</span><span class="br0">&#41;</span>
&nbsp; &nbsp; .<span class="me1">then</span><span class="br0">&#40;</span><span class="kw1">function</span><span class="br0">&#40;</span>outOfStockResults<span class="br0">&#41;</span><span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="co1">//= 3: If there are 'out of stock' products, ask the user what to do for each of them</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">if</span><span class="br0">&#40;</span>outOfStockResults.<span class="me1">length</span> <span class="sy0">&gt;</span> <span class="nu0">0</span><span class="br0">&#41;</span><span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">return</span> userDialogService.<span class="me1">askAboutOutOfStockProductAlternatives</span><span class="br0">&#40;</span>outOfStockResults<span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; .<span class="me1">then</span><span class="br0">&#40;</span><span class="kw1">function</span><span class="br0">&#40;</span>answers<span class="br0">&#41;</span><span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">if</span><span class="br0">&#40;</span>answers <span class="sy0">==</span> <span class="st0">'cancel'</span><span class="br0">&#41;</span><span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="co1">//= 3.1: if the user cancelled, cancel the order</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; newOrder <span class="sy0">=</span> <span class="kw2">null</span><span class="sy0">;</span>&nbsp; &nbsp; 
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">else</span><span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="co1">//= 3.2 if alternatives were chosen, add them to the order</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; answers.<span class="me1">forEach</span><span class="br0">&#40;</span><span class="kw1">function</span><span class="br0">&#40;</span>selectedChoice<span class="br0">&#41;</span><span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">if</span><span class="br0">&#40;</span>selectedChoice <span class="sy0">!=</span> <span class="kw2">null</span><span class="br0">&#41;</span><span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; newOrder.<span class="me1">contents</span>.<span class="me1">push</span><span class="br0">&#40;</span>selectedChoice.<span class="me1">product</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp; &nbsp; <span class="br0">&#125;</span><span class="br0">&#41;</span>
&nbsp; &nbsp; .<span class="me1">then</span><span class="br0">&#40;</span><span class="kw1">function</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="co1">//= 4: the order hasn't been cancelled, add it to the order list</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">if</span><span class="br0">&#40;</span>newOrder <span class="sy0">!=</span> <span class="kw2">null</span><span class="br0">&#41;</span><span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; self.<span class="me1">orders</span>.<span class="me1">unshift</span><span class="br0">&#40;</span>newOrder<span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp; &nbsp; &nbsp; &nbsp; self.<span class="me1">isReordering</span><span class="br0">&#40;</span><span class="kw2">false</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; <span class="br0">&#125;</span><span class="br0">&#41;</span><span class="sy0">;</span>
<span class="br0">&#125;</span><span class="sy0">;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">self.reorder = function(priorOrder){
	var newOrder = new OrderModel({ id: 'pending', contents:[], price: 0 });
	self.isReordering(true);

	//= 1: begin checks on each product to verify we have stock for each of them
	var stockChecks = priorOrder.contents().map(function(product){
		return dataService.verifyStock(product);
	});

	//= 2: add 'in stock' items to list, ask user about out of stock products
	Promise.all(stockChecks)
	.then(function(results){
		//= 2.1: add 'in stock' products to the new order
		results.filter(function(result){
			if(result.status == 'in stock'){
				newOrder.contents.push(result.product);
			}
		});

		//= 2.2: Pass the list of 'out of stock' products to the next step to determine alternatives
		var outOfStockResults = results.filter(function(result){
			return result.status == 'out of stock';
		});

		return outOfStockResults;
	})
	.then(function(outOfStockResults){
		//= 3: If there are 'out of stock' products, ask the user what to do for each of them
		if(outOfStockResults.length &gt; 0){
			return userDialogService.askAboutOutOfStockProductAlternatives(outOfStockResults)
			.then(function(answers){
				if(answers == 'cancel'){
					//= 3.1: if the user cancelled, cancel the order
					newOrder = null;	
				}
				else{
					//= 3.2 if alternatives were chosen, add them to the order
					answers.forEach(function(selectedChoice){
						if(selectedChoice != null){
							newOrder.contents.push(selectedChoice.product);
						}
					});
				}
			});
		}
	})
	.then(function(){
		//= 4: the order hasn't been cancelled, add it to the order list
		if(newOrder != null){
			self.orders.unshift(newOrder);
		}
		self.isReordering(false);
	});
};</pre></div></div>

<p>Writing tests for the user dialog looks just the same as for the API.</p>
<p>We can test that the user is given choices and those choices are used for the new order:</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="javascript"><thead><tr><td colspan="2"  class="head">Javascript</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
</pre></td><td class="de1"><pre class="de1">it<span class="br0">&#40;</span><span class="st0">&quot;creates the order with the user alternatives for out of stock products when options are selected&quot;</span><span class="sy0">,</span> <span class="kw1">function</span><span class="br0">&#40;</span>done<span class="br0">&#41;</span><span class="br0">&#123;</span>
&nbsp; &nbsp; <span class="co1">// arrange</span>
&nbsp; &nbsp; <span class="kw1">var</span> altProduct <span class="sy0">=</span> <span class="br0">&#123;</span> product<span class="sy0">:</span> <span class="st0">'JKL'</span><span class="br0">&#125;</span><span class="sy0">;</span>
&nbsp; &nbsp; <span class="kw1">var</span> fakeDataService <span class="sy0">=</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; verifyStock<span class="sy0">:</span> <span class="kw1">function</span><span class="br0">&#40;</span>product<span class="br0">&#41;</span><span class="br0">&#123;</span> 
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">return</span> Promise.<span class="me1">resolve</span><span class="br0">&#40;</span><span class="br0">&#123;</span> product<span class="sy0">:</span> product<span class="sy0">,</span> status<span class="sy0">:</span> <span class="st0">'out of stock'</span><span class="sy0">,</span> alternatives<span class="sy0">:</span> <span class="br0">&#91;</span> altProduct <span class="br0">&#93;</span> <span class="br0">&#125;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp; &nbsp; <span class="br0">&#125;</span><span class="sy0">;</span>
&nbsp; &nbsp; <span class="kw1">var</span> fakeUserService <span class="sy0">=</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; askAboutOutOfStockProductAlternatives<span class="sy0">:</span> <span class="kw1">function</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#123;</span> <span class="kw1">return</span> Promise.<span class="me1">resolve</span><span class="br0">&#40;</span><span class="br0">&#91;</span>altProduct<span class="sy0">,</span> altProduct<span class="sy0">,</span> altProduct<span class="br0">&#93;</span><span class="br0">&#41;</span><span class="sy0">;</span> <span class="br0">&#125;</span>
&nbsp; &nbsp; <span class="br0">&#125;</span><span class="sy0">;</span>
&nbsp; &nbsp; <span class="kw1">var</span> sampleOrder <span class="sy0">=</span> <span class="br0">&#123;</span> id<span class="sy0">:</span> <span class="st0">'1'</span><span class="sy0">,</span> price<span class="sy0">:</span> <span class="nu0">2</span><span class="sy0">,</span> contents<span class="sy0">:</span> <span class="br0">&#91;</span> <span class="st0">'ABC'</span><span class="sy0">,</span> <span class="st0">'DEF'</span><span class="sy0">,</span> <span class="st0">'GHI'</span> <span class="br0">&#93;</span> <span class="br0">&#125;</span><span class="sy0">;</span>
&nbsp; &nbsp; <span class="kw1">var</span> vm <span class="sy0">=</span> <span class="kw1">new</span> OrderHistoryViewModel<span class="br0">&#40;</span>fakeDataService<span class="sy0">,</span> fakeUserService<span class="sy0">,</span> <span class="br0">&#91;</span> sampleOrder <span class="br0">&#93;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; <span class="co1">// act</span>
&nbsp; &nbsp; <span class="kw1">var</span> afterReorder <span class="sy0">=</span> vm.<span class="me1">reorder</span><span class="br0">&#40;</span>vm.<span class="me1">orders</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#91;</span><span class="nu0">0</span><span class="br0">&#93;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; 
&nbsp; &nbsp; <span class="co1">// assert</span>
&nbsp; &nbsp; afterReorder.<span class="me1">then</span><span class="br0">&#40;</span><span class="kw1">function</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; expect<span class="br0">&#40;</span>vm.<span class="me1">orders</span><span class="br0">&#40;</span><span class="br0">&#41;</span>.<span class="me1">length</span><span class="br0">&#41;</span>.<span class="me1">toBe</span><span class="br0">&#40;</span><span class="nu0">2</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; expect<span class="br0">&#40;</span>vm.<span class="me1">orders</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#91;</span><span class="nu0">1</span><span class="br0">&#93;</span>.<span class="me1">contents</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#41;</span>.<span class="me1">toEqual</span><span class="br0">&#40;</span>sampleOrder.<span class="me1">contents</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; expect<span class="br0">&#40;</span>vm.<span class="me1">orders</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#91;</span><span class="nu0">0</span><span class="br0">&#93;</span>.<span class="me1">contents</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#41;</span>.<span class="me1">toEqual</span><span class="br0">&#40;</span><span class="br0">&#91;</span>altProduct.<span class="me1">product</span><span class="sy0">,</span> altProduct.<span class="me1">product</span><span class="sy0">,</span> altProduct.<span class="me1">product</span><span class="br0">&#93;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; <span class="br0">&#125;</span><span class="br0">&#41;</span>.<span class="kw1">finally</span><span class="br0">&#40;</span>done<span class="sy0">,</span> done.<span class="me1">fail</span><span class="br0">&#41;</span><span class="sy0">;</span>
<span class="br0">&#125;</span><span class="br0">&#41;</span><span class="sy0">;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">it("creates the order with the user alternatives for out of stock products when options are selected", function(done){
	// arrange
	var altProduct = { product: 'JKL'};
	var fakeDataService = {
		verifyStock: function(product){ 
			return Promise.resolve({ product: product, status: 'out of stock', alternatives: [ altProduct ] });
		}
	};
	var fakeUserService = {
		askAboutOutOfStockProductAlternatives: function(){ return Promise.resolve([altProduct, altProduct, altProduct]); }
	};
	var sampleOrder = { id: '1', price: 2, contents: [ 'ABC', 'DEF', 'GHI' ] };
	var vm = new OrderHistoryViewModel(fakeDataService, fakeUserService, [ sampleOrder ]);

	// act
	var afterReorder = vm.reorder(vm.orders()[0]);
	
	// assert
	afterReorder.then(function(){
		expect(vm.orders().length).toBe(2);
		expect(vm.orders()[1].contents()).toEqual(sampleOrder.contents);
		expect(vm.orders()[0].contents()).toEqual([altProduct.product, altProduct.product, altProduct.product]);
	}).finally(done, done.fail);
});</pre></div></div>

<p>We can also test that we&#8217;re handling the user cancelling the dialog the way we want to:</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="javascript"><thead><tr><td colspan="2"  class="head">Javascript</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
</pre></td><td class="de1"><pre class="de1">it<span class="br0">&#40;</span><span class="st0">&quot;cancels the order when the user cancels the dialog&quot;</span><span class="sy0">,</span> <span class="kw1">function</span><span class="br0">&#40;</span>done<span class="br0">&#41;</span><span class="br0">&#123;</span>
&nbsp; &nbsp; <span class="co1">// arrange</span>
&nbsp; &nbsp; <span class="kw1">var</span> altProduct <span class="sy0">=</span> <span class="br0">&#123;</span> product<span class="sy0">:</span> <span class="st0">'JKL'</span><span class="br0">&#125;</span><span class="sy0">;</span>
&nbsp; &nbsp; <span class="kw1">var</span> fakeDataService <span class="sy0">=</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; verifyStock<span class="sy0">:</span> <span class="kw1">function</span><span class="br0">&#40;</span>product<span class="br0">&#41;</span><span class="br0">&#123;</span> 
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">return</span> Promise.<span class="me1">resolve</span><span class="br0">&#40;</span><span class="br0">&#123;</span> product<span class="sy0">:</span> product<span class="sy0">,</span> status<span class="sy0">:</span> <span class="st0">'out of stock'</span><span class="sy0">,</span> alternatives<span class="sy0">:</span> <span class="br0">&#91;</span> altProduct <span class="br0">&#93;</span> <span class="br0">&#125;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp; &nbsp; <span class="br0">&#125;</span><span class="sy0">;</span>
&nbsp; &nbsp; <span class="kw1">var</span> fakeUserService <span class="sy0">=</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; askAboutOutOfStockProductAlternatives<span class="sy0">:</span> <span class="kw1">function</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#123;</span> <span class="kw1">return</span> Promise.<span class="me1">resolve</span><span class="br0">&#40;</span><span class="st0">'cancel'</span><span class="br0">&#41;</span><span class="sy0">;</span> <span class="br0">&#125;</span>
&nbsp; &nbsp; <span class="br0">&#125;</span><span class="sy0">;</span>
&nbsp; &nbsp; <span class="kw1">var</span> sampleOrder <span class="sy0">=</span> <span class="br0">&#123;</span> id<span class="sy0">:</span> <span class="st0">'1'</span><span class="sy0">,</span> price<span class="sy0">:</span> <span class="nu0">2</span><span class="sy0">,</span> contents<span class="sy0">:</span> <span class="br0">&#91;</span> <span class="st0">'ABC'</span><span class="sy0">,</span> <span class="st0">'DEF'</span><span class="sy0">,</span> <span class="st0">'GHI'</span> <span class="br0">&#93;</span> <span class="br0">&#125;</span><span class="sy0">;</span>
&nbsp; &nbsp; <span class="kw1">var</span> vm <span class="sy0">=</span> <span class="kw1">new</span> OrderHistoryViewModel<span class="br0">&#40;</span>fakeDataService<span class="sy0">,</span> fakeUserService<span class="sy0">,</span> <span class="br0">&#91;</span> sampleOrder <span class="br0">&#93;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; <span class="co1">// act</span>
&nbsp; &nbsp; <span class="kw1">var</span> afterReorder <span class="sy0">=</span> vm.<span class="me1">reorder</span><span class="br0">&#40;</span>vm.<span class="me1">orders</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#91;</span><span class="nu0">0</span><span class="br0">&#93;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; 
&nbsp; &nbsp; <span class="co1">// assert</span>
&nbsp; &nbsp; afterReorder.<span class="me1">then</span><span class="br0">&#40;</span><span class="kw1">function</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; expect<span class="br0">&#40;</span>vm.<span class="me1">orders</span><span class="br0">&#40;</span><span class="br0">&#41;</span>.<span class="me1">length</span><span class="br0">&#41;</span>.<span class="me1">toBe</span><span class="br0">&#40;</span><span class="nu0">1</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; <span class="br0">&#125;</span><span class="br0">&#41;</span>.<span class="kw1">finally</span><span class="br0">&#40;</span>done<span class="sy0">,</span> done.<span class="me1">fail</span><span class="br0">&#41;</span><span class="sy0">;</span>
<span class="br0">&#125;</span><span class="br0">&#41;</span><span class="sy0">;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">it("cancels the order when the user cancels the dialog", function(done){
	// arrange
	var altProduct = { product: 'JKL'};
	var fakeDataService = {
		verifyStock: function(product){ 
			return Promise.resolve({ product: product, status: 'out of stock', alternatives: [ altProduct ] });
		}
	};
	var fakeUserService = {
		askAboutOutOfStockProductAlternatives: function(){ return Promise.resolve('cancel'); }
	};
	var sampleOrder = { id: '1', price: 2, contents: [ 'ABC', 'DEF', 'GHI' ] };
	var vm = new OrderHistoryViewModel(fakeDataService, fakeUserService, [ sampleOrder ]);

	// act
	var afterReorder = vm.reorder(vm.orders()[0]);
	
	// assert
	afterReorder.then(function(){
		expect(vm.orders().length).toBe(1);
	}).finally(done, done.fail);
});</pre></div></div>

<p>The full sample implementation, including a working (but not production ready) dialog can be found here: <a href="https://github.com/tarwn/Blog_KnockoutMVVMPatterns/tree/master/userDialogs" title="tarwn/Blog_KnockoutMVVMPatterns/tree/master/userDialogs on github">github: tarwn/Blog_KnockoutMVVMPatterns/tree/master/userDialogs</a></p>
<h2>The User is an Asynchronous API</h2>
<p>MVVM treats everything as a contract or service, whether it&#8217;s the surface it exposes to the View to be displayed, the methods that are exposed to the View to be called, or the API the ViewModel consumes to call remote services. Abstracting user dialogs as another asynchronous service makes the flow of the business logic cleaner and easier to test, while freeing us to work mostly independently on getting the mechanics and design of the user dialog experience the way we want.</p>
]]></content:encoded>
			<wfw:commentRss>/index.php/webdev/mvvm-the-user-as-an-asynchronous-api/feed/</wfw:commentRss>
		<slash:comments>0</slash:comments>
		</item>
		<item>
		<title>AngularJS vs Knockout &#8211; Introduction (1 of 8)</title>
		<link>/index.php/webdev/uidevelopment/angularjs-vs-knockout-introduction-1/</link>
		<comments>/index.php/webdev/uidevelopment/angularjs-vs-knockout-introduction-1/#comments</comments>
		<pubDate>Mon, 07 Oct 2013 17:39:00 +0000</pubDate>
		<dc:creator><![CDATA[Eli Weinstock-Herman (tarwn)]]></dc:creator>
				<category><![CDATA[Javascript]]></category>
		<category><![CDATA[UI Development]]></category>
		<category><![CDATA[$script.js]]></category>
		<category><![CDATA[angularjs]]></category>
		<category><![CDATA[director]]></category>
		<category><![CDATA[durandal]]></category>
		<category><![CDATA[finch]]></category>
		<category><![CDATA[jasmine]]></category>
		<category><![CDATA[knockout]]></category>
		<category><![CDATA[mvc]]></category>
		<category><![CDATA[mvvm]]></category>
		<category><![CDATA[requirejs]]></category>
		<category><![CDATA[sammyjs]]></category>

		<guid isPermaLink="false">/index.php/2013/10/angularjs-vs-knockout-introduction-1/</guid>
		<description><![CDATA[I'm reviewing Angular and Knockout to determine which would fit better for a variety of upcoming projects. There are already plenty of posts out there comparing AngularJS and Knockout. I have been slowly reading through all the comparisons I could find, but unfortunately I keep running into cases where the posts are too high level, miss capabilities I need, or have errors that undermine my trust in the rest of the post.]]></description>
				<content:encoded><![CDATA[<p>I&#8217;m reviewing Angular and Knockout to determine which would fit better for a variety of upcoming projects. There are already plenty of posts out there comparing <a href="http://angularjs.org/">AngularJS</a> and <a href="http://knockoutjs.com/">Knockout</a>. I have been slowly reading through all the comparisons I could find, but unfortunately I keep running into cases where the posts are too high level, miss capabilities I need, or have errors that undermine my trust in the rest of the post. </p>
<p>The thing is, Knockout and AngularJS are attempting to solve two different problems. One is simply an MVVM binding framework, the other is a SPA-in-a-box solution. So instead of trying to directly compare the two frameworks, I&#8217;ve outlined the capabilities I need and will review how well each of the frameworks meets those capabilities. Where one library does not meet a particular set of needs, I&#8217;ll look at a common solution that people use with that library. Since Knockout is purely a databinding library, I expect to have to pull in others when it&#8217;s time to talk about routing, modules, and unit testing, while I shouldn&#8217;t have to do this as much with AngularJS.</p>
<p>Here are the capabilities I need:</p>
<ul style="padding-left: 2em;">
<li>Data binding &#8211; bind HTML elements to JavaScript data models</li>
<li>Validation &#8211; validation of raw inputs by applying rules for fields or model properties</li>
<li>Serialization &#8211; easy method for serializing models to POST to server-side APIs</li>
<li>Templating &#8211; define HTML templates for re-usable complex collections of HTML</li>
<li>Modules + DI &#8211; keep my javascript files separate, help me order them properly, manage dependencies for me</li>
<li>Automated Testing &#8211; Exploring unit testing and possibilities for higher level testing</li>
<li>SPA Routing/History &#8211; make it easy for me to route between views in a single page app, with history/deep linking</li>
</ul>
<p>Before I dive into either of these libraries, though, I need some assurance that they will support the browsers I need, won&#8217;t get me into an odd licensing situation, and have sizable communities maintaining them. Here is a list of all the libraries I&#8217;ve incorporated in the series:</p>
<table class="tables" style="border-collapse: collapse">
<tr>
<th>Package</th>
<th>License</th>
<th>Current Version</th>
<th>Latest Update</th>
<th>Contributors</th>
</tr>
<tr>
<td><a href="http://angularjs.org/">AngularJS</a></td>
<td>MIT</td>
<td>1.0.8, 1.2.0 rc 2</td>
<td>2 Days Ago</td>
<td>392</td>
</tr>
<tr>
<td><a href="http://knockoutjs.com/">Knockout</a></td>
<td>MIT</td>
<td>2.3.0, 3.0.0 beta</td>
<td>3 Days Ago</td>
<td>38</td>
</tr>
<tr>
<td><a href="https://github.com/ifandelse/Knockout.js-External-Template-Engine">Knockout.js External Template Engine</a></td>
<td>MIT</td>
<td>2.0.5</td>
<td>A year ago</td>
<td>3</td>
</tr>
<tr>
<td><a href="http://requirejs.org/">RequireJS</a></td>
<td>MIT or BSD</td>
<td>2.1.8</td>
<td>6 Days Ago</td>
<td>53</td>
</tr>
<tr>
<td><a href="http://sammyjs.org/">SammyJS</a></td>
<td>MIT</td>
<td>0.7.4</td>
<td>6 Months Ago</td>
<td>47</td>
</tr>
<tr>
<td><a href="http://durandaljs.com/">Durandal</a></td>
<td>MIT</td>
<td>2.0.0</td>
<td>1 month ago</td>
<td>27</td>
</tr>
<tr>
<td><a href="http://stoodder.github.io/finchjs/">Finch.js</a></td>
<td>MIT</td>
<td>0.5.13</td>
<td>5 months ago</td>
<td>2</td>
</tr>
<tr>
<td><a href="https://github.com/flatiron/director">flatiron director</a></td>
<td>MIT</td>
<td>1.2.0</td>
<td>4 months ago</td>
<td>42</td>
</tr>
<tr>
<td><a href="https://github.com/ded/script.js/">$script.js</a></td>
<td>??</td>
<td>N/A (source)</td>
<td>5 months ago</td>
<td>8</td>
</tr>
<tr>
<td><a href="http://pivotal.github.io/jasmine/">Jasmine</a></td>
<td>MIT</td>
<td>1.3.1</td>
<td>18 hours ago</td>
<td>49</td>
</tr>
<tr>
<td><a href="https://github.com/derickbailey/jasmine.async">Jasmine.Async</a></td>
<td>MIT</td>
<td>0.1.0</td>
<td>1 year ago</td>
<td>1</td>
</tr>
<tr>
<td><a href="https://github.com/iammerrick/Squire.js/">Squire.js</a></td>
<td>MIT</td>
<td>N/A (source)</td>
<td>2 months ago</td>
<td>6</td>
</tr>
</table>
<p><i>Latest Update + Current Version as of when I added the table row.</i></p>
<p>Browser Compatibility:</p>
<table class="tables" style="border-collapse: collapse">
<tr>
<th>Package</th>
<th>Browsers</th>
</tr>
<tr>
<td><a href="http://angularjs.org/">AngularJS</a></td>
<td>Not Documented? (<a href="http://docs.angularjs.org/guide/ie">extra requirements</a> for IE8-)</td>
</tr>
<tr>
<td><a href="http://knockoutjs.com/">Knockout</a></td>
<td>IE 6+, Firefox 2+, Safari (desktop/mobile), Chrome, Opera</td>
</tr>
<tr>
<td><a href="https://github.com/ifandelse/Knockout.js-External-Template-Engine">Knockout.js External Template Engine</a></td>
<td>??</td>
</tr>
<tr>
<td><a href="http://requirejs.org/">RequireJS</a></td>
<td>IE 6+, Firefox 2+, Safari 3.2+, Chrome 3+, Opera 10+</td>
</tr>
<tr>
<td><a href="http://sammyjs.org/">SammyJS</a></td>
<td>IE 8+, Firefox 3+, Safari 3+, Chrome 5+, Opera 10+, Mobile WebKit</td>
</tr>
<tr>
<td><a href="http://durandaljs.com/">Durandal</a></td>
<td>Not Documented?</td>
</tr>
<tr>
<td><a href="http://stoodder.github.io/finchjs/">Finch.js</a></td>
<td>Not Documented?</td>
</tr>
<tr>
<td><a href="https://github.com/flatiron/director">flatiron director</a></td>
<td>??</td>
</tr>
<tr>
<td><a href="https://github.com/ded/script.js/">$script.js</a></td>
<td>IE 6+, Firefox 2+, Safari 3+, Chrome 9+</td>
</tr>
<tr>
<td><a href="http://pivotal.github.io/jasmine/">Jasmine</a>, <a href="https://github.com/derickbailey/jasmine.async">Jasmine.Async</a></td>
<td>Not client facing. Supports a wide range of browsers, including PhantomJS. Chutzpah plugin for Visual Studio (no ncrunch yet though)</td>
</tr>
<tr>
<td><a href="https://github.com/iammerrick/Squire.js/">Squire.js</a></td>
<td>Also not client facing</td>
</tr>
</table>
<p>I&#8217;ll explore each capability in both frameworks as well as my opinions and frustrations along the way. Then when the whole series is posted, I&#8217;ll offer a final set of opinions. The plan is to post daily (weekdays) until I get to the end, so keep an eye out on the site or follow me on <a href="http://twitter.com/tarwn" title="Follow @tarwn on twitter">twitter</a> for updates.</p>
<p>I haven&#8217;t actually written the last post yet, so you have plenty of time to color my opinion and point out where I did things wrong as I roll out each post <img src="https://s.w.org/images/core/emoji/2/72x72/1f642.png" alt="🙂" class="wp-smiley" style="height: 1em; max-height: 1em;" /></p>
<div style="background-color: #DDDDDD; padding: 8px; width: 400px;">
<h3>Knockout vs AngularJS</h3>
<ul style="margin: 0px; padding: 4px;">
<li><b>Introductory Post</b></li>
<li><a href="/index.php/WebDev/UIDevelopment/angularjs-vs-knockout-data-binding-2">Data Binding</a></li>
<li><a href="/index.php/WebDev/UIDevelopment/angularjs-vs-knockout-validation-3">Validation</a></li>
<li><a href="/index.php/WebDev/UIDevelopment/angularjs-vs-knockout-serialization-4">Serialization</a></li>
<li><a href="/index.php/WebDev/UIDevelopment/angularjs-vs-knockout-templating-5">Templating</a></li>
<li><a href="/index.php/WebDev/UIDevelopment/angularjs-vs-knockout-modules-and-di-6">Modules + Dependency Injection</a></li>
<li><a href="/index.php/WebDev/UIDevelopment/angularjs-vs-knockout-automated-testing-7">Automated Testing</a></li>
<li><a href="/index.php/WebDev/UIDevelopment/AJAX/angularjs-vs-knockout-spa-routing-history-8">SPA Routing/History</a></li>
<li><a href="/index.php/WebDev/UIDevelopment/angularjs-vs-knockout-final-thoughts-9">Final, Final Thoughts</a></li>
</ul>
</div>
]]></content:encoded>
			<wfw:commentRss>/index.php/webdev/uidevelopment/angularjs-vs-knockout-introduction-1/feed/</wfw:commentRss>
		<slash:comments>10</slash:comments>
		</item>
	</channel>
</rss>
