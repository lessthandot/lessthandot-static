<?xml version="1.0" encoding="UTF-8"?><rss version="2.0"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:atom="http://www.w3.org/2005/Atom"
	xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
	xmlns:slash="http://purl.org/rss/1.0/modules/slash/"
	>

<channel>
	<title>quiz &#8211; LessthanDot</title>
	<atom:link href="/index.php/tag/quiz/feed/" rel="self" type="application/rss+xml" />
	<link>/</link>
	<description>A Technical Community for IT Professionals</description>
	<lastBuildDate>Sat, 09 Mar 2019 12:50:36 +0000</lastBuildDate>
	<language>en-US</language>
	<sy:updatePeriod>hourly</sy:updatePeriod>
	<sy:updateFrequency>1</sy:updateFrequency>
	<generator>https://wordpress.org/?v=4.6.1</generator>
	<item>
		<title>Answers To The SQL Server Quiz: Can You Answer All These Post</title>
		<link>/index.php/datamgmt/datadesign/answers-to-the-sql-server-quiz-can-you-a/</link>
		<comments>/index.php/datamgmt/datadesign/answers-to-the-sql-server-quiz-can-you-a/#comments</comments>
		<pubDate>Thu, 26 Mar 2009 12:14:03 +0000</pubDate>
		<dc:creator><![CDATA[SQLDenis]]></dc:creator>
				<category><![CDATA[Data Modelling and Design]]></category>
		<category><![CDATA[quiz]]></category>
		<category><![CDATA[sql]]></category>
		<category><![CDATA[sql server 2000]]></category>
		<category><![CDATA[sql server 2005]]></category>
		<category><![CDATA[sql server 2008]]></category>

		<guid isPermaLink="false">/index.php/2009/03/answers-to-the-sql-server-quiz-can-you-a/</guid>
		<description><![CDATA[Yesterday I wrote the SQL Server Quiz, Can You Answer All These? post and asked 10 question. Today I will give you the answes 1) Name three differences between primary keys and unique constraints A primary key cannot have any null values and a unique constraint can have one null value A primary key is [&#8230;]]]></description>
				<content:encoded><![CDATA[<p>Yesterday I wrote the <a href="/index.php/DataMgmt/DataDesign/sql-server-quiz-can-you-answer-all-these">SQL Server Quiz, Can You Answer All These?</a> post and asked 10 question. Today I will give you the answes</p>
<p><strong>1) Name three differences between primary keys and unique constraints</strong><br />
A primary key cannot have any null values and a unique constraint can have one null value<br />
A primary key is by default clustered and a unique constraint is not<br />
A table can only have one primary key but can have more than one unique constraint</p>
<p><strong>2) If your database is in simple recovery model and you run code that looks like this</strong></p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
</pre></td><td class="de1"><pre class="de1"><span class="kw1">BULK</span> <span class="kw1">INSERT</span> Northwind.<span class="me1">dbo</span>.<span class="br0">&#91;</span><span class="kw1">Order</span> Details<span class="br0">&#93;</span>
&nbsp; &nbsp;<span class="kw1">FROM</span> <span class="st0">'f:orderslineitem.tbl'</span>
&nbsp; &nbsp;<span class="kw1">WITH</span> 
&nbsp; &nbsp; &nbsp; <span class="br0">&#40;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;FIELDTERM<span class="sy0">IN</span>AT<span class="sy0">OR</span> <span class="sy0">=</span> <span class="st0">'|'</span>,
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;ROWTERM<span class="sy0">IN</span>AT<span class="sy0">OR</span> <span class="sy0">=</span> <span class="st0">'|n'</span>
&nbsp; &nbsp; &nbsp; <span class="br0">&#41;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">BULK INSERT Northwind.dbo.[Order Details]
   FROM 'f:orderslineitem.tbl'
   WITH 
      (
         FIELDTERMINATOR = '|',
         ROWTERMINATOR = '|n'
      )</pre></div></div>

<p>Will this be minimally logged?</p>
<p>There are some additional things you need to do before a bulk insert is minimally logged, one of them would be that you would need to lock the table.</p>
<p>Here is an example</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
</pre></td><td class="de1"><pre class="de1"><span class="kw1">BULK</span> <span class="kw1">INSERT</span> Northwind.<span class="me1">dbo</span>.<span class="br0">&#91;</span><span class="kw1">Order</span> Details<span class="br0">&#93;</span>
&nbsp; &nbsp;<span class="kw1">FROM</span> <span class="st0">'f:orderslineitem.tbl'</span>
&nbsp; &nbsp;<span class="kw1">WITH</span> 
&nbsp; &nbsp; &nbsp; <span class="br0">&#40;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;FIELDTERM<span class="sy0">IN</span>AT<span class="sy0">OR</span> <span class="sy0">=</span> <span class="st0">'|'</span>,
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;ROWTERM<span class="sy0">IN</span>AT<span class="sy0">OR</span> <span class="sy0">=</span> <span class="st0">'|n'</span>,
&nbsp; &nbsp; &nbsp;TABLOCK
&nbsp; &nbsp; &nbsp; <span class="br0">&#41;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">BULK INSERT Northwind.dbo.[Order Details]
   FROM 'f:orderslineitem.tbl'
   WITH 
      (
         FIELDTERMINATOR = '|',
         ROWTERMINATOR = '|n',
	 TABLOCK
      )</pre></div></div>

<p>There is actually more that is required, here is what books on line specifies about it</p>
<p>A minimally logged bulk copy can be performed if all of these conditions are met:</p>
<ul>
<li>The recovery model is simple or bulk-logged.</li>
<li>The target table is not being replicated.</li>
<li>The target table does not have any triggers.</li>
<li>The target table has either 0 rows or no indexes.</li>
<li>The TABLOCK hint is specified.</li>
</ul>
<p><strong>3) How many flaws/worst practices are in this piece of code</strong></p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
</pre></td><td class="de1"><pre class="de1"><span class="kw1">select</span> <span class="sy0">*</span> 
<span class="kw1">from</span> SomeTable
<span class="kw1">Where</span> <span class="kw1">left</span><span class="br0">&#40;</span>SomeColumn,<span class="nu0">1</span><span class="br0">&#41;</span> <span class="sy0">=</span><span class="st0">'A'</span>
&nbsp;
<span class="kw1">print</span> <span class="st0">'query executed'</span>
<span class="kw1">select</span> <span class="kw2">@@rowcount</span> <span class="kw1">as</span> <span class="st0">'Rows returned'</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">select * 
from SomeTable
Where left(SomeColumn,1) ='A'

print 'query executed'
select @@rowcount as 'Rows returned'</pre></div></div>

<p>There are a couple of things that stand out<br />
You should never use * but only list the columns you really want, see also here: <a href="http://wiki.lessthandot.com/index.php/SQL_Server_Programming_Hacks_-_Don%27t_Use_%28select_%2A%29%2C_but_List_Columns">Donâ€™t use * but list the columns</a><br />
There is a missing qualifier in the table name<br />
This where clause is not sargable instead of left(SomeColumn,1) =&#8217;A&#8217; do this SomeColumn like &#8216;A%&#8217;. see also here: <a href="http://wiki.lessthandot.com/index.php/SQL_Server_Programming_Hacks_-_No_Functions_on_Left_Side_of_Operator">Functions on left side of the operator</a><br />
@@ROWCOUNT should be selected right after the query because the print will make it have a value of 0; any statement will affect @@ROWCOUNT  so you should always dump it into a variable right after you do a DML statement. The same that applies to @@ROWCOUNT also applies to @@ERROR. If you do need to grab both @@ERROR and @@rowcount then do it on the same line.  SELECT @MyErr =@@ERROR, @MyCount = @@ROWCOUNT </p>
<p><strong>4) When we use Try and Catch will the following tran be commited?</strong></p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
</pre></td><td class="de1"><pre class="de1"><span class="kw1">BEGIN</span> <span class="kw1">TRANSACTION</span> TranA
&nbsp; &nbsp; <span class="kw1">BEGIN</span> <span class="kw1">TRY</span>
&nbsp; &nbsp; &nbsp;<span class="kw1">DECLARE</span> &nbsp;@cond <span class="kw1">INT</span>;
&nbsp; &nbsp; &nbsp;<span class="kw1">SET</span> @cond <span class="sy0">=</span> &nbsp;<span class="st0">'A'</span>;
&nbsp; &nbsp; <span class="kw1">END</span> <span class="kw1">TRY</span>
&nbsp; &nbsp; <span class="kw1">BEGIN</span> <span class="kw1">CATCH</span>
&nbsp; &nbsp; &nbsp;<span class="kw1">PRINT</span> <span class="st0">'Inside catch'</span>
&nbsp; &nbsp; <span class="kw1">END</span> <span class="kw1">CATCH</span>;
&nbsp; &nbsp; <span class="kw1">COMMIT</span> <span class="kw1">TRAN</span> TranA</pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">BEGIN TRANSACTION TranA
    BEGIN TRY
     DECLARE  @cond INT;
     SET @cond =  'A';
    END TRY
    BEGIN CATCH
     PRINT 'Inside catch'
    END CATCH;
    COMMIT TRAN TranA</pre></div></div>

<p>No this will result in a doomed transaction and you will see the following message:<em> Msg 3930, Level 16, State 1, Line 15 The current transaction cannot be committed and cannot support operations that write to the log file. Roll back the transaction. Server: Msg 3998, Level 16, State 1, Line 1 Uncommittable transaction is detected at the end of the batch. The transaction is rolled back.</em></p>
<p>Before I show you what you can do first run this</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
</pre></td><td class="de1"><pre class="de1"><span class="kw1">BEGIN</span> <span class="kw1">TRANSACTION</span> TranA
&nbsp; &nbsp; <span class="kw1">BEGIN</span> <span class="kw1">TRY</span>
&nbsp; &nbsp; &nbsp;<span class="kw1">DECLARE</span> &nbsp;@cond <span class="kw1">INT</span>;
&nbsp; &nbsp; &nbsp;<span class="kw1">SET</span> @cond <span class="sy0">=</span> &nbsp;<span class="nu0">1</span><span class="sy0">/</span><span class="nu0">0</span>;
&nbsp; &nbsp; <span class="kw1">END</span> <span class="kw1">TRY</span>
&nbsp; &nbsp; <span class="kw1">BEGIN</span> <span class="kw1">CATCH</span>
&nbsp; &nbsp; &nbsp;<span class="kw1">PRINT</span> <span class="st0">'Inside catch'</span>
&nbsp; &nbsp; <span class="kw1">END</span> <span class="kw1">CATCH</span>;
&nbsp; &nbsp; <span class="kw1">COMMIT</span> <span class="kw1">TRAN</span> TranA</pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">BEGIN TRANSACTION TranA
    BEGIN TRY
     DECLARE  @cond INT;
     SET @cond =  1/0;
    END TRY
    BEGIN CATCH
     PRINT 'Inside catch'
    END CATCH;
    COMMIT TRAN TranA</pre></div></div>

<p>See that was no problem at all, the first code blew up because it is a non trapable error. You can use XACT_STATE() to see what state the transaction is in</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
</pre></td><td class="de1"><pre class="de1"><span class="kw1">BEGIN</span> <span class="kw1">TRANSACTION</span> TranA
&nbsp; &nbsp; <span class="kw1">BEGIN</span> <span class="kw1">TRY</span>
&nbsp; &nbsp; &nbsp;<span class="kw1">DECLARE</span> &nbsp;@cond <span class="kw1">INT</span>;
&nbsp; &nbsp; &nbsp;<span class="kw1">SET</span> @cond <span class="sy0">=</span> <span class="st0">'A'</span>;
&nbsp; &nbsp; <span class="kw1">END</span> <span class="kw1">TRY</span>
&nbsp; &nbsp; <span class="kw1">BEGIN</span> <span class="kw1">CATCH</span>
&nbsp; &nbsp; &nbsp;<span class="kw1">PRINT</span> ERR<span class="sy0">OR</span>_MESSAGE<span class="br0">&#40;</span><span class="br0">&#41;</span>;
&nbsp; &nbsp; <span class="kw1">END</span> <span class="kw1">CATCH</span>;
&nbsp; &nbsp; <span class="kw1">IF</span> XACT_STATE<span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="sy0">=</span><span class="nu0">0</span>
&nbsp; &nbsp; <span class="kw1">BEGIN</span>
&nbsp; &nbsp; &nbsp;<span class="kw1">COMMIT</span> <span class="kw1">TRAN</span> TranA
&nbsp; &nbsp; <span class="kw1">END</span>
&nbsp; &nbsp; <span class="kw1">ELSE</span>
&nbsp; &nbsp; <span class="kw1">BEGIN</span>
&nbsp; &nbsp; &nbsp;<span class="kw1">ROLLBACK</span> <span class="kw1">TRAN</span> TranA
&nbsp; &nbsp; <span class="kw1">END</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">BEGIN TRANSACTION TranA
    BEGIN TRY
     DECLARE  @cond INT;
     SET @cond = 'A';
    END TRY
    BEGIN CATCH
     PRINT ERROR_MESSAGE();
    END CATCH;
    IF XACT_STATE() =0
    BEGIN
     COMMIT TRAN TranA
    END
    ELSE
    BEGIN
     ROLLBACK TRAN TranA
    END</pre></div></div>

<p>To learn more about errors and transactions I highly recommend these two links by Erland Sommarskog: <a href="http://www.sommarskog.se/error-handling-II.html">Implementing Error Handling with Stored Procedures</a> and <a href="http://www.sommarskog.se/error-handling-I.html">Error Handling in SQL Server â€“ a Background</a>.</p>
<p><strong>5)Take a look at the code below, what will the last select return?</strong></p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
</pre></td><td class="de1"><pre class="de1"><span class="kw1">declare</span> @<span class="kw1">SQL</span> <span class="kw1">varchar</span><span class="br0">&#40;</span><span class="nu0">100</span><span class="br0">&#41;</span>
<span class="kw1">declare</span> @Val <span class="kw1">varchar</span><span class="br0">&#40;</span><span class="nu0">10</span><span class="br0">&#41;</span>
&nbsp;
<span class="kw1">select</span> @<span class="kw1">SQL</span> <span class="sy0">=</span><span class="st0">'The value this item is..'</span>
&nbsp;
<span class="kw1">select</span> @<span class="kw1">SQL</span> <span class="sy0">+</span> isnull<span class="br0">&#40;</span>@Val,<span class="st0">' currently not available'</span><span class="br0">&#41;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">declare @SQL varchar(100)
declare @Val varchar(10)

select @SQL ='The value this item is..'

select @SQL + isnull(@Val,' currently not available')</pre></div></div>

<p>Running that code will return the following: The value this item is.. currently. This is because isnull looks at @Val which is varchar(10) and chops off everything after 10 characters. If you use coalesce then you don&#8217;t have this problem, run the following</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
</pre></td><td class="de1"><pre class="de1"><span class="kw1">declare</span> @<span class="kw1">SQL</span> <span class="kw1">varchar</span><span class="br0">&#40;</span><span class="nu0">100</span><span class="br0">&#41;</span>
<span class="kw1">declare</span> @Val <span class="kw1">varchar</span><span class="br0">&#40;</span><span class="nu0">10</span><span class="br0">&#41;</span>
&nbsp;
<span class="kw1">select</span> @<span class="kw1">SQL</span> <span class="sy0">=</span><span class="st0">'The value this item is..'</span>
&nbsp;
<span class="kw1">select</span> @<span class="kw1">SQL</span> <span class="sy0">+</span> <span class="kw1">coalesce</span><span class="br0">&#40;</span>@Val,<span class="st0">' currently not available'</span><span class="br0">&#41;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">declare @SQL varchar(100)
declare @Val varchar(10)

select @SQL ='The value this item is..'

select @SQL + coalesce(@Val,' currently not available')</pre></div></div>

<p>And now this is returned The value this item is.. currently not available</p>
<p><strong>6)What will the returned when you run the following query?</strong></p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
</pre></td><td class="de1"><pre class="de1"><span class="kw1">select</span> <span class="nu0">3</span><span class="sy0">/</span><span class="nu0">2</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">select 3/2</pre></div></div>

<p>So running that returns 1, surprised? Don&#8217;t be the result of division with two integers is an integer, this is also known as <a href="http://wiki.lessthandot.com/index.php/Integer_math">integer math</a></p>
<p>Here is how you can fix it by doing explicit and implicit conversions</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
</pre></td><td class="de1"><pre class="de1">&nbsp; &nbsp; <span class="co1">--Implicit</span>
&nbsp; &nbsp; <span class="kw1">SELECT</span> <span class="nu0">3</span><span class="sy0">/</span><span class="br0">&#40;</span><span class="nu0">2</span><span class="sy0">*</span><span class="nu0">1.0</span><span class="br0">&#41;</span>
&nbsp; &nbsp; <span class="co1">--Explicit</span>
&nbsp; &nbsp; <span class="kw1">SELECT</span> <span class="kw1">CONVERT</span><span class="br0">&#40;</span><span class="kw1">DECIMAL</span><span class="br0">&#40;</span><span class="nu0">18</span>,<span class="nu0">4</span><span class="br0">&#41;</span>,<span class="nu0">3</span><span class="br0">&#41;</span><span class="sy0">/</span><span class="nu0">2</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">    --Implicit
    SELECT 3/(2*1.0)
    --Explicit
    SELECT CONVERT(DECIMAL(18,4),3)/2</pre></div></div>

<p><strong>7)How many rows will the select query return from the table with 3 rows</strong></p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
</pre></td><td class="de1"><pre class="de1"><span class="kw1">CREATE</span> <span class="kw1">TABLE</span> #testnulls <span class="br0">&#40;</span>ID <span class="kw1">INT</span><span class="br0">&#41;</span>
<span class="kw1">INSERT</span> <span class="kw1">INTO</span> #testnulls <span class="kw1">VALUES</span> <span class="br0">&#40;</span><span class="nu0">1</span><span class="br0">&#41;</span>
<span class="kw1">INSERT</span> <span class="kw1">INTO</span> #testnulls <span class="kw1">VALUES</span> <span class="br0">&#40;</span><span class="nu0">2</span><span class="br0">&#41;</span>
<span class="kw1">INSERT</span> <span class="kw1">INTO</span> #testnulls <span class="kw1">VALUES</span> <span class="br0">&#40;</span>null<span class="br0">&#41;</span>
&nbsp;
<span class="kw1">select</span> <span class="sy0">*</span> <span class="kw1">from</span> #testnulls
<span class="kw1">where</span> id <span class="sy0">&lt;&gt;</span> <span class="nu0">1</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">CREATE TABLE #testnulls (ID INT)
INSERT INTO #testnulls VALUES (1)
INSERT INTO #testnulls VALUES (2)
INSERT INTO #testnulls VALUES (null)

select * from #testnulls
where id &lt;&gt; 1</pre></div></div>

<p>The answer is one row, the reason for that is that a null is not equal to anything not even another null</p>
<p>Run this to see what I mean</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
</pre></td><td class="de1"><pre class="de1"><span class="kw1">if</span> null <span class="sy0">=</span> null
<span class="kw1">print</span> <span class="st0">'yes null = null'</span>
<span class="kw1">else</span>
<span class="kw1">print</span> <span class="st0">'no null = null'</span>
&nbsp;
<span class="kw1">if</span> null <span class="kw1">is</span> null
<span class="kw1">print</span> <span class="st0">'yes null is null'</span>
<span class="kw1">else</span>
<span class="kw1">print</span> <span class="st0">'no null is null'</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">if null = null
print 'yes null = null'
else
print 'no null = null'

if null is null
print 'yes null is null'
else
print 'no null is null'</pre></div></div>

<p>The following will be printed<br />
no null = null<br />
yes null is null</p>
<p>To check for null you would use IS NULL and IS NOT NULL or NOT IS NULL, you would not use = NULL or &lt;&gt; NULL</p>
<p><strong>8)If you run the code below what will the len function return, can you also answer why?</strong></p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
</pre></td><td class="de1"><pre class="de1"><span class="kw1">declare</span> @v <span class="kw1">varchar</span><span class="br0">&#40;</span><span class="kw2">max</span><span class="br0">&#41;</span>
<span class="kw1">select</span> @v <span class="sy0">=</span><span class="kw2">replicate</span><span class="br0">&#40;</span><span class="st0">'a'</span>,<span class="nu0">20000</span><span class="br0">&#41;</span>
&nbsp;
<span class="kw1">select</span> <span class="kw2">len</span><span class="br0">&#40;</span>@v<span class="br0">&#41;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">declare @v varchar(max)
select @v =replicate('a',20000)

select len(@v)</pre></div></div>

<p>8000 will be returned because &#8216;a&#8217; is a varchar which goes up to 8000 max. Here is one way to get around it</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
</pre></td><td class="de1"><pre class="de1"><span class="kw1">declare</span> @v <span class="kw1">varchar</span><span class="br0">&#40;</span><span class="kw2">max</span><span class="br0">&#41;</span>
<span class="kw1">select</span> @v <span class="sy0">=</span><span class="kw2">replicate</span><span class="br0">&#40;</span><span class="kw1">convert</span><span class="br0">&#40;</span><span class="kw1">varchar</span><span class="br0">&#40;</span><span class="kw2">max</span><span class="br0">&#41;</span>,<span class="st0">'a'</span><span class="br0">&#41;</span>,<span class="nu0">20000</span><span class="br0">&#41;</span>
&nbsp;
<span class="kw1">select</span> <span class="kw2">len</span><span class="br0">&#40;</span>@v<span class="br0">&#41;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">declare @v varchar(max)
select @v =replicate(convert(varchar(max),'a'),20000)

select len(@v)</pre></div></div>

<p><strong>9) If you have the following table</strong></p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
</pre></td><td class="de1"><pre class="de1"><span class="kw1">CREATE</span> <span class="kw1">TABLE</span> #testnulls2 <span class="br0">&#40;</span>ID <span class="kw1">INT</span><span class="br0">&#41;</span>
<span class="kw1">INSERT</span> <span class="kw1">INTO</span> #testnulls2 <span class="kw1">VALUES</span> <span class="br0">&#40;</span><span class="nu0">1</span><span class="br0">&#41;</span>
<span class="kw1">INSERT</span> <span class="kw1">INTO</span> #testnulls2 <span class="kw1">VALUES</span> <span class="br0">&#40;</span><span class="nu0">2</span><span class="br0">&#41;</span>
<span class="kw1">INSERT</span> <span class="kw1">INTO</span> #testnulls2 <span class="kw1">VALUES</span> <span class="br0">&#40;</span>null<span class="br0">&#41;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">CREATE TABLE #testnulls2 (ID INT)
INSERT INTO #testnulls2 VALUES (1)
INSERT INTO #testnulls2 VALUES (2)
INSERT INTO #testnulls2 VALUES (null)</pre></div></div>

<p>what will the query below return?</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
</pre></td><td class="de1"><pre class="de1"><span class="kw1">select</span> <span class="kw2">count</span><span class="br0">&#40;</span><span class="sy0">*</span><span class="br0">&#41;</span>, <span class="kw2">count</span><span class="br0">&#40;</span>id<span class="br0">&#41;</span>
<span class="kw1">from</span> #testnulls2</pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">select count(*), count(id)
from #testnulls2</pre></div></div>

<p>This will return 3 and 2. this is because count(*) counts all the columns and count(id) will only count the non null values in a column</p>
<p><strong>10)If you have the following two tables</strong></p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
</pre></td><td class="de1"><pre class="de1"><span class="kw1">CREATE</span> <span class="kw1">TABLE</span> TestOne <span class="br0">&#40;</span>id <span class="kw1">INT</span> <span class="kw1">IDENTITY</span>,SomeDate <span class="kw1">DATETIME</span><span class="br0">&#41;</span>
<span class="kw1">CREATE</span> <span class="kw1">TABLE</span> TestTwo <span class="br0">&#40;</span>id <span class="kw1">INT</span> <span class="kw1">IDENTITY</span>,TestOneID <span class="kw1">INT</span>,SomeDate <span class="kw1">DATETIME</span><span class="br0">&#41;</span>
&nbsp;
&nbsp; &nbsp; <span class="co1">--Let's insert 4 rows into the table</span>
&nbsp; &nbsp; <span class="kw1">INSERT</span> TestOne <span class="kw1">VALUES</span><span class="br0">&#40;</span><span class="kw2">GETDATE</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#41;</span>
&nbsp; &nbsp; <span class="kw1">INSERT</span> TestOne <span class="kw1">VALUES</span><span class="br0">&#40;</span><span class="kw2">GETDATE</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#41;</span>
&nbsp; &nbsp; <span class="kw1">INSERT</span> TestOne <span class="kw1">VALUES</span><span class="br0">&#40;</span><span class="kw2">GETDATE</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#41;</span>
&nbsp; &nbsp; <span class="kw1">INSERT</span> TestOne <span class="kw1">VALUES</span><span class="br0">&#40;</span><span class="kw2">GETDATE</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#41;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">CREATE TABLE TestOne (id INT IDENTITY,SomeDate DATETIME)
CREATE TABLE TestTwo (id INT IDENTITY,TestOneID INT,SomeDate DATETIME)
 
    --Let's insert 4 rows into the table
    INSERT TestOne VALUES(GETDATE())
    INSERT TestOne VALUES(GETDATE())
    INSERT TestOne VALUES(GETDATE())
    INSERT TestOne VALUES(GETDATE())</pre></div></div>

<p>If table TestOne now has the following trigger added to it</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
</pre></td><td class="de1"><pre class="de1"><span class="kw1">CREATE</span> <span class="kw1">TRIGGER</span> trTestOne <span class="kw1">ON</span> <span class="br0">&#91;</span>dbo<span class="br0">&#93;</span>.<span class="br0">&#91;</span>TestOne<span class="br0">&#93;</span>
&nbsp; &nbsp; <span class="kw1">FOR</span> <span class="kw1">INSERT</span>
&nbsp; &nbsp; <span class="kw1">AS</span>
&nbsp; &nbsp; <span class="kw1">DECLARE</span> @CreditUserID <span class="kw1">INT</span>
&nbsp;
&nbsp; &nbsp; <span class="kw1">SELECT</span> @CreditUserID <span class="sy0">=</span> <span class="br0">&#40;</span><span class="kw1">SELECT</span> ID <span class="kw1">FROM</span> Inserted<span class="br0">&#41;</span>
&nbsp;
&nbsp; &nbsp; <span class="kw1">INSERT</span> TestTwo <span class="kw1">VALUES</span><span class="br0">&#40;</span>@CreditUserID,<span class="kw2">GETDATE</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#41;</span>
&nbsp; &nbsp; GO</pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">CREATE TRIGGER trTestOne ON [dbo].[TestOne]
    FOR INSERT
    AS
    DECLARE @CreditUserID INT
 
    SELECT @CreditUserID = (SELECT ID FROM Inserted)
 
    INSERT TestTwo VALUES(@CreditUserID,GETDATE())
    GO</pre></div></div>

<p>What will be the value that the @@identity function returns after a new insert into the TestOne table?</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
</pre></td><td class="de1"><pre class="de1"><span class="kw1">INSERT</span> TestOne <span class="kw1">VALUES</span><span class="br0">&#40;</span><span class="kw2">GETDATE</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#41;</span>
<span class="kw1">select</span> @@<span class="kw1">identity</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">INSERT TestOne VALUES(GETDATE())
select @@identity</pre></div></div>

<p>You will get back the value 1 and not 5. This is because @@IDENTITY doesn&#8217;t care about scope and returns the last identity value from all the statements, which in this case is from the code within the trigger trTestOne. So the bottom line is this: Always use SCOPE_IDENTITY() unless you DO need the last identity value regradless of scope (for example you need to know the identity from the table insert inside the trigger)<br />
Run this now and you will see both values and you can see that they are indeed different</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
</pre></td><td class="de1"><pre class="de1"><span class="kw1">INSERT</span> TestOne <span class="kw1">VALUES</span><span class="br0">&#40;</span><span class="kw2">GETDATE</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#41;</span>
<span class="kw1">select</span> <span class="kw2">scope_identity</span><span class="br0">&#40;</span><span class="br0">&#41;</span>, @@<span class="kw1">identity</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">INSERT TestOne VALUES(GETDATE())
select scope_identity(), @@identity</pre></div></div>

<p>So that is it for all 10 questions</p>
<p>
*** <strong>If you have a SQL related question try our <a href="http://forum.lessthandot.com/viewforum.php?f=17">Microsoft SQL Server Programming</a> forum or our <a href="http://forum.lessthandot.com/viewforum.php?f=22">Microsoft SQL Server Admin</a> forum</strong><ins></ins></p>
]]></content:encoded>
			<wfw:commentRss>/index.php/datamgmt/datadesign/answers-to-the-sql-server-quiz-can-you-a/feed/</wfw:commentRss>
		<slash:comments>5</slash:comments>
		</item>
		<item>
		<title>SQL Server Quiz, Can You Answer All These?</title>
		<link>/index.php/datamgmt/datadesign/sql-server-quiz-can-you-answer-all-these/</link>
		<comments>/index.php/datamgmt/datadesign/sql-server-quiz-can-you-answer-all-these/#comments</comments>
		<pubDate>Wed, 25 Mar 2009 12:44:12 +0000</pubDate>
		<dc:creator><![CDATA[SQLDenis]]></dc:creator>
				<category><![CDATA[Data Modelling and Design]]></category>
		<category><![CDATA[quiz]]></category>
		<category><![CDATA[sql]]></category>
		<category><![CDATA[sql server 2000]]></category>
		<category><![CDATA[sql server 2005]]></category>
		<category><![CDATA[sql server 2008]]></category>

		<guid isPermaLink="false">/index.php/2009/03/sql-server-quiz-can-you-answer-all-these/</guid>
		<description><![CDATA[Here is a quick SQL Server quiz. Do you know the answer to all of these question? I will give the answers in a blog post tomorrow 1) Name three differences between primary keys and unique constraints 2) If your database is in simple recovery model and you run code that looks like this T-SQL1 [&#8230;]]]></description>
				<content:encoded><![CDATA[<p>Here is a quick SQL Server quiz. Do you know the answer to all of these question? I will give the answers in a blog post tomorrow</p>
<p>1) Name three differences between primary keys and unique constraints</p>
<p>2) If your database is in simple recovery model and you run code that looks like this</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
</pre></td><td class="de1"><pre class="de1"><span class="kw1">BULK</span> <span class="kw1">INSERT</span> Northwind.<span class="me1">dbo</span>.<span class="br0">&#91;</span><span class="kw1">Order</span> Details<span class="br0">&#93;</span>
&nbsp; &nbsp;<span class="kw1">FROM</span> <span class="st0">'f:orderslineitem.tbl'</span>
&nbsp; &nbsp;<span class="kw1">WITH</span> 
&nbsp; &nbsp; &nbsp; <span class="br0">&#40;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;FIELDTERM<span class="sy0">IN</span>AT<span class="sy0">OR</span> <span class="sy0">=</span> <span class="st0">'|'</span>,
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;ROWTERM<span class="sy0">IN</span>AT<span class="sy0">OR</span> <span class="sy0">=</span> <span class="st0">'|n'</span>
&nbsp; &nbsp; &nbsp; <span class="br0">&#41;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">BULK INSERT Northwind.dbo.[Order Details]
   FROM 'f:orderslineitem.tbl'
   WITH 
      (
         FIELDTERMINATOR = '|',
         ROWTERMINATOR = '|n'
      )</pre></div></div>

<p>Will this be minimally logged?</p>
<p>3) How many flaws/worst practices are in this piece of code</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
</pre></td><td class="de1"><pre class="de1"><span class="kw1">select</span> <span class="sy0">*</span> 
<span class="kw1">from</span> SomeTable
<span class="kw1">Where</span> <span class="kw1">left</span><span class="br0">&#40;</span>SomeColumn,<span class="nu0">1</span><span class="br0">&#41;</span> <span class="sy0">=</span><span class="st0">'A'</span>
&nbsp;
<span class="kw1">print</span> <span class="st0">'query executed'</span>
<span class="kw1">select</span> <span class="kw2">@@rowcount</span> <span class="kw1">as</span> <span class="st0">'Rows returned'</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">select * 
from SomeTable
Where left(SomeColumn,1) ='A'

print 'query executed'
select @@rowcount as 'Rows returned'</pre></div></div>

<p>4) When we use Try and Catch will the following tran be commited?</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
</pre></td><td class="de1"><pre class="de1"><span class="kw1">BEGIN</span> <span class="kw1">TRANSACTION</span> TranA
&nbsp; &nbsp; <span class="kw1">BEGIN</span> <span class="kw1">TRY</span>
&nbsp; &nbsp; &nbsp;<span class="kw1">DECLARE</span> &nbsp;@cond <span class="kw1">INT</span>;
&nbsp; &nbsp; &nbsp;<span class="kw1">SET</span> @cond <span class="sy0">=</span> &nbsp;<span class="st0">'A'</span>;
&nbsp; &nbsp; <span class="kw1">END</span> <span class="kw1">TRY</span>
&nbsp; &nbsp; <span class="kw1">BEGIN</span> <span class="kw1">CATCH</span>
&nbsp; &nbsp; &nbsp;<span class="kw1">PRINT</span> <span class="st0">'Inside catch'</span>
&nbsp; &nbsp; <span class="kw1">END</span> <span class="kw1">CATCH</span>;
&nbsp; &nbsp; <span class="kw1">COMMIT</span> <span class="kw1">TRAN</span> TranA</pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">BEGIN TRANSACTION TranA
    BEGIN TRY
     DECLARE  @cond INT;
     SET @cond =  'A';
    END TRY
    BEGIN CATCH
     PRINT 'Inside catch'
    END CATCH;
    COMMIT TRAN TranA</pre></div></div>

<p>5)Take a look at the code below, what will the last select return?</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
</pre></td><td class="de1"><pre class="de1"><span class="kw1">declare</span> @<span class="kw1">SQL</span> <span class="kw1">varchar</span><span class="br0">&#40;</span><span class="nu0">100</span><span class="br0">&#41;</span>
<span class="kw1">declare</span> @Val <span class="kw1">varchar</span><span class="br0">&#40;</span><span class="nu0">10</span><span class="br0">&#41;</span>
&nbsp;
<span class="kw1">select</span> @<span class="kw1">SQL</span> <span class="sy0">=</span><span class="st0">'The value this item is..'</span>
&nbsp;
<span class="kw1">select</span> @<span class="kw1">SQL</span> <span class="sy0">+</span> isnull<span class="br0">&#40;</span>@Val,<span class="st0">' currently not available'</span><span class="br0">&#41;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">declare @SQL varchar(100)
declare @Val varchar(10)

select @SQL ='The value this item is..'

select @SQL + isnull(@Val,' currently not available')</pre></div></div>

<p>6)What will the returned when you run the following query?</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
</pre></td><td class="de1"><pre class="de1"><span class="kw1">select</span> <span class="nu0">3</span><span class="sy0">/</span><span class="nu0">2</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">select 3/2</pre></div></div>

<p>7)How many rows will the select query return from the table with 3 rows</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
</pre></td><td class="de1"><pre class="de1"><span class="kw1">CREATE</span> <span class="kw1">TABLE</span> #testnulls <span class="br0">&#40;</span>ID <span class="kw1">INT</span><span class="br0">&#41;</span>
<span class="kw1">INSERT</span> <span class="kw1">INTO</span> #testnulls <span class="kw1">VALUES</span> <span class="br0">&#40;</span><span class="nu0">1</span><span class="br0">&#41;</span>
<span class="kw1">INSERT</span> <span class="kw1">INTO</span> #testnulls <span class="kw1">VALUES</span> <span class="br0">&#40;</span><span class="nu0">2</span><span class="br0">&#41;</span>
<span class="kw1">INSERT</span> <span class="kw1">INTO</span> #testnulls <span class="kw1">VALUES</span> <span class="br0">&#40;</span>null<span class="br0">&#41;</span>
&nbsp;
<span class="kw1">select</span> <span class="sy0">*</span> <span class="kw1">from</span> #testnulls
<span class="kw1">where</span> id <span class="sy0">&lt;&gt;</span> <span class="nu0">1</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">CREATE TABLE #testnulls (ID INT)
INSERT INTO #testnulls VALUES (1)
INSERT INTO #testnulls VALUES (2)
INSERT INTO #testnulls VALUES (null)

select * from #testnulls
where id &lt;&gt; 1</pre></div></div>

<p>8)If you run the code below what will the len function return, can you also answer why?</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
</pre></td><td class="de1"><pre class="de1"><span class="kw1">declare</span> @v <span class="kw1">varchar</span><span class="br0">&#40;</span><span class="kw2">max</span><span class="br0">&#41;</span>
<span class="kw1">select</span> @v <span class="sy0">=</span><span class="kw2">replicate</span><span class="br0">&#40;</span><span class="st0">'a'</span>,<span class="nu0">20000</span><span class="br0">&#41;</span>
&nbsp;
<span class="kw1">select</span> <span class="kw2">len</span><span class="br0">&#40;</span>@v<span class="br0">&#41;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">declare @v varchar(max)
select @v =replicate('a',20000)

select len(@v)</pre></div></div>

<p>9) If you have the following table</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
</pre></td><td class="de1"><pre class="de1"><span class="kw1">CREATE</span> <span class="kw1">TABLE</span> #testnulls2 <span class="br0">&#40;</span>ID <span class="kw1">INT</span><span class="br0">&#41;</span>
<span class="kw1">INSERT</span> <span class="kw1">INTO</span> #testnulls2 <span class="kw1">VALUES</span> <span class="br0">&#40;</span><span class="nu0">1</span><span class="br0">&#41;</span>
<span class="kw1">INSERT</span> <span class="kw1">INTO</span> #testnulls2 <span class="kw1">VALUES</span> <span class="br0">&#40;</span><span class="nu0">2</span><span class="br0">&#41;</span>
<span class="kw1">INSERT</span> <span class="kw1">INTO</span> #testnulls2 <span class="kw1">VALUES</span> <span class="br0">&#40;</span>null<span class="br0">&#41;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">CREATE TABLE #testnulls2 (ID INT)
INSERT INTO #testnulls2 VALUES (1)
INSERT INTO #testnulls2 VALUES (2)
INSERT INTO #testnulls2 VALUES (null)</pre></div></div>

<p>what will the query below return?</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
</pre></td><td class="de1"><pre class="de1"><span class="kw1">select</span> <span class="kw2">count</span><span class="br0">&#40;</span><span class="sy0">*</span><span class="br0">&#41;</span>, <span class="kw2">count</span><span class="br0">&#40;</span>id<span class="br0">&#41;</span>
<span class="kw1">from</span> #testnulls2</pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">select count(*), count(id)
from #testnulls2</pre></div></div>

<p>10)If you have the following two tables</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
</pre></td><td class="de1"><pre class="de1"><span class="kw1">CREATE</span> <span class="kw1">TABLE</span> TestOne <span class="br0">&#40;</span>id <span class="kw1">INT</span> <span class="kw1">IDENTITY</span>,SomeDate <span class="kw1">DATETIME</span><span class="br0">&#41;</span>
<span class="kw1">CREATE</span> <span class="kw1">TABLE</span> TestTwo <span class="br0">&#40;</span>id <span class="kw1">INT</span> <span class="kw1">IDENTITY</span>,TestOneID <span class="kw1">INT</span>,SomeDate <span class="kw1">DATETIME</span><span class="br0">&#41;</span>
&nbsp;
&nbsp; &nbsp; <span class="co1">--Let's insert 4 rows into the table</span>
&nbsp; &nbsp; <span class="kw1">INSERT</span> TestOne <span class="kw1">VALUES</span><span class="br0">&#40;</span><span class="kw2">GETDATE</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#41;</span>
&nbsp; &nbsp; <span class="kw1">INSERT</span> TestOne <span class="kw1">VALUES</span><span class="br0">&#40;</span><span class="kw2">GETDATE</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#41;</span>
&nbsp; &nbsp; <span class="kw1">INSERT</span> TestOne <span class="kw1">VALUES</span><span class="br0">&#40;</span><span class="kw2">GETDATE</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#41;</span>
&nbsp; &nbsp; <span class="kw1">INSERT</span> TestOne <span class="kw1">VALUES</span><span class="br0">&#40;</span><span class="kw2">GETDATE</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#41;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">CREATE TABLE TestOne (id INT IDENTITY,SomeDate DATETIME)
CREATE TABLE TestTwo (id INT IDENTITY,TestOneID INT,SomeDate DATETIME)
 
    --Let's insert 4 rows into the table
    INSERT TestOne VALUES(GETDATE())
    INSERT TestOne VALUES(GETDATE())
    INSERT TestOne VALUES(GETDATE())
    INSERT TestOne VALUES(GETDATE())</pre></div></div>

<p>If table TestOne now has the following trigger added to it</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
</pre></td><td class="de1"><pre class="de1"><span class="kw1">CREATE</span> <span class="kw1">TRIGGER</span> trTestOne <span class="kw1">ON</span> <span class="br0">&#91;</span>dbo<span class="br0">&#93;</span>.<span class="br0">&#91;</span>TestOne<span class="br0">&#93;</span>
&nbsp; &nbsp; <span class="kw1">FOR</span> <span class="kw1">INSERT</span>
&nbsp; &nbsp; <span class="kw1">AS</span>
&nbsp; &nbsp; <span class="kw1">DECLARE</span> @CreditUserID <span class="kw1">INT</span>
&nbsp;
&nbsp; &nbsp; <span class="kw1">SELECT</span> @CreditUserID <span class="sy0">=</span> <span class="br0">&#40;</span><span class="kw1">SELECT</span> ID <span class="kw1">FROM</span> Inserted<span class="br0">&#41;</span>
&nbsp;
&nbsp; &nbsp; <span class="kw1">INSERT</span> TestTwo <span class="kw1">VALUES</span><span class="br0">&#40;</span>@CreditUserID,<span class="kw2">GETDATE</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#41;</span>
&nbsp; &nbsp; GO</pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">CREATE TRIGGER trTestOne ON [dbo].[TestOne]
    FOR INSERT
    AS
    DECLARE @CreditUserID INT
 
    SELECT @CreditUserID = (SELECT ID FROM Inserted)
 
    INSERT TestTwo VALUES(@CreditUserID,GETDATE())
    GO</pre></div></div>

<p>What will be the value that the @@identity function returns after a new insert into the TestOne table?</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
</pre></td><td class="de1"><pre class="de1"><span class="kw1">INSERT</span> TestOne <span class="kw1">VALUES</span><span class="br0">&#40;</span><span class="kw2">GETDATE</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#41;</span>
<span class="kw1">select</span> @@<span class="kw1">identity</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">INSERT TestOne VALUES(GETDATE())
select @@identity</pre></div></div>

<p>So those are the 10 questions for this little quiz. I will post the answers/explanations to these tomorrow, if you are still bored here is a bunch of stuff that you should be familiar with as a SQL Server developer</p>
<p>Update **  I created the answers to these questions and you can find them here: <a href="/index.php/DataMgmt/DataDesign/answers-to-the-sql-server-quiz-can-you-a">Answers To The SQL Server Quiz: Can You Answer All These Post</a></p>
<p><em>What is normalization<br />
What is the fastest way to empty a table<br />
what is a deadlock<br />
Can you give an example of creating a deadlock<br />
How do you detect deadlocks<br />
What is an audit trail<br />
what is an identity column<br />
How many bytes can you fit in a row, do you know why<br />
What is a clustered index<br />
How many clustered indexes per table<br />
How many nonclustered indexes per table<br />
what is an execution plan<br />
Between index scan, index seek and table scan; which one is fastest and which one is slowest<br />
How do you return a value from a proc<br />
How do you return a varchar value from a proc<br />
If I have a column that will only have values between 1 and 250 what data type should I use<br />
How do you enforce that only values between 1 and 10 are allowed in a column<br />
How to check for a valid date<br />
Which date format is the only safe one to use when passing dates as strings<br />
How do you suppress rows affected messages when executing an insert statement<br />
Can you name the 4 isolation levels in SQL Server 2000<br />
How would you select all last names that start with S<br />
How would you select all rows where the date is 20061127<br />
What is horizontal partitioning<br />
What does schemabinding do<br />
How do you test for nulls<br />
Name some differences between isnull and coalesce<br />
What is a temp table<br />
what is the difference between a local and global temporary table<br />
If you create a local temp table and then call a proc is the temp table available inside the proc<br />
What is referential integrity<br />
what is the fastest way to populate a table (performance wise)<br />
using the method above what can you do to make it even faster<br />
What data type should you use to store monetary values<br />
What is a cascade delete<br />
Name a couple of types of joins<br />
What is a SQL injection<br />
What is parameter sniffing<br />
Name 2 differences between a primary key and UNIQUE Constraints<br />
How do you ensure that SQL server will use an index<br />
What does option fast (10) do<br />
What is the difference between union and union all<br />
What does trace flag 1204 do</em></p>
<p>
*** <strong>If you have a SQL related question try our <a href="http://forum.lessthandot.com/viewforum.php?f=17">Microsoft SQL Server Programming</a> forum or our <a href="http://forum.lessthandot.com/viewforum.php?f=22">Microsoft SQL Server Admin</a> forum</strong><ins></ins></p>
]]></content:encoded>
			<wfw:commentRss>/index.php/datamgmt/datadesign/sql-server-quiz-can-you-answer-all-these/feed/</wfw:commentRss>
		<slash:comments>9</slash:comments>
		</item>
	</channel>
</rss>
