<?xml version="1.0" encoding="UTF-8"?><rss version="2.0"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:atom="http://www.w3.org/2005/Atom"
	xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
	xmlns:slash="http://purl.org/rss/1.0/modules/slash/"
	>

<channel>
	<title>data types &#8211; LessthanDot</title>
	<atom:link href="/index.php/tag/data-types/feed/" rel="self" type="application/rss+xml" />
	<link>/</link>
	<description>A Technical Community for IT Professionals</description>
	<lastBuildDate>Sat, 09 Mar 2019 12:50:36 +0000</lastBuildDate>
	<language>en-US</language>
	<sy:updatePeriod>hourly</sy:updatePeriod>
	<sy:updateFrequency>1</sy:updateFrequency>
	<generator>https://wordpress.org/?v=4.6.1</generator>
	<item>
		<title>SQL Server Data Type Conversion Poster is available for download</title>
		<link>/index.php/datamgmt/dbprogramming/sql-server-data-type-conversion/</link>
		<comments>/index.php/datamgmt/dbprogramming/sql-server-data-type-conversion/#comments</comments>
		<pubDate>Sat, 08 Dec 2012 15:44:00 +0000</pubDate>
		<dc:creator><![CDATA[SQLDenis]]></dc:creator>
				<category><![CDATA[Business Intelligence]]></category>
		<category><![CDATA[Database Programming]]></category>
		<category><![CDATA[Microsoft SQL Server]]></category>
		<category><![CDATA[Microsoft SQL Server Admin]]></category>
		<category><![CDATA[chart]]></category>
		<category><![CDATA[conversions]]></category>
		<category><![CDATA[data types]]></category>
		<category><![CDATA[pdf]]></category>
		<category><![CDATA[poster]]></category>
		<category><![CDATA[sql server 2012]]></category>

		<guid isPermaLink="false">/index.php/2012/12/sql-server-data-type-conversion/</guid>
		<description><![CDATA[Microsoft has made available two pdf files with a nice chart of all the data type conversions. It is pretty much the chart that belongs to the topic CAST and CONVERT (Transact-SQL). Now you have a way of printing a nice looking chart so that you can alw&#8230;]]></description>
				<content:encoded><![CDATA[<p>Microsoft has made available two pdf files with a nice chart of all the data type conversions. It is pretty much the chart that belongs to the topic <a href="http://msdn.microsoft.com/en-us/library/ms187928.aspx">CAST and CONVERT (Transact-SQL)</a>. Now you have a way of printing a nice looking chart so that you can always reference this. I think this is a great idea, Microsoft should make more of these.</p>
<p>The two files are <em>SQL Server Data Type Conversion Chart.pdf</em> which is 1.7 MB, and <em>SQL Server Data Type Conversion Chart_grayscale.pdf</em> which is 1.6 MB</p>
<p>Here is a small image of what the color one looks like</p>
<div class="image_block"><a href="/wp-content/uploads/blogs/DataMgmt/Denis/Data typeConversion chart.PNG?mtime=1354988302"><img alt="SQL Server Data Type Conversion Poster" src="/wp-content/uploads/blogs/DataMgmt/Denis/Data typeConversion chart.PNG?mtime=1354988302" width="362" height="550" /></a></div>
<p>The files can be downloaded here: http://www.microsoft.com/en-us/download/details.aspx?id=35834</p>
]]></content:encoded>
			<wfw:commentRss>/index.php/datamgmt/dbprogramming/sql-server-data-type-conversion/feed/</wfw:commentRss>
		<slash:comments>1</slash:comments>
		</item>
		<item>
		<title>SQL Advent 2011 Day 17: varchar(max)</title>
		<link>/index.php/datamgmt/datadesign/sql-advent-2011-day-17/</link>
		<comments>/index.php/datamgmt/datadesign/sql-advent-2011-day-17/#respond</comments>
		<pubDate>Sat, 17 Dec 2011 17:40:00 +0000</pubDate>
		<dc:creator><![CDATA[SQLDenis]]></dc:creator>
				<category><![CDATA[Data Modelling and Design]]></category>
		<category><![CDATA[Database Programming]]></category>
		<category><![CDATA[Microsoft SQL Server]]></category>
		<category><![CDATA[Microsoft SQL Server Admin]]></category>
		<category><![CDATA[data types]]></category>
		<category><![CDATA[ntext]]></category>
		<category><![CDATA[nvarchar(max)]]></category>
		<category><![CDATA[sql server 2005]]></category>
		<category><![CDATA[sql server 2008]]></category>
		<category><![CDATA[text]]></category>
		<category><![CDATA[varchar(max)]]></category>

		<guid isPermaLink="false">/index.php/2011/12/sql-advent-2011-day-17/</guid>
		<description><![CDATA[Today we are going to take a look at varchar(max). Instead of using the text and ntext data types, you should get into the habit of using varchar(max) and nvarchar(max)]]></description>
				<content:encoded><![CDATA[<p>In my <a href="/index.php/DataMgmt/DataDesign/are-you-ready-for-sql">Are you ready for SQL Server 2012 or are you still partying like it is 1999?</a> post, I wrote about how you should start using SQL Server 2005 and SQL Server 2008 functionality now in order to prepare for SQL Server 2012. I still see tons of code that is written in the pre 2005 style and people still keep using those functions, procs and statements even though SQL Server 2005 and 2008 have much better functionality.</p>
<p>Today we are going to take a look at varchar(max). Instead of using the text and ntext data types, you should get into the habit of using varchar(max) and nvarchar(max). Varchar(max) and nvarchar(max) were introduced in SQL Server 2005</p>
<p>The ntext, text, and image data types will be removed in a future version of Microsoft SQL Server. Avoid using these data types in new development work, and plan to modify applications that currently use them. Use nvarchar(max), varchar(max), and varbinary(max) instead.</p>
<blockquote><p>varchar [ ( n | max ) ]<br />
Variable-length, non-Unicode character data. n can be a value from 1 through 8,000. <strong>max </strong>indicates that the maximum storage size is 2^31-1 bytes. The storage size is the actual length of data entered + 2 bytes. The data entered can be 0 characters in length. The ISO synonyms for varchar are char varying or character varying.</p>
<p>nvarchar [ ( n | max ) ]<br />
Variable-length Unicode character data. ncan be a value from 1 through 4,000. <strong>max </strong>indicates that the maximum storage size is 2^31-1 bytes. The storage size, in bytes, is two times the number of characters entered + 2 bytes. The data entered can be 0 characters in length. The ISO synonyms for nvarchar are national char varying and national character varying</p></blockquote>
<p>If you have ever worked with text or ntext then you probably came to love the READTEXT, UPDATETEXT, TEXTPTR, WRITETEXT and TEXTVALID functions&#8230;&#8230;.NOT!!</p>
<p>When using varchar(max) you can also use functions that don&#8217;t work on text like LEN and LEFT</p>
<p>Let&#8217; s write some code to see what I mean. The following block of code will create one table with one row and two columns. One column is the text data type, the other column is varchar(max). Both columns will have 100000 charaters</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
</pre></td><td class="de1"><pre class="de1"><span class="kw1">CREATE</span> <span class="kw1">TABLE</span> TestMax<span class="br0">&#40;</span>SomeVar <span class="kw1">varchar</span><span class="br0">&#40;</span><span class="kw2">max</span><span class="br0">&#41;</span>, SomeText <span class="kw1">text</span><span class="br0">&#41;</span>
GO
&nbsp;
<span class="kw1">DECLARE</span> @v <span class="kw1">varchar</span><span class="br0">&#40;</span><span class="kw2">max</span><span class="br0">&#41;</span>
<span class="kw1">SELECT</span> @v <span class="sy0">=</span> <span class="kw2">REPLICATE</span><span class="br0">&#40;</span><span class="kw1">CONVERT</span><span class="br0">&#40;</span><span class="kw1">varchar</span><span class="br0">&#40;</span><span class="kw2">max</span><span class="br0">&#41;</span>,<span class="st0">'a'</span><span class="br0">&#41;</span>,<span class="nu0">100000</span><span class="br0">&#41;</span>
&nbsp;
<span class="kw1">INSERT</span> TestMax <span class="kw1">VALUES</span><span class="br0">&#40;</span>@v,@v<span class="br0">&#41;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">CREATE TABLE TestMax(SomeVar varchar(max), SomeText text)
GO

DECLARE @v varchar(max)
SELECT @v = REPLICATE(CONVERT(varchar(max),'a'),100000)

INSERT TestMax VALUES(@v,@v)</pre></div></div>

<p>Now to do a quick LEN for the varchar(max) column, there is no problem</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
</pre></td><td class="de1"><pre class="de1"><span class="kw1">SELECT</span> <span class="kw2">LEN</span><span class="br0">&#40;</span>SomeVar<span class="br0">&#41;</span> <span class="kw1">FROM</span> TestMax</pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">SELECT LEN(SomeVar) FROM TestMax</pre></div></div>

<p>Output<br />
&#8212;&#8212;&#8211;<br />
100000</p>
<p>If you do the same for the SomeText text column</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
</pre></td><td class="de1"><pre class="de1"><span class="kw1">SELECT</span> <span class="kw2">LEN</span><span class="br0">&#40;</span>SomeText<span class="br0">&#41;</span> <span class="kw1">FROM</span> TestMax</pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">SELECT LEN(SomeText) FROM TestMax</pre></div></div>

<p>You get the following error<br />
<em>Msg 8116, Level 16, State 1, Line 1<br />
Argument data type text is invalid for argument 1 of len function.</em></p>
<p>Changing LEN to DATALENGTH will work for the text data type</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
</pre></td><td class="de1"><pre class="de1"><span class="kw1">SELECT</span> DATALENGTH<span class="br0">&#40;</span>SomeText<span class="br0">&#41;</span> <span class="kw1">from</span> TestMax</pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">SELECT DATALENGTH(SomeText) from TestMax</pre></div></div>

<p>Output<br />
&#8212;&#8212;&#8211;<br />
100000</p>
<p>Another function that doesn&#8217;t work with text but does work with varchar(max) is LEFT</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
</pre></td><td class="de1"><pre class="de1"><span class="kw1">SELECT</span> <span class="kw1">LEFT</span><span class="br0">&#40;</span>SomeVar,<span class="nu0">1</span><span class="br0">&#41;</span> <span class="kw1">FROM</span> TestMax</pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">SELECT LEFT(SomeVar,1) FROM TestMax</pre></div></div>

<p>Output<br />
&#8212;&#8212;&#8211;<br />
a</p>
<p>If you try the LEFT function with the text datatype, you get an error</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
</pre></td><td class="de1"><pre class="de1"><span class="kw1">SELECT</span> <span class="kw1">LEFT</span><span class="br0">&#40;</span>SomeText,<span class="nu0">1</span><span class="br0">&#41;</span> <span class="kw1">FROM</span> TestMax</pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">SELECT LEFT(SomeText,1) FROM TestMax</pre></div></div>

<p>Msg 8116, Level 16, State 1, Line 1<br />
Argument data type text is invalid for argument 1 of left function.</p>
<p>The SUBSTRING function does work, so you can use this instead</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
</pre></td><td class="de1"><pre class="de1"><span class="kw1">SELECT</span> <span class="kw2">SUBSTRING</span><span class="br0">&#40;</span>SomeText,<span class="nu0">1</span>,<span class="nu0">1</span><span class="br0">&#41;</span> <span class="kw1">FROM</span> TestMax</pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">SELECT SUBSTRING(SomeText,1,1) FROM TestMax</pre></div></div>

<p>Output<br />
&#8212;&#8212;&#8211;<br />
a</p>
<p>Let&#8217;s add 1 character to the column, look how easy it is for varchar(max)</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
</pre></td><td class="de1"><pre class="de1"><span class="kw1">UPDATE</span> TestMax
<span class="kw1">SET</span> SomeVar <span class="sy0">=</span> SomeVar <span class="sy0">+</span> <span class="st0">'Z'</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">UPDATE TestMax
SET SomeVar = SomeVar + 'Z'</pre></div></div>


<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
</pre></td><td class="de1"><pre class="de1"><span class="kw1">SELECT</span> <span class="kw2">REVERSE</span><span class="br0">&#40;</span>SomeVar<span class="br0">&#41;</span>
<span class="kw1">FROM</span> TestMax</pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">SELECT REVERSE(SomeVar)
FROM TestMax</pre></div></div>

<p>Output<br />
&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;-<br />
Zaaaaaaaaaaaaaaaaaa&#8230;..</p>
<p>Now, let&#8217;s try to do that with the text data type</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
</pre></td><td class="de1"><pre class="de1"><span class="kw1">UPDATE</span> TestMax
<span class="kw1">SET</span> SomeText <span class="sy0">=</span> SomeText <span class="sy0">+</span> <span class="st0">'Z'</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">UPDATE TestMax
SET SomeText = SomeText + 'Z'</pre></div></div>

<p><em>Msg 402, Level 16, State 1, Line 1<br />
The data types text and varchar are incompatible in the add operator.</em></p>
<p>Yep, kinda like that&#8230;you need to use the UPDATETEXT, TEXTPTR functions, these are a pain in the neck to use</p>
<p>Make a habit of changing your code to use varchar(max) and nvarchar(max) instead of text and ntext, not only is it easier to use but text and ntext have been deprecated</p>
<p>COme back tomorrow for another post in these series</p>
]]></content:encoded>
			<wfw:commentRss>/index.php/datamgmt/datadesign/sql-advent-2011-day-17/feed/</wfw:commentRss>
		<slash:comments>0</slash:comments>
		</item>
		<item>
		<title>Be careful when passing around parameters, make sure they are the same size and type</title>
		<link>/index.php/datamgmt/datadesign/be-careful-when-passing-around/</link>
		<comments>/index.php/datamgmt/datadesign/be-careful-when-passing-around/#comments</comments>
		<pubDate>Fri, 08 Apr 2011 15:33:00 +0000</pubDate>
		<dc:creator><![CDATA[SQLDenis]]></dc:creator>
				<category><![CDATA[Data Modelling and Design]]></category>
		<category><![CDATA[Database Programming]]></category>
		<category><![CDATA[Microsoft SQL Server]]></category>
		<category><![CDATA[Microsoft SQL Server Admin]]></category>
		<category><![CDATA[best practice]]></category>
		<category><![CDATA[data types]]></category>
		<category><![CDATA[gotcha]]></category>
		<category><![CDATA[pitfalls]]></category>
		<category><![CDATA[sql server]]></category>

		<guid isPermaLink="false">/index.php/2011/04/be-careful-when-passing-around/</guid>
		<description><![CDATA[Someone tried to figure out why his data was showing the next day when he passed in today's date. If you are not careful to use the same data type and this includes scale and precision as well, you can get some strange results. In this post I will take&#8230;]]></description>
				<content:encoded><![CDATA[<p>Someone tried to figure out why his data was showing the next day when he passed in today&#8217;s date. If you are not careful to use the same data type and this includes scale and precision as well, you can get some strange results. In this post I will take a look at date, integer, varchar and decimal data types </p>
<p></p>
<h2>Dates</h2>
<p>When using dates make sure that you are using the same data type, don&#8217;t mix datetime and smalldatetime. If you do, you can get some unexpected results, let&#8217;s take a look</p>
<p>First create this table with a datetime column</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
</pre></td><td class="de1"><pre class="de1"><span class="kw1">CREATE</span> <span class="kw1">TABLE</span> TestDatetime<span class="br0">&#40;</span>SomeDate <span class="kw1">DATETIME</span><span class="br0">&#41;</span>
GO</pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">CREATE TABLE TestDatetime(SomeDate DATETIME)
GO</pre></div></div>

<p>Now create this proc which accepts a smalldatetime</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
</pre></td><td class="de1"><pre class="de1"><span class="kw1">CREATE</span> <span class="kw1">PROC</span> prTestDatetime
@SomeDate <span class="kw1">SMALLDATETIME</span>
<span class="kw1">AS</span> 
&nbsp;
<span class="kw1">INSERT</span> TestDatetime <span class="kw1">VALUES</span><span class="br0">&#40;</span>@SomeDate<span class="br0">&#41;</span>
&nbsp;
GO</pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">CREATE PROC prTestDatetime
@SomeDate SMALLDATETIME
AS 

INSERT TestDatetime VALUES(@SomeDate)

GO</pre></div></div>

<p>Now call the procedure with the following value</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
</pre></td><td class="de1"><pre class="de1"><span class="kw1">DECLARE</span> @d <span class="kw1">DATETIME</span>
<span class="kw1">SELECT</span> @d <span class="sy0">=</span> <span class="st0">'2011-04-04 23:59:59.000'</span>
&nbsp;
&nbsp;
<span class="kw1">EXEC</span> prTestDatetime @d
GO</pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">DECLARE @d DATETIME
SELECT @d = '2011-04-04 23:59:59.000'


EXEC prTestDatetime @d
GO</pre></div></div>

<p>When you check the table now you will see that it has become the next day</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
</pre></td><td class="de1"><pre class="de1"><span class="kw1">SELECT</span> <span class="sy0">*</span> <span class="kw1">FROM</span> TestDatetime</pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">SELECT * FROM TestDatetime</pre></div></div>

<p>2011-04-05 00:00:00.000</p>
<p>The query below will illustrate the same problem</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
</pre></td><td class="de1"><pre class="de1"><span class="kw1">DECLARE</span> @d <span class="kw1">DATETIME</span>
<span class="kw1">SELECT</span> @d <span class="sy0">=</span> <span class="st0">'2011-04-04 23:59:59.000'</span>
<span class="kw1">SELECT</span> <span class="kw1">CONVERT</span><span class="br0">&#40;</span><span class="kw1">DATETIME</span>,@d<span class="br0">&#41;</span>, <span class="kw1">CONVERT</span><span class="br0">&#40;</span><span class="kw1">SMALLDATETIME</span>,@d<span class="br0">&#41;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">DECLARE @d DATETIME
SELECT @d = '2011-04-04 23:59:59.000'
SELECT CONVERT(DATETIME,@d), CONVERT(SMALLDATETIME,@d)</pre></div></div>

<p>Output<br />
&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;-<br />
2011-04-04 23:59:59.000	2011-04-05 00:00:00</p>
<p>What happens is because smalldatetime is accurate to 1 minute, it rounds up to the next hour and thus it becomes the next day<br />
Usually stuff like this happens where the table gets changed but someone forgot to also change the procedure, it could take a while until you catch a bug like this because unless you are passing in the last minute of the hour you won&#8217;t see it&#8230;however the fact that the seconds are all 00 should give it away<br />
</p>
<h2>Integer data type</h2>
<p>When dealing with integers, you are in luck because it will just blow up in your face</p>
<p>Create this stored procedure</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
</pre></td><td class="de1"><pre class="de1"><span class="kw1">CREATE</span> <span class="kw1">PROC</span> prTestInt
@Someint <span class="kw1">smallint</span>
<span class="kw1">AS</span> 
&nbsp;
<span class="kw1">SELECT</span> @Someint
GO</pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">CREATE PROC prTestInt
@Someint smallint
AS 

SELECT @Someint
GO</pre></div></div>

<p>Run it by passing in something that is greater than the small integer data type can hold</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
</pre></td><td class="de1"><pre class="de1"><span class="kw1">DECLARE</span> @i <span class="kw1">int</span>
<span class="kw1">SELECT</span> @i <span class="sy0">=</span> <span class="nu0">99999</span>
&nbsp;
&nbsp;
<span class="kw1">EXEC</span> prTestInt @i
GO</pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">DECLARE @i int
SELECT @i = 99999


EXEC prTestInt @i
GO</pre></div></div>

<p>And here is the error.</p>
<p><em>Msg 8114, Level 16, State 5, Procedure prTestInt, Line 0<br />
Error converting data type int to smallint.</em></p>
<p>This is a good thing, you will be able to catch this immediately. At least it doesn&#8217;t do a negative overflow like in some languages</p>
<p></p>
<h2>varchar, nvarchar, char and nchar</h2>
<p>varchar, nvarchar, char and nchar have a bunch of interesting inconsistencies, this can really bite you if you are not careful</p>
<p>Here is one example, create the following procedure</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
</pre></td><td class="de1"><pre class="de1"><span class="kw1">CREATE</span> <span class="kw1">PROC</span> prTestVarchar
@Somevarchar <span class="kw1">varchar</span><span class="br0">&#40;</span><span class="nu0">3</span><span class="br0">&#41;</span>
<span class="kw1">AS</span> 
&nbsp;
<span class="kw1">SELECT</span> @Somevarchar
GO</pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">CREATE PROC prTestVarchar
@Somevarchar varchar(3)
AS 

SELECT @Somevarchar
GO</pre></div></div>

<p>Now run it like this</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
</pre></td><td class="de1"><pre class="de1"><span class="kw1">DECLARE</span> @v <span class="kw1">VARCHAR</span><span class="br0">&#40;</span><span class="nu0">10</span><span class="br0">&#41;</span>
<span class="kw1">SELECT</span> @v <span class="sy0">=</span> <span class="st0">'9999999999'</span>
&nbsp;
&nbsp;
<span class="kw1">EXEC</span> prTestVarchar @v
GO</pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">DECLARE @v VARCHAR(10)
SELECT @v = '9999999999'


EXEC prTestVarchar @v
GO</pre></div></div>

<p>Output<br />
&#8212;&#8212;&#8212;<br />
999</p>
<p>Since you specified varchar(3), SQL Server trims everything over 3 bytes</p>
<p>What if you just use varchar?<br />
People coming from languages where you define something as a string usually make this mistake. Take a look at this: <a href="http://stackoverflow.com/questions/5559582/issue-inserting-text-into-table-from-c-proc-parameter/5559609#5559609">Issue inserting text into table from c# proc parameter</a></p>
<p>Create the following stored procedure</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
</pre></td><td class="de1"><pre class="de1"><span class="kw1">CREATE</span> <span class="kw1">PROC</span> prTestVarchar2
@Somevarchar <span class="kw1">varchar</span>
<span class="kw1">AS</span> 
&nbsp;
<span class="kw1">SELECT</span> @Somevarchar
GO</pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">CREATE PROC prTestVarchar2
@Somevarchar varchar
AS 

SELECT @Somevarchar
GO</pre></div></div>

<p>Run the proc</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
</pre></td><td class="de1"><pre class="de1"><span class="kw1">DECLARE</span> @v <span class="kw1">VARCHAR</span><span class="br0">&#40;</span><span class="nu0">10</span><span class="br0">&#41;</span>
<span class="kw1">SELECT</span> @v <span class="sy0">=</span> <span class="st0">'9999999999'</span>
&nbsp;
&nbsp;
<span class="kw1">EXEC</span> prTestVarchar2 @v
GO</pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">DECLARE @v VARCHAR(10)
SELECT @v = '9999999999'


EXEC prTestVarchar2 @v
GO</pre></div></div>

<p>Output<br />
&#8212;&#8212;&#8211;<br />
9</p>
<p>In this case SQL Server used a size of 1 since nothing was specified. However when you use varchar in a cast or convert function and you don&#8217;t specify a size, it will default to 30 characters</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
</pre></td><td class="de1"><pre class="de1"><span class="kw1">SELECT</span> <span class="kw1">CONVERT</span><span class="br0">&#40;</span><span class="kw1">VARCHAR</span>,<span class="st0">'1111111111222222222233333333334'</span><span class="br0">&#41;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">SELECT CONVERT(VARCHAR,'1111111111222222222233333333334')</pre></div></div>

<p>111111111122222222223333333333</p>
<p>As you can see, the last character is not displayed<br />
Take also a look at this post <a href="/index.php/DataMgmt/DBProgramming/MSSQLServer/always-include-size-when-using-varchar-n">Always include size when using varchar, nvarchar, char and nchar</a> by George Mastros and this post <a href="http://sqlblog.com/blogs/aaron_bertrand/archive/2009/10/09/bad-habits-to-kick-declaring-varchar-without-length.aspx">Bad habits to kick : declaring VARCHAR without (length)</a> by Aaron Bertrand for some more info</p>
<p></p>
<h2>Decimal/Numeric</h2>
<p>Decimal (or numeric) will round down or up if it can&#8217;t hold the whole value<br />
Take a look by running this</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
</pre></td><td class="de1"><pre class="de1"><span class="kw1">DECLARE</span> @d <span class="kw1">DECIMAL</span><span class="br0">&#40;</span><span class="nu0">4</span>,<span class="nu0">3</span><span class="br0">&#41;</span>
<span class="kw1">DECLARE</span> @d2 <span class="kw1">DECIMAL</span><span class="br0">&#40;</span><span class="nu0">4</span>,<span class="nu0">2</span><span class="br0">&#41;</span>
<span class="kw1">SELECT</span> @d <span class="sy0">=</span> <span class="nu0">1.999</span>
&nbsp;
<span class="kw1">SELECT</span> @d2 <span class="sy0">=</span> @d
&nbsp;
<span class="kw1">SELECT</span> @d,@d2</pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">DECLARE @d DECIMAL(4,3)
DECLARE @d2 DECIMAL(4,2)
SELECT @d = 1.999

SELECT @d2 = @d

SELECT @d,@d2</pre></div></div>

<p>Output<br />
&#8212;&#8212;&#8212;&#8212;-<br />
1.999	2.00</p>
<p>As you can see 1.999 will round up to 2.00 if your scale is less than the number of digits passed in</p>
<p>If you have to do multiplication you have to be extra careful and have enough space to avoid rounding issues, I deal with this all the time because we have to show 10 digits for scale.</p>
<p>Decimal and numeric will default to (18,0) if you don&#8217;t specify anything when declaring them, see this post <a href="/index.php/DataMgmt/DataDesign/decimal-and-numeric-problems-when-you-do">Decimal and Numeric problems when you don&#8217;t specify precision and scale</a> by George Mastros for more info, no need for me to repeat the same.</p>
<h1>Conclusion</h1>
<p>Make sure that your data types or data type sizes are the same for variables/parameters and tables, if they are not, you might not notice the problem right away and it can be a real pain in the neck to make the change down the road</p>
<p>*** <strong>Remember, if you have a SQL related question, try our <a href="http://forum.lessthandot.com/viewforum.php?f=17">Microsoft SQL Server Programming</a> forum or our <a href="http://forum.lessthandot.com/viewforum.php?f=22">Microsoft SQL Server Admin</a> forum</strong><ins></ins></p>
]]></content:encoded>
			<wfw:commentRss>/index.php/datamgmt/datadesign/be-careful-when-passing-around/feed/</wfw:commentRss>
		<slash:comments>1</slash:comments>
		</item>
	</channel>
</rss>
