<?xml version="1.0" encoding="UTF-8"?><rss version="2.0"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:atom="http://www.w3.org/2005/Atom"
	xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
	xmlns:slash="http://purl.org/rss/1.0/modules/slash/"
	>

<channel>
	<title>knockout &#8211; LessthanDot</title>
	<atom:link href="/index.php/tag/knockout/feed/" rel="self" type="application/rss+xml" />
	<link>/</link>
	<description>A Technical Community for IT Professionals</description>
	<lastBuildDate>Sat, 09 Mar 2019 12:50:36 +0000</lastBuildDate>
	<language>en-US</language>
	<sy:updatePeriod>hourly</sy:updatePeriod>
	<sy:updateFrequency>1</sy:updateFrequency>
	<generator>https://wordpress.org/?v=4.6.1</generator>
	<item>
		<title>MVVM &#8211; The User as an Asynchronous API (w/ Knockout)</title>
		<link>/index.php/webdev/mvvm-the-user-as-an-asynchronous-api/</link>
		<comments>/index.php/webdev/mvvm-the-user-as-an-asynchronous-api/#respond</comments>
		<pubDate>Fri, 18 Mar 2016 12:38:37 +0000</pubDate>
		<dc:creator><![CDATA[Eli Weinstock-Herman (tarwn)]]></dc:creator>
				<category><![CDATA[Web Developer]]></category>
		<category><![CDATA[knockout]]></category>
		<category><![CDATA[mvvm]]></category>
		<category><![CDATA[Promises]]></category>

		<guid isPermaLink="false">/?p=4438</guid>
		<description><![CDATA[Early into development of a fairly large modular SPA, we found ourselves needing to ask the user a series of complex questions during a complex chain of business logic. We built a quick little ViewModel and template to display to the user, added some assignable callbacks that it would generate buttons for, and called it [&#8230;]]]></description>
				<content:encoded><![CDATA[<p>Early into development of a fairly large modular SPA, we found ourselves needing to ask the user a series of complex questions during a complex chain of business logic. We built a quick little ViewModel and template to display to the user, added some assignable callbacks that it would generate buttons for, and called it good.</p>
<p>Except it wasn&#8217;t.</p>
<p>The first issue we ran into was the difficulty in writing tests around this already incredibly complex business case and trying to fake expected user interaction with the callbacks. The next issue was how difficult it was for the next developer (and sometimes just us, a week later) to figure out which magic properties had to be set for dialogs to work correctly. Then we noticed that debugging was about 100x harder than we expected. So we went back to the drawing board.</p>
<p>Somewhere between looking into examples that use promises and talking through how a perfect test would look, we came upon something profound (to us at least): &#8220;the user is an asynchronous API&#8221;.</p>
<div style="background-color: #eeeeee; margin: .5em; margin-bottom: 1.5em; padding: .5em">Like the <a href="/index.php/webdev/mvvm-validation-with-knockoutjs-dont-put-it-in-the-viewhtml/" title="MVVM Validation with KnockoutJS – Don’t put it in the View/HTML">prior post</a>, the &#8220;Large modular SPA&#8221; in this case was a complete replatform of a 300+ KLOC Silverlight application with 30+ discrete screens ranging from &#8220;simple&#8221; in-screen search results that make IE tables weep, to complex SVG dashboards, to a multi-tabbed screen that can scale from 50 inputs to 1000&#8217;s, depending on the complexity of the user and their use case. </div>
<p>Th fulle sample code for these posts is on github here: <a href="https://github.com/tarwn/Blog_KnockoutMVVMPatterns/tree/master/userDialogs" title="tarwn/Blog_KnockoutMVVMPatterns/tree/master/userDialogs on github">tarwn/Blog_KnockoutMVVMPatterns</a></p>
<h2>An Example of Promises and API calls</h2>
<p>Let&#8217;s start with a sample of what it looks like when we call a regular server-side API.</p>
<div id="attachment_4454" style="width: 439px" class="wp-caption aligncenter"><a href="/wp-content/uploads/2016/03/ShippingForm.png"><img src="/wp-content/uploads/2016/03/ShippingForm.png" alt="Sample Shipping Address Form" width="429" height="299" class="size-full wp-image-4454" srcset="/wp-content/uploads/2016/03/ShippingForm.png 429w, /wp-content/uploads/2016/03/ShippingForm-300x209.png 300w" sizes="(max-width: 429px) 100vw, 429px" /></a><p class="wp-caption-text">Sample Shipping Address Form</p></div>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="html4strict"><thead><tr><td colspan="2"  class="head">HTML</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
</pre></td><td class="de1"><pre class="de1"><span class="sc2">&lt;<span class="kw2">h1</span>&gt;</span>A Basic Form + Fake API Call (Save Button)<span class="sc2">&lt;<span class="sy0">/</span><span class="kw2">h1</span>&gt;</span>
<span class="sc2">&lt;<span class="kw2">div</span> <span class="kw3">class</span><span class="sy0">=</span><span class="st0">&quot;form-area&quot;</span> data-bind<span class="sy0">=</span><span class="st0">&quot;with: shippingForm&quot;</span>&gt;</span>
&nbsp; &nbsp; <span class="sc2">&lt;<span class="kw2">h3</span>&gt;</span>Shipping Information<span class="sc2">&lt;<span class="sy0">/</span><span class="kw2">h3</span>&gt;</span>
&nbsp;
&nbsp; &nbsp; <span class="sc2">&lt;<span class="kw2">label</span> <span class="kw3">for</span><span class="sy0">=</span><span class="st0">&quot;txtName&quot;</span>&gt;</span>Name<span class="sc2">&lt;<span class="sy0">/</span><span class="kw2">label</span>&gt;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="sc2">&lt;<span class="kw2">input</span> <span class="kw3">type</span><span class="sy0">=</span><span class="st0">&quot;text&quot;</span> <span class="kw3">id</span><span class="sy0">=</span><span class="st0">&quot;txtName&quot;</span> data-bind<span class="sy0">=</span><span class="st0">&quot;value: newEntry().name&quot;</span> <span class="sy0">/</span>&gt;&lt;<span class="kw2">br</span> <span class="sy0">/</span>&gt;</span>
&nbsp;
&nbsp; &nbsp; <span class="sc-1">&lt;!-- ... etc ... --&gt;</span>
&nbsp;
&nbsp; &nbsp; <span class="sc2">&lt;<span class="kw2">div</span> <span class="kw3">class</span><span class="sy0">=</span><span class="st0">&quot;button-strip&quot;</span>&gt;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="sc2">&lt;<span class="kw2">input</span> <span class="kw3">type</span><span class="sy0">=</span><span class="st0">&quot;button&quot;</span> data-bind<span class="sy0">=</span><span class="st0">&quot;click: save, disable: isSaving, value: saveText&quot;</span> <span class="sy0">/</span>&gt;</span>
&nbsp; &nbsp; <span class="sc2">&lt;<span class="sy0">/</span><span class="kw2">div</span>&gt;</span>
<span class="sc2">&lt;<span class="sy0">/</span><span class="kw2">div</span>&gt;</span>
&nbsp;
<span class="sc2">&lt;<span class="kw2">script</span> <span class="kw3">type</span><span class="sy0">=</span><span class="st0">&quot;text/javascript&quot;</span>&gt;</span>
&nbsp;
//- Shipping Form Example
function ShippingFormViewModel(dataService){
&nbsp; &nbsp; var self = this;
&nbsp;
&nbsp; &nbsp; // ...
&nbsp;
&nbsp; &nbsp; self.save = function(){
&nbsp; &nbsp; &nbsp; &nbsp; if(self.isSaving())
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; return;
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; self.isSaving(true);
&nbsp; &nbsp; &nbsp; &nbsp; self.saveStatus(&quot;Saving...&quot;);
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; dataService.saveShippingAddress(self.newEntry())
&nbsp; &nbsp; &nbsp; &nbsp; .then(function(status){
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; self.isSaving(false);
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; self.saveStatus(status);
&nbsp; &nbsp; &nbsp; &nbsp; })
&nbsp; &nbsp; &nbsp; &nbsp; 
&nbsp; &nbsp; &nbsp; &nbsp; // ...
&nbsp; &nbsp; };
}
&nbsp;
<span class="sc2">&lt;<span class="sy0">/</span><span class="kw2">script</span>&gt;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">&lt;h1&gt;A Basic Form + Fake API Call (Save Button)&lt;/h1&gt;
&lt;div class="form-area" data-bind="with: shippingForm"&gt;
	&lt;h3&gt;Shipping Information&lt;/h3&gt;

	&lt;label for="txtName"&gt;Name&lt;/label&gt;
		&lt;input type="text" id="txtName" data-bind="value: newEntry().name" /&gt;&lt;br /&gt;

	&lt;!-- ... etc ... --&gt;

	&lt;div class="button-strip"&gt;
		&lt;input type="button" data-bind="click: save, disable: isSaving, value: saveText" /&gt;
	&lt;/div&gt;
&lt;/div&gt;

&lt;script type="text/javascript"&gt;

//- Shipping Form Example
function ShippingFormViewModel(dataService){
	var self = this;

	// ...

	self.save = function(){
		if(self.isSaving())
			return;

		self.isSaving(true);
		self.saveStatus("Saving...");

		dataService.saveShippingAddress(self.newEntry())
		.then(function(status){
			self.isSaving(false);
			self.saveStatus(status);
		})
		
		// ...
	};
}

&lt;/script&gt;</pre></div></div>

<p>Clicking the &#8220;Save&#8221; button updates some local values that will be used to modify the display, then calls saveShippingAddress on the service, which returns a promise. Once that service call is complete and the promise is resolved successfully, the display is updated again accordingly. </p>
<p>A test for the save method could then look like this:</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="javascript"><thead><tr><td colspan="2"  class="head">Javascript</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
</pre></td><td class="de1"><pre class="de1">it<span class="br0">&#40;</span><span class="st0">&quot;clears saving status when server save is successful&quot;</span><span class="sy0">,</span> <span class="kw1">function</span><span class="br0">&#40;</span>done<span class="br0">&#41;</span><span class="br0">&#123;</span>
&nbsp; &nbsp; <span class="co1">// arrange</span>
&nbsp; &nbsp; <span class="kw1">var</span> fakeService <span class="sy0">=</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; saveShippingAddress<span class="sy0">:</span> <span class="kw1">function</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#123;</span> <span class="kw1">return</span> Promise.<span class="me1">resolve</span><span class="br0">&#40;</span><span class="st0">'Success'</span><span class="br0">&#41;</span><span class="sy0">;</span> <span class="br0">&#125;</span>
&nbsp; &nbsp; <span class="br0">&#125;</span><span class="sy0">;</span>
&nbsp; &nbsp; <span class="kw1">var</span> vm <span class="sy0">=</span> <span class="kw1">new</span> ShippingFormViewModel<span class="br0">&#40;</span>fakeService<span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; <span class="co1">// act</span>
&nbsp; &nbsp; <span class="kw1">var</span> afterSave <span class="sy0">=</span> vm.<span class="me1">save</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; 
&nbsp; &nbsp; <span class="co1">// assert</span>
&nbsp; &nbsp; afterSave.<span class="me1">then</span><span class="br0">&#40;</span><span class="kw1">function</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#123;</span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 
&nbsp; &nbsp; &nbsp; &nbsp; expect<span class="br0">&#40;</span>vm.<span class="me1">saveStatus</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#41;</span>.<span class="me1">toBeNull</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; expect<span class="br0">&#40;</span>vm.<span class="me1">isSaving</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#41;</span>.<span class="me1">toBe</span><span class="br0">&#40;</span><span class="kw2">false</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; <span class="br0">&#125;</span><span class="br0">&#41;</span>.<span class="kw1">finally</span><span class="br0">&#40;</span>done<span class="sy0">,</span> done.<span class="me1">fail</span><span class="br0">&#41;</span><span class="sy0">;</span>
<span class="br0">&#125;</span><span class="br0">&#41;</span><span class="sy0">;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">it("clears saving status when server save is successful", function(done){
	// arrange
	var fakeService = {
		saveShippingAddress: function(){ return Promise.resolve('Success'); }
	};
	var vm = new ShippingFormViewModel(fakeService);

	// act
	var afterSave = vm.save();
	
	// assert
	afterSave.then(function(){			
		expect(vm.saveStatus()).toBeNull();
		expect(vm.isSaving()).toBe(false);
	}).finally(done, done.fail);
});</pre></div></div>

<p>The services are passed into the ViewModel when it&#8217;s created, keeping that logic separate and easy to maintain or change. We can write unit tests that pass in a fake version of the service, ready to pass a specific good or bad result, and ensure our business logic in the ViewModel continues to match our intent as the rest of the team extends it.</p>
<h2>Promises and User Dialogs</h2>
<p>The services for an API call are built as injectable components that we can easily fake and pre-program with good and bad responses for tests. After throwing out all the mess we did with objects with magic callback properties, label collections, and so on, we realized that asking the user a question is basically the same thing and we could build a similar looking component to abstract that away from our logic.</p>
<p>In this example, we are displaying a list of past orders and giving the user an opportunity to quickly reorder. </p>
<div id="attachment_4455" style="width: 426px" class="wp-caption aligncenter"><a href="/wp-content/uploads/2016/03/OrderForm.png"><img src="/wp-content/uploads/2016/03/OrderForm.png" alt="Sample Reorder Form" width="416" height="283" class="size-full wp-image-4455" srcset="/wp-content/uploads/2016/03/OrderForm.png 416w, /wp-content/uploads/2016/03/OrderForm-300x204.png 300w" sizes="(max-width: 416px) 100vw, 416px" /></a><p class="wp-caption-text">Sample Reorder Form</p></div>
<p>However, we have a business case that requires we check that each of those products is still supported before placing the re-order. If any are no longer available, we need to ask the user to choose to leave that product off their reorder or choose one of several alternatives.</p>
<div id="attachment_4456" style="width: 421px" class="wp-caption aligncenter"><a href="/wp-content/uploads/2016/03/ReorderFlow.png"><img src="/wp-content/uploads/2016/03/ReorderFlow.png" alt="Reorder Logic" width="411" height="565" class="size-full wp-image-4456" srcset="/wp-content/uploads/2016/03/ReorderFlow.png 411w, /wp-content/uploads/2016/03/ReorderFlow-218x300.png 218w" sizes="(max-width: 411px) 100vw, 411px" /></a><p class="wp-caption-text">Reorder Logic</p></div>
<p>Here is what the reorder function looks like with both the user and API treated as services:</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="javascript"><thead><tr><td colspan="2"  class="head">Javascript</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
</pre></td><td class="de1"><pre class="de1">self.<span class="me1">reorder</span> <span class="sy0">=</span> <span class="kw1">function</span><span class="br0">&#40;</span>priorOrder<span class="br0">&#41;</span><span class="br0">&#123;</span>
&nbsp; &nbsp; <span class="kw1">var</span> newOrder <span class="sy0">=</span> <span class="kw1">new</span> OrderModel<span class="br0">&#40;</span><span class="br0">&#123;</span> id<span class="sy0">:</span> <span class="st0">'pending'</span><span class="sy0">,</span> contents<span class="sy0">:</span><span class="br0">&#91;</span><span class="br0">&#93;</span><span class="sy0">,</span> price<span class="sy0">:</span> <span class="nu0">0</span> <span class="br0">&#125;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; self.<span class="me1">isReordering</span><span class="br0">&#40;</span><span class="kw2">true</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; <span class="co1">//= 1: begin checks on each product to verify we have stock for each of them</span>
&nbsp; &nbsp; <span class="kw1">var</span> stockChecks <span class="sy0">=</span> priorOrder.<span class="me1">contents</span><span class="br0">&#40;</span><span class="br0">&#41;</span>.<span class="me1">map</span><span class="br0">&#40;</span><span class="kw1">function</span><span class="br0">&#40;</span>product<span class="br0">&#41;</span><span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">return</span> dataService.<span class="me1">verifyStock</span><span class="br0">&#40;</span>product<span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; <span class="br0">&#125;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; <span class="co1">//= 2: add 'in stock' items to list, ask user about out of stock products</span>
&nbsp; &nbsp; Promise.<span class="me1">all</span><span class="br0">&#40;</span>stockChecks<span class="br0">&#41;</span>
&nbsp; &nbsp; .<span class="me1">then</span><span class="br0">&#40;</span><span class="kw1">function</span><span class="br0">&#40;</span>results<span class="br0">&#41;</span><span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="co1">//= 2.1: add 'in stock' products to the new order</span>
&nbsp; &nbsp; &nbsp; &nbsp; results.<span class="me1">filter</span><span class="br0">&#40;</span><span class="kw1">function</span><span class="br0">&#40;</span>result<span class="br0">&#41;</span><span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">if</span><span class="br0">&#40;</span>result.<span class="me1">status</span> <span class="sy0">==</span> <span class="st0">'in stock'</span><span class="br0">&#41;</span><span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; newOrder.<span class="me1">contents</span>.<span class="me1">push</span><span class="br0">&#40;</span>result.<span class="me1">product</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; <span class="co1">//= 2.2: Pass the list of 'out of stock' products to the next step to determine alternatives</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">var</span> outOfStockResults <span class="sy0">=</span> results.<span class="me1">filter</span><span class="br0">&#40;</span><span class="kw1">function</span><span class="br0">&#40;</span>result<span class="br0">&#41;</span><span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">return</span> result.<span class="me1">status</span> <span class="sy0">==</span> <span class="st0">'out of stock'</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">return</span> outOfStockResults<span class="sy0">;</span>
&nbsp; &nbsp; <span class="br0">&#125;</span><span class="br0">&#41;</span>
&nbsp; &nbsp; .<span class="me1">then</span><span class="br0">&#40;</span><span class="kw1">function</span><span class="br0">&#40;</span>outOfStockResults<span class="br0">&#41;</span><span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="co1">//= 3: If there are 'out of stock' products, ask the user what to do for each of them</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">if</span><span class="br0">&#40;</span>outOfStockResults.<span class="me1">length</span> <span class="sy0">&gt;</span> <span class="nu0">0</span><span class="br0">&#41;</span><span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">return</span> userDialogService.<span class="me1">askAboutOutOfStockProductAlternatives</span><span class="br0">&#40;</span>outOfStockResults<span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; .<span class="me1">then</span><span class="br0">&#40;</span><span class="kw1">function</span><span class="br0">&#40;</span>answers<span class="br0">&#41;</span><span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">if</span><span class="br0">&#40;</span>answers <span class="sy0">==</span> <span class="st0">'cancel'</span><span class="br0">&#41;</span><span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="co1">//= 3.1: if the user cancelled, cancel the order</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; newOrder <span class="sy0">=</span> <span class="kw2">null</span><span class="sy0">;</span>&nbsp; &nbsp; 
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">else</span><span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="co1">//= 3.2 if alternatives were chosen, add them to the order</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; answers.<span class="me1">forEach</span><span class="br0">&#40;</span><span class="kw1">function</span><span class="br0">&#40;</span>selectedChoice<span class="br0">&#41;</span><span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">if</span><span class="br0">&#40;</span>selectedChoice <span class="sy0">!=</span> <span class="kw2">null</span><span class="br0">&#41;</span><span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; newOrder.<span class="me1">contents</span>.<span class="me1">push</span><span class="br0">&#40;</span>selectedChoice.<span class="me1">product</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp; &nbsp; <span class="br0">&#125;</span><span class="br0">&#41;</span>
&nbsp; &nbsp; .<span class="me1">then</span><span class="br0">&#40;</span><span class="kw1">function</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="co1">//= 4: the order hasn't been cancelled, add it to the order list</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">if</span><span class="br0">&#40;</span>newOrder <span class="sy0">!=</span> <span class="kw2">null</span><span class="br0">&#41;</span><span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; self.<span class="me1">orders</span>.<span class="me1">unshift</span><span class="br0">&#40;</span>newOrder<span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp; &nbsp; &nbsp; &nbsp; self.<span class="me1">isReordering</span><span class="br0">&#40;</span><span class="kw2">false</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; <span class="br0">&#125;</span><span class="br0">&#41;</span><span class="sy0">;</span>
<span class="br0">&#125;</span><span class="sy0">;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">self.reorder = function(priorOrder){
	var newOrder = new OrderModel({ id: 'pending', contents:[], price: 0 });
	self.isReordering(true);

	//= 1: begin checks on each product to verify we have stock for each of them
	var stockChecks = priorOrder.contents().map(function(product){
		return dataService.verifyStock(product);
	});

	//= 2: add 'in stock' items to list, ask user about out of stock products
	Promise.all(stockChecks)
	.then(function(results){
		//= 2.1: add 'in stock' products to the new order
		results.filter(function(result){
			if(result.status == 'in stock'){
				newOrder.contents.push(result.product);
			}
		});

		//= 2.2: Pass the list of 'out of stock' products to the next step to determine alternatives
		var outOfStockResults = results.filter(function(result){
			return result.status == 'out of stock';
		});

		return outOfStockResults;
	})
	.then(function(outOfStockResults){
		//= 3: If there are 'out of stock' products, ask the user what to do for each of them
		if(outOfStockResults.length &gt; 0){
			return userDialogService.askAboutOutOfStockProductAlternatives(outOfStockResults)
			.then(function(answers){
				if(answers == 'cancel'){
					//= 3.1: if the user cancelled, cancel the order
					newOrder = null;	
				}
				else{
					//= 3.2 if alternatives were chosen, add them to the order
					answers.forEach(function(selectedChoice){
						if(selectedChoice != null){
							newOrder.contents.push(selectedChoice.product);
						}
					});
				}
			});
		}
	})
	.then(function(){
		//= 4: the order hasn't been cancelled, add it to the order list
		if(newOrder != null){
			self.orders.unshift(newOrder);
		}
		self.isReordering(false);
	});
};</pre></div></div>

<p>Writing tests for the user dialog looks just the same as for the API.</p>
<p>We can test that the user is given choices and those choices are used for the new order:</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="javascript"><thead><tr><td colspan="2"  class="head">Javascript</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
</pre></td><td class="de1"><pre class="de1">it<span class="br0">&#40;</span><span class="st0">&quot;creates the order with the user alternatives for out of stock products when options are selected&quot;</span><span class="sy0">,</span> <span class="kw1">function</span><span class="br0">&#40;</span>done<span class="br0">&#41;</span><span class="br0">&#123;</span>
&nbsp; &nbsp; <span class="co1">// arrange</span>
&nbsp; &nbsp; <span class="kw1">var</span> altProduct <span class="sy0">=</span> <span class="br0">&#123;</span> product<span class="sy0">:</span> <span class="st0">'JKL'</span><span class="br0">&#125;</span><span class="sy0">;</span>
&nbsp; &nbsp; <span class="kw1">var</span> fakeDataService <span class="sy0">=</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; verifyStock<span class="sy0">:</span> <span class="kw1">function</span><span class="br0">&#40;</span>product<span class="br0">&#41;</span><span class="br0">&#123;</span> 
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">return</span> Promise.<span class="me1">resolve</span><span class="br0">&#40;</span><span class="br0">&#123;</span> product<span class="sy0">:</span> product<span class="sy0">,</span> status<span class="sy0">:</span> <span class="st0">'out of stock'</span><span class="sy0">,</span> alternatives<span class="sy0">:</span> <span class="br0">&#91;</span> altProduct <span class="br0">&#93;</span> <span class="br0">&#125;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp; &nbsp; <span class="br0">&#125;</span><span class="sy0">;</span>
&nbsp; &nbsp; <span class="kw1">var</span> fakeUserService <span class="sy0">=</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; askAboutOutOfStockProductAlternatives<span class="sy0">:</span> <span class="kw1">function</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#123;</span> <span class="kw1">return</span> Promise.<span class="me1">resolve</span><span class="br0">&#40;</span><span class="br0">&#91;</span>altProduct<span class="sy0">,</span> altProduct<span class="sy0">,</span> altProduct<span class="br0">&#93;</span><span class="br0">&#41;</span><span class="sy0">;</span> <span class="br0">&#125;</span>
&nbsp; &nbsp; <span class="br0">&#125;</span><span class="sy0">;</span>
&nbsp; &nbsp; <span class="kw1">var</span> sampleOrder <span class="sy0">=</span> <span class="br0">&#123;</span> id<span class="sy0">:</span> <span class="st0">'1'</span><span class="sy0">,</span> price<span class="sy0">:</span> <span class="nu0">2</span><span class="sy0">,</span> contents<span class="sy0">:</span> <span class="br0">&#91;</span> <span class="st0">'ABC'</span><span class="sy0">,</span> <span class="st0">'DEF'</span><span class="sy0">,</span> <span class="st0">'GHI'</span> <span class="br0">&#93;</span> <span class="br0">&#125;</span><span class="sy0">;</span>
&nbsp; &nbsp; <span class="kw1">var</span> vm <span class="sy0">=</span> <span class="kw1">new</span> OrderHistoryViewModel<span class="br0">&#40;</span>fakeDataService<span class="sy0">,</span> fakeUserService<span class="sy0">,</span> <span class="br0">&#91;</span> sampleOrder <span class="br0">&#93;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; <span class="co1">// act</span>
&nbsp; &nbsp; <span class="kw1">var</span> afterReorder <span class="sy0">=</span> vm.<span class="me1">reorder</span><span class="br0">&#40;</span>vm.<span class="me1">orders</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#91;</span><span class="nu0">0</span><span class="br0">&#93;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; 
&nbsp; &nbsp; <span class="co1">// assert</span>
&nbsp; &nbsp; afterReorder.<span class="me1">then</span><span class="br0">&#40;</span><span class="kw1">function</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; expect<span class="br0">&#40;</span>vm.<span class="me1">orders</span><span class="br0">&#40;</span><span class="br0">&#41;</span>.<span class="me1">length</span><span class="br0">&#41;</span>.<span class="me1">toBe</span><span class="br0">&#40;</span><span class="nu0">2</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; expect<span class="br0">&#40;</span>vm.<span class="me1">orders</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#91;</span><span class="nu0">1</span><span class="br0">&#93;</span>.<span class="me1">contents</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#41;</span>.<span class="me1">toEqual</span><span class="br0">&#40;</span>sampleOrder.<span class="me1">contents</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; expect<span class="br0">&#40;</span>vm.<span class="me1">orders</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#91;</span><span class="nu0">0</span><span class="br0">&#93;</span>.<span class="me1">contents</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#41;</span>.<span class="me1">toEqual</span><span class="br0">&#40;</span><span class="br0">&#91;</span>altProduct.<span class="me1">product</span><span class="sy0">,</span> altProduct.<span class="me1">product</span><span class="sy0">,</span> altProduct.<span class="me1">product</span><span class="br0">&#93;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; <span class="br0">&#125;</span><span class="br0">&#41;</span>.<span class="kw1">finally</span><span class="br0">&#40;</span>done<span class="sy0">,</span> done.<span class="me1">fail</span><span class="br0">&#41;</span><span class="sy0">;</span>
<span class="br0">&#125;</span><span class="br0">&#41;</span><span class="sy0">;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">it("creates the order with the user alternatives for out of stock products when options are selected", function(done){
	// arrange
	var altProduct = { product: 'JKL'};
	var fakeDataService = {
		verifyStock: function(product){ 
			return Promise.resolve({ product: product, status: 'out of stock', alternatives: [ altProduct ] });
		}
	};
	var fakeUserService = {
		askAboutOutOfStockProductAlternatives: function(){ return Promise.resolve([altProduct, altProduct, altProduct]); }
	};
	var sampleOrder = { id: '1', price: 2, contents: [ 'ABC', 'DEF', 'GHI' ] };
	var vm = new OrderHistoryViewModel(fakeDataService, fakeUserService, [ sampleOrder ]);

	// act
	var afterReorder = vm.reorder(vm.orders()[0]);
	
	// assert
	afterReorder.then(function(){
		expect(vm.orders().length).toBe(2);
		expect(vm.orders()[1].contents()).toEqual(sampleOrder.contents);
		expect(vm.orders()[0].contents()).toEqual([altProduct.product, altProduct.product, altProduct.product]);
	}).finally(done, done.fail);
});</pre></div></div>

<p>We can also test that we&#8217;re handling the user cancelling the dialog the way we want to:</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="javascript"><thead><tr><td colspan="2"  class="head">Javascript</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
</pre></td><td class="de1"><pre class="de1">it<span class="br0">&#40;</span><span class="st0">&quot;cancels the order when the user cancels the dialog&quot;</span><span class="sy0">,</span> <span class="kw1">function</span><span class="br0">&#40;</span>done<span class="br0">&#41;</span><span class="br0">&#123;</span>
&nbsp; &nbsp; <span class="co1">// arrange</span>
&nbsp; &nbsp; <span class="kw1">var</span> altProduct <span class="sy0">=</span> <span class="br0">&#123;</span> product<span class="sy0">:</span> <span class="st0">'JKL'</span><span class="br0">&#125;</span><span class="sy0">;</span>
&nbsp; &nbsp; <span class="kw1">var</span> fakeDataService <span class="sy0">=</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; verifyStock<span class="sy0">:</span> <span class="kw1">function</span><span class="br0">&#40;</span>product<span class="br0">&#41;</span><span class="br0">&#123;</span> 
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">return</span> Promise.<span class="me1">resolve</span><span class="br0">&#40;</span><span class="br0">&#123;</span> product<span class="sy0">:</span> product<span class="sy0">,</span> status<span class="sy0">:</span> <span class="st0">'out of stock'</span><span class="sy0">,</span> alternatives<span class="sy0">:</span> <span class="br0">&#91;</span> altProduct <span class="br0">&#93;</span> <span class="br0">&#125;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp; &nbsp; <span class="br0">&#125;</span><span class="sy0">;</span>
&nbsp; &nbsp; <span class="kw1">var</span> fakeUserService <span class="sy0">=</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; askAboutOutOfStockProductAlternatives<span class="sy0">:</span> <span class="kw1">function</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#123;</span> <span class="kw1">return</span> Promise.<span class="me1">resolve</span><span class="br0">&#40;</span><span class="st0">'cancel'</span><span class="br0">&#41;</span><span class="sy0">;</span> <span class="br0">&#125;</span>
&nbsp; &nbsp; <span class="br0">&#125;</span><span class="sy0">;</span>
&nbsp; &nbsp; <span class="kw1">var</span> sampleOrder <span class="sy0">=</span> <span class="br0">&#123;</span> id<span class="sy0">:</span> <span class="st0">'1'</span><span class="sy0">,</span> price<span class="sy0">:</span> <span class="nu0">2</span><span class="sy0">,</span> contents<span class="sy0">:</span> <span class="br0">&#91;</span> <span class="st0">'ABC'</span><span class="sy0">,</span> <span class="st0">'DEF'</span><span class="sy0">,</span> <span class="st0">'GHI'</span> <span class="br0">&#93;</span> <span class="br0">&#125;</span><span class="sy0">;</span>
&nbsp; &nbsp; <span class="kw1">var</span> vm <span class="sy0">=</span> <span class="kw1">new</span> OrderHistoryViewModel<span class="br0">&#40;</span>fakeDataService<span class="sy0">,</span> fakeUserService<span class="sy0">,</span> <span class="br0">&#91;</span> sampleOrder <span class="br0">&#93;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; <span class="co1">// act</span>
&nbsp; &nbsp; <span class="kw1">var</span> afterReorder <span class="sy0">=</span> vm.<span class="me1">reorder</span><span class="br0">&#40;</span>vm.<span class="me1">orders</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#91;</span><span class="nu0">0</span><span class="br0">&#93;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; 
&nbsp; &nbsp; <span class="co1">// assert</span>
&nbsp; &nbsp; afterReorder.<span class="me1">then</span><span class="br0">&#40;</span><span class="kw1">function</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; expect<span class="br0">&#40;</span>vm.<span class="me1">orders</span><span class="br0">&#40;</span><span class="br0">&#41;</span>.<span class="me1">length</span><span class="br0">&#41;</span>.<span class="me1">toBe</span><span class="br0">&#40;</span><span class="nu0">1</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; <span class="br0">&#125;</span><span class="br0">&#41;</span>.<span class="kw1">finally</span><span class="br0">&#40;</span>done<span class="sy0">,</span> done.<span class="me1">fail</span><span class="br0">&#41;</span><span class="sy0">;</span>
<span class="br0">&#125;</span><span class="br0">&#41;</span><span class="sy0">;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">it("cancels the order when the user cancels the dialog", function(done){
	// arrange
	var altProduct = { product: 'JKL'};
	var fakeDataService = {
		verifyStock: function(product){ 
			return Promise.resolve({ product: product, status: 'out of stock', alternatives: [ altProduct ] });
		}
	};
	var fakeUserService = {
		askAboutOutOfStockProductAlternatives: function(){ return Promise.resolve('cancel'); }
	};
	var sampleOrder = { id: '1', price: 2, contents: [ 'ABC', 'DEF', 'GHI' ] };
	var vm = new OrderHistoryViewModel(fakeDataService, fakeUserService, [ sampleOrder ]);

	// act
	var afterReorder = vm.reorder(vm.orders()[0]);
	
	// assert
	afterReorder.then(function(){
		expect(vm.orders().length).toBe(1);
	}).finally(done, done.fail);
});</pre></div></div>

<p>The full sample implementation, including a working (but not production ready) dialog can be found here: <a href="https://github.com/tarwn/Blog_KnockoutMVVMPatterns/tree/master/userDialogs" title="tarwn/Blog_KnockoutMVVMPatterns/tree/master/userDialogs on github">github: tarwn/Blog_KnockoutMVVMPatterns/tree/master/userDialogs</a></p>
<h2>The User is an Asynchronous API</h2>
<p>MVVM treats everything as a contract or service, whether it&#8217;s the surface it exposes to the View to be displayed, the methods that are exposed to the View to be called, or the API the ViewModel consumes to call remote services. Abstracting user dialogs as another asynchronous service makes the flow of the business logic cleaner and easier to test, while freeing us to work mostly independently on getting the mechanics and design of the user dialog experience the way we want.</p>
]]></content:encoded>
			<wfw:commentRss>/index.php/webdev/mvvm-the-user-as-an-asynchronous-api/feed/</wfw:commentRss>
		<slash:comments>0</slash:comments>
		</item>
		<item>
		<title>MVVM Validation with KnockoutJS &#8211; Don&#8217;t put it in the View/HTML</title>
		<link>/index.php/webdev/mvvm-validation-with-knockoutjs-dont-put-it-in-the-viewhtml/</link>
		<comments>/index.php/webdev/mvvm-validation-with-knockoutjs-dont-put-it-in-the-viewhtml/#respond</comments>
		<pubDate>Wed, 02 Mar 2016 18:22:10 +0000</pubDate>
		<dc:creator><![CDATA[Eli Weinstock-Herman (tarwn)]]></dc:creator>
				<category><![CDATA[Web Developer]]></category>
		<category><![CDATA[knockout]]></category>
		<category><![CDATA[validation]]></category>

		<guid isPermaLink="false">/?p=4396</guid>
		<description><![CDATA[When it comes to input validation for rich websites and Single Page Applications, a lot of the patterns out there rely on markup in the HTML/View. This works OK for smaller applications, but is terrible for larger applications that expect to be maintained and extended over time. In the past couple years I have used [&#8230;]]]></description>
				<content:encoded><![CDATA[<p>When it comes to input validation for rich websites and Single Page Applications, a lot of the patterns out there rely on markup in the HTML/View. This works OK for smaller applications, but is terrible for larger applications that expect to be maintained and extended over time.</p>
<p>In the past couple years I have used Knockout on sites ranging from toy size (<a href="/index.php/architect/distributed-storage-how-sql-azure-replicas-work/" title="Distributed Storage: How SQL Azure Replicas Work">the SQL Azure post</a>) up to a large modular SPA rewrite of a Silverlight application. This post is based on one of the patterns we created working on the latter, a large platform expected to support continued growth from multiple teams working side-by-side.</p>
<div style="background-color: #eeeeee; margin: .5em; margin-bottom: 1.5em; padding: .5em">&#8220;Large modular SPA&#8221;: It seems like every time I find a post on SPAs or large front-end techniques about a &#8220;Big&#8221; application, there is almost never a definition for what the author considered &#8220;Big&#8221;. This rewrite was for a 300 KLOC Silverlight application and has 30+ discrete screens ranging from &#8220;simple&#8221; in-screen search results that make IE tables weep, to complex SVG dashboards, to a multi-tabbed screen that can scale from 50 inputs to 1000&#8217;s, depending on the complexity of the user and their use case.</div>
<h2>Validation Defined in the View</h2>
<p>Here are a couple examples of what I mean when I say &#8220;validation defined in the view&#8221;:</p>
<p>AngularJS Documentation: <a href="https://docs.angularjs.org/guide/forms" title="AngularJS Documentation / Forms / Custom Validation" target="_blank">https://docs.angularjs.org/guide/forms</a></p>
<pre>&lt;input type="number" ng-model="size" name="size" min="0" max="10" integer /&gt;{{size}}&lt;br /&gt;</pre>
<p>jQuery Validation: <a href="http://jqueryvalidation.org/documentation/" title="jQuery Validation Plugin" target="_blank">http://jqueryvalidation.org/documentation/</a></p>
<pre>&lt;p&gt;
  &lt;label for="cname"&gt;Name (required, at least 2 characters)&lt;/label&gt;
  &lt;input id="cname" name="name" minlength="2" type="text" required&gt;
&lt;/p&gt;</pre>
<p>So what&#8217;s wrong with this approach?</p>
<p><strong>1. It&#8217;s difficult to regression test</strong></p>
<p>Defining the input restrictions in the view reduces our options to using a UI test framework or manual testers, both on the more expensive side of testing when it comes to money or execution time. When we add in the fact that we&#8217;re talking about definitions defined on 100&#8217;s or 1000&#8217;s of inputs, we end up using a lot of expensive bandwidth for some very detailed things, at the expense of whatever else we were going to use it for.</p>
<p><strong>2. It&#8217;s difficult to change and it&#8217;s re-defined every place we display/bind the field</strong></p>
<p>Have a field that is shown on 3 screens? That means defining the restrictions 3 times and hoping that you either got them all or that someone notices that a long value on one page actually breaks the validation when it&#8217;s shown on a second one.</p>
<p><strong>3. The format isn&#8217;t defined</strong></p>
<p>Give a group of humans a textbox that says &#8220;Amount&#8221;, and some of them will include currency symbols and group separators ($ and , for USD) and this is a totally valid thing to do. Or we could force users to change how they type dollars into a computer simply because we want to store it as a number (no, really, please stop doing things like this).</p>
<p><strong>4. There are fewer rules than you might think</strong></p>
<p>Sure, each string in your application has some specific length restrictions, but how many variations do you really have for a currency input? or a password input? So take #3 above and multiple it by 100. Then consider how many spots you will have to change if you change from USD to GBP.</p>
<p>Sold yet?</p>
<h2>Validation on the Model</h2>
<p>Whether you&#8217;re using MVVM, MVC, or MV-Whatever in the front-end, you have a Model that represents the data you save to the server and display on the screen. Because it is data, it doesn&#8217;t really care about how the user can best consume that data, only that it fits a certain structure and type.</p>
<p>Enter an adapter I will call, for this post, the &#8220;PresentationModel&#8221;:</p>
<div id="attachment_4420" style="width: 410px" class="wp-caption aligncenter"><a href="/wp-content/uploads/2016/02/Diagram.png"><img src="/wp-content/uploads/2016/02/Diagram.png" alt="PresentationModel - Defines Validation/Formatting" width="400" height="400" class="size-full wp-image-4420" srcset="/wp-content/uploads/2016/02/Diagram.png 400w, /wp-content/uploads/2016/02/Diagram-200x200.png 200w, /wp-content/uploads/2016/02/Diagram-300x300.png 300w" sizes="(max-width: 400px) 100vw, 400px" /></a><p class="wp-caption-text">PresentationModel &#8211; Defines Validation/Formatting</p></div>
<p>Wrapping around the Model, this adapter defines how a human reads and writes values and defines the contract for how data flows into the Model and how it is surfaced again. Here is an example of what that could look like in knockout.js:</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="javascript"><thead><tr><td colspan="2"  class="head">Javascript</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
</pre></td><td class="de1"><pre class="de1"><span class="co1">// -- Model</span>
<span class="kw1">function</span> OrderLineModel<span class="br0">&#40;</span>rawDTO<span class="br0">&#41;</span><span class="br0">&#123;</span>
&nbsp; &nbsp; <span class="kw1">this</span>.<span class="me1">name</span> <span class="sy0">=</span> ko.<span class="me1">observable</span><span class="br0">&#40;</span>rawDTO.<span class="me1">name</span> <span class="sy0">||</span> <span class="st0">''</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; <span class="kw1">this</span>.<span class="me1">quantity</span> <span class="sy0">=</span> ko.<span class="me1">observable</span><span class="br0">&#40;</span>rawDTO.<span class="me1">quantity</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; <span class="kw1">this</span>.<span class="me1">price</span> <span class="sy0">=</span> ko.<span class="me1">observable</span><span class="br0">&#40;</span>rawDTO.<span class="me1">price</span><span class="br0">&#41;</span><span class="sy0">;</span>
<span class="br0">&#125;</span>
&nbsp;
<span class="co1">// -- Presentation Model</span>
<span class="kw1">function</span> OrderLinePresModel<span class="br0">&#40;</span>orderLineModel<span class="br0">&#41;</span><span class="br0">&#123;</span>
&nbsp; &nbsp; <span class="kw1">this</span>.<span class="me1">name</span> <span class="sy0">=</span> orderLineModel.<span class="me1">name</span>.<span class="me1">extend</span><span class="br0">&#40;</span><span class="br0">&#123;</span> validate<span class="sy0">:</span> <span class="br0">&#123;</span> type<span class="sy0">:</span> stringType<span class="sy0">,</span> min<span class="sy0">:</span> <span class="nu0">1</span><span class="sy0">,</span> max<span class="sy0">:</span> <span class="nu0">25</span><span class="sy0">,</span> required<span class="sy0">:</span> <span class="kw2">true</span> <span class="br0">&#125;</span> <span class="br0">&#125;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; <span class="kw1">this</span>.<span class="me1">quantity</span> <span class="sy0">=</span> orderLineModel.<span class="me1">quantity</span>.<span class="me1">extend</span><span class="br0">&#40;</span><span class="br0">&#123;</span> validate<span class="sy0">:</span> <span class="br0">&#123;</span> type<span class="sy0">:</span> integerType<span class="sy0">,</span> min<span class="sy0">:</span> <span class="nu0">1</span><span class="sy0">,</span> max<span class="sy0">:</span> <span class="nu0">500</span><span class="sy0">,</span> required<span class="sy0">:</span> <span class="kw2">true</span> <span class="br0">&#125;</span> <span class="br0">&#125;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; <span class="kw1">this</span>.<span class="me1">price</span> <span class="sy0">=</span> orderLineModel.<span class="me1">price</span>.<span class="me1">extend</span><span class="br0">&#40;</span><span class="br0">&#123;</span> validate<span class="sy0">:</span> <span class="br0">&#123;</span> type<span class="sy0">:</span> currencyType<span class="sy0">,</span> min<span class="sy0">:</span> <span class="nu0">0</span><span class="sy0">,</span> max<span class="sy0">:</span> <span class="nu0">100</span><span class="sy0">,</span> required<span class="sy0">:</span> <span class="kw2">true</span> <span class="br0">&#125;</span> <span class="br0">&#125;</span><span class="br0">&#41;</span><span class="sy0">;</span>
<span class="br0">&#125;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">// -- Model
function OrderLineModel(rawDTO){
	this.name = ko.observable(rawDTO.name || '');
	this.quantity = ko.observable(rawDTO.quantity);
	this.price = ko.observable(rawDTO.price);
}

// -- Presentation Model
function OrderLinePresModel(orderLineModel){
	this.name = orderLineModel.name.extend({ validate: { type: stringType, min: 1, max: 25, required: true } });
	this.quantity = orderLineModel.quantity.extend({ validate: { type: integerType, min: 1, max: 500, required: true } });
	this.price = orderLineModel.price.extend({ validate: { type: currencyType, min: 0, max: 100, required: true } });
}</pre></div></div>

<p>The example is an Order object with a collection of Order Lines that alow a user to free-type a name, quantity, and price which are then used for various sub-total calculations and presumably saved at some point. In the &#8220;PresentationModel&#8221;, I&#8217;ve extended the Model&#8217;s properties with the validation/formatting definitions for each of the values. </p>
<div id="attachment_4416" style="width: 568px" class="wp-caption aligncenter"><a href="/wp-content/uploads/2016/02/Screenshot.png"><img src="/wp-content/uploads/2016/02/Screenshot.png" alt="Formatted and Validated Inputs" width="558" height="183" class="size-full wp-image-4416" srcset="/wp-content/uploads/2016/02/Screenshot.png 558w, /wp-content/uploads/2016/02/Screenshot-300x98.png 300w" sizes="(max-width: 558px) 100vw, 558px" /></a><p class="wp-caption-text">Formatted and Validated Inputs</p></div>
<p>I now have several levels of tests I can easily write, as well:</p>
<ul>
<li>Parsing and Formatting tests &#8211; make sure &#8220;currencyType&#8221; works consistently, instead of testing 500 different currency inputs in my application</li>
<li>PresentationModel regression tests &#8211; make sure each field in the &#8220;PresentationModel&#8221; has the correct type and length requirements</li>
</ul>
<p>When I later re-use this model to display a summary of the order, I already have all of the types defined (and tested) in the &#8220;PresentationModel&#8221;, making it impossible to accidentally format one as a currency amount and the other as a plain decimal value.</p>
<h2>A Knockout Implementation</h2>
<p>I have a sample implementation available here: <a href="https://github.com/tarwn/Blog_KnockoutMVVMPatterns/blob/master/validation/index.html" title="https://github.com/tarwn/Blog_KnockoutMVVMPatterns/blob/master/validation/index.html" target="_blank">/validation/index.html (github)</a></p>
<p>There are 4 key parts to this: the Model, the PresentationModel, the Type, and the Validate extender (I also have a basic component for displaying the inputs)</p>
<h3>Validate Extender</h3>
<p>The validate extender is a computed observable that we use in the PresentationModel to define the type and additional validation parameters. It is the main workhorse behind the scenes that attaches the read and write behavior to the Model&#8217;s observable property.</p>
<div id="attachment_4415" style="width: 510px" class="wp-caption aligncenter"><a href="/wp-content/uploads/2016/02/PresentationModel.png"><img src="/wp-content/uploads/2016/02/PresentationModel.png" alt="Validate Extender: Input/Output Handling" width="500" height="220" class="size-full wp-image-4415" srcset="/wp-content/uploads/2016/02/PresentationModel.png 500w, /wp-content/uploads/2016/02/PresentationModel-300x132.png 300w" sizes="(max-width: 500px) 100vw, 500px" /></a><p class="wp-caption-text">Validate Extender: Input/Output Handling</p></div>
<p>When a new value comes in, it uses the Type to try and parse the value, performs any validations supported by the type, runs custom validations that are defined directly on that field, then writes to the underlying Model&#8217;s property/observable. When an update is made to the Model&#8217;s observable, a read is triggered back up and runs through the read side of the validate extender, formatting it using the Type&#8217;s format method.</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="javascript"><thead><tr><td colspan="2"  class="head">Javascript</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
</pre></td><td class="de1"><pre class="de1"><span class="co1">//-- extender definition</span>
&nbsp;
ko.<span class="me1">extenders</span>.<span class="me1">validate</span> <span class="sy0">=</span> <span class="kw1">function</span> <span class="br0">&#40;</span>target<span class="sy0">,</span> options<span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; <span class="co1">// ...</span>
&nbsp;
&nbsp; &nbsp; <span class="kw1">var</span> readFunction <span class="sy0">=</span> <span class="kw1">function</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">return</span> type.<span class="me1">format</span><span class="br0">&#40;</span>target<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#41;</span><span class="sy0">;</span> <span class="co1">//...</span>
&nbsp; &nbsp; <span class="br0">&#125;</span><span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; <span class="kw1">var</span> writeFunction <span class="sy0">=</span> <span class="kw1">function</span><span class="br0">&#40;</span>newValue<span class="br0">&#41;</span><span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="co1">// allow empty values if this is a non-required field</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">if</span><span class="br0">&#40;</span>options.<span class="me1">required</span> <span class="sy0">===</span> <span class="kw2">false</span> <span class="sy0">&amp;&amp;</span> newValue <span class="sy0">===</span> <span class="st0">''</span><span class="br0">&#41;</span><span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="co1">// ... clear error properties and return</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; <span class="co1">// will it parse?</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">var</span> parseResult <span class="sy0">=</span> type.<span class="me1">tryParse</span><span class="br0">&#40;</span>newValue<span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">if</span><span class="br0">&#40;</span>parseResult.<span class="me1">isError</span><span class="br0">&#41;</span><span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="co1">// ... set error properties and return</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; <span class="co1">// will it validate for type validation?</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">var</span> validationResult <span class="sy0">=</span> type.<span class="me1">tryValidate</span><span class="br0">&#40;</span>parseResult.<span class="me1">value</span><span class="sy0">,</span> options<span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">if</span><span class="br0">&#40;</span>validationResult.<span class="me1">isError</span><span class="br0">&#41;</span><span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="co1">// ... set error properties and return</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; <span class="co1">// custom validation?</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">if</span><span class="br0">&#40;</span>options.<span class="me1">validate</span> <span class="sy0">!=</span> <span class="kw2">null</span><span class="br0">&#41;</span><span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; validationResult <span class="sy0">=</span> options.<span class="me1">validate</span><span class="br0">&#40;</span>validationResult.<span class="me1">value</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">if</span><span class="br0">&#40;</span>validationResult.<span class="me1">isError</span><span class="br0">&#41;</span><span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="co1">// ... set error properties and return</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; <span class="co1">// must be good, write it through</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="co1">// ...</span>
&nbsp; &nbsp; &nbsp; &nbsp; target<span class="br0">&#40;</span>validationResult.<span class="me1">value</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="co1">// ... clear error properties</span>
&nbsp; &nbsp; <span class="br0">&#125;</span><span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; <span class="kw1">var</span> computed <span class="sy0">=</span> ko.<span class="me1">computed</span><span class="br0">&#40;</span><span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; read<span class="sy0">:</span> readFunction<span class="sy0">,</span>
&nbsp; &nbsp; &nbsp; &nbsp; write<span class="sy0">:</span> writeFunction
&nbsp; &nbsp; <span class="br0">&#125;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; computed.<span class="me1">validation</span> <span class="sy0">=</span> validationProperties<span class="sy0">;</span>
&nbsp; &nbsp; <span class="kw1">return</span> computed<span class="sy0">;</span>
<span class="br0">&#125;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">//-- extender definition

ko.extenders.validate = function (target, options) {
	// ...

	var readFunction = function(){
		return type.format(target()); //...
	};

	var writeFunction = function(newValue){
		// allow empty values if this is a non-required field
		if(options.required === false &amp;&amp; newValue === ''){
			// ... clear error properties and return
		}

		// will it parse?
		var parseResult = type.tryParse(newValue);
		if(parseResult.isError){
			// ... set error properties and return
		}

		// will it validate for type validation?
		var validationResult = type.tryValidate(parseResult.value, options);
		if(validationResult.isError){
			// ... set error properties and return
		}

		// custom validation?
		if(options.validate != null){
			validationResult = options.validate(validationResult.value);
			if(validationResult.isError){
				// ... set error properties and return
			}
		}

		// must be good, write it through
		// ...
		target(validationResult.value);
		// ... clear error properties
	};

	var computed = ko.computed({
		read: readFunction,
		write: writeFunction
	});
	computed.validation = validationProperties;
	return computed;
}</pre></div></div>

<h3>Type Definitions</h3>
<p>Adding types is then fairly simple, they just need to implement the parse, validate, and error methods:</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="javascript"><thead><tr><td colspan="2"  class="head">Javascript</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
</pre></td><td class="de1"><pre class="de1"><span class="kw1">var</span> currencyType <span class="sy0">=</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; emptyValue<span class="sy0">:</span> <span class="kw2">null</span><span class="sy0">,</span>
&nbsp; &nbsp; format<span class="sy0">:</span> <span class="kw1">function</span><span class="br0">&#40;</span>value<span class="br0">&#41;</span><span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">if</span><span class="br0">&#40;</span>value <span class="sy0">==</span> <span class="kw2">null</span><span class="br0">&#41;</span><span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">return</span> <span class="st0">''</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">else</span><span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">return</span> value.<span class="me1">toLocaleString</span><span class="br0">&#40;</span><span class="st0">'en-US'</span><span class="sy0">,</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; style<span class="sy0">:</span> <span class="st0">'currency'</span><span class="sy0">,</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; currency<span class="sy0">:</span> <span class="st0">'USD'</span><span class="sy0">,</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; currencyDisplay<span class="sy0">:</span> <span class="st0">'symbol'</span><span class="sy0">,</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; useGrouping<span class="sy0">:</span> <span class="kw2">true</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp; &nbsp; <span class="br0">&#125;</span><span class="sy0">,</span>
&nbsp; &nbsp; tryParse<span class="sy0">:</span> <span class="kw1">function</span><span class="br0">&#40;</span>value<span class="br0">&#41;</span><span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="co1">// strip out commas and $</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">var</span> parsedResult <span class="sy0">=</span> parseFloat<span class="br0">&#40;</span>value.<span class="me1">replace</span><span class="br0">&#40;</span><span class="co2">/[\$,]/g</span><span class="sy0">,</span><span class="st0">''</span><span class="br0">&#41;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">if</span><span class="br0">&#40;</span>isNaN<span class="br0">&#40;</span>parsedResult<span class="br0">&#41;</span><span class="br0">&#41;</span><span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">return</span> failedInput<span class="br0">&#40;</span><span class="st0">&quot;'&quot;</span> <span class="sy0">+</span> value <span class="sy0">+</span> <span class="st0">&quot;' is not a valid currency value&quot;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">else</span><span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">return</span> successfulInput<span class="br0">&#40;</span>parsedResult<span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp; &nbsp; <span class="br0">&#125;</span><span class="sy0">,</span>
&nbsp; &nbsp; tryValidate<span class="sy0">:</span> <span class="kw1">function</span><span class="br0">&#40;</span>value<span class="sy0">,</span> options<span class="br0">&#41;</span><span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">if</span><span class="br0">&#40;</span>options.<span class="me1">min</span> <span class="sy0">!=</span> <span class="kw2">undefined</span> <span class="sy0">&amp;&amp;</span> value <span class="sy0">&lt;</span> options.<span class="me1">min</span><span class="br0">&#41;</span><span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">return</span> failedInput<span class="br0">&#40;</span><span class="st0">&quot;'&quot;</span> <span class="sy0">+</span> value <span class="sy0">+</span> <span class="st0">&quot;' is less than the supported minimum of '&quot;</span> <span class="sy0">+</span> options.<span class="me1">min</span> <span class="sy0">+</span> <span class="st0">&quot;'&quot;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">if</span><span class="br0">&#40;</span>options.<span class="me1">max</span> <span class="sy0">!=</span> <span class="kw2">undefined</span> <span class="sy0">&amp;&amp;</span> value <span class="sy0">&gt;</span> options.<span class="me1">max</span><span class="br0">&#41;</span><span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">return</span> failedInput<span class="br0">&#40;</span><span class="st0">&quot;'&quot;</span> <span class="sy0">+</span> value <span class="sy0">+</span> <span class="st0">&quot;' is greater than the supported maximum of '&quot;</span> <span class="sy0">+</span> options.<span class="me1">max</span> <span class="sy0">+</span> <span class="st0">&quot;'&quot;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">return</span> successfulInput<span class="br0">&#40;</span>value<span class="br0">&#41;</span><span class="sy0">;</span>&nbsp; &nbsp; &nbsp; 
&nbsp; &nbsp; <span class="br0">&#125;</span>
<span class="br0">&#125;</span><span class="sy0">;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">var currencyType = {
	emptyValue: null,
	format: function(value){
		if(value == null){
			return '';
		}
		else{
			return value.toLocaleString('en-US', {
				style: 'currency',
				currency: 'USD',
				currencyDisplay: 'symbol',
				useGrouping: true
			});
		}
	},
	tryParse: function(value){
		// strip out commas and $
		var parsedResult = parseFloat(value.replace(/[\$,]/g,''));
		if(isNaN(parsedResult)){
			return failedInput("'" + value + "' is not a valid currency value");
		}
		else{
			return successfulInput(parsedResult);
		}
	},
	tryValidate: function(value, options){
		if(options.min != undefined &amp;&amp; value &lt; options.min){
			return failedInput("'" + value + "' is less than the supported minimum of '" + options.min + "'");
		}

		if(options.max != undefined &amp;&amp; value &gt; options.max){
			return failedInput("'" + value + "' is greater than the supported maximum of '" + options.max + "'");
		}

		return successfulInput(value);		
	}
};</pre></div></div>

<p>This is a pretty basic example. Starting here, we could easily come back through and pass the field&#8217;s name though for richer error messages, use the format method for the values in the tryValidate error messages, and so on. We could also extend the tryParse method to accept and expand on values like &#8220;$100K&#8221;, converting something that would be natural to the user to a value that is natural to the inner Model (and then doing the reverse in the format method). </p>
<h2>What we gain</h2>
<p>Switching from validation in the view to format/validation as a contract in the code reduces the number of places we have to repeat ourselves, makes it easy to extend a consistently richer experience to the end user, acts like a contact that keeps invalid values out of our model, is clearer and easier to read than having it mixed in among the HTML, and greatly increases our ability to write basic unit tests to serve as a safety net for future us.</p>
]]></content:encoded>
			<wfw:commentRss>/index.php/webdev/mvvm-validation-with-knockoutjs-dont-put-it-in-the-viewhtml/feed/</wfw:commentRss>
		<slash:comments>0</slash:comments>
		</item>
		<item>
		<title>Using Selenium for View testing with knockout and RequireJS</title>
		<link>/index.php/webdev/using-selenium-for-view-testing-with-knockout-and-requirejs/</link>
		<comments>/index.php/webdev/using-selenium-for-view-testing-with-knockout-and-requirejs/#respond</comments>
		<pubDate>Mon, 01 Dec 2014 14:20:41 +0000</pubDate>
		<dc:creator><![CDATA[Eli Weinstock-Herman (tarwn)]]></dc:creator>
				<category><![CDATA[Web Developer]]></category>
		<category><![CDATA[knockout]]></category>
		<category><![CDATA[nancy]]></category>
		<category><![CDATA[selenium]]></category>
		<category><![CDATA[UnitTesting]]></category>
		<category><![CDATA[webdriver]]></category>

		<guid isPermaLink="false">/?p=3089</guid>
		<description><![CDATA[I&#8217;ve written about using Selenium/WebDriver for automated testing in a C# environment in the past. Some of these posts may be dated, but I&#8217;ve covered everything from using the Selenium IDE, to using WebDriver and the PageObject pattern, to using SpecFlow to drive Selenium UI testing. But in this age of MVVM/MVC frameworks and libraries, [&#8230;]]]></description>
				<content:encoded><![CDATA[<p>I&#8217;ve written about using Selenium/WebDriver for automated testing in a C# environment in the past. Some of these posts may be dated, but I&#8217;ve covered everything from <a href="/index.php/webdev/uidevelopment/automated-web-testing-with-selenium/" title="Automated testing with Selenium IDE">using the Selenium IDE</a>, to <a href="/index.php/webdev/uidevelopment/automated-web-testing-with-selenium-2/" title="Automated testing with Selenium WebDriver">using WebDriver and the PageObject pattern</a>, to <a href="/index.php/enterprisedev/application-lifecycle-management/using-specflow-to/" title="Using SpecFlow to drive Selenium WebDriver Tests">using SpecFlow to drive Selenium UI testing</a>. But in this age of <a href="/index.php/webdev/uidevelopment/angularjs-vs-knockout-introduction-1/" title="AngularJS vs Knockout - Introduction (1 of 8)">MVVM/MVC frameworks and libraries</a>, do we really need every single test to hit the database?</p>
<h1>The Integration Testing Tax</h1>
<p>UI testing is widely accepted as slow and fragile. We can use patterns like the <a href="http://docs.seleniumhq.org/docs/06_test_design_considerations.jsp#page-object-design-pattern" title="Selenium: Page Object Design Pattern">Page Object design pattern</a> to reduce the fragility of how we interact with elements on the page, but that doesn&#8217;t speed things up any. We can merge tests to reduce repetitive actions, but that just adds a bunch of mess to the fragility side of the equation again.</p>
<p>So what to do?</p>
<p>Something I have been considering lately is to use Selenium to test just the View bindings, without the overhead of doing full integration testing. If I keep the logic out of the View (one of the reasons I love MVVM), then I can write some very extensive behavioral unit tests very close to the user and have fast, thorough behavior coverage. My main test concern then becomes how I ensure my bindings stay wired together over time, since I know the behavior under them is working properly. Tightening the focus provides a smaller subsurface to test against then trying to test all of the intricacies all of the way down and reduces the performance drags of anything behind the UI (like network, disk, subsystems, etc), so I could potentially test far more things in less time.</p>
<h1>UI Testing without the Backend</h1>
<p>To try this out, I needed a sample application. I wrote a simple application using <a href="http://knockoutjs.com/">knockout</a> and <a href="http://requirejs.org/">RequireJS</a>. There is a basic search screen that allows you to &#8220;search&#8221; against a slow WebApi endpoint, get further details about a product from that endpoint, and add items to a local cart. </p>
<p>Note: The WebApi actions are slow to reflect performance from larger, more complex applications that have to worry about things like authentication, databases, accessing network stores, logging, contention and retry policies, business logic, etc. </p>
<h2>The Fake Application + Test Cases</h2>
<p>All of the code for the fake application and tests is on github at <a href="https://github.com/tarwn/Blog_RequireJSandSelenium" title="tarwn/Blog_RequireJSandSelenium on github">tarwn/Blog_RequireJSandSelenium</a>.</p>
<p>The fake application looks like this:</p>
<p><a href="/wp-content/uploads/2014/11/SeleniumKnockoutSampleApp.png"><img src="/wp-content/uploads/2014/11/SeleniumKnockoutSampleApp.png" alt="SeleniumKnockoutSampleApp" width="639" height="864" class="aligncenter size-full wp-image-3090" srcset="/wp-content/uploads/2014/11/SeleniumKnockoutSampleApp.png 639w, /wp-content/uploads/2014/11/SeleniumKnockoutSampleApp-221x300.png 221w" sizes="(max-width: 639px) 100vw, 639px" /></a></p>
<p>The ViewModel behind this view contains all of the properties necessary to display the screen and it&#8217;s actions:</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="javascript"><thead><tr><td colspan="2"  class="head">Javascript</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
</pre></td><td class="de1"><pre class="de1">define<span class="br0">&#40;</span><span class="br0">&#91;</span><span class="st0">&quot;knockout&quot;</span><span class="sy0">,</span> 
&nbsp; &nbsp; &nbsp; &nbsp; <span class="st0">&quot;lodash&quot;</span><span class="sy0">,</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="st0">&quot;app/services/itemService&quot;</span><span class="sy0">,</span> 
&nbsp; &nbsp; &nbsp; &nbsp; <span class="st0">&quot;app/models/itemSummary&quot;</span><span class="sy0">,</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="st0">&quot;app/models/itemFull&quot;</span><span class="sy0">,</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="st0">&quot;app/models/itemCart&quot;</span><span class="sy0">,</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="st0">&quot;app/models/cart&quot;</span>
<span class="br0">&#93;</span><span class="sy0">,</span>
<span class="kw1">function</span> <span class="br0">&#40;</span>ko<span class="sy0">,</span>
&nbsp; &nbsp; &nbsp; &nbsp; _<span class="sy0">,</span>
&nbsp; &nbsp; &nbsp; &nbsp; ItemService<span class="sy0">,</span>
&nbsp; &nbsp; &nbsp; &nbsp; ItemSummary<span class="sy0">,</span>
&nbsp; &nbsp; &nbsp; &nbsp; ItemFull<span class="sy0">,</span>
&nbsp; &nbsp; &nbsp; &nbsp; ItemCart<span class="sy0">,</span>
&nbsp; &nbsp; &nbsp; &nbsp; Cart<span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp;
&nbsp; &nbsp; <span class="kw1">function</span> IndexViewModel<span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">var</span> itemService <span class="sy0">=</span> <span class="kw1">new</span> ItemService<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">var</span> self <span class="sy0">=</span> <span class="kw1">this</span><span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">this</span>.<span class="me1">searchText</span> <span class="sy0">=</span> ko.<span class="me1">observable</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">this</span>.<span class="me1">isSearching</span> <span class="sy0">=</span> ko.<span class="me1">observable</span><span class="br0">&#40;</span><span class="kw2">false</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">this</span>.<span class="me1">searchResults</span> <span class="sy0">=</span> ko.<span class="me1">observableArray</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">this</span>.<span class="me1">executeSearch</span> <span class="sy0">=</span> <span class="kw1">function</span> <span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="coMULTI">/* Search logic with self.itemService.getItems */</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; 
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">this</span>.<span class="me1">selectedItem</span> <span class="sy0">=</span> ko.<span class="me1">observable</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">this</span>.<span class="me1">isLoadingSelectedItem</span> <span class="sy0">=</span> ko.<span class="me1">observable</span><span class="br0">&#40;</span><span class="kw2">false</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">this</span>.<span class="me1">selectItem</span> <span class="sy0">=</span> <span class="kw1">function</span> <span class="br0">&#40;</span>item<span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="coMULTI">/* Selection logic with self.itemService.getItem(item.id) */</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span><span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">this</span>.<span class="me1">cart</span> <span class="sy0">=</span> <span class="kw1">new</span> Cart<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">this</span>.<span class="me1">addToCart</span> <span class="sy0">=</span> <span class="kw1">function</span> <span class="br0">&#40;</span>itemToAdd<span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="coMULTI">/* Add item to cart */</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span><span class="sy0">;</span>
&nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp;
&nbsp; &nbsp; <span class="kw1">return</span> IndexViewModel<span class="sy0">;</span>
&nbsp;
<span class="br0">&#125;</span><span class="br0">&#41;</span><span class="sy0">;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">define(["knockout", 
        "lodash",
        "app/services/itemService", 
        "app/models/itemSummary",
        "app/models/itemFull",
        "app/models/itemCart",
        "app/models/cart"
],
function (ko,
        _,
        ItemService,
        ItemSummary,
        ItemFull,
        ItemCart,
        Cart) {
   
    function IndexViewModel() {
        var itemService = new ItemService();
        var self = this;

        this.searchText = ko.observable();
        this.isSearching = ko.observable(false);
        this.searchResults = ko.observableArray();
        this.executeSearch = function () {
                /* Search logic with self.itemService.getItems */
        };
        
        this.selectedItem = ko.observable();
        this.isLoadingSelectedItem = ko.observable(false);
        this.selectItem = function (item) {
                /* Selection logic with self.itemService.getItem(item.id) */
        };

        this.cart = new Cart();
        this.addToCart = function (itemToAdd) {
                /* Add item to cart */
        };
    }

    return IndexViewModel;

});</pre></div></div>

<p>All of the code for the site is located here: <a href="https://github.com/tarwn/Blog_RequireJSandSelenium/tree/master/SampleWebSite" title="SampleWebSite on github">github: tarwn/Blog_RequireJSandSelenium &#8211; /SampleWebSite</a></p>
<div style="background-color: #FFFFBB; padding: 1em; margin: .25em 1em">If you have not used <a href="http://requirejs.org/" title="RequireJS">RequireJS</a>, the top part of the javascript file may look confusing. define() is used to define all the dependencies I need for the script and a method that accepts those dependencies for us in the scope of that script. When someone in turn asks for an IndexViewModel (or more appropriately: /app/indexViewModel), they will get back this constructor, fully wired with all of it&#8217;s dependencies. RequireJS ensures dependencies are loaded in the right order, keeps the global window scope clean, and allows us to mock out those dependencies using tools like <a href="https://github.com/iammerrick/Squire.js/" title="Squire.js on github">Squire.js</a>.</div>
<p>Let&#8217;s get testing!</p>
<h2>Testing with Selenium &#8211; times 8!</h2>
<p>While playing with this, I looked at 4 different methods of testing with Selenium across Chrome and Phantom. </p>
<p>The 4 methods are:</p>
<ul>
<li><a href="https://github.com/tarwn/Blog_RequireJSandSelenium/blob/master/SampleWebSite.UITests/IndexTests.FullIntegration.cs">IndexTests.FullIntegration</a> &#8211; launch the site locally and run my UI tests against it, with the &#8220;real&#8221; WebAPI service</li>
<li><a href="https://github.com/tarwn/Blog_RequireJSandSelenium/blob/master/SampleWebSite.UITests/IndexTests.ClientSideInjection.cs">IndexTests.ClientSideInjection</a> &#8211; Execute a script to stub the itemService.js logic to run locally</li>
<li><a href="https://github.com/tarwn/Blog_RequireJSandSelenium/blob/master/SampleWebSite.UITests/IndexTests.NancyServer.cs">IndexTests.NancyServer</a> &#8211; Self-host a Nancy server with fake versions of the server-side API</li>
<li><a href="https://github.com/tarwn/Blog_RequireJSandSelenium/blob/master/SampleWebSite.UITests/IndexTests.NancyServerWithScriptInjection.cs">IndexTests.NancyServer</a> &#8211; Self-host a Nancy server that serves a stubbed itemService.js file</li>
</ul>
<p>These tests only cover the case where the HTML page is already a static file. If my page had instead been server-side generated from something like ASP.Net MVC or Web Pages, there would be additional work involved.</p>
<p>My goal was to keep the tests consistent across methods. This is a sample test:</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="csharp"><thead><tr><td colspan="2"  class="head">C#</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
</pre></td><td class="de1"><pre class="de1"><span class="br0">&#91;</span>Test<span class="br0">&#93;</span>
<span class="kw1">public</span> <span class="kw4">void</span> WhenUserSearchesForItemsAndSelectsOne_ThenDetailsAreDisplayedForTheSelectedProduct<span class="br0">&#40;</span><span class="br0">&#41;</span>
<span class="br0">&#123;</span>
&nbsp; &nbsp; <span class="kw1">var</span> indexPage <span class="sy0">=</span> <span class="kw3">new</span> IndexPage<span class="br0">&#40;</span>_webDriver, _url, <span class="st0">&quot;Sample App&quot;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; indexPage<span class="sy0">.</span><span class="me1">SearchButton</span><span class="sy0">.</span><span class="me1">Click</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; Utility<span class="sy0">.</span><span class="me1">WaitUpTo</span><span class="br0">&#40;</span><span class="nu0">5000</span>, <span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="sy0">=&gt;</span> Utility<span class="sy0">.</span><span class="me1">IsElementPresent</span><span class="br0">&#40;</span>indexPage<span class="sy0">.</span><span class="me1">SearchResultsTable</span><span class="br0">&#41;</span> 
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="sy0">&amp;&amp;</span> indexPage<span class="sy0">.</span><span class="me1">SearchResultsTable</span><span class="sy0">.</span><span class="me1">Displayed</span>, <span class="st0">&quot;Search results&quot;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; Assert<span class="sy0">.</span><span class="me1">AreNotEqual</span><span class="br0">&#40;</span><span class="nu0">0</span>, indexPage<span class="sy0">.</span><span class="me1">GetNumberOfSearchResults</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; indexPage<span class="sy0">.</span><span class="me1">ClickSearchResults</span><span class="br0">&#40;</span><span class="nu0">0</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; Utility<span class="sy0">.</span><span class="me1">WaitUpTo</span><span class="br0">&#40;</span><span class="nu0">5000</span>, <span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="sy0">=&gt;</span> Utility<span class="sy0">.</span><span class="me1">IsElementPresent</span><span class="br0">&#40;</span>indexPage<span class="sy0">.</span><span class="me1">ItemDetails</span><span class="br0">&#41;</span> 
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="sy0">&amp;&amp;</span> indexPage<span class="sy0">.</span><span class="me1">ItemDetails</span><span class="sy0">.</span><span class="me1">Displayed</span>, <span class="st0">&quot;Item Details&quot;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; Assert<span class="sy0">.</span><span class="me1">AreEqual</span><span class="br0">&#40;</span>indexPage<span class="sy0">.</span><span class="me1">GetSelectedRowItemName</span><span class="br0">&#40;</span><span class="br0">&#41;</span>, indexPage<span class="sy0">.</span><span class="me1">ItemDetailsName</span><span class="sy0">.</span><span class="me1">Text</span><span class="br0">&#41;</span><span class="sy0">;</span>
<span class="br0">&#125;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">[Test]
public void WhenUserSearchesForItemsAndSelectsOne_ThenDetailsAreDisplayedForTheSelectedProduct()
{
    var indexPage = new IndexPage(_webDriver, _url, "Sample App");

    indexPage.SearchButton.Click();
    Utility.WaitUpTo(5000, () =&gt; Utility.IsElementPresent(indexPage.SearchResultsTable) 
				  &amp;&amp; indexPage.SearchResultsTable.Displayed, "Search results");
    Assert.AreNotEqual(0, indexPage.GetNumberOfSearchResults());

    indexPage.ClickSearchResults(0);
    Utility.WaitUpTo(5000, () =&gt; Utility.IsElementPresent(indexPage.ItemDetails) 
				  &amp;&amp; indexPage.ItemDetails.Displayed, "Item Details");

    Assert.AreEqual(indexPage.GetSelectedRowItemName(), indexPage.ItemDetailsName.Text);
}</pre></div></div>

<p>Translated into English:</p>
<ul>
<li>Open the Index Page</li>
<li>Click the Search button</li>
<li>Wait up to 5 seconds for the search results table to be displayed</li>
<li>Verify there are more than 0 results displayed</li>
<li>Click the 0th search result (to select it)</li>
<li>Wait up to 5 seconds for the selected Item to load in the Item Details section</li>
<li>Verify the name from the selected row matches the name in the details</li>
</ul>
<div style="background-color: #FFFFBB; padding: 1em; margin: 1em 1em .25em 1em">
Note: I used the PageObject pattern very lightly to try and keep the tests readable and easily repeatable for each test method, but did not spend a lot of time following good patterns to create maintainable logic, as this is just experimental code.
</div>
<p>Rather than go through all of the cases, I&#8217;ll touch on just the basic FullIntegration case and one of the Nancy cases. The ClientSide injection case felt really hacky and fragile and I don&#8217;t think it&#8217;s a good choice.</p>
<h3>IndexTests.FullIntegration</h3>
<p>This method is really slow and you have to have a working web server. The setup is quick and easy though:</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="csharp"><thead><tr><td colspan="2"  class="head">C#</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
</pre></td><td class="de1"><pre class="de1"><span class="br0">&#91;</span>TestFixture<span class="br0">&#40;</span><span class="kw3">typeof</span><span class="br0">&#40;</span>ChromeDriver<span class="br0">&#41;</span><span class="br0">&#41;</span><span class="br0">&#93;</span>
<span class="br0">&#91;</span>TestFixture<span class="br0">&#40;</span><span class="kw3">typeof</span><span class="br0">&#40;</span>PhantomJSDriver<span class="br0">&#41;</span><span class="br0">&#41;</span><span class="br0">&#93;</span>
<span class="kw1">public</span> <span class="kw4">class</span> IndexTests_FullIntegration<span class="sy0">&lt;</span>TDriver<span class="sy0">&gt;</span>
<span class="kw1">where</span> TDriver <span class="sy0">:</span> IWebDriver, <span class="kw3">new</span><span class="br0">&#40;</span><span class="br0">&#41;</span>
<span class="br0">&#123;</span>
&nbsp;
&nbsp; &nbsp; <span class="kw1">private</span> IWebDriver _webDriver<span class="sy0">;</span>
&nbsp; &nbsp; <span class="kw1">private</span> <span class="kw4">string</span> _url <span class="sy0">=</span> <span class="st0">&quot;http://localhost:63431/&quot;</span><span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; <span class="br0">&#91;</span>TestFixtureSetUp<span class="br0">&#93;</span>
&nbsp; &nbsp; <span class="kw1">public</span> <span class="kw4">void</span> TestFixtureSetup<span class="br0">&#40;</span><span class="br0">&#41;</span>
&nbsp; &nbsp; <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; _webDriver <span class="sy0">=</span> <span class="kw3">new</span> TDriver<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp;
&nbsp; &nbsp; <span class="br0">&#91;</span>TestFixtureTearDown<span class="br0">&#93;</span>
&nbsp; &nbsp; <span class="kw1">public</span> <span class="kw4">void</span> TestFixtureTearDown<span class="br0">&#40;</span><span class="br0">&#41;</span>
&nbsp; &nbsp; <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; _webDriver<span class="sy0">.</span><span class="me1">Quit</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp;
&nbsp; &nbsp; <span class="co1">// ... tests here ...</span>
&nbsp;
<span class="br0">&#125;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">[TestFixture(typeof(ChromeDriver))]
[TestFixture(typeof(PhantomJSDriver))]
public class IndexTests_FullIntegration&lt;TDriver&gt;
where TDriver : IWebDriver, new()
{

	private IWebDriver _webDriver;
	private string _url = "http://localhost:63431/";

	[TestFixtureSetUp]
	public void TestFixtureSetup()
	{
	    _webDriver = new TDriver();
	}

	[TestFixtureTearDown]
	public void TestFixtureTearDown()
	{
	    _webDriver.Quit();
	}

	// ... tests here ...

}</pre></div></div>

<p>Besides the performance, the other downside of this method is the hosting. In the <a href="/index.php/enterprisedev/application-lifecycle-management/using-specflow-to/" title="Using SpecFlow to drive Selenium WebDriver Tests">Using SpecFlow to drive Selenium UI Testing</a> post, I already had the steps necessary to deploy a staging site to test against, but this equates to more overhead and could drive where in your build process you perform the tests as well as make it harder to run them locally.</p>
<h3>IndexTests.Nancy</h3>
<p>In this case, I created a self-hosting Nancy site that copies all of the static content from my Sample site and exposes fake versions of the API. The downsides of the two Nancy methods are the restriction to static content (no MVC pages) and that you&#8217;re reimplementing a fake API for the system. </p>
<p>This second issue actually bothers me a bit, as it means you are creating a fake set of data that all of your tests are going to rely on. Typically when you have one big shared pool of test data, it makes your systems harder to maintain, as that test data turns into a bog of magic values, some of which have to be set just so for tests to succeed. Allowing the tests to define the values that would be returned when they have specific needs would make this a lot more maintainable and help surface those critical data assumptions in the tests.</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="csharp"><thead><tr><td colspan="2"  class="head">C#</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
</pre></td><td class="de1"><pre class="de1"><span class="br0">&#91;</span>TestFixture<span class="br0">&#40;</span><span class="kw3">typeof</span><span class="br0">&#40;</span>ChromeDriver<span class="br0">&#41;</span><span class="br0">&#41;</span><span class="br0">&#93;</span>
<span class="br0">&#91;</span>TestFixture<span class="br0">&#40;</span><span class="kw3">typeof</span><span class="br0">&#40;</span>PhantomJSDriver<span class="br0">&#41;</span><span class="br0">&#41;</span><span class="br0">&#93;</span>
<span class="kw1">public</span> <span class="kw4">class</span> IndexTests_NancyServer<span class="sy0">&lt;</span>TDriver<span class="sy0">&gt;</span>
<span class="kw1">where</span> TDriver <span class="sy0">:</span> IWebDriver, <span class="kw3">new</span><span class="br0">&#40;</span><span class="br0">&#41;</span>
<span class="br0">&#123;</span>
&nbsp;
&nbsp; &nbsp; <span class="kw1">private</span> <span class="kw4">string</span> _baseUrl <span class="sy0">=</span> <span class="st0">&quot;</span><span class="sy0">;</span>
&nbsp; &nbsp; <span class="kw1">private</span> NancyHost _webServer<span class="sy0">;</span>
&nbsp; &nbsp; <span class="kw1">private</span> IWebDriver _webDriver<span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; <span class="br0">&#91;</span>TestFixtureSetUp<span class="br0">&#93;</span>
&nbsp; &nbsp; <span class="kw1">public</span> <span class="kw4">void</span> TestFixtureSetup<span class="br0">&#40;</span><span class="br0">&#41;</span>
&nbsp; &nbsp; <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; _webServer <span class="sy0">=</span> SetupServer<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; _webDriver <span class="sy0">=</span> <span class="kw3">new</span> TDriver<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp;
&nbsp; &nbsp; <span class="kw1">private</span> NancyHost SetupServer<span class="br0">&#40;</span><span class="br0">&#41;</span>
&nbsp; &nbsp; <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">var</span> dnfo <span class="sy0">=</span> <span class="kw3">new</span> DirectoryInfo<span class="br0">&#40;</span><span class="st0">&quot;TestSampleWebSite&quot;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">if</span> <span class="br0">&#40;</span>dnfo<span class="sy0">.</span><span class="me1">Exists</span><span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; dnfo<span class="sy0">.</span><span class="me1">Delete</span><span class="br0">&#40;</span><span class="kw1">true</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">var</span> proc <span class="sy0">=</span> <span class="kw3">new</span> Process<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; proc<span class="sy0">.</span><span class="me1">StartInfo</span><span class="sy0">.</span><span class="me1">UseShellExecute</span> <span class="sy0">=</span> <span class="kw1">true</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; proc<span class="sy0">.</span><span class="me1">StartInfo</span><span class="sy0">.</span><span class="me1">FileName</span> <span class="sy0">=</span> <span class="st_h">@&quot;C:\WINDOWS\system32\xcopy.exe&quot;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; proc<span class="sy0">.</span><span class="me1">StartInfo</span><span class="sy0">.</span><span class="me1">Arguments</span> <span class="sy0">=</span> <span class="st0">&quot;<span class="es0">\&quot;</span>../../../SampleWebSite<span class="es0">\&quot;</span> TestSampleWebSite /E /I&quot;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; proc<span class="sy0">.</span><span class="me1">Start</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; proc<span class="sy0">.</span><span class="me1">WaitForExit</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">var</span> config <span class="sy0">=</span> <span class="kw3">new</span> HostConfiguration<span class="br0">&#40;</span><span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; UrlReservations <span class="sy0">=</span> <span class="kw3">new</span> UrlReservations<span class="br0">&#40;</span><span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; User <span class="sy0">=</span> <span class="st0">&quot;Everyone&quot;</span>,
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; CreateAutomatically <span class="sy0">=</span> <span class="kw1">true</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span><span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">var</span> host <span class="sy0">=</span> <span class="kw3">new</span> NancyHost<span class="br0">&#40;</span><span class="kw3">new</span> LocalServerBootstrapper<span class="br0">&#40;</span>dnfo<span class="sy0">.</span><span class="me1">FullName</span><span class="br0">&#41;</span>, config, <span class="kw3">new</span> Uri<span class="br0">&#40;</span>_baseUrl<span class="br0">&#41;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; host<span class="sy0">.</span><span class="me1">Start</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">return</span> host<span class="sy0">;</span>
&nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp;
&nbsp; &nbsp; <span class="br0">&#91;</span>TestFixtureTearDown<span class="br0">&#93;</span>
&nbsp; &nbsp; <span class="kw1">public</span> <span class="kw4">void</span> TestFixtureTearDown<span class="br0">&#40;</span><span class="br0">&#41;</span>
&nbsp; &nbsp; <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; _webDriver<span class="sy0">.</span><span class="me1">Quit</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; _webServer<span class="sy0">.</span><span class="me1">Stop</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp;
&nbsp; &nbsp; <span class="co1">// ... tests ...</span>
&nbsp;
<span class="br0">&#125;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">[TestFixture(typeof(ChromeDriver))]
[TestFixture(typeof(PhantomJSDriver))]
public class IndexTests_NancyServer&lt;TDriver&gt;
where TDriver : IWebDriver, new()
{

	private string _baseUrl = "http://localhost:5000/";
	private NancyHost _webServer;
	private IWebDriver _webDriver;

	[TestFixtureSetUp]
	public void TestFixtureSetup()
	{
	    _webServer = SetupServer();
	    _webDriver = new TDriver();
	}

	private NancyHost SetupServer()
	{
	    var dnfo = new DirectoryInfo("TestSampleWebSite");
	    if (dnfo.Exists)
		dnfo.Delete(true);

	    var proc = new Process();
	    proc.StartInfo.UseShellExecute = true;
	    proc.StartInfo.FileName = @"C:\WINDOWS\system32\xcopy.exe";
	    proc.StartInfo.Arguments = "\"../../../SampleWebSite\" TestSampleWebSite /E /I";
	    proc.Start();
	    proc.WaitForExit();

	    var config = new HostConfiguration()
	    {
		UrlReservations = new UrlReservations()
		{
		    User = "Everyone",
		    CreateAutomatically = true
		}
	    };

	    var host = new NancyHost(new LocalServerBootstrapper(dnfo.FullName), config, new Uri(_baseUrl));
	    host.Start();
	    return host;
	}

	[TestFixtureTearDown]
	public void TestFixtureTearDown()
	{
	    _webDriver.Quit();
	    _webServer.Stop();
	}

	// ... tests ...

}</pre></div></div>

<p><a href="https://github.com/tarwn/Blog_RequireJSandSelenium/blob/master/SampleWebSite.UITests/NancyServer/LocalServerBootstrapper.cs" title="/SampleWebSite.UITests/NancyServer/LocalServerBootstrapper.cs on github">LocalServerBootstrapper</a> defines the static content folders (in this case, /styles, /Scripts, and the /index.html file). There is a single Module, <a href="https://github.com/tarwn/Blog_RequireJSandSelenium/blob/master/SampleWebSite.UITests/NancyServer/LocalServer.cs" title="/SampleWebSite.UITests/NancyServer/LocalServer.cs on github">LocalServer</a>, that serves up the 2 item API endpoints.</p>
<p>In a larger test suite, I would move this test code to a single startup method for the whole assembly.</p>
<h3>The Performance Results</h3>
<p>Running the same 3 tests for each of the 4 methods across two different browsers helped see the difference between startup and ongoing performance costs.</p>
<p><a href="/wp-content/uploads/2014/11/SeleniumRequireJsResults.png"><img src="/wp-content/uploads/2014/11/SeleniumRequireJsResults.png" alt="SeleniumRequireJsResults" width="584" height="645" class="aligncenter size-full wp-image-3098" srcset="/wp-content/uploads/2014/11/SeleniumRequireJsResults.png 584w, /wp-content/uploads/2014/11/SeleniumRequireJsResults-271x300.png 271w" sizes="(max-width: 584px) 100vw, 584px" /></a></p>
<p>We pick up quite a bit of performance when we remove the backend server from the tests. one other thing to note is that the startup time for Phantom is quite a bit faster, but there is a slightly higher ongoing cost.</p>
<h2>Conclusions</h2>
<p>This turned out to be a pretty nice little experiment. I wouldn&#8217;t use any of these methods for a production test suite as they are now, but they definitely have promise and I&#8217;ll certainly be trying out some more things with that Nancy setup. </p>
<p>Switching from a full integration focus to more of a View focus did make things faster, but not to the degree I had hoped. I intend to spend some further thought on how to turn the dial up further without making this really painful to maintain. </p>
]]></content:encoded>
			<wfw:commentRss>/index.php/webdev/using-selenium-for-view-testing-with-knockout-and-requirejs/feed/</wfw:commentRss>
		<slash:comments>0</slash:comments>
		</item>
		<item>
		<title>AngularJS vs Knockout &#8211; Final Thoughts (9 of 9)</title>
		<link>/index.php/webdev/uidevelopment/angularjs-vs-knockout-final-thoughts-9/</link>
		<comments>/index.php/webdev/uidevelopment/angularjs-vs-knockout-final-thoughts-9/#comments</comments>
		<pubDate>Mon, 21 Oct 2013 13:38:00 +0000</pubDate>
		<dc:creator><![CDATA[Eli Weinstock-Herman (tarwn)]]></dc:creator>
				<category><![CDATA[Javascript]]></category>
		<category><![CDATA[UI Development]]></category>
		<category><![CDATA[angularjs]]></category>
		<category><![CDATA[knockout]]></category>

		<guid isPermaLink="false">/index.php/2013/10/angularjs-vs-knockout-final-thoughts-9/</guid>
		<description><![CDATA[I started reviewing AngularJS and Knockout because I had some specific projects that I intended to use one of these for and felt the research and comparative examples might prove useful to others. I haven't compared every aspect of the libraries, just enough to give me an idea which will be better for my specific projects (and hopefully give you a headstart on your own decisions).]]></description>
				<content:encoded><![CDATA[<p>I started reviewing <a href="http://angularjs.org/">AngularJS</a> and <a href="http://knockoutjs.com/">Knockout</a> because I had some specific projects that I intended to use one of these for and felt the research and comparative examples might prove useful to others. I haven&#8217;t compared every aspect of the libraries, just enough to give me an idea which will be better for my specific projects (and hopefully give you a head start on your own decisions).</p>
<div style="background-color: #eeeeee; padding: 1em;">
This is the final post in a nine post series looking at the capabilities of knockout and Angular. In the <a href="/index.php/WebDev/UIDevelopment/angularjs-vs-knockout-introduction-1" title="AngularJS vs Knockout - Introduction">introduction post</a>, I outlined the capabilities that I am evaluating for and the variety of scripts used in the series. In each post I evaluated a capability I needed and the ability to deliver that capability with both libraries, comparing their differences and offering my opinions. This post shares my final feelings.
</div>
<p>Knockout and AngularJS are attempting to solve two different problems. One is an MVVM binding framework, the other is an MVC SPA-in-a-box solution. But having read a number of posts that perform shallow comparisons, balk at the complexity of adding additional libraries, or simply have errors in them, I thought it could be done better. So I set out to perform a deeper comparison, include extra libraries when needed, and see how they stacked up against a common set of necessary capabilities. </p>
<p>This post has my final thoughts, but the previous 8 dive into individual comparisons and have more specific comparisons and thoughts along the way. If you have not done so, I urge you to at least skim through those as well (and not just for the extra hit counts).</p>
<h2>The Winner Is&#8230;</h2>
<p>The winner is both of these frameworks. I&#8217;ll get opinionated in a moment, but I want to point out that neither of these frameworks is the wrong decision. They are both very useful and the decision to use one over the other is not going to be because one is innately poorer than the other, it&#8217;s going to be because one fits the style and specific guidelines for a project better than the other. Saying that one is better than the other in all scenarios is just laziness.</p>
<p>I don&#8217;t like the term &#8216;front-end developer&#8217;*, but if that&#8217;s your role and you&#8217;re not a junior front-end developer, then you ought to know at least a couple of overlapping (binding, structure, etc) frameworks for web applications, such as Knockout, AngularJS, Backbone, Ember, Meteor, Dojo, etc. If for no other reason than because we&#8217;ve had a very public reminder recently at how messy HTML/JS development can get using gobs of jQuery and global functions (healthcare.gov). </p>
<p>If you&#8217;re writing blog posts and telling people which one is the best one, you better know them all. And have worked on a variety of project sizes, from tiny 3-5 page/route sites to whatever huge means (100&#8217;s of pages/routes?). And you need to have trained new developers how to use them, torn them out of a couple projects when they started to fall over, and refactored and kept them on a couple other projects. Because I absolutely think that there is not one framework that is globally better in all ways. It is very much situational, and projecting experience from one or two projects to all possible projects is a sign of an <a href="http://en.wikipedia.org/wiki/Dreyfus_model_of_skill_acquisition">advanced beginner</a> or maybe an <a href="http://www.daedtech.com/how-developers-stop-learning-rise-of-the-expert-beginner">expert beginner</a>.</p>
<p>Yep, if the shoe fits, I just used fancy words to call you ignorant. That&#8217;s why we have a comments section.</p>
<p>So I won&#8217;t be telling you which of these frameworks you should be using for your projects, but I absolutely have some opinions that shaped my own decisions and will shape future decisions I make regarding these frameworks.</p>
<p><i>*front-end developer: my feelings on this term (as well as backend developer) is a whole seperate blog post.</i></p>
<h2>Let&#8217;s Compare Some Stuff</h2>
<p>It&#8217;s time to make some decisions. You&#8217;ve read this far along in the series and hopefully that means that if one of these frameworks was new to you, you now have a starting point to explore the other and know what constructs map to one another across the two frameworks.</p>
<p>But how would I use them?</p>
<p>I approached these two frameworks as a beginner. </p>
<p>There are posts out there by people more knowledgeable than me with these  frameworks, at some point I&#8217;ll be one of those people. There are numerous other topics I had difficulty learning and then learned well enough to take them for granted, forgetting my earlier difficulties. I often wish I had posted on them as I learned them, so I could remember and communicate how I got past those early issues.</p>
<p>So I am posting as a beginner, probably the last time I can compare these two frameworks on relatively similar footing before I start using them in projects and building greater cognitive biases. </p>
<p>Granted, I have a few headstarts, having done professional web development for over a decade, working with all manner of MVC/MVVM/MVOMG presentation patterns plus any number of non-presentation patterns, experience in a large number of small to large-to-me (1/2 million lines?) projects, and finding a somewhat random mix of things interesting and worth playing with. I also had previously read a number of blog posts on both, watched videos on both, and used Knockout briefly for some small prototypes and the <a href="/index.php/DataMgmt/DBProgramming/sql-is-hard">SQLisHard.com</a> website (and learned enough that I want to rewrite it now).</p>
<p>So after a couple pages of text, lets get opinionated (opinionated-er?).</p>
<h2>Sunblock On, Fire suit applied</h2>
<p>Before I get into the ranting, two notes:</p>
<p>1: I plan on using both of these frameworks for projects in the future, they are both far better than building my own</p>
<p>2: What makes sense as a beginner may sound like total nonsense to someone who knows every nook and cranny, tell me (nicely) why or how I&#8217;m wrong</p>
<p>2b: Keep in mind that it may not be me who is wrong</p>
<p>2c: If I&#8217;m wrong and you also had that same wrong impression at one point, help us understand how/where you learned better</p>
<p>And now on to the opinions.</p>
<h3>Composition vs All-In-One</h3>
<p>I think the all-in-one approach of <a href="http://angularjs.org/">AngularJS</a> makes it a great choice for small projects (less than 10 screens or 10-20 JavaScript files) that are using a SPA model or want to take advantage of several of AngularJS&#8217;s capabilities. You have a single package to maintain with reasonable tools that can operate at higher scales and there are tons of examples available. </p>
<p>When the project starts getting larger, I don&#8217;t think there is a clear advantage to either. Knockout would obviously require a composition approach at any scale, meaning more packages to find, monitor, and maintain and several communities for support and continued developent instead of just the one. But from what I can see, you&#8217;re going to need to start adding more overhead on the AngularJS side as well, either in the form of custom routing packages, a full DOM manipulation library like <a href="http://jquery.com/">jQuery</a>, unit test libraries, 3rd party web component libraries, &#8230; When we start talking about larger scale projects, it stops being an all-in-one vs composition conversation and is instead a flavors of composition conversation.</p>
<p>I am concerned that most all-in-one solutions I&#8217;ve worked with in the past tend to be good at a couple things and mediocre at the rest. In some cases this means you&#8217;re just screwed (VB6 seemed to have a few places where the bar was pretty low, then you would try to surpass it and suddenly it was 100x harder), which leaves you either living with the mediocre bits or replacing them with better ones and just living with the overhead.</p>
<p>So the only time I think all-in-one vs composition helps make a decision is in the small scale or when you replace logic in the all-in-one with additional libraries and have to live with the extra file download size.</p>
<h3>No Compelling Capabilities</h3>
<p>There were capabilities in the AngularJS that weren&#8217;t available in Knockout w/ extra libraries, but none of them were that compelling to me. Would it be a handy tool to have? Heck yeah. Would it be impossible to work without it? Not really. </p>
<p><a href="http://docs.angularjs.org/guide/directive#understanding-transclusion-and-scopes" title="AngularJS: Directives - Understanding Transclusion and Scopes">Transclusion</a> was the one that stood out the most for me, most of the others were comparable or available once the relevant extra library was added. Transclusion is a plus I get for working with AngularJS, but it&#8217;s absence on the Knockout side doesn&#8217;t suddenly make everything impossible. Transclusion (and it&#8217;s lack) is not new to me, most of the server-side languages I have used did not directly support transclusion (Perl, PHP, Classic ASP, etc), in fact the only one I can think of that had it is ASP.Net Web Forms.</p>
<p>AngularJS and Knockout both had additional capabilities that were different than the other, but none of them leapt out at me and made the package irreplaceable.</p>
<h3>Documentation</h3>
<p>I really didn&#8217;t like the documentation for AngularJS. </p>
<p>The documentation defaults to the latest unstable version for API methods, so you can&#8217;t trust google search hits. Changing versions in the documentation version selector redirects you back to the <a href="http://code.angularjs.org/1.0.8/docs/api">main docs page</a> for that version, which means then manually searching for what you were looking for. Many of the API functions had inadequate examples (one uselessly basic example of <a href="http://code.angularjs.org/1.0.8/docs/api/ng.directive:ngClick" title="AngularJS: ngClick">ngClick</a> compared to 6 in <a href="http://knockoutjs.com/documentation/click-binding.html" title="Knockout - 'click' binding">knockout</a>), so I often had to experiment with them to figure out how they worked. </p>
<p>The general guide information can&#8217;t seem to decide what level of developer it is addressing, often switching between beginner and advanced topics or presenting them out of order. I had lots of difficulty figuring out how to <a href="http://docs.angularjs.org/guide/di" title="AngularJS: Dependency Injection">define dependencies</a> in the beginning, which is a pretty fundamental feature of the library. The <a href="http://docs.angularjs.org/tutorial" title="AngularJS tutorial">tutorial</a> assumes you are familiar with git and setting up a web server, which makes it less than approachable if you&#8217;re missing any of these. </p>
<p>I found after a while I was looking for blogs on topics instead of trying to read the documentation.</p>
<p>On the other hand, Knockout&#8217;s <a href="http://knockoutjs.com/documentation/introduction.html">documentation</a> is much more approachable, with web searches landing me on documentation that works with the current stable version and numerous examples. I rarely found myself reading and re-reading sentences in the Knockout documentation, it either does a better job of communicating the details or has fewer complex details. The <a href="http://learn.knockoutjs.com/" title="learn.knockoutjs.com">tutorial</a> required no installation at all, operating similar to jsfiddle and letting me get started directly from the web page. The site also has a number of <a href="http://knockoutjs.com/examples/" title="Knockout - Live Examples">live examples</a> available directly in the site, from basic bindings to editable grids of varying complexity, to a twitter client that unfortunately is no longer functional (twitter API deprecation).</p>
<p><a href="http://requirejs.org/">RequireJS</a> also worked with with search engines and the getting started was pretty easy, but there was a bit of a gap between getting started and actually using it. I had some difficulties with shims that took me a couple iterations with the documentation to get through, but that reminded me of just about every attempt to work with AngularJS&#8217;s documentation.</p>
<p>The various routing frameworks had differing levels of documentation, with my favorite (<a href="http://stoodder.github.io/finchjs/">finch.js</a>) posting all of their examples in CoffeeScript. But again, the complexity and requirement to reread everything in AngularJS&#8217;s documentation eclipsed any issues I had with these libraries.</p>
<p><a href="https://github.com/iammerrick/Squire.js/" title="Squire.js on github">Squire.js</a> had the least amount of documentation and also suffered from a limited number of blogs to draw on, if I get some time I&#8217;ll probably add some blogs about this in the future just to help out a bit. I had some confusion points getting started that probably could have been resolved pretty quickly with a tutorial or interactive example. This was probably the second-most frustrating documentation scenario (after AngularJS).</p>
<h3>Erroring</h3>
<p>There were a number of people that tried to set me straight on AngularJS&#8217;s silent binding failures. You can read the full comments after the <a href="/index.php/WebDev/UIDevelopment/angularjs-vs-knockout-data-binding-2">binding post</a>, or the slightly more prepared version here.</p>
<p>I am violently opposed to silent failures and errors that don&#8217;t provide reasonable information. There are a number of exceptions in .Net that provide absolutely no useful information for troubleshooting (Null reference, for example). There are silverlight errors that only contain a usable description if the user has the Silverlight Development tools installed. When I used JSP a long time ago, you would only get errors from the servlets that had been generated for you, often with no relation whatsoever to the code you had actually written. </p>
<p>I can&#8217;t count the number of systems that I&#8217;ve found empty catch statements in that were silently eating errors and directly causing pain to the end user.</p>
<p>There are two scenarios where you will have a binding error situation, when you have attempted to bind to something that doesn&#8217;t exist yet (async operation) and when you have a bug, for instance updating a model but missing something that bound to it.</p>
<p>Silent failures are a feature in the first case. They mean you don&#8217;t have to build conditional sections in the app that evaluate the state of objects you want to bind against, hopefully leave the screen blank when they fail (I had cases in Angular where I could still see the {} statements, ick), etc. In short, they don&#8217;t put an error in the console for the end user and require less developer time. Although I&#8217;m not sure how many users actually notice script errors, I guess it depends on your user base and whether a storm of developers is visiting and looking for issues (again, like healthcare.gov).</p>
<p>The second failure is a bigger deal. Attempting to build or maintain an application that doesn&#8217;t tell you when errors happen is painful. It means that when you get these type of binding errors you have to hope that either QA catches it or that you have made it easy for your users to communicate them to you. If the bug makes it into the wild, your application looks broken and you don&#8217;t even know about it.</p>
<p>These are also the most painful errors to fix, because not only are you relying on someone else to try and tell you how they got to the error state so you can duplicate it, you don&#8217;t have any clues from the framework even when you duplicate it. Is the property mis-bound? A parent property undefined? </p>
<p>That&#8217;s the kind of stuff that keeps me awake at night. User&#8217;s looking at a broken interface and questioning whether they are doing something wrong or if it&#8217;s broken, and if it&#8217;s broken whether they can trust me with their money. And I don&#8217;t even know why they&#8217;re churning or that I missed that opportunity to save my credibility.</p>
<p>In my career, I have built green field projects, but I have spent as much or more time on applications that have some years behind them. The harder you make it to find and fix errors, the more it&#8217;s going to cost to develop new features and the less time you&#8217;re going to have to do so.</p>
<p>AngularJS has silent binding failures, Knockout produces errors. Of the two, that second is the better situation because I presume I can at least grab them from window.onerror. The perfect situation would be to be able to give either of them a handler to report those errors to, but that&#8217;s not a pattern I have seen with any javascript library I&#8217;ve worked with.</p>
<h2>Which am I Choosing?</h2>
<p>One of my projects is big and is going to have a constant flow of features added, credibility and trust are very important, size of the script files are going to be very important, asynchronous script loading is going to be important, I don&#8217;t plan on rebuilding it for a while &#8230; that one should be obvious.</p>
<p>That being said, I have every intention of using both of these in smaller projects and even reworking the knockout code in <a href="http://sqlishard.com/">SQLisHard.com</a> at some point in the future. </p>
<p>The more important question is, which are you choosing? What factors did I cover that were more or less important for your project? What did I miss?</p>
<div style="background-color: #DDDDDD; padding: 8px; width: 400px;">
<h3>Knockout vs AngularJS</h3>
<ul style="margin: 0px; padding: 4px;">
<li><a href="/index.php/WebDev/UIDevelopment/angularjs-vs-knockout-introduction-1">Introductory Post</a></li>
<li><a href="/index.php/WebDev/UIDevelopment/angularjs-vs-knockout-data-binding-2">Data Binding</a></li>
<li><a href="/index.php/WebDev/UIDevelopment/angularjs-vs-knockout-validation-3">Validation</a></li>
<li><a href="/index.php/WebDev/UIDevelopment/angularjs-vs-knockout-serialization-4">Serialization</a></li>
<li><a href="/index.php/WebDev/UIDevelopment/angularjs-vs-knockout-templating-5">Templating</a></li>
<li><a href="/index.php/WebDev/UIDevelopment/angularjs-vs-knockout-modules-and-di-6">Modules + Dependency Injection</a></li>
<li><a href="/index.php/WebDev/UIDevelopment/angularjs-vs-knockout-automated-testing-7">Automated Testing</a></li>
<li><a href="/index.php/WebDev/UIDevelopment/AJAX/angularjs-vs-knockout-spa-routing-history-8">SPA Routing/History</a></li>
<li><a href="/index.php/WebDev/UIDevelopment/angularjs-vs-knockout-final-thoughts-9">Final, Final Thoughts</a></li>
</ul>
</div>
]]></content:encoded>
			<wfw:commentRss>/index.php/webdev/uidevelopment/angularjs-vs-knockout-final-thoughts-9/feed/</wfw:commentRss>
		<slash:comments>20</slash:comments>
		</item>
		<item>
		<title>AngularJS vs Knockout &#8211; SPA Routing/History (8 of 9)</title>
		<link>/index.php/webdev/uidevelopment/angularjs-vs-knockout-spa-routing-history-8/</link>
		<comments>/index.php/webdev/uidevelopment/angularjs-vs-knockout-spa-routing-history-8/#comments</comments>
		<pubDate>Wed, 16 Oct 2013 12:29:00 +0000</pubDate>
		<dc:creator><![CDATA[Eli Weinstock-Herman (tarwn)]]></dc:creator>
				<category><![CDATA[Javascript]]></category>
		<category><![CDATA[UI Development]]></category>
		<category><![CDATA[angularjs]]></category>
		<category><![CDATA[history]]></category>
		<category><![CDATA[knockout]]></category>
		<category><![CDATA[routing]]></category>
		<category><![CDATA[spa]]></category>

		<guid isPermaLink="false">/index.php/2013/10/angularjs-vs-knockout-spa-routing-history-8/</guid>
		<description><![CDATA[I'm reviewing Angular and Knockout to determine which would fit better for a variety of upcoming projects. Let's talk Single Page applications, and more specifically, Routing and History. While AngularJS doesn't have the word "SPA" on their front page, the tutorial jumps straight into building one. How hard is it to give Knockout the same routing capability? Does it end up worse?]]></description>
				<content:encoded><![CDATA[<p>I&#8217;m reviewing Angular and Knockout to determine which would fit better for a variety of upcoming projects. Let&#8217;s talk Single Page applications, and more specifically, Routing and History. While AngularJS doesn&#8217;t have the word &#8220;SPA&#8221; on their front page, the tutorial jumps straight into building one. How hard is it to give Knockout the same routing capability? Does it end up worse? </p>
<div style="background-color: #eeeeee; padding: 1em;">
This is the eighth of <del>eight</del> nine posts looking at the capabilities of knockout and Angular. In the <a href="/index.php/WebDev/UIDevelopment/angularjs-vs-knockout-introduction-1" title="AngularJS vs Knockout - Introduction">introduction post</a>, I outlined the capabilities that I am evaluating for. In the <a href="/index.php/WebDev/UIDevelopment/angularjs-vs-knockout-automated-testing-7" title="AngularJS vs Knockout - Automated Testing">seventh post</a>, I looked at unit testing. This post explores routing and history.
</div>
<p>All of the examples presented throughout the series are available in the <a href="https://github.com/tarwn/AngularJS-vs-Knockout/" title="View all of the post examples on github">tarwn/AngularJS-vs-Knockout</a> repository on github.</p>
<h2>Routing in AngularJS</h2>
<p>Routing is built into AngularJS and is one of the 12 steps of the <a href="http://docs.angularjs.org/tutorial/step_07">AngularJS</a> Tutorial. The <a href="http://docs.angularjs.org/api/ngRoute.$route" title="AngularJS">$route</a> provider is used to define routes and watching the URL bar to capture and apply changes.</p>
<h3>Routing in AngularJS</h3>
<p>Full source available at <a href="https://github.com/tarwn/AngularJS-vs-Knockout/blob/master/Angular/Routing.html" title="View full example file on github">Angular/Routing.html</a>.</p>
<p>A basic use case for routing would be to provide a listing page where each item links to it&#8217;s own detail page. Our expectation would be that loading the page will show the list, that the detail pages will allow navigation back to the list page, and that putting a URL in for a details page directly will load that page properly.</p>
<p>For the example, we&#8217;ll need a list controller, details controller, and a listing service:</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="javascript"><thead><tr><td colspan="2"  class="head">Javascript</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
</pre></td><td class="de1"><pre class="de1">sampleApp.<span class="me1">service</span><span class="br0">&#40;</span><span class="st0">'ListOfStuffService'</span><span class="sy0">,</span> <span class="kw1">function</span> <span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; <span class="kw1">var</span> stuff <span class="sy0">=</span> <span class="br0">&#91;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#123;</span> id<span class="sy0">:</span> <span class="nu0">1</span><span class="sy0">,</span> name<span class="sy0">:</span> <span class="st0">&quot;First Item&quot;</span><span class="sy0">,</span> description<span class="sy0">:</span> <span class="st0">&quot;It's the first item, woohoo!&quot;</span> <span class="br0">&#125;</span><span class="sy0">,</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#123;</span> id<span class="sy0">:</span> <span class="nu0">2</span><span class="sy0">,</span> name<span class="sy0">:</span> <span class="st0">&quot;Second Item&quot;</span><span class="sy0">,</span> description<span class="sy0">:</span> <span class="st0">&quot;Numero Dos!&quot;</span> <span class="br0">&#125;</span><span class="sy0">,</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#123;</span> id<span class="sy0">:</span> <span class="nu0">3</span><span class="sy0">,</span> name<span class="sy0">:</span> <span class="st0">&quot;Third Item&quot;</span><span class="sy0">,</span> description<span class="sy0">:</span> <span class="st0">&quot;The third item, this one is always out of stock&quot;</span> <span class="br0">&#125;</span>
&nbsp; &nbsp; <span class="br0">&#93;</span><span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; <span class="kw1">return</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; getAll<span class="sy0">:</span> <span class="kw1">function</span> <span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">return</span> stuff<span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span><span class="sy0">,</span>
&nbsp; &nbsp; &nbsp; &nbsp; getById<span class="sy0">:</span> <span class="kw1">function</span> <span class="br0">&#40;</span>id<span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">for</span> <span class="br0">&#40;</span><span class="kw1">var</span> i <span class="kw1">in</span> stuff<span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">if</span> <span class="br0">&#40;</span>stuff<span class="br0">&#91;</span>i<span class="br0">&#93;</span>.<span class="me1">id</span> <span class="sy0">==</span> id<span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">return</span> stuff<span class="br0">&#91;</span>i<span class="br0">&#93;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp; &nbsp; <span class="br0">&#125;</span><span class="sy0">;</span>
<span class="br0">&#125;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
sampleApp.<span class="me1">controller</span><span class="br0">&#40;</span><span class="st0">'ListOfStuffController'</span><span class="sy0">,</span> <span class="br0">&#91;</span><span class="st0">'$scope'</span><span class="sy0">,</span> <span class="st0">'ListOfStuffService'</span><span class="sy0">,</span> <span class="kw1">function</span> <span class="br0">&#40;</span>$scope<span class="sy0">,</span> listService<span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; $scope.<span class="me1">test</span> <span class="sy0">=</span> <span class="nu0">5</span><span class="sy0">;</span>
&nbsp; &nbsp; $scope.<span class="me1">listOfItems</span> <span class="sy0">=</span> listService.<span class="me1">getAll</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; console.<span class="me1">log</span><span class="br0">&#40;</span>$scope.<span class="me1">listOfItems</span><span class="br0">&#41;</span><span class="sy0">;</span>
<span class="br0">&#125;</span><span class="br0">&#93;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
sampleApp.<span class="me1">controller</span><span class="br0">&#40;</span><span class="st0">'StuffDetailController'</span><span class="sy0">,</span> <span class="br0">&#91;</span><span class="st0">'$scope'</span><span class="sy0">,</span> <span class="st0">'$routeParams'</span><span class="sy0">,</span> <span class="st0">'ListOfStuffService'</span><span class="sy0">,</span> <span class="kw1">function</span> <span class="br0">&#40;</span>$scope<span class="sy0">,</span> routeParams<span class="sy0">,</span> listService<span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; $scope.<span class="me1">item</span> <span class="sy0">=</span> listService.<span class="me1">getById</span><span class="br0">&#40;</span>routeParams.<span class="me1">id</span><span class="br0">&#41;</span><span class="sy0">;</span>
<span class="br0">&#125;</span><span class="br0">&#93;</span><span class="br0">&#41;</span><span class="sy0">;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">sampleApp.service('ListOfStuffService', function () {
    var stuff = [
        { id: 1, name: "First Item", description: "It's the first item, woohoo!" },
        { id: 2, name: "Second Item", description: "Numero Dos!" },
        { id: 3, name: "Third Item", description: "The third item, this one is always out of stock" }
    ];

    return {
        getAll: function () {
            return stuff;
        },
        getById: function (id) {
            for (var i in stuff) {
                if (stuff[i].id == id)
                    return stuff[i];
            }
        }
    };
});

sampleApp.controller('ListOfStuffController', ['$scope', 'ListOfStuffService', function ($scope, listService) {
    $scope.test = 5;
    $scope.listOfItems = listService.getAll();
    console.log($scope.listOfItems);
}]);

sampleApp.controller('StuffDetailController', ['$scope', '$routeParams', 'ListOfStuffService', function ($scope, routeParams, listService) {
    $scope.item = listService.getById(routeParams.id);
}]);</pre></div></div>

<p>Implementing the routes is then pretty straightforward:</p>
<pre>sampleApp.config(['$routeProvider', function (routeProvider) {
    // unlike the documentation, I had to put quotes around my controllers - maybe they had global variables?

    routeProvider.when('/ListOfStuff', { templateUrl: 'partials/Routing/ListOfStuff.html', controller: 'ListOfStuffController' });

    routeProvider.when('/StuffDetail/:id', { templateUrl: 'partials/Routing/StuffDetail.html', controller: 'StuffDetailController' });

    routeProvider.otherwise({ redirectTo: '/ListOfStuff' });
}]);</pre>
<p>To translate, the URL <code class="codespan">routing.html#/ListOfStuff</code> will show us the ListOfStuff.html template, the URL <code class="codespan">routing.html#/StuffDetail/123</code> will show us the StuffDetail template and pass along a parameter named &#8220;id&#8221; with 123 in it, and if no route matches, redirect to the first one.</p>
<p>The HTML templates then look like this:</p>
<p><a href="https://github.com/tarwn/AngularJS-vs-Knockout/blob/master/Angular/partials/Routing/ListOfStuff.html">Angular/partials/Routing/ListOfStuff.html</a></p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="html4strict"><thead><tr><td colspan="2"  class="head">HTML</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
</pre></td><td class="de1"><pre class="de1"><span class="sc2">&lt;<span class="kw2">div</span>&gt;</span>
&nbsp; &nbsp; <span class="sc2">&lt;<span class="kw2">ul</span> ng-repeat<span class="sy0">=</span><span class="st0">&quot;item in listOfItems&quot;</span>&gt;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="sc2">&lt;<span class="kw2">li</span>&gt;&lt;<span class="kw2">a</span> <span class="kw3">href</span><span class="sy0">=</span><span class="st0">&quot;#/StuffDetail/{{ item.id }}&quot;</span>&gt;</span>{{ item.name }}<span class="sc2">&lt;<span class="sy0">/</span><span class="kw2">a</span>&gt;&lt;<span class="sy0">/</span><span class="kw2">li</span>&gt;</span>
&nbsp; &nbsp; <span class="sc2">&lt;<span class="sy0">/</span><span class="kw2">ul</span>&gt;</span>
<span class="sc2">&lt;<span class="sy0">/</span><span class="kw2">div</span>&gt;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">&lt;div&gt;
    &lt;ul ng-repeat="item in listOfItems"&gt;
        &lt;li&gt;&lt;a href="#/StuffDetail/{{ item.id }}"&gt;{{ item.name }}&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
&lt;/div&gt;</pre></div></div>

<p><a href="https://github.com/tarwn/AngularJS-vs-Knockout/blob/master/Angular/partials/Routing/StuffDetail.html">Angular/partials/Routing/StuffDetail.html</a></p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="html4strict"><thead><tr><td colspan="2"  class="head">HTML</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
</pre></td><td class="de1"><pre class="de1"><span class="sc2">&lt;<span class="kw2">div</span>&gt;</span>
&nbsp; &nbsp; <span class="sc2">&lt;<span class="kw2">a</span> <span class="kw3">href</span><span class="sy0">=</span><span class="st0">&quot;#/ListOfStuff&quot;</span>&gt;</span>Back to list<span class="sc2">&lt;<span class="sy0">/</span><span class="kw2">a</span>&gt;&lt;<span class="kw2">br</span> <span class="sy0">/</span>&gt;</span>
&nbsp; &nbsp; <span class="sc2">&lt;<span class="kw2">br</span> <span class="sy0">/</span>&gt;</span>
&nbsp; &nbsp; <span class="sc2">&lt;<span class="kw2">b</span>&gt;</span>Id:<span class="sc2">&lt;<span class="sy0">/</span><span class="kw2">b</span>&gt;</span> {{ item.id }}<span class="sc2">&lt;<span class="kw2">br</span> <span class="sy0">/</span>&gt;</span>
&nbsp; &nbsp; <span class="sc2">&lt;<span class="kw2">b</span>&gt;</span>Name:<span class="sc2">&lt;<span class="sy0">/</span><span class="kw2">b</span>&gt;</span> {{ item.name }}<span class="sc2">&lt;<span class="kw2">br</span> <span class="sy0">/</span>&gt;</span>
&nbsp; &nbsp; <span class="sc2">&lt;<span class="kw2">b</span>&gt;</span>Description:<span class="sc2">&lt;<span class="sy0">/</span><span class="kw2">b</span>&gt;</span> {{ item.description }}<span class="sc2">&lt;<span class="kw2">br</span> <span class="sy0">/</span>&gt;</span>
<span class="sc2">&lt;<span class="sy0">/</span><span class="kw2">div</span>&gt;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">&lt;div&gt;
    &lt;a href="#/ListOfStuff"&gt;Back to list&lt;/a&gt;&lt;br /&gt;
    &lt;br /&gt;
    &lt;b&gt;Id:&lt;/b&gt; {{ item.id }}&lt;br /&gt;
    &lt;b&gt;Name:&lt;/b&gt; {{ item.name }}&lt;br /&gt;
    &lt;b&gt;Description:&lt;/b&gt; {{ item.description }}&lt;br /&gt;
&lt;/div&gt;</pre></div></div>

<p>In contrast to some of the other AngularJS examples in earlier posts, this one just worked. I didn&#8217;t have to worry about how to make hash URLs work, detecting changes and writing code to parse the URLs, or anything, just a few simple, direct rules and a controller and template for each one. </p>
<h2>Routing in &#8230; Knockout?</h2>
<p>Well, crap. Up until now there has been some clear, obvious answers when I needed to pull in an extra library for Knockout. When it comes to routing and SPA-like behavior, the two answers I see the most frequently are <a href="http://durandaljs.com/">Durandal</a> (see Avi, I spelled it right that time) and <a href="http://sammyjs.org/">Sammy.js</a>. Knockout has dynamic template bindings, so for this post maybe Sammy will be enough? And why get locked in, let&#8217;s pick a few others at random and do them too. So here we go.</p>
<p>In all of these examples, we will need a ListOfStuffService, a ListOfStuffViewModel, a StuffDetailViewModel, and an overall viewmodel to represent the page and have these viewmodels (and their associated template) assigned to it. To reduce the amount of necessary example code, I&#8217;ve assigned the template names to the viewmodels.</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="javascript"><thead><tr><td colspan="2"  class="head">Javascript</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
</pre></td><td class="de1"><pre class="de1"><span class="co1">// basic fake service with a GetAll and GetById call</span>
define<span class="br0">&#40;</span><span class="st0">&quot;ListOfStuffService&quot;</span><span class="sy0">,</span> <span class="kw1">function</span> <span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; <span class="kw1">var</span> stuff <span class="sy0">=</span> <span class="br0">&#91;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#123;</span> id<span class="sy0">:</span> <span class="nu0">1</span><span class="sy0">,</span> name<span class="sy0">:</span> <span class="st0">&quot;First Item&quot;</span><span class="sy0">,</span> description<span class="sy0">:</span> <span class="st0">&quot;It's the first item, woohoo!&quot;</span> <span class="br0">&#125;</span><span class="sy0">,</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#123;</span> id<span class="sy0">:</span> <span class="nu0">2</span><span class="sy0">,</span> name<span class="sy0">:</span> <span class="st0">&quot;Second Item&quot;</span><span class="sy0">,</span> description<span class="sy0">:</span> <span class="st0">&quot;Numero Dos!&quot;</span> <span class="br0">&#125;</span><span class="sy0">,</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#123;</span> id<span class="sy0">:</span> <span class="nu0">3</span><span class="sy0">,</span> name<span class="sy0">:</span> <span class="st0">&quot;Third Item&quot;</span><span class="sy0">,</span> description<span class="sy0">:</span> <span class="st0">&quot;The third item, this one is always out of stock&quot;</span> <span class="br0">&#125;</span>
&nbsp; &nbsp; <span class="br0">&#93;</span><span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; <span class="kw1">return</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; getAll<span class="sy0">:</span> <span class="kw1">function</span> <span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">return</span> stuff<span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span><span class="sy0">,</span>
&nbsp; &nbsp; &nbsp; &nbsp; getById<span class="sy0">:</span> <span class="kw1">function</span> <span class="br0">&#40;</span>id<span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">for</span> <span class="br0">&#40;</span><span class="kw1">var</span> i <span class="kw1">in</span> stuff<span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">if</span> <span class="br0">&#40;</span>stuff<span class="br0">&#91;</span>i<span class="br0">&#93;</span>.<span class="me1">id</span> <span class="sy0">==</span> id<span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">return</span> stuff<span class="br0">&#91;</span>i<span class="br0">&#93;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp; &nbsp; <span class="br0">&#125;</span><span class="sy0">;</span>
<span class="br0">&#125;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
<span class="co1">// and a module that has a controller that depends on the ListOfItemsService</span>
define<span class="br0">&#40;</span><span class="st0">&quot;ko-app&quot;</span><span class="sy0">,</span>
&nbsp; &nbsp; <span class="br0">&#91;</span><span class="st0">&quot;knockout&quot;</span><span class="br0">&#93;</span><span class="sy0">,</span>
&nbsp; &nbsp; <span class="kw1">function</span> <span class="br0">&#40;</span>ko<span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">return</span> <span class="kw1">function</span> <span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">this</span>.<span class="me1">viewmodel</span> <span class="sy0">=</span> ko.<span class="me1">observable</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp; &nbsp; <span class="br0">&#125;</span>
<span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
<span class="co1">// and a module that has a controller that depends on the ListOfItemsService</span>
define<span class="br0">&#40;</span><span class="st0">&quot;ListOfStuffViewModel&quot;</span><span class="sy0">,</span>
&nbsp; &nbsp; <span class="br0">&#91;</span><span class="st0">&quot;knockout&quot;</span><span class="sy0">,</span> <span class="st0">&quot;ListOfStuffService&quot;</span><span class="br0">&#93;</span><span class="sy0">,</span>
&nbsp; &nbsp; <span class="kw1">function</span> <span class="br0">&#40;</span>ko<span class="sy0">,</span> listOfItemsService<span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">return</span> <span class="kw1">function</span> <span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">this</span>.<span class="me1">template</span> <span class="sy0">=</span> <span class="st0">&quot;ListOfStuffViewModel&quot;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">var</span> items <span class="sy0">=</span> listOfItemsService.<span class="me1">getAll</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">this</span>.<span class="me1">listOfItems</span> <span class="sy0">=</span> ko.<span class="me1">observableArray</span><span class="br0">&#40;</span>items<span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp; &nbsp; <span class="br0">&#125;</span>
<span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
<span class="co1">// and a module that has a controller that depends on the ListOfItemsService</span>
define<span class="br0">&#40;</span><span class="st0">&quot;StuffDetailViewModel&quot;</span><span class="sy0">,</span>
&nbsp; &nbsp; <span class="br0">&#91;</span><span class="st0">&quot;knockout&quot;</span><span class="sy0">,</span> <span class="st0">&quot;ListOfStuffService&quot;</span><span class="br0">&#93;</span><span class="sy0">,</span>
&nbsp; &nbsp; <span class="kw1">function</span> <span class="br0">&#40;</span>ko<span class="sy0">,</span> listOfItemsService<span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">return</span> <span class="kw1">function</span> <span class="br0">&#40;</span>id<span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">this</span>.<span class="me1">template</span> <span class="sy0">=</span> <span class="st0">&quot;StuffDetailViewModel&quot;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">var</span> item <span class="sy0">=</span> listOfItemsService.<span class="me1">getById</span><span class="br0">&#40;</span>id<span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">this</span>.<span class="me1">item</span> <span class="sy0">=</span> ko.<span class="me1">observable</span><span class="br0">&#40;</span>item<span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp; &nbsp; <span class="br0">&#125;</span>
<span class="br0">&#41;</span><span class="sy0">;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">// basic fake service with a GetAll and GetById call
define("ListOfStuffService", function () {
    var stuff = [
                { id: 1, name: "First Item", description: "It's the first item, woohoo!" },
                { id: 2, name: "Second Item", description: "Numero Dos!" },
                { id: 3, name: "Third Item", description: "The third item, this one is always out of stock" }
    ];

    return {
        getAll: function () {
            return stuff;
        },
        getById: function (id) {
            for (var i in stuff) {
                if (stuff[i].id == id)
                    return stuff[i];
            }
        }
    };
});

// and a module that has a controller that depends on the ListOfItemsService
define("ko-app",
    ["knockout"],
    function (ko) {
        return function () {
            this.viewmodel = ko.observable();
        }
    }
);

// and a module that has a controller that depends on the ListOfItemsService
define("ListOfStuffViewModel",
    ["knockout", "ListOfStuffService"],
    function (ko, listOfItemsService) {
        return function () {
            this.template = "ListOfStuffViewModel";
            var items = listOfItemsService.getAll();
            this.listOfItems = ko.observableArray(items);
        }
    }
);

// and a module that has a controller that depends on the ListOfItemsService
define("StuffDetailViewModel",
    ["knockout", "ListOfStuffService"],
    function (ko, listOfItemsService) {
        return function (id) {
            this.template = "StuffDetailViewModel";
            var item = listOfItemsService.getById(id);
            this.item = ko.observable(item);
        }
    }
);</pre></div></div>

<p>And the HTML for the page and the viewmodels looks like this:</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="html4strict"><thead><tr><td colspan="2"  class="head">HTML</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
</pre></td><td class="de1"><pre class="de1"><span class="sc2">&lt;<span class="kw2">body</span>&gt;</span>
<span class="sc-1">&lt;!-- ko if: viewmodel() --&gt;</span>
<span class="sc2">&lt;<span class="kw2">div</span> data-bind<span class="sy0">=</span><span class="st0">&quot;template: { name: viewmodel().template, data: viewmodel }&quot;</span>&gt;</span>
<span class="sc2">&lt;<span class="sy0">/</span><span class="kw2">div</span>&gt;</span>
<span class="sc-1">&lt;!-- /ko --&gt;</span>
&nbsp;
<span class="sc-1">&lt;!-- ... --&gt;</span>
&nbsp;
<span class="sc2">&lt;<span class="kw2">script</span> <span class="kw3">type</span><span class="sy0">=</span><span class="st0">&quot;text/html&quot;</span> <span class="kw3">id</span><span class="sy0">=</span><span class="st0">&quot;ListOfStuffViewModel&quot;</span>&gt;</span>
&nbsp; &nbsp; <span class="sc2">&lt;<span class="kw2">ul</span> data-bind<span class="sy0">=</span><span class="st0">&quot;foreach: listOfItems&quot;</span>&gt;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="sc2">&lt;<span class="kw2">li</span>&gt;&lt;<span class="kw2">a</span> data-bind<span class="sy0">=</span><span class="st0">&quot;attr: { href: '#/StuffDetail/' + id }, text: name&quot;</span>&gt;&lt;<span class="sy0">/</span><span class="kw2">a</span>&gt;&lt;<span class="sy0">/</span><span class="kw2">li</span>&gt;</span>
&nbsp; &nbsp; <span class="sc2">&lt;<span class="sy0">/</span><span class="kw2">ul</span>&gt;</span>
<span class="sc2">&lt;<span class="sy0">/</span><span class="kw2">script</span>&gt;</span>
<span class="sc2">&lt;<span class="kw2">script</span> <span class="kw3">type</span><span class="sy0">=</span><span class="st0">&quot;text/html&quot;</span> <span class="kw3">id</span><span class="sy0">=</span><span class="st0">&quot;StuffDetailViewModel&quot;</span>&gt;</span>
&nbsp; &nbsp; <span class="sc2">&lt;<span class="kw2">div</span>&gt;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="sc2">&lt;<span class="kw2">a</span> <span class="kw3">href</span><span class="sy0">=</span><span class="st0">&quot;#/ListOfStuff&quot;</span>&gt;</span>Back to list<span class="sc2">&lt;<span class="sy0">/</span><span class="kw2">a</span>&gt;&lt;<span class="kw2">br</span> <span class="sy0">/</span>&gt;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="sc2">&lt;<span class="kw2">br</span> <span class="sy0">/</span>&gt;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="sc2">&lt;<span class="kw2">b</span>&gt;</span>Id:<span class="sc2">&lt;<span class="sy0">/</span><span class="kw2">b</span>&gt;</span> <span class="sc2">&lt;<span class="kw2">span</span> data-bind<span class="sy0">=</span><span class="st0">&quot;text: item().id&quot;</span>&gt;&lt;<span class="sy0">/</span><span class="kw2">span</span>&gt;&lt;<span class="kw2">br</span> <span class="sy0">/</span>&gt;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="sc2">&lt;<span class="kw2">b</span>&gt;</span>Name:<span class="sc2">&lt;<span class="sy0">/</span><span class="kw2">b</span>&gt;</span> <span class="sc2">&lt;<span class="kw2">span</span> data-bind<span class="sy0">=</span><span class="st0">&quot;text: item().name&quot;</span>&gt;&lt;<span class="sy0">/</span><span class="kw2">span</span>&gt;&lt;<span class="kw2">br</span> <span class="sy0">/</span>&gt;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="sc2">&lt;<span class="kw2">b</span>&gt;</span>Description:<span class="sc2">&lt;<span class="sy0">/</span><span class="kw2">b</span>&gt;</span> <span class="sc2">&lt;<span class="kw2">span</span> data-bind<span class="sy0">=</span><span class="st0">&quot;text: item().description&quot;</span>&gt;&lt;<span class="sy0">/</span><span class="kw2">span</span>&gt;&lt;<span class="kw2">br</span> <span class="sy0">/</span>&gt;</span>
&nbsp; &nbsp; <span class="sc2">&lt;<span class="sy0">/</span><span class="kw2">div</span>&gt;</span>
<span class="sc2">&lt;<span class="sy0">/</span><span class="kw2">script</span>&gt;</span>
<span class="sc2">&lt;<span class="sy0">/</span><span class="kw2">body</span>&gt;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">&lt;body&gt;
&lt;!-- ko if: viewmodel() --&gt;
&lt;div data-bind="template: { name: viewmodel().template, data: viewmodel }"&gt;
&lt;/div&gt;
&lt;!-- /ko --&gt;

&lt;!-- ... --&gt;

&lt;script type="text/html" id="ListOfStuffViewModel"&gt;
    &lt;ul data-bind="foreach: listOfItems"&gt;
        &lt;li&gt;&lt;a data-bind="attr: { href: '#/StuffDetail/' + id }, text: name"&gt;&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
&lt;/script&gt;
&lt;script type="text/html" id="StuffDetailViewModel"&gt;
    &lt;div&gt;
        &lt;a href="#/ListOfStuff"&gt;Back to list&lt;/a&gt;&lt;br /&gt;
        &lt;br /&gt;
        &lt;b&gt;Id:&lt;/b&gt; &lt;span data-bind="text: item().id"&gt;&lt;/span&gt;&lt;br /&gt;
        &lt;b&gt;Name:&lt;/b&gt; &lt;span data-bind="text: item().name"&gt;&lt;/span&gt;&lt;br /&gt;
        &lt;b&gt;Description:&lt;/b&gt; &lt;span data-bind="text: item().description"&gt;&lt;/span&gt;&lt;br /&gt;
    &lt;/div&gt;
&lt;/script&gt;
&lt;/body&gt;</pre></div></div>

<p>So far, the only major addition over the Angular example above is that outer viewmodel and the HTML to conditionally render it above. That &#8220;if&#8221; binding means that Knockout will not evaluate/display that area&#8217;s contents when the bound value is falsey. </p>
<p>I&#8217;ve made the examples slightly more complex than they needed to be because I&#8217;m still using <a href="http://requirejs.org/">RequireJS</a> throughout them. This wasn&#8217;t necessary and probably serves as a little extra noise, but oh well.</p>
<h3>Knockout Routing w/ Sammy.js</h3>
<p>Full source available at <a href="https://github.com/tarwn/AngularJS-vs-Knockout/blob/master/Knockout/Routing.html" title="View full example file on github">Knockout/Routing.html</a>.</p>
<p>So we have our viewmodels, we have a bare app viewmodel they will get socketed into, and we have HTML templates. Let&#8217;s define the routes using the <a href="http://sammyjs.org/">Sammy.js</a> library:</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="javascript"><thead><tr><td colspan="2"  class="head">Javascript</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
</pre></td><td class="de1"><pre class="de1"><span class="co1">// define route and outer ko viewmodel</span>
require<span class="br0">&#40;</span><span class="br0">&#91;</span><span class="st0">'knockout'</span><span class="sy0">,</span> <span class="st0">'ko-app'</span><span class="sy0">,</span> <span class="st0">'sammy'</span><span class="br0">&#93;</span><span class="sy0">,</span> <span class="kw1">function</span> <span class="br0">&#40;</span>ko<span class="sy0">,</span> AppViewModel<span class="sy0">,</span> sammy<span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; <span class="kw1">var</span> app <span class="sy0">=</span> <span class="kw1">new</span> AppViewModel<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; ko.<span class="me1">applyBindings</span><span class="br0">&#40;</span>app<span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; <span class="kw1">var</span> routing <span class="sy0">=</span> sammy<span class="br0">&#40;</span><span class="kw1">function</span> <span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">this</span>.<span class="kw1">get</span><span class="br0">&#40;</span><span class="st0">'#/ListOfStuff'</span><span class="sy0">,</span> <span class="kw1">function</span> <span class="br0">&#40;</span>context<span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; require<span class="br0">&#40;</span><span class="br0">&#91;</span><span class="st0">'ListOfStuffViewModel'</span><span class="br0">&#93;</span><span class="sy0">,</span> <span class="kw1">function</span> <span class="br0">&#40;</span>ViewModel<span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; app.<span class="me1">viewmodel</span><span class="br0">&#40;</span><span class="kw1">new</span> ViewModel<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">this</span>.<span class="kw1">get</span><span class="br0">&#40;</span><span class="st0">'#/StuffDetail/:id'</span><span class="sy0">,</span> <span class="kw1">function</span> <span class="br0">&#40;</span>context<span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">var</span> id <span class="sy0">=</span> <span class="kw1">this</span>.<span class="me1">params</span><span class="br0">&#91;</span><span class="st0">'id'</span><span class="br0">&#93;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; require<span class="br0">&#40;</span><span class="br0">&#91;</span><span class="st0">'StuffDetailViewModel'</span><span class="br0">&#93;</span><span class="sy0">,</span> <span class="kw1">function</span> <span class="br0">&#40;</span>ViewModel<span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; app.<span class="me1">viewmodel</span><span class="br0">&#40;</span><span class="kw1">new</span> ViewModel<span class="br0">&#40;</span>id<span class="br0">&#41;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">var</span> self <span class="sy0">=</span> <span class="kw1">this</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">this</span>.<span class="kw1">get</span><span class="br0">&#40;</span><span class="st0">''</span><span class="sy0">,</span> <span class="kw1">function</span> <span class="br0">&#40;</span>context<span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; self.<span class="me1">runRoute</span><span class="br0">&#40;</span><span class="st0">'get'</span><span class="sy0">,</span> <span class="st0">'#/ListOfStuff'</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; <span class="br0">&#125;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; routing.<span class="me1">run</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
<span class="br0">&#125;</span><span class="br0">&#41;</span><span class="sy0">;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">// define route and outer ko viewmodel
require(['knockout', 'ko-app', 'sammy'], function (ko, AppViewModel, sammy) {
    var app = new AppViewModel();
    ko.applyBindings(app);

    var routing = sammy(function () {

        this.get('#/ListOfStuff', function (context) {
            require(['ListOfStuffViewModel'], function (ViewModel) {
                app.viewmodel(new ViewModel());
            });
        });

        this.get('#/StuffDetail/:id', function (context) {
            var id = this.params['id'];
            require(['StuffDetailViewModel'], function (ViewModel) {
                app.viewmodel(new ViewModel(id));
            });
        });

        var self = this;
        this.get('', function (context) {
            self.runRoute('get', '#/ListOfStuff');
        });

    });
    routing.run();
});</pre></div></div>

<p>Using the Sammy library, I&#8217;ve defined the same three cases I had in Angular. Each route has a callback that it calls when the route is matched, which I used to create the appropriate ViewModel and assign it to my main &#8220;app&#8221; viewmodel, causing the template to be changed. If the empty route is matched, I explicitly run the ListOfStuff route.</p>
<h3>Knockout Routing w/ Finch.js</h3>
<p>Full source available at <a href="https://github.com/tarwn/AngularJS-vs-Knockout/blob/master/Knockout/Routing.FinchJS.html" title="View full example file on github">Knockout/Routing.FinchJS.html</a>.</p>
<p>The tagline for <a href="http://stoodder.github.io/finchjs/">FinchJS</a> is &#8220;Powerfully Simple Javascript Routing&#8221;, and I have to agree that the library meets expectations. Implementing the same routes as the last two exmaples:</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="javascript"><thead><tr><td colspan="2"  class="head">Javascript</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
</pre></td><td class="de1"><pre class="de1"><span class="co1">// define route and outer ko viewmodel</span>
require<span class="br0">&#40;</span><span class="br0">&#91;</span><span class="st0">'knockout'</span><span class="sy0">,</span> <span class="st0">'mainApp'</span><span class="sy0">,</span> <span class="st0">'finch'</span><span class="br0">&#93;</span><span class="sy0">,</span> <span class="kw1">function</span> <span class="br0">&#40;</span>ko<span class="sy0">,</span> AppViewModel<span class="sy0">,</span> finch<span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; <span class="kw1">var</span> app <span class="sy0">=</span> <span class="kw1">new</span> AppViewModel<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; finch.<span class="me1">route</span><span class="br0">&#40;</span><span class="st0">&quot;/&quot;</span><span class="sy0">,</span> <span class="kw1">function</span> <span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; finch.<span class="me1">call</span><span class="br0">&#40;</span><span class="st0">&quot;/ListOfStuff&quot;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; <span class="br0">&#125;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; finch.<span class="me1">route</span><span class="br0">&#40;</span><span class="st0">&quot;/ListOfStuff&quot;</span><span class="sy0">,</span> <span class="kw1">function</span> <span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; require<span class="br0">&#40;</span><span class="br0">&#91;</span><span class="st0">'ListOfStuffViewModel'</span><span class="br0">&#93;</span><span class="sy0">,</span> <span class="kw1">function</span> <span class="br0">&#40;</span>ViewModel<span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; app.<span class="me1">viewmodel</span><span class="br0">&#40;</span><span class="kw1">new</span> ViewModel<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; <span class="br0">&#125;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; finch.<span class="me1">route</span><span class="br0">&#40;</span><span class="st0">&quot;/StuffDetail/:id&quot;</span><span class="sy0">,</span> <span class="kw1">function</span> <span class="br0">&#40;</span>bindings<span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; require<span class="br0">&#40;</span><span class="br0">&#91;</span><span class="st0">'StuffDetailViewModel'</span><span class="br0">&#93;</span><span class="sy0">,</span> <span class="kw1">function</span> <span class="br0">&#40;</span>ViewModel<span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; app.<span class="me1">viewmodel</span><span class="br0">&#40;</span><span class="kw1">new</span> ViewModel<span class="br0">&#40;</span>bindings.<span class="me1">id</span><span class="br0">&#41;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; <span class="br0">&#125;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; ko.<span class="me1">applyBindings</span><span class="br0">&#40;</span>app<span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; finch.<span class="me1">listen</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
<span class="br0">&#125;</span><span class="br0">&#41;</span><span class="sy0">;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">// define route and outer ko viewmodel
require(['knockout', 'mainApp', 'finch'], function (ko, AppViewModel, finch) {
    var app = new AppViewModel();

    finch.route("/", function () {
        finch.call("/ListOfStuff");
    });

    finch.route("/ListOfStuff", function () {
        require(['ListOfStuffViewModel'], function (ViewModel) {
            app.viewmodel(new ViewModel());
        });
    });

    finch.route("/StuffDetail/:id", function (bindings) {
        require(['StuffDetailViewModel'], function (ViewModel) {
            app.viewmodel(new ViewModel(bindings.id));
        });
    });

    ko.applyBindings(app);
    finch.listen();
});</pre></div></div>

<p>The route logic looks almost the same as Sammy.js, proving that I probably picked too easy of an example for this post. </p>
<h3>Knockout Routing w/ flatiron director</h3>
<p>Full source available at <a href="https://github.com/tarwn/AngularJS-vs-Knockout/blob/master/Knockout/Routing.Director.html" title="View full example file on github">Knockout/Routing.Director.html</a>.</p>
<p>One of the key goals for the <a href="">flatiron director</a> library is to work as seamlessly as possible in both the node.js and browser environments. director has HTML5 History API support, but I&#8217;ve configured it off for this example to match the others:</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="javascript"><thead><tr><td colspan="2"  class="head">Javascript</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
</pre></td><td class="de1"><pre class="de1">require<span class="br0">&#40;</span><span class="br0">&#91;</span><span class="st0">'knockout'</span><span class="sy0">,</span> <span class="st0">'mainApp'</span><span class="sy0">,</span> <span class="st0">'director'</span><span class="br0">&#93;</span><span class="sy0">,</span> <span class="kw1">function</span> <span class="br0">&#40;</span>ko<span class="sy0">,</span> AppViewModel<span class="sy0">,</span> director<span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; <span class="kw1">var</span> app <span class="sy0">=</span> <span class="kw1">new</span> AppViewModel<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; <span class="kw1">var</span> routes <span class="sy0">=</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="st0">'/ListOfStuff'</span><span class="sy0">:</span> <span class="kw1">function</span> <span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; require<span class="br0">&#40;</span><span class="br0">&#91;</span><span class="st0">'ListOfStuffViewModel'</span><span class="br0">&#93;</span><span class="sy0">,</span> <span class="kw1">function</span> <span class="br0">&#40;</span>ViewModel<span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; app.<span class="me1">viewmodel</span><span class="br0">&#40;</span><span class="kw1">new</span> ViewModel<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span><span class="br0">&#41;</span><span class="br0">&#125;</span><span class="sy0">,</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="st0">'/StuffDetail/:id'</span><span class="sy0">:</span> <span class="kw1">function</span> <span class="br0">&#40;</span>id<span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; require<span class="br0">&#40;</span><span class="br0">&#91;</span><span class="st0">'StuffDetailViewModel'</span><span class="br0">&#93;</span><span class="sy0">,</span> <span class="kw1">function</span> <span class="br0">&#40;</span>ViewModel<span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; app.<span class="me1">viewmodel</span><span class="br0">&#40;</span><span class="kw1">new</span> ViewModel<span class="br0">&#40;</span>id<span class="br0">&#41;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span><span class="br0">&#41;</span><span class="br0">&#125;</span>
&nbsp; &nbsp; <span class="br0">&#125;</span><span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; ko.<span class="me1">applyBindings</span><span class="br0">&#40;</span>app<span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; <span class="kw1">var</span> router <span class="sy0">=</span> director<span class="br0">&#40;</span>routes<span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; router.<span class="me1">init</span><span class="br0">&#40;</span><span class="st0">'/ListOfStuff'</span><span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; .<span class="me1">configure</span><span class="br0">&#40;</span><span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; html5history<span class="sy0">:</span> <span class="kw2">false</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span><span class="br0">&#41;</span><span class="sy0">;</span>
<span class="br0">&#125;</span><span class="br0">&#41;</span><span class="sy0">;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">require(['knockout', 'mainApp', 'director'], function (ko, AppViewModel, director) {
    var app = new AppViewModel();

    var routes = {
        '/ListOfStuff': function () {
                            require(['ListOfStuffViewModel'], function (ViewModel) {
                                app.viewmodel(new ViewModel());
                            })},
        '/StuffDetail/:id': function (id) {
                            require(['StuffDetailViewModel'], function (ViewModel) {
                                app.viewmodel(new ViewModel(id));
                            })}
    };

    ko.applyBindings(app);
    var router = director(routes);
    router.init('/ListOfStuff')
            .configure({
                html5history: false
            });
});</pre></div></div>

<p>In this case, the routes are defined as an array and I only define the two real routes. Once I&#8217;ve applied my bindings, I start up the routing by calling init with the default URL to use if there isn&#8217;t a hash address in the path.</p>
<p>This example does have an error, in that it doesn&#8217;t actually work if I load a hashed address from scratch. All three other examples work fine, so I suspect it&#8217;s something I&#8217;ve done wrong.</p>
<h2>Some Differences</h2>
<p>Angular&#8217;s injection kept the routing cleaner for that example, but really the biggest issue is that I didn&#8217;t pick a complex enough example. All of the methods I tried were easy to implement. </p>
<p><b>Templating</b></p>
<p>Angular&#8217;s routing automatically uses templating, whereas the others are using Knockout and using the standard templating that is built into knockout. Although, like so much of the rest of this series, composing external templates onto the knockout side is just a library away, in this case the <a href="https://github.com/ifandelse/Knockout.js-External-Template-Engine">Knockout.js External Template Engine</a>.</p>
<p>I put together a copy of the Finch example above with external templating here: <a href="https://github.com/tarwn/AngularJS-vs-Knockout/blob/master/Knockout/Routing.FinchJS.ExtTemplates.html" title="View full example file on github">Knockout/Routing.FinchJS.ExtTemplates.html</a></p>
<p><b>The Details</b><br />
As I mentioned above, all of these examples were really easy to put together, so I don&#8217;t think I really exercised the libraries to show off their differences. That being said, which package you choose (I&#8217;ve had people suggest I use custom routing for Angular, even) is probably going to depend on those details and which flavor makes the most sense for your scenario. </p>
<h2>Final Thoughts</h2>
<p>Man that was easy.There are a ton of good routing libraries out there and it seems like even if you made the wrong decision when you picked one, it would be relatively easy to switch to a different one later. I personally liked Finch.js the best, but if I was using AngularJS I&#8217;d probably ride the default library as long as I could (and may never have a reason to change).</p>
<p>Using the dynamic template to change &#8220;pages&#8221; was also easy. I banged on the links a while and Chrome said I was using a lot of memory, but as soon as I let the GC clean up, it all cleared up. Banging on AngularJS also used memory, but it had GC&#8217;s occurring along the way too, so I suspect if I were to use the knockout &#8216;sorta-SPA&#8217; viewmodel in a production environment, I would actually want to use a method that delete()-ed the oold model as the new one was assigned.</p>
<h2>Post 8 of <del>8</del> 9</h2>
<p>I&#8217;ll be posting one last post for this series that is a round up of all the comparisons and feelings I had throughout the series, my opinion on which framework I would use, and a list of things I should have also looked at in the series. Keep an eye out on LessThanDot (and twitter, google plus, etc) for that post.</p>
<div style="background-color: #DDDDDD; padding: 8px; width: 400px;">
<h3>Knockout vs AngularJS</h3>
<ul style="margin: 0px; padding: 4px;">
<li><a href="/index.php/WebDev/UIDevelopment/angularjs-vs-knockout-introduction-1">Introductory Post</a></li>
<li><a href="/index.php/WebDev/UIDevelopment/angularjs-vs-knockout-data-binding-2">Data Binding</a></li>
<li><a href="/index.php/WebDev/UIDevelopment/angularjs-vs-knockout-validation-3">Validation</a></li>
<li><a href="/index.php/WebDev/UIDevelopment/angularjs-vs-knockout-serialization-4">Serialization</a></li>
<li><a href="/index.php/WebDev/UIDevelopment/angularjs-vs-knockout-templating-5">Templating</a></li>
<li><a href="/index.php/WebDev/UIDevelopment/angularjs-vs-knockout-modules-and-di-6">Modules + Dependency Injection</a></li>
<li><a href="/index.php/WebDev/UIDevelopment/angularjs-vs-knockout-automated-testing-7">Automated Testing</a></li>
<li><a href="/index.php/WebDev/UIDevelopment/AJAX/angularjs-vs-knockout-spa-routing-history-8">SPA Routing/History</a></li>
<li><a href="/index.php/WebDev/UIDevelopment/angularjs-vs-knockout-final-thoughts-9">Final, Final Thoughts</a></li>
</ul>
</div>
]]></content:encoded>
			<wfw:commentRss>/index.php/webdev/uidevelopment/angularjs-vs-knockout-spa-routing-history-8/feed/</wfw:commentRss>
		<slash:comments>5</slash:comments>
		</item>
		<item>
		<title>AngularJS vs Knockout &#8211; Automated Testing (7 of 8)</title>
		<link>/index.php/webdev/uidevelopment/angularjs-vs-knockout-automated-testing-7/</link>
		<comments>/index.php/webdev/uidevelopment/angularjs-vs-knockout-automated-testing-7/#respond</comments>
		<pubDate>Tue, 15 Oct 2013 13:00:00 +0000</pubDate>
		<dc:creator><![CDATA[Eli Weinstock-Herman (tarwn)]]></dc:creator>
				<category><![CDATA[Javascript]]></category>
		<category><![CDATA[UI Development]]></category>
		<category><![CDATA[angularjs]]></category>
		<category><![CDATA[jasmine]]></category>
		<category><![CDATA[knockout]]></category>
		<category><![CDATA[unit testing]]></category>
		<category><![CDATA[you better mock yourself]]></category>

		<guid isPermaLink="false">/index.php/2013/10/angularjs-vs-knockout-automated-testing-7/</guid>
		<description><![CDATA[I'm reviewing Angular and Knockout to determine which would fit better for a variety of upcoming projects. As we get into projects that are larger than a few small views and routes, the ability to add automated testing becomes important.  Unit testing p&#8230;]]></description>
				<content:encoded><![CDATA[<p>I&#8217;m reviewing Angular and Knockout to determine which would fit better for a variety of upcoming projects. As we get into projects that are larger than a few small views and routes, the ability to add automated testing becomes important.  Unit testing provides a safety net against future us screwing up the code that present us is writing, can be used before we write the code (TDD) or after, and helps us keep some of the complexity in check as the project size grows and ages. Let&#8217;s put AngularJS and Knockout under test.</p>
<div style="background-color: #eeeeee; padding: 1em;">
This is the seventh of eight posts looking at the capabilities of knockout and Angular. In the <a href="/index.php/WebDev/UIDevelopment/angularjs-vs-knockout-introduction-1" title="AngularJS vs Knockout - Introduction">introduction post</a>, I outlined the capabilities that I am evaluating for. In the <a href="/index.php/WebDev/UIDevelopment/angularjs-vs-knockout-modules-and-di-6" title="AngularJS vs Knockout - Modules and DI">sixth post</a>, I looked at Modules and Dependency injection, an important lead up to this post, which intends to jump into unit testing those modules.
</div>
<p>All of the examples presented throughout the series are available in the <a href="https://github.com/tarwn/AngularJS-vs-Knockout/" title="View all of the post examples on github">tarwn/AngularJS-vs-Knockout</a> repository on github.</p>
<p>In both sections I&#8217;ll be using <a href="http://pivotal.github.io/jasmine/">Jasmine 1.3.1</a>, the focus is on how the libraries are to test, so this will provide a somewhat level playing field. We&#8217;ll be testing the modules from the previous post, so I&#8217;ll also be including <a href="http://requirejs.org/">RequireJS</a> for the Knockout side of things, but skipping script.js and going with standard script tags for the Angular side (aka, being lazy). I&#8217;ll also be pulling in <a href="https://github.com/iammerrick/Squire.js/">Squire.js</a> and <a href="https://github.com/derickbailey/jasmine.async">Jasmine.Async</a> to add mocking for RequireJS and asynchronous shortcut methods for Jasmine, respectively.</p>
<p>Both sets of tests are tested from a single Jasmine testrunner, in the github repository: <a href="https://github.com/tarwn/AngularJS-vs-Knockout/blob/master/SpecRunner.html" title="View full example file on github">SpecRunner.html</a></p>
<h2>Unit Testing AngularJS</h2>
<p>Unit Testing is of huge importance to the AngularJS team, for which I can&#8217;t applaud them enough. It is constantly mentioned in documentation and tutorials and has resulted in the <a href="http://karma-runner.github.io/0.10/index.html">karma</a> test runner, a tool I&#8217;m impatient to start playing with but unfortunately have not yet had time for.</p>
<h3>AngularJS Modules Under Test</h3>
<p>In the <a href="/index.php/WebDev/UIDevelopment/angularjs-vs-knockout-modules-and-di-6">previous post</a>, we had sampleApp and sampleServices modules that we moved into external files, using script.js as an asynchronous module loader. Other than creating a copy of the files and putting them in a new folder (js/UnitTesting) specific to this post, no modifications have been made.</p>
<p>Relevant sections of <a href="https://github.com/tarwn/AngularJS-vs-Knockout/blob/master/SpecRunner.html" title="View full example file on github">SpecRunner.html</a></p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="html4strict"><thead><tr><td colspan="2"  class="head">HTML</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
</pre></td><td class="de1"><pre class="de1"><span class="sc2">&lt;<span class="kw2">html</span>&gt;</span>
<span class="sc2">&lt;<span class="kw2">head</span>&gt;</span>
&nbsp; &nbsp; <span class="sc-1">&lt;!-- ... --&gt;</span>
&nbsp;
&nbsp; &nbsp; <span class="sc-1">&lt;!-- Angular files libraries --&gt;</span>
&nbsp; &nbsp; <span class="sc2">&lt;<span class="kw2">script</span> <span class="kw3">src</span><span class="sy0">=</span><span class="st0">&quot;Angular/js/lib/angular-1.0.8.min.js&quot;</span>&gt;&lt;<span class="sy0">/</span><span class="kw2">script</span>&gt;</span>
&nbsp; &nbsp; <span class="sc2">&lt;<span class="kw2">script</span> <span class="kw3">src</span><span class="sy0">=</span><span class="st0">&quot;Angular/js/lib/angular-mocks.js&quot;</span>&gt;&lt;<span class="sy0">/</span><span class="kw2">script</span>&gt;</span>
&nbsp; &nbsp; <span class="sc-1">&lt;!-- Angular source files --&gt;</span>
&nbsp; &nbsp; <span class="sc2">&lt;<span class="kw2">script</span> <span class="kw3">src</span><span class="sy0">=</span><span class="st0">&quot;Angular/js/UnitTesting/sampleApp.js&quot;</span>&gt;&lt;<span class="sy0">/</span><span class="kw2">script</span>&gt;</span>
&nbsp; &nbsp; <span class="sc2">&lt;<span class="kw2">script</span> <span class="kw3">src</span><span class="sy0">=</span><span class="st0">&quot;Angular/js/UnitTesting/sampleServices.js&quot;</span>&gt;&lt;<span class="sy0">/</span><span class="kw2">script</span>&gt;</span>
&nbsp; &nbsp; <span class="sc-1">&lt;!-- Angular specs --&gt;</span>
&nbsp; &nbsp; <span class="sc2">&lt;<span class="kw2">script</span> <span class="kw3">src</span><span class="sy0">=</span><span class="st0">&quot;Angular/UnitTestingSpecs.js&quot;</span>&gt;&lt;<span class="sy0">/</span><span class="kw2">script</span>&gt;</span>
&nbsp;
&nbsp; &nbsp; <span class="sc-1">&lt;!-- ... --&gt;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">&lt;html&gt;
&lt;head&gt;
    &lt;!-- ... --&gt;

    &lt;!-- Angular files libraries --&gt;
    &lt;script src="Angular/js/lib/angular-1.0.8.min.js"&gt;&lt;/script&gt;
    &lt;script src="Angular/js/lib/angular-mocks.js"&gt;&lt;/script&gt;
    &lt;!-- Angular source files --&gt;
    &lt;script src="Angular/js/UnitTesting/sampleApp.js"&gt;&lt;/script&gt;
    &lt;script src="Angular/js/UnitTesting/sampleServices.js"&gt;&lt;/script&gt;
    &lt;!-- Angular specs --&gt;
    &lt;script src="Angular/UnitTestingSpecs.js"&gt;&lt;/script&gt;

    &lt;!-- ... --&gt;</pre></div></div>

<p>The specs file then handles mocking the service for the controller and defines the tests I want to run:</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="javascript"><thead><tr><td colspan="2"  class="head">Javascript</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
</pre></td><td class="de1"><pre class="de1"><span class="co1">// &nbsp;borrowed heavily from http://www.benlesh.com/2013/05/angularjs-unit-testing-controllers.html</span>
describe<span class="br0">&#40;</span><span class="st0">&quot;Angular&quot;</span><span class="sy0">,</span> <span class="kw1">function</span> <span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; describe<span class="br0">&#40;</span><span class="st0">&quot;Testing the ModuleDIController&quot;</span><span class="sy0">,</span> <span class="kw1">function</span> <span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">var</span> $scope <span class="sy0">=</span> <span class="kw2">null</span><span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">var</span> expectedServiceResponse <span class="sy0">=</span> <span class="br0">&#91;</span><span class="br0">&#123;</span> name<span class="sy0">:</span> <span class="st0">&quot;A&quot;</span><span class="sy0">,</span> number<span class="sy0">:</span> <span class="nu0">123</span> <span class="br0">&#125;</span><span class="br0">&#93;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">var</span> mockService <span class="sy0">=</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; getList<span class="sy0">:</span> <span class="kw1">function</span> <span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span> <span class="kw1">return</span> expectedServiceResponse<span class="sy0">;</span> <span class="br0">&#125;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span><span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; beforeEach<span class="br0">&#40;</span>module<span class="br0">&#40;</span><span class="st0">'sampleApp'</span><span class="br0">&#41;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; beforeEach<span class="br0">&#40;</span>inject<span class="br0">&#40;</span><span class="kw1">function</span> <span class="br0">&#40;</span>$rootScope<span class="sy0">,</span> $controller<span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; $scope <span class="sy0">=</span> $rootScope.$new<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; $controller<span class="br0">&#40;</span><span class="st0">'ModuleDIController'</span><span class="sy0">,</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; $scope<span class="sy0">:</span> $scope<span class="sy0">,</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ListOfItemsService<span class="sy0">:</span> mockService
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span><span class="br0">&#41;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; <span class="co1">// ... tests here ...</span>
&nbsp; &nbsp; <span class="br0">&#125;</span><span class="br0">&#41;</span><span class="sy0">;</span>
<span class="br0">&#125;</span><span class="br0">&#41;</span><span class="sy0">;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">//  borrowed heavily from http://www.benlesh.com/2013/05/angularjs-unit-testing-controllers.html
describe("Angular", function () {
    describe("Testing the ModuleDIController", function () {
        var $scope = null;

        var expectedServiceResponse = [{ name: "A", number: 123 }];
        var mockService = {
            getList: function () { return expectedServiceResponse; }
        };

        beforeEach(module('sampleApp'));
        beforeEach(inject(function ($rootScope, $controller) {
            $scope = $rootScope.$new();
            $controller('ModuleDIController', {
                $scope: $scope,
                ListOfItemsService: mockService
            });
        }));

        // ... tests here ...
    });
});</pre></div></div>

<p>If you&#8217;re going to work with AngularJS, read everything on <a href="http://www.benlesh.com/" title="Benjamin Lesh: Try, Catch, Fail">Ben Lesh&#8217;s</a> (<a href="https://twitter.com/BenLesh" title="@BenLesh on twitter">@BenLesh</a>) site. It helped me tremendously for both this post and the custom validation section of the validation post. </p>
<p>The spec file starts off by defining both a mock service and the expected response it is going to return. Before each test I load a fresh  sampleApp module, ensuring a clean starting point. Then I use <a href="http://docs.angularjs.org/api/angular.mock.inject" title="AngularJS: angular.mock.inject">inject</a> to create an $injector that will be used for resolving references in my tests, which resolves the ModuleDIController by passing in the provided scope and my mock service.<br />
That last part works, but honestly I only sort of understand what it&#8217;s doing. Even after several more readings of the pages on the injector and the mock.inject call, I&#8217;m still not 100% sure I grasp more than the basic operation.</p>
<p>The tests themselves are pretty straightforward at that point:</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="javascript"><thead><tr><td colspan="2"  class="head">Javascript</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
</pre></td><td class="de1"><pre class="de1">it<span class="br0">&#40;</span><span class="st0">'should start with an empty list of items'</span><span class="sy0">,</span> <span class="kw1">function</span> <span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; expect<span class="br0">&#40;</span>$scope.<span class="me1">listOfItems</span><span class="br0">&#41;</span>.<span class="me1">toEqual</span><span class="br0">&#40;</span><span class="br0">&#91;</span><span class="br0">&#93;</span><span class="br0">&#41;</span><span class="sy0">;</span>
<span class="br0">&#125;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
it<span class="br0">&#40;</span><span class="st0">'should populate list from service when fillItems() is called'</span><span class="sy0">,</span> <span class="kw1">function</span> <span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; $scope.<span class="me1">fillItems</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; expect<span class="br0">&#40;</span>$scope.<span class="me1">listOfItems</span><span class="br0">&#41;</span>.<span class="me1">toEqual</span><span class="br0">&#40;</span>expectedServiceResponse<span class="br0">&#41;</span><span class="sy0">;</span>
<span class="br0">&#125;</span><span class="br0">&#41;</span><span class="sy0">;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">it('should start with an empty list of items', function () {
    expect($scope.listOfItems).toEqual([]);
});

it('should populate list from service when fillItems() is called', function () {
    $scope.fillItems();
    expect($scope.listOfItems).toEqual(expectedServiceResponse);
});</pre></div></div>

<p>And there we have it, verification that our controller uses the service properly to fill it&#8217;s local collection.</p>
<p>This may not be that complicated a test, but once we have the basic components together, extending it to more complex cases is pretty straightforward.</p>
<h2>Unit Testing Knockout/RequireJS</h2>
<p>Unit testing modules defined with RequireJS is challenging. There are a couple libraries out there that people have built to inject mocks and the documentation is sparse for all the examples I found. I chose SquireJS due to having slightly more documentation than the others, but it still took a few iterations to get it working (then I lost those changes and had to redo them after not looking at the code for a couple weeks).</p>
<h3>Knockout/RequireJS Modules Under Test</h3>
<p>In the <a href="/index.php/WebDev/UIDevelopment/angularjs-vs-knockout-modules-and-di-6">previous post</a>, we had sampleApp/ModuleDIModel and sampleServices/ListOfItemsService modules being loaded by RequireJS. Like the AngularJS example, the only change I have made is to move a copy of these files into a folder specific for this post (js/UnitTesting).</p>
<p>Relevant sections of <a href="https://github.com/tarwn/AngularJS-vs-Knockout/blob/master/SpecRunner.html" title="View full example file on github">SpecRunner.html</a></p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="html4strict"><thead><tr><td colspan="2"  class="head">HTML</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
</pre></td><td class="de1"><pre class="de1"><span class="sc2">&lt;<span class="kw2">html</span>&gt;</span>
<span class="sc2">&lt;<span class="kw2">head</span>&gt;</span>
&nbsp; &nbsp; <span class="sc-1">&lt;!-- ... --&gt;</span>
&nbsp;
&nbsp; &nbsp; <span class="sc-1">&lt;!-- Knockout + RequireJS files --&gt;</span>
&nbsp; &nbsp; <span class="sc2">&lt;<span class="kw2">script</span> <span class="kw3">src</span><span class="sy0">=</span><span class="st0">&quot;Knockout/js/lib/knockout-2.3.0.min.js&quot;</span>&gt;&lt;<span class="sy0">/</span><span class="kw2">script</span>&gt;</span>
&nbsp; &nbsp; <span class="sc2">&lt;<span class="kw2">script</span> <span class="kw3">src</span><span class="sy0">=</span><span class="st0">&quot;Knockout/js/lib/require-2.1.8.min.js&quot;</span>&gt;&lt;<span class="sy0">/</span><span class="kw2">script</span>&gt;</span>
&nbsp; &nbsp; <span class="sc-1">&lt;!-- Knockout specs --&gt;</span> &nbsp; &nbsp;
&nbsp; &nbsp; <span class="sc2">&lt;<span class="kw2">script</span> <span class="kw3">src</span><span class="sy0">=</span><span class="st0">&quot;Knockout/UnitTestingSpecs.js&quot;</span>&gt;&lt;<span class="sy0">/</span><span class="kw2">script</span>&gt;</span>
&nbsp;
&nbsp; &nbsp; <span class="sc-1">&lt;!-- ... --&gt;</span>
&nbsp; <span class="sc2">&lt;<span class="sy0">/</span><span class="kw2">script</span>&gt;</span>
<span class="sc2">&lt;<span class="sy0">/</span><span class="kw2">head</span>&gt;</span>
<span class="sc2">&lt;<span class="kw2">body</span>&gt;</span>
<span class="sc2">&lt;<span class="sy0">/</span><span class="kw2">body</span>&gt;</span>
<span class="sc2">&lt;<span class="sy0">/</span><span class="kw2">html</span>&gt;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">&lt;html&gt;
&lt;head&gt;
    &lt;!-- ... --&gt;

    &lt;!-- Knockout + RequireJS files --&gt;
    &lt;script src="Knockout/js/lib/knockout-2.3.0.min.js"&gt;&lt;/script&gt;
    &lt;script src="Knockout/js/lib/require-2.1.8.min.js"&gt;&lt;/script&gt;
    &lt;!-- Knockout specs --&gt;    
    &lt;script src="Knockout/UnitTestingSpecs.js"&gt;&lt;/script&gt;

    &lt;!-- ... --&gt;
  &lt;/script&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;/body&gt;
&lt;/html&gt;</pre></div></div>

<p>Like the AngularJS example, the specs file is responsible for supplying the mocks and defining the tests:</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="javascript"><thead><tr><td colspan="2"  class="head">Javascript</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
</pre></td><td class="de1"><pre class="de1">require.<span class="me1">config</span><span class="br0">&#40;</span><span class="br0">&#123;</span>
&nbsp; &nbsp; baseUrl<span class="sy0">:</span> <span class="st0">&quot;Knockout/js/UnitTesting&quot;</span><span class="sy0">,</span>
&nbsp; &nbsp; paths<span class="sy0">:</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="st0">&quot;Squire&quot;</span><span class="sy0">:</span> <span class="st0">&quot;../../js/lib/Squire&quot;</span>
&nbsp; &nbsp; <span class="br0">&#125;</span>
<span class="br0">&#125;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
describe<span class="br0">&#40;</span><span class="st0">&quot;Knockout&quot;</span><span class="sy0">,</span> <span class="kw1">function</span> <span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; 
&nbsp; &nbsp; describe<span class="br0">&#40;</span><span class="st0">&quot;Testing the ModuleDIModel&quot;</span><span class="sy0">,</span> <span class="kw1">function</span> <span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">var</span> async <span class="sy0">=</span> <span class="kw1">new</span> AsyncSpec<span class="br0">&#40;</span><span class="kw1">this</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">var</span> viewmodel <span class="sy0">=</span> <span class="kw2">null</span><span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">var</span> expectedServiceResponse <span class="sy0">=</span> <span class="br0">&#91;</span><span class="br0">&#123;</span> name<span class="sy0">:</span> <span class="st0">&quot;A&quot;</span><span class="sy0">,</span> number<span class="sy0">:</span> <span class="nu0">123</span> <span class="br0">&#125;</span><span class="br0">&#93;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">var</span> mockService <span class="sy0">=</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; getList<span class="sy0">:</span> <span class="kw1">function</span> <span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span> <span class="kw1">return</span> expectedServiceResponse<span class="sy0">;</span> <span class="br0">&#125;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span><span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; async.<span class="me1">beforeEach</span><span class="br0">&#40;</span><span class="kw1">function</span> <span class="br0">&#40;</span>done<span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; require<span class="br0">&#40;</span><span class="br0">&#91;</span><span class="st0">'Squire'</span><span class="br0">&#93;</span><span class="sy0">,</span> <span class="kw1">function</span> <span class="br0">&#40;</span>Squire<span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">var</span> squire <span class="sy0">=</span> <span class="kw1">new</span> Squire<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; squire.<span class="me1">mock</span><span class="br0">&#40;</span><span class="st0">&quot;sampleServices/ListOfItemsService&quot;</span><span class="sy0">,</span> mockService<span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; .<span class="me1">require</span><span class="br0">&#40;</span><span class="br0">&#91;</span><span class="st0">&quot;sampleApp/ModuleDIModel&quot;</span><span class="br0">&#93;</span><span class="sy0">,</span> <span class="kw1">function</span> <span class="br0">&#40;</span>ModuleDIModel<span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; viewmodel <span class="sy0">=</span> <span class="kw1">new</span> ModuleDIModel<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; done<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; <span class="co1">// ... tests here</span>
&nbsp; &nbsp; <span class="br0">&#125;</span><span class="br0">&#41;</span><span class="sy0">;</span>
<span class="br0">&#125;</span><span class="br0">&#41;</span><span class="sy0">;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">require.config({
    baseUrl: "Knockout/js/UnitTesting",
    paths: {
        "Squire": "../../js/lib/Squire"
    }
});

describe("Knockout", function () {
    
    describe("Testing the ModuleDIModel", function () {
        var async = new AsyncSpec(this);
        var viewmodel = null;

        var expectedServiceResponse = [{ name: "A", number: 123 }];
        var mockService = {
            getList: function () { return expectedServiceResponse; }
        };

        async.beforeEach(function (done) {
            require(['Squire'], function (Squire) {
                var squire = new Squire();
                squire.mock("sampleServices/ListOfItemsService", mockService)
                      .require(["sampleApp/ModuleDIModel"], function (ModuleDIModel) {
                          viewmodel = new ModuleDIModel();
                          done();
                      });
            });
        });

        // ... tests here
    });
});</pre></div></div>

<p>I start out by configuring the base URL for the file that will be under test and the path for Squire. Like the AngularJS example, the first real step is defining the mock service and it&#8217;s expected response. Before each test, I then use Squire to mock the ListOfItemsService and load a fresh copy of the Model I am putting under test to ensure each test starts with a clean slate.</p>
<p>Like before, the tests themselves are pretty straightforward at that point:</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="javascript"><thead><tr><td colspan="2"  class="head">Javascript</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
</pre></td><td class="de1"><pre class="de1">it<span class="br0">&#40;</span><span class="st0">&quot;should start with an empty list of items&quot;</span><span class="sy0">,</span> <span class="kw1">function</span> <span class="br0">&#40;</span>done<span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; expect<span class="br0">&#40;</span>viewmodel.<span class="me1">listOfItems</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#41;</span>.<span class="me1">toEqual</span><span class="br0">&#40;</span><span class="br0">&#91;</span><span class="br0">&#93;</span><span class="br0">&#41;</span><span class="sy0">;</span>
<span class="br0">&#125;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
it<span class="br0">&#40;</span><span class="st0">&quot;should populate list from service when fillItems() is called&quot;</span><span class="sy0">,</span> <span class="kw1">function</span> <span class="br0">&#40;</span>done<span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; viewmodel.<span class="me1">fillItems</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; expect<span class="br0">&#40;</span>viewmodel.<span class="me1">listOfItems</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#41;</span>.<span class="me1">toEqual</span><span class="br0">&#40;</span>expectedServiceResponse<span class="br0">&#41;</span><span class="sy0">;</span>
<span class="br0">&#125;</span><span class="br0">&#41;</span><span class="sy0">;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">it("should start with an empty list of items", function (done) {
    expect(viewmodel.listOfItems()).toEqual([]);
});

it("should populate list from service when fillItems() is called", function (done) {
    viewmodel.fillItems();
    expect(viewmodel.listOfItems()).toEqual(expectedServiceResponse);
});</pre></div></div>

<p>With the exception of having a viewmodel variable instead of a $scope variable and evaluating the listOfItems value with ()&#8217;s, the tests are almost identical to AngularJS&#8217;s.</p>
<p>As I mentioned at the beginning, the documentation was sparse, so for once the Knockout/RequireJS side of things took more twiddling and frustration to get working. Now that I do have the tests working, though, I think it&#8217;s given me enough of a grasp of the mechanism that I could handle more complex test cases just as easily as I felt I could with AngularJS.</p>
<h2>Some Differences</h2>
<p>There were a number of frustrations before I got this working.</p>
<h3>Injecting Dependencies</h3>
<p>Again, kudos to the AngularJS team for making testing such a major focus. Unfortunately, I&#8217;m still parsing and re-parsing the inject() documentation to try and understand how what I did above works. I think part of the problem is that it&#8217;s a little recursive, as the injector is being used and replaced all at once&#8230;or something. Basically I&#8217;m a monkey with a lighter at this point, I know how to make the fire come out but have no idea why or how it does so.</p>
<p>And then we get to RequireJS, which has no focus on unit testing and the couple libraries that have tied into it have very few blogs posts and little documentation behind them. Once I got this first example together, I am feeling much more confidant about doing it again. Unlike Angular&#8217;s inject method, I think I have a pretty good idea how Squire works, but it was still frustrating to get that first test worked out.</p>
<h3>Documentation</h3>
<p>Usually AngularJS is the one that leaves me confused and forcing myself to reread the documentation. In this case, there are a lot of great posts out there that allowed me to ignore the documentation until I got it working (at which point I went back and started rereading it). Did I mention <a href="http://www.benlesh.com/2013/06/angular-js-unit-testing-services.html" title="Ben Lesh - Try, Catch, Fail - 'Angular JS - Unit Testing - Services'">Ben&#8217;s posts</a>?</p>
<p>Mocking modules for RequireJS was much more sparse. To the point where I started recognizing their page titles in google as I was searching alternative terms to try and get more information. There are a very small number of posts on Squire, a few on testr.js, etc. I think the new secret phrase for people looking into this should be &#8220;hurp durp example&#8221;. If you have spent any time looking into this topic, you not only know what I&#8217;m talking about, you&#8217;ve also read it like 40 times in case you missed something.</p>
<h2>Final Thoughts</h2>
<p>The AngularJS side was faster to get up to speed on and required fewer external dependencies. The Knockout/RequireJS side required me to pull in Squire and Jasmine.async and was tougher to get running initially. But now that I have them both running, I&#8217;ve found I don&#8217;t have a strong opinion about either of them, neither looks like it will be that much harder to extend or build more tests with. </p>
<p>I am definitely looking forward to playing with <a href="http://karma-runner.github.io/0.10/index.html">Karma</a> in the near future. I am used to continuous test execution and coverage with <a href="/index.php/EnterpriseDev/UnitTest/reducing-code-build-test-friction" title="LessThanDot Blog - 
Reducing Code-Build-Test Friction with NCrunch">NCrunch</a> and going back to manually executing tests has been annoying.</p>
<div style="background-color: #DDDDDD; padding: 8px; width: 400px;">
<h3>Knockout vs AngularJS</h3>
<ul style="margin: 0px; padding: 4px;">
<li><a href="/index.php/WebDev/UIDevelopment/angularjs-vs-knockout-introduction-1">Introductory Post</a></li>
<li><a href="/index.php/WebDev/UIDevelopment/angularjs-vs-knockout-data-binding-2">Data Binding</a></li>
<li><a href="/index.php/WebDev/UIDevelopment/angularjs-vs-knockout-validation-3">Validation</a></li>
<li><a href="/index.php/WebDev/UIDevelopment/angularjs-vs-knockout-serialization-4">Serialization</a></li>
<li><a href="/index.php/WebDev/UIDevelopment/angularjs-vs-knockout-templating-5">Templating</a></li>
<li><a href="/index.php/WebDev/UIDevelopment/angularjs-vs-knockout-modules-and-di-6">Modules + Dependency Injection</a></li>
<li><b>Automated Testing</b></li>
<li><a href="/index.php/WebDev/UIDevelopment/AJAX/angularjs-vs-knockout-spa-routing-history-8">SPA Routing/History</a></li>
<li><a href="/index.php/WebDev/UIDevelopment/angularjs-vs-knockout-final-thoughts-9">Final, Final Thoughts</a></li>
</ul>
</div>
]]></content:encoded>
			<wfw:commentRss>/index.php/webdev/uidevelopment/angularjs-vs-knockout-automated-testing-7/feed/</wfw:commentRss>
		<slash:comments>0</slash:comments>
		</item>
		<item>
		<title>AngularJS vs Knockout &#8211; Modules and DI (6 of 8)</title>
		<link>/index.php/webdev/uidevelopment/angularjs-vs-knockout-modules-and-di-6/</link>
		<comments>/index.php/webdev/uidevelopment/angularjs-vs-knockout-modules-and-di-6/#respond</comments>
		<pubDate>Mon, 14 Oct 2013 14:06:00 +0000</pubDate>
		<dc:creator><![CDATA[Eli Weinstock-Herman (tarwn)]]></dc:creator>
				<category><![CDATA[Javascript]]></category>
		<category><![CDATA[UI Development]]></category>
		<category><![CDATA[angularjs]]></category>
		<category><![CDATA[dependency injection]]></category>
		<category><![CDATA[knockout]]></category>
		<category><![CDATA[requirejs]]></category>

		<guid isPermaLink="false">/index.php/2013/10/angularjs-vs-knockout-modules-and-di-6/</guid>
		<description><![CDATA[I'm reviewing Angular and Knockout to determine which would fit better for a variety of upcoming projects. The larger or more complex a project, the more important it is to be able to modularize the code. Modules provide organization, ensure script load&#8230;]]></description>
				<content:encoded><![CDATA[<p>I&#8217;m reviewing Angular and Knockout to determine which would fit better for a variety of upcoming projects. The larger or more complex a project, the more important it is to be able to modularize the code. Modules provide organization, ensure script loading order is correct, and enable dependency injection for cleaner unit testing. AngularJS brings a built-in ability to define modules and inject dependencies. With Knockout, we&#8217;ll look at using <a href="http://requirejs.org/">RequireJS</a>, and AMD packages.</p>
<div style="background-color: #eeeeee; padding: 1em;">
This is the sixth of eight posts looking at the capabilities of knockout and Angular. In the <a href="/index.php/WebDev/UIDevelopment/angularjs-vs-knockout-introduction-1" title="AngularJS vs Knockout - Introduction">introduction post</a>, I outlined the capabilities that I am evaluating for. In the <a href="/index.php/WebDev/UIDevelopment/angularjs-vs-knockout-templating-5" title="AngularJS vs Knockout - Templating">fifth post</a>, I looked at templating. This post explores defining modules and dependency injection.
</div>
<p>All of the examples presented throughout the series are available in the <a href="https://github.com/tarwn/AngularJS-vs-Knockout/" title="View all of the post examples on github">tarwn/AngularJS-vs-Knockout</a> repository on github.</p>
<h2>Modules in AngularJS</h2>
<p>The ability to define <a href="http://docs.angularjs.org/guide/module" title="AngularJS: Modules">modules</a> is built into AngularJS, but it doesn&#8217;t include an asynchronous loading option, so when we get to that point we&#8217;ll be including the external library <a href="https://github.com/ded/script.js">script.js</a>.</p>
<h3>AngularJS Simple Dependency Injection Example</h3>
<p>Full source available at <a href="https://github.com/tarwn/AngularJS-vs-Knockout/blob/master/Angular/SimpleDI.html" title="View full example file on github">Angular/SimpleDI.html</a>.</p>
<p>Angular modules are collections of functionality with a shared configuration block. Controllers, services, and even values can be attached to the module and will be loaded with the module. Modules can have dependencies on one another, which affects their loading order. Controllers and Providers (services, factories, etc) list their dependencies when they are defined, and those dependencies are filled by Angulars injector.</p>
<p>Here is an example based on the earlier sample for data binding, except our controller has a dependency on the &#8220;sampleServices/ListOfItemsService&#8221; service and when we push the button it will call this service to obtain the list of items to be displayed.</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="html4strict"><thead><tr><td colspan="2"  class="head">HTML</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
</pre></td><td class="de1"><pre class="de1"><span class="sc2">&lt;<span class="kw2">html</span> ng-app<span class="sy0">=</span><span class="st0">&quot;sampleApp&quot;</span>&gt;</span>
<span class="sc2">&lt;<span class="kw2">head</span>&gt;</span>
&nbsp; &nbsp; <span class="sc-1">&lt;!-- ... --&gt;</span>
&nbsp; &nbsp; <span class="sc2">&lt;<span class="kw2">script</span> <span class="kw3">type</span><span class="sy0">=</span><span class="st0">&quot;text/javascript&quot;</span> <span class="kw3">src</span><span class="sy0">=</span><span class="st0">&quot;js/lib/angular-1.0.8.min.js&quot;</span>&gt;&lt;<span class="sy0">/</span><span class="kw2">script</span>&gt;</span>
<span class="sc2">&lt;<span class="sy0">/</span><span class="kw2">head</span>&gt;</span>
<span class="sc2">&lt;<span class="kw2">body</span>&gt;</span>
<span class="sc2">&lt;<span class="kw2">div</span> ng-controller<span class="sy0">=</span><span class="st0">&quot;ModuleDIController&quot;</span>&gt;</span>
&nbsp; &nbsp; 
&nbsp; &nbsp; Text Value: {{ textValue }}<span class="sc2">&lt;<span class="kw2">br</span> <span class="sy0">/</span>&gt;</span>
&nbsp; &nbsp; List Of Items: <span class="sc2">&lt;<span class="kw2">ul</span> ng-repeat<span class="sy0">=</span><span class="st0">&quot;item in listOfItems&quot;</span>&gt;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="sc2">&lt;<span class="kw2">li</span>&gt;</span>{{ item.number }} - {{ item.name }}<span class="sc2">&lt;<span class="sy0">/</span><span class="kw2">li</span>&gt;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span class="sc2">&lt;<span class="sy0">/</span><span class="kw2">ul</span>&gt;&lt;<span class="kw2">br</span> <span class="sy0">/</span>&gt;</span>
&nbsp;
&nbsp; &nbsp; <span class="sc2">&lt;<span class="kw2">input</span> <span class="kw3">type</span><span class="sy0">=</span><span class="st0">&quot;button&quot;</span> ng-click<span class="sy0">=</span><span class="st0">&quot;fillItems()&quot;</span> <span class="kw3">value</span><span class="sy0">=</span><span class="st0">&quot;Call Service&quot;</span><span class="sy0">/</span>&gt;</span>
<span class="sc2">&lt;<span class="sy0">/</span><span class="kw2">div</span>&gt;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">&lt;html ng-app="sampleApp"&gt;
&lt;head&gt;
    &lt;!-- ... --&gt;
    &lt;script type="text/javascript" src="js/lib/angular-1.0.8.min.js"&gt;&lt;/script&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;div ng-controller="ModuleDIController"&gt;
	
    Text Value: {{ textValue }}&lt;br /&gt;
    List Of Items: &lt;ul ng-repeat="item in listOfItems"&gt;
                        &lt;li&gt;{{ item.number }} - {{ item.name }}&lt;/li&gt;
                   &lt;/ul&gt;&lt;br /&gt;

    &lt;input type="button" ng-click="fillItems()" value="Call Service"/&gt;
&lt;/div&gt;</pre></div></div>

<p>And the module, controller, and service:</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="javascript"><thead><tr><td colspan="2"  class="head">Javascript</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
</pre></td><td class="de1"><pre class="de1"><span class="kw1">var</span> sampleServices <span class="sy0">=</span> angular.<span class="me1">module</span><span class="br0">&#40;</span><span class="st0">'sampleServices'</span><span class="sy0">,</span> <span class="br0">&#91;</span><span class="br0">&#93;</span><span class="br0">&#41;</span><span class="sy0">;</span>
sampleServices.<span class="me1">service</span><span class="br0">&#40;</span><span class="st0">'ListOfItemsService'</span><span class="sy0">,</span> <span class="kw1">function</span> <span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; <span class="kw1">this</span>.<span class="me1">getList</span> <span class="sy0">=</span> <span class="kw1">function</span> <span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="co1">// pretend call</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">return</span> <span class="br0">&#91;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#123;</span> name<span class="sy0">:</span> <span class="st0">&quot;first value&quot;</span><span class="sy0">,</span> number<span class="sy0">:</span> <span class="nu0">123</span> <span class="br0">&#125;</span><span class="sy0">,</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#123;</span> name<span class="sy0">:</span> <span class="st0">&quot;second value&quot;</span><span class="sy0">,</span> number<span class="sy0">:</span> <span class="nu0">456</span> <span class="br0">&#125;</span><span class="sy0">,</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#123;</span> name<span class="sy0">:</span> <span class="st0">&quot;third value&quot;</span><span class="sy0">,</span> number<span class="sy0">:</span> <span class="nu0">789</span> <span class="br0">&#125;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#93;</span><span class="sy0">;</span>
&nbsp; &nbsp; <span class="br0">&#125;</span><span class="sy0">;</span>
<span class="br0">&#125;</span><span class="br0">&#41;</span>
&nbsp;
<span class="co1">// and a module that has a controller that depends on the ListOfItemsService</span>
<span class="kw1">var</span> sampleApp <span class="sy0">=</span> angular.<span class="me1">module</span><span class="br0">&#40;</span><span class="st0">'sampleApp'</span><span class="sy0">,</span> <span class="br0">&#91;</span><span class="st0">'sampleServices'</span><span class="br0">&#93;</span><span class="br0">&#41;</span><span class="sy0">;</span>
sampleApp.<span class="me1">controller</span><span class="br0">&#40;</span><span class="st0">'ModuleDIController'</span><span class="sy0">,</span>
&nbsp; &nbsp; <span class="br0">&#91;</span><span class="st0">'$scope'</span><span class="sy0">,</span> <span class="st0">'ListOfItemsService'</span><span class="sy0">,</span>
&nbsp; &nbsp; <span class="kw1">function</span> <span class="br0">&#40;</span>$scope<span class="sy0">,</span> listOfItemsService<span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; $scope.<span class="me1">textValue</span> <span class="sy0">=</span> <span class="st0">&quot;some text&quot;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; $scope.<span class="me1">listOfItems</span> <span class="sy0">=</span> <span class="br0">&#91;</span><span class="br0">&#93;</span><span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; $scope.<span class="me1">fillItems</span> <span class="sy0">=</span> <span class="kw1">function</span> <span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; $scope.<span class="me1">listOfItems</span> <span class="sy0">=</span> listOfItemsService.<span class="me1">getList</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span><span class="sy0">;</span>
&nbsp; &nbsp; <span class="br0">&#125;</span><span class="br0">&#93;</span>
<span class="br0">&#41;</span><span class="sy0">;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">var sampleServices = angular.module('sampleServices', []);
sampleServices.service('ListOfItemsService', function () {
    this.getList = function () {
        // pretend call
        return [
			{ name: "first value", number: 123 },
			{ name: "second value", number: 456 },
			{ name: "third value", number: 789 }
        ];
    };
})

// and a module that has a controller that depends on the ListOfItemsService
var sampleApp = angular.module('sampleApp', ['sampleServices']);
sampleApp.controller('ModuleDIController',
    ['$scope', 'ListOfItemsService',
    function ($scope, listOfItemsService) {
        $scope.textValue = "some text";
        $scope.listOfItems = [];

        $scope.fillItems = function () {
            $scope.listOfItems = listOfItemsService.getList();
        };
    }]
);</pre></div></div>

<p>As part of the example I&#8217;ve listed both the dependencies ($scope and ListOfItemsService) and then defined the controller function to take these two properties. Angular has the ability to infer dependencies based on the name of the parameters or list them explicitly like this. The explicit method is safe for a wider range of minification programs, so I decided to try it out.</p>
<p>One advantage to working with modules like this is that we can define things like these services independently from the logic that is going to use them, then let the library (AngularJS in this case) figure out how to wire the pieces back together again. This takes a lot of complexity and extra work out of our hands, because we no longer have to deal with juggling a long list of includes or functions into the right order. It also keeps the root namespace clear and makes it simpler to see what external dependencies a chunk of code is using. We can also swap out the provider, replacing it with one that has different functionality, caching, or stubs it out for testing purposes.</p>
<h3>AngularJS Errors in Modules</h3>
<p>Full source available at <a href="https://github.com/tarwn/AngularJS-vs-Knockout/blob/master/Angular/ModuleError.html" title="View full example file on github">Angular/ModuleError.html</a>.</p>
<p>The next thing I&#8217;m concerned with is how errors will look once the framework has wired together my dependencies. Instead of returning a list of items, I&#8217;m going to modify the service to throw an explicit error and see what the result looks like.</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="javascript"><thead><tr><td colspan="2"  class="head">Javascript</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
</pre></td><td class="de1"><pre class="de1"><span class="kw1">var</span> sampleServices <span class="sy0">=</span> angular.<span class="me1">module</span><span class="br0">&#40;</span><span class="st0">'sampleServices'</span><span class="sy0">,</span> <span class="br0">&#91;</span><span class="br0">&#93;</span><span class="br0">&#41;</span><span class="sy0">;</span>
sampleServices.<span class="me1">service</span><span class="br0">&#40;</span><span class="st0">'ListOfItemsService'</span><span class="sy0">,</span> <span class="kw1">function</span> <span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; <span class="kw1">this</span>.<span class="me1">getList</span> <span class="sy0">=</span> <span class="kw1">function</span> <span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">throw</span> <span class="kw1">new</span> Error<span class="br0">&#40;</span><span class="st0">&quot;Error occurred, do we know where?&quot;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; <span class="br0">&#125;</span><span class="sy0">;</span>
<span class="br0">&#125;</span><span class="br0">&#41;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">var sampleServices = angular.module('sampleServices', []);
sampleServices.service('ListOfItemsService', function () {
    this.getList = function () {
        throw new Error("Error occurred, do we know where?");
    };
})</pre></div></div>

<p>In Chrome I get a clean stack trace with clickable references to the files and correct line numbers, Firefox gets the same information but it&#8217;s jumbled with extra characters (possibly intended specifically for chrome output?) and the whole error is a single link that simply expands to show some properties that aren&#8217;t very useful. This is less than great for an unexpected error during development, but it also means business as usual for expected production errors, as they&#8217;ll be able to use some standard error handling code instead of something new.</p>
<h3>AngularJS Module Loading</h3>
<p>Full source available at <a href="https://github.com/tarwn/AngularJS-vs-Knockout/blob/master/Angular/AsyncDI.html" title="View full example file on github">Angular/AsyncDI.html</a>.</p>
<p>By default, Angular does not include a method for loading scripts. The documentation for <a href="http://docs.angularjs.org/guide/module">module</a> indicates that there are external libraries that solve this, but don&#8217;t indicate what they are. Searching for something I could use as an example, I ran into a post (and didn&#8217;t copy down the URL, sorry) that uses require.js and a mention by someone that they had used <a href="https://github.com/ded/script.js">script.js</a>. I also ran into a post (<a href="http://briantford.com/blog/huuuuuge-angular-apps.html">Building Huuuuuge Apps with AngularJS</a>) by one of the core Angular team members, Brian Ford, that recommends against using RequireJS with Angular, so I suppose script.js it is.</p>
<p>Using script.js, I remove the ng-app attribute and instead bootstrap the document to use the sampleApp module once the two files are loaded.</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="html4strict"><thead><tr><td colspan="2"  class="head">HTML</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
</pre></td><td class="de1"><pre class="de1"><span class="sc2">&lt;<span class="kw2">html</span>&gt;</span>
<span class="sc2">&lt;<span class="kw2">head</span>&gt;</span>
&nbsp; &nbsp; <span class="sc-1">&lt;!-- ... --&gt;</span>
&nbsp; &nbsp; <span class="sc2">&lt;<span class="kw2">script</span> <span class="kw3">type</span><span class="sy0">=</span><span class="st0">&quot;text/javascript&quot;</span> <span class="kw3">src</span><span class="sy0">=</span><span class="st0">&quot;js/lib/angular-1.0.8.min.js&quot;</span>&gt;&lt;<span class="sy0">/</span><span class="kw2">script</span>&gt;</span>
&nbsp; &nbsp; <span class="sc2">&lt;<span class="kw2">script</span> <span class="kw3">type</span><span class="sy0">=</span><span class="st0">&quot;text/javascript&quot;</span> <span class="kw3">src</span><span class="sy0">=</span><span class="st0">&quot;js/lib/script.js&quot;</span>&gt;&lt;<span class="sy0">/</span><span class="kw2">script</span>&gt;</span>
<span class="sc2">&lt;<span class="sy0">/</span><span class="kw2">head</span>&gt;</span>
<span class="sc2">&lt;<span class="kw2">body</span>&gt;</span>
<span class="sc2">&lt;<span class="kw2">div</span> ng-controller<span class="sy0">=</span><span class="st0">&quot;ModuleDIController&quot;</span>&gt;</span>
&nbsp; &nbsp; 
&nbsp; &nbsp; Text Value: {{ textValue }}<span class="sc2">&lt;<span class="kw2">br</span> <span class="sy0">/</span>&gt;</span>
&nbsp; &nbsp; List Of Items: <span class="sc2">&lt;<span class="kw2">ul</span> ng-repeat<span class="sy0">=</span><span class="st0">&quot;item in listOfItems&quot;</span>&gt;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="sc2">&lt;<span class="kw2">li</span>&gt;</span>{{ item.number }} - {{ item.name }}<span class="sc2">&lt;<span class="sy0">/</span><span class="kw2">li</span>&gt;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span class="sc2">&lt;<span class="sy0">/</span><span class="kw2">ul</span>&gt;&lt;<span class="kw2">br</span> <span class="sy0">/</span>&gt;</span>
&nbsp;
&nbsp; &nbsp; <span class="sc2">&lt;<span class="kw2">input</span> <span class="kw3">type</span><span class="sy0">=</span><span class="st0">&quot;button&quot;</span> ng-click<span class="sy0">=</span><span class="st0">&quot;fillItems()&quot;</span> <span class="kw3">value</span><span class="sy0">=</span><span class="st0">&quot;Call Service&quot;</span> <span class="sy0">/</span>&gt;</span>
<span class="sc2">&lt;<span class="sy0">/</span><span class="kw2">div</span>&gt;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">&lt;html&gt;
&lt;head&gt;
    &lt;!-- ... --&gt;
    &lt;script type="text/javascript" src="js/lib/angular-1.0.8.min.js"&gt;&lt;/script&gt;
    &lt;script type="text/javascript" src="js/lib/script.js"&gt;&lt;/script&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;div ng-controller="ModuleDIController"&gt;
	
    Text Value: {{ textValue }}&lt;br /&gt;
    List Of Items: &lt;ul ng-repeat="item in listOfItems"&gt;
                        &lt;li&gt;{{ item.number }} - {{ item.name }}&lt;/li&gt;
                   &lt;/ul&gt;&lt;br /&gt;

    &lt;input type="button" ng-click="fillItems()" value="Call Service" /&gt;
&lt;/div&gt;</pre></div></div>

<p>And the javascript section of the page is reduced to defining the path that the scripts should be loaded from, and the bootstrap code that replaces the ngApp directive.</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="javascript"><thead><tr><td colspan="2"  class="head">Javascript</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
</pre></td><td class="de1"><pre class="de1">$script.<span class="me1">path</span><span class="br0">&#40;</span><span class="st0">'js/AsyncDI/'</span><span class="br0">&#41;</span><span class="sy0">;</span>
$script<span class="br0">&#40;</span><span class="br0">&#91;</span><span class="st0">'sampleApp'</span><span class="sy0">,</span> <span class="st0">'sampleServices'</span><span class="br0">&#93;</span><span class="sy0">,</span> <span class="kw1">function</span> <span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; angular.<span class="me1">bootstrap</span><span class="br0">&#40;</span>document<span class="sy0">,</span> <span class="br0">&#91;</span><span class="st0">'sampleApp'</span><span class="br0">&#93;</span><span class="br0">&#41;</span><span class="sy0">;</span>
<span class="br0">&#125;</span><span class="br0">&#41;</span><span class="sy0">;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">$script.path('js/AsyncDI/');
$script(['sampleApp', 'sampleServices'], function () {
    angular.bootstrap(document, ['sampleApp']);
});</pre></div></div>

<p>The downside of this method is that it requires me to list all of the files I want to load, which is easy when you have a couple files, but is going to be nasty when I start getting past about 10-20 files (and I imagine it will be real nasty if I have hundreds of files).</p>
<h2>Modules in Knockout</h2>
<p>Once again we&#8217;re looking at a feature that is outside the scope of Knockout, so it&#8217;s time to turn to a 3rd party library. The most popular choice here seems to be <a href="http://requirejs.org/">RequireJS</a>.</p>
<h3>Knockout/RequireJS Simple Dependency Injection Example</h3>
<p>Full source available at <a href="https://github.com/tarwn/AngularJS-vs-Knockout/blob/master/Knockout/SimpleDI.html" title="View full example file on github">Knockout/SimpleDI.html</a>.</p>
<p>Using the simple databinding example as a base, here is an example of using RequireJS modules to define a module and a service in seperate modules, then using require to ensure the module with the viewmodel is loaded prior to instantiating and binding it:</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="html4strict"><thead><tr><td colspan="2"  class="head">HTML</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
</pre></td><td class="de1"><pre class="de1"><span class="sc2">&lt;<span class="kw2">html</span>&gt;</span>
<span class="sc2">&lt;<span class="kw2">head</span>&gt;</span>
&nbsp; &nbsp; <span class="sc-1">&lt;!-- ... --&gt;</span>
&nbsp; &nbsp; <span class="sc2">&lt;<span class="kw2">script</span> <span class="kw3">type</span><span class="sy0">=</span><span class="st0">&quot;text/javascript&quot;</span> <span class="kw3">src</span><span class="sy0">=</span><span class="st0">&quot;js/lib/knockout-2.3.0.min.js&quot;</span>&gt;&lt;<span class="sy0">/</span><span class="kw2">script</span>&gt;</span>
&nbsp; &nbsp; <span class="sc2">&lt;<span class="kw2">script</span> <span class="kw3">type</span><span class="sy0">=</span><span class="st0">&quot;text/javascript&quot;</span> <span class="kw3">src</span><span class="sy0">=</span><span class="st0">&quot;js/lib/require-2.1.8.min.js&quot;</span>&gt;&lt;<span class="sy0">/</span><span class="kw2">script</span>&gt;</span>
<span class="sc2">&lt;<span class="sy0">/</span><span class="kw2">head</span>&gt;</span>
<span class="sc2">&lt;<span class="kw2">body</span>&gt;</span>
<span class="sc2">&lt;<span class="kw2">div</span>&gt;</span>
&nbsp; &nbsp; Text Value: <span class="sc2">&lt;<span class="kw2">span</span> data-bind<span class="sy0">=</span><span class="st0">&quot;text: textValue&quot;</span>&gt;&lt;<span class="sy0">/</span><span class="kw2">span</span>&gt;&lt;<span class="kw2">br</span> <span class="sy0">/</span>&gt;</span>
&nbsp; &nbsp; List Of Items: <span class="sc2">&lt;<span class="kw2">ul</span> data-bind<span class="sy0">=</span><span class="st0">&quot;foreach: listOfItems&quot;</span>&gt;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="sc2">&lt;<span class="kw2">li</span> data-bind<span class="sy0">=</span><span class="st0">&quot;text: number + ' - ' + name&quot;</span>&gt;&lt;<span class="sy0">/</span><span class="kw2">li</span>&gt;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span class="sc2">&lt;<span class="sy0">/</span><span class="kw2">ul</span>&gt;&lt;<span class="kw2">br</span> <span class="sy0">/</span>&gt;</span>
&nbsp; &nbsp; <span class="sc2">&lt;<span class="kw2">input</span> <span class="kw3">type</span><span class="sy0">=</span><span class="st0">&quot;button&quot;</span> data-bind<span class="sy0">=</span><span class="st0">&quot;click: fillItems&quot;</span> <span class="kw3">value</span><span class="sy0">=</span><span class="st0">&quot;Call Service&quot;</span><span class="sy0">/</span>&gt;</span>
<span class="sc2">&lt;<span class="sy0">/</span><span class="kw2">div</span>&gt;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">&lt;html&gt;
&lt;head&gt;
	&lt;!-- ... --&gt;
	&lt;script type="text/javascript" src="js/lib/knockout-2.3.0.min.js"&gt;&lt;/script&gt;
	&lt;script type="text/javascript" src="js/lib/require-2.1.8.min.js"&gt;&lt;/script&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;div&gt;
    Text Value: &lt;span data-bind="text: textValue"&gt;&lt;/span&gt;&lt;br /&gt;
    List Of Items: &lt;ul data-bind="foreach: listOfItems"&gt;
		                &lt;li data-bind="text: number + ' - ' + name"&gt;&lt;/li&gt;
                   &lt;/ul&gt;&lt;br /&gt;
    &lt;input type="button" data-bind="click: fillItems" value="Call Service"/&gt;
&lt;/div&gt;</pre></div></div>

<p>And the javascript driving the form:</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="javascript"><thead><tr><td colspan="2"  class="head">Javascript</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
</pre></td><td class="de1"><pre class="de1">define<span class="br0">&#40;</span><span class="st0">&quot;sampleServices/ListOfItemsService&quot;</span><span class="sy0">,</span> <span class="kw1">function</span> <span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; <span class="co1">// return an object literal for the service object</span>
&nbsp; &nbsp; <span class="kw1">return</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; getList<span class="sy0">:</span> <span class="kw1">function</span> <span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">return</span> <span class="br0">&#91;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#123;</span> name<span class="sy0">:</span> <span class="st0">&quot;first value&quot;</span><span class="sy0">,</span> number<span class="sy0">:</span> <span class="nu0">123</span> <span class="br0">&#125;</span><span class="sy0">,</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#123;</span> name<span class="sy0">:</span> <span class="st0">&quot;second value&quot;</span><span class="sy0">,</span> number<span class="sy0">:</span> <span class="nu0">456</span> <span class="br0">&#125;</span><span class="sy0">,</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#123;</span> name<span class="sy0">:</span> <span class="st0">&quot;third value&quot;</span><span class="sy0">,</span> number<span class="sy0">:</span> <span class="nu0">789</span> <span class="br0">&#125;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#93;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp; &nbsp; <span class="br0">&#125;</span>
<span class="br0">&#125;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
<span class="co1">// and a module that has a controller that depends on the ListOfItemsService</span>
define<span class="br0">&#40;</span><span class="st0">&quot;sampleApp/ModuleDIModel&quot;</span><span class="sy0">,</span>
&nbsp; &nbsp; <span class="br0">&#91;</span><span class="st0">&quot;sampleServices/ListOfItemsService&quot;</span><span class="br0">&#93;</span><span class="sy0">,</span>
&nbsp; &nbsp; <span class="kw1">function</span> <span class="br0">&#40;</span>listOfItemsService<span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="co1">// return a constructor for the model</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">return</span> <span class="kw1">function</span> <span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">this</span>.<span class="me1">textValue</span> <span class="sy0">=</span> ko.<span class="me1">observable</span><span class="br0">&#40;</span><span class="st0">&quot;some text&quot;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">this</span>.<span class="me1">listOfItems</span> <span class="sy0">=</span> ko.<span class="me1">observableArray</span><span class="br0">&#40;</span><span class="br0">&#91;</span><span class="br0">&#93;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">this</span>.<span class="me1">fillItems</span> <span class="sy0">=</span> <span class="kw1">function</span> <span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">this</span>.<span class="me1">listOfItems</span><span class="br0">&#40;</span>listOfItemsService.<span class="me1">getList</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp; &nbsp; <span class="br0">&#125;</span>
<span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
<span class="co1">// use require to define dependencies to start and bind viewmodel</span>
require<span class="br0">&#40;</span><span class="br0">&#91;</span><span class="st0">&quot;sampleApp/ModuleDIModel&quot;</span><span class="br0">&#93;</span><span class="sy0">,</span>
&nbsp; &nbsp; <span class="kw1">function</span> <span class="br0">&#40;</span>ModuleDIModel<span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">var</span> viewmodel <span class="sy0">=</span> <span class="kw1">new</span> ModuleDIModel<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; ko.<span class="me1">applyBindings</span><span class="br0">&#40;</span>viewmodel<span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; <span class="br0">&#125;</span>
<span class="br0">&#41;</span><span class="sy0">;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">define("sampleServices/ListOfItemsService", function () {
    // return an object literal for the service object
    return {
        getList: function () {
            return [
                { name: "first value", number: 123 },
                { name: "second value", number: 456 },
                { name: "third value", number: 789 }
            ];
        }
    }
});

// and a module that has a controller that depends on the ListOfItemsService
define("sampleApp/ModuleDIModel",
    ["sampleServices/ListOfItemsService"],
    function (listOfItemsService) {
        // return a constructor for the model
        return function () {
            this.textValue = ko.observable("some text");
            this.listOfItems = ko.observableArray([]);

            this.fillItems = function () {
                this.listOfItems(listOfItemsService.getList());
            };
        }
    }
);

// use require to define dependencies to start and bind viewmodel
require(["sampleApp/ModuleDIModel"],
    function (ModuleDIModel) {
        var viewmodel = new ModuleDIModel();
        ko.applyBindings(viewmodel);
    }
);</pre></div></div>

<p>Each define block has 3 arguments, the name of the module, the array of dependencies it requires, and the function it executes when initially resolved. The require block at the bottom then lists some requirements for inline execution of the included function and executes the function when they are available.</p>
<p>Like the Angular example, the service module will return a single instance of the ListOfItemsService that will be used by anyone needing it, while the ModuleDIModel returns a function constructor for the viewmodel. When I tell RequireJS I require the ModuleDIModel, it automatically resolves the dependency on the ListOfItemsService module.</p>
<h3>Knockout/RequireJS Errors in Modules</h3>
<p>Full source available at <a href="https://github.com/tarwn/AngularJS-vs-Knockout/blob/master/Knockout/ModuleError.html" title="View full example file on github">Knockout/ModuleError.html</a>.</p>
<p>Once again, my next concern is whether troubleshooting errors will be impaired. Substituting an error for the return of the ListOfItemsService again:</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="javascript"><thead><tr><td colspan="2"  class="head">Javascript</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
</pre></td><td class="de1"><pre class="de1">define<span class="br0">&#40;</span><span class="st0">&quot;sampleServices/ListOfItemsService&quot;</span><span class="sy0">,</span> <span class="kw1">function</span> <span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; <span class="kw1">return</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; getList<span class="sy0">:</span> <span class="kw1">function</span> <span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">throw</span> <span class="kw1">new</span> Error<span class="br0">&#40;</span><span class="st0">&quot;Error occurred, do we know where?&quot;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp; &nbsp; <span class="br0">&#125;</span>
<span class="br0">&#125;</span><span class="br0">&#41;</span><span class="sy0">;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">define("sampleServices/ListOfItemsService", function () {
    return {
        getList: function () {
            throw new Error("Error occurred, do we know where?");
        }
    }
});</pre></div></div>

<p>In Chrome, the console shows the error with a short stack trace which, when clicked, takes me directly to the line that produced the error. In Firefox, the console shows both the error message and the offending line, which opens up the source to the correct spot when clicked.</p>
<p>Again, this is primarily only going to be an issue during development, a I will hopefully have appropriate error handling logic in the application for expected errors in production (and I don&#8217;t expect my users to troubleshoot them for me).</p>
<h3>Knockout/RequireJS Module Loading</h3>
<p>Full source available at <a href="https://github.com/tarwn/AngularJS-vs-Knockout/blob/master/Knockout/AsyncDI.html" title="View full example file on github">Knockout/AsyncDI.html</a>.</p>
<p>RequireJS is built specifically for asynchronous module loading, so where we only have module level injection, instead of controller level in AngularJS, we do already have the asynchronous module loading of RequireJS. To switch from inline scripts to asynchronously loaded ones, all we have to do is make a few changes:</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="javascript"><thead><tr><td colspan="2"  class="head">Javascript</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
</pre></td><td class="de1"><pre class="de1">require.<span class="me1">config</span><span class="br0">&#40;</span><span class="br0">&#123;</span>
&nbsp; &nbsp; baseUrl<span class="sy0">:</span> <span class="st0">'js/AsyncDI'</span>
<span class="br0">&#125;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
require<span class="br0">&#40;</span><span class="br0">&#91;</span><span class="st0">&quot;sampleApp/ModuleDIModel&quot;</span><span class="br0">&#93;</span><span class="sy0">,</span>
&nbsp; &nbsp; <span class="kw1">function</span> <span class="br0">&#40;</span>ModuleDIModel<span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">var</span> viewmodel <span class="sy0">=</span> <span class="kw1">new</span> ModuleDIModel<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; ko.<span class="me1">applyBindings</span><span class="br0">&#40;</span>viewmodel<span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; <span class="br0">&#125;</span>
<span class="br0">&#41;</span><span class="sy0">;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">require.config({
    baseUrl: 'js/AsyncDI'
});

require(["sampleApp/ModuleDIModel"],
    function (ModuleDIModel) {
        var viewmodel = new ModuleDIModel();
        ko.applyBindings(viewmodel);
    }
);</pre></div></div>

<p>Like the AngularJS exmaple, I define a base URL for the library and then relay on it to run my bootstrapping code. In this case the bootstrap code hasn&#8217;t changed, though. RequireJS now automatically looks for js/AsyncDI/sampleApp/ModuleDIModel.js and resolves it&#8217;s dependencies too, then runs my method.</p>
<h2>Some Differences</h2>
<p>Where do I start? Most of this post was a comparison of external libraries, so while it was hopefully useful, I&#8217;m not going down a script.js vs RequireJS path (you can check this out instead: <a href="http://www.joezimjs.com/javascript/script-js-vs-requirejs-dependency-management-comparisons/">$script.js vs RequireJS: Dependency Management Comparisons</a>).</p>
<p>In fact, there is really only one difference we can look at here:</p>
<h3>It isn&#8217;t built in</h3>
<p>In the case of Knockout, we once again had to pull in an extra package. As always, this means we now have to track and manage yet another library that has separate security vulnerabilities, updates, and support team from the core library. It&#8217;s a tradeoff and you have to decide whether it&#8217;s worth it or not.</p>
<h3>It isn&#8217;t built in</h3>
<p>In the case of Angular, Modules and dependency injection are built in, but they suggest either keeping everything in a few files or merging them with a DIY build process. In my book, 1000+ line files are a code smell and I can&#8217;t stand them, but I think what it comes down to at the end of the day is whether you are ok with big files, want to use an external library (like script.js or RequireJS), or want to merge and minify them in your build process (you do have a build process, right?).</p>
<p>I&#8217;d compare RequireJS + Knockout to Angular, but when we included RequireJS we not only got modules, we also got asynchronous loading, so then we had to ratchet Angular up a notch and add script.js to get back to the same spot.</p>
<h2>Final Thoughts</h2>
<p>In both cases there is one unanswered issue. When is your application too big for keeping it all in a couple files? When does it become so large it impacts the user&#8217;s ability to load it via script tags, impacts our ability to keep our dependencies straight, etc. I think 10 &#8211; 20 modules is not too bad to keep track of as separate files, but I wouldn&#8217;t want to go larger than that. I could easily use namespacing with Knockout instead of a module loader for something that small, though it&#8217;s not as clean when it comes time to unit test (that post is coming, don&#8217;t worry).</p>
<p>So what is big? When do we need to switch from a few files or one big minified file to a module loader or a bundler like <a href="http://getcassette.net/" title="Cassette | Asset bundling for .Net">Cassette</a> that can auto bundle everything based on include comments? Is there a sweet spot in between where just have modules and DI without asynchronous loading is perfect? Or is asynchronous loading for &#8220;huge&#8221; applications (defined by Brian Ford above as tens and hundreds of thousands of lines) totally unnecessary?</p>
<p>I don&#8217;t have those answers, but they are important considerations we should be making when we sit down and try to choose between AngularJS and Knockout on a future project.</p>
<p>I think the AngularJS DI system works really well, and I was really happy about how it performed for the Unit testing examples (next post). I&#8217;m not crazy about the inferred method for DI, I feel like it saves a little typing while limiting minification and potential asynchronous loading options.</p>
<p>When I first looked at RequireJS for defining modules (and at Angular&#8217;s method, to be honest), it looked messy. They both still look a bit messy, but after working through these examples, I&#8217;ve decided I do actually like it and I&#8217;m planning on retrofiting some past projects to use RequireJS. And, unlike the build your own file merger suggestion for Angular, it already has well documented tools and methods for <a href="http://requirejs.org/docs/optimization.html" title="RequireJS Optimizer">optimizing</a> via your build process.</p>
<p>So, not a strong conclusion or set of comparisons for this post, but I&#8217;m sure we can hash it out in the comments <img src="https://s.w.org/images/core/emoji/2/72x72/1f642.png" alt="🙂" class="wp-smiley" style="height: 1em; max-height: 1em;" /></p>
<div style="background-color: #DDDDDD; padding: 8px; width: 400px;">
<h3>Knockout vs AngularJS</h3>
<ul style="margin: 0px; padding: 4px;">
<li><a href="/index.php/WebDev/UIDevelopment/angularjs-vs-knockout-introduction-1">Introductory Post</a></li>
<li><a href="/index.php/WebDev/UIDevelopment/angularjs-vs-knockout-data-binding-2">Data Binding</a></li>
<li><a href="/index.php/WebDev/UIDevelopment/angularjs-vs-knockout-validation-3">Validation</a></li>
<li><a href="/index.php/WebDev/UIDevelopment/angularjs-vs-knockout-serialization-4">Serialization</a></li>
<li><a href="/index.php/WebDev/UIDevelopment/angularjs-vs-knockout-templating-5">Templating</a></li>
<li><b>Modules + Dependency Injection</b></li>
<li><a href="/index.php/WebDev/UIDevelopment/angularjs-vs-knockout-automated-testing-7">Automated Testing</a></li>
<li><a href="/index.php/WebDev/UIDevelopment/AJAX/angularjs-vs-knockout-spa-routing-history-8">SPA Routing/History</a></li>
<li><a href="/index.php/WebDev/UIDevelopment/angularjs-vs-knockout-final-thoughts-9">Final, Final Thoughts</a></li>
</ul>
</div>
]]></content:encoded>
			<wfw:commentRss>/index.php/webdev/uidevelopment/angularjs-vs-knockout-modules-and-di-6/feed/</wfw:commentRss>
		<slash:comments>0</slash:comments>
		</item>
		<item>
		<title>AngularJS vs Knockout &#8211; Templating (5 of 8)</title>
		<link>/index.php/webdev/uidevelopment/angularjs-vs-knockout-templating-5/</link>
		<comments>/index.php/webdev/uidevelopment/angularjs-vs-knockout-templating-5/#comments</comments>
		<pubDate>Fri, 11 Oct 2013 12:56:00 +0000</pubDate>
		<dc:creator><![CDATA[Eli Weinstock-Herman (tarwn)]]></dc:creator>
				<category><![CDATA[Javascript]]></category>
		<category><![CDATA[UI Development]]></category>
		<category><![CDATA[angularjs]]></category>
		<category><![CDATA[knockout]]></category>

		<guid isPermaLink="false">/index.php/2013/10/angularjs-vs-knockout-templating-5/</guid>
		<description><![CDATA[I'm reviewing Angular and Knockout to determine which would fit better for a variety of upcoming projects. A huge piece of both of these frameworks is the ability to create and reuse templates for the output. AngularJS brings template Directives, transc&#8230;]]></description>
				<content:encoded><![CDATA[<p>I&#8217;m reviewing Angular and Knockout to determine which would fit better for a variety of upcoming projects. A huge piece of both of these frameworks is the ability to create and reuse templates for the output. AngularJS brings template Directives, transclusion, and behavior to the table, while Knockout brings templating, dynamic template names, and it&#8217;s own ability to apply additional behavior.</p>
<div style="background-color: #eeeeee; padding: 1em;">
This is the fifth of eight posts looking at the capabilities of knockout and Angular. In the <a href="/index.php/WebDev/UIDevelopment/angularjs-vs-knockout-introduction-1" title="AngularJS vs Knockout - Introduction">introduction post</a>, I outlined the capabilities that I am evaluating for. In the <a href="/index.php/WebDev/UIDevelopment/angularjs-vs-knockout-serialization-4" title="AngularJS vs Knockout - Serialization">fourth post</a>, I looked at serialization. This post explores some of the templating capabilities in the two frameworks.
</div>
<p>All of the examples presented throughout the series are available in the <a href="https://github.com/tarwn/AngularJS-vs-Knockout/" title="View all of the post examples on github">tarwn/AngularJS-vs-Knockout</a> repository on github.</p>
<h2>Templating in AngularJS</h2>
<p><a href="http://docs.angularjs.org/guide/directive" title="AngularJS: Directives">Directives</a> in Angular are touted as one of it&#8217;s &#8216;killer&#8217; features. They provide the ability to create entirely new elements using templates and custom behavior by replacing and manipulating DOM content. Angular Directives can be used to define custom behavior based on custom tags, attributes, and class names.</p>
<h3>AngularJS Simple Templating Example</h3>
<p>Full source available at <a href="https://github.com/tarwn/AngularJS-vs-Knockout/blob/master/Angular/SimpleTemplating.html" title="View full example file on github">Angular/SimpleTemplating.html</a>.</p>
<p>Taking a username and turning it into a full twitter button seems like it could be a good case for templating. Creating a replacement element will move the actual code for the twitter button out of the flow, reducing repetition of the mess while making the original code just as readable (or even more so).</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="html4strict"><thead><tr><td colspan="2"  class="head">HTML</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
</pre></td><td class="de1"><pre class="de1"><span class="sc2">&lt;<span class="kw2">div</span> ng-controller<span class="sy0">=</span><span class="st0">&quot;TemplatingController&quot;</span>&gt;</span>
&nbsp; &nbsp; <span class="sc2">&lt;<span class="kw2">h1</span>&gt;</span>As an Element<span class="sc2">&lt;<span class="sy0">/</span><span class="kw2">h1</span>&gt;</span>
&nbsp; &nbsp; <span class="sc2">&lt;twitter uservalue<span class="sy0">=</span><span class="st0">&quot;{{ username }}&quot;</span>&gt;&lt;<span class="sy0">/</span>twitter&gt;</span>
&nbsp;
&nbsp; &nbsp; <span class="sc-1">&lt;!-- ... attribute example, see source ... --&gt;</span>
<span class="sc2">&lt;<span class="sy0">/</span><span class="kw2">div</span>&gt;</span>
<span class="sc2">&lt;<span class="kw2">script</span> <span class="kw3">type</span><span class="sy0">=</span><span class="st0">&quot;text/javascript&quot;</span>&gt;</span>
&nbsp;
// ...
&nbsp;
sampleApp.directive('twitter', function(){
&nbsp; &nbsp; return {
&nbsp; &nbsp; &nbsp; &nbsp; // must be an element
&nbsp; &nbsp; &nbsp; &nbsp; restrict: 'E',
&nbsp; &nbsp; &nbsp; &nbsp; // replace it
&nbsp; &nbsp; &nbsp; &nbsp; replace: true,
&nbsp; &nbsp; &nbsp; &nbsp; // local scope will have a one-way binding to username from the referencing scope
&nbsp; &nbsp; &nbsp; &nbsp; scope: {
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; user: '@uservalue'
&nbsp; &nbsp; &nbsp; &nbsp; },
&nbsp; &nbsp; &nbsp; &nbsp; // just a basic div instead of pulling 
&nbsp; &nbsp; &nbsp; &nbsp; template: '<span class="sc2">&lt;<span class="kw2">iframe</span> allowtransparency<span class="sy0">=</span><span class="st0">&quot;true&quot;</span> <span class="kw3">frameborder</span><span class="sy0">=</span><span class="st0">&quot;0&quot;</span> <span class="kw3">scrolling</span><span class="sy0">=</span><span class="st0">&quot;no&quot;</span> <span class="kw3">src</span><span class="sy0">=</span><span class="st0">&quot;//platform.twitter.com/widgets/follow_button.html?screen_name={{ user }}&quot;</span> &nbsp;<span class="kw3">style</span><span class="sy0">=</span><span class="st0">&quot;width:300px; height:20px;&quot;</span>&gt;&lt;<span class="sy0">/</span><span class="kw2">iframe</span>&gt;</span>'
&nbsp; &nbsp; }
});
&nbsp;
// ... 
<span class="sc2">&lt;<span class="sy0">/</span><span class="kw2">script</span>&gt;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">&lt;div ng-controller="TemplatingController"&gt;
    &lt;h1&gt;As an Element&lt;/h1&gt;
    &lt;twitter uservalue="{{ username }}"&gt;&lt;/twitter&gt;

    &lt;!-- ... attribute example, see source ... --&gt;
&lt;/div&gt;
&lt;script type="text/javascript"&gt;

// ...

sampleApp.directive('twitter', function(){
    return {
        // must be an element
        restrict: 'E',
        // replace it
        replace: true,
        // local scope will have a one-way binding to username from the referencing scope
        scope: {
            user: '@uservalue'
        },
        // just a basic div instead of pulling 
        template: '&lt;iframe allowtransparency="true" frameborder="0" scrolling="no" src="//platform.twitter.com/widgets/follow_button.html?screen_name={{ user }}"  style="width:300px; height:20px;"&gt;&lt;/iframe&gt;'
    }
});

// ... 
&lt;/script&gt;</pre></div></div>

<p>The element is straightforward and readable. The directive will replace the custom element, pulling the value of the uservalue attribute in and adding that to the template HTML that will produce a twitter button when displayed.</p>
<h3>AngularJS Templating with Transclusion</h3>
<p>Full source available at <a href="https://github.com/tarwn/AngularJS-vs-Knockout/blob/master/Angular/TransclusionTemplating.html" title="View full example file on github">Angular/TransclusionTemplating.html</a>.</p>
<p>Angular directives provide the ability to <a href="http://docs.angularjs.org/api/ng.directive:ngTransclude" title="AngularJS: ngTransclude directive">transclude</a> content, inserting content from a custom element into the template in a directive. I&#8217;ve worked with a number of layouts over the years that have container elements, transclusion is a great tool to replace this repetitive (and occasionally fragile) code with a more readable and less repetitive element that provides the same final product. Here I&#8217;ve defined a basic Directive that for a container with a title and transcluded content.</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="html4strict"><thead><tr><td colspan="2"  class="head">HTML</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
</pre></td><td class="de1"><pre class="de1"><span class="sc2">&lt;<span class="kw2">div</span> ng-controller<span class="sy0">=</span><span class="st0">&quot;TransclusionTemplatingController&quot;</span>&gt;</span>
&nbsp; &nbsp; <span class="sc-1">&lt;!-- don't try to use myAwesomeContainer, it won't work --&gt;</span>
&nbsp; &nbsp; <span class="sc2">&lt;my-awesome-container h1-<span class="kw3">title</span><span class="sy0">=</span><span class="st0">&quot;{{ title }}&quot;</span>&gt;</span>
&nbsp; &nbsp; &nbsp; &nbsp; Here is my content: &quot;{{ content }}&quot;
&nbsp; &nbsp; <span class="sc2">&lt;<span class="sy0">/</span>my-awesome-container&gt;</span>
<span class="sc2">&lt;<span class="sy0">/</span><span class="kw2">div</span>&gt;</span>
<span class="sc2">&lt;<span class="kw2">script</span> <span class="kw3">type</span><span class="sy0">=</span><span class="st0">&quot;text/javascript&quot;</span>&gt;</span>
&nbsp; &nbsp; var sampleApp = angular.module('sampleApp', []);
&nbsp;
&nbsp; &nbsp; sampleApp.directive('myAwesomeContainer', function () {
&nbsp; &nbsp; &nbsp; &nbsp; return {
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; // must be an element
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; restrict: 'E',
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; // replace it
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; replace: true,
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; // use transclusion
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; transclude: true,
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; // local scope 
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; scope: {
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; titleValue: &quot;@h1Title&quot;
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; },
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; // pretending we have a fancy set of HTML for the container
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; template: '<span class="sc2">&lt;<span class="kw2">div</span> <span class="kw3">class</span><span class="sy0">=</span><span class="st0">&quot;fancy-pants&quot;</span>&gt;&lt;<span class="kw2">h1</span>&gt;</span>{{ titleValue }}<span class="sc2">&lt;<span class="sy0">/</span><span class="kw2">h1</span>&gt;&lt;<span class="kw2">div</span> ng-transclude&gt;&lt;<span class="sy0">/</span><span class="kw2">div</span>&gt;&lt;<span class="sy0">/</span><span class="kw2">div</span>&gt;</span>'
&nbsp; &nbsp; &nbsp; &nbsp; }
&nbsp; &nbsp; });
&nbsp;
&nbsp; &nbsp; sampleApp.controller('TransclusionTemplatingController', function ($scope) {
&nbsp; &nbsp; &nbsp; &nbsp; $scope.content = &quot;Some Dynamic Content&quot;;
&nbsp; &nbsp; &nbsp; &nbsp; $scope.title = &quot;A Dynamic Title&quot;;
&nbsp; &nbsp; });
<span class="sc2">&lt;<span class="sy0">/</span><span class="kw2">script</span>&gt;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">&lt;div ng-controller="TransclusionTemplatingController"&gt;
    &lt;!-- don't try to use myAwesomeContainer, it won't work --&gt;
    &lt;my-awesome-container h1-title="{{ title }}"&gt;
        Here is my content: "{{ content }}"
    &lt;/my-awesome-container&gt;
&lt;/div&gt;
&lt;script type="text/javascript"&gt;
    var sampleApp = angular.module('sampleApp', []);

    sampleApp.directive('myAwesomeContainer', function () {
        return {
            // must be an element
            restrict: 'E',
            // replace it
            replace: true,
            // use transclusion
            transclude: true,
            // local scope 
            scope: {
                titleValue: "@h1Title"
            },
            // pretending we have a fancy set of HTML for the container
            template: '&lt;div class="fancy-pants"&gt;&lt;h1&gt;{{ titleValue }}&lt;/h1&gt;&lt;div ng-transclude&gt;&lt;/div&gt;&lt;/div&gt;'
        }
    });

    sampleApp.controller('TransclusionTemplatingController', function ($scope) {
        $scope.content = "Some Dynamic Content";
        $scope.title = "A Dynamic Title";
    });
&lt;/script&gt;</pre></div></div>

<p>Defining dialogs, containers, and so on as standard templates could take a lot of repetitive code out of the source, provide a single touch point to modify the code for those containers, and reduce the size of the HTML file the end user is downloading. </p>
<h3>AngularJS Templating with Behavior</h3>
<p>Full source available at <a href="https://github.com/tarwn/AngularJS-vs-Knockout/blob/master/Angular/BehaviorTemplating.html" title="View full example file on github">Angular/BehaviorTemplating.html</a>.</p>
<p>In the <a href="/index.php/WebDev/UIDevelopment/angularjs-vs-knockout-validation-3" title="AngularJS vs Knockout - Validation">validation post</a>, I used the linking method of a Directive to build validation. With templates, we can use that same linking method to add behavior to the template. Taking the transcluded container one step further, I&#8217;m going to provide the ability to hide or show the content by clicking on the title of the container.</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="html4strict"><thead><tr><td colspan="2"  class="head">HTML</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
</pre></td><td class="de1"><pre class="de1"><span class="sc2">&lt;<span class="kw2">div</span> ng-controller<span class="sy0">=</span><span class="st0">&quot;BehaviorTemplatingController&quot;</span>&gt;</span>
&nbsp; &nbsp; <span class="sc2">&lt;expanding-container clickable-<span class="kw3">title</span><span class="sy0">=</span><span class="st0">&quot;{{ title }}&quot;</span>&gt;</span>
&nbsp; &nbsp; &nbsp; &nbsp; Here is my content: &quot;{{ content }}&quot;
&nbsp; &nbsp; <span class="sc2">&lt;<span class="sy0">/</span>expanding-container&gt;</span>
<span class="sc2">&lt;<span class="sy0">/</span><span class="kw2">div</span>&gt;</span>
<span class="sc2">&lt;<span class="kw2">script</span> <span class="kw3">type</span><span class="sy0">=</span><span class="st0">&quot;text/javascript&quot;</span>&gt;</span>
&nbsp; &nbsp; var sampleApp = angular.module('sampleApp', []);
&nbsp;
&nbsp; &nbsp; sampleApp.directive('expandingContainer', function () {
&nbsp; &nbsp; &nbsp; &nbsp; return {
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; // must be an element
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; restrict: 'E',
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; // replace it
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; replace: true,
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; // use transclusion
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; transclude: true,
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; // local scope 
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; scope: {
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; titleValue: &quot;@clickableTitle&quot;
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; },
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; // pretending we have a fancy set of HTML for the container
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; template: '<span class="sc2">&lt;<span class="kw2">div</span> <span class="kw3">class</span><span class="sy0">=</span><span class="st0">&quot;fancy-pants&quot;</span>&gt;&lt;<span class="kw2">div</span>&gt;</span>{{ titleValue }}<span class="sc2">&lt;<span class="sy0">/</span><span class="kw2">div</span>&gt;&lt;<span class="kw2">div</span> ng-transclude <span class="kw3">class</span><span class="sy0">=</span><span class="st0">&quot;box-to-hide&quot;</span>&gt;&lt;<span class="sy0">/</span><span class="kw2">div</span>&gt;&lt;<span class="sy0">/</span><span class="kw2">div</span>&gt;</span>',
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; link: function (scope, element, attributes) {
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; // copied and reformatted from doc examples here: http://docs.angularjs.org/guide/directive
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; var opened = true;
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; var title = angular.element(element.children()[0]);
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; title.bind('click', toggle);
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; function toggle() {
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; console.log(&quot;done&quot;);
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; opened = !opened;
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; element.removeClass(opened ? 'closed' : 'opened');
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; element.addClass(opened ? 'opened' : 'closed');
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; };
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; toggle();
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }
&nbsp; &nbsp; &nbsp; &nbsp; }
&nbsp; &nbsp; });
&nbsp;
&nbsp; &nbsp; sampleApp.controller('BehaviorTemplatingController', function ($scope) {
&nbsp; &nbsp; &nbsp; &nbsp; $scope.content = &quot;Some Dynamic Content&quot;;
&nbsp; &nbsp; &nbsp; &nbsp; $scope.title = &quot;Click title to toggle visibility&quot;;
&nbsp; &nbsp; });
<span class="sc2">&lt;<span class="sy0">/</span><span class="kw2">script</span>&gt;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">&lt;div ng-controller="BehaviorTemplatingController"&gt;
    &lt;expanding-container clickable-title="{{ title }}"&gt;
        Here is my content: "{{ content }}"
    &lt;/expanding-container&gt;
&lt;/div&gt;
&lt;script type="text/javascript"&gt;
    var sampleApp = angular.module('sampleApp', []);

    sampleApp.directive('expandingContainer', function () {
        return {
            // must be an element
            restrict: 'E',
            // replace it
            replace: true,
            // use transclusion
            transclude: true,
            // local scope 
            scope: {
                titleValue: "@clickableTitle"
            },
            // pretending we have a fancy set of HTML for the container
            template: '&lt;div class="fancy-pants"&gt;&lt;div&gt;{{ titleValue }}&lt;/div&gt;&lt;div ng-transclude class="box-to-hide"&gt;&lt;/div&gt;&lt;/div&gt;',
            link: function (scope, element, attributes) {
                // copied and reformatted from doc examples here: http://docs.angularjs.org/guide/directive
                var opened = true;
                var title = angular.element(element.children()[0]);
                title.bind('click', toggle);

                function toggle() {
                    console.log("done");
                    opened = !opened;
                    element.removeClass(opened ? 'closed' : 'opened');
                    element.addClass(opened ? 'opened' : 'closed');
                };

                toggle();
            }
        }
    });

    sampleApp.controller('BehaviorTemplatingController', function ($scope) {
        $scope.content = "Some Dynamic Content";
        $scope.title = "Click title to toggle visibility";
    });
&lt;/script&gt;</pre></div></div>

<p>Ten to eleven years ago, this would have been an ASP or PHP function that took content, wrapped it in some HTML, then slathered on some cross-browser javascript. The combination of transclusion and linking script is pretty powerful, providing an easy way to create dialog, container control, or panel logic in a single place with behavior, then re-use it in a readable format via custom tags.</p>
<p>I ran into a couple major speedbumps while working on this, however. The first was that I started out going down the complete wrong road. By default, the guide and documentation on the Angular site default to the latest unstable version, while I am using the latest stable version. This resulted in quite a bit of confusion, as I was originally using a function that doesn&#8217;t even exist in the stable version.</p>
<p>The other issue was the continued difficulty of debugging things that fail silently. While I was working on this, I often found myself staring at no results and no error message. It also took some fiddling to figure out which pattern to use when naming directives vs using them in the HTML. This is likely one of those things that you get used to as you use it heavily, but in the longer term could cause issues if you have to come back to it after to using it for a while or are bringing new developers up to speed with it for the first time.</p>
<h2>Templating in Knockout</h2>
<p><a href="http://knockoutjs.com/documentation/template-binding.html" title="Knockout: 'template' binding">Templating</a> in Knockout is a binding, and it works and is defined similar to how the other bindings work. Templates are defined as sections of HTML and bound to a data model from the template binding.</p>
<h3>Knockout Simple Templating Example</h3>
<p>Full source available at <a href="https://github.com/tarwn/AngularJS-vs-Knockout/blob/master/Knockout/SimpleTemplating.html" title="View full example file on github">Knockout/SimpleTemplating.html</a>.</p>
<p>Just as I did in the AngularJS example above, I&#8217;m going to start with a simple template that turns a username into a twitter button.</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="html4strict"><thead><tr><td colspan="2"  class="head">HTML</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
</pre></td><td class="de1"><pre class="de1"><span class="sc2">&lt;<span class="kw2">div</span>&gt;</span>
&nbsp; &nbsp; <span class="sc2">&lt;<span class="kw2">h1</span>&gt;</span>Inside an Element<span class="sc2">&lt;<span class="sy0">/</span><span class="kw2">h1</span>&gt;</span>
&nbsp; &nbsp; <span class="sc2">&lt;<span class="kw2">div</span> data-bind<span class="sy0">=</span><span class="st0">&quot;template: { name: 'twitter-template', data: { user: username }}&quot;</span>&gt;&lt;<span class="sy0">/</span><span class="kw2">div</span>&gt;</span>
&nbsp; &nbsp; <span class="sc-1">&lt;!-- ... --&gt;</span>
<span class="sc2">&lt;<span class="sy0">/</span><span class="kw2">div</span>&gt;</span>
<span class="sc2">&lt;<span class="kw2">script</span> <span class="kw3">type</span><span class="sy0">=</span><span class="st0">&quot;text/html&quot;</span> <span class="kw3">id</span><span class="sy0">=</span><span class="st0">&quot;twitter-template&quot;</span>&gt;</span>
&nbsp; &nbsp; <span class="sc2">&lt;<span class="kw2">iframe</span> allowtransparency<span class="sy0">=</span><span class="st0">&quot;true&quot;</span> <span class="kw3">frameborder</span><span class="sy0">=</span><span class="st0">&quot;0&quot;</span> <span class="kw3">scrolling</span><span class="sy0">=</span><span class="st0">&quot;no&quot;</span></span>
<span class="sc2"> &nbsp; &nbsp; &nbsp; &nbsp;data-bind<span class="sy0">=</span><span class="st0">&quot;attr: { src: '//platform.twitter.com/widgets/follow_button.html?screen_name=' + user() }&quot;</span></span>
<span class="sc2"> &nbsp; &nbsp; &nbsp; &nbsp;<span class="kw3">style</span><span class="sy0">=</span><span class="st0">&quot;width:300px; height:20px;&quot;</span>&gt;&lt;<span class="sy0">/</span><span class="kw2">iframe</span>&gt;</span>
<span class="sc2">&lt;<span class="sy0">/</span><span class="kw2">script</span>&gt;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">&lt;div&gt;
    &lt;h1&gt;Inside an Element&lt;/h1&gt;
    &lt;div data-bind="template: { name: 'twitter-template', data: { user: username }}"&gt;&lt;/div&gt;
    &lt;!-- ... --&gt;
&lt;/div&gt;
&lt;script type="text/html" id="twitter-template"&gt;
    &lt;iframe allowtransparency="true" frameborder="0" scrolling="no"
        data-bind="attr: { src: '//platform.twitter.com/widgets/follow_button.html?screen_name=' + user() }"
        style="width:300px; height:20px;"&gt;&lt;/iframe&gt;
&lt;/script&gt;</pre></div></div>

<p>Templates in knockout fill the container they are defined on rather than replacing it. The data bind specifies the template name, which corresponds to a text/html block with the same id. The template binding specifies an anonymous object with the property as the viewmodel. This could as easily have been just the individual property, but I thought the anonymous object made it more similar to the Angular directive.</p>
<h3>Knockout Nested Templating Example</h3>
<p>Full source available at <a href="https://github.com/tarwn/AngularJS-vs-Knockout/blob/master/Knockout/NestedTemplating.html" title="View full example file on github">Knockout/NestedTemplating.html</a>.</p>
<p>While knockout does not have the concept of tranclusion, it does have the ability to define templates dynamically using an observable or computed value for the template name. So, while knockout does not have a built-in ability to do transclusion, you can very easily pass along a sub-template name and viewmodel to render a nested template.</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="html4strict"><thead><tr><td colspan="2"  class="head">HTML</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
</pre></td><td class="de1"><pre class="de1"><span class="sc2">&lt;<span class="kw2">div</span> data-bind<span class="sy0">=</span><span class="st0">&quot;template: { name: 'container-template', data: { title: title, subtemplate: 'sample-contents', submodel: { content: content }}}&quot;</span>&gt;&lt;<span class="sy0">/</span><span class="kw2">div</span>&gt;</span>
&nbsp;
<span class="sc2">&lt;<span class="kw2">script</span> <span class="kw3">type</span><span class="sy0">=</span><span class="st0">&quot;text/html&quot;</span> <span class="kw3">id</span><span class="sy0">=</span><span class="st0">&quot;container-template&quot;</span>&gt;</span>
&nbsp; &nbsp; <span class="sc2">&lt;<span class="kw2">div</span> <span class="kw3">class</span><span class="sy0">=</span><span class="st0">&quot;fancy-pants&quot;</span>&gt;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="sc2">&lt;<span class="kw2">h1</span> data-bind<span class="sy0">=</span><span class="st0">&quot;text: title&quot;</span>&gt;&lt;<span class="sy0">/</span><span class="kw2">h1</span>&gt;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="sc2">&lt;<span class="kw2">div</span> data-bind<span class="sy0">=</span><span class="st0">&quot;template: { name: subtemplate, data: submodel}&quot;</span>&gt;&lt;<span class="sy0">/</span><span class="kw2">div</span>&gt;</span>
&nbsp; &nbsp; <span class="sc2">&lt;<span class="sy0">/</span><span class="kw2">div</span>&gt;</span>
<span class="sc2">&lt;<span class="sy0">/</span><span class="kw2">script</span>&gt;</span>
&nbsp; &nbsp;
<span class="sc2">&lt;<span class="kw2">script</span> <span class="kw3">type</span><span class="sy0">=</span><span class="st0">&quot;text/html&quot;</span> <span class="kw3">id</span><span class="sy0">=</span><span class="st0">&quot;sample-contents&quot;</span>&gt;</span>
&nbsp; &nbsp; <span class="sc2">&lt;<span class="kw2">div</span> data-bind<span class="sy0">=</span><span class="st0">&quot;text: content&quot;</span>&gt;</span> &nbsp; &nbsp; &nbsp; &nbsp;
&nbsp; &nbsp; <span class="sc2">&lt;<span class="sy0">/</span><span class="kw2">div</span>&gt;</span>
<span class="sc2">&lt;<span class="sy0">/</span><span class="kw2">script</span>&gt;</span>
&nbsp;
<span class="sc2">&lt;<span class="kw2">script</span> <span class="kw3">type</span><span class="sy0">=</span><span class="st0">&quot;text/javascript&quot;</span>&gt;</span>
var SimpleTemplatingModel = function () {
&nbsp; &nbsp; this.title = ko.observable(&quot;A Dynamic Title&quot;);
&nbsp; &nbsp; this.content = ko.observable(&quot;Some Dynamic Content&quot;);
};
&nbsp;
// ...</pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">&lt;div data-bind="template: { name: 'container-template', data: { title: title, subtemplate: 'sample-contents', submodel: { content: content }}}"&gt;&lt;/div&gt;

&lt;script type="text/html" id="container-template"&gt;
    &lt;div class="fancy-pants"&gt;
        &lt;h1 data-bind="text: title"&gt;&lt;/h1&gt;
        &lt;div data-bind="template: { name: subtemplate, data: submodel}"&gt;&lt;/div&gt;
    &lt;/div&gt;
&lt;/script&gt;
   
&lt;script type="text/html" id="sample-contents"&gt;
    &lt;div data-bind="text: content"&gt;        
    &lt;/div&gt;
&lt;/script&gt;

&lt;script type="text/javascript"&gt;
var SimpleTemplatingModel = function () {
    this.title = ko.observable("A Dynamic Title");
    this.content = ko.observable("Some Dynamic Content");
};

// ...</pre></div></div>

<p>Nesting templates dynamically is probably a less frequent use case than transclusion, and not something you would run into anywhere near as often as good uses for Angular&#8217;s transclusion. But it does provide a neat example for dynamic templates, which have a much wider use case. You can easily build a SPA container using a high level template binding to an observable, then swap the value to new template names on demand (via routing).</p>
<h3>Knockout Templating w/ Behavior Example</h3>
<p>Full source available at <a href="https://github.com/tarwn/AngularJS-vs-Knockout/blob/master/Knockout/BehaviorTemplating.html" title="View full example file on github">Knockout/BehaviorTemplating.html</a>.</p>
<p>Like Angular, knockout templates provide a mechanism to add behavior when they are applied. The template binding in knockout has <a href="http://knockoutjs.com/documentation/template-binding.html#note_4_using_afterrender_afteradd_and_beforeremove" title='Knockout: The "template" binding'>additional properties</a> that can be run as post-processing steps.</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="html4strict"><thead><tr><td colspan="2"  class="head">HTML</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
</pre></td><td class="de1"><pre class="de1"><span class="sc2">&lt;<span class="kw2">div</span> data-bind<span class="sy0">=</span><span class="st0">&quot;template: { name: 'container-template', data: { title: title, content: content }, afterRender: makeItToggly }&quot;</span>&gt;&lt;<span class="sy0">/</span><span class="kw2">div</span>&gt;</span>
&nbsp;
<span class="sc2">&lt;<span class="kw2">script</span> <span class="kw3">type</span><span class="sy0">=</span><span class="st0">&quot;text/html&quot;</span> <span class="kw3">id</span><span class="sy0">=</span><span class="st0">&quot;container-template&quot;</span>&gt;</span>
&nbsp; &nbsp; <span class="sc2">&lt;<span class="kw2">div</span> <span class="kw3">class</span><span class="sy0">=</span><span class="st0">&quot;fancy-pants&quot;</span>&gt;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="sc2">&lt;<span class="kw2">h1</span> data-bind<span class="sy0">=</span><span class="st0">&quot;text: title&quot;</span>&gt;&lt;<span class="sy0">/</span><span class="kw2">h1</span>&gt;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="sc2">&lt;<span class="kw2">div</span> data-bind<span class="sy0">=</span><span class="st0">&quot;text: content&quot;</span>&gt;&lt;<span class="sy0">/</span><span class="kw2">div</span>&gt;</span>
&nbsp; &nbsp; <span class="sc2">&lt;<span class="sy0">/</span><span class="kw2">div</span>&gt;</span>
<span class="sc2">&lt;<span class="sy0">/</span><span class="kw2">script</span>&gt;</span>
<span class="sc2">&lt;<span class="kw2">script</span> <span class="kw3">type</span><span class="sy0">=</span><span class="st0">&quot;text/javascript&quot;</span>&gt;</span>
&nbsp; &nbsp; var SimpleTemplatingModel = function () {
&nbsp; &nbsp; &nbsp; &nbsp; this.title = ko.observable(&quot;A Dynamic Title&quot;);
&nbsp; &nbsp; &nbsp; &nbsp; this.content = ko.observable(&quot;Click title to toggle visibility&quot;);
&nbsp; &nbsp; };
&nbsp;
&nbsp; &nbsp; var viewmodel = new SimpleTemplatingModel();
&nbsp; &nbsp; ko.applyBindings(viewmodel)
&nbsp;
&nbsp; &nbsp; // some jQuery behavior stuff
&nbsp; &nbsp; function makeItToggly(elem) {
&nbsp; &nbsp; &nbsp; &nbsp; $(elem).click(function () {
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; $(elem).find('div').toggle();
&nbsp; &nbsp; &nbsp; &nbsp; });
&nbsp; &nbsp; }
<span class="sc2">&lt;<span class="sy0">/</span><span class="kw2">script</span>&gt;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">&lt;div data-bind="template: { name: 'container-template', data: { title: title, content: content }, afterRender: makeItToggly }"&gt;&lt;/div&gt;

&lt;script type="text/html" id="container-template"&gt;
    &lt;div class="fancy-pants"&gt;
        &lt;h1 data-bind="text: title"&gt;&lt;/h1&gt;
        &lt;div data-bind="text: content"&gt;&lt;/div&gt;
    &lt;/div&gt;
&lt;/script&gt;
&lt;script type="text/javascript"&gt;
    var SimpleTemplatingModel = function () {
        this.title = ko.observable("A Dynamic Title");
        this.content = ko.observable("Click title to toggle visibility");
    };

    var viewmodel = new SimpleTemplatingModel();
    ko.applyBindings(viewmodel)

    // some jQuery behavior stuff
    function makeItToggly(elem) {
        $(elem).click(function () {
            $(elem).find('div').toggle();
        });
    }
&lt;/script&gt;</pre></div></div>

<p>For this example, I&#8217;ve returned to the container that hides it&#8217;s content when the title is clicked. Knockout does not include DOM manipulation methods, so I&#8217;ve reached out to <a href="http://jquery.com/">jQuery</a> for the click handling and toggling (though if the library size worries you, I could have also gone to <a href="http://zeptojs.com/">Zepto.js</a>, a lighter weight alternative).</p>
<p>Unlike the Angular example, there weren&#8217;t any major struggles to make this work.</p>
<h2>Some Differences</h2>
<p>With templating, there are quite a few differences between the two frameworks, but I don&#8217;t think that would prevent you from implementing the same site in either.</p>
<p><b>Readability</b></p>
<p>Looking at an AngularJS custom element vs a Knockout binding on an HTML element, the AngularJS one is definitely a little cleaner and easier to read. In my examples above, I could have trimmed down the Knockout template bindings a little more, but it still would have been more cluttered than a single named element, like AngularJS.</p>
<p><b>Dynamic Templating</b></p>
<p>This is a great feature in Knockout, and I could see a number of uses for it when you have a site with several pages, multiple sections in a page, sections that transform between read and edit mode, etc. I did try to implement something like this in Angular using Directives and defining them in a couple different ways from changeable properties in the scope, but was not able to get it working.</p>
<p><span class="MT_orange"> (Update)</span></p>
<p>When I originally published this post, my AngularJS focus was solely on custom directives, but it turns out () that there is a built-in <a href="http://code.angularjs.org/1.0.8/docs/api/ng.directive:ngInclude" title="AngularJS: ngInclude">ngInclude</a> binding that will include a template similarly to knockout&#8217;s dynamic template. It includes an external HTML file with a child scope that is derived from the current one. It also has an onload attribute, which is evaluated when the template is loaded.</p>
<p>Example: <a href="https://github.com/tarwn/AngularJS-vs-Knockout/blob/master/Angular/ngIncludeTemplating.html" title="View full example file on github">Angular/ngIncludeTemplating.html</a></p>
<p>It&#8217;s not a huge difference, but I like Knockout&#8217;s ability to specify the data model. With AngularJS, your scope is available to the template and it figures out what it wants to grab and manipulate, with knockout you can pass it an instance of exactly the viewmodel it&#8217;s expecting and the template doesn&#8217;t have to have any knowledge about the higher level viewmodel. It also differentiates between collections, which it will iterate over, and non-collections, which it will render one template against. On the plus side for Angular, it&#8217;s templates for ngInclude are separate files already, something you have to add a plugin to knockout to achieve.</p>
<p><b>Transclusion</b></p>
<p>Transclusion is an excellent tool with a wide set of use cases. I&#8217;d love to see a library combine transclusion and dynamic templates, as I think that these are easily one of the biggest differentiators for templating in the two libraries.</p>
<p><b>Behavior</b></p>
<p>With the Knockout example I pulled in a third party library (jQuery), and this comes with all the potential maintenance issues that you get when you start adding additional libraries. I don&#8217;t think the size is much of an issue, as I could just as easily have pulled in a smaller library. The other thing I didn&#8217;t like about Knockout was defining the behavior as a binding on the element rather than as part of the template. In my example above, I wanted to build a component with some behavior, but I had to bind that extra behavior from outside the template definition. Beside feeling a little hinky, it also could cause some problems if I was using dynamic templates with different behavior.</p>
<p>The AngularJS example kept the behavior together with the template definition, which I liked, but jqLite doesn&#8217;t have as extensive a set of functionality as a full standalone library like jQuery. If I needed that additional functionality, I don&#8217;t think I can remove jqLite from the file size of AngularJS, so I&#8217;m carrying a little extra baggage.</p>
<p><b>Pain Points</b></p>
<p>I feel like I have to point out again the pain points I ran into with AngularJS and it&#8217;s documentation. Even knowing that google is dropping me on the unstable branch and that the version is visible in the top left, in many cases it is very hard to go from a page in the unstable version to the corresponding page in a stable version, or to figure out what version a function was added so I can look for alternatives if it&#8217;s not in stable yet. This caused a great deal of confusion. As far as I can tell, Knockout&#8217;s documentation speaks to the latest stable/release version, and not the 3.0 version (beta when I started this, RC now). I do know that I haven&#8217;t had any struggles with it, where I seem to struggle frequently with the Angular side (maybe they assume everyone is using the unstable version or has long enough deployment cycles that it will be stable by the time we deploy?).</p>
<h2>Final Words</h2>
<p>If we consider the end goal of using frameworks like these for templating, I feel that both bring a great deal of capability to the table. There are definitely differences in how they work and I felt those as I was working on the examples. I&#8217;d love to somehow have the transclusion ability from AngularJS, dynamic templating from Knockout, and combined behavior and template in a single place from AngularJS.</p>
<div style="background-color: #DDDDDD; padding: 8px; width: 400px;">
<h3>Knockout vs AngularJS</h3>
<ul style="margin: 0px; padding: 4px;">
<li><a href="/index.php/WebDev/UIDevelopment/angularjs-vs-knockout-introduction-1">Introductory Post</a></li>
<li><a href="/index.php/WebDev/UIDevelopment/angularjs-vs-knockout-data-binding-2">Data Binding</a></li>
<li><a href="/index.php/WebDev/UIDevelopment/angularjs-vs-knockout-validation-3">Validation</a></li>
<li><a href="/index.php/WebDev/UIDevelopment/angularjs-vs-knockout-serialization-4">Serialization</a></li>
<li><b>Templating</b></li>
<li><a href="/index.php/WebDev/UIDevelopment/angularjs-vs-knockout-modules-and-di-6">Modules + Dependency Injection</a></li>
<li><a href="/index.php/WebDev/UIDevelopment/angularjs-vs-knockout-automated-testing-7">Automated Testing</a></li>
<li><a href="/index.php/WebDev/UIDevelopment/AJAX/angularjs-vs-knockout-spa-routing-history-8">SPA Routing/History</a></li>
<li><a href="/index.php/WebDev/UIDevelopment/angularjs-vs-knockout-final-thoughts-9">Final, Final Thoughts</a></li>
</ul>
</div>
]]></content:encoded>
			<wfw:commentRss>/index.php/webdev/uidevelopment/angularjs-vs-knockout-templating-5/feed/</wfw:commentRss>
		<slash:comments>2</slash:comments>
		</item>
		<item>
		<title>AngularJS vs Knockout &#8211; Serialization (4 of 8)</title>
		<link>/index.php/webdev/uidevelopment/angularjs-vs-knockout-serialization-4/</link>
		<comments>/index.php/webdev/uidevelopment/angularjs-vs-knockout-serialization-4/#comments</comments>
		<pubDate>Thu, 10 Oct 2013 13:05:00 +0000</pubDate>
		<dc:creator><![CDATA[Eli Weinstock-Herman (tarwn)]]></dc:creator>
				<category><![CDATA[Javascript]]></category>
		<category><![CDATA[UI Development]]></category>
		<category><![CDATA[angularjs]]></category>
		<category><![CDATA[json]]></category>
		<category><![CDATA[knockout]]></category>
		<category><![CDATA[serialization]]></category>

		<guid isPermaLink="false">/index.php/2013/10/angularjs-vs-knockout-serialization-4/</guid>
		<description><![CDATA[I'm reviewing Angular and Knockout to determine which would fit better for a variety of upcoming projects. A key operation will be API GETs and POSTs, so how easy or hard will it be to serialize and send data models? Is my server going to have to wade t&#8230;]]></description>
				<content:encoded><![CDATA[<p>I&#8217;m reviewing Angular and Knockout to determine which would fit better for a variety of upcoming projects. A key operation will be API GETs and POSTs, so how easy or hard will it be to serialize and send data models? Is my server going to have to wade through extra framework properties?</p>
<div style="background-color: #eeeeee; padding: 1em;">
This is the fourth of eight posts looking at the capabilities of knockout and Angular. In the <a href="/index.php/WebDev/UIDevelopment/angularjs-vs-knockout-introduction-1" title="AngularJS vs Knockout - Introduction">introduction post</a>, I outlined the capabilities that I am evaluating for. In the <a href="/index.php/WebDev/UIDevelopment/angularjs-vs-knockout-validation-3" title="AngularJS vs Knockout - Validation">third post</a>, I looked at validation. This post is exploring serialization of data models and any ability to prevent frontend values from being sent to the server.
</div>
<p>All of the examples presented throughout the series are available in the <a href="https://github.com/tarwn/AngularJS-vs-Knockout/" title="View all of the post examples on github">tarwn/AngularJS-vs-Knockout</a> repository on github.</p>
<h2>Angular Serialization</h2>
<p>Angular provides a <a href="http://docs.angularjs.org/api/angular.toJson" title="angular.toJson in Angular Documentation">toJson</a> serialization method built in. toJson ignores any values that start with a $, which prevents it from serializing it&#8217;s internal properties into the JSON.</p>
<h3>Angular Serialization Example</h3>
<p>Full source available at <a href="https://github.com/tarwn/AngularJS-vs-Knockout/blob/master/Angular/Serialization.html" title="View full example file on github">Angular/Serialization.html</a>.</p>
<p>Serialization is fairly straightforward. In this example I decided I wanted to see the JSON as I changed values in the form, so I created a <a href="http://docs.angularjs.org/api/ng.$rootScope.Scope#$watch" title="AngularJS: Scope - $watch">$watch</a> to update a $json property on the scope as I changed values. The form includes a number value, a text value, and my example calculated value (a simple integer + 5 in this case).</p>
<div style="background-color: #eeeeee; padding: 1em;">
<strong><span class="MT_red">Warning:</span> </strong>I am only outputting the json to a property for illustration purposes so we can see what the output would be as we make changes. Updating a json property via a watch is not something you would do in a real application.
</div>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="javascript"><thead><tr><td colspan="2"  class="head">Javascript</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
</pre></td><td class="de1"><pre class="de1"><span class="kw1">var</span> sampleApp <span class="sy0">=</span> angular.<span class="me1">module</span><span class="br0">&#40;</span><span class="st0">'sampleApp'</span><span class="sy0">,</span> <span class="br0">&#91;</span><span class="br0">&#93;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
sampleApp.<span class="me1">controller</span><span class="br0">&#40;</span><span class="st0">'SerializationController'</span><span class="sy0">,</span> <span class="kw1">function</span> <span class="br0">&#40;</span>$scope<span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; $scope.<span class="me1">model</span> <span class="sy0">=</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; textValue<span class="sy0">:</span> <span class="st0">&quot;&quot;</span><span class="sy0">,</span>
&nbsp; &nbsp; &nbsp; &nbsp; integerValue<span class="sy0">:</span> <span class="nu0">0</span>
&nbsp; &nbsp; <span class="br0">&#125;</span><span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; <span class="co1">// this calculated value won't show up in json</span>
&nbsp; &nbsp; $scope.<span class="me1">model</span>.<span class="me1">getCalculatedInteger</span> <span class="sy0">=</span> <span class="kw1">function</span> <span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">return</span> $scope.<span class="me1">model</span>.<span class="me1">integerValue</span> <span class="sy0">+</span> <span class="nu0">5</span><span class="sy0">;</span>
&nbsp; &nbsp; <span class="br0">&#125;</span><span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; <span class="co1">// this one will show up</span>
&nbsp; &nbsp; $scope.<span class="me1">model</span>.<span class="me1">calculatedInteger</span> <span class="sy0">=</span> <span class="nu0">0</span><span class="sy0">;</span>
&nbsp; &nbsp; $scope.$watch<span class="br0">&#40;</span><span class="st0">'model.getCalculatedInteger()'</span><span class="sy0">,</span> <span class="kw1">function</span><span class="br0">&#40;</span>newVal<span class="sy0">,</span> oldVal<span class="br0">&#41;</span><span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; $scope.<span class="me1">model</span>.<span class="me1">calculatedInteger</span> <span class="sy0">=</span> $scope.<span class="me1">model</span>.<span class="me1">getCalculatedInteger</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; <span class="br0">&#125;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; <span class="co1">// json output when changes occur inside the model object</span>
&nbsp; &nbsp; $scope.$watch<span class="br0">&#40;</span><span class="st0">&quot;model&quot;</span><span class="sy0">,</span> <span class="kw1">function</span> <span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; $scope.$json <span class="sy0">=</span> angular.<span class="me1">toJson</span><span class="br0">&#40;</span>$scope.<span class="me1">model</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; <span class="br0">&#125;</span><span class="sy0">,</span> <span class="kw2">true</span><span class="br0">&#41;</span><span class="sy0">;</span>
<span class="br0">&#125;</span><span class="br0">&#41;</span><span class="sy0">;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">var sampleApp = angular.module('sampleApp', []);

sampleApp.controller('SerializationController', function ($scope) {
    $scope.model = {
        textValue: "",
        integerValue: 0
    };

    // this calculated value won't show up in json
    $scope.model.getCalculatedInteger = function () {
        return $scope.model.integerValue + 5;
    };

    // this one will show up
    $scope.model.calculatedInteger = 0;
    $scope.$watch('model.getCalculatedInteger()', function(newVal, oldVal){
        $scope.model.calculatedInteger = $scope.model.getCalculatedInteger();
    });

    // json output when changes occur inside the model object
    $scope.$watch("model", function () {
        $scope.$json = angular.toJson($scope.model);
    }, true);
});</pre></div></div>

<p>The controller and form is based on ones I used in prior examples, but I found I had to make modifications to make the serialization happy. </p>
<p>The first issue was that it will not serialize $scope, so I had to move the properties I want to serialize to an object inside scope. This seems reasonable, as the top level is unlikely to be an object I have read or want to write over the wire. It&#8217;s likely to have one or more data models attached to it and a variety of front-end specific values, so this limitation shouldn&#8217;t have any real world impact.</p>
<p>The second issue I ran into is the calculation I was using was a function rather than a property, so it isn&#8217;t serialized. I worked around this by adding a watch for the function result and a field to store the result of the function, using the watch to update the field. This works fine for my overly simplistic &#8220;plus 5&#8221; function, but I don&#8217;t know how well it would scale to watching several functions with multiple variables and calls out to complex sub-calculations, conditional operations, etc.</p>
<h2>Knockout Serialization</h2>
<p>Knockout includes a built-in <a href="http://knockoutjs.com/documentation/json-data.html" title="Knockout: Loading and Saving JSON data">toJson</a> function, just like Angular. Since Knockout tracks data using observables, it first converts all observables into raw values before serializing, so computed observables (roughly parallel to functions in AngularJS) and observables for raw values both get serialized without any difference. </p>
<h3>Simple Knockout Serialization</h3>
<p>Full source available at <a href="https://github.com/tarwn/AngularJS-vs-Knockout/blob/master/Knockout/Serialization.html" title="View full example file on github">Knockout/Serialization.html</a>.</p>
<p>Like the AngularJS example, we&#8217;re serializing a child model with text, an integer, and a calculated value of the integer + 5.</p>
<div style="background-color: #eeeeee; padding: 1em;">
<strong><span class="MT_red">Warning:</span> </strong>I have only included a json computed property for illustration purposes so we can see what the output would be as we make changes. In the real world you would only generate the JSON when you needed it, not in an observable like this.
</div>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="javascript"><thead><tr><td colspan="2"  class="head">Javascript</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
</pre></td><td class="de1"><pre class="de1"><span class="kw1">var</span> SerializationModel <span class="sy0">=</span> <span class="kw1">function</span> <span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; <span class="kw1">this</span>.<span class="me1">model</span> <span class="sy0">=</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; textValue<span class="sy0">:</span> ko.<span class="me1">observable</span><span class="br0">&#40;</span><span class="st0">&quot;&quot;</span><span class="br0">&#41;</span><span class="sy0">,</span>
&nbsp; &nbsp; &nbsp; &nbsp; integerValue<span class="sy0">:</span> ko.<span class="me1">observable</span><span class="br0">&#40;</span><span class="nu0">0</span><span class="br0">&#41;</span>
&nbsp; &nbsp; <span class="br0">&#125;</span><span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; <span class="kw1">this</span>.<span class="me1">model</span>.<span class="me1">calculatedInteger</span> <span class="sy0">=</span> ko.<span class="me1">computed</span><span class="br0">&#40;</span><span class="kw1">function</span> <span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">return</span> parseInt<span class="br0">&#40;</span><span class="kw1">this</span>.<span class="me1">model</span>.<span class="me1">integerValue</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#41;</span> <span class="sy0">+</span> <span class="nu0">5</span><span class="sy0">;</span>
&nbsp; &nbsp; <span class="br0">&#125;</span><span class="sy0">,</span> <span class="kw1">this</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; <span class="kw1">this</span>.<span class="me1">json</span> <span class="sy0">=</span> ko.<span class="me1">computed</span><span class="br0">&#40;</span><span class="kw1">function</span> <span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">return</span> ko.<span class="me1">toJSON</span><span class="br0">&#40;</span><span class="kw1">this</span>.<span class="me1">model</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; <span class="br0">&#125;</span><span class="sy0">,</span> <span class="kw1">this</span><span class="br0">&#41;</span><span class="sy0">;</span>
<span class="br0">&#125;</span><span class="sy0">;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">var SerializationModel = function () {
    this.model = {
        textValue: ko.observable(""),
        integerValue: ko.observable(0)
    };

    this.model.calculatedInteger = ko.computed(function () {
        return parseInt(this.model.integerValue()) + 5;
    }, this);

    this.json = ko.computed(function () {
        return ko.toJSON(this.model);
    }, this);
};</pre></div></div>

<p>The Knockout example was shorter due to the built-in <a href="http://knockoutjs.com/documentation/computedObservables.html" title="Knockout: Computed Observables">computed observable</a>. There weren&#8217;t really any gotchas to this example.</p>
<h3>Knockout Serialization with Filtering</h3>
<p>Full source available at <a href="https://github.com/tarwn/AngularJS-vs-Knockout/blob/master/Knockout/SerializationWithFiltering.html" title="View full example file on github">Knockout/SerializationWithFiltering.html</a>.</p>
<p>Unlike Angular, Knockout&#8217;s toJson method accepts an argument that allows you to filter or transform values as they are serialized. The function accepts a key value pair. Returning the value causes it to be included in the output, while returning undefined causes it to be left out of the serialization.</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="javascript"><thead><tr><td colspan="2"  class="head">Javascript</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
</pre></td><td class="de1"><pre class="de1"><span class="kw1">var</span> SerializationModel <span class="sy0">=</span> <span class="kw1">function</span> <span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; <span class="kw1">this</span>.<span class="me1">textValue</span> <span class="sy0">=</span> ko.<span class="me1">observable</span><span class="br0">&#40;</span><span class="st0">&quot;&quot;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; <span class="kw1">this</span>.<span class="me1">integerValue</span> <span class="sy0">=</span> ko.<span class="me1">observable</span><span class="br0">&#40;</span><span class="nu0">0</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; <span class="kw1">this</span>.<span class="me1">soonToBeFake</span> <span class="sy0">=</span> ko.<span class="me1">observable</span><span class="br0">&#40;</span><span class="st0">&quot;I will never get transmitted&quot;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; <span class="kw1">this</span>.<span class="me1">calculatedInteger</span> <span class="sy0">=</span> ko.<span class="me1">computed</span><span class="br0">&#40;</span><span class="kw1">function</span> <span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">return</span> parseInt<span class="br0">&#40;</span><span class="kw1">this</span>.<span class="me1">integerValue</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#41;</span> <span class="sy0">+</span> <span class="nu0">5</span><span class="sy0">;</span>
&nbsp; &nbsp; <span class="br0">&#125;</span><span class="sy0">,</span> <span class="kw1">this</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; <span class="co1">// calculate json, but filter out json property while doing so</span>
&nbsp; &nbsp; <span class="kw1">this</span>.<span class="me1">json</span> <span class="sy0">=</span> ko.<span class="me1">computed</span><span class="br0">&#40;</span><span class="kw1">function</span> <span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">return</span> ko.<span class="me1">toJSON</span><span class="br0">&#40;</span><span class="kw1">this</span><span class="sy0">,</span> <span class="kw1">function</span> <span class="br0">&#40;</span>key<span class="sy0">,</span> value<span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">if</span> <span class="br0">&#40;</span>key <span class="sy0">==</span> <span class="st0">&quot;json&quot;</span><span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">return</span> <span class="kw2">undefined</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">else</span> <span class="kw1">if</span> <span class="br0">&#40;</span>key <span class="sy0">==</span> <span class="st0">&quot;soonToBeFake&quot;</span><span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">return</span> <span class="st0">&quot;xxxxxx masked xxxxxx&quot;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">else</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">return</span> value<span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span><span class="sy0">,</span> <span class="st0">&quot; &quot;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; <span class="br0">&#125;</span><span class="sy0">,</span> <span class="kw1">this</span><span class="br0">&#41;</span><span class="sy0">;</span>
<span class="br0">&#125;</span><span class="sy0">;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">var SerializationModel = function () {
    this.textValue = ko.observable("");
    this.integerValue = ko.observable(0);
    this.soonToBeFake = ko.observable("I will never get transmitted");

    this.calculatedInteger = ko.computed(function () {
        return parseInt(this.integerValue()) + 5;
    }, this);

    // calculate json, but filter out json property while doing so
    this.json = ko.computed(function () {
        return ko.toJSON(this, function (key, value) {
            if (key == "json")
                return undefined;
            else if (key == "soonToBeFake")
                return "xxxxxx masked xxxxxx";
            else
                return value;
        }, " ");
    }, this);
};</pre></div></div>

<p>In this case I am serializing the top level viewmodel instead of sub-object. I am filtering out the &#8220;json&#8221; property and masking the content of the &#8220;soonToBeFake&#8221; property.</p>
<h2>Some Difference</h2>
<p>There&#8217;s not much to this one, but we did see a couple differences.</p>
<p><b>Computeds/Functions</b></p>
<p>Knockout computed values are automatically included in the serialization, while AngularJS requires extra steps of setting up a $watch and populating a field. </p>
<p>Unfortunately, AngularJS&#8217;s watches are updated far more frequently then knockout&#8217;s computeds and run the risk of causing infinite loops (or actually a maximum iteration error). At least <a href="http://www.benlesh.com/2013/08/angularjs-watch-digest-and-apply-oh-my.html">one post</a> I&#8217;ve read also suggest strongly not to use watches in controllers (lots of good stuff on Ben&#8217;s blog). </p>
<p>Note: Knockout has a section on <a href="http://knockoutjs.com/documentation/computedObservables.html#note_why_circular_dependencies_arent_meaningful" title="knockout - observables - circular dependencies">Circular Dependencies</a> that explains how computed observables avoid the infinite loop issue.</p>
<p><b>!Computed/Functions <span class="MT_orange">(Updated)</span></b></p>
<p>Phillip brought up a good point below. I&#8217;m reviewing these with some capabilities in mind, but also some ideas about projects I&#8217;m planning to use them in. I want my computed values to get sent over the wire, but he&#8217;s absolutely right that many projects do not.</p>
<p>In this case, Angular ignoring functions is a plus. There&#8217;s no extra work required to communicate only your model properties over the wire. With knockout, you would need to separate the model properties from the computed ones as two objects (a backing model + one with computeds wrapped around it), add a sub-object to hold your computeds and filter it out of serialization, use a naming convention that you can easily filter out, or assign them all as additional functions on the observable properties (thus accessible for binding, but ignored when evaluating the value of the observable). And someone will probably add some more options that I didn&#8217;t think of below.</p>
<p><b>Filtering and Masking</b></p>
<p>AngularJS automatically filters out anything starting with $, which is nice and requires no extra work. Knockout, on the other hand, doesn&#8217;t automatically filter anything out but does provide the ability to define your own filter and masking routine. </p>
<h2>Final Thoughts <span class="MT_orange">(Updated)</span></h2>
<p>Overall these were both fairly straight-forward. I feel the Knockout method was easier (and safer) to use <em>for the projects I had in mind</em>, since it has a mechanism to treat computed values the same as regular observables. I appreciate the ease of use of the Angular toJson function, but feel a little dirty using their internal variable naming pattern just to ignore values in serialization, especially when knockout (for a couple more lines of code) could duplicate this (<a href="https://github.com/tarwn/AngularJS-vs-Knockout/blob/master/Knockout/SerializationWithSpecialCharacterFiltering.html" title="Knockout example">sample on github</a> for any special character I wanted to use.</p>
<p>On the other hand, if you only want your raw model properties communicated to the server, then Angular&#8217;s going to be cleaner because you now have to add the extra logic to Knockout to suppress or separate the computed values from your model.</p>
<div style="background-color: #DDDDDD; padding: 8px; width: 400px;">
<h3>Knockout vs AngularJS</h3>
<ul style="margin: 0px; padding: 4px;">
<li><a href="/index.php/WebDev/UIDevelopment/angularjs-vs-knockout-introduction-1">Introductory Post</a></li>
<li><a href="/index.php/WebDev/UIDevelopment/angularjs-vs-knockout-data-binding-2">Data Binding</a></li>
<li><a href="/index.php/WebDev/UIDevelopment/angularjs-vs-knockout-validation-3">Validation</a></li>
<li><b>Serialization</b></li>
<li><a href="/index.php/WebDev/UIDevelopment/angularjs-vs-knockout-templating-5">Templating</a></li>
<li><a href="/index.php/WebDev/UIDevelopment/angularjs-vs-knockout-modules-and-di-6">Modules + Dependency Injection</a></li>
<li><a href="/index.php/WebDev/UIDevelopment/angularjs-vs-knockout-automated-testing-7">Automated Testing</a></li>
<li><a href="/index.php/WebDev/UIDevelopment/AJAX/angularjs-vs-knockout-spa-routing-history-8">SPA Routing/History</a></li>
<li><a href="/index.php/WebDev/UIDevelopment/angularjs-vs-knockout-final-thoughts-9">Final, Final Thoughts</a></li>
</ul>
</div>
]]></content:encoded>
			<wfw:commentRss>/index.php/webdev/uidevelopment/angularjs-vs-knockout-serialization-4/feed/</wfw:commentRss>
		<slash:comments>9</slash:comments>
		</item>
		<item>
		<title>AngularJS vs Knockout &#8211; Validation (3 of 8)</title>
		<link>/index.php/webdev/uidevelopment/angularjs-vs-knockout-validation-3/</link>
		<comments>/index.php/webdev/uidevelopment/angularjs-vs-knockout-validation-3/#comments</comments>
		<pubDate>Wed, 09 Oct 2013 12:38:00 +0000</pubDate>
		<dc:creator><![CDATA[Eli Weinstock-Herman (tarwn)]]></dc:creator>
				<category><![CDATA[Javascript]]></category>
		<category><![CDATA[UI Development]]></category>
		<category><![CDATA[angularjs]]></category>
		<category><![CDATA[knockout]]></category>
		<category><![CDATA[validation]]></category>

		<guid isPermaLink="false">/index.php/2013/10/angularjs-vs-knockout-validation-3/</guid>
		<description><![CDATA[I'm reviewing Angular and Knockout to determine which would fit better for a variety of upcoming projects. So here's the question, how hard is it going to be to add good, client-side validation to my pages? What about custom validation?]]></description>
				<content:encoded><![CDATA[<p>I&#8217;m reviewing Angular and Knockout to determine which would fit better for a variety of upcoming projects. So here&#8217;s the question, how hard is it going to be to add good, client-side validation to my pages? What about custom validation?</p>
<div style="background-color: #eeeeee; padding: 1em;">
This is the third of eight posts looking at the capabilities of knockout and Angular. In the <a href="/index.php/WebDev/UIDevelopment/angularjs-vs-knockout-introduction-1" title="AngularJS vs Knockout - Introduction">introduction post</a>, I outlined the capabilities that I am evaluating for. In the <a href="/index.php/WebDev/UIDevelopment/angularjs-vs-knockout-data-binding" title="AngularJS vs Knockout - Data Binding">second post</a>, I looked at databinding. This post is exploring simple and custom validation in with AngularJS and Knockout.
</div>
<p>All of the examples presented throughout the series are available in the <a href="https://github.com/tarwn/AngularJS-vs-Knockout/" title="View all of the post examples on github">tarwn/AngularJS-vs-Knockout</a> repository on github.</p>
<h2>Simple Angular Validation</h2>
<p>Angular.js provides validation baked in. Using attributes such as <code class="codespan">required</code>, <code class="codespan">min</code>, and <code class="codespan">max</code>, we can define the validation on an input and the controller for the input will reflect the validation state and add respective CSS classes to the element.</p>
<p>Values are evaluated as the new value is entered. The value bound to the ng-model attribute will reflect the value when the input is is valid and <i>undefine</i> when the input is invalid. Unfortunately this means that when an invalid value is entered, the <i>undefined</i> propagates through any computed values or additional bound fields that rely on that bound property.</p>
<h3>AngularJS Simple Validation Example</h3>
<p>Full source available at <a href="https://github.com/tarwn/AngularJS-vs-Knockout/blob/master/Angular/SimpleValidation.html" title="View full example file on github">Angular/SimpleValidation.html</a>.</p>
<p>The built-in validation in AngularJS uses the HTML5 validation attributes. In this case, we have a basic backing Controller with a text property <code class="codespan">textValue</code>, a numeric property <code class="codespan">integerValue</code>, and a function that adds 5 to the numeric property <code class="codespan">getCalculatedInteger()</code>, and we&#8217;re binding to those properties with the relevant validation requirements:</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="html4strict"><thead><tr><td colspan="2"  class="head">HTML</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
</pre></td><td class="de1"><pre class="de1"><span class="sc0">&lt;!DOCTYPE html&gt;</span>
<span class="sc2">&lt;<span class="kw2">html</span> ng-app<span class="sy0">=</span><span class="st0">&quot;sampleApp&quot;</span>&gt;</span>
<span class="sc2">&lt;<span class="kw2">head</span>&gt;</span>
&nbsp; &nbsp; <span class="sc-1">&lt;!-- ... --&gt;</span> &nbsp;
&nbsp; &nbsp; <span class="sc2">&lt;<span class="kw2">script</span> <span class="kw3">type</span><span class="sy0">=</span><span class="st0">&quot;text/javascript&quot;</span> <span class="kw3">src</span><span class="sy0">=</span><span class="st0">&quot;js/lib/angular-1.0.8.min.js&quot;</span>&gt;&lt;<span class="sy0">/</span><span class="kw2">script</span>&gt;</span>
&nbsp; &nbsp; <span class="sc-1">&lt;!-- ... css classes and such ... --&gt;</span>
<span class="sc2">&lt;<span class="sy0">/</span><span class="kw2">head</span>&gt;</span>
<span class="sc2">&lt;<span class="kw2">body</span>&gt;</span>
<span class="sc2">&lt;<span class="kw2">div</span> ng-controller<span class="sy0">=</span><span class="st0">&quot;SimpleValidationController&quot;</span>&gt;</span>
&nbsp; &nbsp; <span class="sc2">&lt;<span class="kw2">form</span> <span class="kw3">name</span><span class="sy0">=</span><span class="st0">&quot;appForm&quot;</span> novalidate&gt;</span>
&nbsp; &nbsp; &nbsp; &nbsp; Required Text: <span class="sc2">&lt;<span class="kw2">input</span> <span class="kw3">type</span><span class="sy0">=</span><span class="st0">&quot;text&quot;</span> <span class="kw3">name</span><span class="sy0">=</span><span class="st0">&quot;textValueInput&quot;</span> ng-model<span class="sy0">=</span><span class="st0">&quot;textValue&quot;</span> required <span class="sy0">/</span>&gt;&lt;<span class="kw2">br</span> <span class="sy0">/</span>&gt;</span>
&nbsp; &nbsp; &nbsp; &nbsp; Required Int: <span class="sc2">&lt;<span class="kw2">input</span> <span class="kw3">type</span><span class="sy0">=</span><span class="st0">&quot;number&quot;</span> ng-model<span class="sy0">=</span><span class="st0">&quot;integerValue&quot;</span> min<span class="sy0">=</span><span class="st0">&quot;0&quot;</span> max<span class="sy0">=</span><span class="st0">&quot;5&quot;</span> ng-pattern<span class="sy0">=</span><span class="st0">&quot;/^-?d+$/&quot;</span> required <span class="sy0">/</span>&gt;&lt;<span class="kw2">br</span> <span class="sy0">/</span>&gt;</span>
&nbsp; &nbsp; &nbsp; &nbsp; Required Int + 5: {{ getCalculatedInteger() }}<span class="sc2">&lt;<span class="kw2">br</span> <span class="sy0">/</span>&gt;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="sc2">&lt;<span class="kw2">input</span> <span class="kw3">type</span><span class="sy0">=</span><span class="st0">&quot;submit&quot;</span> <span class="kw3">value</span><span class="sy0">=</span><span class="st0">&quot;Save&quot;</span> <span class="sy0">/</span>&gt;</span>
&nbsp; &nbsp; <span class="sc2">&lt;<span class="sy0">/</span><span class="kw2">form</span>&gt;</span>
&nbsp; &nbsp;<span class="sc-1">&lt;!-- ... --&gt;</span>
<span class="sc2">&lt;<span class="sy0">/</span><span class="kw2">div</span>&gt;</span>
<span class="sc-1">&lt;!-- ... --&gt;</span> &nbsp;</pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">&lt;!DOCTYPE html&gt;
&lt;html ng-app="sampleApp"&gt;
&lt;head&gt;
    &lt;!-- ... --&gt;  
    &lt;script type="text/javascript" src="js/lib/angular-1.0.8.min.js"&gt;&lt;/script&gt;
    &lt;!-- ... css classes and such ... --&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;div ng-controller="SimpleValidationController"&gt;
    &lt;form name="appForm" novalidate&gt;
        Required Text: &lt;input type="text" name="textValueInput" ng-model="textValue" required /&gt;&lt;br /&gt;
        Required Int: &lt;input type="number" ng-model="integerValue" min="0" max="5" ng-pattern="/^-?d+$/" required /&gt;&lt;br /&gt;
        Required Int + 5: {{ getCalculatedInteger() }}&lt;br /&gt;
        &lt;input type="submit" value="Save" /&gt;
    &lt;/form&gt;
   &lt;!-- ... --&gt;
&lt;/div&gt;
&lt;!-- ... --&gt;  </pre></div></div>

<p>In the integer input, I&#8217;ve used the required attribute to indicate the value is required, the min and max attributes to define a valid range for the value, and a pattern to ensure the value is an integer. Behind the scenes, Angular sets additional properties on the form and input elements to define their validity.</p>
<p>In the full sample code above, I have included CSS styles and output the validation properties in a pre-formatted section so I can see what&#8217;s going on behind the scenes:</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="html4strict"><thead><tr><td colspan="2"  class="head">HTML</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
</pre></td><td class="de1"><pre class="de1"><span class="sc2">&lt;<span class="kw2">pre</span>&gt;</span>
textValue: 
&nbsp; &nbsp; value=&quot;{{ textValue }}&quot; &nbsp; &nbsp;
&nbsp; &nbsp; value is null: {{ textValue == null }}
&nbsp; &nbsp; valid={{ appForm.textValueInput.$valid }}
&nbsp; &nbsp; error={{ appForm.textValueInput.$error }}
&nbsp;
integerValue: 
&nbsp; &nbsp; value=&quot;{{ integerValue }}&quot;
&nbsp; &nbsp; value is null: {{ integerValue == null }}
&nbsp; &nbsp; valid={{ appForm.integerValueInput.$valid }}
&nbsp; &nbsp; error={{ appForm.integerValueInput.$error }}
&nbsp;
appForm: 
&nbsp; &nbsp; valid=&quot;{{ appForm.$valid }}&quot;
&nbsp; &nbsp; error={{ appForm.$error }}
&nbsp; &nbsp; required={{ appForm.$error.required }}
<span class="sc2">&lt;<span class="sy0">/</span><span class="kw2">pre</span>&gt;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">&lt;pre&gt;
textValue: 
    value="{{ textValue }}"    
    value is null: {{ textValue == null }}
    valid={{ appForm.textValueInput.$valid }}
    error={{ appForm.textValueInput.$error }}

integerValue: 
    value="{{ integerValue }}"
    value is null: {{ integerValue == null }}
    valid={{ appForm.integerValueInput.$valid }}
    error={{ appForm.integerValueInput.$error }}

appForm: 
    valid="{{ appForm.$valid }}"
    error={{ appForm.$error }}
    required={{ appForm.$error.required }}
&lt;/pre&gt;</pre></div></div>

<h2>More Complex AngularJS Validation</h2>
<p>The built-in attributes cover a wide range of needs, but there are also cases where I need a field to validate it&#8217;s value against a prior one on the form. AngularJS does not have a pre-built directive for this, but we can build a custom one and use the <a href="http://docs.angularjs.org/guide/directive" title="AngularJS: Directive">Linking Method</a> in the Directive. One of the arguments supplied is the controller for the element. Using this, we can add methods to to the input pipeline ($parsers) and to the pipeline when values are set directly ($formatters), then set the validity on the controller from those methods.</p>
<h3>AngularJS Custom Validation Example</h3>
<p>Full source available at <a href="https://github.com/tarwn/AngularJS-vs-Knockout/blob/master/Angular/ComplexValidation.html" title="View full example file on github">Angular/ComplexValidation.html</a>.</p>
<p>For the purposes of this example, we&#8217;ll have a controller with two integer properties, <code class="codespan">ceilingValue</code> and <code class="codespan">integerValue</code>. Rather than use a hardcoded max value for the input responsible for integerValue, I&#8217;m going to define a custom directive to use the value of the first input as the ceiling. </p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="html4strict"><thead><tr><td colspan="2"  class="head">HTML</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
</pre></td><td class="de1"><pre class="de1"><span class="sc-1">&lt;!-- ... ---&gt;</span>
&nbsp; &nbsp; &nbsp; &nbsp; Ceiling Input: <span class="sc2">&lt;<span class="kw2">input</span> <span class="kw3">type</span><span class="sy0">=</span><span class="st0">&quot;number&quot;</span> <span class="kw3">name</span><span class="sy0">=</span><span class="st0">&quot;ceilingValueInput&quot;</span> ng-model<span class="sy0">=</span><span class="st0">&quot;ceilingValue&quot;</span> required <span class="sy0">/</span>&gt;&lt;<span class="kw2">br</span> <span class="sy0">/</span>&gt;</span>
&nbsp; &nbsp; &nbsp; &nbsp; Integer Input: <span class="sc2">&lt;<span class="kw2">input</span> <span class="kw3">type</span><span class="sy0">=</span><span class="st0">&quot;number&quot;</span> <span class="kw3">name</span><span class="sy0">=</span><span class="st0">&quot;integerValueInput&quot;</span> ng-model<span class="sy0">=</span><span class="st0">&quot;integerValue&quot;</span> ng-pattern<span class="sy0">=</span><span class="st0">&quot;/^-?d+$/&quot;</span> ceiling-validate<span class="sy0">=</span><span class="st0">&quot;{{ ceilingValue }}&quot;</span> required <span class="sy0">/</span>&gt;&lt;<span class="kw2">br</span> <span class="sy0">/</span>&gt;</span>
<span class="sc-1">&lt;!-- ... --&gt;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">&lt;!-- ... ---&gt;
        Ceiling Input: &lt;input type="number" name="ceilingValueInput" ng-model="ceilingValue" required /&gt;&lt;br /&gt;
        Integer Input: &lt;input type="number" name="integerValueInput" ng-model="integerValue" ng-pattern="/^-?d+$/" ceiling-validate="{{ ceilingValue }}" required /&gt;&lt;br /&gt;
&lt;!-- ... --&gt;</pre></div></div>

<p>The <code class="codespan">ceilingValidate</code> directive then defines the behavior for the new attribute:</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="javascript"><thead><tr><td colspan="2"  class="head">Javascript</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
</pre></td><td class="de1"><pre class="de1">sampleApp.<span class="me1">directive</span><span class="br0">&#40;</span><span class="st0">'ceilingValidate'</span><span class="sy0">,</span> <span class="kw1">function</span> <span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; <span class="kw1">return</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="co1">// can only be used as an attribute</span>
&nbsp; &nbsp; &nbsp; &nbsp; restrict<span class="sy0">:</span> <span class="st0">'A'</span><span class="sy0">,</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="co1">// must also have an ngModel attribute defined</span>
&nbsp; &nbsp; &nbsp; &nbsp; require<span class="sy0">:</span> <span class="st0">'ngModel'</span><span class="sy0">,</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="co1">// explicitly create one-way binding to attribute value so we can watch it</span>
&nbsp; &nbsp; &nbsp; &nbsp; scope<span class="sy0">:</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ceilingValidate<span class="sy0">:</span> <span class="st0">&quot;@&quot;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span><span class="sy0">,</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="co1">// and define the logic for the link</span>
&nbsp; &nbsp; &nbsp; &nbsp; link<span class="sy0">:</span> <span class="kw1">function</span> <span class="br0">&#40;</span>scope<span class="sy0">,</span> instanceElement<span class="sy0">,</span> instanceAttributes<span class="sy0">,</span> controller<span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="co1">// per http://www.benlesh.com/2012/12/angular-js-custom-validation-via.html</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="co1">// let's add a parser (html input -&gt; model) and a formatter (model -&gt; html input)</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="co1">// when the value in the ceiling changes, re-evaluate validity</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; scope.$watch<span class="br0">&#40;</span><span class="st0">'ceilingValidate'</span><span class="sy0">,</span> <span class="kw1">function</span> <span class="br0">&#40;</span>newValue<span class="sy0">,</span> oldValue<span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">if</span> <span class="br0">&#40;</span>newValue <span class="sy0">!==</span> <span class="kw2">undefined</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">var</span> valid <span class="sy0">=</span> <span class="br0">&#40;</span>parseInt<span class="br0">&#40;</span>controller.$modelValue<span class="br0">&#41;</span> <span class="sy0">&lt;=</span> parseInt<span class="br0">&#40;</span>newValue<span class="br0">&#41;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; controller.$setValidity<span class="br0">&#40;</span><span class="st0">'ceilingValidate'</span><span class="sy0">,</span> valid<span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span><span class="sy0">,</span> <span class="kw2">true</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="co1">// when a new value comes in, evaluate validity</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; controller.$parsers.<span class="me1">unshift</span><span class="br0">&#40;</span><span class="kw1">function</span> <span class="br0">&#40;</span>value<span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">var</span> valid <span class="sy0">=</span> <span class="br0">&#40;</span>parseInt<span class="br0">&#40;</span>value<span class="br0">&#41;</span> <span class="sy0">&lt;=</span> parseInt<span class="br0">&#40;</span>instanceAttributes.<span class="me1">ceilingValidate</span><span class="br0">&#41;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; controller.$setValidity<span class="br0">&#40;</span><span class="st0">'ceilingValidate'</span><span class="sy0">,</span> valid<span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">return</span> valid <span class="sy0">?</span> value <span class="sy0">:</span> <span class="kw2">undefined</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="co1">// when a value is set from the mode, evaluate validity</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; controller.$formatters.<span class="me1">unshift</span><span class="br0">&#40;</span><span class="kw1">function</span> <span class="br0">&#40;</span>value<span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">if</span> <span class="br0">&#40;</span>instanceAttributes.<span class="me1">ceilingValidate</span> <span class="sy0">!==</span> <span class="kw2">undefined</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">var</span> valid <span class="sy0">=</span> <span class="br0">&#40;</span>parseInt<span class="br0">&#40;</span>value<span class="br0">&#41;</span> <span class="sy0">&lt;=</span> parseInt<span class="br0">&#40;</span>instanceAttributes.<span class="me1">ceilingValidate</span><span class="br0">&#41;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; controller.$setValidity<span class="br0">&#40;</span><span class="st0">'ceilingValidate'</span><span class="sy0">,</span> valid<span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">else</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">return</span> value<span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp; &nbsp; <span class="br0">&#125;</span><span class="sy0">;</span>
<span class="br0">&#125;</span><span class="br0">&#41;</span><span class="sy0">;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">sampleApp.directive('ceilingValidate', function () {
    return {
        // can only be used as an attribute
        restrict: 'A',
        // must also have an ngModel attribute defined
        require: 'ngModel',
        // explicitly create one-way binding to attribute value so we can watch it
        scope: {
            ceilingValidate: "@"
        },
        // and define the logic for the link
        link: function (scope, instanceElement, instanceAttributes, controller) {
            // per http://www.benlesh.com/2012/12/angular-js-custom-validation-via.html
            // let's add a parser (html input -&gt; model) and a formatter (model -&gt; html input)

            // when the value in the ceiling changes, re-evaluate validity
            scope.$watch('ceilingValidate', function (newValue, oldValue) {
                if (newValue !== undefined) {
                    var valid = (parseInt(controller.$modelValue) &lt;= parseInt(newValue));
                    controller.$setValidity('ceilingValidate', valid);
                }
            }, true);

            // when a new value comes in, evaluate validity
            controller.$parsers.unshift(function (value) {
                var valid = (parseInt(value) &lt;= parseInt(instanceAttributes.ceilingValidate));
                controller.$setValidity('ceilingValidate', valid);
                return valid ? value : undefined;
            });

            // when a value is set from the mode, evaluate validity
            controller.$formatters.unshift(function (value) {
                if (instanceAttributes.ceilingValidate !== undefined) {
                    var valid = (parseInt(value) &lt;= parseInt(instanceAttributes.ceilingValidate));
                    controller.$setValidity('ceilingValidate', valid);
                }
                else {
                        
                }
                return value;
            });

        }
    };
});</pre></div></div>

<p>The comments tell the story. I&#8217;ve limited this directive to be used as an attribute and only on an element that has an ng-model defined. The value of the ceiling-validate attribute will be available in the local scope as a read-only attribute. The linking function initializes the behavior for the element, adding validity checks to the $parsers and $formatters pipelines.</p>
<p>When I enter a ceiling and then an integer, the integer is validated against that ceiling. When I modify the ceiling value, the integer value is re-validated against that new ceiling value.</p>
<h2>Simple Knockout Validation</h2>
<p>Knockout does not have validation cooked in the way Angular does, but the <a href="https://github.com/Knockout-Contrib/Knockout-Validation">Knockout Validation</a> project on github provides a comparable set of features (and it was the first google search result for &#8216;knockout validation&#8217;). The library provides two options for defining validation, either as &#8220;extends&#8221; calls directly in on the observable properties on models/viewmodels or as HTML5 attributes.</p>
<h3>Knockout Simple Validation Example</h3>
<p>Full source available at <a href="https://github.com/tarwn/AngularJS-vs-Knockout/blob/master/Knockout/SimpleValidation.html" title="View full example file on github">Knockout/SimpleValidation.html</a>.</p>
<p>To compare with the Angular method, I&#8217;ll be configuring the validation library to work like the method above. I&#8217;ll be using HTML5 attributes to define the validation and include the same text and integer values for sample fields.</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="html4strict"><thead><tr><td colspan="2"  class="head">HTML</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
</pre></td><td class="de1"><pre class="de1"><span class="sc0">&lt;!DOCTYPE html&gt;</span>
<span class="sc2">&lt;<span class="kw2">html</span>&gt;</span>
<span class="sc2">&lt;<span class="kw2">head</span>&gt;</span>
&nbsp; &nbsp; <span class="sc-1">&lt;!-- ... --&gt;</span>
&nbsp; &nbsp; <span class="sc2">&lt;<span class="kw2">script</span> <span class="kw3">type</span><span class="sy0">=</span><span class="st0">&quot;text/javascript&quot;</span> <span class="kw3">src</span><span class="sy0">=</span><span class="st0">&quot;js/lib/knockout-2.3.0.min.js&quot;</span>&gt;&lt;<span class="sy0">/</span><span class="kw2">script</span>&gt;</span>
&nbsp; &nbsp; <span class="sc2">&lt;<span class="kw2">script</span> <span class="kw3">type</span><span class="sy0">=</span><span class="st0">&quot;text/javascript&quot;</span> <span class="kw3">src</span><span class="sy0">=</span><span class="st0">&quot;js/lib/knockout.validation.min.js&quot;</span>&gt;&lt;<span class="sy0">/</span><span class="kw2">script</span>&gt;</span>
&nbsp; &nbsp; <span class="sc-1">&lt;!-- ... css classes and such ... --&gt;</span>
<span class="sc2">&lt;<span class="sy0">/</span><span class="kw2">head</span>&gt;</span>
<span class="sc2">&lt;<span class="kw2">body</span>&gt;</span>
<span class="sc2">&lt;<span class="kw2">div</span>&gt;</span>
&nbsp; &nbsp; <span class="sc2">&lt;<span class="kw2">form</span> novalidate data-bind<span class="sy0">=</span><span class="st0">&quot;css: { invalid: isValid() == false }&quot;</span>&gt;</span>
&nbsp; &nbsp; &nbsp; &nbsp; Required Text: <span class="sc2">&lt;<span class="kw2">input</span> <span class="kw3">type</span><span class="sy0">=</span><span class="st0">&quot;text&quot;</span> data-bind<span class="sy0">=</span><span class="st0">&quot;value: textValue&quot;</span> required <span class="sy0">/</span>&gt;&lt;<span class="kw2">br</span> <span class="sy0">/</span>&gt;</span>
&nbsp; &nbsp; &nbsp; &nbsp; Required Int: <span class="sc2">&lt;<span class="kw2">input</span> <span class="kw3">type</span><span class="sy0">=</span><span class="st0">&quot;number&quot;</span> data-bind<span class="sy0">=</span><span class="st0">&quot;value: integerValue&quot;</span> min<span class="sy0">=</span><span class="st0">&quot;0&quot;</span> max<span class="sy0">=</span><span class="st0">&quot;5&quot;</span> pattern<span class="sy0">=</span><span class="st0">&quot;^-?d+$&quot;</span> required <span class="sy0">/</span>&gt;&lt;<span class="kw2">br</span> <span class="sy0">/</span>&gt;</span>
&nbsp; &nbsp; &nbsp; &nbsp; Required Int + 5: <span class="sc2">&lt;<span class="kw2">span</span> data-bind<span class="sy0">=</span><span class="st0">&quot;text: calculatedInteger&quot;</span>&gt;&lt;<span class="sy0">/</span><span class="kw2">span</span>&gt;&lt;<span class="kw2">br</span> <span class="sy0">/</span>&gt;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="sc2">&lt;<span class="kw2">input</span> <span class="kw3">type</span><span class="sy0">=</span><span class="st0">&quot;submit&quot;</span> <span class="kw3">value</span><span class="sy0">=</span><span class="st0">&quot;Save&quot;</span> <span class="sy0">/</span>&gt;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="sc-1">&lt;!-- ... --&gt;</span>
&nbsp; &nbsp; <span class="sc2">&lt;<span class="sy0">/</span><span class="kw2">form</span>&gt;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">&lt;!DOCTYPE html&gt;
&lt;html&gt;
&lt;head&gt;
    &lt;!-- ... --&gt;
    &lt;script type="text/javascript" src="js/lib/knockout-2.3.0.min.js"&gt;&lt;/script&gt;
    &lt;script type="text/javascript" src="js/lib/knockout.validation.min.js"&gt;&lt;/script&gt;
    &lt;!-- ... css classes and such ... --&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;div&gt;
    &lt;form novalidate data-bind="css: { invalid: isValid() == false }"&gt;
        Required Text: &lt;input type="text" data-bind="value: textValue" required /&gt;&lt;br /&gt;
        Required Int: &lt;input type="number" data-bind="value: integerValue" min="0" max="5" pattern="^-?d+$" required /&gt;&lt;br /&gt;
        Required Int + 5: &lt;span data-bind="text: calculatedInteger"&gt;&lt;/span&gt;&lt;br /&gt;
        &lt;input type="submit" value="Save" /&gt;
        &lt;!-- ... --&gt;
    &lt;/form&gt;</pre></div></div>

<p>Using this extra library added an additional 19KB of minified JS to the 42KB we already have for knockout, which still comes in under the 80KB for Angular, but does not include a DOM manipulation library yet either (like <a href="http://zeptojs.com/">zepto</a> or <a href="http://jquery.com/">jQuery</a>). With the exception of updating after the full value is updated vs on on key down, this knockout version works just like the AngularJS example at the top.</p>
<p>Like the AngularJS version, I included a pre section to output validation states:</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="html4strict"><thead><tr><td colspan="2"  class="head">HTML</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
</pre></td><td class="de1"><pre class="de1"><span class="sc2">&lt;<span class="kw2">pre</span>&gt;</span>
textValue:
&nbsp; &nbsp; value=&quot;<span class="sc2">&lt;<span class="kw2">span</span> data-bind<span class="sy0">=</span><span class="st0">&quot;text: textValue&quot;</span>&gt;&lt;<span class="sy0">/</span><span class="kw2">span</span>&gt;</span>&quot; &nbsp; &nbsp;
&nbsp; &nbsp; valid=<span class="sc2">&lt;<span class="kw2">span</span> data-bind<span class="sy0">=</span><span class="st0">&quot;text: textValue.__valid__&quot;</span>&gt;&lt;<span class="sy0">/</span><span class="kw2">span</span>&gt;</span>
&nbsp; &nbsp; error=<span class="sc2">&lt;<span class="kw2">span</span> data-bind<span class="sy0">=</span><span class="st0">&quot;validationMessage: textValue&quot;</span>&gt;&lt;<span class="sy0">/</span><span class="kw2">span</span>&gt;</span>
&nbsp; &nbsp; or=<span class="sc2">&lt;<span class="kw2">span</span> data-bind<span class="sy0">=</span><span class="st0">&quot;text: textValue.error&quot;</span>&gt;&lt;<span class="sy0">/</span><span class="kw2">span</span>&gt;</span>
&nbsp;
integerValue: 
&nbsp; &nbsp; value=&quot;<span class="sc2">&lt;<span class="kw2">span</span> data-bind<span class="sy0">=</span><span class="st0">&quot;text: integerValue&quot;</span>&gt;&lt;<span class="sy0">/</span><span class="kw2">span</span>&gt;</span>&quot;
&nbsp; &nbsp; valid=<span class="sc2">&lt;<span class="kw2">span</span> data-bind<span class="sy0">=</span><span class="st0">&quot;text: integerValue.__valid__&quot;</span>&gt;&lt;<span class="sy0">/</span><span class="kw2">span</span>&gt;</span>
&nbsp; &nbsp; error=<span class="sc2">&lt;<span class="kw2">span</span> data-bind<span class="sy0">=</span><span class="st0">&quot;validationMessage: integerValue&quot;</span>&gt;&lt;<span class="sy0">/</span><span class="kw2">span</span>&gt;</span>
&nbsp;
appForm: 
&nbsp; &nbsp; valid=&quot;<span class="sc2">&lt;<span class="kw2">span</span> data-bind<span class="sy0">=</span><span class="st0">&quot;text: isValid()&quot;</span>&gt;&lt;<span class="sy0">/</span><span class="kw2">span</span>&gt;</span>&quot;
&nbsp; &nbsp; error= <span class="sc2">&lt;<span class="kw2">i</span>&gt;</span>no collection at form level<span class="sc2">&lt;<span class="sy0">/</span><span class="kw2">i</span>&gt;</span>
<span class="sc2">&lt;<span class="sy0">/</span><span class="kw2">pre</span>&gt;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">&lt;pre&gt;
textValue:
    value="&lt;span data-bind="text: textValue"&gt;&lt;/span&gt;"    
    valid=&lt;span data-bind="text: textValue.__valid__"&gt;&lt;/span&gt;
    error=&lt;span data-bind="validationMessage: textValue"&gt;&lt;/span&gt;
    or=&lt;span data-bind="text: textValue.error"&gt;&lt;/span&gt;

integerValue: 
    value="&lt;span data-bind="text: integerValue"&gt;&lt;/span&gt;"
    valid=&lt;span data-bind="text: integerValue.__valid__"&gt;&lt;/span&gt;
    error=&lt;span data-bind="validationMessage: integerValue"&gt;&lt;/span&gt;

appForm: 
    valid="&lt;span data-bind="text: isValid()"&gt;&lt;/span&gt;"
    error= &lt;i&gt;no collection at form level&lt;/i&gt;
&lt;/pre&gt;</pre></div></div>

<p>Rather than attach the validation state to the form elements, the knockout validation library attaches them as properties on the observable that is being validated, then provides a binding you can use to get a friendly message.</p>
<p>Using the <a href="https://github.com/Knockout-Contrib/Knockout-Validation/wiki/Configuration" title="Configurations for knockout validation">configurations</a>, I have made this work pretty closely to AngularJS above. There are additional configurations that include outputting error message elements, fine tuning the CSS classes, and even provide the name of a template to use for rendering error messages. </p>
<h2>Custom Knockout Validation</h2>
<p>Like the AngularJS example, I want to explore outside of the box I was provided and define my own validation. </p>
<p>The knockout-validation library includes the ability to define custom validation methods, though I don&#8217;t see an easy way to use the HTML attributes for custom rules. Like the custom validation example above, I am going to define a ceiling validation call that uses another observable. It will not only need to validate when I change the target input but also re-validate the target input when I change the ceiling input.</p>
<h3>Knockout Custom Validation Example</h3>
<p>Full source available at <a href="https://github.com/tarwn/AngularJS-vs-Knockout/blob/master/Knockout /ComplexValidation.html" title="View full example file on github">Knockout /ComplexValidation.html</a>.</p>
<p>Nothing changes for the HTML:</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="html4strict"><thead><tr><td colspan="2"  class="head">HTML</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
</pre></td><td class="de1"><pre class="de1"><span class="sc-1">&lt;!-- ... --&gt;</span>
Ceiling Input: <span class="sc2">&lt;<span class="kw2">input</span> <span class="kw3">type</span><span class="sy0">=</span><span class="st0">&quot;number&quot;</span> data-bind<span class="sy0">=</span><span class="st0">&quot;value: ceilingValue&quot;</span> required <span class="sy0">/</span>&gt;&lt;<span class="kw2">br</span> <span class="sy0">/</span>&gt;</span>
Integer Input: <span class="sc2">&lt;<span class="kw2">input</span> <span class="kw3">type</span><span class="sy0">=</span><span class="st0">&quot;number&quot;</span> data-bind<span class="sy0">=</span><span class="st0">&quot;value: integerValue&quot;</span> pattern<span class="sy0">=</span><span class="st0">&quot;^-?d+$&quot;</span> required <span class="sy0">/</span>&gt;&lt;<span class="kw2">br</span> <span class="sy0">/</span>&gt;</span>
<span class="sc-1">&lt;!-- ... --&gt;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">&lt;!-- ... --&gt;
Ceiling Input: &lt;input type="number" data-bind="value: ceilingValue" required /&gt;&lt;br /&gt;
Integer Input: &lt;input type="number" data-bind="value: integerValue" pattern="^-?d+$" required /&gt;&lt;br /&gt;
&lt;!-- ... --&gt;</pre></div></div>

<p>As I&#8217;ll be applying this custom rule via an extend call on the viewmodel:</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="javascript"><thead><tr><td colspan="2"  class="head">Javascript</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
</pre></td><td class="de1"><pre class="de1"><span class="kw1">var</span> ComplexValidationModel <span class="sy0">=</span> <span class="kw1">function</span> <span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; <span class="kw1">this</span>.<span class="me1">ceilingValue</span> <span class="sy0">=</span> ko.<span class="me1">observable</span><span class="br0">&#40;</span><span class="nu0">10</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; <span class="kw1">this</span>.<span class="me1">integerValue</span> <span class="sy0">=</span> ko.<span class="me1">observable</span><span class="br0">&#40;</span><span class="nu0">0</span><span class="br0">&#41;</span>.<span class="me1">extend</span><span class="br0">&#40;</span><span class="br0">&#123;</span> ceiling<span class="sy0">:</span> <span class="kw1">this</span>.<span class="me1">ceilingValue</span> <span class="br0">&#125;</span><span class="br0">&#41;</span><span class="sy0">;</span>
<span class="br0">&#125;</span><span class="sy0">;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">var ComplexValidationModel = function () {
    this.ceilingValue = ko.observable(10);
    this.integerValue = ko.observable(0).extend({ ceiling: this.ceilingValue });
};</pre></div></div>

<p>Defining this new validation rule is fairly straightforward:</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="javascript"><thead><tr><td colspan="2"  class="head">Javascript</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
</pre></td><td class="de1"><pre class="de1"><span class="co1">// add the custom validation rule</span>
ko.<span class="me1">validation</span>.<span class="me1">rules</span><span class="br0">&#91;</span><span class="st0">'ceiling'</span><span class="br0">&#93;</span> <span class="sy0">=</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; validator<span class="sy0">:</span> <span class="kw1">function</span> <span class="br0">&#40;</span>val<span class="sy0">,</span> otherVal<span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">var</span> actualOther <span class="sy0">=</span> parseInt<span class="br0">&#40;</span>ko.<span class="me1">isObservable</span><span class="br0">&#40;</span>otherVal<span class="br0">&#41;</span> <span class="sy0">?</span> otherVal<span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="sy0">:</span> otherVal<span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">if</span> <span class="br0">&#40;</span>isNaN<span class="br0">&#40;</span>actualOther<span class="br0">&#41;</span><span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">return</span> <span class="kw2">true</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">else</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">return</span> parseInt<span class="br0">&#40;</span>val<span class="br0">&#41;</span> <span class="sy0">&lt;=</span> actualOther<span class="sy0">;</span>
&nbsp; &nbsp; <span class="br0">&#125;</span><span class="sy0">,</span>
&nbsp; &nbsp; message<span class="sy0">:</span> <span class="st0">'The field must be less than or equal to {0}'</span>
<span class="br0">&#125;</span><span class="sy0">;</span>
ko.<span class="me1">validation</span>.<span class="me1">registerExtenders</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">// add the custom validation rule
ko.validation.rules['ceiling'] = {
    validator: function (val, otherVal) {
        var actualOther = parseInt(ko.isObservable(otherVal) ? otherVal() : otherVal);
        if (isNaN(actualOther))
            return true;
        else
            return parseInt(val) &lt;= actualOther;
    },
    message: 'The field must be less than or equal to {0}'
};
ko.validation.registerExtenders();</pre></div></div>

<p>And everything works exactly as you would expect, since it is just an additional rule on the existing library.</p>
<h3>Knockout Completely Custom Validation Example</h3>
<p>Full source available at <a href="https://github.com/tarwn/AngularJS-vs-Knockout/blob/master/Knockout /ComplexValidation2.html" title="View full example file on github">Knockout /ComplexValidation2.html</a>.</p>
<p>On the other extreme, we can also create a validation library from scratch using knockout extensions. I only offer this example because there is an interesting parallel to wiring into the $formatters and $parsers pipelines from AngularJS and because the custom AngularJS example got to dive into Directives, but the Knockout example hasn&#8217;t really dived into extensions yet.</p>
<p>Warning: Don&#8217;t use this in production. It&#8217;s a one off piece of example code that has had only limited testing.</p>
<p>I&#8217;ve moved everything to extends calls, so here is the updated viewmodel:</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="javascript"><thead><tr><td colspan="2"  class="head">Javascript</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
</pre></td><td class="de1"><pre class="de1"><span class="kw1">var</span> ComplexValidationModel <span class="sy0">=</span> <span class="kw1">function</span> <span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; <span class="kw1">var</span> rawCeilingValue <span class="sy0">=</span> ko.<span class="me1">observable</span><span class="br0">&#40;</span><span class="nu0">10</span><span class="br0">&#41;</span><span class="sy0">,</span>
&nbsp; &nbsp; &nbsp; &nbsp; rawIntegerValue <span class="sy0">=</span> ko.<span class="me1">observable</span><span class="br0">&#40;</span><span class="nu0">0</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; <span class="kw1">this</span>.<span class="me1">ceilingValue</span> <span class="sy0">=</span> rawCeilingValue.<span class="me1">extend</span><span class="br0">&#40;</span><span class="br0">&#123;</span> validate<span class="sy0">:</span> <span class="br0">&#123;</span> required<span class="sy0">:</span> <span class="kw2">true</span><span class="sy0">,</span> isNumber<span class="sy0">:</span> <span class="kw2">true</span><span class="br0">&#125;</span> <span class="br0">&#125;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; <span class="kw1">this</span>.<span class="me1">integerValue</span> <span class="sy0">=</span> rawIntegerValue.<span class="me1">extend</span><span class="br0">&#40;</span><span class="br0">&#123;</span> validate<span class="sy0">:</span> <span class="br0">&#123;</span> required<span class="sy0">:</span> <span class="kw2">true</span><span class="sy0">,</span> isNumber<span class="sy0">:</span> <span class="kw2">true</span><span class="sy0">,</span> max<span class="sy0">:</span> rawCeilingValue <span class="br0">&#125;</span> <span class="br0">&#125;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; <span class="kw1">this</span>.<span class="me1">isValid</span> <span class="sy0">=</span> ko.<span class="me1">computed</span><span class="br0">&#40;</span><span class="kw1">function</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">return</span> <span class="kw1">this</span>.<span class="me1">ceilingValue</span>.<span class="me1">isValid</span><span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="sy0">&amp;&amp;</span> <span class="kw1">this</span>.<span class="me1">integerValue</span>.<span class="me1">isValid</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; <span class="br0">&#125;</span><span class="sy0">,</span> <span class="kw1">this</span><span class="br0">&#41;</span><span class="sy0">;</span>
<span class="br0">&#125;</span><span class="sy0">;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">var ComplexValidationModel = function () {
    var rawCeilingValue = ko.observable(10),
        rawIntegerValue = ko.observable(0);

    this.ceilingValue = rawCeilingValue.extend({ validate: { required: true, isNumber: true} });
    this.integerValue = rawIntegerValue.extend({ validate: { required: true, isNumber: true, max: rawCeilingValue } });
	this.isValid = ko.computed(function(){
		return this.ceilingValue.isValid() &amp;&amp; this.integerValue.isValid();
	}, this);
};</pre></div></div>

<p>I only implemented the required, isNumber, and max/ceiling rules, but the pattern and min wouldn&#8217;t be too hard to add.</p>
<p>The core of this logic is the addition of a <code class="codespan">validate</code> extension. The extension wraps around the observable, replacing the read and write pipelines with it&#8217;s own:</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="javascript"><thead><tr><td colspan="2"  class="head">Javascript</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
</pre></td><td class="de1"><pre class="de1">ko.<span class="me1">extenders</span>.<span class="me1">validate</span> <span class="sy0">=</span> <span class="kw1">function</span> <span class="br0">&#40;</span>target<span class="sy0">,</span> options<span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp;
&nbsp; &nbsp; <span class="co1">// ... logic for validation methods + validate call ...</span>
&nbsp;
&nbsp; &nbsp; <span class="kw1">var</span> _rawValue <span class="sy0">=</span> ko.<span class="me1">observable</span><span class="br0">&#40;</span>target<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; <span class="kw1">var</span> result <span class="sy0">=</span> ko.<span class="me1">computed</span><span class="br0">&#40;</span><span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; read<span class="sy0">:</span> _rawValue<span class="sy0">,</span>
&nbsp; &nbsp; &nbsp; &nbsp; write<span class="sy0">:</span> <span class="kw1">function</span> <span class="br0">&#40;</span>newValue<span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; _rawValue<span class="br0">&#40;</span>newValue<span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="co1">// determine validity, updating state of isValid and error properties</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">var</span> validationResult <span class="sy0">=</span> validate<span class="br0">&#40;</span>newValue<span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">if</span> <span class="br0">&#40;</span>validationResult.<span class="me1">isValid</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; result.<span class="me1">isValid</span><span class="br0">&#40;</span>validationResult.<span class="me1">isValid</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; result.<span class="me1">error</span><span class="br0">&#40;</span><span class="st0">&quot;&quot;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="co1">// only pass the write through to raw observable if valid</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; target<span class="br0">&#40;</span>newValue<span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">else</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; result.<span class="me1">isValid</span><span class="br0">&#40;</span>validationResult.<span class="me1">isValid</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; result.<span class="me1">error</span><span class="br0">&#40;</span>validationResult.<span class="me1">check</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp; &nbsp; <span class="br0">&#125;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; result.<span class="me1">isValid</span> <span class="sy0">=</span> ko.<span class="me1">observable</span><span class="br0">&#40;</span><span class="kw2">true</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; result.<span class="me1">error</span> <span class="sy0">=</span> ko.<span class="me1">observable</span><span class="br0">&#40;</span><span class="st0">&quot;&quot;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; result._watchDependentCheckArgs <span class="sy0">=</span> ko.<span class="me1">computed</span><span class="br0">&#40;</span><span class="kw1">function</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="co1">// ... hacky little method to watch changes on observable arguments ..</span>
&nbsp; &nbsp; <span class="br0">&#125;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; <span class="co1">// write initial value so we can get initial validity</span>
&nbsp; &nbsp; result<span class="br0">&#40;</span>target<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; <span class="kw1">return</span> result<span class="sy0">;</span>
<span class="br0">&#125;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">ko.extenders.validate = function (target, options) {

    // ... logic for validation methods + validate call ...

    var _rawValue = ko.observable(target());
    var result = ko.computed({
        read: _rawValue,
        write: function (newValue) {
            _rawValue(newValue);

            // determine validity, updating state of isValid and error properties
            var validationResult = validate(newValue);
            if (validationResult.isValid) {
                result.isValid(validationResult.isValid);
                result.error("");
                // only pass the write through to raw observable if valid
                target(newValue);
            }
            else {
                result.isValid(validationResult.isValid);
                result.error(validationResult.check);
            }
        }
    });
    result.isValid = ko.observable(true);
    result.error = ko.observable("");

    result._watchDependentCheckArgs = ko.computed(function(){
        // ... hacky little method to watch changes on observable arguments ..
    });

    // write initial value so we can get initial validity
    result(target());
    return result;
}</pre></div></div>

<p>The full code is available via the github link above.</p>
<h2>Some Differences</h2>
<p>So where are the differences here?</p>
<p><b>Extra Library for Knockout</b></p>
<p>The first, and most obvious, difference is that AngularJS&#8217;s validation is built-in and I had to go with an additional package for Knockout. From reading other comparisons, composing together a matching set of packages around Knockout is supposed to be tough, and I went into this thinking it would be. I&#8217;m pleasantly surprised by how easy it was to match Angular&#8217;s validation capabilities in Knockout with the addition of a single library. </p>
<p>There is still an additional trade-off, though. Where we still have a single package with AngularJS, we now have two with Knockout. That&#8217;s two packages we have to keep a watch out for security updates on, two separate projects with separate groups of people submitting changes and maintaining them. So there is some extra, non-technical overhead here.</p>
<p><b>Validation Style</b></p>
<p>Both examples offered the capability to use HTML attributes to drive validation. When I needed custom validation logic, AngularJS&#8217;s was slightly more complex to write, but was an additional attribute I added to the element. With the Knockout validation example, it was an extension that was added in the viewmodel. Though now that I think of it, I probably could have gone the custom binding route as well, but I would not have been tied into the validation library then.</p>
<p>The library used with Knockout also offers defining your rules in the viewmodel, whereas Angular doesn&#8217;t have this option out of the box.</p>
<p><b>Configurability</b></p>
<p>The Knockout-validation library wins here hands down. It has a much higher level of configurability, allowing you to change out not just classes for the inputs, but automatically produce error elements, bind templates to each error message, use 9or not) HTML5 validation attributes, and so on. AngularJS mostly focuses on delivering one method of validation (attributes and CSS classes).</p>
<p><b>Validation State</b></p>
<p>AngularJS tracks the validation state at the form level, indicating which validation rules are in error and doing so in a way that we could programmatically write more logic off of that state. If only it also told you which inputs or models were in error. Here is an example of the error state from the form when I have errors on two text boxes: <code class="codespan"> error={"required":[{}],"ceilingValidate":[{}],"number":[{}]}</code></p>
<p>Knockout-validation does not expose this type of information.</p>
<h2>Final Thoughts</h2>
<p>Knockout-validation and Angular both require less work than rolling your own. Angular seems to have a fixed method of operating while Knockout-validation has a higher level of configuration and is easier to add additional validation methods to.</p>
<p>I personally have issues with both methods. I don&#8217;t like that an invalid entry causes changes to propagate (whether bad values or <i>undefined</i>) into the rest of the model. I also don&#8217;t like the use of HTML directives for defining requirements, it ties the view more intimately to the model in Angular&#8217;s case (which is common for the MVC pattern) and loses some of the MVVM separation I would expect for knockout. </p>
<p>My preference in both cases would be to define these at the model or viewmodel level (which knockout-validation supports) so that my viewmodel has validation requirements and a valid or invalid state and the view (HTML) only reflects this state. I would then have the choice of testing directly against raw inputs and outputs, including putting in bad values and checking formatting, or testing against the core model properties and bypassing formatting and such.</p>
<div style="background-color: #DDDDDD; padding: 8px; width: 400px;">
<h3>Knockout vs AngularJS</h3>
<ul style="margin: 0px; padding: 4px;">
<li><a href="/index.php/WebDev/UIDevelopment/angularjs-vs-knockout-introduction-1">Introductory Post</a></li>
<li><a href="/index.php/WebDev/UIDevelopment/angularjs-vs-knockout-data-binding-2">Data Binding</a></li>
<li><b>Validation</b></li>
<li><a href="/index.php/WebDev/UIDevelopment/angularjs-vs-knockout-serialization-4">Serialization</a></li>
<li><a href="/index.php/WebDev/UIDevelopment/angularjs-vs-knockout-templating-5">Templating</a></li>
<li><a href="/index.php/WebDev/UIDevelopment/angularjs-vs-knockout-modules-and-di-6">Modules + Dependency Injection</a></li>
<li><a href="/index.php/WebDev/UIDevelopment/angularjs-vs-knockout-automated-testing-7">Automated Testing</a></li>
<li><a href="/index.php/WebDev/UIDevelopment/AJAX/angularjs-vs-knockout-spa-routing-history-8">SPA Routing/History</a></li>
<li><a href="/index.php/WebDev/UIDevelopment/angularjs-vs-knockout-final-thoughts-9">Final, Final Thoughts</a></li>
</ul>
</div>
]]></content:encoded>
			<wfw:commentRss>/index.php/webdev/uidevelopment/angularjs-vs-knockout-validation-3/feed/</wfw:commentRss>
		<slash:comments>3</slash:comments>
		</item>
	</channel>
</rss>
