<?xml version="1.0" encoding="UTF-8"?><rss version="2.0"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:atom="http://www.w3.org/2005/Atom"
	xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
	xmlns:slash="http://purl.org/rss/1.0/modules/slash/"
	>

<channel>
	<title>gotcha &#8211; LessthanDot</title>
	<atom:link href="/index.php/tag/gotcha/feed/" rel="self" type="application/rss+xml" />
	<link>/</link>
	<description>A Technical Community for IT Professionals</description>
	<lastBuildDate>Sat, 09 Mar 2019 12:50:36 +0000</lastBuildDate>
	<language>en-US</language>
	<sy:updatePeriod>hourly</sy:updatePeriod>
	<sy:updateFrequency>1</sy:updateFrequency>
	<generator>https://wordpress.org/?v=4.6.1</generator>
	<item>
		<title>Unique index difference between Oracle and SQL Server</title>
		<link>/index.php/datamgmt/dbprogramming/unique-index-difference-between-oracle/</link>
		<comments>/index.php/datamgmt/dbprogramming/unique-index-difference-between-oracle/#comments</comments>
		<pubDate>Tue, 19 Mar 2013 21:55:00 +0000</pubDate>
		<dc:creator><![CDATA[SQLDenis]]></dc:creator>
				<category><![CDATA[Database Programming]]></category>
		<category><![CDATA[Microsoft SQL Server]]></category>
		<category><![CDATA[Microsoft SQL Server Admin]]></category>
		<category><![CDATA[Oracle]]></category>
		<category><![CDATA[Oracle Admin]]></category>
		<category><![CDATA[gotcha]]></category>
		<category><![CDATA[null]]></category>
		<category><![CDATA[oracle]]></category>
		<category><![CDATA[sql server]]></category>
		<category><![CDATA[tip]]></category>

		<guid isPermaLink="false">/index.php/2013/03/unique-index-difference-between-oracle/</guid>
		<description><![CDATA[When working with different database systems you have to be aware that some things work differently from one system to another. I already blogged a couple of times about differences between SQl Server and Oracle, those post are the following
Truncate r&#8230;]]></description>
				<content:encoded><![CDATA[<p>When working with different database systems you have to be aware that some things work differently from one system to another. I already blogged a couple of times about differences between SQl Server and Oracle, those post are the following<br />
<a href="/index.php/DataMgmt/DBAdmin/MSSQLServerAdmin/truncate-rollback-differences-between-sql">Truncate rollback differences between SQL Server and Oracle</a><br />
<a href="/index.php/DataMgmt/DBProgramming/Oracle/differences-between-oracle-and-sql">Differences between Oracle and SQL Server when working with NULL and blank values</a><br />
<a href="/index.php/DataMgmt/DBProgramming/Oracle/an-oracle-null-blank-gotcha">An Oracle NULL/Blank gotcha when coming from SQL Server</a>. </p>
<p>Today we are going to look at the difference between a unique index in Oracle and in SQL Server.</p>
<p>Let&#8217;s start with SQL Server. First create this table and also this index</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
</pre></td><td class="de1"><pre class="de1"><span class="kw1">CREATE</span> <span class="kw1">TABLE</span> TestUnique <span class="br0">&#40;</span>Id <span class="kw1">int</span><span class="br0">&#41;</span>
&nbsp;
&nbsp;
<span class="kw1">CREATE</span> <span class="kw1">UNIQUE</span> <span class="kw1">INDEX</span> SomeIndex <span class="kw1">ON</span> TESTUNIQUE <span class="br0">&#40;</span>ID<span class="br0">&#41;</span>;</pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">CREATE TABLE TestUnique (Id int)


CREATE UNIQUE INDEX SomeIndex ON TESTUNIQUE (ID);</pre></div></div>

<p>Insert the following two rows</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
</pre></td><td class="de1"><pre class="de1"><span class="kw1">INSERT</span> <span class="kw1">INTO</span> TestUnique <span class="kw1">VALUES</span><span class="br0">&#40;</span><span class="nu0">1</span><span class="br0">&#41;</span>;
<span class="kw1">INSERT</span> <span class="kw1">INTO</span> TestUnique <span class="kw1">VALUES</span><span class="br0">&#40;</span>null<span class="br0">&#41;</span>;</pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">INSERT INTO TestUnique VALUES(1);
INSERT INTO TestUnique VALUES(null);</pre></div></div>

<p>Now let&#8217;s insert one more NULL</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
</pre></td><td class="de1"><pre class="de1"><span class="kw1">INSERT</span> <span class="kw1">INTO</span> TestUnique <span class="kw1">VALUES</span><span class="br0">&#40;</span>null<span class="br0">&#41;</span>;</pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">INSERT INTO TestUnique VALUES(null);</pre></div></div>

<p>Here is the error<br />
<em>Msg 2601, Level 14, State 1, Line 1<br />
Cannot insert duplicate key row in object &#8216;dbo.TestUnique&#8217; with unique index &#8216;SomeIndex&#8217;. The duplicate key value is (<null>).<br />
The statement has been terminated.</null></em></p>
<p>As you can see you can only have one NULL value in the table</p>
<p>What about Oracle? Let&#8217;s take a look. Run this whole block, it will create a table, a unique index and will insert the same data<br />
</p>
<pre>CREATE TABLE TestUnique (Id int);

CREATE UNIQUE INDEX INDEX1 ON TESTUNIQUE (ID);

INSERT INTO TestUnique VALUES(1);
INSERT INTO TestUnique VALUES(null);
INSERT INTO TestUnique VALUES(null);

SELECT * FROM TestUnique;</pre>
<p>Here is what it looks like from SQL developer</p>
<div class="image_block"><a href="/wp-content/uploads/blogs/DataMgmt/Denis/Oracle/OracleSQLOutput.PNG?mtime=1363737088"><img alt="" src="/wp-content/uploads/blogs/DataMgmt/Denis/Oracle/OracleSQLOutput.PNG?mtime=1363737088" width="379" height="377" /></a></div>
<p>As you can see SQL Server only allows one NULL value while Oracle allows multiple NULL values. You have to be aware of these differences otherwise you might get unintended behavior from your programs</p>
<p>If you try to insert the value 1 again, you will get the following error</p>
<p>Error report:</p>
<pre>SQL Error: ORA-00001: unique constraint (SYSTEM.INDEX1) violated
00001. 00000 -  "unique constraint (%s.%s) violated"
*Cause:    An UPDATE or INSERT statement attempted to insert a duplicate key.
           For Trusted Oracle configured in DBMS MAC mode, you may see
           this message if a duplicate entry exists at a different level.
*Action:   Either remove the unique restriction or do not insert the key.</pre>
<p>Come back tomorrow to see how you can create an index in SQL Server that will allow multiple NULL values. You can find that post here: <a href="/index.php/DataMgmt/DBProgramming/MSSQLServer/creating-a-sql-server-unique">Creating a SQL Server Unique Index that behaves like an Oracle Unique Index</a></p>
]]></content:encoded>
			<wfw:commentRss>/index.php/datamgmt/dbprogramming/unique-index-difference-between-oracle/feed/</wfw:commentRss>
		<slash:comments>1</slash:comments>
		</item>
		<item>
		<title>Column name or number of supplied values does not match table definition when dealing with temp tables</title>
		<link>/index.php/datamgmt/dbprogramming/column-name-or-number-of/</link>
		<comments>/index.php/datamgmt/dbprogramming/column-name-or-number-of/#comments</comments>
		<pubDate>Sun, 03 Mar 2013 19:25:00 +0000</pubDate>
		<dc:creator><![CDATA[SQLDenis]]></dc:creator>
				<category><![CDATA[Database Programming]]></category>
		<category><![CDATA[Microsoft SQL Server]]></category>
		<category><![CDATA[Microsoft SQL Server Admin]]></category>
		<category><![CDATA[gotcha]]></category>
		<category><![CDATA[sql server 2000]]></category>
		<category><![CDATA[sql server 2005]]></category>
		<category><![CDATA[sql server 2008]]></category>
		<category><![CDATA[sql server 2012]]></category>
		<category><![CDATA[tables]]></category>
		<category><![CDATA[temp tables]]></category>

		<guid isPermaLink="false">/index.php/2013/03/column-name-or-number-of/</guid>
		<description><![CDATA[The other day I was doing some testing and then from the same connection I executed a stored procedure only to be greeted with the following message

Msg 213, Level 16, State 1, Procedure prTestTemp, Line 5
Column name or number of supplied values do&#8230;]]></description>
				<content:encoded><![CDATA[<p>The other day I was doing some testing and then from the same connection I executed a stored procedure only to be greeted with the following message</p>
<p>Msg 213, Level 16, State 1, Procedure prTestTemp, Line 5<br />
Column name or number of supplied values does not match table definition.</p>
<p>I looked at the proc, hasn&#8217;t changed in months, I decided to run it from a different window and no problem. I took me a couple of minutes to realize what was going on.</p>
<p>Let&#8217;s duplicate this here with some code that you can run. Make sure that you run the code all in the same window</p>
<p>First create this stored procedure, do not close this window after creation</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
</pre></td><td class="de1"><pre class="de1"><span class="kw1">CREATE</span> <span class="kw1">PROCEDURE</span> prTestTemp
<span class="kw1">AS</span>
&nbsp;
<span class="kw1">CREATE</span> <span class="kw1">TABLE</span> #temp <span class="br0">&#40;</span>id <span class="kw1">int</span><span class="br0">&#41;</span>
<span class="kw1">INSERT</span> #temp <span class="kw1">VALUES</span><span class="br0">&#40;</span><span class="nu0">1</span><span class="br0">&#41;</span>
&nbsp;
<span class="kw1">SELECT</span> <span class="sy0">*</span> <span class="kw1">FROM</span> #temp
GO</pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">CREATE PROCEDURE prTestTemp
AS

CREATE TABLE #temp (id int)
INSERT #temp VALUES(1)

SELECT * FROM #temp
GO</pre></div></div>

<p>In the same window now create the following temp table</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
</pre></td><td class="de1"><pre class="de1"><span class="kw1">CREATE</span> <span class="kw1">TABLE</span> #temp <span class="br0">&#40;</span>id <span class="kw1">int</span>, id2 <span class="kw1">int</span><span class="br0">&#41;</span>
<span class="kw1">INSERT</span> #temp <span class="kw1">VALUES</span><span class="br0">&#40;</span><span class="nu0">1</span>,<span class="nu0">2</span><span class="br0">&#41;</span>
&nbsp;
<span class="kw1">SELECT</span> <span class="sy0">*</span> <span class="kw1">FROM</span> #temp</pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">CREATE TABLE #temp (id int, id2 int)
INSERT #temp VALUES(1,2)

SELECT * FROM #temp</pre></div></div>

<p>Now run the procedure</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
</pre></td><td class="de1"><pre class="de1"><span class="kw1">EXEC</span> prTestTemp</pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">EXEC prTestTemp</pre></div></div>

<p>Here is the error<br />
<em>Msg 213, Level 16, State 1, Procedure prTestTemp, Line 5<br />
Column name or number of supplied values does not match table definition.</em></p>
<p>Drop the table and we will try again</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
</pre></td><td class="de1"><pre class="de1"><span class="kw1">DROP</span> <span class="kw1">TABLE</span> #temp</pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">DROP TABLE #temp</pre></div></div>

<p>Run the procedure again</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
</pre></td><td class="de1"><pre class="de1"><span class="kw1">EXEC</span> prTestTemp</pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">EXEC prTestTemp</pre></div></div>

<p>This time there was no error</p>
<p>Let&#8217;s do another experiment, create the table again</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
</pre></td><td class="de1"><pre class="de1"><span class="kw1">CREATE</span> <span class="kw1">TABLE</span> #temp <span class="br0">&#40;</span>id <span class="kw1">int</span>, id2 <span class="kw1">int</span><span class="br0">&#41;</span>
<span class="kw1">INSERT</span> #temp <span class="kw1">VALUES</span><span class="br0">&#40;</span><span class="nu0">1</span>,<span class="nu0">2</span><span class="br0">&#41;</span>
&nbsp;
<span class="kw1">SELECT</span> <span class="sy0">*</span> <span class="kw1">FROM</span> #temp</pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">CREATE TABLE #temp (id int, id2 int)
INSERT #temp VALUES(1,2)

SELECT * FROM #temp</pre></div></div>

<p>Now, let&#8217;s try modifying the procedure, change create to alter and run it again</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
</pre></td><td class="de1"><pre class="de1"><span class="kw1">ALTER</span> <span class="kw1">PROCEDURE</span> prTestTemp
<span class="kw1">AS</span>
&nbsp;
<span class="kw1">CREATE</span> <span class="kw1">TABLE</span> #temp <span class="br0">&#40;</span>id <span class="kw1">int</span><span class="br0">&#41;</span>
<span class="kw1">INSERT</span> #temp <span class="kw1">VALUES</span><span class="br0">&#40;</span><span class="nu0">1</span><span class="br0">&#41;</span>
&nbsp;
<span class="kw1">SELECT</span> <span class="sy0">*</span> <span class="kw1">FROM</span> #temp
GO</pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">ALTER PROCEDURE prTestTemp
AS

CREATE TABLE #temp (id int)
INSERT #temp VALUES(1)

SELECT * FROM #temp
GO</pre></div></div>

<p>Here is the error<br />
<em>Msg 213, Level 16, State 1, Procedure prTestTemp, Line 5<br />
Column name or number of supplied values does not match table definition.</em></p>
<p>As you can see, you can&#8217;t modify the procedure in the same window, copy and paste the code in another window and you won&#8217;t have a problem.</p>
<p>The reason you run into this because the temporary table is local to your connection, it is not dropped until you close the connection. If you have a temporary table with the same name inside a proc that you try to execute you will run into this problem. One way to avoid this is by not naming a temporary table the same in every stored procedure that you have, for example #temp</p>
<p>BTW, doing something like this is no problem</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
</pre></td><td class="de1"><pre class="de1"><span class="kw1">CREATE</span> <span class="kw1">PROCEDURE</span> prTestTemp2
<span class="kw1">AS</span>
&nbsp;
<span class="kw1">CREATE</span> <span class="kw1">TABLE</span> #temp <span class="br0">&#40;</span>id <span class="kw1">int</span>, id2 <span class="kw1">int</span><span class="br0">&#41;</span>
<span class="kw1">INSERT</span> #temp <span class="kw1">VALUES</span><span class="br0">&#40;</span><span class="nu0">1</span>,<span class="nu0">2</span><span class="br0">&#41;</span>
&nbsp;
<span class="kw1">SELECT</span> <span class="sy0">*</span> <span class="kw1">FROM</span> #temp
&nbsp;
<span class="kw1">EXEC</span> prTestTemp
GO</pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">CREATE PROCEDURE prTestTemp2
AS
 
CREATE TABLE #temp (id int, id2 int)
INSERT #temp VALUES(1,2)
 
SELECT * FROM #temp

EXEC prTestTemp
GO</pre></div></div>

<p>As you can see both procedure have a temporary table named #temp and you get back two resultsets, one has 1 column, the other one has 2 columns</p>
<p>Just be aware of how this works because you could be scratching your head for hours trying to figure something like this out</p>
]]></content:encoded>
			<wfw:commentRss>/index.php/datamgmt/dbprogramming/column-name-or-number-of/feed/</wfw:commentRss>
		<slash:comments>8</slash:comments>
		</item>
		<item>
		<title>An Oracle NULL/Blank gotcha when coming from SQL Server</title>
		<link>/index.php/datamgmt/dbprogramming/mssqlserver/an-oracle-null-blank-gotcha/</link>
		<comments>/index.php/datamgmt/dbprogramming/mssqlserver/an-oracle-null-blank-gotcha/#respond</comments>
		<pubDate>Sun, 10 Feb 2013 19:43:00 +0000</pubDate>
		<dc:creator><![CDATA[SQLDenis]]></dc:creator>
				<category><![CDATA[Microsoft SQL Server]]></category>
		<category><![CDATA[Oracle]]></category>
		<category><![CDATA[gotcha]]></category>
		<category><![CDATA[null]]></category>
		<category><![CDATA[oracle]]></category>
		<category><![CDATA[sql server]]></category>
		<category><![CDATA[tip]]></category>

		<guid isPermaLink="false">/index.php/2013/02/an-oracle-null-blank-gotcha/</guid>
		<description><![CDATA[In my Differences between Oracle and SQL Server when working with NULL and blank values  post I already showed you how blanks and NULLS are handled differently between Oracle and SQL Server. Today I found another interesting tidbit.

I you have a varc&#8230;]]></description>
				<content:encoded><![CDATA[<p>In my <a href="/index.php/DataMgmt/DBProgramming/Oracle/differences-between-oracle-and-sql">Differences between Oracle and SQL Server when working with NULL and blank values</a>  post I already showed you how blanks and NULLS are handled differently between Oracle and SQL Server. Today I found another interesting tidbit.</p>
<p>I you have a varchar or char datatype in SQL Server and you store a blank, you get back a blank or padded spaces.</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
</pre></td><td class="de1"><pre class="de1"><span class="kw1">DECLARE</span> @Test1 <span class="kw1">varchar</span><span class="br0">&#40;</span><span class="nu0">10</span><span class="br0">&#41;</span> <span class="sy0">=</span> <span class="st0">''</span>
<span class="kw1">DECLARE</span> @Test2 <span class="kw1">char</span><span class="br0">&#40;</span><span class="nu0">10</span><span class="br0">&#41;</span> <span class="sy0">=</span> <span class="st0">''</span>
&nbsp;
<span class="kw1">SELECT</span> @Test1,@Test2</pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">DECLARE @Test1 varchar(10) = ''
DECLARE @Test2 char(10) = ''

SELECT @Test1,@Test2</pre></div></div>

<p>The output is one blank and ten spaces.  </p>
<p>You can verify this by using the <code>DATALENGTH </code>function .</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
</pre></td><td class="de1"><pre class="de1"><span class="kw1">DECLARE</span> @Test1 <span class="kw1">varchar</span><span class="br0">&#40;</span><span class="nu0">10</span><span class="br0">&#41;</span> <span class="sy0">=</span> <span class="st0">''</span>
<span class="kw1">DECLARE</span> @Test2 <span class="kw1">char</span><span class="br0">&#40;</span><span class="nu0">10</span><span class="br0">&#41;</span> <span class="sy0">=</span> <span class="st0">''</span>
&nbsp;
<span class="kw1">SELECT</span> datalength<span class="br0">&#40;</span>@Test1<span class="br0">&#41;</span>,datalength<span class="br0">&#40;</span>@Test2<span class="br0">&#41;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">DECLARE @Test1 varchar(10) = ''
DECLARE @Test2 char(10) = ''

SELECT datalength(@Test1),datalength(@Test2)</pre></div></div>

<p>Ouput</p>
<pre>0     10</pre>
<p>In Oracle&#8230;not the same</p>
<p>If you run this</p>
<pre>SET SERVEROUTPUT ON
 DECLARE 
    Test1 varchar(10):='';
    Test2 char(10):='';
BEGIN
  IF Test1 IS NULL 
  THEN
  DBMS_OUTPUT.PUT_LINE('Test1 is null');
  ELSE
  DBMS_OUTPUT.PUT_LINE('Test1 is NOT null');
  END IF;
  IF Test2 IS NULL 
  THEN
  DBMS_OUTPUT.PUT_LINE('Test2 is null');
  ELSE
  DBMS_OUTPUT.PUT_LINE('Test2 is NOT null');
  END IF;
END;</pre>
<p>Output</p>
<pre>anonymous block completed
Test1 is null
Test2 is NOT null</pre>
<p>As you can see the varchar variable becomes NULL while the nchar variable gets padded</p>
<p>However when inserting into a table this becomes a little bit different with Oracle</p>
<p>Running this in SQL Server</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
</pre></td><td class="de1"><pre class="de1"><span class="kw1">CREATE</span> <span class="kw1">TABLE</span> TestNull<span class="br0">&#40;</span>Col1 <span class="kw1">CHAR</span><span class="br0">&#40;</span><span class="nu0">10</span><span class="br0">&#41;</span>,Col2 <span class="kw1">VARCHAR</span><span class="br0">&#40;</span><span class="nu0">10</span><span class="br0">&#41;</span><span class="br0">&#41;</span>;
<span class="kw1">INSERT</span> <span class="kw1">INTO</span> TestNull <span class="kw1">VALUES</span><span class="br0">&#40;</span><span class="sy0">NULL</span>,<span class="sy0">NULL</span><span class="br0">&#41;</span>;
<span class="kw1">INSERT</span> <span class="kw1">INTO</span> TestNull <span class="kw1">VALUES</span><span class="br0">&#40;</span><span class="st0">''</span>,<span class="st0">''</span><span class="br0">&#41;</span>;
&nbsp;
<span class="kw1">SELECT</span> <span class="sy0">*</span> <span class="kw1">FROM</span> TestNull;</pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">CREATE TABLE TestNull(Col1 CHAR(10),Col2 VARCHAR(10));
INSERT INTO TestNull VALUES(NULL,NULL);
INSERT INTO TestNull VALUES('','');

SELECT * FROM TestNull;</pre></div></div>

<p>Output</p>
<pre>Col1	Col2
NULL	NULL
          	</pre>
<p>You get a row with NULLS and a row with blanks, same as with the variables</p>
<p>Running that in Oracle</p>
<pre>CREATE TABLE TestNull(Col1 CHAR(10),Col2 VARCHAR(10));
INSERT INTO TestNull VALUES(NULL,NULL);
INSERT INTO TestNull VALUES('','');

SELECT * FROM TestNull;</pre>
<p>Here is what you get</p>
<div class="image_block"><a href="/wp-content/uploads/blogs/DataMgmt/Denis/Oracle/OracleOutput.PNG?mtime=1360532250"><img alt="" src="/wp-content/uploads/blogs/DataMgmt/Denis/Oracle/OracleOutput.PNG?mtime=1360532250" width="290" height="229" /></a></div>
<p>As you can see when inserting NULL or a blank into a char column into a table, it does NOT get padded like it did with the variable<br />
If converting code between these two database systems be aware of these kind of things</p>
]]></content:encoded>
			<wfw:commentRss>/index.php/datamgmt/dbprogramming/mssqlserver/an-oracle-null-blank-gotcha/feed/</wfw:commentRss>
		<slash:comments>0</slash:comments>
		</item>
		<item>
		<title>Truncate rollback differences between SQL Server and Oracle</title>
		<link>/index.php/datamgmt/dbadmin/mssqlserveradmin/truncate-rollback-differences-between-sql/</link>
		<comments>/index.php/datamgmt/dbadmin/mssqlserveradmin/truncate-rollback-differences-between-sql/#respond</comments>
		<pubDate>Sun, 06 Jan 2013 22:27:00 +0000</pubDate>
		<dc:creator><![CDATA[SQLDenis]]></dc:creator>
				<category><![CDATA[Business Intelligence]]></category>
		<category><![CDATA[Microsoft SQL Server]]></category>
		<category><![CDATA[Microsoft SQL Server Admin]]></category>
		<category><![CDATA[Oracle]]></category>
		<category><![CDATA[Oracle Admin]]></category>
		<category><![CDATA[gotcha]]></category>
		<category><![CDATA[oracle]]></category>
		<category><![CDATA[sql server]]></category>
		<category><![CDATA[tip]]></category>
		<category><![CDATA[truncate]]></category>

		<guid isPermaLink="false">/index.php/2013/01/truncate-rollback-differences-between-sql/</guid>
		<description><![CDATA[I wrote a blogpost about the fact that there is a common myth that you can't rollback a truncate statement in SQL this post was written on June 13, 2007 and it showed you that you could rollback a truncate. Here is some code that shows that.

CREATE&#8230;]]></description>
				<content:encoded><![CDATA[<p>I wrote a blogpost about the fact that there is a common myth that you can&#8217;t rollback a truncate statement in SQL <a href="http://sqlblog.com/blogs/denis_gobo/archive/2007/06/13/1458.aspx">this post was written on June 13, 2007</a> and it showed you that you could rollback a truncate. Here is some code that shows that.</p>
<p>First create this very simple table</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
</pre></td><td class="de1"><pre class="de1"><span class="kw1">CREATE</span> <span class="kw1">TABLE</span> dbo.<span class="me1">TruncateTest</span> <span class="br0">&#40;</span>ID <span class="kw1">int</span> <span class="kw1">IDENTITY</span> <span class="kw1">PRIMARY</span> <span class="kw1">KEY</span>, 
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; SomeOtherCol <span class="kw1">varchar</span><span class="br0">&#40;</span><span class="nu0">49</span><span class="br0">&#41;</span><span class="br0">&#41;</span>
GO</pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">CREATE TABLE dbo.TruncateTest (ID int IDENTITY PRIMARY KEY, 
				SomeOtherCol varchar(49))
GO</pre></div></div>

<p>Add the following two rows</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
</pre></td><td class="de1"><pre class="de1"><span class="kw1">INSERT</span> dbo.<span class="me1">TruncateTest</span> <span class="kw1">VALUES</span><span class="br0">&#40;</span><span class="nu0">1</span><span class="br0">&#41;</span>
<span class="kw1">INSERT</span> dbo.<span class="me1">TruncateTest</span> <span class="kw1">VALUES</span><span class="br0">&#40;</span><span class="nu0">1</span><span class="br0">&#41;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">INSERT dbo.TruncateTest VALUES(1)
INSERT dbo.TruncateTest VALUES(1)</pre></div></div>

<p>Now execute this whole block in one shot, you will see three resultsets, two of them will have two rows and one resultset will be empty</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
</pre></td><td class="de1"><pre class="de1"><span class="kw1">SELECT</span> <span class="sy0">*</span> <span class="kw1">FROM</span> dbo.<span class="me1">TruncateTest</span> <span class="co1">-- 2 rows</span>
&nbsp;
<span class="kw1">BEGIN</span> <span class="kw1">TRAN</span>
&nbsp; &nbsp; <span class="kw1">TRUNCATE</span> <span class="kw1">TABLE</span> dbo.<span class="me1">TruncateTest</span>
&nbsp; &nbsp; <span class="kw1">SELECT</span> <span class="sy0">*</span> <span class="kw1">FROM</span> dbo.<span class="me1">TruncateTest</span> <span class="co1">-- 0 rows</span>
<span class="kw1">ROLLBACK</span> <span class="kw1">TRAN</span>
&nbsp;
<span class="kw1">SELECT</span> <span class="sy0">*</span> <span class="kw1">FROM</span> dbo.<span class="me1">TruncateTest</span> &nbsp;<span class="co1">-- 2 rows again after rollback</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">SELECT * FROM dbo.TruncateTest -- 2 rows
 
BEGIN TRAN
    TRUNCATE TABLE dbo.TruncateTest
    SELECT * FROM dbo.TruncateTest -- 0 rows
ROLLBACK TRAN
 
SELECT * FROM dbo.TruncateTest  -- 2 rows again after rollback</pre></div></div>

<p>Here is the output</p>
<pre>ID          SomeOtherCol
----------- -------------------------------------------------
1           1
2           1

(2 row(s) affected)

ID          SomeOtherCol
----------- -------------------------------------------------

(0 row(s) affected)

ID          SomeOtherCol
----------- -------------------------------------------------
1           1
2           1

(2 row(s) affected)</pre>
<p>As you can see the table was empty at one point, however the table has the same two rows again, if you execute this query, you will see those two row again</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
</pre></td><td class="de1"><pre class="de1"><span class="kw1">SELECT</span> <span class="sy0">*</span> <span class="kw1">FROM</span> dbo.<span class="me1">TruncateTest</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">SELECT * FROM dbo.TruncateTest</pre></div></div>

<h2>What about Oracle, can you rollback a truncate statement?</h2>
<p>In SQL Server the minimum permission required is ALTER on table_name. TRUNCATE TABLE permissions default to the table owner, members of the sysadmin fixed server role, and the db_owner and db_ddladmin fixed database roles, I blogged about this as well in the post <a href="/index.php/DataMgmt/DBProgramming/MSSQLServer/why-do-you-need-additional">Why do you need additional privileges for truncate table compared to delete?</a> </p>
<p>In Oracle to truncate a table, the table must be in your schema or you must have DROP ANY TABLE system privilege.</p>
<p>In Oracle a truncate statement is actually a DDL statement, you CANNOT rollback a truncate after it has happened. A truncate statement removes all rows  and returns the freed space to the tablespace containing the table.</p>
<p>Please keep these differences in mind when working with different platforms, don&#8217;t assume anything, it will bite you in the butt, always reference the documentation. For some more Oracle and SQL Server differences, see also my post <a href="/index.php/DataMgmt/DBProgramming/Oracle/differences-between-oracle-and-sql">Differences between Oracle and SQL Server when working with NULL and blank values</a></p>
]]></content:encoded>
			<wfw:commentRss>/index.php/datamgmt/dbadmin/mssqlserveradmin/truncate-rollback-differences-between-sql/feed/</wfw:commentRss>
		<slash:comments>0</slash:comments>
		</item>
		<item>
		<title>What is the Dual table in Oracle and why do I need it?</title>
		<link>/index.php/datamgmt/dbadmin/mssqlserveradmin/what-is-the-dual-table/</link>
		<comments>/index.php/datamgmt/dbadmin/mssqlserveradmin/what-is-the-dual-table/#comments</comments>
		<pubDate>Sun, 06 Jan 2013 13:36:00 +0000</pubDate>
		<dc:creator><![CDATA[SQLDenis]]></dc:creator>
				<category><![CDATA[Microsoft SQL Server]]></category>
		<category><![CDATA[Microsoft SQL Server Admin]]></category>
		<category><![CDATA[Oracle]]></category>
		<category><![CDATA[Oracle Admin]]></category>
		<category><![CDATA[gotcha]]></category>
		<category><![CDATA[oracle]]></category>
		<category><![CDATA[sql server]]></category>
		<category><![CDATA[tip]]></category>

		<guid isPermaLink="false">/index.php/2013/01/what-is-the-dual-table/</guid>
		<description><![CDATA[When coming from SQL Server, you might find it weird that you don't see code that looks like this


select 2

That code won't run in Oracle, unlike SQL Server, Oracle requires the use of the FROM clause in its syntax. This is why Oracle has DUAL]]></description>
				<content:encoded><![CDATA[<p>When coming from SQL Server, you might find it weird that you don&#8217;t see code that looks like this in Oracle&#8217;s PL/SQL</p>
<pre>select 2

select sysdate --  getdate()in SQL Server</pre>
<p>Unlike with SQL Server that code won&#8217;t run in Oracle, Oracle requires the use of the FROM clause in its syntax. This is why Oracle has the DUAL table.</p>
<p>If you try to run something like this</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
</pre></td><td class="de1"><pre class="de1"><span class="kw1">select</span> <span class="nu0">2</span>;</pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">select 2;</pre></div></div>

<p>you will get the following error</p>
<p><em>ORA-00923: FROM keyword not found where expected<br />
00923. 00000 &#8211;  &#8220;FROM keyword not found where expected&#8221;</em></p>
<p>I decided to see where the Dual table came from.</p>
<p>From wikipedia</p>
<blockquote><p>The DUAL table was created by Charles Weiss of Oracle corporation to provide a table for joining in internal views:</p>
<p>I created the DUAL table as an underlying object in the Oracle Data Dictionary. It was never meant to be seen itself, but instead used inside a view that was expected to be queried. The idea was that you could do a JOIN to the DUAL table and create two rows in the result for every one row in your table. Then, by using GROUP BY, the resulting join could be summarized to show the amount of storage for the DATA extent and for the INDEX extent(s). The name, DUAL, seemed apt for the process of creating a pair of rows from just one.</p>
<p>The original DUAL table had two rows in it (hence its name), but subsequently it only had one row.</p></blockquote>
<p>Running the following code</p>
<pre>select * from dual;</pre>
<p>Give you a resultset of 1 row with 1 column named DUMMY with the value X</p>
<p><a href="/wp-content/uploads/blogs/DataMgmt/Denis/Oracle/OracleDual.PNG?mtime=1357485931"><img alt="" src="/wp-content/uploads/blogs/DataMgmt/Denis/Oracle/OracleDual.PNG?mtime=1357485931" width="315" height="74" /></a></p>
<p>So there you have it, this is why the Dual table exists.</p>
<p>If you need to do something like this</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
</pre></td><td class="de1"><pre class="de1"><span class="kw1">SELECT</span> <span class="nu0">3</span><span class="sy0">/</span><span class="nu0">2</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">SELECT 3/2</pre></div></div>

<p>in Oracle it needs to be </p>
<pre>SELECT 3/2 from dual;</pre>
<p>However Oracle returns 1.5 while SQL Server will return 1, SQL Server does integer math and Oracle does not. That is another difference you need to be aware of, this is more problematic when moving from Oracle SQL Server and then wondering where all the decimals went.</p>
]]></content:encoded>
			<wfw:commentRss>/index.php/datamgmt/dbadmin/mssqlserveradmin/what-is-the-dual-table/feed/</wfw:commentRss>
		<slash:comments>1</slash:comments>
		</item>
		<item>
		<title>Differences between Oracle and SQL Server when working with NULL and blank values</title>
		<link>/index.php/datamgmt/dbadmin/mssqlserveradmin/differences-between-oracle-and-sql/</link>
		<comments>/index.php/datamgmt/dbadmin/mssqlserveradmin/differences-between-oracle-and-sql/#comments</comments>
		<pubDate>Sun, 06 Jan 2013 09:45:00 +0000</pubDate>
		<dc:creator><![CDATA[SQLDenis]]></dc:creator>
				<category><![CDATA[Microsoft SQL Server]]></category>
		<category><![CDATA[Microsoft SQL Server Admin]]></category>
		<category><![CDATA[Oracle]]></category>
		<category><![CDATA[Oracle Admin]]></category>
		<category><![CDATA[gotcha]]></category>
		<category><![CDATA[null]]></category>
		<category><![CDATA[oracle]]></category>
		<category><![CDATA[sql server]]></category>
		<category><![CDATA[tip]]></category>

		<guid isPermaLink="false">/index.php/2013/01/differences-between-oracle-and-sql/</guid>
		<description><![CDATA[If you ever have to start working with Oracle you have to keep in mind that NULLs and blank values don't work exactly the same as in SQL Server. Let's take a look at some examples

Create this table and insert some rows
create table TestNull(Col2 var&#8230;]]></description>
				<content:encoded><![CDATA[<p>If you ever have to start working with Oracle you have to keep in mind that NULLs and blank values don&#8217;t work exactly the same as in SQL Server. Let&#8217;s take a look at some examples</p>
<p>Create this table and insert some rows</p>
<pre>create table TestNull(Col2 varchar(100));
insert into TestNull values(NULL);
insert into TestNull values('Bla');
insert into TestNull values('');
insert into TestNull values(' ');</pre>
<p>As you can see we inserted four rows, one row is null, one row is blank, one row has a space and one row has Bla.</p>
<p>Now let&#8217;s run the following query</p>
<pre>SELECT Col2,
  NVL(Col2,'EmptyOrNull') a,
  COALESCE(Col2,'EmptyOrNull') b,
  ascii(col2) c
FROM TestNull;</pre>
<p>Here are the results in a html table</p>
<div class="tables">
<table border="1">
<tr>
<th>COL2</th>
<th>	A</th>
<th>	B</th>
<th>	C</th>
</tr>
<tr>
<td>null</td>
<td>	EmptyOrNull</td>
<td>	EmptyOrNull</td>
<td>null</td>
</tr>
<tr>
<td>Bla</td>
<td>	Bla</td>
<td>	Bla</td>
<td>	66</td>
</tr>
<tr>
<td>null</td>
<td>	EmptyOrNull</td>
<td>	EmptyOrNull</td>
<td>null</td>
</tr>
<tr>
<td> </td>
<td>	 </td>
<td>	 </td>
<td>	32</td>
</tr>
</table>
</div>
<p>Here is an image of the same results<br />
<a href="/wp-content/uploads/blogs/DataMgmt/Denis/Oracle/OracleResults.PNG?mtime=1357471831"><img alt="Oracle SQL Developer Results" title="Oracle SQL Developer Results" src="/wp-content/uploads/blogs/DataMgmt/Denis/Oracle/OracleResults.PNG?mtime=1357471831" width="318" height="135" /></a></p>
<p>See what happened, Oracle changed the blanks to NULLs. </p>
<p>We can easily test this theory, let&#8217;s create a table with a column that has a not null constraint</p>
<pre>create table TestNull2(Col2 varchar(100) not null);</pre>
<p>Now of course if you try to insert a NULL it will blow up</p>
<pre>insert into TestNull2 values(NULL);</pre>
<p>Here is the error<br />
<em>SQL Error: ORA-01400: cannot insert NULL into (&#8220;SYSTEM&#8221;.&#8221;TESTNULL2&#8243;.&#8221;COL2&#8243;)<br />
01400. 00000 &#8211;  &#8220;cannot insert NULL into (%s)&#8221;</em></p>
<p>Inserting Bla works without a problem</p>
<pre>insert into TestNull2 values('Bla');</pre>
<p>What about a blank, what will happen now?</p>
<pre>insert into TestNull2 values('');</pre>
<p><em>SQL Error: ORA-01400: cannot insert NULL into (&#8220;SYSTEM&#8221;.&#8221;TESTNULL2&#8243;.&#8221;COL2&#8243;)<br />
01400. 00000 &#8211;  &#8220;cannot insert NULL into (%s)&#8221;</em></p>
<p>As you can see the blank gets converted to a NULL and you get the same error. This is very different from SQL Server.</p>
<p>Will a space succeed?</p>
<pre>insert into TestNull2 values(' ');</pre>
<p>A space is no problem.</p>
<p><strong>Coalesce differences</strong><br />
Just be aware that coalesce won&#8217;t work the same either. Oracle doesn&#8217;t have isnull but it has the nvl function instead</p>
<p>Run the following two statements</p>
<pre>select nvl('','No') as a
from dual;</pre>
<pre>select coalesce('','No') as a
from dual;</pre>
<p>In both cases you are getting No back from the function, as you can see a blank is treated as null.</p>
<p>Be aware of these differences between Oracle and SQL Server, you could have some strange results back from queries if you assume it works the same</p>
<p>We will take a look at that strange table <em>dual </em>in another post</p>
]]></content:encoded>
			<wfw:commentRss>/index.php/datamgmt/dbadmin/mssqlserveradmin/differences-between-oracle-and-sql/feed/</wfw:commentRss>
		<slash:comments>1</slash:comments>
		</item>
		<item>
		<title>How to call a user defined function with a default parameter</title>
		<link>/index.php/datamgmt/datadesign/how-to-call-a-user/</link>
		<comments>/index.php/datamgmt/datadesign/how-to-call-a-user/#respond</comments>
		<pubDate>Fri, 02 Dec 2011 13:15:00 +0000</pubDate>
		<dc:creator><![CDATA[SQLDenis]]></dc:creator>
				<category><![CDATA[Data Modelling and Design]]></category>
		<category><![CDATA[Database Programming]]></category>
		<category><![CDATA[Microsoft SQL Server]]></category>
		<category><![CDATA[function]]></category>
		<category><![CDATA[gotcha]]></category>
		<category><![CDATA[sql server 2005]]></category>
		<category><![CDATA[sql server 2008]]></category>
		<category><![CDATA[tip]]></category>

		<guid isPermaLink="false">/index.php/2011/12/how-to-call-a-user/</guid>
		<description><![CDATA[Someone had some trouble earlier today with calling a user defined function that has a default value for a parameter

When you have a stored procedure with default values for parameters, you can omit those when calling the proc. With user defined func&#8230;]]></description>
				<content:encoded><![CDATA[<p>Someone had some trouble earlier today with <a href="http://stackoverflow.com/questions/8358315/tsql-fuction-with-default-parameters">calling a user defined function that has a default value for a parameter</a></p>
<p>When you have a stored procedure with default values for parameters, you can omit those when calling the proc. With user defined functions, it works a little different, let&#8217;s take a look.</p>
<p>First create this simple function</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
</pre></td><td class="de1"><pre class="de1"><span class="kw1">CREATE</span> <span class="kw1">FUNCTION</span> dbo.<span class="me1">fnTest</span><span class="br0">&#40;</span>@param1 <span class="kw1">INT</span>, @param2 <span class="kw1">int</span> <span class="sy0">=</span> <span class="nu0">1</span> <span class="br0">&#41;</span>
<span class="kw1">RETURNS</span> <span class="kw1">int</span>
<span class="kw1">AS</span>
<span class="kw1">BEGIN</span>
&nbsp; &nbsp; 
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">RETURN</span> @param2
&nbsp; &nbsp; 
<span class="kw1">END</span>
GO</pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">CREATE FUNCTION dbo.fnTest(@param1 INT, @param2 int = 1 )
RETURNS int
AS
BEGIN
    
        RETURN @param2
    
END
GO</pre></div></div>

<p>As you can see @param2 has a default of 1.</p>
<p>Calling the function by supplying both parameters works as expected</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
</pre></td><td class="de1"><pre class="de1"><span class="kw1">SELECT</span> dbo.<span class="me1">fnTest</span><span class="br0">&#40;</span> &nbsp;<span class="nu0">23</span>,<span class="nu0">3</span> <span class="br0">&#41;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">SELECT dbo.fnTest(  23,3 )</pre></div></div>

<p>Output<br />
&#8212;&#8212;&#8212;&#8212;-<br />
3</p>
<p>Now try to do this</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
</pre></td><td class="de1"><pre class="de1"><span class="kw1">SELECT</span> dbo.<span class="me1">fnTest</span><span class="br0">&#40;</span> &nbsp;<span class="nu0">23</span> <span class="br0">&#41;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">SELECT dbo.fnTest(  23 )</pre></div></div>

<p>Here is the error message that we get back</p>
<p><em>Msg 313, Level 16, State 2, Line 1<br />
An insufficient number of arguments were supplied for the procedure or function dbo.fnTest.</em></p>
<p>If you look in books on line: http://msdn.microsoft.com/en-us/library/ms186755.aspx<br />
You will see the following text</p>
<blockquote><p>If a default value is defined, the function can be executed without specifying a value for that parameter.</p>
<p>When a parameter of the function has a default value, <strong>the keyword DEFAULT must be specified</strong> when the function is called in order to retrieve the default value. This behavior is different from using parameters with default values in stored procedures in which omitting the parameter also implies the default value. An exception to this behavior is when invoking a scalar function by using the EXECUTE statement. When using EXECUTE, the DEFAULT keyword is not required.</p></blockquote>
<p>So, let&#8217;s try that</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
</pre></td><td class="de1"><pre class="de1"><span class="kw1">SELECT</span> dbo.<span class="me1">fnTest</span><span class="br0">&#40;</span> &nbsp;<span class="nu0">23</span>, <span class="kw1">default</span> <span class="br0">&#41;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">SELECT dbo.fnTest(  23, default )</pre></div></div>

<p>Output<br />
&#8212;&#8212;&#8212;&#8212;-<br />
1</p>
<p>There you have it, works like a charm</p>
]]></content:encoded>
			<wfw:commentRss>/index.php/datamgmt/datadesign/how-to-call-a-user/feed/</wfw:commentRss>
		<slash:comments>0</slash:comments>
		</item>
		<item>
		<title>SQL Advent 2011 Day 1: Date and time</title>
		<link>/index.php/datamgmt/datadesign/sql-advent-2011-day-1/</link>
		<comments>/index.php/datamgmt/datadesign/sql-advent-2011-day-1/#comments</comments>
		<pubDate>Thu, 01 Dec 2011 09:30:00 +0000</pubDate>
		<dc:creator><![CDATA[SQLDenis]]></dc:creator>
				<category><![CDATA[Data Modelling and Design]]></category>
		<category><![CDATA[Database Programming]]></category>
		<category><![CDATA[Microsoft SQL Server]]></category>
		<category><![CDATA[Microsoft SQL Server Admin]]></category>
		<category><![CDATA[dates]]></category>
		<category><![CDATA[datetime]]></category>
		<category><![CDATA[datetime2]]></category>
		<category><![CDATA[gotcha]]></category>
		<category><![CDATA[sql server 2008]]></category>
		<category><![CDATA[time]]></category>

		<guid isPermaLink="false">/index.php/2011/12/sql-advent-2011-day-1/</guid>
		<description><![CDATA[In my Are you ready for SQL Server 2012 or are you still partying like it is 1999? post, I wrote about how you should start using SQL Server 2005 and SQL Server 2008 functionality now in order to prepare for SQL Server 2012. I still see tons of code tha&#8230;]]></description>
				<content:encoded><![CDATA[<p>In my <a href="/index.php/DataMgmt/DataDesign/are-you-ready-for-sql">Are you ready for SQL Server 2012 or are you still partying like it is 1999?</a> post, I wrote about how you should start using SQL Server 2005 and SQL Server 2008 functionality now in order to prepare for SQL Server 2012. I still see tons of code that is written in the pre 2005 style and people still keep using those functions, procs and statements even though SQL Server 2005 and 2008 have much better functionality.</p>
<p>In day 1 of our 25 days of SQL improvements/upgrades we will talk about dates and time. I remember my first day at a job, I looked at some of the biggest tables and all the dates were stored as integers. My first though was WTF? Then I learned that they couldn&#8217;t use smalldates because they needed dates before 1900-01-01 and in order to save 4 bytes per row it was decided to use integers instead of the datetime datatype. Using integers instead of dates opens a nice big can of worms, first you can&#8217;t use date arithmetic, and if you do arithmetic you might get invalid dates, second anyone can insert invalid dates.</p>
<p>Lucky for you SQL Server 2008 introduced 4 new date related data types, these are date, datetime2, time and datetimeoffset. In this post I will only look at date, datetime2 and time.</p>
<h2>Date</h2>
<hr />
The date data type only stores the date portion of a regular datetime. If you run the following on November 30th 2011</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
</pre></td><td class="de1"><pre class="de1"><span class="kw1">declare</span> @d <span class="kw1">date</span> <span class="sy0">=</span> <span class="kw2">getdate</span><span class="br0">&#40;</span><span class="br0">&#41;</span>
<span class="kw1">select</span> @d</pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">declare @d date = getdate()
select @d</pre></div></div>

<p>You get back the following<br />
2011-11-30</p>
<p>The nice thing about the date datatype is that the range spans from January 1, 1 A.D. through December 31, 9999 A.D.<br />
No problem running this</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
</pre></td><td class="de1"><pre class="de1"><span class="kw1">declare</span> @d <span class="kw1">date</span> <span class="sy0">=</span> <span class="st0">'1600-01-01'</span>
<span class="kw1">select</span> @d</pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">declare @d date = '1600-01-01'
select @d</pre></div></div>

<p>If you tried that with a datetime, you will get the following friendly message<br />
<em>Msg 242, Level 16, State 3, Line 1<br />
The conversion of a varchar data type to a datetime data type resulted in an out-of-range value.</em></p>
<p>It takes only 3 bytes to store a date, so if you only need to store the date portion you will save 5 bytes compared to a datetime, you will even save space if you switch from integers</p>
<p>If you are used to add or subtract dates by using +1 or -1, be warned</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
</pre></td><td class="de1"><pre class="de1"><span class="kw1">declare</span> @d <span class="kw1">datetime</span> <span class="sy0">=</span> <span class="st0">'2011-11-30'</span>
<span class="kw1">select</span> @d <span class="sy0">+</span> <span class="nu0">1</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">declare @d datetime = '2011-11-30'
select @d + 1</pre></div></div>

<p>2011-12-01 00:00:00.000</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
</pre></td><td class="de1"><pre class="de1"><span class="kw1">declare</span> @d <span class="kw1">date</span> <span class="sy0">=</span> <span class="st0">'2011-11-30'</span>
<span class="kw1">select</span> @d <span class="sy0">+</span> <span class="nu0">1</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">declare @d date = '2011-11-30'
select @d + 1</pre></div></div>

<p><em>Msg 206, Level 16, State 2, Line 2<br />
Operand type clash: date is incompatible with int</em></p>
<p>You should be using DATEADD instead, like this</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
</pre></td><td class="de1"><pre class="de1"><span class="kw1">declare</span> @d <span class="kw1">date</span> <span class="sy0">=</span> <span class="st0">'2011-11-30'</span>
<span class="kw1">select</span> <span class="kw2">DATEADD</span> <span class="br0">&#40;</span>dd,<span class="nu0">1</span>,@d<span class="br0">&#41;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">declare @d date = '2011-11-30'
select DATEADD (dd,1,@d)</pre></div></div>

<p>See also this post which has some more detail <a href="/index.php/DataMgmt/DataDesign/operand-type-clash-date-is-incompatible--2008">Operand type clash: date is incompatible with int error when trying to do +1 on a date data type in SQL Server 2008</a></p>
<h2>Time</h2>
<hr />
The time data type will only hold the time portion of a datetime2, the range goes from 00:00:00.0000000 through 23:59:59.9999999. This was a very needed data type, now you can store the date and the time separate and if you index both columns, you will get much better performance than if you used just a datetime column</p>
<p>You can specify precision for the time data type, in the code below you can see the output for all precisions between 0 and 7</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
</pre></td><td class="de1"><pre class="de1"><span class="kw1">declare</span> @d <span class="kw1">time</span> <span class="sy0">=</span><span class="st0">'2011-11-30 19:23:52.1234567'</span>
&nbsp;
<span class="kw1">select</span> <span class="st0">'(0)'</span>, <span class="kw1">convert</span><span class="br0">&#40;</span><span class="kw1">time</span><span class="br0">&#40;</span><span class="nu0">0</span><span class="br0">&#41;</span>,@d<span class="br0">&#41;</span> <span class="kw1">union</span> all
<span class="kw1">select</span> <span class="st0">'(1)'</span>, <span class="kw1">convert</span><span class="br0">&#40;</span><span class="kw1">time</span><span class="br0">&#40;</span><span class="nu0">1</span><span class="br0">&#41;</span>,@d<span class="br0">&#41;</span> <span class="kw1">union</span> all
<span class="kw1">select</span> <span class="st0">'(2)'</span>, <span class="kw1">convert</span><span class="br0">&#40;</span><span class="kw1">time</span><span class="br0">&#40;</span><span class="nu0">2</span><span class="br0">&#41;</span>,@d<span class="br0">&#41;</span> <span class="kw1">union</span> all
<span class="kw1">select</span> <span class="st0">'(3)'</span>, <span class="kw1">convert</span><span class="br0">&#40;</span><span class="kw1">time</span><span class="br0">&#40;</span><span class="nu0">3</span><span class="br0">&#41;</span>,@d<span class="br0">&#41;</span> <span class="kw1">union</span> all
<span class="kw1">select</span> <span class="st0">'(4)'</span>, <span class="kw1">convert</span><span class="br0">&#40;</span><span class="kw1">time</span><span class="br0">&#40;</span><span class="nu0">4</span><span class="br0">&#41;</span>,@d<span class="br0">&#41;</span> <span class="kw1">union</span> all 
<span class="kw1">select</span> <span class="st0">'(5)'</span>, <span class="kw1">convert</span><span class="br0">&#40;</span><span class="kw1">time</span><span class="br0">&#40;</span><span class="nu0">5</span><span class="br0">&#41;</span>,@d<span class="br0">&#41;</span> <span class="kw1">union</span> all
<span class="kw1">select</span> <span class="st0">'(6)'</span>, <span class="kw1">convert</span><span class="br0">&#40;</span><span class="kw1">time</span><span class="br0">&#40;</span><span class="nu0">6</span><span class="br0">&#41;</span>,@d<span class="br0">&#41;</span> <span class="kw1">union</span> all
<span class="kw1">select</span> <span class="st0">'(7)'</span>, <span class="kw1">convert</span><span class="br0">&#40;</span><span class="kw1">time</span><span class="br0">&#40;</span><span class="nu0">7</span><span class="br0">&#41;</span>,@d<span class="br0">&#41;</span> <span class="kw1">union</span> all
<span class="kw1">select</span> <span class="st0">'@d'</span>, <span class="kw1">convert</span><span class="br0">&#40;</span><span class="kw1">time</span>,@d<span class="br0">&#41;</span> <span class="kw1">union</span> all
<span class="kw1">select</span> <span class="st0">'--'</span>, &nbsp; @d</pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">declare @d time ='2011-11-30 19:23:52.1234567'

select '(0)', convert(time(0),@d) union all
select '(1)', convert(time(1),@d) union all
select '(2)', convert(time(2),@d) union all
select '(3)', convert(time(3),@d) union all
select '(4)', convert(time(4),@d) union all 
select '(5)', convert(time(5),@d) union all
select '(6)', convert(time(6),@d) union all
select '(7)', convert(time(7),@d) union all
select '@d', convert(time,@d) union all
select '--',   @d</pre></div></div>

<p>Output</p>
<pre>(0)	19:23:52.0000000
(1)	19:23:52.1000000
(2)	19:23:52.1200000
(3)	19:23:52.1230000
(4)	19:23:52.1235000
(5)	19:23:52.1234600
(6)	19:23:52.1234570
(7)	19:23:52.1234567
@d	19:23:52.1234567
--	19:23:52.1234567</pre>
<p>
If you combine time and datetime by way of a UNION then you will get datetime2 for both</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
</pre></td><td class="de1"><pre class="de1"><span class="kw1">declare</span> @d datetime2 <span class="sy0">=</span><span class="st0">'2011-11-30 19:23:52.5433840'</span>
<span class="kw1">select</span> <span class="kw1">convert</span><span class="br0">&#40;</span><span class="kw1">time</span>,@d<span class="br0">&#41;</span> 
<span class="kw1">union</span> all
<span class="kw1">select</span> @d</pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">declare @d datetime2 ='2011-11-30 19:23:52.5433840'
select convert(time,@d) 
union all
select @d</pre></div></div>

<p>Output</p>
<p>1900-01-01 19:23:52.5433840<br />
2011-11-30 19:23:52.5433840</p>
<h2>Datetime2</h2>
<hr />
The datetime2 data type has a range of January 1,1 AD through December 31, 9999 AD for the date and 00:00:00 through 23:59:59.9999999 for the time.<br />
Just like with the time data type, you can specify the precision, if you don&#8217;t specify anything then the 7 is assumed. Let&#8217;s take a look, run the following code</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
</pre></td><td class="de1"><pre class="de1"><span class="kw1">declare</span> @d datetime2 <span class="sy0">=</span><span class="st0">'2011-11-30 19:23:52.1234567'</span>
&nbsp;
<span class="kw1">select</span> <span class="st0">'(0)'</span>, <span class="kw1">convert</span><span class="br0">&#40;</span>datetime2<span class="br0">&#40;</span><span class="nu0">0</span><span class="br0">&#41;</span>,@d<span class="br0">&#41;</span> <span class="kw1">union</span> all
<span class="kw1">select</span> <span class="st0">'(1)'</span>, <span class="kw1">convert</span><span class="br0">&#40;</span>datetime2<span class="br0">&#40;</span><span class="nu0">1</span><span class="br0">&#41;</span>,@d<span class="br0">&#41;</span> <span class="kw1">union</span> all
<span class="kw1">select</span> <span class="st0">'(2)'</span>, <span class="kw1">convert</span><span class="br0">&#40;</span>datetime2<span class="br0">&#40;</span><span class="nu0">2</span><span class="br0">&#41;</span>,@d<span class="br0">&#41;</span> <span class="kw1">union</span> all
<span class="kw1">select</span> <span class="st0">'(3)'</span>, <span class="kw1">convert</span><span class="br0">&#40;</span>datetime2<span class="br0">&#40;</span><span class="nu0">3</span><span class="br0">&#41;</span>,@d<span class="br0">&#41;</span> <span class="kw1">union</span> all
<span class="kw1">select</span> <span class="st0">'(4)'</span>, <span class="kw1">convert</span><span class="br0">&#40;</span>datetime2<span class="br0">&#40;</span><span class="nu0">4</span><span class="br0">&#41;</span>,@d<span class="br0">&#41;</span> <span class="kw1">union</span> all 
<span class="kw1">select</span> <span class="st0">'(5)'</span>, <span class="kw1">convert</span><span class="br0">&#40;</span>datetime2<span class="br0">&#40;</span><span class="nu0">5</span><span class="br0">&#41;</span>,@d<span class="br0">&#41;</span> <span class="kw1">union</span> all
<span class="kw1">select</span> <span class="st0">'(6)'</span>, <span class="kw1">convert</span><span class="br0">&#40;</span>datetime2<span class="br0">&#40;</span><span class="nu0">6</span><span class="br0">&#41;</span>,@d<span class="br0">&#41;</span> <span class="kw1">union</span> all
<span class="kw1">select</span> <span class="st0">'(7)'</span>, <span class="kw1">convert</span><span class="br0">&#40;</span>datetime2<span class="br0">&#40;</span><span class="nu0">7</span><span class="br0">&#41;</span>,@d<span class="br0">&#41;</span> <span class="kw1">union</span> all
<span class="kw1">select</span> <span class="st0">'@d'</span>, <span class="kw1">convert</span><span class="br0">&#40;</span>datetime2,@d<span class="br0">&#41;</span> <span class="kw1">union</span> all
<span class="kw1">select</span> <span class="st0">'--'</span>, &nbsp; @d</pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">declare @d datetime2 ='2011-11-30 19:23:52.1234567'

select '(0)', convert(datetime2(0),@d) union all
select '(1)', convert(datetime2(1),@d) union all
select '(2)', convert(datetime2(2),@d) union all
select '(3)', convert(datetime2(3),@d) union all
select '(4)', convert(datetime2(4),@d) union all 
select '(5)', convert(datetime2(5),@d) union all
select '(6)', convert(datetime2(6),@d) union all
select '(7)', convert(datetime2(7),@d) union all
select '@d', convert(datetime2,@d) union all
select '--',   @d</pre></div></div>

<p>Output</p>
<pre>(0)	2011-11-30 19:23:52.0000000
(1)	2011-11-30 19:23:52.1000000
(2)	2011-11-30 19:23:52.1200000
(3)	2011-11-30 19:23:52.1230000
(4)	2011-11-30 19:23:52.1235000
(5)	2011-11-30 19:23:52.1234600
(6)	2011-11-30 19:23:52.1234570
(7)	2011-11-30 19:23:52.1234567
@d	2011-11-30 19:23:52.1234567
--	2011-11-30 19:23:52.1234567</pre>
<p>Just as with dates, you can&#8217;t do something like this</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
</pre></td><td class="de1"><pre class="de1"><span class="kw1">declare</span> @d datetime2 <span class="sy0">=</span> <span class="st0">'2011-11-30'</span>
<span class="kw1">select</span> @d <span class="sy0">+</span> <span class="nu0">1</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">declare @d datetime2 = '2011-11-30'
select @d + 1</pre></div></div>

<p>You need to use the DATEADD function instead</p>
<p>If you want to use the current date and time and store that in a datetime variable then make sure not to use GETDATE, use SYSDATETIME instead</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
</pre></td><td class="de1"><pre class="de1"><span class="kw1">declare</span> @d2 datetime2 <span class="sy0">=</span> <span class="kw2">getdate</span><span class="br0">&#40;</span><span class="br0">&#41;</span>
<span class="kw1">select</span> @d2,<span class="kw2">getdate</span><span class="br0">&#40;</span><span class="br0">&#41;</span>
GO
&nbsp;
<span class="kw1">declare</span> @d2 datetime2 <span class="sy0">=</span> SYSDATETIME<span class="br0">&#40;</span><span class="br0">&#41;</span>
<span class="kw1">select</span> @d2,SYSDATETIME<span class="br0">&#40;</span><span class="br0">&#41;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">declare @d2 datetime2 = getdate()
select @d2,getdate()
GO

declare @d2 datetime2 = SYSDATETIME()
select @d2,SYSDATETIME()</pre></div></div>

<p>Output</p>
<pre>2011-11-30 21:14:07.0430000	2011-11-30 21:14:07.043
2011-11-30 21:14:07.1277166	2011-11-30 21:14:07.1277166</pre>
<p>As you can see, when using GETDATE, the full precision is not captured.<br />
If you want to use UTC date and time then use SYSUTCDATETIME instead of GETUTCDATE</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
</pre></td><td class="de1"><pre class="de1"><span class="kw1">select</span> SYSUTCDATETIME<span class="br0">&#40;</span><span class="br0">&#41;</span>, <span class="kw2">GETUTCDATE</span><span class="br0">&#40;</span><span class="br0">&#41;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">select SYSUTCDATETIME(), GETUTCDATE()</pre></div></div>

<p>Output</p>
<pre>2011-12-01 02:17:05.7909356	2011-12-01 02:17:05.790</pre>
<p>
If you have any code like this </p>
<pre>select DATEADD(ms,-3,'20111201')</pre>
<p>2011-11-30 23:59:59.997</p>
<p>That code is used to specify the end boundary of a range so that between can be used. You will be missing some rows if you use the higher precision</p>
<p>Always use >= @date1 AND < @date2, where @date2 in this case would be 2011-12-01, this is safe for all the date data types



That is it for day 1, hopefully you have picked up a tip or two, come back tomorrow for post number two
</p>
]]></content:encoded>
			<wfw:commentRss>/index.php/datamgmt/datadesign/sql-advent-2011-day-1/feed/</wfw:commentRss>
		<slash:comments>4</slash:comments>
		</item>
		<item>
		<title>When changing column data types use ALTER TABLE TableName ALTER Column syntax, don&#8217;t drop and recreate column</title>
		<link>/index.php/datamgmt/datadesign/when-changing-column-data-types/</link>
		<comments>/index.php/datamgmt/datadesign/when-changing-column-data-types/#comments</comments>
		<pubDate>Sun, 10 Apr 2011 22:27:00 +0000</pubDate>
		<dc:creator><![CDATA[SQLDenis]]></dc:creator>
				<category><![CDATA[Data Modelling and Design]]></category>
		<category><![CDATA[Database Programming]]></category>
		<category><![CDATA[Microsoft SQL Server]]></category>
		<category><![CDATA[Microsoft SQL Server Admin]]></category>
		<category><![CDATA[dates]]></category>
		<category><![CDATA[datetime]]></category>
		<category><![CDATA[datetime2]]></category>
		<category><![CDATA[gotcha]]></category>
		<category><![CDATA[sql server 2008]]></category>

		<guid isPermaLink="false">/index.php/2011/04/when-changing-column-data-types/</guid>
		<description><![CDATA[Someone asked how to change the data type from datetime to datetime2

Someone else answered the following

You could add the new column.

UPDATE Table SET NewColumn = OldColumn

delete the old column

then rename the new column.

This of cou&#8230;]]></description>
				<content:encoded><![CDATA[<p>Someone asked how to <a href="http://stackoverflow.com/questions/5581639/convert-datetime-column-to-datetime2-column-in-sql-server/5581702#5581702">change the data type from datetime to datetime2</a></p>
<p>Here is the question</p>
<blockquote><p>I have a SQL Server 2005 database with a datetime column. There is already data in the table but now the customer needs dates before 1753. So I decided to migrate the database to a SQL Server 2008 to use the datetime2 type.</p>
<p>However I can&#8217;t just switch the type of the column from datetime to datetime2. Is there a way to do this conversion or do I have to reimport the data?<br />
Someone else answered the following</p></blockquote>
<p>Here is an answer that this person got from someone</p>
<blockquote><p>You could add the new column.</p>
<p>UPDATE Table SET NewColumn = OldColumn</p>
<p>delete the old column</p>
<p>then rename the new column.</p></blockquote>
<p>This of course is highly inefficient. Just imagine running that suggestion on a table with millions or billions of rows.</p>
<p>My approach would be to do this instead: <em>ALTER TABLE TableName ALTER COLUMN ColumnName datetime2</em></p>
<p>Let&#8217;s take a closer look at the T-SQL needed for this</p>
<p>First create the following table and insert one row</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
</pre></td><td class="de1"><pre class="de1"><span class="kw1">USE</span> tempdb
GO
&nbsp;
<span class="kw1">CREATE</span> <span class="kw1">TABLE</span> Test<span class="br0">&#40;</span>SomeDate <span class="kw1">DATETIME</span><span class="br0">&#41;</span>
<span class="kw1">INSERT</span> Test <span class="kw1">values</span> <span class="br0">&#40;</span><span class="st0">'20110410'</span><span class="br0">&#41;</span>
&nbsp;
<span class="kw1">SELECT</span> <span class="sy0">*</span> <span class="kw1">FROM</span> Test
GO</pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">USE tempdb
GO

CREATE TABLE Test(SomeDate DATETIME)
INSERT Test values ('20110410')

SELECT * FROM Test
GO</pre></div></div>

<p>Output<br />
&#8212;&#8212;&#8212;&#8212;&#8212;&#8211;<br />
2011-04-10 00:00:00.000</p>
<p>Datetime accepts dates in the range from January 1, 1753, through December 31, 9999. If you try to insert a value before January 1, 1753, it will fail<br />
Run the code below which will try to insert January 1, 1600, to see the error</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
</pre></td><td class="de1"><pre class="de1"><span class="kw1">INSERT</span> Test <span class="kw1">values</span> <span class="br0">&#40;</span><span class="st0">'16000101'</span><span class="br0">&#41;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">INSERT Test values ('16000101')</pre></div></div>

<p><em>Msg 242, Level 16, State 3, Line 1<br />
The conversion of a varchar data type to a datetime data type resulted in an out-of-range value.</em></p>
<p>Now we will change the column from datetime to datetime2.<br />
The syntax looks like this</p>
<p><em>ALTER TABLE &lt;TableName&gt; ALTER column &lt;ColumnName&gt; &lt;New date type&gt;</em></p>
<p>For our table the syntax will be the following: <em>ALTER TABLE Test ALTER column SomeDate datetime2</em><br />
Run the code below to make that happen</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
</pre></td><td class="de1"><pre class="de1"><span class="kw1">ALTER</span> <span class="kw1">TABLE</span> Test <span class="kw1">ALTER</span> <span class="kw1">column</span> SomeDate datetime2
GO</pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">ALTER TABLE Test ALTER column SomeDate datetime2
GO</pre></div></div>

<p>So now, if we try to insert January 1, 1600, it should succeeed</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
</pre></td><td class="de1"><pre class="de1"><span class="kw1">INSERT</span> Test <span class="kw1">values</span> <span class="br0">&#40;</span><span class="st0">'16000101'</span><span class="br0">&#41;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">INSERT Test values ('16000101')</pre></div></div>

<p>Now, you can look what is in the table</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
</pre></td><td class="de1"><pre class="de1"><span class="kw1">SELECT</span> <span class="sy0">*</span> <span class="kw1">FROM</span> Test
GO</pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">SELECT * FROM Test
GO</pre></div></div>

<p>Output<br />
&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;<br />
2011-04-10 00:00:00.0000000<br />
1600-01-01 00:00:00.0000000</p>
<p>Just be aware that if you are changing data types, make sure that what you change to can hold the current values. If you are changing from varchar to integer, make sure you only have values that can be converted to integers, the operation will fail if they can&#8217;t be converted to integers.</p>
<h2>Conclusion</h2>
<p>Learn the product and learn it well. Don&#8217;t overly depend on the wizards in SSMS, and if you use SSMS, hit the Script button to see what kind of T-SQL SSMS generates.</p>
<p>The wizards are nice but sometimes they get it wrong. Here is the code that the wizard generates to change the column</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
</pre></td><td class="de1"><pre class="de1"><span class="coMULTI">/* To prevent any potential data loss issues, you should review this script in detail before running it outside the context of the database designer.*/</span>
<span class="kw1">BEGIN</span> <span class="kw1">TRANSACTION</span>
<span class="kw1">SET</span> QUOTED_IDENTIFIER <span class="kw1">ON</span>
<span class="kw1">SET</span> ARITHAB<span class="sy0">OR</span>T <span class="kw1">ON</span>
<span class="kw1">SET</span> NUMERIC_ROUNDAB<span class="sy0">OR</span>T <span class="kw1">OFF</span>
<span class="kw1">SET</span> CONCAT_<span class="sy0">NULL</span>_YIELDS_<span class="sy0">NULL</span> <span class="kw1">ON</span>
<span class="kw1">SET</span> ANSI_<span class="sy0">NULL</span>S <span class="kw1">ON</span>
<span class="kw1">SET</span> ANSI_PADD<span class="sy0">IN</span>G <span class="kw1">ON</span>
<span class="kw1">SET</span> ANSI_WARN<span class="sy0">IN</span>GS <span class="kw1">ON</span>
<span class="kw1">COMMIT</span>
<span class="kw1">BEGIN</span> <span class="kw1">TRANSACTION</span>
GO
<span class="kw1">CREATE</span> <span class="kw1">TABLE</span> dbo.<span class="me1">Tmp_Test</span>
&nbsp; &nbsp; <span class="br0">&#40;</span>
&nbsp; &nbsp; SomeDate datetime2<span class="br0">&#40;</span><span class="nu0">7</span><span class="br0">&#41;</span> <span class="sy0">NULL</span>
&nbsp; &nbsp; <span class="br0">&#41;</span> &nbsp;<span class="kw1">ON</span> <span class="br0">&#91;</span><span class="kw1">PRIMARY</span><span class="br0">&#93;</span>
GO
<span class="kw1">ALTER</span> <span class="kw1">TABLE</span> dbo.<span class="me1">Tmp_Test</span> <span class="kw1">SET</span> <span class="br0">&#40;</span>LOCK_ESCALATION <span class="sy0">=</span> <span class="kw1">TABLE</span><span class="br0">&#41;</span>
GO
<span class="kw1">IF</span> <span class="sy0">EXISTS</span><span class="br0">&#40;</span><span class="kw1">SELECT</span> <span class="sy0">*</span> <span class="kw1">FROM</span> dbo.<span class="me1">Test</span><span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp;<span class="kw1">EXEC</span><span class="br0">&#40;</span><span class="st0">'INSERT INTO dbo.Tmp_Test (SomeDate)</span>
<span class="st0">&nbsp; &nbsp; &nbsp; &nbsp; SELECT CONVERT(datetime2(7), SomeDate) FROM dbo.Test WITH (HOLDLOCK TABLOCKX)'</span><span class="br0">&#41;</span>
GO
<span class="kw1">DROP</span> <span class="kw1">TABLE</span> dbo.<span class="me1">Test</span>
GO
<span class="kw1">EXECUTE</span> <span class="kw3">sp_rename</span> N<span class="st0">'dbo.Tmp_Test'</span>, N<span class="st0">'Test'</span>, <span class="st0">'OBJECT'</span> 
GO
<span class="kw1">COMMIT</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">/* To prevent any potential data loss issues, you should review this script in detail before running it outside the context of the database designer.*/
BEGIN TRANSACTION
SET QUOTED_IDENTIFIER ON
SET ARITHABORT ON
SET NUMERIC_ROUNDABORT OFF
SET CONCAT_NULL_YIELDS_NULL ON
SET ANSI_NULLS ON
SET ANSI_PADDING ON
SET ANSI_WARNINGS ON
COMMIT
BEGIN TRANSACTION
GO
CREATE TABLE dbo.Tmp_Test
	(
	SomeDate datetime2(7) NULL
	)  ON [PRIMARY]
GO
ALTER TABLE dbo.Tmp_Test SET (LOCK_ESCALATION = TABLE)
GO
IF EXISTS(SELECT * FROM dbo.Test)
	 EXEC('INSERT INTO dbo.Tmp_Test (SomeDate)
		SELECT CONVERT(datetime2(7), SomeDate) FROM dbo.Test WITH (HOLDLOCK TABLOCKX)')
GO
DROP TABLE dbo.Test
GO
EXECUTE sp_rename N'dbo.Tmp_Test', N'Test', 'OBJECT' 
GO
COMMIT</pre></div></div>

<p>I definitely don&#8217;t want that either, that creates a whole new table..yikes</p>
<p>Spend some time in Books On Line, maybe every day at lunch open a random topic and read it for half and hour and run the code examples. If you commute, download the topic to your local device or hit the online version and study it. Another good way to learn is of course hitting the newsgroups where you will see top notch advice from SQL Server experts</p>
<p>The more you know, the better it will be for you and your employer, if suddenly you can prove that yes, we can do this and here is a better way I found, you will be rewarded sooner or later.</p>
<p>*** <strong>Remember, if you have a SQL related question, try our <a href="http://forum.lessthandot.com/viewforum.php?f=17">Microsoft SQL Server Programming</a> forum or our <a href="http://forum.lessthandot.com/viewforum.php?f=22">Microsoft SQL Server Admin</a> forum</strong><ins></ins></p>
]]></content:encoded>
			<wfw:commentRss>/index.php/datamgmt/datadesign/when-changing-column-data-types/feed/</wfw:commentRss>
		<slash:comments>6</slash:comments>
		</item>
		<item>
		<title>Be careful when passing around parameters, make sure they are the same size and type</title>
		<link>/index.php/datamgmt/datadesign/be-careful-when-passing-around/</link>
		<comments>/index.php/datamgmt/datadesign/be-careful-when-passing-around/#comments</comments>
		<pubDate>Fri, 08 Apr 2011 15:33:00 +0000</pubDate>
		<dc:creator><![CDATA[SQLDenis]]></dc:creator>
				<category><![CDATA[Data Modelling and Design]]></category>
		<category><![CDATA[Database Programming]]></category>
		<category><![CDATA[Microsoft SQL Server]]></category>
		<category><![CDATA[Microsoft SQL Server Admin]]></category>
		<category><![CDATA[best practice]]></category>
		<category><![CDATA[data types]]></category>
		<category><![CDATA[gotcha]]></category>
		<category><![CDATA[pitfalls]]></category>
		<category><![CDATA[sql server]]></category>

		<guid isPermaLink="false">/index.php/2011/04/be-careful-when-passing-around/</guid>
		<description><![CDATA[Someone tried to figure out why his data was showing the next day when he passed in today's date. If you are not careful to use the same data type and this includes scale and precision as well, you can get some strange results. In this post I will take&#8230;]]></description>
				<content:encoded><![CDATA[<p>Someone tried to figure out why his data was showing the next day when he passed in today&#8217;s date. If you are not careful to use the same data type and this includes scale and precision as well, you can get some strange results. In this post I will take a look at date, integer, varchar and decimal data types </p>
<p></p>
<h2>Dates</h2>
<p>When using dates make sure that you are using the same data type, don&#8217;t mix datetime and smalldatetime. If you do, you can get some unexpected results, let&#8217;s take a look</p>
<p>First create this table with a datetime column</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
</pre></td><td class="de1"><pre class="de1"><span class="kw1">CREATE</span> <span class="kw1">TABLE</span> TestDatetime<span class="br0">&#40;</span>SomeDate <span class="kw1">DATETIME</span><span class="br0">&#41;</span>
GO</pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">CREATE TABLE TestDatetime(SomeDate DATETIME)
GO</pre></div></div>

<p>Now create this proc which accepts a smalldatetime</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
</pre></td><td class="de1"><pre class="de1"><span class="kw1">CREATE</span> <span class="kw1">PROC</span> prTestDatetime
@SomeDate <span class="kw1">SMALLDATETIME</span>
<span class="kw1">AS</span> 
&nbsp;
<span class="kw1">INSERT</span> TestDatetime <span class="kw1">VALUES</span><span class="br0">&#40;</span>@SomeDate<span class="br0">&#41;</span>
&nbsp;
GO</pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">CREATE PROC prTestDatetime
@SomeDate SMALLDATETIME
AS 

INSERT TestDatetime VALUES(@SomeDate)

GO</pre></div></div>

<p>Now call the procedure with the following value</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
</pre></td><td class="de1"><pre class="de1"><span class="kw1">DECLARE</span> @d <span class="kw1">DATETIME</span>
<span class="kw1">SELECT</span> @d <span class="sy0">=</span> <span class="st0">'2011-04-04 23:59:59.000'</span>
&nbsp;
&nbsp;
<span class="kw1">EXEC</span> prTestDatetime @d
GO</pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">DECLARE @d DATETIME
SELECT @d = '2011-04-04 23:59:59.000'


EXEC prTestDatetime @d
GO</pre></div></div>

<p>When you check the table now you will see that it has become the next day</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
</pre></td><td class="de1"><pre class="de1"><span class="kw1">SELECT</span> <span class="sy0">*</span> <span class="kw1">FROM</span> TestDatetime</pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">SELECT * FROM TestDatetime</pre></div></div>

<p>2011-04-05 00:00:00.000</p>
<p>The query below will illustrate the same problem</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
</pre></td><td class="de1"><pre class="de1"><span class="kw1">DECLARE</span> @d <span class="kw1">DATETIME</span>
<span class="kw1">SELECT</span> @d <span class="sy0">=</span> <span class="st0">'2011-04-04 23:59:59.000'</span>
<span class="kw1">SELECT</span> <span class="kw1">CONVERT</span><span class="br0">&#40;</span><span class="kw1">DATETIME</span>,@d<span class="br0">&#41;</span>, <span class="kw1">CONVERT</span><span class="br0">&#40;</span><span class="kw1">SMALLDATETIME</span>,@d<span class="br0">&#41;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">DECLARE @d DATETIME
SELECT @d = '2011-04-04 23:59:59.000'
SELECT CONVERT(DATETIME,@d), CONVERT(SMALLDATETIME,@d)</pre></div></div>

<p>Output<br />
&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;-<br />
2011-04-04 23:59:59.000	2011-04-05 00:00:00</p>
<p>What happens is because smalldatetime is accurate to 1 minute, it rounds up to the next hour and thus it becomes the next day<br />
Usually stuff like this happens where the table gets changed but someone forgot to also change the procedure, it could take a while until you catch a bug like this because unless you are passing in the last minute of the hour you won&#8217;t see it&#8230;however the fact that the seconds are all 00 should give it away<br />
</p>
<h2>Integer data type</h2>
<p>When dealing with integers, you are in luck because it will just blow up in your face</p>
<p>Create this stored procedure</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
</pre></td><td class="de1"><pre class="de1"><span class="kw1">CREATE</span> <span class="kw1">PROC</span> prTestInt
@Someint <span class="kw1">smallint</span>
<span class="kw1">AS</span> 
&nbsp;
<span class="kw1">SELECT</span> @Someint
GO</pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">CREATE PROC prTestInt
@Someint smallint
AS 

SELECT @Someint
GO</pre></div></div>

<p>Run it by passing in something that is greater than the small integer data type can hold</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
</pre></td><td class="de1"><pre class="de1"><span class="kw1">DECLARE</span> @i <span class="kw1">int</span>
<span class="kw1">SELECT</span> @i <span class="sy0">=</span> <span class="nu0">99999</span>
&nbsp;
&nbsp;
<span class="kw1">EXEC</span> prTestInt @i
GO</pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">DECLARE @i int
SELECT @i = 99999


EXEC prTestInt @i
GO</pre></div></div>

<p>And here is the error.</p>
<p><em>Msg 8114, Level 16, State 5, Procedure prTestInt, Line 0<br />
Error converting data type int to smallint.</em></p>
<p>This is a good thing, you will be able to catch this immediately. At least it doesn&#8217;t do a negative overflow like in some languages</p>
<p></p>
<h2>varchar, nvarchar, char and nchar</h2>
<p>varchar, nvarchar, char and nchar have a bunch of interesting inconsistencies, this can really bite you if you are not careful</p>
<p>Here is one example, create the following procedure</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
</pre></td><td class="de1"><pre class="de1"><span class="kw1">CREATE</span> <span class="kw1">PROC</span> prTestVarchar
@Somevarchar <span class="kw1">varchar</span><span class="br0">&#40;</span><span class="nu0">3</span><span class="br0">&#41;</span>
<span class="kw1">AS</span> 
&nbsp;
<span class="kw1">SELECT</span> @Somevarchar
GO</pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">CREATE PROC prTestVarchar
@Somevarchar varchar(3)
AS 

SELECT @Somevarchar
GO</pre></div></div>

<p>Now run it like this</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
</pre></td><td class="de1"><pre class="de1"><span class="kw1">DECLARE</span> @v <span class="kw1">VARCHAR</span><span class="br0">&#40;</span><span class="nu0">10</span><span class="br0">&#41;</span>
<span class="kw1">SELECT</span> @v <span class="sy0">=</span> <span class="st0">'9999999999'</span>
&nbsp;
&nbsp;
<span class="kw1">EXEC</span> prTestVarchar @v
GO</pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">DECLARE @v VARCHAR(10)
SELECT @v = '9999999999'


EXEC prTestVarchar @v
GO</pre></div></div>

<p>Output<br />
&#8212;&#8212;&#8212;<br />
999</p>
<p>Since you specified varchar(3), SQL Server trims everything over 3 bytes</p>
<p>What if you just use varchar?<br />
People coming from languages where you define something as a string usually make this mistake. Take a look at this: <a href="http://stackoverflow.com/questions/5559582/issue-inserting-text-into-table-from-c-proc-parameter/5559609#5559609">Issue inserting text into table from c# proc parameter</a></p>
<p>Create the following stored procedure</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
</pre></td><td class="de1"><pre class="de1"><span class="kw1">CREATE</span> <span class="kw1">PROC</span> prTestVarchar2
@Somevarchar <span class="kw1">varchar</span>
<span class="kw1">AS</span> 
&nbsp;
<span class="kw1">SELECT</span> @Somevarchar
GO</pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">CREATE PROC prTestVarchar2
@Somevarchar varchar
AS 

SELECT @Somevarchar
GO</pre></div></div>

<p>Run the proc</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
</pre></td><td class="de1"><pre class="de1"><span class="kw1">DECLARE</span> @v <span class="kw1">VARCHAR</span><span class="br0">&#40;</span><span class="nu0">10</span><span class="br0">&#41;</span>
<span class="kw1">SELECT</span> @v <span class="sy0">=</span> <span class="st0">'9999999999'</span>
&nbsp;
&nbsp;
<span class="kw1">EXEC</span> prTestVarchar2 @v
GO</pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">DECLARE @v VARCHAR(10)
SELECT @v = '9999999999'


EXEC prTestVarchar2 @v
GO</pre></div></div>

<p>Output<br />
&#8212;&#8212;&#8211;<br />
9</p>
<p>In this case SQL Server used a size of 1 since nothing was specified. However when you use varchar in a cast or convert function and you don&#8217;t specify a size, it will default to 30 characters</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
</pre></td><td class="de1"><pre class="de1"><span class="kw1">SELECT</span> <span class="kw1">CONVERT</span><span class="br0">&#40;</span><span class="kw1">VARCHAR</span>,<span class="st0">'1111111111222222222233333333334'</span><span class="br0">&#41;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">SELECT CONVERT(VARCHAR,'1111111111222222222233333333334')</pre></div></div>

<p>111111111122222222223333333333</p>
<p>As you can see, the last character is not displayed<br />
Take also a look at this post <a href="/index.php/DataMgmt/DBProgramming/MSSQLServer/always-include-size-when-using-varchar-n">Always include size when using varchar, nvarchar, char and nchar</a> by George Mastros and this post <a href="http://sqlblog.com/blogs/aaron_bertrand/archive/2009/10/09/bad-habits-to-kick-declaring-varchar-without-length.aspx">Bad habits to kick : declaring VARCHAR without (length)</a> by Aaron Bertrand for some more info</p>
<p></p>
<h2>Decimal/Numeric</h2>
<p>Decimal (or numeric) will round down or up if it can&#8217;t hold the whole value<br />
Take a look by running this</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
</pre></td><td class="de1"><pre class="de1"><span class="kw1">DECLARE</span> @d <span class="kw1">DECIMAL</span><span class="br0">&#40;</span><span class="nu0">4</span>,<span class="nu0">3</span><span class="br0">&#41;</span>
<span class="kw1">DECLARE</span> @d2 <span class="kw1">DECIMAL</span><span class="br0">&#40;</span><span class="nu0">4</span>,<span class="nu0">2</span><span class="br0">&#41;</span>
<span class="kw1">SELECT</span> @d <span class="sy0">=</span> <span class="nu0">1.999</span>
&nbsp;
<span class="kw1">SELECT</span> @d2 <span class="sy0">=</span> @d
&nbsp;
<span class="kw1">SELECT</span> @d,@d2</pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">DECLARE @d DECIMAL(4,3)
DECLARE @d2 DECIMAL(4,2)
SELECT @d = 1.999

SELECT @d2 = @d

SELECT @d,@d2</pre></div></div>

<p>Output<br />
&#8212;&#8212;&#8212;&#8212;-<br />
1.999	2.00</p>
<p>As you can see 1.999 will round up to 2.00 if your scale is less than the number of digits passed in</p>
<p>If you have to do multiplication you have to be extra careful and have enough space to avoid rounding issues, I deal with this all the time because we have to show 10 digits for scale.</p>
<p>Decimal and numeric will default to (18,0) if you don&#8217;t specify anything when declaring them, see this post <a href="/index.php/DataMgmt/DataDesign/decimal-and-numeric-problems-when-you-do">Decimal and Numeric problems when you don&#8217;t specify precision and scale</a> by George Mastros for more info, no need for me to repeat the same.</p>
<h1>Conclusion</h1>
<p>Make sure that your data types or data type sizes are the same for variables/parameters and tables, if they are not, you might not notice the problem right away and it can be a real pain in the neck to make the change down the road</p>
<p>*** <strong>Remember, if you have a SQL related question, try our <a href="http://forum.lessthandot.com/viewforum.php?f=17">Microsoft SQL Server Programming</a> forum or our <a href="http://forum.lessthandot.com/viewforum.php?f=22">Microsoft SQL Server Admin</a> forum</strong><ins></ins></p>
]]></content:encoded>
			<wfw:commentRss>/index.php/datamgmt/datadesign/be-careful-when-passing-around/feed/</wfw:commentRss>
		<slash:comments>1</slash:comments>
		</item>
	</channel>
</rss>
