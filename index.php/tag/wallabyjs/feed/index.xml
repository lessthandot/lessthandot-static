<?xml version="1.0" encoding="UTF-8"?><rss version="2.0"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:atom="http://www.w3.org/2005/Atom"
	xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
	xmlns:slash="http://purl.org/rss/1.0/modules/slash/"
	>

<channel>
	<title>wallabyjs &#8211; LessthanDot</title>
	<atom:link href="/index.php/tag/wallabyjs/feed/" rel="self" type="application/rss+xml" />
	<link>/</link>
	<description>A Technical Community for IT Professionals</description>
	<lastBuildDate>Sat, 09 Mar 2019 12:50:36 +0000</lastBuildDate>
	<language>en-US</language>
	<sy:updatePeriod>hourly</sy:updatePeriod>
	<sy:updateFrequency>1</sy:updateFrequency>
	<generator>https://wordpress.org/?v=4.6.1</generator>
	<item>
		<title>Continuous Javascript Test Execution with WallabyJS</title>
		<link>/index.php/webdev/continuous-javascript-test-execution-with-wallabyjs/</link>
		<comments>/index.php/webdev/continuous-javascript-test-execution-with-wallabyjs/#respond</comments>
		<pubDate>Thu, 13 Oct 2016 19:53:07 +0000</pubDate>
		<dc:creator><![CDATA[Eli Weinstock-Herman (tarwn)]]></dc:creator>
				<category><![CDATA[Web Developer]]></category>
		<category><![CDATA[jasmine]]></category>
		<category><![CDATA[javascript]]></category>
		<category><![CDATA[requirejs]]></category>
		<category><![CDATA[unit testing]]></category>
		<category><![CDATA[wallabyjs]]></category>

		<guid isPermaLink="false">/?p=4676</guid>
		<description><![CDATA[After working with NCrunch building and running tests in the background for the last several years, it feels like something is broken when I have to wait for test results or push a button to start running them. JavaScript runners just didn&#8217;t feel like they provided the same level of development feedback, whether they were [&#8230;]]]></description>
				<content:encoded><![CDATA[<p>After working with NCrunch building and running tests in the background for the last several years, it feels like something is broken when I have to wait for test results or push a button to start running them. JavaScript runners just didn&#8217;t feel like they provided the same level of development feedback, whether they were command-line runners with gulp tasks, plugins like Chutzpah, or dedicated runners like Karma.</p>
<p><em>I&#8217;ve posted previously on both <a href="/index.php/enterprisedev/unittest/reducing-code-build-test-friction/">NCrunch</a> and <a href="/index.php/webdev/uidevelopment/javascript/continuous-javascript-testing-with-karma/">Karma</a>, test runners that run .Net and Javascript code continuously behind the scenes as you develop.</em></p>
<p><a href="https://wallabyjs.com/">WallabyJS</a> is like NCrunch for Javascript. It radiates test statuses directly in your IDE as you edit your code, letting you know what&#8217;s workign and not working without any extra action. No switching to a secondary screen or manually running and waiting for results. It has wide support, integrating with the IntelliJ platform, Visual Studio, Visual Studio Code, Sublime, and more. </p>
<p>I used this sample project throughout the post: <A href="https://github.com/tarwn/townthing">github.com/tarwn/townthing</a>. It is a small sandbox project that uses RequireJS and had been configured for Karma as well as having a Jasmine SpecRunner for running the tests in the browser. Hopefully this means Wallaby will be able to slide right in.</p>
<h2>From Zero to Wallaby, in Visual Studio Code</h2>
<p>First step, open Visual Studio Code and install the extension: ext install wallaby-vscode</p>
<p>Wallaby has a really easy to follow &#8220;getting started&#8221; guide that I mostly ignored: <A href="https://wallabyjs.com/docs/config/overview.html">https://wallabyjs.com/docs/config/overview.html</a></p>
<p>I didn&#8217;t pay a lot of attention, but jumped straight to pushing Ctrl+Shift+R, R after installing the extension. It prompted me to identify a config file (I created an empty &#8220;wallaby.js&#8221; file), then upset my firewall briefly by running node.js (which I allowed).</p>
<p>I then created my wallaby.js configuration using a short example of using wallaby with RequireJS: <a href="https://github.com/wallabyjs/wallaby-requirejs-sample">github.com/wallabyjs/wallaby-requirejs-sample</a></p>
<p><b>wallaby.js</b></p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="javascript"><thead><tr><td colspan="2"  class="head">Javascript</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
</pre></td><td class="de1"><pre class="de1">module.<span class="me1">exports</span> <span class="sy0">=</span> <span class="kw1">function</span> <span class="br0">&#40;</span>wallaby<span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; <span class="kw1">return</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; files<span class="sy0">:</span> <span class="br0">&#91;</span>
&nbsp; &nbsp; &nbsp; <span class="br0">&#123;</span> pattern<span class="sy0">:</span> <span class="st0">'town/js/lib/require-2.1.11.js'</span><span class="sy0">,</span> instrument<span class="sy0">:</span> <span class="kw2">false</span> <span class="br0">&#125;</span><span class="sy0">,</span>
&nbsp; &nbsp; &nbsp; <span class="br0">&#123;</span> pattern<span class="sy0">:</span> <span class="st0">'town/js/lib/*.js'</span><span class="sy0">,</span> load<span class="sy0">:</span> <span class="kw2">false</span> <span class="br0">&#125;</span><span class="sy0">,</span>
&nbsp; &nbsp; &nbsp; <span class="br0">&#123;</span> pattern<span class="sy0">:</span> <span class="st0">'town/js/src/*.js'</span><span class="sy0">,</span> load<span class="sy0">:</span> <span class="kw2">false</span> <span class="br0">&#125;</span><span class="sy0">,</span>
&nbsp; &nbsp; &nbsp; <span class="br0">&#123;</span> pattern<span class="sy0">:</span> <span class="st0">'town/js/test/test-main.js'</span> <span class="br0">&#125;</span>
&nbsp; &nbsp; <span class="br0">&#93;</span><span class="sy0">,</span>
&nbsp;
&nbsp; &nbsp; tests<span class="sy0">:</span> <span class="br0">&#91;</span>
&nbsp; &nbsp; &nbsp; <span class="br0">&#123;</span> pattern<span class="sy0">:</span> <span class="st0">'town/js/test/*.spec.js'</span><span class="sy0">,</span> load<span class="sy0">:</span> <span class="kw2">false</span> <span class="br0">&#125;</span><span class="sy0">,</span>
&nbsp; &nbsp; <span class="br0">&#93;</span><span class="sy0">,</span>
&nbsp;
&nbsp; &nbsp; testFramework<span class="sy0">:</span> <span class="st0">'jasmine'</span>
&nbsp; <span class="br0">&#125;</span><span class="sy0">;</span>
<span class="br0">&#125;</span><span class="sy0">;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">module.exports = function (wallaby) {
  return {
    files: [
      { pattern: 'town/js/lib/require-2.1.11.js', instrument: false },
      { pattern: 'town/js/lib/*.js', load: false },
      { pattern: 'town/js/src/*.js', load: false },
      { pattern: 'town/js/test/test-main.js' }
    ],

    tests: [
      { pattern: 'town/js/test/*.spec.js', load: false },
    ],

    testFramework: 'jasmine'
  };
};</pre></div></div>

<p>This identifies all the files and tests for wallaby, but tells it not to actually load anything but RequireJS and and my RequireJS configuration (tets-main.js).</p>
<p>Currently, my test main is focused on running karma, but we can easily switch it to be able to run either.</p>
<p><b>test-main.js</b></p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="javascript"><thead><tr><td colspan="2"  class="head">Javascript</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
</pre></td><td class="de1"><pre class="de1"><span class="kw1">var</span> tests <span class="sy0">=</span> <span class="br0">&#91;</span><span class="br0">&#93;</span><span class="sy0">;</span>
&nbsp;
<span class="kw1">var</span> baseUrl <span class="sy0">=</span> <span class="st0">''</span><span class="sy0">;</span>
<span class="kw1">var</span> isUsingKarma <span class="sy0">=</span> <span class="br0">&#40;</span>window.__karma__ <span class="sy0">!=</span> <span class="kw2">undefined</span><span class="br0">&#41;</span><span class="sy0">;</span>
<span class="kw1">var</span> isUsingWallaby <span class="sy0">=</span> <span class="br0">&#40;</span>wallaby <span class="sy0">!=</span> <span class="kw2">undefined</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
<span class="kw1">if</span><span class="br0">&#40;</span>isUsingKarma<span class="br0">&#41;</span><span class="br0">&#123;</span>
&nbsp; baseUrl <span class="sy0">=</span> <span class="st0">'/base/src'</span><span class="sy0">;</span>
&nbsp; <span class="kw1">for</span> <span class="br0">&#40;</span><span class="kw1">var</span> file <span class="kw1">in</span> window.__karma__.<span class="me1">files</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; <span class="kw1">if</span> <span class="br0">&#40;</span>window.__karma__.<span class="me1">files</span>.<span class="kw3">hasOwnProperty</span><span class="br0">&#40;</span>file<span class="br0">&#41;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; <span class="kw1">if</span> <span class="br0">&#40;</span><span class="co2">/spec\.js$/</span>.<span class="me1">test</span><span class="br0">&#40;</span>file<span class="br0">&#41;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; tests.<span class="me1">push</span><span class="br0">&#40;</span>file<span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp; <span class="br0">&#125;</span>
<span class="br0">&#125;</span>
<span class="kw1">else</span> <span class="kw1">if</span><span class="br0">&#40;</span>isUsingWallaby<span class="br0">&#41;</span><span class="br0">&#123;</span>
&nbsp; baseUrl <span class="sy0">=</span> <span class="st0">'/town/js/src'</span><span class="sy0">;</span>
&nbsp; wallaby.<span class="me1">delayStart</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; tests <span class="sy0">=</span> wallaby.<span class="me1">tests</span><span class="sy0">;</span> &nbsp;
<span class="br0">&#125;</span>
&nbsp;
requirejs.<span class="me1">config</span><span class="br0">&#40;</span><span class="br0">&#123;</span>
&nbsp; <span class="co1">// Karma serves files from '/base'</span>
&nbsp; baseUrl<span class="sy0">:</span> baseUrl<span class="sy0">,</span>
&nbsp;
&nbsp; paths<span class="sy0">:</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; <span class="st0">&quot;knockout&quot;</span><span class="sy0">:</span> <span class="st0">&quot;../lib/knockout-3.0.0&quot;</span><span class="sy0">,</span>
&nbsp; &nbsp; <span class="st0">&quot;Squire&quot;</span><span class="sy0">:</span> <span class="st0">&quot;../lib/Squire&quot;</span>
&nbsp; <span class="br0">&#125;</span>
<span class="br0">&#125;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
<span class="co1">// Let's get started!</span>
require<span class="br0">&#40;</span>tests<span class="sy0">,</span> <span class="kw1">function</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#123;</span>
&nbsp;
&nbsp; <span class="kw1">if</span><span class="br0">&#40;</span>isUsingKarma<span class="br0">&#41;</span>
&nbsp; &nbsp; window.__karma__.<span class="me1">start</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; <span class="kw1">else</span> <span class="kw1">if</span><span class="br0">&#40;</span>isUsingWallaby<span class="br0">&#41;</span>
&nbsp; &nbsp; wallaby.<span class="me1">start</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
<span class="br0">&#125;</span><span class="br0">&#41;</span><span class="sy0">;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">var tests = [];

var baseUrl = '';
var isUsingKarma = (window.__karma__ != undefined);
var isUsingWallaby = (wallaby != undefined);

if(isUsingKarma){
  baseUrl = '/base/src';
  for (var file in window.__karma__.files) {
    if (window.__karma__.files.hasOwnProperty(file)) {
      if (/spec\.js$/.test(file)) {
        tests.push(file);
      }
    }
  }
}
else if(isUsingWallaby){
  baseUrl = '/town/js/src';
  wallaby.delayStart();
  tests = wallaby.tests;  
}

requirejs.config({
  // Karma serves files from '/base'
  baseUrl: baseUrl,

  paths: {
    "knockout": "../lib/knockout-3.0.0",
    "Squire": "../lib/Squire"
  }
});

// Let's get started!
require(tests, function(){

  if(isUsingKarma)
  	window.__karma__.start();
  else if(isUsingWallaby)
    wallaby.start();

});</pre></div></div>

<p>The key parts are to ensure I delay wallaby to start, set the test collection and baseUrl for requireJS, then start the tests inside a require statement at the end.</p>
<p><i>Note: I did manage to completely lock up Visual Studio Code while updating the test-main file, but I&#8217;m not sure if that was VS Code&#8217;s fault or Wallaby&#8217;s</i></p>
<p>And there we go. As I type my code in the editor, I get instant notifications of errors (including some handy hover boxes with details) and my test markers turn green/red as I fix and break tests.</p>
<p>Here is the working code:<br />
<div id="attachment_4678" style="width: 810px" class="wp-caption alignleft"><a href="/wp-content/uploads/2016/10/PassingTests.png"><img src="/wp-content/uploads/2016/10/PassingTests-1024x338.png" alt="Passing Tests w/ Inline Markers and Wallaby Console" width="800"" class="size-large wp-image-4678" srcset="/wp-content/uploads/2016/10/PassingTests-1024x338.png 1024w, /wp-content/uploads/2016/10/PassingTests-300x99.png 300w" sizes="(max-width: 1024px) 100vw, 1024px" /></a><p class="wp-caption-text">Passing Tests w/ Inline Markers and Wallaby Console</p></div></p>
<p>and now when I add a &#8220;+ 1&#8221; to the end of the line without even saving the file, the test marker turns red and I get instant results in the console below:<br />
<div id="attachment_4679" style="width: 810px" class="wp-caption alignleft"><a href="/wp-content/uploads/2016/10/FailingTests.png"><img src="/wp-content/uploads/2016/10/FailingTests-1024x436.png" alt="Failing Tests - Red Marker, Clickable Console Details" width="800" class="size-large wp-image-4679" srcset="/wp-content/uploads/2016/10/FailingTests-1024x436.png 1024w, /wp-content/uploads/2016/10/FailingTests-300x127.png 300w" sizes="(max-width: 1024px) 100vw, 1024px" /></a><p class="wp-caption-text">Failing Tests &#8211; Red Marker, Clickable Console Details</p></div></p>
<p>This is much closer to the experience you get with NCrunch and Visual Studio Code is actually a more limited wallaby experience than other editors. The setup was quicker than karma, even though I&#8217;ve setup karma more times. If you work in Javascript daily, this is definitely worth a long look.</p>
]]></content:encoded>
			<wfw:commentRss>/index.php/webdev/continuous-javascript-test-execution-with-wallabyjs/feed/</wfw:commentRss>
		<slash:comments>0</slash:comments>
		</item>
	</channel>
</rss>
