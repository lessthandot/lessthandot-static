<?xml version="1.0" encoding="UTF-8"?><rss version="2.0"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:atom="http://www.w3.org/2005/Atom"
	xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
	xmlns:slash="http://purl.org/rss/1.0/modules/slash/"
	>

<channel>
	<title>nhibernate &#8211; LessthanDot</title>
	<atom:link href="/index.php/tag/nhibernate-2/feed/" rel="self" type="application/rss+xml" />
	<link>/</link>
	<description>A Technical Community for IT Professionals</description>
	<lastBuildDate>Sat, 09 Mar 2019 12:50:36 +0000</lastBuildDate>
	<language>en-US</language>
	<sy:updatePeriod>hourly</sy:updatePeriod>
	<sy:updateFrequency>1</sy:updateFrequency>
	<generator>https://wordpress.org/?v=4.6.1</generator>
	<item>
		<title>Book Review &#8211; NHibernate 3.0 Cookbook</title>
		<link>/index.php/desktopdev/mstech/book-review-nhibernate-3-0-cookbook/</link>
		<comments>/index.php/desktopdev/mstech/book-review-nhibernate-3-0-cookbook/#comments</comments>
		<pubDate>Wed, 03 Nov 2010 14:21:21 +0000</pubDate>
		<dc:creator><![CDATA[Alex Ullrich]]></dc:creator>
				<category><![CDATA[Microsoft Technologies]]></category>
		<category><![CDATA[book]]></category>
		<category><![CDATA[c#]]></category>
		<category><![CDATA[nhibernate]]></category>

		<guid isPermaLink="false">/index.php/2010/11/book-review-nhibernate-3-0-cookbook/</guid>
		<description><![CDATA[I just finished reading the NHibernate 3.0 Cookbook, part of Packt Publishing&#8217;s Open Source series, and I&#8217;ve been really impressed. The book is written by Jason Dentler, whose blog I&#8217;m sure anyone doing frequent searches for NHibernate has run across once or twice in their travels. What really stood out to me about this book [&#8230;]]]></description>
				<content:encoded><![CDATA[<p>I just finished reading the <a href="https://www.packtpub.com/nhibernate-3-0-cookbook/book">NHibernate 3.0 Cookbook</a>, part of Packt Publishing&#8217;s Open Source series, and I&#8217;ve been really impressed.  The book is written by <a href="http://jasondentler.com/blog/">Jason Dentler</a>, whose blog I&#8217;m sure anyone doing frequent searches for NHibernate has run across once or twice in their travels.</p>
<p>What really stood out to me about this book was how easy it was to read.  You can tell that Jason went out of his way to make the book approachable for people unfamiliar with the concepts (without dumbing down the content) and in my opinion it really paid off.  It makes for a much lighter and more enjoyable read than most technical books (I could routinely knock out 40-50 pages in a 45 minute train ride).  I think it also makes it easier to grasp the concepts as well (at least this was true for the topics I was less familiar with).  </p>
<p>The book is broken up into chapters representing the cornerstones of NHibernate, each chapter containing a handful or two of recipes illustrating solutions to commonly encountered problems.  The chapters are broken out as follows:</p>
<ul>
<li>Models And Mappings</li>
<li>Configuration And Schema</li>
<li>Sessions And Transactions</li>
<li>Queries</li>
<li>Testing</li>
<li>Data Access Layer</li>
<li>Extending NHibernate</li>
<li>NHibernate Contribution Projects</li>
</ul>
<p>I view most of these as <strong>essential</strong> knowledge for people developing with NHibernate, and I have trouble thinking of an essential topic that is left off the list.  The book is intended as a quick reference containing solutions to common problems, but because of the way it is written and the breadth of the content it could serve as a good introduction for a newcomer as well. It would be impossible to cover <strong>everything</strong> about NHibernate in a book twice as long as this one, but I think there is enough here to leave the reader in a good place to be able to solve any other problems they run into (with some help from the internets of course).</p>
<p>I learned a few new things over the course of reading the book.  The first was in the recipe about configuring NHibernate from code (in the Configuration and Schema chapter).  It discusses the NHibernate.Cfg.Loquacious namespace, which offers a much better way to configure NHibernate in code than the normal configuration namespace.  I typically use Fluent NHibernate lately, so I may never have come across this had I not read the book.  I&#8217;m certainly glad that I know it&#8217;s there now.  Other things the book turned me on to included <a href="http://code.google.com/p/codeconform/">ConfORM</a>, a very cool take on automapping and <a href="http://nhibernatespatial.codeplex.com/">NHibernate.Spatial</a>, both of which I will need to give a try at some point in the not too distant future.</p>
<p>There were a lot of things to like about the book, but I&#8217;d have to say my favorite was the chapter dedicated to the various contribution projects.  Some of these libraries really help NHibernate stand out from other ORMs, but they aren&#8217;t always that well documented (I guess this is a problem with OSS in general).  They address many common needs, but because of the lack of documentation (or maybe because people don&#8217;t always know where to look) I&#8217;ll sometimes encounter people trying to recreate something (like caching) that the contribution projects have quite well covered.  To see a book like this spreading the word about these libraries makes me smile.  In addition to making me smile, this chapter offers a great intro to NHibernate.Caches, and probably the best example of setting up NHibernate.Search with Lucene.net that I&#8217;ve come across.</p>
<p>I also like that it uses a consistent domain model throughout the book.  You could certainly get the same experience by scouring the interwebs and working through examples, but I suspect some of the lessons would be lost to the tedious act of setting up the domain objects used in each example.  Keeping the model used consistent allows the reader to really focus on the core subject of each recipe.</p>
<p>I think this book would be a good read for experienced NHibernate users trying to get up to speed on version 3 quickly, or for anyone looking for a quick reference that cuts right to the heart of common problems.  I&#8217;m not sure about how brand new NHibernate users would like it, but I have a feeling that it would work well for the type of users that learn best by doing.</p>
]]></content:encoded>
			<wfw:commentRss>/index.php/desktopdev/mstech/book-review-nhibernate-3-0-cookbook/feed/</wfw:commentRss>
		<slash:comments>1</slash:comments>
		</item>
		<item>
		<title>Some Thoughts on Session Management</title>
		<link>/index.php/webdev/serverprogramming/aspnet/some-thoughts-on-session-management/</link>
		<comments>/index.php/webdev/serverprogramming/aspnet/some-thoughts-on-session-management/#respond</comments>
		<pubDate>Mon, 16 Aug 2010 21:31:00 +0000</pubDate>
		<dc:creator><![CDATA[Alex Ullrich]]></dc:creator>
				<category><![CDATA[ASP.NET]]></category>
		<category><![CDATA[asp.net]]></category>
		<category><![CDATA[c#]]></category>
		<category><![CDATA[nhibernate]]></category>

		<guid isPermaLink="false">/index.php/2010/08/some-thoughts-on-session-management/</guid>
		<description><![CDATA[The last time I did a post on NHibernate (or any post for that matter &#8211; I guess I&#8217;ve been a bit busy) Ben asked a question about what I ended up using for session management in the application I&#8217;ve been working on. I guess I could come out and answer it, but I&#8217;d hardly [&#8230;]]]></description>
				<content:encoded><![CDATA[<p>The last time I did a post on NHibernate (or any post for that matter &#8211; I guess I&#8217;ve been a bit busy) <a href="/index.php/DesktopDev/MSTech/two-years-with-nhibernate-lessons-learne#c3958">Ben</a> asked a question about what I ended up using for session management in the application I&#8217;ve been working on.  I guess I could come out and answer it, but I&#8217;d hardly get a new post out of that.  Instead I will break out the tried and true answer for all things IT, &#8220;It depends&#8221;.  Let&#8217;s take a look at what it depends on.</p>
<h2>What is the Session?</h2>
<p>This is probably the best place to start.  If you&#8217;re used to working with ADO.net, jdbc, or something similar, it&#8217;s easy to think of the session as nothing more than a window into your database that allows you to execute queries, like an <a href="http://msdn.microsoft.com/en-us/library/system.data.idbconnection.aspx">IDbConnection</a>, but it does a lot more for you if you let it.  NHibernate sessions provide a great <a href="http://martinfowler.com/eaaCatalog/unitOfWork.html">Unit of Work</a> container, allowing you a great deal of control over how things get written to your database.  Unless you are using a stateless session (a session configured not to hold anything in memory) the session will also use NHibernate&#8217;s first level cache to store objects that are in use, helping you to avoid excessive trips to the database.</p>
<h2>What is your Unit of Work?</h2>
<p>This is the $64,000 question.  Once you know what your unit of work is, session management will more or less solve itself.  As you can imagine, this is highly dependent on the nature of the application you&#8217;re working on.  In most cases the unit of work is synonymous with a business transaction.  It represents the minimum amount of work that you want to commit to your underlying storage mechanism.  This is an all or nothing proposition &#8211; if your unit of work requires you to write four objects to a data store, and only three succeed, then the three that succeeded will be cancelled, or rolled back.  </p>
<p>Keeping this in mind, a desktop application using an embedded database for persistence may be able to get by with a single session for the life of the application, as long as transactions are properly committed and the session is flushed when the app shuts down.  This gives you the benefit of storing a LOT of data in the first level cache, which can be very beneficial when you&#8217;re positive no one else will be modifying it (though, with an in memory database you may not even need the first level cache <img src="https://s.w.org/images/core/emoji/2/72x72/1f609.png" alt="😉" class="wp-smiley" style="height: 1em; max-height: 1em;" /> ).  </p>
<p>At the other end of the spectrum you could find SOA type applications where the unit of work is performed across several round trips between client and server.  Using this strategy, subsequent requests to the server need to be able to find their way back to the same session that their work was started with, otherwise they won&#8217;t have the data they need.  In most cases I&#8217;d imagine this requires a more complete unit of work implementation that can be persisted across requests and use the NHibernate session under the hood.  </p>
<h2>What about Me?</h2>
<p>Like most people, I find myself somewhere in the middle of this spectrum.  My application is web-based, and the primary unit of work can be completed in a single request, so I ended up using a session per request strategy.  I found that <a href="http://structuremap.github.com/structuremap/index.html">StructureMap</a> makes managing this a lot easier.  I need to first register a Session Factory (as a singleton) with StructureMap.  I then tell StructureMap how to retrieve an ISession from this factory (using the ConstructedBy method), and also ensure that it caches sessions <em>per HTTP context</em>.  This is all registered from the application layer, but consumed farther down in the persistence layer.  Finally, in Application_EndRequest I call a function to clean up anything that StructureMap has cached by HTTP context.  </p>
<p>I mentioned that this was the &#8220;primary&#8221; unit of work, there is one area that this does not cover, and that is authentication.  For a while I used built in providers (for SQL Server, then the MySQL provider in MySQL.Data), but when I moved databases again (to postgres) I decided it was time to make a change.  Now I&#8217;m using a <a href="http://msdn.microsoft.com/en-us/library/system.web.security.membershipprovider.aspx">MembershipProvider</a> based on NHibernate, to ensure that it is as easy to move my authentication mechanism across database platforms as it is to move the domain logic.  To me, using the session per request strategy didn&#8217;t really make a lot of sense here because the provider isn&#8217;t really tied to the HTTP context, but to the application itself.  In addition, all data used by the authentication process can ONLY be changed through the membership provider.  So, for authentication I keep a single session open for the entire life of the application.  This would present some interesting challenges if I were to need to scale across multiple servers, but the code changes to the provider will not be too difficult.  In the meantime, I see some pretty good performance benefits from using the single session, as the provider rarely needs to hit the database, or even the second level cache (memcached).</p>
<p>In summary, I find it difficult to offer advice about session management without knowing more about the application.  Others have already explained the underlying concepts far better than I could ever hope to, so in a way writing this post feels like a complete waste.  But I like writing about my thought process when it comes to matters like these, so I did enjoy writing it.  And I think there is some value in sharing this thought process with others, so hopefully at least a few people get something out of reading it.  Especially Ben, if he&#8217;s still reading.</p>
]]></content:encoded>
			<wfw:commentRss>/index.php/webdev/serverprogramming/aspnet/some-thoughts-on-session-management/feed/</wfw:commentRss>
		<slash:comments>0</slash:comments>
		</item>
		<item>
		<title>Two Years With NHibernate &#8211; Lessons Learned</title>
		<link>/index.php/desktopdev/mstech/two-years-with-nhibernate-lessons-learne/</link>
		<comments>/index.php/desktopdev/mstech/two-years-with-nhibernate-lessons-learne/#comments</comments>
		<pubDate>Thu, 01 Jul 2010 10:00:00 +0000</pubDate>
		<dc:creator><![CDATA[Alex Ullrich]]></dc:creator>
				<category><![CDATA[C#]]></category>
		<category><![CDATA[Microsoft Technologies]]></category>
		<category><![CDATA[c#]]></category>
		<category><![CDATA[nhibernate]]></category>

		<guid isPermaLink="false">/index.php/2010/07/two-years-with-nhibernate-lessons-learne/</guid>
		<description><![CDATA[I realized the other day that it&#8217;s been nearly two years since I wrote a series of posts as I was learning to use NHibernate for data access. I haven&#8217;t really blogged a whole lot about NHibernate (I leave that to our resident expert, Chris) but I&#8217;ve certainly been working with it a bit. And [&#8230;]]]></description>
				<content:encoded><![CDATA[<p>I realized the other day that it&#8217;s been nearly two years since I wrote a <a href="/index.php/DesktopDev/MSTech/the-path-to-nhibernate-aamp-tdd-part-1-t">series of posts </a> as I was learning to use NHibernate for data access.  I haven&#8217;t really blogged a whole lot about NHibernate (I leave that to our resident expert, Chris) but I&#8217;ve certainly been working with it a bit.  And I&#8217;ve learned to like it a lot.  </p>
<p>A little background on what I&#8217;ve been doing &#8211; the recipe tracker app I was using as a sort of &#8220;hello world&#8221; has increased greatly in scope (good thing that never happens in our day jobs, right <img src="https://s.w.org/images/core/emoji/2/72x72/1f609.png" alt="😉" class="wp-smiley" style="height: 1em; max-height: 1em;" /> ).  It has gone from a desktop app to a slightly better desktop app before reaching its current state as a web application.  In the process it has also gone from using an embedded database for the back end to a full blown RDBMS.  The only thing that&#8217;s remained constant is the data access code, and I think that&#8217;s kind of beautiful.</p>
<p>I thought it may be worth writing down some of the things I&#8217;ve learned in the process so that I don&#8217;t forget them later.  Most items discussed probably apply to <strong>any</strong> ORM but, since my experience is specific to NHibernate, I will keep things focused there.</p>
<h3>The Domain is Everything</h3>
<p>Seriously.  More than a few times, I found myself in a situation where I was banging my head against the wall, wondering why the hell anyone would ever use NHibernate.  And each time, when I calmed down a bit, I realized there was a flaw in the way my domain was modeled that was the root cause of my troubles.  It&#8217;s a pretty general lesson, but I think it&#8217;s important to note.  NHibernate can save you a lot of pain, but for the most part it isn&#8217;t magic.  If you have a poorly conceived set of domain objects, I don&#8217;t think any ORM is going to help you until issues in the domain are taken care of.</p>
<h3>Sometimes it is Magic</h3>
<p>The ease with which NHibernate lets you enable lazy loading and plug in second level cache providers is truly awesome.  I know it&#8217;s really the product of a lot of hard work, but to me it sure <strong>seems</strong> like magic!</p>
<h3>You Can&#8217;t Forget SQL</h3>
<p>I&#8217;m not sure forgetting SQL was ever the point, but every once in a while I read something that seems to suggest this.  If you decide that you can forget all about SQL because you&#8217;re using an ORM, you will suffer :> (and not just because the DBA will come after you).  When I&#8217;m debugging I constantly keep an eye on the SQL generated by NHibernate &#8211; if I see something that looks off, there is usually something in the mappings that needs to be corrected.  Some things, like <a href="/index.php/EnterpriseDev/AppServer/quick-and-dirty-enum-mapper-for-fluent-n">phantom updates</a> can be detected with just a bit of common sense, but others can be a bit trickier.  If you&#8217;re using a relational database in your system, forget the language it uses at your own peril.</p>
<h3>Minimize Session Creation</h3>
<p>You can probably file this under things a noob should know about NHibernate before even getting started, but as I was getting started I was blissfully unaware of the cost of creating sessions.  Luckily I was just creating <strong>WAY TOO MANY</strong> sessions and not leaking them.  But it still got pretty costly, and it also makes NHibernate&#8217;s first level cache almost useless.  </p>
<h3>Write Integration Tests!</h3>
<p>This is probably THE most important lesson.  I&#8217;ve switched databases four times now (SSCE -> SQLite -> SQL Server -> MySQL -> Postgres) and I&#8217;ve almost got it down to a science for my particular application.  Database portability was one of my goals when starting the project, and living through a huge project for database conversion at work in 2008-09 has greatly increased my appreciation for this goal.  But you&#8217;ve gotta remember that NHibernate only makes it <strong>possible</strong>.  It&#8217;s a nice set of integration tests that prove your persistence layer is still doing all the things you expect that makes it <strong>work</strong>.</p>
<h3>It&#8217;s Not for Everything</h3>
<p>The list is getting smaller by the day, but there are some use cases where I imagine an ORM wouldn&#8217;t be the best fit.  For situations where you need the absolute best performance you can get, maybe abstractions designed to help with maintainability and developer productivity are a luxury you can&#8217;t afford.  I suppose if you had a system facing an absolute deluge of incoming data (trading applications and systems collecting data from machinery come to mind) this could be the case, though I think a message queue would help much more in these kind of scenarios than any particular data access strategy.</p>
<p>If I think of anything I missed I&#8217;ll try to come back and edit this post.  These are what came to mind at the moment, but who knows what tomorrow will bring.</p>
]]></content:encoded>
			<wfw:commentRss>/index.php/desktopdev/mstech/two-years-with-nhibernate-lessons-learne/feed/</wfw:commentRss>
		<slash:comments>3</slash:comments>
		</item>
		<item>
		<title>My Path to the Dark Side part 4 &#8211; the Repositories</title>
		<link>/index.php/desktopdev/mstech/my-path-to-the-dark-side-part-4-the-repo/</link>
		<comments>/index.php/desktopdev/mstech/my-path-to-the-dark-side-part-4-the-repo/#comments</comments>
		<pubDate>Mon, 28 Jul 2008 11:07:07 +0000</pubDate>
		<dc:creator><![CDATA[Alex Ullrich]]></dc:creator>
				<category><![CDATA[C#]]></category>
		<category><![CDATA[Microsoft Technologies]]></category>
		<category><![CDATA[c#]]></category>
		<category><![CDATA[nhibernate]]></category>
		<category><![CDATA[unit testing]]></category>

		<guid isPermaLink="false">/index.php/2008/07/my-path-to-the-dark-side-part-4-the-repo/</guid>
		<description><![CDATA[Previous posts can be found here: Part One &#8211; The Beginning Part Two &#8211; The Domain Model Part Three &#8211; Testing the Schema Setting up the repositories for our objects is where this really starts to get fun for me. This is what allows us to work with the persisted objects so easily from our [&#8230;]]]></description>
				<content:encoded><![CDATA[<p>Previous posts can be found here:</p>
<ul>
<li><a href="/index.php/DesktopDev/MSTech/the-path-to-nhibernate-aamp-tdd-part-1-t">Part One &#8211; The Beginning</a></li>
<li><a href="/index.php/DesktopDev/MSTech/my-path-to-the-dark-side-part-2-the-doma">Part Two &#8211; The Domain Model</a></li>
<li><a href="/index.php/DesktopDev/MSTech/my-path-to-the-dark-side-part-3-testing-">Part Three &#8211; Testing the Schema</a></li>
</ul>
<p>Setting up the repositories for our objects is where this really starts to get fun for me.  This is what allows us to work with the persisted objects so easily from our application code, without all the SQL getting in the way.  The first thing we want to think about here is what we need the repository to do.  Add/Delete/Update all come to mind of course.  As well as retrieval of single objects and collections.  These will be pretty much standard behaviors across most of our objects.  So lets&#8217; look at the interface first:</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="csharp"><thead><tr><td colspan="2"  class="head">C#</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
</pre></td><td class="de1"><pre class="de1"><span class="kw1">using</span> <span class="co3">System</span><span class="sy0">;</span>
<span class="kw1">using</span> <span class="co3">System.Collections.Generic</span><span class="sy0">;</span>
<span class="kw1">using</span> <span class="co3">RecipeTracker.Model</span><span class="sy0">;</span>
&nbsp;
<span class="kw1">namespace</span> RecipeTracker<span class="sy0">.</span><span class="me1">Interfaces</span>
<span class="br0">&#123;</span>
&nbsp; &nbsp; <span class="kw1">public</span> <span class="kw4">interface</span> IRecipeRepository
&nbsp; &nbsp; <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw4">void</span> <span class="kw1">Add</span><span class="br0">&#40;</span>Recipe recipe<span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw4">void</span> Update<span class="br0">&#40;</span>Recipe recipe<span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw4">void</span> <span class="kw1">Remove</span><span class="br0">&#40;</span>Recipe recipe<span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; Recipe GetByID<span class="br0">&#40;</span><span class="kw4">int</span> id<span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; ICollection<span class="sy0">&lt;</span>Recipe<span class="sy0">&gt;</span> GetByFamily<span class="br0">&#40;</span><span class="kw4">string</span> family<span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; ICollection<span class="sy0">&lt;</span>Recipe<span class="sy0">&gt;</span> GetAll<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw4">void</span> Dispose<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; <span class="br0">&#125;</span>
<span class="br0">&#125;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">using System;
using System.Collections.Generic;
using RecipeTracker.Model;

namespace RecipeTracker.Interfaces
{
    public interface IRecipeRepository
    {
        void Add(Recipe recipe);
        void Update(Recipe recipe);
        void Remove(Recipe recipe);
        Recipe GetByID(int id);
        ICollection&lt;Recipe&gt; GetByFamily(string family);
        ICollection&lt;Recipe&gt; GetAll();
        void Dispose();
    }
}</pre></div></div>

<p>Looking at all those methods, there is really only one (GetByFamily) that we won&#8217;t need for any repository that we create.  So we can put all the other methods into a BaseRepository class.  We will need use generics so we can return all the different types however.  But first, we need to get a session, so we can add a class for that.</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="csharp"><thead><tr><td colspan="2"  class="head">C#</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
</pre></td><td class="de1"><pre class="de1"><span class="kw1">using</span> <span class="co3">System</span><span class="sy0">;</span>
<span class="kw1">using</span> <span class="co3">NHibernate</span><span class="sy0">;</span>
<span class="kw1">using</span> <span class="co3">NHibernate.Cfg</span><span class="sy0">;</span>
&nbsp;
<span class="kw1">namespace</span> RecipeTracker<span class="sy0">.</span><span class="me1">Repositories</span>
<span class="br0">&#123;</span>
&nbsp; &nbsp; <span class="kw1">public</span> <span class="kw4">class</span> SessionProvider<span class="sy0">&lt;</span>T<span class="sy0">&gt;</span> <span class="kw1">where</span> T<span class="sy0">:</span><span class="kw3">new</span><span class="br0">&#40;</span><span class="br0">&#41;</span>
&nbsp; &nbsp; <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">private</span> <span class="kw1">static</span> ISessionFactory _sessionFactory<span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">private</span> <span class="kw1">static</span> ISessionFactory SessionFactory
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">get</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">if</span> <span class="br0">&#40;</span>_sessionFactory <span class="sy0">==</span> <span class="kw1">null</span><span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">var</span> configuration <span class="sy0">=</span> <span class="kw3">new</span> Configuration<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; configuration<span class="sy0">.</span><span class="me1">Configure</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; configuration<span class="sy0">.</span><span class="me1">AddAssembly</span><span class="br0">&#40;</span><span class="kw3">typeof</span><span class="br0">&#40;</span>T<span class="br0">&#41;</span><span class="sy0">.</span><span class="me1">Assembly</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; _sessionFactory <span class="sy0">=</span> configuration<span class="sy0">.</span><span class="me1">BuildSessionFactory</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">return</span> _sessionFactory<span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">public</span> <span class="kw1">static</span> ISession OpenSession<span class="br0">&#40;</span><span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">return</span> SessionFactory<span class="sy0">.</span><span class="me1">OpenSession</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp; &nbsp; <span class="br0">&#125;</span>
<span class="br0">&#125;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">using System;
using NHibernate;
using NHibernate.Cfg;

namespace RecipeTracker.Repositories
{
    public class SessionProvider&lt;T&gt; where T:new()
    {
        private static ISessionFactory _sessionFactory;

        private static ISessionFactory SessionFactory
        {
            get
            {
                if (_sessionFactory == null)
                {
                    var configuration = new Configuration();
                    configuration.Configure();
                    configuration.AddAssembly(typeof(T).Assembly);
                    _sessionFactory = configuration.BuildSessionFactory();
                }

                return _sessionFactory;
            }
        }

        public static ISession OpenSession()
        {
            return SessionFactory.OpenSession();
        }
    }
}</pre></div></div>

<p>The SessionFactory part should look familar from part 3, the only difference here is that we are initializing the configuration using TypeOf(T) to determine which assembly to find the configuration in rather than TypeOf(MyType).  We could probably get away with the latter for this purpose, because there probably won&#8217;t be more than one assembly in the application, but why be lazy right?  After all, we do need to use generics to deal with the return types anyways. </p>
<p>So now this little bit of code doesn&#8217;t need to be handled by our repository, and it can focus on what it does best.  So here&#8217;s the BaseRepository, it&#8217;s nice and simple since it doesn&#8217;t need to get its&#8217; own sessions anymore:</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="csharp"><thead><tr><td colspan="2"  class="head">C#</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
</pre></td><td class="de1"><pre class="de1"><span class="kw1">using</span> <span class="co3">System</span><span class="sy0">;</span>
<span class="kw1">using</span> <span class="co3">System.Collections.Generic</span><span class="sy0">;</span>
<span class="kw1">using</span> <span class="co3">NHibernate</span><span class="sy0">;</span>
<span class="kw1">using</span> <span class="co3">NHibernate.Cfg</span><span class="sy0">;</span>
&nbsp;
<span class="kw1">namespace</span> RecipeTracker<span class="sy0">.</span><span class="me1">Repositories</span>
<span class="br0">&#123;</span>
&nbsp; &nbsp; <span class="kw1">public</span> <span class="kw1">abstract</span> <span class="kw4">class</span> BaseRepository<span class="sy0">&lt;</span>T<span class="sy0">&gt;</span> <span class="kw1">where</span> T<span class="sy0">:</span> <span class="kw3">new</span><span class="br0">&#40;</span><span class="br0">&#41;</span>
&nbsp; &nbsp; <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">protected</span> ISession _session <span class="sy0">=</span> SessionProvider<span class="sy0">&lt;</span>T<span class="sy0">&gt;.</span><span class="me1">OpenSession</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">public</span> T GetByID<span class="br0">&#40;</span><span class="kw4">int</span> id<span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">return</span> _session<span class="sy0">.</span><span class="kw1">Get</span><span class="sy0">&lt;</span>T<span class="sy0">&gt;</span><span class="br0">&#40;</span>id<span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">public</span> ICollection<span class="sy0">&lt;</span>T<span class="sy0">&gt;</span> GetAll<span class="br0">&#40;</span><span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">var</span> products <span class="sy0">=</span> _session
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="sy0">.</span><span class="me1">CreateCriteria</span><span class="br0">&#40;</span><span class="kw3">typeof</span><span class="br0">&#40;</span>T<span class="br0">&#41;</span><span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="sy0">.</span><span class="me1">List</span><span class="sy0">&lt;</span>T<span class="sy0">&gt;</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">return</span> products<span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">public</span> <span class="kw4">void</span> Update<span class="br0">&#40;</span>T toUpdate<span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">using</span> <span class="br0">&#40;</span>ITransaction transaction <span class="sy0">=</span> _session<span class="sy0">.</span><span class="me1">BeginTransaction</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; _session<span class="sy0">.</span><span class="me1">Update</span><span class="br0">&#40;</span>toUpdate<span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; transaction<span class="sy0">.</span><span class="me1">Commit</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">public</span> <span class="kw4">void</span> <span class="kw1">Add</span><span class="br0">&#40;</span>T toAdd<span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">using</span> <span class="br0">&#40;</span>ITransaction transaction <span class="sy0">=</span> _session<span class="sy0">.</span><span class="me1">BeginTransaction</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; _session<span class="sy0">.</span><span class="me1">Save</span><span class="br0">&#40;</span>toAdd<span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; transaction<span class="sy0">.</span><span class="me1">Commit</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">public</span> <span class="kw4">void</span> <span class="kw1">Remove</span><span class="br0">&#40;</span>T toRemove<span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">using</span> <span class="br0">&#40;</span>ITransaction transaction <span class="sy0">=</span> _session<span class="sy0">.</span><span class="me1">BeginTransaction</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; _session<span class="sy0">.</span><span class="me1">Delete</span><span class="br0">&#40;</span>toRemove<span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; transaction<span class="sy0">.</span><span class="me1">Commit</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">public</span> <span class="kw4">void</span> Dispose<span class="br0">&#40;</span><span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; _session<span class="sy0">.</span><span class="me1">Close</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; _session<span class="sy0">.</span><span class="me1">Dispose</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp; &nbsp; <span class="br0">&#125;</span>
<span class="br0">&#125;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">using System;
using System.Collections.Generic;
using NHibernate;
using NHibernate.Cfg;

namespace RecipeTracker.Repositories
{
    public abstract class BaseRepository&lt;T&gt; where T: new()
    {
        protected ISession _session = SessionProvider&lt;T&gt;.OpenSession();

        public T GetByID(int id)
        {
            return _session.Get&lt;T&gt;(id);
        }

        public ICollection&lt;T&gt; GetAll()
        {
            var products = _session
                .CreateCriteria(typeof(T))
                .List&lt;T&gt;();
            return products;
        }

        public void Update(T toUpdate)
        {
            using (ITransaction transaction = _session.BeginTransaction())
            {
                _session.Update(toUpdate);
                transaction.Commit();
            }
        }

        public void Add(T toAdd)
        {
            using (ITransaction transaction = _session.BeginTransaction())
            {
                _session.Save(toAdd);
                transaction.Commit();
            }
        }

        public void Remove(T toRemove)
        {
            using (ITransaction transaction = _session.BeginTransaction())
            {
                _session.Delete(toRemove);
                transaction.Commit();
            }
        }

        public void Dispose()
        {
            _session.Close();
            _session.Dispose();
        }
    }
}</pre></div></div>

<p>Now, look how simple that is to do what we need with our object?  No building SQL queries, no creating parameter arrays, or anything.  A nice simple bit of code that does just what we need it to do, without all the hassles.  We just need a session and the simple commands that it offers, and we can do anything we need.  Beautiful, right?</p>
<p>But what if we wanted to do something like get all recipes from a certain family?  This will be specific to the object type we need, so we can do that in our implementation of the baseclass (hey, gotta have something in there right!).  And this is in fact all that our RecipeRepository class has, one method:</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="csharp"><thead><tr><td colspan="2"  class="head">C#</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
</pre></td><td class="de1"><pre class="de1"><span class="kw1">using</span> <span class="co3">System</span><span class="sy0">;</span>
<span class="kw1">using</span> <span class="co3">System.Collections.Generic</span><span class="sy0">;</span>
<span class="kw1">using</span> <span class="co3">RecipeTracker.Model</span><span class="sy0">;</span>
<span class="kw1">using</span> <span class="co3">NHibernate</span><span class="sy0">;</span>
&nbsp;
<span class="kw1">namespace</span> RecipeTracker<span class="sy0">.</span><span class="me1">Repositories</span>
<span class="br0">&#123;</span>
&nbsp; &nbsp; <span class="kw1">public</span> <span class="kw4">class</span> RecipeRepository <span class="sy0">:</span> BaseRepository<span class="sy0">&lt;</span>Recipe<span class="sy0">&gt;</span>, Interfaces<span class="sy0">.</span><span class="me1">IRecipeRepository</span>, IDisposable
&nbsp; &nbsp; <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">public</span> ICollection<span class="sy0">&lt;</span>Recipe<span class="sy0">&gt;</span> GetByFamily<span class="br0">&#40;</span><span class="kw4">string</span> family<span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">var</span> products <span class="sy0">=</span> _session
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="sy0">.</span><span class="me1">CreateCriteria</span><span class="br0">&#40;</span><span class="kw3">typeof</span><span class="br0">&#40;</span>Recipe<span class="br0">&#41;</span><span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="sy0">.</span><span class="kw1">Add</span><span class="br0">&#40;</span>NHibernate<span class="sy0">.</span><span class="me1">Criterion</span><span class="sy0">.</span><span class="me1">Expression</span><span class="sy0">.</span><span class="me1">Eq</span><span class="br0">&#40;</span><span class="st0">&quot;Family&quot;</span>, family<span class="br0">&#41;</span><span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="sy0">.</span><span class="me1">List</span><span class="sy0">&lt;</span>Recipe<span class="sy0">&gt;</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">return</span> products<span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp; &nbsp; <span class="br0">&#125;</span>
<span class="br0">&#125;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">using System;
using System.Collections.Generic;
using RecipeTracker.Model;
using NHibernate;

namespace RecipeTracker.Repositories
{
    public class RecipeRepository : BaseRepository&lt;Recipe&gt;, Interfaces.IRecipeRepository, IDisposable
    {
        public ICollection&lt;Recipe&gt; GetByFamily(string family)
        {
                var products = _session
                    .CreateCriteria(typeof(Recipe))
                    .Add(NHibernate.Criterion.Expression.Eq("Family", family))
                    .List&lt;Recipe&gt;();
                return products;
        }
    }
}</pre></div></div>

<p>This is some wacky looking code at first.  It kind of reminds me of Linq, but what its&#8217; called is HQL (Hibernate Query Language).  I haven&#8217;t really gotten into it all that much, so I don&#8217;t feel qualified to speak about it in detail, but I do find it kinda cool.  It may not be as easy as Linq, where you could do a nice Linq query such as</p>
<p><code class="codespan">recipeList.Where(n =&gt; n.Family = family)</code></p>
<p>But remember this needs to work on older framework versions as well.  I think the HQL is reasonably succinct, and even somewhat elegant.  After all reading that you can just about instantly tell what it does. It just creates a criteria on the session for Recipes, and then defines the expression to be evaluated (table.Family = family).  Pretty cool.  We could probably figure out how to do this with generics pretty easily, but I figure this kind of method is going to be tied to your specific type, and you want to have a descriptive name, and all that.</p>
<p>So after all this I think we are ready to set up some tests.  This will be on the next page (damn I&#8217;m getting long-winded!)</p>
]]></content:encoded>
			<wfw:commentRss>/index.php/desktopdev/mstech/my-path-to-the-dark-side-part-4-the-repo/feed/</wfw:commentRss>
		<slash:comments>2</slash:comments>
		</item>
		<item>
		<title>My Path to the Dark Side part 3 &#8211; Testing the Schema</title>
		<link>/index.php/desktopdev/mstech/my-path-to-the-dark-side-part-3-testing/</link>
		<comments>/index.php/desktopdev/mstech/my-path-to-the-dark-side-part-3-testing/#respond</comments>
		<pubDate>Mon, 21 Jul 2008 13:59:00 +0000</pubDate>
		<dc:creator><![CDATA[Alex Ullrich]]></dc:creator>
				<category><![CDATA[C#]]></category>
		<category><![CDATA[Microsoft Technologies]]></category>
		<category><![CDATA[c#]]></category>
		<category><![CDATA[nhibernate]]></category>
		<category><![CDATA[unit testing]]></category>

		<guid isPermaLink="false">/index.php/2008/07/my-path-to-the-dark-side-part-3-testing/</guid>
		<description><![CDATA[Previous posts can be found here: Part One &#8211; The Beginning Part Two &#8211; The Domain Model In part two we set up our domain model. Now, before we can test nhibernate&#8217;s ability to work with and persist objects, we need to ensure that we&#8217;ve defined our schema well enough that NHibernate can create the [&#8230;]]]></description>
				<content:encoded><![CDATA[<p>Previous posts can be found here:</p>
<ul>
<li><a href="/index.php/DesktopDev/MSTech/the-path-to-nhibernate-aamp-tdd-part-1-t">Part One &#8211; The Beginning</a></li>
<li><a href="/index.php/DesktopDev/MSTech/my-path-to-the-dark-side-part-2-the-doma">Part Two &#8211; The Domain Model</a></li>
</ul>
<p>In part two we set up our domain model.  Now, before we can test nhibernate&#8217;s ability to work with and persist objects, we need to ensure that we&#8217;ve defined our schema well enough that NHibernate can create the Schema for us (since that was kind of the point).  Now is where NUnit starts to become very useful.</p>
<p>First step we&#8217;re going to take to set up NUnit is to add another project to our solution.  I named this project the very creative RecipeTracker.Tests.  When setting up this project, it is important to add all the same references as we used in the main project.  In addition we need to add a reference to the main project itself and a reference to nunit.framework.  For the main project, we&#8217;ll need to again set the &#8220;CopyLocal&#8221; option to true.  Finally, we also need a copy of our Sql Compact database in this project.</p>
<p>Our first unit test will just be to see that we can export the schema.  Here it is:</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="csharp"><thead><tr><td colspan="2"  class="head">C#</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
</pre></td><td class="de1"><pre class="de1"><span class="kw1">using</span> <span class="co3">System</span><span class="sy0">;</span>
<span class="kw1">using</span> <span class="co3">System.Collections.Generic</span><span class="sy0">;</span>
<span class="kw1">using</span> <span class="co3">System.Linq</span><span class="sy0">;</span>
<span class="kw1">using</span> <span class="co3">System.Text</span><span class="sy0">;</span>
<span class="kw1">using</span> <span class="co3">NHibernate.Cfg</span><span class="sy0">;</span>
<span class="kw1">using</span> <span class="co3">NHibernate.Tool.hbm2ddl</span><span class="sy0">;</span>
<span class="kw1">using</span> <span class="co3">NUnit.Framework</span><span class="sy0">;</span>
<span class="kw1">using</span> <span class="co3">RecipeTrackerPartOne</span><span class="sy0">;</span>
&nbsp;
<span class="kw1">namespace</span> RecipeTrackerPartOne<span class="sy0">.</span><span class="me1">Tests</span>
<span class="br0">&#123;</span>
&nbsp; &nbsp; <span class="br0">&#91;</span>TestFixture<span class="br0">&#93;</span>
&nbsp; &nbsp; <span class="kw1">public</span> <span class="kw4">class</span> GenerateSchema_Fixture
&nbsp; &nbsp; <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#91;</span>Test<span class="br0">&#93;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">public</span> <span class="kw4">void</span> Can_generate_schema<span class="br0">&#40;</span><span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">var</span> cfg <span class="sy0">=</span> <span class="kw3">new</span> Configuration<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; cfg<span class="sy0">.</span><span class="me1">Configure</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; cfg<span class="sy0">.</span><span class="me1">AddAssembly</span><span class="br0">&#40;</span><span class="kw3">typeof</span><span class="br0">&#40;</span>Model<span class="sy0">.</span><span class="me1">Recipe</span><span class="br0">&#41;</span><span class="sy0">.</span><span class="me1">Assembly</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw3">new</span> SchemaExport<span class="br0">&#40;</span>cfg<span class="br0">&#41;</span><span class="sy0">.</span><span class="me1">Execute</span><span class="br0">&#40;</span><span class="kw1">false</span>, <span class="kw1">true</span>, <span class="kw1">false</span>, <span class="kw1">false</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp; &nbsp; <span class="br0">&#125;</span>
<span class="br0">&#125;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using NHibernate.Cfg;
using NHibernate.Tool.hbm2ddl;
using NUnit.Framework;
using RecipeTrackerPartOne;

namespace RecipeTrackerPartOne.Tests
{
    [TestFixture]
    public class GenerateSchema_Fixture
    {
        [Test]
        public void Can_generate_schema()
        {
            var cfg = new Configuration();
            cfg.Configure();
            cfg.AddAssembly(typeof(Model.Recipe).Assembly);

            new SchemaExport(cfg).Execute(false, true, false, false);
        }
    }
}</pre></div></div>

<p>There&#8217;s a lot of new stuff going on here.  Most noticeable is the directive to use nunit.framework, and the attributes added to our class and our methods.  These attributes are used when we load the project into NUnit, so that the NUnit application knows which code to execute as a test.  We need to identify our class as a TestFixture, then our method within the class as a Test (this setup allows us to include supporting code that is not necessarily a test).  Also notable is the directive to use NHibernate.Tool.hbm2ddl.  This is what allows NHibernate to create the schema for us (by converting Hibernate mappings to Data Definition Language).</p>
<p>The most interesting line, as far as I am concerned, is the &#8220;AddAssembly&#8221; line.  This is what associates our Configuration with a given assembly, and therefore that assembly&#8217;s hibernate.cfg.xml file.  So, what we are really testing here is really the schema we have defined in the xml file.</p>
<p>If everything is set up right, when you fire up the NUnit GUI, load the RecipeTracker.Tests assembly, and run the test, you should see a nice green bar.  Unfortunately, we broke the first rule of Unit Testing, that the first time we run a test it should fail.  Well, I didn&#8217;t, but I wanted to spare you gentle readers some of the pain of wrestling with the mapping file.  But fear not, because now it is time to experience the joy that is the red, &#8220;you screwed up&#8221; bar.  Remember, we want to confirm that NUnit will in fact tell us when we do screw up!</p>
<p>For this part we&#8217;ll need to start setting up our repositories to move the objects to and from the database.  This gets pretty involved, so this will have to be continued in Part 4.</p>
<p>Here is the sample project (so far).  Next one will be where it gets interesting!  <a href="http://www.mediafire.com/?vetm5z4ou4d">Sample Project &#8211; Part 1</a></p>
]]></content:encoded>
			<wfw:commentRss>/index.php/desktopdev/mstech/my-path-to-the-dark-side-part-3-testing/feed/</wfw:commentRss>
		<slash:comments>0</slash:comments>
		</item>
		<item>
		<title>My Path to the Dark Side part 2 &#8211; The Domain Model</title>
		<link>/index.php/desktopdev/mstech/my-path-to-the-dark-side-part-2-the-doma/</link>
		<comments>/index.php/desktopdev/mstech/my-path-to-the-dark-side-part-2-the-doma/#respond</comments>
		<pubDate>Tue, 15 Jul 2008 10:24:00 +0000</pubDate>
		<dc:creator><![CDATA[Alex Ullrich]]></dc:creator>
				<category><![CDATA[C#]]></category>
		<category><![CDATA[Microsoft Technologies]]></category>
		<category><![CDATA[c#]]></category>
		<category><![CDATA[nhibernate]]></category>
		<category><![CDATA[unit testing]]></category>

		<guid isPermaLink="false">/index.php/2008/07/my-path-to-the-dark-side-part-2-the-doma/</guid>
		<description><![CDATA[Part One &#8211; The Beginning In part one we discussed what has brought me to the shameful point of using an object-relational mapper. At the risk of being ostracized from the database community, I really think this is going to be helpful for my project. The next step is to actually build up the domain [&#8230;]]]></description>
				<content:encoded><![CDATA[<ul>
<li><a href="/index.php/DesktopDev/MSTech/the-path-to-nhibernate-aamp-tdd-part-1-t">Part One &#8211; The Beginning</a></li>
</ul>
<p>In part one we discussed what has brought me to the shameful point of using an object-relational mapper.  At the risk of being ostracized from the database community, I really think this is going to be helpful for my project.  </p>
<p>The next step is to actually build up the domain model, and set up the mappings for NHibernate.  I won&#8217;t be pasting all the code in here, but I will be attaching the project itself to the next post if anyone&#8217;s interested.  I ended up working ahead of myself so I had to kind of go backwards to create a &#8220;part one&#8221; project (I got too carried away with working, forgot to check in for a few days <img src="https://s.w.org/images/core/emoji/2/72x72/1f641.png" alt="🙁" class="wp-smiley" style="height: 1em; max-height: 1em;" /> ).  First let us look at the &#8220;recipe&#8221; domain object, which is at the center of everything.</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="csharp"><thead><tr><td colspan="2"  class="head">C#</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72
73
74
75
76
77
78
79
80
81
82
83
84
85
86
87
88
89
90
91
92
93
94
95
96
97
98
99
100
101
102
103
104
105
106
107
108
109
110
111
112
113
114
115
116
117
118
119
120
121
122
123
124
125
126
127
128
129
130
131
132
133
134
135
136
137
138
139
140
141
142
143
144
145
146
147
148
149
150
151
152
153
154
155
156
157
158
159
160
161
162
163
164
165
166
167
168
169
170
171
</pre></td><td class="de1"><pre class="de1"><span class="kw1">using</span> <span class="co3">System</span><span class="sy0">;</span>
<span class="kw1">using</span> <span class="co3">System.Collections.Generic</span><span class="sy0">;</span>
<span class="kw1">using</span> <span class="co3">System.Linq</span><span class="sy0">;</span>
<span class="kw1">using</span> <span class="co3">System.Text</span><span class="sy0">;</span>
&nbsp;
<span class="kw1">namespace</span> RecipeTrackerPartOne<span class="sy0">.</span><span class="me1">Model</span>
<span class="br0">&#123;</span>
&nbsp; &nbsp; <span class="kw1">public</span> <span class="kw4">class</span> Recipe
&nbsp; &nbsp; <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">private</span> Int32 _id<span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">private</span> <span class="kw4">String</span> _name<span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">private</span> DateTime _attemptDate<span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">private</span> <span class="kw4">String</span> _family<span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">private</span> <span class="kw4">String</span> _style<span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">private</span> <span class="kw4">Double</span> _originalGravity<span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">private</span> <span class="kw4">Double</span> _finalGravity<span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">private</span> Int32 _boilTime<span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">private</span> Int32 _fermentationTime<span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">private</span> Int32 _fermentationTemperature<span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">private</span> Int32 _secondaryFermentationTime<span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">private</span> <span class="kw4">String</span> _yeast<span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">private</span> Int32 _batchSize<span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">private</span> <span class="kw4">String</span> _note<span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">private</span> Person _brewer<span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; <span class="co1">//rating info</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">private</span> IList<span class="sy0">&lt;</span>Impression<span class="sy0">&gt;</span> _recipeImpressions<span class="sy0">;</span>
&nbsp;
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; <span class="co1">//list of ingredients</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">private</span> IList<span class="sy0">&lt;</span>Ingredient<span class="sy0">&gt;</span> _ingredientsUsed<span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">public</span> Recipe<span class="br0">&#40;</span><span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; _recipeImpressions <span class="sy0">=</span> <span class="kw3">new</span> List<span class="sy0">&lt;</span>Recipe<span class="sy0">&gt;</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; _ingredientsUsed <span class="sy0">=</span> <span class="kw3">new</span> List<span class="sy0">&lt;</span>Recipe<span class="sy0">&gt;</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">public</span> Int32 Id
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">get</span> <span class="br0">&#123;</span> <span class="kw1">return</span> _id<span class="sy0">;</span> <span class="br0">&#125;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">set</span> <span class="br0">&#123;</span> _id <span class="sy0">=</span> <span class="kw1">value</span><span class="sy0">;</span> <span class="br0">&#125;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">public</span> <span class="kw4">String</span> Name
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">get</span> <span class="br0">&#123;</span> <span class="kw1">return</span> _name<span class="sy0">;</span> <span class="br0">&#125;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">set</span> <span class="br0">&#123;</span> _name <span class="sy0">=</span> <span class="kw1">value</span><span class="sy0">;</span> <span class="br0">&#125;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">public</span> DateTime AttemptDate
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">get</span> <span class="br0">&#123;</span> <span class="kw1">return</span> _attemptDate<span class="sy0">;</span> <span class="br0">&#125;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">set</span> <span class="br0">&#123;</span> _attemptDate <span class="sy0">=</span> <span class="kw1">value</span><span class="sy0">;</span> <span class="br0">&#125;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">public</span> <span class="kw4">String</span> Family
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">get</span> <span class="br0">&#123;</span> <span class="kw1">return</span> _family<span class="sy0">;</span> <span class="br0">&#125;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">set</span> <span class="br0">&#123;</span> _family <span class="sy0">=</span> <span class="kw1">value</span><span class="sy0">;</span> <span class="br0">&#125;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">public</span> <span class="kw4">String</span> Style
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">get</span> <span class="br0">&#123;</span> <span class="kw1">return</span> _style<span class="sy0">;</span> <span class="br0">&#125;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">set</span> <span class="br0">&#123;</span> _style <span class="sy0">=</span> <span class="kw1">value</span><span class="sy0">;</span> <span class="br0">&#125;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">public</span> <span class="kw4">Double</span> OriginalGravity
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">get</span> <span class="br0">&#123;</span> <span class="kw1">return</span> _originalGravity<span class="sy0">;</span> <span class="br0">&#125;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">set</span> <span class="br0">&#123;</span> _originalGravity <span class="sy0">=</span> <span class="kw1">value</span><span class="sy0">;</span> <span class="br0">&#125;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">public</span> <span class="kw4">Double</span> FinalGravity
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">get</span> <span class="br0">&#123;</span> <span class="kw1">return</span> _finalGravity<span class="sy0">;</span> <span class="br0">&#125;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">set</span> <span class="br0">&#123;</span> _finalGravity <span class="sy0">=</span> <span class="kw1">value</span><span class="sy0">;</span> <span class="br0">&#125;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">public</span> Int32 BoilTime
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">get</span> <span class="br0">&#123;</span> <span class="kw1">return</span> _boilTime<span class="sy0">;</span> <span class="br0">&#125;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">set</span> <span class="br0">&#123;</span> _boilTime <span class="sy0">=</span> <span class="kw1">value</span><span class="sy0">;</span> <span class="br0">&#125;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">public</span> Int32 FermentationTime
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">get</span> <span class="br0">&#123;</span> <span class="kw1">return</span> _fermentationTime<span class="sy0">;</span> <span class="br0">&#125;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">set</span> <span class="br0">&#123;</span> _fermentationTime <span class="sy0">=</span> <span class="kw1">value</span><span class="sy0">;</span> <span class="br0">&#125;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">public</span> Int32 FermentationTemperature
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">get</span> <span class="br0">&#123;</span> <span class="kw1">return</span> _fermentationTemperature<span class="sy0">;</span> <span class="br0">&#125;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">set</span> <span class="br0">&#123;</span> _fermentationTemperature <span class="sy0">=</span> <span class="kw1">value</span><span class="sy0">;</span> <span class="br0">&#125;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">public</span> Int32 SecondaryFermentationTime
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">get</span> <span class="br0">&#123;</span> <span class="kw1">return</span> _secondaryFermentationTime<span class="sy0">;</span> <span class="br0">&#125;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">set</span> <span class="br0">&#123;</span> _secondaryFermentationTime <span class="sy0">=</span> <span class="kw1">value</span><span class="sy0">;</span> <span class="br0">&#125;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">public</span> <span class="kw4">String</span> Yeast
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">get</span> <span class="br0">&#123;</span> <span class="kw1">return</span> _yeast<span class="sy0">;</span> <span class="br0">&#125;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">set</span> <span class="br0">&#123;</span> _yeast <span class="sy0">=</span> <span class="kw1">value</span><span class="sy0">;</span> <span class="br0">&#125;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">public</span> Int32 BatchSize
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">get</span> <span class="br0">&#123;</span> <span class="kw1">return</span> _batchSize<span class="sy0">;</span> <span class="br0">&#125;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">set</span> <span class="br0">&#123;</span> _batchSize <span class="sy0">=</span> <span class="kw1">value</span><span class="sy0">;</span> <span class="br0">&#125;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">public</span> <span class="kw4">String</span> Note
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">get</span> <span class="br0">&#123;</span> <span class="kw1">return</span> _note<span class="sy0">;</span> <span class="br0">&#125;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">set</span> <span class="br0">&#123;</span> _note <span class="sy0">=</span> <span class="kw1">value</span><span class="sy0">;</span> <span class="br0">&#125;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">public</span> IList<span class="sy0">&lt;</span>Impression<span class="sy0">&gt;</span> RecipeImpressions
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">get</span> <span class="br0">&#123;</span> <span class="kw1">return</span> _recipeImpressions<span class="sy0">;</span> <span class="br0">&#125;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">set</span> <span class="br0">&#123;</span> _recipeImpressions <span class="sy0">=</span> <span class="kw1">value</span><span class="sy0">;</span> <span class="br0">&#125;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">public</span> IList<span class="sy0">&lt;</span>Ingredient<span class="sy0">&gt;</span> IngredientsUsed
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">get</span> <span class="br0">&#123;</span> <span class="kw1">return</span> _ingredientsUsed<span class="sy0">;</span> <span class="br0">&#125;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">set</span> <span class="br0">&#123;</span> _ingredientsUsed <span class="sy0">=</span> <span class="kw1">value</span><span class="sy0">;</span> <span class="br0">&#125;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">public</span> Person Brewer
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">get</span> <span class="br0">&#123;</span> <span class="kw1">return</span> _brewer<span class="sy0">;</span> <span class="br0">&#125;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">set</span> <span class="br0">&#123;</span> _brewer <span class="sy0">=</span> <span class="kw1">value</span><span class="sy0">;</span> <span class="br0">&#125;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">public</span> <span class="kw4">void</span> AddIngredient<span class="br0">&#40;</span>Model<span class="sy0">.</span><span class="me1">Ingredient</span> i<span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; _ingredientsUsed<span class="sy0">.</span><span class="kw1">Add</span><span class="br0">&#40;</span>i<span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">public</span> <span class="kw4">void</span> RemoveIngredient<span class="br0">&#40;</span>Model<span class="sy0">.</span><span class="me1">Ingredient</span> i<span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; _ingredientsUsed<span class="sy0">.</span><span class="kw1">Remove</span><span class="br0">&#40;</span>_ingredientsUsed<span class="sy0">.</span><span class="me1">Single</span><span class="sy0">&lt;</span>Model<span class="sy0">.</span><span class="me1">Ingredient</span><span class="sy0">&gt;</span><span class="br0">&#40;</span>x <span class="sy0">=&gt;</span> x <span class="sy0">==</span> i<span class="br0">&#41;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">public</span> <span class="kw4">void</span> AddImpression<span class="br0">&#40;</span>Model<span class="sy0">.</span><span class="me1">Impression</span> i<span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; _recipeImpressions<span class="sy0">.</span><span class="kw1">Add</span><span class="br0">&#40;</span>i<span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">public</span> <span class="kw4">void</span> ChangeBrewer<span class="br0">&#40;</span>Model<span class="sy0">.</span><span class="me1">Person</span> p<span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; _brewer <span class="sy0">=</span> p<span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">public</span> <span class="kw4">Double</span> AlcoholByWeight<span class="br0">&#40;</span><span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">return</span> <span class="br0">&#40;</span><span class="nu0">76.08</span> <span class="sy0">*</span> Convert<span class="sy0">.</span><span class="me1">ToDouble</span><span class="br0">&#40;</span>_originalGravity <span class="sy0">-</span> _finalGravity<span class="br0">&#41;</span><span class="br0">&#41;</span> <span class="sy0">/</span> <span class="br0">&#40;</span><span class="nu0">1.775</span> <span class="sy0">-</span> Convert<span class="sy0">.</span><span class="me1">ToDouble</span><span class="br0">&#40;</span>_originalGravity<span class="br0">&#41;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">public</span> <span class="kw4">Double</span> AlcoholByVolume<span class="br0">&#40;</span><span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">return</span> AlcoholByWeight<span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="sy0">*</span> <span class="br0">&#40;</span>Convert<span class="sy0">.</span><span class="me1">ToDouble</span><span class="br0">&#40;</span>_finalGravity<span class="br0">&#41;</span> <span class="sy0">/</span> <span class="nu0">0.794</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp; &nbsp; <span class="br0">&#125;</span>
<span class="br0">&#125;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

namespace RecipeTrackerPartOne.Model
{
    public class Recipe
    {
        private Int32 _id;
        private String _name;
        private DateTime _attemptDate;
        private String _family;
        private String _style;
        private Double _originalGravity;
        private Double _finalGravity;
        private Int32 _boilTime;
        private Int32 _fermentationTime;
        private Int32 _fermentationTemperature;
        private Int32 _secondaryFermentationTime;
        private String _yeast;
        private Int32 _batchSize;
        private String _note;
        private Person _brewer;

        //rating info
        private IList&lt;Impression&gt; _recipeImpressions;


        //list of ingredients
        private IList&lt;Ingredient&gt; _ingredientsUsed;

        public Recipe()
        {
            _recipeImpressions = new List&lt;Recipe&gt;();
            _ingredientsUsed = new List&lt;Recipe&gt;();
        }

        public Int32 Id
        {
            get { return _id; }
            set { _id = value; }
        }

        public String Name
        {
            get { return _name; }
            set { _name = value; }
        }

        public DateTime AttemptDate
        {
            get { return _attemptDate; }
            set { _attemptDate = value; }
        }

        public String Family
        {
            get { return _family; }
            set { _family = value; }
        }

        public String Style
        {
            get { return _style; }
            set { _style = value; }
        }

        public Double OriginalGravity
        {
            get { return _originalGravity; }
            set { _originalGravity = value; }
        }

        public Double FinalGravity
        {
            get { return _finalGravity; }
            set { _finalGravity = value; }
        }

        public Int32 BoilTime
        {
            get { return _boilTime; }
            set { _boilTime = value; }
        }

        public Int32 FermentationTime
        {
            get { return _fermentationTime; }
            set { _fermentationTime = value; }
        }

        public Int32 FermentationTemperature
        {
            get { return _fermentationTemperature; }
            set { _fermentationTemperature = value; }
        }

        public Int32 SecondaryFermentationTime
        {
            get { return _secondaryFermentationTime; }
            set { _secondaryFermentationTime = value; }
        }

        public String Yeast
        {
            get { return _yeast; }
            set { _yeast = value; }
        }

        public Int32 BatchSize
        {
            get { return _batchSize; }
            set { _batchSize = value; }
        }

        public String Note
        {
            get { return _note; }
            set { _note = value; }
        }

        public IList&lt;Impression&gt; RecipeImpressions
        {
            get { return _recipeImpressions; }
            set { _recipeImpressions = value; }
        }

        public IList&lt;Ingredient&gt; IngredientsUsed
        {
            get { return _ingredientsUsed; }
            set { _ingredientsUsed = value; }
        }

        public Person Brewer
        {
            get { return _brewer; }
            set { _brewer = value; }
        }

        public void AddIngredient(Model.Ingredient i)
        {
            _ingredientsUsed.Add(i);
        }

        public void RemoveIngredient(Model.Ingredient i)
        {
            _ingredientsUsed.Remove(_ingredientsUsed.Single&lt;Model.Ingredient&gt;(x =&gt; x == i));
        }

        public void AddImpression(Model.Impression i)
        {
            _recipeImpressions.Add(i);
        }

        public void ChangeBrewer(Model.Person p)
        {
            _brewer = p;
        }

        public Double AlcoholByWeight()
        {
            return (76.08 * Convert.ToDouble(_originalGravity - _finalGravity)) / (1.775 - Convert.ToDouble(_originalGravity));
        }

        public Double AlcoholByVolume()
        {
            return AlcoholByWeight() * (Convert.ToDouble(_finalGravity) / 0.794);
        }
    }
}</pre></div></div>

<p>Its&#8217; a pretty simple object, it has some data, and just a couple methods.  The most interesting properties to look at here are RecipeImpressions, IngredientsUsed, and Brewer.  Why are these the most interesting?  Because each is of another type (Impression, Ingredient, and Person, respectively) that we will need to persist in our database.  Now that we&#8217;ve got an object in mind, lets&#8217; start thinking about setting this up.  </p>
<p><strong>Setting Up The Project</strong></p>
<p>We need to do some housekeeping before we proceed.  </p>
<p>First, adding our references to the following:</p>
<ul>
<li>NHibernate (I used the most recent beta version since this is not exactly a critical app)</li>
<li>Sql Server Compact (System.Data.SqlServerCe)</li>
</ul>
<p>Once these references are added, we need to make sure both have their &#8220;Copy Local&#8221; property set to True (by default this will be false for SqlServerCe).  </p>
<p>After adding the references, we need to add a Sql Server Compact database to our project (in the root directory).  I called it &#8220;BeerRecipes.sdf&#8221;.  You can skip that Data Set Wizard thing that pops up.</p>
<p>Once this is done, we are ready to set up NHibernate.</p>
<p><strong>Setting Up NHibernate Configuration</strong></p>
<p>NHibernate is driven by an xml file added to the project called hibernate.cfg.xml.  So what are you waiting for, add that file! (again to the root directory)  I promise to be here when you get back.  Ok, that was not so hard, right?  Now, what do we need to add to this file?  For this simple example, not all that much.  We need to define a &#8220;session-factory&#8221; class, which is basically a more sophisticated connection string.  Properties we need to set include:</p>
<ul>
<li>Provider</li>
<li>Dialect &#8211; SQL &#8220;flavor&#8221; for NHibernate to use</li>
<li>Driver &#8211; Driver NHibernate uses to identify (and connect to) Provider</li>
<li>Connection String &#8211; where is the database located?</li>
<li>Show Sql &#8211; whether to output SQL to the console</li>
</ul>
<p>So, what does this file look like?  Glad you asked:</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="xml"><thead><tr><td colspan="2"  class="head">XML</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
</pre></td><td class="de1"><pre class="de1"><span class="sc3"><span class="re1">&lt;?xml</span> <span class="re0">version</span>=<span class="st0">&quot;1.0&quot;</span> <span class="re0">encoding</span>=<span class="st0">&quot;utf-8&quot;</span> <span class="re2">?&gt;</span></span>
<span class="sc3"><span class="re1">&lt;hibernate-configuration</span> <span class="re0">xmlns</span>=<span class="st0">&quot;urn:nhibernate-configuration-2.2&quot;</span><span class="re2">&gt;</span></span>
&nbsp; <span class="sc3"><span class="re1">&lt;session-factory<span class="re2">&gt;</span></span></span>
&nbsp; &nbsp; <span class="sc3"><span class="re1">&lt;property</span> <span class="re0">name</span>=<span class="st0">&quot;connection.provider&quot;</span><span class="re2">&gt;</span></span>NHibernate.Connection.DriverConnectionProvider<span class="sc3"><span class="re1">&lt;/property<span class="re2">&gt;</span></span></span>
&nbsp; &nbsp; <span class="sc3"><span class="re1">&lt;property</span> <span class="re0">name</span>=<span class="st0">&quot;dialect&quot;</span><span class="re2">&gt;</span></span>NHibernate.Dialect.MsSqlCeDialect<span class="sc3"><span class="re1">&lt;/property<span class="re2">&gt;</span></span></span>
&nbsp; &nbsp; <span class="sc3"><span class="re1">&lt;property</span> <span class="re0">name</span>=<span class="st0">&quot;connection.driver_class&quot;</span><span class="re2">&gt;</span></span>NHibernate.Driver.SqlServerCeDriver<span class="sc3"><span class="re1">&lt;/property<span class="re2">&gt;</span></span></span>
&nbsp; &nbsp; <span class="sc3"><span class="re1">&lt;property</span> <span class="re0">name</span>=<span class="st0">&quot;connection.connection_string&quot;</span><span class="re2">&gt;</span></span>Data Source=BeerRecipes.sdf<span class="sc3"><span class="re1">&lt;/property<span class="re2">&gt;</span></span></span>
&nbsp; &nbsp; <span class="sc3"><span class="re1">&lt;property</span> <span class="re0">name</span>=<span class="st0">&quot;show_sql&quot;</span><span class="re2">&gt;</span></span>true<span class="sc3"><span class="re1">&lt;/property<span class="re2">&gt;</span></span></span>
&nbsp; <span class="sc3"><span class="re1">&lt;/session-factory<span class="re2">&gt;</span></span></span>
<span class="sc3"><span class="re1">&lt;/hibernate-configuration<span class="re2">&gt;</span></span></span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">&lt;?xml version="1.0" encoding="utf-8" ?&gt;
&lt;hibernate-configuration xmlns="urn:nhibernate-configuration-2.2"&gt;
  &lt;session-factory&gt;
    &lt;property name="connection.provider"&gt;NHibernate.Connection.DriverConnectionProvider&lt;/property&gt;
    &lt;property name="dialect"&gt;NHibernate.Dialect.MsSqlCeDialect&lt;/property&gt;
    &lt;property name="connection.driver_class"&gt;NHibernate.Driver.SqlServerCeDriver&lt;/property&gt;
    &lt;property name="connection.connection_string"&gt;Data Source=BeerRecipes.sdf&lt;/property&gt;
    &lt;property name="show_sql"&gt;true&lt;/property&gt;
  &lt;/session-factory&gt;
&lt;/hibernate-configuration&gt;</pre></div></div>

<p>For the most part these are pretty self explanatory.  The only one I&#8217;ve really been messing with is the &#8220;show_sql&#8221; property, which controls whether the sql generated by NHibernate is output to the console or not.  I like to set this to true when I am running my unit tests manually, so I can look at the SQL in case a test fails.  Otherwise, I would set it to false.</p>
<p><strong>Setting up NHibernate Mappings</strong></p>
<p>This is where it gets interesting.  We now need to tell NHibernate which tables within the database to store our objects in, and define any relationships between the objects.  We also need to tell NHibernate which assembly to look for our types in.  We&#8217;ll do this in a mappings file.  I created a special &#8220;mappings&#8221; folder within the project for this.  The naming convention for these files is myfile.hbm.xml.  Because I&#8217;m lazy I just created one file, called RecipeMappings.hbm.xml and threw everything in there.  So lets&#8217; just get the whole thing on the table first, then talk about it (only 2 classes included for brevity&#8217;s sake, but they&#8217;re all there I swear).</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="xml"><thead><tr><td colspan="2"  class="head">XML</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
</pre></td><td class="de1"><pre class="de1"><span class="sc3"><span class="re1">&lt;?xml</span> <span class="re0">version</span>=<span class="st0">&quot;1.0&quot;</span> <span class="re0">encoding</span>=<span class="st0">&quot;utf-8&quot;</span> <span class="re2">?&gt;</span></span>
<span class="sc3"><span class="re1">&lt;hibernate-mapping</span> <span class="re0">xmlns</span>=<span class="st0">&quot;urn:nhibernate-mapping-2.2&quot;</span></span>
<span class="sc3"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="re0">assembly</span>=<span class="st0">&quot;RecipeTracker&quot;</span></span>
<span class="sc3"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="re0">namespace</span>=<span class="st0">&quot;RecipeTracker.Model&quot;</span><span class="re2">&gt;</span></span>
&nbsp;
&nbsp; <span class="sc3"><span class="re1">&lt;class</span> <span class="re0">name</span>=<span class="st0">&quot;Recipe&quot;</span> <span class="re0">table</span>=<span class="st0">&quot;Recipes&quot;</span><span class="re2">&gt;</span></span>
&nbsp; &nbsp; <span class="sc3"><span class="re1">&lt;id</span> <span class="re0">name</span>=<span class="st0">&quot;Id&quot;</span> <span class="re0">column</span>=<span class="st0">&quot;Id&quot;</span> <span class="re0">type</span>=<span class="st0">&quot;Int32&quot;</span><span class="re2">&gt;</span></span>
&nbsp; &nbsp; &nbsp; <span class="sc3"><span class="re1">&lt;generator</span> <span class="re0">class</span>=<span class="st0">&quot;native&quot;</span> <span class="re2">/&gt;</span></span>
&nbsp; &nbsp; <span class="sc3"><span class="re1">&lt;/id<span class="re2">&gt;</span></span></span>
&nbsp; &nbsp; <span class="sc3"><span class="re1">&lt;property</span> <span class="re0">name</span>=<span class="st0">&quot;Name&quot;</span> <span class="re0">type</span>=<span class="st0">&quot;String(35)&quot;</span><span class="re2">/&gt;</span></span>
&nbsp; &nbsp; <span class="sc-1">&lt;!-- we can also do without specifycing type and let nhibernate do the work--&gt;</span>
&nbsp; &nbsp; <span class="sc3"><span class="re1">&lt;property</span> <span class="re0">name</span>=<span class="st0">&quot;AttemptDate&quot;</span><span class="re2">/&gt;</span></span>
&nbsp; &nbsp; <span class="sc3"><span class="re1">&lt;property</span> <span class="re0">name</span>=<span class="st0">&quot;Family&quot;</span><span class="re2">/&gt;</span></span>
&nbsp; &nbsp; <span class="sc3"><span class="re1">&lt;property</span> <span class="re0">name</span>=<span class="st0">&quot;Style&quot;</span><span class="re2">/&gt;</span></span>
&nbsp; &nbsp; <span class="sc3"><span class="re1">&lt;property</span> <span class="re0">name</span>=<span class="st0">&quot;OriginalGravity&quot;</span><span class="re2">/&gt;</span></span>
&nbsp; &nbsp; <span class="sc3"><span class="re1">&lt;property</span> <span class="re0">name</span>=<span class="st0">&quot;FinalGravity&quot;</span><span class="re2">/&gt;</span></span>
&nbsp; &nbsp; <span class="sc3"><span class="re1">&lt;property</span> <span class="re0">name</span>=<span class="st0">&quot;BoilTime&quot;</span><span class="re2">/&gt;</span></span>
&nbsp; &nbsp; <span class="sc3"><span class="re1">&lt;property</span> <span class="re0">name</span>=<span class="st0">&quot;FermentationTime&quot;</span><span class="re2">/&gt;</span></span>
&nbsp; &nbsp; <span class="sc3"><span class="re1">&lt;property</span> <span class="re0">name</span>=<span class="st0">&quot;FermentationTemperature&quot;</span><span class="re2">/&gt;</span></span>
&nbsp; &nbsp; <span class="sc3"><span class="re1">&lt;property</span> <span class="re0">name</span>=<span class="st0">&quot;SecondaryFermentationTime&quot;</span><span class="re2">/&gt;</span></span>
&nbsp; &nbsp; <span class="sc3"><span class="re1">&lt;property</span> <span class="re0">name</span>=<span class="st0">&quot;Yeast&quot;</span><span class="re2">/&gt;</span></span>
&nbsp; &nbsp; <span class="sc3"><span class="re1">&lt;property</span> <span class="re0">name</span>=<span class="st0">&quot;BatchSize&quot;</span><span class="re2">/&gt;</span></span>
&nbsp; &nbsp; <span class="sc3"><span class="re1">&lt;property</span> <span class="re0">name</span>=<span class="st0">&quot;Note&quot;</span><span class="re2">/&gt;</span></span>
&nbsp; &nbsp; <span class="sc-1">&lt;!-- nhibernate will set up a foreign key relationship between tables for us --&gt;</span>
&nbsp; &nbsp; <span class="sc3"><span class="re1">&lt;bag</span> <span class="re0">name</span>=<span class="st0">&quot;IngredientsUsed&quot;</span> <span class="re0">cascade</span>=<span class="st0">&quot;all&quot;</span> <span class="re0">lazy</span>=<span class="st0">&quot;true&quot;</span><span class="re2">&gt;</span></span>
&nbsp; &nbsp; &nbsp; <span class="sc3"><span class="re1">&lt;key</span> <span class="re0">column</span>=<span class="st0">&quot;RecipeID&quot;</span><span class="re2">/&gt;</span></span>
&nbsp; &nbsp; &nbsp; <span class="sc3"><span class="re1">&lt;one-to-many</span> <span class="re0">class</span>=<span class="st0">&quot;Ingredient&quot;</span><span class="re2">/&gt;</span></span>
&nbsp; &nbsp; <span class="sc3"><span class="re1">&lt;/bag<span class="re2">&gt;</span></span></span>
&nbsp; &nbsp; 
&nbsp; &nbsp; <span class="sc-1">&lt;!-- lazy = true is default, don't necessarily need it--&gt;</span>
&nbsp; &nbsp; <span class="sc3"><span class="re1">&lt;bag</span> <span class="re0">name</span>=<span class="st0">&quot;RecipeImpressions&quot;</span> <span class="re0">cascade</span>=<span class="st0">&quot;all&quot;</span><span class="re2">&gt;</span></span>
&nbsp; &nbsp; &nbsp; <span class="sc3"><span class="re1">&lt;key</span> <span class="re0">column</span>=<span class="st0">&quot;RecipeID&quot;</span><span class="re2">/&gt;</span></span>
&nbsp; &nbsp; &nbsp; <span class="sc3"><span class="re1">&lt;one-to-many</span> <span class="re0">class</span>=<span class="st0">&quot;Impression&quot;</span><span class="re2">/&gt;</span></span>
&nbsp; &nbsp; <span class="sc3"><span class="re1">&lt;/bag<span class="re2">&gt;</span></span></span>
&nbsp;
&nbsp; &nbsp; <span class="sc3"><span class="re1">&lt;many-to-one</span> <span class="re0">name</span>=<span class="st0">&quot;Brewer&quot;</span> <span class="re0">column</span>=<span class="st0">&quot;Brewer&quot;</span> <span class="re0">class</span>=<span class="st0">&quot;Person&quot;</span><span class="re2">/&gt;</span></span>
&nbsp;
&nbsp; <span class="sc3"><span class="re1">&lt;/class<span class="re2">&gt;</span></span></span>
<span class="sc3"><span class="re1">&lt;/hibernate-mapping<span class="re2">&gt;</span></span></span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">&lt;?xml version="1.0" encoding="utf-8" ?&gt;
&lt;hibernate-mapping xmlns="urn:nhibernate-mapping-2.2"
                   assembly="RecipeTracker"
                   namespace="RecipeTracker.Model"&gt;

  &lt;class name="Recipe" table="Recipes"&gt;
    &lt;id name="Id" column="Id" type="Int32"&gt;
      &lt;generator class="native" /&gt;
    &lt;/id&gt;
    &lt;property name="Name" type="String(35)"/&gt;
    &lt;!-- we can also do without specifycing type and let nhibernate do the work--&gt;
    &lt;property name="AttemptDate"/&gt;
    &lt;property name="Family"/&gt;
    &lt;property name="Style"/&gt;
    &lt;property name="OriginalGravity"/&gt;
    &lt;property name="FinalGravity"/&gt;
    &lt;property name="BoilTime"/&gt;
    &lt;property name="FermentationTime"/&gt;
    &lt;property name="FermentationTemperature"/&gt;
    &lt;property name="SecondaryFermentationTime"/&gt;
    &lt;property name="Yeast"/&gt;
    &lt;property name="BatchSize"/&gt;
    &lt;property name="Note"/&gt;
    &lt;!-- nhibernate will set up a foreign key relationship between tables for us --&gt;
    &lt;bag name="IngredientsUsed" cascade="all" lazy="true"&gt;
      &lt;key column="RecipeID"/&gt;
      &lt;one-to-many class="Ingredient"/&gt;
    &lt;/bag&gt;
    
    &lt;!-- lazy = true is default, don't necessarily need it--&gt;
    &lt;bag name="RecipeImpressions" cascade="all"&gt;
      &lt;key column="RecipeID"/&gt;
      &lt;one-to-many class="Impression"/&gt;
    &lt;/bag&gt;

    &lt;many-to-one name="Brewer" column="Brewer" class="Person"/&gt;

  &lt;/class&gt;
&lt;/hibernate-mapping&gt;</pre></div></div>

<p>The first item of interest here is the &#8220;hibernate-mapping&#8221; tag.  This obviously is responsible for identifying the file as an NHibernate mapping file.  Its&#8217; also handy to be able to define the assembly and namespace in this tag as well.  This is similar to a &#8220;using&#8221; directive in C# code, in that you won&#8217;t need to specify the assembly or namespace for each class you define.</p>
<p>After this, the class definitions are fairly straightforward.  It is important to note that we need to specify the table that each class maps to however.  In this example we are not specifying the data width for any of our columns of type &#8220;string&#8221; after the first one.  This is because we will be relying on NHibernate to create our schema.</p>
<p>Its&#8217; also important to note that we need to define an Id column for each type.  While we won&#8217;t really be using this in our programming, NHibernate needs it to keep track of objects, and manage the relationships.</p>
<p>Finally, we get down to where the mappings are established.  As we saw in the domain diagram in part 1, each recipe is related to three other types in the application.  A recipe can have any number of Ingredients, any number of Impressions, and one brewer (of type Person).  The first two relationships need to be defined as one to many, and the third as a many to one (because one brewer could have any number of recipes).  We used a &#8220;bag&#8221; because this corresponds to an IList.  You can also use &#8220;set&#8221; which corresponds to an IEnumerable. </p>
<p>Now, we have defined our domain, and thus our database schema.  Next part is to set up our first unit test, to ensure that NHibernate can create the schema we&#8217;ve defined.</p>
<p><font color="Red">Need help with C#? Come and ask a question in our <a href="http://forum.lessthandot.com/viewforum.php?f=40">C# Forum</a></font></p>
]]></content:encoded>
			<wfw:commentRss>/index.php/desktopdev/mstech/my-path-to-the-dark-side-part-2-the-doma/feed/</wfw:commentRss>
		<slash:comments>0</slash:comments>
		</item>
		<item>
		<title>My Path to the Dark Side part 1 &#8211; The Beginning</title>
		<link>/index.php/desktopdev/mstech/the-path-to-nhibernate-aamp-tdd-part-1-t/</link>
		<comments>/index.php/desktopdev/mstech/the-path-to-nhibernate-aamp-tdd-part-1-t/#comments</comments>
		<pubDate>Thu, 03 Jul 2008 09:30:14 +0000</pubDate>
		<dc:creator><![CDATA[Alex Ullrich]]></dc:creator>
				<category><![CDATA[C#]]></category>
		<category><![CDATA[Microsoft Technologies]]></category>
		<category><![CDATA[c#]]></category>
		<category><![CDATA[nhibernate]]></category>
		<category><![CDATA[unit testing]]></category>

		<guid isPermaLink="false">/index.php/2008/07/the-path-to-nhibernate-aamp-tdd-part-1-t/</guid>
		<description><![CDATA[For a while now, I&#8217;ve been brewing my own beer. Being a programmer, when I&#8217;m brewing of course I also need a way to store my recipes, and how they turn out. So I have a simple application I wrote that most recently uses SQL Server Compact edition for its database. Recently I was trying [&#8230;]]]></description>
				<content:encoded><![CDATA[<p>For a while now, I&#8217;ve been brewing my own beer.  Being a programmer, when I&#8217;m brewing of course I also need a way to store my recipes, and how they turn out.  So I have a simple application I wrote that most recently uses SQL Server Compact edition for its database.  </p>
<p>Recently I was trying to make some improvements to my domain in this application (namely, separating the &#8220;Impression&#8221; information from the recipe itself so that I could allow my special lady, and anyone else who drinks one of my beers, weigh in with their impressions of it).  But I found myself getting incredibly bogged down in all the ad-hoc SQL that the program must maintain (SQL Server Compact doesn&#8217;t support stored procedures).  Because I am used to using stored procs for everything, I&#8217;m also used to having a very simple and clean DAL.  The necessity to create queries to insert/update each object type that I was trying to persist was a new one to me, and I found it most distasteful (why should I need 45 lines of code to update my recipe?).  It makes for a lot of unnecessary complexity in my application code.</p>
<p>With stored procs, I think this is acceptable.  Just define the proc name, assign your parameters, and run it.  This also gives you the benefit of being able to limit changes to the database only in many situations.  However with SQL Server Compact, it really blows.  I need to make my changes to the database, then I need to go through all my application code and recreate queries there.  Then I have to test it.  Not fun!  I found I was spending much more time modifying and testing the data access code to to deal with the redesigned objects than I was modifying the objects themselves.  For a database that was doing so little actual work, this is unacceptable to me.</p>
<p>Instead of trying to modify this application, I decided I will start from scratch, and use what I have learned from the first time around to create a better and more maintainable application.  With this decision made, the question becomes &#8220;How can I do this?&#8221;.  I&#8217;ve been learning a lot about test-driven development in school, so this will give me a chance to apply that knowledge, using nUnit.  But will applying TDD really help me to clean up this data access crap?  I don&#8217;t think so.  I suppose I could write my own class to generate the updates, etc&#8230;, but I do enough work at work.  So I need a way to do this more easily.</p>
<p>Luckily my esteemed colleague Chrissie1 has been preaching the gospel of nHibernate to me for a long time now.  I&#8217;ve never really bought in because most of my applications at work rely heavily on the database to do actual work.  But for this application, I really only need to use the database to persist my objects.  Maybe a tool like nHibernate could really help me here?</p>
<p>I&#8217;ve started down the road, and I think that it really will.  This series of blogposts will contain my ramblings as I travel down the path of recreating this application.  We&#8217;ll start with development of the domain model.  The program has a very simple domain model (Recipe, Ingredient, Impression, and Person) which will make it a good way to  demonstrate new concepts without getting bogged down in complex application design.  Here is a diagram of the application&#8217;s problem domain:</p>
<div class="image_block"><img src="/wp-content/uploads/blogs/DesktopDev//RecipeTrackerDomain.jpg" alt="" title="" width="709" height="530" /></div>
<p>The goals of this exercise will be:</p>
<ul>
<li>Eliminate or minimize application&#8217;s dependency on the database.</li>
<li>Allow the application to easily work with another database.</li>
<li>Produce more reliable code by using Test Driven Development methodology</li>
<li>Minimize the effort required to alter the way the application manages and persists domain objects</li>
</ul>
<p>Once I&#8217;m done with this, I still have the actual program to write, but there will be some follow up posts discussing how much easier (it had better be) to develop the UI.  Hopefully this series of posts will leave the reader (and me!) with a good understanding of the basics of nHibernate and nUnit.</p>
]]></content:encoded>
			<wfw:commentRss>/index.php/desktopdev/mstech/the-path-to-nhibernate-aamp-tdd-part-1-t/feed/</wfw:commentRss>
		<slash:comments>2</slash:comments>
		</item>
	</channel>
</rss>
