<?xml version="1.0" encoding="UTF-8"?><rss version="2.0"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:atom="http://www.w3.org/2005/Atom"
	xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
	xmlns:slash="http://purl.org/rss/1.0/modules/slash/"
	>

<channel>
	<title>sql server community &#8211; LessthanDot</title>
	<atom:link href="/index.php/tag/sql-server-community/feed/" rel="self" type="application/rss+xml" />
	<link>/</link>
	<description>A Technical Community for IT Professionals</description>
	<lastBuildDate>Sat, 09 Mar 2019 12:50:36 +0000</lastBuildDate>
	<language>en-US</language>
	<sy:updatePeriod>hourly</sy:updatePeriod>
	<sy:updateFrequency>1</sy:updateFrequency>
	<generator>https://wordpress.org/?v=4.6.1</generator>
	<item>
		<title>What am I thankful for?</title>
		<link>/index.php/itprofessionals/professionaldevelopment/sql-thank-you/</link>
		<comments>/index.php/itprofessionals/professionaldevelopment/sql-thank-you/#comments</comments>
		<pubDate>Thu, 25 Nov 2010 00:12:22 +0000</pubDate>
		<dc:creator><![CDATA[Ted Krueger (onpnt)]]></dc:creator>
				<category><![CDATA[Professional Development]]></category>
		<category><![CDATA[sql server community]]></category>

		<guid isPermaLink="false">/index.php/2010/11/sql-thank-you/</guid>
		<description><![CDATA[This will be a short post but nonetheless a very important one to me.  A good friend of mine, Jason Strate (Blog &#124; Twitter), posted a blog, "What are you thankful for?"  In this post he asked all of his readers to also take a few moments and blog about&#8230;]]></description>
				<content:encoded><![CDATA[<p>This will be a short post but nonetheless a very important one to me.  A good friend of mine, Jason Strate (<a href="http://www.stratesql.com/">Blog</a> | <a href="http://twitter.com/stratesql">Twitter</a>), posted a blog, &#8220;<a href="http://www.jasonstrate.com/index.php/2010/11/what-are-you-thankful-for/">What are you thankful for</a>?&#8221;  In this post he asked all of his readers to also take a few moments and blog about the same.  So here we go…</p>
<div class="image_block"><img src="/wp-content/uploads/blogs/ITProfessionals/thankssqlstyle.gif" alt="" title="" width="264" height="199" align="left" /></div>
<p>Most know that I recently changed jobs.  This change was pretty big for me.  The reason this was not a small move is due to leaving a production DBA role and moving into consulting.  The commute is longer as well but as odd as it may seem, I don’t mind the drive.  The drive gives me time to catch podcasts and other audio type training materials. With the change I find myself extremely thankful for the fact that I have a great amount of support from another good friend, Aaron Lowe (<a href="http://www.aaronlowe.net/">Blog</a> | <a href="http://twitter.com/Vendoran">Twitter</a>).  Moving into this role has been nothing but smooth.  Finding things, meeting people (which are next to impossible when consultants are in and out), knowing what and where I need to be and what to focus on are all things that typically is a bumpy ride when you jump in.  That hasn’t been the case this time and between Aaron and my new management, has been extremely pleasant.  An added bonus has been Wendy Pastrick (<a href="http://wendyverse.blogspot.com/">Blog</a> | <a href="http://twitter.com/wendy_dance">Twitter</a>) also working alongside helping me pave the way forward with the new company.  The SQL Saturday in Chicago crew took it to the next level of working together!</p>
<p><strong>Family is everything</strong>.  This is to me is even more important given my own past and family.  I am thankful for the opportunity to give my sons and wife as much and all that I have.  I owe it to them, it is my responsibility and I will do nothing short of my best.  </p>
<p><strong>Friends are family</strong>.  Over the last two years I’ve made friendships that have truly made the years enjoyable, less painful and more motivating.  Remember this time of the year to thank your friends.  I think if you step back and look at what they’ve done for you, you will see just how much you really have to be thankful for.  Even if it is just a phone call once or twice a week, an email or an IM that picks you up here and there.  A large part of who we are is the friends we make.  I have a handful of friends that have made me better all around and I thank them very much for helping me get where I am today and where I will be in the future.</p>
<p><strong>SQL Community is a family</strong>.  The community may be a different type of family but a family, it is.  One that I’m still astonished by how many people involved in it will drop everything to lend a hand to those in need or those just simply looking for a place to vent, praise or congratulate accomplishments.  Over the years, everything that I have accomplished I sincerely thank the community for helping me with.  The community isn’t just a cool social gathering like twitter and a hash tag or a SQL list; the SQL Community is a cloud that follows the ones that embrace it and accept it as a place of vast knowledge, extraordinary offering without expectations of payment and exceptional respect for our specific technology we all hold so close to our hearts.  </p>
<p>That is what I&#8217;m thankful for (abbreviated list).  I hope you find yourself thankful for the same things and many more.  In my eyes, to be thankful for anything means you are using everything around you to better yourself.<br />
Happy Thanksgiving to those that celebrate it!  I hope to see you all out there in the community soon.  </p>
<p>PS: I’m also thankful to have had the chance to meet Rob Farley and find out he really didn’t think my tattoo was a tribute to the commerce server logo.</p>
]]></content:encoded>
			<wfw:commentRss>/index.php/itprofessionals/professionaldevelopment/sql-thank-you/feed/</wfw:commentRss>
		<slash:comments>4</slash:comments>
		</item>
		<item>
		<title>Execution Plans &#8211; Indexing to achieve optimal query plans</title>
		<link>/index.php/datamgmt/dbprogramming/execution-plan-tuning-sql-server/</link>
		<comments>/index.php/datamgmt/dbprogramming/execution-plan-tuning-sql-server/#comments</comments>
		<pubDate>Mon, 25 Oct 2010 16:45:55 +0000</pubDate>
		<dc:creator><![CDATA[Ted Krueger (onpnt)]]></dc:creator>
				<category><![CDATA[Database Administration]]></category>
		<category><![CDATA[Database Programming]]></category>
		<category><![CDATA[Microsoft SQL Server]]></category>
		<category><![CDATA[Microsoft SQL Server Admin]]></category>
		<category><![CDATA[execution plans]]></category>
		<category><![CDATA[pass]]></category>
		<category><![CDATA[sql server 2008]]></category>
		<category><![CDATA[sql server community]]></category>
		<category><![CDATA[tuning]]></category>

		<guid isPermaLink="false">/index.php/2010/10/execution-plan-tuning-sql-server/</guid>
		<description><![CDATA[Execution plan analysis is a critical aspect to keeping SQL Server running optimally.  With any amount of hardware, the risk factor of a poorly written or unsupported statement being executed in a production environment has the ability to bring service availability to a halt.  Testing on a futuristic sizing of tables and indexes is also a part of tuning that should be taken into account.  Data will grow and, with that growth, queries will react differently if not tuned to their full potential.]]></description>
				<content:encoded><![CDATA[<blockquote><p>(Given the size of this article, a download e-paper is also available <a href="/wp-content/uploads/blogs/DataMgmt/Execution_Plan_and_Tuning.pdf" title="">here</a>)</p></blockquote>
<p><strong>The obstacle</strong></p>
<p>SQL Server and data storage itself is only as good as the means in which we can read the data.  Very seldom are databases created only for the purpose of inserting and storing data without the intent of ever reading that data.  While the type of structure or design of the data storage will vary depending on the type and majority of transactions that will occur on the database, the fact remains that the mechanisms in place must return the data quickly and without directly affecting other transactions from committing their own primary objectives.  With SQL Server, execution plans are a foundation and starting point of the tuning process after the infrastructure phases of building a database server have been optimized.</p>
<p>By utilizing execution plans in SQL Server, developers and administrators have the ability to prevent non-optimal statements from entering our production systems.  Implementing the steps of code reviews and initial tuning processes promotes this and removes the major risk that comes with not performing them.</p>
<p><strong>Plan Cache</strong></p>
<p>In order to tune a query, there is value in understanding how a query is processed and then stored for later reuse.  This section will briefly discuss the flow that a statement will take when it is passed to SQL Server.  For our reference, a statement will be directly related to any DML statement.  There are three major steps or processes that a statement goes through.  The first of these steps is called the parser.  The parser name says exactly what this process accomplishes.  The parser takes the statement and parses out all the steps that the statement has within it and creates these steps in what is called the parse tree.   This is also the process that will dictate if the statement is well formed or not and rejected or allowed to proceed.</p>
<div class="image_block"><img src="/wp-content/uploads/blogs/DataMgmt/exec_plan_1.gif" alt="" title="" width="619" height="92" /></div>
<p>Following the parser, the next step is to hand the parse tree off to the Algebrizer.  Within the Algebrizer, all name resolving is performed.  For example, if a table name is not fully qualified, the Algebrizer will handle determining the exact location.  The Algebrizer also determines data types such as, VARCHAR(10) and NUMERIC(2,2).  With the Algebrizer completing successfully, a query processor tree is created.  The query processor tree is the final product that is required in order for the finishing task to finally create the execution plan &#8211; The Optimizer.</p>
<p>The optimizer has several tasks to accomplish in order to come to a valid execution plan.  During these tasks, the optimizer will determine the resources and objects available to use in order to create the most efficient execution possible.  Part of this is determined on statistics that are created in your database.  After everything has been calculated and the optimizer has found the most efficient execution plan possible, it is then compared to others in the plan cache. Plan cache is an allocated section in memory where SQL Server stores all of the execution plans that have been created.  These plans are not estimated but the actual execution plans that have been created from running statements in SQL Server.  If the optimizer finds a plan that matches the estimated plan it has created, it will use the plan that is already in plan cache.  This provides a few things for SQL Server in respect to speed.  It will prevent multiple plans from being cached that are identical and using memory that can be utilized for other plans.</p>
<p>When using execution plans to tune any query, it is a best practice to ensure the cache is clear of plans that may interfere with the true performance of the query as it is developed.  This allows the processing of a statement from start to completion and the overall performance of the statement to be measured.</p>
<p>To clear the cache, use DBCC FREEPROCCACHE</p>
<p><a href="http://msdn.microsoft.com/en-us/library/ms174283.aspx">FREEPROCCACHE</a> accepts either sql_handle or plan_handle as a parameter.  This allows for the clearing of only one cached plan over clearing the entire cache (calling FREEPROCCACHE with no parameter specified).  Clearing the entire plan cache will cause performance degradation due to the need for all statements being processed to be cached again.  This process involves more resources such as CPU and disk IO.  Best practice tells us that development should always occur on designated development and test database servers but this will still cause other development projects to be adversely affected in a negative way.</p>
<blockquote><p><span class="MT_red">Note: Never develop, test or alter a statement in production or clear the cache as it will affect performance in a negative way.</span></p></blockquote>
<p>Executing FREEPROCCACHE</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
</pre></td><td class="de1"><pre class="de1"><span class="kw1">DBCC</span> FREEPROCCACHE
GO</pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">DBCC FREEPROCCACHE
GO</pre></div></div>

<p>We can test removing a single plan by running the following query on the AdventureWorks database</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
</pre></td><td class="de1"><pre class="de1"><span class="kw1">SELECT</span> &nbsp;SalesOrderNumber
<span class="kw1">FROM</span> &nbsp; &nbsp;AdventureWorks.<span class="me1">Sales</span>.<span class="me1">SalesOrderHeader</span> header
&nbsp; &nbsp; &nbsp; &nbsp; <span class="sy0">JOIN</span> AdventureWorks.<span class="me1">Sales</span>.<span class="me1">SalesOrderDetail</span> details <span class="kw1">ON</span> header.<span class="me1">salesorderid</span> <span class="sy0">=</span> details.<span class="me1">salesorderid</span>
<span class="kw1">WHERE</span> &nbsp; customerid <span class="sy0">=</span> <span class="nu0">11091</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">SELECT  SalesOrderNumber
FROM    AdventureWorks.Sales.SalesOrderHeader header
        JOIN AdventureWorks.Sales.SalesOrderDetail details ON header.salesorderid = details.salesorderid
WHERE   customerid = 11091</pre></div></div>

<p>Once this Adhoc query has been cached we can search for it with a simplified join of the DMVs (sys) dm_exec_query_stats, dm_exec_cached_plans and DMFs dm_exec_sql_text and dm_exec_query_plan.  </p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
</pre></td><td class="de1"><pre class="de1"><span class="kw1">SELECT</span> &nbsp;<span class="br0">&#91;</span><span class="kw1">text</span><span class="br0">&#93;</span> ,
&nbsp; &nbsp; &nbsp; &nbsp; cp.<span class="me1">plan_handle</span> ,
&nbsp; &nbsp; &nbsp; &nbsp; sql_handle
<span class="kw1">FROM</span> &nbsp; &nbsp;sys.<span class="me1">dm_exec_query_stats</span> qs
&nbsp; &nbsp; &nbsp; &nbsp; <span class="sy0">JOIN</span> sys.<span class="me1">dm_exec_cached_plans</span> cp <span class="kw1">ON</span> qs.<span class="me1">plan_handle</span> <span class="sy0">=</span> cp.<span class="me1">plan_handle</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="sy0">CROSS</span> APPLY sys.<span class="me1">dm_exec_sql_text</span><span class="br0">&#40;</span>qs.<span class="me1">plan_handle</span><span class="br0">&#41;</span> <span class="kw1">AS</span> query
&nbsp; &nbsp; &nbsp; &nbsp; <span class="sy0">OUTER</span> APPLY sys.<span class="me1">dm_exec_query_plan</span><span class="br0">&#40;</span>qs.<span class="me1">plan_handle</span><span class="br0">&#41;</span> <span class="kw1">AS</span> executionplan
<span class="kw1">WHERE</span> &nbsp; objtype <span class="sy0">=</span> <span class="st0">'Adhoc'</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">SELECT  [text] ,
        cp.plan_handle ,
        sql_handle
FROM    sys.dm_exec_query_stats qs
        JOIN sys.dm_exec_cached_plans cp ON qs.plan_handle = cp.plan_handle
        CROSS APPLY sys.dm_exec_sql_text(qs.plan_handle) AS query
        OUTER APPLY sys.dm_exec_query_plan(qs.plan_handle) AS executionplan
WHERE   objtype = 'Adhoc'</pre></div></div>

</p>
<div class="image_block"><img src="/wp-content/uploads/blogs/DataMgmt/exec_plan_2.gif" alt="" title="" width="868" height="19" /></div>
<p>Once the plan has been identified and the decision has been made to remove it, FREEPROCCACHE can be executed with either the sql_handle or plan_handle.  </p>
<p>Execute DBCC FREEPROCCACHE with the sql_handle as a parameter from our previous output</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
</pre></td><td class="de1"><pre class="de1"><span class="kw1">DBCC</span> FREEPROCCACHE <span class="br0">&#40;</span>0x06000C00FCCD0D0FB8C0500B000000000000000000000000<span class="br0">&#41;</span>
GO</pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">DBCC FREEPROCCACHE (0x06000C00FCCD0D0FB8C0500B000000000000000000000000)
GO</pre></div></div>

<div class="image_block"><img src="/wp-content/uploads/blogs/DataMgmt/exec_plan_3.gif" alt="" title="" width="747" height="110" /></div>
</p>
<p>If we then search for the plan by the sql_handle, we’ll see it has been removed</p>
<div class="image_block"><img src="/wp-content/uploads/blogs/DataMgmt/exec_plan_4.gif" alt="" title="" width="721" height="265" /></div>
</p>
<p><strong>Tuning Execution Plans</strong></p>
<p>To show some more common operations and tuning methods utilizing execution plans, we will create a database to work in.  The database name will be PLANLAB and we will import data from AdventureWorks tables &#8211; Sales.SalesOrderHeader and Sales.SalesOrderDetails.</p>
<p>To prepare the database, tables and import the data from an already existing AdventureWorks database local to the instance, run the following statements in the order they appear.  Modify the file paths to match your own development file system structure.</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72
73
74
75
76
77
78
79
80
81
82
83
84
85
86
87
88
89
90
91
92
93
94
95
96
97
98
99
100
101
102
103
104
105
106
107
108
109
110
111
112
113
114
115
116
117
118
119
120
121
122
123
124
125
126
127
128
129
130
131
132
133
134
135
136
137
138
139
140
141
142
143
144
145
146
147
148
</pre></td><td class="de1"><pre class="de1"><span class="kw1">USE</span> Master
GO
&nbsp;
<span class="kw1">CREATE</span> <span class="kw1">DATABASE</span> <span class="br0">&#91;</span>PLANLAB<span class="br0">&#93;</span> <span class="kw1">ON</span> &nbsp;<span class="kw1">PRIMARY</span> 
<span class="br0">&#40;</span> NAME <span class="sy0">=</span> N<span class="st0">'PLANLAB_DATA_1'</span>, FILENAME <span class="sy0">=</span> N<span class="st0">'C:Program FilesMicrosoft SQL ServerMSSQL10.MSSQLSERVERMSSQLDATAPLANLAB_DATA_1.mdf'</span> , 
<span class="kw1">SIZE</span> <span class="sy0">=</span> 100MB , MAXSIZE <span class="sy0">=</span> UNLIMITED, FILEGROWTH <span class="sy0">=</span> 10MB <span class="br0">&#41;</span>
&nbsp;<span class="kw2">LOG</span> <span class="kw1">ON</span> 
<span class="br0">&#40;</span> NAME <span class="sy0">=</span> N<span class="st0">'PLANLAB_TRAN_1_log'</span>, FILENAME <span class="sy0">=</span> N<span class="st0">'C:Program FilesMicrosoft SQL ServerMSSQL10.MSSQLSERVERMSSQLDATAPLANLAB_TRAN_1_log.ldf'</span> , 
<span class="kw1">SIZE</span> <span class="sy0">=</span> 100MB , MAXSIZE <span class="sy0">=</span> 2GB , FILEGROWTH <span class="sy0">=</span> <span class="nu0">3</span><span class="sy0">%</span><span class="br0">&#41;</span>
GO
<span class="kw1">ALTER</span> <span class="kw1">DATABASE</span> <span class="br0">&#91;</span>PLANLAB<span class="br0">&#93;</span> <span class="kw1">SET</span> RECOVERY SIMPLE 
GO
<span class="kw1">USE</span> <span class="br0">&#91;</span>PLANLAB<span class="br0">&#93;</span>
GO
<span class="kw1">CREATE</span> <span class="kw1">SCHEMA</span> <span class="br0">&#91;</span>WISSUG<span class="br0">&#93;</span> <span class="kw1">AUTHORIZATION</span> <span class="br0">&#91;</span>dbo<span class="br0">&#93;</span>
GO
&nbsp;
&nbsp;
<span class="kw1">CREATE</span> <span class="kw1">TABLE</span> WISSUG.<span class="br0">&#91;</span>SalesOrderHeader<span class="br0">&#93;</span><span class="br0">&#40;</span>
&nbsp; &nbsp; <span class="br0">&#91;</span>SalesOrderID<span class="br0">&#93;</span> <span class="br0">&#91;</span><span class="kw1">int</span><span class="br0">&#93;</span> <span class="kw1">IDENTITY</span><span class="br0">&#40;</span><span class="nu0">1</span>,<span class="nu0">1</span><span class="br0">&#41;</span> <span class="sy0">NOT</span> <span class="kw1">FOR</span> <span class="kw1">REPLICATION</span> <span class="sy0">NOT</span> <span class="sy0">NULL</span>,
&nbsp; &nbsp; <span class="br0">&#91;</span>RevisionNumber<span class="br0">&#93;</span> <span class="br0">&#91;</span><span class="kw1">tinyint</span><span class="br0">&#93;</span> <span class="sy0">NOT</span> <span class="sy0">NULL</span>,
&nbsp; &nbsp; <span class="br0">&#91;</span>OrderDate<span class="br0">&#93;</span> <span class="br0">&#91;</span><span class="kw1">datetime</span><span class="br0">&#93;</span> <span class="sy0">NOT</span> <span class="sy0">NULL</span>,
&nbsp; &nbsp; <span class="br0">&#91;</span>DueDate<span class="br0">&#93;</span> <span class="br0">&#91;</span><span class="kw1">datetime</span><span class="br0">&#93;</span> <span class="sy0">NOT</span> <span class="sy0">NULL</span>,
&nbsp; &nbsp; <span class="br0">&#91;</span>ShipDate<span class="br0">&#93;</span> <span class="br0">&#91;</span><span class="kw1">datetime</span><span class="br0">&#93;</span> <span class="sy0">NULL</span>,
&nbsp; &nbsp; <span class="br0">&#91;</span>Status<span class="br0">&#93;</span> <span class="br0">&#91;</span><span class="kw1">tinyint</span><span class="br0">&#93;</span> <span class="sy0">NOT</span> <span class="sy0">NULL</span>,
&nbsp; &nbsp; <span class="br0">&#91;</span>OnlineOrderFlag<span class="br0">&#93;</span> <span class="kw1">smallint</span> <span class="sy0">NOT</span> <span class="sy0">NULL</span>,
&nbsp; &nbsp; <span class="br0">&#91;</span>SalesOrderNumber<span class="br0">&#93;</span> &nbsp;<span class="kw1">AS</span> <span class="br0">&#40;</span>isnull<span class="br0">&#40;</span>N<span class="st0">'SO'</span><span class="sy0">+</span><span class="kw1">CONVERT</span><span class="br0">&#40;</span><span class="br0">&#91;</span><span class="kw1">nvarchar</span><span class="br0">&#93;</span><span class="br0">&#40;</span><span class="nu0">23</span><span class="br0">&#41;</span>,<span class="br0">&#91;</span>SalesOrderID<span class="br0">&#93;</span>,<span class="nu0">0</span><span class="br0">&#41;</span>,N<span class="st0">'*** ERROR ***'</span><span class="br0">&#41;</span><span class="br0">&#41;</span>,
&nbsp; &nbsp; <span class="br0">&#91;</span>PurchaseOrderNumber<span class="br0">&#93;</span> <span class="kw1">varchar</span><span class="br0">&#40;</span><span class="nu0">30</span><span class="br0">&#41;</span> <span class="sy0">NULL</span>,
&nbsp; &nbsp; <span class="br0">&#91;</span>AccountNumber<span class="br0">&#93;</span> <span class="kw1">varchar</span><span class="br0">&#40;</span><span class="nu0">30</span><span class="br0">&#41;</span> <span class="sy0">NULL</span>,
&nbsp; &nbsp; <span class="br0">&#91;</span>CustomerID<span class="br0">&#93;</span> <span class="br0">&#91;</span><span class="kw1">int</span><span class="br0">&#93;</span> <span class="sy0">NOT</span> <span class="sy0">NULL</span>,
&nbsp; &nbsp; <span class="br0">&#91;</span>ContactID<span class="br0">&#93;</span> <span class="br0">&#91;</span><span class="kw1">int</span><span class="br0">&#93;</span> <span class="sy0">NOT</span> <span class="sy0">NULL</span>,
&nbsp; &nbsp; <span class="br0">&#91;</span>SalesPersonID<span class="br0">&#93;</span> <span class="br0">&#91;</span><span class="kw1">int</span><span class="br0">&#93;</span> <span class="sy0">NULL</span>,
&nbsp; &nbsp; <span class="br0">&#91;</span>TerritoryID<span class="br0">&#93;</span> <span class="br0">&#91;</span><span class="kw1">int</span><span class="br0">&#93;</span> <span class="sy0">NULL</span>,
&nbsp; &nbsp; <span class="br0">&#91;</span>BillToAddressID<span class="br0">&#93;</span> <span class="br0">&#91;</span><span class="kw1">int</span><span class="br0">&#93;</span> <span class="sy0">NOT</span> <span class="sy0">NULL</span>,
&nbsp; &nbsp; <span class="br0">&#91;</span>ShipToAddressID<span class="br0">&#93;</span> <span class="br0">&#91;</span><span class="kw1">int</span><span class="br0">&#93;</span> <span class="sy0">NOT</span> <span class="sy0">NULL</span>,
&nbsp; &nbsp; <span class="br0">&#91;</span>ShipMethodID<span class="br0">&#93;</span> <span class="br0">&#91;</span><span class="kw1">int</span><span class="br0">&#93;</span> <span class="sy0">NOT</span> <span class="sy0">NULL</span>,
&nbsp; &nbsp; <span class="br0">&#91;</span>CreditCardID<span class="br0">&#93;</span> <span class="br0">&#91;</span><span class="kw1">int</span><span class="br0">&#93;</span> <span class="sy0">NULL</span>,
&nbsp; &nbsp; <span class="br0">&#91;</span>CreditCardApprovalCode<span class="br0">&#93;</span> <span class="br0">&#91;</span><span class="kw1">varchar</span><span class="br0">&#93;</span><span class="br0">&#40;</span><span class="nu0">15</span><span class="br0">&#41;</span> <span class="sy0">NULL</span>,
&nbsp; &nbsp; <span class="br0">&#91;</span>CurrencyRateID<span class="br0">&#93;</span> <span class="br0">&#91;</span><span class="kw1">int</span><span class="br0">&#93;</span> <span class="sy0">NULL</span>,
&nbsp; &nbsp; <span class="br0">&#91;</span>SubTotal<span class="br0">&#93;</span> <span class="br0">&#91;</span><span class="kw1">money</span><span class="br0">&#93;</span> <span class="sy0">NOT</span> <span class="sy0">NULL</span>,
&nbsp; &nbsp; <span class="br0">&#91;</span>TaxAmt<span class="br0">&#93;</span> <span class="br0">&#91;</span><span class="kw1">money</span><span class="br0">&#93;</span> <span class="sy0">NOT</span> <span class="sy0">NULL</span>,
&nbsp; &nbsp; <span class="br0">&#91;</span>Freight<span class="br0">&#93;</span> <span class="br0">&#91;</span><span class="kw1">money</span><span class="br0">&#93;</span> <span class="sy0">NOT</span> <span class="sy0">NULL</span>,
&nbsp; &nbsp; <span class="br0">&#91;</span>TotalDue<span class="br0">&#93;</span> &nbsp;<span class="kw1">AS</span> <span class="br0">&#40;</span>isnull<span class="br0">&#40;</span><span class="br0">&#40;</span><span class="br0">&#91;</span>SubTotal<span class="br0">&#93;</span><span class="sy0">+</span><span class="br0">&#91;</span>TaxAmt<span class="br0">&#93;</span><span class="br0">&#41;</span><span class="sy0">+</span><span class="br0">&#91;</span>Freight<span class="br0">&#93;</span>,<span class="br0">&#40;</span><span class="nu0">0</span><span class="br0">&#41;</span><span class="br0">&#41;</span><span class="br0">&#41;</span>,
&nbsp; &nbsp; <span class="br0">&#91;</span>Comment<span class="br0">&#93;</span> <span class="br0">&#91;</span><span class="kw1">nvarchar</span><span class="br0">&#93;</span><span class="br0">&#40;</span><span class="nu0">128</span><span class="br0">&#41;</span> <span class="sy0">NULL</span>,
&nbsp; &nbsp; <span class="br0">&#91;</span>rowguid<span class="br0">&#93;</span> <span class="br0">&#91;</span><span class="kw1">uniqueidentifier</span><span class="br0">&#93;</span> <span class="kw1">ROWGUIDCOL</span> &nbsp;<span class="sy0">NOT</span> <span class="sy0">NULL</span>,
&nbsp; &nbsp; <span class="br0">&#91;</span>ModifiedDate<span class="br0">&#93;</span> <span class="br0">&#91;</span><span class="kw1">datetime</span><span class="br0">&#93;</span> <span class="sy0">NOT</span> <span class="sy0">NULL</span><span class="br0">&#41;</span>
GO
&nbsp;
&nbsp;
<span class="kw1">CREATE</span> <span class="kw1">TABLE</span> WISSUG.<span class="br0">&#91;</span>SalesOrderDetail<span class="br0">&#93;</span><span class="br0">&#40;</span>
&nbsp; &nbsp; <span class="br0">&#91;</span>SalesOrderID<span class="br0">&#93;</span> <span class="br0">&#91;</span><span class="kw1">int</span><span class="br0">&#93;</span> <span class="sy0">NOT</span> <span class="sy0">NULL</span>,
&nbsp; &nbsp; <span class="br0">&#91;</span>SalesOrderDetailID<span class="br0">&#93;</span> <span class="br0">&#91;</span><span class="kw1">int</span><span class="br0">&#93;</span> <span class="kw1">IDENTITY</span><span class="br0">&#40;</span><span class="nu0">1</span>,<span class="nu0">1</span><span class="br0">&#41;</span> <span class="sy0">NOT</span> <span class="sy0">NULL</span>,
&nbsp; &nbsp; <span class="br0">&#91;</span>CarrierTrackingNumber<span class="br0">&#93;</span> <span class="br0">&#91;</span><span class="kw1">nvarchar</span><span class="br0">&#93;</span><span class="br0">&#40;</span><span class="nu0">25</span><span class="br0">&#41;</span> <span class="sy0">NULL</span>,
&nbsp; &nbsp; <span class="br0">&#91;</span>OrderQty<span class="br0">&#93;</span> <span class="br0">&#91;</span><span class="kw1">smallint</span><span class="br0">&#93;</span> <span class="sy0">NOT</span> <span class="sy0">NULL</span>,
&nbsp; &nbsp; <span class="br0">&#91;</span>ProductID<span class="br0">&#93;</span> <span class="br0">&#91;</span><span class="kw1">int</span><span class="br0">&#93;</span> <span class="sy0">NOT</span> <span class="sy0">NULL</span>,
&nbsp; &nbsp; <span class="br0">&#91;</span>SpecialOfferID<span class="br0">&#93;</span> <span class="br0">&#91;</span><span class="kw1">int</span><span class="br0">&#93;</span> <span class="sy0">NOT</span> <span class="sy0">NULL</span>,
&nbsp; &nbsp; <span class="br0">&#91;</span>UnitPrice<span class="br0">&#93;</span> <span class="br0">&#91;</span><span class="kw1">money</span><span class="br0">&#93;</span> <span class="sy0">NOT</span> <span class="sy0">NULL</span>,
&nbsp; &nbsp; <span class="br0">&#91;</span>UnitPriceDiscount<span class="br0">&#93;</span> <span class="br0">&#91;</span><span class="kw1">money</span><span class="br0">&#93;</span> <span class="sy0">NOT</span> <span class="sy0">NULL</span>,
&nbsp; &nbsp; <span class="br0">&#91;</span>LineTotal<span class="br0">&#93;</span> &nbsp;<span class="kw1">AS</span> <span class="br0">&#40;</span>isnull<span class="br0">&#40;</span><span class="br0">&#40;</span><span class="br0">&#91;</span>UnitPrice<span class="br0">&#93;</span><span class="sy0">*</span><span class="br0">&#40;</span><span class="br0">&#40;</span><span class="nu0">1.0</span><span class="br0">&#41;</span><span class="sy0">-</span><span class="br0">&#91;</span>UnitPriceDiscount<span class="br0">&#93;</span><span class="br0">&#41;</span><span class="br0">&#41;</span><span class="sy0">*</span><span class="br0">&#91;</span>OrderQty<span class="br0">&#93;</span>,<span class="br0">&#40;</span><span class="nu0">0.0</span><span class="br0">&#41;</span><span class="br0">&#41;</span><span class="br0">&#41;</span>,
&nbsp; &nbsp; <span class="br0">&#91;</span>rowguid<span class="br0">&#93;</span> <span class="br0">&#91;</span><span class="kw1">uniqueidentifier</span><span class="br0">&#93;</span> <span class="kw1">ROWGUIDCOL</span> &nbsp;<span class="sy0">NOT</span> <span class="sy0">NULL</span>,
&nbsp; &nbsp; <span class="br0">&#91;</span>ModifiedDate<span class="br0">&#93;</span> <span class="br0">&#91;</span><span class="kw1">datetime</span><span class="br0">&#93;</span> <span class="sy0">NOT</span> <span class="sy0">NULL</span><span class="br0">&#41;</span>
&nbsp;
GO
&nbsp;
<span class="kw1">USE</span> PLANLAB
GO
&nbsp;
<span class="kw1">SET</span> <span class="kw1">IDENTITY_INSERT</span> WISSUG.<span class="me1">SalesOrderHeader</span> <span class="kw1">ON</span> 
<span class="kw1">INSERT</span> <span class="kw1">INTO</span> WISSUG.<span class="me1">SalesOrderHeader</span> 
<span class="br0">&#40;</span><span class="br0">&#91;</span>SalesOrderID<span class="br0">&#93;</span>
&nbsp; &nbsp; &nbsp; ,<span class="br0">&#91;</span>RevisionNumber<span class="br0">&#93;</span>
&nbsp; &nbsp; &nbsp; ,<span class="br0">&#91;</span>OrderDate<span class="br0">&#93;</span>
&nbsp; &nbsp; &nbsp; ,<span class="br0">&#91;</span>DueDate<span class="br0">&#93;</span>
&nbsp; &nbsp; &nbsp; ,<span class="br0">&#91;</span>ShipDate<span class="br0">&#93;</span>
&nbsp; &nbsp; &nbsp; ,<span class="br0">&#91;</span>Status<span class="br0">&#93;</span>
&nbsp; &nbsp; &nbsp; ,<span class="br0">&#91;</span>OnlineOrderFlag<span class="br0">&#93;</span>
&nbsp; &nbsp; &nbsp; ,<span class="br0">&#91;</span>PurchaseOrderNumber<span class="br0">&#93;</span>
&nbsp; &nbsp; &nbsp; ,<span class="br0">&#91;</span>AccountNumber<span class="br0">&#93;</span>
&nbsp; &nbsp; &nbsp; ,<span class="br0">&#91;</span>CustomerID<span class="br0">&#93;</span>
&nbsp; &nbsp; &nbsp; ,<span class="br0">&#91;</span>ContactID<span class="br0">&#93;</span>
&nbsp; &nbsp; &nbsp; ,<span class="br0">&#91;</span>SalesPersonID<span class="br0">&#93;</span>
&nbsp; &nbsp; &nbsp; ,<span class="br0">&#91;</span>TerritoryID<span class="br0">&#93;</span>
&nbsp; &nbsp; &nbsp; ,<span class="br0">&#91;</span>BillToAddressID<span class="br0">&#93;</span>
&nbsp; &nbsp; &nbsp; ,<span class="br0">&#91;</span>ShipToAddressID<span class="br0">&#93;</span>
&nbsp; &nbsp; &nbsp; ,<span class="br0">&#91;</span>ShipMethodID<span class="br0">&#93;</span>
&nbsp; &nbsp; &nbsp; ,<span class="br0">&#91;</span>CreditCardID<span class="br0">&#93;</span>
&nbsp; &nbsp; &nbsp; ,<span class="br0">&#91;</span>CreditCardApprovalCode<span class="br0">&#93;</span>
&nbsp; &nbsp; &nbsp; ,<span class="br0">&#91;</span>CurrencyRateID<span class="br0">&#93;</span>
&nbsp; &nbsp; &nbsp; ,<span class="br0">&#91;</span>SubTotal<span class="br0">&#93;</span>
&nbsp; &nbsp; &nbsp; ,<span class="br0">&#91;</span>TaxAmt<span class="br0">&#93;</span>
&nbsp; &nbsp; &nbsp; ,<span class="br0">&#91;</span>Freight<span class="br0">&#93;</span>
&nbsp; &nbsp; &nbsp; ,<span class="br0">&#91;</span>Comment<span class="br0">&#93;</span>
&nbsp; &nbsp; &nbsp; ,<span class="br0">&#91;</span>rowguid<span class="br0">&#93;</span>
&nbsp; &nbsp; &nbsp; ,<span class="br0">&#91;</span>ModifiedDate<span class="br0">&#93;</span><span class="br0">&#41;</span>
<span class="kw1">SELECT</span> 
&nbsp; &nbsp; &nbsp; &nbsp;<span class="br0">&#91;</span>SalesOrderID<span class="br0">&#93;</span>
&nbsp; &nbsp; &nbsp; ,<span class="br0">&#91;</span>RevisionNumber<span class="br0">&#93;</span>
&nbsp; &nbsp; &nbsp; ,<span class="br0">&#91;</span>OrderDate<span class="br0">&#93;</span>
&nbsp; &nbsp; &nbsp; ,<span class="br0">&#91;</span>DueDate<span class="br0">&#93;</span>
&nbsp; &nbsp; &nbsp; ,<span class="br0">&#91;</span>ShipDate<span class="br0">&#93;</span>
&nbsp; &nbsp; &nbsp; ,<span class="br0">&#91;</span>Status<span class="br0">&#93;</span>
&nbsp; &nbsp; &nbsp; ,<span class="br0">&#91;</span>OnlineOrderFlag<span class="br0">&#93;</span>
&nbsp; &nbsp; &nbsp; ,<span class="br0">&#91;</span>PurchaseOrderNumber<span class="br0">&#93;</span>
&nbsp; &nbsp; &nbsp; ,<span class="br0">&#91;</span>AccountNumber<span class="br0">&#93;</span>
&nbsp; &nbsp; &nbsp; ,<span class="br0">&#91;</span>CustomerID<span class="br0">&#93;</span>
&nbsp; &nbsp; &nbsp; ,<span class="br0">&#91;</span>ContactID<span class="br0">&#93;</span>
&nbsp; &nbsp; &nbsp; ,<span class="br0">&#91;</span>SalesPersonID<span class="br0">&#93;</span>
&nbsp; &nbsp; &nbsp; ,<span class="br0">&#91;</span>TerritoryID<span class="br0">&#93;</span>
&nbsp; &nbsp; &nbsp; ,<span class="br0">&#91;</span>BillToAddressID<span class="br0">&#93;</span>
&nbsp; &nbsp; &nbsp; ,<span class="br0">&#91;</span>ShipToAddressID<span class="br0">&#93;</span>
&nbsp; &nbsp; &nbsp; ,<span class="br0">&#91;</span>ShipMethodID<span class="br0">&#93;</span>
&nbsp; &nbsp; &nbsp; ,<span class="br0">&#91;</span>CreditCardID<span class="br0">&#93;</span>
&nbsp; &nbsp; &nbsp; ,<span class="br0">&#91;</span>CreditCardApprovalCode<span class="br0">&#93;</span>
&nbsp; &nbsp; &nbsp; ,<span class="br0">&#91;</span>CurrencyRateID<span class="br0">&#93;</span>
&nbsp; &nbsp; &nbsp; ,<span class="br0">&#91;</span>SubTotal<span class="br0">&#93;</span>
&nbsp; &nbsp; &nbsp; ,<span class="br0">&#91;</span>TaxAmt<span class="br0">&#93;</span>
&nbsp; &nbsp; &nbsp; ,<span class="br0">&#91;</span>Freight<span class="br0">&#93;</span>
&nbsp; &nbsp; &nbsp; ,<span class="br0">&#91;</span>Comment<span class="br0">&#93;</span>
&nbsp; &nbsp; &nbsp; ,<span class="br0">&#91;</span>rowguid<span class="br0">&#93;</span>
&nbsp; &nbsp; &nbsp; ,<span class="br0">&#91;</span>ModifiedDate<span class="br0">&#93;</span>
<span class="kw1">FROM</span> AdventureWorks.<span class="me1">Sales</span>.<span class="me1">SalesOrderHeader</span>
<span class="kw1">SET</span> <span class="kw1">IDENTITY_INSERT</span> WISSUG.<span class="me1">SalesOrderHeader</span> <span class="kw1">OFF</span> 
&nbsp;
<span class="kw1">SET</span> <span class="kw1">IDENTITY_INSERT</span> WISSUG.<span class="me1">SalesOrderDetail</span> <span class="kw1">ON</span> 
<span class="kw1">INSERT</span> <span class="kw1">INTO</span> WISSUG.<span class="me1">SalesOrderDetail</span>
<span class="br0">&#40;</span><span class="br0">&#91;</span>SalesOrderID<span class="br0">&#93;</span>
&nbsp; &nbsp; &nbsp; ,<span class="br0">&#91;</span>SalesOrderDetailID<span class="br0">&#93;</span>
&nbsp; &nbsp; &nbsp; ,<span class="br0">&#91;</span>CarrierTrackingNumber<span class="br0">&#93;</span>
&nbsp; &nbsp; &nbsp; ,<span class="br0">&#91;</span>OrderQty<span class="br0">&#93;</span>
&nbsp; &nbsp; &nbsp; ,<span class="br0">&#91;</span>ProductID<span class="br0">&#93;</span>
&nbsp; &nbsp; &nbsp; ,<span class="br0">&#91;</span>SpecialOfferID<span class="br0">&#93;</span>
&nbsp; &nbsp; &nbsp; ,<span class="br0">&#91;</span>UnitPrice<span class="br0">&#93;</span>
&nbsp; &nbsp; &nbsp; ,<span class="br0">&#91;</span>UnitPriceDiscount<span class="br0">&#93;</span>
&nbsp; &nbsp; &nbsp; ,<span class="br0">&#91;</span>rowguid<span class="br0">&#93;</span>
&nbsp; &nbsp; &nbsp; ,<span class="br0">&#91;</span>ModifiedDate<span class="br0">&#93;</span><span class="br0">&#41;</span>
<span class="kw1">SELECT</span> 
<span class="br0">&#91;</span>SalesOrderID<span class="br0">&#93;</span>
&nbsp; &nbsp; &nbsp; ,<span class="br0">&#91;</span>SalesOrderDetailID<span class="br0">&#93;</span>
&nbsp; &nbsp; &nbsp; ,<span class="br0">&#91;</span>CarrierTrackingNumber<span class="br0">&#93;</span>
&nbsp; &nbsp; &nbsp; ,<span class="br0">&#91;</span>OrderQty<span class="br0">&#93;</span>
&nbsp; &nbsp; &nbsp; ,<span class="br0">&#91;</span>ProductID<span class="br0">&#93;</span>
&nbsp; &nbsp; &nbsp; ,<span class="br0">&#91;</span>SpecialOfferID<span class="br0">&#93;</span>
&nbsp; &nbsp; &nbsp; ,<span class="br0">&#91;</span>UnitPrice<span class="br0">&#93;</span>
&nbsp; &nbsp; &nbsp; ,<span class="br0">&#91;</span>UnitPriceDiscount<span class="br0">&#93;</span>
&nbsp; &nbsp; &nbsp; ,<span class="br0">&#91;</span>rowguid<span class="br0">&#93;</span>
&nbsp; &nbsp; &nbsp; ,<span class="br0">&#91;</span>ModifiedDate<span class="br0">&#93;</span>
<span class="kw1">FROM</span> AdventureWorks.<span class="me1">Sales</span>.<span class="me1">SalesOrderDetail</span>
<span class="kw1">SET</span> <span class="kw1">IDENTITY_INSERT</span> WISSUG.<span class="me1">SalesOrderDetail</span> <span class="kw1">OFF</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">USE Master
GO

CREATE DATABASE [PLANLAB] ON  PRIMARY 
( NAME = N'PLANLAB_DATA_1', FILENAME = N'C:Program FilesMicrosoft SQL ServerMSSQL10.MSSQLSERVERMSSQLDATAPLANLAB_DATA_1.mdf' , 
SIZE = 100MB , MAXSIZE = UNLIMITED, FILEGROWTH = 10MB )
 LOG ON 
( NAME = N'PLANLAB_TRAN_1_log', FILENAME = N'C:Program FilesMicrosoft SQL ServerMSSQL10.MSSQLSERVERMSSQLDATAPLANLAB_TRAN_1_log.ldf' , 
SIZE = 100MB , MAXSIZE = 2GB , FILEGROWTH = 3%)
GO
ALTER DATABASE [PLANLAB] SET RECOVERY SIMPLE 
GO
USE [PLANLAB]
GO
CREATE SCHEMA [WISSUG] AUTHORIZATION [dbo]
GO


CREATE TABLE WISSUG.[SalesOrderHeader](
	[SalesOrderID] [int] IDENTITY(1,1) NOT FOR REPLICATION NOT NULL,
	[RevisionNumber] [tinyint] NOT NULL,
	[OrderDate] [datetime] NOT NULL,
	[DueDate] [datetime] NOT NULL,
	[ShipDate] [datetime] NULL,
	[Status] [tinyint] NOT NULL,
	[OnlineOrderFlag] smallint NOT NULL,
	[SalesOrderNumber]  AS (isnull(N'SO'+CONVERT([nvarchar](23),[SalesOrderID],0),N'*** ERROR ***')),
	[PurchaseOrderNumber] varchar(30) NULL,
	[AccountNumber] varchar(30) NULL,
	[CustomerID] [int] NOT NULL,
	[ContactID] [int] NOT NULL,
	[SalesPersonID] [int] NULL,
	[TerritoryID] [int] NULL,
	[BillToAddressID] [int] NOT NULL,
	[ShipToAddressID] [int] NOT NULL,
	[ShipMethodID] [int] NOT NULL,
	[CreditCardID] [int] NULL,
	[CreditCardApprovalCode] [varchar](15) NULL,
	[CurrencyRateID] [int] NULL,
	[SubTotal] [money] NOT NULL,
	[TaxAmt] [money] NOT NULL,
	[Freight] [money] NOT NULL,
	[TotalDue]  AS (isnull(([SubTotal]+[TaxAmt])+[Freight],(0))),
	[Comment] [nvarchar](128) NULL,
	[rowguid] [uniqueidentifier] ROWGUIDCOL  NOT NULL,
	[ModifiedDate] [datetime] NOT NULL)
GO


CREATE TABLE WISSUG.[SalesOrderDetail](
	[SalesOrderID] [int] NOT NULL,
	[SalesOrderDetailID] [int] IDENTITY(1,1) NOT NULL,
	[CarrierTrackingNumber] [nvarchar](25) NULL,
	[OrderQty] [smallint] NOT NULL,
	[ProductID] [int] NOT NULL,
	[SpecialOfferID] [int] NOT NULL,
	[UnitPrice] [money] NOT NULL,
	[UnitPriceDiscount] [money] NOT NULL,
	[LineTotal]  AS (isnull(([UnitPrice]*((1.0)-[UnitPriceDiscount]))*[OrderQty],(0.0))),
	[rowguid] [uniqueidentifier] ROWGUIDCOL  NOT NULL,
	[ModifiedDate] [datetime] NOT NULL)

GO

USE PLANLAB
GO

SET IDENTITY_INSERT WISSUG.SalesOrderHeader ON 
INSERT INTO WISSUG.SalesOrderHeader 
([SalesOrderID]
      ,[RevisionNumber]
      ,[OrderDate]
      ,[DueDate]
      ,[ShipDate]
      ,[Status]
      ,[OnlineOrderFlag]
      ,[PurchaseOrderNumber]
      ,[AccountNumber]
      ,[CustomerID]
      ,[ContactID]
      ,[SalesPersonID]
      ,[TerritoryID]
      ,[BillToAddressID]
      ,[ShipToAddressID]
      ,[ShipMethodID]
      ,[CreditCardID]
      ,[CreditCardApprovalCode]
      ,[CurrencyRateID]
      ,[SubTotal]
      ,[TaxAmt]
      ,[Freight]
      ,[Comment]
      ,[rowguid]
      ,[ModifiedDate])
SELECT 
	   [SalesOrderID]
      ,[RevisionNumber]
      ,[OrderDate]
      ,[DueDate]
      ,[ShipDate]
      ,[Status]
      ,[OnlineOrderFlag]
      ,[PurchaseOrderNumber]
      ,[AccountNumber]
      ,[CustomerID]
      ,[ContactID]
      ,[SalesPersonID]
      ,[TerritoryID]
      ,[BillToAddressID]
      ,[ShipToAddressID]
      ,[ShipMethodID]
      ,[CreditCardID]
      ,[CreditCardApprovalCode]
      ,[CurrencyRateID]
      ,[SubTotal]
      ,[TaxAmt]
      ,[Freight]
      ,[Comment]
      ,[rowguid]
      ,[ModifiedDate]
FROM AdventureWorks.Sales.SalesOrderHeader
SET IDENTITY_INSERT WISSUG.SalesOrderHeader OFF 

SET IDENTITY_INSERT WISSUG.SalesOrderDetail ON 
INSERT INTO WISSUG.SalesOrderDetail
([SalesOrderID]
      ,[SalesOrderDetailID]
      ,[CarrierTrackingNumber]
      ,[OrderQty]
      ,[ProductID]
      ,[SpecialOfferID]
      ,[UnitPrice]
      ,[UnitPriceDiscount]
      ,[rowguid]
      ,[ModifiedDate])
SELECT 
[SalesOrderID]
      ,[SalesOrderDetailID]
      ,[CarrierTrackingNumber]
      ,[OrderQty]
      ,[ProductID]
      ,[SpecialOfferID]
      ,[UnitPrice]
      ,[UnitPriceDiscount]
      ,[rowguid]
      ,[ModifiedDate]
FROM AdventureWorks.Sales.SalesOrderDetail
SET IDENTITY_INSERT WISSUG.SalesOrderDetail OFF</pre></div></div>

<p><strong>Starting with a query to tune</strong></p>
<p>The below query requests five columns from the tables we created.  Within the query, the SUM() function is used on the column, LineTotal.  Note that neither of these tables have any indexes as of yet.  There are also no statistics created due to nothing being captured in the selection from any statements being processed.</p>
<p>We can see statistics by viewing them in SSMS by expanding the database/tables/table in question and then statistics node.  The system view, sys.stats, can also be queried to view statistics information on the tables.  The following query shows an example filtered on the tables we created</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
</pre></td><td class="de1"><pre class="de1"><span class="kw1">SELECT</span> &nbsp;<span class="sy0">*</span>
<span class="kw1">FROM</span> &nbsp; &nbsp;sys.<span class="me1">STATS</span>
<span class="kw1">WHERE</span> &nbsp; <span class="kw2">OBJECT_ID</span> <span class="sy0">=</span> <span class="kw2">OBJECT_ID</span><span class="br0">&#40;</span>N<span class="st0">'WISSUG.SalesOrderDetail'</span><span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="sy0">OR</span> <span class="kw2">OBJECT_ID</span> <span class="sy0">=</span> <span class="kw2">OBJECT_ID</span><span class="br0">&#40;</span>N<span class="st0">'WISSUG.SalesOrderHeader'</span><span class="br0">&#41;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">SELECT  *
FROM    sys.STATS
WHERE   OBJECT_ID = OBJECT_ID(N'WISSUG.SalesOrderDetail')
        OR OBJECT_ID = OBJECT_ID(N'WISSUG.SalesOrderHeader')</pre></div></div>

<p>At this time we do not need to run the query because our interest is in the estimated execution plan only.</p>
<blockquote><p><span class="MT_red">Note: Statistics are created when processing statements on indexes and column.  This is also true for viewing estimated execution plans.</span></p></blockquote>
<p>To view the estimated execution plan, click the button located in the menu strip in SSMS.</p>
<div class="image_block"><img src="/wp-content/uploads/blogs/DataMgmt/exec_plan_5.gif" alt="" title="" width="311" height="108" /></div>
<p>Place the query below into a new query window while under the context of the PLANLAB database and execute the estimated execution plan.</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
</pre></td><td class="de1"><pre class="de1"><span class="kw1">SELECT</span> &nbsp;SalesOrderNumber ,
&nbsp; &nbsp; &nbsp; &nbsp; OrderDate ,
&nbsp; &nbsp; &nbsp; &nbsp; ShipDate ,
&nbsp; &nbsp; &nbsp; &nbsp; AccountNumber ,
&nbsp; &nbsp; &nbsp; &nbsp; UnitPriceDiscount ,
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw2">SUM</span><span class="br0">&#40;</span>LineTotal<span class="br0">&#41;</span> Total
<span class="kw1">FROM</span> &nbsp; &nbsp;WISSUG.<span class="me1">SalesOrderHeader</span> header
&nbsp; &nbsp; &nbsp; &nbsp; <span class="sy0">JOIN</span> WISSUG.<span class="me1">SalesOrderDetail</span> details <span class="kw1">ON</span> header.<span class="me1">salesorderid</span> <span class="sy0">=</span> details.<span class="me1">salesorderid</span>
<span class="kw1">WHERE</span> &nbsp; customerid <span class="sy0">=</span> <span class="nu0">11091</span>
<span class="kw1">GROUP</span> <span class="kw1">BY</span> SalesOrderNumber ,
&nbsp; &nbsp; &nbsp; &nbsp; OrderDate ,
&nbsp; &nbsp; &nbsp; &nbsp; ShipDate ,
&nbsp; &nbsp; &nbsp; &nbsp; UnitPriceDiscount ,
&nbsp; &nbsp; &nbsp; &nbsp; AccountNumber </pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">SELECT  SalesOrderNumber ,
        OrderDate ,
        ShipDate ,
        AccountNumber ,
        UnitPriceDiscount ,
        SUM(LineTotal) Total
FROM    WISSUG.SalesOrderHeader header
        JOIN WISSUG.SalesOrderDetail details ON header.salesorderid = details.salesorderid
WHERE   customerid = 11091
GROUP BY SalesOrderNumber ,
        OrderDate ,
        ShipDate ,
        UnitPriceDiscount ,
        AccountNumber </pre></div></div>

<p>The plan below that was generated from the query shows two very distinct and problematic operations.  These operations are the table scans both on SalesOrderHeader and SalesOrderDetail.  Essentially, when a table scan is performed, all the records of a table are scanned for matches.  These operations tell us that our query will cause significant disk IO due to no supporting indexes to help easily find the location of the records we want returned or aggregated.</p>
<div class="image_block"><img src="/wp-content/uploads/blogs/DataMgmt/exec_plan_6.gif" alt="" title="" width="710" height="127" /></div>
<p>The process to start tuning a query like this can begin in many places.  The columns being requested, the filter values (WHERE clause) sorting operations such as ORDER BY or GROUP BY and JOIN values.</p>
<blockquote><p><span class="MT_red">Note: Each step in tuning any operation may or may not have direct effects on the total plan itself.  When tuning, start with one operation while keeping the entire plan under consideration for these effects.  In many cases, one index created with the proper columns allows for the entire plan to be optimized.  This will be shown at the end of this article.</span></p></blockquote>
<p>In the JOIN condition, SalesOrderID is being used in order to bring SalesOrderDetail into our results in order to fulfill the needs of the query.  This will require us to make sure that the join between SalesOrderHeader and SalesOrderDetail does not have an exstensive table scans to fulfill the JOIN. SalesOrderID is a unique value in our table so we have the ability to create a CLUSTERED INDEX on it.  A clustered index differs from other indexes by actually ordering the data physically.  This is also why only one clustered index is allowed per table.</p>
<p>To create a clustered index on SalesOrderID in the SalesOrderHeader table, run the following CREATE INDEX statement.</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
</pre></td><td class="de1"><pre class="de1"><span class="kw1">CREATE</span> <span class="kw1">CLUSTERED</span> <span class="kw1">INDEX</span> IDX_UNIQUEKEY <span class="kw1">ON</span> WISSUG.<span class="me1">SalesOrderHeader</span><span class="br0">&#40;</span>SalesOrderID<span class="br0">&#41;</span>
GO</pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">CREATE CLUSTERED INDEX IDX_UNIQUEKEY ON WISSUG.SalesOrderHeader(SalesOrderID)
GO</pre></div></div>

</p>
<div class="image_block"><img src="/wp-content/uploads/blogs/DataMgmt/exec_plan_7.gif" alt="" title="" width="738" height="148" /></div>
<p>Once the clustered index is created successfully, execute the estimated execution plan again.  The table scan has been replaced by an index scan now for SalesOrderHeader.  An index scan is more optimal than a table scan. Index scans will only scan the entire contents of an index to determine the records to return. However, this operation is still not the most optimal operation to have in the plan.  An Index Seek operation would be optimal in both lower resource utilization and more selective abilities.</p>
<p>Looking further at the query and SalesOrderHeader, we can see we are requesting SalesOrderNumber, OrderDate and AccountNumber. These columns must be returned from the SalesOrderHeader table as well as SalesOrderID.  We can now bring in a nonclustered index to fulfill these new requirements in order to further tune the plan.</p>
<p>To create the nonclustered index on SalesOrderHeader, execute the following statement.</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
</pre></td><td class="de1"><pre class="de1"><span class="kw1">CREATE</span> <span class="kw1">NONCLUSTERED</span> <span class="kw1">INDEX</span> IDX_SalesNumOrderDate_Ship_ASC <span class="kw1">ON</span> WISSUG.<span class="me1">SalesOrderHeader</span><span class="br0">&#40;</span>SalesOrderNumber,OrderDate,AccountNumber<span class="br0">&#41;</span>
GO</pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">CREATE NONCLUSTERED INDEX IDX_SalesNumOrderDate_Ship_ASC ON WISSUG.SalesOrderHeader(SalesOrderNumber,OrderDate,AccountNumber)
GO</pre></div></div>

<div class="image_block"><img src="/wp-content/uploads/blogs/DataMgmt/exec_plan_8.gif" alt="" title="" width="724" height="158" /></div>
<p>As shown in the new estimated plan, the index scan on the clustered index remains even after covering the other columns we require from the table.  Covering index refers to an index that contains all of the required columns to fully cover all the paths a query is taking to utilize them.  This includes the columns that are being returned, the WHERE clause and JOIN conditions. </p>
<p>A set of properties exists with with all operations.  These properties can be seen by hovering over the operation or right clicking the operation and selecting properties.  </p>
<p>Hovering over the index scan with the mouse pointer shows that we are covering everything but CustomerID which is in our where clause and ShipDate.   ShipDate was left out previously when we thought we had covered the returned columns.</p>
<div class="image_block"><img src="/wp-content/uploads/blogs/DataMgmt/exec_plan_9.gif" alt="" title="" width="300" height="345" /></div>
<p>To tune further, we now need to change our indexing so that the two columns shown in the details are included in the index.  Using the CREATE INDEX statement, use the WITH(DROP_EXISTING=ON) to make this task easier.  The DROP_EXISTING still performs the same operations of dropping the index in place already and recreating it, but does it in one statement versus multiple statements.  In the new index, we introduce another option called INCLUDE.  INCLUDE adds columns to the leaf level of the index and does not require any sorting which makes them more efficient when we are only interested in covering the column in the index.  This benefits us by reducing overhead on the index itself.</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
</pre></td><td class="de1"><pre class="de1"><span class="kw1">CREATE</span> <span class="kw1">NONCLUSTERED</span> <span class="kw1">INDEX</span> IDX_SalesNumOrderDate_Ship_ASC <span class="kw1">ON</span> WISSUG.<span class="me1">SalesOrderHeader</span><span class="br0">&#40;</span>SalesOrderNumber,OrderDate,AccountNumber<span class="br0">&#41;</span>
<span class="sy0">IN</span>CLUDE <span class="br0">&#40;</span>customerid,shipdate<span class="br0">&#41;</span>
<span class="kw1">WITH</span> <span class="br0">&#40;</span>DROP_EXIST<span class="sy0">IN</span>G<span class="sy0">=</span><span class="kw1">ON</span><span class="br0">&#41;</span>
GO</pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">CREATE NONCLUSTERED INDEX IDX_SalesNumOrderDate_Ship_ASC ON WISSUG.SalesOrderHeader(SalesOrderNumber,OrderDate,AccountNumber)
INCLUDE (customerid,shipdate)
WITH (DROP_EXISTING=ON)
GO</pre></div></div>

<div class="image_block"><img src="/wp-content/uploads/blogs/DataMgmt/exec_plan_10.gif" alt="" title="" width="731" height="185" /></div>
<p>The plan that is created from the index change shows that an index scan persists on the SalesOrderHeader table.  This is the case even after covering all of the columns.  There is one more tuning task that is needed; structuring the index.  Recall that INCLUDE does not sort.  In terms of our query, this means CustomerID is forcing a scan due to the use in the WHERE clause.</p>
<div class="image_block"><img src="/wp-content/uploads/blogs/DataMgmt/exec_plan_11.gif" alt="" title="" width="279" height="402" /></div>
<p>To restructure the index to handle this specific query, there is a need to move the predicate of CustomerID to the column list.   The above image shows the predicate value listed in the tooltip properties.  This will force the covering index concept to the include as the ordering is not a requirement for returning those columns.</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
</pre></td><td class="de1"><pre class="de1"><span class="kw1">CREATE</span> <span class="kw1">NONCLUSTERED</span> <span class="kw1">INDEX</span> IDX_SalesNumOrderDate_Ship_ASC <span class="kw1">ON</span> WISSUG.<span class="me1">SalesOrderHeader</span><span class="br0">&#40;</span>CustomerID<span class="br0">&#41;</span>
<span class="sy0">IN</span>CLUDE <span class="br0">&#40;</span>SalesOrderNumber,OrderDate,AccountNumber,shipdate<span class="br0">&#41;</span>
<span class="kw1">WITH</span> <span class="br0">&#40;</span>DROP_EXIST<span class="sy0">IN</span>G<span class="sy0">=</span><span class="kw1">ON</span><span class="br0">&#41;</span>
GO</pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">CREATE NONCLUSTERED INDEX IDX_SalesNumOrderDate_Ship_ASC ON WISSUG.SalesOrderHeader(CustomerID)
INCLUDE (SalesOrderNumber,OrderDate,AccountNumber,shipdate)
WITH (DROP_EXISTING=ON)
GO</pre></div></div>

<div class="image_block"><img src="/wp-content/uploads/blogs/DataMgmt/exec_plan_12.gif" alt="" title="" width="695" height="180" /></div>
<p>The Index Seek is now present and performed on the SalesOrderHeader table.  This is the optimal operation to have here and the index structure accomplishes this.</p>
<p>So far, we’ve learned about the need for covering indexes and also how the structure of the index is important to accomplishing the needed index seeks.  With this information we can move to the second table scan in our plan.  </p>
<p>Hover over the table scan on SalesOrderDetail.</p>
<div class="image_block"><img src="/wp-content/uploads/blogs/DataMgmt/exec_plan_13.gif" alt="" title="" width="261" height="332" /></div>
<p>From the details of the table scan, the output of this operation results in the columns SalesOrderID, OrderQty, UnitPrice and UnitPriceDiscount.  Looking at the statement, the results required back are UnitPriceDiscount and LineTotal.  This tells us that we can use the INCLUDE to capture these columns.  In the JOIN condition, SalesOrderID is the next important column.  This column requires the index to be sorted so the JOIN can be accomplished without a scan.</p>
<p>With this information we can write the following nonclustered index to cover the SalesOrderDetail table.</p>
<div class="image_block"><img src="/wp-content/uploads/blogs/DataMgmt/exec_plan_14.gif" alt="" title="" width="719" height="176" /></div>
<p><strong>Key Lookup</strong></p>
<p>A Key Lookup operation is performed when a supporting index operation is utilized.  However, to fulfill the requirements of the statement, a bookmark lookup must be performed in order to return the remaining output required.  This operation can cause a statement’s performance to be very poor given the added need to retrieve what is needed to satisfy the requirements.</p>
<p>To show a Key Lookup, alter the index previously created to restructure the columns in order SalesOrderNumber, OrderDate and AccountNumber.  Place the CustomerID column in the index by means of INCLUDE.</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
</pre></td><td class="de1"><pre class="de1"><span class="kw1">CREATE</span> <span class="kw1">NONCLUSTERED</span> <span class="kw1">INDEX</span> IDX_SalesNumOrderDate_Ship_ASC <span class="kw1">ON</span> WISSUG.<span class="me1">SalesOrderHeader</span><span class="br0">&#40;</span>SalesOrderNumber,OrderDate,AccountNumber<span class="br0">&#41;</span>
<span class="sy0">IN</span>CLUDE <span class="br0">&#40;</span>customerid<span class="br0">&#41;</span>
<span class="kw1">WITH</span> <span class="br0">&#40;</span>DROP_EXIST<span class="sy0">IN</span>G<span class="sy0">=</span><span class="kw1">ON</span><span class="br0">&#41;</span>
GO</pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">CREATE NONCLUSTERED INDEX IDX_SalesNumOrderDate_Ship_ASC ON WISSUG.SalesOrderHeader(SalesOrderNumber,OrderDate,AccountNumber)
INCLUDE (customerid)
WITH (DROP_EXISTING=ON)
GO</pre></div></div>

<div class="image_block"><img src="/wp-content/uploads/blogs/DataMgmt/exec_plan_15.gif" alt="" title="" width="701" height="251" /></div>
<p>Running the execution plan will show the new index is being used and the Key Lookup operation has been introduced.  The lookup in this case is going to return ShipDate.  ShipDate is missing from the index so there is missing support to cover this column.  Removing the Key Lookup requires the structure of the index we created earlier in order to seek on the index.</p>
<p><strong>RID Lookup</strong></p>
<p>Recall earlier that SalesOrderDetail did not have a clustered index created on it.  A table that does not have a clustered index is referred to as a HEAP.  HEAP tables play an important role in the performance of any query that is using them.  Without the physical ordering of the table from the creation of a clustered index, the table is not read optimally.  In some cases HEAP tables are beneficial and nonclustered indexes can be created on them in order to optimize statements that are running against them.  </p>
<p>One of the side effects of a HEAP table is an operation called a RID Lookup.  Like a Key Lookup, an index scan or seek is not able to completely satisfy the request so it must do a lookup in order to retrieve the remaining records.  In most cases, creating clustered indexes is the best solution to resolve RID Lookup operations.  This allows for better plan generation and also helps with maintenance of the table itself in regards to fragmentation.  Below we will show how to resolve a RID Lookup by changing our query to additionally check SalesOrderDetail.UnitPriceDiscount where the data is greater than 0.00.  This will also be added to the output CarrierTrackingNumber</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
</pre></td><td class="de1"><pre class="de1"><span class="kw1">SELECT</span> &nbsp;SalesOrderNumber ,
&nbsp; &nbsp; &nbsp; &nbsp; OrderDate ,
&nbsp; &nbsp; &nbsp; &nbsp; ShipDate ,
&nbsp; &nbsp; &nbsp; &nbsp; AccountNumber ,
&nbsp; &nbsp; &nbsp; &nbsp; UnitPriceDiscount ,
&nbsp; &nbsp; &nbsp; &nbsp; CarrierTrackingNumber ,
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw2">SUM</span><span class="br0">&#40;</span>LineTotal<span class="br0">&#41;</span> Total
<span class="kw1">FROM</span> &nbsp; &nbsp;WISSUG.<span class="me1">SalesOrderHeader</span> header
&nbsp; &nbsp; &nbsp; &nbsp; <span class="sy0">JOIN</span> WISSUG.<span class="me1">SalesOrderDetail</span> details <span class="kw1">ON</span> header.<span class="me1">salesorderid</span> <span class="sy0">=</span> details.<span class="me1">salesorderid</span>
<span class="kw1">WHERE</span> &nbsp; customerid <span class="sy0">=</span> <span class="nu0">11091</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="sy0">AND</span> UnitPriceDiscount <span class="sy0">&gt;</span> <span class="nu0">0.00</span>
<span class="kw1">GROUP</span> <span class="kw1">BY</span> SalesOrderNumber ,
&nbsp; &nbsp; &nbsp; &nbsp; OrderDate ,
&nbsp; &nbsp; &nbsp; &nbsp; ShipDate ,
&nbsp; &nbsp; &nbsp; &nbsp; UnitPriceDiscount ,
&nbsp; &nbsp; &nbsp; &nbsp; AccountNumber ,
&nbsp; &nbsp; &nbsp; &nbsp; CarrierTrackingNumber</pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">SELECT  SalesOrderNumber ,
        OrderDate ,
        ShipDate ,
        AccountNumber ,
        UnitPriceDiscount ,
        CarrierTrackingNumber ,
        SUM(LineTotal) Total
FROM    WISSUG.SalesOrderHeader header
        JOIN WISSUG.SalesOrderDetail details ON header.salesorderid = details.salesorderid
WHERE   customerid = 11091
        AND UnitPriceDiscount &gt; 0.00
GROUP BY SalesOrderNumber ,
        OrderDate ,
        ShipDate ,
        UnitPriceDiscount ,
        AccountNumber ,
        CarrierTrackingNumber</pre></div></div>

<p>Take a look at the execution plan generated from this query given the indexes we currently have in place.</p>
<div class="image_block"><img src="/wp-content/uploads/blogs/DataMgmt/exec_plan_16.gif" alt="" title="" width="726" height="256" /></div>
<p>If we look at the properties of the RID Lookup, we can see what the RID Lookup output list generates the following:</p>
<p>[PLANLAB].[WISSUG].[SalesOrderDetail].CarrierTrackingNumber.  </p>
<p>Also, looking at the nested loop operation, the output list results in the following:</p>
<p>[PLANLAB].[WISSUG].[SalesOrderDetail].CarrierTrackingNumber<br />
[PLANLAB].[WISSUG].[SalesOrderDetail].UnitPriceDiscount<br />
[PLANLAB].[WISSUG].[SalesOrderDetail].LineTotal</p>
<p>Moving to the index seek on SalesOrderDetail, the output list results in</p>
<p>Bmk1003,<br />
[PLANLAB].[WISSUG].[SalesOrderDetail].UnitPriceDiscount<br />
[PLANLAB].[WISSUG].[SalesOrderDetail].LineTotal</p>
<p>Between these three operations we can see that the nested loop is joining the seek output to the lookup output to obtain CarrierTrackingNumber.  This tells us that there is a covering index problem.  To fix the RID Lookup, we could alter the index IDX_SalesID_LineTotal_ASC or add a new index to support the query.  Adding new indexes may not be optimal either if the index still fulfills the needs of the other statements that it was created for.  In this case, altering the index to add CarrierTrackingNumber in the INCLUDE section makes more sense given the covering of all the statements we have tested so far.</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
</pre></td><td class="de1"><pre class="de1"><span class="kw1">CREATE</span> <span class="kw1">NONCLUSTERED</span> <span class="kw1">INDEX</span> IDX_SalesID_LineTotal_ASC <span class="kw1">ON</span> WISSUG.<span class="me1">SalesOrderDetail</span><span class="br0">&#40;</span>salesorderid<span class="br0">&#41;</span>
<span class="sy0">IN</span>CLUDE <span class="br0">&#40;</span>LineTotal,UnitPriceDiscount,CarrierTrackingNumber<span class="br0">&#41;</span>
<span class="kw1">WITH</span> <span class="br0">&#40;</span>DROP_EXIST<span class="sy0">IN</span>G<span class="sy0">=</span><span class="kw1">ON</span><span class="br0">&#41;</span>
GO</pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">CREATE NONCLUSTERED INDEX IDX_SalesID_LineTotal_ASC ON WISSUG.SalesOrderDetail(salesorderid)
INCLUDE (LineTotal,UnitPriceDiscount,CarrierTrackingNumber)
WITH (DROP_EXISTING=ON)
GO</pre></div></div>

<p>
<div class="image_block"><img src="/wp-content/uploads/blogs/DataMgmt/exec_plan_17.gif" alt="" title="" width="682" height="179" /></div>
<p>Reviewing the execution plan, the RID Lookup has been resolved.</p>
<p><strong>Sorting</strong></p>
<p>Sorting, in general, is an expensive operation as it relates to resources.  Order By and Group By forces a sort of the data.  Sorting can be ok in execution plans but can also cause a severe performance problem.  Since sorting is done in memory, the operation can be fast.  However, if memory is not available, the sorting operation can go to the tempdb to accomplish the task which would affect the performance greatly – in a negative way.</p>
<p>In some cases, sorting may not be needed at all in statements.  Even in cases when data is required to be sorted, letting front end applications and reporting do this operation may be a better option.  With the queries that were used in this article, we can&#8217;t fix the sort operation because of the SUM() on LineTotal is required forcing us to use a GROUP BY.  </p>
<p>Running the example below will show how we could return the results without the SUM(LineTotal) while utilizing something like SSRS functions and expressions to add the SUM(LineTotal) on a grouped result set directly to the dataset at the time the report is rendered.</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
</pre></td><td class="de1"><pre class="de1"><span class="kw1">SELECT</span> &nbsp;SalesOrderNumber ,
&nbsp; &nbsp; &nbsp; &nbsp; OrderDate ,
&nbsp; &nbsp; &nbsp; &nbsp; ShipDate ,
&nbsp; &nbsp; &nbsp; &nbsp; AccountNumber
<span class="kw1">FROM</span> &nbsp; &nbsp;WISSUG.<span class="me1">SalesOrderHeader</span> header
&nbsp; &nbsp; &nbsp; &nbsp; <span class="sy0">JOIN</span> WISSUG.<span class="me1">SalesOrderDetail</span> details <span class="kw1">ON</span> header.<span class="me1">salesorderid</span> <span class="sy0">=</span> details.<span class="me1">salesorderid</span>
<span class="kw1">WHERE</span> &nbsp; customerid <span class="sy0">=</span> <span class="nu0">11091</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="sy0">AND</span> UnitPriceDiscount <span class="sy0">&gt;</span> <span class="nu0">1.00</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">SELECT  SalesOrderNumber ,
        OrderDate ,
        ShipDate ,
        AccountNumber
FROM    WISSUG.SalesOrderHeader header
        JOIN WISSUG.SalesOrderDetail details ON header.salesorderid = details.salesorderid
WHERE   customerid = 11091
        AND UnitPriceDiscount &gt; 1.00</pre></div></div>

<div class="image_block"><img src="/wp-content/uploads/blogs/DataMgmt/exec_plan_18.gif" alt="" title="" width="705" height="172" /></div>
<p><strong>Wrapping up</strong></p>
<p>In the tuning exercises so far, we’ve created 3 indexes to tune the query.  However, we could accomplish this with two indexes.  The clustered index could be removed and create another HEAP table situation.  This situation is also common when the primary key (or clustered index) is another column on the table that isn&#8217;t part of the query and thus does not assist in improving performance of the statement.  </p>
<p>To show this, drop the clustered index SalesOrderHeader.IDX_UNIQUEKEY</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
</pre></td><td class="de1"><pre class="de1"><span class="kw1">DROP</span> <span class="kw1">INDEX</span> WISSUG.<span class="me1">SalesOrderHeader</span>.<span class="me1">IDX_UNIQUEKEY</span>
GO</pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">DROP INDEX WISSUG.SalesOrderHeader.IDX_UNIQUEKEY
GO</pre></div></div>

<p>To fix this without a clsutered index on SalesOrderID, change the final nonclustered index to add SalesOrderID</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
</pre></td><td class="de1"><pre class="de1"><span class="kw1">CREATE</span> <span class="kw1">NONCLUSTERED</span> <span class="kw1">INDEX</span> IDX_SalesNumOrderDate_Ship_ASC <span class="kw1">ON</span> WISSUG.<span class="me1">SalesOrderHeader</span><span class="br0">&#40;</span>CustomerID,SalesOrderID<span class="br0">&#41;</span>
<span class="sy0">IN</span>CLUDE <span class="br0">&#40;</span>SalesOrderNumber,OrderDate,AccountNumber,shipdate<span class="br0">&#41;</span>
<span class="kw1">WITH</span> <span class="br0">&#40;</span>DROP_EXIST<span class="sy0">IN</span>G<span class="sy0">=</span><span class="kw1">ON</span><span class="br0">&#41;</span>
GO</pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">CREATE NONCLUSTERED INDEX IDX_SalesNumOrderDate_Ship_ASC ON WISSUG.SalesOrderHeader(CustomerID,SalesOrderID)
INCLUDE (SalesOrderNumber,OrderDate,AccountNumber,shipdate)
WITH (DROP_EXISTING=ON)
GO</pre></div></div>

<p>Running the plan again will output the same plan as we accomplished earlier with three separate indexes.</p>
<p>Looking closer at the JOIN conditions, index scans may be seeks.  If our bottom join is returning a very limited number of rows, the optimizer will not need to scan on the top join in order to join the operations.  This would be relevant when a clustered index is joined from the top.  </p>
<p>Example:  Prepare this condition by dropping the nonclustered index on SalesOrderHeader we created earlier. </p>
<p>In our previous examples, this would force a scan on SalesOrderHeader if UnitPriceDiscount = 0.00 was filtered.  This is due to our estimated rows being 21 causing the results to be very small in size.  If we change to UnitPriceDiscount > 1.00 and rerun the estimated plan, the resulting scan turns into a seek and estimated number of rows of 1.</p>
<blockquote><p><span class="MT_red">Note: This is for example purposes only and to show the resulting joins make a difference in the operations that are shown by the optmizer.  You should always tune by the concept that data grows in size and prepare for that in your indexing and development of T-SQL.</span></p></blockquote>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
</pre></td><td class="de1"><pre class="de1"><span class="kw1">DROP</span> <span class="kw1">INDEX</span> WISSUG.<span class="me1">SalesOrderHeader</span>.<span class="me1">IDX_SalesNumOrderDate_Ship_ASC</span>
GO</pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">DROP INDEX WISSUG.SalesOrderHeader.IDX_SalesNumOrderDate_Ship_ASC
GO</pre></div></div>

<p>And now rerun the execution plan with the change to UnitPriceDiscount</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
</pre></td><td class="de1"><pre class="de1"><span class="kw1">SELECT</span> &nbsp;SalesOrderNumber ,
&nbsp; &nbsp; &nbsp; &nbsp; OrderDate ,
&nbsp; &nbsp; &nbsp; &nbsp; ShipDate ,
&nbsp; &nbsp; &nbsp; &nbsp; AccountNumber ,
&nbsp; &nbsp; &nbsp; &nbsp; UnitPriceDiscount ,
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw2">SUM</span><span class="br0">&#40;</span>LineTotal<span class="br0">&#41;</span> Total
<span class="kw1">FROM</span> &nbsp; &nbsp;WISSUG.<span class="me1">SalesOrderHeader</span> header
&nbsp; &nbsp; &nbsp; &nbsp; <span class="sy0">JOIN</span> WISSUG.<span class="me1">SalesOrderDetail</span> details <span class="kw1">ON</span> header.<span class="me1">salesorderid</span> <span class="sy0">=</span> details.<span class="me1">salesorderid</span>
<span class="kw1">WHERE</span> &nbsp; customerid <span class="sy0">=</span> <span class="nu0">11091</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="sy0">AND</span> UnitPriceDiscount <span class="sy0">&gt;</span> <span class="nu0">1.00</span>
<span class="kw1">GROUP</span> <span class="kw1">BY</span> SalesOrderNumber ,
&nbsp; &nbsp; &nbsp; &nbsp; OrderDate ,
&nbsp; &nbsp; &nbsp; &nbsp; ShipDate ,
&nbsp; &nbsp; &nbsp; &nbsp; UnitPriceDiscount ,
&nbsp; &nbsp; &nbsp; &nbsp; AccountNumber</pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">SELECT  SalesOrderNumber ,
        OrderDate ,
        ShipDate ,
        AccountNumber ,
        UnitPriceDiscount ,
        SUM(LineTotal) Total
FROM    WISSUG.SalesOrderHeader header
        JOIN WISSUG.SalesOrderDetail details ON header.salesorderid = details.salesorderid
WHERE   customerid = 11091
        AND UnitPriceDiscount &gt; 1.00
GROUP BY SalesOrderNumber ,
        OrderDate ,
        ShipDate ,
        UnitPriceDiscount ,
        AccountNumber</pre></div></div>

<div class="image_block"><img src="/wp-content/uploads/blogs/DataMgmt/exec_plan_19.gif" alt="" title="" width="705" height="171" /></div>
<p><strong>Take away</strong></p>
<p>Execution plan analysis is a critical aspect to keeping SQL Server running optimally.  With any amount of hardware, the risk factor of a poorly written or unsupported statement being executed in a production environment has the ability to bring service availability to a halt.  Testing on a futuristic sizing of tables and indexes is also a part of tuning that should be taken into account.  Data will grow and, with that growth, queries will react differently if not tuned to their full potential.</p>
<p>Special thanks to Janice Lee, George Mastros, Howard Churchill, Denis Gobo and Jes Borland for the reviews of this paper.  The SQL Community is simply amazing!</p>
]]></content:encoded>
			<wfw:commentRss>/index.php/datamgmt/dbprogramming/execution-plan-tuning-sql-server/feed/</wfw:commentRss>
		<slash:comments>4</slash:comments>
		</item>
		<item>
		<title>PASS Summit is upon us</title>
		<link>/index.php/datamgmt/dbprogramming/mssqlserver/pass-2010-activities/</link>
		<comments>/index.php/datamgmt/dbprogramming/mssqlserver/pass-2010-activities/#comments</comments>
		<pubDate>Tue, 19 Oct 2010 16:12:06 +0000</pubDate>
		<dc:creator><![CDATA[Ted Krueger (onpnt)]]></dc:creator>
				<category><![CDATA[Microsoft SQL Server]]></category>
		<category><![CDATA[pass]]></category>
		<category><![CDATA[sql server 2008]]></category>
		<category><![CDATA[sql server community]]></category>

		<guid isPermaLink="false">/index.php/2010/10/pass-2010-activities/</guid>
		<description><![CDATA[PASS is quickly approaching.  That means you have a very small amount of time to convince your manager, director, VP or whomever you call Boss, to send you to the largest annual SQL Server conference.  If you do want to go and putting together a return of investment is not your strong point; PASS has taken into account that many a required to provide an ROI or some sort of documentation that says why the company should spend thousands of dollars for the trip.  Since this is the case, the PASS website has an actual ROI page just to help you compose your own ROI.]]></description>
				<content:encoded><![CDATA[<div class="image_block"><img src="/wp-content/uploads/blogs/DataMgmt/passlogo.gif" alt="" title="" width="628" height="120" /></div>
<p><a href="http://www.sqlpass.org/summit/na2010/Agenda.aspx">PASS</a>, the largest annual SQL Server conference, is quickly approaching. This means you only have a very short time to convince your Boss to make it his good deed for the year to send you. If you are required to justify why your company should spend thousands of dollars for you to attend, check out the <a href="http://www.sqlpass.org/summit/na2010/AboutSummit/ROI.aspx">ROI page on the</a> PASS website for help/tips.  Use all your charms and give it your best shot.</p>
<p><strong>My first time</strong></p>
<p>This is my first PASS conference and I&#8217;m looking forward to it as much as all of you. It’s all about SQL Server and I’m crazy about it. I’m hoping that I will finally meet those that I have interacted with on the web through Twitter, email, chat, the forums, and LessThanDot. Please introduce yourselves (I’ll do the same) and hopefully we can have the same great conversations in person as we do online. </p>
<p>I’ve also signed up for different PASS activities that would allow me to give back once again to the community.
</p>
<p><span class="MT_under">During PASS, I will be involved in the following:</span></p>
<p><strong>PASS Summit MVP Birds of a Feather Lunch</strong></p>
<p>Mike Walsh is the man who facilitates the Birds of a Feather Lunch. I know it sounds like it’s just an ordinary lunch where chicken is served but it’s actually more than that (and I’m not sure if they’ll serve birds at all). A bunch of MVPs and SQLCAT team members will be in the lunch area at PASS and they’ll be seated on their table of expertise. Each table will have a different topic for discussion. You can then pick the table with the topic you’re most interested in and talk about the topic until you’re full (literally and figuratively). You can ask about disaster recovery options just as you would ask for someone to pass the salt. There’s no stress in openly asking questions. I’ll be seated at the &#8220;Cheapest DR/HA Options on SQL Server&#8221;. The focus will be on lowering cost while still maintaining uptime and recovery from disasters. This is definitely something you wouldn’t want to miss especially after what your company spends to send you to PASS. Of course, if all you want to talk about is the weather, I’m up for that too. That is, what’s the DR for cold weather? Or we can just heckle the table next to us. One way or the other, I think we will all have a great time. </p>
<p>To read more about this part of PASS, check out Mike’s blog post, <a href="http://www.straightpathsql.com/archives/2010/10/pass-summit-mvp-birds-of-a-feather-lunch-2010/">PASS Summit MVP Birds of a Feather Lunch 2010</a>.</p>
<p><strong>Ask the Experts</strong></p>
<p>The Ask the Experts area is another great way to interact with MVPs and other experts in different areas of SQL Server. I’m not sure yet what my schedule to be there is but I will definitely be there. Please make sure to stop by and ask all the questions you have. Or just stop by to say hi and introduce yourself. </p>
<p>I encourage you to attend both of the events above even if you don’t have questions. It’s a good way to expand your network and get to know some people in the community. </p>
<p>There are a few other activities I’ve signed up to be a part of. Most of these are still in the planning stages and are not yet scheduled. Once they are, I will update this post. </p>
<p>Again, I hope to meet all of you. I definitely will be looking for many of you myself. See you there!
 </p>
]]></content:encoded>
			<wfw:commentRss>/index.php/datamgmt/dbprogramming/mssqlserver/pass-2010-activities/feed/</wfw:commentRss>
		<slash:comments>2</slash:comments>
		</item>
		<item>
		<title>SQLCop behind a Proxy</title>
		<link>/index.php/datamgmt/datadesign/sqlcop-and-proxy/</link>
		<comments>/index.php/datamgmt/datadesign/sqlcop-and-proxy/#comments</comments>
		<pubDate>Mon, 18 Oct 2010 21:09:42 +0000</pubDate>
		<dc:creator><![CDATA[Ted Krueger (onpnt)]]></dc:creator>
				<category><![CDATA[Data Modelling and Design]]></category>
		<category><![CDATA[Database Administration]]></category>
		<category><![CDATA[Database Programming]]></category>
		<category><![CDATA[Microsoft SQL Server]]></category>
		<category><![CDATA[Microsoft SQL Server Admin]]></category>
		<category><![CDATA[best practices]]></category>
		<category><![CDATA[sql server 2008]]></category>
		<category><![CDATA[sql server community]]></category>
		<category><![CDATA[sqlcop]]></category>

		<guid isPermaLink="false">/index.php/2010/10/sqlcop-and-proxy/</guid>
		<description><![CDATA[SQLCop uses an internet connection to ensure that all checks and updates that are added are maintained.  When SQLCop first loads, it checks the SQLCopConfig.xml file to determine if a new SQLCop.xml file needs to be downloaded.  If SQLCop is unable to download the configuration file, it will automatically use the previously saved sqlcop.xml file.  Because of this, a remote file request is always performed when you start up SQLCop.In order to work around this problem with proxy servers there is one of two things you can do to run SQLCop.]]></description>
				<content:encoded><![CDATA[<p>Today my good friend Aaron Lowe (<a href="http://www.aaronlowe.net/">Blog</a> | <a href="http://twitter.com/Vendoran">Twitter</a>) let me know he was having problems getting <a href="http://sqlcop.lessthandot.com/">SQLCop</a> to run.  The error would come up as soon as the executable would be run to do the initial install and run of the program.   Proxy servers lock down internet traffic to the point explicit allowances must be set in order for programs like SQLCop to function.</p>
<p>SQLCop uses an internet connection to ensure that all checks and updates that are added are maintained.  When SQLCop first loads, it checks the SQLCopConfig.xml file to determine if a new SQLCop.xml file needs to be downloaded.  If SQLCop is unable to download the configuration file, it will automatically use the previously saved sqlcop.xml file.  Because of this, a remote file request is always performed when you start up SQLCop.</p>
<p>In order to work around this problem with proxy servers there is one of two things you can do to run SQLCop.</p>
<ol>
<li>Ask the network administrator to add the changes to the proxy</li>
<li>Download two XML files from LessThanDot that are required by SQLCop</li>
</ol>
<blockquote><p>The two files are very lightweight!  So don&#8217;t be scared.  They really won&#8217;t bite.</p>
</blockquote>
<p>The first is the <strong><a href="http://sqlcop.lessthandot.com/sqlcop.xml">SQLCop.xml</a></strong>.  This file holds all of the checks and links to resources that SQLCop uses.  </p>
<p>The second file is the <strong><a href="http://sqlcop.lessthandot.com/sqlcopconfig.xml">SQLCopConfig.xml</a></strong>.  This file holds the version levels of SQLCop which is important to know where the version and update levels SQLCop are at.</p>
<p>Place these two files in the same directory as the SQLCop.exe and SQLCop will run without requiring the check for any updates or pull down new updates to these files.</p>
<div class="image_block"><img src="/wp-content/uploads/blogs/DataMgmt/sqlcop_programfiles.gif" alt="" title="" width="353" height="167" /></div>
<p>We appreciate everyone&#8217;s feedback on SQLCop and any problems or suggestions that you have are always welcome.  You can post <a href="http://forum.lessthandot.com/viewforum.php?f=145">forum topics on LessThanDot</a> to let us know.  Also, SQLCop and LessThanDot is run and maintained from <a href="http://lessthandot.com/donate.php">donations</a>.  If you can help, we greatly appreciate it.  <img src="https://s.w.org/images/core/emoji/2/72x72/1f642.png" alt="🙂" class="wp-smiley" style="height: 1em; max-height: 1em;" /></p>
]]></content:encoded>
			<wfw:commentRss>/index.php/datamgmt/datadesign/sqlcop-and-proxy/feed/</wfw:commentRss>
		<slash:comments>3</slash:comments>
		</item>
		<item>
		<title>Doing this for the SQL Community</title>
		<link>/index.php/itprofessionals/ethicsit/onpnt-mvp/</link>
		<comments>/index.php/itprofessionals/ethicsit/onpnt-mvp/#comments</comments>
		<pubDate>Tue, 21 Sep 2010 17:00:12 +0000</pubDate>
		<dc:creator><![CDATA[Ted Krueger (onpnt)]]></dc:creator>
				<category><![CDATA[Ethics and IT]]></category>
		<category><![CDATA[Professional Development]]></category>
		<category><![CDATA[mvp]]></category>
		<category><![CDATA[pass summit 2010]]></category>
		<category><![CDATA[sql server community]]></category>

		<guid isPermaLink="false">/index.php/2010/09/onpnt-mvp/</guid>
		<description><![CDATA[This post is long overdue but the last few months have been very busy.  Busy in a great way though.  That great way has been working on community and other things that we all know, I love to do.]]></description>
				<content:encoded><![CDATA[<p>This post is long overdue but the last few months have been very busy.  Busy in a great way though.  That great way has been working on community and other things that we all know, I love to do.</p>
<p>
<div class="image_block"><img src="/wp-content/uploads/blogs/ITProfessionals/mvp.gif" alt="" title="" width="104" height="161" align="left" /></div>
<p>Some things have happened this year that have far surpassed my expectations of where I would be by now in my career and ability to give back to all of you.  One of those events was becoming a <strong>SQL Server MVP</strong> in July.  Since then I have probably said it more times than my close friends can stand to hear anymore but I still don’t think I do a lot to give back to the community to gain this exceeding accomplishment.  For years I have looked at the MVP awards as an extremely prestigious accomplishment.  I owe special thanks to Jonathan Kehayias (<a href="http://sqlblog.com/blogs/jonathan_kehayias/">blog</a> | <a href="http://twitter.com/sqlsarg">twitter</a>) and Denis Gobo (<a href="/index.php/All/?disp=authdir&amp;author=4">blog</a> | <a href="http://twitter.com/denisgobo">twitter</a>).  Both of these MVPs saw in me what were MVP characteristics and paved the way for me to be recognized as such.  One of the coolest parts of this award is there are many other MVPs that I have talked to that feel exactly the same way in not feeling they do as much as we think we do.  That is the reason they should have the MVP award.  I’ve said it many times in my writing that the community leaders show no greed in what they do.  That characteristic is what makes a leader and a trusting one.  There are a lot of these people I look up to and have for many years.  Being in the same group as them has truly given me the energy to push my efforts to the next level.</p>
<p>Recently there were a few blogs and articles on what it takes to become an MVP.  I’d like to focus on one line from the <a href="https://mvp.support.microsoft.com/gp/aboutmvp">MVP web site</a> and description of what an MVP is: &#8220;<i>MVPs make exceptional contributions to technical communities, sharing their passion, knowledge, and know-how</i>&#8220;</p>
<p>This line says it all really.  Most if not all MVPs are experts in their particular technology corner.  There is no question about that at all.  The one thing that we need to remember is that MVPs are contributors.  Not just experts or out to bill the most hours per day.  They aren’t even based on how great you are at work.  This is all about our communities and the people that are taking every chance they have to give back.  That can be a combination of anything including but not restricted to forum contributions, authoring, speaking and just all around doing what you can to help the community and pass what we know on.</p>
<p>This coming PASS Summit will be my first and I’m going to be volunteering to give some time to the Ask the Expert lounge and the Birds of a Feather lunch.  I hope everyone stops by and introduces themselves.  I want to take this great event as an advantage to meet all the people I’ve had conversations with and worked with over time.</p>
<p>
<div class="image_block"><img src="/wp-content/uploads/blogs/ITProfessionals/redgate.gif" alt="" title="" width="135" height="56" align="left" /></div>
<p><a href="http://www.red-gate.com/about/community_relations/friends_of_RG.htm"><strong>Friends of Red Gate:</strong></a> Red Gate is known for being a community company.  They sponsor and support more in the SQL Community than I could name here in this blog.  Friends of Red Gate program is a group of MVPs and community members that really want to give back by working with Red Gate to show the value in the products and support they give back to us.  I’m honored to be part of this group and have already been deep into working with the products to help do my part in showing how great this company is.</p>
<p>Recently I had the chance to work with Richard Morris with Simple Talk on an <a href="http://www.simple-talk.com/opinion/geek-of-the-week/ted-krueger-dba-of-the-day/">interview (of me)</a>.  Really?!  Getting interviewed is still an odd thing for me to think would ever happen.  This goes back to the, “I don’t think I do enough in the community”.  The interview was a good time and I enjoyed answering all of Richard’s questions.  The best part of this interview was the questions were questions that I think hold great value and hope for others and reading my answers can help them in some way with their own careers.</p>
<p>I could never forget to mention LessThanDot and the community that is here.  I’ve been extremely busy the last few months and that has made it hard to be as high of a contributor there.  I’m working on freeing the time up for that.  LTD has always been something I’ve been proud of and the group I can say I’m part of.  I know this site is and always will be successful and the future along with things like <a href="http://sqlcop.lessthandot.com/">SQLCop</a> that are coming out of it will be nothing short of remarkable.</p>
<p>Accomplishments are an important part in pushing us to the next level.  This year has proven to be one that will be hard to top but in this community, it seems easy to keep giving back and moving it to the next level.  I recall <a href="/index.php/ITProfessionals/EthicsIT/goals-for-2010">the goals I set for this year</a> and I’ve surpassed them.  This accomplishment is and always will be number one on my list.  My personal goals and yours should always be your objective.</p>
<p>In the next few months I’ll be doing even more to try and give back.  In October I’ll be speaking at the <a href="http://wisconsin.sqlpass.org/">Wisconsin SQL Server User Group</a> on Execution Plans and Tuning.  I think this SSUG has great potential and I’m going to put everything I have into helping them make it take off.  If you are within an hour or so distance, this is a good group of people and content each month.  Come join us!  It will be worth it.</p>
<div class="image_block"><img src="/wp-content/uploads/blogs/ITProfessionals/pass.gif" alt="" title="" width="493" height="95" aling="left" /></div>
<p>Finally, <a href="http://www.sqlpass.org/summit/na2010/">PASS Summit 2010</a>!  If I promise that I’d do all I can to get Andrew Kelly to really wear combat boots, Rainbow knee high socks and a kilt, will you come hang out with us?  PASS is worth it.  Talk your company into sending you.  Again, I hope to meet you all there.  Take the time to find the people you always wanted to meet.  Egos are rare in our community.  I think you’ll be surprised at how great all of the people that lead us and they will sit and talk about both SQL Server and just about everything else. (Mostly bacon comes up a lot)</p>
<p><strong>Closing</strong></p>
<p>We always need a closing statement.  I think?!  Well, here is mine.  There is a theme to everything I wrote about that I feel very lucky to be a part of.  I’ve purposely left some other things out of this post because I don’t hold them as high.  This is all for the SQL Community.  Everything that has been accomplished so far was only part of trying to give back.  You know that means that anyone can do the same thing if you work hard at it and want to help myself and the community out in your own way.</p>
]]></content:encoded>
			<wfw:commentRss>/index.php/itprofessionals/ethicsit/onpnt-mvp/feed/</wfw:commentRss>
		<slash:comments>3</slash:comments>
		</item>
	</channel>
</rss>
