<?xml version="1.0" encoding="UTF-8"?><rss version="2.0"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:atom="http://www.w3.org/2005/Atom"
	xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
	xmlns:slash="http://purl.org/rss/1.0/modules/slash/"
	>

<channel>
	<title>teamcity &#8211; LessthanDot</title>
	<atom:link href="/index.php/tag/teamcity/feed/" rel="self" type="application/rss+xml" />
	<link>/</link>
	<description>A Technical Community for IT Professionals</description>
	<lastBuildDate>Sat, 09 Mar 2019 12:50:36 +0000</lastBuildDate>
	<language>en-US</language>
	<sy:updatePeriod>hourly</sy:updatePeriod>
	<sy:updateFrequency>1</sy:updateFrequency>
	<generator>https://wordpress.org/?v=4.6.1</generator>
	<item>
		<title>Deploying to ServiceFabric from TeamCity</title>
		<link>/index.php/enterprisedev/cloud/azure/deploying-to-servicefabric-from-teamcity/</link>
		<comments>/index.php/enterprisedev/cloud/azure/deploying-to-servicefabric-from-teamcity/#respond</comments>
		<pubDate>Mon, 07 Aug 2017 12:30:56 +0000</pubDate>
		<dc:creator><![CDATA[Eli Weinstock-Herman (tarwn)]]></dc:creator>
				<category><![CDATA[Azure]]></category>
		<category><![CDATA[azure]]></category>
		<category><![CDATA[powershell]]></category>
		<category><![CDATA[Service Fabric]]></category>
		<category><![CDATA[teamcity]]></category>

		<guid isPermaLink="false">/?p=8755</guid>
		<description><![CDATA[Recently I&#8217;ve been working on an application that runs partially in Azure ServiceFabric. I&#8217;ve created a local cluster to work against and now it&#8217;s time to configure my TeamCity deployment to deploy upgrades to my application automatically. Initial details: Deploying 2 projects: a .Net 4.6.2 ASP.Net Core app to web app .Net 4.6.2 ServiceFabric project [&#8230;]]]></description>
				<content:encoded><![CDATA[<p>Recently I&#8217;ve been working on an application that runs partially in Azure ServiceFabric. I&#8217;ve <a href="">created a local cluster</a> to work against and now it&#8217;s time to configure my TeamCity deployment to deploy upgrades to my application automatically.</p>
<p>Initial details:</p>
<ul>
<li>Deploying 2 projects:
<ul>
<li>a .Net 4.6.2 ASP.Net Core app to web app</li>
<li>.Net 4.6.2 ServiceFabric project to ServiceFabric cluster</li>
</ul>
</li>
<li>Server:
<ul>
<li>VM: 2-core, 2048 GB of RAM</li>
<li>Windows Server 2016 x64</li>
<li>TeamCity 2017.1</li>
<li>SQL Server 2016</li>
</ul>
</li>
</ul>
<p>In the previous post I walked through the setup of a Service Fabric cluster on a local Hyper-V server and 3 VMs, followed by publishing a Service Fabric service manually to the cluster. In this post, I&#8217;m evolving from the manual publish step to a TeamCity automated deployment.</p>
<p>Here are the system details:</p>
<ul>
<li><b>TeamCity</b>: VM w/ 2 cores assigned and 2048 MB of memory running Windows 2016 x64 with TeamCity 2017.1 and SQL Server 2016</li>
<li><b>ServiceFabricNodes:</b> 3 single core VMs w/ 2048 MB of memory running Windows 2016 x64</li>
</ul>
<p>Let&#8217;s go!</p>
<h2>Installing Dependencies</h2>
<p>This solution has two deliverables: a front-end API that is deployed to Azure Web Site (now App Service) and a back-end agent intended to run in Service Fabric. I&#8217;ve already setup a Continuous Integration step to build the projects, run the database migration, perform front-end gulp tasks, and verify a set of unit and integration tests, so I should have most of the dependencies I need.</p>
<p>I&#8217;ve installed VS 2017 Community, VS 2017 Build tools, <a href="https://docs.microsoft.com/en-us/azure/service-fabric/service-fabric-get-started">Service Fabric SDK 2.6.220</a>, Node.js 6.11.1 (LTS), NuGet 4.1, and <a href="https://github.com/jonnyzzz/TeamCity.Node">jonnyzzz&#8217;s Node plugin</a>. </p>
<div style="background-color: #eeeeee; margin: 1em; padding: 1em">
I installed VS 2017 because historically I&#8217;ve run into issues with Azure projects (and MVC before that, and parts of WebForms before that). I originally was opposed to have the IDE installed on the build server, but have since decided I don&#8217;t mind and look at it as building with the same toolset on the build server that I built and tested with locally.
</div>
<p>This is also the place I ran into the madness that is the current <a href="/index.php/itprofessionals/softwareandconfigmgmt/multiple-nuget-methods-for-vs2017-msbuild-15-in-teamcity/" title="Multiple NuGet Methods for VS2017 + MSBuild 15 in TeamCity">mess of NuGet and C# Projects</a>.</p>
<h2>Deploying the Service Fabric Project</h2>
<p>My build pipeline for this project will be a single CI stage that runs the tests for both projects, and package stage that packages releasable versions for both projects, then two independent deploy stages to deploy the website and service fabric packages to their appropriate places. </p>
<div id="attachment_8781" style="width: 557px" class="wp-caption aligncenter"><img src="/wp-content/uploads/2017/08/DeployserviceFabric.png" alt="Deployment Pipeline - API updates before ServiceFabric" width="547" height="129" class="size-full wp-image-8781" srcset="/wp-content/uploads/2017/08/DeployserviceFabric.png 547w, /wp-content/uploads/2017/08/DeployserviceFabric-300x71.png 300w" sizes="(max-width: 547px) 100vw, 547px" /><p class="wp-caption-text">Deployment Pipeline &#8211; API updates before ServiceFabric</p></div>
<p>This is my &#8220;good enough for now&#8221; setup. If I run into versioning issues, I can come back and add some backwards compatibility tests between the packages after CI and run the deployments serially instead of in parallel.</p>
<div id="attachment_8756" style="width: 310px" class="wp-caption aligncenter"><img src="/wp-content/uploads/2017/07/DeployScript-300x172.png" alt="Service Fabric Deploy Script" width="300" height="172" class="size-medium wp-image-8756" srcset="/wp-content/uploads/2017/07/DeployScript-300x172.png 300w, /wp-content/uploads/2017/07/DeployScript.png 520w" sizes="(max-width: 300px) 100vw, 300px" /><p class="wp-caption-text">Service Fabric Deploy Script</p></div>
<p>The Service Fabric package is created with a <code>Deploy-FabricApplication.ps1</code> script that we&#8217;ll use to deploy the package once it&#8217;s built.</p>
<p><b>Local Script Deploy to ServiceFabric</b></p>
<p>The first step is testing the script locally to make sure I know how to use it. </p>
<ol style="padding-left: 40px">
<li>Right click the Service Fabric project and select &#8220;Package&#8221;</li>
<li>Open a powershell console and direct it to the Scripts folder in the Service Fabric project</li>
<li>Run a sample deployment with any parameters you have in the file: <code>.\Deploy-FabricApplication.ps1 -ApplicationPackagePath '..\pkg\Debug\' -PublishProfileFile '..\PublishProfiles\Local.1Node.xml'  -ApplicationParameter @{PhantomAgent_InstanceCount='1'; CoordinatorURL='http://localhost:52860/' }</code></li>
</ol>
<p>I had to do this several times, so I also got to learn how to update versions:</p>
<ol style="padding-left: 40px">
<li>Add UpgradeDeployment to your PublishProfile:
<ul style="padding-left: 40px">
<li>Option 1: Right click in Visual Studio, select Publish, use the link near the bottom to edit your deployment options and then close the dialog, choose &#8220;yes&#8221; when it asks if you want to save the profile&#8221;</li>
<li>Option 2: Open the relevant PublishProfile XML file and add this to the bottom for the default Unmonitored Upgrade settings

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="xml"><thead><tr><td colspan="2"  class="head">XML</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
</pre></td><td class="de1"><pre class="de1"><span class="sc3"><span class="re1">&lt;UpgradeDeployment</span> <span class="re0">Mode</span>=<span class="st0">&quot;UnmonitoredAuto&quot;</span> <span class="re0">Enabled</span>=<span class="st0">&quot;true&quot;</span><span class="re2">&gt;</span></span>
&nbsp; &nbsp; <span class="sc3"><span class="re1">&lt;Parameters</span> <span class="re0">UpgradeReplicaSetCheckTimeoutSec</span>=<span class="st0">&quot;1&quot;</span> <span class="re0">Force</span>=<span class="st0">&quot;True&quot;</span> <span class="re2">/&gt;</span></span>
<span class="sc3"><span class="re1">&lt;/UpgradeDeployment<span class="re2">&gt;</span></span></span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">&lt;UpgradeDeployment Mode="UnmonitoredAuto" Enabled="true"&gt;
    &lt;Parameters UpgradeReplicaSetCheckTimeoutSec="1" Force="True" /&gt;
&lt;/UpgradeDeployment&gt;</pre></div></div>

</li>
</ul>
</li>
<li>Go to the pkg\Debug</li>
<li>Open [YourProject]Pkg\ServiceManifest.xml
<ol style="padding-left: 40px">
<li>Update the version in either <code>&lt;CodePackage Name="Code" Version="1.0.3"&gt;</code> or <code>&lt;ConfigPackage Name="Config" Version="1.0.4" /&gt;</code></li>
<li>Update the Package version in the <code>&lt;ServiceManifest … Version="1.0.2" …&gt;</code> root element</li>
<li>Save</li>
</ol>
</li>
<li>Open ApplicationManifest.xml
<ol style="padding-left: 40px">
<li>Find <code>&lt;ServiceManifestRef ..&gt;</code> and update ServiceManifestVersion to match the ServiceManifest version above</li>
<li>Update the ApplicationTypeVersion property in the <code>&lt;ApplicationManifest … &gt;</code> root element</li>
<li>Save</li>
</ol>
</li>
<li>Now try your deployment again!</li>
</ol>
<p>So now we have a working command locally, now we just have to get TeamCity to update versions appropriately and run this. </p>
<h3>Build the package</h3>
<p>Building the package is straightforward. We just need to build the package in release mode, then configure Archiving to capture the bin/Release folder and PublishProfiles folder.</p>
<p>The Build Step in my &#8220;Package Stage&#8221; configuration looks like this:</p>
<div id="attachment_8757" style="width: 1034px" class="wp-caption aligncenter"><img src="/wp-content/uploads/2017/07/BuildPackageStage-1024x730.png" alt="TeamCity Package Stage" width="1024" height="730" class="size-large wp-image-8757" srcset="/wp-content/uploads/2017/07/BuildPackageStage-1024x730.png 1024w, /wp-content/uploads/2017/07/BuildPackageStage-300x214.png 300w, /wp-content/uploads/2017/07/BuildPackageStage-768x548.png 768w, /wp-content/uploads/2017/07/BuildPackageStage.png 1491w" sizes="(max-width: 1024px) 100vw, 1024px" /><p class="wp-caption-text">TeamCity Package Stage</p></div>
<p>Once I have the package built, I am going to replace the versions with a value that ties to the TeamCity version number.</p>
<p>In the &#8220;General&#8221; tab in TeamCity, I use the build number token from my CI step as the version for this step:</p>
<div id="attachment_8758" style="width: 1034px" class="wp-caption aligncenter"><img src="/wp-content/uploads/2017/07/TeamCity_Package_BuildNumber-1024x51.png" alt="TeamCity Package Build Number" width="1024" height="51" class="size-large wp-image-8758" srcset="/wp-content/uploads/2017/07/TeamCity_Package_BuildNumber-1024x51.png 1024w, /wp-content/uploads/2017/07/TeamCity_Package_BuildNumber-300x15.png 300w, /wp-content/uploads/2017/07/TeamCity_Package_BuildNumber-768x38.png 768w" sizes="(max-width: 1024px) 100vw, 1024px" /><p class="wp-caption-text">TeamCity Package Build Number</p></div>
<p>My CI step has this for it&#8217;s build number:</p>
<div id="attachment_8759" style="width: 1034px" class="wp-caption aligncenter"><img src="/wp-content/uploads/2017/07/TeamCity_CI_BuildNumber-1024x73.png" alt="TeamCity CI Build Number" width="1024" height="73" class="size-large wp-image-8759" srcset="/wp-content/uploads/2017/07/TeamCity_CI_BuildNumber-1024x73.png 1024w, /wp-content/uploads/2017/07/TeamCity_CI_BuildNumber-300x21.png 300w, /wp-content/uploads/2017/07/TeamCity_CI_BuildNumber-768x54.png 768w, /wp-content/uploads/2017/07/TeamCity_CI_BuildNumber.png 1510w" sizes="(max-width: 1024px) 100vw, 1024px" /><p class="wp-caption-text">TeamCity CI Build Number</p></div>
<p>So now I will have a matching 1.X.0 value all the way from CI through to the ServiceFabric manager.</p>
<p>Then in a new build step, I replace the versions in my two manifest files with the build version token from TeamCity:</p>
<div id="attachment_8760" style="width: 1034px" class="wp-caption aligncenter"><img src="/wp-content/uploads/2017/07/TeamCity_Package_Versions-1024x201.png" alt="TeamCity Package Versions" width="1024" height="201" class="size-large wp-image-8760" srcset="/wp-content/uploads/2017/07/TeamCity_Package_Versions-1024x201.png 1024w, /wp-content/uploads/2017/07/TeamCity_Package_Versions-300x59.png 300w, /wp-content/uploads/2017/07/TeamCity_Package_Versions-768x151.png 768w" sizes="(max-width: 1024px) 100vw, 1024px" /><p class="wp-caption-text">TeamCity Package Versions</p></div>
<p>Finally, I add entries to the &#8220;Artifact Paths&#8221; back in the &#8220;General&#8221; tab to zip up the package for use by the next step:</p>
<div id="attachment_8761" style="width: 1034px" class="wp-caption aligncenter"><img src="/wp-content/uploads/2017/07/TeamCity_Package_Artifacts-1024x104.png" alt="TeamCity Package Artifacts" width="1024" height="104" class="size-large wp-image-8761" srcset="/wp-content/uploads/2017/07/TeamCity_Package_Artifacts-1024x104.png 1024w, /wp-content/uploads/2017/07/TeamCity_Package_Artifacts-300x30.png 300w, /wp-content/uploads/2017/07/TeamCity_Package_Artifacts-768x78.png 768w" sizes="(max-width: 1024px) 100vw, 1024px" /><p class="wp-caption-text">TeamCity Package Artifacts</p></div>
<p>The final steps look like this:</p>
<div id="attachment_8762" style="width: 1034px" class="wp-caption aligncenter"><img src="/wp-content/uploads/2017/07/TeamCity_Package_Steps-1024x234.png" alt="TeamCity Package Steps" width="1024" height="234" class="size-large wp-image-8762" srcset="/wp-content/uploads/2017/07/TeamCity_Package_Steps-1024x234.png 1024w, /wp-content/uploads/2017/07/TeamCity_Package_Steps-300x68.png 300w, /wp-content/uploads/2017/07/TeamCity_Package_Steps-768x175.png 768w, /wp-content/uploads/2017/07/TeamCity_Package_Steps.png 1517w" sizes="(max-width: 1024px) 100vw, 1024px" /><p class="wp-caption-text">TeamCity Package Steps</p></div>
<p>Running the build, I can verify everything is successful by opening up the archived package:</p>
<div id="attachment_8763" style="width: 1034px" class="wp-caption aligncenter"><img src="/wp-content/uploads/2017/07/TeamCity_Package_Success-1024x321.png" alt="TeamCity Package - Verifying Versions" width="1024" height="321" class="size-large wp-image-8763" srcset="/wp-content/uploads/2017/07/TeamCity_Package_Success-1024x321.png 1024w, /wp-content/uploads/2017/07/TeamCity_Package_Success-300x94.png 300w, /wp-content/uploads/2017/07/TeamCity_Package_Success-768x241.png 768w, /wp-content/uploads/2017/07/TeamCity_Package_Success.png 1392w" sizes="(max-width: 1024px) 100vw, 1024px" /><p class="wp-caption-text">TeamCity Package &#8211; Verifying Versions</p></div>
<h3>Deploy</h3>
<p>Now that I have a step building the files I need, I&#8217;ll add a new Build Configuration named &#8220;Deploy to Service Fabric&#8221;. I&#8217;ll set Snapshot and Artifact Dependencies to the prior Build Configuration and update the Build Number to use the value from that config (which is in turn using the one from CI).</p>
<div id="attachment_8764" style="width: 922px" class="wp-caption aligncenter"><img src="/wp-content/uploads/2017/07/TeamCity_Deploy_Dependencies.png" alt="TeamCity Deploy Dependencies" width="912" height="406" class="size-full wp-image-8764" srcset="/wp-content/uploads/2017/07/TeamCity_Deploy_Dependencies.png 912w, /wp-content/uploads/2017/07/TeamCity_Deploy_Dependencies-300x134.png 300w, /wp-content/uploads/2017/07/TeamCity_Deploy_Dependencies-768x342.png 768w" sizes="(max-width: 912px) 100vw, 912px" /><p class="wp-caption-text">TeamCity Deploy Dependencies</p></div>
<p>I have one build step, a powershell command that matches the manual one I was running earlier that is set to treat powershell errors as errors (instead of the default, warnings). I run this as a single PowerShell source script so I can use dot notation (ServiceFabric scripts make some assumptions about having the connection variable available):</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="text"><thead><tr><td colspan="2"  class="head">Text</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
</pre></td><td class="de1"><pre class="de1">Invoke-Expression &quot;. .\Deploy-FabricApplication.ps1 -ApplicationPackagePath ../../../Artifacts -PublishProfileFile ../PublishProfiles/LocalCluster.xml -ApplicationParameter @{PhantomAgent_InstanceCount='1'; CoordinatorURL='http://app.launchready.co/'}&quot;</pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">Invoke-Expression ". .\Deploy-FabricApplication.ps1 -ApplicationPackagePath ../../../Artifacts -PublishProfileFile ../PublishProfiles/LocalCluster.xml -ApplicationParameter @{PhantomAgent_InstanceCount='1'; CoordinatorURL='http://app.launchready.co/'}"</pre></div></div>

<p>My build step then runs this command like so:</p>
<div id="attachment_8765" style="width: 1034px" class="wp-caption aligncenter"><img src="/wp-content/uploads/2017/07/TeamCity_Deploy_Script-1024x272.png" alt="TeamCity Deploy Script" width="1024" height="272" class="size-large wp-image-8765" srcset="/wp-content/uploads/2017/07/TeamCity_Deploy_Script-1024x272.png 1024w, /wp-content/uploads/2017/07/TeamCity_Deploy_Script-300x80.png 300w, /wp-content/uploads/2017/07/TeamCity_Deploy_Script-768x204.png 768w, /wp-content/uploads/2017/07/TeamCity_Deploy_Script.png 1226w" sizes="(max-width: 1024px) 100vw, 1024px" /><p class="wp-caption-text">TeamCity Deploy Script</p></div>
<p>Note 1: Make sure your Server certificate is installed and permission granted to the user that TeamCity runs under.</p>
<p>Note 2: I also had to alter my LocalCluster.xml profile to <code>StoreLocation="LocalMachine"</code> instead of <code>StoreLocation="CurrentUser"</code>, since that I where I installed the certificate.</p>
<p>And there we have it:</p>
<div id="attachment_8766" style="width: 387px" class="wp-caption aligncenter"><img src="/wp-content/uploads/2017/07/TeamCity_Deploy_Success.png" alt="TeamCity Deploy Success for v1.43.0" width="377" height="104" class="size-full wp-image-8766" srcset="/wp-content/uploads/2017/07/TeamCity_Deploy_Success.png 377w, /wp-content/uploads/2017/07/TeamCity_Deploy_Success-300x83.png 300w" sizes="(max-width: 377px) 100vw, 377px" /><p class="wp-caption-text">TeamCity Deploy Success for v1.43.0</p></div>
<div id="attachment_8767" style="width: 817px" class="wp-caption aligncenter"><img src="/wp-content/uploads/2017/07/ServiceFabric_Deploy_Success.png" alt="ServiceFabric Success for v1.43.0" width="807" height="98" class="size-full wp-image-8767" srcset="/wp-content/uploads/2017/07/ServiceFabric_Deploy_Success.png 807w, /wp-content/uploads/2017/07/ServiceFabric_Deploy_Success-300x36.png 300w, /wp-content/uploads/2017/07/ServiceFabric_Deploy_Success-768x93.png 768w" sizes="(max-width: 807px) 100vw, 807px" /><p class="wp-caption-text">ServiceFabric Success for v1.43.0</p></div>
<p>We can see matching versions in both places (1.43.0), so we know the pipeline is functioning.</p>
]]></content:encoded>
			<wfw:commentRss>/index.php/enterprisedev/cloud/azure/deploying-to-servicefabric-from-teamcity/feed/</wfw:commentRss>
		<slash:comments>0</slash:comments>
		</item>
		<item>
		<title>Multiple NuGet Methods for VS2017 + MSBuild 15 in TeamCity</title>
		<link>/index.php/itprofessionals/softwareandconfigmgmt/multiple-nuget-methods-for-vs2017-msbuild-15-in-teamcity/</link>
		<comments>/index.php/itprofessionals/softwareandconfigmgmt/multiple-nuget-methods-for-vs2017-msbuild-15-in-teamcity/#respond</comments>
		<pubDate>Wed, 19 Jul 2017 18:06:25 +0000</pubDate>
		<dc:creator><![CDATA[Eli Weinstock-Herman (tarwn)]]></dc:creator>
				<category><![CDATA[Software and Configuration Management]]></category>
		<category><![CDATA[nuget]]></category>
		<category><![CDATA[teamcity]]></category>
		<category><![CDATA[Visual Studio 2017]]></category>

		<guid isPermaLink="false">/?p=8697</guid>
		<description><![CDATA[ASP.Net Projects and NuGet have been a moving target the last couple years. I have an ASP.Net Core project (.Net Framework) with several class libraries and had to work through a number of problems to get NuGet Restore working on a TeamCity CI server. Hopefully this will help someone else along the way. It turns [&#8230;]]]></description>
				<content:encoded><![CDATA[<p>ASP.Net Projects and NuGet have been a moving target the last couple years. I have an ASP.Net Core project (.Net Framework) with several class libraries and had to work through a number of problems to get NuGet Restore working on a TeamCity CI server. Hopefully this will help someone else along the way. </p>
<p>It turns out I have 3 situations:</p>
<ul>
<li>ASP.Net Core uses the new <a href="http://blog.nuget.org/20170316/NuGet-now-fully-integrated-into-MSBuild.html">PackageReference</a> for packages instead of packages.json</li>
<li>Other C# Projects still use the packages.json method for packages</li>
<li>Solution packages (great for tooling) are (still) not supported after VS 2013 (<a href="https://github.com/NuGet/Home/issues/522">NuGet #522</a>)</li>
</ul>
<p>(the last couple years also saw the ill-fated project.json, which isn&#8217;t represented here and may or may not be covered by one of these methods)</p>
<p>The software versions I am working with are:</p>
<ul>
<li>TeamCity 2017.1</li>
<li>NuGet 4.1.0</li>
<li>Visual Studio 2017 Community</li>
<li>MS Build Tools 2017 (MSBuild 15)</li>
</ul>
<p>I&#8217;ve outlined the issues I ran into and the individual Build Steps I used to workaround them.</p>
<h2>Some of the issues</h2>
<p><b>Issue #1: Restoring packages.json + PackageReference</b></p>
<p>NuGet Restore is built into MSBuild 15 (<code>msbuild /t:restore</code>) to support the new PackageReference case. Supposedly NuGet.exe 4+ supports this out of the box, but I was unable to make this work (<a href="https://docs.microsoft.com/en-us/nuget/consume-packages/package-restore">NuGet Package Restore</a>):</p>
<blockquote><p>
<code>msbuild /t:restore</code> 	Nuget 4.x+ and MSBuild 15.1+ with package references in project files only. nuget restore and dotnet restore both use this command for applicable projects. See NuGet pack and restore as MSBuild targets- restore target.
</p></blockquote>
<p>It is possible to <a href="http://blog.nuget.org/20170316/NuGet-now-fully-integrated-into-MSBuild.html#what-about-other-project-types-that-are-not-net-core">use PackageReference with other project types</a>, but you have to know to turn this on from the beginning. There is no migration option to change tracks with later. </p>
<p><b>Issue #2: MSBuild install location has moved</b><br />
MSBuild installs to a new folder with 2017 (<code>C:\Program Files (x86)\Microsoft Visual Studio\2017\BuildTools\MSBuild</code>), which means for a while my NuGet Restore commands were defaulting to MSBuild 14. The <code>-MsBuildPath</code> parameter let&#8217;s you provide a path to a specific install, so we can at MSBuild 15 via it&#8217;s new path. </p>
<p><b>Issue #3: Regular Package.json files plus Solution Package.son File</b></p>
<p>When we run it against a <code>*.sln</code> file, NuGet.exe will find and run against each project&#8217;s <code>package.json</code> file. Alternatively, you can also point NuGet.exe directly at a package.json file to install that specific file, which is a workaround for the no longer support solution packages. There is not an option (that I could find) to combine these into a single call.</p>
<p><b>Issue #4: TeamCity only supports NuGet Restore of *.sln files</b></p>
<p>TeamCity restricts the built-in NuGet Restore command to only run against files that end in &#8220;.sln&#8221;. A separate flaw in this restriction was <a href="https://blog.jetbrains.com/teamcity/2013/08/nuget-package-restore-with-teamcity/#comment-177428">pointed out to JetBrains in 2015</a>, but has not been fixed as of TeamCity 2017.1.</p>
<p>This restriction prevents me from doing a clean NuGet Restore of my solution-level packages.json from issue #3.</p>
<h2>The Fixes</h2>
<p>I ended up using 3 Build Steps to do NuGet restores in TeamCity for this one ASP.Net Core deployment.</p>
<p><div id="attachment_8699" style="width: 882px" class="wp-caption aligncenter"><img src="/wp-content/uploads/2017/07/TeamCityNuGetRestorePost.png" alt="TeamCity NuGet Restore Steps" width="872" height="239" class="size-full wp-image-8699" srcset="/wp-content/uploads/2017/07/TeamCityNuGetRestorePost.png 872w, /wp-content/uploads/2017/07/TeamCityNuGetRestorePost-300x82.png 300w, /wp-content/uploads/2017/07/TeamCityNuGetRestorePost-768x210.png 768w" sizes="(max-width: 872px) 100vw, 872px" /><p class="wp-caption-text">TeamCity NuGet Restore Steps</p></div><br />
<b>1. Restore from package.json files</b></p>
<p>I used the built-in Nuget Installer with the Restore option and the name of my solution file. I added an extra command line parameter to point it at MSBuild 15:<br />
<code>-MsBuildPath "C:\Program Files (x86)\Microsoft Visual Studio\2017\BuildTools\MSBuild\15.0\Bin"</code>.</p>
<p><b>2. Restore from PackageReferences</b></p>
<p>For PackageReference, I used the MSBuild task in TeamCity with my Solution file as the Build file path and a target of &#8220;Restore&#8221; (same as running <code>msbuild /t:Restore</code>).</p>
<p><b>3. Restore Solution-level packages</b></p>
<p>A solution-level packages file is useful for solution-level build and deploy tools that aren&#8217;t needed locally. Because TeamCity has an artifical constraint on only accepting *.sln files, I solved this with a <code>Command Line</code> runner type with the following script:</p>
<p><code>%teamcity.tool.NuGet.CommandLine.DEFAULT%\\tools\\nuget.exe restore Deployment/packages.config -PackagesDirectory packages</code></p>
<p>Deployment/packages.config is my solution-level packages file. The TeamCity variable resolves to the path of my default NuGet installation, which is 4.1.0 in this case.</p>
<h2>Final Words</h2>
<p>This experience was roughly 3-5 times longer than I expected, given the number of ASP.Net deployments, TeamCity setups, and so on I&#8217;ve done over the years. The playing field feels littered with half-baked solutions that not only break backwards compatibility, but break compatibility across projects in the same solution using vanilla Visual Studio project templates. </p>
]]></content:encoded>
			<wfw:commentRss>/index.php/itprofessionals/softwareandconfigmgmt/multiple-nuget-methods-for-vs2017-msbuild-15-in-teamcity/feed/</wfw:commentRss>
		<slash:comments>0</slash:comments>
		</item>
		<item>
		<title>Improved TeamCity .Net Build Warnings</title>
		<link>/index.php/enterprisedev/application-lifecycle-management/improved-teamcity-net-build-warnings/</link>
		<comments>/index.php/enterprisedev/application-lifecycle-management/improved-teamcity-net-build-warnings/#comments</comments>
		<pubDate>Wed, 01 Jun 2016 21:17:18 +0000</pubDate>
		<dc:creator><![CDATA[Eli Weinstock-Herman (tarwn)]]></dc:creator>
				<category><![CDATA[Application Lifecycle Management]]></category>
		<category><![CDATA[teamcity]]></category>

		<guid isPermaLink="false">/?p=4494</guid>
		<description><![CDATA[A few years back, I posted &#8220;Displaying .Net Build Warnings in TeamCity&#8220;. Many folks found it useful (and it served as a good reference the last time I needed to re-setup warnings). Recently, Mitch Terlisner reached out to me with a much improved version to share with folks that includes better build status output, an [&#8230;]]]></description>
				<content:encoded><![CDATA[<p>A few years back, I posted &#8220;<a href="/index.php/enterprisedev/application-lifecycle-management/displaying-net-build-warnings-in/" title="Displaying .Net Build Warnings in TeamCity">Displaying .Net Build Warnings in TeamCity</a>&#8220;. Many folks found it useful (and it served as a good reference the last time I needed to re-setup warnings). Recently, Mitch Terlisner reached out to me with a much improved version to share with folks that includes better build status output, an interactive warnings tab, statistics chart, and a custom metric to enable custom failure rules:</p>
<p><strong>Better Warning Output in build status!</strong><br />
<div id="attachment_4497" style="width: 494px" class="wp-caption alignleft"><a href="/wp-content/uploads/2016/05/TeamCity_Output_1.png"><img src="/wp-content/uploads/2016/05/TeamCity_Output_1.png" alt="Improved output in your build status" width="484" height="117" class="size-full wp-image-4497" srcset="/wp-content/uploads/2016/05/TeamCity_Output_1.png 484w, /wp-content/uploads/2016/05/TeamCity_Output_1-300x72.png 300w" sizes="(max-width: 484px) 100vw, 484px" /></a><p class="wp-caption-text">Improved build status</p></div></p>
<p><strong>Way better (interactive) Warning Output tab!</strong><br />
<div id="attachment_4498" style="width: 1034px" class="wp-caption alignleft"><a href="/wp-content/uploads/2016/05/TeamCity_Output_2.png"><img src="/wp-content/uploads/2016/05/TeamCity_Output_2-1024x310.png" alt="Interactive Build Warning tab with the assembly hierarchy" width="1024" height="310" class="size-large wp-image-4498" srcset="/wp-content/uploads/2016/05/TeamCity_Output_2-1024x310.png 1024w, /wp-content/uploads/2016/05/TeamCity_Output_2-300x90.png 300w, /wp-content/uploads/2016/05/TeamCity_Output_2.png 1076w" sizes="(max-width: 1024px) 100vw, 1024px" /></a><p class="wp-caption-text">Interactive Build Warning tab</p></div></p>
<p><strong>Build Warnings Statistics Chart!</strong><br />
<div id="attachment_4499" style="width: 939px" class="wp-caption alignleft"><a href="/wp-content/uploads/2016/05/TeamCity_Output_3.png"><img src="/wp-content/uploads/2016/05/TeamCity_Output_3.png" alt="A chart in the Statistics tab of the project" width="929" height="271" class="size-full wp-image-4499" srcset="/wp-content/uploads/2016/05/TeamCity_Output_3.png 929w, /wp-content/uploads/2016/05/TeamCity_Output_3-300x87.png 300w" sizes="(max-width: 929px) 100vw, 929px" /></a><p class="wp-caption-text">Statistics Chart</p></div></p>
<p><strong>Custom Failures on Build Warning Count!</strong><br />
<div id="attachment_4500" style="width: 667px" class="wp-caption alignleft"><a href="/wp-content/uploads/2016/05/TeamCity_Output_4.png"><img src="/wp-content/uploads/2016/05/TeamCity_Output_4.png" alt="Custom failure when warning count exceeds a given number" width="657" height="115" class="size-full wp-image-4500" srcset="/wp-content/uploads/2016/05/TeamCity_Output_4.png 657w, /wp-content/uploads/2016/05/TeamCity_Output_4-300x52.png 300w" sizes="(max-width: 657px) 100vw, 657px" /></a><p class="wp-caption-text">Custom failures</p></div></p>
<blockquote><p>
This version was shared by Mitch T, on behalf of (and with permission of) Markit.</p>
<p>A few highlights:<br />
* Supports multiple solutions, and displays warnings in a hierarchy, by solution/project.<br />
* Shows counts of warnings by solution/project/warning code, and shows which warnings are most numerous.<br />
* Interactive &#8211; allows expanding/collapsing at the solution/project, and filtering to new warnings or by warning code(s).</p>
<p>Mitch Terlisner<br />
<a href="http://www.improving.com/" title="www.improving.com" target="_blank">www.improving.com</a>
</p></blockquote>
<p></p>
<h2>Setup</h2>
<p>Here are the setup steps in TeamCity:</p>
<h3>Build Changes</h3>
<p>Mitch added these parameters and steps to his build template to apply to multiple builds, another option would be to edit an existing build directly.</p>
<p>Download the powershell script here: <a href="https://gist.github.com/tarwn/bfd08f42226463871389a766fa40258c">BuildWarningReportGenerator.ps1 Gist</a></p>
<p>1. Select the &#8220;Parameters&#8221; menu.<br />
2. Add a a parameter for the Build Log name that we&#8217;ll generate from MSBuild: </p>
<pre>   Name: BuildLogFile
   Value: BuildLog.Log</pre>
<p>3. Add command line argument we need to pass to MSBuild to do so: </p>
<pre>   Name: MSBuildLogClause
   Value: /l:FileLogger,Microsoft.Build.Engine;logfile=%BuildLogFile%;Append</pre>
<p><a href="/wp-content/uploads/2016/05/TeamCityWarnings_Template_1.png"><img src="/wp-content/uploads/2016/05/TeamCityWarnings_Template_1-1024x306.png" alt="Add Parameters" width="800" class="aligncenter size-large wp-image-4501" srcset="/wp-content/uploads/2016/05/TeamCityWarnings_Template_1-1024x306.png 1024w, /wp-content/uploads/2016/05/TeamCityWarnings_Template_1-300x89.png 300w, /wp-content/uploads/2016/05/TeamCityWarnings_Template_1.png 1043w" sizes="(max-width: 1024px) 100vw, 1024px" /></a></p>
<p>Next we&#8217;ll want to add build steps to purge any prior versions of the file, run the log during MS Build calls, and then evaluate the log file for warnings at the end of the run.</p>
<p><a href="/wp-content/uploads/2016/05/TeamCityWarnings_Template_2.png"><img src="/wp-content/uploads/2016/05/TeamCityWarnings_Template_2.png" alt="Build Steps" width="839" height="341" class="aligncenter size-full wp-image-4502" srcset="/wp-content/uploads/2016/05/TeamCityWarnings_Template_2.png 839w, /wp-content/uploads/2016/05/TeamCityWarnings_Template_2-300x121.png 300w" sizes="(max-width: 839px) 100vw, 839px" /></a></p>
<p><b>1. Purge Build Log</b></p>
<pre>Type: Command Line
Name: Purge BuildLogFile
Run:  Custom Script
Script: if exist %BuildLogFile% del %BuildLogFile%</pre>
<p><b>2. Existing MSBuild Task</b><br />
Append to the CommandLine Input: %MSBuildLogClause%</p>
<p><b>3. Evaluate Build Warnings</b></p>
<pre>Type: Powershell
Name: Generate Build Warnings Report
Working Dir: &lt;working dir the powershell script is in&gt;
Script: Source code
Source:</pre>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="text"><thead><tr><td colspan="2"  class="head">Text</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
</pre></td><td class="de1"><pre class="de1">if(test-path .\BuildWarningReportGenerator.ps1){
&nbsp; &nbsp;.\BuildWarningReportGenerator.ps1 -BuildLogPath &quot;&lt;path to your MS Build working dir&gt;\%BuildLogFile%&quot; -BuildCheckoutDirectoryPath &quot;&lt;path from script directory to build checkout directory&gt;\&quot; -BuildArtifactRepositoryUrl &quot;%teamcity.serverUrl%/repository/download/%system.teamcity.buildType.id%/&quot;
}
&nbsp;
# ** Requires two trailing lines to work correctly</pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">if(test-path .\BuildWarningReportGenerator.ps1){
   .\BuildWarningReportGenerator.ps1 -BuildLogPath "&lt;path to your MS Build working dir&gt;\%BuildLogFile%" -BuildCheckoutDirectoryPath "&lt;path from script directory to build checkout directory&gt;\" -BuildArtifactRepositoryUrl "%teamcity.serverUrl%/repository/download/%system.teamcity.buildType.id%/"
}

# ** Requires two trailing lines to work correctly</pre></div></div>

<pre>Mode: Put Script into PowerShell stdin with "-Command =" argument
Advanced Settings: &lt;input type="checkbox" checked&gt; Add -NoProfile argument</pre>
<p></p>
<h3>Report Tab</h3>
<p>To add a report tab with the warning information in TeamCity:</p>
<p><a href="/wp-content/uploads/2016/05/TeamCityWarnings_Report1.png"><img src="/wp-content/uploads/2016/05/TeamCityWarnings_Report1.png" alt="Add Report Tab" width="895" height="453" class="aligncenter size-full wp-image-4503" srcset="/wp-content/uploads/2016/05/TeamCityWarnings_Report1.png 895w, /wp-content/uploads/2016/05/TeamCityWarnings_Report1-300x151.png 300w" sizes="(max-width: 895px) 100vw, 895px" /></a></p>
<p>1. Open the Project and click &#8220;Edit Project Settings&#8221; and select the Report Tab<br />
2. Click the &#8220;Create new build report tab&#8221; button<br />
3. Enter settings and press Save</p>
<pre>Tab title: Build Warnings
Start page: .teamcity/BuildWarningReport.zip!BuildWarningReport.html</pre>
<p></p>
<h3>Chart</h3>
<p>You can add a chart to an individual build configuration via the UI, but you have to edit a TeamCity configuration if you want to add it to a Build Template or a Project. Mitch included the instructions for the config so we can do an edit once, apply many approach:</p>
<p>Edit config/projects/[your project folder]/pluginData/plugin-settings.xml, and merge in these settings:</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="xml"><thead><tr><td colspan="2"  class="head">XML</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
</pre></td><td class="de1"><pre class="de1"><span class="sc3"><span class="re1">&lt;settings<span class="re2">&gt;</span></span></span>
&nbsp; &nbsp; <span class="sc3"><span class="re1">&lt;buildtype-graphs<span class="re2">&gt;</span></span></span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="sc3"><span class="re1">&lt;graph</span> <span class="re0">title</span>=<span class="st0">&quot;Build Warnings&quot;</span> <span class="re0">defaultFilters</span>=<span class="st0">&quot;&quot;</span> <span class="re0">hideFilters</span>=<span class="st0">&quot;&quot;</span> <span class="re0">id</span>=<span class="st0">&quot;customGraph1&quot;</span> <span class="re0">seriesTitle</span>=<span class="st0">&quot;Serie&quot;</span><span class="re2">&gt;</span></span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="sc3"><span class="re1">&lt;valueType</span> <span class="re0">key</span>=<span class="st0">&quot;buildWarnings&quot;</span> <span class="re0">title</span>=<span class="st0">&quot;buildWarnings&quot;</span> <span class="re0">color</span>=<span class="st0">&quot;#ffcc00&quot;</span> <span class="re2">/&gt;</span></span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="sc3"><span class="re1">&lt;/graph<span class="re2">&gt;</span></span></span>
&nbsp; &nbsp; <span class="sc3"><span class="re1">&lt;/buildtype-graphs<span class="re2">&gt;</span></span></span>
<span class="sc3"><span class="re1">&lt;/settings<span class="re2">&gt;</span></span></span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">&lt;settings&gt;
	&lt;buildtype-graphs&gt;
		&lt;graph title="Build Warnings" defaultFilters="" hideFilters="" id="customGraph1" seriesTitle="Serie"&gt;
			&lt;valueType key="buildWarnings" title="buildWarnings" color="#ffcc00" /&gt;
		&lt;/graph&gt;
	&lt;/buildtype-graphs&gt;
&lt;/settings&gt;</pre></div></div>

<p></p>
<h3>Custom Metric</h3>
<p>Recording the warning count in a custom metric will enable you to create a custom build failure based on the warning count:</p>
<p>Edit config/main-config.xml, and merge in these settings</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="xml"><thead><tr><td colspan="2"  class="head">XML</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
</pre></td><td class="de1"><pre class="de1"><span class="sc3"><span class="re1">&lt;server<span class="re2">&gt;</span></span></span>
&nbsp; &nbsp; <span class="sc3"><span class="re1">&lt;build-metrics<span class="re2">&gt;</span></span></span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="sc3"><span class="re1">&lt;statisticValue</span> <span class="re0">key</span>=<span class="st0">&quot;buildWarnings&quot;</span> <span class="re0">description</span>=<span class="st0">&quot;number of build warnings&quot;</span><span class="re2">/&gt;</span></span>
&nbsp; &nbsp; <span class="sc3"><span class="re1">&lt;/build-metrics<span class="re2">&gt;</span></span></span>
<span class="sc3"><span class="re1">&lt;/server<span class="re2">&gt;</span></span></span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">&lt;server&gt;
	&lt;build-metrics&gt;
		&lt;statisticValue key="buildWarnings" description="number of build warnings"/&gt;
	&lt;/build-metrics&gt;
&lt;/server&gt;</pre></div></div>

<p></p>
<h2>Closing</h2>
<p>I wanted to thank Mitch again for sending back the improvements he made on the original. This is a level or two above my original post and I&#8217;m already applying some of the changes to my own builds.</p>
]]></content:encoded>
			<wfw:commentRss>/index.php/enterprisedev/application-lifecycle-management/improved-teamcity-net-build-warnings/feed/</wfw:commentRss>
		<slash:comments>5</slash:comments>
		</item>
		<item>
		<title>Access Git Commits during a TeamCity Build using Powershell</title>
		<link>/index.php/uncategorized/access-git-commits-during-a-teamcity-build-using-powershell/</link>
		<comments>/index.php/uncategorized/access-git-commits-during-a-teamcity-build-using-powershell/#respond</comments>
		<pubDate>Wed, 29 Oct 2014 19:13:12 +0000</pubDate>
		<dc:creator><![CDATA[Eli Weinstock-Herman (tarwn)]]></dc:creator>
				<category><![CDATA[Uncategorized]]></category>
		<category><![CDATA[build automation]]></category>
		<category><![CDATA[git]]></category>
		<category><![CDATA[powershell]]></category>
		<category><![CDATA[teamcity]]></category>

		<guid isPermaLink="false">/?p=3026</guid>
		<description><![CDATA[Recently I needed access to the list of commits that were included with each of my TeamCity builds. TeamCity provides a pretty big list of Predefined Build Parameters, but it doesn&#8217;t provide access to details of the commits it is currently building. Having Powershell and Git on my server, though, I can write some scripts [&#8230;]]]></description>
				<content:encoded><![CDATA[<p>Recently I needed access to the list of commits that were included with each of my TeamCity builds. TeamCity provides a pretty big list of <a href="https://confluence.jetbrains.com/display/TCD8/Predefined+Build+Parameters" title="TeamCity 8.x - Predefined Build Parameters">Predefined Build Parameters</a>, but it doesn&#8217;t provide access to details of the commits it is currently building. Having Powershell and Git on my server, though, I can write some scripts to extract not just information about the latest commit, but about any series of commits that have occurred.</p>
<h1>Extracting Usable Commit Details</h1>
<p>In this script, I am extracting just the list of authors, dates, and commit messages. I formatted the git log output so I could easily feed it into Powershell&#8217;s <a href="http://technet.microsoft.com/en-us/library/hh849900.aspx" title="MSDN - ConvertFrom-StringData">ConvertFrom-StringData</a> method to get an array of objects.</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="powershell"><thead><tr><td colspan="2"  class="head">PowerShell</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
</pre></td><td class="de1"><pre class="de1"><span class="kw3">function</span> Get<span class="sy0">-</span>CommitsFromGitLog<span class="br0">&#40;</span><span class="br0">&#91;</span><span class="re3">string</span><span class="br0">&#93;</span> <span class="re0">$StartCommit</span><span class="sy0">,</span> <span class="br0">&#91;</span><span class="re3">string</span><span class="br0">&#93;</span> <span class="re0">$EndCommit</span><span class="br0">&#41;</span><span class="br0">&#123;</span>
&nbsp; &nbsp; <span class="re0">$Cmd</span> <span class="sy0">=</span> <span class="st0">&quot;git log --pretty=format:&quot;</span><span class="st0">&quot;CommitHash=%H :: AuthorEmail=%ae :: AuthorDate=%ad :: Subject=%s&quot;</span><span class="st0">&quot; $StartCommit...$EndCommit&quot;</span>
&nbsp;
&nbsp; &nbsp; <span class="re0">$Result</span> <span class="sy0">=</span> <span class="kw1">Invoke-Expression</span> <span class="re0">$Cmd</span>
&nbsp; &nbsp; <span class="re0">$ParsedResult</span> <span class="sy0">=</span> <span class="re0">$Result</span> <span class="sy0">|</span> <span class="sy0">%</span><span class="br0">&#123;</span> ConvertFrom<span class="sy0">-</span>StringData<span class="br0">&#40;</span><span class="kw6">$_</span> <span class="kw4">-replace</span> <span class="st0">&quot; :: &quot;</span><span class="sy0">,</span> <span class="st0">&quot;<span class="es0">`n</span>&quot;</span><span class="br0">&#41;</span> &nbsp;<span class="br0">&#125;</span>
&nbsp;
&nbsp; &nbsp; <span class="kw3">return</span> <span class="re0">$ParsedResult</span>
<span class="br0">&#125;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">function Get-CommitsFromGitLog([string] $StartCommit, [string] $EndCommit){
    $Cmd = "git log --pretty=format:""CommitHash=%H :: AuthorEmail=%ae :: AuthorDate=%ad :: Subject=%s"" $StartCommit...$EndCommit"

    $Result = Invoke-Expression $Cmd
    $ParsedResult = $Result | %{ ConvertFrom-StringData($_ -replace " :: ", "`n")  }

    return $ParsedResult
}</pre></div></div>

<p>TeamCity defines a Build Parameter named <a href="https://confluence.jetbrains.com/display/TCD8/Predefined+Build+Parameters#PredefinedBuildParameters-ServerBuildProperties">build.vcs.number</a>, so we could use this script to get details about that specific commit like so:</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="powershell"><thead><tr><td colspan="2"  class="head">PowerShell</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
</pre></td><td class="de1"><pre class="de1">Get<span class="sy0">-</span>CommitsFromGitLog <span class="sy0">-</span>StartCommit <span class="st0">&quot;%build.vcs.number%^&quot;</span> <span class="sy0">-</span>EndCommit <span class="st0">&quot;%build.vcs.number%&quot;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">Get-CommitsFromGitLog -StartCommit "%build.vcs.number%^" -EndCommit "%build.vcs.number%"</pre></div></div>

<p>The net effect is that I&#8217;m asking for all changes starting one commit before the identified one (the ^ at the end) through that identified one. </p>
<p>Unfortunately, this is only the latest commit. Retrieving the details for a group of commits requires some additional work.</p>
<h1>Finding the Previous Commit Hash</h1>
<p>This is the tricky part. If TeamCity provided the build.vcs.number from the previous build, we would probably be using that. Though, realistically, if our build is successful and the prior one wasn&#8217;t, we would only be listing some of the changes being deployed. Really what we need is the build.vcs.number from the <em>last successful build</em>, which definitely isn&#8217;t built in.</p>
<p>However, TeamCity does have a <a href="https://confluence.jetbrains.com/display/TCD8/REST+API" title="TeamCity REST API">REST API</a> that exposes details about prior builds. There is also a built in service account we can use to access that API, and the credentials and URL are all available in the REST API. So we can implement some calls without the extra pain of accidentally breaking the build every time Joe the developer changes his password and forgets he had it in the script too.</p>
<p>The API exposes methods to access prior <a href="https://confluence.jetbrains.com/display/TCD8/REST+API#RESTAPI-BuildRequests" title="TeamCity 8.x - REST API - Build Requests">Build Requests</a>. For what we are doing, we want to get a build for a specific Build Type (the running build configuration) and in my case I want the last successful build, not just the last build. using the request for build by build type id, we would be looking for something like:</p>
<p><code>$($TeamCityUrl)/app/rest/buildTypes/id:$($TeamCityBuildTypeId)/builds/status:SUCCESS</code></p>
<p>Using <a href="http://technet.microsoft.com/en-us/library/hh849901.aspx" title="Powershell - Invoke-WebRequest">Invoke-WebRequest</a>, we can write a script that accesses that build information:</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="powershell"><thead><tr><td colspan="2"  class="head">PowerShell</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
</pre></td><td class="de1"><pre class="de1"><span class="kw3">function</span> Get<span class="sy0">-</span>TeamCityLastSuccessfulRun<span class="br0">&#40;</span><span class="br0">&#91;</span><span class="re3">string</span><span class="br0">&#93;</span> <span class="re0">$TeamCityUrl</span><span class="sy0">,</span> <span class="br0">&#91;</span><span class="re3">string</span><span class="br0">&#93;</span> <span class="re0">$TeamCityBuildTypeId</span><span class="sy0">,</span> 
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span class="br0">&#91;</span><span class="re3">string</span><span class="br0">&#93;</span> <span class="re0">$TeamCityUsername</span><span class="sy0">,</span> <span class="br0">&#91;</span><span class="re3">string</span><span class="br0">&#93;</span> <span class="re0">$TeamCityPassword</span><span class="br0">&#41;</span><span class="br0">&#123;</span>
&nbsp;
&nbsp; &nbsp; <span class="re0">$Credentials</span> <span class="sy0">=</span> <span class="st0">&quot;$($TeamCityUsername):$($TeamCityPassword)&quot;</span>
&nbsp; &nbsp; <span class="re0">$AuthString</span> <span class="sy0">=</span> <span class="br0">&#91;</span>System.Convert<span class="br0">&#93;</span>::ToBase64String<span class="br0">&#40;</span><span class="br0">&#91;</span>System.Text.Encoding<span class="br0">&#93;</span>::UTF8.GetBytes<span class="br0">&#40;</span><span class="st0">&quot;$Credentials&quot;</span><span class="br0">&#41;</span>
&nbsp;
&nbsp; &nbsp; <span class="re0">$Url</span> <span class="sy0">=</span> <span class="st0">&quot;$($TeamCityUrl)/app/rest/buildTypes/id:$($TeamCityBuildTypeId)/builds/status:SUCCESS&quot;</span> 
&nbsp;
&nbsp; &nbsp; <span class="re0">$Content</span> <span class="sy0">=</span> Invoke<span class="sy0">-</span>WebRequest <span class="st0">&quot;$Url&quot;</span> <span class="sy0">-</span>Headers <span class="sy0">@</span><span class="br0">&#123;</span><span class="st0">&quot;Authorization&quot;</span> <span class="sy0">=</span> <span class="st0">&quot;Basic $AuthString&quot;</span><span class="br0">&#41;</span><span class="br0">&#125;</span>
&nbsp;
&nbsp; &nbsp; <span class="kw3">return</span> <span class="re0">$Content</span>
<span class="br0">&#125;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">function Get-TeamCityLastSuccessfulRun([string] $TeamCityUrl, [string] $TeamCityBuildTypeId, 
                                       [string] $TeamCityUsername, [string] $TeamCityPassword){

    $Credentials = "$($TeamCityUsername):$($TeamCityPassword)"
    $AuthString = [System.Convert]::ToBase64String([System.Text.Encoding]::UTF8.GetBytes("$Credentials")

    $Url = "$($TeamCityUrl)/app/rest/buildTypes/id:$($TeamCityBuildTypeId)/builds/status:SUCCESS" 

    $Content = Invoke-WebRequest "$Url" -Headers @{"Authorization" = "Basic $AuthString")}

    return $Content
}</pre></div></div>

<p>Now I can combine some parameters from TeamCity, <a href="https://technet.microsoft.com/en-us/library/hh849968.aspx" title="Powershell - Select-Xml">Select-Xml</a>, and the first script to get a list of commit information since the last successful TeamCity run.</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="powershell"><thead><tr><td colspan="2"  class="head">PowerShell</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
</pre></td><td class="de1"><pre class="de1"><span class="re0">$Run</span> <span class="sy0">=</span> Get<span class="sy0">-</span>TeamCityLastSuccessfulRun <span class="sy0">-</span>TeamCityUrl <span class="st0">&quot;%teamcity.serverUrl%&quot;</span> 
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span class="sy0">-</span>TeamCityBuildTypeId <span class="st0">&quot;%system.teamcity.buildType.id%&quot;</span> 
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span class="sy0">-</span>TeamCityUsername <span class="st0">&quot;%system.teamcity.auth.userId%&quot;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span class="sy0">-</span>TeamCityPassword <span class="st0">&quot;%system.teamcity.auth.password%&quot;</span>
&nbsp;
<span class="re0">$LatestCommitFromRun</span> <span class="sy0">=</span> <span class="br0">&#40;</span>Select<span class="sy0">-</span>Xml <span class="sy0">-</span>Content <span class="st0">&quot;$Run&quot;</span> <span class="sy0">-</span>Xpath <span class="st0">&quot;/build/revisions/revision/@version&quot;</span><span class="br0">&#41;</span>.Node.Value
&nbsp;
<span class="re0">$CommitsSinceLastSuccess</span> <span class="sy0">=</span> Get<span class="sy0">-</span>CommitsFromGitLog <span class="sy0">-</span>StartCommit <span class="st0">&quot;$LatestCommitFromRun&quot;</span> 
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span class="sy0">-</span>EndCommit <span class="st0">&quot;%build.vcs.number%&quot;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">$Run = Get-TeamCityLastSuccessfulRun -TeamCityUrl "%teamcity.serverUrl%" 
                                     -TeamCityBuildTypeId "%system.teamcity.buildType.id%" 
                                     -TeamCityUsername "%system.teamcity.auth.userId%"
                                     -TeamCityPassword "%system.teamcity.auth.password%"

$LatestCommitFromRun = (Select-Xml -Content "$Run" -Xpath "/build/revisions/revision/@version").Node.Value

$CommitsSinceLastSuccess = Get-CommitsFromGitLog -StartCommit "$LatestCommitFromRun" 
                                                 -EndCommit "%build.vcs.number%"</pre></div></div>

<p>And there we have it, a cumulative list of authors and commits since the last successful build. You could use similar logic to pass in parameters to get the whole history since the last pinned build, a specific tag in the git repository, etc.</p>
<h1>What Can You Do With This?</h1>
<p>With those two functions, you now have the raw data about all commits that are being built/deployed with this build. You could use this data to automatically produce release notes, adding a basic HTML page to the product or website you are building. You could automatically append a list of contributors to a LATEST file with specifics about the build. If you have issue numbers or ticket numbers in the build, you could easily parse them out of the commit messages and output links in those documents. A richer contributors page is possible by outputting gravatar image tags using the authors emails addresses. Need auditability? Call a logging API with details about the commits, authors, and the URL back to the build in TeamCity.</p>
<p>The development team at <a href="https://precisionlender.com/">PrecisionLender</a> uses similar scripts as part of our automated deployment processes, specifically to help add audit information to our tickets so that every ticket reflects when it successfully passed through the automated tests and was later deployed to production. When an auditor asks for proof that N tickets went through our process correctly, we simply open up the ticket and point at the activity log attached to it, including those custom entries from TeamCity that link back to the relevant successful build results.</p>
]]></content:encoded>
			<wfw:commentRss>/index.php/uncategorized/access-git-commits-during-a-teamcity-build-using-powershell/feed/</wfw:commentRss>
		<slash:comments>0</slash:comments>
		</item>
		<item>
		<title>Displaying .Net Build Warnings in TeamCity</title>
		<link>/index.php/enterprisedev/application-lifecycle-management/displaying-net-build-warnings-in/</link>
		<comments>/index.php/enterprisedev/application-lifecycle-management/displaying-net-build-warnings-in/#comments</comments>
		<pubDate>Tue, 15 Jan 2013 13:41:00 +0000</pubDate>
		<dc:creator><![CDATA[Eli Weinstock-Herman (tarwn)]]></dc:creator>
				<category><![CDATA[Application Lifecycle Management]]></category>
		<category><![CDATA[.net]]></category>
		<category><![CDATA[continuous integration]]></category>
		<category><![CDATA[teamcity]]></category>

		<guid isPermaLink="false">/index.php/2013/01/displaying-net-build-warnings-in/</guid>
		<description><![CDATA[I like it when I kick off a build and there aren't any warnings. Unfortunately I'm forgetful and it's always easier to edit the code now then it is 3 months later (when I remember to look at the warnings).

This post will cover capturing MSBuild warnings in TeamCity and displayign the results in the dashboard, a custom chart, the build log, a raw text artifact, and a custom report tab in the run results.]]></description>
				<content:encoded><![CDATA[<p>I like it when I kick off a build and there aren&#8217;t any warnings. Unfortunately I&#8217;m forgetful and it&#8217;s always easier to edit the code now then it is 3 months later (when I remember to look at the warnings). When I put together <a href="http://wiki.lessthandot.com/index.php/Eli%27s_Continuous_Delivery_Project" title="Wiki writeup on my Continuous Delivery project">my sample Continuous Delivery project</a>, I was using Jenkins, which provided plugins for capturing warnings. It was nice to have visual feedback when I added a new warning, see how many were outstanding, have a list of outstanding warnings available on demand, and when I had a few minutes and fixed some of them, positive feedback by watching the warning chart slowly go down.</p>
<div style="background-color: #CCFFCC; border: 2px solid #BBEEBB; border-width: 2px 2px 2px 14px; margin: .5em; padding: .5em">
<strong>June 2016 Update:</strong> Good news! Mitch Terlisner took this original idea and improved on it, then shared those updates. You can see the updated version (using TeamCity 9) and instructions here: <a href="/index.php/enterprisedev/application-lifecycle-management/improved-teamcity-net-build-warnings/" title="Improved TeamCity .Net Build Warnings">Improved TeamCity .Net Build Warnings</a>
</div>
<p>When I switch modes and work in <a href="http://www.jetbrains.com/teamcity/" title="TeamCity by JetBrains">TeamCity</a>, I miss having that information available, with no extra steps from me. Despite several searches, though, I was never able to find a plugin that duplicated that behavior I liked in the Jenkins plugin. Turns out that TeamCity makes it pretty easy to roll your own, with just a little bit of powershell and some built-in features.</p>
<p>In this post I am going to cover capturing the warnings from an MSBuild build step, adding that warning count to the main dashboard, adding a statistics chart for the warning count over time, adding a condensed list to the end of the build log, adding the formatted list as a build artifact, and adding a custom report tab to report the warnings for each build. </p>
<p>Because who doesn&#8217;t need five different ways to see their warnings?</p>
<h2>Capturing the Build Warnings</h2>
<p>Since I am using MSBuild, the build warnings have a consistent pattern and MSBuild itself has an option to log out to a logger. We can add this attribute in either the build step or the Build Parameters. My preference is using the parameters of the build step in case I have multiple MSBuild calls in the build.</p>
<p>Parameter to add to MSBuild: <code class="codespan">/l:FileLogger,Microsoft.Build.Engine;logfile=%BuildLogFilename%</code></p>
<div style="text-align: center; font-size: 90%; color: #666666; margin: .5em">
<img src="http://tiernok.com/LTDBlog/TeamCityBuildWarnings/MSBuildParameter.png" alt="Adding the MS Build Parameter" style="border: 1px solid #666666;" /><br />
Adding the MS Build Parameter
</div>
<p>Each time MSBuild runs, it will log it&#8217;s output to the specified file. We can use powershell to extract the warnings from the output, like so:</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="text"><thead><tr><td colspan="2"  class="head">Text</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
</pre></td><td class="de1"><pre class="de1">Param(
&nbsp; &nbsp; [parameter(Mandatory=$true)]
&nbsp; &nbsp; [alias(&quot;f&quot;)]
&nbsp; &nbsp; $FilePath
)
&nbsp;
$warnings = @(Get-Content -ErrorAction Stop $FilePath | &nbsp; &nbsp; &nbsp; # Get the file content
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Where {$_ -match '^.*warning CS.*$'} | &nbsp; &nbsp; &nbsp; &nbsp;# Extract lines that match warnings
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; %{ $_.trim() -replace &quot;^s*d+&gt;&quot;,&quot;&quot; &nbsp;} | &nbsp; &nbsp; &nbsp;# Strip out any project number and caret prefixes
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; sort-object | Get-Unique -asString) &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; # remove duplicates by sorting and filtering for unique strings</pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">Param(
    [parameter(Mandatory=$true)]
    [alias("f")]
    $FilePath
)

$warnings = @(Get-Content -ErrorAction Stop $FilePath |       # Get the file content
                Where {$_ -match '^.*warning CS.*$'} |        # Extract lines that match warnings
                %{ $_.trim() -replace "^s*d+&gt;",""  } |      # Strip out any project number and caret prefixes
                sort-object | Get-Unique -asString)           # remove duplicates by sorting and filtering for unique strings</pre></div></div>

<p>Once we have the warnings extracted, we can move on to decide how we want them delivered. </p>
<p><i>Each section below will continue to add on to this script until it contains all the pieces we need to meet the display goals at the beginning.</i></p>
<h2>Condensed Warning List in Build Log</h2>
<p>The powershell script that is extracting warnings will need to run as a build step in the appropriate build configuration. This means that displaying a formatted list of warnings at the end of the build log is as simple as outputting that list from the powershell script we are building.</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="text"><thead><tr><td colspan="2"  class="head">Text</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
</pre></td><td class="de1"><pre class="de1">$count = $warnings.Count
Write-Host &quot;MSBuild Warnings - $count warnings ===================================================&quot;
$warnings | % { Write-Host &quot; * $_&quot; }</pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">$count = $warnings.Count
Write-Host "MSBuild Warnings - $count warnings ==================================================="
$warnings | % { Write-Host " * $_" }</pre></div></div>

<p>This will output a section at the bottom of the build log that contains our warnings, like so:</p>
<div style="text-align: center; font-size: 90%; color: #666666; margin: .5em">
<img src="http://tiernok.com/LTDBlog/TeamCityBuildWarnings/LogOutput.png" alt="Warnings in the Bottom of a Build Log" style="border: 1px solid #666666;" /><br />
Warnings in the Bottom of a Build Log
</div>
<p>Which I suppose is fine, but doesn&#8217;t really add that much value over the ones listed further up the log by MSBuild itself.</p>
<h2>Condensed Warning List in Archived Text File</h2>
<p>Now that I have formatted warnings, it&#8217;s pretty easy to create a file with those warnings and archive it. First I&#8217;ll update the script to take an output parameter and add some file output:</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="text"><thead><tr><td colspan="2"  class="head">Text</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
</pre></td><td class="de1"><pre class="de1">Param(
&nbsp; &nbsp; [parameter(Mandatory=$true)]
&nbsp; &nbsp; [alias(&quot;f&quot;)]
&nbsp; &nbsp; $FilePath,
&nbsp; &nbsp; [parameter()]
&nbsp; &nbsp; [alias(&quot;o&quot;)]
&nbsp; &nbsp; $RawOutputPath,
)
&nbsp;
# ...
&nbsp;
# file output
if($RawOutputPath){
&nbsp; &nbsp; $stream = [System.IO.StreamWriter] $RawOutputPath
&nbsp; &nbsp; $stream.WriteLine(&quot;Build Warnings&quot;)
&nbsp; &nbsp; $stream.WriteLine(&quot;====================================&quot;)
&nbsp; &nbsp; $stream.WriteLine(&quot;&quot;)
&nbsp; &nbsp; $warnings | % { $stream.WriteLine(&quot; * $_&quot;) }
&nbsp; &nbsp; $stream.Close()
}</pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">Param(
    [parameter(Mandatory=$true)]
    [alias("f")]
    $FilePath,
    [parameter()]
    [alias("o")]
    $RawOutputPath,
)

# ...

# file output
if($RawOutputPath){
    $stream = [System.IO.StreamWriter] $RawOutputPath
    $stream.WriteLine("Build Warnings")
    $stream.WriteLine("====================================")
    $stream.WriteLine("")
    $warnings | % { $stream.WriteLine(" * $_") }
    $stream.Close()
}</pre></div></div>

<p>Then I&#8217;ll configure the project to capture that output file as an artifact:</p>
<div style="text-align: center; font-size: 90%; color: #666666; margin: .5em">
<img src="http://tiernok.com/LTDBlog/TeamCityBuildWarnings/ArtifactConfig_RawOutput.png" alt="Artifact Configuration" style="border: 1px solid #666666;" /><br />
Artifact Configuration
</div>
<p>Et voila, the file shows up in my archived items:</p>
<div style="text-align: center; font-size: 90%; color: #666666; margin: .5em">
<img src="http://tiernok.com/LTDBlog/TeamCityBuildWarnings/Artifact_Display.png" alt="List of archived items from a run" style="border: 1px solid #666666;" /><br />
List of archived items from a run
</div>
<p>And I have a clean, archived list of my warnings:</p>
<div style="text-align: center; font-size: 90%; color: #666666; margin: .5em">
<img src="http://tiernok.com/LTDBlog/TeamCityBuildWarnings/Artifact_File.png" alt="Display of archived text file" style="border: 1px solid #666666;" /><br />
Display of archived text file
</div>
<p>But, really, we can do better.</p>
<h2>Warning count in build status</h2>
<p>Part of the goal was to be able to see the warning count change with no extra work, the best place I can think of to meet this is the final build status on each build.</p>
<p>Before:</p>
<div style="text-align: center; font-size: 90%; color: #666666; margin: .5em">
<img src="http://tiernok.com/LTDBlog/TeamCityBuildWarnings/BuildStatusBefore.png" alt="Build status on dashboard" style="border: 1px solid #666666;" /><br />
Build status on dashboard
</div>
<p>TeamCity provides support for <a href="http://confluence.jetbrains.net/display/TCD7/Build+Script+Interaction+with+TeamCity#BuildScriptInteractionwithTeamCity-ReportingBuildStatus" title="TeamCity documentation for Build Script Interaction">setting the build status from a build script</a>. By adding some output to the powershell script, like so:</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="text"><thead><tr><td colspan="2"  class="head">Text</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
</pre></td><td class="de1"><pre class="de1">#TeamCity output
Write-Host &quot;##teamcity[buildStatus text='{build.status.text}, Build warnings: $count']&quot;</pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">#TeamCity output
Write-Host "##teamcity[buildStatus text='{build.status.text}, Build warnings: $count']"</pre></div></div>

<p>Each successful build will also display the number of warnings that were captured.</p>
<div style="text-align: center; font-size: 90%; color: #666666; margin: .5em">
<img src="http://tiernok.com/LTDBlog/TeamCityBuildWarnings/BuildStatusAfter.png" alt="Build status on dashboard, with warnings" style="border: 1px solid #666666;" /><br />
Build status on dashboard, with warnings
</div>
<p>Better, but what about historical values? And I still don&#8217;t like that text file artifact.</p>
<h2>Warning Count as a Custom Chart</h2>
<p>TeamCity also provides the ability to add custom charts based on either built-in or <a href="http://confluence.jetbrains.net/display/TCD7/Build+Script+Interaction+with+TeamCity#BuildScriptInteractionwithTeamCity-ReportingBuildStatistics" title="TeamCity documentation - reporting custom statistics">custom statistics</a>. Custom statistics are reported similar to the build status output above:</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="text"><thead><tr><td colspan="2"  class="head">Text</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
</pre></td><td class="de1"><pre class="de1">Write-Host &quot;##teamcity[buildStatisticValue key='buildWarnings' value='$count']&quot;</pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">Write-Host "##teamcity[buildStatisticValue key='buildWarnings' value='$count']"</pre></div></div>

<p>Adding a <a href="http://confluence.jetbrains.net/display/TCD7/Custom+Chart" title="TeamCity documentation - Custom Statistics Charts">custom chart</a> requires us to dig into the configurations of TeamCity. I&#8217;m going to add a chart that will be displayed for any build that provides the warning count number above, so I&#8217;ll open the <code class="codespan">[teamCity data dir]/config/main-config.xml</code> file and add the following section:</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="text"><thead><tr><td colspan="2"  class="head">Text</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
</pre></td><td class="de1"><pre class="de1">&lt;graph title=&quot;Build Warnings&quot; hideFilters=&quot;showFailed&quot; seriesTitle=&quot;Warning&quot; format=&quot;&quot;&gt;
&nbsp; &nbsp; &lt;valueType key=&quot;buildWarnings&quot; title=&quot;Warnings&quot;/&gt;
&lt;/graph&gt;</pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">&lt;graph title="Build Warnings" hideFilters="showFailed" seriesTitle="Warning" format=""&gt;
    &lt;valueType key="buildWarnings" title="Warnings"/&gt;
&lt;/graph&gt;</pre></div></div>

<p>This will add a chart to the Statistics tab of the build. After a few builds this is what I have:</p>
<div style="text-align: center; font-size: 90%; color: #666666; margin: .5em">
<img src="http://tiernok.com/LTDBlog/TeamCityBuildWarnings/WarningChart.png" alt="Build Warning Statistics" style="border: 1px solid #666666;" /><br />
Build Warning Statistics
</div>
<p>It probably would look better if I hadn&#8217;t built with the same number of warnings each time, but you get the point. The mouse hover works just like the built-in charts, linking to the run status for the individual point.</p>
<p>Ok, getting better, but I think we can take it one step further. </p>
<h2>Adding a Custom Build Warnings Tab</h2>
<p>So far we have improved methods of seeing the warning count and watching how it changes over time, but the actual list still leaves something to be desired. Luckily, TeamCity supports <a href="http://confluence.jetbrains.net/display/TCD3/Including+Third-Party+Reports+in+the+Build+Results#IncludingThird-PartyReportsintheBuildResults-Tabs" title="TeamCity documentation: Including third-party reports as the build-results tabs">custom report tabs</a> in the Build Results. This gives us an easily accessible place to put the warnings and, since it uses HTML, better formatting options than the text file.</p>
<p>First I need to update the powershell script to output the HTML file. TeamCity will be picking up an entire folder for the report tab, so I could add some external CSS or image files for my report, but I&#8217;ll leave that for another day.</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="text"><thead><tr><td colspan="2"  class="head">Text</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
</pre></td><td class="de1"><pre class="de1"># html report output
$check = Test-Path -PathType Container BuildWarningReport
if($check -eq $false){
&nbsp; &nbsp; New-Item 'BuildWarningReport' -type Directory
}
$stream = [System.IO.StreamWriter] &quot;BuildWarningReport/index.html&quot;
$stream.WriteLine(&quot;&lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body&gt;&lt;h1&gt;$count Build Warnings&lt;/h1&gt;&quot;)
$stream.WriteLine(&quot;&lt;ul&gt;&quot;)
$warnings | % { $stream.WriteLine(&quot;&lt;li&gt;$_&lt;/li&gt;&quot;) }
$stream.WriteLine(&quot;&lt;/ul&gt;&quot;)
$stream.WriteLine(&quot;&lt;/body&gt;&lt;/html&gt;&quot;)
$stream.Close()</pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse"># html report output
$check = Test-Path -PathType Container BuildWarningReport
if($check -eq $false){
    New-Item 'BuildWarningReport' -type Directory
}
$stream = [System.IO.StreamWriter] "BuildWarningReport/index.html"
$stream.WriteLine("&lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body&gt;&lt;h1&gt;$count Build Warnings&lt;/h1&gt;")
$stream.WriteLine("&lt;ul&gt;")
$warnings | % { $stream.WriteLine("&lt;li&gt;$_&lt;/li&gt;") }
$stream.WriteLine("&lt;/ul&gt;")
$stream.WriteLine("&lt;/body&gt;&lt;/html&gt;")
$stream.Close()</pre></div></div>

<p>I&#8217;ve added HTML output to the script with a hardcoded output location that ensures the report directory exists before writing the index.html page. I&#8217;ve hardcoded this value to reduce the amount of thinking &#8216;ll need to do as I add this to other projects (keeps it consistent from output name to artifact setting to report tab configuration).</p>
<p>The next step is to configure the project to capture the folder as an artifact:</p>
<div style="text-align: center; font-size: 90%; color: #666666; margin: .5em">
<img src="http://tiernok.com/LTDBlog/TeamCityBuildWarnings/ArtifactConfig_Report.png" alt="Artifact configuration" style="border: 1px solid #666666;" /><br />
Artifact configuration
</div>
<p>Then the last step is to modify the TeamCity configuration to recognize that when I output archives like that, I want to treat them as a report. To do this I add the following chunk of XML to my <code class="codespan">[TeamCity data directory]/config/main-config.xml</code> file (per the documentation link above):</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="text"><thead><tr><td colspan="2"  class="head">Text</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
</pre></td><td class="de1"><pre class="de1">&nbsp; &lt;report-tab title=&quot;Build Warnings&quot; basePath=&quot;BuildWarningReport&quot; startPage=&quot;index.html&quot; /&gt;</pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">  &lt;report-tab title="Build Warnings" basePath="BuildWarningReport" startPage="index.html" /&gt;</pre></div></div>

<p>And there we go, the custom report tab is available in the build results:</p>
<div style="text-align: center; font-size: 90%; color: #666666; margin: .5em">
<img src="http://tiernok.com/LTDBlog/TeamCityBuildWarnings/WarningsTab.png" alt="Build Warnings tab in Run Results" style="border: 1px solid #666666;" /><br />
Build Warnings tab in Run Results
</div>
<p>Which takes us from no visibility into our warnings, to five different methods of viewing the information.</p>
<h2>Wrap-up</h2>
<p>From having to Ctrl+F through the build log all the way to plugin-level output in a few easy steps. After setting this up one time, the only pieces that needed to be repeated for additional builds are the addition of the /logger parameter for MSBuild and the powershell build step to extract the results, and capturing the artifact for the HTML page. All of the output is either built in to the script or applies to the whole server and is displayed whenever the statistics or archive are present in a build.</p>
<p>Here is the finished script:</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="text"><thead><tr><td colspan="2"  class="head">Text</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
</pre></td><td class="de1"><pre class="de1">Param(
&nbsp; &nbsp; [parameter(Mandatory=$true)]
&nbsp; &nbsp; [alias(&quot;f&quot;)]
&nbsp; &nbsp; $FilePath,
&nbsp; &nbsp; [parameter()]
&nbsp; &nbsp; [alias(&quot;o&quot;)]
&nbsp; &nbsp; $RawOutputPath
)
&nbsp;
$warnings = @(Get-Content -ErrorAction Stop $FilePath | &nbsp; &nbsp; &nbsp; # Get the file content
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Where {$_ -match '^.*warning CS.*$'} | &nbsp; &nbsp; &nbsp; &nbsp;# Extract lines that match warnings
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; %{ $_.trim() -replace &quot;^s*d+&gt;&quot;,&quot;&quot; &nbsp;} | &nbsp; &nbsp; &nbsp;# Strip out any project number and caret prefixes
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; sort-object | Get-Unique -asString) &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; # remove duplicates by sorting and filtering for unique strings
&nbsp;
$count = $warnings.Count
&nbsp;
# raw output
Write-Host &quot;MSBuild Warnings - $count warnings ===================================================&quot;
$warnings | % { Write-Host &quot; * $_&quot; }
&nbsp;
#TeamCity output
Write-Host &quot;##teamcity[buildStatus text='{build.status.text}, Build warnings: $count']&quot;
Write-Host &quot;##teamcity[buildStatisticValue key='buildWarnings' value='$count']&quot;
&nbsp;
# file output
if($RawOutputPath){
&nbsp; &nbsp; $stream = [System.IO.StreamWriter] $RawOutputPath
&nbsp; &nbsp; $stream.WriteLine(&quot;Build Warnings&quot;)
&nbsp; &nbsp; $stream.WriteLine(&quot;====================================&quot;)
&nbsp; &nbsp; $stream.WriteLine(&quot;&quot;)
&nbsp; &nbsp; $warnings | % { $stream.WriteLine(&quot; * $_&quot;) }
&nbsp; &nbsp; $stream.Close()
}
&nbsp;
# html report output
$check = Test-Path -PathType Container BuildWarningReport
if($check -eq $false){
&nbsp; &nbsp; New-Item 'BuildWarningReport' -type Directory
}
$stream = [System.IO.StreamWriter] &quot;BuildWarningReport/index.html&quot;
$stream.WriteLine(&quot;&lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body&gt;&lt;h1&gt;$count Build Warnings&lt;/h1&gt;&quot;)
$stream.WriteLine(&quot;&lt;ul&gt;&quot;)
$warnings | % { $stream.WriteLine(&quot;&lt;li&gt;$_&lt;/li&gt;&quot;) }
$stream.WriteLine(&quot;&lt;/ul&gt;&quot;)
$stream.WriteLine(&quot;&lt;/body&gt;&lt;/html&gt;&quot;)
$stream.Close()</pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">Param(
    [parameter(Mandatory=$true)]
    [alias("f")]
    $FilePath,
    [parameter()]
    [alias("o")]
    $RawOutputPath
)

$warnings = @(Get-Content -ErrorAction Stop $FilePath |       # Get the file content
                Where {$_ -match '^.*warning CS.*$'} |        # Extract lines that match warnings
                %{ $_.trim() -replace "^s*d+&gt;",""  } |      # Strip out any project number and caret prefixes
                sort-object | Get-Unique -asString)           # remove duplicates by sorting and filtering for unique strings

$count = $warnings.Count

# raw output
Write-Host "MSBuild Warnings - $count warnings ==================================================="
$warnings | % { Write-Host " * $_" }

#TeamCity output
Write-Host "##teamcity[buildStatus text='{build.status.text}, Build warnings: $count']"
Write-Host "##teamcity[buildStatisticValue key='buildWarnings' value='$count']"

# file output
if($RawOutputPath){
    $stream = [System.IO.StreamWriter] $RawOutputPath
    $stream.WriteLine("Build Warnings")
    $stream.WriteLine("====================================")
    $stream.WriteLine("")
    $warnings | % { $stream.WriteLine(" * $_") }
    $stream.Close()
}

# html report output
$check = Test-Path -PathType Container BuildWarningReport
if($check -eq $false){
    New-Item 'BuildWarningReport' -type Directory
}
$stream = [System.IO.StreamWriter] "BuildWarningReport/index.html"
$stream.WriteLine("&lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body&gt;&lt;h1&gt;$count Build Warnings&lt;/h1&gt;")
$stream.WriteLine("&lt;ul&gt;")
$warnings | % { $stream.WriteLine("&lt;li&gt;$_&lt;/li&gt;") }
$stream.WriteLine("&lt;/ul&gt;")
$stream.WriteLine("&lt;/body&gt;&lt;/html&gt;")
$stream.Close()</pre></div></div>

<p>To recap, we started with some warning messages randomly scattered across the build log. We ended with the warning count automatically showing in the build status on the dashboard, a nice chart of the number over time, and three different ways to view the detailed list. I hope this proves useful to others as well, now I have to go and fix the sample warnings I added before I forget about them. <img src="https://s.w.org/images/core/emoji/2/72x72/1f642.png" alt="🙂" class="wp-smiley" style="height: 1em; max-height: 1em;" /></p>
]]></content:encoded>
			<wfw:commentRss>/index.php/enterprisedev/application-lifecycle-management/displaying-net-build-warnings-in/feed/</wfw:commentRss>
		<slash:comments>4</slash:comments>
		</item>
		<item>
		<title>Custom Charts in TeamCity</title>
		<link>/index.php/enterprisedev/application-lifecycle-management/custom-charts-in-teamcity/</link>
		<comments>/index.php/enterprisedev/application-lifecycle-management/custom-charts-in-teamcity/#respond</comments>
		<pubDate>Fri, 21 Sep 2012 11:23:00 +0000</pubDate>
		<dc:creator><![CDATA[Eli Weinstock-Herman (tarwn)]]></dc:creator>
				<category><![CDATA[Application Lifecycle Management]]></category>
		<category><![CDATA[continuous delivery]]></category>
		<category><![CDATA[mvc music store]]></category>
		<category><![CDATA[teamcity]]></category>

		<guid isPermaLink="false">/index.php/2012/09/custom-charts-in-teamcity/</guid>
		<description><![CDATA[While re-implementing my continuous delivery pipeline in TeamCity last week, I skipped over charting the load tests results from WCAT. This weekend I returned to this task to find that it was less tricky than it originally appeared.]]></description>
				<content:encoded><![CDATA[<p>While re-implementing my continuous delivery pipeline in TeamCity <a href="/index.php/EnterpriseDev/application-lifecycle-management/continuous-delivery-with-teamcity" title="Continuous Delivery with TeamCity" target="_blank">last week</a>, I skipped over charting the load tests results from WCAT. This weekend I returned to this task to find that it was less tricky than it originally appeared.</p>
<h2>How it works</h2>
<p>TeamCity has project and build level custom charting that is driven by settings files. These files and the format of the necessary chart definition are <a href="http://confluence.jetbrains.net/display/TCD7/Custom+Chart" title="Custom Charts on TeamCity 7" target="_blank">documented</a>. The actual graph XML is pretty straightforward and easy to implement. The files refer to values that are provided by TeamCity (listed on that page), via a special file you drop during your build (<a href="http://confluence.jetbrains.net/display/TCD7/Build+Script+Interaction+with+TeamCity#BuildScriptInteractionwithTeamCity-provideStatsUsingFile" title="teamcity-info.xml Details" target="_blank">teamcity-info.xml</a>), or via <a href="http://confluence.jetbrains.net/display/TCD7/Build+Script+Interaction+with+TeamCity#BuildScriptInteractionwithTeamCity-ReportingBuildStatistics" title="Service Message Details" target="_blank">service messages</a>.</p>
<h2>Graph Definitions</h2>
<p>In the Jenkins build I had graphed the following data from the WCAT run:</p>
<ul>
<li>Rate Graph &#8211; Transactions Per Second, Requests Per Second</li>
<li>Totals Graph &#8211; Total Transaction count, Total Request count, Total Error count</li>
<li>Response Time to Last Byte Graph &#8211; Minimum, Average, 95th Percentile, 99th Percentile, Maximum</li>
</ul>
<p>To match this in TeamCity I created the project-wide graph settings like so:</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="xml"><thead><tr><td colspan="2"  class="head">XML</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
</pre></td><td class="de1"><pre class="de1"><span class="sc3"><span class="re1">&lt;?xml</span> <span class="re0">version</span>=<span class="st0">&quot;1.0&quot;</span> <span class="re0">encoding</span>=<span class="st0">&quot;UTF-8&quot;</span><span class="re2">?&gt;</span></span>
<span class="sc3"><span class="re1">&lt;settings<span class="re2">&gt;</span></span></span>
&nbsp; <span class="sc3"><span class="re1">&lt;custom-graphs<span class="re2">&gt;</span></span></span>
&nbsp; &nbsp;<span class="sc3"><span class="re1">&lt;graph</span> <span class="re0">title</span>=<span class="st0">&quot;Rate&quot;</span> <span class="re0">hideFilters</span>=<span class="st0">&quot;showFailed&quot;</span> <span class="re0">seriesTitle</span>=<span class="st0">&quot;some key&quot;</span> <span class="re0">format</span>=<span class="st0">&quot;&quot;</span><span class="re2">&gt;</span></span>
&nbsp; &nbsp; &nbsp; <span class="sc3"><span class="re1">&lt;valueType</span> <span class="re0">key</span>=<span class="st0">&quot;TransactionsPerSecond&quot;</span> <span class="re0">title</span>=<span class="st0">&quot;Transactions/s&quot;</span> <span class="re0">buildTypeId</span>=<span class="st0">&quot;bt4&quot;</span><span class="re2">/&gt;</span></span>
&nbsp; &nbsp; &nbsp; <span class="sc3"><span class="re1">&lt;valueType</span> <span class="re0">key</span>=<span class="st0">&quot;RequestsPerSecond&quot;</span> <span class="re0">title</span>=<span class="st0">&quot;Requests/s&quot;</span> <span class="re0">buildTypeId</span>=<span class="st0">&quot;bt4&quot;</span><span class="re2">/&gt;</span></span>
&nbsp; &nbsp; <span class="sc3"><span class="re1">&lt;/graph<span class="re2">&gt;</span></span></span>
&nbsp; &nbsp;<span class="sc3"><span class="re1">&lt;graph</span> <span class="re0">title</span>=<span class="st0">&quot;Totals&quot;</span> <span class="re0">hideFilters</span>=<span class="st0">&quot;showFailed&quot;</span> <span class="re0">seriesTitle</span>=<span class="st0">&quot;some key&quot;</span> <span class="re0">format</span>=<span class="st0">&quot;&quot;</span><span class="re2">&gt;</span></span>
&nbsp; &nbsp; &nbsp; <span class="sc3"><span class="re1">&lt;valueType</span> <span class="re0">key</span>=<span class="st0">&quot;TotalTransactions&quot;</span> <span class="re0">title</span>=<span class="st0">&quot;Total Transactions&quot;</span> <span class="re0">buildTypeId</span>=<span class="st0">&quot;bt4&quot;</span><span class="re2">/&gt;</span></span>
&nbsp; &nbsp; &nbsp; <span class="sc3"><span class="re1">&lt;valueType</span> <span class="re0">key</span>=<span class="st0">&quot;TotalRequests&quot;</span> <span class="re0">title</span>=<span class="st0">&quot;Total Requests&quot;</span> <span class="re0">buildTypeId</span>=<span class="st0">&quot;bt4&quot;</span><span class="re2">/&gt;</span></span>
&nbsp; &nbsp; &nbsp; <span class="sc3"><span class="re1">&lt;valueType</span> <span class="re0">key</span>=<span class="st0">&quot;TotalErrors&quot;</span> <span class="re0">title</span>=<span class="st0">&quot;Total Errors&quot;</span> <span class="re0">buildTypeId</span>=<span class="st0">&quot;bt4&quot;</span><span class="re2">/&gt;</span></span>
&nbsp; &nbsp; <span class="sc3"><span class="re1">&lt;/graph<span class="re2">&gt;</span></span></span>
&nbsp; &nbsp;<span class="sc3"><span class="re1">&lt;graph</span> <span class="re0">title</span>=<span class="st0">&quot;Response Time (to Last Byte)&quot;</span> <span class="re0">hideFilters</span>=<span class="st0">&quot;showFailed&quot;</span> <span class="re0">seriesTitle</span>=<span class="st0">&quot;some key&quot;</span> <span class="re0">format</span>=<span class="st0">&quot;duration&quot;</span><span class="re2">&gt;</span></span>
&nbsp; &nbsp; &nbsp; <span class="sc3"><span class="re1">&lt;valueType</span> <span class="re0">key</span>=<span class="st0">&quot;ResponseTimeAverage&quot;</span> <span class="re0">title</span>=<span class="st0">&quot;Average&quot;</span> <span class="re0">buildTypeId</span>=<span class="st0">&quot;bt4&quot;</span><span class="re2">/&gt;</span></span>
&nbsp; &nbsp; &nbsp; <span class="sc3"><span class="re1">&lt;valueType</span> <span class="re0">key</span>=<span class="st0">&quot;ResponseTimeMinimum&quot;</span> <span class="re0">title</span>=<span class="st0">&quot;Minimum&quot;</span> <span class="re0">buildTypeId</span>=<span class="st0">&quot;bt4&quot;</span><span class="re2">/&gt;</span></span>
&nbsp; &nbsp; &nbsp; <span class="sc3"><span class="re1">&lt;valueType</span> <span class="re0">key</span>=<span class="st0">&quot;ResponseTimeNinetyFivePercent&quot;</span> <span class="re0">title</span>=<span class="st0">&quot;Ninety Fifth Percent&quot;</span> <span class="re0">buildTypeId</span>=<span class="st0">&quot;bt4&quot;</span><span class="re2">/&gt;</span></span>
&nbsp; &nbsp; &nbsp; <span class="sc3"><span class="re1">&lt;valueType</span> <span class="re0">key</span>=<span class="st0">&quot;ResponseTimeNinetyNinePercent&quot;</span> <span class="re0">title</span>=<span class="st0">&quot;Ninety Nineth Percent&quot;</span> <span class="re0">buildTypeId</span>=<span class="st0">&quot;bt4&quot;</span><span class="re2">/&gt;</span></span>
&nbsp; &nbsp; &nbsp; <span class="sc3"><span class="re1">&lt;valueType</span> <span class="re0">key</span>=<span class="st0">&quot;ResponseTimeMaximum&quot;</span> <span class="re0">title</span>=<span class="st0">&quot;Maximum&quot;</span> <span class="re0">buildTypeId</span>=<span class="st0">&quot;bt4&quot;</span><span class="re2">/&gt;</span></span>
&nbsp; &nbsp; <span class="sc3"><span class="re1">&lt;/graph<span class="re2">&gt;</span></span></span>
&nbsp; <span class="sc3"><span class="re1">&lt;/custom-graphs<span class="re2">&gt;</span></span></span>
<span class="sc3"><span class="re1">&lt;/settings<span class="re2">&gt;</span></span></span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;settings&gt;
  &lt;custom-graphs&gt;
   &lt;graph title="Rate" hideFilters="showFailed" seriesTitle="some key" format=""&gt;
      &lt;valueType key="TransactionsPerSecond" title="Transactions/s" buildTypeId="bt4"/&gt;
      &lt;valueType key="RequestsPerSecond" title="Requests/s" buildTypeId="bt4"/&gt;
    &lt;/graph&gt;
   &lt;graph title="Totals" hideFilters="showFailed" seriesTitle="some key" format=""&gt;
      &lt;valueType key="TotalTransactions" title="Total Transactions" buildTypeId="bt4"/&gt;
      &lt;valueType key="TotalRequests" title="Total Requests" buildTypeId="bt4"/&gt;
      &lt;valueType key="TotalErrors" title="Total Errors" buildTypeId="bt4"/&gt;
    &lt;/graph&gt;
   &lt;graph title="Response Time (to Last Byte)" hideFilters="showFailed" seriesTitle="some key" format="duration"&gt;
      &lt;valueType key="ResponseTimeAverage" title="Average" buildTypeId="bt4"/&gt;
      &lt;valueType key="ResponseTimeMinimum" title="Minimum" buildTypeId="bt4"/&gt;
      &lt;valueType key="ResponseTimeNinetyFivePercent" title="Ninety Fifth Percent" buildTypeId="bt4"/&gt;
      &lt;valueType key="ResponseTimeNinetyNinePercent" title="Ninety Nineth Percent" buildTypeId="bt4"/&gt;
      &lt;valueType key="ResponseTimeMaximum" title="Maximum" buildTypeId="bt4"/&gt;
    &lt;/graph&gt;
  &lt;/custom-graphs&gt;
&lt;/settings&gt;</pre></div></div>

<p>Besides the key in each valueType tag, I also include a buildTypeid that is the internal build ID for my automated load test build. I found this in the address bar after clicking the build&#8217;s link on the dashboard:</p>
<div style="text-align: center; font-size: 90%; color: #666666;">
	<img src="http://tiernok.com/LTDBlog/ContinuousDelivery/TeamCityCharts_link.png" alt="TeamCity - Build URL" /><br />
	Team City &#8211; Build URL
</div>
<h2>Defining the Data</h2>
<p>Once I have the definitions roughly the way I want them, I need to make the data available from the WCAT run. WCAT already produces it&#8217;s results in XML and for Jenkins I created an XSL to transform the results into a new XML file that would be easier to plot in Jenkins. For TeamCity I&#8217;ll do the same, but this time I decided to use powershell to execute the transformation.</p>
<p>The WCAT results take some work to decode, as they are stored in XML that is halfway to presentation format. Luckily I have already done this once, so creating a new XSL is fairly easy:</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="xml"><thead><tr><td colspan="2"  class="head">XML</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
</pre></td><td class="de1"><pre class="de1"><span class="sc3"><span class="re1">&lt;xsl:stylesheet</span> <span class="re0">xmlns:xsl</span>=<span class="st0">&quot;http://www.w3.org/1999/XSL/Transform&quot;</span> <span class="re0">version</span>=<span class="st0">&quot;1.0&quot;</span><span class="re2">&gt;</span></span>
<span class="sc3"><span class="re1">&lt;xsl:template</span> <span class="re0">match</span>=<span class="st0">&quot;/&quot;</span><span class="re2">&gt;</span></span>
&nbsp; &nbsp; <span class="sc3"><span class="re1">&lt;build<span class="re2">&gt;</span></span></span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="sc3"><span class="re1">&lt;statisticValue</span> <span class="re0">key</span>=<span class="st0">&quot;TransactionsPerSecond&quot;</span><span class="re2">&gt;</span></span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="sc3"><span class="re1">&lt;xsl:attribute</span> <span class="re0">name</span>=<span class="st0">&quot;value&quot;</span><span class="re2">&gt;</span><span class="re1">&lt;xsl:value-of</span> <span class="re0">select</span>=<span class="st0">'//section[@name=&quot;summary&quot;]/table[@name=&quot;summarydata&quot;]/item/data[@name=&quot;tps&quot;]'</span> <span class="re2">/&gt;</span><span class="re1">&lt;/xsl:attribute<span class="re2">&gt;</span></span></span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="sc3"><span class="re1">&lt;/statisticValue<span class="re2">&gt;</span></span></span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="sc3"><span class="re1">&lt;statisticValue</span> <span class="re0">key</span>=<span class="st0">&quot;RequestsPerSecond&quot;</span><span class="re2">&gt;</span></span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="sc3"><span class="re1">&lt;xsl:attribute</span> <span class="re0">name</span>=<span class="st0">&quot;value&quot;</span><span class="re2">&gt;</span><span class="re1">&lt;xsl:value-of</span> <span class="re0">select</span>=<span class="st0">'//section[@name=&quot;summary&quot;]/table[@name=&quot;summarydata&quot;]/item/data[@name=&quot;rps&quot;]'</span> <span class="re2">/&gt;</span><span class="re1">&lt;/xsl:attribute<span class="re2">&gt;</span></span></span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="sc3"><span class="re1">&lt;/statisticValue<span class="re2">&gt;</span></span></span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="sc3"><span class="re1">&lt;statisticValue</span> <span class="re0">key</span>=<span class="st0">&quot;TotalTransactions&quot;</span><span class="re2">&gt;</span></span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="sc3"><span class="re1">&lt;xsl:attribute</span> <span class="re0">name</span>=<span class="st0">&quot;value&quot;</span><span class="re2">&gt;</span><span class="re1">&lt;xsl:value-of</span> <span class="re0">select</span>=<span class="st0">'//section[@name=&quot;details&quot;]/table[@name=&quot;requeststats&quot;]/item[1]/data[@name=&quot;transactions&quot;]'</span> <span class="re2">/&gt;</span><span class="re1">&lt;/xsl:attribute<span class="re2">&gt;</span></span></span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="sc3"><span class="re1">&lt;/statisticValue<span class="re2">&gt;</span></span></span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="sc3"><span class="re1">&lt;statisticValue</span> <span class="re0">key</span>=<span class="st0">&quot;TotalRequests&quot;</span><span class="re2">&gt;</span></span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="sc3"><span class="re1">&lt;xsl:attribute</span> <span class="re0">name</span>=<span class="st0">&quot;value&quot;</span><span class="re2">&gt;</span><span class="re1">&lt;xsl:value-of</span> <span class="re0">select</span>=<span class="st0">'//section[@name=&quot;details&quot;]/table[@name=&quot;requeststats&quot;]/item[1]/data[@name=&quot;requests&quot;]'</span> <span class="re2">/&gt;</span><span class="re1">&lt;/xsl:attribute<span class="re2">&gt;</span></span></span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="sc3"><span class="re1">&lt;/statisticValue<span class="re2">&gt;</span></span></span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="sc3"><span class="re1">&lt;statisticValue</span> <span class="re0">key</span>=<span class="st0">&quot;TotalErrors&quot;</span><span class="re2">&gt;</span></span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="sc3"><span class="re1">&lt;xsl:attribute</span> <span class="re0">name</span>=<span class="st0">&quot;value&quot;</span><span class="re2">&gt;</span><span class="re1">&lt;xsl:value-of</span> <span class="re0">select</span>=<span class="st0">'//section[@name=&quot;summary&quot;]/table[@name=&quot;summarydata&quot;]/item/data[@name=&quot;terrors&quot;]'</span> <span class="re2">/&gt;</span><span class="re1">&lt;/xsl:attribute<span class="re2">&gt;</span></span></span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="sc3"><span class="re1">&lt;/statisticValue<span class="re2">&gt;</span></span></span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="sc3"><span class="re1">&lt;statisticValue</span> <span class="re0">key</span>=<span class="st0">&quot;ResponseTimeAverage&quot;</span><span class="re2">&gt;</span></span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="sc3"><span class="re1">&lt;xsl:attribute</span> <span class="re0">name</span>=<span class="st0">&quot;value&quot;</span><span class="re2">&gt;</span><span class="re1">&lt;xsl:value-of</span> <span class="re0">select</span>=<span class="st0">'//section[@name=&quot;details&quot;]/table[@name=&quot;histogram&quot;]/item[2]/data[@name=&quot;response_time_avg&quot;]'</span> <span class="re2">/&gt;</span><span class="re1">&lt;/xsl:attribute<span class="re2">&gt;</span></span></span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="sc3"><span class="re1">&lt;/statisticValue<span class="re2">&gt;</span></span></span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="sc3"><span class="re1">&lt;statisticValue</span> <span class="re0">key</span>=<span class="st0">&quot;ResponseTimeMinimum&quot;</span><span class="re2">&gt;</span></span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="sc3"><span class="re1">&lt;xsl:attribute</span> <span class="re0">name</span>=<span class="st0">&quot;value&quot;</span><span class="re2">&gt;</span><span class="re1">&lt;xsl:value-of</span> <span class="re0">select</span>=<span class="st0">'//section[@name=&quot;details&quot;]/table[@name=&quot;histogram&quot;]/item[2]/data[@name=&quot;response_time_min&quot;]'</span> <span class="re2">/&gt;</span><span class="re1">&lt;/xsl:attribute<span class="re2">&gt;</span></span></span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="sc3"><span class="re1">&lt;/statisticValue<span class="re2">&gt;</span></span></span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="sc3"><span class="re1">&lt;statisticValue</span> <span class="re0">key</span>=<span class="st0">&quot;ResponseTimeNinetyFivePercent&quot;</span><span class="re2">&gt;</span></span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="sc3"><span class="re1">&lt;xsl:attribute</span> <span class="re0">name</span>=<span class="st0">&quot;value&quot;</span><span class="re2">&gt;</span><span class="re1">&lt;xsl:value-of</span> <span class="re0">select</span>=<span class="st0">'//section[@name=&quot;details&quot;]/table[@name=&quot;histogram&quot;]/item[2]/data[@name=&quot;response_time_95&quot;]'</span> <span class="re2">/&gt;</span><span class="re1">&lt;/xsl:attribute<span class="re2">&gt;</span></span></span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="sc3"><span class="re1">&lt;/statisticValue<span class="re2">&gt;</span></span></span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="sc3"><span class="re1">&lt;statisticValue</span> <span class="re0">key</span>=<span class="st0">&quot;ResponseTimeNinetyNinePercent&quot;</span><span class="re2">&gt;</span></span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="sc3"><span class="re1">&lt;xsl:attribute</span> <span class="re0">name</span>=<span class="st0">&quot;value&quot;</span><span class="re2">&gt;</span><span class="re1">&lt;xsl:value-of</span> <span class="re0">select</span>=<span class="st0">'//section[@name=&quot;details&quot;]/table[@name=&quot;histogram&quot;]/item[2]/data[@name=&quot;response_time_99&quot;]'</span> <span class="re2">/&gt;</span><span class="re1">&lt;/xsl:attribute<span class="re2">&gt;</span></span></span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="sc3"><span class="re1">&lt;/statisticValue<span class="re2">&gt;</span></span></span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="sc3"><span class="re1">&lt;statisticValue</span> <span class="re0">key</span>=<span class="st0">&quot;ResponseTimeMaximum&quot;</span><span class="re2">&gt;</span></span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="sc3"><span class="re1">&lt;xsl:attribute</span> <span class="re0">name</span>=<span class="st0">&quot;value&quot;</span><span class="re2">&gt;</span><span class="re1">&lt;xsl:value-of</span> <span class="re0">select</span>=<span class="st0">'//section[@name=&quot;details&quot;]/table[@name=&quot;histogram&quot;]/item[2]/data[@name=&quot;response_time_max&quot;]'</span> <span class="re2">/&gt;</span><span class="re1">&lt;/xsl:attribute<span class="re2">&gt;</span></span></span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="sc3"><span class="re1">&lt;/statisticValue<span class="re2">&gt;</span></span></span>
&nbsp; &nbsp; <span class="sc3"><span class="re1">&lt;/build<span class="re2">&gt;</span></span></span>
<span class="sc3"><span class="re1">&lt;/xsl:template<span class="re2">&gt;</span></span></span>
<span class="sc3"><span class="re1">&lt;/xsl:stylesheet<span class="re2">&gt;</span></span></span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">&lt;xsl:stylesheet xmlns:xsl="http://www.w3.org/1999/XSL/Transform" version="1.0"&gt;
&lt;xsl:template match="/"&gt;
	&lt;build&gt;
		&lt;statisticValue key="TransactionsPerSecond"&gt;
			&lt;xsl:attribute name="value"&gt;&lt;xsl:value-of select='//section[@name="summary"]/table[@name="summarydata"]/item/data[@name="tps"]' /&gt;&lt;/xsl:attribute&gt;
		&lt;/statisticValue&gt;
		&lt;statisticValue key="RequestsPerSecond"&gt;
			&lt;xsl:attribute name="value"&gt;&lt;xsl:value-of select='//section[@name="summary"]/table[@name="summarydata"]/item/data[@name="rps"]' /&gt;&lt;/xsl:attribute&gt;
		&lt;/statisticValue&gt;
		&lt;statisticValue key="TotalTransactions"&gt;
			&lt;xsl:attribute name="value"&gt;&lt;xsl:value-of select='//section[@name="details"]/table[@name="requeststats"]/item[1]/data[@name="transactions"]' /&gt;&lt;/xsl:attribute&gt;
		&lt;/statisticValue&gt;
		&lt;statisticValue key="TotalRequests"&gt;
			&lt;xsl:attribute name="value"&gt;&lt;xsl:value-of select='//section[@name="details"]/table[@name="requeststats"]/item[1]/data[@name="requests"]' /&gt;&lt;/xsl:attribute&gt;
		&lt;/statisticValue&gt;
		&lt;statisticValue key="TotalErrors"&gt;
			&lt;xsl:attribute name="value"&gt;&lt;xsl:value-of select='//section[@name="summary"]/table[@name="summarydata"]/item/data[@name="terrors"]' /&gt;&lt;/xsl:attribute&gt;
		&lt;/statisticValue&gt;
		&lt;statisticValue key="ResponseTimeAverage"&gt;
			&lt;xsl:attribute name="value"&gt;&lt;xsl:value-of select='//section[@name="details"]/table[@name="histogram"]/item[2]/data[@name="response_time_avg"]' /&gt;&lt;/xsl:attribute&gt;
		&lt;/statisticValue&gt;
		&lt;statisticValue key="ResponseTimeMinimum"&gt;
			&lt;xsl:attribute name="value"&gt;&lt;xsl:value-of select='//section[@name="details"]/table[@name="histogram"]/item[2]/data[@name="response_time_min"]' /&gt;&lt;/xsl:attribute&gt;
		&lt;/statisticValue&gt;
		&lt;statisticValue key="ResponseTimeNinetyFivePercent"&gt;
			&lt;xsl:attribute name="value"&gt;&lt;xsl:value-of select='//section[@name="details"]/table[@name="histogram"]/item[2]/data[@name="response_time_95"]' /&gt;&lt;/xsl:attribute&gt;
		&lt;/statisticValue&gt;
		&lt;statisticValue key="ResponseTimeNinetyNinePercent"&gt;
			&lt;xsl:attribute name="value"&gt;&lt;xsl:value-of select='//section[@name="details"]/table[@name="histogram"]/item[2]/data[@name="response_time_99"]' /&gt;&lt;/xsl:attribute&gt;
		&lt;/statisticValue&gt;
		&lt;statisticValue key="ResponseTimeMaximum"&gt;
			&lt;xsl:attribute name="value"&gt;&lt;xsl:value-of select='//section[@name="details"]/table[@name="histogram"]/item[2]/data[@name="response_time_max"]' /&gt;&lt;/xsl:attribute&gt;
		&lt;/statisticValue&gt;
	&lt;/build&gt;
&lt;/xsl:template&gt;
&lt;/xsl:stylesheet&gt;</pre></div></div>

<p>(The final XSL is located on <a href="https://bitbucket.org/tarwn/mvcmusicstore.loadtest/src/ee1713fd00ff/TransformForTeamCity.xsl" title="TransformForTeamCity.xsl from tarwn / MVCMusicStore.LoadTest">bitbucket</a> in the event that I make any future changes).</p>
<p>The powershell command to run the transform is then as easy as:</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="text"><thead><tr><td colspan="2"  class="head">Text</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
</pre></td><td class="de1"><pre class="de1">$xsl = (New-Object System.Xml.Xsl.XslCompiledTransform)
$xsl.Load('%system.teamcity.build.workingDir%/TransformForTeamCity.xsl')
$xsl.Transform('%system.teamcity.build.workingDir%/log.xml','%system.teamcity.build.workingDir%/teamcity-info.xml')</pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">$xsl = (New-Object System.Xml.Xsl.XslCompiledTransform)
$xsl.Load('%system.teamcity.build.workingDir%/TransformForTeamCity.xsl')
$xsl.Transform('%system.teamcity.build.workingDir%/log.xml','%system.teamcity.build.workingDir%/teamcity-info.xml')</pre></div></div>

<p>TeamCity replaces the variables with the correct values and transforms the generated log into the specially named &#8220;teamcity-info.xml&#8221; file.</p>
<h2>Done</h2>
<p>I wasn&#8217;t happy about editing settings file in TeamCity directly, especially given the implications this has in a real environment (how many people would need to be involved to do this in a heavily audited environment?). However that was the only issue I had and I am happy with the results (the build versions are the same because I rebuilt several times so I would have a decent chart):</p>
<div style="text-align: center; font-size: 90%; color: #666666;">
	<a href="http://tiernok.com/LTDBLog/ContinuousDelivery/TeamCityCharts.png" target="_blank"><br />
		<img src="http://tiernok.com/LTDBlog/ContinuousDelivery/TeamCityCharts_sm.png" alt="TeamCity - Finished Charts" /><br />
	</a><br />
	Team City &#8211; Finished Charts
</div>
<p>For bonus points, the same functionality you have with the built-in charts is available here. You can change the time period, view averages of the values, and change which points are graphed by checking or unchecking them.</p>
]]></content:encoded>
			<wfw:commentRss>/index.php/enterprisedev/application-lifecycle-management/custom-charts-in-teamcity/feed/</wfw:commentRss>
		<slash:comments>0</slash:comments>
		</item>
		<item>
		<title>Continuous Delivery &#8211; To The Cloud!</title>
		<link>/index.php/enterprisedev/application-lifecycle-management/continuous-delivery-to-the-cloud/</link>
		<comments>/index.php/enterprisedev/application-lifecycle-management/continuous-delivery-to-the-cloud/#respond</comments>
		<pubDate>Thu, 20 Sep 2012 10:46:00 +0000</pubDate>
		<dc:creator><![CDATA[Eli Weinstock-Herman (tarwn)]]></dc:creator>
				<category><![CDATA[Application Lifecycle Management]]></category>
		<category><![CDATA[azure]]></category>
		<category><![CDATA[continuous delivery]]></category>
		<category><![CDATA[jenkins]]></category>
		<category><![CDATA[mvc music store]]></category>
		<category><![CDATA[teamcity]]></category>

		<guid isPermaLink="false">/index.php/2012/09/continuous-delivery-to-the-cloud/</guid>
		<description><![CDATA[So what do you do when you have a nice little build lab with two implementations of an automated deployment pipeline that includes unit testing, automated interface testing, automated deployments, smoke testing, automated load tests, static analysis, warning tracking, and automated sort-of QA and production deployments? 

Take it to the cloud, of course.]]></description>
				<content:encoded><![CDATA[<p>So what do you do when you have a nice little build lab with two  parallel automated deployment pipelines that include unit testing, interface testing, deployments, smoke testing, load testing, static analysis, and automated sort-of QA and production deployments? </p>
<p>Take it to the cloud, of course. </p>
<p>(Well, and write <a href="/index.php/All/continuous+delivery:" title="Continuous Delivery posts">a bunch of blog posts</a> and <a href="http://wiki.lessthandot.com/index.php/Eli%27s_Continuous_Delivery_Project" title="Continuous Delivery project wiki page">a wiki page</a> too)</p>
<h2>Azure Setup</h2>
<p>The target of this exercise was to get the project deploying automatically to the cloud, and I wasn&#8217;t particular about where. I decided that the <a href="https://www.windowsazure.com/en-us/home/scenarios/web-sites/" title="About the Azure Websites Feature">free website</a> feature in Azure would be a good target. Mostly due to the free part but also because I suspected it would be easy.</p>
<p>First up was creating an Azure account, which I did via <a href="https://www.windowsazure.com/en-us/" title="WindowsAzure.com">WindowsAzure.com</a>. The Web Sites feature is still in Preview mode, so I had to go the preview features and enable it.</p>
<div style="text-align: center; font-size: 90%; color: #666666;">
	<img src="http://tiernok.com/LTDBlog/ContinuousDelivery/Azure-01.png" alt="WindowsAzure.com - Preview Features Option" /><br />
	WindowsAzure.com &#8211; Preview Features Option
</div>
<p>The Web Sites option is at the bottom and enabled with a button and dialog:</p>
<div style="text-align: center; font-size: 90%; color: #666666;">
	<img src="http://tiernok.com/LTDBlog/ContinuousDelivery/Azure-02.png" alt="WindowsAzure.com - Preview Features" /><br />
	WindowsAzure.com &#8211; Preview Features
</div>
<p>Once it&#8217;s enabled, I can go into the portal and when I press the &#8220;New&#8221; button at the bottom, I&#8217;ll have options to create a new Web Site instance.</p>
<div style="text-align: center; font-size: 90%; color: #666666;">
	<img src="http://tiernok.com/LTDBlog/ContinuousDelivery/Azure-03.png" alt="WindowsAzure.com - New Website" /><br />
	WindowsAzure.com &#8211; New Website
</div>
<p>After creating the new site, it will provision and show up in my dashboard:</p>
<div style="text-align: center; font-size: 90%; color: #666666;">
	<img src="http://tiernok.com/LTDBlog/ContinuousDelivery/Azure-04.png" alt="WindowsAzure.com - Dashboard" /><br />
	WindowsAzure.com &#8211; Dashboard
</div>
<p>That&#8217;s all it takes to have a new Web Site in Windows Azure. Of course it&#8217;s not doing anything useful at the moment, so lets go back to the build process and fix that.</p>
<h2>Build Process Changes</h2>
<p>Because I chose to use an Azure Web Site, the build changes are going to be minimal. Microsoft intends us to use the Publish feature in Visual Studio or Web Matrix to deploy our websites, so they give us all the settings we need to run the msdeploy executable from a build step instead. </p>
<p>In the properties dashboard for the new website above, there is a link to download the publish settings for the site and a link to setup credentials. First setup the credentials, then click the download link to download the publish settings. These settings are intended for Visual Studio or Web Matrix, but being XML we can read the file and pluck out the important values.</p>
<p>I made a copy of my final &#8220;Deploy to Production&#8221; step and modified the msdeploy step to use a new Param file. The Param file is used during the deployment to set the IIS name and connection strings, you can see all of them on <a href="https://bitbucket.org/tarwn/mvcmusicstore.main/src/1560a5fd57ea/Configs" title="Parameter files at tarwn/MVCMusicStore.Main">BitBucket</a>. </p>
<div style="text-align: center; font-size: 90%; color: #666666;">
	<img src="http://tiernok.com/LTDBlog/ContinuousDelivery/Azure-05.png" alt="TeamCity Build Steps" /><br />
	TeamCity Build Steps
</div>
<p><b>MSDeploy Command (TeamCity version):</b></p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="text"><thead><tr><td colspan="2"  class="head">Text</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
</pre></td><td class="de1"><pre class="de1">&quot;C:Program FilesIISMicrosoft Web Deploy V2msdeploy.exe&quot; -source:package='%system.teamcity.build.workingDir%PriorArtifactsMvcMusicStore.zip' -dest:auto,computerName='%COMPUTER%',userName='%USERNAME%',password='%PASSWORD%',includeAcls='False',authtype=basic -allowUntrusted &nbsp;-verb:sync -disableLink:AppPoolExtension -disableLink:ContentExtension -disableLink:CertificateExtension -setParamFile=&quot;%system.teamcity.build.workingDir%PriorArtifactsMvcMusicStore.AZUREWEBSITE.xml&quot; -enableRule:DoNotDeleteRule</pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">"C:Program FilesIISMicrosoft Web Deploy V2msdeploy.exe" -source:package='%system.teamcity.build.workingDir%PriorArtifactsMvcMusicStore.zip' -dest:auto,computerName='%COMPUTER%',userName='%USERNAME%',password='%PASSWORD%',includeAcls='False',authtype=basic -allowUntrusted  -verb:sync -disableLink:AppPoolExtension -disableLink:ContentExtension -disableLink:CertificateExtension -setParamFile="%system.teamcity.build.workingDir%PriorArtifactsMvcMusicStore.AZUREWEBSITE.xml" -enableRule:DoNotDeleteRule</pre></div></div>

<p>I then updated the Configuration Parameters to reflect the Azure credentials and URL so the deployment and smoke test would work properly and entered the username and password entered in the Azure Dashboard in the prior step.</p>
<div style="text-align: center; font-size: 90%; color: #666666;">
	<img src="http://tiernok.com/LTDBlog/ContinuousDelivery/Azure-07.png" alt="TeamCity Configuration Parameters" /><br />
	TeamCity Configuration Parameters
</div>
<p>And that&#8217;s it, probably the fastest on premises to cloud change. Press the build button in TeamCity and we have a green build to the cloud:</p>
<div style="text-align: center; font-size: 90%; color: #666666;">
	<img src="http://tiernok.com/LTDBlog/ContinuousDelivery/Azure-08.png" alt="TeamCity Build Successful" /><br />
	TeamCity Build Successful
</div>
<p>And after a similar set of changes in Jenkins, I have a parallel production step that targets Azure as well:</p>
<div style="text-align: center; font-size: 90%; color: #666666;">
	<img src="http://tiernok.com/LTDBlog/ContinuousDelivery/Azure-9.png" alt="Jenkins Build Pipeline" /><br />
	Jenkins Build Pipeline
</div>
<p>And of course I had to push the button a few times:</p>
<div style="text-align: center; font-size: 90%; color: #666666;">
	<img src="http://tiernok.com/LTDBlog/ContinuousDelivery/Azure-10.png" alt="Jenkins Build Success" /><br />
	Jenkins Build Success
</div>
<p>You can see the site here: http://elismvcmusicstore.azurewebsites.net/</p>
<p><em>Note: It will probably load slowly. It&#8217;s on a shared node and seems to go to sleep since it gets visited so infrequently. If I felt like paying for it, it&#8217;s just a toggle button away from running as a reserved instance (and another to scale it up to multiple instances)</em></p>
<h2>That was the easy button version</h2>
<p>Despite the fact that I chose the easiest possible target, as long as we can script the deployment we can easily add it into the pipeline and know that our deployment is taking exactly the same steps every time it deploys. Whether we were instead deploying to an Azure web role, deploying EC2 instances, or pushing to another provider, we have the framework to do so consistently and safely.</p>
]]></content:encoded>
			<wfw:commentRss>/index.php/enterprisedev/application-lifecycle-management/continuous-delivery-to-the-cloud/feed/</wfw:commentRss>
		<slash:comments>0</slash:comments>
		</item>
		<item>
		<title>Continuous Delivery with TeamCity</title>
		<link>/index.php/enterprisedev/application-lifecycle-management/continuous-delivery-with-teamcity/</link>
		<comments>/index.php/enterprisedev/application-lifecycle-management/continuous-delivery-with-teamcity/#comments</comments>
		<pubDate>Fri, 14 Sep 2012 12:11:00 +0000</pubDate>
		<dc:creator><![CDATA[Eli Weinstock-Herman (tarwn)]]></dc:creator>
				<category><![CDATA[Application Lifecycle Management]]></category>
		<category><![CDATA[continuous delivery]]></category>
		<category><![CDATA[mvc music store]]></category>
		<category><![CDATA[teamcity]]></category>

		<guid isPermaLink="false">/index.php/2012/09/continuous-delivery-with-teamcity/</guid>
		<description><![CDATA[Over the series of 12 posts, I have built a continuous delivery pipeline around the MVC Music Store tutorial web site. The journey included making changes to support unit testing, creating a CI build, adding automated multi-environment deployment, automated interface testing, automated load testing stage, and static analysis. Up until now, this was entirely on Jenkins, but today I intend to re-implement the pipeline on TeamCity.]]></description>
				<content:encoded><![CDATA[<p>Over the series of 12 posts, I have built a <a href="http://wiki.lessthandot.com/index.php/Eli%27s_Continuous_Delivery_Project" title="Continuous Delivery wiki post" target="_blank">continuous delivery pipeline</a> around the MVC Music Store tutorial web site. The journey included making changes to support unit testing, creating a CI build, adding automated multi-environment deployment, automated interface testing, automated load testing stage, and static analysis. Up until now, this was entirely on <a href="http://jenkins-ci.org/" title="Jenkins CI website" target="_blank">Jenkins</a>, but today I intend to re-implement the pipeline on <a href="http://www.jetbrains.com/teamcity/" title="TeamCity by JetBrains" target="_blank">TeamCity</a>.</p>
<h2>General Feelings</h2>
<p>My general feelings towards TeamCity during this process have been good. I found several places where TeamCity would have been easier to use [than Jenkins], such as parsing test result files and evaluating results. I like the visibility of pending changes for each build step and everything I have implemented has been extremely straightforward (though I haven&#8217;t taken on custom graphs and code coverage yet). Wiring together dependencies was far easier and clearer then in Jenkins, and the build-level configurations and sharing of build numbers throughout the build was a lot cleaner. Little touches like previews for the artifacts and working directories were also extremely handy.</p>
<p>Not everything was perfect, however. The build chains were as close as I could get to a pipeline visualization and they are busier then the pipeline view in Jenkins. There also wasn&#8217;t an obvious way to use a build chain view for the dashboard. Rerunning steps in the build would create a whole new chain, rather then being treated as a retry of a prior run of the same snapshot. The plugins don&#8217;t feel quite as first class in TeamCity as they did in Jenkins, but the built in functionality was quite a bit more extensive, so I think this just comes down to focus and my own experience (or lack) with the tools. </p>
<p>But enough of my feelings, lets do some technical stuff.</p>
<h2>Review of the Build Process</h2>
<p>The build pipeline is the process the code goes through from committing the code to eventual delivery, automated where possible to minimize the lead time for new features and wire in good practices I want to follow. The code is built and passes through a variety of tests and checks at each step, with only a few configurations changing along the way, ensuring what is released has passed every step as quickly and consistently as possible (smooth is fast). </p>
<p>The current Jenkins build pipeline looks like this (plus lots of static analysis that doesn&#8217;t fit in the picture):</p>
<div style="text-align: center; font-size: .9em; color: #666666;">
	<img src="http://tiernok.com/LTDBlog/ContinuousDelivery/pipeline_load.png" title="Continuous Delivery Pipeline with Load Test Step" /><br />
	Continuous Delivery Pipeline with Load Test Step
</div>
<p>These are the portion I intend to do in TeamCity:</p>
<dl>
<dt>CI Stage</dt>
<dd>Monitors main code repository, execute build, run unit tests, deploy to ensure deployable, smoke test deployment</dd>
<dt>Interface Testing</dt>
<dd>Monitors interface test code repository, deploys + smoke tests deployment, runs interface tests</dd>
<dt>Load Testing</dt>
<dd>Monitors load test code repository, deploys + smoke tests deployment, runs load test</dd>
<dt>QA Deploy</dt>
<dd>Manual QA deployment for imaginary QA department</dd>
<dt>Prod Deploy</dt>
<dd>Manual production deployment</dd>
</dl>
<p>I will be leaving the load test results graph and <a href="/index.php/EnterpriseDev/application-lifecycle-management/continuous-delivery-adding-static-analysis" title="Continuous Delivery - Adding Static Analysis" target="_blank">static analysis</a> until a later post.</p>
<h2>Server Setup</h2>
<p>Since my <a href="/index.php/EnterpriseDev/application-lifecycle-management/starting-a-continuous-delivery-project" title="Starting a Continuous Delivery Project">original post</a> I have setup a dedicated Hyper-V server on Windows 2012 RC and moved the original AVL-BUILD-01 and AVL-BETA-01 server to this host, adding an AVL-SQL-01 that serves as a host for environment-specific MSSQL databases. I created the new TeamCity build server (AVL-BUILD-02) to match the original, including same versions of OS, Visual Studio, etc:</p>
<p><b>Initial Installs:</b></p>
<ul>
<li>Windows 2008 R2 + lots of Windows updates</li>
<li>Visual Studio 2010 + more updates (SP1, etc)</li>
<li><a href="http://www.asp.net/mvc/mvc3" title="ASP.Net MVC 3 Download" target="_blank">ASP.Net MVC3</a></li>
<li><a href="http://www.jetbrains.com/teamcity/download/" title="TeamCity download" target="_blank">TeamCity 7.1</a></li>
<li><a href="http://mercurial.selenic.com/downloads/" title="Mercurial download" target="_blank">Mercurial 2.3.0</a> (only version difference from AVL-BUILD-01)</li>
<li><a href="http://www.iis.net/learn/install/installing-publishing-technologies/installing-and-configuring-web-deploy" title="Installing Web Deploy on iis.net" target="_blank">Web Deploy 2.1</a></li>
<li><a href="http://www.iis.net/downloads/community/2007/05/wcat-63-%28x64%29" title="WCAT 6.3 download on iis.net" target="_blank">WCAT 6.3</a></li>
<li><a href="http://www.mozilla.org/en-US/firefox/new/" title="Firefox download" target="_blank">FireFox 146 (or whatever)</a></li>
</ul>
<p>As noted, the Firefox and mercurial installs didn&#8217;t match, version-wise, but everything else I kept the same as the Jenkins build server.</p>
<h2>Creating the CI Build</h2>
<p>The CI project is probably the most complex one due to the number of steps and fact that it serves the artifacts every later step will use. </p>
<p><b>1: Create the project</b><br />
The project serves as the container for the builds, creating one only requires a name and optional description:</p>
<div style="text-align: center; font-size: 90%; color: #666666;">
	<a href="http://tiernok.com/LTDBlog/ContinuousDelivery/TeamCity_01.png" target="_blank"><br />
		<img style="border: 1px solid #999999" src="http://tiernok.com/LTDBlog/ContinuousDelivery/TeamCity_01_sm.png" alt="TeamCity - Project Setup" /><br />
	</a><br />
	Team City &#8211; Project Setup
</div>
<p>Once the project is named, I can add my first build step (don&#8217;t worry, I&#8217;ll only do these screen shots one time):</p>
<div style="text-align: center; font-size: 90%; color: #666666;">
	<a href="http://tiernok.com/LTDBlog/ContinuousDelivery/TeamCity_02.png" target="_blank"><br />
		<img style="border: 1px solid #999999" src="http://tiernok.com/LTDBlog/ContinuousDelivery/TeamCity_02_sm.png" alt="TeamCity - Ready to add builds" /><br />
	</a><br />
	Team City &#8211; Ready to add builds
</div>
<p>Here I&#8217;ll name the build step and define the artifacts I want to store for later use, including the deployment package I intend to make and the folder of environment-specific configurations.</p>
<div style="text-align: center; font-size: 90%; color: #666666;">
	<a href="http://tiernok.com/LTDBlog/ContinuousDelivery/TeamCity_03.png" target="_blank"><br />
		<img style="border: 1px solid #999999" src="http://tiernok.com/LTDBlog/ContinuousDelivery/TeamCity_03_sm.png" alt="TeamCity - Adding a Build" /><br />
	</a><br />
	Team City &#8211; Adding a Build
</div>
<p>Next is the settings for the main site code repository. To create VCS settings for the build we need to create the VCS root (which includes the polling settings) then define the settings that are specific to this build. </p>
<div style="text-align: center; font-size: 90%; color: #666666;">
	<a href="http://tiernok.com/LTDBlog/ContinuousDelivery/TeamCity_04.png" target="_blank"><br />
		<img style="border: 1px solid #999999" src="http://tiernok.com/LTDBlog/ContinuousDelivery/TeamCity_04_sm.png" alt="TeamCity - Defining Version Control" /><br />
	</a><br />
	Team City &#8211; Defining Version Control
</div>
<p>At this point I can start adding my build steps. These build steps will duplicate the ones I used in Jenkins. An advantage over the Jenkins setup is that the MSBuild runner already has versions configured and there is a built-in MSTest runner. When entering the command-line calls I used in Jenkins, I&#8217;ll substitute in TeamCity variables using the small <img src="http://tiernok.com/LTDBlog/ContinuousDelivery/TeamCityPopup.gif" alt="Popup icon" /> image next to the inputs.</p>
<div style="text-align: center; font-size: 90%; color: #666666;">
	<a href="http://tiernok.com/LTDBlog/ContinuousDelivery/TeamCity_05.png" target="_blank"><br />
		<img style="border: 1px solid #999999" src="http://tiernok.com/LTDBlog/ContinuousDelivery/TeamCity_05_sm.png" alt="TeamCity - Build Steps" /><br />
	</a><br />
	Team City &#8211; Build Steps
</div>
<p>Below the build steps I have used the report processing feature to process the results of the smoke test script (<a href="/index.php/EnterpriseDev/application-lifecycle-management/continuous-delivery-project-deploy-and" title="Continuous Delivery Project - Deploy and Smoke Test">original post here</a>), which outputs in JUnit format. TeamCity will automatically collect the results from the MSTest step and this step and make them available in the summary and run details.</p>
<p>The second to last steps is to setup a build trigger to run on VCS changes, which is a couple clicks and extremely straightforward.</p>
<div style="text-align: center; font-size: 90%; color: #666666;">
	<img style="border: 1px solid #999999" src="http://tiernok.com/LTDBlog/ContinuousDelivery/TeamCity_06.png" alt="TeamCity - Adding a Trigger" /><br />
	Team City &#8211; Adding a Trigger
</div>
<p>Then the last step is to define the build parameters. TeamCity automatically detected the extra unrecognized parameters from my command-line build steps and has added them to the list of build configurations, which I thought was pretty slick. To make it even better, I can reference these parameters from later builds to reduce the number of places I need to define unique settings.</p>
<div style="text-align: center; font-size: 90%; color: #666666;">
	<img style="border: 1px solid #999999" src="http://tiernok.com/LTDBlog/ContinuousDelivery/TeamCity_07.png" alt="TeamCity - Build Parameters" /><br />
	Team City &#8211; Build Parameters
</div>
<p>Once I have finished setting up this build, I can return to the main dashboard and run it on demand by pressing the &#8220;Run&#8221; button.</p>
<div style="text-align: center; font-size: 90%; color: #666666;">
	<a href="http://tiernok.com/LTDBlog/ContinuousDelivery/TeamCity_08.png" target="_blank"><br />
		<img style="border: 1px solid #999999" src="http://tiernok.com/LTDBlog/ContinuousDelivery/TeamCity_08_sm.png" alt="TeamCity - Dashboard" /><br />
	</a><br />
	Team City &#8211; Dashboard
</div>
<p>And we have the first build stage done.</p>
<h2>Creating the Interface Testing Build</h2>
<p>The interface testing build (<a href="/index.php/EnterpriseDev/application-lifecycle-management/continuous-delivery-adding-an-automated" title="
Continuous Delivery - Adding an Automated Interface Test Stage">original post here</a>) is only a few steps. The first few stages of this build are the same, I create the build, define a VCS root that points to the Interface testing project on BitBucket, then add the build steps. I use an MSBuild step to build the automated interface test project (SpecFlow, Nunit, Selenium), command-line steps to call MSDeploy and the smoke test script, copy in the automated test settings for the tests, then use the built-in Nunit test runner to run the automated test assembly.</p>
<div style="text-align: center; font-size: 90%; color: #666666;">
	<a href="http://tiernok.com/LTDBlog/ContinuousDelivery/TeamCity_09.png" target="_blank"><br />
		<img style="border: 1px solid #999999" src="http://tiernok.com/LTDBlog/ContinuousDelivery/TeamCity_09_sm.png" alt="TeamCity - Interface Test Build" /><br />
	</a><br />
	Team City &#8211; Interface Test Build
</div>
<p>Skipping ahead to the Dependencies section, I&#8217;ll add a snapshot dependency on the CI stage so that builds of the Interface stage use snapshots from the same point in time as it&#8217;s linked CI build. I&#8217;ll also add an artifact dependency to pull all of the artifacts from the CI build into a local folder named PriorArtifacts, keeping with the pattern I used in the Jenkins build. </p>
<div style="text-align: center; font-size: 90%; color: #666666;">
	<a href="http://tiernok.com/LTDBlog/ContinuousDelivery/TeamCity_10.png" target="_blank"><br />
		<img style="border: 1px solid #999999" src="http://tiernok.com/LTDBlog/ContinuousDelivery/TeamCity_10_sm.png" alt="TeamCity - Dependencies" /><br />
	</a><br />
	Team City &#8211; Dependencies
</div>
<p>Next I add a build trigger to run after a successful build of the CI stage and fill the dependencies with references to the values from the CI Build where I can.</p>
<div style="text-align: center; font-size: 90%; color: #666666;">
	<img style="border: 1px solid #999999" src="http://tiernok.com/LTDBlog/ContinuousDelivery/TeamCity_11.png" alt="TeamCity - Build Parameters" /><br />
	Team City &#8211; Build Parameters
</div>
<p>And the last step is to return to the project screen and define the Artifacts for this stage as &#8220;PriorArtifacts/*&#8221; so it will pass on all of the artifacts it pulled in from the prior stage.</p>
<p>Running this build reminded me that Firefox has a nasty habit of downloading updates when you least want them, as the interface tests started timing out because they couldn&#8217;t quit. A quick tweak to the Firefox settings and I have a successful interface test step running, with the test results showing in the summary just like the CI stage.</p>
<div style="text-align: center; font-size: 90%; color: #666666;">
	<img style="border: 1px solid #999999" src="http://tiernok.com/LTDBlog/ContinuousDelivery/TeamCity_12.png" alt="TeamCity - Interface Tests" /><br />
	Team City &#8211; Interface Tests
</div>
<p>Note: The build number for each build allows you to define your own pattern. By setting it to %dep.bt2.build.number%, each of my builds use the build number I created in the CI stage (which is used again in the smoke tests).</p>
<h2>Creating the Load Test, QA, and Prod Builds</h2>
<p>At this point I have all the pieces I need to finish out the last 3 stages.</p>
<p><b>Load Test Build</b><br />
The Load Test stage (<a href="/index.php/EnterpriseDev/application-lifecycle-management/continuous-delivery-adding-the-load" title="Continuous Delivery - Load Test Stage">see original here</a>) gets the same build number and artifacts as the Interface Testing stage. I add a new VCS root to pull down the load tests scripts from <a href="https://bitbucket.org/tarwn/mvcmusicstore.loadtest" title="My load test repository on bitbucket">BitBucket</a>, deploy, smoke test, then run the run.cmd file that runs the WCAT load test. I skipped the challenging part of this, which is turning the results into a chart, but as I mentioned earlier that sounds like it will be a follow-up post of it&#8217;s own. The dependencies, parameters, and build trigger are set up the same as the Interface testing build.</p>
<p><b>Deploy QA and Deploy Prod Builds</b><br />
The last two are rinse and repeats. Take the build number and artifact settings, no VCS settings, add dependencies and leave them to be triggered manually.</p>
<h2>The Pipeline</h2>
<p>Those 5 builds compromise the core of the pipeline and show up in the TeamCity dashboard like so:</p>
<div style="text-align: center; font-size: 90%; color: #666666;">
	<a href="http://tiernok.com/LTDBlog/ContinuousDelivery/TeamCity_13.png" target="_blank"><br />
		<img style="border: 1px solid #999999" src="http://tiernok.com/LTDBlog/ContinuousDelivery/TeamCity_13_sm.png" alt="TeamCity - Full Dashboard" /><br />
	</a><br />
	Team City &#8211; Full Dashboard
</div>
<p>To get to the build chains view, go into the Project page and click the last tab to the right, titled &#8220;Build Chains&#8221;.</p>
<div style="text-align: center; font-size: 90%; color: #666666;">
	<a href="http://tiernok.com/LTDBlog/ContinuousDelivery/TeamCity_14.png" target="_blank"><br />
		<img style="border: 1px solid #999999" src="http://tiernok.com/LTDBlog/ContinuousDelivery/TeamCity_14_sm.png" alt="TeamCity - Build Chains" /><br />
	</a><br />
	Team City &#8211; Build Chains
</div>
<p>The summary bar lists the final step and status in the chain, the last step that ran, and the date. Expanding it shows the full chain (though there are some scrolling issues).</p>
<h2>Last Words</h2>
<p>This was an interesting project, as I was able to take a fairly complex build and see how it would work in a completely different engine. The addition of a first class pipeline view is probably the biggest item on my wishlist and I look forward to seeing what they do with it in the future. Even without that, though, it was a great tool to use and offered me none of the teething problems I had with several of the Jenkins plugins.</p>
]]></content:encoded>
			<wfw:commentRss>/index.php/enterprisedev/application-lifecycle-management/continuous-delivery-with-teamcity/feed/</wfw:commentRss>
		<slash:comments>6</slash:comments>
		</item>
	</channel>
</rss>
