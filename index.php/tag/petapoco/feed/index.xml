<?xml version="1.0" encoding="UTF-8"?><rss version="2.0"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:atom="http://www.w3.org/2005/Atom"
	xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
	xmlns:slash="http://purl.org/rss/1.0/modules/slash/"
	>

<channel>
	<title>petapoco &#8211; LessthanDot</title>
	<atom:link href="/index.php/tag/petapoco/feed/" rel="self" type="application/rss+xml" />
	<link>/</link>
	<description>A Technical Community for IT Professionals</description>
	<lastBuildDate>Sat, 09 Mar 2019 12:50:36 +0000</lastBuildDate>
	<language>en-US</language>
	<sy:updatePeriod>hourly</sy:updatePeriod>
	<sy:updateFrequency>1</sy:updateFrequency>
	<generator>https://wordpress.org/?v=4.6.1</generator>
	<item>
		<title>Mapping Complex Types to/from the DB with PetaPoco</title>
		<link>/index.php/desktopdev/mstech/csharp/mapping-complex-types-tofrom-the-db-with-petapoco/</link>
		<comments>/index.php/desktopdev/mstech/csharp/mapping-complex-types-tofrom-the-db-with-petapoco/#respond</comments>
		<pubDate>Tue, 20 Jun 2017 10:30:47 +0000</pubDate>
		<dc:creator><![CDATA[Eli Weinstock-Herman (tarwn)]]></dc:creator>
				<category><![CDATA[C#]]></category>
		<category><![CDATA[petapoco]]></category>

		<guid isPermaLink="false">/?p=8660</guid>
		<description><![CDATA[Recently I was working on an application with rich C# objects that I wanted to store simplified in the database, without having to write custom logic for each new save or query that I add to the application. Luckily, the library I had chosen for data access (AsyncPoco, a variant Petapoco) has a mechanism that [&#8230;]]]></description>
				<content:encoded><![CDATA[<p>Recently I was working on an application with rich C# objects that I wanted to store simplified in the database, without having to write custom logic for each new save or query that I add to the application. Luckily, the library I had chosen for data access (<a href="https://github.com/tmenier/AsyncPoco">AsyncPoco</a>, a variant <a href="http://www.toptensoftware.com/petapoco/">Petapoco</a>) has a mechanism that can automatically map complex C# Types to simpler SQL types.</p>
<h2>Case 1: Strongly Typed Identities to SQL ints</h2>
<p>A complex web application can end up passing object id&#8217;s through any number of controller methods, business functions, or storage calls. It&#8217;s not hard to end up with a smattering of integer or GUIDs in the application to represent the id values, with limited meaning when appended to error messages, serialized, or represented in tests. Though it&#8217;s nice to see functions with strongly types ID objects (and error messages that don&#8217;t tell you &#8220;4 could not be found&#8221;), this can switch to a nuisance at API and database borders when it comes time to save or communicate those complex types.</p>
<p>Here&#8217;s an example Identity object (T4 generated):</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="csharp"><thead><tr><td colspan="2"  class="head">C#</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
</pre></td><td class="de1"><pre class="de1"><span class="kw1">public</span> <span class="kw4">class</span> OrganizationId <span class="sy0">:</span> IIdentity<span class="sy0">&lt;</span><span class="kw4">int</span><span class="sy0">&gt;</span>
<span class="br0">&#123;</span> &nbsp; 
<span class="br0">&#91;</span>Obsolete<span class="br0">&#40;</span><span class="st0">&quot;Serialization use only&quot;</span>, <span class="kw1">true</span><span class="br0">&#41;</span><span class="br0">&#93;</span>
<span class="kw1">public</span> OrganizationId<span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span> <span class="br0">&#125;</span>
&nbsp;
<span class="kw1">public</span> OrganizationId<span class="br0">&#40;</span><span class="kw4">int</span> id<span class="br0">&#41;</span>
<span class="br0">&#123;</span>
&nbsp; &nbsp; RawValue <span class="sy0">=</span> id<span class="sy0">;</span>
<span class="br0">&#125;</span>
&nbsp;
<span class="kw1">public</span> <span class="kw4">int</span> RawValue <span class="br0">&#123;</span> <span class="kw1">get</span><span class="sy0">;</span> <span class="kw1">set</span><span class="sy0">;</span> <span class="br0">&#125;</span>
&nbsp;
<span class="br0">&#125;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">public class OrganizationId : IIdentity&lt;int&gt;
{	
[Obsolete("Serialization use only", true)]
public OrganizationId() { }

public OrganizationId(int id)
{
	RawValue = id;
}

public int RawValue { get; set; }

}</pre></div></div>

<p>Here&#8217;s an Application object (also T4 generated) that references an AppId and OrganizationId:</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="csharp"><thead><tr><td colspan="2"  class="head">C#</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
</pre></td><td class="de1"><pre class="de1"><span class="kw1">public</span> <span class="kw4">class</span> ApplicationDTO
<span class="br0">&#123;</span> &nbsp; 
&nbsp; &nbsp; <span class="br0">&#91;</span>Obsolete<span class="br0">&#40;</span><span class="st0">&quot;Serialization use only&quot;</span>, <span class="kw1">true</span><span class="br0">&#41;</span><span class="br0">&#93;</span>
&nbsp; &nbsp; <span class="kw1">public</span> ApplicationDTO<span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span> <span class="br0">&#125;</span>
&nbsp;
&nbsp; &nbsp; <span class="kw1">public</span> ApplicationDTO<span class="br0">&#40;</span>AppId id, OrganizationId organizationid, <span class="kw4">string</span> name<span class="br0">&#41;</span>
&nbsp; &nbsp; <span class="br0">&#123;</span>
&nbsp; &nbsp; 
&nbsp; &nbsp; &nbsp; &nbsp; Id <span class="sy0">=</span> id<span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; OrganizationId <span class="sy0">=</span> organizationid<span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; Name <span class="sy0">=</span> name<span class="sy0">;</span>
&nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp; &nbsp; 
&nbsp; &nbsp; <span class="kw1">public</span> AppId Id <span class="br0">&#123;</span> <span class="kw1">get</span><span class="sy0">;</span> <span class="kw1">set</span><span class="sy0">;</span> <span class="br0">&#125;</span>
&nbsp; &nbsp; &nbsp; &nbsp; 
&nbsp; &nbsp; <span class="kw1">public</span> OrganizationId OrganizationId <span class="br0">&#123;</span> <span class="kw1">get</span><span class="sy0">;</span> <span class="kw1">set</span><span class="sy0">;</span> <span class="br0">&#125;</span>
&nbsp; &nbsp; &nbsp; &nbsp; 
&nbsp; &nbsp; <span class="kw1">public</span> <span class="kw4">string</span> Name <span class="br0">&#123;</span> <span class="kw1">get</span><span class="sy0">;</span> <span class="kw1">set</span><span class="sy0">;</span> <span class="br0">&#125;</span>
<span class="br0">&#125;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">public class ApplicationDTO
{	
	[Obsolete("Serialization use only", true)]
	public ApplicationDTO() { }

	public ApplicationDTO(AppId id, OrganizationId organizationid, string name)
	{
	
		Id = id;
		OrganizationId = organizationid;
		Name = name;
	}
	
	public AppId Id { get; set; }
		
	public OrganizationId OrganizationId { get; set; }
		
	public string Name { get; set; }
}</pre></div></div>

<p>Fetching these objects from the database requires no special markup over standard PetaPoco code, even though there are two int columns in the database that need to be expanded into very specific OrganizationId and AppId types in my ApplicationDTO object:</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="csharp"><thead><tr><td colspan="2"  class="head">C#</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
</pre></td><td class="de1"><pre class="de1"><span class="kw1">public</span> async Task<span class="sy0">&lt;</span>List<span class="sy0">&lt;</span>ApplicationDTO<span class="sy0">&gt;&gt;</span> GetAllAsync<span class="br0">&#40;</span>OrganizationId organizationId<span class="br0">&#41;</span>
&nbsp; &nbsp; <span class="kw1">using</span><span class="br0">&#40;</span><span class="kw1">var</span> db <span class="sy0">=</span> <span class="kw3">new</span> AsyncPoco<span class="sy0">.</span><span class="me1">Database</span><span class="br0">&#40;</span>_connection<span class="br0">&#41;</span><span class="br0">&#41;</span><span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">return</span> await db<span class="sy0">.</span><span class="me1">FetchAsync</span><span class="sy0">&lt;</span>ApplicationDTO<span class="sy0">&gt;</span><span class="br0">&#40;</span><span class="st0">&quot;SELECT * FROM Applications WHERE OrganizationId = @0;&quot;</span>, organizationId<span class="sy0">.</span><span class="me1">RawValue</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; <span class="br0">&#125;</span>
<span class="br0">&#125;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">public async Task&lt;List&lt;ApplicationDTO&gt;&gt; GetAllAsync(OrganizationId organizationId)
    using(var db = new AsyncPoco.Database(_connection)){
        return await db.FetchAsync&lt;ApplicationDTO&gt;("SELECT * FROM Applications WHERE OrganizationId = @0;", organizationId.RawValue);
    }
}</pre></div></div>

<p>This logic looks exactly the same as if I had two int properties on my object instead of two strongly typed identities and I get both my strongly typed C# objects and my simply typed integer database fields.</p>
<h2>Case 2: Mixed Array to varchar(MAX)</h2>
<p>In the second case, I have a workflow composed of steps, each described as an object Array (a parsed statement in a custom grammar). The database doesn’t need to know the details of the step beyond the fact that it hs an id, and order number, and that chunk of grammar representing the work fo the step. So in this case, I chose to map the step details from to a basic CSV value and store it in a varchar column.</p>
<p>This is the child-child-child class of the object I&#8217;m loading, UserStep:</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="csharp"><thead><tr><td colspan="2"  class="head">C#</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
</pre></td><td class="de1"><pre class="de1"><span class="kw1">public</span> <span class="kw4">class</span> UserStepDTO
<span class="br0">&#123;</span> &nbsp; 
&nbsp; &nbsp; <span class="br0">&#91;</span>Obsolete<span class="br0">&#40;</span><span class="st0">&quot;Serialization use only&quot;</span>, <span class="kw1">true</span><span class="br0">&#41;</span><span class="br0">&#93;</span>
&nbsp; &nbsp; <span class="kw1">public</span> UserStepDTO<span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span> <span class="br0">&#125;</span>
&nbsp;
&nbsp; &nbsp; <span class="kw1">public</span> UserStepDTO<span class="br0">&#40;</span>UserStepId id, <span class="kw4">int</span> ordernumber, <span class="kw4">object</span><span class="br0">&#91;</span><span class="br0">&#93;</span> step<span class="br0">&#41;</span>
&nbsp; &nbsp; <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; Id <span class="sy0">=</span> id<span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; OrderNumber <span class="sy0">=</span> ordernumber<span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; Step <span class="sy0">=</span> step<span class="sy0">;</span>
&nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp; &nbsp; 
&nbsp; &nbsp; <span class="kw1">public</span> UserStepId Id <span class="br0">&#123;</span> <span class="kw1">get</span><span class="sy0">;</span> <span class="kw1">set</span><span class="sy0">;</span> <span class="br0">&#125;</span>
&nbsp; &nbsp; &nbsp; &nbsp; 
&nbsp; &nbsp; <span class="kw1">public</span> <span class="kw4">int</span> OrderNumber <span class="br0">&#123;</span> <span class="kw1">get</span><span class="sy0">;</span> <span class="kw1">set</span><span class="sy0">;</span> <span class="br0">&#125;</span>
&nbsp; &nbsp; &nbsp; &nbsp; 
&nbsp; &nbsp; <span class="kw1">public</span> <span class="kw4">object</span><span class="br0">&#91;</span><span class="br0">&#93;</span> Step <span class="br0">&#123;</span> <span class="kw1">get</span><span class="sy0">;</span> <span class="kw1">set</span><span class="sy0">;</span> <span class="br0">&#125;</span>
<span class="br0">&#125;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">public class UserStepDTO
{	
	[Obsolete("Serialization use only", true)]
	public UserStepDTO() { }

	public UserStepDTO(UserStepId id, int ordernumber, object[] step)
	{
		Id = id;
		OrderNumber = ordernumber;
		Step = step;
	}
	
	public UserStepId Id { get; set; }
		
	public int OrderNumber { get; set; }
		
	public object[] Step { get; set; }
}</pre></div></div>

<p>I have a controlled set of types in the object array, so I just need to make sure I parse and encode them consistently.</p>
<p>Here is the table schema:</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="sql"><thead><tr><td colspan="2"  class="head">SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
</pre></td><td class="de1"><pre class="de1"><span class="kw1">CREATE</span> <span class="kw1">TABLE</span> dbo<span class="sy0">.</span>UserSteps<span class="br0">&#40;</span>
&nbsp; &nbsp; Id <span class="kw1">INT</span> <span class="kw1">IDENTITY</span><span class="br0">&#40;</span><span class="nu0">1</span><span class="sy0">,</span><span class="nu0">1</span><span class="br0">&#41;</span> <span class="kw1">NOT</span> <span class="kw1">NULL</span><span class="sy0">,</span>
&nbsp; &nbsp; OrderNumber <span class="kw1">INT</span> <span class="kw1">NOT</span> <span class="kw1">NULL</span><span class="sy0">,</span>
&nbsp; &nbsp; Step <span class="kw1">VARCHAR</span><span class="br0">&#40;</span><span class="kw1">MAX</span><span class="br0">&#41;</span> <span class="kw1">NOT</span> <span class="kw1">NULL</span><span class="sy0">,</span>
&nbsp; &nbsp; 
&nbsp; &nbsp; <span class="kw1">CONSTRAINT</span> PK_UserSteps <span class="kw1">PRIMARY</span> <span class="kw1">KEY</span> CLUSTERED<span class="br0">&#40;</span>Id <span class="kw1">ASC</span><span class="br0">&#41;</span><span class="sy0">,</span>
&nbsp; &nbsp; <span class="sy0">//</span> plus more constraints
<span class="br0">&#41;</span>;</pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">CREATE TABLE dbo.UserSteps(
	Id int IDENTITY(1,1) NOT NULL,
	OrderNumber int NOT NULL,
	Step varchar(MAX) NOT NULL,
	
	CONSTRAINT PK_UserSteps PRIMARY KEY CLUSTERED(Id ASC),
	// plus more constraints
);</pre></div></div>

<p>The actual query ends up being fairly complex, due to the upper layers of parent objects, but no extra work is done for this mapping.</p>
<h2>Registering Type Mapping with PetaPoco</h2>
<p>Even though I&#8217;m using AsyncPoco, a fork of PetaPoco that adds await/async capabilities, the method of defining and registering type mappers is the same.</p>
<p>I&#8217;m using the singleton registration method to register my mapper:</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="csharp"><thead><tr><td colspan="2"  class="head">C#</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
</pre></td><td class="de1"><pre class="de1"><span class="kw1">lock</span> <span class="br0">&#40;</span>_lock<span class="br0">&#41;</span>
<span class="br0">&#123;</span>
&nbsp; &nbsp; <span class="kw1">if</span> <span class="br0">&#40;</span>AsyncPoco<span class="sy0">.</span><span class="me1">Mappers</span><span class="sy0">.</span><span class="me1">GetMapper</span><span class="br0">&#40;</span><span class="kw3">typeof</span><span class="br0">&#40;</span>AppId<span class="br0">&#41;</span><span class="br0">&#41;</span> <span class="kw3">is</span> AsyncPoco<span class="sy0">.</span><span class="me1">StandardMapper</span><span class="br0">&#41;</span>
&nbsp; &nbsp; <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; AsyncPoco<span class="sy0">.</span><span class="me1">Mappers</span><span class="sy0">.</span><span class="me1">Register</span><span class="br0">&#40;</span>Assembly<span class="sy0">.</span><span class="me1">GetAssembly</span><span class="br0">&#40;</span><span class="kw3">typeof</span><span class="br0">&#40;</span>IIdentity<span class="br0">&#41;</span><span class="br0">&#41;</span>, <span class="kw3">new</span> IdentityMapper<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; <span class="br0">&#125;</span>
<span class="br0">&#125;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">lock (_lock)
{
    if (AsyncPoco.Mappers.GetMapper(typeof(AppId)) is AsyncPoco.StandardMapper)
    {
        AsyncPoco.Mappers.Register(Assembly.GetAssembly(typeof(IIdentity)), new IdentityMapper());
    }
}</pre></div></div>

<p>I can only register a mapper for a given type once, so I use a lock statement and see if my custom type is registered before attempting to register my increasingly poorly named &#8220;IdentityMapper&#8221;. I am actually registering this for anything that we attempt to load or save from that Assembly, which also includes objects like the UserStep one above. </p>
<p><i>Note: There are overloads to register for specific types instead of an entire assembly, but they weren&#8217;t working for me and I didn&#8217;t dig deep enough to determine what I had done wrong since I ended up wanting custom mapping for other objects in that assembly also.</i></p>
<p>This is my IMapper implementation for reading and writing the two cases above:</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="csharp"><thead><tr><td colspan="2"  class="head">C#</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
</pre></td><td class="de1"><pre class="de1"><span class="kw1">public</span> <span class="kw4">class</span> IdentityMapper <span class="sy0">:</span> IMapper
<span class="br0">&#123;</span>
&nbsp; &nbsp; <span class="kw1">private</span> StandardMapper standardMapper <span class="sy0">=</span> <span class="kw3">new</span> StandardMapper<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; <span class="kw1">public</span> ColumnInfo GetColumnInfo<span class="br0">&#40;</span>PropertyInfo pocoProperty<span class="br0">&#41;</span>
&nbsp; &nbsp; <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">return</span> standardMapper<span class="sy0">.</span><span class="me1">GetColumnInfo</span><span class="br0">&#40;</span>pocoProperty<span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp;
&nbsp; &nbsp; <span class="kw1">public</span> Func<span class="sy0">&lt;</span><span class="kw4">object</span>, <span class="kw4">object</span><span class="sy0">&gt;</span> GetFromDbConverter<span class="br0">&#40;</span>PropertyInfo targetProperty, Type sourceType<span class="br0">&#41;</span>
&nbsp; &nbsp; <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">var</span> t <span class="sy0">=</span> targetProperty<span class="sy0">.</span><span class="me1">PropertyType</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">if</span> <span class="br0">&#40;</span><span class="kw3">typeof</span><span class="br0">&#40;</span>IIdentity<span class="sy0">&lt;</span><span class="kw4">int</span><span class="sy0">&gt;</span><span class="br0">&#41;</span><span class="sy0">.</span><span class="me1">IsAssignableFrom</span><span class="br0">&#40;</span>t<span class="br0">&#41;</span><span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">var</span> ctor <span class="sy0">=</span> t<span class="sy0">.</span><span class="me1">GetConstructor</span><span class="br0">&#40;</span><span class="kw3">new</span> Type<span class="br0">&#91;</span><span class="br0">&#93;</span> <span class="br0">&#123;</span> <span class="kw3">typeof</span><span class="br0">&#40;</span>Int32<span class="br0">&#41;</span> <span class="br0">&#125;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">return</span> <span class="br0">&#40;</span>x<span class="br0">&#41;</span> <span class="sy0">=&gt;</span> ctor<span class="sy0">.</span><span class="me1">Invoke</span><span class="br0">&#40;</span><span class="kw3">new</span> <span class="kw4">object</span><span class="br0">&#91;</span><span class="br0">&#93;</span> <span class="br0">&#123;</span> <span class="br0">&#40;</span><span class="kw4">int</span><span class="br0">&#41;</span>x <span class="br0">&#125;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">else</span> <span class="kw1">if</span><span class="br0">&#40;</span>targetProperty<span class="sy0">.</span><span class="me1">Name</span><span class="sy0">.</span><span class="me1">Equals</span><span class="br0">&#40;</span><span class="st0">&quot;Step&quot;</span><span class="br0">&#41;</span> <span class="sy0">&amp;&amp;</span> t <span class="sy0">==</span> <span class="kw3">typeof</span><span class="br0">&#40;</span><span class="kw4">object</span><span class="br0">&#91;</span><span class="br0">&#93;</span><span class="br0">&#41;</span><span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">return</span> <span class="br0">&#40;</span>x<span class="br0">&#41;</span> <span class="sy0">=&gt;</span> BasicCsv<span class="sy0">.</span><span class="me1">Parse</span><span class="br0">&#40;</span><span class="br0">&#40;</span><span class="kw4">string</span><span class="br0">&#41;</span>x<span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">else</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">return</span> standardMapper<span class="sy0">.</span><span class="me1">GetFromDbConverter</span><span class="br0">&#40;</span>targetProperty, sourceType<span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp;
&nbsp; &nbsp; <span class="kw1">public</span> TableInfo GetTableInfo<span class="br0">&#40;</span>Type pocoType<span class="br0">&#41;</span>
&nbsp; &nbsp; <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">return</span> standardMapper<span class="sy0">.</span><span class="me1">GetTableInfo</span><span class="br0">&#40;</span>pocoType<span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp;
&nbsp; &nbsp; <span class="kw1">public</span> Func<span class="sy0">&lt;</span><span class="kw4">object</span>, <span class="kw4">object</span><span class="sy0">&gt;</span> GetToDbConverter<span class="br0">&#40;</span>PropertyInfo sourceProperty<span class="br0">&#41;</span>
&nbsp; &nbsp; <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">if</span> <span class="br0">&#40;</span><span class="kw3">typeof</span><span class="br0">&#40;</span>IIdentity<span class="sy0">&lt;</span><span class="kw4">int</span><span class="sy0">&gt;</span><span class="br0">&#41;</span><span class="sy0">.</span><span class="me1">IsAssignableFrom</span><span class="br0">&#40;</span>sourceProperty<span class="sy0">.</span><span class="me1">PropertyType</span><span class="br0">&#41;</span><span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">return</span> <span class="br0">&#40;</span>x<span class="br0">&#41;</span> <span class="sy0">=&gt;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">if</span> <span class="br0">&#40;</span>x <span class="sy0">==</span> <span class="kw1">null</span><span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">return</span> <span class="kw1">null</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">else</span> <span class="kw1">if</span> <span class="br0">&#40;</span><span class="kw3">typeof</span><span class="br0">&#40;</span>IIdentity<span class="sy0">&lt;</span><span class="kw4">int</span><span class="sy0">&gt;</span><span class="br0">&#41;</span><span class="sy0">.</span><span class="me1">IsAssignableFrom</span><span class="br0">&#40;</span>x<span class="sy0">.</span><span class="me1">GetType</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#41;</span><span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">return</span> <span class="br0">&#40;</span><span class="br0">&#40;</span>IIdentity<span class="sy0">&lt;</span><span class="kw4">int</span><span class="sy0">&gt;</span><span class="br0">&#41;</span>x<span class="br0">&#41;</span><span class="sy0">.</span><span class="me1">RawValue</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">else</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">return</span> x<span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">else</span> <span class="kw1">if</span> <span class="br0">&#40;</span>sourceProperty<span class="sy0">.</span><span class="me1">Name</span><span class="sy0">.</span><span class="me1">Equals</span><span class="br0">&#40;</span><span class="st0">&quot;Step&quot;</span><span class="br0">&#41;</span> <span class="sy0">&amp;&amp;</span> sourceProperty<span class="sy0">.</span><span class="me1">PropertyType</span> <span class="sy0">==</span> <span class="kw3">typeof</span><span class="br0">&#40;</span><span class="kw4">object</span><span class="br0">&#91;</span><span class="br0">&#93;</span><span class="br0">&#41;</span><span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">return</span> <span class="br0">&#40;</span>x<span class="br0">&#41;</span> <span class="sy0">=&gt;</span> BasicCsv<span class="sy0">.</span><span class="me1">Encode</span><span class="br0">&#40;</span><span class="br0">&#40;</span><span class="kw4">object</span><span class="br0">&#91;</span><span class="br0">&#93;</span><span class="br0">&#41;</span>x<span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">else</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">return</span> standardMapper<span class="sy0">.</span><span class="me1">GetToDbConverter</span><span class="br0">&#40;</span>sourceProperty<span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp; &nbsp;
<span class="br0">&#125;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">public class IdentityMapper : IMapper
{
    private StandardMapper standardMapper = new StandardMapper();

    public ColumnInfo GetColumnInfo(PropertyInfo pocoProperty)
    {
        return standardMapper.GetColumnInfo(pocoProperty);
    }

    public Func&lt;object, object&gt; GetFromDbConverter(PropertyInfo targetProperty, Type sourceType)
    {
        var t = targetProperty.PropertyType;
        if (typeof(IIdentity&lt;int&gt;).IsAssignableFrom(t))
        {
            var ctor = t.GetConstructor(new Type[] { typeof(Int32) });
            return (x) =&gt; ctor.Invoke(new object[] { (int)x });
        }
        else if(targetProperty.Name.Equals("Step") &amp;&amp; t == typeof(object[]))
        {
            return (x) =&gt; BasicCsv.Parse((string)x);
        }
        else
        {
            return standardMapper.GetFromDbConverter(targetProperty, sourceType);
        }
    }

    public TableInfo GetTableInfo(Type pocoType)
    {
        return standardMapper.GetTableInfo(pocoType);
    }

    public Func&lt;object, object&gt; GetToDbConverter(PropertyInfo sourceProperty)
    {
        if (typeof(IIdentity&lt;int&gt;).IsAssignableFrom(sourceProperty.PropertyType))
        {
            return (x) =&gt; {
                if (x == null)
                    return null;
                else if (typeof(IIdentity&lt;int&gt;).IsAssignableFrom(x.GetType()))
                    return ((IIdentity&lt;int&gt;)x).RawValue;
                else
                    return x;
                };
        }
        else if (sourceProperty.Name.Equals("Step") &amp;&amp; sourceProperty.PropertyType == typeof(object[]))
        {
            return (x) =&gt; BasicCsv.Encode((object[])x);
        }
        else
        {
            return standardMapper.GetToDbConverter(sourceProperty);
        }
    }
   
}</pre></div></div>

<p>Reading Case 1 (Identity): The GetFromDbConverter looks for IIdentity<int> and maps the basic integer from the database to the appropriately strongly-typed Identity object.</p>
<p>Writing Case 1 (Identity): The GetToDbConverter extracts the inner raw value and hands that off to store in the database.</p>
<p>Reading Case 2 (CSV): The GetFromFbConverter&#8217;s second case will perform a CSV parse to map a basic varchar(MAX) value to an object array, preserving string, date, and numeric values from the original.</p>
<p>Writing Case 2 (CSV): The GetToDbConverte ruses a simplistic CSV encoder to produce a value that can be consistently read by the prior method, without overhead for edge cases.</p>
<p>Note: I have found one exceptional case where this doesn&#8217;t work well. There are a couple cases where Petapoco assumes that it can use Convert.ChangeType on a value from the database to cast it into the expected value in your object, such as <A href="https://github.com/CollaboratingPlatypus/PetaPoco/blob/23a34d49b0c0ab74d04286174d8da9a1e1dc26b1/PetaPoco/Database.cs#L1349">autogenerated Identity fields during INSERTs</a>. Because it skips the use of mappers, you will receive a cast exception if you use a complex type for your identity field. If I find time, i&#8217;m going to dig in and write a patch for it.</p>
]]></content:encoded>
			<wfw:commentRss>/index.php/desktopdev/mstech/csharp/mapping-complex-types-tofrom-the-db-with-petapoco/feed/</wfw:commentRss>
		<slash:comments>0</slash:comments>
		</item>
		<item>
		<title>PetaPoco: Mapping related objects</title>
		<link>/index.php/desktopdev/mstech/csharp/petapoco-mapping-related-objects/</link>
		<comments>/index.php/desktopdev/mstech/csharp/petapoco-mapping-related-objects/#comments</comments>
		<pubDate>Mon, 07 May 2012 10:16:00 +0000</pubDate>
		<dc:creator><![CDATA[Eli Weinstock-Herman (tarwn)]]></dc:creator>
				<category><![CDATA[C#]]></category>
		<category><![CDATA[c#]]></category>
		<category><![CDATA[micro orm]]></category>
		<category><![CDATA[petapoco]]></category>
		<category><![CDATA[waiter theres sql in my orm]]></category>

		<guid isPermaLink="false">/index.php/2012/05/petapoco-mapping-related-objects/</guid>
		<description><![CDATA[In the prior PetaPoco post, I started to dig into many-to-one relationships a little. Chrissie followed up with yet more mapping behavior in his latest Simple.Data post, so I thought I would cover it in a bit more detail.]]></description>
				<content:encoded><![CDATA[<p>In the <a href="/index.php/DesktopDev/MSTech/CSharp/more-petapoco-id-s-and" title="More PetaPoco: Id's and Multi-POCO queries">prior PetaPoco post</a>, I started to dig into many-to-one relationships a little. Chrissie followed up with yet more mapping behavior in his <a href="/index.php/DesktopDev/MSTech/simple-data-and-complex-types" title="Simple.Data and complex types: many to one">latest Simple.Data post</a>, so I thought I would cover it in a bit more detail.</p>
<p><i>Note: Chrissie has also covered <a href="/index.php/DesktopDev/MSTech/simple-data-and-complex-types-1" title="Simple.Data and complex types: one to many">one-to-many</a> since I wrote this post the other night and has at least one more post following that</i></p>
<h2>Many flavors of Mapping Related Objects</h2>
<p>PetaPoco doesn&#8217;t offer the instrumentation for lazy loading, though it wouldn&#8217;t be too hard to add it to the T4 template that is provided to automatically generate POCOs from the database. Of course the POCOs would stop being POCOs at this point and I&#8217;d be showing off my ability to write lazy loading rather than the library at hand, so lets stick to what PetaPoco does out of the box.</p>
<p>That said, we still have a number of ways to map data from multi-table queries into objects.</p>
<p><i>Note: I am using the same tables and insert statements I used in the prior post to create the Person and Address table, so I&#8217;ve left those out of the examples below to reduce the noise a bit</i></p>
<h3>Automatic Mapping w/ Decorated Objects</h3>
<p>As we saw in the prior post, using a pair of decorated objects makes it pretty easy to map a JOIN to objects:</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="csharp"><thead><tr><td colspan="2"  class="head">C#</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
</pre></td><td class="de1"><pre class="de1"><span class="kw1">public</span> <span class="kw4">void</span> SelectUsingDecoratedClasses<span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; <span class="kw1">using</span> <span class="br0">&#40;</span><span class="kw1">var</span> db <span class="sy0">=</span> GetDatabase<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">var</span> results <span class="sy0">=</span> db<span class="sy0">.</span><span class="me1">Query</span><span class="sy0">&lt;</span>DecoratedPerson, DecoratedAddress<span class="sy0">&gt;</span><span class="br0">&#40;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="st_h">@&quot;SELECT Person.*, Address.* </span>
<span class="st_h">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; FROM Person </span>
<span class="st_h">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; INNER JOIN Address ON Person.AddressId = Address.Id </span>
<span class="st_h">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; WHERE Person.lastname=@0&quot;</span>, <span class="st0">&quot;lastname1&quot;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">foreach</span> <span class="br0">&#40;</span><span class="kw1">var</span> person <span class="kw1">in</span> results<span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Console<span class="sy0">.</span><span class="me1">WriteLine</span><span class="br0">&#40;</span><span class="st0">&quot;Person: {0} {1}&quot;</span>, person<span class="sy0">.</span><span class="me1">LastName</span>, person<span class="sy0">.</span><span class="me1">FirstName</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Console<span class="sy0">.</span><span class="me1">WriteLine</span><span class="br0">&#40;</span><span class="st0">&quot;Address: {0} {1}&quot;</span>, person<span class="sy0">.</span><span class="me1">Address</span><span class="sy0">.</span><span class="me1">Street</span>, person<span class="sy0">.</span><span class="me1">Address</span><span class="sy0">.</span><span class="me1">HouseNumber</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp; &nbsp; <span class="br0">&#125;</span>
<span class="br0">&#125;</span>
&nbsp;
<span class="br0">&#91;</span>TableName<span class="br0">&#40;</span><span class="st0">&quot;Person&quot;</span><span class="br0">&#41;</span><span class="br0">&#93;</span>
<span class="br0">&#91;</span>PrimaryKey<span class="br0">&#40;</span><span class="st0">&quot;Id&quot;</span>, autoIncrement <span class="sy0">=</span> <span class="kw1">true</span><span class="br0">&#41;</span><span class="br0">&#93;</span>
<span class="kw1">public</span> <span class="kw4">class</span> DecoratedPerson <span class="br0">&#123;</span>
&nbsp; &nbsp; <span class="kw1">public</span> <span class="kw4">int</span> Id <span class="br0">&#123;</span> <span class="kw1">get</span><span class="sy0">;</span> <span class="kw1">set</span><span class="sy0">;</span> <span class="br0">&#125;</span>
&nbsp; &nbsp; <span class="kw1">public</span> <span class="kw4">string</span> LastName <span class="br0">&#123;</span> <span class="kw1">get</span><span class="sy0">;</span> <span class="kw1">set</span><span class="sy0">;</span> <span class="br0">&#125;</span>
&nbsp; &nbsp; <span class="kw1">public</span> <span class="kw4">string</span> FirstName <span class="br0">&#123;</span> <span class="kw1">get</span><span class="sy0">;</span> <span class="kw1">set</span><span class="sy0">;</span> <span class="br0">&#125;</span>
&nbsp; &nbsp; <span class="kw1">public</span> <span class="kw4">int</span> AddressId <span class="br0">&#123;</span> <span class="kw1">get</span><span class="sy0">;</span> <span class="kw1">set</span><span class="sy0">;</span> <span class="br0">&#125;</span>
&nbsp;
&nbsp; &nbsp; <span class="br0">&#91;</span>Ignore<span class="br0">&#93;</span>
&nbsp; &nbsp; <span class="kw1">public</span> DecoratedAddress Address <span class="br0">&#123;</span> <span class="kw1">get</span><span class="sy0">;</span> <span class="kw1">set</span><span class="sy0">;</span> <span class="br0">&#125;</span>
&nbsp;
&nbsp; &nbsp; <span class="kw1">public</span> <span class="kw1">override</span> <span class="kw4">string</span> ToString<span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">return</span> <span class="kw4">String</span><span class="sy0">.</span><span class="me1">Format</span><span class="br0">&#40;</span><span class="st0">&quot;{0}: {1}, {2}&quot;</span>, Id, LastName, FirstName<span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; <span class="br0">&#125;</span>
<span class="br0">&#125;</span>
&nbsp;
<span class="br0">&#91;</span>TableName<span class="br0">&#40;</span><span class="st0">&quot;Address&quot;</span><span class="br0">&#41;</span><span class="br0">&#93;</span>
<span class="br0">&#91;</span>PrimaryKey<span class="br0">&#40;</span><span class="st0">&quot;Id&quot;</span>, autoIncrement <span class="sy0">=</span> <span class="kw1">true</span><span class="br0">&#41;</span><span class="br0">&#93;</span>
<span class="kw1">public</span> <span class="kw4">class</span> DecoratedAddress <span class="br0">&#123;</span>
&nbsp; &nbsp; <span class="kw1">public</span> <span class="kw4">int</span> Id <span class="br0">&#123;</span> <span class="kw1">get</span><span class="sy0">;</span> <span class="kw1">set</span><span class="sy0">;</span> <span class="br0">&#125;</span>
&nbsp; &nbsp; <span class="kw1">public</span> <span class="kw4">string</span> Street <span class="br0">&#123;</span> <span class="kw1">get</span><span class="sy0">;</span> <span class="kw1">set</span><span class="sy0">;</span> <span class="br0">&#125;</span>
&nbsp; &nbsp; <span class="kw1">public</span> <span class="kw4">string</span> HouseNumber <span class="br0">&#123;</span> <span class="kw1">get</span><span class="sy0">;</span> <span class="kw1">set</span><span class="sy0">;</span> <span class="br0">&#125;</span>
<span class="br0">&#125;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">public void SelectUsingDecoratedClasses() {
	using (var db = GetDatabase()) {
		var results = db.Query&lt;DecoratedPerson, DecoratedAddress&gt;(
					@"SELECT Person.*, Address.* 
					  FROM Person 
						INNER JOIN Address ON Person.AddressId = Address.Id 
					  WHERE Person.lastname=@0", "lastname1");

		foreach (var person in results) {
			Console.WriteLine("Person: {0} {1}", person.LastName, person.FirstName);
			Console.WriteLine("Address: {0} {1}", person.Address.Street, person.Address.HouseNumber);
		}
	}
}

[TableName("Person")]
[PrimaryKey("Id", autoIncrement = true)]
public class DecoratedPerson {
	public int Id { get; set; }
	public string LastName { get; set; }
	public string FirstName { get; set; }
	public int AddressId { get; set; }

	[Ignore]
	public DecoratedAddress Address { get; set; }

	public override string ToString() {
		return String.Format("{0}: {1}, {2}", Id, LastName, FirstName);
	}
}

[TableName("Address")]
[PrimaryKey("Id", autoIncrement = true)]
public class DecoratedAddress {
	public int Id { get; set; }
	public string Street { get; set; }
	public string HouseNumber { get; set; }
}</pre></div></div>

<h3>Defining Mappings</h3>
<p>While the previous example handled the mapping automatically and assigned the Address instance to the appropriate attribute in the Person, we also have the ability to define the mapping manually. </p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="csharp"><thead><tr><td colspan="2"  class="head">C#</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
</pre></td><td class="de1"><pre class="de1"><span class="kw1">public</span> <span class="kw4">void</span> SelectUsingMappingAndPOCO<span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; <span class="kw1">using</span> <span class="br0">&#40;</span><span class="kw1">var</span> db <span class="sy0">=</span> GetDatabase<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">var</span> results <span class="sy0">=</span> db<span class="sy0">.</span><span class="me1">Query</span><span class="sy0">&lt;</span>Person, Address, Person<span class="sy0">&gt;</span><span class="br0">&#40;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#40;</span>p, a<span class="br0">&#41;</span> <span class="sy0">=&gt;</span> <span class="br0">&#123;</span> p<span class="sy0">.</span><span class="me1">Address</span> <span class="sy0">=</span> a<span class="sy0">;</span> <span class="kw1">return</span> p<span class="sy0">;</span> <span class="br0">&#125;</span>,
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="st_h">@&quot;SELECT Person.*, Address.* </span>
<span class="st_h">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; FROM Person </span>
<span class="st_h">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; INNER JOIN Address ON Person.AddressId = Address.Id </span>
<span class="st_h">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; WHERE Person.lastname=@0&quot;</span>, <span class="st0">&quot;lastname1&quot;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; 
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">foreach</span> <span class="br0">&#40;</span><span class="kw1">var</span> person <span class="kw1">in</span> results<span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Console<span class="sy0">.</span><span class="me1">WriteLine</span><span class="br0">&#40;</span><span class="st0">&quot;Person: {0} {1}&quot;</span>, person<span class="sy0">.</span><span class="me1">LastName</span>, person<span class="sy0">.</span><span class="me1">FirstName</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Console<span class="sy0">.</span><span class="me1">WriteLine</span><span class="br0">&#40;</span><span class="st0">&quot;Address: {0} {1}&quot;</span>, person<span class="sy0">.</span><span class="me1">Address</span><span class="sy0">.</span><span class="me1">Street</span>, person<span class="sy0">.</span><span class="me1">Address</span><span class="sy0">.</span><span class="me1">HouseNumber</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp; &nbsp; <span class="br0">&#125;</span>
<span class="br0">&#125;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">public void SelectUsingMappingAndPOCO() {
	using (var db = GetDatabase()) {
		var results = db.Query&lt;Person, Address, Person&gt;(
					(p, a) =&gt; { p.Address = a; return p; },
					@"SELECT Person.*, Address.* 
						FROM Person 
						INNER JOIN Address ON Person.AddressId = Address.Id 
						WHERE Person.lastname=@0", "lastname1");
		
		foreach (var person in results) {
			Console.WriteLine("Person: {0} {1}", person.LastName, person.FirstName);
			Console.WriteLine("Address: {0} {1}", person.Address.Street, person.Address.HouseNumber);
		}
	}
}</pre></div></div>

<p>While this example achieves the same outcome as the prior one, the ability to provide our own mapping gives us some flexibility to add more complex logic during the mapping process, such as calculating additional field values or adding change tracking.</p>
<h3>Dynamics</h3>
<p>Of course PetaPoco also handles dynamics, however this is limited to outputting a single object to represent the results. This works well if we wanted to present a report view of the data and didn&#8217;t have any column names that repeat:</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="csharp"><thead><tr><td colspan="2"  class="head">C#</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
</pre></td><td class="de1"><pre class="de1"><span class="kw1">public</span> <span class="kw4">void</span> SelectWithDynamics<span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; <span class="kw1">using</span> <span class="br0">&#40;</span><span class="kw1">var</span> db <span class="sy0">=</span> GetDatabase<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">var</span> results <span class="sy0">=</span> db<span class="sy0">.</span><span class="me1">Query</span><span class="sy0">&lt;</span><span class="kw4">dynamic</span><span class="sy0">&gt;</span><span class="br0">&#40;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="st_h">@&quot;SELECT Person.*, Address.Street, Address.HouseNumber </span>
<span class="st_h">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; FROM Person </span>
<span class="st_h">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; INNER JOIN Address ON Person.AddressId = Address.Id </span>
<span class="st_h">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; WHERE Person.lastname=@0&quot;</span>, <span class="st0">&quot;lastname1&quot;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">foreach</span> <span class="br0">&#40;</span><span class="kw1">var</span> person <span class="kw1">in</span> results<span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Console<span class="sy0">.</span><span class="me1">WriteLine</span><span class="br0">&#40;</span><span class="st0">&quot;Person: {0} {1}&quot;</span>, person<span class="sy0">.</span><span class="me1">LastName</span>, person<span class="sy0">.</span><span class="me1">FirstName</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Console<span class="sy0">.</span><span class="me1">WriteLine</span><span class="br0">&#40;</span><span class="st0">&quot;Address: {0} {1}&quot;</span>, person<span class="sy0">.</span><span class="me1">Street</span>, person<span class="sy0">.</span><span class="me1">HouseNumber</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp; &nbsp; <span class="br0">&#125;</span>
<span class="br0">&#125;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">public void SelectWithDynamics() {
	using (var db = GetDatabase()) {
		var results = db.Query&lt;dynamic&gt;(
					@"SELECT Person.*, Address.Street, Address.HouseNumber 
						FROM Person 
						INNER JOIN Address ON Person.AddressId = Address.Id 
						WHERE Person.lastname=@0", "lastname1");

		foreach (var person in results) {
			Console.WriteLine("Person: {0} {1}", person.LastName, person.FirstName);
			Console.WriteLine("Address: {0} {1}", person.Street, person.HouseNumber);
		}
	}
}</pre></div></div>

<p>Instead of a dynamic, we could just as easily create a POCO for this report view, which would then be easy to offer as a service DTO or serializable object. </p>
<h3>One-to-Many</h3>
<p>Switching directions for a moment, let&#8217;s instead query for an address and all of it&#8217;s associated persons. First we&#8217;ll need an updated POCO:</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="csharp"><thead><tr><td colspan="2"  class="head">C#</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
</pre></td><td class="de1"><pre class="de1"><span class="kw1">public</span> <span class="kw4">class</span> AddressWithPeople <span class="sy0">:</span> Address <span class="br0">&#123;</span> 
&nbsp; &nbsp; <span class="kw1">public</span> List<span class="sy0">&lt;</span>Person<span class="sy0">&gt;</span> Persons <span class="br0">&#123;</span> <span class="kw1">get</span><span class="sy0">;</span> <span class="kw1">set</span><span class="sy0">;</span> <span class="br0">&#125;</span>
<span class="br0">&#125;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">public class AddressWithPeople : Address { 
	public List&lt;Person&gt; Persons { get; set; }
}</pre></div></div>

<p>Then with a slightly more complex mapping method, we can map a one-to-many to our new AddressWithPeople and existing Person POCOs:</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="csharp"><thead><tr><td colspan="2"  class="head">C#</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
</pre></td><td class="de1"><pre class="de1"><span class="kw1">public</span> <span class="kw4">void</span> SelectOneToMany<span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; <span class="kw1">using</span> <span class="br0">&#40;</span><span class="kw1">var</span> db <span class="sy0">=</span> GetDatabase<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">var</span> results <span class="sy0">=</span> db<span class="sy0">.</span><span class="me1">Query</span><span class="sy0">&lt;</span>AddressWithPeople, Person, AddressWithPeople<span class="sy0">&gt;</span><span class="br0">&#40;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw3">new</span> AddressToPersonRelator<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">.</span><span class="me1">MapIt</span>,
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="st_h">@&quot;SELECT Address.*, Person.*</span>
<span class="st_h">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; FROM Person </span>
<span class="st_h">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; INNER JOIN Address ON Person.AddressId = Address.Id </span>
<span class="st_h">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; WHERE Address.Id=@0&quot;</span>, <span class="nu0">1</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">foreach</span> <span class="br0">&#40;</span><span class="kw1">var</span> address <span class="kw1">in</span> results<span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Console<span class="sy0">.</span><span class="me1">WriteLine</span><span class="br0">&#40;</span><span class="st0">&quot;Address: {0} {1}&quot;</span>, address<span class="sy0">.</span><span class="me1">Street</span>, address<span class="sy0">.</span><span class="me1">HouseNumber</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">foreach</span><span class="br0">&#40;</span><span class="kw1">var</span> person <span class="kw1">in</span> address<span class="sy0">.</span><span class="me1">Persons</span><span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Console<span class="sy0">.</span><span class="me1">WriteLine</span><span class="br0">&#40;</span><span class="st0">&quot;tPerson: {0} {1}&quot;</span>, person<span class="sy0">.</span><span class="me1">LastName</span>, person<span class="sy0">.</span><span class="me1">FirstName</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp; &nbsp; <span class="br0">&#125;</span>
<span class="br0">&#125;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">public void SelectOneToMany() {
	using (var db = GetDatabase()) {
		var results = db.Query&lt;AddressWithPeople, Person, AddressWithPeople&gt;(
					new AddressToPersonRelator().MapIt,
					@"SELECT Address.*, Person.*
						FROM Person 
						INNER JOIN Address ON Person.AddressId = Address.Id 
						WHERE Address.Id=@0", 1);

		foreach (var address in results) {
			Console.WriteLine("Address: {0} {1}", address.Street, address.HouseNumber);
			foreach(var person in address.Persons)
				Console.WriteLine("tPerson: {0} {1}", person.LastName, person.FirstName);
		}
	}
}</pre></div></div>

<p>Of course, the magic in this case is the tricky part. In order to map the objects from the right side of the result set to the columns from my address on the left, I had to write a custom mapper that would keep track of the Address and add Person records to it while it remained the same. </p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="csharp"><thead><tr><td colspan="2"  class="head">C#</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
</pre></td><td class="de1"><pre class="de1"><span class="kw1">public</span> <span class="kw4">class</span> AddressToPersonRelator <span class="br0">&#123;</span>
&nbsp; &nbsp; <span class="kw1">public</span> AddressWithPeople current<span class="sy0">;</span>
&nbsp; &nbsp; 
&nbsp; &nbsp; <span class="kw1">public</span> AddressWithPeople MapIt<span class="br0">&#40;</span>AddressWithPeople a, Person p<span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">if</span> <span class="br0">&#40;</span>a <span class="sy0">==</span> <span class="kw1">null</span><span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">return</span> current<span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">if</span> <span class="br0">&#40;</span>a <span class="sy0">!=</span> <span class="kw1">null</span> <span class="sy0">&amp;&amp;</span> current <span class="sy0">!=</span> <span class="kw1">null</span> <span class="sy0">&amp;&amp;</span> a<span class="sy0">.</span><span class="me1">Id</span> <span class="sy0">==</span> current<span class="sy0">.</span><span class="me1">Id</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; current<span class="sy0">.</span><span class="me1">Persons</span><span class="sy0">.</span><span class="kw1">Add</span><span class="br0">&#40;</span>p<span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">return</span> <span class="kw1">null</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">var</span> prev <span class="sy0">=</span> current<span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; current <span class="sy0">=</span> a<span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; current<span class="sy0">.</span><span class="me1">Persons</span> <span class="sy0">=</span> <span class="kw3">new</span> List<span class="sy0">&lt;</span>Person<span class="sy0">&gt;</span><span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span> p <span class="br0">&#125;</span><span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">return</span> prev<span class="sy0">;</span>
&nbsp; &nbsp; <span class="br0">&#125;</span>
<span class="br0">&#125;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">public class AddressToPersonRelator {
	public AddressWithPeople current;
	
	public AddressWithPeople MapIt(AddressWithPeople a, Person p) {
		if (a == null)
			return current;

		if (a != null &amp;&amp; current != null &amp;&amp; a.Id == current.Id) {
			current.Persons.Add(p);
			return null;
		}

		var prev = current;
		current = a;
		current.Persons = new List&lt;Person&gt;() { p };

		return prev;
	}
}</pre></div></div>

<p>Even though I mostly copied this code from the official blogs, it was still more work than I would have liked just to map the records. However it wouldn&#8217;t be hard to convert this method to use generics and accept arguments for ID comparison and adding child record to the parent&#8217;s collection. Another option would be to use the <a href="http://nuget.org/packages/PetaPoco.RelationExtensions" title="PetaPoco.RelationExtensions package">PetaPoco.RelationExtensions nuget</a> package, which offers simplified methods for one-to-many and many-to-one mappings.</p>
<h2>Conclusion</h2>
<p>Although Chrissie and I have been posting in parallel, I think we&#8217;ve reached the point where the feature sets diverge. Simple.Data obviously offers a simpler looking syntax for more complex JOINs (especially if we start looking at one-to-many) and offers fluent, LINQ-based syntax. PetaPoco offers a very clean, very simple way to continue to use SQL to get our data and map it into POCOs or dynamics, with the flexibility to do it for us automatically, with help from decorators, or via specified mapping functions (not to mention the blazing performance). Hopefully seeing us play back and forth a bit will have inspired you to play with one or both of these in the future, and don&#8217;t be surprised if you see them reused in some of my future projects as well.</p>
<p>The examples above and several related ones are available in the <a href="https://github.com/tarwn/PetaPocoSample" title="Source on Github">source on GitHub</a> as well as examples of the methods for updates and the upserting Save() method.</p>
]]></content:encoded>
			<wfw:commentRss>/index.php/desktopdev/mstech/csharp/petapoco-mapping-related-objects/feed/</wfw:commentRss>
		<slash:comments>1</slash:comments>
		</item>
		<item>
		<title>More PetaPoco: Id&#8217;s and Multi-POCO queries</title>
		<link>/index.php/desktopdev/mstech/csharp/more-petapoco-id-s-and/</link>
		<comments>/index.php/desktopdev/mstech/csharp/more-petapoco-id-s-and/#comments</comments>
		<pubDate>Wed, 02 May 2012 08:23:00 +0000</pubDate>
		<dc:creator><![CDATA[Eli Weinstock-Herman (tarwn)]]></dc:creator>
				<category><![CDATA[C#]]></category>
		<category><![CDATA[c#]]></category>
		<category><![CDATA[i heard you like followups]]></category>
		<category><![CDATA[micro orm]]></category>
		<category><![CDATA[petapoco]]></category>

		<guid isPermaLink="false">/index.php/2012/05/more-petapoco-id-s-and/</guid>
		<description><![CDATA[So yesterday Chrissie and I did posts on Simple.Data and PetaPoco. Today he followed up with more complex examples, including keys and multiple table queries.

PetaPoco is built specifically with primary keys as a first class citizen, so it will be in&#8230;]]></description>
				<content:encoded><![CDATA[<p>So yesterday Chrissie and I did posts on <a href="/index.php/DesktopDev/MSTech/simple-data-and-vb-net" title="Simple.Data and VB.Net the beginning">Simple.Data</a> and <a href="/index.php/DesktopDev/MSTech/CSharp/playing-with-petapoco" title="Playing with PetaPoco">PetaPoco</a>. Today he <a href="/index.php/DesktopDev/MSTech/more-simple-data-with-vb" title="More Simple.Data with VB.Net: adding fields and tables">followed up</a> with more complex examples, including keys and multiple table queries.</p>
<p>PetaPoco is built specifically with primary keys as a first class citizen, so it will be interesting to see how it compares.</p>
<h2>Adding a column</h2>
<p>Like Simple.Data, adding a column to our database table is no problem at all. First lets add the column to our database, then we&#8217;ll look at how that affects both our existing code and an updated POCO with a matching field.</p>
<p>Like before, I&#8217;ll use the more concise syntax of PetaPoco to add the column instead of the standard ADO logic:</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="csharp"><thead><tr><td colspan="2"  class="head">C#</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
</pre></td><td class="de1"><pre class="de1"><span class="kw1">private</span> <span class="kw4">void</span> CreateTable<span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; <span class="kw1">using</span> <span class="br0">&#40;</span><span class="kw1">var</span> db <span class="sy0">=</span> <span class="kw3">new</span> Database<span class="br0">&#40;</span><span class="st0">&quot;DataSource=&quot;</span>test<span class="sy0">.</span><span class="me1">sdf</span><span class="st0">&quot;; Password=&quot;</span>chrissiespassword<span class="st0">&quot;&quot;</span>, <span class="st0">&quot;System.Data.SqlServerCe.4.0&quot;</span><span class="br0">&#41;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; db<span class="sy0">.</span><span class="me1">Execute</span><span class="br0">&#40;</span><span class="st0">&quot;CREATE TABLE Person (Id int IDENTITY(1,1) PRIMARY KEY, LastName nvarchar (40) NOT NULL, FirstName nvarchar (40));&quot;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; <span class="br0">&#125;</span>
<span class="br0">&#125;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">private void CreateTable() {
	using (var db = new Database("DataSource="test.sdf"; Password="chrissiespassword"", "System.Data.SqlServerCe.4.0")) {
		db.Execute("CREATE TABLE Person (Id int IDENTITY(1,1) PRIMARY KEY, LastName nvarchar (40) NOT NULL, FirstName nvarchar (40));");
	}
}</pre></div></div>

<p>After adding this additional column, we can still use the original POCO as PetaPoco will map the columns that are present in the POCO without complaining about leftovers. In the case where we allowed PetaPoco to build the query for us, we get more concise SQL that only queries for the columns  with matching properties in that smaller POCO class:</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="csharp"><thead><tr><td colspan="2"  class="head">C#</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
</pre></td><td class="de1"><pre class="de1"><span class="co1">// SQL = SELECT [Person].[LastName], [Person].[FirstName] FROM [Person] WHERE lastname=@0</span>
<span class="kw1">private</span> <span class="kw4">void</span> SelectDecoratedRecords<span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; <span class="kw1">using</span> <span class="br0">&#40;</span><span class="kw1">var</span> db <span class="sy0">=</span> GetDatabase<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">var</span> results <span class="sy0">=</span> db<span class="sy0">.</span><span class="me1">Query</span><span class="sy0">&lt;</span>DecoratedPerson<span class="sy0">&gt;</span><span class="br0">&#40;</span><span class="st0">&quot;WHERE lastname=@0&quot;</span>, <span class="st0">&quot;lastname1&quot;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; <span class="br0">&#125;</span>
<span class="br0">&#125;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">// SQL = SELECT [Person].[LastName], [Person].[FirstName] FROM [Person] WHERE lastname=@0
private void SelectDecoratedRecords() {
	using (var db = GetDatabase()) {
		var results = db.Query&lt;DecoratedPerson&gt;("WHERE lastname=@0", "lastname1");
	}
}</pre></div></div>

<p>Now let&#8217;s add the new column to both our raw POCO and the decorated POCO:</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="csharp"><thead><tr><td colspan="2"  class="head">C#</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
</pre></td><td class="de1"><pre class="de1">&nbsp; &nbsp; <span class="kw1">public</span> <span class="kw4">class</span> Person <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">public</span> <span class="kw4">int</span> Id <span class="br0">&#123;</span> <span class="kw1">get</span><span class="sy0">;</span> <span class="kw1">set</span><span class="sy0">;</span> <span class="br0">&#125;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">public</span> <span class="kw4">string</span> LastName <span class="br0">&#123;</span> <span class="kw1">get</span><span class="sy0">;</span> <span class="kw1">set</span><span class="sy0">;</span> <span class="br0">&#125;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">public</span> <span class="kw4">string</span> FirstName <span class="br0">&#123;</span> <span class="kw1">get</span><span class="sy0">;</span> <span class="kw1">set</span><span class="sy0">;</span> <span class="br0">&#125;</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">public</span> <span class="kw1">override</span> <span class="kw4">string</span> ToString<span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">return</span> <span class="kw4">String</span><span class="sy0">.</span><span class="me1">Format</span><span class="br0">&#40;</span><span class="st0">&quot;{0}: {1}, {2}&quot;</span>, Id, LastName, FirstName<span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp;
&nbsp; &nbsp; <span class="br0">&#91;</span>TableName<span class="br0">&#40;</span><span class="st0">&quot;Person&quot;</span><span class="br0">&#41;</span><span class="br0">&#93;</span>
&nbsp; &nbsp; <span class="br0">&#91;</span>PrimaryKey<span class="br0">&#40;</span><span class="st0">&quot;Id&quot;</span>,autoIncrement<span class="sy0">=</span><span class="kw1">true</span><span class="br0">&#41;</span><span class="br0">&#93;</span>
&nbsp; &nbsp; <span class="kw1">public</span> <span class="kw4">class</span> DecoratedPerson <span class="sy0">:</span> Person <span class="br0">&#123;</span> <span class="br0">&#125;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">	public class Person {
		public int Id { get; set; }
		public string LastName { get; set; }
		public string FirstName { get; set; }

		public override string ToString() {
			return String.Format("{0}: {1}, {2}", Id, LastName, FirstName);
		}
	}

	[TableName("Person")]
	[PrimaryKey("Id",autoIncrement=true)]
	public class DecoratedPerson : Person { }</pre></div></div>

<p>Without changing of the logic, the function from above will populate the extra column in our non-decorated POCO and the SQL generated by the short query version above will now include the Id column:</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="csharp"><thead><tr><td colspan="2"  class="head">C#</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
</pre></td><td class="de1"><pre class="de1"><span class="co1">//SQL: SELECT * FROM Person WHERE lastname=@0</span>
<span class="kw1">private</span> <span class="kw4">void</span> SelectRecords<span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; <span class="kw1">using</span> <span class="br0">&#40;</span><span class="kw1">var</span> db <span class="sy0">=</span> GetDatabase<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">var</span> results <span class="sy0">=</span> db<span class="sy0">.</span><span class="me1">Query</span><span class="sy0">&lt;</span>Person<span class="sy0">&gt;</span><span class="br0">&#40;</span><span class="st0">&quot;SELECT * FROM Person WHERE lastname=@0&quot;</span>, <span class="st0">&quot;lastname1&quot;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; <span class="br0">&#125;</span>
<span class="br0">&#125;</span>
&nbsp;
<span class="co1">//SQL: SELECT [Person].[Id], [Person].[LastName], [Person].[FirstName] FROM [Person] WHERE lastname=@0</span>
<span class="kw1">private</span> <span class="kw4">void</span> SelectDecoratedRecords<span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; <span class="kw1">using</span> <span class="br0">&#40;</span><span class="kw1">var</span> db <span class="sy0">=</span> GetDatabase<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">var</span> results <span class="sy0">=</span> db<span class="sy0">.</span><span class="me1">Query</span><span class="sy0">&lt;</span>DecoratedPerson<span class="sy0">&gt;</span><span class="br0">&#40;</span><span class="st0">&quot;WHERE lastname=@0&quot;</span>, <span class="st0">&quot;lastname1&quot;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; <span class="br0">&#125;</span>
<span class="br0">&#125;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">//SQL: SELECT * FROM Person WHERE lastname=@0
private void SelectRecords() {
	using (var db = GetDatabase()) {
		var results = db.Query&lt;Person&gt;("SELECT * FROM Person WHERE lastname=@0", "lastname1");
	}
}

//SQL: SELECT [Person].[Id], [Person].[LastName], [Person].[FirstName] FROM [Person] WHERE lastname=@0
private void SelectDecoratedRecords() {
	using (var db = GetDatabase()) {
		var results = db.Query&lt;DecoratedPerson&gt;("WHERE lastname=@0", "lastname1");
	}
}</pre></div></div>

<p>Yesterdays third insert option, using an undecorated object and counting on reflection to match up columns to properties, will fail now because it will attempt to insert a value into that ID field, but using it in a select would still work. The first option, where we supplied the name of the table, will have to be updated to also supply the name of the ID and a boolean to indicate that it is autoincrementing. The second option, inserting the decorated object, requires no changes at all. </p>
<h2>Adding a Table</h2>
<p>Following Chrissie&#8217;s lead, lets add an address table and an undeclared foreign key relationship from the Person table (I have to tease him about something).</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="csharp"><thead><tr><td colspan="2"  class="head">C#</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
</pre></td><td class="de1"><pre class="de1"><span class="kw1">private</span> <span class="kw4">void</span> CreateTables<span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; <span class="kw1">using</span> <span class="br0">&#40;</span><span class="kw1">var</span> db <span class="sy0">=</span> <span class="kw3">new</span> Database<span class="br0">&#40;</span><span class="st0">&quot;DataSource=&quot;</span>test<span class="sy0">.</span><span class="me1">sdf</span><span class="st0">&quot;; Password=&quot;</span>chrissiespassword<span class="st0">&quot;&quot;</span>, <span class="st0">&quot;System.Data.SqlServerCe.4.0&quot;</span><span class="br0">&#41;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; db<span class="sy0">.</span><span class="me1">Execute</span><span class="br0">&#40;</span><span class="st0">&quot;CREATE TABLE Person (Id int IDENTITY(1,1) PRIMARY KEY, LastName nvarchar (40) NOT NULL, FirstName nvarchar (40), AddressId int NOT NULL);&quot;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; db<span class="sy0">.</span><span class="me1">Execute</span><span class="br0">&#40;</span><span class="st0">&quot;CREATE TABLE Address (Id int IDENTITY(1,1) PRIMARY KEY, Street nvarchar (40) NOT NULL, HouseNumber nvarchar (10));&quot;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; <span class="br0">&#125;</span>
<span class="br0">&#125;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">private void CreateTables() {
	using (var db = new Database("DataSource="test.sdf"; Password="chrissiespassword"", "System.Data.SqlServerCe.4.0")) {
		db.Execute("CREATE TABLE Person (Id int IDENTITY(1,1) PRIMARY KEY, LastName nvarchar (40) NOT NULL, FirstName nvarchar (40), AddressId int NOT NULL);");
		db.Execute("CREATE TABLE Address (Id int IDENTITY(1,1) PRIMARY KEY, Street nvarchar (40) NOT NULL, HouseNumber nvarchar (10));");
	}
}</pre></div></div>

<p>And I will add an additional Person POCO to reflect the new column, as well as an Address POCO to reflect the new table. The simpler query logic is addictive, so I&#8217;ve decorated both POCOs (I&#8217;ll explain the ResultColumn later):</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="csharp"><thead><tr><td colspan="2"  class="head">C#</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
</pre></td><td class="de1"><pre class="de1"><span class="br0">&#91;</span>TableName<span class="br0">&#40;</span><span class="st0">&quot;Person&quot;</span><span class="br0">&#41;</span><span class="br0">&#93;</span>
<span class="br0">&#91;</span>PrimaryKey<span class="br0">&#40;</span><span class="st0">&quot;Id&quot;</span>, autoIncrement <span class="sy0">=</span> <span class="kw1">true</span><span class="br0">&#41;</span><span class="br0">&#93;</span>
<span class="kw1">public</span> <span class="kw4">class</span> Person <span class="br0">&#123;</span>
&nbsp; &nbsp; <span class="kw1">public</span> <span class="kw4">int</span> Id <span class="br0">&#123;</span> <span class="kw1">get</span><span class="sy0">;</span> <span class="kw1">set</span><span class="sy0">;</span> <span class="br0">&#125;</span>
&nbsp; &nbsp; <span class="kw1">public</span> <span class="kw4">string</span> LastName <span class="br0">&#123;</span> <span class="kw1">get</span><span class="sy0">;</span> <span class="kw1">set</span><span class="sy0">;</span> <span class="br0">&#125;</span>
&nbsp; &nbsp; <span class="kw1">public</span> <span class="kw4">string</span> FirstName <span class="br0">&#123;</span> <span class="kw1">get</span><span class="sy0">;</span> <span class="kw1">set</span><span class="sy0">;</span> <span class="br0">&#125;</span>
&nbsp; &nbsp; <span class="kw1">public</span> <span class="kw4">int</span> AddressId <span class="br0">&#123;</span> <span class="kw1">get</span><span class="sy0">;</span> <span class="kw1">set</span><span class="sy0">;</span> <span class="br0">&#125;</span>
&nbsp; &nbsp; <span class="br0">&#91;</span>ResultColumn<span class="br0">&#93;</span> <span class="kw1">public</span> Address Address <span class="br0">&#123;</span> <span class="kw1">get</span><span class="sy0">;</span> <span class="kw1">set</span><span class="sy0">;</span> <span class="br0">&#125;</span>
&nbsp;
&nbsp; &nbsp; <span class="kw1">public</span> <span class="kw1">override</span> <span class="kw4">string</span> ToString<span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">return</span> <span class="kw4">String</span><span class="sy0">.</span><span class="me1">Format</span><span class="br0">&#40;</span><span class="st0">&quot;{0}: {1}, {2}&quot;</span>, Id, LastName, FirstName<span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; <span class="br0">&#125;</span>
<span class="br0">&#125;</span>
&nbsp;
<span class="br0">&#91;</span>TableName<span class="br0">&#40;</span><span class="st0">&quot;Address&quot;</span><span class="br0">&#41;</span><span class="br0">&#93;</span>
<span class="br0">&#91;</span>PrimaryKey<span class="br0">&#40;</span><span class="st0">&quot;Id&quot;</span>, autoIncrement <span class="sy0">=</span> <span class="kw1">true</span><span class="br0">&#41;</span><span class="br0">&#93;</span>
<span class="kw1">public</span> <span class="kw4">class</span> Address <span class="br0">&#123;</span>
&nbsp; &nbsp; <span class="kw1">public</span> <span class="kw4">int</span> Id <span class="br0">&#123;</span> <span class="kw1">get</span><span class="sy0">;</span> <span class="kw1">set</span><span class="sy0">;</span> <span class="br0">&#125;</span>
&nbsp; &nbsp; <span class="kw1">public</span> <span class="kw4">string</span> Street <span class="br0">&#123;</span> <span class="kw1">get</span><span class="sy0">;</span> <span class="kw1">set</span><span class="sy0">;</span> <span class="br0">&#125;</span>
&nbsp; &nbsp; <span class="kw1">public</span> <span class="kw4">string</span> HouseNumber <span class="br0">&#123;</span> <span class="kw1">get</span><span class="sy0">;</span> <span class="kw1">set</span><span class="sy0">;</span> <span class="br0">&#125;</span>
<span class="br0">&#125;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">[TableName("Person")]
[PrimaryKey("Id", autoIncrement = true)]
public class Person {
	public int Id { get; set; }
	public string LastName { get; set; }
	public string FirstName { get; set; }
	public int AddressId { get; set; }
	[ResultColumn] public Address Address { get; set; }

	public override string ToString() {
		return String.Format("{0}: {1}, {2}", Id, LastName, FirstName);
	}
}

[TableName("Address")]
[PrimaryKey("Id", autoIncrement = true)]
public class Address {
	public int Id { get; set; }
	public string Street { get; set; }
	public string HouseNumber { get; set; }
}</pre></div></div>

<p>Following Chrissie&#8217;s lead, I&#8217;ll query for the related records separately first:</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="csharp"><thead><tr><td colspan="2"  class="head">C#</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
</pre></td><td class="de1"><pre class="de1"><span class="kw1">public</span> <span class="kw4">void</span> QuerySeperately<span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; <span class="co1">// already called CreateDatabase()</span>
&nbsp; &nbsp; <span class="co1">// already called CreateTables()</span>
&nbsp; &nbsp; <span class="kw1">using</span> <span class="br0">&#40;</span><span class="kw1">var</span> db <span class="sy0">=</span> GetDatabase<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; db<span class="sy0">.</span><span class="me1">Insert</span><span class="br0">&#40;</span><span class="kw3">new</span> Address<span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span> Street <span class="sy0">=</span> <span class="st0">&quot;street1&quot;</span>, HouseNumber <span class="sy0">=</span> <span class="st0">&quot;1&quot;</span> <span class="br0">&#125;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; db<span class="sy0">.</span><span class="me1">Insert</span><span class="br0">&#40;</span><span class="kw3">new</span> Person<span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span> LastName <span class="sy0">=</span> <span class="st0">&quot;lastname1&quot;</span>, FirstName <span class="sy0">=</span> <span class="st0">&quot;firstname1&quot;</span>, AddressId <span class="sy0">=</span> <span class="nu0">1</span> <span class="br0">&#125;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; db<span class="sy0">.</span><span class="me1">Insert</span><span class="br0">&#40;</span><span class="kw3">new</span> Person<span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span> LastName <span class="sy0">=</span> <span class="st0">&quot;lastname2&quot;</span>, FirstName <span class="sy0">=</span> <span class="st0">&quot;firstname2&quot;</span>, AddressId <span class="sy0">=</span> <span class="nu0">1</span> <span class="br0">&#125;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">var</span> results <span class="sy0">=</span> db<span class="sy0">.</span><span class="me1">Query</span><span class="sy0">&lt;</span>Person<span class="sy0">&gt;</span><span class="br0">&#40;</span><span class="st0">&quot;WHERE LastName=@0&quot;</span>, <span class="st0">&quot;lastname1&quot;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">foreach</span> <span class="br0">&#40;</span><span class="kw1">var</span> person <span class="kw1">in</span> results<span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Console<span class="sy0">.</span><span class="me1">WriteLine</span><span class="br0">&#40;</span><span class="st0">&quot;Person: {0} {1} {2}&quot;</span>, person<span class="sy0">.</span><span class="me1">Id</span>, person<span class="sy0">.</span><span class="me1">LastName</span>, person<span class="sy0">.</span><span class="me1">FirstName</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">var</span> address <span class="sy0">=</span> db<span class="sy0">.</span><span class="me1">Single</span><span class="sy0">&lt;</span>Address<span class="sy0">&gt;</span><span class="br0">&#40;</span><span class="st0">&quot;Where Id=@0&quot;</span>, person<span class="sy0">.</span><span class="me1">AddressId</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Console<span class="sy0">.</span><span class="me1">WriteLine</span><span class="br0">&#40;</span><span class="st0">&quot;Address: {0} {1}&quot;</span>, address<span class="sy0">.</span><span class="me1">Street</span>, address<span class="sy0">.</span><span class="me1">HouseNumber</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw4">int</span> count <span class="sy0">=</span> db<span class="sy0">.</span><span class="me1">ExecuteScalar</span><span class="sy0">&lt;</span><span class="kw4">int</span><span class="sy0">&gt;</span><span class="br0">&#40;</span><span class="st0">&quot;SELECT COUNT(*) FROM Person WHERE LastName=@0&quot;</span>, <span class="st0">&quot;lastname1&quot;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; Console<span class="sy0">.</span><span class="me1">WriteLine</span><span class="br0">&#40;</span><span class="st0">&quot;Count: &quot;</span> <span class="sy0">+</span> count<span class="sy0">.</span><span class="me1">ToString</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; <span class="br0">&#125;</span>
<span class="br0">&#125;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">public void QuerySeperately() {
	// already called CreateDatabase()
	// already called CreateTables()
	using (var db = GetDatabase()) {
		db.Insert(new Address() { Street = "street1", HouseNumber = "1" });
		db.Insert(new Person() { LastName = "lastname1", FirstName = "firstname1", AddressId = 1 });
		db.Insert(new Person() { LastName = "lastname2", FirstName = "firstname2", AddressId = 1 });

		var results = db.Query&lt;Person&gt;("WHERE LastName=@0", "lastname1");
		foreach (var person in results) {
			Console.WriteLine("Person: {0} {1} {2}", person.Id, person.LastName, person.FirstName);
			var address = db.Single&lt;Address&gt;("Where Id=@0", person.AddressId);
			Console.WriteLine("Address: {0} {1}", address.Street, address.HouseNumber);
		}

		int count = db.ExecuteScalar&lt;int&gt;("SELECT COUNT(*) FROM Person WHERE LastName=@0", "lastname1");
		Console.WriteLine("Count: " + count.ToString());
	}
}</pre></div></div>

<p>As he pointed out, this method doesn&#8217;t perform well. We can replace this with a single query using the <a href="http://www.toptensoftware.com/Articles/111/PetaPoco-Experimental-Multi-Poco-Queries" title="Read more about this at TopTen Software">Multi-POCO</a> support.</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="csharp"><thead><tr><td colspan="2"  class="head">C#</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
</pre></td><td class="de1"><pre class="de1"><span class="kw1">public</span> <span class="kw4">void</span> QueryMultiStyle<span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span> 
&nbsp; &nbsp; <span class="co1">// already called CreateDatabase()</span>
&nbsp; &nbsp; <span class="co1">// already called CreateTables()</span>
&nbsp; &nbsp; <span class="kw1">using</span> <span class="br0">&#40;</span><span class="kw1">var</span> db <span class="sy0">=</span> GetDatabase<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; db<span class="sy0">.</span><span class="me1">Insert</span><span class="br0">&#40;</span><span class="kw3">new</span> Address<span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span> Street <span class="sy0">=</span> <span class="st0">&quot;street1&quot;</span>, HouseNumber <span class="sy0">=</span> <span class="st0">&quot;1&quot;</span> <span class="br0">&#125;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; db<span class="sy0">.</span><span class="me1">Insert</span><span class="br0">&#40;</span><span class="kw3">new</span> Person<span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span> LastName <span class="sy0">=</span> <span class="st0">&quot;lastname1&quot;</span>, FirstName <span class="sy0">=</span> <span class="st0">&quot;firstname1&quot;</span>, AddressId <span class="sy0">=</span> <span class="nu0">1</span> <span class="br0">&#125;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; db<span class="sy0">.</span><span class="me1">Insert</span><span class="br0">&#40;</span><span class="kw3">new</span> Person<span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span> LastName <span class="sy0">=</span> <span class="st0">&quot;lastname1&quot;</span>, FirstName <span class="sy0">=</span> <span class="st0">&quot;firstname2&quot;</span>, AddressId <span class="sy0">=</span> <span class="nu0">1</span> <span class="br0">&#125;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">var</span> results <span class="sy0">=</span> db<span class="sy0">.</span><span class="me1">Query</span><span class="sy0">&lt;</span>Person, Address<span class="sy0">&gt;</span><span class="br0">&#40;</span><span class="st_h">@&quot;</span>
<span class="st_h">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; SELECT Person.*, Address.* </span>
<span class="st_h">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; FROM Person </span>
<span class="st_h">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; INNER JOIN Address ON Person.AddressId = Address.Id </span>
<span class="st_h">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; WHERE Person.lastname=@0&quot;</span>, <span class="st0">&quot;lastname1&quot;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">foreach</span> <span class="br0">&#40;</span><span class="kw1">var</span> person <span class="kw1">in</span> results<span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Console<span class="sy0">.</span><span class="me1">WriteLine</span><span class="br0">&#40;</span><span class="st0">&quot;Person: {0} {1}&quot;</span>, person<span class="sy0">.</span><span class="me1">LastName</span>, person<span class="sy0">.</span><span class="me1">FirstName</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Console<span class="sy0">.</span><span class="me1">WriteLine</span><span class="br0">&#40;</span><span class="st0">&quot;Address: {0} {1}&quot;</span>, person<span class="sy0">.</span><span class="me1">Address</span><span class="sy0">.</span><span class="me1">Street</span>, person<span class="sy0">.</span><span class="me1">Address</span><span class="sy0">.</span><span class="me1">HouseNumber</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp; &nbsp; <span class="br0">&#125;</span>
<span class="br0">&#125;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">public void QueryMultiStyle() { 
	// already called CreateDatabase()
	// already called CreateTables()
	using (var db = GetDatabase()) {
		db.Insert(new Address() { Street = "street1", HouseNumber = "1" });
		db.Insert(new Person() { LastName = "lastname1", FirstName = "firstname1", AddressId = 1 });
		db.Insert(new Person() { LastName = "lastname1", FirstName = "firstname2", AddressId = 1 });

		var results = db.Query&lt;Person, Address&gt;(@"
							  SELECT Person.*, Address.* 
							  FROM Person 
								INNER JOIN Address ON Person.AddressId = Address.Id 
							  WHERE Person.lastname=@0", "lastname1");
		foreach (var person in results) {
			Console.WriteLine("Person: {0} {1}", person.LastName, person.FirstName);
			Console.WriteLine("Address: {0} {1}", person.Address.Street, person.Address.HouseNumber);
		}
	}
}</pre></div></div>

<p>PetaPoco has the ability to map the results of JOINs to several objects, but it&#8217;s kind of tricky. The simplest method is to return the fields in the same order as the generic object list. What PetaPoco then does is attempt to process each column in the result from left to right, moving to the next object in line when it reaches a column that doesn&#8217;t exist in the first or has already been populated. So in this case, because both of the tables and POCOs have an &#8220;Id&#8221;, when the result set reaches the second id it makes the logical conclusion that it is time to start mapping the Address object. PetaPoco uses type detection in the Person object to locate a property to assign the Address instance to.</p>
<p>There is also more extensive capabilities available to use lambdas to manage the multi-POCO mapping on our own, and if we wanted to we could easily define a single POCO object that had all the necessary fields for both tables. Logic for <a href="http://www.toptensoftware.com/Articles/115/PetaPoco-Mapping-One-to-Many-and-Many-to-One-Relationships" title="PetaPoco - Mapping One-to-Many and Many-to-One Relationships">One-to-many joins</a> is more complex and I haven&#8217;t had time to dig fully into the intricacies yet.</p>
<p>The last trick was the ResultColumn attribute I used above. By default PetaPoco assumes that all of the properties in our POCO are going to be inserted into the database. ResultColumn properties are ignored for inserts and updates, but can still be selected into. In this case I&#8217;m using it to have PetaPoco ignore the column, but the real purpose would be to allow me to return an additional calculated column, aggregate, or other value that wouldn&#8217;t have meaning in an INSERT or UPDATE. </p>
<p><i>Note: There is an Ignore attribute that would have worked just as well and been a better fit, but then I wouldn&#8217;t have had a chance to talk about the ResultColumn <img src="https://s.w.org/images/core/emoji/2/72x72/1f642.png" alt="🙂" class="wp-smiley" style="height: 1em; max-height: 1em;" /></i></p>
<h2>Conclusion</h2>
<p>So there we go. We can add auto-incrementing IDs very easily, PetaPoco is smart enough to map partial objects, and there is some really neat stuff available for multi-POCO joins. I&#8217;ve continued to update the <a href="https://github.com/tarwn/PetaPocoSample" title="Sample code on github">github repository</a>, so feel free to grab a copy of the code and play around with yourself.</p>
]]></content:encoded>
			<wfw:commentRss>/index.php/desktopdev/mstech/csharp/more-petapoco-id-s-and/feed/</wfw:commentRss>
		<slash:comments>5</slash:comments>
		</item>
		<item>
		<title>Playing with PetaPoco</title>
		<link>/index.php/desktopdev/mstech/csharp/playing-with-petapoco/</link>
		<comments>/index.php/desktopdev/mstech/csharp/playing-with-petapoco/#comments</comments>
		<pubDate>Sun, 29 Apr 2012 12:40:00 +0000</pubDate>
		<dc:creator><![CDATA[Eli Weinstock-Herman (tarwn)]]></dc:creator>
				<category><![CDATA[C#]]></category>
		<category><![CDATA[c#]]></category>
		<category><![CDATA[lazy sunday]]></category>
		<category><![CDATA[micro orm]]></category>
		<category><![CDATA[petapoco]]></category>

		<guid isPermaLink="false">/index.php/2012/04/playing-with-petapoco/</guid>
		<description><![CDATA[Since Chrissie is playing around with Simple.Data today, I found some time to play with PetaPoco. PetaPoco is a single file micro ORM that uses MSIL generation to do it's magic. As the name suggests, it works with concrete POCOs, though support for dyna&#8230;]]></description>
				<content:encoded><![CDATA[<p>Since Chrissie is playing around with <a href="/index.php/DesktopDev/MSTech/simple-data-and-vb-net" title="Read Chrissie's post">Simple.Data</a> today, I found some time to play with <a href="http://www.toptensoftware.com/petapoco/" title="Main Site for PetaPoco">PetaPoco</a>. PetaPoco is a single file micro ORM that uses MSIL generation to do it&#8217;s magic. As the name suggests, it works with concrete POCOs, though support for dynamics is also being tested. It is designed to be fast and doesn&#8217;t try to reimplement SQL, so double win in my book. PetaPoco was created by Brad Robinson (<a href="http://www.toptensoftware.com/blog/" title="topten software blog">b</a> | <a href="http://twitter.com/toptensoftware" title="TopTenSoftware on twitter">t</a>).</p>
<p>It has been on my list to try for a while, so today seemed like a good day for it.</p>
<h2>Setting it up</h2>
<p>Setup is simple using Nuget:</p>
<ul>
<li>Install-Package <a href="http://nuget.org/List/Packages/PetaPoco" title="PetaPoco on nuget">PetaPoco</a></li>
<li>Install-Package <a href="http://nuget.org/packages/SqlServerCompact"
 title="SqlServerCompact on nuget">SqlServerCompact</a></li>
</ul>
<p>PetaPoco comes with a T4 template to generate POCOs from a database, all you have to do is add a connection string to your config and run the transform. This is a neat feature, but I didn&#8217;t plan to use it for this post so I excluded the files from my project.</p>
<p>PetaPoco supports SQL Server, SQL Server CE, MySQL, PostgreSQL and Oracle, and works with .Net 3.5 and Mono 2.6 forward. Documentation is available via the <a href="http://www.toptensoftware.com/petapoco/" title="PetaPoco main page">Main Page</a> and <a href="http://www.toptensoftware.com/Categories/PetaPoco" title="PetaPoco blog posts">blog posts</a>.</p>
<p>As Chrissie did in his post, we&#8217;re going to first create a Compact SQL database, except we&#8217;ll be doing it in C#.</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="csharp"><thead><tr><td colspan="2"  class="head">C#</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
</pre></td><td class="de1"><pre class="de1"><span class="kw1">private</span> SqlCeEngine CreateDatabase<span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; <span class="kw1">if</span> <span class="br0">&#40;</span>File<span class="sy0">.</span><span class="me1">Exists</span><span class="br0">&#40;</span><span class="st0">&quot;test.sdf&quot;</span><span class="br0">&#41;</span><span class="br0">&#41;</span> File<span class="sy0">.</span><span class="me1">Delete</span><span class="br0">&#40;</span><span class="st0">&quot;test.sdf&quot;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; <span class="kw4">string</span> connectionString <span class="sy0">=</span> <span class="st0">&quot;DataSource=&quot;</span>test<span class="sy0">.</span><span class="me1">sdf</span><span class="st0">&quot;; Password=&quot;</span>chrissiespassword<span class="st0">&quot;&quot;</span><span class="sy0">;</span>
&nbsp; &nbsp; <span class="kw1">var</span> en <span class="sy0">=</span> <span class="kw3">new</span> SqlCeEngine<span class="br0">&#40;</span>connectionString<span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; en<span class="sy0">.</span><span class="me1">CreateDatabase</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; <span class="kw1">return</span> en<span class="sy0">;</span>
<span class="br0">&#125;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">private SqlCeEngine CreateDatabase() {
	if (File.Exists("test.sdf")) File.Delete("test.sdf");

	string connectionString = "DataSource="test.sdf"; Password="chrissiespassword"";
	var en = new SqlCeEngine(connectionString);
	en.CreateDatabase();
	return en;
}</pre></div></div>

<p>Now that we have Chrissie&#8217;s database, lets add his table.</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="csharp"><thead><tr><td colspan="2"  class="head">C#</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
</pre></td><td class="de1"><pre class="de1"><span class="kw1">private</span> <span class="kw4">void</span> CreateTable<span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; <span class="kw1">using</span> <span class="br0">&#40;</span><span class="kw1">var</span> db <span class="sy0">=</span> <span class="kw3">new</span> Database<span class="br0">&#40;</span><span class="st0">&quot;DataSource=&quot;</span>test<span class="sy0">.</span><span class="me1">sdf</span><span class="st0">&quot;; Password=&quot;</span>chrissiespassword<span class="st0">&quot;&quot;</span>, <span class="st0">&quot;System.Data.SqlServerCe.4.0&quot;</span><span class="br0">&#41;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; db<span class="sy0">.</span><span class="me1">Execute</span><span class="br0">&#40;</span><span class="st0">&quot;CREATE TABLE Person (LastName nvarchar (40) NOT NULL, FirstName nvarchar (40))&quot;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; <span class="br0">&#125;</span>
<span class="br0">&#125;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">private void CreateTable() {
	using (var db = new Database("DataSource="test.sdf"; Password="chrissiespassword"", "System.Data.SqlServerCe.4.0")) {
		db.Execute("CREATE TABLE Person (LastName nvarchar (40) NOT NULL, FirstName nvarchar (40))");
	}
}</pre></div></div>

<p>This statement was quite a bit shorter using PetaPoco then it was with Simple.Data. The Database object takes care of the connection and command work for us, leaving us just the bits that are specific to our individual scenario. We still have the option of providing an IDbConnection if we want, which would be handy if we were using something like Sam Saffron&#8217;s <a href="http://miniprofiler.com/" title="MiniProfiler">MiniProfiler</a> and wanted to pass in a profiled connection object.</p>
<p>Because we want to play with concrete POCOs, I&#8217;m going to add a very plain POCO and a very basic decorated POCO:</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="csharp"><thead><tr><td colspan="2"  class="head">C#</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
</pre></td><td class="de1"><pre class="de1"><span class="kw1">public</span> <span class="kw4">class</span> Person <span class="br0">&#123;</span>
&nbsp; &nbsp; <span class="kw1">public</span> <span class="kw4">string</span> LastName <span class="br0">&#123;</span> <span class="kw1">get</span><span class="sy0">;</span> <span class="kw1">set</span><span class="sy0">;</span> <span class="br0">&#125;</span>
&nbsp; &nbsp; <span class="kw1">public</span> <span class="kw4">string</span> FirstName <span class="br0">&#123;</span> <span class="kw1">get</span><span class="sy0">;</span> <span class="kw1">set</span><span class="sy0">;</span> <span class="br0">&#125;</span>
<span class="br0">&#125;</span>
&nbsp;
<span class="br0">&#91;</span>PetaPoco<span class="sy0">.</span><span class="me1">TableName</span><span class="br0">&#40;</span><span class="st0">&quot;Person&quot;</span><span class="br0">&#41;</span><span class="br0">&#93;</span>
<span class="kw1">public</span> <span class="kw4">class</span> DecoratedPerson <span class="sy0">:</span> Person <span class="br0">&#123;</span> <span class="br0">&#125;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">public class Person {
	public string LastName { get; set; }
	public string FirstName { get; set; }
}

[PetaPoco.TableName("Person")]
public class DecoratedPerson : Person { }</pre></div></div>

<p>There are also attributes for the primary key* and the ability to explicitly define columns so PetaPoco will know which columns should be included in queries and which should not.</p>
<p><i>I have to say I was surprised Chrissie didn&#8217;t include a Primary Key given how many DBAs and DB Developers also blog here, brave man <img src="https://s.w.org/images/core/emoji/2/72x72/1f609.png" alt="😉" class="wp-smiley" style="height: 1em; max-height: 1em;" /></i></p>
<p>So as chrissie pointed out in his post, we&#8217;ve got the basic setup behind us and can now move forward to interacting with our new database.</p>
<h2>PetaPoco</h2>
<p>With a database created, lets go ahead and add some data to play with.</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="csharp"><thead><tr><td colspan="2"  class="head">C#</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
</pre></td><td class="de1"><pre class="de1">db<span class="sy0">.</span><span class="me1">Insert</span><span class="br0">&#40;</span><span class="st0">&quot;Person&quot;</span>, <span class="kw1">null</span>, <span class="kw3">new</span> Person<span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span> LastName <span class="sy0">=</span> <span class="st0">&quot;lastname1&quot;</span>, FirstName <span class="sy0">=</span> <span class="st0">&quot;firstname1&quot;</span> <span class="br0">&#125;</span><span class="br0">&#41;</span><span class="sy0">;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">db.Insert("Person", null, new Person() { LastName = "lastname1", FirstName = "firstname1" });</pre></div></div>

<p>The first overload of the Insert() method takes a table name, primary key name, and the POCO instance to insert. if we don&#8217;t mind add some decoration to our Person object, we can decorate the POCO with the table name and shrink it to this:</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="csharp"><thead><tr><td colspan="2"  class="head">C#</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
</pre></td><td class="de1"><pre class="de1">db<span class="sy0">.</span><span class="me1">Insert</span><span class="br0">&#40;</span><span class="kw3">new</span> DecoratedPerson<span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span> LastName <span class="sy0">=</span> <span class="st0">&quot;lastname2&quot;</span>, FirstName <span class="sy0">=</span> <span class="st0">&quot;firstname2&quot;</span> <span class="br0">&#125;</span><span class="br0">&#41;</span><span class="sy0">;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">db.Insert(new DecoratedPerson() { LastName = "lastname2", FirstName = "firstname2" });</pre></div></div>

<p>This method uses the table name attribute to generate the insert.</p>
<p>And last, if we want to keep our table and object names in sync, we can let reflection magically figure it out:</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="csharp"><thead><tr><td colspan="2"  class="head">C#</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
</pre></td><td class="de1"><pre class="de1">db<span class="sy0">.</span><span class="me1">Insert</span><span class="br0">&#40;</span><span class="kw3">new</span> Person<span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span> LastName <span class="sy0">=</span> <span class="st0">&quot;lastname3&quot;</span>, FirstName <span class="sy0">=</span> <span class="st0">&quot;firstname3&quot;</span> <span class="br0">&#125;</span><span class="br0">&#41;</span><span class="sy0">;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">db.Insert(new Person() { LastName = "lastname3", FirstName = "firstname3" });</pre></div></div>

<p>Now that we have some data in our database, lets look at a few ways to get it out.</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="csharp"><thead><tr><td colspan="2"  class="head">C#</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
</pre></td><td class="de1"><pre class="de1"><span class="co1">// select statement</span>
<span class="kw1">var</span> results <span class="sy0">=</span> db<span class="sy0">.</span><span class="me1">Query</span><span class="sy0">&lt;</span>Person<span class="sy0">&gt;</span><span class="br0">&#40;</span><span class="st0">&quot;SELECT * FROM Person WHERE lastname=@0&quot;</span>, <span class="st0">&quot;lastname1&quot;</span><span class="br0">&#41;</span><span class="sy0">;</span>
<span class="co1">// let PetaPoco generate the SELECT portion </span>
<span class="kw1">var</span> results <span class="sy0">=</span> db<span class="sy0">.</span><span class="me1">Query</span><span class="sy0">&lt;</span>DecoratedPerson<span class="sy0">&gt;</span><span class="br0">&#40;</span><span class="st0">&quot;WHERE lastname=@0&quot;</span>, <span class="st0">&quot;lastname1&quot;</span><span class="br0">&#41;</span><span class="sy0">;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">// select statement
var results = db.Query&lt;Person&gt;("SELECT * FROM Person WHERE lastname=@0", "lastname1");
// let PetaPoco generate the SELECT portion 
var results = db.Query&lt;DecoratedPerson&gt;("WHERE lastname=@0", "lastname1");</pre></div></div>

<p>We can execute a parameterized SQL statement fairly easily by using numbered parameters that will line up with the additional arguments we provide. In the second case we&#8217;re actually letting PetaPoco generate the SELECT portion of the statement for us, which will resolve to: <code class="codespan">SELECT [Person].[LastName], [Person].[FirstName] FROM [Person] WHERE lastname=@0</code>.</p>
<p>Executing specifically for a single record instead of querying for a collection is similarly straight forward:</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="csharp"><thead><tr><td colspan="2"  class="head">C#</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
</pre></td><td class="de1"><pre class="de1"><span class="co1">// select statement</span>
<span class="kw1">var</span> result <span class="sy0">=</span> db<span class="sy0">.</span><span class="me1">Single</span><span class="sy0">&lt;</span>Person<span class="sy0">&gt;</span><span class="br0">&#40;</span><span class="st0">&quot;SELECT * FROM Person WHERE lastname=@0&quot;</span>, <span class="st0">&quot;lastname1&quot;</span><span class="br0">&#41;</span><span class="sy0">;</span>
Console<span class="sy0">.</span><span class="me1">WriteLine</span><span class="br0">&#40;</span><span class="kw4">String</span><span class="sy0">.</span><span class="me1">Format</span><span class="br0">&#40;</span><span class="st0">&quot;{0}: {1}&quot;</span>, result<span class="sy0">.</span><span class="me1">GetType</span><span class="br0">&#40;</span><span class="br0">&#41;</span>, result<span class="br0">&#41;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
<span class="co1">// let PetaPoco generate the SELECT portion </span>
<span class="kw1">var</span> result <span class="sy0">=</span> db<span class="sy0">.</span><span class="me1">Single</span><span class="sy0">&lt;</span>DecoratedPerson<span class="sy0">&gt;</span><span class="br0">&#40;</span><span class="st0">&quot;WHERE lastname=@0&quot;</span>, <span class="st0">&quot;lastname1&quot;</span><span class="br0">&#41;</span><span class="sy0">;</span>
Console<span class="sy0">.</span><span class="me1">WriteLine</span><span class="br0">&#40;</span><span class="kw4">String</span><span class="sy0">.</span><span class="me1">Format</span><span class="br0">&#40;</span><span class="st0">&quot;{0}: {1}&quot;</span>, result<span class="sy0">.</span><span class="me1">GetType</span><span class="br0">&#40;</span><span class="br0">&#41;</span>, result<span class="br0">&#41;</span><span class="br0">&#41;</span><span class="sy0">;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">// select statement
var result = db.Single&lt;Person&gt;("SELECT * FROM Person WHERE lastname=@0", "lastname1");
Console.WriteLine(String.Format("{0}: {1}", result.GetType(), result));

// let PetaPoco generate the SELECT portion 
var result = db.Single&lt;DecoratedPerson&gt;("WHERE lastname=@0", "lastname1");
Console.WriteLine(String.Format("{0}: {1}", result.GetType(), result));</pre></div></div>

<p>And if we examine the output we&#8217;ll see they are concrete instances of our POCOs, not dynamics or proxies:<br />
<monospace><br />
PetaPocoSample.Person: lastname1, firstname1<br />
PetaPocoSample.DecoratedPerson: lastname1, firstname1<br />
</monospace></p>
<p>If we then follow Chrissie&#8217;s lead and add two records into the database that will match this criteria, we&#8217;ll receive an exception, as we would expect from a Single call. PetaPoco also offers a <code class="codespan">First&lt;T&gt;</code> implementation we could use in this situation, a <code class="codespan">SkipTake&lt;T&gt;</code> we could use to get the 2nd record, and a number of different ways to query multiple records out of the database:</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="csharp"><thead><tr><td colspan="2"  class="head">C#</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
</pre></td><td class="de1"><pre class="de1"><span class="co1">// T</span>
<span class="kw1">var</span> result <span class="sy0">=</span> db<span class="sy0">.</span><span class="me1">First</span><span class="sy0">&lt;</span>DecoratedPerson<span class="sy0">&gt;</span><span class="br0">&#40;</span><span class="st0">&quot;WHERE lastname=@0&quot;</span>, <span class="st0">&quot;lastname1&quot;</span><span class="br0">&#41;</span><span class="sy0">;</span>
<span class="co1">// List&lt;T&gt;</span>
<span class="kw1">var</span> results <span class="sy0">=</span> db<span class="sy0">.</span><span class="me1">SkipTake</span><span class="sy0">&lt;</span>DecoratedPerson<span class="sy0">&gt;</span><span class="br0">&#40;</span><span class="nu0">1</span>, <span class="nu0">1</span>, <span class="st0">&quot;WHERE lastname=@0&quot;</span>, <span class="st0">&quot;lastname1&quot;</span><span class="br0">&#41;</span><span class="sy0">;</span>
<span class="co1">//IEnumerable&lt;T&gt;</span>
<span class="kw1">var</span> results2 <span class="sy0">=</span> db<span class="sy0">.</span><span class="me1">Query</span><span class="sy0">&lt;</span>DecoratedPerson<span class="sy0">&gt;</span><span class="br0">&#40;</span><span class="st0">&quot;WHERE lastname=@0&quot;</span>, <span class="st0">&quot;lastname1&quot;</span><span class="br0">&#41;</span><span class="sy0">;</span>
<span class="co1">//List&lt;T&gt;</span>
<span class="kw1">var</span> results3 <span class="sy0">=</span> db<span class="sy0">.</span><span class="me1">Fetch</span><span class="sy0">&lt;</span>DecoratedPerson<span class="sy0">&gt;</span><span class="br0">&#40;</span><span class="st0">&quot;WHERE lastname=@0&quot;</span>, <span class="st0">&quot;lastname1&quot;</span><span class="br0">&#41;</span><span class="sy0">;</span>
<span class="co1">//Page&lt;T&gt; - page #2 and page size of 1</span>
<span class="kw1">var</span> results4 <span class="sy0">=</span> db<span class="sy0">.</span><span class="me1">Page</span><span class="sy0">&lt;</span>DecoratedPerson<span class="sy0">&gt;</span><span class="br0">&#40;</span><span class="nu0">2</span>, <span class="nu0">1</span>, <span class="st0">&quot;WHERE lastname=@0&quot;</span>, <span class="st0">&quot;lastname1&quot;</span><span class="br0">&#41;</span><span class="sy0">;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">// T
var result = db.First&lt;DecoratedPerson&gt;("WHERE lastname=@0", "lastname1");
// List&lt;T&gt;
var results = db.SkipTake&lt;DecoratedPerson&gt;(1, 1, "WHERE lastname=@0", "lastname1");
//IEnumerable&lt;T&gt;
var results2 = db.Query&lt;DecoratedPerson&gt;("WHERE lastname=@0", "lastname1");
//List&lt;T&gt;
var results3 = db.Fetch&lt;DecoratedPerson&gt;("WHERE lastname=@0", "lastname1");
//Page&lt;T&gt; - page #2 and page size of 1
var results4 = db.Page&lt;DecoratedPerson&gt;(2, 1, "WHERE lastname=@0", "lastname1");</pre></div></div>

<h2>Conclusion</h2>
<p>I haven&#8217;t done much with PetaPoco yet, but just from playing with these basic queries I can tell I want to spend some more time with it. The syntax is clean and focuses on simplifying the bits that are repeated in so many projects (connection and command wrangling, mapping) while leaving me the full power of SQL and not injecting an additional layer of abstraction to try to work through. On top of that, it performs very closely to the speed of hand-coded SqlDataReader statements (results available on <a href="http://code.google.com/p/dapper-dot-net/#Performance_of_SELECT_mapping_over_500_iterations_-_POCO_seriali" title="dapper-dot-net">the dapper-dot-net</a> page).</p>
<p>My sample code is up on <a href="https://github.com/tarwn/PetaPocoSample" title="Sample code on github">GitHub</a>.</p>
]]></content:encoded>
			<wfw:commentRss>/index.php/desktopdev/mstech/csharp/playing-with-petapoco/feed/</wfw:commentRss>
		<slash:comments>2</slash:comments>
		</item>
	</channel>
</rss>
