<?xml version="1.0" encoding="UTF-8"?><rss version="2.0"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:atom="http://www.w3.org/2005/Atom"
	xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
	xmlns:slash="http://purl.org/rss/1.0/modules/slash/"
	>

<channel>
	<title>visual studio &#8211; LessthanDot</title>
	<atom:link href="/index.php/tag/visual-studio/feed/" rel="self" type="application/rss+xml" />
	<link>/</link>
	<description>A Technical Community for IT Professionals</description>
	<lastBuildDate>Sat, 09 Mar 2019 12:50:36 +0000</lastBuildDate>
	<language>en-US</language>
	<sy:updatePeriod>hourly</sy:updatePeriod>
	<sy:updateFrequency>1</sy:updateFrequency>
	<generator>https://wordpress.org/?v=4.6.1</generator>
	<item>
		<title>Intellisense for custom XML in Visual Studio</title>
		<link>/index.php/desktopdev/mstech/vs2012/intellisense-for-custom-xml-in/</link>
		<comments>/index.php/desktopdev/mstech/vs2012/intellisense-for-custom-xml-in/#comments</comments>
		<pubDate>Mon, 06 May 2013 13:44:00 +0000</pubDate>
		<dc:creator><![CDATA[Eli Weinstock-Herman (tarwn)]]></dc:creator>
				<category><![CDATA[Vistual Studio 2012]]></category>
		<category><![CDATA[intellisense]]></category>
		<category><![CDATA[schema]]></category>
		<category><![CDATA[visual studio]]></category>
		<category><![CDATA[xml]]></category>

		<guid isPermaLink="false">/index.php/2013/05/intellisense-for-custom-xml-in/</guid>
		<description><![CDATA[This is one of those things that I only need once every several months and always forget how to do. Working with custom XML in Visual Studio is a whole lot easier with intellisense. Schema errors are highlighted, enumerated values are displayed, and the amount of typing goes from full tag names to just a few characters followed by tab to complete.]]></description>
				<content:encoded><![CDATA[<p>This is one of those things that I only need once every several months and always forget how to do. Working with custom XML in Visual Studio is a whole lot easier with intellisense. Schema errors are highlighted, enumerated values are displayed, and the amount of typing goes from full tag names to just a few characters followed by tab to complete.</p>
<p>There are a few ways to do this, but if you have a schema (XSD) for the file, then here are the steps to make the magic happen.</p>
<h2>Sample Files</h2>
<p>So let&#8217;s assume for the moment that you have the following sample files:</p>
<p><b>AwesomeFile.xml</b></p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="xml"><thead><tr><td colspan="2"  class="head">XML</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
</pre></td><td class="de1"><pre class="de1"><span class="sc3"><span class="re1">&lt;?xml</span> <span class="re0">version</span>=<span class="st0">&quot;1.0&quot;</span> <span class="re0">encoding</span>=<span class="st0">&quot;utf-8&quot;</span> <span class="re2">?&gt;</span></span>
<span class="sc3"><span class="re1">&lt;AwesomeList<span class="re2">&gt;</span></span></span>
&nbsp; &nbsp; <span class="sc3"><span class="re1">&lt;AwesomeItem</span> <span class="re0">AwesomenessFactor</span>=<span class="st0">&quot;11&quot;</span><span class="re2">&gt;</span></span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="sc3"><span class="re1">&lt;AwesomeType<span class="re2">&gt;</span></span></span>Is Awesome<span class="sc3"><span class="re1">&lt;/AwesomeType<span class="re2">&gt;</span></span></span>
&nbsp; &nbsp; <span class="sc3"><span class="re1">&lt;/AwesomeItem<span class="re2">&gt;</span></span></span>
<span class="sc3"><span class="re1">&lt;/AwesomeList<span class="re2">&gt;</span></span></span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">&lt;?xml version="1.0" encoding="utf-8" ?&gt;
&lt;AwesomeList&gt;
	&lt;AwesomeItem AwesomenessFactor="11"&gt;
		&lt;AwesomeType&gt;Is Awesome&lt;/AwesomeType&gt;
	&lt;/AwesomeItem&gt;
&lt;/AwesomeList&gt;</pre></div></div>

<p><b>Awesome.xsd</b></p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="xml"><thead><tr><td colspan="2"  class="head">XML</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
</pre></td><td class="de1"><pre class="de1"><span class="sc3"><span class="re1">&lt;?xml</span> <span class="re0">version</span>=<span class="st0">&quot;1.0&quot;</span> <span class="re0">encoding</span>=<span class="st0">&quot;utf-8&quot;</span><span class="re2">?&gt;</span></span>
<span class="sc3"><span class="re1">&lt;xs:schema</span> <span class="re0">id</span>=<span class="st0">&quot;MyAwesomeSchema&quot;</span></span>
<span class="sc3"> &nbsp; &nbsp;<span class="re0">xmlns:xs</span>=<span class="st0">&quot;http://www.w3.org/2001/XMLSchema&quot;</span><span class="re2">&gt;</span></span>
&nbsp;
&nbsp; &nbsp; <span class="sc3"><span class="re1">&lt;xs:simpleType</span> <span class="re0">name</span>=<span class="st0">&quot;AwesomeLevel&quot;</span><span class="re2">&gt;</span></span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="sc3"><span class="re1">&lt;xs:restriction</span> <span class="re0">base</span>=<span class="st0">&quot;xs:integer&quot;</span><span class="re2">&gt;</span></span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="sc3"><span class="re1">&lt;xs:enumeration</span> <span class="re0">value</span>=<span class="st0">&quot;1&quot;</span><span class="re2">&gt;</span><span class="re1">&lt;/xs:enumeration<span class="re2">&gt;</span></span></span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="sc3"><span class="re1">&lt;xs:enumeration</span> <span class="re0">value</span>=<span class="st0">&quot;5&quot;</span><span class="re2">&gt;</span><span class="re1">&lt;/xs:enumeration<span class="re2">&gt;</span></span></span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="sc3"><span class="re1">&lt;xs:enumeration</span> <span class="re0">value</span>=<span class="st0">&quot;10&quot;</span><span class="re2">&gt;</span><span class="re1">&lt;/xs:enumeration<span class="re2">&gt;</span></span></span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="sc3"><span class="re1">&lt;xs:enumeration</span> <span class="re0">value</span>=<span class="st0">&quot;11&quot;</span><span class="re2">&gt;</span><span class="re1">&lt;/xs:enumeration<span class="re2">&gt;</span></span></span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="sc3"><span class="re1">&lt;/xs:restriction<span class="re2">&gt;</span></span></span>
&nbsp; &nbsp; <span class="sc3"><span class="re1">&lt;/xs:simpleType<span class="re2">&gt;</span></span></span>
&nbsp;
&nbsp; &nbsp; <span class="sc3"><span class="re1">&lt;xs:complexType</span> <span class="re0">name</span>=<span class="st0">&quot;AwesomeElement&quot;</span><span class="re2">&gt;</span></span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="sc3"><span class="re1">&lt;xs:sequence<span class="re2">&gt;</span></span></span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="sc3"><span class="re1">&lt;xs:element</span> <span class="re0">name</span>=<span class="st0">&quot;AwesomeType&quot;</span> <span class="re0">type</span>=<span class="st0">&quot;xs:string&quot;</span><span class="re2">&gt;</span><span class="re1">&lt;/xs:element<span class="re2">&gt;</span></span></span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="sc3"><span class="re1">&lt;/xs:sequence<span class="re2">&gt;</span></span></span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="sc3"><span class="re1">&lt;xs:attribute</span> <span class="re0">name</span>=<span class="st0">&quot;AwesomenessFactor&quot;</span> <span class="re0">type</span>=<span class="st0">&quot;AwesomeLevel&quot;</span> <span class="re0">use</span>=<span class="st0">&quot;required&quot;</span><span class="re2">&gt;</span><span class="re1">&lt;/xs:attribute<span class="re2">&gt;</span></span></span>
&nbsp; &nbsp; <span class="sc3"><span class="re1">&lt;/xs:complexType<span class="re2">&gt;</span></span></span>
&nbsp;
&nbsp; &nbsp; <span class="sc3"><span class="re1">&lt;xs:element</span> <span class="re0">name</span>=<span class="st0">&quot;AwesomeList&quot;</span><span class="re2">&gt;</span></span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="sc3"><span class="re1">&lt;xs:complexType<span class="re2">&gt;</span></span></span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="sc3"><span class="re1">&lt;xs:sequence<span class="re2">&gt;</span></span></span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="sc3"><span class="re1">&lt;xs:element</span> <span class="re0">name</span>=<span class="st0">&quot;AwesomeItem&quot;</span> <span class="re0">type</span>=<span class="st0">&quot;AwesomeElement&quot;</span> <span class="re0">minOccurs</span>=<span class="st0">&quot;0&quot;</span> <span class="re0">maxOccurs</span>=<span class="st0">&quot;unbounded&quot;</span><span class="re2">&gt;</span></span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="sc3"><span class="re1">&lt;/xs:element<span class="re2">&gt;</span></span></span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="sc3"><span class="re1">&lt;/xs:sequence<span class="re2">&gt;</span></span></span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="sc3"><span class="re1">&lt;/xs:complexType<span class="re2">&gt;</span></span></span>
&nbsp; &nbsp; <span class="sc3"><span class="re1">&lt;/xs:element<span class="re2">&gt;</span></span></span>
&nbsp; &nbsp; 
<span class="sc3"><span class="re1">&lt;/xs:schema<span class="re2">&gt;</span></span></span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">&lt;?xml version="1.0" encoding="utf-8"?&gt;
&lt;xs:schema id="MyAwesomeSchema"
    xmlns:xs="http://www.w3.org/2001/XMLSchema"&gt;

	&lt;xs:simpleType name="AwesomeLevel"&gt;
		&lt;xs:restriction base="xs:integer"&gt;
			&lt;xs:enumeration value="1"&gt;&lt;/xs:enumeration&gt;
			&lt;xs:enumeration value="5"&gt;&lt;/xs:enumeration&gt;
			&lt;xs:enumeration value="10"&gt;&lt;/xs:enumeration&gt;
			&lt;xs:enumeration value="11"&gt;&lt;/xs:enumeration&gt;
		&lt;/xs:restriction&gt;
	&lt;/xs:simpleType&gt;

	&lt;xs:complexType name="AwesomeElement"&gt;
		&lt;xs:sequence&gt;
			&lt;xs:element name="AwesomeType" type="xs:string"&gt;&lt;/xs:element&gt;
		&lt;/xs:sequence&gt;
		&lt;xs:attribute name="AwesomenessFactor" type="AwesomeLevel" use="required"&gt;&lt;/xs:attribute&gt;
	&lt;/xs:complexType&gt;

	&lt;xs:element name="AwesomeList"&gt;
		&lt;xs:complexType&gt;
			&lt;xs:sequence&gt;
				&lt;xs:element name="AwesomeItem" type="AwesomeElement" minOccurs="0" maxOccurs="unbounded"&gt;
				&lt;/xs:element&gt;
			&lt;/xs:sequence&gt;
		&lt;/xs:complexType&gt;
	&lt;/xs:element&gt;
	
&lt;/xs:schema&gt;</pre></div></div>

<p>Visual Studio gives us handy intellisense suggestions and warnings when we&#8217;re writing the schema because we have specified a namespace it knows, but how do we get that usefulness when we&#8217;re adding more content to our awesome XML file?</p>
<h2>More Cowbell</h2>
<p>Turns out, adding this functionality is pretty easy. Visual Studio is smart enough to use know schemas, so all we have to do is provide the information that makes our schema known and relevant for our XML file. </p>
<p>For this example I am assuming that the two files are in the same folder. I&#8217;ve also made the file complex enough that the additions we make should work for far more complex setups also.</p>
<p>Here&#8217;s the steps:</p>
<ol>
<li>Define a target namespace on the schema</li>
<li>Define the empty namespace of the schema as this namespace</li>
<li>set attributeFormDefault to unqualified so attributes in our XML file won&#8217;t require namespace declarations</li>
<li>Add the namespace declaration to the XML file</li>
</ol>
<p>Updating our files (and adding comments to reflect the list above), we have:</p>
<p><b>AwesomeFile.xml</b></p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="xml"><thead><tr><td colspan="2"  class="head">XML</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
</pre></td><td class="de1"><pre class="de1"><span class="sc3"><span class="re1">&lt;?xml</span> <span class="re0">version</span>=<span class="st0">&quot;1.0&quot;</span> <span class="re0">encoding</span>=<span class="st0">&quot;utf-8&quot;</span> <span class="re2">?&gt;</span></span>
<span class="sc3"><span class="re1">&lt;AwesomeList</span> <span class="re0">xmlns</span>=<span class="st0">&quot;my://awesomeness&quot;</span><span class="re2">&gt;</span></span> <span class="sc-1">&lt;!-- (4) --&gt;</span>
&nbsp; &nbsp; <span class="sc3"><span class="re1">&lt;AwesomeItem</span> <span class="re0">AwesomenessFactor</span>=<span class="st0">&quot;11&quot;</span><span class="re2">&gt;</span></span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="sc3"><span class="re1">&lt;AwesomeType<span class="re2">&gt;</span></span></span>Is Awesome<span class="sc3"><span class="re1">&lt;/AwesomeType<span class="re2">&gt;</span></span></span>
&nbsp; &nbsp; <span class="sc3"><span class="re1">&lt;/AwesomeItem<span class="re2">&gt;</span></span></span>
<span class="sc3"><span class="re1">&lt;/AwesomeList<span class="re2">&gt;</span></span></span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">&lt;?xml version="1.0" encoding="utf-8" ?&gt;
&lt;AwesomeList xmlns="my://awesomeness"&gt; &lt;!-- (4) --&gt;
	&lt;AwesomeItem AwesomenessFactor="11"&gt;
		&lt;AwesomeType&gt;Is Awesome&lt;/AwesomeType&gt;
	&lt;/AwesomeItem&gt;
&lt;/AwesomeList&gt;</pre></div></div>

<p><b>Awesome.xsd</b></p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="xml"><thead><tr><td colspan="2"  class="head">XML</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
</pre></td><td class="de1"><pre class="de1"><span class="sc3"><span class="re1">&lt;?xml</span> <span class="re0">version</span>=<span class="st0">&quot;1.0&quot;</span> <span class="re0">encoding</span>=<span class="st0">&quot;utf-8&quot;</span><span class="re2">?&gt;</span></span>
<span class="sc3"><span class="re1">&lt;xs:schema</span> <span class="re0">id</span>=<span class="st0">&quot;MyAwesomeSchema&quot;</span></span>
<span class="sc3"> &nbsp; &nbsp;<span class="re0">xmlns:xs</span>=<span class="st0">&quot;http://www.w3.org/2001/XMLSchema&quot;</span></span>
<span class="sc3">&nbsp; &nbsp; &nbsp; &nbsp; <span class="re0">targetNamespace</span>=<span class="st0">&quot;my://awesomeness&quot;</span> &lt;!-- <span class="br0">&#40;</span>1<span class="br0">&#41;</span> --<span class="re2">&gt;</span></span>
&nbsp; &nbsp; &nbsp; &nbsp; xmlns=&quot;my://awesomeness&quot; <span class="sc-1">&lt;!-- (2) --&gt;</span>
&nbsp; &nbsp; &nbsp; &nbsp; attributeFormDefault=&quot;unqualified&quot; <span class="sc-1">&lt;!-- (3) --&gt;</span>
&nbsp; &nbsp; &nbsp; &nbsp; elementFormDefault=&quot;qualified&quot;&gt;
&nbsp;
&nbsp; &nbsp; <span class="sc3"><span class="re1">&lt;xs:simpleType</span> <span class="re0">name</span>=<span class="st0">&quot;AwesomeLevel&quot;</span><span class="re2">&gt;</span></span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="sc3"><span class="re1">&lt;xs:restriction</span> <span class="re0">base</span>=<span class="st0">&quot;xs:integer&quot;</span><span class="re2">&gt;</span></span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="sc3"><span class="re1">&lt;xs:enumeration</span> <span class="re0">value</span>=<span class="st0">&quot;1&quot;</span><span class="re2">&gt;</span><span class="re1">&lt;/xs:enumeration<span class="re2">&gt;</span></span></span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="sc3"><span class="re1">&lt;xs:enumeration</span> <span class="re0">value</span>=<span class="st0">&quot;5&quot;</span><span class="re2">&gt;</span><span class="re1">&lt;/xs:enumeration<span class="re2">&gt;</span></span></span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="sc3"><span class="re1">&lt;xs:enumeration</span> <span class="re0">value</span>=<span class="st0">&quot;10&quot;</span><span class="re2">&gt;</span><span class="re1">&lt;/xs:enumeration<span class="re2">&gt;</span></span></span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="sc3"><span class="re1">&lt;xs:enumeration</span> <span class="re0">value</span>=<span class="st0">&quot;11&quot;</span><span class="re2">&gt;</span><span class="re1">&lt;/xs:enumeration<span class="re2">&gt;</span></span></span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="sc3"><span class="re1">&lt;/xs:restriction<span class="re2">&gt;</span></span></span>
&nbsp; &nbsp; <span class="sc3"><span class="re1">&lt;/xs:simpleType<span class="re2">&gt;</span></span></span>
&nbsp;
&nbsp; &nbsp; <span class="sc3"><span class="re1">&lt;xs:complexType</span> <span class="re0">name</span>=<span class="st0">&quot;AwesomeElement&quot;</span><span class="re2">&gt;</span></span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="sc3"><span class="re1">&lt;xs:sequence<span class="re2">&gt;</span></span></span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="sc3"><span class="re1">&lt;xs:element</span> <span class="re0">name</span>=<span class="st0">&quot;AwesomeType&quot;</span> <span class="re0">type</span>=<span class="st0">&quot;xs:string&quot;</span><span class="re2">&gt;</span><span class="re1">&lt;/xs:element<span class="re2">&gt;</span></span></span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="sc3"><span class="re1">&lt;/xs:sequence<span class="re2">&gt;</span></span></span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="sc3"><span class="re1">&lt;xs:attribute</span> <span class="re0">name</span>=<span class="st0">&quot;AwesomenessFactor&quot;</span> <span class="re0">type</span>=<span class="st0">&quot;AwesomeLevel&quot;</span> <span class="re0">use</span>=<span class="st0">&quot;required&quot;</span><span class="re2">&gt;</span><span class="re1">&lt;/xs:attribute<span class="re2">&gt;</span></span></span>
&nbsp; &nbsp; <span class="sc3"><span class="re1">&lt;/xs:complexType<span class="re2">&gt;</span></span></span>
&nbsp;
&nbsp; &nbsp; <span class="sc3"><span class="re1">&lt;xs:element</span> <span class="re0">name</span>=<span class="st0">&quot;AwesomeList&quot;</span><span class="re2">&gt;</span></span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="sc3"><span class="re1">&lt;xs:complexType<span class="re2">&gt;</span></span></span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="sc3"><span class="re1">&lt;xs:sequence<span class="re2">&gt;</span></span></span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="sc3"><span class="re1">&lt;xs:element</span> <span class="re0">name</span>=<span class="st0">&quot;AwesomeItem&quot;</span> <span class="re0">type</span>=<span class="st0">&quot;AwesomeElement&quot;</span> <span class="re0">minOccurs</span>=<span class="st0">&quot;0&quot;</span> <span class="re0">maxOccurs</span>=<span class="st0">&quot;unbounded&quot;</span><span class="re2">&gt;</span></span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="sc3"><span class="re1">&lt;/xs:element<span class="re2">&gt;</span></span></span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="sc3"><span class="re1">&lt;/xs:sequence<span class="re2">&gt;</span></span></span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="sc3"><span class="re1">&lt;/xs:complexType<span class="re2">&gt;</span></span></span>
&nbsp; &nbsp; <span class="sc3"><span class="re1">&lt;/xs:element<span class="re2">&gt;</span></span></span>
&nbsp;
<span class="sc3"><span class="re1">&lt;/xs:schema<span class="re2">&gt;</span></span></span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">&lt;?xml version="1.0" encoding="utf-8"?&gt;
&lt;xs:schema id="MyAwesomeSchema"
    xmlns:xs="http://www.w3.org/2001/XMLSchema"
		targetNamespace="my://awesomeness" &lt;!-- (1) --&gt;
		xmlns="my://awesomeness" &lt;!-- (2) --&gt;
		attributeFormDefault="unqualified" &lt;!-- (3) --&gt;
		elementFormDefault="qualified"&gt;

	&lt;xs:simpleType name="AwesomeLevel"&gt;
		&lt;xs:restriction base="xs:integer"&gt;
			&lt;xs:enumeration value="1"&gt;&lt;/xs:enumeration&gt;
			&lt;xs:enumeration value="5"&gt;&lt;/xs:enumeration&gt;
			&lt;xs:enumeration value="10"&gt;&lt;/xs:enumeration&gt;
			&lt;xs:enumeration value="11"&gt;&lt;/xs:enumeration&gt;
		&lt;/xs:restriction&gt;
	&lt;/xs:simpleType&gt;

	&lt;xs:complexType name="AwesomeElement"&gt;
		&lt;xs:sequence&gt;
			&lt;xs:element name="AwesomeType" type="xs:string"&gt;&lt;/xs:element&gt;
		&lt;/xs:sequence&gt;
		&lt;xs:attribute name="AwesomenessFactor" type="AwesomeLevel" use="required"&gt;&lt;/xs:attribute&gt;
	&lt;/xs:complexType&gt;

	&lt;xs:element name="AwesomeList"&gt;
		&lt;xs:complexType&gt;
			&lt;xs:sequence&gt;
				&lt;xs:element name="AwesomeItem" type="AwesomeElement" minOccurs="0" maxOccurs="unbounded"&gt;
				&lt;/xs:element&gt;
			&lt;/xs:sequence&gt;
		&lt;/xs:complexType&gt;
	&lt;/xs:element&gt;

&lt;/xs:schema&gt;</pre></div></div>

<p>And there we have it.</p>
<h2>Results</h2>
<p>Now when we start typing in the XML file we will get intellisense suggestions/completion:</p>
<div style="text-align:center; margin: .5em 0;">
   <img src="http://tiernok.com/LTDBlog/XmlSchemaIntellisense/Intellisense.png" alt="Intellisense suggestions" />
</div>
<p>We also get warnings when we forget a required attribute:</p>
<div style="text-align:center; margin: .5em 0;">
   <img src="http://tiernok.com/LTDBlog/XmlSchemaIntellisense/SchemaWarning.png" alt="Intellisense suggestions" />
</div>
<p>And when we use the wrong type:</p>
<div style="text-align:center; margin: .5em 0;">
   <img src="http://tiernok.com/LTDBlog/XmlSchemaIntellisense/WrongTypeWarning.png" alt="Intellisense suggestions" />
</div>
<p><i>Hopefully the custom color scheme isn&#8217;t confusing, was feeling too lazy to switch it and switch it back</i></p>
]]></content:encoded>
			<wfw:commentRss>/index.php/desktopdev/mstech/vs2012/intellisense-for-custom-xml-in/feed/</wfw:commentRss>
		<slash:comments>4</slash:comments>
		</item>
		<item>
		<title>Developer, can do new tricks, require good home</title>
		<link>/index.php/sysadmins/os/hi-i-m-a-developer/</link>
		<comments>/index.php/sysadmins/os/hi-i-m-a-developer/#comments</comments>
		<pubDate>Sun, 03 Feb 2013 16:56:00 +0000</pubDate>
		<dc:creator><![CDATA[Tahir Khalid]]></dc:creator>
				<category><![CDATA[Operating Systems]]></category>
		<category><![CDATA[Windows]]></category>
		<category><![CDATA[Windows 7]]></category>
		<category><![CDATA[.net]]></category>
		<category><![CDATA[oracle]]></category>
		<category><![CDATA[oracle client]]></category>
		<category><![CDATA[programming]]></category>
		<category><![CDATA[software developer]]></category>
		<category><![CDATA[system administration]]></category>
		<category><![CDATA[visual studio]]></category>

		<guid isPermaLink="false">/index.php/2013/02/hi-i-m-a-developer/</guid>
		<description><![CDATA[The world of development is an interesting one where creativity comes alive through code to produce wonderful programs that do lots of cool stuff.
Okay that's the Wizard of Oz intro over, is it really that rosy?
It seems the world of development has c&#8230;]]></description>
				<content:encoded><![CDATA[<p><span style="font-size: 10pt; line-height: 14.25pt;"><span style="font-family: arial, helvetica, sans-serif;">The world of development is an interesting one where creativity comes alive through code to produce wonderful programs that do lots of cool stuff.</span></span></p>
<p style="line-height: 14.25pt;"><span style="font-size: 10pt;"><span style="font-family: arial, helvetica, sans-serif;">Okay that&#8217;s the Wizard of Oz intro over, is it really that rosy?</span></span></p>
<p style="line-height: 14.25pt;"><span style="font-size: 10pt;"><span style="font-family: arial, helvetica, sans-serif;">It seems the world of development has changed a great deal and gone are the days when you could just be a code cutter (though such roles do exist and are required), it seems a developer has to now master a wide array of skills and do battle with various foes like the Windows Operating System (<em>level 72 elite boss for those that are keeping track&#8230;</em>) as well trying to do their day job (<em>which in itself now consists of different minion roles</em>).</span></span></p>
<p style="line-height: 14.25pt;"><span style="font-size: 10pt;"><span style="font-family: arial, helvetica, sans-serif;">With the advances in .NET development there are a wide range of Frameworks, Tools and Add-Ons that can be worked with, installed and generally cried over (<em>a black hole in which I have been sucked into, the crying bit&#8230;</em>).</span></span></p>
<p style="line-height: 14.25pt;"><span style="font-family: arial, helvetica, sans-serif;"><img src="/wp-content/uploads/users/kermit/coders.jpg?mtime=1359936989" alt="Coders" width="282" height="202" /></span></p>
<p style="line-height: 14.25pt;"><span style="font-family: arial, helvetica, sans-serif;">Now I can hear you say, that&#8217;s all good but we don&#8217;t have those problems, we have a <strong>Textbook Development Team</strong> with a <strong>Textbook It Support Team</strong> in a <strong>Textbook Office</strong> but that is not quite the real world and you will often have boundaries between teams becoming thinner or more common now, the lack of resources and/or teams (<em>leaving the task of taking on those roles and their responsibilities up to the individuals in the department and organisation</em>).</span></p>
<p style="line-height: 14.25pt;"><span style="font-size: 10pt;"><span style="font-family: arial, helvetica, sans-serif;">But then the question has to be asked, just how efficient and proficient can you be as an individual, a team and a department if you are spending a percentage of your available resource and effort performing other duties, often to prepare something prior to performing your actual task or after the event where you still need to perform a multitude of other tasks (<em>covering various roles like administration etc.</em>).</span></span></p>
<p style="line-height: 14.25pt;"><span style="font-family: arial, helvetica, sans-serif;"><br /></span></p>
<p style="line-height: 14.25pt;"><span style="font-size: 10pt;"><span style="font-family: arial, helvetica, sans-serif;">And this is where my hell begins&#8230;</span></span></p>
<p style="line-height: 14.25pt;"><span style="font-family: arial, helvetica, sans-serif;"><span style="font-size: 10pt; line-height: 14.25pt;">Now don&#8217;t get me wrong, I enjoy the techie element of my role, I feel I fulfil the developer title more fully by being able to flex my many different skills (<em>making me adaptable for almost any occasion</em>), a result of accumulating experience in a wide range of sectors starting from my humble beginnings as an IT Support guy, moving into a System Administration role, sideways across into Application Support, Technical Project Lead, Solution Architecture and back into Software Development in my current role as an Senior .NET Enterprise Developer (</span><span style="font-size: 10pt; line-height: 14.25pt;"><em>not Star Trek&#8230;I wish it was, but it&#8217;s not and I have to live with that disappointment for the rest of my career life&#8230;I tried do the Spock hand thing, got strange looks from the others in the developer forum&#8230;</em></span><span style="font-size: 10pt; line-height: 14.25pt;">).</span></span></p>
<p style="line-height: 14.25pt;"><span style="font-size: 10pt;"><span style="font-family: arial, helvetica, sans-serif;">In the company where I work now, my team is fairly self-sufficient and that often means we do a lot of the stuff ourselves (<em>whilst still going through proper channels as required</em>) which is great as it means we can quickly prototype solutions through a Virtual Machine on our PC or install a particular tool we need to perform some task &#8211; all of this means that we generally have control over our own PC&#8217;s (<em>as all developers should&#8230;but they don&#8217;t unfortunately</em>).</span></span></p>
<p style="line-height: 14.25pt;"><span style="font-size: 10pt;"><span style="font-family: arial, helvetica, sans-serif;">But it&#8217;s a double edged sword as I found out the past few days and while being able to administer your own PC&#8217;s and Server&#8217;s is great it can quickly become a bottomless pit that you simply can&#8217;t escape no matter how many Bear Ghryll&#8217;s episodes you have watched (<em>some English guy on the TV that does cool stuff to survive, like James Bond for the wild</em>).</span></span></p>
<p style="line-height: 14.25pt;"><span style="font-size: 10pt;"><span style="font-family: arial, helvetica, sans-serif;"><br /></span></span></p>
<p style="line-height: 14.25pt;"><span style="font-size: 10pt;"><span style="font-family: arial, helvetica, sans-serif;">So begins my particular episode&#8230;</span></span></p>
<p style="line-height: 14.25pt;"><span style="font-size: 10pt;"><span style="font-family: arial, helvetica, sans-serif;">I have a pretty snazzy developer PC inherited from my predecessor, a rather cool Hewlet Packard Z600 Workstation specced up to the hilt with serious &#8216;Uber&#8217; hardware (<em>dual quad Xeon&#8217;s, stupid amount of memory, SSD&#8217;s, drool&#8230;</em>) and thankfully I have complete control over it (<em>mostly</em>) so I had the chance to configure my PC the way I wanted it to do the development I needed to do.</span></span></p>
<p style="line-height: 14.25pt;"><span style="font-size: 10pt;"><span style="font-family: arial, helvetica, sans-serif;">I have the usual culprits on there, Visual Studio 2010 Premium SP1, MSSQL Server 2008 R2, VMware, lots of useful tools (<em>Notepad++, Red Gate, Solitaire</em>) all running on a Windows 7 Professional 64 bit&#8230;nothing out of the ordinary there I hear you say, ah I haven’t told you about that little evil gremlin called Oracle, more specifically Oracle 64 bit and 32 bit clients on a 64 bit operating system (<em>yes, that combination should cause you to feel nauseous</em>).</span></span></p>
<p style="line-height: 14.25pt;"><span style="font-size: 10pt;"><span style="font-family: arial, helvetica, sans-serif;">The goal was simple, get the latest version of a large .NET Enterprise project, build it, tweak it, break it and glue it back together.  However there was one caveat, I needed to then install the following in some order (<em>mostly like this one</em>):</span></span></p>
<ul>
<li><span style="font-family: arial, helvetica, sans-serif;"><span style="font-size: 10pt;"><span style="font-size: 7pt; line-height: normal;"> </span></span><span style="font-size: 10pt;">Install the Oracle 64 bit Client for Windows</span></span></li>
<li><span style="font-family: arial, helvetica, sans-serif;"><span style="font-size: 10pt;"><span style="font-size: 7pt; line-height: normal;"> </span></span><span style="font-size: 10pt;">Install the 64 bit ODAC stuff (<em>for some nice ODACness</em>), the Xcopy version btw</span></span></li>
<li><span style="font-family: arial, helvetica, sans-serif;"><span style="font-size: 10pt;"><span style="font-size: 7pt; line-height: normal;"> </span></span><span style="font-size: 10pt;">Install the 32 bit Client (ODT with ODAC)</span></span></li>
</ul>
<p style="line-height: 14.25pt;"><span style="font-size: 10pt;"><span style="font-family: arial, helvetica, sans-serif;">Simple enough I thought, having virtual zero Oracle skills I was up for the challenge and felt confident I had the knowhow and experience (<em>plus large balls</em>) to deal with any issues that might crop up and like a true techie I refused to read the manual (<em>text file in the case of Oracle products</em>)…I was in for a bumpy ride it seems.</span></span></p>
<p style="line-height: 14.25pt;"><span style="font-size: 10pt;"><span style="font-family: arial, helvetica, sans-serif;">* It should be noted here, if you do happen to install the 32 bit client first and/or the Oracle Developer Tools and ODAC (32 bit), you will have seriously random Installation problems trying to install Oracle 64 bit Client (<em>the solution is to follow the instructions further down in this post to remove and clean up your PC</em>).</span></span></p>
<p style="line-height: 14.25pt;"><span style="font-size: 10pt;"><span style="font-family: arial, helvetica, sans-serif;">I went ahead and installed the 64 bit Client, in this case I used the client installation that came provided with the Oracle 11g database installation CD (<em>supplied by the tech support guys</em>), selected <strong>Administrator</strong> as the installation type, pointed the installer to where I wanted the files to go, set the Oracle Home directory and went ahead with the installation (<em>no problems here</em>).</span></span></p>
<p><span style="font-family: arial, helvetica, sans-serif;"><img src="/wp-content/uploads/users/kermit/oracle-installer.jpg?mtime=1359936990" alt="Oracle Installer" width="399" height="274" /></span></p>
<p style="line-height: 14.25pt;"><span style="font-family: arial, helvetica, sans-serif;">All good so far, put my <strong>TNSNAMES.ORA</strong> file into the  <strong>{Oracle_Home}Product11.2.0Client_X64NetworkAdmin</strong> folder, fired up a Command console and used Sqlplus to connect to an Oracle 11g database server that was supplied by the tech support team, worked like a charm.</span></p>
<p style="line-height: 14.25pt;"><span style="font-size: 10pt;"><span style="font-family: arial, helvetica, sans-serif;">After doing this I installed the Xcopy version of the 64 bit ODAC libraries and tools which can only be installed by the command prompt so you need to run a command similar to this in the installation directory:</span></span></p>
<p style="margin-left: 36.0pt; line-height: 14.25pt;"><span style="font-size: 10pt;"><span style="background-color: #000000;"><span style="color: #ffffff;"><span style="font-family: 'courier new', courier;">install.bat all c:oracle OracleHome_Client1 </span></span></span></span></p>
<p style="line-height: 14.25pt;"><span style="font-size: 10pt;"><span style="font-family: arial, helvetica, sans-serif;">Or something similar to the above command which should go ahead and install the required ODAC bits into the proper place (<em>you need to ensure you specify the Oracle Home directory</em>).  Again this went fairly smoothly as well with no hick-ups so up next was the 32 bit client and here you need to make sure you install the Oracle Developer Tools with ODAC which includes the 32 bit client otherwise you will experience much pain as I did (<em>where I installed the 32 bit client, then ODAC and other bits which caused no end of pain due to path problems, mismatched versions of dll’s etc</em>).</span></span></p>
<p style="line-height: 14.25pt;"><span style="font-size: 10pt;"><span style="font-family: arial, helvetica, sans-serif;">The above allows you to correctly use PL/SQL Developer (<em>if you have this cool application installed</em>) as long as you remember to go into the <strong>Tools &gt; Preferences &gt; Connection</strong> section and set the OCI Library to the correct location (<em>e.g. {oracle_home}product11.2.0client_1oci.dll or client_1binoci.dll depending on your version</em>) and any other application that requires the 32 bit Oracle Client.</span></span></p>
<p style="line-height: 14.25pt;"><span style="font-size: 10pt;"><span style="font-family: arial, helvetica, sans-serif;">Now the above hard work should be adequate to get a working Developer Workstation with both 64 bit and 32 bit Oracle Clients and Developer Tools however there is always a but…what I didn’t tell you was the amount of pain I went through to get the above installation list right, and believe me it was extremely painful and as I have found out after posting this blog page, there a few other client combinations that can work e.g. having a primary 32 bit Oracle Client installation with the developer tools and a 64 bit Instant Client installation (<em>will save this for a future post</em>).</span></span></p>
<p style="line-height: 14.25pt;"><span style="font-size: 10pt;"><span style="font-family: arial, helvetica, sans-serif;">I spent an awfully long time getting my workstation working and when things did go wrong (<em>which they did a lot, just Google the various issues people have had trying to install and use Oracle clients with their Visual Studio developer machines</em>) I barely got any work done which prompted my colleague to say:</span></span></p>
<p style="margin-left: 36.0pt; line-height: 14.25pt;"><span style="font-size: 10pt;"><span style="background-color: #ffff99;"><span style="font-size: small;"><span style="font-family: arial, helvetica, sans-serif;"><strong>“We have to do so much administration work, just to get to a solution developed and delivered”</strong></span></span></span></span></p>
<p style="line-height: 14.25pt;"><span style="font-size: 10pt;"><span style="font-family: arial, helvetica, sans-serif;">Which got me thinking, this is very true and probably becoming the norm now with modern development, more so in my case due to the nature of the team I am in i.e. we develop lots of bespoke solutions, integration various systems together, sometimes involving small pieces of development to large scale projects.</span></span></p>
<p style="line-height: 14.25pt;"><span style="font-size: 10pt;"><span style="font-family: arial, helvetica, sans-serif;">What I haven’t shared is the nightmare scenario I ended up in with a totally messed up pair of gac’s (<em>32 bit and 64 bit</em>) and problems compiling any of our projects because they all used one combination or another of the Oracle client (<em>mostly 64 bit now</em>).  So if anyone has had this problem here is the proper way to deal with it…</span></span></p>
<p style="line-height: 14.25pt; tab-stops: 522.0pt;"><span style="font-size: 10pt;"><span style="font-family: arial, helvetica, sans-serif;">Open Command Prompt and change to the directory containing your Oracle client installation and run the deinstall.bat batch script:</span></span></p>
<p style="margin-left: 36.0pt; line-height: 14.25pt;"><span style="font-size: 10pt;"><span style="background-color: #000000;"><span style="color: #ffffff;"><span style="font-family: 'courier new', courier;">{oracle_home}product11.2.0Client_X64Deinstalldeinstall.bat</span></span></span></span></p>
<p style="line-height: 14.25pt; tab-stops: 522.0pt;"><span style="font-size: 10pt;"><span style="font-family: arial, helvetica, sans-serif;">Once the de-installation (<em>uninstall to you and me…Oracle people…</em>) is complete you need to run the Oracle Universal Installer (<em>semi-cool Java tool…Java is not cool, the app is however</em>).  When this app fires up you have the option to Deinstall any installations on your system:</span></span></p>
<p><span style="font-family: arial, helvetica, sans-serif;"><img src="/wp-content/uploads/users/kermit/oracle-installer-deinstall.jpg?mtime=1359936990" alt="Oracle Deinstall" width="372" height="270" /></span></p>
<p style="line-height: 14.25pt;"><span style="font-family: arial, helvetica, sans-serif;">Select all the products and then click on Remove to uninstall (<em>deinstall</em>) the products:</span></p>
<p><span style="font-family: arial, helvetica, sans-serif;"><img src="/wp-content/uploads/users/kermit/oracle-installer-deinstall-inventory.jpg?mtime=1359936991" alt="Inventory" width="150" height="245" /></span></p>
<p style="line-height: 14.25pt;"><span style="font-family: arial, helvetica, sans-serif;">If you have no issues with the uninstallation of the Oracle Client stuff you will need to go into the Windows Registry to make sure you remove any references to an Oracle installation otherwise your future Oracle Client installation exercises will result in broken installations and more headaches.</span></p>
<p style="line-height: 14.25pt; tab-stops: 522.0pt;"><span style="font-size: 10pt;"><span style="font-family: arial, helvetica, sans-serif;">Edit the registry (click START &gt; type regedit32) and start with the following registry location:</span></span></p>
<p style="margin-left: 36.0pt; line-height: 14.25pt; tab-stops: 522.0pt;"><span style="font-size: 10pt;"><span style="font-family: arial, helvetica, sans-serif;">HKEY_LOCAL_MACHINESOFTWARE</span></span></p>
<p style="line-height: 14.25pt; tab-stops: 522.0pt;"><span style="font-size: 10pt;"><span style="font-family: arial, helvetica, sans-serif;">Find the Oracle Key and delete it, do the same for the HKEY_CURRENT_USER and HKEY_USERS (<em>you will need to go through the various sub parent keys and find any Oracle sub Keys and delete them</em>). </span></span></p>
<p style="line-height: 14.25pt;"><span style="font-family: arial, helvetica, sans-serif;">Don&#8217;t forget to clear the gac&#8217;s (both 32 bit and 64 bit), I found this the simplest way of doing it:</span></p>
<ul>
<li><span style="font-family: arial, helvetica, sans-serif;">Start Command Prompt for Visual Studio 32 bit</span></li>
<li><span style="font-family: arial, helvetica, sans-serif;">Type gacutil /l &gt; c:gac32list.txt</span></li>
<li><span style="font-family: arial, helvetica, sans-serif;">Open the gac32list.txt file and find the word Oracle</span></li>
<li><span style="font-family: arial, helvetica, sans-serif;">In the Command Prompt window type the following commands: </span>
<ul>
<li><span style="font-family: arial, helvetica, sans-serif;">gacutil /u Oracle.DataAccess</span></li>
<li><span style="font-family: arial, helvetica, sans-serif;">gacutil /u Oracle.Database.Extensions</span></li>
<li><span style="font-family: arial, helvetica, sans-serif;">gacutil /u Oracle.Web</span></li>
</ul>
</li>
<li><span style="font-family: arial, helvetica, sans-serif;">Close the Command Prompt window</span></li>
<li><span style="font-family: arial, helvetica, sans-serif;">Start Command Prompt for Visual Studio 64 bit</span></li>
<li><span style="font-family: arial, helvetica, sans-serif;">Repeat the above commands</span></li>
<li><span style="font-family: arial, helvetica, sans-serif;">Close the Command Prompt window</span></li>
</ul>
<p style="line-height: 14.25pt; tab-stops: 522.0pt;"><span style="font-size: 10pt;"><span style="font-family: arial, helvetica, sans-serif;">This should give you a clean installation and hopefully allow you to get a working installation of the Oracle clients on your .NET Developer Workstation.</span></span></p>
<p style="line-height: 14.25pt;"><span style="font-family: arial, helvetica, sans-serif;"><br /></span></p>
<p style="line-height: 14.25pt; tab-stops: 522.0pt;"><span style="font-size: 10pt;"><span style="font-family: arial, helvetica, sans-serif;">So back to the question at hand, just what kind of developer does a developer need to be?  Someone who is comfortable at administering their local, virtual and remote computers?  And just how much effort should be made before you require assistance (<em>and will that not take more effort</em>) but what if you work in an environment where the resources are not available and you have to <strong>“man up”</strong> (<em>so to speak</em>) and take the reins, do you factor that into any and every piece of work and project you do?</span></span></p>
<p style="line-height: 14.25pt; tab-stops: 522.0pt;"><span style="font-size: 10pt;"><span style="font-family: arial, helvetica, sans-serif;">Well in an ideal world you would minimize the effort required for each subsequent piece of work and/or project however you cannot avoid the moments when you will simply have to dig into the trenches and get your hands dirty so be prepared to lose half your estimated time (<em>if not more</em>) battling system incompatibilities, software bugs, assembly hell and those gremlins that keep causing you to see spots on your screen (<em>honest</em>).</span></span></p>
<p style="line-height: 14.25pt; tab-stops: 522.0pt;"><span style="font-size: 10pt;"><span style="font-family: arial, helvetica, sans-serif;">Set aside time to climb a difficult mountain and get your hands cut, you will need to work out the many holes in your nice setup and as more and more technical requirements popup don’t expect everything to work well together the first time (<em>you have to integrate your own development environment first</em>). </span></span></p>
<p style="line-height: 14.25pt; tab-stops: 522.0pt;"><span style="font-size: 10pt;"><span style="font-family: arial, helvetica, sans-serif;">So key here is to develop the expertise if you don’t have it at hand, become adaptable but remain honest to yourself (<em>you will have to go through some pain to get to the fruits of your labour</em>).  Use knowledge base tools (<em>Wiki</em>) to record your efforts, communicate your findings with your colleagues and attempt to automate and make reusable as much of what you use as possible.</span></span></p>
<p style="line-height: 14.25pt; tab-stops: 522.0pt;"><span style="font-size: 10pt;"><span style="font-family: arial, helvetica, sans-serif;">This will help you better deal with those moments when you have to spend most of your effort on the administration of your development work as appose to the actual developing and as a bonus increase your skills repertoire which every modern developer shouldn’t shy away from (<em>becoming more agile in nature by having a can-do attitude</em>).</span></span></p>
<p style="line-height: 14.25pt;"><span style="font-family: arial, helvetica, sans-serif;"><img src="/wp-content/uploads/users/kermit/mememe.jpg?mtime=1359936991" alt="mememe" width="98" height="156" /></span></p>
<p style="line-height: 14.25pt; tab-stops: 522.0pt;"><span style="line-height: 14.25pt;"><span style="font-family: arial, helvetica, sans-serif;">I dedicate my first LTD blog post to Chrissie1.</span></span></p>
<p style="line-height: 14.25pt;"><span style="font-family: arial, helvetica, sans-serif;"><br /></span></p>
<p style="line-height: 14.25pt; tab-stops: 522.0pt;"><span style="line-height: 14.25pt;"><strong><span style="font-family: arial, helvetica, sans-serif;">References:</span></strong></span></p>
<p style="line-height: 14.25pt; tab-stops: 522.0pt;"><a href="http://www.oracle.com/technetwork/database/enterprise-edition/downloads/index.html"><span style="font-family: arial, helvetica, sans-serif;">Oracle 11g Database Download (includes the clients)</span></a></p>
<p style="line-height: 14.25pt; tab-stops: 522.0pt;"><a href="http://www.oracle.com/technetwork/database/windows/downloads/index-090165.html"><span style="font-family: arial, helvetica, sans-serif;">ODAC Xcopy 64 bit Download</span></a></p>
<p style="line-height: 14.25pt; tab-stops: 522.0pt;"><a href="http://www.oracle.com/technetwork/topics/dotnet/utilsoft-086879.html"><span style="font-family: arial, helvetica, sans-serif;">Oracle Developer Tools with ODAC 32 bit</span></a></p>
]]></content:encoded>
			<wfw:commentRss>/index.php/sysadmins/os/hi-i-m-a-developer/feed/</wfw:commentRss>
		<slash:comments>2</slash:comments>
		</item>
		<item>
		<title>Visual Studio 2010 Service Pack 1 released on MSDN</title>
		<link>/index.php/desktopdev/mstech/msaccess/accessformsreports/visual-studio-2010-service-pack/</link>
		<comments>/index.php/desktopdev/mstech/msaccess/accessformsreports/visual-studio-2010-service-pack/#respond</comments>
		<pubDate>Tue, 08 Mar 2011 18:50:00 +0000</pubDate>
		<dc:creator><![CDATA[SQLDenis]]></dc:creator>
				<category><![CDATA[Access Forms and Reports]]></category>
		<category><![CDATA[service pack]]></category>
		<category><![CDATA[sp1]]></category>
		<category><![CDATA[visual studio]]></category>
		<category><![CDATA[visual studio 2010]]></category>

		<guid isPermaLink="false">/index.php/2011/03/visual-studio-2010-service-pack/</guid>
		<description><![CDATA[It looks like Visual Studio 2010 Service Pack 1 is available on MSDN, the files have a timestamp of today. I have been running the beta for a couple of weeks at home, finally I can install this at work.

If you don't have a msdn sunscription, then you&#8230;]]></description>
				<content:encoded><![CDATA[<p>It looks like Visual Studio 2010 Service Pack 1 is available on MSDN, the files have a timestamp of today.</p>
<p> I have been running the beta for a couple of weeks at home, finally I can install this at work.</p>
<p>If you don&#8217;t have a msdn subscription, then you can download Visual Studio 2010 Service Pack 1 here: http://www.microsoft.com/downloads/en/details.aspx?FamilyID=75568aa6-8107-475d-948a-ef22627e57a5&amp;displaylang=en</p>
<p><img src="/wp-content/uploads/blogs/DesktopDev/VS%20sp1.PNG" alt="" title="" /></p>
]]></content:encoded>
			<wfw:commentRss>/index.php/desktopdev/mstech/msaccess/accessformsreports/visual-studio-2010-service-pack/feed/</wfw:commentRss>
		<slash:comments>0</slash:comments>
		</item>
		<item>
		<title>Unit Testing Costs Too Much &#8211; Too Many Things To Learn</title>
		<link>/index.php/webdev/serverprogramming/unit-testing-costs-too-much-too-many-thi/</link>
		<comments>/index.php/webdev/serverprogramming/unit-testing-costs-too-much-too-many-thi/#comments</comments>
		<pubDate>Mon, 22 Nov 2010 11:46:43 +0000</pubDate>
		<dc:creator><![CDATA[Eli Weinstock-Herman (tarwn)]]></dc:creator>
				<category><![CDATA[ASP.NET]]></category>
		<category><![CDATA[Server Programming]]></category>
		<category><![CDATA[ms test]]></category>
		<category><![CDATA[unit testing]]></category>
		<category><![CDATA[visual studio]]></category>

		<guid isPermaLink="false">/index.php/2010/11/unit-testing-costs-too-much-too-many-thi/</guid>
		<description><![CDATA[For someone that is just interested in trying out Unit Testing the number of topics out there can seem overwhelming. From passionate articles about using TDD, to deeply technical articles around the differences in mocking frameworks, to complete sidetracks into architecture theory and how to make code more testable...just learning enough to get started and try out Unit Testing can seem like you need weeks of classes.]]></description>
				<content:encoded><![CDATA[<p>For someone that is just interested in trying out Unit Testing the number of topics out there can seem overwhelming. From passionate articles about using TDD, to deeply technical articles around the differences in mocking frameworks, to complete sidetracks into architecture theory and how to make code more testable&#8230;just learning enough to get started and try out Unit Testing can seem like you need weeks of classes.</p>
<p>If you&#8217;re just catching up, I&#8217;ve been sharing commentary on the costs (and value) of Unit Testing, starting with <a href="/index.php/DesktopDev/GeneralPurposeLanguages/unit-testing-costs-too-much" title="Check out the first post">a brief (intended to be humorous) post</a>, a presentation at the <a href="/index.php/DesktopDev/MSTech/raleigh-code-camp-followup" title="Read the codecamp review">Raleigh CodeCamp</a>, and last weeks discussion of the <a href="/index.php/DesktopDev/GeneralPurposeLanguages/unit-testing-costs-too-much-twice-the-co" title="Read the post on the twice the code issue">&#8220;Twice as Much Code&#8221;</a> issue.</p>
<p>This article will try to convey the ease with which you can add Unit Testing to a current project without (in the case of visual studio) extra downloads, installs, or configurations. Costing only a few minutes, and without any of the other terminology, products, or theory, we can get started trying out this Unit Testing concept in our own environment.</p>
<h2>TDD, Mocks, Testability&#8230;</h2>
<p>Automated unit testing has been around for a while and, as such, there has been time for people to define common methods to help make code more testable, components to help reduce the burden of testing certain complex interactions, and processes whose value we may not currently have the context with which to understand.</p>
<p>But we don&#8217;t need any of it to get started.</p>
<p>The only thing we need to get started with Unit Testing is some source code and a Unit Testing framework. This post uses a Microsoft .Net environment with Visual Studio 2010. This actually makes my life even easier because a testing framework is included with Visual Studio, meaning there are no extra downloads, installs, or configurations required; We can start trying it out right now.</p>
<h2>Adding Unit Testing to a Project</h2>
<p>The project we are working with is a basic ASP.Net web application project that I built very quickly for sample purposes. This project can be <a href="http://tiernok.com/LTDBlog/UnitTestingExample.zip" title="ZIP Archive of test code and database backup">downloaded here</a> and includes the sample project and a backup of the SQL database. Feel free to download and follow along, or simply read the post.</p>
<p>Our goal is to quickly add Unit Testing to a pseudo &#8216;existing&#8217; application and position ourselves to take advantage of Unit Testing as we continue to maintain or work on this &#8216;existing&#8217; application.</p>
<h3>Adding the Unit Testing Project</h3>
<p>Opening the project in Visual Studio presents us with our basic Web Application. To get started we right-click the solution and add a Unit Testing Project.</p>
<div class="imgBox">
<a href="http://tiernok.com/LTDBlog/unittesting/orig/AddProject.png" title="See larger image size"><img src="http://tiernok.com/LTDBlog/unittesting/AddProject.png" alt="Adding a Unit Test Project" /></a><br />
Adding a Unit Test Project
</div>
<div class="imgBox">
<a href="http://tiernok.com/LTDBlog/unittesting/orig/AddProject2.png" title="See larger image size"><img src="http://tiernok.com/LTDBlog/unittesting/AddProject2.png" alt="Adding a Unit Test Project" /></a><br />
Adding a Unit Test Project
</div>
<p>Visual Studio will add our new Test Project to the solution and along with an automatically generated Unit Test class. </p>
<p>Next we need to add a reference to the Unit Test project, allowing it to reference the Web Application project we are going to be testing.</p>
<div class="imgBox">
<a href="http://tiernok.com/LTDBlog/unittesting/orig/AddReference.png" title="See larger image size"><img src="http://tiernok.com/LTDBlog/unittesting/AddReference.png" alt="Reference the Project to Test" /></a><br />
Reference the Project to Test
</div>
<div class="imgBox">
<a href="http://tiernok.com/LTDBlog/unittesting/orig/AddReference2.png" title="See larger image size"><img src="http://tiernok.com/LTDBlog/unittesting/AddReference2.png" alt="Reference the Project to Test" /></a><br />
Reference the Project to Test
</div>
<p>We&#8217;ve now added Unit Testing to the solution. In doing so, Visual Studio has done a few extra steps for us, adding a toolbar as well as some generated files.</p>
<h3>The New Toolbar</h3>
<p>The new toolbar in Visual Studio will helps us easily manage and run our tests. </p>
<div class="imgBox">
<a href="http://tiernok.com/LTDBlog/unittesting/orig/UnitTestToolbar.png" title="See larger image size"><img src="http://tiernok.com/LTDBlog/unittesting/UnitTestToolbar.png" alt="Unit Test Toolbar" /></a><br />
Visual Studio&#8217;s Unit Test Toolbar
</div>
<p>From left to right:</p>
<dl>
<dt>New Test</dt>
<dd>Creates additional unit test class files and provides access to a wizard to help create individual unit test functions</dd>
<dt>Run Tests in Current Context</dt>
<dd>Runs the unit tests in the current context of the cursor (selected test, all tests in a class, etc)</dd>
<dt>Run All Tests in Solution</dt>
<dd>As advertised, runs all available Unit Test Methods in the solution</dd>
<dt>Test View</dt>
<dd>A side panel to show all tests in solution</dd>
<dt>Test List Editor</dt>
<dd>An editor to show all tests, allow tests to be organized into lists, and allow specific sets of tests to be selected and run (or debugged)</dd>
<dt>Test Results</dt>
<dd>Shows results of the last test run</dd>
<dt>Test Runs</dt>
<dd>Status of test runs (local or from a remote controller)</dd>
</dl>
<p>Some of these tools also show up in the right click context menu (like Create Unit Test) and have hotkeys (such as the Ctrl+R,A chord to run all tests). Initially you should start with the Test List Editor and the Run All Tests button, the rest will come with time.</p>
<h3>The First Generated Test Class</h3>
<p>Back to the test project for a moment. When we added our new test project, Visual Studio gave us our first Test Class file, complete with some content. Normally I delete most of this and write it myself, if I need it, but it&#8217;s useful while you are still learning what&#8217;s available and the syntax to take advantage of it.</p>
<div class="imgBox">
<a href="http://tiernok.com/LTDBlog/unittesting/orig/GeneratedCode.png" title="See larger image size"><img src="http://tiernok.com/LTDBlog/unittesting/GeneratedCode.png" alt="Generated Code" /></a><br />
Generated Test Code
</div>
<ol style="list-style-type: upper-alpha;">
<li>Test Class Declaration &#8211; Using the [TestClass] attribute tells the Unit Testing framework that this class will have test methods in it</li>
<li>TestContext &#8211; Stores information for the tests (notably ASP.Net page tests and data driven tests) &#8211; subject of a whole different blog post</li>
<li>Additional Test Attributes &#8211; this commented out section contains additional method definitions we can use for setting up or tearing down test data and objects before and after each test or each test run</li>
<li>Our first Unit Test method &#8211; Visual Studio has provided us without first test method, complete with the [TestMethod] attribute that it uses to locate all unit tests in the class</li>
</ol>
<p>For this example we&#8217;re going to cut out most of the clutter and start with this:</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="csharp"><thead><tr><td colspan="2"  class="head">C#</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
</pre></td><td class="de1"><pre class="de1"><span class="kw1">using</span> <span class="co3">System</span><span class="sy0">;</span>
<span class="kw1">using</span> <span class="co3">System.Text</span><span class="sy0">;</span>
<span class="kw1">using</span> <span class="co3">System.Collections.Generic</span><span class="sy0">;</span>
<span class="kw1">using</span> <span class="co3">System.Linq</span><span class="sy0">;</span>
<span class="kw1">using</span> <span class="co3">Microsoft.VisualStudio.TestTools.UnitTesting</span><span class="sy0">;</span>
&nbsp;
<span class="kw1">namespace</span> MyFirstTestProject <span class="br0">&#123;</span>
&nbsp; &nbsp; <span class="br0">&#91;</span>TestClass<span class="br0">&#93;</span>
&nbsp; &nbsp; <span class="kw1">public</span> <span class="kw4">class</span> UnitTest1 <span class="br0">&#123;</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#91;</span>TestMethod<span class="br0">&#93;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">public</span> <span class="kw4">void</span> TestMethod1<span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="co1">// Do Stuff</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp; &nbsp; <span class="br0">&#125;</span>
<span class="br0">&#125;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">using System;
using System.Text;
using System.Collections.Generic;
using System.Linq;
using Microsoft.VisualStudio.TestTools.UnitTesting;

namespace MyFirstTestProject {
	[TestClass]
	public class UnitTest1 {

		[TestMethod]
		public void TestMethod1() {
			// Do Stuff
		}
	}
}</pre></div></div>

<p>Now that we&#8217;ve looked around, lets go ahead and make our first test.</p>
<h2>Our First Unit Test</h2>
<p>The sample project has all of it&#8217;s logic and code written directly in the code behind. For the purposes of this example we would like to debug and correct the address formatting. Occasionally it appears to output an extra address 2 line when it shouldn&#8217;t and, instead of manually troubleshooting, we will be using Unit Tests to troubleshoot and correct the error.</p>
<h3>Extract Logic to Test</h3>
<p>The first thing we will do is extract that logic out of the code behind and put it in a function. Separation of the presentation and logic is a good practice, but often we will run into existing projects that did not follow this. In those cases we need to extract the logic so it can be called from our tests (or other pages that need the same functionality).</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="csharp"><thead><tr><td colspan="2"  class="head">C#</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
</pre></td><td class="de1"><pre class="de1">&nbsp; &nbsp; &nbsp; &nbsp;<span class="kw1">protected</span> <span class="kw4">void</span> rptCustomers_ItemDataBound<span class="br0">&#40;</span><span class="kw4">object</span> sender, RepeaterItemEventArgs e<span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Label lblName <span class="sy0">=</span> <span class="br0">&#40;</span>Label<span class="br0">&#41;</span> e<span class="sy0">.</span><span class="me1">Item</span><span class="sy0">.</span><span class="me1">FindControl</span><span class="br0">&#40;</span><span class="st0">&quot;lblName&quot;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Label lblAddress <span class="sy0">=</span> <span class="br0">&#40;</span>Label<span class="br0">&#41;</span> e<span class="sy0">.</span><span class="me1">Item</span><span class="sy0">.</span><span class="me1">FindControl</span><span class="br0">&#40;</span><span class="st0">&quot;lblAddress&quot;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Label lblID <span class="sy0">=</span> <span class="br0">&#40;</span>Label<span class="br0">&#41;</span> e<span class="sy0">.</span><span class="me1">Item</span><span class="sy0">.</span><span class="me1">FindControl</span><span class="br0">&#40;</span><span class="st0">&quot;lblID&quot;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; LinkButton lbEdit <span class="sy0">=</span> <span class="br0">&#40;</span>LinkButton<span class="br0">&#41;</span> e<span class="sy0">.</span><span class="me1">Item</span><span class="sy0">.</span><span class="me1">FindControl</span><span class="br0">&#40;</span><span class="st0">&quot;lbEdit&quot;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; DataRowView dr <span class="sy0">=</span> <span class="br0">&#40;</span>DataRowView<span class="br0">&#41;</span>e<span class="sy0">.</span><span class="me1">Item</span><span class="sy0">.</span><span class="me1">DataItem</span><span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; lblID<span class="sy0">.</span><span class="me1">Text</span> <span class="sy0">=</span> dr<span class="br0">&#91;</span><span class="st0">&quot;Customer_ID&quot;</span><span class="br0">&#93;</span><span class="sy0">.</span><span class="me1">ToString</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; lblName<span class="sy0">.</span><span class="me1">Text</span> <span class="sy0">=</span> dr<span class="br0">&#91;</span><span class="st0">&quot;Name&quot;</span><span class="br0">&#93;</span><span class="sy0">.</span><span class="me1">ToString</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; lblAddress<span class="sy0">.</span><span class="me1">Text</span> <span class="sy0">=</span> dr<span class="br0">&#91;</span><span class="st0">&quot;Address_1&quot;</span><span class="br0">&#93;</span><span class="sy0">.</span><span class="me1">ToString</span><span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="sy0">+</span> <span class="st0">&quot;&lt;br/&gt;&quot;</span> <span class="sy0">+</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span class="br0">&#40;</span><span class="sy0">!</span><span class="kw4">string</span><span class="sy0">.</span><span class="me1">IsNullOrEmpty</span><span class="br0">&#40;</span>dr<span class="br0">&#91;</span><span class="st0">&quot;Address_2&quot;</span><span class="br0">&#93;</span><span class="sy0">.</span><span class="me1">ToString</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#41;</span> <span class="sy0">?</span> dr<span class="br0">&#91;</span><span class="st0">&quot;Address_2&quot;</span><span class="br0">&#93;</span><span class="sy0">.</span><span class="me1">ToString</span><span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="sy0">+</span> <span class="st0">&quot;&lt;br/&gt;&quot;</span> <span class="sy0">:</span> <span class="st0">&quot;&quot;</span><span class="br0">&#41;</span> <span class="sy0">+</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;dr<span class="br0">&#91;</span><span class="st0">&quot;City&quot;</span><span class="br0">&#93;</span><span class="sy0">.</span><span class="me1">ToString</span><span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="sy0">+</span> <span class="st0">&quot; &quot;</span> <span class="sy0">+</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;dr<span class="br0">&#91;</span><span class="st0">&quot;State&quot;</span><span class="br0">&#93;</span><span class="sy0">.</span><span class="me1">ToString</span><span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="sy0">+</span> <span class="st0">&quot;, &quot;</span> <span class="sy0">+</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;dr<span class="br0">&#91;</span><span class="st0">&quot;Zip&quot;</span><span class="br0">&#93;</span><span class="sy0">.</span><span class="me1">ToString</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; lbEdit<span class="sy0">.</span><span class="me1">CommandArgument</span> <span class="sy0">=</span> dr<span class="br0">&#91;</span><span class="st0">&quot;Customer_ID&quot;</span><span class="br0">&#93;</span><span class="sy0">.</span><span class="me1">ToString</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">       protected void rptCustomers_ItemDataBound(object sender, RepeaterItemEventArgs e) {
            Label lblName = (Label) e.Item.FindControl("lblName");
            Label lblAddress = (Label) e.Item.FindControl("lblAddress");
            Label lblID = (Label) e.Item.FindControl("lblID");
            LinkButton lbEdit = (LinkButton) e.Item.FindControl("lbEdit");
            DataRowView dr = (DataRowView)e.Item.DataItem;

            lblID.Text = dr["Customer_ID"].ToString();
            lblName.Text = dr["Name"].ToString();
            lblAddress.Text = dr["Address_1"].ToString() + "&lt;br/&gt;" +
                   (!string.IsNullOrEmpty(dr["Address_2"].ToString()) ? dr["Address_2"].ToString() + "&lt;br/&gt;" : "") +
                   dr["City"].ToString() + " " +
                   dr["State"].ToString() + ", " +
                   dr["Zip"].ToString();
            lbEdit.CommandArgument = dr["Customer_ID"].ToString();
        }</pre></div></div>

<p>To separate the address formatting out of the code behind, we will create a new class named <em>CustomerInfo</em>, add a method named <em>GetFormattedAddress</em>, and then extract the logic from the code behind and replace it with a call to our new method:</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="csharp"><thead><tr><td colspan="2"  class="head">C#</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
</pre></td><td class="de1"><pre class="de1">&nbsp; &nbsp; &nbsp; &nbsp;<span class="kw1">protected</span> <span class="kw4">void</span> rptCustomers_ItemDataBound<span class="br0">&#40;</span><span class="kw4">object</span> sender, RepeaterItemEventArgs e<span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="co1">//...</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; lblAddress<span class="sy0">.</span><span class="me1">Text</span> <span class="sy0">=</span> CustomerInformation<span class="sy0">.</span><span class="me1">GetFormattedAddress</span><span class="br0">&#40;</span>dr<span class="br0">&#91;</span><span class="st0">&quot;Address_1&quot;</span><span class="br0">&#93;</span><span class="sy0">.</span><span class="me1">ToString</span><span class="br0">&#40;</span><span class="br0">&#41;</span>,
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; dr<span class="br0">&#91;</span><span class="st0">&quot;Address_2&quot;</span><span class="br0">&#93;</span><span class="sy0">.</span><span class="me1">ToString</span><span class="br0">&#40;</span><span class="br0">&#41;</span>,
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; dr<span class="br0">&#91;</span><span class="st0">&quot;City&quot;</span><span class="br0">&#93;</span><span class="sy0">.</span><span class="me1">ToString</span><span class="br0">&#40;</span><span class="br0">&#41;</span>,
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; dr<span class="br0">&#91;</span><span class="st0">&quot;State&quot;</span><span class="br0">&#93;</span><span class="sy0">.</span><span class="me1">ToString</span><span class="br0">&#40;</span><span class="br0">&#41;</span>,
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; dr<span class="br0">&#91;</span><span class="st0">&quot;Zip&quot;</span><span class="br0">&#93;</span><span class="sy0">.</span><span class="me1">ToString</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="co1">//...</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">       protected void rptCustomers_ItemDataBound(object sender, RepeaterItemEventArgs e) {
            //...
			lblAddress.Text = CustomerInformation.GetFormattedAddress(dr["Address_1"].ToString(),
										dr["Address_2"].ToString(),
										dr["City"].ToString(),
										dr["State"].ToString(),
										dr["Zip"].ToString());
            //...
        }</pre></div></div>

<p>And the new class and method look like:</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="csharp"><thead><tr><td colspan="2"  class="head">C#</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
</pre></td><td class="de1"><pre class="de1">&nbsp; &nbsp; <span class="kw1">public</span> <span class="kw4">class</span> CustomerInformation <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">public</span> <span class="kw1">static</span> <span class="kw4">string</span> GetFormattedAddress<span class="br0">&#40;</span><span class="kw4">string</span> address1, <span class="kw4">string</span> address2, <span class="kw4">string</span> city, <span class="kw4">string</span> state, <span class="kw4">string</span> zip<span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="co1">//lblAddress.Text = dr[&quot;Address_1&quot;].ToString() + &quot;&lt;br/&gt;&quot; +</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="co1">// &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; (!string.IsNullOrEmpty(dr[&quot;Address_2&quot;].ToString()) ? dr[&quot;Address_2&quot;].ToString() + &quot;&lt;br/&gt;&quot; : &quot;&quot;) +</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="co1">// &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; dr[&quot;City&quot;].ToString() + &quot; &quot; +</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="co1">// &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; dr[&quot;State&quot;].ToString() + &quot;, &quot; +</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="co1">// &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; dr[&quot;Zip&quot;].ToString();</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">return</span> address1 <span class="sy0">+</span> <span class="st0">&quot;&lt;br/&gt;&quot;</span> <span class="sy0">+</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#40;</span><span class="sy0">!</span><span class="kw4">string</span><span class="sy0">.</span><span class="me1">IsNullOrEmpty</span><span class="br0">&#40;</span>address2<span class="br0">&#41;</span> <span class="sy0">?</span> address2 <span class="sy0">+</span> <span class="st0">&quot;&lt;br/&gt;&quot;</span> <span class="sy0">:</span> <span class="st0">&quot;&quot;</span><span class="br0">&#41;</span> <span class="sy0">+</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; city <span class="sy0">+</span> <span class="st0">&quot; &quot;</span> <span class="sy0">+</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; state <span class="sy0">+</span> <span class="st0">&quot;, &quot;</span> <span class="sy0">+</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; zip<span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp; &nbsp; <span class="br0">&#125;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">	public class CustomerInformation {
		public static string GetFormattedAddress(string address1, string address2, string city, string state, string zip) {
			//lblAddress.Text = dr["Address_1"].ToString() + "&lt;br/&gt;" +
			//               (!string.IsNullOrEmpty(dr["Address_2"].ToString()) ? dr["Address_2"].ToString() + "&lt;br/&gt;" : "") +
			//               dr["City"].ToString() + " " +
			//               dr["State"].ToString() + ", " +
			//               dr["Zip"].ToString();

			return address1 + "&lt;br/&gt;" +
			(!string.IsNullOrEmpty(address2) ? address2 + "&lt;br/&gt;" : "") +
			city + " " +
			state + ", " +
			zip;
		}
	}</pre></div></div>

<p>Now that we have a separate method to work with, we can create Unit Test methods to both troubleshoot our error and provide a defense from it occurring again.</p>
<h3>Create the First Test</h3>
<p>Back in our test project, Visual Studio had created a shell of a method for us to fill in with our test logic. The key difference between a Unit Test method and a regular method is the <em>[TestMethod]</em> decoration and the use of a class named <em>Assert</em> to communicate and test expectations.</p>
<p>When we build unit tests, we want to keep them small and simple. This reduces the complexity of the tests, makes them easier to add, change, and remove as our application is modified. The smaller and more straightforward the tests are, the easier it will be to determine what they do 3 years from now or when one of our coworkers is working with something we originally wrote.</p>
<p>Part of keeping our tests simple is using a good, consistent naming pattern. I recently started using one that Roy Osherove (<a href="/index.php/Architect/IntroductionArchitectureDesign/an-interview-with-roy-osherove-autor-of-" title="Read the interview here at LessThanDot">interview</a>|<a href="http://weblogs.asp.net/rosherove/" title="Visit Roy Osherove's blog">blog</a>|<a href="http://twitter.com/RoyOsherove" title="@RoyOsherove on Twitter">twitter</a>) included in his book. </p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="csharp"><thead><tr><td colspan="2"  class="head">C#</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
</pre></td><td class="de1"><pre class="de1"><span class="br0">&#91;</span>TestMethod<span class="br0">&#93;</span>
<span class="kw1">public</span> <span class="kw4">void</span> MethodUnderTest_Scenario_Expectation<span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span><span class="br0">&#125;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">[TestMethod]
public void MethodUnderTest_Scenario_Expectation() {}</pre></div></div>

<p>It is a long name pattern, but it reduces the need to add commenting, communicates the purpose and expectation of the test succinctly, and helps force me to keep my tests simpler. If I can&#8217;t communicate the full intent of the test in this simple manner, then I know I have made them overly complex. Communicating the intent is useful when we see a list of tests after a test run or as part of a build.</p>
<p>In this case we are testing the new GetFormattedText method, the scenario is that our address 2 field is empty, and our expectation is that we will receive back two lines of formatted HTML:</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="csharp"><thead><tr><td colspan="2"  class="head">C#</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
</pre></td><td class="de1"><pre class="de1"><span class="br0">&#91;</span>TestMethod<span class="br0">&#93;</span>
<span class="kw1">public</span> <span class="kw4">void</span> GetFormattedText_Address2EmptyString_ReturnsTwoHtmlLines<span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; <span class="co1">// arrange - setup necessary resources</span>
&nbsp;
&nbsp; &nbsp; <span class="co1">// act - act on the unit we are testing</span>
&nbsp; &nbsp; <span class="kw4">string</span> result <span class="sy0">=</span> CustomerInformation<span class="sy0">.</span><span class="me1">GetFormattedAddress</span><span class="br0">&#40;</span><span class="st0">&quot;a&quot;</span>, <span class="st0">&quot;&quot;</span>, <span class="st0">&quot;b&quot;</span>, <span class="st0">&quot;c&quot;</span>, <span class="st0">&quot;d&quot;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; <span class="co1">// assert - test our expectations</span>
&nbsp; &nbsp; Assert<span class="sy0">.</span><span class="me1">AreEqual</span><span class="sy0">&lt;</span><span class="kw4">string</span><span class="sy0">&gt;</span><span class="br0">&#40;</span><span class="st0">&quot;a&lt;br/&gt;b c, d&quot;</span>, result<span class="br0">&#41;</span><span class="sy0">;</span>
<span class="br0">&#125;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">[TestMethod]
public void GetFormattedText_Address2EmptyString_ReturnsTwoHtmlLines() {
    // arrange - setup necessary resources

    // act - act on the unit we are testing
    string result = CustomerInformation.GetFormattedAddress("a", "", "b", "c", "d");

    // assert - test our expectations
    Assert.AreEqual&lt;string&gt;("a&lt;br/&gt;b c, d", result);
}</pre></div></div>

<div class="note">
Note: The code in this function follows a common pattern for creating tests, called the <a href="http://c2.com/cgi/wiki?ArrangeActAssert" title="Read about the AAA pattern">AAA (Arrange, Act, Assert) pattern</a>. This is one more method I use to keep my tests consistent (and consistency improves maintainability and readability), though I usually do not include the comments.
</div>
<p>Our test method calls the new GetFormattedAddress method with values for all of the arguments but address2, which is passed as an empty string. Then we use the Assert.AreEqual(<em>expected</em>,<em>actual</em>) method to tell the test framework that we expect the result to match the string <code class="codespan">"a&lt;br /&gt;b c, d"</code>. On running this test (Ctrl+R, A), Visual Studio will give us a little green checkmark to indicate that the code met our expectations (no Assertions were in error).</p>
<p><em>Note: if you are following along with this project in Visual Studio, you will need to add a &#8220;using UnitTestPresentation;&#8221; to the top of your test class</em></p>
<div class="imgBox">
<a href="http://tiernok.com/LTDBlog/unittesting/orig/TestRun1.png" title="See larger image size"><img src="http://tiernok.com/LTDBlog/unittesting/TestRun1.png" alt="Test Run results" /></a><br />
Viewing Test Run Results
</div>
<p>Technically we could list as many assert statements as we want in the function, but this contradicts our Keep-it-Simple philosophy above and Visual Studio stops evaluating assertions in an individual method after the first one fails. It&#8217;s a good practice to try and limit the number Asserts so that each test method is testing one expectation and, when the customer&#8217;s expectations change, it is obvious where we have to make updates and what is impacted.</p>
<h3>Flushing Out the Problem</h3>
<p>Well, we have our first test and it doesn&#8217;t appear to have found the problem. However we can quickly add additional tests by copying that initial test, creating new method names, and tweaking the arguments we are testing.</p>
<p>Here I have created two additional tests: <br /> <code class="codespan">GetFormattedText_Address2Null_ReturnsTwoHtmlLines()</code> and <code class="codespan">GetFormattedText_Address2Whitespace_ReturnsTwoHtmlLines()</code></p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="csharp"><thead><tr><td colspan="2"  class="head">C#</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
</pre></td><td class="de1"><pre class="de1"><span class="br0">&#91;</span>TestMethod<span class="br0">&#93;</span>
<span class="kw1">public</span> <span class="kw4">void</span> GetFormattedText_Address2Null_ReturnsTwoHtmlLines<span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp;
&nbsp; &nbsp; <span class="kw4">string</span> result <span class="sy0">=</span> CustomerInformation<span class="sy0">.</span><span class="me1">GetFormattedAddress</span><span class="br0">&#40;</span><span class="st0">&quot;a&quot;</span>, <span class="kw1">null</span>, <span class="st0">&quot;b&quot;</span>, <span class="st0">&quot;c&quot;</span>, <span class="st0">&quot;d&quot;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; Assert<span class="sy0">.</span><span class="me1">AreEqual</span><span class="sy0">&lt;</span><span class="kw4">string</span><span class="sy0">&gt;</span><span class="br0">&#40;</span><span class="st0">&quot;a&lt;br/&gt;b c, d&quot;</span>, result<span class="br0">&#41;</span><span class="sy0">;</span>
<span class="br0">&#125;</span>
&nbsp;
<span class="br0">&#91;</span>TestMethod<span class="br0">&#93;</span>
<span class="kw1">public</span> <span class="kw4">void</span> GetFormattedText_Address2Whitespace_ReturnsTwoHtmlLines<span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp;
&nbsp; &nbsp; <span class="kw4">string</span> result <span class="sy0">=</span> CustomerInformation<span class="sy0">.</span><span class="me1">GetFormattedAddress</span><span class="br0">&#40;</span><span class="st0">&quot;a&quot;</span>, <span class="st0">&quot; &nbsp;&quot;</span>, <span class="st0">&quot;b&quot;</span>, <span class="st0">&quot;c&quot;</span>, <span class="st0">&quot;d&quot;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; Assert<span class="sy0">.</span><span class="me1">AreEqual</span><span class="sy0">&lt;</span><span class="kw4">string</span><span class="sy0">&gt;</span><span class="br0">&#40;</span><span class="st0">&quot;a&lt;br/&gt;b c, d&quot;</span>, result<span class="br0">&#41;</span><span class="sy0">;</span>
<span class="br0">&#125;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">[TestMethod]
public void GetFormattedText_Address2Null_ReturnsTwoHtmlLines() {

    string result = CustomerInformation.GetFormattedAddress("a", null, "b", "c", "d");

    Assert.AreEqual&lt;string&gt;("a&lt;br/&gt;b c, d", result);
}

[TestMethod]
public void GetFormattedText_Address2Whitespace_ReturnsTwoHtmlLines() {

    string result = CustomerInformation.GetFormattedAddress("a", "  ", "b", "c", "d");

    Assert.AreEqual&lt;string&gt;("a&lt;br/&gt;b c, d", result);
}</pre></div></div>

<p>And when we run our tests this time, we can see that the last one is the case where our function isn&#8217;t working correctly.</p>
<div class="imgBox">
<a href="http://tiernok.com/LTDBlog/unittesting/orig/TestRun2.png" title="See larger image size"><img src="http://tiernok.com/LTDBlog/unittesting/TestRun2.png" alt="Test Run results" /></a><br />
Viewing Test Run Results
</div>
<p>So apparently when we have whitespace in Address Line 2, the formatting function wasn&#8217;t smart enough to ignore it. This is easy to fix and we now have 3 tests that can verify our fix will works properly.</p>
<h2>Wrapping Up</h2>
<p>And that&#8217;s all it takes. </p>
<p>During the CodeCamp presentation we were able to extract, repair, and extend the validation logic for the save button on this form in a similar time period and, later in the session, someone suggested an improvement to the corrected formatting function that took less than 30 seconds to add and verify (shorter than even pulling up the website).</p>
<p>Hopefully this shows how easy it would be to get started with Unit Testing on an existing project. Rather than being an activity that will take days, you can add and start trying this technology in less than an hour. Using only as much as we covered here, you can start seeing value with your existing and new projects and learn enough to be able to evaluate more advanced techniques, other testing frameworks, and additional resources.</p>
<p>Sample code and previous articles in this unplanned series:</p>
<ul>
<li>Initial &#8220;Unit Testing Costs Too Much&#8221; post: <a href="/index.php/DesktopDev/GeneralPurposeLanguages/unit-testing-costs-too-much" title="Check out the first post">Unit Testing Costs Too Much</a></li>
<li>Code camp review and links for slides: <a href="/index.php/All/?p=999" title="Code Camp review">Raleigh Code Camp Followup</a></li>
<li>2x Code Followup: <a href="/index.php/DesktopDev/GeneralPurposeLanguages/unit-testing-costs-too-much-twice-the-co" title="Read more on the 2x Code topic">Unit Testing Costs Too Much &#8211; Twice The Code = Value?</a></li>
<li>Sample Code: <a href="http://tiernok.com/LTDBlog/UnitTestingExample.zip" title="ZIP Archive of test code and database backup">ZIP Archive of Sample Project and Database Backup</a></li>
</ul>
<style>
.imgBox{border:1px solid #CCCCCC; background-color: #EEEEEE; padding: .5em; text-align: center; display: inline-block; font-size: .8em; margin: .25em;}
</style>
]]></content:encoded>
			<wfw:commentRss>/index.php/webdev/serverprogramming/unit-testing-costs-too-much-too-many-thi/feed/</wfw:commentRss>
		<slash:comments>2</slash:comments>
		</item>
		<item>
		<title>jQuery will ship with ASP.NET MVC and Visual Studio!</title>
		<link>/index.php/webdev/webdesigngraphicsstyling/jquery-will-ship-with-asp-net-mvc-and-vi/</link>
		<comments>/index.php/webdev/webdesigngraphicsstyling/jquery-will-ship-with-asp-net-mvc-and-vi/#respond</comments>
		<pubDate>Mon, 29 Sep 2008 11:06:08 +0000</pubDate>
		<dc:creator><![CDATA[SQLDenis]]></dc:creator>
				<category><![CDATA[Web Design, Graphics and Styling]]></category>
		<category><![CDATA[ajax]]></category>
		<category><![CDATA[asp.net mvc]]></category>
		<category><![CDATA[intellisense]]></category>
		<category><![CDATA[javascript]]></category>
		<category><![CDATA[jquery]]></category>
		<category><![CDATA[mvc]]></category>
		<category><![CDATA[visual studio]]></category>

		<guid isPermaLink="false">/index.php/2008/09/jquery-will-ship-with-asp-net-mvc-and-vi/</guid>
		<description><![CDATA[Now here is some exciting news if you are a web developer in a MSFT shop. Microsoft will ship jQuery with ASP.NET MVC and Visual Studio. John Resig writes: Microsoft is looking to make jQuery part of their official development platform. Their JavaScript offering today includes the ASP.NET Ajax Framework and they’re looking to expand [&#8230;]]]></description>
				<content:encoded><![CDATA[<p>Now here is some exciting news if you are a web developer in a MSFT shop. Microsoft will ship jQuery with ASP.NET MVC and Visual Studio.<br />
John Resig writes:<br />
<blockquote>Microsoft is looking to make jQuery part of their official development platform. Their JavaScript offering today includes the ASP.NET Ajax Framework and they’re looking to expand it with the use of jQuery. This means that jQuery will be distributed with Visual Studio (which will include jQuery intellisense, snippets, examples, and documentation).</p>
<p>Additionally Microsoft will be developing additional controls, or widgets, to run on top of jQuery that will be easily deployable within your .NET applications. jQuery helpers will also be included in the server-side portion of .NET development (in addition to the existing helpers) providing complementary functions to existing ASP.NET AJAX capabilities.</p></blockquote>
<p>Sweet, you will get jQuery intellisense <img src="https://s.w.org/images/core/emoji/2/72x72/1f642.png" alt="🙂" class="wp-smiley" style="height: 1em; max-height: 1em;" /></p>
<p>Read Jogn Resig&#8217;s announcement here: http://jquery.com/blog/2008/09/28/jquery-microsoft-nokia/</p>
<p>Read Scott Guthrie&#8217;s post here: http://weblogs.asp.net/scottgu/archive/2008/09/28/jquery-and-microsoft.aspx</p>
<p>Bertrand Le Roy has also a post here: http://weblogs.asp.net/bleroy/archive/2008/09/28/jquery-now-officially-part-of-the-net-developer-s-toolbox.aspx</p>
<p>Finally Scott Hanselman has also a post about this here: http://www.hanselman.com/blog/jQueryToShipWithASPNETMVCAndVisualStudio.aspx</p>
]]></content:encoded>
			<wfw:commentRss>/index.php/webdev/webdesigngraphicsstyling/jquery-will-ship-with-asp-net-mvc-and-vi/feed/</wfw:commentRss>
		<slash:comments>0</slash:comments>
		</item>
	</channel>
</rss>
