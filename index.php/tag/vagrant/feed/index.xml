<?xml version="1.0" encoding="UTF-8"?><rss version="2.0"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:atom="http://www.w3.org/2005/Atom"
	xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
	xmlns:slash="http://purl.org/rss/1.0/modules/slash/"
	>

<channel>
	<title>Vagrant &#8211; LessthanDot</title>
	<atom:link href="/index.php/tag/vagrant/feed/" rel="self" type="application/rss+xml" />
	<link>/</link>
	<description>A Technical Community for IT Professionals</description>
	<lastBuildDate>Sat, 09 Mar 2019 12:50:36 +0000</lastBuildDate>
	<language>en-US</language>
	<sy:updatePeriod>hourly</sy:updatePeriod>
	<sy:updateFrequency>1</sy:updateFrequency>
	<generator>https://wordpress.org/?v=4.6.1</generator>
	<item>
		<title>Learning Elixir and Phoenix &#8211; Environments and Editors</title>
		<link>/index.php/webdev/learning-elixir-and-phoenix-environments-and-editors/</link>
		<comments>/index.php/webdev/learning-elixir-and-phoenix-environments-and-editors/#respond</comments>
		<pubDate>Wed, 15 Mar 2017 12:36:36 +0000</pubDate>
		<dc:creator><![CDATA[Eli Weinstock-Herman (tarwn)]]></dc:creator>
				<category><![CDATA[Web Developer]]></category>
		<category><![CDATA[atom]]></category>
		<category><![CDATA[elixir]]></category>
		<category><![CDATA[phoenix]]></category>
		<category><![CDATA[Vagrant]]></category>
		<category><![CDATA[vi]]></category>
		<category><![CDATA[vs code]]></category>

		<guid isPermaLink="false">/?p=8594</guid>
		<description><![CDATA[Recently I started down the path to learn Elixir and the Phoenix framework. This is a language and framework I intend to use quite a bit, so my goal is to get from &#8220;barely able to read it&#8221; to &#8220;able to ship readable, idiomatic, testable apps&#8221;. Having learned a fairly large number of languages, libraries, [&#8230;]]]></description>
				<content:encoded><![CDATA[<p>Recently I started down the path to learn Elixir and the Phoenix framework. This is a language and framework I intend to use quite a bit, so my goal is to get from &#8220;barely able to read it&#8221; to &#8220;able to ship readable, idiomatic, testable apps&#8221;. </p>
<p>Having learned a fairly large number of languages, libraries, and frameworks over the years, I know the best way I learn is by combining reading or videos with writing and debugging actual code (some intersection of chasing book smarts + street smarts). This also lets me combine my own experience and expectations with folks that are smarter about the given topic (and bring a different context), which sometimes results in learning things neither of us intended.</p>
<div style="background-color: #FFFFCC; padding: 1em; margin: .5em; border: 1px solid #EEEEBB; border-left-width: 16px;">Note: I&#8217;m just getting started, so this is more a log of the things I&#8217;ve tried so far and is very much an amateurs take on things, not an experts. As I gain experience I&#8217;ll likely have to revisit and correct myself.</div>
<p>I thought it might be handy to share that path, including problems and successes I run into along the way and will link in a distilled set of things that helped me along the way (assume for every link there were 5-20 more that were either less useful or I plain didn&#8217;t understand yet).</p>
<h2>Step 1: Environments and Editors</h2>
<p>Initially, I wanted to work predominately in a linux environment, so I set up a VirtualBox VM via Vagrant. Unfortunately, this ran into issues as I tried different editors (vi in an SSH session works great, an editor on the host does not). So far I&#8217;ve found little difference in running directly on Mac or Windows development machines, so I&#8217;ve switched to running directly on the machine in front of me.</p>
<p>One solution I have on the Mac side but not the Windows side (I haven&#8217;t looked yet) is the ability to run specific versions of elixir for specific projects. The ability to support projects running on individually specified versions means I don&#8217;t risk break all of my projects when I start a new one on an updated version. I also can ensure that pulling a repo down to a second machine will allow me to run in the same version, instead of losing an afternoon to an unepected bug hunt/version upgrade.</p>
<h3>Environments: Windows</h3>
<p>Web Installer (global version): <a href="http://elixir-lang.org/install.html#windows">http://elixir-lang.org/install.html#windows</a></p>
<p>I didn&#8217;t run into any notable issues but this is a global version, so looking into something for windows like asdf below is high on the list the next time I work on the Windows system.</p>
<h3>Environments: Mac</h3>
<p>I&#8217;ve tried this two ways on the Mac, one global version via Homebrew and one project-specific version via <a href="https://github.com/asdf-vm/asdf">asdf</a>. Right now I&#8217;m preferring the latter, as it gives me that project-specific version capability I mentioned above.</p>
<p>Homebrew Approach (global install): <a href="http://elixir-lang.org/install.html#mac-os-x">http://elixir-lang.org/install.html#mac-os-x</a></p>
<p>&#8220;asdf&#8221; Approach (project-specific versioning):</p>
<ul>
<li><a href="https://github.com/asdf-vm/asdf#setup">Install asdf</a></li>
<li><a href="https://github.com/asdf-vm/asdf-erlang">Install asdf-erlang plugin</a></li>
<li><a href="https://github.com/asdf-vm/asdf-elixir">Install asdf-elixir pluing</a></li>
<li><a href="https://github.com/asdf-vm/asdf-nodejs">Install asdf-nodejs plugin</a></li>
</ul>
<p>There is a good walk-through here: <a href="https://www.icicletech.com/blog/elixir-and-erlang-setup-with-asdf-version-manager" title="Walk-throguh of Elixir and Erlang setup on asdf">Elixir &#038; Erlang Setup with asdf Version Manager</a></p>
<p>I include the nodejs plugin in my list because the Phoenix framework relies on nodejs and npm as part of it&#8217;s build tools (<a href="http://brunch.io/">brunch.io</a>), and we might as well version everything instead of going half and half.</p>
<p>The biggest issue I ran into was the nodejs plugin, as it relies on a bunch of gpg keys being registered on your machine and my machine was absolutely convinced that it didn&#8217;t want to do gpg and documentation on the error was not very helpful.</p>
<p><b>Error:</b> </p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="text"><thead><tr><td colspan="2"  class="head">Text</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
</pre></td><td class="de1"><pre class="de1">Unable to execute program '/usr/local/Cellar/gnupg/1.4.21/libexec/gnupg/gpgkeys_curl': No such file or directory
Gpg: no handler for keyserver scheme 'hkp'</pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">Unable to execute program '/usr/local/Cellar/gnupg/1.4.21/libexec/gnupg/gpgkeys_curl': No such file or directory
Gpg: no handler for keyserver scheme 'hkp'</pre></div></div>

<p><b>Resolution:</b><br />
After flailing a bit with different gpg installation options, internet posts indicating I needed to build from scratch, etc, the answer ended up being to brew install curl and then uninstall and reinstall gpg via brew as well. This isn&#8217;t 100% for sure, though, as there may have been remnants of other attempts (such as brew installing gpg2, manually installing gpg and brew force linking it and then uninstalling it, etc).</p>
<h3>Environments: Vagrant VM running Trusty64</h3>
<p>In this case, a global version is acceptable because it would be partitioned to the vagrant VM image.</p>
<ul>
<li>I used this as a starting point: <a href="https://github.com/lau/vagrant_elixir ">https://github.com/lau/vagrant_elixir </a></li>
<li>Switched it to trusty64 (really only because I already had that image downloaded)</li>
<li>Added a machine name because the default is too long</li>
<li>vagrant up, and everything is working</li>
</ul>
<p>I set up my project in the shared /vagrant folder, occasionally using vi directly (vagrant ssh) and occasionally trying to use IDE tools on my desktop.</p>
<h2>Editors</h2>
<p>Here are the editors I&#8217;ve tried so far:</p>
<h3>vi</h3>
<p>I started with vi for both the vagrant environment and mac. It&#8217;s my go to editor on a *nix system, even if I&#8217;m a bit rusty. It was workable, but honestly I&#8217;ve been spoiled by visual editors for too long and decided to shelve it and come back later.</p>
<h3>Atom</h3>
<p>Find it here: <a href="https://atom.io/">Atom Editor</a></p>
<p>I tried Atom for all 3 environments, in the vagrant case running it on the host and editing files in the shared folder to the vagrant system.</p>
<p>Packages:</p>
<ul>
<li><a href="https://atom.io/packages/language-elixir">language-elixir</a> &#8211; Syntax highlighting and snippets</li>
<li><a href="https://atom.io/packages/linter-elixirc">linter-elixirc</a> &#8211; Linting for elixir</li>
<li><A href="https://atom.io/packages/minimap">minimap</a> &#8211; not elixir-specific, it&#8217;s a birds eye scrollbar (something I started liking years ago with <a href="/index.php/desktopdev/mstech/visual-studio-metalscroll-add-on/">metalscroll</a>)</li>
<li><A href="https://atom.io/packages/autocomplete-elixir">autocomplete-elixir</a> &#8211; autocomplete dropdowns, type hints, etc</li>
</ul>
<p>I had some teething troubles with at least one of the elixir ones, it would get very unhappy when it couldn&#8217;t find elixir (which occurred in folders that asdf had not been installed in yet). On a positive note, having auto-indention, autocompletion of things like defmodule do/end, syntax coloring, and so on are a basic set of expectations for me when using any IDE. I also get instant re-compilation of code to show errors and warnings, which is also handy (no regular switches to command line to run the build myself and wait for the result, just instant feedback). One thing that stood out to me is that Atom tends to hide everything by default and the occasional plugin error liked to beat me in the face with its error messages.</p>
<h3>VS Code</h3>
<p>Find it here: <a href="https://code.visualstudio.com/">VS Code Editor</a></p>
<p>I only tried VS Code on the windows environment so far (it has been my go -to python editor for a little while). Like Atom, it needed a version of elixir installed in order for extensions to work properly.</p>
<p>Extension: <a href="https://marketplace.visualstudio.com/items?itemName=mjmcloug.vscode-elixir">vscode-elixir</a> &#8211; syntax coloring, snippets, intellisense</p>
<p>I had a little more familiarity with VS Code already, but I haven&#8217;t used it in a couple months. Like Atom, VS Code relies heavily on you learning lots of keyboard shortcuts, search menus, etc. Something I had not done much with either. I have found VS Code to be a little more discoverable than Atom, partially due to a number of the most important (to me) features sitting on a sidebar by default, where Atom starts you off with more-or-less an empty screen (and a Welcome screen I can&#8217;t seem to make stop showing up). Also, they&#8217;ve really handled things like performing simple git commits quickly very easy, I&#8217;ve long ignored or disliked just about every IDE version control plugin I&#8217;ve tried, this one does that one simple, small thing very well.</p>
<p>I&#8217;ve been using Atom far more, so I haven&#8217;t tried step-through debugging and have less hands one experience with the capabilities it shares with Atom. I&#8217;ve obviously used a lot of versions of Visual Studio in the past (11 I think?) and don&#8217;t want to default to something familiar if I can push my boundaries a bit and maybe find something in Atom I didn&#8217;t know I was missing.</p>
<h1>Next Up: Learning to Code</h1>
<p>So, I have a set of environments and some editors, next up is figuring out how the heck to write in the language, what the idioms are, and then throw a completely new web framework (and template language, and ORM, and nodejs tools, and…) on top of the mix. See you there!</p>
]]></content:encoded>
			<wfw:commentRss>/index.php/webdev/learning-elixir-and-phoenix-environments-and-editors/feed/</wfw:commentRss>
		<slash:comments>0</slash:comments>
		</item>
		<item>
		<title>Duplicating LessThanDot on a Vagrant VM</title>
		<link>/index.php/webdev/duplicating-lessthandot-on-a-vagrant-vm/</link>
		<comments>/index.php/webdev/duplicating-lessthandot-on-a-vagrant-vm/#comments</comments>
		<pubDate>Fri, 08 Jan 2016 14:43:49 +0000</pubDate>
		<dc:creator><![CDATA[Eli Weinstock-Herman (tarwn)]]></dc:creator>
				<category><![CDATA[Web Developer]]></category>
		<category><![CDATA[Vagrant]]></category>

		<guid isPermaLink="false">/?p=4297</guid>
		<description><![CDATA[Setting up a development environment for LessThanDot is kind of tricky, where &#8220;tricky&#8221; is defined somewhere between &#8220;I have PHP on my Windows box&#8221; and &#8220;at least I&#8217;m running it in a version of Apache&#8221;. Recently I realized I had misplaced my local development environment somewhere and needed a way to make some changes. Have [&#8230;]]]></description>
				<content:encoded><![CDATA[<p>Setting up a development environment for LessThanDot is kind of tricky, where &#8220;tricky&#8221; is defined somewhere between &#8220;I have PHP on my Windows box&#8221; and &#8220;at least I&#8217;m running it in a version of Apache&#8221;. Recently I realized I had misplaced my local development environment somewhere and needed a way to make some changes.</p>
<p>Have a problem once? Solve it. Have a problem a second time? Automate it.</p>
<p>So, using <a href="https://www.vagrantup.com/">Vagrant</a>, I created a series of configurations and scripts that can create a duplicate of our production environment, running a local VM that answers to http://lessthandot.local/ instead of the real URL.</p>
<h2>What it takes to launch a server</h2>
<p>LessThanDot is probably not that dissimilar from other LAMP blogs. We have wired together several external packages that we run on a very specific version of PHP and MySQL that doesn&#8217;t make them angry (ish). The site lives on a set of sub-domains and includes some tricky bits, like using soft-linked media folders to prevent the content from being wiped out when we deploy new versions (or having to be included in source control). </p>
<p><strong>Folder structure:</strong></p>
<ul>
<li>/ &#8211; top-level git repository folder
<ul>
<li>configs/ &#8211; configurations used on our live serve for Apache, PHP, etc</li>
<li>trunk/ &#8211; the source code for the site</li>
<li>deploy/ &#8211; the deployment scripts (not relevant to this story)</li>
<li>vagrant_data/ &#8211; (.gitignore&#8217;d) created by vagrant script for copies of backups and such</li>
<li>vagrant_setup/ &#8211; scripts for vagrant like bootstrap.sh and mysql-secure.sh</li>
<li>Vagrantfile &#8211; the main Vagrant provisioning script</li>
<li>vagrant.config &#8211; (.gitignore&#8217;d) the configuration file consumed by vagrant</li>
<li>vagrant.config.sample &#8211; a sample file to create a vagrant.config from</li>
</ul>
</li>
</ul>
<p>The real configuration file and vagrant_data folder are listed in the gitignore to ensure real configurations and media content don&#8217;t make it into git (more soon on where that media content even came from).</p>
<p><strong>Type &#8220;vagrant up&#8221; on the host:</strong></p>
<ul>
<li>VM is created with matching version of Centos and booted</li>
<li>The local configuration file is loaded with values for:
<ul>
<li>Root MySQL password</li>
<li>Site MySQL User and password</li>
<li>Prefix to use for the MySQL databases</li>
<li>VM IP Address and fake domain name (lessthandot.local)</li>
<li>Address, credentials, and filenames for our backups (not on our public server)</li>
</ul>
</li>
<li>A private network is setup using the configured IP Address</li>
<li>The VM&#8217;s hostname is set using the domain name above</li>
<li>The /etc/hosts file is updated with aliases for the configured domain and necessary subdomains (ex: blogs.lessthandot.local)</li>
<li>The host folder is linked to a new /vagrant folder on the VM (content in these folders is synced)</li>
<li>The bootstrap.sh is called to continue setup on the VM (passing in the configs args)</li>
</ul>
<p><strong>Bootstrap.sh on the VM (runs from the Vagrantfile above):</strong></p>
<ul>
<li>Creates a local /vagrant/vagrant_data folder if it doesn&#8217;t exist (this is synced with the host)</li>
<li>If there isn&#8217;t a database backup available in /vagrant/vagrant_data:
<ul>
<li>Connect to the backup server and download the most recent database backup</li>
<li>Since this is synced with the host, I can choose to leave this file for subsequent &#8220;vagrant up&#8221; runs or delete it to get a fresh one</li>
</ul>
</li>
<li>If there isn&#8217;t a media backup available in /vagrant/vagrant_data:
<ul>
<li>Connect to the backup server and download the most recent media backup</li>
</ul>
</li>
<li>Install PHP
<ul>
<li>I had to add a new package source to get the specific version I wanted: rpm -Uvh https:/a.completely.different.source/</li>
<li>Then <code>yum -y install php-blah</code> the list of PHP packages we use </li>
</ul>
</li>
<li>Install MySQL
<ul>
<li><code>yum -y install mysql-server</code></li>
<li><code>service mysqld start</code></li>
</ul>
</li>
<li>Secure MySQL &#8211; run the &#8220;secure-mysql.sh&#8221; script (below), passing the configured root password from the conf file</li>
<li>Create the website database user from passed configs</li>
<li>Restore MySQL Backups
<ul>
<li>unzip the database backup from /vagrant/vagrant_data to the local user directory</li>
<li>for each database (passing in the root password $SETTINGS_MYSQL_ROOTPASS and prefix $SETTINGS_MYSQL_DBPREFIX)
<ul>
<li><code>mysql -u root -p"$SETTINGS_MYSQL_ROOTPASS" -e "CREATE DATABASE "$SETTINGS_MYSQL_DBPREFIX"_sampledb COLLATE=utf8_general_ci"</code></li>
<li><code>mysql -u root -p"$SETTINGS_MYSQL_ROOTPASS" "$SETTINGS_MYSQL_DBPREFIX"_sampledb &lt; mysql/prod_sampledb.sql</code></li>
</ul>
</li>
<li>GRANT a narrow set of read/write rights to the web user for these new databases</li>
</ul>
</li>
<li>Install Apache
<ul>
<li>yum -y install httpd</li>
</ul>
</li>
<li>Configure All The Things (site-setup.sh)
<ul>
<li>Create /etc/httpd/conf.d/z_lessthandot.httpd.conf with IP Address and definitions for all of the subdomains to match production site</li>
<li>Overwrite /etc/httpd/conf/httpd.conf with production version</li>
<li>Overwrite php.ini with production version</li>
<li>Create main site config.php using the configured domain name, MySQL credentials, etc</li>
<li>Update hostname in the WordPress database (wiki) in a couple places</li>
<li>Extract media files from the backups and put them in the appropriate places (already gitignored, these are replaced with soft links in production)</li>
<li>restart apache, cross fingers</li>
</ul>
</li>
</ul>
<p>At this point I can open up my local browser of choice, type in http://lessthandot.local,/ and the site loads with up to date data. All of the links throughout the site link to appropriate sub-domains as you move from sub-site to sub-site, and everything runs smoothly. If I screw something up, I&#8217;m working in a local git folder and can back it out and, if it&#8217;s bad enough, destroy and recreate my environment in minutes.</p>
<h2>Details (aka, Places Things Got Hinky)</h2>
<p>Here are some of the details and sticky spots, without revealing anything I shouldn&#8217;t behind the scenes on our server.</p>
<h3>64-bit OS on Windows</h3>
<p>initially I couldn&#8217;t get the VirtualBox VMs to start. vagrant would get stuck after setting the private key for SSH. I pulled up the VritualBox GUI and tried to view the screen and it warned me that I couldn&#8217;t run a 64-bit VM. I rebooted and turned on the Intel virtualization option in my BIOS, which didn&#8217;t fix it. Then I removed the Hyper-V feature from Windows, which did the trick.</p>
<p>At this point, I could successfully launch a Centos VM from the command-line. I could SSH into the system with &#8220;vagrant ssh&#8221; and it automatically linked my host directory with &#8220;/vagrant&#8221; on the VM, so files copied in either would sync back to the first&#8221;.</p>
<h3>Local Configuration File, not in git, passed through to VM</h3>
<p>The local configuration file works like this.</p>
<p>1) Added a vagrant.config file using YAML that looked like this:</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="text"><thead><tr><td colspan="2"  class="head">Text</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
</pre></td><td class="de1"><pre class="de1">mysql.rootpass: &nbsp; &nbsp;qwertyissupersafe
mysql.webuser: &nbsp; &nbsp; yourusername
mysql.webpass: &nbsp; &nbsp; yourpassword
mysql.dbprefix: &nbsp; &nbsp;ltd
vagrant.ipaddress: 192.168.1.1
vagrant.hostname: &nbsp;ltd.local
backups.address: &nbsp; 192.168.1.2
backups.username: &nbsp;FTPUserNameHere
backups.password: &nbsp;PasswordHere
backups.conf: &nbsp; &nbsp; &nbsp;lotsostuff.tar.gz
backups.data: &nbsp; &nbsp; &nbsp;thedatas.tar.gz</pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">mysql.rootpass:    qwertyissupersafe
mysql.webuser:     yourusername
mysql.webpass:     yourpassword
mysql.dbprefix:    ltd
vagrant.ipaddress: 192.168.1.1
vagrant.hostname:  ltd.local
backups.address:   192.168.1.2
backups.username:  FTPUserNameHere
backups.password:  PasswordHere
backups.conf:      lotsostuff.tar.gz
backups.data:      thedatas.tar.gz</pre></div></div>

<p>2) Added logic in the Vagrantfile to parse the config file and later pass values to the bootstrap as args:</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="ruby"><thead><tr><td colspan="2"  class="head">Ruby</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
</pre></td><td class="de1"><pre class="de1"><span class="co1"># -*- mode: ruby -*-</span>
<span class="co1"># vi: set ft=ruby :</span>
<span class="kw3">require</span> <span class="st0">'yaml'</span>
&nbsp;
Vagrant.<span class="me1">configure</span><span class="br0">&#40;</span><span class="nu0">2</span><span class="br0">&#41;</span> <span class="kw1">do</span> <span class="sy0">|</span>config<span class="sy0">|</span>
&nbsp;
&nbsp; <span class="co1"># load settings from file</span>
&nbsp; custom_vagrantfile = <span class="st0">'vagrant.local'</span>
&nbsp; <span class="kw1">if</span> <span class="kw4">File</span>.<span class="me1">exist</span>?<span class="br0">&#40;</span>custom_vagrantfile<span class="br0">&#41;</span>
&nbsp; &nbsp; settings = <span class="kw4">YAML</span>.<span class="me1">load_file</span> custom_vagrantfile
&nbsp; <span class="kw1">else</span>
&nbsp; &nbsp; <span class="kw3">raise</span><span class="br0">&#40;</span><span class="kw4">Exception</span>, <span class="st0">&quot;Settings file '#{custom_vagrantfile}' has not been created. Please copy the sample file and fill in the necessary passwords (don't worry, it's excluded from git)&quot;</span><span class="br0">&#41;</span>
&nbsp; <span class="kw1">end</span>
&nbsp;
&nbsp; <span class="co1"># ... more stuff ###</span>
&nbsp;
&nbsp; settings_array = <span class="br0">&#91;</span>
&nbsp; &nbsp; settings<span class="br0">&#91;</span><span class="st0">&quot;mysql.rootpass&quot;</span><span class="br0">&#93;</span>, 
&nbsp; &nbsp; settings<span class="br0">&#91;</span><span class="st0">&quot;mysql.webuser&quot;</span><span class="br0">&#93;</span>, 
&nbsp; &nbsp; settings<span class="br0">&#91;</span><span class="st0">&quot;mysql.webpass&quot;</span><span class="br0">&#93;</span>, 
&nbsp; &nbsp; settings<span class="br0">&#91;</span><span class="st0">&quot;mysql.dbprefix&quot;</span><span class="br0">&#93;</span>, 
&nbsp; &nbsp; settings<span class="br0">&#91;</span><span class="st0">&quot;vagrant.ipaddress&quot;</span><span class="br0">&#93;</span>, 
&nbsp; &nbsp; settings<span class="br0">&#91;</span><span class="st0">&quot;vagrant.hostname&quot;</span><span class="br0">&#93;</span>, 
&nbsp; &nbsp; settings<span class="br0">&#91;</span><span class="st0">&quot;backups.address&quot;</span><span class="br0">&#93;</span>, 
&nbsp; &nbsp; settings<span class="br0">&#91;</span><span class="st0">&quot;backups.username&quot;</span><span class="br0">&#93;</span>, 
&nbsp; &nbsp; settings<span class="br0">&#91;</span><span class="st0">&quot;backups.password&quot;</span><span class="br0">&#93;</span>, 
&nbsp; &nbsp; settings<span class="br0">&#91;</span><span class="st0">&quot;backups.conf&quot;</span><span class="br0">&#93;</span>, 
&nbsp; &nbsp; settings<span class="br0">&#91;</span><span class="st0">&quot;backups.data&quot;</span><span class="br0">&#93;</span>
&nbsp; <span class="br0">&#93;</span>
&nbsp; config.<span class="me1">vm</span>.<span class="me1">provision</span> <span class="re3">:shell</span>, <span class="re3">:path</span> <span class="sy0">=&gt;</span> <span class="st0">&quot;vagrant_setup/bootstrap.sh&quot;</span>, <span class="re3">:args</span> <span class="sy0">=&gt;</span> settings_array
<span class="kw1">end</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse"># -*- mode: ruby -*-
# vi: set ft=ruby :
require 'yaml'

Vagrant.configure(2) do |config|

  # load settings from file
  custom_vagrantfile = 'vagrant.local'
  if File.exist?(custom_vagrantfile)
    settings = YAML.load_file custom_vagrantfile
  else
    raise(Exception, "Settings file '#{custom_vagrantfile}' has not been created. Please copy the sample file and fill in the necessary passwords (don't worry, it's excluded from git)")
  end

  # ... more stuff ###

  settings_array = [
    settings["mysql.rootpass"], 
    settings["mysql.webuser"], 
    settings["mysql.webpass"], 
    settings["mysql.dbprefix"], 
    settings["vagrant.ipaddress"], 
    settings["vagrant.hostname"], 
    settings["backups.address"], 
    settings["backups.username"], 
    settings["backups.password"], 
    settings["backups.conf"], 
    settings["backups.data"]
  ]
  config.vm.provision :shell, :path =&gt; "vagrant_setup/bootstrap.sh", :args =&gt; settings_array
end</pre></div></div>

<p>I was explicit with the settings array so it would be more obvious to me if I mismatched an arg between the array and the bootstrap script.</p>
<p>3) The bootstrap file then starts like so:</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="bash"><thead><tr><td colspan="2"  class="head">Bash</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
</pre></td><td class="de1"><pre class="de1"><span class="co0">#!/usr/bin/env bash</span>
&nbsp;
<span class="co0"># Settings from Vagrantfile</span>
<span class="re2">SETTINGS_MYSQL_ROOTPASS</span>=<span class="re4">$1</span>
<span class="re2">SETTINGS_MYSQL_WEBUSER</span>=<span class="re4">$2</span>
<span class="re2">SETTINGS_MYSQL_WEBPASS</span>=<span class="re4">$3</span>
<span class="re2">SETTINGS_MYSQL_DBPREFIX</span>=<span class="re4">$4</span>
<span class="re2">SETTINGS_VAGRANT_IPADDRESS</span>=<span class="re4">$5</span>
<span class="re2">SETTINGS_VAGRANT_HOSTNAME</span>=<span class="re4">$6</span>
<span class="re2">SETTINGS_BACKUPS_ADDRESS</span>=<span class="re4">$7</span>
<span class="re2">SETTINGS_BACKUPS_USERNAME</span>=<span class="re4">$8</span>
<span class="re2">SETTINGS_BACKUPS_PASSWORD</span>=<span class="re4">$9</span>
<span class="re2">SETTINGS_BACKUPS_CONF</span>=<span class="co1">${10}</span>
<span class="re2">SETTINGS_BACKUPS_DATA</span>=<span class="co1">${11}</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">#!/usr/bin/env bash

# Settings from Vagrantfile
SETTINGS_MYSQL_ROOTPASS=$1
SETTINGS_MYSQL_WEBUSER=$2
SETTINGS_MYSQL_WEBPASS=$3
SETTINGS_MYSQL_DBPREFIX=$4
SETTINGS_VAGRANT_IPADDRESS=$5
SETTINGS_VAGRANT_HOSTNAME=$6
SETTINGS_BACKUPS_ADDRESS=$7
SETTINGS_BACKUPS_USERNAME=$8
SETTINGS_BACKUPS_PASSWORD=$9
SETTINGS_BACKUPS_CONF=${10}
SETTINGS_BACKUPS_DATA=${11}</pre></div></div>

<p>4) To prevent the config file from committing, I added it to the gitignore and created a sample file with dummy files that would be added to the git repository.</p>
<h3>Custom Domains / Hosts file</h3>
<p>To have the host names resolve, I used a plugin named &#8220;hostsupdater&#8221;. It doesn&#8217;t support windows UAC yet, so for the short term I had to make my hosts file editable by my user account (ick). I chose this plugin because it allowed me to specify additional aliases rather than assuming I only wanted the hostname of the VM added.</p>
<p>To install it:<br />
<code>vagrant plugin install vagrant-hostsupdater</code></p>
<p>In my Vagrantfile:</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="ruby"><thead><tr><td colspan="2"  class="head">Ruby</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
</pre></td><td class="de1"><pre class="de1">config.<span class="me1">vm</span>.<span class="me1">hostname</span> = settings<span class="br0">&#91;</span><span class="st0">&quot;vagrant.hostname&quot;</span><span class="br0">&#93;</span>
config.<span class="me1">hostsupdater</span>.<span class="me1">aliases</span> = <span class="br0">&#91;</span><span class="st0">&quot;sqlcop.#{config.vm.hostname}&quot;</span>,<span class="st0">&quot;blogs.#{config.vm.hostname}&quot;</span>,<span class="st0">&quot;wiki.#{config.vm.hostname}&quot;</span>,<span class="st0">&quot;forum.#{config.vm.hostname}&quot;</span>,<span class="st0">&quot;cooking.#{config.vm.hostname}&quot;</span>,<span class="st0">&quot;admin.#{config.vm.hostname}&quot;</span><span class="br0">&#93;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">config.vm.hostname = settings["vagrant.hostname"]
config.hostsupdater.aliases = ["sqlcop.#{config.vm.hostname}","blogs.#{config.vm.hostname}","wiki.#{config.vm.hostname}","forum.#{config.vm.hostname}","cooking.#{config.vm.hostname}","admin.#{config.vm.hostname}"]</pre></div></div>

<p>The plugin, hostsupdater, takes care of adding and removing entries from the hosts files when I &#8220;vagrant up&#8221;.</p>
<h3>Copying files that already exist</h3>
<p>This will get stuck at an &#8220;are you sure&#8221; prompt: </p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="bash"><thead><tr><td colspan="2"  class="head">Bash</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
</pre></td><td class="de1"><pre class="de1"><span class="kw2">cp</span> <span class="sy0">/</span>vagrant<span class="sy0">/</span>configs<span class="sy0">/</span>httpd.conf <span class="sy0">/</span>etc<span class="sy0">/</span>httpd<span class="sy0">/</span>conf<span class="sy0">/</span>httpd.conf</pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">cp /vagrant/configs/httpd.conf /etc/httpd/conf/httpd.conf</pre></div></div>

<p>This will charge ahead without any prompting at all: </p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="bash"><thead><tr><td colspan="2"  class="head">Bash</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
</pre></td><td class="de1"><pre class="de1">\<span class="kw2">cp</span> <span class="sy0">/</span>vagrant<span class="sy0">/</span>configs<span class="sy0">/</span>httpd.conf <span class="sy0">/</span>etc<span class="sy0">/</span>httpd<span class="sy0">/</span>conf<span class="sy0">/</span>httpd.conf</pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">\cp /vagrant/configs/httpd.conf /etc/httpd/conf/httpd.conf</pre></div></div>

<p>Do the second. <img src="https://s.w.org/images/core/emoji/2/72x72/1f642.png" alt="🙂" class="wp-smiley" style="height: 1em; max-height: 1em;" /></p>
<h3>Securing MySQL &#8211; mysql-secure.sh</h3>
<p>When you install MySQL, it will suggest you run a command to secure your installation. This script performs the same steps:</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="bash"><thead><tr><td colspan="2"  class="head">Bash</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
</pre></td><td class="de1"><pre class="de1"><span class="co0">#!/usr/bin/env bash</span>
&nbsp;
<span class="re2">SETTINGS_MYSQL_ROOTPASS</span>=<span class="re4">$1</span>
mysqladmin <span class="re5">-uroot</span> password <span class="st0">&quot;<span class="es2">$SETTINGS_MYSQL_ROOTPASS</span>&quot;</span>
mysql <span class="re5">-u</span> root <span class="re5">-p</span><span class="st0">&quot;<span class="es2">$SETTINGS_MYSQL_ROOTPASS</span>&quot;</span> <span class="re5">-e</span> <span class="st0">&quot;UPDATE mysql.user SET Password=PASSWORD('<span class="es2">$SETTINGS_MYSQL_ROOTPASS</span>') WHERE User='root'&quot;</span>
mysql <span class="re5">-u</span> root <span class="re5">-p</span><span class="st0">&quot;<span class="es2">$SETTINGS_MYSQL_ROOTPASS</span>&quot;</span> <span class="re5">-e</span> <span class="st0">&quot;DELETE FROM mysql.user WHERE User='root' AND Host NOT IN ('localhost', '127.0.0.1', '::1')&quot;</span>
mysql <span class="re5">-u</span> root <span class="re5">-p</span><span class="st0">&quot;<span class="es2">$SETTINGS_MYSQL_ROOTPASS</span>&quot;</span> <span class="re5">-e</span> <span class="st0">&quot;DELETE FROM mysql.user WHERE User=''&quot;</span>
mysql <span class="re5">-u</span> root <span class="re5">-p</span><span class="st0">&quot;<span class="es2">$SETTINGS_MYSQL_ROOTPASS</span>&quot;</span> <span class="re5">-e</span> <span class="st0">&quot;DELETE FROM mysql.db WHERE Db='test' OR Db='test\_%'&quot;</span>
mysql <span class="re5">-u</span> root <span class="re5">-p</span><span class="st0">&quot;<span class="es2">$SETTINGS_MYSQL_ROOTPASS</span>&quot;</span> <span class="re5">-e</span> <span class="st0">&quot;FLUSH PRIVILEGES&quot;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">#!/usr/bin/env bash

SETTINGS_MYSQL_ROOTPASS=$1
mysqladmin -uroot password "$SETTINGS_MYSQL_ROOTPASS"
mysql -u root -p"$SETTINGS_MYSQL_ROOTPASS" -e "UPDATE mysql.user SET Password=PASSWORD('$SETTINGS_MYSQL_ROOTPASS') WHERE User='root'"
mysql -u root -p"$SETTINGS_MYSQL_ROOTPASS" -e "DELETE FROM mysql.user WHERE User='root' AND Host NOT IN ('localhost', '127.0.0.1', '::1')"
mysql -u root -p"$SETTINGS_MYSQL_ROOTPASS" -e "DELETE FROM mysql.user WHERE User=''"
mysql -u root -p"$SETTINGS_MYSQL_ROOTPASS" -e "DELETE FROM mysql.db WHERE Db='test' OR Db='test\_%'"
mysql -u root -p"$SETTINGS_MYSQL_ROOTPASS" -e "FLUSH PRIVILEGES"</pre></div></div>

<p>The single parameter for this script is the value from the configuration that I intended the root password to be set to. This is also passed to my later scripts for applying backups and creating a new user.</p>
<h3>Template for httpd.conf</h3>
<p>The z_lessthandot.httpd.conf template is just a copy of the production conf with tokens in all the spots that the IP Address or domain name show up, like so:</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="text"><thead><tr><td colspan="2"  class="head">Text</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
</pre></td><td class="de1"><pre class="de1">NameVirtualHost %%SETTINGS_VAGRANT_IPADDRESS%%:80 
&nbsp;
#### Production Sites ####
##########################
&nbsp;
&lt;VirtualHost %%SETTINGS_VAGRANT_IPADDRESS%%:80&gt;
&nbsp; &nbsp; DocumentRoot /vagrant/trunk/www/
&nbsp; &nbsp; ServerName %%SETTINGS_VAGRANT_HOSTNAME%%
&nbsp; &nbsp; # ... etc ...
&lt;/VirtualHost&gt;
&nbsp;
&lt;VirtualHost %%SETTINGS_VAGRANT_IPADDRESS%%:80&gt;
&nbsp; &nbsp; DocumentRoot /vagrant/trunk/forum/
&nbsp; &nbsp; ServerName forum.%%SETTINGS_VAGRANT_HOSTNAME%%
&nbsp; &nbsp; # ...etc...
&lt;/VirtualHost&gt;</pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">NameVirtualHost %%SETTINGS_VAGRANT_IPADDRESS%%:80 

#### Production Sites ####
##########################

&lt;VirtualHost %%SETTINGS_VAGRANT_IPADDRESS%%:80&gt;
	DocumentRoot /vagrant/trunk/www/
	ServerName %%SETTINGS_VAGRANT_HOSTNAME%%
	# ... etc ...
&lt;/VirtualHost&gt;

&lt;VirtualHost %%SETTINGS_VAGRANT_IPADDRESS%%:80&gt;
	DocumentRoot /vagrant/trunk/forum/
	ServerName forum.%%SETTINGS_VAGRANT_HOSTNAME%%
	# ...etc...
&lt;/VirtualHost&gt;</pre></div></div>

<p>To replace the tokens, I use sed and the args passed into the script (originally form the config file):</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="bash"><thead><tr><td colspan="2"  class="head">Bash</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
</pre></td><td class="de1"><pre class="de1"><span class="kw2">sed</span> <span class="st0">&quot;s/%%SETTINGS_VAGRANT_IPADDRESS%%/<span class="es2">$SETTINGS_VAGRANT_IPADDRESS</span>/g;s/%%SETTINGS_VAGRANT_HOSTNAME%%/<span class="es2">$SETTINGS_VAGRANT_HOSTNAME</span>/g&quot;</span> <span class="sy0">/</span>vagrant<span class="sy0">/</span>vagrant_setup<span class="sy0">/</span>z_lessthandot.httpd.conf <span class="sy0">&gt;</span> <span class="sy0">/</span>etc<span class="sy0">/</span>httpd<span class="sy0">/</span>conf.d<span class="sy0">/</span>z_lessthandot.httpd.conf</pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">sed "s/%%SETTINGS_VAGRANT_IPADDRESS%%/$SETTINGS_VAGRANT_IPADDRESS/g;s/%%SETTINGS_VAGRANT_HOSTNAME%%/$SETTINGS_VAGRANT_HOSTNAME/g" /vagrant/vagrant_setup/z_lessthandot.httpd.conf &gt; /etc/httpd/conf.d/z_lessthandot.httpd.conf</pre></div></div>

<p>And there we go, one customized site httpd.conf.</p>
<h2>Instant Server, Just Add Water</h2>
<p>Having done this once, I know the next one I have to build will be even easier. This provides me the freedom of working with the tools of my choice while also running the code exactly like it will on the production environment, without any quirks from my OS, personal PHP setup, and so on getting in my way. If the worst happens, I can destroy the machine and recreate it in minutes.</p>
]]></content:encoded>
			<wfw:commentRss>/index.php/webdev/duplicating-lessthandot-on-a-vagrant-vm/feed/</wfw:commentRss>
		<slash:comments>1</slash:comments>
		</item>
	</channel>
</rss>
