<?xml version="1.0" encoding="UTF-8"?><rss version="2.0"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:atom="http://www.w3.org/2005/Atom"
	xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
	xmlns:slash="http://purl.org/rss/1.0/modules/slash/"
	>

<channel>
	<title>iif &#8211; LessthanDot</title>
	<atom:link href="/index.php/tag/iif/feed/" rel="self" type="application/rss+xml" />
	<link>/</link>
	<description>A Technical Community for IT Professionals</description>
	<lastBuildDate>Sat, 09 Mar 2019 12:50:36 +0000</lastBuildDate>
	<language>en-US</language>
	<sy:updatePeriod>hourly</sy:updatePeriod>
	<sy:updateFrequency>1</sy:updateFrequency>
	<generator>https://wordpress.org/?v=4.6.1</generator>
	<item>
		<title>T-SQL CASE functions</title>
		<link>/index.php/datamgmt/dbprogramming/mssqlserver/t-sql-case-functions/</link>
		<comments>/index.php/datamgmt/dbprogramming/mssqlserver/t-sql-case-functions/#comments</comments>
		<pubDate>Mon, 03 Sep 2012 10:12:00 +0000</pubDate>
		<dc:creator><![CDATA[Axel Achten (axel8s)]]></dc:creator>
				<category><![CDATA[Microsoft SQL Server]]></category>
		<category><![CDATA[case]]></category>
		<category><![CDATA[choose]]></category>
		<category><![CDATA[coalesce]]></category>
		<category><![CDATA[iif]]></category>
		<category><![CDATA[isnull]]></category>
		<category><![CDATA[sql server 2012]]></category>
		<category><![CDATA[t-sql]]></category>

		<guid isPermaLink="false">/index.php/2012/09/t-sql-case-functions/</guid>
		<description><![CDATA[With the CASE statement you can add conditional logic to your T-SQL code. T-SQL 2012 has certain functions that can be seen as CASE shortcuts. With these functions you can quickly use some CASE functionality and as a surplus, because they are functions&#8230;]]></description>
				<content:encoded><![CDATA[<p>With the CASE statement you can add conditional logic to your T-SQL code. T-SQL 2012 has certain functions that can be seen as CASE shortcuts. With these functions you can quickly use some CASE functionality and as a surplus, because they are functions you can use them everywhere where expressions are allowed. The examples are written against the AdventureWorks2012 database:</p>
<p><b>ISNULL</b></p>
<p>The ISNULL(&#8216;Null_Expression&#8217;,&#8217;Replace_Value&#8217;) function evaluates the value of the &#8216;Null_Expression&#8217; and if the result is NULL it returns the &#8216;Replace_Value&#8217; value. Otherwise the &#8216;Null_Expression&#8217; value is returned:</p>
<pre>SELECT TOP 10 ISNULL(MiddleName,'NA')AS NoNullMiddleName FROM Person.Person</pre>
<p>In the result we see that all the NULL values are replaced by the &#8216;NA&#8217; value. Values that were not NULL keep their value:</p>
<div class="image_block"><a href="/wp-content/uploads/blogs/DataMgmt/Axel8s/CaseSC1.gif?mtime=1346673979"><img alt="" src="/wp-content/uploads/blogs/DataMgmt/Axel8s/CaseSC1.gif?mtime=1346673979" width="154" height="235" /></a></div>
<p><b>COALESCE</b></p>
<p>This function accepts 2 or more arguments and will return the first non NULL value. In the next example I use a common table expression and fill it with items with a weight and no size, items with a size and no weight and items with a size and weight:</p>
<pre>WITH Product_CTE (name, size, weight) AS
(
	SELECT TOP 10 name, size, weight FROM Production.Product
	WHERE size IS NOT NULL AND weight IS NULL
	UNION
	SELECT TOP 10 name, size, weight FROM Production.Product
	WHERE weight IS NOT NULL AND size IS NULL
	UNION
	SELECT TOP 10 name, size, weight FROM Production.Product
	WHERE weight IS NOT NULL AND size IS NOT NULL
)
Select name, size, weight, COALESCE(size,CAST(weight AS VARCHAR(10))) AS coalesceresult
 FROM Product_CTE</pre>
<p>In the result you see that the size is shown in the coalesceresult column unless the original value was NULL. In that case the weight value is returned:</p>
<div class="image_block"><a href="/wp-content/uploads/blogs/DataMgmt/Axel8s/CaseSC2.gif?mtime=1346673994"><img alt="" src="/wp-content/uploads/blogs/DataMgmt/Axel8s/CaseSC2.gif?mtime=1346673994" width="369" height="269" /></a></div>
<p><b>IIF</b></p>
<p>Just like in SSIS and MS Access, SQL Server 2012 now supports the IIF(&#8216;logical_expression&#8217;,&#8217;expression_if_true&#8217;,&#8217;expression_if_false&#8217;) function. So if the &#8216;logical_expression evaluates to TRUE the &#8216;expression_if_true&#8217; value is shown, otherwise the &#8216;expression_if_false&#8217; is executed:</p>
<pre>SELECT IIF(Title LiKE '%s.','Miss','Mister') AS Title, FirstName 
 FROM Person.Person
 WHERE Title IS NOT NULL</pre>
<p>Since IIF supports the true/false expressions you can even put logical expressions in their place to create single line CASE scenarios to have more possibilities. For ease of use and general readability of your code, I would not recommend this. The result of the previous query:</p>
<div class="image_block"><a href="/wp-content/uploads/blogs/DataMgmt/Axel8s/CaseSC3.gif?mtime=1346674010"><img alt="" src="/wp-content/uploads/blogs/DataMgmt/Axel8s/CaseSC3.gif?mtime=1346674010" width="154" height="257" /></a></div>
<p><b>CHOOSE</b></p>
<p>CHOOSE(&#8216;index&#8217;,&#8217;expr1&#8242;,&#8217;expr2&#8242;,&#8230;,&#8217;exprn&#8217;) is also known in MS Access and new in SQL Server 2012 and gives the possibility to use an index number and the result of the corresponding index expression:</p>
<pre>SELECT FirstName, LastName, MiddleName, CHOOSE(2,FirstName, LastName, MiddleName) AS Chosen
 FROM Person.Person</pre>
<p>In normal coding you would dynamically assign a value to the index with a variable. The result of the above query is:</p>
<div class="image_block"><a href="/wp-content/uploads/blogs/DataMgmt/Axel8s/CaseSC4.gif?mtime=1346674021"><img alt="" src="/wp-content/uploads/blogs/DataMgmt/Axel8s/CaseSC4.gif?mtime=1346674021" width="330" height="256" /></a></div>
<p><b>Conclusion</b></p>
<p>The CASE shortcuts can be very useful in coding scenarios but note that only COALESCE is ANSI standard. IIF and CHOOSE are added to the T-SQL 2012 language to ease the migration from MS Access to SQL Server.</p>
]]></content:encoded>
			<wfw:commentRss>/index.php/datamgmt/dbprogramming/mssqlserver/t-sql-case-functions/feed/</wfw:commentRss>
		<slash:comments>1</slash:comments>
		</item>
		<item>
		<title>A Quick look at the new IIF function in Denali CTP3</title>
		<link>/index.php/datamgmt/datadesign/a-quick-look-at-the/</link>
		<comments>/index.php/datamgmt/datadesign/a-quick-look-at-the/#comments</comments>
		<pubDate>Wed, 13 Jul 2011 13:19:00 +0000</pubDate>
		<dc:creator><![CDATA[SQLDenis]]></dc:creator>
				<category><![CDATA[Data Modelling and Design]]></category>
		<category><![CDATA[Database Programming]]></category>
		<category><![CDATA[Microsoft SQL Server]]></category>
		<category><![CDATA[Microsoft SQL Server Admin]]></category>
		<category><![CDATA[denali]]></category>
		<category><![CDATA[functions]]></category>
		<category><![CDATA[iif]]></category>

		<guid isPermaLink="false">/index.php/2011/07/a-quick-look-at-the/</guid>
		<description><![CDATA[Denali CTP3 comes with the IIF function, if you have used VB or Excel then you already know how this function works. In essence this function is a shorter version of a CASE statement. 

The syntax is as follows

IIF ( boolean_expression, true_value,&#8230;]]></description>
				<content:encoded><![CDATA[<p>Denali CTP3 comes with the IIF function, if you have used VB or Excel then you already know how this function works. In essence this function is a shorter version of a CASE statement. </p>
<p>The syntax is as follows</p>
<pre>IIF ( boolean_expression, true_value, false_value )</pre>
<p>So instead of this</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
</pre></td><td class="de1"><pre class="de1"><span class="kw1">SELECT</span> <span class="kw1">CASE</span> <span class="kw1">WHEN</span> <span class="nu0">1</span> <span class="sy0">=</span> <span class="nu0">2</span> <span class="kw1">THEN</span> <span class="st0">'equal'</span> <span class="kw1">ELSE</span> <span class="st0">'not equal'</span> <span class="kw1">END</span> <span class="kw1">AS</span> Comp</pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">SELECT CASE WHEN 1 = 2 THEN 'equal' ELSE 'not equal' END AS Comp</pre></div></div>

<p>We can do this</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
</pre></td><td class="de1"><pre class="de1"><span class="kw1">SELECT</span> IIF<span class="br0">&#40;</span><span class="nu0">1</span><span class="sy0">=</span><span class="nu0">2</span>,<span class="st0">'equal'</span>,<span class="st0">'not equal'</span><span class="br0">&#41;</span> <span class="kw1">as</span> Comp</pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">SELECT IIF(1=2,'equal','not equal') as Comp</pre></div></div>

<p>Both of those will return not equal</p>
<p>Be aware that you can&#8217;t use NULL like in the example below</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
</pre></td><td class="de1"><pre class="de1"><span class="kw1">SELECT</span> IIF<span class="br0">&#40;</span><span class="nu0">1</span><span class="sy0">=</span><span class="nu0">2</span>,<span class="sy0">NULL</span> ,<span class="sy0">NULL</span> <span class="br0">&#41;</span> <span class="kw1">as</span> calc</pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">SELECT IIF(1=2,NULL ,NULL ) as calc</pre></div></div>

<p>It throws an error (with a typo)</p>
<p>Msg 8133, Level 16, State 1, Line 1<br />
At <strong>lease </strong>one of the result expressions in a CASE specification must be an expression other than the NULL constant.</p>
<p>If you use a variable then you can use NULL</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
</pre></td><td class="de1"><pre class="de1"><span class="kw1">declare</span> @i <span class="kw1">int</span> <span class="sy0">=</span> <span class="sy0">NULL</span> 
&nbsp;
&nbsp;
<span class="kw1">SELECT</span> IIF<span class="br0">&#40;</span><span class="nu0">1</span><span class="sy0">=</span><span class="nu0">2</span>,@i,@i<span class="br0">&#41;</span> <span class="kw1">as</span> calc</pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">declare @i int = NULL 


SELECT IIF(1=2,@i,@i) as calc</pre></div></div>

<p>Here is some more info from Books On Line</p>
<p><em>IIF is a shorthand way for writing a CASE statement. It evaluates the Boolean expression passed as the first argument, and then returns either of the other two arguments based on the result of the evaluation. That is, the true_value is returned if the Boolean expression is true, and the false_value is returned if the Boolean expression is false or unknown. true_value and false_value can be of any type. The same rules that apply to the CASE statement for Boolean expressions, null handling, and return types also apply to IIF.</p>
<p>The fact that IIF is translated into CASE also has an impact on other aspects of the behavior of this function. Since CASE statements can nested only up to the level of 10, IIF statements can also be nested only up to the maximum level of 10. Also, IIF is remoted to other servers as a semantically equivalent CASE statement, with all the behaviors of a remoted CASE statement.</em></p>
<p>Here is a nested (silly) example</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
</pre></td><td class="de1"><pre class="de1"><span class="kw1">SELECT</span> IIF<span class="br0">&#40;</span><span class="nu0">1</span><span class="sy0">=</span><span class="nu0">2</span>,<span class="st0">'equal'</span>,IIF<span class="br0">&#40;</span><span class="nu0">4</span><span class="sy0">=</span><span class="nu0">2</span>,<span class="st0">'equal'</span>,<span class="st0">'not equal'</span><span class="br0">&#41;</span><span class="br0">&#41;</span> <span class="kw1">as</span> Comp</pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">SELECT IIF(1=2,'equal',IIF(4=2,'equal','not equal')) as Comp</pre></div></div>

<p>Here is another example that combines IIF with TRY_CONVERT to return if a value can be converted to a specific data type</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
</pre></td><td class="de1"><pre class="de1"><span class="kw1">SELECT</span> IIF<span class="br0">&#40;</span>TRY_CONVERT<span class="br0">&#40;</span><span class="kw1">float</span>,<span class="st0">'bla'</span><span class="br0">&#41;</span><span class="kw1">IS</span> <span class="sy0">NULL</span>,<span class="st0">'Cast failed'</span>,<span class="st0">'Cast succeeded'</span><span class="br0">&#41;</span>
<span class="kw1">UNION</span>
<span class="kw1">SELECT</span> IIF<span class="br0">&#40;</span>TRY_CONVERT<span class="br0">&#40;</span><span class="kw1">float</span>,<span class="st0">'1'</span><span class="br0">&#41;</span><span class="kw1">IS</span> <span class="sy0">NULL</span>,<span class="st0">'Cast failed'</span>,<span class="st0">'Cast succeeded'</span><span class="br0">&#41;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">SELECT IIF(TRY_CONVERT(float,'bla')IS NULL,'Cast failed','Cast succeeded')
UNION
SELECT IIF(TRY_CONVERT(float,'1')IS NULL,'Cast failed','Cast succeeded')</pre></div></div>

<p>&#8212;&#8212;&#8211;<br />
Cast failed<br />
Cast succeeded</p>
<p>I welcome this function, anything that makes the code shorter is welcomed with open arms by me.</p>
]]></content:encoded>
			<wfw:commentRss>/index.php/datamgmt/datadesign/a-quick-look-at-the/feed/</wfw:commentRss>
		<slash:comments>7</slash:comments>
		</item>
	</channel>
</rss>
