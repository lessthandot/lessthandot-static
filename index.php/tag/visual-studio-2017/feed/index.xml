<?xml version="1.0" encoding="UTF-8"?><rss version="2.0"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:atom="http://www.w3.org/2005/Atom"
	xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
	xmlns:slash="http://purl.org/rss/1.0/modules/slash/"
	>

<channel>
	<title>Visual Studio 2017 &#8211; LessthanDot</title>
	<atom:link href="/index.php/tag/visual-studio-2017/feed/" rel="self" type="application/rss+xml" />
	<link>/</link>
	<description>A Technical Community for IT Professionals</description>
	<lastBuildDate>Sat, 09 Mar 2019 12:50:36 +0000</lastBuildDate>
	<language>en-US</language>
	<sy:updatePeriod>hourly</sy:updatePeriod>
	<sy:updateFrequency>1</sy:updateFrequency>
	<generator>https://wordpress.org/?v=4.6.1</generator>
	<item>
		<title>Multiple NuGet Methods for VS2017 + MSBuild 15 in TeamCity</title>
		<link>/index.php/itprofessionals/softwareandconfigmgmt/multiple-nuget-methods-for-vs2017-msbuild-15-in-teamcity/</link>
		<comments>/index.php/itprofessionals/softwareandconfigmgmt/multiple-nuget-methods-for-vs2017-msbuild-15-in-teamcity/#respond</comments>
		<pubDate>Wed, 19 Jul 2017 18:06:25 +0000</pubDate>
		<dc:creator><![CDATA[Eli Weinstock-Herman (tarwn)]]></dc:creator>
				<category><![CDATA[Software and Configuration Management]]></category>
		<category><![CDATA[nuget]]></category>
		<category><![CDATA[teamcity]]></category>
		<category><![CDATA[Visual Studio 2017]]></category>

		<guid isPermaLink="false">/?p=8697</guid>
		<description><![CDATA[ASP.Net Projects and NuGet have been a moving target the last couple years. I have an ASP.Net Core project (.Net Framework) with several class libraries and had to work through a number of problems to get NuGet Restore working on a TeamCity CI server. Hopefully this will help someone else along the way. It turns [&#8230;]]]></description>
				<content:encoded><![CDATA[<p>ASP.Net Projects and NuGet have been a moving target the last couple years. I have an ASP.Net Core project (.Net Framework) with several class libraries and had to work through a number of problems to get NuGet Restore working on a TeamCity CI server. Hopefully this will help someone else along the way. </p>
<p>It turns out I have 3 situations:</p>
<ul>
<li>ASP.Net Core uses the new <a href="http://blog.nuget.org/20170316/NuGet-now-fully-integrated-into-MSBuild.html">PackageReference</a> for packages instead of packages.json</li>
<li>Other C# Projects still use the packages.json method for packages</li>
<li>Solution packages (great for tooling) are (still) not supported after VS 2013 (<a href="https://github.com/NuGet/Home/issues/522">NuGet #522</a>)</li>
</ul>
<p>(the last couple years also saw the ill-fated project.json, which isn&#8217;t represented here and may or may not be covered by one of these methods)</p>
<p>The software versions I am working with are:</p>
<ul>
<li>TeamCity 2017.1</li>
<li>NuGet 4.1.0</li>
<li>Visual Studio 2017 Community</li>
<li>MS Build Tools 2017 (MSBuild 15)</li>
</ul>
<p>I&#8217;ve outlined the issues I ran into and the individual Build Steps I used to workaround them.</p>
<h2>Some of the issues</h2>
<p><b>Issue #1: Restoring packages.json + PackageReference</b></p>
<p>NuGet Restore is built into MSBuild 15 (<code>msbuild /t:restore</code>) to support the new PackageReference case. Supposedly NuGet.exe 4+ supports this out of the box, but I was unable to make this work (<a href="https://docs.microsoft.com/en-us/nuget/consume-packages/package-restore">NuGet Package Restore</a>):</p>
<blockquote><p>
<code>msbuild /t:restore</code> 	Nuget 4.x+ and MSBuild 15.1+ with package references in project files only. nuget restore and dotnet restore both use this command for applicable projects. See NuGet pack and restore as MSBuild targets- restore target.
</p></blockquote>
<p>It is possible to <a href="http://blog.nuget.org/20170316/NuGet-now-fully-integrated-into-MSBuild.html#what-about-other-project-types-that-are-not-net-core">use PackageReference with other project types</a>, but you have to know to turn this on from the beginning. There is no migration option to change tracks with later. </p>
<p><b>Issue #2: MSBuild install location has moved</b><br />
MSBuild installs to a new folder with 2017 (<code>C:\Program Files (x86)\Microsoft Visual Studio\2017\BuildTools\MSBuild</code>), which means for a while my NuGet Restore commands were defaulting to MSBuild 14. The <code>-MsBuildPath</code> parameter let&#8217;s you provide a path to a specific install, so we can at MSBuild 15 via it&#8217;s new path. </p>
<p><b>Issue #3: Regular Package.json files plus Solution Package.son File</b></p>
<p>When we run it against a <code>*.sln</code> file, NuGet.exe will find and run against each project&#8217;s <code>package.json</code> file. Alternatively, you can also point NuGet.exe directly at a package.json file to install that specific file, which is a workaround for the no longer support solution packages. There is not an option (that I could find) to combine these into a single call.</p>
<p><b>Issue #4: TeamCity only supports NuGet Restore of *.sln files</b></p>
<p>TeamCity restricts the built-in NuGet Restore command to only run against files that end in &#8220;.sln&#8221;. A separate flaw in this restriction was <a href="https://blog.jetbrains.com/teamcity/2013/08/nuget-package-restore-with-teamcity/#comment-177428">pointed out to JetBrains in 2015</a>, but has not been fixed as of TeamCity 2017.1.</p>
<p>This restriction prevents me from doing a clean NuGet Restore of my solution-level packages.json from issue #3.</p>
<h2>The Fixes</h2>
<p>I ended up using 3 Build Steps to do NuGet restores in TeamCity for this one ASP.Net Core deployment.</p>
<p><div id="attachment_8699" style="width: 882px" class="wp-caption aligncenter"><img src="/wp-content/uploads/2017/07/TeamCityNuGetRestorePost.png" alt="TeamCity NuGet Restore Steps" width="872" height="239" class="size-full wp-image-8699" srcset="/wp-content/uploads/2017/07/TeamCityNuGetRestorePost.png 872w, /wp-content/uploads/2017/07/TeamCityNuGetRestorePost-300x82.png 300w, /wp-content/uploads/2017/07/TeamCityNuGetRestorePost-768x210.png 768w" sizes="(max-width: 872px) 100vw, 872px" /><p class="wp-caption-text">TeamCity NuGet Restore Steps</p></div><br />
<b>1. Restore from package.json files</b></p>
<p>I used the built-in Nuget Installer with the Restore option and the name of my solution file. I added an extra command line parameter to point it at MSBuild 15:<br />
<code>-MsBuildPath "C:\Program Files (x86)\Microsoft Visual Studio\2017\BuildTools\MSBuild\15.0\Bin"</code>.</p>
<p><b>2. Restore from PackageReferences</b></p>
<p>For PackageReference, I used the MSBuild task in TeamCity with my Solution file as the Build file path and a target of &#8220;Restore&#8221; (same as running <code>msbuild /t:Restore</code>).</p>
<p><b>3. Restore Solution-level packages</b></p>
<p>A solution-level packages file is useful for solution-level build and deploy tools that aren&#8217;t needed locally. Because TeamCity has an artifical constraint on only accepting *.sln files, I solved this with a <code>Command Line</code> runner type with the following script:</p>
<p><code>%teamcity.tool.NuGet.CommandLine.DEFAULT%\\tools\\nuget.exe restore Deployment/packages.config -PackagesDirectory packages</code></p>
<p>Deployment/packages.config is my solution-level packages file. The TeamCity variable resolves to the path of my default NuGet installation, which is 4.1.0 in this case.</p>
<h2>Final Words</h2>
<p>This experience was roughly 3-5 times longer than I expected, given the number of ASP.Net deployments, TeamCity setups, and so on I&#8217;ve done over the years. The playing field feels littered with half-baked solutions that not only break backwards compatibility, but break compatibility across projects in the same solution using vanilla Visual Studio project templates. </p>
]]></content:encoded>
			<wfw:commentRss>/index.php/itprofessionals/softwareandconfigmgmt/multiple-nuget-methods-for-vs2017-msbuild-15-in-teamcity/feed/</wfw:commentRss>
		<slash:comments>0</slash:comments>
		</item>
	</channel>
</rss>
