<?xml version="1.0" encoding="UTF-8"?><rss version="2.0"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:atom="http://www.w3.org/2005/Atom"
	xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
	xmlns:slash="http://purl.org/rss/1.0/modules/slash/"
	>

<channel>
	<title>singleton &#8211; LessthanDot</title>
	<atom:link href="/index.php/tag/singleton/feed/" rel="self" type="application/rss+xml" />
	<link>/</link>
	<description>A Technical Community for IT Professionals</description>
	<lastBuildDate>Sat, 09 Mar 2019 12:50:36 +0000</lastBuildDate>
	<language>en-US</language>
	<sy:updatePeriod>hourly</sy:updatePeriod>
	<sy:updateFrequency>1</sy:updateFrequency>
	<generator>https://wordpress.org/?v=4.6.1</generator>
	<item>
		<title>Using a Perl Singleton to Share Values Between Objects</title>
		<link>/index.php/webdev/serverprogramming/using-a-perl-singleton/</link>
		<comments>/index.php/webdev/serverprogramming/using-a-perl-singleton/#comments</comments>
		<pubDate>Wed, 12 Sep 2012 14:54:00 +0000</pubDate>
		<dc:creator><![CDATA[Rob Earl]]></dc:creator>
				<category><![CDATA[Perl]]></category>
		<category><![CDATA[Server Programming]]></category>
		<category><![CDATA[design patterns]]></category>
		<category><![CDATA[perl]]></category>
		<category><![CDATA[singleton]]></category>

		<guid isPermaLink="false">/index.php/2012/09/using-a-perl-singleton/</guid>
		<description><![CDATA[It's been quite a while since I last posted here. Since my last entry I got a new job,  got married, went on honeymoon (got back yesterday!) and spent quite a lot of time maintaining legacy Perl code.

One thing I see a lot is sharing objects by passi&#8230;]]></description>
				<content:encoded><![CDATA[<p>It&#8217;s been quite a while since I last posted here. Since my last entry I got a new job,  got married, went on honeymoon (got back yesterday!) and spent quite a lot of time maintaining legacy Perl code.</p>
<p>One thing I see a lot is sharing objects by passing them to the constructor of a new object. This is fine until you&#8217;re dealing with complicated sets of objects within objects. </p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="perl"><thead><tr><td colspan="2"  class="head">Perl</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
</pre></td><td class="de1"><pre class="de1"><span class="co1">#!/usr/bin/perl</span>
&nbsp;
<span class="kw2">use</span> strict<span class="sy0">;</span>
&nbsp;
<span class="co1"># Read some variables out of a configuration file.</span>
<span class="kw1">my</span> <span class="re0">$config</span> <span class="sy0">=</span> get_config<span class="br0">&#40;</span><span class="re0">$config_file</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
<span class="co1"># Create a new object which contains an object which uses some values from the config.</span>
<span class="kw1">my</span> <span class="re0">$object</span> <span class="sy0">=</span> MyObject<span class="sy0">-&gt;</span><span class="kw2">new</span><span class="br0">&#40;</span><span class="re0">$config</span><span class="br0">&#41;</span><span class="sy0">;</span>
<span class="re0">$object</span><span class="sy0">-&gt;</span><span class="me1">do_something</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
<span class="kw3">package</span> MyObject<span class="sy0">;</span>
&nbsp;
<span class="kw2">sub</span> <span class="kw2">new</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; <span class="kw1">my</span> <span class="re0">$class</span> <span class="sy0">=</span> <span class="kw3">shift</span><span class="sy0">;</span>
&nbsp; &nbsp; <span class="kw1">my</span> <span class="re0">$config</span> <span class="sy0">=</span> <span class="kw3">shift</span><span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; <span class="co1"># Store the config incase we create any objects which need it.</span>
&nbsp; &nbsp; <span class="kw1">my</span> <span class="re0">$self</span> <span class="sy0">=</span> <span class="br0">&#123;</span> <span class="st_h">'config'</span> <span class="sy0">=&gt;</span> <span class="re0">$config</span> <span class="br0">&#125;</span><span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; <span class="kw3">return</span> <span class="kw3">bless</span> <span class="re0">$self</span><span class="sy0">,</span> <span class="re0">$class</span><span class="sy0">;</span>
<span class="br0">&#125;</span>
&nbsp;
<span class="kw2">sub</span> do_something <span class="br0">&#123;</span>
&nbsp; &nbsp; <span class="kw1">my</span> <span class="re0">$self</span> <span class="sy0">=</span> <span class="kw3">shift</span><span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; <span class="kw1">my</span> <span class="re0">$object2</span> <span class="sy0">=</span> MyObject2<span class="sy0">-&gt;</span><span class="kw2">new</span><span class="br0">&#40;</span><span class="re0">$self</span><span class="sy0">-&gt;</span><span class="br0">&#123;</span><span class="st_h">'config'</span><span class="br0">&#125;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; <span class="kw3">return</span> <span class="re0">$object2</span><span class="sy0">-&gt;</span><span class="me1">do_something_else</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
<span class="br0">&#125;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">#!/usr/bin/perl

use strict;

# Read some variables out of a configuration file.
my $config = get_config($config_file);

# Create a new object which contains an object which uses some values from the config.
my $object = MyObject-&gt;new($config);
$object-&gt;do_something();

package MyObject;

sub new {
    my $class = shift;
    my $config = shift;

    # Store the config incase we create any objects which need it.
    my $self = { 'config' =&gt; $config };

    return bless $self, $class;
}

sub do_something {
    my $self = shift;

    my $object2 = MyObject2-&gt;new($self-&gt;{'config'});

    return $object2-&gt;do_something_else();
}</pre></div></div>

<p>MyObject is now holding a reference to the config object which it doesn&#8217;t need directly. This will only get worse if MyObject2 needs another object which requires the config object, etc.</p>
<p>Instead we could use a singleton object:</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="perl"><thead><tr><td colspan="2"  class="head">Perl</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
</pre></td><td class="de1"><pre class="de1"><span class="kw3">package</span> MyConfigObject<span class="sy0">;</span>
&nbsp;
<span class="kw2">use</span> strict<span class="sy0">;</span>
<span class="kw2">use</span> Carp<span class="sy0">;</span>
&nbsp;
<span class="kw1">my</span> <span class="re0">$config</span> <span class="sy0">=</span> <span class="kw3">undef</span><span class="sy0">;</span>
&nbsp;
<span class="kw2">sub</span> <span class="kw2">new</span> <span class="br0">&#123;</span>
&nbsp;
&nbsp; &nbsp; <span class="kw1">if</span><span class="br0">&#40;</span><span class="sy0">!</span><span class="re0">$config</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">my</span> <span class="re0">$class</span> <span class="sy0">=</span> <span class="kw3">shift</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">my</span> <span class="re0">$config_file</span> <span class="sy0">=</span> <span class="kw3">shift</span><span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; croak <span class="kw1">unless</span> <span class="re0">$config_file</span><span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; <span class="re0">$config</span> <span class="sy0">=</span> <span class="kw3">bless</span> <span class="br0">&#123;</span><span class="br0">&#125;</span><span class="sy0">,</span> <span class="re0">$class</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="re0">$config</span><span class="sy0">-&gt;</span><span class="me1">parse_file</span><span class="br0">&#40;</span><span class="re0">$config_file</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp;
&nbsp; &nbsp; <span class="kw3">return</span> <span class="re0">$config</span><span class="sy0">;</span>
<span class="br0">&#125;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">package MyConfigObject;

use strict;
use Carp;

my $config = undef;

sub new {

    if(!$config) {
        my $class = shift;
        my $config_file = shift;

        croak unless $config_file;

        $config = bless {}, $class;
        $config-&gt;parse_file($config_file);
    }

    return $config;
}</pre></div></div>

<p>The example above changes to:</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="perl"><thead><tr><td colspan="2"  class="head">Perl</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
</pre></td><td class="de1"><pre class="de1"><span class="co1">#!/usr/bin/perl</span>
&nbsp;
<span class="kw2">use</span> strict<span class="sy0">;</span>
&nbsp;
<span class="co1"># Create a new object to hold the values from our config file.</span>
<span class="kw1">my</span> <span class="re0">$config</span> <span class="sy0">=</span> MyConfigObject<span class="sy0">-&gt;</span><span class="kw2">new</span><span class="br0">&#40;</span><span class="re0">$config_file</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
<span class="co1"># Create a new object which contains an object which uses some values from the config.</span>
<span class="kw1">my</span> <span class="re0">$object</span> <span class="sy0">=</span> MyObject<span class="sy0">-&gt;</span><span class="kw2">new</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
<span class="re0">$object</span><span class="sy0">-&gt;</span><span class="me1">do_something</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
<span class="kw3">package</span> MyObject<span class="sy0">;</span>
&nbsp;
<span class="kw2">sub</span> <span class="kw2">new</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; <span class="kw1">my</span> <span class="re0">$class</span> <span class="sy0">=</span> <span class="kw3">shift</span><span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; <span class="kw3">return</span> <span class="kw3">bless</span> <span class="br0">&#123;</span><span class="br0">&#125;</span><span class="sy0">,</span> <span class="re0">$class</span><span class="sy0">;</span>
<span class="br0">&#125;</span>
&nbsp;
<span class="kw2">sub</span> do_something <span class="br0">&#123;</span>
&nbsp; &nbsp; <span class="kw1">my</span> <span class="re0">$self</span> <span class="sy0">=</span> <span class="kw3">shift</span><span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; <span class="kw1">my</span> <span class="re0">$object2</span> <span class="sy0">=</span> MyObject2<span class="sy0">-&gt;</span><span class="kw2">new</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; <span class="kw3">return</span> <span class="re0">$object2</span><span class="sy0">-&gt;</span><span class="me1">do_something_else</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
<span class="br0">&#125;</span>
&nbsp;
<span class="kw3">package</span> MyObject2<span class="sy0">;</span>
&nbsp;
<span class="kw2">sub</span> <span class="kw2">new</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; <span class="co1"># Get the config object</span>
&nbsp; &nbsp; <span class="kw1">my</span> <span class="re0">$config</span> <span class="sy0">=</span> MyConfigObject<span class="sy0">-&gt;</span><span class="kw2">new</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; <span class="co1"># Do some stuff with it!</span>
<span class="br0">&#125;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">#!/usr/bin/perl

use strict;

# Create a new object to hold the values from our config file.
my $config = MyConfigObject-&gt;new($config_file);

# Create a new object which contains an object which uses some values from the config.
my $object = MyObject-&gt;new();
$object-&gt;do_something();

package MyObject;

sub new {
    my $class = shift;

    return bless {}, $class;
}

sub do_something {
    my $self = shift;

    my $object2 = MyObject2-&gt;new();

    return $object2-&gt;do_something_else();
}

package MyObject2;

sub new {
    # Get the config object
    my $config = MyConfigObject-&gt;new();

    # Do some stuff with it!
}</pre></div></div>

<p>Whenever we need to use a value from the config file, we create a new MyConfigObject and get the instance we already created without having to reparse the config file or maintain complicated links through parent objects.</p>
]]></content:encoded>
			<wfw:commentRss>/index.php/webdev/serverprogramming/using-a-perl-singleton/feed/</wfw:commentRss>
		<slash:comments>5</slash:comments>
		</item>
		<item>
		<title>Nice .NET Design Patterns Articles</title>
		<link>/index.php/webdev/webdesigngraphicsstyling/nice-net-design-patterns-articles/</link>
		<comments>/index.php/webdev/webdesigngraphicsstyling/nice-net-design-patterns-articles/#respond</comments>
		<pubDate>Wed, 17 Sep 2008 13:40:00 +0000</pubDate>
		<dc:creator><![CDATA[SQLDenis]]></dc:creator>
				<category><![CDATA[Web Design, Graphics and Styling]]></category>
		<category><![CDATA[.net]]></category>
		<category><![CDATA[c#]]></category>
		<category><![CDATA[design patterns]]></category>
		<category><![CDATA[oop]]></category>
		<category><![CDATA[singleton]]></category>

		<guid isPermaLink="false">/index.php/2008/09/nice-net-design-patterns-articles/</guid>
		<description><![CDATA[The DotNetSlackers site has a nice series of articles about design patterns. The articles were written by Granville Barnett and are a very good read. Here is what is in the first four articles. Design Patterns – Part 1 Learn how to design more robust and maintainable code by incorporating design patterns into your software [&#8230;]]]></description>
				<content:encoded><![CDATA[<p>The DotNetSlackers site has a nice series of articles about design patterns. The articles were written by Granville Barnett and are a very good read. Here is what is in the first four articles.</p>
<p><a href="http://dotnetslackers.com/articles/designpatterns/Design-Patterns-Part-1.aspx">Design Patterns – Part 1</a><br />
Learn how to design more robust and maintainable code by incorporating design patterns into your software projects.<br />
1 Introduction<br />
2 The strategy pattern<br />
3 Implementing our design<br />
4 Summary</p>
<p><a href="http://dotnetslackers.com/articles/designpatterns/Design-Patterns-Part-2.aspx">Design Patterns – Part 2</a><br />
In this part of the design patterns series we will take a look at the observer design pattern.<br />
1 Introduction<br />
2 What is the observer pattern?<br />
3 The Design<br />
4 Implementing our design<br />
5 Aren’t events already in .NET?<br />
6 Summary</p>
<p><a href="http://dotnetslackers.com/articles/designpatterns/Design-Patterns-Part-3.aspx">Design Patterns – Part 3</a><br />
In this part of the design patterns series we will take a look at the factory pattern.<br />
1 Introduction<br />
2 The simple factory<br />
3 Factory pattern<br />
4 Summary</p>
<p><a href="http://dotnetslackers.com/articles/designpatterns/Design-Patterns-Part-4.aspx">Design Patterns – Part 4</a><br />
In this part of the design patterns series we will look at the singleton pattern.<br />
1 Introduction<br />
2 How is a singleton typically implemented?<br />
3 The static modifier<br />
4 Issues with our first design<br />
5 beforefieldinit<br />
6 Summary<br />
7 Acknowledgements<br />
8 References</p>
<p>So what are you waiting for? Start reading the articles!</p>
]]></content:encoded>
			<wfw:commentRss>/index.php/webdev/webdesigngraphicsstyling/nice-net-design-patterns-articles/feed/</wfw:commentRss>
		<slash:comments>0</slash:comments>
		</item>
	</channel>
</rss>
