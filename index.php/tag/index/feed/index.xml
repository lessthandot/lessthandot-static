<?xml version="1.0" encoding="UTF-8"?><rss version="2.0"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:atom="http://www.w3.org/2005/Atom"
	xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
	xmlns:slash="http://purl.org/rss/1.0/modules/slash/"
	>

<channel>
	<title>index &#8211; LessthanDot</title>
	<atom:link href="/index.php/tag/index/feed/" rel="self" type="application/rss+xml" />
	<link>/</link>
	<description>A Technical Community for IT Professionals</description>
	<lastBuildDate>Sat, 09 Mar 2019 12:50:36 +0000</lastBuildDate>
	<language>en-US</language>
	<sy:updatePeriod>hourly</sy:updatePeriod>
	<sy:updateFrequency>1</sy:updateFrequency>
	<generator>https://wordpress.org/?v=4.6.1</generator>
	<item>
		<title>SQL Advent 2011 Day 20: Indexes with Included Columns</title>
		<link>/index.php/datamgmt/datadesign/sql-advent-2011-day-20/</link>
		<comments>/index.php/datamgmt/datadesign/sql-advent-2011-day-20/#comments</comments>
		<pubDate>Wed, 21 Dec 2011 00:08:00 +0000</pubDate>
		<dc:creator><![CDATA[SQLDenis]]></dc:creator>
				<category><![CDATA[Data Modelling and Design]]></category>
		<category><![CDATA[index]]></category>
		<category><![CDATA[indexing]]></category>
		<category><![CDATA[sql server 2005]]></category>
		<category><![CDATA[sql server 2008]]></category>

		<guid isPermaLink="false">/index.php/2011/12/sql-advent-2011-day-20/</guid>
		<description><![CDATA[Today we are going to take a look at Indexes With Included Columns

SELECT * INTO Test2 FROM sys.objects



CREATE INDEX ix_Test1 ON Test1(type,is_ms_shipped)


SELECT type,is_ms_shipped 
FROM Test1
WHERE type = 's'
AND is_ms_shipped = 1

plan1

SELECT type,is_ms_shi&#8230;]]></description>
				<content:encoded><![CDATA[<p>In my <a href="/index.php/DataMgmt/DataDesign/are-you-ready-for-sql">Are you ready for SQL Server 2012 or are you still partying like it is 1999?</a> post, I wrote about how you should start using SQL Server 2005 and SQL Server 2008 functionality now in order to prepare for SQL Server 2012. I still see tons of code that is written in the pre 2005 style and people still keep using those functions, procs and statements even though SQL Server 2005 and 2008 have much better functionality.</p>
<p>Today we are going to take a look at <strong>Indexes With Included Columns</strong><br />
When you use Indexes With Included Columns you can do two things that you cannot do with regular non clustered indexes<br />
1) You can go over the 900 byte limit<br />
2) You can use data types not allowed as index key columns</p>
<p>By including nonkey columns, you can create nonclustered indexes that cover more queries. To learn more about covering indexes, take a look at <a href="/index.php/DataMgmt/DataDesign/sql-server-covering-indexes">SQL Server covering indexes</a> written by George Mastros</p>
<p>Let&#8217;s get started to see what I mean, first create these two identical tables</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
</pre></td><td class="de1"><pre class="de1"><span class="kw1">SELECT</span> <span class="sy0">*</span> <span class="kw1">INTO</span> Test1 <span class="kw1">FROM</span> sys.<span class="me1">objects</span>
&nbsp;
<span class="kw1">SELECT</span> <span class="sy0">*</span> <span class="kw1">INTO</span> Test2 <span class="kw1">FROM</span> sys.<span class="me1">objects</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">SELECT * INTO Test1 FROM sys.objects

SELECT * INTO Test2 FROM sys.objects</pre></div></div>

<p>Now create this index on the  Test1 table</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
</pre></td><td class="de1"><pre class="de1"><span class="kw1">CREATE</span> <span class="kw1">INDEX</span> ix_Test1 <span class="kw1">ON</span> Test1<span class="br0">&#40;</span>type,is_ms_shipped<span class="br0">&#41;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">CREATE INDEX ix_Test1 ON Test1(type,is_ms_shipped)</pre></div></div>

<p>Running a simple query reveals a seek</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
</pre></td><td class="de1"><pre class="de1"><span class="kw1">SELECT</span> type,is_ms_shipped 
<span class="kw1">FROM</span> Test1
<span class="kw1">WHERE</span> type <span class="sy0">=</span> <span class="st0">'s'</span>
<span class="sy0">AND</span> is_ms_shipped <span class="sy0">=</span> <span class="nu0">1</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">SELECT type,is_ms_shipped 
FROM Test1
WHERE type = 's'
AND is_ms_shipped = 1</pre></div></div>

<p>
<div class="image_block"><a href="/wp-content/uploads/blogs/DataMgmt/Denis/IncludedPlan1.PNG?mtime=1324349640"><img alt="" src="/wp-content/uploads/blogs/DataMgmt/Denis/IncludedPlan1.PNG?mtime=1324349640" width="680" height="197" /></a></div>
<p></p>
<p>Now let&#8217;s add the name  column to the columns returned or to the WHERE clause</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
</pre></td><td class="de1"><pre class="de1"><span class="kw1">SELECT</span> type,is_ms_shipped,name 
<span class="kw1">FROM</span> Test1
<span class="kw1">WHERE</span> type <span class="sy0">=</span> <span class="st0">'s'</span>
<span class="sy0">AND</span> is_ms_shipped <span class="sy0">=</span> <span class="nu0">1</span>
&nbsp;
&nbsp;
<span class="kw1">SELECT</span> type,is_ms_shipped 
<span class="kw1">FROM</span> Test1
<span class="kw1">WHERE</span> type <span class="sy0">=</span> <span class="st0">'s'</span>
<span class="sy0">AND</span> is_ms_shipped <span class="sy0">=</span> <span class="nu0">1</span>
<span class="sy0">AND</span> name <span class="sy0">LIKE</span> <span class="st0">'s%'</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">SELECT type,is_ms_shipped,name 
FROM Test1
WHERE type = 's'
AND is_ms_shipped = 1


SELECT type,is_ms_shipped 
FROM Test1
WHERE type = 's'
AND is_ms_shipped = 1
AND name LIKE 's%'</pre></div></div>

<p><a href="/wp-content/uploads/blogs/DataMgmt/Denis/IncludedPlan2.PNG?mtime=1324349656"><img alt="" src="/wp-content/uploads/blogs/DataMgmt/Denis/IncludedPlan2.PNG?mtime=1324349656" width="779" height="270" /></a></p>
<p>As you can see, we get a scan now, this is because the index is not covering the query</p>
<p>Create the following index on the Test2 table, as you can see the only difference bwteween the index on the Test1 table is that it has the name as an included column</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
</pre></td><td class="de1"><pre class="de1"><span class="kw1">CREATE</span> <span class="kw1">INDEX</span> ix_Test2 <span class="kw1">ON</span> Test2<span class="br0">&#40;</span>type,is_ms_shipped<span class="br0">&#41;</span> <span class="sy0">IN</span>CLUDE <span class="br0">&#40;</span>name<span class="br0">&#41;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">CREATE INDEX ix_Test2 ON Test2(type,is_ms_shipped) INCLUDE (name)</pre></div></div>

<p>Running the first query where the name is in the WHERE clause against the Test2 and the Test1 table shows much better performance for the index with the included column, this is of course expected</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
</pre></td><td class="de1"><pre class="de1"><span class="kw1">SELECT</span> type,is_ms_shipped 
<span class="kw1">FROM</span> Test2
<span class="kw1">WHERE</span> type <span class="sy0">=</span> <span class="st0">'s'</span>
<span class="sy0">AND</span> is_ms_shipped <span class="sy0">=</span> <span class="nu0">1</span>
<span class="sy0">AND</span> name <span class="sy0">LIKE</span> <span class="st0">'s%'</span>
&nbsp;
<span class="kw1">SELECT</span> type,is_ms_shipped 
<span class="kw1">FROM</span> Test1
<span class="kw1">WHERE</span> type <span class="sy0">=</span> <span class="st0">'s'</span>
<span class="sy0">AND</span> is_ms_shipped <span class="sy0">=</span> <span class="nu0">1</span>
<span class="sy0">AND</span> name <span class="sy0">LIKE</span> <span class="st0">'s%'</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">SELECT type,is_ms_shipped 
FROM Test2
WHERE type = 's'
AND is_ms_shipped = 1
AND name LIKE 's%'

SELECT type,is_ms_shipped 
FROM Test1
WHERE type = 's'
AND is_ms_shipped = 1
AND name LIKE 's%'</pre></div></div>

<p></p>
<div class="image_block"><a href="/wp-content/uploads/blogs/DataMgmt/Denis/IncludedPlan3.PNG?mtime=1324349666"><img alt="" src="/wp-content/uploads/blogs/DataMgmt/Denis/IncludedPlan3.PNG?mtime=1324349666" width="815" height="276" /></a></div>
<p></p>
<p>As you can see, we get an index seek now for the table with the index that has included columns</p>
<p>Running the second query where the name is in the WHERE clause as well as returned in the results against the Test2 and the Test1 table shows much better performance for the index with the included column, this is of course expected</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
</pre></td><td class="de1"><pre class="de1"><span class="kw1">SELECT</span> type,is_ms_shipped,name 
<span class="kw1">FROM</span> Test2
<span class="kw1">WHERE</span> type <span class="sy0">=</span> <span class="st0">'s'</span>
<span class="sy0">AND</span> is_ms_shipped <span class="sy0">=</span> <span class="nu0">1</span>
<span class="sy0">AND</span> name <span class="sy0">LIKE</span> <span class="st0">'s%'</span>
&nbsp;
&nbsp;
&nbsp;
<span class="kw1">SELECT</span> type,is_ms_shipped,name 
<span class="kw1">FROM</span> Test1
<span class="kw1">WHERE</span> type <span class="sy0">=</span> <span class="st0">'s'</span>
<span class="sy0">AND</span> is_ms_shipped <span class="sy0">=</span> <span class="nu0">1</span>
<span class="sy0">AND</span> name <span class="sy0">LIKE</span> <span class="st0">'s%'</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">SELECT type,is_ms_shipped,name 
FROM Test2
WHERE type = 's'
AND is_ms_shipped = 1
AND name LIKE 's%'



SELECT type,is_ms_shipped,name 
FROM Test1
WHERE type = 's'
AND is_ms_shipped = 1
AND name LIKE 's%'</pre></div></div>

<div class="image_block"><a href="/wp-content/uploads/blogs/DataMgmt/Denis/IncludedPlan4.PNG?mtime=1324349678"><img alt="" src="/wp-content/uploads/blogs/DataMgmt/Denis/IncludedPlan4.PNG?mtime=1324349678" width="853" height="282" /></a></div>
<p>And we get a seek as well for the table with the index that has included columns</p>
]]></content:encoded>
			<wfw:commentRss>/index.php/datamgmt/datadesign/sql-advent-2011-day-20/feed/</wfw:commentRss>
		<slash:comments>1</slash:comments>
		</item>
		<item>
		<title>12 ways to break your database server before the first transaction</title>
		<link>/index.php/datamgmt/datadesign/configuring-sql-server-dba/</link>
		<comments>/index.php/datamgmt/datadesign/configuring-sql-server-dba/#comments</comments>
		<pubDate>Wed, 19 May 2010 10:15:58 +0000</pubDate>
		<dc:creator><![CDATA[Ted Krueger (onpnt)]]></dc:creator>
				<category><![CDATA[Data Modelling and Design]]></category>
		<category><![CDATA[Database Administration]]></category>
		<category><![CDATA[Database Programming]]></category>
		<category><![CDATA[Microsoft SQL Server]]></category>
		<category><![CDATA[Microsoft SQL Server Admin]]></category>
		<category><![CDATA[dmf]]></category>
		<category><![CDATA[dmv]]></category>
		<category><![CDATA[index]]></category>
		<category><![CDATA[maintenance]]></category>
		<category><![CDATA[performance]]></category>
		<category><![CDATA[sql server 2005]]></category>
		<category><![CDATA[sql server 2008]]></category>

		<guid isPermaLink="false">/index.php/2010/05/configuring-sql-server-dba/</guid>
		<description><![CDATA[Defaults hurt.  They take a 3 inch splinter and try to bury it as far up and under your nail as far as they possibly can.  Every database server has a task.  A mission if you will.  That mission is to serve the data and secure the data.  Some need 32GB of RAM; some need 3GB of RAM.  This one might need 32 spindles on RAID 3 billion.]]></description>
				<content:encoded><![CDATA[<p>
<h3>1.	Not adjusting memory settings on your database server</h3>
<p>Below is a screen shot of the dreaded default 214748367 maximum server memory allowed to SQL Server.  Will it take it? Yes, it will.  It holds no sympathy for others and will leave no crumbs behind for mere OS operations or paging.  Set this to an allowable maximum based on your server’s actual available memory.  Leave some for the OS to survive.  The server will thank you later.  Trust me!</p>
<div class="image_block"><img src="/wp-content/uploads/blogs/DataMgmt/memmaximum_BAD.gif" alt="" title="" width="448" height="401" /></div>
</p>
<p></p>
<p><h3>2.	Installing EVERYTHING by default</h3>
<p>Defaults hurt.  They take a 3 inch splinter and try to bury it as far up and under your nail as far as they possibly can.  Every database server has a task.  A mission if you will.  That mission is to serve the data and secure the data.  Some need 32GB of RAM; some need 3GB of RAM.  This one might need 32 spindles on RAID 3 billion.  Point is: There are no defaults that match your installation.  Do not take them for granted and do not expect them to be your saving grace preventing some research.  Know what hurts even more? Installing all of the features on one server when you only need one of them can cause as much of a problem as leaving default settings in place.  Try to install the features that you know will be utilized so you can utilize the resources of the server to what it is meant for?
</p>
<p></p>
<p><h3>3.	Enabling CLR and abusing it</h3>
<p>CLR is a foundation, a pillar of strength and power, a stance in front of an angry mob preventing chaos, the punk rocker that stands above the exhausted and pile-driven leftovers from a slam dance session.  Embrace CLR like it is hiding under the couch and can save the puzzle you spent days working on but has that one piece missing, causing nothing but pain and agony with failure to your hard work.  OK, now STOP!  With great power brings great failure.  CLR will and can take you to the next level of strength and functionality to your trials with SQL Server as a DBA and Developer.  CLR can also and will take everything it wants when not managed from your database server.  This will leave it starving for more and hung in the shadows begging for a restart.
</p>
<p></p>
<p><h3>4.	Handing out the SA password like it was free ice cream day. </h3>
<p>SA is a landmark and an object not to be tangled with.  Think of Dirty Harry and that monster 44 Magnum facing you down.  OK, now hand the 44 over to someone and ask them to point it at you.  Feel good?  NO!  Keep SA as your protection.  Do not use it unless it is called upon in a time of need.  Yes, even the sysadmin(s) should have their own security model and SA is not part of it.
</p>
<p></p>
<p><h3>5.	Never maintaining indexes and statistics</h3>
<p>You’ve spent days researching and configuring IO, memory, SQL Server configurations down to the last MAXDOP setting.  It truly is a remarkable feeling you can only explain by feeling it yourself.  Problem is, when it stops there and maintaining the database server is left to the planning and implementation.  Indexes and Statistics alike need special care.  They can enforce performance beyond your most exotic dreams when used and maintained.  They can become your nightmarish horrors if not maintained at the same time.
</p>
<p></p>
<p><h3>6.	Installing EVERYTHING including binary, data and log files to the C drive</h3>
<p>If you are installing SQL Server on your desktop or laptop at home and have one 25GB drive, then sure, install to the C drive.  Most of us have those “server” things.  They have drive bays, and sometimes we even get a D or an E drive.  When you install SQL Server it will want and request you to install everything to the C drive (or the volume letter you pick for the OS).  It’s ok for the setup team to do this.  I respect that not all best practices can be programmed into everything.  So here is the almighty: If you have a data drive, log drive and OS drive or anything other than the drive for the OS, please use it for your data.  Your database server will thank you when it is not contending with other IO operations.
</p>
<p></p>
<p><h3>7.	Relying on RAID as a recovery plan</h3>
<p>RAID is not going to save you.  Before last year or so when it was publicized that a company literally was found whimpering in the corner after losing all of their data from relying on RAID levels to protect against failures, we didn’t think it was possible to fathom this concept.  Who would think this way?  Well, someone did, so we need to say it.
</p>
<p></p>
<p><h3>8.	Think you are protected from disasters without HA or DR?</h3>
<p>Disasters are inevitable.  We cannot hide from them and they jump up behind us when we least expect it.  Plan for it, test for it and become familiar with it.  SQL Server has many native features that can be used to handle HA and DR.  When lightning hits the building, a river decides to create a lake near your cube, a tornado says hello to the data center (face to face) or even an earthquake decides to open a nice pretty hole in the earth and eat the very data you vowed to protect, HA and DR will be there to rescue you (and your job).
</p>
<p></p>
<p><h3>9.	Under-sizing your installation</h3>
<p>Sizing is an art for database servers.  It is also an art form to not size your database server correctly.  Not doing so will cost much more in the long run.  There will be cost both in dollars and downtime (which just means more dollars – lost).
</p>
<p></p>
<p><h3>10.	Forgetting the network is just as important as IO performance</h3>
<p>It’s the network! Blaming the network on slow performance is fun.  Network and database administrators like to blame each other on performance being slow.  The nice part about the network is if there isn’t much monitoring in place, we can get away with it as DBAs so much easier.  OK, is it really the network or not?  If you do not have a network that is stable and can handle your data flying around the business, your hardcore, supersonic, beefy, brat- eating server doesn’t help you at all.  Get with your network group and discuss the amount of expected data.  ASYNC_NETWORK_IO waits are not fun when you are plagued with them on a database server.
</p>
<p></p>
<p><h3>11.	Allowing Jane and John to write T-SQL because they know how to write SELECT *</h3>
<p>So the CFO comes to your office and he just went to this really cool lightshow expo in Vegas to release SQL Server 30099 R500.  Best lightshow he has ever seen.  Even better was that the really good sales guy up on the stage popped open SQL Server Management Studio version fifty billion and started bringing up data.  Yes, you guessed it.  He just asked for you to install that really neat tool on his laptop so he can, &#8220;Get data&#8221;.  Scary!  Put policies in place to prevent this.  Even for senior staff.  Someone in an office with their finger on the F5 key and a SELECT * FROM reallybloodyhugeandwidetable is your nightmare come true.
</p>
<p></p>
<p><h3>12.	Backups are for sissies so I don’t do them or restore them to test</h3>
<p>Everyone knows the signature.  It’s comical in passing and at user group meetings.  Is it true?  Not even close.  Backups are your foundation for recovery.  Your ability to save the universe from data gremlins that chew their way through your NIC port into the chassis, feasting on the RAM before moving to your beloved disk.  Wait, listen to this:</p>
<p><b>Jan:</b><i> My database blew up.  Something about corrupt, torn pages and Google can’t save me.  John, can you help?</i></p>
<p><b>John:</b><i> Jan, let’s just restore to the other server so we can figure this out without being on the verge of heart attacks.  </i></p>
<p><b>jan :</b> <i>backups?</i></p>
<p>Don’t be that person!  Backup your data and back it up as much as you possibly can.  Most of all restore it wherever you can to test it, well, can be restored.  This is a nice feature to know you have before you need to have it.</p>
]]></content:encoded>
			<wfw:commentRss>/index.php/datamgmt/datadesign/configuring-sql-server-dba/feed/</wfw:commentRss>
		<slash:comments>8</slash:comments>
		</item>
		<item>
		<title>Trusting Database Engine Tuning Advisor for Query Tuning</title>
		<link>/index.php/datamgmt/datadesign/dta-index-creation-tools-sql-server/</link>
		<comments>/index.php/datamgmt/datadesign/dta-index-creation-tools-sql-server/#comments</comments>
		<pubDate>Tue, 11 May 2010 13:45:20 +0000</pubDate>
		<dc:creator><![CDATA[Ted Krueger (onpnt)]]></dc:creator>
				<category><![CDATA[Data Modelling and Design]]></category>
		<category><![CDATA[Database Administration]]></category>
		<category><![CDATA[Database Programming]]></category>
		<category><![CDATA[Microsoft SQL Server]]></category>
		<category><![CDATA[Microsoft SQL Server Admin]]></category>
		<category><![CDATA[database engine tuning advisor]]></category>
		<category><![CDATA[index]]></category>
		<category><![CDATA[maintenance]]></category>
		<category><![CDATA[sql server 2005]]></category>
		<category><![CDATA[sql server 2008]]></category>

		<guid isPermaLink="false">/index.php/2010/05/dta-index-creation-tools-sql-server/</guid>
		<description><![CDATA[So my tip for the day; don’t forget DTA as a beneficial tool to be the lazy DBA we all speak of.  It can truly help you even if that is simply taking some code writing shortcuts.  But, believe it as much as you believe the first Google hit you get back when researching a problem.]]></description>
				<content:encoded><![CDATA[<p>
Using Database Engine Tuning Advisor can lend a great deal to a DBA.  All you need to do is plug in a query, hit start and viola, instant 99% performance increase estimates.  OK, it might not be all that but it can give you some pretty good suggestions for increasing performance.  Is this too good to be true?  In some cases, yes, it is.
</p>
<p>
Let’s look at something I just ran across.  I do actively use DTA.  It’s a great tool and it makes tuning extremely large queries quick with reviewing suggests along with execution plans to ensure recommendations are sound.  Even better and my primary reason for using DTA is it writes the CREATE statements for you.  Remember, a lazy DBA is actually a more efficient DBA.
</p>
<p>
This morning however, DTA was being less than helpful.  </p>
<p>A query went by my monitoring tools that sent my disk queue length threw the roof.  Well, it went to 8 but as most DBAs know, 3 will make us squirm in our chairs.  Once I reviewed the query, it wasn’t really all that bad. In fact, I think it was well written by the vendor.  Checking the execution plan I could see there was just some covering index needs to ensure parallelism and some key lookup steps were removed.  So I opened DTA already knowing pretty much what I wanted to do and ran the query through it.  The results were about what I expected but looking closer I saw this
</p>
<pre>CREATE NONCLUSTERED INDEX [_dta_index_9_379148396__K1] ON [dbo].[WHDR] 
(
	[WO_ID] ASC
)WITH (SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF) ON [PRIMARY]</pre>
<p>
Why is that a problem you might ask?  Well, it might not be a problem if you are working on a HEAP table and that typical work order ID is really in need of a nonclustered index.  At that point we would want the awesomeness of a clustered index anyhow.</p>
<p><div class="image_block"><img src="/wp-content/uploads/blogs/DataMgmt/omg.gif" alt="" title="" width="243" height="243" align="left" /></div>
<p>Here is the biggest problem.  There is a clustered index on the table and that clustered index only consists of the WO_ID.  Yes, that would be an extremely big problem as far as performance goes.  You would have two indexes doing the same thing and on every change to the table, you would be updating them at the same time.  In a large table that cost can show quick and become painful to the users.</p>
<p>So my tip for the day; don’t forget DTA as a beneficial tool to be the lazy DBA we all speak of.  It can truly help you even if that is simply taking some code writing shortcuts.  But, believe it as much as you believe the first Google hit you get back when researching a problem.  As Janice Lee (<a href="http://twitter.com/janiceclee">Twitter</a> | <a href="http://janiceclee.com/">Blog</a>) says in <a href="http://janiceclee.com/2010/05/10/google-and-suspect-databases/">Save Me, Google</a>, “Google told him to. He was in trouble, he panicked, and he trusted his salvation to Google.”  Well, don’t fall into the points that Janice put together so well in that blog.  Even the tools that are meant to assist us in doing our jobs better can be wrong.  They are suggestions that require as much review as anything else going into your database servers.</p>
]]></content:encoded>
			<wfw:commentRss>/index.php/datamgmt/datadesign/dta-index-creation-tools-sql-server/feed/</wfw:commentRss>
		<slash:comments>7</slash:comments>
		</item>
		<item>
		<title>Index DMV usage considerations</title>
		<link>/index.php/datamgmt/datadesign/think-before-you-f5-on-dmvs/</link>
		<comments>/index.php/datamgmt/datadesign/think-before-you-f5-on-dmvs/#comments</comments>
		<pubDate>Wed, 31 Mar 2010 12:56:42 +0000</pubDate>
		<dc:creator><![CDATA[Ted Krueger (onpnt)]]></dc:creator>
				<category><![CDATA[Data Modelling and Design]]></category>
		<category><![CDATA[Database Administration]]></category>
		<category><![CDATA[Database Programming]]></category>
		<category><![CDATA[Microsoft SQL Server]]></category>
		<category><![CDATA[Microsoft SQL Server Admin]]></category>
		<category><![CDATA[dmf]]></category>
		<category><![CDATA[dmv]]></category>
		<category><![CDATA[index]]></category>
		<category><![CDATA[maintenance]]></category>
		<category><![CDATA[performance]]></category>
		<category><![CDATA[sql server 2005]]></category>
		<category><![CDATA[sql server 2008]]></category>

		<guid isPermaLink="false">/index.php/2010/03/think-before-you-f5-on-dmvs/</guid>
		<description><![CDATA[Index DMV/DMF goodness!  SQL Server 2005 and up has given us the ability to truly be more efficient in gathering information in which we can be more proactive.  With everything these objects give us, a price has to be paid.  We will discuss that price but first, we’ll go over a few major features that DMV/DMF has provided to us in regards to indexes to help us in our daily tasks.]]></description>
				<content:encoded><![CDATA[<h2>Let’s think about it for a minute</h2>
<p>
Index DMV (Dynamic Management Views)/DMF (Dynamic Management Functions) goodness!  SQL Server 2005 and up has given us the ability to truly be more efficient in gathering information with which we can be more proactive.  With everything these objects give us, a price has to be paid.  We will discuss that price but first, we’ll go over a few major features that DMV/DMF has provided to us in regards to indexes to help us in our daily tasks.
</p>
<p>
Index maintenance is a major part in the typical day to day DBA tasks.  Monitoring fragmentation, usage, and lack of usage is something that, if gone without for long, will cause severe and noticeable performance problems.  There is no question about it, Indexes are essential.  We cannot afford to ignore embracing them as objects that save poor and even well structured queries from causing crippling resource consumption issues.  The user community has little patience for slow applications.  Users also will not stand for where the problems are and only want resolution so they can make it from 9 to 5 without headaches.  In short, the DBA is a hired gun by the users and as such, are our customers.  In this, it is our highest priority to keep the quality of our services as high as you would expect from any sale of services or goods.
</p>
<p>
In order to maintain our primary task of keeping indexes from being the problem and always the solution, we have at our disposal in SQL Server 2005+, the sys.dm_db_index_physical_stats DMV.  Prior to SQL Server 2005, finding index usage and statistics was a painful process.  Profiler would need to be utilized while capturing execution plans and other pertinent information.  Once gathered, would be used in long daunting analysis tasks to determine index creation or maintenance needs.  In some cases those tasks ended still in index creation that may not be optimal.
</p>
<p>
To use dm_db_index_physical_stats please refer to Denis Gobo’s (<a href="/index.php/All/?disp=authdir&amp;author=4">Blog</a> | <a href="http://twitter.com/denisgobo">Twitter</a>) blog, “<a href="/index.php/DataMgmt/DataDesign/finding-fragmentation-of-an-index-and-fi">Finding Fragmentation of an Index and Fixing It</a>”.  Denis does a very good job at showing cause and effect of the process of using this DMV in an efficient manner.<br />
<br />
Another SQL community favorite is Michelle Ufford’s (<a href="http://sqlfool.com/">Blog</a> | <a href="http://twitter.com/sqlfool">Twitter</a>) script on <a href="http://sqlfool.com/2009/06/index-defrag-script-v30/">finding and resolving index problems</a>.  This excellent script that can is an all in one scheduling plan to perform unattended maintenance on index fragmentation.</p>
<p>
The next major task a DBA can perform is actually finding indexes that the optimizer ‘thinks’ should be created.  We can return missing indexes primarily by using the sys.dm_db_missing_index_group_stats DMV.  This joined to several other key DMVs can show you not only missing indexes, but with a little scripting, actually result in the CREATE INDEX statement itself to create for review.  To pick on Michelle again, we can look to her excellent blog, “<a href="http://sqlfool.com/2009/04/a-look-at-missing-indexes/">A look at missing indexes</a>”.
</p>
<p>
The third major key index operation is to find unused indexes.  Unused indexes can scream &#8220;performance killer&#8221;.  Not only are these indexes taking up space on disk and backups but they are causing transactions to run slower due to the need to update them along with the primary data.  Remember, when you insert/update/delete, you need to maintain all of the indexes.   This goes further into maintaining these unused indexes with the first fragmentation task discussed.  To find these unused indexes and determine if removing them is appropriate, we have the dm_db_index_usage_stats DMV.  This DMV can return unused indexes based on the sys.indexes system view.  This is done by using a NOT EXISTS or other means on the dm_db_index_usage_stats from the sys.indexes and results in any index that does not have an active log for usage.  Hence, is not being fully utilized and should be determined if required.  </p>
<h2>Now for the meat of it and the point</h2>
<p>
All of this is extremely useful for maintaining, removing and creating indexes.  To bring this even further into lazy DBA themes, Jason Strate (<a href="http://stratesql.com/">Blog</a> | <a href="http://twitter.com/stratesql">Twitter</a>) has created the <a href="http://stratesql.com/2009/07/20/analyzing-your-indexes-with-a-custom-report.aspx">IndexAnalysis</a> reporting solution and scripts.  Jason has taken the best of all worlds of Index DMV and DMF usage to Reporting Services in a solution that can be easily reviewed for all these major key analysis steps.  </p>
<p>Most DBAs in the community are going to tell you this is all without a doubt, critical knowledge.  In SQL forums around the community, they are also posted as quick information gathering tools to obtain information to assist in performance problems.  Again, this is all true and the best practice troubleshooting steps.  However, there is one major aspect to these types of queries that are also a critical piece of knowledge.  That is, these queries themselves are very resource intensive.  In order to show that, let’s run one of the typical fragmentation search queries on a test server.  </p>
<p>The below charts are from Idera SQLDM and used only to show a high level view of the effects of the DMVs.  Disk IO is focused on as that pertains to one of the largest performance bottlenecks you can have.  IO will also starve other normal operations from working optimally. </p>
<p>The query that will be used is below and part from Denis Gobo’s blog referred to above while removing the direct condition to look at only one index.</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
</pre></td><td class="de1"><pre class="de1"><span class="kw1">SELECT</span> <span class="kw2">OBJECT_NAME</span><span class="br0">&#40;</span><span class="kw2">OBJECT_ID</span><span class="br0">&#41;</span> <span class="kw1">AS</span> Tablename,s.<span class="me1">name</span> <span class="kw1">AS</span> Indexname
,index_type_desc
,avg_fragmentation_in_percent
,page_count
<span class="kw1">FROM</span> sys.<span class="me1">dm_db_index_physical_stats</span> <span class="br0">&#40;</span><span class="kw2">DB_ID</span><span class="br0">&#40;</span><span class="br0">&#41;</span>, <span class="sy0">NULL</span>, <span class="sy0">NULL</span> , <span class="sy0">NULL</span>, N<span class="st0">'LIMITED'</span><span class="br0">&#41;</span> d
join sysindexes s <span class="kw1">ON</span> d.<span class="kw2">OBJECT_ID</span> <span class="sy0">=</span> s.<span class="me1">id</span>
and d.<span class="me1">index_id</span> <span class="sy0">=</span> s.<span class="me1">indid</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">SELECT OBJECT_NAME(OBJECT_ID) AS Tablename,s.name AS Indexname
,index_type_desc
,avg_fragmentation_in_percent
,page_count
FROM sys.dm_db_index_physical_stats (DB_ID(), NULL, NULL , NULL, N'LIMITED') d
join sysindexes s ON d.OBJECT_ID = s.id
and d.index_id = s.indid</pre></div></div>

<p>
Prior to executing this query, our server was running as follows<br />
</p>
<div class="image_block"><img src="/wp-content/uploads/blogs/DataMgmt/dmv_idx_1.gif" alt="" title="" width="426" height="161" /></div>
<div class="image_block"><img src="/wp-content/uploads/blogs/DataMgmt/dmv_idx_2.gif" alt="" title="" width="426" height="161" /></div>
<p>Once executing the query we quickly see extremely high IO.  IO is our major concern here.  This will slow the server down noticeably and cause other operations to suffer its wrath.</p>
<div class="image_block"><img src="/wp-content/uploads/blogs/DataMgmt/dmv_idx_3.gif" alt="" title="" width="433" height="161" /></div>
<div class="image_block"><img src="/wp-content/uploads/blogs/DataMgmt/dmv_idx_4.gif" alt="" title="" width="435" height="161" /></div>
</p>
<p>
This test was crude and we didn’t go into detail of the IO and exact reactions to running the query on the server.  You can see from the charts that the query was killed very quickly.  We only wanted to show the start of the resource consumption and overhead.  The objective and take away is the knowledge that these queries do in fact have their own resource intensive requirements.  When running them due to maintenance, forum support from community members or other means in obtaining them, take care in the time that you do so.  In some cases, these queries and other DMVs cannot be stopped until completion.  For a truly in-depth and excellent look at usage, check Paul Randal&#8217;s (<a href="http://www.sqlskills.com/BLOGS/PAUL/">Blog</a> | <a href="http://www.twitter.com/PaulRandal">Twitter</a>) blog, &#8220;<a href="http://www.sqlskills.com/BLOGS/PAUL/post/Inside-sysdm_db_index_physical_stats.aspx">Inside sys.dm_db_index_physical_stats</a>&#8220;.</p>
<p>It is much more optimal when executing these queries during normal business hours if a query can be singled out as a performance problem. This provides the ability to select only the statistics for one index or one table.  When obtaining help, always question the queries provided by any of the members helping.  No offense will be taken by the SQL community supporters if questions are asked of the performance factor of running provided scripts during normal operating times.  If offense it taken, this typically means the impact is unknown and more reason to question it.
</p>
<p><strong>Special thanks to Jes (<a href="http://jesborland.wordpress.com/">Blog</a> | <a href="http://twitter.com/grrl_geek">Twitter</a>) for the review <img src="https://s.w.org/images/core/emoji/2/72x72/1f642.png" alt="🙂" class="wp-smiley" style="height: 1em; max-height: 1em;" /></strong></p>
]]></content:encoded>
			<wfw:commentRss>/index.php/datamgmt/datadesign/think-before-you-f5-on-dmvs/feed/</wfw:commentRss>
		<slash:comments>1</slash:comments>
		</item>
	</channel>
</rss>
