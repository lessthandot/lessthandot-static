<?xml version="1.0" encoding="UTF-8"?><rss version="2.0"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:atom="http://www.w3.org/2005/Atom"
	xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
	xmlns:slash="http://purl.org/rss/1.0/modules/slash/"
	>

<channel>
	<title>naming conventions &#8211; LessthanDot</title>
	<atom:link href="/index.php/tag/naming-conventions/feed/" rel="self" type="application/rss+xml" />
	<link>/</link>
	<description>A Technical Community for IT Professionals</description>
	<lastBuildDate>Sat, 09 Mar 2019 12:50:36 +0000</lastBuildDate>
	<language>en-US</language>
	<sy:updatePeriod>hourly</sy:updatePeriod>
	<sy:updateFrequency>1</sy:updateFrequency>
	<generator>https://wordpress.org/?v=4.6.1</generator>
	<item>
		<title>How to clean a table from badly named column names</title>
		<link>/index.php/datamgmt/datadesign/how-to-clean-a-table-from-badly-named-co/</link>
		<comments>/index.php/datamgmt/datadesign/how-to-clean-a-table-from-badly-named-co/#comments</comments>
		<pubDate>Fri, 11 Jun 2010 10:41:12 +0000</pubDate>
		<dc:creator><![CDATA[SQLDenis]]></dc:creator>
				<category><![CDATA[Data Modelling and Design]]></category>
		<category><![CDATA[how to]]></category>
		<category><![CDATA[naming conventions]]></category>
		<category><![CDATA[sql server 2005]]></category>
		<category><![CDATA[sql server 2008]]></category>
		<category><![CDATA[tip]]></category>
		<category><![CDATA[trick]]></category>

		<guid isPermaLink="false">/index.php/2010/06/how-to-clean-a-table-from-badly-named-co/</guid>
		<description><![CDATA[Someone gives you a backup of a database, you restore it and the first thing you notice is that the column names have percent signs and underscores in them. It would be easy to fix this if it was one table but in this case there are hundreds of tables. The solution is to loop [&#8230;]]]></description>
				<content:encoded><![CDATA[<p>Someone gives you a backup of a database, you restore it and the first thing you notice is that the column names have percent signs and underscores in them.<br />
It would be easy to fix this if it was one table but in this case there are hundreds of tables.</p>
<p>The solution is to loop over information_schema.columns, find all the columns that have those characters and then rename those columns by using the sp_rename procedure. I will show you two ways to do this, one way that executes the code and one way that generates a script that you then can execute.</p>
<h1>Execute the code automatically</h1>
<p>First create these two tables</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
</pre></td><td class="de1"><pre class="de1"><span class="kw1">CREATE</span> <span class="kw1">TABLE</span> Test <span class="br0">&#40;</span><span class="br0">&#91;</span>col<span class="sy0">%</span>1<span class="br0">&#93;</span> <span class="kw1">VARCHAR</span><span class="br0">&#40;</span><span class="nu0">50</span><span class="br0">&#41;</span>,<span class="br0">&#91;</span>col_2<span class="br0">&#93;</span> <span class="kw1">VARCHAR</span><span class="br0">&#40;</span><span class="nu0">40</span><span class="br0">&#41;</span><span class="br0">&#41;</span>
GO
&nbsp;
<span class="kw1">CREATE</span> <span class="kw1">TABLE</span> Test2 <span class="br0">&#40;</span><span class="br0">&#91;</span>col<span class="sy0">%</span>2<span class="br0">&#93;</span> <span class="kw1">VARCHAR</span><span class="br0">&#40;</span><span class="nu0">50</span><span class="br0">&#41;</span>,<span class="br0">&#91;</span>col_3<span class="br0">&#93;</span> <span class="kw1">VARCHAR</span><span class="br0">&#40;</span><span class="nu0">40</span><span class="br0">&#41;</span>, <span class="br0">&#91;</span>Col_<span class="sy0">%</span>_<span class="sy0">%</span>4<span class="br0">&#93;</span> <span class="kw1">int</span><span class="br0">&#41;</span>
GO</pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">CREATE TABLE Test ([col%1] VARCHAR(50),[col_2] VARCHAR(40))
GO

CREATE TABLE Test2 ([col%2] VARCHAR(50),[col_3] VARCHAR(40), [Col_%_%4] int)
GO</pre></div></div>

<p>Now here is the code that will rename this in one shot. I have placed comments in the code to show you what the code does. If you want to know how sp_rename works visit the Books On Line link here: http://msdn.microsoft.com/en-us/library/ms188351.aspx</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
</pre></td><td class="de1"><pre class="de1"><span class="co1">--Grab the table and columns that we need and store it in a temp table</span>
<span class="kw1">SELECT</span> <span class="kw1">IDENTITY</span><span class="br0">&#40;</span><span class="kw1">INT</span>,<span class="nu0">1</span>,<span class="nu0">1</span><span class="br0">&#41;</span> <span class="kw1">AS</span> id ,column_name,table_name, table_schema
<span class="kw1">INTO</span> #LOOP
<span class="kw1">FROM</span> information_schema.<span class="me1">columns</span>
<span class="kw1">WHERE</span> column_name <span class="sy0">LIKE</span> <span class="st0">'%[%]%'</span> <span class="co1">--need to use brackets to escape %</span>
<span class="sy0">OR</span> column_name <span class="sy0">LIKE</span> <span class="st0">'%[_]%'</span> &nbsp; &nbsp;<span class="co1">--need to use brackets to escape _</span>
&nbsp;
<span class="co1">--set up loop variables</span>
<span class="kw1">DECLARE</span> @maxID <span class="kw1">INT</span>, @loopid <span class="kw1">INT</span>
<span class="kw1">SELECT</span> @loopid <span class="sy0">=</span><span class="nu0">1</span> &nbsp;<span class="co1">--start of loop</span>
<span class="kw1">SELECT</span> @maxID <span class="sy0">=</span> <span class="kw2">MAX</span><span class="br0">&#40;</span>id<span class="br0">&#41;</span> <span class="kw1">FROM</span> #LOOP <span class="co1">--end of loop</span>
&nbsp;
&nbsp;
<span class="co1">--setup table and column name variables</span>
<span class="kw1">DECLARE</span> &nbsp;@columnName <span class="kw1">VARCHAR</span><span class="br0">&#40;</span><span class="nu0">100</span><span class="br0">&#41;</span>
<span class="kw1">DECLARE</span> &nbsp;@TableColumnNAme <span class="kw1">VARCHAR</span><span class="br0">&#40;</span><span class="nu0">100</span><span class="br0">&#41;</span>
&nbsp;
<span class="co1">--loop until the end</span>
<span class="kw1">WHILE</span> @loopid <span class="sy0">&lt;=</span> @maxID
<span class="kw1">BEGIN</span>
&nbsp;
<span class="co1">--populate variables and take % and _ out from the column name</span>
<span class="kw1">SELECT</span> @TableColumnNAme <span class="sy0">=</span> <span class="kw2">QUOTENAME</span><span class="br0">&#40;</span>TABLE_SCHEMA<span class="br0">&#41;</span> <span class="sy0">+</span> <span class="st0">'.'</span> <span class="sy0">+</span> <span class="kw2">QUOTENAME</span><span class="br0">&#40;</span>TABLE_NAME<span class="br0">&#41;</span> <span class="sy0">+</span> <span class="st0">'.'</span> <span class="sy0">+</span> <span class="kw2">QUOTENAME</span><span class="br0">&#40;</span>COLUMN_NAME<span class="br0">&#41;</span>,
@columnName <span class="sy0">=</span> <span class="kw2">REPLACE</span><span class="br0">&#40;</span><span class="kw2">REPLACE</span><span class="br0">&#40;</span>COLUMN_NAME,<span class="st0">'%'</span>,<span class="st0">''</span><span class="br0">&#41;</span>,<span class="st0">'_'</span>,<span class="st0">''</span><span class="br0">&#41;</span>
<span class="kw1">FROM</span> #LOOP <span class="kw1">WHERE</span> id <span class="sy0">=</span> @loopid
&nbsp;
&nbsp;
<span class="co1">--rename the column</span>
<span class="kw1">EXEC</span> <span class="kw3">sp_rename</span> @TableColumnNAme, @columnName, <span class="st0">'COLUMN'</span>;
&nbsp;
<span class="co1">--increment loop</span>
<span class="kw1">SET</span> @loopid <span class="sy0">=</span> @loopid <span class="sy0">+</span> <span class="nu0">1</span>
<span class="kw1">END</span>
&nbsp;
<span class="kw1">DROP</span> <span class="kw1">TABLE</span> #LOOP</pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">--Grab the table and columns that we need and store it in a temp table
SELECT IDENTITY(INT,1,1) AS id ,column_name,table_name, table_schema
INTO #LOOP
FROM information_schema.columns
WHERE column_name LIKE '%[%]%' --need to use brackets to escape %
OR column_name LIKE '%[_]%'    --need to use brackets to escape _

--set up loop variables
DECLARE @maxID INT, @loopid INT
SELECT @loopid =1  --start of loop
SELECT @maxID = MAX(id) FROM #LOOP --end of loop


--setup table and column name variables
DECLARE  @columnName VARCHAR(100)
DECLARE  @TableColumnNAme VARCHAR(100)

--loop until the end
WHILE @loopid &lt;= @maxID
BEGIN

--populate variables and take % and _ out from the column name
SELECT @TableColumnNAme = QUOTENAME(TABLE_SCHEMA) + '.' + QUOTENAME(TABLE_NAME) + '.' + QUOTENAME(COLUMN_NAME),
@columnName = REPLACE(REPLACE(COLUMN_NAME,'%',''),'_','')
FROM #LOOP WHERE id = @loopid


--rename the column
EXEC sp_rename @TableColumnNAme, @columnName, 'COLUMN';

--increment loop
SET @loopid = @loopid + 1
END

DROP TABLE #LOOP</pre></div></div>

<p>Run a simple select statement to verify that the columns have been renamed</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
</pre></td><td class="de1"><pre class="de1"><span class="kw1">SELECT</span> <span class="sy0">*</span> <span class="kw1">FROM</span> Test2</pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">SELECT * FROM Test2</pre></div></div>

<p>As you can see, there are no more underscores and percent signs in the column names.</p>
<h1>Generate a T-SQL Script</h1>
<p>Here is the other way of doing the same thing. First drop and create the tables again</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
</pre></td><td class="de1"><pre class="de1"><span class="kw1">DROP</span> <span class="kw1">TABLE</span> Test,Test2
&nbsp;
<span class="kw1">CREATE</span> <span class="kw1">TABLE</span> Test <span class="br0">&#40;</span><span class="br0">&#91;</span>col<span class="sy0">%</span>1<span class="br0">&#93;</span> <span class="kw1">VARCHAR</span><span class="br0">&#40;</span><span class="nu0">50</span><span class="br0">&#41;</span>,<span class="br0">&#91;</span>col_2<span class="br0">&#93;</span> <span class="kw1">VARCHAR</span><span class="br0">&#40;</span><span class="nu0">40</span><span class="br0">&#41;</span><span class="br0">&#41;</span>
GO
&nbsp;
<span class="kw1">CREATE</span> <span class="kw1">TABLE</span> Test2 <span class="br0">&#40;</span><span class="br0">&#91;</span>col<span class="sy0">%</span>2<span class="br0">&#93;</span> <span class="kw1">VARCHAR</span><span class="br0">&#40;</span><span class="nu0">50</span><span class="br0">&#41;</span>,<span class="br0">&#91;</span>col_3<span class="br0">&#93;</span> <span class="kw1">VARCHAR</span><span class="br0">&#40;</span><span class="nu0">40</span><span class="br0">&#41;</span>, <span class="br0">&#91;</span>Col_<span class="sy0">%</span>_<span class="sy0">%</span>4<span class="br0">&#93;</span> <span class="kw1">int</span><span class="br0">&#41;</span>
GO</pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">DROP TABLE Test,Test2

CREATE TABLE Test ([col%1] VARCHAR(50),[col_2] VARCHAR(40))
GO

CREATE TABLE Test2 ([col%2] VARCHAR(50),[col_3] VARCHAR(40), [Col_%_%4] int)
GO</pre></div></div>

<p>Now hit CTRL + T to display the output in text, run the query below</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
</pre></td><td class="de1"><pre class="de1"><span class="kw1">SELECT</span>&nbsp; &nbsp; &nbsp; <span class="st0">'EXEC sp_rename '</span><span class="st0">''</span> 
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="sy0">+</span> <span class="kw2">QUOTENAME</span><span class="br0">&#40;</span>TABLE_SCHEMA<span class="br0">&#41;</span> <span class="sy0">+</span> <span class="st0">'.'</span> 
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="sy0">+</span> <span class="kw2">QUOTENAME</span><span class="br0">&#40;</span>TABLE_NAME<span class="br0">&#41;</span> <span class="sy0">+</span> <span class="st0">'.'</span> 
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="sy0">+</span> <span class="kw2">QUOTENAME</span><span class="br0">&#40;</span>COLUMN_NAME<span class="br0">&#41;</span> <span class="sy0">+</span> <span class="st0">''</span><span class="st0">', '</span><span class="st0">''</span> 
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="sy0">+</span> <span class="kw2">REPLACE</span><span class="br0">&#40;</span><span class="kw2">REPLACE</span><span class="br0">&#40;</span>COLUMN_NAME, <span class="st0">'%'</span>, <span class="st0">''</span><span class="br0">&#41;</span>, <span class="st0">'_'</span>, <span class="st0">''</span><span class="br0">&#41;</span> <span class="sy0">+</span> <span class="st0">''</span><span class="st0">', '</span><span class="st0">'COLUMN'</span><span class="st0">' '</span> 
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="sy0">+</span> <span class="kw1">CHAR</span><span class="br0">&#40;</span><span class="nu0">13</span><span class="br0">&#41;</span> <span class="sy0">+</span> <span class="kw1">CHAR</span><span class="br0">&#40;</span><span class="nu0">10</span><span class="br0">&#41;</span> <span class="sy0">+</span> <span class="st0">'GO'</span> &nbsp;<span class="sy0">+</span> <span class="kw1">CHAR</span><span class="br0">&#40;</span><span class="nu0">13</span><span class="br0">&#41;</span> <span class="sy0">+</span> <span class="kw1">CHAR</span><span class="br0">&#40;</span><span class="nu0">10</span><span class="br0">&#41;</span> &nbsp;
<span class="kw1">FROM</span> <span class="sy0">IN</span>F<span class="sy0">OR</span>MATION_SCHEMA.<span class="me1">COLUMNS</span> 
<span class="kw1">WHERE</span> column_name <span class="sy0">LIKE</span> <span class="st0">'%[%]%'</span>
<span class="sy0">OR</span> column_name <span class="sy0">LIKE</span> <span class="st0">'%[_]%'</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">SELECT		'EXEC sp_rename ''' 
			+ QUOTENAME(TABLE_SCHEMA) + '.' 
			+ QUOTENAME(TABLE_NAME) + '.' 
			+ QUOTENAME(COLUMN_NAME) + ''', ''' 
			+ REPLACE(REPLACE(COLUMN_NAME, '%', ''), '_', '') + ''', ''COLUMN'' ' 
			+ CHAR(13) + CHAR(10) + 'GO'  + CHAR(13) + CHAR(10)  
FROM INFORMATION_SCHEMA.COLUMNS 
WHERE column_name LIKE '%[%]%'
OR column_name LIKE '%[_]%'</pre></div></div>

<p>The output from that query is the following T-SQL</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
</pre></td><td class="de1"><pre class="de1"><span class="kw1">EXEC</span> <span class="kw3">sp_rename</span> <span class="st0">'[dbo].[Test].[col%1]'</span>, <span class="st0">'col1'</span>, <span class="st0">'COLUMN'</span> 
GO
<span class="kw1">EXEC</span> <span class="kw3">sp_rename</span> <span class="st0">'[dbo].[Test2].[col%2]'</span>, <span class="st0">'col2'</span>, <span class="st0">'COLUMN'</span> 
GO
<span class="kw1">EXEC</span> <span class="kw3">sp_rename</span> <span class="st0">'[dbo].[Test2].[Col_%_%4]'</span>, <span class="st0">'Col4'</span>, <span class="st0">'COLUMN'</span> 
GO
<span class="kw1">EXEC</span> <span class="kw3">sp_rename</span> <span class="st0">'[dbo].[Test].[col_2]'</span>, <span class="st0">'col2'</span>, <span class="st0">'COLUMN'</span> 
GO
<span class="kw1">EXEC</span> <span class="kw3">sp_rename</span> <span class="st0">'[dbo].[Test2].[col_3]'</span>, <span class="st0">'col3'</span>, <span class="st0">'COLUMN'</span> 
GO</pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">EXEC sp_rename '[dbo].[Test].[col%1]', 'col1', 'COLUMN' 
GO
EXEC sp_rename '[dbo].[Test2].[col%2]', 'col2', 'COLUMN' 
GO
EXEC sp_rename '[dbo].[Test2].[Col_%_%4]', 'Col4', 'COLUMN' 
GO
EXEC sp_rename '[dbo].[Test].[col_2]', 'col2', 'COLUMN' 
GO
EXEC sp_rename '[dbo].[Test2].[col_3]', 'col3', 'COLUMN' 
GO</pre></div></div>

<p>You can run that SQL and then you can run the same query against the table to see that the columns names don&#8217;t have those unwanted characters anymore</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
</pre></td><td class="de1"><pre class="de1"><span class="kw1">select</span> <span class="sy0">*</span> <span class="kw1">from</span> Test2</pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">select * from Test2</pre></div></div>

<p>As you can see, there are no more underscores and percent signs in the column names.</p>
<p>There you have it, two ways to do the same thing. Which way do you prefer, the first or the second?</p>
<p>*** <strong>Remember, if you have a SQL related question, try our <a href="http://forum.lessthandot.com/viewforum.php?f=17">Microsoft SQL Server Programming</a> forum or our <a href="http://forum.lessthandot.com/viewforum.php?f=22">Microsoft SQL Server Admin</a> forum</strong><ins></ins></p>
]]></content:encoded>
			<wfw:commentRss>/index.php/datamgmt/datadesign/how-to-clean-a-table-from-badly-named-co/feed/</wfw:commentRss>
		<slash:comments>4</slash:comments>
		</item>
		<item>
		<title>ISO-11179 Naming Conventions</title>
		<link>/index.php/datamgmt/datadesign/iso-11179-naming-conventions/</link>
		<comments>/index.php/datamgmt/datadesign/iso-11179-naming-conventions/#respond</comments>
		<pubDate>Mon, 11 Aug 2008 14:43:02 +0000</pubDate>
		<dc:creator><![CDATA[SQLDenis]]></dc:creator>
				<category><![CDATA[Data Modelling and Design]]></category>
		<category><![CDATA[best practices]]></category>
		<category><![CDATA[database]]></category>
		<category><![CDATA[iso]]></category>
		<category><![CDATA[naming conventions]]></category>
		<category><![CDATA[programming]]></category>
		<category><![CDATA[sql server]]></category>

		<guid isPermaLink="false">/index.php/2008/08/iso-11179-naming-conventions/</guid>
		<description><![CDATA[Straight from the man himself comes this statement posted in the microsoft.public.sqlserver.programming forum: &#8220;You need to read ISO-11179 so you use proper data element names. You actually had &#8220;tbl-&#8220;on the table names! Sometimes &#8220;id&#8221; id a prefix and sometimes it is a postfix.&#8221; Of course you know who I am talking about? No? Joe Celko [&#8230;]]]></description>
				<content:encoded><![CDATA[<p>Straight from the man himself comes this statement posted in the <a href="http://groups.google.com/group/microsoft.public.sqlserver.programming/browse_thread/thread/b29389050253df78/87d7c1b73e60e41d#87d7c1b73e60e41d">microsoft.public.sqlserver.programming forum</a>: &#8220;<em>You need to read ISO-11179 so you use proper data element names. You<br />
actually had &#8220;tbl-&#8220;on the table names! Sometimes &#8220;id&#8221; id a<br />
prefix and sometimes it is a postfix.</em>&#8221;</p>
<p>Of course you know who I am talking about? No? Joe Celko of course.  So what is ISO-11179?</p>
<p>The 11179 standard is a multipart standard that includes the following parts:</p>
<p><a href="http://metadata-standards.org/11179/#11179-1">11179-1</a><br />
<strong>Part 1: Framework</strong>, introduces and discusses fundamental ideas of data elements, value domains, data element concepts, conceptual domains, and classification schemes essential to the understanding of this set of standards and provides the context for associating the individual parts of ISO/IEC 11179.</p>
<p><a href="http://metadata-standards.org/11179/#11179-2">11179-2</a><br />
<strong>Part 2: Classification</strong>, provides a conceptual model for managing classification schemes. There are many structures used to organize classification schemes and there are many subject matter areas that classification schemes describe. So, this Part also provides a two-faceted classification for classification schemes themselves.</p>
<p><a href="http://metadata-standards.org/11179/#11179-3">11179-3</a><br />
<strong>Part 3: Registry Metamodel and Basic Attributes</strong>, specifies a conceptual model for a metadata registry. It is limited to a set of basic attributes for data elements, data element concepts, value domains, conceptual domains, classification schemes, and other related classes, called administered items. The basic attributes specified for data elements in ISO/IEC 11179-3:1994 are provided in this revision.</p>
<p><a href="http://metadata-standards.org/11179/#11179-4">11179-4</a><br />
<strong>Part 4: Formulation of Data Definitions,</strong> provides guidance on how to develop unambiguous data definitions. A number of specific rules and guidelines are presented in ISO/IEC 11179-4 that specify exactly how a data definition should be formed. A precise, well-formed definition is one of the most critical requirements for shared understanding of an administered item; well-formed definitions are imperative for the exchange of information. Only if every user has a common and exact understanding of the data item can it be exchanged trouble-free.</p>
<p><a href="http://metadata-standards.org/11179/#11179-5">11179-5</a><br />
<strong>Part 5: Naming and Identification Principles</strong>, provides guidance for the identification of administered items. Identification is a broad term for designating, or identifying, a particular data item. Identification can be accomplished in various ways, depending upon the use of the identifier. Identification includes the assignment of numerical identifiers that have no inherent meanings to humans; icons (graphic symbols to which meaning has been assigned); and names with embedded meaning, usually for human understanding, that are associated with the data item&#8217;s definition and value domain.</p>
<p><a href="http://metadata-standards.org/11179/#11179-6">11179-6</a><br />
<strong>Part 6: Registration</strong>, provides instruction on how a registration applicant may register a data item with a central Registration Authority and the allocation of unique identifiers for each data item. Maintenance of administered items already registered is also specified in this document.</p>
<p>The one that deals with  naming conventions is <a href="http://metadata-standards.org/11179/#11179-5">11179-5</a> The link will point to a zip file which has a pdf file in it. The TOC of this pdf file is below</p>
<p>Contents<br />
Foreword<br />
1 Scope<br />
2 Normative references<br />
3 Terms and definitions<br />
4 Data Identifiers within a registry<br />
5 Identification<br />
6 Names<br />
6.1 Names in a registry<br />
6.2 Naming conventions<br />
7 Development of naming conventions<br />
7.1 Introduction<br />
7.2 Scope principle<br />
7.3 Authority principle<br />
7.4 Semantic principle<br />
7.5 Syntactic principle<br />
7.6 Lexical principle<br />
7.7 Uniqueness principle<br />
Annex A (informative) Example naming conventions for names within an MDR registry<br />
Annex B (informative) Example naming conventions for Asian languages</p>
<p>So check it out and hopefully you and your team can adapt a common naming conventions instead of having things named like employee_address, EmployeeAddress, employeeAddress and tblEmployeeAddress.</p>
]]></content:encoded>
			<wfw:commentRss>/index.php/datamgmt/datadesign/iso-11179-naming-conventions/feed/</wfw:commentRss>
		<slash:comments>0</slash:comments>
		</item>
	</channel>
</rss>
