<?xml version="1.0" encoding="UTF-8"?><rss version="2.0"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:atom="http://www.w3.org/2005/Atom"
	xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
	xmlns:slash="http://purl.org/rss/1.0/modules/slash/"
	>

<channel>
	<title>joins &#8211; LessthanDot</title>
	<atom:link href="/index.php/tag/joins/feed/" rel="self" type="application/rss+xml" />
	<link>/</link>
	<description>A Technical Community for IT Professionals</description>
	<lastBuildDate>Sat, 09 Mar 2019 12:50:36 +0000</lastBuildDate>
	<language>en-US</language>
	<sy:updatePeriod>hourly</sy:updatePeriod>
	<sy:updateFrequency>1</sy:updateFrequency>
	<generator>https://wordpress.org/?v=4.6.1</generator>
	<item>
		<title>T-SQL Tuesday #37: Join me in a month of Joins</title>
		<link>/index.php/datamgmt/dbprogramming/mssqlserver/t-sql-tuesday-37-join/</link>
		<comments>/index.php/datamgmt/dbprogramming/mssqlserver/t-sql-tuesday-37-join/#comments</comments>
		<pubDate>Tue, 11 Dec 2012 05:25:00 +0000</pubDate>
		<dc:creator><![CDATA[Koen Verbeeck]]></dc:creator>
				<category><![CDATA[Microsoft SQL Server]]></category>
		<category><![CDATA[Oracle]]></category>
		<category><![CDATA[joins]]></category>
		<category><![CDATA[oracle]]></category>
		<category><![CDATA[sql server]]></category>
		<category><![CDATA[t-sql tuesday]]></category>

		<guid isPermaLink="false">/index.php/2012/12/t-sql-tuesday-37-join/</guid>
		<description><![CDATA[ 
This month’s T-SQL Tuesday is hosted by Sebastian Meine (blog &#124; twitter) and the topic is joins. He has a whole month worth of topics about joins: A Join A Day – Introduction.

My blog post is about something weird I encountered while&#8230;]]></description>
				<content:encoded><![CDATA[<p class="MsoNormal" style="text-align: justify;"><span lang="EN-US">This month’s T-SQL Tuesday is hosted by Sebastian Meine (<a href="http://sqlity.net/en/">blog</a> | <a href="https://twitter.com/sqlity">twitter</a>) and the topic is <strong>joins</strong>. He has a whole month worth of topics about joins: <a href="http://sqlity.net/en/1146/a-join-a-day-introduction/">A Join A Day – Introduction</a>.</span></p>
<p class="MsoNormal" style="text-align: justify;"><span lang="EN-US"> </span></p>
<div class="image_block"><a href="http://sqlity.net/en/1175/t-sql-tuesday-37-invite-to-join-me-in-a-month-of-joins/"><img style="float: left;" src="/wp-content/uploads/users/koenverbeeck/TSQL2sday37/TSQL2sday.PNG?mtime=1355209029" alt="" width="133" height="134" /></a></div>
<p> </p>
<p> </p>
<p> </p>
<p> </p>
<p> </p>
<p>My blog post is about something weird I encountered while I was converting some old Oracle code to T-SQL (I encounter all sorts of weird stuff in Oracle code, but let’s stay on topic). Amongst all the usual cursor-madness, I stumbled upon this query:</p>
<pre>SELECT mt1.Column1, mt2.Column2
FROM [dbo].[MyTable1] mt1, [dbo].[MyTable2] mt2
WHERE      mt1.[JoinColumn1] (+)= mt2.[JoinColumn1]
       AND mt1.[JoinColumn2] (+)= mt2.[JoinColumn2]</pre>
<p><span style="text-align: justify;">The original query was much longer and more complex, but I kept only the necessary parts. I recognised the old-style of writing joins, also known as ANSI-89 joins (read more about them in </span><a style="text-align: justify;" href="http://sqlblog.com/blogs/aaron_bertrand/archive/2009/10/08/bad-habits-to-kick-using-old-style-joins.aspx">Bad habits to kick : using old-style JOINs</a><span style="text-align: justify;">). However, I never came across the type of join designated by a (+)=. Most likely this has something to do what my lack of experience with Oracle, which I am very proud of :). SQL Server didn’t recognise the syntax so it had to be either Oracle only, or something very outdated. I asked about this on Twitter and a few people came up with </span><a style="text-align: justify;" href="http://msdn.microsoft.com/en-us/library/cc645922.aspx">compound operators</a><span style="text-align: justify;"> which were introduced in SQL Server 2008, but luckily Mladen Prajdic (</span><a style="text-align: justify;" href="http://weblogs.sqlteam.com/mladenp/default.aspx">blog</a><span style="text-align: justify;"> | </span><a style="text-align: justify;" href="https://twitter.com/MladenPrajdic">twitter</a><span style="text-align: justify;">) vaguely remembered those could be LEFT OUTER JOINs.</span></p>
<p class="MsoNormal"><span lang="EN-US"><em>* UPDATE:  Apparently this syntax coresponds with RIGHT OUTER JOIN. For more info, see Robs comment below *</em></span></p>
<p class="MsoNormal"><span lang="EN-US">And he was right. After some Googling I found this Oracle doc page: <a href="http://docs.oracle.com/cd/B19306_01/server.102/b14200/queries006.htm">Joins</a>. It is described as the “Oracle join operator”. They advise not to use it, but you know, stuff like this always pops up in legacy code.</span></p>
<p class="MsoNormal"><span lang="EN-US">So, if you’re converting some old Oracle code (we have to get rid of it once, don’t we?), now you know how to deal with this monstrosity.</span></p>
]]></content:encoded>
			<wfw:commentRss>/index.php/datamgmt/dbprogramming/mssqlserver/t-sql-tuesday-37-join/feed/</wfw:commentRss>
		<slash:comments>7</slash:comments>
		</item>
		<item>
		<title>Difference between a cross join and a full outer join</title>
		<link>/index.php/datamgmt/datadesign/difference-between-a-cross-join/</link>
		<comments>/index.php/datamgmt/datadesign/difference-between-a-cross-join/#comments</comments>
		<pubDate>Sun, 12 Feb 2012 12:36:00 +0000</pubDate>
		<dc:creator><![CDATA[SQLDenis]]></dc:creator>
				<category><![CDATA[Data Modelling and Design]]></category>
		<category><![CDATA[Database Programming]]></category>
		<category><![CDATA[Microsoft SQL Server]]></category>
		<category><![CDATA[Microsoft SQL Server Admin]]></category>
		<category><![CDATA[joins]]></category>
		<category><![CDATA[sql server 2000]]></category>
		<category><![CDATA[sql server 2005]]></category>
		<category><![CDATA[sql server 2008]]></category>
		<category><![CDATA[sql server 2012]]></category>
		<category><![CDATA[t-sql]]></category>

		<guid isPermaLink="false">/index.php/2012/02/difference-between-a-cross-join/</guid>
		<description><![CDATA[We are interviewing for some SQL developer positions and it seems that most people that I interviewed do not know the difference between a full outer join and a cross join. 

Cross join
A cross join produces the Cartesian product of the tables involv&#8230;]]></description>
				<content:encoded><![CDATA[<p>We are interviewing for some SQL developer positions and it seems that most people that I interviewed the past 3 weeks do not know the difference between a full outer join and a cross join. </p>
<h2>Cross join</h2>
<p>A cross join produces the Cartesian product of the tables involved in the join. The size of a Cartesian product result set is the number of rows in the first table multiplied by the number of rows in the second table</p>
<p>Here what Wikipedia has to say about it: http://en.wikipedia.org/wiki/Cartesian_product</p>
<blockquote><p>For example, the Cartesian product of the 13-element set of standard playing card ranks {Ace, King, Queen, Jack, 10, 9, 8, 7, 6, 5, 4, 3, 2} and the four-element set of card suits {&#9824;, &#9829;, &#9830;, &#9827;} is the 52-element set of all possible playing cards: ranks × suits = {(Ace, &#9824;), (King, &#9824;), &#8230;, (2, &#9824;), (Ace, &#9829;), &#8230;, (3, &#9827;), (2, &#9827;)}. The corresponding Cartesian product has 52 = 13 × 4 elements. The Cartesian product of the suits × ranks would still be the 52 pairings, but in the opposite order {(&#9824;, Ace), (&#9824;, King), &#8230;}. Ordered pairs (a kind of tuple) have order, but sets are unordered. The order in which the elements of a set are listed is irrelevant; the deck can be shuffled and it is still the same set of cards.</p></blockquote>
<p>
<h2>Full outer join</h2>
<p>A full outer join includes all rows from both tables, regardless of whether or not the other table has a matching value.</p>
<p>Here is what wikipedia has on full outer join: http://en.wikipedia.org/wiki/Join_(SQL)#Full_outer_join</p>
<blockquote><p>Conceptually, a full outer join combines the effect of applying both left and right outer joins. Where records in the FULL OUTER JOINed tables do not match, the result set will have NULL values for every column of the table that lacks a matching row. For those records that do match, a single row will be produced in the result set (containing fields populated from both tables).<br />
For example, this allows us to see each employee who is in a department and each department that has an employee, but also see each employee who is not part of a department and each department which doesn&#8217;t have an employee.</p></blockquote>
<p>
<h2>Examples</h2>
<p>Time to look at some code. First create these two really simple tables</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
</pre></td><td class="de1"><pre class="de1"><span class="kw1">CREATE</span> <span class="kw1">TABLE</span> TableA <span class="br0">&#40;</span>IDA <span class="kw1">int</span><span class="br0">&#41;</span>
GO
&nbsp;
<span class="kw1">INSERT</span> TableA <span class="kw1">VALUES</span><span class="br0">&#40;</span><span class="nu0">1</span><span class="br0">&#41;</span>
<span class="kw1">INSERT</span> TableA <span class="kw1">VALUES</span><span class="br0">&#40;</span><span class="nu0">2</span><span class="br0">&#41;</span>
<span class="kw1">INSERT</span> TableA <span class="kw1">VALUES</span><span class="br0">&#40;</span><span class="nu0">3</span><span class="br0">&#41;</span>
GO
&nbsp;
&nbsp;
<span class="kw1">CREATE</span> <span class="kw1">TABLE</span> TableB <span class="br0">&#40;</span>IDB <span class="kw1">int</span><span class="br0">&#41;</span>
GO
<span class="kw1">INSERT</span> TableB <span class="kw1">VALUES</span><span class="br0">&#40;</span><span class="nu0">2</span><span class="br0">&#41;</span>
<span class="kw1">INSERT</span> TableB <span class="kw1">VALUES</span><span class="br0">&#40;</span><span class="nu0">3</span><span class="br0">&#41;</span>
<span class="kw1">INSERT</span> TableB <span class="kw1">VALUES</span><span class="br0">&#40;</span><span class="nu0">4</span><span class="br0">&#41;</span>
GO</pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">CREATE TABLE TableA (IDA int)
GO

INSERT TableA VALUES(1)
INSERT TableA VALUES(2)
INSERT TableA VALUES(3)
GO


CREATE TABLE TableB (IDB int)
GO
INSERT TableB VALUES(2)
INSERT TableB VALUES(3)
INSERT TableB VALUES(4)
GO</pre></div></div>

<p>As you can see both table have 3 rows but only 2 rows are common to both tables. If we do a full outer join now, we will get back a result set that has 4 rows. We get 2 rows that are common to both tables, then we get 1 row from TableA which does not exist in TableB, we also get 1 row from TableB which does not exist in TableA</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
</pre></td><td class="de1"><pre class="de1"><span class="kw1">SELECT</span> <span class="sy0">*</span> <span class="kw1">FROM</span> TableA a
<span class="kw1">FULL</span> <span class="sy0">OUTER</span> <span class="sy0">JOIN</span> TableB b <span class="kw1">on</span> a.<span class="me1">IDA</span> <span class="sy0">=</span> b.<span class="me1">IDB</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">SELECT * FROM TableA a
FULL OUTER JOIN TableB b on a.IDA = b.IDB</pre></div></div>

<p>Here is the output</p>
<div class="tables">
<table>
<tr>
<th>IDA</th>
<th>IDB</th>
</tr>
<tr>
<td>1</td>
<td>NULL</td>
</tr>
<tr>
<td>2</td>
<td>2</td>
</tr>
<tr>
<td>3</td>
<td>3</td>
</tr>
<tr>
<td>NULL</td>
<td>4</td>
</tr>
</table>
</div>
<p>As you can see there are two rows that have NULL in them, these are the ones that don&#8217;t exist in both tables</p>
<p>Now, let&#8217;s look at the cross join. We will get back 9 rows since we have 3 rows in both tables, output will be 3 x 3 rows</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
</pre></td><td class="de1"><pre class="de1"><span class="kw1">SELECT</span> <span class="sy0">*</span> <span class="kw1">FROM</span> TableA a
<span class="sy0">CROSS</span> <span class="sy0">JOIN</span> TableB b 
<span class="kw1">ORDER</span> <span class="kw1">BY</span> a.<span class="me1">IDA</span>,b.<span class="me1">IDB</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">SELECT * FROM TableA a
CROSS JOIN TableB b 
ORDER BY a.IDA,b.IDB</pre></div></div>

<p>Here is the output</p>
<div class="tables">
<table>
<tr>
<th>IDA</th>
<th>IDB</th>
</tr>
<tr>
<td>1</td>
<td>2</td>
</tr>
<tr>
<td>1</td>
<td>3</td>
</tr>
<tr>
<td>1</td>
<td>4</td>
</tr>
<tr>
<td>2</td>
<td>2</td>
</tr>
<tr>
<td>2</td>
<td>3</td>
</tr>
<tr>
<td>2</td>
<td>4</td>
</tr>
<tr>
<td>3</td>
<td>2</td>
</tr>
<tr>
<td>3</td>
<td>3</td>
</tr>
<tr>
<td>3</td>
<td>4</td>
</tr>
</table>
</div>
<p>As you can see for each row in TableA, you will get back all 3 rows from TableB</p>
<p>I got all kind of creative answer in responds to this question, some people were describing the cross join as an inner join or describing both join as being the same</p>
<p>If you want to read a little more about joins and a different way of doing a cross join, check out these two posts <a href="/index.php/DataMgmt/DBProgramming/MSSQLServer/sql-advent-2011-day-15">SQL Advent 2011 Day 15: Joins</a> and <a href="/index.php/DataMgmt/DataDesign/sql-advent-2011-day-16">SQL Advent 2011 Day 16: CROSS APPLY and OUTER APPLY</a></p>
]]></content:encoded>
			<wfw:commentRss>/index.php/datamgmt/datadesign/difference-between-a-cross-join/feed/</wfw:commentRss>
		<slash:comments>3</slash:comments>
		</item>
		<item>
		<title>SQL Advent 2011 Day 15: Joins</title>
		<link>/index.php/datamgmt/datadesign/sql-advent-2011-day-15/</link>
		<comments>/index.php/datamgmt/datadesign/sql-advent-2011-day-15/#comments</comments>
		<pubDate>Fri, 16 Dec 2011 00:37:00 +0000</pubDate>
		<dc:creator><![CDATA[SQLDenis]]></dc:creator>
				<category><![CDATA[Data Modelling and Design]]></category>
		<category><![CDATA[Database Programming]]></category>
		<category><![CDATA[Microsoft SQL Server]]></category>
		<category><![CDATA[Microsoft SQL Server Admin]]></category>
		<category><![CDATA[how to]]></category>
		<category><![CDATA[joins]]></category>
		<category><![CDATA[sql server 2005]]></category>
		<category><![CDATA[sql server 2008]]></category>
		<category><![CDATA[tip]]></category>

		<guid isPermaLink="false">/index.php/2011/12/sql-advent-2011-day-15/</guid>
		<description><![CDATA[In my Are you ready for SQL Server 2012 or are you still partying like it is 1999? post, I wrote about how you should start using SQL Server 2005 and SQL Server 2008 functionality now in order to prepare for SQL Server 2012. I still see tons of code tha&#8230;]]></description>
				<content:encoded><![CDATA[<p>In my <a href="/index.php/DataMgmt/DataDesign/are-you-ready-for-sql">Are you ready for SQL Server 2012 or are you still partying like it is 1999?</a> post, I wrote about how you should start using SQL Server 2005 and SQL Server 2008 functionality now in order to prepare for SQL Server 2012. I still see tons of code that is written in the pre 2005 style and people still keep using those functions, procs and statements even though SQL Server 2005 and 2008 have much better functionality.</p>
<p>Today we are going to take a look at joins. SQL Server supports the ANSI SQL-92 (new style) syntax and the ANSI-SQL-89 (old style) syntax. Let&#8217;s take a look at both for INNER, OUTER and CROSS joins. This post is not about JOIN fundamentals, the internet is full of those and I won&#8217;t go into too much detail here, this post is mostly about showing you the difference between new and old style syntax.</p>
<p>Before we start, create these two extremely simple tables</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
</pre></td><td class="de1"><pre class="de1"><span class="kw1">CREATE</span> <span class="kw1">TABLE</span> Test1<span class="br0">&#40;</span>id <span class="kw1">int</span><span class="br0">&#41;</span>
go
&nbsp;
<span class="kw1">INSERT</span> Test1 <span class="kw1">VALUES</span><span class="br0">&#40;</span><span class="nu0">1</span><span class="br0">&#41;</span>
<span class="kw1">INSERT</span> Test1 <span class="kw1">VALUES</span><span class="br0">&#40;</span><span class="nu0">2</span><span class="br0">&#41;</span>
<span class="kw1">INSERT</span> Test1 <span class="kw1">VALUES</span><span class="br0">&#40;</span><span class="nu0">3</span><span class="br0">&#41;</span>
<span class="kw1">INSERT</span> Test1 <span class="kw1">VALUES</span><span class="br0">&#40;</span><span class="nu0">4</span><span class="br0">&#41;</span>
<span class="kw1">INSERT</span> Test1 <span class="kw1">VALUES</span><span class="br0">&#40;</span><span class="nu0">5</span><span class="br0">&#41;</span>
&nbsp;
&nbsp;
<span class="kw1">CREATE</span> <span class="kw1">TABLE</span> Test2<span class="br0">&#40;</span>id <span class="kw1">int</span><span class="br0">&#41;</span>
go
&nbsp;
<span class="kw1">INSERT</span> Test2 <span class="kw1">VALUES</span><span class="br0">&#40;</span><span class="nu0">1</span><span class="br0">&#41;</span>
<span class="kw1">INSERT</span> Test2 <span class="kw1">VALUES</span><span class="br0">&#40;</span><span class="nu0">2</span><span class="br0">&#41;</span>
<span class="kw1">INSERT</span> Test2 <span class="kw1">VALUES</span><span class="br0">&#40;</span><span class="nu0">3</span><span class="br0">&#41;</span>
<span class="kw1">INSERT</span> Test2 <span class="kw1">VALUES</span><span class="br0">&#40;</span><span class="nu0">4</span><span class="br0">&#41;</span>
<span class="kw1">INSERT</span> Test2 <span class="kw1">VALUES</span><span class="br0">&#40;</span><span class="nu0">6</span><span class="br0">&#41;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">CREATE TABLE Test1(id int)
go

INSERT Test1 VALUES(1)
INSERT Test1 VALUES(2)
INSERT Test1 VALUES(3)
INSERT Test1 VALUES(4)
INSERT Test1 VALUES(5)


CREATE TABLE Test2(id int)
go

INSERT Test2 VALUES(1)
INSERT Test2 VALUES(2)
INSERT Test2 VALUES(3)
INSERT Test2 VALUES(4)
INSERT Test2 VALUES(6)</pre></div></div>

<p>As you can see, each table has one row that does not exists in the other table</p>
<h2>The INNER JOIN</h2>
<p>Here is how you do an INNER JOIN in the old style syntax</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
</pre></td><td class="de1"><pre class="de1"><span class="kw1">SELECT</span> <span class="sy0">*</span> <span class="kw1">FROM</span> Test1 t1,Test2 t2
<span class="kw1">WHERE</span> t1.<span class="me1">id</span> <span class="sy0">=</span> t2.<span class="me1">id</span> </pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">SELECT * FROM Test1 t1,Test2 t2
WHERE t1.id = t2.id </pre></div></div>

<p>Here is how you do it with the new style syntax</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
</pre></td><td class="de1"><pre class="de1"><span class="kw1">SELECT</span> <span class="sy0">*</span> <span class="kw1">FROM</span> Test1 t1
<span class="sy0">JOIN</span> Test2 t2
<span class="kw1">ON</span> t1.<span class="me1">id</span> <span class="sy0">=</span> t2.<span class="me1">id</span> </pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">SELECT * FROM Test1 t1
JOIN Test2 t2
ON t1.id = t2.id </pre></div></div>

<p>Both will return the following results set</p>
<pre>id	id
1	1
2	2
3	3
4	4</pre>
<p>The danger with the old style syntax is that you can forget the WHERE clause, with the new style syntax you will get an error</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
</pre></td><td class="de1"><pre class="de1"><span class="kw1">SELECT</span> <span class="sy0">*</span> <span class="kw1">FROM</span> Test1 t1
<span class="sy0">JOIN</span> Test2 t2</pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">SELECT * FROM Test1 t1
JOIN Test2 t2</pre></div></div>

<p><em>Msg 102, Level 15, State 1, Line 2<br />
Incorrect syntax near &#8216;t2&#8217;.</em></p>
<p>Now run this</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
</pre></td><td class="de1"><pre class="de1"><span class="kw1">SELECT</span> <span class="sy0">*</span> <span class="kw1">FROM</span> Test1 t1,Test2 t2 </pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">SELECT * FROM Test1 t1,Test2 t2 </pre></div></div>

<p>Output</p>
<pre>id	id
1	1
2	1
3	1
4	1
5	1
1	2
2	2
3	2
4	2
5	2
1	3
2	3
3	3
4	3
5	3
1	4
2	4
3	4
4	4
5	4
1	6
2	6
3	6
4	6
5	6</pre>
<p>As you can see, that created a Cartesian Product or CROSS JOIN, in the next section we will take a look at that</p>
<h2>The CROSS JOIN</h2>
<p>A CROSS JOIN or Cartesian Product will take each row in one table and match that with all rows from the second table. The size of a Cartesian product result set is the number of rows in the first table multiplied by the number of rows in the second table, in our case it is 5 x 5 = 25 rows</p>
<p>Here is the old style syntax we saw before</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
</pre></td><td class="de1"><pre class="de1"><span class="kw1">SELECT</span> <span class="sy0">*</span> <span class="kw1">FROM</span> Test1 t1,Test2 t2</pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">SELECT * FROM Test1 t1,Test2 t2</pre></div></div>

<p>Here is the new style syntax</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
</pre></td><td class="de1"><pre class="de1"><span class="kw1">SELECT</span> <span class="sy0">*</span> <span class="kw1">FROM</span> Test1
<span class="sy0">CROSS</span> <span class="sy0">JOIN</span> Test2</pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">SELECT * FROM Test1
CROSS JOIN Test2</pre></div></div>

<p>Output</p>
<pre>id	id
1	1
2	1
3	1
4	1
5	1
1	2
2	2
3	2
4	2
5	2
1	3
2	3
3	3
4	3
5	3
1	4
2	4
3	4
4	4
5	4
1	6
2	6
3	6
4	6
5	6</pre>
<p>I like the new style syntax much better, your intentions are clear, I know by looking at the code that the developer wanted a CROSS JOIN, with the old style syntax you always wonder if somehow they forgot the WHERE clause</p>
<p>Here is another way to do a CROSS JOIN, you can use CROSS APPLY</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
</pre></td><td class="de1"><pre class="de1"><span class="kw1">SELECT</span> <span class="sy0">*</span> <span class="kw1">FROM</span> Test1
<span class="sy0">CROSS</span> APPLY Test2</pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">SELECT * FROM Test1
CROSS APPLY Test2</pre></div></div>

<p>I will cover CROSS APPLY and OUTER APPLY in another post</p>
<h2>The OUTER JOIN</h2>
<p>The OUTER JOIN will take all rows from one table and match all the rows from the other table, when there is no match a row with NULLS will be returned. Let&#8217;s take a look</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
</pre></td><td class="de1"><pre class="de1"><span class="kw1">SELECT</span> <span class="sy0">*</span> <span class="kw1">FROM</span> Test1 t1
<span class="kw1">LEFT</span> <span class="sy0">OUTER</span> <span class="sy0">JOIN</span> Test2 t2
<span class="kw1">ON</span> t1.<span class="me1">id</span> <span class="sy0">=</span> t2.<span class="me1">id</span> </pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">SELECT * FROM Test1 t1
LEFT OUTER JOIN Test2 t2
ON t1.id = t2.id </pre></div></div>

<p>Output</p>
<pre>1	1
2	2
3	3
4	4
5	NULL</pre>
<p>As you can see for id 5, there is no matching row in table Test2 so a NULL is returned</p>
<p>Here is what the old style syntax looks like, go ahead and run it</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
</pre></td><td class="de1"><pre class="de1"><span class="kw1">SELECT</span> <span class="sy0">*</span> <span class="kw1">FROM</span> Test1 t1,Test2 t2
<span class="kw1">WHERE</span> t1.<span class="me1">id</span> <span class="sy0">*=</span> t2.<span class="me1">id</span> </pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">SELECT * FROM Test1 t1,Test2 t2
WHERE t1.id *= t2.id </pre></div></div>

<p>Msg 102, Level 15, State 1, Line 2<br />
Incorrect syntax near &#8216;*=&#8217;.</p>
<p>That is right, this syntax is deprecated and you won&#8217;t be able to use it anymore, get in the habit of using the OUTER JOIN syntax. BTW OUTER is optional, you can just specify LEFT JOIN, the queries below are identical</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
</pre></td><td class="de1"><pre class="de1"><span class="kw1">SELECT</span> <span class="sy0">*</span> <span class="kw1">FROM</span> Test1 t1
<span class="kw1">LEFT</span> <span class="sy0">JOIN</span> Test2 t2
<span class="kw1">ON</span> t1.<span class="me1">id</span> <span class="sy0">=</span> t2.<span class="me1">id</span> 
&nbsp;
&nbsp;
<span class="kw1">SELECT</span> <span class="sy0">*</span> <span class="kw1">FROM</span> Test1 t1
<span class="kw1">LEFT</span> <span class="sy0">OUTER</span> <span class="sy0">JOIN</span> Test2 t2
<span class="kw1">ON</span> t1.<span class="me1">id</span> <span class="sy0">=</span> t2.<span class="me1">id</span> </pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">SELECT * FROM Test1 t1
LEFT JOIN Test2 t2
ON t1.id = t2.id 


SELECT * FROM Test1 t1
LEFT OUTER JOIN Test2 t2
ON t1.id = t2.id </pre></div></div>

<p>The RIGHT JOIN is the same as the LEFT JOIN but reversed</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
</pre></td><td class="de1"><pre class="de1"><span class="kw1">SELECT</span> <span class="sy0">*</span> <span class="kw1">FROM</span> Test1 t1
<span class="kw1">RIGHT</span> <span class="sy0">JOIN</span> Test2 t2
<span class="kw1">ON</span> t1.<span class="me1">id</span> <span class="sy0">=</span> t2.<span class="me1">id</span> </pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">SELECT * FROM Test1 t1
RIGHT JOIN Test2 t2
ON t1.id = t2.id </pre></div></div>

<p></p>
<pre>id      id
1	1
2	2
3	3
4	4
NULL	6</pre>
<p>This two queries will give the exact same output</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
</pre></td><td class="de1"><pre class="de1"><span class="kw1">SELECT</span> t1.<span class="sy0">*</span>,t2.<span class="sy0">*</span> <span class="kw1">FROM</span> Test1 t1
<span class="kw1">RIGHT</span> <span class="sy0">JOIN</span> Test2 t2
<span class="kw1">ON</span> t1.<span class="me1">id</span> <span class="sy0">=</span> t2.<span class="me1">id</span> 
&nbsp;
<span class="kw1">SELECT</span> t1.<span class="sy0">*</span>,t2.<span class="sy0">*</span> &nbsp;<span class="kw1">FROM</span> Test2 t2
<span class="kw1">LEFT</span> <span class="sy0">JOIN</span> Test1 t1
<span class="kw1">ON</span> t1.<span class="me1">id</span> <span class="sy0">=</span> t2.<span class="me1">id</span> </pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">SELECT t1.*,t2.* FROM Test1 t1
RIGHT JOIN Test2 t2
ON t1.id = t2.id 

SELECT t1.*,t2.*  FROM Test2 t2
LEFT JOIN Test1 t1
ON t1.id = t2.id </pre></div></div>

<p>As you can see if you use RIGHT instead of LEFT and flip the tables around, it is the same exact query</p>
<p>Just as with the LEFT JOIN, you can use the old style RIGHT JOIN syntax anymore</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
</pre></td><td class="de1"><pre class="de1"><span class="kw1">SELECT</span> <span class="sy0">*</span> <span class="kw1">FROM</span> Test1 t1,Test2 t2
<span class="kw1">WHERE</span> t1.<span class="me1">id</span> <span class="sy0">=*</span> t2.<span class="me1">id</span> </pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">SELECT * FROM Test1 t1,Test2 t2
WHERE t1.id =* t2.id </pre></div></div>

<p>Msg 102, Level 15, State 1, Line 2<br />
Incorrect syntax near &#8216;*&#8217;.</p>
<p>A FULL OUTER JOIN will do an OUTER JOIN on both tables, whatever doesn match in either table will get a NULL in the result</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
</pre></td><td class="de1"><pre class="de1"><span class="kw1">SELECT</span> t1.<span class="sy0">*</span>,t2.<span class="sy0">*</span> &nbsp;<span class="kw1">FROM</span> Test2 t2
<span class="kw1">FULL</span> <span class="sy0">OUTER</span> <span class="sy0">JOIN</span> Test1 t1
<span class="kw1">ON</span> t1.<span class="me1">id</span> <span class="sy0">=</span> t2.<span class="me1">id</span> </pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">SELECT t1.*,t2.*  FROM Test2 t2
FULL OUTER JOIN Test1 t1
ON t1.id = t2.id </pre></div></div>

<p></p>
<pre>id	id
1	1
2	2
3	3
4	4
NULL	6
5	NULL</pre>
<p>As you can see each column has one NULL for the row missing in the table.</p>
<p>Just as with LEFT and RIGHT JOINS, OUTER is optional, you can leave it out</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
</pre></td><td class="de1"><pre class="de1"><span class="kw1">SELECT</span> t1.<span class="sy0">*</span>,t2.<span class="sy0">*</span> &nbsp;<span class="kw1">FROM</span> Test2 t2
<span class="kw1">FULL</span> <span class="sy0">JOIN</span> Test1 t1
<span class="kw1">ON</span> t1.<span class="me1">id</span> <span class="sy0">=</span> t2.<span class="me1">id</span> </pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">SELECT t1.*,t2.*  FROM Test2 t2
FULL JOIN Test1 t1
ON t1.id = t2.id </pre></div></div>

<p>That is it for today&#8217;s post, come back tomorrow for OUTER and CROSS APPLY</p>
]]></content:encoded>
			<wfw:commentRss>/index.php/datamgmt/datadesign/sql-advent-2011-day-15/feed/</wfw:commentRss>
		<slash:comments>1</slash:comments>
		</item>
	</channel>
</rss>
