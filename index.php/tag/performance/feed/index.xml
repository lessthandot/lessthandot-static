<?xml version="1.0" encoding="UTF-8"?><rss version="2.0"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:atom="http://www.w3.org/2005/Atom"
	xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
	xmlns:slash="http://purl.org/rss/1.0/modules/slash/"
	>

<channel>
	<title>performance &#8211; LessthanDot</title>
	<atom:link href="/index.php/tag/performance/feed/" rel="self" type="application/rss+xml" />
	<link>/</link>
	<description>A Technical Community for IT Professionals</description>
	<lastBuildDate>Sat, 09 Mar 2019 12:50:36 +0000</lastBuildDate>
	<language>en-US</language>
	<sy:updatePeriod>hourly</sy:updatePeriod>
	<sy:updateFrequency>1</sy:updateFrequency>
	<generator>https://wordpress.org/?v=4.6.1</generator>
	<item>
		<title>A Custom Jasmine Runner to find my slowest Specs</title>
		<link>/index.php/webdev/a-custom-jasmine-runner-to-find-my-slowest-specs/</link>
		<comments>/index.php/webdev/a-custom-jasmine-runner-to-find-my-slowest-specs/#respond</comments>
		<pubDate>Wed, 21 Dec 2016 13:01:04 +0000</pubDate>
		<dc:creator><![CDATA[Eli Weinstock-Herman (tarwn)]]></dc:creator>
				<category><![CDATA[Web Developer]]></category>
		<category><![CDATA[jasmine]]></category>
		<category><![CDATA[performance]]></category>
		<category><![CDATA[phantomjs]]></category>

		<guid isPermaLink="false">/?p=4752</guid>
		<description><![CDATA[I&#8217;ve been playing around lately with a pure command-line Jasmine runner that doesn&#8217;t rely on a SpecRunner file to run tests. I work daily with a largish application that is well over 100K lines of front-end code and greater than 7000 front-end tests. Over time as the codebase and test count has grown, our Continuous [&#8230;]]]></description>
				<content:encoded><![CDATA[<p>I&#8217;ve been playing around lately with a pure command-line Jasmine runner that doesn&#8217;t rely on a SpecRunner file to run tests. I work daily with a largish application that is well over 100K lines of front-end code and greater than 7000 front-end tests. Over time as the codebase and test count has grown, our Continuous Integration environment has continued to get slower. While build servers like Jenkins and TeamCity provide some analytics around slow tests, there is still some digging involved to identify the best targets for improvement, something I&#8217;m hoping a local runner can make easier.</p>
<p>Sample code for this post: <a href="https://github.com/tarwn/townthing/blob/master/tools/jasmine2-runner/jasmine2-runner.js">tools/jasmine2-runner/jasmine2-runner.js</a> (embedded in a sample project named &#8220;townthing&#8221;).</p>
<p>I&#8217;ve taken a very small project I&#8217;ve used in prior posts on <a href="/index.php/webdev/uidevelopment/javascript/continuous-javascript-testing-with-karma/" title="Continuous Javascript Testing with Karma ">Karma</a> and <a href="/index.php/webdev/continuous-javascript-test-execution-with-wallabyjs/" title="Continuous Javascript Test Execution with WallabyJS">WallabyJS</a> and written a reusable Jasmine console runner, relying on Phantom 2, that creates a set of statistics as it runs and tries to identify the slowest set of tests in the set without pushing it to a remote server.</p>
<h2>What are my slowest tests?</h2>
<p>My test project is small enough that I won&#8217;t learn that much new, but it&#8217;s big enough to serve as an example.</p>
<p>I have Phantom installed locally and in my path, so to run the tests I can do this:</p>
<p><code>phantomjs.exe .\tools\jasmine2-runner\jasmine2-runner.js "['../test/compass.spec', '../test/tile.spec', '../test/tree.spec', '../test/weather.spec']"</code></p>
<p>The sample code uses requirejs, so I&#8217;m passing in an array of specs that will be used in a define statement prior to running jasmine.</p>
<p>The results from running this look like:</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="text"><thead><tr><td colspan="2"  class="head">Text</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
</pre></td><td class="de1"><pre class="de1">jasmine started
suiteDone [0.003s,10/10] : compass
suiteDone [0.175s,19/19] : tile
suiteDone [0.003s,8/8] : tree
suiteDone [0.007s,31/31] : weather
68/68 specs in 0.203s
-----------------------------------------------------------------
68 tests passed in 0.186s
Average Time: 0.003s
Standard Deviation: 0.004s
28% (19) of the tests account for 90% of the overall time.
15% (10) of the tests account for 50% of the overall time.
-----------------------------------------------------------------
Slowest Tests:
&nbsp;[ &nbsp; &nbsp;0.014s]: tile -&gt; getEvaporationAmount -&gt; should be 0 if there are no trees and the terrain doesn't have dry evaporation
&nbsp;[ &nbsp; &nbsp;0.010s]: tile -&gt; getEvaporationAmount -&gt; should be the terrain's evaporation if there are no trees
&nbsp;[ &nbsp; &nbsp;0.010s]: tile -&gt; canSupportAdditionalTrees -&gt; should support additional trees if there is enough average rainfall for grass, existing trees, and a new tree
&nbsp;[ &nbsp; &nbsp;0.009s]: tile -&gt; onGrow -&gt; should provide full amount of water to trees if available after watering the terrain
&nbsp;[ &nbsp; &nbsp;0.009s]: tile -&gt; canSupportDryGrass -&gt; should be able to support dry grass when there is enough averageRainfall available
&nbsp;[ &nbsp; &nbsp;0.009s]: tile -&gt; canSupportGrass -&gt; should be able to support grass when there is enough averageRainfall available
&nbsp;[ &nbsp; &nbsp;0.009s]: tile -&gt; getPlantConsumptionAmount -&gt; should be 0 when the terrain doesn't require any water and there are no trees
&nbsp;[ &nbsp; &nbsp;0.009s]: tile -&gt; canSupportAdditionalTrees -&gt; should not support a tree if there is not enough average rainfall for grass and new tree
&nbsp;[ &nbsp; &nbsp;0.009s]: tile -&gt; onGrow -&gt; should evenly split remainder of water if there is not enough left after watering the terrain</pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">jasmine started
suiteDone [0.003s,10/10] : compass
suiteDone [0.175s,19/19] : tile
suiteDone [0.003s,8/8] : tree
suiteDone [0.007s,31/31] : weather
68/68 specs in 0.203s
-----------------------------------------------------------------
68 tests passed in 0.186s
Average Time: 0.003s
Standard Deviation: 0.004s
28% (19) of the tests account for 90% of the overall time.
15% (10) of the tests account for 50% of the overall time.
-----------------------------------------------------------------
Slowest Tests:
 [    0.014s]: tile -&gt; getEvaporationAmount -&gt; should be 0 if there are no trees and the terrain doesn't have dry evaporation
 [    0.010s]: tile -&gt; getEvaporationAmount -&gt; should be the terrain's evaporation if there are no trees
 [    0.010s]: tile -&gt; canSupportAdditionalTrees -&gt; should support additional trees if there is enough average rainfall for grass, existing trees, and a new tree
 [    0.009s]: tile -&gt; onGrow -&gt; should provide full amount of water to trees if available after watering the terrain
 [    0.009s]: tile -&gt; canSupportDryGrass -&gt; should be able to support dry grass when there is enough averageRainfall available
 [    0.009s]: tile -&gt; canSupportGrass -&gt; should be able to support grass when there is enough averageRainfall available
 [    0.009s]: tile -&gt; getPlantConsumptionAmount -&gt; should be 0 when the terrain doesn't require any water and there are no trees
 [    0.009s]: tile -&gt; canSupportAdditionalTrees -&gt; should not support a tree if there is not enough average rainfall for grass and new tree
 [    0.009s]: tile -&gt; onGrow -&gt; should evenly split remainder of water if there is not enough left after watering the terrain</pre></div></div>

<p>So from the top:</p>
<ul>
<li>I show the top suite names, so I have feedback on larger codebases</li>
<li>I get a X/Y specs in Z time overview, to help me see how long the test run took and how much was successful</li>
<li>Stats: general statistics on just the passing tests and the number of tests responsible for 50% and 90% of the runtime</li>
<li>Spec list: the tests responsible for 50% of the runtime, by runtime descending</li>
</ul>
<p>There are several things we learn from this run:</p>
<ul>
<li>A small number of tests (15%) account for half of the overall time (<a href="https://en.wikipedia.org/wiki/Pareto_principle">Pareto Principle<a/>) </li>
<li>All of those 15% belong to the same top-level suite</li>
<li>There is ~.017s between the total from the specs and the overall run time</li>
</ul>
<p>I don&#8217;t know if that ~0.017 is normal, but I&#8217;ve seen some fairly large numbers sneak our of other codebases where beforeEach logic was set at entirely too high a level, code was running outside the specs, and so on and in this case it&#8217;s low enough I wouldn&#8217;t focus on it. My first stop would be seeing what is going on with the tile class and suite, since that feels like more of a systematic issue across the whole suite than an individual test issue.</p>
<h2>How it works (and how to re-use it)</h2>
<p>This runner is not ready for drop-in use with another project, but it&#8217;s also not that far off. </p>
<p>In a nutshell, the script opens a Phantom page with minimal HTML and no URL. It then injects in jasmine, <a href="/index.php/webdev/uidevelopment/javascript/unit-testing-with-jasmine-2-0-and-require-js/" title="Unit Testing with Jasmine 2.0 and Require.JS">a jasmine bootloader for RequireJS</a>, a custom console runner, requireJS, a requireJS configuration, and then a script that require()&#8217;s the passed in spec list before running window.execute to run the tests. </p>
<p>The custom console runner takes care of capturing results from the tests and passes them back via the console log, which is captured in the outer phantom script for processing. The top-level suite output flows out as each suite is finished, but the stats wait until the full suite has run to minimize delays that show up if you interact with the console too heavily/frequently.</p>
<p>Here is that runner:</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="javascript"><thead><tr><td colspan="2"  class="head">Javascript</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
</pre></td><td class="de1"><pre class="de1"><span class="kw1">var</span> Runner <span class="sy0">=</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; execute<span class="sy0">:</span> <span class="kw1">function</span><span class="br0">&#40;</span>callback<span class="br0">&#41;</span><span class="br0">&#123;</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">var</span> page <span class="sy0">=</span> require<span class="br0">&#40;</span><span class="st0">'webpage'</span><span class="br0">&#41;</span>.<span class="me1">create</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; page.<span class="me1">onConsoleMessage</span> <span class="sy0">=</span> <span class="kw1">function</span><span class="br0">&#40;</span>msg<span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="co1">// … handle console output coming back from console worker</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span><span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; <span class="co1">// build some fake content instead of using a real file/URL</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">var</span> expectedContent <span class="sy0">=</span> <span class="st0">'&lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body&gt;&lt;/body&gt;&lt;/html&gt;'</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">var</span> expectedLocation <span class="sy0">=</span> <span class="st0">'file:///'</span> <span class="sy0">+</span> fs.<span class="me1">workingDirectory</span> <span class="sy0">+</span> <span class="st0">'/'</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; page.<span class="me1">setContent</span><span class="br0">&#40;</span>expectedContent<span class="sy0">,</span> expectedLocation<span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; <span class="co1">// standard files</span>
&nbsp; &nbsp; &nbsp; &nbsp; page.<span class="me1">injectJs</span><span class="br0">&#40;</span><span class="st0">'town/js/lib/jasmine-2.0.0/jasmine.js'</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; page.<span class="me1">injectJs</span><span class="br0">&#40;</span><span class="st0">'town/js/lib/jasmine-2.0.0/jasmine-html.js'</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; page.<span class="me1">injectJs</span><span class="br0">&#40;</span><span class="st0">'jasmine2-runner-boot.js'</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; <span class="co1">// inject reporter</span>
&nbsp; &nbsp; &nbsp; &nbsp; page.<span class="me1">injectJs</span><span class="br0">&#40;</span><span class="st0">'console_reporter.js'</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; page.<span class="me1">evaluate</span><span class="br0">&#40;</span><span class="kw1">function</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; jasmine.<span class="me1">addReporter</span><span class="br0">&#40;</span><span class="kw1">new</span> jasmineReporters.<span class="me1">ConsoleReporter</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; <span class="co1">// inject additional required files</span>
&nbsp; &nbsp; &nbsp; &nbsp; page.<span class="me1">injectJs</span><span class="br0">&#40;</span><span class="st0">'town/js/lib/require-2.1.11.js'</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; <span class="co1">// execute provided spec list</span>
&nbsp; &nbsp; &nbsp; &nbsp; page.<span class="me1">evaluate</span><span class="br0">&#40;</span><span class="kw1">function</span><span class="br0">&#40;</span>specs<span class="br0">&#41;</span><span class="br0">&#123;</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="co1">// project's requirejs config for tests</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; require.<span class="me1">config</span><span class="br0">&#40;</span><span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; baseUrl<span class="sy0">:</span> <span class="st0">&quot;town/js/src&quot;</span><span class="sy0">,</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; paths<span class="sy0">:</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="st0">&quot;knockout&quot;</span><span class="sy0">:</span> <span class="st0">&quot;../lib/knockout-3.0.0&quot;</span><span class="sy0">,</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="st0">&quot;Squire&quot;</span><span class="sy0">:</span> <span class="st0">&quot;../lib/Squire&quot;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; require<span class="br0">&#40;</span>specs<span class="sy0">,</span> <span class="kw1">function</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; window.<span class="me1">executeTests</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span><span class="sy0">,</span> files<span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; <span class="br0">&#125;</span>
<span class="br0">&#125;</span><span class="sy0">;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">var Runner = {
    execute: function(callback){

        var page = require('webpage').create();

        page.onConsoleMessage = function(msg) {
            // … handle console output coming back from console worker
        };

        // build some fake content instead of using a real file/URL
        var expectedContent = '&lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body&gt;&lt;/body&gt;&lt;/html&gt;';
        var expectedLocation = 'file:///' + fs.workingDirectory + '/';
        page.setContent(expectedContent, expectedLocation);

        // standard files
        page.injectJs('town/js/lib/jasmine-2.0.0/jasmine.js');
        page.injectJs('town/js/lib/jasmine-2.0.0/jasmine-html.js');
        page.injectJs('jasmine2-runner-boot.js');

        // inject reporter
        page.injectJs('console_reporter.js');
        page.evaluate(function(){
            jasmine.addReporter(new jasmineReporters.ConsoleReporter());
        });

        // inject additional required files
        page.injectJs('town/js/lib/require-2.1.11.js');

        // execute provided spec list
        page.evaluate(function(specs){

            // project's requirejs config for tests
            require.config({
                baseUrl: "town/js/src",
                paths: {
                    "knockout": "../lib/knockout-3.0.0",
                    "Squire": "../lib/Squire"
                }
            });

            require(specs, function(){
                window.executeTests();
            });

        }, files);
    }
};</pre></div></div>

<p>The statistics form the console runner are passed to a Processor class that flattens out the suite and spec hierarchy, sorts them by execution time, and then calculates the statistics we saw above.</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="javascript"><thead><tr><td colspan="2"  class="head">Javascript</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
</pre></td><td class="de1"><pre class="de1"><span class="kw1">var</span> StatsProcessor <span class="sy0">=</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; evaluate<span class="sy0">:</span> <span class="kw1">function</span><span class="br0">&#40;</span>rawStats<span class="br0">&#41;</span><span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">var</span> flatStats <span class="sy0">=</span> <span class="br0">&#91;</span><span class="br0">&#93;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">var</span> flatSuites <span class="sy0">=</span> <span class="br0">&#91;</span><span class="br0">&#93;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; StatsProcessor.<span class="me1">flattenSpecs</span><span class="br0">&#40;</span><span class="st0">&quot;&quot;</span><span class="sy0">,</span> rawStats<span class="sy0">,</span> flatStats<span class="sy0">,</span> flatSuites<span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">var</span> sortedFlatStats <span class="sy0">=</span> flatStats.<span class="me1">sort</span><span class="br0">&#40;</span><span class="kw1">function</span><span class="br0">&#40;</span>a<span class="sy0">,</span>b<span class="br0">&#41;</span><span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="co1">// sort descending by execution time</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">return</span> b.<span class="me1">executionTime</span> <span class="sy0">-</span> a.<span class="me1">executionTime</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">var</span> averages <span class="sy0">=</span> StatsProcessor.<span class="me1">getAverages</span><span class="br0">&#40;</span>flatStats<span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">if</span><span class="br0">&#40;</span>averages.<span class="me1">total</span> <span class="sy0">&gt;</span> <span class="nu0">0</span><span class="br0">&#41;</span><span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">var</span> fiftyPercentOfTotalIndex <span class="sy0">=</span> StatsProcessor.<span class="me1">getPercentOfTotalIndex</span><span class="br0">&#40;</span>sortedFlatStats<span class="sy0">,</span> averages<span class="sy0">,</span> <span class="nu0">0.50</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">var</span> ninetyPercentOfTotalIndex <span class="sy0">=</span> StatsProcessor.<span class="me1">getPercentOfTotalIndex</span><span class="br0">&#40;</span>sortedFlatStats<span class="sy0">,</span> averages<span class="sy0">,</span> <span class="nu0">0.90</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">return</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; averageExecutionTime<span class="sy0">:</span> averages.<span class="me1">average</span><span class="sy0">,</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; standardDeviation<span class="sy0">:</span> averages.<span class="me1">standardDeviation</span><span class="sy0">,</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; totalExecutionTime<span class="sy0">:</span> averages.<span class="me1">total</span><span class="sy0">,</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; totalCount<span class="sy0">:</span> sortedFlatStats.<span class="me1">length</span><span class="sy0">,</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; fiftyPercent<span class="sy0">:</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; numberOfTests<span class="sy0">:</span> fiftyPercentOfTotalIndex <span class="sy0">+</span> <span class="nu0">1</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span><span class="sy0">,</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ninetyPercent<span class="sy0">:</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; numberOfTests<span class="sy0">:</span> ninetyPercentOfTotalIndex <span class="sy0">+</span> <span class="nu0">1</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span><span class="sy0">,</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; specs<span class="sy0">:</span> sortedFlatStats &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">else</span><span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">return</span> <span class="nu0">0</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp; &nbsp; <span class="br0">&#125;</span><span class="sy0">,</span>
&nbsp;
&nbsp; &nbsp; flattenSpecs<span class="sy0">:</span> <span class="kw1">function</span><span class="br0">&#40;</span>description<span class="sy0">,</span> stats<span class="sy0">,</span> flatStats<span class="sy0">,</span> flatSuites<span class="br0">&#41;</span><span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="co1">// … work …</span>
&nbsp; &nbsp; <span class="br0">&#125;</span><span class="sy0">,</span>
&nbsp;
&nbsp; &nbsp; getAverages<span class="sy0">:</span> <span class="kw1">function</span><span class="br0">&#40;</span>flatStats<span class="br0">&#41;</span><span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="co1">// … calculate avg and stddev …</span>
&nbsp; &nbsp; <span class="br0">&#125;</span><span class="sy0">,</span>
&nbsp;
&nbsp; &nbsp; getPercentOfTotalIndex<span class="sy0">:</span> <span class="kw1">function</span><span class="br0">&#40;</span>sortedFlatStats<span class="sy0">,</span> averages<span class="sy0">,</span> percentage<span class="br0">&#41;</span><span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="co1">// … find tests that are responsiblce for _percentage_ of execution time …</span>
&nbsp; &nbsp; <span class="br0">&#125;</span>
<span class="br0">&#125;</span><span class="sy0">;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">var StatsProcessor = {
    evaluate: function(rawStats){
        var flatStats = [];
        var flatSuites = [];
        StatsProcessor.flattenSpecs("", rawStats, flatStats, flatSuites);
        var sortedFlatStats = flatStats.sort(function(a,b){
            // sort descending by execution time
            return b.executionTime - a.executionTime;
        });

        var averages = StatsProcessor.getAverages(flatStats);
        if(averages.total &gt; 0){
            var fiftyPercentOfTotalIndex = StatsProcessor.getPercentOfTotalIndex(sortedFlatStats, averages, 0.50);
            var ninetyPercentOfTotalIndex = StatsProcessor.getPercentOfTotalIndex(sortedFlatStats, averages, 0.90);

            return {
                averageExecutionTime: averages.average,
                standardDeviation: averages.standardDeviation,
                totalExecutionTime: averages.total,
                totalCount: sortedFlatStats.length,

                fiftyPercent: {
                    numberOfTests: fiftyPercentOfTotalIndex + 1
                },
                ninetyPercent: {
                    numberOfTests: ninetyPercentOfTotalIndex + 1
                },

                specs: sortedFlatStats          
            };
        }
        else{
            return 0;
        }
    },

    flattenSpecs: function(description, stats, flatStats, flatSuites){
        // … work …
    },

    getAverages: function(flatStats){
        // … calculate avg and stddev …
    },

    getPercentOfTotalIndex: function(sortedFlatStats, averages, percentage){
        // … find tests that are responsiblce for _percentage_ of execution time …
    }
};</pre></div></div>

<p>Finally, we glue the two together in a simple statement:</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="javascript"><thead><tr><td colspan="2"  class="head">Javascript</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
</pre></td><td class="de1"><pre class="de1">Runner.<span class="me1">execute</span><span class="br0">&#40;</span><span class="kw1">function</span><span class="br0">&#40;</span>result<span class="br0">&#41;</span><span class="br0">&#123;</span>
&nbsp; &nbsp; <span class="kw1">var</span> stats <span class="sy0">=</span> StatsProcessor.<span class="me1">evaluate</span><span class="br0">&#40;</span>result<span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; <span class="coMULTI">/* … display stats output … */</span>
&nbsp;
&nbsp; &nbsp; phantom.<span class="me1">exit</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
<span class="br0">&#125;</span><span class="br0">&#41;</span><span class="sy0">;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">Runner.execute(function(result){
    var stats = StatsProcessor.evaluate(result);

    /* … display stats output … */

    phantom.exit();
});</pre></div></div>

<p>Customizing this for other projects is relatively easy, and I&#8217;ll probably work on making it easier to reuse as a I have more time. Right now the main things you need to do are:</p>
<ul>
<li>Replace the jasmine paths with ones that make sense for your project</li>
<li>Replace the &#8220;inject additional required files&#8221; section with the additional dependencies you need</li>
<li>Update the &#8220;execute provided spec list&#8221; section to match how you run tests</li>
</ul>
<p>You will also want to download the runner, console-reporter, and jasmine bootloader from <a href="https://github.com/tarwn/townthing/tree/master/tools/jasmine2-runner" title="jasmine runner folder in github/tarwn/townthing">github</a>.</p>
<p>For instance, if you are using a basic SpecRunner.html file with the spec and source files listed in script tags, you could drop these in the &#8220;inject additional required files&#8221; section and replace the &#8220;execute provided spec list&#8221; with just a single call to &#8220;windows.executeTests()&#8221;.</p>
]]></content:encoded>
			<wfw:commentRss>/index.php/webdev/a-custom-jasmine-runner-to-find-my-slowest-specs/feed/</wfw:commentRss>
		<slash:comments>0</slash:comments>
		</item>
		<item>
		<title>Solving a slow running query issue with UNION</title>
		<link>/index.php/datamgmt/dbprogramming/mssqlserver/solving-a-slow-running-query-issue-with-union/</link>
		<comments>/index.php/datamgmt/dbprogramming/mssqlserver/solving-a-slow-running-query-issue-with-union/#comments</comments>
		<pubDate>Wed, 25 Feb 2015 11:38:03 +0000</pubDate>
		<dc:creator><![CDATA[Koen Verbeeck]]></dc:creator>
				<category><![CDATA[Microsoft SQL Server]]></category>
		<category><![CDATA[performance]]></category>
		<category><![CDATA[sql]]></category>
		<category><![CDATA[sql server]]></category>
		<category><![CDATA[syndicated]]></category>
		<category><![CDATA[t-sql]]></category>

		<guid isPermaLink="false">/?p=3253</guid>
		<description><![CDATA[That&#8217;s right! I will solve a performance issue by adding a UNION into the query. Interested? Read on! I recently encountered a curious issue with a query. The query itself wasn’t exactly rocket science: it read data from a few tables and calculated the start and the end dates of a contract in the SELECT [&#8230;]]]></description>
				<content:encoded><![CDATA[<p>That&#8217;s right! I will solve a performance issue by adding a UNION into the query. Interested? Read on!</p>
<p>I recently encountered a curious issue with a query. The query itself wasn’t exactly rocket science: it read data from a few tables and calculated the start and the end dates of a contract in the SELECT statement. In an outer query there’s a range join with a date dimension to explode the data over the different months. Let me explain that last part. Suppose we have a contract with ID 5 that is valid between January 2015 and March 2015. The range join with the date dimension would thus return 3 rows:</p>
<p><a href="/wp-content/uploads/2015/02/Exploding.png"><img class="alignnone size-full wp-image-3257" src="/wp-content/uploads/2015/02/Exploding.png" alt="Exploding" width="187" height="97" /></a></p>
<p>The query looked something like this:</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
</pre></td><td class="de1"><pre class="de1"><span class="kw1">WITH</span> CTE_Contracts <span class="kw1">AS</span>
<span class="br0">&#40;</span>
&nbsp; &nbsp; <span class="kw1">SELECT</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;c.<span class="me1">ContractID</span>
&nbsp; &nbsp; &nbsp; &nbsp; ,ContractFrom &nbsp; <span class="sy0">=</span> IIF<span class="br0">&#40;</span> ... <span class="me1">some</span> <span class="kw1">date</span> logic<span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; ,ContractTo &nbsp; &nbsp; <span class="sy0">=</span> IIF<span class="br0">&#40;</span> ... <span class="me1">some</span> <span class="kw1">date</span> logic<span class="br0">&#41;</span>
&nbsp; &nbsp; <span class="kw1">FROM</span> contracts&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; c
&nbsp; &nbsp; <span class="sy0">JOIN</span> contractsdetail&nbsp; &nbsp; cd <span class="kw1">ON</span> c.<span class="me1">ContractID</span> <span class="sy0">=</span> cd.<span class="me1">ContractID</span>
<span class="br0">&#41;</span>
<span class="kw1">SELECT</span>
&nbsp; &nbsp; &nbsp;ContractID
&nbsp; &nbsp; ,ContractMonth <span class="sy0">=</span> d.<span class="br0">&#91;</span><span class="kw1">Month</span><span class="br0">&#93;</span>
<span class="kw1">FROM</span> CTE_Contracts&nbsp; c
<span class="sy0">JOIN</span> dateDim&nbsp; &nbsp; &nbsp; &nbsp; d <span class="kw1">ON</span>&nbsp; &nbsp; d.<span class="br0">&#91;</span><span class="kw1">Date</span><span class="br0">&#93;</span>&nbsp; &nbsp; <span class="sy0">BETWEEN</span> c.<span class="me1">ContractFrom</span> <span class="sy0">AND</span> c.<span class="me1">ContractTo</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="sy0">AND</span> d.<span class="br0">&#91;</span><span class="kw1">Day</span><span class="br0">&#93;</span> &nbsp; &nbsp; <span class="sy0">=</span> <span class="nu0">1</span>; <span class="co1">-- only get the first of the month </span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">WITH CTE_Contracts AS
(
	SELECT
		 c.ContractID
		,ContractFrom	= IIF( ... some date logic)
		,ContractTo		= IIF( ... some date logic)
	FROM contracts			c
	JOIN contractsdetail	cd ON c.ContractID = cd.ContractID
)
SELECT
	 ContractID
	,ContractMonth = d.[Month]
FROM CTE_Contracts	c
JOIN dateDim		d ON	d.[Date]	BETWEEN c.ContractFrom AND c.ContractTo
						AND	d.[Day]		= 1; -- only get the first of the month </pre></div></div>

<p>The query is a bit more complex, but you get the idea. On the test server, the query took 1 minute and 24 seconds to return about 90,000 rows. That’s a tad slow if you ask me. I didn’t see anything wrong with the query (and indexes wouldn’t help), so I just blamed it on the server and on the standard edition of SQL Server. That was until I came across a very similar query. That query did about the same thing, but it also fetched data from another table and appended it to the first result set with a UNION. Something like this:</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
</pre></td><td class="de1"><pre class="de1"><span class="kw1">WITH</span> CTE_Contracts <span class="kw1">AS</span>
<span class="br0">&#40;</span>
&nbsp; &nbsp; <span class="kw1">SELECT</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;c.<span class="me1">ContractID</span>
&nbsp; &nbsp; &nbsp; &nbsp; ,ContractFrom &nbsp; <span class="sy0">=</span> IIF<span class="br0">&#40;</span> ... <span class="me1">some</span> <span class="kw1">date</span> logic<span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; ,ContractTo &nbsp; &nbsp; <span class="sy0">=</span> IIF<span class="br0">&#40;</span> ... <span class="me1">some</span> <span class="kw1">date</span> logic<span class="br0">&#41;</span>
&nbsp; &nbsp; <span class="kw1">FROM</span> contracts&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; c
&nbsp; &nbsp; <span class="sy0">JOIN</span> contractsdetail&nbsp; &nbsp; cd <span class="kw1">ON</span> c.<span class="me1">ContractID</span> <span class="sy0">=</span> cd.<span class="me1">ContractID</span>
&nbsp; &nbsp; <span class="kw1">UNION</span>
&nbsp; &nbsp; <span class="kw1">SELECT</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;c.<span class="me1">ContractID</span>
&nbsp; &nbsp; &nbsp; &nbsp; ,ContractFrom &nbsp; <span class="sy0">=</span> IIF<span class="br0">&#40;</span> ... <span class="me1">some</span> <span class="kw1">date</span> logic<span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; ,ContractTo &nbsp; &nbsp; <span class="sy0">=</span> IIF<span class="br0">&#40;</span> ... <span class="me1">some</span> <span class="kw1">date</span> logic<span class="br0">&#41;</span>
&nbsp; &nbsp; <span class="kw1">FROM</span> contractsextra &nbsp; &nbsp; c
&nbsp; &nbsp; <span class="sy0">JOIN</span> contractsdetail&nbsp; &nbsp; cd <span class="kw1">ON</span> c.<span class="me1">ContractID</span> <span class="sy0">=</span> cd.<span class="me1">ContractID</span>
<span class="br0">&#41;</span>
<span class="kw1">SELECT</span>
&nbsp; &nbsp; &nbsp;ContractID
&nbsp; &nbsp; ,ContractMonth <span class="sy0">=</span> d.<span class="br0">&#91;</span><span class="kw1">Month</span><span class="br0">&#93;</span>
<span class="kw1">FROM</span> CTE_Contracts&nbsp; c
<span class="sy0">JOIN</span> dateDim&nbsp; &nbsp; &nbsp; &nbsp; d <span class="kw1">ON</span>&nbsp; &nbsp; d.<span class="br0">&#91;</span><span class="kw1">Date</span><span class="br0">&#93;</span>&nbsp; &nbsp; <span class="sy0">BETWEEN</span> c.<span class="me1">ContractFrom</span> <span class="sy0">AND</span> c.<span class="me1">ContractTo</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="sy0">AND</span> d.<span class="br0">&#91;</span><span class="kw1">Day</span><span class="br0">&#93;</span> &nbsp; &nbsp; <span class="sy0">=</span> <span class="nu0">1</span>; <span class="co1">-- only get the first of the month</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">WITH CTE_Contracts AS
(
	SELECT
		 c.ContractID
		,ContractFrom	= IIF( ... some date logic)
		,ContractTo		= IIF( ... some date logic)
	FROM contracts			c
	JOIN contractsdetail	cd ON c.ContractID = cd.ContractID
	UNION
	SELECT
		 c.ContractID
		,ContractFrom	= IIF( ... some date logic)
		,ContractTo		= IIF( ... some date logic)
	FROM contractsextra		c
	JOIN contractsdetail	cd ON c.ContractID = cd.ContractID
)
SELECT
	 ContractID
	,ContractMonth = d.[Month]
FROM CTE_Contracts	c
JOIN dateDim		d ON	d.[Date]	BETWEEN c.ContractFrom AND c.ContractTo
						AND	d.[Day]		= 1; -- only get the first of the month</pre></div></div>

<p>Now this query returned about 120,000 rows in 6 seconds. What? More rows in less time? How’s that possible? Time to take a look at the execution plans. The execution plan of the second query:</p>
<p><a href="/wp-content/uploads/2015/02/executionplan_1.png"><img class="alignnone size-full wp-image-3258" src="/wp-content/uploads/2015/02/executionplan_1.png" alt="executionplan_1" width="852" height="511" srcset="/wp-content/uploads/2015/02/executionplan_1.png 852w, /wp-content/uploads/2015/02/executionplan_1-300x179.png 300w" sizes="(max-width: 852px) 100vw, 852px" /></a></p>
<p>You can clearly see the two paths of the union being merged with the hash match after which the results are joined to the date dimension using the nested loops.</p>
<p>The execution plan of the first query is a bit different:</p>
<p><a href="/wp-content/uploads/2015/02/executionplan_2.png"><img class="alignnone size-full wp-image-3255" src="/wp-content/uploads/2015/02/executionplan_2.png" alt="executionplan_2" width="1013" height="340" srcset="/wp-content/uploads/2015/02/executionplan_2.png 1013w, /wp-content/uploads/2015/02/executionplan_2-300x100.png 300w" sizes="(max-width: 1013px) 100vw, 1013px" /></a></p>
<p>The nested loops now gives a warning that there is no join predicate. This results in about 5 million rows, which are filtered later on with the Filter operator to the desired 90,000 rows. A bit of unnecessary overhead it seems. So the execution plan of the first query is a bit silly, since it calculates the date columns for the inner select after the join (in the Compute Scalar operator between the Filter and the Nested Loops). In the second query, these columns are calculated before the join and so the Nested Loops can use them as join predicates.</p>
<p>The question is why does SQL Server change behavior? Well, the second query has a UNION operator in the inner query. This means that SQL Server has to compare the two result sets which each other, so the date columns have to be calculated directly in the inner query. Knowing this, we can easily optimize the first query by adding a “dummy UNION”:</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
</pre></td><td class="de1"><pre class="de1"><span class="kw1">WITH</span> CTE_Contracts <span class="kw1">AS</span>
<span class="br0">&#40;</span>
&nbsp; &nbsp; <span class="kw1">SELECT</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;c.<span class="me1">ContractID</span>
&nbsp; &nbsp; &nbsp; &nbsp; ,ContractFrom &nbsp; <span class="sy0">=</span> IIF<span class="br0">&#40;</span> ... <span class="me1">some</span> <span class="kw1">date</span> logic<span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; ,ContractTo &nbsp; &nbsp; <span class="sy0">=</span> IIF<span class="br0">&#40;</span> ... <span class="me1">some</span> <span class="kw1">date</span> logic<span class="br0">&#41;</span>
&nbsp; &nbsp; <span class="kw1">FROM</span> contracts&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; c
&nbsp; &nbsp; <span class="sy0">JOIN</span> contractsdetail&nbsp; &nbsp; cd <span class="kw1">ON</span> c.<span class="me1">ContractID</span> <span class="sy0">=</span> cd.<span class="me1">ContractID</span>
&nbsp; &nbsp; <span class="kw1">UNION</span>
&nbsp; &nbsp; <span class="kw1">SELECT</span> <span class="sy0">NULL</span>, <span class="sy0">NULL</span>, <span class="sy0">NULL</span>, <span class="sy0">NULL</span> <span class="co1">-- just to enforce performance</span>
<span class="br0">&#41;</span>
<span class="kw1">SELECT</span>
&nbsp; &nbsp; &nbsp;ContractID
&nbsp; &nbsp; ,ContractMonth <span class="sy0">=</span> d.<span class="br0">&#91;</span><span class="kw1">Month</span><span class="br0">&#93;</span>
<span class="kw1">FROM</span> CTE_Contracts&nbsp; c
<span class="sy0">JOIN</span> dateDim&nbsp; &nbsp; &nbsp; &nbsp; d <span class="kw1">ON</span>&nbsp; &nbsp; d.<span class="br0">&#91;</span><span class="kw1">Date</span><span class="br0">&#93;</span>&nbsp; &nbsp; <span class="sy0">BETWEEN</span> c.<span class="me1">ContractFrom</span> <span class="sy0">AND</span> c.<span class="me1">ContractTo</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="sy0">AND</span> d.<span class="br0">&#91;</span><span class="kw1">Day</span><span class="br0">&#93;</span> &nbsp; &nbsp; <span class="sy0">=</span> <span class="nu0">1</span>; <span class="co1">-- only get the first of the month </span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">WITH CTE_Contracts AS
(
	SELECT
		 c.ContractID
		,ContractFrom	= IIF( ... some date logic)
		,ContractTo		= IIF( ... some date logic)
	FROM contracts			c
	JOIN contractsdetail	cd ON c.ContractID = cd.ContractID
	UNION
	SELECT NULL, NULL, NULL, NULL -- just to enforce performance
)
SELECT
	 ContractID
	,ContractMonth = d.[Month]
FROM CTE_Contracts	c
JOIN dateDim		d ON	d.[Date]	BETWEEN c.ContractFrom AND c.ContractTo
						AND	d.[Day]		= 1; -- only get the first of the month </pre></div></div>

<p>This extra row with all NULL values will be filtered out by the INNER JOIN with the date dimension. Now the query runs in 3 seconds!</p>
<p><a href="/wp-content/uploads/2015/02/executionplan_3.png"><img class="alignnone size-full wp-image-3256" src="/wp-content/uploads/2015/02/executionplan_3.png" alt="executionplan_3" width="769" height="168" srcset="/wp-content/uploads/2015/02/executionplan_3.png 769w, /wp-content/uploads/2015/02/executionplan_3-300x65.png 300w" sizes="(max-width: 769px) 100vw, 769px" /></a></p>
]]></content:encoded>
			<wfw:commentRss>/index.php/datamgmt/dbprogramming/mssqlserver/solving-a-slow-running-query-issue-with-union/feed/</wfw:commentRss>
		<slash:comments>11</slash:comments>
		</item>
		<item>
		<title>SSIS Performance Testing</title>
		<link>/index.php/datamgmt/ssis/ssis-performance-testing/</link>
		<comments>/index.php/datamgmt/ssis/ssis-performance-testing/#comments</comments>
		<pubDate>Tue, 08 Apr 2014 07:54:01 +0000</pubDate>
		<dc:creator><![CDATA[Koen Verbeeck]]></dc:creator>
				<category><![CDATA[SSIS]]></category>
		<category><![CDATA[integration services]]></category>
		<category><![CDATA[performance]]></category>
		<category><![CDATA[ssis]]></category>
		<category><![CDATA[syndicated]]></category>
		<category><![CDATA[testing]]></category>
		<category><![CDATA[tuning]]></category>

		<guid isPermaLink="false">/?p=2549</guid>
		<description><![CDATA[I had to do some performance testing for an upcoming MSSQLTips article and I thought I’d share the framework I used in a blog post. First of all we have to log start and end dates of the package to a table so we can easily calculate the duration a package took to finish. This [&#8230;]]]></description>
				<content:encoded><![CDATA[<p>I had to do some performance testing for an upcoming <a href="http://www.mssqltips.com/">MSSQLTips</a> article and I thought I’d share the framework I used in a blog post.</p>
<p>First of all we have to log start and end dates of the package to a table so we can easily calculate the duration a package took to finish. This can probably be calculated from the SSIS catalog as well, but I was a bit too <del>busy</del> lazy to find out how to do this. Anyway, the logging table is created using the following statement:</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
</pre></td><td class="de1"><pre class="de1"><span class="kw1">IF</span> <span class="sy0">NOT</span> <span class="sy0">EXISTS</span> <span class="br0">&#40;</span><span class="kw1">SELECT</span> <span class="sy0">*</span> <span class="kw1">FROM</span> sys.<span class="me1">objects</span> <span class="kw1">WHERE</span> <span class="kw2">object_id</span> <span class="sy0">=</span> <span class="kw2">OBJECT_ID</span><span class="br0">&#40;</span>N<span class="st0">'[dbo].[PackageLogging]'</span><span class="br0">&#41;</span> <span class="sy0">AND</span> type in <span class="br0">&#40;</span>N<span class="st0">'U'</span><span class="br0">&#41;</span><span class="br0">&#41;</span>
<span class="kw1">BEGIN</span>
&nbsp; &nbsp; <span class="kw1">CREATE</span> <span class="kw1">TABLE</span> <span class="br0">&#91;</span>dbo<span class="br0">&#93;</span>.<span class="br0">&#91;</span>PackageLogging<span class="br0">&#93;</span><span class="br0">&#40;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#91;</span>ID<span class="br0">&#93;</span> <span class="br0">&#91;</span><span class="kw1">int</span><span class="br0">&#93;</span> <span class="kw1">IDENTITY</span><span class="br0">&#40;</span><span class="nu0">1</span>,<span class="nu0">1</span><span class="br0">&#41;</span> <span class="sy0">NOT</span> <span class="sy0">NULL</span>,
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#91;</span>RunID<span class="br0">&#93;</span> <span class="br0">&#91;</span><span class="kw1">int</span><span class="br0">&#93;</span> <span class="sy0">NOT</span> <span class="sy0">NULL</span>,
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#91;</span>PackageName<span class="br0">&#93;</span> <span class="br0">&#91;</span><span class="kw1">varchar</span><span class="br0">&#93;</span><span class="br0">&#40;</span><span class="nu0">50</span><span class="br0">&#41;</span> <span class="sy0">NOT</span> <span class="sy0">NULL</span>,
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#91;</span>StartDate<span class="br0">&#93;</span> <span class="br0">&#91;</span>datetime2<span class="br0">&#93;</span><span class="br0">&#40;</span><span class="nu0">7</span><span class="br0">&#41;</span> <span class="sy0">NOT</span> <span class="sy0">NULL</span>,
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#91;</span>EndDate<span class="br0">&#93;</span> <span class="br0">&#91;</span>datetime2<span class="br0">&#93;</span><span class="br0">&#40;</span><span class="nu0">7</span><span class="br0">&#41;</span> <span class="sy0">NULL</span>
&nbsp; &nbsp; <span class="br0">&#41;</span>;
<span class="kw1">END</span>
GO</pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[PackageLogging]') AND type in (N'U'))
BEGIN
	CREATE TABLE [dbo].[PackageLogging](
		[ID] [int] IDENTITY(1,1) NOT NULL,
		[RunID] [int] NOT NULL,
		[PackageName] [varchar](50) NOT NULL,
		[StartDate] [datetime2](7) NOT NULL,
		[EndDate] [datetime2](7) NULL
	);
END
GO</pre></div></div>

<p>The RunID column is populated by a package parameter; I will come back to this later on.</p>
<p><a href="/wp-content/uploads/2014/04/TestSSISPerf_parameter.png"><img class="alignnone size-full wp-image-2558" alt="TestSSISPerf_parameter" src="/wp-content/uploads/2014/04/TestSSISPerf_parameter.png" width="559" height="115" srcset="/wp-content/uploads/2014/04/TestSSISPerf_parameter.png 559w, /wp-content/uploads/2014/04/TestSSISPerf_parameter-300x61.png 300w" sizes="(max-width: 559px) 100vw, 559px" /></a></p>
<p>The package starts with an Execute SQL Task to log the start. I use the following SSIS expression to construct the SQL statement on the fly, allowing you to easy copy-paste the logging task between packages.</p>
<blockquote><p>&#8220;INSERT INTO dbo.PackageLogging(RunID, PackageName,StartDate) VALUES (&#8221; +  (DT_STR,10,1252)@[$Package::RunID] + &#8220;,'&#8221; +  @[System::PackageName] + &#8220;&#8216;,SYSDATETIME());&#8221;</p></blockquote>
<p>At the end of the control flow, there is an Execute SQL Task that updates the EndDate of the previously inserted row. The expression looks like this:</p>
<blockquote><p>&#8220;UPDATE dbo.PackageLogging SET [EndDate] = SYSDATETIME() WHERE RunID = &#8221; + (DT_STR,10,1252)  @[$Package::RunID] + &#8221; AND PackageName = &#8216;&#8221; +  @[System::PackageName] + &#8220;&#8216;;&#8221;</p></blockquote>
<p>The RunID parameter is important to link those two Execute SQL Tasks together. A typical control flow looks like this:</p>
<p><a href="/wp-content/uploads/2014/04/TestSSISPerf_controllflow.png"><img class="alignnone  wp-image-2560" alt="TestSSISPerf_controllflow" src="/wp-content/uploads/2014/04/TestSSISPerf_controllflow.png" width="286" height="329" srcset="/wp-content/uploads/2014/04/TestSSISPerf_controllflow.png 358w, /wp-content/uploads/2014/04/TestSSISPerf_controllflow-261x300.png 261w" sizes="(max-width: 286px) 100vw, 286px" /></a></p>
<p>Logging is the first step, now we have to run the package of course. I created a stored procedure that allows me to easily start a package in the SSIS catalog.</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
</pre></td><td class="de1"><pre class="de1"><span class="kw1">CREATE</span> <span class="kw1">PROC</span> <span class="br0">&#91;</span>dbo<span class="br0">&#93;</span>.<span class="br0">&#91;</span>RunPackage<span class="br0">&#93;</span>
&nbsp; &nbsp; <span class="br0">&#40;</span>@RunID &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">INT</span>
&nbsp; &nbsp; ,@PackageName &nbsp; <span class="kw1">VARCHAR</span><span class="br0">&#40;</span><span class="nu0">50</span><span class="br0">&#41;</span>
&nbsp; &nbsp; ,@FolderName&nbsp; &nbsp; <span class="kw1">VARCHAR</span><span class="br0">&#40;</span><span class="nu0">50</span><span class="br0">&#41;</span>
&nbsp; &nbsp; ,@ProjectName &nbsp; <span class="kw1">VARCHAR</span><span class="br0">&#40;</span><span class="nu0">50</span><span class="br0">&#41;</span>
&nbsp; &nbsp; ,@Synchronized&nbsp; <span class="kw1">BIT</span> <span class="sy0">=</span> <span class="nu0">1</span> <span class="co1">-- run synchronously by default</span>
&nbsp; &nbsp; <span class="br0">&#41;</span>
<span class="kw1">AS</span>
<span class="kw1">DECLARE</span> @execution_id <span class="kw1">BIGINT</span>;
&nbsp;
<span class="kw1">EXEC</span> <span class="br0">&#91;</span>SSISDB<span class="br0">&#93;</span>.<span class="br0">&#91;</span><span class="kw1">catalog</span><span class="br0">&#93;</span>.<span class="br0">&#91;</span>create_execution<span class="br0">&#93;</span>
&nbsp; &nbsp; &nbsp;@package_name&nbsp; &nbsp; &nbsp; <span class="sy0">=</span> @PackageName
&nbsp; &nbsp; ,@execution_id&nbsp; &nbsp; &nbsp; <span class="sy0">=</span> @execution_id <span class="kw1">OUTPUT</span>
&nbsp; &nbsp; ,@folder_name &nbsp; &nbsp; &nbsp; <span class="sy0">=</span> @FolderName
&nbsp; &nbsp; ,@project_name&nbsp; &nbsp; &nbsp; <span class="sy0">=</span> @ProjectName
&nbsp; &nbsp; ,@use32bitruntime &nbsp; <span class="sy0">=</span> <span class="kw1">False</span>
&nbsp; &nbsp; ,@reference_id&nbsp; &nbsp; &nbsp; <span class="sy0">=</span> <span class="sy0">NULL</span>;
&nbsp;
<span class="co1">--SELECT @execution_id;</span>
&nbsp;
<span class="kw1">EXEC</span> <span class="br0">&#91;</span>SSISDB<span class="br0">&#93;</span>.<span class="br0">&#91;</span><span class="kw1">catalog</span><span class="br0">&#93;</span>.<span class="br0">&#91;</span>set_execution_parameter_value<span class="br0">&#93;</span>
&nbsp; &nbsp; &nbsp;@execution_id
&nbsp; &nbsp; ,@object_type &nbsp; &nbsp; &nbsp; <span class="sy0">=</span> <span class="nu0">30</span>
&nbsp; &nbsp; ,@parameter_name&nbsp; &nbsp; <span class="sy0">=</span> N<span class="st0">'RunID'</span>
&nbsp; &nbsp; ,@parameter_value &nbsp; <span class="sy0">=</span> @RunID;
&nbsp;
<span class="kw1">EXEC</span> <span class="br0">&#91;</span>SSISDB<span class="br0">&#93;</span>.<span class="br0">&#91;</span><span class="kw1">catalog</span><span class="br0">&#93;</span>.<span class="br0">&#91;</span>set_execution_parameter_value<span class="br0">&#93;</span>
&nbsp; &nbsp; &nbsp;@execution_id
&nbsp; &nbsp; ,@object_type &nbsp; &nbsp; &nbsp; <span class="sy0">=</span> <span class="nu0">50</span>
&nbsp; &nbsp; ,@parameter_name&nbsp; &nbsp; <span class="sy0">=</span> N<span class="st0">'SYNCHRONIZED'</span>
&nbsp; &nbsp; ,@parameter_value &nbsp; <span class="sy0">=</span> @Synchronized;
&nbsp;
<span class="kw1">EXEC</span> <span class="br0">&#91;</span>SSISDB<span class="br0">&#93;</span>.<span class="br0">&#91;</span><span class="kw1">catalog</span><span class="br0">&#93;</span>.<span class="br0">&#91;</span>start_execution<span class="br0">&#93;</span> @execution_id;
&nbsp;
GO</pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">CREATE PROC [dbo].[RunPackage]
	(@RunID			INT
	,@PackageName	VARCHAR(50)
	,@FolderName	VARCHAR(50)
	,@ProjectName	VARCHAR(50)
	,@Synchronized	BIT = 1 -- run synchronously by default
	)
AS
DECLARE @execution_id BIGINT;

EXEC [SSISDB].[catalog].[create_execution]
	 @package_name		= @PackageName
	,@execution_id		= @execution_id OUTPUT
	,@folder_name		= @FolderName
	,@project_name		= @ProjectName
	,@use32bitruntime	= False
	,@reference_id		= NULL;

--SELECT @execution_id;

EXEC [SSISDB].[catalog].[set_execution_parameter_value]
	 @execution_id
	,@object_type		= 30
	,@parameter_name	= N'RunID'
	,@parameter_value	= @RunID;

EXEC [SSISDB].[catalog].[set_execution_parameter_value]
	 @execution_id
	,@object_type		= 50
	,@parameter_name	= N'SYNCHRONIZED'
	,@parameter_value	= @Synchronized;

EXEC [SSISDB].[catalog].[start_execution] @execution_id;

GO</pre></div></div>

<p>The proc passes the @RunID parameter to the package, as well as other usual suspects, such as the package name, folder name and project name. You can also choose if a package is run synchronously or asynchronously. When run synchronously, the stored procedure doesn’t finish until the package is finished as well.</p>
<p>Using this stored procedure, it is easy to run a package multiple times in a row using a WHILE loop.</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
</pre></td><td class="de1"><pre class="de1"><span class="kw1">DECLARE</span> @RunID <span class="kw1">INT</span> <span class="sy0">=</span> <span class="nu0">1</span>;
&nbsp;
<span class="kw1">WHILE</span> <span class="br0">&#40;</span>@RunID <span class="sy0">&lt;=</span> <span class="nu0">10</span><span class="br0">&#41;</span>
<span class="kw1">BEGIN</span>
&nbsp; &nbsp; <span class="kw1">EXEC</span> dbo.<span class="me1">RunPackage</span> @RunID, <span class="st0">'myPackage.dtsx'</span>, <span class="st0">'myFolder'</span>, <span class="st0">'myProject'</span>, <span class="nu0">1</span>;
&nbsp; &nbsp; <span class="kw1">SET</span> @RunID <span class="sy0">+=</span> <span class="nu0">1</span>;
<span class="kw1">END</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">DECLARE @RunID INT = 1;

WHILE (@RunID &lt;= 10)
BEGIN
	EXEC dbo.RunPackage @RunID, 'myPackage.dtsx', 'myFolder', 'myProject', 1;
	SET @RunID += 1;
END</pre></div></div>

<p>The package is run synchronously, so that multiple instances do not run at the same time. This eliminates resource contention and gives us a clearer result of the performance of the individual package.</p>
<p>Using the following query, it is easy to build a nice chart in SSRS:</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
</pre></td><td class="de1"><pre class="de1"><span class="kw1">SELECT</span>
&nbsp; &nbsp; &nbsp;<span class="br0">&#91;</span>RunID<span class="br0">&#93;</span>
&nbsp; &nbsp; ,<span class="br0">&#91;</span>PackageName<span class="br0">&#93;</span>
&nbsp; &nbsp; ,<span class="br0">&#91;</span>Duration<span class="br0">&#93;</span> <span class="sy0">=</span> <span class="kw2">DATEDIFF</span><span class="br0">&#40;</span>MILLISECOND,StartDate,EndDate<span class="br0">&#41;</span> <span class="sy0">/</span> <span class="nu0">1000.0</span>
&nbsp; &nbsp; ,<span class="br0">&#91;</span>Mean<span class="br0">&#93;</span> <span class="sy0">=</span> PERCENTILE_CONT<span class="br0">&#40;</span><span class="nu0">0.5</span><span class="br0">&#41;</span> WITH<span class="sy0">IN</span> <span class="kw1">GROUP</span> <span class="br0">&#40;</span><span class="kw1">ORDER</span> <span class="kw1">BY</span> <span class="kw2">DATEDIFF</span><span class="br0">&#40;</span>MILLISECOND,StartDate,EndDate<span class="br0">&#41;</span> <span class="sy0">/</span> <span class="nu0">1000.0</span><span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">OVER</span> <span class="br0">&#40;</span>PARTITION <span class="kw1">BY</span> PackageName<span class="br0">&#41;</span>
<span class="kw1">FROM</span> <span class="br0">&#91;</span>dbo<span class="br0">&#93;</span>.<span class="br0">&#91;</span>PackageLogging<span class="br0">&#93;</span>
<span class="kw1">ORDER</span> <span class="kw1">BY</span> ID;</pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">SELECT
	 [RunID]
	,[PackageName]
	,[Duration] = DATEDIFF(MILLISECOND,StartDate,EndDate) / 1000.0
	,[Mean] = PERCENTILE_CONT(0.5) WITHIN GROUP (ORDER BY DATEDIFF(MILLISECOND,StartDate,EndDate) / 1000.0)
					OVER (PARTITION BY PackageName)
FROM [dbo].[PackageLogging]
ORDER BY ID;</pre></div></div>

<p>The result:</p>
<p><a href="/wp-content/uploads/2014/04/TestSSISPerf_chart.png"><img class="alignnone  wp-image-2559" alt="TestSSISPerf_chart" src="/wp-content/uploads/2014/04/TestSSISPerf_chart.png" width="542" height="315" srcset="/wp-content/uploads/2014/04/TestSSISPerf_chart.png 774w, /wp-content/uploads/2014/04/TestSSISPerf_chart-300x174.png 300w" sizes="(max-width: 542px) 100vw, 542px" /></a></p>
<p>I used RunID as category, PackageName as the series and the Duration/Mean as the values. I created a custom palette where I forced the Duration measure and the Mean to have the same color.</p>
<p>If you want to know what that chart is all about and what I was optimizing, keep your eye on the MSSQLTIPS website!</p>
<p><strong>UPDATE<br />
</strong>The MSSQLTips article mentioned in this blog post: <a href="http://www.mssqltips.com/sqlservertip/3217/improve-ssis-data-flow-buffer-performance/">Improve SSIS data flow buffer performance</a>.</p>
]]></content:encoded>
			<wfw:commentRss>/index.php/datamgmt/ssis/ssis-performance-testing/feed/</wfw:commentRss>
		<slash:comments>2</slash:comments>
		</item>
		<item>
		<title>T-SQL Tuesday #46: Rube Goldberg Machine</title>
		<link>/index.php/datamgmt/ssrs/t-sql-tuesday-46-rube/</link>
		<comments>/index.php/datamgmt/ssrs/t-sql-tuesday-46-rube/#respond</comments>
		<pubDate>Tue, 10 Sep 2013 13:46:00 +0000</pubDate>
		<dc:creator><![CDATA[Koen Verbeeck]]></dc:creator>
				<category><![CDATA[Business Intelligence]]></category>
		<category><![CDATA[SSRS]]></category>
		<category><![CDATA[dashboard]]></category>
		<category><![CDATA[indicator]]></category>
		<category><![CDATA[kpi]]></category>
		<category><![CDATA[performance]]></category>
		<category><![CDATA[report]]></category>
		<category><![CDATA[ssrs]]></category>
		<category><![CDATA[syndicated]]></category>

		<guid isPermaLink="false">/index.php/2013/09/t-sql-tuesday-46-rube/</guid>
		<description><![CDATA[ 

 
It’s the second Tuesday of the month, and you know what time it is! That’s right, another installment of T-SQL Tuesday which is hosted this month by Rick Krueger (blog &#124; twitter). The topic is about that one time we did a hack to get something s&#8230;]]></description>
				<content:encoded><![CDATA[<p><a href="http://www.dataogre.com/2013/09/02/t-sql-tuesday-46-rube-goldberg-machine/"><img style="float: left;" src="/wp-content/uploads/users/koenverbeeck/TSQL2sday37/TSQL2sday.PNG?mtime=1355209029" alt="" width="133" height="134" /></a></p>
<p><span style="text-align: justify;">It’s the second Tuesday of the month, and you know what time it is! That’s right, another installment of T-SQL Tuesday which is hosted this month by Rick Krueger (</span><a style="text-align: justify;" href="http://www.dataogre.com/">blog</a><span style="text-align: justify;"> | </span><a style="text-align: justify;" href="https://twitter.com/DataOgre">twitter</a><span style="text-align: justify;">). The topic is about that one time we did a hack to get something sorted out, because of time pressure, budget, sheer laziness or whatever the reason was.</span></p>
<p>My story is not about a hack in its purest definition, but it is about a nice alternative way to get something done more efficiently. I’m talking about <a href="http://technet.microsoft.com/en-us/library/ee633651.aspx">Indicators</a> in a SSRS report. For those non-BI folks who just fell off their chair: an indicator is a visual component introduced in Reporting Services 2008R2. They are very tiny gauges that display the state of a single data value at a glance. They come in various shapes and colors and they are pretty useful for KPIs and dashboards.</p>
<p><a href="/media/users/koenverbeeck/TSQL2sday46/indicators.PNG?mtime=1378820544"><img src="/wp-content/uploads/users/koenverbeeck/TSQL2sday46/indicators.PNG?mtime=1378820544" alt="" width="403" height="362" /></a></p>
<p><span style="text-align: justify;">Once upon a time I had a fairly large matrix report at a client. There were a lot of rows and a lot of columns in that matrix, and the client wanted an indicator in every cell of the matrix. The development went pretty OK using BIDS, although it’s quite a pain to configure a separate indicator for every column. However, when the report was deployed to the server, it became nerve wreckingly slow. This was caused by the sheer amount of indicators, as the query behind the report finished in less than 1 second. Time to look for an alternative.</span></p>
<p style="text-align: justify;">After some Google fu, I came across this MSDN topic: <a href="http://social.msdn.microsoft.com/Forums/sqlserver/en-US/e513aead-5787-4d97-8309-1eaf02a1c3d7/ssrs-2008-r2-rendering-performance">SSRS 2008 R2 Rendering Performance</a>. In this thread, the alternative of using Wingdings was suggested, instead of using actual indicators. You know Wingdings, the Windows font with all the funny symbols.</p>
<p style="text-align: justify;">I replaced every indicator of an expression of the following type:</p>
<p style="text-align: justify;"><em>=iif((Fields!Result) &lt; 70,&#8221;O&#8221;,&#8221;P&#8221;))</em></p>
<p style="text-align: justify;">The letter O in Wingdings-2 corresponds with a cross, the letter P corresponds with a checkmark. I placed a similar expression on the font color, making the cross red and the checkmark green. The resulting matrix looked like this:</p>
<p style="text-align: justify;"><a href="/media/users/koenverbeeck/TSQL2sday46/results.PNG?mtime=1378820544"><img src="/wp-content/uploads/users/koenverbeeck/TSQL2sday46/results.PNG?mtime=1378820544" alt="" width="563" height="210" /></a></p>
<p><span style="text-align: justify;">Since the report now just had to evaluate a simple expression and display a simple text for each cell instead of a single chart for each cell, the report performance went through the roof.</span></p>
<p style="text-align: justify;">In conclusion: using something “goofy” can sometimes lead to extraordinary results.</p>
]]></content:encoded>
			<wfw:commentRss>/index.php/datamgmt/ssrs/t-sql-tuesday-46-rube/feed/</wfw:commentRss>
		<slash:comments>0</slash:comments>
		</item>
		<item>
		<title>Wrap inserts in a transaction for faster performance</title>
		<link>/index.php/datamgmt/dbprogramming/wrap-inserts-in-a-transaction/</link>
		<comments>/index.php/datamgmt/dbprogramming/wrap-inserts-in-a-transaction/#comments</comments>
		<pubDate>Wed, 13 Mar 2013 13:54:00 +0000</pubDate>
		<dc:creator><![CDATA[SQLDenis]]></dc:creator>
				<category><![CDATA[Business Intelligence]]></category>
		<category><![CDATA[Database Programming]]></category>
		<category><![CDATA[Microsoft SQL Server]]></category>
		<category><![CDATA[Microsoft SQL Server Admin]]></category>
		<category><![CDATA[performance]]></category>
		<category><![CDATA[sql server 2008]]></category>
		<category><![CDATA[sql server 2012]]></category>
		<category><![CDATA[testing]]></category>
		<category><![CDATA[transactions]]></category>

		<guid isPermaLink="false">/index.php/2013/03/wrap-inserts-in-a-transaction/</guid>
		<description><![CDATA[Sometimes you have to insert a bunch of data and you can't use BCP or another bulk load method. When you do single row inserts, SQL Server wraps these inserts inside an implicit transaction. Did you know that if you use an explicit transaction that the&#8230;]]></description>
				<content:encoded><![CDATA[<p>Sometimes you have to insert a bunch of data and you can&#8217;t use BCP or another bulk load method. When you do single row inserts, SQL Server wraps these inserts inside an implicit transaction. Did you know that if you use an explicit transaction that the inserts will be much faster? I touched upon this earlier in this post <a href="/index.php/DataMgmt/DBProgramming/mongodb-vs-sql-server-insert-comparison">MongoDB vs. SQL Server &#8211; INSERT comparison part deux</a> but since someone asked about this today, I decided to take another look with different run sizes as well</p>
<p>Let&#8217;s take a look. first create the following table</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
</pre></td><td class="de1"><pre class="de1"><span class="kw1">CREATE</span> <span class="kw1">TABLE</span> Sometest<span class="br0">&#40;</span>id <span class="kw1">INT</span> <span class="kw1">PRIMARY</span> <span class="kw1">KEY</span>, SomeCol <span class="kw1">VARCHAR</span><span class="br0">&#40;</span><span class="nu0">200</span><span class="br0">&#41;</span>, SomeDate <span class="kw1">DATETIME</span>,SomeCol2 <span class="kw1">VARCHAR</span><span class="br0">&#40;</span><span class="nu0">200</span><span class="br0">&#41;</span>, SomeDate2 <span class="kw1">DATETIME</span>,
SomeCol3 <span class="kw1">VARCHAR</span><span class="br0">&#40;</span><span class="nu0">200</span><span class="br0">&#41;</span>, SomeDate3 <span class="kw1">DATETIME</span>,SomeCol4 <span class="kw1">VARCHAR</span><span class="br0">&#40;</span><span class="nu0">200</span><span class="br0">&#41;</span>, SomeDate4 <span class="kw1">DATETIME</span><span class="br0">&#41;</span>
GO</pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">CREATE TABLE Sometest(id INT PRIMARY KEY, SomeCol VARCHAR(200), SomeDate DATETIME,SomeCol2 VARCHAR(200), SomeDate2 DATETIME,
SomeCol3 VARCHAR(200), SomeDate3 DATETIME,SomeCol4 VARCHAR(200), SomeDate4 DATETIME)
GO</pre></div></div>

<p>Now run the following code</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
</pre></td><td class="de1"><pre class="de1"><span class="kw1">TRUNCATE</span> <span class="kw1">TABLE</span> Sometest
<span class="kw1">DECLARE</span> @<span class="kw1">start</span> <span class="kw1">DATETIME</span> <span class="sy0">=</span> <span class="kw2">GETDATE</span><span class="br0">&#40;</span><span class="br0">&#41;</span>
<span class="kw1">SET</span> <span class="kw1">NOCOUNT</span> <span class="kw1">ON</span>
<span class="co1">--BEGIN TRAN</span>
<span class="kw1">DECLARE</span> @id <span class="kw1">INT</span> <span class="sy0">=</span><span class="nu0">0</span>
<span class="kw1">WHILE</span> @id <span class="sy0">&lt;</span> <span class="nu0">50000</span>
<span class="kw1">BEGIN</span>
&nbsp; &nbsp; <span class="kw1">INSERT</span> Sometest
&nbsp; &nbsp; <span class="kw1">SELECT</span> @id ,<span class="st0">'BlaBlaBlaBlaBlaBlaBlaBlaBlaBla111111'</span>,<span class="kw2">GETDATE</span><span class="br0">&#40;</span><span class="br0">&#41;</span>,
&nbsp; &nbsp; <span class="st0">'BlaBlaBlaBlaBlaBlaBlaBlaBlaBla2222'</span>,<span class="kw2">GETDATE</span><span class="br0">&#40;</span><span class="br0">&#41;</span>,
&nbsp; &nbsp; <span class="st0">'BlaBlaBlaBlaBlaBlaBlaBlaBlaBla3333'</span>,<span class="kw2">GETDATE</span><span class="br0">&#40;</span><span class="br0">&#41;</span>,
&nbsp; &nbsp; <span class="st0">'BlaBlaBlaBlaBlaBlaBlaBlaBlaBla4444'</span>,<span class="kw2">GETDATE</span><span class="br0">&#40;</span><span class="br0">&#41;</span>
<span class="kw1">SET</span> @id<span class="sy0">+=</span><span class="nu0">1</span>
<span class="kw1">END</span>
<span class="co1">--COMMIT</span>
<span class="kw1">SELECT</span> <span class="kw2">DATEDIFF</span><span class="br0">&#40;</span>ms,@<span class="kw1">start</span>,<span class="kw2">GETDATE</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#41;</span>
<span class="kw1">SELECT</span> <span class="kw2">COUNT</span><span class="br0">&#40;</span><span class="sy0">*</span><span class="br0">&#41;</span> <span class="kw1">FROM</span> Sometest</pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">TRUNCATE TABLE Sometest
DECLARE @start DATETIME = GETDATE()
SET NOCOUNT ON
--BEGIN TRAN
DECLARE @id INT =0
WHILE @id &lt; 50000
BEGIN
	INSERT Sometest
	SELECT @id ,'BlaBlaBlaBlaBlaBlaBlaBlaBlaBla111111',GETDATE(),
	'BlaBlaBlaBlaBlaBlaBlaBlaBlaBla2222',GETDATE(),
	'BlaBlaBlaBlaBlaBlaBlaBlaBlaBla3333',GETDATE(),
	'BlaBlaBlaBlaBlaBlaBlaBlaBlaBla4444',GETDATE()
SET @id+=1
END
--COMMIT
SELECT DATEDIFF(ms,@start,GETDATE())
SELECT COUNT(*) FROM Sometest</pre></div></div>

<p>That takes 1153 milliseconds on my machine</p>
<p>Run the same code but now uncomment the transaction</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
</pre></td><td class="de1"><pre class="de1"><span class="kw1">TRUNCATE</span> <span class="kw1">TABLE</span> Sometest
<span class="kw1">DECLARE</span> @<span class="kw1">start</span> <span class="kw1">DATETIME</span> <span class="sy0">=</span> <span class="kw2">GETDATE</span><span class="br0">&#40;</span><span class="br0">&#41;</span>
<span class="kw1">SET</span> <span class="kw1">NOCOUNT</span> <span class="kw1">ON</span>
<span class="kw1">BEGIN</span> <span class="kw1">TRAN</span>
<span class="kw1">DECLARE</span> @id <span class="kw1">INT</span> <span class="sy0">=</span><span class="nu0">0</span>
<span class="kw1">WHILE</span> @id <span class="sy0">&lt;</span> <span class="nu0">50000</span>
<span class="kw1">BEGIN</span>
&nbsp; &nbsp; <span class="kw1">INSERT</span> Sometest
&nbsp; &nbsp; <span class="kw1">SELECT</span> @id ,<span class="st0">'BlaBlaBlaBlaBlaBlaBlaBlaBlaBla111111'</span>,<span class="kw2">GETDATE</span><span class="br0">&#40;</span><span class="br0">&#41;</span>,
&nbsp; &nbsp; <span class="st0">'BlaBlaBlaBlaBlaBlaBlaBlaBlaBla2222'</span>,<span class="kw2">GETDATE</span><span class="br0">&#40;</span><span class="br0">&#41;</span>,
&nbsp; &nbsp; <span class="st0">'BlaBlaBlaBlaBlaBlaBlaBlaBlaBla3333'</span>,<span class="kw2">GETDATE</span><span class="br0">&#40;</span><span class="br0">&#41;</span>,
&nbsp; &nbsp; <span class="st0">'BlaBlaBlaBlaBlaBlaBlaBlaBlaBla4444'</span>,<span class="kw2">GETDATE</span><span class="br0">&#40;</span><span class="br0">&#41;</span>
<span class="kw1">SET</span> @id<span class="sy0">+=</span><span class="nu0">1</span>
<span class="kw1">END</span>
<span class="kw1">COMMIT</span>
<span class="kw1">SELECT</span> <span class="kw2">DATEDIFF</span><span class="br0">&#40;</span>ms,@<span class="kw1">start</span>,<span class="kw2">GETDATE</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#41;</span>
<span class="kw1">SELECT</span> <span class="kw2">COUNT</span><span class="br0">&#40;</span><span class="sy0">*</span><span class="br0">&#41;</span> <span class="kw1">FROM</span> Sometest</pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">TRUNCATE TABLE Sometest
DECLARE @start DATETIME = GETDATE()
SET NOCOUNT ON
BEGIN TRAN
DECLARE @id INT =0
WHILE @id &lt; 50000
BEGIN
	INSERT Sometest
	SELECT @id ,'BlaBlaBlaBlaBlaBlaBlaBlaBlaBla111111',GETDATE(),
	'BlaBlaBlaBlaBlaBlaBlaBlaBlaBla2222',GETDATE(),
	'BlaBlaBlaBlaBlaBlaBlaBlaBlaBla3333',GETDATE(),
	'BlaBlaBlaBlaBlaBlaBlaBlaBlaBla4444',GETDATE()
SET @id+=1
END
COMMIT
SELECT DATEDIFF(ms,@start,GETDATE())
SELECT COUNT(*) FROM Sometest</pre></div></div>

<p>That is almost twice as fast (or almost half as slow), it takes 673 milliseconds</p>
<p>Here is what the numbers look like on my machine for different insert sizes</p>
<pre>Inserts	no tran	explicit transaction
100000  18030   10800
50000	 9363	 5516
5000	 1130	  760
5000	 190	  103
1000	  40       23</pre>
<p>As you can see, when you have an explicit transaction it is much faster than when you don&#8217;t specify a transaction</p>
]]></content:encoded>
			<wfw:commentRss>/index.php/datamgmt/dbprogramming/wrap-inserts-in-a-transaction/feed/</wfw:commentRss>
		<slash:comments>2</slash:comments>
		</item>
		<item>
		<title>SQL Advent 2012 Day 21: With VLDBs it matters what you do and how you do it</title>
		<link>/index.php/datamgmt/dbprogramming/with-vldbs-it-matters-what/</link>
		<comments>/index.php/datamgmt/dbprogramming/with-vldbs-it-matters-what/#respond</comments>
		<pubDate>Sat, 22 Dec 2012 00:12:00 +0000</pubDate>
		<dc:creator><![CDATA[SQLDenis]]></dc:creator>
				<category><![CDATA[Business Intelligence]]></category>
		<category><![CDATA[Database Programming]]></category>
		<category><![CDATA[Microsoft SQL Server]]></category>
		<category><![CDATA[Microsoft SQL Server Admin]]></category>
		<category><![CDATA[indexing]]></category>
		<category><![CDATA[performance]]></category>
		<category><![CDATA[query]]></category>
		<category><![CDATA[sql advent 2012]]></category>
		<category><![CDATA[sql server 2008]]></category>
		<category><![CDATA[sql server 2008 r2]]></category>
		<category><![CDATA[sql server 2012]]></category>
		<category><![CDATA[very large databases]]></category>
		<category><![CDATA[vldb]]></category>

		<guid isPermaLink="false">/index.php/2012/12/with-vldbs-it-matters-what/</guid>
		<description><![CDATA[This is day twenty-one of the SQL Advent 2012 series of blog posts. Today we are going to look at Very Large Databases]]></description>
				<content:encoded><![CDATA[<p>This is day twenty-one of the <a href="/index.php/DataMgmt/DBProgramming/sql-advent-2012-here-is">SQL Advent 2012 series</a> of blog posts. Today we are going to look at why it matters how you do things when working with a VLDB </p>
<p><strong>VLD what?</strong><br />
VLDB stands for Very Large Database, Not too long ago the definition of VLDB was a database that occupies more than 1 terabyte or contains several billion rows. This of course will change over time, there are quite a few companies with Petabyte size databases. Servers with many CPUs and lots of RAM are required when your databases are big</p>
<div class="image_block"><a href="/wp-content/uploads/blogs/DataMgmt/Denis/ADvent/SQLServerCPUandRAM.jpg?mtime=1356141722"><img alt="I like big databases and I cannot lie" title ="I like big databases and I cannot lie" src="/wp-content/uploads/blogs/DataMgmt/Denis/ADvent/SQLServerCPUandRAM.jpg?mtime=1356141722" width="582" height="395" /></a></div>
<p><strong>What is the big deal with VLDB anyway, it is just bigger right?</strong><br />
The problem with a VLDB is that you have to change your mindset and you have to change your ways how you do certain things. Think of it like driving 20 miles per hours compared to driving 160 miles per hour, when you drive very fast you can&#8217;t get away with doing stupid stuff on the road, you will crash. The same is true when working with big databases. You can&#8217;t just delete 100 million rows, you might fill up the log file, you have to do it in batches if you can&#8217;t use a truncate statement.</p>
<p><strong>Storage</strong><br />
While you can get away with having just one drive when dealing with smaller database, this doesn&#8217;t hold true for Very Large Databases. With Very Large Databases, ideally you want separate drives for tempdb, log file and data files. You can also put the non clustered indexes on a different spindle, separate from the heaps and clustered indexes. Also make sure that you <a href="/index.php/DataMgmt/DBAdmin/MSSQLServerAdmin/sizing-database-files">size your database files</a> correctly to improve performance.<br />
If you have 64 GB of RAM and your database is 50 GB, it is very likely that the whole database will be in RAM at some point. When your database is 2 TB and you have only 512 GB of RAM, you cannot even have a quarter of the DB in RAM. This is where you need to have fast hard drives. A fast SAN or some Solid State Drives are worth looking into.</p>
<p><strong>Partitioning</strong><br />
Partitioning can help with maintenance and returning data faster, take a look at my <a href="/index.php/DataMgmt/DataDesign/sql-advent-2011-day-3">partitioning</a> post for more info</p>
<p><strong>Indexes</strong><br />
Make the indexes narrow, you want your lookups to be as efficient as possible.<br />
If using partitions you can now rebuild just one partition of the index, this will make index maintenance easier and faster.</p>
<p><strong>Deletes</strong><br />
When you have a small database, you can delete all the rows from a table without a problem generally. Every now and then you will have someone do this, they will of course do this just one because after that you will have <em>THE TALK</em> with them about this</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
</pre></td><td class="de1"><pre class="de1"><span class="kw1">DELETE</span> HugeTable</pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">DELETE HugeTable</pre></div></div>

<p>Instead of doing that, use truncate or do deletes in batches of 50000 for example</p>
<p><strong>Select * from HugeTable</strong><br />
Every now and then you will have someone execute something like the following</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
</pre></td><td class="de1"><pre class="de1"><span class="kw1">SELECT</span> <span class="sy0">*</span> 
<span class="kw1">FROM</span> HugeTable
<span class="kw1">ORDER</span> <span class="kw1">By</span> SomeColumn</pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">SELECT * 
FROM HugeTable
ORDER By SomeColumn</pre></div></div>

<p>When doing something like that SQL Server will create a worktable in tempdb, if the table is big and your tempdb is placed on a drive that doesn&#8217;t have a lot of space, you will run out of space, take a look at <a href="/index.php/DataMgmt/DataDesign/could-not-allocate-new-page-for-database">Dealing with the could not allocate new page for database &#8216;TEMPDB&#8217;. There are no more pages available in filegroup DEFAULT error message</a> how to resolve this</p>
<p><strong>Compression</strong><br />
Compression is great, I use it, it makes the backups smaller, it makes the restore faster. I use database compression as well as data compression, when using data compression, SQL Server will be able to store more data per page and thus you will be able to have more data in RAM</p>
<p><strong>Testbed size</strong><br />
When coding against Very Large Databases, you need to test with a QA or testbox that has about the same data, you will get into trouble if you don&#8217;t. Take a look at <a href="/index.php/DataMgmt/DataDesign/your-testbed-has-to-have-the-same-volume">Your testbed has to have the same volume of data as on production in order to simulate normal usage</a> to see what can happen.</p>
<p><strong>Crappy queries</strong><br />
Ah yes, how to bring the database to its knees, have some n00bs write some queries against your database. While you can get away with writing non-<a href="/index.php/DataMgmt/DBProgramming/sargable-queries">SARGable queries</a>, queries where the index is not used, you will suffer immensely if you do this on Very Large Databases</p>
<p>I only touched upon a couple of key points, just keep in mind that if you do the thing I mentioned here even with smaller databases, you won&#8217;t suffer when your database starts to grow. And no, while premature optimization might be the root of all evil, I would call this best practices instead</p>
<p>That is all for day twenty-one of the <a href="/index.php/DataMgmt/DBProgramming/sql-advent-2012-here-is">SQL Advent 2012 series</a>, come back tomorrow for the next one, you can also check out all the posts from last year here: <a href="/index.php/DataMgmt/DataDesign/sql-advent-2011-recap">SQL Advent 2011 Recap</a></p>
]]></content:encoded>
			<wfw:commentRss>/index.php/datamgmt/dbprogramming/with-vldbs-it-matters-what/feed/</wfw:commentRss>
		<slash:comments>0</slash:comments>
		</item>
		<item>
		<title>SQL Advent 2012 Day 15: Benefits of Indexes</title>
		<link>/index.php/datamgmt/dbprogramming/benefits-of-indexes/</link>
		<comments>/index.php/datamgmt/dbprogramming/benefits-of-indexes/#respond</comments>
		<pubDate>Sat, 15 Dec 2012 07:30:00 +0000</pubDate>
		<dc:creator><![CDATA[SQLDenis]]></dc:creator>
				<category><![CDATA[Business Intelligence]]></category>
		<category><![CDATA[Database Administration]]></category>
		<category><![CDATA[Database Programming]]></category>
		<category><![CDATA[Microsoft SQL Server]]></category>
		<category><![CDATA[Microsoft SQL Server Admin]]></category>
		<category><![CDATA[indexing]]></category>
		<category><![CDATA[performance]]></category>
		<category><![CDATA[query]]></category>
		<category><![CDATA[sql advent 2012]]></category>
		<category><![CDATA[sql server 2008]]></category>
		<category><![CDATA[sql server 2008 r2]]></category>
		<category><![CDATA[sql server 2012]]></category>

		<guid isPermaLink="false">/index.php/2012/12/benefits-of-indexes/</guid>
		<description><![CDATA[This is day fifteen of the SQL Advent 2012 series of blog posts. Today we are going to look at indexes]]></description>
				<content:encoded><![CDATA[<p>This is day fifteen of the <a href="/index.php/DataMgmt/DBProgramming/sql-advent-2012-here-is">SQL Advent 2012 series</a> of blog posts. Today we are going to look at the benefit of indexes</p>
<h2>So how does an index work?</h2>
<p>How does an index work, how does it help SQL Server finding stuff faster? Here is an simple non technology explanation. If I told you to grab a cookbook and give me all the recipes in that book for cod, what would you do? There are two things yuo can do, you can read through the whole book page by page until you get to the last page looking for any cod recipes. Or&#8230;&#8230;&#8230;..take a look at the picture below</p>
<div class="image_block"><a href="/wp-content/uploads/blogs/DataMgmt/Denis/ADvent/IMG01005-20121214-1059.jpg?mtime=1355500346"><img alt="" src="/wp-content/uploads/blogs/DataMgmt/Denis/ADvent/IMG01005-20121214-1059.jpg?mtime=1355500346" width="640" height="480" /></a></div>
<p>See that, in one second I know exactly where to find cod recipes, it is on page 305 and 61. Which do you think is faster, looking it up in an index or scanning through the book?  </p>
<p>SQL Server pretty much uses the same technique. There are two types of <em>basic</em> indexes in SQL Server, these are clustered and non clustered indexes.  A clustered index will contain all the data from the table as well, a non clustered index will have a pointer to the table row if there is no clustered index on that table or to the clustered index position is there is a clustered index on the table.</p>
<p>A table with a clustered index is also called a clustered table. A table without a  clustered index is also called a heap.</p>
<p>SQL Server also has XML, spatial, columnstore, filtered, full text indexes but we are just focusing on the basic indexes in this post.</p>
<p>Here is what books on line has to say about the <a href="http://msdn.microsoft.com/en-us/library/ms177443(v=SQL.105).aspxhttp://msdn.microsoft.com/en-us/library/ms177443(v=SQL.105).aspx">storage of a clustered index</a></p>
<blockquote><p><em>In SQL Server, indexes are organized as B-trees. Each page in an index B-tree is called an index node. The top node of the B-tree is called the root node. The bottom level of nodes in the index is called the leaf nodes. Any index levels between the root and the leaf nodes are collectively known as intermediate levels. In a clustered index, the leaf nodes contain the data pages of the underlying table. The root and intermediate level nodes contain index pages holding index rows. Each index row contains a key value and a pointer to either an intermediate level page in the B-tree, or a data row in the leaf level of the index. The pages in each level of the index are linked in a doubly-linked list.</em></p></blockquote>
<p>A non clustered index is a little different since it doesn&#8217;t store the whole data pages, here is what books on line has to say about <a href="http://msdn.microsoft.com/en-us/library/ms177484(v=sql.105).aspx">the storage of a nonclustered index</a></p>
<blockquote><p><em>Nonclustered indexes have the same B-tree structure as clustered indexes, except for the following significant differences:</p>
<ul>
<li>The data rows of the underlying table are not sorted and stored in order based on their nonclustered keys.</li>
<li>The leaf layer of a nonclustered index is made up of index pages instead of data pages.</li>
</ul>
<p>Nonclustered indexes can be defined on a table or view with a clustered index or a heap. Each index row in the nonclustered index contains the nonclustered key value and a row locator. This locator points to the data row in the clustered index or heap having the key value.<br />
The row locators in nonclustered index rows are either a pointer to a row or are a clustered index key for a row, as described in the following:</p>
<ul>
<li>If the table is a heap, which means it does not have a clustered index, the row locator is a pointer to the row. The pointer is built from the file identifier (ID), page number, and number of the row on the page. The whole pointer is known as a Row ID (RID).</li>
<li>If the table has a clustered index, or the index is on an indexed view, the row locator is the clustered index key for the row. If the clustered index is not a unique index, SQL Server makes any duplicate keys unique by adding an internally generated value called a uniqueifier. This four-byte value is not visible to users. It is only added when required to make the clustered key unique for use in nonclustered indexes. SQL Server retrieves the data row by searching the clustered index using the clustered index key stored in the leaf row of the nonclustered index.</li>
</ul>
<p></em>
</p></blockquote>
<p>Cool, I will now just add indexes on every column. Not so fast, there are some things to consider here, for every update, insert and delete statement indexes have to be maintained. If you have a busy OLTP database, you have to find the right balance between your read and write IO. Not enough indexes and your retrieval queries will suffer, too many indexes and your inserts will be slower. Also keep in mind that indexes take up storage, the more you have the bigger your database will be.</p>
<h2>Keep your clustered indexes narrow</h2>
<p>Try to keep your clustered indexes as narrow as possible, if you can use something like an integer, this is only 4 bytes. The reason to keep your clustered indexes narrow is that when you have non clustered indexes, the row locator is the clustered index key for the row. In this case your non clustered index will become bigger as well and now you won&#8217;t be able to store as much data on a page. To illustrate that let&#8217;s take a look at some simple code</p>
<p>First let&#8217;s create this table and populate it with 2048 rows</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
</pre></td><td class="de1"><pre class="de1"><span class="kw1">CREATE</span> <span class="kw1">TABLE</span> Test1<span class="br0">&#40;</span>id <span class="kw1">int</span>, somecol <span class="kw1">char</span><span class="br0">&#40;</span><span class="nu0">36</span><span class="br0">&#41;</span>, somecol2 <span class="kw1">char</span><span class="br0">&#40;</span><span class="nu0">36</span><span class="br0">&#41;</span><span class="br0">&#41;</span>
GO
&nbsp;
<span class="kw1">INSERT</span> Test1 
<span class="kw1">SELECT</span> number,newid<span class="br0">&#40;</span><span class="br0">&#41;</span>,newid<span class="br0">&#40;</span><span class="br0">&#41;</span> 
<span class="kw1">FROM</span> master..<span class="me1">spt_values</span>
<span class="kw1">WHERE</span> type <span class="sy0">=</span> <span class="st0">'P'</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">CREATE TABLE Test1(id int, somecol char(36), somecol2 char(36))
GO

INSERT Test1 
SELECT number,newid(),newid() 
FROM master..spt_values
WHERE type = 'P'</pre></div></div>

<p>Add a clustered index</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
</pre></td><td class="de1"><pre class="de1"><span class="kw1">CREATE</span> <span class="kw1">CLUSTERED</span> <span class="kw1">INDEX</span> cx <span class="kw1">on</span> Test1<span class="br0">&#40;</span>id<span class="br0">&#41;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">CREATE CLUSTERED INDEX cx on Test1(id)</pre></div></div>

<p>Add these two non clustered indexes</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
</pre></td><td class="de1"><pre class="de1"><span class="kw1">CREATE</span> <span class="kw1">NONCLUSTERED</span> <span class="kw1">INDEX</span> ix1 <span class="kw1">on</span> Test1<span class="br0">&#40;</span>somecol<span class="br0">&#41;</span>
<span class="kw1">CREATE</span> <span class="kw1">NONCLUSTERED</span> <span class="kw1">INDEX</span> ix2 <span class="kw1">on</span> Test1<span class="br0">&#40;</span>somecol2<span class="br0">&#41;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">CREATE NONCLUSTERED INDEX ix1 on Test1(somecol)
CREATE NONCLUSTERED INDEX ix2 on Test1(somecol2)</pre></div></div>

<p>Let&#8217;s check how much storage is required for the non clustered indexes</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
</pre></td><td class="de1"><pre class="de1"><span class="kw1">SELECT</span>
<span class="kw2">DB_NAME</span><span class="br0">&#40;</span>DATABASE_ID<span class="br0">&#41;</span> <span class="kw1">AS</span> <span class="br0">&#91;</span>DatabaseName<span class="br0">&#93;</span>,
<span class="kw2">OBJECT_NAME</span><span class="br0">&#40;</span><span class="kw2">OBJECT_ID</span><span class="br0">&#41;</span> <span class="kw1">AS</span> TableName,
SI.<span class="me1">NAME</span> <span class="kw1">AS</span> IndexName,
<span class="sy0">IN</span>DEX_TYPE_DESC <span class="kw1">AS</span> IndexType,
PAGE_COUNT <span class="kw1">AS</span> PageCounts
<span class="kw1">FROM</span> sys.<span class="me1">dm_db_index_physical_stats</span> <span class="br0">&#40;</span><span class="kw2">DB_ID</span><span class="br0">&#40;</span><span class="br0">&#41;</span>, <span class="sy0">NULL</span>, <span class="sy0">NULL</span> , <span class="sy0">NULL</span>, N<span class="st0">'LIMITED'</span><span class="br0">&#41;</span> DPS
<span class="kw1">INNER</span> <span class="sy0">JOIN</span> sysindexes SI
<span class="kw1">ON</span> DPS.<span class="kw2">OBJECT_ID</span> <span class="sy0">=</span> SI.<span class="me1">ID</span> <span class="sy0">AND</span> DPS.<span class="me1">INDEX_ID</span> <span class="sy0">=</span> SI.<span class="me1">INDID</span>
<span class="sy0">AND</span> <span class="kw2">OBJECT_NAME</span><span class="br0">&#40;</span><span class="kw2">OBJECT_ID</span><span class="br0">&#41;</span> <span class="sy0">=</span> <span class="st0">'Test1'</span>
GO</pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">SELECT
DB_NAME(DATABASE_ID) AS [DatabaseName],
OBJECT_NAME(OBJECT_ID) AS TableName,
SI.NAME AS IndexName,
INDEX_TYPE_DESC AS IndexType,
PAGE_COUNT AS PageCounts
FROM sys.dm_db_index_physical_stats (DB_ID(), NULL, NULL , NULL, N'LIMITED') DPS
INNER JOIN sysindexes SI
ON DPS.OBJECT_ID = SI.ID AND DPS.INDEX_ID = SI.INDID
AND OBJECT_NAME(OBJECT_ID) = 'Test1'
GO</pre></div></div>

<p>Here is the output, as you can see the non clustered indexes take up 12 pages</p>
<pre>DatabaseName	TableName	IndexName	IndexType	PageCounts
tempdb	        Test1	        cx	      CLUSTERED INDEX	22
tempdb	        Test1	        ix1	   NONCLUSTERED INDEX	12
tempdb	        Test1	        ix2	   NONCLUSTERED INDEX	12</pre>
<p>If we check the table size</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
</pre></td><td class="de1"><pre class="de1"><span class="kw1">EXEC</span> <span class="kw3">sp_spaceused</span> <span class="st0">'Test1'</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">EXEC sp_spaceused 'Test1'</pre></div></div>

<pre>name	rows	reserved	data	index_size	unused
Test1	2048    472 KB	       176 KB	240 KB	        56 KB</pre>
<p>We see that it is using 240 KB for the indexes</p>
<p>Let&#8217;s recreate the clustered index with all 3 columns now.</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
</pre></td><td class="de1"><pre class="de1"><span class="kw1">CREATE</span> <span class="kw1">CLUSTERED</span> <span class="kw1">INDEX</span> cx <span class="kw1">on</span> Test1<span class="br0">&#40;</span>id,somecol,somecol2<span class="br0">&#41;</span>
<span class="kw1">WITH</span> DROP_EXIST<span class="sy0">IN</span>G</pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">CREATE CLUSTERED INDEX cx on Test1(id,somecol,somecol2)
WITH DROP_EXISTING</pre></div></div>

<p>Recreating the clustered index also recreated the non clustered indexes. Let&#8217;s check now how many pages a non clustered index is</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
</pre></td><td class="de1"><pre class="de1"><span class="kw1">SELECT</span>
<span class="kw2">DB_NAME</span><span class="br0">&#40;</span>DATABASE_ID<span class="br0">&#41;</span> <span class="kw1">AS</span> <span class="br0">&#91;</span>DatabaseName<span class="br0">&#93;</span>,
<span class="kw2">OBJECT_NAME</span><span class="br0">&#40;</span><span class="kw2">OBJECT_ID</span><span class="br0">&#41;</span> <span class="kw1">AS</span> TableName,
SI.<span class="me1">NAME</span> <span class="kw1">AS</span> IndexName,
<span class="sy0">IN</span>DEX_TYPE_DESC <span class="kw1">AS</span> IndexType,
PAGE_COUNT <span class="kw1">AS</span> PageCounts
<span class="kw1">FROM</span> sys.<span class="me1">dm_db_index_physical_stats</span> <span class="br0">&#40;</span><span class="kw2">DB_ID</span><span class="br0">&#40;</span><span class="br0">&#41;</span>, <span class="sy0">NULL</span>, <span class="sy0">NULL</span> , <span class="sy0">NULL</span>, N<span class="st0">'LIMITED'</span><span class="br0">&#41;</span> DPS
<span class="kw1">INNER</span> <span class="sy0">JOIN</span> sysindexes SI
<span class="kw1">ON</span> DPS.<span class="kw2">OBJECT_ID</span> <span class="sy0">=</span> SI.<span class="me1">ID</span> <span class="sy0">AND</span> DPS.<span class="me1">INDEX_ID</span> <span class="sy0">=</span> SI.<span class="me1">INDID</span>
<span class="sy0">AND</span> <span class="kw2">OBJECT_NAME</span><span class="br0">&#40;</span><span class="kw2">OBJECT_ID</span><span class="br0">&#41;</span> <span class="sy0">=</span> <span class="st0">'Test1'</span>
GO</pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">SELECT
DB_NAME(DATABASE_ID) AS [DatabaseName],
OBJECT_NAME(OBJECT_ID) AS TableName,
SI.NAME AS IndexName,
INDEX_TYPE_DESC AS IndexType,
PAGE_COUNT AS PageCounts
FROM sys.dm_db_index_physical_stats (DB_ID(), NULL, NULL , NULL, N'LIMITED') DPS
INNER JOIN sysindexes SI
ON DPS.OBJECT_ID = SI.ID AND DPS.INDEX_ID = SI.INDID
AND OBJECT_NAME(OBJECT_ID) = 'Test1'
GO</pre></div></div>

<p>Here are the results</p>
<pre>DatabaseName	TableName	IndexName	IndexType	PageCounts
tempdb          Test1	        cx	        CLUSTERED INDEX	22
tempdb          Test1	        ix1	     NONCLUSTERED INDEX	21
tempdb  	Test1	        ix2	     NONCLUSTERED INDEX	21</pre>
<p>As you can see the non clustered indexes went from 12 to 21 pages</p>
<p>The index size changed, if you run this</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
</pre></td><td class="de1"><pre class="de1"><span class="kw1">EXEC</span> <span class="kw3">sp_spaceused</span> <span class="st0">'Test1'</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">EXEC sp_spaceused 'Test1'</pre></div></div>

<p>Here is the result</p>
<pre>name	rows	reserved data	index_size	unused
Test1	2048    600 KB	 176 KB	384 KB	        40 KB</pre>
<p>So we went from 240 KB to 384 KB for the index storage.</p>
<p>So why does this matter you ask? SQL Server will use indexes for all kind of things, if you run a COUNT(*) it will use an index, if you do a JOIN it will use an index, it will use indexes in GROUP By queries and many more things.</p>
<p>Let&#8217;s look at a simple example, when you do a COUNT(*), the optimizer will pick a non clustered index if there is one since it usually has less columns than the clustered index </p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
</pre></td><td class="de1"><pre class="de1"><span class="kw1">SET</span> SHOWPLAN_TEXT <span class="kw1">ON</span>
GO
&nbsp;
<span class="kw1">SELECT</span> <span class="kw2">count</span><span class="br0">&#40;</span><span class="sy0">*</span><span class="br0">&#41;</span> <span class="kw1">FROM</span> Test1
GO
&nbsp;
<span class="kw1">SET</span> SHOWPLAN_TEXT <span class="kw1">OFF</span>
GO</pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">SET SHOWPLAN_TEXT ON
GO

SELECT count(*) FROM Test1
GO

SET SHOWPLAN_TEXT OFF
GO</pre></div></div>

<p>Here is the plan</p>
<blockquote><p>  |&#8211;Compute Scalar(DEFINE:([Expr1004]=CONVERT_IMPLICIT(int,[Expr1005],0)))<br />
       |&#8211;Stream Aggregate(DEFINE:([Expr1005]=Count(*)))<br />
            |&#8211;Index Scan(OBJECT:([ReportServer].[dbo].[Test1].[ix2]))</p></blockquote>
<p>Basically it had to scan through all the index pages to get the count, if your index was now still 12 pages instead of 21, SQL Server would take less time to accomplish this.</p>
<p>I barely scratched the surface on indexing, it is a big topic and I recommend you start by navigating to the topic in Books On Line: http://msdn.microsoft.com/en-us/library/ms175049.aspx</p>
<p>You can also take a look at the following posts written about indexing right here on this site</p>
<p><a href="/index.php/DataMgmt/DataDesign/index-rebuild-and-reorganize-sql">Index REBUILD and REORGANIZE</a><br />
<a href="/index.php/DataMgmt/DataDesign/sql-advent-2011-day-20">Indexes with Included Columns</a><br />
<a href="/index.php/DataMgmt/DBAdmin/MSSQLServerAdmin/sql-advent-2011-day-19">Filtered Indexes</a><br />
<a href="/index.php/DataMgmt/DataDesign/is-an-index-scan-always-better-or-faster">Is an index seek always better or faster than an index scan?</a><br />
<a href="/index.php/DataMgmt/DataDesign/finding-fragmentation-of-an-index-and-fihttp:///index.php/DataMgmt/DataDesign/finding-fragmentation-of-an-index-and-fi">Finding Fragmentation Of An Index And Fixing It</a><br />
<a href="/index.php/DataMgmt/DataDesign/how-to-get-the-selectivity-of-an-indexhttp:///index.php/DataMgmt/DataDesign/how-to-get-the-selectivity-of-an-index">How to get the selectivity of an index</a><br />
<a href="/index.php/DataMgmt/DBAdmin/MSSQLServerAdmin/adding-nonclustered-index-on-primary">Adding nonclustered index on primary keys</a><br />
<a href="/index.php/DataMgmt/DBAdmin/index-seek-on-lob-columns">Index Seek on LOB Columns</a><br />
<a href="/index.php/DataMgmt/DBAdmin/performance-impact-of-row-overflow">Row Overflow Pages &#8211; Index Tuning</a><br />
<a href="/index.php/DataMgmt/DBAdmin/columnstore-index-basics">Columnstore Index Basics</a><br />
<a href="/index.php/DataMgmt/DBAdmin/columnstore-index-index-statistics">Columnstore Index – Index Statistics</a></p>
<p>That is all for day fifteen of the <a href="/index.php/DataMgmt/DBProgramming/sql-advent-2012-here-is">SQL Advent 2012 series</a>, come back tomorrow for the next one, you can also check out all the posts from last year here: <a href="/index.php/DataMgmt/DataDesign/sql-advent-2011-recap">SQL Advent 2011 Recap</a></p>
]]></content:encoded>
			<wfw:commentRss>/index.php/datamgmt/dbprogramming/benefits-of-indexes/feed/</wfw:commentRss>
		<slash:comments>0</slash:comments>
		</item>
		<item>
		<title>SQL Advent 2012 Day 2: Data types storage differences</title>
		<link>/index.php/datamgmt/dbprogramming/data-types/</link>
		<comments>/index.php/datamgmt/dbprogramming/data-types/#comments</comments>
		<pubDate>Sun, 02 Dec 2012 15:53:00 +0000</pubDate>
		<dc:creator><![CDATA[SQLDenis]]></dc:creator>
				<category><![CDATA[Business Intelligence]]></category>
		<category><![CDATA[Database Programming]]></category>
		<category><![CDATA[Microsoft SQL Server]]></category>
		<category><![CDATA[Microsoft SQL Server Admin]]></category>
		<category><![CDATA[backup]]></category>
		<category><![CDATA[conversions]]></category>
		<category><![CDATA[log]]></category>
		<category><![CDATA[performance]]></category>
		<category><![CDATA[sql advent 2012]]></category>
		<category><![CDATA[sql server 2008]]></category>
		<category><![CDATA[sql server 2008 r2]]></category>
		<category><![CDATA[sql server 2012]]></category>
		<category><![CDATA[storage]]></category>

		<guid isPermaLink="false">/index.php/2012/12/data-types/</guid>
		<description><![CDATA[SQL Server has two data types to store character data, both of them come in fixed and variable length sizes. The char and varchar data type uses one byte of store to store one character, the nchar and nvarchar data type uses two bytes of store to store one character. The nchar and nvarchar data types are  used to store unicode of data]]></description>
				<content:encoded><![CDATA[<p>This is day two of the <a href="/index.php/DataMgmt/DBProgramming/sql-advent-2012-here-is">SQL Advent 2012 series</a> of blog posts. Today we are going to take a look at how data types can have an impact in queries and also the size of your database.</p>
<h2>Char vs NChar</h2>
<p>SQL Server has two data types to store character data[1], both of them come in fixed and variable length sizes. The char and varchar data type uses one byte of store to store one character, the nchar and nvarchar data type uses two bytes of store to store one character. The nchar and nvarchar data types are  used to store unicode of data</p>
<p>Let&#8217;s think about that for a second, what we are saying is that the char and varchar data type can store twice the number of characters in the same amount of store as the nchar and nvarchar data type. Why does this matter, space is cheap right?  True, space is getting cheaper but we are also storing more and more data every year.</p>
<p>Now think about what happens you have everything stored as unicode data</p>
<ul>
<li>What happens to your backup and restore process, will it be faster or slower, will the files be bigger if not compressed?</li>
<li>What about when transferring the results to and from your database server, are the packets able to store the same number of characters.</li>
<li>What about the amount of data on a page, what does this do to indexes and index lookups, how does it affect index maintenance?</li>
</ul>
<p><strong>If you don&#8217;t need it, then don&#8217;t use unicode data</strong>.<br />
Some examples of what I have seen stored in nchar and nvarchar when realy you shouldn&#8217;t:</p>
<p>Zip Code for US addresses<br />
US addresses<br />
Social Security Numbers (which were stored in plain text none the less)<br />
Integer data (enforced by constraints or the app layer to make sure these were only digits)</p>
<p>Let&#8217;s take a quick look by running some T-SQL</p>
<p>First create these two tables</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
</pre></td><td class="de1"><pre class="de1"><span class="kw1">CREATE</span> <span class="kw1">TABLE</span> TestChar <span class="br0">&#40;</span>SomeCol <span class="kw1">char</span><span class="br0">&#40;</span><span class="nu0">10</span><span class="br0">&#41;</span><span class="br0">&#41;</span>
GO
&nbsp;
<span class="kw1">CREATE</span> <span class="kw1">TABLE</span> TestNChar <span class="br0">&#40;</span>SomeCol <span class="kw1">nchar</span><span class="br0">&#40;</span><span class="nu0">10</span><span class="br0">&#41;</span><span class="br0">&#41;</span>
GO</pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">CREATE TABLE TestChar (SomeCol char(10))
GO

CREATE TABLE TestNChar (SomeCol nchar(10))
GO</pre></div></div>

<p>Now populate each with some data</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
</pre></td><td class="de1"><pre class="de1"><span class="kw1">INSERT</span> TestChar
<span class="kw1">SELECT</span> <span class="kw1">TOP</span> <span class="nu0">1000000</span> <span class="st0">'1234567890'</span>
<span class="kw1">FROM</span> sys.<span class="me1">sysobjects</span> c1
<span class="sy0">CROSS</span> <span class="sy0">JOIN</span> sys.<span class="me1">sysobjects</span> c2
<span class="sy0">CROSS</span> <span class="sy0">JOIN</span> sys.<span class="me1">sysobjects</span> c3
<span class="sy0">CROSS</span> <span class="sy0">JOIN</span> sys.<span class="me1">sysobjects</span> c4
GO
&nbsp;
<span class="kw1">INSERT</span> TestNChar
<span class="kw1">SELECT</span> <span class="kw1">TOP</span> <span class="nu0">1000000</span> <span class="st0">'1234567890'</span>
<span class="kw1">FROM</span> sys.<span class="me1">sysobjects</span> c1
<span class="sy0">CROSS</span> <span class="sy0">JOIN</span> sys.<span class="me1">sysobjects</span> c2
<span class="sy0">CROSS</span> <span class="sy0">JOIN</span> sys.<span class="me1">sysobjects</span> c3
<span class="sy0">CROSS</span> <span class="sy0">JOIN</span> sys.<span class="me1">sysobjects</span> c4
GO</pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">INSERT TestChar
SELECT TOP 1000000 '1234567890'
FROM sys.sysobjects c1
CROSS JOIN sys.sysobjects c2
CROSS JOIN sys.sysobjects c3
CROSS JOIN sys.sysobjects c4
GO

INSERT TestNChar
SELECT TOP 1000000 '1234567890'
FROM sys.sysobjects c1
CROSS JOIN sys.sysobjects c2
CROSS JOIN sys.sysobjects c3
CROSS JOIN sys.sysobjects c4
GO</pre></div></div>

<p>Let&#8217;s see how much space is used by both tables</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
</pre></td><td class="de1"><pre class="de1"><span class="kw1">EXEC</span> <span class="kw3">sp_spaceused</span> <span class="st0">'TestChar'</span>
&nbsp;
<span class="kw1">EXEC</span> <span class="kw3">sp_spaceused</span> <span class="st0">'TestNChar'</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">EXEC sp_spaceused 'TestChar'

EXEC sp_spaceused 'TestNChar'</pre></div></div>

<p>18,824 KB<br />
28,744 KB</p>
<p>If you looked at the reserved column, you will see that the nchar data is using 10 MB more than the char data</p>
<h2>Implicit conversions</h2>
<p>Besides the storage increase there is also a problem when querying for data that looks like varchar but is stored as unicode. Run the code below. </p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
</pre></td><td class="de1"><pre class="de1"><span class="kw1">SET</span> SHOWPLAN_TEXT <span class="kw1">ON</span>
GO
<span class="kw1">DECLARE</span> @v <span class="kw1">varchar</span><span class="br0">&#40;</span><span class="nu0">10</span><span class="br0">&#41;</span> <span class="sy0">=</span> <span class="st0">'0123456789'</span>
&nbsp;
<span class="kw1">SELECT</span> <span class="sy0">*</span> <span class="kw1">FROM</span> TestChar <span class="kw1">WHERE</span> SomeCol <span class="sy0">LIKE</span> &nbsp;@v <span class="sy0">+</span><span class="st0">'%'</span>
GO
&nbsp;
<span class="kw1">SET</span> SHOWPLAN_TEXT <span class="kw1">OFF</span>
GO</pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">SET SHOWPLAN_TEXT ON
GO
DECLARE @v varchar(10) = '0123456789'

SELECT * FROM TestChar WHERE SomeCol LIKE  @v +'%'
GO

SET SHOWPLAN_TEXT OFF
GO</pre></div></div>

<p>Here is the plan for that query</p>
<blockquote><p>|&#8211;Table Scan(OBJECT:([tempdb].[dbo].[TestChar]),<br />
WHERE:([tempdb].[dbo].[TestChar].[SomeCol] like [@v]+&#8217;%&#8217;))</p></blockquote>
<p>If we look at the plan we can see that this looks pretty good<br />
Usually people will sometimes change the datatype of a column but will not change any code that access this column. Let&#8217;s now change the data type of the column to nchar</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
</pre></td><td class="de1"><pre class="de1"><span class="kw1">ALTER</span> <span class="kw1">TABLE</span> TestChar <span class="kw1">ALTER</span> <span class="kw1">COLUMN</span> SomeCol <span class="kw1">nchar</span><span class="br0">&#40;</span><span class="nu0">10</span><span class="br0">&#41;</span>
GO</pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">ALTER TABLE TestChar ALTER COLUMN SomeCol nchar(10)
GO</pre></div></div>

<p>Run the query that gives you the plan again</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
</pre></td><td class="de1"><pre class="de1"><span class="kw1">SET</span> SHOWPLAN_TEXT <span class="kw1">ON</span>
GO
<span class="kw1">DECLARE</span> @v <span class="kw1">varchar</span><span class="br0">&#40;</span><span class="nu0">10</span><span class="br0">&#41;</span> <span class="sy0">=</span> <span class="st0">'0123456789'</span>
&nbsp;
<span class="kw1">SELECT</span> <span class="sy0">*</span> <span class="kw1">FROM</span> TestChar <span class="kw1">WHERE</span> SomeCol <span class="sy0">LIKE</span> &nbsp;@v <span class="sy0">+</span><span class="st0">'%'</span>
GO
&nbsp;
<span class="kw1">SET</span> SHOWPLAN_TEXT <span class="kw1">OFF</span>
GO</pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">SET SHOWPLAN_TEXT ON
GO
DECLARE @v varchar(10) = '0123456789'

SELECT * FROM TestChar WHERE SomeCol LIKE  @v +'%'
GO

SET SHOWPLAN_TEXT OFF
GO</pre></div></div>

<p>Here is the plan</p>
<blockquote><p>|&#8211;Table Scan(OBJECT:([tempdb].[dbo].[TestChar]),<br />
WHERE:([tempdb].[dbo].[TestChar].[SomeCol] like CONVERT_IMPLICIT(nvarchar(11),[@v]+&#8217;%&#8217;,0)))</p></blockquote>
<p>As you can see, there is a conversion going on right now.</p>
<p>In order to get rid of the conversion, use the correct data types</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
</pre></td><td class="de1"><pre class="de1"><span class="kw1">SET</span> SHOWPLAN_TEXT <span class="kw1">ON</span>
GO
<span class="kw1">DECLARE</span> @v <span class="kw1">nvarchar</span><span class="br0">&#40;</span><span class="nu0">10</span><span class="br0">&#41;</span> <span class="sy0">=</span> <span class="st0">'0123456789'</span>
&nbsp;
<span class="kw1">SELECT</span> <span class="sy0">*</span> <span class="kw1">FROM</span> TestChar <span class="kw1">WHERE</span> SomeCol <span class="sy0">LIKE</span> &nbsp;@v <span class="sy0">+</span><span class="st0">'%'</span>
GO
&nbsp;
<span class="kw1">SET</span> SHOWPLAN_TEXT <span class="kw1">OFF</span>
GO</pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">SET SHOWPLAN_TEXT ON
GO
DECLARE @v nvarchar(10) = '0123456789'

SELECT * FROM TestChar WHERE SomeCol LIKE  @v +'%'
GO

SET SHOWPLAN_TEXT OFF
GO</pre></div></div>

<p></p>
<h2>Using larger datatypes when it is not needed</h2>
<p>I see this problem mostly with the integer data types. Below is a list of the integer data types together with their storage size and range</p>
<p><strong>tinyint</strong><br />
Storage size is 1 byte. Integer data from 0 through 255. </p>
<p><strong>smallint</strong><br />
Storage size is 2 bytes. Integer data from -2^15 (-32,768) through 2^15 &#8211; 1 (32,767). </p>
<p><strong>int</strong><br />
Storage size is 4 bytes. Integer data from -2^31 (-2,147,483,648) through 2^31 &#8211; 1 (2,147,483,647). </p>
<p><strong>bigint</strong><br />
Storage size is 8 bytes. Integer data from -2^63 (-9,223,372,036,854,775,808) through 2^63-1 (9,223,372,036,854,775,807).</p>
<p>Now imagine facebook with a billion users decided to use bigint as CountryID in their Country table, this key is then uses as a foreign key in the user demographics table. This is wasteful,either use a smallint since we won&#8217;t go through 32 thousand countries in the forseeable feature or use the 2 or 3 character ISO code. The problem is even worse if you have a compound 6 column key and it is used as a foreign key in tons of other tables&#8230;that was real fun to clean up&#8230;.use a surrogate 1 column key in that case&#8230;but be sure to test&#8230;.normalize till it hurts then denormalize till it works&#8230;.I will cover normalization in another post&#8230;just wanted to mention it</p>
<p>That is all for day two of the SQL Advent 2012 series, come back tomorrow for the next one, you can also check out all the posts from last year here: <a href="/index.php/DataMgmt/DataDesign/sql-advent-2011-recap">SQL Advent 2011 Recap</a></p>
<p>[1]  I know there is text and ntext but hose are deprecated</p>
]]></content:encoded>
			<wfw:commentRss>/index.php/datamgmt/dbprogramming/data-types/feed/</wfw:commentRss>
		<slash:comments>1</slash:comments>
		</item>
		<item>
		<title>Latest article by SQL Server MVP Erland Sommarskog is a gem</title>
		<link>/index.php/datamgmt/datadesign/latest-article-by-sql-server/</link>
		<comments>/index.php/datamgmt/datadesign/latest-article-by-sql-server/#respond</comments>
		<pubDate>Mon, 21 Feb 2011 22:22:00 +0000</pubDate>
		<dc:creator><![CDATA[SQLDenis]]></dc:creator>
				<category><![CDATA[Data Modelling and Design]]></category>
		<category><![CDATA[Database Programming]]></category>
		<category><![CDATA[Microsoft SQL Server]]></category>
		<category><![CDATA[Microsoft SQL Server Admin]]></category>
		<category><![CDATA[how to]]></category>
		<category><![CDATA[performance]]></category>
		<category><![CDATA[sql server 2005]]></category>
		<category><![CDATA[sql server 2008]]></category>
		<category><![CDATA[ssms]]></category>
		<category><![CDATA[tip]]></category>

		<guid isPermaLink="false">/index.php/2011/02/latest-article-by-sql-server/</guid>
		<description><![CDATA[SQL Server MVP Erland Sommarskog has posted his latest article yesterday and I highly recommend printing it out/transferring it to your ebook reader and reading it.
Of course I think most of you are already familiar with Erland's article The curse and&#8230;]]></description>
				<content:encoded><![CDATA[<p>SQL Server MVP Erland Sommarskog has posted his latest article yesterday and I highly recommend printing it out/transferring it to your ebook reader and reading it.<br />
Of course I think most of you are already familiar with Erland&#8217;s article <a href="http://www.sommarskog.se/dynamic_sql.html">The curse and blessings of dynamic SQL</a>, this article I am sure will be linked in answers as much as the dynamic SQL one</p>
<p>Remember all those question you get where a query is fast in SSMS but slow from ADO.NET? Yep that pesky ARITHABORT setting which causes problem&#8230;this is covered in this article.</p>
<p>Here is the whole outline</p>
<p><strong> Introduction</strong><br />
      Presumptions<br />
   <strong>How SQL Server Compiles a Stored Procedure</strong><br />
      What is a Stored Procedure?<br />
      How SQL Server Generates the Query Plan<br />
      Putting the Query Plan into the Cache<br />
      Different Plans for Different Settings<br />
      The Default Settings<br />
      The Effects of Statement Recompile<br />
      The Story So Far<br />
   <strong>It&#8217;s Not Always Parameter Sniffing&#8230;</strong><br />
      Replacing Variables and Parameters<br />
      Blocking<br />
      Indexed Views and Indexed Computed Columns<br />
   <strong>Getting Information to Solve Parameter Sniffing Problems</strong><br />
      Getting the Necessary Facts<br />
      Which is the Slow Statement?<br />
      Getting the Query Plans and Parameters with Management Studio<br />
      Getting the Query Plans and Parameters Directly from the Plan Cache<br />
      Getting Query Plans and Parameters from a Trace<br />
      Getting Table and Index Definitions<br />
      Finding Information About Statistics<br />
   <strong>Examples of How to Fix Parameter-Sniffing Issues</strong><br />
      A Non-Solution<br />
      Best Index Depends on Input<br />
      Dynamic Search Conditions<br />
      Reviewing Indexing<br />
      The Case of the Application Cache<br />
      Fixing Bad SQL<br />
   <strong>How SQL Server Compiles Dynamic SQL</strong><br />
      What Is Dynamic SQL?<br />
      Generating the Plan for Dynamic SQL<br />
      Dynamic SQL and the Plan Cache<br />
      Running Application Queries in SSMS<br />
      Addressing Parameter-sniffing Problems in Dynamic SQL<br />
      Plan Guides<br />
   <strong>Further Reading</strong></p>
<p>You can find the article here: <a href="http://www.sommarskog.se/query-plan-mysteries.html">Slow in the Application, Fast in SSMS?<br />
Understanding Performance Mysteries</a>&#8230;.enjoy</p>
]]></content:encoded>
			<wfw:commentRss>/index.php/datamgmt/datadesign/latest-article-by-sql-server/feed/</wfw:commentRss>
		<slash:comments>0</slash:comments>
		</item>
		<item>
		<title>First glance at the new Red Gate SQL Monitor</title>
		<link>/index.php/datamgmt/dbadmin/red-gate-sql-monitor/</link>
		<comments>/index.php/datamgmt/dbadmin/red-gate-sql-monitor/#comments</comments>
		<pubDate>Thu, 30 Dec 2010 14:46:00 +0000</pubDate>
		<dc:creator><![CDATA[Ted Krueger (onpnt)]]></dc:creator>
				<category><![CDATA[Database Administration]]></category>
		<category><![CDATA[Microsoft SQL Server]]></category>
		<category><![CDATA[Microsoft SQL Server Admin]]></category>
		<category><![CDATA[performance]]></category>
		<category><![CDATA[red gate]]></category>
		<category><![CDATA[sql monitor]]></category>
		<category><![CDATA[sql server]]></category>

		<guid isPermaLink="false">/index.php/2010/12/red-gate-sql-monitor/</guid>
		<description><![CDATA[My first glance rating of SQL Monitor (1 to 5) is a solid 4. That is extremely high for me as I am hard on tools like this and the footprint they leave on my systems. As such, this monitoring tool as replaced my others and taken the spotlight as my primary tool to use. Cost + functionality + value make this a winner. The post on the footprint SQL Monitor leaves is the winning factor so look for it soon.]]></description>
				<content:encoded><![CDATA[<p><strong></p>
<p>Monitoring SQL Server</p>
<p></strong></p>
<p><a href="http://www.red-gate.com/products/dba/sql-monitor/">
<div class="image_block"><a href="/media/blogs/DataMgmt/.png?mtime=1293723940"><img src="/wp-content/uploads/blogs/DataMgmt/.png?mtime=1293723940" alt="" width="151" height="200" align="left" /></a></div>
<p></a></p>
<p>Monitoring SQL Server, or for that matter, any database server, is a critical aspect to a DBA or team that is hosting data services. In order to maintain a successful percentage of uptime, we as DBAs must rely on tools like this to manage alerts, performance baselines and the historic collection of statistics. All of these points can be accomplished without a boxed tool but the efforts that go into customizing them on our own outweigh the cost of the products themselves. A DBAs time is money spent with little return. This is a hardened fact that we have to accept. We do not provide a product to sell or a return in revenue. What we return in value is a constant flow of data to the business continuity. When we spend our time working more efficiently and budgeting our resources better, we as DBAs are more successful and obtain the value we look to achieve.</p>
<p>In this post I will show how Red Gate and the new <a href="http://www.red-gate.com/products/dba/sql-monitor/">SQL Monitor</a> can help us achieve that goal. As a personal note, I have been as impressed with <a href="http://www.red-gate.com/products/dba/sql-monitor/">SQL Monitor</a> as I was with the older SQL Response tool. The effect a monitoring tool leaves on my SQL Server instances is just as important as the value it adds to them. Red Gate has done a very good job at making that equation come to a winning result.</p>
<p><strong></p>
<p>Installing SQL Monitor</p>
<p></strong></p>
<p>Installing some products can be a painful process. This pain can be from confusion and requirements for hardware or added licensing for other products to support it. In reality, the most successful process of installing a product is when clicking Next, Next, Finish results in a working product after the click of the finish button. SQL Monitor. Let’s go over some aspects that were noticed during the process.</p>
<p><strong></p>
<p>Installation high points</p>
<p></strong></p>
<ul>
<li>You can install the base monitor and web server on separate physical servers</li>
<li>Big one: you can use IIS or use an XPS web server that is packaged with the installer </li>
<li>Customized port settings if you have ports that are taken on the web server or database server you use for SQL Monitor.</li>
<li>This installation used SQL Express as the repository database for SQL Monitor. This availability means that an added license for SQL Server is not required if you stay under the limitation of SQL Express.</li>
<li>Setup is, as with most Red Gate products, easy and clear.</li>
</ul>
<p>To login you will need to create a password. The needs for the password were a little unclear but later it is clear upon logging out of the monitor and back in. When logging in, all you need is a password. That was a little surprising since I picked windows authentication for everything during the setup. Not 100% sure I like the fact that there isn’t a user account so then multiple users could be controlled for accessing the monitor.</p>
<div class="image_block"><a href="/media/blogs/DataMgmt/-1.png?mtime=1293723941"><img src="/wp-content/uploads/blogs/DataMgmt/-1.png?mtime=1293723941" alt="" width="567" height="102" /></a></div>
<p>On startup, adding servers is pretty clear as far as how to do it. There is a convenient dialog shown so you do not have to hunt and peck for adding your servers to the monitor at first.</p>
<p>A note on adding servers that I think could be added to the process: the monitor does not seem to check for the actual existence of the instance before adding it to the monitored servers listing. I would like to see an option to install the instance if it is not readily pinged. The primary reason for this would be typos and misspelling the instance name. If you make the mistake, you will need to go through removing the instance to fix it.</p>
<p>For example: I added an instance to the Monitor that was named, foo. This instance does not exist but it went through registering it and entering it into the Monitor’s database for me to later clean up.</p>
<p>By default the monitor looks for a default instance as well. That was a nice feature. Makes sure you monitor the instance you installed the DB on (as it appears). Only thing was, I didn’t have a default instance so it showed a big red x when one wasn’t needed.</p>
<p>One instance (a SQL Express instance) failed to register. Error: Bad Data. </p>
<p>Looking at the comprehensive list of events when it was registering showed, “Perfmon data is missing objects: MSSQL$SQLEXPRESS:Access Method. Possible causes include performance counter library corruption, or a 32-bit/64-bit mismatch between Windows and the performance counter provider (e.g. SQL Server).”</p>
<p> The machine that SQL Monitor was tested on also had SQL Express x86 and SQL Express x64 installed. I can only come to the conclusion that this is the direct problem after exhausting my efforts to bring the instance up in Monitor successfully. The concept of mixing the two platform specific SQL Server installations is very rare so I do not feel this is a bad point for the Monitor. As I would expect, the instance that survived the registration in Monitor was the 64 bit version that matches the Windows platform. I will later test this on a full installation of SQL Server x86 on a x64 windows installation as that is a common of a setup. Even with this failure to register the SQL Express instance completely, it appeared that the instance was being monitored to some extent. Databases were shown and alerts generated for backups missing and other useful alerts.</p>
<p>I will let the team know of my findings in hope it will be helpful in possibly making this available.</p>
<p><strong></p>
<p>First thing I want setup</p>
<p></strong></p>
<p>There are a few things that I as a DBA want setup before doing anything else. One of those is email alerts. Let’s be honest, there is only so much time in a day and opening a tool and looking at everything is not as easy as it sounds. Email alerting is a must when it comes to our instances. When SQL Monitor was finished installing and I logged in, there was a nice view of four tabs that I had available. One of those tabs was, “configuration”. A thorn in any product is when configuring it is painful or so complex that you simply do not set it up just how you want it. Sometimes that even goes as far as getting to configuration settings. SQL Monitor makes this entire process easy and clear.</p>
<p><strong></p>
<p>Setting up email alerts</p>
<p></strong></p>
<p>To setup the email alerts, go into the configuration page and click, “Email settings”. Enter all your information for where to send emails, the sender (which I made, SQLMonitor@mydomain.com) and then mail server settings.</p>
<p>Next, make sure you setup your alerts and what you want to be alerted on. Trust me, your inbox will be filled with alerts that you just don’t want in there. When I say filled, I mean filled. It is good that SQL Monitor has a default listing of what to email out. I like this very much for a more junior level position where the question may be raised on what really is important.</p>
<div class="image_block"><a href="/media/blogs/DataMgmt/-2.png?mtime=1293723941"><img src="/wp-content/uploads/blogs/DataMgmt/-2.png?mtime=1293723941" alt="" width="624" height="199" /></a></div>
<p><strong></p>
<p>Let’s take a tour</p>
<p></strong></p>
<p>The first things we all do when installing a new product is take a tour. At first glance the home page shows a very nice representation of how the monitored SQL Server instances are performing.</p>
<div class="image_block"><a href="/wp-content/uploads/blogs/DataMgmt/sqlmonitor_4.gif?mtime=1293726680"><img alt="" src="/wp-content/uploads/blogs/DataMgmt/sqlmonitor_4.gif?mtime=1293726680" width="624" height="284" /></a></div>
<p>As you can see, my instances aren’t doing very well.</p>
<p>The first thing we notice is the SQL Server Agent Service Status alerts. This is alerting me on the agent status for SQL Express. SQL Express is a sore spot again here. The agent service is, if you will, an unusable service installed with SQL Express. This is probably the reasoning for the alert showing as this service does not function as other more comprehensive editions.</p>
<p>Each page view that you are brought to by clicking all of the instances has been setup to perform one task: show you what you need to know and what matters. This goes to SQL Monitor really taking into account what we as DBAs want and need to see for a monitoring system and troubleshooting tool.</p>
<p>From the below snapshot we can see that primary status of the instance is shown, the level of alerts on the instance, alerts we have been ignoring, database status and the level of alerting that the instance has raised.</p>
<p>The level of the alert status is critical. A DBAs day is busy and having to dig into all instances with any alert is a handicap. When time is slim for proactively checking all of your SQL Server instances, having a “High” alerting process with the easy to point out view of that status is extremely helpful. As you can see from my High alert status on the instance below, that is provided right away in SQL Monitor.</p>
<div class="image_block"><a href="/wp-content/uploads/blogs/DataMgmt/sqlmonitor_5.gif?mtime=1293726680"><img alt="" src="/wp-content/uploads/blogs/DataMgmt/sqlmonitor_5.gif?mtime=1293726680" width="624" height="383" /></a></div>
<p><strong></p>
<p>Disk Space</p>
<p></strong></p>
<p>Disk space is probably one the high points in my work helping others with system problems. SQL Server installations not configured correctly often cause disk space to run low. Log file growth, backup plans etc… all can cause disk space to run low very quickly.</p>
<div class="image_block"><a href="/media/blogs/DataMgmt/-5.png?mtime=1293723944"><img src="/wp-content/uploads/blogs/DataMgmt/-5.png?mtime=1293723944" alt="" width="624" height="35" /></a></div>
<p>The alert above is indicating I have an extreme issue with disk space that needs to be looked at quickly. Clicking the alert shows a very good representation of where my disk is going along with the statistics of what is used and what is available. To go further in-depth of the disk utilization; SQL Monitor shows information that is invaluable for analyzing disk usage. The performance data section that is shown starts with the host machine and shows counters:</p>
<ul>
<li>Machine: processor time (%)</li>
<li>Avg. disk queue length</li>
<li>Avg. CPU queue length</li>
<li>Machine: memory used (%)</li>
<li>Disk transfers/sec</li>
<li>Memory pages/sec</li>
</ul>
<p>These main performance counters are all counters that DBAs focus on for a high-level representation of how disk is performing. You can tell from this that the SQL Monitor team at Red Gate put experienced DBA feedback to use in what to show first for navigating disk performance.</p>
<p>Navigating through the other performance tabs shows more required counters for monitoring SQL Server, System processes and SQL processes/Profiler traces from a high vantage point.</p>
<p>The graphs made available for a quick view of how things are running are also very well done. As a DBA with experience using many monitoring tools and understanding that the important part to alerts and fixing problems; the concept of animations or big and shiny pictures is not something I myself am concerned with. What I want as a DBA is a quick and thin representation of where a problem is. SQL Monitor provides just that in a thin and meaningful graph of the state of the counters you are viewing. The last thing a DBA wants to wait for while looking for a problem is a period of time they need to wait while graphs are loaded. Added to the graphs are quick tooltips of the timeframes in which a value of that timeframe can be viewed without digging into the graphs details.</p>
<div class="image_block"><a href="/media/blogs/DataMgmt/-6.png?mtime=1293723944"><img src="/wp-content/uploads/blogs/DataMgmt/-6.png?mtime=1293723944" alt="" width="624" height="262" /></a></div>
<p><strong></p>
<p>Making alert tasks</p>
<p></strong></p>
<p>A monitoring system for SQL Server is enhanced by becoming a task repository. Let’s face the fact that through the day DBAs can and often have a large amount of tasks, alert and solutions that are handed to us. Reviewing alerts and acting on them right then and there is just not feasible at times. SQL Monitor has a great function in which you can comment on all the views to manage tasks for scheduling traces, assigning to others or adding comments to mention why a spike or alert occurred.</p>
<p>For example: in a performance data view of SQL Server on my monitor, an alert was raised around 6:28AM for high wait times. I could have dug into management objects and historic data of the processes and transactions that were hitting my database server at that time but alas, I was required to get a project out at the same time. Since the wait time was a spike and released, I can add a comment that a trace will be scheduled to capture all the information I need to resolve the high waits or check it off as a onetime issue.</p>
<div class="image_block"><a href="/media/blogs/DataMgmt/-7.png?mtime=1293723945"><img src="/wp-content/uploads/blogs/DataMgmt/-7.png?mtime=1293723945" alt="" width="620" height="430" /></a></div>
<p>This is one of the most useful functions I believe in monitoring systems since my memory is not that great and as many know, I am horrible at writing things down.</p>
<p><strong></p>
<p>View a database</p>
<p></strong></p>
<p>Let’s think of a high-level database view in a few ways</p>
<ol>
<li>Information to better help us quickly troubleshoot issues</li>
<li>Documentation</li>
<li>Quickly determine configuration changes that are needed</li>
</ol>
<p>The first point is covered extremely well with Monitor. Looking at this information from the perspective of both a DBA and a person that helps often on forums and other technical resources, the information here is invaluable to me as the person helping. Take log growth for example. Log growth is a question that is asked very often and why logs may be growing out of control. The information I would require to help someone in determining the reasons at a high-level are right in front of you with the database view in Monitor.</p>
<ol>
<li>Recovery model</li>
<li>Max size</li>
<li>Current size</li>
<li>Autogrowth</li>
<li>Auto shrink</li>
<li>Active transactions</li>
</ol>
<p>All of this information is a must to make a first round suggestion on why a log file may be growing rapidly. Something that would help this view greatly would be a last backup column in the File area. This comes out of the question, “Why is my log growing out of control”. Failure to back up your logs in Full recovery model is typically the reason for that.</p>
<div class="image_block"><a href="/media/blogs/DataMgmt/-8.png?mtime=1293723945"><img src="/wp-content/uploads/blogs/DataMgmt/-8.png?mtime=1293723945" alt="" width="541" height="400" /></a></div>
<p><strong></p>
<p>The SQL Server error log</p>
<p></strong></p>
<p>The last thing I want to cover on SQL Monitor in this opener to a series on the product is the SQL Server error log section. SQL Monitor has in the default page view of each instance that is being monitored a section near the bottom for the error log entries. The helpful thing about this section is the fact that the entries are parsed out to only show the values that are pertinent to the instance you are viewing. I know that I have spent a lot of time writing either custom scripts, SSIS packages and Posh scripts to provide this information to me in a readily available format. Either that or you load the extremely slow snap-in from SSMS to search the logs.</p>
<p>The SQL Server error logs have a great deal of useful information in them when it comes to a quick view to find problems or while analyzing problems. SQL Monitor adding this to the opening page of each instance is a great idea.</p>
<div class="image_block"><a href="/wp-content/uploads/blogs/DataMgmt/sqlmonitor_10.gif?mtime=1293726680"><img alt="" src="/wp-content/uploads/blogs/DataMgmt/sqlmonitor_10.gif?mtime=1293726680" width="624" height="151" /></a></div>
<p><strong></p>
<p>Part 1 comes to a close</p>
<p></strong></p>
<p>As I mentioned in the opening of this post, there are going to be a series of posts to come on SQL Monitor. This was the opening to the new product from Red Gate and my initial thoughts on some high points of the setup process and first glance. The next post that will follow will dig into the values that are collected be SQL Monitor and the value as a monitoring system they provide. The last will go over the internals of SQL Monitor. Internals will go over how SQL Monitor is collecting the information it is showing us and how it affects the database server we host the database it uses to retain all of these collections.</p>
<p>My first glance rating of SQL Monitor (1 to 5) is a solid 4. That is extremely high for me as I am hard on tools like this and the footprint they leave on my systems. As such, this monitoring tool as replaced my others and taken the spotlight as my primary tool to use. Cost + functionality + value make this a winner. The post on the footprint SQL Monitor leaves is the winning factor so look for it soon.</p>
]]></content:encoded>
			<wfw:commentRss>/index.php/datamgmt/dbadmin/red-gate-sql-monitor/feed/</wfw:commentRss>
		<slash:comments>3</slash:comments>
		</item>
	</channel>
</rss>
