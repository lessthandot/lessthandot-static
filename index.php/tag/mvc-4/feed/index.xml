<?xml version="1.0" encoding="UTF-8"?><rss version="2.0"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:atom="http://www.w3.org/2005/Atom"
	xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
	xmlns:slash="http://purl.org/rss/1.0/modules/slash/"
	>

<channel>
	<title>mvc 4 &#8211; LessthanDot</title>
	<atom:link href="/index.php/tag/mvc-4/feed/" rel="self" type="application/rss+xml" />
	<link>/</link>
	<description>A Technical Community for IT Professionals</description>
	<lastBuildDate>Sat, 09 Mar 2019 12:50:36 +0000</lastBuildDate>
	<language>en-US</language>
	<sy:updatePeriod>hourly</sy:updatePeriod>
	<sy:updateFrequency>1</sy:updateFrequency>
	<generator>https://wordpress.org/?v=4.6.1</generator>
	<item>
		<title>ASP.NET MVC 4 Razor Starter Guide &#8211; How to avoid punching your Laptop to Death</title>
		<link>/index.php/webdev/uidevelopment/ajax/asp-net-mvc-4-razor-starter/</link>
		<comments>/index.php/webdev/uidevelopment/ajax/asp-net-mvc-4-razor-starter/#comments</comments>
		<pubDate>Mon, 02 Dec 2013 01:16:00 +0000</pubDate>
		<dc:creator><![CDATA[Tahir Khalid]]></dc:creator>
				<category><![CDATA[AJAX]]></category>
		<category><![CDATA[$ not defined]]></category>
		<category><![CDATA[asp.net]]></category>
		<category><![CDATA[c#]]></category>
		<category><![CDATA[mvc 4]]></category>
		<category><![CDATA[razor]]></category>
		<category><![CDATA[starter guide]]></category>

		<guid isPermaLink="false">/index.php/2013/12/asp-net-mvc-4-razor-starter/</guid>
		<description><![CDATA[Hello and welcome to my seocond blog post for LessThanDot (I think) and in this post I will discuss how to setup a working ASP.NET MVC 4 (with Razor) project using the Empty Template.
That's right, a blank project, I didn't want the templates doing the&#8230;]]></description>
				<content:encoded><![CDATA[<p>Hello and welcome to my blog post for LessThanDot and in this post I will discuss how to setup a working ASP.NET MVC 4 (with Razor) project using the Empty Template.</p>
<p>That&#8217;s right, a blank project, I didn&#8217;t want the templates doing the work for me, I wanted to create a lean project that I had control over and I thought this would be easy enough but I was very wrong and tripped over a couple of times so hopefully this post will avoid any confusion and pain for newbies to the world of ASP.NET MVC (and avoid having to punch their laptop to death).</p>
<p>&#8220;Wait you punched your laptop to death?!&#8221;</p>
<p><img src="http://www.vurso.co.uk/ltd/mvc-4-with-razor-starter-guide/punchedmylaptoptodeath.jpg" alt="Punched My Laptop To Death @ vurso.co.uk" width="350" height="85" /></p>
<p>Yes, metaphorically speaking as per my above tweet&#8230;I came close to actually doing it in real life, that&#8217;s how frustrated I was but alas frustration can often lead to lots of fun learning which I did in between the random expletives and &#8220;WTF!&#8221; shouts throughout this process.</p>
<p>So lets start, the first thing you want to do is <span style="background-color: #ffcc00;">NOT USE THE TEMPLATES!</span> I know I know, sounds crazy but trust me you want to do it right and this is the best way my friends.</p>
<p>Start Visual Studio 2012 and then select the ASP.NET MVC 4 project type:</p>
<p><img src="http://www.vurso.co.uk/ltd/mvc-4-with-razor-starter-guide/aspdotnetmvc4projtype.JPG" alt="ASP.NET MVC 4 Project Type" width="350" height="35" /></p>
<p>Give the project a meaningful name and then left-click the OK button to continue. You will then be presented with the following screen (Project Tempaltes), select the <span style="background-color: #99ccff;">Empty</span> Project type and left-click OK to continue.</p>
<p><img src="http://www.vurso.co.uk/ltd/mvc-4-with-razor-starter-guide/projecttemplates.jpg" alt="ASP.NET MVC 4 Project Templates" width="280" height="165" /></p>
<p>If everything goes to plan Visual Studio will start generating your project folders and files and present you with the Empty Solution:</p>
<p><img src="http://www.vurso.co.uk/ltd/mvc-4-with-razor-starter-guide/emptysolution.jpg" alt="ASP.NET MVC 4 Empty Solution" width="185" height="180" /></p>
<p>You will need to do a few things first before the project can actually work (i.e. if you want to use any kind of JavaScript/jquery/ajax and Web Content).  First we need to add some folders so right-click the project name (MvcApplication3 fro example) and select <span style="background-color: #99ccff;">Add &gt; </span><span style="background-color: #99ccff;">New Folder</span> and label it <span style="background-color: #99ccff;">Scripts</span> (or alternatively if you have created another template based MVC site such as the Internet one just drag the Scripts folder from Windws Explorer into your Visual Studio 2012 IDE and drop it onto the project name which will cause Visual Studio 2012 to take a copy of the folder and create it locally with files below your project).</p>
<p>Expand the Views folder which currently only has the web.config file.  Right-click the Views folder and select <span style="background-color: #99ccff;">Add &gt; </span><span style="background-color: #99ccff;">New Folder</span> labelling it <span style="background-color: #99ccff;">Home</span>.  Create another one and call it <span style="background-color: #99ccff;">Shared</span>, these two folders will contain the default views Index.cshtml and _Layout.cshtml (the shared view is like the MasterPage from the previous ASP.NET Form development days, it is used as a global view providing common page structure and other features across your views).</p>
<p>Now the important bit, you need to download the correct Web.Optimization package as its not included in your project and trying to create, build and compile any kind of web enabled page will cause no end of grief no less messages such as:</p>
<p><span style="font-size: 14px; line-height: 18px; background-color: #eeeeee;"><span style="font-family: 'courier new', courier;">Compiler Error Message: CS0103: The name &#8216;Scripts&#8217; does not exist in the current context</span></span></p>
<p>You may also see initial errors such as:</p>
<p><span style="font-size: 14px; line-height: 18px; background-color: #eeeeee;"><span style="font-family: 'courier new', courier;">$ is not defined</span></span></p>
<p>All these can be avoided by running the following command from the nuget package manager command line.  To access the command line you need to display the command window:</p>
<p><img src="http://www.vurso.co.uk/ltd/mvc-4-with-razor-starter-guide/nugetcommandline.jpg" alt="nuget Package Manager Command Line" width="434" height="185" /></p>
<p>Left-clicking the Command Line option will display a new command window at the bottom of your IDE which lets you enter nuget package manager specific commands.  Enter the following command to download the correct package for your project:</p>
<p><img src="http://www.vurso.co.uk/ltd/mvc-4-with-razor-starter-guide/nugetpackageget.jpg" alt="Get nuget package from Visual Studio 2012" width="321" height="100" /></p>
<p>Once the package has been downloaded you will need to configure your <span style="background-color: #99ccff;">Web.Config</span> files, <span style="background-color: #99ccff;">Global.asax</span> file and add a new class in the <span style="background-color: #99ccff;">App_Start</span> folder so lets do this now.</p>
<p>Open up your root Web.config file and add the following line below the other namespaces (in the pages &gt; namespaces section):</p>
<pre style="font-family: Consolas; font-size: 13; color: #dfdfbf; background: #333333;"><span style="font-size: small;">&lt;<span style="color: #efc986;">add</span> namespace="<span style="color: #dfaf8f;">System.Web.WebPages</span>" /&gt;</span><span style="font-family: Consolas;">
</span></pre>
<p>You will also need to do the same for your other web.config file located in the root of the Views folder.</p>
<p>Next you need to modify your <span style="background-color: #99ccff;">Global.asax</span> file located in the root of the project and add the following line below the other statements in the <span style="background-color: #99ccff;">Application_Start()</span> method:</p>
<pre style="font-family: Consolas; font-size: 13; color: #dfdfbf; background: #333333;"><span style="font-size: small;"><span style="color: #8acccf;">BundleConfig</span>.RegisterBundles(<span style="color: #8acccf;">BundleTable</span>.Bundles);</span><span style="font-family: Consolas;">
</span></pre>
<p>Now you need to add a new class called BundleConfig.cs in the App_Start folder.  Modify the using block to look like this:</p>
<pre style="color: #dfdfbf; background-color: #333333; background-position: initial initial; background-repeat: initial initial;"><span style="font-size: small;"><span style="color: #efc986;">using</span> System.Web;
<span style="color: #efc986;">using</span> System.Web.Optimization;</span></pre>
<p>Modify the contents of the class block to look like this:</p>
<pre style="color: #dfdfbf; background-color: #333333; background-position: initial initial; background-repeat: initial initial;"><span style="font-size: small;"><span style="color: #7a987a;">// For more information on Bundling, visit http://go.microsoft.com/fwlink/?LinkId=254725</span>
<span style="color: #efc986;">public</span> <span style="color: #efc986;">static</span> <span style="color: #efc986;">void</span> RegisterBundles(<span style="color: #8acccf;">BundleCollection</span> bundles)
{
    bundles.Add(<span style="color: #efc986;">new</span> <span style="color: #8acccf;">ScriptBundle</span>(<span style="color: #dfaf8f;">"~/bundles/jquery"</span>).Include(
                <span style="color: #dfaf8f;">"~/Scripts/jquery-{version}.js"</span>));
 
    bundles.Add(<span style="color: #efc986;">new</span> <span style="color: #8acccf;">ScriptBundle</span>(<span style="color: #dfaf8f;">"~/bundles/jqueryui"</span>).Include(
                <span style="color: #dfaf8f;">"~/Scripts/jquery-ui-{version}.js"</span>));
 
    bundles.Add(<span style="color: #efc986;">new</span> <span style="color: #8acccf;">ScriptBundle</span>(<span style="color: #dfaf8f;">"~/bundles/jqueryval"</span>).Include(
                <span style="color: #dfaf8f;">"~/Scripts/jquery.unobtrusive*"</span>,
                <span style="color: #dfaf8f;">"~/Scripts/jquery.validate*"</span>));
 
    <span style="color: #7a987a;">// Use the development version of Modernizr to develop with and learn from. Then, when you're</span>
    <span style="color: #7a987a;">// ready for production, use the build tool at http://modernizr.com to pick only the tests you need./</span>
    bundles.Add(<span style="color: #efc986;">new</span> <span style="color: #8acccf;">ScriptBundle</span>(<span style="color: #dfaf8f;">"~/bundles/modernizr"</span>).Include(
                <span style="color: #dfaf8f;">"~/Scripts/modernizr-*"</span>));
}</span></pre>
<p>Now save the file and we need to create a controller file and two view pages.  Right-click the Controllers folder and left-click on <span style="background-color: #99ccff;">Add &gt; Controller&#8230;</span> to display the New Controller dialog:</p>
<p><img src="http://www.vurso.co.uk/ltd/mvc-4-with-razor-starter-guide/newcontroller.jpg" alt="New MVC 4 Controller" width="280" height="145" /></p>
<p>Give it the name <span style="background-color: #99ccff;">HomeController</span> and left-click on Add to continue.  Now we need to create the Index view the controller will work with.  Before we do that we need to create a view that will <a title="ASP.NET MVC 3: Layouts with Razor" href="http://weblogs.asp.net/scottgu/archive/2010/10/22/asp-net-mvc-3-layouts.aspx" target="_blank">&#8220;automagically&#8221; assign the same razor layout</a> to all your views so right-click the <span style="background-color: #99ccff;">Views</span> folder and left-click on <span style="background-color: #99ccff;">Add &gt; View&#8230;</span> (VS 2012 is clever enough to recognise the context you&#8217;re in, in this case the Views folder).  The Add View dialog box will appear:</p>
<p><img src="http://www.vurso.co.uk/ltd/mvc-4-with-razor-starter-guide/addview.jpg" alt="ASP.NET MVC 4 Add View" width="200" height="252" /></p>
<p>Make sure you un-tick the &#8220;Use a layout or master page:&#8221; checkbox (as all your views will be using this <span style="background-color: #99ccff;">_ViewStart</span> file).</p>
<p>Now modify the file to look like this:</p>
<pre style="color: #dfdfbf; background-color: #333333; background-position: initial initial; background-repeat: initial initial;"><span style="font-size: small;">@{
    Layout = <span style="color: #dfaf8f;">"~/Views/Shared/_Layout.cshtml"</span>;
}</span></pre>
<p>Next we need to create the Index View so right-click the Home folder (the one you created earlier) and select <span style="background-color: #99ccff;">Add &gt; View&#8230;</span> to display the Add View dialog box and label this view page <span style="background-color: #99ccff;">Index</span> and finally left-click Add to create it.</p>
<p>Modify the contents of the file to look like this:</p>
<pre style="color: #dfdfbf; background-color: #333333; background-position: initial initial; background-repeat: initial initial;"><span style="font-size: small;">@{
    ViewBag.Title = <span style="color: #dfaf8f;">"My first LTD Mvc 4 Index Page"</span>;
}
@<span style="color: #efc986;">using</span> (Html.BeginForm())
{
     &lt;<span style="color: #efc986;">h1</span>&gt;Hello, World!&lt;/<span style="color: #efc986;">h1</span>&gt;
}</span></pre>
<p>Finally you need to create the shared layout view page, right-click the <span style="background-color: #99ccff;">Shared</span> folder and left-click <span style="background-color: #99ccff;">Add &gt; View&#8230;</span> to display the Add View dialog box, label the view page as <span style="background-color: #99ccff;">_Layout</span> and ensure as with the previous pages the &#8220;Use a layout or master page&#8221; checkbox is un-ticked.</p>
<p>Modify the <span style="background-color: #99ccff;">_Layout.cshtml</span> view page to look like this:</p>
<pre style="color: #dfdfbf; background-color: #333333; background-position: initial initial; background-repeat: initial initial;"><span style="font-size: small;">&lt;!<span style="color: #efc986;">DOCTYPE</span> html&gt;
&lt;<span style="color: #efc986;">html</span> lang=<span style="color: #dfaf8f;">"en"</span>&gt;
&lt;<span style="color: #efc986;">head</span>&gt;
    &lt;<span style="color: #efc986;">meta</span> name=<span style="color: #dfaf8f;">"viewport"</span> content=<span style="color: #dfaf8f;">"width=device-width"</span> /&gt;
    &lt;<span style="color: #efc986;">title</span>&gt;@ViewBag.Title&lt;/<span style="color: #efc986;">title</span>&gt;
&lt;/<span style="color: #efc986;">head</span>&gt;
&lt;<span style="color: #efc986;">body</span>&gt;
    &lt;<span style="color: #efc986;">div</span>&gt;
        @RenderBody()
    &lt;/<span style="color: #efc986;">div</span>&gt;
    @<span style="color: #8acccf;">Scripts</span>.Render(<span style="color: #dfaf8f;">"~/bundles/jquery"</span>)
    @RenderSection(<span style="color: #dfaf8f;">"scripts"</span>, required: <span style="color: #efc986;">false</span>)
&lt;/<span style="color: #efc986;">body</span>&gt;
&lt;/<span style="color: #efc986;">html</span>&gt;</span></pre>
<p>This should be enough for you to compile the project however it will still cause you pain unless you save your project and restart Visual Studio 2012, after which the references and page helpers should kick into life.</p>
<p>Build and Compile your project and then press <span style="background-color: #99ccff;">F5</span> or click on the <span style="background-color: #99ccff;">Debug</span> button to fire up your project, if all has gone well you should see a simple page with the words &#8220;Hello, World!&#8221; across the top left.</p>
<p>Well done, now go make a cup of tea and eat some digestives.</p>
]]></content:encoded>
			<wfw:commentRss>/index.php/webdev/uidevelopment/ajax/asp-net-mvc-4-razor-starter/feed/</wfw:commentRss>
		<slash:comments>1</slash:comments>
		</item>
		<item>
		<title>Upgrading from MVC3 to MVC4 and MVC4 Async</title>
		<link>/index.php/webdev/serverprogramming/aspnet/upgrading-from-mvc3-to-mvc4/</link>
		<comments>/index.php/webdev/serverprogramming/aspnet/upgrading-from-mvc3-to-mvc4/#comments</comments>
		<pubDate>Tue, 16 Jul 2013 18:00:00 +0000</pubDate>
		<dc:creator><![CDATA[Eli Weinstock-Herman (tarwn)]]></dc:creator>
				<category><![CDATA[ASP.NET]]></category>
		<category><![CDATA[asp.net]]></category>
		<category><![CDATA[load test]]></category>
		<category><![CDATA[mvc 4]]></category>
		<category><![CDATA[mvc music store]]></category>

		<guid isPermaLink="false">/index.php/2013/07/upgrading-from-mvc3-to-mvc4/</guid>
		<description><![CDATA[The other day I succumbed to the urge to upgrade my customized version of MVC Music store from ASP.Net MVC3 to MVC4. I had just finished watching Steve Sanderson's excellent TechDays 2012 session, C#5, ASP.NET MVC 4, and asynchronous Web applications (if you're doing ASP.Net MVC and haven't watched it, queue it up, awesome presentation).]]></description>
				<content:encoded><![CDATA[<p>The other day I succumbed to the urge to upgrade my customized version of <a href="/index.php/All/mvc+music+store:" title="All LTD blog posts on MVC Music Store">MVC Music store</a> from ASP.Net MVC3 to MVC4. I had just finished watching Steve Sanderson&#8217;s excellent TechDays 2012 session, <a href="http://channel9.msdn.com/Events/TechDays/Techdays-2012-the-Netherlands/2287" title="C#5, ASP.NET MVC 4, and asynchronous Web applications on Channel9">C#5, ASP.NET MVC 4, and asynchronous Web applications</a> (if you&#8217;re doing ASP.Net MVC and haven&#8217;t watched it, queue it up, awesome presentation). During the presentation, Steve used Apache Bench to show the improvements as he upgraded his small project from synchronous MVC4 to asynchronous MVC4, which got me wondering what effect MVC4 and Asynchronous MVC4 would show during the <a href="/index.php/EnterpriseDev/application-lifecycle-management/continuous-delivery-adding-the-load" title="Continuous Delivery - Adding the Load testing Stage">wcat load test step</a> in my MVC Music Store build process.</p>
<h2>The Upgrade to MVC4</h2>
<p>Upgrading from MVC3 to MVC4 was easy. I followed the instructions from the <a href="http://www.asp.net/whitepapers/mvc4-release-notes#_Toc303253806">MVC4 release notes</a> and committed my changes. </p>
<p>I installed Visual Studio 2012 on my build server (including .Net 4.5) so the build would run. Installing a copy on build servers is allowed under visual studio licensing models and while some people try to create a &#8216;pure&#8217; non-VS build experience, I think the only advantage one gets from this model is ensuring the production application is compiled in a different manner from the one the developers built and tested under.</p>
<p>VS upgraded, .Net upgraded, MVC upgraded, time to commit and push.</p>
<p>Build running, deploying for smoke test, failed. Page Won&#8217;t Load.</p>
<h3>Still Copying MVC3 DLLs to Build Output</h3>
<p>The CI build step runs the build and creates a publishable package that will be archived for all later build stages and final deployment. The last step of the CI stage deploys the package to a VM and does an HTTP GET on the front page, just to ensure it&#8217;s deployable. Turns out the site deployed fine, but the front page refused to display.</p>
<p><img src="http://tiernok.com/LTDBlog/MVC4/folders.png" alt="Project folders" style="margin: .5em .5em .5em 0; float: left;" />Deploying MVC3 early on took advantage of a special folder named _bin_deployableAssemblies, so MSBuild was overwriting the MVC4 assemblies with the contents of this folder (MVC3) and then giving me errors on the razor stack when I tried to actually load the page. The build server didn&#8217;t mind because it was using either GAC&#8217;d or Reference Assemblies instead of the local DLLs.</p>
<p>I initially delete the folder to fix this, which turned out to be overkill because I also had SQL Server CE assemblies in there. The final result was to clear out just the MVC3 assemblies from the folder, leaving the SQL Server CE ones.</p>
<p>I ran several builds through the load test step, with interesting results that I&#8217;ll show at the bottom.</p>
<h2>The Upgrade to Asynchronous</h2>
<p>I&#8217;ll be the first to call my changes hacky. In a prior post, I <a href="/index.php/DesktopDev/MSTech/CSharp/pick-the-right-storage-all" title="Pick the Right Storage: All SQL is Not Equal">switched SQL CE for full SQL Server</a> to fix a performance bottleneck. With the known bottleneck removed, I wasn&#8217;t sure what the current one was or if  Asynchronous MVC would improve things further, but I had high hopes.</p>
<p>You can see the final result on <a href="https://bitbucket.org/tarwn/mvcmusicstore.main/src" title="MVCMusicStore.Main on BitBucket">BitBucket</a>, but here&#8217;s a sample of the quick and dirty surgery:</p>
<p><b>MVCMusicStore.Main / MvcMusicStore / Controllers / HomeController.cs</b> (<a href="https://bitbucket.org/tarwn/mvcmusicstore.main/src/a3f3c943c685906a8986c2ce94c79db8bc04a577/MvcMusicStore/Controllers/HomeController.cs?at=default" title="File on BitBucket">see file</a>)</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="text"><thead><tr><td colspan="2"  class="head">Text</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
</pre></td><td class="de1"><pre class="de1">using System.Collections.Generic;
using System.Linq;
using System.Web.Mvc;
using MvcMusicStore.Models;
using System.Diagnostics.CodeAnalysis;
using System.Threading.Tasks;
&nbsp;
namespace MvcMusicStore.Controllers {
&nbsp; &nbsp; &nbsp; &nbsp; [SuppressMessage(&quot;Gendarme.Rules.Exceptions&quot;, &quot;UseObjectDisposedExceptionRule&quot;, Justification = &quot;If the controller is disposed mid-call we have bigger issues&quot;)]
&nbsp; &nbsp; &nbsp; &nbsp; public class HomeController : ControllerBase {
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; public HomeController() { }
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; public HomeController(IMusicStoreEntities storeDb) : base(storeDb) { }
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; //
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; // GET: /Home/
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; public async Task&lt;ActionResult&gt; IndexAsync() {
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; // Get most popular albums
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; var albums = await GetTopSellingAlbumsAsync(5);
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; return View(albums);
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; private async Task&lt;List&lt;Album&gt;&gt; GetTopSellingAlbumsAsync(int count) {
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; // Group the order details by album and return
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; // the albums with the highest count
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; return await Task.Factory.StartNew&lt;List&lt;Album&gt;&gt;(() =&gt;
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; {
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; return StoreDB.Albums
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; .OrderByDescending(a =&gt; a.OrderDetails.Count())
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; .Take(count)
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; .ToList();
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; });
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }
&nbsp; &nbsp; &nbsp; &nbsp; }
}</pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">using System.Collections.Generic;
using System.Linq;
using System.Web.Mvc;
using MvcMusicStore.Models;
using System.Diagnostics.CodeAnalysis;
using System.Threading.Tasks;

namespace MvcMusicStore.Controllers {
        [SuppressMessage("Gendarme.Rules.Exceptions", "UseObjectDisposedExceptionRule", Justification = "If the controller is disposed mid-call we have bigger issues")]
        public class HomeController : ControllerBase {

                public HomeController() { }
                public HomeController(IMusicStoreEntities storeDb) : base(storeDb) { }

                //
                // GET: /Home/
                public async Task&lt;ActionResult&gt; IndexAsync() {
                        // Get most popular albums
                        var albums = await GetTopSellingAlbumsAsync(5);
                        
                        return View(albums);
                }

                private async Task&lt;List&lt;Album&gt;&gt; GetTopSellingAlbumsAsync(int count) {
                        // Group the order details by album and return
                        // the albums with the highest count
                        return await Task.Factory.StartNew&lt;List&lt;Album&gt;&gt;(() =&gt;
                        {
                                return StoreDB.Albums
                                                                .OrderByDescending(a =&gt; a.OrderDetails.Count())
                                                                .Take(count)
                                                                .ToList();
                        });
                }
        }
}</pre></div></div>

<p>Each action has been converted to an async method returning a Task&lt;ActionResult&gt; and my ControllerBase object now inherits from AsyncController instead of Controller.</p>
<p>Because the query logic for this application is spread all over the place (which is common for entity framework in my experience), in some places I have tidy await calls to Async methods (like in the IndexAsync method above), and in some cases I have an inline await Task.Factory call (GetTopSellingAlbumsAsync action). <a href="http://entityframework.codeplex.com/wikipage?title=Roadmap" title="Entity Framework Roadmap">Entity Framework 6</a> will have asynchronous Query and Save capabilities, but I personally don&#8217;t care much for Entity Framework, so it&#8217;s unlikely I&#8217;ll go through the effort of upgrading this project from EF4 to EF6. In the meantime, I have added my own SaveAsync call to the IMusicStoreEntities interface and DbContext implementation and have added some dirty await/async calls throughout the codebase.</p>
<p>Final result? </p>
<h2>Graphs and Numbers, woohoo!</h2>
<p>So what happened when I upgrade to MVC4? faster, slower, &#8230; ? And how much faster did Asynchronous actions make it? 1 order of magnitude? 2 orders?</p>
<p>What happened was object lessons in why having load measurements are useful and why identifying your performance bottlenecks is critical, instead of treating asynchronous actions as magic pixie dust.</p>
<div style="text-align:center;">
   <img src="http://tiernok.com/LTDBlog/MVC4/rate.png" alt="Load test - Request Rates" />
</div>
<p>On the left side of this graph you can see that the MVC 3 rate has averaged 75 requests/second with a pretty high level of variability. Switching to MVC4 moved us to a much more consistent 95-100 requests/second average, then throwing async in the mix reduced the rate to the 80&#8217;s. In each case, the requests are all of the files our browser would request when we browse the index page, select a genre to the genre page, select an album to the album page, and then check out, so some of this is dynamic content and some is static image and script files.</p>
<div style="text-align:center;">
   <img src="http://tiernok.com/LTDBlog/MVC4/responseTime.png" alt="Load test - Response Times" />
</div>
<p>The other interesting number is the lack of difference in Response Times. Somehow MVC4 unlocked more throughput for the system without impacting the Response Time for those requests. There was also no change at all in Response Times at all after adding Async actions, something that underlines and bolds the fact that the database calls were not the performance bottleneck for these test VMs.</p>
<h2>I Should Upgrade to MVC4 Now!</h2>
<p>Well, yes, you should, but don&#8217;t expect a matching 30% performance improvement. This improvement was in my test systems which are all VMs residing on the same Hyper-V server, running simulated loads that don&#8217;t match what real traffic would look like on a real site with real networks and real servers. That being said, the point of the load test step is to let me know when something significant occurs and there was definitely a measurable, positive performance improvement when I performed the upgrade. Given the fact that I don&#8217;t have a pouch of magic pixie dust, I have to assume that either MVC 4 or .Net 4.5 made some improvements.</p>
<p>The moral of the async upgrade is to be aware of your assumptions. In the real world, had I made async-ified my codebase to get a performance improvement, I would have just added a great deal of extra code complexity for a net loss in performance. There was no science to my guess that async would make things faster, it was pure guesswork.</p>
]]></content:encoded>
			<wfw:commentRss>/index.php/webdev/serverprogramming/aspnet/upgrading-from-mvc3-to-mvc4/feed/</wfw:commentRss>
		<slash:comments>3</slash:comments>
		</item>
	</channel>
</rss>
