<?xml version="1.0" encoding="UTF-8"?><rss version="2.0"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:atom="http://www.w3.org/2005/Atom"
	xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
	xmlns:slash="http://purl.org/rss/1.0/modules/slash/"
	>

<channel>
	<title>selenium &#8211; LessthanDot</title>
	<atom:link href="/index.php/tag/selenium/feed/" rel="self" type="application/rss+xml" />
	<link>/</link>
	<description>A Technical Community for IT Professionals</description>
	<lastBuildDate>Sat, 09 Mar 2019 12:50:36 +0000</lastBuildDate>
	<language>en-US</language>
	<sy:updatePeriod>hourly</sy:updatePeriod>
	<sy:updateFrequency>1</sy:updateFrequency>
	<generator>https://wordpress.org/?v=4.6.1</generator>
	<item>
		<title>Using Selenium for View testing with knockout and RequireJS</title>
		<link>/index.php/webdev/using-selenium-for-view-testing-with-knockout-and-requirejs/</link>
		<comments>/index.php/webdev/using-selenium-for-view-testing-with-knockout-and-requirejs/#respond</comments>
		<pubDate>Mon, 01 Dec 2014 14:20:41 +0000</pubDate>
		<dc:creator><![CDATA[Eli Weinstock-Herman (tarwn)]]></dc:creator>
				<category><![CDATA[Web Developer]]></category>
		<category><![CDATA[knockout]]></category>
		<category><![CDATA[nancy]]></category>
		<category><![CDATA[selenium]]></category>
		<category><![CDATA[UnitTesting]]></category>
		<category><![CDATA[webdriver]]></category>

		<guid isPermaLink="false">/?p=3089</guid>
		<description><![CDATA[I&#8217;ve written about using Selenium/WebDriver for automated testing in a C# environment in the past. Some of these posts may be dated, but I&#8217;ve covered everything from using the Selenium IDE, to using WebDriver and the PageObject pattern, to using SpecFlow to drive Selenium UI testing. But in this age of MVVM/MVC frameworks and libraries, [&#8230;]]]></description>
				<content:encoded><![CDATA[<p>I&#8217;ve written about using Selenium/WebDriver for automated testing in a C# environment in the past. Some of these posts may be dated, but I&#8217;ve covered everything from <a href="/index.php/webdev/uidevelopment/automated-web-testing-with-selenium/" title="Automated testing with Selenium IDE">using the Selenium IDE</a>, to <a href="/index.php/webdev/uidevelopment/automated-web-testing-with-selenium-2/" title="Automated testing with Selenium WebDriver">using WebDriver and the PageObject pattern</a>, to <a href="/index.php/enterprisedev/application-lifecycle-management/using-specflow-to/" title="Using SpecFlow to drive Selenium WebDriver Tests">using SpecFlow to drive Selenium UI testing</a>. But in this age of <a href="/index.php/webdev/uidevelopment/angularjs-vs-knockout-introduction-1/" title="AngularJS vs Knockout - Introduction (1 of 8)">MVVM/MVC frameworks and libraries</a>, do we really need every single test to hit the database?</p>
<h1>The Integration Testing Tax</h1>
<p>UI testing is widely accepted as slow and fragile. We can use patterns like the <a href="http://docs.seleniumhq.org/docs/06_test_design_considerations.jsp#page-object-design-pattern" title="Selenium: Page Object Design Pattern">Page Object design pattern</a> to reduce the fragility of how we interact with elements on the page, but that doesn&#8217;t speed things up any. We can merge tests to reduce repetitive actions, but that just adds a bunch of mess to the fragility side of the equation again.</p>
<p>So what to do?</p>
<p>Something I have been considering lately is to use Selenium to test just the View bindings, without the overhead of doing full integration testing. If I keep the logic out of the View (one of the reasons I love MVVM), then I can write some very extensive behavioral unit tests very close to the user and have fast, thorough behavior coverage. My main test concern then becomes how I ensure my bindings stay wired together over time, since I know the behavior under them is working properly. Tightening the focus provides a smaller subsurface to test against then trying to test all of the intricacies all of the way down and reduces the performance drags of anything behind the UI (like network, disk, subsystems, etc), so I could potentially test far more things in less time.</p>
<h1>UI Testing without the Backend</h1>
<p>To try this out, I needed a sample application. I wrote a simple application using <a href="http://knockoutjs.com/">knockout</a> and <a href="http://requirejs.org/">RequireJS</a>. There is a basic search screen that allows you to &#8220;search&#8221; against a slow WebApi endpoint, get further details about a product from that endpoint, and add items to a local cart. </p>
<p>Note: The WebApi actions are slow to reflect performance from larger, more complex applications that have to worry about things like authentication, databases, accessing network stores, logging, contention and retry policies, business logic, etc. </p>
<h2>The Fake Application + Test Cases</h2>
<p>All of the code for the fake application and tests is on github at <a href="https://github.com/tarwn/Blog_RequireJSandSelenium" title="tarwn/Blog_RequireJSandSelenium on github">tarwn/Blog_RequireJSandSelenium</a>.</p>
<p>The fake application looks like this:</p>
<p><a href="/wp-content/uploads/2014/11/SeleniumKnockoutSampleApp.png"><img src="/wp-content/uploads/2014/11/SeleniumKnockoutSampleApp.png" alt="SeleniumKnockoutSampleApp" width="639" height="864" class="aligncenter size-full wp-image-3090" srcset="/wp-content/uploads/2014/11/SeleniumKnockoutSampleApp.png 639w, /wp-content/uploads/2014/11/SeleniumKnockoutSampleApp-221x300.png 221w" sizes="(max-width: 639px) 100vw, 639px" /></a></p>
<p>The ViewModel behind this view contains all of the properties necessary to display the screen and it&#8217;s actions:</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="javascript"><thead><tr><td colspan="2"  class="head">Javascript</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
</pre></td><td class="de1"><pre class="de1">define<span class="br0">&#40;</span><span class="br0">&#91;</span><span class="st0">&quot;knockout&quot;</span><span class="sy0">,</span> 
&nbsp; &nbsp; &nbsp; &nbsp; <span class="st0">&quot;lodash&quot;</span><span class="sy0">,</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="st0">&quot;app/services/itemService&quot;</span><span class="sy0">,</span> 
&nbsp; &nbsp; &nbsp; &nbsp; <span class="st0">&quot;app/models/itemSummary&quot;</span><span class="sy0">,</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="st0">&quot;app/models/itemFull&quot;</span><span class="sy0">,</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="st0">&quot;app/models/itemCart&quot;</span><span class="sy0">,</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="st0">&quot;app/models/cart&quot;</span>
<span class="br0">&#93;</span><span class="sy0">,</span>
<span class="kw1">function</span> <span class="br0">&#40;</span>ko<span class="sy0">,</span>
&nbsp; &nbsp; &nbsp; &nbsp; _<span class="sy0">,</span>
&nbsp; &nbsp; &nbsp; &nbsp; ItemService<span class="sy0">,</span>
&nbsp; &nbsp; &nbsp; &nbsp; ItemSummary<span class="sy0">,</span>
&nbsp; &nbsp; &nbsp; &nbsp; ItemFull<span class="sy0">,</span>
&nbsp; &nbsp; &nbsp; &nbsp; ItemCart<span class="sy0">,</span>
&nbsp; &nbsp; &nbsp; &nbsp; Cart<span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp;
&nbsp; &nbsp; <span class="kw1">function</span> IndexViewModel<span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">var</span> itemService <span class="sy0">=</span> <span class="kw1">new</span> ItemService<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">var</span> self <span class="sy0">=</span> <span class="kw1">this</span><span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">this</span>.<span class="me1">searchText</span> <span class="sy0">=</span> ko.<span class="me1">observable</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">this</span>.<span class="me1">isSearching</span> <span class="sy0">=</span> ko.<span class="me1">observable</span><span class="br0">&#40;</span><span class="kw2">false</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">this</span>.<span class="me1">searchResults</span> <span class="sy0">=</span> ko.<span class="me1">observableArray</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">this</span>.<span class="me1">executeSearch</span> <span class="sy0">=</span> <span class="kw1">function</span> <span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="coMULTI">/* Search logic with self.itemService.getItems */</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; 
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">this</span>.<span class="me1">selectedItem</span> <span class="sy0">=</span> ko.<span class="me1">observable</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">this</span>.<span class="me1">isLoadingSelectedItem</span> <span class="sy0">=</span> ko.<span class="me1">observable</span><span class="br0">&#40;</span><span class="kw2">false</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">this</span>.<span class="me1">selectItem</span> <span class="sy0">=</span> <span class="kw1">function</span> <span class="br0">&#40;</span>item<span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="coMULTI">/* Selection logic with self.itemService.getItem(item.id) */</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span><span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">this</span>.<span class="me1">cart</span> <span class="sy0">=</span> <span class="kw1">new</span> Cart<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">this</span>.<span class="me1">addToCart</span> <span class="sy0">=</span> <span class="kw1">function</span> <span class="br0">&#40;</span>itemToAdd<span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="coMULTI">/* Add item to cart */</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span><span class="sy0">;</span>
&nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp;
&nbsp; &nbsp; <span class="kw1">return</span> IndexViewModel<span class="sy0">;</span>
&nbsp;
<span class="br0">&#125;</span><span class="br0">&#41;</span><span class="sy0">;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">define(["knockout", 
        "lodash",
        "app/services/itemService", 
        "app/models/itemSummary",
        "app/models/itemFull",
        "app/models/itemCart",
        "app/models/cart"
],
function (ko,
        _,
        ItemService,
        ItemSummary,
        ItemFull,
        ItemCart,
        Cart) {
   
    function IndexViewModel() {
        var itemService = new ItemService();
        var self = this;

        this.searchText = ko.observable();
        this.isSearching = ko.observable(false);
        this.searchResults = ko.observableArray();
        this.executeSearch = function () {
                /* Search logic with self.itemService.getItems */
        };
        
        this.selectedItem = ko.observable();
        this.isLoadingSelectedItem = ko.observable(false);
        this.selectItem = function (item) {
                /* Selection logic with self.itemService.getItem(item.id) */
        };

        this.cart = new Cart();
        this.addToCart = function (itemToAdd) {
                /* Add item to cart */
        };
    }

    return IndexViewModel;

});</pre></div></div>

<p>All of the code for the site is located here: <a href="https://github.com/tarwn/Blog_RequireJSandSelenium/tree/master/SampleWebSite" title="SampleWebSite on github">github: tarwn/Blog_RequireJSandSelenium &#8211; /SampleWebSite</a></p>
<div style="background-color: #FFFFBB; padding: 1em; margin: .25em 1em">If you have not used <a href="http://requirejs.org/" title="RequireJS">RequireJS</a>, the top part of the javascript file may look confusing. define() is used to define all the dependencies I need for the script and a method that accepts those dependencies for us in the scope of that script. When someone in turn asks for an IndexViewModel (or more appropriately: /app/indexViewModel), they will get back this constructor, fully wired with all of it&#8217;s dependencies. RequireJS ensures dependencies are loaded in the right order, keeps the global window scope clean, and allows us to mock out those dependencies using tools like <a href="https://github.com/iammerrick/Squire.js/" title="Squire.js on github">Squire.js</a>.</div>
<p>Let&#8217;s get testing!</p>
<h2>Testing with Selenium &#8211; times 8!</h2>
<p>While playing with this, I looked at 4 different methods of testing with Selenium across Chrome and Phantom. </p>
<p>The 4 methods are:</p>
<ul>
<li><a href="https://github.com/tarwn/Blog_RequireJSandSelenium/blob/master/SampleWebSite.UITests/IndexTests.FullIntegration.cs">IndexTests.FullIntegration</a> &#8211; launch the site locally and run my UI tests against it, with the &#8220;real&#8221; WebAPI service</li>
<li><a href="https://github.com/tarwn/Blog_RequireJSandSelenium/blob/master/SampleWebSite.UITests/IndexTests.ClientSideInjection.cs">IndexTests.ClientSideInjection</a> &#8211; Execute a script to stub the itemService.js logic to run locally</li>
<li><a href="https://github.com/tarwn/Blog_RequireJSandSelenium/blob/master/SampleWebSite.UITests/IndexTests.NancyServer.cs">IndexTests.NancyServer</a> &#8211; Self-host a Nancy server with fake versions of the server-side API</li>
<li><a href="https://github.com/tarwn/Blog_RequireJSandSelenium/blob/master/SampleWebSite.UITests/IndexTests.NancyServerWithScriptInjection.cs">IndexTests.NancyServer</a> &#8211; Self-host a Nancy server that serves a stubbed itemService.js file</li>
</ul>
<p>These tests only cover the case where the HTML page is already a static file. If my page had instead been server-side generated from something like ASP.Net MVC or Web Pages, there would be additional work involved.</p>
<p>My goal was to keep the tests consistent across methods. This is a sample test:</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="csharp"><thead><tr><td colspan="2"  class="head">C#</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
</pre></td><td class="de1"><pre class="de1"><span class="br0">&#91;</span>Test<span class="br0">&#93;</span>
<span class="kw1">public</span> <span class="kw4">void</span> WhenUserSearchesForItemsAndSelectsOne_ThenDetailsAreDisplayedForTheSelectedProduct<span class="br0">&#40;</span><span class="br0">&#41;</span>
<span class="br0">&#123;</span>
&nbsp; &nbsp; <span class="kw1">var</span> indexPage <span class="sy0">=</span> <span class="kw3">new</span> IndexPage<span class="br0">&#40;</span>_webDriver, _url, <span class="st0">&quot;Sample App&quot;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; indexPage<span class="sy0">.</span><span class="me1">SearchButton</span><span class="sy0">.</span><span class="me1">Click</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; Utility<span class="sy0">.</span><span class="me1">WaitUpTo</span><span class="br0">&#40;</span><span class="nu0">5000</span>, <span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="sy0">=&gt;</span> Utility<span class="sy0">.</span><span class="me1">IsElementPresent</span><span class="br0">&#40;</span>indexPage<span class="sy0">.</span><span class="me1">SearchResultsTable</span><span class="br0">&#41;</span> 
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="sy0">&amp;&amp;</span> indexPage<span class="sy0">.</span><span class="me1">SearchResultsTable</span><span class="sy0">.</span><span class="me1">Displayed</span>, <span class="st0">&quot;Search results&quot;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; Assert<span class="sy0">.</span><span class="me1">AreNotEqual</span><span class="br0">&#40;</span><span class="nu0">0</span>, indexPage<span class="sy0">.</span><span class="me1">GetNumberOfSearchResults</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; indexPage<span class="sy0">.</span><span class="me1">ClickSearchResults</span><span class="br0">&#40;</span><span class="nu0">0</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; Utility<span class="sy0">.</span><span class="me1">WaitUpTo</span><span class="br0">&#40;</span><span class="nu0">5000</span>, <span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="sy0">=&gt;</span> Utility<span class="sy0">.</span><span class="me1">IsElementPresent</span><span class="br0">&#40;</span>indexPage<span class="sy0">.</span><span class="me1">ItemDetails</span><span class="br0">&#41;</span> 
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="sy0">&amp;&amp;</span> indexPage<span class="sy0">.</span><span class="me1">ItemDetails</span><span class="sy0">.</span><span class="me1">Displayed</span>, <span class="st0">&quot;Item Details&quot;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; Assert<span class="sy0">.</span><span class="me1">AreEqual</span><span class="br0">&#40;</span>indexPage<span class="sy0">.</span><span class="me1">GetSelectedRowItemName</span><span class="br0">&#40;</span><span class="br0">&#41;</span>, indexPage<span class="sy0">.</span><span class="me1">ItemDetailsName</span><span class="sy0">.</span><span class="me1">Text</span><span class="br0">&#41;</span><span class="sy0">;</span>
<span class="br0">&#125;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">[Test]
public void WhenUserSearchesForItemsAndSelectsOne_ThenDetailsAreDisplayedForTheSelectedProduct()
{
    var indexPage = new IndexPage(_webDriver, _url, "Sample App");

    indexPage.SearchButton.Click();
    Utility.WaitUpTo(5000, () =&gt; Utility.IsElementPresent(indexPage.SearchResultsTable) 
				  &amp;&amp; indexPage.SearchResultsTable.Displayed, "Search results");
    Assert.AreNotEqual(0, indexPage.GetNumberOfSearchResults());

    indexPage.ClickSearchResults(0);
    Utility.WaitUpTo(5000, () =&gt; Utility.IsElementPresent(indexPage.ItemDetails) 
				  &amp;&amp; indexPage.ItemDetails.Displayed, "Item Details");

    Assert.AreEqual(indexPage.GetSelectedRowItemName(), indexPage.ItemDetailsName.Text);
}</pre></div></div>

<p>Translated into English:</p>
<ul>
<li>Open the Index Page</li>
<li>Click the Search button</li>
<li>Wait up to 5 seconds for the search results table to be displayed</li>
<li>Verify there are more than 0 results displayed</li>
<li>Click the 0th search result (to select it)</li>
<li>Wait up to 5 seconds for the selected Item to load in the Item Details section</li>
<li>Verify the name from the selected row matches the name in the details</li>
</ul>
<div style="background-color: #FFFFBB; padding: 1em; margin: 1em 1em .25em 1em">
Note: I used the PageObject pattern very lightly to try and keep the tests readable and easily repeatable for each test method, but did not spend a lot of time following good patterns to create maintainable logic, as this is just experimental code.
</div>
<p>Rather than go through all of the cases, I&#8217;ll touch on just the basic FullIntegration case and one of the Nancy cases. The ClientSide injection case felt really hacky and fragile and I don&#8217;t think it&#8217;s a good choice.</p>
<h3>IndexTests.FullIntegration</h3>
<p>This method is really slow and you have to have a working web server. The setup is quick and easy though:</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="csharp"><thead><tr><td colspan="2"  class="head">C#</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
</pre></td><td class="de1"><pre class="de1"><span class="br0">&#91;</span>TestFixture<span class="br0">&#40;</span><span class="kw3">typeof</span><span class="br0">&#40;</span>ChromeDriver<span class="br0">&#41;</span><span class="br0">&#41;</span><span class="br0">&#93;</span>
<span class="br0">&#91;</span>TestFixture<span class="br0">&#40;</span><span class="kw3">typeof</span><span class="br0">&#40;</span>PhantomJSDriver<span class="br0">&#41;</span><span class="br0">&#41;</span><span class="br0">&#93;</span>
<span class="kw1">public</span> <span class="kw4">class</span> IndexTests_FullIntegration<span class="sy0">&lt;</span>TDriver<span class="sy0">&gt;</span>
<span class="kw1">where</span> TDriver <span class="sy0">:</span> IWebDriver, <span class="kw3">new</span><span class="br0">&#40;</span><span class="br0">&#41;</span>
<span class="br0">&#123;</span>
&nbsp;
&nbsp; &nbsp; <span class="kw1">private</span> IWebDriver _webDriver<span class="sy0">;</span>
&nbsp; &nbsp; <span class="kw1">private</span> <span class="kw4">string</span> _url <span class="sy0">=</span> <span class="st0">&quot;http://localhost:63431/&quot;</span><span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; <span class="br0">&#91;</span>TestFixtureSetUp<span class="br0">&#93;</span>
&nbsp; &nbsp; <span class="kw1">public</span> <span class="kw4">void</span> TestFixtureSetup<span class="br0">&#40;</span><span class="br0">&#41;</span>
&nbsp; &nbsp; <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; _webDriver <span class="sy0">=</span> <span class="kw3">new</span> TDriver<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp;
&nbsp; &nbsp; <span class="br0">&#91;</span>TestFixtureTearDown<span class="br0">&#93;</span>
&nbsp; &nbsp; <span class="kw1">public</span> <span class="kw4">void</span> TestFixtureTearDown<span class="br0">&#40;</span><span class="br0">&#41;</span>
&nbsp; &nbsp; <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; _webDriver<span class="sy0">.</span><span class="me1">Quit</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp;
&nbsp; &nbsp; <span class="co1">// ... tests here ...</span>
&nbsp;
<span class="br0">&#125;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">[TestFixture(typeof(ChromeDriver))]
[TestFixture(typeof(PhantomJSDriver))]
public class IndexTests_FullIntegration&lt;TDriver&gt;
where TDriver : IWebDriver, new()
{

	private IWebDriver _webDriver;
	private string _url = "http://localhost:63431/";

	[TestFixtureSetUp]
	public void TestFixtureSetup()
	{
	    _webDriver = new TDriver();
	}

	[TestFixtureTearDown]
	public void TestFixtureTearDown()
	{
	    _webDriver.Quit();
	}

	// ... tests here ...

}</pre></div></div>

<p>Besides the performance, the other downside of this method is the hosting. In the <a href="/index.php/enterprisedev/application-lifecycle-management/using-specflow-to/" title="Using SpecFlow to drive Selenium WebDriver Tests">Using SpecFlow to drive Selenium UI Testing</a> post, I already had the steps necessary to deploy a staging site to test against, but this equates to more overhead and could drive where in your build process you perform the tests as well as make it harder to run them locally.</p>
<h3>IndexTests.Nancy</h3>
<p>In this case, I created a self-hosting Nancy site that copies all of the static content from my Sample site and exposes fake versions of the API. The downsides of the two Nancy methods are the restriction to static content (no MVC pages) and that you&#8217;re reimplementing a fake API for the system. </p>
<p>This second issue actually bothers me a bit, as it means you are creating a fake set of data that all of your tests are going to rely on. Typically when you have one big shared pool of test data, it makes your systems harder to maintain, as that test data turns into a bog of magic values, some of which have to be set just so for tests to succeed. Allowing the tests to define the values that would be returned when they have specific needs would make this a lot more maintainable and help surface those critical data assumptions in the tests.</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="csharp"><thead><tr><td colspan="2"  class="head">C#</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
</pre></td><td class="de1"><pre class="de1"><span class="br0">&#91;</span>TestFixture<span class="br0">&#40;</span><span class="kw3">typeof</span><span class="br0">&#40;</span>ChromeDriver<span class="br0">&#41;</span><span class="br0">&#41;</span><span class="br0">&#93;</span>
<span class="br0">&#91;</span>TestFixture<span class="br0">&#40;</span><span class="kw3">typeof</span><span class="br0">&#40;</span>PhantomJSDriver<span class="br0">&#41;</span><span class="br0">&#41;</span><span class="br0">&#93;</span>
<span class="kw1">public</span> <span class="kw4">class</span> IndexTests_NancyServer<span class="sy0">&lt;</span>TDriver<span class="sy0">&gt;</span>
<span class="kw1">where</span> TDriver <span class="sy0">:</span> IWebDriver, <span class="kw3">new</span><span class="br0">&#40;</span><span class="br0">&#41;</span>
<span class="br0">&#123;</span>
&nbsp;
&nbsp; &nbsp; <span class="kw1">private</span> <span class="kw4">string</span> _baseUrl <span class="sy0">=</span> <span class="st0">&quot;</span><span class="sy0">;</span>
&nbsp; &nbsp; <span class="kw1">private</span> NancyHost _webServer<span class="sy0">;</span>
&nbsp; &nbsp; <span class="kw1">private</span> IWebDriver _webDriver<span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; <span class="br0">&#91;</span>TestFixtureSetUp<span class="br0">&#93;</span>
&nbsp; &nbsp; <span class="kw1">public</span> <span class="kw4">void</span> TestFixtureSetup<span class="br0">&#40;</span><span class="br0">&#41;</span>
&nbsp; &nbsp; <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; _webServer <span class="sy0">=</span> SetupServer<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; _webDriver <span class="sy0">=</span> <span class="kw3">new</span> TDriver<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp;
&nbsp; &nbsp; <span class="kw1">private</span> NancyHost SetupServer<span class="br0">&#40;</span><span class="br0">&#41;</span>
&nbsp; &nbsp; <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">var</span> dnfo <span class="sy0">=</span> <span class="kw3">new</span> DirectoryInfo<span class="br0">&#40;</span><span class="st0">&quot;TestSampleWebSite&quot;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">if</span> <span class="br0">&#40;</span>dnfo<span class="sy0">.</span><span class="me1">Exists</span><span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; dnfo<span class="sy0">.</span><span class="me1">Delete</span><span class="br0">&#40;</span><span class="kw1">true</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">var</span> proc <span class="sy0">=</span> <span class="kw3">new</span> Process<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; proc<span class="sy0">.</span><span class="me1">StartInfo</span><span class="sy0">.</span><span class="me1">UseShellExecute</span> <span class="sy0">=</span> <span class="kw1">true</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; proc<span class="sy0">.</span><span class="me1">StartInfo</span><span class="sy0">.</span><span class="me1">FileName</span> <span class="sy0">=</span> <span class="st_h">@&quot;C:\WINDOWS\system32\xcopy.exe&quot;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; proc<span class="sy0">.</span><span class="me1">StartInfo</span><span class="sy0">.</span><span class="me1">Arguments</span> <span class="sy0">=</span> <span class="st0">&quot;<span class="es0">\&quot;</span>../../../SampleWebSite<span class="es0">\&quot;</span> TestSampleWebSite /E /I&quot;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; proc<span class="sy0">.</span><span class="me1">Start</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; proc<span class="sy0">.</span><span class="me1">WaitForExit</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">var</span> config <span class="sy0">=</span> <span class="kw3">new</span> HostConfiguration<span class="br0">&#40;</span><span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; UrlReservations <span class="sy0">=</span> <span class="kw3">new</span> UrlReservations<span class="br0">&#40;</span><span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; User <span class="sy0">=</span> <span class="st0">&quot;Everyone&quot;</span>,
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; CreateAutomatically <span class="sy0">=</span> <span class="kw1">true</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span><span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">var</span> host <span class="sy0">=</span> <span class="kw3">new</span> NancyHost<span class="br0">&#40;</span><span class="kw3">new</span> LocalServerBootstrapper<span class="br0">&#40;</span>dnfo<span class="sy0">.</span><span class="me1">FullName</span><span class="br0">&#41;</span>, config, <span class="kw3">new</span> Uri<span class="br0">&#40;</span>_baseUrl<span class="br0">&#41;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; host<span class="sy0">.</span><span class="me1">Start</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">return</span> host<span class="sy0">;</span>
&nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp;
&nbsp; &nbsp; <span class="br0">&#91;</span>TestFixtureTearDown<span class="br0">&#93;</span>
&nbsp; &nbsp; <span class="kw1">public</span> <span class="kw4">void</span> TestFixtureTearDown<span class="br0">&#40;</span><span class="br0">&#41;</span>
&nbsp; &nbsp; <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; _webDriver<span class="sy0">.</span><span class="me1">Quit</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; _webServer<span class="sy0">.</span><span class="me1">Stop</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp;
&nbsp; &nbsp; <span class="co1">// ... tests ...</span>
&nbsp;
<span class="br0">&#125;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">[TestFixture(typeof(ChromeDriver))]
[TestFixture(typeof(PhantomJSDriver))]
public class IndexTests_NancyServer&lt;TDriver&gt;
where TDriver : IWebDriver, new()
{

	private string _baseUrl = "http://localhost:5000/";
	private NancyHost _webServer;
	private IWebDriver _webDriver;

	[TestFixtureSetUp]
	public void TestFixtureSetup()
	{
	    _webServer = SetupServer();
	    _webDriver = new TDriver();
	}

	private NancyHost SetupServer()
	{
	    var dnfo = new DirectoryInfo("TestSampleWebSite");
	    if (dnfo.Exists)
		dnfo.Delete(true);

	    var proc = new Process();
	    proc.StartInfo.UseShellExecute = true;
	    proc.StartInfo.FileName = @"C:\WINDOWS\system32\xcopy.exe";
	    proc.StartInfo.Arguments = "\"../../../SampleWebSite\" TestSampleWebSite /E /I";
	    proc.Start();
	    proc.WaitForExit();

	    var config = new HostConfiguration()
	    {
		UrlReservations = new UrlReservations()
		{
		    User = "Everyone",
		    CreateAutomatically = true
		}
	    };

	    var host = new NancyHost(new LocalServerBootstrapper(dnfo.FullName), config, new Uri(_baseUrl));
	    host.Start();
	    return host;
	}

	[TestFixtureTearDown]
	public void TestFixtureTearDown()
	{
	    _webDriver.Quit();
	    _webServer.Stop();
	}

	// ... tests ...

}</pre></div></div>

<p><a href="https://github.com/tarwn/Blog_RequireJSandSelenium/blob/master/SampleWebSite.UITests/NancyServer/LocalServerBootstrapper.cs" title="/SampleWebSite.UITests/NancyServer/LocalServerBootstrapper.cs on github">LocalServerBootstrapper</a> defines the static content folders (in this case, /styles, /Scripts, and the /index.html file). There is a single Module, <a href="https://github.com/tarwn/Blog_RequireJSandSelenium/blob/master/SampleWebSite.UITests/NancyServer/LocalServer.cs" title="/SampleWebSite.UITests/NancyServer/LocalServer.cs on github">LocalServer</a>, that serves up the 2 item API endpoints.</p>
<p>In a larger test suite, I would move this test code to a single startup method for the whole assembly.</p>
<h3>The Performance Results</h3>
<p>Running the same 3 tests for each of the 4 methods across two different browsers helped see the difference between startup and ongoing performance costs.</p>
<p><a href="/wp-content/uploads/2014/11/SeleniumRequireJsResults.png"><img src="/wp-content/uploads/2014/11/SeleniumRequireJsResults.png" alt="SeleniumRequireJsResults" width="584" height="645" class="aligncenter size-full wp-image-3098" srcset="/wp-content/uploads/2014/11/SeleniumRequireJsResults.png 584w, /wp-content/uploads/2014/11/SeleniumRequireJsResults-271x300.png 271w" sizes="(max-width: 584px) 100vw, 584px" /></a></p>
<p>We pick up quite a bit of performance when we remove the backend server from the tests. one other thing to note is that the startup time for Phantom is quite a bit faster, but there is a slightly higher ongoing cost.</p>
<h2>Conclusions</h2>
<p>This turned out to be a pretty nice little experiment. I wouldn&#8217;t use any of these methods for a production test suite as they are now, but they definitely have promise and I&#8217;ll certainly be trying out some more things with that Nancy setup. </p>
<p>Switching from a full integration focus to more of a View focus did make things faster, but not to the degree I had hoped. I intend to spend some further thought on how to turn the dial up further without making this really painful to maintain. </p>
]]></content:encoded>
			<wfw:commentRss>/index.php/webdev/using-selenium-for-view-testing-with-knockout-and-requirejs/feed/</wfw:commentRss>
		<slash:comments>0</slash:comments>
		</item>
		<item>
		<title>Azure Web Sites Deployment and Unit Testing</title>
		<link>/index.php/enterprisedev/cloud/azure/azure-web-sites-deployment-and-unit-testing/</link>
		<comments>/index.php/enterprisedev/cloud/azure/azure-web-sites-deployment-and-unit-testing/#comments</comments>
		<pubDate>Mon, 10 Mar 2014 12:18:26 +0000</pubDate>
		<dc:creator><![CDATA[Eli Weinstock-Herman (tarwn)]]></dc:creator>
				<category><![CDATA[Azure]]></category>
		<category><![CDATA[azure]]></category>
		<category><![CDATA[cassinidev]]></category>
		<category><![CDATA[nunit]]></category>
		<category><![CDATA[selenium]]></category>

		<guid isPermaLink="false">/?p=2354</guid>
		<description><![CDATA[The automatic deployment option of Azure Web Sites is really cool and demos well. A few months ago I was curious how far I could push it, whether I could replace more complex projects that I currently deploy from my build server. I had read a couple posts on unit testing during deployment, but so [&#8230;]]]></description>
				<content:encoded><![CDATA[<p>The automatic deployment option of Azure Web Sites is really cool and demos well. A few months ago I was curious how far I could push it, whether I could replace more complex projects that I currently deploy from my build server. I had read a couple posts on unit testing during deployment, but so far had not seen anyone take it all the way to interface testing. With tools like CassiniDev, Phantom, and Selenium, this seemed like a real possibility.</p>
<p>So the goal was to create an Azure Website, get the automated deployment working automatically when I commit, run Nunit tests with the Nunit test runner (not the VS runner), and then wire in UI testing with a combination of CassiniDev for hosting the site, Phantom as the browser, and Selenium as the magic that drives the two. </p>
<p>This post covers the parts that worked, creating the Azure Web Site, settings up automated depoyment from the git repository, and customizing the deployment process to run the Nunit test runner, failing the build when a test fails.</p>
<h2>From the Beginning</h2>
<p>This project started from an empty folder, the goal being to see how far I could push it until I ran into problems.</p>
<p>The first step was to create a github repository for the project and build the basic MVC4 project. I built just a basic MVC4 project with some text on a single page, just enough to show if it was working or not.</p>
<p>The source code is on github: <a href="https://github.com/tarwn/CloudPixiesAndGhosts" title="tarwn/CloudPixiesAndGhosts on github">https://github.com/tarwn/CloudPixiesAndGhosts</a></p>
<h2>Azure Website</h2>
<p>Once I had a basic &#8220;hello World&#8221; page and a github repository, it was time to create the Azure Website that would be the deployment target.</p>
<div id="attachment_2373" style="width: 310px" class="wp-caption aligncenter"><a href="/wp-content/uploads/2014/02/01_CreateSiteStep1.png"><img src="/wp-content/uploads/2014/02/01_CreateSiteStep1-300x199.png" alt="Create Azure Web Site - Step 1" width="300" height="199" class="size-medium wp-image-2373" srcset="/wp-content/uploads/2014/02/01_CreateSiteStep1-300x199.png 300w, /wp-content/uploads/2014/02/01_CreateSiteStep1.png 700w" sizes="(max-width: 300px) 100vw, 300px" /></a><p class="wp-caption-text">Create Azure Web Site &#8211; Step 1</p></div>
<p>The wizard has a github option, but due to the way github permissions work, it ends up needing far more permissions than I want to provide. Instead I have chosen to use the generic &#8220;External Repository&#8221; option. </p>
<div id="attachment_2374" style="width: 310px" class="wp-caption aligncenter"><a href="/wp-content/uploads/2014/02/01_CreateSiteStep2.png"><img src="/wp-content/uploads/2014/02/01_CreateSiteStep2-300x198.png" alt="Create Azure Web Site - Step 2" width="300" height="198" class="size-medium wp-image-2374" srcset="/wp-content/uploads/2014/02/01_CreateSiteStep2-300x198.png 300w, /wp-content/uploads/2014/02/01_CreateSiteStep2.png 700w" sizes="(max-width: 300px) 100vw, 300px" /></a><p class="wp-caption-text">Create Azure Web Site &#8211; Step 2</p></div>
<p>The last step is to provide those repository details</p>
<div id="attachment_2375" style="width: 310px" class="wp-caption aligncenter"><a href="/wp-content/uploads/2014/02/01_CreateSiteStep3.png"><img src="/wp-content/uploads/2014/02/01_CreateSiteStep3-300x191.png" alt="Create Azure Web Site - Step 3" width="300" height="191" class="size-medium wp-image-2375" srcset="/wp-content/uploads/2014/02/01_CreateSiteStep3-300x191.png 300w, /wp-content/uploads/2014/02/01_CreateSiteStep3.png 700w" sizes="(max-width: 300px) 100vw, 300px" /></a><p class="wp-caption-text">Create Azure Web Site &#8211; Step 3</p></div>
<p>And the Azure Website is running:</p>
<div id="attachment_2376" style="width: 710px" class="wp-caption aligncenter"><a href="/wp-content/uploads/2014/02/01_CreateSiteStep4.png"><img src="/wp-content/uploads/2014/02/01_CreateSiteStep4.png" alt="Azure Web Site - Running" width="700" height="27" class="size-full wp-image-2376" srcset="/wp-content/uploads/2014/02/01_CreateSiteStep4.png 700w, /wp-content/uploads/2014/02/01_CreateSiteStep4-300x11.png 300w" sizes="(max-width: 700px) 100vw, 700px" /></a><p class="wp-caption-text">Azure Web Site &#8211; Running</p></div>
<p>And my basic little web page is picked up by Azure Websites and deployed to the site:<br />
<div id="attachment_2377" style="width: 310px" class="wp-caption aligncenter"><a href="/wp-content/uploads/2014/02/01_CreateSiteStep5.png"><img src="/wp-content/uploads/2014/02/01_CreateSiteStep5-300x144.png" alt="Initial Deployments" width="300" height="144" class="size-medium wp-image-2377" srcset="/wp-content/uploads/2014/02/01_CreateSiteStep5-300x144.png 300w, /wp-content/uploads/2014/02/01_CreateSiteStep5.png 700w" sizes="(max-width: 300px) 100vw, 300px" /></a><p class="wp-caption-text">Initial Deployments</p></div></p>
<p>Giving us the &#8220;cloud&#8221; portion of the project name:</p>
<div id="attachment_2378" style="width: 398px" class="wp-caption aligncenter"><a href="/wp-content/uploads/2014/02/01_CreateSiteStep6.png"><img src="/wp-content/uploads/2014/02/01_CreateSiteStep6.png" alt="It&#039;s in the cloud!" width="388" height="165" class="size-full wp-image-2378" srcset="/wp-content/uploads/2014/02/01_CreateSiteStep6.png 388w, /wp-content/uploads/2014/02/01_CreateSiteStep6-300x127.png 300w" sizes="(max-width: 388px) 100vw, 388px" /></a><p class="wp-caption-text">It&#8217;s in the cloud!</p></div>
<p>There is one last step, though. Because I used the generic &#8220;External Repository&#8221; option, my code is not being deployed immediately when I commit it.</p>
<p>Luckily Azure Websites exposes a deployment trigger URL that we can plug into github to notify when a new commit is received.</p>
<p>In the Azure Website settings, we copy that &#8220;Deployment Trigger URL&#8221;:</p>
<div id="attachment_2371" style="width: 310px" class="wp-caption aligncenter"><a href="/wp-content/uploads/2014/02/01_AutoDeploymentStep1.png"><img src="/wp-content/uploads/2014/02/01_AutoDeploymentStep1-300x72.png" alt="Configuring the Build triggering - Step 1" width="300" height="72" class="size-medium wp-image-2371" srcset="/wp-content/uploads/2014/02/01_AutoDeploymentStep1-300x72.png 300w, /wp-content/uploads/2014/02/01_AutoDeploymentStep1.png 700w" sizes="(max-width: 300px) 100vw, 300px" /></a><p class="wp-caption-text">Configuring the Build triggering &#8211; Step 1</p></div>
<p>And then in the github settings for our project, we paste it in as a WebHoook URL:<br />
<div id="attachment_2372" style="width: 310px" class="wp-caption aligncenter"><a href="/wp-content/uploads/2014/02/01_AutoDeploymentStep2.png"><img src="/wp-content/uploads/2014/02/01_AutoDeploymentStep2-300x91.png" alt="Configuring the Build triggering - Step 2" width="300" height="91" class="size-medium wp-image-2372" srcset="/wp-content/uploads/2014/02/01_AutoDeploymentStep2-300x91.png 300w, /wp-content/uploads/2014/02/01_AutoDeploymentStep2.png 700w" sizes="(max-width: 300px) 100vw, 300px" /></a><p class="wp-caption-text">Configuring the Build triggering &#8211; Step 2</p></div></p>
<p>And now each time I commit new code to master, it runs through the automated deployment process.</p>
<h2>Add Unit Tests</h2>
<p>So far, the example code just has a single page that doesn&#8217;t really do anything worth unit testing. This isn&#8217;t intended to be a real-world sample, but it does need some simple logic to test.</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="csharp"><thead><tr><td colspan="2"  class="head">C#</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
</pre></td><td class="de1"><pre class="de1"><span class="kw1">public</span> ActionResult Index<span class="br0">&#40;</span><span class="br0">&#41;</span>
<span class="br0">&#123;</span>
&nbsp; &nbsp; <span class="kw1">return</span> View<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
<span class="br0">&#125;</span>
&nbsp;
<span class="kw1">public</span> ActionResult Text<span class="br0">&#40;</span><span class="kw4">string</span> text<span class="br0">&#41;</span>
<span class="br0">&#123;</span>
&nbsp; &nbsp; <span class="kw1">var</span> model <span class="sy0">=</span> <span class="kw3">new</span> TextModel<span class="br0">&#40;</span>text<span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; <span class="kw1">return</span> View<span class="br0">&#40;</span>model<span class="br0">&#41;</span><span class="sy0">;</span>
<span class="br0">&#125;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">public ActionResult Index()
{
    return View();
}

public ActionResult Text(string text)
{
    var model = new TextModel(text);
    return View(model);
}</pre></div></div>

<p>Now I&#8217;ve added actions and views for a simple form that asks for a piece of text, submits it, and then shows a response based on whetehr the txt is populated or not.</p>
<p>So we have a form:<br />
<div id="attachment_2379" style="width: 310px" class="wp-caption aligncenter"><a href="/wp-content/uploads/2014/02/02_AddAForm.png"><img src="/wp-content/uploads/2014/02/02_AddAForm-300x197.png" alt="Sample Form Web Page" width="300" height="197" class="size-medium wp-image-2379" srcset="/wp-content/uploads/2014/02/02_AddAForm-300x197.png 300w, /wp-content/uploads/2014/02/02_AddAForm.png 365w" sizes="(max-width: 300px) 100vw, 300px" /></a><p class="wp-caption-text">Sample Form Web Page</p></div></p>
<p>And the page it submits to:<br />
<div id="attachment_2380" style="width: 185px" class="wp-caption aligncenter"><a href="/wp-content/uploads/2014/02/02_AddAFormSubmitted.png"><img src="/wp-content/uploads/2014/02/02_AddAFormSubmitted.png" alt="Submission Page" width="175" height="162" class="size-full wp-image-2380" /></a><p class="wp-caption-text">Submission Page</p></div></p>
<p>This will be easy to unit test but give us the tooling we would need to do anything more complex.</p>
<p>The unit test project is <a href="https://github.com/tarwn/CloudPixiesAndGhosts/tree/master/CloudSiteTests">/CloudSiteTests</a>. My first steps are to add a reference to the web project, add nunit via Nuget, and create some tests.</p>
<p>The 3 initials tests I create pass locally:<br />
<div id="attachment_2382" style="width: 623px" class="wp-caption aligncenter"><a href="/wp-content/uploads/2014/02/02_MoreUnitTests.png"><img src="/wp-content/uploads/2014/02/02_MoreUnitTests.png" alt="Passing Unit Tests (NCrunch console)" width="613" height="99" class="size-full wp-image-2382" srcset="/wp-content/uploads/2014/02/02_MoreUnitTests.png 613w, /wp-content/uploads/2014/02/02_MoreUnitTests-300x48.png 300w" sizes="(max-width: 613px) 100vw, 613px" /></a><p class="wp-caption-text">Passing Unit Tests (NCrunch console)</p></div></p>
<p>Now I add a fourth test to handle the case where I submit the form with an empty input.</p>
<div id="attachment_2381" style="width: 676px" class="wp-caption aligncenter"><a href="/wp-content/uploads/2014/02/02_FailingUnitTest.png"><img src="/wp-content/uploads/2014/02/02_FailingUnitTest.png" alt="And now a failing one (NCrunch Console)" width="666" height="130" class="size-full wp-image-2381" srcset="/wp-content/uploads/2014/02/02_FailingUnitTest.png 666w, /wp-content/uploads/2014/02/02_FailingUnitTest-300x58.png 300w" sizes="(max-width: 666px) 100vw, 666px" /></a><p class="wp-caption-text">And now a failing one (NCrunch Console)</p></div>
<p>With a failing test in the mix, now we can customize our deployment to run the unit tests and we will know for sure when they are being run correctly.</p>
<h2>Customize the Deployment</h2>
<p>The next step is to create a custom deployment so we can modify it to also run the unit tests. The <a href="http://www.windowsazure.com/en-us/documentation/articles/command-line-tools/">Azure Command Line Tools</a> includes a set of commands to generate a basic deployment. We can then take this basic process and tune it to our needs.</p>
<p><strong>1.</strong> Install node.js, as azure cli runs on node: http://nodejs.org/</p>
<p><strong>2.</strong> Next we need to install the azure cli package. In a command line, run the following:</p>
<p><code>npm install azure-cli -g</code></p>
<p>This uses the node.js package manager to install the azure-cli package and installs it for global (-g) use, rather than for an individual project.</p>
<p><strong>3.</strong> Open up the root solution folder and check out the options we can use with cli command:</p>
<p><code>run: azure site deploymentscript -h</code></p>
<p><strong>4.</strong> To generate a deployment script, i&#8217;ll specify the aspWAP option and point to the project:</p>
<p><code>azure site deploymentscript --aspWAP CloudSite/CloudSite.csproj -s CloudPixiesAndGhosts.sln</code></p>
<p>This generates a .deployment and a deploy.cmd file.</p>
<p><strong>5.</strong> Run the deploy.cmd file to test it out</p>
<p>I received an error on my first run because nuget wasn&#8217;t available. I enabled package restore on the solution and tried again and it worked. Later I found the same section (Deployment section, subsection 1) of this script was failing on Azure, so I ended up commenting it out entirely.</p>
<p>This may no longer be an issue, the Azure team has been updating things frequently and newer versions may be improved since.</p>
<p><strong>6.</strong> Edit the deploy.cmd file to run my nunit tests (after adding the nunit executable to my project):</p>
<p>I added the following section to the command file to run my tests:</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="dos"><thead><tr><td colspan="2"  class="head">DOS</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
</pre></td><td class="de1"><pre class="de1"><span class="co2">:: 2. Tests</span>
<span class="kw3">echo</span> 2: Build and execute tests
&nbsp;
<span class="kw3">echo</span> 2a: Executing Unit Tests: CloudSiteTests
<span class="sy0">%</span><span class="re3">MSBUILD_PATH</span><span class="sy0">%</span> &quot;<span class="sy0">%</span><span class="re3">DEPLOYMENT_SOURCE</span><span class="sy0">%</span>\CloudSiteTests\CloudSiteTests.csproj&quot; /nologo /verbosity:m /t:Build /p:Configuration=Debug
<span class="kw1">call</span> &quot;tools/nunit-console.exe&quot; &quot;<span class="sy0">%</span><span class="re3">DEPLOYMENT_SOURCE</span><span class="sy0">%</span>\CloudSiteTests\bin\Debug\CloudSiteTests.dll&quot;
&nbsp;
<span class="kw1">IF</span> <span class="sy0">!</span><span class="kw2">ERRORLEVEL</span><span class="sy0">!</span> <span class="kw2">NEQ</span> 0 <span class="kw1">goto</span> error</pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">:: 2. Tests
echo 2: Build and execute tests

echo 2a: Executing Unit Tests: CloudSiteTests
%MSBUILD_PATH% "%DEPLOYMENT_SOURCE%\CloudSiteTests\CloudSiteTests.csproj" /nologo /verbosity:m /t:Build /p:Configuration=Debug
call "tools/nunit-console.exe" "%DEPLOYMENT_SOURCE%\CloudSiteTests\bin\Debug\CloudSiteTests.dll"

IF !ERRORLEVEL! NEQ 0 goto error</pre></div></div>

<p>Now when I commit all of these changes and the deployment runs in Azure, I get the following result:</p>
<div id="attachment_2384" style="width: 710px" class="wp-caption aligncenter"><a href="/wp-content/uploads/2014/02/02_UnitTestFailingDeployment.png"><img src="/wp-content/uploads/2014/02/02_UnitTestFailingDeployment.png" alt="Unit Test Failing Deployment" width="700" height="195" class="size-full wp-image-2384" srcset="/wp-content/uploads/2014/02/02_UnitTestFailingDeployment.png 700w, /wp-content/uploads/2014/02/02_UnitTestFailingDeployment-300x83.png 300w" sizes="(max-width: 700px) 100vw, 700px" /></a><p class="wp-caption-text">Unit Test Failing Deployment</p></div>
<p>The log for the deployment captures the results, so I can see exactly which test failed (and also, oddly, that they appeared to run the tests twice):</p>
<div id="attachment_2385" style="width: 710px" class="wp-caption aligncenter"><a href="/wp-content/uploads/2014/02/02_UnitTestResultsInLog.png"><img src="/wp-content/uploads/2014/02/02_UnitTestResultsInLog.png" alt="Detailed Log of Deployment Failure" width="700" height="489" class="size-full wp-image-2385" srcset="/wp-content/uploads/2014/02/02_UnitTestResultsInLog.png 700w, /wp-content/uploads/2014/02/02_UnitTestResultsInLog-300x209.png 300w" sizes="(max-width: 700px) 100vw, 700px" /></a><p class="wp-caption-text">Detailed Log of Deployment Failure</p></div>
<p>And then when I add some logic to make the test pass, I get this result:</p>
<div id="attachment_2383" style="width: 710px" class="wp-caption aligncenter"><a href="/wp-content/uploads/2014/02/02_RanTestsAndDeployed.png"><img src="/wp-content/uploads/2014/02/02_RanTestsAndDeployed.png" alt="Passing Unit tests and Successful Deployment" width="700" height="236" class="size-full wp-image-2383" srcset="/wp-content/uploads/2014/02/02_RanTestsAndDeployed.png 700w, /wp-content/uploads/2014/02/02_RanTestsAndDeployed-300x101.png 300w" sizes="(max-width: 700px) 100vw, 700px" /></a><p class="wp-caption-text">Passing Unit tests and Successful Deployment</p></div>
<p>And there we have it, Nunit unit tests running automatically during the deployment every time I commit to master.</p>
<h2>Sidenote: CassiniDev</h2>
<p>As I mentioned before, I originally had set out to get CassiniDev, Selenium, and Phantom all running in harmony as part of the build. I got CassiniDev and Selenium running locally, but couldn&#8217;t get CassiniDev to host the site during the deployment:</p>
<div id="attachment_2370" style="width: 710px" class="wp-caption aligncenter"><a href="/wp-content/uploads/2014/02/03_CassiniFailure.png"><img src="/wp-content/uploads/2014/02/03_CassiniFailure.png" alt="Network Permissions Denied for CassiniDev" width="700" height="306" class="size-full wp-image-2370" srcset="/wp-content/uploads/2014/02/03_CassiniFailure.png 700w, /wp-content/uploads/2014/02/03_CassiniFailure-300x131.png 300w" sizes="(max-width: 700px) 100vw, 700px" /></a><p class="wp-caption-text">Network Permissions Denied for CassiniDev</p></div>
<p>During the setup of the test, CassiniDev&#8217;s StartServer command receives an &#8220;Access Denied&#8221; exception.</p>
<p>This is the <a href="https://github.com/tarwn/CloudPixiesAndGhosts/tree/master/CloudPixiesTests">/CloudPixiesTests</a> project in the solution, if you&#8217;re curious. The Selenium + CassiniDev (ie, the magix pixies part of the repository name) runs fine locally. </p>
<h2>Would I Use This For Production?</h2>
<p>Personally, I wouldn&#8217;t use this as my test and deployment process. I think it&#8217;s a great system, but I miss too much from having a build server and have a high enough comfort level with build servers that this simplified setup doesn&#8217;t win me much (especially once you add in the limits on what you can do with the built-in staging platform).</p>
<p>I really like the deployment side of this and could see using it as the last mile, with a build server that automatically managed the build process and then either pushes to a repository or merges from the branch it&#8217;s building to the one that gets deployed. The only downside to this method would be applying schema updates to storage resources (SQL or serialized documents), as the actual deployment would then be operating asynchronously from your build process, but even that is solvable.</p>
]]></content:encoded>
			<wfw:commentRss>/index.php/enterprisedev/cloud/azure/azure-web-sites-deployment-and-unit-testing/feed/</wfw:commentRss>
		<slash:comments>2</slash:comments>
		</item>
		<item>
		<title>Using SpecFlow to drive Selenium WebDriver Tests</title>
		<link>/index.php/enterprisedev/application-lifecycle-management/using-specflow-to/</link>
		<comments>/index.php/enterprisedev/application-lifecycle-management/using-specflow-to/#comments</comments>
		<pubDate>Mon, 30 Jan 2012 10:52:00 +0000</pubDate>
		<dc:creator><![CDATA[Eli Weinstock-Herman (tarwn)]]></dc:creator>
				<category><![CDATA[Application Lifecycle Management]]></category>
		<category><![CDATA[bdd]]></category>
		<category><![CDATA[c#]]></category>
		<category><![CDATA[gherkin]]></category>
		<category><![CDATA[nunit]]></category>
		<category><![CDATA[selenium]]></category>
		<category><![CDATA[specflow]]></category>

		<guid isPermaLink="false">/index.php/2012/01/using-specflow-to/</guid>
		<description><![CDATA[SpecFlow is a .Net library that allows us to describe user expectations in a consistent Domain-Specific Language that can be wired for automatic execution. By writing tests in a human readable manner, our tests can serve as a bridge between the users expectations and the code we spend time writing.]]></description>
				<content:encoded><![CDATA[<p><a href="http://specflow.org/" title="Visit http://specflow.org/">SpecFlow</a> is a .Net library that allows us to describe user expectations in a consistent Domain-Specific Language that can be wired for automatic execution. By writing executable tests in a human readable manner, our tests can serve as a bridge between the users expectations and the code we produce to meet them. </p>
<p>This post will walk through the benefits and high level details of these methods before diving into a practical example of implementing several tests against the MVC Music Store site from my <a href="http://wiki.lessthandot.com/index.php/Eli%27s_Continuous_Delivery_Project" title="Visit the Wiki page on my Continuous Delivery project">Continuous Delivery</a> project. Along the way we will also use Selenium Web Driver, the Page Object pattern, and Nunit as we interact with an ASP.Net MVC site.</p>
<div style="text-align: center; font-size: .9em; color: #666666;">
	<img src="http://www.tiernok.com/LTDBlog/SpecFlow/MusicStore.jpg" title="ASP.Net MVC Music Store" /><br />
	ASP.Net MVC Music Store
</div>
<h2>Why Executable Tests</h2>
<p>End users don&#8217;t have a very clear idea of what they need. This is reflected in the requirements gathering time of projects that operate from detailed, up front specs. It&#8217;s also reflected by Agile practices, which promote short, iterative coding phases, one purpose of which is to get quick user feedback specifically to mitigate this risk. </p>
<p>Our users aren&#8217;t to blame. </p>
<p>Part of the problem is our misunderstanding of what the users are trying to achieve. With different backgrounds, vocabularies, and general contexts, communication gaps and misunderstandings are to be expected. Add the fact that our end user often has only a vague definition in their own mind of what they want, which takes seeing or using a particular piece of software to determine whether their idea is works or needs further improvement or refinement. And as if that weren&#8217;t enough, there&#8217;s often a failure ask for the appropriate level of understanding committing code to editor.</p>
<p>Tests can&#8217;t solve all of these issues, but they can help close the gap.</p>
<h3>SpecFlow, Gherkin, and Readable Tests</h3>
<p>SpecFlow defines features (user stories) and scenarios in a language called <a href="https://github.com/cucumber/cucumber/wiki/Gherkin" title="GitHub page for Gherkin">Gherkin</a>, which describes itself as a <a href="http://martinfowler.com/bliki/BusinessReadableDSL.html" title="Martin Fowler on Business-Readable DSLs">Business-Readable Domain-Specific Language</a>. Using a structured language to define business expectations first requires us do the appropriate level of analysis, or at least ask ourselves what the appropriate level of analysis is. Using a business-readable syntax means we can share the written requirements with our end user and they can confirm (or help correct) our understanding of their expectations. </p>
<p>With our user expectations written in a clearly structured DSL, we can then use a parser to wire those expectations directly to test code, minimizing any further misunderstandings or translation errors that would occur if we were write up the executable tests separately. Now we can consistently test our application against the very clear expectations we have confirmed with the end user. </p>
<p>Following the Behavior Driven Development (BDD) or Acceptance Test Driven Development methods, if we wire these tests up prior to starting to code for them, then we can help keep our work targeted directly to the end user expectations, minimizing waste from unnecessary additions and catching potential problems far sooner.</p>
<h2>Introducing the project</h2>
<p>As part of the Continuous Delivery project I mentioned above, I implemented a barebones interface testing project that uses Selenium WebDriver and Nunit to execute a couple basic tests against a deployed MVC site. The raw source code for the project is available on <a href="https://bitbucket.org/tarwn/mvcmusicstore.interfacetests" title="tarwn/mvcmusicstore.interfacetests on BitBucket">BitBucket</a>.</p>
<p><i>If you haven&#8217;t used Selenium before or are unfamiliar with the Page Object pattern, you can find more information in <a href="/index.php/WebDev/UIDevelopment/automated-web-testing-with-selenium-2" title="My earlier Selenium post covering the Page Object pattern">this earlier post</a> which covers these topics in depth.</i></p>
<div style="text-align: center; font-size: .9em; color: #666666;">
	<img src="http://www.tiernok.com/LTDBlog/ContinuousDelivery/interfacetests.png" title="Interface Tests Project" /><br />
	MVCMusicStore Interface Tests Project
</div>
<p>Currently the project has a minimal base page object and a few lightly defined pages, just enough to support a test to browse the main navigation links through the site and verify some genre links work. The SpecFlow tests that I add to the project will force me to continue fleshing out the necessary functionality of the Page Library and test project as we need new functionality or shortcut methods to keep the test implementations clean and readable.</p>
<p>The tests are written in Nunit and extend a TestFixtureBase class that is responsible for initializing a RemoteWebDriver (browser) and quitting it for each individual test. A singleton Settings object exists to load settings from a local configuration file for the full test run, letting us provide a configured base URL and to later add sample values that are specific to the environments the tests run in.</p>
<h2>Adding SpecFlow</h2>
<p>The first step is to add SpecFlow. While there is a NuGet package for it, you will actually want to download the <a href="https://github.com/techtalk/SpecFlow/downloads" title="SpecFlow downloads on GitHub">SpecFlow installer</a> and install it. The installer includes templates, intellisense, and other bits and bobs that you won&#8217;t get with the NuGet package. That said, I actually did both, first installing it then using NuGet to pull down the package for my project so I could commit the packaged references to the projects source code repository.</p>
<p>After installing the full install package, there will be a few new items in the &#8220;Add New Items&#8221; menu in Visual Studio.</p>
<div style="text-align: center; font-size: .9em; color: #666666;">
	<img src="http://www.tiernok.com/LTDBlog/SpecFlow/AddNewItem.png" title="'Add New Item' dialog in Visual Studio" /><br />
	&#8220;Add New Item&#8221; dialog in Visual Studio
</div>
<p>The &#8220;SpecFlow Feature File&#8221; option will create a new pair of files for our feature and the generated code behind that feature. The feature is where we will write our user story and the individual scenarios in Gherkin. The generated code reflects the scenario as an Nunit test, with each step in the scenario treated as a potential function to call out to.</p>
<p>The &#8220;SpecFlow Step Definition&#8221; item is just a *.cs class file that we would put the individual step functions in for the tests to call. Both the Feature File and Step Definition file are populated with an addition sample as part of their template..</p>
<h2>Adding a SpecFlow feature</h2>
<p>To start with, lets discuss what we&#8217;re going to be testing. Since the application is a Music store, lets define how we want the cart total to work. Here&#8217;s the User Story (feature) we will be working with:</p>
<blockquote><p>As a shopper I would like to see my up to date cart total as part of each screen so I don&#8217;t have to visit my cart to verify my items are in it</p></blockquote>
<p>Now this probably sounds like enough to go ahead an implement it, but lets nail down some scenarios first. If I was an working with an end user, these are the type of things we would probably come up with:</p>
<ul>
<li>When I have nothing in my cart, it displays a total of 0</li>
<li>When I add an item to my cart, it displays a total of 1</li>
<li>When I add two of the same item to my cart, it displays a total of 2</li>
<li>When I add two separate items to my cart, it displays a total of 2</li>
<li>When I have two items in my cart and I remove one, it displays a total of 1</li>
<li>When I have two items in my cart, after I checkout it displays a total of 0</li>
</ul>
<p>Note that these are a collaborative effort. My pretend end user probably came up with some, which I then helped to expand on via questions and experience.</p>
<p>Writing this in a Feature File in Gherkin we would have something like:</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="text"><thead><tr><td colspan="2"  class="head">Text</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
</pre></td><td class="de1"><pre class="de1">Feature: Cart Total
&nbsp; &nbsp; As a shopper 
&nbsp; &nbsp; I want to see my cart total on every screen 
&nbsp; &nbsp; So I don't have to leave my current page to verify it's contents
&nbsp;
@UI
Scenario: Empty Cart
&nbsp; &nbsp; Given I have the Home Page open
&nbsp; &nbsp; Then the cart is empty
&nbsp;
@UI
Scenario: Add an Item
&nbsp; &nbsp; Given I have the Home Page open
&nbsp; &nbsp; And I select a genre from the left
&nbsp; &nbsp; And I select an album from the genre page
&nbsp; &nbsp; When I add the album to my cart
&nbsp; &nbsp; Then the cart has a total of 1
&nbsp;
...</pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">Feature: Cart Total
	As a shopper 
	I want to see my cart total on every screen 
	So I don't have to leave my current page to verify it's contents

@UI
Scenario: Empty Cart
	Given I have the Home Page open
	Then the cart is empty

@UI
Scenario: Add an Item
	Given I have the Home Page open
	And I select a genre from the left
	And I select an album from the genre page
	When I add the album to my cart
	Then the cart has a total of 1

...</pre></div></div>

<p>I&#8217;ve added a SpecFlow Feature File to the project and I can write all of the scenarios for the feature. After saving it, I can run the Nunit GUI and see a series of new, inconclusive tests, each named after the Scenario name I provided in the Feature File.</p>
<div style="text-align: center; font-size: .9em; color: #666666;">
	<img src="http://www.tiernok.com/LTDBlog/SpecFlow/NunitInconclusive.png" title="Inconclusive tests in Nunit GUI" /><br />
	Inconclusive tests in Nunit GUI
</div>
<p>Feature File: <a href="https://bitbucket.org/tarwn/mvcmusicstore.interfacetests/src/410c3ab7c869/MvcMusicStore.InterfaceTests/Features/Cart.feature" title="View the file on BitBucket">View the file on BitBucket</a></p>
<p>Now it&#8217;s time to start wiring them into the Page Library calls.</p>
<h2>Wiring in the Browser</h2>
<p>When each scenario runs, we want it to start clean with a fresh browser instance. This is similar to how the existing <a href="https://bitbucket.org/tarwn/mvcmusicstore.interfacetests/src/a7082afb8304/MvcMusicStore.InterfaceTests/TestFixtureBase.cs" title="View the class on BitBucket">TestFixtureBase</a> works, so we can reuse that object with a few tweaks. The challenge with the SpecFlow scenarios is that I will be reusing steps in several different features and I don&#8217;t want several different browsers to open based on which class is instantiated to make a coded step definition available. Also, unlike the current interface tests that execute inside a single method, the fact that we are running tests across multiple methods will make it trickier to keep track of the current page instance.</p>
<p>Based on coding up several earlier SpecFlow steps, I ended up with a base class for my step definitions that helped resolve both of these issues, while also providing some properties to help improve readability.</p>
<p><b>InterfaceTests/Features/FeatureBase.cs</b></p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="csharp"><thead><tr><td colspan="2"  class="head">C#</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
</pre></td><td class="de1"><pre class="de1"><span class="kw1">namespace</span> MvcMusicStore<span class="sy0">.</span><span class="me1">InterfaceTests</span><span class="sy0">.</span><span class="me1">Features</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">public</span> <span class="kw4">class</span> FeatureBase <span class="sy0">:</span> TestFixtureBase <span class="br0">&#123;</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="co2">#region Properties for Readability</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="co1">/// &lt;summary&gt;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="co1">/// Shortcut property to Settings.CurrentSettings.Defaults for readability</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="co1">/// &lt;/summary&gt;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">protected</span> DefaultValues <span class="kw1">Default</span> <span class="br0">&#123;</span> <span class="kw1">get</span> <span class="br0">&#123;</span> <span class="kw1">return</span> Settings<span class="sy0">.</span><span class="me1">CurrentSettings</span><span class="sy0">.</span><span class="me1">Defaults</span><span class="sy0">;</span> <span class="br0">&#125;</span> <span class="br0">&#125;</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="co1">/// &lt;summary&gt;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="co1">/// Sets the Current page to the specified value - provided to help readability</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="co1">/// &lt;/summary&gt;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">protected</span> PageBase NextPage <span class="br0">&#123;</span> <span class="kw1">set</span> <span class="br0">&#123;</span> CurrentPage <span class="sy0">=</span> <span class="kw1">value</span><span class="sy0">;</span> <span class="br0">&#125;</span> <span class="br0">&#125;</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="co2">#endregion</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">protected</span> PageBase CurrentPage <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">get</span> <span class="br0">&#123;</span> <span class="kw1">return</span> <span class="br0">&#40;</span>PageBase<span class="br0">&#41;</span>ScenarioContext<span class="sy0">.</span><span class="me1">Current</span><span class="br0">&#91;</span><span class="st0">&quot;CurrentPage&quot;</span><span class="br0">&#93;</span><span class="sy0">;</span> <span class="br0">&#125;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">set</span> <span class="br0">&#123;</span> ScenarioContext<span class="sy0">.</span><span class="me1">Current</span><span class="br0">&#91;</span><span class="st0">&quot;CurrentPage&quot;</span><span class="br0">&#93;</span> <span class="sy0">=</span> <span class="kw1">value</span><span class="sy0">;</span> <span class="br0">&#125;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#91;</span>BeforeScenario<span class="br0">&#40;</span><span class="st0">&quot;UI&quot;</span><span class="br0">&#41;</span><span class="br0">&#93;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">public</span> <span class="kw4">void</span> BeforeScenario<span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">if</span> <span class="br0">&#40;</span><span class="sy0">!</span>ScenarioContext<span class="sy0">.</span><span class="me1">Current</span><span class="sy0">.</span><span class="me1">ContainsKey</span><span class="br0">&#40;</span><span class="st0">&quot;CurrentDriver&quot;</span><span class="br0">&#41;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Test_Setup<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ScenarioContext<span class="sy0">.</span><span class="me1">Current</span><span class="sy0">.</span><span class="kw1">Add</span><span class="br0">&#40;</span><span class="st0">&quot;CurrentDriver&quot;</span>, CurrentDriver<span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">else</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; CurrentDriver <span class="sy0">=</span> <span class="br0">&#40;</span>RemoteWebDriver<span class="br0">&#41;</span>ScenarioContext<span class="sy0">.</span><span class="me1">Current</span><span class="br0">&#91;</span><span class="st0">&quot;CurrentDriver&quot;</span><span class="br0">&#93;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#91;</span>AfterScenario<span class="br0">&#40;</span><span class="st0">&quot;UI&quot;</span><span class="br0">&#41;</span><span class="br0">&#93;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">public</span> <span class="kw4">void</span> AfterScenario<span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">if</span> <span class="br0">&#40;</span>ScenarioContext<span class="sy0">.</span><span class="me1">Current</span><span class="sy0">.</span><span class="me1">ContainsKey</span><span class="br0">&#40;</span><span class="st0">&quot;CurrentDriver&quot;</span><span class="br0">&#41;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Test_Teardown<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ScenarioContext<span class="sy0">.</span><span class="me1">Current</span><span class="sy0">.</span><span class="kw1">Remove</span><span class="br0">&#40;</span><span class="st0">&quot;CurrentDriver&quot;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw4">string</span> s <span class="sy0">=</span> <span class="st0">&quot;&quot;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp;
<span class="br0">&#125;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">namespace MvcMusicStore.InterfaceTests.Features {
        public class FeatureBase : TestFixtureBase {

                #region Properties for Readability

                /// &lt;summary&gt;
                /// Shortcut property to Settings.CurrentSettings.Defaults for readability
                /// &lt;/summary&gt;
                protected DefaultValues Default { get { return Settings.CurrentSettings.Defaults; } }

                /// &lt;summary&gt;
                /// Sets the Current page to the specified value - provided to help readability
                /// &lt;/summary&gt;
                protected PageBase NextPage { set { CurrentPage = value; } }

                #endregion

                protected PageBase CurrentPage {
                        get { return (PageBase)ScenarioContext.Current["CurrentPage"]; }
                        set { ScenarioContext.Current["CurrentPage"] = value; }
                }

                [BeforeScenario("UI")]
                public void BeforeScenario() {
                        if (!ScenarioContext.Current.ContainsKey("CurrentDriver")) {
                                Test_Setup();
                                ScenarioContext.Current.Add("CurrentDriver", CurrentDriver);
                        }
                        else {
                                CurrentDriver = (RemoteWebDriver)ScenarioContext.Current["CurrentDriver"];
                        }
                }

                [AfterScenario("UI")]
                public void AfterScenario() {
                        if (ScenarioContext.Current.ContainsKey("CurrentDriver")) {
                                Test_Teardown();
                                ScenarioContext.Current.Remove("CurrentDriver");
                        }
                        string s = "";
                }
        }

}</pre></div></div>

<p>I&#8217;ve used the SpecFlow hooks for BeforeScenario and AfterScenario to handle initialization and I&#8217;ve used the provided ScenarioContext to help store a common driver and the current page. I&#8217;ve also specified that these hooks only occur for tests tagged with &#8220;UI&#8221; so I can later create some additional tests that will make direct calls to the JSON controller endpoints without spinning up a whole browser session.</p>
<p>At this point I still get all &#8220;Inconclusive&#8221; test results from Nunit, but I can see that each tests fires up a browser as Nunit progresses through the test run and the Before/AfterScenario hooks are called.</p>
<h2>Defining the Step Definition File</h2>
<p>With the Feature completed and a base Feature file created to handle our browser, it&#8217;s time to write the code that will be executed behind the individuals steps of the file.</p>
<p>Besides creating tests that result in &#8220;Inconclusive&#8221; results, SpecFlow also provides us with some basic code to get started with the step definition file. In the text output tab of the Nunit GUI we can see that each undefined step from SpecFlow outputs the information needed to implement the step, like so:</p>
<div style="text-align: center; font-size: .9em; color: #666666;">
	<img src="http://www.tiernok.com/LTDBlog/SpecFlow/NunitStepDefinition.png" title="Step Definition text in Nunit Text Output" /><br />
	Step Definition text in Nunit Text Output
</div>
<p>Back in Visual Studio I will create a new &#8220;SpecFlow Step Definition&#8221; file and copy the content of the Nunit Text output window into the class in this file, removing the unnecessary addition example steps and all the extra class definitions and plain text. Each statement that appears in a Scenario in the Feature File has a corresponding method in the generated Nunit test, so each one will need a method. I&#8217;ve actually cheated a little and reused some steps from some earlier SpecFlow features, so my final file only has the new steps defined:</p>
<p>The other steps are in a previously defined <a href="https://bitbucket.org/tarwn/mvcmusicstore.interfacetests/src/a7082afb8304/MvcMusicStore.InterfaceTests/Features/BrowsingSteps.cs" title="Previously Defined BrowsingSteps.cs file">Step Definition file</a>. I&#8217;ll probably centralize common steps at some point to make them easy to find, but for the meantime the base class will help keep the current page and web browser accessible to the steps in both files and I have few enough tests that I&#8217;ll remember where those definitions are (remind me I said this when I go back in a week and make a fuss on twitter about not remembering where they are).</p>
<p>Once I have the Step Definition methods setup, I can go ahead and wire in the code necessary to drive the browser. I&#8217;ll walk through the methods for the &#8220;Add an Item&#8221; feature.</p>
<p><b>InterfaceTests/Features/Cart.feature</b></p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="text"><thead><tr><td colspan="2"  class="head">Text</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
</pre></td><td class="de1"><pre class="de1">&nbsp; &nbsp; Given I have the Home Page open
&nbsp; &nbsp; And I select a genre from the left
&nbsp; &nbsp; And I select an album from the genre page
&nbsp; &nbsp; When I add the album to my cart
&nbsp; &nbsp; Then the cart has a total of 1</pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">	Given I have the Home Page open
	And I select a genre from the left
	And I select an album from the genre page
	When I add the album to my cart
	Then the cart has a total of 1</pre></div></div>

<p>Keep in mind if you look at the code repository some of these steps are in separate files.</p>
<h3>Given I have the Home Page Open</h3>
<p>Each of my scenarios starts with the same step, ensuring we have the browser open and pointing to the site. The step definition is then fairly straightforward, given the base class already ensures we have a fresh browser available:</p>
<p><b>InterfaceTests/Features/NavigationSteps.cs</b> &#8211; this is the step I borrowed from a previous test</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="csharp"><thead><tr><td colspan="2"  class="head">C#</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
</pre></td><td class="de1"><pre class="de1"><span class="br0">&#91;</span>Given<span class="br0">&#40;</span><span class="st_h">@&quot;I have the Home Page open&quot;</span><span class="br0">&#41;</span><span class="br0">&#93;</span>
<span class="kw1">public</span> <span class="kw4">void</span> IHaveTheHomePageOpen<span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; NextPage <span class="sy0">=</span> PageBase<span class="sy0">.</span><span class="me1">LoadIndexPage</span><span class="br0">&#40;</span>CurrentDriver, Settings<span class="sy0">.</span><span class="me1">CurrentSettings</span><span class="sy0">.</span><span class="me1">BaseUrl</span><span class="br0">&#41;</span><span class="sy0">;</span>
<span class="br0">&#125;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">[Given(@"I have the Home Page open")]
public void IHaveTheHomePageOpen() {
	NextPage = PageBase.LoadIndexPage(CurrentDriver, Settings.CurrentSettings.BaseUrl);
}</pre></div></div>

<p>The class definition for FeatureBase above includes a CurrentPage property that we use to store and retrieve the page object associated with the browsers current page. To improve readability a little, I&#8217;ve created the NextPage property, which is simply a setter for the CurrentPage one. </p>
<h3>And I select a genre from the left</h3>
<p>All pages in the application display the genre list on the left, so this makes a simple way to get to a specific genre page no matter where we are in the site.</p>
<p><b>InterfaceTests/Features/CartSteps.cs</b></p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="csharp"><thead><tr><td colspan="2"  class="head">C#</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
</pre></td><td class="de1"><pre class="de1"><span class="br0">&#91;</span>Given<span class="br0">&#40;</span><span class="st_h">@&quot;I select a genre from the left&quot;</span><span class="br0">&#41;</span><span class="br0">&#93;</span>
<span class="kw1">public</span> <span class="kw4">void</span> GivenISelectAGenreFromTheLeft<span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; NextPage <span class="sy0">=</span> CurrentPage<span class="sy0">.</span><span class="me1">SelectGenre</span><span class="br0">&#40;</span><span class="kw1">Default</span><span class="sy0">.</span><span class="me1">Genre</span><span class="sy0">.</span><span class="me1">Name</span><span class="br0">&#41;</span><span class="sy0">;</span>
<span class="br0">&#125;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">[Given(@"I select a genre from the left")]
public void GivenISelectAGenreFromTheLeft() {
	NextPage = CurrentPage.SelectGenre(Default.Genre.Name);
}</pre></div></div>

<p>All page objects extend the PageBase class, so I&#8217;ve added a partial class for PageBase (PageLibraryPageBase.Navigation.cs) that includes navigation and behavior that&#8217;s common to all pages in the application. </p>
<p><b>Default.Genre.Name</b>: As I mentioned earlier, there is a singleton Settings object that is responsible for loading settings from an XML file and making them available to the tests. I&#8217;ve added a <i>Genre</i> and <i>Album</i> element to the settings file so I can provide some default values without hardcoding them into the test code or, worse, each individual test. I then created another shortcut property in my FeatureBase so I can reference these values by the property name Default instead of the much longer Settings.CurrentSettings.Default.</p>
<h3>And I select an album from the genre page</h3>
<p>Once I have the genre page open, I can select an album that I intend to add to the cart.</p>
<p><b>InterfaceTests/Features/CartSteps.cs</b></p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="csharp"><thead><tr><td colspan="2"  class="head">C#</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
</pre></td><td class="de1"><pre class="de1"><span class="br0">&#91;</span>Given<span class="br0">&#40;</span><span class="st_h">@&quot;I select an album from the genre page&quot;</span><span class="br0">&#41;</span><span class="br0">&#93;</span>
<span class="kw1">public</span> <span class="kw4">void</span> GivenISelectAnAlbumFromTheGenrePage<span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; NextPage <span class="sy0">=</span> CurrentPage<span class="sy0">.</span><span class="kw1">As</span><span class="sy0">&lt;</span>BrowsePage<span class="sy0">&gt;</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">.</span><span class="me1">SelectAlbum</span><span class="br0">&#40;</span><span class="kw1">Default</span><span class="sy0">.</span><span class="me1">Album</span><span class="sy0">.</span><span class="me1">Name</span><span class="br0">&#41;</span><span class="sy0">;</span>
<span class="br0">&#125;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">[Given(@"I select an album from the genre page")]
public void GivenISelectAnAlbumFromTheGenrePage() {
	NextPage = CurrentPage.As&lt;BrowsePage&gt;().SelectAlbum(Default.Album.Name);
}</pre></div></div>

<p>One of the downsides of having a single property to track the current page is that it is typed as a PageBase object. I could add cast statements to each line, but by adding a generic method to handle the cast, I preserve the left-to-right reading order of the statement. Had I used an inline cast, we would be looking at:</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="csharp"><thead><tr><td colspan="2"  class="head">C#</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
</pre></td><td class="de1"><pre class="de1"><span class="br0">&#91;</span>Given<span class="br0">&#40;</span><span class="st_h">@&quot;I select an album from the genre page&quot;</span><span class="br0">&#41;</span><span class="br0">&#93;</span>
<span class="kw1">public</span> <span class="kw4">void</span> GivenISelectAnAlbumFromTheGenrePage<span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; NextPage <span class="sy0">=</span> <span class="br0">&#40;</span><span class="br0">&#40;</span>BrowsePage<span class="br0">&#41;</span>CurrentPage<span class="br0">&#41;</span><span class="sy0">.</span><span class="me1">SelectAlbum</span><span class="br0">&#40;</span><span class="kw1">Default</span><span class="sy0">.</span><span class="me1">Album</span><span class="sy0">.</span><span class="me1">Name</span><span class="br0">&#41;</span><span class="sy0">;</span>
<span class="br0">&#125;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">[Given(@"I select an album from the genre page")]
public void GivenISelectAnAlbumFromTheGenrePage() {
	NextPage = ((BrowsePage)CurrentPage).SelectAlbum(Default.Album.Name);
}</pre></div></div>

<p>Which just doesn&#8217;t seem as readable to me.</p>
<p>I&#8217;ve added the generic cast method to the PageBase method to make it easily accessible:</p>
<p><b>PageLibrary/Base/PageBase.cs</b></p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="csharp"><thead><tr><td colspan="2"  class="head">C#</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
</pre></td><td class="de1"><pre class="de1"><span class="kw1">public</span> <span class="kw1">abstract</span> <span class="kw1">partial</span> <span class="kw4">class</span> PageBase <span class="sy0">:</span> CommonBase <span class="br0">&#123;</span>
&nbsp;
&nbsp; &nbsp; <span class="co1">//...</span>
&nbsp; &nbsp; 
&nbsp; &nbsp; <span class="kw1">public</span> TPage <span class="kw1">As</span><span class="sy0">&lt;</span>TPage<span class="sy0">&gt;</span><span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="kw1">where</span> TPage <span class="sy0">:</span> PageBase, <span class="kw3">new</span><span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">return</span> <span class="br0">&#40;</span>TPage<span class="br0">&#41;</span><span class="kw1">this</span><span class="sy0">;</span>
&nbsp; &nbsp; <span class="br0">&#125;</span>
<span class="br0">&#125;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">public abstract partial class PageBase : CommonBase {

	//...
	
	public TPage As&lt;TPage&gt;() where TPage : PageBase, new() {
		return (TPage)this;
	}
}</pre></div></div>

<h3>When I add the album to my cart</h3>
<p>If you remember, the original scenario we listed above was &#8220;When I add an item to my cart, it displays a total of 1&#8221;. Often it is fairly easy to separate the Given portion of our scenario from the When/Then portion because the Given part is often the part that we took for granted when we were describing the scenario or when it was described to us.</p>
<p><b>InterfaceTests/Features/CartSteps.cs</b></p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="csharp"><thead><tr><td colspan="2"  class="head">C#</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
</pre></td><td class="de1"><pre class="de1"><span class="br0">&#91;</span>When<span class="br0">&#40;</span><span class="st_h">@&quot;I add the album to my cart&quot;</span><span class="br0">&#41;</span><span class="br0">&#93;</span>
<span class="kw1">public</span> <span class="kw4">void</span> WhenIAddTheAlbumToMyCart<span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; NextPage <span class="sy0">=</span> CurrentPage<span class="sy0">.</span><span class="kw1">As</span><span class="sy0">&lt;</span>AlbumDetailPage<span class="sy0">&gt;</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">.</span><span class="me1">AddToCart</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
<span class="br0">&#125;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">[When(@"I add the album to my cart")]
public void WhenIAddTheAlbumToMyCart() {
	NextPage = CurrentPage.As&lt;AlbumDetailPage&gt;().AddToCart();
}</pre></div></div>

<p>As you can tell by now, the actual logic that goes into the step definition files is fairly minimal. This is by design and is similar to the MVC concept of a thin controller. By keeping the page behavior in the page objects, we&#8217;re attempting to minimize the brittleness of our test code.</p>
<h3>Then the cart has a total of 1</h3>
<p>The last step is to verify the expectation. We&#8217;re going to do something a little special with this step because it matches a similar step across several of the tests, with the exception of the number we are expecting to see.</p>
<p><b>InterfaceTests/Features/CartSteps.cs</b></p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="csharp"><thead><tr><td colspan="2"  class="head">C#</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
</pre></td><td class="de1"><pre class="de1"><span class="br0">&#91;</span>Then<span class="br0">&#40;</span><span class="st_h">@&quot;the cart has a total of (d+)&quot;</span><span class="br0">&#41;</span><span class="br0">&#93;</span>
<span class="kw1">public</span> <span class="kw4">void</span> ThenTheCartHasATotalOf<span class="br0">&#40;</span><span class="kw4">int</span> expectedTotal<span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; CurrentPage<span class="sy0">.</span><span class="me1">VerifyCartTotalIs</span><span class="br0">&#40;</span>expectedTotal<span class="br0">&#41;</span><span class="sy0">;</span>
<span class="br0">&#125;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">[Then(@"the cart has a total of (d+)")]
public void ThenTheCartHasATotalOf(int expectedTotal) {
	CurrentPage.VerifyCartTotalIs(expectedTotal);
}</pre></div></div>

<p>SpecFlow allows us to enter a regular expression in the step definition, which it will then use to populate arguments for our step definition function. So instead of making a separate function for testing a cart total of 0, 1, and 2, I can make one function that tests whichever value matches the match group in my decorators expression.</p>
<h3>Result</h3>
<p>With all of the steps built, I can now run the test for verification:</p>
<div style="text-align: center; font-size: .9em; color: #666666;">
	<img src="http://www.tiernok.com/LTDBlog/SpecFlow/NunitAddItemDone.png" title="Pass test run for 'Add Item' scenario" /><br />
	Pass test run for &#8216;Add Item&#8217; scenario
</div>
<p>The text output tab of Nunit still provides us with information at the step level, but more importantly we now have a &#8220;Pass&#8221;.</p>
<h2>Wrapping Up</h2>
<p>By capturing the end users expectations in this way, we have some structure that helps gather them at a good level of detail while also providing a testable version that we can automatically run as we develop the solution and as a regression suite when we are finished. The requirements are readable by our end user, by ourselves, and can be programmed against. As we build up a library of common step definitions we will start being able to put new tests together even faster as well as have some visibility into what portions of the application are the most critical (if a step shows up in 50% of our tests, it&#8217;s a good bet it&#8217;s a lot more critical to the stability of our application than the item that shows up once in a single test).</p>
<p>All of the code for this project is available in <a href="https://bitbucket.org/tarwn/mvcmusicstore.interfacetests" title="tarwn/MvcMusicStore.InterfaceTests project on BitBucket">BitBucket</a>.</p>
]]></content:encoded>
			<wfw:commentRss>/index.php/enterprisedev/application-lifecycle-management/using-specflow-to/feed/</wfw:commentRss>
		<slash:comments>14</slash:comments>
		</item>
		<item>
		<title>Continuous Delivery &#8211; Adding an Automated Interface Test Stage</title>
		<link>/index.php/enterprisedev/application-lifecycle-management/continuous-delivery-adding-an-automated/</link>
		<comments>/index.php/enterprisedev/application-lifecycle-management/continuous-delivery-adding-an-automated/#respond</comments>
		<pubDate>Wed, 21 Dec 2011 10:47:00 +0000</pubDate>
		<dc:creator><![CDATA[Eli Weinstock-Herman (tarwn)]]></dc:creator>
				<category><![CDATA[Application Lifecycle Management]]></category>
		<category><![CDATA[continuous delivery]]></category>
		<category><![CDATA[continuous integration]]></category>
		<category><![CDATA[jenkins]]></category>
		<category><![CDATA[mvc music store]]></category>
		<category><![CDATA[selenium]]></category>
		<category><![CDATA[webdeploy]]></category>

		<guid isPermaLink="false">/index.php/2011/12/continuous-delivery-adding-an-automated/</guid>
		<description><![CDATA[Human beings are good at creative tasks. Put an end user in front of an interface and ask them to find an error and good luck stuffing that particular cat back into the bag. Where we don't perform as well is performing those tasks repetitively.]]></description>
				<content:encoded><![CDATA[<p>Human beings are good at creative tasks. Put an end user in front of an interface and ask them to find an error and good luck stuffing that particular cat back into the bag. Where we don&#8217;t perform as well is performing those tasks repetitively. After several cycles we begin to lose focus, start listening more to our expectations than what we are actually seeing in front of us, gradually forget steps, or worse lose track and have to restart from the beginning. By automating the redundant tasks, we play to the strengths of the computer and free the human to return to creative duties.</p>
<div style="text-align: center; font-size: .9em; color: #666666;">
	<img src="http://tiernok.com/LTDBlog/ContinuousDelivery/Overview_p5.png" title="Delivery Pipeline - Focus of Current Post" /><br />
	Delivery Pipeline &#8211; Focus of Current Post
</div>
<p>This is the fifth post in a multi-part series on my Continuous Delivery pipeline project. The <a href="/index.php/EnterpriseDev/application-lifecycle-management/continuous-delivery-project-deploy-and" title="Deploy and Smoke Test">previous post</a> completed the Continuous Integration job by performing a test deployment of the final package. In this post I&#8217;ll build the next stage in the pipeline, a job that is responsible for performing automated system testing against the website.</p>
<h2>The Interface Automation Stage</h2>
<p>In a production project this would probably be called Automated User Acceptance testing, but this project seems far too small to use that term and I don&#8217;t intend to automate enough user requirements. So I&#8217;ll refer to it as the Interface Automation Test project.</p>
<p>The Interface Automation stage will consist of the following steps:</p>
<ul>
<li>Start when triggered by CI Build Job</li>
<li>Retrieve the automation project from it&#8217;s <a href="https://bitbucket.org/tarwn/mvcmusicstore.interfacetests" title="MVCMusicStore.InterfaceTests on bitBucket">code repository</a></li>
<li>Retrieve the specific zip package the triggering CI build produced</li>
<li>Build the Automated test project</li>
<li>Deploy the site to a test site</li>
<li>Smoke test the deployment</li>
<li>Run the automated tests</li>
<li>Import the test results and finish</li>
</ul>
<p>Let&#8217;s start with the automated interface tests.</p>
<h2>MvcMusicStore.InterfaceTests</h2>
<p>The Interface tests project is a separate project and repository from the production site. Keeping this solution separate allows the CI build job to only be concerned with building the production code and unit tests and prevents the risk of cross-contamination between the production project and the automated interface project. </p>
<p>The project is available on <a href="https://bitbucket.org/tarwn/mvcmusicstore.interfacetests" title="MvcMusicStore.InterfaceTests on BitBucket">BitBucket</a>. I don&#8217;t intend to dive into the all of the details of building that project (and to be honest I didn&#8217;t build much in the way of test coverage), but feel free to follow up with me on the forums or in the comments below if you would like to discuss it.</p>
<div style="text-align: center; font-size: .9em; color: #666666;">
	<img src="http://tiernok.com/LTDBlog/ContinuousDelivery/interfacetests.png" title="Interface Tests Project" /><br />
	Interface Tests Project
</div>
<p>The project uses Selenium WebDriver to interface with the web browser by implementing the PageObject pattern (I covered this in a <a href="/index.php/WebDev/UIDevelopment/automated-web-testing-with-selenium-2" title="Automated Web Testing with Selenium WebDriver">previous Selenium post</a> if you would like to read more about the mechanics). Using this pattern I create a library of &#8220;Pages&#8221; that each correspond to a Page in my website.</p>
<p>With an abstracted library of &#8220;Pages&#8221;, I then use Nunit to write tests that follow a path of actions or pages through the site. For instance, a tour of the site looks like this:</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="csharp"><thead><tr><td colspan="2"  class="head">C#</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
</pre></td><td class="de1"><pre class="de1"><span class="br0">&#91;</span>TestFixture<span class="br0">&#93;</span>
<span class="kw1">public</span> <span class="kw4">class</span> BasicSmokeTests <span class="sy0">:</span> TestFixtureBase <span class="br0">&#123;</span>
&nbsp;
&nbsp; &nbsp; <span class="br0">&#91;</span>Test<span class="br0">&#93;</span>
&nbsp; &nbsp; <span class="kw1">public</span> <span class="kw4">void</span> SmokeTest_TourTheTopLinks<span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; IndexPage index <span class="sy0">=</span> PageBase<span class="sy0">.</span><span class="me1">LoadIndexPage</span><span class="br0">&#40;</span>CurrentDriver, Settings<span class="sy0">.</span><span class="me1">CurrentSettings</span><span class="sy0">.</span><span class="me1">BaseUrl</span><span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="sy0">.</span><span class="me1">NavigateToStore</span><span class="br0">&#40;</span><span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="sy0">.</span><span class="me1">NavigateToLogo</span><span class="br0">&#40;</span><span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="sy0">.</span><span class="me1">NavigateToCart</span><span class="br0">&#40;</span><span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="sy0">.</span><span class="me1">NavigateToHome</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp;
<span class="br0">&#125;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">[TestFixture]
public class BasicSmokeTests : TestFixtureBase {

	[Test]
	public void SmokeTest_TourTheTopLinks() {
		IndexPage index = PageBase.LoadIndexPage(CurrentDriver, Settings.CurrentSettings.BaseUrl)
					  .NavigateToStore()
					  .NavigateToLogo()
					  .NavigateToCart()
					  .NavigateToHome();
	}

}</pre></div></div>

<p>Each page is aware of the shared top navigation links and implements methods to click those links and return the PageLibrary page that is associated with the real website page the link leads to. During navigation, the engine compares the expected page title in the object to the actual title in the browser to ensure we have loaded the page we were expecting. This allows me to treat each navigation as an implicit assertion as well, without having to specify it separately.</p>
<p>I use a TestFixtureBase class to manage the browser Driver instance and to load settings out of a local configuration file. This configuration file currently only lists the URL the site, but could also contain test usernames or data to use for a specific environment.</p>
<p>With a framework in place, it is easy to start expanding coverage.</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="csharp"><thead><tr><td colspan="2"  class="head">C#</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
</pre></td><td class="de1"><pre class="de1"><span class="br0">&#91;</span>Test<span class="br0">&#93;</span>
<span class="kw1">public</span> <span class="kw4">void</span> WhenTheUserSelectsTheClassicalGenre_TheyArePresentedWithTheListOfAlbums<span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; PageBase<span class="sy0">.</span><span class="me1">LoadIndexPage</span><span class="br0">&#40;</span>CurrentDriver, Settings<span class="sy0">.</span><span class="me1">CurrentSettings</span><span class="sy0">.</span><span class="me1">BaseUrl</span><span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="sy0">.</span><span class="me1">SelectGenre</span><span class="br0">&#40;</span><span class="st0">&quot;Classical&quot;</span><span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="sy0">.</span><span class="me1">AssertAlbumsPresent</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
<span class="br0">&#125;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">[Test]
public void WhenTheUserSelectsTheClassicalGenre_TheyArePresentedWithTheListOfAlbums() {
	PageBase.LoadIndexPage(CurrentDriver, Settings.CurrentSettings.BaseUrl)
			.SelectGenre("Classical")
			.AssertAlbumsPresent();
}</pre></div></div>

<p>Because I have used the Nunit framework, I can use any existing Nunit testrunner to run these tests, including the standard Nunit GUI or console executable.</p>
<h2>Creating the Build Job</h2>
<p>With a basic automated interface project built, I have enough of what I need to configure the new build job.</p>
<h3>Create the Job and Build</h3>
<p>Opening Jenkins in my browser, I create a New Job, selecting the freestyle project and specifying the name and a useful description. In the job configuration I go ahead and setup the mercurial repository information to pull down the Automated Interface test code. I then add steps to execute a build of the project and verify that the job works so far.</p>
<div style="text-align: center; font-size: .9em; color: #666666;">
	<img src="http://tiernok.com/LTDBlog/ContinuousDelivery/config_stage2_build.png" title="Build Configuration" /><br />
	Interface Tests &#8211; Build Configuration
</div>
<p>To test the settings thus far, I&#8217;ll trigger a build manually and verify this portion of the project works. I&#8217;ll also go ahead and add <a href="https://twitter.com/#!/TarwnBuildSrvr" title="@TarwnBuildSrvr on Twitter">twitter</a> to my post-build steps again, just because.</p>
<h3>Import the CI Artifacts</h3>
<p>With the build step working, now I can focus on picking up the artifacts from the CI Build and getting them setup on a test site. From the plugins screen I install the &#8220;Copy Artifact&#8221; plugin, the &#8220;Trigger Parametrized Build&#8221; plugin, and the &#8220;Nunit&#8221; plugin. </p>
<p>In the top of my job configuration I&#8217;ll check the &#8220;This Build is Parametrized&#8221; box and add a SOURCE_BUILD_NUMBER parameter where I will specify the CI Job&#8217;s build number that I want to run against. Initially this will require me to manually enter the build number, a bit later I&#8217;ll return to the CI Build and create a trigger to pass the parameter automatically.</p>
<div style="text-align: center; font-size: .9em; color: #666666;">
	<img src="http://tiernok.com/LTDBlog/ContinuousDelivery/config_stage2_params.png" title="Build Parameters" /><br />
	Interface Tests &#8211; Build Parameters
</div>
<p>Next, I&#8217;ll add a &#8220;Copy artifacts from another project&#8221; step (Thank you &#8220;Copy Artifacts&#8221; plugin) to the top of the build steps. This plugin has a number of different options, but I&#8217;ll use the build number I passed in as a parameter to retrieve the artifacts. Using the parametrized number option allows me to run the job by typing a build number in, which can be handy, and is similar to how the later QA and Production deploy stages will be setup to retrieve artifacts (I like consistency).</p>
<div style="text-align: center; font-size: .9em; color: #666666;">
	<img src="http://tiernok.com/LTDBlog/ContinuousDelivery/config_stage2_artifacts.png" title="Copy Artifacts" /><br />
	Interface Tests &#8211; Copy Artifacts
</div>
<p>At this point I realized I had forgotten to check the &#8220;Clean Build&#8221; option in my Mercurial settings, so I&#8217;ll go back and add that so I don&#8217;t risk having a stale copy of the artifacts from a prior run.</p>
<h3>Deploy and Smoke Test</h3>
<p>Now that I have all the pieces in place, it&#8217;s just a matter of putting them together. Like the CI Build Job, I&#8217;ll create a Deploy batch command and a Smoke Test batch command. The only difference is that here I have specified a different target website and I have used the parametrized &#8220;SOURCE_BUILD_NUMBER&#8221; instead of the local BUILD_NUMBER environment variable.</p>
<div style="text-align: center; font-size: .9em; color: #666666;">
	<img src="http://tiernok.com/LTDBlog/ContinuousDelivery/config_stage2_deploy.png" title="Deploy for Testing" /><br />
	Interface Tests &#8211; Deploy for Testing
</div>
<p>I&#8217;ll also configure the test results to be captured in the Post-build, just like the CI Build.</p>
<h3>Run the Automation Tests</h3>
<p>I&#8217;ll download Nunit from the <a href="http://www.nunit.org/" title="Nunit.org">Nunit website</a> and install that on my server, then create the last two steps to put the correct configuration file in my assembly folder and run the Nunit testrunner to execute the tests. At this point I&#8217;ll also install Firefox on the server, as that is the browser I am automating for the tests.</p>
<div style="text-align: center; font-size: .9em; color: #666666;">
	<img src="http://tiernok.com/LTDBlog/ContinuousDelivery/config_stage2_runtests.png" title="Run the Tests" /><br />
	Interface Tests &#8211; Run the Tests
</div>
<p>The first step is a basic copy command to copy the prepared &#8220;auto&#8221; config to &#8220;TestRun.config&#8221;, the file my test code will pick up when it starts. The Nunit command executes the nunit console against the compiled assembly, which runs all available test methods in the assembly, just as if I was running it from the GUI.</p>
<p><code class="codespan">"C:Program Files (x86)NUnit 2.5.10binnet-2.0nunit-console.exe" MvcMusicStore.InterfaceTestsbinDebugMvcMusicStore.InterfaceTests.dll /framework:net-4.0 /xml:SeleniumTestResult.xml</code></p>
<p>The last part, before I run my build again, is to import the results of the test run like like I did with MS Test and the smoke tests. The Nunit plugin has provided a &#8220;Publish Nunit test result report&#8221; section in the post-build options, so I&#8217;ll check that box and enter the xml path I specified for the output of the nunit-console command.</p>
<p>With that completed, I&#8217;ll run the test again to verify the results.</p>
<div style="text-align: center; font-size: .9em; color: #666666;">
	<img src="http://tiernok.com/LTDBlog/ContinuousDelivery/config_stage2_failedrun.png" title="Failed Test" /><br />
	Interface Tests &#8211; Failed Test
</div>
<p>Hmm, that saves me the trouble of breaking the tests to make sure the results are accurate. It turns out when I was cleaning up absolute paths in the MVCMusicStore project I missed the link under the logo, so when the tests tried to navigate through that link they didn&#8217;t get to the page they were expecting and correctly failed the test.</p>
<p>Fix that issue, wait for the CI Build to run again, trigger this job with the number of that last CI Build and now I have a success.</p>
<h2>Wiring them Together</h2>
<p>The last step is to configure the CI Build to automatically trigger this new job when it completes. Opening the CI Build job, there is a new option in the Post-build configuration section that was added when I installed the &#8220;Trigger Parametrized Builds&#8221; plugin. I&#8217;ll add a &#8220;Predefined Parameter&#8221; with the same name as I used in the new job, SOURCE_BUILD_NUMBER, and I&#8217;ll populate it with the local BUILD_NUMBER environment variable of the CI Build job.</p>
<div style="text-align: center; font-size: .9em; color: #666666;">
	<img src="http://tiernok.com/LTDBlog/ContinuousDelivery/config_parameterized.png" title="Parameterized Build Trigger" /><br />
	CI Build &#8211; Parameterized trigger
</div>
<p>Saving the change, when I execute a CI job now, it successfully triggers an Automated Interface Test job on the build artifact it just completed.</p>
<h2>Next Steps</h2>
<p>With a functioning CI Build job and a triggered automated test job, we&#8217;re in the home stretch. The last steps will be to implement a nice dashboard for these to provide a graphical representation of each individual build chain and to create build jobs to deploy to a QA and a production environment, the last two steps of my process diagram above.</p>
<style>
.thelist li{ color: #666666; }
.thelist .cur{ font-style: italic; color: black; }
</style>
<ul class="thelist">
<li><a href="http://wiki.lessthandot.com/index.php/Eli%27s_Continuous_Delivery_Project" title="Wiki post for Eli's Continuous Delivery Project">Wiki Post</a></li>
<li><a href="/index.php/EnterpriseDev/application-lifecycle-management/starting-a-continuous-delivery-project" title="Starting a Continuous Delivery Project">Starting a Continuous Delivery Project</a></li>
<li><a href="/index.php/EnterpriseDev/application-lifecycle-management/continuous-delivery-project-setting-up" title="Setting up the Continuous Integration stage">Setting up the Continuous Integration stage</a></li>
<li><a href="/index.php/EnterpriseDev/UnitTest/continuous-delivery-project-making-mvcmusicstore" title="Making ASP.Net MVC Music Store Testable">Making ASP.Net MVC Music Store Testable</a></li>
<li><a href="/index.php/EnterpriseDev/UnitTest/continuous-delivery-project-incorporating-the" title="Incorporating Unit Tests in the CI stage">Incorporating Unit Tests in the CI stage</a></li>
<li><a href="/index.php/EnterpriseDev/application-lifecycle-management/continuous-delivery-project-deploy-and" title="Deploy and Smoke Test">Deploy and Smoke Test</a></li>
<li class="cur"><a href="/index.php/EnterpriseDev/application-lifecycle-management/continuous-delivery-adding-an-automated" title="Adding an Automated Interface Testing stage">Adding an Automated Interface Testing stage</a></li>
<li><a href="/index.php/EnterpriseDev/application-lifecycle-management/continuous-delivery-dashboard-qa-and" title="Dashboard, QA and Production Deployment stage">Dashboard, QA and Production Deployment stage</a></li>
</ul>
]]></content:encoded>
			<wfw:commentRss>/index.php/enterprisedev/application-lifecycle-management/continuous-delivery-adding-an-automated/feed/</wfw:commentRss>
		<slash:comments>0</slash:comments>
		</item>
		<item>
		<title>Automated Web Testing with Selenium WebDriver</title>
		<link>/index.php/webdev/uidevelopment/automated-web-testing-with-selenium-2/</link>
		<comments>/index.php/webdev/uidevelopment/automated-web-testing-with-selenium-2/#comments</comments>
		<pubDate>Wed, 02 Nov 2011 10:27:00 +0000</pubDate>
		<dc:creator><![CDATA[Eli Weinstock-Herman (tarwn)]]></dc:creator>
				<category><![CDATA[UI Development]]></category>
		<category><![CDATA[automated testing]]></category>
		<category><![CDATA[selenium]]></category>
		<category><![CDATA[webdriver]]></category>

		<guid isPermaLink="false">/index.php/2011/11/automated-web-testing-with-selenium-2/</guid>
		<description><![CDATA[Last week we created a pair of smoke tests with the Selenium IDE tool. Several people commented, with varying levels of politeness, about the downsides of Selenium IDE. Today we are going to get into the nuts and bolts of coding automated tests against the WebDriver library.]]></description>
				<content:encoded><![CDATA[<p>Last week we created a pair of smoke tests with the <a href="/index.php/WebDev/UIDevelopment/automated-web-testing-with-selenium" title="Read last week's post">Selenium IDE</a> tool. Several people commented, with varying levels of politeness, about the downsides of Selenium IDE. There are even those that will tell you not to use it at all, to immediately bypass Selenium IDE and go straight to code. My opinion is that this is a matter of context. </p>
<p>Today we are going to get into the nuts and bolts of coding automated tests against the WebDriver library. Before we get into that, however, let&#8217;s discuss when it is appropriate to make this transition.</p>
<h2>Context and When to Transition</h2>
<p>Most projects that are using browser automation are large and require a fairly complex set of tests. The solutions they are using are at least at the level we will be working at today, if not further down the road to automated acceptance testing. A higher level of complexity across a much larger project is just not manageable with Selenium IDE, so many people are used to bypassing it immediately and going straight to a code solution.</p>
<p>Context is king. For small teams or sites, there is value in being able to put together some quick tests that can be run regularly without making an investment in creating a custom framework. It can also be a useful tool when you have a legacy site and just want to make sure it hasn&#8217;t fallen over.</p>
<p>Not everyone has worked in the context of these larger projects or has worked extensively with Selenium. If you are getting started for the first time or currently using Selenium IDE, here are some signs to consider moving to a custom solution:</p>
<ul>
<li>You often update a number of tests simultaneously to change element names</li>
<li>Sacrificing your computer while the tests run is becoming a nuisance</li>
<li>You want to share the tests with team members, others in your company, or your client</li>
<li>Maintaining the test suite list in the IDE tasks longer than creating tests</li>
<li>You are starting to build tests for every feature you add to the software</li>
<li>You want to tie the tests into the automated build system for your software</li>
</ul>
<p>In these cases, you have likely scaled past the point where Selenium IDE is enabling you, into a range where it&#8217;s costs outweigh it&#8217;s gains.</p>
<h2>The Next Step for Web Automation</h2>
<p>The next step in automating web interface tests is to use the Selenium WebDriver library to code the tests. Writing our own framework has some inherent advantages and disadvantages.</p>
<p>Pros: Free, Reduced Duplication, Easy to share, Relatively easy to automate<br />
Cons: Increased cost, Increased risk due to code errors, Increased complexity<br />
Neutral: Level of fragility depends on level of developer</p>
<p>There are Selenium WebDriver libraries for Java, Python, Ruby, and .Net. By using an existing Unit testing framework we don&#8217;t have to write our own Test Runner and it is likely to have documentation and/or plugins for integrating into most of the popular build engines.</p>
<p>For the purpose of this post, we are again going to create tests against my contact page, but we&#8217;ll be increasing the number of tests. We will be using the .Net driver, C#, and the MS Test framework.</p>
<p><em>Note: I would advise this unit test project be separate from the overall solution for your application. Keeping it separate means you can version it separately, build and run it separately, and easily run the real unit tests in your product solution without accidentally running the interface ones as well.</p>
<p>Note 2: I had intended to do this in VB.Net originally, but the downside of switching easily between languages in the same IDE is that sometimes you find yourself writing in the wrong one without even realizing it.</em></p>
<h2>Getting Started</h2>
<p>After creating our .Net solution to house the test project, we need to add a reference to the Selenium WebDriver library. This can be downloaded from the <a href="http://seleniumhq.org/download/" title="Selenium WebDriver download page">Web Driver Download page</a> or added via NuGet:</p>
<div class="commandWrapper">
<div class="commandPrompt">
<p class="command">PM&gt; Install-Package Selenium.WebDriver</p>
</div>
</div>
<p><em>Note: If you don&#8217;t have NuGet installed, I highly recommend you go check it out at <a href="http://nuget.org/" title="NuGet.org">http://nuget.org/</a> or read more about it in <a href="http://msdn.microsoft.com/en-us/magazine/hh547106.aspx" title="Manage Project Libraries with NuGet by Phil Haack">this recent MSDN article</a>. NuGet is a package manager that allows us to quickly download, install, and update 3rd party packages in Visual Studio. It not only makes it easier to keep 3rd party libraries up to date, but also makes a number of packages more accessible, since they generally install the appropriate settings and references to easily get us started.</em></p>
<p>Once we have all of that set up, we can create a single class file with a quick test function to verify we&#8217;re ready to go:</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="csharp"><thead><tr><td colspan="2"  class="head">C#</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
</pre></td><td class="de1"><pre class="de1"><span class="kw1">using</span> <span class="co3">System</span><span class="sy0">;</span>
<span class="kw1">using</span> <span class="co3">Microsoft.VisualStudio.TestTools.UnitTesting</span><span class="sy0">;</span>
<span class="kw1">using</span> <span class="co3">OpenQA.Selenium.Firefox</span><span class="sy0">;</span>
&nbsp;
<span class="kw1">namespace</span> SampleWebDriverUnitTest <span class="br0">&#123;</span>
&nbsp;
&nbsp; &nbsp; <span class="br0">&#91;</span>TestClass<span class="br0">&#93;</span>
&nbsp; &nbsp; <span class="kw1">public</span> <span class="kw4">class</span> GettingStartedTest <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">public</span> GettingStartedTest<span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span> <span class="br0">&#125;</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#91;</span>TestMethod<span class="br0">&#93;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">public</span> <span class="kw4">void</span> GettingStarted_BasicFireFoxGET_LoadsPage<span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">using</span> <span class="br0">&#40;</span>FirefoxDriver driver <span class="sy0">=</span> <span class="kw3">new</span> FirefoxDriver<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; driver<span class="sy0">.</span><span class="me1">Url</span> <span class="sy0">=</span> <span class="st0">&quot;http://tiernok.com&quot;/</span><span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; driver<span class="sy0">.</span><span class="me1">Navigate</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Assert<span class="sy0">.</span><span class="me1">AreEqual</span><span class="br0">&#40;</span><span class="st0">&quot;Eli Weinstock-Herman | Tarwn&quot;</span>, driver<span class="sy0">.</span><span class="me1">Title</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp; &nbsp; <span class="br0">&#125;</span>
<span class="br0">&#125;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">using System;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using OpenQA.Selenium.Firefox;

namespace SampleWebDriverUnitTest {

	[TestClass]
	public class GettingStartedTest {
		public GettingStartedTest() { }

		[TestMethod]
		public void GettingStarted_BasicFireFoxGET_LoadsPage() {
			using (FirefoxDriver driver = new FirefoxDriver()) {
				driver.Url = "http://tiernok.com/";

				driver.Navigate();

				Assert.AreEqual("Eli Weinstock-Herman | Tarwn", driver.Title);
			}
		}
	}
}</pre></div></div>

<p>This is all it takes to get our first test. Create the solution, add the reference, create the test class and method. Since it&#8217;s MS Test, Ctrl+R, A will run all of our tests in the integrated test runner.</p>
<p>Selenium WebDriver is written in a somewhat fluent syntax, so for the rest of the post we will combine the URL and navigation into a single statement: driver.Navigate().GoToUrl(&#8220;http://tiernok.com&/#8221;);</p>
<h2>The First Test Cases</h2>
<p>Last time we started off by testing navigation to the home page and the presence of two books, then we tested submitting a form would correctly fail validation when it was missing a required field. Today we&#8217;re going to extend that form validation check, a more complex example in Selenium IDE that will be handled fairly easily in our new framework.</p>
<h3>The Email Form</h3>
<p>These are the situations we want to test for the email form:</p>
<blockquote><p>
	When I submit the form without an email address, it displays an error.<br />
	When I submit the form without a name, it displays an error.<br />
	When I submit the form without a message, it displays an error.<br />
	When I submit the form with all of the fields filled in, it displays a success message.
</p></blockquote>
<p>The steps for these tests are going to be similar to the second test we created in Selenium IDE last week. </p>
<h3>Exporting a Selenium IDE Test Case</h3>
<p>Selenium IDE has a feature that allows us to export tests, so when we are getting started we can look at that export to get a feel for how the code version will function. To export a test, open Selenium IDE, go to File, Export Text Case As, and choose C# (WebDriver). A C# file will be generated with the test case converted to an NUnit Test. The file includes some test setup and teardown methods, as well as the following test method:</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="csharp"><thead><tr><td colspan="2"  class="head">C#</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
</pre></td><td class="de1"><pre class="de1"><span class="br0">&#91;</span>Test<span class="br0">&#93;</span>
<span class="kw1">public</span> <span class="kw4">void</span> TheContactPageReturnsErrorWhenEmailFieldEmptyTest<span class="br0">&#40;</span><span class="br0">&#41;</span>
<span class="br0">&#123;</span>
&nbsp; &nbsp; driver<span class="sy0">.</span><span class="me1">Navigate</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">.</span><span class="me1">GoToUrl</span><span class="br0">&#40;</span><span class="st0">&quot;/&quot;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; driver<span class="sy0">.</span><span class="me1">FindElement</span><span class="br0">&#40;</span><span class="kw1">By</span><span class="sy0">.</span><span class="me1">LinkText</span><span class="br0">&#40;</span><span class="st0">&quot;Contact&quot;</span><span class="br0">&#41;</span><span class="br0">&#41;</span><span class="sy0">.</span><span class="me1">Click</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; driver<span class="sy0">.</span><span class="me1">FindElement</span><span class="br0">&#40;</span><span class="kw1">By</span><span class="sy0">.</span><span class="me1">Id</span><span class="br0">&#40;</span><span class="st0">&quot;itxtFromName&quot;</span><span class="br0">&#41;</span><span class="br0">&#41;</span><span class="sy0">.</span><span class="me1">Clear</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; driver<span class="sy0">.</span><span class="me1">FindElement</span><span class="br0">&#40;</span><span class="kw1">By</span><span class="sy0">.</span><span class="me1">Id</span><span class="br0">&#40;</span><span class="st0">&quot;itxtFromName&quot;</span><span class="br0">&#41;</span><span class="br0">&#41;</span><span class="sy0">.</span><span class="me1">SendKeys</span><span class="br0">&#40;</span><span class="st0">&quot;Selenium Test&quot;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; driver<span class="sy0">.</span><span class="me1">FindElement</span><span class="br0">&#40;</span><span class="kw1">By</span><span class="sy0">.</span><span class="me1">Id</span><span class="br0">&#40;</span><span class="st0">&quot;itxtBody&quot;</span><span class="br0">&#41;</span><span class="br0">&#41;</span><span class="sy0">.</span><span class="me1">Clear</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; driver<span class="sy0">.</span><span class="me1">FindElement</span><span class="br0">&#40;</span><span class="kw1">By</span><span class="sy0">.</span><span class="me1">Id</span><span class="br0">&#40;</span><span class="st0">&quot;itxtBody&quot;</span><span class="br0">&#41;</span><span class="br0">&#41;</span><span class="sy0">.</span><span class="me1">SendKeys</span><span class="br0">&#40;</span><span class="st0">&quot;This is my Selenium Message&quot;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; driver<span class="sy0">.</span><span class="me1">FindElement</span><span class="br0">&#40;</span><span class="kw1">By</span><span class="sy0">.</span><span class="me1">CssSelector</span><span class="br0">&#40;</span><span class="st0">&quot;input[type=&quot;</span>submit<span class="st0">&quot;]&quot;</span><span class="br0">&#41;</span><span class="br0">&#41;</span><span class="sy0">.</span><span class="me1">Click</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; Assert<span class="sy0">.</span><span class="me1">AreEqual</span><span class="br0">&#40;</span><span class="st0">&quot;Please fill in all three entries before sending the message.&quot;</span>, driver<span class="sy0">.</span><span class="me1">FindElement</span><span class="br0">&#40;</span><span class="kw1">By</span><span class="sy0">.</span><span class="me1">CssSelector</span><span class="br0">&#40;</span><span class="st0">&quot;.err&quot;</span><span class="br0">&#41;</span><span class="br0">&#41;</span><span class="sy0">.</span><span class="me1">Text</span><span class="br0">&#41;</span><span class="sy0">;</span>
<span class="br0">&#125;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">[Test]
public void TheContactPageReturnsErrorWhenEmailFieldEmptyTest()
{
    driver.Navigate().GoToUrl("/");
    driver.FindElement(By.LinkText("Contact")).Click();
    driver.FindElement(By.Id("itxtFromName")).Clear();
    driver.FindElement(By.Id("itxtFromName")).SendKeys("Selenium Test");
    driver.FindElement(By.Id("itxtBody")).Clear();
    driver.FindElement(By.Id("itxtBody")).SendKeys("This is my Selenium Message");
    driver.FindElement(By.CssSelector("input[type="submit"]")).Click();
    Assert.AreEqual("Please fill in all three entries before sending the message.", driver.FindElement(By.CssSelector(".err")).Text);
}</pre></div></div>

<p>Initially this may look more complicated then the Selenium IDE command steps, but really the only difference is that we are explicitly finding the elements we want to act on before acting, which was was more implicit in Selenium IDE. </p>
<p>Converting this to an MS Test is not difficult, but we will want to wrap the tests in a using statement so that driver gets properly disposed (MS Test doesn&#8217;t run cleanup properly when an exception occurs).</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="csharp"><thead><tr><td colspan="2"  class="head">C#</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
</pre></td><td class="de1"><pre class="de1"><span class="br0">&#91;</span>TestMethod<span class="br0">&#93;</span>
<span class="kw1">public</span> <span class="kw4">void</span> ContactPageReturnsErrorWhenEmailFieldEmpty<span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; <span class="kw1">using</span> <span class="br0">&#40;</span>FirefoxDriver driver <span class="sy0">=</span> <span class="kw3">new</span> FirefoxDriver<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; driver<span class="sy0">.</span><span class="me1">Navigate</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">.</span><span class="me1">GoToUrl</span><span class="br0">&#40;</span><span class="st0">&quot;http://tiernok.com/&quot;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; driver<span class="sy0">.</span><span class="me1">FindElement</span><span class="br0">&#40;</span><span class="kw1">By</span><span class="sy0">.</span><span class="me1">LinkText</span><span class="br0">&#40;</span><span class="st0">&quot;Contact&quot;</span><span class="br0">&#41;</span><span class="br0">&#41;</span><span class="sy0">.</span><span class="me1">Click</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; driver<span class="sy0">.</span><span class="me1">FindElement</span><span class="br0">&#40;</span><span class="kw1">By</span><span class="sy0">.</span><span class="me1">Id</span><span class="br0">&#40;</span><span class="st0">&quot;itxtFromName&quot;</span><span class="br0">&#41;</span><span class="br0">&#41;</span><span class="sy0">.</span><span class="me1">Clear</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; driver<span class="sy0">.</span><span class="me1">FindElement</span><span class="br0">&#40;</span><span class="kw1">By</span><span class="sy0">.</span><span class="me1">Id</span><span class="br0">&#40;</span><span class="st0">&quot;itxtFromName&quot;</span><span class="br0">&#41;</span><span class="br0">&#41;</span><span class="sy0">.</span><span class="me1">SendKeys</span><span class="br0">&#40;</span><span class="st0">&quot;Selenium Test&quot;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; driver<span class="sy0">.</span><span class="me1">FindElement</span><span class="br0">&#40;</span><span class="kw1">By</span><span class="sy0">.</span><span class="me1">Id</span><span class="br0">&#40;</span><span class="st0">&quot;itxtBody&quot;</span><span class="br0">&#41;</span><span class="br0">&#41;</span><span class="sy0">.</span><span class="me1">Clear</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; driver<span class="sy0">.</span><span class="me1">FindElement</span><span class="br0">&#40;</span><span class="kw1">By</span><span class="sy0">.</span><span class="me1">Id</span><span class="br0">&#40;</span><span class="st0">&quot;itxtBody&quot;</span><span class="br0">&#41;</span><span class="br0">&#41;</span><span class="sy0">.</span><span class="me1">SendKeys</span><span class="br0">&#40;</span><span class="st0">&quot;This is my Selenium Message&quot;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; driver<span class="sy0">.</span><span class="me1">FindElement</span><span class="br0">&#40;</span><span class="kw1">By</span><span class="sy0">.</span><span class="me1">CssSelector</span><span class="br0">&#40;</span><span class="st0">&quot;input[type=&quot;</span>submit<span class="st0">&quot;]&quot;</span><span class="br0">&#41;</span><span class="br0">&#41;</span><span class="sy0">.</span><span class="me1">Click</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; Assert<span class="sy0">.</span><span class="me1">AreEqual</span><span class="br0">&#40;</span><span class="st0">&quot;Please fill in all three entries before sending the message.&quot;</span>, driver<span class="sy0">.</span><span class="me1">FindElement</span><span class="br0">&#40;</span><span class="kw1">By</span><span class="sy0">.</span><span class="me1">CssSelector</span><span class="br0">&#40;</span><span class="st0">&quot;.err&quot;</span><span class="br0">&#41;</span><span class="br0">&#41;</span><span class="sy0">.</span><span class="me1">Text</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; <span class="br0">&#125;</span>
<span class="br0">&#125;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">[TestMethod]
public void ContactPageReturnsErrorWhenEmailFieldEmpty() {
	using (FirefoxDriver driver = new FirefoxDriver()) {
		driver.Navigate().GoToUrl("http://tiernok.com/");
		driver.FindElement(By.LinkText("Contact")).Click();
		driver.FindElement(By.Id("itxtFromName")).Clear();
		driver.FindElement(By.Id("itxtFromName")).SendKeys("Selenium Test");
		driver.FindElement(By.Id("itxtBody")).Clear();
		driver.FindElement(By.Id("itxtBody")).SendKeys("This is my Selenium Message");
		driver.FindElement(By.CssSelector("input[type="submit"]")).Click();
		Assert.AreEqual("Please fill in all three entries before sending the message.", driver.FindElement(By.CssSelector(".err")).Text);
	}
}</pre></div></div>

<p>The only real changes have been the addition of the using statement and changing the decorated attribute from NUnit&#8217;s Test to MS Test&#8217;s TestMethod. </p>
<h3>The Rest of the Test Cases</h3>
<p>Based on this one test, we can easily create tests to satisfy the other conditions:</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="csharp"><thead><tr><td colspan="2"  class="head">C#</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
</pre></td><td class="de1"><pre class="de1"><span class="br0">&#91;</span>TestMethod<span class="br0">&#93;</span>
<span class="kw1">public</span> <span class="kw4">void</span> ContactPageReturnsErrorWhenNameFieldEmpty<span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; <span class="kw1">using</span> <span class="br0">&#40;</span>FirefoxDriver driver <span class="sy0">=</span> <span class="kw3">new</span> FirefoxDriver<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; driver<span class="sy0">.</span><span class="me1">Navigate</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">.</span><span class="me1">GoToUrl</span><span class="br0">&#40;</span><span class="st0">&quot;http://tiernok.com/&quot;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; driver<span class="sy0">.</span><span class="me1">FindElement</span><span class="br0">&#40;</span><span class="kw1">By</span><span class="sy0">.</span><span class="me1">LinkText</span><span class="br0">&#40;</span><span class="st0">&quot;Contact&quot;</span><span class="br0">&#41;</span><span class="br0">&#41;</span><span class="sy0">.</span><span class="me1">Click</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; driver<span class="sy0">.</span><span class="me1">FindElement</span><span class="br0">&#40;</span><span class="kw1">By</span><span class="sy0">.</span><span class="me1">Id</span><span class="br0">&#40;</span><span class="st0">&quot;itxtFromEmail&quot;</span><span class="br0">&#41;</span><span class="br0">&#41;</span><span class="sy0">.</span><span class="me1">Clear</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; driver<span class="sy0">.</span><span class="me1">FindElement</span><span class="br0">&#40;</span><span class="kw1">By</span><span class="sy0">.</span><span class="me1">Id</span><span class="br0">&#40;</span><span class="st0">&quot;itxtFromEmail&quot;</span><span class="br0">&#41;</span><span class="br0">&#41;</span><span class="sy0">.</span><span class="me1">SendKeys</span><span class="br0">&#40;</span>EmailAddress<span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; driver<span class="sy0">.</span><span class="me1">FindElement</span><span class="br0">&#40;</span><span class="kw1">By</span><span class="sy0">.</span><span class="me1">Id</span><span class="br0">&#40;</span><span class="st0">&quot;itxtBody&quot;</span><span class="br0">&#41;</span><span class="br0">&#41;</span><span class="sy0">.</span><span class="me1">Clear</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; driver<span class="sy0">.</span><span class="me1">FindElement</span><span class="br0">&#40;</span><span class="kw1">By</span><span class="sy0">.</span><span class="me1">Id</span><span class="br0">&#40;</span><span class="st0">&quot;itxtBody&quot;</span><span class="br0">&#41;</span><span class="br0">&#41;</span><span class="sy0">.</span><span class="me1">SendKeys</span><span class="br0">&#40;</span><span class="st0">&quot;This is my Selenium Message&quot;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; driver<span class="sy0">.</span><span class="me1">FindElement</span><span class="br0">&#40;</span><span class="kw1">By</span><span class="sy0">.</span><span class="me1">CssSelector</span><span class="br0">&#40;</span><span class="st0">&quot;input[type=&quot;</span>submit<span class="st0">&quot;]&quot;</span><span class="br0">&#41;</span><span class="br0">&#41;</span><span class="sy0">.</span><span class="me1">Click</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; Assert<span class="sy0">.</span><span class="me1">AreEqual</span><span class="br0">&#40;</span><span class="st0">&quot;Please fill in all three entries before sending the message.&quot;</span>, driver<span class="sy0">.</span><span class="me1">FindElement</span><span class="br0">&#40;</span><span class="kw1">By</span><span class="sy0">.</span><span class="me1">CssSelector</span><span class="br0">&#40;</span><span class="st0">&quot;.err&quot;</span><span class="br0">&#41;</span><span class="br0">&#41;</span><span class="sy0">.</span><span class="me1">Text</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; <span class="br0">&#125;</span>
<span class="br0">&#125;</span>
&nbsp;
<span class="br0">&#91;</span>TestMethod<span class="br0">&#93;</span>
<span class="kw1">public</span> <span class="kw4">void</span> ContactPageReturnsErrorWhenMessageFieldEmpty<span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; <span class="kw1">using</span> <span class="br0">&#40;</span>FirefoxDriver driver <span class="sy0">=</span> <span class="kw3">new</span> FirefoxDriver<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; driver<span class="sy0">.</span><span class="me1">Navigate</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">.</span><span class="me1">GoToUrl</span><span class="br0">&#40;</span><span class="st0">&quot;http://tiernok.com/&quot;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; driver<span class="sy0">.</span><span class="me1">FindElement</span><span class="br0">&#40;</span><span class="kw1">By</span><span class="sy0">.</span><span class="me1">LinkText</span><span class="br0">&#40;</span><span class="st0">&quot;Contact&quot;</span><span class="br0">&#41;</span><span class="br0">&#41;</span><span class="sy0">.</span><span class="me1">Click</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; driver<span class="sy0">.</span><span class="me1">FindElement</span><span class="br0">&#40;</span><span class="kw1">By</span><span class="sy0">.</span><span class="me1">Id</span><span class="br0">&#40;</span><span class="st0">&quot;itxtFromName&quot;</span><span class="br0">&#41;</span><span class="br0">&#41;</span><span class="sy0">.</span><span class="me1">Clear</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; driver<span class="sy0">.</span><span class="me1">FindElement</span><span class="br0">&#40;</span><span class="kw1">By</span><span class="sy0">.</span><span class="me1">Id</span><span class="br0">&#40;</span><span class="st0">&quot;itxtFromName&quot;</span><span class="br0">&#41;</span><span class="br0">&#41;</span><span class="sy0">.</span><span class="me1">SendKeys</span><span class="br0">&#40;</span><span class="st0">&quot;Selenium Test&quot;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; driver<span class="sy0">.</span><span class="me1">FindElement</span><span class="br0">&#40;</span><span class="kw1">By</span><span class="sy0">.</span><span class="me1">Id</span><span class="br0">&#40;</span><span class="st0">&quot;itxtFromEmail&quot;</span><span class="br0">&#41;</span><span class="br0">&#41;</span><span class="sy0">.</span><span class="me1">Clear</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; driver<span class="sy0">.</span><span class="me1">FindElement</span><span class="br0">&#40;</span><span class="kw1">By</span><span class="sy0">.</span><span class="me1">Id</span><span class="br0">&#40;</span><span class="st0">&quot;itxtFromEmail&quot;</span><span class="br0">&#41;</span><span class="br0">&#41;</span><span class="sy0">.</span><span class="me1">SendKeys</span><span class="br0">&#40;</span>EmailAddress<span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; driver<span class="sy0">.</span><span class="me1">FindElement</span><span class="br0">&#40;</span><span class="kw1">By</span><span class="sy0">.</span><span class="me1">CssSelector</span><span class="br0">&#40;</span><span class="st0">&quot;input[type=&quot;</span>submit<span class="st0">&quot;]&quot;</span><span class="br0">&#41;</span><span class="br0">&#41;</span><span class="sy0">.</span><span class="me1">Click</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; Assert<span class="sy0">.</span><span class="me1">AreEqual</span><span class="br0">&#40;</span><span class="st0">&quot;Please fill in all three entries before sending the message.&quot;</span>, driver<span class="sy0">.</span><span class="me1">FindElement</span><span class="br0">&#40;</span><span class="kw1">By</span><span class="sy0">.</span><span class="me1">CssSelector</span><span class="br0">&#40;</span><span class="st0">&quot;.err&quot;</span><span class="br0">&#41;</span><span class="br0">&#41;</span><span class="sy0">.</span><span class="me1">Text</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; <span class="br0">&#125;</span>
<span class="br0">&#125;</span>
&nbsp;
<span class="br0">&#91;</span>TestMethod<span class="br0">&#93;</span>
<span class="kw1">public</span> <span class="kw4">void</span> ContactPageReturnsSuccessWhenAllFieldsProvided<span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; <span class="kw1">using</span> <span class="br0">&#40;</span>FirefoxDriver driver <span class="sy0">=</span> <span class="kw3">new</span> FirefoxDriver<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; driver<span class="sy0">.</span><span class="me1">Navigate</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">.</span><span class="me1">GoToUrl</span><span class="br0">&#40;</span><span class="st0">&quot;http://tiernok.com/&quot;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; driver<span class="sy0">.</span><span class="me1">FindElement</span><span class="br0">&#40;</span><span class="kw1">By</span><span class="sy0">.</span><span class="me1">LinkText</span><span class="br0">&#40;</span><span class="st0">&quot;Contact&quot;</span><span class="br0">&#41;</span><span class="br0">&#41;</span><span class="sy0">.</span><span class="me1">Click</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; driver<span class="sy0">.</span><span class="me1">FindElement</span><span class="br0">&#40;</span><span class="kw1">By</span><span class="sy0">.</span><span class="me1">Id</span><span class="br0">&#40;</span><span class="st0">&quot;itxtFromName&quot;</span><span class="br0">&#41;</span><span class="br0">&#41;</span><span class="sy0">.</span><span class="me1">Clear</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; driver<span class="sy0">.</span><span class="me1">FindElement</span><span class="br0">&#40;</span><span class="kw1">By</span><span class="sy0">.</span><span class="me1">Id</span><span class="br0">&#40;</span><span class="st0">&quot;itxtFromName&quot;</span><span class="br0">&#41;</span><span class="br0">&#41;</span><span class="sy0">.</span><span class="me1">SendKeys</span><span class="br0">&#40;</span><span class="st0">&quot;Selenium Test&quot;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; driver<span class="sy0">.</span><span class="me1">FindElement</span><span class="br0">&#40;</span><span class="kw1">By</span><span class="sy0">.</span><span class="me1">Id</span><span class="br0">&#40;</span><span class="st0">&quot;itxtFromEmail&quot;</span><span class="br0">&#41;</span><span class="br0">&#41;</span><span class="sy0">.</span><span class="me1">Clear</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; driver<span class="sy0">.</span><span class="me1">FindElement</span><span class="br0">&#40;</span><span class="kw1">By</span><span class="sy0">.</span><span class="me1">Id</span><span class="br0">&#40;</span><span class="st0">&quot;itxtFromEmail&quot;</span><span class="br0">&#41;</span><span class="br0">&#41;</span><span class="sy0">.</span><span class="me1">SendKeys</span><span class="br0">&#40;</span>EmailAddress<span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; driver<span class="sy0">.</span><span class="me1">FindElement</span><span class="br0">&#40;</span><span class="kw1">By</span><span class="sy0">.</span><span class="me1">Id</span><span class="br0">&#40;</span><span class="st0">&quot;itxtBody&quot;</span><span class="br0">&#41;</span><span class="br0">&#41;</span><span class="sy0">.</span><span class="me1">Clear</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; driver<span class="sy0">.</span><span class="me1">FindElement</span><span class="br0">&#40;</span><span class="kw1">By</span><span class="sy0">.</span><span class="me1">Id</span><span class="br0">&#40;</span><span class="st0">&quot;itxtBody&quot;</span><span class="br0">&#41;</span><span class="br0">&#41;</span><span class="sy0">.</span><span class="me1">SendKeys</span><span class="br0">&#40;</span><span class="st0">&quot;This is my Selenium Message&quot;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; driver<span class="sy0">.</span><span class="me1">FindElement</span><span class="br0">&#40;</span><span class="kw1">By</span><span class="sy0">.</span><span class="me1">CssSelector</span><span class="br0">&#40;</span><span class="st0">&quot;input[type=&quot;</span>submit<span class="st0">&quot;]&quot;</span><span class="br0">&#41;</span><span class="br0">&#41;</span><span class="sy0">.</span><span class="me1">Click</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; Assert<span class="sy0">.</span><span class="me1">AreEqual</span><span class="br0">&#40;</span><span class="st0">&quot;Thanks, your message has been sent successfully.&quot;</span>, driver<span class="sy0">.</span><span class="me1">FindElement</span><span class="br0">&#40;</span><span class="kw1">By</span><span class="sy0">.</span><span class="me1">CssSelector</span><span class="br0">&#40;</span><span class="st0">&quot;.suc&quot;</span><span class="br0">&#41;</span><span class="br0">&#41;</span><span class="sy0">.</span><span class="me1">Text</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; <span class="br0">&#125;</span>
<span class="br0">&#125;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">[TestMethod]
public void ContactPageReturnsErrorWhenNameFieldEmpty() {
	using (FirefoxDriver driver = new FirefoxDriver()) {
		driver.Navigate().GoToUrl("http://tiernok.com/");
		driver.FindElement(By.LinkText("Contact")).Click();
		driver.FindElement(By.Id("itxtFromEmail")).Clear();
		driver.FindElement(By.Id("itxtFromEmail")).SendKeys(EmailAddress);
		driver.FindElement(By.Id("itxtBody")).Clear();
		driver.FindElement(By.Id("itxtBody")).SendKeys("This is my Selenium Message");
		driver.FindElement(By.CssSelector("input[type="submit"]")).Click();
		Assert.AreEqual("Please fill in all three entries before sending the message.", driver.FindElement(By.CssSelector(".err")).Text);
	}
}

[TestMethod]
public void ContactPageReturnsErrorWhenMessageFieldEmpty() {
	using (FirefoxDriver driver = new FirefoxDriver()) {
		driver.Navigate().GoToUrl("http://tiernok.com/");
		driver.FindElement(By.LinkText("Contact")).Click();
		driver.FindElement(By.Id("itxtFromName")).Clear();
		driver.FindElement(By.Id("itxtFromName")).SendKeys("Selenium Test");
		driver.FindElement(By.Id("itxtFromEmail")).Clear();
		driver.FindElement(By.Id("itxtFromEmail")).SendKeys(EmailAddress);
		driver.FindElement(By.CssSelector("input[type="submit"]")).Click();
		Assert.AreEqual("Please fill in all three entries before sending the message.", driver.FindElement(By.CssSelector(".err")).Text);
	}
}

[TestMethod]
public void ContactPageReturnsSuccessWhenAllFieldsProvided() {
	using (FirefoxDriver driver = new FirefoxDriver()) {
		driver.Navigate().GoToUrl("http://tiernok.com/");
		driver.FindElement(By.LinkText("Contact")).Click();
		driver.FindElement(By.Id("itxtFromName")).Clear();
		driver.FindElement(By.Id("itxtFromName")).SendKeys("Selenium Test");
		driver.FindElement(By.Id("itxtFromEmail")).Clear();
		driver.FindElement(By.Id("itxtFromEmail")).SendKeys(EmailAddress);
		driver.FindElement(By.Id("itxtBody")).Clear();
		driver.FindElement(By.Id("itxtBody")).SendKeys("This is my Selenium Message");
		driver.FindElement(By.CssSelector("input[type="submit"]")).Click();
		Assert.AreEqual("Thanks, your message has been sent successfully.", driver.FindElement(By.CssSelector(".suc")).Text);
	}
}</pre></div></div>

<p>Theoretically we&#8217;re done, if we had a few more cases we could keep copying and pasting our way to the finish line. If you recall, however, one of the goals of  moving from Selenium IDE method to a custom solution was to reduce the amount of duplication and the fragility that duplication causes. So far all we have done is transfer that fragility from a series of test cases in the IDE to a series of unit tests in C#.</p>
<h2>Reducing Test Fragility</h2>
<p>When we start writing more than basic smoke tests, we are going to be accessing items repetitively and duplicating ourselves more often. Switching to code has allowed us to create additional tests very quickly, but we haven&#8217;t really solved the duplication issue yet.</p>
<p>There&#8217;s two approaches we can take at this point, abstracting the duplication on our own or using the Page Factory from the Support library to implement the <a href="http://code.google.com/p/selenium/wiki/PageObjects" title="More information on Page Object">Page Object</a> pattern. </p>
<p>The idea of the Page Object pattern is to represent each page in our target application as a class in our test framework. This allows us to reflect functionality and changes in the real page with functionality or changes in our class. Rather than locating and interacting with individual controls in a browser, our tests than interact with these Page Object classes as representations of what the browser should be seeing. </p>
<p>Given we are just getting started with the code approach, lets use the Page Object approach for the Contact page and use the PageFactory that is provided in the Support library to help with the wiring.</p>
<h3>Creating the Contact PageObject</h3>
<p>Before we start making code changes, we need to get the Support library. As before, we can either download it from the <a href="http://seleniumhq.org/download/" title="Selenium WebDriver download page">Selenium website</a> or install it via NuGet:</p>
<div class="commandWrapper">
<div class="commandPrompt">
<p class="command">PM&gt; Install-Package Selenium.Support</p>
</div>
</div>
<p>Next we are going to start modeling our page. Since there is a common layout throughout the site, I&#8217;ll first create a base page object to represent the common elements (like navigation menu items) we will be interacting with:</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="csharp"><thead><tr><td colspan="2"  class="head">C#</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
</pre></td><td class="de1"><pre class="de1"><span class="kw1">namespace</span> SampleWebDriverUnitTest<span class="sy0">.</span><span class="me1">Pages</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; <span class="kw4">class</span> PageBase <span class="br0">&#123;</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#91;</span>FindsBy<span class="br0">&#40;</span>How <span class="sy0">=</span> How<span class="sy0">.</span><span class="me1">LinkText</span>, <span class="kw1">Using</span> <span class="sy0">=</span> <span class="st0">&quot;Contact&quot;</span><span class="br0">&#41;</span><span class="br0">&#93;</span>
&nbsp; &nbsp; &nbsp; &nbsp; IWebElement ContactLink<span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">public</span> <span class="kw4">void</span> NavigateContactLink<span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ContactLink<span class="sy0">.</span><span class="me1">Click</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp;
&nbsp; &nbsp; <span class="br0">&#125;</span>
<span class="br0">&#125;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">namespace SampleWebDriverUnitTest.Pages {
	class PageBase {

		[FindsBy(How = How.LinkText, Using = "Contact")]
		IWebElement ContactLink;

		public void NavigateContactLink() {
			ContactLink.Click();
		}

	}
}</pre></div></div>

<p>Then we can extend this class to define the elements that are specific to the Contact form:</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="csharp"><thead><tr><td colspan="2"  class="head">C#</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
</pre></td><td class="de1"><pre class="de1"><span class="kw1">namespace</span> SampleWebDriverUnitTest<span class="sy0">.</span><span class="me1">Pages</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; <span class="kw4">class</span> ContactPage <span class="sy0">:</span> PageBase <span class="br0">&#123;</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#91;</span>FindsBy<span class="br0">&#40;</span>How<span class="sy0">=</span>How<span class="sy0">.</span><span class="me1">Id</span>, <span class="kw1">Using</span><span class="sy0">=</span><span class="st0">&quot;itxtFromEmail&quot;</span><span class="br0">&#41;</span><span class="br0">&#93;</span>
&nbsp; &nbsp; &nbsp; &nbsp; IWebElement EmailInput<span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#91;</span>FindsBy<span class="br0">&#40;</span>How <span class="sy0">=</span> How<span class="sy0">.</span><span class="me1">Id</span>, <span class="kw1">Using</span> <span class="sy0">=</span> <span class="st0">&quot;itxtFromName&quot;</span><span class="br0">&#41;</span><span class="br0">&#93;</span>
&nbsp; &nbsp; &nbsp; &nbsp; IWebElement NameInput<span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#91;</span>FindsBy<span class="br0">&#40;</span>How <span class="sy0">=</span> How<span class="sy0">.</span><span class="me1">Id</span>, <span class="kw1">Using</span> <span class="sy0">=</span> <span class="st0">&quot;itxtBody&quot;</span><span class="br0">&#41;</span><span class="br0">&#93;</span>
&nbsp; &nbsp; &nbsp; &nbsp; IWebElement BodyInput<span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#91;</span>FindsBy<span class="br0">&#40;</span>How <span class="sy0">=</span> How<span class="sy0">.</span><span class="me1">CssSelector</span>, <span class="kw1">Using</span> <span class="sy0">=</span> <span class="st0">&quot;input[type=submit]&quot;</span><span class="br0">&#41;</span><span class="br0">&#93;</span>
&nbsp; &nbsp; &nbsp; &nbsp; IWebElement SubmitInput<span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#91;</span>FindsBy<span class="br0">&#40;</span>How <span class="sy0">=</span> How<span class="sy0">.</span><span class="me1">CssSelector</span>, <span class="kw1">Using</span> <span class="sy0">=</span> <span class="st0">&quot;.err&quot;</span><span class="br0">&#41;</span><span class="br0">&#93;</span>
&nbsp; &nbsp; &nbsp; &nbsp; IWebElement ErrorMessage<span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#91;</span>FindsBy<span class="br0">&#40;</span>How <span class="sy0">=</span> How<span class="sy0">.</span><span class="me1">CssSelector</span>, <span class="kw1">Using</span> <span class="sy0">=</span> <span class="st0">&quot;.suc&quot;</span><span class="br0">&#41;</span><span class="br0">&#93;</span>
&nbsp; &nbsp; &nbsp; &nbsp; IWebElement SuccessMessage<span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">public</span> <span class="kw4">void</span> SendEmail<span class="br0">&#40;</span><span class="kw4">string</span> name, <span class="kw4">string</span> email, <span class="kw4">string</span> body<span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">if</span> <span class="br0">&#40;</span><span class="sy0">!</span><span class="kw4">string</span><span class="sy0">.</span><span class="me1">IsNullOrEmpty</span><span class="br0">&#40;</span>email<span class="br0">&#41;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; EmailInput<span class="sy0">.</span><span class="me1">Clear</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; EmailInput<span class="sy0">.</span><span class="me1">SendKeys</span><span class="br0">&#40;</span>email<span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">if</span> <span class="br0">&#40;</span><span class="sy0">!</span><span class="kw4">string</span><span class="sy0">.</span><span class="me1">IsNullOrEmpty</span><span class="br0">&#40;</span>name<span class="br0">&#41;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; NameInput<span class="sy0">.</span><span class="me1">Clear</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; NameInput<span class="sy0">.</span><span class="me1">SendKeys</span><span class="br0">&#40;</span>name<span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">if</span> <span class="br0">&#40;</span><span class="sy0">!</span><span class="kw4">string</span><span class="sy0">.</span><span class="me1">IsNullOrEmpty</span><span class="br0">&#40;</span>body<span class="br0">&#41;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; BodyInput<span class="sy0">.</span><span class="me1">Clear</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; BodyInput<span class="sy0">.</span><span class="me1">SendKeys</span><span class="br0">&#40;</span>body<span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; SubmitInput<span class="sy0">.</span><span class="me1">Click</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; <span class="co1">// try/catches below are due to selenium using exceptions to indicate search failures rather than an empty result or null</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">public</span> <span class="kw4">bool</span> IsDisplayingValidationError<span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">get</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">try</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">return</span> ErrorMessage<span class="sy0">.</span><span class="me1">Displayed</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">catch</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">return</span> <span class="kw1">false</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">public</span> <span class="kw4">bool</span> IsDisplayingSuccessMessage <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">get</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">try</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">return</span> SuccessMessage<span class="sy0">.</span><span class="me1">Displayed</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">catch</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">return</span> <span class="kw1">false</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span> &nbsp; 
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp; &nbsp; <span class="br0">&#125;</span>
<span class="br0">&#125;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">namespace SampleWebDriverUnitTest.Pages {
	class ContactPage : PageBase {

		[FindsBy(How=How.Id, Using="itxtFromEmail")]
		IWebElement EmailInput;

		[FindsBy(How = How.Id, Using = "itxtFromName")]
		IWebElement NameInput;

		[FindsBy(How = How.Id, Using = "itxtBody")]
		IWebElement BodyInput;

		[FindsBy(How = How.CssSelector, Using = "input[type=submit]")]
		IWebElement SubmitInput;

		[FindsBy(How = How.CssSelector, Using = ".err")]
		IWebElement ErrorMessage;

		[FindsBy(How = How.CssSelector, Using = ".suc")]
		IWebElement SuccessMessage;

		public void SendEmail(string name, string email, string body) {
			if (!string.IsNullOrEmpty(email)) {
				EmailInput.Clear();
				EmailInput.SendKeys(email);
			}

			if (!string.IsNullOrEmpty(name)) {
				NameInput.Clear();
				NameInput.SendKeys(name);
			}

			if (!string.IsNullOrEmpty(body)) {
				BodyInput.Clear();
				BodyInput.SendKeys(body);
			}

			SubmitInput.Click();
		}

		// try/catches below are due to selenium using exceptions to indicate search failures rather than an empty result or null

		public bool IsDisplayingValidationError{
			get {
				try {
					return ErrorMessage.Displayed;
				}
				catch {
					return false;
				}
			}
		}

		public bool IsDisplayingSuccessMessage {
			get {
				try {
					return SuccessMessage.Displayed;
				}
				catch {
					return false;
				}	
			}
		}
	}
}</pre></div></div>

<p>The PageFactory object is responsible for wiring our page objects to the actual page displayed in the browser. It attempts to match each IWebElement in the class to an element in the web page. By default, if you do not decorate the field with the FindsBy decorator then it will search for an element who&#8217;s ID matches the variable name. I prefer to explicitly specify the find criteria, though, as this lets me name my variables consistently and limits the impact of an HTML change to a single decorator instead of causing a property name change.</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="csharp"><thead><tr><td colspan="2"  class="head">C#</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
</pre></td><td class="de1"><pre class="de1"><span class="br0">&#91;</span>TestMethod<span class="br0">&#93;</span>
<span class="kw1">public</span> <span class="kw4">void</span> ContactPageReturnsErrorWhenEmailFieldEmpty_PageObjectVersion<span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; <span class="kw1">using</span> <span class="br0">&#40;</span>FirefoxDriver driver <span class="sy0">=</span> <span class="kw3">new</span> FirefoxDriver<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; driver<span class="sy0">.</span><span class="me1">Navigate</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">.</span><span class="me1">GoToUrl</span><span class="br0">&#40;</span><span class="st0">&quot;http://tiernok.com/&quot;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; Pages<span class="sy0">.</span><span class="me1">PageBase</span> homepage <span class="sy0">=</span> <span class="kw3">new</span> Pages<span class="sy0">.</span><span class="me1">PageBase</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; PageFactory<span class="sy0">.</span><span class="me1">InitElements</span><span class="br0">&#40;</span>driver, homepage<span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; homepage<span class="sy0">.</span><span class="me1">NavigateContactLink</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; Pages<span class="sy0">.</span><span class="me1">ContactPage</span> contactPage <span class="sy0">=</span> <span class="kw3">new</span> Pages<span class="sy0">.</span><span class="me1">ContactPage</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; PageFactory<span class="sy0">.</span><span class="me1">InitElements</span><span class="br0">&#40;</span>driver, contactPage<span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; contactPage<span class="sy0">.</span><span class="me1">SendEmail</span><span class="br0">&#40;</span><span class="st0">&quot;Selenium Test&quot;</span>, <span class="st0">&quot;&quot;</span>, <span class="st0">&quot;This is my Selenium Test Message&quot;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; Assert<span class="sy0">.</span><span class="me1">IsTrue</span><span class="br0">&#40;</span>contactPage<span class="sy0">.</span><span class="me1">IsDisplayingValidationError</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; <span class="br0">&#125;</span>
<span class="br0">&#125;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">[TestMethod]
public void ContactPageReturnsErrorWhenEmailFieldEmpty_PageObjectVersion() {
	using (FirefoxDriver driver = new FirefoxDriver()) {
		driver.Navigate().GoToUrl("http://tiernok.com/");

		Pages.PageBase homepage = new Pages.PageBase();
		PageFactory.InitElements(driver, homepage);
		homepage.NavigateContactLink();

		Pages.ContactPage contactPage = new Pages.ContactPage();
		PageFactory.InitElements(driver, contactPage);
		contactPage.SendEmail("Selenium Test", "", "This is my Selenium Test Message");

		Assert.IsTrue(contactPage.IsDisplayingValidationError);
	}
}</pre></div></div>

<p>The new code:</p>
<ul>
<ol>navigates to the site</ol>
<ol>creates an instance of the base page</ol>
<ol>clicks the navigation link for the Contact Page</ol>
<ol>assumes it is on the contact page and creates an instance of that object</ol>
<ol>Sends an email with two of the three values filled in</ol>
<ol>Asserts that the error message is displayed</ol>
</ul>
<p>However, this code still has problems. </p>
<h3>Refining and Correcting the First Test</h3>
<p>The current code, in my opinion, doesn&#8217;t fail soon enough if it is on the wrong page. In addition, this first test we&#8217;ve converted is not very readable and I can already tell there is going to be a lot of duplication in later tests. Let&#8217;s do some refactoring.</p>
<p>Rather than repetitively initializing page objects in each test and and adding title verification to each test, lets move that behavior to the PageBase so we can easily do it for every page we load.</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="csharp"><thead><tr><td colspan="2"  class="head">C#</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
</pre></td><td class="de1"><pre class="de1"><span class="kw4">class</span> PageBase <span class="br0">&#123;</span>
&nbsp; &nbsp; <span class="kw1">public</span> RemoteWebDriver Driver <span class="br0">&#123;</span> <span class="kw1">get</span><span class="sy0">;</span> <span class="kw1">set</span><span class="sy0">;</span> <span class="br0">&#125;</span>
&nbsp; &nbsp; <span class="kw1">public</span> <span class="kw4">string</span> ExpectedTitle <span class="br0">&#123;</span> <span class="kw1">get</span><span class="sy0">;</span>set<span class="sy0">;</span> <span class="br0">&#125;</span>
&nbsp;
&nbsp; &nbsp; <span class="co1">// ... unchanged code ...</span>
&nbsp;
&nbsp; &nbsp; <span class="kw1">public</span> <span class="kw1">static</span> TPage GetInstance<span class="sy0">&lt;</span>TPage<span class="sy0">&gt;</span><span class="br0">&#40;</span>RemoteWebDriver driver, <span class="kw4">string</span> expectedTitle<span class="br0">&#41;</span> <span class="kw1">where</span> TPage <span class="sy0">:</span> PageBase, <span class="kw3">new</span><span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; TPage pageInstance <span class="sy0">=</span> <span class="kw3">new</span> TPage<span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span> 
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ExpectedTitle <span class="sy0">=</span> expectedTitle,
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Driver <span class="sy0">=</span> driver
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; PageFactory<span class="sy0">.</span><span class="me1">InitElements</span><span class="br0">&#40;</span>driver, pageInstance<span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; Assert<span class="sy0">.</span><span class="me1">AreEqual</span><span class="br0">&#40;</span>pageInstance<span class="sy0">.</span><span class="me1">ExpectedTitle</span>, driver<span class="sy0">.</span><span class="me1">Title</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">return</span> pageInstance<span class="sy0">;</span>
&nbsp; &nbsp; <span class="br0">&#125;</span>
<span class="br0">&#125;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">class PageBase {
	public RemoteWebDriver Driver { get; set; }
	public string ExpectedTitle { get;set; }

	// ... unchanged code ...

	public static TPage GetInstance&lt;TPage&gt;(RemoteWebDriver driver, string expectedTitle) where TPage : PageBase, new() {
		TPage pageInstance = new TPage() { 
			ExpectedTitle = expectedTitle,
			Driver = driver
		};
		PageFactory.InitElements(driver, pageInstance);

		Assert.AreEqual(pageInstance.ExpectedTitle, driver.Title);

		return pageInstance;
	}
}</pre></div></div>

<p>Now we have a single generic call that can create a Page (provided it inherits from PageBase and has a constructor) and execute an assertion on it&#8217;s title. Lets update the NavigateContactLink method to return an initialized ContactPage instance, since this will be a consistent next step each time we navigate to a new page. This reduces the amount of code in the test and adds an automatic check to ensure we have reached the page we were expecting.</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="csharp"><thead><tr><td colspan="2"  class="head">C#</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
</pre></td><td class="de1"><pre class="de1"><span class="kw4">class</span> PageBase <span class="br0">&#123;</span>
&nbsp; &nbsp; <span class="co1">// ... unchanged ...</span>
&nbsp;
&nbsp; &nbsp; <span class="kw1">public</span> ContactPage NavigateContactLink<span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; ContactLink<span class="sy0">.</span><span class="me1">Click</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">return</span> GetInstance<span class="sy0">&lt;</span>ContactPage<span class="sy0">&gt;</span><span class="br0">&#40;</span>Driver, <span class="st0">&quot;Eli Weinstock-Herman | Tarwn - Contact&quot;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp;
&nbsp; &nbsp; <span class="co1">// ... unchanged ...</span>
<span class="br0">&#125;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">class PageBase {
	// ... unchanged ...

	public ContactPage NavigateContactLink() {
		ContactLink.Click();
		return GetInstance&lt;ContactPage&gt;(Driver, "Eli Weinstock-Herman | Tarwn - Contact");
	}

	// ... unchanged ...
}</pre></div></div>

<p>Our refactored test now looks like this:</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="csharp"><thead><tr><td colspan="2"  class="head">C#</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
</pre></td><td class="de1"><pre class="de1"><span class="br0">&#91;</span>TestMethod<span class="br0">&#93;</span>
<span class="kw1">public</span> <span class="kw4">void</span> ContactPageReturnsErrorWhenEmailFieldEmpty_PageObjectVersion<span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; <span class="kw1">using</span> <span class="br0">&#40;</span>FirefoxDriver driver <span class="sy0">=</span> <span class="kw3">new</span> FirefoxDriver<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; driver<span class="sy0">.</span><span class="me1">Navigate</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">.</span><span class="me1">GoToUrl</span><span class="br0">&#40;</span><span class="st0">&quot;http://tiernok.com/&quot;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; PageBase homepage <span class="sy0">=</span> PageBase<span class="sy0">.</span><span class="me1">GetInstance</span><span class="sy0">&lt;</span>PageBase<span class="sy0">&gt;</span><span class="br0">&#40;</span>driver, <span class="st0">&quot;Eli Weinstock-Herman | Tarwn&quot;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; ContactPage contactPage <span class="sy0">=</span> homepage<span class="sy0">.</span><span class="me1">NavigateContactLink</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; 
&nbsp; &nbsp; &nbsp; &nbsp; contactPage<span class="sy0">.</span><span class="me1">SendEmail</span><span class="br0">&#40;</span><span class="st0">&quot;Selenium Test&quot;</span>, <span class="st0">&quot;&quot;</span>, <span class="st0">&quot;This is my Selenium Test Message&quot;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; Assert<span class="sy0">.</span><span class="me1">IsTrue</span><span class="br0">&#40;</span>contactPage<span class="sy0">.</span><span class="me1">IsDisplayingValidationError</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; <span class="br0">&#125;</span>
<span class="br0">&#125;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">[TestMethod]
public void ContactPageReturnsErrorWhenEmailFieldEmpty_PageObjectVersion() {
	using (FirefoxDriver driver = new FirefoxDriver()) {
		driver.Navigate().GoToUrl("http://tiernok.com/");

		PageBase homepage = PageBase.GetInstance&lt;PageBase&gt;(driver, "Eli Weinstock-Herman | Tarwn");
		ContactPage contactPage = homepage.NavigateContactLink();
		
		contactPage.SendEmail("Selenium Test", "", "This is my Selenium Test Message");

		Assert.IsTrue(contactPage.IsDisplayingValidationError);
	}
}</pre></div></div>

<p>There is still some additional refactoring we could do, but this is far more readable, has reduced the level of duplication, and added title checks.</p>
<h3>Converting the Remaining Tests</h3>
<p>Converting the remining tests is a straightforward exercise.</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="csharp"><thead><tr><td colspan="2"  class="head">C#</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
</pre></td><td class="de1"><pre class="de1"><span class="br0">&#91;</span>TestMethod<span class="br0">&#93;</span>
<span class="kw1">public</span> <span class="kw4">void</span> ContactPageReturnsErrorWhenEmailFieldEmpty<span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; <span class="kw1">using</span> <span class="br0">&#40;</span>FirefoxDriver driver <span class="sy0">=</span> <span class="kw3">new</span> FirefoxDriver<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; driver<span class="sy0">.</span><span class="me1">Navigate</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">.</span><span class="me1">GoToUrl</span><span class="br0">&#40;</span><span class="st0">&quot;http://tiernok.com/&quot;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; PageBase homepage <span class="sy0">=</span> PageBase<span class="sy0">.</span><span class="me1">GetInstance</span><span class="sy0">&lt;</span>PageBase<span class="sy0">&gt;</span><span class="br0">&#40;</span>driver, <span class="st0">&quot;Eli Weinstock-Herman | Tarwn&quot;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; ContactPage contactPage <span class="sy0">=</span> homepage<span class="sy0">.</span><span class="me1">NavigateContactLink</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; contactPage<span class="sy0">.</span><span class="me1">SendEmail</span><span class="br0">&#40;</span><span class="st0">&quot;Selenium Test&quot;</span>, <span class="st0">&quot;&quot;</span>, <span class="st0">&quot;This is my Selenium Test Message&quot;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; Assert<span class="sy0">.</span><span class="me1">IsTrue</span><span class="br0">&#40;</span>contactPage<span class="sy0">.</span><span class="me1">IsDisplayingValidationError</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; <span class="br0">&#125;</span>
<span class="br0">&#125;</span>
&nbsp;
<span class="br0">&#91;</span>TestMethod<span class="br0">&#93;</span>
<span class="kw1">public</span> <span class="kw4">void</span> ContactPageReturnsErrorWhenNameFieldEmpty<span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; <span class="kw1">using</span> <span class="br0">&#40;</span>FirefoxDriver driver <span class="sy0">=</span> <span class="kw3">new</span> FirefoxDriver<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; driver<span class="sy0">.</span><span class="me1">Navigate</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">.</span><span class="me1">GoToUrl</span><span class="br0">&#40;</span><span class="st0">&quot;http://tiernok.com/&quot;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; PageBase homepage <span class="sy0">=</span> PageBase<span class="sy0">.</span><span class="me1">GetInstance</span><span class="sy0">&lt;</span>PageBase<span class="sy0">&gt;</span><span class="br0">&#40;</span>driver, <span class="st0">&quot;Eli Weinstock-Herman | Tarwn&quot;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; ContactPage contactPage <span class="sy0">=</span> homepage<span class="sy0">.</span><span class="me1">NavigateContactLink</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; contactPage<span class="sy0">.</span><span class="me1">SendEmail</span><span class="br0">&#40;</span><span class="st0">&quot;&quot;</span>, EmailAddress, <span class="st0">&quot;This is my Selenium Test Message&quot;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; Assert<span class="sy0">.</span><span class="me1">IsTrue</span><span class="br0">&#40;</span>contactPage<span class="sy0">.</span><span class="me1">IsDisplayingValidationError</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; <span class="br0">&#125;</span>
<span class="br0">&#125;</span>
&nbsp;
<span class="br0">&#91;</span>TestMethod<span class="br0">&#93;</span>
<span class="kw1">public</span> <span class="kw4">void</span> ContactPageReturnsErrorWhenMessageFieldEmpty<span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; <span class="kw1">using</span> <span class="br0">&#40;</span>FirefoxDriver driver <span class="sy0">=</span> <span class="kw3">new</span> FirefoxDriver<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; driver<span class="sy0">.</span><span class="me1">Navigate</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">.</span><span class="me1">GoToUrl</span><span class="br0">&#40;</span><span class="st0">&quot;http://tiernok.com/&quot;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; PageBase homepage <span class="sy0">=</span> PageBase<span class="sy0">.</span><span class="me1">GetInstance</span><span class="sy0">&lt;</span>PageBase<span class="sy0">&gt;</span><span class="br0">&#40;</span>driver, <span class="st0">&quot;Eli Weinstock-Herman | Tarwn&quot;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; ContactPage contactPage <span class="sy0">=</span> homepage<span class="sy0">.</span><span class="me1">NavigateContactLink</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; contactPage<span class="sy0">.</span><span class="me1">SendEmail</span><span class="br0">&#40;</span><span class="st0">&quot;Selenium Test&quot;</span>, EmailAddress, <span class="st0">&quot;&quot;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; Assert<span class="sy0">.</span><span class="me1">IsTrue</span><span class="br0">&#40;</span>contactPage<span class="sy0">.</span><span class="me1">IsDisplayingValidationError</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; <span class="br0">&#125;</span>
<span class="br0">&#125;</span>
&nbsp;
<span class="br0">&#91;</span>TestMethod<span class="br0">&#93;</span>
<span class="kw1">public</span> <span class="kw4">void</span> ContactPageReturnsSuccessWhenAllFieldsProvided<span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; <span class="kw1">using</span> <span class="br0">&#40;</span>FirefoxDriver driver <span class="sy0">=</span> <span class="kw3">new</span> FirefoxDriver<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; driver<span class="sy0">.</span><span class="me1">Navigate</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">.</span><span class="me1">GoToUrl</span><span class="br0">&#40;</span><span class="st0">&quot;http://tiernok.com/&quot;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; PageBase homepage <span class="sy0">=</span> PageBase<span class="sy0">.</span><span class="me1">GetInstance</span><span class="sy0">&lt;</span>PageBase<span class="sy0">&gt;</span><span class="br0">&#40;</span>driver, <span class="st0">&quot;Eli Weinstock-Herman | Tarwn&quot;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; ContactPage contactPage <span class="sy0">=</span> homepage<span class="sy0">.</span><span class="me1">NavigateContactLink</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; contactPage<span class="sy0">.</span><span class="me1">SendEmail</span><span class="br0">&#40;</span><span class="st0">&quot;Selenium Test&quot;</span>, EmailAddress, <span class="st0">&quot;This is my Selenium Message&quot;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; Assert<span class="sy0">.</span><span class="me1">IsTrue</span><span class="br0">&#40;</span>contactPage<span class="sy0">.</span><span class="me1">IsDisplayingSuccessMessage</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; <span class="br0">&#125;</span>
<span class="br0">&#125;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">[TestMethod]
public void ContactPageReturnsErrorWhenEmailFieldEmpty() {
	using (FirefoxDriver driver = new FirefoxDriver()) {
		driver.Navigate().GoToUrl("http://tiernok.com/");
		PageBase homepage = PageBase.GetInstance&lt;PageBase&gt;(driver, "Eli Weinstock-Herman | Tarwn");
		ContactPage contactPage = homepage.NavigateContactLink();

		contactPage.SendEmail("Selenium Test", "", "This is my Selenium Test Message");

		Assert.IsTrue(contactPage.IsDisplayingValidationError);
	}
}

[TestMethod]
public void ContactPageReturnsErrorWhenNameFieldEmpty() {
	using (FirefoxDriver driver = new FirefoxDriver()) {
		driver.Navigate().GoToUrl("http://tiernok.com/");
		PageBase homepage = PageBase.GetInstance&lt;PageBase&gt;(driver, "Eli Weinstock-Herman | Tarwn");
		ContactPage contactPage = homepage.NavigateContactLink();

		contactPage.SendEmail("", EmailAddress, "This is my Selenium Test Message");

		Assert.IsTrue(contactPage.IsDisplayingValidationError);
	}
}

[TestMethod]
public void ContactPageReturnsErrorWhenMessageFieldEmpty() {
	using (FirefoxDriver driver = new FirefoxDriver()) {
		driver.Navigate().GoToUrl("http://tiernok.com/");
		PageBase homepage = PageBase.GetInstance&lt;PageBase&gt;(driver, "Eli Weinstock-Herman | Tarwn");
		ContactPage contactPage = homepage.NavigateContactLink();

		contactPage.SendEmail("Selenium Test", EmailAddress, "");

		Assert.IsTrue(contactPage.IsDisplayingValidationError);
	}
}

[TestMethod]
public void ContactPageReturnsSuccessWhenAllFieldsProvided() {
	using (FirefoxDriver driver = new FirefoxDriver()) {
		driver.Navigate().GoToUrl("http://tiernok.com/");
		PageBase homepage = PageBase.GetInstance&lt;PageBase&gt;(driver, "Eli Weinstock-Herman | Tarwn");
		ContactPage contactPage = homepage.NavigateContactLink();

		contactPage.SendEmail("Selenium Test", EmailAddress, "This is my Selenium Message");

		Assert.IsTrue(contactPage.IsDisplayingSuccessMessage);
	}
}</pre></div></div>

<p>There is additional refactoring we could do at this stage. The hardcoded page titles and repeated driver.Navigate() calls could be cleaned up to further reduce duplication and make the tests more readable. As we add more pages and more tests, we are going to find other common functionality to refactor and other necessary functionality to add. The framework I end up building through aggressive refactoring of these tests may not look like the one that you end up with, but we will be reaching in the same direction.</p>
<h2>Review</h2>
<p>We have created the beginning of a more extensive test framework that enables us to create more complex tests with less duplication and effort. Refactoring common elements improved maintainability and our ability to react to changes, while using the PageObject pattern has started to separate the subject of our tests from the mechanics of how we interact with the browser.</p>
<p>As before, though, there are some points to return to.</p>
<h3>Complexity, Investment, and Code Errors</h3>
<p>Getting started with some Selenium IDE tests was pretty easy. A customer solution, by comparison, scales farther but requires more up front investment and introduces the potential for errors inside the framework that could adversely affect the test results. Despite using an existing Test Runner and the PageFactory object for wiring, I still managed to make errors along the way. In one case, I actually lost time chasing down something that I thought was a timing issue (which you will run into at some point) that was actually a simple error in my code.</p>
<p>Experience helps a lot in this area, as does following good code craftsmanship standards, refactoring aggressively, using consistent naming, and trying to keep the bigger picture of the framework in mind. Along the way I made variable type selections to specifically set myself up for later additions I want (choosing RemoteWebDriver over IWebDriver in several cases, for instance) and despite needing only one NavigateClick function for this sample, I created a pattern I would intend to follow for the rest of the navigation menu. Experience will help tell us these things are available, but first we have to make the mistakes and experiments along the way to gain that experience.</p>
<h3>Moving Forward</h3>
<p>From automating basic smoke tests and HTML element interactions we have moved into the realm of interacting with web pages and actions on those web pages. We can abstract a step further, though, and start focusing on validating what the end user has asked for. The next level is a framework that abstracts the web page away, leaving us to interact with higher level functions and processes, validating whether the application fulfills the users acceptance criteria.</p>
<h3>Finishing Up</h3>
<p>The Selenium WebDriver library offers some great capabilities. Using a handy Unit Testing framework and Test Runner can help give us a solution that is halfway between automated acceptance testing and Selenium IDE in a fairly short period of time. There are still a lot of areas we haven&#8217;t discussed, such as integrating with a build server or tying into multiple browser drivers, but this post has already run a bit longer than the prior one. If you are interested, the code for this post is in a <a href="https://bitbucket.org/tarwn/seleniumwebdriversample/" title="Source code for the post">mercurial repository on bitbucket</a> and as always we can continue discussing any of the points in the post in the comments here or in the forum area.</p>
]]></content:encoded>
			<wfw:commentRss>/index.php/webdev/uidevelopment/automated-web-testing-with-selenium-2/feed/</wfw:commentRss>
		<slash:comments>18</slash:comments>
		</item>
		<item>
		<title>Automated Web Testing with Selenium IDE</title>
		<link>/index.php/webdev/uidevelopment/automated-web-testing-with-selenium/</link>
		<comments>/index.php/webdev/uidevelopment/automated-web-testing-with-selenium/#comments</comments>
		<pubDate>Wed, 26 Oct 2011 11:18:00 +0000</pubDate>
		<dc:creator><![CDATA[Eli Weinstock-Herman (tarwn)]]></dc:creator>
				<category><![CDATA[UI Development]]></category>
		<category><![CDATA[automated testing]]></category>
		<category><![CDATA[integration testing]]></category>
		<category><![CDATA[selenium]]></category>

		<guid isPermaLink="false">/index.php/2011/10/automated-web-testing-with-selenium/</guid>
		<description><![CDATA[How long does it take to browse through a website after each build and make sure none of the pages have mysteriously blown up? 5 Minutes? 20? No time at all? The time we invest in manual testing adds up. As we switch focus to newer parts of a site we may even stop testing the ones we 'finished', confidant that they're stable and won't be affected by our newer changes (yeah right).]]></description>
				<content:encoded><![CDATA[<p>How long does it take to browse through a website after each build and make sure none of the pages have mysteriously blown up? 5 Minutes? 20? No time at all? The time we invest in manual testing adds up. As we switch focus to newer parts of a site we may even stop testing the ones we &#8216;finished&#8217;, confident that they&#8217;re stable and won&#8217;t be affected by our newer changes (yeah right). And despite the time spent manually testing, we still eventually deploy issues that a 30s check in the right part of the application would have detected.</p>
<p>Enter browser automation tools, such as Selenium. With browser automation tools we can invest some extra time up front to define those manual tests in code, then continue to run those tests long past the time we would have stopped doing it manually. </p>
<p><em>Note: This post is a walk-through for creating some automated browser test cases. To get the most from it you will probably want to download the tool below and launch it from a second browser so you can follow along. It assumes you have Firefox installed and are comfortable with HTML and css selectors.</em></p>
<h2>The Smoke Test</h2>
<p>There are levels to automated testing, starting with &#8220;none&#8221; and ending with some fairly complex industry packages and/or in-house frameworks. Today we&#8217;re going to look at the cheapest option, recording and rerunning a set of tests using <a href="http://seleniumhq.org/projects/ide/" title="Go to the Selenium IDE website">Selenium IDE</a>, a Firefox browser plugin. At this level we can replace many of our manual smoke tests with an automated set for a low initial investment.</p>
<p>Selenium IDE is a browser plugin that can record and playback actions we make in the browser. Using Selenium we can record a set of paths through our website, add some checks, and be reasonably confidant that the site is still working. </p>
<p>Pros: Free, Low up front time cost<br />
Cons: Tests are fragile*, Potential for lots of duplication*, tests run on local browser<br />
Neutral: There&#8217;s a learning curve but good documentation and quick feedback*</p>
<p>* I&#8217;ll come back to these three points</p>
<p>For the purposes of the post, we will use a couple pages from my personal website. We will create two tests to verify the main page loads properly and that the contact form submits and validates properly. In the even that I make a change to a shared file, these tests will ensure the pages continue to pass some basic tests.</p>
<h2>Getting Started</h2>
<p>First we need to download the plugin (assuming you have Firefox installed): <a href="http://seleniumhq.org/download/" title="Download the plugin">Download Selenium IDE</a>.</p>
<p>After downloading the plugin and restarting, we should have a &#8220;Selenium IDE&#8221; option in the Tools menu (Windows users can press the &#8216;Alt&#8217; key to see the top menu). </p>
<div style="text-align: center; margin: 1em; color: #666666; font-size: 80%">
<img src="http://tiernok.com/LTDBlog/selenium/FF_Menu.jpg" alt="Selenium IDE in Firefox" /><br />
Selenium IDE in the Firefox Menu
</div>
<p>Pressing that Selenium IDE button will give us both a popup interface and a set of release notes that unfortunately are probably less than useful to a first time user.</p>
<div style="text-align: center; margin: 1em; color: #666666; font-size: 80%">
<img src="http://tiernok.com/LTDBlog/selenium/SeleniumIDE.jpg" alt="Selenium IDE" /><br />
Selenium IDE
</div>
<p>The main areas of the interface are:</p>
<ul>
<li>A test case list on the left which displays the list of &#8220;Test Cases&#8221; in the current &#8220;Test Suite&#8221;</li>
<li>A command window in the main viewing area, which will display the individual commands we execute as part of selected test case</li>
<li>A series of tabs at the bottom, of which we will only be interacting with the Log and Reference initially</li>
</ul>
<p>So now that we have an interface, lets jump into creating the first test case to give us something to explore.</p>
<p><em>Note: The FireBug Firefox extension is an invaluable tool when working with Selenium, I highly recommend you <a href="http://getfirebug.com/" title="Go get Firebug Extension">download FireBug</a> if you don&#8217;t already have it.</em></p>
<h2>The First Test Case</h2>
<p>Before we start recording our first test case, it&#8217;s a good idea to create a saved Test Suite file. Pay careful attention to the title bar for the file dialog, as it will first ask you to save the Untitled test and then ask to save the Untitled Test Suite. Out of personal preference, I use a &#8220;.testsuite&#8221; and &#8220;.test&#8221; extension for my selenium IDE files.</p>
<dl>
<dt>Test Suite </dt>
<dd>A group of test cases, including their name and filename</dd>
<dt>Test Case</dt>
<dd>A series of commands that reports a single Pass/Fail result when they are run</dd>
</dl>
<p>We are now ready to start recording our first test. This test will click the &#8220;home&#8221; link in my website, verify we are on the right page, and verify two books are shown from my reading list.</p>
<h3>Creating a Basic Recording</h3>
<p>With our browser open, click the red circular icon on the right side of the Selenium IDE toolbar <img src="http://tiernok.com/LTDBlog/selenium/SeleniumIDE_RecordButton.jpg" alt="Record button" />. This tells Selenium IDE to start recording our browser interactions. Returning to the browser window, enter &#8220;http://tiernok.com&/#8221; in the address bar to navigate to the site. Click the &#8220;home&#8221; link in the navigation will load the index page. Once this is done, we can return to the IDE and stop the recording by pressing the record button again.</p>
<p>At this point we see a few things in the interface. </p>
<div style="text-align: center; margin: 1em; color: #666666; font-size: 80%">
<img src="http://tiernok.com/LTDBlog/selenium/SeleniumIDE_Rec_01.jpg" alt="Selenium IDE - Getting Started" /><br />
Selenium IDE &#8211; Getting Started
</div>
<p>The Base URL field above the toolbar has populated with the URL of the site we are testing, the &#8220;Untitled&#8221; test case has a star next to it to indicate unsaved changes, and the command list in the right window has been populated with two commands. Let&#8217;s save these changes (Ctrl + S) and test them. Navigate the browser to a different site, return to the Selenium IDE window, and press the &#8220;Play Current Test Case&#8221; button (the play symbol with a single horizontal line in focus). As expected, the browser opens the root URL (step 1), then presses the &#8220;Home&#8221; link. The results are displayed under the test case list as 1 Run and 0 Failures and we see the details of the commands echoed in the Log tab at the bottom. </p>
<p>Now that we have the mechanics, lets add verifications. We are going to make some assertions about what should be displayed in the page and Selenium IDE will test them for us. The first thing we want to do is make sure we ended up on the correct page, which we can do by asserting the title of the page. </p>
<h3>Adding a simple Assertion</h3>
<p>To add an assertion command in the command list, select the empty row below the &#8220;clickAndWait&#8221; command.</p>
<div style="text-align: center; margin: 1em; color: #666666; font-size: 80%">
<img src="http://tiernok.com/LTDBlog/selenium/SeleniumIDE_Rec_02.jpg" alt="Selenium IDE - Adding a Command" /><br />
Selenium IDE &#8211; Adding a Command
</div>
<p>Under the command list, we have three inputs for the new command: &#8220;Command&#8221;, &#8220;Target&#8221;, and &#8220;Value&#8221;. Theoretically these are used to define what command Selenium should execute, the target it is acting on, and a value for the command. These are not always 100% accurate, as we are about to see.</p>
<p>In this case we want the command &#8220;assertTitle&#8221; to indicate our expectation to Selenium that the page title will be a specific value. As we start typing it, the command dropdown will filter the list of available commands. Once the command is entered, Selenium IDE populates the reference tab with additional information about that command. Since &#8220;assertTitle&#8221; doesn&#8217;t have a target, we can simply enter the value of the page title into the &#8220;value&#8221; field. </p>
<p>Let&#8217;s try an incorrect value first, just to see what happens when a test fails. Enter &#8220;ice cream&#8221; or something else nonsensical as the value and run the Test Case again.</p>
<p>The result is different this time. Under the Test Case list we still have 1 run, but now we have 1 failure and a red bar. In the command list to the right, the &#8220;assertTitle&#8221; line has a red background (unless it currently has focus). In the log at the bottom we have some red text indicating the command that failed.</p>
<div style="text-align: center; margin: 1em; color: #666666; font-size: 80%">
<img src="http://tiernok.com/LTDBlog/selenium/SeleniumIDE_Rec_03.jpg" alt="Selenium IDE - Results" /><br />
Selenium IDE &#8211; Results
</div>
<p>We have actually learned one more thing. If we look closely at the error we will see that it tried to match the page title against an empty string and failed. The &#8220;assertTitle&#8221; command actually reads it&#8217;s argument from the &#8220;target&#8221; input, not the &#8220;value&#8221; one. A better way to think of these inputs is as &#8220;Argument 1&#8221; and &#8220;Argument 2&#8221; rather than as &#8220;Target&#8221; and &#8220;Value&#8221;. If we put the value &#8220;Eli Weinstock-Herman | Tarwn&#8221; in the &#8220;target&#8221; input and run the tests again, it should Pass.</p>
<div style="text-align: center; margin: 1em; color: #666666; font-size: 80%">
<img src="http://tiernok.com/LTDBlog/selenium/SeleniumIDE_Rec_04.jpg" alt="Selenium IDE - Results" /><br />
Selenium IDE &#8211; Results
</div>
<p>Which it does. Now we need to move on to the slightly more complex case of verifying the presence of elements that change on every page load.</p>
<h3>Asserting Something Is Present</h3>
<p>There are a couple different commands we could use to create this test. For the purposes of the post, we will use the &#8220;assertElementPresent&#8221; command to verify the first and second books are available. Using Firebug (F12, Inspect button, hover over a book), we can see there is a &#8220;book&#8221; CSS class that wraps around the image and title text of each book. </p>
<p>Add a new command to the Test Case, this time entering &#8220;assertElementPresent&#8221; in the &#8220;Command&#8221; input with a target of &#8220;css=.book&#8221;. There are several locators we can use here, for instance xpath= would allow us to use an xpath locator. To verify the target string, press the &#8220;Find&#8221; button tot he right of the input. If Selenium is able to find a match, the element will flash briefly in the browser window. Additionally, double clicking the command in the command list will test just that line and report the result.</p>
<p>To test that there are two books, we are going to be sneaky and use the CSS selector &#8220;css=.book + .book&#8221;. Since this CSS path will only locate an element if it finds two book elements in a row, it is an easy way to verify that both are present. We can update the command with this new locator target and run the Test Case to see it passes successfully. </p>
<div style="text-align: center; margin: 1em; color: #666666; font-size: 80%">
<img src="http://tiernok.com/LTDBlog/selenium/SeleniumIDE_Rec_05.jpg" alt="Selenium IDE - Test Case Commands" /><br />
Selenium IDE &#8211; Test Case Commands
</div>
<p>The last thing we need to do is rename the Test Case to something useful. Right-Click the Test Case in the Test Case list on the left and edit the test name. I named my test &#8220;HomeLinkDisplaysHomePageWithBooks&#8221;, which may seem a bit clumsy but tells me exactly what I&#8217;m tetsing without loking at the details.</p>
<p><em>Note: Attempting to test too many concepts in a single test makes the test more fragile (ie, increases the frequency we will need to update it as we make site changes) and requires more digging to determine what failed when the test doesn&#8217;t Pass. A Descriptive name is not only useful but helps keep me from combining too many tests.</p>
<p>Note #2: Another option for this test would have been the <a href="http://release.seleniumhq.org/selenium-core/1.0/reference.html#storeXpathCount" title="See more information in the Selenium IDE Reference">&#8220;assertXpathCount&#8221; command</a> that allows us to enter an xpath argument and verify the return count matches a specific number.</em></p>
<h2>The Second Test Case &#8211; Adding some Interaction</h2>
<p>Now that we can create a test case that makes some basic assertions about the page, it&#8217;s time to move on to a test that requires some interaction. In this case we are going to test that the contact form properly submits and returns an error when we enter less than the required number of inputs.</p>
<h3>Recording the Test</h3>
<p>To start, lets create a new test case by selecting &#8220;New Test Case&#8221; from the File menu in Selenium IDE. Like we did with the original test, lets save this one before we make any changes. I am going to call my test &#8220;ContactPageReturnsErrorWhenEmailFieldEmpty.test&#8221;. </p>
<p><em>Note: Something to consider when naming tests is how you want to organize them. Besides being descriptive, I also try to use a consistent pattern to make them easily sortable/searchable in the file system.</em></p>
<p>Let&#8217;s start another recording and open &#8220;http://tiernok.com&/#8221; again. Click the &#8220;Contact&#8221; link in the top navigation, enter text in the Name and Message inputs in the form, then press the submit button. That&#8217;s the whole workflow, so lets stop the recording and see what we have.</p>
<div style="text-align: center; margin: 1em; color: #666666; font-size: 80%">
<img src="http://tiernok.com/LTDBlog/selenium/SeleniumIDE_Rec_06.jpg" alt="Selenium IDE - Test Recording" /><br />
Selenium IDE &#8211; Test Recording
</div>
<p>This test has some new commands in it, but they are pretty self explanatory. We opened the root site, clicked on the &#8220;Contact&#8221; link and waited for the page to load, typed in two input boxes, and clicked the submit button, again waiting for the next page to load. To finish up the test, lets add an assertion for the error message.</p>
<h3>Asserting the Error Message</h3>
<p>Like the earlier Test Case, there are a few different ways we can write this assertion. In this case the two obvious methods are using either &#8220;assertTextPresent&#8221;, which tests that the text shows up somewhere on the page, &#8220;assertElementPresent&#8221;, which could look for an element with the &#8220;.err&#8221; CSS class, or &#8220;assertText&#8221;, which combines the two commands above to test that a specific element has specific text.</p>
<div style="text-align: center; margin: 1em; color: #666666; font-size: 80%">
<img src="http://tiernok.com/LTDBlog/selenium/SeleniumIDE_Rec_07.jpg" alt="Selenium IDE - Error Assertion" /><br />
Selenium IDE &#8211; Error Assertion
</div>
<p>I&#8217;ve used the last option in my Test Case (as well as Firebug again to locate the element in the browser). If I save the Test Case and run it, I should see the browser run through the steps and Pass, just like our earlier test.</p>
<p><em>Note: You may have noticed the Fast-&gt;Slow slider above the Test Case list on the left. This slider controls how fast or slow the individual commands are run when processing the tests. It can be helpful to run individual tests slowly, but the fast setting is useful when you want to run multiple tests or the whole set.</em></p>
<h2>Review</h2>
<p>Through the course of the post we have created two basic tests. Neither took very long to create and it wouldn&#8217;t take long to expand this suite to cover the entire site. Selenium IDE makes it easy to create basic test cases and tie them together into a suite. The tools, augmented with Firebug, make it fairly easy to build the series of commands for each Test Case and there is a fairly detailed <a href="http://release.seleniumhq.org/selenium-core/1.0/reference.html" title="View the command reference">command reference</a> available.</p>
<p>However there were some points I mentioned above that I need to return to.</p>
<h3>Test Fragility and Duplication</h3>
<p>Tests in Selenium IDE tend to be somewhat fragile. In general, automated interface tests have a certain level of fragility because it&#8217;s easy to break them simply by moving a few elements around or renaming some controls. The Selenium IDE is on the extreme side of this curve because these values are used at the individual command level rather than having a central list of search or match strings.</p>
<p>We can reduce the effects of this fragility by keeping tests shorter, as shorter tests are easier to correct or update. Selenium IDE has the ability to define suite-level variables, so in some cases I created variables for common strings and put those declarations in a first &#8220;test case&#8221;.</p>
<h3>Other Limitations</h3>
<p>In addition to the fragility above, there are other limitations. Using a Test Suite to test two separate base URLs (for instance a Dev and a QA version or local and production) is difficult and requires some trickery. Scaling the tests can also be tricky, especially if you are used to the ability to run categories of unit tests or select subsets to run on the fly. There is also the issue of leaving your PC alone long enough to run the tests, since the browser will steal focus as it&#8217;s running tests.</p>
<p><em>Note: There is also another oddity. When you have Selenium IDE open, links that open in new tabs or windows will be opened in a new window without the ability to scroll. This has gotten me more than once.</em></p>
<h3>And That&#8217;s a Wrap</h3>
<p>Selenium IDE offers an excellent first step for verifying everything is working from the interface level. It also provides a great introduction into the mindset of using a web automation framework for testing and has a lot of power for a very cheap price. While there are some limits to how far this approach will get you, the gains are fairly cheap and can be a real time saver. In a later post I will talk about the next step, interfacing directly with Selenium WebDriver from code to test a site.</p>
<p>Next Post: <a href="/index.php/WebDev/UIDevelopment/automated-web-testing-with-selenium-2" title="Automated Web Testing with Selenium WebDriver">Automated Web Testing with Selenium WebDriver</a></p>
]]></content:encoded>
			<wfw:commentRss>/index.php/webdev/uidevelopment/automated-web-testing-with-selenium/feed/</wfw:commentRss>
		<slash:comments>8</slash:comments>
		</item>
	</channel>
</rss>
