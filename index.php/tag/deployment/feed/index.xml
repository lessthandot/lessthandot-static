<?xml version="1.0" encoding="UTF-8"?><rss version="2.0"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:atom="http://www.w3.org/2005/Atom"
	xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
	xmlns:slash="http://purl.org/rss/1.0/modules/slash/"
	>

<channel>
	<title>deployment &#8211; LessthanDot</title>
	<atom:link href="/index.php/tag/deployment/feed/" rel="self" type="application/rss+xml" />
	<link>/</link>
	<description>A Technical Community for IT Professionals</description>
	<lastBuildDate>Sat, 09 Mar 2019 12:50:36 +0000</lastBuildDate>
	<language>en-US</language>
	<sy:updatePeriod>hourly</sy:updatePeriod>
	<sy:updateFrequency>1</sy:updateFrequency>
	<generator>https://wordpress.org/?v=4.6.1</generator>
	<item>
		<title>Automated Deployment to Azure Hosted Services</title>
		<link>/index.php/enterprisedev/cloud/azure/automated-deployment-to-azure-hosted-services/</link>
		<comments>/index.php/enterprisedev/cloud/azure/automated-deployment-to-azure-hosted-services/#respond</comments>
		<pubDate>Tue, 27 May 2014 18:50:21 +0000</pubDate>
		<dc:creator><![CDATA[Eli Weinstock-Herman (tarwn)]]></dc:creator>
				<category><![CDATA[Azure]]></category>
		<category><![CDATA[automation]]></category>
		<category><![CDATA[azure]]></category>
		<category><![CDATA[deployment]]></category>
		<category><![CDATA[powershell]]></category>

		<guid isPermaLink="false">/?p=2644</guid>
		<description><![CDATA[Azure Hosted Services offers several really awesome features over using physical servers or standard VM infrastructure. Two of these are the staged deployment model and management SDK, which includes a powershell module. Using these two features, we are going to build a deployment script that deploys a new set of services (servers) in Azure, using [&#8230;]]]></description>
				<content:encoded><![CDATA[<p>Azure Hosted Services offers several really awesome features over using physical servers or standard VM infrastructure. Two of these are the staged deployment model and management SDK, which includes a powershell module. Using these two features, we are going to build a deployment script that deploys a new set of services (servers) in Azure, using a Virtual IP swap to replace the existing production instances only after the new deployment is fully running. </p>
<p>The goal of this post is to build a powershell script that will:</p>
<ul>
<li>Upload a compiled Package to Azure Storage</li>
<li>Create a new Staging deployment</li>
<li>Wait for all of the instances of the new deployment to be running</li>
<li>Promote the new deployment to Production</li>
<li>Stop the instances of the old production deployment and keep them handy in the Staging slot</li>
</ul>
<p>The sample project and script are available on github: <a href="https://github.com/tarwn/AzureHostedServiceDeploymentSample" title="tarwn/AzureHostedServiceDeploymentSample on github">tarwn/AzureHostedServiceDeploymentSample on github</a></p>
<p>This script is not intended to be production ready. I have spent no time at all refactoring into readily re-usable methods and do not use it in a production environment myself. It will show you how to use the individual methods and give you the pieces you need to build one that fits your processes.</p>
<h2>Initial Steps</h2>
<p>If you would like to build a sample project of your own and follow along, here&#8217;s the steps you will need to perform first:</p>
<ol style="margin-left:3em; line-height: 1.4em">
<li>Create an Azure project in Visual Studio &#8211; Create/attach one or more web or worker roles</li>
<li>Remove the Diagnostics entry in the web.config or add storage settings</li>
<li>In the Project References, select &#8220;Microsoft.Web.Infrastructure&#8221; and set &#8220;Copy Local&#8221; to &#8220;True&#8221;</li>
<li>Create a Hosted Service in the Azure Dashboard</li>
<li>Create a Storage Account in the Azure Dashboard (pick the same region as prior step)</li>
<li>Install the latest Azure SDK + Azure Powershell Module (available in Web Platform Installer)</li>
<li>Download your publish settings from https://windows.azure.com/download/publishprofile.aspx</li>
</ol>
<p>If you know your way around Azure, steps 4-7 are mostly reading <a href="http://xkcd.com/" title="If we are what we eat, what could be better for our brains than a steady diet of intelligent humor? And title tags, you have to love title tags.">xkcd</a> while the installers run.</p>
<h2>Create the Deployment Script</h2>
<p>Now that we have a project and all the prerequisites out of the way, let&#8217;s start building the script. As a reminder, these are the steps we intend to follow:</p>
<ul>
<li>Upload a compiled Package to Azure Storage</li>
<li>Create a new Staging deployment</li>
<li>Wait for all of the instances of the new deployment to be running</li>
<li>Promote the new deployment to Production</li>
<li>Suspend the instances of the old production deployment and keep them handy in the Staging slot</li>
</ul>
<p>Let&#8217;s go!</p>
<h3>Connect to Azure</h3>
<p>The first thing we need to do is import the Powershell module and use the publish settings to set our subscription.</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="powershell"><thead><tr><td colspan="2"  class="head">PowerShell</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
</pre></td><td class="de1"><pre class="de1">Import<span class="sy0">-</span>Module <span class="st0">&quot;C:\Program Files (x86)\Microsoft SDKs\Windows Azure\PowerShell\ServiceManagement\Azure\Azure.psd1&quot;</span>
&nbsp;
Import<span class="sy0">-</span>AzurePublishSettingsFile <span class="re0">$publishSettingsPath</span>
&nbsp;
Set<span class="sy0">-</span>AzureSubscription <span class="re0">$subscriptionName</span> <span class="sy0">-</span>CurrentStorageAccount <span class="re0">$storageAccountName</span>
&nbsp;
Select<span class="sy0">-</span>AzureSubscription <span class="re0">$subscriptionName</span> <span class="sy0">-</span>Current</pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">Import-Module "C:\Program Files (x86)\Microsoft SDKs\Windows Azure\PowerShell\ServiceManagement\Azure\Azure.psd1"

Import-AzurePublishSettingsFile $publishSettingsPath
 
Set-AzureSubscription $subscriptionName -CurrentStorageAccount $storageAccountName

Select-AzureSubscription $subscriptionName -Current</pre></div></div>

<p><i>$publishSettingsPath, $subscriptionName, and $storageAccountName are parameters I have passed into my script</i></p>
<p>We load the Azure module from the Microsoft SDKs folder (this is where it installs from Web PI). We then use the *.publishsettings file to &#8220;log in&#8221; to the Azure subscription, set the storage account we will be using by default, and set this subscription as the default one for our current powershell session.</p>
<div style="background-color: #eeeeee; padding: .5em 1em; margin: .5em .5em 1.5em .5em;">
<a href="http://msdn.microsoft.com/en-us/library/dn722512.aspx" title="Import-AzurePublishSettingsFile on MSDN">Import-AzurePublishSettingsFile</a> basically logs into your Azure account using the supplied publishsettings file, storing a management certificate and a subscription data file. Once we&#8217;re &#8220;logged in&#8221;, we can use the rest of the Azure cmdlets to interact with our Azure resources.</p>
<p><a href="http://msdn.microsoft.com/en-us/library/dn722501.aspx" title="Set-AzureSubscription on MSDN">Set-AzureSubscription</a> sets the &#8220;current&#8221; storage account for the subscription, basically defining a default so we don&#8217;t have to specify it throughout the script. Another option would be to use <a href="http://msdn.microsoft.com/en-us/library/dn495246.aspx" title="New-AzureStorageContext on MSDN">New-AzureStorageContext</a> to create context for the Storage Account and pass this to the calls that interact with Storage.</p>
<p><a href="http://msdn.microsoft.com/en-us/library/dn722499.aspx" title="Select-AzureSubscription">Select-AzureSubscription</a> does exactly what you would expect, it updates the subscription data in our Powershell context. By specifying -Current, we only update the subscription for our current session.
</div>
<h3>Upload a compiled Package to Azure Storage</h3>
<p>Now that we have access to Azure, we can move on to upload the package. This package can be generated from Visual Studio by right clicking on the Cloud Project and choosing &#8220;Package&#8221;. In an automated process, we can use MSBuild to create this package before calling this script to upload and deploy it.</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="powershell"><thead><tr><td colspan="2"  class="head">PowerShell</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
</pre></td><td class="de1"><pre class="de1"><span class="re0">$container</span> <span class="sy0">=</span> Get<span class="sy0">-</span>AzureStorageContainer <span class="kw5">-Name</span> <span class="re0">$containerName</span> <span class="kw5">-ErrorAction</span> SilentlyContinue
&nbsp;
<span class="kw3">if</span><span class="br0">&#40;</span><span class="sy0">!</span><span class="re0">$container</span><span class="br0">&#41;</span><span class="br0">&#123;</span>
&nbsp; &nbsp; New<span class="sy0">-</span>AzureStorageContainer <span class="kw5">-Name</span> <span class="re0">$containerName</span>
<span class="br0">&#125;</span>
&nbsp;
Set<span class="sy0">-</span>AzureStorageBlobContent <span class="kw4">-File</span> <span class="re0">$packagePath</span> <span class="kw5">-Container</span> <span class="re0">$containerName</span> `
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="sy0">-</span>Blob <span class="re0">$fullTargetPackageName</span> <span class="kw5">-Force</span>
&nbsp;
<span class="re0">$blobInfo</span> <span class="sy0">=</span> Get<span class="sy0">-</span>AzureStorageBlob &nbsp;<span class="kw5">-Container</span> <span class="re0">$containerName</span> <span class="sy0">-</span>blob <span class="re0">$fullTargetPackageName</span>
&nbsp;
<span class="re0">$packageUri</span> <span class="sy0">=</span> <span class="re0">$blobInfo</span>.ICloudBlob.Uri</pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">$container = Get-AzureStorageContainer -Name $containerName -ErrorAction SilentlyContinue

if(!$container){
    New-AzureStorageContainer -Name $containerName
}

Set-AzureStorageBlobContent -File $packagePath -Container $containerName `
                            -Blob $fullTargetPackageName -Force

$blobInfo = Get-AzureStorageBlob  -Container $containerName -blob $fullTargetPackageName

$packageUri = $blobInfo.ICloudBlob.Uri</pre></div></div>

<p><i>$packagePath and $containerName are parameters passed to the script, $fullTargetPackageName is generated with a timestamp.</i></p>
<p>First we create the container if it doesn&#8217;t already exist, then we upload the package (without prompting), and once that is complete we capture the blob information and extract the URL for later use in the deployment.</p>
<div style="background-color: #eeeeee; padding: .5em 1em; margin: .5em .5em 1.5em .5em;">
<a href="http://msdn.microsoft.com/en-us/library/dn495272.aspx" title="Get-AzureStorageContainer on MSDN">Get-AzureStorageContainer</a> attempts to retrieve a container with the given name. In this case I&#8217;ve used the ErrorAction of SilentlyContinue so that if it doesn&#8217;t exist I can create it.</p>
<p><a href="http://msdn.microsoft.com/en-us/library/dn495291.aspx" title="New-AzureStorageContainer on MSDN">New-AzureStorageContainer</a> creates a container with the given name. Since I haven&#8217;t specified permissions, the container will be created with the most restrictive rights.</p>
<p><a href="http://msdn.microsoft.com/en-us/library/dn495279.aspx" title="Set-AzureStorageBlobContent on MSDN">Set-AzureStorageBlobContent</a> uploads the contents of a file specified by -File to the given -Container value with a final name specified by the -Blob property. The -Force overrides any questions the command might have, like &#8220;are you sure you want to do that&#8221;.</p>
<p><a href="http://msdn.microsoft.com/en-us/library/dn495260.aspx" title="Get-AzureStorageBlob on MSDN">Get-AzureStorageBlob</a> retrieves the information about a given Blob, allowing us to extract the Uri property for later use.
</div>
<h3>Create a new Staging Deployment</h3>
<p>Once we have the package uploaded to blob storage, we are ready to create the new Staging deployment.  </p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="powershell"><thead><tr><td colspan="2"  class="head">PowerShell</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
</pre></td><td class="de1"><pre class="de1"><span class="re0">$deployment</span> <span class="sy0">=</span> Get<span class="sy0">-</span>AzureDeployment <span class="sy0">-</span>ServiceName <span class="re0">$serviceName</span> <span class="sy0">-</span>Slot Staging `
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw5">-ErrorAction</span> SilentlyContinue 
&nbsp;
<span class="kw3">if</span><span class="br0">&#40;</span><span class="re0">$deployment</span>.name <span class="kw4">-ne</span> <span class="re0">$null</span><span class="br0">&#41;</span><span class="br0">&#123;</span>
&nbsp; &nbsp; Remove<span class="sy0">-</span>AzureDeployment <span class="sy0">-</span>ServiceName <span class="re0">$serviceName</span> <span class="sy0">-</span>Slot Staging <span class="kw5">-Force</span>
<span class="br0">&#125;</span>
&nbsp;
New<span class="sy0">-</span>AzureDeployment <span class="sy0">-</span>ServiceName <span class="re0">$serviceName</span> <span class="sy0">-</span>Slot Staging <span class="sy0">-</span>Package <span class="re0">$packageUri</span> `
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="sy0">-</span>Configuration <span class="re0">$configPath</span> <span class="kw5">-Name</span> <span class="re0">$fullTargetDeploymentName</span> `
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="sy0">-</span>TreatWarningsAsError</pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">$deployment = Get-AzureDeployment -ServiceName $serviceName -Slot Staging `
                                  -ErrorAction SilentlyContinue 

if($deployment.name -ne $null){
    Remove-AzureDeployment -ServiceName $serviceName -Slot Staging -Force
}

New-AzureDeployment -ServiceName $serviceName -Slot Staging -Package $packageUri `
                    -Configuration $configPath -Name $fullTargetDeploymentName `
                    -TreatWarningsAsError</pre></div></div>

<p><i>The $servicename, $fulltargetDeploymentName, and $configPath are assumed to have been provided, while the $packageUri was defined in the previous step</i></p>
<p>Before we can create the new deployment, we check to see if there is already a deployment present in the Staging slot and delete it. We then create the new deployment, using the package we just uploaded and a local configuration (*.cscfg) file.</p>
<div style="background-color: #eeeeee; padding: .5em 1em; margin: .5em .5em 1.5em .5em;">
<a href="http://msdn.microsoft.com/en-us/library/dn495146.aspx" title="Get-AzureDeployment on MSDN">Get-AzureDeployment</a> retrieves details on the current deployment in the specified slot. I&#8217;ve used ErrorAction SilentlyContinue here because I am only making this call to determine if something is already there and don&#8217;t want to exit out if the slot turns out to be empty.</p>
<p><a href="http://msdn.microsoft.com/en-us/library/dn495296.aspx" title="Remove-AzureDeployment on MSDN">Remove-AzureDeployment</a> removes the deployment we have detected in the Staging slot, using -Force to again suppress any interactive questions the command might have.</p>
<p><a href="http://msdn.microsoft.com/en-us/library/dn495143.aspx" title="New-AzureDeployment on MSDN">New-AzureDeployment</a> creates a new deployment in the specified slot, using the supplied package URI and the configuration file path. I opted to treat warnings as errors because I&#8217;d rather clean up warnings immediately. Unfortunately this parameter does not support URLs. By default the deployment will be started, though there is a -DoNotStart parameter if you do not want this behavior.
</div>
<h3>Wait for all of the instances&#8230;</h3>
<p>The new deployment has been created and told to start, but it takes time for the individual instances to be provisioned and to go through their start-up sequence. </p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="powershell"><thead><tr><td colspan="2"  class="head">PowerShell</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
</pre></td><td class="de1"><pre class="de1"><span class="re0">$statusReady</span> <span class="sy0">=</span> <span class="st0">&quot;ReadyRole&quot;</span>
<span class="re0">$statusStopped</span> <span class="sy0">=</span> <span class="st0">&quot;StoppedVM&quot;</span>
&nbsp;
<span class="kw3">function</span> Get<span class="sy0">-</span>AllInstancesAreStatus<span class="br0">&#40;</span><span class="re0">$instances</span><span class="sy0">,</span> <span class="re0">$targetStatus</span><span class="br0">&#41;</span><span class="br0">&#123;</span>
&nbsp; &nbsp; <span class="kw3">foreach</span> <span class="br0">&#40;</span><span class="re0">$instance</span> <span class="kw3">in</span> <span class="re0">$instances</span><span class="br0">&#41;</span>
&nbsp; &nbsp; <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw3">if</span> <span class="br0">&#40;</span><span class="re0">$instance</span>.InstanceStatus <span class="kw4">-ne</span> <span class="re0">$targetStatus</span><span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw3">return</span> <span class="re0">$false</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp; &nbsp; <span class="kw3">return</span> <span class="re0">$true</span>
<span class="br0">&#125;</span>
&nbsp;
<span class="co1"># ... ... ...</span>
&nbsp;
<span class="re0">$deployment</span> <span class="sy0">=</span> Get<span class="sy0">-</span>AzureDeployment <span class="sy0">-</span>ServiceName <span class="re0">$serviceName</span> <span class="sy0">-</span>Slot Staging
&nbsp;
<span class="re0">$waitTime</span> <span class="sy0">=</span> <span class="br0">&#91;</span>System.Diagnostics.Stopwatch<span class="br0">&#93;</span>::StartNew<span class="br0">&#40;</span><span class="br0">&#41;</span>
<span class="kw3">while</span> <span class="br0">&#40;</span><span class="br0">&#40;</span>Get<span class="sy0">-</span>AllInstancesAreStatus <span class="re0">$deployment</span>.RoleInstanceList <span class="re0">$statusReady</span><span class="br0">&#41;</span> <span class="kw4">-eq</span> <span class="re0">$false</span><span class="br0">&#41;</span>
<span class="br0">&#123;</span>
&nbsp; &nbsp; <span class="kw3">if</span><span class="br0">&#40;</span><span class="re0">$waitTime</span>.Elapsed.TotalSeconds <span class="kw4">-gt</span> <span class="re0">$instancePollLimit</span><span class="br0">&#41;</span><span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw3">Throw</span> <span class="st0">&quot;$instancePollLimit seconds elapsed without all the instances reaching 'ReadyRun'&quot;</span>
&nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp;
&nbsp; &nbsp; <span class="kw1">Start-Sleep</span> <span class="kw5">-Seconds</span> <span class="re0">$instancePollRate</span>
&nbsp;
&nbsp; &nbsp; <span class="re0">$deployment</span> <span class="sy0">=</span> Get<span class="sy0">-</span>AzureDeployment <span class="sy0">-</span>ServiceName <span class="re0">$serviceName</span> <span class="sy0">-</span>Slot Staging
<span class="br0">&#125;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">$statusReady = "ReadyRole"
$statusStopped = "StoppedVM"

function Get-AllInstancesAreStatus($instances, $targetStatus){
    foreach ($instance in $instances)
    {
        if ($instance.InstanceStatus -ne $targetStatus)
        {
            return $false
        }
    }
    return $true
}

# ... ... ...

$deployment = Get-AzureDeployment -ServiceName $serviceName -Slot Staging

$waitTime = [System.Diagnostics.Stopwatch]::StartNew()
while ((Get-AllInstancesAreStatus $deployment.RoleInstanceList $statusReady) -eq $false)
{
    if($waitTime.Elapsed.TotalSeconds -gt $instancePollLimit){
        Throw "$instancePollLimit seconds elapsed without all the instances reaching 'ReadyRun'"
    }

    Start-Sleep -Seconds $instancePollRate

    $deployment = Get-AzureDeployment -ServiceName $serviceName -Slot Staging
}</pre></div></div>

<p><i>$serviceName is supplied as a script parameter.</i></p>
<p>While there are any instances that are not in &#8216;ReadyRun&#8217; status, we sleep for $instancepollRate seconds and continue to check again. If more than $instancePollLimit seconds go by while waiting, we&#8217;ll throw an error that will cause our script to exit.</p>
<p><b>This poll limit is necessary.</b> In the real world of Azure, you can have azure instances that do not boot for long periods of time. Additional logic has been added in Azure that is supposed to detect VMs not booting and replace them, but no one writes perfect code and I have experienced deployments hung for hours or more due to non-booting instances. We also can break our own code, resulting in rapidly re-booting instances that we would not want to deploy to production.</p>
<div style="background-color: #eeeeee; padding: .5em 1em; margin: .5em .5em 1.5em .5em;">
<a href="http://msdn.microsoft.com/en-us/library/dn495146.aspx" title="Get-AzureDeployment on MSDN">Get-AzureDeployment</a> gets the azure deployment details, including the list of instances with their names, current statuses, size, etc.
</div>
<h3>Promote the new deployment to Production, Suspend the old one</h3>
<p>Once the staging deployment is up and running, we can promote it to the Production slot.</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="powershell"><thead><tr><td colspan="2"  class="head">PowerShell</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
</pre></td><td class="de1"><pre class="de1">Move<span class="sy0">-</span>AzureDeployment <span class="sy0">-</span>ServiceName <span class="re0">$serviceName</span>
&nbsp;
<span class="re0">$deployment</span> <span class="sy0">=</span> Get<span class="sy0">-</span>AzureDeployment <span class="sy0">-</span>ServiceName <span class="re0">$serviceName</span> <span class="sy0">-</span>Slot Staging `
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw5">-ErrorAction</span> SilentlyContinue
&nbsp;
<span class="kw3">if</span><span class="br0">&#40;</span><span class="re0">$deployment</span>.DeploymentName <span class="kw4">-ne</span> <span class="re0">$null</span><span class="br0">&#41;</span><span class="br0">&#123;</span>
&nbsp; &nbsp; Set<span class="sy0">-</span>AzureDeployment <span class="kw5">-Status</span> <span class="sy0">-</span>ServiceName <span class="re0">$serviceName</span> <span class="sy0">-</span>Slot Staging `
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="sy0">-</span>NewStatus Suspended
<span class="br0">&#125;</span>
&nbsp;
Remove<span class="sy0">-</span>AzureAccount <span class="kw5">-Name</span> <span class="re0">$subscriptionName</span> <span class="kw5">-Force</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">Move-AzureDeployment -ServiceName $serviceName

$deployment = Get-AzureDeployment -ServiceName $serviceName -Slot Staging `
                                  -ErrorAction SilentlyContinue

if($deployment.DeploymentName -ne $null){
    Set-AzureDeployment -Status -ServiceName $serviceName -Slot Staging `
                        -NewStatus Suspended
}

Remove-AzureAccount -Name $subscriptionName -Force</pre></div></div>

<p><i>$serviceName is a parameter passed to the script</i></p>
<p>Performing the VIP swap is a simple command and the Powershell cmdlet turns that asynchronous method into a synchronous call for us, like so many of the others. Once the swap is complete, if we have a deployment in the Staging slot (the old Production one), we go ahead and tell it to suspend, but don&#8217;t wait for the individual instances to stop before exiting.</p>
<div style="background-color: #eeeeee; padding: .5em 1em; margin: .5em .5em 1.5em .5em;">
<a href="http://msdn.microsoft.com/en-us/library/dn495282.aspx" title="Move-AzureDeployment">Move-AzureDeployment</a> performs a VIP swap to swap the Staging and Production deployments.</p>
<p><a href="http://msdn.microsoft.com/en-us/library/dn495146.aspx" title="Get-AzureDeployment on MSDN">Get-AzureDeployment</a> gets the azure deployment details, including the list of instances with their names, current statuses, size, etc.</p>
<p><a href="http://msdn.microsoft.com/en-us/library/dn495140.aspx" title="Set-AzureDeployment">Set-AzureDeployment</a> with the -Status parameter is used to change the status of a given deployment, in this case Suspending the deployment in the Staging slot.</p>
<p><a href="http://msdn.microsoft.com/en-us/library/dn722529.aspx" title="Remove-AzureAccount on MSDN">Remove-AzureAccount</a> is used to remove the Azure subscription data from the Powershell session, basically the &#8220;logout&#8221; equivalent to Import-AzurePublishSettingsFile&#8217;s &#8220;login&#8221;
</div>
<h2>And we&#8217;re deployed&#8230;</h2>
<p>There is a full script available in the github repository here: <a href="https://github.com/tarwn/AzureHostedServiceDeploymentSample/blob/master/scripts/deployHostedService.ps1" title="/scripts/deployHostedService.ps1">/scripts/deployHostedService.ps1</a>. It is not clean and pretty, but it does have more output and error handling than the snippets above. Among other things, it does not clean out all those packages it uploads to blob storage and it most definitely should not be blindly pasted and used for your production environment.</p>
<p>While this may not be a production-ready script, it&#8217;s not far off (and I&#8217;ve used worse). The few cmdlets above should start to show the pattern that Microsoft used with this Powershell library. There are plenty of additional cmdlets to interact with storage services, VMs, affinity groups, HDInsight, Media Services&#8230;you name it, it&#8217;s probably in there.  </p>
<p>Writing this post, I am reminded how magical this all is. That sample project was only configured to ask for a single server, but I could just as easily have asked for 4 16-core servers and then added in additional web or worker roles, each with their own servers. And I could have done all of that without changing anything at all about this script and I would have had tons of servers deployed, load balanced, and ready to go with just a minor blip as I swapped them into production. I can remember projects with multi-hour manual deployment processes (and month or more system provisioning times), and we just replaced them with a one page script.</p>
<p>The best part is that, unlike some Microsoft frameworks/packages, this magic doesn&#8217;t just make a great demo, it also works in real production environments. </p>
]]></content:encoded>
			<wfw:commentRss>/index.php/enterprisedev/cloud/azure/automated-deployment-to-azure-hosted-services/feed/</wfw:commentRss>
		<slash:comments>0</slash:comments>
		</item>
		<item>
		<title>SSIS Deployment with PowerShell: Adding Environment References</title>
		<link>/index.php/datamgmt/dbadmin/mssqlserveradmin/ssis-deployment-with-powershell-adding/</link>
		<comments>/index.php/datamgmt/dbadmin/mssqlserveradmin/ssis-deployment-with-powershell-adding/#comments</comments>
		<pubDate>Wed, 21 Aug 2013 13:04:00 +0000</pubDate>
		<dc:creator><![CDATA[Koen Verbeeck]]></dc:creator>
				<category><![CDATA[Business Intelligence]]></category>
		<category><![CDATA[Microsoft SQL Server]]></category>
		<category><![CDATA[Microsoft SQL Server Admin]]></category>
		<category><![CDATA[SSIS]]></category>
		<category><![CDATA[catalog]]></category>
		<category><![CDATA[deployment]]></category>
		<category><![CDATA[powershell]]></category>
		<category><![CDATA[sql server]]></category>
		<category><![CDATA[ssis]]></category>
		<category><![CDATA[syndicated]]></category>

		<guid isPermaLink="false">/index.php/2013/08/ssis-deployment-with-powershell-adding/</guid>
		<description><![CDATA[This blog post explains how you can add environment references in a PowerShell deployment script for SSIS 2012.]]></description>
				<content:encoded><![CDATA[<p style="text-align: justify;">With the release of the revamped Integration Services in SQL Server 2012, a bunch of new deployment methods were introduced for the project deployment model. My article <a href="http://www.sqlservercentral.com/articles/Integration+Services+(SSIS)/101240/">SSIS Deployments with SQL Server 2012</a> gives an overview of these deployment methods. One of these methods is using PowerShell to deploy your project to the SSIS Catalog. Matt Masson (<a href="http://www.mattmasson.com/">blog</a> | <a href="https://twitter.com/mattmasson">twitter</a>) has an excellent blog post on the subject: <a href="http://www.mattmasson.com/2012/06/publish-to-ssis-catalog-using-powershell/">Publish to SSIS Catalog using PowerShell</a>.</p>
<p style="text-align: justify;">However, there’s one small step missing in the deployment script posted by Matt. I’ll use this blog article to post the entire deployment script, so that I have a full script online as an easy reference.</p>
<p style="text-align: justify;">I have a very simple SSIS project that I want to deploy to the Catalog. It contains only one package that transfers data from AdventureWorks to another database. It has two connection managers: one for each database. Nothing fancy here.</p>
<p style="text-align: justify;"><a href="/media/users/koenverbeeck/SSISDeploymentPowershell/ssisproject.png?mtime=1377025062"><img src="/wp-content/uploads/users/koenverbeeck/SSISDeploymentPowershell/ssisproject.png?mtime=1377025062" alt="" width="542" height="385" /></a></p>
<p><span style="text-align: justify;">When I deploy the project, I want to hook the OLE_TEST connection manager to an environment, so that I can easily change the destination server and/or database.</span></p>
<p style="text-align: justify;">The original script from Matt’s blog – modified for my project – looks like this:</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="powershell"><thead><tr><td colspan="2"  class="head">PowerShell</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
</pre></td><td class="de1"><pre class="de1"><span class="co1"># Variables</span>
<span class="re0">$SSIS_server</span> <span class="sy0">=</span><span class="st0">&quot;localhost&quot;</span>
<span class="re0">$ProjectFilePath</span> <span class="sy0">=</span> <span class="st0">&quot;E:TestSSIS2012PowerShell_TestPowerShell_TestbinDevelopmentPowerShell_Test.ispac&quot;</span>
&nbsp;
<span class="re0">$ProjectName</span> <span class="sy0">=</span> <span class="st0">&quot;PowerShell_Test&quot;</span>
<span class="re0">$FolderName</span> <span class="sy0">=</span> <span class="st0">&quot;PowerShellTest&quot;</span>
<span class="re0">$EnvironmentName</span> <span class="sy0">=</span> <span class="st0">&quot;Test2&quot;</span>
&nbsp;
<span class="co1"># Load the IntegrationServices Assembly</span>
<span class="br0">&#91;</span><span class="re4">System.Reflection.Assembly</span><span class="br0">&#93;</span>::<span class="re5">LoadWithPartialName</span><span class="br0">&#40;</span><span class="st0">&quot;Microsoft.SqlServer.Management.IntegrationServices&quot;</span><span class="br0">&#41;</span> <span class="sy0">|</span> <span class="kw1">Out-Null</span>;
&nbsp;
<span class="co1"># Store the IntegrationServices Assembly namespace to avoid typing it every time</span>
<span class="re0">$ISNamespace</span> <span class="sy0">=</span> <span class="st0">&quot;Microsoft.SqlServer.Management.IntegrationServices&quot;</span>
&nbsp;
<span class="kw1">Write-Host</span> <span class="st0">&quot;Connecting to server ...&quot;</span>
&nbsp;
<span class="co1"># Create a connection to the server</span>
<span class="re0">$sqlConnectionString</span> <span class="sy0">=</span> <span class="st0">&quot;Data Source=&quot;</span> <span class="sy0">+</span> <span class="re0">$SSIS_server</span> <span class="sy0">+</span> <span class="st0">&quot;;Initial Catalog=master;Integrated Security=SSPI;&quot;</span>
<span class="re0">$sqlConnection</span> <span class="sy0">=</span> <span class="kw1">New-Object</span> System.Data.SqlClient.SqlConnection <span class="re0">$sqlConnectionString</span>
&nbsp;
<span class="co1"># Create the Integration Services object</span>
<span class="re0">$integrationServices</span> <span class="sy0">=</span> <span class="kw1">New-Object</span> $ISNamespace<span class="st0">&quot;.IntegrationServices&quot;</span> <span class="re0">$sqlConnection</span>
&nbsp;
<span class="re0">$catalog</span> <span class="sy0">=</span> <span class="re0">$integrationServices</span>.Catalogs<span class="br0">&#91;</span><span class="st0">&quot;SSISDB&quot;</span><span class="br0">&#93;</span>
&nbsp;
<span class="kw1">Write-Host</span> <span class="st0">&quot;Creating Folder &quot;</span> <span class="re0">$FolderName</span> <span class="st0">&quot; ...&quot;</span>
&nbsp;
<span class="co1"># Create a new folder</span>
<span class="re0">$folder</span> <span class="sy0">=</span> <span class="kw1">New-Object</span> $ISNamespace<span class="st0">&quot;.CatalogFolder&quot;</span> <span class="br0">&#40;</span><span class="re0">$catalog</span><span class="sy0">,</span> <span class="re0">$FolderName</span><span class="sy0">,</span> <span class="st0">&quot;Folder description&quot;</span><span class="br0">&#41;</span>
<span class="re0">$folder</span>.Create<span class="br0">&#40;</span><span class="br0">&#41;</span>
&nbsp;
<span class="kw1">Write-Host</span> <span class="st0">&quot;Deploying &quot;</span> <span class="re0">$ProjectName</span> <span class="st0">&quot; project ...&quot;</span>
&nbsp;
<span class="co1"># Read the project file, and deploy it to the folder</span>
<span class="br0">&#91;</span><span class="re3">byte</span><span class="br0">&#91;</span><span class="br0">&#93;</span><span class="br0">&#93;</span> <span class="re0">$projectFile</span> <span class="sy0">=</span> <span class="br0">&#91;</span>System.IO.File<span class="br0">&#93;</span>::ReadAllBytes<span class="br0">&#40;</span><span class="re0">$ProjectFilePath</span><span class="br0">&#41;</span>
<span class="re0">$folder</span>.DeployProject<span class="br0">&#40;</span><span class="re0">$ProjectName</span><span class="sy0">,</span> <span class="re0">$projectFile</span><span class="br0">&#41;</span>
&nbsp;
<span class="kw1">Write-Host</span> <span class="st0">&quot;Creating environment ...&quot;</span>
&nbsp;
<span class="re0">$environment</span> <span class="sy0">=</span> <span class="kw1">New-Object</span> $ISNamespace<span class="st0">&quot;.EnvironmentInfo&quot;</span> <span class="br0">&#40;</span><span class="re0">$folder</span><span class="sy0">,</span> <span class="re0">$EnvironmentName</span><span class="sy0">,</span> <span class="st0">&quot;Description&quot;</span><span class="br0">&#41;</span>
<span class="re0">$environment</span>.Create<span class="br0">&#40;</span><span class="br0">&#41;</span> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;
&nbsp;
<span class="kw1">Write-Host</span> <span class="st0">&quot;Adding server variables ...&quot;</span>
&nbsp;
<span class="co1"># Adding variable to our environment</span>
<span class="co1"># Constructor args: variable name, type, default value, sensitivity, description</span>
<span class="re0">$environment</span>.Variables.Add<span class="br0">&#40;</span><span class="st0">&quot;ServerName&quot;</span><span class="sy0">,</span> <span class="br0">&#91;</span>System.TypeCode<span class="br0">&#93;</span>::String<span class="sy0">,</span> <span class="re0">$SSIS_server</span><span class="sy0">,</span> <span class="re0">$false</span><span class="sy0">,</span> <span class="st0">&quot;ServerName&quot;</span><span class="br0">&#41;</span>
<span class="re0">$environment</span>.Variables.Add<span class="br0">&#40;</span><span class="st0">&quot;DatabaseName&quot;</span><span class="sy0">,</span><span class="br0">&#91;</span>System.TypeCode<span class="br0">&#93;</span>::String<span class="sy0">,</span> <span class="st0">&quot;Test2&quot;</span><span class="sy0">,</span> <span class="re0">$false</span><span class="sy0">,</span><span class="st0">&quot;DatabaseName&quot;</span><span class="br0">&#41;</span>
<span class="re0">$environment</span>.Alter<span class="br0">&#40;</span><span class="br0">&#41;</span>
&nbsp;
<span class="kw1">Write-Host</span> <span class="st0">&quot;Adding environment reference to project ...&quot;</span>
&nbsp;
<span class="co1"># making project refer to this environment</span>
<span class="re0">$project</span> <span class="sy0">=</span> <span class="re0">$folder</span>.Projects<span class="br0">&#91;</span><span class="re0">$ProjectName</span><span class="br0">&#93;</span>
<span class="re0">$project</span>.References.Add<span class="br0">&#40;</span><span class="re0">$EnvironmentName</span><span class="sy0">,</span> <span class="re0">$folder</span>.Name<span class="br0">&#41;</span>
<span class="re0">$project</span>.Alter<span class="br0">&#40;</span><span class="br0">&#41;</span> 
&nbsp;
<span class="kw1">Write-Host</span> <span class="st0">&quot;All done.&quot;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse"># Variables
$SSIS_server ="localhost"
$ProjectFilePath = "E:TestSSIS2012PowerShell_TestPowerShell_TestbinDevelopmentPowerShell_Test.ispac"

$ProjectName = "PowerShell_Test"
$FolderName = "PowerShellTest"
$EnvironmentName = "Test2"
 
# Load the IntegrationServices Assembly
[System.Reflection.Assembly]::LoadWithPartialName("Microsoft.SqlServer.Management.IntegrationServices") | Out-Null;
 
# Store the IntegrationServices Assembly namespace to avoid typing it every time
$ISNamespace = "Microsoft.SqlServer.Management.IntegrationServices"
 
Write-Host "Connecting to server ..."
 
# Create a connection to the server
$sqlConnectionString = "Data Source=" + $SSIS_server + ";Initial Catalog=master;Integrated Security=SSPI;"
$sqlConnection = New-Object System.Data.SqlClient.SqlConnection $sqlConnectionString
 
# Create the Integration Services object
$integrationServices = New-Object $ISNamespace".IntegrationServices" $sqlConnection

$catalog = $integrationServices.Catalogs["SSISDB"]
 
Write-Host "Creating Folder " $FolderName " ..."
 
# Create a new folder
$folder = New-Object $ISNamespace".CatalogFolder" ($catalog, $FolderName, "Folder description")
$folder.Create()
 
Write-Host "Deploying " $ProjectName " project ..."
 
# Read the project file, and deploy it to the folder
[byte[]] $projectFile = [System.IO.File]::ReadAllBytes($ProjectFilePath)
$folder.DeployProject($ProjectName, $projectFile)
 
Write-Host "Creating environment ..."
 
$environment = New-Object $ISNamespace".EnvironmentInfo" ($folder, $EnvironmentName, "Description")
$environment.Create()            
 
Write-Host "Adding server variables ..."
 
# Adding variable to our environment
# Constructor args: variable name, type, default value, sensitivity, description
$environment.Variables.Add("ServerName", [System.TypeCode]::String, $SSIS_server, $false, "ServerName")
$environment.Variables.Add("DatabaseName",[System.TypeCode]::String, "Test2", $false,"DatabaseName")
$environment.Alter()
 
Write-Host "Adding environment reference to project ..."
 
# making project refer to this environment
$project = $folder.Projects[$ProjectName]
$project.References.Add($EnvironmentName, $folder.Name)
$project.Alter() 
 
Write-Host "All done."</pre></div></div>

<p style="text-align: justify;">The script deploys the project to the Catalog, creates an environment and links the environment to the project. The environment has two variables: one to set the server name and one to set the database. Let’s inspect the results. When you right-click on the project, you can choose <em>Configure</em>. In the Configure window, you can see the connection managers used in the project in the Connection Managers tab. When we take a look at the Initial Catalog property of the OLE_TEST connection manager, you can see it is not yet linked to an environment variable.</p>
<p style="text-align: justify;"><a href="/media/users/koenverbeeck/SSISDeploymentPowershell/configureProject_before.png?mtime=1377025062"><img src="/wp-content/uploads/users/koenverbeeck/SSISDeploymentPowershell/configureProject_before.png?mtime=1377025062" alt="" width="785" height="536" /></a></p>
<p><span style="text-align: justify;">Instead, it is still linked to the default design-time value. Remark that you can configure a package/project with an environment without actually using parameters. This is because a few properties of a connection manager are linked to parameters behind the scenes. For example, the Initial Catalog property is linked to the parameter with the name </span><em>[CM.&lt;connection manager name&gt;.InitialCatalog]</em><span style="text-align: justify;">. You can find the parameter name at the top of the </span><em>Set Parameter Value</em><span style="text-align: justify;"> dialog box.</span></p>
<p style="text-align: justify;">To link the environment variables to the connection manager, we need to add just a few lines to the script:</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="powershell"><thead><tr><td colspan="2"  class="head">PowerShell</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
</pre></td><td class="de1"><pre class="de1"><span class="kw1">Write-Host</span> <span class="st0">&quot;Setting environment variable on package connection string ...&quot;</span>
<span class="re0">$ssisPackage</span> <span class="sy0">=</span> <span class="re0">$project</span>.Packages.Item<span class="br0">&#40;</span><span class="st0">&quot;PowerShellTest.dtsx&quot;</span><span class="br0">&#41;</span>
&nbsp;
<span class="re0">$parServerName</span> <span class="sy0">=</span> <span class="st0">&quot;CM.OLE_Test.ServerName&quot;</span>
<span class="re0">$ssisPackage</span>.Parameters<span class="br0">&#91;</span><span class="re0">$parServerName</span><span class="br0">&#93;</span>.<span class="kw2">Set</span><span class="br0">&#40;</span><span class="st0">&quot;Referenced&quot;</span><span class="sy0">,</span><span class="st0">&quot;ServerName&quot;</span><span class="br0">&#41;</span>
&nbsp;
<span class="re0">$parDatabaseName</span> <span class="sy0">=</span> <span class="st0">&quot;CM.OLE_Test.InitialCatalog&quot;</span>
<span class="re0">$ssisPackage</span>.Parameters<span class="br0">&#91;</span><span class="re0">$parDatabaseName</span><span class="br0">&#93;</span>.<span class="kw2">Set</span><span class="br0">&#40;</span><span class="st0">&quot;Referenced&quot;</span><span class="sy0">,</span><span class="st0">&quot;DatabaseName&quot;</span><span class="br0">&#41;</span>
&nbsp;
<span class="re0">$ssisPackage</span>.Alter<span class="br0">&#40;</span><span class="br0">&#41;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">Write-Host "Setting environment variable on package connection string ..."
$ssisPackage = $project.Packages.Item("PowerShellTest.dtsx")

$parServerName = "CM.OLE_Test.ServerName"
$ssisPackage.Parameters[$parServerName].Set("Referenced","ServerName")

$parDatabaseName = "CM.OLE_Test.InitialCatalog"
$ssisPackage.Parameters[$parDatabaseName].Set("Referenced","DatabaseName")

$ssisPackage.Alter()</pre></div></div>

<p style="text-align: justify;">When you deploy the project to the server with these adjustments, we get the result we want:</p>
<p style="text-align: justify;"><a href="/media/users/koenverbeeck/SSISDeploymentPowershell/configureProject_after.png?mtime=1377025061"><img src="/wp-content/uploads/users/koenverbeeck/SSISDeploymentPowershell/configureProject_after.png?mtime=1377025061" alt="" width="747" height="375" /></a></p>
<p><span style="text-align: justify;">The environment variables are now linked to the two properties of the connection manager. When you run the package and choose the environment, the data is transferred to another database different from the one configured in the package, due to the reconfiguring of the connection manager by the environment variables.</span></p>
<p style="text-align: justify;"><a href="/media/users/koenverbeeck/SSISDeploymentPowershell/executePackage.png?mtime=1377025062"><img src="/wp-content/uploads/users/koenverbeeck/SSISDeploymentPowershell/executePackage.png?mtime=1377025062" alt="" width="530" height="363" /></a></p>
<p><span style="text-align: justify;">To wrap-up this post, here’s the entire deployment script for easier copy-paste:</span></p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="powershell"><thead><tr><td colspan="2"  class="head">PowerShell</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
</pre></td><td class="de1"><pre class="de1"><span class="co1"># Variables</span>
<span class="re0">$SSIS_server</span> <span class="sy0">=</span><span class="st0">&quot;localhost&quot;</span>
<span class="re0">$ProjectFilePath</span> <span class="sy0">=</span> <span class="st0">&quot;E:TestSSIS2012PowerShell_TestPowerShell_TestbinDevelopmentPowerShell_Test.ispac&quot;</span>
&nbsp;
<span class="re0">$ProjectName</span> <span class="sy0">=</span> <span class="st0">&quot;PowerShell_Test&quot;</span>
<span class="re0">$FolderName</span> <span class="sy0">=</span> <span class="st0">&quot;PowerShellTest&quot;</span>
<span class="re0">$EnvironmentName</span> <span class="sy0">=</span> <span class="st0">&quot;Test2&quot;</span>
&nbsp;
<span class="co1"># Load the IntegrationServices Assembly</span>
<span class="br0">&#91;</span><span class="re4">System.Reflection.Assembly</span><span class="br0">&#93;</span>::<span class="re5">LoadWithPartialName</span><span class="br0">&#40;</span><span class="st0">&quot;Microsoft.SqlServer.Management.IntegrationServices&quot;</span><span class="br0">&#41;</span> <span class="sy0">|</span> <span class="kw1">Out-Null</span>;
&nbsp;
<span class="co1"># Store the IntegrationServices Assembly namespace to avoid typing it every time</span>
<span class="re0">$ISNamespace</span> <span class="sy0">=</span> <span class="st0">&quot;Microsoft.SqlServer.Management.IntegrationServices&quot;</span>
&nbsp;
<span class="kw1">Write-Host</span> <span class="st0">&quot;Connecting to server ...&quot;</span>
&nbsp;
<span class="co1"># Create a connection to the server</span>
<span class="re0">$sqlConnectionString</span> <span class="sy0">=</span> <span class="st0">&quot;Data Source=&quot;</span> <span class="sy0">+</span> <span class="re0">$SSIS_server</span> <span class="sy0">+</span> <span class="st0">&quot;;Initial Catalog=master;Integrated Security=SSPI;&quot;</span>
<span class="re0">$sqlConnection</span> <span class="sy0">=</span> <span class="kw1">New-Object</span> System.Data.SqlClient.SqlConnection <span class="re0">$sqlConnectionString</span>
&nbsp;
<span class="co1"># Create the Integration Services object</span>
<span class="re0">$integrationServices</span> <span class="sy0">=</span> <span class="kw1">New-Object</span> $ISNamespace<span class="st0">&quot;.IntegrationServices&quot;</span> <span class="re0">$sqlConnection</span>
&nbsp;
<span class="re0">$catalog</span> <span class="sy0">=</span> <span class="re0">$integrationServices</span>.Catalogs<span class="br0">&#91;</span><span class="st0">&quot;SSISDB&quot;</span><span class="br0">&#93;</span>
&nbsp;
<span class="kw1">Write-Host</span> <span class="st0">&quot;Creating Folder &quot;</span> <span class="re0">$FolderName</span> <span class="st0">&quot; ...&quot;</span>
&nbsp;
<span class="co1"># Create a new folder</span>
<span class="re0">$folder</span> <span class="sy0">=</span> <span class="kw1">New-Object</span> $ISNamespace<span class="st0">&quot;.CatalogFolder&quot;</span> <span class="br0">&#40;</span><span class="re0">$catalog</span><span class="sy0">,</span> <span class="re0">$FolderName</span><span class="sy0">,</span> <span class="st0">&quot;Folder description&quot;</span><span class="br0">&#41;</span>
<span class="re0">$folder</span>.Create<span class="br0">&#40;</span><span class="br0">&#41;</span>
&nbsp;
<span class="kw1">Write-Host</span> <span class="st0">&quot;Deploying &quot;</span> <span class="re0">$ProjectName</span> <span class="st0">&quot; project ...&quot;</span>
&nbsp;
<span class="co1"># Read the project file, and deploy it to the folder</span>
<span class="br0">&#91;</span><span class="re3">byte</span><span class="br0">&#91;</span><span class="br0">&#93;</span><span class="br0">&#93;</span> <span class="re0">$projectFile</span> <span class="sy0">=</span> <span class="br0">&#91;</span>System.IO.File<span class="br0">&#93;</span>::ReadAllBytes<span class="br0">&#40;</span><span class="re0">$ProjectFilePath</span><span class="br0">&#41;</span>
<span class="re0">$folder</span>.DeployProject<span class="br0">&#40;</span><span class="re0">$ProjectName</span><span class="sy0">,</span> <span class="re0">$projectFile</span><span class="br0">&#41;</span>
&nbsp;
<span class="kw1">Write-Host</span> <span class="st0">&quot;Creating environment ...&quot;</span>
&nbsp;
<span class="re0">$environment</span> <span class="sy0">=</span> <span class="kw1">New-Object</span> $ISNamespace<span class="st0">&quot;.EnvironmentInfo&quot;</span> <span class="br0">&#40;</span><span class="re0">$folder</span><span class="sy0">,</span> <span class="re0">$EnvironmentName</span><span class="sy0">,</span> <span class="st0">&quot;Description&quot;</span><span class="br0">&#41;</span>
<span class="re0">$environment</span>.Create<span class="br0">&#40;</span><span class="br0">&#41;</span> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;
&nbsp;
<span class="kw1">Write-Host</span> <span class="st0">&quot;Adding server variables ...&quot;</span>
&nbsp;
<span class="co1"># Adding variable to our environment</span>
<span class="co1"># Constructor args: variable name, type, default value, sensitivity, description</span>
<span class="re0">$environment</span>.Variables.Add<span class="br0">&#40;</span><span class="st0">&quot;ServerName&quot;</span><span class="sy0">,</span> <span class="br0">&#91;</span>System.TypeCode<span class="br0">&#93;</span>::String<span class="sy0">,</span> <span class="re0">$SSIS_server</span><span class="sy0">,</span> <span class="re0">$false</span><span class="sy0">,</span> <span class="st0">&quot;ServerName&quot;</span><span class="br0">&#41;</span>
<span class="re0">$environment</span>.Variables.Add<span class="br0">&#40;</span><span class="st0">&quot;DatabaseName&quot;</span><span class="sy0">,</span><span class="br0">&#91;</span>System.TypeCode<span class="br0">&#93;</span>::String<span class="sy0">,</span> <span class="st0">&quot;Test2&quot;</span><span class="sy0">,</span> <span class="re0">$false</span><span class="sy0">,</span><span class="st0">&quot;DatabaseName&quot;</span><span class="br0">&#41;</span>
<span class="re0">$environment</span>.Alter<span class="br0">&#40;</span><span class="br0">&#41;</span>
&nbsp;
<span class="kw1">Write-Host</span> <span class="st0">&quot;Adding environment reference to project ...&quot;</span>
&nbsp;
<span class="co1"># making project refer to this environment</span>
<span class="re0">$project</span> <span class="sy0">=</span> <span class="re0">$folder</span>.Projects<span class="br0">&#91;</span><span class="re0">$ProjectName</span><span class="br0">&#93;</span>
<span class="re0">$project</span>.References.Add<span class="br0">&#40;</span><span class="re0">$EnvironmentName</span><span class="sy0">,</span> <span class="re0">$folder</span>.Name<span class="br0">&#41;</span>
<span class="re0">$project</span>.Alter<span class="br0">&#40;</span><span class="br0">&#41;</span> 
&nbsp;
<span class="kw1">Write-Host</span> <span class="st0">&quot;Setting environment variable on package connection string ...&quot;</span>
<span class="re0">$ssisPackage</span> <span class="sy0">=</span> <span class="re0">$project</span>.Packages.Item<span class="br0">&#40;</span><span class="st0">&quot;PowerShellTest.dtsx&quot;</span><span class="br0">&#41;</span>
&nbsp;
<span class="re0">$parServerName</span> <span class="sy0">=</span> <span class="st0">&quot;CM.OLE_Test.ServerName&quot;</span>
<span class="re0">$ssisPackage</span>.Parameters<span class="br0">&#91;</span><span class="re0">$parServerName</span><span class="br0">&#93;</span>.<span class="kw2">Set</span><span class="br0">&#40;</span><span class="st0">&quot;Referenced&quot;</span><span class="sy0">,</span><span class="st0">&quot;ServerName&quot;</span><span class="br0">&#41;</span>
&nbsp;
<span class="re0">$parDatabaseName</span> <span class="sy0">=</span> <span class="st0">&quot;CM.OLE_Test.InitialCatalog&quot;</span>
<span class="re0">$ssisPackage</span>.Parameters<span class="br0">&#91;</span><span class="re0">$parDatabaseName</span><span class="br0">&#93;</span>.<span class="kw2">Set</span><span class="br0">&#40;</span><span class="st0">&quot;Referenced&quot;</span><span class="sy0">,</span><span class="st0">&quot;DatabaseName&quot;</span><span class="br0">&#41;</span>
&nbsp;
<span class="re0">$ssisPackage</span>.Alter<span class="br0">&#40;</span><span class="br0">&#41;</span>
&nbsp;
<span class="kw1">Write-Host</span> <span class="st0">&quot;All done.&quot;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse"># Variables
$SSIS_server ="localhost"
$ProjectFilePath = "E:TestSSIS2012PowerShell_TestPowerShell_TestbinDevelopmentPowerShell_Test.ispac"

$ProjectName = "PowerShell_Test"
$FolderName = "PowerShellTest"
$EnvironmentName = "Test2"
 
# Load the IntegrationServices Assembly
[System.Reflection.Assembly]::LoadWithPartialName("Microsoft.SqlServer.Management.IntegrationServices") | Out-Null;
 
# Store the IntegrationServices Assembly namespace to avoid typing it every time
$ISNamespace = "Microsoft.SqlServer.Management.IntegrationServices"
 
Write-Host "Connecting to server ..."
 
# Create a connection to the server
$sqlConnectionString = "Data Source=" + $SSIS_server + ";Initial Catalog=master;Integrated Security=SSPI;"
$sqlConnection = New-Object System.Data.SqlClient.SqlConnection $sqlConnectionString
 
# Create the Integration Services object
$integrationServices = New-Object $ISNamespace".IntegrationServices" $sqlConnection

$catalog = $integrationServices.Catalogs["SSISDB"]
 
Write-Host "Creating Folder " $FolderName " ..."
 
# Create a new folder
$folder = New-Object $ISNamespace".CatalogFolder" ($catalog, $FolderName, "Folder description")
$folder.Create()
 
Write-Host "Deploying " $ProjectName " project ..."
 
# Read the project file, and deploy it to the folder
[byte[]] $projectFile = [System.IO.File]::ReadAllBytes($ProjectFilePath)
$folder.DeployProject($ProjectName, $projectFile)
 
Write-Host "Creating environment ..."
 
$environment = New-Object $ISNamespace".EnvironmentInfo" ($folder, $EnvironmentName, "Description")
$environment.Create()            
 
Write-Host "Adding server variables ..."
 
# Adding variable to our environment
# Constructor args: variable name, type, default value, sensitivity, description
$environment.Variables.Add("ServerName", [System.TypeCode]::String, $SSIS_server, $false, "ServerName")
$environment.Variables.Add("DatabaseName",[System.TypeCode]::String, "Test2", $false,"DatabaseName")
$environment.Alter()
 
Write-Host "Adding environment reference to project ..."
 
# making project refer to this environment
$project = $folder.Projects[$ProjectName]
$project.References.Add($EnvironmentName, $folder.Name)
$project.Alter() 
 
Write-Host "Setting environment variable on package connection string ..."
$ssisPackage = $project.Packages.Item("PowerShellTest.dtsx")

$parServerName = "CM.OLE_Test.ServerName"
$ssisPackage.Parameters[$parServerName].Set("Referenced","ServerName")

$parDatabaseName = "CM.OLE_Test.InitialCatalog"
$ssisPackage.Parameters[$parDatabaseName].Set("Referenced","DatabaseName")

$ssisPackage.Alter()

Write-Host "All done."</pre></div></div>

]]></content:encoded>
			<wfw:commentRss>/index.php/datamgmt/dbadmin/mssqlserveradmin/ssis-deployment-with-powershell-adding/feed/</wfw:commentRss>
		<slash:comments>3</slash:comments>
		</item>
		<item>
		<title>Deploying Database Changes with PowerShell</title>
		<link>/index.php/datamgmt/dbprogramming/deploying-database-changes-with-powershell/</link>
		<comments>/index.php/datamgmt/dbprogramming/deploying-database-changes-with-powershell/#comments</comments>
		<pubDate>Fri, 17 May 2013 07:36:00 +0000</pubDate>
		<dc:creator><![CDATA[Eli Weinstock-Herman (tarwn)]]></dc:creator>
				<category><![CDATA[Database Programming]]></category>
		<category><![CDATA[Microsoft SQL Server]]></category>
		<category><![CDATA[deployment]]></category>
		<category><![CDATA[powershell]]></category>
		<category><![CDATA[sql]]></category>

		<guid isPermaLink="false">/index.php/2013/05/deploying-database-changes-with-powershell/</guid>
		<description><![CDATA[Recently, while working on a personal project, I found myself needing a lightweight way to deploy database changes to multiple environments. In the past I have used a wide range of methods, ranging from applying the changes manually to applying changes via a diff tool (SQL Compare), to automatically applying manually created change scripts, to automatically applying diff scripts that were automatically generated, to working directly in production..er, pretend you didn't see that one.]]></description>
				<content:encoded><![CDATA[<p>Recently, while working on a personal project, I found myself needing a lightweight way to deploy database changes to multiple environments. In the past I have used a wide range of methods, ranging from applying the changes manually to applying changes via a diff tool (SQL Compare), to automatically applying manually created change scripts, to automatically applying diff scripts that were automatically generated, to working directly in production..er, pretend you didn&#8217;t see that one. </p>
<h2>Why not _________ tool?</h2>
<p>There are a lot of tools out there to handle database deployments, but this is a small project that I am building incrementally as a minimum viable product. Rather than tie up a bunch of time researching and experimenting with database deployment tools early on, I decided to do something simple that would work for the time being and free me up to work on the actual product. </p>
<p>What I want from the deployment is to:</p>
<ol>
<li>Spend as little time on this as possible</li>
<li>Work against SQL Azure and a local 2008 R2 Server</li>
<li>Call it from TeamCity for a local server or a remote one</li>
<li>Produce readable output for TeamCity logs</li>
<li>Create the databases and users from the ground up</li>
<li>Include randomly generated data</li>
<li>Manage scripts for 2 independent databases in the same build</li>
<li>Allow real SQL (I&#8217;m not scared of SQL and I don&#8217;t want to learn a code abstraction just to deploy changes)</li>
<li>Not worry about rollbacks. I am deploying small changes and if something breaks I&#8217;ll be charging forward</li>
<li>Not expose credentials, as the code will be visible to the public</li>
<li>Be replaceable. I might replace it with a tool one day, so keep the deployment logic separate from the application</li>
</ol>
<p>Looking back at this list and what I eventually created, I probably could have used something like <a href="https://github.com/brunomlopes/dbdeploy.net" "dbdploy on github">DBDeploy</a>. The scripts I created ended up taking a very similar approach.</p>
<h2>The Deployment Scripts</h2>
<p>My deployment consists of 4 PowerShell scripts:</p>
<ul>
<li><strong>ApplyDatabaseUpdates.ps1</strong> &#8211; Responsible for generically applying changes from a folder to a specified database</li>
<li><strong>UpdateCoreDatabase.ps1</strong> &#8211; Responsible for the application&#8217;s Core Database, calls ApplyDatabaseUpdates</li>
<li><strong>UpdateSampleDatabase.ps1</strong> &#8211; Response for the application&#8217;s Sample Database, calls ApplyDatabaseUpdates</li>
<li><strong>RunLocally.ps1</strong> &#8211; Executes the two Update scripts against the local database on my development machine(s)</li>
</ul>
<p>This project has been spread out over 6 months, intermixed with life, other projects, blog posts, etc. Along the way I also upgraded my local development machine to SQL Server 2012 but my main test database server is on 2008 still and my release environment is Azure Database/SQL Azure/(whatever the name is this week).</p>
<h3>ApplyDatabaseUpdates.ps1</h3>
<p>The purpose of the ApplyDatabaseUpdates script is to apply all of the scripts in a specified folder to the specified server. To do this it creates a tracking table on the target database, then iterates through the contents of the folder, building a script containing any files that were not previously logged in the tracking table.</p>
<div style="text-align:center; color: #666666;">
   <img src="http://tiernok.com/LTDBlog/DatabaseDeployment/SQLScripts.png" alt="Core DB Scripts folder" /><br />
   Core Database Scripts Folder
</div>
<p>The deployment script wraps the contents of each script file in an EXECUTE statement, followed by an INSERT to add it to the tracking table for the database.</p>
<p><b><a href="https://github.com/tarwn/SQLisHard/blob/master/Database/ApplyDatabaseUpdates.ps1" title="View on github">ApplyDatabaseUpdates.ps1</a></b></p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="powershell"><thead><tr><td colspan="2"  class="head">PowerShell</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72
73
74
75
76
77
78
79
80
81
82
83
</pre></td><td class="de1"><pre class="de1"><span class="kw3">function</span> ApplyDatabaseUpdates
<span class="br0">&#123;</span>
&nbsp; &nbsp; <span class="kw3">param</span> <span class="br0">&#40;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#91;</span>parameter<span class="br0">&#40;</span>Mandatory<span class="sy0">=</span><span class="re0">$true</span><span class="br0">&#41;</span><span class="br0">&#93;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#91;</span><span class="re3">string</span><span class="br0">&#93;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="re0">$UpdatesFolder</span><span class="sy0">,</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#91;</span>parameter<span class="br0">&#40;</span>Mandatory<span class="sy0">=</span><span class="re0">$true</span><span class="br0">&#41;</span><span class="br0">&#93;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#91;</span><span class="re3">string</span><span class="br0">&#93;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="re0">$Server</span><span class="sy0">,</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#91;</span>parameter<span class="br0">&#40;</span>Mandatory<span class="sy0">=</span><span class="re0">$true</span><span class="br0">&#41;</span><span class="br0">&#93;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#91;</span><span class="re3">string</span><span class="br0">&#93;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="re0">$Database</span><span class="sy0">,</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#91;</span>parameter<span class="br0">&#40;</span>Mandatory<span class="sy0">=</span><span class="re0">$true</span><span class="br0">&#41;</span><span class="br0">&#93;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#91;</span><span class="re3">string</span><span class="br0">&#93;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="re0">$AdminUserName</span><span class="sy0">,</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#91;</span>parameter<span class="br0">&#40;</span>Mandatory<span class="sy0">=</span><span class="re0">$true</span><span class="br0">&#41;</span><span class="br0">&#93;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#91;</span><span class="re3">string</span><span class="br0">&#93;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="re0">$AdminPassword</span>
&nbsp; &nbsp; <span class="br0">&#41;</span>
&nbsp;
&nbsp; &nbsp; <span class="re0">$path</span> <span class="sy0">=</span> <span class="br0">&#40;</span><span class="kw1">Get-Location</span><span class="br0">&#41;</span>.Path
&nbsp;
&nbsp; &nbsp; <span class="co1"># For SQL 2008 - load the modules</span>
&nbsp; &nbsp; try<span class="br0">&#123;</span> &nbsp; &nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw3">if</span> <span class="br0">&#40;</span> <span class="br0">&#40;</span><span class="kw1">Get-PSSnapin</span> <span class="kw5">-Name</span> SqlServerCmdletSnapin100 <span class="kw5">-ErrorAction</span> SilentlyContinue<span class="br0">&#41;</span> <span class="kw4">-eq</span> <span class="re0">$null</span> <span class="kw4">-and</span> <span class="br0">&#40;</span><span class="kw1">Get-PSSnapin</span> <span class="kw5">-Registered</span> <span class="kw5">-Name</span> SqlServerCmdletSnapin100 <span class="kw5">-ErrorAction</span> SilentlyContinue<span class="br0">&#41;</span> <span class="kw4">-ne</span> <span class="re0">$null</span><span class="br0">&#41;</span><span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">Add-PSSnapin</span> SqlServerCmdletSnapin100 <span class="kw5">-ErrorAction</span> SilentlyContinue
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">Add-PSSnapin</span> SqlServerProviderSnapin100 <span class="kw5">-ErrorAction</span> SilentlyContinue
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp; &nbsp; catch<span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">Write-Error</span> <span class="st0">&quot;Powershell Script error: $_&quot;</span> <span class="sy0">-</span>EA Stop
&nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp;
&nbsp; &nbsp; <span class="co1">#updates tracking</span>
&nbsp; &nbsp; try<span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">Write-Host</span> <span class="st0">&quot;Creating Update Tracking Table If Not Exists&quot;</span>
&nbsp; &nbsp; &nbsp; &nbsp; Invoke<span class="sy0">-</span>Sqlcmd <span class="kw5">-Query</span> <span class="st0">&quot;IF NOT EXISTS (SELECT 1 FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME = 'UpdateTracking') CREATE TABLE UpdateTracking (UpdateTrackingKey int IDENTITY(1,1) PRIMARY KEY, Name varchar(255) NOT NULL, Applied DateTime NOT NULL);&quot;</span> <span class="sy0">-</span>ServerInstance <span class="st0">&quot;$Server&quot;</span> <span class="sy0">-</span>Username <span class="st0">&quot;$AdminUserName&quot;</span> <span class="sy0">-</span>Password <span class="st0">&quot;$AdminPassword&quot;</span> <span class="sy0">-</span>Database <span class="st0">&quot;$Database&quot;</span> <span class="kw5">-ErrorAction</span> Stop
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">Write-Host</span> <span class="st0">&quot;Done&quot;</span>
&nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp; &nbsp; catch<span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">Write-Error</span> <span class="st0">&quot;Powershell Script error: $_&quot;</span> <span class="sy0">-</span>EA Stop
&nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp;
&nbsp; &nbsp; <span class="co1">#database updates</span>
&nbsp; &nbsp; <span class="re0">$outputPath</span> <span class="sy0">=</span> <span class="st0">&quot;$pathUpdatesBatch.sql&quot;</span>
&nbsp; &nbsp; <span class="re0">$stream</span> <span class="sy0">=</span> <span class="br0">&#91;</span>System.IO.StreamWriter<span class="br0">&#93;</span> <span class="st0">&quot;$outputPath&quot;</span>
&nbsp; &nbsp; <span class="re0">$fileUpdates</span> <span class="sy0">=</span> <span class="kw1">Get-ChildItem</span> <span class="st0">&quot;$UpdatesFolder&quot;</span>
&nbsp; &nbsp; <span class="re0">$datestamp</span> <span class="sy0">=</span> $<span class="br0">&#40;</span><span class="kw1">get-date</span> <span class="kw4">-f</span> <span class="st0">&quot;yyyy-MM-dd HH:mm&quot;</span><span class="br0">&#41;</span>
&nbsp;
&nbsp; &nbsp; <span class="re0">$stream</span>.WriteLine<span class="br0">&#40;</span><span class="st0">&quot;/* SQL Core Updates - Updated $datestamp */&quot;</span><span class="br0">&#41;</span>
&nbsp; &nbsp; <span class="re0">$stream</span>.WriteLine<span class="br0">&#40;</span><span class="st0">&quot;BEGIN TRANSACTION&quot;</span><span class="br0">&#41;</span>
&nbsp;
&nbsp; &nbsp; <span class="kw3">foreach</span><span class="br0">&#40;</span><span class="re0">$file</span> <span class="kw3">in</span> <span class="re0">$fileUpdates</span><span class="br0">&#41;</span>
&nbsp; &nbsp; <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="re0">$name</span> <span class="sy0">=</span> <span class="br0">&#40;</span><span class="re0">$file</span>.Name<span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="re0">$namewe</span> <span class="sy0">=</span> <span class="br0">&#40;</span><span class="br0">&#91;</span>System.IO.Path<span class="br0">&#93;</span>::GetFileNameWithoutExtension<span class="br0">&#40;</span><span class="re0">$name</span><span class="br0">&#41;</span><span class="br0">&#41;</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; <span class="re0">$stream</span>.WriteLine<span class="br0">&#40;</span><span class="st0">&quot;&quot;</span><span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="re0">$stream</span>.WriteLine<span class="br0">&#40;</span><span class="st0">&quot;/* File: $name */&quot;</span><span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="re0">$stream</span>.WriteLine<span class="br0">&#40;</span><span class="st0">&quot;IF NOT EXISTS (SELECT 1 FROM UpdateTracking WHERE Name = '$namewe')&quot;</span><span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="re0">$stream</span>.WriteLine<span class="br0">&#40;</span><span class="st0">&quot;BEGIN&quot;</span><span class="br0">&#41;</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; <span class="re0">$stream</span>.WriteLine<span class="br0">&#40;</span><span class="st0">&quot;<span class="es0">`t</span>Print 'Applying Update: $namewe'&quot;</span><span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="re0">$stream</span>.WriteLine<span class="br0">&#40;</span><span class="st0">&quot;<span class="es0">`t</span>EXEC('&quot;</span><span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#40;</span><span class="kw1">Get-Content</span> <span class="st0">&quot;$UpdatesFolder$name&quot;</span><span class="br0">&#41;</span> <span class="sy0">|</span> <span class="sy0">%</span> <span class="br0">&#123;</span><span class="kw6">$_</span> <span class="kw4">-replace</span> <span class="st0">&quot;'&quot;</span><span class="sy0">,</span> <span class="st0">&quot;''&quot;</span><span class="br0">&#125;</span> <span class="sy0">|</span> <span class="sy0">%</span> <span class="br0">&#123;</span><span class="re0">$stream</span>.WriteLine<span class="br0">&#40;</span><span class="st0">&quot;<span class="es0">`t</span><span class="es0">`t</span>$_&quot;</span><span class="br0">&#41;</span><span class="br0">&#125;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="re0">$stream</span>.WriteLine<span class="br0">&#40;</span><span class="st0">&quot;<span class="es0">`t</span>');&quot;</span><span class="br0">&#41;</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; <span class="re0">$stream</span>.WriteLine<span class="br0">&#40;</span><span class="st0">&quot;<span class="es0">`t</span>INSERT INTO UpdateTracking(Name, Applied) SELECT '$namewe', GETUTCDATE();&quot;</span><span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="re0">$stream</span>.WriteLine<span class="br0">&#40;</span><span class="st0">&quot;END&quot;</span><span class="br0">&#41;</span>
&nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp;
&nbsp; &nbsp; <span class="re0">$stream</span>.WriteLine<span class="br0">&#40;</span><span class="st0">&quot;COMMIT TRANSACTION&quot;</span><span class="br0">&#41;</span>
&nbsp; &nbsp; <span class="re0">$stream</span>.Close<span class="br0">&#40;</span><span class="br0">&#41;</span>
&nbsp; &nbsp; <span class="kw1">Write-Host</span> <span class="st0">&quot;Update Script Created.&quot;</span>
&nbsp;
&nbsp; &nbsp; <span class="kw1">Write-Host</span> <span class="st0">&quot;Running updates...&quot;</span>
&nbsp;
&nbsp; &nbsp; Invoke<span class="sy0">-</span>SqlCmd <span class="sy0">-</span>InputFile <span class="st0">&quot;$outputPath&quot;</span> <span class="sy0">-</span>ServerInstance <span class="st0">&quot;$Server&quot;</span> <span class="sy0">-</span>Username <span class="st0">&quot;$AdminUserName&quot;</span> <span class="sy0">-</span>Password <span class="st0">&quot;$AdminPassword&quot;</span> <span class="sy0">-</span>Database <span class="st0">&quot;$Database&quot;</span> <span class="kw5">-Verbose</span> <span class="kw5">-ErrorAction</span> Stop
&nbsp;
&nbsp; &nbsp; <span class="kw1">Remove-Item</span> <span class="st0">&quot;$outputPath&quot;</span>
&nbsp;
&nbsp; &nbsp; <span class="kw1">Write-Host</span> <span class="st0">&quot;Updates completed.&quot;</span>
<span class="br0">&#125;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">function ApplyDatabaseUpdates
{
    param (
        [parameter(Mandatory=$true)]
        [string]
        $UpdatesFolder,
        [parameter(Mandatory=$true)]
        [string]
        $Server,
        [parameter(Mandatory=$true)]
        [string]
        $Database,
        [parameter(Mandatory=$true)]
        [string]
        $AdminUserName,
        [parameter(Mandatory=$true)]
        [string]
        $AdminPassword
    )

    $path = (Get-Location).Path

    # For SQL 2008 - load the modules
    try{    
        if ( (Get-PSSnapin -Name SqlServerCmdletSnapin100 -ErrorAction SilentlyContinue) -eq $null -and (Get-PSSnapin -Registered -Name SqlServerCmdletSnapin100 -ErrorAction SilentlyContinue) -ne $null){
            Add-PSSnapin SqlServerCmdletSnapin100 -ErrorAction SilentlyContinue
            Add-PSSnapin SqlServerProviderSnapin100 -ErrorAction SilentlyContinue
        }
    }
    catch{
        Write-Error "Powershell Script error: $_" -EA Stop
    }

    #updates tracking
    try{
        Write-Host "Creating Update Tracking Table If Not Exists"
        Invoke-Sqlcmd -Query "IF NOT EXISTS (SELECT 1 FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME = 'UpdateTracking') CREATE TABLE UpdateTracking (UpdateTrackingKey int IDENTITY(1,1) PRIMARY KEY, Name varchar(255) NOT NULL, Applied DateTime NOT NULL);" -ServerInstance "$Server" -Username "$AdminUserName" -Password "$AdminPassword" -Database "$Database" -ErrorAction Stop
        Write-Host "Done"
    }
    catch{
        Write-Error "Powershell Script error: $_" -EA Stop
    }

    #database updates
    $outputPath = "$pathUpdatesBatch.sql"
    $stream = [System.IO.StreamWriter] "$outputPath"
    $fileUpdates = Get-ChildItem "$UpdatesFolder"
    $datestamp = $(get-date -f "yyyy-MM-dd HH:mm")

    $stream.WriteLine("/* SQL Core Updates - Updated $datestamp */")
    $stream.WriteLine("BEGIN TRANSACTION")

    foreach($file in $fileUpdates)
    {
        $name = ($file.Name)
        $namewe = ([System.IO.Path]::GetFileNameWithoutExtension($name))

        $stream.WriteLine("")
        $stream.WriteLine("/* File: $name */")
        $stream.WriteLine("IF NOT EXISTS (SELECT 1 FROM UpdateTracking WHERE Name = '$namewe')")
        $stream.WriteLine("BEGIN")

        $stream.WriteLine("`tPrint 'Applying Update: $namewe'")
        $stream.WriteLine("`tEXEC('")
        (Get-Content "$UpdatesFolder$name") | % {$_ -replace "'", "''"} | % {$stream.WriteLine("`t`t$_")}
        $stream.WriteLine("`t');")

        $stream.WriteLine("`tINSERT INTO UpdateTracking(Name, Applied) SELECT '$namewe', GETUTCDATE();")
        $stream.WriteLine("END")
    }

    $stream.WriteLine("COMMIT TRANSACTION")
    $stream.Close()
    Write-Host "Update Script Created."

    Write-Host "Running updates..."

    Invoke-SqlCmd -InputFile "$outputPath" -ServerInstance "$Server" -Username "$AdminUserName" -Password "$AdminPassword" -Database "$Database" -Verbose -ErrorAction Stop

    Remove-Item "$outputPath"

    Write-Host "Updates completed."
}</pre></div></div>

<p><i style="display: block; padding: 1em; margin: 1em; background-color: #eeeeee">Note: this has only been run in the context of my personal project. That means don&#8217;t copy, paste, and run it immediately against your production environment. Running stuff blindly from the internet is known as both a bad idea and a career limiting maneuver.</i></p>
<h3>Update____Database.ps1</h3>
<p>My application has two databases which it will access via different accounts. I want the ability to rebuild these databases from scratch as well as manage their credentials from an external system (in this case, TeamCity). If the worst should happen and these databases are compromised or overwritten in some fashion, I want to be able to recreate them with new credentials, account names, the works. </p>
<p>To make life more difficult, many of these commands have to be executed individually in order to work with Azure Databases.</p>
<p>Both scripts detect if their specified database exists and, if not, create them. The UpdateSampleDatabase is capable of recreating the database in Azure, provided some extra options are passed in to it (the Core Database script is missing this bit, unfortunately):</p>
<p><b>Excerpt from <a href="https://github.com/tarwn/SQLisHard/blob/master/Database/UpdateSampleDatabase.ps1" title="View on github">UpdateSampleDatabase.ps1</a>:</b></p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="powershell"><thead><tr><td colspan="2"  class="head">PowerShell</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
</pre></td><td class="de1"><pre class="de1">&nbsp; &nbsp; <span class="co1"># ...</span>
&nbsp;
&nbsp; &nbsp; <span class="co1">#database</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">Write-Host</span> <span class="st0">&quot;Checking database exists...&quot;</span>;
&nbsp; &nbsp; &nbsp; &nbsp; <span class="re0">$result</span> <span class="sy0">=</span> Invoke<span class="sy0">-</span>Sqlcmd <span class="kw5">-Query</span> <span class="st0">&quot;SELECT [name] FROM [sys].[databases] WHERE [name] = N'$database'&quot;</span> <span class="sy0">-</span>ServerInstance <span class="st0">&quot;$Server&quot;</span> <span class="sy0">-</span>Username <span class="st0">&quot;$AdminUserName&quot;</span> <span class="sy0">-</span>Password <span class="st0">&quot;$AdminPassword&quot;</span> <span class="sy0">-</span>Database <span class="st0">&quot;master&quot;</span> <span class="kw5">-ErrorAction</span> Stop
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw3">if</span><span class="br0">&#40;</span><span class="re0">$result</span>.name<span class="br0">&#41;</span><span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">Write-Host</span> <span class="st0">&quot;Database already exists&quot;</span>;
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw3">else</span><span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">Write-Host</span> <span class="st0">&quot;Creating Database: $database&quot;</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Invoke<span class="sy0">-</span>Sqlcmd <span class="kw5">-Query</span> <span class="st0">&quot;CREATE DATABASE $database&quot;</span> <span class="sy0">-</span>ServerInstance <span class="st0">&quot;$Server&quot;</span> <span class="sy0">-</span>Username <span class="st0">&quot;$AdminUserName&quot;</span> <span class="sy0">-</span>Password <span class="st0">&quot;$AdminPassword&quot;</span> <span class="sy0">-</span>Database <span class="st0">&quot;master&quot;</span> <span class="kw5">-ErrorAction</span> Stop
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Invoke<span class="sy0">-</span>Sqlcmd <span class="kw5">-Query</span> <span class="st0">&quot;ALTER DATABASE $database SET RECOVERY SIMPLE&quot;</span> <span class="sy0">-</span>ServerInstance <span class="st0">&quot;$Server&quot;</span> <span class="sy0">-</span>Username <span class="st0">&quot;$AdminUserName&quot;</span> <span class="sy0">-</span>Password <span class="st0">&quot;$AdminPassword&quot;</span> <span class="sy0">-</span>Database <span class="st0">&quot;master&quot;</span> <span class="kw5">-ErrorAction</span> Stop
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">Write-Host</span> <span class="st0">&quot;Created.&quot;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp;
&nbsp; &nbsp; <span class="co1"># ...</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">    # ...

    #database
        Write-Host "Checking database exists...";
        $result = Invoke-Sqlcmd -Query "SELECT [name] FROM [sys].[databases] WHERE [name] = N'$database'" -ServerInstance "$Server" -Username "$AdminUserName" -Password "$AdminPassword" -Database "master" -ErrorAction Stop
        if($result.name){
            Write-Host "Database already exists";
        }
        else{
            Write-Host "Creating Database: $database"

            Invoke-Sqlcmd -Query "CREATE DATABASE $database" -ServerInstance "$Server" -Username "$AdminUserName" -Password "$AdminPassword" -Database "master" -ErrorAction Stop
            Invoke-Sqlcmd -Query "ALTER DATABASE $database SET RECOVERY SIMPLE" -ServerInstance "$Server" -Username "$AdminUserName" -Password "$AdminPassword" -Database "master" -ErrorAction Stop
            Write-Host "Created."
        }

    # ...</pre></div></div>

<p>They also generate the users specified by the build server (which will also be dynamically added into the relevant web.config files for the website):</p>
<p><b>Excerpt from <a href="https://github.com/tarwn/SQLisHard/blob/master/Database/UpdateCoreDatabase.ps1" title="View on github">UpdateCoreDatabase.ps1</a>:</b></p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="powershell"><thead><tr><td colspan="2"  class="head">PowerShell</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
</pre></td><td class="de1"><pre class="de1">&nbsp; &nbsp; <span class="co1"># ...</span>
&nbsp;
&nbsp; &nbsp; <span class="co1">#user</span>
&nbsp; &nbsp; try<span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">Write-Host</span> <span class="st0">&quot;Creating User: $NewUserName&quot;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="re0">$result</span> <span class="sy0">=</span> Invoke<span class="sy0">-</span>Sqlcmd <span class="kw5">-Query</span> <span class="st0">&quot;SELECT [name] FROM sys.sql_logins WHERE name = '$NewUserName'&quot;</span> <span class="sy0">-</span>ServerInstance <span class="st0">&quot;$Server&quot;</span> <span class="sy0">-</span>Username <span class="st0">&quot;$AdminUserName&quot;</span> <span class="sy0">-</span>Password <span class="st0">&quot;$AdminPassword&quot;</span> <span class="sy0">-</span>Database <span class="st0">&quot;master&quot;</span> <span class="kw5">-ErrorAction</span> Stop
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw3">if</span><span class="br0">&#40;</span><span class="re0">$result</span>.name<span class="br0">&#41;</span><span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">Write-Host</span> <span class="st0">&quot;Login already exists&quot;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw3">else</span><span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">Write-Host</span> <span class="st0">&quot;Creating login...&quot;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Invoke<span class="sy0">-</span>Sqlcmd <span class="kw5">-Query</span> <span class="st0">&quot;CREATE LOGIN $NewUserName WITH PASSWORD = '$NewPassword'&quot;</span> <span class="sy0">-</span>ServerInstance <span class="st0">&quot;$Server&quot;</span> <span class="sy0">-</span>Username <span class="st0">&quot;$AdminUserName&quot;</span> <span class="sy0">-</span>Password <span class="st0">&quot;$AdminPassword&quot;</span> <span class="sy0">-</span>Database <span class="st0">&quot;master&quot;</span> <span class="kw5">-ErrorAction</span> Stop
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">Write-Host</span> <span class="st0">&quot;Login Created.&quot;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; <span class="re0">$result</span> <span class="sy0">=</span> Invoke<span class="sy0">-</span>Sqlcmd <span class="kw5">-Query</span> <span class="st0">&quot;SELECT [name] FROM sys.sysusers WHERE name = '$NewUserName'&quot;</span> <span class="sy0">-</span>ServerInstance <span class="st0">&quot;$Server&quot;</span> <span class="sy0">-</span>Username <span class="st0">&quot;$AdminUserName&quot;</span> <span class="sy0">-</span>Password <span class="st0">&quot;$AdminPassword&quot;</span> <span class="sy0">-</span>Database <span class="st0">&quot;$Database&quot;</span> <span class="kw5">-ErrorAction</span> Stop
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw3">if</span><span class="br0">&#40;</span><span class="re0">$result</span>.name<span class="br0">&#41;</span><span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">Write-Host</span> <span class="st0">&quot;User already exists&quot;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw3">else</span><span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">Write-Host</span> <span class="st0">&quot;Creating user...&quot;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Invoke<span class="sy0">-</span>Sqlcmd <span class="kw5">-Query</span> <span class="st0">&quot;CREATE USER $NewUserName FOR LOGIN $NewUserName WITH DEFAULT_SCHEMA = dbo&quot;</span> <span class="sy0">-</span>ServerInstance <span class="st0">&quot;$Server&quot;</span> <span class="sy0">-</span>Username <span class="st0">&quot;$AdminUserName&quot;</span> <span class="sy0">-</span>Password <span class="st0">&quot;$AdminPassword&quot;</span> <span class="sy0">-</span>Database <span class="st0">&quot;$Database&quot;</span> <span class="kw5">-ErrorAction</span> Stop
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Invoke<span class="sy0">-</span>Sqlcmd <span class="kw5">-Query</span> <span class="st0">&quot;EXEC sp_addrolemember 'db_datareader','$NewUserName'; EXEC sp_addrolemember 'db_datawriter','$NewUserName'&quot;</span> <span class="sy0">-</span>ServerInstance <span class="st0">&quot;$Server&quot;</span> <span class="sy0">-</span>Username <span class="st0">&quot;$AdminUserName&quot;</span> <span class="sy0">-</span>Password <span class="st0">&quot;$AdminPassword&quot;</span> <span class="sy0">-</span>Database <span class="st0">&quot;$Database&quot;</span> <span class="kw5">-ErrorAction</span> Stop
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">Write-Host</span> <span class="st0">&quot;User Created.&quot;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp; &nbsp; catch<span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">Write-Error</span> <span class="st0">&quot;Powershell Script error: $_&quot;</span> <span class="sy0">-</span>EA Stop
&nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp;
&nbsp; &nbsp; <span class="co1"># ...</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">    # ...

    #user
    try{
        Write-Host "Creating User: $NewUserName"
        $result = Invoke-Sqlcmd -Query "SELECT [name] FROM sys.sql_logins WHERE name = '$NewUserName'" -ServerInstance "$Server" -Username "$AdminUserName" -Password "$AdminPassword" -Database "master" -ErrorAction Stop
        if($result.name){
            Write-Host "Login already exists"
        }
        else{
            Write-Host "Creating login..."
            Invoke-Sqlcmd -Query "CREATE LOGIN $NewUserName WITH PASSWORD = '$NewPassword'" -ServerInstance "$Server" -Username "$AdminUserName" -Password "$AdminPassword" -Database "master" -ErrorAction Stop
            Write-Host "Login Created."
        }

        $result = Invoke-Sqlcmd -Query "SELECT [name] FROM sys.sysusers WHERE name = '$NewUserName'" -ServerInstance "$Server" -Username "$AdminUserName" -Password "$AdminPassword" -Database "$Database" -ErrorAction Stop
        if($result.name){
            Write-Host "User already exists"
        }
        else{
            Write-Host "Creating user..."
            Invoke-Sqlcmd -Query "CREATE USER $NewUserName FOR LOGIN $NewUserName WITH DEFAULT_SCHEMA = dbo" -ServerInstance "$Server" -Username "$AdminUserName" -Password "$AdminPassword" -Database "$Database" -ErrorAction Stop
            Invoke-Sqlcmd -Query "EXEC sp_addrolemember 'db_datareader','$NewUserName'; EXEC sp_addrolemember 'db_datawriter','$NewUserName'" -ServerInstance "$Server" -Username "$AdminUserName" -Password "$AdminPassword" -Database "$Database" -ErrorAction Stop
            Write-Host "User Created."
        }
    }
    catch{
        Write-Error "Powershell Script error: $_" -EA Stop
    }

    # ...</pre></div></div>

<p>Once the database and users are created, the SampleDatabase script produces a replacement for one of it&#8217;s script files that will contain some randomized data. The original file is a placeholder and produces an error if it hasn&#8217;t been replaced.</p>
<p><b>Excerpt from <a href="https://github.com/tarwn/SQLisHard/blob/master/Database/UpdateSampleDatabase.ps1" title="View on github">UpdateSampleDatabase.ps1</a>:</b></p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="powershell"><thead><tr><td colspan="2"  class="head">PowerShell</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
</pre></td><td class="de1"><pre class="de1">&nbsp; &nbsp; <span class="co1"># ...</span>
&nbsp;
<span class="co1"># ---------------------------------- Content Generation ---------------------------------------------</span>
<span class="co1"># Scripts to generate content dynamically and update the appropriate update script</span>
&nbsp;
&nbsp; &nbsp; <span class="co1">#generate customers table content</span>
&nbsp; &nbsp; <span class="re0">$CustomersContentPath</span> <span class="sy0">=</span> <span class="st0">&quot;$UpdatesFolder 002_CustomersData.sql&quot;</span>
&nbsp; &nbsp; try<span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">Write-Host</span> <span class="st0">&quot;Generating content script for dbo.Customers&quot;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="re0">$girlsnames</span> <span class="sy0">=</span> <span class="br0">&#40;</span><span class="st0">&quot;&lt;ns&gt;&lt;n&gt;&quot;</span> <span class="sy0">+</span> <span class="br0">&#91;</span><span class="re3">string</span><span class="br0">&#93;</span>::Join<span class="br0">&#40;</span><span class="st0">&quot;&lt;/n&gt;&lt;n&gt;&quot;</span><span class="sy0">,</span><span class="br0">&#40;</span><span class="kw1">Get-Content</span> <span class="st0">&quot;$pathDatagirlsforenames.txt&quot;</span><span class="br0">&#41;</span><span class="br0">&#41;</span> <span class="sy0">+</span> <span class="st0">&quot;&lt;/n&gt;&lt;/ns&gt;&quot;</span><span class="br0">&#41;</span>.Replace<span class="br0">&#40;</span><span class="st0">&quot;'&quot;</span><span class="sy0">,</span><span class="st0">&quot;''&quot;</span><span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="re0">$boysnames</span> <span class="sy0">=</span> &nbsp;<span class="br0">&#40;</span><span class="st0">&quot;&lt;ns&gt;&lt;n&gt;&quot;</span> <span class="sy0">+</span> <span class="br0">&#91;</span><span class="re3">string</span><span class="br0">&#93;</span>::Join<span class="br0">&#40;</span><span class="st0">&quot;&lt;/n&gt;&lt;n&gt;&quot;</span><span class="sy0">,</span><span class="br0">&#40;</span><span class="kw1">Get-Content</span> <span class="st0">&quot;$pathDataboysforenames.txt&quot;</span><span class="br0">&#41;</span><span class="br0">&#41;</span> <span class="sy0">+</span> <span class="st0">&quot;&lt;/n&gt;&lt;/ns&gt;&quot;</span><span class="br0">&#41;</span>.Replace<span class="br0">&#40;</span><span class="st0">&quot;'&quot;</span><span class="sy0">,</span><span class="st0">&quot;''&quot;</span><span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="re0">$lastnames</span> <span class="sy0">=</span> &nbsp;<span class="br0">&#40;</span><span class="st0">&quot;&lt;ns&gt;&lt;n&gt;&quot;</span> <span class="sy0">+</span> <span class="br0">&#91;</span><span class="re3">string</span><span class="br0">&#93;</span>::Join<span class="br0">&#40;</span><span class="st0">&quot;&lt;/n&gt;&lt;n&gt;&quot;</span><span class="sy0">,</span><span class="br0">&#40;</span><span class="kw1">Get-Content</span> <span class="st0">&quot;$pathDatasurnames.txt&quot;</span><span class="br0">&#41;</span><span class="br0">&#41;</span> <span class="sy0">+</span> <span class="st0">&quot;&lt;/n&gt;&lt;/ns&gt;&quot;</span><span class="br0">&#41;</span>.Replace<span class="br0">&#40;</span><span class="st0">&quot;'&quot;</span><span class="sy0">,</span><span class="st0">&quot;''&quot;</span><span class="br0">&#41;</span>
&nbsp; &nbsp; 
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#40;</span><span class="kw1">Get-Content</span> <span class="st0">&quot;$pathDataBulkImportNames.AzureFriendly.sql&quot;</span><span class="br0">&#41;</span> `
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="sy0">|</span> <span class="sy0">%</span> <span class="br0">&#123;</span><span class="kw6">$_</span> <span class="kw4">-replace</span> <span class="st0">&quot;{{GIRLSNAMES}}&quot;</span><span class="sy0">,</span> <span class="re0">$girlsnames</span><span class="br0">&#125;</span> `
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="sy0">|</span> <span class="sy0">%</span> <span class="br0">&#123;</span><span class="kw6">$_</span> <span class="kw4">-replace</span> <span class="st0">&quot;{{BOYSNAMES}}&quot;</span><span class="sy0">,</span> <span class="re0">$boysnames</span><span class="br0">&#125;</span> `
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="sy0">|</span> <span class="sy0">%</span> <span class="br0">&#123;</span><span class="kw6">$_</span> <span class="kw4">-replace</span> <span class="st0">&quot;{{LASTNAMES}}&quot;</span><span class="sy0">,</span> <span class="re0">$lastnames</span><span class="br0">&#125;</span> `
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="sy0">|</span> <span class="kw1">Set-Content</span> <span class="kw5">-path</span> <span class="st0">&quot;$CustomersContentPath&quot;</span>
&nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp; &nbsp; catch<span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">Write-Error</span> <span class="st0">&quot;Powershell Script error: $_&quot;</span> <span class="sy0">-</span>EA Stop
&nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp;
&nbsp; &nbsp; <span class="co1"># ...</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">    # ...

# ---------------------------------- Content Generation ---------------------------------------------
# Scripts to generate content dynamically and update the appropriate update script

    #generate customers table content
    $CustomersContentPath = "$UpdatesFolder 002_CustomersData.sql"
    try{
        Write-Host "Generating content script for dbo.Customers"
        $girlsnames = ("&lt;ns&gt;&lt;n&gt;" + [string]::Join("&lt;/n&gt;&lt;n&gt;",(Get-Content "$pathDatagirlsforenames.txt")) + "&lt;/n&gt;&lt;/ns&gt;").Replace("'","''")
        $boysnames =  ("&lt;ns&gt;&lt;n&gt;" + [string]::Join("&lt;/n&gt;&lt;n&gt;",(Get-Content "$pathDataboysforenames.txt")) + "&lt;/n&gt;&lt;/ns&gt;").Replace("'","''")
        $lastnames =  ("&lt;ns&gt;&lt;n&gt;" + [string]::Join("&lt;/n&gt;&lt;n&gt;",(Get-Content "$pathDatasurnames.txt")) + "&lt;/n&gt;&lt;/ns&gt;").Replace("'","''")
    
        (Get-Content "$pathDataBulkImportNames.AzureFriendly.sql") `
                        | % {$_ -replace "{{GIRLSNAMES}}", $girlsnames} `
                        | % {$_ -replace "{{BOYSNAMES}}", $boysnames} `
                        | % {$_ -replace "{{LASTNAMES}}", $lastnames} `
                        | Set-Content -path "$CustomersContentPath"
    }
    catch{
        Write-Error "Powershell Script error: $_" -EA Stop
    }

    # ...</pre></div></div>

<p>This generated data is a necessary part of the application that I initially replaced on each deployment, but now only use on new database deployments. Keeping it random and replaceable prevents the application code from making any assumptions about the data in this table.</p>
<p>The final step for both scripts is to run the ApplyDatabaseUpdates function on their respective folders and databases.</p>
<h3>RunLocally.sample.ps1</h3>
<p>The RunLocally.sample.ps1 script will bring a local development environment all the way up to the latest version without requiring me to type out a long series of arguments and credentials. It is basically just a list of hardcoded variables and then calls to the two Update______Database.ps1 scripts. </p>
<p><b>RunLocally.sample.ps1:</b></p>
<pre># 1) Copy this file to RunLocally.ps1
# 2) Open RunLocally.ps1 + substitute meaningful values for the variables below (update web.config connection strings also)
# 3) [Cross your fingers and] Run it 

$DbServer = "localhost"
$DbAdminUsername = "admin"
$DbAdminPassword = "password"

$DbSampleDatabase = "SampleDB"
$DbSampleReadUsername = "readuser"
$DbSampleReadPassword = "password"

$DbCoreDatabase = "CoreDB"
$DbCoreUsername = "coreuser"
$DbCorePassword = "password"

.UpdateSampleDatabase.ps1 -s $DbServer -d $DbSampleDatabase -nu $DbSampleReadUsername -np $DbSampleReadPassword -au $DbAdminUsername -ap $DbAdminPassword -DeleteGeneratedContentAfter $true

.UpdateCoreDatabase.ps1 -s $DbServer -d $DbCoreDatabase -nu $DbCoreUsername -np $DbCorePassword -au $DbAdminUsername -ap $DbAdminPassword</pre>
<p>The reason it is a sample file is because the real one is going to be different for my desktop and laptop and I knew if they were under source control I would constantly be accidentally committing them and having to change back and forth as I switched systems. To use it, I create a copy of the sample file, rename it to RunLocally.ps1 (which is ignored via the .gitignore for the project) and fill in the real values.</p>
<h2>Future Plans</h2>
<p>I&#8217;m not a fan of the libraries that try to abstract away the SQL in SQL deployments. I know SQL and don&#8217;t need to spend the time learning a library abstraction that, at best, can offer me no better control and ease of use then raw SQL. Many developers feel less than confident in their SQL skills and an abstracted library seems to reduce the need to learn SQL, but in reality the less you know about SQL the harder it will be to determine if the abstraction is doing what you think it is doing, and doing it in a safe and performant manner (and frequently the answer is &#8220;it&#8217;s not&#8221;).</p>
<p>This set of scripts evolved as a I built the project. In the future I&#8217;ll probably switch over to something like DbDeploy, as I mentioned earlier. Having the scripts in file system folders makes it easy to glance over the list to see what has changed, makes them easily accessible in my git repositories, can be copied and pasted (or opened and saved) directly from SSMS, and requires no extra tooling.</p>
<p><i>The scripts above are part of the deployment process for a personal project I have been working on called  <a href="http://SQLisHard.com/">SQLisHard.com</a>. Launching in the next few weeks (quietly), the site is designed to help people interactively learn or improve their SQL skills and help build the knowledge and confidence that comes from writing and solving real SQL problems.</i></p>
]]></content:encoded>
			<wfw:commentRss>/index.php/datamgmt/dbprogramming/deploying-database-changes-with-powershell/feed/</wfw:commentRss>
		<slash:comments>2</slash:comments>
		</item>
		<item>
		<title>Leveraging MSBUILD to automate SSRS deployments – session material</title>
		<link>/index.php/datamgmt/dbprogramming/mssqlserver/leveraging-msbuild-to-automate-ssrs/</link>
		<comments>/index.php/datamgmt/dbprogramming/mssqlserver/leveraging-msbuild-to-automate-ssrs/#comments</comments>
		<pubDate>Tue, 05 Feb 2013 07:28:00 +0000</pubDate>
		<dc:creator><![CDATA[Koen Verbeeck]]></dc:creator>
				<category><![CDATA[Business Intelligence]]></category>
		<category><![CDATA[Microsoft SQL Server]]></category>
		<category><![CDATA[SSRS]]></category>
		<category><![CDATA[automate]]></category>
		<category><![CDATA[deploy]]></category>
		<category><![CDATA[deployment]]></category>
		<category><![CDATA[msbuild]]></category>
		<category><![CDATA[pass]]></category>
		<category><![CDATA[sqlug]]></category>
		<category><![CDATA[ssrs]]></category>

		<guid isPermaLink="false">/index.php/2013/02/leveraging-msbuild-to-automate-ssrs/</guid>
		<description><![CDATA[The demo material for my SQLUG session about leveraging MSBUILD to automate SSRS deployments.]]></description>
				<content:encoded><![CDATA[<p style="text-align: justify;"><a href="/media/users/koenverbeeck/logo.png?mtime=1358861145"><img style="float: left;" src="/wp-content/uploads/users/koenverbeeck/logo.png?mtime=1358861145" alt="" width="136" height="84" /></a></p>
<p style="text-align: justify;">A week ago I gave a session for the Belgian SQL Server user group, <a href="http://sqlug.be/">SQLUG.be</a>, about how MSBUILD can be used to automate SSRS deployments. Thanks to a lovely strike of the taxi drivers in Brussels it took me only 2 hours to get at the location, but hey, the turnout was great, there was beer and pizza and the demo’s didn’t crash.</p>
<p style="text-align: justify;"><span style="text-align: justify;">You can find the demo material from my session <a href="/media/users/koenverbeeck/SQLUG_MSBUILD/MSBUILD_SSRSDeploy_Demos.zip?mtime=1360009782" target="_blank">here</a> and you can download the slides from </span><a style="text-align: justify;" href="http://www.slideshare.net/KoenVerbeeck/sqlug-msbuild-ssrs-deployments">SlideShare</a><span style="text-align: justify;">. My colleague Valentino did a session as well, you can find his material on his </span><a style="text-align: justify;" href="http://blog.hoegaerden.be/2013/01/30/automating-ssrs-deployment-download/">blog</a><span style="text-align: justify;">.</span></p>
<p style="text-align: justify;">For everyone who attended: thanks for joining us and for being such a great audience!</p>
]]></content:encoded>
			<wfw:commentRss>/index.php/datamgmt/dbprogramming/mssqlserver/leveraging-msbuild-to-automate-ssrs/feed/</wfw:commentRss>
		<slash:comments>2</slash:comments>
		</item>
		<item>
		<title>SQLUG.be meeting: Automating SSRS Deployments</title>
		<link>/index.php/datamgmt/dbprogramming/mssqlserver/sqlug-be-meeting-automating-ssrs/</link>
		<comments>/index.php/datamgmt/dbprogramming/mssqlserver/sqlug-be-meeting-automating-ssrs/#respond</comments>
		<pubDate>Tue, 22 Jan 2013 11:29:00 +0000</pubDate>
		<dc:creator><![CDATA[Koen Verbeeck]]></dc:creator>
				<category><![CDATA[Business Intelligence]]></category>
		<category><![CDATA[Microsoft SQL Server]]></category>
		<category><![CDATA[SSRS]]></category>
		<category><![CDATA[automate]]></category>
		<category><![CDATA[deploy]]></category>
		<category><![CDATA[deployment]]></category>
		<category><![CDATA[pass]]></category>
		<category><![CDATA[sqlug]]></category>
		<category><![CDATA[ssrs]]></category>

		<guid isPermaLink="false">/index.php/2013/01/sqlug-be-meeting-automating-ssrs/</guid>
		<description><![CDATA[ 

Next Tuesday – 29 januari 2013 – my colleague Valentino (blog &#124; twitter) and I will give two sessions on the topic of Reporting Services deployments. In contrast with SSIS and SSAS, there isn’t much available to automate this, so we’ll be spending&#8230;]]></description>
				<content:encoded><![CDATA[<p> </p>
<div class="image_block"><a href="/media/users/koenverbeeck/logo.png?mtime=1358861145"><img style="float: left;" src="/wp-content/uploads/users/koenverbeeck/logo.png?mtime=1358861145" alt="" width="148" height="91" /></a></div>
<p style="text-align: justify;">Next Tuesday – 29 januari 2013 – my colleague Valentino (<a href="http://blog.hoegaerden.be/">blog</a> | <a href="https://twitter.com/ValentinoV42">twitter</a>) and I will give two sessions on the topic of Reporting Services deployments at the Belgian SQL Server User Group. In contrast with SSIS and SSAS, there isn’t much available to automate this, so we’ll be spending some time exploring how this gap can be crossed. Each of us will present a different method. Mine is about MSBUILD, an idea presented to my Jamie Thomson (<a href="http://sqlblog.com/blogs/jamie_thomson/default.aspx">blog</a> | <a href="https://twitter.com/jamiet">twitter</a>), who pointed me to one of his blog posts: <a href="http://sqlblog.com/blogs/jamie_thomson/archive/2009/10/31/deploying-reporting-services-reports-using-msbuild.aspx">Deploying Reporting Services reports using msbuild</a>.</p>
<p style="text-align: justify;">Here are the official abstracts:</p>
<p><em>You have just finished your dazzling SSRS report project and you can&#8217;t wait to show your visual cleverness to the users. But, the DBA hasn&#8217;t given you permission to directly deploy to the production server! Instead, this paranoia person asked you to deliver him deployment scripts! What are you supposed to do? In the following two sessions, Valentino and Koen will show you two different methods to get the job done.</em></p>
<p><strong>Automating SSRS deployment using built-in SQL Server tools </strong></p>
<p>Have you always wanted to find out what the RS Utility is all about but never dared to ask? Then this session is what you&#8217;ve been waiting for!</p>
<p>Join Valentino to discover how rs.exe can be used to automate SSRS report deployment!</p>
<p><strong>Speaker: </strong>Valentino Vranken<br /> <strong>Level: </strong>300<strong> </strong></p>
<p><strong>Leveraging MSBUILD to automate SSRS deployments. </strong></p>
<p>Unlike SSIS and SSAS, Reporting Services doesn&#8217;t have an easy way to automate deployments. You can work your way around with VBScripts, but isn&#8217;t there an alternative?</p>
<p>Yes there is! Koen Verbeeck will show you in this session how the MSBUILD platform can be used to deploy your SSRS projects to the server.</p>
<p><strong>Speaker: </strong>Koen Verbeeck<br /> <strong>Level: </strong>300</p>
<p>All of this goodness will take place in the Ordina Belgium offices. Catering will be provided. This hasn’t been confirmed yet, but it might be pizza and beer <img src="https://s.w.org/images/core/emoji/2/72x72/1f642.png" alt="🙂" class="wp-smiley" style="height: 1em; max-height: 1em;" /> I will put my slides and demo material online after the session.</p>
<p>More information and registration (there’s still room left) on the <a href="http://sqlug.be/nextevent/event/?id=34">SQLUG.be website</a>.</p>
<p><strong>UPDATE:</strong> It has been confirmed there will be pizza! <img src="https://s.w.org/images/core/emoji/2/72x72/1f642.png" alt="🙂" class="wp-smiley" style="height: 1em; max-height: 1em;" /></p>
]]></content:encoded>
			<wfw:commentRss>/index.php/datamgmt/dbprogramming/mssqlserver/sqlug-be-meeting-automating-ssrs/feed/</wfw:commentRss>
		<slash:comments>0</slash:comments>
		</item>
	</channel>
</rss>
