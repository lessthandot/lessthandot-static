<?xml version="1.0" encoding="UTF-8"?><rss version="2.0"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:atom="http://www.w3.org/2005/Atom"
	xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
	xmlns:slash="http://purl.org/rss/1.0/modules/slash/"
	>

<channel>
	<title>jenkins &#8211; LessthanDot</title>
	<atom:link href="/index.php/tag/jenkins/feed/" rel="self" type="application/rss+xml" />
	<link>/</link>
	<description>A Technical Community for IT Professionals</description>
	<lastBuildDate>Sat, 09 Mar 2019 12:50:36 +0000</lastBuildDate>
	<language>en-US</language>
	<sy:updatePeriod>hourly</sy:updatePeriod>
	<sy:updateFrequency>1</sy:updateFrequency>
	<generator>https://wordpress.org/?v=4.6.1</generator>
	<item>
		<title>Continuous Delivery &#8211; To The Cloud!</title>
		<link>/index.php/enterprisedev/application-lifecycle-management/continuous-delivery-to-the-cloud/</link>
		<comments>/index.php/enterprisedev/application-lifecycle-management/continuous-delivery-to-the-cloud/#respond</comments>
		<pubDate>Thu, 20 Sep 2012 10:46:00 +0000</pubDate>
		<dc:creator><![CDATA[Eli Weinstock-Herman (tarwn)]]></dc:creator>
				<category><![CDATA[Application Lifecycle Management]]></category>
		<category><![CDATA[azure]]></category>
		<category><![CDATA[continuous delivery]]></category>
		<category><![CDATA[jenkins]]></category>
		<category><![CDATA[mvc music store]]></category>
		<category><![CDATA[teamcity]]></category>

		<guid isPermaLink="false">/index.php/2012/09/continuous-delivery-to-the-cloud/</guid>
		<description><![CDATA[So what do you do when you have a nice little build lab with two implementations of an automated deployment pipeline that includes unit testing, automated interface testing, automated deployments, smoke testing, automated load tests, static analysis, warning tracking, and automated sort-of QA and production deployments? 

Take it to the cloud, of course.]]></description>
				<content:encoded><![CDATA[<p>So what do you do when you have a nice little build lab with two  parallel automated deployment pipelines that include unit testing, interface testing, deployments, smoke testing, load testing, static analysis, and automated sort-of QA and production deployments? </p>
<p>Take it to the cloud, of course. </p>
<p>(Well, and write <a href="/index.php/All/continuous+delivery:" title="Continuous Delivery posts">a bunch of blog posts</a> and <a href="http://wiki.lessthandot.com/index.php/Eli%27s_Continuous_Delivery_Project" title="Continuous Delivery project wiki page">a wiki page</a> too)</p>
<h2>Azure Setup</h2>
<p>The target of this exercise was to get the project deploying automatically to the cloud, and I wasn&#8217;t particular about where. I decided that the <a href="https://www.windowsazure.com/en-us/home/scenarios/web-sites/" title="About the Azure Websites Feature">free website</a> feature in Azure would be a good target. Mostly due to the free part but also because I suspected it would be easy.</p>
<p>First up was creating an Azure account, which I did via <a href="https://www.windowsazure.com/en-us/" title="WindowsAzure.com">WindowsAzure.com</a>. The Web Sites feature is still in Preview mode, so I had to go the preview features and enable it.</p>
<div style="text-align: center; font-size: 90%; color: #666666;">
	<img src="http://tiernok.com/LTDBlog/ContinuousDelivery/Azure-01.png" alt="WindowsAzure.com - Preview Features Option" /><br />
	WindowsAzure.com &#8211; Preview Features Option
</div>
<p>The Web Sites option is at the bottom and enabled with a button and dialog:</p>
<div style="text-align: center; font-size: 90%; color: #666666;">
	<img src="http://tiernok.com/LTDBlog/ContinuousDelivery/Azure-02.png" alt="WindowsAzure.com - Preview Features" /><br />
	WindowsAzure.com &#8211; Preview Features
</div>
<p>Once it&#8217;s enabled, I can go into the portal and when I press the &#8220;New&#8221; button at the bottom, I&#8217;ll have options to create a new Web Site instance.</p>
<div style="text-align: center; font-size: 90%; color: #666666;">
	<img src="http://tiernok.com/LTDBlog/ContinuousDelivery/Azure-03.png" alt="WindowsAzure.com - New Website" /><br />
	WindowsAzure.com &#8211; New Website
</div>
<p>After creating the new site, it will provision and show up in my dashboard:</p>
<div style="text-align: center; font-size: 90%; color: #666666;">
	<img src="http://tiernok.com/LTDBlog/ContinuousDelivery/Azure-04.png" alt="WindowsAzure.com - Dashboard" /><br />
	WindowsAzure.com &#8211; Dashboard
</div>
<p>That&#8217;s all it takes to have a new Web Site in Windows Azure. Of course it&#8217;s not doing anything useful at the moment, so lets go back to the build process and fix that.</p>
<h2>Build Process Changes</h2>
<p>Because I chose to use an Azure Web Site, the build changes are going to be minimal. Microsoft intends us to use the Publish feature in Visual Studio or Web Matrix to deploy our websites, so they give us all the settings we need to run the msdeploy executable from a build step instead. </p>
<p>In the properties dashboard for the new website above, there is a link to download the publish settings for the site and a link to setup credentials. First setup the credentials, then click the download link to download the publish settings. These settings are intended for Visual Studio or Web Matrix, but being XML we can read the file and pluck out the important values.</p>
<p>I made a copy of my final &#8220;Deploy to Production&#8221; step and modified the msdeploy step to use a new Param file. The Param file is used during the deployment to set the IIS name and connection strings, you can see all of them on <a href="https://bitbucket.org/tarwn/mvcmusicstore.main/src/1560a5fd57ea/Configs" title="Parameter files at tarwn/MVCMusicStore.Main">BitBucket</a>. </p>
<div style="text-align: center; font-size: 90%; color: #666666;">
	<img src="http://tiernok.com/LTDBlog/ContinuousDelivery/Azure-05.png" alt="TeamCity Build Steps" /><br />
	TeamCity Build Steps
</div>
<p><b>MSDeploy Command (TeamCity version):</b></p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="text"><thead><tr><td colspan="2"  class="head">Text</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
</pre></td><td class="de1"><pre class="de1">&quot;C:Program FilesIISMicrosoft Web Deploy V2msdeploy.exe&quot; -source:package='%system.teamcity.build.workingDir%PriorArtifactsMvcMusicStore.zip' -dest:auto,computerName='%COMPUTER%',userName='%USERNAME%',password='%PASSWORD%',includeAcls='False',authtype=basic -allowUntrusted &nbsp;-verb:sync -disableLink:AppPoolExtension -disableLink:ContentExtension -disableLink:CertificateExtension -setParamFile=&quot;%system.teamcity.build.workingDir%PriorArtifactsMvcMusicStore.AZUREWEBSITE.xml&quot; -enableRule:DoNotDeleteRule</pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">"C:Program FilesIISMicrosoft Web Deploy V2msdeploy.exe" -source:package='%system.teamcity.build.workingDir%PriorArtifactsMvcMusicStore.zip' -dest:auto,computerName='%COMPUTER%',userName='%USERNAME%',password='%PASSWORD%',includeAcls='False',authtype=basic -allowUntrusted  -verb:sync -disableLink:AppPoolExtension -disableLink:ContentExtension -disableLink:CertificateExtension -setParamFile="%system.teamcity.build.workingDir%PriorArtifactsMvcMusicStore.AZUREWEBSITE.xml" -enableRule:DoNotDeleteRule</pre></div></div>

<p>I then updated the Configuration Parameters to reflect the Azure credentials and URL so the deployment and smoke test would work properly and entered the username and password entered in the Azure Dashboard in the prior step.</p>
<div style="text-align: center; font-size: 90%; color: #666666;">
	<img src="http://tiernok.com/LTDBlog/ContinuousDelivery/Azure-07.png" alt="TeamCity Configuration Parameters" /><br />
	TeamCity Configuration Parameters
</div>
<p>And that&#8217;s it, probably the fastest on premises to cloud change. Press the build button in TeamCity and we have a green build to the cloud:</p>
<div style="text-align: center; font-size: 90%; color: #666666;">
	<img src="http://tiernok.com/LTDBlog/ContinuousDelivery/Azure-08.png" alt="TeamCity Build Successful" /><br />
	TeamCity Build Successful
</div>
<p>And after a similar set of changes in Jenkins, I have a parallel production step that targets Azure as well:</p>
<div style="text-align: center; font-size: 90%; color: #666666;">
	<img src="http://tiernok.com/LTDBlog/ContinuousDelivery/Azure-9.png" alt="Jenkins Build Pipeline" /><br />
	Jenkins Build Pipeline
</div>
<p>And of course I had to push the button a few times:</p>
<div style="text-align: center; font-size: 90%; color: #666666;">
	<img src="http://tiernok.com/LTDBlog/ContinuousDelivery/Azure-10.png" alt="Jenkins Build Success" /><br />
	Jenkins Build Success
</div>
<p>You can see the site here: http://elismvcmusicstore.azurewebsites.net/</p>
<p><em>Note: It will probably load slowly. It&#8217;s on a shared node and seems to go to sleep since it gets visited so infrequently. If I felt like paying for it, it&#8217;s just a toggle button away from running as a reserved instance (and another to scale it up to multiple instances)</em></p>
<h2>That was the easy button version</h2>
<p>Despite the fact that I chose the easiest possible target, as long as we can script the deployment we can easily add it into the pipeline and know that our deployment is taking exactly the same steps every time it deploys. Whether we were instead deploying to an Azure web role, deploying EC2 instances, or pushing to another provider, we have the framework to do so consistently and safely.</p>
]]></content:encoded>
			<wfw:commentRss>/index.php/enterprisedev/application-lifecycle-management/continuous-delivery-to-the-cloud/feed/</wfw:commentRss>
		<slash:comments>0</slash:comments>
		</item>
		<item>
		<title>Continuous Delivery &#8211; Adding Static Analysis</title>
		<link>/index.php/enterprisedev/application-lifecycle-management/continuous-delivery-adding-static-analysis/</link>
		<comments>/index.php/enterprisedev/application-lifecycle-management/continuous-delivery-adding-static-analysis/#respond</comments>
		<pubDate>Fri, 27 Apr 2012 10:18:00 +0000</pubDate>
		<dc:creator><![CDATA[Eli Weinstock-Herman (tarwn)]]></dc:creator>
				<category><![CDATA[Application Lifecycle Management]]></category>
		<category><![CDATA[continuous delivery]]></category>
		<category><![CDATA[jenkins]]></category>
		<category><![CDATA[mvc music store]]></category>
		<category><![CDATA[static analysis]]></category>

		<guid isPermaLink="false">/index.php/2012/04/continuous-delivery-adding-static-analysis/</guid>
		<description><![CDATA[Running static analysis checks can help keep us on track with our standards, identify unused code, identify similar code blocks, and much more. In a manual process, running these tools can be time consuming, costing time to wait for the run complete, more time if we don't abandon them after the first run and have to maintain a schedule, and even more time if someone has to keep a spreadsheet somewhere to compare the results from run to run. Add an automated build process, and we can net the same level of information and trending for a modest setup cost.]]></description>
				<content:encoded><![CDATA[<p>Running static analysis checks can help keep us on track with our standards, identify unused code, identify similar code blocks, and much more. In a manual process, running these tools can be time consuming, costing time to wait for the run complete, more time if we don&#8217;t abandon them after the first run and have to maintain a schedule, and even more time if someone has to keep a spreadsheet somewhere to compare the results from run to run. Add an automated build process, and we can net the same level of information and trending for a modest setup cost.</p>
<p>Up until now, all of the additions to my <a href="http://wiki.lessthandot.com/index.php/Eli%27s_Continuous_Delivery_Project" title="Wiki page on Eli's Continuous Delivery project">Continuous Delivery project</a> have been focused on building, testing, and deploying the code. In this post we&#8217;ll discuss the potential benefits and costs of adding static analysis to the pipeline and then walk through the details of adding several of those checks into the sample project.</p>
<p><i>Note: The components outlined in this post have actually been part of the continuous delivery pipeline for a few months, driving changes and cleanup commits from <a href="https://bitbucket.org/tarwn/mvcmusicstore.main/changeset/b81657c2f260" title="First style clean-up commit">December 21st</a> forward as I continued to build out some of the later components.</i></p>
<h2>Costs</h2>
<p>Even with automation, there is still a cost to static analysis. These tools take time and resources to run. The larger our codebase gets, the more time and memory the tools will require to analyze the code and generate results. We have two dials we can use to help reduce the impact on our end-to-end delivery time: tool selection and process location.</p>
<p>The importance and usefulness of the data should drive which tools we use and where we configure them to run. The goal is to limit the impact on delivery time while selecting the right tools for our projects and development style. If we intend to use the data for standards enforcement or as process constraints then it is going to be more effective as part of the pipeline, but if it is for informational purposes then a parallel step or separate, scheduled build may be more appropriate. Altering the location can be used to run tasks as part of the primary build chain*, in parallel to the main build chain, or even in a separate build, each with higher or lower impact to that end-to-end delivery time.</p>
<p><i>* Note: If you map out your build process along with the amount of time it takes for each step and the amount of time that is spent waiting in between steps, you can total the numbers to calculate a total delivery time for defect-free commits. This is helpful when evaluating the costs of adding an additional sequential step, parallel step, or none at all.</i></p>
<h2>Benefits</h2>
<p>Static analysis tools provide visibility into the style and structure of our code. There are tools to help capture TODO comments we&#8217;ve left in the code, tools to analyze the level of copy and paste, code coverage, even tools that offer so many measures they incorporate query engines (like <a href="http://www.ndepend.com/" title="NDepend Homepage">NDepend</a>). The ability to run them regularly without the ongoing cost is great, but by running them as part of our builds we also gain the ability to apply the results to the build quality, potentially failing the build if the code exhibits too much of a bad behavior. </p>
<p>When they&#8217;re used correctly, the ability to affect the build quality brings the greatest benefit. Failing the build when the code doesn&#8217;t meet our quality forces us to address the issues immediately. The changes we committed are still fresh in our minds, making this is the fastest (and cheapest) point in time we could clean them up. </p>
<p>To support this, we&#8217;re forced to define our standards for code quality. When a build fails, we are then making a correction to meet our guaranteed standards, which is easier for our company or project manager to accept than if we had taken it upon ourselves to clean up some code in the middle of a crunch. </p>
<p>Lastly, it helps prevent us from putting those fixes off and building up a mountain of technical debt that tends to bog down execution on so many projects. We are keeping the code more consistent and doing so at the cheapest time possible.</p>
<h2>Choosing Some Tools</h2>
<p>So there are some costs and some benefits, but what does it look like when these tools are wired in and running as part of the build? Let&#8217;s add them and find out.</p>
<p>For the purposes of the sample Continuous Delivery project, I am going to be adding:</p>
<ul>
<li>Compiler Warnings &#8211; Scanning for compiler warnings in the output is the cheap and easy to clean up</li>
<li>Open Tasks &#8211; Scanning for HACK, TODO, and REFACTOR tags in the source code</li>
<li>Duplicate Code &#8211; Scanning for duplicate code blocks that could be refactored</li>
<li>Rule Based Scanning &#8211; Scanning for situations that violate a set of style rules</li>
<li>Code Coverage &#8211; Evaluate the test coverage levels on our code to identify areas with low coverage</li>
</ul>
<p>As we go through each one, I&#8217;ll identify the external tool and/or Jenkins plugins.</p>
<h3>Static Analysis Trends</h3>
<p>Several of the plugins below produce data that can be captured and displayed on the job summary screen as trends. They require the <a href="https://wiki.jenkins-ci.org/display/JENKINS/Analysis+Collector+Plugin" title="Jenkins Analysis Collector Plugin">Analysis Collector Plugin</a> as a prerequisite. There are no setup steps to this core plugin, so after installing it we can continue on to the real work below.</p>
<h3>Compiler Warnings</h3>
<p>Compiler warnings can be captured easily using the <a href="https://wiki.jenkins-ci.org/display/JENKINS/Warnings+Plugin" title="Jenkins Warnings Plugin">Warnings Plugin</a>. After adding it to the Jenkins server, we can open the CI job and add the checks in the &#8220;post-build Actions&#8221; section:</p>
<div style="text-align: center; font-size: .9em; color: #666666;">
	<img src="http://tiernok.com/LTDBlog/ContinuousDelivery/Analysis_Warnings.png" title="Analysis - Compiler Warnings" /><br />
	Analysis &#8211; Compiler Warnings
</div>
<p>The plugin has the ability to scan the build output and files in our workspace, with parsers for a number of different tools. In this case I&#8217;ve chosen to capture the MSBuild output, but I could just as easily capture output from something like JSLint (speaking of future projects). A trend of the warning count is added to the job summary screen and a summary of the warnings is displayed on each individual run:</p>
<div style="text-align: center; font-size: .9em; color: #666666;">
	<img src="http://tiernok.com/LTDBlog/ContinuousDelivery/Analysis_Warnings_Summary.png" title="Analysis - Compiler Warnings Summary" /><br />
	Analysis &#8211; Compiler Warnings Summary
</div>
<p>And drilling in we can see the details:</p>
<div style="text-align: center; font-size: .9em; color: #666666;">
	<img src="http://tiernok.com/LTDBlog/ContinuousDelivery/Analysis_Warnings_Detail.png" title="Analysis - Compiler Warnings Details" /><br />
	Analysis &#8211; Compiler Warnings Details
</div>
<p>In this case, we&#8217;re actually looking at the warnings from 49 builds ago. Since the results are incorporated into the build summary, I can access past versions for as long as I keep the job history.</p>
<h3>Open Tasks</h3>
<p>Open tasks refer to those little TODO and HACK tags we litter throughout our code, always with the intent of someday coming back and doing something with them. Using the <a href="https://wiki.jenkins-ci.org/display/JENKINS/Task+Scanner+Plugin" title="Jenkins Task Scanner plugin">Task Scanner Plugin</a>, the build can scan the code and add these comments to the trends and build details.</p>
<p>The plugin adds a section to the &#8220;post-build Actions&#8221; section, which we can then configure to fit our specific needs:</p>
<div style="text-align: center; font-size: .9em; color: #666666;">
	<img src="http://tiernok.com/LTDBlog/ContinuousDelivery/Analysis_Tasks.png" title="Analysis - Open Tasks" /><br />
	Analysis &#8211; Open Tasks
</div>
<p>In the job, we can specify which tags to capture from the code and the filename pattern to use for code files. There is also an advanced section where we can add thresholds. For instance, this is where I could define that 20 or more cases of the high priority tag should cause the build to fail until we get our HACK&#8217;s back under control.</p>
<p>The output for this plugin is similar to the Compiler Warnings, with a trend on the main project page, a summary in the individual job:</p>
<div style="text-align: center; font-size: .9em; color: #666666;">
	<img src="http://tiernok.com/LTDBlog/ContinuousDelivery/Analysis_Tasks_Summary.png" title="Analysis - Open Tasks Summary" /><br />
	Analysis &#8211; Open Tasks Summary
</div>
<p>And a details page we can drill into:</p>
<div style="text-align: center; font-size: .9em; color: #666666;">
	<img src="http://tiernok.com/LTDBlog/ContinuousDelivery/Analysis_Tasks_Details.png" title="Analysis - Open Tasks Details" /><br />
	Analysis &#8211; Open Tasks Details
</div>
<p>The scan pulls out not just the presence of these tags, but also the content and location of the messages. This makes it easy to quickly scan them and pick one to try and knock off the list.</p>
<h3>Duplicate Code</h3>
<p><a href="http://en.wikipedia.org/wiki/Duplicate_code" title="Code duplication on Wikipedia">Code duplication</a> is a code smell that adds a number of risks to your codebase, violating the DRY (<a href="http://www.artima.com/intv/dry.html" title="Don't Repeat Yourself - heh">Don&#8217;t Repeat Yourself</a>) principle.</p>
<p>There are a number of tools out there to detect duplication in code, in this case I chose to use <a href="http://www.harukizaemon.com/simian/" title="Simian homepage">Simian</a> and import and display the results via the  <a href="https://wiki.jenkins-ci.org/display/JENKINS/Violations" title="Violations Plugin">Violations Plugin</a>, which is also used below for analyzing the code against common problems and style rules.</p>
<p>First, we need to run simian against our codebase to produce a report. I&#8217;ve added a windows batch command as part of the build steps to run this command, placing it after the unit tests but before the test deployment. </p>
<div style="text-align: center; font-size: .9em; color: #666666;">
	<img src="http://tiernok.com/LTDBlog/ContinuousDelivery/Analysis_Simian_Command.png" title="Analysis - Simian Execution" /><br />
	Analysis &#8211; Simian Execution
</div>
<p>I&#8217;ve told Simian to run against all *.cs files in my project directory, excluding the sample data file that is used to generate a sample Entity Framework model. At the tail end I force it to return an exit code of 0 so the job will continue to run the later steps and post-build analysis. Simian will helpfully return a failure exit code when it finds violations, but that&#8217;s not useful for this case.</p>
<p>In the &#8220;post-build Action&#8221; section, I&#8217;ve provided the path to the output file Simian creates:</p>
<div style="text-align: center; font-size: .9em; color: #666666;">
	<img src="http://tiernok.com/LTDBlog/ContinuousDelivery/Analysis_Simian_PostBuild.png" title="Analysis - Simian - Post Build" /><br />
	Analysis &#8211; Simian &#8211; Post Build
</div>
<p>We also have the ability to define thresholds for good, stormy, and unstable, based on the number of duplicate blocks found.</p>
<p>In the summary screen for the job and each individual run screen, the DRY plugin will add a trend that displays the number of duplicate blocks found over time.</p>
<div style="text-align: center; font-size: .9em; color: #666666;">
	<img src="http://tiernok.com/LTDBlog/ContinuousDelivery/Analysis_Simian_Summary.png" title="Analysis - Simian - Summary Trend" /><br />
	Analysis &#8211; Simian &#8211; Summary Trend
</div>
<p>As we drill into the details, we get a list of the files where duplicates occur, and can then drill down into those to see the actual code that was found.</p>
<div style="text-align: center; font-size: .9em; color: #666666;">
	<img src="http://tiernok.com/LTDBlog/ContinuousDelivery/Analysis_Simian_Details.png" title="Analysis - Simian - Detail Trend" /><br />
	Analysis &#8211; Simian &#8211; Detail Trend
</div>
<p>In this case it has found an interface and an implementation of that interface that have a block of 11 lines of code in common.</p>
<h3>Code Standards</h3>
<p>When it comes to code standards, the two main engines I had to choose from were <a href="http://www.mono-project.com/Gendarme" title="Gendarme at Mono Project">Gendarme</a> and <a href="http://en.wikipedia.org/wiki/FxCop" title="Wikipedia page for FxCop">FxCop</a>. The <a href="https://wiki.jenkins-ci.org/display/JENKINS/Violations" title="Violations Plugin">Violations Plugin</a> can handle either, so I opted for Gendarme (I believe it was faster for my specific scenario).</p>
<p>Like Simian above, I need to first run the executable against the codebase, then consume the generated report post-build to feed the trends and details.</p>
<div style="text-align: center; font-size: .9em; color: #666666;">
	<img src="http://tiernok.com/LTDBlog/ContinuousDelivery/Analysis_Gendarme_Command.png" title="Analysis - Gendarme - Batch Command" /><br />
	Analysis &#8211; Gendarme &#8211; Batch Command
</div>
<p>I&#8217;ve added the command for Gendarme after the unit tests and before the Simian command above, pointing it at the dll for the project and specifying I want XML output. As with Simian, I&#8217;ve forced the batch to return an exit code of 0 so the run will continue through to process the later steps.</p>
<p>also like simian, we specify the location of the XML file in the Violations section of the &#8220;post-Build Actions&#8221;.</p>
<div style="text-align: center; font-size: .9em; color: #666666;">
	<img src="http://tiernok.com/LTDBlog/ContinuousDelivery/Analysis_Simian_PostBuild.png" title="Analysis - Gendarme - Post Build" /><br />
	Analysis &#8211; Gendarme &#8211; Post Build
</div>
<p>The Violations plugin overlays the Gendarme results on the chart we saw above:</p>
<div style="text-align: center; font-size: .9em; color: #666666;">
	<img src="http://tiernok.com/LTDBlog/ContinuousDelivery/Analysis_Simian_Summary.png" title="Analysis - Gendarme - Summary Trend" /><br />
	Analysis &#8211; Gendarme &#8211; Summary Trend
</div>
<p>And the detail results are also very similar:</p>
<div style="text-align: center; font-size: .9em; color: #666666;">
	<img src="http://tiernok.com/LTDBlog/ContinuousDelivery/Analysis_Gendarme_Details.png" title="Analysis - Gendarme - Detail Trend" /><br />
	Analysis &#8211; Gendarme &#8211; Detail Trend
</div>
<p>However once we drill in, we not only get the code view but also can hover over the identified warning locations for details on the rule the gendarme is reporting on.</p>
<div style="text-align: center; font-size: .9em; color: #666666;">
	<img src="http://tiernok.com/LTDBlog/ContinuousDelivery/Analysis_Gendarme_Details2.png" title="Analysis - Gendarme - Code Details" /><br />
	Analysis &#8211; Gendarme &#8211; Code Details
</div>
<p>The early downward trend above corresponds to the commits starting on <a href="https://bitbucket.org/tarwn/mvcmusicstore.main/changeset/b81657c2f260" title="First style clean-up commit">December 21st</a>, when I started cleaning up some of the worst offenders.</p>
<h3>Code Coverage</h3>
<p>Code coverage identifies the level of test coverage in our codebase by monitoring the tests as they run against our assemblies. For this step I used <a href="https://github.com/sawilde/opencover" title="OpenCover on Github">OpenCover</a> combined with <a href="http://reportgenerator.codeplex.com/" title="ReportGenerator on COdeplex">ReportGenerator</a> to convert the output into an HTML report, and the <a href="https://wiki.jenkins-ci.org/display/JENKINS/HTML+Publisher+Plugin" title="HTML Publisher Plugin">HTML Publisher Plugin</a> to incorporate the generated reports into the job results.</p>
<p>This one took more steps for setup:</p>
<ul>
<li>Download or clone the OpenCover source from Github</li>
<li>Build using the included Build.bat script</li>
<li>Copy the compiled binary to my build server</li>
<li>Copy the ReportGenerator folder to server</li>
<li>Replace existing MS Test batch command with call to run it from OpenCover and process results with ReportGenerator (below)</li>
</ul>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="text"><thead><tr><td colspan="2"  class="head">Text</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
</pre></td><td class="de1"><pre class="de1">mkdir &quot;%WORKSPACE%testresults&quot;
&quot;C:AdditionalScriptsOpenCoverOpenCover.Console.exe&quot; -target:&quot;C:Program Files (x86)Microsoft Visual Studio 10.0Common7IDEmstest.exe&quot; &nbsp;-targetargs:&quot;/resultsfile:&quot;%WORKSPACE%testresultsMyTests.Results.xml&quot; /testcontainer:&quot;%WORKSPACE%MvcMusicStoreTestsbinReleaseMvcMusicStoreTests.dll&quot; /nologo&quot; &nbsp;-mergebyhash -filter:&quot;+[MvcM*]*&quot; -output:&quot;%WORKSPACE%testresultsopencovertests.xml&quot;
&quot;C:AdditionalScriptsReportGeneratorReportGenerator.exe&quot; &quot;%WORKSPACE%testresultsopencovertests.xml&quot; &quot;%WORKSPACE%testresultshtml&quot; HtmlSummary
&quot;C:AdditionalScriptsReportGeneratorReportGenerator.exe&quot; &quot;%WORKSPACE%testresultsopencovertests.xml&quot; &quot;%WORKSPACE%testresultshtml&quot; Html</pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">mkdir "%WORKSPACE%testresults"
"C:AdditionalScriptsOpenCoverOpenCover.Console.exe" -target:"C:Program Files (x86)Microsoft Visual Studio 10.0Common7IDEmstest.exe"  -targetargs:"/resultsfile:"%WORKSPACE%testresultsMyTests.Results.xml" /testcontainer:"%WORKSPACE%MvcMusicStoreTestsbinReleaseMvcMusicStoreTests.dll" /nologo"  -mergebyhash -filter:"+[MvcM*]*" -output:"%WORKSPACE%testresultsopencovertests.xml"
"C:AdditionalScriptsReportGeneratorReportGenerator.exe" "%WORKSPACE%testresultsopencovertests.xml" "%WORKSPACE%testresultshtml" HtmlSummary
"C:AdditionalScriptsReportGeneratorReportGenerator.exe" "%WORKSPACE%testresultsopencovertests.xml" "%WORKSPACE%testresultshtml" Html</pre></div></div>

<p>This command (1) creates the test results folder, (2) runs OpenCover with arguments to locate the MSTest executable, flags to use with MSTest, a filter to limit execution to the main assemblies, and an output filename. The last lines (3) run the ReportGenerator executable against the results, producing the HtmlSummary report and (4) detailed HTML reports for each file. </p>
<p>Checking the &#8220;Publish HTML reports&#8221; option in &#8220;post-build Actions&#8221;, we can specify the folder, index page, and title to use for the generated reports.</p>
<div style="text-align: center; font-size: .9em; color: #666666;">
	<img src="http://tiernok.com/LTDBlog/ContinuousDelivery/Analysis_Coverage_PostBuild.png" title="Analysis - Coverage - PostBuild" /><br />
	Analysis &#8211; Coverage &#8211; PostBuild
</div>
<p>This adds a sidebar link to the job summary, which links to the summary we generated and the detail pages associated with it.</p>
<div style="text-align: center; font-size: .9em; color: #666666;">
	<img src="http://tiernok.com/LTDBlog/ContinuousDelivery/Analysis_Coverage_Button.png" title="Analysis - Coverage Link" /><br />
	Analysis &#8211; Coverage Link
</div>
<div style="text-align: center; font-size: .9em; color: #666666;">
	<img src="http://tiernok.com/LTDBlog/ContinuousDelivery/Analysis_Coverage_Summary.png" title="Analysis - Coverage Summary Report" /><br />
	Analysis &#8211; Coverage Summary Report
</div>
<p>Each of the links has a details report behind it that includes code statistics, like cyclomatic complexity, and a copy of the code with markers to indicate covered vs uncovered lines.</p>
<h2>Summary</h2>
<p>The addition of these tools to my project was done as part of the CI build, placing them sequentially into the process. This works with a smaller project but needs to be evaluated more carefully in a larger project.</p>
<p>The results from these tests have helped me clean my code up, identify gaps in the test coverage when I accidentally created them, and given me a good amount of historical knowledge about the quality of the code itself. The setup time was not that expensive and I can continue to take advantage of the benefits in every future build I do.</p>
]]></content:encoded>
			<wfw:commentRss>/index.php/enterprisedev/application-lifecycle-management/continuous-delivery-adding-static-analysis/feed/</wfw:commentRss>
		<slash:comments>0</slash:comments>
		</item>
		<item>
		<title>Continuous Delivery &#8211; Adding the Load Testing Stage</title>
		<link>/index.php/enterprisedev/application-lifecycle-management/continuous-delivery-adding-the-load/</link>
		<comments>/index.php/enterprisedev/application-lifecycle-management/continuous-delivery-adding-the-load/#comments</comments>
		<pubDate>Fri, 17 Feb 2012 10:48:00 +0000</pubDate>
		<dc:creator><![CDATA[Eli Weinstock-Herman (tarwn)]]></dc:creator>
				<category><![CDATA[Application Lifecycle Management]]></category>
		<category><![CDATA[continuous delivery]]></category>
		<category><![CDATA[jenkins]]></category>
		<category><![CDATA[load testing]]></category>
		<category><![CDATA[mvc music store]]></category>
		<category><![CDATA[wcat]]></category>

		<guid isPermaLink="false">/index.php/2012/02/continuous-delivery-adding-the-load/</guid>
		<description><![CDATA[Adding load testing to my continuous build process provides several benefits for a fairly cheap entry fee. As the development process progresses, I'll have a baseline and know if I add something to the application that impacts the performance. I'll also be able to accurately discuss it's performance when asked, instead of guessing.]]></description>
				<content:encoded><![CDATA[<p>Adding load testing to my continuous build process provides several benefits for a fairly cheap entry fee. As the development process progresses, I&#8217;ll have a baseline and know if I add something to the application that impacts the performance. I&#8217;ll also be able to accurately discuss it&#8217;s performance when asked, instead of guessing. And if I want to increase the performance, that same baseline will serve as a guide on my progress. </p>
<p>Not every application needs to process 100,000 transactions/second, but the cost of guessing how well our application will perform tends to catch up with us.</p>
<p>In the <a href="/index.php/EnterpriseDev/application-lifecycle-management/implementing-wcat-for-load-testing" title="Using WCAT to Load Test">previous post</a>, I walked through using WCAT to  define and execute a load test scenario against the site from my <a href="http://wiki.lessthandot.com/index.php/Eli%27s_Continuous_Delivery_Project" title="Continuous Delivery Wiki page">continuous delivery project</a>. In this post, I&#8217;ll take those WCAT scripts and incorporate them into Jenkins as a new build step in my delivery pipeline, not only running the load test but capturing the results so I can show them over time.</p>
<h2>Prep the Server</h2>
<p>Before I can start configuring my new build step, I need to prep the server. Following the steps in my prior post, I&#8217;ll download the WCAT msi to the build server and install it, then register the build server as a WCAT client:</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="text"><thead><tr><td colspan="2"  class="head">Text</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
</pre></td><td class="de1"><pre class="de1">cscript //H:cscript
wcat.wsf –terminate –update –clients localhost</pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">cscript //H:cscript
wcat.wsf –terminate –update –clients localhost</pre></div></div>

<p>And, of course, wait for the obligatory reboot to go through.</p>
<h2>Creating the Build Job</h2>
<p>Initially I want a build job that I can run manually, to let me tweak the test execution, results capture, and plotting. The overall plan for the job will be to:</p>
<ul>
<li>Get the load test scripts from a dedicated source repository</li>
<li>Pull in the compiled artifacts from the first step (continuous integration)</li>
<li>Deploy the artifacts to a remote IIS web application folder</li>
<li>Smoke test the deployment</li>
<li>Run the Load Test against the delpoyed application</li>
<li>Capture the results of the Smoke Test and Load Test</li>
</ul>
<p><i>While I originally expected the load test portion to be the trickiest, the reality was that plotting the results ended up being the hardest part of the whole adventure.</i></p>
<p>First up is defining the parameter for the CI build number:</p>
<div style="text-align: center; font-size: .9em; color: #666666;">
	<img src="http://tiernok.com/LTDBlog/ContinuousDelivery/LoadTest_Config1.png" title="Load Test Job - Build Parameter" /><br />
	Load Test Job &#8211; Build Parameter
</div>
<p>Then I need to add in the code repository that I&#8217;m hosting the Load Test scripts from the last post in:</p>
<div style="text-align: center; font-size: .9em; color: #666666;">
	<img src="http://tiernok.com/LTDBlog/ContinuousDelivery/LoadTest_Config2.png" title="Load Test Job - Load Test Scripts" /><br />
	Load Test Job &#8211; Load Test Scripts
</div>
<p>I&#8217;ve also added the <a href="https://wiki.jenkins-ci.org/display/JENKINS/Envfile+Plugin" title="Jenkins EnvFile Plugin">EnvFile plugin</a> to allow me to store critical information, like server names and passwords, in an external settings file:</p>
<div style="text-align: center; font-size: .9em; color: #666666;">
	<img src="http://tiernok.com/LTDBlog/ContinuousDelivery/LoadTest_Config3.png" title="Load Test Job - External Settings" /><br />
	Load Test Job &#8211; External Settings
</div>
<p>Then using the <a href="https://wiki.jenkins-ci.org/display/JENKINS/Copy+Artifact+Plugin" title="Jenkins Copy Artifact Plugin">Copy Artifact</a> plugin, I&#8217;ll add a build step to retrieve the zipped deployable website from the CI build step:</p>
<div style="text-align: center; font-size: .9em; color: #666666;">
	<img src="http://tiernok.com/LTDBlog/ContinuousDelivery/LoadTest_Config4.png" title="Load Test Job - Copy Artifacts" /><br />
	Load Test Job &#8211; Copy Artifacts
</div>
<p>With those retrieved, I can now deploy them to my remote server using MS Deploy and execute the VBScript file I created to smoke test the deployed site, each as windows batch command steps:</p>
<div style="text-align: center; font-size: .9em; color: #666666;">
	<img src="http://tiernok.com/LTDBlog/ContinuousDelivery/LoadTest_Config4c.png" title="Load Test Job - Deploy + Smoke Test" /><br />
	Load Test Job &#8211; Deploy + Smoke Test
</div>
<p><i>Note: These commands and scripts are available in the <a href="/index.php/EnterpriseDev/application-lifecycle-management/continuous-delivery-project-deploy-and" title="Continuous Delivery - Deploy and Smoke Test">Deploy and Smoke Test post</a></i></p>
<p>The actual command to execute the load test is nicely wrapped in a the Run.cmd file, so I can add a batch command to execute that:</p>
<div style="text-align: center; font-size: .9em; color: #666666;">
	<img src="http://tiernok.com/LTDBlog/ContinuousDelivery/LoadTest_Config4b.png" title="Load Test Job - Run Load Test" /><br />
	I only included this screenshot to be consistent with the rest of the steps <img src="https://s.w.org/images/core/emoji/2/72x72/1f642.png" alt="🙂" class="wp-smiley" style="height: 1em; max-height: 1em;" />
</div>
<p>The last steps archive the log.xml file that WCAT produces, </p>
<div style="text-align: center; font-size: .9em; color: #666666;">
	<img src="http://tiernok.com/LTDBlog/ContinuousDelivery/LoadTest_Config5.png" title="Load Test Job - Archive Log File" /><br />
	Load Test Job &#8211; Archive Log File
</div>
<p>capture the results of the smoke test, </p>
<div style="text-align: center; font-size: .9em; color: #666666;">
	<img src="http://tiernok.com/LTDBlog/ContinuousDelivery/LoadTest_Config6.png" title="Load Test Job - Capture Smoke Test Results" /><br />
	Load Test Job &#8211; Capture Smoke Test Results
</div>
<p>and clutter up my twitter feed. </p>
<div style="text-align: center; font-size: .9em; color: #666666;">
	<img src="http://tiernok.com/LTDBlog/ContinuousDelivery/LoadTest_Config7.png" title="Load Test Job - Twitter Checkbox" /><br />
	Twitter Checkbox
</div>
<p>With that I have a fully functional build job that deploys a website on demand and load tests it. </p>
<p>And now the really hard part. Doing something with the load test results (you think I&#8217;m being sarcastic, but just wait).</p>
<h2>Displaying the Results</h2>
<p>This was an interesting project and, oddly enough, went like so many IT projects do. We get 90% of the way done and then find out we have another 180% to do.</p>
<p>There is really only one plugin in Jenkins that I could find to handle plotting for free form data. I did look into trying to misuse the JMeter plugin (like I repurpose the JUnit one to capture my smoke test results), but at a glance it looked like JMeter provide the detailed data without the summaries, while WCAT is just giving me the summaries. </p>
<h3>The Plot Plugin (Duh Duh Duuuuh)</h3>
<p>The <a href="https://wiki.jenkins-ci.org/display/JENKINS/Plot+Plugin" title="Jenkins Plot Plugin">Plot Plugin</a> is finicky, poorly documented, and has some hinkiness in the Jenkins display that I haven&#8217;t seen from other plugins. It annoyed me enough that I actually started reading through the source code in <a href="https://github.com/jenkinsci/plot-plugin" title="Jenkins Plot Plugin on GitHub">github</a> to get help figuring out some of it&#8217;s behavior (and then after seeing it, briefly considered trying to relearn java long enough to add some much needed fixes). </p>
<p>Among it&#8217;s other weaknesses, the plot plugin doesn&#8217;t allow you to set data labels, it automatically uses the tag names of the XML. Which doesn&#8217;t work so well when your XML nodes all have the same name. </p>
<p>Like the WCAT results.</p>
<p>Argh.</p>
<p>So after much wrestling, I decided to map the WCAT data to a new XML file purely for the purposes of feeding the plot plugin (and to also reconfigure it so I could enter all the points for a plot from one XPath query, don&#8217;t get me started on forcing me to re-enter the filename for each XPath statement for the same plot).</p>
<p><b>Transform.xsl</b></p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="xml"><thead><tr><td colspan="2"  class="head">XML</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
</pre></td><td class="de1"><pre class="de1"><span class="sc3"><span class="re1">&lt;?xml</span> <span class="re0">version</span>=<span class="st0">&quot;1.0&quot;</span><span class="re2">?&gt;</span></span>
&nbsp;
<span class="sc3"><span class="re1">&lt;xsl:stylesheet</span> <span class="re0">xmlns:xsl</span>=<span class="st0">&quot;http://www.w3.org/1999/XSL/Transform&quot;</span> <span class="re0">version</span>=<span class="st0">&quot;1.0&quot;</span><span class="re2">&gt;</span></span>
&nbsp;
<span class="sc3"><span class="re1">&lt;xsl:template</span> <span class="re0">match</span>=<span class="st0">&quot;/&quot;</span><span class="re2">&gt;</span></span>
&nbsp; &nbsp; <span class="sc3"><span class="re1">&lt;result<span class="re2">&gt;</span></span></span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="sc3"><span class="re1">&lt;persecond<span class="re2">&gt;</span></span></span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="sc3"><span class="re1">&lt;TransactionsPerSecond<span class="re2">&gt;</span></span><span class="re1">&lt;xsl:value-of</span> <span class="re0">select</span>=<span class="st0">'//section[@name=&quot;summary&quot;]/table[@name=&quot;summarydata&quot;]/item/data[@name=&quot;tps&quot;]'</span> <span class="re2">/&gt;</span><span class="re1">&lt;/TransactionsPerSecond<span class="re2">&gt;</span></span></span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="sc3"><span class="re1">&lt;RequestsPerSecond<span class="re2">&gt;</span></span><span class="re1">&lt;xsl:value-of</span> <span class="re0">select</span>=<span class="st0">'//section[@name=&quot;summary&quot;]/table[@name=&quot;summarydata&quot;]/item/data[@name=&quot;rps&quot;]'</span> <span class="re2">/&gt;</span><span class="re1">&lt;/RequestsPerSecond<span class="re2">&gt;</span></span></span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="sc3"><span class="re1">&lt;/persecond<span class="re2">&gt;</span></span></span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="sc3"><span class="re1">&lt;total<span class="re2">&gt;</span></span></span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="sc3"><span class="re1">&lt;Transactions<span class="re2">&gt;</span></span><span class="re1">&lt;xsl:value-of</span> <span class="re0">select</span>=<span class="st0">'//section[@name=&quot;details&quot;]/table[@name=&quot;requeststats&quot;]/item[1]/data[@name=&quot;transactions&quot;]'</span> <span class="re2">/&gt;</span><span class="re1">&lt;/Transactions<span class="re2">&gt;</span></span></span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="sc3"><span class="re1">&lt;Requests<span class="re2">&gt;</span></span><span class="re1">&lt;xsl:value-of</span> <span class="re0">select</span>=<span class="st0">'//section[@name=&quot;details&quot;]/table[@name=&quot;requeststats&quot;]/item[1]/data[@name=&quot;requests&quot;]'</span> <span class="re2">/&gt;</span><span class="re1">&lt;/Requests<span class="re2">&gt;</span></span></span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="sc3"><span class="re1">&lt;Errors<span class="re2">&gt;</span></span><span class="re1">&lt;xsl:value-of</span> <span class="re0">select</span>=<span class="st0">'//section[@name=&quot;summary&quot;]/table[@name=&quot;summarydata&quot;]/item/data[@name=&quot;terrors&quot;]'</span> <span class="re2">/&gt;</span><span class="re1">&lt;/Errors<span class="re2">&gt;</span></span></span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="sc3"><span class="re1">&lt;/total<span class="re2">&gt;</span></span></span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="sc3"><span class="re1">&lt;responsetime<span class="re2">&gt;</span></span></span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="sc3"><span class="re1">&lt;Average<span class="re2">&gt;</span></span><span class="re1">&lt;xsl:value-of</span> <span class="re0">select</span>=<span class="st0">'//section[@name=&quot;details&quot;]/table[@name=&quot;histogram&quot;]/item[2]/data[@name=&quot;response_time_avg&quot;]'</span> <span class="re2">/&gt;</span><span class="re1">&lt;/Average<span class="re2">&gt;</span></span></span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="sc3"><span class="re1">&lt;Minimum<span class="re2">&gt;</span></span><span class="re1">&lt;xsl:value-of</span> <span class="re0">select</span>=<span class="st0">'//section[@name=&quot;details&quot;]/table[@name=&quot;histogram&quot;]/item[2]/data[@name=&quot;response_time_min&quot;]'</span> <span class="re2">/&gt;</span><span class="re1">&lt;/Minimum<span class="re2">&gt;</span></span></span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="sc3"><span class="re1">&lt;NinetyFivePercent<span class="re2">&gt;</span></span><span class="re1">&lt;xsl:value-of</span> <span class="re0">select</span>=<span class="st0">'//section[@name=&quot;details&quot;]/table[@name=&quot;histogram&quot;]/item[2]/data[@name=&quot;response_time_95&quot;]'</span> <span class="re2">/&gt;</span><span class="re1">&lt;/NinetyFivePercent<span class="re2">&gt;</span></span></span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="sc3"><span class="re1">&lt;NinetyNinePercent<span class="re2">&gt;</span></span><span class="re1">&lt;xsl:value-of</span> <span class="re0">select</span>=<span class="st0">'//section[@name=&quot;details&quot;]/table[@name=&quot;histogram&quot;]/item[2]/data[@name=&quot;response_time_99&quot;]'</span> <span class="re2">/&gt;</span><span class="re1">&lt;/NinetyNinePercent<span class="re2">&gt;</span></span></span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="sc3"><span class="re1">&lt;Maximum<span class="re2">&gt;</span></span><span class="re1">&lt;xsl:value-of</span> <span class="re0">select</span>=<span class="st0">'//section[@name=&quot;details&quot;]/table[@name=&quot;histogram&quot;]/item[2]/data[@name=&quot;response_time_max&quot;]'</span> <span class="re2">/&gt;</span><span class="re1">&lt;/Maximum<span class="re2">&gt;</span></span></span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="sc3"><span class="re1">&lt;/responsetime<span class="re2">&gt;</span></span></span>
&nbsp; &nbsp; <span class="sc3"><span class="re1">&lt;/result<span class="re2">&gt;</span></span></span>
<span class="sc3"><span class="re1">&lt;/xsl:template<span class="re2">&gt;</span></span></span>
&nbsp;
<span class="sc3"><span class="re1">&lt;/xsl:stylesheet<span class="re2">&gt;</span></span></span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">&lt;?xml version="1.0"?&gt;

&lt;xsl:stylesheet xmlns:xsl="http://www.w3.org/1999/XSL/Transform" version="1.0"&gt;

&lt;xsl:template match="/"&gt;
	&lt;result&gt;
		&lt;persecond&gt;
			&lt;TransactionsPerSecond&gt;&lt;xsl:value-of select='//section[@name="summary"]/table[@name="summarydata"]/item/data[@name="tps"]' /&gt;&lt;/TransactionsPerSecond&gt;
			&lt;RequestsPerSecond&gt;&lt;xsl:value-of select='//section[@name="summary"]/table[@name="summarydata"]/item/data[@name="rps"]' /&gt;&lt;/RequestsPerSecond&gt;
		&lt;/persecond&gt;
		&lt;total&gt;
			&lt;Transactions&gt;&lt;xsl:value-of select='//section[@name="details"]/table[@name="requeststats"]/item[1]/data[@name="transactions"]' /&gt;&lt;/Transactions&gt;
			&lt;Requests&gt;&lt;xsl:value-of select='//section[@name="details"]/table[@name="requeststats"]/item[1]/data[@name="requests"]' /&gt;&lt;/Requests&gt;
			&lt;Errors&gt;&lt;xsl:value-of select='//section[@name="summary"]/table[@name="summarydata"]/item/data[@name="terrors"]' /&gt;&lt;/Errors&gt;
		&lt;/total&gt;
		&lt;responsetime&gt;
			&lt;Average&gt;&lt;xsl:value-of select='//section[@name="details"]/table[@name="histogram"]/item[2]/data[@name="response_time_avg"]' /&gt;&lt;/Average&gt;
			&lt;Minimum&gt;&lt;xsl:value-of select='//section[@name="details"]/table[@name="histogram"]/item[2]/data[@name="response_time_min"]' /&gt;&lt;/Minimum&gt;
			&lt;NinetyFivePercent&gt;&lt;xsl:value-of select='//section[@name="details"]/table[@name="histogram"]/item[2]/data[@name="response_time_95"]' /&gt;&lt;/NinetyFivePercent&gt;
			&lt;NinetyNinePercent&gt;&lt;xsl:value-of select='//section[@name="details"]/table[@name="histogram"]/item[2]/data[@name="response_time_99"]' /&gt;&lt;/NinetyNinePercent&gt;
			&lt;Maximum&gt;&lt;xsl:value-of select='//section[@name="details"]/table[@name="histogram"]/item[2]/data[@name="response_time_max"]' /&gt;&lt;/Maximum&gt;
		&lt;/responsetime&gt;
	&lt;/result&gt;
&lt;/xsl:template&gt;

&lt;/xsl:stylesheet&gt;</pre></div></div>

<p>And then I can use a quick VBScript file to execute the XSL against the WCAT log.xml file:</p>
<p><b>Transform.vbs</b></p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="vbscript"><thead><tr><td colspan="2"  class="head">VBScript</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
</pre></td><td class="de1"><pre class="de1"><span class="kw4">Dim</span> xml, xsl
<span class="kw4">set</span> xml = <span class="kw2">CreateObject</span>(<span class="st0">&quot;Microsoft.XMLDOM&quot;</span>)
xml.async = <span class="kw5">false</span>
xml.load(<span class="st0">&quot;log.xml&quot;</span>)
&nbsp;
<span class="co1">'Load the XSL</span>
<span class="kw4">set</span> xsl = <span class="kw2">CreateObject</span>(<span class="st0">&quot;Microsoft.XMLDOM&quot;</span>)
xsl.async = <span class="kw5">false</span>
xsl.load(<span class="st0">&quot;transform.xsl&quot;</span>)
&nbsp;
<span class="kw4">Dim</span> fso, fs
<span class="kw4">Set</span> fso = <span class="kw2">CreateObject</span>(<span class="st0">&quot;Scripting.FileSystemObject&quot;</span>)
<span class="kw4">Set</span> fs = fso.CreateTextFile(<span class="st0">&quot;result.xml&quot;</span>,<span class="kw5">true</span>)
fs.Write(Replace(xml.transformNode(xsl),<span class="st0">&quot;&lt;?xml version=&quot;</span><span class="st0">&quot;1.0&quot;</span><span class="st0">&quot; encoding=&quot;</span><span class="st0">&quot;UTF-16&quot;</span><span class="st0">&quot;?&gt;&quot;</span>,<span class="st0">&quot;&quot;</span>))
fs.<span class="kw3">Close</span>
<span class="kw4">Set</span> fs = <span class="kw5">Nothing</span>
<span class="kw4">Set</span> fso = <span class="kw5">Nothing</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">Dim xml, xsl
set xml = CreateObject("Microsoft.XMLDOM")
xml.async = false
xml.load("log.xml")

'Load the XSL
set xsl = CreateObject("Microsoft.XMLDOM")
xsl.async = false
xsl.load("transform.xsl")

Dim fso, fs
Set fso = CreateObject("Scripting.FileSystemObject")
Set fs = fso.CreateTextFile("result.xml",true)
fs.Write(Replace(xml.transformNode(xsl),"&lt;?xml version=""1.0"" encoding=""UTF-16""?&gt;",""))
fs.Close
Set fs = Nothing
Set fso = Nothing</pre></div></div>

<p>Which nets me a results file, like so:</p>
<p><b>result.xml</b></p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="xml"><thead><tr><td colspan="2"  class="head">XML</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
</pre></td><td class="de1"><pre class="de1"><span class="sc3"><span class="re1">&lt;result<span class="re2">&gt;</span></span></span>
&nbsp; &nbsp; <span class="sc3"><span class="re1">&lt;persecond<span class="re2">&gt;</span></span></span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="sc3"><span class="re1">&lt;TransactionsPerSecond<span class="re2">&gt;</span></span></span>1.80<span class="sc3"><span class="re1">&lt;/TransactionsPerSecond<span class="re2">&gt;</span></span></span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="sc3"><span class="re1">&lt;RequestsPerSecond<span class="re2">&gt;</span></span></span>29.56<span class="sc3"><span class="re1">&lt;/RequestsPerSecond<span class="re2">&gt;</span></span></span>
&nbsp; &nbsp; <span class="sc3"><span class="re1">&lt;/persecond<span class="re2">&gt;</span></span></span>
&nbsp; &nbsp; <span class="sc3"><span class="re1">&lt;total<span class="re2">&gt;</span></span></span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="sc3"><span class="re1">&lt;Transactions<span class="re2">&gt;</span></span></span>216<span class="sc3"><span class="re1">&lt;/Transactions<span class="re2">&gt;</span></span></span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="sc3"><span class="re1">&lt;Requests<span class="re2">&gt;</span></span></span>3547<span class="sc3"><span class="re1">&lt;/Requests<span class="re2">&gt;</span></span></span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="sc3"><span class="re1">&lt;Errors<span class="re2">&gt;</span></span></span>3<span class="sc3"><span class="re1">&lt;/Errors<span class="re2">&gt;</span></span></span>
&nbsp; &nbsp; <span class="sc3"><span class="re1">&lt;/total<span class="re2">&gt;</span></span></span>
&nbsp; &nbsp; <span class="sc3"><span class="re1">&lt;responsetime<span class="re2">&gt;</span></span></span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="sc3"><span class="re1">&lt;Average<span class="re2">&gt;</span></span></span>270<span class="sc3"><span class="re1">&lt;/Average<span class="re2">&gt;</span></span></span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="sc3"><span class="re1">&lt;Minimum<span class="re2">&gt;</span></span></span>0<span class="sc3"><span class="re1">&lt;/Minimum<span class="re2">&gt;</span></span></span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="sc3"><span class="re1">&lt;NinetyFivePercent<span class="re2">&gt;</span></span></span>912<span class="sc3"><span class="re1">&lt;/NinetyFivePercent<span class="re2">&gt;</span></span></span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="sc3"><span class="re1">&lt;NinetyNinePercent<span class="re2">&gt;</span></span></span>1536<span class="sc3"><span class="re1">&lt;/NinetyNinePercent<span class="re2">&gt;</span></span></span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="sc3"><span class="re1">&lt;Maximum<span class="re2">&gt;</span></span></span>2563<span class="sc3"><span class="re1">&lt;/Maximum<span class="re2">&gt;</span></span></span>
&nbsp; &nbsp; <span class="sc3"><span class="re1">&lt;/responsetime<span class="re2">&gt;</span></span></span>
<span class="sc3"><span class="re1">&lt;/result<span class="re2">&gt;</span></span></span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">&lt;result&gt;
	&lt;persecond&gt;
		&lt;TransactionsPerSecond&gt;1.80&lt;/TransactionsPerSecond&gt;
		&lt;RequestsPerSecond&gt;29.56&lt;/RequestsPerSecond&gt;
	&lt;/persecond&gt;
	&lt;total&gt;
		&lt;Transactions&gt;216&lt;/Transactions&gt;
		&lt;Requests&gt;3547&lt;/Requests&gt;
		&lt;Errors&gt;3&lt;/Errors&gt;
	&lt;/total&gt;
	&lt;responsetime&gt;
		&lt;Average&gt;270&lt;/Average&gt;
		&lt;Minimum&gt;0&lt;/Minimum&gt;
		&lt;NinetyFivePercent&gt;912&lt;/NinetyFivePercent&gt;
		&lt;NinetyNinePercent&gt;1536&lt;/NinetyNinePercent&gt;
		&lt;Maximum&gt;2563&lt;/Maximum&gt;
	&lt;/responsetime&gt;
&lt;/result&gt;</pre></div></div>

<p>The last piece of the equation is to configure the Plot in the load test job. Here is an example of one graph configuration (the full set is pretty long):</p>
<div style="text-align: center; font-size: .9em; color: #666666;">
	<img src="http://tiernok.com/LTDBlog/ContinuousDelivery/LoadTest_Config8.png" title="Load Test Job - Plot Settings" /><br />
	Load Test Job &#8211; Plot Settings
</div>
<p>Each plot has an XPath statement that corresponds to one of the sections of the result XML file, that way I have unique names for the values when it stores the data and I have labels on the plots. Running the job a few times to build up data and my  graph looks like this:</p>
<div style="text-align: center; font-size: .9em; color: #666666;">
	<img src="http://tiernok.com/LTDBlog/ContinuousDelivery/load_diagram.png" title="Load Test Job - Response Time Diagram" /><br />
	Load Test Job &#8211; Response Time Diagram
</div>
<p><i>Note: I suspect the fact that I got bored and was watching Netflix for the last few tests had some effect on the values</i></p>
<p>And there we go, I now have a job that I can run on demand that will load test my site.</p>
<h2>Incorporate into Build Pipeline</h2>
<p>The last step of this whole load test adventure is incorporating the load test job I&#8217;ve created into my build pipeline. </p>
<div style="text-align: center; font-size: .9em; color: #666666;">
	<img src="http://tiernok.com/LTDBlog/ContinuousDelivery/pipeline_load.png" title="Continuous Delivery Pipeline with Load Test Step" /><br />
	Continuous Delivery Pipeline with Load Test Step
</div>
<p>The only changes necessary to insert the Load Test job into the pipeline is to modify my &#8220;ASPNet MVC Music Store Interface Tests&#8221; build job to trigger a parametrized build of this new load test and in the load test, check the &#8220;Build Pipeline Plugin -> Manually Execute Downstream Project&#8221; option and specify the &#8220;Deploy to QA&#8221; build step as the target. </p>
<div style="text-align: center; font-size: .9em; color: #666666;">
	<img src="http://tiernok.com/LTDBlog/ContinuousDelivery/pipeline_wload.png" title="Continuous Delivery Pipeline w/ Load Testing Step" /><br />
	Continuous Delivery Pipeline w/ Load Testing Step
</div>
<p>With the steps rewired, the pipeline now incorporates the Load Testing job.</p>
<h2>Next Steps</h2>
<p>While the plotting portion of this project took longer than I expected, I still managed to do the whole thing in under 8 hours, and that includes writing part of the first blog and the fact that I was working on it in pieces, in between sleeping, feeding the baby, and so on. </p>
<p>Not every project needs to be the fastest, most responsive application on the planet, but given how cheaply you can add some basic numbers into your process, the net gain of knowing exactly how your application is performing and the heads up when you do something that really breaks performance are both valuable and fairly inexpensive to implement.</p>
]]></content:encoded>
			<wfw:commentRss>/index.php/enterprisedev/application-lifecycle-management/continuous-delivery-adding-the-load/feed/</wfw:commentRss>
		<slash:comments>2</slash:comments>
		</item>
		<item>
		<title>Automatically Version Control Your Jenkins Configuration</title>
		<link>/index.php/enterprisedev/application-lifecycle-management/automatically-version-control-your-jenkins/</link>
		<comments>/index.php/enterprisedev/application-lifecycle-management/automatically-version-control-your-jenkins/#comments</comments>
		<pubDate>Fri, 03 Feb 2012 17:02:00 +0000</pubDate>
		<dc:creator><![CDATA[Eli Weinstock-Herman (tarwn)]]></dc:creator>
				<category><![CDATA[Application Lifecycle Management]]></category>
		<category><![CDATA[jenkins]]></category>
		<category><![CDATA[mercurial]]></category>

		<guid isPermaLink="false">/index.php/2012/02/automatically-version-control-your-jenkins/</guid>
		<description><![CDATA[As part of the Continuous Delivery project I embarked on late last year, I created 4 separate jobs in Jenkins to serve as steps in my pipeline. Some of these jobs are fairly complex and, while I could probably rebuild them from the information in my blog posts, I thought it would make more sense to make some backups.]]></description>
				<content:encoded><![CDATA[<p>As part of the <a href="http://wiki.lessthandot.com/index.php/Eli's_Continuous_Delivery_Project" title="See the wiki post on the project">Continuous Delivery project</a> I embarked on late last year, I created 4 separate jobs in Jenkins to serve as steps in my pipeline. Some of these jobs are fairly complex and, while I could probably rebuild them from the information in my blog posts, I thought it would make more sense to make some backups. </p>
<p>But I hate doing backups.</p>
<p>And I hate digging through backups to find something.</p>
<p>What I really needed was a way to automatically push the configuration files into a mercurial repository. This would require no ongoing work from me, &#8216;backups&#8217; that are taken only when there are changes, and very easy browsing of differences between versions or over time. Sold.</p>
<h2>Mercurial Repository</h2>
<p>First up is creating the local mercurial repo. I only want it to pick up the configuration files, but these are stored in the same folders that the Jenkins executables and my jobs are stored in. </p>
<p>In order to only version my configuration files, I&#8217;ll create the repository, tell it to ignore all files in the folder, then explicitly add just the ones I want to track.</p>
<p>Creating the repository:</p>
<pre>cd C:Program Files (x86)Jenkins
hg init
echo .*&gt;.hgignore</pre>
<p>With the repository added and the hgignore set, we can now tell it exactly which files to add to the repository:</p>
<pre>	hg add .hgignore
	hg add config.xml
	hg add jobs/*/config.xml
	hg commit -m "Initial Commit of Configuration Files"</pre>
<p>And then the last step is to create a remote repository, add the credentials to mercurial, and do our first push. </p>
<p>In my case I created a new BitBucket repository and then cheated by opening the repository in TortoiseHg WorkBench to save the remote address and my credentials as &#8220;default&#8221;.</p>
<p>With the remote repository setup, now I can do the first push:</p>
<pre>	hg push default</pre>
<p>And my configurations are safely whisked away to the cloud.</p>
<h2>Automagicalize It</h2>
<p>One of the advantages I sold myself on was the hands off nature of the final solution. In order to achieve that I need to setup something to perform nightly commits and pushes for me. With Jenkins right here, I might as well use it to drive it&#8217;s own backups.</p>
<p>First up, I&#8217;ll create a new job named &#8220;Backup Configurations&#8221;.</p>
<div style="text-align: center; font-size: .9em; color: #666666;">
	<img src="http://tiernok.com/LTDBlog/JenkinsBackups/1.png" title="General Job Settings" /><br />
	General Job Settings
</div>
<p>I want this to run every night, so I&#8217;ll setup a trigger to run at 1:30 every night by specifying &#8220;Build Periodically&#8221; with a setting of &#8220;30 1 * * *&#8221;.</p>
<div style="text-align: center; font-size: .9em; color: #666666;">
	<img src="http://tiernok.com/LTDBlog/JenkinsBackups/2.png" title="Build Trigger Settings" /><br />
	Build Trigger Settings
</div>
<p>And then the last step is to add an &#8220;Execute Windows Batch Command&#8221; step to my job that executes a similar commit and push to the ones above. Because I am in a subfolder of the repository, I don&#8217;t have to add in any path commands or other trickery.</p>
<div style="text-align: center; font-size: .9em; color: #666666;">
	<img src="http://tiernok.com/LTDBlog/JenkinsBackups/3.png" title="Build Step" /><br />
	Build Step
</div>
<p>Save the job and kick it off once to verify it does indeed work (after making a minor change to a config file, of course) and I can see I have a working, automated backup.</p>
<p>As a last step I went back and added the backup jobs config.xml file to the repository, so now it not only backs up my other configurations but also itself.</p>
]]></content:encoded>
			<wfw:commentRss>/index.php/enterprisedev/application-lifecycle-management/automatically-version-control-your-jenkins/feed/</wfw:commentRss>
		<slash:comments>3</slash:comments>
		</item>
		<item>
		<title>Continuous Delivery &#8211; Dashboard, QA and Production Deployment</title>
		<link>/index.php/enterprisedev/application-lifecycle-management/continuous-delivery-dashboard-qa-and/</link>
		<comments>/index.php/enterprisedev/application-lifecycle-management/continuous-delivery-dashboard-qa-and/#comments</comments>
		<pubDate>Thu, 22 Dec 2011 10:57:00 +0000</pubDate>
		<dc:creator><![CDATA[Eli Weinstock-Herman (tarwn)]]></dc:creator>
				<category><![CDATA[Application Lifecycle Management]]></category>
		<category><![CDATA[continuous delivery]]></category>
		<category><![CDATA[continuous integration]]></category>
		<category><![CDATA[jenkins]]></category>
		<category><![CDATA[mvc music store]]></category>
		<category><![CDATA[webdeploy]]></category>

		<guid isPermaLink="false">/index.php/2011/12/continuous-delivery-dashboard-qa-and/</guid>
		<description><![CDATA[Automating the deployment of software to the various test, QA, and Production environments streamlines the software delivery process, provides a well-practiced routine prior to the production deployment, and removes a lot of the risks that come with depending on people's memories and checklists in order to get a working production push.]]></description>
				<content:encoded><![CDATA[<p>Automating the deployment of software to the various test, QA, and Production environments streamlines the software delivery process, provides a well-practiced routine prior to the production deployment, and removes a lot of the risks that come with depending on people&#8217;s memories and checklists in order to get a working production push. Automating the deployment also makes the process more repeatable and less prone to error, simplifying the creation or recreation of an environment not just for the current release, but for past releases as well.</p>
<div style="text-align: center; font-size: .9em; color: #666666;">
	<img src="http://tiernok.com/LTDBlog/ContinuousDelivery/Overview_p6.png" title="Delivery Pipeline - Focus of Current Post" /><br />
	Delivery Pipeline &#8211; Focus of Current Post
</div>
<p>This is the final post in a multi-part series on my Continuous Delivery pipeline project. The <a href="/index.php/EnterpriseDev/application-lifecycle-management/continuous-delivery-adding-an-automated" title="Adding an Automated Interface Testing stage">previous post</a> followed the implementation of the automated interface stage, the second job in my chain of automated jobs. The last steps in my pipeline will be push button deployments to my QA and production environments. While I don&#8217;t have a true QA process and the production environment is simply a subfolder <a href="http://tiernok.com/MVCMusicStore/" title="MVCMusicStore on my personal site">on my personal site</a>, I wanted to include these two steps because they will be common to most real pipelines.</p>
<h2>The Dashboard</h2>
<p>Early on in the project I found a &#8220;Build Pipeline&#8221; plugin for Jenkins and started looking into it. Before finding this, I was expecting I would have to write my own dashboard for visualization and triggering manual deployments. Luckily <a href="http://www.centrumsystems.com.au/" title="Centrum Systems">Centrum Systems</a> has already done the hard work for us in creating and making available the &#8220;Build Pipeline&#8221; plugin.</p>
<p>As with other plugins, the &#8220;Build Pipeline&#8221; plugin is available through the &#8220;Available Plugins&#8221; menu in Jenkins. This plugin is what&#8217;s known as a &#8220;View&#8221; plugin. It allows us to generate a new view of the build data on our dashboard, then layers additional functionality and available configuration values into the jobs.</p>
<p>The configuration instructions on <a href="https://wiki.jenkins-ci.org/display/JENKINS/Build+Pipeline+Plugin" title="Build Pipeline Plugin page">the Build Pipeline Plugin page</a> provide all the information that is necessary to get started.</p>
<div style="text-align: center; font-size: .9em; color: #666666;">
	<img src="http://tiernok.com/LTDBlog/ContinuousDelivery/pipeline_setup1.png" title="Build Pipeline Plugin - Setup" /><br />
	Build Pipeline Plugin &#8211; Setup
</div>
<p>In the initial setup I have provided a name and title and, most importantly, selected the CI Build job as my pipeline starting point. Pressing Ok, the plugin looks at my build and will generate the pipeline starting at that selected project and tracing it forward through build triggers to any additional projects. In my case, I only have the CI build and the interface test job, so I get a pipeline with just two steps.</p>
<div style="text-align: center; font-size: .9em; color: #666666;">
	<a href="http://tiernok.com/LTDBlog/ContinuousDelivery/pipeline_2step_lg.png" title="Larger view" target="_blank"><img src="http://tiernok.com/LTDBlog/ContinuousDelivery/pipeline_2step.png" title="Pipeline Dashboard - CI and Interface Tests" /></a><br />
	Pipeline Dashboard &#8211; CI and Interface Tests
</div>
<p>The pipeline dashboard shows me the two steps (left to right) of my current pipeline and the trigger on the left side (either the Hg revision number or &#8220;No revision&#8221; for manual builds). Inside each tile is the name of the job, date, and duration. Each tile also links to the details for the specific run.</p>
<h3>Manually Execute Downstream Jobs</h3>
<p>With the addition of the pipeline plugin, there is a new option available in the Post-build section to define downstream projects to be manually triggered.</p>
<div style="text-align: center; font-size: .9em; color: #666666;">
	<img src="http://tiernok.com/LTDBlog/ContinuousDelivery/pipeline_newtrigger.png" title="Interface Job - Manual Trigger for QA Deployment" /><br />
	Interface Job &#8211; Manual Trigger for QA Deployment
</div>
<p>When the next step in a build chain is triggered by this type of build trigger instead of the normal trigger or parametrized trigger I added in the previous post, it is displayed in the pipeline dashboard with a button.</p>
<div style="text-align: center; font-size: .9em; color: #666666;">
	<img src="http://tiernok.com/LTDBlog/ContinuousDelivery/pipeline_deploybutton.png" title="Pipeline Dashboard - Manual Trigger Button" /><br />
	Pipeline Dashboard &#8211; Manual Trigger Button
</div>
<p>These are perfect for our QA and production steps, as the build chain will execute up until this point and then wait for a human to make the decision to update the QA or production environment. When I push the button, the information is still available from the previous portion of the build chain, including environment variables (like the SOURCE_BUILD_NUMBER) that were set in the beginning. </p>
<p><i>Note: There is currently a bug in the Pipeline plugin where the value for a parametrized build is overwritten by it&#8217;s default value when you retry a build. This means that currently if an Interface Tests job fails, retrying will retry for SOURCE_BUILD_NUMBER=0 instead of the proper value from it&#8217;s previous step, which will fail. The value still works fine for the later steps, as there isn&#8217;t a default to override it.</i></p>
<p>Now all I need is a QA and Production step.</p>
<h2>QA and Production Deployment</h2>
<p>The QA and Production deployment steps are going to be very nearly the same. Both will be responsible for getting the artifacts that were generated in the first step of the build chain, deploying those artifacts to the appropriate server, and then running the smoke tests to verify the deployment was executed successfully. These are all steps I have done in prior jobs, so this may actually be as easy as I expect it to be.</p>
<h3>Creating the Deployment Jobs</h3>
<p>To start with I create the empty &#8220;ASPNet MVC Music Store Deploy to QA&#8221; and &#8220;ASPNet MVC Music Store Deploy to Production&#8221; jobs in Jenkins. Returning to the Automated Interface job, I set the &#8220;Manually Execute Downstream Project&#8221; to my new QA job. In the QA job, I set the value to my Production job.</p>
<p>And I check twitter in both, because it&#8217;s fun to see all the tweets.</p>
<p>Now, either because the environment variables are passed from the first job to all subsequent jobs or because there&#8217;s some magic that happens when a build triggers a second one, I still have access to &#8220;SOURCE_BUILD_NUMBER&#8221; with the CI job&#8217;s build number. This is good, because I can use almost exactly the same settings as the relevant steps in the Interface test job to build out these two new jobs:</p>
<ul>
<li>Windows Batch Step to delete local files: del /s /q *</li>
<li>Copy Artifacts from another project, by number using SOURCE_BUILD_NUMBER</li>
<li>Windows Batch Step to execute an msdeploy</li>
<li>VBScript call to run the smoke tests</li>
<li>Capture the test results in the post-build step</li>
</ul>
<p>The only difference between the QA and production version of these is the MSDeploy script and the URL for the smoke tests. </p>
<p><b>QA MS Deploy Command:</b><br />
<code class="codespan">"C:Program FilesIISMicrosoft Web Deploy V2\msdeploy.exe" -source:package='%WORKSPACE%PriorArtifactsMvcMusicStore.zip' -dest:auto,computerName='AVL-BETA-01',userName='AVL-BETA-01Administrator',password='MYPASSWORD',includeAcls='False' -verb:sync -disableLink:AppPoolExtension -disableLink:ContentExtension -disableLink:CertificateExtension -setParam:"IIS Web Application Name"="Default Web Site/MvcMusicStore_QA"</code></p>
<p>The production one, however, is deploying to a webhost and needs a different set of information in order to chat with my webhosts Management services.</p>
<p><b>Production MS Deploy Command:</b><br />
<code class="codespan">"C:Program FilesIISMicrosoft Web Deploy V2\msdeploy.exe" -source:package='%WORKSPACE%PriorArtifactsMvcMusicStore.zip' -dest:auto,computerName='https://DEPLOY_ADDRESS_PROVIDED_BY_HOST:8172/MsDeploy.axd?site=tiernok.com',userName='MY_USERNAME',password='MY_PASSWORD',includeAcls='False',authtype=basic -allowUntrusted  -verb:sync -disableLink:AppPoolExtension -disableLink:ContentExtension -disableLink:CertificateExtension -setParam:"IIS Web Application Name"="tiernok.com/MvcMusicStore" -enableRule:DoNotDeleteRule </code></p>
<p>Because these jobs both rely on their upstream jobs to provide the necessary information, I can&#8217;t test them manually until I have the whole pipeline together. However, the only new part of this is the msdeploy command, which I can run manually from the command line to verify it&#8217;s working (or verify it&#8217;s broken, tweak it, run again, run again, run again, curse, get it right, paste it back into Jenkins).</p>
<h2>The Pipeline</h2>
<p>With the addition of &#8220;manually execute deployments&#8221; to the QA and Production environment, I&#8217;ve completed all the pieces I outlined in my original pipeline plan.</p>
<div style="text-align: center; font-size: .9em; color: #666666;">
	<img src="http://tiernok.com/LTDBlog/ContinuousDelivery/Overview.png" title="Delivery Pipeline" /><br />
	Delivery Pipeline
</div>
<p>The dashboard in Jenkins has incorporated these two new jobs and now shows all 4 in each row, along with the buttons for QA and Prod deployments that haven&#8217;t run.</p>
<div style="text-align: center; font-size: .9em; color: #666666;">
	<a href="http://tiernok.com/LTDBlog/ContinuousDelivery/pipeline_done_lg.png" title="Larger view" target="_blank"><img src="http://tiernok.com/LTDBlog/ContinuousDelivery/pipeline_done.png" title="Pipeline Dashboard - All Steps" /></a><br />
	Pipeline Dashboard &#8211; All Steps
</div>
<p>The individual tiles change color to indicate their status at a glance. As the build progresses, each step fires off a tweet to keep me up to date on what&#8217;s going on. </p>
<div style="text-align: center; font-size: .9em; color: #666666;">
	<a href="http://tiernok.com/LTDBlog/ContinuousDelivery/pipeline_inprogress.png" title="Larger view" target="_blank"><img src="http://tiernok.com/LTDBlog/ContinuousDelivery/pipeline_inprogress.png" title="Pipeline Dashboard - In Progress" /></a><br />
	Pipeline Dashboard &#8211; In Progress
</div>
<p>And there we have it, my completed pipeline.</p>
<h2>Next Steps</h2>
<p>With the pipeline done, I now have any number of next steps I could pursue. It&#8217;s bothered me that I took the easy way out on the database deployments, so I could return to add those in. I could also continue to extend the unit and interface tests, add static analysis of the code, even put in a step to verify that the HTML meets a published standard or that the page loads meet a minimum set of criteria. </p>
<p>It&#8217;s been an interesting project, if a bit frustrating at times (thanks webdeploy). Feel free to follow up with me on the forums or in the comments below. If I do make additions to this later, I&#8217;ll list them in the <a href="http://wiki.lessthandot.com/index.php/Eli%27s_Continuous_Delivery_Project" title="Eli's COntinuous Deployment Project wiki entry">wiki post</a> for the project.</p>
<style>
.thelist li{ color: #666666; }
.thelist .cur{ font-style: italic; color: black; }
</style>
<ul class="thelist">
<li><a href="http://wiki.lessthandot.com/index.php/Eli%27s_Continuous_Delivery_Project" title="Wiki post for Eli's Continuous Delivery Project">Wiki Post</a></li>
<li><a href="/index.php/EnterpriseDev/application-lifecycle-management/starting-a-continuous-delivery-project" title="Starting a Continuous Delivery Project">Starting a Continuous Delivery Project</a></li>
<li><a href="/index.php/EnterpriseDev/application-lifecycle-management/continuous-delivery-project-setting-up" title="Setting up the Continuous Integration stage">Setting up the Continuous Integration stage</a></li>
<li><a href="/index.php/EnterpriseDev/UnitTest/continuous-delivery-project-making-mvcmusicstore" title="Making ASP.Net MVC Music Store Testable">Making ASP.Net MVC Music Store Testable</a></li>
<li><a href="/index.php/EnterpriseDev/UnitTest/continuous-delivery-project-incorporating-the" title="Incorporating Unit Tests in the CI stage">Incorporating Unit Tests in the CI stage</a></li>
<li><a href="/index.php/EnterpriseDev/application-lifecycle-management/continuous-delivery-project-deploy-and" title="Deploy and Smoke Test">Deploy and Smoke Test</a></li>
<li><a href="/index.php/EnterpriseDev/application-lifecycle-management/continuous-delivery-adding-an-automated" title="Adding an Automated Interface Testing stage">Adding an Automated Interface Testing stage</a></li>
<li class="cur"><a href="" title="Dashboard, QA and Production Deployment stage">Dashboard, QA and Production Deployment stage</a></li>
</ul>
]]></content:encoded>
			<wfw:commentRss>/index.php/enterprisedev/application-lifecycle-management/continuous-delivery-dashboard-qa-and/feed/</wfw:commentRss>
		<slash:comments>5</slash:comments>
		</item>
		<item>
		<title>Continuous Delivery &#8211; Adding an Automated Interface Test Stage</title>
		<link>/index.php/enterprisedev/application-lifecycle-management/continuous-delivery-adding-an-automated/</link>
		<comments>/index.php/enterprisedev/application-lifecycle-management/continuous-delivery-adding-an-automated/#respond</comments>
		<pubDate>Wed, 21 Dec 2011 10:47:00 +0000</pubDate>
		<dc:creator><![CDATA[Eli Weinstock-Herman (tarwn)]]></dc:creator>
				<category><![CDATA[Application Lifecycle Management]]></category>
		<category><![CDATA[continuous delivery]]></category>
		<category><![CDATA[continuous integration]]></category>
		<category><![CDATA[jenkins]]></category>
		<category><![CDATA[mvc music store]]></category>
		<category><![CDATA[selenium]]></category>
		<category><![CDATA[webdeploy]]></category>

		<guid isPermaLink="false">/index.php/2011/12/continuous-delivery-adding-an-automated/</guid>
		<description><![CDATA[Human beings are good at creative tasks. Put an end user in front of an interface and ask them to find an error and good luck stuffing that particular cat back into the bag. Where we don't perform as well is performing those tasks repetitively.]]></description>
				<content:encoded><![CDATA[<p>Human beings are good at creative tasks. Put an end user in front of an interface and ask them to find an error and good luck stuffing that particular cat back into the bag. Where we don&#8217;t perform as well is performing those tasks repetitively. After several cycles we begin to lose focus, start listening more to our expectations than what we are actually seeing in front of us, gradually forget steps, or worse lose track and have to restart from the beginning. By automating the redundant tasks, we play to the strengths of the computer and free the human to return to creative duties.</p>
<div style="text-align: center; font-size: .9em; color: #666666;">
	<img src="http://tiernok.com/LTDBlog/ContinuousDelivery/Overview_p5.png" title="Delivery Pipeline - Focus of Current Post" /><br />
	Delivery Pipeline &#8211; Focus of Current Post
</div>
<p>This is the fifth post in a multi-part series on my Continuous Delivery pipeline project. The <a href="/index.php/EnterpriseDev/application-lifecycle-management/continuous-delivery-project-deploy-and" title="Deploy and Smoke Test">previous post</a> completed the Continuous Integration job by performing a test deployment of the final package. In this post I&#8217;ll build the next stage in the pipeline, a job that is responsible for performing automated system testing against the website.</p>
<h2>The Interface Automation Stage</h2>
<p>In a production project this would probably be called Automated User Acceptance testing, but this project seems far too small to use that term and I don&#8217;t intend to automate enough user requirements. So I&#8217;ll refer to it as the Interface Automation Test project.</p>
<p>The Interface Automation stage will consist of the following steps:</p>
<ul>
<li>Start when triggered by CI Build Job</li>
<li>Retrieve the automation project from it&#8217;s <a href="https://bitbucket.org/tarwn/mvcmusicstore.interfacetests" title="MVCMusicStore.InterfaceTests on bitBucket">code repository</a></li>
<li>Retrieve the specific zip package the triggering CI build produced</li>
<li>Build the Automated test project</li>
<li>Deploy the site to a test site</li>
<li>Smoke test the deployment</li>
<li>Run the automated tests</li>
<li>Import the test results and finish</li>
</ul>
<p>Let&#8217;s start with the automated interface tests.</p>
<h2>MvcMusicStore.InterfaceTests</h2>
<p>The Interface tests project is a separate project and repository from the production site. Keeping this solution separate allows the CI build job to only be concerned with building the production code and unit tests and prevents the risk of cross-contamination between the production project and the automated interface project. </p>
<p>The project is available on <a href="https://bitbucket.org/tarwn/mvcmusicstore.interfacetests" title="MvcMusicStore.InterfaceTests on BitBucket">BitBucket</a>. I don&#8217;t intend to dive into the all of the details of building that project (and to be honest I didn&#8217;t build much in the way of test coverage), but feel free to follow up with me on the forums or in the comments below if you would like to discuss it.</p>
<div style="text-align: center; font-size: .9em; color: #666666;">
	<img src="http://tiernok.com/LTDBlog/ContinuousDelivery/interfacetests.png" title="Interface Tests Project" /><br />
	Interface Tests Project
</div>
<p>The project uses Selenium WebDriver to interface with the web browser by implementing the PageObject pattern (I covered this in a <a href="/index.php/WebDev/UIDevelopment/automated-web-testing-with-selenium-2" title="Automated Web Testing with Selenium WebDriver">previous Selenium post</a> if you would like to read more about the mechanics). Using this pattern I create a library of &#8220;Pages&#8221; that each correspond to a Page in my website.</p>
<p>With an abstracted library of &#8220;Pages&#8221;, I then use Nunit to write tests that follow a path of actions or pages through the site. For instance, a tour of the site looks like this:</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="csharp"><thead><tr><td colspan="2"  class="head">C#</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
</pre></td><td class="de1"><pre class="de1"><span class="br0">&#91;</span>TestFixture<span class="br0">&#93;</span>
<span class="kw1">public</span> <span class="kw4">class</span> BasicSmokeTests <span class="sy0">:</span> TestFixtureBase <span class="br0">&#123;</span>
&nbsp;
&nbsp; &nbsp; <span class="br0">&#91;</span>Test<span class="br0">&#93;</span>
&nbsp; &nbsp; <span class="kw1">public</span> <span class="kw4">void</span> SmokeTest_TourTheTopLinks<span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; IndexPage index <span class="sy0">=</span> PageBase<span class="sy0">.</span><span class="me1">LoadIndexPage</span><span class="br0">&#40;</span>CurrentDriver, Settings<span class="sy0">.</span><span class="me1">CurrentSettings</span><span class="sy0">.</span><span class="me1">BaseUrl</span><span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="sy0">.</span><span class="me1">NavigateToStore</span><span class="br0">&#40;</span><span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="sy0">.</span><span class="me1">NavigateToLogo</span><span class="br0">&#40;</span><span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="sy0">.</span><span class="me1">NavigateToCart</span><span class="br0">&#40;</span><span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="sy0">.</span><span class="me1">NavigateToHome</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp;
<span class="br0">&#125;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">[TestFixture]
public class BasicSmokeTests : TestFixtureBase {

	[Test]
	public void SmokeTest_TourTheTopLinks() {
		IndexPage index = PageBase.LoadIndexPage(CurrentDriver, Settings.CurrentSettings.BaseUrl)
					  .NavigateToStore()
					  .NavigateToLogo()
					  .NavigateToCart()
					  .NavigateToHome();
	}

}</pre></div></div>

<p>Each page is aware of the shared top navigation links and implements methods to click those links and return the PageLibrary page that is associated with the real website page the link leads to. During navigation, the engine compares the expected page title in the object to the actual title in the browser to ensure we have loaded the page we were expecting. This allows me to treat each navigation as an implicit assertion as well, without having to specify it separately.</p>
<p>I use a TestFixtureBase class to manage the browser Driver instance and to load settings out of a local configuration file. This configuration file currently only lists the URL the site, but could also contain test usernames or data to use for a specific environment.</p>
<p>With a framework in place, it is easy to start expanding coverage.</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="csharp"><thead><tr><td colspan="2"  class="head">C#</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
</pre></td><td class="de1"><pre class="de1"><span class="br0">&#91;</span>Test<span class="br0">&#93;</span>
<span class="kw1">public</span> <span class="kw4">void</span> WhenTheUserSelectsTheClassicalGenre_TheyArePresentedWithTheListOfAlbums<span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; PageBase<span class="sy0">.</span><span class="me1">LoadIndexPage</span><span class="br0">&#40;</span>CurrentDriver, Settings<span class="sy0">.</span><span class="me1">CurrentSettings</span><span class="sy0">.</span><span class="me1">BaseUrl</span><span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="sy0">.</span><span class="me1">SelectGenre</span><span class="br0">&#40;</span><span class="st0">&quot;Classical&quot;</span><span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="sy0">.</span><span class="me1">AssertAlbumsPresent</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
<span class="br0">&#125;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">[Test]
public void WhenTheUserSelectsTheClassicalGenre_TheyArePresentedWithTheListOfAlbums() {
	PageBase.LoadIndexPage(CurrentDriver, Settings.CurrentSettings.BaseUrl)
			.SelectGenre("Classical")
			.AssertAlbumsPresent();
}</pre></div></div>

<p>Because I have used the Nunit framework, I can use any existing Nunit testrunner to run these tests, including the standard Nunit GUI or console executable.</p>
<h2>Creating the Build Job</h2>
<p>With a basic automated interface project built, I have enough of what I need to configure the new build job.</p>
<h3>Create the Job and Build</h3>
<p>Opening Jenkins in my browser, I create a New Job, selecting the freestyle project and specifying the name and a useful description. In the job configuration I go ahead and setup the mercurial repository information to pull down the Automated Interface test code. I then add steps to execute a build of the project and verify that the job works so far.</p>
<div style="text-align: center; font-size: .9em; color: #666666;">
	<img src="http://tiernok.com/LTDBlog/ContinuousDelivery/config_stage2_build.png" title="Build Configuration" /><br />
	Interface Tests &#8211; Build Configuration
</div>
<p>To test the settings thus far, I&#8217;ll trigger a build manually and verify this portion of the project works. I&#8217;ll also go ahead and add <a href="https://twitter.com/#!/TarwnBuildSrvr" title="@TarwnBuildSrvr on Twitter">twitter</a> to my post-build steps again, just because.</p>
<h3>Import the CI Artifacts</h3>
<p>With the build step working, now I can focus on picking up the artifacts from the CI Build and getting them setup on a test site. From the plugins screen I install the &#8220;Copy Artifact&#8221; plugin, the &#8220;Trigger Parametrized Build&#8221; plugin, and the &#8220;Nunit&#8221; plugin. </p>
<p>In the top of my job configuration I&#8217;ll check the &#8220;This Build is Parametrized&#8221; box and add a SOURCE_BUILD_NUMBER parameter where I will specify the CI Job&#8217;s build number that I want to run against. Initially this will require me to manually enter the build number, a bit later I&#8217;ll return to the CI Build and create a trigger to pass the parameter automatically.</p>
<div style="text-align: center; font-size: .9em; color: #666666;">
	<img src="http://tiernok.com/LTDBlog/ContinuousDelivery/config_stage2_params.png" title="Build Parameters" /><br />
	Interface Tests &#8211; Build Parameters
</div>
<p>Next, I&#8217;ll add a &#8220;Copy artifacts from another project&#8221; step (Thank you &#8220;Copy Artifacts&#8221; plugin) to the top of the build steps. This plugin has a number of different options, but I&#8217;ll use the build number I passed in as a parameter to retrieve the artifacts. Using the parametrized number option allows me to run the job by typing a build number in, which can be handy, and is similar to how the later QA and Production deploy stages will be setup to retrieve artifacts (I like consistency).</p>
<div style="text-align: center; font-size: .9em; color: #666666;">
	<img src="http://tiernok.com/LTDBlog/ContinuousDelivery/config_stage2_artifacts.png" title="Copy Artifacts" /><br />
	Interface Tests &#8211; Copy Artifacts
</div>
<p>At this point I realized I had forgotten to check the &#8220;Clean Build&#8221; option in my Mercurial settings, so I&#8217;ll go back and add that so I don&#8217;t risk having a stale copy of the artifacts from a prior run.</p>
<h3>Deploy and Smoke Test</h3>
<p>Now that I have all the pieces in place, it&#8217;s just a matter of putting them together. Like the CI Build Job, I&#8217;ll create a Deploy batch command and a Smoke Test batch command. The only difference is that here I have specified a different target website and I have used the parametrized &#8220;SOURCE_BUILD_NUMBER&#8221; instead of the local BUILD_NUMBER environment variable.</p>
<div style="text-align: center; font-size: .9em; color: #666666;">
	<img src="http://tiernok.com/LTDBlog/ContinuousDelivery/config_stage2_deploy.png" title="Deploy for Testing" /><br />
	Interface Tests &#8211; Deploy for Testing
</div>
<p>I&#8217;ll also configure the test results to be captured in the Post-build, just like the CI Build.</p>
<h3>Run the Automation Tests</h3>
<p>I&#8217;ll download Nunit from the <a href="http://www.nunit.org/" title="Nunit.org">Nunit website</a> and install that on my server, then create the last two steps to put the correct configuration file in my assembly folder and run the Nunit testrunner to execute the tests. At this point I&#8217;ll also install Firefox on the server, as that is the browser I am automating for the tests.</p>
<div style="text-align: center; font-size: .9em; color: #666666;">
	<img src="http://tiernok.com/LTDBlog/ContinuousDelivery/config_stage2_runtests.png" title="Run the Tests" /><br />
	Interface Tests &#8211; Run the Tests
</div>
<p>The first step is a basic copy command to copy the prepared &#8220;auto&#8221; config to &#8220;TestRun.config&#8221;, the file my test code will pick up when it starts. The Nunit command executes the nunit console against the compiled assembly, which runs all available test methods in the assembly, just as if I was running it from the GUI.</p>
<p><code class="codespan">"C:Program Files (x86)NUnit 2.5.10binnet-2.0nunit-console.exe" MvcMusicStore.InterfaceTestsbinDebugMvcMusicStore.InterfaceTests.dll /framework:net-4.0 /xml:SeleniumTestResult.xml</code></p>
<p>The last part, before I run my build again, is to import the results of the test run like like I did with MS Test and the smoke tests. The Nunit plugin has provided a &#8220;Publish Nunit test result report&#8221; section in the post-build options, so I&#8217;ll check that box and enter the xml path I specified for the output of the nunit-console command.</p>
<p>With that completed, I&#8217;ll run the test again to verify the results.</p>
<div style="text-align: center; font-size: .9em; color: #666666;">
	<img src="http://tiernok.com/LTDBlog/ContinuousDelivery/config_stage2_failedrun.png" title="Failed Test" /><br />
	Interface Tests &#8211; Failed Test
</div>
<p>Hmm, that saves me the trouble of breaking the tests to make sure the results are accurate. It turns out when I was cleaning up absolute paths in the MVCMusicStore project I missed the link under the logo, so when the tests tried to navigate through that link they didn&#8217;t get to the page they were expecting and correctly failed the test.</p>
<p>Fix that issue, wait for the CI Build to run again, trigger this job with the number of that last CI Build and now I have a success.</p>
<h2>Wiring them Together</h2>
<p>The last step is to configure the CI Build to automatically trigger this new job when it completes. Opening the CI Build job, there is a new option in the Post-build configuration section that was added when I installed the &#8220;Trigger Parametrized Builds&#8221; plugin. I&#8217;ll add a &#8220;Predefined Parameter&#8221; with the same name as I used in the new job, SOURCE_BUILD_NUMBER, and I&#8217;ll populate it with the local BUILD_NUMBER environment variable of the CI Build job.</p>
<div style="text-align: center; font-size: .9em; color: #666666;">
	<img src="http://tiernok.com/LTDBlog/ContinuousDelivery/config_parameterized.png" title="Parameterized Build Trigger" /><br />
	CI Build &#8211; Parameterized trigger
</div>
<p>Saving the change, when I execute a CI job now, it successfully triggers an Automated Interface Test job on the build artifact it just completed.</p>
<h2>Next Steps</h2>
<p>With a functioning CI Build job and a triggered automated test job, we&#8217;re in the home stretch. The last steps will be to implement a nice dashboard for these to provide a graphical representation of each individual build chain and to create build jobs to deploy to a QA and a production environment, the last two steps of my process diagram above.</p>
<style>
.thelist li{ color: #666666; }
.thelist .cur{ font-style: italic; color: black; }
</style>
<ul class="thelist">
<li><a href="http://wiki.lessthandot.com/index.php/Eli%27s_Continuous_Delivery_Project" title="Wiki post for Eli's Continuous Delivery Project">Wiki Post</a></li>
<li><a href="/index.php/EnterpriseDev/application-lifecycle-management/starting-a-continuous-delivery-project" title="Starting a Continuous Delivery Project">Starting a Continuous Delivery Project</a></li>
<li><a href="/index.php/EnterpriseDev/application-lifecycle-management/continuous-delivery-project-setting-up" title="Setting up the Continuous Integration stage">Setting up the Continuous Integration stage</a></li>
<li><a href="/index.php/EnterpriseDev/UnitTest/continuous-delivery-project-making-mvcmusicstore" title="Making ASP.Net MVC Music Store Testable">Making ASP.Net MVC Music Store Testable</a></li>
<li><a href="/index.php/EnterpriseDev/UnitTest/continuous-delivery-project-incorporating-the" title="Incorporating Unit Tests in the CI stage">Incorporating Unit Tests in the CI stage</a></li>
<li><a href="/index.php/EnterpriseDev/application-lifecycle-management/continuous-delivery-project-deploy-and" title="Deploy and Smoke Test">Deploy and Smoke Test</a></li>
<li class="cur"><a href="/index.php/EnterpriseDev/application-lifecycle-management/continuous-delivery-adding-an-automated" title="Adding an Automated Interface Testing stage">Adding an Automated Interface Testing stage</a></li>
<li><a href="/index.php/EnterpriseDev/application-lifecycle-management/continuous-delivery-dashboard-qa-and" title="Dashboard, QA and Production Deployment stage">Dashboard, QA and Production Deployment stage</a></li>
</ul>
]]></content:encoded>
			<wfw:commentRss>/index.php/enterprisedev/application-lifecycle-management/continuous-delivery-adding-an-automated/feed/</wfw:commentRss>
		<slash:comments>0</slash:comments>
		</item>
		<item>
		<title>Continuous Delivery Project &#8211; Deploy and Smoke Test</title>
		<link>/index.php/enterprisedev/application-lifecycle-management/continuous-delivery-project-deploy-and/</link>
		<comments>/index.php/enterprisedev/application-lifecycle-management/continuous-delivery-project-deploy-and/#comments</comments>
		<pubDate>Tue, 20 Dec 2011 10:56:00 +0000</pubDate>
		<dc:creator><![CDATA[Eli Weinstock-Herman (tarwn)]]></dc:creator>
				<category><![CDATA[Application Lifecycle Management]]></category>
		<category><![CDATA[continuous delivery]]></category>
		<category><![CDATA[continuous integration]]></category>
		<category><![CDATA[jenkins]]></category>
		<category><![CDATA[mvc music store]]></category>
		<category><![CDATA[webdeploy]]></category>

		<guid isPermaLink="false">/index.php/2011/12/continuous-delivery-project-deploy-and/</guid>
		<description><![CDATA[Executing an integration build and unit test run on the build server is all well and good, but before we can say a build is complete and ready to go, it's a good idea to know it will work when it is deployed. Executing a test deployment and then smoke testing it will ensure the archived build is ready to be deployed to test or production environments and that the necessary configurations and resources are available and working.]]></description>
				<content:encoded><![CDATA[<p>Executing an integration build and unit test run on the build server is all well and good, but before we can say a build is complete and ready to go, it&#8217;s a good idea to know it will work when it is deployed. Executing a test deployment and then smoke testing it will ensure the archived build is ready to be deployed to test or production environments and that the necessary configurations and resources are available and working.</p>
<div style="text-align: center; font-size: .9em; color: #666666;">
	<img src="http://tiernok.com/LTDBlog/ContinuousDelivery/Overview_p4.png" title="Delivery Pipeline - Focus of Current Post" /><br />
	Delivery Pipeline &#8211; Focus of Current Post
</div>
<p>This is the fifth post in a multi-part series on my Continuous Deployment pipeline project. The <a href="/index.php/EnterpriseDev/UnitTest/continuous-delivery-project-incorporating-the" title="Continuous Delivery Project - Incorporating the Unit Tests">previous post</a> covered integrating unit tests into the Continuous Integration stage. This post will cover the final portion of that stage, an automated deployment of the site and smoke test to make sure it can be deployed in a working state.</p>
<h2>Preparing to Deploy</h2>
<p>The first thing we need in order to deploy is a web server. I initially intended to use a local IIS Express instance to do the test deployment but after some very long hours I decided to stop trying to make MSDeploy do something it obviously did not want to do. When the IIS Express idea fell through, I decided to use separate Applications on my newly created AVL-BETA-01 VM for different stages in my build pipeline, with a dedicated Application target just for this brief deploy-and-test step.</p>
<h3>Server Details:</h3>
<ul>
<li>Windows 2008 R2 VM, Patched and up to date</li>
<li>Installed Web Deploy 2.1 through Web Platform Installer (http://www.microsoft.com/web)</li>
<li>Added Web Server/IIS role to the server</li>
<li>In the Role Services for IIS, add the non-default Management Service</li>
</ul>
<p>Web Management service is a required service for web deploy, as it is the endpoint that exposes remote configuration capabilities to clients like WebDeploy. </p>
<ul>
<li>Created a build server account (buildsrvr) and set it up as a local admin (cheating), made it the runas acct for Web Management Service</li>
<li>Enabled Remote: Open IIS Manager, Click Management Service, Click enable remote, Apply</li>
</ul>
<p>Using <a href="http://learn.iis.net/page.aspx/516/configure-the-web-deployment-handler/" title="Configure Web Deployment Handler">this guide</a>, I followed the steps to configure the web deployment handler. After several hours of wrestling with less-than-informative 401 permissions errors, even when doing local manual tests, I finally gave in and used the server&#8217;s local administrator account for my webdeploy scripts.</p>
<p><i>I&#8217;m very bitter about this 401 deal. There is a huge list of issues that can potentially happen and they all boiled down to just a few error messages. This whole matter would have been much easier if they had either (a) output detailed errors to the server event log, (b) given me the option on the server to put it into a promiscuous error mode temporarily to output more useful errors to the client, or (c) something in between. Offering the same exact message for multiple issues meant I had no idea when I was making changes whether I was fixing one of several problems or just making changes that had no effect.</i></p>
<p>The last step was to modify my target application pool to use .Net framework 4.0 (I cheated and used the default pool).</p>
<h2>Manually Deploying</h2>
<p>With the server setup, the last few steps were completed by trying to manually deploy the site to the target server. Opening a command prompt, I executed a variant of the following command to attempt to deploy my site package to the server:</p>
<p><code class="codespan">"C:Program FilesIISMicrosoft Web Deploy V2\msdeploy.exe" -source:package='c:Program Files (x86)JenkinsjobsASPNet MVC Music Store CI BuildworkspaceMvcMusicStoreobjReleasePackageMvcMusicStore.zip' -dest:auto,computerName='AVL-BETA-01',userName='AVL-BETA-01Administrator',password='MYPASSWORD',includeAcls='False' -verb:sync -disableLink:AppPoolExtension -disableLink:ContentExtension -disableLink:CertificateExtension -setParam:"IIS Web Application Name"="Default Web Site/MvcMusicStore_SmokeTest" -whatif</code></p>
<p>This command basically says that I want to deploy from the packaged zip file to the following destination, with the additional &#8220;IIS Web Application Name&#8221; parameters set to the name of the website and Application I want to deploy to on the server. The &#8220;-whatif&#8221; flag on the end tells MSDeploy that I want to do a simulated deployment. This causes MSDeploy to do all of the steps of doing a deployment short of actually copying the files up to the server. This was useful during the troubleshooting and configuration above.</p>
<h2>Deploying</h2>
<p>Removing the whatif flag, I can now try to do a full deployment. Unfortunately the site does not run, replying with an ASP.Net error screen that points out missing helper references. Following the helpful instructions <a href="http://mr.chriscompton.me/2011/11/assembly-errors/" title="Helper assembly errors">on this site</a>, I&#8217;ll modify my project properties to include the necessary libraries. After a fresh build and second manual deployment, the site loads correctly.</p>
<div style="text-align: center; font-size: .9em; color: #666666;">
	<a href="http://tiernok.com/LTDBlog/ContinuousDelivery/config_deploy.png" title="Larger picture" target="_blank"><img src="http://tiernok.com/LTDBlog/ContinuousDelivery/config_deploy.png" title="Deployed to SmokeTest Location" /></a><br />
	Deployed to SmokeTest Location
</div>
<p>With the manual command successfully deploying, it&#8217;s now a simple matter to add a new step to my job to execute this same command on every build.</p>
<div style="text-align: center; font-size: .9em; color: #666666;">
	<a href="http://tiernok.com/LTDBlog/ContinuousDelivery/firstdeploy.png" title="Larger picture" target="_blank"><img src="http://tiernok.com/LTDBlog/ContinuousDelivery/firstdeploy.png" title="Deployed Site" /></a><br />
Deployed Site
</div>
<p>To catch us up to date, the build is now getting latest from the code repository, building it, running the unit test suite, and successfully deploying it to IIS on a test server.</p>
<h2>Smoke Testing the Deployment</h2>
<p>Given how small this site is, the are only a few things I want to test on my deployed site to consider it a success. I&#8217;ll want to know that the site is available, that I deployed the version I just finished building, and that some data from the database is being displayed properly.</p>
<p>Looking through those requirements, I need three things:</p>
<ol>
<li>A way to tell what version a deployed site is</li>
<li>A script to execute an HTTP Request against the site</li>
<li>A way to produce results my build engine understands</li>
</ol>
<h3>Version Numbers on the Site</h3>
<p>Adding a version number to the site is not too difficult. I&#8217;ll add a text file to my application that will be used to store the version number, along with some logic for the application begins to read that version number and store it.</p>
<p><b>MVCMusicStore/Content/buildVersion.txt</b></p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="text"><thead><tr><td colspan="2"  class="head">Text</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
</pre></td><td class="de1"><pre class="de1">DEV</pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">DEV</pre></div></div>

<p><b>MVCMusicStore/Global.asax</b></p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="csharp"><thead><tr><td colspan="2"  class="head">C#</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
</pre></td><td class="de1"><pre class="de1"><span class="kw1">protected</span> <span class="kw4">void</span> Application_Start<span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; <span class="co1">// ...</span>
&nbsp; &nbsp; StoreBuildVersion<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
<span class="br0">&#125;</span>
&nbsp;
<span class="kw1">protected</span> <span class="kw4">void</span> StoreBuildVersion<span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; FileInfo fnfo <span class="sy0">=</span> <span class="kw3">new</span> FileInfo<span class="br0">&#40;</span>Server<span class="sy0">.</span><span class="me1">MapPath</span><span class="br0">&#40;</span><span class="st0">&quot;~/Content/Buildversion.txt&quot;</span><span class="br0">&#41;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; <span class="kw1">if</span> <span class="br0">&#40;</span><span class="sy0">!</span>fnfo<span class="sy0">.</span><span class="me1">Exists</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; Application<span class="br0">&#91;</span><span class="st0">&quot;BuildVersion&quot;</span><span class="br0">&#93;</span> <span class="sy0">=</span> <span class="st0">&quot;Unknown(1)&quot;</span><span class="sy0">;</span>
&nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp; &nbsp; <span class="kw1">else</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">try</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">using</span> <span class="br0">&#40;</span>StreamReader sr <span class="sy0">=</span> fnfo<span class="sy0">.</span><span class="me1">OpenText</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Application<span class="br0">&#91;</span><span class="st0">&quot;BuildVersion&quot;</span><span class="br0">&#93;</span> <span class="sy0">=</span> sr<span class="sy0">.</span><span class="me1">ReadToEnd</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">catch</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Application<span class="br0">&#91;</span><span class="st0">&quot;BuildVersion&quot;</span><span class="br0">&#93;</span> <span class="sy0">=</span> <span class="st0">&quot;Unknown(2)&quot;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp; &nbsp; &nbsp; &nbsp; 
&nbsp; &nbsp; <span class="br0">&#125;</span>
<span class="br0">&#125;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">protected void Application_Start() {
	// ...
	StoreBuildVersion();
}

protected void StoreBuildVersion() {
	FileInfo fnfo = new FileInfo(Server.MapPath("~/Content/Buildversion.txt"));
	if (!fnfo.Exists) {
		Application["BuildVersion"] = "Unknown(1)";
	}
	else {
		try {
			using (StreamReader sr = fnfo.OpenText()) {
				Application["BuildVersion"] = sr.ReadToEnd();
			}
		}
		catch {
			Application["BuildVersion"] = "Unknown(2)";
		}
		
	}
}</pre></div></div>

<p>With the version number stored in my application, I can output that value in the footer of each page by adding it to the main _Layout file that is used throughout the site.</p>
<p><b>MVCMusicStore/Views/Shared/_Layout.cshtml</b></p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="csharp"><thead><tr><td colspan="2"  class="head">C#</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
</pre></td><td class="de1"><pre class="de1"><span class="sy0">...</span>
<span class="sy0">&lt;</span>div id<span class="sy0">=</span><span class="st0">&quot;footer&quot;</span><span class="sy0">&gt;</span>
&nbsp; &nbsp; <span class="sy0">&lt;</span>span <span class="kw4">class</span><span class="sy0">=</span><span class="st0">&quot;version&quot;</span><span class="sy0">&gt;</span>Version<span class="sy0">:</span> @HttpContext<span class="sy0">.</span><span class="me1">Current</span><span class="sy0">.</span><span class="me1">Application</span><span class="br0">&#91;</span><span class="st0">&quot;BuildVersion&quot;</span><span class="br0">&#93;</span><span class="sy0">&lt;/</span>span<span class="sy0">&gt;</span>
&nbsp; &nbsp; built with <span class="sy0">&lt;</span>a href<span class="sy0">=</span><span class="st0">&quot;http://asp.net/mvc&quot;</span><span class="sy0">&gt;</span>ASP<span class="sy0">.</span><span class="me1">NET</span> MVC <span class="nu0">3</span><span class="sy0">&lt;/</span>a<span class="sy0">&gt;</span>
<span class="sy0">&lt;/</span>div<span class="sy0">&gt;</span>
<span class="sy0">...</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">...
&lt;div id="footer"&gt;
	&lt;span class="version"&gt;Version: @HttpContext.Current.Application["BuildVersion"]&lt;/span&gt;
	built with &lt;a href="http://asp.net/mvc"&gt;ASP.NET MVC 3&lt;/a&gt;
&lt;/div&gt;
...</pre></div></div>

<p>With the application will displaying the value from the BuildVersion file, all that is left is to insert a step in my job to write the current build number to the file before the project is built and packaged up.</p>
<div style="text-align: center; font-size: .9em; color: #666666;">
	<a href="http://tiernok.com/LTDBlog/ContinuousDelivery/config_buildnumber.png" title="Larger picture" target="_blank"><img src="http://tiernok.com/LTDBlog/ContinuousDelivery/config_buildnumber.png" title="Adding Build Number to Site" /></a><br />
	Adding Build Number to Site
</div>
<p>Ad the build number isadded as part of the CI build job, I&#8217;ll see the word &#8220;DEV&#8221; in my development environment and the appropriate build number everywhere else. Now I can automate tests to check for the expected build number and trace deployed sites back to their original build history.</p>
<h3>Smoke Testing Script</h3>
<p>Writing a script to test the deployed site is fairly straightforward and can be done in any of a dozen different languages. In order to fit my requirements above I need to be able to pass it a URL of the deployed site and a version number, and receive back some information to indicate whether my three test scenarios pass or fail. Because Jenkins has a built-in capability to parse Junit result files, I decided to add a third argument to indicate a test result file location and output the smoke test results as a file in Junit format.</p>
<p>I wrote my smoke test in VBScript and I don&#8217;t currently have it in a public repository, but I can make it available if anyone is curious (it&#8217;s not terribly complicated). The workflow of the script is:</p>
<ul>
<li>Parse the arguments</li>
<li>Perform an HTTP GET on the specified URL</li>
<li>Test 1: Check if the HTTP status code was a 200</li>
<li>Read the return content of the page as string</li>
<li>Test 2: Execute a regular expression test to verify the version number matches the one passed in as an arg</li>
<li>Test 3: Execute a regular expression test to verify some genre links were generated from the database</li>
<li>Output a Junit-compatible file to the location specified as an argument</li>
</ul>
<p>A recent sample of the output looks like this:<br />
<b>SmokeTestResults.xml</b></p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="xml"><thead><tr><td colspan="2"  class="head">XML</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
</pre></td><td class="de1"><pre class="de1"><span class="sc3"><span class="re1">&lt;testsuite</span> <span class="re0">classname</span>=<span class="st0">&quot;SmokeTests.BasicTests&quot;</span> <span class="re0">failures</span>=<span class="st0">&quot;0&quot;</span> <span class="re0">name</span>=<span class="st0">&quot;SmokeTests.BasicTests&quot;</span> <span class="re0">skipped</span>=<span class="st0">&quot;0&quot;</span> <span class="re0">tests</span>=<span class="st0">&quot;3&quot;</span> <span class="re0">time</span>=<span class="st0">&quot;40.5312&quot;</span><span class="re2">&gt;</span></span>
&nbsp; &nbsp; <span class="sc3"><span class="re1">&lt;testcase</span> <span class="re0">name</span>=<span class="st0">&quot;BasicGet&quot;</span> <span class="re0">time</span>=<span class="st0">&quot;40.4375&quot;</span><span class="re2">&gt;</span><span class="re1">&lt;/testcase<span class="re2">&gt;</span></span></span>
&nbsp; &nbsp; <span class="sc3"><span class="re1">&lt;testcase</span> <span class="re0">name</span>=<span class="st0">&quot;VersionStamp&quot;</span> <span class="re0">time</span>=<span class="st0">&quot;0.0625&quot;</span><span class="re2">&gt;</span><span class="re1">&lt;/testcase<span class="re2">&gt;</span></span></span>
&nbsp; &nbsp; <span class="sc3"><span class="re1">&lt;testcase</span> <span class="re0">name</span>=<span class="st0">&quot;Genre Content&quot;</span> <span class="re0">time</span>=<span class="st0">&quot;0&quot;</span><span class="re2">&gt;</span><span class="re1">&lt;/testcase<span class="re2">&gt;</span></span></span>
<span class="sc3"><span class="re1">&lt;/testsuite<span class="re2">&gt;</span></span></span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">&lt;testsuite classname="SmokeTests.BasicTests" failures="0" name="SmokeTests.BasicTests" skipped="0" tests="3" time="40.5312"&gt;
	&lt;testcase name="BasicGet" time="40.4375"&gt;&lt;/testcase&gt;
	&lt;testcase name="VersionStamp" time="0.0625"&gt;&lt;/testcase&gt;
	&lt;testcase name="Genre Content" time="0"&gt;&lt;/testcase&gt;
&lt;/testsuite&gt;</pre></div></div>

<p>With the script built, all I need to do is add a final &#8220;Windows Batch Command&#8221; step to my job to execute this script.</p>
<div style="text-align: center; font-size: .9em; color: #666666;">
	<a href="http://tiernok.com/LTDBlog/ContinuousDelivery/config_smoketest.png" title="Larger picture" target="_blank"><img src="http://tiernok.com/LTDBlog/ContinuousDelivery/config_smoketest.png" title="Job Configuration - Smoke Test" /></a><br />
	Job Configuration &#8211; Smoke Test
</div>
<p>And then configure the post-build step to import the result file as a Junit test result file.</p>
<div style="text-align: center; font-size: .9em; color: #666666;">
	<a href="http://tiernok.com/LTDBlog/ContinuousDelivery/config_smoketestresult.png" title="Larger picture" target="_blank"><img src="http://tiernok.com/LTDBlog/ContinuousDelivery/config_smoketestresult.png" title="Job Configuration - Smoke Test Results" /></a><br />
	Job Configuration &#8211; Smoke Test Results
</div>
<p>With this method I not only get the tests executed as part of every build, but the results are nicely aggregated with the unit test results.</p>
<div style="text-align: center; font-size: .9em; color: #666666;">
	<img src="http://tiernok.com/LTDBlog/ContinuousDelivery/alltests.png" title="All Tests for CI Build" /><br />
	All Tests for CI Build
</div>
<h2>Next Steps</h2>
<p>With the Continuous Integration stage of the delivery pipeline built, it&#8217;s time to start focusing on the later steps of the process. The next post will introduce an automated interface job that picks up where the Continuous Integration stage leaves off to execute a set of Selenium + Nunit tests against a freshly deployed copy of the website.</p>
<style>
.thelist li{ color: #666666; }
.thelist .cur{ font-style: italic; color: black; }
</style>
<ul class="thelist">
<li><a href="http://wiki.lessthandot.com/index.php/Eli%27s_Continuous_Delivery_Project" title="Wiki post for Eli's Continuous Delivery Project">Wiki Post</a></li>
<li><a href="/index.php/EnterpriseDev/application-lifecycle-management/starting-a-continuous-delivery-project" title="Starting a Continuous Delivery Project">Starting a Continuous Delivery Project</a></li>
<li><a href="/index.php/EnterpriseDev/application-lifecycle-management/continuous-delivery-project-setting-up" title="Setting up the Continuous Integration stage">Setting up the Continuous Integration stage</a></li>
<li><a href="/index.php/EnterpriseDev/UnitTest/continuous-delivery-project-making-mvcmusicstore" title="Making ASP.Net MVC Music Store Testable">Making ASP.Net MVC Music Store Testable</a></li>
<li><a href="/index.php/EnterpriseDev/UnitTest/continuous-delivery-project-incorporating-the" title="Incorporating Unit Tests in the CI stage">Incorporating Unit Tests in the CI stage</a></li>
<li class="cur"><a href="/index.php/EnterpriseDev/application-lifecycle-management/continuous-delivery-project-deploy-and" title="Deploy and Smoke Test">Deploy and Smoke Test</a></li>
<li><a href="/index.php/EnterpriseDev/application-lifecycle-management/continuous-delivery-adding-an-automated" title="Adding an Automated Interface Testing stage">Adding an Automated Interface Testing stage</a></li>
<li><a href="/index.php/EnterpriseDev/application-lifecycle-management/continuous-delivery-dashboard-qa-and" title="Dashboard, QA and Production Deployment stage">Dashboard, QA and Production Deployment stage</a></li>
</ul>
]]></content:encoded>
			<wfw:commentRss>/index.php/enterprisedev/application-lifecycle-management/continuous-delivery-project-deploy-and/feed/</wfw:commentRss>
		<slash:comments>5</slash:comments>
		</item>
		<item>
		<title>Continuous Delivery Project &#8211; Incorporating the Unit Tests</title>
		<link>/index.php/enterprisedev/unittest/continuous-delivery-project-incorporating-the/</link>
		<comments>/index.php/enterprisedev/unittest/continuous-delivery-project-incorporating-the/#comments</comments>
		<pubDate>Mon, 19 Dec 2011 13:44:00 +0000</pubDate>
		<dc:creator><![CDATA[Eli Weinstock-Herman (tarwn)]]></dc:creator>
				<category><![CDATA[Application Lifecycle Management]]></category>
		<category><![CDATA[Unit Testing]]></category>
		<category><![CDATA[asp.net mvc]]></category>
		<category><![CDATA[continuous delivery]]></category>
		<category><![CDATA[continuous integration]]></category>
		<category><![CDATA[jenkins]]></category>
		<category><![CDATA[ms test]]></category>
		<category><![CDATA[mvc music store]]></category>
		<category><![CDATA[unit testing]]></category>

		<guid isPermaLink="false">/index.php/2011/12/continuous-delivery-project-incorporating-the/</guid>
		<description><![CDATA[The purpose of the integration build is to bring potential issues to the surface as quickly as possible. Unit tests run quickly and adding them to the continuous integration build helps flush out defects as close to the beginning of the process as possible. Generally build engines will support unit test framework by directly integrating with them or by providing an ability to execute the test framework and import their results.]]></description>
				<content:encoded><![CDATA[<p>The purpose of the integration build is to bring potential issues to the surface as quickly as possible. Unit tests run quickly and adding them to the continuous integration build helps flush out defects as close to the beginning of the process as possible. Generally build engines will support unit test framework by directly integrating with them or by providing an ability to execute the test framework and import their results.</p>
<div style="text-align: center; font-size: .9em; color: #666666;">
	<img src="http://tiernok.com/LTDBlog/ContinuousDelivery/Overview_p3.png" title="Delivery Pipeline - Focus of Current Post" /><br />
	Delivery Pipeline &#8211; Focus of Current Post
</div>
<p>This is the fourth post in a multi-part series on my Continuous Delivery pipeline project. The <a href="/index.php/EnterpriseDev/UnitTest/continuous-delivery-project-making-mvcmusicstore" title="Making MVCMusic Store Testable">previous post</a> followed the changes necessary to add unit testing to the MVC Music Store project, a process that ended in the creation of unit tests for the Checkout process. In this post I will configure the CI build job to run the unit test suite, including extra steps necessary to get the MS Test framework runnable on the build server.</p>
<h2>Run the Build</h2>
<p>With the automated build already polling changes from the source code repository, this process actually started while I was still writing the initial unit tests for the prior post. With the little red &#8220;failed build&#8221; dot as my guide, and the ever present twitter bot reminding me on each broken commit, I ended up working on both the unit tests and the server configuration in overlapping steps.</p>
<div style="text-align: center; font-size: .9em; color: #666666;">
	<a href="http://tiernok.com/LTDBlog/ContinuousDelivery/unittest_firstfail.png" title="Larger picture" target="_blank"><img src="http://tiernok.com/LTDBlog/ContinuousDelivery/unittest_firstfail.png" title="Failing Unit Test Build" /></a><br />
	Failing Unit Test Build
</div>
<p>The initial build failure was due to the addition of the MS Test project to the solution. This test project includes necessary references for the MS Test libraries, but unfortunately those libraries are not included in the project or as part of the .Net framework installation. This causes the build to fail with missing reference errors.</p>
<p>There are several blogs and methods outlined to get MS Test running on a build server, including some registry hacks and other unsupported trickery. After spending some time exploring that route, I eventually gave up and installed Visual Studio on the test server. </p>
<p><i>This is an area that Microsoft could definitely use some improvement in (MS Test integration), but what&#8217;s interesting is that many experts on continuous delivery (of which I am definitely not one) actually suggest using the same software on the build server as the developers use to minimize differences in the builds. Whatever the case, the choice of MS Test generally ends with us having Visual Studio on our build server.</i></p>
<p>Once the install was completed and I had patched Visual Studio up to date, I was able to run successful builds again.</p>
<h2>Run the Tests in the Build</h2>
<p>At this point I am building the test project every time the build runs, but I&#8217;m not actually running any of the tests. In order to run the tests, I am going to drop to the command line and run the MS Test executable directly. To execute a command directly as a build step, I&#8217;ll add a &#8220;Windows Batch Command&#8221; step to the &#8220;Build&#8221; section of my CI Build job.</p>
<div style="text-align: center; font-size: .9em; color: #666666;">
	<a href="http://tiernok.com/LTDBlog/ContinuousDelivery/unittest_command.png" title="Larger picture" target="_blank"><img src="http://tiernok.com/LTDBlog/ContinuousDelivery/unittest_command.png" title="Jenkins Configuration - New Windows Batch Command" /></a><br />
	Jenkins Configuration &#8211; New Windows Batch Command
</div>
<p>The MS Test executable is located in the Visual Studio folder at <code class="codespan">C:Program Files (x86)Microsoft Visual Studio 10.0Common7IDEmstest.exe</code>. I&#8217;ll execute this against the compiled assembly from the MVCMusicStoreTests project and configure the results file to land somewhere obvious so i can import it later. </p>
<p>Jenkins provides a list of variables we can use in commands, in this case I&#8217;ll use the %WORKSPACE% variable to locate the assembly:<br />
<code class="codespan">"C:Program Files (x86)Microsoft Visual Studio 10.0Common7IDEmstest.exe" /resultsfile:"%WORKSPACE%MvcMusicStoreTestsbinReleaseMyTests.Results.xml" /testcontainer:"%WORKSPACE%MvcMusicStoreTestsbinReleaseMvcMusicStoreTests.dll" /nologo</code></p>
<p>At this point, I can run the build again but it doesn&#8217;t show anything different than before until I open the command log. Inside the command log I can see that the tests ran successfully as part of the build. I also can manually verify the results file was published to the location I specified above.</p>
<h2>Integrating the Test Run</h2>
<p>To integrate the MS Test results into Jenkins, I&#8217;ll use a plugin to map the MS Test format to a format that Jenkins natively understands (Junit XML results). A plugin is available from the &#8220;Manage Plugins&#8221; screen (Jenkins, Manage Jenkins, Manage Plugins, Click the Available Tab) to do this work for me. </p>
<p>After the plugin installs successfully, there is a new entry in the &#8220;Post-Build Actions&#8221; section of the job configuration. All I need to do is check the new &#8220;Publish MSTest test result report&#8221; checkbox and enter the path I used above for the result files. </p>
<div style="text-align: center; font-size: .9em; color: #666666;">
	<a href="http://tiernok.com/LTDBlog/ContinuousDelivery/unittest_results.png" title="Larger picture" target="_blank"><img src="http://tiernok.com/LTDBlog/ContinuousDelivery/unittest_results.png" title="Jenkins Configuration - New Windows Batch Command" /></a><br />
	Jenkins Configuration &#8211; New Windows Batch Command
</div>
<p>Now when I run the build again, a new section shows up on the run summary screen that indicates I don&#8217;t have any failing tests. Clicking that link for more details, I can see that Jenkins has parsed that results file from MS Test and provided information on all of the running tests and their execution times.</p>
<div style="text-align: center; font-size: .9em; color: #666666;">
	<a href="http://tiernok.com/LTDBlog/ContinuousDelivery/unittest_success.png" title="Larger picture" target="_blank"><img src="http://tiernok.com/LTDBlog/ContinuousDelivery/unittest_success.png" title="Jenkins Configuration - Successful Job w/ Unit Tests" /></a><br />
	Jenkins Configuration &#8211; Successful Job w/ Unit Tests
</div>
<p>In addition to the test information, there is also a new menu item on the left side named &#8220;History&#8221;. Clicking this will show historical information on the test runs, including a graph of the execution times and test counts. </p>
<div style="text-align: center; font-size: .9em; color: #666666;">
	<a href="http://tiernok.com/LTDBlog/ContinuousDelivery/unittest_history_lg.png" title="Larger picture" target="_blank"><img src="http://tiernok.com/LTDBlog/ContinuousDelivery/unittest_history.png" title="Jenkins Configuration - Unit Test History" /></a><br />
	Jenkins Configuration &#8211; Unit Test History
</div>
<p><i>Note: If, like me, you didn&#8217;t bother to define a server name in the Jenkins configuration panel, you will find that some of these links will not work from a remote server because they are defined with the full server name instead of relative links.</i></p>
<p>I am naturally paranoid when things work right away, so at this point I purposefully broke a unit test and reran the build to verify it would report it correctly.</p>
<div style="text-align: center; font-size: .9em; color: #666666;">
	<a href="http://tiernok.com/LTDBlog/ContinuousDelivery/unittest_failedrun_lg.png" title="Larger picture" target="_blank"><img src="http://tiernok.com/LTDBlog/ContinuousDelivery/unittest_failedrun.png" title="Jenkins Configuration - Failed Unit Test Run" /></a><br />
	Failed Unit Test Run
</div>
<p>And my twitter bot is, of course, more than happy to broadcast that failure far and wide.</p>
<div style="text-align: center; font-size: .9em; color: #666666;">
	<a href="https://twitter.com/#!/TarwnBuildSrvr" title="@TarwnBuildSrvr on Twitter" target="_blank"><img src="http://tiernok.com/LTDBlog/ContinuousDelivery/unittest_twitter.png" title="Jenkins Configuration - Failed Unit Test Run" /></a><br />
	Failed Unit Test Run
</div>
<h2>Next Steps</h2>
<p>With unit tests integrated into the build job, I am nearly done with the Continuous Integration stage of this pipeline. The last thing step will be to verify the packaged code can actually be deployed and to build in the ability to smoke test that deployed code.</p>
<style>
.thelist li{ color: #666666; }
.thelist .cur{ font-style: italic; color: black; }
</style>
<ul class="thelist">
<li><a href="http://wiki.lessthandot.com/index.php/Eli%27s_Continuous_Delivery_Project" title="Wiki post for Eli's Continuous Delivery Project">Wiki Post</a></li>
<li><a href="/index.php/EnterpriseDev/application-lifecycle-management/starting-a-continuous-delivery-project" title="Starting a Continuous Delivery Project">Starting a Continuous Delivery Project</a></li>
<li><a href="/index.php/EnterpriseDev/application-lifecycle-management/continuous-delivery-project-setting-up" title="Setting up the Continuous Integration stage">Setting up the Continuous Integration stage</a></li>
<li><a href="/index.php/EnterpriseDev/UnitTest/continuous-delivery-project-making-mvcmusicstore" title="Making ASP.Net MVC Music Store Testable">Making ASP.Net MVC Music Store Testable</a></li>
<li class="cur"><a href="/index.php/EnterpriseDev/UnitTest/continuous-delivery-project-incorporating-the" title="Incorporating Unit Tests in the CI stage">Incorporating Unit Tests in the CI stage</a></li>
<li><a href="/index.php/EnterpriseDev/application-lifecycle-management/continuous-delivery-project-deploy-and" title="Deploy and Smoke Test">Deploy and Smoke Test</a></li>
<li><a href="/index.php/EnterpriseDev/application-lifecycle-management/continuous-delivery-adding-an-automated" title="Adding an Automated Interface Testing stage">Adding an Automated Interface Testing stage</a></li>
<li><a href="/index.php/EnterpriseDev/application-lifecycle-management/continuous-delivery-dashboard-qa-and" title="Dashboard, QA and Production Deployment stage">Dashboard, QA and Production Deployment stage</a></li>
</ul>
]]></content:encoded>
			<wfw:commentRss>/index.php/enterprisedev/unittest/continuous-delivery-project-incorporating-the/feed/</wfw:commentRss>
		<slash:comments>1</slash:comments>
		</item>
		<item>
		<title>Continuous Delivery Project &#8211; Setting up Continuous Integration</title>
		<link>/index.php/enterprisedev/application-lifecycle-management/continuous-delivery-project-setting-up/</link>
		<comments>/index.php/enterprisedev/application-lifecycle-management/continuous-delivery-project-setting-up/#comments</comments>
		<pubDate>Thu, 15 Dec 2011 11:06:00 +0000</pubDate>
		<dc:creator><![CDATA[Eli Weinstock-Herman (tarwn)]]></dc:creator>
				<category><![CDATA[Application Lifecycle Management]]></category>
		<category><![CDATA[asp.net mvc]]></category>
		<category><![CDATA[continuous delivery]]></category>
		<category><![CDATA[continuous integration]]></category>
		<category><![CDATA[jenkins]]></category>
		<category><![CDATA[msbuild]]></category>
		<category><![CDATA[mvc music store]]></category>
		<category><![CDATA[webdeploy]]></category>

		<guid isPermaLink="false">/index.php/2011/12/continuous-delivery-project-setting-up/</guid>
		<description><![CDATA[A continuous integration server verifies that all of the currently committed changes play well together and reduces the elapsed time between a team member committing a change and finding out it leaves the build in a poor state. The faster we find out about a defect or unstable build, the fresher the changes are in our minds and the faster we can fix it.]]></description>
				<content:encoded><![CDATA[<p>A continuous integration server verifies that all of the currently committed changes play well together and reduces the elapsed time between a team member committing a change and finding out it leaves the build in a poor state. The faster we find out about a defect or unstable build, the fresher the changes are in our minds and the faster we can fix it.</p>
<div style="text-align: center; font-size: .9em; color: #666666;">
	<img src="http://tiernok.com/LTDBlog/ContinuousDelivery/Overview_p1.png" title="Delivery Pipeline - Focus of Current Post" /><br />
	Delivery Pipeline &#8211; Focus of Current Post
</div>
<p>This is the second post in a multi-part series on my Continuous Delivery pipeline project. The <a href="/index.php/EnterpriseDev/starting-a-continuous-delivery-project" title="Starting the Continuous Delivery project">first post</a> discussed Continuous Delivery, defined the process I am building, and outlined the technology selections I&#8217;ve made for the project. In this post I will begin setting up Continuous Integration for the project using Jenkins as a build server, MS Build to execute builds, and BitBucket to serve as the source code repository. </p>
<h2>Server Setup</h2>
<p>Prior to setting up the build server, I added a <a href="https://bitbucket.org/tarwn/mvcmusicstore.main" title="Source repository on BitBucket">repository on BitBucket</a> to serve as the central code repository, completed the <a href="http://www.asp.net/mvc/tutorials/mvc-music-store" title="MVC Music Store Tutorial on ASP.Net site">MVC Music Store tutorial</a> (full code available <a href="http://mvcmusicstore.codeplex.com/" title="See tutorial on CodePlex">on Codeplex</a>), and pushed the commits to the remote repository. </p>
<p>There are three major differences between my version of the database and the one on MSDN:</p>
<ol>
<li>My copy uses a second sdf (SQL CE) database for authentication instead of SQL Express</li>
<li>I&#8217;m using the Universal Providers for ASP.Net membership (<a href="http://nuget.org/List/Packages/System.Web.Providers" title="Universal Providers on Nuget">Install-Package System.Web.Providers</a>)</li>
<li>I have included the sdf files in the ASP.Net project (not something you would want to do in a production environment)</li>
</ol>
<p>My server is a Windows 2008 R2 VM with 2GB of RAM assigned to it and a single 32GB harddrive. It was a clean, sysprepped image with no additional software installed.</p>
<h2>Installation</h2>
<p>To get started on the new build server VM, I&#8217;ve installed the following software:</p>
<ul>
<li><a href="http://www.google.com/chrome" title="Chrome install link">Chrome</a> &#8211; because IE was annoying me</li>
<li><a href="http://sourceforge.net/projects/unxutils/" title="Install Unxtools">UnxTools</a> &#8211; Extra tools Jenkins needs that mimic several Unix commands</li>
<li><a href=http://jenkins-ci.org/"" title="Jenkins Downloads">Jenkins</a> &#8211; The installer will install the JRE and latest version of Jenkins</li>
<li><a href="http://www.microsoft.com/download/en/details.aspx?id=17851" title=".Net Framework 4 Downloads">Jenkins</a> &#8211; .Net Framework 4 (Check windows updates afterwards)</li>
<li><a href="http://mercurial.selenic.com/" title="Mercurial Download">Mercurial</a> &#8211; the windows version will install with tortoiseHg</li>
</ul>
<p>With a couple reboots along the way, all the packages are installed with little extra effort.</p>
<h2>Jenkins Configuration</h2>
<p>With the packages above in place, I can start up Jenkins and began configuring it. To start Jenkins, run <code class="codespan">java -jar "C:Program Files (x86)JenkinsJenkins.war"</code> and then point a browser to http://localhost:8080/ to access the dashboard. There are also instructions to <a href="https://wiki.jenkins-ci.org/display/JENKINS/Installing+Jenkins+as+a+Windows+service" title="">set up Jenkins as a service</a>.</p>
<p><i>Note: Jenkins somehow magically set itself up as a service on my system (or I was really low on coffee when I was initially poking around it), so if you are following along on your own install, you may want to try accessing the dashboard prior to running the jar to see if it&#8217;s already running.</i></p>
<div style="text-align: center; font-size: .9em; color: #666666;">
	<a href="http://tiernok.com/LTDBlog/ContinuousDelivery/dashboard_lg.png" title="Larger picture" target="_blank"><img src="http://tiernok.com/LTDBlog/ContinuousDelivery/dashboard.png" title="Jenkins Dashboard" /></a><br />
	Jenkins Dashboard (unfortunately a later shot as I misplaced some of my earlier screenshots)
</div>
<p>The side menu offers a link to the server settings (Manage Jenkins), and from there I get a list of sub-menus in the main area that includes &#8220;Plugins&#8221;. To start with I&#8217;ll install the plugins for Mercurial, Twitter, and MS Build from the &#8220;Available&#8221; tab on the plugins screen. After installing, system-wide options for the plugins are added in the system configuration screen (Manage Jenkins &#8211; Configure System). </p>
<h3>Mercurial</h3>
<p>The mercurial configuration is straightforward and offers a reasonable set of defaults, so of course I changed it. I added the path for the mercurial binaries to my PATH environment to make command-line access easier outside of the build server and then modified the mercurial configs in the build server to reflect that change.</p>
<div style="text-align: center; font-size: .9em; color: #666666;">
	<a href="http://tiernok.com/LTDBlog/ContinuousDelivery/config_mercurial_lg.png" title="Larger picture" target="_blank"><img src="http://tiernok.com/LTDBlog/ContinuousDelivery/config_mercurial.png" title="Jenkins Configuration - Mercurial" /></a><br />
	Jenkins Configuration &#8211; Mercurial
</div>
<p>My simplified configuration is the name of the executable and all blanks for the rest of the values.</p>
<h3>MS Build</h3>
<p>The latest MS Build executable is installed as part of the .Net framework installation. In the Jenkins server setup, I add an MS Build item, naming it with it&#8217;s version number (I can add separate, named configurations for each version later if I&#8217;m so inclined) and pointing the path to <code class="codespan">"C:WindowsMicrosoft.NETFrameworkv4.0.30319MSBuild.exe"</code>.</p>
<div style="text-align: center; font-size: .9em; color: #666666;">
	<a href="http://tiernok.com/LTDBlog/ContinuousDelivery/config_msbuild_lg.png" title="Larger picture" target="_blank"><img src="http://tiernok.com/LTDBlog/ContinuousDelivery/config_msbuild.png" title="Jenkins Configuration - MS Build, Framework 4" /></a><br />
	Jenkins Configuration &#8211; MS Build, Framework 4
</div>
<p><i>Note: You can define multiple MS Build executables if you have projects that run on different versions. Naming them clearly will help when you later need to select the appropriate MS Build exe to build with</i></p>
<h3>Twitter</h3>
<p>As I pointed out in the first post, I decided I would use twitter for status notifications, as twitter is more widely accessible and won&#8217;t clog up my inbox (the downside being limited status information). There is important additional information on the <a href="https://wiki.jenkins-ci.org/display/JENKINS/Twitter+Plugin" title="Jenkins Twitter Plugin">plugin page</a> for setting it up.</p>
<h2>Setting up the CI Job</h2>
<p>With the server configured, I can move on to setup the initial CI build job. Initially, this job will be responsible for picking up changes from mercurial, executing the build, and reporting the results.</p>
<ol>
<li>Select &#8220;New Job&#8221; from top left menu</li>
<li>Select &#8220;Build a free-style software project&#8221;</li>
<li>Enter a Name</li>
<li>Enter Details
<ol>
<li>Select Mercurial for SCM and enter URL for the repository (I am using bitbucket for this example) as well as selecting repository browser (bitbucket)</li>
<li>Initially I&#8217;ll leave build triggers not defined</li>
<li>Configure MS Build by specifying the <code class="codespan">*.sln</code> </li>
<li>check the &#8220;twitter&#8221; checkbox at bottom</li>
<li>Run build by clicking &#8220;Build Now&#8221; at top left</li>
</ol>
</li>
<li>Start debugging build problems</li>
</ol>
<p><i>Note: Though I didn&#8217;t show it here, there is also an advanced option under the mecurial settings called &#8220;Clean Build&#8221;. This will clean the workspace before each build so binaries and test results won&#8217;t pollute later builds</i></p>
<div style="text-align: center; font-size: .9em; color: #666666;">
	<img src="http://tiernok.com/LTDBlog/ContinuousDelivery/config_dashboard_failed.png" title="Jenkins Configuration - Failed Build on Dashboard" /><br />
	Dashboard View of Failed Build
</div>
<p>My first attempted build fails. The details are available by opening the build and clicking the Console Log link in the left menu (which changes to reflect the context of the screen we are on). The console log displays the raw output of the commands executed during the build.</p>
<div style="text-align: center; font-size: .9em; color: #666666;">
	<img src="http://tiernok.com/LTDBlog/ContinuousDelivery/config_failedbuild.png" title="Jenkins Configuration - Failed Build Console Log" /><br />
	Looking at the Console Log for a Failed Build
</div>
<p>Here are the errors I had to work through in order to get the initial build to work. Some of them were me missing feedback from the system or incorrect configurations.</p>
<ol>
<li>Error (twice), console log told me hg wasn&#8217;t recognized
<ul>
<li>hg hadn&#8217;t actually installed the first time due to windows updates being in middle of another install</li>
<li>I rebooted to finish windows update, installed tortoisehg, rebooted to have clean startup (and paths), and the issue was corrected</li>
</ul>
</li>
<li>Failure &#8211; In the console log it complained about not being able to find the MS Build executable
<ul>
<li>Returned to project settings and switched MS Build option from (default) to the one I had configured above in global settings</li>
</ul>
</li>
<li>Error MSB4019: The imported project &#8220;C: &#8230; Microsoft.WebApplication.targets&#8221; was not found
<ul>
<li>Options:
<ul>
<li>Install VS 2010 Shell (http://www.microsoft.com/download/en/details.aspx?id=115)</li>
<li>Install Visual Studio</li>
<li>Copy folder from existing install (C:Program FilesMSBuildMicrosoftVisualStudiov10.0WebApplications)</li>
</ul>
</li>
<li>I went with option 1 and ran windows updates again before continuing</li>
</ul>
</li>
<li>error CS0234: The type or namespace name &#8216;Mvc&#8217; does not exist
<ul>
<li>Would have been fixed if I had installed VS (oh well)</li>
<li>Download and install MVC: http://www.microsoft.com/download/en/details.aspx?displaylang=en&amp;id=4211</li>
</ul>
</li>
</ol>
<p>At this point the initial build runs successfully. </p>
<h3>Refining the Setup</h3>
<p>After getting the initial build setup, it&#8217;s time to add some refinements. First up is switching the build to run in release mode by adding <code class="codespan">"/p:Configuration=Release"</code> to the command line arguments in the MS Build section.</p>
<div style="text-align: center; font-size: .9em; color: #666666;">
	<img src="http://tiernok.com/LTDBlog/ContinuousDelivery/config_buildchanges_rel.png" title="Jenkins Configuration - Adding Release to Build Args" /><br />
	Jenkins Configuration &#8211; Adding Release to Build Args
</div>
<p>Now that I have it working, I also want to add the option to automatically run when new changes are committed to source control. The Build Triggers section of the job configuration controls how jobs are triggered, so I&#8217;ll select the &#8220;Poll SCM&#8221; option to poll my source control repository. A value of <code class="codespan">"*/5 * * * *"</code> will set it to check every 5 minutes (which may be overkill given how few updates I will be making over the course of this project, but oh well).</p>
<div style="text-align: center; font-size: .9em; color: #666666;">
	<img src="http://tiernok.com/LTDBlog/ContinuousDelivery/config_buildchanges_poll.png" title="Jenkins Configuration - Polling for Build Trigger" /><br />
	Jenkins Configuration &#8211; Defining Polling for Build Trigger
</div>
<p><i>Note: Timing uses Unix cron-style values. Basically the string is used as a test against the current time to see if a particular step is to be run, so 5 * * * * would run only if the minutes value was a 5, while */5 * * * * runs if it is divisible by 5.</i></p>
<h2>Capturing the Results</h2>
<p>The last step of the build stage is to capture the resulting binaries and website pages so they can be deployed consistently to other environments. The addition of WebDeploy to Visual Studio and IIS has made web deployment easy* to manage, which will simplify getting an archive of the results and my deployment scripts later.</p>
<p><i>Note: ***Web Deploy has made this really easy IN THEORY. This is the topic of a later post in the series and is also the reason screenshots and check-ins for the early stages may reflect dates in early November and these posts are being written in December.</i></p>
<p>By default, when I create a deployment package I will get a folder of all the cshtml, dll, and so on files I need to run the site. In the project properties for the website, there is a build option to zip these files as a package after building it, which will simplify archival even further.</p>
<p><i>Project properties, select the tab for &#8220;Package/Publish Web&#8221; and check the &#8220;Create deployment package as zip&#8221; option</i></p>
<p>The last piece is to tell MSBuild I want to build the web deployment package. In the MSBuild step of the CI job, I add the command-line flag of <code class="codespan">"/p:DeployOnBuild=True"</code>, which will be passed on to the individual projects in the solution to act on if they understand it (which the web project will and the unit test project will not, handy).</p>
<div style="text-align: center; font-size: .9em; color: #666666;">
	<img src="http://tiernok.com/LTDBlog/ContinuousDelivery/config_buildchanges.png" title="Jenkins Configuration - Failed Build Console Log" /><br />
	Looking at the Console Log for a Failed Build
</div>
<p>At this point running another build fails, with multiple errors complaining about Package steps (like CheckAndCleanMSDeployPackageIfNeeded) failing. The solution is to install the WebDeploy 2.0 refresh package on the server, located <a href="http://blogs.iis.net/msdeploy/archive/2011/04/05/announcing-web-deploy-2-0-refresh.aspx" title="WebDeploy 2.0 Refresh">here</a>. Once this is installed, the build is able to complete successfully.</p>
<p>Now that I have a nice, tidy package of the deployable build, I need to put it somewhere for longer term use. In the Post-Build Actions of my job configuration, there is an option to archive artifacts from the build. Checking this box and entering the path for the zip file from the Project Properties screen (objDebugPackageMvcMusicStore.zip) tells Jenkins to archive that zip file as the artifacts from each build.</p>
<div style="text-align: center; font-size: .9em; color: #666666;">
	<a href="http://tiernok.com/LTDBlog/ContinuousDelivery/config_successfulbuild_lg.png" title="Larger picture" target="_blank"><img src="http://tiernok.com/LTDBlog/ContinuousDelivery/config_successfulbuild.png" title="Jenkins Configuration - Successful Build" /></a><br />
	Jenkins Configuration &#8211; Successful Build
</div>
<p>After executing another successful build, we can see the build server has archived the zip file (above). If I click that zip file I&#8217;ll be prompted to download it to a local machine.</p>
<h2>Test the Package</h2>
<p>We&#8217;re not done until we test the package. Luckily testing a WebDeploy package is pretty easy, all we have to do is open the IIS configuration screen, select the default web site, and then use the import button on the right side of the interface to import the zip file. This imports all of the files, sets up the application, and gives me a running website. There is more information on WebDeploy in <a href=" http://weblogs.asp.net/scottgu/archive/2010/09/13/automating-deployment-with-microsoft-web-deploy.aspx" title="Automating Deployment with Microsoft Web Deploy">this post by ScottGu</a> and we will get more in depth with it in later steps.</p>
<p><i>Note: It&#8217;s interesting to note that this is where I found the first bug in MVC Music Store. The images in the CSS file were defined assuming the application was at the root level (<a href="https://bitbucket.org/tarwn/practicerepo/changeset/87b38e362428" title="Changeset for the fix">fix</a>), as were the navigation paths in the header (<a href="https://bitbucket.org/tarwn/practicerepo/changeset/843bc10fdd7c" title="Changeset for the fix">fix</a>).</i></p>
<h2>Next Steps</h2>
<p>We now have a working Continuous Integration stage that will detect checked in changes, build them, and create a deploy package. The next step is to execute and capture the results for the unit tests, however before capturing the results we need to have unit tests, and to have unit test we have to make the Music Store tutorial code testable. The next post will cover that conversion. It&#8217;s interesting to note, especially if you are one of those people that believe unit tests to be wasteful, that the very first controller I put under test in this very public, very widely deployed, open source project contains a defect.</p>
<style>
.thelist li{ color: #666666; }
.thelist .cur{ font-style: italic; color: black; }
</style>
<ul class="thelist">
<li><a href="http://wiki.lessthandot.com/index.php/Eli%27s_Continuous_Delivery_Project" title="Wiki post for Eli's Continuous Delivery Project">Wiki Post</a></li>
<li><a href="/index.php/EnterpriseDev/application-lifecycle-management/starting-a-continuous-delivery-project" title="Starting a Continuous Delivery Project">Starting a Continuous Delivery Project</a></li>
<li class="cur"><a href="/index.php/EnterpriseDev/application-lifecycle-management/continuous-delivery-project-setting-up" title="Setting up the Continuous Integration stage">Setting up the Continuous Integration stage</a></li>
<li><a href="/index.php/EnterpriseDev/UnitTest/continuous-delivery-project-making-mvcmusicstore" title="Making ASP.Net MVC Music Store Testable">Making ASP.Net MVC Music Store Testable</a></li>
<li><a href="/index.php/EnterpriseDev/UnitTest/continuous-delivery-project-incorporating-the" title="Incorporating Unit Tests in the CI stage">Incorporating Unit Tests in the CI stage</a></li>
<li><a href="/index.php/EnterpriseDev/application-lifecycle-management/continuous-delivery-project-deploy-and" title="Deploy and Smoke Test">Deploy and Smoke Test</a></li>
<li><a href="/index.php/EnterpriseDev/application-lifecycle-management/continuous-delivery-adding-an-automated" title="Adding an Automated Interface Testing stage">Adding an Automated Interface Testing stage</a></li>
<li><a href="/index.php/EnterpriseDev/application-lifecycle-management/continuous-delivery-dashboard-qa-and" title="Dashboard, QA and Production Deployment stage">Dashboard, QA and Production Deployment stage</a></li>
</ul>
]]></content:encoded>
			<wfw:commentRss>/index.php/enterprisedev/application-lifecycle-management/continuous-delivery-project-setting-up/feed/</wfw:commentRss>
		<slash:comments>2</slash:comments>
		</item>
	</channel>
</rss>
