<?xml version="1.0" encoding="UTF-8"?><rss version="2.0"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:atom="http://www.w3.org/2005/Atom"
	xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
	xmlns:slash="http://purl.org/rss/1.0/modules/slash/"
	>

<channel>
	<title>optimizing &#8211; LessthanDot</title>
	<atom:link href="/index.php/tag/optimizing/feed/" rel="self" type="application/rss+xml" />
	<link>/</link>
	<description>A Technical Community for IT Professionals</description>
	<lastBuildDate>Sat, 09 Mar 2019 12:50:36 +0000</lastBuildDate>
	<language>en-US</language>
	<sy:updatePeriod>hourly</sy:updatePeriod>
	<sy:updateFrequency>1</sy:updateFrequency>
	<generator>https://wordpress.org/?v=4.6.1</generator>
	<item>
		<title>How to get the selectivity of an index</title>
		<link>/index.php/datamgmt/datadesign/how-to-get-the-selectivity-of-an-index/</link>
		<comments>/index.php/datamgmt/datadesign/how-to-get-the-selectivity-of-an-index/#respond</comments>
		<pubDate>Tue, 20 May 2008 13:32:33 +0000</pubDate>
		<dc:creator><![CDATA[SQLDenis]]></dc:creator>
				<category><![CDATA[Data Modelling and Design]]></category>
		<category><![CDATA[Database Administration]]></category>
		<category><![CDATA[Database Programming]]></category>
		<category><![CDATA[Microsoft SQL Server]]></category>
		<category><![CDATA[Microsoft SQL Server Admin]]></category>
		<category><![CDATA[database]]></category>
		<category><![CDATA[indexes]]></category>
		<category><![CDATA[optimizing]]></category>
		<category><![CDATA[sql]]></category>
		<category><![CDATA[sqlserver]]></category>

		<guid isPermaLink="false">/index.php/2008/05/how-to-get-the-selectivity-of-an-index/</guid>
		<description><![CDATA[The selectivity of an index is extremely important. If your index is not selective enough then the optimizer will simply have to do a scan. This is also a reason why creating an index on a gender column does not make a lot of sense. First create this table T-SQL1 2 3 4 5 6 [&#8230;]]]></description>
				<content:encoded><![CDATA[<p>The selectivity of an index is extremely important. If your index is not selective enough then the optimizer will simply have to do a scan. This is also a reason why creating an index on a gender column does not make a lot of sense.</p>
<p>First create this table</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
</pre></td><td class="de1"><pre class="de1"><span class="kw1">USE</span> tempdb
go
&nbsp;
<span class="kw1">CREATE</span> <span class="kw1">TABLE</span> TestCompositeIndex <span class="br0">&#40;</span><span class="kw1">State</span> <span class="kw1">char</span><span class="br0">&#40;</span><span class="nu0">2</span><span class="br0">&#41;</span>,Zip <span class="kw1">Char</span><span class="br0">&#40;</span><span class="nu0">5</span><span class="br0">&#41;</span><span class="br0">&#41;</span>
<span class="kw1">INSERT</span> TestCompositeIndex <span class="kw1">VALUES</span><span class="br0">&#40;</span><span class="st0">'NJ'</span>,<span class="st0">'08540'</span><span class="br0">&#41;</span>
<span class="kw1">INSERT</span> TestCompositeIndex <span class="kw1">VALUES</span><span class="br0">&#40;</span><span class="st0">'NJ'</span>,<span class="st0">'08540'</span><span class="br0">&#41;</span>
<span class="kw1">INSERT</span> TestCompositeIndex <span class="kw1">VALUES</span><span class="br0">&#40;</span><span class="st0">'NY'</span>,<span class="st0">'10028'</span><span class="br0">&#41;</span>
<span class="kw1">INSERT</span> TestCompositeIndex <span class="kw1">VALUES</span><span class="br0">&#40;</span><span class="st0">'NY'</span>,<span class="st0">'10021'</span><span class="br0">&#41;</span>
<span class="kw1">INSERT</span> TestCompositeIndex <span class="kw1">VALUES</span><span class="br0">&#40;</span><span class="st0">'NY'</span>,<span class="st0">'10021'</span><span class="br0">&#41;</span>
<span class="kw1">INSERT</span> TestCompositeIndex <span class="kw1">VALUES</span><span class="br0">&#40;</span><span class="st0">'NY'</span>,<span class="st0">'10021'</span><span class="br0">&#41;</span>
<span class="kw1">INSERT</span> TestCompositeIndex <span class="kw1">VALUES</span><span class="br0">&#40;</span><span class="st0">'NY'</span>,<span class="st0">'10001'</span><span class="br0">&#41;</span>
<span class="kw1">INSERT</span> TestCompositeIndex <span class="kw1">VALUES</span><span class="br0">&#40;</span><span class="st0">'NJ'</span>,<span class="st0">'08536'</span><span class="br0">&#41;</span>
<span class="kw1">INSERT</span> TestCompositeIndex <span class="kw1">VALUES</span><span class="br0">&#40;</span><span class="st0">'NJ'</span>,<span class="st0">'08540'</span><span class="br0">&#41;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">USE tempdb
go

CREATE TABLE TestCompositeIndex (State char(2),Zip Char(5))
INSERT TestCompositeIndex VALUES('NJ','08540')
INSERT TestCompositeIndex VALUES('NJ','08540')
INSERT TestCompositeIndex VALUES('NY','10028')
INSERT TestCompositeIndex VALUES('NY','10021')
INSERT TestCompositeIndex VALUES('NY','10021')
INSERT TestCompositeIndex VALUES('NY','10021')
INSERT TestCompositeIndex VALUES('NY','10001')
INSERT TestCompositeIndex VALUES('NJ','08536')
INSERT TestCompositeIndex VALUES('NJ','08540')</pre></div></div>

<p>If you have a composite index (composite means the index contains more than one column) you need to run this code.</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
</pre></td><td class="de1"><pre class="de1"><span class="kw1">DECLARE</span> @<span class="kw2">Count</span> <span class="kw1">int</span>
&nbsp;
<span class="kw1">SELECT</span> <span class="kw1">DISTINCT</span> <span class="kw1">State</span>, Zip
<span class="kw1">FROM</span> TestCompositeIndex;
&nbsp;
<span class="kw1">SET</span> @<span class="kw2">Count</span> <span class="sy0">=</span> <span class="kw2">@@ROWCOUNT</span>;
&nbsp;
&nbsp;
&nbsp;
<span class="kw1">SELECT</span> <span class="br0">&#40;</span>@<span class="kw2">Count</span><span class="sy0">*</span><span class="nu0">1.0</span><span class="br0">&#41;</span> <span class="sy0">/</span> <span class="kw2">COUNT</span><span class="br0">&#40;</span><span class="sy0">*</span><span class="br0">&#41;</span> <span class="kw1">AS</span> IndexSelectivity, 
<span class="kw2">COUNT</span><span class="br0">&#40;</span><span class="sy0">*</span><span class="br0">&#41;</span><span class="kw1">AS</span> TotalCount,
@<span class="kw2">Count</span> <span class="kw1">AS</span> DistinctCount
<span class="kw1">FROM</span> TestCompositeIndex;</pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">DECLARE @Count int

SELECT DISTINCT State, Zip
FROM TestCompositeIndex;

SET @Count = @@ROWCOUNT;

 

SELECT (@Count*1.0) / COUNT(*) AS IndexSelectivity, 
COUNT(*)AS TotalCount,
@Count AS DistinctCount
FROM TestCompositeIndex;</pre></div></div>

<p>Result<br />
&#8212;&#8212;&#8211;<br />
IndexSelectivity	TotalCount	DistinctCount<br />
.555555555555	9	5</p>
<p>If you have a one column index you can use this code</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
</pre></td><td class="de1"><pre class="de1"><span class="kw1">SELECT</span> <span class="br0">&#40;</span><span class="kw2">COUNT</span><span class="br0">&#40;</span><span class="kw1">DISTINCT</span> <span class="kw1">State</span><span class="br0">&#41;</span><span class="sy0">*</span> <span class="nu0">1.0</span><span class="br0">&#41;</span> <span class="sy0">/</span> <span class="kw2">COUNT</span><span class="br0">&#40;</span><span class="sy0">*</span><span class="br0">&#41;</span> <span class="kw1">AS</span> IndexSelectivity,
<span class="kw2">COUNT</span><span class="br0">&#40;</span><span class="sy0">*</span><span class="br0">&#41;</span> <span class="kw1">AS</span> TotalCount,
<span class="kw2">COUNT</span><span class="br0">&#40;</span><span class="kw1">DISTINCT</span> <span class="kw1">State</span><span class="br0">&#41;</span> <span class="kw1">AS</span> DistinctCount
<span class="kw1">FROM</span> TestCompositeIndex;</pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">SELECT (COUNT(DISTINCT State)* 1.0) / COUNT(*) AS IndexSelectivity,
COUNT(*) AS TotalCount,
COUNT(DISTINCT State) AS DistinctCount
FROM TestCompositeIndex;</pre></div></div>

<p>Result<br />
&#8212;&#8212;&#8211;<br />
IndexSelectivity	TotalCount	DistinctCount<br />
.222222222222	9	2</p>
]]></content:encoded>
			<wfw:commentRss>/index.php/datamgmt/datadesign/how-to-get-the-selectivity-of-an-index/feed/</wfw:commentRss>
		<slash:comments>0</slash:comments>
		</item>
	</channel>
</rss>
