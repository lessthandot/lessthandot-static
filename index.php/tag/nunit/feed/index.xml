<?xml version="1.0" encoding="UTF-8"?><rss version="2.0"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:atom="http://www.w3.org/2005/Atom"
	xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
	xmlns:slash="http://purl.org/rss/1.0/modules/slash/"
	>

<channel>
	<title>nunit &#8211; LessthanDot</title>
	<atom:link href="/index.php/tag/nunit/feed/" rel="self" type="application/rss+xml" />
	<link>/</link>
	<description>A Technical Community for IT Professionals</description>
	<lastBuildDate>Sat, 09 Mar 2019 12:50:36 +0000</lastBuildDate>
	<language>en-US</language>
	<sy:updatePeriod>hourly</sy:updatePeriod>
	<sy:updateFrequency>1</sy:updateFrequency>
	<generator>https://wordpress.org/?v=4.6.1</generator>
	<item>
		<title>Azure Web Sites Deployment and Unit Testing</title>
		<link>/index.php/enterprisedev/cloud/azure/azure-web-sites-deployment-and-unit-testing/</link>
		<comments>/index.php/enterprisedev/cloud/azure/azure-web-sites-deployment-and-unit-testing/#comments</comments>
		<pubDate>Mon, 10 Mar 2014 12:18:26 +0000</pubDate>
		<dc:creator><![CDATA[Eli Weinstock-Herman (tarwn)]]></dc:creator>
				<category><![CDATA[Azure]]></category>
		<category><![CDATA[azure]]></category>
		<category><![CDATA[cassinidev]]></category>
		<category><![CDATA[nunit]]></category>
		<category><![CDATA[selenium]]></category>

		<guid isPermaLink="false">/?p=2354</guid>
		<description><![CDATA[The automatic deployment option of Azure Web Sites is really cool and demos well. A few months ago I was curious how far I could push it, whether I could replace more complex projects that I currently deploy from my build server. I had read a couple posts on unit testing during deployment, but so [&#8230;]]]></description>
				<content:encoded><![CDATA[<p>The automatic deployment option of Azure Web Sites is really cool and demos well. A few months ago I was curious how far I could push it, whether I could replace more complex projects that I currently deploy from my build server. I had read a couple posts on unit testing during deployment, but so far had not seen anyone take it all the way to interface testing. With tools like CassiniDev, Phantom, and Selenium, this seemed like a real possibility.</p>
<p>So the goal was to create an Azure Website, get the automated deployment working automatically when I commit, run Nunit tests with the Nunit test runner (not the VS runner), and then wire in UI testing with a combination of CassiniDev for hosting the site, Phantom as the browser, and Selenium as the magic that drives the two. </p>
<p>This post covers the parts that worked, creating the Azure Web Site, settings up automated depoyment from the git repository, and customizing the deployment process to run the Nunit test runner, failing the build when a test fails.</p>
<h2>From the Beginning</h2>
<p>This project started from an empty folder, the goal being to see how far I could push it until I ran into problems.</p>
<p>The first step was to create a github repository for the project and build the basic MVC4 project. I built just a basic MVC4 project with some text on a single page, just enough to show if it was working or not.</p>
<p>The source code is on github: <a href="https://github.com/tarwn/CloudPixiesAndGhosts" title="tarwn/CloudPixiesAndGhosts on github">https://github.com/tarwn/CloudPixiesAndGhosts</a></p>
<h2>Azure Website</h2>
<p>Once I had a basic &#8220;hello World&#8221; page and a github repository, it was time to create the Azure Website that would be the deployment target.</p>
<div id="attachment_2373" style="width: 310px" class="wp-caption aligncenter"><a href="/wp-content/uploads/2014/02/01_CreateSiteStep1.png"><img src="/wp-content/uploads/2014/02/01_CreateSiteStep1-300x199.png" alt="Create Azure Web Site - Step 1" width="300" height="199" class="size-medium wp-image-2373" srcset="/wp-content/uploads/2014/02/01_CreateSiteStep1-300x199.png 300w, /wp-content/uploads/2014/02/01_CreateSiteStep1.png 700w" sizes="(max-width: 300px) 100vw, 300px" /></a><p class="wp-caption-text">Create Azure Web Site &#8211; Step 1</p></div>
<p>The wizard has a github option, but due to the way github permissions work, it ends up needing far more permissions than I want to provide. Instead I have chosen to use the generic &#8220;External Repository&#8221; option. </p>
<div id="attachment_2374" style="width: 310px" class="wp-caption aligncenter"><a href="/wp-content/uploads/2014/02/01_CreateSiteStep2.png"><img src="/wp-content/uploads/2014/02/01_CreateSiteStep2-300x198.png" alt="Create Azure Web Site - Step 2" width="300" height="198" class="size-medium wp-image-2374" srcset="/wp-content/uploads/2014/02/01_CreateSiteStep2-300x198.png 300w, /wp-content/uploads/2014/02/01_CreateSiteStep2.png 700w" sizes="(max-width: 300px) 100vw, 300px" /></a><p class="wp-caption-text">Create Azure Web Site &#8211; Step 2</p></div>
<p>The last step is to provide those repository details</p>
<div id="attachment_2375" style="width: 310px" class="wp-caption aligncenter"><a href="/wp-content/uploads/2014/02/01_CreateSiteStep3.png"><img src="/wp-content/uploads/2014/02/01_CreateSiteStep3-300x191.png" alt="Create Azure Web Site - Step 3" width="300" height="191" class="size-medium wp-image-2375" srcset="/wp-content/uploads/2014/02/01_CreateSiteStep3-300x191.png 300w, /wp-content/uploads/2014/02/01_CreateSiteStep3.png 700w" sizes="(max-width: 300px) 100vw, 300px" /></a><p class="wp-caption-text">Create Azure Web Site &#8211; Step 3</p></div>
<p>And the Azure Website is running:</p>
<div id="attachment_2376" style="width: 710px" class="wp-caption aligncenter"><a href="/wp-content/uploads/2014/02/01_CreateSiteStep4.png"><img src="/wp-content/uploads/2014/02/01_CreateSiteStep4.png" alt="Azure Web Site - Running" width="700" height="27" class="size-full wp-image-2376" srcset="/wp-content/uploads/2014/02/01_CreateSiteStep4.png 700w, /wp-content/uploads/2014/02/01_CreateSiteStep4-300x11.png 300w" sizes="(max-width: 700px) 100vw, 700px" /></a><p class="wp-caption-text">Azure Web Site &#8211; Running</p></div>
<p>And my basic little web page is picked up by Azure Websites and deployed to the site:<br />
<div id="attachment_2377" style="width: 310px" class="wp-caption aligncenter"><a href="/wp-content/uploads/2014/02/01_CreateSiteStep5.png"><img src="/wp-content/uploads/2014/02/01_CreateSiteStep5-300x144.png" alt="Initial Deployments" width="300" height="144" class="size-medium wp-image-2377" srcset="/wp-content/uploads/2014/02/01_CreateSiteStep5-300x144.png 300w, /wp-content/uploads/2014/02/01_CreateSiteStep5.png 700w" sizes="(max-width: 300px) 100vw, 300px" /></a><p class="wp-caption-text">Initial Deployments</p></div></p>
<p>Giving us the &#8220;cloud&#8221; portion of the project name:</p>
<div id="attachment_2378" style="width: 398px" class="wp-caption aligncenter"><a href="/wp-content/uploads/2014/02/01_CreateSiteStep6.png"><img src="/wp-content/uploads/2014/02/01_CreateSiteStep6.png" alt="It&#039;s in the cloud!" width="388" height="165" class="size-full wp-image-2378" srcset="/wp-content/uploads/2014/02/01_CreateSiteStep6.png 388w, /wp-content/uploads/2014/02/01_CreateSiteStep6-300x127.png 300w" sizes="(max-width: 388px) 100vw, 388px" /></a><p class="wp-caption-text">It&#8217;s in the cloud!</p></div>
<p>There is one last step, though. Because I used the generic &#8220;External Repository&#8221; option, my code is not being deployed immediately when I commit it.</p>
<p>Luckily Azure Websites exposes a deployment trigger URL that we can plug into github to notify when a new commit is received.</p>
<p>In the Azure Website settings, we copy that &#8220;Deployment Trigger URL&#8221;:</p>
<div id="attachment_2371" style="width: 310px" class="wp-caption aligncenter"><a href="/wp-content/uploads/2014/02/01_AutoDeploymentStep1.png"><img src="/wp-content/uploads/2014/02/01_AutoDeploymentStep1-300x72.png" alt="Configuring the Build triggering - Step 1" width="300" height="72" class="size-medium wp-image-2371" srcset="/wp-content/uploads/2014/02/01_AutoDeploymentStep1-300x72.png 300w, /wp-content/uploads/2014/02/01_AutoDeploymentStep1.png 700w" sizes="(max-width: 300px) 100vw, 300px" /></a><p class="wp-caption-text">Configuring the Build triggering &#8211; Step 1</p></div>
<p>And then in the github settings for our project, we paste it in as a WebHoook URL:<br />
<div id="attachment_2372" style="width: 310px" class="wp-caption aligncenter"><a href="/wp-content/uploads/2014/02/01_AutoDeploymentStep2.png"><img src="/wp-content/uploads/2014/02/01_AutoDeploymentStep2-300x91.png" alt="Configuring the Build triggering - Step 2" width="300" height="91" class="size-medium wp-image-2372" srcset="/wp-content/uploads/2014/02/01_AutoDeploymentStep2-300x91.png 300w, /wp-content/uploads/2014/02/01_AutoDeploymentStep2.png 700w" sizes="(max-width: 300px) 100vw, 300px" /></a><p class="wp-caption-text">Configuring the Build triggering &#8211; Step 2</p></div></p>
<p>And now each time I commit new code to master, it runs through the automated deployment process.</p>
<h2>Add Unit Tests</h2>
<p>So far, the example code just has a single page that doesn&#8217;t really do anything worth unit testing. This isn&#8217;t intended to be a real-world sample, but it does need some simple logic to test.</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="csharp"><thead><tr><td colspan="2"  class="head">C#</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
</pre></td><td class="de1"><pre class="de1"><span class="kw1">public</span> ActionResult Index<span class="br0">&#40;</span><span class="br0">&#41;</span>
<span class="br0">&#123;</span>
&nbsp; &nbsp; <span class="kw1">return</span> View<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
<span class="br0">&#125;</span>
&nbsp;
<span class="kw1">public</span> ActionResult Text<span class="br0">&#40;</span><span class="kw4">string</span> text<span class="br0">&#41;</span>
<span class="br0">&#123;</span>
&nbsp; &nbsp; <span class="kw1">var</span> model <span class="sy0">=</span> <span class="kw3">new</span> TextModel<span class="br0">&#40;</span>text<span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; <span class="kw1">return</span> View<span class="br0">&#40;</span>model<span class="br0">&#41;</span><span class="sy0">;</span>
<span class="br0">&#125;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">public ActionResult Index()
{
    return View();
}

public ActionResult Text(string text)
{
    var model = new TextModel(text);
    return View(model);
}</pre></div></div>

<p>Now I&#8217;ve added actions and views for a simple form that asks for a piece of text, submits it, and then shows a response based on whetehr the txt is populated or not.</p>
<p>So we have a form:<br />
<div id="attachment_2379" style="width: 310px" class="wp-caption aligncenter"><a href="/wp-content/uploads/2014/02/02_AddAForm.png"><img src="/wp-content/uploads/2014/02/02_AddAForm-300x197.png" alt="Sample Form Web Page" width="300" height="197" class="size-medium wp-image-2379" srcset="/wp-content/uploads/2014/02/02_AddAForm-300x197.png 300w, /wp-content/uploads/2014/02/02_AddAForm.png 365w" sizes="(max-width: 300px) 100vw, 300px" /></a><p class="wp-caption-text">Sample Form Web Page</p></div></p>
<p>And the page it submits to:<br />
<div id="attachment_2380" style="width: 185px" class="wp-caption aligncenter"><a href="/wp-content/uploads/2014/02/02_AddAFormSubmitted.png"><img src="/wp-content/uploads/2014/02/02_AddAFormSubmitted.png" alt="Submission Page" width="175" height="162" class="size-full wp-image-2380" /></a><p class="wp-caption-text">Submission Page</p></div></p>
<p>This will be easy to unit test but give us the tooling we would need to do anything more complex.</p>
<p>The unit test project is <a href="https://github.com/tarwn/CloudPixiesAndGhosts/tree/master/CloudSiteTests">/CloudSiteTests</a>. My first steps are to add a reference to the web project, add nunit via Nuget, and create some tests.</p>
<p>The 3 initials tests I create pass locally:<br />
<div id="attachment_2382" style="width: 623px" class="wp-caption aligncenter"><a href="/wp-content/uploads/2014/02/02_MoreUnitTests.png"><img src="/wp-content/uploads/2014/02/02_MoreUnitTests.png" alt="Passing Unit Tests (NCrunch console)" width="613" height="99" class="size-full wp-image-2382" srcset="/wp-content/uploads/2014/02/02_MoreUnitTests.png 613w, /wp-content/uploads/2014/02/02_MoreUnitTests-300x48.png 300w" sizes="(max-width: 613px) 100vw, 613px" /></a><p class="wp-caption-text">Passing Unit Tests (NCrunch console)</p></div></p>
<p>Now I add a fourth test to handle the case where I submit the form with an empty input.</p>
<div id="attachment_2381" style="width: 676px" class="wp-caption aligncenter"><a href="/wp-content/uploads/2014/02/02_FailingUnitTest.png"><img src="/wp-content/uploads/2014/02/02_FailingUnitTest.png" alt="And now a failing one (NCrunch Console)" width="666" height="130" class="size-full wp-image-2381" srcset="/wp-content/uploads/2014/02/02_FailingUnitTest.png 666w, /wp-content/uploads/2014/02/02_FailingUnitTest-300x58.png 300w" sizes="(max-width: 666px) 100vw, 666px" /></a><p class="wp-caption-text">And now a failing one (NCrunch Console)</p></div>
<p>With a failing test in the mix, now we can customize our deployment to run the unit tests and we will know for sure when they are being run correctly.</p>
<h2>Customize the Deployment</h2>
<p>The next step is to create a custom deployment so we can modify it to also run the unit tests. The <a href="http://www.windowsazure.com/en-us/documentation/articles/command-line-tools/">Azure Command Line Tools</a> includes a set of commands to generate a basic deployment. We can then take this basic process and tune it to our needs.</p>
<p><strong>1.</strong> Install node.js, as azure cli runs on node: http://nodejs.org/</p>
<p><strong>2.</strong> Next we need to install the azure cli package. In a command line, run the following:</p>
<p><code>npm install azure-cli -g</code></p>
<p>This uses the node.js package manager to install the azure-cli package and installs it for global (-g) use, rather than for an individual project.</p>
<p><strong>3.</strong> Open up the root solution folder and check out the options we can use with cli command:</p>
<p><code>run: azure site deploymentscript -h</code></p>
<p><strong>4.</strong> To generate a deployment script, i&#8217;ll specify the aspWAP option and point to the project:</p>
<p><code>azure site deploymentscript --aspWAP CloudSite/CloudSite.csproj -s CloudPixiesAndGhosts.sln</code></p>
<p>This generates a .deployment and a deploy.cmd file.</p>
<p><strong>5.</strong> Run the deploy.cmd file to test it out</p>
<p>I received an error on my first run because nuget wasn&#8217;t available. I enabled package restore on the solution and tried again and it worked. Later I found the same section (Deployment section, subsection 1) of this script was failing on Azure, so I ended up commenting it out entirely.</p>
<p>This may no longer be an issue, the Azure team has been updating things frequently and newer versions may be improved since.</p>
<p><strong>6.</strong> Edit the deploy.cmd file to run my nunit tests (after adding the nunit executable to my project):</p>
<p>I added the following section to the command file to run my tests:</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="dos"><thead><tr><td colspan="2"  class="head">DOS</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
</pre></td><td class="de1"><pre class="de1"><span class="co2">:: 2. Tests</span>
<span class="kw3">echo</span> 2: Build and execute tests
&nbsp;
<span class="kw3">echo</span> 2a: Executing Unit Tests: CloudSiteTests
<span class="sy0">%</span><span class="re3">MSBUILD_PATH</span><span class="sy0">%</span> &quot;<span class="sy0">%</span><span class="re3">DEPLOYMENT_SOURCE</span><span class="sy0">%</span>\CloudSiteTests\CloudSiteTests.csproj&quot; /nologo /verbosity:m /t:Build /p:Configuration=Debug
<span class="kw1">call</span> &quot;tools/nunit-console.exe&quot; &quot;<span class="sy0">%</span><span class="re3">DEPLOYMENT_SOURCE</span><span class="sy0">%</span>\CloudSiteTests\bin\Debug\CloudSiteTests.dll&quot;
&nbsp;
<span class="kw1">IF</span> <span class="sy0">!</span><span class="kw2">ERRORLEVEL</span><span class="sy0">!</span> <span class="kw2">NEQ</span> 0 <span class="kw1">goto</span> error</pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">:: 2. Tests
echo 2: Build and execute tests

echo 2a: Executing Unit Tests: CloudSiteTests
%MSBUILD_PATH% "%DEPLOYMENT_SOURCE%\CloudSiteTests\CloudSiteTests.csproj" /nologo /verbosity:m /t:Build /p:Configuration=Debug
call "tools/nunit-console.exe" "%DEPLOYMENT_SOURCE%\CloudSiteTests\bin\Debug\CloudSiteTests.dll"

IF !ERRORLEVEL! NEQ 0 goto error</pre></div></div>

<p>Now when I commit all of these changes and the deployment runs in Azure, I get the following result:</p>
<div id="attachment_2384" style="width: 710px" class="wp-caption aligncenter"><a href="/wp-content/uploads/2014/02/02_UnitTestFailingDeployment.png"><img src="/wp-content/uploads/2014/02/02_UnitTestFailingDeployment.png" alt="Unit Test Failing Deployment" width="700" height="195" class="size-full wp-image-2384" srcset="/wp-content/uploads/2014/02/02_UnitTestFailingDeployment.png 700w, /wp-content/uploads/2014/02/02_UnitTestFailingDeployment-300x83.png 300w" sizes="(max-width: 700px) 100vw, 700px" /></a><p class="wp-caption-text">Unit Test Failing Deployment</p></div>
<p>The log for the deployment captures the results, so I can see exactly which test failed (and also, oddly, that they appeared to run the tests twice):</p>
<div id="attachment_2385" style="width: 710px" class="wp-caption aligncenter"><a href="/wp-content/uploads/2014/02/02_UnitTestResultsInLog.png"><img src="/wp-content/uploads/2014/02/02_UnitTestResultsInLog.png" alt="Detailed Log of Deployment Failure" width="700" height="489" class="size-full wp-image-2385" srcset="/wp-content/uploads/2014/02/02_UnitTestResultsInLog.png 700w, /wp-content/uploads/2014/02/02_UnitTestResultsInLog-300x209.png 300w" sizes="(max-width: 700px) 100vw, 700px" /></a><p class="wp-caption-text">Detailed Log of Deployment Failure</p></div>
<p>And then when I add some logic to make the test pass, I get this result:</p>
<div id="attachment_2383" style="width: 710px" class="wp-caption aligncenter"><a href="/wp-content/uploads/2014/02/02_RanTestsAndDeployed.png"><img src="/wp-content/uploads/2014/02/02_RanTestsAndDeployed.png" alt="Passing Unit tests and Successful Deployment" width="700" height="236" class="size-full wp-image-2383" srcset="/wp-content/uploads/2014/02/02_RanTestsAndDeployed.png 700w, /wp-content/uploads/2014/02/02_RanTestsAndDeployed-300x101.png 300w" sizes="(max-width: 700px) 100vw, 700px" /></a><p class="wp-caption-text">Passing Unit tests and Successful Deployment</p></div>
<p>And there we have it, Nunit unit tests running automatically during the deployment every time I commit to master.</p>
<h2>Sidenote: CassiniDev</h2>
<p>As I mentioned before, I originally had set out to get CassiniDev, Selenium, and Phantom all running in harmony as part of the build. I got CassiniDev and Selenium running locally, but couldn&#8217;t get CassiniDev to host the site during the deployment:</p>
<div id="attachment_2370" style="width: 710px" class="wp-caption aligncenter"><a href="/wp-content/uploads/2014/02/03_CassiniFailure.png"><img src="/wp-content/uploads/2014/02/03_CassiniFailure.png" alt="Network Permissions Denied for CassiniDev" width="700" height="306" class="size-full wp-image-2370" srcset="/wp-content/uploads/2014/02/03_CassiniFailure.png 700w, /wp-content/uploads/2014/02/03_CassiniFailure-300x131.png 300w" sizes="(max-width: 700px) 100vw, 700px" /></a><p class="wp-caption-text">Network Permissions Denied for CassiniDev</p></div>
<p>During the setup of the test, CassiniDev&#8217;s StartServer command receives an &#8220;Access Denied&#8221; exception.</p>
<p>This is the <a href="https://github.com/tarwn/CloudPixiesAndGhosts/tree/master/CloudPixiesTests">/CloudPixiesTests</a> project in the solution, if you&#8217;re curious. The Selenium + CassiniDev (ie, the magix pixies part of the repository name) runs fine locally. </p>
<h2>Would I Use This For Production?</h2>
<p>Personally, I wouldn&#8217;t use this as my test and deployment process. I think it&#8217;s a great system, but I miss too much from having a build server and have a high enough comfort level with build servers that this simplified setup doesn&#8217;t win me much (especially once you add in the limits on what you can do with the built-in staging platform).</p>
<p>I really like the deployment side of this and could see using it as the last mile, with a build server that automatically managed the build process and then either pushes to a repository or merges from the branch it&#8217;s building to the one that gets deployed. The only downside to this method would be applying schema updates to storage resources (SQL or serialized documents), as the actual deployment would then be operating asynchronously from your build process, but even that is solvable.</p>
]]></content:encoded>
			<wfw:commentRss>/index.php/enterprisedev/cloud/azure/azure-web-sites-deployment-and-unit-testing/feed/</wfw:commentRss>
		<slash:comments>2</slash:comments>
		</item>
		<item>
		<title>Using SpecFlow to drive Selenium WebDriver Tests</title>
		<link>/index.php/enterprisedev/application-lifecycle-management/using-specflow-to/</link>
		<comments>/index.php/enterprisedev/application-lifecycle-management/using-specflow-to/#comments</comments>
		<pubDate>Mon, 30 Jan 2012 10:52:00 +0000</pubDate>
		<dc:creator><![CDATA[Eli Weinstock-Herman (tarwn)]]></dc:creator>
				<category><![CDATA[Application Lifecycle Management]]></category>
		<category><![CDATA[bdd]]></category>
		<category><![CDATA[c#]]></category>
		<category><![CDATA[gherkin]]></category>
		<category><![CDATA[nunit]]></category>
		<category><![CDATA[selenium]]></category>
		<category><![CDATA[specflow]]></category>

		<guid isPermaLink="false">/index.php/2012/01/using-specflow-to/</guid>
		<description><![CDATA[SpecFlow is a .Net library that allows us to describe user expectations in a consistent Domain-Specific Language that can be wired for automatic execution. By writing tests in a human readable manner, our tests can serve as a bridge between the users expectations and the code we spend time writing.]]></description>
				<content:encoded><![CDATA[<p><a href="http://specflow.org/" title="Visit http://specflow.org/">SpecFlow</a> is a .Net library that allows us to describe user expectations in a consistent Domain-Specific Language that can be wired for automatic execution. By writing executable tests in a human readable manner, our tests can serve as a bridge between the users expectations and the code we produce to meet them. </p>
<p>This post will walk through the benefits and high level details of these methods before diving into a practical example of implementing several tests against the MVC Music Store site from my <a href="http://wiki.lessthandot.com/index.php/Eli%27s_Continuous_Delivery_Project" title="Visit the Wiki page on my Continuous Delivery project">Continuous Delivery</a> project. Along the way we will also use Selenium Web Driver, the Page Object pattern, and Nunit as we interact with an ASP.Net MVC site.</p>
<div style="text-align: center; font-size: .9em; color: #666666;">
	<img src="http://www.tiernok.com/LTDBlog/SpecFlow/MusicStore.jpg" title="ASP.Net MVC Music Store" /><br />
	ASP.Net MVC Music Store
</div>
<h2>Why Executable Tests</h2>
<p>End users don&#8217;t have a very clear idea of what they need. This is reflected in the requirements gathering time of projects that operate from detailed, up front specs. It&#8217;s also reflected by Agile practices, which promote short, iterative coding phases, one purpose of which is to get quick user feedback specifically to mitigate this risk. </p>
<p>Our users aren&#8217;t to blame. </p>
<p>Part of the problem is our misunderstanding of what the users are trying to achieve. With different backgrounds, vocabularies, and general contexts, communication gaps and misunderstandings are to be expected. Add the fact that our end user often has only a vague definition in their own mind of what they want, which takes seeing or using a particular piece of software to determine whether their idea is works or needs further improvement or refinement. And as if that weren&#8217;t enough, there&#8217;s often a failure ask for the appropriate level of understanding committing code to editor.</p>
<p>Tests can&#8217;t solve all of these issues, but they can help close the gap.</p>
<h3>SpecFlow, Gherkin, and Readable Tests</h3>
<p>SpecFlow defines features (user stories) and scenarios in a language called <a href="https://github.com/cucumber/cucumber/wiki/Gherkin" title="GitHub page for Gherkin">Gherkin</a>, which describes itself as a <a href="http://martinfowler.com/bliki/BusinessReadableDSL.html" title="Martin Fowler on Business-Readable DSLs">Business-Readable Domain-Specific Language</a>. Using a structured language to define business expectations first requires us do the appropriate level of analysis, or at least ask ourselves what the appropriate level of analysis is. Using a business-readable syntax means we can share the written requirements with our end user and they can confirm (or help correct) our understanding of their expectations. </p>
<p>With our user expectations written in a clearly structured DSL, we can then use a parser to wire those expectations directly to test code, minimizing any further misunderstandings or translation errors that would occur if we were write up the executable tests separately. Now we can consistently test our application against the very clear expectations we have confirmed with the end user. </p>
<p>Following the Behavior Driven Development (BDD) or Acceptance Test Driven Development methods, if we wire these tests up prior to starting to code for them, then we can help keep our work targeted directly to the end user expectations, minimizing waste from unnecessary additions and catching potential problems far sooner.</p>
<h2>Introducing the project</h2>
<p>As part of the Continuous Delivery project I mentioned above, I implemented a barebones interface testing project that uses Selenium WebDriver and Nunit to execute a couple basic tests against a deployed MVC site. The raw source code for the project is available on <a href="https://bitbucket.org/tarwn/mvcmusicstore.interfacetests" title="tarwn/mvcmusicstore.interfacetests on BitBucket">BitBucket</a>.</p>
<p><i>If you haven&#8217;t used Selenium before or are unfamiliar with the Page Object pattern, you can find more information in <a href="/index.php/WebDev/UIDevelopment/automated-web-testing-with-selenium-2" title="My earlier Selenium post covering the Page Object pattern">this earlier post</a> which covers these topics in depth.</i></p>
<div style="text-align: center; font-size: .9em; color: #666666;">
	<img src="http://www.tiernok.com/LTDBlog/ContinuousDelivery/interfacetests.png" title="Interface Tests Project" /><br />
	MVCMusicStore Interface Tests Project
</div>
<p>Currently the project has a minimal base page object and a few lightly defined pages, just enough to support a test to browse the main navigation links through the site and verify some genre links work. The SpecFlow tests that I add to the project will force me to continue fleshing out the necessary functionality of the Page Library and test project as we need new functionality or shortcut methods to keep the test implementations clean and readable.</p>
<p>The tests are written in Nunit and extend a TestFixtureBase class that is responsible for initializing a RemoteWebDriver (browser) and quitting it for each individual test. A singleton Settings object exists to load settings from a local configuration file for the full test run, letting us provide a configured base URL and to later add sample values that are specific to the environments the tests run in.</p>
<h2>Adding SpecFlow</h2>
<p>The first step is to add SpecFlow. While there is a NuGet package for it, you will actually want to download the <a href="https://github.com/techtalk/SpecFlow/downloads" title="SpecFlow downloads on GitHub">SpecFlow installer</a> and install it. The installer includes templates, intellisense, and other bits and bobs that you won&#8217;t get with the NuGet package. That said, I actually did both, first installing it then using NuGet to pull down the package for my project so I could commit the packaged references to the projects source code repository.</p>
<p>After installing the full install package, there will be a few new items in the &#8220;Add New Items&#8221; menu in Visual Studio.</p>
<div style="text-align: center; font-size: .9em; color: #666666;">
	<img src="http://www.tiernok.com/LTDBlog/SpecFlow/AddNewItem.png" title="'Add New Item' dialog in Visual Studio" /><br />
	&#8220;Add New Item&#8221; dialog in Visual Studio
</div>
<p>The &#8220;SpecFlow Feature File&#8221; option will create a new pair of files for our feature and the generated code behind that feature. The feature is where we will write our user story and the individual scenarios in Gherkin. The generated code reflects the scenario as an Nunit test, with each step in the scenario treated as a potential function to call out to.</p>
<p>The &#8220;SpecFlow Step Definition&#8221; item is just a *.cs class file that we would put the individual step functions in for the tests to call. Both the Feature File and Step Definition file are populated with an addition sample as part of their template..</p>
<h2>Adding a SpecFlow feature</h2>
<p>To start with, lets discuss what we&#8217;re going to be testing. Since the application is a Music store, lets define how we want the cart total to work. Here&#8217;s the User Story (feature) we will be working with:</p>
<blockquote><p>As a shopper I would like to see my up to date cart total as part of each screen so I don&#8217;t have to visit my cart to verify my items are in it</p></blockquote>
<p>Now this probably sounds like enough to go ahead an implement it, but lets nail down some scenarios first. If I was an working with an end user, these are the type of things we would probably come up with:</p>
<ul>
<li>When I have nothing in my cart, it displays a total of 0</li>
<li>When I add an item to my cart, it displays a total of 1</li>
<li>When I add two of the same item to my cart, it displays a total of 2</li>
<li>When I add two separate items to my cart, it displays a total of 2</li>
<li>When I have two items in my cart and I remove one, it displays a total of 1</li>
<li>When I have two items in my cart, after I checkout it displays a total of 0</li>
</ul>
<p>Note that these are a collaborative effort. My pretend end user probably came up with some, which I then helped to expand on via questions and experience.</p>
<p>Writing this in a Feature File in Gherkin we would have something like:</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="text"><thead><tr><td colspan="2"  class="head">Text</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
</pre></td><td class="de1"><pre class="de1">Feature: Cart Total
&nbsp; &nbsp; As a shopper 
&nbsp; &nbsp; I want to see my cart total on every screen 
&nbsp; &nbsp; So I don't have to leave my current page to verify it's contents
&nbsp;
@UI
Scenario: Empty Cart
&nbsp; &nbsp; Given I have the Home Page open
&nbsp; &nbsp; Then the cart is empty
&nbsp;
@UI
Scenario: Add an Item
&nbsp; &nbsp; Given I have the Home Page open
&nbsp; &nbsp; And I select a genre from the left
&nbsp; &nbsp; And I select an album from the genre page
&nbsp; &nbsp; When I add the album to my cart
&nbsp; &nbsp; Then the cart has a total of 1
&nbsp;
...</pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">Feature: Cart Total
	As a shopper 
	I want to see my cart total on every screen 
	So I don't have to leave my current page to verify it's contents

@UI
Scenario: Empty Cart
	Given I have the Home Page open
	Then the cart is empty

@UI
Scenario: Add an Item
	Given I have the Home Page open
	And I select a genre from the left
	And I select an album from the genre page
	When I add the album to my cart
	Then the cart has a total of 1

...</pre></div></div>

<p>I&#8217;ve added a SpecFlow Feature File to the project and I can write all of the scenarios for the feature. After saving it, I can run the Nunit GUI and see a series of new, inconclusive tests, each named after the Scenario name I provided in the Feature File.</p>
<div style="text-align: center; font-size: .9em; color: #666666;">
	<img src="http://www.tiernok.com/LTDBlog/SpecFlow/NunitInconclusive.png" title="Inconclusive tests in Nunit GUI" /><br />
	Inconclusive tests in Nunit GUI
</div>
<p>Feature File: <a href="https://bitbucket.org/tarwn/mvcmusicstore.interfacetests/src/410c3ab7c869/MvcMusicStore.InterfaceTests/Features/Cart.feature" title="View the file on BitBucket">View the file on BitBucket</a></p>
<p>Now it&#8217;s time to start wiring them into the Page Library calls.</p>
<h2>Wiring in the Browser</h2>
<p>When each scenario runs, we want it to start clean with a fresh browser instance. This is similar to how the existing <a href="https://bitbucket.org/tarwn/mvcmusicstore.interfacetests/src/a7082afb8304/MvcMusicStore.InterfaceTests/TestFixtureBase.cs" title="View the class on BitBucket">TestFixtureBase</a> works, so we can reuse that object with a few tweaks. The challenge with the SpecFlow scenarios is that I will be reusing steps in several different features and I don&#8217;t want several different browsers to open based on which class is instantiated to make a coded step definition available. Also, unlike the current interface tests that execute inside a single method, the fact that we are running tests across multiple methods will make it trickier to keep track of the current page instance.</p>
<p>Based on coding up several earlier SpecFlow steps, I ended up with a base class for my step definitions that helped resolve both of these issues, while also providing some properties to help improve readability.</p>
<p><b>InterfaceTests/Features/FeatureBase.cs</b></p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="csharp"><thead><tr><td colspan="2"  class="head">C#</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
</pre></td><td class="de1"><pre class="de1"><span class="kw1">namespace</span> MvcMusicStore<span class="sy0">.</span><span class="me1">InterfaceTests</span><span class="sy0">.</span><span class="me1">Features</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">public</span> <span class="kw4">class</span> FeatureBase <span class="sy0">:</span> TestFixtureBase <span class="br0">&#123;</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="co2">#region Properties for Readability</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="co1">/// &lt;summary&gt;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="co1">/// Shortcut property to Settings.CurrentSettings.Defaults for readability</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="co1">/// &lt;/summary&gt;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">protected</span> DefaultValues <span class="kw1">Default</span> <span class="br0">&#123;</span> <span class="kw1">get</span> <span class="br0">&#123;</span> <span class="kw1">return</span> Settings<span class="sy0">.</span><span class="me1">CurrentSettings</span><span class="sy0">.</span><span class="me1">Defaults</span><span class="sy0">;</span> <span class="br0">&#125;</span> <span class="br0">&#125;</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="co1">/// &lt;summary&gt;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="co1">/// Sets the Current page to the specified value - provided to help readability</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="co1">/// &lt;/summary&gt;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">protected</span> PageBase NextPage <span class="br0">&#123;</span> <span class="kw1">set</span> <span class="br0">&#123;</span> CurrentPage <span class="sy0">=</span> <span class="kw1">value</span><span class="sy0">;</span> <span class="br0">&#125;</span> <span class="br0">&#125;</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="co2">#endregion</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">protected</span> PageBase CurrentPage <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">get</span> <span class="br0">&#123;</span> <span class="kw1">return</span> <span class="br0">&#40;</span>PageBase<span class="br0">&#41;</span>ScenarioContext<span class="sy0">.</span><span class="me1">Current</span><span class="br0">&#91;</span><span class="st0">&quot;CurrentPage&quot;</span><span class="br0">&#93;</span><span class="sy0">;</span> <span class="br0">&#125;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">set</span> <span class="br0">&#123;</span> ScenarioContext<span class="sy0">.</span><span class="me1">Current</span><span class="br0">&#91;</span><span class="st0">&quot;CurrentPage&quot;</span><span class="br0">&#93;</span> <span class="sy0">=</span> <span class="kw1">value</span><span class="sy0">;</span> <span class="br0">&#125;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#91;</span>BeforeScenario<span class="br0">&#40;</span><span class="st0">&quot;UI&quot;</span><span class="br0">&#41;</span><span class="br0">&#93;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">public</span> <span class="kw4">void</span> BeforeScenario<span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">if</span> <span class="br0">&#40;</span><span class="sy0">!</span>ScenarioContext<span class="sy0">.</span><span class="me1">Current</span><span class="sy0">.</span><span class="me1">ContainsKey</span><span class="br0">&#40;</span><span class="st0">&quot;CurrentDriver&quot;</span><span class="br0">&#41;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Test_Setup<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ScenarioContext<span class="sy0">.</span><span class="me1">Current</span><span class="sy0">.</span><span class="kw1">Add</span><span class="br0">&#40;</span><span class="st0">&quot;CurrentDriver&quot;</span>, CurrentDriver<span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">else</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; CurrentDriver <span class="sy0">=</span> <span class="br0">&#40;</span>RemoteWebDriver<span class="br0">&#41;</span>ScenarioContext<span class="sy0">.</span><span class="me1">Current</span><span class="br0">&#91;</span><span class="st0">&quot;CurrentDriver&quot;</span><span class="br0">&#93;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#91;</span>AfterScenario<span class="br0">&#40;</span><span class="st0">&quot;UI&quot;</span><span class="br0">&#41;</span><span class="br0">&#93;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">public</span> <span class="kw4">void</span> AfterScenario<span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">if</span> <span class="br0">&#40;</span>ScenarioContext<span class="sy0">.</span><span class="me1">Current</span><span class="sy0">.</span><span class="me1">ContainsKey</span><span class="br0">&#40;</span><span class="st0">&quot;CurrentDriver&quot;</span><span class="br0">&#41;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Test_Teardown<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ScenarioContext<span class="sy0">.</span><span class="me1">Current</span><span class="sy0">.</span><span class="kw1">Remove</span><span class="br0">&#40;</span><span class="st0">&quot;CurrentDriver&quot;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw4">string</span> s <span class="sy0">=</span> <span class="st0">&quot;&quot;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp;
<span class="br0">&#125;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">namespace MvcMusicStore.InterfaceTests.Features {
        public class FeatureBase : TestFixtureBase {

                #region Properties for Readability

                /// &lt;summary&gt;
                /// Shortcut property to Settings.CurrentSettings.Defaults for readability
                /// &lt;/summary&gt;
                protected DefaultValues Default { get { return Settings.CurrentSettings.Defaults; } }

                /// &lt;summary&gt;
                /// Sets the Current page to the specified value - provided to help readability
                /// &lt;/summary&gt;
                protected PageBase NextPage { set { CurrentPage = value; } }

                #endregion

                protected PageBase CurrentPage {
                        get { return (PageBase)ScenarioContext.Current["CurrentPage"]; }
                        set { ScenarioContext.Current["CurrentPage"] = value; }
                }

                [BeforeScenario("UI")]
                public void BeforeScenario() {
                        if (!ScenarioContext.Current.ContainsKey("CurrentDriver")) {
                                Test_Setup();
                                ScenarioContext.Current.Add("CurrentDriver", CurrentDriver);
                        }
                        else {
                                CurrentDriver = (RemoteWebDriver)ScenarioContext.Current["CurrentDriver"];
                        }
                }

                [AfterScenario("UI")]
                public void AfterScenario() {
                        if (ScenarioContext.Current.ContainsKey("CurrentDriver")) {
                                Test_Teardown();
                                ScenarioContext.Current.Remove("CurrentDriver");
                        }
                        string s = "";
                }
        }

}</pre></div></div>

<p>I&#8217;ve used the SpecFlow hooks for BeforeScenario and AfterScenario to handle initialization and I&#8217;ve used the provided ScenarioContext to help store a common driver and the current page. I&#8217;ve also specified that these hooks only occur for tests tagged with &#8220;UI&#8221; so I can later create some additional tests that will make direct calls to the JSON controller endpoints without spinning up a whole browser session.</p>
<p>At this point I still get all &#8220;Inconclusive&#8221; test results from Nunit, but I can see that each tests fires up a browser as Nunit progresses through the test run and the Before/AfterScenario hooks are called.</p>
<h2>Defining the Step Definition File</h2>
<p>With the Feature completed and a base Feature file created to handle our browser, it&#8217;s time to write the code that will be executed behind the individuals steps of the file.</p>
<p>Besides creating tests that result in &#8220;Inconclusive&#8221; results, SpecFlow also provides us with some basic code to get started with the step definition file. In the text output tab of the Nunit GUI we can see that each undefined step from SpecFlow outputs the information needed to implement the step, like so:</p>
<div style="text-align: center; font-size: .9em; color: #666666;">
	<img src="http://www.tiernok.com/LTDBlog/SpecFlow/NunitStepDefinition.png" title="Step Definition text in Nunit Text Output" /><br />
	Step Definition text in Nunit Text Output
</div>
<p>Back in Visual Studio I will create a new &#8220;SpecFlow Step Definition&#8221; file and copy the content of the Nunit Text output window into the class in this file, removing the unnecessary addition example steps and all the extra class definitions and plain text. Each statement that appears in a Scenario in the Feature File has a corresponding method in the generated Nunit test, so each one will need a method. I&#8217;ve actually cheated a little and reused some steps from some earlier SpecFlow features, so my final file only has the new steps defined:</p>
<p>The other steps are in a previously defined <a href="https://bitbucket.org/tarwn/mvcmusicstore.interfacetests/src/a7082afb8304/MvcMusicStore.InterfaceTests/Features/BrowsingSteps.cs" title="Previously Defined BrowsingSteps.cs file">Step Definition file</a>. I&#8217;ll probably centralize common steps at some point to make them easy to find, but for the meantime the base class will help keep the current page and web browser accessible to the steps in both files and I have few enough tests that I&#8217;ll remember where those definitions are (remind me I said this when I go back in a week and make a fuss on twitter about not remembering where they are).</p>
<p>Once I have the Step Definition methods setup, I can go ahead and wire in the code necessary to drive the browser. I&#8217;ll walk through the methods for the &#8220;Add an Item&#8221; feature.</p>
<p><b>InterfaceTests/Features/Cart.feature</b></p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="text"><thead><tr><td colspan="2"  class="head">Text</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
</pre></td><td class="de1"><pre class="de1">&nbsp; &nbsp; Given I have the Home Page open
&nbsp; &nbsp; And I select a genre from the left
&nbsp; &nbsp; And I select an album from the genre page
&nbsp; &nbsp; When I add the album to my cart
&nbsp; &nbsp; Then the cart has a total of 1</pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">	Given I have the Home Page open
	And I select a genre from the left
	And I select an album from the genre page
	When I add the album to my cart
	Then the cart has a total of 1</pre></div></div>

<p>Keep in mind if you look at the code repository some of these steps are in separate files.</p>
<h3>Given I have the Home Page Open</h3>
<p>Each of my scenarios starts with the same step, ensuring we have the browser open and pointing to the site. The step definition is then fairly straightforward, given the base class already ensures we have a fresh browser available:</p>
<p><b>InterfaceTests/Features/NavigationSteps.cs</b> &#8211; this is the step I borrowed from a previous test</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="csharp"><thead><tr><td colspan="2"  class="head">C#</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
</pre></td><td class="de1"><pre class="de1"><span class="br0">&#91;</span>Given<span class="br0">&#40;</span><span class="st_h">@&quot;I have the Home Page open&quot;</span><span class="br0">&#41;</span><span class="br0">&#93;</span>
<span class="kw1">public</span> <span class="kw4">void</span> IHaveTheHomePageOpen<span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; NextPage <span class="sy0">=</span> PageBase<span class="sy0">.</span><span class="me1">LoadIndexPage</span><span class="br0">&#40;</span>CurrentDriver, Settings<span class="sy0">.</span><span class="me1">CurrentSettings</span><span class="sy0">.</span><span class="me1">BaseUrl</span><span class="br0">&#41;</span><span class="sy0">;</span>
<span class="br0">&#125;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">[Given(@"I have the Home Page open")]
public void IHaveTheHomePageOpen() {
	NextPage = PageBase.LoadIndexPage(CurrentDriver, Settings.CurrentSettings.BaseUrl);
}</pre></div></div>

<p>The class definition for FeatureBase above includes a CurrentPage property that we use to store and retrieve the page object associated with the browsers current page. To improve readability a little, I&#8217;ve created the NextPage property, which is simply a setter for the CurrentPage one. </p>
<h3>And I select a genre from the left</h3>
<p>All pages in the application display the genre list on the left, so this makes a simple way to get to a specific genre page no matter where we are in the site.</p>
<p><b>InterfaceTests/Features/CartSteps.cs</b></p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="csharp"><thead><tr><td colspan="2"  class="head">C#</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
</pre></td><td class="de1"><pre class="de1"><span class="br0">&#91;</span>Given<span class="br0">&#40;</span><span class="st_h">@&quot;I select a genre from the left&quot;</span><span class="br0">&#41;</span><span class="br0">&#93;</span>
<span class="kw1">public</span> <span class="kw4">void</span> GivenISelectAGenreFromTheLeft<span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; NextPage <span class="sy0">=</span> CurrentPage<span class="sy0">.</span><span class="me1">SelectGenre</span><span class="br0">&#40;</span><span class="kw1">Default</span><span class="sy0">.</span><span class="me1">Genre</span><span class="sy0">.</span><span class="me1">Name</span><span class="br0">&#41;</span><span class="sy0">;</span>
<span class="br0">&#125;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">[Given(@"I select a genre from the left")]
public void GivenISelectAGenreFromTheLeft() {
	NextPage = CurrentPage.SelectGenre(Default.Genre.Name);
}</pre></div></div>

<p>All page objects extend the PageBase class, so I&#8217;ve added a partial class for PageBase (PageLibraryPageBase.Navigation.cs) that includes navigation and behavior that&#8217;s common to all pages in the application. </p>
<p><b>Default.Genre.Name</b>: As I mentioned earlier, there is a singleton Settings object that is responsible for loading settings from an XML file and making them available to the tests. I&#8217;ve added a <i>Genre</i> and <i>Album</i> element to the settings file so I can provide some default values without hardcoding them into the test code or, worse, each individual test. I then created another shortcut property in my FeatureBase so I can reference these values by the property name Default instead of the much longer Settings.CurrentSettings.Default.</p>
<h3>And I select an album from the genre page</h3>
<p>Once I have the genre page open, I can select an album that I intend to add to the cart.</p>
<p><b>InterfaceTests/Features/CartSteps.cs</b></p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="csharp"><thead><tr><td colspan="2"  class="head">C#</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
</pre></td><td class="de1"><pre class="de1"><span class="br0">&#91;</span>Given<span class="br0">&#40;</span><span class="st_h">@&quot;I select an album from the genre page&quot;</span><span class="br0">&#41;</span><span class="br0">&#93;</span>
<span class="kw1">public</span> <span class="kw4">void</span> GivenISelectAnAlbumFromTheGenrePage<span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; NextPage <span class="sy0">=</span> CurrentPage<span class="sy0">.</span><span class="kw1">As</span><span class="sy0">&lt;</span>BrowsePage<span class="sy0">&gt;</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">.</span><span class="me1">SelectAlbum</span><span class="br0">&#40;</span><span class="kw1">Default</span><span class="sy0">.</span><span class="me1">Album</span><span class="sy0">.</span><span class="me1">Name</span><span class="br0">&#41;</span><span class="sy0">;</span>
<span class="br0">&#125;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">[Given(@"I select an album from the genre page")]
public void GivenISelectAnAlbumFromTheGenrePage() {
	NextPage = CurrentPage.As&lt;BrowsePage&gt;().SelectAlbum(Default.Album.Name);
}</pre></div></div>

<p>One of the downsides of having a single property to track the current page is that it is typed as a PageBase object. I could add cast statements to each line, but by adding a generic method to handle the cast, I preserve the left-to-right reading order of the statement. Had I used an inline cast, we would be looking at:</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="csharp"><thead><tr><td colspan="2"  class="head">C#</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
</pre></td><td class="de1"><pre class="de1"><span class="br0">&#91;</span>Given<span class="br0">&#40;</span><span class="st_h">@&quot;I select an album from the genre page&quot;</span><span class="br0">&#41;</span><span class="br0">&#93;</span>
<span class="kw1">public</span> <span class="kw4">void</span> GivenISelectAnAlbumFromTheGenrePage<span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; NextPage <span class="sy0">=</span> <span class="br0">&#40;</span><span class="br0">&#40;</span>BrowsePage<span class="br0">&#41;</span>CurrentPage<span class="br0">&#41;</span><span class="sy0">.</span><span class="me1">SelectAlbum</span><span class="br0">&#40;</span><span class="kw1">Default</span><span class="sy0">.</span><span class="me1">Album</span><span class="sy0">.</span><span class="me1">Name</span><span class="br0">&#41;</span><span class="sy0">;</span>
<span class="br0">&#125;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">[Given(@"I select an album from the genre page")]
public void GivenISelectAnAlbumFromTheGenrePage() {
	NextPage = ((BrowsePage)CurrentPage).SelectAlbum(Default.Album.Name);
}</pre></div></div>

<p>Which just doesn&#8217;t seem as readable to me.</p>
<p>I&#8217;ve added the generic cast method to the PageBase method to make it easily accessible:</p>
<p><b>PageLibrary/Base/PageBase.cs</b></p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="csharp"><thead><tr><td colspan="2"  class="head">C#</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
</pre></td><td class="de1"><pre class="de1"><span class="kw1">public</span> <span class="kw1">abstract</span> <span class="kw1">partial</span> <span class="kw4">class</span> PageBase <span class="sy0">:</span> CommonBase <span class="br0">&#123;</span>
&nbsp;
&nbsp; &nbsp; <span class="co1">//...</span>
&nbsp; &nbsp; 
&nbsp; &nbsp; <span class="kw1">public</span> TPage <span class="kw1">As</span><span class="sy0">&lt;</span>TPage<span class="sy0">&gt;</span><span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="kw1">where</span> TPage <span class="sy0">:</span> PageBase, <span class="kw3">new</span><span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">return</span> <span class="br0">&#40;</span>TPage<span class="br0">&#41;</span><span class="kw1">this</span><span class="sy0">;</span>
&nbsp; &nbsp; <span class="br0">&#125;</span>
<span class="br0">&#125;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">public abstract partial class PageBase : CommonBase {

	//...
	
	public TPage As&lt;TPage&gt;() where TPage : PageBase, new() {
		return (TPage)this;
	}
}</pre></div></div>

<h3>When I add the album to my cart</h3>
<p>If you remember, the original scenario we listed above was &#8220;When I add an item to my cart, it displays a total of 1&#8221;. Often it is fairly easy to separate the Given portion of our scenario from the When/Then portion because the Given part is often the part that we took for granted when we were describing the scenario or when it was described to us.</p>
<p><b>InterfaceTests/Features/CartSteps.cs</b></p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="csharp"><thead><tr><td colspan="2"  class="head">C#</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
</pre></td><td class="de1"><pre class="de1"><span class="br0">&#91;</span>When<span class="br0">&#40;</span><span class="st_h">@&quot;I add the album to my cart&quot;</span><span class="br0">&#41;</span><span class="br0">&#93;</span>
<span class="kw1">public</span> <span class="kw4">void</span> WhenIAddTheAlbumToMyCart<span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; NextPage <span class="sy0">=</span> CurrentPage<span class="sy0">.</span><span class="kw1">As</span><span class="sy0">&lt;</span>AlbumDetailPage<span class="sy0">&gt;</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">.</span><span class="me1">AddToCart</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
<span class="br0">&#125;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">[When(@"I add the album to my cart")]
public void WhenIAddTheAlbumToMyCart() {
	NextPage = CurrentPage.As&lt;AlbumDetailPage&gt;().AddToCart();
}</pre></div></div>

<p>As you can tell by now, the actual logic that goes into the step definition files is fairly minimal. This is by design and is similar to the MVC concept of a thin controller. By keeping the page behavior in the page objects, we&#8217;re attempting to minimize the brittleness of our test code.</p>
<h3>Then the cart has a total of 1</h3>
<p>The last step is to verify the expectation. We&#8217;re going to do something a little special with this step because it matches a similar step across several of the tests, with the exception of the number we are expecting to see.</p>
<p><b>InterfaceTests/Features/CartSteps.cs</b></p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="csharp"><thead><tr><td colspan="2"  class="head">C#</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
</pre></td><td class="de1"><pre class="de1"><span class="br0">&#91;</span>Then<span class="br0">&#40;</span><span class="st_h">@&quot;the cart has a total of (d+)&quot;</span><span class="br0">&#41;</span><span class="br0">&#93;</span>
<span class="kw1">public</span> <span class="kw4">void</span> ThenTheCartHasATotalOf<span class="br0">&#40;</span><span class="kw4">int</span> expectedTotal<span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; CurrentPage<span class="sy0">.</span><span class="me1">VerifyCartTotalIs</span><span class="br0">&#40;</span>expectedTotal<span class="br0">&#41;</span><span class="sy0">;</span>
<span class="br0">&#125;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">[Then(@"the cart has a total of (d+)")]
public void ThenTheCartHasATotalOf(int expectedTotal) {
	CurrentPage.VerifyCartTotalIs(expectedTotal);
}</pre></div></div>

<p>SpecFlow allows us to enter a regular expression in the step definition, which it will then use to populate arguments for our step definition function. So instead of making a separate function for testing a cart total of 0, 1, and 2, I can make one function that tests whichever value matches the match group in my decorators expression.</p>
<h3>Result</h3>
<p>With all of the steps built, I can now run the test for verification:</p>
<div style="text-align: center; font-size: .9em; color: #666666;">
	<img src="http://www.tiernok.com/LTDBlog/SpecFlow/NunitAddItemDone.png" title="Pass test run for 'Add Item' scenario" /><br />
	Pass test run for &#8216;Add Item&#8217; scenario
</div>
<p>The text output tab of Nunit still provides us with information at the step level, but more importantly we now have a &#8220;Pass&#8221;.</p>
<h2>Wrapping Up</h2>
<p>By capturing the end users expectations in this way, we have some structure that helps gather them at a good level of detail while also providing a testable version that we can automatically run as we develop the solution and as a regression suite when we are finished. The requirements are readable by our end user, by ourselves, and can be programmed against. As we build up a library of common step definitions we will start being able to put new tests together even faster as well as have some visibility into what portions of the application are the most critical (if a step shows up in 50% of our tests, it&#8217;s a good bet it&#8217;s a lot more critical to the stability of our application than the item that shows up once in a single test).</p>
<p>All of the code for this project is available in <a href="https://bitbucket.org/tarwn/mvcmusicstore.interfacetests" title="tarwn/MvcMusicStore.InterfaceTests project on BitBucket">BitBucket</a>.</p>
]]></content:encoded>
			<wfw:commentRss>/index.php/enterprisedev/application-lifecycle-management/using-specflow-to/feed/</wfw:commentRss>
		<slash:comments>14</slash:comments>
		</item>
	</channel>
</rss>
