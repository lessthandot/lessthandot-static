<?xml version="1.0" encoding="UTF-8"?><rss version="2.0"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:atom="http://www.w3.org/2005/Atom"
	xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
	xmlns:slash="http://purl.org/rss/1.0/modules/slash/"
	>

<channel>
	<title>.net &#8211; LessthanDot</title>
	<atom:link href="/index.php/tag/net/feed/" rel="self" type="application/rss+xml" />
	<link>/</link>
	<description>A Technical Community for IT Professionals</description>
	<lastBuildDate>Sat, 09 Mar 2019 12:50:36 +0000</lastBuildDate>
	<language>en-US</language>
	<sy:updatePeriod>hourly</sy:updatePeriod>
	<sy:updateFrequency>1</sy:updateFrequency>
	<generator>https://wordpress.org/?v=4.6.1</generator>
	<item>
		<title>Compiled list of C# + .Net Features</title>
		<link>/index.php/desktopdev/mstech/compiled-list-of-c-net-features/</link>
		<comments>/index.php/desktopdev/mstech/compiled-list-of-c-net-features/#comments</comments>
		<pubDate>Mon, 07 Sep 2015 10:16:29 +0000</pubDate>
		<dc:creator><![CDATA[Eli Weinstock-Herman (tarwn)]]></dc:creator>
				<category><![CDATA[C#]]></category>
		<category><![CDATA[Microsoft Technologies]]></category>
		<category><![CDATA[.net]]></category>
		<category><![CDATA[c#]]></category>

		<guid isPermaLink="false">/?p=4112</guid>
		<description><![CDATA[We have talked about doing this at work for a while, so I finally sat down this weekend and tried to make a list of C# features that the team could share. We intend to use this to help gauge who the best people are to ask questions in different areas (C# isn&#8217;t our only [&#8230;]]]></description>
				<content:encoded><![CDATA[<p>We have talked about doing this at work for a while, so I finally sat down this weekend and tried to make a list of C# features that the team could share. We intend to use this to help gauge who the best people are to ask questions in different areas (C# isn&#8217;t our only list) as well as a list of things to learn when you&#8217;re bored (after crossing off all the ones you know). I added in some of the .Net framework features to round the list off.</p>
<p>Based on their relevance in our team, I left some grouped together (like unsafe code and WPF) and broke others into details (ASP.Net). Do you see any I missed? How much of the list have you worked with in production?</p>
<h1>C# Language Features</h1>
<p><b>Statements:</b></p>
<ul>
<li>[C# 1.0] Iteration: for, foreach, while, do</li>
<li>[C# 1.0] Jump: break, continue, goto, return</li>
<li>[C# 1.0] Empty statement</li>
<li>[C# 1.0] Labeled statements</li>
<li>[C# 1.0] Conditional: if elseif else switch case default</li>
<li>[C# 1.0] Catching exceptions: try catch finally</li>
<li>[C# 1.0] Checked/Unchecked statements</li>
<li>[C# 1.0] lock</li>
<li>[C# 1.0] using</li>
</ul>
<p><b>Operators:</b></p>
<ul>
<li>[C# 1.0] Arithmetic + &#8211; * / %</li>
<li>[C# 1.0] Logical Comparisons &#038; | ^ ! ~ &#038;&#038; || true false</li>
<li>[C# 1.0] String concatenation</li>
<li>[C# 1.0] Increment/Decrement (++x &#8211;x x++ x&#8211;)</li>
<li>[C# 1.0] Binary Shift (<< >>)</li>
<li>[C# 1.0] Comparison (==   !=   <   >   <=   >=)</li>
<li>[C# 1.0] Assignment (=   +=   -=   *=   /=   %=   &#038;=   |=   ^=   <<=   >>=)</li>
<li>[C# 1.0] Indexing []</li>
<li>[C# 1.0] Cast ()</li>
<li>[C# 1.0] Conditional/Ternary (condition)?(if-true):(if-false)</li>
<li>[C# 2.0] Null Coalescing: ??</li>
<li>[C# 6.0] Null Propagation: ?.</li>
<li>[C# 1.0] Type Information as is sizeof typeof</li>
</ul>
<p><b>Language Features:</b></p>
<ul>
<li>[C# 1.0] Arrays</li>
<li>[C# 1.0] Operator Overloading</li>
<li>[C# 1.0] Inheritance: extends base</li>
<li>[C# 1.0] Hiding: new</li>
<li>[C# 1.0] Access modifiers: public protected private internal &#8220;protected internal&#8221;</li>
<li>[C# 1.0] Modifiers &#8211; static instance const virtual overrides sealed extern</li>
<li>[C# 1.0] Property Declaration</li>
<li>[C# 1.0] Constructors</li>
<li>[C# 1.0] Static Constructors</li>
<li>[C# 1.0] Destructors</li>
<li>[C# 1.0] Nested Classes</li>
<li>[C# 1.0] Events, Declaration and Usage</li>
<li>[C# 1.0] Indexers</li>
<li>[C# 1.0] Properties</li>
<li>[C# 1.0] Interfaces</li>
<li>[C# 1.0] Structs</li>
<li>[C# 1.0] Enums</li>
<li>[C# 1.0] Delegates</li>
<li>[C# 1.0] Exceptions</li>
<li>[C# 1.0] Attributes</li>
<li>[C# 1.0] Unsafe Code: unsafe contexts, pointers, fixed/moveable variables, stack allocation</li>
<li>[C# 1.0] Boxing and Unboxing</li>
<li>[C# 1.0] Application Startup/Termination: Main, termination status code</li>
<li>[C# 1.0] Preprocessor Conditionals: #if #elif #else #endif</li>
<li>[C# 1.0] Preprocessor Declarations: #define #undef</li>
<li>[C# 1.0] Preprocessor Debug: #error</li>
<li>[C# 1.0] Preprocessor Region: #region #endregion</li>
<li>[C# 1.0] Preprocessor Region: #line</li>
<li>[C# 2.0] Preprocessor Region: #pragma warning</li>
<li>[C# 2.0] Generics &#8211; Usage</li>
<li>[C# 2.0] Generic Class Declaration</li>
<li>[C# 2.0] Generic Constraints: &#8220;where T&#8221;</li>
<li>[C# 2.0] Anonymous methods (inline delegates, closures)</li>
<li>[C# 2.0] Iterators: yield</li>
<li>[C# 2.0] Static Classes</li>
<li>[C# 2.0] Partial types: &#8220;public partial class XYZ&#8221;</li>
<li>[C# 2.0] Nullable types: &#8220;int? x = null&#8221;</li>
<li>[C# 2.0] namespace aliases: &#8220;using xyz = System.IO;&#8221;</li>
<li>[C# 2.0] Default value expression: default()</li>
<li>[C# 2.0] Conditional attribute</li>
<li>[C# 2.0] Fixed size buffers</li>
<li>[C# 2.0] Delegate Covariance/Contravariance</li>
<li>[C# 2.0] Friend Assemblies: aka &#8220;oops we made everything internal&#8221;</li>
<li>[C# 3.0] Implicitly Typed Local Variables: var</li>
<li>[C# 3.0] Extension Methods</li>
<li>[C# 3.0] Lambda expressions</li>
<li>[C# 3.0] Generic method Type Inference</li>
<li>[C# 3.0] Object and Collection Initializers</li>
<li>[C# 3.0] Anonymouse types</li>
<li>[C# 3.0] Implicitly typed arrays</li>
<li>[C# 3.0] Query Expressions: from into in join let orderby group select</li>
<li>[C# 3.0] Automatically implemented properties: &#8220;public int X { get; set; }&#8221;</li>
<li>[C# 3.0] Partial method declaration</li>
<li>[C# 4.0] Covariance, Contravariance</li>
<li>[C# 4.0] Dynamic Dispatch: dynamic</li>
<li>[C# 4.0] Named Arguments and Optional Parameters (for Methods)</li>
<li>[C# 5.0] Async modified: async await</li>
<li>[C# 5.0] Caller Information Attributes</li>
<li>[C# 6.0] Roslyn &#8211; Compiler-as-a-service</li>
<li>[C# 6.0] Initializers for Automatic Properties</li>
<li>[C# 6.0] Getter-only Automatic Properties</li>
<li>[C# 6.0] Lambda Expressions for Method Declaration</li>
<li>[C# 6.0] Lambda Expressions for Property Body Declaration</li>
<li>[C# 6.0] Using static</li>
<li>[C# 6.0] Null-conditional operators</li>
<li>[C# 6.0] String interpolation</li>
<li>[C# 6.0] nameof</li>
<li>[C# 6.0] Index Initializers syntax improvement</li>
<li>[C# 6.0] Exception filters</li>
<li>[C# 6.0] Exception filters</li>
</ul>
<p>Where&#8217;s LINQ???!? In the .Net Framework of course:</p>
<h1>.Net Framework Features</h1>
<p><b>.Net 1.0</b></p>
<ul>
<li>Collections: ArrayList, HashTable, Dictionary</li>
<li>Threading &#8211; ThreadPool, Thread, ThreadStart</li>
<li>Threading &#8211; Synchronized Regions: SynchronizationAttribute, Monitor (lock/SyncLock)</li>
<li>Threading &#8211; Manual Synchronization: Interlocked, WaitHandle/Mutex, ManualResetEvent, AutoResetEvent</li>
<li>ADO.Net &#8211; Database access using: Connection, Command, DataReader, DbParameter</li>
<li>ASP.Net &#8211; WebForms</li>
<li>ASP.Net &#8211; ASMX</li>
<li>ASP.Net &#8211; ASHX</li>
<li>ASP.Net &#8211; Page output caching</li>
<li>ASP.Net &#8211; Application Cache</li>
</ul>
<p><b>.Net 2.0</b></p>
<ul>
<li>Threading &#8211; BackgroundWorker</li>
<li>Threading &#8211; SynchronizationContext</li>
<li>Generics</li>
<li>Generic Collections: List&lt;T&gt;, Stack&lt;T&gt;, Queue&lt;T&gt;, Dictionary&lt;TKey,TValue&gt;, LinkedList&lt;T&gt;, SortedDictionary&lt;TKey,TValue&gt;, ReadOnlyCollection&lt;T&gt;, etc</li>
<li>Nullable types</li>
<li>Partial Classes</li>
<li>Anonymous methods</li>
<li>Iterators</li>
<li>Data Protection API</li>
<li>Globalization: Culture, CultureInfo</li>
<li>System.Diagnostics.EventLog</li>
<li>System.Net.Mail</li>
<li>ResGen.exe</li>
<li>Threading &#8211; System.Threading.Semaphore</li>
<li>ADO.Net &#8211; Asynchronous Processing</li>
<li>ADO.Net &#8211; SqlBulkCopy</li>
<li>ADO.Net &#8211; SQL Server User Defined Types</li>
<li>ADO.Net &#8211; SQL Server Max Data Types</li>
<li>ADO.Net &#8211; DataSet + DataAdapter Batch Processing</li>
<li>ADO.Net &#8211; Query Notifications</li>
<li>ADO.Net &#8211; Connection Pool Control</li>
<li>ADO.Net &#8211; System.Transactions</li>
<li>ADO.Net &#8211; DataTableReader</li>
<li>ADO.Net &#8211; Multiple Active Result Sets (MARS)</li>
<li>ASP.Net &#8211; Master/Content pages</li>
<li>ASP.Net &#8211; WebParts</li>
<li>ASP.Net &#8211; Skins/Themes</li>
<li>ASP.Net &#8211; Membership</li>
<li>ASP.Net &#8211; Profiles and Custom Profile Properties</li>
<li>ASP.Net &#8211; Cache Profiles</li>
<li>ASP.Net &#8211; Microsoft AJAX</li>
</ul>
<p><b>.Net 3.0</b></p>
<ul>
<li>WCF</li>
<li>WPF</li>
<li>Windows Workflow Foundation 1.0</li>
<li>Windows CardSpace</li>
</ul>
<p><b>.Net 3.5</b></p>
<ul>
<li>.Net Compact Framework</li>
<li>System.AddIn</li>
<li>Collections &#8211; HashSet&lt;T&gt;, SortedSet&lt;T&gt;</li>
<li>Pipes</li>
<li>LINQ</li>
<li>LINQ &#8211; Expression Trees</li>
<li>ADO.Net &#8211; LINQ to SQL</li>
<li>ADO.Net &#8211; LINQ to Dataset</li>
<li>ADO.Net &#8211; Entity Data Model / Entity Framework 1</li>
<li>ASP.Net &#8211; ScriptManager, AJAX Controls</li>
<li>ASP.net &#8211; Dynamic Data</li>
<li>Silverlight</li>
</ul>
<p><b>.Net 4.0</b></p>
<ul>
<li>AppDomain Monitoring</li>
<li>Code Contracts</li>
<li>Covariance and Contravariance in Generics</li>
<li>Memory Mapped Files</li>
<li>Portable Class Libraries</li>
<li>Threading &#8211; PLINQ (pop quiz: does AsParallel() go at the beginning or end of your LINQ statement? Why?)</li>
<li>Threading &#8211; TPL &#8211; System.Threading.Tasks</li>
<li>Threading &#8211; Barrier, SpinWait, SpinLock, CancellationTokens, BlockingCollection&lt;T&gt;</li>
<li>Threading &#8211; ConcurrentStack, ConcurrentQueue, ConcurrentDictionary, ConcurrentBag</li>
<li>Tuples (*sigh*)</li>
<li>IObservable, Reactive Extensions</li>
<li>ADO.Net &#8211; Entity Framework 4</li>
<li>MEF</li>
<li>ASP.Net &#8211; HTML5 form types</li>
<li>ASP.Net &#8211; Bundling and minification</li>
<li>ASP.Net &#8211; WebSocket Support</li>
<li>ASP.Net &#8211; Asynchronous Requests/Responses</li>
<li>ASP.Net &#8211; System.Net.Http</li>
<li>ASP.Net &#8211; MVC</li>
<li>ASP.Net &#8211; Web API 1</li>
<li>ASP.Net &#8211; Extensible Cache &#8211; OutputCacheProvider</li>
<li>ASP.Net &#8211; Extensible Request Validation &#8211; RequestValidator</li>
<li>ASP.Net &#8211; Resource Monitoring &#8211; appDomainResourceMonitoring</li>
</ul>
<p><b>.Net 4.5, 4.6</b></p>
<ul>
<li>AppContext Compatibility Switches</li>
<li>.Net Native</li>
<li>Threading &#8211; TPL Dataflow</li>
<li>System.Net.Http</li>
<li>System.Net.WebSockets</li>
<li>ADO.Net &#8211; SQLClient Streaming Support</li>
<li>ADO.Net &#8211; Async for Connection, DbCommand, DbDataReader, SqlCommand, SqlDataReader, SqlBulkCopy</li>
<li>ADO.Net &#8211; AlwaysOn support</li>
<li>ADO.Net &#8211; LocalDB</li>
<li>ADO.Net &#8211; Entity Framework 5</li>
<li>ADO.Net &#8211; Extended Protection</li>
<li>ASP.Net &#8211; Web API 2</li>
<li>ASP.Net &#8211; OData</li>
</ul>
<p>Whew, and that doesn&#8217;t even count all of the extra nuget packages that are out there now&#8230;It&#8217;s hard to remember how we managed without some of this stuff back in the 1.0 and 1.1 days.</p>
]]></content:encoded>
			<wfw:commentRss>/index.php/desktopdev/mstech/compiled-list-of-c-net-features/feed/</wfw:commentRss>
		<slash:comments>2</slash:comments>
		</item>
		<item>
		<title>Stupid me #3 – Building the script component</title>
		<link>/index.php/datamgmt/ssis/stupid-me-3-building-the/</link>
		<comments>/index.php/datamgmt/ssis/stupid-me-3-building-the/#respond</comments>
		<pubDate>Tue, 01 Oct 2013 13:05:00 +0000</pubDate>
		<dc:creator><![CDATA[Koen Verbeeck]]></dc:creator>
				<category><![CDATA[Business Intelligence]]></category>
		<category><![CDATA[SSIS]]></category>
		<category><![CDATA[.net]]></category>
		<category><![CDATA[c#]]></category>
		<category><![CDATA[script component]]></category>
		<category><![CDATA[ssis]]></category>
		<category><![CDATA[syndicated]]></category>

		<guid isPermaLink="false">/index.php/2013/10/stupid-me-3-building-the/</guid>
		<description><![CDATA[After over 6 months of silence, it is time again for another Stupid me™®©! For those unfamiliar with the concept:
Every time I do something “stupid”, which happens from time to time, I’ll do a little blog post on what happened and how I solved it. The&#8230;]]></description>
				<content:encoded><![CDATA[<p style="text-align: justify;">After over 6 months of silence, it is time again for another Stupid me™®©! For those unfamiliar with the concept:</p>
<p style="text-align: justify;"><em>Every time I do something “stupid”, which happens from time to time, I’ll do a little blog post on what happened and how I solved it. The reason for this is twofold: I’ll have a solution online I can consult if it happens again and other people can benefit from my mistakes as well. Because remember the ancient Chinese proverb</em>: <em>“It’s only stupid if you don’t turn it into a learning experience”. Okay, I might have made that last one up…</em></p>
<p style="text-align: justify;"><strong>The problem</strong></p>
<p style="text-align: justify;">From time to time I have to script out some logic using a Script Component in a SSIS package. Business as usual for most developers, but since I hardly have a .NET background, it’s always a very stressful experience (I may be over exaggerating a bit). Sometimes it happens I write a little piece of code with a small bug, it happens to the best of us.</p>
<p style="text-align: justify;"><a href="/media/users/koenverbeeck/StupidMe3/introducebug.PNG?mtime=1380632628"><img src="/wp-content/uploads/users/koenverbeeck/StupidMe3/introducebug.PNG?mtime=1380632628" alt="" width="540" height="120" /></a></p>
<p><span style="text-align: justify;">For those who haven’t noticed: you cannot store -1 in a byte. Anyway, the wonderful designer that is the Visual Studio shell fails to warn me of my little indiscretion. Leaving me with a script component that won’t compile.</span></p>
<p style="text-align: justify;"><a href="/media/users/koenverbeeck/StupidMe3/nocompile.PNG?mtime=1380632628"><img src="/wp-content/uploads/users/koenverbeeck/StupidMe3/nocompile.PNG?mtime=1380632628" alt="" width="676" height="212" /></a></p>
<p><span style="text-align: justify;">The matching errors aren’t helpful either.</span></p>
<p style="text-align: justify;"><a href="/media/users/koenverbeeck/StupidMe3/errors.PNG?mtime=1380632628"><img src="/wp-content/uploads/users/koenverbeeck/StupidMe3/errors.PNG?mtime=1380632628" alt="" width="853" height="307" /></a></p>
<p><span style="font-weight: bold; text-align: justify;">The solution</span></p>
<p style="text-align: justify;">The solution is elegant yet simple: we force the designer to tell us what’s wrong by building the code inside the script component.</p>
<p style="text-align: justify;"><a href="/media/users/koenverbeeck/StupidMe3/button.PNG?mtime=1380632628"><img src="/wp-content/uploads/users/koenverbeeck/StupidMe3/button.PNG?mtime=1380632628" alt="" width="467" height="125" /></a></p>
<p><span style="text-align: justify;">This results in a blue squiggly being added to the code, together with a decent explanation.</span></p>
<p style="text-align: justify;"><a href="/media/users/koenverbeeck/StupidMe3/buildscript.PNG?mtime=1380632628"><img src="/wp-content/uploads/users/koenverbeeck/StupidMe3/buildscript.PNG?mtime=1380632628" alt="" width="559" height="227" /></a></p>
<p><span style="text-align: justify;">The moral of this story: if the script component is giving you a hard time, hit that build button!</span></p>
]]></content:encoded>
			<wfw:commentRss>/index.php/datamgmt/ssis/stupid-me-3-building-the/feed/</wfw:commentRss>
		<slash:comments>0</slash:comments>
		</item>
		<item>
		<title>Visual Studio 2013 Preview, Visual Studio 2012 Update 3 and .NET Framework 4.5.1 Now Available</title>
		<link>/index.php/enterprisedev/entdev/visual-studio-2013-preview-visual/</link>
		<comments>/index.php/enterprisedev/entdev/visual-studio-2013-preview-visual/#respond</comments>
		<pubDate>Wed, 26 Jun 2013 18:23:00 +0000</pubDate>
		<dc:creator><![CDATA[SQLDenis]]></dc:creator>
				<category><![CDATA[Architecture]]></category>
		<category><![CDATA[Enterprise Development]]></category>
		<category><![CDATA[.net]]></category>
		<category><![CDATA[visual studio 2012]]></category>
		<category><![CDATA[visual studio 2013]]></category>

		<guid isPermaLink="false">/index.php/2013/06/visual-studio-2013-preview-visual/</guid>
		<description><![CDATA[Visual Studio 2013 Preview, Visual Studio 2012 Update 3 and .NET Framework 4.5.1 are available for download

You can download the following versions of Visual Studio 2013 Preview

Visual Studio 2013 Preview
Visual Studio Ultimate 2013 Preview
Visu&#8230;]]></description>
				<content:encoded><![CDATA[<p>Visual Studio 2013 Preview, Visual Studio 2012 Update 3 and .NET Framework 4.5.1 are available for download</p>
<p>You can download the following versions of Visual Studio 2013 Preview</p>
<p><strong>Visual Studio 2013 Preview</strong><br />
Visual Studio Ultimate 2013 Preview<br />
Visual Studio Premium 2013 Preview<br />
Visual Studio Professional 2013 Preview<br />
Visual Studio Test Professional 2013 Preview<br />
Team Foundation Server 2013 Preview</p>
<p><strong>Visual Studio Express 2013 Preview</strong><br />
Visual Studio Express 2013 Preview for Web<br />
Visual Studio Express 2013 Preview for Windows<br />
Visual Studio Express 2013 Preview for Windows Desktop<br />
Visual Studio Team Foundation Server Express 2013 Preview</p>
<p>There is also some additional software available</p>
<p><strong>Additional software</strong><br />
Team Explorer<br />
Team Explorer Everywhere for TFS<br />
<strong>.NET Framework 4.5.1</strong><br />
Agents for Visual Studio 2013<br />
IntelliTrace Collector for Visual Studio<br />
Feedback Client for TFS<br />
Remote Tools for Visual Studio 2013<br />
Visual C++ Redistributable for Visual Studio 2013<br />
Visual Studio Shell<br />
Visual Studio SDK<br />
Multibyte MFC Library for Visual Studio 2013 Preview<br />
Modeling SDK for Microsoft Visual Studio 2013 Preview<br />
Microsoft Build Tools Preview</p>
<p>You can download all the versions of Visual Studio 2013 Preview here http://www.microsoft.com/visualstudio/eng/2013-downloads</p>
<h2>Visual Studio 2012 Update 3</h2>
<p>You can download Visual Studio 2012 Update 3 here http://www.microsoft.com/en-us/download/details.aspx?id=39305</p>
]]></content:encoded>
			<wfw:commentRss>/index.php/enterprisedev/entdev/visual-studio-2013-preview-visual/feed/</wfw:commentRss>
		<slash:comments>0</slash:comments>
		</item>
		<item>
		<title>Developer, can do new tricks, require good home</title>
		<link>/index.php/sysadmins/os/hi-i-m-a-developer/</link>
		<comments>/index.php/sysadmins/os/hi-i-m-a-developer/#comments</comments>
		<pubDate>Sun, 03 Feb 2013 16:56:00 +0000</pubDate>
		<dc:creator><![CDATA[Tahir Khalid]]></dc:creator>
				<category><![CDATA[Operating Systems]]></category>
		<category><![CDATA[Windows]]></category>
		<category><![CDATA[Windows 7]]></category>
		<category><![CDATA[.net]]></category>
		<category><![CDATA[oracle]]></category>
		<category><![CDATA[oracle client]]></category>
		<category><![CDATA[programming]]></category>
		<category><![CDATA[software developer]]></category>
		<category><![CDATA[system administration]]></category>
		<category><![CDATA[visual studio]]></category>

		<guid isPermaLink="false">/index.php/2013/02/hi-i-m-a-developer/</guid>
		<description><![CDATA[The world of development is an interesting one where creativity comes alive through code to produce wonderful programs that do lots of cool stuff.
Okay that's the Wizard of Oz intro over, is it really that rosy?
It seems the world of development has c&#8230;]]></description>
				<content:encoded><![CDATA[<p><span style="font-size: 10pt; line-height: 14.25pt;"><span style="font-family: arial, helvetica, sans-serif;">The world of development is an interesting one where creativity comes alive through code to produce wonderful programs that do lots of cool stuff.</span></span></p>
<p style="line-height: 14.25pt;"><span style="font-size: 10pt;"><span style="font-family: arial, helvetica, sans-serif;">Okay that&#8217;s the Wizard of Oz intro over, is it really that rosy?</span></span></p>
<p style="line-height: 14.25pt;"><span style="font-size: 10pt;"><span style="font-family: arial, helvetica, sans-serif;">It seems the world of development has changed a great deal and gone are the days when you could just be a code cutter (though such roles do exist and are required), it seems a developer has to now master a wide array of skills and do battle with various foes like the Windows Operating System (<em>level 72 elite boss for those that are keeping track&#8230;</em>) as well trying to do their day job (<em>which in itself now consists of different minion roles</em>).</span></span></p>
<p style="line-height: 14.25pt;"><span style="font-size: 10pt;"><span style="font-family: arial, helvetica, sans-serif;">With the advances in .NET development there are a wide range of Frameworks, Tools and Add-Ons that can be worked with, installed and generally cried over (<em>a black hole in which I have been sucked into, the crying bit&#8230;</em>).</span></span></p>
<p style="line-height: 14.25pt;"><span style="font-family: arial, helvetica, sans-serif;"><img src="/wp-content/uploads/users/kermit/coders.jpg?mtime=1359936989" alt="Coders" width="282" height="202" /></span></p>
<p style="line-height: 14.25pt;"><span style="font-family: arial, helvetica, sans-serif;">Now I can hear you say, that&#8217;s all good but we don&#8217;t have those problems, we have a <strong>Textbook Development Team</strong> with a <strong>Textbook It Support Team</strong> in a <strong>Textbook Office</strong> but that is not quite the real world and you will often have boundaries between teams becoming thinner or more common now, the lack of resources and/or teams (<em>leaving the task of taking on those roles and their responsibilities up to the individuals in the department and organisation</em>).</span></p>
<p style="line-height: 14.25pt;"><span style="font-size: 10pt;"><span style="font-family: arial, helvetica, sans-serif;">But then the question has to be asked, just how efficient and proficient can you be as an individual, a team and a department if you are spending a percentage of your available resource and effort performing other duties, often to prepare something prior to performing your actual task or after the event where you still need to perform a multitude of other tasks (<em>covering various roles like administration etc.</em>).</span></span></p>
<p style="line-height: 14.25pt;"><span style="font-family: arial, helvetica, sans-serif;"><br /></span></p>
<p style="line-height: 14.25pt;"><span style="font-size: 10pt;"><span style="font-family: arial, helvetica, sans-serif;">And this is where my hell begins&#8230;</span></span></p>
<p style="line-height: 14.25pt;"><span style="font-family: arial, helvetica, sans-serif;"><span style="font-size: 10pt; line-height: 14.25pt;">Now don&#8217;t get me wrong, I enjoy the techie element of my role, I feel I fulfil the developer title more fully by being able to flex my many different skills (<em>making me adaptable for almost any occasion</em>), a result of accumulating experience in a wide range of sectors starting from my humble beginnings as an IT Support guy, moving into a System Administration role, sideways across into Application Support, Technical Project Lead, Solution Architecture and back into Software Development in my current role as an Senior .NET Enterprise Developer (</span><span style="font-size: 10pt; line-height: 14.25pt;"><em>not Star Trek&#8230;I wish it was, but it&#8217;s not and I have to live with that disappointment for the rest of my career life&#8230;I tried do the Spock hand thing, got strange looks from the others in the developer forum&#8230;</em></span><span style="font-size: 10pt; line-height: 14.25pt;">).</span></span></p>
<p style="line-height: 14.25pt;"><span style="font-size: 10pt;"><span style="font-family: arial, helvetica, sans-serif;">In the company where I work now, my team is fairly self-sufficient and that often means we do a lot of the stuff ourselves (<em>whilst still going through proper channels as required</em>) which is great as it means we can quickly prototype solutions through a Virtual Machine on our PC or install a particular tool we need to perform some task &#8211; all of this means that we generally have control over our own PC&#8217;s (<em>as all developers should&#8230;but they don&#8217;t unfortunately</em>).</span></span></p>
<p style="line-height: 14.25pt;"><span style="font-size: 10pt;"><span style="font-family: arial, helvetica, sans-serif;">But it&#8217;s a double edged sword as I found out the past few days and while being able to administer your own PC&#8217;s and Server&#8217;s is great it can quickly become a bottomless pit that you simply can&#8217;t escape no matter how many Bear Ghryll&#8217;s episodes you have watched (<em>some English guy on the TV that does cool stuff to survive, like James Bond for the wild</em>).</span></span></p>
<p style="line-height: 14.25pt;"><span style="font-size: 10pt;"><span style="font-family: arial, helvetica, sans-serif;"><br /></span></span></p>
<p style="line-height: 14.25pt;"><span style="font-size: 10pt;"><span style="font-family: arial, helvetica, sans-serif;">So begins my particular episode&#8230;</span></span></p>
<p style="line-height: 14.25pt;"><span style="font-size: 10pt;"><span style="font-family: arial, helvetica, sans-serif;">I have a pretty snazzy developer PC inherited from my predecessor, a rather cool Hewlet Packard Z600 Workstation specced up to the hilt with serious &#8216;Uber&#8217; hardware (<em>dual quad Xeon&#8217;s, stupid amount of memory, SSD&#8217;s, drool&#8230;</em>) and thankfully I have complete control over it (<em>mostly</em>) so I had the chance to configure my PC the way I wanted it to do the development I needed to do.</span></span></p>
<p style="line-height: 14.25pt;"><span style="font-size: 10pt;"><span style="font-family: arial, helvetica, sans-serif;">I have the usual culprits on there, Visual Studio 2010 Premium SP1, MSSQL Server 2008 R2, VMware, lots of useful tools (<em>Notepad++, Red Gate, Solitaire</em>) all running on a Windows 7 Professional 64 bit&#8230;nothing out of the ordinary there I hear you say, ah I haven’t told you about that little evil gremlin called Oracle, more specifically Oracle 64 bit and 32 bit clients on a 64 bit operating system (<em>yes, that combination should cause you to feel nauseous</em>).</span></span></p>
<p style="line-height: 14.25pt;"><span style="font-size: 10pt;"><span style="font-family: arial, helvetica, sans-serif;">The goal was simple, get the latest version of a large .NET Enterprise project, build it, tweak it, break it and glue it back together.  However there was one caveat, I needed to then install the following in some order (<em>mostly like this one</em>):</span></span></p>
<ul>
<li><span style="font-family: arial, helvetica, sans-serif;"><span style="font-size: 10pt;"><span style="font-size: 7pt; line-height: normal;"> </span></span><span style="font-size: 10pt;">Install the Oracle 64 bit Client for Windows</span></span></li>
<li><span style="font-family: arial, helvetica, sans-serif;"><span style="font-size: 10pt;"><span style="font-size: 7pt; line-height: normal;"> </span></span><span style="font-size: 10pt;">Install the 64 bit ODAC stuff (<em>for some nice ODACness</em>), the Xcopy version btw</span></span></li>
<li><span style="font-family: arial, helvetica, sans-serif;"><span style="font-size: 10pt;"><span style="font-size: 7pt; line-height: normal;"> </span></span><span style="font-size: 10pt;">Install the 32 bit Client (ODT with ODAC)</span></span></li>
</ul>
<p style="line-height: 14.25pt;"><span style="font-size: 10pt;"><span style="font-family: arial, helvetica, sans-serif;">Simple enough I thought, having virtual zero Oracle skills I was up for the challenge and felt confident I had the knowhow and experience (<em>plus large balls</em>) to deal with any issues that might crop up and like a true techie I refused to read the manual (<em>text file in the case of Oracle products</em>)…I was in for a bumpy ride it seems.</span></span></p>
<p style="line-height: 14.25pt;"><span style="font-size: 10pt;"><span style="font-family: arial, helvetica, sans-serif;">* It should be noted here, if you do happen to install the 32 bit client first and/or the Oracle Developer Tools and ODAC (32 bit), you will have seriously random Installation problems trying to install Oracle 64 bit Client (<em>the solution is to follow the instructions further down in this post to remove and clean up your PC</em>).</span></span></p>
<p style="line-height: 14.25pt;"><span style="font-size: 10pt;"><span style="font-family: arial, helvetica, sans-serif;">I went ahead and installed the 64 bit Client, in this case I used the client installation that came provided with the Oracle 11g database installation CD (<em>supplied by the tech support guys</em>), selected <strong>Administrator</strong> as the installation type, pointed the installer to where I wanted the files to go, set the Oracle Home directory and went ahead with the installation (<em>no problems here</em>).</span></span></p>
<p><span style="font-family: arial, helvetica, sans-serif;"><img src="/wp-content/uploads/users/kermit/oracle-installer.jpg?mtime=1359936990" alt="Oracle Installer" width="399" height="274" /></span></p>
<p style="line-height: 14.25pt;"><span style="font-family: arial, helvetica, sans-serif;">All good so far, put my <strong>TNSNAMES.ORA</strong> file into the  <strong>{Oracle_Home}Product11.2.0Client_X64NetworkAdmin</strong> folder, fired up a Command console and used Sqlplus to connect to an Oracle 11g database server that was supplied by the tech support team, worked like a charm.</span></p>
<p style="line-height: 14.25pt;"><span style="font-size: 10pt;"><span style="font-family: arial, helvetica, sans-serif;">After doing this I installed the Xcopy version of the 64 bit ODAC libraries and tools which can only be installed by the command prompt so you need to run a command similar to this in the installation directory:</span></span></p>
<p style="margin-left: 36.0pt; line-height: 14.25pt;"><span style="font-size: 10pt;"><span style="background-color: #000000;"><span style="color: #ffffff;"><span style="font-family: 'courier new', courier;">install.bat all c:oracle OracleHome_Client1 </span></span></span></span></p>
<p style="line-height: 14.25pt;"><span style="font-size: 10pt;"><span style="font-family: arial, helvetica, sans-serif;">Or something similar to the above command which should go ahead and install the required ODAC bits into the proper place (<em>you need to ensure you specify the Oracle Home directory</em>).  Again this went fairly smoothly as well with no hick-ups so up next was the 32 bit client and here you need to make sure you install the Oracle Developer Tools with ODAC which includes the 32 bit client otherwise you will experience much pain as I did (<em>where I installed the 32 bit client, then ODAC and other bits which caused no end of pain due to path problems, mismatched versions of dll’s etc</em>).</span></span></p>
<p style="line-height: 14.25pt;"><span style="font-size: 10pt;"><span style="font-family: arial, helvetica, sans-serif;">The above allows you to correctly use PL/SQL Developer (<em>if you have this cool application installed</em>) as long as you remember to go into the <strong>Tools &gt; Preferences &gt; Connection</strong> section and set the OCI Library to the correct location (<em>e.g. {oracle_home}product11.2.0client_1oci.dll or client_1binoci.dll depending on your version</em>) and any other application that requires the 32 bit Oracle Client.</span></span></p>
<p style="line-height: 14.25pt;"><span style="font-size: 10pt;"><span style="font-family: arial, helvetica, sans-serif;">Now the above hard work should be adequate to get a working Developer Workstation with both 64 bit and 32 bit Oracle Clients and Developer Tools however there is always a but…what I didn’t tell you was the amount of pain I went through to get the above installation list right, and believe me it was extremely painful and as I have found out after posting this blog page, there a few other client combinations that can work e.g. having a primary 32 bit Oracle Client installation with the developer tools and a 64 bit Instant Client installation (<em>will save this for a future post</em>).</span></span></p>
<p style="line-height: 14.25pt;"><span style="font-size: 10pt;"><span style="font-family: arial, helvetica, sans-serif;">I spent an awfully long time getting my workstation working and when things did go wrong (<em>which they did a lot, just Google the various issues people have had trying to install and use Oracle clients with their Visual Studio developer machines</em>) I barely got any work done which prompted my colleague to say:</span></span></p>
<p style="margin-left: 36.0pt; line-height: 14.25pt;"><span style="font-size: 10pt;"><span style="background-color: #ffff99;"><span style="font-size: small;"><span style="font-family: arial, helvetica, sans-serif;"><strong>“We have to do so much administration work, just to get to a solution developed and delivered”</strong></span></span></span></span></p>
<p style="line-height: 14.25pt;"><span style="font-size: 10pt;"><span style="font-family: arial, helvetica, sans-serif;">Which got me thinking, this is very true and probably becoming the norm now with modern development, more so in my case due to the nature of the team I am in i.e. we develop lots of bespoke solutions, integration various systems together, sometimes involving small pieces of development to large scale projects.</span></span></p>
<p style="line-height: 14.25pt;"><span style="font-size: 10pt;"><span style="font-family: arial, helvetica, sans-serif;">What I haven’t shared is the nightmare scenario I ended up in with a totally messed up pair of gac’s (<em>32 bit and 64 bit</em>) and problems compiling any of our projects because they all used one combination or another of the Oracle client (<em>mostly 64 bit now</em>).  So if anyone has had this problem here is the proper way to deal with it…</span></span></p>
<p style="line-height: 14.25pt; tab-stops: 522.0pt;"><span style="font-size: 10pt;"><span style="font-family: arial, helvetica, sans-serif;">Open Command Prompt and change to the directory containing your Oracle client installation and run the deinstall.bat batch script:</span></span></p>
<p style="margin-left: 36.0pt; line-height: 14.25pt;"><span style="font-size: 10pt;"><span style="background-color: #000000;"><span style="color: #ffffff;"><span style="font-family: 'courier new', courier;">{oracle_home}product11.2.0Client_X64Deinstalldeinstall.bat</span></span></span></span></p>
<p style="line-height: 14.25pt; tab-stops: 522.0pt;"><span style="font-size: 10pt;"><span style="font-family: arial, helvetica, sans-serif;">Once the de-installation (<em>uninstall to you and me…Oracle people…</em>) is complete you need to run the Oracle Universal Installer (<em>semi-cool Java tool…Java is not cool, the app is however</em>).  When this app fires up you have the option to Deinstall any installations on your system:</span></span></p>
<p><span style="font-family: arial, helvetica, sans-serif;"><img src="/wp-content/uploads/users/kermit/oracle-installer-deinstall.jpg?mtime=1359936990" alt="Oracle Deinstall" width="372" height="270" /></span></p>
<p style="line-height: 14.25pt;"><span style="font-family: arial, helvetica, sans-serif;">Select all the products and then click on Remove to uninstall (<em>deinstall</em>) the products:</span></p>
<p><span style="font-family: arial, helvetica, sans-serif;"><img src="/wp-content/uploads/users/kermit/oracle-installer-deinstall-inventory.jpg?mtime=1359936991" alt="Inventory" width="150" height="245" /></span></p>
<p style="line-height: 14.25pt;"><span style="font-family: arial, helvetica, sans-serif;">If you have no issues with the uninstallation of the Oracle Client stuff you will need to go into the Windows Registry to make sure you remove any references to an Oracle installation otherwise your future Oracle Client installation exercises will result in broken installations and more headaches.</span></p>
<p style="line-height: 14.25pt; tab-stops: 522.0pt;"><span style="font-size: 10pt;"><span style="font-family: arial, helvetica, sans-serif;">Edit the registry (click START &gt; type regedit32) and start with the following registry location:</span></span></p>
<p style="margin-left: 36.0pt; line-height: 14.25pt; tab-stops: 522.0pt;"><span style="font-size: 10pt;"><span style="font-family: arial, helvetica, sans-serif;">HKEY_LOCAL_MACHINESOFTWARE</span></span></p>
<p style="line-height: 14.25pt; tab-stops: 522.0pt;"><span style="font-size: 10pt;"><span style="font-family: arial, helvetica, sans-serif;">Find the Oracle Key and delete it, do the same for the HKEY_CURRENT_USER and HKEY_USERS (<em>you will need to go through the various sub parent keys and find any Oracle sub Keys and delete them</em>). </span></span></p>
<p style="line-height: 14.25pt;"><span style="font-family: arial, helvetica, sans-serif;">Don&#8217;t forget to clear the gac&#8217;s (both 32 bit and 64 bit), I found this the simplest way of doing it:</span></p>
<ul>
<li><span style="font-family: arial, helvetica, sans-serif;">Start Command Prompt for Visual Studio 32 bit</span></li>
<li><span style="font-family: arial, helvetica, sans-serif;">Type gacutil /l &gt; c:gac32list.txt</span></li>
<li><span style="font-family: arial, helvetica, sans-serif;">Open the gac32list.txt file and find the word Oracle</span></li>
<li><span style="font-family: arial, helvetica, sans-serif;">In the Command Prompt window type the following commands: </span>
<ul>
<li><span style="font-family: arial, helvetica, sans-serif;">gacutil /u Oracle.DataAccess</span></li>
<li><span style="font-family: arial, helvetica, sans-serif;">gacutil /u Oracle.Database.Extensions</span></li>
<li><span style="font-family: arial, helvetica, sans-serif;">gacutil /u Oracle.Web</span></li>
</ul>
</li>
<li><span style="font-family: arial, helvetica, sans-serif;">Close the Command Prompt window</span></li>
<li><span style="font-family: arial, helvetica, sans-serif;">Start Command Prompt for Visual Studio 64 bit</span></li>
<li><span style="font-family: arial, helvetica, sans-serif;">Repeat the above commands</span></li>
<li><span style="font-family: arial, helvetica, sans-serif;">Close the Command Prompt window</span></li>
</ul>
<p style="line-height: 14.25pt; tab-stops: 522.0pt;"><span style="font-size: 10pt;"><span style="font-family: arial, helvetica, sans-serif;">This should give you a clean installation and hopefully allow you to get a working installation of the Oracle clients on your .NET Developer Workstation.</span></span></p>
<p style="line-height: 14.25pt;"><span style="font-family: arial, helvetica, sans-serif;"><br /></span></p>
<p style="line-height: 14.25pt; tab-stops: 522.0pt;"><span style="font-size: 10pt;"><span style="font-family: arial, helvetica, sans-serif;">So back to the question at hand, just what kind of developer does a developer need to be?  Someone who is comfortable at administering their local, virtual and remote computers?  And just how much effort should be made before you require assistance (<em>and will that not take more effort</em>) but what if you work in an environment where the resources are not available and you have to <strong>“man up”</strong> (<em>so to speak</em>) and take the reins, do you factor that into any and every piece of work and project you do?</span></span></p>
<p style="line-height: 14.25pt; tab-stops: 522.0pt;"><span style="font-size: 10pt;"><span style="font-family: arial, helvetica, sans-serif;">Well in an ideal world you would minimize the effort required for each subsequent piece of work and/or project however you cannot avoid the moments when you will simply have to dig into the trenches and get your hands dirty so be prepared to lose half your estimated time (<em>if not more</em>) battling system incompatibilities, software bugs, assembly hell and those gremlins that keep causing you to see spots on your screen (<em>honest</em>).</span></span></p>
<p style="line-height: 14.25pt; tab-stops: 522.0pt;"><span style="font-size: 10pt;"><span style="font-family: arial, helvetica, sans-serif;">Set aside time to climb a difficult mountain and get your hands cut, you will need to work out the many holes in your nice setup and as more and more technical requirements popup don’t expect everything to work well together the first time (<em>you have to integrate your own development environment first</em>). </span></span></p>
<p style="line-height: 14.25pt; tab-stops: 522.0pt;"><span style="font-size: 10pt;"><span style="font-family: arial, helvetica, sans-serif;">So key here is to develop the expertise if you don’t have it at hand, become adaptable but remain honest to yourself (<em>you will have to go through some pain to get to the fruits of your labour</em>).  Use knowledge base tools (<em>Wiki</em>) to record your efforts, communicate your findings with your colleagues and attempt to automate and make reusable as much of what you use as possible.</span></span></p>
<p style="line-height: 14.25pt; tab-stops: 522.0pt;"><span style="font-size: 10pt;"><span style="font-family: arial, helvetica, sans-serif;">This will help you better deal with those moments when you have to spend most of your effort on the administration of your development work as appose to the actual developing and as a bonus increase your skills repertoire which every modern developer shouldn’t shy away from (<em>becoming more agile in nature by having a can-do attitude</em>).</span></span></p>
<p style="line-height: 14.25pt;"><span style="font-family: arial, helvetica, sans-serif;"><img src="/wp-content/uploads/users/kermit/mememe.jpg?mtime=1359936991" alt="mememe" width="98" height="156" /></span></p>
<p style="line-height: 14.25pt; tab-stops: 522.0pt;"><span style="line-height: 14.25pt;"><span style="font-family: arial, helvetica, sans-serif;">I dedicate my first LTD blog post to Chrissie1.</span></span></p>
<p style="line-height: 14.25pt;"><span style="font-family: arial, helvetica, sans-serif;"><br /></span></p>
<p style="line-height: 14.25pt; tab-stops: 522.0pt;"><span style="line-height: 14.25pt;"><strong><span style="font-family: arial, helvetica, sans-serif;">References:</span></strong></span></p>
<p style="line-height: 14.25pt; tab-stops: 522.0pt;"><a href="http://www.oracle.com/technetwork/database/enterprise-edition/downloads/index.html"><span style="font-family: arial, helvetica, sans-serif;">Oracle 11g Database Download (includes the clients)</span></a></p>
<p style="line-height: 14.25pt; tab-stops: 522.0pt;"><a href="http://www.oracle.com/technetwork/database/windows/downloads/index-090165.html"><span style="font-family: arial, helvetica, sans-serif;">ODAC Xcopy 64 bit Download</span></a></p>
<p style="line-height: 14.25pt; tab-stops: 522.0pt;"><a href="http://www.oracle.com/technetwork/topics/dotnet/utilsoft-086879.html"><span style="font-family: arial, helvetica, sans-serif;">Oracle Developer Tools with ODAC 32 bit</span></a></p>
]]></content:encoded>
			<wfw:commentRss>/index.php/sysadmins/os/hi-i-m-a-developer/feed/</wfw:commentRss>
		<slash:comments>2</slash:comments>
		</item>
		<item>
		<title>Displaying .Net Build Warnings in TeamCity</title>
		<link>/index.php/enterprisedev/application-lifecycle-management/displaying-net-build-warnings-in/</link>
		<comments>/index.php/enterprisedev/application-lifecycle-management/displaying-net-build-warnings-in/#comments</comments>
		<pubDate>Tue, 15 Jan 2013 13:41:00 +0000</pubDate>
		<dc:creator><![CDATA[Eli Weinstock-Herman (tarwn)]]></dc:creator>
				<category><![CDATA[Application Lifecycle Management]]></category>
		<category><![CDATA[.net]]></category>
		<category><![CDATA[continuous integration]]></category>
		<category><![CDATA[teamcity]]></category>

		<guid isPermaLink="false">/index.php/2013/01/displaying-net-build-warnings-in/</guid>
		<description><![CDATA[I like it when I kick off a build and there aren't any warnings. Unfortunately I'm forgetful and it's always easier to edit the code now then it is 3 months later (when I remember to look at the warnings).

This post will cover capturing MSBuild warnings in TeamCity and displayign the results in the dashboard, a custom chart, the build log, a raw text artifact, and a custom report tab in the run results.]]></description>
				<content:encoded><![CDATA[<p>I like it when I kick off a build and there aren&#8217;t any warnings. Unfortunately I&#8217;m forgetful and it&#8217;s always easier to edit the code now then it is 3 months later (when I remember to look at the warnings). When I put together <a href="http://wiki.lessthandot.com/index.php/Eli%27s_Continuous_Delivery_Project" title="Wiki writeup on my Continuous Delivery project">my sample Continuous Delivery project</a>, I was using Jenkins, which provided plugins for capturing warnings. It was nice to have visual feedback when I added a new warning, see how many were outstanding, have a list of outstanding warnings available on demand, and when I had a few minutes and fixed some of them, positive feedback by watching the warning chart slowly go down.</p>
<div style="background-color: #CCFFCC; border: 2px solid #BBEEBB; border-width: 2px 2px 2px 14px; margin: .5em; padding: .5em">
<strong>June 2016 Update:</strong> Good news! Mitch Terlisner took this original idea and improved on it, then shared those updates. You can see the updated version (using TeamCity 9) and instructions here: <a href="/index.php/enterprisedev/application-lifecycle-management/improved-teamcity-net-build-warnings/" title="Improved TeamCity .Net Build Warnings">Improved TeamCity .Net Build Warnings</a>
</div>
<p>When I switch modes and work in <a href="http://www.jetbrains.com/teamcity/" title="TeamCity by JetBrains">TeamCity</a>, I miss having that information available, with no extra steps from me. Despite several searches, though, I was never able to find a plugin that duplicated that behavior I liked in the Jenkins plugin. Turns out that TeamCity makes it pretty easy to roll your own, with just a little bit of powershell and some built-in features.</p>
<p>In this post I am going to cover capturing the warnings from an MSBuild build step, adding that warning count to the main dashboard, adding a statistics chart for the warning count over time, adding a condensed list to the end of the build log, adding the formatted list as a build artifact, and adding a custom report tab to report the warnings for each build. </p>
<p>Because who doesn&#8217;t need five different ways to see their warnings?</p>
<h2>Capturing the Build Warnings</h2>
<p>Since I am using MSBuild, the build warnings have a consistent pattern and MSBuild itself has an option to log out to a logger. We can add this attribute in either the build step or the Build Parameters. My preference is using the parameters of the build step in case I have multiple MSBuild calls in the build.</p>
<p>Parameter to add to MSBuild: <code class="codespan">/l:FileLogger,Microsoft.Build.Engine;logfile=%BuildLogFilename%</code></p>
<div style="text-align: center; font-size: 90%; color: #666666; margin: .5em">
<img src="http://tiernok.com/LTDBlog/TeamCityBuildWarnings/MSBuildParameter.png" alt="Adding the MS Build Parameter" style="border: 1px solid #666666;" /><br />
Adding the MS Build Parameter
</div>
<p>Each time MSBuild runs, it will log it&#8217;s output to the specified file. We can use powershell to extract the warnings from the output, like so:</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="text"><thead><tr><td colspan="2"  class="head">Text</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
</pre></td><td class="de1"><pre class="de1">Param(
&nbsp; &nbsp; [parameter(Mandatory=$true)]
&nbsp; &nbsp; [alias(&quot;f&quot;)]
&nbsp; &nbsp; $FilePath
)
&nbsp;
$warnings = @(Get-Content -ErrorAction Stop $FilePath | &nbsp; &nbsp; &nbsp; # Get the file content
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Where {$_ -match '^.*warning CS.*$'} | &nbsp; &nbsp; &nbsp; &nbsp;# Extract lines that match warnings
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; %{ $_.trim() -replace &quot;^s*d+&gt;&quot;,&quot;&quot; &nbsp;} | &nbsp; &nbsp; &nbsp;# Strip out any project number and caret prefixes
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; sort-object | Get-Unique -asString) &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; # remove duplicates by sorting and filtering for unique strings</pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">Param(
    [parameter(Mandatory=$true)]
    [alias("f")]
    $FilePath
)

$warnings = @(Get-Content -ErrorAction Stop $FilePath |       # Get the file content
                Where {$_ -match '^.*warning CS.*$'} |        # Extract lines that match warnings
                %{ $_.trim() -replace "^s*d+&gt;",""  } |      # Strip out any project number and caret prefixes
                sort-object | Get-Unique -asString)           # remove duplicates by sorting and filtering for unique strings</pre></div></div>

<p>Once we have the warnings extracted, we can move on to decide how we want them delivered. </p>
<p><i>Each section below will continue to add on to this script until it contains all the pieces we need to meet the display goals at the beginning.</i></p>
<h2>Condensed Warning List in Build Log</h2>
<p>The powershell script that is extracting warnings will need to run as a build step in the appropriate build configuration. This means that displaying a formatted list of warnings at the end of the build log is as simple as outputting that list from the powershell script we are building.</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="text"><thead><tr><td colspan="2"  class="head">Text</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
</pre></td><td class="de1"><pre class="de1">$count = $warnings.Count
Write-Host &quot;MSBuild Warnings - $count warnings ===================================================&quot;
$warnings | % { Write-Host &quot; * $_&quot; }</pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">$count = $warnings.Count
Write-Host "MSBuild Warnings - $count warnings ==================================================="
$warnings | % { Write-Host " * $_" }</pre></div></div>

<p>This will output a section at the bottom of the build log that contains our warnings, like so:</p>
<div style="text-align: center; font-size: 90%; color: #666666; margin: .5em">
<img src="http://tiernok.com/LTDBlog/TeamCityBuildWarnings/LogOutput.png" alt="Warnings in the Bottom of a Build Log" style="border: 1px solid #666666;" /><br />
Warnings in the Bottom of a Build Log
</div>
<p>Which I suppose is fine, but doesn&#8217;t really add that much value over the ones listed further up the log by MSBuild itself.</p>
<h2>Condensed Warning List in Archived Text File</h2>
<p>Now that I have formatted warnings, it&#8217;s pretty easy to create a file with those warnings and archive it. First I&#8217;ll update the script to take an output parameter and add some file output:</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="text"><thead><tr><td colspan="2"  class="head">Text</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
</pre></td><td class="de1"><pre class="de1">Param(
&nbsp; &nbsp; [parameter(Mandatory=$true)]
&nbsp; &nbsp; [alias(&quot;f&quot;)]
&nbsp; &nbsp; $FilePath,
&nbsp; &nbsp; [parameter()]
&nbsp; &nbsp; [alias(&quot;o&quot;)]
&nbsp; &nbsp; $RawOutputPath,
)
&nbsp;
# ...
&nbsp;
# file output
if($RawOutputPath){
&nbsp; &nbsp; $stream = [System.IO.StreamWriter] $RawOutputPath
&nbsp; &nbsp; $stream.WriteLine(&quot;Build Warnings&quot;)
&nbsp; &nbsp; $stream.WriteLine(&quot;====================================&quot;)
&nbsp; &nbsp; $stream.WriteLine(&quot;&quot;)
&nbsp; &nbsp; $warnings | % { $stream.WriteLine(&quot; * $_&quot;) }
&nbsp; &nbsp; $stream.Close()
}</pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">Param(
    [parameter(Mandatory=$true)]
    [alias("f")]
    $FilePath,
    [parameter()]
    [alias("o")]
    $RawOutputPath,
)

# ...

# file output
if($RawOutputPath){
    $stream = [System.IO.StreamWriter] $RawOutputPath
    $stream.WriteLine("Build Warnings")
    $stream.WriteLine("====================================")
    $stream.WriteLine("")
    $warnings | % { $stream.WriteLine(" * $_") }
    $stream.Close()
}</pre></div></div>

<p>Then I&#8217;ll configure the project to capture that output file as an artifact:</p>
<div style="text-align: center; font-size: 90%; color: #666666; margin: .5em">
<img src="http://tiernok.com/LTDBlog/TeamCityBuildWarnings/ArtifactConfig_RawOutput.png" alt="Artifact Configuration" style="border: 1px solid #666666;" /><br />
Artifact Configuration
</div>
<p>Et voila, the file shows up in my archived items:</p>
<div style="text-align: center; font-size: 90%; color: #666666; margin: .5em">
<img src="http://tiernok.com/LTDBlog/TeamCityBuildWarnings/Artifact_Display.png" alt="List of archived items from a run" style="border: 1px solid #666666;" /><br />
List of archived items from a run
</div>
<p>And I have a clean, archived list of my warnings:</p>
<div style="text-align: center; font-size: 90%; color: #666666; margin: .5em">
<img src="http://tiernok.com/LTDBlog/TeamCityBuildWarnings/Artifact_File.png" alt="Display of archived text file" style="border: 1px solid #666666;" /><br />
Display of archived text file
</div>
<p>But, really, we can do better.</p>
<h2>Warning count in build status</h2>
<p>Part of the goal was to be able to see the warning count change with no extra work, the best place I can think of to meet this is the final build status on each build.</p>
<p>Before:</p>
<div style="text-align: center; font-size: 90%; color: #666666; margin: .5em">
<img src="http://tiernok.com/LTDBlog/TeamCityBuildWarnings/BuildStatusBefore.png" alt="Build status on dashboard" style="border: 1px solid #666666;" /><br />
Build status on dashboard
</div>
<p>TeamCity provides support for <a href="http://confluence.jetbrains.net/display/TCD7/Build+Script+Interaction+with+TeamCity#BuildScriptInteractionwithTeamCity-ReportingBuildStatus" title="TeamCity documentation for Build Script Interaction">setting the build status from a build script</a>. By adding some output to the powershell script, like so:</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="text"><thead><tr><td colspan="2"  class="head">Text</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
</pre></td><td class="de1"><pre class="de1">#TeamCity output
Write-Host &quot;##teamcity[buildStatus text='{build.status.text}, Build warnings: $count']&quot;</pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">#TeamCity output
Write-Host "##teamcity[buildStatus text='{build.status.text}, Build warnings: $count']"</pre></div></div>

<p>Each successful build will also display the number of warnings that were captured.</p>
<div style="text-align: center; font-size: 90%; color: #666666; margin: .5em">
<img src="http://tiernok.com/LTDBlog/TeamCityBuildWarnings/BuildStatusAfter.png" alt="Build status on dashboard, with warnings" style="border: 1px solid #666666;" /><br />
Build status on dashboard, with warnings
</div>
<p>Better, but what about historical values? And I still don&#8217;t like that text file artifact.</p>
<h2>Warning Count as a Custom Chart</h2>
<p>TeamCity also provides the ability to add custom charts based on either built-in or <a href="http://confluence.jetbrains.net/display/TCD7/Build+Script+Interaction+with+TeamCity#BuildScriptInteractionwithTeamCity-ReportingBuildStatistics" title="TeamCity documentation - reporting custom statistics">custom statistics</a>. Custom statistics are reported similar to the build status output above:</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="text"><thead><tr><td colspan="2"  class="head">Text</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
</pre></td><td class="de1"><pre class="de1">Write-Host &quot;##teamcity[buildStatisticValue key='buildWarnings' value='$count']&quot;</pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">Write-Host "##teamcity[buildStatisticValue key='buildWarnings' value='$count']"</pre></div></div>

<p>Adding a <a href="http://confluence.jetbrains.net/display/TCD7/Custom+Chart" title="TeamCity documentation - Custom Statistics Charts">custom chart</a> requires us to dig into the configurations of TeamCity. I&#8217;m going to add a chart that will be displayed for any build that provides the warning count number above, so I&#8217;ll open the <code class="codespan">[teamCity data dir]/config/main-config.xml</code> file and add the following section:</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="text"><thead><tr><td colspan="2"  class="head">Text</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
</pre></td><td class="de1"><pre class="de1">&lt;graph title=&quot;Build Warnings&quot; hideFilters=&quot;showFailed&quot; seriesTitle=&quot;Warning&quot; format=&quot;&quot;&gt;
&nbsp; &nbsp; &lt;valueType key=&quot;buildWarnings&quot; title=&quot;Warnings&quot;/&gt;
&lt;/graph&gt;</pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">&lt;graph title="Build Warnings" hideFilters="showFailed" seriesTitle="Warning" format=""&gt;
    &lt;valueType key="buildWarnings" title="Warnings"/&gt;
&lt;/graph&gt;</pre></div></div>

<p>This will add a chart to the Statistics tab of the build. After a few builds this is what I have:</p>
<div style="text-align: center; font-size: 90%; color: #666666; margin: .5em">
<img src="http://tiernok.com/LTDBlog/TeamCityBuildWarnings/WarningChart.png" alt="Build Warning Statistics" style="border: 1px solid #666666;" /><br />
Build Warning Statistics
</div>
<p>It probably would look better if I hadn&#8217;t built with the same number of warnings each time, but you get the point. The mouse hover works just like the built-in charts, linking to the run status for the individual point.</p>
<p>Ok, getting better, but I think we can take it one step further. </p>
<h2>Adding a Custom Build Warnings Tab</h2>
<p>So far we have improved methods of seeing the warning count and watching how it changes over time, but the actual list still leaves something to be desired. Luckily, TeamCity supports <a href="http://confluence.jetbrains.net/display/TCD3/Including+Third-Party+Reports+in+the+Build+Results#IncludingThird-PartyReportsintheBuildResults-Tabs" title="TeamCity documentation: Including third-party reports as the build-results tabs">custom report tabs</a> in the Build Results. This gives us an easily accessible place to put the warnings and, since it uses HTML, better formatting options than the text file.</p>
<p>First I need to update the powershell script to output the HTML file. TeamCity will be picking up an entire folder for the report tab, so I could add some external CSS or image files for my report, but I&#8217;ll leave that for another day.</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="text"><thead><tr><td colspan="2"  class="head">Text</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
</pre></td><td class="de1"><pre class="de1"># html report output
$check = Test-Path -PathType Container BuildWarningReport
if($check -eq $false){
&nbsp; &nbsp; New-Item 'BuildWarningReport' -type Directory
}
$stream = [System.IO.StreamWriter] &quot;BuildWarningReport/index.html&quot;
$stream.WriteLine(&quot;&lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body&gt;&lt;h1&gt;$count Build Warnings&lt;/h1&gt;&quot;)
$stream.WriteLine(&quot;&lt;ul&gt;&quot;)
$warnings | % { $stream.WriteLine(&quot;&lt;li&gt;$_&lt;/li&gt;&quot;) }
$stream.WriteLine(&quot;&lt;/ul&gt;&quot;)
$stream.WriteLine(&quot;&lt;/body&gt;&lt;/html&gt;&quot;)
$stream.Close()</pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse"># html report output
$check = Test-Path -PathType Container BuildWarningReport
if($check -eq $false){
    New-Item 'BuildWarningReport' -type Directory
}
$stream = [System.IO.StreamWriter] "BuildWarningReport/index.html"
$stream.WriteLine("&lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body&gt;&lt;h1&gt;$count Build Warnings&lt;/h1&gt;")
$stream.WriteLine("&lt;ul&gt;")
$warnings | % { $stream.WriteLine("&lt;li&gt;$_&lt;/li&gt;") }
$stream.WriteLine("&lt;/ul&gt;")
$stream.WriteLine("&lt;/body&gt;&lt;/html&gt;")
$stream.Close()</pre></div></div>

<p>I&#8217;ve added HTML output to the script with a hardcoded output location that ensures the report directory exists before writing the index.html page. I&#8217;ve hardcoded this value to reduce the amount of thinking &#8216;ll need to do as I add this to other projects (keeps it consistent from output name to artifact setting to report tab configuration).</p>
<p>The next step is to configure the project to capture the folder as an artifact:</p>
<div style="text-align: center; font-size: 90%; color: #666666; margin: .5em">
<img src="http://tiernok.com/LTDBlog/TeamCityBuildWarnings/ArtifactConfig_Report.png" alt="Artifact configuration" style="border: 1px solid #666666;" /><br />
Artifact configuration
</div>
<p>Then the last step is to modify the TeamCity configuration to recognize that when I output archives like that, I want to treat them as a report. To do this I add the following chunk of XML to my <code class="codespan">[TeamCity data directory]/config/main-config.xml</code> file (per the documentation link above):</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="text"><thead><tr><td colspan="2"  class="head">Text</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
</pre></td><td class="de1"><pre class="de1">&nbsp; &lt;report-tab title=&quot;Build Warnings&quot; basePath=&quot;BuildWarningReport&quot; startPage=&quot;index.html&quot; /&gt;</pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">  &lt;report-tab title="Build Warnings" basePath="BuildWarningReport" startPage="index.html" /&gt;</pre></div></div>

<p>And there we go, the custom report tab is available in the build results:</p>
<div style="text-align: center; font-size: 90%; color: #666666; margin: .5em">
<img src="http://tiernok.com/LTDBlog/TeamCityBuildWarnings/WarningsTab.png" alt="Build Warnings tab in Run Results" style="border: 1px solid #666666;" /><br />
Build Warnings tab in Run Results
</div>
<p>Which takes us from no visibility into our warnings, to five different methods of viewing the information.</p>
<h2>Wrap-up</h2>
<p>From having to Ctrl+F through the build log all the way to plugin-level output in a few easy steps. After setting this up one time, the only pieces that needed to be repeated for additional builds are the addition of the /logger parameter for MSBuild and the powershell build step to extract the results, and capturing the artifact for the HTML page. All of the output is either built in to the script or applies to the whole server and is displayed whenever the statistics or archive are present in a build.</p>
<p>Here is the finished script:</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="text"><thead><tr><td colspan="2"  class="head">Text</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
</pre></td><td class="de1"><pre class="de1">Param(
&nbsp; &nbsp; [parameter(Mandatory=$true)]
&nbsp; &nbsp; [alias(&quot;f&quot;)]
&nbsp; &nbsp; $FilePath,
&nbsp; &nbsp; [parameter()]
&nbsp; &nbsp; [alias(&quot;o&quot;)]
&nbsp; &nbsp; $RawOutputPath
)
&nbsp;
$warnings = @(Get-Content -ErrorAction Stop $FilePath | &nbsp; &nbsp; &nbsp; # Get the file content
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Where {$_ -match '^.*warning CS.*$'} | &nbsp; &nbsp; &nbsp; &nbsp;# Extract lines that match warnings
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; %{ $_.trim() -replace &quot;^s*d+&gt;&quot;,&quot;&quot; &nbsp;} | &nbsp; &nbsp; &nbsp;# Strip out any project number and caret prefixes
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; sort-object | Get-Unique -asString) &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; # remove duplicates by sorting and filtering for unique strings
&nbsp;
$count = $warnings.Count
&nbsp;
# raw output
Write-Host &quot;MSBuild Warnings - $count warnings ===================================================&quot;
$warnings | % { Write-Host &quot; * $_&quot; }
&nbsp;
#TeamCity output
Write-Host &quot;##teamcity[buildStatus text='{build.status.text}, Build warnings: $count']&quot;
Write-Host &quot;##teamcity[buildStatisticValue key='buildWarnings' value='$count']&quot;
&nbsp;
# file output
if($RawOutputPath){
&nbsp; &nbsp; $stream = [System.IO.StreamWriter] $RawOutputPath
&nbsp; &nbsp; $stream.WriteLine(&quot;Build Warnings&quot;)
&nbsp; &nbsp; $stream.WriteLine(&quot;====================================&quot;)
&nbsp; &nbsp; $stream.WriteLine(&quot;&quot;)
&nbsp; &nbsp; $warnings | % { $stream.WriteLine(&quot; * $_&quot;) }
&nbsp; &nbsp; $stream.Close()
}
&nbsp;
# html report output
$check = Test-Path -PathType Container BuildWarningReport
if($check -eq $false){
&nbsp; &nbsp; New-Item 'BuildWarningReport' -type Directory
}
$stream = [System.IO.StreamWriter] &quot;BuildWarningReport/index.html&quot;
$stream.WriteLine(&quot;&lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body&gt;&lt;h1&gt;$count Build Warnings&lt;/h1&gt;&quot;)
$stream.WriteLine(&quot;&lt;ul&gt;&quot;)
$warnings | % { $stream.WriteLine(&quot;&lt;li&gt;$_&lt;/li&gt;&quot;) }
$stream.WriteLine(&quot;&lt;/ul&gt;&quot;)
$stream.WriteLine(&quot;&lt;/body&gt;&lt;/html&gt;&quot;)
$stream.Close()</pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">Param(
    [parameter(Mandatory=$true)]
    [alias("f")]
    $FilePath,
    [parameter()]
    [alias("o")]
    $RawOutputPath
)

$warnings = @(Get-Content -ErrorAction Stop $FilePath |       # Get the file content
                Where {$_ -match '^.*warning CS.*$'} |        # Extract lines that match warnings
                %{ $_.trim() -replace "^s*d+&gt;",""  } |      # Strip out any project number and caret prefixes
                sort-object | Get-Unique -asString)           # remove duplicates by sorting and filtering for unique strings

$count = $warnings.Count

# raw output
Write-Host "MSBuild Warnings - $count warnings ==================================================="
$warnings | % { Write-Host " * $_" }

#TeamCity output
Write-Host "##teamcity[buildStatus text='{build.status.text}, Build warnings: $count']"
Write-Host "##teamcity[buildStatisticValue key='buildWarnings' value='$count']"

# file output
if($RawOutputPath){
    $stream = [System.IO.StreamWriter] $RawOutputPath
    $stream.WriteLine("Build Warnings")
    $stream.WriteLine("====================================")
    $stream.WriteLine("")
    $warnings | % { $stream.WriteLine(" * $_") }
    $stream.Close()
}

# html report output
$check = Test-Path -PathType Container BuildWarningReport
if($check -eq $false){
    New-Item 'BuildWarningReport' -type Directory
}
$stream = [System.IO.StreamWriter] "BuildWarningReport/index.html"
$stream.WriteLine("&lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body&gt;&lt;h1&gt;$count Build Warnings&lt;/h1&gt;")
$stream.WriteLine("&lt;ul&gt;")
$warnings | % { $stream.WriteLine("&lt;li&gt;$_&lt;/li&gt;") }
$stream.WriteLine("&lt;/ul&gt;")
$stream.WriteLine("&lt;/body&gt;&lt;/html&gt;")
$stream.Close()</pre></div></div>

<p>To recap, we started with some warning messages randomly scattered across the build log. We ended with the warning count automatically showing in the build status on the dashboard, a nice chart of the number over time, and three different ways to view the detailed list. I hope this proves useful to others as well, now I have to go and fix the sample warnings I added before I forget about them. <img src="https://s.w.org/images/core/emoji/2/72x72/1f642.png" alt="🙂" class="wp-smiley" style="height: 1em; max-height: 1em;" /></p>
]]></content:encoded>
			<wfw:commentRss>/index.php/enterprisedev/application-lifecycle-management/displaying-net-build-warnings-in/feed/</wfw:commentRss>
		<slash:comments>4</slash:comments>
		</item>
		<item>
		<title>Reducing Code-Build-Test Friction with NCrunch</title>
		<link>/index.php/enterprisedev/unittest/reducing-code-build-test-friction/</link>
		<comments>/index.php/enterprisedev/unittest/reducing-code-build-test-friction/#respond</comments>
		<pubDate>Mon, 23 Jul 2012 10:13:00 +0000</pubDate>
		<dc:creator><![CDATA[Eli Weinstock-Herman (tarwn)]]></dc:creator>
				<category><![CDATA[Unit Testing]]></category>
		<category><![CDATA[.net]]></category>
		<category><![CDATA[ncrunch]]></category>
		<category><![CDATA[tdd]]></category>

		<guid isPermaLink="false">/index.php/2012/07/reducing-code-build-test-friction/</guid>
		<description><![CDATA[As I've moved from project to project, environment to environment, I've had opportunities to write unit tests after coding, do test first development, and once use unit tests as a living spec for an external developer (code none unit testing?). On&#8230;]]></description>
				<content:encoded><![CDATA[<p>As I&#8217;ve moved from project to project, environment to environment, I&#8217;ve had opportunities to write unit tests after coding, do test first development, and once use unit tests as a living spec for an external developer (code none unit testing?). One of the biggest friction points, once you settle on a framework, is the constant cycle back and forth between coding, building, running tests, and flipping back. Whether you are using MS Test and the built-in test result viewer, the external NUnit GUI, or a 3rd party test runner, that constant switching is actually stealing precious moments of concentration and time. </p>
<div style="text-align:center; color: #666666; font-size: 90%">
   <img src="http://tiernok.com/LTDBlog/AddressTDD/CodeBuildTest.png" alt="The Code, Build, Test Cycle" /><br />
   The Code, Build, Test Cycle
</div>
<p>Imagine for a moment that you have finished writing a piece of code. Maybe it&#8217;s the test, maybe it&#8217;s the code you intend to test. Instead of kicking off a build and switching mental mode to run the tests, the results simply start appearing. Your test lights up red, then green as you switch to building the logic that satisfies it, never once breaking stride to wait for the test suite to run. Your uncovered code is clearly marked as uncovered before you even finish writing it to press save. It&#8217;s magic.</p>
<p>And so very, very addictive.</p>
<h2>Hey Kids, Try Some of This</h2>
<p>Instead of screenshotting our way through another post, let&#8217;s do this together. First download and install <a href="http://www.ncrunch.net/" title="Visit the NCrunch website" target="_blank">NCrunch</a>. Then either download or clone the git repository sample I have set up here: https://github.com/tarwn/TDDAddress</p>
<p>Let&#8217;s get started.</p>
<h2>What are we doing?</h2>
<p><img src="http://tiernok.com/LTDBlog/AddressTDD/Letter.png" alt="Letter" style="float: left; margin-top: 8px;" /> </p>
<p>The goal of this exercise is to build an Address class that is the business and formatting logic behind entry of a mailing address. The Address class will expose properties to tell an interface what address fields are available, what they should be labelled, whether the address has all the required values, and a displayable formatted address. In return, it will expect that interface to populate input properties for all the address input values. </p>
<p>This is both as easy and quite a bit harder than what it sounds like. Easier in that we won&#8217;t be writing a game or similarly large construct, but harder because the rules for mailing addresses are not as well defined or as simple as you may think. In fact, most websites on the internet do it wrong, and not just for addresses outside the US. </p>
<p>Luckily there are some people that have tried to pull together all of the rules from the USPS and other sources and we can use the results of their hard work to serve as a spec for our Address logic. The rules we are using were sourced from http://www.columbia.edu/~fdc/postal/#general, but I&#8217;ve only included a subset of them in this project.</p>
<h2>Project Setup</h2>
<p>There are two projects in the solution, one to hold the Address class (Main) and one for the tests (Main.Tests). </p>
<div style="text-align:center; color: #666666; font-size: 90%">
   <img src="http://tiernok.com/LTDBlog/AddressTDD/SolutionExplorer.png" alt="Solution Explorer - Projects" /><br />
   Just a pair of small projects, nothing scary here
</div>
<p>The Address class already has the basic properties it needs, but everything else is up to you.</p>
<h2>Let&#8217;s Go</h2>
<p>Open the solution and enable NCrunch (it finished installing, right?) by selecting it from the top menu and selecting &#8220;Enable&#8221;. For the most part you can select the defaults when it is enabling. Either select the option to enable all of your tests by default while it is going through the dialogs, or open the Tests window, make ignored tests visible (grey icon on far right) and enable tests for the two projects manually.</p>
<p>Ready? Ok, moving on.</p>
<p>Open up the AddressTests file in Main.Tests and the Specs.md file from the root of the solution. Add the first test to the AddressTests like so:</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="csharp"><thead><tr><td colspan="2"  class="head">C#</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
</pre></td><td class="de1"><pre class="de1">&nbsp; &nbsp; <span class="br0">&#91;</span>Test<span class="br0">&#93;</span>
&nbsp; &nbsp; <span class="kw1">public</span> <span class="kw4">void</span> ToFormattedAddress_AddressLine1IsProvided_ItAppearsInOutput<span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">var</span> sampleValue <span class="sy0">=</span> <span class="st0">&quot;Address Line 1&quot;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">var</span> a <span class="sy0">=</span> <span class="kw3">new</span> Address<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; a<span class="sy0">.</span><span class="me1">AddressLine1</span> <span class="sy0">=</span> sampleValue<span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">var</span> result <span class="sy0">=</span> a<span class="sy0">.</span><span class="me1">ToFormattedAddress</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; Assert<span class="sy0">.</span><span class="me1">IsTrue</span><span class="br0">&#40;</span>result<span class="sy0">.</span><span class="me1">Contains</span><span class="br0">&#40;</span>sampleValue<span class="br0">&#41;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; <span class="br0">&#125;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">	[Test]
	public void ToFormattedAddress_AddressLine1IsProvided_ItAppearsInOutput() {
		var sampleValue = "Address Line 1";
		var a = new Address();

		a.AddressLine1 = sampleValue;
		var result = a.ToFormattedAddress();

		Assert.IsTrue(result.Contains(sampleValue));
	}</pre></div></div>

<p>This test is the second rule in the included Specs.md file. After you add the test code, red dots will show up next to executable lines in the test that are on the path to a failed assertion. </p>
<div style="text-align:center; color: #666666; font-size: 90%">
   <img src="http://tiernok.com/LTDBlog/AddressTDD/TestsAreRed.png" alt="Tests Are Red" /><br />
   Tests are automatically red/failing
</div>
<p>NCrunch is building and running the tests behind the scenes as you add more code, automagically. Switching over to the Address class, we&#8217;ll notice that it also has dots to indicate portions of the class that are referenced by failing tests. Right-clicking on any of these dots provides more details, options to run tests in debug mode, and so on.</p>
<p>Now add some code to satisfy that test. As you make addition, NCrunch continues to build and test in the background, displaying the updated dots as you work. </p>
<div style="text-align:center; color: #666666; font-size: 90%">
   <img src="http://tiernok.com/LTDBlog/AddressTDD/TestsAreGreen.png" alt="Tests Are Green" /><br />
   Tests and code turn Green automatically
</div>
<p>When you get to all green dots, you&#8217;re done. No need to stop, just move right on to the next test.</p>
[video:youtube:E0PztmQQlOQ]
<p>Enjoy the flow.</p>
]]></content:encoded>
			<wfw:commentRss>/index.php/enterprisedev/unittest/reducing-code-build-test-friction/feed/</wfw:commentRss>
		<slash:comments>0</slash:comments>
		</item>
		<item>
		<title>Machete &#8211; A scripting runtime for .NET</title>
		<link>/index.php/desktopdev/mstech/machete-a-scripting-runtime-for/</link>
		<comments>/index.php/desktopdev/mstech/machete-a-scripting-runtime-for/#comments</comments>
		<pubDate>Mon, 07 Mar 2011 20:21:00 +0000</pubDate>
		<dc:creator><![CDATA[chaospandion]]></dc:creator>
				<category><![CDATA[C#]]></category>
		<category><![CDATA[Microsoft Technologies]]></category>
		<category><![CDATA[.net]]></category>
		<category><![CDATA[c#]]></category>
		<category><![CDATA[ecmascript]]></category>
		<category><![CDATA[f#]]></category>
		<category><![CDATA[javascript]]></category>
		<category><![CDATA[machete]]></category>
		<category><![CDATA[scripting]]></category>

		<guid isPermaLink="false">/index.php/2011/03/machete-a-scripting-runtime-for/</guid>
		<description><![CDATA[In an attempt to overcome by perfectionism I've decided to open source my long term side project Machete for the world to see. Machete is my own dialect of the ECMAScript 5 standard or as it is more commonly called JavaScript. 


  The compiler is wr&#8230;]]></description>
				<content:encoded><![CDATA[<p>In an attempt to overcome my perfectionism I&#8217;ve decided to open source my long term side project Machete for the world to see. Machete is my own dialect of the ECMAScript 5 standard or as it is more commonly called JavaScript.</p>
<h1>Features</h1>
<p>Cleaner lambda expressions:</p>
<pre style="background-color:#EEEEEE;padding:5px;"><code>var succinct = (x, y) x + y;
var verbose = function (x, y) { return x + y; };</code></pre>
<p>First class iteration support with the foreach loop and generators.</p>
<pre style="background-color:#EEEEEE;padding:5px;"><code>var numbers = generator {
    yield 1;
    yield 2;
    yield 3;
};

foreach (var n in numbers) {
    Output.write(n);
}   

foreach (var e in ["Array", " objects", " are", " iterable", "!"]) {
    Output.write(e);
} 

foreach (var c in "Strings are iterable!") {
    Output.write(c);
}</code></pre>
<h1 style="margin-bottom:10px;margin-top:15px">Implementation</h1>
<ul>
<li>The compiler is written in F# and uses the library <a href="https://bitbucket.org/fparsec/main/overview">FParsec</a>.</li>
<li>The runtime is written in C# and is hosted by .NET.</li>
<li>It currently has over 400 tests with many more on the way.</li>
</ul>
<p>Machete is the product of almost a years worth of research, design, and coding. I have it hosted on GitHub so please stop by and fork the project. I would really love to up my test count dramatically and test cases from the community would be invaluable. Without further ado, the link to my repository.</p>
<p><a href="https://github.com/ChaosPandion/Machete">GitHub Repository For Machete</a></p>
]]></content:encoded>
			<wfw:commentRss>/index.php/desktopdev/mstech/machete-a-scripting-runtime-for/feed/</wfw:commentRss>
		<slash:comments>8</slash:comments>
		</item>
		<item>
		<title>Procedure expects parameter error from SqlCommand</title>
		<link>/index.php/datamgmt/dbprogramming/sqlcommand-parameter-expected/</link>
		<comments>/index.php/datamgmt/dbprogramming/sqlcommand-parameter-expected/#comments</comments>
		<pubDate>Mon, 27 Dec 2010 15:00:42 +0000</pubDate>
		<dc:creator><![CDATA[Ted Krueger (onpnt)]]></dc:creator>
				<category><![CDATA[Database Administration]]></category>
		<category><![CDATA[Database Programming]]></category>
		<category><![CDATA[Microsoft SQL Server]]></category>
		<category><![CDATA[Microsoft SQL Server Admin]]></category>
		<category><![CDATA[.net]]></category>
		<category><![CDATA[c#]]></category>
		<category><![CDATA[slqcommand]]></category>
		<category><![CDATA[sql server]]></category>

		<guid isPermaLink="false">/index.php/2010/12/sqlcommand-parameter-expected/</guid>
		<description><![CDATA[I was recently asked for some help with a very strange situation involving SQL Server and a .NET application using SqlCommand calls.  It was thought to be a problem with SQL Server and in particular, sp_execute not being formed correctly.]]></description>
				<content:encoded><![CDATA[<p>I was recently asked for some help with a very strange situation involving SQL Server and a .NET application using SqlCommand calls.  It was thought to be a problem with SQL Server and in particular, sp_execute not being formed correctly.</p>
<p><strong>Let’s go through the steps to this point</strong></p>
<p>The developer did exactly the right steps in troubleshooting the problem. Once the application was failing due to SQL Server return errors, Profiler was enlisted to determine the exact transaction that was being sent to SQL Server.  The transaction was found to be sent without specifying the parameters thought to be formed</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
</pre></td><td class="de1"><pre class="de1"><span class="kw3">sp_executesql</span> N<span class="st0">'dbo.uspGetEmployeeManagers'</span>,N<span class="st0">'@EmployeeID INT'</span>,@EmployeeID<span class="sy0">=</span><span class="nu0">1</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">sp_executesql N'dbo.uspGetEmployeeManagers',N'@EmployeeID INT',@EmployeeID=1</pre></div></div>

<p>When running this, the error returned is</p>
<blockquote><p>Msg 201, Level 16, State 4, Procedure uspGetEmployeeManagers, Line 0<br />
Procedure or function &#8216;uspGetEmployeeManagers&#8217; expects parameter &#8216;@EmployeeID&#8217;, which was not supplied.</p></blockquote>
<p>Looking at the statement closer and verifying with BOL sp_executesql syntax, the parameter mapping is not completely set.   The proper statement should be called as follows</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
</pre></td><td class="de1"><pre class="de1"><span class="kw1">exec</span> <span class="kw3">sp_executesql</span> N<span class="st0">'dbo.uspGetEmployeeManagers @EmployeeID'</span>,N<span class="st0">'@EmployeeID INT'</span>,@EmployeeID<span class="sy0">=</span><span class="nu0">1</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">exec sp_executesql N'dbo.uspGetEmployeeManagers @EmployeeID',N'@EmployeeID INT',@EmployeeID=1</pre></div></div>

<p>Note the @EmployeeID added to the procedure name based.</p>
<p>In order to recreate the problem entirely, the following code was used.</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="csharp"><thead><tr><td colspan="2"  class="head">C#</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
</pre></td><td class="de1"><pre class="de1"><span class="kw4">string</span> str <span class="sy0">=</span> <span class="st0">&quot;&quot;</span><span class="sy0">;</span> 
SqlConnection conn <span class="sy0">=</span> <span class="kw3">new</span> SqlConnection<span class="br0">&#40;</span><span class="st0">&quot;Data Source=localhost;Initial Catalog=AdventureWorks;Integrated Security=SSPI;&quot;</span><span class="br0">&#41;</span><span class="sy0">;</span> 
conn<span class="sy0">.</span><span class="me1">Open</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
SqlCommand cmd <span class="sy0">=</span> <span class="kw3">new</span> SqlCommand<span class="br0">&#40;</span><span class="st0">&quot;dbo.usp_Deltest&quot;</span>, conn<span class="br0">&#41;</span><span class="sy0">;</span> 
cmd<span class="sy0">.</span><span class="me1">CommandType</span> <span class="sy0">=</span> 
CommandType<span class="sy0">.</span><span class="me1">StoredProcedure</span><span class="sy0">;</span> 
cmd<span class="sy0">.</span><span class="me1">Parameters</span><span class="sy0">.</span><span class="kw1">Add</span><span class="br0">&#40;</span>
<span class="kw3">new</span> SqlParameter<span class="br0">&#40;</span><span class="st0">&quot;@EmployeeID&quot;</span>, <span class="st0">&quot;1&quot;</span><span class="br0">&#41;</span><span class="br0">&#41;</span><span class="sy0">;</span> 
cmd<span class="sy0">.</span><span class="me1">Parameters</span><span class="sy0">.</span><span class="kw1">Add</span><span class="br0">&#40;</span>
<span class="kw3">new</span> SqlParameter<span class="br0">&#40;</span><span class="st0">&quot;@ManagerID&quot;</span>, <span class="st0">&quot;1&quot;</span><span class="br0">&#41;</span><span class="br0">&#41;</span><span class="sy0">;</span> 
SqlDataReader reader <span class="sy0">=</span> cmd<span class="sy0">.</span><span class="me1">ExecuteReader</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span> 
<span class="kw1">while</span><span class="br0">&#40;</span>reader<span class="sy0">.</span><span class="me1">Read</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#41;</span> 
<span class="br0">&#123;</span>
str <span class="sy0">=</span> reader<span class="br0">&#91;</span><span class="nu0">0</span><span class="br0">&#93;</span><span class="sy0">.</span><span class="me1">ToString</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
<span class="br0">&#125;</span>
reader<span class="sy0">.</span><span class="me1">Close</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">string str = ""; 
SqlConnection conn = new SqlConnection("Data Source=localhost;Initial Catalog=AdventureWorks;Integrated Security=SSPI;"); 
conn.Open();
SqlCommand cmd = new SqlCommand("dbo.usp_Deltest", conn); 
cmd.CommandType = 
CommandType.StoredProcedure; 
cmd.Parameters.Add(
new SqlParameter("@EmployeeID", "1")); 
cmd.Parameters.Add(
new SqlParameter("@ManagerID", "1")); 
SqlDataReader reader = cmd.ExecuteReader(); 
while(reader.Read()) 
{
str = reader[0].ToString();
}
reader.Close();</pre></div></div>

<p>This test application appeared to work as it should and the sp_executesql was sent as expected.  After exhausting attempts to force the not well-formed statement on SQL Server, sections of the .NET code itself were looked at closer.  In order to test different scenarios, certain lines were commented out to change the way the code was being handled.</p>
<p>Specifically, when the command type setting for stored procedure was commented out, the exact situation was successfully recreated.  Unfortunately the BOL entry for SQLCommand.CommandType wasn’t much help here other than this section</p>
<blockquote><p>When you set the CommandType property to StoredProcedure, you should set the CommandText property to the name of the stored procedure. The command executes this stored procedure when you call one of the Execute methods.</p>
<p>The Microsoft .NET Framework Data Provider for SQL Server does not support the question mark (?) placeholder for passing parameters to a SQL Statement or a stored procedure called with a CommandType of Text. In this case, named parameters must be used. For example: </p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
</pre></td><td class="de1"><pre class="de1"><span class="kw1">SELECT</span> <span class="sy0">*</span> <span class="kw1">FROM</span> Customers <span class="kw1">WHERE</span> CustomerID <span class="sy0">=</span> @CustomerID</pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">SELECT * FROM Customers WHERE CustomerID = @CustomerID</pre></div></div>

</blockquote>
<p>Again, not a very effective section to the exact problem but it does allow us to come to the conclusion that without the CommandType being set, the parameters are essentially ignored in the procedure call from ADO.NET.</p>
<p><strong>Conclusion</strong></p>
<p>If you ever run across the error that the procedure you are calling expects a certain parameter or you see an sp_executesql statement with the same error but the SQL Server profiled transaction appears as it does from this posting, check to ensure you are setting the CommandType and using parameters correctly.</p>
<p>The best lesson learned in this problem was, involving both SQL Server and .NET individuals in the steps to troubleshoot problems such as this is a great way to identify, research and resolve problems quickly.  Make an effort to involve your team to make the length of time much smaller when it comes to the situations.</p>
]]></content:encoded>
			<wfw:commentRss>/index.php/datamgmt/dbprogramming/sqlcommand-parameter-expected/feed/</wfw:commentRss>
		<slash:comments>6</slash:comments>
		</item>
		<item>
		<title>Productive Programing With Pattern Matching</title>
		<link>/index.php/desktopdev/mstech/productive-programing-with-pattern-match/</link>
		<comments>/index.php/desktopdev/mstech/productive-programing-with-pattern-match/#comments</comments>
		<pubDate>Fri, 10 Sep 2010 00:36:58 +0000</pubDate>
		<dc:creator><![CDATA[chaospandion]]></dc:creator>
				<category><![CDATA[Microsoft Technologies]]></category>
		<category><![CDATA[.net]]></category>
		<category><![CDATA[f#]]></category>

		<guid isPermaLink="false">/index.php/2010/09/productive-programing-with-pattern-match/</guid>
		<description><![CDATA[Personally I have been sold on F# for a long time but some people however will need a lot of convincing before they move out of their comfort zone. Hopefully after reading this you will be more inclined to try it out. Imagine you were given a directory full of files that did not have [&#8230;]]]></description>
				<content:encoded><![CDATA[<p>Personally I have been sold on F# for a long time but some people however will need a lot of convincing before they move out of their comfort zone. Hopefully after reading this you will be more inclined to try it out. </p>
<p>Imagine you were given a directory full of files that did not have any file extensions and were told to figure out the file extension for every file. Picture how you might do this in VB or C#. Now take a look at this:</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="ocaml"><thead><tr><td colspan="2"  class="head">OCaml</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
</pre></td><td class="de1"><pre class="de1"><span class="co1">(*</span>
<span class="co1">Notice how we don't need to specify the type for filePaths?</span>
<span class="co1">The compiler will infer the type based off how we use the parameter.</span>
<span class="co1">When we call File.OpenRead the compiler will know that filePaths has to be a</span>
<span class="co1">string seq or IEnumerable&lt;string&gt; in C# speak.</span>
<span class="co1">*)</span>
<span class="kw1">let</span> getUnknownFileExtensions filePaths <span class="sy0">=</span>
&nbsp; &nbsp; filePaths
&nbsp; &nbsp; <span class="sy0">|&gt;</span> Seq<span class="sy0">.</span>map<span class="br0">&#40;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">fun</span> filePath <span class="sy0">-&gt;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; use fs <span class="sy0">=</span> System<span class="sy0">.</span>IO<span class="sy0">.</span>File<span class="sy0">.</span>OpenRead<span class="br0">&#40;</span>filePath<span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">let</span> buffer <span class="sy0">=</span> <span class="kw2">Array</span><span class="sy0">.</span>zeroCreate <span class="nu0">8</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">let</span> read <span class="sy0">=</span> fs<span class="sy0">.</span>Read<span class="br0">&#40;</span>buffer, <span class="nu0">0</span>, <span class="nu0">8</span><span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">match</span> buffer <span class="kw1">with</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="co1">(*The underscore tells the compiler that we dont care what the byte is at that index.*)</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="sy0">|</span> <span class="br0">&#91;</span><span class="sy0">|</span> 0xFFuy<span class="sy0">;</span> 0xD8uy<span class="sy0">;</span> _<span class="sy0">;</span> _<span class="sy0">;</span> _<span class="sy0">;</span> _<span class="sy0">;</span> _<span class="sy0">;</span> _<span class="sy0">;</span> <span class="sy0">|</span><span class="br0">&#93;</span> <span class="sy0">-&gt;</span> 
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#40;</span>filePath, <span class="st0">&quot;.jpg&quot;</span><span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="sy0">|</span> <span class="br0">&#91;</span><span class="sy0">|</span> 0x25uy<span class="sy0">;</span> 0x50uy<span class="sy0">;</span> 0x44uy<span class="sy0">;</span> 0x46uy<span class="sy0">;</span> _<span class="sy0">;</span> _<span class="sy0">;</span> _<span class="sy0">;</span> _<span class="sy0">;</span> <span class="sy0">|</span><span class="br0">&#93;</span> <span class="sy0">-&gt;</span> 
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#40;</span>filePath, <span class="st0">&quot;.pdf&quot;</span><span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="sy0">|</span> <span class="br0">&#91;</span><span class="sy0">|</span> 0x50uy<span class="sy0">;</span> 0x4Buy<span class="sy0">;</span> 0x03uy<span class="sy0">;</span> 0x04uy<span class="sy0">;</span> _<span class="sy0">;</span> _<span class="sy0">;</span> _<span class="sy0">;</span> _<span class="sy0">;</span> <span class="sy0">|</span><span class="br0">&#93;</span> <span class="sy0">-&gt;</span> 
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#40;</span>filePath, <span class="st0">&quot;.docx&quot;</span><span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="sy0">|</span> <span class="br0">&#91;</span><span class="sy0">|</span> 0xD0uy<span class="sy0">;</span> 0xCFuy<span class="sy0">;</span> 0x11uy<span class="sy0">;</span> 0xE0uy<span class="sy0">;</span> 0xA1uy<span class="sy0">;</span> 0xB1uy<span class="sy0">;</span> 0x1Auy<span class="sy0">;</span> 0xE1uy<span class="sy0">;</span> <span class="sy0">|</span><span class="br0">&#93;</span> <span class="sy0">-&gt;</span> 
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#40;</span>filePath, <span class="st0">&quot;.doc&quot;</span><span class="br0">&#41;</span> 
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="sy0">|</span> _ <span class="sy0">-&gt;</span> 
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#40;</span>filePath, <span class="st0">&quot;.unk&quot;</span><span class="br0">&#41;</span>
&nbsp; &nbsp; <span class="br0">&#41;</span>
&nbsp; &nbsp; <span class="sy0">|&gt;</span> Seq<span class="sy0">.</span>iter<span class="br0">&#40;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">fun</span> <span class="br0">&#40;</span>filePath, extension<span class="br0">&#41;</span> <span class="sy0">-&gt;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; System<span class="sy0">.</span>IO<span class="sy0">.</span>File<span class="sy0">.</span>Move<span class="br0">&#40;</span>filePath, filePath <span class="sy0">+</span> extension<span class="br0">&#41;</span>
&nbsp; &nbsp; <span class="br0">&#41;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">(*
Notice how we don't need to specify the type for filePaths?
The compiler will infer the type based off how we use the parameter.
When we call File.OpenRead the compiler will know that filePaths has to be a
string seq or IEnumerable&lt;string&gt; in C# speak.
*)
let getUnknownFileExtensions filePaths =
    filePaths
    |&gt; Seq.map(
        fun filePath -&gt;
            use fs = System.IO.File.OpenRead(filePath)
            let buffer = Array.zeroCreate 8
            let read = fs.Read(buffer, 0, 8)
            match buffer with
            (*The underscore tells the compiler that we dont care what the byte is at that index.*)
            | [| 0xFFuy; 0xD8uy; _; _; _; _; _; _; |] -&gt; 
                (filePath, ".jpg")
            | [| 0x25uy; 0x50uy; 0x44uy; 0x46uy; _; _; _; _; |] -&gt; 
                (filePath, ".pdf")
            | [| 0x50uy; 0x4Buy; 0x03uy; 0x04uy; _; _; _; _; |] -&gt; 
                (filePath, ".docx")
            | [| 0xD0uy; 0xCFuy; 0x11uy; 0xE0uy; 0xA1uy; 0xB1uy; 0x1Auy; 0xE1uy; |] -&gt; 
                (filePath, ".doc") 
            | _ -&gt; 
                (filePath, ".unk")
    )
    |&gt; Seq.iter(
        fun (filePath, extension) -&gt;
            System.IO.File.Move(filePath, filePath + extension)
    )</pre></div></div>

<p>Now that is what I call productive programming!</p>
]]></content:encoded>
			<wfw:commentRss>/index.php/desktopdev/mstech/productive-programing-with-pattern-match/feed/</wfw:commentRss>
		<slash:comments>1</slash:comments>
		</item>
		<item>
		<title>CQL From Visual Studio With NDepend 3</title>
		<link>/index.php/architect/designingsoftware/cql-from-visual-studio-with-ndepend-3/</link>
		<comments>/index.php/architect/designingsoftware/cql-from-visual-studio-with-ndepend-3/#comments</comments>
		<pubDate>Mon, 06 Sep 2010 20:29:00 +0000</pubDate>
		<dc:creator><![CDATA[Alex Ullrich]]></dc:creator>
				<category><![CDATA[Designing Software]]></category>
		<category><![CDATA[.net]]></category>
		<category><![CDATA[analysis]]></category>
		<category><![CDATA[c#]]></category>
		<category><![CDATA[ndepend]]></category>

		<guid isPermaLink="false">/index.php/2010/09/cql-from-visual-studio-with-ndepend-3/</guid>
		<description><![CDATA[For the last few months I've had the pleasure of working with NDepend version 3.  Most of my development at home is on linux these days, so I haven't used it as much as I'd like, but I have been using it to poke around in various codebases and see what&#8230;]]></description>
				<content:encoded><![CDATA[<p>For the last few months I&#8217;ve had the pleasure of working with <a href="http://ndepend.com/">NDepend</a> version 3.  Most of my development at home is on linux these days, so I haven&#8217;t used it as much as I&#8217;d like, but I have been using it to poke around in various codebases and see what the new Visual Studio integration is all about.  The last version integrated with Visual Studio, technically speaking, but it didn&#8217;t seem nearly as thorough as what I&#8217;ve seen in version 3.  I suspect the improved extensibility model in VS 2010 has a lot to do with this, but can&#8217;t confirm (I haven&#8217;t tried it with 2008 either).</p>
<p>My favorite feature of NDepend has always been CQL, the SQL-like query language that allows you to query your codebase using a variety of common metrics.  This is the same as it ever was (the integration with VS is even quite similar) but with the more thorough integration it seems much more useful.  I like how easy it is now to keep an eye on my CQL constraints when I rebuild.</p>
<p>My favorite CQL feature is the ability to set up CQL constraints <em>from now</em>.  This is really cool for older projects, where it&#8217;s unrealistic to think that your team will be able to fix everything right away.  But what you can do with this feature is ensure that all <em>new or modified</em> code does measure up to your team&#8217;s standards.  You may not be able to clean up all those 1,000 line methods right away, but you <em>can</em> ensure that newer methods fit in a more reasonable size limit (like 975 <img src="https://s.w.org/images/core/emoji/2/72x72/1f609.png" alt="😉" class="wp-smiley" style="height: 1em; max-height: 1em;" /> ).  This is one of the most useful features of the application, IMO.  The way it works is by allowing you to establish a baseline.  By comparing the code&#8217;s current state to this baseline, future analyses are able to determine which methods/types/etc are new or changed, and apply the constraint to only these methods/types/etc.  Sometimes I feel like this would be useful just to be able to concisely see which methods have been changed as well (version control logs aren&#8217;t the most friendly things to read, especially spread throughout a large codebase).  Below is a screenshot of this feature in action.</p>
<div class="image_block"><img src="/wp-content/uploads/blogs/Architect/CQL-VS-NDepend3/cqlexplorer.PNG" alt="CQL Explorer" title="CQL Explorer Screenshot" width="971" height="283" /></div>
<p>The first three queries listed are built in to NDepend.  I added the fourth, just to have a listing of new/changed methods ready.  The CQL for this query is simply

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="text"><thead><tr><td colspan="2"  class="head">Text</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
</pre></td><td class="de1"><pre class="de1">SELECT METHODS WHERE WasAdded OR CodeWasChanged</pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">SELECT METHODS WHERE WasAdded OR CodeWasChanged</pre></div></div>

<p>Not a bad way to keep an eye on what is getting changed in the codebase.  To get in this state I added three new methods to the codebase I was looking at (in a place that I could remove them easily since they are not only low quality but useless as well). Two had 7 parameters, putting them in violation of the constraint for basic quality principles.  I didn&#8217;t add any tests, so all three were in violation of the test coverage constraint.  And finally they all showed up in the list of new methods.  It&#8217;s worth noting the yellow circle at the bottom right as well &#8211; the yellow means that warnings were encountered when running the CQL portion of the analysis.  Green would be good, and red would mean I have some bad queries that can&#8217;t be run.  </p>
<p>Double clicking a row in the CQL Explorer will take you to the CQL Editor &#8211; from here you can view the results of the query, and the CQL it contains.  From there you can easily navigate to the method definition in your source code by double-clicking.  </p>
<div class="image_block"><img src="/wp-content/uploads/blogs/Architect/CQL-VS-NDepend3/cqleditor.PNG" alt="CQL Editor" title="CQL Editor Screenshot" width="457" height="913" /></div>
<p>One of the things I really like here is the comments in the built-in queries.  They contain numerous links to metric definitions on the NDepend website, and sometimes even links to blog entries where the lead developer, <a href="http://codebetter.com/blogs/patricksmacchia/default.aspx">Patrick Smacchia</a> has explained features in greater detail.  I really like this form of documentation, it makes it easier to keep up to date and also minimizes what needs to be stored on the user&#8217;s computer.  </p>
<p>What I was happiest to find in the VS integration is the ability to superimpose CQL results onto the metrics view.  The metrics view consists of a grid where each block represents a unit of code (type, method, etc&#8230;) and they are sized according to their value for the metric in question.  When running CQL queries, the units of code matching your criteria are highlighted, giving a great visualization of how much code exhibits the properties you are looking for.</p>
<div class="image_block"><img src="/wp-content/uploads/blogs/Architect/CQL-VS-NDepend3/metricsexplorer.PNG" alt="Metrics Explorer" title="CQL Metrics Explorer" width="887" height="686" /></div>
<p>The selected query (about types having too many efferent couplings) is the currently selected query, and I had moused over the QueryParser class to highlight it in pink and show the metrics summary on the right.  I find that having this built right into visual studio really helps me figure out where to focus my refactoring energy.</p>
<p>It looks as if a lot of effort went into <a href="http://codebetter.com/blogs/patricksmacchia/archive/2010/08/29/validating-code-rules-in-visual-studio.aspx">making the CQL validation phase fast</a>:<br />
<blockquote>CQL rules validation phase is fast. The performance challenge was to make this happens almost instantly to avoid slowing the developer machine. Hopefully for a large 100K Lines of Code application, code gets re-analyzed and 200 CQL rules can get checked, all within 3 seconds after the (re)compilation of one or several .NET assemblies. These fast performances were made possible thanks to the development of a new technology of incremental code analysis. With incremental code analysis, only modified code gets re-analyzed. I can attest that this was extremely challenging and complex development!</p></blockquote>
<p>From what I&#8217;ve seen, the effort&#8217;s been a success.  I&#8217;ve mostly been using it to look at different versions of <a href="http://lucene.apache.org/lucene.net/">Lucene.net</a>, as I&#8217;ve got some work to do to get some of my code to build in VS2010.  For this size codebase (~23k lines) the analysis is completed very quickly, even if I disable the incremental analysis.  The CQL validation portion completes almost instantly, and memory usage doesn&#8217;t seem to get out of hand even when keeping VS open for days.  I&#8217;d imagine if your computer can handle running Visual Studio to begin with, it won&#8217;t have too much trouble with the NDepend integration. I could see some of the VS add-ins that don&#8217;t play well with others causing issues, especially with a very large codebase, so I hope to go back and test with a larger codebase and some other add-ins installed eventually.</p>
<p>Most of the other NDepend goodies are available in VS now as well (Dependency Graphs, Test Coverage Analysis, Class Browser, etc&#8230;) but I won&#8217;t get into all that here.  I really see CQL as the app&#8217;s killer feature, and that is what I spend the most time thinking about.  There is a good overview of the app&#8217;s capabilities <a href="http://www.ndepend.com/Features.aspx#Tour">here</a> if you&#8217;d like to read more.</p>
]]></content:encoded>
			<wfw:commentRss>/index.php/architect/designingsoftware/cql-from-visual-studio-with-ndepend-3/feed/</wfw:commentRss>
		<slash:comments>1</slash:comments>
		</item>
	</channel>
</rss>
