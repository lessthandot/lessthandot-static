<?xml version="1.0" encoding="UTF-8"?><rss version="2.0"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:atom="http://www.w3.org/2005/Atom"
	xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
	xmlns:slash="http://purl.org/rss/1.0/modules/slash/"
	>

<channel>
	<title>inheritance &#8211; LessthanDot</title>
	<atom:link href="/index.php/tag/inheritance/feed/" rel="self" type="application/rss+xml" />
	<link>/</link>
	<description>A Technical Community for IT Professionals</description>
	<lastBuildDate>Sat, 09 Mar 2019 12:50:36 +0000</lastBuildDate>
	<language>en-US</language>
	<sy:updatePeriod>hourly</sy:updatePeriod>
	<sy:updateFrequency>1</sy:updateFrequency>
	<generator>https://wordpress.org/?v=4.6.1</generator>
	<item>
		<title>Java Training Day 4</title>
		<link>/index.php/enterprisedev/appserver/java-training-day-4/</link>
		<comments>/index.php/enterprisedev/appserver/java-training-day-4/#respond</comments>
		<pubDate>Thu, 29 Nov 2012 18:55:00 +0000</pubDate>
		<dc:creator><![CDATA[SQLDenis]]></dc:creator>
				<category><![CDATA[Application Lifecycle Management]]></category>
		<category><![CDATA[Application Server]]></category>
		<category><![CDATA[Java EE]]></category>
		<category><![CDATA[encapsulation]]></category>
		<category><![CDATA[generics]]></category>
		<category><![CDATA[inheritance]]></category>
		<category><![CDATA[java]]></category>
		<category><![CDATA[jvm]]></category>
		<category><![CDATA[polymorphism]]></category>

		<guid isPermaLink="false">/index.php/2012/11/java-training-day-4/</guid>
		<description><![CDATA[Java Day 4

The Collections Framework
Legacy Container Classes
A container is an object that holds a collection of other objects
An array is a simple container. Arrays have a couple of limitations
. The size is fixed
. All the members of the arra&#8230;]]></description>
				<content:encoded><![CDATA[<p>Today was day four of our Java training, we looked at generics, collection and IO today, here is what was covered</p>
<p><strong>The Collections Framework</strong><br />
Legacy Container Classes<br />
A container is an object that holds a collection of other objects<br />
An array is a simple container. Arrays have a couple of limitations<br />
. The size is fixed<br />
. All the members of the array must be of the same type<br />
. You can&#8217;t add methods and attributes to an array</p>
<p>The java.util package has two container classes as well as an supporting interface</p>
<p>Vector class<br />
Has add() and remove() methods, the elementAt() method let&#8217;s you retrieve an element at a specified index<br />
The Stack subclass provides the push() and pop() methods, this will support a LIFO stack</p>
<p>Hashtable class<br />
This is an expandable associative array<br />
The entries are stored as key/value pairs, no dups allowed<br />
The Properties subclass will hold the name/value pairs</p>
<p>The Enumeration interface can be used to traverse either the vector or the hashtable objects. Enumeration  has hasMoreElements() and nextElements() methods</p>
<p>Legacy Container Classes Disadvantages<br />
It is not type safe, the containers can hold any kind of objects<br />
The references must be downcast explicitly if you want to access the objects<br />
They are synchronized, performance hit<br />
Code needs to be rewritten if you want to replace one container with a container from another type</p>
<p>Vector,  Hashtable and the Enumeration interface in Java SE 5+<br />
Vector,  Hashtable and the Enumeration interface have been redefined as generics<br />
Vector is now Vector&lt;E&gt; and it implements the List&lt;E&gt;&gt; interface<br />
Hashtable  is now Hashtable &lt;K,V&gt; and implements the Map&lt;K ,V&gt; interface<br />
Enumeration  is now Enumeration &lt;E&gt;.<br />
Enumeration   has been superseded by the Iterator interface</p>
<p>The enhanced for loop (or for each loop) works automatically with the generic versions of the containers</p>
<p>Collections Framework<br />
The Collections Framework is a unified framework fo manipulating collections of objects<br />
Programmers can choose from a variety of structures</p>
<p>The collections framework consists of:</p>
<ul>
<li>Collection Interfaces &#8211; Represent different types of collections, such as sets, lists and maps. These interfaces form the basis of the framework.</li>
<li>General-purpose Implementations &#8211; Primary implementations of the collection interfaces.</li>
<li>Legacy Implementations &#8211; The collection classes from earlier releases, Vector and Hashtable, have been retrofitted to implement the collection interfaces.</li>
<li>Special-purpose Implementations &#8211; Implementations designed for use in special situations. These implementations display nonstandard performance characteristics, usage restrictions, or behavior.</li>
<li>Concurrent Implementations &#8211; Implementations designed for highly concurrent use.<br />
Wrapper Implementations &#8211; Add functionality, such as synchronization, to other implementations.</li>
<li>Convenience Implementations &#8211; High-performance &#8220;mini-implementations&#8221; of the collection interfaces.</li>
<li>Abstract Implementations &#8211; Partial implementations of the collection interfaces to facilitate custom implementations.</li>
<li>Algorithms &#8211; Static methods that perform useful functions on collections, such as sorting a list.</li>
<li>Infrastructure &#8211; Interfaces that provide essential support for the collection interfaces.</li>
<li>Array Utilities &#8211; Utility functions for arrays of primitives and reference objects. Not, strictly speaking, a part of the Collections Framework, this functionality was added to the Java platform at the same time and relies on some of the same infrastructure.</li>
</ul>
<p>Collection Implementations<br />
The general purpose implementations are summarized in the table below:</p>
<div class="tables">
<table border="0">
<thead>
<tr>
<th colspan="2" rowspan="2" align="center" border="0">&nbsp;</th>
<th colspan="5"><font size="+1">Implementations</font></th>
</tr>
<tr>
<th>Hash Table</th>
<th>Resizable Array</th>
<th>Balanced Tree</th>
<th>Linked List</th>
<th>Hash Table + Linked List</th>
</tr>
<tr>
<th rowspan="4"><font size="+1">Interfaces</font></th>
<th>Set</th>
<td><a href=
"http://docs.oracle.com/javase/6/docs/api/java/utilhttp://docs.oracle.com/javase/6/docs/api/java/util/HashSet.html"><tt>HashSet</tt></a></td>
<td>&nbsp;</td>
<td><a href=
"http://docs.oracle.com/javase/6/docs/api/java/utilhttp://docs.oracle.com/javase/6/docs/api/java/util/TreeSet.html"><tt>TreeSet</tt></a></td>
<td>&nbsp;</td>
<td><a href=
"http://docs.oracle.com/javase/6/docs/api/java/utilhttp://docs.oracle.com/javase/6/docs/api/java/util/LinkedHashSet.html"><tt>LinkedHashSet</tt></a></td>
</tr>
<tr>
<th>List</th>
<td>&nbsp;</td>
<td><a href=
"http://docs.oracle.com/javase/6/docs/api/java/utilhttp://docs.oracle.com/javase/6/docs/api/java/util/ArrayList.html"><tt>ArrayList</tt></a></td>
<td>&nbsp;</td>
<td><a href=
"http://docs.oracle.com/javase/6/docs/api/java/utilhttp://docs.oracle.com/javase/6/docs/api/java/util/LinkedList.html"><tt>LinkedList</tt></a></td>
<td>&nbsp;</td>
</tr>
<tr>
<th>Deque</th>
<td>&nbsp;</td>
<td><a href=
"http://docs.oracle.com/javase/6/docs/api/java/utilhttp://docs.oracle.com/javase/6/docs/api/java/util/ArrayDeque.html"><tt>ArrayDeque</tt></a></td>
<td>&nbsp;</td>
<td><a href=
"http://docs.oracle.com/javase/6/docs/api/java/utilhttp://docs.oracle.com/javase/6/docs/api/java/util/LinkedList.html"><tt>LinkedList</tt></a></td>
<td>&nbsp;</td>
</tr>
<tr>
<th>Map</th>
<td><a href=
"http://docs.oracle.com/javase/6/docs/api/java/utilhttp://docs.oracle.com/javase/6/docs/api/java/util/HashMap.html"><tt>HashMap</tt></a></td>
<td>&nbsp;</td>
<td><a href=
"http://docs.oracle.com/javase/6/docs/api/java/utilhttp://docs.oracle.com/javase/6/docs/api/java/util/TreeMap.html"><tt>TreeMap</tt></a></td>
<td>&nbsp;</td>
<td><a href=
"http://docs.oracle.com/javase/6/docs/api/java/utilhttp://docs.oracle.com/javase/6/docs/api/java/util/LinkedHashMap.html"><tt>LinkedHashMap</tt></a></td>
</tr>
</thead>
</table>
</div>
<p>Code to the interface, not to the class, you can now change the container without having to make code changes</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="java"><thead><tr><td colspan="2"  class="head">Java</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
</pre></td><td class="de1"><pre class="de1">ArrayList<span class="sy0">&lt;</span>Integer<span class="sy0">&gt;</span> &nbsp; list &nbsp;<span class="sy0">=</span> <span class="kw1">new</span> ArrayList<span class="sy0">&lt;</span>Integer<span class="sy0">&gt;</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
LinkedList<span class="sy0">&lt;</span>Integer<span class="sy0">&gt;</span> &nbsp;list <span class="sy0">=</span> &nbsp;<span class="kw1">new</span> LinkedList<span class="sy0">&lt;</span>Integer<span class="sy0">&gt;</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">ArrayList&lt;Integer&gt;   list  = new ArrayList&lt;Integer&gt;();
LinkedList&lt;Integer&gt;  list =  new LinkedList&lt;Integer&gt;();</pre></div></div>


<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="java"><thead><tr><td colspan="2"  class="head">Java</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
</pre></td><td class="de1"><pre class="de1">List<span class="sy0">&lt;</span>Integer<span class="sy0">&gt;</span> list &nbsp;<span class="sy0">=</span> <span class="kw1">new</span> ArrayList<span class="sy0">&lt;</span>Integer<span class="sy0">&gt;</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
List<span class="sy0">&lt;</span>Integer<span class="sy0">&gt;</span> list <span class="sy0">=</span> &nbsp;<span class="kw1">new</span> LinkedList<span class="sy0">&lt;</span>Integer<span class="sy0">&gt;</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">List&lt;Integer&gt; list  = new ArrayList&lt;Integer&gt;();
List&lt;Integer&gt; list =  new LinkedList&lt;Integer&gt;();</pre></div></div>

<p>There is a tutorial availabe on the Oracle website here: http://docs.oracle.com/javase/tutorial/collections/index.html</p>
<p><strong>Exceptions</strong></p>
<p>Traditional<br />
Inefficient, checks must be done even if stuff doesn&#8217;t blow up<br />
Difficult to maintain<br />
Using a return value as both an output value and an error status is confusing<br />
Compiler does not enforce error checking</p>
<p>Using Exceptions<br />
Compiler can enforce proper exception handling<br />
Exception is caught by a block designed to handle the exception<br />
Errors cause by constructors, initializers and other code that doesn&#8217;t return a return value</p>
<p>All exceptions objects are subclasses of java.lang.Throwable and they inherit its methods<br />
Error, Exception and RuntimeException are treated differently by the compiler<br />
Error, this mean as major system-level error occured<br />
RuntimeException , logic or data validateion error that should have been found and fixed during development<br />
Exception, run-time problems like a file that can&#8217;t be found or a network problem</p>
<p>A program can catch exceptions by using a combination of the try, catch, and finally blocks.</p>
<p>The try block identifies a block of code in which an exception can occur.<br />
The catch block identifies a block of code, known as an exception handler, that can handle a particular type of exception.<br />
The finally block identifies a block of code that is guaranteed to execute, and is the right place to close files, recover resources, and otherwise clean up after the code enclosed in the try block.</p>
<p><strong>Assert</strong><br />
This was added in Java 1.4, it is a simple way to check run-time conditions and throw exceptions when you are debugging code<br />
It can be enabled or disabled at runtime, by default they are disabled, use the -ea switch from the command line to enable it. Since Java doesn&#8217;t have a preprocessor this would be a way to do testing without having to modify the code</p>
<p><strong>Input/Output</strong><br />
We looked at IO and the different IO classes to work with files, streams sockets etc etc</p>
<p>Here is a list of the I/O Streams</p>
<p>Byte Streams<br />
handle I/O of raw binary data.</p>
<p>Character Streams<br />
handle I/O of character data, automatically handling translation to and from the local character set.</p>
<p>Buffered Streams<br />
optimize input and output by reducing the number of calls to the native API.</p>
<p>Scanning and Formatting<br />
allows a program to read and write formatted text.</p>
<p>I/O from the Command Line<br />
describes the Standard Streams and the Console object.</p>
<p>Data Streams<br />
handle binary I/O of primitive data type and String values.</p>
<p>Object Streams<br />
handle binary I/O of objects.</p>
<p>That is all for today</p>
]]></content:encoded>
			<wfw:commentRss>/index.php/enterprisedev/appserver/java-training-day-4/feed/</wfw:commentRss>
		<slash:comments>0</slash:comments>
		</item>
	</channel>
</rss>
