<?xml version="1.0" encoding="UTF-8"?><rss version="2.0"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:atom="http://www.w3.org/2005/Atom"
	xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
	xmlns:slash="http://purl.org/rss/1.0/modules/slash/"
	>

<channel>
	<title>validation &#8211; LessthanDot</title>
	<atom:link href="/index.php/tag/validation/feed/" rel="self" type="application/rss+xml" />
	<link>/</link>
	<description>A Technical Community for IT Professionals</description>
	<lastBuildDate>Sat, 09 Mar 2019 12:50:36 +0000</lastBuildDate>
	<language>en-US</language>
	<sy:updatePeriod>hourly</sy:updatePeriod>
	<sy:updateFrequency>1</sy:updateFrequency>
	<generator>https://wordpress.org/?v=4.6.1</generator>
	<item>
		<title>MVVM Validation with KnockoutJS &#8211; Don&#8217;t put it in the View/HTML</title>
		<link>/index.php/webdev/mvvm-validation-with-knockoutjs-dont-put-it-in-the-viewhtml/</link>
		<comments>/index.php/webdev/mvvm-validation-with-knockoutjs-dont-put-it-in-the-viewhtml/#respond</comments>
		<pubDate>Wed, 02 Mar 2016 18:22:10 +0000</pubDate>
		<dc:creator><![CDATA[Eli Weinstock-Herman (tarwn)]]></dc:creator>
				<category><![CDATA[Web Developer]]></category>
		<category><![CDATA[knockout]]></category>
		<category><![CDATA[validation]]></category>

		<guid isPermaLink="false">/?p=4396</guid>
		<description><![CDATA[When it comes to input validation for rich websites and Single Page Applications, a lot of the patterns out there rely on markup in the HTML/View. This works OK for smaller applications, but is terrible for larger applications that expect to be maintained and extended over time. In the past couple years I have used [&#8230;]]]></description>
				<content:encoded><![CDATA[<p>When it comes to input validation for rich websites and Single Page Applications, a lot of the patterns out there rely on markup in the HTML/View. This works OK for smaller applications, but is terrible for larger applications that expect to be maintained and extended over time.</p>
<p>In the past couple years I have used Knockout on sites ranging from toy size (<a href="/index.php/architect/distributed-storage-how-sql-azure-replicas-work/" title="Distributed Storage: How SQL Azure Replicas Work">the SQL Azure post</a>) up to a large modular SPA rewrite of a Silverlight application. This post is based on one of the patterns we created working on the latter, a large platform expected to support continued growth from multiple teams working side-by-side.</p>
<div style="background-color: #eeeeee; margin: .5em; margin-bottom: 1.5em; padding: .5em">&#8220;Large modular SPA&#8221;: It seems like every time I find a post on SPAs or large front-end techniques about a &#8220;Big&#8221; application, there is almost never a definition for what the author considered &#8220;Big&#8221;. This rewrite was for a 300 KLOC Silverlight application and has 30+ discrete screens ranging from &#8220;simple&#8221; in-screen search results that make IE tables weep, to complex SVG dashboards, to a multi-tabbed screen that can scale from 50 inputs to 1000&#8217;s, depending on the complexity of the user and their use case.</div>
<h2>Validation Defined in the View</h2>
<p>Here are a couple examples of what I mean when I say &#8220;validation defined in the view&#8221;:</p>
<p>AngularJS Documentation: <a href="https://docs.angularjs.org/guide/forms" title="AngularJS Documentation / Forms / Custom Validation" target="_blank">https://docs.angularjs.org/guide/forms</a></p>
<pre>&lt;input type="number" ng-model="size" name="size" min="0" max="10" integer /&gt;{{size}}&lt;br /&gt;</pre>
<p>jQuery Validation: <a href="http://jqueryvalidation.org/documentation/" title="jQuery Validation Plugin" target="_blank">http://jqueryvalidation.org/documentation/</a></p>
<pre>&lt;p&gt;
  &lt;label for="cname"&gt;Name (required, at least 2 characters)&lt;/label&gt;
  &lt;input id="cname" name="name" minlength="2" type="text" required&gt;
&lt;/p&gt;</pre>
<p>So what&#8217;s wrong with this approach?</p>
<p><strong>1. It&#8217;s difficult to regression test</strong></p>
<p>Defining the input restrictions in the view reduces our options to using a UI test framework or manual testers, both on the more expensive side of testing when it comes to money or execution time. When we add in the fact that we&#8217;re talking about definitions defined on 100&#8217;s or 1000&#8217;s of inputs, we end up using a lot of expensive bandwidth for some very detailed things, at the expense of whatever else we were going to use it for.</p>
<p><strong>2. It&#8217;s difficult to change and it&#8217;s re-defined every place we display/bind the field</strong></p>
<p>Have a field that is shown on 3 screens? That means defining the restrictions 3 times and hoping that you either got them all or that someone notices that a long value on one page actually breaks the validation when it&#8217;s shown on a second one.</p>
<p><strong>3. The format isn&#8217;t defined</strong></p>
<p>Give a group of humans a textbox that says &#8220;Amount&#8221;, and some of them will include currency symbols and group separators ($ and , for USD) and this is a totally valid thing to do. Or we could force users to change how they type dollars into a computer simply because we want to store it as a number (no, really, please stop doing things like this).</p>
<p><strong>4. There are fewer rules than you might think</strong></p>
<p>Sure, each string in your application has some specific length restrictions, but how many variations do you really have for a currency input? or a password input? So take #3 above and multiple it by 100. Then consider how many spots you will have to change if you change from USD to GBP.</p>
<p>Sold yet?</p>
<h2>Validation on the Model</h2>
<p>Whether you&#8217;re using MVVM, MVC, or MV-Whatever in the front-end, you have a Model that represents the data you save to the server and display on the screen. Because it is data, it doesn&#8217;t really care about how the user can best consume that data, only that it fits a certain structure and type.</p>
<p>Enter an adapter I will call, for this post, the &#8220;PresentationModel&#8221;:</p>
<div id="attachment_4420" style="width: 410px" class="wp-caption aligncenter"><a href="/wp-content/uploads/2016/02/Diagram.png"><img src="/wp-content/uploads/2016/02/Diagram.png" alt="PresentationModel - Defines Validation/Formatting" width="400" height="400" class="size-full wp-image-4420" srcset="/wp-content/uploads/2016/02/Diagram.png 400w, /wp-content/uploads/2016/02/Diagram-200x200.png 200w, /wp-content/uploads/2016/02/Diagram-300x300.png 300w" sizes="(max-width: 400px) 100vw, 400px" /></a><p class="wp-caption-text">PresentationModel &#8211; Defines Validation/Formatting</p></div>
<p>Wrapping around the Model, this adapter defines how a human reads and writes values and defines the contract for how data flows into the Model and how it is surfaced again. Here is an example of what that could look like in knockout.js:</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="javascript"><thead><tr><td colspan="2"  class="head">Javascript</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
</pre></td><td class="de1"><pre class="de1"><span class="co1">// -- Model</span>
<span class="kw1">function</span> OrderLineModel<span class="br0">&#40;</span>rawDTO<span class="br0">&#41;</span><span class="br0">&#123;</span>
&nbsp; &nbsp; <span class="kw1">this</span>.<span class="me1">name</span> <span class="sy0">=</span> ko.<span class="me1">observable</span><span class="br0">&#40;</span>rawDTO.<span class="me1">name</span> <span class="sy0">||</span> <span class="st0">''</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; <span class="kw1">this</span>.<span class="me1">quantity</span> <span class="sy0">=</span> ko.<span class="me1">observable</span><span class="br0">&#40;</span>rawDTO.<span class="me1">quantity</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; <span class="kw1">this</span>.<span class="me1">price</span> <span class="sy0">=</span> ko.<span class="me1">observable</span><span class="br0">&#40;</span>rawDTO.<span class="me1">price</span><span class="br0">&#41;</span><span class="sy0">;</span>
<span class="br0">&#125;</span>
&nbsp;
<span class="co1">// -- Presentation Model</span>
<span class="kw1">function</span> OrderLinePresModel<span class="br0">&#40;</span>orderLineModel<span class="br0">&#41;</span><span class="br0">&#123;</span>
&nbsp; &nbsp; <span class="kw1">this</span>.<span class="me1">name</span> <span class="sy0">=</span> orderLineModel.<span class="me1">name</span>.<span class="me1">extend</span><span class="br0">&#40;</span><span class="br0">&#123;</span> validate<span class="sy0">:</span> <span class="br0">&#123;</span> type<span class="sy0">:</span> stringType<span class="sy0">,</span> min<span class="sy0">:</span> <span class="nu0">1</span><span class="sy0">,</span> max<span class="sy0">:</span> <span class="nu0">25</span><span class="sy0">,</span> required<span class="sy0">:</span> <span class="kw2">true</span> <span class="br0">&#125;</span> <span class="br0">&#125;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; <span class="kw1">this</span>.<span class="me1">quantity</span> <span class="sy0">=</span> orderLineModel.<span class="me1">quantity</span>.<span class="me1">extend</span><span class="br0">&#40;</span><span class="br0">&#123;</span> validate<span class="sy0">:</span> <span class="br0">&#123;</span> type<span class="sy0">:</span> integerType<span class="sy0">,</span> min<span class="sy0">:</span> <span class="nu0">1</span><span class="sy0">,</span> max<span class="sy0">:</span> <span class="nu0">500</span><span class="sy0">,</span> required<span class="sy0">:</span> <span class="kw2">true</span> <span class="br0">&#125;</span> <span class="br0">&#125;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; <span class="kw1">this</span>.<span class="me1">price</span> <span class="sy0">=</span> orderLineModel.<span class="me1">price</span>.<span class="me1">extend</span><span class="br0">&#40;</span><span class="br0">&#123;</span> validate<span class="sy0">:</span> <span class="br0">&#123;</span> type<span class="sy0">:</span> currencyType<span class="sy0">,</span> min<span class="sy0">:</span> <span class="nu0">0</span><span class="sy0">,</span> max<span class="sy0">:</span> <span class="nu0">100</span><span class="sy0">,</span> required<span class="sy0">:</span> <span class="kw2">true</span> <span class="br0">&#125;</span> <span class="br0">&#125;</span><span class="br0">&#41;</span><span class="sy0">;</span>
<span class="br0">&#125;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">// -- Model
function OrderLineModel(rawDTO){
	this.name = ko.observable(rawDTO.name || '');
	this.quantity = ko.observable(rawDTO.quantity);
	this.price = ko.observable(rawDTO.price);
}

// -- Presentation Model
function OrderLinePresModel(orderLineModel){
	this.name = orderLineModel.name.extend({ validate: { type: stringType, min: 1, max: 25, required: true } });
	this.quantity = orderLineModel.quantity.extend({ validate: { type: integerType, min: 1, max: 500, required: true } });
	this.price = orderLineModel.price.extend({ validate: { type: currencyType, min: 0, max: 100, required: true } });
}</pre></div></div>

<p>The example is an Order object with a collection of Order Lines that alow a user to free-type a name, quantity, and price which are then used for various sub-total calculations and presumably saved at some point. In the &#8220;PresentationModel&#8221;, I&#8217;ve extended the Model&#8217;s properties with the validation/formatting definitions for each of the values. </p>
<div id="attachment_4416" style="width: 568px" class="wp-caption aligncenter"><a href="/wp-content/uploads/2016/02/Screenshot.png"><img src="/wp-content/uploads/2016/02/Screenshot.png" alt="Formatted and Validated Inputs" width="558" height="183" class="size-full wp-image-4416" srcset="/wp-content/uploads/2016/02/Screenshot.png 558w, /wp-content/uploads/2016/02/Screenshot-300x98.png 300w" sizes="(max-width: 558px) 100vw, 558px" /></a><p class="wp-caption-text">Formatted and Validated Inputs</p></div>
<p>I now have several levels of tests I can easily write, as well:</p>
<ul>
<li>Parsing and Formatting tests &#8211; make sure &#8220;currencyType&#8221; works consistently, instead of testing 500 different currency inputs in my application</li>
<li>PresentationModel regression tests &#8211; make sure each field in the &#8220;PresentationModel&#8221; has the correct type and length requirements</li>
</ul>
<p>When I later re-use this model to display a summary of the order, I already have all of the types defined (and tested) in the &#8220;PresentationModel&#8221;, making it impossible to accidentally format one as a currency amount and the other as a plain decimal value.</p>
<h2>A Knockout Implementation</h2>
<p>I have a sample implementation available here: <a href="https://github.com/tarwn/Blog_KnockoutMVVMPatterns/blob/master/validation/index.html" title="https://github.com/tarwn/Blog_KnockoutMVVMPatterns/blob/master/validation/index.html" target="_blank">/validation/index.html (github)</a></p>
<p>There are 4 key parts to this: the Model, the PresentationModel, the Type, and the Validate extender (I also have a basic component for displaying the inputs)</p>
<h3>Validate Extender</h3>
<p>The validate extender is a computed observable that we use in the PresentationModel to define the type and additional validation parameters. It is the main workhorse behind the scenes that attaches the read and write behavior to the Model&#8217;s observable property.</p>
<div id="attachment_4415" style="width: 510px" class="wp-caption aligncenter"><a href="/wp-content/uploads/2016/02/PresentationModel.png"><img src="/wp-content/uploads/2016/02/PresentationModel.png" alt="Validate Extender: Input/Output Handling" width="500" height="220" class="size-full wp-image-4415" srcset="/wp-content/uploads/2016/02/PresentationModel.png 500w, /wp-content/uploads/2016/02/PresentationModel-300x132.png 300w" sizes="(max-width: 500px) 100vw, 500px" /></a><p class="wp-caption-text">Validate Extender: Input/Output Handling</p></div>
<p>When a new value comes in, it uses the Type to try and parse the value, performs any validations supported by the type, runs custom validations that are defined directly on that field, then writes to the underlying Model&#8217;s property/observable. When an update is made to the Model&#8217;s observable, a read is triggered back up and runs through the read side of the validate extender, formatting it using the Type&#8217;s format method.</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="javascript"><thead><tr><td colspan="2"  class="head">Javascript</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
</pre></td><td class="de1"><pre class="de1"><span class="co1">//-- extender definition</span>
&nbsp;
ko.<span class="me1">extenders</span>.<span class="me1">validate</span> <span class="sy0">=</span> <span class="kw1">function</span> <span class="br0">&#40;</span>target<span class="sy0">,</span> options<span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; <span class="co1">// ...</span>
&nbsp;
&nbsp; &nbsp; <span class="kw1">var</span> readFunction <span class="sy0">=</span> <span class="kw1">function</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">return</span> type.<span class="me1">format</span><span class="br0">&#40;</span>target<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#41;</span><span class="sy0">;</span> <span class="co1">//...</span>
&nbsp; &nbsp; <span class="br0">&#125;</span><span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; <span class="kw1">var</span> writeFunction <span class="sy0">=</span> <span class="kw1">function</span><span class="br0">&#40;</span>newValue<span class="br0">&#41;</span><span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="co1">// allow empty values if this is a non-required field</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">if</span><span class="br0">&#40;</span>options.<span class="me1">required</span> <span class="sy0">===</span> <span class="kw2">false</span> <span class="sy0">&amp;&amp;</span> newValue <span class="sy0">===</span> <span class="st0">''</span><span class="br0">&#41;</span><span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="co1">// ... clear error properties and return</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; <span class="co1">// will it parse?</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">var</span> parseResult <span class="sy0">=</span> type.<span class="me1">tryParse</span><span class="br0">&#40;</span>newValue<span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">if</span><span class="br0">&#40;</span>parseResult.<span class="me1">isError</span><span class="br0">&#41;</span><span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="co1">// ... set error properties and return</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; <span class="co1">// will it validate for type validation?</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">var</span> validationResult <span class="sy0">=</span> type.<span class="me1">tryValidate</span><span class="br0">&#40;</span>parseResult.<span class="me1">value</span><span class="sy0">,</span> options<span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">if</span><span class="br0">&#40;</span>validationResult.<span class="me1">isError</span><span class="br0">&#41;</span><span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="co1">// ... set error properties and return</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; <span class="co1">// custom validation?</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">if</span><span class="br0">&#40;</span>options.<span class="me1">validate</span> <span class="sy0">!=</span> <span class="kw2">null</span><span class="br0">&#41;</span><span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; validationResult <span class="sy0">=</span> options.<span class="me1">validate</span><span class="br0">&#40;</span>validationResult.<span class="me1">value</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">if</span><span class="br0">&#40;</span>validationResult.<span class="me1">isError</span><span class="br0">&#41;</span><span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="co1">// ... set error properties and return</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; <span class="co1">// must be good, write it through</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="co1">// ...</span>
&nbsp; &nbsp; &nbsp; &nbsp; target<span class="br0">&#40;</span>validationResult.<span class="me1">value</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="co1">// ... clear error properties</span>
&nbsp; &nbsp; <span class="br0">&#125;</span><span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; <span class="kw1">var</span> computed <span class="sy0">=</span> ko.<span class="me1">computed</span><span class="br0">&#40;</span><span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; read<span class="sy0">:</span> readFunction<span class="sy0">,</span>
&nbsp; &nbsp; &nbsp; &nbsp; write<span class="sy0">:</span> writeFunction
&nbsp; &nbsp; <span class="br0">&#125;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; computed.<span class="me1">validation</span> <span class="sy0">=</span> validationProperties<span class="sy0">;</span>
&nbsp; &nbsp; <span class="kw1">return</span> computed<span class="sy0">;</span>
<span class="br0">&#125;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">//-- extender definition

ko.extenders.validate = function (target, options) {
	// ...

	var readFunction = function(){
		return type.format(target()); //...
	};

	var writeFunction = function(newValue){
		// allow empty values if this is a non-required field
		if(options.required === false &amp;&amp; newValue === ''){
			// ... clear error properties and return
		}

		// will it parse?
		var parseResult = type.tryParse(newValue);
		if(parseResult.isError){
			// ... set error properties and return
		}

		// will it validate for type validation?
		var validationResult = type.tryValidate(parseResult.value, options);
		if(validationResult.isError){
			// ... set error properties and return
		}

		// custom validation?
		if(options.validate != null){
			validationResult = options.validate(validationResult.value);
			if(validationResult.isError){
				// ... set error properties and return
			}
		}

		// must be good, write it through
		// ...
		target(validationResult.value);
		// ... clear error properties
	};

	var computed = ko.computed({
		read: readFunction,
		write: writeFunction
	});
	computed.validation = validationProperties;
	return computed;
}</pre></div></div>

<h3>Type Definitions</h3>
<p>Adding types is then fairly simple, they just need to implement the parse, validate, and error methods:</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="javascript"><thead><tr><td colspan="2"  class="head">Javascript</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
</pre></td><td class="de1"><pre class="de1"><span class="kw1">var</span> currencyType <span class="sy0">=</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; emptyValue<span class="sy0">:</span> <span class="kw2">null</span><span class="sy0">,</span>
&nbsp; &nbsp; format<span class="sy0">:</span> <span class="kw1">function</span><span class="br0">&#40;</span>value<span class="br0">&#41;</span><span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">if</span><span class="br0">&#40;</span>value <span class="sy0">==</span> <span class="kw2">null</span><span class="br0">&#41;</span><span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">return</span> <span class="st0">''</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">else</span><span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">return</span> value.<span class="me1">toLocaleString</span><span class="br0">&#40;</span><span class="st0">'en-US'</span><span class="sy0">,</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; style<span class="sy0">:</span> <span class="st0">'currency'</span><span class="sy0">,</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; currency<span class="sy0">:</span> <span class="st0">'USD'</span><span class="sy0">,</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; currencyDisplay<span class="sy0">:</span> <span class="st0">'symbol'</span><span class="sy0">,</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; useGrouping<span class="sy0">:</span> <span class="kw2">true</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp; &nbsp; <span class="br0">&#125;</span><span class="sy0">,</span>
&nbsp; &nbsp; tryParse<span class="sy0">:</span> <span class="kw1">function</span><span class="br0">&#40;</span>value<span class="br0">&#41;</span><span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="co1">// strip out commas and $</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">var</span> parsedResult <span class="sy0">=</span> parseFloat<span class="br0">&#40;</span>value.<span class="me1">replace</span><span class="br0">&#40;</span><span class="co2">/[\$,]/g</span><span class="sy0">,</span><span class="st0">''</span><span class="br0">&#41;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">if</span><span class="br0">&#40;</span>isNaN<span class="br0">&#40;</span>parsedResult<span class="br0">&#41;</span><span class="br0">&#41;</span><span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">return</span> failedInput<span class="br0">&#40;</span><span class="st0">&quot;'&quot;</span> <span class="sy0">+</span> value <span class="sy0">+</span> <span class="st0">&quot;' is not a valid currency value&quot;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">else</span><span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">return</span> successfulInput<span class="br0">&#40;</span>parsedResult<span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp; &nbsp; <span class="br0">&#125;</span><span class="sy0">,</span>
&nbsp; &nbsp; tryValidate<span class="sy0">:</span> <span class="kw1">function</span><span class="br0">&#40;</span>value<span class="sy0">,</span> options<span class="br0">&#41;</span><span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">if</span><span class="br0">&#40;</span>options.<span class="me1">min</span> <span class="sy0">!=</span> <span class="kw2">undefined</span> <span class="sy0">&amp;&amp;</span> value <span class="sy0">&lt;</span> options.<span class="me1">min</span><span class="br0">&#41;</span><span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">return</span> failedInput<span class="br0">&#40;</span><span class="st0">&quot;'&quot;</span> <span class="sy0">+</span> value <span class="sy0">+</span> <span class="st0">&quot;' is less than the supported minimum of '&quot;</span> <span class="sy0">+</span> options.<span class="me1">min</span> <span class="sy0">+</span> <span class="st0">&quot;'&quot;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">if</span><span class="br0">&#40;</span>options.<span class="me1">max</span> <span class="sy0">!=</span> <span class="kw2">undefined</span> <span class="sy0">&amp;&amp;</span> value <span class="sy0">&gt;</span> options.<span class="me1">max</span><span class="br0">&#41;</span><span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">return</span> failedInput<span class="br0">&#40;</span><span class="st0">&quot;'&quot;</span> <span class="sy0">+</span> value <span class="sy0">+</span> <span class="st0">&quot;' is greater than the supported maximum of '&quot;</span> <span class="sy0">+</span> options.<span class="me1">max</span> <span class="sy0">+</span> <span class="st0">&quot;'&quot;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">return</span> successfulInput<span class="br0">&#40;</span>value<span class="br0">&#41;</span><span class="sy0">;</span>&nbsp; &nbsp; &nbsp; 
&nbsp; &nbsp; <span class="br0">&#125;</span>
<span class="br0">&#125;</span><span class="sy0">;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">var currencyType = {
	emptyValue: null,
	format: function(value){
		if(value == null){
			return '';
		}
		else{
			return value.toLocaleString('en-US', {
				style: 'currency',
				currency: 'USD',
				currencyDisplay: 'symbol',
				useGrouping: true
			});
		}
	},
	tryParse: function(value){
		// strip out commas and $
		var parsedResult = parseFloat(value.replace(/[\$,]/g,''));
		if(isNaN(parsedResult)){
			return failedInput("'" + value + "' is not a valid currency value");
		}
		else{
			return successfulInput(parsedResult);
		}
	},
	tryValidate: function(value, options){
		if(options.min != undefined &amp;&amp; value &lt; options.min){
			return failedInput("'" + value + "' is less than the supported minimum of '" + options.min + "'");
		}

		if(options.max != undefined &amp;&amp; value &gt; options.max){
			return failedInput("'" + value + "' is greater than the supported maximum of '" + options.max + "'");
		}

		return successfulInput(value);		
	}
};</pre></div></div>

<p>This is a pretty basic example. Starting here, we could easily come back through and pass the field&#8217;s name though for richer error messages, use the format method for the values in the tryValidate error messages, and so on. We could also extend the tryParse method to accept and expand on values like &#8220;$100K&#8221;, converting something that would be natural to the user to a value that is natural to the inner Model (and then doing the reverse in the format method). </p>
<h2>What we gain</h2>
<p>Switching from validation in the view to format/validation as a contract in the code reduces the number of places we have to repeat ourselves, makes it easy to extend a consistently richer experience to the end user, acts like a contact that keeps invalid values out of our model, is clearer and easier to read than having it mixed in among the HTML, and greatly increases our ability to write basic unit tests to serve as a safety net for future us.</p>
]]></content:encoded>
			<wfw:commentRss>/index.php/webdev/mvvm-validation-with-knockoutjs-dont-put-it-in-the-viewhtml/feed/</wfw:commentRss>
		<slash:comments>0</slash:comments>
		</item>
		<item>
		<title>AngularJS vs Knockout &#8211; Validation (3 of 8)</title>
		<link>/index.php/webdev/uidevelopment/angularjs-vs-knockout-validation-3/</link>
		<comments>/index.php/webdev/uidevelopment/angularjs-vs-knockout-validation-3/#comments</comments>
		<pubDate>Wed, 09 Oct 2013 12:38:00 +0000</pubDate>
		<dc:creator><![CDATA[Eli Weinstock-Herman (tarwn)]]></dc:creator>
				<category><![CDATA[Javascript]]></category>
		<category><![CDATA[UI Development]]></category>
		<category><![CDATA[angularjs]]></category>
		<category><![CDATA[knockout]]></category>
		<category><![CDATA[validation]]></category>

		<guid isPermaLink="false">/index.php/2013/10/angularjs-vs-knockout-validation-3/</guid>
		<description><![CDATA[I'm reviewing Angular and Knockout to determine which would fit better for a variety of upcoming projects. So here's the question, how hard is it going to be to add good, client-side validation to my pages? What about custom validation?]]></description>
				<content:encoded><![CDATA[<p>I&#8217;m reviewing Angular and Knockout to determine which would fit better for a variety of upcoming projects. So here&#8217;s the question, how hard is it going to be to add good, client-side validation to my pages? What about custom validation?</p>
<div style="background-color: #eeeeee; padding: 1em;">
This is the third of eight posts looking at the capabilities of knockout and Angular. In the <a href="/index.php/WebDev/UIDevelopment/angularjs-vs-knockout-introduction-1" title="AngularJS vs Knockout - Introduction">introduction post</a>, I outlined the capabilities that I am evaluating for. In the <a href="/index.php/WebDev/UIDevelopment/angularjs-vs-knockout-data-binding" title="AngularJS vs Knockout - Data Binding">second post</a>, I looked at databinding. This post is exploring simple and custom validation in with AngularJS and Knockout.
</div>
<p>All of the examples presented throughout the series are available in the <a href="https://github.com/tarwn/AngularJS-vs-Knockout/" title="View all of the post examples on github">tarwn/AngularJS-vs-Knockout</a> repository on github.</p>
<h2>Simple Angular Validation</h2>
<p>Angular.js provides validation baked in. Using attributes such as <code class="codespan">required</code>, <code class="codespan">min</code>, and <code class="codespan">max</code>, we can define the validation on an input and the controller for the input will reflect the validation state and add respective CSS classes to the element.</p>
<p>Values are evaluated as the new value is entered. The value bound to the ng-model attribute will reflect the value when the input is is valid and <i>undefine</i> when the input is invalid. Unfortunately this means that when an invalid value is entered, the <i>undefined</i> propagates through any computed values or additional bound fields that rely on that bound property.</p>
<h3>AngularJS Simple Validation Example</h3>
<p>Full source available at <a href="https://github.com/tarwn/AngularJS-vs-Knockout/blob/master/Angular/SimpleValidation.html" title="View full example file on github">Angular/SimpleValidation.html</a>.</p>
<p>The built-in validation in AngularJS uses the HTML5 validation attributes. In this case, we have a basic backing Controller with a text property <code class="codespan">textValue</code>, a numeric property <code class="codespan">integerValue</code>, and a function that adds 5 to the numeric property <code class="codespan">getCalculatedInteger()</code>, and we&#8217;re binding to those properties with the relevant validation requirements:</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="html4strict"><thead><tr><td colspan="2"  class="head">HTML</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
</pre></td><td class="de1"><pre class="de1"><span class="sc0">&lt;!DOCTYPE html&gt;</span>
<span class="sc2">&lt;<span class="kw2">html</span> ng-app<span class="sy0">=</span><span class="st0">&quot;sampleApp&quot;</span>&gt;</span>
<span class="sc2">&lt;<span class="kw2">head</span>&gt;</span>
&nbsp; &nbsp; <span class="sc-1">&lt;!-- ... --&gt;</span> &nbsp;
&nbsp; &nbsp; <span class="sc2">&lt;<span class="kw2">script</span> <span class="kw3">type</span><span class="sy0">=</span><span class="st0">&quot;text/javascript&quot;</span> <span class="kw3">src</span><span class="sy0">=</span><span class="st0">&quot;js/lib/angular-1.0.8.min.js&quot;</span>&gt;&lt;<span class="sy0">/</span><span class="kw2">script</span>&gt;</span>
&nbsp; &nbsp; <span class="sc-1">&lt;!-- ... css classes and such ... --&gt;</span>
<span class="sc2">&lt;<span class="sy0">/</span><span class="kw2">head</span>&gt;</span>
<span class="sc2">&lt;<span class="kw2">body</span>&gt;</span>
<span class="sc2">&lt;<span class="kw2">div</span> ng-controller<span class="sy0">=</span><span class="st0">&quot;SimpleValidationController&quot;</span>&gt;</span>
&nbsp; &nbsp; <span class="sc2">&lt;<span class="kw2">form</span> <span class="kw3">name</span><span class="sy0">=</span><span class="st0">&quot;appForm&quot;</span> novalidate&gt;</span>
&nbsp; &nbsp; &nbsp; &nbsp; Required Text: <span class="sc2">&lt;<span class="kw2">input</span> <span class="kw3">type</span><span class="sy0">=</span><span class="st0">&quot;text&quot;</span> <span class="kw3">name</span><span class="sy0">=</span><span class="st0">&quot;textValueInput&quot;</span> ng-model<span class="sy0">=</span><span class="st0">&quot;textValue&quot;</span> required <span class="sy0">/</span>&gt;&lt;<span class="kw2">br</span> <span class="sy0">/</span>&gt;</span>
&nbsp; &nbsp; &nbsp; &nbsp; Required Int: <span class="sc2">&lt;<span class="kw2">input</span> <span class="kw3">type</span><span class="sy0">=</span><span class="st0">&quot;number&quot;</span> ng-model<span class="sy0">=</span><span class="st0">&quot;integerValue&quot;</span> min<span class="sy0">=</span><span class="st0">&quot;0&quot;</span> max<span class="sy0">=</span><span class="st0">&quot;5&quot;</span> ng-pattern<span class="sy0">=</span><span class="st0">&quot;/^-?d+$/&quot;</span> required <span class="sy0">/</span>&gt;&lt;<span class="kw2">br</span> <span class="sy0">/</span>&gt;</span>
&nbsp; &nbsp; &nbsp; &nbsp; Required Int + 5: {{ getCalculatedInteger() }}<span class="sc2">&lt;<span class="kw2">br</span> <span class="sy0">/</span>&gt;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="sc2">&lt;<span class="kw2">input</span> <span class="kw3">type</span><span class="sy0">=</span><span class="st0">&quot;submit&quot;</span> <span class="kw3">value</span><span class="sy0">=</span><span class="st0">&quot;Save&quot;</span> <span class="sy0">/</span>&gt;</span>
&nbsp; &nbsp; <span class="sc2">&lt;<span class="sy0">/</span><span class="kw2">form</span>&gt;</span>
&nbsp; &nbsp;<span class="sc-1">&lt;!-- ... --&gt;</span>
<span class="sc2">&lt;<span class="sy0">/</span><span class="kw2">div</span>&gt;</span>
<span class="sc-1">&lt;!-- ... --&gt;</span> &nbsp;</pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">&lt;!DOCTYPE html&gt;
&lt;html ng-app="sampleApp"&gt;
&lt;head&gt;
    &lt;!-- ... --&gt;  
    &lt;script type="text/javascript" src="js/lib/angular-1.0.8.min.js"&gt;&lt;/script&gt;
    &lt;!-- ... css classes and such ... --&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;div ng-controller="SimpleValidationController"&gt;
    &lt;form name="appForm" novalidate&gt;
        Required Text: &lt;input type="text" name="textValueInput" ng-model="textValue" required /&gt;&lt;br /&gt;
        Required Int: &lt;input type="number" ng-model="integerValue" min="0" max="5" ng-pattern="/^-?d+$/" required /&gt;&lt;br /&gt;
        Required Int + 5: {{ getCalculatedInteger() }}&lt;br /&gt;
        &lt;input type="submit" value="Save" /&gt;
    &lt;/form&gt;
   &lt;!-- ... --&gt;
&lt;/div&gt;
&lt;!-- ... --&gt;  </pre></div></div>

<p>In the integer input, I&#8217;ve used the required attribute to indicate the value is required, the min and max attributes to define a valid range for the value, and a pattern to ensure the value is an integer. Behind the scenes, Angular sets additional properties on the form and input elements to define their validity.</p>
<p>In the full sample code above, I have included CSS styles and output the validation properties in a pre-formatted section so I can see what&#8217;s going on behind the scenes:</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="html4strict"><thead><tr><td colspan="2"  class="head">HTML</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
</pre></td><td class="de1"><pre class="de1"><span class="sc2">&lt;<span class="kw2">pre</span>&gt;</span>
textValue: 
&nbsp; &nbsp; value=&quot;{{ textValue }}&quot; &nbsp; &nbsp;
&nbsp; &nbsp; value is null: {{ textValue == null }}
&nbsp; &nbsp; valid={{ appForm.textValueInput.$valid }}
&nbsp; &nbsp; error={{ appForm.textValueInput.$error }}
&nbsp;
integerValue: 
&nbsp; &nbsp; value=&quot;{{ integerValue }}&quot;
&nbsp; &nbsp; value is null: {{ integerValue == null }}
&nbsp; &nbsp; valid={{ appForm.integerValueInput.$valid }}
&nbsp; &nbsp; error={{ appForm.integerValueInput.$error }}
&nbsp;
appForm: 
&nbsp; &nbsp; valid=&quot;{{ appForm.$valid }}&quot;
&nbsp; &nbsp; error={{ appForm.$error }}
&nbsp; &nbsp; required={{ appForm.$error.required }}
<span class="sc2">&lt;<span class="sy0">/</span><span class="kw2">pre</span>&gt;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">&lt;pre&gt;
textValue: 
    value="{{ textValue }}"    
    value is null: {{ textValue == null }}
    valid={{ appForm.textValueInput.$valid }}
    error={{ appForm.textValueInput.$error }}

integerValue: 
    value="{{ integerValue }}"
    value is null: {{ integerValue == null }}
    valid={{ appForm.integerValueInput.$valid }}
    error={{ appForm.integerValueInput.$error }}

appForm: 
    valid="{{ appForm.$valid }}"
    error={{ appForm.$error }}
    required={{ appForm.$error.required }}
&lt;/pre&gt;</pre></div></div>

<h2>More Complex AngularJS Validation</h2>
<p>The built-in attributes cover a wide range of needs, but there are also cases where I need a field to validate it&#8217;s value against a prior one on the form. AngularJS does not have a pre-built directive for this, but we can build a custom one and use the <a href="http://docs.angularjs.org/guide/directive" title="AngularJS: Directive">Linking Method</a> in the Directive. One of the arguments supplied is the controller for the element. Using this, we can add methods to to the input pipeline ($parsers) and to the pipeline when values are set directly ($formatters), then set the validity on the controller from those methods.</p>
<h3>AngularJS Custom Validation Example</h3>
<p>Full source available at <a href="https://github.com/tarwn/AngularJS-vs-Knockout/blob/master/Angular/ComplexValidation.html" title="View full example file on github">Angular/ComplexValidation.html</a>.</p>
<p>For the purposes of this example, we&#8217;ll have a controller with two integer properties, <code class="codespan">ceilingValue</code> and <code class="codespan">integerValue</code>. Rather than use a hardcoded max value for the input responsible for integerValue, I&#8217;m going to define a custom directive to use the value of the first input as the ceiling. </p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="html4strict"><thead><tr><td colspan="2"  class="head">HTML</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
</pre></td><td class="de1"><pre class="de1"><span class="sc-1">&lt;!-- ... ---&gt;</span>
&nbsp; &nbsp; &nbsp; &nbsp; Ceiling Input: <span class="sc2">&lt;<span class="kw2">input</span> <span class="kw3">type</span><span class="sy0">=</span><span class="st0">&quot;number&quot;</span> <span class="kw3">name</span><span class="sy0">=</span><span class="st0">&quot;ceilingValueInput&quot;</span> ng-model<span class="sy0">=</span><span class="st0">&quot;ceilingValue&quot;</span> required <span class="sy0">/</span>&gt;&lt;<span class="kw2">br</span> <span class="sy0">/</span>&gt;</span>
&nbsp; &nbsp; &nbsp; &nbsp; Integer Input: <span class="sc2">&lt;<span class="kw2">input</span> <span class="kw3">type</span><span class="sy0">=</span><span class="st0">&quot;number&quot;</span> <span class="kw3">name</span><span class="sy0">=</span><span class="st0">&quot;integerValueInput&quot;</span> ng-model<span class="sy0">=</span><span class="st0">&quot;integerValue&quot;</span> ng-pattern<span class="sy0">=</span><span class="st0">&quot;/^-?d+$/&quot;</span> ceiling-validate<span class="sy0">=</span><span class="st0">&quot;{{ ceilingValue }}&quot;</span> required <span class="sy0">/</span>&gt;&lt;<span class="kw2">br</span> <span class="sy0">/</span>&gt;</span>
<span class="sc-1">&lt;!-- ... --&gt;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">&lt;!-- ... ---&gt;
        Ceiling Input: &lt;input type="number" name="ceilingValueInput" ng-model="ceilingValue" required /&gt;&lt;br /&gt;
        Integer Input: &lt;input type="number" name="integerValueInput" ng-model="integerValue" ng-pattern="/^-?d+$/" ceiling-validate="{{ ceilingValue }}" required /&gt;&lt;br /&gt;
&lt;!-- ... --&gt;</pre></div></div>

<p>The <code class="codespan">ceilingValidate</code> directive then defines the behavior for the new attribute:</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="javascript"><thead><tr><td colspan="2"  class="head">Javascript</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
</pre></td><td class="de1"><pre class="de1">sampleApp.<span class="me1">directive</span><span class="br0">&#40;</span><span class="st0">'ceilingValidate'</span><span class="sy0">,</span> <span class="kw1">function</span> <span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; <span class="kw1">return</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="co1">// can only be used as an attribute</span>
&nbsp; &nbsp; &nbsp; &nbsp; restrict<span class="sy0">:</span> <span class="st0">'A'</span><span class="sy0">,</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="co1">// must also have an ngModel attribute defined</span>
&nbsp; &nbsp; &nbsp; &nbsp; require<span class="sy0">:</span> <span class="st0">'ngModel'</span><span class="sy0">,</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="co1">// explicitly create one-way binding to attribute value so we can watch it</span>
&nbsp; &nbsp; &nbsp; &nbsp; scope<span class="sy0">:</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ceilingValidate<span class="sy0">:</span> <span class="st0">&quot;@&quot;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span><span class="sy0">,</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="co1">// and define the logic for the link</span>
&nbsp; &nbsp; &nbsp; &nbsp; link<span class="sy0">:</span> <span class="kw1">function</span> <span class="br0">&#40;</span>scope<span class="sy0">,</span> instanceElement<span class="sy0">,</span> instanceAttributes<span class="sy0">,</span> controller<span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="co1">// per http://www.benlesh.com/2012/12/angular-js-custom-validation-via.html</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="co1">// let's add a parser (html input -&gt; model) and a formatter (model -&gt; html input)</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="co1">// when the value in the ceiling changes, re-evaluate validity</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; scope.$watch<span class="br0">&#40;</span><span class="st0">'ceilingValidate'</span><span class="sy0">,</span> <span class="kw1">function</span> <span class="br0">&#40;</span>newValue<span class="sy0">,</span> oldValue<span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">if</span> <span class="br0">&#40;</span>newValue <span class="sy0">!==</span> <span class="kw2">undefined</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">var</span> valid <span class="sy0">=</span> <span class="br0">&#40;</span>parseInt<span class="br0">&#40;</span>controller.$modelValue<span class="br0">&#41;</span> <span class="sy0">&lt;=</span> parseInt<span class="br0">&#40;</span>newValue<span class="br0">&#41;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; controller.$setValidity<span class="br0">&#40;</span><span class="st0">'ceilingValidate'</span><span class="sy0">,</span> valid<span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span><span class="sy0">,</span> <span class="kw2">true</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="co1">// when a new value comes in, evaluate validity</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; controller.$parsers.<span class="me1">unshift</span><span class="br0">&#40;</span><span class="kw1">function</span> <span class="br0">&#40;</span>value<span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">var</span> valid <span class="sy0">=</span> <span class="br0">&#40;</span>parseInt<span class="br0">&#40;</span>value<span class="br0">&#41;</span> <span class="sy0">&lt;=</span> parseInt<span class="br0">&#40;</span>instanceAttributes.<span class="me1">ceilingValidate</span><span class="br0">&#41;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; controller.$setValidity<span class="br0">&#40;</span><span class="st0">'ceilingValidate'</span><span class="sy0">,</span> valid<span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">return</span> valid <span class="sy0">?</span> value <span class="sy0">:</span> <span class="kw2">undefined</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="co1">// when a value is set from the mode, evaluate validity</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; controller.$formatters.<span class="me1">unshift</span><span class="br0">&#40;</span><span class="kw1">function</span> <span class="br0">&#40;</span>value<span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">if</span> <span class="br0">&#40;</span>instanceAttributes.<span class="me1">ceilingValidate</span> <span class="sy0">!==</span> <span class="kw2">undefined</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">var</span> valid <span class="sy0">=</span> <span class="br0">&#40;</span>parseInt<span class="br0">&#40;</span>value<span class="br0">&#41;</span> <span class="sy0">&lt;=</span> parseInt<span class="br0">&#40;</span>instanceAttributes.<span class="me1">ceilingValidate</span><span class="br0">&#41;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; controller.$setValidity<span class="br0">&#40;</span><span class="st0">'ceilingValidate'</span><span class="sy0">,</span> valid<span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">else</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">return</span> value<span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp; &nbsp; <span class="br0">&#125;</span><span class="sy0">;</span>
<span class="br0">&#125;</span><span class="br0">&#41;</span><span class="sy0">;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">sampleApp.directive('ceilingValidate', function () {
    return {
        // can only be used as an attribute
        restrict: 'A',
        // must also have an ngModel attribute defined
        require: 'ngModel',
        // explicitly create one-way binding to attribute value so we can watch it
        scope: {
            ceilingValidate: "@"
        },
        // and define the logic for the link
        link: function (scope, instanceElement, instanceAttributes, controller) {
            // per http://www.benlesh.com/2012/12/angular-js-custom-validation-via.html
            // let's add a parser (html input -&gt; model) and a formatter (model -&gt; html input)

            // when the value in the ceiling changes, re-evaluate validity
            scope.$watch('ceilingValidate', function (newValue, oldValue) {
                if (newValue !== undefined) {
                    var valid = (parseInt(controller.$modelValue) &lt;= parseInt(newValue));
                    controller.$setValidity('ceilingValidate', valid);
                }
            }, true);

            // when a new value comes in, evaluate validity
            controller.$parsers.unshift(function (value) {
                var valid = (parseInt(value) &lt;= parseInt(instanceAttributes.ceilingValidate));
                controller.$setValidity('ceilingValidate', valid);
                return valid ? value : undefined;
            });

            // when a value is set from the mode, evaluate validity
            controller.$formatters.unshift(function (value) {
                if (instanceAttributes.ceilingValidate !== undefined) {
                    var valid = (parseInt(value) &lt;= parseInt(instanceAttributes.ceilingValidate));
                    controller.$setValidity('ceilingValidate', valid);
                }
                else {
                        
                }
                return value;
            });

        }
    };
});</pre></div></div>

<p>The comments tell the story. I&#8217;ve limited this directive to be used as an attribute and only on an element that has an ng-model defined. The value of the ceiling-validate attribute will be available in the local scope as a read-only attribute. The linking function initializes the behavior for the element, adding validity checks to the $parsers and $formatters pipelines.</p>
<p>When I enter a ceiling and then an integer, the integer is validated against that ceiling. When I modify the ceiling value, the integer value is re-validated against that new ceiling value.</p>
<h2>Simple Knockout Validation</h2>
<p>Knockout does not have validation cooked in the way Angular does, but the <a href="https://github.com/Knockout-Contrib/Knockout-Validation">Knockout Validation</a> project on github provides a comparable set of features (and it was the first google search result for &#8216;knockout validation&#8217;). The library provides two options for defining validation, either as &#8220;extends&#8221; calls directly in on the observable properties on models/viewmodels or as HTML5 attributes.</p>
<h3>Knockout Simple Validation Example</h3>
<p>Full source available at <a href="https://github.com/tarwn/AngularJS-vs-Knockout/blob/master/Knockout/SimpleValidation.html" title="View full example file on github">Knockout/SimpleValidation.html</a>.</p>
<p>To compare with the Angular method, I&#8217;ll be configuring the validation library to work like the method above. I&#8217;ll be using HTML5 attributes to define the validation and include the same text and integer values for sample fields.</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="html4strict"><thead><tr><td colspan="2"  class="head">HTML</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
</pre></td><td class="de1"><pre class="de1"><span class="sc0">&lt;!DOCTYPE html&gt;</span>
<span class="sc2">&lt;<span class="kw2">html</span>&gt;</span>
<span class="sc2">&lt;<span class="kw2">head</span>&gt;</span>
&nbsp; &nbsp; <span class="sc-1">&lt;!-- ... --&gt;</span>
&nbsp; &nbsp; <span class="sc2">&lt;<span class="kw2">script</span> <span class="kw3">type</span><span class="sy0">=</span><span class="st0">&quot;text/javascript&quot;</span> <span class="kw3">src</span><span class="sy0">=</span><span class="st0">&quot;js/lib/knockout-2.3.0.min.js&quot;</span>&gt;&lt;<span class="sy0">/</span><span class="kw2">script</span>&gt;</span>
&nbsp; &nbsp; <span class="sc2">&lt;<span class="kw2">script</span> <span class="kw3">type</span><span class="sy0">=</span><span class="st0">&quot;text/javascript&quot;</span> <span class="kw3">src</span><span class="sy0">=</span><span class="st0">&quot;js/lib/knockout.validation.min.js&quot;</span>&gt;&lt;<span class="sy0">/</span><span class="kw2">script</span>&gt;</span>
&nbsp; &nbsp; <span class="sc-1">&lt;!-- ... css classes and such ... --&gt;</span>
<span class="sc2">&lt;<span class="sy0">/</span><span class="kw2">head</span>&gt;</span>
<span class="sc2">&lt;<span class="kw2">body</span>&gt;</span>
<span class="sc2">&lt;<span class="kw2">div</span>&gt;</span>
&nbsp; &nbsp; <span class="sc2">&lt;<span class="kw2">form</span> novalidate data-bind<span class="sy0">=</span><span class="st0">&quot;css: { invalid: isValid() == false }&quot;</span>&gt;</span>
&nbsp; &nbsp; &nbsp; &nbsp; Required Text: <span class="sc2">&lt;<span class="kw2">input</span> <span class="kw3">type</span><span class="sy0">=</span><span class="st0">&quot;text&quot;</span> data-bind<span class="sy0">=</span><span class="st0">&quot;value: textValue&quot;</span> required <span class="sy0">/</span>&gt;&lt;<span class="kw2">br</span> <span class="sy0">/</span>&gt;</span>
&nbsp; &nbsp; &nbsp; &nbsp; Required Int: <span class="sc2">&lt;<span class="kw2">input</span> <span class="kw3">type</span><span class="sy0">=</span><span class="st0">&quot;number&quot;</span> data-bind<span class="sy0">=</span><span class="st0">&quot;value: integerValue&quot;</span> min<span class="sy0">=</span><span class="st0">&quot;0&quot;</span> max<span class="sy0">=</span><span class="st0">&quot;5&quot;</span> pattern<span class="sy0">=</span><span class="st0">&quot;^-?d+$&quot;</span> required <span class="sy0">/</span>&gt;&lt;<span class="kw2">br</span> <span class="sy0">/</span>&gt;</span>
&nbsp; &nbsp; &nbsp; &nbsp; Required Int + 5: <span class="sc2">&lt;<span class="kw2">span</span> data-bind<span class="sy0">=</span><span class="st0">&quot;text: calculatedInteger&quot;</span>&gt;&lt;<span class="sy0">/</span><span class="kw2">span</span>&gt;&lt;<span class="kw2">br</span> <span class="sy0">/</span>&gt;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="sc2">&lt;<span class="kw2">input</span> <span class="kw3">type</span><span class="sy0">=</span><span class="st0">&quot;submit&quot;</span> <span class="kw3">value</span><span class="sy0">=</span><span class="st0">&quot;Save&quot;</span> <span class="sy0">/</span>&gt;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="sc-1">&lt;!-- ... --&gt;</span>
&nbsp; &nbsp; <span class="sc2">&lt;<span class="sy0">/</span><span class="kw2">form</span>&gt;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">&lt;!DOCTYPE html&gt;
&lt;html&gt;
&lt;head&gt;
    &lt;!-- ... --&gt;
    &lt;script type="text/javascript" src="js/lib/knockout-2.3.0.min.js"&gt;&lt;/script&gt;
    &lt;script type="text/javascript" src="js/lib/knockout.validation.min.js"&gt;&lt;/script&gt;
    &lt;!-- ... css classes and such ... --&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;div&gt;
    &lt;form novalidate data-bind="css: { invalid: isValid() == false }"&gt;
        Required Text: &lt;input type="text" data-bind="value: textValue" required /&gt;&lt;br /&gt;
        Required Int: &lt;input type="number" data-bind="value: integerValue" min="0" max="5" pattern="^-?d+$" required /&gt;&lt;br /&gt;
        Required Int + 5: &lt;span data-bind="text: calculatedInteger"&gt;&lt;/span&gt;&lt;br /&gt;
        &lt;input type="submit" value="Save" /&gt;
        &lt;!-- ... --&gt;
    &lt;/form&gt;</pre></div></div>

<p>Using this extra library added an additional 19KB of minified JS to the 42KB we already have for knockout, which still comes in under the 80KB for Angular, but does not include a DOM manipulation library yet either (like <a href="http://zeptojs.com/">zepto</a> or <a href="http://jquery.com/">jQuery</a>). With the exception of updating after the full value is updated vs on on key down, this knockout version works just like the AngularJS example at the top.</p>
<p>Like the AngularJS version, I included a pre section to output validation states:</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="html4strict"><thead><tr><td colspan="2"  class="head">HTML</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
</pre></td><td class="de1"><pre class="de1"><span class="sc2">&lt;<span class="kw2">pre</span>&gt;</span>
textValue:
&nbsp; &nbsp; value=&quot;<span class="sc2">&lt;<span class="kw2">span</span> data-bind<span class="sy0">=</span><span class="st0">&quot;text: textValue&quot;</span>&gt;&lt;<span class="sy0">/</span><span class="kw2">span</span>&gt;</span>&quot; &nbsp; &nbsp;
&nbsp; &nbsp; valid=<span class="sc2">&lt;<span class="kw2">span</span> data-bind<span class="sy0">=</span><span class="st0">&quot;text: textValue.__valid__&quot;</span>&gt;&lt;<span class="sy0">/</span><span class="kw2">span</span>&gt;</span>
&nbsp; &nbsp; error=<span class="sc2">&lt;<span class="kw2">span</span> data-bind<span class="sy0">=</span><span class="st0">&quot;validationMessage: textValue&quot;</span>&gt;&lt;<span class="sy0">/</span><span class="kw2">span</span>&gt;</span>
&nbsp; &nbsp; or=<span class="sc2">&lt;<span class="kw2">span</span> data-bind<span class="sy0">=</span><span class="st0">&quot;text: textValue.error&quot;</span>&gt;&lt;<span class="sy0">/</span><span class="kw2">span</span>&gt;</span>
&nbsp;
integerValue: 
&nbsp; &nbsp; value=&quot;<span class="sc2">&lt;<span class="kw2">span</span> data-bind<span class="sy0">=</span><span class="st0">&quot;text: integerValue&quot;</span>&gt;&lt;<span class="sy0">/</span><span class="kw2">span</span>&gt;</span>&quot;
&nbsp; &nbsp; valid=<span class="sc2">&lt;<span class="kw2">span</span> data-bind<span class="sy0">=</span><span class="st0">&quot;text: integerValue.__valid__&quot;</span>&gt;&lt;<span class="sy0">/</span><span class="kw2">span</span>&gt;</span>
&nbsp; &nbsp; error=<span class="sc2">&lt;<span class="kw2">span</span> data-bind<span class="sy0">=</span><span class="st0">&quot;validationMessage: integerValue&quot;</span>&gt;&lt;<span class="sy0">/</span><span class="kw2">span</span>&gt;</span>
&nbsp;
appForm: 
&nbsp; &nbsp; valid=&quot;<span class="sc2">&lt;<span class="kw2">span</span> data-bind<span class="sy0">=</span><span class="st0">&quot;text: isValid()&quot;</span>&gt;&lt;<span class="sy0">/</span><span class="kw2">span</span>&gt;</span>&quot;
&nbsp; &nbsp; error= <span class="sc2">&lt;<span class="kw2">i</span>&gt;</span>no collection at form level<span class="sc2">&lt;<span class="sy0">/</span><span class="kw2">i</span>&gt;</span>
<span class="sc2">&lt;<span class="sy0">/</span><span class="kw2">pre</span>&gt;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">&lt;pre&gt;
textValue:
    value="&lt;span data-bind="text: textValue"&gt;&lt;/span&gt;"    
    valid=&lt;span data-bind="text: textValue.__valid__"&gt;&lt;/span&gt;
    error=&lt;span data-bind="validationMessage: textValue"&gt;&lt;/span&gt;
    or=&lt;span data-bind="text: textValue.error"&gt;&lt;/span&gt;

integerValue: 
    value="&lt;span data-bind="text: integerValue"&gt;&lt;/span&gt;"
    valid=&lt;span data-bind="text: integerValue.__valid__"&gt;&lt;/span&gt;
    error=&lt;span data-bind="validationMessage: integerValue"&gt;&lt;/span&gt;

appForm: 
    valid="&lt;span data-bind="text: isValid()"&gt;&lt;/span&gt;"
    error= &lt;i&gt;no collection at form level&lt;/i&gt;
&lt;/pre&gt;</pre></div></div>

<p>Rather than attach the validation state to the form elements, the knockout validation library attaches them as properties on the observable that is being validated, then provides a binding you can use to get a friendly message.</p>
<p>Using the <a href="https://github.com/Knockout-Contrib/Knockout-Validation/wiki/Configuration" title="Configurations for knockout validation">configurations</a>, I have made this work pretty closely to AngularJS above. There are additional configurations that include outputting error message elements, fine tuning the CSS classes, and even provide the name of a template to use for rendering error messages. </p>
<h2>Custom Knockout Validation</h2>
<p>Like the AngularJS example, I want to explore outside of the box I was provided and define my own validation. </p>
<p>The knockout-validation library includes the ability to define custom validation methods, though I don&#8217;t see an easy way to use the HTML attributes for custom rules. Like the custom validation example above, I am going to define a ceiling validation call that uses another observable. It will not only need to validate when I change the target input but also re-validate the target input when I change the ceiling input.</p>
<h3>Knockout Custom Validation Example</h3>
<p>Full source available at <a href="https://github.com/tarwn/AngularJS-vs-Knockout/blob/master/Knockout /ComplexValidation.html" title="View full example file on github">Knockout /ComplexValidation.html</a>.</p>
<p>Nothing changes for the HTML:</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="html4strict"><thead><tr><td colspan="2"  class="head">HTML</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
</pre></td><td class="de1"><pre class="de1"><span class="sc-1">&lt;!-- ... --&gt;</span>
Ceiling Input: <span class="sc2">&lt;<span class="kw2">input</span> <span class="kw3">type</span><span class="sy0">=</span><span class="st0">&quot;number&quot;</span> data-bind<span class="sy0">=</span><span class="st0">&quot;value: ceilingValue&quot;</span> required <span class="sy0">/</span>&gt;&lt;<span class="kw2">br</span> <span class="sy0">/</span>&gt;</span>
Integer Input: <span class="sc2">&lt;<span class="kw2">input</span> <span class="kw3">type</span><span class="sy0">=</span><span class="st0">&quot;number&quot;</span> data-bind<span class="sy0">=</span><span class="st0">&quot;value: integerValue&quot;</span> pattern<span class="sy0">=</span><span class="st0">&quot;^-?d+$&quot;</span> required <span class="sy0">/</span>&gt;&lt;<span class="kw2">br</span> <span class="sy0">/</span>&gt;</span>
<span class="sc-1">&lt;!-- ... --&gt;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">&lt;!-- ... --&gt;
Ceiling Input: &lt;input type="number" data-bind="value: ceilingValue" required /&gt;&lt;br /&gt;
Integer Input: &lt;input type="number" data-bind="value: integerValue" pattern="^-?d+$" required /&gt;&lt;br /&gt;
&lt;!-- ... --&gt;</pre></div></div>

<p>As I&#8217;ll be applying this custom rule via an extend call on the viewmodel:</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="javascript"><thead><tr><td colspan="2"  class="head">Javascript</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
</pre></td><td class="de1"><pre class="de1"><span class="kw1">var</span> ComplexValidationModel <span class="sy0">=</span> <span class="kw1">function</span> <span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; <span class="kw1">this</span>.<span class="me1">ceilingValue</span> <span class="sy0">=</span> ko.<span class="me1">observable</span><span class="br0">&#40;</span><span class="nu0">10</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; <span class="kw1">this</span>.<span class="me1">integerValue</span> <span class="sy0">=</span> ko.<span class="me1">observable</span><span class="br0">&#40;</span><span class="nu0">0</span><span class="br0">&#41;</span>.<span class="me1">extend</span><span class="br0">&#40;</span><span class="br0">&#123;</span> ceiling<span class="sy0">:</span> <span class="kw1">this</span>.<span class="me1">ceilingValue</span> <span class="br0">&#125;</span><span class="br0">&#41;</span><span class="sy0">;</span>
<span class="br0">&#125;</span><span class="sy0">;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">var ComplexValidationModel = function () {
    this.ceilingValue = ko.observable(10);
    this.integerValue = ko.observable(0).extend({ ceiling: this.ceilingValue });
};</pre></div></div>

<p>Defining this new validation rule is fairly straightforward:</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="javascript"><thead><tr><td colspan="2"  class="head">Javascript</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
</pre></td><td class="de1"><pre class="de1"><span class="co1">// add the custom validation rule</span>
ko.<span class="me1">validation</span>.<span class="me1">rules</span><span class="br0">&#91;</span><span class="st0">'ceiling'</span><span class="br0">&#93;</span> <span class="sy0">=</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; validator<span class="sy0">:</span> <span class="kw1">function</span> <span class="br0">&#40;</span>val<span class="sy0">,</span> otherVal<span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">var</span> actualOther <span class="sy0">=</span> parseInt<span class="br0">&#40;</span>ko.<span class="me1">isObservable</span><span class="br0">&#40;</span>otherVal<span class="br0">&#41;</span> <span class="sy0">?</span> otherVal<span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="sy0">:</span> otherVal<span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">if</span> <span class="br0">&#40;</span>isNaN<span class="br0">&#40;</span>actualOther<span class="br0">&#41;</span><span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">return</span> <span class="kw2">true</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">else</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">return</span> parseInt<span class="br0">&#40;</span>val<span class="br0">&#41;</span> <span class="sy0">&lt;=</span> actualOther<span class="sy0">;</span>
&nbsp; &nbsp; <span class="br0">&#125;</span><span class="sy0">,</span>
&nbsp; &nbsp; message<span class="sy0">:</span> <span class="st0">'The field must be less than or equal to {0}'</span>
<span class="br0">&#125;</span><span class="sy0">;</span>
ko.<span class="me1">validation</span>.<span class="me1">registerExtenders</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">// add the custom validation rule
ko.validation.rules['ceiling'] = {
    validator: function (val, otherVal) {
        var actualOther = parseInt(ko.isObservable(otherVal) ? otherVal() : otherVal);
        if (isNaN(actualOther))
            return true;
        else
            return parseInt(val) &lt;= actualOther;
    },
    message: 'The field must be less than or equal to {0}'
};
ko.validation.registerExtenders();</pre></div></div>

<p>And everything works exactly as you would expect, since it is just an additional rule on the existing library.</p>
<h3>Knockout Completely Custom Validation Example</h3>
<p>Full source available at <a href="https://github.com/tarwn/AngularJS-vs-Knockout/blob/master/Knockout /ComplexValidation2.html" title="View full example file on github">Knockout /ComplexValidation2.html</a>.</p>
<p>On the other extreme, we can also create a validation library from scratch using knockout extensions. I only offer this example because there is an interesting parallel to wiring into the $formatters and $parsers pipelines from AngularJS and because the custom AngularJS example got to dive into Directives, but the Knockout example hasn&#8217;t really dived into extensions yet.</p>
<p>Warning: Don&#8217;t use this in production. It&#8217;s a one off piece of example code that has had only limited testing.</p>
<p>I&#8217;ve moved everything to extends calls, so here is the updated viewmodel:</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="javascript"><thead><tr><td colspan="2"  class="head">Javascript</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
</pre></td><td class="de1"><pre class="de1"><span class="kw1">var</span> ComplexValidationModel <span class="sy0">=</span> <span class="kw1">function</span> <span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; <span class="kw1">var</span> rawCeilingValue <span class="sy0">=</span> ko.<span class="me1">observable</span><span class="br0">&#40;</span><span class="nu0">10</span><span class="br0">&#41;</span><span class="sy0">,</span>
&nbsp; &nbsp; &nbsp; &nbsp; rawIntegerValue <span class="sy0">=</span> ko.<span class="me1">observable</span><span class="br0">&#40;</span><span class="nu0">0</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; <span class="kw1">this</span>.<span class="me1">ceilingValue</span> <span class="sy0">=</span> rawCeilingValue.<span class="me1">extend</span><span class="br0">&#40;</span><span class="br0">&#123;</span> validate<span class="sy0">:</span> <span class="br0">&#123;</span> required<span class="sy0">:</span> <span class="kw2">true</span><span class="sy0">,</span> isNumber<span class="sy0">:</span> <span class="kw2">true</span><span class="br0">&#125;</span> <span class="br0">&#125;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; <span class="kw1">this</span>.<span class="me1">integerValue</span> <span class="sy0">=</span> rawIntegerValue.<span class="me1">extend</span><span class="br0">&#40;</span><span class="br0">&#123;</span> validate<span class="sy0">:</span> <span class="br0">&#123;</span> required<span class="sy0">:</span> <span class="kw2">true</span><span class="sy0">,</span> isNumber<span class="sy0">:</span> <span class="kw2">true</span><span class="sy0">,</span> max<span class="sy0">:</span> rawCeilingValue <span class="br0">&#125;</span> <span class="br0">&#125;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; <span class="kw1">this</span>.<span class="me1">isValid</span> <span class="sy0">=</span> ko.<span class="me1">computed</span><span class="br0">&#40;</span><span class="kw1">function</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">return</span> <span class="kw1">this</span>.<span class="me1">ceilingValue</span>.<span class="me1">isValid</span><span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="sy0">&amp;&amp;</span> <span class="kw1">this</span>.<span class="me1">integerValue</span>.<span class="me1">isValid</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; <span class="br0">&#125;</span><span class="sy0">,</span> <span class="kw1">this</span><span class="br0">&#41;</span><span class="sy0">;</span>
<span class="br0">&#125;</span><span class="sy0">;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">var ComplexValidationModel = function () {
    var rawCeilingValue = ko.observable(10),
        rawIntegerValue = ko.observable(0);

    this.ceilingValue = rawCeilingValue.extend({ validate: { required: true, isNumber: true} });
    this.integerValue = rawIntegerValue.extend({ validate: { required: true, isNumber: true, max: rawCeilingValue } });
	this.isValid = ko.computed(function(){
		return this.ceilingValue.isValid() &amp;&amp; this.integerValue.isValid();
	}, this);
};</pre></div></div>

<p>I only implemented the required, isNumber, and max/ceiling rules, but the pattern and min wouldn&#8217;t be too hard to add.</p>
<p>The core of this logic is the addition of a <code class="codespan">validate</code> extension. The extension wraps around the observable, replacing the read and write pipelines with it&#8217;s own:</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="javascript"><thead><tr><td colspan="2"  class="head">Javascript</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
</pre></td><td class="de1"><pre class="de1">ko.<span class="me1">extenders</span>.<span class="me1">validate</span> <span class="sy0">=</span> <span class="kw1">function</span> <span class="br0">&#40;</span>target<span class="sy0">,</span> options<span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp;
&nbsp; &nbsp; <span class="co1">// ... logic for validation methods + validate call ...</span>
&nbsp;
&nbsp; &nbsp; <span class="kw1">var</span> _rawValue <span class="sy0">=</span> ko.<span class="me1">observable</span><span class="br0">&#40;</span>target<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; <span class="kw1">var</span> result <span class="sy0">=</span> ko.<span class="me1">computed</span><span class="br0">&#40;</span><span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; read<span class="sy0">:</span> _rawValue<span class="sy0">,</span>
&nbsp; &nbsp; &nbsp; &nbsp; write<span class="sy0">:</span> <span class="kw1">function</span> <span class="br0">&#40;</span>newValue<span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; _rawValue<span class="br0">&#40;</span>newValue<span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="co1">// determine validity, updating state of isValid and error properties</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">var</span> validationResult <span class="sy0">=</span> validate<span class="br0">&#40;</span>newValue<span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">if</span> <span class="br0">&#40;</span>validationResult.<span class="me1">isValid</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; result.<span class="me1">isValid</span><span class="br0">&#40;</span>validationResult.<span class="me1">isValid</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; result.<span class="me1">error</span><span class="br0">&#40;</span><span class="st0">&quot;&quot;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="co1">// only pass the write through to raw observable if valid</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; target<span class="br0">&#40;</span>newValue<span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">else</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; result.<span class="me1">isValid</span><span class="br0">&#40;</span>validationResult.<span class="me1">isValid</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; result.<span class="me1">error</span><span class="br0">&#40;</span>validationResult.<span class="me1">check</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp; &nbsp; <span class="br0">&#125;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; result.<span class="me1">isValid</span> <span class="sy0">=</span> ko.<span class="me1">observable</span><span class="br0">&#40;</span><span class="kw2">true</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; result.<span class="me1">error</span> <span class="sy0">=</span> ko.<span class="me1">observable</span><span class="br0">&#40;</span><span class="st0">&quot;&quot;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; result._watchDependentCheckArgs <span class="sy0">=</span> ko.<span class="me1">computed</span><span class="br0">&#40;</span><span class="kw1">function</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="co1">// ... hacky little method to watch changes on observable arguments ..</span>
&nbsp; &nbsp; <span class="br0">&#125;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; <span class="co1">// write initial value so we can get initial validity</span>
&nbsp; &nbsp; result<span class="br0">&#40;</span>target<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; <span class="kw1">return</span> result<span class="sy0">;</span>
<span class="br0">&#125;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">ko.extenders.validate = function (target, options) {

    // ... logic for validation methods + validate call ...

    var _rawValue = ko.observable(target());
    var result = ko.computed({
        read: _rawValue,
        write: function (newValue) {
            _rawValue(newValue);

            // determine validity, updating state of isValid and error properties
            var validationResult = validate(newValue);
            if (validationResult.isValid) {
                result.isValid(validationResult.isValid);
                result.error("");
                // only pass the write through to raw observable if valid
                target(newValue);
            }
            else {
                result.isValid(validationResult.isValid);
                result.error(validationResult.check);
            }
        }
    });
    result.isValid = ko.observable(true);
    result.error = ko.observable("");

    result._watchDependentCheckArgs = ko.computed(function(){
        // ... hacky little method to watch changes on observable arguments ..
    });

    // write initial value so we can get initial validity
    result(target());
    return result;
}</pre></div></div>

<p>The full code is available via the github link above.</p>
<h2>Some Differences</h2>
<p>So where are the differences here?</p>
<p><b>Extra Library for Knockout</b></p>
<p>The first, and most obvious, difference is that AngularJS&#8217;s validation is built-in and I had to go with an additional package for Knockout. From reading other comparisons, composing together a matching set of packages around Knockout is supposed to be tough, and I went into this thinking it would be. I&#8217;m pleasantly surprised by how easy it was to match Angular&#8217;s validation capabilities in Knockout with the addition of a single library. </p>
<p>There is still an additional trade-off, though. Where we still have a single package with AngularJS, we now have two with Knockout. That&#8217;s two packages we have to keep a watch out for security updates on, two separate projects with separate groups of people submitting changes and maintaining them. So there is some extra, non-technical overhead here.</p>
<p><b>Validation Style</b></p>
<p>Both examples offered the capability to use HTML attributes to drive validation. When I needed custom validation logic, AngularJS&#8217;s was slightly more complex to write, but was an additional attribute I added to the element. With the Knockout validation example, it was an extension that was added in the viewmodel. Though now that I think of it, I probably could have gone the custom binding route as well, but I would not have been tied into the validation library then.</p>
<p>The library used with Knockout also offers defining your rules in the viewmodel, whereas Angular doesn&#8217;t have this option out of the box.</p>
<p><b>Configurability</b></p>
<p>The Knockout-validation library wins here hands down. It has a much higher level of configurability, allowing you to change out not just classes for the inputs, but automatically produce error elements, bind templates to each error message, use 9or not) HTML5 validation attributes, and so on. AngularJS mostly focuses on delivering one method of validation (attributes and CSS classes).</p>
<p><b>Validation State</b></p>
<p>AngularJS tracks the validation state at the form level, indicating which validation rules are in error and doing so in a way that we could programmatically write more logic off of that state. If only it also told you which inputs or models were in error. Here is an example of the error state from the form when I have errors on two text boxes: <code class="codespan"> error={"required":[{}],"ceilingValidate":[{}],"number":[{}]}</code></p>
<p>Knockout-validation does not expose this type of information.</p>
<h2>Final Thoughts</h2>
<p>Knockout-validation and Angular both require less work than rolling your own. Angular seems to have a fixed method of operating while Knockout-validation has a higher level of configuration and is easier to add additional validation methods to.</p>
<p>I personally have issues with both methods. I don&#8217;t like that an invalid entry causes changes to propagate (whether bad values or <i>undefined</i>) into the rest of the model. I also don&#8217;t like the use of HTML directives for defining requirements, it ties the view more intimately to the model in Angular&#8217;s case (which is common for the MVC pattern) and loses some of the MVVM separation I would expect for knockout. </p>
<p>My preference in both cases would be to define these at the model or viewmodel level (which knockout-validation supports) so that my viewmodel has validation requirements and a valid or invalid state and the view (HTML) only reflects this state. I would then have the choice of testing directly against raw inputs and outputs, including putting in bad values and checking formatting, or testing against the core model properties and bypassing formatting and such.</p>
<div style="background-color: #DDDDDD; padding: 8px; width: 400px;">
<h3>Knockout vs AngularJS</h3>
<ul style="margin: 0px; padding: 4px;">
<li><a href="/index.php/WebDev/UIDevelopment/angularjs-vs-knockout-introduction-1">Introductory Post</a></li>
<li><a href="/index.php/WebDev/UIDevelopment/angularjs-vs-knockout-data-binding-2">Data Binding</a></li>
<li><b>Validation</b></li>
<li><a href="/index.php/WebDev/UIDevelopment/angularjs-vs-knockout-serialization-4">Serialization</a></li>
<li><a href="/index.php/WebDev/UIDevelopment/angularjs-vs-knockout-templating-5">Templating</a></li>
<li><a href="/index.php/WebDev/UIDevelopment/angularjs-vs-knockout-modules-and-di-6">Modules + Dependency Injection</a></li>
<li><a href="/index.php/WebDev/UIDevelopment/angularjs-vs-knockout-automated-testing-7">Automated Testing</a></li>
<li><a href="/index.php/WebDev/UIDevelopment/AJAX/angularjs-vs-knockout-spa-routing-history-8">SPA Routing/History</a></li>
<li><a href="/index.php/WebDev/UIDevelopment/angularjs-vs-knockout-final-thoughts-9">Final, Final Thoughts</a></li>
</ul>
</div>
]]></content:encoded>
			<wfw:commentRss>/index.php/webdev/uidevelopment/angularjs-vs-knockout-validation-3/feed/</wfw:commentRss>
		<slash:comments>3</slash:comments>
		</item>
	</channel>
</rss>
