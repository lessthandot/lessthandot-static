<?xml version="1.0" encoding="UTF-8"?><rss version="2.0"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:atom="http://www.w3.org/2005/Atom"
	xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
	xmlns:slash="http://purl.org/rss/1.0/modules/slash/"
	>

<channel>
	<title>sql &#8211; LessthanDot</title>
	<atom:link href="/index.php/tag/sql/feed/" rel="self" type="application/rss+xml" />
	<link>/</link>
	<description>A Technical Community for IT Professionals</description>
	<lastBuildDate>Sat, 09 Mar 2019 12:50:36 +0000</lastBuildDate>
	<language>en-US</language>
	<sy:updatePeriod>hourly</sy:updatePeriod>
	<sy:updateFrequency>1</sy:updateFrequency>
	<generator>https://wordpress.org/?v=4.6.1</generator>
	<item>
		<title>SQL is Hard (still): Reviving a stale application</title>
		<link>/index.php/datamgmt/dbprogramming/sql-is-hard-still-reviving-a-stale-application/</link>
		<comments>/index.php/datamgmt/dbprogramming/sql-is-hard-still-reviving-a-stale-application/#comments</comments>
		<pubDate>Tue, 06 Feb 2018 13:20:09 +0000</pubDate>
		<dc:creator><![CDATA[Eli Weinstock-Herman (tarwn)]]></dc:creator>
				<category><![CDATA[Database Programming]]></category>
		<category><![CDATA[azure]]></category>
		<category><![CDATA[sql]]></category>

		<guid isPermaLink="false">/?p=8853</guid>
		<description><![CDATA[Several years ago, I launched SQLisHard to help folks learn SQL. Some folks learn well from books or videos, but others learn best by getting in there and running queries. I monitored and tweaked things for about a year, trying to get the first set of exercises smoothed out. Then, like many folks, I was [&#8230;]]]></description>
				<content:encoded><![CDATA[<p>Several years ago, I <a href="/index.php/datamgmt/dbprogramming/sql-is-hard/" title="SQL is Hard launch post">launched SQLisHard</a> to help folks learn SQL. Some folks learn well from books or videos, but others learn best by getting in there and running queries. I monitored and tweaked things for about a year, trying to get the first set of exercises smoothed out. Then, like many folks, I was sidetracked by other projects and work responsibilities.</p>
<p><center></p>
<div class="wp-caption aligncenter" style="display: inline-block;">
<a href="http://www.sqlishard.com/" title="Visit SQL is Hard"><img src="http://www.sqlishard.com/Content/Screenshot.png" alt="SQL is Hard screenshot" /></a></p>
<div class="wp-caption-text">SQL is Hard website: Learning SQL through hands one exercises</div>
</div>
<p></center></p>
<p>For about $10/month, this little site has kept running and helping folks. I expected to see traffic die off, since I wasn&#8217;t adding more content. Instead, there&#8217;s been nearly 7000 folks that have stopped by and successfully completed one or more exercises despite a total lack of marketing.</p>
<p>The hosting is oversized for what it is, most of the technology is not what I would pick today for options, but it just keeps ticking. So I&#8217;m dusting off the build pipeline, rebuilding some data analytics so I can see what&#8217;s going on, and started fashioning a new set of exercises.</p>
<p>Here&#8217;s how I went about reviving the application.</p>
<h2>Delivering Change: The Build Pipeline</h2>
<p>One of the things that made it easy to tinker with SQLisHard is the build pipeline for delivering updates. Most of the scripts live in the repo, but I hadn&#8217;t bothered to document it. Luckily, I had an old backup of the original build server VM and was able to recreate the build process on a much newer one.</p>
<p>Why did I bother?</p>
<p>A build pipeline makes delivering changes consistent. This application has 2 separate databases, runs user-entered queries against a real database, and has to provide accurate feedback every time (or risk hurting someone&#8217;s progression). A pipeline provides both safety and speed. I was experimenting with several different things at the time, so I have rudimentary testing covering all types of situations. By the time the changes roll out to the website and apply changes to 2 separate SQL Server instances, that one button push has run:</p>
<ul>
<li>Clean nuget + npm installation to ensure consistency</li>
<li>MS Build to make sure they work</li>
<li>Some unit tests to make sure the code is happy</li>
<li>Applied SQL changes to two beta databases to verify updates work and complete quickly</li>
<li>Asset minification for faster site loading</li>
<li>Deployed the site to a beta web server</li>
<li>Run 13 quick UI tests via Chrome Headless to make sure everything plays together</li>
</ul>
<p>It was a little painful to bring back to life, but infinitely safer then applying changes manually. It&#8217;s past time for every company to run a pipeline, and I&#8217;m more than happy to dive into more details or other build services if folks are interested.</p>
<h2>Visibility into usage</h2>
<p>The 2013 version of SQL is Hard tracked statistics on how many folks were successful or unsuccessful at each step along the way.</p>
<blockquote class="twitter-tweet" data-lang="en"><p lang="en" dir="ltr">On the SQLisHard front, it looks like exercises 1.0, 1.2 and 4.0 need refinement, they have the highest error rates <a href="http://t.co/Hv5OfOL10L">pic.twitter.com/Hv5OfOL10L</a></p>
<p>&mdash; Eli Weinstock-Herman (@Tarwn) <a href="https://twitter.com/Tarwn/status/345526863428472835?ref_src=twsrc%5Etfw">June 14, 2013</a></p></blockquote>
<p><script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script></p>
<p>Visibility into the flow from step to step helped me make adjustments and help folks make it all the way through the exercises. This site used a bunch of experimental things, so the data originally lived in a beta Splunk Cloud offering that was discontinued years ago (and replaced by a cloud offering that did not have an API&#8230;). Unfortunately, this activity is not tracked well in the database either.</p>
<p>Azure Insights has come a long way, so I decided to switch to that and not get distracted by rewriting the database back-end. With a few lines of JavaScript, I now have live events flowing into pretty charts again:</p>
<div id="attachment_8855" style="width: 810px" class="wp-caption aligncenter"><img src="/wp-content/uploads/2017/12/SQLisHard_AzureInsights.png" alt="SQL is Hard: Azure Insights" width="800" height="341" class="size-full wp-image-8855" srcset="/wp-content/uploads/2017/12/SQLisHard_AzureInsights.png 800w, /wp-content/uploads/2017/12/SQLisHard_AzureInsights-300x128.png 300w, /wp-content/uploads/2017/12/SQLisHard_AzureInsights-768x327.png 768w" sizes="(max-width: 800px) 100vw, 800px" /><p class="wp-caption-text">SQL is Hard: Azure Insights</p></div>
<p>Every query someone tries in SQLisHard is executed against a sample database and returned to the front-end. Once the front-end receives the result, I send an event to Insights to report the Exercise Id and Status:</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="javascript"><thead><tr><td colspan="2"  class="head">Javascript</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
</pre></td><td class="de1"><pre class="de1">dataService.<span class="me1">exercises</span>.<span class="me1">executeQuery</span><span class="br0">&#40;</span>currentQuery.<span class="me1">toStatementDTO</span><span class="br0">&#40;</span>limitResults<span class="br0">&#41;</span><span class="sy0">,</span> <span class="kw1">function</span> <span class="br0">&#40;</span>data<span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; 
&nbsp; &nbsp; <span class="co1">// ... receive query results, extract completion status, and display ...</span>
&nbsp;
&nbsp; &nbsp; trackEvent<span class="br0">&#40;</span><span class="st0">'executeQuery'</span><span class="sy0">,</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; exerciseSet<span class="sy0">:</span> exercises<span class="br0">&#40;</span><span class="br0">&#41;</span>.<span class="me1">id</span><span class="sy0">,</span>
&nbsp; &nbsp; &nbsp; &nbsp; exercise<span class="sy0">:</span> exercises<span class="br0">&#40;</span><span class="br0">&#41;</span>.<span class="me1">currentExercise</span><span class="br0">&#40;</span><span class="br0">&#41;</span>.<span class="me1">id</span><span class="sy0">,</span>
&nbsp; &nbsp; &nbsp; &nbsp; completedSuccessfully<span class="sy0">:</span> exerciseCompleted
&nbsp; &nbsp; <span class="br0">&#125;</span><span class="br0">&#41;</span><span class="sy0">;</span>
<span class="br0">&#125;</span><span class="br0">&#41;</span><span class="sy0">;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">dataService.exercises.executeQuery(currentQuery.toStatementDTO(limitResults), function (data) {
    
    // ... receive query results, extract completion status, and display ...

    trackEvent('executeQuery', {
        exerciseSet: exercises().id,
        exercise: exercises().currentExercise().id,
        completedSuccessfully: exerciseCompleted
    });
});</pre></div></div>

<p>I query the data in Application Insights (https://azure.microsoft.com/en-us/services/application-insights/) to count the number of success/non-success calls have occurred for each exercise:</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="text"><thead><tr><td colspan="2"  class="head">Text</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
</pre></td><td class="de1"><pre class="de1">customEvents
| where timestamp &gt; now(-7d) 
| project exercise = tostring(customDimensions.exercise), success = tostring(customDimensions.completedSuccessfully)
| where notempty(exercise)
| summarize attempts=count() by exercise, success
| order by exercise asc, success desc
| render columnchart</pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">customEvents
| where timestamp &gt; now(-7d) 
| project exercise = tostring(customDimensions.exercise), success = tostring(customDimensions.completedSuccessfully)
| where notempty(exercise)
| summarize attempts=count() by exercise, success
| order by exercise asc, success desc
| render columnchart</pre></div></div>

<p>Where this pays off is when I start making new exercises public. Now I&#8217;ll have immediate visibility into how folks are progressing and I can try to improve the exercise descriptions to help as many folks get through as I can.</p>
<h2>New Exercises Coming Soon: Aggregation</h2>
<p>The first exercise set focused on some basic building block SELECT statements. We went through some beginning SELECT * statements, listed columns, and column aliases. We performed WHERE statements with equivalence, LIKE, and BETWEEN. Then we added in JOINs with ON statements.</p>
<p>One of the great things about a relational database is the ability to mine across those related datasets for new information. Aggregation plays a big part here, so I&#8217;ve started building an exercise set that looks like this:</p>
<ul>
<li>COUNT</li>
<li>SUM</li>
<li>GROUP BY one field</li>
<li>GROUP BY multiple fields</li>
<li>MIN/MAX</li>
<li>AVG/STDEV</li>
<li>HAVING</li>
<li>ORDER BY</li>
<li>Aggregation data from INNER JOIN</li>
<li>LEFT JOIN</li>
<li>Then possibly some tricks, like SUM(IF/ELSE/END) statements</li>
</ul>
<p>If this works out, I&#8217;ll have a test link posted on twitter (@sqlishard) and, after a trial period, will roll it out live.</p>
<p>I can&#8217;t promise this will usher in a great deal of additions, it&#8217;s hard to jump in this code base and not immediately start rewriting all the things plus I have a half-dozen other projects I&#8217;d like to be working on too. We&#8217;ll see what happens.</p>
]]></content:encoded>
			<wfw:commentRss>/index.php/datamgmt/dbprogramming/sql-is-hard-still-reviving-a-stale-application/feed/</wfw:commentRss>
		<slash:comments>2</slash:comments>
		</item>
		<item>
		<title>Solving a slow running query issue with UNION</title>
		<link>/index.php/datamgmt/dbprogramming/mssqlserver/solving-a-slow-running-query-issue-with-union/</link>
		<comments>/index.php/datamgmt/dbprogramming/mssqlserver/solving-a-slow-running-query-issue-with-union/#comments</comments>
		<pubDate>Wed, 25 Feb 2015 11:38:03 +0000</pubDate>
		<dc:creator><![CDATA[Koen Verbeeck]]></dc:creator>
				<category><![CDATA[Microsoft SQL Server]]></category>
		<category><![CDATA[performance]]></category>
		<category><![CDATA[sql]]></category>
		<category><![CDATA[sql server]]></category>
		<category><![CDATA[syndicated]]></category>
		<category><![CDATA[t-sql]]></category>

		<guid isPermaLink="false">/?p=3253</guid>
		<description><![CDATA[That&#8217;s right! I will solve a performance issue by adding a UNION into the query. Interested? Read on! I recently encountered a curious issue with a query. The query itself wasn’t exactly rocket science: it read data from a few tables and calculated the start and the end dates of a contract in the SELECT [&#8230;]]]></description>
				<content:encoded><![CDATA[<p>That&#8217;s right! I will solve a performance issue by adding a UNION into the query. Interested? Read on!</p>
<p>I recently encountered a curious issue with a query. The query itself wasn’t exactly rocket science: it read data from a few tables and calculated the start and the end dates of a contract in the SELECT statement. In an outer query there’s a range join with a date dimension to explode the data over the different months. Let me explain that last part. Suppose we have a contract with ID 5 that is valid between January 2015 and March 2015. The range join with the date dimension would thus return 3 rows:</p>
<p><a href="/wp-content/uploads/2015/02/Exploding.png"><img class="alignnone size-full wp-image-3257" src="/wp-content/uploads/2015/02/Exploding.png" alt="Exploding" width="187" height="97" /></a></p>
<p>The query looked something like this:</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
</pre></td><td class="de1"><pre class="de1"><span class="kw1">WITH</span> CTE_Contracts <span class="kw1">AS</span>
<span class="br0">&#40;</span>
&nbsp; &nbsp; <span class="kw1">SELECT</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;c.<span class="me1">ContractID</span>
&nbsp; &nbsp; &nbsp; &nbsp; ,ContractFrom &nbsp; <span class="sy0">=</span> IIF<span class="br0">&#40;</span> ... <span class="me1">some</span> <span class="kw1">date</span> logic<span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; ,ContractTo &nbsp; &nbsp; <span class="sy0">=</span> IIF<span class="br0">&#40;</span> ... <span class="me1">some</span> <span class="kw1">date</span> logic<span class="br0">&#41;</span>
&nbsp; &nbsp; <span class="kw1">FROM</span> contracts&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; c
&nbsp; &nbsp; <span class="sy0">JOIN</span> contractsdetail&nbsp; &nbsp; cd <span class="kw1">ON</span> c.<span class="me1">ContractID</span> <span class="sy0">=</span> cd.<span class="me1">ContractID</span>
<span class="br0">&#41;</span>
<span class="kw1">SELECT</span>
&nbsp; &nbsp; &nbsp;ContractID
&nbsp; &nbsp; ,ContractMonth <span class="sy0">=</span> d.<span class="br0">&#91;</span><span class="kw1">Month</span><span class="br0">&#93;</span>
<span class="kw1">FROM</span> CTE_Contracts&nbsp; c
<span class="sy0">JOIN</span> dateDim&nbsp; &nbsp; &nbsp; &nbsp; d <span class="kw1">ON</span>&nbsp; &nbsp; d.<span class="br0">&#91;</span><span class="kw1">Date</span><span class="br0">&#93;</span>&nbsp; &nbsp; <span class="sy0">BETWEEN</span> c.<span class="me1">ContractFrom</span> <span class="sy0">AND</span> c.<span class="me1">ContractTo</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="sy0">AND</span> d.<span class="br0">&#91;</span><span class="kw1">Day</span><span class="br0">&#93;</span> &nbsp; &nbsp; <span class="sy0">=</span> <span class="nu0">1</span>; <span class="co1">-- only get the first of the month </span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">WITH CTE_Contracts AS
(
	SELECT
		 c.ContractID
		,ContractFrom	= IIF( ... some date logic)
		,ContractTo		= IIF( ... some date logic)
	FROM contracts			c
	JOIN contractsdetail	cd ON c.ContractID = cd.ContractID
)
SELECT
	 ContractID
	,ContractMonth = d.[Month]
FROM CTE_Contracts	c
JOIN dateDim		d ON	d.[Date]	BETWEEN c.ContractFrom AND c.ContractTo
						AND	d.[Day]		= 1; -- only get the first of the month </pre></div></div>

<p>The query is a bit more complex, but you get the idea. On the test server, the query took 1 minute and 24 seconds to return about 90,000 rows. That’s a tad slow if you ask me. I didn’t see anything wrong with the query (and indexes wouldn’t help), so I just blamed it on the server and on the standard edition of SQL Server. That was until I came across a very similar query. That query did about the same thing, but it also fetched data from another table and appended it to the first result set with a UNION. Something like this:</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
</pre></td><td class="de1"><pre class="de1"><span class="kw1">WITH</span> CTE_Contracts <span class="kw1">AS</span>
<span class="br0">&#40;</span>
&nbsp; &nbsp; <span class="kw1">SELECT</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;c.<span class="me1">ContractID</span>
&nbsp; &nbsp; &nbsp; &nbsp; ,ContractFrom &nbsp; <span class="sy0">=</span> IIF<span class="br0">&#40;</span> ... <span class="me1">some</span> <span class="kw1">date</span> logic<span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; ,ContractTo &nbsp; &nbsp; <span class="sy0">=</span> IIF<span class="br0">&#40;</span> ... <span class="me1">some</span> <span class="kw1">date</span> logic<span class="br0">&#41;</span>
&nbsp; &nbsp; <span class="kw1">FROM</span> contracts&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; c
&nbsp; &nbsp; <span class="sy0">JOIN</span> contractsdetail&nbsp; &nbsp; cd <span class="kw1">ON</span> c.<span class="me1">ContractID</span> <span class="sy0">=</span> cd.<span class="me1">ContractID</span>
&nbsp; &nbsp; <span class="kw1">UNION</span>
&nbsp; &nbsp; <span class="kw1">SELECT</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;c.<span class="me1">ContractID</span>
&nbsp; &nbsp; &nbsp; &nbsp; ,ContractFrom &nbsp; <span class="sy0">=</span> IIF<span class="br0">&#40;</span> ... <span class="me1">some</span> <span class="kw1">date</span> logic<span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; ,ContractTo &nbsp; &nbsp; <span class="sy0">=</span> IIF<span class="br0">&#40;</span> ... <span class="me1">some</span> <span class="kw1">date</span> logic<span class="br0">&#41;</span>
&nbsp; &nbsp; <span class="kw1">FROM</span> contractsextra &nbsp; &nbsp; c
&nbsp; &nbsp; <span class="sy0">JOIN</span> contractsdetail&nbsp; &nbsp; cd <span class="kw1">ON</span> c.<span class="me1">ContractID</span> <span class="sy0">=</span> cd.<span class="me1">ContractID</span>
<span class="br0">&#41;</span>
<span class="kw1">SELECT</span>
&nbsp; &nbsp; &nbsp;ContractID
&nbsp; &nbsp; ,ContractMonth <span class="sy0">=</span> d.<span class="br0">&#91;</span><span class="kw1">Month</span><span class="br0">&#93;</span>
<span class="kw1">FROM</span> CTE_Contracts&nbsp; c
<span class="sy0">JOIN</span> dateDim&nbsp; &nbsp; &nbsp; &nbsp; d <span class="kw1">ON</span>&nbsp; &nbsp; d.<span class="br0">&#91;</span><span class="kw1">Date</span><span class="br0">&#93;</span>&nbsp; &nbsp; <span class="sy0">BETWEEN</span> c.<span class="me1">ContractFrom</span> <span class="sy0">AND</span> c.<span class="me1">ContractTo</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="sy0">AND</span> d.<span class="br0">&#91;</span><span class="kw1">Day</span><span class="br0">&#93;</span> &nbsp; &nbsp; <span class="sy0">=</span> <span class="nu0">1</span>; <span class="co1">-- only get the first of the month</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">WITH CTE_Contracts AS
(
	SELECT
		 c.ContractID
		,ContractFrom	= IIF( ... some date logic)
		,ContractTo		= IIF( ... some date logic)
	FROM contracts			c
	JOIN contractsdetail	cd ON c.ContractID = cd.ContractID
	UNION
	SELECT
		 c.ContractID
		,ContractFrom	= IIF( ... some date logic)
		,ContractTo		= IIF( ... some date logic)
	FROM contractsextra		c
	JOIN contractsdetail	cd ON c.ContractID = cd.ContractID
)
SELECT
	 ContractID
	,ContractMonth = d.[Month]
FROM CTE_Contracts	c
JOIN dateDim		d ON	d.[Date]	BETWEEN c.ContractFrom AND c.ContractTo
						AND	d.[Day]		= 1; -- only get the first of the month</pre></div></div>

<p>Now this query returned about 120,000 rows in 6 seconds. What? More rows in less time? How’s that possible? Time to take a look at the execution plans. The execution plan of the second query:</p>
<p><a href="/wp-content/uploads/2015/02/executionplan_1.png"><img class="alignnone size-full wp-image-3258" src="/wp-content/uploads/2015/02/executionplan_1.png" alt="executionplan_1" width="852" height="511" srcset="/wp-content/uploads/2015/02/executionplan_1.png 852w, /wp-content/uploads/2015/02/executionplan_1-300x179.png 300w" sizes="(max-width: 852px) 100vw, 852px" /></a></p>
<p>You can clearly see the two paths of the union being merged with the hash match after which the results are joined to the date dimension using the nested loops.</p>
<p>The execution plan of the first query is a bit different:</p>
<p><a href="/wp-content/uploads/2015/02/executionplan_2.png"><img class="alignnone size-full wp-image-3255" src="/wp-content/uploads/2015/02/executionplan_2.png" alt="executionplan_2" width="1013" height="340" srcset="/wp-content/uploads/2015/02/executionplan_2.png 1013w, /wp-content/uploads/2015/02/executionplan_2-300x100.png 300w" sizes="(max-width: 1013px) 100vw, 1013px" /></a></p>
<p>The nested loops now gives a warning that there is no join predicate. This results in about 5 million rows, which are filtered later on with the Filter operator to the desired 90,000 rows. A bit of unnecessary overhead it seems. So the execution plan of the first query is a bit silly, since it calculates the date columns for the inner select after the join (in the Compute Scalar operator between the Filter and the Nested Loops). In the second query, these columns are calculated before the join and so the Nested Loops can use them as join predicates.</p>
<p>The question is why does SQL Server change behavior? Well, the second query has a UNION operator in the inner query. This means that SQL Server has to compare the two result sets which each other, so the date columns have to be calculated directly in the inner query. Knowing this, we can easily optimize the first query by adding a “dummy UNION”:</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
</pre></td><td class="de1"><pre class="de1"><span class="kw1">WITH</span> CTE_Contracts <span class="kw1">AS</span>
<span class="br0">&#40;</span>
&nbsp; &nbsp; <span class="kw1">SELECT</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;c.<span class="me1">ContractID</span>
&nbsp; &nbsp; &nbsp; &nbsp; ,ContractFrom &nbsp; <span class="sy0">=</span> IIF<span class="br0">&#40;</span> ... <span class="me1">some</span> <span class="kw1">date</span> logic<span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; ,ContractTo &nbsp; &nbsp; <span class="sy0">=</span> IIF<span class="br0">&#40;</span> ... <span class="me1">some</span> <span class="kw1">date</span> logic<span class="br0">&#41;</span>
&nbsp; &nbsp; <span class="kw1">FROM</span> contracts&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; c
&nbsp; &nbsp; <span class="sy0">JOIN</span> contractsdetail&nbsp; &nbsp; cd <span class="kw1">ON</span> c.<span class="me1">ContractID</span> <span class="sy0">=</span> cd.<span class="me1">ContractID</span>
&nbsp; &nbsp; <span class="kw1">UNION</span>
&nbsp; &nbsp; <span class="kw1">SELECT</span> <span class="sy0">NULL</span>, <span class="sy0">NULL</span>, <span class="sy0">NULL</span>, <span class="sy0">NULL</span> <span class="co1">-- just to enforce performance</span>
<span class="br0">&#41;</span>
<span class="kw1">SELECT</span>
&nbsp; &nbsp; &nbsp;ContractID
&nbsp; &nbsp; ,ContractMonth <span class="sy0">=</span> d.<span class="br0">&#91;</span><span class="kw1">Month</span><span class="br0">&#93;</span>
<span class="kw1">FROM</span> CTE_Contracts&nbsp; c
<span class="sy0">JOIN</span> dateDim&nbsp; &nbsp; &nbsp; &nbsp; d <span class="kw1">ON</span>&nbsp; &nbsp; d.<span class="br0">&#91;</span><span class="kw1">Date</span><span class="br0">&#93;</span>&nbsp; &nbsp; <span class="sy0">BETWEEN</span> c.<span class="me1">ContractFrom</span> <span class="sy0">AND</span> c.<span class="me1">ContractTo</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="sy0">AND</span> d.<span class="br0">&#91;</span><span class="kw1">Day</span><span class="br0">&#93;</span> &nbsp; &nbsp; <span class="sy0">=</span> <span class="nu0">1</span>; <span class="co1">-- only get the first of the month </span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">WITH CTE_Contracts AS
(
	SELECT
		 c.ContractID
		,ContractFrom	= IIF( ... some date logic)
		,ContractTo		= IIF( ... some date logic)
	FROM contracts			c
	JOIN contractsdetail	cd ON c.ContractID = cd.ContractID
	UNION
	SELECT NULL, NULL, NULL, NULL -- just to enforce performance
)
SELECT
	 ContractID
	,ContractMonth = d.[Month]
FROM CTE_Contracts	c
JOIN dateDim		d ON	d.[Date]	BETWEEN c.ContractFrom AND c.ContractTo
						AND	d.[Day]		= 1; -- only get the first of the month </pre></div></div>

<p>This extra row with all NULL values will be filtered out by the INNER JOIN with the date dimension. Now the query runs in 3 seconds!</p>
<p><a href="/wp-content/uploads/2015/02/executionplan_3.png"><img class="alignnone size-full wp-image-3256" src="/wp-content/uploads/2015/02/executionplan_3.png" alt="executionplan_3" width="769" height="168" srcset="/wp-content/uploads/2015/02/executionplan_3.png 769w, /wp-content/uploads/2015/02/executionplan_3-300x65.png 300w" sizes="(max-width: 769px) 100vw, 769px" /></a></p>
]]></content:encoded>
			<wfw:commentRss>/index.php/datamgmt/dbprogramming/mssqlserver/solving-a-slow-running-query-issue-with-union/feed/</wfw:commentRss>
		<slash:comments>11</slash:comments>
		</item>
		<item>
		<title>Beware the defaults! (in windowing functions)</title>
		<link>/index.php/datamgmt/dbprogramming/mssqlserver/beware-the-defaults-in-windowing-functions/</link>
		<comments>/index.php/datamgmt/dbprogramming/mssqlserver/beware-the-defaults-in-windowing-functions/#comments</comments>
		<pubDate>Tue, 07 Oct 2014 12:22:28 +0000</pubDate>
		<dc:creator><![CDATA[Koen Verbeeck]]></dc:creator>
				<category><![CDATA[Microsoft SQL Server]]></category>
		<category><![CDATA[sql]]></category>
		<category><![CDATA[syndicated]]></category>
		<category><![CDATA[t-sql]]></category>
		<category><![CDATA[windowing functions]]></category>

		<guid isPermaLink="false">/?p=3007</guid>
		<description><![CDATA[Some time ago I was writing some windowing functions on a set of data. Basically I was looking for the last date an event had occurred for each type of event. Let’s illustrate with an example: T-SQL1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 CREATE TABLE dbo.TestOver &#160; [&#8230;]]]></description>
				<content:encoded><![CDATA[<p style="text-align: justify">Some time ago I was writing some windowing functions on a set of data. Basically I was looking for the last date an event had occurred for each type of event. Let’s illustrate with an example:</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
</pre></td><td class="de1"><pre class="de1"><span class="kw1">CREATE</span> <span class="kw1">TABLE</span> dbo.<span class="me1">TestOver</span>
&nbsp; &nbsp; <span class="br0">&#40;</span>ID <span class="kw1">INT</span> <span class="kw1">IDENTITY</span><span class="br0">&#40;</span><span class="nu0">1</span>,<span class="nu0">1</span><span class="br0">&#41;</span> <span class="kw1">PRIMARY</span> <span class="kw1">KEY</span> <span class="sy0">NOT</span> <span class="sy0">NULL</span>
&nbsp; &nbsp; ,<span class="br0">&#91;</span><span class="kw1">Group</span><span class="br0">&#93;</span> <span class="kw1">CHAR</span><span class="br0">&#40;</span><span class="nu0">1</span><span class="br0">&#41;</span> <span class="sy0">NOT</span> <span class="sy0">NULL</span>
&nbsp; &nbsp; ,<span class="kw1">Value</span> <span class="kw1">INT</span> <span class="sy0">NOT</span> <span class="sy0">NULL</span><span class="br0">&#41;</span>;
&nbsp;
<span class="kw1">INSERT</span> <span class="kw1">INTO</span> dbo.<span class="me1">TestOver</span><span class="br0">&#40;</span><span class="br0">&#91;</span><span class="kw1">Group</span><span class="br0">&#93;</span>,<span class="kw1">Value</span><span class="br0">&#41;</span>
<span class="kw1">VALUES</span>&nbsp; &nbsp;<span class="br0">&#40;</span><span class="st0">'A'</span>,<span class="nu0">1</span><span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; ,<span class="br0">&#40;</span><span class="st0">'A'</span>,<span class="nu0">2</span><span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; ,<span class="br0">&#40;</span><span class="st0">'A'</span>,<span class="nu0">3</span><span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; ,<span class="br0">&#40;</span><span class="st0">'A'</span>,<span class="nu0">4</span><span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; ,<span class="br0">&#40;</span><span class="st0">'B'</span>,<span class="nu0">5</span><span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; ,<span class="br0">&#40;</span><span class="st0">'B'</span>,<span class="nu0">6</span><span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; ,<span class="br0">&#40;</span><span class="st0">'B'</span>,<span class="nu0">7</span><span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; ,<span class="br0">&#40;</span><span class="st0">'B'</span>,<span class="nu0">8</span><span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; ,<span class="br0">&#40;</span><span class="st0">'B'</span>,<span class="nu0">9</span><span class="br0">&#41;</span>;</pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">CREATE TABLE dbo.TestOver
	(ID INT IDENTITY(1,1) PRIMARY KEY NOT NULL
	,[Group] CHAR(1) NOT NULL
	,Value INT NOT NULL);

INSERT INTO dbo.TestOver([Group],Value)
VALUES	 ('A',1)
		,('A',2)
		,('A',3)
		,('A',4)
		,('B',5)
		,('B',6)
		,('B',7)
		,('B',8)
		,('B',9);</pre></div></div>

<p style="text-align: justify">Using the data above, I need to find the value 4 for group A and the value 9 for group B. I first wrote the following T-SQL statement to retrieve the data:</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
</pre></td><td class="de1"><pre class="de1"><span class="kw1">SELECT</span> <span class="kw1">DISTINCT</span> <span class="br0">&#91;</span><span class="kw1">Group</span><span class="br0">&#93;</span>, <span class="kw2">MAX</span><span class="br0">&#40;</span><span class="kw1">Value</span><span class="br0">&#41;</span> <span class="kw1">OVER</span> <span class="br0">&#40;</span>PARTITION <span class="kw1">BY</span> <span class="br0">&#91;</span><span class="kw1">Group</span><span class="br0">&#93;</span> <span class="kw1">ORDER</span> <span class="kw1">BY</span> <span class="kw1">Value</span><span class="br0">&#41;</span>
<span class="kw1">FROM</span> dbo.<span class="me1">TestOver</span>;</pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">SELECT DISTINCT [Group], MAX(Value) OVER (PARTITION BY [Group] ORDER BY Value)
FROM dbo.TestOver;</pre></div></div>

<p style="text-align: justify"><a href="/wp-content/uploads/2014/10/query1.png"><img class="alignnone size-full wp-image-3013" src="/wp-content/uploads/2014/10/query1.png" alt="query1" width="595" height="290" srcset="/wp-content/uploads/2014/10/query1.png 595w, /wp-content/uploads/2014/10/query1-300x146.png 300w" sizes="(max-width: 595px) 100vw, 595px" /></a></p>
<p style="text-align: justify">The results are of course incorrect. A little baffled why this was the cause, I changed the ORDER BY to descending which gave me the results I wanted.</p>
<p style="text-align: justify"><a href="/wp-content/uploads/2014/10/query2.png"><img class="alignnone size-full wp-image-3011" src="/wp-content/uploads/2014/10/query2.png" alt="query2" width="617" height="142" srcset="/wp-content/uploads/2014/10/query2.png 617w, /wp-content/uploads/2014/10/query2-300x69.png 300w" sizes="(max-width: 617px) 100vw, 617px" /></a></p>
<p style="text-align: justify">I really didn’t think twice over this, until I joined the session <a href="http://www.sqlserverdays.be/powerful-t-sql-improvements-that-reduce-query-complexity/">Powerful T-SQL Improvements that Reduce Query Complexity</a> by Hugo Kornelis (<a href="http://sqlblog.com/blogs/hugo_kornelis/">blog</a> | <a href="https://twitter.com/Hugo_Kornelis">twitter</a>) on the SQL Server Days. I learned two things.</p>
<ol style="text-align: justify">
<li>You don’t need to specify the ORDER BY.</li>
</ol>
<p style="text-align: justify">In SQL Server 2005, the <a href="http://msdn.microsoft.com/en-us/library/ms189461(v=sql.90).aspx">OVER clause</a> was introduced and it simplified some aggregations like the one we’re doing here. When using the ranking window functions the ORDER BY clause is mandatory, but when using a regular aggregate window function the ORDER BY clause is not allowed. This gives us the following T-SQL which is the perfect solution for our problem here:</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
</pre></td><td class="de1"><pre class="de1"><span class="kw1">SELECT</span> <span class="kw1">DISTINCT</span> <span class="br0">&#91;</span><span class="kw1">Group</span><span class="br0">&#93;</span>, <span class="kw2">MAX</span><span class="br0">&#40;</span><span class="kw1">Value</span><span class="br0">&#41;</span> <span class="kw1">OVER</span> <span class="br0">&#40;</span>PARTITION <span class="kw1">BY</span> <span class="br0">&#91;</span><span class="kw1">Group</span><span class="br0">&#93;</span><span class="br0">&#41;</span>
<span class="kw1">FROM</span> dbo.<span class="me1">TestOver</span>;</pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">SELECT DISTINCT [Group], MAX(Value) OVER (PARTITION BY [Group])
FROM dbo.TestOver;</pre></div></div>

<p style="text-align: justify">To be honest, I completely forgot aggregate functions could be used this way. The PARTITION BY clause is optional as well, so you can have a completely empty OVER clause.</p>
<ol style="text-align: justify" start="2">
<li>When you do specify the ORDER BY, defaults come into play.</li>
</ol>
<p style="text-align: justify">Starting from SQL Server 2012, the T-SQL windowing functions and the <a href="http://msdn.microsoft.com/en-us/library/ms189461(v=sql.120).aspx">OVER clause</a> were greatly enhanced. Suddenly you can specify an ORDER BY for the aggregate windowing functions (which I did in the first attempts, remember?). However, if you specify an ORDER BY clause but no ROW or RANGE clause, SQL Server will apply the following defaults: RANGE UNBOUNDED PRECEDING as the lower limit and CURRENT ROW for the upper limit of the window. When Hugo explained this, I had my “Eureka” moment (or rather my “How could I have been this stupid?” moment). Because of these defaults, the MAX aggregate was calculated over the wrong windows! Let’s illustrate the concept for group A:</p>
<p style="text-align: justify"><a href="/wp-content/uploads/2014/10/windows.png"><img class="alignnone size-full wp-image-3012" src="/wp-content/uploads/2014/10/windows.png" alt="windows" width="204" height="189" /></a></p>
<p style="text-align: justify">Because of the defaults, the first window is limited to only one row. This means the MAX aggregate will return the value 1. In the second window, two rows are included and MAX will return 2 and so on. By reversing the sort order, the value 4 will always be included in the windows, so MAX will return the correct answers. However dropping the ORDER BY is in my opinion the cleanest option to solve the problem.</p>
<p style="text-align: justify"><strong>Conclusion</strong></p>
<p style="text-align: justify">Learn your T-SQL syntax and be aware of the defaults! Hugo also mentioned that ROWS <del>might</del> <strong>will</strong> have better performance than RANGE, so you better always specify your window frames to avoid the default.</p>
<p style="text-align: justify"><i>Update: I was contacted by the amazing Rob Farley who told me that ROWS will beat RANGE any day of the week and that you should always specify ROWS unless you really need RANGE.</i></p>
]]></content:encoded>
			<wfw:commentRss>/index.php/datamgmt/dbprogramming/mssqlserver/beware-the-defaults-in-windowing-functions/feed/</wfw:commentRss>
		<slash:comments>5</slash:comments>
		</item>
		<item>
		<title>The Magic Alt Button</title>
		<link>/index.php/datamgmt/dbprogramming/mssqlserver/the-magic-alt-button/</link>
		<comments>/index.php/datamgmt/dbprogramming/mssqlserver/the-magic-alt-button/#comments</comments>
		<pubDate>Tue, 23 Sep 2014 13:39:54 +0000</pubDate>
		<dc:creator><![CDATA[Koen Verbeeck]]></dc:creator>
				<category><![CDATA[Microsoft SQL Server]]></category>
		<category><![CDATA[SSIS]]></category>
		<category><![CDATA[block]]></category>
		<category><![CDATA[selecting text]]></category>
		<category><![CDATA[sql]]></category>
		<category><![CDATA[sql server]]></category>
		<category><![CDATA[ssis]]></category>
		<category><![CDATA[syndicated]]></category>
		<category><![CDATA[tsql]]></category>

		<guid isPermaLink="false">/?p=2967</guid>
		<description><![CDATA[Lately I have been using more and more the awesomeness of the Alt-button in SQL Server Management Studio (SSMS). What do I mean with this? While holding the Alt-button on your keyboard, you can select a block of text instead of lines of text. Note that this is not an exclusive feature, you can do [&#8230;]]]></description>
				<content:encoded><![CDATA[<p style="text-align: justify">Lately I have been using more and more the awesomeness of the Alt-button in SQL Server Management Studio (SSMS). What do I mean with this? While holding the Alt-button on your keyboard, you can select a block of text instead of lines of text.</p>
<p style="text-align: justify"><a href="/wp-content/uploads/2014/09/blockselected.jpg"><img class="alignnone wp-image-2976" src="/wp-content/uploads/2014/09/blockselected-243x300.jpg" alt="blockselected" width="308" height="381" srcset="/wp-content/uploads/2014/09/blockselected-243x300.jpg 243w, /wp-content/uploads/2014/09/blockselected.jpg 571w" sizes="(max-width: 308px) 100vw, 308px" /></a></p>
<p style="text-align: justify">Note that this is not an exclusive feature, you can do this in some other applications as well (like Word and Notepad++). An alternative is holding Alt+Shift and moving the cursor with the arrow keys. This can be useful for example when working on a laptop without a mouse present and you don’t really trust yourself holding Alt, the select button and moving the touchpad at the same time. This alternative doesn’t work in every application though. In Word this keyboard shortcut is used to move the current paragraph.</p>
<p style="text-align: justify">Anyway, what makes selecting blocks of code so magic and awesome? Because I can for example create a SQL update statement for a dimension using a staging table super quickly. Allow me to illustrate.</p>
<p style="text-align: justify">Suppose I want to create an update statement to update the Employee dimension of the AdventureWorks database. The source data is located in a staging table with almost the exact schema of the target table. Typically this staging table is populated with update data coming from an incremental load SSIS package. Using a staging table and an update statement in an Execute SQL Task allows us to get rid of the OLE DB Command, which issues updates row by row in SSIS. Which we do not want. Anyway, I digress. Let’s assume the staging table has the following schema:</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
</pre></td><td class="de1"><pre class="de1"><span class="kw1">USE</span> <span class="br0">&#91;</span>AdventureWorksDW2012<span class="br0">&#93;</span>
GO
&nbsp;
<span class="kw1">CREATE</span> <span class="kw1">TABLE</span> <span class="br0">&#91;</span>dbo<span class="br0">&#93;</span>.<span class="br0">&#91;</span>Upd_DimEmployee<span class="br0">&#93;</span><span class="br0">&#40;</span>
&nbsp; &nbsp; <span class="br0">&#91;</span>EmployeeKey<span class="br0">&#93;</span> <span class="br0">&#91;</span><span class="kw1">int</span><span class="br0">&#93;</span> <span class="sy0">NOT</span> <span class="sy0">NULL</span>,
&nbsp; &nbsp; <span class="br0">&#91;</span>SalesTerritoryKey<span class="br0">&#93;</span> <span class="br0">&#91;</span><span class="kw1">int</span><span class="br0">&#93;</span> <span class="sy0">NULL</span>,
&nbsp; &nbsp; <span class="br0">&#91;</span>FirstName<span class="br0">&#93;</span> <span class="br0">&#91;</span><span class="kw1">nvarchar</span><span class="br0">&#93;</span><span class="br0">&#40;</span><span class="nu0">50</span><span class="br0">&#41;</span> <span class="sy0">NOT</span> <span class="sy0">NULL</span>,
&nbsp; &nbsp; <span class="br0">&#91;</span>LastName<span class="br0">&#93;</span> <span class="br0">&#91;</span><span class="kw1">nvarchar</span><span class="br0">&#93;</span><span class="br0">&#40;</span><span class="nu0">50</span><span class="br0">&#41;</span> <span class="sy0">NOT</span> <span class="sy0">NULL</span>,
&nbsp; &nbsp; <span class="br0">&#91;</span>MiddleName<span class="br0">&#93;</span> <span class="br0">&#91;</span><span class="kw1">nvarchar</span><span class="br0">&#93;</span><span class="br0">&#40;</span><span class="nu0">50</span><span class="br0">&#41;</span> <span class="sy0">NULL</span>,
&nbsp; &nbsp; <span class="br0">&#91;</span>NameStyle<span class="br0">&#93;</span> <span class="br0">&#91;</span><span class="kw1">bit</span><span class="br0">&#93;</span> <span class="sy0">NOT</span> <span class="sy0">NULL</span>,
&nbsp; &nbsp; <span class="br0">&#91;</span>Title<span class="br0">&#93;</span> <span class="br0">&#91;</span><span class="kw1">nvarchar</span><span class="br0">&#93;</span><span class="br0">&#40;</span><span class="nu0">50</span><span class="br0">&#41;</span> <span class="sy0">NULL</span>,
&nbsp; &nbsp; <span class="br0">&#91;</span>HireDate<span class="br0">&#93;</span> <span class="br0">&#91;</span><span class="kw1">date</span><span class="br0">&#93;</span> <span class="sy0">NULL</span>,
&nbsp; &nbsp; <span class="br0">&#91;</span>BirthDate<span class="br0">&#93;</span> <span class="br0">&#91;</span><span class="kw1">date</span><span class="br0">&#93;</span> <span class="sy0">NULL</span>,
&nbsp; &nbsp; <span class="br0">&#91;</span>LoginID<span class="br0">&#93;</span> <span class="br0">&#91;</span><span class="kw1">nvarchar</span><span class="br0">&#93;</span><span class="br0">&#40;</span><span class="nu0">256</span><span class="br0">&#41;</span> <span class="sy0">NULL</span>,
&nbsp; &nbsp; <span class="br0">&#91;</span>EmailAddress<span class="br0">&#93;</span> <span class="br0">&#91;</span><span class="kw1">nvarchar</span><span class="br0">&#93;</span><span class="br0">&#40;</span><span class="nu0">50</span><span class="br0">&#41;</span> <span class="sy0">NULL</span>,
&nbsp; &nbsp; <span class="br0">&#91;</span>Phone<span class="br0">&#93;</span> <span class="br0">&#91;</span><span class="kw1">nvarchar</span><span class="br0">&#93;</span><span class="br0">&#40;</span><span class="nu0">25</span><span class="br0">&#41;</span> <span class="sy0">NULL</span>,
&nbsp; &nbsp; <span class="br0">&#91;</span>MaritalStatus<span class="br0">&#93;</span> <span class="br0">&#91;</span><span class="kw1">nchar</span><span class="br0">&#93;</span><span class="br0">&#40;</span><span class="nu0">1</span><span class="br0">&#41;</span> <span class="sy0">NULL</span>,
&nbsp; &nbsp; <span class="br0">&#91;</span>EmergencyContactName<span class="br0">&#93;</span> <span class="br0">&#91;</span><span class="kw1">nvarchar</span><span class="br0">&#93;</span><span class="br0">&#40;</span><span class="nu0">50</span><span class="br0">&#41;</span> <span class="sy0">NULL</span>,
&nbsp; &nbsp; <span class="br0">&#91;</span>EmergencyContactPhone<span class="br0">&#93;</span> <span class="br0">&#91;</span><span class="kw1">nvarchar</span><span class="br0">&#93;</span><span class="br0">&#40;</span><span class="nu0">25</span><span class="br0">&#41;</span> <span class="sy0">NULL</span>,
&nbsp; &nbsp; <span class="br0">&#91;</span>SalariedFlag<span class="br0">&#93;</span> <span class="br0">&#91;</span><span class="kw1">bit</span><span class="br0">&#93;</span> <span class="sy0">NULL</span>,
&nbsp; &nbsp; <span class="br0">&#91;</span>Gender<span class="br0">&#93;</span> <span class="br0">&#91;</span><span class="kw1">nchar</span><span class="br0">&#93;</span><span class="br0">&#40;</span><span class="nu0">1</span><span class="br0">&#41;</span> <span class="sy0">NULL</span>,
&nbsp; &nbsp; <span class="br0">&#91;</span>PayFrequency<span class="br0">&#93;</span> <span class="br0">&#91;</span><span class="kw1">tinyint</span><span class="br0">&#93;</span> <span class="sy0">NULL</span>,
&nbsp; &nbsp; <span class="br0">&#91;</span>BaseRate<span class="br0">&#93;</span> <span class="br0">&#91;</span><span class="kw1">money</span><span class="br0">&#93;</span> <span class="sy0">NULL</span>,
&nbsp; &nbsp; <span class="br0">&#91;</span>VacationHours<span class="br0">&#93;</span> <span class="br0">&#91;</span><span class="kw1">smallint</span><span class="br0">&#93;</span> <span class="sy0">NULL</span>,
&nbsp; &nbsp; <span class="br0">&#91;</span>SickLeaveHours<span class="br0">&#93;</span> <span class="br0">&#91;</span><span class="kw1">smallint</span><span class="br0">&#93;</span> <span class="sy0">NULL</span>,
&nbsp; &nbsp; <span class="br0">&#91;</span>CurrentFlag<span class="br0">&#93;</span> <span class="br0">&#91;</span><span class="kw1">bit</span><span class="br0">&#93;</span> <span class="sy0">NOT</span> <span class="sy0">NULL</span>,
&nbsp; &nbsp; <span class="br0">&#91;</span>SalesPersonFlag<span class="br0">&#93;</span> <span class="br0">&#91;</span><span class="kw1">bit</span><span class="br0">&#93;</span> <span class="sy0">NOT</span> <span class="sy0">NULL</span>,
&nbsp; &nbsp; <span class="br0">&#91;</span>DepartmentName<span class="br0">&#93;</span> <span class="br0">&#91;</span><span class="kw1">nvarchar</span><span class="br0">&#93;</span><span class="br0">&#40;</span><span class="nu0">50</span><span class="br0">&#41;</span> <span class="sy0">NULL</span>,
&nbsp; &nbsp; <span class="br0">&#91;</span>StartDate<span class="br0">&#93;</span> <span class="br0">&#91;</span><span class="kw1">date</span><span class="br0">&#93;</span> <span class="sy0">NULL</span>,
&nbsp; &nbsp; <span class="br0">&#91;</span>EndDate<span class="br0">&#93;</span> <span class="br0">&#91;</span><span class="kw1">date</span><span class="br0">&#93;</span> <span class="sy0">NULL</span>,
&nbsp; &nbsp; <span class="br0">&#91;</span>Status<span class="br0">&#93;</span> <span class="br0">&#91;</span><span class="kw1">nvarchar</span><span class="br0">&#93;</span><span class="br0">&#40;</span><span class="nu0">50</span><span class="br0">&#41;</span> <span class="sy0">NULL</span>,
&nbsp; &nbsp; <span class="br0">&#91;</span>EmployeePhoto<span class="br0">&#93;</span> <span class="br0">&#91;</span><span class="kw1">varbinary</span><span class="br0">&#93;</span><span class="br0">&#40;</span><span class="kw2">max</span><span class="br0">&#41;</span> <span class="sy0">NULL</span><span class="br0">&#41;</span>;</pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">USE [AdventureWorksDW2012]
GO

CREATE TABLE [dbo].[Upd_DimEmployee](
	[EmployeeKey] [int] NOT NULL,
	[SalesTerritoryKey] [int] NULL,
	[FirstName] [nvarchar](50) NOT NULL,
	[LastName] [nvarchar](50) NOT NULL,
	[MiddleName] [nvarchar](50) NULL,
	[NameStyle] [bit] NOT NULL,
	[Title] [nvarchar](50) NULL,
	[HireDate] [date] NULL,
	[BirthDate] [date] NULL,
	[LoginID] [nvarchar](256) NULL,
	[EmailAddress] [nvarchar](50) NULL,
	[Phone] [nvarchar](25) NULL,
	[MaritalStatus] [nchar](1) NULL,
	[EmergencyContactName] [nvarchar](50) NULL,
	[EmergencyContactPhone] [nvarchar](25) NULL,
	[SalariedFlag] [bit] NULL,
	[Gender] [nchar](1) NULL,
	[PayFrequency] [tinyint] NULL,
	[BaseRate] [money] NULL,
	[VacationHours] [smallint] NULL,
	[SickLeaveHours] [smallint] NULL,
	[CurrentFlag] [bit] NOT NULL,
	[SalesPersonFlag] [bit] NOT NULL,
	[DepartmentName] [nvarchar](50) NULL,
	[StartDate] [date] NULL,
	[EndDate] [date] NULL,
	[Status] [nvarchar](50) NULL,
	[EmployeePhoto] [varbinary](max) NULL);</pre></div></div>

<p style="text-align: justify">This update table has all the updateable columns of the Employee dimension and the surrogate key, but not the business key (since it won’t change anyway). The surrogate key does not have the IDENTITY property, as it will be retrieved from the Employee dimension with a Lookup component in the SSIS package.</p>
<p style="text-align: justify">OK, now let’s create the update statement. We start with the list of updateable columns from the dimension, the UPDATE clause and the FROM and JOIN clauses.</p>
<p style="text-align: justify"><a href="/wp-content/uploads/2014/09/update_statement_01.jpg"><img class="alignnone size-medium wp-image-2977" src="/wp-content/uploads/2014/09/update_statement_01-268x300.jpg" alt="update_statement_01" width="268" height="300" srcset="/wp-content/uploads/2014/09/update_statement_01-268x300.jpg 268w, /wp-content/uploads/2014/09/update_statement_01.jpg 581w" sizes="(max-width: 268px) 100vw, 268px" /></a></p>
<p style="text-align: justify">Thanks to the surrogate key <em>EmployeeKey</em> we can easily join the Employee dimension and its staging table. First select a line after the columns while holding the Alt button.</p>
<p style="text-align: justify"><a href="/wp-content/uploads/2014/09/update_statement_02.jpg"><img class="alignnone size-medium wp-image-2978" src="/wp-content/uploads/2014/09/update_statement_02-273x300.jpg" alt="update_statement_02" width="273" height="300" srcset="/wp-content/uploads/2014/09/update_statement_02-273x300.jpg 273w, /wp-content/uploads/2014/09/update_statement_02.jpg 589w" sizes="(max-width: 273px) 100vw, 273px" /></a></p>
<p style="text-align: justify">This is easy with the mouse and you don’t even need a cursor position to start from. You can select literally every block you want. If you want to do this with the keyboard only, you need to tab to the position you want and then start selecting.</p>
<p style="text-align: justify">And now comes the awesome part. With the single line still selected, you can start typing at all the lines at once.</p>
<p style="text-align: justify"><a href="/wp-content/uploads/2014/09/update_statement_03.jpg"><img class="alignnone size-medium wp-image-2979" src="/wp-content/uploads/2014/09/update_statement_03-300x237.jpg" alt="update_statement_03" width="300" height="237" srcset="/wp-content/uploads/2014/09/update_statement_03-300x237.jpg 300w, /wp-content/uploads/2014/09/update_statement_03.jpg 827w" sizes="(max-width: 300px) 100vw, 300px" /></a></p>
<p style="text-align: justify">Great isn’t it? Now select all of the columns with the Alt button and copy them.</p>
<p style="text-align: justify"><a href="/wp-content/uploads/2014/09/update_statement_04.jpg"><img class="alignnone size-medium wp-image-2980" src="/wp-content/uploads/2014/09/update_statement_04-276x300.jpg" alt="update_statement_04" width="276" height="300" srcset="/wp-content/uploads/2014/09/update_statement_04-276x300.jpg 276w, /wp-content/uploads/2014/09/update_statement_04.jpg 590w" sizes="(max-width: 276px) 100vw, 276px" /></a></p>
<p style="text-align: justify">Move your cursor to the first line, right after “= u.” and simply paste the columns.</p>
<p style="text-align: justify"><a href="/wp-content/uploads/2014/09/update_statement_05.jpg"><img class="alignnone size-medium wp-image-2981" src="/wp-content/uploads/2014/09/update_statement_05-268x300.jpg" alt="update_statement_05" width="268" height="300" srcset="/wp-content/uploads/2014/09/update_statement_05-268x300.jpg 268w, /wp-content/uploads/2014/09/update_statement_05.jpg 571w" sizes="(max-width: 268px) 100vw, 268px" /></a></p>
<p style="text-align: justify">That was created pretty fast, right? A lot faster than typing everything, even with Intellisense. Of course, we want an efficient update statement, so we’ll add a WHERE clause with the same techniques that will check if anything has changed at all.</p>
<p style="text-align: justify">Add the WHERE clause and paste the list of columns again.</p>
<p style="text-align: justify"><a href="/wp-content/uploads/2014/09/update_statement_06.jpg"><img class="alignnone size-medium wp-image-2982" src="/wp-content/uploads/2014/09/update_statement_06-286x300.jpg" alt="update_statement_06" width="286" height="300" srcset="/wp-content/uploads/2014/09/update_statement_06-286x300.jpg 286w, /wp-content/uploads/2014/09/update_statement_06.jpg 584w" sizes="(max-width: 286px) 100vw, 286px" /></a></p>
<p style="text-align: justify">Move the column list to the right and add the keyword OR and the table alias before every line (except the first) with the <em>type-on-every-line</em> trick.</p>
<p style="text-align: justify"><a href="/wp-content/uploads/2014/09/update_statement_07.jpg"><img class="alignnone size-medium wp-image-2973" src="/wp-content/uploads/2014/09/update_statement_07-280x300.jpg" alt="update_statement_07" width="280" height="300" srcset="/wp-content/uploads/2014/09/update_statement_07-280x300.jpg 280w, /wp-content/uploads/2014/09/update_statement_07.jpg 573w" sizes="(max-width: 280px) 100vw, 280px" /></a></p>
<p style="text-align: justify">Now select a line after the columns and add inequality operator and the other table alias.</p>
<p style="text-align: justify"><a href="/wp-content/uploads/2014/09/update_statement_08.jpg"><img class="alignnone size-medium wp-image-2974" src="/wp-content/uploads/2014/09/update_statement_08-273x300.jpg" alt="update_statement_08" width="273" height="300" srcset="/wp-content/uploads/2014/09/update_statement_08-273x300.jpg 273w, /wp-content/uploads/2014/09/update_statement_08.jpg 565w" sizes="(max-width: 273px) 100vw, 273px" /></a></p>
<p style="text-align: justify">Simply paste the column list again at the end.</p>
<p style="text-align: justify"><a href="/wp-content/uploads/2014/09/update_statement_09.jpg"><img class="alignnone size-medium wp-image-2975" src="/wp-content/uploads/2014/09/update_statement_09-296x300.jpg" alt="update_statement_09" width="296" height="300" srcset="/wp-content/uploads/2014/09/update_statement_09-296x300.jpg 296w, /wp-content/uploads/2014/09/update_statement_09.jpg 640w" sizes="(max-width: 296px) 100vw, 296px" /></a></p>
<p style="text-align: justify">Don’t forget the semicolon at the end! To really top it off, we should include ISNULL functions everywhere to account for NULL values, but I’ll leave that as an exercise for the reader <img src="https://s.w.org/images/core/emoji/2/72x72/1f609.png" alt="😉" class="wp-smiley" style="height: 1em; max-height: 1em;" /></p>
]]></content:encoded>
			<wfw:commentRss>/index.php/datamgmt/dbprogramming/mssqlserver/the-magic-alt-button/feed/</wfw:commentRss>
		<slash:comments>11</slash:comments>
		</item>
		<item>
		<title>Deploying Database Changes with PowerShell</title>
		<link>/index.php/datamgmt/dbprogramming/deploying-database-changes-with-powershell/</link>
		<comments>/index.php/datamgmt/dbprogramming/deploying-database-changes-with-powershell/#comments</comments>
		<pubDate>Fri, 17 May 2013 07:36:00 +0000</pubDate>
		<dc:creator><![CDATA[Eli Weinstock-Herman (tarwn)]]></dc:creator>
				<category><![CDATA[Database Programming]]></category>
		<category><![CDATA[Microsoft SQL Server]]></category>
		<category><![CDATA[deployment]]></category>
		<category><![CDATA[powershell]]></category>
		<category><![CDATA[sql]]></category>

		<guid isPermaLink="false">/index.php/2013/05/deploying-database-changes-with-powershell/</guid>
		<description><![CDATA[Recently, while working on a personal project, I found myself needing a lightweight way to deploy database changes to multiple environments. In the past I have used a wide range of methods, ranging from applying the changes manually to applying changes via a diff tool (SQL Compare), to automatically applying manually created change scripts, to automatically applying diff scripts that were automatically generated, to working directly in production..er, pretend you didn't see that one.]]></description>
				<content:encoded><![CDATA[<p>Recently, while working on a personal project, I found myself needing a lightweight way to deploy database changes to multiple environments. In the past I have used a wide range of methods, ranging from applying the changes manually to applying changes via a diff tool (SQL Compare), to automatically applying manually created change scripts, to automatically applying diff scripts that were automatically generated, to working directly in production..er, pretend you didn&#8217;t see that one. </p>
<h2>Why not _________ tool?</h2>
<p>There are a lot of tools out there to handle database deployments, but this is a small project that I am building incrementally as a minimum viable product. Rather than tie up a bunch of time researching and experimenting with database deployment tools early on, I decided to do something simple that would work for the time being and free me up to work on the actual product. </p>
<p>What I want from the deployment is to:</p>
<ol>
<li>Spend as little time on this as possible</li>
<li>Work against SQL Azure and a local 2008 R2 Server</li>
<li>Call it from TeamCity for a local server or a remote one</li>
<li>Produce readable output for TeamCity logs</li>
<li>Create the databases and users from the ground up</li>
<li>Include randomly generated data</li>
<li>Manage scripts for 2 independent databases in the same build</li>
<li>Allow real SQL (I&#8217;m not scared of SQL and I don&#8217;t want to learn a code abstraction just to deploy changes)</li>
<li>Not worry about rollbacks. I am deploying small changes and if something breaks I&#8217;ll be charging forward</li>
<li>Not expose credentials, as the code will be visible to the public</li>
<li>Be replaceable. I might replace it with a tool one day, so keep the deployment logic separate from the application</li>
</ol>
<p>Looking back at this list and what I eventually created, I probably could have used something like <a href="https://github.com/brunomlopes/dbdeploy.net" "dbdploy on github">DBDeploy</a>. The scripts I created ended up taking a very similar approach.</p>
<h2>The Deployment Scripts</h2>
<p>My deployment consists of 4 PowerShell scripts:</p>
<ul>
<li><strong>ApplyDatabaseUpdates.ps1</strong> &#8211; Responsible for generically applying changes from a folder to a specified database</li>
<li><strong>UpdateCoreDatabase.ps1</strong> &#8211; Responsible for the application&#8217;s Core Database, calls ApplyDatabaseUpdates</li>
<li><strong>UpdateSampleDatabase.ps1</strong> &#8211; Response for the application&#8217;s Sample Database, calls ApplyDatabaseUpdates</li>
<li><strong>RunLocally.ps1</strong> &#8211; Executes the two Update scripts against the local database on my development machine(s)</li>
</ul>
<p>This project has been spread out over 6 months, intermixed with life, other projects, blog posts, etc. Along the way I also upgraded my local development machine to SQL Server 2012 but my main test database server is on 2008 still and my release environment is Azure Database/SQL Azure/(whatever the name is this week).</p>
<h3>ApplyDatabaseUpdates.ps1</h3>
<p>The purpose of the ApplyDatabaseUpdates script is to apply all of the scripts in a specified folder to the specified server. To do this it creates a tracking table on the target database, then iterates through the contents of the folder, building a script containing any files that were not previously logged in the tracking table.</p>
<div style="text-align:center; color: #666666;">
   <img src="http://tiernok.com/LTDBlog/DatabaseDeployment/SQLScripts.png" alt="Core DB Scripts folder" /><br />
   Core Database Scripts Folder
</div>
<p>The deployment script wraps the contents of each script file in an EXECUTE statement, followed by an INSERT to add it to the tracking table for the database.</p>
<p><b><a href="https://github.com/tarwn/SQLisHard/blob/master/Database/ApplyDatabaseUpdates.ps1" title="View on github">ApplyDatabaseUpdates.ps1</a></b></p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="powershell"><thead><tr><td colspan="2"  class="head">PowerShell</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72
73
74
75
76
77
78
79
80
81
82
83
</pre></td><td class="de1"><pre class="de1"><span class="kw3">function</span> ApplyDatabaseUpdates
<span class="br0">&#123;</span>
&nbsp; &nbsp; <span class="kw3">param</span> <span class="br0">&#40;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#91;</span>parameter<span class="br0">&#40;</span>Mandatory<span class="sy0">=</span><span class="re0">$true</span><span class="br0">&#41;</span><span class="br0">&#93;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#91;</span><span class="re3">string</span><span class="br0">&#93;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="re0">$UpdatesFolder</span><span class="sy0">,</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#91;</span>parameter<span class="br0">&#40;</span>Mandatory<span class="sy0">=</span><span class="re0">$true</span><span class="br0">&#41;</span><span class="br0">&#93;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#91;</span><span class="re3">string</span><span class="br0">&#93;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="re0">$Server</span><span class="sy0">,</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#91;</span>parameter<span class="br0">&#40;</span>Mandatory<span class="sy0">=</span><span class="re0">$true</span><span class="br0">&#41;</span><span class="br0">&#93;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#91;</span><span class="re3">string</span><span class="br0">&#93;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="re0">$Database</span><span class="sy0">,</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#91;</span>parameter<span class="br0">&#40;</span>Mandatory<span class="sy0">=</span><span class="re0">$true</span><span class="br0">&#41;</span><span class="br0">&#93;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#91;</span><span class="re3">string</span><span class="br0">&#93;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="re0">$AdminUserName</span><span class="sy0">,</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#91;</span>parameter<span class="br0">&#40;</span>Mandatory<span class="sy0">=</span><span class="re0">$true</span><span class="br0">&#41;</span><span class="br0">&#93;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#91;</span><span class="re3">string</span><span class="br0">&#93;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="re0">$AdminPassword</span>
&nbsp; &nbsp; <span class="br0">&#41;</span>
&nbsp;
&nbsp; &nbsp; <span class="re0">$path</span> <span class="sy0">=</span> <span class="br0">&#40;</span><span class="kw1">Get-Location</span><span class="br0">&#41;</span>.Path
&nbsp;
&nbsp; &nbsp; <span class="co1"># For SQL 2008 - load the modules</span>
&nbsp; &nbsp; try<span class="br0">&#123;</span> &nbsp; &nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw3">if</span> <span class="br0">&#40;</span> <span class="br0">&#40;</span><span class="kw1">Get-PSSnapin</span> <span class="kw5">-Name</span> SqlServerCmdletSnapin100 <span class="kw5">-ErrorAction</span> SilentlyContinue<span class="br0">&#41;</span> <span class="kw4">-eq</span> <span class="re0">$null</span> <span class="kw4">-and</span> <span class="br0">&#40;</span><span class="kw1">Get-PSSnapin</span> <span class="kw5">-Registered</span> <span class="kw5">-Name</span> SqlServerCmdletSnapin100 <span class="kw5">-ErrorAction</span> SilentlyContinue<span class="br0">&#41;</span> <span class="kw4">-ne</span> <span class="re0">$null</span><span class="br0">&#41;</span><span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">Add-PSSnapin</span> SqlServerCmdletSnapin100 <span class="kw5">-ErrorAction</span> SilentlyContinue
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">Add-PSSnapin</span> SqlServerProviderSnapin100 <span class="kw5">-ErrorAction</span> SilentlyContinue
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp; &nbsp; catch<span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">Write-Error</span> <span class="st0">&quot;Powershell Script error: $_&quot;</span> <span class="sy0">-</span>EA Stop
&nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp;
&nbsp; &nbsp; <span class="co1">#updates tracking</span>
&nbsp; &nbsp; try<span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">Write-Host</span> <span class="st0">&quot;Creating Update Tracking Table If Not Exists&quot;</span>
&nbsp; &nbsp; &nbsp; &nbsp; Invoke<span class="sy0">-</span>Sqlcmd <span class="kw5">-Query</span> <span class="st0">&quot;IF NOT EXISTS (SELECT 1 FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME = 'UpdateTracking') CREATE TABLE UpdateTracking (UpdateTrackingKey int IDENTITY(1,1) PRIMARY KEY, Name varchar(255) NOT NULL, Applied DateTime NOT NULL);&quot;</span> <span class="sy0">-</span>ServerInstance <span class="st0">&quot;$Server&quot;</span> <span class="sy0">-</span>Username <span class="st0">&quot;$AdminUserName&quot;</span> <span class="sy0">-</span>Password <span class="st0">&quot;$AdminPassword&quot;</span> <span class="sy0">-</span>Database <span class="st0">&quot;$Database&quot;</span> <span class="kw5">-ErrorAction</span> Stop
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">Write-Host</span> <span class="st0">&quot;Done&quot;</span>
&nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp; &nbsp; catch<span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">Write-Error</span> <span class="st0">&quot;Powershell Script error: $_&quot;</span> <span class="sy0">-</span>EA Stop
&nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp;
&nbsp; &nbsp; <span class="co1">#database updates</span>
&nbsp; &nbsp; <span class="re0">$outputPath</span> <span class="sy0">=</span> <span class="st0">&quot;$pathUpdatesBatch.sql&quot;</span>
&nbsp; &nbsp; <span class="re0">$stream</span> <span class="sy0">=</span> <span class="br0">&#91;</span>System.IO.StreamWriter<span class="br0">&#93;</span> <span class="st0">&quot;$outputPath&quot;</span>
&nbsp; &nbsp; <span class="re0">$fileUpdates</span> <span class="sy0">=</span> <span class="kw1">Get-ChildItem</span> <span class="st0">&quot;$UpdatesFolder&quot;</span>
&nbsp; &nbsp; <span class="re0">$datestamp</span> <span class="sy0">=</span> $<span class="br0">&#40;</span><span class="kw1">get-date</span> <span class="kw4">-f</span> <span class="st0">&quot;yyyy-MM-dd HH:mm&quot;</span><span class="br0">&#41;</span>
&nbsp;
&nbsp; &nbsp; <span class="re0">$stream</span>.WriteLine<span class="br0">&#40;</span><span class="st0">&quot;/* SQL Core Updates - Updated $datestamp */&quot;</span><span class="br0">&#41;</span>
&nbsp; &nbsp; <span class="re0">$stream</span>.WriteLine<span class="br0">&#40;</span><span class="st0">&quot;BEGIN TRANSACTION&quot;</span><span class="br0">&#41;</span>
&nbsp;
&nbsp; &nbsp; <span class="kw3">foreach</span><span class="br0">&#40;</span><span class="re0">$file</span> <span class="kw3">in</span> <span class="re0">$fileUpdates</span><span class="br0">&#41;</span>
&nbsp; &nbsp; <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="re0">$name</span> <span class="sy0">=</span> <span class="br0">&#40;</span><span class="re0">$file</span>.Name<span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="re0">$namewe</span> <span class="sy0">=</span> <span class="br0">&#40;</span><span class="br0">&#91;</span>System.IO.Path<span class="br0">&#93;</span>::GetFileNameWithoutExtension<span class="br0">&#40;</span><span class="re0">$name</span><span class="br0">&#41;</span><span class="br0">&#41;</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; <span class="re0">$stream</span>.WriteLine<span class="br0">&#40;</span><span class="st0">&quot;&quot;</span><span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="re0">$stream</span>.WriteLine<span class="br0">&#40;</span><span class="st0">&quot;/* File: $name */&quot;</span><span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="re0">$stream</span>.WriteLine<span class="br0">&#40;</span><span class="st0">&quot;IF NOT EXISTS (SELECT 1 FROM UpdateTracking WHERE Name = '$namewe')&quot;</span><span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="re0">$stream</span>.WriteLine<span class="br0">&#40;</span><span class="st0">&quot;BEGIN&quot;</span><span class="br0">&#41;</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; <span class="re0">$stream</span>.WriteLine<span class="br0">&#40;</span><span class="st0">&quot;<span class="es0">`t</span>Print 'Applying Update: $namewe'&quot;</span><span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="re0">$stream</span>.WriteLine<span class="br0">&#40;</span><span class="st0">&quot;<span class="es0">`t</span>EXEC('&quot;</span><span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#40;</span><span class="kw1">Get-Content</span> <span class="st0">&quot;$UpdatesFolder$name&quot;</span><span class="br0">&#41;</span> <span class="sy0">|</span> <span class="sy0">%</span> <span class="br0">&#123;</span><span class="kw6">$_</span> <span class="kw4">-replace</span> <span class="st0">&quot;'&quot;</span><span class="sy0">,</span> <span class="st0">&quot;''&quot;</span><span class="br0">&#125;</span> <span class="sy0">|</span> <span class="sy0">%</span> <span class="br0">&#123;</span><span class="re0">$stream</span>.WriteLine<span class="br0">&#40;</span><span class="st0">&quot;<span class="es0">`t</span><span class="es0">`t</span>$_&quot;</span><span class="br0">&#41;</span><span class="br0">&#125;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="re0">$stream</span>.WriteLine<span class="br0">&#40;</span><span class="st0">&quot;<span class="es0">`t</span>');&quot;</span><span class="br0">&#41;</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; <span class="re0">$stream</span>.WriteLine<span class="br0">&#40;</span><span class="st0">&quot;<span class="es0">`t</span>INSERT INTO UpdateTracking(Name, Applied) SELECT '$namewe', GETUTCDATE();&quot;</span><span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="re0">$stream</span>.WriteLine<span class="br0">&#40;</span><span class="st0">&quot;END&quot;</span><span class="br0">&#41;</span>
&nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp;
&nbsp; &nbsp; <span class="re0">$stream</span>.WriteLine<span class="br0">&#40;</span><span class="st0">&quot;COMMIT TRANSACTION&quot;</span><span class="br0">&#41;</span>
&nbsp; &nbsp; <span class="re0">$stream</span>.Close<span class="br0">&#40;</span><span class="br0">&#41;</span>
&nbsp; &nbsp; <span class="kw1">Write-Host</span> <span class="st0">&quot;Update Script Created.&quot;</span>
&nbsp;
&nbsp; &nbsp; <span class="kw1">Write-Host</span> <span class="st0">&quot;Running updates...&quot;</span>
&nbsp;
&nbsp; &nbsp; Invoke<span class="sy0">-</span>SqlCmd <span class="sy0">-</span>InputFile <span class="st0">&quot;$outputPath&quot;</span> <span class="sy0">-</span>ServerInstance <span class="st0">&quot;$Server&quot;</span> <span class="sy0">-</span>Username <span class="st0">&quot;$AdminUserName&quot;</span> <span class="sy0">-</span>Password <span class="st0">&quot;$AdminPassword&quot;</span> <span class="sy0">-</span>Database <span class="st0">&quot;$Database&quot;</span> <span class="kw5">-Verbose</span> <span class="kw5">-ErrorAction</span> Stop
&nbsp;
&nbsp; &nbsp; <span class="kw1">Remove-Item</span> <span class="st0">&quot;$outputPath&quot;</span>
&nbsp;
&nbsp; &nbsp; <span class="kw1">Write-Host</span> <span class="st0">&quot;Updates completed.&quot;</span>
<span class="br0">&#125;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">function ApplyDatabaseUpdates
{
    param (
        [parameter(Mandatory=$true)]
        [string]
        $UpdatesFolder,
        [parameter(Mandatory=$true)]
        [string]
        $Server,
        [parameter(Mandatory=$true)]
        [string]
        $Database,
        [parameter(Mandatory=$true)]
        [string]
        $AdminUserName,
        [parameter(Mandatory=$true)]
        [string]
        $AdminPassword
    )

    $path = (Get-Location).Path

    # For SQL 2008 - load the modules
    try{    
        if ( (Get-PSSnapin -Name SqlServerCmdletSnapin100 -ErrorAction SilentlyContinue) -eq $null -and (Get-PSSnapin -Registered -Name SqlServerCmdletSnapin100 -ErrorAction SilentlyContinue) -ne $null){
            Add-PSSnapin SqlServerCmdletSnapin100 -ErrorAction SilentlyContinue
            Add-PSSnapin SqlServerProviderSnapin100 -ErrorAction SilentlyContinue
        }
    }
    catch{
        Write-Error "Powershell Script error: $_" -EA Stop
    }

    #updates tracking
    try{
        Write-Host "Creating Update Tracking Table If Not Exists"
        Invoke-Sqlcmd -Query "IF NOT EXISTS (SELECT 1 FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME = 'UpdateTracking') CREATE TABLE UpdateTracking (UpdateTrackingKey int IDENTITY(1,1) PRIMARY KEY, Name varchar(255) NOT NULL, Applied DateTime NOT NULL);" -ServerInstance "$Server" -Username "$AdminUserName" -Password "$AdminPassword" -Database "$Database" -ErrorAction Stop
        Write-Host "Done"
    }
    catch{
        Write-Error "Powershell Script error: $_" -EA Stop
    }

    #database updates
    $outputPath = "$pathUpdatesBatch.sql"
    $stream = [System.IO.StreamWriter] "$outputPath"
    $fileUpdates = Get-ChildItem "$UpdatesFolder"
    $datestamp = $(get-date -f "yyyy-MM-dd HH:mm")

    $stream.WriteLine("/* SQL Core Updates - Updated $datestamp */")
    $stream.WriteLine("BEGIN TRANSACTION")

    foreach($file in $fileUpdates)
    {
        $name = ($file.Name)
        $namewe = ([System.IO.Path]::GetFileNameWithoutExtension($name))

        $stream.WriteLine("")
        $stream.WriteLine("/* File: $name */")
        $stream.WriteLine("IF NOT EXISTS (SELECT 1 FROM UpdateTracking WHERE Name = '$namewe')")
        $stream.WriteLine("BEGIN")

        $stream.WriteLine("`tPrint 'Applying Update: $namewe'")
        $stream.WriteLine("`tEXEC('")
        (Get-Content "$UpdatesFolder$name") | % {$_ -replace "'", "''"} | % {$stream.WriteLine("`t`t$_")}
        $stream.WriteLine("`t');")

        $stream.WriteLine("`tINSERT INTO UpdateTracking(Name, Applied) SELECT '$namewe', GETUTCDATE();")
        $stream.WriteLine("END")
    }

    $stream.WriteLine("COMMIT TRANSACTION")
    $stream.Close()
    Write-Host "Update Script Created."

    Write-Host "Running updates..."

    Invoke-SqlCmd -InputFile "$outputPath" -ServerInstance "$Server" -Username "$AdminUserName" -Password "$AdminPassword" -Database "$Database" -Verbose -ErrorAction Stop

    Remove-Item "$outputPath"

    Write-Host "Updates completed."
}</pre></div></div>

<p><i style="display: block; padding: 1em; margin: 1em; background-color: #eeeeee">Note: this has only been run in the context of my personal project. That means don&#8217;t copy, paste, and run it immediately against your production environment. Running stuff blindly from the internet is known as both a bad idea and a career limiting maneuver.</i></p>
<h3>Update____Database.ps1</h3>
<p>My application has two databases which it will access via different accounts. I want the ability to rebuild these databases from scratch as well as manage their credentials from an external system (in this case, TeamCity). If the worst should happen and these databases are compromised or overwritten in some fashion, I want to be able to recreate them with new credentials, account names, the works. </p>
<p>To make life more difficult, many of these commands have to be executed individually in order to work with Azure Databases.</p>
<p>Both scripts detect if their specified database exists and, if not, create them. The UpdateSampleDatabase is capable of recreating the database in Azure, provided some extra options are passed in to it (the Core Database script is missing this bit, unfortunately):</p>
<p><b>Excerpt from <a href="https://github.com/tarwn/SQLisHard/blob/master/Database/UpdateSampleDatabase.ps1" title="View on github">UpdateSampleDatabase.ps1</a>:</b></p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="powershell"><thead><tr><td colspan="2"  class="head">PowerShell</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
</pre></td><td class="de1"><pre class="de1">&nbsp; &nbsp; <span class="co1"># ...</span>
&nbsp;
&nbsp; &nbsp; <span class="co1">#database</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">Write-Host</span> <span class="st0">&quot;Checking database exists...&quot;</span>;
&nbsp; &nbsp; &nbsp; &nbsp; <span class="re0">$result</span> <span class="sy0">=</span> Invoke<span class="sy0">-</span>Sqlcmd <span class="kw5">-Query</span> <span class="st0">&quot;SELECT [name] FROM [sys].[databases] WHERE [name] = N'$database'&quot;</span> <span class="sy0">-</span>ServerInstance <span class="st0">&quot;$Server&quot;</span> <span class="sy0">-</span>Username <span class="st0">&quot;$AdminUserName&quot;</span> <span class="sy0">-</span>Password <span class="st0">&quot;$AdminPassword&quot;</span> <span class="sy0">-</span>Database <span class="st0">&quot;master&quot;</span> <span class="kw5">-ErrorAction</span> Stop
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw3">if</span><span class="br0">&#40;</span><span class="re0">$result</span>.name<span class="br0">&#41;</span><span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">Write-Host</span> <span class="st0">&quot;Database already exists&quot;</span>;
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw3">else</span><span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">Write-Host</span> <span class="st0">&quot;Creating Database: $database&quot;</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Invoke<span class="sy0">-</span>Sqlcmd <span class="kw5">-Query</span> <span class="st0">&quot;CREATE DATABASE $database&quot;</span> <span class="sy0">-</span>ServerInstance <span class="st0">&quot;$Server&quot;</span> <span class="sy0">-</span>Username <span class="st0">&quot;$AdminUserName&quot;</span> <span class="sy0">-</span>Password <span class="st0">&quot;$AdminPassword&quot;</span> <span class="sy0">-</span>Database <span class="st0">&quot;master&quot;</span> <span class="kw5">-ErrorAction</span> Stop
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Invoke<span class="sy0">-</span>Sqlcmd <span class="kw5">-Query</span> <span class="st0">&quot;ALTER DATABASE $database SET RECOVERY SIMPLE&quot;</span> <span class="sy0">-</span>ServerInstance <span class="st0">&quot;$Server&quot;</span> <span class="sy0">-</span>Username <span class="st0">&quot;$AdminUserName&quot;</span> <span class="sy0">-</span>Password <span class="st0">&quot;$AdminPassword&quot;</span> <span class="sy0">-</span>Database <span class="st0">&quot;master&quot;</span> <span class="kw5">-ErrorAction</span> Stop
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">Write-Host</span> <span class="st0">&quot;Created.&quot;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp;
&nbsp; &nbsp; <span class="co1"># ...</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">    # ...

    #database
        Write-Host "Checking database exists...";
        $result = Invoke-Sqlcmd -Query "SELECT [name] FROM [sys].[databases] WHERE [name] = N'$database'" -ServerInstance "$Server" -Username "$AdminUserName" -Password "$AdminPassword" -Database "master" -ErrorAction Stop
        if($result.name){
            Write-Host "Database already exists";
        }
        else{
            Write-Host "Creating Database: $database"

            Invoke-Sqlcmd -Query "CREATE DATABASE $database" -ServerInstance "$Server" -Username "$AdminUserName" -Password "$AdminPassword" -Database "master" -ErrorAction Stop
            Invoke-Sqlcmd -Query "ALTER DATABASE $database SET RECOVERY SIMPLE" -ServerInstance "$Server" -Username "$AdminUserName" -Password "$AdminPassword" -Database "master" -ErrorAction Stop
            Write-Host "Created."
        }

    # ...</pre></div></div>

<p>They also generate the users specified by the build server (which will also be dynamically added into the relevant web.config files for the website):</p>
<p><b>Excerpt from <a href="https://github.com/tarwn/SQLisHard/blob/master/Database/UpdateCoreDatabase.ps1" title="View on github">UpdateCoreDatabase.ps1</a>:</b></p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="powershell"><thead><tr><td colspan="2"  class="head">PowerShell</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
</pre></td><td class="de1"><pre class="de1">&nbsp; &nbsp; <span class="co1"># ...</span>
&nbsp;
&nbsp; &nbsp; <span class="co1">#user</span>
&nbsp; &nbsp; try<span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">Write-Host</span> <span class="st0">&quot;Creating User: $NewUserName&quot;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="re0">$result</span> <span class="sy0">=</span> Invoke<span class="sy0">-</span>Sqlcmd <span class="kw5">-Query</span> <span class="st0">&quot;SELECT [name] FROM sys.sql_logins WHERE name = '$NewUserName'&quot;</span> <span class="sy0">-</span>ServerInstance <span class="st0">&quot;$Server&quot;</span> <span class="sy0">-</span>Username <span class="st0">&quot;$AdminUserName&quot;</span> <span class="sy0">-</span>Password <span class="st0">&quot;$AdminPassword&quot;</span> <span class="sy0">-</span>Database <span class="st0">&quot;master&quot;</span> <span class="kw5">-ErrorAction</span> Stop
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw3">if</span><span class="br0">&#40;</span><span class="re0">$result</span>.name<span class="br0">&#41;</span><span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">Write-Host</span> <span class="st0">&quot;Login already exists&quot;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw3">else</span><span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">Write-Host</span> <span class="st0">&quot;Creating login...&quot;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Invoke<span class="sy0">-</span>Sqlcmd <span class="kw5">-Query</span> <span class="st0">&quot;CREATE LOGIN $NewUserName WITH PASSWORD = '$NewPassword'&quot;</span> <span class="sy0">-</span>ServerInstance <span class="st0">&quot;$Server&quot;</span> <span class="sy0">-</span>Username <span class="st0">&quot;$AdminUserName&quot;</span> <span class="sy0">-</span>Password <span class="st0">&quot;$AdminPassword&quot;</span> <span class="sy0">-</span>Database <span class="st0">&quot;master&quot;</span> <span class="kw5">-ErrorAction</span> Stop
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">Write-Host</span> <span class="st0">&quot;Login Created.&quot;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; <span class="re0">$result</span> <span class="sy0">=</span> Invoke<span class="sy0">-</span>Sqlcmd <span class="kw5">-Query</span> <span class="st0">&quot;SELECT [name] FROM sys.sysusers WHERE name = '$NewUserName'&quot;</span> <span class="sy0">-</span>ServerInstance <span class="st0">&quot;$Server&quot;</span> <span class="sy0">-</span>Username <span class="st0">&quot;$AdminUserName&quot;</span> <span class="sy0">-</span>Password <span class="st0">&quot;$AdminPassword&quot;</span> <span class="sy0">-</span>Database <span class="st0">&quot;$Database&quot;</span> <span class="kw5">-ErrorAction</span> Stop
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw3">if</span><span class="br0">&#40;</span><span class="re0">$result</span>.name<span class="br0">&#41;</span><span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">Write-Host</span> <span class="st0">&quot;User already exists&quot;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw3">else</span><span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">Write-Host</span> <span class="st0">&quot;Creating user...&quot;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Invoke<span class="sy0">-</span>Sqlcmd <span class="kw5">-Query</span> <span class="st0">&quot;CREATE USER $NewUserName FOR LOGIN $NewUserName WITH DEFAULT_SCHEMA = dbo&quot;</span> <span class="sy0">-</span>ServerInstance <span class="st0">&quot;$Server&quot;</span> <span class="sy0">-</span>Username <span class="st0">&quot;$AdminUserName&quot;</span> <span class="sy0">-</span>Password <span class="st0">&quot;$AdminPassword&quot;</span> <span class="sy0">-</span>Database <span class="st0">&quot;$Database&quot;</span> <span class="kw5">-ErrorAction</span> Stop
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Invoke<span class="sy0">-</span>Sqlcmd <span class="kw5">-Query</span> <span class="st0">&quot;EXEC sp_addrolemember 'db_datareader','$NewUserName'; EXEC sp_addrolemember 'db_datawriter','$NewUserName'&quot;</span> <span class="sy0">-</span>ServerInstance <span class="st0">&quot;$Server&quot;</span> <span class="sy0">-</span>Username <span class="st0">&quot;$AdminUserName&quot;</span> <span class="sy0">-</span>Password <span class="st0">&quot;$AdminPassword&quot;</span> <span class="sy0">-</span>Database <span class="st0">&quot;$Database&quot;</span> <span class="kw5">-ErrorAction</span> Stop
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">Write-Host</span> <span class="st0">&quot;User Created.&quot;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp; &nbsp; catch<span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">Write-Error</span> <span class="st0">&quot;Powershell Script error: $_&quot;</span> <span class="sy0">-</span>EA Stop
&nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp;
&nbsp; &nbsp; <span class="co1"># ...</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">    # ...

    #user
    try{
        Write-Host "Creating User: $NewUserName"
        $result = Invoke-Sqlcmd -Query "SELECT [name] FROM sys.sql_logins WHERE name = '$NewUserName'" -ServerInstance "$Server" -Username "$AdminUserName" -Password "$AdminPassword" -Database "master" -ErrorAction Stop
        if($result.name){
            Write-Host "Login already exists"
        }
        else{
            Write-Host "Creating login..."
            Invoke-Sqlcmd -Query "CREATE LOGIN $NewUserName WITH PASSWORD = '$NewPassword'" -ServerInstance "$Server" -Username "$AdminUserName" -Password "$AdminPassword" -Database "master" -ErrorAction Stop
            Write-Host "Login Created."
        }

        $result = Invoke-Sqlcmd -Query "SELECT [name] FROM sys.sysusers WHERE name = '$NewUserName'" -ServerInstance "$Server" -Username "$AdminUserName" -Password "$AdminPassword" -Database "$Database" -ErrorAction Stop
        if($result.name){
            Write-Host "User already exists"
        }
        else{
            Write-Host "Creating user..."
            Invoke-Sqlcmd -Query "CREATE USER $NewUserName FOR LOGIN $NewUserName WITH DEFAULT_SCHEMA = dbo" -ServerInstance "$Server" -Username "$AdminUserName" -Password "$AdminPassword" -Database "$Database" -ErrorAction Stop
            Invoke-Sqlcmd -Query "EXEC sp_addrolemember 'db_datareader','$NewUserName'; EXEC sp_addrolemember 'db_datawriter','$NewUserName'" -ServerInstance "$Server" -Username "$AdminUserName" -Password "$AdminPassword" -Database "$Database" -ErrorAction Stop
            Write-Host "User Created."
        }
    }
    catch{
        Write-Error "Powershell Script error: $_" -EA Stop
    }

    # ...</pre></div></div>

<p>Once the database and users are created, the SampleDatabase script produces a replacement for one of it&#8217;s script files that will contain some randomized data. The original file is a placeholder and produces an error if it hasn&#8217;t been replaced.</p>
<p><b>Excerpt from <a href="https://github.com/tarwn/SQLisHard/blob/master/Database/UpdateSampleDatabase.ps1" title="View on github">UpdateSampleDatabase.ps1</a>:</b></p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="powershell"><thead><tr><td colspan="2"  class="head">PowerShell</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
</pre></td><td class="de1"><pre class="de1">&nbsp; &nbsp; <span class="co1"># ...</span>
&nbsp;
<span class="co1"># ---------------------------------- Content Generation ---------------------------------------------</span>
<span class="co1"># Scripts to generate content dynamically and update the appropriate update script</span>
&nbsp;
&nbsp; &nbsp; <span class="co1">#generate customers table content</span>
&nbsp; &nbsp; <span class="re0">$CustomersContentPath</span> <span class="sy0">=</span> <span class="st0">&quot;$UpdatesFolder 002_CustomersData.sql&quot;</span>
&nbsp; &nbsp; try<span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">Write-Host</span> <span class="st0">&quot;Generating content script for dbo.Customers&quot;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="re0">$girlsnames</span> <span class="sy0">=</span> <span class="br0">&#40;</span><span class="st0">&quot;&lt;ns&gt;&lt;n&gt;&quot;</span> <span class="sy0">+</span> <span class="br0">&#91;</span><span class="re3">string</span><span class="br0">&#93;</span>::Join<span class="br0">&#40;</span><span class="st0">&quot;&lt;/n&gt;&lt;n&gt;&quot;</span><span class="sy0">,</span><span class="br0">&#40;</span><span class="kw1">Get-Content</span> <span class="st0">&quot;$pathDatagirlsforenames.txt&quot;</span><span class="br0">&#41;</span><span class="br0">&#41;</span> <span class="sy0">+</span> <span class="st0">&quot;&lt;/n&gt;&lt;/ns&gt;&quot;</span><span class="br0">&#41;</span>.Replace<span class="br0">&#40;</span><span class="st0">&quot;'&quot;</span><span class="sy0">,</span><span class="st0">&quot;''&quot;</span><span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="re0">$boysnames</span> <span class="sy0">=</span> &nbsp;<span class="br0">&#40;</span><span class="st0">&quot;&lt;ns&gt;&lt;n&gt;&quot;</span> <span class="sy0">+</span> <span class="br0">&#91;</span><span class="re3">string</span><span class="br0">&#93;</span>::Join<span class="br0">&#40;</span><span class="st0">&quot;&lt;/n&gt;&lt;n&gt;&quot;</span><span class="sy0">,</span><span class="br0">&#40;</span><span class="kw1">Get-Content</span> <span class="st0">&quot;$pathDataboysforenames.txt&quot;</span><span class="br0">&#41;</span><span class="br0">&#41;</span> <span class="sy0">+</span> <span class="st0">&quot;&lt;/n&gt;&lt;/ns&gt;&quot;</span><span class="br0">&#41;</span>.Replace<span class="br0">&#40;</span><span class="st0">&quot;'&quot;</span><span class="sy0">,</span><span class="st0">&quot;''&quot;</span><span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="re0">$lastnames</span> <span class="sy0">=</span> &nbsp;<span class="br0">&#40;</span><span class="st0">&quot;&lt;ns&gt;&lt;n&gt;&quot;</span> <span class="sy0">+</span> <span class="br0">&#91;</span><span class="re3">string</span><span class="br0">&#93;</span>::Join<span class="br0">&#40;</span><span class="st0">&quot;&lt;/n&gt;&lt;n&gt;&quot;</span><span class="sy0">,</span><span class="br0">&#40;</span><span class="kw1">Get-Content</span> <span class="st0">&quot;$pathDatasurnames.txt&quot;</span><span class="br0">&#41;</span><span class="br0">&#41;</span> <span class="sy0">+</span> <span class="st0">&quot;&lt;/n&gt;&lt;/ns&gt;&quot;</span><span class="br0">&#41;</span>.Replace<span class="br0">&#40;</span><span class="st0">&quot;'&quot;</span><span class="sy0">,</span><span class="st0">&quot;''&quot;</span><span class="br0">&#41;</span>
&nbsp; &nbsp; 
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#40;</span><span class="kw1">Get-Content</span> <span class="st0">&quot;$pathDataBulkImportNames.AzureFriendly.sql&quot;</span><span class="br0">&#41;</span> `
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="sy0">|</span> <span class="sy0">%</span> <span class="br0">&#123;</span><span class="kw6">$_</span> <span class="kw4">-replace</span> <span class="st0">&quot;{{GIRLSNAMES}}&quot;</span><span class="sy0">,</span> <span class="re0">$girlsnames</span><span class="br0">&#125;</span> `
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="sy0">|</span> <span class="sy0">%</span> <span class="br0">&#123;</span><span class="kw6">$_</span> <span class="kw4">-replace</span> <span class="st0">&quot;{{BOYSNAMES}}&quot;</span><span class="sy0">,</span> <span class="re0">$boysnames</span><span class="br0">&#125;</span> `
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="sy0">|</span> <span class="sy0">%</span> <span class="br0">&#123;</span><span class="kw6">$_</span> <span class="kw4">-replace</span> <span class="st0">&quot;{{LASTNAMES}}&quot;</span><span class="sy0">,</span> <span class="re0">$lastnames</span><span class="br0">&#125;</span> `
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="sy0">|</span> <span class="kw1">Set-Content</span> <span class="kw5">-path</span> <span class="st0">&quot;$CustomersContentPath&quot;</span>
&nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp; &nbsp; catch<span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">Write-Error</span> <span class="st0">&quot;Powershell Script error: $_&quot;</span> <span class="sy0">-</span>EA Stop
&nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp;
&nbsp; &nbsp; <span class="co1"># ...</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">    # ...

# ---------------------------------- Content Generation ---------------------------------------------
# Scripts to generate content dynamically and update the appropriate update script

    #generate customers table content
    $CustomersContentPath = "$UpdatesFolder 002_CustomersData.sql"
    try{
        Write-Host "Generating content script for dbo.Customers"
        $girlsnames = ("&lt;ns&gt;&lt;n&gt;" + [string]::Join("&lt;/n&gt;&lt;n&gt;",(Get-Content "$pathDatagirlsforenames.txt")) + "&lt;/n&gt;&lt;/ns&gt;").Replace("'","''")
        $boysnames =  ("&lt;ns&gt;&lt;n&gt;" + [string]::Join("&lt;/n&gt;&lt;n&gt;",(Get-Content "$pathDataboysforenames.txt")) + "&lt;/n&gt;&lt;/ns&gt;").Replace("'","''")
        $lastnames =  ("&lt;ns&gt;&lt;n&gt;" + [string]::Join("&lt;/n&gt;&lt;n&gt;",(Get-Content "$pathDatasurnames.txt")) + "&lt;/n&gt;&lt;/ns&gt;").Replace("'","''")
    
        (Get-Content "$pathDataBulkImportNames.AzureFriendly.sql") `
                        | % {$_ -replace "{{GIRLSNAMES}}", $girlsnames} `
                        | % {$_ -replace "{{BOYSNAMES}}", $boysnames} `
                        | % {$_ -replace "{{LASTNAMES}}", $lastnames} `
                        | Set-Content -path "$CustomersContentPath"
    }
    catch{
        Write-Error "Powershell Script error: $_" -EA Stop
    }

    # ...</pre></div></div>

<p>This generated data is a necessary part of the application that I initially replaced on each deployment, but now only use on new database deployments. Keeping it random and replaceable prevents the application code from making any assumptions about the data in this table.</p>
<p>The final step for both scripts is to run the ApplyDatabaseUpdates function on their respective folders and databases.</p>
<h3>RunLocally.sample.ps1</h3>
<p>The RunLocally.sample.ps1 script will bring a local development environment all the way up to the latest version without requiring me to type out a long series of arguments and credentials. It is basically just a list of hardcoded variables and then calls to the two Update______Database.ps1 scripts. </p>
<p><b>RunLocally.sample.ps1:</b></p>
<pre># 1) Copy this file to RunLocally.ps1
# 2) Open RunLocally.ps1 + substitute meaningful values for the variables below (update web.config connection strings also)
# 3) [Cross your fingers and] Run it 

$DbServer = "localhost"
$DbAdminUsername = "admin"
$DbAdminPassword = "password"

$DbSampleDatabase = "SampleDB"
$DbSampleReadUsername = "readuser"
$DbSampleReadPassword = "password"

$DbCoreDatabase = "CoreDB"
$DbCoreUsername = "coreuser"
$DbCorePassword = "password"

.UpdateSampleDatabase.ps1 -s $DbServer -d $DbSampleDatabase -nu $DbSampleReadUsername -np $DbSampleReadPassword -au $DbAdminUsername -ap $DbAdminPassword -DeleteGeneratedContentAfter $true

.UpdateCoreDatabase.ps1 -s $DbServer -d $DbCoreDatabase -nu $DbCoreUsername -np $DbCorePassword -au $DbAdminUsername -ap $DbAdminPassword</pre>
<p>The reason it is a sample file is because the real one is going to be different for my desktop and laptop and I knew if they were under source control I would constantly be accidentally committing them and having to change back and forth as I switched systems. To use it, I create a copy of the sample file, rename it to RunLocally.ps1 (which is ignored via the .gitignore for the project) and fill in the real values.</p>
<h2>Future Plans</h2>
<p>I&#8217;m not a fan of the libraries that try to abstract away the SQL in SQL deployments. I know SQL and don&#8217;t need to spend the time learning a library abstraction that, at best, can offer me no better control and ease of use then raw SQL. Many developers feel less than confident in their SQL skills and an abstracted library seems to reduce the need to learn SQL, but in reality the less you know about SQL the harder it will be to determine if the abstraction is doing what you think it is doing, and doing it in a safe and performant manner (and frequently the answer is &#8220;it&#8217;s not&#8221;).</p>
<p>This set of scripts evolved as a I built the project. In the future I&#8217;ll probably switch over to something like DbDeploy, as I mentioned earlier. Having the scripts in file system folders makes it easy to glance over the list to see what has changed, makes them easily accessible in my git repositories, can be copied and pasted (or opened and saved) directly from SSMS, and requires no extra tooling.</p>
<p><i>The scripts above are part of the deployment process for a personal project I have been working on called  <a href="http://SQLisHard.com/">SQLisHard.com</a>. Launching in the next few weeks (quietly), the site is designed to help people interactively learn or improve their SQL skills and help build the knowledge and confidence that comes from writing and solving real SQL problems.</i></p>
]]></content:encoded>
			<wfw:commentRss>/index.php/datamgmt/dbprogramming/deploying-database-changes-with-powershell/feed/</wfw:commentRss>
		<slash:comments>2</slash:comments>
		</item>
		<item>
		<title>Triggers affect on SQL System Variables</title>
		<link>/index.php/datamgmt/dbadmin/mssqlserveradmin/triggers-affect-on-sql-system/</link>
		<comments>/index.php/datamgmt/dbadmin/mssqlserveradmin/triggers-affect-on-sql-system/#comments</comments>
		<pubDate>Tue, 12 Mar 2013 19:35:00 +0000</pubDate>
		<dc:creator><![CDATA[Kevin Conan]]></dc:creator>
				<category><![CDATA[Microsoft SQL Server]]></category>
		<category><![CDATA[Microsoft SQL Server Admin]]></category>
		<category><![CDATA[@@rowcount]]></category>
		<category><![CDATA[identity]]></category>
		<category><![CDATA[sql]]></category>
		<category><![CDATA[trigger]]></category>

		<guid isPermaLink="false">/index.php/2013/03/triggers-affect-on-sql-system/</guid>
		<description><![CDATA[A while back I ran into an issue where a user was complaining about @@IDENTITY not always returning the value they expected.]]></description>
				<content:encoded><![CDATA[<p>A while back I ran into an issue where a user was complaining about @@IDENTITY not always returning the value they expected.  </p>
<p>This was happening on a table that was setup using 3rd party cross database platform replication software.  The software used triggers to capture the changes to the table to send them over to an Oracle table and a DB2 table.  The issue was caused by the trigger inserting records into another table that also had an identity column and that was being returned instead of the one from the original insert.</p>
<p>I used to also have a debate with a fellow DBA about @@ROWCOUNT.  I use it all the time and haven’t had any issues.  But I also wanted to know if triggers could affect it.<br />
Here is some sample code that illustrates how triggers affect @@IDENTITY, @@ROWCOUNT and also demonstrates SCOPE_IDENTITY().</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
</pre></td><td class="de1"><pre class="de1"><span class="kw1">CREATE</span> <span class="kw1">TABLE</span> tblTest <span class="br0">&#40;</span>col1 <span class="kw1">INT</span> <span class="kw1">IDENTITY</span> <span class="br0">&#40;</span><span class="nu0">1</span>,<span class="nu0">1</span><span class="br0">&#41;</span> <span class="sy0">NOT</span> <span class="sy0">NULL</span>, col2 <span class="kw1">INT</span> <span class="sy0">NULL</span><span class="br0">&#41;</span>;
&nbsp;
GO
&nbsp;
<span class="kw1">CREATE</span> <span class="kw1">TRIGGER</span> tr_ins_tblTest
&nbsp; &nbsp; <span class="kw1">ON</span> tblTest
&nbsp;<span class="kw1">AFTER</span> <span class="kw1">INSERT</span>
<span class="kw1">AS</span> 
<span class="kw1">BEGIN</span>
&nbsp; &nbsp; <span class="kw1">DECLARE</span> @<span class="kw1">int</span> <span class="kw1">AS</span> <span class="kw1">INT</span>;
&nbsp;
&nbsp; &nbsp; <span class="kw1">SELECT</span> @<span class="kw1">int</span> <span class="sy0">=</span> col1
&nbsp; &nbsp; &nbsp; <span class="kw1">FROM</span> inserted;
&nbsp;
&nbsp; &nbsp; <span class="kw1">INSERT</span> <span class="kw1">INTO</span> tblTest <span class="br0">&#40;</span>col2<span class="br0">&#41;</span> 
&nbsp; &nbsp; <span class="kw1">SELECT</span> @<span class="kw1">int</span>;
&nbsp;
&nbsp; &nbsp; <span class="kw1">SELECT</span>&nbsp; &nbsp;<span class="st0">'Inside Trigger 1'</span> <span class="kw1">AS</span> <span class="br0">&#91;</span><span class="kw1">Where</span><span class="br0">&#93;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ,<span class="kw2">@@ROWCOUNT</span> &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">AS</span> <span class="br0">&#91;</span>RowCount<span class="br0">&#93;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ,@@<span class="kw1">IDENTITY</span> &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">AS</span> <span class="br0">&#91;</span><span class="kw1">Identity</span><span class="br0">&#93;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ,<span class="kw2">SCOPE_IDENTITY</span><span class="br0">&#40;</span><span class="br0">&#41;</span> &nbsp; <span class="kw1">AS</span> <span class="br0">&#91;</span><span class="kw1">Scope</span> <span class="kw1">Identity</span><span class="br0">&#93;</span>;
&nbsp;
&nbsp; &nbsp; <span class="co1">--really try to mess with @@ROWCOUNT</span>
&nbsp; &nbsp; <span class="kw1">INSERT</span> <span class="kw1">INTO</span> tblTest <span class="br0">&#40;</span>col2<span class="br0">&#41;</span>
&nbsp; &nbsp; <span class="kw1">SELECT</span> <span class="nu0">10</span>
&nbsp; &nbsp; <span class="kw1">WHERE</span> <span class="nu0">1</span> <span class="sy0">=</span> <span class="nu0">2</span>;
&nbsp;
&nbsp; &nbsp; <span class="kw1">SELECT</span>&nbsp; &nbsp;<span class="st0">'Inside Trigger 2'</span> <span class="kw1">AS</span> <span class="br0">&#91;</span><span class="kw1">Where</span><span class="br0">&#93;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ,<span class="kw2">@@ROWCOUNT</span> &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">AS</span> <span class="br0">&#91;</span>RowCount<span class="br0">&#93;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ,@@<span class="kw1">IDENTITY</span> &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">AS</span> <span class="br0">&#91;</span><span class="kw1">Identity</span><span class="br0">&#93;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ,<span class="kw2">SCOPE_IDENTITY</span><span class="br0">&#40;</span><span class="br0">&#41;</span> &nbsp; <span class="kw1">AS</span> <span class="br0">&#91;</span><span class="kw1">Scope</span> <span class="kw1">Identity</span><span class="br0">&#93;</span>;
&nbsp; &nbsp; 
<span class="kw1">END</span>;
&nbsp;
GO
&nbsp;
<span class="kw1">INSERT</span> <span class="kw1">INTO</span> tblTest <span class="br0">&#40;</span>col2<span class="br0">&#41;</span> <span class="kw1">VALUES</span> <span class="br0">&#40;</span><span class="st0">'10'</span><span class="br0">&#41;</span>;
&nbsp;
<span class="kw1">SELECT</span>&nbsp; &nbsp;<span class="st0">'Outside Trigger'</span>&nbsp; <span class="kw1">AS</span> <span class="br0">&#91;</span><span class="kw1">Where</span><span class="br0">&#93;</span>
&nbsp; &nbsp; &nbsp; &nbsp; ,<span class="kw2">@@ROWCOUNT</span> &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">AS</span> <span class="br0">&#91;</span>RowCount<span class="br0">&#93;</span>
&nbsp; &nbsp; &nbsp; &nbsp; ,@@<span class="kw1">IDENTITY</span> &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">AS</span> <span class="br0">&#91;</span><span class="kw1">Identity</span><span class="br0">&#93;</span>
&nbsp; &nbsp; &nbsp; &nbsp; ,<span class="kw2">SCOPE_IDENTITY</span><span class="br0">&#40;</span><span class="br0">&#41;</span> &nbsp; <span class="kw1">AS</span> <span class="br0">&#91;</span><span class="kw1">Scope</span> <span class="kw1">Identity</span><span class="br0">&#93;</span>;
&nbsp;
GO
&nbsp;
<span class="kw1">DROP</span> <span class="kw1">TABLE</span> tblTest;</pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">CREATE TABLE tblTest (col1 INT IDENTITY (1,1) NOT NULL, col2 INT NULL);

GO

CREATE TRIGGER tr_ins_tblTest
    ON tblTest
 AFTER INSERT
AS 
BEGIN
	DECLARE @int AS INT;

	SELECT @int	= col1
	  FROM inserted;

	INSERT INTO tblTest (col2) 
	SELECT @int;

	SELECT	 'Inside Trigger 1'	AS [Where]
			,@@ROWCOUNT			AS [RowCount]
			,@@IDENTITY			AS [Identity]
			,SCOPE_IDENTITY()	AS [Scope Identity];

	--really try to mess with @@ROWCOUNT
	INSERT INTO tblTest (col2)
	SELECT 10
	WHERE 1 = 2;

	SELECT	 'Inside Trigger 2'	AS [Where]
			,@@ROWCOUNT			AS [RowCount]
			,@@IDENTITY			AS [Identity]
			,SCOPE_IDENTITY()	AS [Scope Identity];
	
END;

GO

INSERT INTO tblTest (col2) VALUES ('10');

SELECT	 'Outside Trigger'	AS [Where]
		,@@ROWCOUNT			AS [RowCount]
		,@@IDENTITY			AS [Identity]
		,SCOPE_IDENTITY()	AS [Scope Identity];

GO

DROP TABLE tblTest;</pre></div></div>

<p>Here is the output from the above code:</p>
<div class="image_block"><a href="/wp-content/uploads/users/kconan/reccount.JPG?mtime=1363124071"><img alt="" src="/wp-content/uploads/users/kconan/reccount.JPG?mtime=1363124071" width="327" height="144" /></a></div>
<p>So we can see that @@ROWCOUNT is not affected by the trigger.  However we also see that @@IDENTITY can be affected by triggers and the way to get around it is to use SCOPE_IDENTITY() instead.</p>
]]></content:encoded>
			<wfw:commentRss>/index.php/datamgmt/dbadmin/mssqlserveradmin/triggers-affect-on-sql-system/feed/</wfw:commentRss>
		<slash:comments>1</slash:comments>
		</item>
		<item>
		<title>Using SELECT * in views gotcha</title>
		<link>/index.php/datamgmt/dbadmin/using-select-in-views-gotcha/</link>
		<comments>/index.php/datamgmt/dbadmin/using-select-in-views-gotcha/#comments</comments>
		<pubDate>Tue, 12 Mar 2013 12:06:00 +0000</pubDate>
		<dc:creator><![CDATA[Kevin Conan]]></dc:creator>
				<category><![CDATA[Database Administration]]></category>
		<category><![CDATA[Microsoft SQL Server Admin]]></category>
		<category><![CDATA[sql]]></category>
		<category><![CDATA[views]]></category>

		<guid isPermaLink="false">/index.php/2013/03/using-select-in-views-gotcha/</guid>
		<description><![CDATA[If ever a DBA walked up a mountain and came back down with two stones that had 10 commandments written on them, “thou shalt not use SELECT *” would be one of them.  
However, that same DBA would turn around and within 5 minutes use it themselves!]]></description>
				<content:encoded><![CDATA[<p>If ever a DBA walked up a mountain and came back down with two stones that had 10 commandments written on them, “thou shalt not use SELECT *” would be one of them.  However, that same DBA would turn around and within 5 minutes use it themselves!</p>
<div class="image_block"><a href="/wp-content/uploads/users/kconan/moses.JPG?mtime=1363096883"><img alt="" src="/wp-content/uploads/users/kconan/moses.JPG?mtime=1363096883" width="233" height="311" /></a></div>
<p>One place that DBAs use SELECT * is when they create views.  The idea is that you do actually want every column available to the view because the query that hits that view should limit which columns it wants returned.</p>
<p>This works, but there is one big issue with it that most people learn the hard way.  If the schema of the source table that the view is selecting from changes, the view will NOT automatically update to include those changes.</p>
<p>For example, let’s create a simple table with some data and a view over it (because we are using really simple code, I’m not going format visually the way I normally do).</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
</pre></td><td class="de1"><pre class="de1"><span class="kw1">CREATE</span> <span class="kw1">TABLE</span> tblViewExample <span class="br0">&#40;</span>col1 <span class="kw1">INT</span> <span class="sy0">NULL</span><span class="br0">&#41;</span>;
GO
<span class="kw1">CREATE</span> <span class="kw1">VIEW</span> vViewExample <span class="kw1">AS</span> <span class="kw1">SELECT</span> <span class="sy0">*</span> <span class="kw1">FROM</span> tblViewExample
GO
<span class="kw1">INSERT</span> <span class="kw1">INTO</span> vViewExample <span class="br0">&#40;</span>col1<span class="br0">&#41;</span> <span class="kw1">VALUES</span> <span class="br0">&#40;</span><span class="nu0">1</span><span class="br0">&#41;</span>;
<span class="kw1">INSERT</span> <span class="kw1">INTO</span> vViewExample <span class="br0">&#40;</span>col1<span class="br0">&#41;</span> <span class="kw1">VALUES</span> <span class="br0">&#40;</span><span class="nu0">2</span><span class="br0">&#41;</span>;
<span class="kw1">INSERT</span> <span class="kw1">INTO</span> vViewExample <span class="br0">&#40;</span>col1<span class="br0">&#41;</span> <span class="kw1">VALUES</span> <span class="br0">&#40;</span><span class="nu0">3</span><span class="br0">&#41;</span>;
GO
<span class="kw1">SELECT</span> <span class="sy0">*</span> <span class="kw1">FROM</span> vViewExample;</pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">CREATE TABLE tblViewExample (col1 INT NULL);
GO
CREATE VIEW vViewExample AS SELECT * FROM tblViewExample
GO
INSERT INTO vViewExample (col1) VALUES (1);
INSERT INTO vViewExample (col1) VALUES (2);
INSERT INTO vViewExample (col1) VALUES (3);
GO
SELECT * FROM vViewExample;</pre></div></div>

<div class="image_block"><a href="/wp-content/uploads/users/kconan/view1.JPG?mtime=1363096883"><img alt="" src="/wp-content/uploads/users/kconan/view1.JPG?mtime=1363096883" width="67" height="83" /></a></div>
<p>I did break the rule of no SELECT * again but it’s to demonstrate the point of this article.<br />
So far everything is being returned as we expect it.  Now let’s change the schema of our table and see what happens.</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
</pre></td><td class="de1"><pre class="de1"><span class="kw1">ALTER</span> <span class="kw1">TABLE</span> tblViewExample <span class="kw1">ADD</span> col2 <span class="kw1">INT</span> <span class="sy0">NULL</span>;
GO
<span class="kw1">UPDATE</span> tblViewExample <span class="kw1">SET</span> col2 <span class="sy0">=</span> col1 <span class="sy0">*</span> <span class="nu0">5</span>;
GO
<span class="kw1">SELECT</span> <span class="sy0">*</span> <span class="kw1">FROM</span> vViewExample;</pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">ALTER TABLE tblViewExample ADD col2 INT NULL;
GO
UPDATE tblViewExample SET col2 = col1 * 5;
GO
SELECT * FROM vViewExample;</pre></div></div>

<div class="image_block"><a href="/wp-content/uploads/users/kconan/view1.JPG?mtime=1363096883"><img alt="" src="/wp-content/uploads/users/kconan/view1.JPG?mtime=1363096883" width="67" height="83" /></a></div>
<p>Notice that col2 is missing even though the view is using SELECT *.  Let’s see what happens if we try to use the view to insert a new record with data in col2.</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
</pre></td><td class="de1"><pre class="de1"><span class="kw1">INSERT</span> <span class="kw1">INTO</span> vViewExample <span class="br0">&#40;</span>col1, col2<span class="br0">&#41;</span> <span class="kw1">VALUES</span> <span class="br0">&#40;</span><span class="nu0">5</span>, <span class="nu0">5</span><span class="br0">&#41;</span>;</pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">INSERT INTO vViewExample (col1, col2) VALUES (5, 5);</pre></div></div>

<div class="image_block"><a href="/wp-content/uploads/users/kconan/view2.JPG?mtime=1363096883"><img alt="" src="/wp-content/uploads/users/kconan/view2.JPG?mtime=1363096883" width="245" height="38" /></a></div>
<p>To fix the “broken” view, we have to rebuild it.</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
</pre></td><td class="de1"><pre class="de1"><span class="kw1">DROP</span> <span class="kw1">VIEW</span> vViewExample;
GO
<span class="kw1">CREATE</span> <span class="kw1">VIEW</span> vViewExample <span class="kw1">AS</span> <span class="kw1">SELECT</span> <span class="sy0">*</span> <span class="kw1">FROM</span> tblViewExample</pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">DROP VIEW vViewExample;
GO
CREATE VIEW vViewExample AS SELECT * FROM tblViewExample</pre></div></div>

<p>Now let’s try the insert statement again and then the select statement.</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
</pre></td><td class="de1"><pre class="de1"><span class="kw1">INSERT</span> <span class="kw1">INTO</span> vViewExample <span class="br0">&#40;</span>col1, col2<span class="br0">&#41;</span> <span class="kw1">VALUES</span> <span class="br0">&#40;</span><span class="nu0">5</span>, <span class="nu0">5</span><span class="br0">&#41;</span>;
&nbsp;
<span class="kw1">SELECT</span> <span class="sy0">*</span> <span class="kw1">FROM</span> vViewExample;</pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">INSERT INTO vViewExample (col1, col2) VALUES (5, 5);

SELECT * FROM vViewExample;</pre></div></div>

<div class="image_block"><a href="/wp-content/uploads/users/kconan/view3.JPG?mtime=1363096883"><img alt="" src="/wp-content/uploads/users/kconan/view3.JPG?mtime=1363096883" width="108" height="102" /></a></div>
<p>And of course, let’s clean up after ourselves!</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
</pre></td><td class="de1"><pre class="de1"><span class="kw1">DROP</span> <span class="kw1">VIEW</span> vViewExample;
<span class="kw1">DROP</span> <span class="kw1">TABLE</span> tblViewExample;</pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">DROP VIEW vViewExample;
DROP TABLE tblViewExample;</pre></div></div>

]]></content:encoded>
			<wfw:commentRss>/index.php/datamgmt/dbadmin/using-select-in-views-gotcha/feed/</wfw:commentRss>
		<slash:comments>3</slash:comments>
		</item>
		<item>
		<title>SSRS &#8211; Linking one report to another report</title>
		<link>/index.php/datamgmt/ssrs/ssrs-linking-one-report-to/</link>
		<comments>/index.php/datamgmt/ssrs/ssrs-linking-one-report-to/#comments</comments>
		<pubDate>Wed, 13 Feb 2013 18:09:00 +0000</pubDate>
		<dc:creator><![CDATA[Kevin Conan]]></dc:creator>
				<category><![CDATA[Business Intelligence]]></category>
		<category><![CDATA[SSRS]]></category>
		<category><![CDATA[sql]]></category>
		<category><![CDATA[ssrs]]></category>

		<guid isPermaLink="false">/index.php/2013/02/ssrs-linking-one-report-to/</guid>
		<description><![CDATA[When creating reports, I try to keep them simple, clean and with as little information as possible.]]></description>
				<content:encoded><![CDATA[<p>When creating reports, I try to keep them simple, clean and with as little information as possible.  What I mean by as little information as possible is that I try to keep the information summarized so that the value of the report isn’t lost in a sea of details.  However, for some reports you still need those details to back up the summary and to allow for digging deeper into issues.</p>
<p>What I have found works well is to add links in the summary report to the detail report.  This approach allows us to pass in parameters to it and still limit the detail report to just the information that is needed.  </p>
<p>To create a link in a report, you go to the Text Box Properties of the text box that you want to be the link, choose Action on the left side and then the “Go to report” radio button option.  </p>
<div class="image_block"><a href="/wp-content/uploads/users/kconan/SSRS - action.JPG?mtime=1360785989"><img alt="" src="/wp-content/uploads/users/kconan/SSRS - action.JPG?mtime=1360785989" width="580" height="525" /></a></div>
<p>If you are using Visual Studio, the dropdown list under “Specify a report” will be populated with included reports in your project.  You can also use the expression builder to key in the name of the report you are linking to.  The name you key in is the published report name and the .rdl file name.  This screen also allows you to specify what parameters you want to pass into the detail report.</p>
<p>When you publish the summary and detail reports, if you publish them to the same directory then the summary report will automatically find the detail report when the link is clicked.</p>
]]></content:encoded>
			<wfw:commentRss>/index.php/datamgmt/ssrs/ssrs-linking-one-report-to/feed/</wfw:commentRss>
		<slash:comments>1</slash:comments>
		</item>
		<item>
		<title>SQL Advent 2012 Day 4: Triggers, what to do, what not to do</title>
		<link>/index.php/datamgmt/dbprogramming/triggers-what-to-do-what/</link>
		<comments>/index.php/datamgmt/dbprogramming/triggers-what-to-do-what/#comments</comments>
		<pubDate>Tue, 04 Dec 2012 10:04:00 +0000</pubDate>
		<dc:creator><![CDATA[SQLDenis]]></dc:creator>
				<category><![CDATA[Business Intelligence]]></category>
		<category><![CDATA[Database Programming]]></category>
		<category><![CDATA[Microsoft SQL Server]]></category>
		<category><![CDATA[Microsoft SQL Server Admin]]></category>
		<category><![CDATA[database]]></category>
		<category><![CDATA[ddl triggers]]></category>
		<category><![CDATA[dml triggers]]></category>
		<category><![CDATA[rdbms]]></category>
		<category><![CDATA[sql]]></category>
		<category><![CDATA[sql server 2008]]></category>
		<category><![CDATA[sql server 2012]]></category>
		<category><![CDATA[t-sql]]></category>
		<category><![CDATA[triggers]]></category>

		<guid isPermaLink="false">/index.php/2012/12/triggers-what-to-do-what/</guid>
		<description><![CDATA[This is day four of the SQL Advent 2012 series of blog posts. Today we are going to look at triggers. Triggers are a great way to keep your database in a consistent state. There are two types of triggers, DML triggers and DLL triggers. DML triggers  res&#8230;]]></description>
				<content:encoded><![CDATA[<p>This is day four of the <a href="/index.php/DataMgmt/DBProgramming/sql-advent-2012-here-is">SQL Advent 2012 series</a> of blog posts. Today we are going to look at triggers. Triggers are a great way to keep your database in a consistent state. There are two types of triggers, DML triggers and DLL triggers. DML triggers  respond to Data Manipulation Statements (Insert, Delete, Update) DDL triggers respond to Data Definition Language events. </p>
<p>Some things that DML triggers are used for:</p>
<ul>
<li>Keeps your databases from having wrong data by doing checks that can&#8217;t be handled with constraints</li>
<li>Filling in values that are not supplied and can&#8217;t be handled through default constraints since these don&#8217;t fire on updates </li>
<li>Calculation summary values and updates the summary table with that value</li>
<li>Used as a mechanism to maintain an audit trail for DML statements</li>
</ul>
<p>Some things that DDL triggers are used for:</p>
<ul>
<li>Automatically add columns to a table if they were not added, for example LastUpdated and InsertedBy columns</li>
<li>Notify a DBA when a database has been created, dropped or altered</li>
<li>Used as a mechanism to maintain an audit trail for DDL statements, capture every time an object has been created, dropped or altered and by who</li>
</ul>
<p>Most common mistake people make when first starting writing triggers is that they write it in such a way that it will only work if you insert/update/delete one row at a time. A trigger fires per batch not per row, you have to take this into consideration otherwise your DML statements will blow up. How to do this is explained in this post <a href="/index.php/DataMgmt/DBProgramming/MSSQLServer/best-practice-coding-sql-server-triggers">Best Practice: Coding SQL Server triggers for multi-row operations</a>, there is no point recreating that post here.</p>
<p>Another problem that I see is that some people think a trigger is SQL Server&#8217;s version of crontab, you will see code that sends email, kicks off jobs, runs stored procedures. This is the wrong approach, a trigger should be lean and mean, it should execute as fast as possible, if you need to do some additional things then dump some data from the trigger into a processing table and then use that table to do your additional tasks. Don&#8217;t use triggers as a messaging system either, SQL Server comes with Service Broker, use that instead. Triggers might look like hammers to some people but I guarantee you not everything is a nail&#8230;.</p>
<p>You could end up with a real difficult thing to debug, one trigger that kicks off other triggers, now have fun debugging the trigger hell you got yourself into&#8230;.or worse debug this mess if you inherited this&#8230;.this is like the GOTO spaghetti code of databases.</p>
<p>Since triggers work besides the scenes you might spend hours debugging something only to find out that a trigger modified the value</p>
<p>One thing I always find interesting is when someone sees two <em>n rows affected</em> statements when they only did one insert, you know a person like that has not been exposed to triggers yet</p>
<p>Some people will say that you don&#8217;t need triggers for anything and that they do more harm than good, I myself don&#8217;t agree with that, triggers have a place but they should not be abused and overused, the same can be said of views</p>
<p>What is your opinion, are triggers needed or are they not needed?</p>
<p>That is all for day four of the <a href="/index.php/DataMgmt/DBProgramming/sql-advent-2012-here-is">SQL Advent 2012 series</a>, come back tomorrow for the next one, you can also check out all the posts from last year here: <a href="/index.php/DataMgmt/DataDesign/sql-advent-2011-recap">SQL Advent 2011 Recap</a></p>
]]></content:encoded>
			<wfw:commentRss>/index.php/datamgmt/dbprogramming/triggers-what-to-do-what/feed/</wfw:commentRss>
		<slash:comments>2</slash:comments>
		</item>
		<item>
		<title>SQL Advent 2012 Day 3: Sargable Queries</title>
		<link>/index.php/datamgmt/dbprogramming/sargable-queries/</link>
		<comments>/index.php/datamgmt/dbprogramming/sargable-queries/#comments</comments>
		<pubDate>Mon, 03 Dec 2012 13:44:00 +0000</pubDate>
		<dc:creator><![CDATA[SQLDenis]]></dc:creator>
				<category><![CDATA[Business Intelligence]]></category>
		<category><![CDATA[Database Programming]]></category>
		<category><![CDATA[Microsoft SQL Server]]></category>
		<category><![CDATA[Microsoft SQL Server Admin]]></category>
		<category><![CDATA[database]]></category>
		<category><![CDATA[indexing]]></category>
		<category><![CDATA[performance tuning]]></category>
		<category><![CDATA[rdbms]]></category>
		<category><![CDATA[sargable]]></category>
		<category><![CDATA[sql]]></category>
		<category><![CDATA[sql server 2008]]></category>
		<category><![CDATA[sql server 2012]]></category>
		<category><![CDATA[t-sql]]></category>

		<guid isPermaLink="false">/index.php/2012/12/sargable-queries/</guid>
		<description><![CDATA[This is day three of the SQL Advent 2012 series of blog posts. Today we are going to look at sargable queries. You might ask yourself, what is this weird term sargable. Sargable  comes from searchable argument, sometimes also referred as Search ARGument&#8230;]]></description>
				<content:encoded><![CDATA[<p>This is day three of the <a href="/index.php/DataMgmt/DBProgramming/sql-advent-2012-here-is">SQL Advent 2012 series</a> of blog posts. Today we are going to look at sargable queries. You might ask yourself, what is this weird term sargable. Sargable  comes from searchable argument, sometimes also referred as <span class="MT_red">S</span>earch <span class="MT_red">ARG</span>ument <span class="MT_red">ABLE</span>. What that means is that the query will be able to use an index, a seek will be performed instead of a scan. In general any time you have a function wrapped around a column, an index won&#8217;t be used</p>
<p>Some examples that are not sargable </p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
</pre></td><td class="de1"><pre class="de1"><span class="kw1">WHERE</span> <span class="kw1">LEFT</span><span class="br0">&#40;</span>Name,<span class="nu0">1</span><span class="br0">&#41;</span> <span class="sy0">=</span> <span class="st0">'S'</span>
<span class="kw1">WHERE</span> <span class="kw1">Year</span><span class="br0">&#40;</span>SomeDate<span class="br0">&#41;</span> <span class="sy0">=</span> <span class="nu0">2012</span>
<span class="kw1">WHERE</span> OrderID <span class="sy0">*</span> <span class="nu0">3</span> <span class="sy0">=</span> <span class="nu0">33000</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">WHERE LEFT(Name,1) = 'S'
WHERE Year(SomeDate) = 2012
WHERE OrderID * 3 = 33000</pre></div></div>

<p>Those three should be rewritten like this in order to become sargable </p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
</pre></td><td class="de1"><pre class="de1"><span class="kw1">WHERE</span> Name <span class="sy0">LIKE</span> <span class="st0">'S%'</span>
<span class="kw1">WHERE</span> SomeDate <span class="sy0">&gt;=</span> <span class="st0">'20120101'</span> <span class="sy0">AND</span> SomeDate <span class="sy0">&lt;</span> <span class="st0">'20130101'</span>
<span class="kw1">WHERE</span> OrderID <span class="sy0">=</span> <span class="nu0">33000</span><span class="sy0">/</span><span class="nu0">3</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">WHERE Name LIKE 'S%'
WHERE SomeDate &gt;= '20120101' AND SomeDate &lt; '20130101'
WHERE OrderID = 33000/3</pre></div></div>

<p>Let&#8217;s create a table, insert some data so that we can look at the execution plan<br />
Create this simple table</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
</pre></td><td class="de1"><pre class="de1"><span class="kw1">CREATE</span> <span class="kw1">TABLE</span> Test<span class="br0">&#40;</span>SomeID <span class="kw1">varchar</span><span class="br0">&#40;</span><span class="nu0">100</span><span class="br0">&#41;</span><span class="br0">&#41;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">CREATE TABLE Test(SomeID varchar(100))</pre></div></div>

<p>Let&#8217;s insert some data that will start with a letter followed by some digits</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
</pre></td><td class="de1"><pre class="de1"><span class="kw1">INSERT</span> Test
<span class="kw1">SELECT</span> <span class="kw1">LEFT</span><span class="br0">&#40;</span>v2.<span class="me1">type</span>,<span class="nu0">1</span><span class="br0">&#41;</span> <span class="sy0">+</span><span class="kw1">RIGHT</span><span class="br0">&#40;</span><span class="st0">'0000'</span> <span class="sy0">+</span> <span class="kw1">CONVERT</span><span class="br0">&#40;</span><span class="kw1">varchar</span><span class="br0">&#40;</span><span class="nu0">4</span><span class="br0">&#41;</span>,v1.<span class="me1">number</span><span class="br0">&#41;</span>,<span class="nu0">4</span><span class="br0">&#41;</span> 
<span class="kw1">FROM</span> master..<span class="me1">spt_values</span> v1
<span class="sy0">CROSS</span> <span class="sy0">JOIN</span> <span class="br0">&#40;</span><span class="kw1">SELECT</span> <span class="kw1">DISTINCT</span> <span class="kw1">LEFT</span><span class="br0">&#40;</span>type,<span class="nu0">1</span><span class="br0">&#41;</span> <span class="kw1">AS</span> type 
<span class="kw1">FROM</span> master..<span class="me1">spt_values</span><span class="br0">&#41;</span> v2
<span class="kw1">WHERE</span> v1.<span class="me1">type</span> <span class="sy0">=</span> <span class="st0">'p'</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">INSERT Test
SELECT LEFT(v2.type,1) +RIGHT('0000' + CONVERT(varchar(4),v1.number),4) 
FROM master..spt_values v1
CROSS JOIN (SELECT DISTINCT LEFT(type,1) AS type 
FROM master..spt_values) v2
WHERE v1.type = 'p'</pre></div></div>

<p>That insert should have generated 32768 rows</p>
<p>Now create this index on that table</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
</pre></td><td class="de1"><pre class="de1"><span class="kw1">CREATE</span> <span class="kw1">CLUSTERED</span> <span class="kw1">INDEX</span> cx_test <span class="kw1">ON</span> Test<span class="br0">&#40;</span>SomeID<span class="br0">&#41;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">CREATE CLUSTERED INDEX cx_test ON Test(SomeID)</pre></div></div>

<p>Let&#8217;s take a look at the execution plan, hit CTRL + M, this will add the execution plan once the query is done running</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
</pre></td><td class="de1"><pre class="de1"><span class="kw1">SELECT</span> <span class="sy0">*</span> <span class="kw1">FROM</span> Test
<span class="kw1">WHERE</span> SomeID <span class="sy0">LIKE</span> <span class="st0">'s%'</span>
&nbsp;
<span class="kw1">SELECT</span> <span class="sy0">*</span> <span class="kw1">FROM</span> Test
<span class="kw1">WHERE</span> <span class="kw1">LEFT</span><span class="br0">&#40;</span>SomeID,<span class="nu0">1</span><span class="br0">&#41;</span> <span class="sy0">=</span> <span class="st0">'s'</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">SELECT * FROM Test
WHERE SomeID LIKE 's%'

SELECT * FROM Test
WHERE LEFT(SomeID,1) = 's'</pre></div></div>

<p>Here is what the plans looks like</p>
<div class="image_block"><a href="/wp-content/uploads/blogs/DataMgmt/Denis/Excecutionplan.PNG?mtime=1354498760"><img alt="" src="/wp-content/uploads/blogs/DataMgmt/Denis/Excecutionplan.PNG?mtime=1354498760" width="447" height="295" /></a></div>
<p>As you can see it is 9% versus 91% between the two queries, that is a big difference<br />
Hit CTRL + M again to disable the inclusion of the plan</p>
<p>Run this codeblock, it will give you the plans in a text format</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
</pre></td><td class="de1"><pre class="de1"><span class="kw1">SET</span> SHOWPLAN_TEXT <span class="kw1">ON</span>
GO
&nbsp;
<span class="kw1">SELECT</span> <span class="sy0">*</span> <span class="kw1">FROM</span> Test
<span class="kw1">WHERE</span> SomeID <span class="sy0">LIKE</span> <span class="st0">'s%'</span>
&nbsp;
<span class="kw1">SELECT</span> <span class="sy0">*</span> <span class="kw1">FROM</span> Test
<span class="kw1">WHERE</span> <span class="kw1">LEFT</span><span class="br0">&#40;</span>SomeID,<span class="nu0">1</span><span class="br0">&#41;</span> <span class="sy0">=</span> <span class="st0">'s'</span>
GO
&nbsp;
<span class="kw1">SET</span> SHOWPLAN_TEXT <span class="kw1">OFF</span>
GO</pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">SET SHOWPLAN_TEXT ON
GO

SELECT * FROM Test
WHERE SomeID LIKE 's%'

SELECT * FROM Test
WHERE LEFT(SomeID,1) = 's'
GO

SET SHOWPLAN_TEXT OFF
GO</pre></div></div>

<p>Here are the two plans</p>
<blockquote><p>|&#8211;Clustered Index Seek(OBJECT:([master].[dbo].[Test].[cx_test]),<br />
  SEEK:([master].[dbo].[Test].[SomeID] >= &#8216;Rþ&#8217; AND [master].[dbo].[Test].[SomeID] < 'T'),  
  WHERE:([master].[dbo].[Test].[SomeID] like 's%') ORDERED FORWARD)

    |--Clustered Index Scan(OBJECT:([master].[dbo].[Test].[cx_test]), 
	WHERE:(substring([master].[dbo].[Test].[SomeID],(1),(1))='s'))
</p></blockquote>
<p>As you can see the top one while looking more complicated is actually giving you a seek</p>
<h2>Making a case sensitive search sargable</h2>
<p>Now let&#8217;s take a look at how we can make a case sensitive search sargable as well<br />
In order to do a search and make it case sensitive, you have to have a case sensitive collation, if your table is not created with a case sensitive collation then you can supply it as part of the query</p>
<p>Here is an example to demonstrate what I mean</p>
<p>This is a simple table created without a collation</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
</pre></td><td class="de1"><pre class="de1"><span class="kw1">CREATE</span> <span class="kw1">TABLE</span> TempCase1 <span class="br0">&#40;</span>Val <span class="kw1">CHAR</span><span class="br0">&#40;</span><span class="nu0">1</span><span class="br0">&#41;</span><span class="br0">&#41;</span>
<span class="kw1">INSERT</span> TempCase1 <span class="kw1">VALUES</span><span class="br0">&#40;</span><span class="st0">'A'</span><span class="br0">&#41;</span>
<span class="kw1">INSERT</span> TempCase1 <span class="kw1">VALUES</span><span class="br0">&#40;</span><span class="st0">'a'</span><span class="br0">&#41;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">CREATE TABLE TempCase1 (Val CHAR(1))
INSERT TempCase1 VALUES('A')
INSERT TempCase1 VALUES('a')</pre></div></div>

<p>Running this select statement will return both rows </p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
</pre></td><td class="de1"><pre class="de1"><span class="kw1">SELECT</span> <span class="sy0">*</span> <span class="kw1">FROM</span> TempCase1
<span class="kw1">WHERE</span> Val <span class="sy0">=</span> <span class="st0">'A'</span> </pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">SELECT * FROM TempCase1
WHERE Val = 'A' </pre></div></div>

<p>Val<br />
&#8212;&#8211;<br />
A<br />
a</p>
<p>Now create the same kind of table but with a case sensitive collation</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
</pre></td><td class="de1"><pre class="de1"><span class="kw1">CREATE</span> <span class="kw1">TABLE</span> TempCase2 <span class="br0">&#40;</span>Val <span class="kw1">CHAR</span><span class="br0">&#40;</span><span class="nu0">1</span><span class="br0">&#41;</span> <span class="kw1">COLLATE</span> SQL_Latin1_General_CP1_CS_AS<span class="br0">&#41;</span>
<span class="kw1">INSERT</span> TempCase2 <span class="kw1">VALUES</span><span class="br0">&#40;</span><span class="st0">'A'</span><span class="br0">&#41;</span>
<span class="kw1">INSERT</span> TempCase2 <span class="kw1">VALUES</span><span class="br0">&#40;</span><span class="st0">'a'</span><span class="br0">&#41;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">CREATE TABLE TempCase2 (Val CHAR(1) COLLATE SQL_Latin1_General_CP1_CS_AS)
INSERT TempCase2 VALUES('A')
INSERT TempCase2 VALUES('a')</pre></div></div>

<p>Run the same query</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
</pre></td><td class="de1"><pre class="de1"><span class="kw1">SELECT</span> <span class="sy0">*</span> <span class="kw1">FROM</span> TempCase2
<span class="kw1">WHERE</span> Val <span class="sy0">=</span> <span class="st0">'A'</span> </pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">SELECT * FROM TempCase2
WHERE Val = 'A' </pre></div></div>

<p>Val<br />
&#8212;&#8211;<br />
A</p>
<p>As you can see you only get the one row now that matches the case</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
</pre></td><td class="de1"><pre class="de1"><span class="kw1">SELECT</span> <span class="sy0">*</span> <span class="kw1">FROM</span> TempCase1
<span class="kw1">WHERE</span> Val <span class="sy0">=</span> <span class="st0">'A'</span> <span class="kw1">COLLATE</span> SQL_Latin1_General_CP1_CS_AS</pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">SELECT * FROM TempCase1
WHERE Val = 'A' COLLATE SQL_Latin1_General_CP1_CS_AS</pre></div></div>

<p>Val<br />
&#8212;&#8211;<br />
A<br />
a</p>
<p>Now let&#8217;s take a look at how we can make the case sensitive search sargable</p>
<p>First create this table and insert some data</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
</pre></td><td class="de1"><pre class="de1"><span class="kw1">CREATE</span> <span class="kw1">TABLE</span> TempCase <span class="br0">&#40;</span>Val <span class="kw1">CHAR</span><span class="br0">&#40;</span><span class="nu0">1</span><span class="br0">&#41;</span><span class="br0">&#41;</span>
&nbsp;
<span class="kw1">INSERT</span> TempCase <span class="kw1">VALUES</span><span class="br0">&#40;</span><span class="st0">'A'</span><span class="br0">&#41;</span>
<span class="kw1">INSERT</span> TempCase <span class="kw1">VALUES</span><span class="br0">&#40;</span><span class="st0">'B'</span><span class="br0">&#41;</span>
<span class="kw1">INSERT</span> TempCase <span class="kw1">VALUES</span><span class="br0">&#40;</span><span class="st0">'C'</span><span class="br0">&#41;</span>
<span class="kw1">INSERT</span> TempCase <span class="kw1">VALUES</span><span class="br0">&#40;</span><span class="st0">'D'</span><span class="br0">&#41;</span>
<span class="kw1">INSERT</span> TempCase <span class="kw1">VALUES</span><span class="br0">&#40;</span><span class="st0">'E'</span><span class="br0">&#41;</span>
<span class="kw1">INSERT</span> TempCase <span class="kw1">VALUES</span><span class="br0">&#40;</span><span class="st0">'F'</span><span class="br0">&#41;</span>
<span class="kw1">INSERT</span> TempCase <span class="kw1">VALUES</span><span class="br0">&#40;</span><span class="st0">'G'</span><span class="br0">&#41;</span>
<span class="kw1">INSERT</span> TempCase <span class="kw1">VALUES</span><span class="br0">&#40;</span><span class="st0">'H'</span><span class="br0">&#41;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">CREATE TABLE TempCase (Val CHAR(1))
 
INSERT TempCase VALUES('A')
INSERT TempCase VALUES('B')
INSERT TempCase VALUES('C')
INSERT TempCase VALUES('D')
INSERT TempCase VALUES('E')
INSERT TempCase VALUES('F')
INSERT TempCase VALUES('G')
INSERT TempCase VALUES('H')</pre></div></div>

<p>Now we will insert some lowercase characters</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
</pre></td><td class="de1"><pre class="de1"><span class="kw1">INSERT</span> TempCase
<span class="kw1">SELECT</span> <span class="kw2">LOWER</span><span class="br0">&#40;</span>Val<span class="br0">&#41;</span> <span class="kw1">FROM</span> TempCase</pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">INSERT TempCase
SELECT LOWER(Val) FROM TempCase</pre></div></div>

<p>Now we will create our real table which will have 65536 rows</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
</pre></td><td class="de1"><pre class="de1"><span class="kw1">CREATE</span> <span class="kw1">TABLE</span> CaseSensitiveSearch <span class="br0">&#40;</span>Val <span class="kw1">VARCHAR</span><span class="br0">&#40;</span><span class="nu0">50</span><span class="br0">&#41;</span><span class="br0">&#41;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">CREATE TABLE CaseSensitiveSearch (Val VARCHAR(50))</pre></div></div>

<p>We will do a couple of cross joins to generate the data for our queries</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
</pre></td><td class="de1"><pre class="de1"><span class="kw1">INSERT</span> CaseSensitiveSearch
<span class="kw1">SELECT</span> t1.<span class="me1">val</span> <span class="sy0">+</span> t2.<span class="me1">val</span> <span class="sy0">+</span> t3.<span class="me1">val</span> <span class="sy0">+</span> t4.<span class="me1">val</span>
<span class="kw1">FROM</span> TempCase t1
<span class="sy0">CROSS</span> <span class="sy0">JOIN</span> TempCase t2
<span class="sy0">CROSS</span> <span class="sy0">JOIN</span> TempCase t3
<span class="sy0">CROSS</span> <span class="sy0">JOIN</span> TempCase t4</pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">INSERT CaseSensitiveSearch
SELECT t1.val + t2.val + t3.val + t4.val
FROM TempCase t1
CROSS JOIN TempCase t2
CROSS JOIN TempCase t3
CROSS JOIN TempCase t4</pre></div></div>

<p>Create an index on the table</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
</pre></td><td class="de1"><pre class="de1"><span class="kw1">CREATE</span> <span class="kw1">INDEX</span> IX_SearchVal <span class="kw1">ON</span> CaseSensitiveSearch<span class="br0">&#40;</span>Val<span class="br0">&#41;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">CREATE INDEX IX_SearchVal ON CaseSensitiveSearch(Val)</pre></div></div>

<p>Just like before, if we run this we will get back the exact value we passed in and also all the upper case and lower case variations</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
</pre></td><td class="de1"><pre class="de1"><span class="kw1">SELECT</span> <span class="sy0">*</span> <span class="kw1">FROM</span> CaseSensitiveSearch
<span class="kw1">WHERE</span> Val <span class="sy0">=</span> <span class="st0">'ABCD'</span> </pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">SELECT * FROM CaseSensitiveSearch
WHERE Val = 'ABCD' </pre></div></div>

<p>Here are the results of that query<br />
Val<br />
&#8212;&#8211;<br />
AbCd<br />
ABcd<br />
Abcd<br />
ABCd<br />
aBCd<br />
abCd<br />
aBcd<br />
abcd<br />
abCD<br />
aBcD<br />
abcD<br />
aBCD<br />
ABCD<br />
AbCD<br />
ABcD<br />
AbcD</p>
<p>If you add the collation to the query, you will get only what matches your value</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
</pre></td><td class="de1"><pre class="de1"><span class="kw1">SELECT</span> <span class="sy0">*</span> <span class="kw1">FROM</span> CaseSensitiveSearch
<span class="kw1">WHERE</span> Val <span class="sy0">=</span> <span class="st0">'ABCD'</span> <span class="kw1">COLLATE</span> SQL_Latin1_General_CP1_CS_AS</pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">SELECT * FROM CaseSensitiveSearch
WHERE Val = 'ABCD' COLLATE SQL_Latin1_General_CP1_CS_AS</pre></div></div>

<p>Here is the result, it maches what was passed in<br />
Val<br />
&#8212;<br />
ABCD</p>
<p>The problem with the query above is that it will cause a scan. So what can we do, how can we make it perform better?  It is simple combine the two queries<br />
First grab all case sensitive and case insensitive values and then after that filter out the case insensitive values</p>
<p>Here is what that query will look like</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
</pre></td><td class="de1"><pre class="de1"><span class="kw1">SELECT</span> <span class="sy0">*</span> <span class="kw1">FROM</span> CaseSensitiveSearch
<span class="kw1">WHERE</span> Val <span class="sy0">=</span> <span class="st0">'ABCD'</span> <span class="kw1">COLLATE</span> SQL_Latin1_General_CP1_CS_AS
<span class="sy0">AND</span> Val <span class="sy0">LIKE</span> <span class="st0">'ABCD'</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">SELECT * FROM CaseSensitiveSearch
WHERE Val = 'ABCD' COLLATE SQL_Latin1_General_CP1_CS_AS
AND Val LIKE 'ABCD'</pre></div></div>

<p>AND Val LIKE &#8216;ABCD&#8217; will result in a seek, now when it also does the Val = &#8216;ABCD&#8217; COLLATE SQL_Latin1_General_CP1_CS_AS part, it only returns the row that matches your value</p>
<p>If you run both queries, you can look at the plan difference (hit CTRL + M so that the plan is included)</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
</pre></td><td class="de1"><pre class="de1"><span class="kw1">SELECT</span> <span class="sy0">*</span> <span class="kw1">FROM</span> CaseSensitiveSearch
<span class="kw1">WHERE</span> Val <span class="sy0">=</span> <span class="st0">'ABCD'</span> <span class="kw1">COLLATE</span> SQL_Latin1_General_CP1_CS_AS
&nbsp;
&nbsp;
&nbsp;
<span class="kw1">SELECT</span> <span class="sy0">*</span> <span class="kw1">FROM</span> CaseSensitiveSearch
<span class="kw1">WHERE</span> Val <span class="sy0">=</span> <span class="st0">'ABCD'</span> <span class="kw1">COLLATE</span> SQL_Latin1_General_CP1_CS_AS
<span class="sy0">AND</span> Val <span class="sy0">LIKE</span> <span class="st0">'ABCD'</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">SELECT * FROM CaseSensitiveSearch
WHERE Val = 'ABCD' COLLATE SQL_Latin1_General_CP1_CS_AS



SELECT * FROM CaseSensitiveSearch
WHERE Val = 'ABCD' COLLATE SQL_Latin1_General_CP1_CS_AS
AND Val LIKE 'ABCD'</pre></div></div>

<p>Here is the plan</p>
<div class="image_block"><a href="/wp-content/uploads/blogs/DataMgmt/Denis/ExcecutionPlan2008.PNG?mtime=1354548699"><img alt="" src="/wp-content/uploads/blogs/DataMgmt/Denis/ExcecutionPlan2008.PNG?mtime=1354548699" width="903" height="364" /></a></div>
<p>As you can see, there is a big difference between the two</p>
<p>Here is the plan in text as well</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
</pre></td><td class="de1"><pre class="de1"><span class="kw1">SET</span> SHOWPLAN_TEXT <span class="kw1">ON</span>
GO
&nbsp;
<span class="kw1">SELECT</span> <span class="sy0">*</span> <span class="kw1">FROM</span> CaseSensitiveSearch
<span class="kw1">WHERE</span> Val <span class="sy0">=</span> <span class="st0">'ABCD'</span> <span class="kw1">COLLATE</span> SQL_Latin1_General_CP1_CS_AS
&nbsp;
&nbsp;
&nbsp;
<span class="kw1">SELECT</span> <span class="sy0">*</span> <span class="kw1">FROM</span> CaseSensitiveSearch
<span class="kw1">WHERE</span> Val <span class="sy0">=</span> <span class="st0">'ABCD'</span> <span class="kw1">COLLATE</span> SQL_Latin1_General_CP1_CS_AS
<span class="sy0">AND</span> Val <span class="sy0">LIKE</span> <span class="st0">'ABCD'</span>
&nbsp;
GO
&nbsp;
<span class="kw1">SET</span> SHOWPLAN_TEXT <span class="kw1">OFF</span>
GO</pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">SET SHOWPLAN_TEXT ON
GO
 
SELECT * FROM CaseSensitiveSearch
WHERE Val = 'ABCD' COLLATE SQL_Latin1_General_CP1_CS_AS



SELECT * FROM CaseSensitiveSearch
WHERE Val = 'ABCD' COLLATE SQL_Latin1_General_CP1_CS_AS
AND Val LIKE 'ABCD'

GO
 
SET SHOWPLAN_TEXT OFF
GO</pre></div></div>

<blockquote><p>  |&#8211;Table Scan(OBJECT:([tempdb].[dbo].[CaseSensitiveSearch]),<br />
   WHERE:(CONVERT_IMPLICIT(varchar(50),[tempdb].[dbo].[CaseSensitiveSearch].[Val],0)=CONVERT(varchar(8000),[@1],0)))</p>
<p>    |&#8211;Index Seek(OBJECT:([tempdb].[dbo].[CaseSensitiveSearch].[IX_SearchVal]), SEEK:([tempdb].[dbo].[CaseSensitiveSearch].[Val] >= &#8216;ABCD&#8217;<br />
     AND [tempdb].[dbo].[CaseSensitiveSearch].[Val] <= 'ABCD'), 
      WHERE:(CONVERT_IMPLICIT(varchar(50),[tempdb].[dbo].[CaseSensitiveSearch].[Val],0)='ABCD' AND [tempdb].[dbo].[CaseSensitiveSearch].[Val] like 'ABCD') ORDERED FORWARD)</p></blockquote>
<p>Also take a look at <a href="/index.php/DataMgmt/DataDesign/only-in-a-database-can-you-get-1000-impr">Only In A Database Can You Get 1000% + Improvement By Changing A Few Lines Of Code</a> to see how this works with dates</p>
<p>That is all for day three of the SQL Advent 2012 series, come back tomorrow for the next one, you can also check out all the posts from last year here: <a href="/index.php/DataMgmt/DataDesign/sql-advent-2011-recap">SQL Advent 2011 Recap</a></p>
]]></content:encoded>
			<wfw:commentRss>/index.php/datamgmt/dbprogramming/sargable-queries/feed/</wfw:commentRss>
		<slash:comments>2</slash:comments>
		</item>
	</channel>
</rss>
