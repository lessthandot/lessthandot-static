<?xml version="1.0" encoding="UTF-8"?><rss version="2.0"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:atom="http://www.w3.org/2005/Atom"
	xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
	
	>
<channel>
	<title>Comments on: AngularJS vs Knockout &#8211; Serialization (4 of 8)</title>
	<atom:link href="/index.php/webdev/uidevelopment/angularjs-vs-knockout-serialization-4/feed/" rel="self" type="application/rss+xml" />
	<link>/index.php/webdev/uidevelopment/angularjs-vs-knockout-serialization-4/</link>
	<description>A Technical Community for IT Professionals</description>
	<lastBuildDate>Tue, 26 Feb 2019 12:40:14 +0000</lastBuildDate>
	<sy:updatePeriod>hourly</sy:updatePeriod>
	<sy:updateFrequency>1</sy:updateFrequency>
	<generator>https://wordpress.org/?v=4.6.1</generator>
	<item>
		<title>By: Paul Barcomb</title>
		<link>/index.php/webdev/uidevelopment/angularjs-vs-knockout-serialization-4/#comment-4611554</link>
		<dc:creator><![CDATA[Paul Barcomb]]></dc:creator>
		<pubDate>Thu, 10 Sep 2015 21:49:22 +0000</pubDate>
		<guid isPermaLink="false">/index.php/2013/10/angularjs-vs-knockout-serialization-4/#comment-4611554</guid>
		<description><![CDATA[Eli,

Thank you for the in depth review.  It was very useful to me.]]></description>
		<content:encoded><![CDATA[<p>Eli,</p>
<p>Thank you for the in depth review.  It was very useful to me.</p>
]]></content:encoded>
	</item>
	<item>
		<title>By: Eli Weinstock-Herman (tarwn)</title>
		<link>/index.php/webdev/uidevelopment/angularjs-vs-knockout-serialization-4/#comment-6283</link>
		<dc:creator><![CDATA[Eli Weinstock-Herman (tarwn)]]></dc:creator>
		<pubDate>Fri, 11 Oct 2013 15:14:16 +0000</pubDate>
		<guid isPermaLink="false">/index.php/2013/10/angularjs-vs-knockout-serialization-4/#comment-6283</guid>
		<description><![CDATA[Jeff: Computeds are useful for more than just calculations, they are also useful for tracking complex validation states, dynamic template names, and anything I would want to expose to the view and update automatically from tracked observables. I wouldn&#039;t necessarily want these to get serialized across the wire, which is where having a separate model or using the mapping or a filtered toJSON would ensure I was only sending what I needed and not a bunch of ancillary stuff about the state.&lt;br /&gt;
&lt;br /&gt;
Not serializing functions absolutely meets my expectations for both, it wouldn&#039;t make sense to evaluate every function on an object just in case it outputs a value that would need to be serialized, but there is also no parallel in Angular for the computed, short of the something like watched function + value implementation I used above.&lt;br /&gt;
&lt;br /&gt;
I agree that it&#039;s not really a plus for AngularJS, maybe lack of a minus or a different flavor of tradeoff would be better.&lt;br /&gt;
&lt;br /&gt;
If I have a mix of computed values I want to send and don&#039;t want to send, then I have to do additional work with Angular to send those values (because they are just functions) and I have to do more work with Knockout to ensure I don&#039;t send a bunch of unnecessary computeds.]]></description>
		<content:encoded><![CDATA[<p>Jeff: Computeds are useful for more than just calculations, they are also useful for tracking complex validation states, dynamic template names, and anything I would want to expose to the view and update automatically from tracked observables. I wouldn&#8217;t necessarily want these to get serialized across the wire, which is where having a separate model or using the mapping or a filtered toJSON would ensure I was only sending what I needed and not a bunch of ancillary stuff about the state.</p>
<p>Not serializing functions absolutely meets my expectations for both, it wouldn&#8217;t make sense to evaluate every function on an object just in case it outputs a value that would need to be serialized, but there is also no parallel in Angular for the computed, short of the something like watched function + value implementation I used above.</p>
<p>I agree that it&#8217;s not really a plus for AngularJS, maybe lack of a minus or a different flavor of tradeoff would be better.</p>
<p>If I have a mix of computed values I want to send and don&#8217;t want to send, then I have to do additional work with Angular to send those values (because they are just functions) and I have to do more work with Knockout to ensure I don&#8217;t send a bunch of unnecessary computeds.</p>
]]></content:encoded>
	</item>
	<item>
		<title>By: Jeff Shepler</title>
		<link>/index.php/webdev/uidevelopment/angularjs-vs-knockout-serialization-4/#comment-6282</link>
		<dc:creator><![CDATA[Jeff Shepler]]></dc:creator>
		<pubDate>Fri, 11 Oct 2013 14:03:37 +0000</pubDate>
		<guid isPermaLink="false">/index.php/2013/10/angularjs-vs-knockout-serialization-4/#comment-6282</guid>
		<description><![CDATA[It&#039;s only the computeds that make sense to serialize. I don&#039;t believe KO serializes any functions other than computeds (and observables of course). Angular wouldn&#039;t know if any particular function is a computed or not.&lt;br /&gt;
&lt;br /&gt;
I don&#039;t see it as a plus that Angular doesn&#039;t serialize functions - that should be the default expectation as it doesn&#039;t make any sense to serialize arbitrary functions. It&#039;s a plus that KO allows you to define a function as being a computed and hence included in serialization.]]></description>
		<content:encoded><![CDATA[<p>It&#8217;s only the computeds that make sense to serialize. I don&#8217;t believe KO serializes any functions other than computeds (and observables of course). Angular wouldn&#8217;t know if any particular function is a computed or not.</p>
<p>I don&#8217;t see it as a plus that Angular doesn&#8217;t serialize functions &#8211; that should be the default expectation as it doesn&#8217;t make any sense to serialize arbitrary functions. It&#8217;s a plus that KO allows you to define a function as being a computed and hence included in serialization.</p>
]]></content:encoded>
	</item>
	<item>
		<title>By: Eli Weinstock-Herman (tarwn)</title>
		<link>/index.php/webdev/uidevelopment/angularjs-vs-knockout-serialization-4/#comment-6281</link>
		<dc:creator><![CDATA[Eli Weinstock-Herman (tarwn)]]></dc:creator>
		<pubDate>Fri, 11 Oct 2013 10:48:41 +0000</pubDate>
		<guid isPermaLink="false">/index.php/2013/10/angularjs-vs-knockout-serialization-4/#comment-6281</guid>
		<description><![CDATA[SanderD: Neat. The json property in both examples was just supposed to be for illustration purposes, so you could see the json that would be produced if you were playing around with the form. I&#039;ll add an explicit note above to that effect, thanks.&lt;br /&gt;
&lt;br /&gt;
Mark: So that&#039;s the second time someone has brought up a topic that makes me think I need to do a post on Angular&#039;s httpProvider contrasted against (something). It&#039;s good to hear someone else say they built a custom serialization method for the provider, though. One case I was considering this for needed the ability to inclue or exclude specific values (and I&#039;m not using ES5 properties yet) and I&#039;ll have to check out doing something like that.&lt;br /&gt;
&lt;br /&gt;
Manzo: So far it hasn&#039;t been painful to me to instantiate objects from data over the wire, but I hadn&#039;t considered using it for the opposite case (putting only a specific portion of the properties back over the wire), thanks for pointing it out, I&#039;ll take another look at it.]]></description>
		<content:encoded><![CDATA[<p>SanderD: Neat. The json property in both examples was just supposed to be for illustration purposes, so you could see the json that would be produced if you were playing around with the form. I&#8217;ll add an explicit note above to that effect, thanks.</p>
<p>Mark: So that&#8217;s the second time someone has brought up a topic that makes me think I need to do a post on Angular&#8217;s httpProvider contrasted against (something). It&#8217;s good to hear someone else say they built a custom serialization method for the provider, though. One case I was considering this for needed the ability to inclue or exclude specific values (and I&#8217;m not using ES5 properties yet) and I&#8217;ll have to check out doing something like that.</p>
<p>Manzo: So far it hasn&#8217;t been painful to me to instantiate objects from data over the wire, but I hadn&#8217;t considered using it for the opposite case (putting only a specific portion of the properties back over the wire), thanks for pointing it out, I&#8217;ll take another look at it.</p>
]]></content:encoded>
	</item>
	<item>
		<title>By: Manzo</title>
		<link>/index.php/webdev/uidevelopment/angularjs-vs-knockout-serialization-4/#comment-6280</link>
		<dc:creator><![CDATA[Manzo]]></dc:creator>
		<pubDate>Fri, 11 Oct 2013 10:14:13 +0000</pubDate>
		<guid isPermaLink="false">/index.php/2013/10/angularjs-vs-knockout-serialization-4/#comment-6280</guid>
		<description><![CDATA[With regards to ignoring properties when serialising, you can use the Knockout Mapping plugin (http://knockoutjs.com/documentation/plugins-mapping.html), and that lets you specify a mapping object that you can list the properties you wish to ignore during serialisation. I actually find the mapping plugin indispensible, and wouldn&#039;t use Knockout without it.]]></description>
		<content:encoded><![CDATA[<p>With regards to ignoring properties when serialising, you can use the Knockout Mapping plugin (<a href="http://knockoutjs.com/documentation/plugins-mapping.html" rel="nofollow">http://knockoutjs.com/documentation/plugins-mapping.html</a>), and that lets you specify a mapping object that you can list the properties you wish to ignore during serialisation. I actually find the mapping plugin indispensible, and wouldn&#8217;t use Knockout without it.</p>
]]></content:encoded>
	</item>
	<item>
		<title>By: Mark Rendle</title>
		<link>/index.php/webdev/uidevelopment/angularjs-vs-knockout-serialization-4/#comment-6279</link>
		<dc:creator><![CDATA[Mark Rendle]]></dc:creator>
		<pubDate>Fri, 11 Oct 2013 09:51:59 +0000</pubDate>
		<guid isPermaLink="false">/index.php/2013/10/angularjs-vs-knockout-serialization-4/#comment-6279</guid>
		<description><![CDATA[I use AngularJS with TypeScript and use ES5 properties with getters and setters on all my models, which gives me a nice way to compute properties in both directions (e.g. String to Date). JSON serialization ignores ES5 properties, so I ended up writing a function to copy properties into a regular object and serialize that, which I hooked into Angular using httpProvider.defaults.transformRequest.&lt;br /&gt;
&lt;br /&gt;
The function also checks for a toJson method on the object to be serialized and uses that if present, so I can override the behaviour on a per-model basis.]]></description>
		<content:encoded><![CDATA[<p>I use AngularJS with TypeScript and use ES5 properties with getters and setters on all my models, which gives me a nice way to compute properties in both directions (e.g. String to Date). JSON serialization ignores ES5 properties, so I ended up writing a function to copy properties into a regular object and serialize that, which I hooked into Angular using httpProvider.defaults.transformRequest.</p>
<p>The function also checks for a toJson method on the object to be serialized and uses that if present, so I can override the behaviour on a per-model basis.</p>
]]></content:encoded>
	</item>
	<item>
		<title>By: SanderD</title>
		<link>/index.php/webdev/uidevelopment/angularjs-vs-knockout-serialization-4/#comment-6278</link>
		<dc:creator><![CDATA[SanderD]]></dc:creator>
		<pubDate>Fri, 11 Oct 2013 08:34:25 +0000</pubDate>
		<guid isPermaLink="false">/index.php/2013/10/angularjs-vs-knockout-serialization-4/#comment-6278</guid>
		<description><![CDATA[We&#039;re currently working on a knockout-implementation.&lt;br /&gt;
KoGrid adds a property __kg_selected__ to the viewmodel objects, so we ended up overriding toJSON instead:&lt;br /&gt;
&lt;br /&gt;
ObjectType.prototype.toJSON = function() {&lt;br /&gt;
    var copy = ko.toJS(this);&lt;br /&gt;
    delete copy[&quot;__kg_selected__&quot;];&lt;br /&gt;
    return copy;&lt;br /&gt;
};&lt;br /&gt;
&lt;br /&gt;
In your situation, your json computed gets recalculated every time something in your object changes, which would be a performance issue if you had a heavy viewmodel.]]></description>
		<content:encoded><![CDATA[<p>We&#8217;re currently working on a knockout-implementation.<br />
KoGrid adds a property __kg_selected__ to the viewmodel objects, so we ended up overriding toJSON instead:</p>
<p>ObjectType.prototype.toJSON = function() {<br />
    var copy = ko.toJS(this);<br />
    delete copy[&#8220;__kg_selected__&#8221;];<br />
    return copy;<br />
};</p>
<p>In your situation, your json computed gets recalculated every time something in your object changes, which would be a performance issue if you had a heavy viewmodel.</p>
]]></content:encoded>
	</item>
	<item>
		<title>By: Eli Weinstock-Herman (tarwn)</title>
		<link>/index.php/webdev/uidevelopment/angularjs-vs-knockout-serialization-4/#comment-6277</link>
		<dc:creator><![CDATA[Eli Weinstock-Herman (tarwn)]]></dc:creator>
		<pubDate>Thu, 10 Oct 2013 17:57:27 +0000</pubDate>
		<guid isPermaLink="false">/index.php/2013/10/angularjs-vs-knockout-serialization-4/#comment-6277</guid>
		<description><![CDATA[Phillip: Good points/question. I started this analysis for some projects and in those cases I am actually performing calculations on client + server side, the communication of those is so I can verify that I store exactly what I told the user (or report a detailed comparison if they don&#039;t match for easier troubleshooting). But that&#039;s an assumption and there is absolutely the case where you don&#039;t want the computed values to go across, which would require an extra step or two on the knockout side and non on e the Angular. I&#039;ll add that to the post in a moment.&lt;br /&gt;
&lt;br /&gt;
The reason I was looking at the raw serialization was based on another assumption, this time that Angular&#039;s $http call uses the same method to convert a data object to JSON before sending it over the wire (and on the Knockout side, you either use the built in one or add extra code before using an additional one). I&#039;ve been considering that I may need to do yet another set of examples/posts just on $http, dig into the injectors and configs a little, and see if I can turn this assumption into a reality.]]></description>
		<content:encoded><![CDATA[<p>Phillip: Good points/question. I started this analysis for some projects and in those cases I am actually performing calculations on client + server side, the communication of those is so I can verify that I store exactly what I told the user (or report a detailed comparison if they don&#8217;t match for easier troubleshooting). But that&#8217;s an assumption and there is absolutely the case where you don&#8217;t want the computed values to go across, which would require an extra step or two on the knockout side and non on e the Angular. I&#8217;ll add that to the post in a moment.</p>
<p>The reason I was looking at the raw serialization was based on another assumption, this time that Angular&#8217;s $http call uses the same method to convert a data object to JSON before sending it over the wire (and on the Knockout side, you either use the built in one or add extra code before using an additional one). I&#8217;ve been considering that I may need to do yet another set of examples/posts just on $http, dig into the injectors and configs a little, and see if I can turn this assumption into a reality.</p>
]]></content:encoded>
	</item>
	<item>
		<title>By: Phillip Haydon</title>
		<link>/index.php/webdev/uidevelopment/angularjs-vs-knockout-serialization-4/#comment-6276</link>
		<dc:creator><![CDATA[Phillip Haydon]]></dc:creator>
		<pubDate>Thu, 10 Oct 2013 14:32:57 +0000</pubDate>
		<guid isPermaLink="false">/index.php/2013/10/angularjs-vs-knockout-serialization-4/#comment-6276</guid>
		<description><![CDATA[Hmm, I personally think they are both as easy as each other. You complain about the use of a function in Angular, but you shouldn&#039;t be sending computed values across the wire anyway, those should be calculated server side. Which begs the question, why did you need to serialize to begin with?&lt;br /&gt;
&lt;br /&gt;]]></description>
		<content:encoded><![CDATA[<p>Hmm, I personally think they are both as easy as each other. You complain about the use of a function in Angular, but you shouldn&#8217;t be sending computed values across the wire anyway, those should be calculated server side. Which begs the question, why did you need to serialize to begin with?</p>
]]></content:encoded>
	</item>
</channel>
</rss>
