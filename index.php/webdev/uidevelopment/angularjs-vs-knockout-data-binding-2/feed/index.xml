<?xml version="1.0" encoding="UTF-8"?><rss version="2.0"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:atom="http://www.w3.org/2005/Atom"
	xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
	
	>
<channel>
	<title>Comments on: AngularJS vs Knockout &#8211; Data Binding (2 of 8)</title>
	<atom:link href="/index.php/webdev/uidevelopment/angularjs-vs-knockout-data-binding-2/feed/" rel="self" type="application/rss+xml" />
	<link>/index.php/webdev/uidevelopment/angularjs-vs-knockout-data-binding-2/</link>
	<description>A Technical Community for IT Professionals</description>
	<lastBuildDate>Tue, 26 Feb 2019 12:40:14 +0000</lastBuildDate>
	<sy:updatePeriod>hourly</sy:updatePeriod>
	<sy:updateFrequency>1</sy:updateFrequency>
	<generator>https://wordpress.org/?v=4.6.1</generator>
	<item>
		<title>By: Aluan</title>
		<link>/index.php/webdev/uidevelopment/angularjs-vs-knockout-data-binding-2/#comment-1354943</link>
		<dc:creator><![CDATA[Aluan]]></dc:creator>
		<pubDate>Thu, 10 Jul 2014 06:28:04 +0000</pubDate>
		<guid isPermaLink="false">/index.php/2013/10/angularjs-vs-knockout-data-binding-2/#comment-1354943</guid>
		<description><![CDATA[Silent errors in Angular.js are a serious problem, and this is one of the few blogs/articles which points out this weakness. As you say, there is no reason why the framework cannot log a binding error while still failing gracefully presentation-wise. The problem is exacerbated by the inability to set breakpoints inside of templates to observe how they are being rendered. Coming from an ASP.NET MVC background, I find this especially frustrating.

I write a lot of JavaScript, and I have a strong affection the language, but of its many shortcomings, it has certain semantics which make discovering bugs quite difficult. Angular&#039;s silent binding failures, which are just one of the ways in which it masks errors, compound to worsen JavaScript&#039;s shortcomings.

Anyway, thanks for the in depth comparison and the neutral perspective presented by your posts.]]></description>
		<content:encoded><![CDATA[<p>Silent errors in Angular.js are a serious problem, and this is one of the few blogs/articles which points out this weakness. As you say, there is no reason why the framework cannot log a binding error while still failing gracefully presentation-wise. The problem is exacerbated by the inability to set breakpoints inside of templates to observe how they are being rendered. Coming from an ASP.NET MVC background, I find this especially frustrating.</p>
<p>I write a lot of JavaScript, and I have a strong affection the language, but of its many shortcomings, it has certain semantics which make discovering bugs quite difficult. Angular&#8217;s silent binding failures, which are just one of the ways in which it masks errors, compound to worsen JavaScript&#8217;s shortcomings.</p>
<p>Anyway, thanks for the in depth comparison and the neutral perspective presented by your posts.</p>
]]></content:encoded>
	</item>
	<item>
		<title>By: Eli Weinstock-Herman (tarwn)</title>
		<link>/index.php/webdev/uidevelopment/angularjs-vs-knockout-data-binding-2/#comment-6273</link>
		<dc:creator><![CDATA[Eli Weinstock-Herman (tarwn)]]></dc:creator>
		<pubDate>Mon, 14 Oct 2013 18:06:20 +0000</pubDate>
		<guid isPermaLink="false">/index.php/2013/10/angularjs-vs-knockout-data-binding-2/#comment-6273</guid>
		<description><![CDATA[@Joakim: I think it&#039;s about presentation and development, both over the short term and the long term. I work daily with a large application that fails bindings silently. I rely on manual testing and my end users to tell me when a value has disappeared from a screen, for which there are an unknown number of users that noticed and didn&#039;t report it, but received a poorer impression of my application, losing trust and credibility in both the application and me.&lt;br /&gt;
&lt;br /&gt;
There are two modes for silent binding failures: places that should be binding properly and aren&#039;t (aka bugs), and places where the necessary data hasn&#039;t loaded yet (async). I think most people are looking at that second case and considering silent binding failures to be a feature. But it comes with the cost of the first case also being invisible. And we should be handling that second case more gracefully then just letting the binding fail silently.&lt;br /&gt;
&lt;br /&gt;
My preference, for initial development, long term maintenance, and presentation to the end user, is to to only evaluate sections or individual bindings when their data is available (showing nothing or a loading section or whatever until then). The only benefit to letting the framework fail silently instead is that I get to be lazy and not put conditional requirements in my view.&lt;br /&gt;
&lt;br /&gt;
So it&#039;s not about presentation at all. And it&#039;s not about unit testing. In my experience, unit testing (and integration and interface testing) drive higher levels of error handling, which means that what you&#039;re going to have left is the unexpected errors that you want to fix the soonest so as to affect the fewest people possible. Except, when you have silent binding errors you don&#039;t even know that someone tweaked a data model and a view somewhere has stopped showing something to the end user. (And yes, I&#039;m aware that many people see this as an opportunity to hire more QA people and automation, which means that silent errors have a real, financial cost in some companies).&lt;br /&gt;
&lt;br /&gt;
If you can&#039;t tell, masking/suppressing errors is a bit of a pet peeve of mine.&lt;br /&gt;
&lt;br /&gt;
If it were for me to decide, I&#039;d have some hooks in Angular to report those errors, with the option to console.log them or use a service to report them back to the web server (and from there, the developers). That way Angular could continue to have it&#039;s bindings fail &#039;silently&#039; for presentation purposes, but also could be used to debug or communicate unexpected cases.]]></description>
		<content:encoded><![CDATA[<p>@Joakim: I think it&#8217;s about presentation and development, both over the short term and the long term. I work daily with a large application that fails bindings silently. I rely on manual testing and my end users to tell me when a value has disappeared from a screen, for which there are an unknown number of users that noticed and didn&#8217;t report it, but received a poorer impression of my application, losing trust and credibility in both the application and me.</p>
<p>There are two modes for silent binding failures: places that should be binding properly and aren&#8217;t (aka bugs), and places where the necessary data hasn&#8217;t loaded yet (async). I think most people are looking at that second case and considering silent binding failures to be a feature. But it comes with the cost of the first case also being invisible. And we should be handling that second case more gracefully then just letting the binding fail silently.</p>
<p>My preference, for initial development, long term maintenance, and presentation to the end user, is to to only evaluate sections or individual bindings when their data is available (showing nothing or a loading section or whatever until then). The only benefit to letting the framework fail silently instead is that I get to be lazy and not put conditional requirements in my view.</p>
<p>So it&#8217;s not about presentation at all. And it&#8217;s not about unit testing. In my experience, unit testing (and integration and interface testing) drive higher levels of error handling, which means that what you&#8217;re going to have left is the unexpected errors that you want to fix the soonest so as to affect the fewest people possible. Except, when you have silent binding errors you don&#8217;t even know that someone tweaked a data model and a view somewhere has stopped showing something to the end user. (And yes, I&#8217;m aware that many people see this as an opportunity to hire more QA people and automation, which means that silent errors have a real, financial cost in some companies).</p>
<p>If you can&#8217;t tell, masking/suppressing errors is a bit of a pet peeve of mine.</p>
<p>If it were for me to decide, I&#8217;d have some hooks in Angular to report those errors, with the option to console.log them or use a service to report them back to the web server (and from there, the developers). That way Angular could continue to have it&#8217;s bindings fail &#8216;silently&#8217; for presentation purposes, but also could be used to debug or communicate unexpected cases.</p>
]]></content:encoded>
	</item>
	<item>
		<title>By: Joakim Bengtson</title>
		<link>/index.php/webdev/uidevelopment/angularjs-vs-knockout-data-binding-2/#comment-6272</link>
		<dc:creator><![CDATA[Joakim Bengtson]]></dc:creator>
		<pubDate>Mon, 14 Oct 2013 17:27:48 +0000</pubDate>
		<guid isPermaLink="false">/index.php/2013/10/angularjs-vs-knockout-data-binding-2/#comment-6272</guid>
		<description><![CDATA[@eli: about &quot;the silent failure&quot;, I personally think it&#039;s all about presentation. Ask yourself, how do you present a variable that have no value, or have no value yet? Should it always show an error to the user, or maybe throw an exception? I don&#039;t think so anyway... I think the AngularJS way of showing an empty value is the most sane thing to do when it comes to presentation.&lt;br /&gt;
If you have such complicated expressions that fails silently when you really want them to shout out loud, then put them into scope functions. So instead of: {{ func(mySuperVar)*anotherVar ? thirdVar / overly : complicatedVar }} do: {{ getComplicatedValue() }}. Because then Angular will throw an error if your javascript inside the scope function &quot;getComplicatedValue&quot; fails, but it will, as you say, fail silently in the first case.&lt;br /&gt;
And because Angular is built with automatic testing in mind this shouldn&#039;t be an issue at all if you have fully covering tests for your controllers, etc, then you will know what went wrong.]]></description>
		<content:encoded><![CDATA[<p>@eli: about &#8220;the silent failure&#8221;, I personally think it&#8217;s all about presentation. Ask yourself, how do you present a variable that have no value, or have no value yet? Should it always show an error to the user, or maybe throw an exception? I don&#8217;t think so anyway&#8230; I think the AngularJS way of showing an empty value is the most sane thing to do when it comes to presentation.<br />
If you have such complicated expressions that fails silently when you really want them to shout out loud, then put them into scope functions. So instead of: {{ func(mySuperVar)*anotherVar ? thirdVar / overly : complicatedVar }} do: {{ getComplicatedValue() }}. Because then Angular will throw an error if your javascript inside the scope function &#8220;getComplicatedValue&#8221; fails, but it will, as you say, fail silently in the first case.<br />
And because Angular is built with automatic testing in mind this shouldn&#8217;t be an issue at all if you have fully covering tests for your controllers, etc, then you will know what went wrong.</p>
]]></content:encoded>
	</item>
	<item>
		<title>By: Eli Weinstock-Herman (tarwn)</title>
		<link>/index.php/webdev/uidevelopment/angularjs-vs-knockout-data-binding-2/#comment-6271</link>
		<dc:creator><![CDATA[Eli Weinstock-Herman (tarwn)]]></dc:creator>
		<pubDate>Thu, 10 Oct 2013 15:04:13 +0000</pubDate>
		<guid isPermaLink="false">/index.php/2013/10/angularjs-vs-knockout-data-binding-2/#comment-6271</guid>
		<description><![CDATA[I still would prefer to get the error messages. If I expected a section to be be un-bindable until a resource loaded, I would prefer to indicate that to Angular and not have it evaluated at all (ngIf or a custom directive like ngIf). Silent errors make it harder to troubleshoot an issue, harder to notice when you&#039;ve broken existing behavior, and give no way to detect if an error has happened in the wild so you could communicate it back and try to fix it. &lt;br /&gt;
&lt;br /&gt;
I was originally considering this the easier approach because I didn&#039;t know about ngIf (it&#039;s in unstable), which provides a built-in mechanism to remove sections that you know can&#039;t be evaluated until the resource is loaded (async calls). I agree it was a design decision, it just seemed to make it easier to evaluate everything on the page for binding every time then conditionally ignore sections that rely on something that has not loaded yet.]]></description>
		<content:encoded><![CDATA[<p>I still would prefer to get the error messages. If I expected a section to be be un-bindable until a resource loaded, I would prefer to indicate that to Angular and not have it evaluated at all (ngIf or a custom directive like ngIf). Silent errors make it harder to troubleshoot an issue, harder to notice when you&#8217;ve broken existing behavior, and give no way to detect if an error has happened in the wild so you could communicate it back and try to fix it. </p>
<p>I was originally considering this the easier approach because I didn&#8217;t know about ngIf (it&#8217;s in unstable), which provides a built-in mechanism to remove sections that you know can&#8217;t be evaluated until the resource is loaded (async calls). I agree it was a design decision, it just seemed to make it easier to evaluate everything on the page for binding every time then conditionally ignore sections that rely on something that has not loaded yet.</p>
]]></content:encoded>
	</item>
	<item>
		<title>By: Mike Ward</title>
		<link>/index.php/webdev/uidevelopment/angularjs-vs-knockout-data-binding-2/#comment-6270</link>
		<dc:creator><![CDATA[Mike Ward]]></dc:creator>
		<pubDate>Thu, 10 Oct 2013 13:57:55 +0000</pubDate>
		<guid isPermaLink="false">/index.php/2013/10/angularjs-vs-knockout-data-binding-2/#comment-6270</guid>
		<description><![CDATA[&quot;Which leaves me feeling that they may have chosen to take the easier route, development-wise, at the cost of higher friction/frustration for the end user (ie, people using the library).&quot;&lt;br /&gt;
&lt;br /&gt;
Really? I&#039;ve found dealing gracefully with null to be harder.&lt;br /&gt;
&lt;br /&gt;
I seriously doubt they took the easy way out on this one. It appears to be a deliberate and well considered design choice.&lt;br /&gt;]]></description>
		<content:encoded><![CDATA[<p>&#8220;Which leaves me feeling that they may have chosen to take the easier route, development-wise, at the cost of higher friction/frustration for the end user (ie, people using the library).&#8221;</p>
<p>Really? I&#8217;ve found dealing gracefully with null to be harder.</p>
<p>I seriously doubt they took the easy way out on this one. It appears to be a deliberate and well considered design choice.</p>
]]></content:encoded>
	</item>
	<item>
		<title>By: Srdjan</title>
		<link>/index.php/webdev/uidevelopment/angularjs-vs-knockout-data-binding-2/#comment-6269</link>
		<dc:creator><![CDATA[Srdjan]]></dc:creator>
		<pubDate>Thu, 10 Oct 2013 12:15:09 +0000</pubDate>
		<guid isPermaLink="false">/index.php/2013/10/angularjs-vs-knockout-data-binding-2/#comment-6269</guid>
		<description><![CDATA[nice series...&lt;br /&gt;
there is more on angular vs durandal/knockout here:&lt;br /&gt;
http://devlicio.us/blogs/rob_eisenberg/archive/2013/10/07/durandal-vs-framework-x.aspx]]></description>
		<content:encoded><![CDATA[<p>nice series&#8230;<br />
there is more on angular vs durandal/knockout here:<br />
<a href="http://devlicio.us/blogs/rob_eisenberg/archive/2013/10/07/durandal-vs-framework-x.aspx" rel="nofollow">http://devlicio.us/blogs/rob_eisenberg/archive/2013/10/07/durandal-vs-framework-x.aspx</a></p>
]]></content:encoded>
	</item>
	<item>
		<title>By: Eli Weinstock-Herman (tarwn)</title>
		<link>/index.php/webdev/uidevelopment/angularjs-vs-knockout-data-binding-2/#comment-6268</link>
		<dc:creator><![CDATA[Eli Weinstock-Herman (tarwn)]]></dc:creator>
		<pubDate>Thu, 10 Oct 2013 10:12:02 +0000</pubDate>
		<guid isPermaLink="false">/index.php/2013/10/angularjs-vs-knockout-data-binding-2/#comment-6268</guid>
		<description><![CDATA[Mirko: I think you&#039;re talking about using alternative template engines. I mention this possibility in the templating post (which hasn&#039;t gone up yet), but I&#039;ll add a note here as well. That feature is available in ko 2, it&#039;s not specific to 3. &lt;br /&gt;
&lt;br /&gt;
Nope, I&#039;m  wrong, they&#039;ve apparently taken it one step further and added node rewriting to knockout 3, with n example of writing text bindings just like angular using {{ }}. I&#039;ll add an addendum or comment in the final post.]]></description>
		<content:encoded><![CDATA[<p>Mirko: I think you&#8217;re talking about using alternative template engines. I mention this possibility in the templating post (which hasn&#8217;t gone up yet), but I&#8217;ll add a note here as well. That feature is available in ko 2, it&#8217;s not specific to 3. </p>
<p>Nope, I&#8217;m  wrong, they&#8217;ve apparently taken it one step further and added node rewriting to knockout 3, with n example of writing text bindings just like angular using {{ }}. I&#8217;ll add an addendum or comment in the final post.</p>
]]></content:encoded>
	</item>
	<item>
		<title>By: Mirko</title>
		<link>/index.php/webdev/uidevelopment/angularjs-vs-knockout-data-binding-2/#comment-6267</link>
		<dc:creator><![CDATA[Mirko]]></dc:creator>
		<pubDate>Thu, 10 Oct 2013 08:34:42 +0000</pubDate>
		<guid isPermaLink="false">/index.php/2013/10/angularjs-vs-knockout-data-binding-2/#comment-6267</guid>
		<description><![CDATA[In KO 3.0 (RC now) you can rewrite binding, and have different syntax, eg {{model.prop}}.&lt;br /&gt;
&lt;br /&gt;
Take a look: http://blog.stevensanderson.com/2013/07/09/knockout-v2-3-0-released-v3-0-0-beta-available/&lt;br /&gt;
&lt;br /&gt;
It would be more relevant if you could update blog to compare angular with new version of KO.]]></description>
		<content:encoded><![CDATA[<p>In KO 3.0 (RC now) you can rewrite binding, and have different syntax, eg {{model.prop}}.</p>
<p>Take a look: <a href="http://blog.stevensanderson.com/2013/07/09/knockout-v2-3-0-released-v3-0-0-beta-available/" rel="nofollow">http://blog.stevensanderson.com/2013/07/09/knockout-v2-3-0-released-v3-0-0-beta-available/</a></p>
<p>It would be more relevant if you could update blog to compare angular with new version of KO.</p>
]]></content:encoded>
	</item>
	<item>
		<title>By: Eli Weinstock-Herman (tarwn)</title>
		<link>/index.php/webdev/uidevelopment/angularjs-vs-knockout-data-binding-2/#comment-6266</link>
		<dc:creator><![CDATA[Eli Weinstock-Herman (tarwn)]]></dc:creator>
		<pubDate>Wed, 09 Oct 2013 14:49:25 +0000</pubDate>
		<guid isPermaLink="false">/index.php/2013/10/angularjs-vs-knockout-data-binding-2/#comment-6266</guid>
		<description><![CDATA[Yeah, that&#039;s useful to understand how/why it&#039;s so forgiving, but I still would prefer a &#039;strict&#039; option. In fact, I now have to wonder whether they are evaluating things before they need to be evaluated, since no errors would occur and it&#039;s easier to evaluate everything than build in logic to understand when sub-elements should not be evaluated based on parent data or scope.&lt;br /&gt;
&lt;br /&gt;
Which leaves me feeling that they may have chosen to take the easier route, development-wise, at the cost of higher friction/frustration for the end user (ie, people using the library).]]></description>
		<content:encoded><![CDATA[<p>Yeah, that&#8217;s useful to understand how/why it&#8217;s so forgiving, but I still would prefer a &#8216;strict&#8217; option. In fact, I now have to wonder whether they are evaluating things before they need to be evaluated, since no errors would occur and it&#8217;s easier to evaluate everything than build in logic to understand when sub-elements should not be evaluated based on parent data or scope.</p>
<p>Which leaves me feeling that they may have chosen to take the easier route, development-wise, at the cost of higher friction/frustration for the end user (ie, people using the library).</p>
]]></content:encoded>
	</item>
	<item>
		<title>By: Mike Ward</title>
		<link>/index.php/webdev/uidevelopment/angularjs-vs-knockout-data-binding-2/#comment-6265</link>
		<dc:creator><![CDATA[Mike Ward]]></dc:creator>
		<pubDate>Wed, 09 Oct 2013 13:09:15 +0000</pubDate>
		<guid isPermaLink="false">/index.php/2013/10/angularjs-vs-knockout-data-binding-2/#comment-6265</guid>
		<description><![CDATA[Check out the &quot;Forgiving&quot; section at http://docs.angularjs.org/guide/expression. In an asynchronous world, a little forgiveness is a good thing.]]></description>
		<content:encoded><![CDATA[<p>Check out the &#8220;Forgiving&#8221; section at <a href="http://docs.angularjs.org/guide/expression" rel="nofollow">http://docs.angularjs.org/guide/expression</a>. In an asynchronous world, a little forgiveness is a good thing.</p>
]]></content:encoded>
	</item>
</channel>
</rss>
