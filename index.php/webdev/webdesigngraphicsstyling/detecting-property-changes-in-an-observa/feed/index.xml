<?xml version="1.0" encoding="UTF-8"?><rss version="2.0"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:atom="http://www.w3.org/2005/Atom"
	xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
	
	>
<channel>
	<title>Comments on: Detecting Property Changes in an Observable Collection</title>
	<atom:link href="/index.php/webdev/webdesigngraphicsstyling/detecting-property-changes-in-an-observa/feed/" rel="self" type="application/rss+xml" />
	<link>/index.php/webdev/webdesigngraphicsstyling/detecting-property-changes-in-an-observa/</link>
	<description>A Technical Community for IT Professionals</description>
	<lastBuildDate>Tue, 26 Feb 2019 12:40:14 +0000</lastBuildDate>
	<sy:updatePeriod>hourly</sy:updatePeriod>
	<sy:updateFrequency>1</sy:updateFrequency>
	<generator>https://wordpress.org/?v=4.6.1</generator>
	<item>
		<title>By: Mike</title>
		<link>/index.php/webdev/webdesigngraphicsstyling/detecting-property-changes-in-an-observa/#comment-4330630</link>
		<dc:creator><![CDATA[Mike]]></dc:creator>
		<pubDate>Wed, 03 Jun 2015 20:17:35 +0000</pubDate>
		<guid isPermaLink="false">/index.php/2010/04/detecting-property-changes-in-an-observa/#comment-4330630</guid>
		<description><![CDATA[This really helped me out while doing the same thing in C#! Thanks!]]></description>
		<content:encoded><![CDATA[<p>This really helped me out while doing the same thing in C#! Thanks!</p>
]]></content:encoded>
	</item>
	<item>
		<title>By: Andy Bruce</title>
		<link>/index.php/webdev/webdesigngraphicsstyling/detecting-property-changes-in-an-observa/#comment-2648</link>
		<dc:creator><![CDATA[Andy Bruce]]></dc:creator>
		<pubDate>Tue, 29 Jun 2010 14:35:57 +0000</pubDate>
		<guid isPermaLink="false">/index.php/2010/04/detecting-property-changes-in-an-observa/#comment-2648</guid>
		<description><![CDATA[I am using this model in C#, thought it might be of use. While the added expense of my ConditionalAssignment (and the StackTrace to find the property name) certainly may make this&lt;br /&gt;
approach lose in high-volume situations, I think it makes the end-developer&#039;s job extremely easy.&lt;br /&gt;
&lt;br /&gt;
I can&#039;t paste in my c# comments completely, I hope the below is self explanatory...&lt;br /&gt;
&lt;br /&gt;
Class #1: the observable item base class&lt;br /&gt;
&lt;br /&gt;
using System;&lt;br /&gt;
using System.ComponentModel;&lt;br /&gt;
&lt;br /&gt;
namespace ArchG2.CodeLibrary.Sl.DAL&lt;br /&gt;
{&lt;br /&gt;
  /// An observable item automatically supports property notification&lt;br /&gt;
  /// events.&lt;br /&gt;
  public class ArchG2ObservableItem : INotifyPropertyChanged&lt;br /&gt;
  {&lt;br /&gt;
    #region Events&lt;br /&gt;
    /// The PropertyChanged event is added automatically when we&lt;br /&gt;
    /// implement INotifyPropertyChanged.&lt;br /&gt;
    public event PropertyChangedEventHandler PropertyChanged;&lt;br /&gt;
    #endregion&lt;br /&gt;
&lt;br /&gt;
    #region Property change support&lt;br /&gt;
    /// Fires the property changed event for the named property&lt;br /&gt;
    protected void OnPropertyChanged(string propertyName)&lt;br /&gt;
    {&lt;br /&gt;
      if (PropertyChanged != null)&lt;br /&gt;
      {&lt;br /&gt;
        PropertyChanged(this, new PropertyChangedEventArgs(propertyName));&lt;br /&gt;
      } //if&lt;br /&gt;
    } //OnPropertyChanged&lt;br /&gt;
&lt;br /&gt;
    /// Perform a conditional assignment from a new value to&lt;br /&gt;
    /// an existing value for a given property. Note that the&lt;br /&gt;
    /// property name itself is derived automatically.&lt;br /&gt;
    /// Upon successful update of the old value, a PropertyChanged&lt;br /&gt;
    /// event is raised.&lt;br /&gt;
    protected void AssignConditional&#060;T&#062;(ref T oldValue, T newValue)&lt;br /&gt;
    {&lt;br /&gt;
      // anything to do?&lt;br /&gt;
      if (oldValue == null &#038;&#038; newValue == null) return;&lt;br /&gt;
&lt;br /&gt;
      bool needsAssignment = false;&lt;br /&gt;
      if (oldValue == null &#124;&#124; newValue == null)&lt;br /&gt;
      {&lt;br /&gt;
        needsAssignment = true;&lt;br /&gt;
      }&lt;br /&gt;
      else&lt;br /&gt;
      {&lt;br /&gt;
        needsAssignment = !oldValue.Equals(newValue);&lt;br /&gt;
      } //if&lt;br /&gt;
      if (!needsAssignment) return;&lt;br /&gt;
&lt;br /&gt;
      // set the value now that we know everything is a-ok&lt;br /&gt;
      oldValue = newValue;&lt;br /&gt;
&lt;br /&gt;
      // do we have anything else to do?&lt;br /&gt;
      if (PropertyChanged == null) return;&lt;br /&gt;
&lt;br /&gt;
      // find the property name&lt;br /&gt;
      string propertyName = null;&lt;br /&gt;
      try&lt;br /&gt;
      {&lt;br /&gt;
        System.Diagnostics.StackTrace stack = new System.Diagnostics.StackTrace();&lt;br /&gt;
        System.Diagnostics.StackFrame frame = stack.GetFrame(1);&lt;br /&gt;
        propertyName = frame.GetMethod().Name;&lt;br /&gt;
      }&lt;br /&gt;
      catch&lt;br /&gt;
      {&lt;br /&gt;
      } //try&lt;br /&gt;
&lt;br /&gt;
      if (string.IsNullOrEmpty(propertyName))&lt;br /&gt;
      {&lt;br /&gt;
        throw new ArchG2Exception(&lt;br /&gt;
          string.Format(&quot;Unable to locate property name for observable item: {0}&quot;, GetType().Name)&lt;br /&gt;
        );&lt;br /&gt;
      } //if&lt;br /&gt;
&lt;br /&gt;
      if (!propertyName.StartsWith(&quot;set_&quot;))&lt;br /&gt;
      {&lt;br /&gt;
        throw new ArchG2Exception(&lt;br /&gt;
          string.Format(&quot;Property name for {0}.{1} not recognized as valid setter&quot;, GetType().Name, propertyName)&lt;br /&gt;
        );&lt;br /&gt;
      } //if&lt;br /&gt;
&lt;br /&gt;
      // extract it out&lt;br /&gt;
      propertyName = propertyName.Substring(4);&lt;br /&gt;
&lt;br /&gt;
      // fire the event&lt;br /&gt;
      OnPropertyChanged(propertyName);&lt;br /&gt;
    }&lt;br /&gt;
    #endregion&lt;br /&gt;
  }&lt;br /&gt;
}&lt;br /&gt;
&lt;br /&gt;
Class 2: The observable collection base class&lt;br /&gt;
&lt;br /&gt;
using System;&lt;br /&gt;
using System.ComponentModel;&lt;br /&gt;
using System.Collections.Generic;&lt;br /&gt;
using System.Collections.ObjectModel;&lt;br /&gt;
&lt;br /&gt;
namespace ArchG2.CodeLibrary.Sl.DAL&lt;br /&gt;
{&lt;br /&gt;
  /// An observable collection with AddRange support. All of our DAL functions&lt;br /&gt;
  /// return collections derived from this class, which can (in theory)&lt;br /&gt;
  /// be applied to any Telerik control and updates can be detected and&lt;br /&gt;
  /// automatically applied back to the host.&lt;br /&gt;
  public class ArchG2ObservableCollection&#060;T&#062;: ObservableCollection&#060;T&#062;&lt;br /&gt;
  {&lt;br /&gt;
    #region Events&lt;br /&gt;
    /// This event will get raised whenever an item is changed and that&lt;br /&gt;
    /// item supports the INotifyPropertyChanged interface.&lt;br /&gt;
    public event PropertyChangedEventHandler ItemPropertyChanged;&lt;br /&gt;
    #endregion&lt;br /&gt;
&lt;br /&gt;
    #region Overrides for property change management&lt;br /&gt;
    /// Handle property change management automatically by attaching to&lt;br /&gt;
    /// items being added. Only if the type being managed by this&lt;br /&gt;
    /// collection supports INotifyPropertyChanged&lt;br /&gt;
    protected override void InsertItem(int index, T item)&lt;br /&gt;
    {&lt;br /&gt;
      // base class&lt;br /&gt;
      base.InsertItem(index, item);&lt;br /&gt;
&lt;br /&gt;
      INotifyPropertyChanged iface = item as INotifyPropertyChanged;&lt;br /&gt;
      if (iface != null)&lt;br /&gt;
      {&lt;br /&gt;
        iface.PropertyChanged -= Item_PropertyChanged;&lt;br /&gt;
        iface.PropertyChanged += new PropertyChangedEventHandler(Item_PropertyChanged);&lt;br /&gt;
      } //if&lt;br /&gt;
    }&lt;br /&gt;
&lt;br /&gt;
    /// If the managed items for this collection support INotifyPropertyChanged,&lt;br /&gt;
    /// automatically remove the added PropertyChanged event handler from the&lt;br /&gt;
    /// item.&lt;br /&gt;
    protected override void RemoveItem(int index)&lt;br /&gt;
    {&lt;br /&gt;
      INotifyPropertyChanged iface = this[index] as INotifyPropertyChanged;&lt;br /&gt;
      if (iface != null)&lt;br /&gt;
      {&lt;br /&gt;
        iface.PropertyChanged -= Item_PropertyChanged;&lt;br /&gt;
      } //if&lt;br /&gt;
&lt;br /&gt;
      // base class&lt;br /&gt;
      base.RemoveItem(index);&lt;br /&gt;
    }&lt;br /&gt;
&lt;br /&gt;
    /// Internal handler for bubbling up property changed events&lt;br /&gt;
    void Item_PropertyChanged(object sender, PropertyChangedEventArgs e)&lt;br /&gt;
    {&lt;br /&gt;
      if (ItemPropertyChanged != null)&lt;br /&gt;
      {&lt;br /&gt;
        ItemPropertyChanged(sender, e);&lt;br /&gt;
      } //if&lt;br /&gt;
    }&lt;br /&gt;
    #endregion&lt;br /&gt;
&lt;br /&gt;
    #region Extensions&lt;br /&gt;
    /// Extension: allow shallow copy of list&lt;br /&gt;
    public void AddRange(IList&#060;T&#062; list)&lt;br /&gt;
    {&lt;br /&gt;
      foreach (var item in list)&lt;br /&gt;
      {&lt;br /&gt;
        Add(item);&lt;br /&gt;
      } //foreach&lt;br /&gt;
    } //AddRange&lt;br /&gt;
&lt;br /&gt;
    /// Extension: allow loop processing on list (similar to All&lt;br /&gt;
    public void ForEach(Action&#060;T&#062; action)&lt;br /&gt;
    {&lt;br /&gt;
      foreach (var obj in this)&lt;br /&gt;
      {&lt;br /&gt;
        action(obj);&lt;br /&gt;
      } //foreach&lt;br /&gt;
    } //ForEach&lt;br /&gt;
    #endregion&lt;br /&gt;
  }&lt;br /&gt;
}&lt;br /&gt;
&lt;br /&gt;
Class 3: specific derived class with a single observable property&lt;br /&gt;
&lt;br /&gt;
  /// Wrapper class for set of total scores for all APCs&lt;br /&gt;
  public class swm_sp_GetAllScores : ArchG2ObservableItem&lt;br /&gt;
  {&lt;br /&gt;
    public int SystemID { get; set; }&lt;br /&gt;
    public string SystemName { get; set; }&lt;br /&gt;
    public string SystemDesc { get; set; }&lt;br /&gt;
    public double Score { get; set; }&lt;br /&gt;
    public int MappingStatus { get; set; }&lt;br /&gt;
&lt;br /&gt;
    /// Users can be notified of changes to this item&lt;br /&gt;
    private int _apcBinID;&lt;br /&gt;
    public int ApcBinID&lt;br /&gt;
    {&lt;br /&gt;
      get { return _apcBinID; }&lt;br /&gt;
      set { AssignConditional(ref _apcBinID, value); }&lt;br /&gt;
    }&lt;br /&gt;
  }&lt;br /&gt;
&lt;br /&gt;
Class 4: specific typesafe observable collection for the above&lt;br /&gt;
&lt;br /&gt;
  /// Typesafe list of total scores for all APCs&lt;br /&gt;
  public class swm_sp_GetAllScoresList : ArchG2ObservableCollection&#060;swm_sp_GetAllScores&#062; { }&lt;br /&gt;
&lt;br /&gt;
Enjoy!&lt;br /&gt;
&lt;br /&gt;
Andy]]></description>
		<content:encoded><![CDATA[<p>I am using this model in C#, thought it might be of use. While the added expense of my ConditionalAssignment (and the StackTrace to find the property name) certainly may make this<br />
approach lose in high-volume situations, I think it makes the end-developer&#8217;s job extremely easy.</p>
<p>I can&#8217;t paste in my c# comments completely, I hope the below is self explanatory&#8230;</p>
<p>Class #1: the observable item base class</p>
<p>using System;<br />
using System.ComponentModel;</p>
<p>namespace ArchG2.CodeLibrary.Sl.DAL<br />
{<br />
  /// An observable item automatically supports property notification<br />
  /// events.<br />
  public class ArchG2ObservableItem : INotifyPropertyChanged<br />
  {<br />
    #region Events<br />
    /// The PropertyChanged event is added automatically when we<br />
    /// implement INotifyPropertyChanged.<br />
    public event PropertyChangedEventHandler PropertyChanged;<br />
    #endregion</p>
<p>    #region Property change support<br />
    /// Fires the property changed event for the named property<br />
    protected void OnPropertyChanged(string propertyName)<br />
    {<br />
      if (PropertyChanged != null)<br />
      {<br />
        PropertyChanged(this, new PropertyChangedEventArgs(propertyName));<br />
      } //if<br />
    } //OnPropertyChanged</p>
<p>    /// Perform a conditional assignment from a new value to<br />
    /// an existing value for a given property. Note that the<br />
    /// property name itself is derived automatically.<br />
    /// Upon successful update of the old value, a PropertyChanged<br />
    /// event is raised.<br />
    protected void AssignConditional&lt;T&gt;(ref T oldValue, T newValue)<br />
    {<br />
      // anything to do?<br />
      if (oldValue == null &amp;&amp; newValue == null) return;</p>
<p>      bool needsAssignment = false;<br />
      if (oldValue == null || newValue == null)<br />
      {<br />
        needsAssignment = true;<br />
      }<br />
      else<br />
      {<br />
        needsAssignment = !oldValue.Equals(newValue);<br />
      } //if<br />
      if (!needsAssignment) return;</p>
<p>      // set the value now that we know everything is a-ok<br />
      oldValue = newValue;</p>
<p>      // do we have anything else to do?<br />
      if (PropertyChanged == null) return;</p>
<p>      // find the property name<br />
      string propertyName = null;<br />
      try<br />
      {<br />
        System.Diagnostics.StackTrace stack = new System.Diagnostics.StackTrace();<br />
        System.Diagnostics.StackFrame frame = stack.GetFrame(1);<br />
        propertyName = frame.GetMethod().Name;<br />
      }<br />
      catch<br />
      {<br />
      } //try</p>
<p>      if (string.IsNullOrEmpty(propertyName))<br />
      {<br />
        throw new ArchG2Exception(<br />
          string.Format(&#8220;Unable to locate property name for observable item: {0}&#8221;, GetType().Name)<br />
        );<br />
      } //if</p>
<p>      if (!propertyName.StartsWith(&#8220;set_&#8221;))<br />
      {<br />
        throw new ArchG2Exception(<br />
          string.Format(&#8220;Property name for {0}.{1} not recognized as valid setter&#8221;, GetType().Name, propertyName)<br />
        );<br />
      } //if</p>
<p>      // extract it out<br />
      propertyName = propertyName.Substring(4);</p>
<p>      // fire the event<br />
      OnPropertyChanged(propertyName);<br />
    }<br />
    #endregion<br />
  }<br />
}</p>
<p>Class 2: The observable collection base class</p>
<p>using System;<br />
using System.ComponentModel;<br />
using System.Collections.Generic;<br />
using System.Collections.ObjectModel;</p>
<p>namespace ArchG2.CodeLibrary.Sl.DAL<br />
{<br />
  /// An observable collection with AddRange support. All of our DAL functions<br />
  /// return collections derived from this class, which can (in theory)<br />
  /// be applied to any Telerik control and updates can be detected and<br />
  /// automatically applied back to the host.<br />
  public class ArchG2ObservableCollection&lt;T&gt;: ObservableCollection&lt;T&gt;<br />
  {<br />
    #region Events<br />
    /// This event will get raised whenever an item is changed and that<br />
    /// item supports the INotifyPropertyChanged interface.<br />
    public event PropertyChangedEventHandler ItemPropertyChanged;<br />
    #endregion</p>
<p>    #region Overrides for property change management<br />
    /// Handle property change management automatically by attaching to<br />
    /// items being added. Only if the type being managed by this<br />
    /// collection supports INotifyPropertyChanged<br />
    protected override void InsertItem(int index, T item)<br />
    {<br />
      // base class<br />
      base.InsertItem(index, item);</p>
<p>      INotifyPropertyChanged iface = item as INotifyPropertyChanged;<br />
      if (iface != null)<br />
      {<br />
        iface.PropertyChanged -= Item_PropertyChanged;<br />
        iface.PropertyChanged += new PropertyChangedEventHandler(Item_PropertyChanged);<br />
      } //if<br />
    }</p>
<p>    /// If the managed items for this collection support INotifyPropertyChanged,<br />
    /// automatically remove the added PropertyChanged event handler from the<br />
    /// item.<br />
    protected override void RemoveItem(int index)<br />
    {<br />
      INotifyPropertyChanged iface = this[index] as INotifyPropertyChanged;<br />
      if (iface != null)<br />
      {<br />
        iface.PropertyChanged -= Item_PropertyChanged;<br />
      } //if</p>
<p>      // base class<br />
      base.RemoveItem(index);<br />
    }</p>
<p>    /// Internal handler for bubbling up property changed events<br />
    void Item_PropertyChanged(object sender, PropertyChangedEventArgs e)<br />
    {<br />
      if (ItemPropertyChanged != null)<br />
      {<br />
        ItemPropertyChanged(sender, e);<br />
      } //if<br />
    }<br />
    #endregion</p>
<p>    #region Extensions<br />
    /// Extension: allow shallow copy of list<br />
    public void AddRange(IList&lt;T&gt; list)<br />
    {<br />
      foreach (var item in list)<br />
      {<br />
        Add(item);<br />
      } //foreach<br />
    } //AddRange</p>
<p>    /// Extension: allow loop processing on list (similar to All<br />
    public void ForEach(Action&lt;T&gt; action)<br />
    {<br />
      foreach (var obj in this)<br />
      {<br />
        action(obj);<br />
      } //foreach<br />
    } //ForEach<br />
    #endregion<br />
  }<br />
}</p>
<p>Class 3: specific derived class with a single observable property</p>
<p>  /// Wrapper class for set of total scores for all APCs<br />
  public class swm_sp_GetAllScores : ArchG2ObservableItem<br />
  {<br />
    public int SystemID { get; set; }<br />
    public string SystemName { get; set; }<br />
    public string SystemDesc { get; set; }<br />
    public double Score { get; set; }<br />
    public int MappingStatus { get; set; }</p>
<p>    /// Users can be notified of changes to this item<br />
    private int _apcBinID;<br />
    public int ApcBinID<br />
    {<br />
      get { return _apcBinID; }<br />
      set { AssignConditional(ref _apcBinID, value); }<br />
    }<br />
  }</p>
<p>Class 4: specific typesafe observable collection for the above</p>
<p>  /// Typesafe list of total scores for all APCs<br />
  public class swm_sp_GetAllScoresList : ArchG2ObservableCollection&lt;swm_sp_GetAllScores&gt; { }</p>
<p>Enjoy!</p>
<p>Andy</p>
]]></content:encoded>
	</item>
	<item>
		<title>By: ThatRickGuy</title>
		<link>/index.php/webdev/webdesigngraphicsstyling/detecting-property-changes-in-an-observa/#comment-2651</link>
		<dc:creator><![CDATA[ThatRickGuy]]></dc:creator>
		<pubDate>Thu, 29 Apr 2010 18:50:18 +0000</pubDate>
		<guid isPermaLink="false">/index.php/2010/04/detecting-property-changes-in-an-observa/#comment-2651</guid>
		<description><![CDATA[Good question! I toyed around with that one a a bit. I ran into a situation where I had items in the collection that had multiple handlers for the property changed event. Every execution of the offending code would add another event handler. To prevent this from happening, I needed to ensure that prior to adding another event handler that there was not already an event handler in place.&lt;br /&gt;
&lt;br /&gt;
There are two ways of dealing with this in VB. First, you can do like they do in C# and look for the event handler object. It does exist in VB, it&#039;s just not exposed by the GUI. &lt;br /&gt;
&lt;br /&gt;
The other option is just to call RemoveHandler. RemoveHandler won&#039;t throw an exception even if there is no handler, and since it doesn&#039;t require knowledge of unexposed objects, I felt it was the better option in this case. I&#039;m not sure of the under the covers performance impact remove handler has, so if you are working with code that must be streamlined, the hidden event object may be more useful to you.&lt;br /&gt;
&lt;br /&gt;
The end result is that we can be sure that for every object in the collection that there is only 1 event handler for the property changed event.&lt;br /&gt;
&lt;br /&gt;
-Rick]]></description>
		<content:encoded><![CDATA[<p>Good question! I toyed around with that one a a bit. I ran into a situation where I had items in the collection that had multiple handlers for the property changed event. Every execution of the offending code would add another event handler. To prevent this from happening, I needed to ensure that prior to adding another event handler that there was not already an event handler in place.</p>
<p>There are two ways of dealing with this in VB. First, you can do like they do in C# and look for the event handler object. It does exist in VB, it&#8217;s just not exposed by the GUI. </p>
<p>The other option is just to call RemoveHandler. RemoveHandler won&#8217;t throw an exception even if there is no handler, and since it doesn&#8217;t require knowledge of unexposed objects, I felt it was the better option in this case. I&#8217;m not sure of the under the covers performance impact remove handler has, so if you are working with code that must be streamlined, the hidden event object may be more useful to you.</p>
<p>The end result is that we can be sure that for every object in the collection that there is only 1 event handler for the property changed event.</p>
<p>-Rick</p>
]]></content:encoded>
	</item>
	<item>
		<title>By: Al</title>
		<link>/index.php/webdev/webdesigngraphicsstyling/detecting-property-changes-in-an-observa/#comment-2650</link>
		<dc:creator><![CDATA[Al]]></dc:creator>
		<pubDate>Thu, 29 Apr 2010 13:49:27 +0000</pubDate>
		<guid isPermaLink="false">/index.php/2010/04/detecting-property-changes-in-an-observa/#comment-2650</guid>
		<description><![CDATA[Just curious, why in the InsertItem override do you remove the handler before adding it back?]]></description>
		<content:encoded><![CDATA[<p>Just curious, why in the InsertItem override do you remove the handler before adding it back?</p>
]]></content:encoded>
	</item>
	<item>
		<title>By: ThatRickGuy</title>
		<link>/index.php/webdev/webdesigngraphicsstyling/detecting-property-changes-in-an-observa/#comment-2649</link>
		<dc:creator><![CDATA[ThatRickGuy]]></dc:creator>
		<pubDate>Wed, 14 Apr 2010 18:09:13 +0000</pubDate>
		<guid isPermaLink="false">/index.php/2010/04/detecting-property-changes-in-an-observa/#comment-2649</guid>
		<description><![CDATA[Made a slight change. While doing the training demo we started talking about using LINQ to filter different controls that bind to the main list.&lt;br /&gt;
&lt;br /&gt;
The problem though is that while LINQ returns an observable collection, the LINQ query is not observable. In order to get the desired functionality, we bind the second control to another observable collection. That observable collection is populated from a LINQ query that is executed in the Property Changed event.&lt;br /&gt;
&lt;br /&gt;
The end result is that the box on the right will only ever contain checked items.]]></description>
		<content:encoded><![CDATA[<p>Made a slight change. While doing the training demo we started talking about using LINQ to filter different controls that bind to the main list.</p>
<p>The problem though is that while LINQ returns an observable collection, the LINQ query is not observable. In order to get the desired functionality, we bind the second control to another observable collection. That observable collection is populated from a LINQ query that is executed in the Property Changed event.</p>
<p>The end result is that the box on the right will only ever contain checked items.</p>
]]></content:encoded>
	</item>
	<item>
		<title>By: ThatRickGuy</title>
		<link>/index.php/webdev/webdesigngraphicsstyling/detecting-property-changes-in-an-observa/#comment-2647</link>
		<dc:creator><![CDATA[ThatRickGuy]]></dc:creator>
		<pubDate>Wed, 07 Apr 2010 20:55:45 +0000</pubDate>
		<guid isPermaLink="false">/index.php/2010/04/detecting-property-changes-in-an-observa/#comment-2647</guid>
		<description><![CDATA[I have not. I think I&#039;ve got the brass on board to jump to VS2010 at release though, which should make mobile development much easier. So I might toy with some ideas after that.]]></description>
		<content:encoded><![CDATA[<p>I have not. I think I&#8217;ve got the brass on board to jump to VS2010 at release though, which should make mobile development much easier. So I might toy with some ideas after that.</p>
]]></content:encoded>
	</item>
	<item>
		<title>By: SQLDenis</title>
		<link>/index.php/webdev/webdesigngraphicsstyling/detecting-property-changes-in-an-observa/#comment-2646</link>
		<dc:creator><![CDATA[SQLDenis]]></dc:creator>
		<pubDate>Wed, 07 Apr 2010 20:23:48 +0000</pubDate>
		<guid isPermaLink="false">/index.php/2010/04/detecting-property-changes-in-an-observa/#comment-2646</guid>
		<description><![CDATA[Interesting, have you played around with SilverLight for Windows Phone yet?]]></description>
		<content:encoded><![CDATA[<p>Interesting, have you played around with SilverLight for Windows Phone yet?</p>
]]></content:encoded>
	</item>
</channel>
</rss>
