<?xml version="1.0" encoding="UTF-8"?><rss version="2.0"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:atom="http://www.w3.org/2005/Atom"
	xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
	
	>
<channel>
	<title>Comments on: Custom Authentication in ASP.Net Core 2 w/ Cosmos DB</title>
	<atom:link href="/index.php/webdev/serverprogramming/aspnet/custom-authentication-in-asp-net-core-2-w-cosmos-db/feed/" rel="self" type="application/rss+xml" />
	<link>/index.php/webdev/serverprogramming/aspnet/custom-authentication-in-asp-net-core-2-w-cosmos-db/</link>
	<description>A Technical Community for IT Professionals</description>
	<lastBuildDate>Tue, 26 Feb 2019 12:40:14 +0000</lastBuildDate>
	<sy:updatePeriod>hourly</sy:updatePeriod>
	<sy:updateFrequency>1</sy:updateFrequency>
	<generator>https://wordpress.org/?v=4.6.1</generator>
	<item>
		<title>By: Eli Weinstock-Herman (tarwn)</title>
		<link>/index.php/webdev/serverprogramming/aspnet/custom-authentication-in-asp-net-core-2-w-cosmos-db/#comment-6297779</link>
		<dc:creator><![CDATA[Eli Weinstock-Herman (tarwn)]]></dc:creator>
		<pubDate>Tue, 26 Feb 2019 12:40:14 +0000</pubDate>
		<guid isPermaLink="false">/?p=9130#comment-6297779</guid>
		<description><![CDATA[If you want to stay in Azure, then there are a number of options:
1) You could use Cosmos, but store all of the objects in a single collection (this will reduce the costs and only add a little overhead of keeping your different objects organized)
2) If all of your lookups are by key, you could use blob storage and treat it as a key/value store (where the value would be your serialized document)
3) SQL Azure has a Basic level that&#039;s great for small projects and only runs $5/month
4) Table storage is also an option I would consider looking at - you don&#039;t see much about this any more, but it&#039;s cheap and performs well]]></description>
		<content:encoded><![CDATA[<p>If you want to stay in Azure, then there are a number of options:<br />
1) You could use Cosmos, but store all of the objects in a single collection (this will reduce the costs and only add a little overhead of keeping your different objects organized)<br />
2) If all of your lookups are by key, you could use blob storage and treat it as a key/value store (where the value would be your serialized document)<br />
3) SQL Azure has a Basic level that&#8217;s great for small projects and only runs $5/month<br />
4) Table storage is also an option I would consider looking at &#8211; you don&#8217;t see much about this any more, but it&#8217;s cheap and performs well</p>
]]></content:encoded>
	</item>
	<item>
		<title>By: Artak</title>
		<link>/index.php/webdev/serverprogramming/aspnet/custom-authentication-in-asp-net-core-2-w-cosmos-db/#comment-6294917</link>
		<dc:creator><![CDATA[Artak]]></dc:creator>
		<pubDate>Sun, 24 Feb 2019 16:30:42 +0000</pubDate>
		<guid isPermaLink="false">/?p=9130#comment-6294917</guid>
		<description><![CDATA[This was an interesting read.
Specifically for authentication/authorization scenarios - is there an alternative data store you&#039;d recommend for the small projects then?]]></description>
		<content:encoded><![CDATA[<p>This was an interesting read.<br />
Specifically for authentication/authorization scenarios &#8211; is there an alternative data store you&#8217;d recommend for the small projects then?</p>
]]></content:encoded>
	</item>
	<item>
		<title>By: Eli Weinstock-Herman (tarwn)</title>
		<link>/index.php/webdev/serverprogramming/aspnet/custom-authentication-in-asp-net-core-2-w-cosmos-db/#comment-6098520</link>
		<dc:creator><![CDATA[Eli Weinstock-Herman (tarwn)]]></dc:creator>
		<pubDate>Thu, 26 Apr 2018 18:59:41 +0000</pubDate>
		<guid isPermaLink="false">/?p=9130#comment-6098520</guid>
		<description><![CDATA[Yep, the pricing is definitely the big minus on this approach and I should have brought that up. Cosmos DB is not priced well for small projects that want to use multiple collections under the current pricing scheme. I definitely prefer the objects I&#039;m currently interacting with (Users vs Authentication secrets) separate rather than having one belong to the other, but not to the tune of a whole new Collection monthly price. One idea I&#039;ve been playing with is storing dissimilar objects in the same collection, potentially partitioning by type, and seeing if I run into any type of performance issues with that. I wouldn&#039;t be able to use the unique constraint for users like I do now. 

I could certainly see putting roles as a collection on the user and, technically, could do that with authentication secrets too (though I&#039;ll likely lose performance for lookups when authenticating). But there is a limit to the number of collections I an squeeze everything down to that still makes this expensive for a smaller project. I really like the model of Cosmos DB, but what I&#039;m starting to realize is that it just doesn&#039;t make financial sense to use it.]]></description>
		<content:encoded><![CDATA[<p>Yep, the pricing is definitely the big minus on this approach and I should have brought that up. Cosmos DB is not priced well for small projects that want to use multiple collections under the current pricing scheme. I definitely prefer the objects I&#8217;m currently interacting with (Users vs Authentication secrets) separate rather than having one belong to the other, but not to the tune of a whole new Collection monthly price. One idea I&#8217;ve been playing with is storing dissimilar objects in the same collection, potentially partitioning by type, and seeing if I run into any type of performance issues with that. I wouldn&#8217;t be able to use the unique constraint for users like I do now. </p>
<p>I could certainly see putting roles as a collection on the user and, technically, could do that with authentication secrets too (though I&#8217;ll likely lose performance for lookups when authenticating). But there is a limit to the number of collections I an squeeze everything down to that still makes this expensive for a smaller project. I really like the model of Cosmos DB, but what I&#8217;m starting to realize is that it just doesn&#8217;t make financial sense to use it.</p>
]]></content:encoded>
	</item>
	<item>
		<title>By: Cédric Arnould</title>
		<link>/index.php/webdev/serverprogramming/aspnet/custom-authentication-in-asp-net-core-2-w-cosmos-db/#comment-6098175</link>
		<dc:creator><![CDATA[Cédric Arnould]]></dc:creator>
		<pubDate>Thu, 26 Apr 2018 15:07:14 +0000</pubDate>
		<guid isPermaLink="false">/?p=9130#comment-6098175</guid>
		<description><![CDATA[Hi,

Thanks for your good article. 

We currently have some $$$ problem with CosmosDb on Azure. Each collection is around 30$ minimum per month.
So it could be in our interest to use only one Collection to manage all the entities (User, Role, ...). 
In your example, you only use User, but imagine if you have to use Role too, will you put them in the user collection too?]]></description>
		<content:encoded><![CDATA[<p>Hi,</p>
<p>Thanks for your good article. </p>
<p>We currently have some $$$ problem with CosmosDb on Azure. Each collection is around 30$ minimum per month.<br />
So it could be in our interest to use only one Collection to manage all the entities (User, Role, &#8230;).<br />
In your example, you only use User, but imagine if you have to use Role too, will you put them in the user collection too?</p>
]]></content:encoded>
	</item>
</channel>
</rss>
