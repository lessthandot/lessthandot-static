<?xml version="1.0" encoding="UTF-8"?><rss version="2.0"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:atom="http://www.w3.org/2005/Atom"
	xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
	
	>
<channel>
	<title>Comments on: ASP.Net &#8211; Single-sign on against Office365 with OAuth2</title>
	<atom:link href="/index.php/webdev/serverprogramming/aspnet/asp-net-single-sign-on-against-office365-with-oauth2/feed/" rel="self" type="application/rss+xml" />
	<link>/index.php/webdev/serverprogramming/aspnet/asp-net-single-sign-on-against-office365-with-oauth2/</link>
	<description>A Technical Community for IT Professionals</description>
	<lastBuildDate>Tue, 26 Feb 2019 12:40:14 +0000</lastBuildDate>
	<sy:updatePeriod>hourly</sy:updatePeriod>
	<sy:updateFrequency>1</sy:updateFrequency>
	<generator>https://wordpress.org/?v=4.6.1</generator>
	<item>
		<title>By: Eli Weinstock-Herman (tarwn)</title>
		<link>/index.php/webdev/serverprogramming/aspnet/asp-net-single-sign-on-against-office365-with-oauth2/#comment-5425297</link>
		<dc:creator><![CDATA[Eli Weinstock-Herman (tarwn)]]></dc:creator>
		<pubDate>Wed, 14 Dec 2016 02:15:37 +0000</pubDate>
		<guid isPermaLink="false">/?p=4549#comment-5425297</guid>
		<description><![CDATA[That class was just a basic POCO I created that had human-readable properties I could fill in from the JWT token as I parsed it. Here&#039;s the code:

&lt;pre lang=&quot;csharp&quot;&gt;
namespace WebApp.Controllers
{
    public class Office365Token
    {
        [JsonProperty(&quot;aud&quot;)]
        public string Audience { get; set; }

        [JsonProperty(&quot;exp&quot;)]
        public long ExpirationTime { get; set; }

        [JsonProperty(&quot;family_name&quot;)]
        public string FamilyName { get; set; }

        [JsonProperty(&quot;given_name&quot;)]
        public string GivenName { get; set; }

        [JsonProperty(&quot;iat&quot;)]
        public long IssuedAtTime { get; set; }

        [JsonProperty(&quot;iss&quot;)]
        public string TokenIssuer { get; set; }

        [JsonProperty(&quot;nbf&quot;)]
        public long NotBeforeTime { get; set; }

        [JsonProperty(&quot;oid&quot;)]
        public string UserObjectIdentifier { get; set; }

        [JsonProperty(&quot;sub&quot;)]
        public string TokenSubjectIdentifier { get; set; }

        [JsonProperty(&quot;tid&quot;)]
        public string TenantIdentifier { get; set; }

        /// &lt;summary&gt;
        /// Per MSDN: &quot;This is _usually_ a user principal name (UPN).&quot; (emphasis mine)
        /// &lt;/summary&gt;
        [JsonProperty(&quot;unique_name&quot;)]
        public string UserUniqueIdentifier { get; set; }

        [JsonProperty(&quot;upn&quot;)]
        public string UserPrincipalName { get; set; }

        [JsonProperty(&quot;ver&quot;)]
        public string Version { get; set; }


    }
}
&lt;/pre&gt;

The JsonProperty&#039;s ended up being unnecessary. Originally I was attempting to directly deserialize from the JwtToken into this object, but I switched to using the loop through the claims and manually assigning values in the switch instead, so you could remove the JsonProperty&#039;s without affecting it or leave them as (potentially confusing) comments/documentation on what JWTToken property is being assigned to the C# one.]]></description>
		<content:encoded><![CDATA[<p>That class was just a basic POCO I created that had human-readable properties I could fill in from the JWT token as I parsed it. Here&#8217;s the code:</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="csharp"><thead><tr><td colspan="2"  class="head">C#</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
</pre></td><td class="de1"><pre class="de1"><span class="kw1">namespace</span> WebApp<span class="sy0">.</span><span class="me1">Controllers</span>
<span class="br0">&#123;</span>
&nbsp; &nbsp; <span class="kw1">public</span> <span class="kw4">class</span> Office365Token
&nbsp; &nbsp; <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#91;</span>JsonProperty<span class="br0">&#40;</span><span class="st0">&quot;aud&quot;</span><span class="br0">&#41;</span><span class="br0">&#93;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">public</span> <span class="kw4">string</span> Audience <span class="br0">&#123;</span> <span class="kw1">get</span><span class="sy0">;</span> <span class="kw1">set</span><span class="sy0">;</span> <span class="br0">&#125;</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#91;</span>JsonProperty<span class="br0">&#40;</span><span class="st0">&quot;exp&quot;</span><span class="br0">&#41;</span><span class="br0">&#93;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">public</span> <span class="kw4">long</span> ExpirationTime <span class="br0">&#123;</span> <span class="kw1">get</span><span class="sy0">;</span> <span class="kw1">set</span><span class="sy0">;</span> <span class="br0">&#125;</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#91;</span>JsonProperty<span class="br0">&#40;</span><span class="st0">&quot;family_name&quot;</span><span class="br0">&#41;</span><span class="br0">&#93;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">public</span> <span class="kw4">string</span> FamilyName <span class="br0">&#123;</span> <span class="kw1">get</span><span class="sy0">;</span> <span class="kw1">set</span><span class="sy0">;</span> <span class="br0">&#125;</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#91;</span>JsonProperty<span class="br0">&#40;</span><span class="st0">&quot;given_name&quot;</span><span class="br0">&#41;</span><span class="br0">&#93;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">public</span> <span class="kw4">string</span> GivenName <span class="br0">&#123;</span> <span class="kw1">get</span><span class="sy0">;</span> <span class="kw1">set</span><span class="sy0">;</span> <span class="br0">&#125;</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#91;</span>JsonProperty<span class="br0">&#40;</span><span class="st0">&quot;iat&quot;</span><span class="br0">&#41;</span><span class="br0">&#93;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">public</span> <span class="kw4">long</span> IssuedAtTime <span class="br0">&#123;</span> <span class="kw1">get</span><span class="sy0">;</span> <span class="kw1">set</span><span class="sy0">;</span> <span class="br0">&#125;</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#91;</span>JsonProperty<span class="br0">&#40;</span><span class="st0">&quot;iss&quot;</span><span class="br0">&#41;</span><span class="br0">&#93;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">public</span> <span class="kw4">string</span> TokenIssuer <span class="br0">&#123;</span> <span class="kw1">get</span><span class="sy0">;</span> <span class="kw1">set</span><span class="sy0">;</span> <span class="br0">&#125;</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#91;</span>JsonProperty<span class="br0">&#40;</span><span class="st0">&quot;nbf&quot;</span><span class="br0">&#41;</span><span class="br0">&#93;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">public</span> <span class="kw4">long</span> NotBeforeTime <span class="br0">&#123;</span> <span class="kw1">get</span><span class="sy0">;</span> <span class="kw1">set</span><span class="sy0">;</span> <span class="br0">&#125;</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#91;</span>JsonProperty<span class="br0">&#40;</span><span class="st0">&quot;oid&quot;</span><span class="br0">&#41;</span><span class="br0">&#93;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">public</span> <span class="kw4">string</span> UserObjectIdentifier <span class="br0">&#123;</span> <span class="kw1">get</span><span class="sy0">;</span> <span class="kw1">set</span><span class="sy0">;</span> <span class="br0">&#125;</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#91;</span>JsonProperty<span class="br0">&#40;</span><span class="st0">&quot;sub&quot;</span><span class="br0">&#41;</span><span class="br0">&#93;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">public</span> <span class="kw4">string</span> TokenSubjectIdentifier <span class="br0">&#123;</span> <span class="kw1">get</span><span class="sy0">;</span> <span class="kw1">set</span><span class="sy0">;</span> <span class="br0">&#125;</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#91;</span>JsonProperty<span class="br0">&#40;</span><span class="st0">&quot;tid&quot;</span><span class="br0">&#41;</span><span class="br0">&#93;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">public</span> <span class="kw4">string</span> TenantIdentifier <span class="br0">&#123;</span> <span class="kw1">get</span><span class="sy0">;</span> <span class="kw1">set</span><span class="sy0">;</span> <span class="br0">&#125;</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; <span class="co1">/// &lt;summary&gt;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="co1">/// Per MSDN: &quot;This is _usually_ a user principal name (UPN).&quot; (emphasis mine)</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="co1">/// &lt;/summary&gt;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#91;</span>JsonProperty<span class="br0">&#40;</span><span class="st0">&quot;unique_name&quot;</span><span class="br0">&#41;</span><span class="br0">&#93;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">public</span> <span class="kw4">string</span> UserUniqueIdentifier <span class="br0">&#123;</span> <span class="kw1">get</span><span class="sy0">;</span> <span class="kw1">set</span><span class="sy0">;</span> <span class="br0">&#125;</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#91;</span>JsonProperty<span class="br0">&#40;</span><span class="st0">&quot;upn&quot;</span><span class="br0">&#41;</span><span class="br0">&#93;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">public</span> <span class="kw4">string</span> UserPrincipalName <span class="br0">&#123;</span> <span class="kw1">get</span><span class="sy0">;</span> <span class="kw1">set</span><span class="sy0">;</span> <span class="br0">&#125;</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#91;</span>JsonProperty<span class="br0">&#40;</span><span class="st0">&quot;ver&quot;</span><span class="br0">&#41;</span><span class="br0">&#93;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">public</span> <span class="kw4">string</span> Version <span class="br0">&#123;</span> <span class="kw1">get</span><span class="sy0">;</span> <span class="kw1">set</span><span class="sy0">;</span> <span class="br0">&#125;</span>
&nbsp;
&nbsp;
&nbsp; &nbsp; <span class="br0">&#125;</span>
<span class="br0">&#125;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">namespace WebApp.Controllers
{
    public class Office365Token
    {
        [JsonProperty("aud")]
        public string Audience { get; set; }

        [JsonProperty("exp")]
        public long ExpirationTime { get; set; }

        [JsonProperty("family_name")]
        public string FamilyName { get; set; }

        [JsonProperty("given_name")]
        public string GivenName { get; set; }

        [JsonProperty("iat")]
        public long IssuedAtTime { get; set; }

        [JsonProperty("iss")]
        public string TokenIssuer { get; set; }

        [JsonProperty("nbf")]
        public long NotBeforeTime { get; set; }

        [JsonProperty("oid")]
        public string UserObjectIdentifier { get; set; }

        [JsonProperty("sub")]
        public string TokenSubjectIdentifier { get; set; }

        [JsonProperty("tid")]
        public string TenantIdentifier { get; set; }

        /// &lt;summary&gt;
        /// Per MSDN: "This is _usually_ a user principal name (UPN)." (emphasis mine)
        /// &lt;/summary&gt;
        [JsonProperty("unique_name")]
        public string UserUniqueIdentifier { get; set; }

        [JsonProperty("upn")]
        public string UserPrincipalName { get; set; }

        [JsonProperty("ver")]
        public string Version { get; set; }


    }
}</pre></div></div>

<p>The JsonProperty&#8217;s ended up being unnecessary. Originally I was attempting to directly deserialize from the JwtToken into this object, but I switched to using the loop through the claims and manually assigning values in the switch instead, so you could remove the JsonProperty&#8217;s without affecting it or leave them as (potentially confusing) comments/documentation on what JWTToken property is being assigned to the C# one.</p>
]]></content:encoded>
	</item>
	<item>
		<title>By: Rick</title>
		<link>/index.php/webdev/serverprogramming/aspnet/asp-net-single-sign-on-against-office365-with-oauth2/#comment-5424965</link>
		<dc:creator><![CDATA[Rick]]></dc:creator>
		<pubDate>Tue, 13 Dec 2016 21:28:52 +0000</pubDate>
		<guid isPermaLink="false">/?p=4549#comment-5424965</guid>
		<description><![CDATA[Hi great article, 
I have a question in the section &quot;Parsing the JWT Token&quot;, in the code sample line 5: Token = new Office365Token(); the class Office365Token which class did you use as a base class or what assembly is this class part of?

Thanks,
R]]></description>
		<content:encoded><![CDATA[<p>Hi great article,<br />
I have a question in the section &#8220;Parsing the JWT Token&#8221;, in the code sample line 5: Token = new Office365Token(); the class Office365Token which class did you use as a base class or what assembly is this class part of?</p>
<p>Thanks,<br />
R</p>
]]></content:encoded>
	</item>
	<item>
		<title>By: Eli Weinstock-Herman (tarwn)</title>
		<link>/index.php/webdev/serverprogramming/aspnet/asp-net-single-sign-on-against-office365-with-oauth2/#comment-5113964</link>
		<dc:creator><![CDATA[Eli Weinstock-Herman (tarwn)]]></dc:creator>
		<pubDate>Tue, 28 Jun 2016 01:09:53 +0000</pubDate>
		<guid isPermaLink="false">/?p=4549#comment-5113964</guid>
		<description><![CDATA[I haven&#039;t done that myself, but I recall one of the posts I went through had information on both the single tenant implementation like I have here as well as the extra steps for a multi-tenant setup. If I recall, the key difference is something in the application setup. It may have been something to do with setting up the newer roles features, I found that documentation to be even more dense and abstract than most of the rest though.]]></description>
		<content:encoded><![CDATA[<p>I haven&#8217;t done that myself, but I recall one of the posts I went through had information on both the single tenant implementation like I have here as well as the extra steps for a multi-tenant setup. If I recall, the key difference is something in the application setup. It may have been something to do with setting up the newer roles features, I found that documentation to be even more dense and abstract than most of the rest though.</p>
]]></content:encoded>
	</item>
	<item>
		<title>By: Dan Sargeant</title>
		<link>/index.php/webdev/serverprogramming/aspnet/asp-net-single-sign-on-against-office365-with-oauth2/#comment-5113735</link>
		<dc:creator><![CDATA[Dan Sargeant]]></dc:creator>
		<pubDate>Mon, 27 Jun 2016 22:32:03 +0000</pubDate>
		<guid isPermaLink="false">/?p=4549#comment-5113735</guid>
		<description><![CDATA[I am glad I am not the only one that finds the documentation and articles on this subject rather unhelpful. Your article appears to be aimed at those trying to use SSO with a single Office365/AD account, most likely for an internal application. Do you have any insight on how this would work if you are writing a public application with the ability for the end users to add their own Office365/AD accounts? In the same way as you quite often come across SAAS applications that allow you to use your own Google Apps account as SSO.]]></description>
		<content:encoded><![CDATA[<p>I am glad I am not the only one that finds the documentation and articles on this subject rather unhelpful. Your article appears to be aimed at those trying to use SSO with a single Office365/AD account, most likely for an internal application. Do you have any insight on how this would work if you are writing a public application with the ability for the end users to add their own Office365/AD accounts? In the same way as you quite often come across SAAS applications that allow you to use your own Google Apps account as SSO.</p>
]]></content:encoded>
	</item>
	<item>
		<title>By: Eli Weinstock-Herman (tarwn)</title>
		<link>/index.php/webdev/serverprogramming/aspnet/asp-net-single-sign-on-against-office365-with-oauth2/#comment-5113600</link>
		<dc:creator><![CDATA[Eli Weinstock-Herman (tarwn)]]></dc:creator>
		<pubDate>Mon, 27 Jun 2016 21:24:41 +0000</pubDate>
		<guid isPermaLink="false">/?p=4549#comment-5113600</guid>
		<description><![CDATA[Nope, I just overlooked it in my example code. It should be set as secure. Good catch, thanks :)]]></description>
		<content:encoded><![CDATA[<p>Nope, I just overlooked it in my example code. It should be set as secure. Good catch, thanks 🙂</p>
]]></content:encoded>
	</item>
	<item>
		<title>By: Grzeg</title>
		<link>/index.php/webdev/serverprogramming/aspnet/asp-net-single-sign-on-against-office365-with-oauth2/#comment-5113368</link>
		<dc:creator><![CDATA[Grzeg]]></dc:creator>
		<pubDate>Mon, 27 Jun 2016 19:16:53 +0000</pubDate>
		<guid isPermaLink="false">/?p=4549#comment-5113368</guid>
		<description><![CDATA[Hi, thanks for sharing, just one thought: is it any specific reason why are you setting the myo365auth cookie as not secure?]]></description>
		<content:encoded><![CDATA[<p>Hi, thanks for sharing, just one thought: is it any specific reason why are you setting the myo365auth cookie as not secure?</p>
]]></content:encoded>
	</item>
</channel>
</rss>
