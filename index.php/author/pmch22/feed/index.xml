<?xml version="1.0" encoding="UTF-8"?><rss version="2.0"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:atom="http://www.w3.org/2005/Atom"
	xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
	xmlns:slash="http://purl.org/rss/1.0/modules/slash/"
	>

<channel>
	<title>pmch22 &#8211; LessthanDot</title>
	<atom:link href="/index.php/author/pmch22/feed/" rel="self" type="application/rss+xml" />
	<link>/</link>
	<description>A Technical Community for IT Professionals</description>
	<lastBuildDate>Sat, 09 Mar 2019 12:50:36 +0000</lastBuildDate>
	<language>en-US</language>
	<sy:updatePeriod>hourly</sy:updatePeriod>
	<sy:updateFrequency>1</sy:updateFrequency>
	<generator>https://wordpress.org/?v=4.6.1</generator>
	<item>
		<title>Default Dates in SSRS Reports</title>
		<link>/index.php/datamgmt/datadesign/default-dates-in-reports/</link>
		<comments>/index.php/datamgmt/datadesign/default-dates-in-reports/#comments</comments>
		<pubDate>Tue, 14 Apr 2009 12:05:17 +0000</pubDate>
		<dc:creator><![CDATA[pmch22]]></dc:creator>
				<category><![CDATA[Data Modelling and Design]]></category>

		<guid isPermaLink="false">/index.php/2009/04/default-dates-in-reports/</guid>
		<description><![CDATA[For reports that requires start and end dates as parameters, typically the default dates are set as today and today + 1 day or today + 1 month. Instead it might be a good idea to pick up the start and end dates from the database. This way the user will not have to play [&#8230;]]]></description>
				<content:encoded><![CDATA[<p>For reports that requires start and end dates as parameters, typically the default dates are set as today and today + 1 day or today + 1 month.  Instead it might be a good idea to pick up the start and end dates from the database. This way the user will not have to play the guessing game of trying different date ranges to generate a valid report.<br />
To do this, create a new dataset. Paste the below query </p>
<pre>Declare @joindate datetime
select @joindate = max(joindate)  from employees
select cast(convert (varchar(10),dateadd(dd,-(day(@joindate)-1),@joindate),101) as datetime) as startdate,  cast(convert(varchar(10),dateadd(dd,-day(dateadd(mm,1,@joindate)),dateadd(mm,1,@joindate)),101) as datetime) as enddate</pre>
<p>Next on the Reports Parameters window, set the default values  as &#8211; From Query and select the Start and End dates.</p>
<div class="image_block"><img src="/wp-content/uploads/blogs/DataMgmt/date-parameters.GIF" alt="" title="" width="666" height="520" /></div>
<p>Next time when you run the report, the start and end dates will be picked up from the database. You can use these dates to generate the report by default.</p>
<div class="image_block"><img src="/wp-content/uploads/blogs/DataMgmt/Date-Range.gif" alt="" title="" width="749" height="56" /></div>
]]></content:encoded>
			<wfw:commentRss>/index.php/datamgmt/datadesign/default-dates-in-reports/feed/</wfw:commentRss>
		<slash:comments>7</slash:comments>
		</item>
		<item>
		<title>Application Event Log for your website</title>
		<link>/index.php/webdev/webdesigngraphicsstyling/application-event-log-for-your-website/</link>
		<comments>/index.php/webdev/webdesigngraphicsstyling/application-event-log-for-your-website/#comments</comments>
		<pubDate>Mon, 08 Dec 2008 10:17:20 +0000</pubDate>
		<dc:creator><![CDATA[pmch22]]></dc:creator>
				<category><![CDATA[Web Design, Graphics and Styling]]></category>

		<guid isPermaLink="false">/index.php/2008/12/application-event-log-for-your-website/</guid>
		<description><![CDATA[A healthy application is one which does not throw up any application errors. However in unexpected situations when it happens, error gets logged on the web server’s event log. It’s usually takes a little while to scroll through the event viewer to find your error. One good option is to create a separate application error [&#8230;]]]></description>
				<content:encoded><![CDATA[<p>A healthy application is one which does not throw up any application errors. However in unexpected situations when it happens, error gets logged on the web server’s event log. It’s usually takes a little while to scroll through the event viewer to find your error. One good option is to create a separate application error log for your website.  </p>
<p>Let’s see some code now. Start by importing the System.Diagnostics namespace.<br />
Server.GetLastError() is accessible only at two places – 1. Page_Error event handler of a page . 2. Application_Error event handler in the global.asax </p>
<p>In this article, we’ll trap the unhandled errors in Application_Error event.</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="csharp"><thead><tr><td colspan="2"  class="head">C#</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
</pre></td><td class="de1"><pre class="de1"><span class="sy0">&lt;%</span>Import <span class="kw1">Namespace</span><span class="sy0">=</span> “<span class="kw5">System.<span class="me1">Diagnostics</span></span>”<span class="sy0">%&gt;</span>
&nbsp;
<span class="kw4">void</span> Application_Error<span class="br0">&#40;</span><span class="kw4">object</span> sender, EventArgs e<span class="br0">&#41;</span> 
&nbsp; &nbsp; <span class="br0">&#123;</span> 
&nbsp; &nbsp; &nbsp; &nbsp;<span class="co1">//Code that runs when an unhandled error occurs</span>
&nbsp; &nbsp; &nbsp; <span class="kw4">string</span> LogName <span class="sy0">=</span> <span class="st0">&quot;MySiteAppLog&quot;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; <span class="kw4">string</span> SourceName <span class="sy0">=</span> <span class="st0">&quot;MySiteAppSource&quot;</span><span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; &nbsp; <span class="co1">//get the HTTPContxt object for the current request. &nbsp;</span>
&nbsp; &nbsp; &nbsp; &nbsp; HttpContext ctx <span class="sy0">=</span> HttpContext<span class="sy0">.</span><span class="me1">Current</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; Exception ex <span class="sy0">=</span> ctx<span class="sy0">.</span><span class="me1">Server</span><span class="sy0">.</span><span class="me1">GetLastError</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">.</span><span class="me1">GetBaseException</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw4">string</span> errorInfo <span class="sy0">=</span> <span class="st0">&quot;&lt;br&gt;Offending URL: &quot;</span> <span class="sy0">+</span> ctx<span class="sy0">.</span><span class="me1">Request</span><span class="sy0">.</span><span class="me1">Url</span><span class="sy0">.</span><span class="me1">ToString</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; errorInfo <span class="sy0">+=</span> <span class="st0">&quot;&lt;br&gt;Exception Details: &quot;</span> <span class="sy0">+</span> ex<span class="sy0">.</span><span class="me1">Message</span><span class="sy0">.</span><span class="me1">ToString</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp;<span class="co1">// ctx.Server.ClearError();</span>
&nbsp;
&nbsp; &nbsp; <span class="co1">//Creates the application log when the first error occurs.</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">if</span> <span class="br0">&#40;</span><span class="sy0">!</span><span class="br0">&#40;</span>EventLog<span class="sy0">.</span><span class="me1">SourceExists</span><span class="br0">&#40;</span>SourceName<span class="br0">&#41;</span><span class="br0">&#41;</span><span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; EventLog<span class="sy0">.</span><span class="me1">CreateEventSource</span><span class="br0">&#40;</span>SourceName, LogName<span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp; &nbsp; &nbsp; &nbsp; EventLog MyLog <span class="sy0">=</span> <span class="kw3">new</span> EventLog<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; MyLog<span class="sy0">.</span><span class="me1">Source</span> <span class="sy0">=</span> SourceName<span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; MyLog<span class="sy0">.</span><span class="me1">WriteEntry</span><span class="br0">&#40;</span>errorInfo, EventLogEntryType<span class="sy0">.</span><span class="me1">Error</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; Session<span class="sy0">.</span><span class="me1">Abandon</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; <span class="br0">&#125;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">&lt;%Import Namespace= “System.Diagnostics”%&gt;

void Application_Error(object sender, EventArgs e) 
    { 
       //Code that runs when an unhandled error occurs
      string LogName = "MySiteAppLog";
      string SourceName = "MySiteAppSource";

      //get the HTTPContxt object for the current request.  
        HttpContext ctx = HttpContext.Current;
        Exception ex = ctx.Server.GetLastError().GetBaseException();
   
        string errorInfo = "&lt;br&gt;Offending URL: " + ctx.Request.Url.ToString();
        errorInfo += "&lt;br&gt;Exception Details: " + ex.Message.ToString();

       // ctx.Server.ClearError();

	//Creates the application log when the first error occurs.
        if (!(EventLog.SourceExists(SourceName)))
        {
            EventLog.CreateEventSource(SourceName, LogName);
        }
        EventLog MyLog = new EventLog();
        MyLog.Source = SourceName;

        MyLog.WriteEntry(errorInfo, EventLogEntryType.Error);
         
        Session.Abandon();

    }</pre></div></div>

<p>Note in the above code, Server.ClearError() is commented. This brings the customErrors section of the web.config into play. Once the error occurs, the error is logged into the event log and then redirected to a custom error page. Therefore make sure the customErrors section of the web.config file has an entry like this</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="csharp"><thead><tr><td colspan="2"  class="head">C#</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
</pre></td><td class="de1"><pre class="de1"><span class="sy0">&lt;</span>customErrors mode<span class="sy0">=</span> “On” defaultRedirect<span class="sy0">=</span> “AppError<span class="sy0">.</span><span class="me1">htm</span>”<span class="sy0">&gt;&lt;/</span>customErrors<span class="sy0">&gt;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">&lt;customErrors mode= “On” defaultRedirect= “AppError.htm”&gt;&lt;/customErrors&gt;</pre></div></div>

<p>Continuing with the creation of Eventlog, create a sample page on your site to generate application error and then follow the below steps.</p>
<p>1.Open Regedt32. </p>
<p>2.Go to HKEY_LOCAL_MACHINESystemCurrentControlSetServicesEventLog. </p>
<p>3.Add FULL permissions to ASPNET  and Network services account. </p>
<p>4.Browse to the sample page and create application error.</p>
<p>5.This error should be logged in Eventlog as a new log &#8211;  MyAppLog. </p>
<p>6.Once the log is created remove permissions to NetworkServices account in Event log. Network services account is needed only to create the log.  </p>
<p>7.Repeat error again on the sample page. A new error should be logged in the event log.  </p>
<p>8.Repeat from remote system(to test as  non- admin user). </p>
<p>9.Check event log.  </p>
<p>The only drawback to create to an application specific event log is that you need admin rights on the web server. If that’s not possible, you can send out an email or write to a log file on the server. Code to send email  &#8211;</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="csharp"><thead><tr><td colspan="2"  class="head">C#</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
</pre></td><td class="de1"><pre class="de1"><span class="sy0">&lt;%</span>Import <span class="kw5">System.<span class="me1">Web</span></span><span class="sy0">.</span><span class="me1">Mail</span><span class="sy0">%&gt;</span>
&nbsp;MailMessage &nbsp;errMail <span class="sy0">=</span> <span class="kw3">new</span> MailMessage<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
errMail<span class="sy0">.</span><span class="me1">To</span><span class="sy0">=</span> <span class="st0">&quot;ITgroup@company.com&quot;</span><span class="sy0">;</span>
errMail<span class="sy0">.</span><span class="kw1">From</span><span class="sy0">=</span> <span class="st0">&quot;web@company.com&quot;</span><span class="sy0">;</span> 
errMail<span class="sy0">.</span><span class="me1">Subject</span> <span class="sy0">=</span> <span class="st0">&quot;Application error on website&quot;</span><span class="sy0">;</span>
errMail<span class="sy0">.</span><span class="me1">Body</span> <span class="sy0">=</span> errorInfo<span class="sy0">;</span>
SmtpMail<span class="sy0">.</span><span class="me1">SmtpServer</span> <span class="sy0">=</span> <span class="st0">&quot;Mailserverip&quot;</span><span class="sy0">;</span>
SmtpMai<span class="sy0">.</span><span class="me1">Send</span><span class="br0">&#40;</span>errMail<span class="br0">&#41;</span><span class="sy0">;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">&lt;%Import System.Web.Mail%&gt;
 MailMessage  errMail = new MailMessage();
errMail.To= "ITgroup@company.com";
errMail.From= "web@company.com"; 
errMail.Subject = "Application error on website";
errMail.Body = errorInfo;
SmtpMail.SmtpServer = "Mailserverip";
SmtpMai.Send(errMail);</pre></div></div>

<p>Having an application specific event log helps you to view all the errors in one shot and saves you the time of browsing the regular event log and searching errors for your site.</p>
]]></content:encoded>
			<wfw:commentRss>/index.php/webdev/webdesigngraphicsstyling/application-event-log-for-your-website/feed/</wfw:commentRss>
		<slash:comments>4</slash:comments>
		</item>
		<item>
		<title>Intranet site for Reporting Services Reports</title>
		<link>/index.php/webdev/webdesigngraphicsstyling/intranet-site-for-reporting-services-rep/</link>
		<comments>/index.php/webdev/webdesigngraphicsstyling/intranet-site-for-reporting-services-rep/#comments</comments>
		<pubDate>Fri, 28 Nov 2008 17:40:40 +0000</pubDate>
		<dc:creator><![CDATA[pmch22]]></dc:creator>
				<category><![CDATA[Web Design, Graphics and Styling]]></category>

		<guid isPermaLink="false">/index.php/2008/11/intranet-site-for-reporting-services-rep/</guid>
		<description><![CDATA[Recently I was asked if I could design an intranet site to provide a single point access to all reports developed using Reporting Services. To begin with I developed a site where the Report URL was saved as a hyperlink on the page. Soon I realized that there were 50 odd reports and new reports [&#8230;]]]></description>
				<content:encoded><![CDATA[<p>Recently I was asked if I could design an intranet site to provide a single point access to all reports developed using Reporting Services. To begin with I developed a site where the Report URL was saved as a hyperlink on the page. Soon I realized that there were 50 odd reports and new reports keep getting added every now and then. This way I would have to keep updating the hyperlinks forever. I had to make the site dynamic by getting the latest reports from the report server. From security standpoint, access of the reports should be based on the login and any changes in security should be reflected realtime.</p>
<p>Reporting Services web service is the simplest way to meet the above requirements. The web service resides on your reporting server.  The Web Service includes a ton of methods that enable you to read and manage the report server and its contents. Let me dive right into the implementation part.<br />
1. Open Visual Studio, create a new website.<br />
2. Add the web service reference to your application using Add Web Reference. The path of the web service would be http://reportservername/ReportServer/ReportService.asmx<br />
Change the web reference name say ReportingService and click Add Web Reference. This name will become the namespace for the web service proxy. </p>
<div class="image_block"><img src="/wp-content/uploads/blogs/WebDev/RSWebService.JPG" alt="" title="" width="640" height="400" /></div>
<p>Once the reference is added,open the web.config file. You’ll notice a new section has been added the web.config</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="xml"><thead><tr><td colspan="2"  class="head">XML</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
</pre></td><td class="de1"><pre class="de1"><span class="sc3"><span class="re1">&lt;appSettings<span class="re2">&gt;</span></span></span>
&nbsp; &nbsp; <span class="sc3"><span class="re1">&lt;add</span> <span class="re0">key</span>=<span class="st0">&quot;Reporting.ReportService&quot;</span> <span class="re0">value</span>=<span class="st0">&quot;http://reportservername/ReportServer/ReportService.asmx&quot;</span><span class="re2">/&gt;</span></span>
&nbsp; &nbsp; <span class="sc3"><span class="re1">&lt;/appSettings<span class="re2">&gt;</span></span></span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">&lt;appSettings&gt;
	&lt;add key="Reporting.ReportService" value="http://reportservername/ReportServer/ReportService.asmx"/&gt;
	&lt;/appSettings&gt;</pre></div></div>

<p>3. Next, we need add reference to the Microsoft.ReportViewer.WebForms inorder to use the Report Viewer.Go to Website. Add Reference. Select<br />
Microsoft.ReportViewer.WebForms. Click Add. This would add the Report Viewer to the toolbox and new sections to the web.config.</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="xml"><thead><tr><td colspan="2"  class="head">XML</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
</pre></td><td class="de1"><pre class="de1"><span class="sc3"><span class="re1">&lt;assemblies<span class="re2">&gt;</span></span></span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="sc3"><span class="re1">&lt;add</span> <span class="re0">assembly</span>=<span class="st0">&quot;Microsoft.ReportViewer.WebForms, Version=8.0.0.0, Culture=neutral, PublicKeyToken=B03F5F7F11D50A3A&quot;</span><span class="re2">/&gt;</span></span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="sc3"><span class="re1">&lt;/assemblies<span class="re2">&gt;</span></span></span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="sc3"><span class="re1">&lt;buildProviders<span class="re2">&gt;</span></span></span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="sc3"><span class="re1">&lt;add</span> <span class="re0">extension</span>=<span class="st0">&quot;.rdlc&quot;</span> <span class="re0">type</span>=<span class="st0">&quot;Microsoft.Reporting.RdlBuildProvider, Microsoft.ReportViewer.Common, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a&quot;</span><span class="re2">/&gt;</span></span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="sc3"><span class="re1">&lt;/buildProviders<span class="re2">&gt;</span></span></span>
&nbsp;
<span class="sc3"><span class="re1">&lt;httpHandlers<span class="re2">&gt;</span></span></span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="sc3"><span class="re1">&lt;add</span> <span class="re0">verb</span>=<span class="st0">&quot;*&quot;</span> <span class="re0">path</span>=<span class="st0">&quot;Reserved.ReportViewerWebControl.axd&quot;</span> <span class="re0">type</span>=<span class="st0">&quot;Microsoft.Reporting.WebForms.HttpHandler, Microsoft.ReportViewer.WebForms, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a&quot;</span><span class="re2">/&gt;</span></span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="sc3"><span class="re1">&lt;/httpHandlers<span class="re2">&gt;</span></span></span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">&lt;assemblies&gt;
				&lt;add assembly="Microsoft.ReportViewer.WebForms, Version=8.0.0.0, Culture=neutral, PublicKeyToken=B03F5F7F11D50A3A"/&gt;
			&lt;/assemblies&gt;
			&lt;buildProviders&gt;
				&lt;add extension=".rdlc" type="Microsoft.Reporting.RdlBuildProvider, Microsoft.ReportViewer.Common, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"/&gt;
			&lt;/buildProviders&gt;

&lt;httpHandlers&gt;
			&lt;add verb="*" path="Reserved.ReportViewerWebControl.axd" type="Microsoft.Reporting.WebForms.HttpHandler, Microsoft.ReportViewer.WebForms, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"/&gt;
		&lt;/httpHandlers&gt;</pre></div></div>

<p>4. Now we move on to creating a new page and designing the layout of the page. Typically the design would be given by user group but in my case I had to create a layout and present it for approval. As I browsed the report manager, I realized that we had several folders and each folder had reports related to a department or task. I had to organize the reports in such a way it would be easy for novice users to use it without any help. I cannot list all the reports as that would show too many reports to the user (depending on their access level of course) and that can be overwhelming!! Therefore I decided to use 2 combo boxes, one to list the folders and the second to list the reports in each folder. I also have a Run Report button the page. User can select a report in the combo box and click Run Report. This would display the in a new window.</p>
<div class="image_block"><img src="/wp-content/uploads/blogs/WebDev/reportcatalog.JPG" alt="" title="" width="640" height="400" /></div>
<p>5. We start by including the Reporting Services namespace to the code behind file. Then create an instance of the ReportingService proxy class on the page load event. Pass the client login credentials.</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="csharp"><thead><tr><td colspan="2"  class="head">C#</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
</pre></td><td class="de1"><pre class="de1"><span class="kw1">using</span> <span class="co3">ReportingServices</span><span class="sy0">;</span>
&nbsp;<span class="kw1">protected</span> <span class="kw4">void</span> Page_Load<span class="br0">&#40;</span><span class="kw4">object</span> sender, EventArgs e<span class="br0">&#41;</span>
&nbsp;<span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp;<span class="kw1">if</span> <span class="br0">&#40;</span><span class="sy0">!</span>Page<span class="sy0">.</span><span class="me1">IsPostBack</span><span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ReportingService rs <span class="sy0">=</span> <span class="kw3">new</span> ReportingService<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; rs<span class="sy0">.</span><span class="me1">Credentials</span> <span class="sy0">=</span> <span class="kw5">System.<span class="me1">Net</span></span><span class="sy0">.</span><span class="me1">CredentialCache</span><span class="sy0">.</span><span class="me1">DefaultCredentials</span><span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">foreach</span> <span class="br0">&#40;</span>CatalogItem item <span class="kw1">in</span> rs<span class="sy0">.</span><span class="me1">ListChildren</span><span class="br0">&#40;</span><span class="st0">&quot;/&quot;</span>, <span class="kw1">true</span><span class="br0">&#41;</span><span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">if</span> <span class="br0">&#40;</span>item<span class="sy0">.</span><span class="me1">Type</span> <span class="sy0">==</span> ItemTypeEnum<span class="sy0">.</span><span class="me1">Folder</span> <span class="sy0">&amp;&amp;</span> item<span class="sy0">.</span><span class="me1">Name</span> <span class="sy0">!=</span> <span class="st0">&quot;Data Sources&quot;</span><span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="co1">//skip datasource folder.</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="co1">//DropDownList1.Items.Add(new ListItem(item.Name, item.Path));</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; lbModules<span class="sy0">.</span><span class="me1">Items</span><span class="sy0">.</span><span class="kw1">Add</span><span class="br0">&#40;</span><span class="kw3">new</span> ListItem<span class="br0">&#40;</span>item<span class="sy0">.</span><span class="me1">Name</span>, item<span class="sy0">.</span><span class="me1">Path</span><span class="br0">&#41;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp;<span class="br0">&#125;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">using ReportingServices;
 protected void Page_Load(object sender, EventArgs e)
 {
     if (!Page.IsPostBack)
        {
            ReportingService rs = new ReportingService();
            rs.Credentials = System.Net.CredentialCache.DefaultCredentials;

            foreach (CatalogItem item in rs.ListChildren("/", true))
            {
                if (item.Type == ItemTypeEnum.Folder &amp;&amp; item.Name != "Data Sources")
                {
                    //skip datasource folder.
                    //DropDownList1.Items.Add(new ListItem(item.Name, item.Path));
                    lbModules.Items.Add(new ListItem(item.Name, item.Path));
                }
            }
        }
 }</pre></div></div>

<p>ListChildren method requires 2 parameters. The first parameter is the path of the folder to look in and the second parameter is a flag to indicate if the method should recurse through subdirectories.<br />
The method returns an array of catalogitem objects based on the user permissions. The catalog items can be reports,data sources,folders Once we get the array of catalog items, we loop through the array and read the properties of each catalogitem. A catalogitem properties give us information about the item like Name,Created By, Description, Path, Type etc. Here we mainly make use of the type and Name. If an item is of type “Folder” we add the item to combo box. Since we don’t want to show data sources folder to users, we check for the name “Data Sources” and ignore it.</p>
<p>6.The next method  ListReports is written for SelectedIndexChanged event of the folders combobox which means when an item in the folders combobox is selected this event is fired. As the name suggests this method lists all the reports in the selected folder item. We pass the path of the selected folder as a parameter to the List Children method. This time we check if the Item.type is Report.</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="csharp"><thead><tr><td colspan="2"  class="head">C#</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
</pre></td><td class="de1"><pre class="de1"><span class="kw1">protected</span> <span class="kw4">void</span> ListReports<span class="br0">&#40;</span><span class="kw4">object</span> sender, EventArgs e<span class="br0">&#41;</span>
&nbsp; &nbsp; <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw4">string</span> path <span class="sy0">=</span> <span class="st0">&quot;&quot;</span><span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; lbReports<span class="sy0">.</span><span class="me1">Items</span><span class="sy0">.</span><span class="me1">Clear</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; ReportingService rs <span class="sy0">=</span> <span class="kw3">new</span> ReportingService<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; rs<span class="sy0">.</span><span class="me1">Credentials</span> <span class="sy0">=</span> <span class="kw5">System.<span class="me1">Net</span></span><span class="sy0">.</span><span class="me1">CredentialCache</span><span class="sy0">.</span><span class="me1">DefaultCredentials</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; path <span class="sy0">=</span> lbModules<span class="sy0">.</span><span class="me1">SelectedValue</span><span class="sy0">;</span>
&nbsp; 
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">foreach</span> <span class="br0">&#40;</span>CatalogItem item <span class="kw1">in</span> rs<span class="sy0">.</span><span class="me1">ListChildren</span><span class="br0">&#40;</span>path, <span class="kw1">true</span><span class="br0">&#41;</span><span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">if</span> <span class="br0">&#40;</span>item<span class="sy0">.</span><span class="me1">Type</span> <span class="sy0">==</span> ItemTypeEnum<span class="sy0">.</span><span class="me1">Report</span><span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; lbReports<span class="sy0">.</span><span class="me1">Items</span><span class="sy0">.</span><span class="kw1">Add</span><span class="br0">&#40;</span><span class="kw3">new</span> ListItem<span class="br0">&#40;</span>item<span class="sy0">.</span><span class="me1">Name</span>, item<span class="sy0">.</span><span class="me1">Path</span><span class="br0">&#41;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">if</span> <span class="br0">&#40;</span>lbReports<span class="sy0">.</span><span class="me1">Items</span><span class="sy0">.</span><span class="me1">Count</span> <span class="sy0">&gt;</span> <span class="nu0">0</span><span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; lbReports<span class="sy0">.</span><span class="me1">Visible</span> <span class="sy0">=</span> <span class="kw1">true</span><span class="sy0">;</span>
&nbsp; &nbsp; <span class="br0">&#125;</span>
<span class="br0">&#125;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">protected void ListReports(object sender, EventArgs e)
    {
        string path = "";

        lbReports.Items.Clear();
        ReportingService rs = new ReportingService();
        rs.Credentials = System.Net.CredentialCache.DefaultCredentials;
       
                path = lbModules.SelectedValue;
  
        foreach (CatalogItem item in rs.ListChildren(path, true))
        {
            if (item.Type == ItemTypeEnum.Report)
                lbReports.Items.Add(new ListItem(item.Name, item.Path));
        }

        if (lbReports.Items.Count &gt; 0)
            lbReports.Visible = true;
    }
}</pre></div></div>

<p>7. Now to run the report.  This is a simple javascript function to open the report in a new window. Pass the path of the report the new window.</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="javascript"><thead><tr><td colspan="2"  class="head">Javascript</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
</pre></td><td class="de1"><pre class="de1"><span class="kw1">function</span> OpenReport<span class="br0">&#40;</span><span class="br0">&#41;</span>
&nbsp; &nbsp; <span class="br0">&#123;</span>
&nbsp; &nbsp; <span class="kw1">var</span> path<span class="sy0">=</span>document.<span class="me1">getElementById</span><span class="br0">&#40;</span><span class="st0">&quot;lbReports&quot;</span><span class="br0">&#41;</span>.<span class="me1">value</span><span class="sy0">;</span>
&nbsp; &nbsp; alert<span class="br0">&#40;</span>path<span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; window.<span class="me1">open</span><span class="br0">&#40;</span><span class="st0">&quot;OpenReport.aspx?&amp;Path=&quot;</span><span class="sy0">+</span>path<span class="sy0">,</span><span class="st0">&quot;&quot;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; <span class="br0">&#125;</span> </pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">function OpenReport()
    {
    var path=document.getElementById("lbReports").value;
    alert(path);
    window.open("OpenReport.aspx?&amp;Path="+path,"");
    } </pre></div></div>

<p>8. Our next task is to display the report on a web page.  Start by creating a new page. Drag and drop the report viewer control from the toolbox. In the code behind file get the path of the selected report from the query string and set the path of the report viewer.</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="csharp"><thead><tr><td colspan="2"  class="head">C#</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
</pre></td><td class="de1"><pre class="de1"><span class="kw1">using</span> <span class="co3">Microsoft.Reporting.WebForms</span><span class="sy0">;</span>
&nbsp;
<span class="kw1">public</span> <span class="kw1">partial</span> <span class="kw4">class</span> OpenReport <span class="sy0">:</span> <span class="kw5">System.<span class="me1">Web</span><span class="sy0">.</span><span class="me1">UI</span></span><span class="sy0">.</span><span class="me1">Page</span>
<span class="br0">&#123;</span>
&nbsp; &nbsp; <span class="kw1">protected</span> <span class="kw4">void</span> Page_Load<span class="br0">&#40;</span><span class="kw4">object</span> sender, EventArgs e<span class="br0">&#41;</span>
&nbsp; &nbsp; <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw4">string</span> ReportPath<span class="sy0">=</span><span class="st0">&quot;&quot;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; ReportPath <span class="sy0">=</span> Request<span class="sy0">.</span><span class="me1">QueryString</span><span class="br0">&#91;</span><span class="st0">&quot;Path&quot;</span><span class="br0">&#93;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">if</span> <span class="br0">&#40;</span>ReportPath <span class="sy0">!=</span> <span class="st0">&quot;&quot;</span> <span class="sy0">||</span> ReportPath <span class="sy0">!=</span> <span class="kw1">null</span><span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">if</span> <span class="br0">&#40;</span><span class="sy0">!</span>Page<span class="sy0">.</span><span class="me1">IsPostBack</span><span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ReportViewer1<span class="sy0">.</span><span class="me1">ShowParameterPrompts</span> <span class="sy0">=</span> <span class="kw1">true</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ReportViewer1<span class="sy0">.</span><span class="me1">ProcessingMode</span> <span class="sy0">=</span> ProcessingMode<span class="sy0">.</span><span class="me1">Remote</span><span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ServerReport svrReport <span class="sy0">=</span> ReportViewer1<span class="sy0">.</span><span class="me1">ServerReport</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp;svrReport<span class="sy0">.</span><span class="me1">ReportServerUrl</span> <span class="sy0">=</span> <span class="kw3">new</span> Uri<span class="br0">&#40;</span><span class="st0">&quot;http://reportservername/ReportServer/&quot;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; svrReport<span class="sy0">.</span><span class="me1">ReportPath</span> <span class="sy0">=</span> ReportPath<span class="sy0">;</span>
&nbsp;
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp;
&nbsp; &nbsp; <span class="br0">&#125;</span>
<span class="br0">&#125;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">using Microsoft.Reporting.WebForms;

public partial class OpenReport : System.Web.UI.Page
{
    protected void Page_Load(object sender, EventArgs e)
    {
        string ReportPath="";
        ReportPath = Request.QueryString["Path"];
        if (ReportPath != "" || ReportPath != null)
        {
            if (!Page.IsPostBack)
            {
                ReportViewer1.ShowParameterPrompts = true;
                ReportViewer1.ProcessingMode = ProcessingMode.Remote;

                ServerReport svrReport = ReportViewer1.ServerReport;
     svrReport.ReportServerUrl = new Uri("http://reportservername/ReportServer/");
                svrReport.ReportPath = ReportPath;


            }
        }

    }
}</pre></div></div>

<p>Deployment  -Where to host?</p>
<p>The simplest way to deploy the application on your intranet is by hosting the site on the reporting server.  When the application and the reporting server are on the same machine, enable impersonation in web config file. Doing so will pass the user credentials directly to the report server.</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="xml"><thead><tr><td colspan="2"  class="head">XML</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
</pre></td><td class="de1"><pre class="de1"><span class="sc3"><span class="re1">&lt;authentication</span> <span class="re0">mode</span>=<span class="st0">&quot;Windows&quot;</span><span class="re2">/&gt;</span></span>
<span class="sc3"><span class="re1">&lt;identity</span> <span class="re0">impersonate</span>=<span class="st0">&quot;true&quot;</span><span class="re2">/&gt;</span></span>
<span class="sc3">&lt;--To allow only authorized users to access the intranet site, include--<span class="re2">&gt;</span></span>
<span class="sc3"><span class="re1">&lt;authorization<span class="re2">&gt;</span></span></span>
&nbsp; &nbsp; <span class="sc3"><span class="re1">&lt;allow</span> <span class="re0">users</span>=<span class="st0">&quot;*&quot;</span><span class="re2">/&gt;</span></span>
&nbsp; &nbsp; <span class="sc3"><span class="re1">&lt;deny</span> <span class="re0">users</span>=<span class="st0">&quot;?&quot;</span><span class="re2">/&gt;</span></span>
<span class="sc3"><span class="re1">&lt;/authorization<span class="re2">&gt;</span></span></span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">&lt;authentication mode="Windows"/&gt;
&lt;identity impersonate="true"/&gt;
&lt;--To allow only authorized users to access the intranet site, include--&gt;
&lt;authorization&gt;
	&lt;allow users="*"/&gt;
	&lt;deny users="?"/&gt;
&lt;/authorization&gt;</pre></div></div>

<p>When the reporting server and web server are on different machines, Kerberos authenication protocol is required to pass the user credentails from web server to reporting server.</p>
<p>That’s about it. Creating a repository of reports is pretty straighforward using Reporting Services web service. I hope you’ll find this example useful.</p>
]]></content:encoded>
			<wfw:commentRss>/index.php/webdev/webdesigngraphicsstyling/intranet-site-for-reporting-services-rep/feed/</wfw:commentRss>
		<slash:comments>7</slash:comments>
		</item>
	</channel>
</rss>
