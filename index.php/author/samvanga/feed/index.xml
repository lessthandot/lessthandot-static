<?xml version="1.0" encoding="UTF-8"?><rss version="2.0"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:atom="http://www.w3.org/2005/Atom"
	xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
	xmlns:slash="http://purl.org/rss/1.0/modules/slash/"
	>

<channel>
	<title>Sam Vanga &#8211; LessthanDot</title>
	<atom:link href="/index.php/author/samvanga/feed/" rel="self" type="application/rss+xml" />
	<link>/</link>
	<description>A Technical Community for IT Professionals</description>
	<lastBuildDate>Sat, 09 Mar 2019 12:50:36 +0000</lastBuildDate>
	<language>en-US</language>
	<sy:updatePeriod>hourly</sy:updatePeriod>
	<sy:updateFrequency>1</sy:updateFrequency>
	<generator>https://wordpress.org/?v=4.6.1</generator>
	<item>
		<title>Standardize Table Aliases</title>
		<link>/index.php/datamgmt/dbprogramming/mssqlserver/standardize-table-aliases/</link>
		<comments>/index.php/datamgmt/dbprogramming/mssqlserver/standardize-table-aliases/#comments</comments>
		<pubDate>Tue, 05 Mar 2013 02:09:00 +0000</pubDate>
		<dc:creator><![CDATA[Sam Vanga]]></dc:creator>
				<category><![CDATA[Business Intelligence]]></category>
		<category><![CDATA[Microsoft SQL Server]]></category>

		<guid isPermaLink="false">/index.php/2013/03/standardize-table-aliases/</guid>
		<description><![CDATA[Inconsistent use of table aliases drives me crazy. Here is one way to standardize table aliases.]]></description>
				<content:encoded><![CDATA[<p>What&#8217;s wrong with the following code?</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
</pre></td><td class="de1"><pre class="de1"><span class="kw1">SELECT</span> 
&nbsp; &nbsp; a.<span class="br0">&#91;</span>BusinessEntityID<span class="br0">&#93;</span>
&nbsp; &nbsp; , b.<span class="br0">&#91;</span>FirstName<span class="br0">&#93;</span>
&nbsp; &nbsp; , b.<span class="br0">&#91;</span>LastName<span class="br0">&#93;</span> 
<span class="kw1">FROM</span> <span class="br0">&#91;</span>HumanResources<span class="br0">&#93;</span>.<span class="br0">&#91;</span>Employee<span class="br0">&#93;</span> a
&nbsp; &nbsp; <span class="kw1">INNER</span> <span class="sy0">JOIN</span> <span class="br0">&#91;</span>Person<span class="br0">&#93;</span>.<span class="br0">&#91;</span>Person<span class="br0">&#93;</span> b
&nbsp; &nbsp; <span class="kw1">ON</span> b.<span class="br0">&#91;</span>BusinessEntityID<span class="br0">&#93;</span> <span class="sy0">=</span> a.<span class="br0">&#91;</span>BusinessEntityID<span class="br0">&#93;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">SELECT 
    a.[BusinessEntityID]
    , b.[FirstName]
    , b.[LastName] 
FROM [HumanResources].[Employee] a
	INNER JOIN [Person].[Person] b
	ON b.[BusinessEntityID] = a.[BusinessEntityID]</pre></div></div>

<p>Nothing &#8211; except for my poor choice of using meaningless single characters as table aliases. Although it&#8217;s not a big deal with simpler queries like I&#8217;ve here, it can be a maintenance nightmare with complex queries that join multiple tables.</p>
<p>What about now? Is there anything wrong still?</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
</pre></td><td class="de1"><pre class="de1"><span class="kw1">SELECT</span> 
&nbsp; &nbsp; e.<span class="br0">&#91;</span>BusinessEntityID<span class="br0">&#93;</span>
&nbsp; &nbsp; , p.<span class="br0">&#91;</span>FirstName<span class="br0">&#93;</span>
&nbsp; &nbsp; , p.<span class="br0">&#91;</span>LastName<span class="br0">&#93;</span> 
<span class="kw1">FROM</span> <span class="br0">&#91;</span>HumanResources<span class="br0">&#93;</span>.<span class="br0">&#91;</span>Employee<span class="br0">&#93;</span> e
&nbsp; &nbsp; <span class="kw1">INNER</span> <span class="sy0">JOIN</span> <span class="br0">&#91;</span>Person<span class="br0">&#93;</span>.<span class="br0">&#91;</span>Person<span class="br0">&#93;</span> p
&nbsp; &nbsp; <span class="kw1">ON</span> e.<span class="br0">&#91;</span>BusinessEntityID<span class="br0">&#93;</span> <span class="sy0">=</span> p.<span class="br0">&#91;</span>BusinessEntityID<span class="br0">&#93;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">SELECT 
    e.[BusinessEntityID]
    , p.[FirstName]
    , p.[LastName] 
FROM [HumanResources].[Employee] e
	INNER JOIN [Person].[Person] p
	ON e.[BusinessEntityID] = p.[BusinessEntityID]</pre></div></div>

<p>No. This time I use e and p as aliases for Employee and Person respectively. Smart choice!</p>
<p>But I notice a problem in team environments. Different developers use different aliases for the same table resulting in confusion and inconsistency.</p>
<p>For example, some other developer might choose emp and ps instead of e and p like below.</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
</pre></td><td class="de1"><pre class="de1"><span class="kw1">SELECT</span> 
&nbsp; &nbsp; emp.<span class="br0">&#91;</span>BusinessEntityID<span class="br0">&#93;</span>
&nbsp; &nbsp; , ps.<span class="br0">&#91;</span>FirstName<span class="br0">&#93;</span>
&nbsp; &nbsp; , ps.<span class="br0">&#91;</span>LastName<span class="br0">&#93;</span> 
<span class="kw1">FROM</span> <span class="br0">&#91;</span>HumanResources<span class="br0">&#93;</span>.<span class="br0">&#91;</span>Employee<span class="br0">&#93;</span> emp
&nbsp; &nbsp; <span class="kw1">INNER</span> <span class="sy0">JOIN</span> <span class="br0">&#91;</span>Person<span class="br0">&#93;</span>.<span class="br0">&#91;</span>Person<span class="br0">&#93;</span> ps
&nbsp; &nbsp; <span class="kw1">ON</span> emp.<span class="br0">&#91;</span>BusinessEntityID<span class="br0">&#93;</span> <span class="sy0">=</span> ps.<span class="br0">&#91;</span>BusinessEntityID<span class="br0">&#93;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">SELECT 
    emp.[BusinessEntityID]
    , ps.[FirstName]
    , ps.[LastName] 
FROM [HumanResources].[Employee] emp
	INNER JOIN [Person].[Person] ps
	ON emp.[BusinessEntityID] = ps.[BusinessEntityID]</pre></div></div>

<p><span class="MT_under">Solution:</span></p>
<p>I use extended properties &#8211; following is an example script.</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
</pre></td><td class="de1"><pre class="de1"><span class="kw1">EXEC</span> sys.<span class="kw3">sp_addextendedproperty</span>
@name <span class="sy0">=</span> N<span class="st0">'TableAlias'</span>, 
@<span class="kw1">value</span> <span class="sy0">=</span> N<span class="st0">'emp'</span>, 
@level0type <span class="sy0">=</span> N<span class="st0">'SCHEMA'</span>, @level0name <span class="sy0">=</span> HumanResources, 
@level1type <span class="sy0">=</span> N<span class="st0">'TABLE'</span>, &nbsp;@level1name <span class="sy0">=</span> Employee ;
GO
&nbsp;
<span class="kw1">EXEC</span> sys.<span class="kw3">sp_addextendedproperty</span> 
@name <span class="sy0">=</span> N<span class="st0">'TableAlias'</span>, 
@<span class="kw1">value</span> <span class="sy0">=</span> N<span class="st0">'per'</span>, 
@level0type <span class="sy0">=</span> N<span class="st0">'SCHEMA'</span>, @level0name <span class="sy0">=</span> Person, 
@level1type <span class="sy0">=</span> N<span class="st0">'TABLE'</span>, &nbsp;@level1name <span class="sy0">=</span> Person ;
GO</pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">EXEC sys.sp_addextendedproperty
@name = N'TableAlias', 
@value = N'emp', 
@level0type = N'SCHEMA', @level0name = HumanResources, 
@level1type = N'TABLE',  @level1name = Employee ;
GO

EXEC sys.sp_addextendedproperty 
@name = N'TableAlias', 
@value = N'per', 
@level0type = N'SCHEMA', @level0name = Person, 
@level1type = N'TABLE',  @level1name = Person ;
GO</pre></div></div>

<p>Make no mistake, developers are still free to use different aliases, but it is at least easy to quickly see the standard alias by executing either of the following queries.</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
</pre></td><td class="de1"><pre class="de1"><span class="kw1">SELECT</span> <span class="br0">&#91;</span><span class="kw1">Schema</span><span class="br0">&#93;</span> <span class="sy0">=</span> s.<span class="me1">NAME</span>
&nbsp; &nbsp; , <span class="br0">&#91;</span><span class="kw1">Table</span><span class="br0">&#93;</span> <span class="sy0">=</span> t.<span class="me1">NAME</span>
&nbsp; &nbsp; , <span class="br0">&#91;</span><span class="kw1">Alias</span><span class="br0">&#93;</span> <span class="sy0">=</span> ep.<span class="kw1">value</span>
<span class="kw1">FROM</span> sys.<span class="me1">tables</span> t
<span class="kw1">INNER</span> <span class="sy0">JOIN</span> sys.<span class="me1">schemas</span> s <span class="kw1">ON</span> s.<span class="me1">schema_id</span> <span class="sy0">=</span> t.<span class="me1">schema_id</span>
<span class="kw1">LEFT</span> <span class="sy0">OUTER</span> <span class="sy0">JOIN</span> sys.<span class="me1">extended_properties</span> ep <span class="kw1">ON</span> ep.<span class="me1">major_id</span> <span class="sy0">=</span> t.<span class="kw2">object_id</span>
&nbsp; &nbsp; <span class="sy0">AND</span> ep.<span class="me1">NAME</span> <span class="sy0">=</span> <span class="st0">'TableAlias'</span> ;
&nbsp;
<span class="kw1">SELECT</span> <span class="sy0">*</span>
<span class="kw1">FROM</span> <span class="kw4">fn_listextendedproperty</span><span class="br0">&#40;</span><span class="st0">'TableAlias'</span>, <span class="st0">'schema'</span>, <span class="st0">'Person'</span>, <span class="st0">'table'</span>, <span class="st0">'Address'</span>, <span class="sy0">NULL</span>, <span class="sy0">NULL</span><span class="br0">&#41;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">SELECT [Schema] = s.NAME
	, [Table] = t.NAME
	, [Alias] = ep.value
FROM sys.tables t
INNER JOIN sys.schemas s ON s.schema_id = t.schema_id
LEFT OUTER JOIN sys.extended_properties ep ON ep.major_id = t.object_id
	AND ep.NAME = 'TableAlias' ;

SELECT *
FROM fn_listextendedproperty('TableAlias', 'schema', 'Person', 'table', 'Address', NULL, NULL)</pre></div></div>

<p>Now I&#8217;ve to give a shout out to RedGate&#8217;s SQL Promt. In addition to other features, SQL Prompt allows you to automatically assign table aliases, and <a href="http://www.red-gate.com/supportcenter/content/SQL_Prompt/help/5.3/SPT_Aliases">specify custom aliases</a> <strong>forcing you to use standard aliases</strong>.</p>
]]></content:encoded>
			<wfw:commentRss>/index.php/datamgmt/dbprogramming/mssqlserver/standardize-table-aliases/feed/</wfw:commentRss>
		<slash:comments>1</slash:comments>
		</item>
		<item>
		<title>Sparklines and Conditional Formating in SSRS</title>
		<link>/index.php/datamgmt/ssrs/sparklines-and-conditional-formatiing-ssrs/</link>
		<comments>/index.php/datamgmt/ssrs/sparklines-and-conditional-formatiing-ssrs/#respond</comments>
		<pubDate>Tue, 26 Feb 2013 11:59:00 +0000</pubDate>
		<dc:creator><![CDATA[Sam Vanga]]></dc:creator>
				<category><![CDATA[Business Intelligence]]></category>
		<category><![CDATA[SSRS]]></category>
		<category><![CDATA[sparklines]]></category>
		<category><![CDATA[ssrs]]></category>

		<guid isPermaLink="false">/index.php/2013/02/sparklines-and-conditional-formatiing-ssrs/</guid>
		<description><![CDATA[When creating a SSRS report, you want to add lines that display trends. You want to show trends for more than one data point. And you want to conditionally format the data point.

In this example, I use Sparklines and a simple expression to create a sparkling report!]]></description>
				<content:encoded><![CDATA[<p>When creating a SSRS report, you want to add lines that display trends. You want to show trends for more than one data point. And you want to conditionally format the data point.</p>
<p>In this example, I use Sparklines and a simple expression to create a sparkling report!</p>
<p>Below is how the Sparkline with multiple data points and conditional formatting applied to them will look like. Columns represent sales by month and line represents sales quota by month. Column is in green when sales exceeds the quota for a given month and red when sales fall below the quota.</p>
<div class="image_block"><a href="/wp-content/uploads/users/samvanga/ssrs-sparkline.png?mtime=1361623108"><img alt="" src="/wp-content/uploads/users/samvanga/ssrs-sparkline.png?mtime=1361623108" width="348" height="239" /></a></div>
<h3>Create dataset:</h3>
<p>After opening report server project and creating a data source, create a data set. Right click on shared datasets and choose add new dataset. Following is the query I am using for this example which runs against AdventureWorksDW2008R2 sample database.</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
</pre></td><td class="de1"><pre class="de1"><span class="kw1">SELECT</span> T.<span class="me1">CalendarYear</span>
&nbsp; &nbsp; , T.<span class="me1">CalendarQuarter</span>
&nbsp; &nbsp; , T.<span class="me1">MonthNumberOfYear</span>
&nbsp; &nbsp; , <span class="kw2">SUM</span><span class="br0">&#40;</span>S.<span class="me1">ExtendedAmount</span><span class="br0">&#41;</span> <span class="kw1">AS</span> Sales
&nbsp; &nbsp; , <span class="kw1">COALESCE</span><span class="br0">&#40;</span><span class="kw2">SUM</span><span class="br0">&#40;</span>Q.<span class="me1">SalesAmountQuota</span><span class="br0">&#41;</span> <span class="sy0">/</span> <span class="kw2">COUNT</span><span class="br0">&#40;</span>SalesAmountQuota<span class="br0">&#41;</span>, <span class="kw2">SUM</span><span class="br0">&#40;</span>Q.<span class="me1">SalesAmountQuota</span><span class="br0">&#41;</span> <span class="sy0">/</span> <span class="kw2">COUNT</span><span class="br0">&#40;</span>SalesAmountQuota<span class="br0">&#41;</span><span class="br0">&#41;</span> <span class="sy0">/</span> <span class="nu0">3</span> <span class="kw1">AS</span> Quota
&nbsp; &nbsp; , E.<span class="me1">FirstName</span> <span class="sy0">+</span> <span class="st0">' '</span> <span class="sy0">+</span> E.<span class="me1">LastName</span> <span class="kw1">AS</span> Employee
<span class="kw1">FROM</span> FactResellerSales <span class="kw1">AS</span> S
<span class="kw1">LEFT</span> <span class="sy0">OUTER</span> <span class="sy0">JOIN</span> dbo.<span class="me1">dimDate</span> T <span class="kw1">ON</span> S.<span class="me1">orderdatekey</span> <span class="sy0">=</span> DateKey
<span class="sy0">JOIN</span> dbo.<span class="me1">DimEmployee</span> E <span class="kw1">ON</span> S.<span class="me1">EmployeeKey</span> <span class="sy0">=</span> E.<span class="me1">EmployeeKey</span>
<span class="kw1">LEFT</span> <span class="sy0">OUTER</span> <span class="sy0">JOIN</span> dbo.<span class="me1">FactSalesQuota</span> Q <span class="kw1">ON</span> S.<span class="me1">EmployeeKey</span> <span class="sy0">=</span> Q.<span class="me1">EmployeeKey</span>
&nbsp; &nbsp; <span class="sy0">AND</span> T.<span class="me1">CalendarYear</span> <span class="sy0">=</span> Q.<span class="me1">CalendarYear</span>
&nbsp; &nbsp; <span class="sy0">AND</span> T.<span class="me1">CalendarQuarter</span> <span class="sy0">=</span> Q.<span class="me1">CalendarQuarter</span>
<span class="kw1">WHERE</span> S.<span class="me1">EmployeeKey</span> <span class="sy0">IN</span> <span class="br0">&#40;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">SELECT</span> <span class="kw1">TOP</span> <span class="nu0">10</span> EmployeeKey
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">FROM</span> FactResellerSales
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">GROUP</span> <span class="kw1">BY</span> factResellerSales.<span class="me1">EmployeeKey</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">ORDER</span> <span class="kw1">BY</span> <span class="kw2">SUM</span><span class="br0">&#40;</span>ExtendedAmount<span class="br0">&#41;</span> <span class="kw1">DESC</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#41;</span>
<span class="kw1">GROUP</span> <span class="kw1">BY</span> T.<span class="me1">CalendarYear</span>
&nbsp; &nbsp; , T.<span class="me1">CalendarQuarter</span>
&nbsp; &nbsp; , T.<span class="me1">MonthNumberOfYear</span>
&nbsp; &nbsp; , E.<span class="me1">FirstName</span>
&nbsp; &nbsp; , E.<span class="me1">LastName</span>
&nbsp; &nbsp; , E.<span class="me1">EmployeeKey</span>
<span class="kw1">ORDER</span> <span class="kw1">BY</span> Employee
&nbsp; &nbsp; , <span class="nu0">1</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">SELECT T.CalendarYear
	, T.CalendarQuarter
	, T.MonthNumberOfYear
	, SUM(S.ExtendedAmount) AS Sales
	, COALESCE(SUM(Q.SalesAmountQuota) / COUNT(SalesAmountQuota), SUM(Q.SalesAmountQuota) / COUNT(SalesAmountQuota)) / 3 AS Quota
	, E.FirstName + ' ' + E.LastName AS Employee
FROM FactResellerSales AS S
LEFT OUTER JOIN dbo.dimDate T ON S.orderdatekey = DateKey
JOIN dbo.DimEmployee E ON S.EmployeeKey = E.EmployeeKey
LEFT OUTER JOIN dbo.FactSalesQuota Q ON S.EmployeeKey = Q.EmployeeKey
	AND T.CalendarYear = Q.CalendarYear
	AND T.CalendarQuarter = Q.CalendarQuarter
WHERE S.EmployeeKey IN (
		SELECT TOP 10 EmployeeKey
		FROM FactResellerSales
		GROUP BY factResellerSales.EmployeeKey
		ORDER BY SUM(ExtendedAmount) DESC
		)
GROUP BY T.CalendarYear
	, T.CalendarQuarter
	, T.MonthNumberOfYear
	, E.FirstName
	, E.LastName
	, E.EmployeeKey
ORDER BY Employee
	, 1</pre></div></div>

<div>
<h3>Insert table:</h3>
</div>
<p>We want to insert a table grouped on Employee so one row for each employee is shown. Sparklines will later be added to this table.</p>
<p>Drag and drop table report item from the toolbox to report body. Next, drag Employee field from dataset and place it in the details row.</p>
<div class="image_block"><a href="/wp-content/uploads/users/samvanga/image_thumb1.png?mtime=1361624083"><img alt="" src="/wp-content/uploads/users/samvanga/image_thumb1.png?mtime=1361624083" width="244" height="64" /></a></div>
<p>Right click on the employee text box and insert a row group by choosing row group, group properties. In the group properties window choose Employee from the drop down for group on property.</p>
<div class="image_block"><a href="/wp-content/uploads/users/samvanga/ssrs-sparkline-3.png?mtime=1361624083"><img alt="" src="/wp-content/uploads/users/samvanga/ssrs-sparkline-3.png?mtime=1361624083" width="335" height="276" /></a></div>
<div class="image_block"><a href="/wp-content/uploads/users/samvanga/ssrs-sparkline-4.png?mtime=1361624083"><img alt="" src="/wp-content/uploads/users/samvanga/ssrs-sparkline-4.png?mtime=1361624083" width="423" height="304" /></a></div>
<h3>Insert Sparkline:</h3>
<p>We will configure a Sparkline with two data points, apply conditional formatting, and add Sparkline to the above table.<br />
Drag and drop Sparkline from toolbox on to the report body. Select column as the Sparkline type and click ok.<br />
Add sales, Quota from dataset to values and CalendarYear, CalendarQuarter to category groups.</p>
<div class="image_block"><a href="/wp-content/uploads/users/samvanga/ssrs-sparkline-5.png?mtime=1361624083"><img alt="" src="/wp-content/uploads/users/samvanga/ssrs-sparkline-5.png?mtime=1361624083" width="424" height="192" /></a></div>
<p>Click on Quota from values and choose change Sparkline type. From select Sparkline type page, choose smooth line and click ok.</p>
<div class="image_block"><a href="/wp-content/uploads/users/samvanga/ssrs-sparkline-6.png?mtime=1361624084"><img alt="" src="/wp-content/uploads/users/samvanga/ssrs-sparkline-6.png?mtime=1361624084" width="429" height="227" /></a></div>
<p>Click on Sales from values and choose series properties.</p>
<div class="image_block"><a href="/wp-content/uploads/users/samvanga/ssrs-sparkline-7.png?mtime=1361624084"><img alt="" src="/wp-content/uploads/users/samvanga/ssrs-sparkline-7.png?mtime=1361624084" width="436" height="179" /></a></div>
<p>From the series properties page, choose fill and type the following expression<br />
<code class="codespan">iif(Fields!Sales.Value&lt;Fields!Quota.Value,“red”,”green”)</code></p>
<p>Finally, drag and drop Sparkline to  a cell next to Employee in the table we created earlier.</p>
<div class="image_block"><a href="/wp-content/uploads/users/samvanga/ssrs-sparkline-8.png?mtime=1361624084"><img alt="" src="/wp-content/uploads/users/samvanga/ssrs-sparkline-8.png?mtime=1361624084" width="244" height="56" /></a></div>
<p>PS: I originally wrote this post on my <a href="http://svangasql.wordpress.com/2011/11/14/how-to-add-sparkline-in-ssrs/">old blog</a>. Since I started blogging on <a href="http://LessThanDot.com/">LessThanDot.com</a> I intend to selectively move content from my previous blog to LTD.</p>
]]></content:encoded>
			<wfw:commentRss>/index.php/datamgmt/ssrs/sparklines-and-conditional-formatiing-ssrs/feed/</wfw:commentRss>
		<slash:comments>0</slash:comments>
		</item>
		<item>
		<title>Script to Populate Date Dimension, without Using a Cursor</title>
		<link>/index.php/datamgmt/dbprogramming/script-to-populate-date-dimension-sql-server/</link>
		<comments>/index.php/datamgmt/dbprogramming/script-to-populate-date-dimension-sql-server/#respond</comments>
		<pubDate>Tue, 22 Jan 2013 13:20:00 +0000</pubDate>
		<dc:creator><![CDATA[Sam Vanga]]></dc:creator>
				<category><![CDATA[Business Intelligence]]></category>
		<category><![CDATA[Database Programming]]></category>
		<category><![CDATA[Microsoft SQL Server]]></category>
		<category><![CDATA[data warehouse]]></category>

		<guid isPermaLink="false">/index.php/2013/01/script-to-populate-date-dimension-sql-server/</guid>
		<description><![CDATA[Most of the scripts I've used to populate date dimension uses a cursor. Since data is loaded only once to a date dimension in the ETL life cycle, using a cursor isn't a sin. However, if you want to kick cursors out of the park, here is an alternative using Window Functions.]]></description>
				<content:encoded><![CDATA[<p>Most of the scripts I&#8217;ve used to populate date dimension uses a cursor. Since data is loaded only once to a date dimension in the ETL life cycle, using a cursor isn&#8217;t a sin.</p>
<p>Still, when I was reviewing my own code the other day, I wanted to get rid of the cursor. <em>Why not, Right</em>?</p>
<p>Here is a script that uses CTE and Window Functions to populate the date dimension.</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
</pre></td><td class="de1"><pre class="de1"><span class="kw1">DECLARE</span> @startdate <span class="kw1">DATE</span> <span class="sy0">=</span> <span class="st0">'20000101'</span>
&nbsp; &nbsp; , @enddate <span class="kw1">DATE</span> <span class="sy0">=</span> <span class="st0">'20301231'</span> ;
&nbsp;
<span class="kw1">WITH</span> c
<span class="kw1">AS</span> <span class="br0">&#40;</span>
&nbsp; &nbsp; <span class="kw1">SELECT</span>&nbsp; Num <span class="sy0">=</span> ROW_NUMBER<span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="kw1">OVER</span> <span class="br0">&#40;</span><span class="kw1">ORDER</span> <span class="kw1">BY</span> <span class="br0">&#40;</span><span class="kw1">SELECT</span> <span class="sy0">NULL</span><span class="br0">&#41;</span><span class="br0">&#41;</span> <span class="sy0">-</span> <span class="nu0">1</span>
&nbsp; &nbsp; <span class="kw1">FROM</span> sys.<span class="me1">columns</span> c
&nbsp; &nbsp; <span class="sy0">CROSS</span> <span class="sy0">JOIN</span> sys.<span class="me1">columns</span> c1
&nbsp; &nbsp; <span class="br0">&#41;</span>
, d
<span class="kw1">AS</span> <span class="br0">&#40;</span>
&nbsp; &nbsp; <span class="kw1">SELECT</span>&nbsp; <span class="br0">&#91;</span><span class="kw1">date</span><span class="br0">&#93;</span> <span class="sy0">=</span> <span class="kw2">DATEADD</span><span class="br0">&#40;</span><span class="kw1">day</span>, Num, @startdate<span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; , Num
&nbsp; &nbsp; <span class="kw1">FROM</span> c
&nbsp; &nbsp; <span class="kw1">WHERE</span> Num <span class="sy0">&gt;=</span> <span class="nu0">0</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="sy0">AND</span> Num <span class="sy0">&lt;=</span> <span class="kw2">DATEDIFF</span><span class="br0">&#40;</span><span class="kw1">day</span>, @startdate, @enddate<span class="br0">&#41;</span>
&nbsp; &nbsp; <span class="br0">&#41;</span>
<span class="kw1">SELECT</span> datekey <span class="sy0">=</span> <span class="kw1">CAST</span><span class="br0">&#40;</span><span class="kw1">CONVERT</span><span class="br0">&#40;</span><span class="kw1">VARCHAR</span><span class="br0">&#40;</span><span class="nu0">8</span><span class="br0">&#41;</span>, <span class="kw2">DATEADD</span><span class="br0">&#40;</span><span class="kw1">day</span>, Num, @startdate<span class="br0">&#41;</span>, <span class="nu0">112</span><span class="br0">&#41;</span> <span class="kw1">AS</span> <span class="kw1">INT</span><span class="br0">&#41;</span>
&nbsp; &nbsp; , <span class="br0">&#91;</span><span class="kw1">date</span><span class="br0">&#93;</span>
&nbsp; &nbsp; , <span class="br0">&#91;</span>DayOfMonth<span class="br0">&#93;</span> <span class="sy0">=</span> <span class="kw2">DATEPART</span><span class="br0">&#40;</span><span class="kw1">day</span>, <span class="br0">&#91;</span><span class="kw1">Date</span><span class="br0">&#93;</span><span class="br0">&#41;</span>
&nbsp; &nbsp; , <span class="br0">&#91;</span>DayName<span class="br0">&#93;</span> <span class="sy0">=</span> <span class="kw2">DATENAME</span><span class="br0">&#40;</span>weekday, <span class="br0">&#91;</span><span class="kw1">Date</span><span class="br0">&#93;</span><span class="br0">&#41;</span>
&nbsp; &nbsp; , <span class="br0">&#91;</span>DayOfYear<span class="br0">&#93;</span> <span class="sy0">=</span> <span class="kw2">DATEPART</span><span class="br0">&#40;</span>dayofyear, <span class="br0">&#91;</span><span class="kw1">Date</span><span class="br0">&#93;</span><span class="br0">&#41;</span>
&nbsp; &nbsp; , <span class="br0">&#91;</span>WeekOfYear<span class="br0">&#93;</span> <span class="sy0">=</span> <span class="kw2">DATEPART</span><span class="br0">&#40;</span>week, <span class="br0">&#91;</span><span class="kw1">Date</span><span class="br0">&#93;</span><span class="br0">&#41;</span>
&nbsp; &nbsp; , <span class="br0">&#91;</span>MonthName<span class="br0">&#93;</span> <span class="sy0">=</span> <span class="kw2">DATENAME</span><span class="br0">&#40;</span><span class="kw1">month</span>, <span class="br0">&#91;</span><span class="kw1">Date</span><span class="br0">&#93;</span><span class="br0">&#41;</span>
&nbsp; &nbsp; , <span class="br0">&#91;</span>MonthNumber<span class="br0">&#93;</span> <span class="sy0">=</span> <span class="kw2">DATEPART</span><span class="br0">&#40;</span><span class="kw1">month</span>, <span class="br0">&#91;</span><span class="kw1">Date</span><span class="br0">&#93;</span><span class="br0">&#41;</span>
&nbsp; &nbsp; , <span class="br0">&#91;</span>QuarterNumber<span class="br0">&#93;</span> <span class="sy0">=</span> <span class="kw2">DATEPART</span><span class="br0">&#40;</span>quarter, <span class="br0">&#91;</span><span class="kw1">Date</span><span class="br0">&#93;</span><span class="br0">&#41;</span>
&nbsp; &nbsp; , <span class="br0">&#91;</span><span class="kw1">Year</span><span class="br0">&#93;</span> <span class="sy0">=</span> <span class="kw1">YEAR</span><span class="br0">&#40;</span><span class="br0">&#91;</span><span class="kw1">date</span><span class="br0">&#93;</span><span class="br0">&#41;</span>
&nbsp; &nbsp; , <span class="br0">&#91;</span>FiscalYear<span class="br0">&#93;</span> <span class="sy0">=</span> <span class="kw1">CASE</span> 
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">WHEN</span> <span class="kw2">DATEPART</span><span class="br0">&#40;</span><span class="kw1">month</span>, <span class="br0">&#91;</span><span class="kw1">Date</span><span class="br0">&#93;</span><span class="br0">&#41;</span> <span class="sy0">&lt;</span> <span class="nu0">7</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">THEN</span> <span class="kw1">YEAR</span><span class="br0">&#40;</span><span class="br0">&#91;</span><span class="kw1">date</span><span class="br0">&#93;</span><span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">ELSE</span> <span class="kw1">YEAR</span><span class="br0">&#40;</span><span class="br0">&#91;</span><span class="kw1">date</span><span class="br0">&#93;</span><span class="br0">&#41;</span> <span class="sy0">+</span> <span class="nu0">1</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">END</span>
<span class="co1">--Add more columns as needed.</span>
<span class="kw1">FROM</span> d</pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">DECLARE @startdate DATE = '20000101'
	, @enddate DATE = '20301231' ;

WITH c
AS (
	SELECT	Num = ROW_NUMBER() OVER (ORDER BY (SELECT NULL)) - 1
	FROM sys.columns c
	CROSS JOIN sys.columns c1
	)
, d
AS (
	SELECT	[date] = DATEADD(day, Num, @startdate)
			, Num
	FROM c
	WHERE Num &gt;= 0
		AND Num &lt;= DATEDIFF(day, @startdate, @enddate)
	)
SELECT datekey = CAST(CONVERT(VARCHAR(8), DATEADD(day, Num, @startdate), 112) AS INT)
	, [date]
	, [DayOfMonth] = DATEPART(day, [Date])
	, [DayName] = DATENAME(weekday, [Date])
	, [DayOfYear] = DATEPART(dayofyear, [Date])
	, [WeekOfYear] = DATEPART(week, [Date])
	, [MonthName] = DATENAME(month, [Date])
	, [MonthNumber] = DATEPART(month, [Date])
	, [QuarterNumber] = DATEPART(quarter, [Date])
	, [Year] = YEAR([date])
	, [FiscalYear] = CASE 
		WHEN DATEPART(month, [Date]) &lt; 7
			THEN YEAR([date])
		ELSE YEAR([date]) + 1
		END
--Add more columns as needed.
FROM d</pre></div></div>

<p>Let&#8217;s take a closer look:</p>
<ol>
<li>Variables StartDate and EndDate hold the date range for the result set.</li>
<li>We define a CTE (called c) that uses Row_Number() function to generate numbers starting from zero for each row in sys.columns. sys.columns is cross joined to itself to generate more number of [input] rows.</li>
<li>We define another CTE (called d) that uses numbers from c, filters on date range, and converts numbers to dates based on the date variables.</li>
<li>Finally, the Select statement uses Num and Date column aliases created by the two CTEs and date functions to create additional fields for the date dimension.</li>
</ol>
<p>You&#8217;ll notice that the script doesn&#8217;t have all columns a date dimension typically has. Don&#8217;t call me lazy for that &#8211; it provides the logic and skeleton to add more columns. Just add them as needed.</p>
]]></content:encoded>
			<wfw:commentRss>/index.php/datamgmt/dbprogramming/script-to-populate-date-dimension-sql-server/feed/</wfw:commentRss>
		<slash:comments>0</slash:comments>
		</item>
		<item>
		<title>Scripts to Detect Data Warehouse Issues</title>
		<link>/index.php/webdev/business-intelligence/scripts-to-detect-data-warehouse/</link>
		<comments>/index.php/webdev/business-intelligence/scripts-to-detect-data-warehouse/#comments</comments>
		<pubDate>Tue, 15 Jan 2013 12:31:00 +0000</pubDate>
		<dc:creator><![CDATA[Sam Vanga]]></dc:creator>
				<category><![CDATA[Business Intelligence]]></category>
		<category><![CDATA[best practices]]></category>
		<category><![CDATA[data warehouse]]></category>
		<category><![CDATA[t-sql]]></category>

		<guid isPermaLink="false">/index.php/2013/01/scripts-to-detect-data-warehouse/</guid>
		<description><![CDATA[Standards and best practices are like flu shots you take before you're infected; Database best practices protect your databases from bad things. But, we all make mistakes. It could be because we're on a time crunch, or we're lazy (which I'm guilty of by&#8230;]]></description>
				<content:encoded><![CDATA[<p>Standards and best practices are like flu shots you take before you&#8217;re infected; Database best practices protect your databases from bad things. But, we all make mistakes. It could be because we&#8217;re on a time crunch, or we&#8217;re lazy (which I&#8217;m guilty of by the way), or maybe it&#8217;s part of being a developer.</p>
<p>Common mistakes include: tables without a primary key, column name problems, missing foreign keys, etc., This is where I love LTD&#8217;s very own <a title="SQLCop" href="http://sqlcop.lessthandot.com/">SQLCop</a>. I can quickly go on with my database development and rely on SQLCop to <a title="SQLCop detects these issues" href="http://sqlcop.lessthandot.com/detectedissues.php">detect the issues</a>. It saves time and ensures that database standards are met.</p>
<p>However, there are some issues explicit to data warehouses that SQLCop doesn&#8217;t look for. I list those issues below and provide scripts to detect them. I use these scripts in conjunction with SQLCop.</p>
<h4>Detect tables in a data warehouse that aren&#8217;t prefixed with either Dim or Fact:</h4>
<p>Tables in a warehouse are generally prefixed with Dim and Fact for dimensions and fact respectively, to easily distinguish them.</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
</pre></td><td class="de1"><pre class="de1"><span class="kw1">SELECT</span> &nbsp;<span class="br0">&#91;</span>schema_name<span class="br0">&#93;</span> <span class="sy0">=</span> s.<span class="me1">name</span> ,
&nbsp; &nbsp; &nbsp; &nbsp; table_name <span class="sy0">=</span> t.<span class="me1">name</span>
<span class="kw1">FROM</span> &nbsp; &nbsp;sys.<span class="me1">tables</span> t
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">INNER</span> <span class="sy0">JOIN</span> sys.<span class="me1">schemas</span> s <span class="kw1">ON</span> s.<span class="me1">schema_id</span> <span class="sy0">=</span> t.<span class="me1">schema_id</span>
<span class="kw1">WHERE</span> &nbsp; t.<span class="me1">name</span> <span class="sy0">NOT</span> <span class="sy0">LIKE</span> <span class="st0">'Dim%'</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="sy0">AND</span> t.<span class="me1">name</span> <span class="sy0">NOT</span> <span class="sy0">LIKE</span> <span class="st0">'Fact%'</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="sy0">AND</span> t.<span class="me1">TYPE</span> <span class="sy0">=</span> <span class="st0">'U'</span>;</pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">SELECT  [schema_name] = s.name ,
        table_name = t.name
FROM    sys.tables t
        INNER JOIN sys.schemas s ON s.schema_id = t.schema_id
WHERE   t.name NOT LIKE 'Dim%'
        AND t.name NOT LIKE 'Fact%'
        AND t.TYPE = 'U';</pre></div></div>

</p>
<h4>Find tables in a data warehouse that don&#8217;t have a primary key:</h4>
<p>Like in OLTP databases, all tables in a data warehouse also should have a primary key defined.</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
</pre></td><td class="de1"><pre class="de1"><span class="kw1">SELECT</span> &nbsp;schema_name <span class="sy0">=</span> SCHEMA_NAME<span class="br0">&#40;</span>schema_id<span class="br0">&#41;</span> ,
&nbsp; &nbsp; &nbsp; &nbsp; table_name <span class="sy0">=</span> name
<span class="kw1">FROM</span> &nbsp; &nbsp;sys.<span class="me1">tables</span>
<span class="kw1">WHERE</span> &nbsp; <span class="kw2">OBJECTPROPERTY</span><span class="br0">&#40;</span><span class="kw2">OBJECT_ID</span>, <span class="st0">'TableHasPrimaryKey'</span><span class="br0">&#41;</span> <span class="sy0">=</span> <span class="nu0">0</span>
<span class="kw1">ORDER</span> <span class="kw1">BY</span> SCHEMA_NAME<span class="br0">&#40;</span>schema_id<span class="br0">&#41;</span> ,
&nbsp; &nbsp; &nbsp; &nbsp; name;</pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">SELECT  schema_name = SCHEMA_NAME(schema_id) ,
        table_name = name
FROM    sys.tables
WHERE   OBJECTPROPERTY(OBJECT_ID, 'TableHasPrimaryKey') = 0
ORDER BY SCHEMA_NAME(schema_id) ,
        name;</pre></div></div>

<p> </p>
<h4>Detect dimension tables with a composite primary key:</h4>
<p>A composite primary key on a dimension table causes degraded performance. It is best to create a single column primary key.</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
</pre></td><td class="de1"><pre class="de1"><span class="kw1">SELECT</span> &nbsp;c.<span class="me1">TABLE_NAME</span> ,
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw2">COUNT</span><span class="br0">&#40;</span><span class="sy0">*</span><span class="br0">&#41;</span>
<span class="kw1">FROM</span> &nbsp; &nbsp;<span class="sy0">IN</span>F<span class="sy0">OR</span>MATION_SCHEMA.<span class="me1">TABLE_CONSTRAINTS</span> pk ,
&nbsp; &nbsp; &nbsp; &nbsp; <span class="sy0">IN</span>F<span class="sy0">OR</span>MATION_SCHEMA.<span class="me1">KEY_COLUMN_USAGE</span> c
<span class="kw1">WHERE</span> &nbsp; CONSTRA<span class="sy0">IN</span>T_TYPE <span class="sy0">=</span> <span class="st0">'PRIMARY KEY'</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="sy0">AND</span> c.<span class="me1">TABLE_NAME</span> <span class="sy0">=</span> pk.<span class="me1">TABLE_NAME</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="sy0">AND</span> c.<span class="me1">CONSTRAINT_NAME</span> <span class="sy0">=</span> pk.<span class="me1">CONSTRAINT_NAME</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="sy0">AND</span> c.<span class="me1">TABLE_NAME</span> <span class="sy0">LIKE</span> <span class="st0">'Dim%'</span>
<span class="kw1">GROUP</span> <span class="kw1">BY</span> c.<span class="me1">TABLE_NAME</span>
<span class="kw1">HAVING</span> &nbsp;<span class="kw2">COUNT</span><span class="br0">&#40;</span><span class="sy0">*</span><span class="br0">&#41;</span> <span class="sy0">&gt;</span> <span class="nu0">1</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">SELECT  c.TABLE_NAME ,
        COUNT(*)
FROM    INFORMATION_SCHEMA.TABLE_CONSTRAINTS pk ,
        INFORMATION_SCHEMA.KEY_COLUMN_USAGE c
WHERE   CONSTRAINT_TYPE = 'PRIMARY KEY'
        AND c.TABLE_NAME = pk.TABLE_NAME
        AND c.CONSTRAINT_NAME = pk.CONSTRAINT_NAME
        AND c.TABLE_NAME LIKE 'Dim%'
GROUP BY c.TABLE_NAME
HAVING  COUNT(*) &gt; 1</pre></div></div>

<p> </p>
<h4>Detect dimension tables that don&#8217;t have Identity column as a primary key:</h4>
<p>Usually, surrogate key is made the primary key of the dimension table. Surrogate key is an auto generated Identity value.</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
</pre></td><td class="de1"><pre class="de1"><span class="kw1">SELECT</span> &nbsp;dim_table <span class="sy0">=</span> t.<span class="me1">name</span> ,
&nbsp; &nbsp; &nbsp; &nbsp; primary_key <span class="sy0">=</span> c.<span class="me1">name</span> ,
&nbsp; &nbsp; &nbsp; &nbsp; c.<span class="me1">is_identity</span>
<span class="kw1">FROM</span> &nbsp; &nbsp;sys.<span class="me1">tables</span> t
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">INNER</span> <span class="sy0">JOIN</span> sys.<span class="me1">key_constraints</span> kc <span class="kw1">ON</span> t.<span class="kw2">OBJECT_ID</span> <span class="sy0">=</span> kc.<span class="me1">parent_object_id</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">INNER</span> <span class="sy0">JOIN</span> sys.<span class="me1">indexes</span> i <span class="kw1">ON</span> i.<span class="kw2">OBJECT_ID</span> <span class="sy0">=</span> kc.<span class="me1">parent_object_id</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="sy0">AND</span> i.<span class="me1">type_desc</span> <span class="sy0">=</span> <span class="st0">'CLUSTERED'</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">INNER</span> <span class="sy0">JOIN</span> sys.<span class="me1">index_columns</span> ic <span class="kw1">ON</span> ic.<span class="kw2">OBJECT_ID</span> <span class="sy0">=</span> kc.<span class="me1">parent_object_id</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span class="sy0">AND</span> ic.<span class="me1">index_id</span> <span class="sy0">=</span> <span class="nu0">1</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">INNER</span> <span class="sy0">JOIN</span> sys.<span class="me1">columns</span> c <span class="kw1">ON</span> c.<span class="kw2">OBJECT_ID</span> <span class="sy0">=</span> t.<span class="kw2">OBJECT_ID</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="sy0">AND</span> c.<span class="me1">column_id</span> <span class="sy0">=</span> ic.<span class="me1">column_id</span>
<span class="kw1">WHERE</span> &nbsp; t.<span class="me1">TYPE</span> <span class="sy0">=</span> <span class="st0">'U'</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="sy0">AND</span> t.<span class="me1">name</span> <span class="sy0">LIKE</span> <span class="st0">'Dim%'</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="sy0">AND</span> kc.<span class="me1">type_desc</span> <span class="sy0">=</span> <span class="st0">'PRIMARY_KEY_CONSTRAINT'</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="sy0">AND</span> c.<span class="me1">is_identity</span> <span class="sy0">=</span> <span class="nu0">0</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">SELECT  dim_table = t.name ,
        primary_key = c.name ,
        c.is_identity
FROM    sys.tables t
        INNER JOIN sys.key_constraints kc ON t.OBJECT_ID = kc.parent_object_id
        INNER JOIN sys.indexes i ON i.OBJECT_ID = kc.parent_object_id
                                    AND i.type_desc = 'CLUSTERED'
        INNER JOIN sys.index_columns ic ON ic.OBJECT_ID = kc.parent_object_id
                                           AND ic.index_id = 1
        INNER JOIN sys.columns c ON c.OBJECT_ID = t.OBJECT_ID
                                    AND c.column_id = ic.column_id
WHERE   t.TYPE = 'U'
        AND t.name LIKE 'Dim%'
        AND kc.type_desc = 'PRIMARY_KEY_CONSTRAINT'
        AND c.is_identity = 0</pre></div></div>

<p> </p>
<h4>Detect primary keys that don&#8217;t follow the naming convention:</h4>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
</pre></td><td class="de1"><pre class="de1"><span class="kw1">SELECT</span> &nbsp;dim_table <span class="sy0">=</span> t.<span class="me1">name</span> ,
&nbsp; &nbsp; &nbsp; &nbsp; primary_key <span class="sy0">=</span> c.<span class="me1">name</span>
<span class="kw1">FROM</span> &nbsp; &nbsp;sys.<span class="me1">tables</span> t
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">INNER</span> <span class="sy0">JOIN</span> sys.<span class="me1">key_constraints</span> kc <span class="kw1">ON</span> t.<span class="kw2">OBJECT_ID</span> <span class="sy0">=</span> kc.<span class="me1">parent_object_id</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">INNER</span> <span class="sy0">JOIN</span> sys.<span class="me1">indexes</span> i <span class="kw1">ON</span> i.<span class="kw2">OBJECT_ID</span> <span class="sy0">=</span> kc.<span class="me1">parent_object_id</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="sy0">AND</span> i.<span class="me1">type_desc</span> <span class="sy0">=</span> <span class="st0">'CLUSTERED'</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">INNER</span> <span class="sy0">JOIN</span> sys.<span class="me1">index_columns</span> ic <span class="kw1">ON</span> ic.<span class="kw2">OBJECT_ID</span> <span class="sy0">=</span> kc.<span class="me1">parent_object_id</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span class="sy0">AND</span> ic.<span class="me1">index_id</span> <span class="sy0">=</span> <span class="nu0">1</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">INNER</span> <span class="sy0">JOIN</span> sys.<span class="me1">columns</span> c <span class="kw1">ON</span> c.<span class="kw2">OBJECT_ID</span> <span class="sy0">=</span> t.<span class="kw2">OBJECT_ID</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="sy0">AND</span> c.<span class="me1">column_id</span> <span class="sy0">=</span> ic.<span class="me1">column_id</span>
<span class="kw1">WHERE</span> &nbsp; t.<span class="me1">TYPE</span> <span class="sy0">=</span> <span class="st0">'U'</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="sy0">AND</span> t.<span class="me1">name</span> <span class="sy0">LIKE</span> <span class="st0">'Dim%'</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="sy0">AND</span> kc.<span class="me1">type_desc</span> <span class="sy0">=</span> <span class="st0">'PRIMARY_KEY_CONSTRAINT'</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="sy0">AND</span> c.<span class="me1">name</span> <span class="sy0">&lt;&gt;</span> <span class="kw2">REPLACE</span><span class="br0">&#40;</span>t.<span class="me1">name</span>, <span class="st0">'Dim'</span>, <span class="st0">''</span><span class="br0">&#41;</span> <span class="sy0">+</span> <span class="st0">'Key'</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">SELECT  dim_table = t.name ,
        primary_key = c.name
FROM    sys.tables t
        INNER JOIN sys.key_constraints kc ON t.OBJECT_ID = kc.parent_object_id
        INNER JOIN sys.indexes i ON i.OBJECT_ID = kc.parent_object_id
                                    AND i.type_desc = 'CLUSTERED'
        INNER JOIN sys.index_columns ic ON ic.OBJECT_ID = kc.parent_object_id
                                           AND ic.index_id = 1
        INNER JOIN sys.columns c ON c.OBJECT_ID = t.OBJECT_ID
                                    AND c.column_id = ic.column_id
WHERE   t.TYPE = 'U'
        AND t.name LIKE 'Dim%'
        AND kc.type_desc = 'PRIMARY_KEY_CONSTRAINT'
        AND c.name &lt;&gt; REPLACE(t.name, 'Dim', '') + 'Key'</pre></div></div>

<p> </p>
<h4>Detect fact tables that have no foreign keys:</h4>
<p>Without a foreign key, a fact table isn&#8217;t really a fact table.</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
</pre></td><td class="de1"><pre class="de1"><span class="kw1">SELECT</span> table_name <span class="sy0">=</span> t.<span class="me1">name</span>
&nbsp; &nbsp; &nbsp; &nbsp; , fk_count <span class="sy0">=</span> <span class="kw2">COUNT</span><span class="br0">&#40;</span><span class="sy0">*</span><span class="br0">&#41;</span>
&nbsp; &nbsp; <span class="kw1">FROM</span> sys.<span class="me1">tables</span> t
&nbsp; &nbsp; <span class="kw1">INNER</span> <span class="sy0">JOIN</span>
&nbsp; &nbsp; sys.<span class="me1">foreign_keys</span> fk <span class="kw1">ON</span> t.<span class="kw2">OBJECT_ID</span> <span class="sy0">=</span> fk.<span class="me1">parent_object_id</span>
&nbsp; &nbsp; <span class="kw1">WHERE</span> &nbsp;t.<span class="me1">name</span> <span class="sy0">LIKE</span> <span class="st0">'fact%'</span>
&nbsp; &nbsp; <span class="kw1">GROUP</span> <span class="kw1">BY</span> t.<span class="me1">name</span>
&nbsp; &nbsp; <span class="kw1">HAVING</span> <span class="kw2">COUNT</span><span class="br0">&#40;</span><span class="sy0">*</span><span class="br0">&#41;</span> <span class="sy0">&lt;</span> <span class="nu0">1</span> &nbsp;</pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">SELECT table_name = t.name
		, fk_count = COUNT(*)
    FROM sys.tables t
    INNER JOIN
    sys.foreign_keys fk ON t.OBJECT_ID = fk.parent_object_id
    WHERE  t.name LIKE 'fact%'
    GROUP BY t.name
    HAVING COUNT(*) &lt; 1  </pre></div></div>

<p> </p>
<h4>Detect fact tables that have foreign key(s) to another fact table:</h4>
<p> It&#8217;s unlikely to have a fact table related to another fact table.</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
</pre></td><td class="de1"><pre class="de1"><span class="kw1">SELECT</span> &nbsp;foreign_key <span class="sy0">=</span> fk.<span class="me1">name</span> ,
&nbsp; &nbsp; &nbsp; &nbsp; child_table <span class="sy0">=</span> t.<span class="me1">name</span> ,
&nbsp; &nbsp; &nbsp; &nbsp; parent_name <span class="sy0">=</span> rt.<span class="me1">name</span>
<span class="kw1">FROM</span> &nbsp; &nbsp;sys.<span class="me1">foreign_keys</span> fk
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">INNER</span> <span class="sy0">JOIN</span> sys.<span class="me1">tables</span> rt <span class="kw1">ON</span> rt.<span class="kw2">object_id</span> <span class="sy0">=</span> fk.<span class="me1">referenced_object_id</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">INNER</span> <span class="sy0">JOIN</span> sys.<span class="me1">tables</span> t <span class="kw1">ON</span> t.<span class="kw2">object_id</span> <span class="sy0">=</span> fk.<span class="me1">parent_object_id</span>
<span class="kw1">WHERE</span> &nbsp; rt.<span class="me1">name</span> <span class="sy0">LIKE</span> <span class="st0">'Fact%'</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">SELECT  foreign_key = fk.name ,
        child_table = t.name ,
        parent_name = rt.name
FROM    sys.foreign_keys fk
        INNER JOIN sys.tables rt ON rt.object_id = fk.referenced_object_id
        INNER JOIN sys.tables t ON t.object_id = fk.parent_object_id
WHERE   rt.name LIKE 'Fact%'</pre></div></div>

<p> </p>
<h4>Detect missing foreign key(s) in fact tables &#8211; Columns suffixed with Key, but don&#8217;t have foreign key constraint:</h4>
<p>I stole the following query from <a title="missing foreign keys sql cop" href="/index.php/DataMgmt/DataDesign/missing-foreign-key-constraints">here</a> posted by <a title="George M" href="/index.php/All/?disp=authdir&amp;author=10">George Mastros</a>, and replaced ID with Key to use it for data warehouse scenario.</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
</pre></td><td class="de1"><pre class="de1">&nbsp; &nbsp; <span class="kw1">SELECT</span> &nbsp;C.<span class="me1">TABLE_SCHEMA</span>,C.<span class="me1">TABLE_NAME</span>,C.<span class="me1">COLUMN_NAME</span>
&nbsp; &nbsp; <span class="kw1">FROM</span> &nbsp; &nbsp;<span class="sy0">IN</span>F<span class="sy0">OR</span>MATION_SCHEMA.<span class="me1">COLUMNS</span> C &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">INNER</span> Join <span class="sy0">IN</span>F<span class="sy0">OR</span>MATION_SCHEMA.<span class="me1">TABLES</span> T &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">ON</span> C.<span class="me1">TABLE_NAME</span> <span class="sy0">=</span> T.<span class="me1">TABLE_NAME</span> &nbsp; &nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; And T.<span class="me1">TABLE_TYPE</span> <span class="sy0">=</span> <span class="st0">'Base Table'</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="sy0">AND</span> T.<span class="me1">TABLE_SCHEMA</span> <span class="sy0">=</span> C.<span class="me1">TABLE_SCHEMA</span> &nbsp; &nbsp; &nbsp; &nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">LEFT</span> Join <span class="sy0">IN</span>F<span class="sy0">OR</span>MATION_SCHEMA.<span class="me1">CONSTRAINT_COLUMN_USAGE</span> U &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">ON</span> C.<span class="me1">TABLE_NAME</span> <span class="sy0">=</span> U.<span class="me1">TABLE_NAME</span> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; And C.<span class="me1">COLUMN_NAME</span> <span class="sy0">=</span> U.<span class="me1">COLUMN_NAME</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; And U.<span class="me1">TABLE_SCHEMA</span> <span class="sy0">=</span> C.<span class="me1">TABLE_SCHEMA</span>
&nbsp; &nbsp; <span class="kw1">WHERE</span> &nbsp; U.<span class="me1">COLUMN_NAME</span> <span class="kw1">IS</span> Null &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; And C.<span class="me1">COLUMN_NAME</span> Like <span class="st0">'%Key'</span>
&nbsp; &nbsp; <span class="kw1">ORDER</span> <span class="kw1">BY</span> C.<span class="me1">TABLE_SCHEMA</span>, C.<span class="me1">TABLE_NAME</span>, C.<span class="me1">COLUMN_NAME</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">    SELECT  C.TABLE_SCHEMA,C.TABLE_NAME,C.COLUMN_NAME
    FROM    INFORMATION_SCHEMA.COLUMNS C          
            INNER Join INFORMATION_SCHEMA.TABLES T            
              ON C.TABLE_NAME = T.TABLE_NAME    
              And T.TABLE_TYPE = 'Base Table'
              AND T.TABLE_SCHEMA = C.TABLE_SCHEMA        
            LEFT Join INFORMATION_SCHEMA.CONSTRAINT_COLUMN_USAGE U            
              ON C.TABLE_NAME = U.TABLE_NAME            
              And C.COLUMN_NAME = U.COLUMN_NAME
              And U.TABLE_SCHEMA = C.TABLE_SCHEMA
    WHERE   U.COLUMN_NAME IS Null          
            And C.COLUMN_NAME Like '%Key'
    ORDER BY C.TABLE_SCHEMA, C.TABLE_NAME, C.COLUMN_NAME</pre></div></div>

<p> </p>
<p>Results of above queries aren&#8217;t always issues. They are just rare, you&#8217;ve to look at them closely and make sure there is a reason for each choice. Also, you may use different naming conventions that make these queries void. In that case, I hope you&#8217;re able to alter them to your needs.</p>
<p>Follow me on Twitter! @<a title="SamuelVanga Twitter" href="/twitter.com/SamuelVanga">SamuelVanga</a></p>
]]></content:encoded>
			<wfw:commentRss>/index.php/webdev/business-intelligence/scripts-to-detect-data-warehouse/feed/</wfw:commentRss>
		<slash:comments>2</slash:comments>
		</item>
	</channel>
</rss>
