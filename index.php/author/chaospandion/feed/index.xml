<?xml version="1.0" encoding="UTF-8"?><rss version="2.0"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:atom="http://www.w3.org/2005/Atom"
	xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
	xmlns:slash="http://purl.org/rss/1.0/modules/slash/"
	>

<channel>
	<title>chaospandion &#8211; LessthanDot</title>
	<atom:link href="/index.php/author/chaospandion/feed/" rel="self" type="application/rss+xml" />
	<link>/</link>
	<description>A Technical Community for IT Professionals</description>
	<lastBuildDate>Sat, 09 Mar 2019 12:50:36 +0000</lastBuildDate>
	<language>en-US</language>
	<sy:updatePeriod>hourly</sy:updatePeriod>
	<sy:updateFrequency>1</sy:updateFrequency>
	<generator>https://wordpress.org/?v=4.6.1</generator>
	<item>
		<title>Machete &#8211; A scripting runtime for .NET</title>
		<link>/index.php/desktopdev/mstech/machete-a-scripting-runtime-for/</link>
		<comments>/index.php/desktopdev/mstech/machete-a-scripting-runtime-for/#comments</comments>
		<pubDate>Mon, 07 Mar 2011 20:21:00 +0000</pubDate>
		<dc:creator><![CDATA[chaospandion]]></dc:creator>
				<category><![CDATA[C#]]></category>
		<category><![CDATA[Microsoft Technologies]]></category>
		<category><![CDATA[.net]]></category>
		<category><![CDATA[c#]]></category>
		<category><![CDATA[ecmascript]]></category>
		<category><![CDATA[f#]]></category>
		<category><![CDATA[javascript]]></category>
		<category><![CDATA[machete]]></category>
		<category><![CDATA[scripting]]></category>

		<guid isPermaLink="false">/index.php/2011/03/machete-a-scripting-runtime-for/</guid>
		<description><![CDATA[In an attempt to overcome by perfectionism I've decided to open source my long term side project Machete for the world to see. Machete is my own dialect of the ECMAScript 5 standard or as it is more commonly called JavaScript. 


  The compiler is wr&#8230;]]></description>
				<content:encoded><![CDATA[<p>In an attempt to overcome my perfectionism I&#8217;ve decided to open source my long term side project Machete for the world to see. Machete is my own dialect of the ECMAScript 5 standard or as it is more commonly called JavaScript.</p>
<h1>Features</h1>
<p>Cleaner lambda expressions:</p>
<pre style="background-color:#EEEEEE;padding:5px;"><code>var succinct = (x, y) x + y;
var verbose = function (x, y) { return x + y; };</code></pre>
<p>First class iteration support with the foreach loop and generators.</p>
<pre style="background-color:#EEEEEE;padding:5px;"><code>var numbers = generator {
    yield 1;
    yield 2;
    yield 3;
};

foreach (var n in numbers) {
    Output.write(n);
}   

foreach (var e in ["Array", " objects", " are", " iterable", "!"]) {
    Output.write(e);
} 

foreach (var c in "Strings are iterable!") {
    Output.write(c);
}</code></pre>
<h1 style="margin-bottom:10px;margin-top:15px">Implementation</h1>
<ul>
<li>The compiler is written in F# and uses the library <a href="https://bitbucket.org/fparsec/main/overview">FParsec</a>.</li>
<li>The runtime is written in C# and is hosted by .NET.</li>
<li>It currently has over 400 tests with many more on the way.</li>
</ul>
<p>Machete is the product of almost a years worth of research, design, and coding. I have it hosted on GitHub so please stop by and fork the project. I would really love to up my test count dramatically and test cases from the community would be invaluable. Without further ado, the link to my repository.</p>
<p><a href="https://github.com/ChaosPandion/Machete">GitHub Repository For Machete</a></p>
]]></content:encoded>
			<wfw:commentRss>/index.php/desktopdev/mstech/machete-a-scripting-runtime-for/feed/</wfw:commentRss>
		<slash:comments>8</slash:comments>
		</item>
		<item>
		<title>Productive Programing With Pattern Matching</title>
		<link>/index.php/desktopdev/mstech/productive-programing-with-pattern-match/</link>
		<comments>/index.php/desktopdev/mstech/productive-programing-with-pattern-match/#comments</comments>
		<pubDate>Fri, 10 Sep 2010 00:36:58 +0000</pubDate>
		<dc:creator><![CDATA[chaospandion]]></dc:creator>
				<category><![CDATA[Microsoft Technologies]]></category>
		<category><![CDATA[.net]]></category>
		<category><![CDATA[f#]]></category>

		<guid isPermaLink="false">/index.php/2010/09/productive-programing-with-pattern-match/</guid>
		<description><![CDATA[Personally I have been sold on F# for a long time but some people however will need a lot of convincing before they move out of their comfort zone. Hopefully after reading this you will be more inclined to try it out. Imagine you were given a directory full of files that did not have [&#8230;]]]></description>
				<content:encoded><![CDATA[<p>Personally I have been sold on F# for a long time but some people however will need a lot of convincing before they move out of their comfort zone. Hopefully after reading this you will be more inclined to try it out. </p>
<p>Imagine you were given a directory full of files that did not have any file extensions and were told to figure out the file extension for every file. Picture how you might do this in VB or C#. Now take a look at this:</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="ocaml"><thead><tr><td colspan="2"  class="head">OCaml</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
</pre></td><td class="de1"><pre class="de1"><span class="co1">(*</span>
<span class="co1">Notice how we don't need to specify the type for filePaths?</span>
<span class="co1">The compiler will infer the type based off how we use the parameter.</span>
<span class="co1">When we call File.OpenRead the compiler will know that filePaths has to be a</span>
<span class="co1">string seq or IEnumerable&lt;string&gt; in C# speak.</span>
<span class="co1">*)</span>
<span class="kw1">let</span> getUnknownFileExtensions filePaths <span class="sy0">=</span>
&nbsp; &nbsp; filePaths
&nbsp; &nbsp; <span class="sy0">|&gt;</span> Seq<span class="sy0">.</span>map<span class="br0">&#40;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">fun</span> filePath <span class="sy0">-&gt;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; use fs <span class="sy0">=</span> System<span class="sy0">.</span>IO<span class="sy0">.</span>File<span class="sy0">.</span>OpenRead<span class="br0">&#40;</span>filePath<span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">let</span> buffer <span class="sy0">=</span> <span class="kw2">Array</span><span class="sy0">.</span>zeroCreate <span class="nu0">8</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">let</span> read <span class="sy0">=</span> fs<span class="sy0">.</span>Read<span class="br0">&#40;</span>buffer, <span class="nu0">0</span>, <span class="nu0">8</span><span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">match</span> buffer <span class="kw1">with</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="co1">(*The underscore tells the compiler that we dont care what the byte is at that index.*)</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="sy0">|</span> <span class="br0">&#91;</span><span class="sy0">|</span> 0xFFuy<span class="sy0">;</span> 0xD8uy<span class="sy0">;</span> _<span class="sy0">;</span> _<span class="sy0">;</span> _<span class="sy0">;</span> _<span class="sy0">;</span> _<span class="sy0">;</span> _<span class="sy0">;</span> <span class="sy0">|</span><span class="br0">&#93;</span> <span class="sy0">-&gt;</span> 
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#40;</span>filePath, <span class="st0">&quot;.jpg&quot;</span><span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="sy0">|</span> <span class="br0">&#91;</span><span class="sy0">|</span> 0x25uy<span class="sy0">;</span> 0x50uy<span class="sy0">;</span> 0x44uy<span class="sy0">;</span> 0x46uy<span class="sy0">;</span> _<span class="sy0">;</span> _<span class="sy0">;</span> _<span class="sy0">;</span> _<span class="sy0">;</span> <span class="sy0">|</span><span class="br0">&#93;</span> <span class="sy0">-&gt;</span> 
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#40;</span>filePath, <span class="st0">&quot;.pdf&quot;</span><span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="sy0">|</span> <span class="br0">&#91;</span><span class="sy0">|</span> 0x50uy<span class="sy0">;</span> 0x4Buy<span class="sy0">;</span> 0x03uy<span class="sy0">;</span> 0x04uy<span class="sy0">;</span> _<span class="sy0">;</span> _<span class="sy0">;</span> _<span class="sy0">;</span> _<span class="sy0">;</span> <span class="sy0">|</span><span class="br0">&#93;</span> <span class="sy0">-&gt;</span> 
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#40;</span>filePath, <span class="st0">&quot;.docx&quot;</span><span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="sy0">|</span> <span class="br0">&#91;</span><span class="sy0">|</span> 0xD0uy<span class="sy0">;</span> 0xCFuy<span class="sy0">;</span> 0x11uy<span class="sy0">;</span> 0xE0uy<span class="sy0">;</span> 0xA1uy<span class="sy0">;</span> 0xB1uy<span class="sy0">;</span> 0x1Auy<span class="sy0">;</span> 0xE1uy<span class="sy0">;</span> <span class="sy0">|</span><span class="br0">&#93;</span> <span class="sy0">-&gt;</span> 
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#40;</span>filePath, <span class="st0">&quot;.doc&quot;</span><span class="br0">&#41;</span> 
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="sy0">|</span> _ <span class="sy0">-&gt;</span> 
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#40;</span>filePath, <span class="st0">&quot;.unk&quot;</span><span class="br0">&#41;</span>
&nbsp; &nbsp; <span class="br0">&#41;</span>
&nbsp; &nbsp; <span class="sy0">|&gt;</span> Seq<span class="sy0">.</span>iter<span class="br0">&#40;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">fun</span> <span class="br0">&#40;</span>filePath, extension<span class="br0">&#41;</span> <span class="sy0">-&gt;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; System<span class="sy0">.</span>IO<span class="sy0">.</span>File<span class="sy0">.</span>Move<span class="br0">&#40;</span>filePath, filePath <span class="sy0">+</span> extension<span class="br0">&#41;</span>
&nbsp; &nbsp; <span class="br0">&#41;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">(*
Notice how we don't need to specify the type for filePaths?
The compiler will infer the type based off how we use the parameter.
When we call File.OpenRead the compiler will know that filePaths has to be a
string seq or IEnumerable&lt;string&gt; in C# speak.
*)
let getUnknownFileExtensions filePaths =
    filePaths
    |&gt; Seq.map(
        fun filePath -&gt;
            use fs = System.IO.File.OpenRead(filePath)
            let buffer = Array.zeroCreate 8
            let read = fs.Read(buffer, 0, 8)
            match buffer with
            (*The underscore tells the compiler that we dont care what the byte is at that index.*)
            | [| 0xFFuy; 0xD8uy; _; _; _; _; _; _; |] -&gt; 
                (filePath, ".jpg")
            | [| 0x25uy; 0x50uy; 0x44uy; 0x46uy; _; _; _; _; |] -&gt; 
                (filePath, ".pdf")
            | [| 0x50uy; 0x4Buy; 0x03uy; 0x04uy; _; _; _; _; |] -&gt; 
                (filePath, ".docx")
            | [| 0xD0uy; 0xCFuy; 0x11uy; 0xE0uy; 0xA1uy; 0xB1uy; 0x1Auy; 0xE1uy; |] -&gt; 
                (filePath, ".doc") 
            | _ -&gt; 
                (filePath, ".unk")
    )
    |&gt; Seq.iter(
        fun (filePath, extension) -&gt;
            System.IO.File.Move(filePath, filePath + extension)
    )</pre></div></div>

<p>Now that is what I call productive programming!</p>
]]></content:encoded>
			<wfw:commentRss>/index.php/desktopdev/mstech/productive-programing-with-pattern-match/feed/</wfw:commentRss>
		<slash:comments>1</slash:comments>
		</item>
		<item>
		<title>Yes, I did indeed dig myself into this hole&#8230;</title>
		<link>/index.php/desktopdev/mstech/yes-i-did-indeed-dig-myself-into-this-ho/</link>
		<comments>/index.php/desktopdev/mstech/yes-i-did-indeed-dig-myself-into-this-ho/#comments</comments>
		<pubDate>Wed, 14 Jul 2010 21:33:50 +0000</pubDate>
		<dc:creator><![CDATA[chaospandion]]></dc:creator>
				<category><![CDATA[C#]]></category>
		<category><![CDATA[Microsoft Technologies]]></category>
		<category><![CDATA[c# .net]]></category>

		<guid isPermaLink="false">/index.php/2010/07/yes-i-did-indeed-dig-myself-into-this-ho/</guid>
		<description><![CDATA[Folks, please remember to refactor early and often&#8230; private Element ReadMemberExpression() { var queue = new Queue&#60;Element[]&#62;(); var newDepth = 0; var argsCount = 0; _scanner.CreateRestorePoint(); while (true) { _scanner.CreateRestorePoint(); { var a = ReadArguments(); if (a != null) { argsCount++; if (argsCount &#62; newDepth) { _scanner.Restore(); break; } queue.Enqueue(new[] { default(Element), default(Element), a }); [&#8230;]]]></description>
				<content:encoded><![CDATA[<p>Folks, please remember to refactor early and often&#8230; </p>
<pre>private Element ReadMemberExpression()
{
    var queue = new Queue&lt;Element[]&gt;();
    var newDepth = 0;
    var argsCount = 0;
    _scanner.CreateRestorePoint();
    while (true)
    {
        _scanner.CreateRestorePoint();
        {
            var a = ReadArguments();
            if (a != null)
            {
                argsCount++;
                if (argsCount &gt; newDepth)
                {
                    _scanner.Restore();
                    break;
                }
                queue.Enqueue(new[] { default(Element), default(Element), a });
                _scanner.DeleteRestorePoint();
                continue;
            }
        }
        _scanner.DeleteRestorePoint();

        var pe = ReadPrimaryExpression();
        if (pe != null)
        {
            queue.Enqueue(new[] { pe });
            continue;
        }

        var fe = ReadFunctionExpression();
        if (fe != null)
        {
            queue.Enqueue(new[] { fe });
            continue;
        }

        if (_scanner.MatchNext(Grammar.New))
        {
            newDepth++;
            queue.Enqueue(new[] { Grammar.New });
        }
        else if (_scanner.Match(Grammar.LeftSquareBracket))
        {
            var e = ReadExpression();
            if (e == null)
            {
                throw new ParseException();
            }
            if (!_scanner.MatchNext(Grammar.RightSquareBracket))
            {
                throw new ParseException();
            }
            queue.Enqueue(new[]{default(Element), Grammar.LeftSquareBracket, e, Grammar.RightSquareBracket});
        }
        else if (_scanner.Match(Grammar.FullStop))
        {
            if (!_scanner.MatchNext(ElementType.IdentifierName))
            {
                throw new ParseException();
            }
            queue.Enqueue(new[] { default(Element), Grammar.FullStop, _scanner.Current });
        }
        else
        {
            _scanner.Unwind();
            break;
        }
    }
    if (queue.Count == 0)
    {
        _scanner.DeleteRestorePoint();
        return null;
    }
    else
    {
        var element = default(Element);
        var children = queue.Dequeue();
        while (children[0] == Grammar.New)
        {
            children = queue.Dequeue();
        }
        element = new Element(ElementType.MemberExpression, children);
        while (queue.Count &gt; 0)
        {
            children = queue.Dequeue();
            if (children.Length == 3 &amp;&amp; children[2].Type == ElementType.Arguments)
            {
                newDepth--;
                children[0] = Grammar.New;
                children[1] = element;
                element = new Element(ElementType.MemberExpression, children);
            }
            else
            {
                children[0] = element;
                element = new Element(ElementType.MemberExpression, children);
            }
        }
        if (newDepth &gt; 0)
        {
            _scanner.Restore();
            return null;
        }
        _scanner.DeleteRestorePoint();
        return element;
    }
}</pre>
]]></content:encoded>
			<wfw:commentRss>/index.php/desktopdev/mstech/yes-i-did-indeed-dig-myself-into-this-ho/feed/</wfw:commentRss>
		<slash:comments>2</slash:comments>
		</item>
		<item>
		<title>Always Double Check Your Work</title>
		<link>/index.php/desktopdev/mstech/always-double-check-your-work/</link>
		<comments>/index.php/desktopdev/mstech/always-double-check-your-work/#comments</comments>
		<pubDate>Tue, 29 Jun 2010 19:32:13 +0000</pubDate>
		<dc:creator><![CDATA[chaospandion]]></dc:creator>
				<category><![CDATA[C#]]></category>
		<category><![CDATA[Microsoft Technologies]]></category>
		<category><![CDATA[c# .net bug]]></category>

		<guid isPermaLink="false">/index.php/2010/06/always-double-check-your-work/</guid>
		<description><![CDATA[I just finished a 2 session bug hunt and I feel quite foolish. See if you can spot the bug. Algorithm The abstract operation IsWordChar takes an integer parameter e and performs the following: If e == –1 or e == InputLength, return false. Let c be the character Input[e]. If c is one of [&#8230;]]]></description>
				<content:encoded><![CDATA[<p>I just finished a 2 session bug hunt and I feel quite foolish. See if you can spot the bug.</p>
<p><strong>Algorithm</strong></p>
<p>The abstract operation IsWordChar takes an integer parameter e and performs the following: </p>
<ol>
<li>If e == –1 or e == InputLength, return false.</li>
<li>Let c be the character Input[e].</li>
<li>
        <span>If c is one of the sixty-three characters below, return true.</span><br />
            <em><br />
            a b  c  d  e  f  g  h  i  j  k  l m n o p q r s t u v w x y  z<br />
            A  B  C  D  E  F  G  H  I  J  K  L M N O P Q R S T U V W X Y  Z<br />
            0  1  2  3  4  5  6  7  8  9  _<br />
            </em>
    </li>
<li>Return false.</li>
</ol>
<p><strong>Code</strong></p>
<pre>private Expression&lt;IsWordChar&gt; CreateIsWordCharExpression()
{
    var e = Expression.Parameter(typeof(int), "e");
    var c = Expression.Variable(typeof(char), "c");
    var returnLabel = Expression.Label(Expression.Label(typeof(bool)), _falseConstant);
    var lambda = Expression.Lambda&lt;IsWordChar&gt;(
        Expression.Block(
            new[] { c },
            Expression.IfThen(
                Expression.OrElse(
                    Expression.Equal(e, Expression.Constant(-1)),
                    Expression.Equal(e, _inputLengthVar)
                ),
                Expression.Return(returnLabel.Target, _falseConstant)
            ),
            Expression.Assign(c, Expression.MakeIndex(_str, _stringCharsPropertyInfo, new[] { e })),
            Expression.IfThenElse(
                Expression.OrElse(
                    Expression.OrElse(
                        Expression.OrElse(
                            Expression.AndAlso(
                                Expression.GreaterThanOrEqual(c, Expression.Constant('a')),
                                Expression.LessThanOrEqual(c, Expression.Constant('z'))
                            ),
                            Expression.AndAlso(
                                Expression.GreaterThanOrEqual(c, Expression.Constant('A')),
                                Expression.LessThanOrEqual(c, Expression.Constant('Z'))
                            )
                        ),
                        Expression.AndAlso(
                            Expression.GreaterThanOrEqual(c, Expression.Constant('0')),
                            Expression.LessThanOrEqual(c, Expression.Constant('1'))
                        )
                    ),
                    Expression.Equal(c, Expression.Constant('_'))
                ),
                Expression.Return(returnLabel.Target, _trueConstant),
                Expression.Return(returnLabel.Target, _falseConstant)
            ),
            returnLabel
        ),
        "IsWordChar",
        new[] { e }
    );
    return lambda;
}</pre>
]]></content:encoded>
			<wfw:commentRss>/index.php/desktopdev/mstech/always-double-check-your-work/feed/</wfw:commentRss>
		<slash:comments>5</slash:comments>
		</item>
		<item>
		<title>Lexical Analysis</title>
		<link>/index.php/desktopdev/mstech/lexical-analysis/</link>
		<comments>/index.php/desktopdev/mstech/lexical-analysis/#respond</comments>
		<pubDate>Wed, 23 Jun 2010 14:41:16 +0000</pubDate>
		<dc:creator><![CDATA[chaospandion]]></dc:creator>
				<category><![CDATA[C#]]></category>
		<category><![CDATA[Microsoft Technologies]]></category>

		<guid isPermaLink="false">/index.php/2010/06/lexical-analysis/</guid>
		<description><![CDATA[So how exactly does your favorite compiler turn text into executable code? Lexical Analysis Syntactical Analysis Semantic Analysis In this post I want to go over the lexical analysis process. The process might seem a little daunting at first but with the right tools and a little patience you would be surprised with what you [&#8230;]]]></description>
				<content:encoded><![CDATA[<p>So how exactly does your favorite compiler turn text into executable code?</p>
<ol>
<li>Lexical Analysis</li>
<li>Syntactical Analysis</li>
<li>Semantic Analysis</li>
</ol>
<p>In this post I want to go over the lexical analysis process. The process might seem a little daunting at first but with the right tools and a little patience you would be surprised with what you can accomplish. The only goal of the lexical analysis process is to take an input string and return a sequence of tokens that represent input string. A token is a sequence of characters that follow certain rules.</p>
<p>Given the following string:</p>
<p><code>10 + 2 - 3</code></p>
<p>We will need the following tokens:</p>
<ul>
<li>Number</li>
<li>Plus</li>
<li>Dash</li>
</ul>
<p>We need to define the following struct and enum to represent the tokens.</p>
<pre>public struct Token
{
    public string Value
    {
        get { return _value; }
    }
    private readonly string _value;

    public TokenType Type
    {
        get { return _type; }
    }
    private readonly TokenType _type;


    public Token(string value, TokenType type)
    {
        _value = value;
        _type = type;
    }
}

public enum TokenType
{
    Number,
    Dash,
    Plus
}</pre>
<p>Now that we have our Token struct we can write our method to tokenize the input string.</p>
<pre>public static IEnumerable&lt;Token&gt; Tokenize(string input)
{
    var st = new StringTraverser(input);
    var c = default(char?);
    while ((c = st.Next())!= null)
    {
        if (c == ' ')
        {
            continue; // We can ignore white space.
        }
        else if (c == '+')
        {
            yield return new Token("+", TokenType.Plus);
        }
        else if (c == '-')
        {
            yield return new Token("-", TokenType.Dash);
        }
        else if (c &gt;= '0' &amp;&amp; c &lt;= '9')
        {
            var s = c.ToString();
            while ((c = st.Next()) != null &amp;&amp; c &gt;= '0' &amp;&amp; c &lt;= '9')
            {
                s += c;
            }
            if (c != null) 
            {
                st.Back(); // We don't want to skip the next token do we?
            }
            yield return new Token(s, TokenType.Number);
        }
        else
        {
            yield return new Token(c.ToString(), TokenType.Unknown);
        }
    }
}</pre>
<p>If we were to pass our input string into the Tokenize method we should get back the following tokens:</p>
<ul>
<li>Number = <strong>10</strong></li>
<li>Plus = <strong>+</strong></li>
<li>Number = <strong>2</strong></li>
<li>Dash = <strong>&#8211;</strong></li>
<li>Number = <strong>3</strong></li>
</ul>
<p>In this form we can easily move forward in the process and begin the syntactical analysis process but that is for another day. Take notice of how in the final else condition we return an unknown token. This is because it is not the job of the lexical analyzer to decide how to handle an invalid token. Given this simple example it is easy to imagine what other tokens we could add. With enough though you can come up with your own programming language in no time.  </p>
<p>The following code is what makes up the StringTraverser object. </p>
<pre>public sealed class StringTraverser
{
    private readonly string _value;
    private readonly int _length;
    private int _index;


    public StringTraverser(string value)
    {
        if (value == null)
        {
            throw new ArgumentNullException("value");
        }

        _value = value;
        _length = value.Length;
    }


    public char? Next()
    {
        if (_index == _length)
        {
            return null;
        }

        return _value[_index++];
    }

    public string Next(int count)
    {
        if (count &lt;= 0)
        {
            throw new ArgumentOutOfRangeException("count", count, "The count must be greater than zero.");
        }

        if (_index + count &gt; _length)
        {
            return null;
        }

        var result = _value.Substring(_index, count);
        _index += count;
        return result;
    }

    public string Next(IEnumerable&lt;char&gt; chars)
    {
        if (chars == null)
        {
            throw new ArgumentNullException("chars");
        }

        var closestIndex = int.MaxValue;
        foreach (var c in chars)
        {
            var index = _value.IndexOf(c, _index);
            if (index != -1)
            {
                closestIndex = Math.Min(closestIndex, index);
            }
        }

        if (closestIndex == int.MaxValue)
        {
            return null;
        }

        var result = _value.Substring(_index, closestIndex - _index);
        _index = closestIndex;
        return result;
    }

    public string NextWhile(Func&lt;char, bool&gt; predicate)
    {
        if (predicate == null)
        {
            throw new ArgumentNullException("predicate");
        }

        var startIndex = _index;
        ForwardWhile(predicate);
        return _value.Substring(startIndex, _index - startIndex);
    }

    public char? PeekNext()
    {
        var result = Next();
        if (result != null)
        {
            _index--;
        }
        return result;
    }

    public string PeekNext(int count)
    {
        var result = Next(count);
        if (result != null)
        {
            _index -= count;
        }
        return result;
    }

    public string PeekNext(IEnumerable&lt;char&gt; chars)
    {
        var startIndex = _index;
        var result = Next(chars);
        _index = startIndex;
        return result;
    }
        
    public char? Previous()
    {
        if (_index == 0)
        {
            return null;
        }

        return _value[--_index];
    }

    public string Previous(int count)
    {
        if (count &lt;= 0)
        {
            throw new ArgumentOutOfRangeException("count", count, "The count must be greater than zero.");
        }

        if (_index - count &lt; 0)
        {
            return null;
        }

        _index -= count;
        return _value.Substring(_index, count);
    }

    public string Previous(IEnumerable&lt;char&gt; chars)
    {
        if (chars == null)
        {
            throw new ArgumentNullException("chars");
        }

        var closestIndex = -1;
        foreach (var c in chars)
        {
            var index = _value.IndexOf(c);
            if (index != -1)
            {
                closestIndex = Math.Max(closestIndex, index);
            }
        }

        if (closestIndex == -1)
        {
            return null;
        }

        var result = _value.Substring(closestIndex + 1, _index - closestIndex - 1);
        _index = closestIndex;
        return result;
    }
        
    public char? PeekPrevious()
    {
        var result = Previous();
        if (result != null)
        {
            _index++;
        }
        return result;
    }

    public string PeekPrevious(int count)
    {
        var result = Previous(count);
        if (result != null)
        {
            _index += count;
        }
        return result;
    }

    public string PeekPrevious(IEnumerable&lt;char&gt; chars)
    {
        var startIndex = _index;
        var result = Previous(chars);
        _index = startIndex;
        return result;
    }


    public void Forward()
    {
        _index = Math.Min(_length, _index + 1);
    }

    public void Forward(int count)
    {
        if (count &lt;= 0)
        {
            throw new ArgumentOutOfRangeException("count", count, "The count must be greater than zero.");
        }

        _index = Math.Min(_length, _index + count);
    }

    public void ForwardWhile(Func&lt;char, bool&gt; predicate)
    {
        if (predicate == null)
        {
            throw new ArgumentNullException("predicate");
        }

        while (predicate(PeekNext() ?? char.MinValue))
        {
            _index++;
        }
    }

    public void Back()
    {
        _index = Math.Max(0, _index - 1);
    }

    public void Back(int count)
    {
        if (count &lt;= 0)
        {
            throw new ArgumentOutOfRangeException("count", count, "The count must be greater than zero.");
        }

        if (_index == _length)
        {
            _index--;
        }

        _index = Math.Max(0, _index - count);
    }

    public void BackWhile(Func&lt;char, bool&gt; predicate)
    {
        if (predicate == null)
        {
            throw new ArgumentNullException("predicate");
        }

        while (predicate(PeekPrevious() ?? char.MinValue))
        {
            _index--;
        }
    }

    public void Reset()
    {
        _index = 0;
    }
}</pre>
]]></content:encoded>
			<wfw:commentRss>/index.php/desktopdev/mstech/lexical-analysis/feed/</wfw:commentRss>
		<slash:comments>0</slash:comments>
		</item>
		<item>
		<title>Generic Object Pool</title>
		<link>/index.php/desktopdev/mstech/generic-object-pool/</link>
		<comments>/index.php/desktopdev/mstech/generic-object-pool/#respond</comments>
		<pubDate>Thu, 01 Apr 2010 23:08:41 +0000</pubDate>
		<dc:creator><![CDATA[chaospandion]]></dc:creator>
				<category><![CDATA[C#]]></category>
		<category><![CDATA[Microsoft Technologies]]></category>
		<category><![CDATA[.net]]></category>
		<category><![CDATA[c#]]></category>
		<category><![CDATA[object pool]]></category>
		<category><![CDATA[sockets]]></category>

		<guid isPermaLink="false">/index.php/2010/04/generic-object-pool/</guid>
		<description><![CDATA[Recently I was working with some socket programming using the SocketAsyncEventArgs class. When writing high performance .NET code it is a good idea to keep object creation to a minimum. Instead of creating a new SocketAsyncEventArgs instance every time an action was performed I decided to put together a simple generic object pool. I hope [&#8230;]]]></description>
				<content:encoded><![CDATA[<p>Recently I was working with some socket programming using the SocketAsyncEventArgs class. When writing high performance .NET code it is a good idea to keep object creation to a minimum. Instead of creating a new SocketAsyncEventArgs instance every time an action was performed I decided to put together a simple generic object pool. I hope you&#8217;ll try it out and leave me some feedback. </p>
<pre>/// &lt;summary&gt;
/// Represents a pool of objects with a size limit.
/// &lt;/summary&gt;
/// &lt;typeparam name="T"&gt;The type of object in the pool.&lt;/typeparam&gt;
public sealed class ObjectPool&lt;T&gt; : IDisposable
	where T : new()
{
	private readonly int size;
	private readonly object locker;
	private readonly Queue&lt;T&gt; queue;
	private int count;


	/// &lt;summary&gt;
	/// Initializes a new instance of the ObjectPool class.
	/// &lt;/summary&gt;
	/// &lt;param name="size"&gt;The size of the object pool.&lt;/param&gt;
	public ObjectPool(int size)
	{
        if (size &lt;= 0)
        {
            const string message = "The size of the pool must be greater than zero.";
            throw new ArgumentOutOfRangeException("size", size, message);
        }

		this.size = size;
		locker = new object();
		queue = new Queue&lt;T&gt;();
	}


	/// &lt;summary&gt;
	/// Retrieves an item from the pool. 
	/// &lt;/summary&gt;
	/// &lt;returns&gt;The item retrieved from the pool.&lt;/returns&gt;
	public T Get()
	{
		lock (locker)
		{
			if (queue.Count &gt; 0)
			{
				return queue.Dequeue();
			}

			count++;
			return new T();
		}
	}

	/// &lt;summary&gt;
	/// Places an item in the pool.
	/// &lt;/summary&gt;
	/// &lt;param name="item"&gt;The item to place to the pool.&lt;/param&gt;
	public void Put(T item)
	{
		lock (locker)
		{
			if (count &lt; size)
			{
				queue.Enqueue(item);
			}
			else
			{
				using (item as IDisposable)
				{
					count--;
				}
			}
		}
	}

	/// &lt;summary&gt;
	/// Disposes of items in the pool that implement IDisposable.
	/// &lt;/summary&gt;
	public void Dispose()
	{
		lock (locker)
		{
            count = 0;
			while (queue.Count &gt; 0)
			{
				using (queue.Dequeue() as IDisposable)
				{

				}
			}
		}
	}
}</pre>
]]></content:encoded>
			<wfw:commentRss>/index.php/desktopdev/mstech/generic-object-pool/feed/</wfw:commentRss>
		<slash:comments>0</slash:comments>
		</item>
		<item>
		<title>Phone Number Primitive</title>
		<link>/index.php/desktopdev/mstech/phone-number-primitive/</link>
		<comments>/index.php/desktopdev/mstech/phone-number-primitive/#comments</comments>
		<pubDate>Wed, 17 Mar 2010 15:03:13 +0000</pubDate>
		<dc:creator><![CDATA[chaospandion]]></dc:creator>
				<category><![CDATA[C#]]></category>
		<category><![CDATA[Microsoft Technologies]]></category>
		<category><![CDATA[.net]]></category>
		<category><![CDATA[c#]]></category>
		<category><![CDATA[primitves]]></category>

		<guid isPermaLink="false">/index.php/2010/03/phone-number-primitive/</guid>
		<description><![CDATA[I don&#8217;t know how many times I&#8217;ve put together the same slow regexp to check if the user input is a valid phone number. I decided that this cannot go on and developed a simple phone number primitive. Now our main concern here is the performance of TryParse since it will be used the most. [&#8230;]]]></description>
				<content:encoded><![CDATA[<p>I don&#8217;t know how many times I&#8217;ve put together the same slow regexp to check if the user input is a valid phone number. I decided that this cannot go on and developed a simple phone number primitive. Now our main concern here is the performance of TryParse since it will be used the most. After running some performance tests the median timing was 400ns on a 3Ghz machine.</p>
<pre>[Serializable]
public struct PhoneNumber : IEquatable&lt;PhoneNumber&gt;
{
    private const int AreaCodeShift = 54;
    private const int CentralOfficeCodeShift = 44;
    private const int SubscriberNumberShift = 30;
    private const int CentralOfficeCodeMask = 0x000003FF;
    private const int SubscriberNumberMask = 0x00003FFF;
    private const int ExtensionMask = 0x3FFFFFFF;


    private readonly ulong value;


    public int AreaCode
    {
        get { return UnmaskAreaCode(value); }
    }

    public int CentralOfficeCode
    {
        get { return UnmaskCentralOfficeCode(value); }
    }

    public int SubscriberNumber
    {
        get { return UnmaskSubscriberNumber(value); }
    }

    public int Extension
    {
        get { return UnmaskExtension(value); }
    }


    public PhoneNumber(ulong value)
        : this(UnmaskAreaCode(value), UnmaskCentralOfficeCode(value), UnmaskSubscriberNumber(value), UnmaskExtension(value), true)
    {

    }

    public PhoneNumber(int areaCode, int centralOfficeCode, int subscriberNumber)
        : this(areaCode, centralOfficeCode, subscriberNumber, 0, true)
    {

    }

    public PhoneNumber(int areaCode, int centralOfficeCode, int subscriberNumber, int extension)
        : this(areaCode, centralOfficeCode, subscriberNumber, extension, true)
    {

    }

    private PhoneNumber(int areaCode, int centralOfficeCode, int subscriberNumber, int extension, bool throwException)
    {
        value = 0;

        if (areaCode &lt; 200 || areaCode &gt; 989)
        {
            if (!throwException) return;
            throw new ArgumentOutOfRangeException("areaCode", areaCode, @"The area code portion must fall between 200 and 989.");
        }
        else if (centralOfficeCode &lt; 200 || centralOfficeCode &gt; 999)
        {
            if (!throwException) return;
            throw new ArgumentOutOfRangeException("centralOfficeCode", centralOfficeCode, @"The central office code portion must fall between 200 and 999.");
        }
        else if (subscriberNumber &lt; 0 || subscriberNumber &gt; 9999)
        {
            if (!throwException) return;
            throw new ArgumentOutOfRangeException("subscriberNumber", subscriberNumber, @"The subscriber number portion must fall between 0 and 9999.");
        }
        else if (extension &lt; 0 || extension &gt; 1073741824)
        {
            if (!throwException) return;
            throw new ArgumentOutOfRangeException("extension", extension, @"The extension portion must fall between 0 and 1073741824.");
        }
        else if (areaCode.ToString()[1] - 48 &gt; 8)
        {
            if (!throwException) return;
            throw new ArgumentOutOfRangeException("areaCode", areaCode, @"The second digit of the area code cannot be greater than 8.");
        }
        else
        {
            value |= ((ulong)(uint)areaCode &lt;&lt; AreaCodeShift);
            value |= ((ulong)(uint)centralOfficeCode &lt;&lt; CentralOfficeCodeShift);
            value |= ((ulong)(uint)subscriberNumber &lt;&lt; SubscriberNumberShift);
            value |= ((ulong)(uint)extension);
        }
    }

    public override bool Equals(object obj)
    {
        return obj != null &amp;&amp; obj.GetType() == typeof(PhoneNumber) &amp;&amp; Equals((PhoneNumber)obj);
    }

    public bool Equals(PhoneNumber other)
    {
        return this.value == other.value;
    }

    public override int GetHashCode()
    {
        return value.GetHashCode();
    }

    public override string ToString()
    {
        return ToString(PhoneNumberFormat.Separated);
    }

    public string ToString(PhoneNumberFormat format)
    {
        switch (format)
        {
            case PhoneNumberFormat.Plain:
                return string.Format(@"{0:D3}{1:D3}{2:D4} {3:#}", AreaCode, CentralOfficeCode, SubscriberNumber, Extension).Trim();
            case PhoneNumberFormat.Separated:
                return string.Format(@"{0:D3}-{1:D3}-{2:D4} {3:#}", AreaCode, CentralOfficeCode, SubscriberNumber, Extension).Trim();
            default:
                throw new ArgumentOutOfRangeException("format");
        }
    }

    public ulong ToUInt64()
    {
        return value;
    }


    public static PhoneNumber Parse(string value)
    {
        var result = default(PhoneNumber);
        if (!TryParse(value, out result))
        {
            throw new FormatException(string.Format(@"The string ""{0}"" could not be parsed as a phone number.", value));
        }
        return result;
    }

    public static bool TryParse(string value, out PhoneNumber result)
    {
        result = default(PhoneNumber);

        if (string.IsNullOrEmpty(value))
        {
            return false;
        }

        var index = 0;
        var numericPieces = new char[value.Length];

        foreach (var c in value)
        {
            if (char.IsNumber(c))
            {
                numericPieces[index++] = c;
            }
        }

        if (index &lt; 9)
        {
            return false;
        }

        var numericString = new string(numericPieces);
        var areaCode = int.Parse(numericString.Substring(0, 3));
        var centralOfficeCode = int.Parse(numericString.Substring(3, 3));
        var subscriberNumber = int.Parse(numericString.Substring(6, 4));
        var extension = 0;

        if (numericString.Length &gt; 10)
        {
            extension = int.Parse(numericString.Substring(10));
        }

        result = new PhoneNumber(
            areaCode,
            centralOfficeCode,
            subscriberNumber,
            extension,
            false
        );

        return result.value != 0;
    }

    public static bool operator ==(PhoneNumber left, PhoneNumber right)
    {
        return left.Equals(right);
    }

    public static bool operator !=(PhoneNumber left, PhoneNumber right)
    {
        return !left.Equals(right);
    }

    private static int UnmaskAreaCode(ulong value)
    {
        return (int)(value &gt;&gt; AreaCodeShift);
    }

    private static int UnmaskCentralOfficeCode(ulong value)
    {
        return (int)((value &gt;&gt; CentralOfficeCodeShift) &amp; CentralOfficeCodeMask);
    }

    private static int UnmaskSubscriberNumber(ulong value)
    {
        return (int)((value &gt;&gt; SubscriberNumberShift) &amp; SubscriberNumberMask);
    }

    private static int UnmaskExtension(ulong value)
    {
        return (int)(value &amp; ExtensionMask);
    }
}

public enum PhoneNumberFormat
{
    Plain,
    Separated
}</pre>
]]></content:encoded>
			<wfw:commentRss>/index.php/desktopdev/mstech/phone-number-primitive/feed/</wfw:commentRss>
		<slash:comments>4</slash:comments>
		</item>
		<item>
		<title>Lazy Coding?</title>
		<link>/index.php/desktopdev/mstech/lazy-coding/</link>
		<comments>/index.php/desktopdev/mstech/lazy-coding/#respond</comments>
		<pubDate>Thu, 11 Mar 2010 14:03:43 +0000</pubDate>
		<dc:creator><![CDATA[chaospandion]]></dc:creator>
				<category><![CDATA[C#]]></category>
		<category><![CDATA[Microsoft Technologies]]></category>
		<category><![CDATA[.net]]></category>
		<category><![CDATA[c#]]></category>
		<category><![CDATA[lazy]]></category>

		<guid isPermaLink="false">/index.php/2010/03/lazy-coding/</guid>
		<description><![CDATA[Are you waiting for .NET 4.0 to take advantage of lazy initialization? Now you don&#8217;t have to. The question you need to ask yourself is why haven&#8217;t I already made this myself? Aren&#8217;t we all a little lazy? /// &#60;summary&#62; /// Provides support for lazy initialization. /// &#60;/summary&#62; /// &#60;typeparam name="T"&#62;Specifies the type of object [&#8230;]]]></description>
				<content:encoded><![CDATA[<p>Are you waiting for .NET 4.0 to take advantage of lazy initialization? Now you don&#8217;t have to. The question you need to ask yourself is why haven&#8217;t I already made this myself?</p>
<p><em>Aren&#8217;t we all a little lazy?</em></p>
<pre>/// &lt;summary&gt;
/// Provides support for lazy initialization.
/// &lt;/summary&gt;
/// &lt;typeparam name="T"&gt;Specifies the type of object that is being lazily initialized.&lt;/typeparam&gt;
public sealed class Lazy&lt;T&gt;
{
	private readonly Func&lt;T&gt; createValue;
	private volatile bool isValueCreated;
	private T value;


	/// &lt;summary&gt;
	/// Gets the lazily initialized value of the current Lazy{T} instance.
	/// &lt;/summary&gt;
	public T Value
	{
		get
		{
			if (!isValueCreated)
			{
				lock (this)
				{
					if (!isValueCreated)
					{
						value = createValue();
						isValueCreated = true;
					}
				}
			}
			return value;
		}
	}		

	/// &lt;summary&gt;
	/// Gets a value that indicates whether a value has been created for this Lazy{T} instance.
	/// &lt;/summary&gt;
	public bool IsValueCreated
	{
		get 
		{
			lock (this)
			{
				return isValueCreated;
			} 
		}
	}


	/// &lt;summary&gt;
	/// Initializes a new instance of the Lazy{T} class.
	/// &lt;/summary&gt;
	/// &lt;param name="createValue"&gt;The delegate that produces the value when it is needed.&lt;/param&gt;
	public Lazy(Func&lt;T&gt; createValue)
	{
		if (createValue == null) throw new ArgumentNullException("createValue");

		this.createValue = createValue;
	}


	/// &lt;summary&gt;
	/// Creates and returns a string representation of the Lazy{T}.Value.
	/// &lt;/summary&gt;
	/// &lt;returns&gt;The string representation of the Lazy{T}.Value property.&lt;/returns&gt;
	public override string ToString()
	{
		return Value.ToString();
	}
}</pre>
<p><strong>Example Usage</strong></p>
<pre>public int MyProperty
{
    get { return myProperty.Value; }
}
private readonly Lazy&lt;int&gt; myProperty = new Lazy&lt;int&gt;(() =&gt; 2);</pre>
]]></content:encoded>
			<wfw:commentRss>/index.php/desktopdev/mstech/lazy-coding/feed/</wfw:commentRss>
		<slash:comments>0</slash:comments>
		</item>
		<item>
		<title>C# Dynamic Data Layer</title>
		<link>/index.php/desktopdev/mstech/c-dynamic-data-layer/</link>
		<comments>/index.php/desktopdev/mstech/c-dynamic-data-layer/#comments</comments>
		<pubDate>Sat, 06 Mar 2010 20:38:28 +0000</pubDate>
		<dc:creator><![CDATA[chaospandion]]></dc:creator>
				<category><![CDATA[C#]]></category>
		<category><![CDATA[Microsoft Technologies]]></category>
		<category><![CDATA[.net]]></category>
		<category><![CDATA[c#]]></category>
		<category><![CDATA[dynamic]]></category>

		<guid isPermaLink="false">/index.php/2010/03/c-dynamic-data-layer/</guid>
		<description><![CDATA[Update: I added some code to handle DBNulls. With the upcoming release of .NET 4.0 we will be seeing the new dynamic type introduced. The dynamic type bypasses static type checking and is instead checked at run-time. It was introduced to improve interoperability with dynamic languages like IronPython as well as simplifying the usage COM [&#8230;]]]></description>
				<content:encoded><![CDATA[<p><strong>Update: </strong>I added some code to handle DBNulls.</p>
<p>With the upcoming release of .NET 4.0 we will be seeing the new dynamic type introduced. The dynamic type bypasses static type checking and is instead checked at run-time. It was introduced to improve interoperability with dynamic languages like IronPython as well as simplifying the usage COM APIs that return objects such as the Microsoft Office API. How can we take advantage of this in other areas? ADO.NET is a perfect candidate for taking advantage of the dynamic type. The following code lays out the ground work for a nice simple class that returns dynamic objects from the database.</p>
<pre>public class DynamicDataLayer : IDisposable
{
    private readonly DbConnection connection;

    public DynamicDataLayer(string providerName, string connectionString)
    {
        Contract.Requires(!string.IsNullOrWhiteSpace(providerName));
        Contract.Requires(!string.IsNullOrWhiteSpace(connectionString));

        connection = DbProviderFactories.GetFactory(providerName).CreateConnection();
        connection.ConnectionString = connectionString;
        connection.Open();
    }

    public IEnumerable&lt;dynamic&gt; ExecuteText(string text, params KeyValuePair&lt;string, object&gt;[] parameters)
    {
        Contract.Requires(!string.IsNullOrWhiteSpace(text));
        Contract.Requires(parameters != null);

        lock (this)
        {
            using (var command = connection.CreateCommand())
            {
                command.CommandText = commandText;
                foreach (var parameter in parameters)
                {
                    var p = command.CreateParameter();
                    p.ParameterName = parameter.Key;
                    p.Value = parameter.Value;
                    command.Parameters.Add(p);
                }
                using (var reader = command.ExecuteReader())
                {
                    while (reader.Read())
                    {
                        dynamic record = new ExpandoObject();
                        var recordMembers = (IDictionary&lt;string, object&gt;)record;
                        for (int i = 0; i &lt; reader.FieldCount; i++)
                        {
                            recordMembers.Add(reader.GetName(i), GetDefaultIfDBNull(reader.GetValue(i), reader.GetFieldType(i)));
                        }
                        yield return record;
                    }
                }
            }
        }
    }

    public void Dispose()
    {
        connection.Dispose();
    }

    private object GetDefaultIfDBNull(object value, Type type)
    {
        var dbnull = value as DBNull;
        if (dbnull != null)
        {
            switch (Type.GetTypeCode(type))
            {
                case TypeCode.Boolean: return default(bool);
                case TypeCode.Byte: return default(byte);
                case TypeCode.Char: return default(char);
                case TypeCode.DateTime: return default(DateTime);
                case TypeCode.Decimal: return default(decimal);
                case TypeCode.Double: return default(double);
                case TypeCode.Int16: return default(short);
                case TypeCode.Int32: return default(int);
                case TypeCode.Int64: return default(long);
                case TypeCode.SByte: return default(sbyte);
                case TypeCode.Single: return default(float);
                case TypeCode.String: return default(string);
                case TypeCode.UInt16: return default(ushort);
                case TypeCode.UInt32: return default(uint);
                case TypeCode.UInt64: return default(ulong);
                default: return default(object);
            }
        }
        return value;
    }
}</pre>
<p>Using this class, the code to retrieve records from a database becomes much cleaner.<br />
Take notice of how we don&#8217;t have to explicitly cast the dynamic type to the variable we assign it to.</p>
<pre>using (var dataLayer = new DynamicDataLayer(Provider, ConnectionString))
{
    foreach (dynamic record in dataLayer.ExecuteText(CommandText))
    {
        int size = record.Size;
        string name = record.Name;
        // ...
    }
}</pre>
]]></content:encoded>
			<wfw:commentRss>/index.php/desktopdev/mstech/c-dynamic-data-layer/feed/</wfw:commentRss>
		<slash:comments>3</slash:comments>
		</item>
		<item>
		<title>F# Asynchronous Workflows</title>
		<link>/index.php/desktopdev/mstech/f-asynchronous-workflows/</link>
		<comments>/index.php/desktopdev/mstech/f-asynchronous-workflows/#respond</comments>
		<pubDate>Fri, 26 Feb 2010 17:00:07 +0000</pubDate>
		<dc:creator><![CDATA[chaospandion]]></dc:creator>
				<category><![CDATA[Microsoft Technologies]]></category>
		<category><![CDATA[f#]]></category>

		<guid isPermaLink="false">/index.php/2010/02/f-asynchronous-workflows/</guid>
		<description><![CDATA[Asynchronous work flows are a very powerful tool in programming. They allow your threads to do other work while you wait for results from a long running piece of work. How would you write an asynchronous work flow in C#? Logically you might consider chaining together callbacks. &#60;code&#62; &#60;span class="MT_blue"&#62;new&#60;/span&#62; Client().Connect(settings, (c1, ex1) =&#62; { [&#8230;]]]></description>
				<content:encoded><![CDATA[<p>Asynchronous work flows are a very powerful tool in programming. They allow your threads to do other work while you wait for results from a long running piece of work. How would you write an asynchronous work flow in C#? Logically you might consider chaining together callbacks.</p>
<pre>&lt;code&gt;
&lt;span class="MT_blue"&gt;new&lt;/span&gt; Client().Connect(settings, (c1, ex1) =&gt; {
    &lt;span class="MT_green"&gt;// prepare data to send&lt;/span&gt;
    c.Send(sendData1, (c2, ex2) =&gt; {
        c2.Receive((c3, dt1, ex3) =&gt; {
            &lt;span class="MT_green"&gt;// parse data and prepare response&lt;/span&gt;
            c3.Send(sendData2, (c4, ex4) =&gt; {
                c4.Disconnect((c5, ex5) =&gt; {
                    c5.Dispose();
                });
            });
        });
    });
});
&lt;/code&gt;</pre>
<p>There is a good reason you never see code like this. For one, it is highly indented and this makes it a bit awkward to read. More importantly, this approach puts your code at risk of a great deal of name conflicts, as the compiler will create a closure for each lambda and capture all of the values in the previous levels. This means you have to come up with a different name for the parameters in each lambda. Resolving this issue could involve creating an additional class to contain the necessary methods, potentially complicating a task that seems like it should be simple. This is where F# asynchronous work flows come to play.</p>
<pre>&lt;code&gt;
async {
    &lt;span class="MT_blue"&gt;try&lt;/span&gt;
        &lt;span class="MT_blue"&gt;use&lt;/span&gt; client = &lt;span class="MT_blue"&gt;new&lt;/span&gt; Client()
        &lt;span class="MT_blue"&gt;do!&lt;/span&gt; client.Connect settings
        &lt;span class="MT_green"&gt;// prepare data to send&lt;/span&gt;
        &lt;span class="MT_blue"&gt;do!&lt;/span&gt; client.Send sendData1
        &lt;span class="MT_blue"&gt;let!&lt;/span&gt; dt1 = client.Receive ()
        &lt;span class="MT_green"&gt;// parse data and prepare response&lt;/span&gt;
        &lt;span class="MT_blue"&gt;do!&lt;/span&gt; client.Send sendData2
        &lt;span class="MT_blue"&gt;do!&lt;/span&gt; client.Disconnect ()
    &lt;span class="MT_blue"&gt;with&lt;/span&gt;
    | ex -&gt;
        &lt;span class="MT_green"&gt;// handle exception&lt;/span&gt;       
} |&gt; Asnyc.Start &lt;span class="MT_green"&gt;// run in the thread pool&lt;/span&gt; 
&lt;/code&gt;</pre>
<p></p>
<p>This is almost a literal translation of the C# except for one thing. Notice how the C# version threads through an exception parameter? In F# you have first class error handling in asynchronous work flows so the first failure will will call your exception handling code.</p>
<p>The first class support for asynchronous work flows is an amazing feature of F#. It allows you to create simple elegant code right where you need it. Think about some of your synchronous projects that just don&#8217;t have the performance you need and consider F# as a powerful solution to you problem.</p>
<p><a href="http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/">F# &#8211; Microsoft Research</a><br />
<a href="http://msdn.microsoft.com/en-us/fsharp/default.aspx">F# &#8211; MSDN</a></p>
]]></content:encoded>
			<wfw:commentRss>/index.php/desktopdev/mstech/f-asynchronous-workflows/feed/</wfw:commentRss>
		<slash:comments>0</slash:comments>
		</item>
	</channel>
</rss>
