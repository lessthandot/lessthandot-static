<?xml version="1.0" encoding="UTF-8"?><rss version="2.0"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:atom="http://www.w3.org/2005/Atom"
	xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
	xmlns:slash="http://purl.org/rss/1.0/modules/slash/"
	>

<channel>
	<title>kaht &#8211; LessthanDot</title>
	<atom:link href="/index.php/author/kaht/feed/" rel="self" type="application/rss+xml" />
	<link>/</link>
	<description>A Technical Community for IT Professionals</description>
	<lastBuildDate>Sat, 09 Mar 2019 12:50:36 +0000</lastBuildDate>
	<language>en-US</language>
	<sy:updatePeriod>hourly</sy:updatePeriod>
	<sy:updateFrequency>1</sy:updateFrequency>
	<generator>https://wordpress.org/?v=4.6.1</generator>
	<item>
		<title>Why I sometimes get miscellaneous exclamation marks (!) in SQL generated emails</title>
		<link>/index.php/webdev/serverprogramming/why-i-sometimes-get-miscellaneous-exclam/</link>
		<comments>/index.php/webdev/serverprogramming/why-i-sometimes-get-miscellaneous-exclam/#comments</comments>
		<pubDate>Thu, 26 Aug 2010 17:28:06 +0000</pubDate>
		<dc:creator><![CDATA[kaht]]></dc:creator>
				<category><![CDATA[Server Programming]]></category>

		<guid isPermaLink="false">/index.php/2010/08/why-i-sometimes-get-miscellaneous-exclam/</guid>
		<description><![CDATA[Using SQL server to generate automatic emails, I've noticed from time to time that the emails will miscellaneously contain exclamations throughout the mail.

Here's an example to replicate the situation.  We'll generate a table with multiple rows of t&#8230;]]></description>
				<content:encoded><![CDATA[<p>Using SQL server to generate automatic emails, I&#8217;ve noticed from time to time that the emails will miscellaneously contain exclamations throughout the mail.</p>
<p>Here&#8217;s an example to replicate the situation.  We&#8217;ll generate a table with multiple rows of the alphabet and email the contents:</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
</pre></td><td class="de1"><pre class="de1"><span class="kw1">declare</span> @t <span class="kw1">table</span> <span class="br0">&#40;</span>letters <span class="kw1">varchar</span><span class="br0">&#40;</span><span class="nu0">100</span><span class="br0">&#41;</span><span class="br0">&#41;</span>
<span class="kw1">declare</span> @counter <span class="kw1">int</span>
<span class="kw1">declare</span> @string <span class="kw1">varchar</span><span class="br0">&#40;</span><span class="nu0">8000</span><span class="br0">&#41;</span>
<span class="kw1">set</span> @counter <span class="sy0">=</span> <span class="nu0">0</span>
<span class="kw1">set</span> @string <span class="sy0">=</span> <span class="st0">''</span>
&nbsp;
<span class="kw1">insert</span> <span class="kw1">into</span> @t
<span class="kw1">select</span> <span class="st0">'abcdefghijklmnopqrstuvwxyz'</span>
&nbsp;
<span class="kw1">while</span> <span class="br0">&#40;</span>@counter <span class="sy0">&lt;</span> <span class="nu0">128</span><span class="br0">&#41;</span> <span class="kw1">begin</span>
&nbsp; &nbsp;<span class="kw1">insert</span> <span class="kw1">into</span> @t
&nbsp; &nbsp;<span class="kw1">select</span> letters <span class="kw1">from</span> @t
&nbsp; &nbsp;<span class="kw1">set</span> @counter <span class="sy0">=</span> <span class="kw2">@@rowcount</span>
<span class="kw1">end</span>
&nbsp;
<span class="kw1">select</span> @string <span class="sy0">=</span> @string <span class="sy0">+</span> letters <span class="sy0">+</span> <span class="st0">'&lt;br&gt;'</span>
<span class="kw1">from</span> @t
&nbsp;
<span class="kw1">select</span> @string
&nbsp;
<span class="kw1">declare</span> @mailObj <span class="kw1">int</span>
<span class="kw1">declare</span> @hr <span class="kw1">int</span>
&nbsp;
<span class="kw1">exec</span> @hr <span class="sy0">=</span> <span class="kw3">sp_OACreate</span> <span class="st0">'CDO.Message'</span>, @mailObj <span class="kw1">out</span>
<span class="kw1">exec</span> @hr <span class="sy0">=</span> <span class="kw3">sp_OASetProperty</span> @mailObj, <span class="st0">'From'</span>, <span class="st0">'sender@server.com'</span>
<span class="kw1">exec</span> @hr <span class="sy0">=</span> <span class="kw3">sp_OASetProperty</span> @mailObj, <span class="st0">'HTMLBody'</span>, @string
<span class="kw1">exec</span> @hr <span class="sy0">=</span> <span class="kw3">sp_OASetProperty</span> @mailObj, <span class="st0">'Subject'</span>, <span class="st0">'test'</span>
<span class="kw1">exec</span> @hr <span class="sy0">=</span> <span class="kw3">sp_OASetProperty</span> @mailObj, <span class="st0">'To'</span>, <span class="st0">'recipient@server.com'</span>
<span class="kw1">exec</span> @hr <span class="sy0">=</span> <span class="kw3">sp_OAMethod</span> @mailObj, <span class="st0">'Send'</span>, <span class="sy0">NULL</span>
<span class="kw1">exec</span> @hr <span class="sy0">=</span> <span class="kw3">sp_OADestroy</span> @mailObj</pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">declare @t table (letters varchar(100))
declare @counter int
declare @string varchar(8000)
set @counter = 0
set @string = ''

insert into @t
select 'abcdefghijklmnopqrstuvwxyz'

while (@counter &lt; 128) begin
   insert into @t
   select letters from @t
   set @counter = @@rowcount
end

select @string = @string + letters + '&lt;br&gt;'
from @t

select @string

declare @mailObj int
declare @hr int

exec @hr = sp_OACreate 'CDO.Message', @mailObj out
exec @hr = sp_OASetProperty @mailObj, 'From', 'sender@server.com'
exec @hr = sp_OASetProperty @mailObj, 'HTMLBody', @string
exec @hr = sp_OASetProperty @mailObj, 'Subject', 'test'
exec @hr = sp_OASetProperty @mailObj, 'To', 'recipient@server.com'
exec @hr = sp_OAMethod @mailObj, 'Send', NULL
exec @hr = sp_OADestroy @mailObj</pre></div></div>

<p>This should kick out the alphabet repeated 256 times, with a &lt;br&gt; tag after each alphabet.  By examining the result in query analyzer, it should look just fine.  However, when you go check the email that got sent, you&#8217;ll find parts of the text that look like this:</p>
<p><code class="codespan">abcdefghijklmnopqrstuvwxyz<br />
abcdefghijklmnopqrstuvwxyzabcdef! ghijklmnopqrstuvwxyz<br />
abcdefghijklmnopqrstuvwxyz<br />
.<br />
.<br />
.<br />
abcdefghijklmnopqrstuvwxyz<br />
abcd! efghijklm! nopqrstuvwxyz<br />
abcdefghijklmnopqrstuvwxyz</code></p>
<p>Fortunately, the solution is fairly simple.  Microsoft Outlook seems to insert these exclamation marks randomly throughout the email when the mail contains no line feeds.</p>
<p>So, stick a line feed after each alphabet and the exclamation marks will disappear from the email:</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
</pre></td><td class="de1"><pre class="de1"><span class="kw1">select</span> @string <span class="sy0">=</span> @string <span class="sy0">+</span> letters <span class="sy0">+</span> <span class="st0">'&lt;br&gt;'</span> <span class="sy0">+</span> <span class="kw1">char</span><span class="br0">&#40;</span><span class="nu0">10</span><span class="br0">&#41;</span>
<span class="kw1">from</span> @t</pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">select @string = @string + letters + '&lt;br&gt;' + char(10)
from @t</pre></div></div>

<p>Piece of cake  B)</p>
]]></content:encoded>
			<wfw:commentRss>/index.php/webdev/serverprogramming/why-i-sometimes-get-miscellaneous-exclam/feed/</wfw:commentRss>
		<slash:comments>4</slash:comments>
		</item>
		<item>
		<title>Using ASP to retrieve a recordset and return value from a stored procedure at the same time</title>
		<link>/index.php/webdev/serverprogramming/classicasp/using-asp-to-retrieve-a-recordset-and-re/</link>
		<comments>/index.php/webdev/serverprogramming/classicasp/using-asp-to-retrieve-a-recordset-and-re/#comments</comments>
		<pubDate>Mon, 10 Aug 2009 18:43:33 +0000</pubDate>
		<dc:creator><![CDATA[kaht]]></dc:creator>
				<category><![CDATA[Classic ASP]]></category>

		<guid isPermaLink="false">/index.php/2009/08/using-asp-to-retrieve-a-recordset-and-re/</guid>
		<description><![CDATA[(This post will use ASP, coded with server side JScript)

When accessing an SQL stored procedure in ASP via ADO, it is typically considered best practice to use the command object:


var oConn = Server.CreateObject("ADODB.Connection");
oConn.Open(&#8230;]]></description>
				<content:encoded><![CDATA[<p><em>(This post will use ASP, coded with server side JScript)</em></p>
<p>When accessing an SQL stored procedure in ASP via ADO, it is typically considered best practice to use the command object:</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="asp"><thead><tr><td colspan="2"  class="head">ASP</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
</pre></td><td class="de1"><pre class="de1"><span class="kw2">var</span> oConn <span class="sy0">=</span> <span class="kw1">Server</span>.<span class="kw3">CreateObject</span><span class="br0">&#40;</span><span class="st0">&quot;ADODB.Connection&quot;</span><span class="br0">&#41;</span><span class="sy0">;</span>
oConn.<span class="kw3">Open</span><span class="br0">&#40;</span><span class="st0">&quot;Provider=SQLOLEDB; Data Source=ServerName; User Id=ID; Password=PASSWORD&quot;</span><span class="br0">&#41;</span><span class="sy0">;</span>
<span class="kw2">var</span> oCmd <span class="sy0">=</span> <span class="kw1">Server</span>.<span class="kw3">CreateObject</span><span class="br0">&#40;</span><span class="st0">&quot;ADODB.Command&quot;</span><span class="br0">&#41;</span><span class="sy0">;</span>
oCmd.<span class="me1">ActiveConnection</span> <span class="sy0">=</span> oConn<span class="sy0">;</span>
oCmd.<span class="me1">CommandType</span> <span class="sy0">=</span> adCmdStoredProc<span class="sy0">;</span>
oCmd.<span class="me1">CommandText</span> <span class="sy0">=</span> <span class="st0">&quot;StoredProcedureName&quot;</span><span class="sy0">;</span>
oCmd.<span class="kw3">Execute</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
oCmd.<span class="kw3">Close</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
oConn.<span class="kw3">Close</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">var oConn = Server.CreateObject("ADODB.Connection");
oConn.Open("Provider=SQLOLEDB; Data Source=ServerName; User Id=ID; Password=PASSWORD");
var oCmd = Server.CreateObject("ADODB.Command");
oCmd.ActiveConnection = oConn;
oCmd.CommandType = adCmdStoredProc;
oCmd.CommandText = "StoredProcedureName";
oCmd.Execute();
oCmd.Close();
oConn.Close();</pre></div></div>

<p>If the stored procedure returns a recordset, then the Execute() method of the command object will return a recordset object.</p>
<p>Consder the following stored procedure:</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
</pre></td><td class="de1"><pre class="de1"><span class="kw1">create</span> <span class="kw1">procedure</span> TestProcedure <span class="kw1">as</span>
<span class="kw1">select</span> <span class="nu0">1</span> <span class="br0">&#91;</span>testValue<span class="br0">&#93;</span> <span class="kw1">union</span>
<span class="kw1">select</span> <span class="nu0">2</span> <span class="br0">&#91;</span>testValue<span class="br0">&#93;</span> <span class="kw1">union</span>
<span class="kw1">select</span> <span class="nu0">3</span> <span class="br0">&#91;</span>testValue<span class="br0">&#93;</span> </pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">create procedure TestProcedure as
select 1 [testValue] union
select 2 [testValue] union
select 3 [testValue] </pre></div></div>

<p>Using a command object set up to call this procedure, we can access the returned recordset like so:</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="asp"><thead><tr><td colspan="2"  class="head">ASP</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
</pre></td><td class="de1"><pre class="de1"><span class="kw2">var</span> oConn <span class="sy0">=</span> <span class="kw1">Server</span>.<span class="kw3">CreateObject</span><span class="br0">&#40;</span><span class="st0">&quot;ADODB.Connection&quot;</span><span class="br0">&#41;</span><span class="sy0">;</span>
oConn.<span class="kw3">Open</span><span class="br0">&#40;</span><span class="st0">&quot;Provider=SQLOLEDB; Data Source=ServerName; User Id=ID; Password=PASSWORD&quot;</span><span class="br0">&#41;</span><span class="sy0">;</span>
<span class="kw2">var</span> oCmd <span class="sy0">=</span> <span class="kw1">Server</span>.<span class="kw3">CreateObject</span><span class="br0">&#40;</span><span class="st0">&quot;ADODB.Command&quot;</span><span class="br0">&#41;</span><span class="sy0">;</span>
oCmd.<span class="me1">ActiveConnection</span> <span class="sy0">=</span> oConn<span class="sy0">;</span>
oCmd.<span class="me1">CommandType</span> <span class="sy0">=</span> adCmdStoredProc<span class="sy0">;</span>
oCmd.<span class="me1">CommandText</span> <span class="sy0">=</span> <span class="st0">&quot;TestProcedure&quot;</span><span class="sy0">;</span>
<span class="kw2">var</span> oRS <span class="sy0">=</span> oCmd.<span class="kw3">Execute</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span> &nbsp;<span class="co2">//oRS will contain the recordset returned from the stored procedure</span>
<span class="kw1">while</span> <span class="br0">&#40;</span><span class="sy0">!</span>oRS.<span class="kw2">EOF</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp;<span class="kw1">Response</span>.<span class="kw3">Write</span><span class="br0">&#40;</span>oRS.<span class="kw3">Fields</span><span class="br0">&#40;</span><span class="st0">&quot;testValue&quot;</span><span class="br0">&#41;</span>.<span class="me1">value</span> + <span class="st0">&quot;&lt;br /&gt;&quot;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp;oRS.<span class="kw3">MoveNext</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
<span class="br0">&#125;</span>
oRS.<span class="kw3">Close</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
oCmd.<span class="kw3">Close</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
oConn.<span class="kw3">Close</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">var oConn = Server.CreateObject("ADODB.Connection");
oConn.Open("Provider=SQLOLEDB; Data Source=ServerName; User Id=ID; Password=PASSWORD");
var oCmd = Server.CreateObject("ADODB.Command");
oCmd.ActiveConnection = oConn;
oCmd.CommandType = adCmdStoredProc;
oCmd.CommandText = "TestProcedure";
var oRS = oCmd.Execute();  //oRS will contain the recordset returned from the stored procedure
while (!oRS.EOF) {
   Response.Write(oRS.Fields("testValue").value + "&lt;br /&gt;");
   oRS.MoveNext();
}
oRS.Close();
oCmd.Close();
oConn.Close();</pre></div></div>

<p>If a stored procedure returns a return value, then a return value parameter is required on the ADO command object.</p>
<p>Consider the following procedure:</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
</pre></td><td class="de1"><pre class="de1"><span class="kw1">create</span> <span class="kw1">procedure</span> TestProcedure2 <span class="kw1">as</span>
<span class="kw1">return</span> <span class="nu0">1</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">create procedure TestProcedure2 as
return 1</pre></div></div>

<p>To retrieve the return value in the stored procedure, you have to set up a parameter on the command object to store the return value:</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="asp"><thead><tr><td colspan="2"  class="head">ASP</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
</pre></td><td class="de1"><pre class="de1"><span class="kw2">var</span> oConn <span class="sy0">=</span> <span class="kw1">Server</span>.<span class="kw3">CreateObject</span><span class="br0">&#40;</span><span class="st0">&quot;ADODB.Connection&quot;</span><span class="br0">&#41;</span><span class="sy0">;</span>
oConn.<span class="kw3">Open</span><span class="br0">&#40;</span><span class="st0">&quot;Provider=SQLOLEDB; Data Source=ServerName; User Id=ID; Password=PASSWORD&quot;</span><span class="br0">&#41;</span><span class="sy0">;</span>
<span class="kw2">var</span> oCmd <span class="sy0">=</span> <span class="kw1">Server</span>.<span class="kw3">CreateObject</span><span class="br0">&#40;</span><span class="st0">&quot;ADODB.Command&quot;</span><span class="br0">&#41;</span><span class="sy0">;</span>
oCmd.<span class="me1">ActiveConnection</span> <span class="sy0">=</span> oConn<span class="sy0">;</span>
oCmd.<span class="me1">CommandType</span> <span class="sy0">=</span> adCmdStoredProc<span class="sy0">;</span>
oCmd.<span class="me1">CommandText</span> <span class="sy0">=</span> <span class="st0">&quot;TestProcedure2&quot;</span><span class="sy0">;</span>
oCmd.<span class="me1">Parameters</span>.<span class="me1">Append</span><span class="br0">&#40;</span>oCmd.<span class="me1">CreateParameter</span><span class="br0">&#40;</span><span class="st0">&quot;@returnValue&quot;</span>, adInteger, adParamReturnValue<span class="br0">&#41;</span><span class="br0">&#41;</span><span class="sy0">;</span>
oCmd.<span class="kw3">Execute</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
<span class="kw1">Response</span>.<span class="kw3">Write</span><span class="br0">&#40;</span><span class="st0">&quot;return value: &quot;</span> + oCmd.<span class="me1">Parameters</span><span class="br0">&#40;</span><span class="st0">&quot;@returnValue&quot;</span><span class="br0">&#41;</span>.<span class="me1">value</span><span class="br0">&#41;</span><span class="sy0">;</span>
oCmd.<span class="kw3">Close</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
oConn.<span class="kw3">Close</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">var oConn = Server.CreateObject("ADODB.Connection");
oConn.Open("Provider=SQLOLEDB; Data Source=ServerName; User Id=ID; Password=PASSWORD");
var oCmd = Server.CreateObject("ADODB.Command");
oCmd.ActiveConnection = oConn;
oCmd.CommandType = adCmdStoredProc;
oCmd.CommandText = "TestProcedure2";
oCmd.Parameters.Append(oCmd.CreateParameter("@returnValue", adInteger, adParamReturnValue));
oCmd.Execute();
Response.Write("return value: " + oCmd.Parameters("@returnValue").value);
oCmd.Close();
oConn.Close();</pre></div></div>

<p>Now, things get a little tricky if you have a recordset and a return value in the same procedure:</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
</pre></td><td class="de1"><pre class="de1"><span class="kw1">create</span> <span class="kw1">procedure</span> TestProcedure3 <span class="kw1">as</span>
<span class="kw1">select</span> <span class="nu0">1</span> <span class="br0">&#91;</span>testValue<span class="br0">&#93;</span> <span class="kw1">union</span>
<span class="kw1">select</span> <span class="nu0">2</span> <span class="br0">&#91;</span>testValue<span class="br0">&#93;</span> <span class="kw1">union</span>
<span class="kw1">select</span> <span class="nu0">3</span> <span class="br0">&#91;</span>testValue<span class="br0">&#93;</span> 
<span class="kw1">return</span> <span class="nu0">1</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">create procedure TestProcedure3 as
select 1 [testValue] union
select 2 [testValue] union
select 3 [testValue] 
return 1</pre></div></div>

<p>The recordset object will be populated correctly, but the return value parameter returns &#8220;undefined&#8221;:</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="asp"><thead><tr><td colspan="2"  class="head">ASP</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
</pre></td><td class="de1"><pre class="de1"><span class="kw2">var</span> oConn <span class="sy0">=</span> <span class="kw1">Server</span>.<span class="kw3">CreateObject</span><span class="br0">&#40;</span><span class="st0">&quot;ADODB.Connection&quot;</span><span class="br0">&#41;</span><span class="sy0">;</span>
oConn.<span class="kw3">Open</span><span class="br0">&#40;</span><span class="st0">&quot;Provider=SQLOLEDB; Data Source=ServerName; User Id=ID; Password=PASSWORD&quot;</span><span class="br0">&#41;</span><span class="sy0">;</span>
<span class="kw2">var</span> oCmd <span class="sy0">=</span> <span class="kw1">Server</span>.<span class="kw3">CreateObject</span><span class="br0">&#40;</span><span class="st0">&quot;ADODB.Command&quot;</span><span class="br0">&#41;</span><span class="sy0">;</span>
oCmd.<span class="me1">ActiveConnection</span> <span class="sy0">=</span> oConn<span class="sy0">;</span>
oCmd.<span class="me1">CommandType</span> <span class="sy0">=</span> adCmdStoredProc<span class="sy0">;</span>
oCmd.<span class="me1">CommandText</span> <span class="sy0">=</span> <span class="st0">&quot;TestProcedure2&quot;</span><span class="sy0">;</span>
oCmd.<span class="me1">Parameters</span>.<span class="me1">Append</span><span class="br0">&#40;</span>oCmd.<span class="me1">CreateParameter</span><span class="br0">&#40;</span><span class="st0">&quot;@returnValue&quot;</span>, adInteger, adParamReturnValue<span class="br0">&#41;</span><span class="br0">&#41;</span><span class="sy0">;</span>
<span class="kw2">var</span> oRS <span class="sy0">=</span> oCmd.<span class="kw3">Execute</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
<span class="kw1">Response</span>.<span class="kw3">Write</span><span class="br0">&#40;</span><span class="st0">&quot;return value: &quot;</span> + oCmd.<span class="me1">Parameters</span><span class="br0">&#40;</span><span class="st0">&quot;@returnValue&quot;</span><span class="br0">&#41;</span>.<span class="me1">value</span><span class="br0">&#41;</span><span class="sy0">;</span>
oCmd.<span class="kw3">Close</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
oConn.<span class="kw3">Close</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">var oConn = Server.CreateObject("ADODB.Connection");
oConn.Open("Provider=SQLOLEDB; Data Source=ServerName; User Id=ID; Password=PASSWORD");
var oCmd = Server.CreateObject("ADODB.Command");
oCmd.ActiveConnection = oConn;
oCmd.CommandType = adCmdStoredProc;
oCmd.CommandText = "TestProcedure2";
oCmd.Parameters.Append(oCmd.CreateParameter("@returnValue", adInteger, adParamReturnValue));
var oRS = oCmd.Execute();
Response.Write("return value: " + oCmd.Parameters("@returnValue").value);
oCmd.Close();
oConn.Close();</pre></div></div>

<p>One thing that may seem even more odd is that if you do not assign the recordset returned by the procedure to a variable (oRS in the example above), then the returnValue parameter contains the correct value.</p>
<p>The reason for this is that the recordset returned by the stored procedure must be closed before you can access the returnValue parameter.  I find using the GetRows() method to be extremely handy for this as it allows you to pull all the recordset information into an ASP array and close the recordset immediately afterward, giving you access to both the recordset information and the return value at the same time.</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="asp"><thead><tr><td colspan="2"  class="head">ASP</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
</pre></td><td class="de1"><pre class="de1"><span class="kw2">var</span> oConn <span class="sy0">=</span> <span class="kw1">Server</span>.<span class="kw3">CreateObject</span><span class="br0">&#40;</span><span class="st0">&quot;ADODB.Connection&quot;</span><span class="br0">&#41;</span><span class="sy0">;</span>
oConn.<span class="kw3">Open</span><span class="br0">&#40;</span><span class="st0">&quot;Provider=SQLOLEDB; Data Source=ServerName; User Id=ID; Password=PASSWORD&quot;</span><span class="br0">&#41;</span><span class="sy0">;</span>
<span class="kw2">var</span> oCmd <span class="sy0">=</span> <span class="kw1">Server</span>.<span class="kw3">CreateObject</span><span class="br0">&#40;</span><span class="st0">&quot;ADODB.Command&quot;</span><span class="br0">&#41;</span><span class="sy0">;</span>
oCmd.<span class="me1">ActiveConnection</span> <span class="sy0">=</span> oConn<span class="sy0">;</span>
oCmd.<span class="me1">CommandType</span> <span class="sy0">=</span> adCmdStoredProc<span class="sy0">;</span>
oCmd.<span class="me1">CommandText</span> <span class="sy0">=</span> <span class="st0">&quot;TestProcedure2&quot;</span><span class="sy0">;</span>
oCmd.<span class="me1">Parameters</span>.<span class="me1">Append</span><span class="br0">&#40;</span>oCmd.<span class="me1">CreateParameter</span><span class="br0">&#40;</span><span class="st0">&quot;@returnValue&quot;</span>, adInteger, adParamReturnValue<span class="br0">&#41;</span><span class="br0">&#41;</span><span class="sy0">;</span>
<span class="kw2">var</span> oRS <span class="sy0">=</span> oCmd.<span class="kw3">Execute</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
<span class="kw1">if</span> <span class="br0">&#40;</span>oRS.<span class="me1">RecordCount</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp;<span class="kw2">var</span> recordSetData <span class="sy0">=</span> oRS.<span class="me1">GetRows</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
<span class="br0">&#125;</span>
oRS.<span class="kw3">Close</span><span class="br0">&#40;</span><span class="br0">&#41;</span>
<span class="kw1">Response</span>.<span class="kw3">Write</span><span class="br0">&#40;</span><span class="st0">&quot;return value: &quot;</span> + oCmd.<span class="me1">Parameters</span><span class="br0">&#40;</span><span class="st0">&quot;@returnValue&quot;</span><span class="br0">&#41;</span>.<span class="me1">value</span><span class="br0">&#41;</span><span class="sy0">;</span>
oCmd.<span class="kw3">Close</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
oConn.<span class="kw3">Close</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">var oConn = Server.CreateObject("ADODB.Connection");
oConn.Open("Provider=SQLOLEDB; Data Source=ServerName; User Id=ID; Password=PASSWORD");
var oCmd = Server.CreateObject("ADODB.Command");
oCmd.ActiveConnection = oConn;
oCmd.CommandType = adCmdStoredProc;
oCmd.CommandText = "TestProcedure2";
oCmd.Parameters.Append(oCmd.CreateParameter("@returnValue", adInteger, adParamReturnValue));
var oRS = oCmd.Execute();
if (oRS.RecordCount) {
   var recordSetData = oRS.GetRows();
}
oRS.Close()
Response.Write("return value: " + oCmd.Parameters("@returnValue").value);
oCmd.Close();
oConn.Close();</pre></div></div>

]]></content:encoded>
			<wfw:commentRss>/index.php/webdev/serverprogramming/classicasp/using-asp-to-retrieve-a-recordset-and-re/feed/</wfw:commentRss>
		<slash:comments>4</slash:comments>
		</item>
		<item>
		<title>Export HTML table to Excel with grid lines</title>
		<link>/index.php/webdev/serverprogramming/aspnet/export-table-to-excel-with-grid-lines/</link>
		<comments>/index.php/webdev/serverprogramming/aspnet/export-table-to-excel-with-grid-lines/#comments</comments>
		<pubDate>Thu, 25 Jun 2009 17:47:45 +0000</pubDate>
		<dc:creator><![CDATA[kaht]]></dc:creator>
				<category><![CDATA[ASP.NET]]></category>
		<category><![CDATA[Classic ASP]]></category>
		<category><![CDATA[asp]]></category>
		<category><![CDATA[asp.net]]></category>
		<category><![CDATA[excel]]></category>

		<guid isPermaLink="false">/index.php/2009/06/export-table-to-excel-with-grid-lines/</guid>
		<description><![CDATA[A programmatic example of how to export an HTML file to excel while keeping grid lines visible.  This solution does not require the use of a COM object.]]></description>
				<content:encoded><![CDATA[<p>For a long time I have had to make web reports for our company that could be exported to excel. This is a fairly easy process. All you have to do is put your report in an HTML table and add the following 2 lines of code:</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="csharp"><thead><tr><td colspan="2"  class="head">C#</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
</pre></td><td class="de1"><pre class="de1">Response<span class="sy0">.</span><span class="me1">ContentType</span> <span class="sy0">=</span> <span class="st0">&quot;application/ms-excel&quot;</span><span class="sy0">;</span>
Response<span class="sy0">.</span><span class="me1">AddHeader</span><span class="br0">&#40;</span><span class="st0">&quot;content-disposition&quot;</span>, <span class="st0">&quot;attachment; filename=test.xls&quot;</span><span class="br0">&#41;</span><span class="sy0">;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">Response.ContentType = "application/ms-excel";
Response.AddHeader("content-disposition", "attachment; filename=test.xls");</pre></div></div>

<p>However, when the excel file is generated it has a nasty side effect of having all the gridlines hidden. They can easily be turned back on in excel by the following: Tools > Options > click gridlines checkbox.</p>
<p>Until today I put up with the gridlines being hidden. When I tried to search for a solution via google, most people suggested that it just wasn&#8217;t possible to generate the excel report with gridlines. Other people offered solutions that required you to run a COM object on the server to start an instance of excel in the background to create the file. However, after searching through a bunch of garbage and piecing together bits and pieces of non-working solutions, I finally got it to work. The trick is to set up your own custom XML settings, and add the &#8220;Panes&#8221; worksheet option. Here was the working solution:</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="csharp"><thead><tr><td colspan="2"  class="head">C#</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
</pre></td><td class="de1"><pre class="de1"><span class="kw1">using</span> <span class="co3">System</span><span class="sy0">;</span>
<span class="kw1">using</span> <span class="co3">System.Data</span><span class="sy0">;</span>
<span class="kw1">using</span> <span class="co3">System.Configuration</span><span class="sy0">;</span>
<span class="kw1">using</span> <span class="co3">System.Collections</span><span class="sy0">;</span>
<span class="kw1">using</span> <span class="co3">System.Web</span><span class="sy0">;</span>
<span class="kw1">using</span> <span class="co3">System.Web.Security</span><span class="sy0">;</span>
<span class="kw1">using</span> <span class="co3">System.Web.UI</span><span class="sy0">;</span>
<span class="kw1">using</span> <span class="co3">System.Web.UI.WebControls</span><span class="sy0">;</span>
<span class="kw1">using</span> <span class="co3">System.Web.UI.WebControls.WebParts</span><span class="sy0">;</span>
<span class="kw1">using</span> <span class="co3">System.Web.UI.HtmlControls</span><span class="sy0">;</span>
&nbsp;
<span class="kw1">namespace</span> excelGridlineTest
<span class="br0">&#123;</span>
&nbsp; &nbsp;<span class="kw1">public</span> <span class="kw1">partial</span> <span class="kw4">class</span> _Default <span class="sy0">:</span> <span class="kw5">System.<span class="me1">Web</span><span class="sy0">.</span><span class="me1">UI</span></span><span class="sy0">.</span><span class="me1">Page</span>
&nbsp; &nbsp;<span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; <span class="kw1">protected</span> <span class="kw4">void</span> Page_Load<span class="br0">&#40;</span><span class="kw4">object</span> sender, EventArgs e<span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;Response<span class="sy0">.</span><span class="me1">ContentType</span> <span class="sy0">=</span> <span class="st0">&quot;application/ms-excel&quot;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;Response<span class="sy0">.</span><span class="me1">AddHeader</span><span class="br0">&#40;</span><span class="st0">&quot;content-disposition&quot;</span>, <span class="st0">&quot;attachment; filename=test.xls&quot;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;Response<span class="sy0">.</span><span class="me1">Write</span><span class="br0">&#40;</span><span class="st0">&quot;&lt;html xmlns:x=&quot;</span>urn<span class="sy0">:</span>schemas<span class="sy0">-</span>microsoft<span class="sy0">-</span>com<span class="sy0">:</span>office<span class="sy0">:</span>excel<span class="st0">&quot;&gt;&quot;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;Response<span class="sy0">.</span><span class="me1">Write</span><span class="br0">&#40;</span><span class="st0">&quot;&lt;head&gt;&quot;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;Response<span class="sy0">.</span><span class="me1">Write</span><span class="br0">&#40;</span><span class="st0">&quot;&lt;meta http-equiv=&quot;</span>Content<span class="sy0">-</span>Type<span class="st0">&quot; content=&quot;</span>text<span class="sy0">/</span>html<span class="sy0">;</span>charset<span class="sy0">=</span>windows<span class="sy0">-</span><span class="nu0">1252</span><span class="st0">&quot;&gt;&quot;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;Response<span class="sy0">.</span><span class="me1">Write</span><span class="br0">&#40;</span><span class="st0">&quot;&lt;!--[if gte mso 9]&gt;&quot;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;Response<span class="sy0">.</span><span class="me1">Write</span><span class="br0">&#40;</span><span class="st0">&quot;&lt;xml&gt;&quot;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;Response<span class="sy0">.</span><span class="me1">Write</span><span class="br0">&#40;</span><span class="st0">&quot;&lt;x:ExcelWorkbook&gt;&quot;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;Response<span class="sy0">.</span><span class="me1">Write</span><span class="br0">&#40;</span><span class="st0">&quot;&lt;x:ExcelWorksheets&gt;&quot;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;Response<span class="sy0">.</span><span class="me1">Write</span><span class="br0">&#40;</span><span class="st0">&quot;&lt;x:ExcelWorksheet&gt;&quot;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span class="co1">//this line names the worksheet</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;Response<span class="sy0">.</span><span class="me1">Write</span><span class="br0">&#40;</span><span class="st0">&quot;&lt;x:Name&gt;gridlineTest&lt;/x:Name&gt;&quot;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;Response<span class="sy0">.</span><span class="me1">Write</span><span class="br0">&#40;</span><span class="st0">&quot;&lt;x:WorksheetOptions&gt;&quot;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span class="co1">//these 2 lines are what works the magic</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;Response<span class="sy0">.</span><span class="me1">Write</span><span class="br0">&#40;</span><span class="st0">&quot;&lt;x:Panes&gt;&quot;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;Response<span class="sy0">.</span><span class="me1">Write</span><span class="br0">&#40;</span><span class="st0">&quot;&lt;/x:Panes&gt;&quot;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;Response<span class="sy0">.</span><span class="me1">Write</span><span class="br0">&#40;</span><span class="st0">&quot;&lt;/x:WorksheetOptions&gt;&quot;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;Response<span class="sy0">.</span><span class="me1">Write</span><span class="br0">&#40;</span><span class="st0">&quot;&lt;/x:ExcelWorksheet&gt;&quot;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;Response<span class="sy0">.</span><span class="me1">Write</span><span class="br0">&#40;</span><span class="st0">&quot;&lt;/x:ExcelWorksheets&gt;&quot;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;Response<span class="sy0">.</span><span class="me1">Write</span><span class="br0">&#40;</span><span class="st0">&quot;&lt;/x:ExcelWorkbook&gt;&quot;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;Response<span class="sy0">.</span><span class="me1">Write</span><span class="br0">&#40;</span><span class="st0">&quot;&lt;/xml&gt;&quot;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;Response<span class="sy0">.</span><span class="me1">Write</span><span class="br0">&#40;</span><span class="st0">&quot;&lt;![endif]--&gt;&quot;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;Response<span class="sy0">.</span><span class="me1">Write</span><span class="br0">&#40;</span><span class="st0">&quot;&lt;/head&gt;&quot;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;Response<span class="sy0">.</span><span class="me1">Write</span><span class="br0">&#40;</span><span class="st0">&quot;&lt;body&gt;&quot;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;Response<span class="sy0">.</span><span class="me1">Write</span><span class="br0">&#40;</span><span class="st0">&quot;&lt;table&gt;&quot;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;Response<span class="sy0">.</span><span class="me1">Write</span><span class="br0">&#40;</span><span class="st0">&quot;&lt;tr&gt;&lt;td&gt;ID&lt;/td&gt;&lt;td&gt;Name&lt;/td&gt;&lt;td&gt;Balance&lt;/td&gt;&lt;/tr&gt;&quot;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;Response<span class="sy0">.</span><span class="me1">Write</span><span class="br0">&#40;</span><span class="st0">&quot;&lt;tr&gt;&lt;td&gt;1234&lt;/td&gt;&lt;td&gt;Al Bundy&lt;/td&gt;&lt;td&gt;45&lt;/td&gt;&lt;/tr&gt;&quot;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;Response<span class="sy0">.</span><span class="me1">Write</span><span class="br0">&#40;</span><span class="st0">&quot;&lt;tr&gt;&lt;td&gt;9876&lt;/td&gt;&lt;td&gt;Homer Simpson&lt;/td&gt;&lt;td&gt;-129&lt;/td&gt;&lt;/tr&gt;&quot;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;Response<span class="sy0">.</span><span class="me1">Write</span><span class="br0">&#40;</span><span class="st0">&quot;&lt;tr&gt;&lt;td&gt;5555&lt;/td&gt;&lt;td&gt;Peter Griffin&lt;/td&gt;&lt;td&gt;0&lt;/td&gt;&lt;/tr&gt;&quot;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;Response<span class="sy0">.</span><span class="me1">Write</span><span class="br0">&#40;</span><span class="st0">&quot;&lt;/table&gt;&quot;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;Response<span class="sy0">.</span><span class="me1">Write</span><span class="br0">&#40;</span><span class="st0">&quot;&lt;/body&gt;&quot;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;Response<span class="sy0">.</span><span class="me1">Write</span><span class="br0">&#40;</span><span class="st0">&quot;&lt;/html&gt;&quot;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp; &nbsp;<span class="br0">&#125;</span>
<span class="br0">&#125;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">using System;
using System.Data;
using System.Configuration;
using System.Collections;
using System.Web;
using System.Web.Security;
using System.Web.UI;
using System.Web.UI.WebControls;
using System.Web.UI.WebControls.WebParts;
using System.Web.UI.HtmlControls;
 
namespace excelGridlineTest
{
   public partial class _Default : System.Web.UI.Page
   {
      protected void Page_Load(object sender, EventArgs e)
      {
         Response.ContentType = "application/ms-excel";
         Response.AddHeader("content-disposition", "attachment; filename=test.xls");
         Response.Write("&lt;html xmlns:x="urn:schemas-microsoft-com:office:excel"&gt;");
         Response.Write("&lt;head&gt;");
         Response.Write("&lt;meta http-equiv="Content-Type" content="text/html;charset=windows-1252"&gt;");
         Response.Write("&lt;!--[if gte mso 9]&gt;");
         Response.Write("&lt;xml&gt;");
         Response.Write("&lt;x:ExcelWorkbook&gt;");
         Response.Write("&lt;x:ExcelWorksheets&gt;");
         Response.Write("&lt;x:ExcelWorksheet&gt;");
         //this line names the worksheet
         Response.Write("&lt;x:Name&gt;gridlineTest&lt;/x:Name&gt;");
         Response.Write("&lt;x:WorksheetOptions&gt;");
         //these 2 lines are what works the magic
         Response.Write("&lt;x:Panes&gt;");
         Response.Write("&lt;/x:Panes&gt;");
         Response.Write("&lt;/x:WorksheetOptions&gt;");
         Response.Write("&lt;/x:ExcelWorksheet&gt;");
         Response.Write("&lt;/x:ExcelWorksheets&gt;");
         Response.Write("&lt;/x:ExcelWorkbook&gt;");
         Response.Write("&lt;/xml&gt;");
         Response.Write("&lt;![endif]--&gt;");
         Response.Write("&lt;/head&gt;");
         Response.Write("&lt;body&gt;");
         Response.Write("&lt;table&gt;");
         Response.Write("&lt;tr&gt;&lt;td&gt;ID&lt;/td&gt;&lt;td&gt;Name&lt;/td&gt;&lt;td&gt;Balance&lt;/td&gt;&lt;/tr&gt;");
         Response.Write("&lt;tr&gt;&lt;td&gt;1234&lt;/td&gt;&lt;td&gt;Al Bundy&lt;/td&gt;&lt;td&gt;45&lt;/td&gt;&lt;/tr&gt;");
         Response.Write("&lt;tr&gt;&lt;td&gt;9876&lt;/td&gt;&lt;td&gt;Homer Simpson&lt;/td&gt;&lt;td&gt;-129&lt;/td&gt;&lt;/tr&gt;");
         Response.Write("&lt;tr&gt;&lt;td&gt;5555&lt;/td&gt;&lt;td&gt;Peter Griffin&lt;/td&gt;&lt;td&gt;0&lt;/td&gt;&lt;/tr&gt;");
         Response.Write("&lt;/table&gt;");
         Response.Write("&lt;/body&gt;");
         Response.Write("&lt;/html&gt;");
      }
   }
}</pre></div></div>

<p>Got a web related question?  Discuss it in the forums: http://forum.lessthandot.com/</p>
]]></content:encoded>
			<wfw:commentRss>/index.php/webdev/serverprogramming/aspnet/export-table-to-excel-with-grid-lines/feed/</wfw:commentRss>
		<slash:comments>22</slash:comments>
		</item>
	</channel>
</rss>
