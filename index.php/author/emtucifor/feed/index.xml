<?xml version="1.0" encoding="UTF-8"?><rss version="2.0"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:atom="http://www.w3.org/2005/Atom"
	xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
	xmlns:slash="http://purl.org/rss/1.0/modules/slash/"
	>

<channel>
	<title>Erik &#8211; LessthanDot</title>
	<atom:link href="/index.php/author/emtucifor/feed/" rel="self" type="application/rss+xml" />
	<link>/</link>
	<description>A Technical Community for IT Professionals</description>
	<lastBuildDate>Sat, 09 Mar 2019 12:50:36 +0000</lastBuildDate>
	<language>en-US</language>
	<sy:updatePeriod>hourly</sy:updatePeriod>
	<sy:updateFrequency>1</sy:updateFrequency>
	<generator>https://wordpress.org/?v=4.6.1</generator>
	<item>
		<title>Convenient ad-hoc bcp table loading</title>
		<link>/index.php/datamgmt/dbadmin/mssqlserveradmin/convenient-ad-hoc-bcp-table/</link>
		<comments>/index.php/datamgmt/dbadmin/mssqlserveradmin/convenient-ad-hoc-bcp-table/#comments</comments>
		<pubDate>Sat, 04 Feb 2012 00:00:00 +0000</pubDate>
		<dc:creator><![CDATA[Erik]]></dc:creator>
				<category><![CDATA[Microsoft SQL Server]]></category>
		<category><![CDATA[Microsoft SQL Server Admin]]></category>

		<guid isPermaLink="false">/index.php/2012/02/convenient-ad-hoc-bcp-table/</guid>
		<description><![CDATA[Many times I am given an Excel file, or have a data source that makes it easy to paste into Excel, and I need to use the data in my database for a one-time purpose of updating or checking other data. It's not worth creating an SSIS package, and it's not&#8230;]]></description>
				<content:encoded><![CDATA[<p>Many times I am given an Excel file, or have a data source that makes it easy to paste into Excel, and I need to use the data in my database for a one-time purpose of updating or checking other data. It&#8217;s not worth creating an SSIS package, and it&#8217;s not even worth using a wizard in SSMS. So generally I use bcp as a very fast method.</p>
<p>To do that, I quickly create a staging table in my database, then save the Excel file as tab-delimited.</p>
<p>Then I have to go play with bcp and figure out the syntax yet again, since I don&#8217;t do it often enough to have made it unthinkingly automatic. Recently I got tired of these repeated lookups and created the following batch file to help out:</p>
<p><span style="font-family: courier new,courier;">@echo off<br />:top<br />if .%1==. goto end<br />echo Ready to import file to SqlServerName, DB DBName:<br />echoÂ  %1<br />set /P tablename=Type destination table name and press Enter: <br />osql -S SqlServerName -d DBName</span><span style="font-family: courier new,courier;"> </span><span style="font-family: courier new,courier;">-E -Q &#8220;truncate table %tablename%&#8221;<br />bcp DBName.%tablename% in %1 -S SqlServername -T -c<br />echo.<br />shift<br />goto top<br />:end<br />set tablename=<br />pause</span></p>
<p>Name the batch file &#8220;SqlServerName DBName import replace (drop file).bat&#8221;.</p>
<p>Now in Windows Explorer, just drag any file you want to import to your database onto the batch file. When prompted, type in the schema and table name you want it loaded to, and press Enter. You&#8217;ll get a nice pause to see what the result was so you can fix it if not successful. It even supports dropping multiple files, and you&#8217;ll be asked for a destination table name for each file.</p>
<p>If you find yourself needing to load a text file to a particular table over and over, just make a batch file specific to that text file, and you can drag-and-drop your imports super easily.</p>
<p>You can of course customize the batch file to do anything you want. To prompt for server name, database name, username, password, or anything you like. And you won&#8217;t have to look up the syntax for bcp one more blasted time!</p>
]]></content:encoded>
			<wfw:commentRss>/index.php/datamgmt/dbadmin/mssqlserveradmin/convenient-ad-hoc-bcp-table/feed/</wfw:commentRss>
		<slash:comments>1</slash:comments>
		</item>
		<item>
		<title>SQL Query Commenting/Uncommenting Quick Tip</title>
		<link>/index.php/datamgmt/dbprogramming/sql-query-commenting-uncommenting-quick/</link>
		<comments>/index.php/datamgmt/dbprogramming/sql-query-commenting-uncommenting-quick/#comments</comments>
		<pubDate>Fri, 11 Dec 2009 17:28:37 +0000</pubDate>
		<dc:creator><![CDATA[Erik]]></dc:creator>
				<category><![CDATA[Database Programming]]></category>
		<category><![CDATA[Microsoft SQL Server]]></category>

		<guid isPermaLink="false">/index.php/2009/12/sql-query-commenting-uncommenting-quick/</guid>
		<description><![CDATA[If you have multiple queries in one SQL query file, and you are switching around between which ones you want to run at any one time, there is an easy way to do this. The scenario I&#8217;m thinking of is something like when you&#8217;re solving a SQL puzzle/challenge and keep trying new ideas and query [&#8230;]]]></description>
				<content:encoded><![CDATA[<p>If you have multiple queries in one SQL query file, and you are switching around between which ones you want to run at any one time, there is an easy way to do this.</p>
<p>The scenario I&#8217;m thinking of is something like when you&#8217;re solving a SQL puzzle/challenge and keep trying new ideas and query versions. You don&#8217;t want to delete your old queries because they are useful for reference or to copy and paste parts of them, but you don&#8217;t want to run them all the time. Especially during performance tweaking, you want to be able to quickly comment out the worst queries and keep pasting in new versions of the fastest queries.</p>
<p>Normally this would require either highlighting entire queries to comment/uncomment them (Ctrl-Shift-C/Ctrl-Shift-U in Query Analyzer or Ctrl-K:Ctrl-C/Ctrl-K:Ctrl-U in SSMS); adding or removing /* and */ at the top and bottom of the query; or highlighting just the portions of the code that you want to run each time, which is a pain and can be complicated if you are using table variables since your initialization code at the top has to run each time.</p>
<p>So try this!</p>
<p>Put &#8211;/* at the top of your query and &#8211;*/ at the bottom:</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
</pre></td><td class="de1"><pre class="de1"><span class="co1">--/* Test Query #3 (Gorp Method)</span>
<span class="kw1">SELECT</span> <span class="sy0">*</span>
<span class="kw1">FROM</span> Blah
<span class="kw1">WHERE</span> Gorp <span class="sy0">=</span> <span class="nu0">1</span>
<span class="co1">--*/</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">--/* Test Query #3 (Gorp Method)
SELECT *
FROM Blah
WHERE Gorp = 1
--*/</pre></div></div>

<p>Notice that the query is NOT commented out.</p>
<p>Now, to toggle the whole query as commented or not, just uncomment the first line:</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
</pre></td><td class="de1"><pre class="de1"><span class="coMULTI">/* Test Query #3 (Gorp Method)</span>
<span class="coMULTI">SELECT *</span>
<span class="coMULTI">FROM Blah</span>
<span class="coMULTI">WHERE Gorp = 1</span>
<span class="coMULTI">--*/</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">/* Test Query #3 (Gorp Method)
SELECT *
FROM Blah
WHERE Gorp = 1
--*/</pre></div></div>

<p>I just hit on this method yesterday and I&#8217;m really enjoying it. It provides a natural place to put a query comment, you only have to put the block comments in once, and then you can use your comment/uncomment shortcuts on just a single line to toggle an entire block of code! Just keep in mind that the action IS reversed: you comment to uncomment and you uncomment to comment.</p>
]]></content:encoded>
			<wfw:commentRss>/index.php/datamgmt/dbprogramming/sql-query-commenting-uncommenting-quick/feed/</wfw:commentRss>
		<slash:comments>4</slash:comments>
		</item>
		<item>
		<title>Undetectable Distributed Deadlocks</title>
		<link>/index.php/datamgmt/dbprogramming/undetectable-distributed-deadlocks/</link>
		<comments>/index.php/datamgmt/dbprogramming/undetectable-distributed-deadlocks/#comments</comments>
		<pubDate>Fri, 13 Nov 2009 22:59:13 +0000</pubDate>
		<dc:creator><![CDATA[Erik]]></dc:creator>
				<category><![CDATA[Database Programming]]></category>
		<category><![CDATA[Microsoft SQL Server]]></category>

		<guid isPermaLink="false">/index.php/2009/11/undetectable-distributed-deadlocks/</guid>
		<description><![CDATA[I believe I have discovered a deadlock situation that SQL Server is not able to detect, so a perpetual block occurs. A deadlock is nothing more than mutual blocking. Blocking is when a process is forced to wait for a resource while another process exclusively accesses it (where the exclusivity is managed through locks). Mutual [&#8230;]]]></description>
				<content:encoded><![CDATA[<p>I believe I have discovered a deadlock situation that SQL Server is not able to detect, so a perpetual block occurs.</p>
<p>A deadlock is nothing more than mutual blocking. Blocking is when a process is forced to wait for a resource while another process exclusively accesses it (where the exclusivity is managed through locks). Mutual blocking is when both processes have a lock on a resource the other is asking for. Neither can proceed, but neither will release its lock.</p>
<p>Normally, when SQL server detects this kind of mutual block, it picks one process as the &#8220;victim&#8221; and kills it, rolling back its work. This also releases any locks it had and allows the other process to acquire its previously blocked request, resolving the deadlock.</p>
<p>But what if the two resources in question are on separate servers? For SQL Server to detect deadlocks, it has to have enough information to see that a pattern of blocks is mutual.</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
</pre></td><td class="de1"><pre class="de1"><span class="co1">--Query 1</span>
<span class="kw1">UPDATE</span> B
<span class="kw1">SET</span> B.<span class="me1">Name</span> <span class="sy0">=</span> A.<span class="me1">Name</span>
<span class="kw1">FROM</span>
&nbsp; &nbsp;TableA A
&nbsp; &nbsp;<span class="kw1">INNER</span> <span class="sy0">JOIN</span> LinkedServer.<span class="me1">DB1</span>.<span class="me1">dbo</span>.<span class="me1">TableB</span> B <span class="kw1">ON</span> A.<span class="me1">ID</span> <span class="sy0">=</span> B.<span class="me1">ID</span>
&nbsp;
<span class="co1">--Query 2</span>
<span class="kw1">UPDATE</span> B
<span class="kw1">SET</span> B.<span class="me1">Name</span> <span class="sy0">=</span> A.<span class="me1">Name</span>
<span class="kw1">FROM</span>
&nbsp; &nbsp;LinkedServer.<span class="me1">DB1</span>.<span class="me1">dbo</span>.<span class="me1">TableB</span> B
&nbsp; &nbsp;<span class="kw1">INNER</span> <span class="sy0">JOIN</span> TableA A <span class="kw1">ON</span> B.<span class="me1">ID</span> <span class="sy0">=</span> A.<span class="me1">ID</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">--Query 1
UPDATE B
SET B.Name = A.Name
FROM
   TableA A
   INNER JOIN LinkedServer.DB1.dbo.TableB B ON A.ID = B.ID

--Query 2
UPDATE B
SET B.Name = A.Name
FROM
   LinkedServer.DB1.dbo.TableB B
   INNER JOIN TableA A ON B.ID = A.ID</pre></div></div>

<p>Now, let&#8217;s say that locks for these two queries are granted in this order: query 1 acquires a lock on TableA before Table B, but query 2 acquires a lock on TableB before TableA. Even though the example I&#8217;m giving here may not be the greatest, the possibility is not so unlikely, and I&#8217;m sure there are plenty of situations out in the wild where my suggested scenario is possible.</p>
<p>Locks are not granted all at once, nor can one assume that the final lock used for an update is granted first. Many times a less exclusive lock is acquired and then the lock&#8217;s exclusiveness is increased or specificity is broadened, and that&#8217;s all that&#8217;s required to cause a deadlock. See <a href=http://www.sqlmag.com/article/articleid/95538/95538.html>Deadlocks with Custom Sequence</a> for one example of surprising deadlocks occurring because of an unusual transaction isolation level. </p>
<p>Given the above hypothetical lock order, when each query&#8217;s process requests a lock on the other table to perform its update, it will be blocked. But each server involved only has half the picture and can only see a simple block, without knowing it&#8217;s mutual (because the other half is occurring on the other side of the linked server). So it is a perpetual mutual block and no deadlock is detected.</p>
<p>The next time I am working heavily with linked servers you can be sure I&#8217;ll be thinking about this and coming up with a way to test if such a &#8220;distributed deadlock&#8221; really can occur, and if so, what to do about it.</p>
<p>In closing, I confess that it&#8217;s possible that DTC could have provisions for sharing lock information, so perhaps a distributed deadlock will be properly detected. But I have my doubts about that.</p>
]]></content:encoded>
			<wfw:commentRss>/index.php/datamgmt/dbprogramming/undetectable-distributed-deadlocks/feed/</wfw:commentRss>
		<slash:comments>2</slash:comments>
		</item>
		<item>
		<title>Intranet Makeover: Virtual Web Sites with Custom DNS Names</title>
		<link>/index.php/webdev/serveradmin/intranet-makeover/</link>
		<comments>/index.php/webdev/serveradmin/intranet-makeover/#comments</comments>
		<pubDate>Fri, 23 Oct 2009 13:22:46 +0000</pubDate>
		<dc:creator><![CDATA[Erik]]></dc:creator>
				<category><![CDATA[Microsoft IIS]]></category>
		<category><![CDATA[Server Admin]]></category>

		<guid isPermaLink="false">/index.php/2009/10/intranet-makeover/</guid>
		<description><![CDATA[Why make your users interact with URLs such as: http://companyweb1/mainsite/repository/main.html when they could just type repository? The Mess Your corporate intranet probably has a lot of different resources on it. Wherever those are, users have to gain access to them somehow. And there are several issues that can reduce ease of access, whether the resources [&#8230;]]]></description>
				<content:encoded><![CDATA[<p>Why make your users interact with URLs such as: <a href="/">http://companyweb1/mainsite/repository/main.html</a> when they could just type <a href="/">repository</a>?</p>
<h2>The Mess</h2>
<p>Your corporate intranet probably has a lot of different resources on it. Wherever those are, users have to gain access to them somehow. And there are several issues that can reduce ease of access, whether the resources are whole web sites or individual web pages.</p>
<p>If resources are mainly grouped together on one site, then you have to deal with problems like:</p>
<ul>
<li>A possible unfriendly server name that people have to remember or bookmark.</li>
<li>Paths and subpaths and page names.</li>
<li>Navigating to a single launch page, then searching for or having to click through to the desired resource.</li>
<li>The more resources there are the more bookmarks there have to be or the longer the list of items.</li>
<li>Conflicting page names prevent you from using the default content page for some destinations.</li>
</ul>
<p>There are additional problems, whether your resources are mostly on one site or not:</p>
<ul>
<li>A server moves or needs its name changed, so everyone has to update their URLs or change their process to find what they need.</li>
<li>You want to combine web sites from two servers to one, or split them apart from one server to two.</li>
</ul>
<p>But there is a very simple and easy to implement idea that can help all this.</p>
<h2>The Solution</h2>
<p>Use virtual web sites with custom DNS names!</p>
<p>Say you have a web site that everyone knows as the document repository. Choose a cool, short name for it that people will remember and isn&#8217;t hard to type. How about &#8220;repository&#8221;? Great, then. In your DNS, add &#8220;repository&#8221; as a CNAME for the current DNS name that everyone&#8217;s using (say, companyweb1). It literally takes a few seconds for a DNS admin to add an entry like this.</p>
<p>Then, run your sitesâwherever they areâusing virtual hosting with the new DNS name.</p>
<p>The finishing touch is to set the default content page correctly so the trailing &#8220;main.html&#8221; in the URL can be eliminated. Since it&#8217;s now its own site, you shouldn&#8217;t have conflicts with other sites.</p>
<p>If you were previously using a virtual folder, you just make the new site&#8217;s root document the same folder. Some testing is a good idea because the site needs to function properly in its new location, especially links needing to use the correct name and path (but I personally think that a well-designed site could probably move over with no changes). You can actually run both the new and old access methods at the same time to do testing and ensure a smooth transition.</p>
<p>Now getting to the resource is much more simple. People can visit your site by launching their browser and typing &#8220;repository&#8221; in the address. That&#8217;s it! Nothing else is needed. They&#8217;re in the site they want.</p>
<h2>IIS 6.0 Virtual Hosting Instructions</h2>
<p>You can set up virtual hosting at site setup time, or convert to using it later.</p>
<p>At site setup time, when running the Web Site Creation Wizard, on the IP Address and Port Settings wizard page, put the desired DNS name in the &#8220;Host header for this Web site&#8221; box.</p>
<p>To modify an existing site, get properties on it, then go to Web Site -> IP Address Advanced -> select an item in the list and Edit it -> Host Header value.</p>
<p>Virtual hosting for other web servers or IIS versions is undoubtedly easy, you just have to look up how to do it.</p>
<h2>A Couple More Tricks</h2>
<p>Here are some additional ways to use virtual sites and custom DNS names.</p>
<ul>
<li style="margin-bottom:1em;">For all my web sites now, I put all the database connection strings for all my environments (prod/test/dev/local/etc) in a file within the site. Then the web application reads that file and uses the host header name to figure out which connection string to use. So after copying my test site to production I don&#8217;t have to change a thing! The production site connects to the production database because it was reached with the production name.
</li>
<li style="margin-bottom:1em;">It becomes so easy to set up those additional environments, as well. &#8220;repositoryt&#8221; or &#8220;repdev&#8221; can even be run on the same web server as the production site. Or somewhere else. No user has to know or care about that stuff.</li>
<li>As long as you can set up the virtual hosting for the web server, you can get the site working without a DNS entry by adding the desired name to your hosts file (in Windows anyway). You can pick a completely new name, or use an existing DNS name to override it so only your computer sees a different site than others. Maybe you want to test the new site, or maybe you just want a &#8220;secret&#8221; site accessible only by someone using your computer (until someone finds the site on the web server and decides to see what it is).</li>
</ul>
<h2>One Gotcha</h2>
<p>The one caveat for you is that if you are using Kerberos integrated authentication and doing delegation, where your web site is connecting over the <strong>network</strong> as the windows user visiting the web site, then you have to do some extra work with the <a href="http://www.microsoft.com/downloads/details.aspx?FamilyID=5fd831fd-ab77-46a3-9cfe-ff01d29e5c46&amp;DisplayLang=en">SetSPN Utility</a> so that the new DNS name gains the permissions of the server (under its real name).</p>
<p>However, if you&#8217;re using NTLM integrated authentication and doing impersonation, where your web site is only accessing resources on the <strong>local</strong> web server as the visiting windows user, then you should have no problems.</p>
<p>I hope this tip is useful to you.</p>
<p>Erik</p>
]]></content:encoded>
			<wfw:commentRss>/index.php/webdev/serveradmin/intranet-makeover/feed/</wfw:commentRss>
		<slash:comments>3</slash:comments>
		</item>
		<item>
		<title>Including an Aggregated Column&#8217;s Related Values</title>
		<link>/index.php/datamgmt/dbprogramming/mssqlserver/including-an-aggregated-column-s-related/</link>
		<comments>/index.php/datamgmt/dbprogramming/mssqlserver/including-an-aggregated-column-s-related/#comments</comments>
		<pubDate>Sat, 18 Jul 2009 04:51:05 +0000</pubDate>
		<dc:creator><![CDATA[Erik]]></dc:creator>
				<category><![CDATA[Microsoft SQL Server]]></category>

		<guid isPermaLink="false">/index.php/2009/07/including-an-aggregated-column-s-related/</guid>
		<description><![CDATA[In this co-authored blog post, Naomi and I will present six different solutions to the commonly experienced query problem of how to include an aggregated column's related values - values from the same row in the group that provided the displayed value.&#8230;]]></description>
				<content:encoded><![CDATA[<p>In this co-authored blog post, <a href="http://forum.lessthandot.com/memberlist.php?mode=viewprofile&amp;u=314">Naomi</a> and I will present six different solutions to the commonly experienced query problem of how to include an aggregated column&#8217;s related values &#8211; values from the same row in the group that provided the displayed value.</p>
<h2>Background</h2>
<p>It&#8217;s a fairly simple query to select the maximum date for each group in a GROUP BY query. You just throw in a Max() on the date column and then GROUP BY the other columns. For example,</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
</pre></td><td class="de1"><pre class="de1"><span class="kw1">SELECT</span>
&nbsp; &nbsp;CustomerID,
&nbsp; &nbsp;LastOrderDate <span class="sy0">=</span> <span class="kw2">Max</span><span class="br0">&#40;</span>OrderDate<span class="br0">&#41;</span>
<span class="kw1">FROM</span> Orders
<span class="kw1">GROUP</span> <span class="kw1">BY</span> CustomerID</pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">SELECT
   CustomerID,
   LastOrderDate = Max(OrderDate)
FROM Orders
GROUP BY CustomerID</pre></div></div>

<p>But a common query need is to include other column values from the same row as the most recent date. Unfortunately, putting aggregates on other columns doesn&#8217;t work:</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
</pre></td><td class="de1"><pre class="de1"><span class="kw1">SELECT</span>
&nbsp; &nbsp;CustomerID,
&nbsp; &nbsp;LastOrderDate <span class="sy0">=</span> <span class="kw2">Max</span><span class="br0">&#40;</span>OrderDate<span class="br0">&#41;</span>,
&nbsp; &nbsp;LastSubTotal <span class="sy0">=</span> <span class="kw2">Max</span><span class="br0">&#40;</span>SubTotal<span class="br0">&#41;</span> <span class="co1">-- wrong: won't be the subtotal from Max(OrderDate), but the greatest order total ever placed by this customer.</span>
<span class="kw1">FROM</span> Orders
<span class="kw1">GROUP</span> <span class="kw1">BY</span> CustomerID</pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">SELECT
   CustomerID,
   LastOrderDate = Max(OrderDate),
   LastSubTotal = Max(SubTotal) -- wrong: won't be the subtotal from Max(OrderDate), but the greatest order total ever placed by this customer.
FROM Orders
GROUP BY CustomerID</pre></div></div>

<p>It&#8217;s almost like you need some kind of Max(OrderDate->SubTotal).</p>
<p>Note that the desired results are fairly easy in MS Access using the aggregate functions Last and First:</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
</pre></td><td class="de1"><pre class="de1"><span class="kw1">SELECT</span>
&nbsp; &nbsp;CustomerID,
&nbsp; &nbsp;LastOrderDate <span class="sy0">=</span> <span class="kw1">Last</span><span class="br0">&#40;</span>OrderDate<span class="br0">&#41;</span>,
&nbsp; &nbsp;SubTotal <span class="sy0">=</span> <span class="kw1">Last</span><span class="br0">&#40;</span>SubTotal<span class="br0">&#41;</span>
<span class="kw1">FROM</span> Orders
<span class="kw1">GROUP</span> <span class="kw1">BY</span> CustomerID
<span class="kw1">ORDER</span> <span class="kw1">BY</span> OrderDate</pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">SELECT
   CustomerID,
   LastOrderDate = Last(OrderDate),
   SubTotal = Last(SubTotal)
FROM Orders
GROUP BY CustomerID
ORDER BY OrderDate</pre></div></div>

<p>What happens in Access is that the Last() aggregate combines with the ORDER BY clause to select values from the row containing the most recent Order Date.</p>
<p>However, these functions are not available in SQL Server, likely because the query engine only does ordering at the very end, after GROUP BY and HAVING are processed. While this may seem like a defect, it is really a deliberate design trade-off, with compensations elsewhere in the engine.</p>
<h2>Test Case</h2>
<p>In order to have enough data to make results significant and also to let others run the same queries against the same data, we are going to use the AdventureWorks sample database.</p>
<p>In our scenario, we want to show customers&#8217; account numbers along with the date and subtotal of their most recent order. We&#8217;re keeping it simple for clarity, but note that you can include as many columns as you like. In a later installment we&#8217;ll do these same queries with more columns and different scenarios, and will expand on some of the queries a bit. We&#8217;ll also discuss performance to help you select between them.</p>
<p>Note that the aggregate doesn&#8217;t have to be on a date. Perhaps you want to know the date of the largest dollar value order per customer. In this case, you&#8217;d be doing a Max() on the order value instead of a date, and you would most certainly run into duplicates. Keep this in mind when reading below and when developing your own queries.</p>
<p>The basic query we&#8217;ll be working with is:</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
</pre></td><td class="de1"><pre class="de1"><span class="kw1">SELECT</span>
&nbsp; &nbsp;C.<span class="me1">AccountNumber</span>,
&nbsp; &nbsp;LastOrderDate <span class="sy0">=</span> <span class="kw2">Max</span><span class="br0">&#40;</span>O.<span class="me1">OrderDate</span><span class="br0">&#41;</span>
<span class="kw1">FROM</span>
&nbsp; &nbsp;Sales.<span class="me1">Customer</span> C
&nbsp; &nbsp;<span class="kw1">INNER</span> <span class="sy0">JOIN</span> Sales.<span class="me1">SalesOrderHeader</span> O <span class="kw1">ON</span> C.<span class="me1">CustomerID</span> <span class="sy0">=</span> O.<span class="me1">CustomerID</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">SELECT
   C.AccountNumber,
   LastOrderDate = Max(O.OrderDate)
FROM
   Sales.Customer C
   INNER JOIN Sales.SalesOrderHeader O ON C.CustomerID = O.CustomerID</pre></div></div>

<p>What we want to do is also return the Subtotal value from the same row as the LastOrderDate.</p>
<h3>Some Approaches to the Problem</h3>
<p>We know of only a few basic approaches to the problem:</p>
<div>&#8211; <strong>Key Search</strong> &#8212; use the LastOrderDate column as a key (along with customer AccountNumber) to locate the correct rows in the OrderHeader table. This requires an extra join and also the key isn&#8217;t unique, so we might have to perform another Max() on a unique column and join another time, with the new column added to the key.</p>
<p>&#8211; <strong>Number and Filter</strong> &#8212; select all rows from OrderHeader, and number them in a way exploitable to correctly filter out unwanted rows. Observe that this won&#8217;t require hitting the table again, but it could use a lot of extra resources to temporarily materialize more data. Skipping over obvious poor choices such as a temp table with an ordered update or a cursor, options might be a windowing function (SQL 2005 and up) or a temp table with an identity column (SQL 2000).</p>
<p>&#8211; <strong>Simulate MS Access</strong> &#8212; simulate how MS Access works somehow, getting only the data we need in a single table access (seek or scan). Let&#8217;s imagine how the SQL engine already performs a Max. As it touches each row, it must store the intermediate value that is the best candidate so far for all the seen values. And it has to have one of these per group, per column. All that is needed is that every time it writes the Max() candidate into its temporary storage, it also writes the extra column we want into the same data.</p>
<p>How could we do this ourselves? We need to ORDER BY OrderDate but actually yield SubTotal. SubTotal clearly won&#8217;t sort in the correct order by itself. Remembering Max(OrderDate->SubTotal), what if it wasn&#8217;t by itself, and somehow contained the OrderDate, too, to make it sort properly? So here we have an idea about packing both columns into a single value that sorts correctly yet can still be used to get the SubTotal back out. When the engine does its Max() bit as usual on the date and stores the best candidate, it will also be forced to store the other value at the same time (which we can extract later).</p></div>
<p>So let&#8217;s use those ideas and turn them into real queries. Unless otherwise stated, queries will work with SQL Server 2000.</p>
<h2>Key Search</h2>
</p>
<h3>1. Correlated Subquery</h3>
<ul>
<li>Relies on unique order dates to avoid selecting multiple rows per customer.</li>
<li>Correlated subqueries perform well with small datasets and badly with large datasets (though better with SQL 2005 and 2008 because they can sometimes get converted to real joins).</li>
<li>Performance degrades geometrically as rows increase.</li>
<li>Does not handle NULLs correctly.</li>
</ul>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
</pre></td><td class="de1"><pre class="de1"><span class="kw1">SELECT</span>
&nbsp; &nbsp;C.<span class="me1">AccountNumber</span>,
&nbsp; &nbsp;O.<span class="me1">OrderDate</span>,
&nbsp; &nbsp;O.<span class="me1">SubTotal</span>
<span class="kw1">FROM</span>
&nbsp; &nbsp;Sales.<span class="me1">Customer</span> C
&nbsp; &nbsp;<span class="kw1">INNER</span> <span class="sy0">JOIN</span> Sales.<span class="me1">SalesOrderHeader</span> O <span class="kw1">ON</span> C.<span class="me1">CustomerID</span> <span class="sy0">=</span> O.<span class="me1">CustomerID</span> 
<span class="kw1">WHERE</span>
&nbsp; &nbsp;O.<span class="me1">OrderDate</span> <span class="sy0">=</span> <span class="br0">&#40;</span>
&nbsp; &nbsp; &nbsp; <span class="kw1">SELECT</span> <span class="kw2">Max</span><span class="br0">&#40;</span>OrderDate<span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; <span class="kw1">FROM</span> SalesOrderHeader O2
&nbsp; &nbsp; &nbsp; <span class="kw1">WHERE</span> O2.<span class="me1">CustomerID</span> <span class="sy0">=</span> O.<span class="me1">CustomerID</span>
&nbsp; &nbsp;<span class="br0">&#41;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">SELECT
   C.AccountNumber,
   O.OrderDate,
   O.SubTotal
FROM
   Sales.Customer C
   INNER JOIN Sales.SalesOrderHeader O ON C.CustomerID = O.CustomerID 
WHERE
   O.OrderDate = (
      SELECT Max(OrderDate)
      FROM SalesOrderHeader O2
      WHERE O2.CustomerID = O.CustomerID
   )</pre></div></div>

<p>Another version of correlated subquery which sometimes performs much better is</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
</pre></td><td class="de1"><pre class="de1"><span class="kw1">SELECT</span>
&nbsp; &nbsp;C.<span class="me1">AccountNumber</span>,
&nbsp; &nbsp;O.<span class="me1">OrderDate</span>,
&nbsp; &nbsp;O.<span class="me1">SubTotal</span>
<span class="kw1">FROM</span>
&nbsp; &nbsp;Sales.<span class="me1">Customer</span> C
&nbsp; &nbsp;<span class="kw1">INNER</span> <span class="sy0">JOIN</span> Sales.<span class="me1">SalesOrderHeader</span> O <span class="kw1">ON</span> C.<span class="me1">CustomerID</span> <span class="sy0">=</span> O.<span class="me1">CustomerID</span> 
<span class="kw1">WHERE</span>
&nbsp; &nbsp;O.<span class="me1">OrderID</span> <span class="sy0">=</span> <span class="br0">&#40;</span>
&nbsp; &nbsp; &nbsp; <span class="kw1">SELECT</span> <span class="kw1">top</span> <span class="nu0">1</span> OrderID 
&nbsp; &nbsp; &nbsp; <span class="kw1">FROM</span> SalesOrderHeader O2
&nbsp; &nbsp; &nbsp; <span class="kw1">WHERE</span> O2.<span class="me1">CustomerID</span> <span class="sy0">=</span> O.<span class="me1">CustomerID</span> <span class="kw1">order</span> <span class="kw1">by</span> O2.<span class="me1">OrderDate</span> <span class="kw1">Desc</span>, O2.<span class="me1">OrderID</span> <span class="kw1">DESC</span><span class="br0">&#41;</span>
&nbsp; &nbsp;</pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">SELECT
   C.AccountNumber,
   O.OrderDate,
   O.SubTotal
FROM
   Sales.Customer C
   INNER JOIN Sales.SalesOrderHeader O ON C.CustomerID = O.CustomerID 
WHERE
   O.OrderID = (
      SELECT top 1 OrderID 
      FROM SalesOrderHeader O2
      WHERE O2.CustomerID = O.CustomerID order by O2.OrderDate Desc, O2.OrderID DESC)
   </pre></div></div>

<p>Another variation of this query is (suggested by Alejandro Mesa (Hunchback) in this <a href="http://social.msdn.microsoft.com/Forums/en-US/transactsql/thread/0217ddf4-bcab-4f2b-a81c-70841753cb23">MSDN thread</a>):</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
</pre></td><td class="de1"><pre class="de1"><span class="kw1">SELECT</span>
&nbsp; &nbsp;C.<span class="me1">AccountNumber</span>,
&nbsp; &nbsp;O1.<span class="me1">OrderDate</span>,
&nbsp; &nbsp;O1.<span class="me1">SubTotal</span>
<span class="kw1">FROM</span>
&nbsp; &nbsp;Sales.<span class="me1">Customer</span> C
&nbsp; &nbsp;<span class="kw1">INNER</span> <span class="sy0">JOIN</span> Sales.<span class="me1">SalesOrderHeader</span> O1 <span class="kw1">ON</span> C.<span class="me1">CustomerID</span> <span class="sy0">=</span> O1.<span class="me1">CustomerID</span> 
<span class="kw1">WHERE</span> not exists <span class="br0">&#40;</span><span class="kw1">select</span> <span class="nu0">1</span> <span class="kw1">from</span> Sales.<span class="me1">SalesOrderHeader</span> O2 <span class="kw1">where</span> O2.<span class="me1">CustomerID</span> <span class="sy0">=</span> O1.<span class="me1">CustomerID</span> and O1.<span class="me1">OrderDate</span> <span class="sy0">&lt;</span> O2.<span class="me1">OrderDate</span><span class="br0">&#41;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">SELECT
   C.AccountNumber,
   O1.OrderDate,
   O1.SubTotal
FROM
   Sales.Customer C
   INNER JOIN Sales.SalesOrderHeader O1 ON C.CustomerID = O1.CustomerID 
WHERE not exists (select 1 from Sales.SalesOrderHeader O2 where O2.CustomerID = O1.CustomerID and O1.OrderDate &lt; O2.OrderDate)</pre></div></div>

<p>Note, that the first variation of this query may return duplicate rows, but the second will always return only one row per group (with the latest OrderID).</p>
<p>The third variation of this query with NOT EXISTS will produce duplicates in case of the same date, but can also be easily adjusted to return only one row with the max OrderID:</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
</pre></td><td class="de1"><pre class="de1"><span class="kw1">SELECT</span>
&nbsp; &nbsp;C.<span class="me1">AccountNumber</span>,
&nbsp; &nbsp;O1.<span class="me1">OrderDate</span>,
&nbsp; &nbsp;O1.<span class="me1">SubTotal</span>
<span class="kw1">FROM</span>
&nbsp; &nbsp;Sales.<span class="me1">Customer</span> C
&nbsp; &nbsp;<span class="kw1">INNER</span> <span class="sy0">JOIN</span> Sales.<span class="me1">SalesOrderHeader</span> O1 <span class="kw1">ON</span> C.<span class="me1">CustomerID</span> <span class="sy0">=</span> O1.<span class="me1">CustomerID</span> 
<span class="kw1">WHERE</span> not exists <span class="br0">&#40;</span><span class="kw1">select</span> <span class="nu0">1</span> <span class="kw1">from</span> Sales.<span class="me1">SalesOrderHeader</span> O2 <span class="kw1">where</span> O2.<span class="me1">CustomerID</span> <span class="sy0">=</span> O1.<span class="me1">CustomerID</span> and <span class="br0">&#40;</span>O1.<span class="me1">OrderDate</span> <span class="sy0">&lt;</span> O2.<span class="me1">OrderDate</span> <span class="sy0">OR</span> 
<span class="br0">&#40;</span>O1.<span class="me1">OrderDate</span> <span class="sy0">=</span> O2.<span class="me1">OrderDate</span> and O1.<span class="me1">OrderID</span> <span class="sy0">&lt;</span> O2.<span class="me1">OrderID</span><span class="br0">&#41;</span><span class="br0">&#41;</span><span class="br0">&#41;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">SELECT
   C.AccountNumber,
   O1.OrderDate,
   O1.SubTotal
FROM
   Sales.Customer C
   INNER JOIN Sales.SalesOrderHeader O1 ON C.CustomerID = O1.CustomerID 
WHERE not exists (select 1 from Sales.SalesOrderHeader O2 where O2.CustomerID = O1.CustomerID and (O1.OrderDate &lt; O2.OrderDate OR 
(O1.OrderDate = O2.OrderDate and O1.OrderID &lt; O2.OrderID)))</pre></div></div>

</p>
<h3>2. Derived Table</h3>
</p>
<ul>
<li>Relies on unique order dates to avoid selecting multiple rows per customer.</li>
<li>Performs better than the correlated subquery when querying a significant portion of all customers, but worse when only querying a few, since the last order date for every customer is always calculated.</li>
<li>Performance degrades linearly as rows increase.</li>
<li>Does not handle NULLs correctly.</li>
</ul>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
</pre></td><td class="de1"><pre class="de1"><span class="kw1">SELECT</span>
&nbsp; &nbsp;C.<span class="me1">AccountNumber</span>,
&nbsp; &nbsp;O.<span class="me1">OrderDate</span>,
&nbsp; &nbsp;O.<span class="me1">SubTotal</span>
<span class="kw1">FROM</span>
&nbsp; &nbsp;Sales.<span class="me1">Customer</span> C
&nbsp; &nbsp;<span class="kw1">INNER</span> <span class="sy0">JOIN</span> Sales.<span class="me1">SalesOrderHeader</span> O <span class="kw1">ON</span> C.<span class="me1">CustomerID</span> <span class="sy0">=</span> O.<span class="me1">CustomerID</span> 
&nbsp; &nbsp;<span class="kw1">INNER</span> <span class="sy0">JOIN</span> <span class="br0">&#40;</span>
&nbsp; &nbsp; &nbsp; <span class="kw1">SELECT</span> CustomerID, LastOrderDate <span class="sy0">=</span> <span class="kw2">Max</span><span class="br0">&#40;</span>OrderDate<span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; <span class="kw1">FROM</span> Sales.<span class="me1">SalesOrderHeader</span>
&nbsp; &nbsp; &nbsp; <span class="kw1">GROUP</span> <span class="kw1">BY</span> CustomerID
&nbsp; &nbsp;<span class="br0">&#41;</span> O2 <span class="kw1">ON</span> O.<span class="me1">CustomerID</span> <span class="sy0">=</span> O2.<span class="me1">CustomerID</span> <span class="sy0">AND</span> O.<span class="me1">OrderDate</span> <span class="sy0">=</span> O2.<span class="me1">LastOrderDate</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">SELECT
   C.AccountNumber,
   O.OrderDate,
   O.SubTotal
FROM
   Sales.Customer C
   INNER JOIN Sales.SalesOrderHeader O ON C.CustomerID = O.CustomerID 
   INNER JOIN (
      SELECT CustomerID, LastOrderDate = Max(OrderDate)
      FROM Sales.SalesOrderHeader
      GROUP BY CustomerID
   ) O2 ON O.CustomerID = O2.CustomerID AND O.OrderDate = O2.LastOrderDate</pre></div></div>

<p></p>
<h2>Number and Filter</h2>
</p>
<h3>Windowing Functions</h3>
<p>The windowing functions were introduced in SQL Server 2005, so the two queries below will not work in SQL Server 2000.</p>
<ul>
<li>Will always return one row per customer. Using RANK() instead of ROW_NUMBER() will yield the same results as queries 1 and 2.</li>
<li>Easily supports not just 1 but <em>n</em> rows per group.</li>
<li>Performance degrades fairly linearly as rows increase. The windowing functions are fast but huge rowsets can begin to bog them down.</li>
</ul>
<h3>3. Windowing Function &#8211; Two Stages</h3>
</p>
<ul>
<li>A common table expression is not needed, but is cleaner. The CTE query can be made into a derived table if desired.</li>
</ul>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
</pre></td><td class="de1"><pre class="de1"><span class="kw1">WITH</span> OrderData <span class="kw1">AS</span> <span class="br0">&#40;</span>
&nbsp; &nbsp;<span class="kw1">SELECT</span>
&nbsp; &nbsp; &nbsp; C.<span class="me1">AccountNumber</span>,
&nbsp; &nbsp; &nbsp; O.<span class="me1">OrderDate</span>,
&nbsp; &nbsp; &nbsp; O.<span class="me1">SubTotal</span>,
&nbsp; &nbsp; &nbsp; Selector <span class="sy0">=</span> ROW_NUMBER<span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="kw1">OVER</span> <span class="br0">&#40;</span>PARTITION <span class="kw1">BY</span> O.<span class="me1">CustomerID</span> <span class="kw1">ORDER</span> <span class="kw1">BY</span> O.<span class="me1">OrderDate</span> <span class="kw1">DESC</span><span class="br0">&#41;</span>
&nbsp; &nbsp;<span class="kw1">FROM</span>
&nbsp; &nbsp; &nbsp; Sales.<span class="me1">Customer</span> C
&nbsp; &nbsp; &nbsp; <span class="kw1">INNER</span> <span class="sy0">JOIN</span> Sales.<span class="me1">SalesOrderHeader</span> O <span class="kw1">ON</span> C.<span class="me1">CustomerID</span> <span class="sy0">=</span> O.<span class="me1">CustomerID</span> 
<span class="br0">&#41;</span>
<span class="kw1">SELECT</span> AccountNumber, OrderDate, SubTotal
<span class="kw1">FROM</span> OrderData
<span class="kw1">WHERE</span> Selector <span class="sy0">=</span> <span class="nu0">1</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">WITH OrderData AS (
   SELECT
      C.AccountNumber,
      O.OrderDate,
      O.SubTotal,
      Selector = ROW_NUMBER() OVER (PARTITION BY O.CustomerID ORDER BY O.OrderDate DESC)
   FROM
      Sales.Customer C
      INNER JOIN Sales.SalesOrderHeader O ON C.CustomerID = O.CustomerID 
)
SELECT AccountNumber, OrderDate, SubTotal
FROM OrderData
WHERE Selector = 1</pre></div></div>

<h3>4. Windowing Function &#8211; One Stage</h3>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
</pre></td><td class="de1"><pre class="de1"><span class="kw1">SELECT</span> <span class="kw1">TOP</span> <span class="nu0">1</span> <span class="kw1">WITH</span> TIES
&nbsp; &nbsp;C.<span class="me1">AccountNumber</span>,
&nbsp; &nbsp;O.<span class="me1">OrderDate</span>,
&nbsp; &nbsp;O.<span class="me1">SubTotal</span>
<span class="kw1">FROM</span>
&nbsp; &nbsp;Sales.<span class="me1">Customer</span> C
&nbsp; &nbsp;<span class="kw1">INNER</span> <span class="sy0">JOIN</span> Sales.<span class="me1">SalesOrderHeader</span> O <span class="kw1">ON</span> C.<span class="me1">CustomerID</span> <span class="sy0">=</span> O.<span class="me1">CustomerID</span> 
<span class="kw1">ORDER</span> <span class="kw1">BY</span>
&nbsp; &nbsp;ROW_NUMBER<span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="kw1">OVER</span> <span class="br0">&#40;</span>PARTITION <span class="kw1">by</span> O.<span class="me1">CustomerID</span> <span class="kw1">ORDER</span> <span class="kw1">BY</span> OrderDate <span class="kw1">DESC</span><span class="br0">&#41;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">SELECT TOP 1 WITH TIES
   C.AccountNumber,
   O.OrderDate,
   O.SubTotal
FROM
   Sales.Customer C
   INNER JOIN Sales.SalesOrderHeader O ON C.CustomerID = O.CustomerID 
ORDER BY
   ROW_NUMBER() OVER (PARTITION by O.CustomerID ORDER BY OrderDate DESC)</pre></div></div>

<p></p>
<h2>Simulate MS Access</h2>
</p>
<h3>5. Compound Key, aka Packed Values</h3>
<ul>
<li>Uses only one table access with a simple GROUP BY.</li>
<li>Naomi first learned this idea from <a href="http://forum.foxclub.ru/read.php?32,177183,177232#msg-177232">a Russian SQL FAQ</a>.</li>
<li>Erik cooked up a similar idea in 2008.</li>
<li>This example uses a varchar column to hold the packed values, but be aware that converting to and from binary is faster than char (plus harder to use and more error-prone) and binary aggregation is faster. The crucial part is being able to faithfully extract the data that was put in.</li>
<li>This query has no problem with duplicates. It does effectively sort by the full compound value, so if multiple orders for the same customer can be on the same order date and you want some other column to determine which one is selected, it has to be included in the packed data.</li>
<li>As given, this query does not handle NULLs at all. A few strategic Coalesces can fix that.</li>
<li>There is no significant performance difference between unpacking one many-item compound value or many one-item compound values (though you&#8217;d always include all columns needed for ordering).</li>
</ul>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
</pre></td><td class="de1"><pre class="de1"><span class="kw1">SELECT</span>
&nbsp; &nbsp;CustomerID,
&nbsp; &nbsp;LastOrderDate,
&nbsp; &nbsp;LastSubTotal <span class="sy0">=</span> <span class="kw1">Convert</span><span class="br0">&#40;</span><span class="kw1">money</span>, <span class="kw2">Substring</span><span class="br0">&#40;</span>DateAndSubtotal, <span class="nu0">20</span>, <span class="nu0">25</span><span class="br0">&#41;</span><span class="br0">&#41;</span>
<span class="kw1">FROM</span>
&nbsp; &nbsp;<span class="br0">&#40;</span>
&nbsp; &nbsp; &nbsp; <span class="kw1">SELECT</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;CustomerID,
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;LastOrderDate <span class="sy0">=</span> <span class="kw2">Max</span><span class="br0">&#40;</span>OrderDate<span class="br0">&#41;</span>,
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;DateAndSubtotal <span class="sy0">=</span> <span class="kw2">Max</span><span class="br0">&#40;</span><span class="kw1">convert</span><span class="br0">&#40;</span><span class="kw1">varchar</span><span class="br0">&#40;</span><span class="nu0">50</span><span class="br0">&#41;</span>, OrderDate, <span class="nu0">121</span><span class="br0">&#41;</span> <span class="sy0">+</span> <span class="kw1">Convert</span><span class="br0">&#40;</span><span class="kw1">varchar</span><span class="br0">&#40;</span><span class="nu0">50</span><span class="br0">&#41;</span>, Subtotal<span class="br0">&#41;</span><span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; <span class="kw1">FROM</span> Sales.<span class="me1">SalesOrderHeader</span>
&nbsp; &nbsp; &nbsp; <span class="kw1">GROUP</span> <span class="kw1">BY</span> CustomerID
&nbsp; &nbsp;<span class="br0">&#41;</span> X</pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">SELECT
   CustomerID,
   LastOrderDate,
   LastSubTotal = Convert(money, Substring(DateAndSubtotal, 20, 25))
FROM
   (
      SELECT
         CustomerID,
         LastOrderDate = Max(OrderDate),
         DateAndSubtotal = Max(convert(varchar(50), OrderDate, 121) + Convert(varchar(50), Subtotal))
      FROM Sales.SalesOrderHeader
      GROUP BY CustomerID
   ) X</pre></div></div>

<p>Isn&#8217;t that cool? I don&#8217;t advocate using it all the time, but when performance is bad and the trade-offs are worth it, do it.</p>
<p>In closing, thank you for visiting. We hope this is useful to you. You might like to see the next installment <a href="/index.php/DataMgmt/DataDesign/including-an-aggregated-column-s-related-2">Including an Aggregated Column&#8217;s Related Values &#8211; Part 2</a>, discussing this issue in further depth.</p>
<p>Erik</p>
<p>P.S. I would like to thank <a href="http://forum.lessthandot.com/memberlist.php?mode=viewprofile&amp;u=314">Naomi</a> for co-authoring this blog post with me. She did the heavy lifting of actually writing queries and testing their performance; I just fleshed out the explanations a bit.</p>
]]></content:encoded>
			<wfw:commentRss>/index.php/datamgmt/dbprogramming/mssqlserver/including-an-aggregated-column-s-related/feed/</wfw:commentRss>
		<slash:comments>16</slash:comments>
		</item>
		<item>
		<title>Multi-Value Parameters in SSRS</title>
		<link>/index.php/datamgmt/datadesign/ssrs_multi_value_parameters/</link>
		<comments>/index.php/datamgmt/datadesign/ssrs_multi_value_parameters/#comments</comments>
		<pubDate>Fri, 22 May 2009 17:22:45 +0000</pubDate>
		<dc:creator><![CDATA[Erik]]></dc:creator>
				<category><![CDATA[Data Modelling and Design]]></category>
		<category><![CDATA[Microsoft SQL Server]]></category>
		<category><![CDATA[escape commas]]></category>
		<category><![CDATA[multi-value]]></category>
		<category><![CDATA[parameter]]></category>
		<category><![CDATA[split]]></category>
		<category><![CDATA[sql server]]></category>
		<category><![CDATA[ssrs]]></category>

		<guid isPermaLink="false">/index.php/2009/05/ssrs_multi_value_parameters/</guid>
		<description><![CDATA[Here's a quick rundown of how to modify an SSRS report and a stored procedure to accept and use a multi-valued parameter.]]></description>
				<content:encoded><![CDATA[<h1>Background</h1>
<p>I have a report that returns specific documentation from the database with one parameter, a CustomerID. The report is bound to a stored procedure which has hard-coded in it the names of the specific documents that should be included. This solution is problematic because when the list of documents needs to change, the SP has to be updated, which means mistakes can be (and have been) made.</p>
<p>The good step of converting the SP to use a table doesn&#8217;t satisfy me fully, because these reports are executed from a special reporting system that also has its own list of document names, so that it knows when to kick off a particular reportâfor example, if none of the documents exist, no report will be generated. I didn&#8217;t like the idea of depending on having the same data updates made in two places: I should be able to just update the reporting system with the new document names and then trust that the reports will contain the correct data. In the past, we had a mistake where the reporting system received a new document name that didn&#8217;t get included in the SP properly, so after finally fixing the SP, I had to do a recovery and resend some reports.</p>
<p>I realized that what could solve the problem once and for all was to provide the exact list of document names to the SSRS report as a parameter, and have the report pass the document names into the SP, so that even if the SP is not updated (or its source table is not updated), the correct content will still be pulled. The way to do this is with a &#8220;multi-value&#8221; parameter.</p>
<h1>Starting Points</h1>
<p>â¢ A quick test will show that the way SSRS passes multi-valued parameters to a stored procedure is simply by taking all the values selected and packing them into a comma-delimited string. If any of the items in the list contain a comma, no escaping or special handling is doneâso manual escaping is required.</p>
<p>â¢ In case you&#8217;re really new to all this, all the report development is being done in Visual Studio 2005, with a project of type Business Intelligence Projects &#8211; Report Server Project. I&#8217;m sure you can find tutorials elsewhere for how to set up a basic report. Once you have a working report, you&#8217;re ready to add a multi-value parameter.</p>
<p>â¢ In this article, the multi-value parameter I am working with is a list of document names. So wherever I say document names, you can insert the thing that you are concerned with. If you can guarantee that there will never be a comma in the list, you can skip or edit the parts of my explanation that have special handling for commas.</p>
<h1>Adding the Multi-Value Parameter</h1>
<p>What I learned while doing this is probably useful to someone, so here&#8217;s a quick rundown of how to modify an SSRS report and a stored procedure to accept and use a multi-valued parameter.</p>
<h2>Modify the Stored Procedure</h2>
<ol>
<li>Add the new parameter. I copied the old SP to a new name so that I couldn&#8217;t possibly mess up the original, and so going forward no one else who works with these things will get confused about which does what.</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
</pre></td><td class="de1"><pre class="de1"><span class="kw1">CREATE</span> <span class="kw1">PROCEDURE</span> dbo.<span class="me1">MyReport_DocParam</span>
&nbsp; &nbsp;@CustomerID <span class="kw1">int</span>,
&nbsp; &nbsp;@DocumentNameParam <span class="kw1">varchar</span><span class="br0">&#40;</span><span class="kw2">Max</span><span class="br0">&#41;</span> <span class="sy0">=</span> <span class="st0">''</span>
&nbsp; &nbsp;<span class="co1">-- Please note that any document names with commas must be put inside single quotes.</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">CREATE PROCEDURE dbo.MyReport_DocParam
   @CustomerID int,
   @DocumentNameParam varchar(Max) = ''
   -- Please note that any document names with commas must be put inside single quotes.</pre></div></div>

<p>The default value of an empty string allows the SP to be run with just a CustomerID and it will still work. It may not have all the document names, but for testing and development of the SP that may not matter most of the time. I put the comment shown right into the SP to help prevent problems with other people trying to use the SP when I am not around.</p>
<p>I chose to make the new parameter varchar(Max) because it won&#8217;t hurt anything, and on the theory that I don&#8217;t like my code breaking, and despite knowing that the list will almost surely never exceed 8000 characters, I&#8217;d rather be safe. In SQL 2000 you can probably get by with varchar(8000) or even the text data type.</li>
<li>Write a value-splitting function.
<p><em>Note</em>: I have not experimented with other data types such as Integer. If you have done this and know how it works in SSRS differently from using strings, please post a comment. I suspect that whatever the actual data type of your items, they will have to be passed as a comma-separated string anyway. If your items are fixed-length or easily convert to relatively short fixed-length strings, padding them so the comma delimiters added by SSRS appear at exactly known positions will make your task of splitting much easier. You can just join to a special Numbers table and split at each position. For example, if you can make your inputs always 10 characters long then you can just break the string at every 11th characterâthe comma.</p>
<p>Here&#8217;s how I decided to escape commas:<br />
â¢ If the value contains a comma, enclose it in single quotes and double up any single quotes in that value.<br />
â¢ If the value does not contain a comma, don&#8217;t escape it in any way even if it has a single quote.</p>
<p>I chose this because it is similar to how SQL Server accepts string literals already and should be more familiar to anyone working with my code than other methods (such as backslash-escaping for example). I also considered replacing commas with a character that I know won&#8217;t be in the document names such as character 0 or 255 and then restoring it after splitting values apart, but rejected that because it makes it much more difficult to understand and makes it much harder to provide the list of items if the SP is being run from a query window such as Query Analyzer or Management Studio.</p>
<div style="border:1px solid black;background-color:#444;color:white;margin:0 20px;padding:0 5px 0 5px;"><span class="MT_larger"><em><strong>But I Don&#8217;t Wanna Escape The Comma</strong></em></span><span class="MT_smaller"></p>
<p></span>If you don&#8217;t think you need to escape commas, please ensure that commas <strong>can&#8217;t</strong> be in your data ever, not that they don&#8217;t exist now or &#8220;we&#8217;ll tell people not to put commas in.&#8221; An utterly basic and beginner&#8217;s rule of programming is to never trust user input. Bad Things happen when you do. How do you know that in 5 years when you may be gone or on vacation that some new person who never heard about the comma rule won&#8217;t enter a comma?</div>
<p>Here&#8217;s my function to do the unescaping and splitting work:</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
</pre></td><td class="de1"><pre class="de1"><span class="kw1">CREATE</span> <span class="kw1">FUNCTION</span> SplitQuotedString <span class="br0">&#40;</span>@String <span class="kw1">varchar</span><span class="br0">&#40;</span><span class="kw2">max</span><span class="br0">&#41;</span><span class="br0">&#41;</span>
<span class="kw1">RETURNS</span> @<span class="kw1">Array</span> <span class="kw1">TABLE</span> <span class="br0">&#40;</span>Item <span class="kw1">varchar</span><span class="br0">&#40;</span><span class="nu0">8000</span><span class="br0">&#41;</span><span class="br0">&#41;</span>
<span class="kw1">AS</span>
<span class="kw1">BEGIN</span>
&nbsp; &nbsp;<span class="kw1">DECLARE</span>
&nbsp; &nbsp; &nbsp; @Pos <span class="kw1">int</span>,
&nbsp; &nbsp; &nbsp; @<span class="kw1">End</span> <span class="kw1">int</span>,
&nbsp; &nbsp; &nbsp; @TextLength <span class="kw1">int</span>,
&nbsp; &nbsp; &nbsp; @Item <span class="kw1">varchar</span><span class="br0">&#40;</span><span class="nu0">8000</span><span class="br0">&#41;</span>,
&nbsp; &nbsp; &nbsp; @Fragment <span class="kw1">varchar</span><span class="br0">&#40;</span><span class="nu0">8000</span><span class="br0">&#41;</span>,
&nbsp; &nbsp; &nbsp; @InQuotes <span class="kw1">bit</span>
&nbsp; &nbsp;<span class="kw1">SET</span> @TextLength <span class="sy0">=</span> DataLength<span class="br0">&#40;</span>@String<span class="br0">&#41;</span>
&nbsp;
&nbsp; &nbsp;<span class="kw1">IF</span> @TextLength <span class="sy0">=</span> <span class="nu0">0</span> <span class="kw1">RETURN</span>
&nbsp;
&nbsp; &nbsp;<span class="kw1">SET</span> @Pos <span class="sy0">=</span> <span class="nu0">1</span>
&nbsp; &nbsp;<span class="kw1">SET</span> @InQuotes <span class="sy0">=</span> <span class="nu0">0</span>
&nbsp; &nbsp;<span class="kw1">SET</span> @String <span class="sy0">=</span> @String <span class="sy0">+</span> <span class="st0">','</span>
&nbsp; &nbsp;<span class="kw1">SET</span> @Item <span class="sy0">=</span> <span class="st0">''</span>
&nbsp; &nbsp;<span class="kw1">WHILE</span> <span class="nu0">1</span> <span class="sy0">=</span> <span class="nu0">1</span> <span class="kw1">BEGIN</span>
&nbsp; &nbsp; &nbsp; <span class="kw1">SET</span> @<span class="kw1">End</span> <span class="sy0">=</span> <span class="kw2">CharIndex</span><span class="br0">&#40;</span><span class="st0">','</span>, @String, @Pos<span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; <span class="kw1">IF</span> @<span class="kw1">End</span> <span class="sy0">=</span> <span class="nu0">0</span> <span class="kw1">BREAK</span>
&nbsp; &nbsp; &nbsp; <span class="kw1">SET</span> @Fragment <span class="sy0">=</span> <span class="kw2">Substring</span><span class="br0">&#40;</span>@String, @Pos, @<span class="kw1">End</span> <span class="sy0">-</span> @Pos<span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; <span class="kw1">IF</span> @InQuotes <span class="sy0">=</span> <span class="nu0">1</span> <span class="kw1">BEGIN</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span class="co1">--InQuotes becomes false if there are an odd number of single quotes at the end of this fragment</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span class="kw1">SET</span> @InQuotes <span class="sy0">=</span> <span class="kw2">PatIndex</span><span class="br0">&#40;</span><span class="st0">'%[^'</span><span class="st0">']%'</span>, <span class="kw2">Reverse</span><span class="br0">&#40;</span>@Fragment<span class="br0">&#41;</span> <span class="sy0">+</span> <span class="st0">'x'</span><span class="br0">&#41;</span> <span class="sy0">%</span> <span class="nu0">2</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span class="kw1">SET</span> @Item <span class="sy0">=</span> @Item <span class="sy0">+</span> <span class="st0">','</span> <span class="sy0">+</span> <span class="kw2">Replace</span><span class="br0">&#40;</span><span class="kw1">Left</span><span class="br0">&#40;</span>@Fragment, DataLength<span class="br0">&#40;</span>@Fragment<span class="br0">&#41;</span> <span class="sy0">-</span> <span class="nu0">1</span> <span class="sy0">+</span> @InQuotes<span class="br0">&#41;</span>, <span class="st0">''</span><span class="st0">''</span><span class="st0">''</span>, <span class="st0">''</span><span class="st0">''</span><span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; <span class="kw1">END</span>
&nbsp; &nbsp; &nbsp; <span class="kw1">ELSE</span> <span class="kw1">BEGIN</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span class="kw1">IF</span> @Fragment <span class="sy0">LIKE</span> <span class="st0">''</span><span class="st0">'%'</span> <span class="kw1">BEGIN</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">SET</span> @InQuotes <span class="sy0">=</span> <span class="nu0">1</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">SET</span> @Item <span class="sy0">=</span> <span class="kw2">Replace</span><span class="br0">&#40;</span><span class="kw2">Substring</span><span class="br0">&#40;</span>@Fragment, <span class="nu0">1</span> <span class="sy0">+</span> @InQuotes, <span class="nu0">8000</span><span class="br0">&#41;</span>, <span class="st0">''</span><span class="st0">''</span><span class="st0">''</span>, <span class="st0">''</span><span class="st0">''</span><span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span class="kw1">END</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span class="kw1">ELSE</span> <span class="kw1">BEGIN</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">SET</span> @Item <span class="sy0">=</span> @Fragment
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span class="kw1">END</span>
&nbsp; &nbsp; &nbsp; <span class="kw1">END</span>
&nbsp; &nbsp; &nbsp; <span class="kw1">IF</span> @InQuotes <span class="sy0">=</span> <span class="nu0">0</span> <span class="kw1">BEGIN</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span class="kw1">INSERT</span> @<span class="kw1">Array</span> <span class="br0">&#40;</span>Item<span class="br0">&#41;</span> <span class="kw1">VALUES</span> <span class="br0">&#40;</span>@Item<span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span class="kw1">SET</span> @Item <span class="sy0">=</span> <span class="st0">''</span>
&nbsp; &nbsp; &nbsp; <span class="kw1">END</span>
&nbsp; &nbsp; &nbsp; <span class="kw1">SET</span> @Pos <span class="sy0">=</span> @<span class="kw1">End</span> <span class="sy0">+</span> <span class="nu0">1</span>
&nbsp; &nbsp;<span class="kw1">END</span>
&nbsp;
&nbsp; &nbsp;<span class="kw1">RETURN</span>
<span class="kw1">END</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">CREATE FUNCTION SplitQuotedString (@String varchar(max))
RETURNS @Array TABLE (Item varchar(8000))
AS
BEGIN
   DECLARE
      @Pos int,
      @End int,
      @TextLength int,
      @Item varchar(8000),
      @Fragment varchar(8000),
      @InQuotes bit
   SET @TextLength = DataLength(@String)

   IF @TextLength = 0 RETURN

   SET @Pos = 1
   SET @InQuotes = 0
   SET @String = @String + ','
   SET @Item = ''
   WHILE 1 = 1 BEGIN
      SET @End = CharIndex(',', @String, @Pos)
      IF @End = 0 BREAK
      SET @Fragment = Substring(@String, @Pos, @End - @Pos)
      IF @InQuotes = 1 BEGIN
         --InQuotes becomes false if there are an odd number of single quotes at the end of this fragment
         SET @InQuotes = PatIndex('%[^'']%', Reverse(@Fragment) + 'x') % 2
         SET @Item = @Item + ',' + Replace(Left(@Fragment, DataLength(@Fragment) - 1 + @InQuotes), '''''', '''')
      END
      ELSE BEGIN
         IF @Fragment LIKE '''%' BEGIN
            SET @InQuotes = 1
            SET @Item = Replace(Substring(@Fragment, 1 + @InQuotes, 8000), '''''', '''')
         END
         ELSE BEGIN
            SET @Item = @Fragment
         END
      END
      IF @InQuotes = 0 BEGIN
         INSERT @Array (Item) VALUES (@Item)
         SET @Item = ''
      END
      SET @Pos = @End + 1
   END

   RETURN
END</pre></div></div>

<p>You&#8217;re welcome to use it, or write your own. You may not agree with how I chose to do it, and if you have any seriously big improvements do let me know. But I was not overly concerned with extracting that last tiny bit of performance, as my strings will never be very long and will never have more than a dozen or so items. I could not use a Numbers table solution since I am doubling up single quotes and in the case of encountering input such as &#8220;&#8221;&#8221;&#8221; it would incorrectly match an extra time at the second quote mark. Preventing a false match requires knowing if the current quote mark is an even or an odd one, which would need to look backward in the string, which complicated it so much that I just went for a chunk-by-chunk method that looks at each string separated by commas and determines if it begins a quoted string. If so, then each fragment is added to the item until the closing quote mark is encountered, and finally the complete item is added to the output table. If the item is not quoted, it is simply added to the output table.</p>
<p><em>Note</em>: In this function I assumed that no individual value would exceed 8000 characters. I also assumed that an item will not be quoted without containing a comma character. If items are quoted that don&#8217;t contain commas, this code will break. See the escaping logic I used in the query for the value list producing Dataset on the SSRS report.</p>
<p>If your data will never have commas in it or you can use the the fixed-length method, then should use your own plain-vanilla split function rather than my unescaping version.</li>
<li>Split and use the multi-value string.
<p>Here&#8217;s the code I used, which should be enough of an example to let you develop your own version that suits your needs:</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
</pre></td><td class="de1"><pre class="de1"><span class="kw1">DECLARE</span> @DocumentNames <span class="kw1">TABLE</span> <span class="br0">&#40;</span>
&nbsp; &nbsp; DocumentName <span class="kw1">varchar</span><span class="br0">&#40;</span><span class="nu0">60</span><span class="br0">&#41;</span>
<span class="br0">&#41;</span>
<span class="kw1">IF</span> <span class="kw1">Coalesce</span><span class="br0">&#40;</span>@DocumentNameParam, <span class="st0">''</span><span class="br0">&#41;</span> <span class="sy0">=</span> <span class="st0">''</span> <span class="kw1">BEGIN</span>
&nbsp; &nbsp;<span class="kw1">INSERT</span> @DocumentNames <span class="kw1">SELECT</span> Item <span class="kw1">FROM</span> dbo.<span class="me1">SplitQuotedString</span><span class="br0">&#40;</span>@DocumentNameParam<span class="br0">&#41;</span>
<span class="kw1">END</span>
<span class="kw1">ELSE</span> <span class="kw1">BEGIN</span>
&nbsp; &nbsp;<span class="kw1">INSERT</span> @DocumentNames
&nbsp; &nbsp;<span class="kw1">SELECT</span> <span class="st0">'Document Name 1'</span>
&nbsp; &nbsp;<span class="kw1">UNION</span> <span class="sy0">ALL</span> <span class="kw1">SELECT</span> <span class="st0">'Document Name 2'</span>
&nbsp; &nbsp;<span class="kw1">UNION</span> <span class="sy0">ALL</span> <span class="kw1">SELECT</span> <span class="st0">'Document Name 3, Special'</span>
<span class="kw1">END</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">DECLARE @DocumentNames TABLE (
	DocumentName varchar(60)
)
IF Coalesce(@DocumentNameParam, '') = '' BEGIN
   INSERT @DocumentNames SELECT Item FROM dbo.SplitQuotedString(@DocumentNameParam)
END
ELSE BEGIN
   INSERT @DocumentNames
   SELECT 'Document Name 1'
   UNION ALL SELECT 'Document Name 2'
   UNION ALL SELECT 'Document Name 3, Special'
END</pre></div></div>

<p>To my dismay, I was not allowed to make this SP read from a table. But I am still quite happy because now I don&#8217;t care if the SP gets updated with new document names: when the reporting system creates a report, it will pass in document names and always be correct. I have insulated the reporting system against exactly the thing I was trying to avoid: mistakes when updating the SP. I&#8217;ll even throw in that I was the one who made the mistake updating the SP last timeâI didn&#8217;t know the hard-coded document list was in <strong>three</strong> places. Now, at least, the list is in one place.</p>
<p>And finally, using the document names:</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
</pre></td><td class="de1"><pre class="de1"><span class="kw1">INNER</span> <span class="sy0">JOIN</span> @DocumentNames N <span class="kw1">on</span> D.<span class="me1">DocumentName</span> <span class="sy0">=</span> N.<span class="me1">DocumentName</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">INNER JOIN @DocumentNames N on D.DocumentName = N.DocumentName</pre></div></div>

</li>
</ol>
<h2>Modify The SSRS Report</h2>
<ol>
<li>Update the Dataset. On the Data tab, either create a new Dataset or update an existing Dataset so that it has the correct SP name and finds the new parameter you added. To edit a Dataset, click the &#8220;&#8230;&#8221; button to the right of the Dataset name dropdown.</li>
<li>Decide whether the report&#8217;s default list of available document names will be hard-coded in the report or supplied by a query. I chose to make it data-driven so that if a new document is added, it will show up in the report without any changes to it, or with only a change to a shared data source, rather than having to change the SSRS report itself. I always prefer to make changes to data or shared objects than to code or types of things that have to be tested and deployed.
<p><strong>From query:</strong> Create a new DataSet that pulls the document names, one per row. Here is the query I used:</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
</pre></td><td class="de1"><pre class="de1"><span class="kw1">SELECT</span>
&nbsp; &nbsp;DocNameString <span class="sy0">=</span>
&nbsp; &nbsp; &nbsp; <span class="kw1">CASE</span>
&nbsp; &nbsp; &nbsp; <span class="kw1">WHEN</span> DocName <span class="sy0">LIKE</span> <span class="st0">'%,%'</span> <span class="kw1">THEN</span> <span class="st0">''</span><span class="st0">''</span> <span class="sy0">+</span> <span class="kw2">Replace</span><span class="br0">&#40;</span>DocName, <span class="st0">''</span><span class="st0">''</span>, <span class="st0">''</span><span class="st0">''</span><span class="st0">''</span><span class="br0">&#41;</span> <span class="sy0">+</span> <span class="st0">''</span><span class="st0">''</span>
&nbsp; &nbsp; &nbsp; <span class="kw1">ELSE</span> DocName
&nbsp; &nbsp; &nbsp; <span class="kw1">END</span>,
&nbsp; &nbsp;DocName
<span class="kw1">FROM</span> ReportDocName
<span class="kw1">WHERE</span> ReportID <span class="sy0">=</span> <span class="nu0">62</span> <span class="co1">-- my particular report that has multiple document names</span>
<span class="kw1">ORDER</span> <span class="kw1">BY</span> DocName</pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">SELECT
   DocNameString =
      CASE
      WHEN DocName LIKE '%,%' THEN '''' + Replace(DocName, '''', '''''') + ''''
      ELSE DocName
      END,
   DocName
FROM ReportDocName
WHERE ReportID = 62 -- my particular report that has multiple document names
ORDER BY DocName</pre></div></div>

<p>This is the logic that I wrote the SplitQuotedString to match. If you change how you escape commas, you&#8217;ll need to write your own splitting/unescaping function. Run the query to make sure it&#8217;s working correctly. It should have two columns, one with commas escaped, and one with them unescaped. If you don&#8217;t have to escape commas in your data, then one column is okay. </p>
<p><strong>Non-queried:</strong> Run a query manually to extract the list you want or locate the values wherever they are. Keep this handy to paste in later.</li>
<li>Select Report->Report Parameters. If there isn&#8217;t already a new parameter automatically added by the fact that your SP now has a new parameter, then Add a new parameter.<br />
â¢ Name: Give it the same name that you called the parameter in your SP. For me: DocumentNameParam.<br />
â¢ Data type: String<br />
â¢ Prompt: Document Names<br />
â¢ Check the &#8220;Multi-value&#8221; checkbox. I also checked &#8220;Allow blank value&#8221; because if no names are specified, I want the SP&#8217;s list of document names to take over. You cannot choose &#8220;Allow null value&#8221; with a Multi-value parameter (at least, I couldn&#8217;t select it and I think that is the reason).<br />
â¢ Available values:<br />
&#8211; For &#8220;Non-queried&#8221; paste in each option, one at a time, from the list of options you built earlier.<br />
&#8211; For &#8220;From query&#8221; choose the Dataset you created that displays the possible list. For &#8220;Value field&#8221; select the column that has commas escaped, and for &#8220;Label field&#8221; select the one that is plain. If your Dataset only has one column, use it in both places.<br />
â¢ Default values:<br />
&#8211; For &#8220;Non-queried&#8221; paste in each option that you want to be selected by default.<br />
&#8211; For &#8220;From query&#8221; choose your list Dataset, or perhaps select a special default Dataset you created that is different from the list of all possible options. I used the same Dataset since I want all values to be selected by default.</p>
<p class="text-align:center;"><img src="/wp-content/uploads/blogs/DataMgmt/ssrs_multi_value_parameters/MultiValueReportParameters.PNG" alt="SSRS Report Parameters" title="Creating a Multi-value Parameter" /></p>
</li>
<li>If you had to add the multi-value report parameter manually, edit the source Dataset and make sure it is mapped properly. Click on the Data tab, select the correct Dataset, click the &#8220;&#8230;&#8221; edit button, select Parameters, and make sure that the Name is mapped to the Value.
<p><img src="/wp-content/uploads/blogs/DataMgmt/ssrs_multi_value_parameters/MultiValueDataSet.PNG" alt="SSRS Dataset Parameters" title="Mapping A Dataset Parameter to a Report Parameter" /></li>
</ol>
<h1>Happily Use Your Shiny New Report</h1>
<p>I hope that this article has been useful to you, and helps you get a Multi-value parameter added to your SSRS report in no time!</p>
<p>Erik<br />
<br />
<span class="MT_smaller"><strong>Afterthoughts</strong></p>
<p>â¢ You <em>could</em> use a query instead of a stored procedure.<br />
â¢ Think carefully before using a multi-valued parameter to solve problems that should be solved by database normalization. A multi-value column in a database is a BAD idea if you ever have to work with the individual items. Don&#8217;t try to adapt this solution to such a column. Fix the database design instead.</span></p>
]]></content:encoded>
			<wfw:commentRss>/index.php/datamgmt/datadesign/ssrs_multi_value_parameters/feed/</wfw:commentRss>
		<slash:comments>3</slash:comments>
		</item>
		<item>
		<title>SQL Server: When 8000 Characters Is Not Enough</title>
		<link>/index.php/datamgmt/dbprogramming/mssqlserver/sql-2000-when-8000-characters-is-not-eno/</link>
		<comments>/index.php/datamgmt/dbprogramming/mssqlserver/sql-2000-when-8000-characters-is-not-eno/#comments</comments>
		<pubDate>Mon, 06 Apr 2009 21:24:51 +0000</pubDate>
		<dc:creator><![CDATA[Erik]]></dc:creator>
				<category><![CDATA[Microsoft SQL Server]]></category>

		<guid isPermaLink="false">/index.php/2009/04/sql-2000-when-8000-characters-is-not-eno/</guid>
		<description><![CDATA[MS SQL Server 2000 has a limitation of 8000 characters in a varchar variable. The historical reason for this limitation, I believe, is related to the 8k size of data pages, where in-row data can't exceed something like 8060 bytes (actual numbers vary a&#8230;]]></description>
				<content:encoded><![CDATA[<p>MS SQL Server 2000 has a limitation of 8000 characters in a varchar variable. The historical reason for this limitation, I believe, is related to the 8k size of data pages, where in-row data can&#8217;t exceed something like 8060 bytes (actual numbers vary a little).</p>
<p>But what if you need to work with data that is longer than 8000 characters? When storing data in a table, you can use the text datatype which is stored out-of-row (though there are options about storing strings shorter than 8k characters in-row and then moving them out-of-row if they grow). But you can&#8217;t use the text datatype as a variable. Look:</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
</pre></td><td class="de1"><pre class="de1"><span class="kw1">DECLARE</span> @longdata <span class="kw1">text</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">DECLARE @longdata text</pre></div></div>

<blockquote><p><span class="MT_red">Msg 2739, Level 16, State 1, Line 1<br />
The text, ntext, and image data types are invalid for local variables.</span></p></blockquote>
<p>But while that seems definitive, it is not the whole story, because you <strong>can </strong>use the text data type as a parameter in a stored procedure:</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
</pre></td><td class="de1"><pre class="de1"><span class="kw1">CREATE</span> <span class="kw1">PROCEDURE</span> DisplayText @longdata <span class="kw1">text</span>
<span class="kw1">AS</span>
<span class="kw1">SELECT</span> @longdata</pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">CREATE PROCEDURE DisplayText @longdata text
AS
SELECT @longdata</pre></div></div>

<p>This works fine, but there are limitations on what can be done with that @longdata variable just like there are with text columns, such as the inability to use the Len() function (use DataLength instead).</p>
<p>If you truly must have variables with more than 8000 characters in a stored procedure, but they can&#8217;t be passed in as parameters, then you are now in the unfortunate position of having to use tables and text pointers. You&#8217;ll need the functions TEXTPTR, WRITETEXT, UPDATETEXT, and READTEXT. With these, you can work with pieces of the long data types (no longer than 8000 characters at a time in a variable).</p>
<p>Here&#8217;s an example of putting more than 8000 characters into a column in an SP:</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
</pre></td><td class="de1"><pre class="de1"><span class="kw1">CREATE</span> <span class="kw1">TABLE</span> #Table <span class="br0">&#40;</span>
&nbsp; &nbsp;id <span class="kw1">int</span> <span class="kw1">identity</span><span class="br0">&#40;</span><span class="nu0">1</span>,<span class="nu0">1</span><span class="br0">&#41;</span> <span class="kw1">primary</span> <span class="kw1">key</span> <span class="kw1">clustered</span>,
&nbsp; &nbsp;longdata <span class="kw1">text</span>
<span class="br0">&#41;</span>
&nbsp;
<span class="kw1">INSERT</span> #Table <span class="br0">&#40;</span>longdata<span class="br0">&#41;</span> <span class="kw1">VALUES</span> <span class="br0">&#40;</span><span class="st0">'data to be added to-&gt;'</span><span class="br0">&#41;</span>
<span class="kw1">INSERT</span> #Table <span class="br0">&#40;</span>longdata<span class="br0">&#41;</span> <span class="kw1">VALUES</span> <span class="br0">&#40;</span><span class="st0">'more data-&gt;'</span><span class="br0">&#41;</span>
&nbsp;
<span class="kw1">DECLARE</span>
&nbsp; &nbsp;@id <span class="kw1">int</span>,
&nbsp; &nbsp;@chunknum <span class="kw1">int</span>,
&nbsp; &nbsp;@ptr <span class="kw1">varbinary</span><span class="br0">&#40;</span><span class="nu0">16</span><span class="br0">&#41;</span>,
&nbsp; &nbsp;@textchunk <span class="kw1">varchar</span><span class="br0">&#40;</span><span class="nu0">8000</span><span class="br0">&#41;</span>
<span class="kw1">SET</span> @id <span class="sy0">=</span> <span class="nu0">0</span>
<span class="kw1">WHILE</span> <span class="nu0">1</span> <span class="sy0">=</span> <span class="nu0">1</span> <span class="kw1">BEGIN</span>
&nbsp; &nbsp;<span class="kw1">SELECT</span> <span class="kw1">TOP</span> <span class="nu0">1</span> @id <span class="sy0">=</span> id, @ptr <span class="sy0">=</span> <span class="kw2">TextPtr</span><span class="br0">&#40;</span>longdata<span class="br0">&#41;</span> <span class="kw1">FROM</span> #Table <span class="kw1">WHERE</span> id <span class="sy0">&gt;</span> @id <span class="kw1">ORDER</span> <span class="kw1">BY</span> id
&nbsp; &nbsp;<span class="kw1">IF</span> <span class="kw2">@@RowCount</span> <span class="sy0">=</span> <span class="nu0">0</span> <span class="kw1">BREAK</span>
&nbsp; &nbsp;<span class="kw1">SET</span> @chunknum <span class="sy0">=</span> <span class="nu0">1</span>
&nbsp; &nbsp;<span class="kw1">WHILE</span> @chunknum <span class="sy0">&lt;=</span> <span class="nu0">5</span> <span class="kw1">BEGIN</span>
&nbsp; &nbsp; &nbsp; <span class="kw1">SET</span> @textchunk <span class="sy0">=</span> <span class="kw2">Replicate</span><span class="br0">&#40;</span><span class="kw1">Char</span><span class="br0">&#40;</span><span class="nu0">96</span> <span class="sy0">+</span> @chunknum<span class="br0">&#41;</span>, <span class="nu0">8000</span><span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; <span class="kw1">UPDATETEXT</span> #Table.<span class="me1">longdata</span> @ptr <span class="sy0">NULL</span> <span class="sy0">NULL</span> @textchunk
&nbsp; &nbsp; &nbsp; <span class="kw1">SET</span> @chunknum <span class="sy0">=</span> @chunknum <span class="sy0">+</span> <span class="nu0">1</span>
&nbsp; &nbsp;<span class="kw1">END</span>
<span class="kw1">END</span>
&nbsp;
<span class="kw1">SELECT</span> <span class="sy0">*</span> <span class="kw1">FROM</span> #Table
<span class="kw1">DROP</span> <span class="kw1">TABLE</span> #Table</pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">CREATE TABLE #Table (
   id int identity(1,1) primary key clustered,
   longdata text
)

INSERT #Table (longdata) VALUES ('data to be added to-&gt;')
INSERT #Table (longdata) VALUES ('more data-&gt;')

DECLARE
   @id int,
   @chunknum int,
   @ptr varbinary(16),
   @textchunk varchar(8000)
SET @id = 0
WHILE 1 = 1 BEGIN
   SELECT TOP 1 @id = id, @ptr = TextPtr(longdata) FROM #Table WHERE id &gt; @id ORDER BY id
   IF @@RowCount = 0 BREAK
   SET @chunknum = 1
   WHILE @chunknum &lt;= 5 BEGIN
      SET @textchunk = Replicate(Char(96 + @chunknum), 8000)
      UPDATETEXT #Table.longdata @ptr NULL NULL @textchunk
      SET @chunknum = @chunknum + 1
   END
END

SELECT * FROM #Table
DROP TABLE #Table</pre></div></div>

<p>You can see that you have to loop over each row, and then loop over each chunk of data you want to read from or write to the column.</p>
<p>Now you know the basics of handling more than 8000 characters in SQL 2000. But there are a few subtle things you should know:</p>
<p>â¢ The 8000-character limitation does not apply to literal strings, just variables and rowsets. This means that with the DisplayText stored procedure above you can put in more than 8000 characters like so:</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
</pre></td><td class="de1"><pre class="de1"><span class="kw1">EXEC</span> DisplayText <span class="st0">'&lt;more than 8000 characters here&gt;'</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">EXEC DisplayText '&lt;more than 8000 characters here&gt;'</pre></div></div>

<p>This does not mean you can somehow exceed 8000 characters with a commonly-tried but mistaken method such as</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
</pre></td><td class="de1"><pre class="de1"><span class="kw1">SELECT</span> <span class="kw1">Left</span><span class="br0">&#40;</span>longdata, <span class="nu0">8000</span><span class="br0">&#41;</span> <span class="sy0">+</span> <span class="kw2">Substring</span><span class="br0">&#40;</span>longdata, <span class="nu0">8001</span>, <span class="nu0">8000</span><span class="br0">&#41;</span> <span class="sy0">+</span> <span class="kw2">Substring</span><span class="br0">&#40;</span>longdata, <span class="nu0">16001</span>, <span class="nu0">8000</span><span class="br0">&#41;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">SELECT Left(longdata, 8000) + Substring(longdata, 8001, 8000) + Substring(longdata, 16001, 8000)</pre></div></div>

<p>Sure, this may actually temporarily create a longer string (I don&#8217;t know for sure) but the final value in the rowset will not exceed 8000 characters.</p>
<p>You can concatenate strings when submitting dynamic SQL statements:</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
</pre></td><td class="de1"><pre class="de1"><span class="kw1">DECLARE</span>
&nbsp; &nbsp;@SQL1 <span class="kw1">varchar</span><span class="br0">&#40;</span><span class="nu0">8000</span><span class="br0">&#41;</span>,
&nbsp; &nbsp;@SQL2 <span class="kw1">varchar</span><span class="br0">&#40;</span><span class="nu0">8000</span><span class="br0">&#41;</span>,
&nbsp; &nbsp;@SQL3 <span class="kw1">varchar</span><span class="br0">&#40;</span><span class="nu0">8000</span><span class="br0">&#41;</span>,
&nbsp; &nbsp;@SQL4 <span class="kw1">varchar</span><span class="br0">&#40;</span><span class="nu0">8000</span><span class="br0">&#41;</span>
&nbsp;
<span class="kw1">SET</span> @SQl1 <span class="sy0">=</span> <span class="st0">'8000 characters here'</span>
<span class="kw1">SET</span> @SQl2 <span class="sy0">=</span> <span class="st0">'8000 characters here'</span>
<span class="kw1">SET</span> @SQl3 <span class="sy0">=</span> <span class="st0">'8000 characters here'</span>
<span class="kw1">SET</span> @SQl4 <span class="sy0">=</span> <span class="st0">'8000 characters here'</span>
&nbsp;
<span class="kw1">EXEC</span> <span class="br0">&#40;</span>@SQL1 <span class="sy0">+</span> @SQL2 <span class="sy0">+</span> @SQL3 <span class="sy0">+</span> @SQL4<span class="br0">&#41;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">DECLARE
   @SQL1 varchar(8000),
   @SQL2 varchar(8000),
   @SQL3 varchar(8000),
   @SQL4 varchar(8000)

SET @SQl1 = '8000 characters here'
SET @SQl2 = '8000 characters here'
SET @SQl3 = '8000 characters here'
SET @SQl4 = '8000 characters here'

EXEC (@SQL1 + @SQL2 + @SQL3 + @SQL4)</pre></div></div>

<p>While I can&#8217;t really recommend this method, if you are desperate and this is the only way to get the job done, it&#8217;s a possibility. I&#8217;ve personally only used it in two narrow situations: creating pre-processed SQL objects where the dynamic SQL is executed rarely only when something changes, and the code it creates is static until the next change. One creates history-keeping triggers, and the other builds a standard set of pivoted views in response to changes of the metadata definitions of some web objects. Both required this method to be able to handle the number of columns possible. </p>
<p>â¢ SQL 2005 has a new &#8216;max&#8217; keyword for the length of the (n)var/char data types that allows variables to be as big as the (n)text datatype can be. You can do anything to them that you could with regular varchar types, but behind the scenes they function like the text data type with values less than 8000 characters in-row and values greater than 8000 characters stored in out-of-row pages.</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
</pre></td><td class="de1"><pre class="de1"><span class="kw1">DECLARE</span> @longdata <span class="kw1">varchar</span><span class="br0">&#40;</span><span class="kw2">max</span><span class="br0">&#41;</span>
<span class="kw1">SET</span> @longdata <span class="sy0">=</span> <span class="st0">'&lt;more than 8000 characters here&gt;'</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">DECLARE @longdata varchar(max)
SET @longdata = '&lt;more than 8000 characters here&gt;'</pre></div></div>

<p>Max here simply means that the data type can go up to the maximum storage size allowed, which is 2^31-1 bytes (minus 2 more bytes for presumably a length value). Note that you can&#8217;t specify varchar(16000) or some value over 8000. You only get between 1 and 8000, or the special identifier <em>max</em>.</p>
<p>As a practical example of using a text datatype to defeat the 8000-character limitation in MS SQL Server 2000, here is a SendMail stored procedure that will use the CDO.Message object to send email with a body longer than 8000 characters. Note: put in your mail server name or make it a parameter or perhaps make it read from a table!</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
</pre></td><td class="de1"><pre class="de1"><span class="kw1">CREATE</span> <span class="kw1">PROCEDURE</span> SendMail
&nbsp; &nbsp;@<span class="kw1">From</span> <span class="kw1">varchar</span><span class="br0">&#40;</span><span class="nu0">1000</span><span class="br0">&#41;</span>,
&nbsp; &nbsp;@<span class="kw1">To</span> <span class="kw1">varchar</span><span class="br0">&#40;</span><span class="nu0">1000</span><span class="br0">&#41;</span>,
&nbsp; &nbsp;@Subject <span class="kw1">varchar</span><span class="br0">&#40;</span><span class="nu0">1000</span><span class="br0">&#41;</span> <span class="sy0">=</span> <span class="st0">'No Subject'</span>,
&nbsp; &nbsp;@TextBody <span class="kw1">text</span> <span class="sy0">=</span> <span class="sy0">NULL</span>,
&nbsp; &nbsp;@HtmlBody <span class="kw1">text</span> <span class="sy0">=</span> <span class="sy0">NULL</span>
<span class="kw1">AS</span>
<span class="co1">-- Written by Erik E</span>
<span class="co1">-- Sends an email using the CDO.Message object and the SP_OA procedures.</span>
<span class="co1">-- Notably, accepts text input for emails longer than 8000 characters.</span>
<span class="kw1">DECLARE</span>
&nbsp; &nbsp;@CDOMessage <span class="kw1">int</span>,
&nbsp; &nbsp;@ReturnCode <span class="kw1">int</span>
&nbsp;
<span class="kw1">SET</span> @ReturnCode <span class="sy0">=</span> <span class="nu0">0</span> 
&nbsp;
<span class="kw1">EXEC</span> @ReturnCode <span class="sy0">=</span> <span class="kw3">SP_OACREATE</span> <span class="st0">'CDO.Message'</span>, @CDOMessage <span class="kw1">OUT</span>
<span class="kw1">IF</span> @ReturnCode <span class="sy0">&lt;&gt;</span> <span class="nu0">0</span> <span class="kw1">BEGIN</span> <span class="kw1">PRINT</span> dbo.<span class="me1">ObjectErrorFunc</span><span class="br0">&#40;</span>@CDOMessage, @ReturnCode, <span class="st0">'CDO.Message'</span>, <span class="sy0">NULL</span>, <span class="sy0">NULL</span><span class="br0">&#41;</span> <span class="kw1">GOTO</span> Err <span class="kw1">END</span>
&nbsp;
<span class="kw1">EXEC</span> @ReturnCode <span class="sy0">=</span> <span class="kw3">SP_OASETPROPERTY</span> @CDOMessage, <span class="st0">'From'</span>, @<span class="kw1">From</span>
<span class="kw1">IF</span> @ReturnCode <span class="sy0">&lt;&gt;</span> <span class="nu0">0</span> <span class="kw1">BEGIN</span> <span class="kw1">PRINT</span> dbo.<span class="me1">ObjectErrorFunc</span><span class="br0">&#40;</span>@CDOMessage, @ReturnCode, <span class="st0">'From'</span>, <span class="st0">'CDO.Message'</span>, @<span class="kw1">From</span><span class="br0">&#41;</span> <span class="kw1">GOTO</span> Err <span class="kw1">END</span>
&nbsp;
<span class="kw1">EXEC</span> @ReturnCode <span class="sy0">=</span> <span class="kw3">SP_OASETPROPERTY</span> @CDOMessage, <span class="st0">'To'</span>, @<span class="kw1">To</span>
<span class="kw1">IF</span> @ReturnCode <span class="sy0">&lt;&gt;</span> <span class="nu0">0</span> <span class="kw1">BEGIN</span> <span class="kw1">PRINT</span> dbo.<span class="me1">ObjectErrorFunc</span><span class="br0">&#40;</span>@CDOMessage, @ReturnCode, <span class="st0">'To'</span>, <span class="st0">'CDO.Message'</span>, @<span class="kw1">To</span><span class="br0">&#41;</span> <span class="kw1">GOTO</span> Err <span class="kw1">END</span>
&nbsp;
<span class="kw1">EXEC</span> @ReturnCode <span class="sy0">=</span> <span class="kw3">SP_OASETPROPERTY</span> @CDOMessage, <span class="st0">'Subject'</span>, @Subject
<span class="kw1">IF</span> @ReturnCode <span class="sy0">&lt;&gt;</span> <span class="nu0">0</span> <span class="kw1">BEGIN</span> <span class="kw1">PRINT</span> dbo.<span class="me1">ObjectErrorFunc</span><span class="br0">&#40;</span>@CDOMessage, @ReturnCode, <span class="st0">'Subject'</span>, <span class="st0">'CDO.Message'</span>, @Subject<span class="br0">&#41;</span> <span class="kw1">GOTO</span> Err <span class="kw1">END</span>
&nbsp;
<span class="kw1">IF</span> @TextBody <span class="kw1">IS</span> <span class="sy0">NOT</span> <span class="sy0">NULL</span> <span class="kw1">BEGIN</span>
&nbsp; &nbsp;<span class="kw1">EXEC</span> @ReturnCode <span class="sy0">=</span> <span class="kw3">SP_OASETPROPERTY</span> @CDOMessage, <span class="st0">'TextBody'</span>, @TextBody
&nbsp; &nbsp;<span class="kw1">IF</span> @ReturnCode <span class="sy0">&lt;&gt;</span> <span class="nu0">0</span> <span class="kw1">BEGIN</span> <span class="kw1">PRINT</span> dbo.<span class="me1">ObjectErrorFunc</span><span class="br0">&#40;</span>@CDOMessage, @ReturnCode, <span class="st0">'TextBody'</span>, <span class="st0">'CDO.Message'</span>, <span class="kw1">Convert</span><span class="br0">&#40;</span><span class="kw1">varchar</span><span class="br0">&#40;</span><span class="nu0">8000</span><span class="br0">&#41;</span>, @TextBody<span class="br0">&#41;</span><span class="br0">&#41;</span> <span class="kw1">GOTO</span> Err <span class="kw1">END</span>
<span class="kw1">END</span>
&nbsp;
<span class="kw1">IF</span> @HtmlBody <span class="kw1">IS</span> <span class="sy0">NOT</span> <span class="sy0">NULL</span> <span class="kw1">BEGIN</span>
&nbsp; &nbsp;<span class="kw1">EXEC</span> @ReturnCode <span class="sy0">=</span> <span class="kw3">SP_OASETPROPERTY</span> @CDOMessage, <span class="st0">'HtmlBody'</span>, @HtmlBody
&nbsp; &nbsp;<span class="kw1">IF</span> @ReturnCode <span class="sy0">&lt;&gt;</span> <span class="nu0">0</span> <span class="kw1">BEGIN</span> <span class="kw1">PRINT</span> dbo.<span class="me1">ObjectErrorFunc</span><span class="br0">&#40;</span>@CDOMessage, @ReturnCode, <span class="st0">'HtmlBody'</span>, <span class="st0">'CDO.Message'</span>, <span class="kw1">Convert</span><span class="br0">&#40;</span><span class="kw1">varchar</span><span class="br0">&#40;</span><span class="nu0">8000</span><span class="br0">&#41;</span>, @HtmlBody<span class="br0">&#41;</span><span class="br0">&#41;</span> <span class="kw1">GOTO</span> Err <span class="kw1">END</span>
<span class="kw1">END</span>
&nbsp;
<span class="kw1">EXEC</span> @ReturnCode <span class="sy0">=</span> <span class="kw3">SP_OASETPROPERTY</span> @CDOMessage, <span class="st0">'Configuration.Fields(&quot;http://schemas.microsoft.com/cdo/configuration/sendusing&quot;).Value'</span>, <span class="st0">'2'</span>
<span class="kw1">IF</span> @ReturnCode <span class="sy0">&lt;&gt;</span> <span class="nu0">0</span> <span class="kw1">BEGIN</span> <span class="kw1">PRINT</span> dbo.<span class="me1">ObjectErrorFunc</span><span class="br0">&#40;</span>@CDOMessage, @ReturnCode, <span class="st0">'Configuration.Fields(&quot;http://schemas.microsoft.com/cdo/configuration/sendusing&quot;).Value'</span>, <span class="st0">'CDO.Message'</span>, <span class="st0">'2'</span><span class="br0">&#41;</span> <span class="kw1">GOTO</span> Err <span class="kw1">END</span>
&nbsp;
<span class="kw1">EXEC</span> @ReturnCode <span class="sy0">=</span> <span class="kw3">SP_OASETPROPERTY</span> @CDOMessage, <span class="st0">'Configuration.Fields(&quot;http://schemas.microsoft.com/cdo/configuration/smtpserver&quot;).Value'</span>, <span class="st0">'YourMailServerName'</span>
<span class="kw1">IF</span> @ReturnCode <span class="sy0">&lt;&gt;</span> <span class="nu0">0</span> <span class="kw1">BEGIN</span> <span class="kw1">PRINT</span> dbo.<span class="me1">ObjectErrorFunc</span><span class="br0">&#40;</span>@CDOMessage, @ReturnCode, <span class="st0">'Configuration.Fields(&quot;http://schemas.microsoft.com/cdo/configuration/smtpserver&quot;).Value'</span>, <span class="st0">'CDO.Message'</span>, <span class="st0">'YourMailServerName'</span><span class="br0">&#41;</span> <span class="kw1">GOTO</span> Err <span class="kw1">END</span>
&nbsp;
<span class="kw1">EXEC</span> @ReturnCode <span class="sy0">=</span> <span class="kw3">SP_OASETPROPERTY</span> @CDOMessage, <span class="st0">'Configuration.Fields(&quot;http://schemas.microsoft.com/cdo/configuration/smtpserverport&quot;).Value'</span>, <span class="st0">'25'</span>
<span class="kw1">IF</span> @ReturnCode <span class="sy0">&lt;&gt;</span> <span class="nu0">0</span> <span class="kw1">BEGIN</span> <span class="kw1">PRINT</span> dbo.<span class="me1">ObjectErrorFunc</span><span class="br0">&#40;</span>@CDOMessage, @ReturnCode, <span class="st0">'Configuration.Fields(&quot;http://schemas.microsoft.com/cdo/configuration/smtpserverport&quot;).Value'</span>, <span class="st0">'CDO.Message'</span>, <span class="st0">'25'</span><span class="br0">&#41;</span> <span class="kw1">GOTO</span> Err <span class="kw1">END</span>
&nbsp;
<span class="kw1">EXEC</span> @ReturnCode <span class="sy0">=</span> <span class="kw3">SP_OAMETHOD</span> @CDOMessage, <span class="st0">'Configuration.Fields.Update'</span>
<span class="kw1">IF</span> @ReturnCode <span class="sy0">&lt;&gt;</span> <span class="nu0">0</span> <span class="kw1">BEGIN</span> <span class="kw1">PRINT</span> dbo.<span class="me1">ObjectErrorFunc</span><span class="br0">&#40;</span>@CDOMessage, @ReturnCode, <span class="st0">'Configuration.Fields.Update'</span>, <span class="st0">'CDO.Message'</span>, <span class="sy0">NULL</span><span class="br0">&#41;</span> <span class="kw1">GOTO</span> Err <span class="kw1">END</span>
&nbsp;
<span class="kw1">EXEC</span> @ReturnCode <span class="sy0">=</span> <span class="kw3">SP_OAMETHOD</span> @CDOMessage, <span class="st0">'Send'</span>
<span class="kw1">IF</span> @ReturnCode <span class="sy0">&lt;&gt;</span> <span class="nu0">0</span> <span class="kw1">BEGIN</span> <span class="kw1">PRINT</span> dbo.<span class="me1">ObjectErrorFunc</span><span class="br0">&#40;</span>@CDOMessage, @ReturnCode, <span class="st0">'Send'</span>, <span class="st0">'CDO.Message'</span>, <span class="sy0">NULL</span><span class="br0">&#41;</span> <span class="kw1">GOTO</span> Err <span class="kw1">END</span>
&nbsp;
Err:
<span class="kw1">SET</span> @ReturnCode <span class="sy0">=</span> <span class="nu0">0</span>
<span class="kw1">IF</span> @CDOMessage <span class="sy0">&lt;&gt;</span> <span class="nu0">0</span> <span class="kw1">EXEC</span> @ReturnCode <span class="sy0">=</span> <span class="kw3">SP_OADESTROY</span> @CDOMessage
<span class="kw1">IF</span> @ReturnCode <span class="sy0">&lt;&gt;</span> <span class="nu0">0</span> <span class="kw1">BEGIN</span> <span class="kw1">PRINT</span> dbo.<span class="me1">ObjectErrorFunc</span><span class="br0">&#40;</span>@CDOMessage, @ReturnCode, <span class="st0">'CDO.Message'</span>, <span class="sy0">NULL</span>, <span class="sy0">NULL</span><span class="br0">&#41;</span> <span class="kw1">END</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">CREATE PROCEDURE SendMail
   @From varchar(1000),
   @To varchar(1000),
   @Subject varchar(1000) = 'No Subject',
   @TextBody text = NULL,
   @HtmlBody text = NULL
AS
-- Written by Erik E
-- Sends an email using the CDO.Message object and the SP_OA procedures.
-- Notably, accepts text input for emails longer than 8000 characters.
DECLARE
   @CDOMessage int,
   @ReturnCode int

SET @ReturnCode = 0 

EXEC @ReturnCode = SP_OACREATE 'CDO.Message', @CDOMessage OUT
IF @ReturnCode &lt;&gt; 0 BEGIN PRINT dbo.ObjectErrorFunc(@CDOMessage, @ReturnCode, 'CDO.Message', NULL, NULL) GOTO Err END

EXEC @ReturnCode = SP_OASETPROPERTY @CDOMessage, 'From', @From
IF @ReturnCode &lt;&gt; 0 BEGIN PRINT dbo.ObjectErrorFunc(@CDOMessage, @ReturnCode, 'From', 'CDO.Message', @From) GOTO Err END

EXEC @ReturnCode = SP_OASETPROPERTY @CDOMessage, 'To', @To
IF @ReturnCode &lt;&gt; 0 BEGIN PRINT dbo.ObjectErrorFunc(@CDOMessage, @ReturnCode, 'To', 'CDO.Message', @To) GOTO Err END

EXEC @ReturnCode = SP_OASETPROPERTY @CDOMessage, 'Subject', @Subject
IF @ReturnCode &lt;&gt; 0 BEGIN PRINT dbo.ObjectErrorFunc(@CDOMessage, @ReturnCode, 'Subject', 'CDO.Message', @Subject) GOTO Err END

IF @TextBody IS NOT NULL BEGIN
   EXEC @ReturnCode = SP_OASETPROPERTY @CDOMessage, 'TextBody', @TextBody
   IF @ReturnCode &lt;&gt; 0 BEGIN PRINT dbo.ObjectErrorFunc(@CDOMessage, @ReturnCode, 'TextBody', 'CDO.Message', Convert(varchar(8000), @TextBody)) GOTO Err END
END

IF @HtmlBody IS NOT NULL BEGIN
   EXEC @ReturnCode = SP_OASETPROPERTY @CDOMessage, 'HtmlBody', @HtmlBody
   IF @ReturnCode &lt;&gt; 0 BEGIN PRINT dbo.ObjectErrorFunc(@CDOMessage, @ReturnCode, 'HtmlBody', 'CDO.Message', Convert(varchar(8000), @HtmlBody)) GOTO Err END
END

EXEC @ReturnCode = SP_OASETPROPERTY @CDOMessage, 'Configuration.Fields("http://schemas.microsoft.com/cdo/configuration/sendusing").Value', '2'
IF @ReturnCode &lt;&gt; 0 BEGIN PRINT dbo.ObjectErrorFunc(@CDOMessage, @ReturnCode, 'Configuration.Fields("http://schemas.microsoft.com/cdo/configuration/sendusing").Value', 'CDO.Message', '2') GOTO Err END

EXEC @ReturnCode = SP_OASETPROPERTY @CDOMessage, 'Configuration.Fields("http://schemas.microsoft.com/cdo/configuration/smtpserver").Value', 'YourMailServerName'
IF @ReturnCode &lt;&gt; 0 BEGIN PRINT dbo.ObjectErrorFunc(@CDOMessage, @ReturnCode, 'Configuration.Fields("http://schemas.microsoft.com/cdo/configuration/smtpserver").Value', 'CDO.Message', 'YourMailServerName') GOTO Err END

EXEC @ReturnCode = SP_OASETPROPERTY @CDOMessage, 'Configuration.Fields("http://schemas.microsoft.com/cdo/configuration/smtpserverport").Value', '25'
IF @ReturnCode &lt;&gt; 0 BEGIN PRINT dbo.ObjectErrorFunc(@CDOMessage, @ReturnCode, 'Configuration.Fields("http://schemas.microsoft.com/cdo/configuration/smtpserverport").Value', 'CDO.Message', '25') GOTO Err END

EXEC @ReturnCode = SP_OAMETHOD @CDOMessage, 'Configuration.Fields.Update'
IF @ReturnCode &lt;&gt; 0 BEGIN PRINT dbo.ObjectErrorFunc(@CDOMessage, @ReturnCode, 'Configuration.Fields.Update', 'CDO.Message', NULL) GOTO Err END

EXEC @ReturnCode = SP_OAMETHOD @CDOMessage, 'Send'
IF @ReturnCode &lt;&gt; 0 BEGIN PRINT dbo.ObjectErrorFunc(@CDOMessage, @ReturnCode, 'Send', 'CDO.Message', NULL) GOTO Err END

Err:
SET @ReturnCode = 0
IF @CDOMessage &lt;&gt; 0 EXEC @ReturnCode = SP_OADESTROY @CDOMessage
IF @ReturnCode &lt;&gt; 0 BEGIN PRINT dbo.ObjectErrorFunc(@CDOMessage, @ReturnCode, 'CDO.Message', NULL, NULL) END</pre></div></div>

<p>The error handling here after each SP_OA SP call uses a custom function I wrote. I found it to be invaluable when debugging problems with OLE calls to various objects from SQL Server. You may either tear out this error handling, call the sp_OAGetErrorInfo procedure yourself, or use mine, which is below (plus a couple of dependent functions that you may want to rewrite/modify/reimplement/stop using).</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
</pre></td><td class="de1"><pre class="de1"><span class="kw1">CREATE</span> <span class="kw1">FUNCTION</span> <span class="br0">&#91;</span>dbo<span class="br0">&#93;</span>.<span class="br0">&#91;</span>ObjectErrorFunc<span class="br0">&#93;</span> <span class="br0">&#40;</span>
&nbsp; &nbsp;@<span class="kw1">Object</span> <span class="kw1">int</span>,
&nbsp; &nbsp;@ReturnCode <span class="kw1">int</span>,
&nbsp; &nbsp;@Context <span class="kw1">varchar</span><span class="br0">&#40;</span><span class="nu0">1000</span><span class="br0">&#41;</span>, <span class="co1">-- Property or Method</span>
&nbsp; &nbsp;@ObjectType <span class="kw1">varchar</span><span class="br0">&#40;</span><span class="nu0">8000</span><span class="br0">&#41;</span>, <span class="co1">-- Object Name, when known</span>
&nbsp; &nbsp;@<span class="kw1">Value</span> <span class="kw1">sql_variant</span> <span class="co1">-- Parameter value, if known</span>
<span class="br0">&#41;</span>
<span class="kw1">RETURNS</span> <span class="kw1">varchar</span><span class="br0">&#40;</span><span class="nu0">8000</span><span class="br0">&#41;</span>
<span class="kw1">AS</span>
<span class="co1">-- Written by Erik E</span>
<span class="co1">-- Makes (more) sense out of error codes when using the OLE sp_OA procedures.</span>
<span class="co1">-- Sometimes the message returned by sp_OAGetErrorInfo is cryptic, so this</span>
<span class="co1">-- &nbsp; &nbsp;function is a place where researched information on errors can be saved</span>
<span class="co1">-- &nbsp; &nbsp;for future reference.</span>
<span class="kw1">BEGIN</span>
&nbsp; &nbsp;<span class="kw1">DECLARE</span>
&nbsp; &nbsp; &nbsp; @ErrorMessage <span class="kw1">varchar</span><span class="br0">&#40;</span><span class="nu0">8000</span><span class="br0">&#41;</span>,
&nbsp; &nbsp; &nbsp; @ErrorCode <span class="kw1">binary</span><span class="br0">&#40;</span><span class="nu0">4</span><span class="br0">&#41;</span>,
&nbsp; &nbsp; &nbsp; @Source <span class="kw1">varchar</span><span class="br0">&#40;</span><span class="nu0">8000</span><span class="br0">&#41;</span>,
&nbsp; &nbsp; &nbsp; @Description <span class="kw1">varchar</span><span class="br0">&#40;</span><span class="nu0">8000</span><span class="br0">&#41;</span>
&nbsp;
&nbsp; &nbsp;<span class="kw1">SET</span> @ErrorCode <span class="sy0">=</span> <span class="kw1">convert</span><span class="br0">&#40;</span><span class="kw1">binary</span><span class="br0">&#40;</span><span class="nu0">4</span><span class="br0">&#41;</span>, @ReturnCode<span class="br0">&#41;</span>
&nbsp;
&nbsp; &nbsp;<span class="kw1">EXEC</span> <span class="kw3">sp_OAGetErrorInfo</span>
&nbsp; &nbsp; &nbsp; @<span class="kw1">Object</span>,
&nbsp; &nbsp; &nbsp; @Source <span class="kw1">OUTPUT</span>,
&nbsp; &nbsp; &nbsp; @Description <span class="kw1">OUTPUT</span>
&nbsp;
&nbsp; &nbsp; &nbsp; <span class="kw1">SET</span> @Context <span class="sy0">=</span> <span class="kw1">Coalesce</span><span class="br0">&#40;</span><span class="kw1">NullIf</span><span class="br0">&#40;</span>@Context, <span class="st0">''</span><span class="br0">&#41;</span>, @Source, <span class="st0">'OLE Unknown Source'</span><span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; <span class="kw1">SELECT</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;@ErrorMessage <span class="sy0">=</span> 
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; IsNull<span class="br0">&#40;</span>@Source, <span class="st0">'OLE Unknown Source'</span><span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="sy0">+</span> <span class="st0">' Error '</span> <span class="sy0">+</span> IsNull<span class="br0">&#40;</span><span class="st0">'0x'</span> <span class="sy0">+</span> dbo.<span class="me1">BinaryToHex</span><span class="br0">&#40;</span>@ErrorCode<span class="br0">&#41;</span>, <span class="st0">'0x???????'</span><span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="sy0">+</span> <span class="st0">' - '</span> <span class="sy0">+</span> <span class="kw1">Coalesce</span><span class="br0">&#40;</span>Descr, <span class="kw2">LTrim</span><span class="br0">&#40;</span>@Description<span class="br0">&#41;</span>, <span class="st0">'Unknown Error'</span><span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; <span class="kw1">FROM</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span class="br0">&#40;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">SELECT</span> Error <span class="sy0">=</span> @ErrorCode
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span class="br0">&#41;</span> E <span class="kw1">LEFT</span> <span class="sy0">JOIN</span> <span class="br0">&#40;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">SELECT</span> Error <span class="sy0">=</span> <span class="kw1">convert</span><span class="br0">&#40;</span><span class="kw1">binary</span><span class="br0">&#40;</span><span class="nu0">4</span><span class="br0">&#41;</span>, 0x80004005<span class="br0">&#41;</span>, Descr <span class="sy0">=</span> <span class="kw1">convert</span><span class="br0">&#40;</span><span class="kw1">varchar</span><span class="br0">&#40;</span><span class="nu0">8000</span><span class="br0">&#41;</span>, <span class="st0">'Invalid OLE object handle: The specified handle value ('</span> <span class="sy0">+</span> <span class="kw1">convert</span><span class="br0">&#40;</span><span class="kw1">varchar</span><span class="br0">&#40;</span><span class="nu0">8000</span><span class="br0">&#41;</span>, @<span class="kw1">Object</span><span class="br0">&#41;</span> <span class="sy0">+</span> <span class="st0">') does not refer to a valid OLE object.'</span><span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">UNION</span> <span class="sy0">ALL</span> <span class="kw1">SELECT</span> 0x80010108, <span class="st0">'The object invoked has disconnected from its clients: The previously valid referenced object has closed or stopped running since the last reference.'</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">UNION</span> <span class="sy0">ALL</span> <span class="kw1">SELECT</span> 0x80020003, <span class="st0">'Invalid property or method: property or method '</span><span class="st0">''</span> <span class="sy0">+</span> @Context <span class="sy0">+</span> <span class="st0">''</span><span class="st0">' was not found'</span> <span class="sy0">+</span> IsNull<span class="br0">&#40;</span><span class="st0">' on OLE object of type '</span><span class="st0">''</span> <span class="sy0">+</span> @ObjectType <span class="sy0">+</span> <span class="st0">'.'</span><span class="st0">''</span>, <span class="st0">'.'</span><span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">UNION</span> <span class="sy0">ALL</span> <span class="kw1">SELECT</span> 0x80020005, <span class="st0">'Type mismatch: data type of a Transact-SQL local variable used to store a return value of property or method '</span><span class="st0">''</span> <span class="sy0">+</span> @Context <span class="sy0">+</span> <span class="st0">''</span><span class="st0">' did not match the Visual Basic data type of the property or method return value. Or, the return value of property or method '</span><span class="st0">''</span> <span class="sy0">+</span> @Context <span class="sy0">+</span> <span class="st0">''</span><span class="st0">' was requested, but it does not return a value.'</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">UNION</span> <span class="sy0">ALL</span> <span class="kw1">SELECT</span> 0x80020006, <span class="st0">'Unknown name: property or method '</span><span class="st0">''</span> <span class="sy0">+</span> @Context <span class="sy0">+</span> <span class="st0">''</span><span class="st0">' was not found for the specified object'</span> <span class="sy0">+</span> IsNull<span class="br0">&#40;</span><span class="st0">' '</span><span class="st0">''</span> <span class="sy0">+</span> @ObjectType <span class="sy0">+</span> <span class="st0">'.'</span><span class="st0">''</span>, <span class="sy0">+</span> <span class="st0">'.'</span><span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span class="kw1">UNION</span> <span class="sy0">ALL</span> <span class="kw1">SELECT</span> 0x80020008, <span class="st0">'Bad variable type: data type of a Transact-SQL value passed as a method parameter was NULL or did not match the MicrosoftÂ® Visual BasicÂ® method parameter data type.'</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">UNION</span> <span class="sy0">ALL</span> <span class="kw1">SELECT</span> 0x8002000B, <span class="st0">''</span><span class="st0">'Subscript out of range'</span><span class="st0">' on property or method '</span><span class="st0">''</span> <span class="sy0">+</span> @Context <span class="sy0">+</span> IsNull<span class="br0">&#40;</span><span class="st0">''</span><span class="st0">' of object type '</span><span class="st0">''</span> <span class="sy0">+</span> @ObjectType, <span class="st0">''</span><span class="br0">&#41;</span> <span class="sy0">+</span> <span class="st0">'.'</span><span class="st0">''</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">UNION</span> <span class="sy0">ALL</span> <span class="kw1">SELECT</span> 0x8002000E, <span class="st0">'Invalid number of parameters on property or method '</span><span class="st0">''</span> <span class="sy0">+</span> @Context <span class="sy0">+</span> IsNull<span class="br0">&#40;</span><span class="st0">''</span><span class="st0">' of object type '</span><span class="st0">''</span> <span class="sy0">+</span> @ObjectType, <span class="st0">''</span><span class="br0">&#41;</span> <span class="sy0">+</span> <span class="st0">'.'</span><span class="st0">''</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">UNION</span> <span class="sy0">ALL</span> <span class="kw1">SELECT</span> 0x80020011, <span class="st0">''</span><span class="st0">'Does not support a collection'</span><span class="st0">' on property or method '</span><span class="st0">''</span> <span class="sy0">+</span> @Context <span class="sy0">+</span> IsNull<span class="br0">&#40;</span><span class="st0">''</span><span class="st0">' of object type '</span><span class="st0">''</span> <span class="sy0">+</span> @ObjectType, <span class="st0">''</span><span class="br0">&#41;</span> <span class="sy0">+</span> <span class="st0">'.'</span><span class="st0">''</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">UNION</span> <span class="sy0">ALL</span> <span class="kw1">SELECT</span> 0x80040220, <span class="st0">'The &quot;SendUsing&quot; configuration value is invalid.'</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">UNION</span> <span class="sy0">ALL</span> <span class="kw1">SELECT</span> 0x80080005, <span class="st0">'Server execution failed: OLE object '</span><span class="st0">''</span> <span class="sy0">+</span> @Context <span class="sy0">+</span> <span class="st0">''</span><span class="st0">' is registered as a local OLE server (.exe file) but the .exe file could not be found or started.'</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">UNION</span> <span class="sy0">ALL</span> <span class="kw1">SELECT</span> 0x80040154, <span class="st0">'Class '</span><span class="st0">''</span> <span class="sy0">+</span> @Context <span class="sy0">+</span> <span class="st0">''</span><span class="st0">' not registered.'</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">UNION</span> <span class="sy0">ALL</span> <span class="kw1">SELECT</span> 0x800401F3, <span class="st0">'Invalid class string: OLE object ProgID/CLSID '</span><span class="st0">''</span> <span class="sy0">+</span> @Context <span class="sy0">+</span> <span class="st0">''</span><span class="st0">' is not registered on Server '</span><span class="st0">''</span> <span class="sy0">+</span> <span class="kw2">@@ServerName</span> <span class="sy0">+</span> <span class="st0">''</span><span class="st0">'. OLE automation servers need to be registered before they can be instantiated using sp_OACreate. This can be done using regsvr32.exe for inprocess (.dll) servers, or the /REGSERVER command-line switch for local (.exe) servers.'</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">UNION</span> <span class="sy0">ALL</span> <span class="kw1">SELECT</span> 0x8004275B, <span class="st0">'sp_OACreate - data type ('</span> <span class="sy0">+</span> @Context <span class="sy0">+</span> <span class="st0">') or value '</span> <span class="sy0">+</span> IsNull<span class="br0">&#40;</span><span class="st0">'('</span> <span class="sy0">+</span> <span class="kw1">Convert</span><span class="br0">&#40;</span><span class="kw1">varchar</span><span class="br0">&#40;</span><span class="nu0">8000</span><span class="br0">&#41;</span>, @<span class="kw1">Value</span><span class="br0">&#41;</span> <span class="sy0">+</span> <span class="st0">')'</span>, <span class="st0">''</span><span class="br0">&#41;</span> <span class="sy0">+</span> <span class="st0">' of parameter '</span><span class="st0">'context'</span><span class="st0">' is invalid. Valid context parameter values are 1, 4, and 5.'</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">UNION</span> <span class="sy0">ALL</span> <span class="kw1">SELECT</span> 0x80042727, <span class="st0">'sp_OASetProperty - improper usage: parameters are ObjPointer int IN, PropertyName varchar IN, @setval &lt;any&gt; IN [, additional indexing IN params].'</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">UNION</span> <span class="sy0">ALL</span> <span class="kw1">SELECT</span> 0x80042731, <span class="st0">'Output values of type Object require output parameters of type int.'</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">UNION</span> <span class="sy0">ALL</span> <span class="kw1">SELECT</span> 0x80042732, <span class="st0">'Output values of type Object are not allowed in result sets. Use a variable for parameter '</span><span class="st0">'returnvalue'</span><span class="st0">' with the OUTPUT keyword in order to return a handle to an object.'</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">UNION</span> <span class="sy0">ALL</span> <span class="kw1">SELECT</span> 0x80042742, <span class="st0">'Traversal string: &nbsp;Bad whitespace: Error parsing method or property specification string '</span><span class="st0">''</span> <span class="sy0">+</span> @Context <span class="sy0">+</span> <span class="st0">'.'</span><span class="st0">''</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">UNION</span> <span class="sy0">ALL</span> <span class="kw1">SELECT</span> 0x8007007E, <span class="st0">'Module could not be found: OLE object '</span><span class="st0">''</span> <span class="sy0">+</span> @Context <span class="sy0">+</span> <span class="st0">''</span><span class="st0">' is registered as an in-process OLE server (.dll file), but the .dll file could not be found or loaded.'</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span class="br0">&#41;</span> &nbsp;X <span class="kw1">ON</span> E.<span class="me1">Error</span> <span class="sy0">=</span> X.<span class="me1">Error</span>
&nbsp; &nbsp;<span class="kw1">RETURN</span> @ErrorMessage
<span class="kw1">END</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">CREATE FUNCTION [dbo].[ObjectErrorFunc] (
   @Object int,
   @ReturnCode int,
   @Context varchar(1000), -- Property or Method
   @ObjectType varchar(8000), -- Object Name, when known
   @Value sql_variant -- Parameter value, if known
)
RETURNS varchar(8000)
AS
-- Written by Erik E
-- Makes (more) sense out of error codes when using the OLE sp_OA procedures.
-- Sometimes the message returned by sp_OAGetErrorInfo is cryptic, so this
--    function is a place where researched information on errors can be saved
--    for future reference.
BEGIN
   DECLARE
      @ErrorMessage varchar(8000),
      @ErrorCode binary(4),
      @Source varchar(8000),
      @Description varchar(8000)

   SET @ErrorCode = convert(binary(4), @ReturnCode)

   EXEC sp_OAGetErrorInfo
      @Object,
      @Source OUTPUT,
      @Description OUTPUT

      SET @Context = Coalesce(NullIf(@Context, ''), @Source, 'OLE Unknown Source')
      SELECT
         @ErrorMessage = 
            IsNull(@Source, 'OLE Unknown Source')
            + ' Error ' + IsNull('0x' + dbo.BinaryToHex(@ErrorCode), '0x???????')
            + ' - ' + Coalesce(Descr, LTrim(@Description), 'Unknown Error')
      FROM
         (
            SELECT Error = @ErrorCode
         ) E LEFT JOIN (
            SELECT Error = convert(binary(4), 0x80004005), Descr = convert(varchar(8000), 'Invalid OLE object handle: The specified handle value (' + convert(varchar(8000), @Object) + ') does not refer to a valid OLE object.')
            UNION ALL SELECT 0x80010108, 'The object invoked has disconnected from its clients: The previously valid referenced object has closed or stopped running since the last reference.'
            UNION ALL SELECT 0x80020003, 'Invalid property or method: property or method ''' + @Context + ''' was not found' + IsNull(' on OLE object of type ''' + @ObjectType + '.''', '.')
            UNION ALL SELECT 0x80020005, 'Type mismatch: data type of a Transact-SQL local variable used to store a return value of property or method ''' + @Context + ''' did not match the Visual Basic data type of the property or method return value. Or, the return value of property or method ''' + @Context + ''' was requested, but it does not return a value.'
            UNION ALL SELECT 0x80020006, 'Unknown name: property or method ''' + @Context + ''' was not found for the specified object' + IsNull(' ''' + @ObjectType + '.''', + '.')
             UNION ALL SELECT 0x80020008, 'Bad variable type: data type of a Transact-SQL value passed as a method parameter was NULL or did not match the MicrosoftÂ® Visual BasicÂ® method parameter data type.'
            UNION ALL SELECT 0x8002000B, '''Subscript out of range'' on property or method ''' + @Context + IsNull(''' of object type ''' + @ObjectType, '') + '.'''
            UNION ALL SELECT 0x8002000E, 'Invalid number of parameters on property or method ''' + @Context + IsNull(''' of object type ''' + @ObjectType, '') + '.'''
            UNION ALL SELECT 0x80020011, '''Does not support a collection'' on property or method ''' + @Context + IsNull(''' of object type ''' + @ObjectType, '') + '.'''
            UNION ALL SELECT 0x80040220, 'The "SendUsing" configuration value is invalid.'
            UNION ALL SELECT 0x80080005, 'Server execution failed: OLE object ''' + @Context + ''' is registered as a local OLE server (.exe file) but the .exe file could not be found or started.'
            UNION ALL SELECT 0x80040154, 'Class ''' + @Context + ''' not registered.'
            UNION ALL SELECT 0x800401F3, 'Invalid class string: OLE object ProgID/CLSID ''' + @Context + ''' is not registered on Server ''' + @@ServerName + '''. OLE automation servers need to be registered before they can be instantiated using sp_OACreate. This can be done using regsvr32.exe for inprocess (.dll) servers, or the /REGSERVER command-line switch for local (.exe) servers.'
            UNION ALL SELECT 0x8004275B, 'sp_OACreate - data type (' + @Context + ') or value ' + IsNull('(' + Convert(varchar(8000), @Value) + ')', '') + ' of parameter ''context'' is invalid. Valid context parameter values are 1, 4, and 5.'
            UNION ALL SELECT 0x80042727, 'sp_OASetProperty - improper usage: parameters are ObjPointer int IN, PropertyName varchar IN, @setval &lt;any&gt; IN [, additional indexing IN params].'
            UNION ALL SELECT 0x80042731, 'Output values of type Object require output parameters of type int.'
            UNION ALL SELECT 0x80042732, 'Output values of type Object are not allowed in result sets. Use a variable for parameter ''returnvalue'' with the OUTPUT keyword in order to return a handle to an object.'
            UNION ALL SELECT 0x80042742, 'Traversal string:  Bad whitespace: Error parsing method or property specification string ''' + @Context + '.'''
            UNION ALL SELECT 0x8007007E, 'Module could not be found: OLE object ''' + @Context + ''' is registered as an in-process OLE server (.dll file), but the .dll file could not be found or loaded.'
         )  X ON E.Error = X.Error
   RETURN @ErrorMessage
END</pre></div></div>


<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
</pre></td><td class="de1"><pre class="de1"><span class="kw1">CREATE</span> <span class="kw1">FUNCTION</span> <span class="br0">&#91;</span>dbo<span class="br0">&#93;</span>.<span class="br0">&#91;</span>NumberToHex<span class="br0">&#93;</span> <span class="br0">&#40;</span>@Number <span class="kw1">sql_variant</span><span class="br0">&#41;</span>
<span class="kw1">RETURNS</span> <span class="kw1">varchar</span><span class="br0">&#40;</span><span class="nu0">72</span><span class="br0">&#41;</span>
<span class="kw1">AS</span>
<span class="co1">-- Written by Erik E</span>
<span class="co1">-- Converts a value to its hex string representation</span>
<span class="kw1">BEGIN</span>
&nbsp; &nbsp;<span class="kw1">DECLARE</span>
&nbsp; &nbsp; &nbsp; @Hex <span class="kw1">varchar</span><span class="br0">&#40;</span><span class="nu0">72</span><span class="br0">&#41;</span>,
&nbsp; &nbsp; &nbsp; @Pos <span class="kw1">int</span>,
&nbsp; &nbsp; &nbsp; @Num <span class="kw1">decimal</span><span class="br0">&#40;</span><span class="nu0">38</span>, <span class="nu0">0</span><span class="br0">&#41;</span>,
&nbsp; &nbsp; &nbsp; @HexChar <span class="kw1">tinyint</span>
&nbsp; &nbsp;<span class="kw1">SET</span> @Pos <span class="sy0">=</span> DataLength<span class="br0">&#40;</span>@Number<span class="br0">&#41;</span> <span class="sy0">*</span> <span class="nu0">2</span>
&nbsp; &nbsp;<span class="kw1">SET</span> @Num <span class="sy0">=</span> <span class="kw1">convert</span><span class="br0">&#40;</span><span class="kw1">decimal</span><span class="br0">&#40;</span><span class="nu0">38</span>,<span class="nu0">0</span><span class="br0">&#41;</span>, @Number<span class="br0">&#41;</span>
&nbsp; &nbsp;<span class="kw1">WHILE</span> @Pos <span class="sy0">&gt;</span> <span class="nu0">0</span> <span class="kw1">BEGIN</span>
&nbsp; &nbsp; &nbsp; <span class="kw1">SET</span> @HexChar <span class="sy0">=</span> @Num <span class="sy0">-</span> <span class="br0">&#40;</span><span class="kw2">Floor</span><span class="br0">&#40;</span>@Num <span class="sy0">/</span> <span class="kw1">Convert</span><span class="br0">&#40;</span><span class="kw1">decimal</span><span class="br0">&#40;</span><span class="nu0">38</span>, <span class="nu0">0</span><span class="br0">&#41;</span>, <span class="nu0">16</span><span class="br0">&#41;</span><span class="br0">&#41;</span> <span class="sy0">*</span> <span class="kw1">Convert</span><span class="br0">&#40;</span><span class="kw1">decimal</span><span class="br0">&#40;</span><span class="nu0">38</span>, <span class="nu0">0</span><span class="br0">&#41;</span>, <span class="nu0">16</span><span class="br0">&#41;</span><span class="br0">&#41;</span> <span class="sy0">+</span> <span class="nu0">48</span>
&nbsp; &nbsp; &nbsp; <span class="kw1">SET</span> @Hex <span class="sy0">=</span> <span class="kw1">Char</span><span class="br0">&#40;</span>@HexChar <span class="sy0">+</span> <span class="kw1">CASE</span> <span class="kw1">WHEN</span> @HexChar <span class="sy0">&gt;=</span> <span class="nu0">58</span> <span class="kw1">THEN</span> <span class="nu0">7</span> <span class="kw1">ELSE</span> <span class="nu0">0</span> <span class="kw1">END</span><span class="br0">&#41;</span> <span class="sy0">+</span> IsNull<span class="br0">&#40;</span>@Hex, <span class="st0">''</span><span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; <span class="kw1">SET</span> @Num <span class="sy0">=</span> <span class="kw2">Floor</span><span class="br0">&#40;</span>@Num <span class="sy0">/</span> <span class="nu0">16</span><span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; <span class="kw1">SET</span> @Pos <span class="sy0">=</span> @Pos <span class="sy0">-</span> <span class="nu0">1</span>
&nbsp; &nbsp;<span class="kw1">END</span>
&nbsp; &nbsp;<span class="kw1">RETURN</span> @Hex
<span class="kw1">END</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">CREATE FUNCTION [dbo].[NumberToHex] (@Number sql_variant)
RETURNS varchar(72)
AS
-- Written by Erik E
-- Converts a value to its hex string representation
BEGIN
   DECLARE
      @Hex varchar(72),
      @Pos int,
      @Num decimal(38, 0),
      @HexChar tinyint
   SET @Pos = DataLength(@Number) * 2
   SET @Num = convert(decimal(38,0), @Number)
   WHILE @Pos &gt; 0 BEGIN
      SET @HexChar = @Num - (Floor(@Num / Convert(decimal(38, 0), 16)) * Convert(decimal(38, 0), 16)) + 48
      SET @Hex = Char(@HexChar + CASE WHEN @HexChar &gt;= 58 THEN 7 ELSE 0 END) + IsNull(@Hex, '')
      SET @Num = Floor(@Num / 16)
      SET @Pos = @Pos - 1
   END
   RETURN @Hex
END</pre></div></div>


<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
</pre></td><td class="de1"><pre class="de1"><span class="kw1">CREATE</span> <span class="kw1">FUNCTION</span> <span class="br0">&#91;</span>dbo<span class="br0">&#93;</span>.<span class="br0">&#91;</span>BinaryToHex<span class="br0">&#93;</span> <span class="br0">&#40;</span>@Number <span class="kw1">varbinary</span><span class="br0">&#40;</span><span class="nu0">32</span><span class="br0">&#41;</span><span class="br0">&#41;</span>
<span class="kw1">RETURNS</span> <span class="kw1">varchar</span><span class="br0">&#40;</span><span class="nu0">72</span><span class="br0">&#41;</span>
<span class="kw1">AS</span>
<span class="co1">-- Written by Erik E</span>
<span class="co1">-- Converts varbinary to its hex string representation</span>
<span class="kw1">BEGIN</span>
&nbsp; &nbsp;<span class="kw1">RETURN</span> dbo.<span class="me1">NumberToHex</span><span class="br0">&#40;</span><span class="kw1">Convert</span><span class="br0">&#40;</span><span class="kw1">int</span>, @Number<span class="br0">&#41;</span><span class="br0">&#41;</span>
<span class="kw1">END</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">CREATE FUNCTION [dbo].[BinaryToHex] (@Number varbinary(32))
RETURNS varchar(72)
AS
-- Written by Erik E
-- Converts varbinary to its hex string representation
BEGIN
   RETURN dbo.NumberToHex(Convert(int, @Number))
END</pre></div></div>

<p>Here&#8217;s a sample execution of SendMail for you:</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
</pre></td><td class="de1"><pre class="de1"><span class="kw1">EXEC</span> SendMail <span class="st0">'emtucifor@example.com'</span>, <span class="st0">'emtucifor@example.com'</span>, <span class="st0">'This is a test email'</span>, @HTMLBody <span class="sy0">=</span> <span class="st0">'&lt;8000 characters here&gt;'</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">EXEC SendMail 'emtucifor@example.com', 'emtucifor@example.com', 'This is a test email', @HTMLBody = '&lt;8000 characters here&gt;'</pre></div></div>

<p>If you are sending email to someone who uses Outlook, it helps to provide both TextBody and HTMLBody, because the TextBody is used in the pop-up preview window of the content, so if the person is present when the email arrives, the preview will work correctly.</p>
<p>I hope that you benefit from this brief but intended-to-be-thorough write-up on exceeding the 8000-character limitation in SQL 2000.</p>
<p>Erik</p>
]]></content:encoded>
			<wfw:commentRss>/index.php/datamgmt/dbprogramming/mssqlserver/sql-2000-when-8000-characters-is-not-eno/feed/</wfw:commentRss>
		<slash:comments>14</slash:comments>
		</item>
		<item>
		<title>What To Do When Your Identity Column Maxes Out</title>
		<link>/index.php/datamgmt/dbadmin/mssqlserveradmin/what-to-do-when-your-identity-column-max/</link>
		<comments>/index.php/datamgmt/dbadmin/mssqlserveradmin/what-to-do-when-your-identity-column-max/#comments</comments>
		<pubDate>Fri, 06 Mar 2009 22:27:51 +0000</pubDate>
		<dc:creator><![CDATA[Erik]]></dc:creator>
				<category><![CDATA[Microsoft SQL Server Admin]]></category>

		<guid isPermaLink="false">/index.php/2009/03/what-to-do-when-your-identity-column-max/</guid>
		<description><![CDATA[You have an identity column in your database that was created as int identity(1,1). But after a good few years you are approaching the limit for a signed four-byte long integer, 2147483647. What do you do? Switch the column to bigint? Not yet! You do something like this: T-SQL1 2 3 4 5 6 7 [&#8230;]]]></description>
				<content:encoded><![CDATA[<p>You have an identity column in your database that was created as int identity(1,1). But after a good few years you are approaching the limit for a signed four-byte long integer, 2147483647. What do you do? Switch the column to bigint?</p>
<p>Not yet!</p>
<p>You do something like this:</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
</pre></td><td class="de1"><pre class="de1"><span class="co1">--What's the biggest signed four-byte long:</span>
<span class="co1">--select power(convert(bigint, 2), 31) - 1</span>
<span class="co1">--2147483647</span>
&nbsp;
<span class="co1">--what your table looks like</span>
<span class="kw1">CREATE</span> <span class="kw1">TABLE</span> tester <span class="br0">&#40;</span>
&nbsp; &nbsp; testerid <span class="kw1">INT</span> <span class="kw1">IDENTITY</span><span class="br0">&#40;</span><span class="nu0">1</span>, <span class="nu0">1</span><span class="br0">&#41;</span> not null <span class="kw1">CONSTRAINT</span> pk_tester <span class="kw1">PRIMARY</span> <span class="kw1">KEY</span> <span class="kw1">CLUSTERED</span>,
&nbsp; &nbsp; descr <span class="kw1">VARCHAR</span><span class="br0">&#40;</span><span class="nu0">100</span><span class="br0">&#41;</span>
<span class="br0">&#41;</span>
<span class="co1">-- simulate the identity column being near the end of its life (only 32 more rows will fit)</span>
<span class="kw1">DBCC</span> checkident<span class="br0">&#40;</span>tester, reseed, <span class="nu0">2147483616</span><span class="br0">&#41;</span>
&nbsp;
<span class="co1">-- push the identity column to its absolute limit</span>
<span class="kw1">INSERT</span> tester <span class="kw1">SELECT</span> <span class="kw1">CONVERT</span><span class="br0">&#40;</span><span class="kw1">VARCHAR</span><span class="br0">&#40;</span><span class="nu0">100</span><span class="br0">&#41;</span>, newid<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#41;</span>
<span class="kw1">WHILE</span> <span class="kw2">@@ROWCOUNT</span> <span class="sy0">&lt;</span> <span class="nu0">16</span>
&nbsp; &nbsp; <span class="kw1">INSERT</span> tester <span class="kw1">SELECT</span> <span class="kw1">CONVERT</span><span class="br0">&#40;</span><span class="kw1">VARCHAR</span><span class="br0">&#40;</span><span class="nu0">100</span><span class="br0">&#41;</span>, newid<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#41;</span> <span class="kw1">FROM</span> tester
<span class="kw1">SELECT</span> <span class="sy0">*</span> <span class="kw1">FROM</span> tester
&nbsp;
<span class="co1">-- you can see that you can't insert another one like so:</span>
<span class="co1">-- insert tester select convert(varchar(100), newid())</span>
&nbsp;
<span class="co1">--Redefine the identity column by moving tables in and out.</span>
<span class="co1">-- * would have to drop referential constraints temporarily</span>
<span class="co1">-- * but you can generate script to drop and recreate referential constraints</span>
&nbsp;
<span class="co1">-- move the table out of the way of the new table</span>
<span class="kw1">EXEC</span> <span class="kw3">SP_RENAME</span> <span class="st0">'tester'</span>, <span class="st0">'oldtester'</span>
<span class="kw1">ALTER</span> <span class="kw1">TABLE</span> oldtester <span class="kw1">DROP</span> <span class="kw1">CONSTRAINT</span> pk_tester
&nbsp;
<span class="co1">-- create the new table with identity set to crawl downward from 0</span>
<span class="kw1">CREATE</span> <span class="kw1">TABLE</span> tester <span class="br0">&#40;</span>
&nbsp; &nbsp; testerid <span class="kw1">INT</span> <span class="kw1">IDENTITY</span><span class="br0">&#40;</span><span class="nu0">1</span>, <span class="sy0">-</span><span class="nu0">1</span><span class="br0">&#41;</span> not null <span class="kw1">CONSTRAINT</span> pk_tester <span class="kw1">PRIMARY</span> <span class="kw1">KEY</span> <span class="kw1">CLUSTERED</span>, <span class="co1">-- I have no idea why it's not identity(0, -1), but it's not.</span>
&nbsp; &nbsp; descr <span class="kw1">VARCHAR</span><span class="br0">&#40;</span><span class="nu0">100</span><span class="br0">&#41;</span>
<span class="br0">&#41;</span>
&nbsp;
<span class="co1">-- insert the data from the old table</span>
<span class="kw1">SET</span> <span class="kw1">IDENTITY_INSERT</span> tester <span class="kw1">ON</span>
<span class="kw1">INSERT</span> tester <span class="br0">&#40;</span>testerid, descr<span class="br0">&#41;</span>
<span class="kw1">SELECT</span> testerid, descr <span class="kw1">FROM</span> oldtester
<span class="kw1">SET</span> <span class="kw1">IDENTITY_INSERT</span> tester <span class="kw1">OFF</span>
&nbsp;
<span class="co1">-- insert some rows so we can see if it works</span>
<span class="kw1">INSERT</span> tester <span class="kw1">SELECT</span> <span class="kw1">CONVERT</span><span class="br0">&#40;</span><span class="kw1">VARCHAR</span><span class="br0">&#40;</span><span class="nu0">100</span><span class="br0">&#41;</span>, newid<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#41;</span> <span class="kw1">FROM</span> tester
&nbsp;
<span class="co1">-- and it works! New rows will start at 0 and count downward to -1, -2, and so on.</span>
<span class="kw1">SELECT</span> <span class="sy0">*</span> <span class="kw1">FROM</span> tester
&nbsp;
<span class="co1">-- clean up</span>
<span class="kw1">DROP</span> <span class="kw1">TABLE</span> tester
<span class="kw1">DROP</span> <span class="kw1">TABLE</span> oldtester</pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">--What's the biggest signed four-byte long:
--select power(convert(bigint, 2), 31) - 1
--2147483647
 
--what your table looks like
CREATE TABLE tester (
    testerid INT IDENTITY(1, 1) not null CONSTRAINT pk_tester PRIMARY KEY CLUSTERED,
    descr VARCHAR(100)
)
-- simulate the identity column being near the end of its life (only 32 more rows will fit)
DBCC checkident(tester, reseed, 2147483616)
 
-- push the identity column to its absolute limit
INSERT tester SELECT CONVERT(VARCHAR(100), newid())
WHILE @@ROWCOUNT &lt; 16
    INSERT tester SELECT CONVERT(VARCHAR(100), newid()) FROM tester
SELECT * FROM tester
 
-- you can see that you can't insert another one like so:
-- insert tester select convert(varchar(100), newid())
 
--Redefine the identity column by moving tables in and out.
-- * would have to drop referential constraints temporarily
-- * but you can generate script to drop and recreate referential constraints
 
-- move the table out of the way of the new table
EXEC SP_RENAME 'tester', 'oldtester'
ALTER TABLE oldtester DROP CONSTRAINT pk_tester
 
-- create the new table with identity set to crawl downward from 0
CREATE TABLE tester (
    testerid INT IDENTITY(1, -1) not null CONSTRAINT pk_tester PRIMARY KEY CLUSTERED, -- I have no idea why it's not identity(0, -1), but it's not.
    descr VARCHAR(100)
)
 
-- insert the data from the old table
SET IDENTITY_INSERT tester ON
INSERT tester (testerid, descr)
SELECT testerid, descr FROM oldtester
SET IDENTITY_INSERT tester OFF
 
-- insert some rows so we can see if it works
INSERT tester SELECT CONVERT(VARCHAR(100), newid()) FROM tester
 
-- and it works! New rows will start at 0 and count downward to -1, -2, and so on.
SELECT * FROM tester
 
-- clean up
DROP TABLE tester
DROP TABLE oldtester</pre></div></div>

<p>With this solution, you can keep your database going for another few years, or for about as long as it took you to fill up the positive integers. Then you&#8217;ll have to switch to bigints or a decimal data type, though I have to express my disgust for using a packed data type as a clustered index key, especially considering that compared to int or bigint, decimal always uses more bytes of storage for the same precision:</p>
<p>int: 8-9 digits, up to 4294967296 = 4 bytes storage<br />
decimal: 9 digits = 5 bytes storage<br />
bigint: 19-20 digits, up to 18446744073709551616 = 8 bytes storage<br />
decimal: 10-19 digits = 9 bytes storage<br />
decimal: 20-28 digits = 13 bytes storage<br />
decimal: 29-38 digits = 17 bytes storage</p>
<p>So you can see that bigint is far superior to decimal until you get to 20 digits, supporting up to 18.4 quintillion unique values, which is a heck of a lot, for less than decimal would take to get you there.</p>
]]></content:encoded>
			<wfw:commentRss>/index.php/datamgmt/dbadmin/mssqlserveradmin/what-to-do-when-your-identity-column-max/feed/</wfw:commentRss>
		<slash:comments>11</slash:comments>
		</item>
	</channel>
</rss>
