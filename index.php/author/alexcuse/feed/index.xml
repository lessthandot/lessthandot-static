<?xml version="1.0" encoding="UTF-8"?><rss version="2.0"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:atom="http://www.w3.org/2005/Atom"
	xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
	xmlns:slash="http://purl.org/rss/1.0/modules/slash/"
	>

<channel>
	<title>Alex Ullrich &#8211; LessthanDot</title>
	<atom:link href="/index.php/author/alexcuse/feed/" rel="self" type="application/rss+xml" />
	<link>/</link>
	<description>A Technical Community for IT Professionals</description>
	<lastBuildDate>Sat, 09 Mar 2019 12:50:36 +0000</lastBuildDate>
	<language>en-US</language>
	<sy:updatePeriod>hourly</sy:updatePeriod>
	<sy:updateFrequency>1</sy:updateFrequency>
	<generator>https://wordpress.org/?v=4.6.1</generator>
	<item>
		<title>Automatic Promise Resolution for AngularJS Unit Testing</title>
		<link>/index.php/webdev/uidevelopment/javascript/automatic-promise-resolution-for-angularjs-unit-testing/</link>
		<comments>/index.php/webdev/uidevelopment/javascript/automatic-promise-resolution-for-angularjs-unit-testing/#respond</comments>
		<pubDate>Thu, 18 Feb 2016 15:39:02 +0000</pubDate>
		<dc:creator><![CDATA[Alex Ullrich]]></dc:creator>
				<category><![CDATA[Javascript]]></category>

		<guid isPermaLink="false">/?p=4359</guid>
		<description><![CDATA[We&#8217;ve been using Angular for client-side apps for a couple years now, and it has mostly been great. The data binding works well, and the baked in dependency injection makes it very easy for our team of C# developers to write unit tests. There have been some painful moments, but they&#8217;ve mostly been growing pains [&#8230;]]]></description>
				<content:encoded><![CDATA[<p>We&#8217;ve been using Angular for client-side apps for a couple years now, and it has mostly been great. The data binding works well, and the baked in dependency injection makes it very easy for our team of C# developers to write unit tests. There have been some painful moments, but they&#8217;ve mostly been growing pains on our part. One that has been particularly sticky was testing with mocked dependencies that return promises.</p>
<h2>Standard Approach</h2>
<p>For us, the first time we were introduced to this stuff was when trying to test controllers using mocks of services that communicate over HTTP.  Angular&#8217;s <a href="https://docs.angularjs.org/api/ng/service/$http" title="$http service">$http service</a> works asynchronously and returns promises, so by extension our services do as well.  Luckily there is a lot of information out there to help with testing this kind of method, and everything we found pointed us to the <a href="https://docs.angularjs.org/api/ng/service/$q" title="$q">$q service</a>.  This service is there for working with deferred objects, and is mostly pretty easy to get on with.  Here is an example test from that page:</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="javascript"><thead><tr><td colspan="2"  class="head">Javascript</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
</pre></td><td class="de1"><pre class="de1">it<span class="br0">&#40;</span><span class="st0">'should simulate promise'</span><span class="sy0">,</span> inject<span class="br0">&#40;</span><span class="kw1">function</span><span class="br0">&#40;</span>$q<span class="sy0">,</span> $rootScope<span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; <span class="kw1">var</span> deferred <span class="sy0">=</span> $q.<span class="me1">defer</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; <span class="kw1">var</span> promise <span class="sy0">=</span> deferred.<span class="me1">promise</span><span class="sy0">;</span>
&nbsp; <span class="kw1">var</span> resolvedValue<span class="sy0">;</span>
&nbsp;
&nbsp; promise.<span class="me1">then</span><span class="br0">&#40;</span><span class="kw1">function</span><span class="br0">&#40;</span>value<span class="br0">&#41;</span> <span class="br0">&#123;</span> resolvedValue <span class="sy0">=</span> value<span class="sy0">;</span> <span class="br0">&#125;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; expect<span class="br0">&#40;</span>resolvedValue<span class="br0">&#41;</span>.<span class="me1">toBeUndefined</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
&nbsp; <span class="co1">// Simulate resolving of promise</span>
&nbsp; deferred.<span class="me1">resolve</span><span class="br0">&#40;</span><span class="nu0">123</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; <span class="co1">// Note that the 'then' function does not get called synchronously.</span>
&nbsp; <span class="co1">// This is because we want the promise API to always be async, whether or not</span>
&nbsp; <span class="co1">// it got called synchronously or asynchronously.</span>
&nbsp; expect<span class="br0">&#40;</span>resolvedValue<span class="br0">&#41;</span>.<span class="me1">toBeUndefined</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
&nbsp; <span class="co1">// Propagate promise resolution to 'then' functions using $apply().</span>
&nbsp; $rootScope.$apply<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; expect<span class="br0">&#40;</span>resolvedValue<span class="br0">&#41;</span>.<span class="me1">toEqual</span><span class="br0">&#40;</span><span class="nu0">123</span><span class="br0">&#41;</span><span class="sy0">;</span>
<span class="br0">&#125;</span><span class="br0">&#41;</span><span class="br0">&#41;</span><span class="sy0">;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">it('should simulate promise', inject(function($q, $rootScope) {
  var deferred = $q.defer();
  var promise = deferred.promise;
  var resolvedValue;

  promise.then(function(value) { resolvedValue = value; });
  expect(resolvedValue).toBeUndefined();

  // Simulate resolving of promise
  deferred.resolve(123);
  // Note that the 'then' function does not get called synchronously.
  // This is because we want the promise API to always be async, whether or not
  // it got called synchronously or asynchronously.
  expect(resolvedValue).toBeUndefined();

  // Propagate promise resolution to 'then' functions using $apply().
  $rootScope.$apply();
  expect(resolvedValue).toEqual(123);
}));</pre></div></div>

<p>The main sticking point here is $rootScope.$apply().  We can also call $rootScope.$digest() &#8211; but that method&#8217;s intent might be even less clear.  The reason these need to be called is not immediately clear from the code, but answers can be found in Angular&#8217;s <a href="https://docs.angularjs.org/guide/scope" title="$scope">$scope documentation</a>.  Particularly</p>
<blockquote><p>
When an external event (such as a user action, timer or XHR) is received, the associated expression must be applied to the scope through the $apply() method so that all listeners are updated correctly.
</p></blockquote>
<p>When running a full blown angular application, we don&#8217;t need to worry about this &#8211; it happens in the background and we can get on with our lives.  But testing is a different story.  As an application gets larger you find mysterious calls to $rootScope.$apply() or $rootScope.$digest() (or both) littered throughout your tests, in seemingly arbitrary places.  If you have multiple promises in play, you might have several in a single test.  In many tests (possibly even &#8220;most&#8221; tests if you use the controllerAs style) this might be your only reason to capture the injected scopoe.  There must be a better way.</p>
<h2>&#8216;AutoQ&#8217; Approach</h2>
<p>What we had our sights on was a way to wrap $q and $rootScope in a single object that would know to call apply after any resolution or rejection.  We called it &#8216;autoQ&#8217; and the name stuck.  Here is what the example test above looks like when using it:</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="javascript"><thead><tr><td colspan="2"  class="head">Javascript</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
</pre></td><td class="de1"><pre class="de1">it<span class="br0">&#40;</span><span class="st0">'should simulate promise'</span><span class="sy0">,</span> inject<span class="br0">&#40;</span><span class="kw1">function</span><span class="br0">&#40;</span>$q<span class="sy0">,</span> $rootScope<span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; <span class="kw1">var</span> deferred <span class="sy0">=</span> autoQ<span class="br0">&#40;</span>$q<span class="sy0">,</span> $rootScope<span class="br0">&#41;</span>.<span class="me1">defer</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; <span class="kw1">var</span> promise <span class="sy0">=</span> deferred.<span class="me1">promise</span><span class="sy0">;</span>
&nbsp; &nbsp; <span class="kw1">var</span> resolvedValue<span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; promise.<span class="me1">then</span><span class="br0">&#40;</span><span class="kw1">function</span><span class="br0">&#40;</span>value<span class="br0">&#41;</span> <span class="br0">&#123;</span> resolvedValue <span class="sy0">=</span> value<span class="sy0">;</span> <span class="br0">&#125;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; expect<span class="br0">&#40;</span>resolvedValue<span class="br0">&#41;</span>.<span class="me1">toBeUndefined</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; <span class="co1">// Simulate resolving of promise</span>
&nbsp; &nbsp; deferred.<span class="me1">resolve</span><span class="br0">&#40;</span><span class="nu0">123</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; 
&nbsp; &nbsp; <span class="co1">// promise will be resolved immediately</span>
&nbsp; &nbsp; expect<span class="br0">&#40;</span>resolvedValue<span class="br0">&#41;</span>.<span class="me1">toEqual</span><span class="br0">&#40;</span><span class="nu0">123</span><span class="br0">&#41;</span><span class="sy0">;</span>
<span class="br0">&#125;</span><span class="br0">&#41;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
<span class="kw1">function</span> autoQ<span class="br0">&#40;</span>$q<span class="sy0">,</span> $rootScope<span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; <span class="kw1">return</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; defer<span class="sy0">:</span> <span class="kw1">function</span><span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">var</span> deferred <span class="sy0">=</span> $q.<span class="me1">defer</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; deferred.<span class="me1">resolve</span> <span class="sy0">=</span> <span class="kw1">function</span><span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">this</span>.<span class="kw3">__proto__</span>.<span class="me1">resolve</span>.<span class="me1">apply</span><span class="br0">&#40;</span><span class="kw1">this</span><span class="sy0">,</span> arguments<span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; $rootScope.$apply<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; deferred.<span class="me1">reject</span> <span class="sy0">=</span> <span class="kw1">function</span><span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">this</span>.<span class="kw3">__proto__</span>.<span class="me1">reject</span>.<span class="me1">apply</span><span class="br0">&#40;</span><span class="kw1">this</span><span class="sy0">,</span> arguments<span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; $rootScope.$apply<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; deferred.<span class="me1">notify</span> <span class="sy0">=</span> <span class="kw1">function</span><span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">this</span>.<span class="kw3">__proto__</span>.<span class="me1">notify</span>.<span class="me1">apply</span><span class="br0">&#40;</span><span class="kw1">this</span><span class="sy0">,</span> arguments<span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; $rootScope.$apply<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">return</span> deferred<span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp; &nbsp; <span class="br0">&#125;</span>
<span class="br0">&#125;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">it('should simulate promise', inject(function($q, $rootScope) {
    var deferred = autoQ($q, $rootScope).defer();
    var promise = deferred.promise;
    var resolvedValue;

    promise.then(function(value) { resolvedValue = value; });
    expect(resolvedValue).toBeUndefined();

    // Simulate resolving of promise
    deferred.resolve(123);
  
    // promise will be resolved immediately
    expect(resolvedValue).toEqual(123);
}));

function autoQ($q, $rootScope) {
    return {
        defer: function() {
            var deferred = $q.defer();

            deferred.resolve = function() {
                this.__proto__.resolve.apply(this, arguments);
                $rootScope.$apply();
            }

            deferred.reject = function() {
                this.__proto__.reject.apply(this, arguments);
                $rootScope.$apply();
            }

            deferred.notify = function() {
                this.__proto__.notify.apply(this, arguments);
                $rootScope.$apply();
            }
            
            return deferred;
        }
    }
}</pre></div></div>

<p>So now we don&#8217;t have to call $rootScope.$apply(), but we do have to call the autoQ setup method, which is not ideal.</p>
<h2>Making it useful</h2>
<p>When trying to figure out how to make this available to our tests, a trick we had been using to test the config phase of our application came to mind.  Essentially what you do is declare a module upstream from your tests, and you can initialize it to capture dependencies taken in during the config phase (or anywhere in the module initialization process really).  That &#8220;anywhere in the module initialization process&#8221; is where this gets interesting for our current problem.  Any dependencies mutated or introduced through this dummy module will be available <strong>in their modified state</strong> to modules instantiated downstream.  We had primarily done this as a way to set up spies for methods called during the config phase of our application, but the possibilities are endless.  What we ended up doing was using this dummy module approach to register an &#8216;autoQ&#8217; service that is only available in tests.</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="javascript"><thead><tr><td colspan="2"  class="head">Javascript</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
</pre></td><td class="de1"><pre class="de1">&nbsp; &nbsp; <span class="co1">//need to call angular.module here, NOT the module method exposed by angular mocks</span>
&nbsp; &nbsp; angular.<span class="me1">module</span><span class="br0">&#40;</span><span class="st0">'setupAutoQ'</span><span class="sy0">,</span> <span class="br0">&#91;</span><span class="br0">&#93;</span><span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; .<span class="me1">service</span><span class="br0">&#40;</span><span class="st0">'autoQ'</span><span class="sy0">,</span> <span class="kw1">function</span> <span class="br0">&#40;</span>$q<span class="sy0">,</span> $rootScope<span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">return</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; defer<span class="sy0">:</span> <span class="kw1">function</span> <span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">var</span> deferred <span class="sy0">=</span> $q.<span class="me1">defer</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; deferred.<span class="me1">resolve</span> <span class="sy0">=</span> <span class="kw1">function</span> <span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">this</span>.<span class="kw3">__proto__</span>.<span class="me1">resolve</span>.<span class="me1">apply</span><span class="br0">&#40;</span><span class="kw1">this</span><span class="sy0">,</span> arguments<span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; $rootScope.$apply<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; deferred.<span class="me1">reject</span> <span class="sy0">=</span> <span class="kw1">function</span> <span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">this</span>.<span class="kw3">__proto__</span>.<span class="me1">reject</span>.<span class="me1">apply</span><span class="br0">&#40;</span><span class="kw1">this</span><span class="sy0">,</span> arguments<span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; $rootScope.$apply<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; deferred.<span class="me1">notify</span> <span class="sy0">=</span> <span class="kw1">function</span><span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">this</span>.<span class="kw3">__proto__</span>.<span class="me1">notify</span>.<span class="me1">apply</span><span class="br0">&#40;</span><span class="kw1">this</span><span class="sy0">,</span> arguments<span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; $rootScope.$apply<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">return</span> deferred<span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; <span class="co1">//this is the angular mocks module method - we need to run the module once it has been declared</span>
&nbsp; &nbsp; module<span class="br0">&#40;</span><span class="st0">'setupAutoQ'</span><span class="br0">&#41;</span><span class="sy0">;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">    //need to call angular.module here, NOT the module method exposed by angular mocks
    angular.module('setupAutoQ', [])
            .service('autoQ', function ($q, $rootScope) {

                return {
                    defer: function () {
                        var deferred = $q.defer();

                        deferred.resolve = function () {
                            this.__proto__.resolve.apply(this, arguments);
                            $rootScope.$apply();
                        }

                        deferred.reject = function () {
                            this.__proto__.reject.apply(this, arguments);
                            $rootScope.$apply();
                        }
                        
                        deferred.notify = function() {
                            this.__proto__.notify.apply(this, arguments);
                            $rootScope.$apply();
                        }

                        return deferred;
                    }
                }
            });

    //this is the angular mocks module method - we need to run the module once it has been declared
    module('setupAutoQ');</pre></div></div>

<p>The last piece of the puzzle was how to run this prior to each test execution.  Luckily <a href="http://stackoverflow.com/a/25053685/794" title="Global beforeEach in Jasmine">this StackOverflow answer</a> showed us that with jasmine you can declare a beforeEach outside any describe blocks, and it will be treated as a global setup method that is run before each test.</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="javascript"><thead><tr><td colspan="2"  class="head">Javascript</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
</pre></td><td class="de1"><pre class="de1">beforeEach<span class="br0">&#40;</span><span class="kw1">function</span> <span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; angular.<span class="me1">module</span><span class="br0">&#40;</span><span class="st0">'setupAutoQ'</span><span class="sy0">,</span> <span class="br0">&#91;</span><span class="br0">&#93;</span><span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; .<span class="me1">service</span><span class="br0">&#40;</span><span class="st0">'autoQ'</span><span class="sy0">,</span> <span class="kw1">function</span> <span class="br0">&#40;</span>$q<span class="sy0">,</span> $rootScope<span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">return</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; defer<span class="sy0">:</span> <span class="kw1">function</span> <span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">var</span> deferred <span class="sy0">=</span> $q.<span class="me1">defer</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; deferred.<span class="me1">resolve</span> <span class="sy0">=</span> <span class="kw1">function</span> <span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">this</span>.<span class="kw3">__proto__</span>.<span class="me1">resolve</span>.<span class="me1">apply</span><span class="br0">&#40;</span><span class="kw1">this</span><span class="sy0">,</span> arguments<span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; $rootScope.$apply<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; deferred.<span class="me1">reject</span> <span class="sy0">=</span> <span class="kw1">function</span> <span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">this</span>.<span class="kw3">__proto__</span>.<span class="me1">reject</span>.<span class="me1">apply</span><span class="br0">&#40;</span><span class="kw1">this</span><span class="sy0">,</span> arguments<span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; $rootScope.$apply<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; deferred.<span class="me1">notify</span> <span class="sy0">=</span> <span class="kw1">function</span><span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">this</span>.<span class="kw3">__proto__</span>.<span class="me1">notify</span>.<span class="me1">apply</span><span class="br0">&#40;</span><span class="kw1">this</span><span class="sy0">,</span> arguments<span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; $rootScope.$apply<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">return</span> deferred<span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; module<span class="br0">&#40;</span><span class="st0">'setupAutoQ'</span><span class="br0">&#41;</span><span class="sy0">;</span>
<span class="br0">&#125;</span><span class="br0">&#41;</span><span class="sy0">;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">beforeEach(function () {
    angular.module('setupAutoQ', [])
            .service('autoQ', function ($q, $rootScope) {

                return {
                    defer: function () {
                        var deferred = $q.defer();

                        deferred.resolve = function () {
                            this.__proto__.resolve.apply(this, arguments);
                            $rootScope.$apply();
                        }

                        deferred.reject = function () {
                            this.__proto__.reject.apply(this, arguments);
                            $rootScope.$apply();
                        }

                        deferred.notify = function() {
                            this.__proto__.notify.apply(this, arguments);
                            $rootScope.$apply();
                        }

                        return deferred;
                    }
                }
            });

    module('setupAutoQ');
});</pre></div></div>

<h2>Wrapping it up</h2>
<p>So now, we have an &#8220;autoQ&#8221; service that is available for testing.  So our example test now looks like this:</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="javascript"><thead><tr><td colspan="2"  class="head">Javascript</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
</pre></td><td class="de1"><pre class="de1">it<span class="br0">&#40;</span><span class="st0">'should simulate promise'</span><span class="sy0">,</span> inject<span class="br0">&#40;</span><span class="kw1">function</span><span class="br0">&#40;</span>autoQ<span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; <span class="kw1">var</span> deferred <span class="sy0">=</span> autoQ.<span class="me1">defer</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; <span class="kw1">var</span> promise <span class="sy0">=</span> deferred.<span class="me1">promise</span><span class="sy0">;</span>
&nbsp; &nbsp; <span class="kw1">var</span> resolvedValue<span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; promise.<span class="me1">then</span><span class="br0">&#40;</span><span class="kw1">function</span><span class="br0">&#40;</span>value<span class="br0">&#41;</span> <span class="br0">&#123;</span> resolvedValue <span class="sy0">=</span> value<span class="sy0">;</span> <span class="br0">&#125;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; expect<span class="br0">&#40;</span>resolvedValue<span class="br0">&#41;</span>.<span class="me1">toBeUndefined</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; <span class="co1">// Simulate resolving of promise</span>
&nbsp; &nbsp; deferred.<span class="me1">resolve</span><span class="br0">&#40;</span><span class="nu0">123</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; 
&nbsp; &nbsp; <span class="co1">// promise will be resolved immediately</span>
&nbsp; &nbsp; expect<span class="br0">&#40;</span>resolvedValue<span class="br0">&#41;</span>.<span class="me1">toEqual</span><span class="br0">&#40;</span><span class="nu0">123</span><span class="br0">&#41;</span><span class="sy0">;</span>
<span class="br0">&#125;</span><span class="br0">&#41;</span><span class="br0">&#41;</span><span class="sy0">;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">it('should simulate promise', inject(function(autoQ) {
    var deferred = autoQ.defer();
    var promise = deferred.promise;
    var resolvedValue;

    promise.then(function(value) { resolvedValue = value; });
    expect(resolvedValue).toBeUndefined();

    // Simulate resolving of promise
    deferred.resolve(123);
  
    // promise will be resolved immediately
    expect(resolvedValue).toEqual(123);
}));</pre></div></div>

<p>This will really improve the signal to noise ratio in our tests, and hopefully help new developers get up to speed more quickly.  Another nice benefit of this approach is that it does not modify $q &#8211; or anything in our &#8220;live&#8221; module &#8211; at all.  So if we want finer grained control over promise resolution we can simply consume $q and $rootScope in our tests and use them as before.  I&#8217;m not sure we&#8217;ll ever need to do this, but its good to know we have the option.</p>
]]></content:encoded>
			<wfw:commentRss>/index.php/webdev/uidevelopment/javascript/automatic-promise-resolution-for-angularjs-unit-testing/feed/</wfw:commentRss>
		<slash:comments>0</slash:comments>
		</item>
		<item>
		<title>(Very) Poor Man&#8217;s Infinite Scroll using angular-inview</title>
		<link>/index.php/all/very-poor-mans-infinite-scroll-using-angular-inview/</link>
		<comments>/index.php/all/very-poor-mans-infinite-scroll-using-angular-inview/#comments</comments>
		<pubDate>Mon, 09 Mar 2015 16:12:37 +0000</pubDate>
		<dc:creator><![CDATA[Alex Ullrich]]></dc:creator>
				<category><![CDATA[All Blogs]]></category>
		<category><![CDATA[Javascript]]></category>
		<category><![CDATA[UI Development]]></category>
		<category><![CDATA[angularjs]]></category>

		<guid isPermaLink="false">/?p=3295</guid>
		<description><![CDATA[I&#8217;ve been working on an angular app that allows users to manipulate a very large dataset in memory, using various options to filter what is shown at any given time. For one particular &#8220;view&#8221; into the data there were still over 4000 items (each needing 2-way binding), which is well beyond the point that angular&#8217;s [&#8230;]]]></description>
				<content:encoded><![CDATA[<p>I&#8217;ve been working on an angular app that allows users to manipulate a very large dataset in memory, using various options to filter what is shown at any given time.  For one particular &#8220;view&#8221; into the data there were still over 4000 items (each needing 2-way binding), which is well beyond the point that angular&#8217;s ng-repeat starts to drag.  I looked at various solutions online, and <a href="http://www.williambrownstreet.net/blog/2013/07/angularjs-my-solution-to-the-ng-repeat-performance-problem/" title="williambrownstreet.net" target="_blank">this solution</a> stood out to me, largely because we already need to apply one round of filtering before getting to ng-repeat, and I didn&#8217;t want to add a third array that needed to be kept in sync.</p>
<p>The problem I kept running into with these &#8220;infinite scrolling&#8221; type solutions is that they are all based on your html filling the browser window (or a container, in the case of the modified directive presented above).  That is all well and good, but with the data I have the container is filled immediately, and then the directive is immediately called into action loading the remaining 3800 (or so) items.  What I really need is to trigger the rendering of the next group when the user brings the tail end of the list into view.</p>
<p>This brings me to a handy bit of code called <a href="https://github.com/thenikso/angular-inview" title="github" target="_blank">angular-inview</a>.  This gives you a way to watch whether an element is currently visible in the browser or not, and react accordingly.  It actually offers two directives, in-view-container (for the container the user is scrolling within) and in-view (which provides the means to execute code when an element comes into view).</p>
<p>Lets take a look at how these work, starting with a sample controller.  All the controller needs to do here is create an array of objects to bind to, provide a scope variable representing the repeater limit and a function that will increase the limit if passed a truthy value. This is wrapped in a $timeout call just to force a delay so you can see the magic happen. </p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="javascript"><thead><tr><td colspan="2"  class="head">Javascript</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
</pre></td><td class="de1"><pre class="de1"><span class="kw1">var</span> app <span class="sy0">=</span> angular.<span class="me1">module</span><span class="br0">&#40;</span><span class="st0">'inview-example'</span><span class="sy0">,</span> <span class="br0">&#91;</span><span class="st0">'angular-inview'</span><span class="br0">&#93;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
app.<span class="me1">controller</span><span class="br0">&#40;</span><span class="st0">'exampleController'</span><span class="sy0">,</span> <span class="kw1">function</span><span class="br0">&#40;</span>$scope<span class="sy0">,</span> $timeout<span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; $scope.<span class="me1">limit</span> <span class="sy0">=</span> <span class="nu0">20</span><span class="sy0">;</span>
&nbsp; 
&nbsp; $scope.<span class="me1">items</span> <span class="sy0">=</span> <span class="br0">&#91;</span><span class="br0">&#93;</span><span class="sy0">;</span>
&nbsp; 
&nbsp; <span class="kw1">for</span><span class="br0">&#40;</span><span class="kw1">var</span> i <span class="sy0">=</span> <span class="nu0">0</span><span class="sy0">;</span> i <span class="sy0">&lt;</span> <span class="nu0">500</span><span class="sy0">;</span> i<span class="sy0">++</span><span class="br0">&#41;</span><span class="br0">&#123;</span>
&nbsp; &nbsp; $scope.<span class="me1">items</span>.<span class="me1">push</span><span class="br0">&#40;</span><span class="br0">&#123;</span> value<span class="sy0">:</span> i <span class="br0">&#125;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; <span class="br0">&#125;</span>
&nbsp; 
&nbsp; $scope.<span class="me1">increaseLimit</span> <span class="sy0">=</span> <span class="kw1">function</span> <span class="br0">&#40;</span>actuallyIncrease<span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; <span class="kw1">if</span> <span class="br0">&#40;</span>actuallyIncrease<span class="br0">&#41;</span> <span class="br0">&#123;</span> <span class="co1">//this will be passed the value of $inview from directive</span>
&nbsp; &nbsp; &nbsp; $timeout<span class="br0">&#40;</span><span class="kw1">function</span><span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; $scope.<span class="me1">limit</span> <span class="sy0">=</span> $scope.<span class="me1">limit</span> <span class="sy0">+</span> <span class="nu0">20</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span><span class="sy0">,</span> <span class="nu0">500</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp; <span class="br0">&#125;</span><span class="sy0">;</span>
<span class="br0">&#125;</span><span class="br0">&#41;</span><span class="sy0">;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">var app = angular.module('inview-example', ['angular-inview']);

app.controller('exampleController', function($scope, $timeout) {
  $scope.limit = 20;
  
  $scope.items = [];
  
  for(var i = 0; i &lt; 500; i++){
    $scope.items.push({ value: i });
  }
  
  $scope.increaseLimit = function (actuallyIncrease) {
    if (actuallyIncrease) { //this will be passed the value of $inview from directive
      $timeout(function() {
        $scope.limit = $scope.limit + 20;
      }, 500);
    }
  };
});</pre></div></div>

<p>And some HTML:</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="html4strict"><thead><tr><td colspan="2"  class="head">HTML</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
</pre></td><td class="de1"><pre class="de1">&nbsp; <span class="sc2">&lt;<span class="kw2">body</span> ng-controller<span class="sy0">=</span><span class="st0">&quot;exampleController&quot;</span>&gt;</span>
&nbsp; &nbsp; <span class="sc2">&lt;<span class="kw2">h1</span>&gt;</span>Homeless Man's Infinite Scroll<span class="sc2">&lt;<span class="sy0">/</span><span class="kw2">h1</span>&gt;</span>
&nbsp; &nbsp; 
&nbsp; &nbsp; <span class="sc2">&lt;<span class="kw2">div</span> in-view-container <span class="kw3">class</span><span class="sy0">=</span><span class="st0">&quot;container&quot;</span>&gt;</span>
&nbsp; &nbsp; &nbsp; <span class="sc2">&lt;<span class="kw2">div</span> ng-repeat<span class="sy0">=</span><span class="st0">&quot;item in items | limitTo: limit&quot;</span>&gt;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="sc2">&lt;<span class="kw2">input</span> <span class="kw3">type</span><span class="sy0">=</span><span class="st0">&quot;text&quot;</span> ng-model<span class="sy0">=</span><span class="st0">&quot;item.value&quot;</span> <span class="sy0">/</span>&gt;&lt;<span class="sy0">/</span>textbox&gt;</span>
&nbsp; &nbsp; &nbsp; <span class="sc2">&lt;<span class="sy0">/</span><span class="kw2">div</span>&gt;</span>
&nbsp; &nbsp; &nbsp; <span class="sc2">&lt;<span class="kw2">span</span> in-view<span class="sy0">=</span><span class="st0">&quot;increaseLimit($inview)&quot;</span> ng-show<span class="sy0">=</span><span class="st0">&quot;limit &lt; items.length&quot;</span>&gt;</span>Loading more...<span class="sc2">&lt;<span class="sy0">/</span><span class="kw2">span</span>&gt;</span>
&nbsp; &nbsp; <span class="sc2">&lt;<span class="sy0">/</span><span class="kw2">div</span>&gt;</span>
&nbsp; <span class="sc2">&lt;<span class="sy0">/</span><span class="kw2">body</span>&gt;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">  &lt;body ng-controller="exampleController"&gt;
    &lt;h1&gt;Homeless Man's Infinite Scroll&lt;/h1&gt;
    
    &lt;div in-view-container class="container"&gt;
      &lt;div ng-repeat="item in items | limitTo: limit"&gt;
        &lt;input type="text" ng-model="item.value" /&gt;&lt;/textbox&gt;
      &lt;/div&gt;
      &lt;span in-view="increaseLimit($inview)" ng-show="limit &lt; items.length"&gt;Loading more...&lt;/span&gt;
    &lt;/div&gt;
  &lt;/body&gt;</pre></div></div>

<p>So on initial load 0-19 will be displayed.  The span positioned outside the repeater is the element we will use to trigger expanding the limit (causing more items to be rendered / bound).  This will pass the value $inview to our expansion method, and when true the limit will be increased, causing more items to be rendered.  Once the limit is greater than or equal to the number of items we have, there is no need to show the trigger element anymore.</p>
<p>Thats about all there was to it, seems to be working well enough so far.  There is a working plunker <a href="http://embed.plnkr.co/VzDrPH9rwtiF4xokvopJ/preview" title="plunker example" target="_blank">here</a>.</p>
]]></content:encoded>
			<wfw:commentRss>/index.php/all/very-poor-mans-infinite-scroll-using-angular-inview/feed/</wfw:commentRss>
		<slash:comments>4</slash:comments>
		</item>
		<item>
		<title>SquishIt and Nancy &#8211; Part Deux</title>
		<link>/index.php/webdev/serverprogramming/squishit-and-nancy-part-deux/</link>
		<comments>/index.php/webdev/serverprogramming/squishit-and-nancy-part-deux/#comments</comments>
		<pubDate>Fri, 21 Feb 2014 02:53:31 +0000</pubDate>
		<dc:creator><![CDATA[Alex Ullrich]]></dc:creator>
				<category><![CDATA[ASP.NET]]></category>
		<category><![CDATA[Server Programming]]></category>
		<category><![CDATA[nancy]]></category>
		<category><![CDATA[squishit]]></category>

		<guid isPermaLink="false">/?p=2430</guid>
		<description><![CDATA[About a year ago, I wrote about getting SquishIt up and running with the (awesome) Nancy Web Framework.  You can read all about that here.  Since then, things have changed a bit, as they are wont to do.  I had mostly been ignoring this project, until an issue came up on the SquishIt mailing list [&#8230;]]]></description>
				<content:encoded><![CDATA[<p>About a year ago, I wrote about getting SquishIt up and running with the (awesome) <a href="http://nancyfx.org/">Nancy Web Framework</a>.  You can read all about that <a href="/index.php/webdev/serverprogramming/aspnet/squishit-and-nancy/">here</a>.  Since then, things have changed a bit, as they are wont to do.  I had mostly been ignoring this project, until an issue came up on the SquishIt mailing list that forced me to fire it up again.  The biggest change I found is that Nancy no longer depends on System.Web.  This really messed up the file path resolution in SquishIt, and forced us to introduce a new extensibility point for path translation.  Frankly, this probably should have been done a long time ago, but at least it is getting done now.</p>
<p>It was a pretty simple change but I&#8217;ll go over it here.  First we needed to introduce a new interface, IPathTranslator.</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="csharp"><thead><tr><td colspan="2"  class="head">C#</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
</pre></td><td class="de1"><pre class="de1"><span class="kw1">namespace</span> SquishIt<span class="sy0">.</span><span class="me1">Framework</span>
<span class="br0">&#123;</span>
&nbsp; &nbsp; <span class="kw1">public</span> <span class="kw4">interface</span> IPathTranslator
&nbsp; &nbsp; <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw4">string</span> ResolveAppRelativePathToFileSystem<span class="br0">&#40;</span><span class="kw4">string</span> file<span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw4">string</span> ResolveFileSystemPathToAppRelative<span class="br0">&#40;</span><span class="kw4">string</span> file<span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; <span class="br0">&#125;</span>
<span class="br0">&#125;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">namespace SquishIt.Framework
{
    public interface IPathTranslator
    {
        string ResolveAppRelativePathToFileSystem(string file);
        string ResolveFileSystemPathToAppRelative(string file);
    }
}</pre></div></div>

<p>This takes the place of the old &#8220;FileSystem&#8221; static class, that probably only a few people are aware of.  The implementation isn&#8217;t that important, but it takes some information from HttpRuntime / HttpContext and uses that to convert between file locations on disk and app-relative web paths.  </p>
<p>Because newer versions of Nancy don&#8217;t reference System.Web, we had to find another way to do this.  It seems like the best way to get it done is using Nancy&#8217;s IRootPathProvider.  The following looks like a reasonable approximation of what was being done with HttpContext / HttpRuntime &#8211; I have not tested it with CSS path rewriting or any of the trickier stuff that SquishIt does, but I think it will work.  If not I&#8217;m sure someone will let me know.</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="csharp"><thead><tr><td colspan="2"  class="head">C#</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
</pre></td><td class="de1"><pre class="de1"><span class="kw1">using</span> <span class="co3">System</span><span class="sy0">;</span>
<span class="kw1">using</span> <span class="co3">Nancy</span><span class="sy0">;</span>
<span class="kw1">using</span> <span class="co3">SquishIt.Framework</span><span class="sy0">;</span>
&nbsp;
<span class="kw1">namespace</span> SquishIt<span class="sy0">.</span><span class="me1">NancySample</span>
<span class="br0">&#123;</span>
&nbsp; &nbsp; <span class="kw1">public</span> <span class="kw4">class</span> NancyPathTranslator <span class="sy0">:</span> IPathTranslator
&nbsp; &nbsp; <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">private</span> <span class="kw1">readonly</span> IRootPathProvider _rootPathProvider<span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">public</span> NancyPathTranslator<span class="br0">&#40;</span>IRootPathProvider rootPathProvider<span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; _rootPathProvider <span class="sy0">=</span> rootPathProvider<span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">public</span> <span class="kw4">string</span> ResolveAppRelativePathToFileSystem<span class="br0">&#40;</span><span class="kw4">string</span> file<span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="co1">// Remove query string</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">if</span><span class="br0">&#40;</span>file<span class="sy0">.</span><span class="me1">IndexOf</span><span class="br0">&#40;</span><span class="st0">'?'</span><span class="br0">&#41;</span> <span class="sy0">!=</span> <span class="sy0">-</span><span class="nu0">1</span><span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; file <span class="sy0">=</span> file<span class="sy0">.</span><span class="me1">Substring</span><span class="br0">&#40;</span><span class="nu0">0</span>, file<span class="sy0">.</span><span class="me1">IndexOf</span><span class="br0">&#40;</span><span class="st0">'?'</span><span class="br0">&#41;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">return</span> _rootPathProvider<span class="sy0">.</span><span class="me1">GetRootPath</span><span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="sy0">+</span> <span class="st0">&quot;/&quot;</span> <span class="sy0">+</span> file<span class="sy0">.</span><span class="me1">TrimStart</span><span class="br0">&#40;</span><span class="st0">'~'</span><span class="br0">&#41;</span><span class="sy0">.</span><span class="me1">TrimStart</span><span class="br0">&#40;</span><span class="st0">'/'</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">public</span> <span class="kw4">string</span> ResolveFileSystemPathToAppRelative<span class="br0">&#40;</span><span class="kw4">string</span> file<span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">var</span> root <span class="sy0">=</span> <span class="kw3">new</span> Uri<span class="br0">&#40;</span>_rootPathProvider<span class="sy0">.</span><span class="me1">GetRootPath</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">return</span> root<span class="sy0">.</span><span class="me1">MakeRelativeUri</span><span class="br0">&#40;</span><span class="kw3">new</span> Uri<span class="br0">&#40;</span>file, UriKind<span class="sy0">.</span><span class="me1">RelativeOrAbsolute</span><span class="br0">&#41;</span><span class="br0">&#41;</span><span class="sy0">.</span><span class="me1">ToString</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp; &nbsp; <span class="br0">&#125;</span>
<span class="br0">&#125;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">using System;
using Nancy;
using SquishIt.Framework;

namespace SquishIt.NancySample
{
    public class NancyPathTranslator : IPathTranslator
    {
        private readonly IRootPathProvider _rootPathProvider;

        public NancyPathTranslator(IRootPathProvider rootPathProvider)
        {
            _rootPathProvider = rootPathProvider;
        }

        public string ResolveAppRelativePathToFileSystem(string file)
        {
            // Remove query string
            if(file.IndexOf('?') != -1)
            {
                file = file.Substring(0, file.IndexOf('?'));
            }

            return _rootPathProvider.GetRootPath() + "/" + file.TrimStart('~').TrimStart('/');
        }

        public string ResolveFileSystemPathToAppRelative(string file)
        {
            var root = new Uri(_rootPathProvider.GetRootPath());
            return root.MakeRelativeUri(new Uri(file, UriKind.RelativeOrAbsolute)).ToString();
        }
    }
}</pre></div></div>

<p>Pretty simple.  We basically had to replace the Server.MapPath / HttpRuntime.AppDomainAppPath type stuff we were using with IRootPathProvider.GetRootPath().  It may very well end up being more complicated than this &#8211; but whats important is it is now in the user&#8217;s control.  In addition to allowing users of newer versions of Nancy to use SquishIt, this will also let users with environmental issues that our code does not account for work around our bad code without needing to dig too deeply into SquishIt&#8217;s internals.</p>
<p>Once this is coded, we just have to configure SquishIt to use it.  This can be done in a nancy bootstrapper like so:</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="csharp"><thead><tr><td colspan="2"  class="head">C#</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
</pre></td><td class="de1"><pre class="de1">Bundle<span class="sy0">.</span><span class="me1">ConfigureDefaults</span><span class="br0">&#40;</span><span class="br0">&#41;</span>
&nbsp; &nbsp; <span class="sy0">.</span><span class="me1">UsePathTranslator</span><span class="br0">&#40;</span><span class="kw3">new</span> NancyPathTranslator<span class="br0">&#40;</span><span class="kw3">new</span> AspNetRootSourceProvider<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#41;</span><span class="br0">&#41;</span><span class="sy0">;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">Bundle.ConfigureDefaults()
    .UsePathTranslator(new NancyPathTranslator(new AspNetRootSourceProvider()));</pre></div></div>

<p>Once this is done, we can run the project successfully again, and go back to not worrying about this until another Nancy user points out the next problem.  For a closer look, the sample project is available at <a href="https://github.com/AlexCuse/SquishIt.NancySample">github</a>.  Big thanks to SquishIt/Nancy user Mike Ward for pointing out on the mailing list that things weren&#8217;t working anymore.  It would be impossible to stay on top of this kind of stuff without the help of people like him.</p>
]]></content:encoded>
			<wfw:commentRss>/index.php/webdev/serverprogramming/squishit-and-nancy-part-deux/feed/</wfw:commentRss>
		<slash:comments>3</slash:comments>
		</item>
		<item>
		<title>Using IIS Rewrite Rules With SquishIt Cache Invalidation</title>
		<link>/index.php/webdev/serverprogramming/using-iis-rewrite-rules-to-improve/</link>
		<comments>/index.php/webdev/serverprogramming/using-iis-rewrite-rules-to-improve/#respond</comments>
		<pubDate>Sat, 03 Aug 2013 13:32:00 +0000</pubDate>
		<dc:creator><![CDATA[Alex Ullrich]]></dc:creator>
				<category><![CDATA[ASP.NET]]></category>
		<category><![CDATA[Microsoft IIS]]></category>
		<category><![CDATA[Server Programming]]></category>
		<category><![CDATA[asp.net]]></category>
		<category><![CDATA[squishit]]></category>

		<guid isPermaLink="false">/index.php/2013/08/using-iis-rewrite-rules-to-improve/</guid>
		<description><![CDATA[In version 0.9.2 and earlier, SquishIt had two options for handling browser cache invalidation.  The default behavior was to append the hash to the query string, and the other was to include the hash in the combined filename.  While both got the job don&#8230;]]></description>
				<content:encoded><![CDATA[<p>In version 0.9.2 and earlier, SquishIt had two options for handling browser cache invalidation.  The default behavior was to append the hash to the query string, and the other was to include the hash in the combined filename.  While both got the job done, they both came with advantages and disadvantages.  This post will attempt to cover those while also introducing a third option that is available starting in version 0.9.3.</p>
<h3>Querystring Invalidation</h3>
<p>SquishIt&#8217;s default versioning behavior is to append the versioning hash to the URL of a combined file as a query string parameter.  So a bundle set up like this:</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="csharp"><thead><tr><td colspan="2"  class="head">C#</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
</pre></td><td class="de1"><pre class="de1">Bundle<span class="sy0">.</span><span class="me1">JavaScript</span><span class="br0">&#40;</span><span class="br0">&#41;</span>
&nbsp; &nbsp;<span class="sy0">.</span><span class="kw1">Add</span><span class="br0">&#40;</span><span class="st0">&quot;/assets/js/jquery_1.7.2.js&quot;</span><span class="br0">&#41;</span>
&nbsp; &nbsp;<span class="sy0">.</span><span class="kw1">Add</span><span class="br0">&#40;</span><span class="st0">&quot;/assets/js/minifyjs_test.js&quot;</span><span class="br0">&#41;</span>
&nbsp; &nbsp;<span class="sy0">.</span><span class="me1">ForceRelease</span><span class="br0">&#40;</span><span class="br0">&#41;</span>
&nbsp; &nbsp;<span class="sy0">.</span><span class="me1">Render</span><span class="br0">&#40;</span><span class="st0">&quot;/output/minifyjs_test_output.js&quot;</span><span class="br0">&#41;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">Bundle.JavaScript()
   .Add("/assets/js/jquery_1.7.2.js")
   .Add("/assets/js/minifyjs_test.js")
   .ForceRelease()
   .Render("/output/minifyjs_test_output.js")</pre></div></div>

<p>Would render a script tag like this:</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="html4strict"><thead><tr><td colspan="2"  class="head">HTML</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
</pre></td><td class="de1"><pre class="de1"><span class="sc2">&lt;<span class="kw2">script</span> <span class="kw3">type</span><span class="sy0">=</span><span class="st0">&quot;text/javascript&quot;</span> <span class="kw3">src</span><span class="sy0">=</span><span class="st0">&quot;/output/minifyjs_test_output.js?{hashKeyName}={invalidationHash}&quot;</span>&gt;&lt;<span class="sy0">/</span><span class="kw2">script</span>&gt;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">&lt;script type="text/javascript" src="/output/minifyjs_test_output.js?{hashKeyName}={invalidationHash}"&gt;&lt;/script&gt;</pre></div></div>

<p>The main disadvantage of this is that it doesn&#8217;t work with all caching proxies, though it seems to be pretty consistently supported in modern browsers.  The advantage is that it only requires one set of combined files to be stored on the server.  This is usually the best choice for files served locally because it doesn&#8217;t require any cleanup of old files on the server.</p>
<h3>Filename Invalidation</h3>
<p>When using this strategy, hashes are written directly into the filename.  So a bundle set up like this:</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="csharp"><thead><tr><td colspan="2"  class="head">C#</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
</pre></td><td class="de1"><pre class="de1">Bundle<span class="sy0">.</span><span class="me1">JavaScript</span><span class="br0">&#40;</span><span class="br0">&#41;</span>
&nbsp; &nbsp;<span class="sy0">.</span><span class="kw1">Add</span><span class="br0">&#40;</span><span class="st0">&quot;/assets/js/jquery_1.7.2.js&quot;</span><span class="br0">&#41;</span>
&nbsp; &nbsp;<span class="sy0">.</span><span class="kw1">Add</span><span class="br0">&#40;</span><span class="st0">&quot;/assets/js/minifyjs_test.js&quot;</span><span class="br0">&#41;</span>
&nbsp; &nbsp;<span class="sy0">.</span><span class="me1">ForceRelease</span><span class="br0">&#40;</span><span class="br0">&#41;</span>
&nbsp; &nbsp;<span class="sy0">.</span><span class="me1">Render</span><span class="br0">&#40;</span><span class="st0">&quot;/output/minifyjs_test_output#.js&quot;</span><span class="br0">&#41;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">Bundle.JavaScript()
   .Add("/assets/js/jquery_1.7.2.js")
   .Add("/assets/js/minifyjs_test.js")
   .ForceRelease()
   .Render("/output/minifyjs_test_output#.js")</pre></div></div>

<p>Would render a script tag like this:</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="html4strict"><thead><tr><td colspan="2"  class="head">HTML</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
</pre></td><td class="de1"><pre class="de1"><span class="sc2">&lt;<span class="kw2">script</span> <span class="kw3">type</span><span class="sy0">=</span><span class="st0">&quot;text/javascript&quot;</span> <span class="kw3">src</span><span class="sy0">=</span><span class="st0">&quot;/output/minifyjs_test_output{invalidationHash}.js&quot;</span>&gt;&lt;<span class="sy0">/</span><span class="kw2">script</span>&gt;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">&lt;script type="text/javascript" src="/output/minifyjs_test_output{invalidationHash}.js"&gt;&lt;/script&gt;</pre></div></div>

<p>The main disadvantage of this strategy is that it tends to accumulate files over time. Because the hash is generated off of the combined file&#8217;s contents, every time a bundled script file or stylesheet changes, a new combined file is created. It eventually becomes necessary to clean this stuff up (The easiest way is to delete all files and reset the app pool, otherwise its usually safe to delete all but the most recent version for each combined file). The main advantage is that it is supported by all caching proxies &#8211; this consistent behavior makes it a good choice for CDN environments where you typically need to manage multiple versions of files anyway.</p>
<h3>Folder Invalidation</h3>
<p>This new strategy is similar to the filename invalidation strategy when it comes to output file naming, but behaves more like querystring invalidation in terms of disk footprint.  It is used similarly to the hash in filename option, in that you simply put a hash symbol in the path where you want the content&#8217;s hash to show up.  Unlike the hash in filename method, it requires you to use it explicitly because we need to be able to figure out the right folder to write files to.  So a bundle set up like this:</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="csharp"><thead><tr><td colspan="2"  class="head">C#</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
</pre></td><td class="de1"><pre class="de1">Bundle<span class="sy0">.</span><span class="me1">JavaScript</span><span class="br0">&#40;</span><span class="br0">&#41;</span>
&nbsp; &nbsp;<span class="sy0">.</span><span class="kw1">Add</span><span class="br0">&#40;</span><span class="st0">&quot;/assets/js/jquery_1.7.2.js&quot;</span><span class="br0">&#41;</span>
&nbsp; &nbsp;<span class="sy0">.</span><span class="kw1">Add</span><span class="br0">&#40;</span><span class="st0">&quot;/assets/js/minifyjs_test.js&quot;</span><span class="br0">&#41;</span>
&nbsp; &nbsp;<span class="sy0">.</span><span class="me1">WithCacheInvalidationStrategy</span><span class="br0">&#40;</span><span class="kw3">new</span> HashAsVirtualDirectoryCacheInvalidationStrategy<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#41;</span>
&nbsp; &nbsp;<span class="sy0">.</span><span class="me1">ForceRelease</span><span class="br0">&#40;</span><span class="br0">&#41;</span>
&nbsp; &nbsp;<span class="sy0">.</span><span class="me1">Render</span><span class="br0">&#40;</span><span class="st0">&quot;/output/#/minifyjs_test_output.js&quot;</span><span class="br0">&#41;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">Bundle.JavaScript()
   .Add("/assets/js/jquery_1.7.2.js")
   .Add("/assets/js/minifyjs_test.js")
   .WithCacheInvalidationStrategy(new HashAsVirtualDirectoryCacheInvalidationStrategy())
   .ForceRelease()
   .Render("/output/#/minifyjs_test_output.js")</pre></div></div>

<p>Would render a script tag like this:</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="html4strict"><thead><tr><td colspan="2"  class="head">HTML</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
</pre></td><td class="de1"><pre class="de1"><span class="sc2">&lt;<span class="kw2">script</span> <span class="kw3">type</span><span class="sy0">=</span><span class="st0">&quot;text/javascript&quot;</span> <span class="kw3">src</span><span class="sy0">=</span><span class="st0">&quot;/output/{invalidationHash}/minifyjs_test_output.js&quot;</span>&gt;&lt;<span class="sy0">/</span><span class="kw2">script</span>&gt;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">&lt;script type="text/javascript" src="/output/{invalidationHash}/minifyjs_test_output.js"&gt;&lt;/script&gt;</pre></div></div>

<p>From looking at these URLs it is clear that caching agents will handle this the same way they handled the URLs built with the filename invalidation strategy.  But the strategy actually scrubs the hash from the disk location for the bundle, meaning that only one file is generated.  We can then set up a rewrite rule to scrub the hash out of the URL for incoming requests like so.</p>
<p>So for IIS we could do something like this in our web.config:</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="xml"><thead><tr><td colspan="2"  class="head">XML</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
</pre></td><td class="de1"><pre class="de1">&nbsp; <span class="sc3"><span class="re1">&lt;system.webServer<span class="re2">&gt;</span></span></span>
&nbsp; &nbsp; <span class="sc-1">&lt;!-- snip --&gt;</span>
&nbsp; &nbsp; <span class="sc3"><span class="re1">&lt;rewrite<span class="re2">&gt;</span></span></span>
&nbsp; &nbsp; &nbsp; <span class="sc3"><span class="re1">&lt;rules<span class="re2">&gt;</span></span></span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="sc3"><span class="re1">&lt;rule</span> <span class="re0">name</span>=<span class="st0">&quot;squishit&quot;</span><span class="re2">&gt;</span></span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="sc3"><span class="re1">&lt;match</span> <span class="re0">url</span>=<span class="st0">&quot;([S]+)(/r-[w]+/)([S]+)&quot;</span> &nbsp;<span class="re2">/&gt;</span></span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="sc3"><span class="re1">&lt;action</span> <span class="re0">type</span>=<span class="st0">&quot;Rewrite&quot;</span> <span class="re0">url</span>=<span class="st0">&quot;{R:1}/{R:3}&quot;</span> <span class="re2">/&gt;</span></span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="sc3"><span class="re1">&lt;/rule<span class="re2">&gt;</span></span></span>
&nbsp; &nbsp; &nbsp; <span class="sc3"><span class="re1">&lt;/rules<span class="re2">&gt;</span></span></span>
&nbsp; &nbsp; <span class="sc3"><span class="re1">&lt;/rewrite<span class="re2">&gt;</span></span></span>
&nbsp; <span class="sc3"><span class="re1">&lt;/system.webServer<span class="re2">&gt;</span></span></span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">  &lt;system.webServer&gt;
    &lt;!-- snip --&gt;
    &lt;rewrite&gt;
      &lt;rules&gt;
        &lt;rule name="squishit"&gt;
          &lt;match url="([S]+)(/r-[w]+/)([S]+)"  /&gt;
          &lt;action type="Rewrite" url="{R:1}/{R:3}" /&gt;
        &lt;/rule&gt;
      &lt;/rules&gt;
    &lt;/rewrite&gt;
  &lt;/system.webServer&gt;</pre></div></div>

<p>To configure these options globally we can add the following in Application_Start:</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="csharp"><thead><tr><td colspan="2"  class="head">C#</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
</pre></td><td class="de1"><pre class="de1">Bundle<span class="sy0">.</span><span class="me1">ConfigureDefaults</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">.</span><span class="me1">UseCacheInvalidationStrategy</span><span class="br0">&#40;</span><span class="kw3">new</span> HashAsVirtualDirectoryCacheInvalidationStrategy<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#41;</span><span class="sy0">;</span> </pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">Bundle.ConfigureDefaults().UseCacheInvalidationStrategy(new HashAsVirtualDirectoryCacheInvalidationStrategy()); </pre></div></div>

<p>This will result in the supplied strategy being used for all bundles <strong>unless</strong> you override on a bundle using the method shown above.</p>
<p>The end result combines the advantages of querystring invalidation and filename invalidation for what should be a minimal performance hit.  Hopefully this comes in handy in the future.</p>
]]></content:encoded>
			<wfw:commentRss>/index.php/webdev/serverprogramming/using-iis-rewrite-rules-to-improve/feed/</wfw:commentRss>
		<slash:comments>0</slash:comments>
		</item>
		<item>
		<title>SquishIt and Nancy</title>
		<link>/index.php/webdev/serverprogramming/aspnet/squishit-and-nancy/</link>
		<comments>/index.php/webdev/serverprogramming/aspnet/squishit-and-nancy/#comments</comments>
		<pubDate>Fri, 11 Jan 2013 13:11:00 +0000</pubDate>
		<dc:creator><![CDATA[Alex Ullrich]]></dc:creator>
				<category><![CDATA[AJAX]]></category>
		<category><![CDATA[ASP.NET]]></category>
		<category><![CDATA[nancy]]></category>
		<category><![CDATA[squishit]]></category>

		<guid isPermaLink="false">/index.php/2013/01/squishit-and-nancy/</guid>
		<description><![CDATA[Everybody's favorite LTD blogger / Belgian tweeter Chris asked me last week how he could get SquishIt working with the Nancy web framework.  I had to admit, I had no idea.  But couldn't imagine it would be that much more difficult than making it work wi&#8230;]]></description>
				<content:encoded><![CDATA[<p>Everybody&#8217;s favorite <a href="/index.php/All/?disp=authdir&amp;author=7">LTD blogger</a> / <a href="http://twitter.com/chrissie1">Belgian tweeter</a> Chris asked me last week how he could get SquishIt working with the <a href="http://nancyfx.org/">Nancy web framework</a>. I had to admit, I had no idea. But couldn&#8217;t imagine it would be that much more difficult than making it work with ASP.net MVC. So I decided to look into it. It turned out to be pretty much the same, with one extra step. I started out by installing the packages I needed from NuGet to an empty asp.net application:</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="text"><thead><tr><td colspan="2"  class="head">Text</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
</pre></td><td class="de1"><pre class="de1">&gt; install-package SquishIt
&gt; install-package Nancy
&gt; install-package Nancy.Hosting.AspNet
&gt; install-package Nancy.Viewengines.Razor</pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">&gt; install-package SquishIt
&gt; install-package Nancy
&gt; install-package Nancy.Hosting.AspNet
&gt; install-package Nancy.Viewengines.Razor</pre></div></div>

<p>Once installed, there is a little bit of setup work we need to do.</p>
<h3>Configuring Nancy&#8217;s View Engine</h3>
<p>This was infinitely more complex than using a referenced library in a razor view with MVC. Translation: this was as simple as adding a &#8220;razor&#8221; section to the web.config:</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="xml"><thead><tr><td colspan="2"  class="head">XML</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
</pre></td><td class="de1"><pre class="de1">&nbsp; <span class="sc3"><span class="re1">&lt;configSections<span class="re2">&gt;</span></span></span>
&nbsp; &nbsp; <span class="sc3"><span class="re1">&lt;section</span> <span class="re0">name</span>=<span class="st0">&quot;razor&quot;</span> <span class="re0">type</span>=<span class="st0">&quot;Nancy.ViewEngines.Razor.RazorConfigurationSection, Nancy.ViewEngines.Razor&quot;</span> <span class="re2">/&gt;</span></span>
&nbsp; <span class="sc3"><span class="re1">&lt;/configSections<span class="re2">&gt;</span></span></span>
&nbsp; <span class="sc3"><span class="re1">&lt;razor</span> <span class="re0">disableAutoIncludeModelNamespace</span>=<span class="st0">&quot;false&quot;</span><span class="re2">&gt;</span></span>
&nbsp; &nbsp; <span class="sc3"><span class="re1">&lt;assemblies<span class="re2">&gt;</span></span></span>
&nbsp; &nbsp; &nbsp; <span class="sc3"><span class="re1">&lt;add</span> <span class="re0">assembly</span>=<span class="st0">&quot;System, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089&quot;</span> <span class="re2">/&gt;</span></span>
&nbsp; &nbsp; &nbsp; <span class="sc3"><span class="re1">&lt;add</span> <span class="re0">assembly</span>=<span class="st0">&quot;SquishIt.Framework&quot;</span> <span class="re2">/&gt;</span></span>
&nbsp; &nbsp; <span class="sc3"><span class="re1">&lt;/assemblies<span class="re2">&gt;</span></span></span>
&nbsp; &nbsp; <span class="sc3"><span class="re1">&lt;namespaces<span class="re2">&gt;</span></span></span>
&nbsp; &nbsp; &nbsp; <span class="sc3"><span class="re1">&lt;add</span> <span class="re0">namespace</span>=<span class="st0">&quot;SquishIt.Framework&quot;</span> <span class="re2">/&gt;</span></span>
&nbsp; &nbsp; <span class="sc3"><span class="re1">&lt;/namespaces<span class="re2">&gt;</span></span></span>
&nbsp; <span class="sc3"><span class="re1">&lt;/razor<span class="re2">&gt;</span></span></span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">  &lt;configSections&gt;
    &lt;section name="razor" type="Nancy.ViewEngines.Razor.RazorConfigurationSection, Nancy.ViewEngines.Razor" /&gt;
  &lt;/configSections&gt;
  &lt;razor disableAutoIncludeModelNamespace="false"&gt;
    &lt;assemblies&gt;
      &lt;add assembly="System, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" /&gt;
      &lt;add assembly="SquishIt.Framework" /&gt;
    &lt;/assemblies&gt;
    &lt;namespaces&gt;
      &lt;add namespace="SquishIt.Framework" /&gt;
    &lt;/namespaces&gt;
  &lt;/razor&gt;</pre></div></div>

<p>Its worth noting that when I added SquishIt.Framework to the namespaces section it <strong>worked</strong>, but didn&#8217;t help with intellisense. So I ended up adding the @using directives in my views anyway. So if you want intellisense, don&#8217;t bother with the namespaces if redundancy bothers you.</p>
<h3>Static Bundles</h3>
<p>The typical SquishIt use involves writing a new css or javascript file to the server&#8217;s file system. At least I think it does &#8211; this is certainly what I would consider typical. So I looked at that first. First thing I needed to do was figure out how to get Nancy to render a view for me. It wasn&#8217;t terribly difficult, just had to set up a module with the routes involved:</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="csharp"><thead><tr><td colspan="2"  class="head">C#</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
</pre></td><td class="de1"><pre class="de1"><span class="kw1">using</span> <span class="co3">Nancy</span><span class="sy0">;</span>
&nbsp;
<span class="kw1">namespace</span> SquishIt<span class="sy0">.</span><span class="me1">NancySample</span><span class="sy0">.</span><span class="me1">Modules</span>
<span class="br0">&#123;</span>
&nbsp; &nbsp; <span class="kw1">public</span> <span class="kw4">class</span> HomeModule <span class="sy0">:</span> NancyModule
&nbsp; &nbsp; <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">public</span> HomeModule<span class="br0">&#40;</span><span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">Get</span><span class="br0">&#91;</span><span class="st0">&quot;/&quot;</span><span class="br0">&#93;</span> <span class="sy0">=</span> parameters <span class="sy0">=&gt;</span> View<span class="br0">&#91;</span><span class="st0">&quot;Hello.cshtml&quot;</span><span class="br0">&#93;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp; &nbsp; <span class="br0">&#125;</span>
<span class="br0">&#125;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">using Nancy;

namespace SquishIt.NancySample.Modules
{
    public class HomeModule : NancyModule
    {
        public HomeModule()
        {
            Get["/"] = parameters =&gt; View["Hello.cshtml"];
        }
    }
}</pre></div></div>

<p>By convention, Nancy locates the view in Views/Home. I assume it would look in Views/Shared next, but didn&#8217;t bother to confirm. So I added couple javascript files in Content/js, and then added a view with a bundle:</p>
<pre>@using SquishIt.Framework
&lt;!DOCTYPE html&gt;

&lt;html lang="en"&gt;
    &lt;head&gt;
        &lt;meta charset="utf-8" /&gt;
        &lt;title&gt;Hello World Page&lt;/title&gt;
    &lt;/head&gt;
    &lt;body&gt;
        &lt;h1&gt;Hello World Page&lt;/h1&gt;
        &lt;p&gt;Hello World!&lt;/p&gt;
        &lt;p&gt;This page will include a javascript bundle that is rendered to the file system and served as a static asset.&lt;/p&gt;
        @Html.Raw(Bundle.JavaScript()
            .Add("~/Content/js/js1.js")
            .Add("~/Content/js/js2.js")
            .Render("~/Content/combined/bundle.js"))
    &lt;/body&gt;
&lt;/html&gt;</pre>
<p>As long as I disabled debugging, a single tag was rendered into my page for bundle.js. That was easy.</p>
<h3>Cached Bundles</h3>
<p>SquishIt also has the ability to render bundles to an internal cache instead of the file system. This is useful for shared hosting environments. You can read the initial documentation <a href="https://github.com/jetheredge/SquishIt/wiki/Using-SquishIt-programmatically-without-the-file-system">here</a>. Getting this to work with Nancy was not really that different &#8211; we just needed to create a module to handle serving the assets:</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="csharp"><thead><tr><td colspan="2"  class="head">C#</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
</pre></td><td class="de1"><pre class="de1"><span class="kw1">using</span> <span class="co3">System.IO</span><span class="sy0">;</span>
<span class="kw1">using</span> <span class="co3">System.Text</span><span class="sy0">;</span>
<span class="kw1">using</span> <span class="co3">Nancy</span><span class="sy0">;</span>
<span class="kw1">using</span> <span class="co3">SquishIt.Framework</span><span class="sy0">;</span>
&nbsp;
<span class="kw1">namespace</span> SquishIt<span class="sy0">.</span><span class="me1">NancySample</span><span class="sy0">.</span><span class="me1">Modules</span>
<span class="br0">&#123;</span>
&nbsp; &nbsp; <span class="kw1">public</span> <span class="kw4">class</span> AssetsModule <span class="sy0">:</span> NancyModule
&nbsp; &nbsp; <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">public</span> AssetsModule<span class="br0">&#40;</span><span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="sy0">:</span> <span class="kw1">base</span><span class="br0">&#40;</span><span class="st0">&quot;/assets&quot;</span><span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">Get</span><span class="br0">&#91;</span><span class="st0">&quot;/js/{name}&quot;</span><span class="br0">&#93;</span> <span class="sy0">=</span> parameters <span class="sy0">=&gt;</span> CreateResponse<span class="br0">&#40;</span>Bundle<span class="sy0">.</span><span class="me1">JavaScript</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">.</span><span class="me1">RenderCached</span><span class="br0">&#40;</span><span class="br0">&#40;</span><span class="kw4">string</span><span class="br0">&#41;</span>parameters<span class="sy0">.</span><span class="me1">name</span><span class="br0">&#41;</span>, Configuration<span class="sy0">.</span><span class="me1">Instance</span><span class="sy0">.</span><span class="me1">JavascriptMimeType</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">Get</span><span class="br0">&#91;</span><span class="st0">&quot;/css/{name}&quot;</span><span class="br0">&#93;</span> <span class="sy0">=</span> parameters <span class="sy0">=&gt;</span> CreateResponse<span class="br0">&#40;</span>Bundle<span class="sy0">.</span><span class="me1">Css</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">.</span><span class="me1">RenderCached</span><span class="br0">&#40;</span><span class="br0">&#40;</span><span class="kw4">string</span><span class="br0">&#41;</span>parameters<span class="sy0">.</span><span class="me1">name</span><span class="br0">&#41;</span>, Configuration<span class="sy0">.</span><span class="me1">Instance</span><span class="sy0">.</span><span class="me1">CssMimeType</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; Response CreateResponse<span class="br0">&#40;</span><span class="kw4">string</span> content, <span class="kw4">string</span> contentType<span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">return</span> Response
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="sy0">.</span><span class="me1">FromStream</span><span class="br0">&#40;</span><span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="sy0">=&gt;</span> <span class="kw3">new</span> MemoryStream<span class="br0">&#40;</span>Encoding<span class="sy0">.</span><span class="me1">UTF8</span><span class="sy0">.</span><span class="me1">GetBytes</span><span class="br0">&#40;</span>content<span class="br0">&#41;</span><span class="br0">&#41;</span>, contentType<span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="sy0">.</span><span class="me1">WithHeader</span><span class="br0">&#40;</span><span class="st0">&quot;Cache-Control&quot;</span>, <span class="st0">&quot;max-age=45&quot;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp; &nbsp; <span class="br0">&#125;</span>
<span class="br0">&#125;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">using System.IO;
using System.Text;
using Nancy;
using SquishIt.Framework;

namespace SquishIt.NancySample.Modules
{
    public class AssetsModule : NancyModule
    {
        public AssetsModule()
            : base("/assets")
        {
            Get["/js/{name}"] = parameters =&gt; CreateResponse(Bundle.JavaScript().RenderCached((string)parameters.name), Configuration.Instance.JavascriptMimeType);
            Get["/css/{name}"] = parameters =&gt; CreateResponse(Bundle.Css().RenderCached((string)parameters.name), Configuration.Instance.CssMimeType);
        }

        Response CreateResponse(string content, string contentType)
        {
            return Response
                .FromStream(() =&gt; new MemoryStream(Encoding.UTF8.GetBytes(content)), contentType)
                .WithHeader("Cache-Control", "max-age=45");
        }
    }
}</pre></div></div>

<p>This module renders a cached bundle by name using SquishIt&#8217;s globally configured MIME types to render the content. It also sets a cache-control header on the response, just because I wanted to see how to set headers with Nancy.</p>
<p>We then need to add a Global.asax and build a bundle:</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="csharp"><thead><tr><td colspan="2"  class="head">C#</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
</pre></td><td class="de1"><pre class="de1"><span class="kw1">protected</span> <span class="kw4">void</span> Application_Start<span class="br0">&#40;</span><span class="kw4">object</span> sender, EventArgs e<span class="br0">&#41;</span>
<span class="br0">&#123;</span>
&nbsp; &nbsp; Bundle<span class="sy0">.</span><span class="me1">JavaScript</span><span class="br0">&#40;</span><span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="sy0">.</span><span class="kw1">Add</span><span class="br0">&#40;</span><span class="st0">&quot;~/Content/js/js1.js&quot;</span><span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="sy0">.</span><span class="kw1">Add</span><span class="br0">&#40;</span><span class="st0">&quot;~/Content/js/js2.js&quot;</span><span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="sy0">.</span><span class="me1">AsCached</span><span class="br0">&#40;</span><span class="st0">&quot;hello&quot;</span>, <span class="st0">&quot;~/assets/js/hello&quot;</span><span class="br0">&#41;</span><span class="sy0">;</span>
<span class="br0">&#125;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">protected void Application_Start(object sender, EventArgs e)
{
    Bundle.JavaScript()
        .Add("~/Content/js/js1.js")
        .Add("~/Content/js/js2.js")
        .AsCached("hello", "~/assets/js/hello");
}</pre></div></div>

<p>The second parameter here is called filePath, but actually represents the path to the assets controller, including the &#8220;name&#8221; parameter. This is what gets used in the src attribute of the rendered tag.</p>
<p>Finally we can add a view. Note that the cached bundle is rendered by name into the page:</p>
<pre>@using SquishIt.Framework
&lt;!DOCTYPE html&gt;

&lt;html lang="en"&gt;
    &lt;head&gt;
        &lt;meta charset="utf-8" /&gt;
        &lt;title&gt;Hello World Page&lt;/title&gt;
    &lt;/head&gt;
    &lt;body&gt;
        &lt;h1&gt;Hello World Page&lt;/h1&gt;
        &lt;p&gt;Hello World!&lt;/p&gt;
        &lt;p&gt;This page will include a javascript bundle that is rendered into memory in Global.asax and served through the Assets Module&lt;/p&gt;
        @Html.Raw(Bundle.JavaScript()
            .RenderCachedAssetTag("hello"))
    &lt;/body&gt;
&lt;/html&gt;</pre>
<p>and change our HomeModule to serve the route:</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="csharp"><thead><tr><td colspan="2"  class="head">C#</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
</pre></td><td class="de1"><pre class="de1"><span class="kw1">using</span> <span class="co3">Nancy</span><span class="sy0">;</span>
&nbsp;
<span class="kw1">namespace</span> SquishIt<span class="sy0">.</span><span class="me1">NancySample</span><span class="sy0">.</span><span class="me1">Modules</span>
<span class="br0">&#123;</span>
&nbsp; &nbsp; <span class="kw1">public</span> <span class="kw4">class</span> HomeModule <span class="sy0">:</span> NancyModule
&nbsp; &nbsp; <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">public</span> HomeModule<span class="br0">&#40;</span><span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">Get</span><span class="br0">&#91;</span><span class="st0">&quot;/&quot;</span><span class="br0">&#93;</span> <span class="sy0">=</span> parameters <span class="sy0">=&gt;</span> View<span class="br0">&#91;</span><span class="st0">&quot;Hello.cshtml&quot;</span><span class="br0">&#93;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">Get</span><span class="br0">&#91;</span><span class="st0">&quot;/cached&quot;</span><span class="br0">&#93;</span> <span class="sy0">=</span> parameters <span class="sy0">=&gt;</span> View<span class="br0">&#91;</span><span class="st0">&quot;HelloCached.cshtml&quot;</span><span class="br0">&#93;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp; &nbsp; <span class="br0">&#125;</span>
<span class="br0">&#125;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">using Nancy;

namespace SquishIt.NancySample.Modules
{
    public class HomeModule : NancyModule
    {
        public HomeModule()
        {
            Get["/"] = parameters =&gt; View["Hello.cshtml"];
            Get["/cached"] = parameters =&gt; View["HelloCached.cshtml"];
        }
    }
}</pre></div></div>

<p>Piece of cake.</p>
<h3>Conclusion</h3>
<p>This was my first exposure to Nancy, and I came away pretty impressed. Its no-nonsense approach reminds me of other projects I&#8217;ve messed around with in the past like <a href="http://manosdemono.org/">manos</a> and <a href="http://servicestack.net/">ServiceStack</a>. I hope to get a chance to play around with it at least a little bit more.</p>
<p>I&#8217;ll think about putting together a package to help with integration (similar to <a href="http://nuget.org/packages/SquishIt.Mvc/">SquishIt.Mvc</a> but its so easy to get going that I&#8217;m not sure its needed (that package is only a controller and a few extension methods that return MvcHtmlStrings instead of strings). I guess I will have to see if there is any demand, or if there are any issues preventing Nancy from being used in shared hosting environments to see if it&#8217;d be worth it.</p>
<p>The sample project can be downloaded in its&#8217; entirety at <a href="https://github.com/AlexCuse/SquishIt.NancySample/tree/blog-20130111">github</a>.</p>
]]></content:encoded>
			<wfw:commentRss>/index.php/webdev/serverprogramming/aspnet/squishit-and-nancy/feed/</wfw:commentRss>
		<slash:comments>2</slash:comments>
		</item>
		<item>
		<title>Auto-Verifying Moqs</title>
		<link>/index.php/enterprisedev/unittest/auto-verifying-moqs/</link>
		<comments>/index.php/enterprisedev/unittest/auto-verifying-moqs/#respond</comments>
		<pubDate>Thu, 20 Dec 2012 14:06:00 +0000</pubDate>
		<dc:creator><![CDATA[Alex Ullrich]]></dc:creator>
				<category><![CDATA[Unit Testing]]></category>
		<category><![CDATA[c#]]></category>
		<category><![CDATA[moq]]></category>
		<category><![CDATA[tdd]]></category>

		<guid isPermaLink="false">/index.php/2012/12/auto-verifying-moqs/</guid>
		<description><![CDATA[After years of only being familiar with Rhino mocks, I have been using Moq for the last 10 months or so.  For the most part, I like it better.  The syntax seems easier to get people up to speed on, and there are situations where it really cuts down on t&#8230;]]></description>
				<content:encoded><![CDATA[<p>After years of only being familiar with Rhino mocks, I have been using Moq for the last 10 months or so.  For the most part, I like it better.  The syntax seems easier to get people up to speed on, and there are situations where it really cuts down on the amount of test code you have to write.  This is about one of the situations where it doesn&#8217;t.</p>
<p>One of the things I always liked about Rhino Mocks was the idea of the mock repository, and the fact that when disposing of a mock repository all of your setups get verified automagically.  I have a lot of trouble remembering to add calls to VerifyAll when I&#8217;m adding functionality to existing tests because I got so used to this behavior in the past.  When I noticed some tests where I had unnecessary mocks setup today I decided to do something about it.  Its not really anything special but figued I&#8217;d share since I haven&#8217;t posted for a while.</p>
<p>Basically I added a base test fixture to the project that provides a means to create tracked mocks (similar to the MockRepository concept in Rhino).  It provides a method for mock creation, and adds all created mocks to a list that is then verified in the teardown method.  Pretty simple stuff but I found it handy.</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="csharp"><thead><tr><td colspan="2"  class="head">C#</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
</pre></td><td class="de1"><pre class="de1"><span class="kw1">using</span> <span class="co3">System.Collections.Generic</span><span class="sy0">;</span>
<span class="kw1">using</span> <span class="co3">Moq</span><span class="sy0">;</span>
<span class="kw1">using</span> <span class="co3">NUnit.Framework</span><span class="sy0">;</span>
&nbsp;
<span class="kw1">namespace</span> Project<span class="sy0">.</span><span class="me1">Tests</span>
<span class="br0">&#123;</span>
&nbsp; &nbsp; <span class="kw1">public</span> <span class="kw1">abstract</span> <span class="kw4">class</span> MockVerifyingTest
&nbsp; &nbsp; <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">readonly</span> List<span class="sy0">&lt;</span>Mock<span class="sy0">&gt;</span> _trackedMocks <span class="sy0">=</span> <span class="kw3">new</span> List<span class="sy0">&lt;</span>Mock<span class="sy0">&gt;</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">protected</span> Mock<span class="sy0">&lt;</span>T<span class="sy0">&gt;</span> GenerateTrackedMock<span class="sy0">&lt;</span>T<span class="sy0">&gt;</span><span class="br0">&#40;</span>MockBehavior mockBehavior <span class="sy0">=</span> MockBehavior<span class="sy0">.</span><span class="kw1">Default</span><span class="br0">&#41;</span> <span class="kw1">where</span> T <span class="sy0">:</span> <span class="kw4">class</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">var</span> mock <span class="sy0">=</span> <span class="kw3">new</span> Mock<span class="sy0">&lt;</span>T<span class="sy0">&gt;</span><span class="br0">&#40;</span>mockBehavior<span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; _trackedMocks<span class="sy0">.</span><span class="kw1">Add</span><span class="br0">&#40;</span>mock<span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">return</span> mock<span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#91;</span>TearDown<span class="br0">&#93;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">public</span> <span class="kw1">virtual</span> <span class="kw4">void</span> TearDown<span class="br0">&#40;</span><span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">try</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">foreach</span> <span class="br0">&#40;</span><span class="kw1">var</span> mock <span class="kw1">in</span> _trackedMocks<span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; mock<span class="sy0">.</span><span class="me1">VerifyAll</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">finally</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; _trackedMocks<span class="sy0">.</span><span class="me1">Clear</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp; &nbsp; <span class="br0">&#125;</span>
<span class="br0">&#125;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">using System.Collections.Generic;
using Moq;
using NUnit.Framework;

namespace Project.Tests
{
    public abstract class MockVerifyingTest
    {
        readonly List&lt;Mock&gt; _trackedMocks = new List&lt;Mock&gt;();

        protected Mock&lt;T&gt; GenerateTrackedMock&lt;T&gt;(MockBehavior mockBehavior = MockBehavior.Default) where T : class
        {
            var mock = new Mock&lt;T&gt;(mockBehavior);
            _trackedMocks.Add(mock);
            return mock;
        }

        [TearDown]
        public virtual void TearDown()
        {
            try
            {
                foreach (var mock in _trackedMocks)
                {
                    mock.VerifyAll();
                }
            }
            finally
            {
                _trackedMocks.Clear();
            }
        }
    }
}</pre></div></div>

<p>So now instead of something like this:</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="csharp"><thead><tr><td colspan="2"  class="head">C#</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
</pre></td><td class="de1"><pre class="de1"><span class="br0">&#91;</span>Test<span class="br0">&#93;</span>
<span class="kw1">public</span> <span class="kw4">void</span> ATest<span class="br0">&#40;</span><span class="br0">&#41;</span> 
<span class="br0">&#123;</span>
&nbsp; &nbsp; <span class="kw1">var</span> foo <span class="sy0">=</span> <span class="kw3">new</span> Mock<span class="sy0">&lt;</span>IFoo<span class="sy0">&gt;</span><span class="br0">&#40;</span>MockBehavior<span class="sy0">.</span><span class="me1">Strict</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; foo<span class="sy0">.</span><span class="me1">Setup</span><span class="br0">&#40;</span>f <span class="sy0">=&gt;</span> f<span class="sy0">.</span><span class="me1">GetSomething</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#41;</span><span class="sy0">.</span><span class="me1">Returns</span><span class="br0">&#40;</span><span class="kw3">new</span> Something<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; <span class="kw1">var</span> bar <span class="sy0">=</span> <span class="kw3">new</span> Bar<span class="br0">&#40;</span>foo<span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; bar<span class="sy0">.</span><span class="me1">CodeUnderTest</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; foo<span class="sy0">.</span><span class="me1">VerifyAll</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
<span class="br0">&#125;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">[Test]
public void ATest() 
{
    var foo = new Mock&lt;IFoo&gt;(MockBehavior.Strict);

    foo.Setup(f =&gt; f.GetSomething()).Returns(new Something());

    var bar = new Bar(foo);

    bar.CodeUnderTest();

    foo.VerifyAll();
}</pre></div></div>

<p>I can have my fixture inherit from MockVerifyingTest and write it like this:</p>
<p><

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="csharp"><thead><tr><td colspan="2"  class="head">C#</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
</pre></td><td class="de1"><pre class="de1"><span class="br0">&#91;</span>Test<span class="br0">&#93;</span>
<span class="kw1">public</span> <span class="kw4">void</span> ATest<span class="br0">&#40;</span><span class="br0">&#41;</span> 
<span class="br0">&#123;</span>
&nbsp; &nbsp; <span class="kw1">var</span> foo <span class="sy0">=</span> GenerateTrackedMock<span class="sy0">&lt;</span>IFoo<span class="sy0">&gt;</span><span class="br0">&#40;</span>MockBehavior<span class="sy0">.</span><span class="me1">Strict</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; foo<span class="sy0">.</span><span class="me1">Setup</span><span class="br0">&#40;</span>f <span class="sy0">=&gt;</span> f<span class="sy0">.</span><span class="me1">GetSomething</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#41;</span><span class="sy0">.</span><span class="me1">Returns</span><span class="br0">&#40;</span><span class="kw3">new</span> Something<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; <span class="kw1">var</span> bar <span class="sy0">=</span> <span class="kw3">new</span> Bar<span class="br0">&#40;</span>foo<span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; bar<span class="sy0">.</span><span class="me1">CodeUnderTest</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
<span class="br0">&#125;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">[Test]
public void ATest() 
{
    var foo = GenerateTrackedMock&lt;IFoo&gt;(MockBehavior.Strict);

    foo.Setup(f =&gt; f.GetSomething()).Returns(new Something());

    var bar = new Bar(foo);

    bar.CodeUnderTest();
}</pre></div></div>

<p>It only saves one line of test code in this example, but it can add up when dealing with tests that have several mocks.  I realize having this many mocks in play for a test is just asking for trouble, but I am dealing with a legacy system without any test coverage, so working in test coverage without any sweeping refactorings is imperative at this point.  We can make those changes later once we&#8217;ve gotten through a release or two with the code that is now under test <img src="https://s.w.org/images/core/emoji/2/72x72/1f642.png" alt="🙂" class="wp-smiley" style="height: 1em; max-height: 1em;" /></p>
]]></content:encoded>
			<wfw:commentRss>/index.php/enterprisedev/unittest/auto-verifying-moqs/feed/</wfw:commentRss>
		<slash:comments>0</slash:comments>
		</item>
		<item>
		<title>Preprocessor Extensibility in SquishIt 0.9</title>
		<link>/index.php/webdev/serverprogramming/preprocessor-extensibility-in-squishit-0-9/</link>
		<comments>/index.php/webdev/serverprogramming/preprocessor-extensibility-in-squishit-0-9/#respond</comments>
		<pubDate>Fri, 05 Oct 2012 12:38:00 +0000</pubDate>
		<dc:creator><![CDATA[Alex Ullrich]]></dc:creator>
				<category><![CDATA[AJAX]]></category>
		<category><![CDATA[ASP.NET]]></category>
		<category><![CDATA[Javascript]]></category>
		<category><![CDATA[Server Programming]]></category>
		<category><![CDATA[XHTML and CSS]]></category>
		<category><![CDATA[asp.net]]></category>
		<category><![CDATA[squishit]]></category>

		<guid isPermaLink="false">/index.php/2012/10/preprocessor-extensibility-in-squishit-0-9/</guid>
		<description><![CDATA[For the past couple years, .net developers have been embracing various content preprocessors as they become more accessible.  For the same couple of years, we've been trying to keep up.  The dotLess port of the popular .less CSS extension has been getti&#8230;]]></description>
				<content:encoded><![CDATA[<p>For the past couple years, .net developers have been embracing various content preprocessors as they become more accessible.  For the same couple of years, we&#8217;ve been trying to keep up.  The <a href="http://www.dotlesscss.org/">dotLess</a> port of the popular .less CSS extension has been getting better by leaps and bounds. It has become almost trivial to embed a javascript compiler in .net these days (thanks to projects like <a href="http://jurassic.codeplex.com/">Jurassic</a>), enabling us to support things like coffeescript.  So we&#8217;re doing the obvious thing &#8211; stripping preprocessor support from our core library.</p>
<p>There are some good reasons for this.  Why force people to download things like Jurassic or dotLess if they don&#8217;t have the need?  The flipside of this is that we&#8217;d been deliberately avoiding adding support for SASS/SCSS because of concerns about linking to IronRuby &#8211; these concerns largely disappear when preprocessing becomes an opt-in behavior.  Some of these libraries don&#8217;t even work on Mono (I think .less might be the only one that works currently) so I feel extra bitter downloading code that won&#8217;t run on my platform of choice.  Finally, the growth in adoption has been so fast that frankly, we&#8217;re unable to keep up.</p>
<p>So let&#8217;s take a look at some of the original code (well not original as some of our refactorings did find their way to the 0.8.x branch).</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="csharp"><thead><tr><td colspan="2"  class="head">C#</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
</pre></td><td class="de1"><pre class="de1"><span class="kw1">internal</span> <span class="kw1">override</span> <span class="kw4">string</span> PreprocessForDebugging<span class="br0">&#40;</span><span class="kw4">string</span> filename<span class="br0">&#41;</span>
<span class="br0">&#123;</span>
&nbsp; &nbsp; <span class="kw1">if</span><span class="br0">&#40;</span>filename<span class="sy0">.</span><span class="me1">ToLower</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">.</span><span class="me1">EndsWith</span><span class="br0">&#40;</span><span class="st0">&quot;.coffee&quot;</span><span class="br0">&#41;</span><span class="br0">&#41;</span>
&nbsp; &nbsp; <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw4">string</span> js <span class="sy0">=</span> ProcessCoffee<span class="br0">&#40;</span>filename<span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; filename <span class="sy0">+=</span> debugExtension<span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">using</span><span class="br0">&#40;</span><span class="kw1">var</span> fileWriter <span class="sy0">=</span> fileWriterFactory<span class="sy0">.</span><span class="me1">GetFileWriter</span><span class="br0">&#40;</span>filename<span class="br0">&#41;</span><span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; fileWriter<span class="sy0">.</span><span class="me1">Write</span><span class="br0">&#40;</span>js<span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp; &nbsp; <span class="kw1">return</span> filename<span class="sy0">;</span>
<span class="br0">&#125;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">internal override string PreprocessForDebugging(string filename)
{
    if(filename.ToLower().EndsWith(".coffee"))
    {
        string js = ProcessCoffee(filename);
        filename += debugExtension;
        using(var fileWriter = fileWriterFactory.GetFileWriter(filename))
        {
            fileWriter.Write(js);
        }
    }
    return filename;
}</pre></div></div>

<p>As you can see, the trigger for preprocessing is the extension.  This is the desired behavior, but the way it was coded left it very brittle and made adding new preprocessors unwieldy.  So we set out to find a way to break this code out of the core library.  </p>
<p>The approach that we used was plugin based &#8211; we defined an interface and exposed a mechanism to register implementations of this interface with the core library.  Our original interface actually checked a file name to see if it needed preprocessing, so you could define any logic you wanted to determine whether to preprocess &#8211; we ended up eschewing this to go back to the extension-based decisions, for reasons that will be discussed later.  The interface looks like this:</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="csharp"><thead><tr><td colspan="2"  class="head">C#</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
</pre></td><td class="de1"><pre class="de1"><span class="kw1">public</span> <span class="kw4">interface</span> IPreprocessor
<span class="br0">&#123;</span>
&nbsp; &nbsp; <span class="kw4">bool</span> ValidFor<span class="br0">&#40;</span><span class="kw4">string</span> extension<span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; IProcessResult Process<span class="br0">&#40;</span><span class="kw4">string</span> filePath, <span class="kw4">string</span> content<span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; <span class="kw4">string</span><span class="br0">&#91;</span><span class="br0">&#93;</span> Extensions <span class="br0">&#123;</span> <span class="kw1">get</span><span class="sy0">;</span> <span class="br0">&#125;</span>
<span class="br0">&#125;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">public interface IPreprocessor
{
    bool ValidFor(string extension);
    IProcessResult Process(string filePath, string content);
    string[] Extensions { get; }
}</pre></div></div>

<p>The &#8220;ValidFor&#8221; method does exactly what it says &#8211; check if the preprocessor should be used with the supplied extension.  &#8220;Process&#8221; is where the actual preprocessing happens.  The array of extensions is exposed publicly to be used in registering the preprocessor &#8211; this is because each type of content bundle has a list of allowed extensions that is used to filter what gets included when we add a directory full of files.  Finally, the ProcessResult type includes a string representing preprocessed content and a list of any dependent files that were changed.  This last part was added by <a href="http://twitter.com/SimonPStevens">Simon Stevens</a> to enable <a href="https://github.com/jetheredge/SquishIt/pull/211">inclusion of .less imports as dependent files</a>.</p>
<p>Preprocessors can be registered two ways &#8211; both statically and with a particular bundle instance.  For the instance level configuration there is a method in the bundle&#8217;s fluent API called &#8220;WithPreprocessor&#8221; that allows inclusion of a preprocessor with that bundle instance.  Globally, we used the static &#8220;Bundle&#8221; class to allow preprocessor registration &#8211; methods exist there for registering script, style, and global preprocessors.  If preprocessors of the same type are registered both statically and with a bundle instance, the instance-level preprocessor will be used.</p>
<p>Now, back to why we decided to make preprocessor selection based on extension rather than the complete file name.  To understand, I guess all you have to do is read about the <a href="http://guides.rubyonrails.org/asset_pipeline.html">Asset Pipeline</a> in Ruby on Rails, but I will attempt to summarize here.  The beautiful thing about the pipeline approach is the ability to chain preprocessing steps.  This allows you to use ERB&#8217;s helper methods in your file <strong>prior to</strong> other preprocessing.  For example, if you wanted to use ERB helpers in a coffeescript file you can name your file file.js.coffee.erb &#8211; when an asset has the .coffee and .erb extensions, both preprocessors will be applied.  The order they are applied is driven by the reverse order of extensions, so *.coffee.erb would be preprocessed first by ERB and then by the coffeescript compiler.  Our goal was to emulate this behavior in SquishIt, and without matching preprocessors to extensions rather than filenames we wouldn&#8217;t have been able to.</p>
<p>Enabling this behavior is mostly a matter of finding preprocessors correctly.  We find them like so:</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="csharp"><thead><tr><td colspan="2"  class="head">C#</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
</pre></td><td class="de1"><pre class="de1"><span class="kw1">protected</span> IPreprocessor<span class="br0">&#91;</span><span class="br0">&#93;</span> FindPreprocessors<span class="br0">&#40;</span><span class="kw4">string</span> file<span class="br0">&#41;</span>
<span class="br0">&#123;</span>
&nbsp; &nbsp; <span class="kw1">return</span> file<span class="sy0">.</span><span class="me1">Split</span><span class="br0">&#40;</span><span class="st0">'.'</span><span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="sy0">.</span><span class="me1">Skip</span><span class="br0">&#40;</span><span class="nu0">1</span><span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="sy0">.</span><span class="me1">Reverse</span><span class="br0">&#40;</span><span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="sy0">.</span><span class="kw1">Select</span><span class="br0">&#40;</span>FindPreprocessor<span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="sy0">.</span><span class="kw1">Where</span><span class="br0">&#40;</span>p <span class="sy0">=&gt;</span> p <span class="sy0">!=</span> <span class="kw1">null</span><span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="sy0">.</span><span class="me1">ToArray</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
<span class="br0">&#125;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">protected IPreprocessor[] FindPreprocessors(string file)
{
    return file.Split('.')
        .Skip(1)
        .Reverse()
        .Select(FindPreprocessor)
        .Where(p =&gt; p != null)
        .ToArray();
}</pre></div></div>

<p>It&#8217;s important to note here that &#8220;FindPreprocessor&#8221; uses the firstpreprocessor it finds for a given extension &#8211; so we need to take care if implementing preprocessors for common file extensions like &#8220;.js&#8221;.  We can then use the preprocessors in the default order to process our content:</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="csharp"><thead><tr><td colspan="2"  class="head">C#</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
</pre></td><td class="de1"><pre class="de1"><span class="kw1">protected</span> <span class="kw4">string</span> PreprocessFile<span class="br0">&#40;</span><span class="kw4">string</span> file, IPreprocessor<span class="br0">&#91;</span><span class="br0">&#93;</span> preprocessors<span class="br0">&#41;</span>
<span class="br0">&#123;</span>
&nbsp; &nbsp; <span class="kw1">return</span> directoryWrapper<span class="sy0">.</span><span class="me1">ExecuteInDirectory</span><span class="br0">&#40;</span>Path<span class="sy0">.</span><span class="me1">GetDirectoryName</span><span class="br0">&#40;</span>file<span class="br0">&#41;</span>,
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="sy0">=&gt;</span> PreprocessContent<span class="br0">&#40;</span>file, preprocessors, ReadFile<span class="br0">&#40;</span>file<span class="br0">&#41;</span><span class="br0">&#41;</span><span class="br0">&#41;</span><span class="sy0">;</span>
<span class="br0">&#125;</span>
&nbsp;
<span class="kw1">protected</span> <span class="kw4">string</span> PreprocessContent<span class="br0">&#40;</span><span class="kw4">string</span> file, IPreprocessor<span class="br0">&#91;</span><span class="br0">&#93;</span> preprocessors, <span class="kw4">string</span> content<span class="br0">&#41;</span>
<span class="br0">&#123;</span>
&nbsp; &nbsp; <span class="kw1">return</span> preprocessors<span class="sy0">.</span><span class="me1">NullSafeAny</span><span class="br0">&#40;</span><span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span class="sy0">?</span> preprocessors<span class="sy0">.</span><span class="me1">Aggregate</span><span class="br0">&#40;</span>content, <span class="br0">&#40;</span>cntnt, pp<span class="br0">&#41;</span> <span class="sy0">=&gt;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">var</span> result <span class="sy0">=</span> pp<span class="sy0">.</span><span class="me1">Process</span><span class="br0">&#40;</span>file, cntnt<span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; bundleState<span class="sy0">.</span><span class="me1">DependentFiles</span><span class="sy0">.</span><span class="me1">AddRange</span><span class="br0">&#40;</span>result<span class="sy0">.</span><span class="me1">Dependencies</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">return</span> result<span class="sy0">.</span><span class="me1">Result</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span><span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span class="sy0">:</span> content<span class="sy0">;</span>
<span class="br0">&#125;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">protected string PreprocessFile(string file, IPreprocessor[] preprocessors)
{
    return directoryWrapper.ExecuteInDirectory(Path.GetDirectoryName(file),
        () =&gt; PreprocessContent(file, preprocessors, ReadFile(file)));
}

protected string PreprocessContent(string file, IPreprocessor[] preprocessors, string content)
{
    return preprocessors.NullSafeAny()
               ? preprocessors.Aggregate(content, (cntnt, pp) =&gt;
                                                      {
                                                          var result = pp.Process(file, cntnt);
                                                          bundleState.DependentFiles.AddRange(result.Dependencies);
                                                          return result.Result;
                                                      })
               : content;
}</pre></div></div>

<p>Despite the fact that we have totally broken everything users have come to depend on, we really do want to make the transition easier for people who were using .less or coffeescript with SquishIt.  This is where the tremendous <a href="http://nuget.org/packages/WebActivator">WebActivator</a> library comes in.  By including this library in our project, it allows us to define bits of code to run when the application starts up, like so:</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="csharp"><thead><tr><td colspan="2"  class="head">C#</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
</pre></td><td class="de1"><pre class="de1"><span class="br0">&#91;</span>assembly<span class="sy0">:</span> WebActivator<span class="sy0">.</span><span class="me1">PreApplicationStartMethod</span><span class="br0">&#40;</span><span class="kw3">typeof</span><span class="br0">&#40;</span>$rootnamespace$<span class="sy0">.</span><span class="me1">App_Start</span><span class="sy0">.</span><span class="me1">SquishItHogan</span><span class="br0">&#41;</span>, <span class="st0">&quot;Start&quot;</span><span class="br0">&#41;</span><span class="br0">&#93;</span>
&nbsp;
<span class="kw1">namespace</span> $rootnamespace$<span class="sy0">.</span><span class="me1">App_Start</span>
<span class="br0">&#123;</span>
&nbsp; &nbsp; <span class="kw1">using</span> <span class="co3">SquishIt.Framework</span><span class="sy0">;</span>
&nbsp; &nbsp; <span class="kw1">using</span> <span class="co3">SquishIt.Hogan</span><span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; <span class="kw1">public</span> <span class="kw4">class</span> SquishItHogan
&nbsp; &nbsp; <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">public</span> <span class="kw1">static</span> <span class="kw4">void</span> Start<span class="br0">&#40;</span><span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Bundle<span class="sy0">.</span><span class="me1">RegisterScriptPreprocessor</span><span class="br0">&#40;</span><span class="kw3">new</span> HoganPreprocessor<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp; &nbsp; <span class="br0">&#125;</span>
<span class="br0">&#125;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">[assembly: WebActivator.PreApplicationStartMethod(typeof($rootnamespace$.App_Start.SquishItHogan), "Start")]

namespace $rootnamespace$.App_Start
{
    using SquishIt.Framework;
    using SquishIt.Hogan;

    public class SquishItHogan
    {
        public static void Start()
        {
            Bundle.RegisterScriptPreprocessor(new HoganPreprocessor());
        }
    }
}</pre></div></div>

<p>Thanks to this snippet, you don&#8217;t actually need to do anything to hook up global preprocessing &#8211; just reference the dll containing your preprocessor and WebActivator.  This example is from the Hogan preprocessor, submitted by <a href="https://twitter.com/jincod">Abdrashitov Vadim</a>.  This pull request made me smile more than any I&#8217;ve seen in recent memory &#8211; a big part of the reason we moved to this model was to make it easier for people to define their own preprocessors and share them with the community.  To have one submitted by a user before we even had a production-ready release was just so cool.</p>
<p>I think this covers most of the changes, at least at a cursory level.  I hope to find the time to put together a bit of proper documentation in the next few months, but hopefully this will help in the meantime.  I&#8217;d like to extend a huge thanks to everyone who reported bugs in our pre-release versions, and to <a href="https://twitter.com/rlsdumont">Rodrigo Dumont</a> who provided the spark to get started on this stuff late last year.</p>
]]></content:encoded>
			<wfw:commentRss>/index.php/webdev/serverprogramming/preprocessor-extensibility-in-squishit-0-9/feed/</wfw:commentRss>
		<slash:comments>0</slash:comments>
		</item>
		<item>
		<title>SquishIt Integration with Amazon S3 / Cloudfront</title>
		<link>/index.php/webdev/serverprogramming/making-squishit-work-with-amazon/</link>
		<comments>/index.php/webdev/serverprogramming/making-squishit-work-with-amazon/#comments</comments>
		<pubDate>Tue, 12 Jun 2012 11:00:00 +0000</pubDate>
		<dc:creator><![CDATA[Alex Ullrich]]></dc:creator>
				<category><![CDATA[ASP.NET]]></category>
		<category><![CDATA[Server Programming]]></category>
		<category><![CDATA[squishit]]></category>

		<guid isPermaLink="false">/index.php/2012/06/making-squishit-work-with-amazon/</guid>
		<description><![CDATA[For the unfortunate souls not in the know (or is it the fortunate souls using one of the myriad alternatives?), SquishIt is a library used to optimize content delivery at runtime in ASP.net applications.  It combines and minifies javascript files, and a&#8230;]]></description>
				<content:encoded><![CDATA[<p>For the unfortunate souls not in the know (or is it the fortunate souls using one of the myriad alternatives?), <a href="https://github.com/jetheredge/SquishIt">SquishIt</a> is a library used to optimize content delivery at runtime in ASP.net applications.  It combines and minifies javascript files, and also does a bit of preprocessing for things like <a href="http://lesscss.org/">LESS</a> and <a href="http://coffeescript.org/">CoffeeScript</a>.  I&#8217;ve been working with Justin Etheredge (<a href="http://www.codethinked.com/">blog</a>|<a href="https://twitter.com/#!/justinetheredge">twitter</a>) on this for a while, first on patches for various bugs I encountered trying to use SquishIt on linux, but more recently my focus has been on improving extensibility.  One of the areas that I really felt the library could benefit from increased extensibility is the area of CDN support.  I&#8217;ve been doing a lot of work with Amazon CloudFront lately, and decided it would be cool to see how cleanly I could get SquishIt to work with the service.</p>
<h3>SquishIt CDN Support in Previous Versions</h3>
<p>I suppose it makes sense to start with what we already had in place.  CDN support in SquishIt has been slowly progressing, largely thanks to community contributions.  As of version 0.8.6 we did have support for injecting a base URL into asset paths, but this required you to know the generated file name in advance and upload it to your CDN through other means.  While this worked, and could be easily automated in your build process, it wasn&#8217;t exactly convenient.  The pull requests we&#8217;ve gotten have done a fairly good job showing us what the community wants in terms of CDN support, so it feels like it is time to start trying to treat it as a first class citizen.    The first thing I would like is a way to render the combined file directly to my CDN if it doesn&#8217;t already exist, and maybe a way to force overwriting the file if need be.</p>
<h3>Adding Support for Custom Renderers</h3>
<p>For a while now, SquishIt has had an IRenderer interface.  It has been there, but it has only been used internally to support rendering to the file system or to an in-memory cache.  To get started, we needed to expose this interface publicly so that other assemblies could provide implementations.  Once exposed, we need to enable consumers to supply their custom renderers to the SquishIt core somehow.</p>
<p>SquishIt uses a fluent configuration syntax for setting up individual bundles, and that seemed as good a place to start as any.  Typical usage looks something like this:</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="csharp"><thead><tr><td colspan="2"  class="head">C#</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
</pre></td><td class="de1"><pre class="de1">Bundle<span class="sy0">.</span><span class="me1">JavaScript</span><span class="br0">&#40;</span><span class="br0">&#41;</span>
&nbsp; &nbsp; <span class="sy0">.</span><span class="me1">WithAttribute</span><span class="br0">&#40;</span><span class="st0">&quot;attrName&quot;</span>, <span class="st0">&quot;attrValue&quot;</span><span class="br0">&#41;</span>
&nbsp; &nbsp; <span class="sy0">.</span><span class="kw1">Add</span><span class="br0">&#40;</span><span class="st0">&quot;file1.js&quot;</span><span class="br0">&#41;</span>
&nbsp; &nbsp; <span class="sy0">.</span><span class="kw1">Add</span><span class="br0">&#40;</span><span class="st0">&quot;/otherscripts/file2.js&quot;</span><span class="br0">&#41;</span>
&nbsp; &nbsp; <span class="sy0">.</span><span class="me1">Render</span><span class="br0">&#40;</span><span class="st0">&quot;combinedOutput.js&quot;</span><span class="br0">&#41;</span><span class="sy0">;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">Bundle.JavaScript()
    .WithAttribute("attrName", "attrValue")
    .Add("file1.js")
    .Add("/otherscripts/file2.js")
    .Render("combinedOutput.js");</pre></div></div>

<p>So the first thing that came to mind was to add something like a &#8220;WithFileRenderer&#8221; method.  This would give us a way to inject a renderer into a bundle and have it used to render the combined files.  However, we probably don&#8217;t want to render to the CDN while debugging, so &#8220;WithReleaseFileRenderer&#8221; might be more appropriate.   Setting up the method went something like this:</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="csharp"><thead><tr><td colspan="2"  class="head">C#</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
</pre></td><td class="de1"><pre class="de1">IRenderer releaseFileRenderer<span class="sy0">;</span>
&nbsp;
<span class="kw1">public</span> T WithReleaseFileRenderer<span class="br0">&#40;</span>IRenderer renderer<span class="br0">&#41;</span>
<span class="br0">&#123;</span>
&nbsp; &nbsp; <span class="kw1">this</span><span class="sy0">.</span><span class="me1">releaseFileRenderer</span> <span class="sy0">=</span> renderer<span class="sy0">;</span>
&nbsp; &nbsp; <span class="kw1">return</span> <span class="br0">&#40;</span>T<span class="br0">&#41;</span><span class="kw1">this</span><span class="sy0">;</span>
<span class="br0">&#125;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">IRenderer releaseFileRenderer;

public T WithReleaseFileRenderer(IRenderer renderer)
{
    this.releaseFileRenderer = renderer;
    return (T)this;
}</pre></div></div>

<p>We also want a way to configure this globally, to do that we needed to add a bit to our configuration class.  This was basically the same thing:</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="csharp"><thead><tr><td colspan="2"  class="head">C#</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
</pre></td><td class="de1"><pre class="de1">IRenderer _defaultReleaseRenderer<span class="sy0">;</span>
<span class="kw1">public</span> Configuration UseReleaseRenderer<span class="br0">&#40;</span>IRenderer releaseRenderer<span class="br0">&#41;</span>
<span class="br0">&#123;</span>
&nbsp; &nbsp; _defaultReleaseRenderer <span class="sy0">=</span> releaseRenderer<span class="sy0">;</span>
&nbsp; &nbsp; <span class="kw1">return</span> <span class="kw1">this</span><span class="sy0">;</span>
<span class="br0">&#125;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">IRenderer _defaultReleaseRenderer;
public Configuration UseReleaseRenderer(IRenderer releaseRenderer)
{
    _defaultReleaseRenderer = releaseRenderer;
    return this;
}</pre></div></div>

<p>Finally, we need to change the way the file renderer is obtained when we go to render the combined assets.  Previously we were instantiating a new FileRenderer or CacheRenderer depending on circumstance, and passing that renderer into the main rendering method.  This won&#8217;t cut it anymore, as our needs have gotten significantly more complex.  The constraints we have to deal with are as follows:</p>
<ul>
<li>When debugging we should use a normal file renderer</li>
<li>We should favor a renderer configured at the instance level over one configured statically</li>
<li>If no instance or static renderer is configured we should use the old default behavior</li>
</ul>
<p>So the constructor calls for a new FileRenderer are replaced with calls to this method:</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="csharp"><thead><tr><td colspan="2"  class="head">C#</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
</pre></td><td class="de1"><pre class="de1"><span class="kw1">protected</span> IRenderer GetFileRenderer<span class="br0">&#40;</span><span class="br0">&#41;</span>
<span class="br0">&#123;</span>
&nbsp; &nbsp; <span class="kw1">return</span> debugStatusReader<span class="sy0">.</span><span class="me1">IsDebuggingEnabled</span><span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="sy0">?</span> <span class="kw3">new</span> FileRenderer<span class="br0">&#40;</span>fileWriterFactory<span class="br0">&#41;</span> <span class="sy0">:</span>
&nbsp; &nbsp; &nbsp; &nbsp; bundleState<span class="sy0">.</span><span class="me1">ReleaseFileRenderer</span> <span class="sy0">??</span>
&nbsp; &nbsp; &nbsp; &nbsp; Configuration<span class="sy0">.</span><span class="me1">Instance</span><span class="sy0">.</span><span class="me1">DefaultReleaseRenderer</span><span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="sy0">??</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw3">new</span> FileRenderer<span class="br0">&#40;</span>fileWriterFactory<span class="br0">&#41;</span><span class="sy0">;</span>
<span class="br0">&#125;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">protected IRenderer GetFileRenderer()
{
    return debugStatusReader.IsDebuggingEnabled() ? new FileRenderer(fileWriterFactory) :
        bundleState.ReleaseFileRenderer ??
        Configuration.Instance.DefaultReleaseRenderer() ??
        new FileRenderer(fileWriterFactory);
}</pre></div></div>

<p>This is basically all we needed to do to enable us to plug in a custom renderer to use in release mode.  Now we can look at how we can make the CDN integration happen.</p>
<h3>Building the S3 Keys</h3>
<p>The only really tricky thing about building the renderer is that it takes a string representing the disk location to render to.  Changing what the renderer takes as a parameter would involve a more significant change to the core behavior than I&#8217;m comfortable making right now, so the first thing we need is a way to turn these disk locations into keys that S3 can use.  The key we create needs to match the relative path to that of the locally-rendered asset so that injecting the base url will yield the absolute path that we need.</p>
<p>None of this is terribly difficult &#8211; the main edge cases we need to cover are</p>
<ul>
<li>Root appearing twice in the file path (because of Windows&#8217; drive lettering this is mostly an issue running on unix-based systems)</li>
<li>Virtual directories</li>
</ul>
<p>To meet these requirements the two pieces of information that we need inside the key builder are the physical application path and virtual directory.  Here are some tests:</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="csharp"><thead><tr><td colspan="2"  class="head">C#</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
</pre></td><td class="de1"><pre class="de1"><span class="br0">&#91;</span>Test<span class="br0">&#93;</span>
<span class="kw1">public</span> <span class="kw4">void</span> ReturnToRelative<span class="br0">&#40;</span><span class="br0">&#41;</span>
<span class="br0">&#123;</span>
&nbsp; &nbsp; <span class="kw1">var</span> root <span class="sy0">=</span> <span class="st_h">@&quot;C:fakedir&quot;</span><span class="sy0">;</span>
&nbsp; &nbsp; <span class="kw1">var</span> file <span class="sy0">=</span> <span class="st_h">@&quot;anotherfile.js&quot;</span><span class="sy0">;</span>
&nbsp; &nbsp; <span class="kw1">var</span> expected <span class="sy0">=</span> <span class="st_h">@&quot;another/file.js&quot;</span><span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; <span class="kw1">var</span> builder <span class="sy0">=</span> <span class="kw3">new</span> KeyBuilder<span class="br0">&#40;</span>root, <span class="st0">&quot;&quot;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; Assert<span class="sy0">.</span><span class="me1">AreEqual</span><span class="br0">&#40;</span>expected, builder<span class="sy0">.</span><span class="me1">GetKeyFor</span><span class="br0">&#40;</span>root <span class="sy0">+</span> file<span class="br0">&#41;</span><span class="br0">&#41;</span><span class="sy0">;</span>
<span class="br0">&#125;</span>
&nbsp;
<span class="br0">&#91;</span>Test<span class="br0">&#93;</span>
<span class="kw1">public</span> <span class="kw4">void</span> ReturnToRelative_Injects_Virtual_Directory<span class="br0">&#40;</span><span class="br0">&#41;</span>
<span class="br0">&#123;</span>
&nbsp; &nbsp; <span class="kw1">var</span> root <span class="sy0">=</span> <span class="st_h">@&quot;C:fakedir&quot;</span><span class="sy0">;</span>
&nbsp; &nbsp; <span class="kw1">var</span> file <span class="sy0">=</span> <span class="st_h">@&quot;anotherfile.js&quot;</span><span class="sy0">;</span>
&nbsp; &nbsp; <span class="kw1">var</span> vdir <span class="sy0">=</span> <span class="st0">&quot;/this&quot;</span><span class="sy0">;</span>
&nbsp; &nbsp; <span class="kw1">var</span> expected <span class="sy0">=</span> <span class="st_h">@&quot;this/another/file.js&quot;</span><span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; <span class="kw1">var</span> builder <span class="sy0">=</span> <span class="kw3">new</span> KeyBuilder<span class="br0">&#40;</span>root, vdir<span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; Assert<span class="sy0">.</span><span class="me1">AreEqual</span><span class="br0">&#40;</span>expected, builder<span class="sy0">.</span><span class="me1">GetKeyFor</span><span class="br0">&#40;</span>root <span class="sy0">+</span> file<span class="br0">&#41;</span><span class="br0">&#41;</span><span class="sy0">;</span>
<span class="br0">&#125;</span>
&nbsp;
<span class="br0">&#91;</span>Test<span class="br0">&#93;</span>
<span class="kw1">public</span> <span class="kw4">void</span> ReturnToRelative_Only_Replaces_First_Occurrence_Of_Root<span class="br0">&#40;</span><span class="br0">&#41;</span>
<span class="br0">&#123;</span>
&nbsp; &nbsp; <span class="kw1">var</span> root <span class="sy0">=</span> <span class="st_h">@&quot;test/&quot;</span><span class="sy0">;</span>
&nbsp; &nbsp; <span class="kw1">var</span> file <span class="sy0">=</span> <span class="st_h">@&quot;another/andthen/test/again.js&quot;</span><span class="sy0">;</span>
&nbsp; &nbsp; <span class="kw1">var</span> expected <span class="sy0">=</span> <span class="st_h">@&quot;another/andthen/test/again.js&quot;</span><span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; <span class="kw1">var</span> builder <span class="sy0">=</span> <span class="kw3">new</span> KeyBuilder<span class="br0">&#40;</span>root, <span class="st0">&quot;&quot;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; Assert<span class="sy0">.</span><span class="me1">AreEqual</span><span class="br0">&#40;</span>expected, builder<span class="sy0">.</span><span class="me1">GetKeyFor</span><span class="br0">&#40;</span>root <span class="sy0">+</span> file<span class="br0">&#41;</span><span class="br0">&#41;</span><span class="sy0">;</span>
<span class="br0">&#125;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">[Test]
public void ReturnToRelative()
{
    var root = @"C:fakedir";
    var file = @"anotherfile.js";
    var expected = @"another/file.js";

    var builder = new KeyBuilder(root, "");
    Assert.AreEqual(expected, builder.GetKeyFor(root + file));
}

[Test]
public void ReturnToRelative_Injects_Virtual_Directory()
{
    var root = @"C:fakedir";
    var file = @"anotherfile.js";
    var vdir = "/this";
    var expected = @"this/another/file.js";

    var builder = new KeyBuilder(root, vdir);
    Assert.AreEqual(expected, builder.GetKeyFor(root + file));
}

[Test]
public void ReturnToRelative_Only_Replaces_First_Occurrence_Of_Root()
{
    var root = @"test/";
    var file = @"another/andthen/test/again.js";
    var expected = @"another/andthen/test/again.js";

    var builder = new KeyBuilder(root, "");
    Assert.AreEqual(expected, builder.GetKeyFor(root + file));
}</pre></div></div>

<p>And the implementation for the KeyBuilder:</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="csharp"><thead><tr><td colspan="2"  class="head">C#</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
</pre></td><td class="de1"><pre class="de1"><span class="kw1">internal</span> <span class="kw4">class</span> KeyBuilder <span class="sy0">:</span> IKeyBuilder
<span class="br0">&#123;</span>
&nbsp; &nbsp; <span class="kw1">readonly</span> <span class="kw4">string</span> physicalApplicationPath<span class="sy0">;</span>
&nbsp; &nbsp; <span class="kw1">readonly</span> <span class="kw4">string</span> virtualDirectory<span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; <span class="kw1">public</span> KeyBuilder<span class="br0">&#40;</span><span class="kw4">string</span> physicalApplicationPath, <span class="kw4">string</span> virtualDirectory<span class="br0">&#41;</span>
&nbsp; &nbsp; <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">this</span><span class="sy0">.</span><span class="me1">physicalApplicationPath</span> <span class="sy0">=</span> physicalApplicationPath<span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">this</span><span class="sy0">.</span><span class="me1">virtualDirectory</span> <span class="sy0">=</span> virtualDirectory<span class="sy0">;</span>
&nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp;
&nbsp; &nbsp; <span class="kw1">public</span> <span class="kw4">string</span> GetKeyFor<span class="br0">&#40;</span><span class="kw4">string</span> path<span class="br0">&#41;</span>
&nbsp; &nbsp; <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">return</span> RelativeFromAbsolutePath<span class="br0">&#40;</span>path<span class="br0">&#41;</span><span class="sy0">.</span><span class="me1">TrimStart</span><span class="br0">&#40;</span><span class="st0">'/'</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp;
&nbsp; &nbsp; <span class="kw4">string</span> RelativeFromAbsolutePath<span class="br0">&#40;</span><span class="kw4">string</span> path<span class="br0">&#41;</span>
&nbsp; &nbsp; <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; path <span class="sy0">=</span> path<span class="sy0">.</span><span class="me1">StartsWith</span><span class="br0">&#40;</span>physicalApplicationPath<span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="sy0">?</span> path<span class="sy0">.</span><span class="me1">Substring</span><span class="br0">&#40;</span>physicalApplicationPath<span class="sy0">.</span><span class="me1">Length</span><span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="sy0">:</span> path<span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">return</span> virtualDirectory <span class="sy0">+</span> <span class="st0">&quot;/&quot;</span> <span class="sy0">+</span> path<span class="sy0">.</span><span class="me1">Replace</span><span class="br0">&#40;</span><span class="st_h">@&quot;&quot;</span>, <span class="st0">&quot;/&quot;</span><span class="br0">&#41;</span><span class="sy0">.</span><span class="me1">TrimStart</span><span class="br0">&#40;</span><span class="st0">'/'</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; <span class="br0">&#125;</span>
<span class="br0">&#125;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">internal class KeyBuilder : IKeyBuilder
{
    readonly string physicalApplicationPath;
    readonly string virtualDirectory;

    public KeyBuilder(string physicalApplicationPath, string virtualDirectory)
    {
        this.physicalApplicationPath = physicalApplicationPath;
        this.virtualDirectory = virtualDirectory;
    }

    public string GetKeyFor(string path)
    {
        return RelativeFromAbsolutePath(path).TrimStart('/');
    }

    string RelativeFromAbsolutePath(string path)
    {
        path = path.StartsWith(physicalApplicationPath)
                        ? path.Substring(physicalApplicationPath.Length)
                        : path;

        return virtualDirectory + "/" + path.Replace(@"", "/").TrimStart('/');
    }
}</pre></div></div>

<p>Now that we have a means to build keys we can look at implementing the S3 Renderer.</p>
<h3>S3 Renderer Implementation</h3>
<p>The interface for renderers is very simple.</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="csharp"><thead><tr><td colspan="2"  class="head">C#</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
</pre></td><td class="de1"><pre class="de1"><span class="kw1">public</span> <span class="kw4">interface</span> IRenderer
<span class="br0">&#123;</span>
&nbsp; &nbsp; <span class="kw4">void</span> Render<span class="br0">&#40;</span><span class="kw4">string</span> content, <span class="kw4">string</span> outputPath<span class="br0">&#41;</span><span class="sy0">;</span>
<span class="br0">&#125;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">public interface IRenderer
{
    void Render(string content, string outputPath);
}</pre></div></div>

<p>The only things we&#8217;ll need to implement this method are an initialized S3 client, a bucket and the key builder we implemented in the last section.  By default, we won&#8217;t want to upload our content if it already exists on the CDN, so we will need to check for existence before uploading the content.  This can be done by querying for object metadata using the desired key &#8211; if the file doesn&#8217;t exist we will get a &#8220;not found&#8221; status on the exception thrown by the s3 client.  So the most important test will look like this:</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="csharp"><thead><tr><td colspan="2"  class="head">C#</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
</pre></td><td class="de1"><pre class="de1"><span class="br0">&#91;</span>Test<span class="br0">&#93;</span>
<span class="kw1">public</span> <span class="kw4">void</span> Render_Uploads_If_File_Doesnt_Exist<span class="br0">&#40;</span><span class="br0">&#41;</span>
<span class="br0">&#123;</span>
&nbsp; &nbsp; <span class="kw1">var</span> s3client <span class="sy0">=</span> <span class="kw3">new</span> Mock<span class="sy0">&lt;</span>AmazonS3<span class="sy0">&gt;</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; <span class="kw1">var</span> keyBuilder <span class="sy0">=</span> <span class="kw3">new</span> Mock<span class="sy0">&lt;</span>IKeyBuilder<span class="sy0">&gt;</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; <span class="kw1">var</span> key <span class="sy0">=</span> <span class="st0">&quot;key&quot;</span><span class="sy0">;</span>
&nbsp; &nbsp; <span class="kw1">var</span> bucket <span class="sy0">=</span> <span class="st0">&quot;bucket&quot;</span><span class="sy0">;</span>
&nbsp; &nbsp; <span class="kw1">var</span> path <span class="sy0">=</span> <span class="st0">&quot;path&quot;</span><span class="sy0">;</span>
&nbsp; &nbsp; <span class="kw1">var</span> content <span class="sy0">=</span> <span class="st0">&quot;content&quot;</span><span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; keyBuilder<span class="sy0">.</span><span class="me1">Setup</span><span class="br0">&#40;</span>kb <span class="sy0">=&gt;</span> kb<span class="sy0">.</span><span class="me1">GetKeyFor</span><span class="br0">&#40;</span>path<span class="br0">&#41;</span><span class="br0">&#41;</span><span class="sy0">.</span><span class="me1">Returns</span><span class="br0">&#40;</span>key<span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; s3client<span class="sy0">.</span><span class="me1">Setup</span><span class="br0">&#40;</span>c <span class="sy0">=&gt;</span> c<span class="sy0">.</span><span class="me1">GetObjectMetadata</span><span class="br0">&#40;</span>It<span class="sy0">.</span><span class="kw3">Is</span><span class="sy0">&lt;</span>GetObjectMetadataRequest<span class="sy0">&gt;</span><span class="br0">&#40;</span>gomr <span class="sy0">=&gt;</span> gomr<span class="sy0">.</span><span class="me1">BucketName</span> <span class="sy0">==</span> bucket <span class="sy0">&amp;&amp;</span> gomr<span class="sy0">.</span><span class="me1">Key</span> <span class="sy0">==</span> key<span class="br0">&#41;</span><span class="br0">&#41;</span><span class="br0">&#41;</span><span class="sy0">.</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="me1">Throws</span><span class="br0">&#40;</span><span class="kw3">new</span> AmazonS3Exception<span class="br0">&#40;</span><span class="st0">&quot;&quot;</span>, HttpStatusCode<span class="sy0">.</span><span class="me1">NotFound</span><span class="br0">&#41;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; <span class="kw1">using</span><span class="br0">&#40;</span><span class="kw1">var</span> renderer <span class="sy0">=</span> S3Renderer<span class="sy0">.</span><span class="me1">Create</span><span class="br0">&#40;</span>s3client<span class="sy0">.</span><span class="kw4">Object</span><span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="sy0">.</span><span class="me1">WithBucketName</span><span class="br0">&#40;</span>bucket<span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="sy0">.</span><span class="me1">WithKeyBuilder</span><span class="br0">&#40;</span>keyBuilder<span class="sy0">.</span><span class="kw4">Object</span><span class="br0">&#41;</span><span class="br0">&#41;</span>
&nbsp; &nbsp; <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; renderer<span class="sy0">.</span><span class="me1">Render</span><span class="br0">&#40;</span>content, path<span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp;
&nbsp; &nbsp; s3client<span class="sy0">.</span><span class="me1">Verify</span><span class="br0">&#40;</span>c <span class="sy0">=&gt;</span> c<span class="sy0">.</span><span class="me1">PutObject</span><span class="br0">&#40;</span>It<span class="sy0">.</span><span class="kw3">Is</span><span class="sy0">&lt;</span>PutObjectRequest<span class="sy0">&gt;</span><span class="br0">&#40;</span>por <span class="sy0">=&gt;</span> por<span class="sy0">.</span><span class="me1">Key</span> <span class="sy0">==</span> key <span class="sy0">&amp;&amp;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; por<span class="sy0">.</span><span class="me1">BucketName</span> <span class="sy0">==</span> bucket <span class="sy0">&amp;&amp;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; por<span class="sy0">.</span><span class="me1">ContentBody</span> <span class="sy0">==</span> content <span class="sy0">&amp;&amp;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; por<span class="sy0">.</span><span class="me1">CannedACL</span> <span class="sy0">==</span> S3CannedACL<span class="sy0">.</span><span class="me1">NoACL</span><span class="br0">&#41;</span><span class="br0">&#41;</span><span class="br0">&#41;</span><span class="sy0">;</span>
<span class="br0">&#125;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">[Test]
public void Render_Uploads_If_File_Doesnt_Exist()
{
    var s3client = new Mock&lt;AmazonS3&gt;();
    var keyBuilder = new Mock&lt;IKeyBuilder&gt;();

    var key = "key";
    var bucket = "bucket";
    var path = "path";
    var content = "content";

    keyBuilder.Setup(kb =&gt; kb.GetKeyFor(path)).Returns(key);

    s3client.Setup(c =&gt; c.GetObjectMetadata(It.Is&lt;GetObjectMetadataRequest&gt;(gomr =&gt; gomr.BucketName == bucket &amp;&amp; gomr.Key == key))).
        Throws(new AmazonS3Exception("", HttpStatusCode.NotFound));

    using(var renderer = S3Renderer.Create(s3client.Object)
                            .WithBucketName(bucket)
                            .WithKeyBuilder(keyBuilder.Object))
    {
        renderer.Render(content, path);
    }

    s3client.Verify(c =&gt; c.PutObject(It.Is&lt;PutObjectRequest&gt;(por =&gt; por.Key == key &amp;&amp;
                                                                        por.BucketName == bucket &amp;&amp;
                                                                        por.ContentBody == content &amp;&amp;
                                                                        por.CannedACL == S3CannedACL.NoACL)));
}</pre></div></div>

<p>Note that it is checking the PutObjectRequest to ensure that the ACL used is &#8220;NoACL&#8221;.  This is probably not an optimal default (most people will want the &#8220;PublicRead&#8221; ACL I imagine) but I decided to err on the side of caution and force people to opt-in to making their content publicly visible.  The implementation for the render method looks something like this:</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="csharp"><thead><tr><td colspan="2"  class="head">C#</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
</pre></td><td class="de1"><pre class="de1"><span class="kw1">public</span> <span class="kw4">void</span> Render<span class="br0">&#40;</span><span class="kw4">string</span> content, <span class="kw4">string</span> outputPath<span class="br0">&#41;</span>
<span class="br0">&#123;</span>
&nbsp; &nbsp; <span class="kw1">if</span><span class="br0">&#40;</span><span class="kw4">string</span><span class="sy0">.</span><span class="me1">IsNullOrEmpty</span><span class="br0">&#40;</span>outputPath<span class="br0">&#41;</span> <span class="sy0">||</span> <span class="kw4">string</span><span class="sy0">.</span><span class="me1">IsNullOrEmpty</span><span class="br0">&#40;</span>content<span class="br0">&#41;</span><span class="br0">&#41;</span> <span class="kw1">throw</span> <span class="kw3">new</span> InvalidOperationException<span class="br0">&#40;</span><span class="st0">&quot;Can't render to S3 with missing key/content.&quot;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; <span class="kw1">var</span> key <span class="sy0">=</span> keyBuilder<span class="sy0">.</span><span class="me1">GetKeyFor</span><span class="br0">&#40;</span>outputPath<span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; <span class="kw1">if</span><span class="br0">&#40;</span><span class="sy0">!</span>FileExists<span class="br0">&#40;</span>key<span class="br0">&#41;</span><span class="br0">&#41;</span>
&nbsp; &nbsp; <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; UploadContent<span class="br0">&#40;</span>key, content<span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; <span class="br0">&#125;</span>
<span class="br0">&#125;</span>
&nbsp;
<span class="kw4">void</span> UploadContent<span class="br0">&#40;</span><span class="kw4">string</span> key, <span class="kw4">string</span> content<span class="br0">&#41;</span>
<span class="br0">&#123;</span>
&nbsp; &nbsp; <span class="kw1">var</span> request <span class="sy0">=</span> <span class="kw3">new</span> PutObjectRequest<span class="br0">&#40;</span><span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="sy0">.</span><span class="me1">WithBucketName</span><span class="br0">&#40;</span>bucket<span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="sy0">.</span><span class="me1">WithKey</span><span class="br0">&#40;</span>key<span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="sy0">.</span><span class="me1">WithCannedACL</span><span class="br0">&#40;</span>cannedACL<span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="sy0">.</span><span class="me1">WithContentBody</span><span class="br0">&#40;</span>content<span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; s3client<span class="sy0">.</span><span class="me1">PutObject</span><span class="br0">&#40;</span>request<span class="br0">&#41;</span><span class="sy0">;</span>
<span class="br0">&#125;</span>
&nbsp;
<span class="kw4">bool</span> FileExists<span class="br0">&#40;</span><span class="kw4">string</span> key<span class="br0">&#41;</span>
<span class="br0">&#123;</span>
&nbsp; &nbsp; <span class="kw1">try</span>
&nbsp; &nbsp; <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">var</span> request <span class="sy0">=</span> <span class="kw3">new</span> GetObjectMetadataRequest<span class="br0">&#40;</span><span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="sy0">.</span><span class="me1">WithBucketName</span><span class="br0">&#40;</span>bucket<span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="sy0">.</span><span class="me1">WithKey</span><span class="br0">&#40;</span>key<span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">var</span> response <span class="sy0">=</span> s3client<span class="sy0">.</span><span class="me1">GetObjectMetadata</span><span class="br0">&#40;</span>request<span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">return</span> <span class="kw1">true</span><span class="sy0">;</span>
&nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp; &nbsp; <span class="kw1">catch</span><span class="br0">&#40;</span>AmazonS3Exception ex<span class="br0">&#41;</span>
&nbsp; &nbsp; <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">if</span><span class="br0">&#40;</span>ex<span class="sy0">.</span><span class="me1">StatusCode</span> <span class="sy0">==</span> HttpStatusCode<span class="sy0">.</span><span class="me1">NotFound</span><span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">return</span> <span class="kw1">false</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">throw</span><span class="sy0">;</span>
&nbsp; &nbsp; <span class="br0">&#125;</span>
<span class="br0">&#125;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">public void Render(string content, string outputPath)
{
    if(string.IsNullOrEmpty(outputPath) || string.IsNullOrEmpty(content)) throw new InvalidOperationException("Can't render to S3 with missing key/content.");

    var key = keyBuilder.GetKeyFor(outputPath);
    if(!FileExists(key))
    {
        UploadContent(key, content);
    }
}

void UploadContent(string key, string content)
{
    var request = new PutObjectRequest()
        .WithBucketName(bucket)
        .WithKey(key)
        .WithCannedACL(cannedACL)
        .WithContentBody(content);

    s3client.PutObject(request);
}

bool FileExists(string key)
{
    try
    {
        var request = new GetObjectMetadataRequest()
            .WithBucketName(bucket)
            .WithKey(key);

        var response = s3client.GetObjectMetadata(request);

        return true;
    }
    catch(AmazonS3Exception ex)
    {
        if(ex.StatusCode == HttpStatusCode.NotFound)
        {
            return false;
        }
        throw;
    }
}</pre></div></div>

<p>It has gotten slightly more complex since then (I&#8217;ve added configurable headers and an option for forcing overwrite of the existing file) but the core logic remains the same.  It&#8217;s a fairly naive implementation but my experience with the Amazon services has been good enough so far that I haven&#8217;t encountered a lot of the exceptions that I hope to add handling for in the future.</p>
<h3>Adding Invalidation</h3>
<p>At this point we should be able to render our content directly to S3, but this doesn&#8217;t get us all the way to where we need to be.  While hosting static content in S3 offers some advantages over hosting it locally and it <strong>can</strong> work as a CDN, using CloudFront to deliver your S3 content makes more sense if you really want to minimize latency.  To make this work we&#8217;ll just need to add an invaliator to the mix.  A test for the core usage looks like this:</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="csharp"><thead><tr><td colspan="2"  class="head">C#</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
</pre></td><td class="de1"><pre class="de1"><span class="br0">&#91;</span>Test<span class="br0">&#93;</span>
<span class="kw1">public</span> <span class="kw4">void</span> Invalidate<span class="br0">&#40;</span><span class="br0">&#41;</span>
<span class="br0">&#123;</span>
&nbsp; &nbsp; <span class="kw1">var</span> cloudfrontClient <span class="sy0">=</span> <span class="kw3">new</span> Mock<span class="sy0">&lt;</span>AmazonCloudFront<span class="sy0">&gt;</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; <span class="kw1">var</span> distributionId <span class="sy0">=</span> Guid<span class="sy0">.</span><span class="me1">NewGuid</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">.</span><span class="me1">ToString</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; <span class="kw1">var</span> bucket <span class="sy0">=</span> Guid<span class="sy0">.</span><span class="me1">NewGuid</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">.</span><span class="me1">ToString</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; <span class="kw1">var</span> distribution <span class="sy0">=</span> bucket <span class="sy0">+</span> <span class="st0">&quot;.s3.amazonaws.com&quot;</span><span class="sy0">;</span>
&nbsp; &nbsp; <span class="kw1">var</span> key <span class="sy0">=</span> Guid<span class="sy0">.</span><span class="me1">NewGuid</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">.</span><span class="me1">ToString</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; <span class="kw1">var</span> listDistributionsResponse <span class="sy0">=</span> <span class="kw3">new</span> ListDistributionsResponse<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; listDistributionsResponse<span class="sy0">.</span><span class="me1">Distribution</span><span class="sy0">.</span><span class="kw1">Add</span><span class="br0">&#40;</span><span class="kw3">new</span> CloudFrontDistribution
&nbsp; &nbsp; <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; Id <span class="sy0">=</span> distributionId,
&nbsp; &nbsp; &nbsp; &nbsp; DistributionConfig <span class="sy0">=</span> <span class="kw3">new</span> CloudFrontDistributionConfig
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; S3Origin <span class="sy0">=</span> <span class="kw3">new</span> S3Origin<span class="br0">&#40;</span>distribution, <span class="kw1">null</span><span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp; &nbsp; <span class="br0">&#125;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; cloudfrontClient<span class="sy0">.</span><span class="me1">Setup</span><span class="br0">&#40;</span>cfc <span class="sy0">=&gt;</span> cfc<span class="sy0">.</span><span class="me1">ListDistributions</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="sy0">.</span><span class="me1">Returns</span><span class="br0">&#40;</span>listDistributionsResponse<span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; <span class="kw1">var</span> invalidator <span class="sy0">=</span> <span class="kw3">new</span> CloudFrontInvalidator<span class="br0">&#40;</span>cloudfrontClient<span class="sy0">.</span><span class="kw4">Object</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; invalidator<span class="sy0">.</span><span class="me1">InvalidateObject</span><span class="br0">&#40;</span>bucket, key<span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; cloudfrontClient<span class="sy0">.</span><span class="me1">Verify</span><span class="br0">&#40;</span>cfc <span class="sy0">=&gt;</span> cfc<span class="sy0">.</span><span class="me1">PostInvalidation</span><span class="br0">&#40;</span>It<span class="sy0">.</span><span class="kw3">Is</span><span class="sy0">&lt;</span>PostInvalidationRequest<span class="sy0">&gt;</span><span class="br0">&#40;</span>pir <span class="sy0">=&gt;</span> pir<span class="sy0">.</span><span class="me1">DistributionId</span> <span class="sy0">==</span> distributionId
&nbsp; &nbsp; &nbsp; &nbsp; <span class="sy0">&amp;&amp;</span> pir<span class="sy0">.</span><span class="me1">InvalidationBatch</span><span class="sy0">.</span><span class="me1">Paths</span><span class="sy0">.</span><span class="me1">Count</span> <span class="sy0">==</span> <span class="nu0">1</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="sy0">&amp;&amp;</span> pir<span class="sy0">.</span><span class="me1">InvalidationBatch</span><span class="sy0">.</span><span class="me1">Paths</span><span class="sy0">.</span><span class="me1">First</span><span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="sy0">==</span> key<span class="br0">&#41;</span><span class="br0">&#41;</span><span class="br0">&#41;</span><span class="sy0">;</span>
<span class="br0">&#125;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">[Test]
public void Invalidate()
{
    var cloudfrontClient = new Mock&lt;AmazonCloudFront&gt;();

    var distributionId = Guid.NewGuid().ToString();
    var bucket = Guid.NewGuid().ToString();
    var distribution = bucket + ".s3.amazonaws.com";
    var key = Guid.NewGuid().ToString();

    var listDistributionsResponse = new ListDistributionsResponse();
    listDistributionsResponse.Distribution.Add(new CloudFrontDistribution
    {
        Id = distributionId,
        DistributionConfig = new CloudFrontDistributionConfig
        {
            S3Origin = new S3Origin(distribution, null)
        }
    });

    cloudfrontClient.Setup(cfc =&gt; cfc.ListDistributions())
        .Returns(listDistributionsResponse);

    var invalidator = new CloudFrontInvalidator(cloudfrontClient.Object);
    invalidator.InvalidateObject(bucket, key);

    cloudfrontClient.Verify(cfc =&gt; cfc.PostInvalidation(It.Is&lt;PostInvalidationRequest&gt;(pir =&gt; pir.DistributionId == distributionId
        &amp;&amp; pir.InvalidationBatch.Paths.Count == 1
        &amp;&amp; pir.InvalidationBatch.Paths.First() == key)));
}</pre></div></div>

<p>The implementation is pretty straightforward, and will look very familiar to anyone who read my post regarding <a href="/index.php/WebDev/ServerProgramming/copying-buckets-with-the-amazon-s3-api">copying buckets with the S3 API</a>.  There are only two changes, first that we only need to invalidate one object at a time, and second that we only want to query for the list of CloudFront distributions once.  Code for the CloudFront invalidator looks like this:</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="csharp"><thead><tr><td colspan="2"  class="head">C#</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
</pre></td><td class="de1"><pre class="de1"><span class="kw4">class</span> CloudFrontInvalidator <span class="sy0">:</span> IDisposable, IInvalidator
<span class="br0">&#123;</span>
&nbsp; &nbsp; <span class="kw1">const</span> <span class="kw4">string</span> amazonBucketUriSuffix <span class="sy0">=</span> <span class="st0">&quot;.s3.amazonaws.com&quot;</span><span class="sy0">;</span>
&nbsp; &nbsp; <span class="kw1">const</span> <span class="kw4">string</span> dateFormatWithMilliseconds <span class="sy0">=</span> <span class="st0">&quot;yyyy-MM-dd hh:mm:ss.ff&quot;</span><span class="sy0">;</span>
&nbsp; &nbsp; <span class="kw1">readonly</span> AmazonCloudFront cloudFrontClient<span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; <span class="kw1">public</span> CloudFrontInvalidator<span class="br0">&#40;</span>AmazonCloudFront cloudFrontClient<span class="br0">&#41;</span>
&nbsp; &nbsp; <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">this</span><span class="sy0">.</span><span class="me1">cloudFrontClient</span> <span class="sy0">=</span> cloudFrontClient<span class="sy0">;</span>
&nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp;
&nbsp; &nbsp; <span class="kw1">public</span> <span class="kw4">void</span> InvalidateObject<span class="br0">&#40;</span><span class="kw4">string</span> bucket, <span class="kw4">string</span> key<span class="br0">&#41;</span>
&nbsp; &nbsp; <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">var</span> distId <span class="sy0">=</span> GetDistributionIdFor<span class="br0">&#40;</span>bucket<span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">if</span><span class="br0">&#40;</span><span class="sy0">!</span><span class="kw4">string</span><span class="sy0">.</span><span class="me1">IsNullOrWhiteSpace</span><span class="br0">&#40;</span>distId<span class="br0">&#41;</span><span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">var</span> invalidationRequest <span class="sy0">=</span> <span class="kw3">new</span> PostInvalidationRequest<span class="br0">&#40;</span><span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="sy0">.</span><span class="me1">WithDistribtionId</span><span class="br0">&#40;</span>distId<span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="sy0">.</span><span class="me1">WithInvalidationBatch</span><span class="br0">&#40;</span><span class="kw3">new</span> InvalidationBatch<span class="br0">&#40;</span>DateTime<span class="sy0">.</span><span class="me1">Now</span><span class="sy0">.</span><span class="me1">ToString</span><span class="br0">&#40;</span>dateFormatWithMilliseconds<span class="br0">&#41;</span>, <span class="kw3">new</span> List<span class="sy0">&lt;</span><span class="kw4">string</span><span class="sy0">&gt;</span> <span class="br0">&#123;</span> key <span class="br0">&#125;</span><span class="br0">&#41;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; cloudFrontClient<span class="sy0">.</span><span class="me1">PostInvalidation</span><span class="br0">&#40;</span>invalidationRequest<span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp;
&nbsp; &nbsp; Dictionary<span class="sy0">&lt;</span><span class="kw4">string</span>, <span class="kw4">string</span><span class="sy0">&gt;</span> distributionNameAndIds<span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; <span class="kw4">string</span> GetDistributionIdFor<span class="br0">&#40;</span><span class="kw4">string</span> bucketName<span class="br0">&#41;</span>
&nbsp; &nbsp; <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; distributionNameAndIds <span class="sy0">=</span> distributionNameAndIds <span class="sy0">??</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; cloudFrontClient<span class="sy0">.</span><span class="me1">ListDistributions</span><span class="br0">&#40;</span><span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="sy0">.</span><span class="me1">Distribution</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="sy0">.</span><span class="me1">ToDictionary</span><span class="br0">&#40;</span>cfd <span class="sy0">=&gt;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; cfd<span class="sy0">.</span><span class="me1">DistributionConfig</span><span class="sy0">.</span><span class="me1">S3Origin</span><span class="sy0">.</span><span class="me1">DNSName</span><span class="sy0">.</span><span class="me1">Replace</span><span class="br0">&#40;</span>amazonBucketUriSuffix, <span class="st0">&quot;&quot;</span><span class="br0">&#41;</span>,
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; cfd <span class="sy0">=&gt;</span> cfd<span class="sy0">.</span><span class="me1">Id</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw4">string</span> id <span class="sy0">=</span> <span class="kw1">null</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; distributionNameAndIds<span class="sy0">.</span><span class="me1">TryGetValue</span><span class="br0">&#40;</span>bucketName, <span class="kw1">out</span> id<span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">return</span> id<span class="sy0">;</span>
&nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp;
&nbsp; &nbsp; <span class="kw1">public</span> <span class="kw4">void</span> Dispose<span class="br0">&#40;</span><span class="br0">&#41;</span>
&nbsp; &nbsp; <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; cloudFrontClient<span class="sy0">.</span><span class="me1">Dispose</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; <span class="br0">&#125;</span>
<span class="br0">&#125;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">class CloudFrontInvalidator : IDisposable, IInvalidator
{
    const string amazonBucketUriSuffix = ".s3.amazonaws.com";
    const string dateFormatWithMilliseconds = "yyyy-MM-dd hh:mm:ss.ff";
    readonly AmazonCloudFront cloudFrontClient;

    public CloudFrontInvalidator(AmazonCloudFront cloudFrontClient)
    {
        this.cloudFrontClient = cloudFrontClient;
    }

    public void InvalidateObject(string bucket, string key)
    {
        var distId = GetDistributionIdFor(bucket);
        if(!string.IsNullOrWhiteSpace(distId))
        {
            var invalidationRequest = new PostInvalidationRequest()
                .WithDistribtionId(distId)
                .WithInvalidationBatch(new InvalidationBatch(DateTime.Now.ToString(dateFormatWithMilliseconds), new List&lt;string&gt; { key }));

            cloudFrontClient.PostInvalidation(invalidationRequest);
        }
    }

    Dictionary&lt;string, string&gt; distributionNameAndIds;

    string GetDistributionIdFor(string bucketName)
    {
        distributionNameAndIds = distributionNameAndIds ??
            cloudFrontClient.ListDistributions()
            .Distribution
            .ToDictionary(cfd =&gt;
                cfd.DistributionConfig.S3Origin.DNSName.Replace(amazonBucketUriSuffix, ""),
                cfd =&gt; cfd.Id);

        string id = null;
        distributionNameAndIds.TryGetValue(bucketName, out id);
        return id;
    }

    public void Dispose()
    {
        cloudFrontClient.Dispose();
    }
}</pre></div></div>

<p>As an interesting aside, while I was working on this Amazon released <a href="http://aws.amazon.com/releasenotes/7875688065681094">support for querystring invalidation/versioning</a>, which is SquishIt&#8217;s default behavior.  I had planned to add a release note telling people that they would need to use squishit&#8217;s &#8220;hash in filename&#8221; option, but it seems like now there won&#8217;t be any need <img src="https://s.w.org/images/core/emoji/2/72x72/1f642.png" alt="🙂" class="wp-smiley" style="height: 1em; max-height: 1em;" /></p>
<h3>Neat, But How Do I Use This?</h3>
<p>It&#8217;s nice that this all works on paper (and in unit tests) but how do we actually tie everything together?  One of the key design decisions was that the renderer is instantiated with pre-initialized CloudFront and S3 clients.  This way users aren&#8217;t locked into a certain method of getting credentials or anything like that.  To use the custom renderer for only a particular bundle usage would be something like this:</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="csharp"><thead><tr><td colspan="2"  class="head">C#</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
</pre></td><td class="de1"><pre class="de1"><span class="kw1">var</span> s3client <span class="sy0">=</span> <span class="kw3">new</span> AmazonS3Client<span class="br0">&#40;</span><span class="st0">&quot;accessKey&quot;</span>, <span class="st0">&quot;secretKey&quot;</span><span class="br0">&#41;</span><span class="sy0">;</span>
<span class="kw1">var</span> renderer <span class="sy0">=</span> S3Renderer<span class="sy0">.</span><span class="me1">Create</span><span class="br0">&#40;</span>s3client<span class="br0">&#41;</span>
&nbsp; &nbsp; <span class="sy0">.</span><span class="me1">WithBucketName</span><span class="br0">&#40;</span><span class="st0">&quot;bucket&quot;</span><span class="br0">&#41;</span>
&nbsp; &nbsp; <span class="sy0">.</span><span class="me1">WithDefaultKeyBuilder</span><span class="br0">&#40;</span>HttpContext<span class="sy0">.</span><span class="me1">Current</span><span class="sy0">.</span><span class="me1">Request</span><span class="sy0">.</span><span class="me1">PhysicalApplicationPath</span>,
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; HttpContext<span class="sy0">.</span><span class="me1">Current</span><span class="sy0">.</span><span class="me1">Request</span><span class="sy0">.</span><span class="me1">ApplicationPath</span><span class="br0">&#41;</span>
&nbsp; &nbsp; <span class="sy0">.</span><span class="me1">WithCannedAcl</span><span class="br0">&#40;</span>S3CannedACL<span class="sy0">.</span><span class="me1">PublicRead</span><span class="br0">&#41;</span> <span class="kw1">as</span> IRenderer<span class="sy0">;</span>
&nbsp;
Bundle<span class="sy0">.</span><span class="me1">JavaScript</span><span class="br0">&#40;</span><span class="br0">&#41;</span>
&nbsp; &nbsp; <span class="sy0">.</span><span class="me1">WithReleaseFileRenderer</span><span class="br0">&#40;</span>renderer<span class="br0">&#41;</span>
&nbsp; &nbsp; <span class="sy0">.</span><span class="me1">WithOutputBaseHref</span><span class="br0">&#40;</span><span class="st0">&quot;http://s3.amazonaws.com/bucket&quot;</span><span class="br0">&#41;</span>
&nbsp; &nbsp; <span class="sy0">.</span><span class="kw1">Add</span><span class="br0">&#40;</span><span class="st0">&quot;file1.js&quot;</span><span class="br0">&#41;</span>
&nbsp; &nbsp; <span class="sy0">.</span><span class="kw1">Add</span><span class="br0">&#40;</span><span class="st0">&quot;file2.js&quot;</span><span class="br0">&#41;</span>
&nbsp; &nbsp; <span class="sy0">.</span><span class="me1">Render</span><span class="br0">&#40;</span><span class="st0">&quot;combined.js&quot;</span><span class="br0">&#41;</span><span class="sy0">;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">var s3client = new AmazonS3Client("accessKey", "secretKey");
var renderer = S3Renderer.Create(s3client)
    .WithBucketName("bucket")
    .WithDefaultKeyBuilder(HttpContext.Current.Request.PhysicalApplicationPath,
                                    HttpContext.Current.Request.ApplicationPath)
    .WithCannedAcl(S3CannedACL.PublicRead) as IRenderer;

Bundle.JavaScript()
    .WithReleaseFileRenderer(renderer)
    .WithOutputBaseHref("http://s3.amazonaws.com/bucket")
    .Add("file1.js")
    .Add("file2.js")
    .Render("combined.js");</pre></div></div>

<p>This is nice, but I think the global configuration is probably what people will be using more often.  As is common in ASP.net apps a lot of the setup magic for this happens in the app initialization.  So you&#8217;d add something like this to your Application_Start method (in Global.asax.cs):</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="csharp"><thead><tr><td colspan="2"  class="head">C#</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
</pre></td><td class="de1"><pre class="de1"><span class="kw1">var</span> s3client <span class="sy0">=</span> <span class="kw3">new</span> AmazonS3Client<span class="br0">&#40;</span><span class="st0">&quot;accessKey&quot;</span>, <span class="st0">&quot;secretKey&quot;</span><span class="br0">&#41;</span><span class="sy0">;</span>
<span class="kw1">var</span> renderer <span class="sy0">=</span> S3Renderer<span class="sy0">.</span><span class="me1">Create</span><span class="br0">&#40;</span>s3client<span class="br0">&#41;</span>
&nbsp; &nbsp; <span class="sy0">.</span><span class="me1">WithBucketName</span><span class="br0">&#40;</span><span class="st0">&quot;bucket&quot;</span><span class="br0">&#41;</span>
&nbsp; &nbsp; <span class="sy0">.</span><span class="me1">WithDefaultKeyBuilder</span><span class="br0">&#40;</span>HttpContext<span class="sy0">.</span><span class="me1">Current</span><span class="sy0">.</span><span class="me1">Request</span><span class="sy0">.</span><span class="me1">PhysicalApplicationPath</span>,
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; HttpContext<span class="sy0">.</span><span class="me1">Current</span><span class="sy0">.</span><span class="me1">Request</span><span class="sy0">.</span><span class="me1">ApplicationPath</span><span class="br0">&#41;</span>
&nbsp; &nbsp; <span class="sy0">.</span><span class="me1">WithCannedAcl</span><span class="br0">&#40;</span>S3CannedACL<span class="sy0">.</span><span class="me1">PublicRead</span><span class="br0">&#41;</span> <span class="kw1">as</span> IRenderer<span class="sy0">;</span>
&nbsp;
Bundle<span class="sy0">.</span><span class="me1">ConfigureDefaults</span><span class="br0">&#40;</span><span class="br0">&#41;</span>
&nbsp; &nbsp; <span class="sy0">.</span><span class="me1">UseReleaseRenderer</span><span class="br0">&#40;</span>renderer<span class="br0">&#41;</span>
&nbsp; &nbsp; <span class="sy0">.</span><span class="me1">UseDefaultOutputBaseHref</span><span class="br0">&#40;</span><span class="st0">&quot;http://s3.amazonaws.com/bucket&quot;</span><span class="br0">&#41;</span><span class="sy0">;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">var s3client = new AmazonS3Client("accessKey", "secretKey");
var renderer = S3Renderer.Create(s3client)
    .WithBucketName("bucket")
    .WithDefaultKeyBuilder(HttpContext.Current.Request.PhysicalApplicationPath,
                                    HttpContext.Current.Request.ApplicationPath)
    .WithCannedAcl(S3CannedACL.PublicRead) as IRenderer;

Bundle.ConfigureDefaults()
    .UseReleaseRenderer(renderer)
    .UseDefaultOutputBaseHref("http://s3.amazonaws.com/bucket");</pre></div></div>

<p>I tried to make this something that could be run via WebActivator, but had trouble finding a method to use that would have access to the HttpContext (needed to resolve application path and virtual directory) so for now it needs to be set up manually.  This may be for the best though, as it doesn&#8217;t force any particular convention for access key / secret key retrieval.  It doesn&#8217;t <strong>feel</strong> like a ton of setup code to me, hopefully others will agree.</p>
<h3>What&#8217;s Next</h3>
<p>Now that SquishIt 0.8.7 has been released I can finally start planning to make this available <a href="http://nuget.org/packages/SquishIt.S3">on NuGet</a> as a standard package (currently in beta until I get a little more testing).  It can be installed like any other, but will require updating SquishIt if you&#8217;re using a pre-0.8.7 version.  If you need to report any issues encountered while using the library, or feel like contributing some code, please do so <a href="https://github.com/AlexCuse/SquishIt.S3">on github</a>.  Oh, and if you just want to kick the tires on SquishIt without all this other nonsense, or try making it work with another CDN you can find the core library <a href="http://nuget.org/packages/SquishIt">on NuGet</a> as well.</p>
]]></content:encoded>
			<wfw:commentRss>/index.php/webdev/serverprogramming/making-squishit-work-with-amazon/feed/</wfw:commentRss>
		<slash:comments>6</slash:comments>
		</item>
		<item>
		<title>Getting Flexible With NDepend 4 and CQLinq</title>
		<link>/index.php/architect/designingsoftware/getting-flexible-with-ndepend-4-and-cqlinq/</link>
		<comments>/index.php/architect/designingsoftware/getting-flexible-with-ndepend-4-and-cqlinq/#comments</comments>
		<pubDate>Mon, 04 Jun 2012 10:45:00 +0000</pubDate>
		<dc:creator><![CDATA[Alex Ullrich]]></dc:creator>
				<category><![CDATA[Designing Software]]></category>

		<guid isPermaLink="false">/index.php/2012/06/getting-flexible-with-ndepend-4-and-cqlinq/</guid>
		<description><![CDATA[At my last job we had a non-functional attribute that another team used to decorate service methods that they consumed.  The other team was working on an alternative client to our WCF services, and they weren't on the same release schedule they needed t&#8230;]]></description>
				<content:encoded><![CDATA[<p>At my last job we had a non-functional attribute that another team used to decorate service methods that they consumed.  The other team was working on an alternative client to our WCF services, and they weren&#8217;t on the same release schedule they needed to be able to target multiple versions of our services within a single version of their application.  Because of this requirement, they maintained a wrapper around our services that handled some of the differences   between versions.  The main use for this attribute was to foster communication between the teams, so that if we changed a decorated method we would let them know.  As I&#8217;m sure anyone on this other team would tell you, we weren&#8217;t always that good about communicating these changes.</p>
<p>In an effort to make communication between teams easier we used a CQL query like this to report changes to these methods as part of our automated builds:</p>
<pre>SELECT METHODS FROM NAMESPACES "Services"
WHERE HasAttribute "OPTIONAL:Services.KnownExternalClientsAttribute"
AND CodeWasChanged</pre>
<p>This was nice, but it only got us part of the way there.  This would alert us to signature changes or changes to the content of the method, but not necessarily changes to the message contracts passed in to the method.  In Pseudo-CQL the query I had in mind looks something like this:</p>
<pre>SELECT TYPES FROM NAMESPACES "Services"
WHERE CodeWasChanged
AND IsUsedBy (
    SELECT METHODS FROM NAMESPACES "Services"
    WHERE HasAttribute "OPTIONAL:Services.KnownExternalClientsAttribute"
)</pre>
<p>This didn&#8217;t work however (CQL doesn&#8217;t really have support for subqueries), and I couldn&#8217;t really find anything in the language that would allow us to achieve what we wanted.  NDepend 4 introduces a new linq-based replacement called CQLinq that offers a lot more flexibility, so I figured I would see if I could write the query that we needed using it.  It ended up being much easier than I thought &#8211; CQLinq gives us access to most (if not all) of the standard LINQ operators, and the same functions for querying code using attributes and history that we had with CQL.  This is the query I came up with:</p>
<pre>// &lt;Name&gt;Test Query for Contract Changes&lt;/Name&gt;
warnif count &gt; 0

let decoratedMethods = from m in JustMyCode.Methods
    where m.HasAttribute("NDependSample.TestAttribute")
        &amp;&amp; m.ParentNamespace.Name == "NDependSample.Services"
    select m

from t in JustMyCode.Types
where  t.ParentNamespace.Name == "NDependSample.Contracts"
  &amp;&amp; t.CodeWasChanged()
  &amp;&amp; decoratedMethods.Using(t).Any()
select t</pre>
<p>Once we have the query we can mark it as critical, so we will have a failing build after the changes are made.  Only the first build after making the changes should fail, but that would be enough to trigger an investigation that would result in communicating the changes to the other team.</p>
<p>CQL has always been my favorite feature of NDepend, so its no surprise that CQLinq is my favorite feature in this new release.  The LINQ based syntax feels much more natural to me when writing queries against a codebase than the SQL-like syntax of CQL, and still gives us all the same visualization goodies to foster quick understanding of the query results.  I&#8217;m really excited to dig in a little more and see what else I can do with it.</p>
]]></content:encoded>
			<wfw:commentRss>/index.php/architect/designingsoftware/getting-flexible-with-ndepend-4-and-cqlinq/feed/</wfw:commentRss>
		<slash:comments>2</slash:comments>
		</item>
		<item>
		<title>Copying Buckets With The Amazon S3 API</title>
		<link>/index.php/webdev/serverprogramming/copying-buckets-with-the-amazon-s3-api/</link>
		<comments>/index.php/webdev/serverprogramming/copying-buckets-with-the-amazon-s3-api/#comments</comments>
		<pubDate>Tue, 29 May 2012 14:43:00 +0000</pubDate>
		<dc:creator><![CDATA[Alex Ullrich]]></dc:creator>
				<category><![CDATA[ASP.NET]]></category>
		<category><![CDATA[Server Programming]]></category>
		<category><![CDATA[amazon]]></category>
		<category><![CDATA[c#]]></category>
		<category><![CDATA[linq]]></category>
		<category><![CDATA[rest]]></category>
		<category><![CDATA[s3]]></category>

		<guid isPermaLink="false">/index.php/2012/05/copying-buckets-with-the-amazon-s3-api/</guid>
		<description><![CDATA[One of the projects I have been working on is a system for managing content on our network of websites.  One of our requirements is that changes don't take effect immediately, but on a separate preview network where our customer can look to see that her&#8230;]]></description>
				<content:encoded><![CDATA[<p>One of the projects I have been working on is a system for managing content on our network of websites.  One of our requirements is that changes don&#8217;t take effect immediately, but on a separate preview network where our customer can look to see that her changes show the way she expected before pushing them into the production environment.  Because of this requirement, we need to maintain 2 separate sets of product images (hosted on Amazon S3, with their CloudFront CDN used for the production sites).</p>
<p>Allowing our content management system to save image changes to Amazon and render their locations in our app was trivial, but we found the push mechanism for moving changes into the live environment a bit challenging.  The work for moving database changes was already done when I started on the project, so most of the challenges I saw were in relation to copying the images.  What we really wanted was a true bucket copy (emptying the destination bucket altogether and replacing its content with that of the source bucket) &#8211; but the <a href="http://docs.amazonwebservices.com/AmazonS3/latest/API/RESTBucketOps.html">REST API for S3</a> does not support copy at the bucket level currently.</p>
<p>When designing our solution we needed to optimize not only on performance and maintainability, but on cost.  The <a href="http://aws.amazon.com/s3/pricing/">pricing model for S3</a> has charges associated with most request types so it&#8217;s not efficient to simply copy all the items in the source bucket to the destination.  In addition, this wouldn&#8217;t handle deleting objects that have been removed in the source bucket.  So the naive solution becomes a two step process of deleting all of a bucket&#8217;s content, then copying over all the content from the other bucket.  In a scenario where the actual degree of change is likely to be minimal incurring this kind of cost is not a great option (and it&#8217;s likely to perform poorly as well).  When you add the challenge of CDN cache invalidation and <a href="http://aws.amazon.com/cloudfront/pricing/">pricing for CloudFront</a> to the equation this looks even less attractive.</p>
<p>This post will go over the implementation we came up with for bucket copying.  Code is written in C# using the <a href="http://aws.amazon.com/sdkfornet/">AWS SDK for .net</a>, but it is all possible using the REST API directly.  I will add that the AWS SDK is a very nice tool &#8211; typically I would choose to use <a href="https://github.com/restsharp/restsharp">RestSharp</a> to go directly at the REST API, but Amazon has taken a lot of time to build a nice fluent syntax for building requests and some helper functions that make life easy enough to make it worth a look &#8211; it is far nicer than some of the other client libraries out there, in large part because it doesn&#8217;t try to hide the fact that you&#8217;re working with a set of webservices.  But I digress.  The process for copying a bucket is pretty straightforward:</p>
<ol>
<li>Check for destination bucket existence, create if needed</li>
<li>List Objects in Both Buckets</li>
<li>Identify keys for Insert, Update and Deletion (COPYs and DELETEs)</li>
<li>Perform COPY / DELETE</li>
<li>Invalidations (Updates only)</li>
</ol>
<p>So here we go.</p>
</p>
<h3>Check for Bucket Existence</h3>
<p>Checking for bucket existence is a piece of cake, thanks to a static helper function in the .net SDK that takes a bucket name and an s3 client.  I chose to hide this call behind an instance method so that I could mock it during unit tests, but this is not strictly necessary.  I think that behind the scenes this method simply issues a HEAD request on a bucket and returns false if a 404 is encountered.  As you&#8217;d expect creating the bucket is done via a PUT request on the bucket resource.  Code is as follows:</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="csharp"><thead><tr><td colspan="2"  class="head">C#</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
</pre></td><td class="de1"><pre class="de1"><span class="kw4">void</span> CreateDestinationBucketIfNeeded<span class="br0">&#40;</span><span class="kw4">string</span> bucketName<span class="br0">&#41;</span>
<span class="br0">&#123;</span>
&nbsp; &nbsp; <span class="kw1">if</span><span class="br0">&#40;</span><span class="sy0">!</span>BucketExists<span class="br0">&#40;</span>bucketName<span class="br0">&#41;</span><span class="br0">&#41;</span>
&nbsp; &nbsp; <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">var</span> request <span class="sy0">=</span> <span class="kw3">new</span> PutBucketRequest<span class="br0">&#40;</span><span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="sy0">.</span><span class="me1">WithBucketName</span><span class="br0">&#40;</span>bucketName<span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; _s3Client<span class="sy0">.</span><span class="me1">PutBucket</span><span class="br0">&#40;</span>request<span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; <span class="br0">&#125;</span>
<span class="br0">&#125;</span>
&nbsp;
<span class="kw1">public</span> <span class="kw1">virtual</span> <span class="kw4">bool</span> BucketExists<span class="br0">&#40;</span><span class="kw4">string</span> bucketName<span class="br0">&#41;</span>
<span class="br0">&#123;</span>
&nbsp; &nbsp; <span class="kw1">return</span> Amazon<span class="sy0">.</span><span class="me1">S3</span><span class="sy0">.</span><span class="me1">Util</span><span class="sy0">.</span><span class="me1">AmazonS3Util</span><span class="sy0">.</span><span class="me1">DoesS3BucketExist</span><span class="br0">&#40;</span>bucketName, _s3Client<span class="br0">&#41;</span><span class="sy0">;</span>
<span class="br0">&#125;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">void CreateDestinationBucketIfNeeded(string bucketName)
{
    if(!BucketExists(bucketName))
    {
        var request = new PutBucketRequest()
            .WithBucketName(bucketName);

        _s3Client.PutBucket(request);
    }
}

public virtual bool BucketExists(string bucketName)
{
    return Amazon.S3.Util.AmazonS3Util.DoesS3BucketExist(bucketName, _s3Client);
}</pre></div></div>

<h3>List Objects in a Bucket</h3>
<p>Listing objects in an S3 bucket is very easy.  You just need to issue a signed GET request to myBucket.s3.amazonaws.com.  The only gotcha is it only returns up to 1000 objects in a single response, so getting a complete list can take multiple requests.  It helps to know a few things when putting this together &#8211; first that objects are listed in alphabetical order, second that we can include a &#8220;marker&#8221; parameter in our request telling AWS what key to start with, and third that the response from this method includes an &#8220;IsTruncated&#8221; flag.  The C# code to list objects looks like this:</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="csharp"><thead><tr><td colspan="2"  class="head">C#</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
</pre></td><td class="de1"><pre class="de1">IEnumerable<span class="sy0">&lt;</span>S3Object<span class="sy0">&gt;</span> ObjectsFor<span class="br0">&#40;</span><span class="kw4">string</span> bucketName<span class="br0">&#41;</span>
<span class="br0">&#123;</span>
&nbsp; &nbsp; <span class="kw1">var</span> result <span class="sy0">=</span> <span class="kw3">new</span> List<span class="sy0">&lt;</span>S3Object<span class="sy0">&gt;</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; <span class="kw1">var</span> response <span class="sy0">=</span> <span class="kw3">new</span> ListObjectsResponse<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; <span class="kw1">do</span>
&nbsp; &nbsp; <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">var</span> request <span class="sy0">=</span> <span class="kw3">new</span> ListObjectsRequest<span class="br0">&#40;</span><span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="sy0">.</span><span class="me1">WithBucketName</span><span class="br0">&#40;</span>bucketName<span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">if</span><span class="br0">&#40;</span>response<span class="sy0">.</span><span class="me1">IsTruncated</span><span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; request<span class="sy0">.</span><span class="me1">Marker</span> <span class="sy0">=</span> response<span class="sy0">.</span><span class="me1">NextMarker</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; response <span class="sy0">=</span> _s3Client<span class="sy0">.</span><span class="me1">ListObjects</span><span class="br0">&#40;</span>request<span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; result<span class="sy0">.</span><span class="me1">AddRange</span><span class="br0">&#40;</span>response<span class="sy0">.</span><span class="me1">S3Objects</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; <span class="br0">&#125;</span> <span class="kw1">while</span><span class="br0">&#40;</span>response<span class="sy0">.</span><span class="me1">IsTruncated</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; 
&nbsp; &nbsp; response<span class="sy0">.</span><span class="me1">Dispose</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; <span class="kw1">return</span> result<span class="sy0">;</span>
<span class="br0">&#125;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">IEnumerable&lt;S3Object&gt; ObjectsFor(string bucketName)
{
    var result = new List&lt;S3Object&gt;();

    var response = new ListObjectsResponse();
    do
    {
        var request = new ListObjectsRequest()
            .WithBucketName(bucketName);

        if(response.IsTruncated)
        {
            request.Marker = response.NextMarker;
        }

        response = _s3Client.ListObjects(request);
        result.AddRange(response.S3Objects);

    } while(response.IsTruncated);
    
    response.Dispose();

    return result;
}</pre></div></div>

<h3>
<p>Identify Inserts, Updates and Deletes</p>
</h3>
<p>Once we have the contents of both buckets, we need to determine which objects need to be inserted to, updated in, and deleted from the destination bucket.  For deleted objects we will be issuing DELETE requests, and for Inserts and Updates we will be copying objects across using a special PUT request.  The DELETE requests can be batched, supporting up to 1000 deletions in a single request, while the PUT requests need to be issued on an object by object basis.</p>
<p>These subsets of can be identified by comparing the objects in source and destination bucket.  Deletes will include all objects in the destination that aren&#8217;t in the source.  Updates will include all objects present in both buckets that have changed (this can be determined by comparing the ETags on the objects).  Inserts will of course contain all objects that exist in the source but not the destination.</p>
<p>C# helps us out a bit here, as LINQ makes it easy to do these comparisons without having to do any nasty looping.  For the inserts and deletes we need to spoof an outer join which LINQ doesn&#8217;t really have a great API for, but I still find it helpful to be able to think about these operations in set-based terms instead of in terms of the tedious iterative comparison that actually gets done behind all the LINQ magic.</p>
<p>Code to identify these sets of objects can be found here:</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="csharp"><thead><tr><td colspan="2"  class="head">C#</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
</pre></td><td class="de1"><pre class="de1">IEnumerable<span class="sy0">&lt;</span>S3Object<span class="sy0">&gt;</span> ObjectsToUpdate<span class="br0">&#40;</span>IEnumerable<span class="sy0">&lt;</span>S3Object<span class="sy0">&gt;</span> sourceObjects, IEnumerable<span class="sy0">&lt;</span>S3Object<span class="sy0">&gt;</span> destinationObjects<span class="br0">&#41;</span>
<span class="br0">&#123;</span>
&nbsp; &nbsp; <span class="kw1">return</span> <span class="kw1">from</span> src <span class="kw1">in</span> sourceObjects
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span class="kw1">join</span> dest <span class="kw1">in</span> destinationObjects
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;on src<span class="sy0">.</span><span class="me1">Key</span> equals dest<span class="sy0">.</span><span class="me1">Key</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span class="kw1">where</span> src<span class="sy0">.</span><span class="me1">Size</span> <span class="sy0">&gt;</span> <span class="nu0">0</span> <span class="sy0">&amp;&amp;</span> src<span class="sy0">.</span><span class="me1">ETag</span> <span class="sy0">!=</span> dest<span class="sy0">.</span><span class="me1">ETag</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span class="kw1">select</span> src<span class="sy0">;</span>
<span class="br0">&#125;</span>
&nbsp;
IEnumerable<span class="sy0">&lt;</span>S3Object<span class="sy0">&gt;</span> ObjectsToInsert<span class="br0">&#40;</span>IEnumerable<span class="sy0">&lt;</span>S3Object<span class="sy0">&gt;</span> sourceObjects, IEnumerable<span class="sy0">&lt;</span>S3Object<span class="sy0">&gt;</span> destinationObjects<span class="br0">&#41;</span>
<span class="br0">&#123;</span>
&nbsp; &nbsp; <span class="kw1">return</span> <span class="kw1">from</span> src <span class="kw1">in</span> sourceObjects
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span class="kw1">join</span> dest <span class="kw1">in</span> destinationObjects
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;on src<span class="sy0">.</span><span class="me1">Key</span> equals dest<span class="sy0">.</span><span class="me1">Key</span> <span class="kw1">into</span> joinedObjects
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span class="kw1">from</span> coalescedDest <span class="kw1">in</span> joinedObjects<span class="sy0">.</span><span class="me1">DefaultIfEmpty</span><span class="br0">&#40;</span><span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span class="kw1">where</span> src<span class="sy0">.</span><span class="me1">Size</span> <span class="sy0">&gt;</span> <span class="nu0">0</span> <span class="sy0">&amp;&amp;</span> coalescedDest <span class="sy0">==</span> <span class="kw1">null</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span class="kw1">select</span> src<span class="sy0">;</span>
<span class="br0">&#125;</span>
&nbsp;
IEnumerable<span class="sy0">&lt;</span>S3Object<span class="sy0">&gt;</span> ObjectsToDelete<span class="br0">&#40;</span>IEnumerable<span class="sy0">&lt;</span>S3Object<span class="sy0">&gt;</span> sourceObjects, IEnumerable<span class="sy0">&lt;</span>S3Object<span class="sy0">&gt;</span> destinationObjects<span class="br0">&#41;</span>
<span class="br0">&#123;</span>
&nbsp; &nbsp; <span class="kw1">return</span> <span class="kw1">from</span> dest <span class="kw1">in</span> destinationObjects
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span class="kw1">join</span> src <span class="kw1">in</span> sourceObjects
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;on dest<span class="sy0">.</span><span class="me1">Key</span> equals src<span class="sy0">.</span><span class="me1">Key</span> <span class="kw1">into</span> joinedObjects
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span class="kw1">from</span> coalescedSrc <span class="kw1">in</span> joinedObjects<span class="sy0">.</span><span class="me1">DefaultIfEmpty</span><span class="br0">&#40;</span><span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span class="kw1">where</span> dest<span class="sy0">.</span><span class="me1">Size</span> <span class="sy0">&gt;</span> <span class="nu0">0</span> <span class="sy0">&amp;&amp;</span> coalescedSrc <span class="sy0">==</span> <span class="kw1">null</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span class="kw1">select</span> dest<span class="sy0">;</span>
<span class="br0">&#125;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">IEnumerable&lt;S3Object&gt; ObjectsToUpdate(IEnumerable&lt;S3Object&gt; sourceObjects, IEnumerable&lt;S3Object&gt; destinationObjects)
{
    return from src in sourceObjects
           join dest in destinationObjects
               on src.Key equals dest.Key
           where src.Size &gt; 0 &amp;&amp; src.ETag != dest.ETag
           select src;
}

IEnumerable&lt;S3Object&gt; ObjectsToInsert(IEnumerable&lt;S3Object&gt; sourceObjects, IEnumerable&lt;S3Object&gt; destinationObjects)
{
    return from src in sourceObjects
           join dest in destinationObjects
               on src.Key equals dest.Key into joinedObjects
           from coalescedDest in joinedObjects.DefaultIfEmpty()
           where src.Size &gt; 0 &amp;&amp; coalescedDest == null
           select src;
}

IEnumerable&lt;S3Object&gt; ObjectsToDelete(IEnumerable&lt;S3Object&gt; sourceObjects, IEnumerable&lt;S3Object&gt; destinationObjects)
{
    return from dest in destinationObjects
           join src in sourceObjects
               on dest.Key equals src.Key into joinedObjects
           from coalescedSrc in joinedObjects.DefaultIfEmpty()
           where dest.Size &gt; 0 &amp;&amp; coalescedSrc == null
           select dest;
}</pre></div></div>

<h3>Perform Insert/Delete</h3>
<p>Inserts and deletes are the easy part.  We just need to process the list of objects and issue the appropriate requests.  There are two important optimizations here &#8211; we can batch deletes, and we can parallelize copies.  Batching deletes will help to minimize network chatter, and parallelizing copies will help to force as much network chatter as possible into a shorter amount of time <img src="https://s.w.org/images/core/emoji/2/72x72/1f642.png" alt="🙂" class="wp-smiley" style="height: 1em; max-height: 1em;" />  I was torn on whether or not to paralellize the copies, but decided that in essence we are performing a ton of blocking I/O requests <em><strong>with another computer doing all the work</strong></em>.  If you have real concerns about flooding your network connection you may not want to make this optimization, or do it in a way that allows you to dial down the amount of concurrency but after testing with the calls made in parallel I found a copy of a bucket with ~500 objects finished in about 25% of the time on my dual core laptop, and I was sold.</p>
<p>The inserts are the easiest part:</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="csharp"><thead><tr><td colspan="2"  class="head">C#</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
</pre></td><td class="de1"><pre class="de1"><span class="kw4">void</span> CopyObjects<span class="br0">&#40;</span>IEnumerable<span class="sy0">&lt;</span>S3Object<span class="sy0">&gt;</span> items, Func<span class="sy0">&lt;</span>S3Object, CopyObjectRequest<span class="sy0">&gt;</span> requestBuilder<span class="br0">&#41;</span>
<span class="br0">&#123;</span>
&nbsp; &nbsp; <span class="kw1">var</span> exceptions <span class="sy0">=</span> <span class="kw3">new</span> ConcurrentQueue<span class="sy0">&lt;</span>Exception<span class="sy0">&gt;</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; Parallel<span class="sy0">.</span><span class="kw1">ForEach</span><span class="br0">&#40;</span>items, obj <span class="sy0">=&gt;</span>
&nbsp; &nbsp; <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">try</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">var</span> captured <span class="sy0">=</span> obj<span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">var</span> request <span class="sy0">=</span> requestBuilder<span class="br0">&#40;</span>obj<span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; _s3Client<span class="sy0">.</span><span class="me1">CopyObject</span><span class="br0">&#40;</span>request<span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">catch</span><span class="br0">&#40;</span>Exception ex<span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; exceptions<span class="sy0">.</span><span class="me1">Enqueue</span><span class="br0">&#40;</span>ex<span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp; &nbsp; <span class="br0">&#125;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; <span class="kw1">if</span><span class="br0">&#40;</span>exceptions<span class="sy0">.</span><span class="me1">Count</span> <span class="sy0">&gt;</span> <span class="nu0">0</span><span class="br0">&#41;</span> <span class="kw1">throw</span> <span class="kw3">new</span> AggregateException<span class="br0">&#40;</span>exceptions<span class="br0">&#41;</span><span class="sy0">;</span>
<span class="br0">&#125;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">void CopyObjects(IEnumerable&lt;S3Object&gt; items, Func&lt;S3Object, CopyObjectRequest&gt; requestBuilder)
{
    var exceptions = new ConcurrentQueue&lt;Exception&gt;();
    Parallel.ForEach(items, obj =&gt;
    {
        try
        {
            var captured = obj;
            var request = requestBuilder(obj);
            _s3Client.CopyObject(request);
        }
        catch(Exception ex)
        {
            exceptions.Enqueue(ex);
        }
    });

    if(exceptions.Count &gt; 0) throw new AggregateException(exceptions);
}</pre></div></div>

<p>Deletes were pretty simple as well, only difference being the batching of requests:</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="csharp"><thead><tr><td colspan="2"  class="head">C#</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
</pre></td><td class="de1"><pre class="de1"><span class="kw1">var</span> toDelete <span class="sy0">=</span> ObjectsToDelete<span class="br0">&#40;</span>sourceObjects, destinationObjects<span class="br0">&#41;</span><span class="sy0">.</span><span class="me1">ToList</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
<span class="kw1">while</span><span class="br0">&#40;</span>toDelete<span class="sy0">.</span><span class="me1">Count</span> <span class="sy0">&gt;</span> <span class="nu0">0</span><span class="br0">&#41;</span>
<span class="br0">&#123;</span>
&nbsp; &nbsp; <span class="kw1">var</span> batch <span class="sy0">=</span> toDelete<span class="sy0">.</span><span class="me1">Take</span><span class="br0">&#40;</span><span class="nu0">1000</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; <span class="kw1">var</span> request <span class="sy0">=</span> <span class="kw3">new</span> DeleteObjectsRequest<span class="br0">&#40;</span><span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="sy0">.</span><span class="me1">WithBucketName</span><span class="br0">&#40;</span>destinationBucket<span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="sy0">.</span><span class="me1">WithKeys</span><span class="br0">&#40;</span>batch<span class="sy0">.</span><span class="kw1">Select</span><span class="br0">&#40;</span>k <span class="sy0">=&gt;</span> <span class="kw3">new</span> KeyVersion<span class="br0">&#40;</span>k<span class="sy0">.</span><span class="me1">Key</span><span class="br0">&#41;</span><span class="br0">&#41;</span><span class="sy0">.</span><span class="me1">ToArray</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; _s3Client<span class="sy0">.</span><span class="me1">DeleteObjects</span><span class="br0">&#40;</span>request<span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; toDelete<span class="sy0">.</span><span class="me1">RemoveRange</span><span class="br0">&#40;</span><span class="nu0">0</span>, toDelete<span class="sy0">.</span><span class="me1">Count</span> <span class="sy0">&gt;</span> <span class="nu0">1000</span> <span class="sy0">?</span> <span class="nu0">1000</span> <span class="sy0">:</span> toDelete<span class="sy0">.</span><span class="me1">Count</span><span class="br0">&#41;</span><span class="sy0">;</span>
<span class="br0">&#125;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">var toDelete = ObjectsToDelete(sourceObjects, destinationObjects).ToList();

while(toDelete.Count &gt; 0)
{
    var batch = toDelete.Take(1000);
    var request = new DeleteObjectsRequest()
                        .WithBucketName(destinationBucket)
                        .WithKeys(batch.Select(k =&gt; new KeyVersion(k.Key)).ToArray());

    _s3Client.DeleteObjects(request);

    toDelete.RemoveRange(0, toDelete.Count &gt; 1000 ? 1000 : toDelete.Count);
}</pre></div></div>

<h3>Perform Updates</h3>
<p>This step is not really anything special but it is different enough for me to exclude it from it&#8217;s counterparts in step 3.  We are basically doing the same copy operation for each object that we did for the inserts, but we also need to worry about cache invalidation on the CloudFront CDN.  The invalidation can be batched, so it makes sense to build the list of keys updated while we do the copy, then send a single invalidation request.</p>
<p>So we can change the code for copy to something like this, taking an optional parameter containing a function to add the object&#8217;s key to a list of keys to be invalidated:</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="csharp"><thead><tr><td colspan="2"  class="head">C#</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
</pre></td><td class="de1"><pre class="de1"><span class="kw4">void</span> CopyObjects<span class="br0">&#40;</span>IEnumerable<span class="sy0">&lt;</span>S3Object<span class="sy0">&gt;</span> items, Func<span class="sy0">&lt;</span>S3Object, CopyObjectRequest<span class="sy0">&gt;</span> requestBuilder, Action<span class="sy0">&lt;</span><span class="kw4">string</span><span class="sy0">&gt;</span> addToInvalidationList <span class="sy0">=</span> <span class="kw1">null</span><span class="br0">&#41;</span>
<span class="br0">&#123;</span>
&nbsp; &nbsp; <span class="kw1">var</span> exceptions <span class="sy0">=</span> <span class="kw3">new</span> ConcurrentQueue<span class="sy0">&lt;</span>Exception<span class="sy0">&gt;</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; Parallel<span class="sy0">.</span><span class="kw1">ForEach</span><span class="br0">&#40;</span>items, obj <span class="sy0">=&gt;</span>
&nbsp; &nbsp; <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">try</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">var</span> captured <span class="sy0">=</span> obj<span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">var</span> request <span class="sy0">=</span> requestBuilder<span class="br0">&#40;</span>obj<span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; _s3Client<span class="sy0">.</span><span class="me1">CopyObject</span><span class="br0">&#40;</span>request<span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">if</span><span class="br0">&#40;</span>addToInvalidationList <span class="sy0">!=</span> <span class="kw1">null</span><span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; addToInvalidationList<span class="br0">&#40;</span>captured<span class="sy0">.</span><span class="me1">Key</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">catch</span><span class="br0">&#40;</span>Exception ex<span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; exceptions<span class="sy0">.</span><span class="me1">Enqueue</span><span class="br0">&#40;</span>ex<span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp; &nbsp; <span class="br0">&#125;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; <span class="kw1">if</span><span class="br0">&#40;</span>exceptions<span class="sy0">.</span><span class="me1">Count</span> <span class="sy0">&gt;</span> <span class="nu0">0</span><span class="br0">&#41;</span> <span class="kw1">throw</span> <span class="kw3">new</span> AggregateException<span class="br0">&#40;</span>exceptions<span class="br0">&#41;</span><span class="sy0">;</span>
<span class="br0">&#125;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">void CopyObjects(IEnumerable&lt;S3Object&gt; items, Func&lt;S3Object, CopyObjectRequest&gt; requestBuilder, Action&lt;string&gt; addToInvalidationList = null)
{
    var exceptions = new ConcurrentQueue&lt;Exception&gt;();
    Parallel.ForEach(items, obj =&gt;
    {
        try
        {
            var captured = obj;
            var request = requestBuilder(obj);
            _s3Client.CopyObject(request);
            if(addToInvalidationList != null)
                addToInvalidationList(captured.Key);
        }
        catch(Exception ex)
        {
            exceptions.Enqueue(ex);
        }
    });

    if(exceptions.Count &gt; 0) throw new AggregateException(exceptions);
}</pre></div></div>

<p>I&#8217;ll concede that this is not the simplest possible thing &#8211; it would probably be easier to call the old copy code and then pass the keys from the updated objects collection, but I do like that it captures the keys of the objects that are actually copied.  If we changed the approach to do something like what is happening with the delete operation that trims the collection while processing, the keys collection we pass for invalidation would end up empty.  I could also just have too much functional programming on the brain I guess <img src="https://s.w.org/images/core/emoji/2/72x72/1f609.png" alt="😉" class="wp-smiley" style="height: 1em; max-height: 1em;" /></p>
<p>Once we have the list of keys, performing the actual invalidation is relatively simple.  We do need to generate a unique &#8220;caller reference&#8221; that amazon uses to ensure that duplicate requests aren&#8217;t processed (remember, each object invalidated triggers some kind of action on potentially hundreds of servers, so this is not a cheap operation for you OR for Amazon).  The hardest part is probably identifying whether there is a CloudFront distribution to worry about in the first place.  The key to finding whether there is a distribution attached to a bucket or not relies on the knowledge that for an s3 origin, the DNSName property will be &#8220;bucketname.s3.amazonaws.com&#8221; &#8211; so by stripping out &#8220;.s3.amazonaws.com&#8221; from our available distributions&#8217; DNS names we can find if one matches our bucket.</p>
<p>The code for invalidation looks like this:</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="csharp"><thead><tr><td colspan="2"  class="head">C#</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
</pre></td><td class="de1"><pre class="de1"><span class="kw1">const</span> <span class="kw4">string</span> dateFormatWithMilliseconds <span class="sy0">=</span> <span class="st0">&quot;yyyy-MM-dd hh:mm:ss.ff&quot;</span><span class="sy0">;</span>
&nbsp;
<span class="kw4">void</span> InvalidateObjects<span class="br0">&#40;</span><span class="kw4">string</span> destinationBucket, List<span class="sy0">&lt;</span><span class="kw4">string</span><span class="sy0">&gt;</span> keysToInvalidate<span class="br0">&#41;</span>
<span class="br0">&#123;</span>
&nbsp; &nbsp; <span class="kw1">if</span><span class="br0">&#40;</span>keysToInvalidate<span class="sy0">.</span><span class="me1">Count</span> <span class="sy0">&gt;</span> <span class="nu0">0</span><span class="br0">&#41;</span>
&nbsp; &nbsp; <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">var</span> distId <span class="sy0">=</span> GetDistributionIdFor<span class="br0">&#40;</span>destinationBucket<span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">if</span><span class="br0">&#40;</span><span class="sy0">!</span><span class="kw4">string</span><span class="sy0">.</span><span class="me1">IsNullOrWhiteSpace</span><span class="br0">&#40;</span>distId<span class="br0">&#41;</span><span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">var</span> invalidationRequest <span class="sy0">=</span> <span class="kw3">new</span> PostInvalidationRequest<span class="br0">&#40;</span><span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="sy0">.</span><span class="me1">WithDistribtionId</span><span class="br0">&#40;</span>distId<span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="sy0">.</span><span class="me1">WithInvalidationBatch</span><span class="br0">&#40;</span><span class="kw3">new</span> InvalidationBatch<span class="br0">&#40;</span>DateTime<span class="sy0">.</span><span class="me1">Now</span><span class="sy0">.</span><span class="me1">ToString</span><span class="br0">&#40;</span>dateFormatWithMilliseconds<span class="br0">&#41;</span>,
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;keysToInvalidate<span class="br0">&#41;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; _cloudFrontClient<span class="sy0">.</span><span class="me1">PostInvalidation</span><span class="br0">&#40;</span>invalidationRequest<span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp; &nbsp; <span class="br0">&#125;</span>
<span class="br0">&#125;</span>
&nbsp;
<span class="kw1">const</span> <span class="kw4">string</span> amazonBucketUriSuffix <span class="sy0">=</span> <span class="st0">&quot;.s3.amazonaws.com&quot;</span><span class="sy0">;</span>
&nbsp;
<span class="kw4">string</span> GetDistributionIdFor<span class="br0">&#40;</span><span class="kw4">string</span> bucketName<span class="br0">&#41;</span>
<span class="br0">&#123;</span>
&nbsp; &nbsp; <span class="kw1">var</span> distributionNameAndIds <span class="sy0">=</span>
&nbsp; &nbsp; &nbsp; &nbsp; _cloudFrontClient<span class="sy0">.</span><span class="me1">ListDistributions</span><span class="br0">&#40;</span><span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="sy0">.</span><span class="me1">Distribution</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="sy0">.</span><span class="me1">ToDictionary</span><span class="br0">&#40;</span>cfd <span class="sy0">=&gt;</span> cfd<span class="sy0">.</span><span class="me1">DistributionConfig</span><span class="sy0">.</span><span class="me1">S3Origin</span><span class="sy0">.</span><span class="me1">DNSName</span><span class="sy0">.</span><span class="me1">Replace</span><span class="br0">&#40;</span>amazonBucketUriSuffix, <span class="st0">&quot;&quot;</span><span class="br0">&#41;</span>, cfd <span class="sy0">=&gt;</span> cfd<span class="sy0">.</span><span class="me1">Id</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; <span class="kw4">string</span> id <span class="sy0">=</span> <span class="kw1">null</span><span class="sy0">;</span>
&nbsp; &nbsp; distributionNameAndIds<span class="sy0">.</span><span class="me1">TryGetValue</span><span class="br0">&#40;</span>bucketName, <span class="kw1">out</span> id<span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; <span class="kw1">return</span> id<span class="sy0">;</span>
<span class="br0">&#125;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">const string dateFormatWithMilliseconds = "yyyy-MM-dd hh:mm:ss.ff";

void InvalidateObjects(string destinationBucket, List&lt;string&gt; keysToInvalidate)
{
    if(keysToInvalidate.Count &gt; 0)
    {
        var distId = GetDistributionIdFor(destinationBucket);
        if(!string.IsNullOrWhiteSpace(distId))
        {
            var invalidationRequest = new PostInvalidationRequest()
                .WithDistribtionId(distId)
                .WithInvalidationBatch(new InvalidationBatch(DateTime.Now.ToString(dateFormatWithMilliseconds),
                                                                     keysToInvalidate));

            _cloudFrontClient.PostInvalidation(invalidationRequest);
        }
    }
}

const string amazonBucketUriSuffix = ".s3.amazonaws.com";

string GetDistributionIdFor(string bucketName)
{
    var distributionNameAndIds =
        _cloudFrontClient.ListDistributions()
        .Distribution
        .ToDictionary(cfd =&gt; cfd.DistributionConfig.S3Origin.DNSName.Replace(amazonBucketUriSuffix, ""), cfd =&gt; cfd.Id);

    string id = null;
    distributionNameAndIds.TryGetValue(bucketName, out id);
    return id;
}</pre></div></div>

<h3>Tying it All Together</h3>
<p>OK so we have all these methods to facilitate copying buckets but how do we actually do it?  I&#8217;m glad you asked.</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="csharp"><thead><tr><td colspan="2"  class="head">C#</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
</pre></td><td class="de1"><pre class="de1"><span class="kw1">public</span> <span class="kw4">void</span> Copy<span class="br0">&#40;</span><span class="kw4">string</span> sourceBucket, <span class="kw4">string</span> destinationBucket<span class="br0">&#41;</span>
<span class="br0">&#123;</span>
&nbsp; &nbsp; CreateDestinationBucketIfNeeded<span class="br0">&#40;</span>destinationBucket<span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; <span class="kw1">var</span> sourceObjects <span class="sy0">=</span> ObjectsFor<span class="br0">&#40;</span>sourceBucket<span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; <span class="kw1">var</span> destinationObjects <span class="sy0">=</span> ObjectsFor<span class="br0">&#40;</span>destinationBucket<span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; <span class="kw1">var</span> toDelete <span class="sy0">=</span> ObjectsToDelete<span class="br0">&#40;</span>sourceObjects, destinationObjects<span class="br0">&#41;</span><span class="sy0">.</span><span class="me1">ToList</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; <span class="kw1">while</span><span class="br0">&#40;</span>toDelete<span class="sy0">.</span><span class="me1">Count</span> <span class="sy0">&gt;</span> <span class="nu0">0</span><span class="br0">&#41;</span>
&nbsp; &nbsp; <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">var</span> batch <span class="sy0">=</span> toDelete<span class="sy0">.</span><span class="me1">Take</span><span class="br0">&#40;</span><span class="nu0">1000</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">var</span> request <span class="sy0">=</span> <span class="kw3">new</span> DeleteObjectsRequest<span class="br0">&#40;</span><span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="sy0">.</span><span class="me1">WithBucketName</span><span class="br0">&#40;</span>destinationBucket<span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="sy0">.</span><span class="me1">WithKeys</span><span class="br0">&#40;</span>batch<span class="sy0">.</span><span class="kw1">Select</span><span class="br0">&#40;</span>k <span class="sy0">=&gt;</span> <span class="kw3">new</span> KeyVersion<span class="br0">&#40;</span>k<span class="sy0">.</span><span class="me1">Key</span><span class="br0">&#41;</span><span class="br0">&#41;</span><span class="sy0">.</span><span class="me1">ToArray</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; _s3Client<span class="sy0">.</span><span class="me1">DeleteObjects</span><span class="br0">&#40;</span>request<span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; toDelete<span class="sy0">.</span><span class="me1">RemoveRange</span><span class="br0">&#40;</span><span class="nu0">0</span>, toDelete<span class="sy0">.</span><span class="me1">Count</span> <span class="sy0">&gt;</span> <span class="nu0">1000</span> <span class="sy0">?</span> <span class="nu0">1000</span> <span class="sy0">:</span> toDelete<span class="sy0">.</span><span class="me1">Count</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp;
&nbsp; &nbsp; <span class="kw1">var</span> buildCopyRequest <span class="sy0">=</span> <span class="kw3">new</span> Func<span class="sy0">&lt;</span>S3Object, CopyObjectRequest<span class="sy0">&gt;</span><span class="br0">&#40;</span>s3obj <span class="sy0">=&gt;</span> <span class="kw3">new</span> CopyObjectRequest<span class="br0">&#40;</span><span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="sy0">.</span><span class="me1">WithSourceBucket</span><span class="br0">&#40;</span>sourceBucket<span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="sy0">.</span><span class="me1">WithDestinationBucket</span><span class="br0">&#40;</span>destinationBucket<span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="sy0">.</span><span class="me1">WithSourceKey</span><span class="br0">&#40;</span>s3obj<span class="sy0">.</span><span class="me1">Key</span><span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="sy0">.</span><span class="me1">WithDestinationKey</span><span class="br0">&#40;</span>s3obj<span class="sy0">.</span><span class="me1">Key</span><span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="sy0">.</span><span class="me1">WithCannedACL</span><span class="br0">&#40;</span>S3CannedACL<span class="sy0">.</span><span class="me1">PublicRead</span><span class="br0">&#41;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; CopyObjects<span class="br0">&#40;</span>ObjectsToInsert<span class="br0">&#40;</span>sourceObjects, destinationObjects<span class="br0">&#41;</span>, buildCopyRequest<span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; <span class="kw1">var</span> keysToInvalidate <span class="sy0">=</span> <span class="kw3">new</span> ConcurrentBag<span class="sy0">&lt;</span><span class="kw4">string</span><span class="sy0">&gt;</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; CopyObjects<span class="br0">&#40;</span>ObjectsToUpdate<span class="br0">&#40;</span>sourceObjects, destinationObjects<span class="br0">&#41;</span>, buildCopyRequest, keysToInvalidate<span class="sy0">.</span><span class="kw1">Add</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; InvalidateObjects<span class="br0">&#40;</span>destinationBucket, keysToInvalidate<span class="sy0">.</span><span class="me1">ToList</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#41;</span><span class="sy0">;</span>
<span class="br0">&#125;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">public void Copy(string sourceBucket, string destinationBucket)
{
    CreateDestinationBucketIfNeeded(destinationBucket);

    var sourceObjects = ObjectsFor(sourceBucket);
    var destinationObjects = ObjectsFor(destinationBucket);

    var toDelete = ObjectsToDelete(sourceObjects, destinationObjects).ToList();
    while(toDelete.Count &gt; 0)
    {
        var batch = toDelete.Take(1000);
        var request = new DeleteObjectsRequest()
            .WithBucketName(destinationBucket)
            .WithKeys(batch.Select(k =&gt; new KeyVersion(k.Key)).ToArray());

        _s3Client.DeleteObjects(request);

        toDelete.RemoveRange(0, toDelete.Count &gt; 1000 ? 1000 : toDelete.Count);
    }

    var buildCopyRequest = new Func&lt;S3Object, CopyObjectRequest&gt;(s3obj =&gt; new CopyObjectRequest()
        .WithSourceBucket(sourceBucket)
        .WithDestinationBucket(destinationBucket)
        .WithSourceKey(s3obj.Key)
        .WithDestinationKey(s3obj.Key)
        .WithCannedACL(S3CannedACL.PublicRead));

    CopyObjects(ObjectsToInsert(sourceObjects, destinationObjects), buildCopyRequest);

    var keysToInvalidate = new ConcurrentBag&lt;string&gt;();

    CopyObjects(ObjectsToUpdate(sourceObjects, destinationObjects), buildCopyRequest, keysToInvalidate.Add);

    InvalidateObjects(destinationBucket, keysToInvalidate.ToList());
}</pre></div></div>

<p>Note that the delete happens inline instead of in a separate method as with the copies.  This is because it wasn&#8217;t reusable, and because the act of deleting the items changes the collection.  As a result it seemed cleaner to just do it inline.</p>
<p>This is really all there is to it.  Hopefully copying buckets in this manner is something that finds its way into the REST API for S3 at some point, but in the meantime this process seems to be working pretty well.  It is not the prettiest code, but it runs reasonably fast for our smallish buckets, and I think it is doing a good job minimizing what our customer has to pay for the service each month.  It was interesting working on this problem, because it forced thinking about the problem in terms of Amazon&#8217;s pricing structure (though because Amazon doesn&#8217;t charge for data transfer within s3 regions it really becomes the same as thinking in terms of minimizing http requests).  This kind of thing isn&#8217;t always a driver of implementation so it was a nice mental exercise.  Now we just have to hope they never change their pricing structure <img src="https://s.w.org/images/core/emoji/2/72x72/1f609.png" alt="😉" class="wp-smiley" style="height: 1em; max-height: 1em;" /></p>
]]></content:encoded>
			<wfw:commentRss>/index.php/webdev/serverprogramming/copying-buckets-with-the-amazon-s3-api/feed/</wfw:commentRss>
		<slash:comments>6</slash:comments>
		</item>
	</channel>
</rss>
