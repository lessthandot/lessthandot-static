<?xml version="1.0" encoding="UTF-8"?><rss version="2.0"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:atom="http://www.w3.org/2005/Atom"
	xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
	
	>
<channel>
	<title>Comments on: Unit Testing Costs Too Much &#8211; Twice The Code = Value?</title>
	<atom:link href="/index.php/desktopdev/generalpurposelanguages/unit-testing-costs-too-much-twice-the-co/feed/" rel="self" type="application/rss+xml" />
	<link>/index.php/desktopdev/generalpurposelanguages/unit-testing-costs-too-much-twice-the-co/</link>
	<description>A Technical Community for IT Professionals</description>
	<lastBuildDate>Tue, 26 Feb 2019 12:40:14 +0000</lastBuildDate>
	<sy:updatePeriod>hourly</sy:updatePeriod>
	<sy:updateFrequency>1</sy:updateFrequency>
	<generator>https://wordpress.org/?v=4.6.1</generator>
	<item>
		<title>By: Alex Ullrich</title>
		<link>/index.php/desktopdev/generalpurposelanguages/unit-testing-costs-too-much-twice-the-co/#comment-3340</link>
		<dc:creator><![CDATA[Alex Ullrich]]></dc:creator>
		<pubDate>Wed, 17 Nov 2010 12:59:22 +0000</pubDate>
		<guid isPermaLink="false">/index.php/2010/11/unit-testing-costs-too-much-twice-the-co/#comment-3340</guid>
		<description><![CDATA[Jeff - I&#039;ve definitely experienced the same thing regarding line count.  TDD has a way of forcing you to do the bare minimum that is quite nice.&lt;br /&gt;
&lt;br /&gt;
local user - I think it&#039;s pretty hard to do the pure unit testing that you describe in a non-trivial app.  To test higher level objects you need to worry about how to address dependencies between objects (either by setting up real objects or mocking/setting expectations) and this can lead to 3 or 4 ten line tests to test a 5 line method pretty easily.]]></description>
		<content:encoded><![CDATA[<p>Jeff &#8211; I&#8217;ve definitely experienced the same thing regarding line count.  TDD has a way of forcing you to do the bare minimum that is quite nice.</p>
<p>local user &#8211; I think it&#8217;s pretty hard to do the pure unit testing that you describe in a non-trivial app.  To test higher level objects you need to worry about how to address dependencies between objects (either by setting up real objects or mocking/setting expectations) and this can lead to 3 or 4 ten line tests to test a 5 line method pretty easily.</p>
]]></content:encoded>
	</item>
	<item>
		<title>By: Eli Weinstock-Herman (tarwn)</title>
		<link>/index.php/desktopdev/generalpurposelanguages/unit-testing-costs-too-much-twice-the-co/#comment-3347</link>
		<dc:creator><![CDATA[Eli Weinstock-Herman (tarwn)]]></dc:creator>
		<pubDate>Tue, 16 Nov 2010 18:42:31 +0000</pubDate>
		<guid isPermaLink="false">/index.php/2010/11/unit-testing-costs-too-much-twice-the-co/#comment-3347</guid>
		<description><![CDATA[local user: There is more to a unit test than a single assert though. At it&#039;s basic you need a minimum of 2 lines (action and assert) but I think 1-3 lines of setup (arrange) is not unusual - netting you 3-5 line functions. Anything else is pure guesswork when we&#039;re talking generalities (complexity of target code, test up front vs test on new project after vs testing on legacy) and assuming that all situations will provide the perfect circumstances seems a bit naive.&lt;br /&gt;
&lt;br /&gt;
Jeff: Thanks for the info - I don&#039;t have experience w/ TDD on that scale and I suspect many projects manage to shrink down that far - shows what can be done if we refactor aggressively w/ good test coverage.]]></description>
		<content:encoded><![CDATA[<p>local user: There is more to a unit test than a single assert though. At it&#8217;s basic you need a minimum of 2 lines (action and assert) but I think 1-3 lines of setup (arrange) is not unusual &#8211; netting you 3-5 line functions. Anything else is pure guesswork when we&#8217;re talking generalities (complexity of target code, test up front vs test on new project after vs testing on legacy) and assuming that all situations will provide the perfect circumstances seems a bit naive.</p>
<p>Jeff: Thanks for the info &#8211; I don&#8217;t have experience w/ TDD on that scale and I suspect many projects manage to shrink down that far &#8211; shows what can be done if we refactor aggressively w/ good test coverage.</p>
]]></content:encoded>
	</item>
	<item>
		<title>By: Jeff L.</title>
		<link>/index.php/desktopdev/generalpurposelanguages/unit-testing-costs-too-much-twice-the-co/#comment-3346</link>
		<dc:creator><![CDATA[Jeff L.]]></dc:creator>
		<pubDate>Tue, 16 Nov 2010 17:58:21 +0000</pubDate>
		<guid isPermaLink="false">/index.php/2010/11/unit-testing-costs-too-much-twice-the-co/#comment-3346</guid>
		<description><![CDATA[I don&#039;t know about plain ol&#039; unit testing (POUT, aka TAD test-after development), but I have seen many different projects done using TDD. &lt;br /&gt;
&lt;br /&gt;
With TDD done comprehensively, the amount of test code is usually a bit more than the production source base.&lt;br /&gt;
&lt;br /&gt;
However, and a big however, the overall amount of code is usually half the size it would otherwise be, or even less. How do I know this? One example: At a shop in Cleveland, they took a &quot;typical&quot; Java app of about 180,000 lines of code, added lots of tests, and refactored it down. Nine months later, they had 70,000 loc; another month later, they had 60,000 lines.&lt;br /&gt;
&lt;br /&gt;
A quick look at just about any typical app reveals lots and lots of code unnecessary duplication. It partly exists because of the risk involved with not getting rid of it. In contrast, on a test-driven app, we factor out duplication *far* more than we would otherwise. Hence the line count stays low.&lt;br /&gt;
&lt;br /&gt;
I&#039;ll take the Pepsi Challenge any day that just about every non-TDD&#039;d app can be shrunk by at least a third and usually to a half.&lt;br /&gt;
&lt;br /&gt;
Ergo: half the typical size + unit test code that&#039;s a little larger than that = perhaps a little more total code than before. Plus you get the other myriad benefits of having the test coverage. It&#039;s always seemed worth it to me.&lt;br /&gt;
&lt;br /&gt;
(It does require keeping the UTs themselves clean, too, i.e. minimizing duplication and emphasizing abstraction.)]]></description>
		<content:encoded><![CDATA[<p>I don&#8217;t know about plain ol&#8217; unit testing (POUT, aka TAD test-after development), but I have seen many different projects done using TDD. </p>
<p>With TDD done comprehensively, the amount of test code is usually a bit more than the production source base.</p>
<p>However, and a big however, the overall amount of code is usually half the size it would otherwise be, or even less. How do I know this? One example: At a shop in Cleveland, they took a &#8220;typical&#8221; Java app of about 180,000 lines of code, added lots of tests, and refactored it down. Nine months later, they had 70,000 loc; another month later, they had 60,000 lines.</p>
<p>A quick look at just about any typical app reveals lots and lots of code unnecessary duplication. It partly exists because of the risk involved with not getting rid of it. In contrast, on a test-driven app, we factor out duplication *far* more than we would otherwise. Hence the line count stays low.</p>
<p>I&#8217;ll take the Pepsi Challenge any day that just about every non-TDD&#8217;d app can be shrunk by at least a third and usually to a half.</p>
<p>Ergo: half the typical size + unit test code that&#8217;s a little larger than that = perhaps a little more total code than before. Plus you get the other myriad benefits of having the test coverage. It&#8217;s always seemed worth it to me.</p>
<p>(It does require keeping the UTs themselves clean, too, i.e. minimizing duplication and emphasizing abstraction.)</p>
]]></content:encoded>
	</item>
	<item>
		<title>By: local user</title>
		<link>/index.php/desktopdev/generalpurposelanguages/unit-testing-costs-too-much-twice-the-co/#comment-3345</link>
		<dc:creator><![CDATA[local user]]></dc:creator>
		<pubDate>Tue, 16 Nov 2010 13:26:50 +0000</pubDate>
		<guid isPermaLink="false">/index.php/2010/11/unit-testing-costs-too-much-twice-the-co/#comment-3345</guid>
		<description><![CDATA[I am astounded by all of the comments about unit tests that are 2-3 times larger than your code.  How is that?  If I have a method with 10 lines of code and I write 5 unit tests for it - I essentially have 5 assert statements in it&#039;s most basic form.  What are you people doing, putting logic in your unit tests?  WTH.  Call your block it returns X,Y or Z or an error, assert it, the end.  If you are writing such large unit tests your architecture needs to be rethought out or something, because you are doing something wrong.]]></description>
		<content:encoded><![CDATA[<p>I am astounded by all of the comments about unit tests that are 2-3 times larger than your code.  How is that?  If I have a method with 10 lines of code and I write 5 unit tests for it &#8211; I essentially have 5 assert statements in it&#8217;s most basic form.  What are you people doing, putting logic in your unit tests?  WTH.  Call your block it returns X,Y or Z or an error, assert it, the end.  If you are writing such large unit tests your architecture needs to be rethought out or something, because you are doing something wrong.</p>
]]></content:encoded>
	</item>
	<item>
		<title>By: Eli Weinstock-Herman (tarwn)</title>
		<link>/index.php/desktopdev/generalpurposelanguages/unit-testing-costs-too-much-twice-the-co/#comment-3344</link>
		<dc:creator><![CDATA[Eli Weinstock-Herman (tarwn)]]></dc:creator>
		<pubDate>Tue, 16 Nov 2010 10:51:07 +0000</pubDate>
		<guid isPermaLink="false">/index.php/2010/11/unit-testing-costs-too-much-twice-the-co/#comment-3344</guid>
		<description><![CDATA[I tend to say 2x just because it&#039;s easy. The actual amount is going to depend on a lot of factors; How you&#039;ve written the code (ease of testability, complexity of units, number of dependencies), whether you&#039;re manually mocking objects or auto-mocking, what level of testing you do (coverage, and whether you do integration tests also, etc) are just a few of those factors. There have also been studies that show that unit testing (and especially TDD) will reduce the size of the resulting production code, so add 1.5x, subtract .33x...&lt;br /&gt;
&lt;br /&gt;
And that&#039;s all at time of initial production. Legacy and maintenance phase applications can be heavily affected by the presence of Unit Tests when business rules are modified. With apps that have unit tests, we tend to refactor and rewrite the rules that are changing. Without unit tests, our safety net, we tend to do more patching or band-aiding because we are afraid to change the pieces we know are working. So long term maintenance projects tend to bloat as they age and add another potential factor to the equation.&lt;br /&gt;
&lt;br /&gt;
So I say 2x because it&#039;s a useful generalization and every other item I mentioned above is probably another topic on it&#039;s own :)]]></description>
		<content:encoded><![CDATA[<p>I tend to say 2x just because it&#8217;s easy. The actual amount is going to depend on a lot of factors; How you&#8217;ve written the code (ease of testability, complexity of units, number of dependencies), whether you&#8217;re manually mocking objects or auto-mocking, what level of testing you do (coverage, and whether you do integration tests also, etc) are just a few of those factors. There have also been studies that show that unit testing (and especially TDD) will reduce the size of the resulting production code, so add 1.5x, subtract .33x&#8230;</p>
<p>And that&#8217;s all at time of initial production. Legacy and maintenance phase applications can be heavily affected by the presence of Unit Tests when business rules are modified. With apps that have unit tests, we tend to refactor and rewrite the rules that are changing. Without unit tests, our safety net, we tend to do more patching or band-aiding because we are afraid to change the pieces we know are working. So long term maintenance projects tend to bloat as they age and add another potential factor to the equation.</p>
<p>So I say 2x because it&#8217;s a useful generalization and every other item I mentioned above is probably another topic on it&#8217;s own 🙂</p>
]]></content:encoded>
	</item>
	<item>
		<title>By: Christiaan Baes (chrissie1)</title>
		<link>/index.php/desktopdev/generalpurposelanguages/unit-testing-costs-too-much-twice-the-co/#comment-3343</link>
		<dc:creator><![CDATA[Christiaan Baes (chrissie1)]]></dc:creator>
		<pubDate>Tue, 16 Nov 2010 10:42:22 +0000</pubDate>
		<guid isPermaLink="false">/index.php/2010/11/unit-testing-costs-too-much-twice-the-co/#comment-3343</guid>
		<description><![CDATA[3x is 50% more so that is much more for me.]]></description>
		<content:encoded><![CDATA[<p>3x is 50% more so that is much more for me.</p>
]]></content:encoded>
	</item>
	<item>
		<title>By: Alex Ullrich</title>
		<link>/index.php/desktopdev/generalpurposelanguages/unit-testing-costs-too-much-twice-the-co/#comment-3342</link>
		<dc:creator><![CDATA[Alex Ullrich]]></dc:creator>
		<pubDate>Tue, 16 Nov 2010 10:27:32 +0000</pubDate>
		<guid isPermaLink="false">/index.php/2010/11/unit-testing-costs-too-much-twice-the-co/#comment-3342</guid>
		<description><![CDATA[I&#039;m not sure it&#039;s much more than twice the code (3x wouldn&#039;t surprise me a bit though), but I agree that the more coverage you can get the better.  We made some changes last week that caused a whole bunch of tests to fail throughout the system (probably over 100 overall across different parts) and never would have caught all of them without tests.]]></description>
		<content:encoded><![CDATA[<p>I&#8217;m not sure it&#8217;s much more than twice the code (3x wouldn&#8217;t surprise me a bit though), but I agree that the more coverage you can get the better.  We made some changes last week that caused a whole bunch of tests to fail throughout the system (probably over 100 overall across different parts) and never would have caught all of them without tests.</p>
]]></content:encoded>
	</item>
	<item>
		<title>By: Christiaan Baes (chrissie1)</title>
		<link>/index.php/desktopdev/generalpurposelanguages/unit-testing-costs-too-much-twice-the-co/#comment-3341</link>
		<dc:creator><![CDATA[Christiaan Baes (chrissie1)]]></dc:creator>
		<pubDate>Mon, 15 Nov 2010 16:23:02 +0000</pubDate>
		<guid isPermaLink="false">/index.php/2010/11/unit-testing-costs-too-much-twice-the-co/#comment-3341</guid>
		<description><![CDATA[I actualy think it&#039;s much more then twice the code, but it would be hard to get real number about it. But you appreciate it even more when tests go red which you never expected to go red with that change.]]></description>
		<content:encoded><![CDATA[<p>I actualy think it&#8217;s much more then twice the code, but it would be hard to get real number about it. But you appreciate it even more when tests go red which you never expected to go red with that change.</p>
]]></content:encoded>
	</item>
</channel>
</rss>
