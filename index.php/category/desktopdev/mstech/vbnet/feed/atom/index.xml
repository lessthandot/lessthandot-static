<?xml version="1.0" encoding="UTF-8"?><feed
  xmlns="http://www.w3.org/2005/Atom"
  xmlns:thr="http://purl.org/syndication/thread/1.0"
  xml:lang="en-US"
  xml:base="/wp-atom.php"
   >
	<title type="text">VB.NET &#8211; LessthanDot</title>
	<subtitle type="text">A Technical Community for IT Professionals</subtitle>

	<updated>2019-03-09T12:50:36Z</updated>

	<link rel="alternate" type="text/html" href="/" />
	<id>/index.php/feed/atom/</id>
	<link rel="self" type="application/atom+xml" href="/index.php/category/desktopdev/mstech/vbnet/feed/atom/" />

	<generator uri="https://wordpress.org/" version="4.6.1">WordPress</generator>
	<entry>
		<author>
			<name>Bert Michielsen</name>
					</author>
		<title type="html"><![CDATA[Boost your datatransport with XML, VB 11 and denormalisation techniques !]]></title>
		<link rel="alternate" type="text/html" href="/index.php/desktopdev/mstech/vbnet/boost-your-datatransport-with-xml/" />
		<id>/index.php/2013/10/boost-your-datatransport-with-xml/</id>
		<updated>2013-10-09T22:08:00Z</updated>
		<published>2013-10-09T22:08:00Z</published>
		<category scheme="/" term="VB.NET" />		<summary type="html"><![CDATA[Xml, as we all know, has a drawback, being the potential growth in size, characteristical to the format , especially when dealing with complex types and collections of complex types. Let's take a look at a classic example, taken from Wikipedia.


&#038;lt&#8230;]]></summary>
		<content type="html" xml:base="/index.php/desktopdev/mstech/vbnet/boost-your-datatransport-with-xml/"><![CDATA[<p>
Xml, as we all know, has a drawback, being the potential growth in size, characteristical to the format , especially when dealing with complex types and collections of complex types. Let&#8217;s take a look at a classic example, taken from Wikipedia.
</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="xml"><thead><tr><td colspan="2"  class="head">XML</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
</pre></td><td class="de1"><pre class="de1"><span class="sc3"><span class="re1">&lt;person<span class="re2">&gt;</span></span></span>
&nbsp; <span class="sc3"><span class="re1">&lt;firstName<span class="re2">&gt;</span></span></span>John<span class="sc3"><span class="re1">&lt;/firstName<span class="re2">&gt;</span></span></span>
&nbsp; <span class="sc3"><span class="re1">&lt;lastName<span class="re2">&gt;</span></span></span>Smith<span class="sc3"><span class="re1">&lt;/lastName<span class="re2">&gt;</span></span></span>
&nbsp; <span class="sc3"><span class="re1">&lt;age<span class="re2">&gt;</span></span></span>25<span class="sc3"><span class="re1">&lt;/age<span class="re2">&gt;</span></span></span>
&nbsp; <span class="sc3"><span class="re1">&lt;address<span class="re2">&gt;</span></span></span>
&nbsp; &nbsp; <span class="sc3"><span class="re1">&lt;streetAddress<span class="re2">&gt;</span></span></span>21 2nd Street<span class="sc3"><span class="re1">&lt;/streetAddress<span class="re2">&gt;</span></span></span>
&nbsp; &nbsp; <span class="sc3"><span class="re1">&lt;city<span class="re2">&gt;</span></span></span>New York<span class="sc3"><span class="re1">&lt;/city<span class="re2">&gt;</span></span></span>
&nbsp; &nbsp; <span class="sc3"><span class="re1">&lt;state<span class="re2">&gt;</span></span></span>NY<span class="sc3"><span class="re1">&lt;/state<span class="re2">&gt;</span></span></span>
&nbsp; &nbsp; <span class="sc3"><span class="re1">&lt;postalCode<span class="re2">&gt;</span></span></span>10021<span class="sc3"><span class="re1">&lt;/postalCode<span class="re2">&gt;</span></span></span>
&nbsp; <span class="sc3"><span class="re1">&lt;/address<span class="re2">&gt;</span></span></span>
&nbsp; <span class="sc3"><span class="re1">&lt;phoneNumbers<span class="re2">&gt;</span></span></span>
&nbsp; &nbsp; <span class="sc3"><span class="re1">&lt;phoneNumber</span> <span class="re0">type</span>=<span class="st0">&quot;home&quot;</span><span class="re2">&gt;</span></span>212 555-1234<span class="sc3"><span class="re1">&lt;/phoneNumber<span class="re2">&gt;</span></span></span>
&nbsp; &nbsp; <span class="sc3"><span class="re1">&lt;phoneNumber</span> <span class="re0">type</span>=<span class="st0">&quot;fax&quot;</span><span class="re2">&gt;</span></span>646 555-4567<span class="sc3"><span class="re1">&lt;/phoneNumber<span class="re2">&gt;</span></span></span>
&nbsp; <span class="sc3"><span class="re1">&lt;/phoneNumbers<span class="re2">&gt;</span></span></span>
<span class="sc3"><span class="re1">&lt;/person<span class="re2">&gt;</span></span></span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">&lt;person&gt;
  &lt;firstName&gt;John&lt;/firstName&gt;
  &lt;lastName&gt;Smith&lt;/lastName&gt;
  &lt;age&gt;25&lt;/age&gt;
  &lt;address&gt;
    &lt;streetAddress&gt;21 2nd Street&lt;/streetAddress&gt;
    &lt;city&gt;New York&lt;/city&gt;
    &lt;state&gt;NY&lt;/state&gt;
    &lt;postalCode&gt;10021&lt;/postalCode&gt;
  &lt;/address&gt;
  &lt;phoneNumbers&gt;
    &lt;phoneNumber type="home"&gt;212 555-1234&lt;/phoneNumber&gt;
    &lt;phoneNumber type="fax"&gt;646 555-4567&lt;/phoneNumber&gt;
  &lt;/phoneNumbers&gt;
&lt;/person&gt;</pre></div></div>

<p>
Try to imagine  a collection of  1000 persons, each with 4 possible addresses and up to 10 telephonenumbers and having to transport this over a wire, and it all becomes clear instantly.
</p>
<p>
But is XML really less performant sizewise ?  We could use XML-attributes and easily serialize an object like this :
</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="xml"><thead><tr><td colspan="2"  class="head">XML</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
</pre></td><td class="de1"><pre class="de1"><span class="sc3"><span class="re1">&lt;person</span> <span class="re0">firstName</span>=<span class="st0">&quot;John&quot;</span> <span class="re0">lastName</span>=<span class="st0">&quot;Smith&quot;</span> <span class="re0">age</span>=<span class="st0">&quot;25&quot;</span> <span class="re2">/&gt;</span></span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">&lt;person firstName="John" lastName="Smith" age="25" /&gt;</pre></div></div>

<p>
Based on this example it would seem that attribute-only XML outperforms about anything. But does it realy ? The minute complex types and certainly collections are involved, maintaining that advantage becomes difficult, if not impossible, as you can see here:
</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="xml"><thead><tr><td colspan="2"  class="head">XML</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
</pre></td><td class="de1"><pre class="de1"><span class="sc3"><span class="re1">&lt;person</span> <span class="re0">firstName</span>=<span class="st0">&quot;John&quot;</span> <span class="re0">lastName</span>=<span class="st0">&quot;Smith&quot;</span> <span class="re0">age</span>=<span class="st0">&quot;25&quot;</span><span class="re2">&gt;</span></span>
&nbsp; <span class="sc3"><span class="re1">&lt;address</span> <span class="re0">streetAddress</span>=<span class="st0">&quot;21 2nd Street&quot;</span> <span class="re0">city</span>=<span class="st0">&quot;New York&quot;</span> <span class="re0">state</span>=<span class="st0">&quot;NY&quot;</span> <span class="re0">postalCode</span>=<span class="st0">&quot;10021&quot;</span> <span class="re2">/&gt;</span></span>
&nbsp; <span class="sc3"><span class="re1">&lt;phoneNumbers<span class="re2">&gt;</span></span></span>
&nbsp; &nbsp; <span class="sc3"><span class="re1">&lt;phoneNumber</span> <span class="re0">type</span>=<span class="st0">&quot;home&quot;</span> <span class="re0">number</span>=<span class="st0">&quot;212 555-1234&quot;</span><span class="re2">/&gt;</span></span>
&nbsp; &nbsp; <span class="sc3"><span class="re1">&lt;phoneNumber</span> <span class="re0">type</span>=<span class="st0">&quot;fax&quot;</span> &nbsp;<span class="re0">number</span>=<span class="st0">&quot;646 555-4567&quot;</span><span class="re2">/&gt;</span></span>
&nbsp; <span class="sc3"><span class="re1">&lt;/phoneNumbers<span class="re2">&gt;</span></span></span>
<span class="sc3"><span class="re1">&lt;/person<span class="re2">&gt;</span></span></span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">&lt;person firstName="John" lastName="Smith" age="25"&gt;
  &lt;address streetAddress="21 2nd Street" city="New York" state="NY" postalCode="10021" /&gt;
  &lt;phoneNumbers&gt;
    &lt;phoneNumber type="home" number="212 555-1234"/&gt;
    &lt;phoneNumber type="fax"  number="646 555-4567"/&gt;
  &lt;/phoneNumbers&gt;
&lt;/person&gt;</pre></div></div>

<p>
This is quite an improvement if we still imagine those same 1000 persons. Nevertheless, as JSON demonstrates : complex types and collections can be handled in a more intelligent way when it comes to limiting growth in size where serialization is involved.
</p>
<p>
That said, we can still tweak serialization from within our code, of course. By using attributes in our classes we can limit the length of the tagnames or prevent properties we don&#8217;t want to be serialized from appearing within the resulting XML, and thus adding to the total size.
</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="vbnet"><thead><tr><td colspan="2"  class="head">vb.net</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
</pre></td><td class="de1"><pre class="de1"><span class="kw1">Public</span> <span class="kw1">Class</span> Address
&nbsp; &nbsp; <span class="sy0">&lt;</span>XmlIgnore<span class="sy0">&gt;</span>
&nbsp; &nbsp; <span class="kw1">Public</span> <span class="kw1">Property</span> ID <span class="kw1">As</span> <span class="kw2">Integer</span>
&nbsp; &nbsp; <span class="kw1">Public</span> <span class="kw1">Property</span> Street <span class="kw1">As</span> <span class="kw2">String</span>
&nbsp; &nbsp; <span class="kw1">Public</span> <span class="kw1">Property</span> City <span class="kw1">As</span> <span class="kw2">String</span>
&nbsp; &nbsp; <span class="kw1">Public</span> <span class="kw1">Property</span> Code <span class="kw1">As</span> <span class="kw2">String</span>
&nbsp; &nbsp; <span class="kw1">Public</span> <span class="kw1">Property</span> State <span class="kw1">As</span> <span class="kw2">String</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">Public Class Address
    &lt;XmlIgnore&gt;
    Public Property ID As Integer
    Public Property Street As String
    Public Property City As String
    Public Property Code As String
    Public Property State As String</pre></div></div>

<p>
This gives us the means to trim resulting XML in such a way that the final result may feel like being &#8220;acceptable&#8221;.  Our classes we could then expand with functionality to serialize any instance at any moment as well as deserialize  back into them. Typically we use XmlSerializer objects for this.
</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="vbnet"><thead><tr><td colspan="2"  class="head">vb.net</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
</pre></td><td class="de1"><pre class="de1"><span class="kw1">Public</span> <span class="kw1">Class</span> Address
&nbsp; &nbsp; <span class="sy0">&lt;</span>XmlIgnore<span class="sy0">&gt;</span>
&nbsp; &nbsp; <span class="kw1">Public</span> <span class="kw1">Property</span> ID <span class="kw1">As</span> <span class="kw2">Integer</span>
&nbsp; &nbsp; <span class="kw1">Public</span> <span class="kw1">Property</span> Street <span class="kw1">As</span> <span class="kw2">String</span>
&nbsp; &nbsp; <span class="kw1">Public</span> <span class="kw1">Property</span> City <span class="kw1">As</span> <span class="kw2">String</span>
&nbsp; &nbsp; <span class="kw1">Public</span> <span class="kw1">Property</span> Code <span class="kw1">As</span> <span class="kw2">String</span>
&nbsp; &nbsp; <span class="kw1">Public</span> <span class="kw1">Property</span> State <span class="kw1">As</span> <span class="kw2">String</span>
&nbsp; &nbsp; <span class="kw1">Public</span> <span class="kw1">Property</span> SequenceID <span class="kw1">As</span> <span class="kw2">Integer</span>
&nbsp;
&nbsp; &nbsp; <span class="kw1">Public</span> <span class="kw1">ReadOnly</span> <span class="kw1">Property</span> AsXML <span class="kw1">As</span> XElement
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">Get</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="co1">' serialize instance with the help of an XML serializer, XML writer and memorystream and return the generated XML</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">End</span> <span class="kw1">Get</span>
&nbsp; &nbsp; <span class="kw1">End</span> <span class="kw1">Property</span>
&nbsp;
&nbsp; &nbsp; <span class="kw1">Public</span> <span class="kw1">Shared</span> <span class="kw1">ReadOnly</span> <span class="kw1">Property</span> FromXML<span class="br0">&#40;</span>xml <span class="kw1">As</span> XElement<span class="br0">&#41;</span> <span class="kw1">As</span> Address
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">Get</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">Return</span> <span class="kw4">CType</span><span class="br0">&#40;</span><span class="kw1">New</span> XmlSerializer<span class="br0">&#40;</span><span class="kw1">GetType</span><span class="br0">&#40;</span>Address<span class="br0">&#41;</span><span class="br0">&#41;</span><span class="sy0">.</span><span class="me1">Deserialize</span><span class="br0">&#40;</span>xml<span class="sy0">.</span><span class="me1">CreateReader</span><span class="br0">&#41;</span>, Address<span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">End</span> <span class="kw1">Get</span>
&nbsp; &nbsp; <span class="kw1">End</span> <span class="kw1">Property</span>
&nbsp;
<span class="kw1">End</span> <span class="kw1">Class</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">Public Class Address
    &lt;XmlIgnore&gt;
    Public Property ID As Integer
    Public Property Street As String
    Public Property City As String
    Public Property Code As String
    Public Property State As String
    Public Property SequenceID As Integer

    Public ReadOnly Property AsXML As XElement
        Get
            ' serialize instance with the help of an XML serializer, XML writer and memorystream and return the generated XML
        End Get
    End Property

    Public Shared ReadOnly Property FromXML(xml As XElement) As Address
        Get
            Return CType(New XmlSerializer(GetType(Address)).Deserialize(xml.CreateReader), Address)
        End Get
    End Property

End Class</pre></div></div>

<p>
There&#8217;s a drawback though. If we want to serialize our instances into XML purely in memory, this turns out to be quite a mess. You&#8217;ll get there eventually, but the more you want to customise the XML to be generated the messier it gets.  Serializing to file(s) on hard disk is a tad more straightforward, but do we want to make a roundtrip to the hard disk at each serialization at all times ? Obviously no.
</p>
<p>
Luckily this can be done in a much easier way, courtesy of  the .NET framework builtin Linq To XML. Linq To XML turns both reading and writing XML into a breeze.
</p>
<p>
Now, there&#8217;s a reason I have used VB as PL here, instead of C# or C++.  From VB 9 onward it has this cool feature on board, named XML litterals. No, C# does not have this feature on board. As for the why, you have to address the C# compiler development team for that. Anyway,  as you can see, this feature is nothing less than awesome.
</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="vbnet"><thead><tr><td colspan="2"  class="head">vb.net</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
</pre></td><td class="de1"><pre class="de1"><span class="kw1">Public</span> <span class="kw1">Class</span> Address
&nbsp; &nbsp; <span class="kw1">Public</span> <span class="kw1">Property</span> ID <span class="kw1">As</span> <span class="kw2">Integer</span>
&nbsp; &nbsp; <span class="kw1">Public</span> <span class="kw1">Property</span> Street <span class="kw1">As</span> <span class="kw2">String</span>
&nbsp; &nbsp; <span class="kw1">Public</span> <span class="kw1">Property</span> City <span class="kw1">As</span> <span class="kw2">String</span>
&nbsp; &nbsp; <span class="kw1">Public</span> <span class="kw1">Property</span> Code <span class="kw1">As</span> <span class="kw2">String</span>
&nbsp; &nbsp; <span class="kw1">Public</span> <span class="kw1">Property</span> State <span class="kw1">As</span> <span class="kw2">String</span>
&nbsp; &nbsp; <span class="kw1">Public</span> <span class="kw1">Property</span> SequenceID <span class="kw1">As</span> <span class="kw2">Integer</span>
&nbsp;
&nbsp; &nbsp; <span class="kw1">Public</span> <span class="kw1">ReadOnly</span> <span class="kw1">Property</span> AsXML <span class="kw1">As</span> XElement
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">Get</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">Return</span> <span class="sy0">&lt;</span>Address Street<span class="sy0">=&lt;%=</span> Street <span class="sy0">%&gt;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;City<span class="sy0">=&lt;%=</span> City <span class="sy0">%&gt;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;Code<span class="sy0">=&lt;%=</span> Code <span class="sy0">%&gt;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;State<span class="sy0">=&lt;%=</span> State <span class="sy0">%&gt;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span class="sy0">/&gt;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">End</span> <span class="kw1">Get</span>
&nbsp; &nbsp; <span class="kw1">End</span> <span class="kw1">Property</span>
&nbsp;
&nbsp; &nbsp; <span class="kw1">Public</span> <span class="kw1">Shared</span> <span class="kw1">ReadOnly</span> <span class="kw1">Property</span> FromXML<span class="br0">&#40;</span>xml <span class="kw1">As</span> XElement<span class="br0">&#41;</span> <span class="kw1">As</span> Address
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">Get</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">Return</span> <span class="kw1">New</span> Address <span class="kw1">With</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="sy0">.</span><span class="me1">Street</span> <span class="sy0">=</span> xml<span class="sy0">.</span>@Street,
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="sy0">.</span><span class="me1">City</span> <span class="sy0">=</span> xml<span class="sy0">.</span>@City,
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="sy0">.</span><span class="me1">Code</span> <span class="sy0">=</span> xml<span class="sy0">.</span>@Code,
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="sy0">.</span><span class="me1">State</span> <span class="sy0">=</span> xml<span class="sy0">.</span>@State
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">End</span> <span class="kw1">Get</span>
&nbsp; &nbsp; <span class="kw1">End</span> <span class="kw1">Property</span>
&nbsp;
<span class="kw1">End</span> <span class="kw1">Class</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">Public Class Address
    Public Property ID As Integer
    Public Property Street As String
    Public Property City As String
    Public Property Code As String
    Public Property State As String
    Public Property SequenceID As Integer

    Public ReadOnly Property AsXML As XElement
        Get
            Return &lt;Address Street=&lt;%= Street %&gt;
                       City=&lt;%= City %&gt;
                       Code=&lt;%= Code %&gt;
                       State=&lt;%= State %&gt;
                   /&gt;
        End Get
    End Property

    Public Shared ReadOnly Property FromXML(xml As XElement) As Address
        Get
            Return New Address With {
                                        .Street = xml.@Street,
                                        .City = xml.@City,
                                        .Code = xml.@Code,
                                        .State = xml.@State
                                    }
        End Get
    End Property

End Class</pre></div></div>

<p>
We don&#8217;t have to use serializer objects anymore, as you can see.  As a matter of fact, even the use of Attributes in our code has become obsolete because we serialize only what we want and only how we want it, without relying on external objects. And what&#8217;s more, it is compiled, not interpreted as you might think.
</p>
<p>
Consuming this functionality is just as easy.
</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="vbnet"><thead><tr><td colspan="2"  class="head">vb.net</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
</pre></td><td class="de1"><pre class="de1"><span class="kw1">Dim</span> someAddress <span class="kw1">As</span> <span class="kw1">New</span> Address <span class="kw1">With</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="sy0">.</span><span class="me1">Street</span> <span class="sy0">=</span> <span class="st0">&quot;21 2nd Street&quot;</span>,
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="sy0">.</span><span class="me1">City</span> <span class="sy0">=</span> <span class="st0">&quot;New York&quot;</span>,
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="sy0">.</span><span class="me1">Code</span> <span class="sy0">=</span> <span class="st0">&quot;10021&quot;</span>,
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="sy0">.</span><span class="me1">State</span> <span class="sy0">=</span> <span class="st0">&quot;NY&quot;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; Console<span class="sy0">.</span><span class="me1">WriteLine</span><span class="br0">&#40;</span>someAddress<span class="sy0">.</span><span class="me1">AsXML</span><span class="sy0">.</span><span class="me1">ToString</span><span class="br0">&#41;</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">Dim</span> anAddress <span class="kw1">As</span> Address <span class="sy0">=</span> Address<span class="sy0">.</span><span class="me1">FromXML</span><span class="br0">&#40;</span><span class="sy0">&lt;</span>Address Street<span class="sy0">=</span><span class="st0">&quot;21 2nd Street&quot;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;City<span class="sy0">=</span><span class="st0">&quot;New York&quot;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;State<span class="sy0">=</span><span class="st0">&quot;NY&quot;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;Code<span class="sy0">=</span><span class="st0">&quot;10021&quot;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span class="sy0">/&gt;</span><span class="br0">&#41;</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; Console<span class="sy0">.</span><span class="me1">WriteLine</span><span class="br0">&#40;</span><span class="st0">&quot;Street : &quot;</span> <span class="sy0">&amp;</span> anAddress<span class="sy0">.</span><span class="me1">Street</span><span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; Console<span class="sy0">.</span><span class="me1">WriteLine</span><span class="br0">&#40;</span><span class="st0">&quot;City : &quot;</span> <span class="sy0">&amp;</span> anAddress<span class="sy0">.</span><span class="me1">City</span><span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; Console<span class="sy0">.</span><span class="me1">WriteLine</span><span class="br0">&#40;</span><span class="st0">&quot;State : &quot;</span> <span class="sy0">&amp;</span> anAddress<span class="sy0">.</span><span class="me1">State</span><span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; Console<span class="sy0">.</span><span class="me1">WriteLine</span><span class="br0">&#40;</span><span class="st0">&quot;Code : &quot;</span> <span class="sy0">&amp;</span> anAddress<span class="sy0">.</span><span class="me1">Code</span><span class="br0">&#41;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">Dim someAddress As New Address With {
                                                .Street = "21 2nd Street",
                                                .City = "New York",
                                                .Code = "10021",
                                                .State = "NY"
                                            }

        Console.WriteLine(someAddress.AsXML.ToString)

        Dim anAddress As Address = Address.FromXML(&lt;Address Street="21 2nd Street"
                                                       City="New York"
                                                       State="NY"
                                                       Code="10021"
                                                   /&gt;)

        Console.WriteLine("Street : " &amp; anAddress.Street)
        Console.WriteLine("City : " &amp; anAddress.City)
        Console.WriteLine("State : " &amp; anAddress.State)
        Console.WriteLine("Code : " &amp; anAddress.Code)</pre></div></div>

<p>
Now, at least, we are somewhere. With a relative small overhead we can use extra functionality within objects in our code to generate XML wich leaves all in all a small fingerprint where our data-transport is concerned.  Yet, the fingerprint is still there, and when we have to deal with various nested complex types combined with very large collections, there still is the risk that the size of the generated XML may become unacceptable.
</p>
<p>
We haven&#8217;t gone to the bottom yet though, where XML is concerned.  There still is one option whe haven&#8217;t explored. What we can do is <b><i>denormalising</i></b> our XML.  So instead of composing elements we place all their attributes in 1 big root tag. Sort of like denormalising a table model of a database.  The   <b><i>&lt;Person&gt;&lt;Address /&gt;&lt;Phonenumbers&gt;&lt;Phonenumber /&gt;&lt;Phonenumber /&gt;&lt;/Phonenumbers&gt;&lt;/Person&gt;</i></b> example above would look in a denormalised form like this :
</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="xml"><thead><tr><td colspan="2"  class="head">XML</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
</pre></td><td class="de1"><pre class="de1"><span class="sc3"><span class="re1">&lt;person</span> <span class="re0">firstName</span>=<span class="st0">&quot;John&quot;</span></span>
<span class="sc3"> &nbsp; &nbsp; &nbsp; &nbsp;<span class="re0">lastName</span>=<span class="st0">&quot;Smith&quot;</span></span>
<span class="sc3"> &nbsp; &nbsp; &nbsp; &nbsp;<span class="re0">age</span>=<span class="st0">&quot;25&quot;</span></span>
<span class="sc3"> &nbsp; &nbsp; &nbsp; &nbsp;<span class="re0">A.Street</span>=<span class="st0">&quot;21 2nd Street&quot;</span></span>
<span class="sc3"> &nbsp; &nbsp; &nbsp; &nbsp;<span class="re0">A.City</span>=<span class="st0">&quot;New York&quot;</span></span>
<span class="sc3"> &nbsp; &nbsp; &nbsp; &nbsp;<span class="re0">A.State</span>=<span class="st0">&quot;NY&quot;</span></span>
<span class="sc3"> &nbsp; &nbsp; &nbsp; &nbsp;<span class="re0">A.Code</span>=<span class="st0">&quot;10021&quot;</span></span>
<span class="sc3"> &nbsp; &nbsp; &nbsp; &nbsp;<span class="re0">P1.Type</span>=<span class="st0">&quot;home&quot;</span></span>
<span class="sc3"> &nbsp; &nbsp; &nbsp; &nbsp;<span class="re0">P1.Value</span>=<span class="st0">&quot;212 555-1234&quot;</span></span>
<span class="sc3"> &nbsp; &nbsp; &nbsp; &nbsp;<span class="re0">P2.Type</span>=<span class="st0">&quot;fax&quot;</span></span>
<span class="sc3"> &nbsp; &nbsp; &nbsp; &nbsp;<span class="re0">P2.Value</span>=<span class="st0">&quot;646 555-4567&quot;</span> <span class="re2">/&gt;</span></span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">&lt;person firstName="John"
        lastName="Smith"
        age="25"
        A.Street="21 2nd Street"
        A.City="New York"
        A.State="NY"
        A.Code="10021"
        P1.Type="home"
        P1.Value="212 555-1234"
        P2.Type="fax"
        P2.Value="646 555-4567" /&gt;</pre></div></div>

<p>
As you can see, this is XML in it&#8217;s very most compact form. JSON can hardly do better than this ( in fact, it can&#8217;t).  Notice that I used  a dot within the attributes to have some sort of indication that we are dealing with a composition of elements really, which has to be taken into account when deserialising back into objects. In fact, the dot serves as a degenerate dimension, in database speak.  The dot is arbitrarily chosen from my part ( as are the composition identifiers A for Address, P1 for Phonenumber1, P2  for Phonenumber2  ). It might as well have been an underscore or whatever.  But a dot is fine and it&#8217;s use within attribute names does seem to pass inspection on validity.
</p>
<p>
Now everything is in place for generating very compact XML and an easy deserialisation into complex types . But&#8230; ( oh yes, there&#8217;s a but )&#8230; each attribute within an XML tag must be unique.  There&#8217;s always a way to work around this of course, but in the end the easiest solution is to introduce an extra property ( which will not be serialized of course ) within classes that will participate in data-transport. We will name this property <b><i>SequenceID</i></b> (but you can pick another name if you like to).
</p>
<p>
On a note:  I for my self allways add a property SequenceID to my domain classes.  On another level, it allows me for example to use this property for binding in XAML to a SortDescription. In that way I only have to manage the SequenceID of my classes in code behind, when sorting is involved. Binding will do the rest.
</p>
<p>
OK, so far the theory. But will this all work ?  When I tried this out, I found it surprisingly easy in combination with XML litterals in VB. You have noticed the lack of underscores amongst other things. The code is written in VB 11 ( Visual Studio 2012 ).
</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="vbnet"><thead><tr><td colspan="2"  class="head">vb.net</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
</pre></td><td class="de1"><pre class="de1"><span class="kw1">Public</span> <span class="kw1">Class</span> Person
&nbsp; &nbsp; <span class="kw1">Public</span> <span class="kw1">Property</span> ID <span class="kw1">As</span> <span class="kw2">String</span>
&nbsp; &nbsp; <span class="kw1">Public</span> <span class="kw1">Property</span> FirstName <span class="kw1">As</span> <span class="kw2">String</span>
&nbsp; &nbsp; <span class="kw1">Public</span> <span class="kw1">Property</span> LastName <span class="kw1">As</span> <span class="kw2">String</span>
&nbsp; &nbsp; <span class="kw1">Public</span> <span class="kw1">Property</span> Age <span class="kw1">As</span> <span class="kw2">Integer</span>
&nbsp; &nbsp; <span class="kw1">Public</span> Address <span class="kw1">As</span> Address
&nbsp; &nbsp; <span class="kw1">Public</span> PhoneNumbers <span class="kw1">As</span> IEnumerable<span class="br0">&#40;</span><span class="kw1">Of</span> PhoneNumber<span class="br0">&#41;</span>
&nbsp; &nbsp; <span class="kw1">Public</span> <span class="kw1">Property</span> SequenceID <span class="kw1">As</span> <span class="kw2">Integer</span>
&nbsp;
&nbsp; &nbsp; <span class="kw1">Public</span> <span class="kw1">ReadOnly</span> <span class="kw1">Property</span> AsXML <span class="kw1">As</span> XElement
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">Get</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">Return</span> <span class="sy0">&lt;</span>Person FirstName<span class="sy0">=&lt;%=</span> FirstName <span class="sy0">%&gt;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;LastName<span class="sy0">=&lt;%=</span> LastName <span class="sy0">%&gt;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;Age<span class="sy0">=&lt;%=</span> Age<span class="sy0">.</span><span class="me1">ToString</span> <span class="sy0">%&gt;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;A<span class="sy0">.</span><span class="me1">Street</span><span class="sy0">=&lt;%=</span> Address<span class="sy0">.</span><span class="me1">Street</span> <span class="sy0">%&gt;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;A<span class="sy0">.</span><span class="me1">City</span><span class="sy0">=&lt;%=</span> Address<span class="sy0">.</span><span class="me1">City</span> <span class="sy0">%&gt;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;A<span class="sy0">.</span><span class="me1">Code</span><span class="sy0">=&lt;%=</span> Address<span class="sy0">.</span><span class="me1">Code</span> <span class="sy0">%&gt;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;A<span class="sy0">.</span><span class="me1">State</span><span class="sy0">=&lt;%=</span> Address<span class="sy0">.</span><span class="me1">State</span> <span class="sy0">%&gt;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span class="sy0">&lt;%=</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span class="kw5">From</span> nbr <span class="kw1">In</span> PhoneNumbers
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span class="kw1">Select</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span class="kw1">New</span> XAttribute<span class="br0">&#40;</span><span class="st0">&quot;P&quot;</span> <span class="sy0">&amp;</span> nbr<span class="sy0">.</span><span class="me1">SequenceID</span> <span class="sy0">&amp;</span> <span class="st0">&quot;.Type&quot;</span>, nbr<span class="sy0">.</span><span class="me1">Type</span><span class="br0">&#41;</span>,
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span class="kw1">New</span> XAttribute<span class="br0">&#40;</span><span class="st0">&quot;P&quot;</span> <span class="sy0">&amp;</span> nbr<span class="sy0">.</span><span class="me1">SequenceID</span> <span class="sy0">&amp;</span> <span class="st0">&quot;.Value&quot;</span>, nbr<span class="sy0">.</span><span class="me1">Value</span><span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span class="br0">&#125;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span class="sy0">%&gt;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span class="sy0">/&gt;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">End</span> <span class="kw1">Get</span>
&nbsp; &nbsp; <span class="kw1">End</span> <span class="kw1">Property</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">Public Class Person
    Public Property ID As String
    Public Property FirstName As String
    Public Property LastName As String
    Public Property Age As Integer
    Public Address As Address
    Public PhoneNumbers As IEnumerable(Of PhoneNumber)
    Public Property SequenceID As Integer

    Public ReadOnly Property AsXML As XElement
        Get
            Return &lt;Person FirstName=&lt;%= FirstName %&gt;
                       LastName=&lt;%= LastName %&gt;
                       Age=&lt;%= Age.ToString %&gt;
                       A.Street=&lt;%= Address.Street %&gt;
                       A.City=&lt;%= Address.City %&gt;
                       A.Code=&lt;%= Address.Code %&gt;
                       A.State=&lt;%= Address.State %&gt;
                       &lt;%=
                           From nbr In PhoneNumbers
                           Select {
                           New XAttribute("P" &amp; nbr.SequenceID &amp; ".Type", nbr.Type),
                           New XAttribute("P" &amp; nbr.SequenceID &amp; ".Value", nbr.Value)
                           }
                       %&gt;
                   /&gt;
        End Get
    End Property</pre></div></div>

<p>
As for the FromXML method, here we do pay the price for denormalization. We have to get the XML content back into normalized form in order to deserialize back into an object. We can do this in LINQ by means of a self join or a groupby. Moreover, we will have to do this on an element of the array resulting from a String.Split function. It will take a second self join though to be able to fill the newly created object. But that’s not all: we need the sequenceid to be able to serialize. Easy enough with a direct invoke of a lambda. But we cannot do that on the second self join, because it will not get the same result as what a ROW_NUMBER function would do in TSQL. So we have to iterate through the collection again to create that sequenceid.  OK, this maybe is 1 step too much. We could go for the serialization of this SequenceID property also. Then again, that would add to the size of the generated XML, and it would not add to the content, since this property only serves to create unique attributenames. Again : denormalization also has drawbacks.
</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="vbnet"><thead><tr><td colspan="2"  class="head">vb.net</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
</pre></td><td class="de1"><pre class="de1"><span class="kw1">Public</span> <span class="kw1">Shared</span> <span class="kw1">ReadOnly</span> <span class="kw1">Property</span> FromXML<span class="br0">&#40;</span>xml <span class="kw1">As</span> XElement<span class="br0">&#41;</span> <span class="kw1">As</span> Person
&nbsp; &nbsp;<span class="kw1">Get</span>
&nbsp; &nbsp; &nbsp; <span class="kw1">Dim</span> phonenumberdata <span class="sy0">=</span> <span class="br0">&#40;</span><span class="kw5">From</span> att <span class="kw1">In</span> xml<span class="sy0">.</span><span class="me1">Attributes</span><span class="sy0">.</span><span class="kw5">Where</span><span class="br0">&#40;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span class="kw1">Function</span><span class="br0">&#40;</span>attr<span class="br0">&#41;</span> attr<span class="sy0">.</span><span class="me1">Name</span><span class="sy0">.</span><span class="me1">LocalName</span><span class="sy0">.</span><span class="kw7">Split</span><span class="br0">&#40;</span><span class="st0">&quot;.&quot;</span>c<span class="br0">&#41;</span><span class="br0">&#40;</span><span class="nu0">0</span><span class="br0">&#41;</span><span class="sy0">.</span><span class="me1">Contains</span><span class="br0">&#40;</span><span class="st0">&quot;P&quot;</span><span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span class="br0">&#41;</span><span class="sy0">.</span><span class="me1">GroupBy</span><span class="br0">&#40;</span><span class="kw1">Function</span><span class="br0">&#40;</span>a<span class="br0">&#41;</span> <span class="br0">&#123;</span>a<span class="sy0">.</span><span class="me1">Name</span><span class="sy0">.</span><span class="me1">LocalName</span><span class="sy0">.</span><span class="kw7">Split</span><span class="br0">&#40;</span><span class="st0">&quot;.&quot;</span>c<span class="br0">&#41;</span><span class="br0">&#40;</span><span class="nu0">0</span><span class="br0">&#41;</span>,
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; a<span class="sy0">.</span><span class="me1">Name</span><span class="sy0">.</span><span class="me1">LocalName</span><span class="sy0">.</span><span class="kw7">Split</span><span class="br0">&#40;</span><span class="st0">&quot;.&quot;</span>c<span class="br0">&#41;</span><span class="br0">&#40;</span><span class="nu0">1</span><span class="br0">&#41;</span>,
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; a<span class="sy0">.</span><span class="me1">Value</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span class="br0">&#125;</span><span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span class="kw1">Select</span> att<span class="sy0">.</span><span class="me1">Key</span><span class="br0">&#41;</span><span class="sy0">.</span><span class="me1">ToList</span>
&nbsp; &nbsp; &nbsp; <span class="kw1">Dim</span> phonenumbers <span class="sy0">=</span> <span class="br0">&#40;</span><span class="kw5">From</span> item <span class="kw1">In</span> phonenumberdata
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Join item2 <span class="kw1">In</span> phonenumberdata
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">On</span> item<span class="br0">&#40;</span><span class="nu0">0</span><span class="br0">&#41;</span> Equals item2<span class="br0">&#40;</span><span class="nu0">0</span><span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw5">Where</span> item<span class="br0">&#40;</span><span class="nu0">1</span><span class="br0">&#41;</span> <span class="sy0">&lt;&gt;</span> item2<span class="br0">&#40;</span><span class="nu0">2</span><span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">Select</span> <span class="br0">&#123;</span>item<span class="br0">&#40;</span><span class="nu0">1</span><span class="br0">&#41;</span>, item<span class="br0">&#40;</span><span class="nu0">2</span><span class="br0">&#41;</span>, item2<span class="br0">&#40;</span><span class="nu0">1</span><span class="br0">&#41;</span>, item2<span class="br0">&#40;</span><span class="nu0">2</span><span class="br0">&#41;</span><span class="br0">&#125;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span class="br0">&#41;</span><span class="sy0">.</span><span class="kw5">Where</span><span class="br0">&#40;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span class="kw1">Function</span><span class="br0">&#40;</span>o<span class="br0">&#41;</span> o<span class="br0">&#40;</span><span class="nu0">0</span><span class="br0">&#41;</span> <span class="sy0">=</span> <span class="st0">&quot;Type&quot;</span> <span class="kw1">And</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;o<span class="br0">&#40;</span><span class="nu0">0</span><span class="br0">&#41;</span> <span class="sy0">&lt;&gt;</span> o<span class="br0">&#40;</span><span class="nu0">2</span><span class="br0">&#41;</span><span class="br0">&#41;</span><span class="sy0">.</span><span class="me1">ToList</span>
&nbsp; &nbsp; &nbsp; <span class="kw1">Dim</span> addressprops <span class="sy0">=</span> xml<span class="sy0">.</span><span class="me1">Attributes</span><span class="sy0">.</span><span class="kw5">Where</span><span class="br0">&#40;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">Function</span><span class="br0">&#40;</span>a<span class="br0">&#41;</span> a<span class="sy0">.</span><span class="me1">Name</span><span class="sy0">.</span><span class="me1">LocalName</span><span class="sy0">.</span><span class="kw7">Split</span><span class="br0">&#40;</span><span class="st0">&quot;.&quot;</span>c<span class="br0">&#41;</span><span class="br0">&#40;</span><span class="nu0">0</span><span class="br0">&#41;</span> <span class="sy0">=</span> <span class="st0">&quot;A&quot;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#41;</span><span class="sy0">.</span><span class="kw1">Select</span><span class="br0">&#40;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">Function</span><span class="br0">&#40;</span>addr<span class="br0">&#41;</span> addr<span class="sy0">.</span><span class="me1">Value</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span class="br0">&#41;</span><span class="sy0">.</span><span class="me1">ToArray</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">Dim</span> ix <span class="sy0">=</span> <span class="nu0">0</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">Dim</span> p <span class="kw1">As</span> <span class="kw1">New</span> Person <span class="kw1">With</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span class="sy0">.</span><span class="me1">FirstName</span> <span class="sy0">=</span> xml<span class="sy0">.</span>@FirstName,
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span class="sy0">.</span><span class="me1">LastName</span> <span class="sy0">=</span> xml<span class="sy0">.</span>@LastName,
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span class="sy0">.</span><span class="me1">Age</span> <span class="sy0">=</span> <span class="kw4">CInt</span><span class="br0">&#40;</span>xml<span class="sy0">.</span>@Age<span class="br0">&#41;</span>,
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span class="sy0">.</span><span class="me1">Address</span> <span class="sy0">=</span> <span class="kw1">New</span> Address <span class="kw1">With</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="sy0">.</span><span class="me1">Street</span> <span class="sy0">=</span> addressprops<span class="br0">&#40;</span><span class="nu0">0</span><span class="br0">&#41;</span>,
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="sy0">.</span><span class="me1">City</span> <span class="sy0">=</span> addressprops<span class="br0">&#40;</span><span class="nu0">1</span><span class="br0">&#41;</span>,
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="sy0">.</span><span class="me1">Code</span> <span class="sy0">=</span> addressprops<span class="br0">&#40;</span><span class="nu0">2</span><span class="br0">&#41;</span>,
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="sy0">.</span><span class="me1">State</span> <span class="sy0">=</span> addressprops<span class="br0">&#40;</span><span class="nu0">3</span><span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span class="br0">&#125;</span>,
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span class="sy0">.</span><span class="me1">PhoneNumbers</span> <span class="sy0">=</span> <span class="br0">&#40;</span><span class="kw5">From</span> item <span class="kw1">In</span> phonenumbers
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">Let</span> i <span class="sy0">=</span> <span class="kw1">Function</span><span class="br0">&#40;</span><span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;ix <span class="sy0">+=</span> <span class="nu0">1</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span class="kw1">Return</span> ix
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">End</span> <span class="kw1">Function</span><span class="sy0">.</span><span class="me1">Invoke</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">Select</span> <span class="kw1">New</span> PhoneNumber <span class="kw1">With</span> <span class="br0">&#123;</span>
<span class="sy0">.</span><span class="me1">SequenceID</span> <span class="sy0">=</span> i,
<span class="sy0">.</span><span class="me1">Type</span> <span class="sy0">=</span> item<span class="br0">&#40;</span><span class="nu0">1</span><span class="br0">&#41;</span>, 
<span class="sy0">.</span><span class="me1">Value</span> <span class="sy0">=</span> item<span class="br0">&#40;</span><span class="nu0">3</span><span class="br0">&#41;</span>
<span class="br0">&#125;</span><span class="br0">&#41;</span><span class="sy0">.</span><span class="me1">ToList</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">Return</span> p
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">End</span> <span class="kw1">Get</span>
&nbsp; &nbsp; <span class="kw1">End</span> <span class="kw1">Property</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">Public Shared ReadOnly Property FromXML(xml As XElement) As Person
   Get
      Dim phonenumberdata = (From att In xml.Attributes.Where(
                                     Function(attr) attr.Name.LocalName.Split("."c)(0).Contains("P")
                                     ).GroupBy(Function(a) {a.Name.LocalName.Split("."c)(0),
                                                            a.Name.LocalName.Split("."c)(1),
                                                            a.Value
                                                                             })
                             Select att.Key).ToList
      Dim phonenumbers = (From item In phonenumberdata
                          Join item2 In phonenumberdata
                          On item(0) Equals item2(0)
                          Where item(1) &lt;&gt; item2(2)
                          Select {item(1), item(2), item2(1), item2(2)}
                         ).Where(
                                 Function(o) o(0) = "Type" And
                                             o(0) &lt;&gt; o(2)).ToList
      Dim addressprops = xml.Attributes.Where(
                                Function(a) a.Name.LocalName.Split("."c)(0) = "A"
                                ).Select(
                                      Function(addr) addr.Value
                                         ).ToArray
            Dim ix = 0
            Dim p As New Person With {
                                   .FirstName = xml.@FirstName,
                                   .LastName = xml.@LastName,
                                   .Age = CInt(xml.@Age),
                                   .Address = New Address With {
                                                  .Street = addressprops(0),
                                                  .City = addressprops(1),
                                                  .Code = addressprops(2),
                                                  .State = addressprops(3)
                                                               },
                                   .PhoneNumbers = (From item In phonenumbers
                                                    Let i = Function()
                                                               ix += 1
                                                               Return ix
                                                            End Function.Invoke
                                                    Select New PhoneNumber With {
.SequenceID = i,
.Type = item(1), 
.Value = item(3)
}).ToList
                                    }
            Return p
        End Get
    End Property</pre></div></div>

<p>
There’s one extra which is not related to XML serialization but which I do want to mention here. We have seen the power of XML literals in VB. Well, this feature can very handily be used for overrides of ToString functions. Which we will do here.
</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="vbnet"><thead><tr><td colspan="2"  class="head">vb.net</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
</pre></td><td class="de1"><pre class="de1">&nbsp;<span class="kw1">Public</span> <span class="kw1">Overrides</span> <span class="kw1">Function</span> ToString<span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="kw1">As</span> <span class="kw2">String</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">Return</span> <span class="sy0">&lt;</span>String<span class="sy0">&gt;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;FirstName : <span class="sy0">&lt;%=</span> FirstName <span class="sy0">%&gt;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;LastName &nbsp;: <span class="sy0">&lt;%=</span> LastName <span class="sy0">%&gt;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;Age &nbsp; &nbsp; &nbsp; : <span class="sy0">&lt;%=</span> Age <span class="sy0">%&gt;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;Address &nbsp; &nbsp; 
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;Street &nbsp; &nbsp;: <span class="sy0">&lt;%=</span> Address<span class="sy0">.</span><span class="me1">Street</span> <span class="sy0">%&gt;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;City &nbsp; &nbsp; &nbsp;: <span class="sy0">&lt;%=</span> Address<span class="sy0">.</span><span class="me1">City</span> <span class="sy0">%&gt;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;Code &nbsp; &nbsp; &nbsp;: <span class="sy0">&lt;%=</span> Address<span class="sy0">.</span><span class="me1">Code</span> <span class="sy0">%&gt;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;State &nbsp; &nbsp; : <span class="sy0">&lt;%=</span> Address<span class="sy0">.</span><span class="me1">State</span> <span class="sy0">%&gt;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;Phonenumbers<span class="sy0">&lt;%=</span> Environment<span class="sy0">.</span><span class="me1">NewLine</span> <span class="sy0">%&gt;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span class="sy0">&lt;%=</span> <span class="kw5">From</span> nbr <span class="kw1">In</span> PhoneNumbers
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span class="kw1">Select</span> <span class="st0">&quot; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;</span> <span class="sy0">&amp;</span> nbr<span class="sy0">.</span><span class="me1">Type</span> <span class="sy0">&amp;</span> <span class="st0">&quot; : &quot;</span> <span class="sy0">&amp;</span> nbr<span class="sy0">.</span><span class="me1">Value</span> <span class="sy0">&amp;</span> Environment<span class="sy0">.</span><span class="me1">NewLine</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span class="sy0">%&gt;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span class="sy0">&lt;/</span>String<span class="sy0">&gt;.</span><span class="me1">Value</span>
&nbsp; &nbsp; <span class="kw1">End</span> <span class="kw1">Function</span>
&nbsp;
<span class="kw1">End</span> <span class="kw1">Class</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse"> Public Overrides Function ToString() As String
        Return &lt;String&gt;
                   FirstName : &lt;%= FirstName %&gt;
                   LastName  : &lt;%= LastName %&gt;
                   Age       : &lt;%= Age %&gt;
                   Address     
                   Street    : &lt;%= Address.Street %&gt;
                   City      : &lt;%= Address.City %&gt;
                   Code      : &lt;%= Address.Code %&gt;
                   State     : &lt;%= Address.State %&gt;
                   Phonenumbers&lt;%= Environment.NewLine %&gt;
                   &lt;%= From nbr In PhoneNumbers
                       Select "                   " &amp; nbr.Type &amp; " : " &amp; nbr.Value &amp; Environment.NewLine
                   %&gt;
               &lt;/String&gt;.Value
    End Function

End Class</pre></div></div>

<p>
Now we can consume this class to serialize and deserialize  instances into and from denormalized XML, which is as compact as XML can possibly get.
</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="vbnet"><thead><tr><td colspan="2"  class="head">vb.net</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
</pre></td><td class="de1"><pre class="de1"><span class="kw1">Dim</span> aPerson <span class="kw1">As</span> <span class="kw1">New</span> Person _
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span class="kw1">With</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="sy0">.</span><span class="me1">FirstName</span> <span class="sy0">=</span> <span class="st0">&quot;John&quot;</span>,
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="sy0">.</span><span class="me1">LastName</span> <span class="sy0">=</span> <span class="st0">&quot;Smith&quot;</span>,
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="sy0">.</span><span class="me1">Age</span> <span class="sy0">=</span> <span class="nu0">25</span>,
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="sy0">.</span><span class="me1">ID</span> <span class="sy0">=</span> <span class="st0">&quot;106&quot;</span>,
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="sy0">.</span><span class="me1">SequenceID</span> <span class="sy0">=</span> <span class="nu0">1</span>,
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="sy0">.</span><span class="me1">Address</span> <span class="sy0">=</span> <span class="kw1">New</span> Address <span class="kw1">With</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="sy0">.</span><span class="me1">Street</span> <span class="sy0">=</span> <span class="st0">&quot;21 2nd Street&quot;</span>,
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="sy0">.</span><span class="me1">City</span> <span class="sy0">=</span> <span class="st0">&quot;New York&quot;</span>,
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="sy0">.</span><span class="me1">State</span> <span class="sy0">=</span> <span class="st0">&quot;NY&quot;</span>,
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="sy0">.</span><span class="me1">Code</span> <span class="sy0">=</span> <span class="st0">&quot;10021&quot;</span>,
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="sy0">.</span><span class="me1">SequenceID</span> <span class="sy0">=</span> <span class="nu0">1</span><span class="br0">&#125;</span>,
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="sy0">.</span><span class="me1">PhoneNumbers</span> <span class="sy0">=</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span class="kw1">New</span> PhoneNumber <span class="kw1">With</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="sy0">.</span><span class="me1">Type</span> <span class="sy0">=</span> <span class="st0">&quot;home&quot;</span>, 
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="sy0">.</span><span class="me1">Value</span> <span class="sy0">=</span> <span class="st0">&quot;212 555-1234&quot;</span>, 
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="sy0">.</span><span class="me1">SequenceID</span> <span class="sy0">=</span> <span class="nu0">1</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span>,
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span class="kw1">New</span> PhoneNumber <span class="kw1">With</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="sy0">.</span><span class="me1">Type</span> <span class="sy0">=</span> <span class="st0">&quot;fax&quot;</span>, 
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="sy0">.</span><span class="me1">Value</span> <span class="sy0">=</span> <span class="st0">&quot;646 555-4567&quot;</span>, 
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="sy0">.</span><span class="me1">SequenceID</span> <span class="sy0">=</span> <span class="nu0">2</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span><span class="sy0">.</span><span class="me1">ToList</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Console<span class="sy0">.</span><span class="me1">WriteLine</span><span class="br0">&#40;</span>aPerson<span class="sy0">.</span><span class="me1">AsXML</span><span class="sy0">.</span><span class="me1">ToString</span><span class="br0">&#41;</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; aPerson <span class="sy0">=</span> Person<span class="sy0">.</span><span class="me1">FromXML</span><span class="br0">&#40;</span><span class="sy0">&lt;</span>person FirstName<span class="sy0">=</span><span class="st0">&quot;John&quot;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;LastName<span class="sy0">=</span><span class="st0">&quot;Smith&quot;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;Age<span class="sy0">=</span><span class="st0">&quot;25&quot;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;A<span class="sy0">.</span><span class="me1">Street</span><span class="sy0">=</span><span class="st0">&quot;21 2nd Street&quot;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;A<span class="sy0">.</span><span class="me1">City</span><span class="sy0">=</span><span class="st0">&quot;New York&quot;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;A<span class="sy0">.</span><span class="me1">Code</span><span class="sy0">=</span><span class="st0">&quot;10021&quot;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;A<span class="sy0">.</span><span class="me1">State</span><span class="sy0">=</span><span class="st0">&quot;NY&quot;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;P1<span class="sy0">.</span><span class="me1">Type</span><span class="sy0">=</span><span class="st0">&quot;home&quot;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;P1<span class="sy0">.</span><span class="me1">Value</span><span class="sy0">=</span><span class="st0">&quot;212 555-1234&quot;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;P2<span class="sy0">.</span><span class="me1">Type</span><span class="sy0">=</span><span class="st0">&quot;fax&quot;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;P2<span class="sy0">.</span><span class="me1">Value</span><span class="sy0">=</span><span class="st0">&quot;646 555-4567&quot;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;P3<span class="sy0">.</span><span class="me1">Type</span><span class="sy0">=</span><span class="st0">&quot;work&quot;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;P3<span class="sy0">.</span><span class="me1">Value</span><span class="sy0">=</span><span class="st0">&quot;646555-4566&quot;</span><span class="sy0">/&gt;</span><span class="br0">&#41;</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Console<span class="sy0">.</span><span class="me1">WriteLine</span><span class="br0">&#40;</span>aPerson<span class="sy0">.</span><span class="me1">ToString</span><span class="br0">&#41;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">Dim aPerson As New Person _
                       With {
                                .FirstName = "John",
                                .LastName = "Smith",
                                .Age = 25,
                                .ID = "106",
                                .SequenceID = 1,
                                .Address = New Address With {
                                                                .Street = "21 2nd Street",
                                                                .City = "New York",
                                                                .State = "NY",
                                                                .Code = "10021",
                                                                .SequenceID = 1},
                                .PhoneNumbers = {
                                           New PhoneNumber With {
                                                          .Type = "home", 
                                                          .Value = "212 555-1234", 
                                                          .SequenceID = 1
                                                          },
                                           New PhoneNumber With {
                                                          .Type = "fax", 
                                                          .Value = "646 555-4567", 
                                                          .SequenceID = 2
                                                          }
                                                }.ToList
                            }

            Console.WriteLine(aPerson.AsXML.ToString)

            aPerson = Person.FromXML(&lt;person FirstName="John"
                                         LastName="Smith"
                                         Age="25"
                                         A.Street="21 2nd Street"
                                         A.City="New York"
                                         A.Code="10021"
                                         A.State="NY"
                                         P1.Type="home"
                                         P1.Value="212 555-1234"
                                         P2.Type="fax"
                                         P2.Value="646 555-4567"
                                         P3.Type="work"
                                         P3.Value="646555-4566"/&gt;)

            Console.WriteLine(aPerson.ToString)</pre></div></div>

<p>
And you know what&#8217;s the nicest thing of it all? Excel can handle this kind of XML without any problem at all. Of course, you will have a worksheet with 1 row and a hell of lot of columns.</p>
]]></content>
			<link rel="replies" type="text/html" href="/index.php/desktopdev/mstech/vbnet/boost-your-datatransport-with-xml/#comments" thr:count="2"/>
		<link rel="replies" type="application/atom+xml" href="/index.php/desktopdev/mstech/vbnet/boost-your-datatransport-with-xml/feed/atom/" thr:count="2"/>
		<thr:total>2</thr:total>
		</entry>
		<entry>
		<author>
			<name>Ted Krueger (onpnt)</name>
					</author>
		<title type="html"><![CDATA[Reflector to cost us now]]></title>
		<link rel="alternate" type="text/html" href="/index.php/desktopdev/mstech/reflector-to-cost-us-now-1/" />
		<id>/index.php/2011/02/reflector-to-cost-us-now-1/</id>
		<updated>2011-02-08T00:52:00Z</updated>
		<published>2011-02-08T00:52:00Z</published>
		<category scheme="/" term="Access Forms and Reports" /><category scheme="/" term="C#" /><category scheme="/" term="General Purpose Languages" /><category scheme="/" term="Microsoft Technologies" /><category scheme="/" term="VB.NET" />		<summary type="html"><![CDATA[Red Gate is a company that is widely known as a community company.  I have yet to meet an individual that had anything bad to say about them, even if there are occasional complaints, whines or whatnot.  Overall, the company really is one that we as a co&#8230;]]></summary>
		<content type="html" xml:base="/index.php/desktopdev/mstech/reflector-to-cost-us-now-1/"><![CDATA[<p>Red Gate is a company that is widely known as a community company.  I have yet to meet an individual that had anything bad to say about them, even if there are occasional complaints, whines or whatnot.  Overall, the company really is one that we as a community are proud to plug based on our experiences with them.  Tools like SQL Prompt, SQL Compare, SQL HyperBac and even the bundle, SQL Toolbelt, are tools that have helped the SQL Server professional push forward more efficiently by doing more with what they have available. </p>
<p>There is another product that is under Red Gate’s ownership called <a href="http://www.red-gate.com/products/dotnet-development/reflector/">Reflector</a>.   Reflector is a tool that allows you to decompile almost anything .NET.  Essentially, you can view the code that is behind .NET Assemblies.  The really cool thing is you can plug an executable in and view the code as well.</p>
<p>Here’s a view of a program I wrote recently for an article based on troubleshooting ASYNC_NETWORK_IO</p>
<p><div class="image_block"><a href="/media/blogs/DesktopDev/.png?mtime=1297132899"><img src="/wp-content/uploads/blogs/DesktopDev/.png?mtime=1297132899" alt="" width="628" height="187" /></a></div>
</p>
<p>As you can see, I simply browsed to the executable that was built from the solution and expanded the methods and there you go.  All of my code for that test is right there to analyze, troubleshoot or recreate in an attempt to learn from it. </p>
<p>So why is a DBA writing about this tool?  As a DBA that believes in knowing a developers task as much as the task of being a DBA, I think it is critical to do just that.  Also, it is a great way to recover lost code.  Mind you; all of this is while minding the law and copyrights of other vendor and developer’s code.</p>
<p>There is an underlying reason for this article being written.  Lutz Roeder was the creator of Reflector.  Years ago when I found the free tool I was absolutely amazed at the real value in it for any person that works in the .NET and Microsoft camp.  Around 2008, Lutz decided it was time to move on and reached an agreement with Red Gate to take over.  Red Gate left Reflector available as a free version while adding a professional version allowing you to debug assemblies.  That is a truly valued addition when you think about the applicable use of it.</p>
<p>Well, <a href="http://www.red-gate.com/products/dotnet-development/reflector/announcement-faq">Red Gate decided</a> that after version 7, Reflector will now cost $35.  Yes, you read that correctly, and there will no longer be a free version of Reflector.</p>
<p>I see both sides to this announcement.  One, Red Gate is a business entity and in order to manage and put resources into building Reflector along with tapping the power it may be able to grow into, they must pay for those resources.  On the other hand, is $35 a lot to some people? Yes, of course it is.  I don’t want to pay it as much as the next person.  Will I?  I’m not even sure about that just yet.  Depends on if the use of Reflector will be of value to me at the time I go calling on it again.</p>
<p>The point I’m trying to make is: Red Gate is a business and as such, is out to make a return on their products.  Business decisions are made in the best interest of the business.  Are those business decisions always right?</p>
<div class="image_block">
<div class="image_block"><a href="/media/blogs/DesktopDev/-1.png?mtime=1297132900"><img src="/wp-content/uploads/blogs/DesktopDev/-1.png?mtime=1297132900" alt="" width="163" height="89" align="left" /></a></div>
<p><a href="/media/blogs/DesktopDev/-1.png?mtime=1297132900"></a></div>
<p>Was the Renault Alliance a good car to manufacture by American Motors?  Who knows?   Maybe if they didn’t go that route they would still be around though.</p>
<div class="image_block"><a href="/media/blogs/DesktopDev/-1.png?mtime=1297132900"></a></div>
<div class="image_block"><a href="/media/blogs/DesktopDev/-1.png?mtime=1297132900"></a></div>
<p> </p>
<p> <a href="/media/blogs/DesktopDev/-2.png?mtime=1297132900"><img src="/wp-content/uploads/blogs/DesktopDev/-2.png?mtime=1297132900" alt="" width="142" height="107" align="left" /></a></p>
<p class="image_block">Do you think you get what you pay for in a Lamborghini and the cost goes to making the next one even better?  Yes, more than likely that is a good call. </p>
<p class="image_block"> </p>
<p>I do know that Red Gate is respected for making some good decisions and I’ll stand behind them on this for now.  I may put too much trust in them that the product will not jump to $335 next year or in five years but I do put that trust there, given the relationship (myself as part of the community) have built between Red Gate and the Community.</p>
]]></content>
			<link rel="replies" type="text/html" href="/index.php/desktopdev/mstech/reflector-to-cost-us-now-1/#comments" thr:count="9"/>
		<link rel="replies" type="application/atom+xml" href="/index.php/desktopdev/mstech/reflector-to-cost-us-now-1/feed/atom/" thr:count="9"/>
		<thr:total>9</thr:total>
		</entry>
		<entry>
		<author>
			<name>Eli Weinstock-Herman (tarwn)</name>
					</author>
		<title type="html"><![CDATA[IF and IIF in VB.Net]]></title>
		<link rel="alternate" type="text/html" href="/index.php/desktopdev/mstech/vbnet/if-and-iif/" />
		<id>/index.php/2010/06/if-and-iif/</id>
		<updated>2010-06-23T11:54:34Z</updated>
		<published>2010-06-23T11:54:34Z</published>
		<category scheme="/" term="VB.NET" />		<summary type="html"><![CDATA[In continuing Chrissie&#8217;s recent example of helping to point out minor (yet critical) gotchas, I now present the guarantor of a few Null Reference exceptions, If() and IIf(). Both are designed as a way to provide VB.Net with an inline If, similar to the ternary operator found in C# and many other languages &#60;condition&#62;?&#60;true-action&#62;:&#60;false-action&#62;. If() [&#8230;]]]></summary>
		<content type="html" xml:base="/index.php/desktopdev/mstech/vbnet/if-and-iif/"><![CDATA[<p>In continuing Chrissie&#8217;s recent example of helping to point out minor (yet critical) gotchas, I now present the guarantor of a few Null Reference exceptions, <a href="http://msdn.microsoft.com/en-us/library/bb513985.aspx" title="MSDN entry for the IF Operator" target="_blank">If()</a> and <a href="http://msdn.microsoft.com/en-us/library/microsoft.visualbasic.interaction.iif.aspx" title="MSDN entry for the IIF Function" target="_blank">IIf()</a>.</p>
<p>Both are designed as a way to provide VB.Net with an inline If, similar to the ternary operator found in C# and many other languages <code class="codespan">&lt;condition&gt;?&lt;true-action&gt;:&lt;false-action&gt;</code>. If() and IIF() have the same signature:<code class="codespan"> If(&lt;conditional&gt;,&lt;true-object&gt;,&lt;false-object&gt;)</code> and <code class="codespan">IIF(&lt;conditional&gt;,&lt;true-object&gt;,&lt;false-object&gt;)</code></p>
<p>The critical difference between IIF (available from VS 2002 forward) and IF (available in VS 2005 forward) is that IIF is a function and evaluates all of its arguments prior to returning a value, while IF is an operator that executes like a short-circuiting conditional, only evaluating the true or false argument depending on the value of the conditional. </p>
<p>Why is this important?</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="vbnet"><thead><tr><td colspan="2"  class="head">vb.net</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
</pre></td><td class="de1"><pre class="de1"><span class="kw1">Dim</span> myObject <span class="kw1">as</span> SomeObject
&nbsp;
<span class="kw1">Dim</span> strTestOne <span class="sy0">=</span> <span class="kw1">If</span><span class="br0">&#40;</span>myObject <span class="kw1">Is</span> <span class="kw1">Nothing</span>,<span class="st0">&quot;Doesn't Exist&quot;</span>,myObject<span class="sy0">.</span><span class="me1">SomeProperty</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#41;</span>
&nbsp;
<span class="co1">' strTestOne now has the value &quot;Doesn't Exist&quot;</span>
&nbsp;
<span class="kw1">Dim</span> strTestTwo <span class="sy0">=</span> <span class="kw7">IIf</span><span class="br0">&#40;</span>myObject <span class="kw1">Is</span> <span class="kw1">Nothing</span>,<span class="st0">&quot;Doesn't Exist&quot;</span>,myObject<span class="sy0">.</span><span class="me1">SomeProperty</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#41;</span>
&nbsp;
<span class="co1">' and this one throws a null reference because it evaluates myObject.SomeProperty prior to the conditional</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">Dim myObject as SomeObject

Dim strTestOne = If(myObject Is Nothing,"Doesn't Exist",myObject.SomeProperty())

' strTestOne now has the value "Doesn't Exist"

Dim strTestTwo = IIf(myObject Is Nothing,"Doesn't Exist",myObject.SomeProperty())

' and this one throws a null reference because it evaluates myObject.SomeProperty prior to the conditional</pre></div></div>

<p>So make sure you select the right function for your needs. In this case, selecting the wrong function can actually have the exact consequence you were trying to avoid (Null Ref).</p>
<p>Note: Not only a whole post without pictures, but also one that is less than 10 pages. And the sky didn&#8217;t start falling.</p>
]]></content>
			<link rel="replies" type="text/html" href="/index.php/desktopdev/mstech/vbnet/if-and-iif/#comments" thr:count="1"/>
		<link rel="replies" type="application/atom+xml" href="/index.php/desktopdev/mstech/vbnet/if-and-iif/feed/atom/" thr:count="1"/>
		<thr:total>1</thr:total>
		</entry>
		<entry>
		<author>
			<name>SQLDenis</name>
					</author>
		<title type="html"><![CDATA[Visual Studio 2010 and .NET Framework 4 Training Kit June 2010 Release Available]]></title>
		<link rel="alternate" type="text/html" href="/index.php/desktopdev/mstech/visual-studio-2010-and-net-framework-4-t/" />
		<id>/index.php/2010/06/visual-studio-2010-and-net-framework-4-t/</id>
		<updated>2010-06-20T13:05:32Z</updated>
		<published>2010-06-20T13:05:32Z</published>
		<category scheme="/" term="C#" /><category scheme="/" term="Microsoft Technologies" /><category scheme="/" term="VB.NET" /><category scheme="/" term=".net framework 4" /><category scheme="/" term="ado.net data services" /><category scheme="/" term="c#" /><category scheme="/" term="f#" /><category scheme="/" term="parallel extensions" /><category scheme="/" term="visual basic" /><category scheme="/" term="visual studio 2010" /><category scheme="/" term="wcf" /><category scheme="/" term="wpf" /><category scheme="/" term="wwf" />		<summary type="html"><![CDATA[Microsoft has made available for download the June 2010 Release of the Visual Studio 2010 and .NET Framework 4 Training Kit. The Visual Studio 2010 and .NET Framework 4 Training Kit includes presentations, hands-on labs, and demos. This content is designed to help you learn how to utilize the Visual Studio 2010 features and a [&#8230;]]]></summary>
		<content type="html" xml:base="/index.php/desktopdev/mstech/visual-studio-2010-and-net-framework-4-t/"><![CDATA[<p>Microsoft has made available for download the June 2010 Release of the Visual Studio 2010 and .NET Framework 4 Training Kit.</p>
<p>The Visual Studio 2010 and .NET Framework 4 Training Kit includes presentations, hands-on labs, and demos. This content is designed to help you learn how to utilize the Visual Studio 2010 features and a variety of framework technologies including:<br />
C# 4<br />
Visual Basic 10<br />
F#<br />
Parallel Extensions<br />
Windows Communication Foundation<br />
Windows Workflow<br />
Windows Presentation Foundation<br />
ASP.NET 4<br />
Windows 7<br />
Entity Framework<br />
ADO.NET Data Services<br />
Managed Extensibility Framework<br />
Visual Studio Team System</p>
<p>The size of the download file is 178.0 MB and you can download it here: http://www.microsoft.com/downloads/details.aspx?familyid=752CB725-969B-4732-A383-ED5740F02E93&amp;displaylang=en</p>
<p>Channel 9 also has a bunch of video available, you can find all 41 videos here: http://channel9.msdn.com/shows/10-4/</p>
]]></content>
			<link rel="replies" type="text/html" href="/index.php/desktopdev/mstech/visual-studio-2010-and-net-framework-4-t/#comments" thr:count="0"/>
		<link rel="replies" type="application/atom+xml" href="/index.php/desktopdev/mstech/visual-studio-2010-and-net-framework-4-t/feed/atom/" thr:count="0"/>
		<thr:total>0</thr:total>
		</entry>
		<entry>
		<author>
			<name>SQLDenis</name>
					</author>
		<title type="html"><![CDATA[Visual Studio 2010 and Microsoft .NET Framework 4 Available for download today]]></title>
		<link rel="alternate" type="text/html" href="/index.php/desktopdev/mstech/visual-studio-2010-and-microsoft-net-fra/" />
		<id>/index.php/2010/04/visual-studio-2010-and-microsoft-net-fra/</id>
		<updated>2010-04-12T11:55:29Z</updated>
		<published>2010-04-12T11:55:29Z</published>
		<category scheme="/" term="C#" /><category scheme="/" term="Microsoft Technologies" /><category scheme="/" term="VB.NET" /><category scheme="/" term="silverlight" /><category scheme="/" term="silverlight 4" /><category scheme="/" term="visual studio 2010" />		<summary type="html"><![CDATA[Visual Studio 2010 and Microsoft .NET Framework 4 will be available for download later today on MSDN. Right now it looks like the time that it will be available is 10 AM PDT. Now when it is available on MSDN don&#8217;t just download it from the first place you see it, check Top Downloads first [&#8230;]]]></summary>
		<content type="html" xml:base="/index.php/desktopdev/mstech/visual-studio-2010-and-microsoft-net-fra/"><![CDATA[<div><img src="/wp-content/uploads/blogs/DesktopDev//logo_vstudio.png" alt="" title="" width="155" height="23" /></div>
<p>Visual Studio 2010 and Microsoft .NET Framework 4 will be available for download later today on MSDN. Right now it looks like the time that it will be available is 10 AM PDT.</p>
<p>Now when it is available on MSDN don&#8217;t just download it from the first place you see it, check Top Downloads first ( http://msdn.microsoft.com/en-us/subscriptions/bb608344.aspx ) The top downloads page uses Akamai and the downloads are much faster than the regular MSDN downloads.</p>
<p>Microsoft also announced that SilverLight 4 will be released to the web later this week.</p>
<p>You can get more infor from the Visual Studio page here: http://www.microsoft.com/visualstudio/en-us</p>
<p>The press release can be found here: http://www.microsoft.com/Presspass/press/2010/apr10/04-11VS10PR.mspx</p>
<p>Visual Studio 2010 Express is publicly available now. Get it here: http://www.microsoft.com/express/Windows/</p>
<p>Installing it now, here is what I generally install<br />
<img src="/wp-content/uploads/blogs/DesktopDev//Ultimate.PNG" alt="" title="" width="756" height="581" /></p>
<p>When you cut out C++ and SQL Server Express/Sharepoint you save 3GB</p>
]]></content>
			<link rel="replies" type="text/html" href="/index.php/desktopdev/mstech/visual-studio-2010-and-microsoft-net-fra/#comments" thr:count="8"/>
		<link rel="replies" type="application/atom+xml" href="/index.php/desktopdev/mstech/visual-studio-2010-and-microsoft-net-fra/feed/atom/" thr:count="8"/>
		<thr:total>8</thr:total>
		</entry>
		<entry>
		<author>
			<name>SQLDenis</name>
					</author>
		<title type="html"><![CDATA[Visual Studio 2010 and .NET 4 release candidates available for download]]></title>
		<link rel="alternate" type="text/html" href="/index.php/desktopdev/mstech/visual-studio-2010-and-net-4-release-can/" />
		<id>/index.php/2010/02/visual-studio-2010-and-net-4-release-can/</id>
		<updated>2010-02-09T10:02:04Z</updated>
		<published>2010-02-09T10:02:04Z</published>
		<category scheme="/" term="C#" /><category scheme="/" term="Microsoft Technologies" /><category scheme="/" term="VB.NET" /><category scheme="/" term=".net 4" /><category scheme="/" term="visual studio 2010" />		<summary type="html"><![CDATA[Visual Studio 2010 and .NET 4 release candidates are available for download Right now the downloads are only available to MSDN subscribers. On Wednesday February 10th the downloads will also be available to the general public You can find the download links here: http://msdn.microsoft.com/en-us/vstudio/dd582936.aspx]]></summary>
		<content type="html" xml:base="/index.php/desktopdev/mstech/visual-studio-2010-and-net-4-release-can/"><![CDATA[<div><img src="/wp-content/uploads/blogs/DesktopDev//logo_vstudio.png" alt="" title="" width="155" height="23" /></div>
<p>Visual Studio 2010 and .NET 4 release candidates are available for download<br />
Right now the downloads are only available to MSDN subscribers.  On Wednesday February  10th the downloads will also be available to the general public</p>
<p>You can find the download links here: http://msdn.microsoft.com/en-us/vstudio/dd582936.aspx</p>
]]></content>
			<link rel="replies" type="text/html" href="/index.php/desktopdev/mstech/visual-studio-2010-and-net-4-release-can/#comments" thr:count="0"/>
		<link rel="replies" type="application/atom+xml" href="/index.php/desktopdev/mstech/visual-studio-2010-and-net-4-release-can/feed/atom/" thr:count="0"/>
		<thr:total>0</thr:total>
		</entry>
		<entry>
		<author>
			<name>SQLDenis</name>
					</author>
		<title type="html"><![CDATA[Windows Azure Tools for Microsoft Visual Studio 1.1 Released]]></title>
		<link rel="alternate" type="text/html" href="/index.php/desktopdev/mstech/windows-azure-tools-for-microsoft-visual/" />
		<id>/index.php/2010/02/windows-azure-tools-for-microsoft-visual/</id>
		<updated>2010-02-02T00:04:02Z</updated>
		<published>2010-02-02T00:04:02Z</published>
		<category scheme="/" term="C#" /><category scheme="/" term="General Purpose Languages" /><category scheme="/" term="Microsoft Technologies" /><category scheme="/" term="VB.NET" /><category scheme="/" term="azure" /><category scheme="/" term="cloud computing" />		<summary type="html"><![CDATA[Microsoft has released Windows Azure Tools for Microsoft Visual Studio 1.1 today. 
Windows Azure Tools for Microsoft Visual Studio extend Visual Studio 2008 and the upcoming Visual Studio 2010 RC to enable the creation, configuration, building, debuggi&#8230;]]></summary>
		<content type="html" xml:base="/index.php/desktopdev/mstech/windows-azure-tools-for-microsoft-visual/"><![CDATA[<div class="image_block"><img src="/wp-content/uploads/blogs/EnterpriseDev//windows_azure_small.jpg" alt="" title="" width="300" height="169" /></div>
<p>Microsoft has released Windows Azure Tools for Microsoft Visual Studio 1.1 today.<br />
Windows Azure Tools for Microsoft Visual Studio extend Visual Studio 2008 and the upcoming Visual Studio 2010 RC to enable the creation, configuration, building, debugging, running and packaging of scalable web applications and services on Windows Azure. Installation includes the Windows Azure SDK. (For VS 2010 Beta 2 please use the November 2009 release)</p>
<p><strong>Windows Azure Tools for Microsoft Visual Studio 1.1 includes the following</strong><br />
C# and VB Project creation support for creating a Windows Azure Cloud Service solution with multiple roles.</p>
<p>Tools to add and remove roles from the Cloud Service.</p>
<p>Tools to configure each Role.</p>
<p>Integrated local development via the Development Fabric and Development Storage services.</p>
<p>Running and Debugging a Cloud Service in the Development Fabric.</p>
<p>Building and packaging of Cloud Service Packages.</p>
<p>Browsing to the Windows Azure Developer Portal.</p>
<p><strong>New for version 1.1:</strong><br />
Windows Azure Drive: Enable a Windows Azure application to use existing NTFS APIs to access a durable drive. This allows the Windows Azure application to mount a page blob as a drive letter, such as X:, and enables easy migration of existing NTFS applications to the cloud.</p>
<p>OS Version Support: Allows a Windows Azure application to choose the appropriate Guest OS to run on in the cloud.</p>
<p>There are also some bug fixes in this release.</p>
<p>Download it here: http://www.microsoft.com/downloads/details.aspx?displaylang=en&amp;FamilyID=5664019e-6860-4c33-9843-4eb40b297ab6 and get your cloud going</p>
]]></content>
			<link rel="replies" type="text/html" href="/index.php/desktopdev/mstech/windows-azure-tools-for-microsoft-visual/#comments" thr:count="0"/>
		<link rel="replies" type="application/atom+xml" href="/index.php/desktopdev/mstech/windows-azure-tools-for-microsoft-visual/feed/atom/" thr:count="0"/>
		<thr:total>0</thr:total>
		</entry>
		<entry>
		<author>
			<name>SQLDenis</name>
					</author>
		<title type="html"><![CDATA[Visual Studio 2010 Beta 2 Virtual Machines with Sample Data Available]]></title>
		<link rel="alternate" type="text/html" href="/index.php/desktopdev/mstech/visual-studio-2010-beta-2-virtual-machin/" />
		<id>/index.php/2009/12/visual-studio-2010-beta-2-virtual-machin/</id>
		<updated>2009-12-26T13:12:21Z</updated>
		<published>2009-12-26T13:12:21Z</published>
		<category scheme="/" term="C#" /><category scheme="/" term="General Purpose Languages" /><category scheme="/" term="Microsoft Technologies" /><category scheme="/" term="VB.NET" /><category scheme="/" term="hands-on labs" /><category scheme="/" term="hyper-v" /><category scheme="/" term="visual studio 2010" /><category scheme="/" term="visual studio 2010 beta" /><category scheme="/" term="vpc" />		<summary type="html"><![CDATA[Here is your gift from Microsoft for the holidays: Visual Studio 2010 Beta 2 Virtual Machines with Sample Data. Brian Keller writes Just in time for the holidays, we have posted a brand new virtual machine (VM) which is pre-configured with Visual Studio 2010 Ultimate Beta 2, Visual Studio Team Foundation Server 2010 Beta 2, [&#8230;]]]></summary>
		<content type="html" xml:base="/index.php/desktopdev/mstech/visual-studio-2010-beta-2-virtual-machin/"><![CDATA[<p>Here is your gift from Microsoft for the holidays: Visual Studio 2010 Beta 2 Virtual Machines with Sample Data. Brian Keller writes</p>
<blockquote><p>Just in time for the holidays, we have posted a brand new virtual machine (VM) which is pre-configured with Visual Studio 2010 Ultimate Beta 2, Visual Studio Team Foundation Server 2010 Beta 2, and sample data that you can use to help learn the product, perform demonstrations, etc. This VM included everything you need to learn and demonstrate the Application Lifecycle Management (ALM) capabilities of Visual Studio 2010 beta 2 (with the exception of Lab Management). This VM is available in the virtualization platform of your choice (Hyper-V, Virtual PC 2007 SP1, and Windows [7] Virtual PC). Hyper-V is highly recommended because of the performance benefits and snapshotting capabilities.</p></blockquote>
<p>There are also 7 hands-on labs available</p>
<p>Get more info about how to download this here: http://blogs.msdn.com/briankel/archive/2009/12/23/now-available-visual-studio-2010-beta-2-virtual-machines-with-sample-data.aspx</p>
]]></content>
			<link rel="replies" type="text/html" href="/index.php/desktopdev/mstech/visual-studio-2010-beta-2-virtual-machin/#comments" thr:count="0"/>
		<link rel="replies" type="application/atom+xml" href="/index.php/desktopdev/mstech/visual-studio-2010-beta-2-virtual-machin/feed/atom/" thr:count="0"/>
		<thr:total>0</thr:total>
		</entry>
		<entry>
		<author>
			<name>Eli Weinstock-Herman (tarwn)</name>
					</author>
		<title type="html"><![CDATA[Visual Studio &#8211; MetalScroll Add-On]]></title>
		<link rel="alternate" type="text/html" href="/index.php/desktopdev/mstech/visual-studio-metalscroll-add-on/" />
		<id>/index.php/2009/11/visual-studio-metalscroll-add-on/</id>
		<updated>2009-11-10T09:04:49Z</updated>
		<published>2009-11-10T09:04:49Z</published>
		<category scheme="/" term="C#" /><category scheme="/" term="Microsoft Technologies" /><category scheme="/" term="VB.NET" />		<summary type="html"><![CDATA[While I may use PHP here at the LessThanDot site, I&#8217;ve been using Visual Studio and .Net since the first .Net release (and bribery in the form of scotch may convince me to share some of my pre-.Net experiences as well). While I have tried a few .Net plugins over time, my standard Visual Studio [&#8230;]]]></summary>
		<content type="html" xml:base="/index.php/desktopdev/mstech/visual-studio-metalscroll-add-on/"><![CDATA[<p>While I may use PHP here at the LessThanDot site, I&#8217;ve been using Visual Studio and .Net since the first .Net release (and bribery in the form of scotch may convince me to share some of my pre-.Net experiences as well). While I have tried a few .Net plugins over time, my standard Visual Studio layout is actually only a very lightly customized version of the standard out-of-the-box settings. Perhaps I change the settings for recent projects to display a longer list, add some additional User Task types, and tweak other small settings, but overall my experience is pretty vanilla.</p>
<p>About a week ago I decided to try a small plugin and, based on my fairly vanilla .Net existence, expected it to be an interesting week that would end in me uninstalling the little guy. The plugin purported to make the scrollbar more useful by using it to &#8220;provide a graphical representation of the source code&#8221;. I have to admit that I was more intrigued about someone customizing the scrollbar to be useful than I was in visualizing my sourcecode (after all, I stare at this stuff all day long as it is).</p>
<h2>About MetalScroll</h2>
<p>The name of this plugin is MetalScroll and it&#8217;s hosted as an Open Source project at Google Code (<a href="http://code.google.com/p/metalscroll/">here</a>). The plugin turns your document scrollbar into a graphical representation of the source code for the current document by using a number of colors to map the presence of characters and other elements in the document area into pixels in the wider-than-average scroll area. A shaded area of the bar indicates your current screen position in the document and color-coding is provided for saved and unsaved code, breakpoints, comments, and active textual searches. The new scrollbar allows you to scroll as you normally would or hold down the middle-scroll button of your mouse for a quick highlight of an area of code.</p>
<p><img src="http://www.tiernok.com/downloads/MetalScrollSample.png" /></p>
<h2>My Thoughts</h2>
<p>Overall this plugin only took a couple days to get used to. The ability to see a birds-eye view of my code has proven useful, allowing me to very quickly find individual items like break points or search results (hold Alt and doubleclick a word to highlight it throughout the current page). It also helps me orient myself faster when I land in a long chunk of code from a &#8216;Search&#8217; or &#8216;Go to Definition&#8217; command, as I only have to glance to the right and I have a &#8216;you-are-here&#8217; perspective of the document I have ended up in, useful in projects with 5k+ line code files.</p>
<p>The only major downside I ran into was the lack of comment highlighting for VB.Net users (or perhaps a lack of understanding on my part to make it work). The company I am currently working with uses VB.Net as their standard in-house language and unfortunately this means that I don&#8217;t get my comments in pretty green blobs in the scrollbar. This should by no means dissuade VB.Net users, however, as I did not actually know I was missing this functionality until a few minutes ago when I went to review the features on the website. </p>
<p>While this add-on will not be to everyone&#8217;s taste, I urge you to give it a try. After only a week of usage I have grown accustomed to having the bar beside my code and I have already reached the point where I start looking for it when I visit other peoples desktops. I would also urge you to let the author know you appreciate his work if you do begin using it regularly, as he is likely working on this in his spare time and it is always nice to know that other developers appreciate your hard work.</p>
<h3>Download Information</h3>
<p>You can download this plugin at the following site: <a href="http://code.google.com/p/metalscroll/">http://code.google.com/p/metalscroll/</a></p>
]]></content>
			<link rel="replies" type="text/html" href="/index.php/desktopdev/mstech/visual-studio-metalscroll-add-on/#comments" thr:count="2"/>
		<link rel="replies" type="application/atom+xml" href="/index.php/desktopdev/mstech/visual-studio-metalscroll-add-on/feed/atom/" thr:count="2"/>
		<thr:total>2</thr:total>
		</entry>
		<entry>
		<author>
			<name>Alex Ullrich</name>
					</author>
		<title type="html"><![CDATA[Foundations of Programming Ebook]]></title>
		<link rel="alternate" type="text/html" href="/index.php/desktopdev/mstech/foundations-of-programming-ebook/" />
		<id>/index.php/2008/06/foundations-of-programming-ebook/</id>
		<updated>2008-06-25T21:18:19Z</updated>
		<published>2008-06-25T21:18:19Z</published>
		<category scheme="/" term="C#" /><category scheme="/" term="Microsoft Technologies" /><category scheme="/" term="VB.NET" />		<summary type="html"><![CDATA[I noticed this free ebook today, figured I would share it here. I&#8217;ve obviously not read the whole thing yet, but it looks like its&#8217; pretty good info (at least for a .NET developer). You can download it here: Foundations of Programming @ CodeBetter I think its&#8217; really cool that someone took the time to [&#8230;]]]></summary>
		<content type="html" xml:base="/index.php/desktopdev/mstech/foundations-of-programming-ebook/"><![CDATA[<p>I noticed this free ebook today, figured I would share it here.  I&#8217;ve obviously not read the whole thing yet, but it looks like its&#8217; pretty good info (at least for a .NET developer).</p>
<p>You can download it here:  <a href="http://codebetter.com/blogs/karlseguin/archive/2008/06/24/foundations-of-programming-ebook.aspx">Foundations of Programming @ CodeBetter</a></p>
<p>I think its&#8217; really cool that someone took the time to compile all this information and get it out to us for free.  It seems pretty concise also (only 79 pages, and covers a lot of big topics).  </p>
<p>Enjoy.  Or not.</p>
<p>And if you do enjoy it, kick it, if you&#8217;re into that kind of thing.  I&#8217;d think its&#8217; useful to non-lessthandoters as well <img src="https://s.w.org/images/core/emoji/2/72x72/1f609.png" alt="😉" class="wp-smiley" style="height: 1em; max-height: 1em;" />  </p>
<p><a href="http://www.dotnetkicks.com/other/Foundations_of_Programming_Ebook">Foundations of Programming @ DotNetKicks</a></p>
]]></content>
			<link rel="replies" type="text/html" href="/index.php/desktopdev/mstech/foundations-of-programming-ebook/#comments" thr:count="1"/>
		<link rel="replies" type="application/atom+xml" href="/index.php/desktopdev/mstech/foundations-of-programming-ebook/feed/atom/" thr:count="1"/>
		<thr:total>1</thr:total>
		</entry>
	</feed>
