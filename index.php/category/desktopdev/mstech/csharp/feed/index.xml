<?xml version="1.0" encoding="UTF-8"?><rss version="2.0"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:atom="http://www.w3.org/2005/Atom"
	xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
	xmlns:slash="http://purl.org/rss/1.0/modules/slash/"
	>

<channel>
	<title>C# &#8211; LessthanDot</title>
	<atom:link href="/index.php/category/desktopdev/mstech/csharp/feed/" rel="self" type="application/rss+xml" />
	<link>/</link>
	<description>A Technical Community for IT Professionals</description>
	<lastBuildDate>Sat, 09 Mar 2019 12:50:36 +0000</lastBuildDate>
	<language>en-US</language>
	<sy:updatePeriod>hourly</sy:updatePeriod>
	<sy:updateFrequency>1</sy:updateFrequency>
	<generator>https://wordpress.org/?v=4.6.1</generator>
	<item>
		<title>Mapping Complex types to/from JSON with JSON.Net</title>
		<link>/index.php/webdev/serverprogramming/aspnet/mapping-complex-types-tofrom-json-with-json-net/</link>
		<comments>/index.php/webdev/serverprogramming/aspnet/mapping-complex-types-tofrom-json-with-json-net/#comments</comments>
		<pubDate>Fri, 07 Jul 2017 11:54:10 +0000</pubDate>
		<dc:creator><![CDATA[Eli Weinstock-Herman (tarwn)]]></dc:creator>
				<category><![CDATA[ASP.NET]]></category>
		<category><![CDATA[C#]]></category>
		<category><![CDATA[json]]></category>
		<category><![CDATA[json.net]]></category>

		<guid isPermaLink="false">/?p=8680</guid>
		<description><![CDATA[In an earlier post I introduced a strongly typed Identity object I am using in an ASP.Net Core application to make my code and error messages more readable. I didn&#8217;t wanted that extra complexity reflected in my database or over the wire with an API. In this post we&#8217;ll look at a simple method to [&#8230;]]]></description>
				<content:encoded><![CDATA[<p>In an <a href="/index.php/desktopdev/mstech/csharp/mapping-complex-types-tofrom-the-db-with-petapoco/">earlier post</a> I introduced a strongly typed Identity object I am using in an ASP.Net Core application to make my code and error messages more readable. I didn&#8217;t wanted that extra complexity reflected in my database or over the wire with an API. In this post we&#8217;ll look at a simple method to map my strongly typed properties in C# to simpler values in JSON.</p>
<p>This is my desired state:</p>
<div id="attachment_8690" style="width: 634px" class="wp-caption aligncenter"><img src="/wp-content/uploads/2017/07/TransparentIdentityType.png" alt="Transparent Server Side Identity Type" width="624" height="121" class="size-full wp-image-8690" srcset="/wp-content/uploads/2017/07/TransparentIdentityType.png 624w, /wp-content/uploads/2017/07/TransparentIdentityType-300x58.png 300w" sizes="(max-width: 624px) 100vw, 624px" /><p class="wp-caption-text">Transparent Server Side Identity Type</p></div>
<p>I want a strongly typed Identity object in my API backend that transparently converts into a simple int value to/from the database and converts to an int or <code>null</code> for the front-end (null in cases where a permanent ID hasn&#8217;t been assigned yet). The right side of this was handled in that earlier post with a PetaPoco IMapper implementation registered globally for IIdentity<int> types. JSON.Net supports a similar method that I can register with ASP.Net Core.</p>
<p>This is what my ASP.Net MVC Method looks like:</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="csharp"><thead><tr><td colspan="2"  class="head">C#</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
</pre></td><td class="de1"><pre class="de1"><span class="br0">&#91;</span>HttpGet<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#93;</span>
<span class="kw1">public</span> async Task<span class="sy0">&lt;</span>List<span class="sy0">&lt;</span>ApplicationDTO<span class="sy0">&gt;&gt;</span> GetAllAsync<span class="br0">&#40;</span><span class="br0">&#41;</span>
<span class="br0">&#123;</span>
&nbsp; &nbsp; <span class="kw1">return</span> await _databaseStore<span class="sy0">.</span><span class="me1">Applications</span><span class="sy0">.</span><span class="me1">GetAllAsync</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
<span class="br0">&#125;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">[HttpGet()]
public async Task&lt;List&lt;ApplicationDTO&gt;&gt; GetAllAsync()
{
	return await _databaseStore.Applications.GetAllAsync();
}</pre></div></div>

<p>And this is what we see over the wire:</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="javascript"><thead><tr><td colspan="2"  class="head">Javascript</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
</pre></td><td class="de1"><pre class="de1"><span class="br0">&#91;</span>
&nbsp; <span class="br0">&#123;</span><span class="st0">&quot;id&quot;</span><span class="sy0">:</span><span class="nu0">2</span><span class="sy0">,</span> <span class="st0">&quot;organizationId&quot;</span><span class="sy0">:</span><span class="nu0">1</span><span class="sy0">,</span> <span class="st0">&quot;name&quot;</span><span class="sy0">:</span><span class="st0">&quot;Fictitious Co, LLC Application&quot;</span><span class="br0">&#125;</span>
<span class="br0">&#93;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">[
  {"id":2, "organizationId":1, "name":"Fictitious Co, LLC Application"}
]</pre></div></div>

<p>Here is the definition of the ApplicationDTO object:</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="csharp"><thead><tr><td colspan="2"  class="head">C#</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
</pre></td><td class="de1"><pre class="de1"><span class="kw1">public</span> <span class="kw4">class</span> ApplicationDTO
<span class="br0">&#123;</span> &nbsp; 
&nbsp; &nbsp; <span class="br0">&#91;</span>Obsolete<span class="br0">&#40;</span><span class="st0">&quot;Serialization use only&quot;</span>, <span class="kw1">true</span><span class="br0">&#41;</span><span class="br0">&#93;</span>
&nbsp; &nbsp; <span class="kw1">public</span> ApplicationDTO<span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span> <span class="br0">&#125;</span>
&nbsp;
&nbsp; &nbsp; <span class="kw1">public</span> ApplicationDTO<span class="br0">&#40;</span>AppId id, OrganizationId organizationid, <span class="kw4">string</span> name<span class="br0">&#41;</span>
&nbsp; &nbsp; <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; Id <span class="sy0">=</span> id<span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; OrganizationId <span class="sy0">=</span> organizationid<span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; Name <span class="sy0">=</span> name<span class="sy0">;</span>
&nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp; &nbsp; 
&nbsp; &nbsp; <span class="kw1">public</span> AppId Id <span class="br0">&#123;</span> <span class="kw1">get</span><span class="sy0">;</span> <span class="kw1">set</span><span class="sy0">;</span> <span class="br0">&#125;</span>
&nbsp; &nbsp; &nbsp; &nbsp; 
&nbsp; &nbsp; <span class="kw1">public</span> OrganizationId OrganizationId <span class="br0">&#123;</span> <span class="kw1">get</span><span class="sy0">;</span> <span class="kw1">set</span><span class="sy0">;</span> <span class="br0">&#125;</span>
&nbsp; &nbsp; &nbsp; &nbsp; 
&nbsp; &nbsp; <span class="kw1">public</span> <span class="kw4">string</span> Name <span class="br0">&#123;</span> <span class="kw1">get</span><span class="sy0">;</span> <span class="kw1">set</span><span class="sy0">;</span> <span class="br0">&#125;</span>
<span class="br0">&#125;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">public class ApplicationDTO
{   
    [Obsolete("Serialization use only", true)]
    public ApplicationDTO() { }
 
    public ApplicationDTO(AppId id, OrganizationId organizationid, string name)
    {
        Id = id;
        OrganizationId = organizationid;
        Name = name;
    }
    
    public AppId Id { get; set; }
        
    public OrganizationId OrganizationId { get; set; }
        
    public string Name { get; set; }
}</pre></div></div>

<p>Here is the definition of the OrganizationId Identity:</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="csharp"><thead><tr><td colspan="2"  class="head">C#</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
</pre></td><td class="de1"><pre class="de1"><span class="kw1">public</span> <span class="kw4">class</span> OrganizationId <span class="sy0">:</span> IIdentity<span class="sy0">&lt;</span><span class="kw4">int</span><span class="sy0">&gt;</span>
<span class="br0">&#123;</span> &nbsp; 
&nbsp; &nbsp; <span class="br0">&#91;</span>Obsolete<span class="br0">&#40;</span><span class="st0">&quot;Serialization use only&quot;</span>, <span class="kw1">true</span><span class="br0">&#41;</span><span class="br0">&#93;</span>
&nbsp; &nbsp; <span class="kw1">public</span> OrganizationId<span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span> <span class="br0">&#125;</span>
&nbsp; &nbsp; &nbsp;
&nbsp; &nbsp; <span class="kw1">public</span> OrganizationId<span class="br0">&#40;</span><span class="kw4">int</span> id<span class="br0">&#41;</span>
&nbsp; &nbsp; <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; RawValue <span class="sy0">=</span> id<span class="sy0">;</span>
&nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp; &nbsp; &nbsp;
&nbsp; &nbsp; <span class="kw1">public</span> <span class="kw4">int</span> RawValue <span class="br0">&#123;</span> <span class="kw1">get</span><span class="sy0">;</span> <span class="kw1">set</span><span class="sy0">;</span> <span class="br0">&#125;</span>
<span class="br0">&#125;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">public class OrganizationId : IIdentity&lt;int&gt;
{   
	[Obsolete("Serialization use only", true)]
	public OrganizationId() { }
	 
	public OrganizationId(int id)
	{
		RawValue = id;
	}
	 
	public int RawValue { get; set; }
}</pre></div></div>

<p>These are both generated code, with some of the extras left out (potentially a future post).</p>
<h2>Implementing a JSON.Net Mapper</h2>
<p>JSON.Net supports custom JsonConverter implementations that will let us transparently convert between IIdentity<int> objects in C# and int values JSON:</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="csharp"><thead><tr><td colspan="2"  class="head">C#</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
</pre></td><td class="de1"><pre class="de1"><span class="kw1">public</span> <span class="kw4">class</span> IdentityJsonConverter<span class="sy0">&lt;</span>T<span class="sy0">&gt;</span> <span class="sy0">:</span> JsonConverter
<span class="br0">&#123;</span>
&nbsp; &nbsp; <span class="kw1">public</span> <span class="kw1">override</span> <span class="kw4">void</span> WriteJson<span class="br0">&#40;</span>JsonWriter writer, <span class="kw4">object</span> <span class="kw1">value</span>, JsonSerializer serializer<span class="br0">&#41;</span>
&nbsp; &nbsp; <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; writer<span class="sy0">.</span><span class="me1">WriteValue</span><span class="br0">&#40;</span><span class="br0">&#40;</span><span class="br0">&#40;</span>IIdentity<span class="sy0">&lt;</span>T<span class="sy0">&gt;</span><span class="br0">&#41;</span><span class="kw1">value</span><span class="br0">&#41;</span><span class="sy0">.</span><span class="me1">RawValue</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp;
&nbsp; &nbsp; <span class="kw1">public</span> <span class="kw1">override</span> <span class="kw4">object</span> ReadJson<span class="br0">&#40;</span>JsonReader reader, Type objectType, <span class="kw4">object</span> existingValue, JsonSerializer serializer<span class="br0">&#41;</span>
&nbsp; &nbsp; <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">if</span> <span class="br0">&#40;</span>reader<span class="sy0">.</span><span class="kw1">Value</span> <span class="sy0">!=</span> <span class="kw1">null</span><span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">var</span> ctor <span class="sy0">=</span> objectType<span class="sy0">.</span><span class="me1">GetConstructor</span><span class="br0">&#40;</span><span class="kw3">new</span> Type<span class="br0">&#91;</span><span class="br0">&#93;</span> <span class="br0">&#123;</span> <span class="kw3">typeof</span><span class="br0">&#40;</span>T<span class="br0">&#41;</span> <span class="br0">&#125;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">var</span> obj <span class="sy0">=</span> ctor<span class="sy0">.</span><span class="me1">Invoke</span><span class="br0">&#40;</span><span class="kw3">new</span> <span class="kw4">object</span><span class="br0">&#91;</span><span class="br0">&#93;</span> <span class="br0">&#123;</span> <span class="br0">&#40;</span>T<span class="br0">&#41;</span>Convert<span class="sy0">.</span><span class="me1">ChangeType</span><span class="br0">&#40;</span>reader<span class="sy0">.</span><span class="kw1">Value</span>, <span class="kw3">typeof</span><span class="br0">&#40;</span>T<span class="br0">&#41;</span><span class="br0">&#41;</span> <span class="br0">&#125;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">return</span> obj<span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">else</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">return</span> <span class="kw1">null</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp;
&nbsp; &nbsp; <span class="kw1">public</span> <span class="kw1">override</span> <span class="kw4">bool</span> CanConvert<span class="br0">&#40;</span>Type objectType<span class="br0">&#41;</span>
&nbsp; &nbsp; <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">return</span> <span class="kw3">typeof</span><span class="br0">&#40;</span>IIdentity<span class="sy0">&lt;</span>T<span class="sy0">&gt;</span><span class="br0">&#41;</span><span class="sy0">.</span><span class="me1">IsAssignableFrom</span><span class="br0">&#40;</span>objectType<span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; <span class="br0">&#125;</span>
<span class="br0">&#125;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">public class IdentityJsonConverter&lt;T&gt; : JsonConverter
{
    public override void WriteJson(JsonWriter writer, object value, JsonSerializer serializer)
    {
        writer.WriteValue(((IIdentity&lt;T&gt;)value).RawValue);
    }

    public override object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer)
    {
        if (reader.Value != null)
        {
            var ctor = objectType.GetConstructor(new Type[] { typeof(T) });
            var obj = ctor.Invoke(new object[] { (T)Convert.ChangeType(reader.Value, typeof(T)) });
            return obj;
        }
        else
        {
            return null;
        }
    }

    public override bool CanConvert(Type objectType)
    {
        return typeof(IIdentity&lt;T&gt;).IsAssignableFrom(objectType);
    }
}</pre></div></div>

<p>How it works:</p>
<p><code>CanConvert</code> identifies any implementations of IIdentity<int> as something this converter can handle. </p>
<p><code>WriteJson</code> is called when JSON.Net is converting to JSON and simply returns the underlying value of my Identity. </p>
<p><code>ReadJson</code> is called to convert from raw JSON to C#. Converting JSON is slightly more complex, as I allow for null values from the client (it doesn&#8217;t generate id&#8217;s) so when the JSON value is null I pass that on as a null Identity. If it&#8217;s not null, I use reflection on the concrete Identity to find the single parameter constructor and invoke it with incoming JSON converted to the expected type (<code>int</code> for the examples above). </p>
<p>If I wasn&#8217;t generating these Identity classes, there would be some risk in assuming the presence of a constructor of that shape. Because I&#8217;m generating it, I can save time because i know it&#8217;s all or nothing, either all of the Identity objects will work or none of them will. </p>
<h2>Employing it in ASP.Net</h2>
<p>To use this custom JSONConverter when ASP.Net is serializing/deserializing Action responses and inputs, I add JSON options to MVC during the ConfigureServics call of Startup:</p>
<p><b>Startup.cs</b></p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="csharp"><thead><tr><td colspan="2"  class="head">C#</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
</pre></td><td class="de1"><pre class="de1"><span class="kw1">public</span> IServiceProvider ConfigureServices<span class="br0">&#40;</span>IServiceCollection services<span class="br0">&#41;</span>
<span class="br0">&#123;</span>
&nbsp; &nbsp; <span class="co1">// Add framework services.</span>
&nbsp; &nbsp; services<span class="sy0">.</span><span class="me1">AddMvc</span><span class="br0">&#40;</span><span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="sy0">.</span><span class="me1">AddJsonOptions</span><span class="br0">&#40;</span>options <span class="sy0">=&gt;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; options<span class="sy0">.</span><span class="me1">SerializerSettings</span><span class="sy0">.</span><span class="me1">Converters</span><span class="sy0">.</span><span class="kw1">Add</span><span class="br0">&#40;</span><span class="kw3">new</span> IdentityJsonConverter<span class="sy0">&lt;</span>Int32<span class="sy0">&gt;</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp;<span class="co1">// ...</span>
<span class="br0">&#125;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">public IServiceProvider ConfigureServices(IServiceCollection services)
{
    // Add framework services.
    services.AddMvc()
            .AddJsonOptions(options =&gt; {
                options.SerializerSettings.Converters.Add(new IdentityJsonConverter&lt;Int32&gt;());
            });

   // ...
}</pre></div></div>

<p>Now all attempts to deserialize a value into an IIdentity property and serialization to respond with one of these values will pass through the custom mapper and I have the benefit of my custom type in my server-side logic without any extra overhead in my client-side app or code to write as I add new models or properties.</p>
]]></content:encoded>
			<wfw:commentRss>/index.php/webdev/serverprogramming/aspnet/mapping-complex-types-tofrom-json-with-json-net/feed/</wfw:commentRss>
		<slash:comments>1</slash:comments>
		</item>
		<item>
		<title>SPA Routing in ASP.Net Core</title>
		<link>/index.php/webdev/serverprogramming/aspnet/spa-routing-in-asp-net-core/</link>
		<comments>/index.php/webdev/serverprogramming/aspnet/spa-routing-in-asp-net-core/#respond</comments>
		<pubDate>Fri, 30 Jun 2017 11:58:40 +0000</pubDate>
		<dc:creator><![CDATA[Eli Weinstock-Herman (tarwn)]]></dc:creator>
				<category><![CDATA[ASP.NET]]></category>
		<category><![CDATA[C#]]></category>
		<category><![CDATA[asp.net core]]></category>
		<category><![CDATA[spa]]></category>

		<guid isPermaLink="false">/?p=8664</guid>
		<description><![CDATA[One of the challenges of SPA applications is making sure a bookmark or hard refresh knows how to load just enough of the content from the server before applying the client-side routing logic to that base page. This is not guaranteed to be the only way to do this, just the one that worked for [&#8230;]]]></description>
				<content:encoded><![CDATA[<p>One of the challenges of SPA applications is making sure a bookmark or hard refresh knows how to load just enough of the content from the server before applying the client-side routing logic to that base page.</p>
<p>This is not guaranteed to be the only way to do this, just the one that worked for me.</p>
<p><b>Goals:</b><br />
1. Static files to live in &#8220;Assets&#8221; instead of &#8220;wwwroot&#8221;<br />
2. Client-side routes like ~/configure/userScenarios to return ~/index.html when the browser loads them<br />
3. No extra work to remember when I add new configuration pages client-side</p>
<h2>Program.cs &#8211; Rename WebRoot</h2>
<p>In my Program.cs file, I renamed wwwroot to Assets:</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="csharp"><thead><tr><td colspan="2"  class="head">C#</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
</pre></td><td class="de1"><pre class="de1"><span class="kw1">public</span> <span class="kw1">static</span> <span class="kw4">void</span> Main<span class="br0">&#40;</span><span class="kw4">string</span><span class="br0">&#91;</span><span class="br0">&#93;</span> args<span class="br0">&#41;</span>
<span class="br0">&#123;</span>
&nbsp; &nbsp; <span class="kw1">var</span> host <span class="sy0">=</span> <span class="kw3">new</span> WebHostBuilder<span class="br0">&#40;</span><span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="sy0">.</span><span class="me1">UseKestrel</span><span class="br0">&#40;</span><span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="sy0">.</span><span class="me1">UseContentRoot</span><span class="br0">&#40;</span>Directory<span class="sy0">.</span><span class="me1">GetCurrentDirectory</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="sy0">.</span><span class="me1">UseWebRoot</span><span class="br0">&#40;</span><span class="st0">&quot;Assets&quot;</span><span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="sy0">.</span><span class="me1">UseIISIntegration</span><span class="br0">&#40;</span><span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="sy0">.</span><span class="me1">UseStartup</span><span class="sy0">&lt;</span>Startup<span class="sy0">&gt;</span><span class="br0">&#40;</span><span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="sy0">.</span><span class="me1">UseApplicationInsights</span><span class="br0">&#40;</span><span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="sy0">.</span><span class="me1">Build</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; host<span class="sy0">.</span><span class="me1">Run</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
<span class="br0">&#125;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">public static void Main(string[] args)
{
    var host = new WebHostBuilder()
        .UseKestrel()
        .UseContentRoot(Directory.GetCurrentDirectory())
        .UseWebRoot("Assets")
        .UseIISIntegration()
        .UseStartup&lt;Startup&gt;()
        .UseApplicationInsights()
        .Build();

    host.Run();
}</pre></div></div>

<h2>Startup.cs &#8211; Default Files, Assets, Client Routes</h2>
<p>Then in my Startup.cs file I added configuration to load &#8220;index.html&#8221; by default, static files in my &#8220;Assets&#8221; folder, and URL rewriting to rewrite client-side route patterns to the base &#8220;index.html&#8221; file:</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="csharp"><thead><tr><td colspan="2"  class="head">C#</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
</pre></td><td class="de1"><pre class="de1"><span class="kw1">public</span> <span class="kw4">void</span> Configure<span class="br0">&#40;</span>IApplicationBuilder app, IHostingEnvironment env, ILoggerFactory loggerFactory<span class="br0">&#41;</span>
<span class="br0">&#123;</span>
&nbsp; &nbsp;<span class="co1">// ...</span>
&nbsp;
&nbsp; &nbsp; <span class="co1">// rewrite client-side routes to return index.html</span>
&nbsp; &nbsp; <span class="kw1">var</span> options <span class="sy0">=</span> <span class="kw3">new</span> RewriteOptions<span class="br0">&#40;</span><span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="sy0">.</span><span class="me1">AddRewrite</span><span class="br0">&#40;</span><span class="st0">&quot;^testRuns.*&quot;</span>, <span class="st0">&quot;index.html&quot;</span>, skipRemainingRules<span class="sy0">:</span> <span class="kw1">true</span><span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="sy0">.</span><span class="me1">AddRewrite</span><span class="br0">&#40;</span><span class="st0">&quot;^configure/.*&quot;</span>, <span class="st0">&quot;index.html&quot;</span>, skipRemainingRules<span class="sy0">:</span> <span class="kw1">true</span><span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="sy0">.</span><span class="me1">AddRewrite</span><span class="br0">&#40;</span><span class="st0">&quot;^settings/.*&quot;</span>, <span class="st0">&quot;index.html&quot;</span>, skipRemainingRules<span class="sy0">:</span> <span class="kw1">true</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; app<span class="sy0">.</span><span class="me1">UseRewriter</span><span class="br0">&#40;</span>options<span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; <span class="co1">// index.html is the default if a file isn't asked for</span>
&nbsp; &nbsp; app<span class="sy0">.</span><span class="me1">UseDefaultFiles</span><span class="br0">&#40;</span><span class="kw3">new</span> DefaultFilesOptions<span class="br0">&#40;</span><span class="br0">&#41;</span>
&nbsp; &nbsp; <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; DefaultFileNames <span class="sy0">=</span> <span class="kw3">new</span> List<span class="sy0">&lt;</span><span class="kw4">string</span><span class="sy0">&gt;</span><span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span> <span class="st0">&quot;index.html&quot;</span> <span class="br0">&#125;</span>,
&nbsp; &nbsp; &nbsp; &nbsp; FileProvider <span class="sy0">=</span> <span class="kw3">new</span> PhysicalFileProvider<span class="br0">&#40;</span>Path<span class="sy0">.</span><span class="me1">Combine</span><span class="br0">&#40;</span>Directory<span class="sy0">.</span><span class="me1">GetCurrentDirectory</span><span class="br0">&#40;</span><span class="br0">&#41;</span>, <span class="st_h">@&quot;Assets&quot;</span><span class="br0">&#41;</span><span class="br0">&#41;</span>,
&nbsp; &nbsp; &nbsp; &nbsp; RequestPath <span class="sy0">=</span> <span class="kw3">new</span> PathString<span class="br0">&#40;</span><span class="st0">&quot;&quot;</span><span class="br0">&#41;</span>
&nbsp; &nbsp; <span class="br0">&#125;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; <span class="co1">// and all the rest of my static files live in Assets too</span>
&nbsp; &nbsp; app<span class="sy0">.</span><span class="me1">UseStaticFiles</span><span class="br0">&#40;</span><span class="kw3">new</span> StaticFileOptions<span class="br0">&#40;</span><span class="br0">&#41;</span>
&nbsp; &nbsp; <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; FileProvider <span class="sy0">=</span> <span class="kw3">new</span> PhysicalFileProvider<span class="br0">&#40;</span>Path<span class="sy0">.</span><span class="me1">Combine</span><span class="br0">&#40;</span>Directory<span class="sy0">.</span><span class="me1">GetCurrentDirectory</span><span class="br0">&#40;</span><span class="br0">&#41;</span>, <span class="st_h">@&quot;Assets&quot;</span><span class="br0">&#41;</span><span class="br0">&#41;</span>,
&nbsp; &nbsp; &nbsp; &nbsp; RequestPath <span class="sy0">=</span> <span class="kw3">new</span> PathString<span class="br0">&#40;</span><span class="st0">&quot;&quot;</span><span class="br0">&#41;</span>
&nbsp; &nbsp; <span class="br0">&#125;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; <span class="co1">// ...</span>
<span class="br0">&#125;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">public void Configure(IApplicationBuilder app, IHostingEnvironment env, ILoggerFactory loggerFactory)
{
   // ...

    // rewrite client-side routes to return index.html
    var options = new RewriteOptions()
        .AddRewrite("^testRuns.*", "index.html", skipRemainingRules: true)
        .AddRewrite("^configure/.*", "index.html", skipRemainingRules: true)
        .AddRewrite("^settings/.*", "index.html", skipRemainingRules: true);
    app.UseRewriter(options);

    // index.html is the default if a file isn't asked for
    app.UseDefaultFiles(new DefaultFilesOptions()
    {
        DefaultFileNames = new List&lt;string&gt;() { "index.html" },
        FileProvider = new PhysicalFileProvider(Path.Combine(Directory.GetCurrentDirectory(), @"Assets")),
        RequestPath = new PathString("")
    });

    // and all the rest of my static files live in Assets too
    app.UseStaticFiles(new StaticFileOptions()
    {
        FileProvider = new PhysicalFileProvider(Path.Combine(Directory.GetCurrentDirectory(), @"Assets")),
        RequestPath = new PathString("")
    });

    // ...
}</pre></div></div>

<p>I needed two Nuget packages:</p>
<ul>
<li>Install-Package Microsoft.AspNetCore.Rewrite</li>
<li>Install-Package Microsoft.AspNetCore.StaticFiles</li>
</ul>
<p>And the only ongoing work as I add to my application is when I add a new client-side route pattern for a new set of pages.</p>
]]></content:encoded>
			<wfw:commentRss>/index.php/webdev/serverprogramming/aspnet/spa-routing-in-asp-net-core/feed/</wfw:commentRss>
		<slash:comments>0</slash:comments>
		</item>
		<item>
		<title>Mapping Complex Types to/from the DB with PetaPoco</title>
		<link>/index.php/desktopdev/mstech/csharp/mapping-complex-types-tofrom-the-db-with-petapoco/</link>
		<comments>/index.php/desktopdev/mstech/csharp/mapping-complex-types-tofrom-the-db-with-petapoco/#respond</comments>
		<pubDate>Tue, 20 Jun 2017 10:30:47 +0000</pubDate>
		<dc:creator><![CDATA[Eli Weinstock-Herman (tarwn)]]></dc:creator>
				<category><![CDATA[C#]]></category>
		<category><![CDATA[petapoco]]></category>

		<guid isPermaLink="false">/?p=8660</guid>
		<description><![CDATA[Recently I was working on an application with rich C# objects that I wanted to store simplified in the database, without having to write custom logic for each new save or query that I add to the application. Luckily, the library I had chosen for data access (AsyncPoco, a variant Petapoco) has a mechanism that [&#8230;]]]></description>
				<content:encoded><![CDATA[<p>Recently I was working on an application with rich C# objects that I wanted to store simplified in the database, without having to write custom logic for each new save or query that I add to the application. Luckily, the library I had chosen for data access (<a href="https://github.com/tmenier/AsyncPoco">AsyncPoco</a>, a variant <a href="http://www.toptensoftware.com/petapoco/">Petapoco</a>) has a mechanism that can automatically map complex C# Types to simpler SQL types.</p>
<h2>Case 1: Strongly Typed Identities to SQL ints</h2>
<p>A complex web application can end up passing object id&#8217;s through any number of controller methods, business functions, or storage calls. It&#8217;s not hard to end up with a smattering of integer or GUIDs in the application to represent the id values, with limited meaning when appended to error messages, serialized, or represented in tests. Though it&#8217;s nice to see functions with strongly types ID objects (and error messages that don&#8217;t tell you &#8220;4 could not be found&#8221;), this can switch to a nuisance at API and database borders when it comes time to save or communicate those complex types.</p>
<p>Here&#8217;s an example Identity object (T4 generated):</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="csharp"><thead><tr><td colspan="2"  class="head">C#</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
</pre></td><td class="de1"><pre class="de1"><span class="kw1">public</span> <span class="kw4">class</span> OrganizationId <span class="sy0">:</span> IIdentity<span class="sy0">&lt;</span><span class="kw4">int</span><span class="sy0">&gt;</span>
<span class="br0">&#123;</span> &nbsp; 
<span class="br0">&#91;</span>Obsolete<span class="br0">&#40;</span><span class="st0">&quot;Serialization use only&quot;</span>, <span class="kw1">true</span><span class="br0">&#41;</span><span class="br0">&#93;</span>
<span class="kw1">public</span> OrganizationId<span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span> <span class="br0">&#125;</span>
&nbsp;
<span class="kw1">public</span> OrganizationId<span class="br0">&#40;</span><span class="kw4">int</span> id<span class="br0">&#41;</span>
<span class="br0">&#123;</span>
&nbsp; &nbsp; RawValue <span class="sy0">=</span> id<span class="sy0">;</span>
<span class="br0">&#125;</span>
&nbsp;
<span class="kw1">public</span> <span class="kw4">int</span> RawValue <span class="br0">&#123;</span> <span class="kw1">get</span><span class="sy0">;</span> <span class="kw1">set</span><span class="sy0">;</span> <span class="br0">&#125;</span>
&nbsp;
<span class="br0">&#125;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">public class OrganizationId : IIdentity&lt;int&gt;
{	
[Obsolete("Serialization use only", true)]
public OrganizationId() { }

public OrganizationId(int id)
{
	RawValue = id;
}

public int RawValue { get; set; }

}</pre></div></div>

<p>Here&#8217;s an Application object (also T4 generated) that references an AppId and OrganizationId:</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="csharp"><thead><tr><td colspan="2"  class="head">C#</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
</pre></td><td class="de1"><pre class="de1"><span class="kw1">public</span> <span class="kw4">class</span> ApplicationDTO
<span class="br0">&#123;</span> &nbsp; 
&nbsp; &nbsp; <span class="br0">&#91;</span>Obsolete<span class="br0">&#40;</span><span class="st0">&quot;Serialization use only&quot;</span>, <span class="kw1">true</span><span class="br0">&#41;</span><span class="br0">&#93;</span>
&nbsp; &nbsp; <span class="kw1">public</span> ApplicationDTO<span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span> <span class="br0">&#125;</span>
&nbsp;
&nbsp; &nbsp; <span class="kw1">public</span> ApplicationDTO<span class="br0">&#40;</span>AppId id, OrganizationId organizationid, <span class="kw4">string</span> name<span class="br0">&#41;</span>
&nbsp; &nbsp; <span class="br0">&#123;</span>
&nbsp; &nbsp; 
&nbsp; &nbsp; &nbsp; &nbsp; Id <span class="sy0">=</span> id<span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; OrganizationId <span class="sy0">=</span> organizationid<span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; Name <span class="sy0">=</span> name<span class="sy0">;</span>
&nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp; &nbsp; 
&nbsp; &nbsp; <span class="kw1">public</span> AppId Id <span class="br0">&#123;</span> <span class="kw1">get</span><span class="sy0">;</span> <span class="kw1">set</span><span class="sy0">;</span> <span class="br0">&#125;</span>
&nbsp; &nbsp; &nbsp; &nbsp; 
&nbsp; &nbsp; <span class="kw1">public</span> OrganizationId OrganizationId <span class="br0">&#123;</span> <span class="kw1">get</span><span class="sy0">;</span> <span class="kw1">set</span><span class="sy0">;</span> <span class="br0">&#125;</span>
&nbsp; &nbsp; &nbsp; &nbsp; 
&nbsp; &nbsp; <span class="kw1">public</span> <span class="kw4">string</span> Name <span class="br0">&#123;</span> <span class="kw1">get</span><span class="sy0">;</span> <span class="kw1">set</span><span class="sy0">;</span> <span class="br0">&#125;</span>
<span class="br0">&#125;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">public class ApplicationDTO
{	
	[Obsolete("Serialization use only", true)]
	public ApplicationDTO() { }

	public ApplicationDTO(AppId id, OrganizationId organizationid, string name)
	{
	
		Id = id;
		OrganizationId = organizationid;
		Name = name;
	}
	
	public AppId Id { get; set; }
		
	public OrganizationId OrganizationId { get; set; }
		
	public string Name { get; set; }
}</pre></div></div>

<p>Fetching these objects from the database requires no special markup over standard PetaPoco code, even though there are two int columns in the database that need to be expanded into very specific OrganizationId and AppId types in my ApplicationDTO object:</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="csharp"><thead><tr><td colspan="2"  class="head">C#</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
</pre></td><td class="de1"><pre class="de1"><span class="kw1">public</span> async Task<span class="sy0">&lt;</span>List<span class="sy0">&lt;</span>ApplicationDTO<span class="sy0">&gt;&gt;</span> GetAllAsync<span class="br0">&#40;</span>OrganizationId organizationId<span class="br0">&#41;</span>
&nbsp; &nbsp; <span class="kw1">using</span><span class="br0">&#40;</span><span class="kw1">var</span> db <span class="sy0">=</span> <span class="kw3">new</span> AsyncPoco<span class="sy0">.</span><span class="me1">Database</span><span class="br0">&#40;</span>_connection<span class="br0">&#41;</span><span class="br0">&#41;</span><span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">return</span> await db<span class="sy0">.</span><span class="me1">FetchAsync</span><span class="sy0">&lt;</span>ApplicationDTO<span class="sy0">&gt;</span><span class="br0">&#40;</span><span class="st0">&quot;SELECT * FROM Applications WHERE OrganizationId = @0;&quot;</span>, organizationId<span class="sy0">.</span><span class="me1">RawValue</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; <span class="br0">&#125;</span>
<span class="br0">&#125;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">public async Task&lt;List&lt;ApplicationDTO&gt;&gt; GetAllAsync(OrganizationId organizationId)
    using(var db = new AsyncPoco.Database(_connection)){
        return await db.FetchAsync&lt;ApplicationDTO&gt;("SELECT * FROM Applications WHERE OrganizationId = @0;", organizationId.RawValue);
    }
}</pre></div></div>

<p>This logic looks exactly the same as if I had two int properties on my object instead of two strongly typed identities and I get both my strongly typed C# objects and my simply typed integer database fields.</p>
<h2>Case 2: Mixed Array to varchar(MAX)</h2>
<p>In the second case, I have a workflow composed of steps, each described as an object Array (a parsed statement in a custom grammar). The database doesn’t need to know the details of the step beyond the fact that it hs an id, and order number, and that chunk of grammar representing the work fo the step. So in this case, I chose to map the step details from to a basic CSV value and store it in a varchar column.</p>
<p>This is the child-child-child class of the object I&#8217;m loading, UserStep:</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="csharp"><thead><tr><td colspan="2"  class="head">C#</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
</pre></td><td class="de1"><pre class="de1"><span class="kw1">public</span> <span class="kw4">class</span> UserStepDTO
<span class="br0">&#123;</span> &nbsp; 
&nbsp; &nbsp; <span class="br0">&#91;</span>Obsolete<span class="br0">&#40;</span><span class="st0">&quot;Serialization use only&quot;</span>, <span class="kw1">true</span><span class="br0">&#41;</span><span class="br0">&#93;</span>
&nbsp; &nbsp; <span class="kw1">public</span> UserStepDTO<span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span> <span class="br0">&#125;</span>
&nbsp;
&nbsp; &nbsp; <span class="kw1">public</span> UserStepDTO<span class="br0">&#40;</span>UserStepId id, <span class="kw4">int</span> ordernumber, <span class="kw4">object</span><span class="br0">&#91;</span><span class="br0">&#93;</span> step<span class="br0">&#41;</span>
&nbsp; &nbsp; <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; Id <span class="sy0">=</span> id<span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; OrderNumber <span class="sy0">=</span> ordernumber<span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; Step <span class="sy0">=</span> step<span class="sy0">;</span>
&nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp; &nbsp; 
&nbsp; &nbsp; <span class="kw1">public</span> UserStepId Id <span class="br0">&#123;</span> <span class="kw1">get</span><span class="sy0">;</span> <span class="kw1">set</span><span class="sy0">;</span> <span class="br0">&#125;</span>
&nbsp; &nbsp; &nbsp; &nbsp; 
&nbsp; &nbsp; <span class="kw1">public</span> <span class="kw4">int</span> OrderNumber <span class="br0">&#123;</span> <span class="kw1">get</span><span class="sy0">;</span> <span class="kw1">set</span><span class="sy0">;</span> <span class="br0">&#125;</span>
&nbsp; &nbsp; &nbsp; &nbsp; 
&nbsp; &nbsp; <span class="kw1">public</span> <span class="kw4">object</span><span class="br0">&#91;</span><span class="br0">&#93;</span> Step <span class="br0">&#123;</span> <span class="kw1">get</span><span class="sy0">;</span> <span class="kw1">set</span><span class="sy0">;</span> <span class="br0">&#125;</span>
<span class="br0">&#125;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">public class UserStepDTO
{	
	[Obsolete("Serialization use only", true)]
	public UserStepDTO() { }

	public UserStepDTO(UserStepId id, int ordernumber, object[] step)
	{
		Id = id;
		OrderNumber = ordernumber;
		Step = step;
	}
	
	public UserStepId Id { get; set; }
		
	public int OrderNumber { get; set; }
		
	public object[] Step { get; set; }
}</pre></div></div>

<p>I have a controlled set of types in the object array, so I just need to make sure I parse and encode them consistently.</p>
<p>Here is the table schema:</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="sql"><thead><tr><td colspan="2"  class="head">SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
</pre></td><td class="de1"><pre class="de1"><span class="kw1">CREATE</span> <span class="kw1">TABLE</span> dbo<span class="sy0">.</span>UserSteps<span class="br0">&#40;</span>
&nbsp; &nbsp; Id <span class="kw1">INT</span> <span class="kw1">IDENTITY</span><span class="br0">&#40;</span><span class="nu0">1</span><span class="sy0">,</span><span class="nu0">1</span><span class="br0">&#41;</span> <span class="kw1">NOT</span> <span class="kw1">NULL</span><span class="sy0">,</span>
&nbsp; &nbsp; OrderNumber <span class="kw1">INT</span> <span class="kw1">NOT</span> <span class="kw1">NULL</span><span class="sy0">,</span>
&nbsp; &nbsp; Step <span class="kw1">VARCHAR</span><span class="br0">&#40;</span><span class="kw1">MAX</span><span class="br0">&#41;</span> <span class="kw1">NOT</span> <span class="kw1">NULL</span><span class="sy0">,</span>
&nbsp; &nbsp; 
&nbsp; &nbsp; <span class="kw1">CONSTRAINT</span> PK_UserSteps <span class="kw1">PRIMARY</span> <span class="kw1">KEY</span> CLUSTERED<span class="br0">&#40;</span>Id <span class="kw1">ASC</span><span class="br0">&#41;</span><span class="sy0">,</span>
&nbsp; &nbsp; <span class="sy0">//</span> plus more constraints
<span class="br0">&#41;</span>;</pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">CREATE TABLE dbo.UserSteps(
	Id int IDENTITY(1,1) NOT NULL,
	OrderNumber int NOT NULL,
	Step varchar(MAX) NOT NULL,
	
	CONSTRAINT PK_UserSteps PRIMARY KEY CLUSTERED(Id ASC),
	// plus more constraints
);</pre></div></div>

<p>The actual query ends up being fairly complex, due to the upper layers of parent objects, but no extra work is done for this mapping.</p>
<h2>Registering Type Mapping with PetaPoco</h2>
<p>Even though I&#8217;m using AsyncPoco, a fork of PetaPoco that adds await/async capabilities, the method of defining and registering type mappers is the same.</p>
<p>I&#8217;m using the singleton registration method to register my mapper:</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="csharp"><thead><tr><td colspan="2"  class="head">C#</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
</pre></td><td class="de1"><pre class="de1"><span class="kw1">lock</span> <span class="br0">&#40;</span>_lock<span class="br0">&#41;</span>
<span class="br0">&#123;</span>
&nbsp; &nbsp; <span class="kw1">if</span> <span class="br0">&#40;</span>AsyncPoco<span class="sy0">.</span><span class="me1">Mappers</span><span class="sy0">.</span><span class="me1">GetMapper</span><span class="br0">&#40;</span><span class="kw3">typeof</span><span class="br0">&#40;</span>AppId<span class="br0">&#41;</span><span class="br0">&#41;</span> <span class="kw3">is</span> AsyncPoco<span class="sy0">.</span><span class="me1">StandardMapper</span><span class="br0">&#41;</span>
&nbsp; &nbsp; <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; AsyncPoco<span class="sy0">.</span><span class="me1">Mappers</span><span class="sy0">.</span><span class="me1">Register</span><span class="br0">&#40;</span>Assembly<span class="sy0">.</span><span class="me1">GetAssembly</span><span class="br0">&#40;</span><span class="kw3">typeof</span><span class="br0">&#40;</span>IIdentity<span class="br0">&#41;</span><span class="br0">&#41;</span>, <span class="kw3">new</span> IdentityMapper<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; <span class="br0">&#125;</span>
<span class="br0">&#125;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">lock (_lock)
{
    if (AsyncPoco.Mappers.GetMapper(typeof(AppId)) is AsyncPoco.StandardMapper)
    {
        AsyncPoco.Mappers.Register(Assembly.GetAssembly(typeof(IIdentity)), new IdentityMapper());
    }
}</pre></div></div>

<p>I can only register a mapper for a given type once, so I use a lock statement and see if my custom type is registered before attempting to register my increasingly poorly named &#8220;IdentityMapper&#8221;. I am actually registering this for anything that we attempt to load or save from that Assembly, which also includes objects like the UserStep one above. </p>
<p><i>Note: There are overloads to register for specific types instead of an entire assembly, but they weren&#8217;t working for me and I didn&#8217;t dig deep enough to determine what I had done wrong since I ended up wanting custom mapping for other objects in that assembly also.</i></p>
<p>This is my IMapper implementation for reading and writing the two cases above:</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="csharp"><thead><tr><td colspan="2"  class="head">C#</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
</pre></td><td class="de1"><pre class="de1"><span class="kw1">public</span> <span class="kw4">class</span> IdentityMapper <span class="sy0">:</span> IMapper
<span class="br0">&#123;</span>
&nbsp; &nbsp; <span class="kw1">private</span> StandardMapper standardMapper <span class="sy0">=</span> <span class="kw3">new</span> StandardMapper<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; <span class="kw1">public</span> ColumnInfo GetColumnInfo<span class="br0">&#40;</span>PropertyInfo pocoProperty<span class="br0">&#41;</span>
&nbsp; &nbsp; <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">return</span> standardMapper<span class="sy0">.</span><span class="me1">GetColumnInfo</span><span class="br0">&#40;</span>pocoProperty<span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp;
&nbsp; &nbsp; <span class="kw1">public</span> Func<span class="sy0">&lt;</span><span class="kw4">object</span>, <span class="kw4">object</span><span class="sy0">&gt;</span> GetFromDbConverter<span class="br0">&#40;</span>PropertyInfo targetProperty, Type sourceType<span class="br0">&#41;</span>
&nbsp; &nbsp; <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">var</span> t <span class="sy0">=</span> targetProperty<span class="sy0">.</span><span class="me1">PropertyType</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">if</span> <span class="br0">&#40;</span><span class="kw3">typeof</span><span class="br0">&#40;</span>IIdentity<span class="sy0">&lt;</span><span class="kw4">int</span><span class="sy0">&gt;</span><span class="br0">&#41;</span><span class="sy0">.</span><span class="me1">IsAssignableFrom</span><span class="br0">&#40;</span>t<span class="br0">&#41;</span><span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">var</span> ctor <span class="sy0">=</span> t<span class="sy0">.</span><span class="me1">GetConstructor</span><span class="br0">&#40;</span><span class="kw3">new</span> Type<span class="br0">&#91;</span><span class="br0">&#93;</span> <span class="br0">&#123;</span> <span class="kw3">typeof</span><span class="br0">&#40;</span>Int32<span class="br0">&#41;</span> <span class="br0">&#125;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">return</span> <span class="br0">&#40;</span>x<span class="br0">&#41;</span> <span class="sy0">=&gt;</span> ctor<span class="sy0">.</span><span class="me1">Invoke</span><span class="br0">&#40;</span><span class="kw3">new</span> <span class="kw4">object</span><span class="br0">&#91;</span><span class="br0">&#93;</span> <span class="br0">&#123;</span> <span class="br0">&#40;</span><span class="kw4">int</span><span class="br0">&#41;</span>x <span class="br0">&#125;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">else</span> <span class="kw1">if</span><span class="br0">&#40;</span>targetProperty<span class="sy0">.</span><span class="me1">Name</span><span class="sy0">.</span><span class="me1">Equals</span><span class="br0">&#40;</span><span class="st0">&quot;Step&quot;</span><span class="br0">&#41;</span> <span class="sy0">&amp;&amp;</span> t <span class="sy0">==</span> <span class="kw3">typeof</span><span class="br0">&#40;</span><span class="kw4">object</span><span class="br0">&#91;</span><span class="br0">&#93;</span><span class="br0">&#41;</span><span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">return</span> <span class="br0">&#40;</span>x<span class="br0">&#41;</span> <span class="sy0">=&gt;</span> BasicCsv<span class="sy0">.</span><span class="me1">Parse</span><span class="br0">&#40;</span><span class="br0">&#40;</span><span class="kw4">string</span><span class="br0">&#41;</span>x<span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">else</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">return</span> standardMapper<span class="sy0">.</span><span class="me1">GetFromDbConverter</span><span class="br0">&#40;</span>targetProperty, sourceType<span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp;
&nbsp; &nbsp; <span class="kw1">public</span> TableInfo GetTableInfo<span class="br0">&#40;</span>Type pocoType<span class="br0">&#41;</span>
&nbsp; &nbsp; <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">return</span> standardMapper<span class="sy0">.</span><span class="me1">GetTableInfo</span><span class="br0">&#40;</span>pocoType<span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp;
&nbsp; &nbsp; <span class="kw1">public</span> Func<span class="sy0">&lt;</span><span class="kw4">object</span>, <span class="kw4">object</span><span class="sy0">&gt;</span> GetToDbConverter<span class="br0">&#40;</span>PropertyInfo sourceProperty<span class="br0">&#41;</span>
&nbsp; &nbsp; <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">if</span> <span class="br0">&#40;</span><span class="kw3">typeof</span><span class="br0">&#40;</span>IIdentity<span class="sy0">&lt;</span><span class="kw4">int</span><span class="sy0">&gt;</span><span class="br0">&#41;</span><span class="sy0">.</span><span class="me1">IsAssignableFrom</span><span class="br0">&#40;</span>sourceProperty<span class="sy0">.</span><span class="me1">PropertyType</span><span class="br0">&#41;</span><span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">return</span> <span class="br0">&#40;</span>x<span class="br0">&#41;</span> <span class="sy0">=&gt;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">if</span> <span class="br0">&#40;</span>x <span class="sy0">==</span> <span class="kw1">null</span><span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">return</span> <span class="kw1">null</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">else</span> <span class="kw1">if</span> <span class="br0">&#40;</span><span class="kw3">typeof</span><span class="br0">&#40;</span>IIdentity<span class="sy0">&lt;</span><span class="kw4">int</span><span class="sy0">&gt;</span><span class="br0">&#41;</span><span class="sy0">.</span><span class="me1">IsAssignableFrom</span><span class="br0">&#40;</span>x<span class="sy0">.</span><span class="me1">GetType</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#41;</span><span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">return</span> <span class="br0">&#40;</span><span class="br0">&#40;</span>IIdentity<span class="sy0">&lt;</span><span class="kw4">int</span><span class="sy0">&gt;</span><span class="br0">&#41;</span>x<span class="br0">&#41;</span><span class="sy0">.</span><span class="me1">RawValue</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">else</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">return</span> x<span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">else</span> <span class="kw1">if</span> <span class="br0">&#40;</span>sourceProperty<span class="sy0">.</span><span class="me1">Name</span><span class="sy0">.</span><span class="me1">Equals</span><span class="br0">&#40;</span><span class="st0">&quot;Step&quot;</span><span class="br0">&#41;</span> <span class="sy0">&amp;&amp;</span> sourceProperty<span class="sy0">.</span><span class="me1">PropertyType</span> <span class="sy0">==</span> <span class="kw3">typeof</span><span class="br0">&#40;</span><span class="kw4">object</span><span class="br0">&#91;</span><span class="br0">&#93;</span><span class="br0">&#41;</span><span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">return</span> <span class="br0">&#40;</span>x<span class="br0">&#41;</span> <span class="sy0">=&gt;</span> BasicCsv<span class="sy0">.</span><span class="me1">Encode</span><span class="br0">&#40;</span><span class="br0">&#40;</span><span class="kw4">object</span><span class="br0">&#91;</span><span class="br0">&#93;</span><span class="br0">&#41;</span>x<span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">else</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">return</span> standardMapper<span class="sy0">.</span><span class="me1">GetToDbConverter</span><span class="br0">&#40;</span>sourceProperty<span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp; &nbsp;
<span class="br0">&#125;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">public class IdentityMapper : IMapper
{
    private StandardMapper standardMapper = new StandardMapper();

    public ColumnInfo GetColumnInfo(PropertyInfo pocoProperty)
    {
        return standardMapper.GetColumnInfo(pocoProperty);
    }

    public Func&lt;object, object&gt; GetFromDbConverter(PropertyInfo targetProperty, Type sourceType)
    {
        var t = targetProperty.PropertyType;
        if (typeof(IIdentity&lt;int&gt;).IsAssignableFrom(t))
        {
            var ctor = t.GetConstructor(new Type[] { typeof(Int32) });
            return (x) =&gt; ctor.Invoke(new object[] { (int)x });
        }
        else if(targetProperty.Name.Equals("Step") &amp;&amp; t == typeof(object[]))
        {
            return (x) =&gt; BasicCsv.Parse((string)x);
        }
        else
        {
            return standardMapper.GetFromDbConverter(targetProperty, sourceType);
        }
    }

    public TableInfo GetTableInfo(Type pocoType)
    {
        return standardMapper.GetTableInfo(pocoType);
    }

    public Func&lt;object, object&gt; GetToDbConverter(PropertyInfo sourceProperty)
    {
        if (typeof(IIdentity&lt;int&gt;).IsAssignableFrom(sourceProperty.PropertyType))
        {
            return (x) =&gt; {
                if (x == null)
                    return null;
                else if (typeof(IIdentity&lt;int&gt;).IsAssignableFrom(x.GetType()))
                    return ((IIdentity&lt;int&gt;)x).RawValue;
                else
                    return x;
                };
        }
        else if (sourceProperty.Name.Equals("Step") &amp;&amp; sourceProperty.PropertyType == typeof(object[]))
        {
            return (x) =&gt; BasicCsv.Encode((object[])x);
        }
        else
        {
            return standardMapper.GetToDbConverter(sourceProperty);
        }
    }
   
}</pre></div></div>

<p>Reading Case 1 (Identity): The GetFromDbConverter looks for IIdentity<int> and maps the basic integer from the database to the appropriately strongly-typed Identity object.</p>
<p>Writing Case 1 (Identity): The GetToDbConverter extracts the inner raw value and hands that off to store in the database.</p>
<p>Reading Case 2 (CSV): The GetFromFbConverter&#8217;s second case will perform a CSV parse to map a basic varchar(MAX) value to an object array, preserving string, date, and numeric values from the original.</p>
<p>Writing Case 2 (CSV): The GetToDbConverte ruses a simplistic CSV encoder to produce a value that can be consistently read by the prior method, without overhead for edge cases.</p>
<p>Note: I have found one exceptional case where this doesn&#8217;t work well. There are a couple cases where Petapoco assumes that it can use Convert.ChangeType on a value from the database to cast it into the expected value in your object, such as <A href="https://github.com/CollaboratingPlatypus/PetaPoco/blob/23a34d49b0c0ab74d04286174d8da9a1e1dc26b1/PetaPoco/Database.cs#L1349">autogenerated Identity fields during INSERTs</a>. Because it skips the use of mappers, you will receive a cast exception if you use a complex type for your identity field. If I find time, i&#8217;m going to dig in and write a patch for it.</p>
]]></content:encoded>
			<wfw:commentRss>/index.php/desktopdev/mstech/csharp/mapping-complex-types-tofrom-the-db-with-petapoco/feed/</wfw:commentRss>
		<slash:comments>0</slash:comments>
		</item>
		<item>
		<title>Compiled list of C# + .Net Features</title>
		<link>/index.php/desktopdev/mstech/compiled-list-of-c-net-features/</link>
		<comments>/index.php/desktopdev/mstech/compiled-list-of-c-net-features/#comments</comments>
		<pubDate>Mon, 07 Sep 2015 10:16:29 +0000</pubDate>
		<dc:creator><![CDATA[Eli Weinstock-Herman (tarwn)]]></dc:creator>
				<category><![CDATA[C#]]></category>
		<category><![CDATA[Microsoft Technologies]]></category>
		<category><![CDATA[.net]]></category>
		<category><![CDATA[c#]]></category>

		<guid isPermaLink="false">/?p=4112</guid>
		<description><![CDATA[We have talked about doing this at work for a while, so I finally sat down this weekend and tried to make a list of C# features that the team could share. We intend to use this to help gauge who the best people are to ask questions in different areas (C# isn&#8217;t our only [&#8230;]]]></description>
				<content:encoded><![CDATA[<p>We have talked about doing this at work for a while, so I finally sat down this weekend and tried to make a list of C# features that the team could share. We intend to use this to help gauge who the best people are to ask questions in different areas (C# isn&#8217;t our only list) as well as a list of things to learn when you&#8217;re bored (after crossing off all the ones you know). I added in some of the .Net framework features to round the list off.</p>
<p>Based on their relevance in our team, I left some grouped together (like unsafe code and WPF) and broke others into details (ASP.Net). Do you see any I missed? How much of the list have you worked with in production?</p>
<h1>C# Language Features</h1>
<p><b>Statements:</b></p>
<ul>
<li>[C# 1.0] Iteration: for, foreach, while, do</li>
<li>[C# 1.0] Jump: break, continue, goto, return</li>
<li>[C# 1.0] Empty statement</li>
<li>[C# 1.0] Labeled statements</li>
<li>[C# 1.0] Conditional: if elseif else switch case default</li>
<li>[C# 1.0] Catching exceptions: try catch finally</li>
<li>[C# 1.0] Checked/Unchecked statements</li>
<li>[C# 1.0] lock</li>
<li>[C# 1.0] using</li>
</ul>
<p><b>Operators:</b></p>
<ul>
<li>[C# 1.0] Arithmetic + &#8211; * / %</li>
<li>[C# 1.0] Logical Comparisons &#038; | ^ ! ~ &#038;&#038; || true false</li>
<li>[C# 1.0] String concatenation</li>
<li>[C# 1.0] Increment/Decrement (++x &#8211;x x++ x&#8211;)</li>
<li>[C# 1.0] Binary Shift (<< >>)</li>
<li>[C# 1.0] Comparison (==   !=   <   >   <=   >=)</li>
<li>[C# 1.0] Assignment (=   +=   -=   *=   /=   %=   &#038;=   |=   ^=   <<=   >>=)</li>
<li>[C# 1.0] Indexing []</li>
<li>[C# 1.0] Cast ()</li>
<li>[C# 1.0] Conditional/Ternary (condition)?(if-true):(if-false)</li>
<li>[C# 2.0] Null Coalescing: ??</li>
<li>[C# 6.0] Null Propagation: ?.</li>
<li>[C# 1.0] Type Information as is sizeof typeof</li>
</ul>
<p><b>Language Features:</b></p>
<ul>
<li>[C# 1.0] Arrays</li>
<li>[C# 1.0] Operator Overloading</li>
<li>[C# 1.0] Inheritance: extends base</li>
<li>[C# 1.0] Hiding: new</li>
<li>[C# 1.0] Access modifiers: public protected private internal &#8220;protected internal&#8221;</li>
<li>[C# 1.0] Modifiers &#8211; static instance const virtual overrides sealed extern</li>
<li>[C# 1.0] Property Declaration</li>
<li>[C# 1.0] Constructors</li>
<li>[C# 1.0] Static Constructors</li>
<li>[C# 1.0] Destructors</li>
<li>[C# 1.0] Nested Classes</li>
<li>[C# 1.0] Events, Declaration and Usage</li>
<li>[C# 1.0] Indexers</li>
<li>[C# 1.0] Properties</li>
<li>[C# 1.0] Interfaces</li>
<li>[C# 1.0] Structs</li>
<li>[C# 1.0] Enums</li>
<li>[C# 1.0] Delegates</li>
<li>[C# 1.0] Exceptions</li>
<li>[C# 1.0] Attributes</li>
<li>[C# 1.0] Unsafe Code: unsafe contexts, pointers, fixed/moveable variables, stack allocation</li>
<li>[C# 1.0] Boxing and Unboxing</li>
<li>[C# 1.0] Application Startup/Termination: Main, termination status code</li>
<li>[C# 1.0] Preprocessor Conditionals: #if #elif #else #endif</li>
<li>[C# 1.0] Preprocessor Declarations: #define #undef</li>
<li>[C# 1.0] Preprocessor Debug: #error</li>
<li>[C# 1.0] Preprocessor Region: #region #endregion</li>
<li>[C# 1.0] Preprocessor Region: #line</li>
<li>[C# 2.0] Preprocessor Region: #pragma warning</li>
<li>[C# 2.0] Generics &#8211; Usage</li>
<li>[C# 2.0] Generic Class Declaration</li>
<li>[C# 2.0] Generic Constraints: &#8220;where T&#8221;</li>
<li>[C# 2.0] Anonymous methods (inline delegates, closures)</li>
<li>[C# 2.0] Iterators: yield</li>
<li>[C# 2.0] Static Classes</li>
<li>[C# 2.0] Partial types: &#8220;public partial class XYZ&#8221;</li>
<li>[C# 2.0] Nullable types: &#8220;int? x = null&#8221;</li>
<li>[C# 2.0] namespace aliases: &#8220;using xyz = System.IO;&#8221;</li>
<li>[C# 2.0] Default value expression: default()</li>
<li>[C# 2.0] Conditional attribute</li>
<li>[C# 2.0] Fixed size buffers</li>
<li>[C# 2.0] Delegate Covariance/Contravariance</li>
<li>[C# 2.0] Friend Assemblies: aka &#8220;oops we made everything internal&#8221;</li>
<li>[C# 3.0] Implicitly Typed Local Variables: var</li>
<li>[C# 3.0] Extension Methods</li>
<li>[C# 3.0] Lambda expressions</li>
<li>[C# 3.0] Generic method Type Inference</li>
<li>[C# 3.0] Object and Collection Initializers</li>
<li>[C# 3.0] Anonymouse types</li>
<li>[C# 3.0] Implicitly typed arrays</li>
<li>[C# 3.0] Query Expressions: from into in join let orderby group select</li>
<li>[C# 3.0] Automatically implemented properties: &#8220;public int X { get; set; }&#8221;</li>
<li>[C# 3.0] Partial method declaration</li>
<li>[C# 4.0] Covariance, Contravariance</li>
<li>[C# 4.0] Dynamic Dispatch: dynamic</li>
<li>[C# 4.0] Named Arguments and Optional Parameters (for Methods)</li>
<li>[C# 5.0] Async modified: async await</li>
<li>[C# 5.0] Caller Information Attributes</li>
<li>[C# 6.0] Roslyn &#8211; Compiler-as-a-service</li>
<li>[C# 6.0] Initializers for Automatic Properties</li>
<li>[C# 6.0] Getter-only Automatic Properties</li>
<li>[C# 6.0] Lambda Expressions for Method Declaration</li>
<li>[C# 6.0] Lambda Expressions for Property Body Declaration</li>
<li>[C# 6.0] Using static</li>
<li>[C# 6.0] Null-conditional operators</li>
<li>[C# 6.0] String interpolation</li>
<li>[C# 6.0] nameof</li>
<li>[C# 6.0] Index Initializers syntax improvement</li>
<li>[C# 6.0] Exception filters</li>
<li>[C# 6.0] Exception filters</li>
</ul>
<p>Where&#8217;s LINQ???!? In the .Net Framework of course:</p>
<h1>.Net Framework Features</h1>
<p><b>.Net 1.0</b></p>
<ul>
<li>Collections: ArrayList, HashTable, Dictionary</li>
<li>Threading &#8211; ThreadPool, Thread, ThreadStart</li>
<li>Threading &#8211; Synchronized Regions: SynchronizationAttribute, Monitor (lock/SyncLock)</li>
<li>Threading &#8211; Manual Synchronization: Interlocked, WaitHandle/Mutex, ManualResetEvent, AutoResetEvent</li>
<li>ADO.Net &#8211; Database access using: Connection, Command, DataReader, DbParameter</li>
<li>ASP.Net &#8211; WebForms</li>
<li>ASP.Net &#8211; ASMX</li>
<li>ASP.Net &#8211; ASHX</li>
<li>ASP.Net &#8211; Page output caching</li>
<li>ASP.Net &#8211; Application Cache</li>
</ul>
<p><b>.Net 2.0</b></p>
<ul>
<li>Threading &#8211; BackgroundWorker</li>
<li>Threading &#8211; SynchronizationContext</li>
<li>Generics</li>
<li>Generic Collections: List&lt;T&gt;, Stack&lt;T&gt;, Queue&lt;T&gt;, Dictionary&lt;TKey,TValue&gt;, LinkedList&lt;T&gt;, SortedDictionary&lt;TKey,TValue&gt;, ReadOnlyCollection&lt;T&gt;, etc</li>
<li>Nullable types</li>
<li>Partial Classes</li>
<li>Anonymous methods</li>
<li>Iterators</li>
<li>Data Protection API</li>
<li>Globalization: Culture, CultureInfo</li>
<li>System.Diagnostics.EventLog</li>
<li>System.Net.Mail</li>
<li>ResGen.exe</li>
<li>Threading &#8211; System.Threading.Semaphore</li>
<li>ADO.Net &#8211; Asynchronous Processing</li>
<li>ADO.Net &#8211; SqlBulkCopy</li>
<li>ADO.Net &#8211; SQL Server User Defined Types</li>
<li>ADO.Net &#8211; SQL Server Max Data Types</li>
<li>ADO.Net &#8211; DataSet + DataAdapter Batch Processing</li>
<li>ADO.Net &#8211; Query Notifications</li>
<li>ADO.Net &#8211; Connection Pool Control</li>
<li>ADO.Net &#8211; System.Transactions</li>
<li>ADO.Net &#8211; DataTableReader</li>
<li>ADO.Net &#8211; Multiple Active Result Sets (MARS)</li>
<li>ASP.Net &#8211; Master/Content pages</li>
<li>ASP.Net &#8211; WebParts</li>
<li>ASP.Net &#8211; Skins/Themes</li>
<li>ASP.Net &#8211; Membership</li>
<li>ASP.Net &#8211; Profiles and Custom Profile Properties</li>
<li>ASP.Net &#8211; Cache Profiles</li>
<li>ASP.Net &#8211; Microsoft AJAX</li>
</ul>
<p><b>.Net 3.0</b></p>
<ul>
<li>WCF</li>
<li>WPF</li>
<li>Windows Workflow Foundation 1.0</li>
<li>Windows CardSpace</li>
</ul>
<p><b>.Net 3.5</b></p>
<ul>
<li>.Net Compact Framework</li>
<li>System.AddIn</li>
<li>Collections &#8211; HashSet&lt;T&gt;, SortedSet&lt;T&gt;</li>
<li>Pipes</li>
<li>LINQ</li>
<li>LINQ &#8211; Expression Trees</li>
<li>ADO.Net &#8211; LINQ to SQL</li>
<li>ADO.Net &#8211; LINQ to Dataset</li>
<li>ADO.Net &#8211; Entity Data Model / Entity Framework 1</li>
<li>ASP.Net &#8211; ScriptManager, AJAX Controls</li>
<li>ASP.net &#8211; Dynamic Data</li>
<li>Silverlight</li>
</ul>
<p><b>.Net 4.0</b></p>
<ul>
<li>AppDomain Monitoring</li>
<li>Code Contracts</li>
<li>Covariance and Contravariance in Generics</li>
<li>Memory Mapped Files</li>
<li>Portable Class Libraries</li>
<li>Threading &#8211; PLINQ (pop quiz: does AsParallel() go at the beginning or end of your LINQ statement? Why?)</li>
<li>Threading &#8211; TPL &#8211; System.Threading.Tasks</li>
<li>Threading &#8211; Barrier, SpinWait, SpinLock, CancellationTokens, BlockingCollection&lt;T&gt;</li>
<li>Threading &#8211; ConcurrentStack, ConcurrentQueue, ConcurrentDictionary, ConcurrentBag</li>
<li>Tuples (*sigh*)</li>
<li>IObservable, Reactive Extensions</li>
<li>ADO.Net &#8211; Entity Framework 4</li>
<li>MEF</li>
<li>ASP.Net &#8211; HTML5 form types</li>
<li>ASP.Net &#8211; Bundling and minification</li>
<li>ASP.Net &#8211; WebSocket Support</li>
<li>ASP.Net &#8211; Asynchronous Requests/Responses</li>
<li>ASP.Net &#8211; System.Net.Http</li>
<li>ASP.Net &#8211; MVC</li>
<li>ASP.Net &#8211; Web API 1</li>
<li>ASP.Net &#8211; Extensible Cache &#8211; OutputCacheProvider</li>
<li>ASP.Net &#8211; Extensible Request Validation &#8211; RequestValidator</li>
<li>ASP.Net &#8211; Resource Monitoring &#8211; appDomainResourceMonitoring</li>
</ul>
<p><b>.Net 4.5, 4.6</b></p>
<ul>
<li>AppContext Compatibility Switches</li>
<li>.Net Native</li>
<li>Threading &#8211; TPL Dataflow</li>
<li>System.Net.Http</li>
<li>System.Net.WebSockets</li>
<li>ADO.Net &#8211; SQLClient Streaming Support</li>
<li>ADO.Net &#8211; Async for Connection, DbCommand, DbDataReader, SqlCommand, SqlDataReader, SqlBulkCopy</li>
<li>ADO.Net &#8211; AlwaysOn support</li>
<li>ADO.Net &#8211; LocalDB</li>
<li>ADO.Net &#8211; Entity Framework 5</li>
<li>ADO.Net &#8211; Extended Protection</li>
<li>ASP.Net &#8211; Web API 2</li>
<li>ASP.Net &#8211; OData</li>
</ul>
<p>Whew, and that doesn&#8217;t even count all of the extra nuget packages that are out there now&#8230;It&#8217;s hard to remember how we managed without some of this stuff back in the 1.0 and 1.1 days.</p>
]]></content:encoded>
			<wfw:commentRss>/index.php/desktopdev/mstech/compiled-list-of-c-net-features/feed/</wfw:commentRss>
		<slash:comments>2</slash:comments>
		</item>
		<item>
		<title>Web API 2 &#8211; don&#8217;t get caught with your parameters down</title>
		<link>/index.php/webdev/web-api-2-dont-get-caught-with-your-parameters-down/</link>
		<comments>/index.php/webdev/web-api-2-dont-get-caught-with-your-parameters-down/#respond</comments>
		<pubDate>Wed, 26 Aug 2015 02:51:31 +0000</pubDate>
		<dc:creator><![CDATA[Tahir Khalid]]></dc:creator>
				<category><![CDATA[ASP.NET]]></category>
		<category><![CDATA[C#]]></category>
		<category><![CDATA[Microsoft Technologies]]></category>
		<category><![CDATA[Server Programming]]></category>
		<category><![CDATA[Web Developer]]></category>
		<category><![CDATA[.net 4.5]]></category>
		<category><![CDATA[c#]]></category>
		<category><![CDATA[web api 2]]></category>
		<category><![CDATA[web development]]></category>

		<guid isPermaLink="false">/?p=4130</guid>
		<description><![CDATA[Hi, A quick post for anyone else who has been literally dying from a lack of sleep trying to workout something that should be fairly simple. Quick background:  I got interested in Web API after I decided to build a friend a simple booking website driven by HTML5, jquery and originally an ASP.NET/c# .NET 4 [&#8230;]]]></description>
				<content:encoded><![CDATA[<p>Hi,</p>
<p>A quick post for anyone else who has been literally dying from a lack of sleep trying to workout something that should be fairly simple.</p>
<p>Quick background:  I got interested in Web API after I decided to build a friend a simple booking website driven by HTML5, jquery and originally an ASP.NET/c# .NET 4 Web Service.  Having tested it out I came across a CORS related issue and being very impatient I just could not be bothered to work around it (and lets face it, if you have to do that with CORS its a hack in my book, it just doesn&#8217;t feel right in the dynamic world of Web API 2.x).</p>
<p>So I thought it was about time I looked at Web API proper and as 2.0 had recently surfaced it was a good a time as any to jump on board.</p>
<p>First things first I created a simple test app remembering my good friend Kevin&#8217;s advice to me: &#8220;keep that **** simple or I will come round and choke you out!&#8221; &#8211; no greater words spoken.  I followed this good tutorial to get me started: <a title="Getting Started with ASP.NET Web API 2 (C#)" href="http://www.asp.net/web-api/overview/getting-started-with-aspnet-web-api/tutorial-your-first-web-api" target="_blank"><span style="color: #000000">Getting Started with ASP.NET Web API 2 </span></a><span style="color: #898989"><a title="Getting Started with ASP.NET Web API 2 (C#)" href="http://www.asp.net/web-api/overview/getting-started-with-aspnet-web-api/tutorial-your-first-web-api" target="_blank">(C#)</a> </span>however what seems to be a common occurrence with me, shit just goes wrong!</p>
<p>So what gives? Well I kept getting the dreaded 404 error when I adapted the tutorial to my simple project which consists of the following:</p>
<ul>
<li>HTML page that has a $.getJSON block which calls the uri (for this simple test I did which was to call a parameter less method, well I tried)</li>
<li>Web API 2 project consisting of:
<ul>
<li>simple entity called TestMessage that has a couple of properties like name, messagetext</li>
<li>simple controller inheriting from ApiController and implementing an IHttpActionResult method called GetMessage()</li>
</ul>
</li>
</ul>
<p>So noting too fancy:</p>
<pre>    public class TestMessage
    {
        public string Name{ get; set; }
        public string MessageText { get; set; }
    }</pre>
<p>The controller class:</p>
<pre>public IHttpActionResult GetMessage()
{
   return Ok("{}");
}</pre>
<p>The little gotcha above btw is that you need a return JSON object or null otherwise you will get a failed response at the client side, not the least of my worries though as I was getting another 404 message:</p>
<p>&#8220;No matching action method found in the selected controller&#8221;</p>
<p>Awesome, just what I was expecting!  I thought okay simple enough just a mismatch somewhere but nope wasn&#8217;t anything I tried and I spent days scouring through Stack Overflow (and occasionally crying) and other online resources (part of the problem being I had no clue what my question was to begin with or rather the correct search terms, this came later after much much pain and vomiting).</p>
<p>Some bright spark suggested decorating the method but that completely breaks the new Web API pattern, just didn&#8217;t seem right and felt like a major hack again so I went back to trying to workout how and why I was getting this 404 issue.  I even tried changing my client side call from $.getJSON to the old school $.Ajax making a GET call but still failed until I eventually came across a great post that set me on the right track (but wasn&#8217;t quite the complete solution).</p>
<p>By the way at any point in your development hell you go through this, make sure you get a handle on how to debug Web API using resources like <a title="Get Firebug" href="http://getfirebug.com/" target="_blank">Firebug </a>(Chrome Debugger is good but the layout is too shitty for me and I hate Google anyway) and <a title="Fiddler" href="http://www.telerik.com/fiddler" target="_blank">Fiddler </a>(an awesome tool for composing JSON requests and tracking requests/responses for stuff like Web API).</p>
<p>First I came across this great article by a cool developer called Dave Ward (author of the Encosia website): &#8220;<a title="Using jQuery to POST [FromBody] parameters to Web API" href="http://encosia.com/using-jquery-to-post-frombody-parameters-to-web-api/" target="_blank">Using jQuery to POST [FromBody] parameters to Web API</a>&#8221; however when I followed the steps mentioned by Dave I was still getting some problems namely I was not able to post any kind of JSON data using the getJSON jquery method so what the hell was going on, again?!  Well the first part was resolved by using the [FromBody] as suggested by Dave but something else was still causing my request to turn to shit.</p>
<p><span style="color: #999999"><em>Disclaimer: Shit is a universal word used by developers and has a neutral meaning neither an offensive or defensive word but cool all the same!</em></span></p>
<p>Turns out the JSON data was being passed in as a string and therefore just being ignored and set to null and the solution lay here in this awesome Stack Overflow post: <a title="http://stackoverflow.com/a/29978090" href="http://stackoverflow.com/a/29978090" target="_blank">http://stackoverflow.com/a/29978090</a></p>
<p>Yep everything is awesome now so the second part of the solution was to set the type of the incoming parameter to that of my entity i.e. the TestMessage class I pasted earlier in this post and then in my getJSON jquery method I did something like this:</p>
<pre>        function SendMessage() {
            $.getJSON("http://localhost/api/message/getmessage, { "name": "kermit", 
                      "messagetext": "hello, LTD!" })

                .done(function (data) {
                    $('#message').text("OK");
                })
                .fail(function (jqXHR, textStatus, err) {
                    $('#message').text('Error: ' + err);
                });
        }</pre>
<p>And hey presto all sorted.   What we did here was to create a complex parameter using a JSON format which is then passed through to the controller action GetMessage.  I expanded on this by making my action more complex using the excellent <a title="Newtonsoft Json.Net" href="http://www.newtonsoft.com/json" target="_blank">Newtonsoft JSON library</a> to assist with deserialising the data, inflating an entity and then building up an email message to send out using the <a title="System.Net.Mail Namespace" href="https://msdn.microsoft.com/en-us/library/system.net.mail(v=vs.110).aspx" target="_blank">System.Net.Mail</a> namespace.</p>
<p>Well that worked for me and I hope it works for you!</p>
]]></content:encoded>
			<wfw:commentRss>/index.php/webdev/web-api-2-dont-get-caught-with-your-parameters-down/feed/</wfw:commentRss>
		<slash:comments>0</slash:comments>
		</item>
		<item>
		<title>Threadsafe Incrementing in C#</title>
		<link>/index.php/desktopdev/mstech/csharp/threadsafe-incrementing-in-c/</link>
		<comments>/index.php/desktopdev/mstech/csharp/threadsafe-incrementing-in-c/#comments</comments>
		<pubDate>Wed, 02 Jul 2014 10:54:49 +0000</pubDate>
		<dc:creator><![CDATA[Eli Weinstock-Herman (tarwn)]]></dc:creator>
				<category><![CDATA[C#]]></category>
		<category><![CDATA[asynchronous]]></category>
		<category><![CDATA[threading]]></category>

		<guid isPermaLink="false">/?p=2799</guid>
		<description><![CDATA[Recently I&#8217;ve had the opportunity to review a number of different parallel C# methods that were performing work over a collection of items. Nearly all of them have used ++ to increment parent or global variables from inside threaded contexts. Unfortunately the ++ operator is not guaranteed to be threadsafe in C#. So let&#8217;s take [&#8230;]]]></description>
				<content:encoded><![CDATA[<p>Recently I&#8217;ve had the opportunity to review a number of different parallel C# methods that were performing work over a collection of items. Nearly all of them have used ++ to increment parent or global variables from inside threaded contexts. Unfortunately the ++ operator <a href="http://stackoverflow.com/questions/4628243/is-the-operator-thread-safe" title="Eric Lippert's explanation on StackOverflow">is not guaranteed to be threadsafe in C#</a>.</p>
<p>So let&#8217;s take a simple code example using ++ and convert it to a threadsafe one.</p>
<h2>The Wrong Way To Do It</h2>
<p>This is unrealistic example, I&#8217;m simply taking a list of work and sleeping for a random amount of time as a substitute for some real work. Pretend that it&#8217;s doing something complex like database work, file conversions, or something else useful and time consuming.</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="csharp"><thead><tr><td colspan="2"  class="head">C#</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
</pre></td><td class="de1"><pre class="de1"><span class="kw1">public</span> <span class="kw4">int</span> DoWorkPoorly<span class="br0">&#40;</span>List<span class="sy0">&lt;</span><span class="kw4">string</span><span class="sy0">&gt;</span> workToProcess<span class="br0">&#41;</span>
<span class="br0">&#123;</span>
&nbsp; &nbsp; <span class="kw4">int</span> statusCounter <span class="sy0">=</span> <span class="nu0">0</span><span class="sy0">;</span>
&nbsp; &nbsp; <span class="kw4">int</span> totalCount <span class="sy0">=</span> workToProcess<span class="sy0">.</span><span class="me1">Count</span><span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; Parallel<span class="sy0">.</span><span class="kw1">ForEach</span><span class="br0">&#40;</span>workToProcess, <span class="br0">&#40;</span>work<span class="br0">&#41;</span> <span class="sy0">=&gt;</span>
&nbsp; &nbsp; <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">var</span> r <span class="sy0">=</span> <span class="kw3">new</span> Random<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; Thread<span class="sy0">.</span><span class="me1">Sleep</span><span class="br0">&#40;</span><span class="br0">&#40;</span><span class="kw4">int</span><span class="br0">&#41;</span><span class="br0">&#40;</span>r<span class="sy0">.</span><span class="me1">NextDouble</span><span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="sy0">*</span> <span class="nu0">10</span><span class="br0">&#41;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; Console<span class="sy0">.</span><span class="me1">WriteLine</span><span class="br0">&#40;</span><span class="kw4">String</span><span class="sy0">.</span><span class="me1">Format</span><span class="br0">&#40;</span><span class="st0">&quot;Completed {0} of {1} items on thread {2}&quot;</span>, 
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="sy0">++</span>statusCounter, 
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; totalCount, 
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Thread<span class="sy0">.</span><span class="me1">CurrentThread</span><span class="sy0">.</span><span class="me1">ManagedThreadId</span><span class="br0">&#41;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; <span class="br0">&#125;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; Console<span class="sy0">.</span><span class="me1">WriteLine</span><span class="br0">&#40;</span><span class="kw4">String</span><span class="sy0">.</span><span class="me1">Format</span><span class="br0">&#40;</span><span class="st0">&quot;Completed {0} of {1} &nbsp;items on thread {2}&quot;</span>, 
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; statusCounter, 
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; totalCount,
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Thread<span class="sy0">.</span><span class="me1">CurrentThread</span><span class="sy0">.</span><span class="me1">ManagedThreadId</span><span class="br0">&#41;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; <span class="kw1">return</span> statusCounter<span class="sy0">;</span>
<span class="br0">&#125;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">public int DoWorkPoorly(List&lt;string&gt; workToProcess)
{
    int statusCounter = 0;
    int totalCount = workToProcess.Count;

    Parallel.ForEach(workToProcess, (work) =&gt;
    {
        var r = new Random();
        Thread.Sleep((int)(r.NextDouble() * 10));

        Console.WriteLine(String.Format("Completed {0} of {1} items on thread {2}", 
                                        ++statusCounter, 
                                        totalCount, 
                                        Thread.CurrentThread.ManagedThreadId));
    });

    Console.WriteLine(String.Format("Completed {0} of {1}  items on thread {2}", 
                                    statusCounter, 
                                    totalCount,
                                    Thread.CurrentThread.ManagedThreadId));
    return statusCounter;
}</pre></div></div>

<p>Call this with 10 or 100 items, and you may not see a problem. When I extend this to 1,000 or 10,000 then I start consistently losing up to 1.5% of the increments.</p>
<p>For a progress bar, this is probably ok, but for program logic or attempting to report an accurate number of results, this isn&#8217;t going to work.</p>
<h2>Interlocked.Increment</h2>
<p>Luckily, there is a built in method we can use to safely increment that shared integer.</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="csharp"><thead><tr><td colspan="2"  class="head">C#</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
</pre></td><td class="de1"><pre class="de1"><span class="kw1">public</span> <span class="kw4">int</span> DoWorkInterlocked<span class="br0">&#40;</span>List<span class="sy0">&lt;</span><span class="kw4">string</span><span class="sy0">&gt;</span> workToProcess<span class="br0">&#41;</span>
<span class="br0">&#123;</span>
&nbsp; &nbsp; <span class="kw4">int</span> statusCounter <span class="sy0">=</span> <span class="nu0">0</span><span class="sy0">;</span>
&nbsp; &nbsp; <span class="kw4">int</span> totalCount <span class="sy0">=</span> workToProcess<span class="sy0">.</span><span class="me1">Count</span><span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; Parallel<span class="sy0">.</span><span class="kw1">ForEach</span><span class="br0">&#40;</span>workToProcess, <span class="br0">&#40;</span>work<span class="br0">&#41;</span> <span class="sy0">=&gt;</span>
&nbsp; &nbsp; <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">var</span> r <span class="sy0">=</span> <span class="kw3">new</span> Random<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; Thread<span class="sy0">.</span><span class="me1">Sleep</span><span class="br0">&#40;</span><span class="br0">&#40;</span><span class="kw4">int</span><span class="br0">&#41;</span><span class="br0">&#40;</span>r<span class="sy0">.</span><span class="me1">NextDouble</span><span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="sy0">*</span> <span class="nu0">10</span><span class="br0">&#41;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; 
&nbsp; &nbsp; &nbsp; &nbsp; Interlocked<span class="sy0">.</span><span class="me1">Increment</span><span class="br0">&#40;</span><span class="kw1">ref</span> statusCounter<span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; Console<span class="sy0">.</span><span class="me1">WriteLine</span><span class="br0">&#40;</span><span class="kw4">String</span><span class="sy0">.</span><span class="me1">Format</span><span class="br0">&#40;</span><span class="st0">&quot;Completed {0} of {1} &nbsp;items on thread {2}&quot;</span>, 
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; statusCounter, 
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; totalCount, 
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Thread<span class="sy0">.</span><span class="me1">CurrentThread</span><span class="sy0">.</span><span class="me1">ManagedThreadId</span><span class="br0">&#41;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; <span class="br0">&#125;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; Console<span class="sy0">.</span><span class="me1">WriteLine</span><span class="br0">&#40;</span><span class="kw4">String</span><span class="sy0">.</span><span class="me1">Format</span><span class="br0">&#40;</span><span class="st0">&quot;Completed {0} of {1} &nbsp;items on thread {2}&quot;</span>, 
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; statusCounter, 
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; totalCount, 
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Thread<span class="sy0">.</span><span class="me1">CurrentThread</span><span class="sy0">.</span><span class="me1">ManagedThreadId</span><span class="br0">&#41;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; <span class="kw1">return</span> statusCounter<span class="sy0">;</span>
<span class="br0">&#125;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">public int DoWorkInterlocked(List&lt;string&gt; workToProcess)
{
    int statusCounter = 0;
    int totalCount = workToProcess.Count;

    Parallel.ForEach(workToProcess, (work) =&gt;
    {
        var r = new Random();
        Thread.Sleep((int)(r.NextDouble() * 10));
        
        Interlocked.Increment(ref statusCounter);
        Console.WriteLine(String.Format("Completed {0} of {1}  items on thread {2}", 
                                        statusCounter, 
                                        totalCount, 
                                        Thread.CurrentThread.ManagedThreadId));
    });

    Console.WriteLine(String.Format("Completed {0} of {1}  items on thread {2}", 
                                    statusCounter, 
                                    totalCount, 
                                    Thread.CurrentThread.ManagedThreadId));
    return statusCounter;
}</pre></div></div>

<p>Interlocked provides some methods to handle incrementing, decrementing, adding 64-bit values (which also isn&#8217;t threadsafe), and so on. On a similar run of 100,000 items, this method is safe where the first one was not.</p>
<h2>Decouple Your Output</h2>
<p>There is one final step. The prior examples push status messages to the console from whatever thread we happen to be on. Behind the scenes, they are fighting over access to the console, writing in non-sequential order, and writing more updates than we really need. At the end of the day, we want an accurate total number and enough updates to show us (humans) that it&#8217;s making progress, we don&#8217;t need all the messages and we especially don&#8217;t need all of our little workers fighting over a single constrained resource.</p>
<p>If we take the responsibility for reporting status out of the parallel action and instead spin it off onto it&#8217;s own task, we preserve our accurate total but have more control over reporting progress at a reasonable pace (and always in order). And in this particular case, as a by product of not fighting over a constrained resource, we gain an absurd amount of performance.</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="csharp"><thead><tr><td colspan="2"  class="head">C#</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
</pre></td><td class="de1"><pre class="de1"><span class="kw1">public</span> <span class="kw4">int</span> DoWorkInterlockedWithAsyncStatus<span class="br0">&#40;</span>List<span class="sy0">&lt;</span><span class="kw4">string</span><span class="sy0">&gt;</span> workToProcess<span class="br0">&#41;</span>
<span class="br0">&#123;</span>
&nbsp; &nbsp; <span class="kw1">var</span> statusCounter <span class="sy0">=</span> <span class="nu0">0</span><span class="sy0">;</span>
&nbsp; &nbsp; <span class="kw4">int</span> totalCount <span class="sy0">=</span> workToProcess<span class="sy0">.</span><span class="me1">Count</span><span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; <span class="co1">// monitor and output progress</span>
&nbsp; &nbsp; <span class="kw1">var</span> cancellationTokenSource <span class="sy0">=</span> <span class="kw3">new</span> CancellationTokenSource<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; <span class="kw1">var</span> outputTask <span class="sy0">=</span> Task<span class="sy0">.</span><span class="me1">Factory</span><span class="sy0">.</span><span class="me1">StartNew</span><span class="br0">&#40;</span><span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="sy0">=&gt;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">while</span> <span class="br0">&#40;</span><span class="sy0">!</span>cancellationTokenSource<span class="sy0">.</span><span class="me1">IsCancellationRequested</span><span class="br0">&#41;</span> 
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Console<span class="sy0">.</span><span class="me1">WriteLine</span><span class="br0">&#40;</span><span class="kw4">String</span><span class="sy0">.</span><span class="me1">Format</span><span class="br0">&#40;</span><span class="st0">&quot;Completed {0} of {1} &nbsp;items on thread {2}&quot;</span>, 
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; statusCounter, 
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; totalCount, 
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Thread<span class="sy0">.</span><span class="me1">CurrentThread</span><span class="sy0">.</span><span class="me1">ManagedThreadId</span><span class="br0">&#41;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; cancellationTokenSource<span class="sy0">.</span><span class="me1">Token</span><span class="sy0">.</span><span class="me1">WaitHandle</span><span class="sy0">.</span><span class="me1">WaitOne</span><span class="br0">&#40;</span><span class="nu0">5</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; Console<span class="sy0">.</span><span class="me1">WriteLine</span><span class="br0">&#40;</span><span class="kw4">String</span><span class="sy0">.</span><span class="me1">Format</span><span class="br0">&#40;</span><span class="st0">&quot;Completed {0} of {1} &nbsp;items on thread {2}&quot;</span>, 
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;statusCounter, 
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;totalCount, 
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;Thread<span class="sy0">.</span><span class="me1">CurrentThread</span><span class="sy0">.</span><span class="me1">ManagedThreadId</span><span class="br0">&#41;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; <span class="br0">&#125;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; Parallel<span class="sy0">.</span><span class="kw1">ForEach</span><span class="br0">&#40;</span>workToProcess, <span class="br0">&#40;</span>work<span class="br0">&#41;</span> <span class="sy0">=&gt;</span>
&nbsp; &nbsp; <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">var</span> r <span class="sy0">=</span> <span class="kw3">new</span> Random<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; Thread<span class="sy0">.</span><span class="me1">Sleep</span><span class="br0">&#40;</span><span class="br0">&#40;</span><span class="kw4">int</span><span class="br0">&#41;</span><span class="br0">&#40;</span>r<span class="sy0">.</span><span class="me1">NextDouble</span><span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="sy0">*</span> <span class="nu0">10</span><span class="br0">&#41;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; Interlocked<span class="sy0">.</span><span class="me1">Increment</span><span class="br0">&#40;</span><span class="kw1">ref</span> statusCounter<span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; <span class="br0">&#125;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; cancellationTokenSource<span class="sy0">.</span><span class="me1">Cancel</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; outputTask<span class="sy0">.</span><span class="me1">Wait</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; <span class="kw1">return</span> statusCounter<span class="sy0">;</span>
<span class="br0">&#125;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">public int DoWorkInterlockedWithAsyncStatus(List&lt;string&gt; workToProcess)
{
    var statusCounter = 0;
    int totalCount = workToProcess.Count;

    // monitor and output progress
    var cancellationTokenSource = new CancellationTokenSource();
    var outputTask = Task.Factory.StartNew(() =&gt; {
        while (!cancellationTokenSource.IsCancellationRequested) 
        {
            Console.WriteLine(String.Format("Completed {0} of {1}  items on thread {2}", 
                                            statusCounter, 
                                            totalCount, 
                                            Thread.CurrentThread.ManagedThreadId));

            cancellationTokenSource.Token.WaitHandle.WaitOne(5);
	}

        Console.WriteLine(String.Format("Completed {0} of {1}  items on thread {2}", 
                                         statusCounter, 
                                         totalCount, 
                                         Thread.CurrentThread.ManagedThreadId));
    });

    Parallel.ForEach(workToProcess, (work) =&gt;
    {
        var r = new Random();
        Thread.Sleep((int)(r.NextDouble() * 10));

        Interlocked.Increment(ref statusCounter);
    });

    cancellationTokenSource.Cancel();
    outputTask.Wait();
    return statusCounter;
}</pre></div></div>

<p>Separating the two responsibilities nets us a an order of magnitude performance increase, but more importantly it moves that responsibility off to the side where it can be managed independently. If the human needs more or less frequent updates, or if we need to report that update to a specific thread (like the UI thread), we have a single place to manage it from that doesn&#8217;t add drag to the actual work being done.</p>
]]></content:encoded>
			<wfw:commentRss>/index.php/desktopdev/mstech/csharp/threadsafe-incrementing-in-c/feed/</wfw:commentRss>
		<slash:comments>3</slash:comments>
		</item>
		<item>
		<title>Testing the Not-So-Testable HttpWebResponse</title>
		<link>/index.php/desktopdev/mstech/testing-httpwebresponse/</link>
		<comments>/index.php/desktopdev/mstech/testing-httpwebresponse/#comments</comments>
		<pubDate>Mon, 10 Dec 2012 14:56:00 +0000</pubDate>
		<dc:creator><![CDATA[Eli Weinstock-Herman (tarwn)]]></dc:creator>
				<category><![CDATA[C#]]></category>
		<category><![CDATA[Microsoft Technologies]]></category>
		<category><![CDATA[mocking]]></category>
		<category><![CDATA[unit testing]]></category>

		<guid isPermaLink="false">/index.php/2012/12/testing-httpwebresponse/</guid>
		<description><![CDATA[Recently I was working on a library to consume a REST API without exposing any of the specifics to the rest of the application. Implementing a common interface and set of custom exceptions was easy enough, but exercising the internal logic was going to be tough.]]></description>
				<content:encoded><![CDATA[<p>Recently I was working on a library to consume a REST API without exposing any of the specifics to the rest of the application. Implementing a common interface and set of custom exceptions was easy enough, but exercising the internal logic was going to be tough. </p>
<p>While I could use the live REST API to verify the general logic worked, I had limited options when it came to the full range of HTTP responses and communication failures. Add in the impact those live API calls would have on my build process performance, the occasional failures of my build due the imperfections of talking to a live service, and the overhead of maintaining separation between my test and live data in that service&#8230;what I really had on my hands was the beginning of years of random, painful maintenance.</p>
<p>If only I could mock WebRequest and have it return carefully crafted responses to test my code with, all without ever touching the real network.</p>
<blockquote><p><a href="http://msdn.microsoft.com/en-us/library/system.net.httpwebresponse.aspx" title="HttpWebResponse on MSDN">MSDN</a>: You should never directly create an instance of the HttpWebResponse class.</p></blockquote>
<p>Hmm, ok, maybe not.</p>
<p>Despite having done this search before, this time around I uncovered a couple posts that helped me find a solution to this whole mess. Although not before I left some helpful feedback on the MSDN page about the difference between opinion and documentation.</p>
<p>Yep, making friends.</p>
<p><i>The source code for this post is located on github, with the sample service implementation and test projects: <a href="https://github.com/tarwn/TestableHttpWebResponse" title="tarwn/TestableHttpWebResponse on github">tarwn/TestableHttpWebResponse</a></i></p>
<h2>Let&#8217;s Start with the Tests</h2>
<p>I&#8217;ve created a sample service implementation with two API call implementations. Each one builds a WebRequest, executes it, and analyzes the response. A retry policy wraps around the request execution, evaluating exceptions to determine whether to retry or map them to a local exception type to be rethrown.</p>
<p>Here is an example of one of those calls and the synchronous method it uses internally:</p>
<p><b>TestableHttpWebResponse.Sample/SampleService.cs</b></p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="text"><thead><tr><td colspan="2"  class="head">Text</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
</pre></td><td class="de1"><pre class="de1">public class SampleService
{
&nbsp; &nbsp; // ...
&nbsp;
&nbsp; &nbsp; public ServiceResponse ListRemoteStuff(string operation)
&nbsp; &nbsp; {
&nbsp; &nbsp; &nbsp; &nbsp; var uri = new Uri(_baseUri, operation);
&nbsp; &nbsp; &nbsp; &nbsp; var request = WebRequest.Create(uri);
&nbsp; &nbsp; &nbsp; &nbsp; request.Headers.Add(&quot;version&quot;, &quot;123-awesome&quot;);
&nbsp; &nbsp; &nbsp; &nbsp; return SendRequest(request);
&nbsp; &nbsp; }
&nbsp; &nbsp; 
&nbsp; &nbsp; // ...
&nbsp;
&nbsp; &nbsp; private ServiceResponse SendRequest(WebRequest request)
&nbsp; &nbsp; {
&nbsp; &nbsp; &nbsp; &nbsp; return _retryPolicy.ExecuteAction&lt;ServiceResponse&gt;(() =&gt;
&nbsp; &nbsp; &nbsp; &nbsp; {
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; try
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; {
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; var response = (HttpWebResponse)request.GetResponse();
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; var reader = new StreamReader(response.GetResponseStream());
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; var message = reader.ReadToEnd();
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; return new ServiceResponse() { IsSuccess = true, Message = message };
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; catch (WebException we)
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; {
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; throw MappedException(we);
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }
&nbsp; &nbsp; &nbsp; &nbsp; });
&nbsp; &nbsp; }
&nbsp;
&nbsp; &nbsp; // ...
}</pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">public class SampleService
{
	// ...

	public ServiceResponse ListRemoteStuff(string operation)
	{
		var uri = new Uri(_baseUri, operation);
		var request = WebRequest.Create(uri);
		request.Headers.Add("version", "123-awesome");
		return SendRequest(request);
	}
	
	// ...

	private ServiceResponse SendRequest(WebRequest request)
	{
		return _retryPolicy.ExecuteAction&lt;ServiceResponse&gt;(() =&gt;
		{
			try
			{
				var response = (HttpWebResponse)request.GetResponse();
				var reader = new StreamReader(response.GetResponseStream());
				var message = reader.ReadToEnd();
				return new ServiceResponse() { IsSuccess = true, Message = message };
			}
			catch (WebException we)
			{
				throw MappedException(we);
			}
		});
	}

	// ...
}</pre></div></div>

<p>Testing a method like this typically requires an integration test against the live service. With the provided TestableHttpWebResponse and TestableWebRequest, however, we can set up an expected request and response and verify the service reacts appropriately.</p>
<p><b>1: Register the TestableWebRequestCreateFactory</b><br />
WebRequest.Create(<i>uri</i>) uses a factory to produce the relevant WebRequest instance of a Uri, based on the prefix. So first things first, lets register a new prefix and a factory to serve up requests:</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="text"><thead><tr><td colspan="2"  class="head">Text</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
</pre></td><td class="de1"><pre class="de1">[TestFixtureSetUp]
public void TestFixtureSetup()
{
&nbsp; &nbsp; WebRequest.RegisterPrefix(&quot;test&quot;, TestableWebRequestCreateFactory.GetFactory());
}</pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">[TestFixtureSetUp]
public void TestFixtureSetup()
{
	WebRequest.RegisterPrefix("test", TestableWebRequestCreateFactory.GetFactory());
}</pre></div></div>

<p>TestableWebRequestCreateFactory.GetFactory() exposes a singleton that can be referenced from any of the tests in this class. When the WebRequest object receives a Uri starting with &#8220;test://&#8221;, it will call the associated factory, giving us the opportunity to respond with a Request object of our choosing.</p>
<p>A common base URI will prove helpful as we write the tests:</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="text"><thead><tr><td colspan="2"  class="head">Text</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
</pre></td><td class="de1"><pre class="de1">public Uri BaseUri { get { return new Uri(&quot;test://mydomain.com/api/&quot;); } }</pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">public Uri BaseUri { get { return new Uri("test://mydomain.com/api/"); } }</pre></div></div>

<p><b>2: Building a Test</b></p>
<p>The easiest test to start with is one that will test the &#8220;happy path&#8221; where our API call receives a 200 Success response. </p>
<p>First we need to set up the request:</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="text"><thead><tr><td colspan="2"  class="head">Text</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
</pre></td><td class="de1"><pre class="de1">var operation = &quot;ListOfStuff&quot;;
var expectedRequest = new TestableWebRequest(new Uri(BaseUri, operation));</pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">var operation = "ListOfStuff";
var expectedRequest = new TestableWebRequest(new Uri(BaseUri, operation));</pre></div></div>

<p>Next we need to set up the response the request will return when it is executed:</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="text"><thead><tr><td colspan="2"  class="head">Text</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
</pre></td><td class="de1"><pre class="de1">expectedRequest.EnqueueResponse(HttpStatusCode.OK, &quot;Success&quot;, &quot;Even More Success&quot;, false);</pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">expectedRequest.EnqueueResponse(HttpStatusCode.OK, "Success", "Even More Success", false);</pre></div></div>

<p>And then add it to the Factory so it will be available when WebRequest calls it:</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="text"><thead><tr><td colspan="2"  class="head">Text</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
</pre></td><td class="de1"><pre class="de1">TestableWebRequestCreateFactory.GetFactory().AddRequest(expectedRequest);</pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">TestableWebRequestCreateFactory.GetFactory().AddRequest(expectedRequest);</pre></div></div>

<p>Put all of this together and we have:</p>
<p><b>TestableHttpWebResponse.Sample.Tests/SampleServiceTests.cs</b></p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="text"><thead><tr><td colspan="2"  class="head">Text</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
</pre></td><td class="de1"><pre class="de1">[Test]
public void ListRemoteStuff_ValidRequest_ReturnsSuccessfulResponse()
{
&nbsp; &nbsp; var operation = &quot;ListOfStuff&quot;;
&nbsp; &nbsp; var expectedRequest = new TestableWebRequest(new Uri(BaseUri, operation));
&nbsp; &nbsp; expectedRequest.EnqueueResponse(HttpStatusCode.OK, &quot;Success&quot;, &quot;Even More Success&quot;, false);
&nbsp; &nbsp; TestableWebRequestCreateFactory.GetFactory().AddRequest(expectedRequest);
&nbsp; &nbsp; var service = new SampleService(BaseUri);
&nbsp;
&nbsp; &nbsp; var response = service.ListRemoteStuff(operation);
&nbsp;
&nbsp; &nbsp; Assert.IsTrue(response.IsSuccess);
}</pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">[Test]
public void ListRemoteStuff_ValidRequest_ReturnsSuccessfulResponse()
{
	var operation = "ListOfStuff";
	var expectedRequest = new TestableWebRequest(new Uri(BaseUri, operation));
	expectedRequest.EnqueueResponse(HttpStatusCode.OK, "Success", "Even More Success", false);
	TestableWebRequestCreateFactory.GetFactory().AddRequest(expectedRequest);
	var service = new SampleService(BaseUri);

	var response = service.ListRemoteStuff(operation);

	Assert.IsTrue(response.IsSuccess);
}</pre></div></div>

<p>This exercises the entire successful path of the operation without any additional abstractions in our API code or reliance on external communications and services.</p>
<h2>Testing Http Status Codes</h2>
<p>Another tricky part of testing a service is figuring out how to test HTTP codes other then the success case. </p>
<p>The sample service maps received Protocol Errors (401, 404, etc) to a local exception so the code consuming this library doesn&#8217;t have to know how to parse WebExceptions. </p>
<p><b>TestableHttpWebResponse.Sample/SampleService.cs</b></p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="text"><thead><tr><td colspan="2"  class="head">Text</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
</pre></td><td class="de1"><pre class="de1">private Exception MappedException(WebException we)
{
&nbsp; &nbsp; // map to custom exceptions
&nbsp; &nbsp; if (we.Status == WebExceptionStatus.ProtocolError)
&nbsp; &nbsp; {
&nbsp; &nbsp; &nbsp; &nbsp; var reader = new StreamReader(we.Response.GetResponseStream());
&nbsp; &nbsp; &nbsp; &nbsp; var message = reader.ReadToEnd();
&nbsp; &nbsp; &nbsp; &nbsp; var httpResponse = (HttpWebResponse)we.Response;
&nbsp; &nbsp; &nbsp; &nbsp; switch (httpResponse.StatusCode)
&nbsp; &nbsp; &nbsp; &nbsp; {
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; case HttpStatusCode.NotFound:
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; if (httpResponse.StatusDescription.Contains(&quot;Dohicky&quot;))
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; return new DohickyNotFoundException(message, we);
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; else
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; return new GenericNotFoundException(message, we);
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; default:
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; return new ExampleOfAnotherUsefulException(message, we);
&nbsp; &nbsp; &nbsp; &nbsp; }
&nbsp; &nbsp; }
&nbsp; &nbsp; else
&nbsp; &nbsp; &nbsp; &nbsp; return new SampleServiceOutageException(we);
}</pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">private Exception MappedException(WebException we)
{
	// map to custom exceptions
	if (we.Status == WebExceptionStatus.ProtocolError)
	{
		var reader = new StreamReader(we.Response.GetResponseStream());
		var message = reader.ReadToEnd();
		var httpResponse = (HttpWebResponse)we.Response;
		switch (httpResponse.StatusCode)
		{
			case HttpStatusCode.NotFound:
				if (httpResponse.StatusDescription.Contains("Dohicky"))
					return new DohickyNotFoundException(message, we);
				else
					return new GenericNotFoundException(message, we);
			default:
				return new ExampleOfAnotherUsefulException(message, we);
		}
	}
	else
		return new SampleServiceOutageException(we);
}</pre></div></div>

<p>Exercising the mapping logic is going to require the WebRequest to receive a WebException. Let&#8217;s make that happen.</p>
<p><i>Yes, I know a HEAD request will break this, that&#8217;s why it&#8217;s called &#8220;sample&#8221; code <img src="https://s.w.org/images/core/emoji/2/72x72/1f642.png" alt="🙂" class="wp-smiley" style="height: 1em; max-height: 1em;" /></i></p>
<p>In the first test, we used the EnqueueResponse method of the TestableWebRequest to set up a 200 Success response. It&#8217;s just as simple to return a 404 Http code with the expected message and request body:</p>
<p><b>TestableHttpWebResponse.Sample.Tests/SampleServiceTests.cs</b></p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="text"><thead><tr><td colspan="2"  class="head">Text</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
</pre></td><td class="de1"><pre class="de1">expectedRequest.EnqueueResponse(HttpStatusCode.NotFound, &quot;Dohicky not found&quot;, &quot;I couldn't find your dohicky because I don't like you&quot;, true);</pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">expectedRequest.EnqueueResponse(HttpStatusCode.NotFound, "Dohicky not found", "I couldn't find your dohicky because I don't like you", true);</pre></div></div>

<p>Which allows us to create the ExpectedException test:</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="text"><thead><tr><td colspan="2"  class="head">Text</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
</pre></td><td class="de1"><pre class="de1">[Test]
[ExpectedException(typeof(DohickyNotFoundException))]
public void ListRemoteStuff_404DohickeyNotFound_ThrowsDohickeyNotFoundException()
{
&nbsp; &nbsp; var operation = &quot;ListOfStuff&quot;;
&nbsp; &nbsp; var expectedRequest = new TestableWebRequest(new Uri(BaseUri, operation));
&nbsp; &nbsp; expectedRequest.EnqueueResponse(HttpStatusCode.NotFound, &quot;Dohicky not found&quot;, &quot;I couldn't find your dohicky because I don't like you&quot;, true);
&nbsp; &nbsp; TestableWebRequestCreateFactory.GetFactory().AddRequest(expectedRequest);
&nbsp; &nbsp; var service = new SampleService(BaseUri);
&nbsp;
&nbsp; &nbsp; var response = service.ListRemoteStuff(operation);
&nbsp;
&nbsp; &nbsp; // expect exception
}</pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">[Test]
[ExpectedException(typeof(DohickyNotFoundException))]
public void ListRemoteStuff_404DohickeyNotFound_ThrowsDohickeyNotFoundException()
{
	var operation = "ListOfStuff";
	var expectedRequest = new TestableWebRequest(new Uri(BaseUri, operation));
	expectedRequest.EnqueueResponse(HttpStatusCode.NotFound, "Dohicky not found", "I couldn't find your dohicky because I don't like you", true);
	TestableWebRequestCreateFactory.GetFactory().AddRequest(expectedRequest);
	var service = new SampleService(BaseUri);

	var response = service.ListRemoteStuff(operation);

	// expect exception
}</pre></div></div>

<h2>Testing Other WebExceptions</h2>
<p>What about connection failures? Well there is another version of the EnqueueResponse method that allows us to queue up an exception to be returned from the Request, like so:</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="text"><thead><tr><td colspan="2"  class="head">Text</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
</pre></td><td class="de1"><pre class="de1">expectedRequest.EnqueueResponse(new WebException(&quot;I'm broke!&quot;, WebExceptionStatus.ConnectFailure));</pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">expectedRequest.EnqueueResponse(new WebException("I'm broke!", WebExceptionStatus.ConnectFailure));</pre></div></div>

<p>Just like the previous test, we can use that response to put together a full test</p>
<p><b>TestableHttpWebResponse.Sample.Tests/SampleServiceTests.cs</b></p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="text"><thead><tr><td colspan="2"  class="head">Text</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
</pre></td><td class="de1"><pre class="de1">[Test]
[ExpectedException(typeof(SampleServiceOutageException))]
public void ListRemoteStuff_ServiceOutage_ThrowsSampleServiceOutage()
{
&nbsp; &nbsp; var operation = &quot;ListOfStuff&quot;;
&nbsp; &nbsp; var expectedRequest = new TestableWebRequest(new Uri(BaseUri, operation));
&nbsp; &nbsp; expectedRequest.EnqueueResponse(new WebException(&quot;I'm broke!&quot;, WebExceptionStatus.ConnectFailure));
&nbsp; &nbsp; TestableWebRequestCreateFactory.GetFactory().AddRequest(expectedRequest);
&nbsp; &nbsp; var service = new SampleService(BaseUri);
&nbsp;
&nbsp; &nbsp; var response = service.ListRemoteStuff(operation);
&nbsp;
&nbsp; &nbsp; // expect exception
}</pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">[Test]
[ExpectedException(typeof(SampleServiceOutageException))]
public void ListRemoteStuff_ServiceOutage_ThrowsSampleServiceOutage()
{
	var operation = "ListOfStuff";
	var expectedRequest = new TestableWebRequest(new Uri(BaseUri, operation));
	expectedRequest.EnqueueResponse(new WebException("I'm broke!", WebExceptionStatus.ConnectFailure));
	TestableWebRequestCreateFactory.GetFactory().AddRequest(expectedRequest);
	var service = new SampleService(BaseUri);

	var response = service.ListRemoteStuff(operation);

	// expect exception
}</pre></div></div>

<h2>Testing the Retry Policy</h2>
<p>Retry policies are trickier, in that they need to be able to execute a Request multiple times and receive new responses. By enqueueing (sp?) multiple responses on the request, we can exercise the retry policy:</p>
<p><b>TestableHttpWebResponse.Sample.Tests/SampleServiceTests.cs</b></p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="text"><thead><tr><td colspan="2"  class="head">Text</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
</pre></td><td class="de1"><pre class="de1">[Test]
public void ListRemoteStuff_TimeoutOccurs_TruesASecondTime()
{
&nbsp; &nbsp; var operation = &quot;ListOfStuff&quot;;
&nbsp; &nbsp; var expectedRequest = new TestableWebRequest(new Uri(BaseUri, operation));
&nbsp; &nbsp; expectedRequest.EnqueueResponse(new TimeoutException(&quot;took too long, so sorry&quot;))
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;.EnqueueResponse(HttpStatusCode.OK, &quot;All Good&quot;, &quot;Nothing to see, please move along&quot;, false);
&nbsp; &nbsp; TestableWebRequestCreateFactory.GetFactory().AddRequest(expectedRequest);
&nbsp; &nbsp; var service = new SampleService(BaseUri);
&nbsp;
&nbsp; &nbsp; var response = service.ListRemoteStuff(operation);
&nbsp;
&nbsp; &nbsp; Assert.AreEqual(&quot;Nothing to see, please move along&quot;, response.Message);
}</pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">[Test]
public void ListRemoteStuff_TimeoutOccurs_TruesASecondTime()
{
	var operation = "ListOfStuff";
	var expectedRequest = new TestableWebRequest(new Uri(BaseUri, operation));
	expectedRequest.EnqueueResponse(new TimeoutException("took too long, so sorry"))
				   .EnqueueResponse(HttpStatusCode.OK, "All Good", "Nothing to see, please move along", false);
	TestableWebRequestCreateFactory.GetFactory().AddRequest(expectedRequest);
	var service = new SampleService(BaseUri);

	var response = service.ListRemoteStuff(operation);

	Assert.AreEqual("Nothing to see, please move along", response.Message);
}</pre></div></div>

<p>And there we have it, all the various flavors of an HttpWebRequest.</p>
<h2>The Testable Classes</h2>
<p>The Testable classes are still under construction. At the time of this post they support the functionality above as well as the ability to set and verify Request Headers and write and verify the Request stream contents (upload). Currently the asynchronous methods (BeginGetResponse/EndGetResponse) are not implemented, but I&#8217;ll be adding those soon along with SampleService calls that exercise those via TPL and async/await logic. I&#8217;ll also be looking through WebRequest for other properties or methods I haven&#8217;t imlpemented yet to see what&#8217;s useful.</p>
<p>Hopefully others will find this useful as well.</p>
]]></content:encoded>
			<wfw:commentRss>/index.php/desktopdev/mstech/testing-httpwebresponse/feed/</wfw:commentRss>
		<slash:comments>2</slash:comments>
		</item>
		<item>
		<title>Pick the Right Storage: All SQL is Not Equal</title>
		<link>/index.php/desktopdev/mstech/csharp/pick-the-right-storage-all/</link>
		<comments>/index.php/desktopdev/mstech/csharp/pick-the-right-storage-all/#respond</comments>
		<pubDate>Tue, 26 Jun 2012 10:38:00 +0000</pubDate>
		<dc:creator><![CDATA[Eli Weinstock-Herman (tarwn)]]></dc:creator>
				<category><![CDATA[C#]]></category>
		<category><![CDATA[continuous delivery]]></category>
		<category><![CDATA[load test]]></category>
		<category><![CDATA[mvc music store]]></category>
		<category><![CDATA[sql server]]></category>

		<guid isPermaLink="false">/index.php/2012/06/pick-the-right-storage-all/</guid>
		<description><![CDATA[As part of a long series of posts, I implemented a version of the MVC Music Store tutorial application on top of a pair of SQL Server CE databases. SQL Server CE is great for small apps, being a portable file-based database that can easily be moved to a full SQL Server instance. Last week I migrated my application to use full SQL Server instances instead of the SDF file and picked up a 3x performance improvement. It was interesting enough that I decided to share :)]]></description>
				<content:encoded><![CDATA[<p>As part of a long series of posts, I implemented a version of the MVC Music Store tutorial application on top of a pair of SQL Server CE databases. SQL Server CE is great for small apps, being a portable file-based database that can easily be moved to a full SQL Server instance. Last week I migrated my application to use full SQL Server instances instead of the SDF file and picked up a 3x performance improvement. It was interesting enough that I decided to share <img src="https://s.w.org/images/core/emoji/2/72x72/1f642.png" alt="🙂" class="wp-smiley" style="height: 1em; max-height: 1em;" /></p>
<p><i>Note: I wasn&#8217;t purposefully performance tuning my sample site. This move was a necessary step to prep for doing some other SQL Server related things with the project and the performance improvement was just a neat side effect.</i></p>
<h2>The Results</h2>
<p>The graph below shows the results of the load test stage of my build over several builds. </p>
<p><img src="http://tiernok.com/LTDBlog/ContinuousDelivery/SqlServerLoadTestRates.png" alt="Graph of Requests/Second and Transactions/Second" /></p>
<p>We start with the Rate graph. On the left we see a rate of about 30 requests/second from when the system was still on the SQL Server CE file and the build and beta VMs resided on their original home (i7 920, VMWare, using Hyper-V equivalent of 2 logical CPUs). In the middle we have the move to their new home (i7 3770K, Hyper-V 2012) still on the SQL Server CE file and switching from one to two virtual CPUs assigned to the beta web server. The last third is the results of moving the primary database to a SQL Server VM, which improved the performance by roughly 3x and appears to have found a new performance constraint.</p>
<p>The transaction rate has gone from about 1.8 to about 4.8 per second.</p>
<p><img src="http://tiernok.com/LTDBlog/ContinuousDelivery/SqlServerLoadTestResponses.png" alt="Graph of time to last response for minimum, average, 95%, 99%, and maximum" /></p>
<p>We can see the response times have been fairly stable, up to the 99% mark, with the max being a little wonky. The 95% and average marks have gone from averaging 650ms and 250ms on the original server with CE to 450ms and 80ms respectively on SQL Server.</p>
<h2>The Details</h2>
<p>The data for these results are generated automatically as part of the <a href="http://wiki.lessthandot.com/index.php/Eli%27s_Continuous_Delivery_Project" title="See more information in the Continuous Delivery wiki entry">build process</a> for my application. I have 3 dedicated VMs for the build server, a web server, and a database server and they are all currently housed on a 2012 Hyper-V server. Each is assigned about 2GB of RAM and 2, 1, 1 CPUs for the web, build, and DB server respectively. The host has nothing else running on it and is an i7 3770K w/ 16GB of high speed RAM behind it and mirrored standard drives on SATA III.</p>
<p>The data was collected as part of the <a href="/index.php/EnterpriseDev/application-lifecycle-management/continuous-delivery-adding-the-load" title="Implementing the Automated Load test blog post">automated Load Test</a> step of the build process. During this step, the build server deploys a copy of the application to a website on the web VM and then spins up WCAT to <a href="/index.php/EnterpriseDev/application-lifecycle-management/implementing-wcat-for-load-testing" title="Implementing WCAT to test a website">load test the site</a>. There is an incremental spin up period that warms up the site and connection pool, followed by a 2.5 minute sustained test where WCAT runs as fast as it can against the site. </p>
<p>The load test is a full transaction that makes the same requests a real world browser makes as it selects an album, adds it to a cart, and then checks out, including static content and dynamic content. Each transaction is in a unique session and reports the appropriate headers with each HTTP request. The increase from 1.8 to 4.8 transactions per second can be restated as an increase from 1.8 to 4.8 individual purchases per second.</p>
<p>The site is still on SQL CE for the membership database, which is used during the checkout, and it is using Entity Framework 4 for data access to SQL Server (so more headroom for improvement if I was actually tuning for performance).</p>
<p>After seeing the increase I thought it would be interesting to share the numbers as well as how useful it is to have a short load test as part of the delivery pipeline.</p>
]]></content:encoded>
			<wfw:commentRss>/index.php/desktopdev/mstech/csharp/pick-the-right-storage-all/feed/</wfw:commentRss>
		<slash:comments>0</slash:comments>
		</item>
		<item>
		<title>PetaPoco: Mapping related objects</title>
		<link>/index.php/desktopdev/mstech/csharp/petapoco-mapping-related-objects/</link>
		<comments>/index.php/desktopdev/mstech/csharp/petapoco-mapping-related-objects/#comments</comments>
		<pubDate>Mon, 07 May 2012 10:16:00 +0000</pubDate>
		<dc:creator><![CDATA[Eli Weinstock-Herman (tarwn)]]></dc:creator>
				<category><![CDATA[C#]]></category>
		<category><![CDATA[c#]]></category>
		<category><![CDATA[micro orm]]></category>
		<category><![CDATA[petapoco]]></category>
		<category><![CDATA[waiter theres sql in my orm]]></category>

		<guid isPermaLink="false">/index.php/2012/05/petapoco-mapping-related-objects/</guid>
		<description><![CDATA[In the prior PetaPoco post, I started to dig into many-to-one relationships a little. Chrissie followed up with yet more mapping behavior in his latest Simple.Data post, so I thought I would cover it in a bit more detail.]]></description>
				<content:encoded><![CDATA[<p>In the <a href="/index.php/DesktopDev/MSTech/CSharp/more-petapoco-id-s-and" title="More PetaPoco: Id's and Multi-POCO queries">prior PetaPoco post</a>, I started to dig into many-to-one relationships a little. Chrissie followed up with yet more mapping behavior in his <a href="/index.php/DesktopDev/MSTech/simple-data-and-complex-types" title="Simple.Data and complex types: many to one">latest Simple.Data post</a>, so I thought I would cover it in a bit more detail.</p>
<p><i>Note: Chrissie has also covered <a href="/index.php/DesktopDev/MSTech/simple-data-and-complex-types-1" title="Simple.Data and complex types: one to many">one-to-many</a> since I wrote this post the other night and has at least one more post following that</i></p>
<h2>Many flavors of Mapping Related Objects</h2>
<p>PetaPoco doesn&#8217;t offer the instrumentation for lazy loading, though it wouldn&#8217;t be too hard to add it to the T4 template that is provided to automatically generate POCOs from the database. Of course the POCOs would stop being POCOs at this point and I&#8217;d be showing off my ability to write lazy loading rather than the library at hand, so lets stick to what PetaPoco does out of the box.</p>
<p>That said, we still have a number of ways to map data from multi-table queries into objects.</p>
<p><i>Note: I am using the same tables and insert statements I used in the prior post to create the Person and Address table, so I&#8217;ve left those out of the examples below to reduce the noise a bit</i></p>
<h3>Automatic Mapping w/ Decorated Objects</h3>
<p>As we saw in the prior post, using a pair of decorated objects makes it pretty easy to map a JOIN to objects:</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="csharp"><thead><tr><td colspan="2"  class="head">C#</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
</pre></td><td class="de1"><pre class="de1"><span class="kw1">public</span> <span class="kw4">void</span> SelectUsingDecoratedClasses<span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; <span class="kw1">using</span> <span class="br0">&#40;</span><span class="kw1">var</span> db <span class="sy0">=</span> GetDatabase<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">var</span> results <span class="sy0">=</span> db<span class="sy0">.</span><span class="me1">Query</span><span class="sy0">&lt;</span>DecoratedPerson, DecoratedAddress<span class="sy0">&gt;</span><span class="br0">&#40;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="st_h">@&quot;SELECT Person.*, Address.* </span>
<span class="st_h">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; FROM Person </span>
<span class="st_h">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; INNER JOIN Address ON Person.AddressId = Address.Id </span>
<span class="st_h">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; WHERE Person.lastname=@0&quot;</span>, <span class="st0">&quot;lastname1&quot;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">foreach</span> <span class="br0">&#40;</span><span class="kw1">var</span> person <span class="kw1">in</span> results<span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Console<span class="sy0">.</span><span class="me1">WriteLine</span><span class="br0">&#40;</span><span class="st0">&quot;Person: {0} {1}&quot;</span>, person<span class="sy0">.</span><span class="me1">LastName</span>, person<span class="sy0">.</span><span class="me1">FirstName</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Console<span class="sy0">.</span><span class="me1">WriteLine</span><span class="br0">&#40;</span><span class="st0">&quot;Address: {0} {1}&quot;</span>, person<span class="sy0">.</span><span class="me1">Address</span><span class="sy0">.</span><span class="me1">Street</span>, person<span class="sy0">.</span><span class="me1">Address</span><span class="sy0">.</span><span class="me1">HouseNumber</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp; &nbsp; <span class="br0">&#125;</span>
<span class="br0">&#125;</span>
&nbsp;
<span class="br0">&#91;</span>TableName<span class="br0">&#40;</span><span class="st0">&quot;Person&quot;</span><span class="br0">&#41;</span><span class="br0">&#93;</span>
<span class="br0">&#91;</span>PrimaryKey<span class="br0">&#40;</span><span class="st0">&quot;Id&quot;</span>, autoIncrement <span class="sy0">=</span> <span class="kw1">true</span><span class="br0">&#41;</span><span class="br0">&#93;</span>
<span class="kw1">public</span> <span class="kw4">class</span> DecoratedPerson <span class="br0">&#123;</span>
&nbsp; &nbsp; <span class="kw1">public</span> <span class="kw4">int</span> Id <span class="br0">&#123;</span> <span class="kw1">get</span><span class="sy0">;</span> <span class="kw1">set</span><span class="sy0">;</span> <span class="br0">&#125;</span>
&nbsp; &nbsp; <span class="kw1">public</span> <span class="kw4">string</span> LastName <span class="br0">&#123;</span> <span class="kw1">get</span><span class="sy0">;</span> <span class="kw1">set</span><span class="sy0">;</span> <span class="br0">&#125;</span>
&nbsp; &nbsp; <span class="kw1">public</span> <span class="kw4">string</span> FirstName <span class="br0">&#123;</span> <span class="kw1">get</span><span class="sy0">;</span> <span class="kw1">set</span><span class="sy0">;</span> <span class="br0">&#125;</span>
&nbsp; &nbsp; <span class="kw1">public</span> <span class="kw4">int</span> AddressId <span class="br0">&#123;</span> <span class="kw1">get</span><span class="sy0">;</span> <span class="kw1">set</span><span class="sy0">;</span> <span class="br0">&#125;</span>
&nbsp;
&nbsp; &nbsp; <span class="br0">&#91;</span>Ignore<span class="br0">&#93;</span>
&nbsp; &nbsp; <span class="kw1">public</span> DecoratedAddress Address <span class="br0">&#123;</span> <span class="kw1">get</span><span class="sy0">;</span> <span class="kw1">set</span><span class="sy0">;</span> <span class="br0">&#125;</span>
&nbsp;
&nbsp; &nbsp; <span class="kw1">public</span> <span class="kw1">override</span> <span class="kw4">string</span> ToString<span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">return</span> <span class="kw4">String</span><span class="sy0">.</span><span class="me1">Format</span><span class="br0">&#40;</span><span class="st0">&quot;{0}: {1}, {2}&quot;</span>, Id, LastName, FirstName<span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; <span class="br0">&#125;</span>
<span class="br0">&#125;</span>
&nbsp;
<span class="br0">&#91;</span>TableName<span class="br0">&#40;</span><span class="st0">&quot;Address&quot;</span><span class="br0">&#41;</span><span class="br0">&#93;</span>
<span class="br0">&#91;</span>PrimaryKey<span class="br0">&#40;</span><span class="st0">&quot;Id&quot;</span>, autoIncrement <span class="sy0">=</span> <span class="kw1">true</span><span class="br0">&#41;</span><span class="br0">&#93;</span>
<span class="kw1">public</span> <span class="kw4">class</span> DecoratedAddress <span class="br0">&#123;</span>
&nbsp; &nbsp; <span class="kw1">public</span> <span class="kw4">int</span> Id <span class="br0">&#123;</span> <span class="kw1">get</span><span class="sy0">;</span> <span class="kw1">set</span><span class="sy0">;</span> <span class="br0">&#125;</span>
&nbsp; &nbsp; <span class="kw1">public</span> <span class="kw4">string</span> Street <span class="br0">&#123;</span> <span class="kw1">get</span><span class="sy0">;</span> <span class="kw1">set</span><span class="sy0">;</span> <span class="br0">&#125;</span>
&nbsp; &nbsp; <span class="kw1">public</span> <span class="kw4">string</span> HouseNumber <span class="br0">&#123;</span> <span class="kw1">get</span><span class="sy0">;</span> <span class="kw1">set</span><span class="sy0">;</span> <span class="br0">&#125;</span>
<span class="br0">&#125;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">public void SelectUsingDecoratedClasses() {
	using (var db = GetDatabase()) {
		var results = db.Query&lt;DecoratedPerson, DecoratedAddress&gt;(
					@"SELECT Person.*, Address.* 
					  FROM Person 
						INNER JOIN Address ON Person.AddressId = Address.Id 
					  WHERE Person.lastname=@0", "lastname1");

		foreach (var person in results) {
			Console.WriteLine("Person: {0} {1}", person.LastName, person.FirstName);
			Console.WriteLine("Address: {0} {1}", person.Address.Street, person.Address.HouseNumber);
		}
	}
}

[TableName("Person")]
[PrimaryKey("Id", autoIncrement = true)]
public class DecoratedPerson {
	public int Id { get; set; }
	public string LastName { get; set; }
	public string FirstName { get; set; }
	public int AddressId { get; set; }

	[Ignore]
	public DecoratedAddress Address { get; set; }

	public override string ToString() {
		return String.Format("{0}: {1}, {2}", Id, LastName, FirstName);
	}
}

[TableName("Address")]
[PrimaryKey("Id", autoIncrement = true)]
public class DecoratedAddress {
	public int Id { get; set; }
	public string Street { get; set; }
	public string HouseNumber { get; set; }
}</pre></div></div>

<h3>Defining Mappings</h3>
<p>While the previous example handled the mapping automatically and assigned the Address instance to the appropriate attribute in the Person, we also have the ability to define the mapping manually. </p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="csharp"><thead><tr><td colspan="2"  class="head">C#</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
</pre></td><td class="de1"><pre class="de1"><span class="kw1">public</span> <span class="kw4">void</span> SelectUsingMappingAndPOCO<span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; <span class="kw1">using</span> <span class="br0">&#40;</span><span class="kw1">var</span> db <span class="sy0">=</span> GetDatabase<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">var</span> results <span class="sy0">=</span> db<span class="sy0">.</span><span class="me1">Query</span><span class="sy0">&lt;</span>Person, Address, Person<span class="sy0">&gt;</span><span class="br0">&#40;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#40;</span>p, a<span class="br0">&#41;</span> <span class="sy0">=&gt;</span> <span class="br0">&#123;</span> p<span class="sy0">.</span><span class="me1">Address</span> <span class="sy0">=</span> a<span class="sy0">;</span> <span class="kw1">return</span> p<span class="sy0">;</span> <span class="br0">&#125;</span>,
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="st_h">@&quot;SELECT Person.*, Address.* </span>
<span class="st_h">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; FROM Person </span>
<span class="st_h">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; INNER JOIN Address ON Person.AddressId = Address.Id </span>
<span class="st_h">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; WHERE Person.lastname=@0&quot;</span>, <span class="st0">&quot;lastname1&quot;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; 
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">foreach</span> <span class="br0">&#40;</span><span class="kw1">var</span> person <span class="kw1">in</span> results<span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Console<span class="sy0">.</span><span class="me1">WriteLine</span><span class="br0">&#40;</span><span class="st0">&quot;Person: {0} {1}&quot;</span>, person<span class="sy0">.</span><span class="me1">LastName</span>, person<span class="sy0">.</span><span class="me1">FirstName</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Console<span class="sy0">.</span><span class="me1">WriteLine</span><span class="br0">&#40;</span><span class="st0">&quot;Address: {0} {1}&quot;</span>, person<span class="sy0">.</span><span class="me1">Address</span><span class="sy0">.</span><span class="me1">Street</span>, person<span class="sy0">.</span><span class="me1">Address</span><span class="sy0">.</span><span class="me1">HouseNumber</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp; &nbsp; <span class="br0">&#125;</span>
<span class="br0">&#125;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">public void SelectUsingMappingAndPOCO() {
	using (var db = GetDatabase()) {
		var results = db.Query&lt;Person, Address, Person&gt;(
					(p, a) =&gt; { p.Address = a; return p; },
					@"SELECT Person.*, Address.* 
						FROM Person 
						INNER JOIN Address ON Person.AddressId = Address.Id 
						WHERE Person.lastname=@0", "lastname1");
		
		foreach (var person in results) {
			Console.WriteLine("Person: {0} {1}", person.LastName, person.FirstName);
			Console.WriteLine("Address: {0} {1}", person.Address.Street, person.Address.HouseNumber);
		}
	}
}</pre></div></div>

<p>While this example achieves the same outcome as the prior one, the ability to provide our own mapping gives us some flexibility to add more complex logic during the mapping process, such as calculating additional field values or adding change tracking.</p>
<h3>Dynamics</h3>
<p>Of course PetaPoco also handles dynamics, however this is limited to outputting a single object to represent the results. This works well if we wanted to present a report view of the data and didn&#8217;t have any column names that repeat:</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="csharp"><thead><tr><td colspan="2"  class="head">C#</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
</pre></td><td class="de1"><pre class="de1"><span class="kw1">public</span> <span class="kw4">void</span> SelectWithDynamics<span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; <span class="kw1">using</span> <span class="br0">&#40;</span><span class="kw1">var</span> db <span class="sy0">=</span> GetDatabase<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">var</span> results <span class="sy0">=</span> db<span class="sy0">.</span><span class="me1">Query</span><span class="sy0">&lt;</span><span class="kw4">dynamic</span><span class="sy0">&gt;</span><span class="br0">&#40;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="st_h">@&quot;SELECT Person.*, Address.Street, Address.HouseNumber </span>
<span class="st_h">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; FROM Person </span>
<span class="st_h">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; INNER JOIN Address ON Person.AddressId = Address.Id </span>
<span class="st_h">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; WHERE Person.lastname=@0&quot;</span>, <span class="st0">&quot;lastname1&quot;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">foreach</span> <span class="br0">&#40;</span><span class="kw1">var</span> person <span class="kw1">in</span> results<span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Console<span class="sy0">.</span><span class="me1">WriteLine</span><span class="br0">&#40;</span><span class="st0">&quot;Person: {0} {1}&quot;</span>, person<span class="sy0">.</span><span class="me1">LastName</span>, person<span class="sy0">.</span><span class="me1">FirstName</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Console<span class="sy0">.</span><span class="me1">WriteLine</span><span class="br0">&#40;</span><span class="st0">&quot;Address: {0} {1}&quot;</span>, person<span class="sy0">.</span><span class="me1">Street</span>, person<span class="sy0">.</span><span class="me1">HouseNumber</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp; &nbsp; <span class="br0">&#125;</span>
<span class="br0">&#125;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">public void SelectWithDynamics() {
	using (var db = GetDatabase()) {
		var results = db.Query&lt;dynamic&gt;(
					@"SELECT Person.*, Address.Street, Address.HouseNumber 
						FROM Person 
						INNER JOIN Address ON Person.AddressId = Address.Id 
						WHERE Person.lastname=@0", "lastname1");

		foreach (var person in results) {
			Console.WriteLine("Person: {0} {1}", person.LastName, person.FirstName);
			Console.WriteLine("Address: {0} {1}", person.Street, person.HouseNumber);
		}
	}
}</pre></div></div>

<p>Instead of a dynamic, we could just as easily create a POCO for this report view, which would then be easy to offer as a service DTO or serializable object. </p>
<h3>One-to-Many</h3>
<p>Switching directions for a moment, let&#8217;s instead query for an address and all of it&#8217;s associated persons. First we&#8217;ll need an updated POCO:</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="csharp"><thead><tr><td colspan="2"  class="head">C#</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
</pre></td><td class="de1"><pre class="de1"><span class="kw1">public</span> <span class="kw4">class</span> AddressWithPeople <span class="sy0">:</span> Address <span class="br0">&#123;</span> 
&nbsp; &nbsp; <span class="kw1">public</span> List<span class="sy0">&lt;</span>Person<span class="sy0">&gt;</span> Persons <span class="br0">&#123;</span> <span class="kw1">get</span><span class="sy0">;</span> <span class="kw1">set</span><span class="sy0">;</span> <span class="br0">&#125;</span>
<span class="br0">&#125;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">public class AddressWithPeople : Address { 
	public List&lt;Person&gt; Persons { get; set; }
}</pre></div></div>

<p>Then with a slightly more complex mapping method, we can map a one-to-many to our new AddressWithPeople and existing Person POCOs:</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="csharp"><thead><tr><td colspan="2"  class="head">C#</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
</pre></td><td class="de1"><pre class="de1"><span class="kw1">public</span> <span class="kw4">void</span> SelectOneToMany<span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; <span class="kw1">using</span> <span class="br0">&#40;</span><span class="kw1">var</span> db <span class="sy0">=</span> GetDatabase<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">var</span> results <span class="sy0">=</span> db<span class="sy0">.</span><span class="me1">Query</span><span class="sy0">&lt;</span>AddressWithPeople, Person, AddressWithPeople<span class="sy0">&gt;</span><span class="br0">&#40;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw3">new</span> AddressToPersonRelator<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">.</span><span class="me1">MapIt</span>,
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="st_h">@&quot;SELECT Address.*, Person.*</span>
<span class="st_h">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; FROM Person </span>
<span class="st_h">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; INNER JOIN Address ON Person.AddressId = Address.Id </span>
<span class="st_h">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; WHERE Address.Id=@0&quot;</span>, <span class="nu0">1</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">foreach</span> <span class="br0">&#40;</span><span class="kw1">var</span> address <span class="kw1">in</span> results<span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Console<span class="sy0">.</span><span class="me1">WriteLine</span><span class="br0">&#40;</span><span class="st0">&quot;Address: {0} {1}&quot;</span>, address<span class="sy0">.</span><span class="me1">Street</span>, address<span class="sy0">.</span><span class="me1">HouseNumber</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">foreach</span><span class="br0">&#40;</span><span class="kw1">var</span> person <span class="kw1">in</span> address<span class="sy0">.</span><span class="me1">Persons</span><span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Console<span class="sy0">.</span><span class="me1">WriteLine</span><span class="br0">&#40;</span><span class="st0">&quot;tPerson: {0} {1}&quot;</span>, person<span class="sy0">.</span><span class="me1">LastName</span>, person<span class="sy0">.</span><span class="me1">FirstName</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp; &nbsp; <span class="br0">&#125;</span>
<span class="br0">&#125;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">public void SelectOneToMany() {
	using (var db = GetDatabase()) {
		var results = db.Query&lt;AddressWithPeople, Person, AddressWithPeople&gt;(
					new AddressToPersonRelator().MapIt,
					@"SELECT Address.*, Person.*
						FROM Person 
						INNER JOIN Address ON Person.AddressId = Address.Id 
						WHERE Address.Id=@0", 1);

		foreach (var address in results) {
			Console.WriteLine("Address: {0} {1}", address.Street, address.HouseNumber);
			foreach(var person in address.Persons)
				Console.WriteLine("tPerson: {0} {1}", person.LastName, person.FirstName);
		}
	}
}</pre></div></div>

<p>Of course, the magic in this case is the tricky part. In order to map the objects from the right side of the result set to the columns from my address on the left, I had to write a custom mapper that would keep track of the Address and add Person records to it while it remained the same. </p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="csharp"><thead><tr><td colspan="2"  class="head">C#</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
</pre></td><td class="de1"><pre class="de1"><span class="kw1">public</span> <span class="kw4">class</span> AddressToPersonRelator <span class="br0">&#123;</span>
&nbsp; &nbsp; <span class="kw1">public</span> AddressWithPeople current<span class="sy0">;</span>
&nbsp; &nbsp; 
&nbsp; &nbsp; <span class="kw1">public</span> AddressWithPeople MapIt<span class="br0">&#40;</span>AddressWithPeople a, Person p<span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">if</span> <span class="br0">&#40;</span>a <span class="sy0">==</span> <span class="kw1">null</span><span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">return</span> current<span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">if</span> <span class="br0">&#40;</span>a <span class="sy0">!=</span> <span class="kw1">null</span> <span class="sy0">&amp;&amp;</span> current <span class="sy0">!=</span> <span class="kw1">null</span> <span class="sy0">&amp;&amp;</span> a<span class="sy0">.</span><span class="me1">Id</span> <span class="sy0">==</span> current<span class="sy0">.</span><span class="me1">Id</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; current<span class="sy0">.</span><span class="me1">Persons</span><span class="sy0">.</span><span class="kw1">Add</span><span class="br0">&#40;</span>p<span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">return</span> <span class="kw1">null</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">var</span> prev <span class="sy0">=</span> current<span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; current <span class="sy0">=</span> a<span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; current<span class="sy0">.</span><span class="me1">Persons</span> <span class="sy0">=</span> <span class="kw3">new</span> List<span class="sy0">&lt;</span>Person<span class="sy0">&gt;</span><span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span> p <span class="br0">&#125;</span><span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">return</span> prev<span class="sy0">;</span>
&nbsp; &nbsp; <span class="br0">&#125;</span>
<span class="br0">&#125;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">public class AddressToPersonRelator {
	public AddressWithPeople current;
	
	public AddressWithPeople MapIt(AddressWithPeople a, Person p) {
		if (a == null)
			return current;

		if (a != null &amp;&amp; current != null &amp;&amp; a.Id == current.Id) {
			current.Persons.Add(p);
			return null;
		}

		var prev = current;
		current = a;
		current.Persons = new List&lt;Person&gt;() { p };

		return prev;
	}
}</pre></div></div>

<p>Even though I mostly copied this code from the official blogs, it was still more work than I would have liked just to map the records. However it wouldn&#8217;t be hard to convert this method to use generics and accept arguments for ID comparison and adding child record to the parent&#8217;s collection. Another option would be to use the <a href="http://nuget.org/packages/PetaPoco.RelationExtensions" title="PetaPoco.RelationExtensions package">PetaPoco.RelationExtensions nuget</a> package, which offers simplified methods for one-to-many and many-to-one mappings.</p>
<h2>Conclusion</h2>
<p>Although Chrissie and I have been posting in parallel, I think we&#8217;ve reached the point where the feature sets diverge. Simple.Data obviously offers a simpler looking syntax for more complex JOINs (especially if we start looking at one-to-many) and offers fluent, LINQ-based syntax. PetaPoco offers a very clean, very simple way to continue to use SQL to get our data and map it into POCOs or dynamics, with the flexibility to do it for us automatically, with help from decorators, or via specified mapping functions (not to mention the blazing performance). Hopefully seeing us play back and forth a bit will have inspired you to play with one or both of these in the future, and don&#8217;t be surprised if you see them reused in some of my future projects as well.</p>
<p>The examples above and several related ones are available in the <a href="https://github.com/tarwn/PetaPocoSample" title="Source on Github">source on GitHub</a> as well as examples of the methods for updates and the upserting Save() method.</p>
]]></content:encoded>
			<wfw:commentRss>/index.php/desktopdev/mstech/csharp/petapoco-mapping-related-objects/feed/</wfw:commentRss>
		<slash:comments>1</slash:comments>
		</item>
		<item>
		<title>More PetaPoco: Id&#8217;s and Multi-POCO queries</title>
		<link>/index.php/desktopdev/mstech/csharp/more-petapoco-id-s-and/</link>
		<comments>/index.php/desktopdev/mstech/csharp/more-petapoco-id-s-and/#comments</comments>
		<pubDate>Wed, 02 May 2012 08:23:00 +0000</pubDate>
		<dc:creator><![CDATA[Eli Weinstock-Herman (tarwn)]]></dc:creator>
				<category><![CDATA[C#]]></category>
		<category><![CDATA[c#]]></category>
		<category><![CDATA[i heard you like followups]]></category>
		<category><![CDATA[micro orm]]></category>
		<category><![CDATA[petapoco]]></category>

		<guid isPermaLink="false">/index.php/2012/05/more-petapoco-id-s-and/</guid>
		<description><![CDATA[So yesterday Chrissie and I did posts on Simple.Data and PetaPoco. Today he followed up with more complex examples, including keys and multiple table queries.

PetaPoco is built specifically with primary keys as a first class citizen, so it will be in&#8230;]]></description>
				<content:encoded><![CDATA[<p>So yesterday Chrissie and I did posts on <a href="/index.php/DesktopDev/MSTech/simple-data-and-vb-net" title="Simple.Data and VB.Net the beginning">Simple.Data</a> and <a href="/index.php/DesktopDev/MSTech/CSharp/playing-with-petapoco" title="Playing with PetaPoco">PetaPoco</a>. Today he <a href="/index.php/DesktopDev/MSTech/more-simple-data-with-vb" title="More Simple.Data with VB.Net: adding fields and tables">followed up</a> with more complex examples, including keys and multiple table queries.</p>
<p>PetaPoco is built specifically with primary keys as a first class citizen, so it will be interesting to see how it compares.</p>
<h2>Adding a column</h2>
<p>Like Simple.Data, adding a column to our database table is no problem at all. First lets add the column to our database, then we&#8217;ll look at how that affects both our existing code and an updated POCO with a matching field.</p>
<p>Like before, I&#8217;ll use the more concise syntax of PetaPoco to add the column instead of the standard ADO logic:</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="csharp"><thead><tr><td colspan="2"  class="head">C#</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
</pre></td><td class="de1"><pre class="de1"><span class="kw1">private</span> <span class="kw4">void</span> CreateTable<span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; <span class="kw1">using</span> <span class="br0">&#40;</span><span class="kw1">var</span> db <span class="sy0">=</span> <span class="kw3">new</span> Database<span class="br0">&#40;</span><span class="st0">&quot;DataSource=&quot;</span>test<span class="sy0">.</span><span class="me1">sdf</span><span class="st0">&quot;; Password=&quot;</span>chrissiespassword<span class="st0">&quot;&quot;</span>, <span class="st0">&quot;System.Data.SqlServerCe.4.0&quot;</span><span class="br0">&#41;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; db<span class="sy0">.</span><span class="me1">Execute</span><span class="br0">&#40;</span><span class="st0">&quot;CREATE TABLE Person (Id int IDENTITY(1,1) PRIMARY KEY, LastName nvarchar (40) NOT NULL, FirstName nvarchar (40));&quot;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; <span class="br0">&#125;</span>
<span class="br0">&#125;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">private void CreateTable() {
	using (var db = new Database("DataSource="test.sdf"; Password="chrissiespassword"", "System.Data.SqlServerCe.4.0")) {
		db.Execute("CREATE TABLE Person (Id int IDENTITY(1,1) PRIMARY KEY, LastName nvarchar (40) NOT NULL, FirstName nvarchar (40));");
	}
}</pre></div></div>

<p>After adding this additional column, we can still use the original POCO as PetaPoco will map the columns that are present in the POCO without complaining about leftovers. In the case where we allowed PetaPoco to build the query for us, we get more concise SQL that only queries for the columns  with matching properties in that smaller POCO class:</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="csharp"><thead><tr><td colspan="2"  class="head">C#</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
</pre></td><td class="de1"><pre class="de1"><span class="co1">// SQL = SELECT [Person].[LastName], [Person].[FirstName] FROM [Person] WHERE lastname=@0</span>
<span class="kw1">private</span> <span class="kw4">void</span> SelectDecoratedRecords<span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; <span class="kw1">using</span> <span class="br0">&#40;</span><span class="kw1">var</span> db <span class="sy0">=</span> GetDatabase<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">var</span> results <span class="sy0">=</span> db<span class="sy0">.</span><span class="me1">Query</span><span class="sy0">&lt;</span>DecoratedPerson<span class="sy0">&gt;</span><span class="br0">&#40;</span><span class="st0">&quot;WHERE lastname=@0&quot;</span>, <span class="st0">&quot;lastname1&quot;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; <span class="br0">&#125;</span>
<span class="br0">&#125;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">// SQL = SELECT [Person].[LastName], [Person].[FirstName] FROM [Person] WHERE lastname=@0
private void SelectDecoratedRecords() {
	using (var db = GetDatabase()) {
		var results = db.Query&lt;DecoratedPerson&gt;("WHERE lastname=@0", "lastname1");
	}
}</pre></div></div>

<p>Now let&#8217;s add the new column to both our raw POCO and the decorated POCO:</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="csharp"><thead><tr><td colspan="2"  class="head">C#</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
</pre></td><td class="de1"><pre class="de1">&nbsp; &nbsp; <span class="kw1">public</span> <span class="kw4">class</span> Person <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">public</span> <span class="kw4">int</span> Id <span class="br0">&#123;</span> <span class="kw1">get</span><span class="sy0">;</span> <span class="kw1">set</span><span class="sy0">;</span> <span class="br0">&#125;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">public</span> <span class="kw4">string</span> LastName <span class="br0">&#123;</span> <span class="kw1">get</span><span class="sy0">;</span> <span class="kw1">set</span><span class="sy0">;</span> <span class="br0">&#125;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">public</span> <span class="kw4">string</span> FirstName <span class="br0">&#123;</span> <span class="kw1">get</span><span class="sy0">;</span> <span class="kw1">set</span><span class="sy0">;</span> <span class="br0">&#125;</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">public</span> <span class="kw1">override</span> <span class="kw4">string</span> ToString<span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">return</span> <span class="kw4">String</span><span class="sy0">.</span><span class="me1">Format</span><span class="br0">&#40;</span><span class="st0">&quot;{0}: {1}, {2}&quot;</span>, Id, LastName, FirstName<span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp;
&nbsp; &nbsp; <span class="br0">&#91;</span>TableName<span class="br0">&#40;</span><span class="st0">&quot;Person&quot;</span><span class="br0">&#41;</span><span class="br0">&#93;</span>
&nbsp; &nbsp; <span class="br0">&#91;</span>PrimaryKey<span class="br0">&#40;</span><span class="st0">&quot;Id&quot;</span>,autoIncrement<span class="sy0">=</span><span class="kw1">true</span><span class="br0">&#41;</span><span class="br0">&#93;</span>
&nbsp; &nbsp; <span class="kw1">public</span> <span class="kw4">class</span> DecoratedPerson <span class="sy0">:</span> Person <span class="br0">&#123;</span> <span class="br0">&#125;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">	public class Person {
		public int Id { get; set; }
		public string LastName { get; set; }
		public string FirstName { get; set; }

		public override string ToString() {
			return String.Format("{0}: {1}, {2}", Id, LastName, FirstName);
		}
	}

	[TableName("Person")]
	[PrimaryKey("Id",autoIncrement=true)]
	public class DecoratedPerson : Person { }</pre></div></div>

<p>Without changing of the logic, the function from above will populate the extra column in our non-decorated POCO and the SQL generated by the short query version above will now include the Id column:</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="csharp"><thead><tr><td colspan="2"  class="head">C#</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
</pre></td><td class="de1"><pre class="de1"><span class="co1">//SQL: SELECT * FROM Person WHERE lastname=@0</span>
<span class="kw1">private</span> <span class="kw4">void</span> SelectRecords<span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; <span class="kw1">using</span> <span class="br0">&#40;</span><span class="kw1">var</span> db <span class="sy0">=</span> GetDatabase<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">var</span> results <span class="sy0">=</span> db<span class="sy0">.</span><span class="me1">Query</span><span class="sy0">&lt;</span>Person<span class="sy0">&gt;</span><span class="br0">&#40;</span><span class="st0">&quot;SELECT * FROM Person WHERE lastname=@0&quot;</span>, <span class="st0">&quot;lastname1&quot;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; <span class="br0">&#125;</span>
<span class="br0">&#125;</span>
&nbsp;
<span class="co1">//SQL: SELECT [Person].[Id], [Person].[LastName], [Person].[FirstName] FROM [Person] WHERE lastname=@0</span>
<span class="kw1">private</span> <span class="kw4">void</span> SelectDecoratedRecords<span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; <span class="kw1">using</span> <span class="br0">&#40;</span><span class="kw1">var</span> db <span class="sy0">=</span> GetDatabase<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">var</span> results <span class="sy0">=</span> db<span class="sy0">.</span><span class="me1">Query</span><span class="sy0">&lt;</span>DecoratedPerson<span class="sy0">&gt;</span><span class="br0">&#40;</span><span class="st0">&quot;WHERE lastname=@0&quot;</span>, <span class="st0">&quot;lastname1&quot;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; <span class="br0">&#125;</span>
<span class="br0">&#125;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">//SQL: SELECT * FROM Person WHERE lastname=@0
private void SelectRecords() {
	using (var db = GetDatabase()) {
		var results = db.Query&lt;Person&gt;("SELECT * FROM Person WHERE lastname=@0", "lastname1");
	}
}

//SQL: SELECT [Person].[Id], [Person].[LastName], [Person].[FirstName] FROM [Person] WHERE lastname=@0
private void SelectDecoratedRecords() {
	using (var db = GetDatabase()) {
		var results = db.Query&lt;DecoratedPerson&gt;("WHERE lastname=@0", "lastname1");
	}
}</pre></div></div>

<p>Yesterdays third insert option, using an undecorated object and counting on reflection to match up columns to properties, will fail now because it will attempt to insert a value into that ID field, but using it in a select would still work. The first option, where we supplied the name of the table, will have to be updated to also supply the name of the ID and a boolean to indicate that it is autoincrementing. The second option, inserting the decorated object, requires no changes at all. </p>
<h2>Adding a Table</h2>
<p>Following Chrissie&#8217;s lead, lets add an address table and an undeclared foreign key relationship from the Person table (I have to tease him about something).</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="csharp"><thead><tr><td colspan="2"  class="head">C#</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
</pre></td><td class="de1"><pre class="de1"><span class="kw1">private</span> <span class="kw4">void</span> CreateTables<span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; <span class="kw1">using</span> <span class="br0">&#40;</span><span class="kw1">var</span> db <span class="sy0">=</span> <span class="kw3">new</span> Database<span class="br0">&#40;</span><span class="st0">&quot;DataSource=&quot;</span>test<span class="sy0">.</span><span class="me1">sdf</span><span class="st0">&quot;; Password=&quot;</span>chrissiespassword<span class="st0">&quot;&quot;</span>, <span class="st0">&quot;System.Data.SqlServerCe.4.0&quot;</span><span class="br0">&#41;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; db<span class="sy0">.</span><span class="me1">Execute</span><span class="br0">&#40;</span><span class="st0">&quot;CREATE TABLE Person (Id int IDENTITY(1,1) PRIMARY KEY, LastName nvarchar (40) NOT NULL, FirstName nvarchar (40), AddressId int NOT NULL);&quot;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; db<span class="sy0">.</span><span class="me1">Execute</span><span class="br0">&#40;</span><span class="st0">&quot;CREATE TABLE Address (Id int IDENTITY(1,1) PRIMARY KEY, Street nvarchar (40) NOT NULL, HouseNumber nvarchar (10));&quot;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; <span class="br0">&#125;</span>
<span class="br0">&#125;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">private void CreateTables() {
	using (var db = new Database("DataSource="test.sdf"; Password="chrissiespassword"", "System.Data.SqlServerCe.4.0")) {
		db.Execute("CREATE TABLE Person (Id int IDENTITY(1,1) PRIMARY KEY, LastName nvarchar (40) NOT NULL, FirstName nvarchar (40), AddressId int NOT NULL);");
		db.Execute("CREATE TABLE Address (Id int IDENTITY(1,1) PRIMARY KEY, Street nvarchar (40) NOT NULL, HouseNumber nvarchar (10));");
	}
}</pre></div></div>

<p>And I will add an additional Person POCO to reflect the new column, as well as an Address POCO to reflect the new table. The simpler query logic is addictive, so I&#8217;ve decorated both POCOs (I&#8217;ll explain the ResultColumn later):</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="csharp"><thead><tr><td colspan="2"  class="head">C#</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
</pre></td><td class="de1"><pre class="de1"><span class="br0">&#91;</span>TableName<span class="br0">&#40;</span><span class="st0">&quot;Person&quot;</span><span class="br0">&#41;</span><span class="br0">&#93;</span>
<span class="br0">&#91;</span>PrimaryKey<span class="br0">&#40;</span><span class="st0">&quot;Id&quot;</span>, autoIncrement <span class="sy0">=</span> <span class="kw1">true</span><span class="br0">&#41;</span><span class="br0">&#93;</span>
<span class="kw1">public</span> <span class="kw4">class</span> Person <span class="br0">&#123;</span>
&nbsp; &nbsp; <span class="kw1">public</span> <span class="kw4">int</span> Id <span class="br0">&#123;</span> <span class="kw1">get</span><span class="sy0">;</span> <span class="kw1">set</span><span class="sy0">;</span> <span class="br0">&#125;</span>
&nbsp; &nbsp; <span class="kw1">public</span> <span class="kw4">string</span> LastName <span class="br0">&#123;</span> <span class="kw1">get</span><span class="sy0">;</span> <span class="kw1">set</span><span class="sy0">;</span> <span class="br0">&#125;</span>
&nbsp; &nbsp; <span class="kw1">public</span> <span class="kw4">string</span> FirstName <span class="br0">&#123;</span> <span class="kw1">get</span><span class="sy0">;</span> <span class="kw1">set</span><span class="sy0">;</span> <span class="br0">&#125;</span>
&nbsp; &nbsp; <span class="kw1">public</span> <span class="kw4">int</span> AddressId <span class="br0">&#123;</span> <span class="kw1">get</span><span class="sy0">;</span> <span class="kw1">set</span><span class="sy0">;</span> <span class="br0">&#125;</span>
&nbsp; &nbsp; <span class="br0">&#91;</span>ResultColumn<span class="br0">&#93;</span> <span class="kw1">public</span> Address Address <span class="br0">&#123;</span> <span class="kw1">get</span><span class="sy0">;</span> <span class="kw1">set</span><span class="sy0">;</span> <span class="br0">&#125;</span>
&nbsp;
&nbsp; &nbsp; <span class="kw1">public</span> <span class="kw1">override</span> <span class="kw4">string</span> ToString<span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">return</span> <span class="kw4">String</span><span class="sy0">.</span><span class="me1">Format</span><span class="br0">&#40;</span><span class="st0">&quot;{0}: {1}, {2}&quot;</span>, Id, LastName, FirstName<span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; <span class="br0">&#125;</span>
<span class="br0">&#125;</span>
&nbsp;
<span class="br0">&#91;</span>TableName<span class="br0">&#40;</span><span class="st0">&quot;Address&quot;</span><span class="br0">&#41;</span><span class="br0">&#93;</span>
<span class="br0">&#91;</span>PrimaryKey<span class="br0">&#40;</span><span class="st0">&quot;Id&quot;</span>, autoIncrement <span class="sy0">=</span> <span class="kw1">true</span><span class="br0">&#41;</span><span class="br0">&#93;</span>
<span class="kw1">public</span> <span class="kw4">class</span> Address <span class="br0">&#123;</span>
&nbsp; &nbsp; <span class="kw1">public</span> <span class="kw4">int</span> Id <span class="br0">&#123;</span> <span class="kw1">get</span><span class="sy0">;</span> <span class="kw1">set</span><span class="sy0">;</span> <span class="br0">&#125;</span>
&nbsp; &nbsp; <span class="kw1">public</span> <span class="kw4">string</span> Street <span class="br0">&#123;</span> <span class="kw1">get</span><span class="sy0">;</span> <span class="kw1">set</span><span class="sy0">;</span> <span class="br0">&#125;</span>
&nbsp; &nbsp; <span class="kw1">public</span> <span class="kw4">string</span> HouseNumber <span class="br0">&#123;</span> <span class="kw1">get</span><span class="sy0">;</span> <span class="kw1">set</span><span class="sy0">;</span> <span class="br0">&#125;</span>
<span class="br0">&#125;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">[TableName("Person")]
[PrimaryKey("Id", autoIncrement = true)]
public class Person {
	public int Id { get; set; }
	public string LastName { get; set; }
	public string FirstName { get; set; }
	public int AddressId { get; set; }
	[ResultColumn] public Address Address { get; set; }

	public override string ToString() {
		return String.Format("{0}: {1}, {2}", Id, LastName, FirstName);
	}
}

[TableName("Address")]
[PrimaryKey("Id", autoIncrement = true)]
public class Address {
	public int Id { get; set; }
	public string Street { get; set; }
	public string HouseNumber { get; set; }
}</pre></div></div>

<p>Following Chrissie&#8217;s lead, I&#8217;ll query for the related records separately first:</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="csharp"><thead><tr><td colspan="2"  class="head">C#</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
</pre></td><td class="de1"><pre class="de1"><span class="kw1">public</span> <span class="kw4">void</span> QuerySeperately<span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; <span class="co1">// already called CreateDatabase()</span>
&nbsp; &nbsp; <span class="co1">// already called CreateTables()</span>
&nbsp; &nbsp; <span class="kw1">using</span> <span class="br0">&#40;</span><span class="kw1">var</span> db <span class="sy0">=</span> GetDatabase<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; db<span class="sy0">.</span><span class="me1">Insert</span><span class="br0">&#40;</span><span class="kw3">new</span> Address<span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span> Street <span class="sy0">=</span> <span class="st0">&quot;street1&quot;</span>, HouseNumber <span class="sy0">=</span> <span class="st0">&quot;1&quot;</span> <span class="br0">&#125;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; db<span class="sy0">.</span><span class="me1">Insert</span><span class="br0">&#40;</span><span class="kw3">new</span> Person<span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span> LastName <span class="sy0">=</span> <span class="st0">&quot;lastname1&quot;</span>, FirstName <span class="sy0">=</span> <span class="st0">&quot;firstname1&quot;</span>, AddressId <span class="sy0">=</span> <span class="nu0">1</span> <span class="br0">&#125;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; db<span class="sy0">.</span><span class="me1">Insert</span><span class="br0">&#40;</span><span class="kw3">new</span> Person<span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span> LastName <span class="sy0">=</span> <span class="st0">&quot;lastname2&quot;</span>, FirstName <span class="sy0">=</span> <span class="st0">&quot;firstname2&quot;</span>, AddressId <span class="sy0">=</span> <span class="nu0">1</span> <span class="br0">&#125;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">var</span> results <span class="sy0">=</span> db<span class="sy0">.</span><span class="me1">Query</span><span class="sy0">&lt;</span>Person<span class="sy0">&gt;</span><span class="br0">&#40;</span><span class="st0">&quot;WHERE LastName=@0&quot;</span>, <span class="st0">&quot;lastname1&quot;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">foreach</span> <span class="br0">&#40;</span><span class="kw1">var</span> person <span class="kw1">in</span> results<span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Console<span class="sy0">.</span><span class="me1">WriteLine</span><span class="br0">&#40;</span><span class="st0">&quot;Person: {0} {1} {2}&quot;</span>, person<span class="sy0">.</span><span class="me1">Id</span>, person<span class="sy0">.</span><span class="me1">LastName</span>, person<span class="sy0">.</span><span class="me1">FirstName</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">var</span> address <span class="sy0">=</span> db<span class="sy0">.</span><span class="me1">Single</span><span class="sy0">&lt;</span>Address<span class="sy0">&gt;</span><span class="br0">&#40;</span><span class="st0">&quot;Where Id=@0&quot;</span>, person<span class="sy0">.</span><span class="me1">AddressId</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Console<span class="sy0">.</span><span class="me1">WriteLine</span><span class="br0">&#40;</span><span class="st0">&quot;Address: {0} {1}&quot;</span>, address<span class="sy0">.</span><span class="me1">Street</span>, address<span class="sy0">.</span><span class="me1">HouseNumber</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw4">int</span> count <span class="sy0">=</span> db<span class="sy0">.</span><span class="me1">ExecuteScalar</span><span class="sy0">&lt;</span><span class="kw4">int</span><span class="sy0">&gt;</span><span class="br0">&#40;</span><span class="st0">&quot;SELECT COUNT(*) FROM Person WHERE LastName=@0&quot;</span>, <span class="st0">&quot;lastname1&quot;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; Console<span class="sy0">.</span><span class="me1">WriteLine</span><span class="br0">&#40;</span><span class="st0">&quot;Count: &quot;</span> <span class="sy0">+</span> count<span class="sy0">.</span><span class="me1">ToString</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; <span class="br0">&#125;</span>
<span class="br0">&#125;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">public void QuerySeperately() {
	// already called CreateDatabase()
	// already called CreateTables()
	using (var db = GetDatabase()) {
		db.Insert(new Address() { Street = "street1", HouseNumber = "1" });
		db.Insert(new Person() { LastName = "lastname1", FirstName = "firstname1", AddressId = 1 });
		db.Insert(new Person() { LastName = "lastname2", FirstName = "firstname2", AddressId = 1 });

		var results = db.Query&lt;Person&gt;("WHERE LastName=@0", "lastname1");
		foreach (var person in results) {
			Console.WriteLine("Person: {0} {1} {2}", person.Id, person.LastName, person.FirstName);
			var address = db.Single&lt;Address&gt;("Where Id=@0", person.AddressId);
			Console.WriteLine("Address: {0} {1}", address.Street, address.HouseNumber);
		}

		int count = db.ExecuteScalar&lt;int&gt;("SELECT COUNT(*) FROM Person WHERE LastName=@0", "lastname1");
		Console.WriteLine("Count: " + count.ToString());
	}
}</pre></div></div>

<p>As he pointed out, this method doesn&#8217;t perform well. We can replace this with a single query using the <a href="http://www.toptensoftware.com/Articles/111/PetaPoco-Experimental-Multi-Poco-Queries" title="Read more about this at TopTen Software">Multi-POCO</a> support.</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="csharp"><thead><tr><td colspan="2"  class="head">C#</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
</pre></td><td class="de1"><pre class="de1"><span class="kw1">public</span> <span class="kw4">void</span> QueryMultiStyle<span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span> 
&nbsp; &nbsp; <span class="co1">// already called CreateDatabase()</span>
&nbsp; &nbsp; <span class="co1">// already called CreateTables()</span>
&nbsp; &nbsp; <span class="kw1">using</span> <span class="br0">&#40;</span><span class="kw1">var</span> db <span class="sy0">=</span> GetDatabase<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; db<span class="sy0">.</span><span class="me1">Insert</span><span class="br0">&#40;</span><span class="kw3">new</span> Address<span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span> Street <span class="sy0">=</span> <span class="st0">&quot;street1&quot;</span>, HouseNumber <span class="sy0">=</span> <span class="st0">&quot;1&quot;</span> <span class="br0">&#125;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; db<span class="sy0">.</span><span class="me1">Insert</span><span class="br0">&#40;</span><span class="kw3">new</span> Person<span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span> LastName <span class="sy0">=</span> <span class="st0">&quot;lastname1&quot;</span>, FirstName <span class="sy0">=</span> <span class="st0">&quot;firstname1&quot;</span>, AddressId <span class="sy0">=</span> <span class="nu0">1</span> <span class="br0">&#125;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; db<span class="sy0">.</span><span class="me1">Insert</span><span class="br0">&#40;</span><span class="kw3">new</span> Person<span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span> LastName <span class="sy0">=</span> <span class="st0">&quot;lastname1&quot;</span>, FirstName <span class="sy0">=</span> <span class="st0">&quot;firstname2&quot;</span>, AddressId <span class="sy0">=</span> <span class="nu0">1</span> <span class="br0">&#125;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">var</span> results <span class="sy0">=</span> db<span class="sy0">.</span><span class="me1">Query</span><span class="sy0">&lt;</span>Person, Address<span class="sy0">&gt;</span><span class="br0">&#40;</span><span class="st_h">@&quot;</span>
<span class="st_h">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; SELECT Person.*, Address.* </span>
<span class="st_h">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; FROM Person </span>
<span class="st_h">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; INNER JOIN Address ON Person.AddressId = Address.Id </span>
<span class="st_h">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; WHERE Person.lastname=@0&quot;</span>, <span class="st0">&quot;lastname1&quot;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">foreach</span> <span class="br0">&#40;</span><span class="kw1">var</span> person <span class="kw1">in</span> results<span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Console<span class="sy0">.</span><span class="me1">WriteLine</span><span class="br0">&#40;</span><span class="st0">&quot;Person: {0} {1}&quot;</span>, person<span class="sy0">.</span><span class="me1">LastName</span>, person<span class="sy0">.</span><span class="me1">FirstName</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Console<span class="sy0">.</span><span class="me1">WriteLine</span><span class="br0">&#40;</span><span class="st0">&quot;Address: {0} {1}&quot;</span>, person<span class="sy0">.</span><span class="me1">Address</span><span class="sy0">.</span><span class="me1">Street</span>, person<span class="sy0">.</span><span class="me1">Address</span><span class="sy0">.</span><span class="me1">HouseNumber</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp; &nbsp; <span class="br0">&#125;</span>
<span class="br0">&#125;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">public void QueryMultiStyle() { 
	// already called CreateDatabase()
	// already called CreateTables()
	using (var db = GetDatabase()) {
		db.Insert(new Address() { Street = "street1", HouseNumber = "1" });
		db.Insert(new Person() { LastName = "lastname1", FirstName = "firstname1", AddressId = 1 });
		db.Insert(new Person() { LastName = "lastname1", FirstName = "firstname2", AddressId = 1 });

		var results = db.Query&lt;Person, Address&gt;(@"
							  SELECT Person.*, Address.* 
							  FROM Person 
								INNER JOIN Address ON Person.AddressId = Address.Id 
							  WHERE Person.lastname=@0", "lastname1");
		foreach (var person in results) {
			Console.WriteLine("Person: {0} {1}", person.LastName, person.FirstName);
			Console.WriteLine("Address: {0} {1}", person.Address.Street, person.Address.HouseNumber);
		}
	}
}</pre></div></div>

<p>PetaPoco has the ability to map the results of JOINs to several objects, but it&#8217;s kind of tricky. The simplest method is to return the fields in the same order as the generic object list. What PetaPoco then does is attempt to process each column in the result from left to right, moving to the next object in line when it reaches a column that doesn&#8217;t exist in the first or has already been populated. So in this case, because both of the tables and POCOs have an &#8220;Id&#8221;, when the result set reaches the second id it makes the logical conclusion that it is time to start mapping the Address object. PetaPoco uses type detection in the Person object to locate a property to assign the Address instance to.</p>
<p>There is also more extensive capabilities available to use lambdas to manage the multi-POCO mapping on our own, and if we wanted to we could easily define a single POCO object that had all the necessary fields for both tables. Logic for <a href="http://www.toptensoftware.com/Articles/115/PetaPoco-Mapping-One-to-Many-and-Many-to-One-Relationships" title="PetaPoco - Mapping One-to-Many and Many-to-One Relationships">One-to-many joins</a> is more complex and I haven&#8217;t had time to dig fully into the intricacies yet.</p>
<p>The last trick was the ResultColumn attribute I used above. By default PetaPoco assumes that all of the properties in our POCO are going to be inserted into the database. ResultColumn properties are ignored for inserts and updates, but can still be selected into. In this case I&#8217;m using it to have PetaPoco ignore the column, but the real purpose would be to allow me to return an additional calculated column, aggregate, or other value that wouldn&#8217;t have meaning in an INSERT or UPDATE. </p>
<p><i>Note: There is an Ignore attribute that would have worked just as well and been a better fit, but then I wouldn&#8217;t have had a chance to talk about the ResultColumn <img src="https://s.w.org/images/core/emoji/2/72x72/1f642.png" alt="🙂" class="wp-smiley" style="height: 1em; max-height: 1em;" /></i></p>
<h2>Conclusion</h2>
<p>So there we go. We can add auto-incrementing IDs very easily, PetaPoco is smart enough to map partial objects, and there is some really neat stuff available for multi-POCO joins. I&#8217;ve continued to update the <a href="https://github.com/tarwn/PetaPocoSample" title="Sample code on github">github repository</a>, so feel free to grab a copy of the code and play around with yourself.</p>
]]></content:encoded>
			<wfw:commentRss>/index.php/desktopdev/mstech/csharp/more-petapoco-id-s-and/feed/</wfw:commentRss>
		<slash:comments>5</slash:comments>
		</item>
	</channel>
</rss>
