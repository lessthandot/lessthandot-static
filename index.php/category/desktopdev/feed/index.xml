<?xml version="1.0" encoding="UTF-8"?><rss version="2.0"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:atom="http://www.w3.org/2005/Atom"
	xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
	xmlns:slash="http://purl.org/rss/1.0/modules/slash/"
	>

<channel>
	<title>Desktop Developer &#8211; LessthanDot</title>
	<atom:link href="/index.php/category/desktopdev/feed/" rel="self" type="application/rss+xml" />
	<link>/</link>
	<description>A Technical Community for IT Professionals</description>
	<lastBuildDate>Sat, 09 Mar 2019 12:50:36 +0000</lastBuildDate>
	<language>en-US</language>
	<sy:updatePeriod>hourly</sy:updatePeriod>
	<sy:updateFrequency>1</sy:updateFrequency>
	<generator>https://wordpress.org/?v=4.6.1</generator>
	<item>
		<title>Mapping Complex types to/from JSON with JSON.Net</title>
		<link>/index.php/webdev/serverprogramming/aspnet/mapping-complex-types-tofrom-json-with-json-net/</link>
		<comments>/index.php/webdev/serverprogramming/aspnet/mapping-complex-types-tofrom-json-with-json-net/#comments</comments>
		<pubDate>Fri, 07 Jul 2017 11:54:10 +0000</pubDate>
		<dc:creator><![CDATA[Eli Weinstock-Herman (tarwn)]]></dc:creator>
				<category><![CDATA[ASP.NET]]></category>
		<category><![CDATA[C#]]></category>
		<category><![CDATA[json]]></category>
		<category><![CDATA[json.net]]></category>

		<guid isPermaLink="false">/?p=8680</guid>
		<description><![CDATA[In an earlier post I introduced a strongly typed Identity object I am using in an ASP.Net Core application to make my code and error messages more readable. I didn&#8217;t wanted that extra complexity reflected in my database or over the wire with an API. In this post we&#8217;ll look at a simple method to [&#8230;]]]></description>
				<content:encoded><![CDATA[<p>In an <a href="/index.php/desktopdev/mstech/csharp/mapping-complex-types-tofrom-the-db-with-petapoco/">earlier post</a> I introduced a strongly typed Identity object I am using in an ASP.Net Core application to make my code and error messages more readable. I didn&#8217;t wanted that extra complexity reflected in my database or over the wire with an API. In this post we&#8217;ll look at a simple method to map my strongly typed properties in C# to simpler values in JSON.</p>
<p>This is my desired state:</p>
<div id="attachment_8690" style="width: 634px" class="wp-caption aligncenter"><img src="/wp-content/uploads/2017/07/TransparentIdentityType.png" alt="Transparent Server Side Identity Type" width="624" height="121" class="size-full wp-image-8690" srcset="/wp-content/uploads/2017/07/TransparentIdentityType.png 624w, /wp-content/uploads/2017/07/TransparentIdentityType-300x58.png 300w" sizes="(max-width: 624px) 100vw, 624px" /><p class="wp-caption-text">Transparent Server Side Identity Type</p></div>
<p>I want a strongly typed Identity object in my API backend that transparently converts into a simple int value to/from the database and converts to an int or <code>null</code> for the front-end (null in cases where a permanent ID hasn&#8217;t been assigned yet). The right side of this was handled in that earlier post with a PetaPoco IMapper implementation registered globally for IIdentity<int> types. JSON.Net supports a similar method that I can register with ASP.Net Core.</p>
<p>This is what my ASP.Net MVC Method looks like:</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="csharp"><thead><tr><td colspan="2"  class="head">C#</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
</pre></td><td class="de1"><pre class="de1"><span class="br0">&#91;</span>HttpGet<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#93;</span>
<span class="kw1">public</span> async Task<span class="sy0">&lt;</span>List<span class="sy0">&lt;</span>ApplicationDTO<span class="sy0">&gt;&gt;</span> GetAllAsync<span class="br0">&#40;</span><span class="br0">&#41;</span>
<span class="br0">&#123;</span>
&nbsp; &nbsp; <span class="kw1">return</span> await _databaseStore<span class="sy0">.</span><span class="me1">Applications</span><span class="sy0">.</span><span class="me1">GetAllAsync</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
<span class="br0">&#125;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">[HttpGet()]
public async Task&lt;List&lt;ApplicationDTO&gt;&gt; GetAllAsync()
{
	return await _databaseStore.Applications.GetAllAsync();
}</pre></div></div>

<p>And this is what we see over the wire:</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="javascript"><thead><tr><td colspan="2"  class="head">Javascript</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
</pre></td><td class="de1"><pre class="de1"><span class="br0">&#91;</span>
&nbsp; <span class="br0">&#123;</span><span class="st0">&quot;id&quot;</span><span class="sy0">:</span><span class="nu0">2</span><span class="sy0">,</span> <span class="st0">&quot;organizationId&quot;</span><span class="sy0">:</span><span class="nu0">1</span><span class="sy0">,</span> <span class="st0">&quot;name&quot;</span><span class="sy0">:</span><span class="st0">&quot;Fictitious Co, LLC Application&quot;</span><span class="br0">&#125;</span>
<span class="br0">&#93;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">[
  {"id":2, "organizationId":1, "name":"Fictitious Co, LLC Application"}
]</pre></div></div>

<p>Here is the definition of the ApplicationDTO object:</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="csharp"><thead><tr><td colspan="2"  class="head">C#</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
</pre></td><td class="de1"><pre class="de1"><span class="kw1">public</span> <span class="kw4">class</span> ApplicationDTO
<span class="br0">&#123;</span> &nbsp; 
&nbsp; &nbsp; <span class="br0">&#91;</span>Obsolete<span class="br0">&#40;</span><span class="st0">&quot;Serialization use only&quot;</span>, <span class="kw1">true</span><span class="br0">&#41;</span><span class="br0">&#93;</span>
&nbsp; &nbsp; <span class="kw1">public</span> ApplicationDTO<span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span> <span class="br0">&#125;</span>
&nbsp;
&nbsp; &nbsp; <span class="kw1">public</span> ApplicationDTO<span class="br0">&#40;</span>AppId id, OrganizationId organizationid, <span class="kw4">string</span> name<span class="br0">&#41;</span>
&nbsp; &nbsp; <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; Id <span class="sy0">=</span> id<span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; OrganizationId <span class="sy0">=</span> organizationid<span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; Name <span class="sy0">=</span> name<span class="sy0">;</span>
&nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp; &nbsp; 
&nbsp; &nbsp; <span class="kw1">public</span> AppId Id <span class="br0">&#123;</span> <span class="kw1">get</span><span class="sy0">;</span> <span class="kw1">set</span><span class="sy0">;</span> <span class="br0">&#125;</span>
&nbsp; &nbsp; &nbsp; &nbsp; 
&nbsp; &nbsp; <span class="kw1">public</span> OrganizationId OrganizationId <span class="br0">&#123;</span> <span class="kw1">get</span><span class="sy0">;</span> <span class="kw1">set</span><span class="sy0">;</span> <span class="br0">&#125;</span>
&nbsp; &nbsp; &nbsp; &nbsp; 
&nbsp; &nbsp; <span class="kw1">public</span> <span class="kw4">string</span> Name <span class="br0">&#123;</span> <span class="kw1">get</span><span class="sy0">;</span> <span class="kw1">set</span><span class="sy0">;</span> <span class="br0">&#125;</span>
<span class="br0">&#125;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">public class ApplicationDTO
{   
    [Obsolete("Serialization use only", true)]
    public ApplicationDTO() { }
 
    public ApplicationDTO(AppId id, OrganizationId organizationid, string name)
    {
        Id = id;
        OrganizationId = organizationid;
        Name = name;
    }
    
    public AppId Id { get; set; }
        
    public OrganizationId OrganizationId { get; set; }
        
    public string Name { get; set; }
}</pre></div></div>

<p>Here is the definition of the OrganizationId Identity:</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="csharp"><thead><tr><td colspan="2"  class="head">C#</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
</pre></td><td class="de1"><pre class="de1"><span class="kw1">public</span> <span class="kw4">class</span> OrganizationId <span class="sy0">:</span> IIdentity<span class="sy0">&lt;</span><span class="kw4">int</span><span class="sy0">&gt;</span>
<span class="br0">&#123;</span> &nbsp; 
&nbsp; &nbsp; <span class="br0">&#91;</span>Obsolete<span class="br0">&#40;</span><span class="st0">&quot;Serialization use only&quot;</span>, <span class="kw1">true</span><span class="br0">&#41;</span><span class="br0">&#93;</span>
&nbsp; &nbsp; <span class="kw1">public</span> OrganizationId<span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span> <span class="br0">&#125;</span>
&nbsp; &nbsp; &nbsp;
&nbsp; &nbsp; <span class="kw1">public</span> OrganizationId<span class="br0">&#40;</span><span class="kw4">int</span> id<span class="br0">&#41;</span>
&nbsp; &nbsp; <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; RawValue <span class="sy0">=</span> id<span class="sy0">;</span>
&nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp; &nbsp; &nbsp;
&nbsp; &nbsp; <span class="kw1">public</span> <span class="kw4">int</span> RawValue <span class="br0">&#123;</span> <span class="kw1">get</span><span class="sy0">;</span> <span class="kw1">set</span><span class="sy0">;</span> <span class="br0">&#125;</span>
<span class="br0">&#125;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">public class OrganizationId : IIdentity&lt;int&gt;
{   
	[Obsolete("Serialization use only", true)]
	public OrganizationId() { }
	 
	public OrganizationId(int id)
	{
		RawValue = id;
	}
	 
	public int RawValue { get; set; }
}</pre></div></div>

<p>These are both generated code, with some of the extras left out (potentially a future post).</p>
<h2>Implementing a JSON.Net Mapper</h2>
<p>JSON.Net supports custom JsonConverter implementations that will let us transparently convert between IIdentity<int> objects in C# and int values JSON:</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="csharp"><thead><tr><td colspan="2"  class="head">C#</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
</pre></td><td class="de1"><pre class="de1"><span class="kw1">public</span> <span class="kw4">class</span> IdentityJsonConverter<span class="sy0">&lt;</span>T<span class="sy0">&gt;</span> <span class="sy0">:</span> JsonConverter
<span class="br0">&#123;</span>
&nbsp; &nbsp; <span class="kw1">public</span> <span class="kw1">override</span> <span class="kw4">void</span> WriteJson<span class="br0">&#40;</span>JsonWriter writer, <span class="kw4">object</span> <span class="kw1">value</span>, JsonSerializer serializer<span class="br0">&#41;</span>
&nbsp; &nbsp; <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; writer<span class="sy0">.</span><span class="me1">WriteValue</span><span class="br0">&#40;</span><span class="br0">&#40;</span><span class="br0">&#40;</span>IIdentity<span class="sy0">&lt;</span>T<span class="sy0">&gt;</span><span class="br0">&#41;</span><span class="kw1">value</span><span class="br0">&#41;</span><span class="sy0">.</span><span class="me1">RawValue</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp;
&nbsp; &nbsp; <span class="kw1">public</span> <span class="kw1">override</span> <span class="kw4">object</span> ReadJson<span class="br0">&#40;</span>JsonReader reader, Type objectType, <span class="kw4">object</span> existingValue, JsonSerializer serializer<span class="br0">&#41;</span>
&nbsp; &nbsp; <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">if</span> <span class="br0">&#40;</span>reader<span class="sy0">.</span><span class="kw1">Value</span> <span class="sy0">!=</span> <span class="kw1">null</span><span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">var</span> ctor <span class="sy0">=</span> objectType<span class="sy0">.</span><span class="me1">GetConstructor</span><span class="br0">&#40;</span><span class="kw3">new</span> Type<span class="br0">&#91;</span><span class="br0">&#93;</span> <span class="br0">&#123;</span> <span class="kw3">typeof</span><span class="br0">&#40;</span>T<span class="br0">&#41;</span> <span class="br0">&#125;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">var</span> obj <span class="sy0">=</span> ctor<span class="sy0">.</span><span class="me1">Invoke</span><span class="br0">&#40;</span><span class="kw3">new</span> <span class="kw4">object</span><span class="br0">&#91;</span><span class="br0">&#93;</span> <span class="br0">&#123;</span> <span class="br0">&#40;</span>T<span class="br0">&#41;</span>Convert<span class="sy0">.</span><span class="me1">ChangeType</span><span class="br0">&#40;</span>reader<span class="sy0">.</span><span class="kw1">Value</span>, <span class="kw3">typeof</span><span class="br0">&#40;</span>T<span class="br0">&#41;</span><span class="br0">&#41;</span> <span class="br0">&#125;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">return</span> obj<span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">else</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">return</span> <span class="kw1">null</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp;
&nbsp; &nbsp; <span class="kw1">public</span> <span class="kw1">override</span> <span class="kw4">bool</span> CanConvert<span class="br0">&#40;</span>Type objectType<span class="br0">&#41;</span>
&nbsp; &nbsp; <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">return</span> <span class="kw3">typeof</span><span class="br0">&#40;</span>IIdentity<span class="sy0">&lt;</span>T<span class="sy0">&gt;</span><span class="br0">&#41;</span><span class="sy0">.</span><span class="me1">IsAssignableFrom</span><span class="br0">&#40;</span>objectType<span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; <span class="br0">&#125;</span>
<span class="br0">&#125;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">public class IdentityJsonConverter&lt;T&gt; : JsonConverter
{
    public override void WriteJson(JsonWriter writer, object value, JsonSerializer serializer)
    {
        writer.WriteValue(((IIdentity&lt;T&gt;)value).RawValue);
    }

    public override object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer)
    {
        if (reader.Value != null)
        {
            var ctor = objectType.GetConstructor(new Type[] { typeof(T) });
            var obj = ctor.Invoke(new object[] { (T)Convert.ChangeType(reader.Value, typeof(T)) });
            return obj;
        }
        else
        {
            return null;
        }
    }

    public override bool CanConvert(Type objectType)
    {
        return typeof(IIdentity&lt;T&gt;).IsAssignableFrom(objectType);
    }
}</pre></div></div>

<p>How it works:</p>
<p><code>CanConvert</code> identifies any implementations of IIdentity<int> as something this converter can handle. </p>
<p><code>WriteJson</code> is called when JSON.Net is converting to JSON and simply returns the underlying value of my Identity. </p>
<p><code>ReadJson</code> is called to convert from raw JSON to C#. Converting JSON is slightly more complex, as I allow for null values from the client (it doesn&#8217;t generate id&#8217;s) so when the JSON value is null I pass that on as a null Identity. If it&#8217;s not null, I use reflection on the concrete Identity to find the single parameter constructor and invoke it with incoming JSON converted to the expected type (<code>int</code> for the examples above). </p>
<p>If I wasn&#8217;t generating these Identity classes, there would be some risk in assuming the presence of a constructor of that shape. Because I&#8217;m generating it, I can save time because i know it&#8217;s all or nothing, either all of the Identity objects will work or none of them will. </p>
<h2>Employing it in ASP.Net</h2>
<p>To use this custom JSONConverter when ASP.Net is serializing/deserializing Action responses and inputs, I add JSON options to MVC during the ConfigureServics call of Startup:</p>
<p><b>Startup.cs</b></p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="csharp"><thead><tr><td colspan="2"  class="head">C#</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
</pre></td><td class="de1"><pre class="de1"><span class="kw1">public</span> IServiceProvider ConfigureServices<span class="br0">&#40;</span>IServiceCollection services<span class="br0">&#41;</span>
<span class="br0">&#123;</span>
&nbsp; &nbsp; <span class="co1">// Add framework services.</span>
&nbsp; &nbsp; services<span class="sy0">.</span><span class="me1">AddMvc</span><span class="br0">&#40;</span><span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="sy0">.</span><span class="me1">AddJsonOptions</span><span class="br0">&#40;</span>options <span class="sy0">=&gt;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; options<span class="sy0">.</span><span class="me1">SerializerSettings</span><span class="sy0">.</span><span class="me1">Converters</span><span class="sy0">.</span><span class="kw1">Add</span><span class="br0">&#40;</span><span class="kw3">new</span> IdentityJsonConverter<span class="sy0">&lt;</span>Int32<span class="sy0">&gt;</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp;<span class="co1">// ...</span>
<span class="br0">&#125;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">public IServiceProvider ConfigureServices(IServiceCollection services)
{
    // Add framework services.
    services.AddMvc()
            .AddJsonOptions(options =&gt; {
                options.SerializerSettings.Converters.Add(new IdentityJsonConverter&lt;Int32&gt;());
            });

   // ...
}</pre></div></div>

<p>Now all attempts to deserialize a value into an IIdentity property and serialization to respond with one of these values will pass through the custom mapper and I have the benefit of my custom type in my server-side logic without any extra overhead in my client-side app or code to write as I add new models or properties.</p>
]]></content:encoded>
			<wfw:commentRss>/index.php/webdev/serverprogramming/aspnet/mapping-complex-types-tofrom-json-with-json-net/feed/</wfw:commentRss>
		<slash:comments>1</slash:comments>
		</item>
		<item>
		<title>SPA Routing in ASP.Net Core</title>
		<link>/index.php/webdev/serverprogramming/aspnet/spa-routing-in-asp-net-core/</link>
		<comments>/index.php/webdev/serverprogramming/aspnet/spa-routing-in-asp-net-core/#respond</comments>
		<pubDate>Fri, 30 Jun 2017 11:58:40 +0000</pubDate>
		<dc:creator><![CDATA[Eli Weinstock-Herman (tarwn)]]></dc:creator>
				<category><![CDATA[ASP.NET]]></category>
		<category><![CDATA[C#]]></category>
		<category><![CDATA[asp.net core]]></category>
		<category><![CDATA[spa]]></category>

		<guid isPermaLink="false">/?p=8664</guid>
		<description><![CDATA[One of the challenges of SPA applications is making sure a bookmark or hard refresh knows how to load just enough of the content from the server before applying the client-side routing logic to that base page. This is not guaranteed to be the only way to do this, just the one that worked for [&#8230;]]]></description>
				<content:encoded><![CDATA[<p>One of the challenges of SPA applications is making sure a bookmark or hard refresh knows how to load just enough of the content from the server before applying the client-side routing logic to that base page.</p>
<p>This is not guaranteed to be the only way to do this, just the one that worked for me.</p>
<p><b>Goals:</b><br />
1. Static files to live in &#8220;Assets&#8221; instead of &#8220;wwwroot&#8221;<br />
2. Client-side routes like ~/configure/userScenarios to return ~/index.html when the browser loads them<br />
3. No extra work to remember when I add new configuration pages client-side</p>
<h2>Program.cs &#8211; Rename WebRoot</h2>
<p>In my Program.cs file, I renamed wwwroot to Assets:</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="csharp"><thead><tr><td colspan="2"  class="head">C#</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
</pre></td><td class="de1"><pre class="de1"><span class="kw1">public</span> <span class="kw1">static</span> <span class="kw4">void</span> Main<span class="br0">&#40;</span><span class="kw4">string</span><span class="br0">&#91;</span><span class="br0">&#93;</span> args<span class="br0">&#41;</span>
<span class="br0">&#123;</span>
&nbsp; &nbsp; <span class="kw1">var</span> host <span class="sy0">=</span> <span class="kw3">new</span> WebHostBuilder<span class="br0">&#40;</span><span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="sy0">.</span><span class="me1">UseKestrel</span><span class="br0">&#40;</span><span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="sy0">.</span><span class="me1">UseContentRoot</span><span class="br0">&#40;</span>Directory<span class="sy0">.</span><span class="me1">GetCurrentDirectory</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="sy0">.</span><span class="me1">UseWebRoot</span><span class="br0">&#40;</span><span class="st0">&quot;Assets&quot;</span><span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="sy0">.</span><span class="me1">UseIISIntegration</span><span class="br0">&#40;</span><span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="sy0">.</span><span class="me1">UseStartup</span><span class="sy0">&lt;</span>Startup<span class="sy0">&gt;</span><span class="br0">&#40;</span><span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="sy0">.</span><span class="me1">UseApplicationInsights</span><span class="br0">&#40;</span><span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="sy0">.</span><span class="me1">Build</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; host<span class="sy0">.</span><span class="me1">Run</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
<span class="br0">&#125;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">public static void Main(string[] args)
{
    var host = new WebHostBuilder()
        .UseKestrel()
        .UseContentRoot(Directory.GetCurrentDirectory())
        .UseWebRoot("Assets")
        .UseIISIntegration()
        .UseStartup&lt;Startup&gt;()
        .UseApplicationInsights()
        .Build();

    host.Run();
}</pre></div></div>

<h2>Startup.cs &#8211; Default Files, Assets, Client Routes</h2>
<p>Then in my Startup.cs file I added configuration to load &#8220;index.html&#8221; by default, static files in my &#8220;Assets&#8221; folder, and URL rewriting to rewrite client-side route patterns to the base &#8220;index.html&#8221; file:</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="csharp"><thead><tr><td colspan="2"  class="head">C#</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
</pre></td><td class="de1"><pre class="de1"><span class="kw1">public</span> <span class="kw4">void</span> Configure<span class="br0">&#40;</span>IApplicationBuilder app, IHostingEnvironment env, ILoggerFactory loggerFactory<span class="br0">&#41;</span>
<span class="br0">&#123;</span>
&nbsp; &nbsp;<span class="co1">// ...</span>
&nbsp;
&nbsp; &nbsp; <span class="co1">// rewrite client-side routes to return index.html</span>
&nbsp; &nbsp; <span class="kw1">var</span> options <span class="sy0">=</span> <span class="kw3">new</span> RewriteOptions<span class="br0">&#40;</span><span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="sy0">.</span><span class="me1">AddRewrite</span><span class="br0">&#40;</span><span class="st0">&quot;^testRuns.*&quot;</span>, <span class="st0">&quot;index.html&quot;</span>, skipRemainingRules<span class="sy0">:</span> <span class="kw1">true</span><span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="sy0">.</span><span class="me1">AddRewrite</span><span class="br0">&#40;</span><span class="st0">&quot;^configure/.*&quot;</span>, <span class="st0">&quot;index.html&quot;</span>, skipRemainingRules<span class="sy0">:</span> <span class="kw1">true</span><span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="sy0">.</span><span class="me1">AddRewrite</span><span class="br0">&#40;</span><span class="st0">&quot;^settings/.*&quot;</span>, <span class="st0">&quot;index.html&quot;</span>, skipRemainingRules<span class="sy0">:</span> <span class="kw1">true</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; app<span class="sy0">.</span><span class="me1">UseRewriter</span><span class="br0">&#40;</span>options<span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; <span class="co1">// index.html is the default if a file isn't asked for</span>
&nbsp; &nbsp; app<span class="sy0">.</span><span class="me1">UseDefaultFiles</span><span class="br0">&#40;</span><span class="kw3">new</span> DefaultFilesOptions<span class="br0">&#40;</span><span class="br0">&#41;</span>
&nbsp; &nbsp; <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; DefaultFileNames <span class="sy0">=</span> <span class="kw3">new</span> List<span class="sy0">&lt;</span><span class="kw4">string</span><span class="sy0">&gt;</span><span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span> <span class="st0">&quot;index.html&quot;</span> <span class="br0">&#125;</span>,
&nbsp; &nbsp; &nbsp; &nbsp; FileProvider <span class="sy0">=</span> <span class="kw3">new</span> PhysicalFileProvider<span class="br0">&#40;</span>Path<span class="sy0">.</span><span class="me1">Combine</span><span class="br0">&#40;</span>Directory<span class="sy0">.</span><span class="me1">GetCurrentDirectory</span><span class="br0">&#40;</span><span class="br0">&#41;</span>, <span class="st_h">@&quot;Assets&quot;</span><span class="br0">&#41;</span><span class="br0">&#41;</span>,
&nbsp; &nbsp; &nbsp; &nbsp; RequestPath <span class="sy0">=</span> <span class="kw3">new</span> PathString<span class="br0">&#40;</span><span class="st0">&quot;&quot;</span><span class="br0">&#41;</span>
&nbsp; &nbsp; <span class="br0">&#125;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; <span class="co1">// and all the rest of my static files live in Assets too</span>
&nbsp; &nbsp; app<span class="sy0">.</span><span class="me1">UseStaticFiles</span><span class="br0">&#40;</span><span class="kw3">new</span> StaticFileOptions<span class="br0">&#40;</span><span class="br0">&#41;</span>
&nbsp; &nbsp; <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; FileProvider <span class="sy0">=</span> <span class="kw3">new</span> PhysicalFileProvider<span class="br0">&#40;</span>Path<span class="sy0">.</span><span class="me1">Combine</span><span class="br0">&#40;</span>Directory<span class="sy0">.</span><span class="me1">GetCurrentDirectory</span><span class="br0">&#40;</span><span class="br0">&#41;</span>, <span class="st_h">@&quot;Assets&quot;</span><span class="br0">&#41;</span><span class="br0">&#41;</span>,
&nbsp; &nbsp; &nbsp; &nbsp; RequestPath <span class="sy0">=</span> <span class="kw3">new</span> PathString<span class="br0">&#40;</span><span class="st0">&quot;&quot;</span><span class="br0">&#41;</span>
&nbsp; &nbsp; <span class="br0">&#125;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; <span class="co1">// ...</span>
<span class="br0">&#125;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">public void Configure(IApplicationBuilder app, IHostingEnvironment env, ILoggerFactory loggerFactory)
{
   // ...

    // rewrite client-side routes to return index.html
    var options = new RewriteOptions()
        .AddRewrite("^testRuns.*", "index.html", skipRemainingRules: true)
        .AddRewrite("^configure/.*", "index.html", skipRemainingRules: true)
        .AddRewrite("^settings/.*", "index.html", skipRemainingRules: true);
    app.UseRewriter(options);

    // index.html is the default if a file isn't asked for
    app.UseDefaultFiles(new DefaultFilesOptions()
    {
        DefaultFileNames = new List&lt;string&gt;() { "index.html" },
        FileProvider = new PhysicalFileProvider(Path.Combine(Directory.GetCurrentDirectory(), @"Assets")),
        RequestPath = new PathString("")
    });

    // and all the rest of my static files live in Assets too
    app.UseStaticFiles(new StaticFileOptions()
    {
        FileProvider = new PhysicalFileProvider(Path.Combine(Directory.GetCurrentDirectory(), @"Assets")),
        RequestPath = new PathString("")
    });

    // ...
}</pre></div></div>

<p>I needed two Nuget packages:</p>
<ul>
<li>Install-Package Microsoft.AspNetCore.Rewrite</li>
<li>Install-Package Microsoft.AspNetCore.StaticFiles</li>
</ul>
<p>And the only ongoing work as I add to my application is when I add a new client-side route pattern for a new set of pages.</p>
]]></content:encoded>
			<wfw:commentRss>/index.php/webdev/serverprogramming/aspnet/spa-routing-in-asp-net-core/feed/</wfw:commentRss>
		<slash:comments>0</slash:comments>
		</item>
		<item>
		<title>Mapping Complex Types to/from the DB with PetaPoco</title>
		<link>/index.php/desktopdev/mstech/csharp/mapping-complex-types-tofrom-the-db-with-petapoco/</link>
		<comments>/index.php/desktopdev/mstech/csharp/mapping-complex-types-tofrom-the-db-with-petapoco/#respond</comments>
		<pubDate>Tue, 20 Jun 2017 10:30:47 +0000</pubDate>
		<dc:creator><![CDATA[Eli Weinstock-Herman (tarwn)]]></dc:creator>
				<category><![CDATA[C#]]></category>
		<category><![CDATA[petapoco]]></category>

		<guid isPermaLink="false">/?p=8660</guid>
		<description><![CDATA[Recently I was working on an application with rich C# objects that I wanted to store simplified in the database, without having to write custom logic for each new save or query that I add to the application. Luckily, the library I had chosen for data access (AsyncPoco, a variant Petapoco) has a mechanism that [&#8230;]]]></description>
				<content:encoded><![CDATA[<p>Recently I was working on an application with rich C# objects that I wanted to store simplified in the database, without having to write custom logic for each new save or query that I add to the application. Luckily, the library I had chosen for data access (<a href="https://github.com/tmenier/AsyncPoco">AsyncPoco</a>, a variant <a href="http://www.toptensoftware.com/petapoco/">Petapoco</a>) has a mechanism that can automatically map complex C# Types to simpler SQL types.</p>
<h2>Case 1: Strongly Typed Identities to SQL ints</h2>
<p>A complex web application can end up passing object id&#8217;s through any number of controller methods, business functions, or storage calls. It&#8217;s not hard to end up with a smattering of integer or GUIDs in the application to represent the id values, with limited meaning when appended to error messages, serialized, or represented in tests. Though it&#8217;s nice to see functions with strongly types ID objects (and error messages that don&#8217;t tell you &#8220;4 could not be found&#8221;), this can switch to a nuisance at API and database borders when it comes time to save or communicate those complex types.</p>
<p>Here&#8217;s an example Identity object (T4 generated):</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="csharp"><thead><tr><td colspan="2"  class="head">C#</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
</pre></td><td class="de1"><pre class="de1"><span class="kw1">public</span> <span class="kw4">class</span> OrganizationId <span class="sy0">:</span> IIdentity<span class="sy0">&lt;</span><span class="kw4">int</span><span class="sy0">&gt;</span>
<span class="br0">&#123;</span> &nbsp; 
<span class="br0">&#91;</span>Obsolete<span class="br0">&#40;</span><span class="st0">&quot;Serialization use only&quot;</span>, <span class="kw1">true</span><span class="br0">&#41;</span><span class="br0">&#93;</span>
<span class="kw1">public</span> OrganizationId<span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span> <span class="br0">&#125;</span>
&nbsp;
<span class="kw1">public</span> OrganizationId<span class="br0">&#40;</span><span class="kw4">int</span> id<span class="br0">&#41;</span>
<span class="br0">&#123;</span>
&nbsp; &nbsp; RawValue <span class="sy0">=</span> id<span class="sy0">;</span>
<span class="br0">&#125;</span>
&nbsp;
<span class="kw1">public</span> <span class="kw4">int</span> RawValue <span class="br0">&#123;</span> <span class="kw1">get</span><span class="sy0">;</span> <span class="kw1">set</span><span class="sy0">;</span> <span class="br0">&#125;</span>
&nbsp;
<span class="br0">&#125;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">public class OrganizationId : IIdentity&lt;int&gt;
{	
[Obsolete("Serialization use only", true)]
public OrganizationId() { }

public OrganizationId(int id)
{
	RawValue = id;
}

public int RawValue { get; set; }

}</pre></div></div>

<p>Here&#8217;s an Application object (also T4 generated) that references an AppId and OrganizationId:</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="csharp"><thead><tr><td colspan="2"  class="head">C#</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
</pre></td><td class="de1"><pre class="de1"><span class="kw1">public</span> <span class="kw4">class</span> ApplicationDTO
<span class="br0">&#123;</span> &nbsp; 
&nbsp; &nbsp; <span class="br0">&#91;</span>Obsolete<span class="br0">&#40;</span><span class="st0">&quot;Serialization use only&quot;</span>, <span class="kw1">true</span><span class="br0">&#41;</span><span class="br0">&#93;</span>
&nbsp; &nbsp; <span class="kw1">public</span> ApplicationDTO<span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span> <span class="br0">&#125;</span>
&nbsp;
&nbsp; &nbsp; <span class="kw1">public</span> ApplicationDTO<span class="br0">&#40;</span>AppId id, OrganizationId organizationid, <span class="kw4">string</span> name<span class="br0">&#41;</span>
&nbsp; &nbsp; <span class="br0">&#123;</span>
&nbsp; &nbsp; 
&nbsp; &nbsp; &nbsp; &nbsp; Id <span class="sy0">=</span> id<span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; OrganizationId <span class="sy0">=</span> organizationid<span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; Name <span class="sy0">=</span> name<span class="sy0">;</span>
&nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp; &nbsp; 
&nbsp; &nbsp; <span class="kw1">public</span> AppId Id <span class="br0">&#123;</span> <span class="kw1">get</span><span class="sy0">;</span> <span class="kw1">set</span><span class="sy0">;</span> <span class="br0">&#125;</span>
&nbsp; &nbsp; &nbsp; &nbsp; 
&nbsp; &nbsp; <span class="kw1">public</span> OrganizationId OrganizationId <span class="br0">&#123;</span> <span class="kw1">get</span><span class="sy0">;</span> <span class="kw1">set</span><span class="sy0">;</span> <span class="br0">&#125;</span>
&nbsp; &nbsp; &nbsp; &nbsp; 
&nbsp; &nbsp; <span class="kw1">public</span> <span class="kw4">string</span> Name <span class="br0">&#123;</span> <span class="kw1">get</span><span class="sy0">;</span> <span class="kw1">set</span><span class="sy0">;</span> <span class="br0">&#125;</span>
<span class="br0">&#125;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">public class ApplicationDTO
{	
	[Obsolete("Serialization use only", true)]
	public ApplicationDTO() { }

	public ApplicationDTO(AppId id, OrganizationId organizationid, string name)
	{
	
		Id = id;
		OrganizationId = organizationid;
		Name = name;
	}
	
	public AppId Id { get; set; }
		
	public OrganizationId OrganizationId { get; set; }
		
	public string Name { get; set; }
}</pre></div></div>

<p>Fetching these objects from the database requires no special markup over standard PetaPoco code, even though there are two int columns in the database that need to be expanded into very specific OrganizationId and AppId types in my ApplicationDTO object:</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="csharp"><thead><tr><td colspan="2"  class="head">C#</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
</pre></td><td class="de1"><pre class="de1"><span class="kw1">public</span> async Task<span class="sy0">&lt;</span>List<span class="sy0">&lt;</span>ApplicationDTO<span class="sy0">&gt;&gt;</span> GetAllAsync<span class="br0">&#40;</span>OrganizationId organizationId<span class="br0">&#41;</span>
&nbsp; &nbsp; <span class="kw1">using</span><span class="br0">&#40;</span><span class="kw1">var</span> db <span class="sy0">=</span> <span class="kw3">new</span> AsyncPoco<span class="sy0">.</span><span class="me1">Database</span><span class="br0">&#40;</span>_connection<span class="br0">&#41;</span><span class="br0">&#41;</span><span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">return</span> await db<span class="sy0">.</span><span class="me1">FetchAsync</span><span class="sy0">&lt;</span>ApplicationDTO<span class="sy0">&gt;</span><span class="br0">&#40;</span><span class="st0">&quot;SELECT * FROM Applications WHERE OrganizationId = @0;&quot;</span>, organizationId<span class="sy0">.</span><span class="me1">RawValue</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; <span class="br0">&#125;</span>
<span class="br0">&#125;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">public async Task&lt;List&lt;ApplicationDTO&gt;&gt; GetAllAsync(OrganizationId organizationId)
    using(var db = new AsyncPoco.Database(_connection)){
        return await db.FetchAsync&lt;ApplicationDTO&gt;("SELECT * FROM Applications WHERE OrganizationId = @0;", organizationId.RawValue);
    }
}</pre></div></div>

<p>This logic looks exactly the same as if I had two int properties on my object instead of two strongly typed identities and I get both my strongly typed C# objects and my simply typed integer database fields.</p>
<h2>Case 2: Mixed Array to varchar(MAX)</h2>
<p>In the second case, I have a workflow composed of steps, each described as an object Array (a parsed statement in a custom grammar). The database doesn’t need to know the details of the step beyond the fact that it hs an id, and order number, and that chunk of grammar representing the work fo the step. So in this case, I chose to map the step details from to a basic CSV value and store it in a varchar column.</p>
<p>This is the child-child-child class of the object I&#8217;m loading, UserStep:</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="csharp"><thead><tr><td colspan="2"  class="head">C#</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
</pre></td><td class="de1"><pre class="de1"><span class="kw1">public</span> <span class="kw4">class</span> UserStepDTO
<span class="br0">&#123;</span> &nbsp; 
&nbsp; &nbsp; <span class="br0">&#91;</span>Obsolete<span class="br0">&#40;</span><span class="st0">&quot;Serialization use only&quot;</span>, <span class="kw1">true</span><span class="br0">&#41;</span><span class="br0">&#93;</span>
&nbsp; &nbsp; <span class="kw1">public</span> UserStepDTO<span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span> <span class="br0">&#125;</span>
&nbsp;
&nbsp; &nbsp; <span class="kw1">public</span> UserStepDTO<span class="br0">&#40;</span>UserStepId id, <span class="kw4">int</span> ordernumber, <span class="kw4">object</span><span class="br0">&#91;</span><span class="br0">&#93;</span> step<span class="br0">&#41;</span>
&nbsp; &nbsp; <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; Id <span class="sy0">=</span> id<span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; OrderNumber <span class="sy0">=</span> ordernumber<span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; Step <span class="sy0">=</span> step<span class="sy0">;</span>
&nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp; &nbsp; 
&nbsp; &nbsp; <span class="kw1">public</span> UserStepId Id <span class="br0">&#123;</span> <span class="kw1">get</span><span class="sy0">;</span> <span class="kw1">set</span><span class="sy0">;</span> <span class="br0">&#125;</span>
&nbsp; &nbsp; &nbsp; &nbsp; 
&nbsp; &nbsp; <span class="kw1">public</span> <span class="kw4">int</span> OrderNumber <span class="br0">&#123;</span> <span class="kw1">get</span><span class="sy0">;</span> <span class="kw1">set</span><span class="sy0">;</span> <span class="br0">&#125;</span>
&nbsp; &nbsp; &nbsp; &nbsp; 
&nbsp; &nbsp; <span class="kw1">public</span> <span class="kw4">object</span><span class="br0">&#91;</span><span class="br0">&#93;</span> Step <span class="br0">&#123;</span> <span class="kw1">get</span><span class="sy0">;</span> <span class="kw1">set</span><span class="sy0">;</span> <span class="br0">&#125;</span>
<span class="br0">&#125;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">public class UserStepDTO
{	
	[Obsolete("Serialization use only", true)]
	public UserStepDTO() { }

	public UserStepDTO(UserStepId id, int ordernumber, object[] step)
	{
		Id = id;
		OrderNumber = ordernumber;
		Step = step;
	}
	
	public UserStepId Id { get; set; }
		
	public int OrderNumber { get; set; }
		
	public object[] Step { get; set; }
}</pre></div></div>

<p>I have a controlled set of types in the object array, so I just need to make sure I parse and encode them consistently.</p>
<p>Here is the table schema:</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="sql"><thead><tr><td colspan="2"  class="head">SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
</pre></td><td class="de1"><pre class="de1"><span class="kw1">CREATE</span> <span class="kw1">TABLE</span> dbo<span class="sy0">.</span>UserSteps<span class="br0">&#40;</span>
&nbsp; &nbsp; Id <span class="kw1">INT</span> <span class="kw1">IDENTITY</span><span class="br0">&#40;</span><span class="nu0">1</span><span class="sy0">,</span><span class="nu0">1</span><span class="br0">&#41;</span> <span class="kw1">NOT</span> <span class="kw1">NULL</span><span class="sy0">,</span>
&nbsp; &nbsp; OrderNumber <span class="kw1">INT</span> <span class="kw1">NOT</span> <span class="kw1">NULL</span><span class="sy0">,</span>
&nbsp; &nbsp; Step <span class="kw1">VARCHAR</span><span class="br0">&#40;</span><span class="kw1">MAX</span><span class="br0">&#41;</span> <span class="kw1">NOT</span> <span class="kw1">NULL</span><span class="sy0">,</span>
&nbsp; &nbsp; 
&nbsp; &nbsp; <span class="kw1">CONSTRAINT</span> PK_UserSteps <span class="kw1">PRIMARY</span> <span class="kw1">KEY</span> CLUSTERED<span class="br0">&#40;</span>Id <span class="kw1">ASC</span><span class="br0">&#41;</span><span class="sy0">,</span>
&nbsp; &nbsp; <span class="sy0">//</span> plus more constraints
<span class="br0">&#41;</span>;</pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">CREATE TABLE dbo.UserSteps(
	Id int IDENTITY(1,1) NOT NULL,
	OrderNumber int NOT NULL,
	Step varchar(MAX) NOT NULL,
	
	CONSTRAINT PK_UserSteps PRIMARY KEY CLUSTERED(Id ASC),
	// plus more constraints
);</pre></div></div>

<p>The actual query ends up being fairly complex, due to the upper layers of parent objects, but no extra work is done for this mapping.</p>
<h2>Registering Type Mapping with PetaPoco</h2>
<p>Even though I&#8217;m using AsyncPoco, a fork of PetaPoco that adds await/async capabilities, the method of defining and registering type mappers is the same.</p>
<p>I&#8217;m using the singleton registration method to register my mapper:</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="csharp"><thead><tr><td colspan="2"  class="head">C#</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
</pre></td><td class="de1"><pre class="de1"><span class="kw1">lock</span> <span class="br0">&#40;</span>_lock<span class="br0">&#41;</span>
<span class="br0">&#123;</span>
&nbsp; &nbsp; <span class="kw1">if</span> <span class="br0">&#40;</span>AsyncPoco<span class="sy0">.</span><span class="me1">Mappers</span><span class="sy0">.</span><span class="me1">GetMapper</span><span class="br0">&#40;</span><span class="kw3">typeof</span><span class="br0">&#40;</span>AppId<span class="br0">&#41;</span><span class="br0">&#41;</span> <span class="kw3">is</span> AsyncPoco<span class="sy0">.</span><span class="me1">StandardMapper</span><span class="br0">&#41;</span>
&nbsp; &nbsp; <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; AsyncPoco<span class="sy0">.</span><span class="me1">Mappers</span><span class="sy0">.</span><span class="me1">Register</span><span class="br0">&#40;</span>Assembly<span class="sy0">.</span><span class="me1">GetAssembly</span><span class="br0">&#40;</span><span class="kw3">typeof</span><span class="br0">&#40;</span>IIdentity<span class="br0">&#41;</span><span class="br0">&#41;</span>, <span class="kw3">new</span> IdentityMapper<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; <span class="br0">&#125;</span>
<span class="br0">&#125;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">lock (_lock)
{
    if (AsyncPoco.Mappers.GetMapper(typeof(AppId)) is AsyncPoco.StandardMapper)
    {
        AsyncPoco.Mappers.Register(Assembly.GetAssembly(typeof(IIdentity)), new IdentityMapper());
    }
}</pre></div></div>

<p>I can only register a mapper for a given type once, so I use a lock statement and see if my custom type is registered before attempting to register my increasingly poorly named &#8220;IdentityMapper&#8221;. I am actually registering this for anything that we attempt to load or save from that Assembly, which also includes objects like the UserStep one above. </p>
<p><i>Note: There are overloads to register for specific types instead of an entire assembly, but they weren&#8217;t working for me and I didn&#8217;t dig deep enough to determine what I had done wrong since I ended up wanting custom mapping for other objects in that assembly also.</i></p>
<p>This is my IMapper implementation for reading and writing the two cases above:</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="csharp"><thead><tr><td colspan="2"  class="head">C#</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
</pre></td><td class="de1"><pre class="de1"><span class="kw1">public</span> <span class="kw4">class</span> IdentityMapper <span class="sy0">:</span> IMapper
<span class="br0">&#123;</span>
&nbsp; &nbsp; <span class="kw1">private</span> StandardMapper standardMapper <span class="sy0">=</span> <span class="kw3">new</span> StandardMapper<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; <span class="kw1">public</span> ColumnInfo GetColumnInfo<span class="br0">&#40;</span>PropertyInfo pocoProperty<span class="br0">&#41;</span>
&nbsp; &nbsp; <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">return</span> standardMapper<span class="sy0">.</span><span class="me1">GetColumnInfo</span><span class="br0">&#40;</span>pocoProperty<span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp;
&nbsp; &nbsp; <span class="kw1">public</span> Func<span class="sy0">&lt;</span><span class="kw4">object</span>, <span class="kw4">object</span><span class="sy0">&gt;</span> GetFromDbConverter<span class="br0">&#40;</span>PropertyInfo targetProperty, Type sourceType<span class="br0">&#41;</span>
&nbsp; &nbsp; <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">var</span> t <span class="sy0">=</span> targetProperty<span class="sy0">.</span><span class="me1">PropertyType</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">if</span> <span class="br0">&#40;</span><span class="kw3">typeof</span><span class="br0">&#40;</span>IIdentity<span class="sy0">&lt;</span><span class="kw4">int</span><span class="sy0">&gt;</span><span class="br0">&#41;</span><span class="sy0">.</span><span class="me1">IsAssignableFrom</span><span class="br0">&#40;</span>t<span class="br0">&#41;</span><span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">var</span> ctor <span class="sy0">=</span> t<span class="sy0">.</span><span class="me1">GetConstructor</span><span class="br0">&#40;</span><span class="kw3">new</span> Type<span class="br0">&#91;</span><span class="br0">&#93;</span> <span class="br0">&#123;</span> <span class="kw3">typeof</span><span class="br0">&#40;</span>Int32<span class="br0">&#41;</span> <span class="br0">&#125;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">return</span> <span class="br0">&#40;</span>x<span class="br0">&#41;</span> <span class="sy0">=&gt;</span> ctor<span class="sy0">.</span><span class="me1">Invoke</span><span class="br0">&#40;</span><span class="kw3">new</span> <span class="kw4">object</span><span class="br0">&#91;</span><span class="br0">&#93;</span> <span class="br0">&#123;</span> <span class="br0">&#40;</span><span class="kw4">int</span><span class="br0">&#41;</span>x <span class="br0">&#125;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">else</span> <span class="kw1">if</span><span class="br0">&#40;</span>targetProperty<span class="sy0">.</span><span class="me1">Name</span><span class="sy0">.</span><span class="me1">Equals</span><span class="br0">&#40;</span><span class="st0">&quot;Step&quot;</span><span class="br0">&#41;</span> <span class="sy0">&amp;&amp;</span> t <span class="sy0">==</span> <span class="kw3">typeof</span><span class="br0">&#40;</span><span class="kw4">object</span><span class="br0">&#91;</span><span class="br0">&#93;</span><span class="br0">&#41;</span><span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">return</span> <span class="br0">&#40;</span>x<span class="br0">&#41;</span> <span class="sy0">=&gt;</span> BasicCsv<span class="sy0">.</span><span class="me1">Parse</span><span class="br0">&#40;</span><span class="br0">&#40;</span><span class="kw4">string</span><span class="br0">&#41;</span>x<span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">else</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">return</span> standardMapper<span class="sy0">.</span><span class="me1">GetFromDbConverter</span><span class="br0">&#40;</span>targetProperty, sourceType<span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp;
&nbsp; &nbsp; <span class="kw1">public</span> TableInfo GetTableInfo<span class="br0">&#40;</span>Type pocoType<span class="br0">&#41;</span>
&nbsp; &nbsp; <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">return</span> standardMapper<span class="sy0">.</span><span class="me1">GetTableInfo</span><span class="br0">&#40;</span>pocoType<span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp;
&nbsp; &nbsp; <span class="kw1">public</span> Func<span class="sy0">&lt;</span><span class="kw4">object</span>, <span class="kw4">object</span><span class="sy0">&gt;</span> GetToDbConverter<span class="br0">&#40;</span>PropertyInfo sourceProperty<span class="br0">&#41;</span>
&nbsp; &nbsp; <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">if</span> <span class="br0">&#40;</span><span class="kw3">typeof</span><span class="br0">&#40;</span>IIdentity<span class="sy0">&lt;</span><span class="kw4">int</span><span class="sy0">&gt;</span><span class="br0">&#41;</span><span class="sy0">.</span><span class="me1">IsAssignableFrom</span><span class="br0">&#40;</span>sourceProperty<span class="sy0">.</span><span class="me1">PropertyType</span><span class="br0">&#41;</span><span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">return</span> <span class="br0">&#40;</span>x<span class="br0">&#41;</span> <span class="sy0">=&gt;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">if</span> <span class="br0">&#40;</span>x <span class="sy0">==</span> <span class="kw1">null</span><span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">return</span> <span class="kw1">null</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">else</span> <span class="kw1">if</span> <span class="br0">&#40;</span><span class="kw3">typeof</span><span class="br0">&#40;</span>IIdentity<span class="sy0">&lt;</span><span class="kw4">int</span><span class="sy0">&gt;</span><span class="br0">&#41;</span><span class="sy0">.</span><span class="me1">IsAssignableFrom</span><span class="br0">&#40;</span>x<span class="sy0">.</span><span class="me1">GetType</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#41;</span><span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">return</span> <span class="br0">&#40;</span><span class="br0">&#40;</span>IIdentity<span class="sy0">&lt;</span><span class="kw4">int</span><span class="sy0">&gt;</span><span class="br0">&#41;</span>x<span class="br0">&#41;</span><span class="sy0">.</span><span class="me1">RawValue</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">else</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">return</span> x<span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">else</span> <span class="kw1">if</span> <span class="br0">&#40;</span>sourceProperty<span class="sy0">.</span><span class="me1">Name</span><span class="sy0">.</span><span class="me1">Equals</span><span class="br0">&#40;</span><span class="st0">&quot;Step&quot;</span><span class="br0">&#41;</span> <span class="sy0">&amp;&amp;</span> sourceProperty<span class="sy0">.</span><span class="me1">PropertyType</span> <span class="sy0">==</span> <span class="kw3">typeof</span><span class="br0">&#40;</span><span class="kw4">object</span><span class="br0">&#91;</span><span class="br0">&#93;</span><span class="br0">&#41;</span><span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">return</span> <span class="br0">&#40;</span>x<span class="br0">&#41;</span> <span class="sy0">=&gt;</span> BasicCsv<span class="sy0">.</span><span class="me1">Encode</span><span class="br0">&#40;</span><span class="br0">&#40;</span><span class="kw4">object</span><span class="br0">&#91;</span><span class="br0">&#93;</span><span class="br0">&#41;</span>x<span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">else</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">return</span> standardMapper<span class="sy0">.</span><span class="me1">GetToDbConverter</span><span class="br0">&#40;</span>sourceProperty<span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp; &nbsp;
<span class="br0">&#125;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">public class IdentityMapper : IMapper
{
    private StandardMapper standardMapper = new StandardMapper();

    public ColumnInfo GetColumnInfo(PropertyInfo pocoProperty)
    {
        return standardMapper.GetColumnInfo(pocoProperty);
    }

    public Func&lt;object, object&gt; GetFromDbConverter(PropertyInfo targetProperty, Type sourceType)
    {
        var t = targetProperty.PropertyType;
        if (typeof(IIdentity&lt;int&gt;).IsAssignableFrom(t))
        {
            var ctor = t.GetConstructor(new Type[] { typeof(Int32) });
            return (x) =&gt; ctor.Invoke(new object[] { (int)x });
        }
        else if(targetProperty.Name.Equals("Step") &amp;&amp; t == typeof(object[]))
        {
            return (x) =&gt; BasicCsv.Parse((string)x);
        }
        else
        {
            return standardMapper.GetFromDbConverter(targetProperty, sourceType);
        }
    }

    public TableInfo GetTableInfo(Type pocoType)
    {
        return standardMapper.GetTableInfo(pocoType);
    }

    public Func&lt;object, object&gt; GetToDbConverter(PropertyInfo sourceProperty)
    {
        if (typeof(IIdentity&lt;int&gt;).IsAssignableFrom(sourceProperty.PropertyType))
        {
            return (x) =&gt; {
                if (x == null)
                    return null;
                else if (typeof(IIdentity&lt;int&gt;).IsAssignableFrom(x.GetType()))
                    return ((IIdentity&lt;int&gt;)x).RawValue;
                else
                    return x;
                };
        }
        else if (sourceProperty.Name.Equals("Step") &amp;&amp; sourceProperty.PropertyType == typeof(object[]))
        {
            return (x) =&gt; BasicCsv.Encode((object[])x);
        }
        else
        {
            return standardMapper.GetToDbConverter(sourceProperty);
        }
    }
   
}</pre></div></div>

<p>Reading Case 1 (Identity): The GetFromDbConverter looks for IIdentity<int> and maps the basic integer from the database to the appropriately strongly-typed Identity object.</p>
<p>Writing Case 1 (Identity): The GetToDbConverter extracts the inner raw value and hands that off to store in the database.</p>
<p>Reading Case 2 (CSV): The GetFromFbConverter&#8217;s second case will perform a CSV parse to map a basic varchar(MAX) value to an object array, preserving string, date, and numeric values from the original.</p>
<p>Writing Case 2 (CSV): The GetToDbConverte ruses a simplistic CSV encoder to produce a value that can be consistently read by the prior method, without overhead for edge cases.</p>
<p>Note: I have found one exceptional case where this doesn&#8217;t work well. There are a couple cases where Petapoco assumes that it can use Convert.ChangeType on a value from the database to cast it into the expected value in your object, such as <A href="https://github.com/CollaboratingPlatypus/PetaPoco/blob/23a34d49b0c0ab74d04286174d8da9a1e1dc26b1/PetaPoco/Database.cs#L1349">autogenerated Identity fields during INSERTs</a>. Because it skips the use of mappers, you will receive a cast exception if you use a complex type for your identity field. If I find time, i&#8217;m going to dig in and write a patch for it.</p>
]]></content:encoded>
			<wfw:commentRss>/index.php/desktopdev/mstech/csharp/mapping-complex-types-tofrom-the-db-with-petapoco/feed/</wfw:commentRss>
		<slash:comments>0</slash:comments>
		</item>
		<item>
		<title>Python 3.5+: Unicode output for Windows Console</title>
		<link>/index.php/desktopdev/python-3-6-unicode-output-for-windows-console/</link>
		<comments>/index.php/desktopdev/python-3-6-unicode-output-for-windows-console/#respond</comments>
		<pubDate>Sun, 20 Nov 2016 16:10:02 +0000</pubDate>
		<dc:creator><![CDATA[Eli Weinstock-Herman (tarwn)]]></dc:creator>
				<category><![CDATA[Desktop Developer]]></category>
		<category><![CDATA[python]]></category>
		<category><![CDATA[unicode]]></category>

		<guid isPermaLink="false">/?p=4812</guid>
		<description><![CDATA[I&#8217;ve tripped over this on 2 machines now and end up at the same out of date StackOverflow post, so maybe this will help someone else. Python 3.5, not 3.6, I had that wrong initially 🙂 Situation When you try to print a string with a Unicode character to the console on Windows in Python, [&#8230;]]]></description>
				<content:encoded><![CDATA[<p>I&#8217;ve tripped over this on 2 machines now and end up at the same out of date StackOverflow post, so maybe this will help someone else.</p>
<div style="border: #FFCCCC 2px solid; background-color: #FFDDDD; padding: 1em;">Python 3.5, not 3.6, I had that wrong initially <img src="https://s.w.org/images/core/emoji/2/72x72/1f642.png" alt="🙂" class="wp-smiley" style="height: 1em; max-height: 1em;" /></div>
<p><b>Situation</b><br />
When you try to print a string with a Unicode character to the console on Windows in Python, you get:<br />
<code>UnicodeEncodeError: 'charmap' codec can't encode characters in position 20-21: character maps to &lt;undefined&gt;</code></p>
<p>Looking something like this:<br />
<div id="attachment_4813" style="width: 810px" class="wp-caption alignleft"><a href="/wp-content/uploads/2016/11/python_console_unicode_error.png"><img src="/wp-content/uploads/2016/11/python_console_unicode_error.png" alt="Python UnicodeEncodeError" width="800" class="size-full wp-image-4813" srcset="/wp-content/uploads/2016/11/python_console_unicode_error.png 868w, /wp-content/uploads/2016/11/python_console_unicode_error-300x54.png 300w" sizes="(max-width: 868px) 100vw, 868px" /></a><p class="wp-caption-text">Python UnicodeEncodeError</p></div></p>
<p><b>Fix</b><br />
Windows command-line supports unicode now, and Python 3.6+ ties into this support automatically (prior version requires win-unicode-console). You just need a slight bit of magic dust.</p>
<p>Add an environment variable named PYTHONIOENCODING to your environment settings, like so:<br />
<div id="attachment_4814" style="width: 595px" class="wp-caption alignleft"><a href="/wp-content/uploads/2016/11/envvars.png"><img src="/wp-content/uploads/2016/11/envvars.png" alt="PYTHONIOENCODING Environment Variable" width="585" height="101" class="size-full wp-image-4814" srcset="/wp-content/uploads/2016/11/envvars.png 585w, /wp-content/uploads/2016/11/envvars-300x51.png 300w" sizes="(max-width: 585px) 100vw, 585px" /></a><p class="wp-caption-text">PYTHONIOENCODING Environment Variable</p></div></p>
<p>And now when you execute, you get console output instead of an error:<br />
<div id="attachment_4815" style="width: 292px" class="wp-caption alignleft"><a href="/wp-content/uploads/2016/11/python_console_unicode_success.png"><img src="/wp-content/uploads/2016/11/python_console_unicode_success.png" alt="Python Console Output without Unicode Error" width="282" height="74" class="size-full wp-image-4815" /></a><p class="wp-caption-text">Python Console Output without Unicode Error</p></div></p>
]]></content:encoded>
			<wfw:commentRss>/index.php/desktopdev/python-3-6-unicode-output-for-windows-console/feed/</wfw:commentRss>
		<slash:comments>0</slash:comments>
		</item>
		<item>
		<title>Compiled list of C# + .Net Features</title>
		<link>/index.php/desktopdev/mstech/compiled-list-of-c-net-features/</link>
		<comments>/index.php/desktopdev/mstech/compiled-list-of-c-net-features/#comments</comments>
		<pubDate>Mon, 07 Sep 2015 10:16:29 +0000</pubDate>
		<dc:creator><![CDATA[Eli Weinstock-Herman (tarwn)]]></dc:creator>
				<category><![CDATA[C#]]></category>
		<category><![CDATA[Microsoft Technologies]]></category>
		<category><![CDATA[.net]]></category>
		<category><![CDATA[c#]]></category>

		<guid isPermaLink="false">/?p=4112</guid>
		<description><![CDATA[We have talked about doing this at work for a while, so I finally sat down this weekend and tried to make a list of C# features that the team could share. We intend to use this to help gauge who the best people are to ask questions in different areas (C# isn&#8217;t our only [&#8230;]]]></description>
				<content:encoded><![CDATA[<p>We have talked about doing this at work for a while, so I finally sat down this weekend and tried to make a list of C# features that the team could share. We intend to use this to help gauge who the best people are to ask questions in different areas (C# isn&#8217;t our only list) as well as a list of things to learn when you&#8217;re bored (after crossing off all the ones you know). I added in some of the .Net framework features to round the list off.</p>
<p>Based on their relevance in our team, I left some grouped together (like unsafe code and WPF) and broke others into details (ASP.Net). Do you see any I missed? How much of the list have you worked with in production?</p>
<h1>C# Language Features</h1>
<p><b>Statements:</b></p>
<ul>
<li>[C# 1.0] Iteration: for, foreach, while, do</li>
<li>[C# 1.0] Jump: break, continue, goto, return</li>
<li>[C# 1.0] Empty statement</li>
<li>[C# 1.0] Labeled statements</li>
<li>[C# 1.0] Conditional: if elseif else switch case default</li>
<li>[C# 1.0] Catching exceptions: try catch finally</li>
<li>[C# 1.0] Checked/Unchecked statements</li>
<li>[C# 1.0] lock</li>
<li>[C# 1.0] using</li>
</ul>
<p><b>Operators:</b></p>
<ul>
<li>[C# 1.0] Arithmetic + &#8211; * / %</li>
<li>[C# 1.0] Logical Comparisons &#038; | ^ ! ~ &#038;&#038; || true false</li>
<li>[C# 1.0] String concatenation</li>
<li>[C# 1.0] Increment/Decrement (++x &#8211;x x++ x&#8211;)</li>
<li>[C# 1.0] Binary Shift (<< >>)</li>
<li>[C# 1.0] Comparison (==   !=   <   >   <=   >=)</li>
<li>[C# 1.0] Assignment (=   +=   -=   *=   /=   %=   &#038;=   |=   ^=   <<=   >>=)</li>
<li>[C# 1.0] Indexing []</li>
<li>[C# 1.0] Cast ()</li>
<li>[C# 1.0] Conditional/Ternary (condition)?(if-true):(if-false)</li>
<li>[C# 2.0] Null Coalescing: ??</li>
<li>[C# 6.0] Null Propagation: ?.</li>
<li>[C# 1.0] Type Information as is sizeof typeof</li>
</ul>
<p><b>Language Features:</b></p>
<ul>
<li>[C# 1.0] Arrays</li>
<li>[C# 1.0] Operator Overloading</li>
<li>[C# 1.0] Inheritance: extends base</li>
<li>[C# 1.0] Hiding: new</li>
<li>[C# 1.0] Access modifiers: public protected private internal &#8220;protected internal&#8221;</li>
<li>[C# 1.0] Modifiers &#8211; static instance const virtual overrides sealed extern</li>
<li>[C# 1.0] Property Declaration</li>
<li>[C# 1.0] Constructors</li>
<li>[C# 1.0] Static Constructors</li>
<li>[C# 1.0] Destructors</li>
<li>[C# 1.0] Nested Classes</li>
<li>[C# 1.0] Events, Declaration and Usage</li>
<li>[C# 1.0] Indexers</li>
<li>[C# 1.0] Properties</li>
<li>[C# 1.0] Interfaces</li>
<li>[C# 1.0] Structs</li>
<li>[C# 1.0] Enums</li>
<li>[C# 1.0] Delegates</li>
<li>[C# 1.0] Exceptions</li>
<li>[C# 1.0] Attributes</li>
<li>[C# 1.0] Unsafe Code: unsafe contexts, pointers, fixed/moveable variables, stack allocation</li>
<li>[C# 1.0] Boxing and Unboxing</li>
<li>[C# 1.0] Application Startup/Termination: Main, termination status code</li>
<li>[C# 1.0] Preprocessor Conditionals: #if #elif #else #endif</li>
<li>[C# 1.0] Preprocessor Declarations: #define #undef</li>
<li>[C# 1.0] Preprocessor Debug: #error</li>
<li>[C# 1.0] Preprocessor Region: #region #endregion</li>
<li>[C# 1.0] Preprocessor Region: #line</li>
<li>[C# 2.0] Preprocessor Region: #pragma warning</li>
<li>[C# 2.0] Generics &#8211; Usage</li>
<li>[C# 2.0] Generic Class Declaration</li>
<li>[C# 2.0] Generic Constraints: &#8220;where T&#8221;</li>
<li>[C# 2.0] Anonymous methods (inline delegates, closures)</li>
<li>[C# 2.0] Iterators: yield</li>
<li>[C# 2.0] Static Classes</li>
<li>[C# 2.0] Partial types: &#8220;public partial class XYZ&#8221;</li>
<li>[C# 2.0] Nullable types: &#8220;int? x = null&#8221;</li>
<li>[C# 2.0] namespace aliases: &#8220;using xyz = System.IO;&#8221;</li>
<li>[C# 2.0] Default value expression: default()</li>
<li>[C# 2.0] Conditional attribute</li>
<li>[C# 2.0] Fixed size buffers</li>
<li>[C# 2.0] Delegate Covariance/Contravariance</li>
<li>[C# 2.0] Friend Assemblies: aka &#8220;oops we made everything internal&#8221;</li>
<li>[C# 3.0] Implicitly Typed Local Variables: var</li>
<li>[C# 3.0] Extension Methods</li>
<li>[C# 3.0] Lambda expressions</li>
<li>[C# 3.0] Generic method Type Inference</li>
<li>[C# 3.0] Object and Collection Initializers</li>
<li>[C# 3.0] Anonymouse types</li>
<li>[C# 3.0] Implicitly typed arrays</li>
<li>[C# 3.0] Query Expressions: from into in join let orderby group select</li>
<li>[C# 3.0] Automatically implemented properties: &#8220;public int X { get; set; }&#8221;</li>
<li>[C# 3.0] Partial method declaration</li>
<li>[C# 4.0] Covariance, Contravariance</li>
<li>[C# 4.0] Dynamic Dispatch: dynamic</li>
<li>[C# 4.0] Named Arguments and Optional Parameters (for Methods)</li>
<li>[C# 5.0] Async modified: async await</li>
<li>[C# 5.0] Caller Information Attributes</li>
<li>[C# 6.0] Roslyn &#8211; Compiler-as-a-service</li>
<li>[C# 6.0] Initializers for Automatic Properties</li>
<li>[C# 6.0] Getter-only Automatic Properties</li>
<li>[C# 6.0] Lambda Expressions for Method Declaration</li>
<li>[C# 6.0] Lambda Expressions for Property Body Declaration</li>
<li>[C# 6.0] Using static</li>
<li>[C# 6.0] Null-conditional operators</li>
<li>[C# 6.0] String interpolation</li>
<li>[C# 6.0] nameof</li>
<li>[C# 6.0] Index Initializers syntax improvement</li>
<li>[C# 6.0] Exception filters</li>
<li>[C# 6.0] Exception filters</li>
</ul>
<p>Where&#8217;s LINQ???!? In the .Net Framework of course:</p>
<h1>.Net Framework Features</h1>
<p><b>.Net 1.0</b></p>
<ul>
<li>Collections: ArrayList, HashTable, Dictionary</li>
<li>Threading &#8211; ThreadPool, Thread, ThreadStart</li>
<li>Threading &#8211; Synchronized Regions: SynchronizationAttribute, Monitor (lock/SyncLock)</li>
<li>Threading &#8211; Manual Synchronization: Interlocked, WaitHandle/Mutex, ManualResetEvent, AutoResetEvent</li>
<li>ADO.Net &#8211; Database access using: Connection, Command, DataReader, DbParameter</li>
<li>ASP.Net &#8211; WebForms</li>
<li>ASP.Net &#8211; ASMX</li>
<li>ASP.Net &#8211; ASHX</li>
<li>ASP.Net &#8211; Page output caching</li>
<li>ASP.Net &#8211; Application Cache</li>
</ul>
<p><b>.Net 2.0</b></p>
<ul>
<li>Threading &#8211; BackgroundWorker</li>
<li>Threading &#8211; SynchronizationContext</li>
<li>Generics</li>
<li>Generic Collections: List&lt;T&gt;, Stack&lt;T&gt;, Queue&lt;T&gt;, Dictionary&lt;TKey,TValue&gt;, LinkedList&lt;T&gt;, SortedDictionary&lt;TKey,TValue&gt;, ReadOnlyCollection&lt;T&gt;, etc</li>
<li>Nullable types</li>
<li>Partial Classes</li>
<li>Anonymous methods</li>
<li>Iterators</li>
<li>Data Protection API</li>
<li>Globalization: Culture, CultureInfo</li>
<li>System.Diagnostics.EventLog</li>
<li>System.Net.Mail</li>
<li>ResGen.exe</li>
<li>Threading &#8211; System.Threading.Semaphore</li>
<li>ADO.Net &#8211; Asynchronous Processing</li>
<li>ADO.Net &#8211; SqlBulkCopy</li>
<li>ADO.Net &#8211; SQL Server User Defined Types</li>
<li>ADO.Net &#8211; SQL Server Max Data Types</li>
<li>ADO.Net &#8211; DataSet + DataAdapter Batch Processing</li>
<li>ADO.Net &#8211; Query Notifications</li>
<li>ADO.Net &#8211; Connection Pool Control</li>
<li>ADO.Net &#8211; System.Transactions</li>
<li>ADO.Net &#8211; DataTableReader</li>
<li>ADO.Net &#8211; Multiple Active Result Sets (MARS)</li>
<li>ASP.Net &#8211; Master/Content pages</li>
<li>ASP.Net &#8211; WebParts</li>
<li>ASP.Net &#8211; Skins/Themes</li>
<li>ASP.Net &#8211; Membership</li>
<li>ASP.Net &#8211; Profiles and Custom Profile Properties</li>
<li>ASP.Net &#8211; Cache Profiles</li>
<li>ASP.Net &#8211; Microsoft AJAX</li>
</ul>
<p><b>.Net 3.0</b></p>
<ul>
<li>WCF</li>
<li>WPF</li>
<li>Windows Workflow Foundation 1.0</li>
<li>Windows CardSpace</li>
</ul>
<p><b>.Net 3.5</b></p>
<ul>
<li>.Net Compact Framework</li>
<li>System.AddIn</li>
<li>Collections &#8211; HashSet&lt;T&gt;, SortedSet&lt;T&gt;</li>
<li>Pipes</li>
<li>LINQ</li>
<li>LINQ &#8211; Expression Trees</li>
<li>ADO.Net &#8211; LINQ to SQL</li>
<li>ADO.Net &#8211; LINQ to Dataset</li>
<li>ADO.Net &#8211; Entity Data Model / Entity Framework 1</li>
<li>ASP.Net &#8211; ScriptManager, AJAX Controls</li>
<li>ASP.net &#8211; Dynamic Data</li>
<li>Silverlight</li>
</ul>
<p><b>.Net 4.0</b></p>
<ul>
<li>AppDomain Monitoring</li>
<li>Code Contracts</li>
<li>Covariance and Contravariance in Generics</li>
<li>Memory Mapped Files</li>
<li>Portable Class Libraries</li>
<li>Threading &#8211; PLINQ (pop quiz: does AsParallel() go at the beginning or end of your LINQ statement? Why?)</li>
<li>Threading &#8211; TPL &#8211; System.Threading.Tasks</li>
<li>Threading &#8211; Barrier, SpinWait, SpinLock, CancellationTokens, BlockingCollection&lt;T&gt;</li>
<li>Threading &#8211; ConcurrentStack, ConcurrentQueue, ConcurrentDictionary, ConcurrentBag</li>
<li>Tuples (*sigh*)</li>
<li>IObservable, Reactive Extensions</li>
<li>ADO.Net &#8211; Entity Framework 4</li>
<li>MEF</li>
<li>ASP.Net &#8211; HTML5 form types</li>
<li>ASP.Net &#8211; Bundling and minification</li>
<li>ASP.Net &#8211; WebSocket Support</li>
<li>ASP.Net &#8211; Asynchronous Requests/Responses</li>
<li>ASP.Net &#8211; System.Net.Http</li>
<li>ASP.Net &#8211; MVC</li>
<li>ASP.Net &#8211; Web API 1</li>
<li>ASP.Net &#8211; Extensible Cache &#8211; OutputCacheProvider</li>
<li>ASP.Net &#8211; Extensible Request Validation &#8211; RequestValidator</li>
<li>ASP.Net &#8211; Resource Monitoring &#8211; appDomainResourceMonitoring</li>
</ul>
<p><b>.Net 4.5, 4.6</b></p>
<ul>
<li>AppContext Compatibility Switches</li>
<li>.Net Native</li>
<li>Threading &#8211; TPL Dataflow</li>
<li>System.Net.Http</li>
<li>System.Net.WebSockets</li>
<li>ADO.Net &#8211; SQLClient Streaming Support</li>
<li>ADO.Net &#8211; Async for Connection, DbCommand, DbDataReader, SqlCommand, SqlDataReader, SqlBulkCopy</li>
<li>ADO.Net &#8211; AlwaysOn support</li>
<li>ADO.Net &#8211; LocalDB</li>
<li>ADO.Net &#8211; Entity Framework 5</li>
<li>ADO.Net &#8211; Extended Protection</li>
<li>ASP.Net &#8211; Web API 2</li>
<li>ASP.Net &#8211; OData</li>
</ul>
<p>Whew, and that doesn&#8217;t even count all of the extra nuget packages that are out there now&#8230;It&#8217;s hard to remember how we managed without some of this stuff back in the 1.0 and 1.1 days.</p>
]]></content:encoded>
			<wfw:commentRss>/index.php/desktopdev/mstech/compiled-list-of-c-net-features/feed/</wfw:commentRss>
		<slash:comments>2</slash:comments>
		</item>
		<item>
		<title>Web API 2 &#8211; don&#8217;t get caught with your parameters down</title>
		<link>/index.php/webdev/web-api-2-dont-get-caught-with-your-parameters-down/</link>
		<comments>/index.php/webdev/web-api-2-dont-get-caught-with-your-parameters-down/#respond</comments>
		<pubDate>Wed, 26 Aug 2015 02:51:31 +0000</pubDate>
		<dc:creator><![CDATA[Tahir Khalid]]></dc:creator>
				<category><![CDATA[ASP.NET]]></category>
		<category><![CDATA[C#]]></category>
		<category><![CDATA[Microsoft Technologies]]></category>
		<category><![CDATA[Server Programming]]></category>
		<category><![CDATA[Web Developer]]></category>
		<category><![CDATA[.net 4.5]]></category>
		<category><![CDATA[c#]]></category>
		<category><![CDATA[web api 2]]></category>
		<category><![CDATA[web development]]></category>

		<guid isPermaLink="false">/?p=4130</guid>
		<description><![CDATA[Hi, A quick post for anyone else who has been literally dying from a lack of sleep trying to workout something that should be fairly simple. Quick background:  I got interested in Web API after I decided to build a friend a simple booking website driven by HTML5, jquery and originally an ASP.NET/c# .NET 4 [&#8230;]]]></description>
				<content:encoded><![CDATA[<p>Hi,</p>
<p>A quick post for anyone else who has been literally dying from a lack of sleep trying to workout something that should be fairly simple.</p>
<p>Quick background:  I got interested in Web API after I decided to build a friend a simple booking website driven by HTML5, jquery and originally an ASP.NET/c# .NET 4 Web Service.  Having tested it out I came across a CORS related issue and being very impatient I just could not be bothered to work around it (and lets face it, if you have to do that with CORS its a hack in my book, it just doesn&#8217;t feel right in the dynamic world of Web API 2.x).</p>
<p>So I thought it was about time I looked at Web API proper and as 2.0 had recently surfaced it was a good a time as any to jump on board.</p>
<p>First things first I created a simple test app remembering my good friend Kevin&#8217;s advice to me: &#8220;keep that **** simple or I will come round and choke you out!&#8221; &#8211; no greater words spoken.  I followed this good tutorial to get me started: <a title="Getting Started with ASP.NET Web API 2 (C#)" href="http://www.asp.net/web-api/overview/getting-started-with-aspnet-web-api/tutorial-your-first-web-api" target="_blank"><span style="color: #000000">Getting Started with ASP.NET Web API 2 </span></a><span style="color: #898989"><a title="Getting Started with ASP.NET Web API 2 (C#)" href="http://www.asp.net/web-api/overview/getting-started-with-aspnet-web-api/tutorial-your-first-web-api" target="_blank">(C#)</a> </span>however what seems to be a common occurrence with me, shit just goes wrong!</p>
<p>So what gives? Well I kept getting the dreaded 404 error when I adapted the tutorial to my simple project which consists of the following:</p>
<ul>
<li>HTML page that has a $.getJSON block which calls the uri (for this simple test I did which was to call a parameter less method, well I tried)</li>
<li>Web API 2 project consisting of:
<ul>
<li>simple entity called TestMessage that has a couple of properties like name, messagetext</li>
<li>simple controller inheriting from ApiController and implementing an IHttpActionResult method called GetMessage()</li>
</ul>
</li>
</ul>
<p>So noting too fancy:</p>
<pre>    public class TestMessage
    {
        public string Name{ get; set; }
        public string MessageText { get; set; }
    }</pre>
<p>The controller class:</p>
<pre>public IHttpActionResult GetMessage()
{
   return Ok("{}");
}</pre>
<p>The little gotcha above btw is that you need a return JSON object or null otherwise you will get a failed response at the client side, not the least of my worries though as I was getting another 404 message:</p>
<p>&#8220;No matching action method found in the selected controller&#8221;</p>
<p>Awesome, just what I was expecting!  I thought okay simple enough just a mismatch somewhere but nope wasn&#8217;t anything I tried and I spent days scouring through Stack Overflow (and occasionally crying) and other online resources (part of the problem being I had no clue what my question was to begin with or rather the correct search terms, this came later after much much pain and vomiting).</p>
<p>Some bright spark suggested decorating the method but that completely breaks the new Web API pattern, just didn&#8217;t seem right and felt like a major hack again so I went back to trying to workout how and why I was getting this 404 issue.  I even tried changing my client side call from $.getJSON to the old school $.Ajax making a GET call but still failed until I eventually came across a great post that set me on the right track (but wasn&#8217;t quite the complete solution).</p>
<p>By the way at any point in your development hell you go through this, make sure you get a handle on how to debug Web API using resources like <a title="Get Firebug" href="http://getfirebug.com/" target="_blank">Firebug </a>(Chrome Debugger is good but the layout is too shitty for me and I hate Google anyway) and <a title="Fiddler" href="http://www.telerik.com/fiddler" target="_blank">Fiddler </a>(an awesome tool for composing JSON requests and tracking requests/responses for stuff like Web API).</p>
<p>First I came across this great article by a cool developer called Dave Ward (author of the Encosia website): &#8220;<a title="Using jQuery to POST [FromBody] parameters to Web API" href="http://encosia.com/using-jquery-to-post-frombody-parameters-to-web-api/" target="_blank">Using jQuery to POST [FromBody] parameters to Web API</a>&#8221; however when I followed the steps mentioned by Dave I was still getting some problems namely I was not able to post any kind of JSON data using the getJSON jquery method so what the hell was going on, again?!  Well the first part was resolved by using the [FromBody] as suggested by Dave but something else was still causing my request to turn to shit.</p>
<p><span style="color: #999999"><em>Disclaimer: Shit is a universal word used by developers and has a neutral meaning neither an offensive or defensive word but cool all the same!</em></span></p>
<p>Turns out the JSON data was being passed in as a string and therefore just being ignored and set to null and the solution lay here in this awesome Stack Overflow post: <a title="http://stackoverflow.com/a/29978090" href="http://stackoverflow.com/a/29978090" target="_blank">http://stackoverflow.com/a/29978090</a></p>
<p>Yep everything is awesome now so the second part of the solution was to set the type of the incoming parameter to that of my entity i.e. the TestMessage class I pasted earlier in this post and then in my getJSON jquery method I did something like this:</p>
<pre>        function SendMessage() {
            $.getJSON("http://localhost/api/message/getmessage, { "name": "kermit", 
                      "messagetext": "hello, LTD!" })

                .done(function (data) {
                    $('#message').text("OK");
                })
                .fail(function (jqXHR, textStatus, err) {
                    $('#message').text('Error: ' + err);
                });
        }</pre>
<p>And hey presto all sorted.   What we did here was to create a complex parameter using a JSON format which is then passed through to the controller action GetMessage.  I expanded on this by making my action more complex using the excellent <a title="Newtonsoft Json.Net" href="http://www.newtonsoft.com/json" target="_blank">Newtonsoft JSON library</a> to assist with deserialising the data, inflating an entity and then building up an email message to send out using the <a title="System.Net.Mail Namespace" href="https://msdn.microsoft.com/en-us/library/system.net.mail(v=vs.110).aspx" target="_blank">System.Net.Mail</a> namespace.</p>
<p>Well that worked for me and I hope it works for you!</p>
]]></content:encoded>
			<wfw:commentRss>/index.php/webdev/web-api-2-dont-get-caught-with-your-parameters-down/feed/</wfw:commentRss>
		<slash:comments>0</slash:comments>
		</item>
		<item>
		<title>Windows 10, how I doth hateth thee mostest</title>
		<link>/index.php/sysadmins/windows-10-how-i-doth-hateth-thee-mostest/</link>
		<comments>/index.php/sysadmins/windows-10-how-i-doth-hateth-thee-mostest/#respond</comments>
		<pubDate>Tue, 25 Aug 2015 16:00:15 +0000</pubDate>
		<dc:creator><![CDATA[Tahir Khalid]]></dc:creator>
				<category><![CDATA[IT Professionals]]></category>
		<category><![CDATA[Microsoft Technologies]]></category>
		<category><![CDATA[System Admins]]></category>
		<category><![CDATA[Windows]]></category>
		<category><![CDATA[Windows 8]]></category>
		<category><![CDATA[windows]]></category>
		<category><![CDATA[windows 10]]></category>
		<category><![CDATA[windows 8.1]]></category>

		<guid isPermaLink="false">/?p=4121</guid>
		<description><![CDATA[How&#8217;s it going folks, thought I&#8217;d get another post written up before I switch over to video logs in the future (watch this space). So I don&#8217;t really need to do a big introduction to Windows 10, there was a lot of buzz going about the internet not least due in part to the upgrade [&#8230;]]]></description>
				<content:encoded><![CDATA[<p>How&#8217;s it going folks, thought I&#8217;d get another post written up before I switch over to video logs in the future (watch this space).</p>
<p>So I don&#8217;t really need to do a big introduction to Windows 10, there was a lot of buzz going about the internet not least due in part to the upgrade icon that appeared in the notification tray (from Windows 7 to Windows 8.1) and like many people I became curious as to what exactly Windows 10 would mean to me and the rest of the world. I hadn&#8217;t looked at the beta and the RC releases that came out for Windows 10 even through they were available to developers about a year ago but this was mostly because I had made the jump from Windows 7 to Windows 8 (ouch) and then to Windows 8.1 Professional (easily the best version to date but more on this later).</p>
<p>I remember some of the early hype surrounding Windows 10 namely around the technology and what it would offer (the same sort of hype that appeared before Windows 7 was released to the wild) but the biggest one was how it would revolutionise the Windows desktop and make development more exciting with the introduction of dedicated tools for Universal App&#8217;s &#8211; great I thought this could be a step in the right direction. We had seen some of the buzz already with the announcement of ASP.NET 5 and related technologies such as .NET Core as well as releasing chunks of the code to the community via github (<a title="Announcing ASP.NET 5" href="http://www.hanselman.com/blog/AnnouncingNET2015NETAsOpenSourceNETOnMacAndLinuxAndVisualStudioCommunity.aspx" target="_blank">ASP.NET 5</a>).  Along with this news we saw Visual Studio Community Edition and Visual Studio Code hinting at a future where we would not be tied down to a Windows desktop and could code on anything from Linux to OS X  &#8211; more cool stuff! So I bought into the hype and I reserved my copy and while I did not have a compelling reason to upgrade from a rock solid Windows 8.1 Professional platform (running on an HP Elitebook 8560w Mobile Workstation) I was hopeful that Windows 10 would build on the great work of Windows 8.1 (wishful thinking I know).</p>
<p>Before I hear &#8220;ah but Windows 8 was crap dude it was the Vista of this generation!&#8221;, yes true but Windows 8.1 for me was the saving grace, they got it right but due to some negligence or poor marketing most of the general public had no clue that Windows 8.1 was an entirely different product, better in a million ways (and most still don&#8217;t know this) so they chose to ignore it and stick to Windows 7 (which still ins&#8217;t a bad move). I have to give it to Microsoft, they generated the right buzz by allowing people to reserve their digital download of Windows 10.  Word-of-mouth is powerful marketing tool and that&#8217;s exactly what happened here (albeit through the power of social media like Twitter, Facebook and Email) and in this case it was enough to get people to want to get their digital copy of Windows 10 and install it including myself where I couldn&#8217;t wait so I went ahead and downloaded <a title="Windows 10 Download Toolkit" href="https://www.microsoft.com/en-us/software-download/windows10" target="_blank"><strong>this</strong></a> toolkit from Microsoft to create my own ISO locally.</p>
<p>After following the instructions to create the external media, I selected ISO and waited while the toolkit proceeded to download the necessary files and create an ISO for me (I recommend you go make a cup of tea at this point).  After the ISO was created I extracted the files to a folder on my C:\ drive and then ran the setup and followed the on-screen instructions to upgrade Windows 8.1 to Windows 10 (choosing to retain my Data &amp; Apps).   This was quite a smooth process all but 1 of my applications worked however here is where the fun started&#8230; We are led to believe that the upgrade process is seamless however its was anything but, I had to reinstall all my drivers for them to work again (even though Windows 10 reported everything as being functional) and if you don&#8217;t do this you will start experiencing strange problems from your SSD drive not running at full speed, CPU running in a stepped state to sound being 50% of its actual volume.</p>
<p>About an hour later I was up and running properly and Windows 10 started to behave, initially very impressed, loved the subtle desktop UI design touches and this time almost everything has a WPF interface to it which is great (to a point) but again Microsoft screwed up here as some screens are just not thought out properly where a typical WinForms dialog has not been thoughtfully transformed over to it&#8217;s WPF counterpart or rather it&#8217;s been over engineered and what should be a simple interface becomes a multi-screen click nightmare (more on this later). Then we have the issue with the CPU running hot. On my humble HP Mobile Workstation I have to keep an eye on the CPU temp as it can run hot (as it&#8217;s meant to) but I had it set up a particular way in Windows 8.1 (using a combination of <a title="Core Temp" href="http://alcpu.com/CoreTemp/" target="_blank">Core Temp </a>and the awesome <a title="Notebook FanControl" href="https://github.com/hirschmann/nbfc" target="_blank">Notebook FanControl</a> by <span style="font-weight: bold">Stefan Hirschmann) </span>so that the system ran cool and quiet more often however the same did not transfer over to Windows 10 so easily and I found for whatever reason the CPU was running at least 5% hotter than on Windows 8.1 and more often (and this seems to be a common problem where many notebook users have reverted back to Windows 7 due to this issue). So what would be causing this problem and why?</p>
<p>Try as I might I could not pin point the issue and Windows 10 would not give up any clues suggesting everything was idle when it obviously wasn&#8217;t and the CPU was busy doing something in the background.  Eventually I found the culprit but try to remedy the problems actually broke Windows 10 functionality and let me explain how. The reason the CPU was running hotter is because it was actually busy doing some work for Cortana, the humble Paperclip evolved through AI, sex change acquiring a female voice and making you believe it can do anything (no Cortana&#8217;s last name is not Jenner, I did check). I saw this before, in Windows 7 a long time ago and some people caught on to what Microsoft was up to and these invisible background processes were removed form subsequent service pack releases.</p>
<p>In the case of Windows 10 you are literally lied to, nothing is reported as running, the event viewer screen doesn&#8217;t record any activity yet when you fire up Systools Process Monitor there is a feint trace of activity &#8211; this behavior is the same as what malware and malicious applications have, not good Microsoft! So to follow up on my hunch I disabled the search features of Cortana complete, opted out of the other sub features and while this reduced the CPU activity (and heat) it did not completely remedy the problem as the CPU was still obviously doing something causing it to heat up &#8211; one idea could be drivers but surely Microsoft would have had plenty of time to sort this out especially for something as common as an i7 QuadCore sandybridge CPU.</p>
<p>But that wasn&#8217;t the last of my issues either; At this point I was quite satisfied I had remedied the teething problems (to be expected with a new system) and was willing to give Windows 10 another go (heck I had been praising it on Twitter for days) but then I was horrified to find the system had been crippled because I had disabled Cortana and the other sub features but we are never made aware of this and Microsoft for obvious reasons didn&#8217;t announce this fact either. So what are the symptoms?  Firstly you will notice the new Start panel doesn&#8217;t work properly, some tiles don&#8217;t appear, some apps won&#8217;t show up on the search and fundamental core applications simply disappear unless you enable search features again&#8230;why would Microsoft do this, what a shitty thing to do!</p>
<p>So this obviously had me concerned as did the fact that Cortana wanted to know EVERYTHING about me, intercept everything I did, socially and via messaging to which said &#8220;YOU&#8217;RE HAVING A LAUGH MATE!&#8221; and promptly renamed Cortana to something else beginning with C and ending with Face. I had a moan on Twitter obviously at this point and to be fair Microsoft Support were quick to respond asking me to try using the built-in feedback and support application, cool&#8230;hold on you muppets that won&#8217;t work because I disabled Cortana so that native application doesn&#8217;t appear anymore but wait there is more bullcakes to follow.</p>
<p>I then followed the link in Windows 10 to join some program that lets me get early releases of updates and software which in turn also enables the feedback feature however this is stuck in an infinite loop of death and you never ever get the feedback app or get to actually provide any feedback &#8211; dipshits! To add insult to injury I was then tweeted to use their support website but get this, I have to pay for that support &#8211; really WTF?!  I had a total nerd rage at this point and told Microsoft to do one and promptly wiped windows 10 and went back to Windows 8.1 Professional, peace at least (for a while). <a href="/wp-content/uploads/2015/08/windows-10-twitter.png"><img class="alignnone size-medium wp-image-4122" src="/wp-content/uploads/2015/08/windows-10-twitter-229x300.png" alt="windows-10-twitter" width="229" height="300" srcset="/wp-content/uploads/2015/08/windows-10-twitter-229x300.png 229w, /wp-content/uploads/2015/08/windows-10-twitter.png 683w" sizes="(max-width: 229px) 100vw, 229px" /></a></p>
<p>So I was going to mention a bunch of other crap with Windows 10? Well here is a list:</p>
<ul>
<li>DPI sucks big time, wtf were Microsoft thinking, just give us proper DPI control over the screens (why do I have to go search the internet for a registry hack)</li>
<li>Key power features hidden or removed like Group Policy Editor that you as an administrator can&#8217;t administer</li>
<li>Windows Themes: You have to go through a convoluted series of screens to something called slideshow to then go to a Windows 7 personalisation screen that has key controls missing!!!</li>
<li>Can&#8217;t use older applications at all, Windows 10 will block them even though they WILL work fine (only way round is to hack the registry again)</li>
<li>Some registry changes/hacks are overridden by Windows 10 and restored to default settings wiping your FIXES</li>
<li>You CANNOT opt out of Automatic Updates and this is wrong, period</li>
</ul>
<p>The biggest issue for me is that Windows 10 is essentially a full blown anti-privacy tool and there is no way to opt out of this.  Free is most certainly not free here and I would advise people to read the terms and conditions that we all click through without noticing because there is some scary stuff in there like Microsoft being able to access your mic, camera and data on your Windows 10 OS as they see fit whenever they want, no thanks. Here is an interesting video for you guys: <a title="Do not install Windows 10" href="https://youtu.be/tWs6mk-HWLk" target="_blank">https://youtu.be/tWs6mk-HWLk</a> Finally if you do downgrade like I did, you need to be aware that Microsoft will attempt to force Windows 10 on you so you need to remove some things using <a title="Remove GWA" href="http://www.makeuseof.com/tag/get-rid-windows-10-upgrade-notification-windows-7-8/" target="_blank"><strong>this guide</strong></a>.</p>
]]></content:encoded>
			<wfw:commentRss>/index.php/sysadmins/windows-10-how-i-doth-hateth-thee-mostest/feed/</wfw:commentRss>
		<slash:comments>0</slash:comments>
		</item>
		<item>
		<title>Threadsafe Incrementing in C#</title>
		<link>/index.php/desktopdev/mstech/csharp/threadsafe-incrementing-in-c/</link>
		<comments>/index.php/desktopdev/mstech/csharp/threadsafe-incrementing-in-c/#comments</comments>
		<pubDate>Wed, 02 Jul 2014 10:54:49 +0000</pubDate>
		<dc:creator><![CDATA[Eli Weinstock-Herman (tarwn)]]></dc:creator>
				<category><![CDATA[C#]]></category>
		<category><![CDATA[asynchronous]]></category>
		<category><![CDATA[threading]]></category>

		<guid isPermaLink="false">/?p=2799</guid>
		<description><![CDATA[Recently I&#8217;ve had the opportunity to review a number of different parallel C# methods that were performing work over a collection of items. Nearly all of them have used ++ to increment parent or global variables from inside threaded contexts. Unfortunately the ++ operator is not guaranteed to be threadsafe in C#. So let&#8217;s take [&#8230;]]]></description>
				<content:encoded><![CDATA[<p>Recently I&#8217;ve had the opportunity to review a number of different parallel C# methods that were performing work over a collection of items. Nearly all of them have used ++ to increment parent or global variables from inside threaded contexts. Unfortunately the ++ operator <a href="http://stackoverflow.com/questions/4628243/is-the-operator-thread-safe" title="Eric Lippert's explanation on StackOverflow">is not guaranteed to be threadsafe in C#</a>.</p>
<p>So let&#8217;s take a simple code example using ++ and convert it to a threadsafe one.</p>
<h2>The Wrong Way To Do It</h2>
<p>This is unrealistic example, I&#8217;m simply taking a list of work and sleeping for a random amount of time as a substitute for some real work. Pretend that it&#8217;s doing something complex like database work, file conversions, or something else useful and time consuming.</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="csharp"><thead><tr><td colspan="2"  class="head">C#</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
</pre></td><td class="de1"><pre class="de1"><span class="kw1">public</span> <span class="kw4">int</span> DoWorkPoorly<span class="br0">&#40;</span>List<span class="sy0">&lt;</span><span class="kw4">string</span><span class="sy0">&gt;</span> workToProcess<span class="br0">&#41;</span>
<span class="br0">&#123;</span>
&nbsp; &nbsp; <span class="kw4">int</span> statusCounter <span class="sy0">=</span> <span class="nu0">0</span><span class="sy0">;</span>
&nbsp; &nbsp; <span class="kw4">int</span> totalCount <span class="sy0">=</span> workToProcess<span class="sy0">.</span><span class="me1">Count</span><span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; Parallel<span class="sy0">.</span><span class="kw1">ForEach</span><span class="br0">&#40;</span>workToProcess, <span class="br0">&#40;</span>work<span class="br0">&#41;</span> <span class="sy0">=&gt;</span>
&nbsp; &nbsp; <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">var</span> r <span class="sy0">=</span> <span class="kw3">new</span> Random<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; Thread<span class="sy0">.</span><span class="me1">Sleep</span><span class="br0">&#40;</span><span class="br0">&#40;</span><span class="kw4">int</span><span class="br0">&#41;</span><span class="br0">&#40;</span>r<span class="sy0">.</span><span class="me1">NextDouble</span><span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="sy0">*</span> <span class="nu0">10</span><span class="br0">&#41;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; Console<span class="sy0">.</span><span class="me1">WriteLine</span><span class="br0">&#40;</span><span class="kw4">String</span><span class="sy0">.</span><span class="me1">Format</span><span class="br0">&#40;</span><span class="st0">&quot;Completed {0} of {1} items on thread {2}&quot;</span>, 
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="sy0">++</span>statusCounter, 
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; totalCount, 
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Thread<span class="sy0">.</span><span class="me1">CurrentThread</span><span class="sy0">.</span><span class="me1">ManagedThreadId</span><span class="br0">&#41;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; <span class="br0">&#125;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; Console<span class="sy0">.</span><span class="me1">WriteLine</span><span class="br0">&#40;</span><span class="kw4">String</span><span class="sy0">.</span><span class="me1">Format</span><span class="br0">&#40;</span><span class="st0">&quot;Completed {0} of {1} &nbsp;items on thread {2}&quot;</span>, 
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; statusCounter, 
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; totalCount,
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Thread<span class="sy0">.</span><span class="me1">CurrentThread</span><span class="sy0">.</span><span class="me1">ManagedThreadId</span><span class="br0">&#41;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; <span class="kw1">return</span> statusCounter<span class="sy0">;</span>
<span class="br0">&#125;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">public int DoWorkPoorly(List&lt;string&gt; workToProcess)
{
    int statusCounter = 0;
    int totalCount = workToProcess.Count;

    Parallel.ForEach(workToProcess, (work) =&gt;
    {
        var r = new Random();
        Thread.Sleep((int)(r.NextDouble() * 10));

        Console.WriteLine(String.Format("Completed {0} of {1} items on thread {2}", 
                                        ++statusCounter, 
                                        totalCount, 
                                        Thread.CurrentThread.ManagedThreadId));
    });

    Console.WriteLine(String.Format("Completed {0} of {1}  items on thread {2}", 
                                    statusCounter, 
                                    totalCount,
                                    Thread.CurrentThread.ManagedThreadId));
    return statusCounter;
}</pre></div></div>

<p>Call this with 10 or 100 items, and you may not see a problem. When I extend this to 1,000 or 10,000 then I start consistently losing up to 1.5% of the increments.</p>
<p>For a progress bar, this is probably ok, but for program logic or attempting to report an accurate number of results, this isn&#8217;t going to work.</p>
<h2>Interlocked.Increment</h2>
<p>Luckily, there is a built in method we can use to safely increment that shared integer.</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="csharp"><thead><tr><td colspan="2"  class="head">C#</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
</pre></td><td class="de1"><pre class="de1"><span class="kw1">public</span> <span class="kw4">int</span> DoWorkInterlocked<span class="br0">&#40;</span>List<span class="sy0">&lt;</span><span class="kw4">string</span><span class="sy0">&gt;</span> workToProcess<span class="br0">&#41;</span>
<span class="br0">&#123;</span>
&nbsp; &nbsp; <span class="kw4">int</span> statusCounter <span class="sy0">=</span> <span class="nu0">0</span><span class="sy0">;</span>
&nbsp; &nbsp; <span class="kw4">int</span> totalCount <span class="sy0">=</span> workToProcess<span class="sy0">.</span><span class="me1">Count</span><span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; Parallel<span class="sy0">.</span><span class="kw1">ForEach</span><span class="br0">&#40;</span>workToProcess, <span class="br0">&#40;</span>work<span class="br0">&#41;</span> <span class="sy0">=&gt;</span>
&nbsp; &nbsp; <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">var</span> r <span class="sy0">=</span> <span class="kw3">new</span> Random<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; Thread<span class="sy0">.</span><span class="me1">Sleep</span><span class="br0">&#40;</span><span class="br0">&#40;</span><span class="kw4">int</span><span class="br0">&#41;</span><span class="br0">&#40;</span>r<span class="sy0">.</span><span class="me1">NextDouble</span><span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="sy0">*</span> <span class="nu0">10</span><span class="br0">&#41;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; 
&nbsp; &nbsp; &nbsp; &nbsp; Interlocked<span class="sy0">.</span><span class="me1">Increment</span><span class="br0">&#40;</span><span class="kw1">ref</span> statusCounter<span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; Console<span class="sy0">.</span><span class="me1">WriteLine</span><span class="br0">&#40;</span><span class="kw4">String</span><span class="sy0">.</span><span class="me1">Format</span><span class="br0">&#40;</span><span class="st0">&quot;Completed {0} of {1} &nbsp;items on thread {2}&quot;</span>, 
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; statusCounter, 
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; totalCount, 
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Thread<span class="sy0">.</span><span class="me1">CurrentThread</span><span class="sy0">.</span><span class="me1">ManagedThreadId</span><span class="br0">&#41;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; <span class="br0">&#125;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; Console<span class="sy0">.</span><span class="me1">WriteLine</span><span class="br0">&#40;</span><span class="kw4">String</span><span class="sy0">.</span><span class="me1">Format</span><span class="br0">&#40;</span><span class="st0">&quot;Completed {0} of {1} &nbsp;items on thread {2}&quot;</span>, 
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; statusCounter, 
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; totalCount, 
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Thread<span class="sy0">.</span><span class="me1">CurrentThread</span><span class="sy0">.</span><span class="me1">ManagedThreadId</span><span class="br0">&#41;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; <span class="kw1">return</span> statusCounter<span class="sy0">;</span>
<span class="br0">&#125;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">public int DoWorkInterlocked(List&lt;string&gt; workToProcess)
{
    int statusCounter = 0;
    int totalCount = workToProcess.Count;

    Parallel.ForEach(workToProcess, (work) =&gt;
    {
        var r = new Random();
        Thread.Sleep((int)(r.NextDouble() * 10));
        
        Interlocked.Increment(ref statusCounter);
        Console.WriteLine(String.Format("Completed {0} of {1}  items on thread {2}", 
                                        statusCounter, 
                                        totalCount, 
                                        Thread.CurrentThread.ManagedThreadId));
    });

    Console.WriteLine(String.Format("Completed {0} of {1}  items on thread {2}", 
                                    statusCounter, 
                                    totalCount, 
                                    Thread.CurrentThread.ManagedThreadId));
    return statusCounter;
}</pre></div></div>

<p>Interlocked provides some methods to handle incrementing, decrementing, adding 64-bit values (which also isn&#8217;t threadsafe), and so on. On a similar run of 100,000 items, this method is safe where the first one was not.</p>
<h2>Decouple Your Output</h2>
<p>There is one final step. The prior examples push status messages to the console from whatever thread we happen to be on. Behind the scenes, they are fighting over access to the console, writing in non-sequential order, and writing more updates than we really need. At the end of the day, we want an accurate total number and enough updates to show us (humans) that it&#8217;s making progress, we don&#8217;t need all the messages and we especially don&#8217;t need all of our little workers fighting over a single constrained resource.</p>
<p>If we take the responsibility for reporting status out of the parallel action and instead spin it off onto it&#8217;s own task, we preserve our accurate total but have more control over reporting progress at a reasonable pace (and always in order). And in this particular case, as a by product of not fighting over a constrained resource, we gain an absurd amount of performance.</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="csharp"><thead><tr><td colspan="2"  class="head">C#</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
</pre></td><td class="de1"><pre class="de1"><span class="kw1">public</span> <span class="kw4">int</span> DoWorkInterlockedWithAsyncStatus<span class="br0">&#40;</span>List<span class="sy0">&lt;</span><span class="kw4">string</span><span class="sy0">&gt;</span> workToProcess<span class="br0">&#41;</span>
<span class="br0">&#123;</span>
&nbsp; &nbsp; <span class="kw1">var</span> statusCounter <span class="sy0">=</span> <span class="nu0">0</span><span class="sy0">;</span>
&nbsp; &nbsp; <span class="kw4">int</span> totalCount <span class="sy0">=</span> workToProcess<span class="sy0">.</span><span class="me1">Count</span><span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; <span class="co1">// monitor and output progress</span>
&nbsp; &nbsp; <span class="kw1">var</span> cancellationTokenSource <span class="sy0">=</span> <span class="kw3">new</span> CancellationTokenSource<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; <span class="kw1">var</span> outputTask <span class="sy0">=</span> Task<span class="sy0">.</span><span class="me1">Factory</span><span class="sy0">.</span><span class="me1">StartNew</span><span class="br0">&#40;</span><span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="sy0">=&gt;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">while</span> <span class="br0">&#40;</span><span class="sy0">!</span>cancellationTokenSource<span class="sy0">.</span><span class="me1">IsCancellationRequested</span><span class="br0">&#41;</span> 
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Console<span class="sy0">.</span><span class="me1">WriteLine</span><span class="br0">&#40;</span><span class="kw4">String</span><span class="sy0">.</span><span class="me1">Format</span><span class="br0">&#40;</span><span class="st0">&quot;Completed {0} of {1} &nbsp;items on thread {2}&quot;</span>, 
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; statusCounter, 
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; totalCount, 
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Thread<span class="sy0">.</span><span class="me1">CurrentThread</span><span class="sy0">.</span><span class="me1">ManagedThreadId</span><span class="br0">&#41;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; cancellationTokenSource<span class="sy0">.</span><span class="me1">Token</span><span class="sy0">.</span><span class="me1">WaitHandle</span><span class="sy0">.</span><span class="me1">WaitOne</span><span class="br0">&#40;</span><span class="nu0">5</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; Console<span class="sy0">.</span><span class="me1">WriteLine</span><span class="br0">&#40;</span><span class="kw4">String</span><span class="sy0">.</span><span class="me1">Format</span><span class="br0">&#40;</span><span class="st0">&quot;Completed {0} of {1} &nbsp;items on thread {2}&quot;</span>, 
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;statusCounter, 
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;totalCount, 
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;Thread<span class="sy0">.</span><span class="me1">CurrentThread</span><span class="sy0">.</span><span class="me1">ManagedThreadId</span><span class="br0">&#41;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; <span class="br0">&#125;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; Parallel<span class="sy0">.</span><span class="kw1">ForEach</span><span class="br0">&#40;</span>workToProcess, <span class="br0">&#40;</span>work<span class="br0">&#41;</span> <span class="sy0">=&gt;</span>
&nbsp; &nbsp; <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">var</span> r <span class="sy0">=</span> <span class="kw3">new</span> Random<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; Thread<span class="sy0">.</span><span class="me1">Sleep</span><span class="br0">&#40;</span><span class="br0">&#40;</span><span class="kw4">int</span><span class="br0">&#41;</span><span class="br0">&#40;</span>r<span class="sy0">.</span><span class="me1">NextDouble</span><span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="sy0">*</span> <span class="nu0">10</span><span class="br0">&#41;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; Interlocked<span class="sy0">.</span><span class="me1">Increment</span><span class="br0">&#40;</span><span class="kw1">ref</span> statusCounter<span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; <span class="br0">&#125;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; cancellationTokenSource<span class="sy0">.</span><span class="me1">Cancel</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; outputTask<span class="sy0">.</span><span class="me1">Wait</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; <span class="kw1">return</span> statusCounter<span class="sy0">;</span>
<span class="br0">&#125;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">public int DoWorkInterlockedWithAsyncStatus(List&lt;string&gt; workToProcess)
{
    var statusCounter = 0;
    int totalCount = workToProcess.Count;

    // monitor and output progress
    var cancellationTokenSource = new CancellationTokenSource();
    var outputTask = Task.Factory.StartNew(() =&gt; {
        while (!cancellationTokenSource.IsCancellationRequested) 
        {
            Console.WriteLine(String.Format("Completed {0} of {1}  items on thread {2}", 
                                            statusCounter, 
                                            totalCount, 
                                            Thread.CurrentThread.ManagedThreadId));

            cancellationTokenSource.Token.WaitHandle.WaitOne(5);
	}

        Console.WriteLine(String.Format("Completed {0} of {1}  items on thread {2}", 
                                         statusCounter, 
                                         totalCount, 
                                         Thread.CurrentThread.ManagedThreadId));
    });

    Parallel.ForEach(workToProcess, (work) =&gt;
    {
        var r = new Random();
        Thread.Sleep((int)(r.NextDouble() * 10));

        Interlocked.Increment(ref statusCounter);
    });

    cancellationTokenSource.Cancel();
    outputTask.Wait();
    return statusCounter;
}</pre></div></div>

<p>Separating the two responsibilities nets us a an order of magnitude performance increase, but more importantly it moves that responsibility off to the side where it can be managed independently. If the human needs more or less frequent updates, or if we need to report that update to a specific thread (like the UI thread), we have a single place to manage it from that doesn&#8217;t add drag to the actual work being done.</p>
]]></content:encoded>
			<wfw:commentRss>/index.php/desktopdev/mstech/csharp/threadsafe-incrementing-in-c/feed/</wfw:commentRss>
		<slash:comments>3</slash:comments>
		</item>
		<item>
		<title>Boost your datatransport with XML, VB 11 and denormalisation techniques !</title>
		<link>/index.php/desktopdev/mstech/vbnet/boost-your-datatransport-with-xml/</link>
		<comments>/index.php/desktopdev/mstech/vbnet/boost-your-datatransport-with-xml/#comments</comments>
		<pubDate>Wed, 09 Oct 2013 22:08:00 +0000</pubDate>
		<dc:creator><![CDATA[Bert Michielsen]]></dc:creator>
				<category><![CDATA[VB.NET]]></category>

		<guid isPermaLink="false">/index.php/2013/10/boost-your-datatransport-with-xml/</guid>
		<description><![CDATA[Xml, as we all know, has a drawback, being the potential growth in size, characteristical to the format , especially when dealing with complex types and collections of complex types. Let's take a look at a classic example, taken from Wikipedia.


&#038;lt&#8230;]]></description>
				<content:encoded><![CDATA[<p>
Xml, as we all know, has a drawback, being the potential growth in size, characteristical to the format , especially when dealing with complex types and collections of complex types. Let&#8217;s take a look at a classic example, taken from Wikipedia.
</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="xml"><thead><tr><td colspan="2"  class="head">XML</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
</pre></td><td class="de1"><pre class="de1"><span class="sc3"><span class="re1">&lt;person<span class="re2">&gt;</span></span></span>
&nbsp; <span class="sc3"><span class="re1">&lt;firstName<span class="re2">&gt;</span></span></span>John<span class="sc3"><span class="re1">&lt;/firstName<span class="re2">&gt;</span></span></span>
&nbsp; <span class="sc3"><span class="re1">&lt;lastName<span class="re2">&gt;</span></span></span>Smith<span class="sc3"><span class="re1">&lt;/lastName<span class="re2">&gt;</span></span></span>
&nbsp; <span class="sc3"><span class="re1">&lt;age<span class="re2">&gt;</span></span></span>25<span class="sc3"><span class="re1">&lt;/age<span class="re2">&gt;</span></span></span>
&nbsp; <span class="sc3"><span class="re1">&lt;address<span class="re2">&gt;</span></span></span>
&nbsp; &nbsp; <span class="sc3"><span class="re1">&lt;streetAddress<span class="re2">&gt;</span></span></span>21 2nd Street<span class="sc3"><span class="re1">&lt;/streetAddress<span class="re2">&gt;</span></span></span>
&nbsp; &nbsp; <span class="sc3"><span class="re1">&lt;city<span class="re2">&gt;</span></span></span>New York<span class="sc3"><span class="re1">&lt;/city<span class="re2">&gt;</span></span></span>
&nbsp; &nbsp; <span class="sc3"><span class="re1">&lt;state<span class="re2">&gt;</span></span></span>NY<span class="sc3"><span class="re1">&lt;/state<span class="re2">&gt;</span></span></span>
&nbsp; &nbsp; <span class="sc3"><span class="re1">&lt;postalCode<span class="re2">&gt;</span></span></span>10021<span class="sc3"><span class="re1">&lt;/postalCode<span class="re2">&gt;</span></span></span>
&nbsp; <span class="sc3"><span class="re1">&lt;/address<span class="re2">&gt;</span></span></span>
&nbsp; <span class="sc3"><span class="re1">&lt;phoneNumbers<span class="re2">&gt;</span></span></span>
&nbsp; &nbsp; <span class="sc3"><span class="re1">&lt;phoneNumber</span> <span class="re0">type</span>=<span class="st0">&quot;home&quot;</span><span class="re2">&gt;</span></span>212 555-1234<span class="sc3"><span class="re1">&lt;/phoneNumber<span class="re2">&gt;</span></span></span>
&nbsp; &nbsp; <span class="sc3"><span class="re1">&lt;phoneNumber</span> <span class="re0">type</span>=<span class="st0">&quot;fax&quot;</span><span class="re2">&gt;</span></span>646 555-4567<span class="sc3"><span class="re1">&lt;/phoneNumber<span class="re2">&gt;</span></span></span>
&nbsp; <span class="sc3"><span class="re1">&lt;/phoneNumbers<span class="re2">&gt;</span></span></span>
<span class="sc3"><span class="re1">&lt;/person<span class="re2">&gt;</span></span></span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">&lt;person&gt;
  &lt;firstName&gt;John&lt;/firstName&gt;
  &lt;lastName&gt;Smith&lt;/lastName&gt;
  &lt;age&gt;25&lt;/age&gt;
  &lt;address&gt;
    &lt;streetAddress&gt;21 2nd Street&lt;/streetAddress&gt;
    &lt;city&gt;New York&lt;/city&gt;
    &lt;state&gt;NY&lt;/state&gt;
    &lt;postalCode&gt;10021&lt;/postalCode&gt;
  &lt;/address&gt;
  &lt;phoneNumbers&gt;
    &lt;phoneNumber type="home"&gt;212 555-1234&lt;/phoneNumber&gt;
    &lt;phoneNumber type="fax"&gt;646 555-4567&lt;/phoneNumber&gt;
  &lt;/phoneNumbers&gt;
&lt;/person&gt;</pre></div></div>

<p>
Try to imagine  a collection of  1000 persons, each with 4 possible addresses and up to 10 telephonenumbers and having to transport this over a wire, and it all becomes clear instantly.
</p>
<p>
But is XML really less performant sizewise ?  We could use XML-attributes and easily serialize an object like this :
</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="xml"><thead><tr><td colspan="2"  class="head">XML</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
</pre></td><td class="de1"><pre class="de1"><span class="sc3"><span class="re1">&lt;person</span> <span class="re0">firstName</span>=<span class="st0">&quot;John&quot;</span> <span class="re0">lastName</span>=<span class="st0">&quot;Smith&quot;</span> <span class="re0">age</span>=<span class="st0">&quot;25&quot;</span> <span class="re2">/&gt;</span></span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">&lt;person firstName="John" lastName="Smith" age="25" /&gt;</pre></div></div>

<p>
Based on this example it would seem that attribute-only XML outperforms about anything. But does it realy ? The minute complex types and certainly collections are involved, maintaining that advantage becomes difficult, if not impossible, as you can see here:
</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="xml"><thead><tr><td colspan="2"  class="head">XML</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
</pre></td><td class="de1"><pre class="de1"><span class="sc3"><span class="re1">&lt;person</span> <span class="re0">firstName</span>=<span class="st0">&quot;John&quot;</span> <span class="re0">lastName</span>=<span class="st0">&quot;Smith&quot;</span> <span class="re0">age</span>=<span class="st0">&quot;25&quot;</span><span class="re2">&gt;</span></span>
&nbsp; <span class="sc3"><span class="re1">&lt;address</span> <span class="re0">streetAddress</span>=<span class="st0">&quot;21 2nd Street&quot;</span> <span class="re0">city</span>=<span class="st0">&quot;New York&quot;</span> <span class="re0">state</span>=<span class="st0">&quot;NY&quot;</span> <span class="re0">postalCode</span>=<span class="st0">&quot;10021&quot;</span> <span class="re2">/&gt;</span></span>
&nbsp; <span class="sc3"><span class="re1">&lt;phoneNumbers<span class="re2">&gt;</span></span></span>
&nbsp; &nbsp; <span class="sc3"><span class="re1">&lt;phoneNumber</span> <span class="re0">type</span>=<span class="st0">&quot;home&quot;</span> <span class="re0">number</span>=<span class="st0">&quot;212 555-1234&quot;</span><span class="re2">/&gt;</span></span>
&nbsp; &nbsp; <span class="sc3"><span class="re1">&lt;phoneNumber</span> <span class="re0">type</span>=<span class="st0">&quot;fax&quot;</span> &nbsp;<span class="re0">number</span>=<span class="st0">&quot;646 555-4567&quot;</span><span class="re2">/&gt;</span></span>
&nbsp; <span class="sc3"><span class="re1">&lt;/phoneNumbers<span class="re2">&gt;</span></span></span>
<span class="sc3"><span class="re1">&lt;/person<span class="re2">&gt;</span></span></span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">&lt;person firstName="John" lastName="Smith" age="25"&gt;
  &lt;address streetAddress="21 2nd Street" city="New York" state="NY" postalCode="10021" /&gt;
  &lt;phoneNumbers&gt;
    &lt;phoneNumber type="home" number="212 555-1234"/&gt;
    &lt;phoneNumber type="fax"  number="646 555-4567"/&gt;
  &lt;/phoneNumbers&gt;
&lt;/person&gt;</pre></div></div>

<p>
This is quite an improvement if we still imagine those same 1000 persons. Nevertheless, as JSON demonstrates : complex types and collections can be handled in a more intelligent way when it comes to limiting growth in size where serialization is involved.
</p>
<p>
That said, we can still tweak serialization from within our code, of course. By using attributes in our classes we can limit the length of the tagnames or prevent properties we don&#8217;t want to be serialized from appearing within the resulting XML, and thus adding to the total size.
</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="vbnet"><thead><tr><td colspan="2"  class="head">vb.net</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
</pre></td><td class="de1"><pre class="de1"><span class="kw1">Public</span> <span class="kw1">Class</span> Address
&nbsp; &nbsp; <span class="sy0">&lt;</span>XmlIgnore<span class="sy0">&gt;</span>
&nbsp; &nbsp; <span class="kw1">Public</span> <span class="kw1">Property</span> ID <span class="kw1">As</span> <span class="kw2">Integer</span>
&nbsp; &nbsp; <span class="kw1">Public</span> <span class="kw1">Property</span> Street <span class="kw1">As</span> <span class="kw2">String</span>
&nbsp; &nbsp; <span class="kw1">Public</span> <span class="kw1">Property</span> City <span class="kw1">As</span> <span class="kw2">String</span>
&nbsp; &nbsp; <span class="kw1">Public</span> <span class="kw1">Property</span> Code <span class="kw1">As</span> <span class="kw2">String</span>
&nbsp; &nbsp; <span class="kw1">Public</span> <span class="kw1">Property</span> State <span class="kw1">As</span> <span class="kw2">String</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">Public Class Address
    &lt;XmlIgnore&gt;
    Public Property ID As Integer
    Public Property Street As String
    Public Property City As String
    Public Property Code As String
    Public Property State As String</pre></div></div>

<p>
This gives us the means to trim resulting XML in such a way that the final result may feel like being &#8220;acceptable&#8221;.  Our classes we could then expand with functionality to serialize any instance at any moment as well as deserialize  back into them. Typically we use XmlSerializer objects for this.
</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="vbnet"><thead><tr><td colspan="2"  class="head">vb.net</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
</pre></td><td class="de1"><pre class="de1"><span class="kw1">Public</span> <span class="kw1">Class</span> Address
&nbsp; &nbsp; <span class="sy0">&lt;</span>XmlIgnore<span class="sy0">&gt;</span>
&nbsp; &nbsp; <span class="kw1">Public</span> <span class="kw1">Property</span> ID <span class="kw1">As</span> <span class="kw2">Integer</span>
&nbsp; &nbsp; <span class="kw1">Public</span> <span class="kw1">Property</span> Street <span class="kw1">As</span> <span class="kw2">String</span>
&nbsp; &nbsp; <span class="kw1">Public</span> <span class="kw1">Property</span> City <span class="kw1">As</span> <span class="kw2">String</span>
&nbsp; &nbsp; <span class="kw1">Public</span> <span class="kw1">Property</span> Code <span class="kw1">As</span> <span class="kw2">String</span>
&nbsp; &nbsp; <span class="kw1">Public</span> <span class="kw1">Property</span> State <span class="kw1">As</span> <span class="kw2">String</span>
&nbsp; &nbsp; <span class="kw1">Public</span> <span class="kw1">Property</span> SequenceID <span class="kw1">As</span> <span class="kw2">Integer</span>
&nbsp;
&nbsp; &nbsp; <span class="kw1">Public</span> <span class="kw1">ReadOnly</span> <span class="kw1">Property</span> AsXML <span class="kw1">As</span> XElement
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">Get</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="co1">' serialize instance with the help of an XML serializer, XML writer and memorystream and return the generated XML</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">End</span> <span class="kw1">Get</span>
&nbsp; &nbsp; <span class="kw1">End</span> <span class="kw1">Property</span>
&nbsp;
&nbsp; &nbsp; <span class="kw1">Public</span> <span class="kw1">Shared</span> <span class="kw1">ReadOnly</span> <span class="kw1">Property</span> FromXML<span class="br0">&#40;</span>xml <span class="kw1">As</span> XElement<span class="br0">&#41;</span> <span class="kw1">As</span> Address
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">Get</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">Return</span> <span class="kw4">CType</span><span class="br0">&#40;</span><span class="kw1">New</span> XmlSerializer<span class="br0">&#40;</span><span class="kw1">GetType</span><span class="br0">&#40;</span>Address<span class="br0">&#41;</span><span class="br0">&#41;</span><span class="sy0">.</span><span class="me1">Deserialize</span><span class="br0">&#40;</span>xml<span class="sy0">.</span><span class="me1">CreateReader</span><span class="br0">&#41;</span>, Address<span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">End</span> <span class="kw1">Get</span>
&nbsp; &nbsp; <span class="kw1">End</span> <span class="kw1">Property</span>
&nbsp;
<span class="kw1">End</span> <span class="kw1">Class</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">Public Class Address
    &lt;XmlIgnore&gt;
    Public Property ID As Integer
    Public Property Street As String
    Public Property City As String
    Public Property Code As String
    Public Property State As String
    Public Property SequenceID As Integer

    Public ReadOnly Property AsXML As XElement
        Get
            ' serialize instance with the help of an XML serializer, XML writer and memorystream and return the generated XML
        End Get
    End Property

    Public Shared ReadOnly Property FromXML(xml As XElement) As Address
        Get
            Return CType(New XmlSerializer(GetType(Address)).Deserialize(xml.CreateReader), Address)
        End Get
    End Property

End Class</pre></div></div>

<p>
There&#8217;s a drawback though. If we want to serialize our instances into XML purely in memory, this turns out to be quite a mess. You&#8217;ll get there eventually, but the more you want to customise the XML to be generated the messier it gets.  Serializing to file(s) on hard disk is a tad more straightforward, but do we want to make a roundtrip to the hard disk at each serialization at all times ? Obviously no.
</p>
<p>
Luckily this can be done in a much easier way, courtesy of  the .NET framework builtin Linq To XML. Linq To XML turns both reading and writing XML into a breeze.
</p>
<p>
Now, there&#8217;s a reason I have used VB as PL here, instead of C# or C++.  From VB 9 onward it has this cool feature on board, named XML litterals. No, C# does not have this feature on board. As for the why, you have to address the C# compiler development team for that. Anyway,  as you can see, this feature is nothing less than awesome.
</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="vbnet"><thead><tr><td colspan="2"  class="head">vb.net</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
</pre></td><td class="de1"><pre class="de1"><span class="kw1">Public</span> <span class="kw1">Class</span> Address
&nbsp; &nbsp; <span class="kw1">Public</span> <span class="kw1">Property</span> ID <span class="kw1">As</span> <span class="kw2">Integer</span>
&nbsp; &nbsp; <span class="kw1">Public</span> <span class="kw1">Property</span> Street <span class="kw1">As</span> <span class="kw2">String</span>
&nbsp; &nbsp; <span class="kw1">Public</span> <span class="kw1">Property</span> City <span class="kw1">As</span> <span class="kw2">String</span>
&nbsp; &nbsp; <span class="kw1">Public</span> <span class="kw1">Property</span> Code <span class="kw1">As</span> <span class="kw2">String</span>
&nbsp; &nbsp; <span class="kw1">Public</span> <span class="kw1">Property</span> State <span class="kw1">As</span> <span class="kw2">String</span>
&nbsp; &nbsp; <span class="kw1">Public</span> <span class="kw1">Property</span> SequenceID <span class="kw1">As</span> <span class="kw2">Integer</span>
&nbsp;
&nbsp; &nbsp; <span class="kw1">Public</span> <span class="kw1">ReadOnly</span> <span class="kw1">Property</span> AsXML <span class="kw1">As</span> XElement
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">Get</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">Return</span> <span class="sy0">&lt;</span>Address Street<span class="sy0">=&lt;%=</span> Street <span class="sy0">%&gt;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;City<span class="sy0">=&lt;%=</span> City <span class="sy0">%&gt;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;Code<span class="sy0">=&lt;%=</span> Code <span class="sy0">%&gt;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;State<span class="sy0">=&lt;%=</span> State <span class="sy0">%&gt;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span class="sy0">/&gt;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">End</span> <span class="kw1">Get</span>
&nbsp; &nbsp; <span class="kw1">End</span> <span class="kw1">Property</span>
&nbsp;
&nbsp; &nbsp; <span class="kw1">Public</span> <span class="kw1">Shared</span> <span class="kw1">ReadOnly</span> <span class="kw1">Property</span> FromXML<span class="br0">&#40;</span>xml <span class="kw1">As</span> XElement<span class="br0">&#41;</span> <span class="kw1">As</span> Address
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">Get</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">Return</span> <span class="kw1">New</span> Address <span class="kw1">With</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="sy0">.</span><span class="me1">Street</span> <span class="sy0">=</span> xml<span class="sy0">.</span>@Street,
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="sy0">.</span><span class="me1">City</span> <span class="sy0">=</span> xml<span class="sy0">.</span>@City,
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="sy0">.</span><span class="me1">Code</span> <span class="sy0">=</span> xml<span class="sy0">.</span>@Code,
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="sy0">.</span><span class="me1">State</span> <span class="sy0">=</span> xml<span class="sy0">.</span>@State
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">End</span> <span class="kw1">Get</span>
&nbsp; &nbsp; <span class="kw1">End</span> <span class="kw1">Property</span>
&nbsp;
<span class="kw1">End</span> <span class="kw1">Class</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">Public Class Address
    Public Property ID As Integer
    Public Property Street As String
    Public Property City As String
    Public Property Code As String
    Public Property State As String
    Public Property SequenceID As Integer

    Public ReadOnly Property AsXML As XElement
        Get
            Return &lt;Address Street=&lt;%= Street %&gt;
                       City=&lt;%= City %&gt;
                       Code=&lt;%= Code %&gt;
                       State=&lt;%= State %&gt;
                   /&gt;
        End Get
    End Property

    Public Shared ReadOnly Property FromXML(xml As XElement) As Address
        Get
            Return New Address With {
                                        .Street = xml.@Street,
                                        .City = xml.@City,
                                        .Code = xml.@Code,
                                        .State = xml.@State
                                    }
        End Get
    End Property

End Class</pre></div></div>

<p>
We don&#8217;t have to use serializer objects anymore, as you can see.  As a matter of fact, even the use of Attributes in our code has become obsolete because we serialize only what we want and only how we want it, without relying on external objects. And what&#8217;s more, it is compiled, not interpreted as you might think.
</p>
<p>
Consuming this functionality is just as easy.
</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="vbnet"><thead><tr><td colspan="2"  class="head">vb.net</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
</pre></td><td class="de1"><pre class="de1"><span class="kw1">Dim</span> someAddress <span class="kw1">As</span> <span class="kw1">New</span> Address <span class="kw1">With</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="sy0">.</span><span class="me1">Street</span> <span class="sy0">=</span> <span class="st0">&quot;21 2nd Street&quot;</span>,
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="sy0">.</span><span class="me1">City</span> <span class="sy0">=</span> <span class="st0">&quot;New York&quot;</span>,
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="sy0">.</span><span class="me1">Code</span> <span class="sy0">=</span> <span class="st0">&quot;10021&quot;</span>,
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="sy0">.</span><span class="me1">State</span> <span class="sy0">=</span> <span class="st0">&quot;NY&quot;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; Console<span class="sy0">.</span><span class="me1">WriteLine</span><span class="br0">&#40;</span>someAddress<span class="sy0">.</span><span class="me1">AsXML</span><span class="sy0">.</span><span class="me1">ToString</span><span class="br0">&#41;</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">Dim</span> anAddress <span class="kw1">As</span> Address <span class="sy0">=</span> Address<span class="sy0">.</span><span class="me1">FromXML</span><span class="br0">&#40;</span><span class="sy0">&lt;</span>Address Street<span class="sy0">=</span><span class="st0">&quot;21 2nd Street&quot;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;City<span class="sy0">=</span><span class="st0">&quot;New York&quot;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;State<span class="sy0">=</span><span class="st0">&quot;NY&quot;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;Code<span class="sy0">=</span><span class="st0">&quot;10021&quot;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span class="sy0">/&gt;</span><span class="br0">&#41;</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; Console<span class="sy0">.</span><span class="me1">WriteLine</span><span class="br0">&#40;</span><span class="st0">&quot;Street : &quot;</span> <span class="sy0">&amp;</span> anAddress<span class="sy0">.</span><span class="me1">Street</span><span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; Console<span class="sy0">.</span><span class="me1">WriteLine</span><span class="br0">&#40;</span><span class="st0">&quot;City : &quot;</span> <span class="sy0">&amp;</span> anAddress<span class="sy0">.</span><span class="me1">City</span><span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; Console<span class="sy0">.</span><span class="me1">WriteLine</span><span class="br0">&#40;</span><span class="st0">&quot;State : &quot;</span> <span class="sy0">&amp;</span> anAddress<span class="sy0">.</span><span class="me1">State</span><span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; Console<span class="sy0">.</span><span class="me1">WriteLine</span><span class="br0">&#40;</span><span class="st0">&quot;Code : &quot;</span> <span class="sy0">&amp;</span> anAddress<span class="sy0">.</span><span class="me1">Code</span><span class="br0">&#41;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">Dim someAddress As New Address With {
                                                .Street = "21 2nd Street",
                                                .City = "New York",
                                                .Code = "10021",
                                                .State = "NY"
                                            }

        Console.WriteLine(someAddress.AsXML.ToString)

        Dim anAddress As Address = Address.FromXML(&lt;Address Street="21 2nd Street"
                                                       City="New York"
                                                       State="NY"
                                                       Code="10021"
                                                   /&gt;)

        Console.WriteLine("Street : " &amp; anAddress.Street)
        Console.WriteLine("City : " &amp; anAddress.City)
        Console.WriteLine("State : " &amp; anAddress.State)
        Console.WriteLine("Code : " &amp; anAddress.Code)</pre></div></div>

<p>
Now, at least, we are somewhere. With a relative small overhead we can use extra functionality within objects in our code to generate XML wich leaves all in all a small fingerprint where our data-transport is concerned.  Yet, the fingerprint is still there, and when we have to deal with various nested complex types combined with very large collections, there still is the risk that the size of the generated XML may become unacceptable.
</p>
<p>
We haven&#8217;t gone to the bottom yet though, where XML is concerned.  There still is one option whe haven&#8217;t explored. What we can do is <b><i>denormalising</i></b> our XML.  So instead of composing elements we place all their attributes in 1 big root tag. Sort of like denormalising a table model of a database.  The   <b><i>&lt;Person&gt;&lt;Address /&gt;&lt;Phonenumbers&gt;&lt;Phonenumber /&gt;&lt;Phonenumber /&gt;&lt;/Phonenumbers&gt;&lt;/Person&gt;</i></b> example above would look in a denormalised form like this :
</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="xml"><thead><tr><td colspan="2"  class="head">XML</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
</pre></td><td class="de1"><pre class="de1"><span class="sc3"><span class="re1">&lt;person</span> <span class="re0">firstName</span>=<span class="st0">&quot;John&quot;</span></span>
<span class="sc3"> &nbsp; &nbsp; &nbsp; &nbsp;<span class="re0">lastName</span>=<span class="st0">&quot;Smith&quot;</span></span>
<span class="sc3"> &nbsp; &nbsp; &nbsp; &nbsp;<span class="re0">age</span>=<span class="st0">&quot;25&quot;</span></span>
<span class="sc3"> &nbsp; &nbsp; &nbsp; &nbsp;<span class="re0">A.Street</span>=<span class="st0">&quot;21 2nd Street&quot;</span></span>
<span class="sc3"> &nbsp; &nbsp; &nbsp; &nbsp;<span class="re0">A.City</span>=<span class="st0">&quot;New York&quot;</span></span>
<span class="sc3"> &nbsp; &nbsp; &nbsp; &nbsp;<span class="re0">A.State</span>=<span class="st0">&quot;NY&quot;</span></span>
<span class="sc3"> &nbsp; &nbsp; &nbsp; &nbsp;<span class="re0">A.Code</span>=<span class="st0">&quot;10021&quot;</span></span>
<span class="sc3"> &nbsp; &nbsp; &nbsp; &nbsp;<span class="re0">P1.Type</span>=<span class="st0">&quot;home&quot;</span></span>
<span class="sc3"> &nbsp; &nbsp; &nbsp; &nbsp;<span class="re0">P1.Value</span>=<span class="st0">&quot;212 555-1234&quot;</span></span>
<span class="sc3"> &nbsp; &nbsp; &nbsp; &nbsp;<span class="re0">P2.Type</span>=<span class="st0">&quot;fax&quot;</span></span>
<span class="sc3"> &nbsp; &nbsp; &nbsp; &nbsp;<span class="re0">P2.Value</span>=<span class="st0">&quot;646 555-4567&quot;</span> <span class="re2">/&gt;</span></span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">&lt;person firstName="John"
        lastName="Smith"
        age="25"
        A.Street="21 2nd Street"
        A.City="New York"
        A.State="NY"
        A.Code="10021"
        P1.Type="home"
        P1.Value="212 555-1234"
        P2.Type="fax"
        P2.Value="646 555-4567" /&gt;</pre></div></div>

<p>
As you can see, this is XML in it&#8217;s very most compact form. JSON can hardly do better than this ( in fact, it can&#8217;t).  Notice that I used  a dot within the attributes to have some sort of indication that we are dealing with a composition of elements really, which has to be taken into account when deserialising back into objects. In fact, the dot serves as a degenerate dimension, in database speak.  The dot is arbitrarily chosen from my part ( as are the composition identifiers A for Address, P1 for Phonenumber1, P2  for Phonenumber2  ). It might as well have been an underscore or whatever.  But a dot is fine and it&#8217;s use within attribute names does seem to pass inspection on validity.
</p>
<p>
Now everything is in place for generating very compact XML and an easy deserialisation into complex types . But&#8230; ( oh yes, there&#8217;s a but )&#8230; each attribute within an XML tag must be unique.  There&#8217;s always a way to work around this of course, but in the end the easiest solution is to introduce an extra property ( which will not be serialized of course ) within classes that will participate in data-transport. We will name this property <b><i>SequenceID</i></b> (but you can pick another name if you like to).
</p>
<p>
On a note:  I for my self allways add a property SequenceID to my domain classes.  On another level, it allows me for example to use this property for binding in XAML to a SortDescription. In that way I only have to manage the SequenceID of my classes in code behind, when sorting is involved. Binding will do the rest.
</p>
<p>
OK, so far the theory. But will this all work ?  When I tried this out, I found it surprisingly easy in combination with XML litterals in VB. You have noticed the lack of underscores amongst other things. The code is written in VB 11 ( Visual Studio 2012 ).
</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="vbnet"><thead><tr><td colspan="2"  class="head">vb.net</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
</pre></td><td class="de1"><pre class="de1"><span class="kw1">Public</span> <span class="kw1">Class</span> Person
&nbsp; &nbsp; <span class="kw1">Public</span> <span class="kw1">Property</span> ID <span class="kw1">As</span> <span class="kw2">String</span>
&nbsp; &nbsp; <span class="kw1">Public</span> <span class="kw1">Property</span> FirstName <span class="kw1">As</span> <span class="kw2">String</span>
&nbsp; &nbsp; <span class="kw1">Public</span> <span class="kw1">Property</span> LastName <span class="kw1">As</span> <span class="kw2">String</span>
&nbsp; &nbsp; <span class="kw1">Public</span> <span class="kw1">Property</span> Age <span class="kw1">As</span> <span class="kw2">Integer</span>
&nbsp; &nbsp; <span class="kw1">Public</span> Address <span class="kw1">As</span> Address
&nbsp; &nbsp; <span class="kw1">Public</span> PhoneNumbers <span class="kw1">As</span> IEnumerable<span class="br0">&#40;</span><span class="kw1">Of</span> PhoneNumber<span class="br0">&#41;</span>
&nbsp; &nbsp; <span class="kw1">Public</span> <span class="kw1">Property</span> SequenceID <span class="kw1">As</span> <span class="kw2">Integer</span>
&nbsp;
&nbsp; &nbsp; <span class="kw1">Public</span> <span class="kw1">ReadOnly</span> <span class="kw1">Property</span> AsXML <span class="kw1">As</span> XElement
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">Get</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">Return</span> <span class="sy0">&lt;</span>Person FirstName<span class="sy0">=&lt;%=</span> FirstName <span class="sy0">%&gt;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;LastName<span class="sy0">=&lt;%=</span> LastName <span class="sy0">%&gt;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;Age<span class="sy0">=&lt;%=</span> Age<span class="sy0">.</span><span class="me1">ToString</span> <span class="sy0">%&gt;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;A<span class="sy0">.</span><span class="me1">Street</span><span class="sy0">=&lt;%=</span> Address<span class="sy0">.</span><span class="me1">Street</span> <span class="sy0">%&gt;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;A<span class="sy0">.</span><span class="me1">City</span><span class="sy0">=&lt;%=</span> Address<span class="sy0">.</span><span class="me1">City</span> <span class="sy0">%&gt;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;A<span class="sy0">.</span><span class="me1">Code</span><span class="sy0">=&lt;%=</span> Address<span class="sy0">.</span><span class="me1">Code</span> <span class="sy0">%&gt;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;A<span class="sy0">.</span><span class="me1">State</span><span class="sy0">=&lt;%=</span> Address<span class="sy0">.</span><span class="me1">State</span> <span class="sy0">%&gt;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span class="sy0">&lt;%=</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span class="kw5">From</span> nbr <span class="kw1">In</span> PhoneNumbers
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span class="kw1">Select</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span class="kw1">New</span> XAttribute<span class="br0">&#40;</span><span class="st0">&quot;P&quot;</span> <span class="sy0">&amp;</span> nbr<span class="sy0">.</span><span class="me1">SequenceID</span> <span class="sy0">&amp;</span> <span class="st0">&quot;.Type&quot;</span>, nbr<span class="sy0">.</span><span class="me1">Type</span><span class="br0">&#41;</span>,
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span class="kw1">New</span> XAttribute<span class="br0">&#40;</span><span class="st0">&quot;P&quot;</span> <span class="sy0">&amp;</span> nbr<span class="sy0">.</span><span class="me1">SequenceID</span> <span class="sy0">&amp;</span> <span class="st0">&quot;.Value&quot;</span>, nbr<span class="sy0">.</span><span class="me1">Value</span><span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span class="br0">&#125;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span class="sy0">%&gt;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span class="sy0">/&gt;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">End</span> <span class="kw1">Get</span>
&nbsp; &nbsp; <span class="kw1">End</span> <span class="kw1">Property</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">Public Class Person
    Public Property ID As String
    Public Property FirstName As String
    Public Property LastName As String
    Public Property Age As Integer
    Public Address As Address
    Public PhoneNumbers As IEnumerable(Of PhoneNumber)
    Public Property SequenceID As Integer

    Public ReadOnly Property AsXML As XElement
        Get
            Return &lt;Person FirstName=&lt;%= FirstName %&gt;
                       LastName=&lt;%= LastName %&gt;
                       Age=&lt;%= Age.ToString %&gt;
                       A.Street=&lt;%= Address.Street %&gt;
                       A.City=&lt;%= Address.City %&gt;
                       A.Code=&lt;%= Address.Code %&gt;
                       A.State=&lt;%= Address.State %&gt;
                       &lt;%=
                           From nbr In PhoneNumbers
                           Select {
                           New XAttribute("P" &amp; nbr.SequenceID &amp; ".Type", nbr.Type),
                           New XAttribute("P" &amp; nbr.SequenceID &amp; ".Value", nbr.Value)
                           }
                       %&gt;
                   /&gt;
        End Get
    End Property</pre></div></div>

<p>
As for the FromXML method, here we do pay the price for denormalization. We have to get the XML content back into normalized form in order to deserialize back into an object. We can do this in LINQ by means of a self join or a groupby. Moreover, we will have to do this on an element of the array resulting from a String.Split function. It will take a second self join though to be able to fill the newly created object. But that’s not all: we need the sequenceid to be able to serialize. Easy enough with a direct invoke of a lambda. But we cannot do that on the second self join, because it will not get the same result as what a ROW_NUMBER function would do in TSQL. So we have to iterate through the collection again to create that sequenceid.  OK, this maybe is 1 step too much. We could go for the serialization of this SequenceID property also. Then again, that would add to the size of the generated XML, and it would not add to the content, since this property only serves to create unique attributenames. Again : denormalization also has drawbacks.
</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="vbnet"><thead><tr><td colspan="2"  class="head">vb.net</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
</pre></td><td class="de1"><pre class="de1"><span class="kw1">Public</span> <span class="kw1">Shared</span> <span class="kw1">ReadOnly</span> <span class="kw1">Property</span> FromXML<span class="br0">&#40;</span>xml <span class="kw1">As</span> XElement<span class="br0">&#41;</span> <span class="kw1">As</span> Person
&nbsp; &nbsp;<span class="kw1">Get</span>
&nbsp; &nbsp; &nbsp; <span class="kw1">Dim</span> phonenumberdata <span class="sy0">=</span> <span class="br0">&#40;</span><span class="kw5">From</span> att <span class="kw1">In</span> xml<span class="sy0">.</span><span class="me1">Attributes</span><span class="sy0">.</span><span class="kw5">Where</span><span class="br0">&#40;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span class="kw1">Function</span><span class="br0">&#40;</span>attr<span class="br0">&#41;</span> attr<span class="sy0">.</span><span class="me1">Name</span><span class="sy0">.</span><span class="me1">LocalName</span><span class="sy0">.</span><span class="kw7">Split</span><span class="br0">&#40;</span><span class="st0">&quot;.&quot;</span>c<span class="br0">&#41;</span><span class="br0">&#40;</span><span class="nu0">0</span><span class="br0">&#41;</span><span class="sy0">.</span><span class="me1">Contains</span><span class="br0">&#40;</span><span class="st0">&quot;P&quot;</span><span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span class="br0">&#41;</span><span class="sy0">.</span><span class="me1">GroupBy</span><span class="br0">&#40;</span><span class="kw1">Function</span><span class="br0">&#40;</span>a<span class="br0">&#41;</span> <span class="br0">&#123;</span>a<span class="sy0">.</span><span class="me1">Name</span><span class="sy0">.</span><span class="me1">LocalName</span><span class="sy0">.</span><span class="kw7">Split</span><span class="br0">&#40;</span><span class="st0">&quot;.&quot;</span>c<span class="br0">&#41;</span><span class="br0">&#40;</span><span class="nu0">0</span><span class="br0">&#41;</span>,
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; a<span class="sy0">.</span><span class="me1">Name</span><span class="sy0">.</span><span class="me1">LocalName</span><span class="sy0">.</span><span class="kw7">Split</span><span class="br0">&#40;</span><span class="st0">&quot;.&quot;</span>c<span class="br0">&#41;</span><span class="br0">&#40;</span><span class="nu0">1</span><span class="br0">&#41;</span>,
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; a<span class="sy0">.</span><span class="me1">Value</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span class="br0">&#125;</span><span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span class="kw1">Select</span> att<span class="sy0">.</span><span class="me1">Key</span><span class="br0">&#41;</span><span class="sy0">.</span><span class="me1">ToList</span>
&nbsp; &nbsp; &nbsp; <span class="kw1">Dim</span> phonenumbers <span class="sy0">=</span> <span class="br0">&#40;</span><span class="kw5">From</span> item <span class="kw1">In</span> phonenumberdata
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Join item2 <span class="kw1">In</span> phonenumberdata
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">On</span> item<span class="br0">&#40;</span><span class="nu0">0</span><span class="br0">&#41;</span> Equals item2<span class="br0">&#40;</span><span class="nu0">0</span><span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw5">Where</span> item<span class="br0">&#40;</span><span class="nu0">1</span><span class="br0">&#41;</span> <span class="sy0">&lt;&gt;</span> item2<span class="br0">&#40;</span><span class="nu0">2</span><span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">Select</span> <span class="br0">&#123;</span>item<span class="br0">&#40;</span><span class="nu0">1</span><span class="br0">&#41;</span>, item<span class="br0">&#40;</span><span class="nu0">2</span><span class="br0">&#41;</span>, item2<span class="br0">&#40;</span><span class="nu0">1</span><span class="br0">&#41;</span>, item2<span class="br0">&#40;</span><span class="nu0">2</span><span class="br0">&#41;</span><span class="br0">&#125;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span class="br0">&#41;</span><span class="sy0">.</span><span class="kw5">Where</span><span class="br0">&#40;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span class="kw1">Function</span><span class="br0">&#40;</span>o<span class="br0">&#41;</span> o<span class="br0">&#40;</span><span class="nu0">0</span><span class="br0">&#41;</span> <span class="sy0">=</span> <span class="st0">&quot;Type&quot;</span> <span class="kw1">And</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;o<span class="br0">&#40;</span><span class="nu0">0</span><span class="br0">&#41;</span> <span class="sy0">&lt;&gt;</span> o<span class="br0">&#40;</span><span class="nu0">2</span><span class="br0">&#41;</span><span class="br0">&#41;</span><span class="sy0">.</span><span class="me1">ToList</span>
&nbsp; &nbsp; &nbsp; <span class="kw1">Dim</span> addressprops <span class="sy0">=</span> xml<span class="sy0">.</span><span class="me1">Attributes</span><span class="sy0">.</span><span class="kw5">Where</span><span class="br0">&#40;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">Function</span><span class="br0">&#40;</span>a<span class="br0">&#41;</span> a<span class="sy0">.</span><span class="me1">Name</span><span class="sy0">.</span><span class="me1">LocalName</span><span class="sy0">.</span><span class="kw7">Split</span><span class="br0">&#40;</span><span class="st0">&quot;.&quot;</span>c<span class="br0">&#41;</span><span class="br0">&#40;</span><span class="nu0">0</span><span class="br0">&#41;</span> <span class="sy0">=</span> <span class="st0">&quot;A&quot;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#41;</span><span class="sy0">.</span><span class="kw1">Select</span><span class="br0">&#40;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">Function</span><span class="br0">&#40;</span>addr<span class="br0">&#41;</span> addr<span class="sy0">.</span><span class="me1">Value</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span class="br0">&#41;</span><span class="sy0">.</span><span class="me1">ToArray</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">Dim</span> ix <span class="sy0">=</span> <span class="nu0">0</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">Dim</span> p <span class="kw1">As</span> <span class="kw1">New</span> Person <span class="kw1">With</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span class="sy0">.</span><span class="me1">FirstName</span> <span class="sy0">=</span> xml<span class="sy0">.</span>@FirstName,
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span class="sy0">.</span><span class="me1">LastName</span> <span class="sy0">=</span> xml<span class="sy0">.</span>@LastName,
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span class="sy0">.</span><span class="me1">Age</span> <span class="sy0">=</span> <span class="kw4">CInt</span><span class="br0">&#40;</span>xml<span class="sy0">.</span>@Age<span class="br0">&#41;</span>,
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span class="sy0">.</span><span class="me1">Address</span> <span class="sy0">=</span> <span class="kw1">New</span> Address <span class="kw1">With</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="sy0">.</span><span class="me1">Street</span> <span class="sy0">=</span> addressprops<span class="br0">&#40;</span><span class="nu0">0</span><span class="br0">&#41;</span>,
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="sy0">.</span><span class="me1">City</span> <span class="sy0">=</span> addressprops<span class="br0">&#40;</span><span class="nu0">1</span><span class="br0">&#41;</span>,
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="sy0">.</span><span class="me1">Code</span> <span class="sy0">=</span> addressprops<span class="br0">&#40;</span><span class="nu0">2</span><span class="br0">&#41;</span>,
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="sy0">.</span><span class="me1">State</span> <span class="sy0">=</span> addressprops<span class="br0">&#40;</span><span class="nu0">3</span><span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span class="br0">&#125;</span>,
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span class="sy0">.</span><span class="me1">PhoneNumbers</span> <span class="sy0">=</span> <span class="br0">&#40;</span><span class="kw5">From</span> item <span class="kw1">In</span> phonenumbers
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">Let</span> i <span class="sy0">=</span> <span class="kw1">Function</span><span class="br0">&#40;</span><span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;ix <span class="sy0">+=</span> <span class="nu0">1</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span class="kw1">Return</span> ix
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">End</span> <span class="kw1">Function</span><span class="sy0">.</span><span class="me1">Invoke</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">Select</span> <span class="kw1">New</span> PhoneNumber <span class="kw1">With</span> <span class="br0">&#123;</span>
<span class="sy0">.</span><span class="me1">SequenceID</span> <span class="sy0">=</span> i,
<span class="sy0">.</span><span class="me1">Type</span> <span class="sy0">=</span> item<span class="br0">&#40;</span><span class="nu0">1</span><span class="br0">&#41;</span>, 
<span class="sy0">.</span><span class="me1">Value</span> <span class="sy0">=</span> item<span class="br0">&#40;</span><span class="nu0">3</span><span class="br0">&#41;</span>
<span class="br0">&#125;</span><span class="br0">&#41;</span><span class="sy0">.</span><span class="me1">ToList</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">Return</span> p
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">End</span> <span class="kw1">Get</span>
&nbsp; &nbsp; <span class="kw1">End</span> <span class="kw1">Property</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">Public Shared ReadOnly Property FromXML(xml As XElement) As Person
   Get
      Dim phonenumberdata = (From att In xml.Attributes.Where(
                                     Function(attr) attr.Name.LocalName.Split("."c)(0).Contains("P")
                                     ).GroupBy(Function(a) {a.Name.LocalName.Split("."c)(0),
                                                            a.Name.LocalName.Split("."c)(1),
                                                            a.Value
                                                                             })
                             Select att.Key).ToList
      Dim phonenumbers = (From item In phonenumberdata
                          Join item2 In phonenumberdata
                          On item(0) Equals item2(0)
                          Where item(1) &lt;&gt; item2(2)
                          Select {item(1), item(2), item2(1), item2(2)}
                         ).Where(
                                 Function(o) o(0) = "Type" And
                                             o(0) &lt;&gt; o(2)).ToList
      Dim addressprops = xml.Attributes.Where(
                                Function(a) a.Name.LocalName.Split("."c)(0) = "A"
                                ).Select(
                                      Function(addr) addr.Value
                                         ).ToArray
            Dim ix = 0
            Dim p As New Person With {
                                   .FirstName = xml.@FirstName,
                                   .LastName = xml.@LastName,
                                   .Age = CInt(xml.@Age),
                                   .Address = New Address With {
                                                  .Street = addressprops(0),
                                                  .City = addressprops(1),
                                                  .Code = addressprops(2),
                                                  .State = addressprops(3)
                                                               },
                                   .PhoneNumbers = (From item In phonenumbers
                                                    Let i = Function()
                                                               ix += 1
                                                               Return ix
                                                            End Function.Invoke
                                                    Select New PhoneNumber With {
.SequenceID = i,
.Type = item(1), 
.Value = item(3)
}).ToList
                                    }
            Return p
        End Get
    End Property</pre></div></div>

<p>
There’s one extra which is not related to XML serialization but which I do want to mention here. We have seen the power of XML literals in VB. Well, this feature can very handily be used for overrides of ToString functions. Which we will do here.
</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="vbnet"><thead><tr><td colspan="2"  class="head">vb.net</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
</pre></td><td class="de1"><pre class="de1">&nbsp;<span class="kw1">Public</span> <span class="kw1">Overrides</span> <span class="kw1">Function</span> ToString<span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="kw1">As</span> <span class="kw2">String</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">Return</span> <span class="sy0">&lt;</span>String<span class="sy0">&gt;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;FirstName : <span class="sy0">&lt;%=</span> FirstName <span class="sy0">%&gt;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;LastName &nbsp;: <span class="sy0">&lt;%=</span> LastName <span class="sy0">%&gt;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;Age &nbsp; &nbsp; &nbsp; : <span class="sy0">&lt;%=</span> Age <span class="sy0">%&gt;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;Address &nbsp; &nbsp; 
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;Street &nbsp; &nbsp;: <span class="sy0">&lt;%=</span> Address<span class="sy0">.</span><span class="me1">Street</span> <span class="sy0">%&gt;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;City &nbsp; &nbsp; &nbsp;: <span class="sy0">&lt;%=</span> Address<span class="sy0">.</span><span class="me1">City</span> <span class="sy0">%&gt;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;Code &nbsp; &nbsp; &nbsp;: <span class="sy0">&lt;%=</span> Address<span class="sy0">.</span><span class="me1">Code</span> <span class="sy0">%&gt;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;State &nbsp; &nbsp; : <span class="sy0">&lt;%=</span> Address<span class="sy0">.</span><span class="me1">State</span> <span class="sy0">%&gt;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;Phonenumbers<span class="sy0">&lt;%=</span> Environment<span class="sy0">.</span><span class="me1">NewLine</span> <span class="sy0">%&gt;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span class="sy0">&lt;%=</span> <span class="kw5">From</span> nbr <span class="kw1">In</span> PhoneNumbers
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span class="kw1">Select</span> <span class="st0">&quot; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;</span> <span class="sy0">&amp;</span> nbr<span class="sy0">.</span><span class="me1">Type</span> <span class="sy0">&amp;</span> <span class="st0">&quot; : &quot;</span> <span class="sy0">&amp;</span> nbr<span class="sy0">.</span><span class="me1">Value</span> <span class="sy0">&amp;</span> Environment<span class="sy0">.</span><span class="me1">NewLine</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span class="sy0">%&gt;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span class="sy0">&lt;/</span>String<span class="sy0">&gt;.</span><span class="me1">Value</span>
&nbsp; &nbsp; <span class="kw1">End</span> <span class="kw1">Function</span>
&nbsp;
<span class="kw1">End</span> <span class="kw1">Class</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse"> Public Overrides Function ToString() As String
        Return &lt;String&gt;
                   FirstName : &lt;%= FirstName %&gt;
                   LastName  : &lt;%= LastName %&gt;
                   Age       : &lt;%= Age %&gt;
                   Address     
                   Street    : &lt;%= Address.Street %&gt;
                   City      : &lt;%= Address.City %&gt;
                   Code      : &lt;%= Address.Code %&gt;
                   State     : &lt;%= Address.State %&gt;
                   Phonenumbers&lt;%= Environment.NewLine %&gt;
                   &lt;%= From nbr In PhoneNumbers
                       Select "                   " &amp; nbr.Type &amp; " : " &amp; nbr.Value &amp; Environment.NewLine
                   %&gt;
               &lt;/String&gt;.Value
    End Function

End Class</pre></div></div>

<p>
Now we can consume this class to serialize and deserialize  instances into and from denormalized XML, which is as compact as XML can possibly get.
</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="vbnet"><thead><tr><td colspan="2"  class="head">vb.net</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
</pre></td><td class="de1"><pre class="de1"><span class="kw1">Dim</span> aPerson <span class="kw1">As</span> <span class="kw1">New</span> Person _
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span class="kw1">With</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="sy0">.</span><span class="me1">FirstName</span> <span class="sy0">=</span> <span class="st0">&quot;John&quot;</span>,
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="sy0">.</span><span class="me1">LastName</span> <span class="sy0">=</span> <span class="st0">&quot;Smith&quot;</span>,
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="sy0">.</span><span class="me1">Age</span> <span class="sy0">=</span> <span class="nu0">25</span>,
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="sy0">.</span><span class="me1">ID</span> <span class="sy0">=</span> <span class="st0">&quot;106&quot;</span>,
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="sy0">.</span><span class="me1">SequenceID</span> <span class="sy0">=</span> <span class="nu0">1</span>,
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="sy0">.</span><span class="me1">Address</span> <span class="sy0">=</span> <span class="kw1">New</span> Address <span class="kw1">With</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="sy0">.</span><span class="me1">Street</span> <span class="sy0">=</span> <span class="st0">&quot;21 2nd Street&quot;</span>,
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="sy0">.</span><span class="me1">City</span> <span class="sy0">=</span> <span class="st0">&quot;New York&quot;</span>,
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="sy0">.</span><span class="me1">State</span> <span class="sy0">=</span> <span class="st0">&quot;NY&quot;</span>,
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="sy0">.</span><span class="me1">Code</span> <span class="sy0">=</span> <span class="st0">&quot;10021&quot;</span>,
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="sy0">.</span><span class="me1">SequenceID</span> <span class="sy0">=</span> <span class="nu0">1</span><span class="br0">&#125;</span>,
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="sy0">.</span><span class="me1">PhoneNumbers</span> <span class="sy0">=</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span class="kw1">New</span> PhoneNumber <span class="kw1">With</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="sy0">.</span><span class="me1">Type</span> <span class="sy0">=</span> <span class="st0">&quot;home&quot;</span>, 
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="sy0">.</span><span class="me1">Value</span> <span class="sy0">=</span> <span class="st0">&quot;212 555-1234&quot;</span>, 
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="sy0">.</span><span class="me1">SequenceID</span> <span class="sy0">=</span> <span class="nu0">1</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span>,
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span class="kw1">New</span> PhoneNumber <span class="kw1">With</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="sy0">.</span><span class="me1">Type</span> <span class="sy0">=</span> <span class="st0">&quot;fax&quot;</span>, 
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="sy0">.</span><span class="me1">Value</span> <span class="sy0">=</span> <span class="st0">&quot;646 555-4567&quot;</span>, 
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="sy0">.</span><span class="me1">SequenceID</span> <span class="sy0">=</span> <span class="nu0">2</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span><span class="sy0">.</span><span class="me1">ToList</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Console<span class="sy0">.</span><span class="me1">WriteLine</span><span class="br0">&#40;</span>aPerson<span class="sy0">.</span><span class="me1">AsXML</span><span class="sy0">.</span><span class="me1">ToString</span><span class="br0">&#41;</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; aPerson <span class="sy0">=</span> Person<span class="sy0">.</span><span class="me1">FromXML</span><span class="br0">&#40;</span><span class="sy0">&lt;</span>person FirstName<span class="sy0">=</span><span class="st0">&quot;John&quot;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;LastName<span class="sy0">=</span><span class="st0">&quot;Smith&quot;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;Age<span class="sy0">=</span><span class="st0">&quot;25&quot;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;A<span class="sy0">.</span><span class="me1">Street</span><span class="sy0">=</span><span class="st0">&quot;21 2nd Street&quot;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;A<span class="sy0">.</span><span class="me1">City</span><span class="sy0">=</span><span class="st0">&quot;New York&quot;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;A<span class="sy0">.</span><span class="me1">Code</span><span class="sy0">=</span><span class="st0">&quot;10021&quot;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;A<span class="sy0">.</span><span class="me1">State</span><span class="sy0">=</span><span class="st0">&quot;NY&quot;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;P1<span class="sy0">.</span><span class="me1">Type</span><span class="sy0">=</span><span class="st0">&quot;home&quot;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;P1<span class="sy0">.</span><span class="me1">Value</span><span class="sy0">=</span><span class="st0">&quot;212 555-1234&quot;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;P2<span class="sy0">.</span><span class="me1">Type</span><span class="sy0">=</span><span class="st0">&quot;fax&quot;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;P2<span class="sy0">.</span><span class="me1">Value</span><span class="sy0">=</span><span class="st0">&quot;646 555-4567&quot;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;P3<span class="sy0">.</span><span class="me1">Type</span><span class="sy0">=</span><span class="st0">&quot;work&quot;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;P3<span class="sy0">.</span><span class="me1">Value</span><span class="sy0">=</span><span class="st0">&quot;646555-4566&quot;</span><span class="sy0">/&gt;</span><span class="br0">&#41;</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Console<span class="sy0">.</span><span class="me1">WriteLine</span><span class="br0">&#40;</span>aPerson<span class="sy0">.</span><span class="me1">ToString</span><span class="br0">&#41;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">Dim aPerson As New Person _
                       With {
                                .FirstName = "John",
                                .LastName = "Smith",
                                .Age = 25,
                                .ID = "106",
                                .SequenceID = 1,
                                .Address = New Address With {
                                                                .Street = "21 2nd Street",
                                                                .City = "New York",
                                                                .State = "NY",
                                                                .Code = "10021",
                                                                .SequenceID = 1},
                                .PhoneNumbers = {
                                           New PhoneNumber With {
                                                          .Type = "home", 
                                                          .Value = "212 555-1234", 
                                                          .SequenceID = 1
                                                          },
                                           New PhoneNumber With {
                                                          .Type = "fax", 
                                                          .Value = "646 555-4567", 
                                                          .SequenceID = 2
                                                          }
                                                }.ToList
                            }

            Console.WriteLine(aPerson.AsXML.ToString)

            aPerson = Person.FromXML(&lt;person FirstName="John"
                                         LastName="Smith"
                                         Age="25"
                                         A.Street="21 2nd Street"
                                         A.City="New York"
                                         A.Code="10021"
                                         A.State="NY"
                                         P1.Type="home"
                                         P1.Value="212 555-1234"
                                         P2.Type="fax"
                                         P2.Value="646 555-4567"
                                         P3.Type="work"
                                         P3.Value="646555-4566"/&gt;)

            Console.WriteLine(aPerson.ToString)</pre></div></div>

<p>
And you know what&#8217;s the nicest thing of it all? Excel can handle this kind of XML without any problem at all. Of course, you will have a worksheet with 1 row and a hell of lot of columns.</p>
]]></content:encoded>
			<wfw:commentRss>/index.php/desktopdev/mstech/vbnet/boost-your-datatransport-with-xml/feed/</wfw:commentRss>
		<slash:comments>2</slash:comments>
		</item>
		<item>
		<title>Real World Azure &#8211; Queue PopReceiptMismatch Bug</title>
		<link>/index.php/desktopdev/mstech/real-world-azure-queue-popreceiptmismatch/</link>
		<comments>/index.php/desktopdev/mstech/real-world-azure-queue-popreceiptmismatch/#respond</comments>
		<pubDate>Mon, 09 Sep 2013 12:41:00 +0000</pubDate>
		<dc:creator><![CDATA[Eli Weinstock-Herman (tarwn)]]></dc:creator>
				<category><![CDATA[Microsoft Technologies]]></category>
		<category><![CDATA[azure queue service]]></category>
		<category><![CDATA[real world azure]]></category>
		<category><![CDATA[unit testing]]></category>
		<category><![CDATA[windows azure]]></category>

		<guid isPermaLink="false">/index.php/2013/09/real-world-azure-queue-popreceiptmismatch/</guid>
		<description><![CDATA[This week I'm starting a new series on "Real World Azure". These are stories or issues I have run into while working with Azure in the "Real World". Today we're looking at a bug in the Azure API for Queue Services that appears to have been around for at&#8230;]]></description>
				<content:encoded><![CDATA[<p>This week I&#8217;m starting a new series on &#8220;Real World Azure&#8221;. These are stories or issues I have run into while working with Azure in the &#8220;Real World&#8221;. Today we&#8217;re looking at a bug in the Azure API for Queue Services that appears to have been around for at least the last two versions of the storage API (prior to 2011-08-18, or SDK 1.7).</p>
<div style="background-color: #ffff99; padding: .5em; margin: 1em;">
<h2 style="margin: .5em 0px;">Real World Azure</h2>
<p>There are a lot of great resources out there on Azure, from demos to webcasts to white papers filled with architectural diagrams. This is to be expected. Microsoft products tend to focus on the 15 minute demo or polished architecture diagram in an enterprise whitepaper, a controlled exposure of only a subset of the functionality you will use in the real world.</p>
<p>I have used Azure daily for years on live business and personal projects, not demos. From supporting production systems running hundred of millions of storage transactions to figuring out why a change to the Azure Management API limits sends certain legacy code into a death spiral to working directly with the APIs in 3-4 different languages to months where we had 2-4 active support cases at any time. These are examples found in the real, production usage.
</p></div>
<p>Today we&#8217;re looking at a longstanding bug in the <a href="http://www.windowsazure.com/en-us/develop/net/how-to-guides/queue-service/" title="Azure Queue Service on WindowsAzure.com">Azure Queue Service</a> that I&#8217;ve been struggling with lately. </p>
<h2>What is the Azure Queue Service?</h2>
<p>The Queue Service allows you to create Queues and Put and Get messages from those queues. Queues in the Queue Service are equally accessible from any number of other Azure services or sites, making it an excellent mechanism for communicating between services.</p>
<p>The Queue uses a two-phase Get/Delete process for dequeueing Messages. When you Get the item, it goes invisible for a period of time you specify until you have finished and call Delete. If you have network problems, a system crash, or other unforeseen circumstances, the item resurfaces in it&#8217;s original position, allowing another of your resources to pick it up and finish executing it instead of losing it forever. </p>
<div style="text-align: center; color: #666666; margin: .5em"">
   <img src="http://tiernok.com/LTDBlog/RealWorldAzure/TwoStepDequeue.png" /><br />
   GETting a Message makes it invisible, DELETEing removes it
</div>
<p>An Update method provides the ability to resurface the Message, extend the visibility timeout, or update the contents of the Message. This last option shows up in Microsoft examples where they have multi-phase work, so when a Message resurfaces you can pick the work up at the last step it reached instead of starting from the beginning (not my recommendation, but that&#8217;s another topic).</p>
<p>The ability to break down work into atomic units and then spin up N units consuming items from that queue is a powerful tool for horizontally scaling work.</p>
<h2>The PopReceipt &#8211; Not Just for GetMessage Calls</h2>
<p>To prevent other processes from updating a Message that has been Get-ed, a unique PopReceipt is issued with the GetMessage response. Later UpdateMessage and DeleteMessage calls are required to have this PopReceipt to access the item. This prevents crosstalk or a Message resurfacing and being picked up by a second worker, then being updated or deleted by the original worker. Very handy.</p>
<p>But wait, I thought this was all to resolve cases where the first system has gone down, why would it try to update that Message again if it&#8217;s down or rebooted?</p>
<p>Setting aside the case where you were persisting the Message Id and PopReceipt somewhere that is accessible when your system un-crashes (don&#8217;t do that), there is one other catch to all of this. Every time you call UpdateMessage to extend the visibility timeout or update the content, a new PopReceipt is issued. This means that in order to continue processing it and complete (Update and Delete) you have to have perfect tracking of the latest PopReceipt throughout the lifetime of the job.  </p>
<p>So when you have a network error (which is the subject of another post and numerous support tickets) and don&#8217;t receive the response to a successful UpdateMessage, you lose the last PopReceipt, even if you can continue and successfully complete processing and only lost one Update call out of 100 during the lifetime of a long-lived Message.</p>
<h2>The PopReceiptMismatch Error</h2>
<p>The Azure REST API outlines all of the errors you can expect to get back, nicely broken down into a <a href="http://msdn.microsoft.com/en-us/library/windowsazure/dd179357.aspx">common set of errors</a> and service-specific lists (<a href="http://msdn.microsoft.com/en-us/library/windowsazure/dd179446.aspx">Queue Service Errors</a>).</p>
<p>The error code we are looking at is:</p>
<div style="background-color: #EEEEEE; margin: .5em; padding: .5em">
PopReceiptMismatch: Bad Request (400) &#8211; The specified pop receipt did not match the pop receipt for a dequeued message.
</div>
<p>The <a href="http://msdn.microsoft.com/en-us/library/windowsazure/dd179347.aspx">Delete Message</a> (Last updated Sept, 2011) documentation specifically outlines this scenario:</p>
<blockquote><p>If a message with a matching pop receipt is not found, the service returns status code 400 (Bad Request), with additional error information indicating that the cause of the failure was a mismatched pop receipt.</p></blockquote>
<p>The <a href="http://msdn.microsoft.com/en-us/library/windowsazure/hh452234.aspx">Update Message</a> (Last updated Sept, 2011) documentation is less specific but sounds like we should expect the same error (emphasis mine):</p>
<blockquote><p>
An Update Message operation will fail if the specified message does not exist in the queue, or if the specified <strong>pop receipt does not match</strong>
</p></blockquote>
<p>So it makes sense that if we GetMessage and somehow have an out of date PopReceipt or attempt to use a PopReceipt that belongs to a different item, we would receive a PopReceiptMismatch error.</p>
<p><strong>Actual Response:</strong></p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="xml"><thead><tr><td colspan="2"  class="head">XML</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
</pre></td><td class="de1"><pre class="de1"><span class="sc3"><span class="re1">&lt;?xml</span> <span class="re0">version</span>=<span class="st0">&quot;1.0&quot;</span> <span class="re0">encoding</span>=<span class="st0">&quot;utf-8&quot;</span><span class="re2">?&gt;</span></span>
<span class="sc3"><span class="re1">&lt;Error<span class="re2">&gt;</span></span></span>
&nbsp; &nbsp;<span class="sc3"><span class="re1">&lt;Code<span class="re2">&gt;</span></span></span>MessageNotFound<span class="sc3"><span class="re1">&lt;/Code<span class="re2">&gt;</span></span></span>
&nbsp; &nbsp;<span class="sc3"><span class="re1">&lt;Message<span class="re2">&gt;</span></span></span>The specified message does not exist.
RequestId:98bd9fb1-d32f-45bd-9159-c900a9b2fed3
Time:2013-09-07T17:04:30.5469796Z<span class="sc3"><span class="re1">&lt;/Message<span class="re2">&gt;</span></span></span>
<span class="sc3"><span class="re1">&lt;/Error<span class="re2">&gt;</span></span></span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">&lt;?xml version="1.0" encoding="utf-8"?&gt;
&lt;Error&gt;
   &lt;Code&gt;MessageNotFound&lt;/Code&gt;
   &lt;Message&gt;The specified message does not exist.
RequestId:98bd9fb1-d32f-45bd-9159-c900a9b2fed3
Time:2013-09-07T17:04:30.5469796Z&lt;/Message&gt;
&lt;/Error&gt;</pre></div></div>

<p>Wait, what? 404, MessageNotFound, &#8220;The specified message does not exist.&#8221;? </p>
<p>That doesn&#8217;t match the documentation OR sound correct?</p>
<h2>The PopReceiptMismatch Bug</h2>
<p>I&#8217;ve written a series of unit tests that show that you receive &#8220;Item not found&#8221; from using an outdated PopReceipt, a PopReceipt from another queue&#8217;s item, and a fabricated PopReceipt. All cases where I would expect to receive the PopReceiptMismatch error.</p>
<p><a href="https://github.com/tarwn/AzureQueueIssues/blob/master/PopReceiptMismatchReturnsWrongError.cs">AzureQueueIssues/PopReceiptMismatchReturnsWrongError.cs</a> (Full code available on Github)</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="csharp"><thead><tr><td colspan="2"  class="head">C#</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
</pre></td><td class="de1"><pre class="de1"><span class="br0">&#91;</span>Test<span class="br0">&#93;</span>
<span class="kw1">public</span> <span class="kw4">void</span> UpdateMessage_UsingIncorrectPopReceipt_Returns400PopReceiptMismatch<span class="br0">&#40;</span><span class="br0">&#41;</span>
<span class="br0">&#123;</span>
&nbsp; &nbsp; <span class="co1">// Create the queue client</span>
&nbsp; &nbsp; <span class="kw1">var</span> queueClient <span class="sy0">=</span> _account<span class="sy0">.</span><span class="me1">CreateCloudQueueClient</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; <span class="co1">// Retrieve a reference to a queue</span>
&nbsp; &nbsp; <span class="kw1">var</span> queue <span class="sy0">=</span> queueClient<span class="sy0">.</span><span class="me1">GetQueueReference</span><span class="br0">&#40;</span><span class="st0">&quot;unit-test&quot;</span> <span class="sy0">+</span> Guid<span class="sy0">.</span><span class="me1">NewGuid</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">.</span><span class="me1">ToString</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; queue<span class="sy0">.</span><span class="me1">CreateIfNotExists</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; queue<span class="sy0">.</span><span class="me1">Clear</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; <span class="co1">// let's queue up a sample message</span>
&nbsp; &nbsp; <span class="kw1">var</span> message <span class="sy0">=</span> <span class="kw3">new</span> CloudQueueMessage<span class="br0">&#40;</span><span class="st0">&quot;test content&quot;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; <span class="co1">// note the unecessary difference in terminology between API (Put) and reference SDK (Add)</span>
&nbsp; &nbsp; queue<span class="sy0">.</span><span class="me1">AddMessage</span><span class="br0">&#40;</span>message<span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; <span class="co1">// now we get the item and violate the first Get's popreceipt</span>
&nbsp; &nbsp; <span class="kw1">var</span> queueMessage1 <span class="sy0">=</span> queue<span class="sy0">.</span><span class="me1">GetMessage</span><span class="br0">&#40;</span>TimeSpan<span class="sy0">.</span><span class="me1">FromSeconds</span><span class="br0">&#40;</span><span class="nu0">1</span><span class="br0">&#41;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; Thread<span class="sy0">.</span><span class="me1">Sleep</span><span class="br0">&#40;</span>TimeSpan<span class="sy0">.</span><span class="me1">FromSeconds</span><span class="br0">&#40;</span><span class="nu0">2</span><span class="br0">&#41;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; <span class="kw1">var</span> queueMessage2 <span class="sy0">=</span> queue<span class="sy0">.</span><span class="me1">GetMessage</span><span class="br0">&#40;</span>TimeSpan<span class="sy0">.</span><span class="me1">FromSeconds</span><span class="br0">&#40;</span><span class="nu0">60</span><span class="br0">&#41;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; <span class="co1">// and just to be absolutely clear that we didn't get the same receipt a second time</span>
&nbsp; &nbsp; Assert<span class="sy0">.</span><span class="me1">AreNotEqual</span><span class="br0">&#40;</span>queueMessage1<span class="sy0">.</span><span class="me1">PopReceipt</span>, queueMessage2<span class="sy0">.</span><span class="me1">PopReceipt</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; <span class="co1">// now lets harvest the error from using the first popreceipt</span>
&nbsp; &nbsp; <span class="kw4">int</span> statusCode <span class="sy0">=</span> <span class="sy0">-</span><span class="nu0">1</span><span class="sy0">;</span>
&nbsp; &nbsp; <span class="kw4">string</span> status <span class="sy0">=</span> <span class="st0">&quot;not defined&quot;</span><span class="sy0">;</span>
&nbsp; &nbsp; <span class="kw1">try</span>
&nbsp; &nbsp; <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; queue<span class="sy0">.</span><span class="me1">UpdateMessage</span><span class="br0">&#40;</span>queueMessage1, TimeSpan<span class="sy0">.</span><span class="me1">FromSeconds</span><span class="br0">&#40;</span><span class="nu0">60</span><span class="br0">&#41;</span>, Microsoft<span class="sy0">.</span><span class="me1">WindowsAzure</span><span class="sy0">.</span><span class="me1">Storage</span><span class="sy0">.</span><span class="me1">Queue</span><span class="sy0">.</span><span class="me1">MessageUpdateFields</span><span class="sy0">.</span><span class="me1">Visibility</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp; &nbsp; <span class="kw1">catch</span> <span class="br0">&#40;</span>StorageException exc<span class="br0">&#41;</span>
&nbsp; &nbsp; <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; statusCode <span class="sy0">=</span> exc<span class="sy0">.</span><span class="me1">RequestInformation</span><span class="sy0">.</span><span class="me1">HttpStatusCode</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; status <span class="sy0">=</span> exc<span class="sy0">.</span><span class="me1">RequestInformation</span><span class="sy0">.</span><span class="me1">HttpStatusMessage</span><span class="sy0">;</span>
&nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp;
&nbsp; &nbsp; <span class="co1">// prove that the item is still valid and it was definately a popreceipt mismatch</span>
&nbsp; &nbsp; queue<span class="sy0">.</span><span class="me1">UpdateMessage</span><span class="br0">&#40;</span>queueMessage2, TimeSpan<span class="sy0">.</span><span class="me1">FromSeconds</span><span class="br0">&#40;</span><span class="nu0">60</span><span class="br0">&#41;</span>, Microsoft<span class="sy0">.</span><span class="me1">WindowsAzure</span><span class="sy0">.</span><span class="me1">Storage</span><span class="sy0">.</span><span class="me1">Queue</span><span class="sy0">.</span><span class="me1">MessageUpdateFields</span><span class="sy0">.</span><span class="me1">Visibility</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; <span class="co1">//cleanup</span>
&nbsp; &nbsp; queue<span class="sy0">.</span><span class="me1">Delete</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; <span class="co1">// documented response</span>
&nbsp; &nbsp; Assert<span class="sy0">.</span><span class="me1">AreEqual</span><span class="br0">&#40;</span>Error_PopReceiptMismatchMessage, status<span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; Assert<span class="sy0">.</span><span class="me1">AreEqual</span><span class="br0">&#40;</span>ErrorCode_PopReceiptMismatch, statusCode<span class="br0">&#41;</span><span class="sy0">;</span>
<span class="br0">&#125;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">[Test]
public void UpdateMessage_UsingIncorrectPopReceipt_Returns400PopReceiptMismatch()
{
	// Create the queue client
	var queueClient = _account.CreateCloudQueueClient();

	// Retrieve a reference to a queue
	var queue = queueClient.GetQueueReference("unit-test" + Guid.NewGuid().ToString());
	queue.CreateIfNotExists();
	queue.Clear();

	// let's queue up a sample message
	var message = new CloudQueueMessage("test content");
	// note the unecessary difference in terminology between API (Put) and reference SDK (Add)
	queue.AddMessage(message);

	// now we get the item and violate the first Get's popreceipt
	var queueMessage1 = queue.GetMessage(TimeSpan.FromSeconds(1));
	Thread.Sleep(TimeSpan.FromSeconds(2));
	var queueMessage2 = queue.GetMessage(TimeSpan.FromSeconds(60));
	// and just to be absolutely clear that we didn't get the same receipt a second time
	Assert.AreNotEqual(queueMessage1.PopReceipt, queueMessage2.PopReceipt);

	// now lets harvest the error from using the first popreceipt
	int statusCode = -1;
	string status = "not defined";
	try
	{
		queue.UpdateMessage(queueMessage1, TimeSpan.FromSeconds(60), Microsoft.WindowsAzure.Storage.Queue.MessageUpdateFields.Visibility);
	}
	catch (StorageException exc)
	{
		statusCode = exc.RequestInformation.HttpStatusCode;
		status = exc.RequestInformation.HttpStatusMessage;
	}

	// prove that the item is still valid and it was definately a popreceipt mismatch
	queue.UpdateMessage(queueMessage2, TimeSpan.FromSeconds(60), Microsoft.WindowsAzure.Storage.Queue.MessageUpdateFields.Visibility);

	//cleanup
	queue.Delete();

	// documented response
	Assert.AreEqual(Error_PopReceiptMismatchMessage, status);
	Assert.AreEqual(ErrorCode_PopReceiptMismatch, statusCode);
}</pre></div></div>

<p>By getting a Message, allowing it&#8217;s visibility timeout to expire, and getting it a second time, we can ensure the original popreceipt is no longer valid.</p>
<p>(and that I can&#8217;t spell definitely without spellcheck)</p>
<p>In a <a href="http://social.msdn.microsoft.com/Forums/windowsazure/en-US/aab37e27-2f04-47db-9e1d-66fd224ac925/handling-queue-message-deletion-error">forum post from 2011</a> a microsoft representative said that the PopReceiptMismatch error is not supposed to be returned for all Pop Receipt Mismatches, only when you use a PopReceipt from another message/queue. His answer indicated that this was an error in the documentation (common response on the forums: service works right the way it is, the documentation must be incorrect). </p>
<p>The cross-queue case is of course included in a test like the one above and available on Github. Spoiler: 404 Message does not exist.</p>
<p><strong>Conclusion: </strong> When a Message does not exist or it exists but you have the wrong PopReceiptMismatch, you will receive &#8220;The specified message does not exist.&#8221;</p>
<p>Here are the tests that I ran against live Azure and the latest emulator:</p>
<style>
dt, dd{
   display: block !important;
   float: none !important;
}
dd{
   display: block !important;
   float: none !important;
   margin: .25em 0 1em 1em !important;
}
</style>
<dl>
<dt>UpdateMessage_UsingIncorrectPopReceipt_Returns400PopReceiptMismatch</dt>
<dd>Fails, receives 404, Message does not exist</dd>
<dt>UpdateMessage_UsingHandWrittenCode_Returns204NoContentOnSuccesfulUpdate</dt>
<dd>Success, verifies code to consume API works for use in later tests</dd>
<dt>UpdateMessage_UsingIncorrectPopReceiptFormat_ReturnsInvalidParameterAndNotPopReceiptMismatch</dt>
<dd>Success, the Common Service Errors documentation is correct, this does not return PopReceiptMismatch as was outlined in the 2011 forum post</dd>
<dt>UpdateMessage_UsingMadeUpButValidFormatPopReceipt_Returns400PopReceiptMismatch</dt>
<dd>Fails, receives 404, Message does not exist</dd>
</dl>
<p>So either this is a bug in the Azure Service code, which continued through at least 2 later versions of the API and at least two versions of the Storage Emulator, or this was intended. Given the granularity and number of service errors defined throughout the rest of the service, the first case is more likely. </p>
<p>As an additional level of confirmation, during a recent Azure support case, the person helping me was sidetracked off into other investigations because he also expected us to be receiving (400) PopReceiptMismatch for this situation. Even the Storage Analytics logs reflects this as a 404.</p>
<h2>The Workaround</h2>
<p>There isn&#8217;t one. </p>
<p>Unfortunately there is no method we can call to determine if the Message actually still exists or not.</p>
<p>The two resolutions I have considered require an absurd amount of extra development. One way would be to build a proxy or logging layer that logs every single call we make, centrally, and tracks the latest state every message is in per our calls out to the service. The next option would be to consume the Analytics logs and track the latest status available even if the individual HTTP call ran into an error during reception. Both of which seem like as much work as building our own queue service.</p>
<h2>Questions</h2>
<p>There are several things it would be nice to know:</p>
<p><strong>1) Confirmation of this bug as well as an indication of when it will be fixed. </strong><br />
Unfortunately it is entirely possible someone has built logic that relies on the incorrect error message (and how they tell which case it is, I have no idea), so I suspect an API version would be required to fix it safely.</p>
<p><strong>2) Why hasn&#8217;t this been uncovered in Microsoft&#8217;s integration testing on the service? </strong><br />
I have a custom SDK that consumes the API. One responsibility of this library is to map received errors into specific custom Exception types (I find these far easier to use then having one StorageException with codes, like the reference SDK from Microsoft). To build automated test cases for this library, I copied the Error Code tables from the documentation and made TestCase attributes with search/replace and some regex magic. A similar method could be used for Integration tests. Add in a tool like <a href="http://fitnesse.org/">FitNesse</a>, and their MSDN documentation could serve as the list of test cases automatically.</p>
<p><strong>3) Why does the PopReceipt change on Updates?</strong><br />
Why do the PopReceipts change on Updates at all? I can&#8217;t think of a single valid case where this is useful. In fact this smells an awful lot like a developer taking a shortcut while working on the Azure service and calling or re-using logic from GetMessage and getting this extra behavior by accident. I haven&#8217;t been able to find an answer to this question yet.</p>
<p>More Real World Azure to come. Technical issues, how to work with support and their limitations, my personal known issues list, and so on.</p>
]]></content:encoded>
			<wfw:commentRss>/index.php/desktopdev/mstech/real-world-azure-queue-popreceiptmismatch/feed/</wfw:commentRss>
		<slash:comments>0</slash:comments>
		</item>
	</channel>
</rss>
