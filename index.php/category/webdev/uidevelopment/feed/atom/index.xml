<?xml version="1.0" encoding="UTF-8"?><feed
  xmlns="http://www.w3.org/2005/Atom"
  xmlns:thr="http://purl.org/syndication/thread/1.0"
  xml:lang="en-US"
  xml:base="/wp-atom.php"
   >
	<title type="text">UI Development &#8211; LessthanDot</title>
	<subtitle type="text">A Technical Community for IT Professionals</subtitle>

	<updated>2019-03-09T12:50:36Z</updated>

	<link rel="alternate" type="text/html" href="/" />
	<id>/index.php/feed/atom/</id>
	<link rel="self" type="application/atom+xml" href="/index.php/category/webdev/uidevelopment/feed/atom/" />

	<generator uri="https://wordpress.org/" version="4.6.1">WordPress</generator>
	<entry>
		<author>
			<name>Alex Ullrich</name>
					</author>
		<title type="html"><![CDATA[Automatic Promise Resolution for AngularJS Unit Testing]]></title>
		<link rel="alternate" type="text/html" href="/index.php/webdev/uidevelopment/javascript/automatic-promise-resolution-for-angularjs-unit-testing/" />
		<id>/?p=4359</id>
		<updated>2016-02-18T15:39:02Z</updated>
		<published>2016-02-18T15:39:02Z</published>
		<category scheme="/" term="Javascript" />		<summary type="html"><![CDATA[We&#8217;ve been using Angular for client-side apps for a couple years now, and it has mostly been great. The data binding works well, and the baked in dependency injection makes it very easy for our team of C# developers to write unit tests. There have been some painful moments, but they&#8217;ve mostly been growing pains [&#8230;]]]></summary>
		<content type="html" xml:base="/index.php/webdev/uidevelopment/javascript/automatic-promise-resolution-for-angularjs-unit-testing/"><![CDATA[<p>We&#8217;ve been using Angular for client-side apps for a couple years now, and it has mostly been great. The data binding works well, and the baked in dependency injection makes it very easy for our team of C# developers to write unit tests. There have been some painful moments, but they&#8217;ve mostly been growing pains on our part. One that has been particularly sticky was testing with mocked dependencies that return promises.</p>
<h2>Standard Approach</h2>
<p>For us, the first time we were introduced to this stuff was when trying to test controllers using mocks of services that communicate over HTTP.  Angular&#8217;s <a href="https://docs.angularjs.org/api/ng/service/$http" title="$http service">$http service</a> works asynchronously and returns promises, so by extension our services do as well.  Luckily there is a lot of information out there to help with testing this kind of method, and everything we found pointed us to the <a href="https://docs.angularjs.org/api/ng/service/$q" title="$q">$q service</a>.  This service is there for working with deferred objects, and is mostly pretty easy to get on with.  Here is an example test from that page:</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="javascript"><thead><tr><td colspan="2"  class="head">Javascript</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
</pre></td><td class="de1"><pre class="de1">it<span class="br0">&#40;</span><span class="st0">'should simulate promise'</span><span class="sy0">,</span> inject<span class="br0">&#40;</span><span class="kw1">function</span><span class="br0">&#40;</span>$q<span class="sy0">,</span> $rootScope<span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; <span class="kw1">var</span> deferred <span class="sy0">=</span> $q.<span class="me1">defer</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; <span class="kw1">var</span> promise <span class="sy0">=</span> deferred.<span class="me1">promise</span><span class="sy0">;</span>
&nbsp; <span class="kw1">var</span> resolvedValue<span class="sy0">;</span>
&nbsp;
&nbsp; promise.<span class="me1">then</span><span class="br0">&#40;</span><span class="kw1">function</span><span class="br0">&#40;</span>value<span class="br0">&#41;</span> <span class="br0">&#123;</span> resolvedValue <span class="sy0">=</span> value<span class="sy0">;</span> <span class="br0">&#125;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; expect<span class="br0">&#40;</span>resolvedValue<span class="br0">&#41;</span>.<span class="me1">toBeUndefined</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
&nbsp; <span class="co1">// Simulate resolving of promise</span>
&nbsp; deferred.<span class="me1">resolve</span><span class="br0">&#40;</span><span class="nu0">123</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; <span class="co1">// Note that the 'then' function does not get called synchronously.</span>
&nbsp; <span class="co1">// This is because we want the promise API to always be async, whether or not</span>
&nbsp; <span class="co1">// it got called synchronously or asynchronously.</span>
&nbsp; expect<span class="br0">&#40;</span>resolvedValue<span class="br0">&#41;</span>.<span class="me1">toBeUndefined</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
&nbsp; <span class="co1">// Propagate promise resolution to 'then' functions using $apply().</span>
&nbsp; $rootScope.$apply<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; expect<span class="br0">&#40;</span>resolvedValue<span class="br0">&#41;</span>.<span class="me1">toEqual</span><span class="br0">&#40;</span><span class="nu0">123</span><span class="br0">&#41;</span><span class="sy0">;</span>
<span class="br0">&#125;</span><span class="br0">&#41;</span><span class="br0">&#41;</span><span class="sy0">;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">it('should simulate promise', inject(function($q, $rootScope) {
  var deferred = $q.defer();
  var promise = deferred.promise;
  var resolvedValue;

  promise.then(function(value) { resolvedValue = value; });
  expect(resolvedValue).toBeUndefined();

  // Simulate resolving of promise
  deferred.resolve(123);
  // Note that the 'then' function does not get called synchronously.
  // This is because we want the promise API to always be async, whether or not
  // it got called synchronously or asynchronously.
  expect(resolvedValue).toBeUndefined();

  // Propagate promise resolution to 'then' functions using $apply().
  $rootScope.$apply();
  expect(resolvedValue).toEqual(123);
}));</pre></div></div>

<p>The main sticking point here is $rootScope.$apply().  We can also call $rootScope.$digest() &#8211; but that method&#8217;s intent might be even less clear.  The reason these need to be called is not immediately clear from the code, but answers can be found in Angular&#8217;s <a href="https://docs.angularjs.org/guide/scope" title="$scope">$scope documentation</a>.  Particularly</p>
<blockquote><p>
When an external event (such as a user action, timer or XHR) is received, the associated expression must be applied to the scope through the $apply() method so that all listeners are updated correctly.
</p></blockquote>
<p>When running a full blown angular application, we don&#8217;t need to worry about this &#8211; it happens in the background and we can get on with our lives.  But testing is a different story.  As an application gets larger you find mysterious calls to $rootScope.$apply() or $rootScope.$digest() (or both) littered throughout your tests, in seemingly arbitrary places.  If you have multiple promises in play, you might have several in a single test.  In many tests (possibly even &#8220;most&#8221; tests if you use the controllerAs style) this might be your only reason to capture the injected scopoe.  There must be a better way.</p>
<h2>&#8216;AutoQ&#8217; Approach</h2>
<p>What we had our sights on was a way to wrap $q and $rootScope in a single object that would know to call apply after any resolution or rejection.  We called it &#8216;autoQ&#8217; and the name stuck.  Here is what the example test above looks like when using it:</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="javascript"><thead><tr><td colspan="2"  class="head">Javascript</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
</pre></td><td class="de1"><pre class="de1">it<span class="br0">&#40;</span><span class="st0">'should simulate promise'</span><span class="sy0">,</span> inject<span class="br0">&#40;</span><span class="kw1">function</span><span class="br0">&#40;</span>$q<span class="sy0">,</span> $rootScope<span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; <span class="kw1">var</span> deferred <span class="sy0">=</span> autoQ<span class="br0">&#40;</span>$q<span class="sy0">,</span> $rootScope<span class="br0">&#41;</span>.<span class="me1">defer</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; <span class="kw1">var</span> promise <span class="sy0">=</span> deferred.<span class="me1">promise</span><span class="sy0">;</span>
&nbsp; &nbsp; <span class="kw1">var</span> resolvedValue<span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; promise.<span class="me1">then</span><span class="br0">&#40;</span><span class="kw1">function</span><span class="br0">&#40;</span>value<span class="br0">&#41;</span> <span class="br0">&#123;</span> resolvedValue <span class="sy0">=</span> value<span class="sy0">;</span> <span class="br0">&#125;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; expect<span class="br0">&#40;</span>resolvedValue<span class="br0">&#41;</span>.<span class="me1">toBeUndefined</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; <span class="co1">// Simulate resolving of promise</span>
&nbsp; &nbsp; deferred.<span class="me1">resolve</span><span class="br0">&#40;</span><span class="nu0">123</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; 
&nbsp; &nbsp; <span class="co1">// promise will be resolved immediately</span>
&nbsp; &nbsp; expect<span class="br0">&#40;</span>resolvedValue<span class="br0">&#41;</span>.<span class="me1">toEqual</span><span class="br0">&#40;</span><span class="nu0">123</span><span class="br0">&#41;</span><span class="sy0">;</span>
<span class="br0">&#125;</span><span class="br0">&#41;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
<span class="kw1">function</span> autoQ<span class="br0">&#40;</span>$q<span class="sy0">,</span> $rootScope<span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; <span class="kw1">return</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; defer<span class="sy0">:</span> <span class="kw1">function</span><span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">var</span> deferred <span class="sy0">=</span> $q.<span class="me1">defer</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; deferred.<span class="me1">resolve</span> <span class="sy0">=</span> <span class="kw1">function</span><span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">this</span>.<span class="kw3">__proto__</span>.<span class="me1">resolve</span>.<span class="me1">apply</span><span class="br0">&#40;</span><span class="kw1">this</span><span class="sy0">,</span> arguments<span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; $rootScope.$apply<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; deferred.<span class="me1">reject</span> <span class="sy0">=</span> <span class="kw1">function</span><span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">this</span>.<span class="kw3">__proto__</span>.<span class="me1">reject</span>.<span class="me1">apply</span><span class="br0">&#40;</span><span class="kw1">this</span><span class="sy0">,</span> arguments<span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; $rootScope.$apply<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; deferred.<span class="me1">notify</span> <span class="sy0">=</span> <span class="kw1">function</span><span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">this</span>.<span class="kw3">__proto__</span>.<span class="me1">notify</span>.<span class="me1">apply</span><span class="br0">&#40;</span><span class="kw1">this</span><span class="sy0">,</span> arguments<span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; $rootScope.$apply<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">return</span> deferred<span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp; &nbsp; <span class="br0">&#125;</span>
<span class="br0">&#125;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">it('should simulate promise', inject(function($q, $rootScope) {
    var deferred = autoQ($q, $rootScope).defer();
    var promise = deferred.promise;
    var resolvedValue;

    promise.then(function(value) { resolvedValue = value; });
    expect(resolvedValue).toBeUndefined();

    // Simulate resolving of promise
    deferred.resolve(123);
  
    // promise will be resolved immediately
    expect(resolvedValue).toEqual(123);
}));

function autoQ($q, $rootScope) {
    return {
        defer: function() {
            var deferred = $q.defer();

            deferred.resolve = function() {
                this.__proto__.resolve.apply(this, arguments);
                $rootScope.$apply();
            }

            deferred.reject = function() {
                this.__proto__.reject.apply(this, arguments);
                $rootScope.$apply();
            }

            deferred.notify = function() {
                this.__proto__.notify.apply(this, arguments);
                $rootScope.$apply();
            }
            
            return deferred;
        }
    }
}</pre></div></div>

<p>So now we don&#8217;t have to call $rootScope.$apply(), but we do have to call the autoQ setup method, which is not ideal.</p>
<h2>Making it useful</h2>
<p>When trying to figure out how to make this available to our tests, a trick we had been using to test the config phase of our application came to mind.  Essentially what you do is declare a module upstream from your tests, and you can initialize it to capture dependencies taken in during the config phase (or anywhere in the module initialization process really).  That &#8220;anywhere in the module initialization process&#8221; is where this gets interesting for our current problem.  Any dependencies mutated or introduced through this dummy module will be available <strong>in their modified state</strong> to modules instantiated downstream.  We had primarily done this as a way to set up spies for methods called during the config phase of our application, but the possibilities are endless.  What we ended up doing was using this dummy module approach to register an &#8216;autoQ&#8217; service that is only available in tests.</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="javascript"><thead><tr><td colspan="2"  class="head">Javascript</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
</pre></td><td class="de1"><pre class="de1">&nbsp; &nbsp; <span class="co1">//need to call angular.module here, NOT the module method exposed by angular mocks</span>
&nbsp; &nbsp; angular.<span class="me1">module</span><span class="br0">&#40;</span><span class="st0">'setupAutoQ'</span><span class="sy0">,</span> <span class="br0">&#91;</span><span class="br0">&#93;</span><span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; .<span class="me1">service</span><span class="br0">&#40;</span><span class="st0">'autoQ'</span><span class="sy0">,</span> <span class="kw1">function</span> <span class="br0">&#40;</span>$q<span class="sy0">,</span> $rootScope<span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">return</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; defer<span class="sy0">:</span> <span class="kw1">function</span> <span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">var</span> deferred <span class="sy0">=</span> $q.<span class="me1">defer</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; deferred.<span class="me1">resolve</span> <span class="sy0">=</span> <span class="kw1">function</span> <span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">this</span>.<span class="kw3">__proto__</span>.<span class="me1">resolve</span>.<span class="me1">apply</span><span class="br0">&#40;</span><span class="kw1">this</span><span class="sy0">,</span> arguments<span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; $rootScope.$apply<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; deferred.<span class="me1">reject</span> <span class="sy0">=</span> <span class="kw1">function</span> <span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">this</span>.<span class="kw3">__proto__</span>.<span class="me1">reject</span>.<span class="me1">apply</span><span class="br0">&#40;</span><span class="kw1">this</span><span class="sy0">,</span> arguments<span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; $rootScope.$apply<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; deferred.<span class="me1">notify</span> <span class="sy0">=</span> <span class="kw1">function</span><span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">this</span>.<span class="kw3">__proto__</span>.<span class="me1">notify</span>.<span class="me1">apply</span><span class="br0">&#40;</span><span class="kw1">this</span><span class="sy0">,</span> arguments<span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; $rootScope.$apply<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">return</span> deferred<span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; <span class="co1">//this is the angular mocks module method - we need to run the module once it has been declared</span>
&nbsp; &nbsp; module<span class="br0">&#40;</span><span class="st0">'setupAutoQ'</span><span class="br0">&#41;</span><span class="sy0">;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">    //need to call angular.module here, NOT the module method exposed by angular mocks
    angular.module('setupAutoQ', [])
            .service('autoQ', function ($q, $rootScope) {

                return {
                    defer: function () {
                        var deferred = $q.defer();

                        deferred.resolve = function () {
                            this.__proto__.resolve.apply(this, arguments);
                            $rootScope.$apply();
                        }

                        deferred.reject = function () {
                            this.__proto__.reject.apply(this, arguments);
                            $rootScope.$apply();
                        }
                        
                        deferred.notify = function() {
                            this.__proto__.notify.apply(this, arguments);
                            $rootScope.$apply();
                        }

                        return deferred;
                    }
                }
            });

    //this is the angular mocks module method - we need to run the module once it has been declared
    module('setupAutoQ');</pre></div></div>

<p>The last piece of the puzzle was how to run this prior to each test execution.  Luckily <a href="http://stackoverflow.com/a/25053685/794" title="Global beforeEach in Jasmine">this StackOverflow answer</a> showed us that with jasmine you can declare a beforeEach outside any describe blocks, and it will be treated as a global setup method that is run before each test.</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="javascript"><thead><tr><td colspan="2"  class="head">Javascript</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
</pre></td><td class="de1"><pre class="de1">beforeEach<span class="br0">&#40;</span><span class="kw1">function</span> <span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; angular.<span class="me1">module</span><span class="br0">&#40;</span><span class="st0">'setupAutoQ'</span><span class="sy0">,</span> <span class="br0">&#91;</span><span class="br0">&#93;</span><span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; .<span class="me1">service</span><span class="br0">&#40;</span><span class="st0">'autoQ'</span><span class="sy0">,</span> <span class="kw1">function</span> <span class="br0">&#40;</span>$q<span class="sy0">,</span> $rootScope<span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">return</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; defer<span class="sy0">:</span> <span class="kw1">function</span> <span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">var</span> deferred <span class="sy0">=</span> $q.<span class="me1">defer</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; deferred.<span class="me1">resolve</span> <span class="sy0">=</span> <span class="kw1">function</span> <span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">this</span>.<span class="kw3">__proto__</span>.<span class="me1">resolve</span>.<span class="me1">apply</span><span class="br0">&#40;</span><span class="kw1">this</span><span class="sy0">,</span> arguments<span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; $rootScope.$apply<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; deferred.<span class="me1">reject</span> <span class="sy0">=</span> <span class="kw1">function</span> <span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">this</span>.<span class="kw3">__proto__</span>.<span class="me1">reject</span>.<span class="me1">apply</span><span class="br0">&#40;</span><span class="kw1">this</span><span class="sy0">,</span> arguments<span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; $rootScope.$apply<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; deferred.<span class="me1">notify</span> <span class="sy0">=</span> <span class="kw1">function</span><span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">this</span>.<span class="kw3">__proto__</span>.<span class="me1">notify</span>.<span class="me1">apply</span><span class="br0">&#40;</span><span class="kw1">this</span><span class="sy0">,</span> arguments<span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; $rootScope.$apply<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">return</span> deferred<span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; module<span class="br0">&#40;</span><span class="st0">'setupAutoQ'</span><span class="br0">&#41;</span><span class="sy0">;</span>
<span class="br0">&#125;</span><span class="br0">&#41;</span><span class="sy0">;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">beforeEach(function () {
    angular.module('setupAutoQ', [])
            .service('autoQ', function ($q, $rootScope) {

                return {
                    defer: function () {
                        var deferred = $q.defer();

                        deferred.resolve = function () {
                            this.__proto__.resolve.apply(this, arguments);
                            $rootScope.$apply();
                        }

                        deferred.reject = function () {
                            this.__proto__.reject.apply(this, arguments);
                            $rootScope.$apply();
                        }

                        deferred.notify = function() {
                            this.__proto__.notify.apply(this, arguments);
                            $rootScope.$apply();
                        }

                        return deferred;
                    }
                }
            });

    module('setupAutoQ');
});</pre></div></div>

<h2>Wrapping it up</h2>
<p>So now, we have an &#8220;autoQ&#8221; service that is available for testing.  So our example test now looks like this:</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="javascript"><thead><tr><td colspan="2"  class="head">Javascript</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
</pre></td><td class="de1"><pre class="de1">it<span class="br0">&#40;</span><span class="st0">'should simulate promise'</span><span class="sy0">,</span> inject<span class="br0">&#40;</span><span class="kw1">function</span><span class="br0">&#40;</span>autoQ<span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; <span class="kw1">var</span> deferred <span class="sy0">=</span> autoQ.<span class="me1">defer</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; <span class="kw1">var</span> promise <span class="sy0">=</span> deferred.<span class="me1">promise</span><span class="sy0">;</span>
&nbsp; &nbsp; <span class="kw1">var</span> resolvedValue<span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; promise.<span class="me1">then</span><span class="br0">&#40;</span><span class="kw1">function</span><span class="br0">&#40;</span>value<span class="br0">&#41;</span> <span class="br0">&#123;</span> resolvedValue <span class="sy0">=</span> value<span class="sy0">;</span> <span class="br0">&#125;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; expect<span class="br0">&#40;</span>resolvedValue<span class="br0">&#41;</span>.<span class="me1">toBeUndefined</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; <span class="co1">// Simulate resolving of promise</span>
&nbsp; &nbsp; deferred.<span class="me1">resolve</span><span class="br0">&#40;</span><span class="nu0">123</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; 
&nbsp; &nbsp; <span class="co1">// promise will be resolved immediately</span>
&nbsp; &nbsp; expect<span class="br0">&#40;</span>resolvedValue<span class="br0">&#41;</span>.<span class="me1">toEqual</span><span class="br0">&#40;</span><span class="nu0">123</span><span class="br0">&#41;</span><span class="sy0">;</span>
<span class="br0">&#125;</span><span class="br0">&#41;</span><span class="br0">&#41;</span><span class="sy0">;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">it('should simulate promise', inject(function(autoQ) {
    var deferred = autoQ.defer();
    var promise = deferred.promise;
    var resolvedValue;

    promise.then(function(value) { resolvedValue = value; });
    expect(resolvedValue).toBeUndefined();

    // Simulate resolving of promise
    deferred.resolve(123);
  
    // promise will be resolved immediately
    expect(resolvedValue).toEqual(123);
}));</pre></div></div>

<p>This will really improve the signal to noise ratio in our tests, and hopefully help new developers get up to speed more quickly.  Another nice benefit of this approach is that it does not modify $q &#8211; or anything in our &#8220;live&#8221; module &#8211; at all.  So if we want finer grained control over promise resolution we can simply consume $q and $rootScope in our tests and use them as before.  I&#8217;m not sure we&#8217;ll ever need to do this, but its good to know we have the option.</p>
]]></content>
			<link rel="replies" type="text/html" href="/index.php/webdev/uidevelopment/javascript/automatic-promise-resolution-for-angularjs-unit-testing/#comments" thr:count="0"/>
		<link rel="replies" type="application/atom+xml" href="/index.php/webdev/uidevelopment/javascript/automatic-promise-resolution-for-angularjs-unit-testing/feed/atom/" thr:count="0"/>
		<thr:total>0</thr:total>
		</entry>
		<entry>
		<author>
			<name>Alex Ullrich</name>
					</author>
		<title type="html"><![CDATA[(Very) Poor Man&#8217;s Infinite Scroll using angular-inview]]></title>
		<link rel="alternate" type="text/html" href="/index.php/all/very-poor-mans-infinite-scroll-using-angular-inview/" />
		<id>/?p=3295</id>
		<updated>2015-03-13T12:42:17Z</updated>
		<published>2015-03-09T16:12:37Z</published>
		<category scheme="/" term="All Blogs" /><category scheme="/" term="Javascript" /><category scheme="/" term="UI Development" /><category scheme="/" term="angularjs" />		<summary type="html"><![CDATA[I&#8217;ve been working on an angular app that allows users to manipulate a very large dataset in memory, using various options to filter what is shown at any given time. For one particular &#8220;view&#8221; into the data there were still over 4000 items (each needing 2-way binding), which is well beyond the point that angular&#8217;s [&#8230;]]]></summary>
		<content type="html" xml:base="/index.php/all/very-poor-mans-infinite-scroll-using-angular-inview/"><![CDATA[<p>I&#8217;ve been working on an angular app that allows users to manipulate a very large dataset in memory, using various options to filter what is shown at any given time.  For one particular &#8220;view&#8221; into the data there were still over 4000 items (each needing 2-way binding), which is well beyond the point that angular&#8217;s ng-repeat starts to drag.  I looked at various solutions online, and <a href="http://www.williambrownstreet.net/blog/2013/07/angularjs-my-solution-to-the-ng-repeat-performance-problem/" title="williambrownstreet.net" target="_blank">this solution</a> stood out to me, largely because we already need to apply one round of filtering before getting to ng-repeat, and I didn&#8217;t want to add a third array that needed to be kept in sync.</p>
<p>The problem I kept running into with these &#8220;infinite scrolling&#8221; type solutions is that they are all based on your html filling the browser window (or a container, in the case of the modified directive presented above).  That is all well and good, but with the data I have the container is filled immediately, and then the directive is immediately called into action loading the remaining 3800 (or so) items.  What I really need is to trigger the rendering of the next group when the user brings the tail end of the list into view.</p>
<p>This brings me to a handy bit of code called <a href="https://github.com/thenikso/angular-inview" title="github" target="_blank">angular-inview</a>.  This gives you a way to watch whether an element is currently visible in the browser or not, and react accordingly.  It actually offers two directives, in-view-container (for the container the user is scrolling within) and in-view (which provides the means to execute code when an element comes into view).</p>
<p>Lets take a look at how these work, starting with a sample controller.  All the controller needs to do here is create an array of objects to bind to, provide a scope variable representing the repeater limit and a function that will increase the limit if passed a truthy value. This is wrapped in a $timeout call just to force a delay so you can see the magic happen. </p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="javascript"><thead><tr><td colspan="2"  class="head">Javascript</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
</pre></td><td class="de1"><pre class="de1"><span class="kw1">var</span> app <span class="sy0">=</span> angular.<span class="me1">module</span><span class="br0">&#40;</span><span class="st0">'inview-example'</span><span class="sy0">,</span> <span class="br0">&#91;</span><span class="st0">'angular-inview'</span><span class="br0">&#93;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
app.<span class="me1">controller</span><span class="br0">&#40;</span><span class="st0">'exampleController'</span><span class="sy0">,</span> <span class="kw1">function</span><span class="br0">&#40;</span>$scope<span class="sy0">,</span> $timeout<span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; $scope.<span class="me1">limit</span> <span class="sy0">=</span> <span class="nu0">20</span><span class="sy0">;</span>
&nbsp; 
&nbsp; $scope.<span class="me1">items</span> <span class="sy0">=</span> <span class="br0">&#91;</span><span class="br0">&#93;</span><span class="sy0">;</span>
&nbsp; 
&nbsp; <span class="kw1">for</span><span class="br0">&#40;</span><span class="kw1">var</span> i <span class="sy0">=</span> <span class="nu0">0</span><span class="sy0">;</span> i <span class="sy0">&lt;</span> <span class="nu0">500</span><span class="sy0">;</span> i<span class="sy0">++</span><span class="br0">&#41;</span><span class="br0">&#123;</span>
&nbsp; &nbsp; $scope.<span class="me1">items</span>.<span class="me1">push</span><span class="br0">&#40;</span><span class="br0">&#123;</span> value<span class="sy0">:</span> i <span class="br0">&#125;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; <span class="br0">&#125;</span>
&nbsp; 
&nbsp; $scope.<span class="me1">increaseLimit</span> <span class="sy0">=</span> <span class="kw1">function</span> <span class="br0">&#40;</span>actuallyIncrease<span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; <span class="kw1">if</span> <span class="br0">&#40;</span>actuallyIncrease<span class="br0">&#41;</span> <span class="br0">&#123;</span> <span class="co1">//this will be passed the value of $inview from directive</span>
&nbsp; &nbsp; &nbsp; $timeout<span class="br0">&#40;</span><span class="kw1">function</span><span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; $scope.<span class="me1">limit</span> <span class="sy0">=</span> $scope.<span class="me1">limit</span> <span class="sy0">+</span> <span class="nu0">20</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span><span class="sy0">,</span> <span class="nu0">500</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp; <span class="br0">&#125;</span><span class="sy0">;</span>
<span class="br0">&#125;</span><span class="br0">&#41;</span><span class="sy0">;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">var app = angular.module('inview-example', ['angular-inview']);

app.controller('exampleController', function($scope, $timeout) {
  $scope.limit = 20;
  
  $scope.items = [];
  
  for(var i = 0; i &lt; 500; i++){
    $scope.items.push({ value: i });
  }
  
  $scope.increaseLimit = function (actuallyIncrease) {
    if (actuallyIncrease) { //this will be passed the value of $inview from directive
      $timeout(function() {
        $scope.limit = $scope.limit + 20;
      }, 500);
    }
  };
});</pre></div></div>

<p>And some HTML:</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="html4strict"><thead><tr><td colspan="2"  class="head">HTML</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
</pre></td><td class="de1"><pre class="de1">&nbsp; <span class="sc2">&lt;<span class="kw2">body</span> ng-controller<span class="sy0">=</span><span class="st0">&quot;exampleController&quot;</span>&gt;</span>
&nbsp; &nbsp; <span class="sc2">&lt;<span class="kw2">h1</span>&gt;</span>Homeless Man's Infinite Scroll<span class="sc2">&lt;<span class="sy0">/</span><span class="kw2">h1</span>&gt;</span>
&nbsp; &nbsp; 
&nbsp; &nbsp; <span class="sc2">&lt;<span class="kw2">div</span> in-view-container <span class="kw3">class</span><span class="sy0">=</span><span class="st0">&quot;container&quot;</span>&gt;</span>
&nbsp; &nbsp; &nbsp; <span class="sc2">&lt;<span class="kw2">div</span> ng-repeat<span class="sy0">=</span><span class="st0">&quot;item in items | limitTo: limit&quot;</span>&gt;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="sc2">&lt;<span class="kw2">input</span> <span class="kw3">type</span><span class="sy0">=</span><span class="st0">&quot;text&quot;</span> ng-model<span class="sy0">=</span><span class="st0">&quot;item.value&quot;</span> <span class="sy0">/</span>&gt;&lt;<span class="sy0">/</span>textbox&gt;</span>
&nbsp; &nbsp; &nbsp; <span class="sc2">&lt;<span class="sy0">/</span><span class="kw2">div</span>&gt;</span>
&nbsp; &nbsp; &nbsp; <span class="sc2">&lt;<span class="kw2">span</span> in-view<span class="sy0">=</span><span class="st0">&quot;increaseLimit($inview)&quot;</span> ng-show<span class="sy0">=</span><span class="st0">&quot;limit &lt; items.length&quot;</span>&gt;</span>Loading more...<span class="sc2">&lt;<span class="sy0">/</span><span class="kw2">span</span>&gt;</span>
&nbsp; &nbsp; <span class="sc2">&lt;<span class="sy0">/</span><span class="kw2">div</span>&gt;</span>
&nbsp; <span class="sc2">&lt;<span class="sy0">/</span><span class="kw2">body</span>&gt;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">  &lt;body ng-controller="exampleController"&gt;
    &lt;h1&gt;Homeless Man's Infinite Scroll&lt;/h1&gt;
    
    &lt;div in-view-container class="container"&gt;
      &lt;div ng-repeat="item in items | limitTo: limit"&gt;
        &lt;input type="text" ng-model="item.value" /&gt;&lt;/textbox&gt;
      &lt;/div&gt;
      &lt;span in-view="increaseLimit($inview)" ng-show="limit &lt; items.length"&gt;Loading more...&lt;/span&gt;
    &lt;/div&gt;
  &lt;/body&gt;</pre></div></div>

<p>So on initial load 0-19 will be displayed.  The span positioned outside the repeater is the element we will use to trigger expanding the limit (causing more items to be rendered / bound).  This will pass the value $inview to our expansion method, and when true the limit will be increased, causing more items to be rendered.  Once the limit is greater than or equal to the number of items we have, there is no need to show the trigger element anymore.</p>
<p>Thats about all there was to it, seems to be working well enough so far.  There is a working plunker <a href="http://embed.plnkr.co/VzDrPH9rwtiF4xokvopJ/preview" title="plunker example" target="_blank">here</a>.</p>
]]></content>
			<link rel="replies" type="text/html" href="/index.php/all/very-poor-mans-infinite-scroll-using-angular-inview/#comments" thr:count="4"/>
		<link rel="replies" type="application/atom+xml" href="/index.php/all/very-poor-mans-infinite-scroll-using-angular-inview/feed/atom/" thr:count="4"/>
		<thr:total>4</thr:total>
		</entry>
		<entry>
		<author>
			<name>Eli Weinstock-Herman (tarwn)</name>
					</author>
		<title type="html"><![CDATA[Bundling with the RequireJS Optimizer]]></title>
		<link rel="alternate" type="text/html" href="/index.php/webdev/bundling-with-the-requirejs-optimizer/" />
		<id>/?p=3171</id>
		<updated>2015-02-19T11:58:53Z</updated>
		<published>2015-02-19T11:50:58Z</published>
		<category scheme="/" term="Javascript" /><category scheme="/" term="Web Developer" /><category scheme="/" term="javascript" /><category scheme="/" term="requirejs" />		<summary type="html"><![CDATA[When we build sites using an AMD library like RequireJS, we will have a long list of files that need to be downloaded when someone uses the site. More files means more trips to the server and more download time. Minifying files and using gzip can speed up the download times, but neither affects the [&#8230;]]]></summary>
		<content type="html" xml:base="/index.php/webdev/bundling-with-the-requirejs-optimizer/"><![CDATA[<p>When we build sites using an AMD library like <a href="http://requirejs.org/">RequireJS</a>, we will have a long list of files that need to be downloaded when someone uses the site. More files means more trips to the server and more download time. Minifying files and using gzip can speed up the download times, but neither affects the Round Trip Time (RTT) that even a cache validation incurs, clogging up a request pipeline just to ask the server if an ETag or last modified date is still valid.</p>
<p>So let&#8217;s see one way we can improve things, with small (14 requests) and larger (194 requests) page loads as an example.</p>
<h2>RequireJS Bundling</h2>
<p>There are several different ways you can bundle scripts with RequireJS, but I wanted to start out exploring their <a href="http://requirejs.org/docs/optimization.html">optimizer</a>. The advantage of using the optimizer is that it can intelligently trace the module dependencies and include them for me rather than requiring me to figure out all the dependencies and ensure I bundle them up in the right grouping and order.</p>
<p>I started with a very small application just to play around and see what the impact would be. It consists of an HTML page, a couple 3rd party libraries, and 10 JS files I wrote. On loading the page, it uses a require statement to load two of the files (and thus all of their dependencies). My plan is to build a replacement set so I can load a single file and have it also load in all of the dependencies, in the right order to prevent independent network requests for other dependencies.</p>
<p>Sample Site Structure:</p>
<pre>town/
   index.html
   js/
      lib/
         jquery.js
         knockout.js
         require.js
         Squire.js
         jasmine/
            ... jasmine files ...
      src/
         app.js
         ... 9 more hand-written files ...
      test/
         ... several JS spec files ...
   styles/
         ... css file ...
   images/
         ... image files ...
tools/
   r.js
   ... my config will go here ...
js-built/ 
   ... bundle + minified files will be created here ...</pre>
<p>This project also has some test files mixed in both the lib folder and a parallel test folder, which we want to exclude from processing at all (on a larger project this would be going through a build process, no point eating up CPU time minifying files that will never go to production).</p>
<p>You can feed the optimizer either command-line options or an options file, I suggest putting everything in a configuration file for repeatability (and readability).</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="javascript"><thead><tr><td colspan="2"  class="head">Javascript</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
</pre></td><td class="de1"><pre class="de1"><span class="br0">&#123;</span>
&nbsp; &nbsp; appDir<span class="sy0">:</span> <span class="st0">'../town/js'</span><span class="sy0">,</span>
&nbsp; &nbsp; baseUrl<span class="sy0">:</span> <span class="st0">'src'</span><span class="sy0">,</span>
&nbsp; &nbsp; paths<span class="sy0">:</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; knockout<span class="sy0">:</span> <span class="st0">'../lib/knockout-3.0.0'</span>
&nbsp; &nbsp; <span class="br0">&#125;</span><span class="sy0">,</span>
&nbsp; &nbsp; dir<span class="sy0">:</span> <span class="st0">'../js-built'</span><span class="sy0">,</span>
&nbsp; &nbsp; fileExclusionRegExp<span class="sy0">:</span> <span class="co2">/(^test|Squire|jasmine|require)/</span><span class="sy0">,</span>
&nbsp; &nbsp; modules<span class="sy0">:</span> <span class="br0">&#91;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; name<span class="sy0">:</span> <span class="st0">'app'</span><span class="sy0">,</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; include<span class="sy0">:</span> <span class="br0">&#91;</span><span class="st0">'app'</span><span class="sy0">,</span> <span class="st0">'townViewModel'</span><span class="br0">&#93;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp; &nbsp; <span class="br0">&#93;</span>
<span class="br0">&#125;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">{
    appDir: '../town/js',
    baseUrl: 'src',
    paths: {
        knockout: '../lib/knockout-3.0.0'
    },
    dir: '../js-built',
    fileExclusionRegExp: /(^test|Squire|jasmine|require)/,
    modules: [
        {
            name: 'app',
            include: ['app', 'townViewModel']
        }
    ]
}</pre></div></div>

<p>The optimizer produces a new &#8220;app.js&#8221; file for me in the js-built folder and I can copy that over my existing source file. Notice how I did not have to define every single file, the optimizer will take the two modules in the &#8220;include&#8221; and trace all of their dependencies for me. There is also an option to exclude individual files or other defined bundles.</p>
<p>Config Translation:</p>
<ul>
<li>appDir: The path to the js file, relative to the tools directory where r.js lives (not relative to where we execute node from)</li>
<li>baseUrl: Base URL used for RequireJs modules, relative to that appdir (Further note below)</li>
<li>paths: RequireJS paths (had I been using a config file w/ RequireJS, I could have supplied that instead of redefining paths here)</li>
<li>dir: Output directory (also the working directory for the optimizer), relative to the r.js file again</li>
<li>fileExclusionRegExp: the optimizer ignores any file or directory that matches this regular expression (Further note below)</li>
<li>modules: an array of modules to build, which can depend on earlier modules (this is a small app so I put everything in a single module)</li>
</ul>
<p>As I worked with this smaller example and a much larger one, here are some issues I ran into:</p>
<ul>
<li>appDir: I ran into problems defining appDir too deeply and had to define it at the shared higher level (but only on the larger project, so this may be a side effect of the next item)</li>
<li>paths: On the larger project I had a number of paths defined with a starting slash, which works fine for a site but the optimizer translates as &#8220;look on the root of the drive&#8221;, not seeing any reason for those to be root paths, I fixed them in my main RequireJS config to be relative</li>
<li>fileExclusionRegExp: I attempted to invert this into an opt-in list using negative lookaheads, but was unable to get it to match more than one value for lookaheads, despite testing the expression elsewhere</li>
<li>optimize: can be used to turn off minification, which was necessary before I figured out how to filter out some 3rd party files that the optimizer would exit with an error over</li>
</ul>
<p>I did run into some other issues, here and there, but unfortunately was not keeping track of them at the time.</p>
<h2>Results</h2>
<p>To work around the &#8220;localhost is crazy fast&#8221; issue, we can use Chrome to load sites with throttled connections (Dev Tools, Toggle Device mode with the phone icon, change the Network dropdown). For these results I used the 3G option (100 RTT), which is only about 10% slower than the ping from my house to my personal website and at 750kbps, matches the type of shared bandwidth people might see if their company is keeping costs low and over-utilizing a cheaper internet connection. Improvements we make for our slower visitors only makes the experience that much better for our faster ones.</p>
<h3>Sample Site Results</h3>
<p>I ran the site with and without caching enabled, refreshing and capturing only the best possible result I saw. Here&#8217;s what I saw for the Vanilla site, with and without caching:</p>
<div id="attachment_3172" style="width: 510px" class="wp-caption aligncenter"><a href="/wp-content/uploads/2015/02/100RTT_Vanilla.png"><img src="/wp-content/uploads/2015/02/100RTT_Vanilla.png" alt="Small Sample Load - 100RTT/750kbps - Vanilla" width="451" height="30" class="size-full wp-image-3172" srcset="/wp-content/uploads/2015/02/100RTT_Vanilla.png 451w, /wp-content/uploads/2015/02/100RTT_Vanilla-300x19.png 300w" sizes="(max-width: 451px) 100vw, 451px" /></a><p class="wp-caption-text">Small Sample Load &#8211; 100RTT/750kbps &#8211; Vanilla</p></div>
<div id="attachment_3173" style="width: 510px" class="wp-caption aligncenter"><a href="/wp-content/uploads/2015/02/100RTT_Vanilla_Cache.png"><img src="/wp-content/uploads/2015/02/100RTT_Vanilla_Cache.png" alt="Small Sample Load - 100RTT/750kbps - Vanilla, Cached" width="447" height="23" class="size-full wp-image-3173" srcset="/wp-content/uploads/2015/02/100RTT_Vanilla_Cache.png 447w, /wp-content/uploads/2015/02/100RTT_Vanilla_Cache-300x15.png 300w" sizes="(max-width: 447px) 100vw, 447px" /></a><p class="wp-caption-text">Small Sample Site &#8211; 100RTT/750kbps &#8211; Vanilla Cached</p></div>
<p>After using the optimizer (bundled and minified), the best results I received were:</p>
<div id="attachment_3174" style="width: 510px" class="wp-caption aligncenter"><a href="/wp-content/uploads/2015/02/100RTT_BundledMinified.png"><img src="/wp-content/uploads/2015/02/100RTT_BundledMinified.png" alt="Small Sample Load - 100RTT/750kbps - Bundled, Minified" width="446" height="26" class="size-full wp-image-3174" srcset="/wp-content/uploads/2015/02/100RTT_BundledMinified.png 446w, /wp-content/uploads/2015/02/100RTT_BundledMinified-300x17.png 300w" sizes="(max-width: 446px) 100vw, 446px" /></a><p class="wp-caption-text">Small Sample Load &#8211; 100RTT/750kbps &#8211; Bundled, Minified</p></div>
<div id="attachment_3175" style="width: 510px" class="wp-caption aligncenter"><a href="/wp-content/uploads/2015/02/100RTT_BundledMinified_Cache.png"><img src="/wp-content/uploads/2015/02/100RTT_BundledMinified_Cache.png" alt="Small Sample Load - 100RTT/750kbps - Bundled, Minified, Cached" width="436" height="23" class="size-full wp-image-3175" srcset="/wp-content/uploads/2015/02/100RTT_BundledMinified_Cache.png 436w, /wp-content/uploads/2015/02/100RTT_BundledMinified_Cache-300x15.png 300w" sizes="(max-width: 436px) 100vw, 436px" /></a><p class="wp-caption-text">Small Sample Load &#8211; 100RTT/750kbps &#8211; Bundled, Minified, Cached</p></div>
<p>The best vanilla load was 14 requests at 1.88 seconds, with a best cache time of 456ms. The optimized version reduced this to 4 requests at 1.44 seconds, with a best cache of 311ms.</p>
<h3>Larger Site Results</h3>
<p>While there was a visible difference in the small site, I also wanted to see what would happen in a larger example. The larger site has almost 200 requests, including AJAX calls to an external API and numerous image and CSS resources that have not been optimized yet. Like the small example above, we are not using gzip in this example. Using the same 100RTT setting in chrome (which also impacts us more in this case, due to the 750kbps speed), here are before and after timings:</p>
<div id="attachment_3180" style="width: 510px" class="wp-caption aligncenter"><a href="/wp-content/uploads/2015/02/Large_100RTT_Vanilla.png"><img src="/wp-content/uploads/2015/02/Large_100RTT_Vanilla.png" alt="Large Sample Load - 100RTT/750kbps - Vanilla" width="447" class="size-full wp-image-3180" srcset="/wp-content/uploads/2015/02/Large_100RTT_Vanilla.png 894w, /wp-content/uploads/2015/02/Large_100RTT_Vanilla-300x14.png 300w" sizes="(max-width: 894px) 100vw, 894px" /></a><p class="wp-caption-text">Large Sample Load &#8211; 100RTT/750kbps &#8211; Vanilla</p></div>
<div id="attachment_3181" style="width: 510px" class="wp-caption aligncenter"><a href="/wp-content/uploads/2015/02/Large_100RTT_Vanilla_Cached.png"><img src="/wp-content/uploads/2015/02/Large_100RTT_Vanilla_Cached.png" alt="Large Sample Load - 100RTT/750kbps - Vanilla, Cached" width="438" class="size-full wp-image-3181" srcset="/wp-content/uploads/2015/02/Large_100RTT_Vanilla_Cached.png 877w, /wp-content/uploads/2015/02/Large_100RTT_Vanilla_Cached-300x18.png 300w" sizes="(max-width: 877px) 100vw, 877px" /></a><p class="wp-caption-text">Large Sample Load &#8211; 100RTT/750kbps &#8211; Vanilla, Cached</p></div>
<p>After using the optimizer to create 2 minified bundles:</p>
<div id="attachment_3178" style="width: 510px" class="wp-caption aligncenter"><a href="/wp-content/uploads/2015/02/Large_100RTT_BundledMinified.png"><img src="/wp-content/uploads/2015/02/Large_100RTT_BundledMinified.png" alt="Large Sample Load - 100RTT/750kbps - Bundled, Minified" width="438" class="size-full wp-image-3178" srcset="/wp-content/uploads/2015/02/Large_100RTT_BundledMinified.png 877w, /wp-content/uploads/2015/02/Large_100RTT_BundledMinified-300x16.png 300w" sizes="(max-width: 877px) 100vw, 877px" /></a><p class="wp-caption-text">Large Sample Load &#8211; 100RTT/750kbps &#8211; Bundled, Minified</p></div>
<div id="attachment_3179" style="width: 510px" class="wp-caption aligncenter"><a href="/wp-content/uploads/2015/02/Large_100RTT_BundledMinified_Cached.png"><img src="/wp-content/uploads/2015/02/Large_100RTT_BundledMinified_Cached.png" alt="Large Sample Load - 100RTT/750kbps - Bundled, Minified, Cached" width="429" class="size-full wp-image-3179" srcset="/wp-content/uploads/2015/02/Large_100RTT_BundledMinified_Cached.png 858w, /wp-content/uploads/2015/02/Large_100RTT_BundledMinified_Cached-300x14.png 300w" sizes="(max-width: 858px) 100vw, 858px" /></a><p class="wp-caption-text">Large Sample Load &#8211; 100RTT/750kbps &#8211; Bundled, Minified, Cached</p></div>
<p>The best vanilla load is 194 requests at 16.18s, which drops to 2.91 seconds with cache. With bundling and minification, that drops to 31 requests at 10.3 seconds, which drops to 27 requests and 2.89 seconds with cache.</p>
<p>The configuration for this site continued to be almost as light-weight as the small sample site above, so despite the number of files increasing by greater than an order of magnitude, the ability for the optimizer to trace those dependencies for me meant that I was able to bundle all of these files with a configuration that was only about twice as long as the small sample site above.</p>
]]></content>
			<link rel="replies" type="text/html" href="/index.php/webdev/bundling-with-the-requirejs-optimizer/#comments" thr:count="0"/>
		<link rel="replies" type="application/atom+xml" href="/index.php/webdev/bundling-with-the-requirejs-optimizer/feed/atom/" thr:count="0"/>
		<thr:total>0</thr:total>
		</entry>
		<entry>
		<author>
			<name>Eli Weinstock-Herman (tarwn)</name>
					</author>
		<title type="html"><![CDATA[Continuous Javascript Testing with Karma]]></title>
		<link rel="alternate" type="text/html" href="/index.php/webdev/uidevelopment/javascript/continuous-javascript-testing-with-karma/" />
		<id>/?p=2483</id>
		<updated>2014-04-03T15:27:39Z</updated>
		<published>2014-04-03T15:27:39Z</published>
		<category scheme="/" term="Javascript" /><category scheme="/" term="Unit Testing" /><category scheme="/" term="jasmine" /><category scheme="/" term="javascript" /><category scheme="/" term="karma" /><category scheme="/" term="requirejs" />		<summary type="html"><![CDATA[I use a continuous testing tool named NCrunch for all of my .Net code. In fact, NCrunch has spoiled me so much that manually running tests is bordering on painful. I&#8217;ve gotten used to doing absolutely nothing and still having the latest build results, test results, code coverage, highlighted execution paths for failed tests, and [&#8230;]]]></summary>
		<content type="html" xml:base="/index.php/webdev/uidevelopment/javascript/continuous-javascript-testing-with-karma/"><![CDATA[<p>I use a continuous testing tool named <a href="http://www.ncrunch.net/">NCrunch</a> for all of my .Net code. In fact,  <a href="/index.php/enterprisedev/unittest/reducing-code-build-test-friction/">NCrunch has spoiled me</a> so much that manually running tests is bordering on painful. I&#8217;ve gotten used to doing absolutely nothing and still having the latest build results, test results, code coverage, highlighted execution paths for failed tests, and little hover notices on each line that passed an exception. Make a change, magic happens. All coding should work like that.</p>
<p>The AngularJS team has built a continuous javascript testrunner named <a href="http://karma-runner.github.io/">karma</a>, so of course I&#8217;m going to give it a try. </p>
<p>At the time of this post, the current version is 0.12 and I will be using Jasmine 2.0 (<a href="/index.php/webdev/uidevelopment/javascript/testing-asynchronous-javascript-w-jasmine/" title="Testing Asynchronous Javascript w/ Jasmine 2.0.0">woo, Async!</a>), RequireJS (also a <a href="/index.php/webdev/uidevelopment/javascript/unit-testing-with-jasmine-2-0-and-require-js/" title="Unit Testing with Jasmine 2.0 and Require.JS">recent topic</a>), and <a href="https://github.com/iammerrick/Squire.js/" title="iammerrick/Squire.js on github">Squire.js</a> (for injecting mocks). The sample project I&#8217;m using for demos is just something that was handy that already had some tests.</p>
<h1>Setting up Karma</h1>
<p>Setting up karma is pretty straightforward. The karma site has clear information already on how to <a href="http://karma-runner.github.io/0.12/intro/installation.html" title="Karma - Installation">install the package</a> and <a href="http://karma-runner.github.io/0.10/intro/configuration.html" title="Karma - Configuration">set up the configuration</a>, so I&#8217;m not going to go into the details on that.</p>
<p>One minor variance is that I chose to install karma local to my project rather than globally, so I&#8217;ll have to run the tools from the node_modules subdirectory.</p>
<p>I created a package.json file for my project:</p>
<p><b>package.json: </b> <a href="https://github.com/tarwn/townthing/blob/master/package.json">townthing/package.json</a></p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="javascript"><thead><tr><td colspan="2"  class="head">Javascript</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
</pre></td><td class="de1"><pre class="de1"><span class="br0">&#123;</span>
&nbsp; &nbsp; <span class="st0">&quot;name&quot;</span><span class="sy0">:</span> <span class="st0">&quot;townthing&quot;</span><span class="sy0">,</span>
&nbsp; &nbsp; <span class="st0">&quot;version&quot;</span><span class="sy0">:</span> <span class="st0">&quot;0.1.0&quot;</span><span class="sy0">,</span>
&nbsp; &nbsp; <span class="st0">&quot;description&quot;</span><span class="sy0">:</span> <span class="st0">&quot;sample project I'm playing with&quot;</span><span class="sy0">,</span>
&nbsp; &nbsp; <span class="st0">&quot;repository&quot;</span><span class="sy0">:</span> <span class="st0">&quot;https://github.com/tarwn/townthing&quot;</span><span class="sy0">,</span>
&nbsp;
&nbsp; &nbsp; <span class="st0">&quot;devDependencies&quot;</span><span class="sy0">:</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="st0">&quot;karma&quot;</span><span class="sy0">:</span> <span class="st0">&quot;~0.11&quot;</span><span class="sy0">,</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="st0">&quot;karma-jasmine&quot;</span><span class="sy0">:</span> <span class="st0">&quot;~0.2&quot;</span><span class="sy0">,</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="st0">&quot;karma-phantomjs-launcher&quot;</span><span class="sy0">:</span> <span class="st0">&quot;~0.1&quot;</span><span class="sy0">,</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="st0">&quot;karma-chrome-launcher&quot;</span><span class="sy0">:</span> <span class="st0">&quot;~0.1&quot;</span>
&nbsp; &nbsp; <span class="br0">&#125;</span>
<span class="br0">&#125;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">{
	"name": "townthing",
	"version": "0.1.0",
	"description": "sample project I'm playing with",
	"repository": "https://github.com/tarwn/townthing",

	"devDependencies": {
		"karma": "~0.11",
		"karma-jasmine": "~0.2",
		"karma-phantomjs-launcher": "~0.1",
		"karma-chrome-launcher": "~0.1"
	}
}</pre></div></div>

<div style="background-color: #eeeeee; padding: .5em;">
<b>Important Note:</b> Be careful with your versions. I&#8217;ve found out the hard way that karma keeps their dependencies wide open &#8220;*&#8221; until they are ready to move versions, then they lock them down to something that may not actually be the latest version. Karma 0.10 worked fine with karma-jasmine 0.2 until they released 0.10.10 which locked in a requirement for karma-jasmine ~0.1. More recently the karma-phantomjs-launcher has revved to 1.3, which somehow broke a perfectly working 0.12 karma against 1.2 despite there being no actual code changes (I suspect a versioning side-effect mixed with their *-version acceptance).
</div>
<p>And then go through the steps to create my karma configuration:<br />
<b>karma.conf.js: </b> <a href="https://github.com/tarwn/townthing/blob/master/karma.conf.js">townthing/karma.conf.js</a></p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="javascript"><thead><tr><td colspan="2"  class="head">Javascript</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
</pre></td><td class="de1"><pre class="de1">module.<span class="me1">exports</span> <span class="sy0">=</span> <span class="kw1">function</span><span class="br0">&#40;</span>config<span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; config.<span class="kw1">set</span><span class="br0">&#40;</span><span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; basePath<span class="sy0">:</span> <span class="st0">'town/js'</span><span class="sy0">,</span>
&nbsp; &nbsp; &nbsp; &nbsp; frameworks<span class="sy0">:</span> <span class="br0">&#91;</span><span class="st0">'jasmine'</span><span class="sy0">,</span> <span class="st0">'requirejs'</span><span class="br0">&#93;</span><span class="sy0">,</span>
&nbsp; &nbsp; &nbsp; &nbsp; files<span class="sy0">:</span> <span class="br0">&#91;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="st0">'test/test-main.js'</span><span class="sy0">,</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#123;</span>pattern<span class="sy0">:</span> <span class="st0">'**/*.js'</span><span class="sy0">,</span> included<span class="sy0">:</span> <span class="kw2">false</span><span class="br0">&#125;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#93;</span><span class="sy0">,</span>
&nbsp; &nbsp; &nbsp; &nbsp; exclude<span class="sy0">:</span> <span class="br0">&#91;</span> <span class="st0">'**/main.js'</span> <span class="br0">&#93;</span><span class="sy0">,</span>
&nbsp; &nbsp; &nbsp; &nbsp; reporters<span class="sy0">:</span> <span class="br0">&#91;</span><span class="st0">'dots'</span><span class="br0">&#93;</span><span class="sy0">,</span>
&nbsp; &nbsp; &nbsp; &nbsp; port<span class="sy0">:</span> <span class="nu0">9876</span><span class="sy0">,</span>
&nbsp; &nbsp; &nbsp; &nbsp; colors<span class="sy0">:</span> <span class="kw2">true</span><span class="sy0">,</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="co1">// possible values: config.LOG_DISABLE || config.LOG_ERROR || config.LOG_WARN || config.LOG_INFO || config.LOG_DEBUG</span>
&nbsp; &nbsp; &nbsp; &nbsp; logLevel<span class="sy0">:</span> config.<span class="me1">LOG_DEBUG</span><span class="sy0">,</span>
&nbsp; &nbsp; &nbsp; &nbsp; autoWatch<span class="sy0">:</span> <span class="kw2">true</span><span class="sy0">,</span>
&nbsp; &nbsp; &nbsp; &nbsp; browsers<span class="sy0">:</span> <span class="br0">&#91;</span><span class="st0">'PhantomJS'</span><span class="br0">&#93;</span><span class="sy0">,</span>
&nbsp; &nbsp; &nbsp; &nbsp; captureTimeout<span class="sy0">:</span> <span class="nu0">60000</span><span class="sy0">,</span>
&nbsp; &nbsp; &nbsp; &nbsp; singleRun<span class="sy0">:</span> <span class="kw2">false</span>
&nbsp; &nbsp; <span class="br0">&#125;</span><span class="br0">&#41;</span><span class="sy0">;</span>
<span class="br0">&#125;</span><span class="sy0">;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">module.exports = function(config) {
	config.set({
		basePath: 'town/js',
		frameworks: ['jasmine', 'requirejs'],
		files: [
		  'test/test-main.js',
		  {pattern: '**/*.js', included: false}
		],
		exclude: [ '**/main.js' ],
		reporters: ['dots'],
		port: 9876,
		colors: true,
		// possible values: config.LOG_DISABLE || config.LOG_ERROR || config.LOG_WARN || config.LOG_INFO || config.LOG_DEBUG
		logLevel: config.LOG_DEBUG,
		autoWatch: true,
		browsers: ['PhantomJS'],
		captureTimeout: 60000,
		singleRun: false
	});
};</pre></div></div>

<p>I already had a set of 68 specs configured to run from my SpecRunner file, with my Require.js configuration specified inline. Before I co-opted this project as a blog example, the tests were specified in script tags, but I have moved them to a require() statement and used the custom boot script created for my <a href="/index.php/webdev/uidevelopment/javascript/unit-testing-with-jasmine-2-0-and-require-js/">Jasmine 2.0 and RequireJS post</a>.</p>
<p><b>SpecRunner:</b> <a href="https://github.com/tarwn/townthing/blob/54f182bf96ff036a8765f421884d465d890c598c/town/js/test/SpecRunner.html">townthing/js/test/SpecRunner.json</a></p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="html4strict"><thead><tr><td colspan="2"  class="head">HTML</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
</pre></td><td class="de1"><pre class="de1"><span class="sc0">&lt;!DOCTYPE HTML&gt;</span>
<span class="sc2">&lt;<span class="kw2">html</span>&gt;</span>
<span class="sc2">&lt;<span class="kw2">head</span>&gt;</span>
&nbsp; &nbsp; <span class="sc2">&lt;<span class="kw2">meta</span> <span class="kw3">http-equiv</span><span class="sy0">=</span><span class="st0">&quot;Content-Type&quot;</span> <span class="kw3">content</span><span class="sy0">=</span><span class="st0">&quot;text/html; charset=UTF-8&quot;</span>&gt;</span>
&nbsp; &nbsp; <span class="sc2">&lt;<span class="kw2">title</span>&gt;</span>Jasmine Spec Runner v2.0.0<span class="sc2">&lt;<span class="sy0">/</span><span class="kw2">title</span>&gt;</span>
&nbsp;
&nbsp; &nbsp; <span class="sc2">&lt;<span class="kw2">link</span> <span class="kw3">rel</span><span class="sy0">=</span><span class="st0">&quot;shortcut icon&quot;</span> <span class="kw3">type</span><span class="sy0">=</span><span class="st0">&quot;image/png&quot;</span> <span class="kw3">href</span><span class="sy0">=</span><span class="st0">&quot;../lib/jasmine-2.0.0/jasmine_favicon.png&quot;</span>&gt;</span>
&nbsp; &nbsp; <span class="sc2">&lt;<span class="kw2">link</span> <span class="kw3">rel</span><span class="sy0">=</span><span class="st0">&quot;stylesheet&quot;</span> <span class="kw3">type</span><span class="sy0">=</span><span class="st0">&quot;text/css&quot;</span> <span class="kw3">href</span><span class="sy0">=</span><span class="st0">&quot;../lib/jasmine-2.0.0/jasmine.css&quot;</span>&gt;</span>
&nbsp;
&nbsp; &nbsp; <span class="sc2">&lt;<span class="kw2">script</span> <span class="kw3">type</span><span class="sy0">=</span><span class="st0">&quot;text/javascript&quot;</span> <span class="kw3">src</span><span class="sy0">=</span><span class="st0">&quot;../lib/jasmine-2.0.0/jasmine.js&quot;</span>&gt;&lt;<span class="sy0">/</span><span class="kw2">script</span>&gt;</span>
&nbsp; &nbsp; <span class="sc2">&lt;<span class="kw2">script</span> <span class="kw3">type</span><span class="sy0">=</span><span class="st0">&quot;text/javascript&quot;</span> <span class="kw3">src</span><span class="sy0">=</span><span class="st0">&quot;../lib/jasmine-2.0.0/jasmine-html.js&quot;</span>&gt;&lt;<span class="sy0">/</span><span class="kw2">script</span>&gt;</span>
&nbsp; &nbsp; <span class="sc2">&lt;<span class="kw2">script</span> <span class="kw3">type</span><span class="sy0">=</span><span class="st0">&quot;text/javascript&quot;</span> <span class="kw3">src</span><span class="sy0">=</span><span class="st0">&quot;../lib/jasmine-2.0.0/boot-without-onload.js&quot;</span>&gt;&lt;<span class="sy0">/</span><span class="kw2">script</span>&gt;</span>
&nbsp;
&nbsp; &nbsp; <span class="sc2">&lt;<span class="kw2">script</span> <span class="kw3">src</span><span class="sy0">=</span><span class="st0">&quot;../lib/require-2.1.11.js&quot;</span>&gt;&lt;<span class="sy0">/</span><span class="kw2">script</span>&gt;</span>
&nbsp;
&nbsp; &nbsp; <span class="sc2">&lt;<span class="kw2">script</span> <span class="kw3">type</span><span class="sy0">=</span><span class="st0">&quot;text/javascript&quot;</span>&gt;</span>
&nbsp; &nbsp; require.config({
&nbsp; &nbsp; &nbsp; &nbsp; baseUrl: &quot;../src&quot;,
&nbsp; &nbsp; &nbsp; &nbsp; paths: {
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;knockout&quot;: &quot;../lib/knockout-3.0.0&quot;,
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;Squire&quot;: &quot;../lib/Squire&quot;
&nbsp; &nbsp; &nbsp; &nbsp; }
&nbsp; &nbsp; });
&nbsp;
&nbsp; &nbsp; require(['../test/compass.spec', '../test/tile.spec', '../test/tree.spec', '../test/weather.spec'],function(){
&nbsp; &nbsp; &nbsp; &nbsp; window.executeTests();
&nbsp; &nbsp; });
&nbsp; &nbsp; <span class="sc2">&lt;<span class="sy0">/</span><span class="kw2">script</span>&gt;</span>
<span class="sc2">&lt;<span class="sy0">/</span><span class="kw2">head</span>&gt;</span>
<span class="sc2">&lt;<span class="kw2">body</span>&gt;</span>
<span class="sc2">&lt;<span class="sy0">/</span><span class="kw2">body</span>&gt;</span>
<span class="sc2">&lt;<span class="sy0">/</span><span class="kw2">html</span>&gt;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">&lt;!DOCTYPE HTML&gt;
&lt;html&gt;
&lt;head&gt;
	&lt;meta http-equiv="Content-Type" content="text/html; charset=UTF-8"&gt;
	&lt;title&gt;Jasmine Spec Runner v2.0.0&lt;/title&gt;

	&lt;link rel="shortcut icon" type="image/png" href="../lib/jasmine-2.0.0/jasmine_favicon.png"&gt;
	&lt;link rel="stylesheet" type="text/css" href="../lib/jasmine-2.0.0/jasmine.css"&gt;

	&lt;script type="text/javascript" src="../lib/jasmine-2.0.0/jasmine.js"&gt;&lt;/script&gt;
	&lt;script type="text/javascript" src="../lib/jasmine-2.0.0/jasmine-html.js"&gt;&lt;/script&gt;
	&lt;script type="text/javascript" src="../lib/jasmine-2.0.0/boot-without-onload.js"&gt;&lt;/script&gt;

	&lt;script src="../lib/require-2.1.11.js"&gt;&lt;/script&gt;

	&lt;script type="text/javascript"&gt;
	require.config({
		baseUrl: "../src",
		paths: {
			"knockout": "../lib/knockout-3.0.0",
			"Squire": "../lib/Squire"
		}
	});

	require(['../test/compass.spec', '../test/tile.spec', '../test/tree.spec', '../test/weather.spec'],function(){
		window.executeTests();
	});
	&lt;/script&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;/body&gt;
&lt;/html&gt;</pre></div></div>

<p>The folder structure is a little odd, as this was originally just a play project. My test libraries are mixed with the core libraries and my specs and src have a flat structure. Were this a production project, I would also try to find a way to combine this inline config with the one below and generate the list of spec files instead of hand-coding them.</p>
<p>Because I am using RequireJS, I&#8217;ve included that option in my configuration and created a RequireJS configuration based on the one supplied in the <a href="http://karma-runner.github.io/0.10/plus/requirejs.html" title="Karma - RequireJS">RequireJS instructions</a> on the karma site.</p>
<p><b>test-main.js: </b> <a href="">townthing/town/js/test/test-main.js</a></p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="javascript"><thead><tr><td colspan="2"  class="head">Javascript</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
</pre></td><td class="de1"><pre class="de1"><span class="kw1">var</span> tests <span class="sy0">=</span> <span class="br0">&#91;</span><span class="br0">&#93;</span><span class="sy0">;</span>
<span class="kw1">for</span> <span class="br0">&#40;</span><span class="kw1">var</span> file <span class="kw1">in</span> window.__karma__.<span class="me1">files</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; <span class="kw1">if</span> <span class="br0">&#40;</span>window.__karma__.<span class="me1">files</span>.<span class="kw3">hasOwnProperty</span><span class="br0">&#40;</span>file<span class="br0">&#41;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">if</span> <span class="br0">&#40;</span><span class="co2">/spec\.js$/</span>.<span class="me1">test</span><span class="br0">&#40;</span>file<span class="br0">&#41;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; tests.<span class="me1">push</span><span class="br0">&#40;</span>file<span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp; &nbsp; <span class="br0">&#125;</span>
<span class="br0">&#125;</span>
&nbsp;
requirejs.<span class="me1">config</span><span class="br0">&#40;</span><span class="br0">&#123;</span>
&nbsp; &nbsp; <span class="co1">// Karma serves files from '/base'</span>
&nbsp; &nbsp; baseUrl<span class="sy0">:</span> <span class="st0">'/base/src'</span><span class="sy0">,</span>
&nbsp;
&nbsp; &nbsp; paths<span class="sy0">:</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="st0">&quot;knockout&quot;</span><span class="sy0">:</span> <span class="st0">&quot;../lib/knockout-3.0.0&quot;</span><span class="sy0">,</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="st0">&quot;Squire&quot;</span><span class="sy0">:</span> <span class="st0">&quot;../lib/Squire&quot;</span>
&nbsp; &nbsp; <span class="br0">&#125;</span>
<span class="br0">&#125;</span><span class="br0">&#41;</span><span class="sy0">;</span>
require<span class="br0">&#40;</span>tests<span class="sy0">,</span> <span class="kw1">function</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#123;</span>
&nbsp; &nbsp; window.__karma__.<span class="me1">start</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
<span class="br0">&#125;</span><span class="br0">&#41;</span><span class="sy0">;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">var tests = [];
for (var file in window.__karma__.files) {
	if (window.__karma__.files.hasOwnProperty(file)) {
		if (/spec\.js$/.test(file)) {
			tests.push(file);
		}
	}
}

requirejs.config({
    // Karma serves files from '/base'
    baseUrl: '/base/src',

	paths: {
		"knockout": "../lib/knockout-3.0.0",
		"Squire": "../lib/Squire"
	}
});
require(tests, function(){
	window.__karma__.start();
});</pre></div></div>

<p>The biggest difference between my script and the sample one is I am loading the tests and starting karma after the configuration, rather than inside it. I am using Squire to mock several of the RequireJS modules for tests, had I used the configuration to start karma then each time I created a new instal of Squire I would have kicked off conflicting runs when it ran the same configuration.</p>
<p>Running karma locally is then as easy as: <code>node .\node_modules\karma\bin\karma start karma.conf.js</code></p>
<p>It&#8217;s only a few more steps to create a single test-main.js that both the jasmine SpecRunner file and karma can share.</p>
<h1>The Results</h1>
<p>Once I have the configurations set up, my tests run successfully from karma. I have them configured to use PhantomJS, but can also override that by sending in command-line arguments to do a single-run in other browsers (like Chrome) when I need to troubleshoot.</p>
<p><code>node .\node_modules\karma\bin\karma start karma.conf.js --single-run</code></p>
<div id="attachment_2492" style="width: 577px" class="wp-caption aligncenter"><a href="/wp-content/uploads/2014/03/karma.png"><img src="/wp-content/uploads/2014/03/karma.png" alt="Successful Tests w/ Non-Impacting Errors" width="567" class="size-full wp-image-2492" srcset="/wp-content/uploads/2014/03/karma.png 567w, /wp-content/uploads/2014/03/karma-300x113.png 300w" sizes="(max-width: 567px) 100vw, 567px" /></a><p class="wp-caption-text">Successful Tests w/ Non-Impacting Errors</p></div>
<p>I was getting errors about missing timestamps when Squire loads some of the dependencies, but the files are found so I&#8217;m not sure why they are occurring (and they don&#8217;t happen on one of my other projects). I found a similar <a href="https://github.com/princed/karma-chai-plugins/issues/4">issue</a> and <a href="http://stackoverflow.com/questions/20733090/karma-error-there-is-no-timestamp-for">stackoverflow</a> question, so I&#8217;m not the only one with this particular issue. </p>
<p><code>node .\node_modules\karma\bin\karma start karma.conf.js --single-run</code></p>
<div id="attachment_2543" style="width: 815px" class="wp-caption aligncenter"><a href="/wp-content/uploads/2014/04/karma2.png"><img src="/wp-content/uploads/2014/04/karma2.png" alt="Karma Run - Take 2 - (Node hasn&#039;t eaten my blue background in this window)" width="805" height="88" class="size-full wp-image-2543" srcset="/wp-content/uploads/2014/04/karma2.png 805w, /wp-content/uploads/2014/04/karma2-300x32.png 300w" sizes="(max-width: 805px) 100vw, 805px" /></a><p class="wp-caption-text">Karma Run &#8211; Take 2 &#8211; (Node hasn&#8217;t eaten my blue background in this window)</p></div>
<p>I was able to correct the issue from switching my test-main.js require basePath from &#8220;base/src&#8221; to &#8220;/base/src&#8221;, I&#8217;m still digging into why this worked.</p>
<h1>My Thoughts</h1>
<p>NCrunch set the bar high, and while karma runs my tests continuously, I think comparing it NCrunch would be unfair to karma because it just isn&#8217;t in the same league.</p>
<p>Running locally, Karma does not give me that much more value than just refreshing a SpecRunner file in the browser. With the browser I have to change Alt+Tab to the window and F5 refresh, with karma the console output of test results is there, but it doesn&#8217;t have the browser&#8217;s ability to click on an error and see the code in context, see files that didn&#8217;t load correctly, etc. Karma has a plugin infrastructure for other reporters, but the few I&#8217;ve looked at have been focused on providing static files. I briefly looked at an HTML reporter in the hope that it might do some AJAX-y magic, but it simply created HTML output files.</p>
<p>One thing I really like about karma is it&#8217;s ability to easily plug in other browsers and run across one or more simultaneously. In a build server environment, this would mean I could easily run my JS unit tests across a wide set of browsers, collect the results, and then either capture the text output from karma or use a plugin for my build server to integrate in the results.</p>
<p>So overall, I think it makes a great tool for running unit tests the same locally and on the build server and being able to easily do so across a wide range of browsers, but I really don&#8217;t like the choice of using the console as the primary output. I think they overlooked the fact that they already have a browser front-end and a web server that could have been used to provide a richer front-end (potentially one that could be compared to NCrunch) and stil had a slimmer console or other-plugin-of-choice reporting mechanism for those that prefer it or are automating against it.</p>
]]></content>
			<link rel="replies" type="text/html" href="/index.php/webdev/uidevelopment/javascript/continuous-javascript-testing-with-karma/#comments" thr:count="4"/>
		<link rel="replies" type="application/atom+xml" href="/index.php/webdev/uidevelopment/javascript/continuous-javascript-testing-with-karma/feed/atom/" thr:count="4"/>
		<thr:total>4</thr:total>
		</entry>
		<entry>
		<author>
			<name>Eli Weinstock-Herman (tarwn)</name>
					</author>
		<title type="html"><![CDATA[Unit Testing with Jasmine 2.0 and Require.JS]]></title>
		<link rel="alternate" type="text/html" href="/index.php/webdev/uidevelopment/javascript/unit-testing-with-jasmine-2-0-and-require-js/" />
		<id>/?p=2475</id>
		<updated>2014-03-09T18:53:18Z</updated>
		<published>2014-03-04T13:41:12Z</published>
		<category scheme="/" term="Javascript" /><category scheme="/" term="Unit Testing" /><category scheme="/" term="jasmine" /><category scheme="/" term="javascript" /><category scheme="/" term="requirejs" />		<summary type="html"><![CDATA[Jasmine 2.0 has changed how it loads and executes tests, using a boot script now to handle the details. If you try to plug some require() calls into the sample SpecRunner.html page, Jasmine will be done and finished before the require() statement loads the test modules and their dependencies. The problem is that RequireJS loads [&#8230;]]]></summary>
		<content type="html" xml:base="/index.php/webdev/uidevelopment/javascript/unit-testing-with-jasmine-2-0-and-require-js/"><![CDATA[<p>Jasmine 2.0 has changed how it loads and executes tests, using a boot script now to handle the details. If you try to plug some require() calls into the sample SpecRunner.html page, Jasmine will be done and finished before the require() statement loads the test modules and their dependencies.</p>
<p>The problem is that RequireJS loads the dependencies asynchronously, but the standard boot script for Jasmine runs when window.onload is called. So how do we fix it?</p>
<h2>Option 1: Call window.onload Ourselves</h2>
<p>One option to solve this is to simply call window.onload again:</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="html4strict"><thead><tr><td colspan="2"  class="head">HTML</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
</pre></td><td class="de1"><pre class="de1"><span class="sc2">&lt;<span class="kw2">script</span> <span class="kw3">type</span><span class="sy0">=</span><span class="st0">&quot;text/javascript&quot;</span> <span class="kw3">src</span><span class="sy0">=</span><span class="st0">&quot;tests/lib/jasmine-2.0.0/jasmine.js&quot;</span>&gt;&lt;<span class="sy0">/</span><span class="kw2">script</span>&gt;</span>
<span class="sc2">&lt;<span class="kw2">script</span> <span class="kw3">type</span><span class="sy0">=</span><span class="st0">&quot;text/javascript&quot;</span> <span class="kw3">src</span><span class="sy0">=</span><span class="st0">&quot;tests/lib/jasmine-2.0.0/jasmine-html.js&quot;</span>&gt;&lt;<span class="sy0">/</span><span class="kw2">script</span>&gt;</span>
<span class="sc2">&lt;<span class="kw2">script</span> <span class="kw3">type</span><span class="sy0">=</span><span class="st0">&quot;text/javascript&quot;</span> <span class="kw3">src</span><span class="sy0">=</span><span class="st0">&quot;tests/lib/jasmine-2.0.0/boot.js&quot;</span>&gt;&lt;<span class="sy0">/</span><span class="kw2">script</span>&gt;</span>
<span class="sc2">&lt;<span class="kw2">script</span> <span class="kw3">type</span><span class="sy0">=</span><span class="st0">&quot;text/javascript&quot;</span> <span class="kw3">src</span><span class="sy0">=</span><span class="st0">&quot;lib/require-2.1.8.min.js&quot;</span> data-main<span class="sy0">=</span><span class="st0">&quot;test-main&quot;</span>&gt;&lt;<span class="sy0">/</span><span class="kw2">script</span>&gt;</span>
&nbsp;
<span class="sc2">&lt;<span class="kw2">script</span> <span class="kw3">type</span><span class="sy0">=</span><span class="st0">&quot;text/javascript&quot;</span>&gt;</span>
&nbsp; &nbsp; // list spec files here
&nbsp; &nbsp; require([
&nbsp; &nbsp; &nbsp; &nbsp; &quot;spec/someAwesomeProcess.spec&quot;,
&nbsp; &nbsp; &nbsp; &nbsp; &quot;spec/anotherAwesomeProcess.spec&quot;
&nbsp;
&nbsp; &nbsp; ], function () {
&nbsp; &nbsp; &nbsp; &nbsp; window.onload();
&nbsp; &nbsp; });
<span class="sc2">&lt;<span class="sy0">/</span><span class="kw2">script</span>&gt;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">&lt;script type="text/javascript" src="tests/lib/jasmine-2.0.0/jasmine.js"&gt;&lt;/script&gt;
&lt;script type="text/javascript" src="tests/lib/jasmine-2.0.0/jasmine-html.js"&gt;&lt;/script&gt;
&lt;script type="text/javascript" src="tests/lib/jasmine-2.0.0/boot.js"&gt;&lt;/script&gt;
&lt;script type="text/javascript" src="lib/require-2.1.8.min.js" data-main="test-main"&gt;&lt;/script&gt;

&lt;script type="text/javascript"&gt;
	// list spec files here
	require([
		"spec/someAwesomeProcess.spec",
		"spec/anotherAwesomeProcess.spec"

	], function () {
		window.onload();
	});
&lt;/script&gt;</pre></div></div>

<p>But that&#8217;s icky and causes you to have two test bars across the screen (and probably doesn&#8217;t work well with other reporters either).</p>
<p><a href="/wp-content/uploads/2014/02/JasmineDoubleFail.png"><img src="/wp-content/uploads/2014/02/JasmineDoubleFail.png" alt="JasmineDoubleFail" width="726" height="182" class="aligncenter size-full wp-image-2477" srcset="/wp-content/uploads/2014/02/JasmineDoubleFail.png 726w, /wp-content/uploads/2014/02/JasmineDoubleFail-300x75.png 300w" sizes="(max-width: 726px) 100vw, 726px" /></a></p>
<p>Yeah, that&#8217;s special.</p>
<h2>Option 2: Custom Boot Script</h2>
<p>Or we can fix the root cause, the fact that the tests are running on window.onload and that doesn&#8217;t play well with AMD. The boot script included with Jasmine is supposed to be a template that can be customized to your own needs, so let&#8217;s take advantage of that. Copying the existing boot script, we can replace the section that registers the tests to onload with one that will add a callable method to the window:</p>
<p><b>boot-without-onload.js</b></p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="javascript"><thead><tr><td colspan="2"  class="head">Javascript</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
</pre></td><td class="de1"><pre class="de1">&nbsp; <span class="coMULTI">/**</span>
<span class="coMULTI">&nbsp; &nbsp;* ## Execution</span>
<span class="coMULTI">&nbsp; &nbsp;*</span>
<span class="coMULTI">&nbsp; &nbsp;* No onload, only on demand now</span>
<span class="coMULTI">&nbsp; &nbsp;*/</span>
&nbsp;
&nbsp; window.<span class="me1">executeTests</span> <span class="sy0">=</span> <span class="kw1">function</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#123;</span>
&nbsp; &nbsp; htmlReporter.<span class="me1">initialize</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; env.<span class="me1">execute</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; <span class="br0">&#125;</span><span class="sy0">;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">  /**
   * ## Execution
   *
   * No onload, only on demand now
   */

  window.executeTests = function(){
    htmlReporter.initialize();
    env.execute();
  };</pre></div></div>

<p>And then update our SpecRunner to include this replacement boot script and require the test files prior to executing the tests:</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="html4strict"><thead><tr><td colspan="2"  class="head">HTML</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
</pre></td><td class="de1"><pre class="de1">&nbsp; &nbsp; <span class="sc2">&lt;<span class="kw2">script</span> <span class="kw3">type</span><span class="sy0">=</span><span class="st0">&quot;text/javascript&quot;</span> <span class="kw3">src</span><span class="sy0">=</span><span class="st0">&quot;tests/lib/jasmine-2.0.0/jasmine.js&quot;</span>&gt;&lt;<span class="sy0">/</span><span class="kw2">script</span>&gt;</span>
&nbsp; &nbsp; <span class="sc2">&lt;<span class="kw2">script</span> <span class="kw3">type</span><span class="sy0">=</span><span class="st0">&quot;text/javascript&quot;</span> <span class="kw3">src</span><span class="sy0">=</span><span class="st0">&quot;tests/lib/jasmine-2.0.0/jasmine-html.js&quot;</span>&gt;&lt;<span class="sy0">/</span><span class="kw2">script</span>&gt;</span>
&nbsp; &nbsp; <span class="sc2">&lt;<span class="kw2">script</span> <span class="kw3">type</span><span class="sy0">=</span><span class="st0">&quot;text/javascript&quot;</span> <span class="kw3">src</span><span class="sy0">=</span><span class="st0">&quot;tests/lib/jasmine-2.0.0/boot-without-onload.js&quot;</span>&gt;&lt;<span class="sy0">/</span><span class="kw2">script</span>&gt;</span>
&nbsp; &nbsp; <span class="sc2">&lt;<span class="kw2">script</span> <span class="kw3">type</span><span class="sy0">=</span><span class="st0">&quot;text/javascript&quot;</span> <span class="kw3">src</span><span class="sy0">=</span><span class="st0">&quot;lib/require-2.1.8.min.js&quot;</span> data-main<span class="sy0">=</span><span class="st0">&quot;test-main&quot;</span>&gt;&lt;<span class="sy0">/</span><span class="kw2">script</span>&gt;</span>
&nbsp;
&nbsp; &nbsp; <span class="sc2">&lt;<span class="kw2">script</span> <span class="kw3">type</span><span class="sy0">=</span><span class="st0">&quot;text/javascript&quot;</span>&gt;</span>
&nbsp; &nbsp; &nbsp; &nbsp; // list spec files here
&nbsp; &nbsp; &nbsp; &nbsp; require([
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;spec/someAwesomeProcess.spec&quot;,
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;spec/anotherAwesomeProcess.spec&quot;
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; ], function () {
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; window.executeTests();
&nbsp; &nbsp; &nbsp; &nbsp; });
&nbsp; &nbsp; <span class="sc2">&lt;<span class="sy0">/</span><span class="kw2">script</span>&gt;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">    &lt;script type="text/javascript" src="tests/lib/jasmine-2.0.0/jasmine.js"&gt;&lt;/script&gt;
    &lt;script type="text/javascript" src="tests/lib/jasmine-2.0.0/jasmine-html.js"&gt;&lt;/script&gt;
    &lt;script type="text/javascript" src="tests/lib/jasmine-2.0.0/boot-without-onload.js"&gt;&lt;/script&gt;
    &lt;script type="text/javascript" src="lib/require-2.1.8.min.js" data-main="test-main"&gt;&lt;/script&gt;

    &lt;script type="text/javascript"&gt;
        // list spec files here
        require([
            "spec/someAwesomeProcess.spec",
            "spec/anotherAwesomeProcess.spec"

        ], function () {
            window.executeTests();
        });
    &lt;/script&gt;</pre></div></div>

<p>And there we go, Jasmine is now working exactly the same as if we were running without RequireJS (and had pasted 500 script tags in the file).</p>
]]></content>
			<link rel="replies" type="text/html" href="/index.php/webdev/uidevelopment/javascript/unit-testing-with-jasmine-2-0-and-require-js/#comments" thr:count="4"/>
		<link rel="replies" type="application/atom+xml" href="/index.php/webdev/uidevelopment/javascript/unit-testing-with-jasmine-2-0-and-require-js/feed/atom/" thr:count="4"/>
		<thr:total>4</thr:total>
		</entry>
		<entry>
		<author>
			<name>Eli Weinstock-Herman (tarwn)</name>
					</author>
		<title type="html"><![CDATA[Testing Asynchronous Javascript w/ Jasmine 2.0.0]]></title>
		<link rel="alternate" type="text/html" href="/index.php/webdev/uidevelopment/javascript/testing-asynchronous-javascript-w-jasmine/" />
		<id>/index.php/2014/01/testing-asynchronous-javascript-w-jasmine/</id>
		<updated>2014-10-09T10:17:41Z</updated>
		<published>2014-01-07T17:00:00Z</published>
		<category scheme="/" term="Javascript" />		<summary type="html"><![CDATA[Whether you have asynchronous methods in your client-side Javascript, are integration testing against an API, or are using an asynchronous module loader like RequireJS, asynchronous operations need testing too. Jasmine has become my framework of choice&#8230;]]></summary>
		<content type="html" xml:base="/index.php/webdev/uidevelopment/javascript/testing-asynchronous-javascript-w-jasmine/"><![CDATA[<p>Whether you have asynchronous methods in your client-side Javascript, are integration testing against an API, or are using an asynchronous module loader like <a href="http://requirejs.org/">RequireJS</a>, asynchronous operations need testing too. Jasmine has become my framework of choice for client-side Javascript and I was happy to see the asynchronous syntax get some updates in the 2.0 release.</p>
<p>Release Announcement: <a href="http://pivotallabs.com/jasmine-2-release/" title="2.0 release announcement at Pivotal Labs">Jasmine is 5 and 2.0</a><br />
Jasmine Links: http://jasmine.github.io/</p>
<p>(Google and Bing will both provide the address to the 1.3.1 page if you search for jasmine, the link above is a landing page for both versions.)</p>
<div style="background-color: #eeeeee; padding: 1em; text-align: center; margin-bottom: 1em">You can view or download the full code for the examples from <a href="https://github.com/tarwn/Blog_Jasmine2Async" title="tarwn/Blog_Jasmine2Async repo on github">github</a></div>
<h2>Async in Jasmine 1.3.1</h2>
<p>Prior to the 2.0 release, Jasmine used a pair of functions for latching to ensure the test fully executed before exiting. The latching method provides a runs() function for executing potentially asynchronous code and a waitsFor() function that polls a provided latch condition until it returns true (ready to continue). This works, but visually adds a bunch of noise to the test.</p>
<p>Here is what it looks like when we write a test against asynchronous code that isn&#8217;t waiting for asynchronous operations:</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="javascript"><thead><tr><td colspan="2"  class="head">Javascript</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
</pre></td><td class="de1"><pre class="de1">it<span class="br0">&#40;</span><span class="st0">&quot;won't be detected. It's executed without waiting for the asynchronous result&quot;</span><span class="sy0">,</span> <span class="kw1">function</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#123;</span>
&nbsp; &nbsp; <span class="kw1">var</span> service <span class="sy0">=</span> <span class="kw1">new</span> sample.<span class="me1">SampleService</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; 
&nbsp; &nbsp; <span class="kw1">var</span> promise <span class="sy0">=</span> service.<span class="me1">getStuff</span><span class="br0">&#40;</span><span class="kw2">false</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; 
&nbsp; &nbsp; promise.<span class="me1">then</span><span class="br0">&#40;</span><span class="kw1">function</span><span class="br0">&#40;</span>message<span class="br0">&#41;</span><span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; expect<span class="br0">&#40;</span>message<span class="br0">&#41;</span>.<span class="me1">toBeDefined</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; <span class="br0">&#125;</span><span class="sy0">,</span> <span class="kw1">function</span><span class="br0">&#40;</span>error<span class="br0">&#41;</span><span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; expect<span class="br0">&#40;</span><span class="st0">&quot;first test received error: &quot;</span> <span class="sy0">+</span> error<span class="br0">&#41;</span>.<span class="me1">toFail</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; <span class="br0">&#125;</span><span class="br0">&#41;</span><span class="sy0">;</span>
<span class="br0">&#125;</span><span class="br0">&#41;</span><span class="sy0">;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">it("won't be detected. It's executed without waiting for the asynchronous result", function(){
	var service = new sample.SampleService();
	
	var promise = service.getStuff(false);
	
	promise.then(function(message){
		expect(message).toBeDefined();
	}, function(error){
		expect("first test received error: " + error).toFail();
	});
});</pre></div></div>

<p>When we break something in our code, instead of catching it in this test, the test will complete without waiting for the asynchronous execution and final evaluation. A bit later if we are still running other tests the error will pop up against a completely different test. This is problematic and will be a pain in the butt to figure out (and also shows some oddness in the jasmine architecture that a failure would be attached to a later test).</p>
<p>Using the latch method available in jasmine 1.3.1, we can add the runs() and waitsFor() calls to ensure this evaluates at the proper time:</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="javascript"><thead><tr><td colspan="2"  class="head">Javascript</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
</pre></td><td class="de1"><pre class="de1">it<span class="br0">&#40;</span><span class="st0">&quot;will be detected. It uses the runs() and waitsFor latch to wait for the async result&quot;</span><span class="sy0">,</span> <span class="kw1">function</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#123;</span>
&nbsp; &nbsp; <span class="kw1">var</span> service <span class="sy0">=</span> <span class="kw1">new</span> sample.<span class="me1">SampleService</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; <span class="kw1">var</span> done <span class="sy0">=</span> <span class="kw2">false</span><span class="sy0">;</span>
&nbsp; &nbsp; runs<span class="br0">&#40;</span><span class="kw1">function</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">var</span> promise <span class="sy0">=</span> service.<span class="me1">getStuff</span><span class="br0">&#40;</span><span class="kw2">false</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; 
&nbsp; &nbsp; &nbsp; &nbsp; promise.<span class="me1">then</span><span class="br0">&#40;</span><span class="kw1">function</span><span class="br0">&#40;</span>message<span class="br0">&#41;</span><span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; expect<span class="br0">&#40;</span>message<span class="br0">&#41;</span>.<span class="me1">toBeDefined</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span><span class="sy0">,</span> <span class="kw1">function</span><span class="br0">&#40;</span>error<span class="br0">&#41;</span><span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; expect<span class="br0">&#40;</span><span class="st0">&quot;second test received error: &quot;</span> <span class="sy0">+</span> error<span class="br0">&#41;</span>.<span class="me1">toFail</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span><span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; .<span class="me1">always</span><span class="br0">&#40;</span><span class="kw1">function</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; done <span class="sy0">=</span> <span class="kw2">true</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; <span class="br0">&#125;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; 
&nbsp; &nbsp; waitsFor<span class="br0">&#40;</span><span class="kw1">function</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">return</span> done<span class="sy0">;</span>
&nbsp; &nbsp; <span class="br0">&#125;</span><span class="br0">&#41;</span><span class="sy0">;</span>
<span class="br0">&#125;</span><span class="br0">&#41;</span><span class="sy0">;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">it("will be detected. It uses the runs() and waitsFor latch to wait for the async result", function(){
	var service = new sample.SampleService();

	var done = false;
	runs(function(){
		var promise = service.getStuff(false);
		
		promise.then(function(message){
			expect(message).toBeDefined();
		}, function(error){
			expect("second test received error: " + error).toFail();
		})
		.always(function(){
			done = true;
		});
	});
	
	waitsFor(function(){
		return done;
	});
});</pre></div></div>

<p>Now the test will wait until we set our &#8220;done&#8221; variable to true (or 5000ms, the default timeout that I didn&#8217;t override on the waitsFor() call). As you can see, though, this also added some extra noise to the test, both in terms of extra characters to visually parse and extra function layers. It&#8217;s also quite a bit different then the pattern mocha follows, and if you&#8217;re going back and forth between mocha and jasmine you&#8217;ll have that moment where you have to shift mental gears.</p>
<p>This is was an excellent time to add <a href="https://github.com/derickbailey/jasmine.async" title="jasmine.async on github">jasmine.async</a>. Jasmine.async introduces an AsyncSpec object with beforeEach(), it(), and afterEach() calls with a &#8220;done&#8221; wait handle parameter:</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="javascript"><thead><tr><td colspan="2"  class="head">Javascript</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
</pre></td><td class="de1"><pre class="de1"><span class="kw1">var</span> async <span class="sy0">=</span> <span class="kw1">new</span> AsyncSpec<span class="br0">&#40;</span><span class="kw1">this</span><span class="br0">&#41;</span><span class="sy0">;</span>
async.<span class="me1">it</span><span class="br0">&#40;</span><span class="st0">&quot;will be detected. It uses the jasmine.async library to wait for the result&quot;</span><span class="sy0">,</span> <span class="kw1">function</span><span class="br0">&#40;</span>done<span class="br0">&#41;</span><span class="br0">&#123;</span>
&nbsp; &nbsp; <span class="kw1">var</span> service <span class="sy0">=</span> <span class="kw1">new</span> sample.<span class="me1">SampleService</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; 
&nbsp; &nbsp; <span class="kw1">var</span> promise <span class="sy0">=</span> service.<span class="me1">getStuff</span><span class="br0">&#40;</span><span class="kw2">false</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; 
&nbsp; &nbsp; promise.<span class="me1">then</span><span class="br0">&#40;</span><span class="kw1">function</span><span class="br0">&#40;</span>message<span class="br0">&#41;</span><span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; expect<span class="br0">&#40;</span>message<span class="br0">&#41;</span>.<span class="me1">toBeDefined</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; <span class="br0">&#125;</span><span class="sy0">,</span> <span class="kw1">function</span><span class="br0">&#40;</span>error<span class="br0">&#41;</span><span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; expect<span class="br0">&#40;</span><span class="st0">&quot;first test received error: &quot;</span> <span class="sy0">+</span> error<span class="br0">&#41;</span>.<span class="me1">toFail</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; <span class="br0">&#125;</span><span class="br0">&#41;</span>
&nbsp; &nbsp; .<span class="me1">always</span><span class="br0">&#40;</span>done<span class="br0">&#41;</span><span class="sy0">;</span>
<span class="br0">&#125;</span><span class="br0">&#41;</span><span class="sy0">;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">var async = new AsyncSpec(this);
async.it("will be detected. It uses the jasmine.async library to wait for the result", function(done){
	var service = new sample.SampleService();
	
	var promise = service.getStuff(false);
	
	promise.then(function(message){
		expect(message).toBeDefined();
	}, function(error){
		expect("first test received error: " + error).toFail();
	})
	.always(done);
});</pre></div></div>

<p>This looks very much like the initial, flawed version as we would implement it in mocha. The only change to the test logic is the single always() call at the end that will execute the &#8220;done&#8221; wait handle that the async.it() call provided. The test logic is still just as clean as the original at the cost of a single additional script include.</p>
<h2>Async in Jasmine 2.0.0</h2>
<p>Jasmine 2.0.0 has updated the <a href="http://jasmine.github.io/2.0/introduction.html#section-Asynchronous_Support" title="Asynchronous support in jasmine 2.0.0">async syntax</a> to work similar to Mocha right out of the box. The beforeEach(), it(), and afterEach() methods now take an optional parameter just like the wait handle parameter in Mocha and the jasmine.async library above.</p>
<p>Now it&#8217;s an even easier path from a flawed test like this:</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="javascript"><thead><tr><td colspan="2"  class="head">Javascript</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
</pre></td><td class="de1"><pre class="de1">it<span class="br0">&#40;</span><span class="st0">&quot;won't be detected. It's executed without waiting for the asynchronous result&quot;</span><span class="sy0">,</span> <span class="kw1">function</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">var</span> service <span class="sy0">=</span> <span class="kw1">new</span> sample.<span class="me1">SampleService</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; 
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">var</span> promise <span class="sy0">=</span> service.<span class="me1">getStuff</span><span class="br0">&#40;</span><span class="kw2">false</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; 
&nbsp; &nbsp; &nbsp; &nbsp; promise.<span class="me1">then</span><span class="br0">&#40;</span><span class="kw1">function</span><span class="br0">&#40;</span>message<span class="br0">&#41;</span><span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; expect<span class="br0">&#40;</span>message<span class="br0">&#41;</span>.<span class="me1">toBeDefined</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span><span class="sy0">,</span> <span class="kw1">function</span><span class="br0">&#40;</span>error<span class="br0">&#41;</span><span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; expect<span class="br0">&#40;</span><span class="st0">&quot;first test received error: &quot;</span> <span class="sy0">+</span> error<span class="br0">&#41;</span>.<span class="me1">toFail</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span><span class="br0">&#41;</span><span class="sy0">;</span>
<span class="br0">&#125;</span><span class="br0">&#41;</span><span class="sy0">;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">it("won't be detected. It's executed without waiting for the asynchronous result", function(){
		var service = new sample.SampleService();
		
		var promise = service.getStuff(false);
		
		promise.then(function(message){
				expect(message).toBeDefined();
		}, function(error){
				expect("first test received error: " + error).toFail();
		});
});</pre></div></div>

<p>To a test that will correctly catch the asynchronous error, like this:</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="javascript"><thead><tr><td colspan="2"  class="head">Javascript</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
</pre></td><td class="de1"><pre class="de1">it<span class="br0">&#40;</span><span class="st0">&quot;will be detected. It uses the new jasmine async syntax&quot;</span><span class="sy0">,</span> <span class="kw1">function</span><span class="br0">&#40;</span>done<span class="br0">&#41;</span><span class="br0">&#123;</span>
&nbsp; &nbsp; <span class="kw1">var</span> service <span class="sy0">=</span> <span class="kw1">new</span> sample.<span class="me1">SampleService</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; 
&nbsp; &nbsp; <span class="kw1">var</span> promise <span class="sy0">=</span> service.<span class="me1">getStuff</span><span class="br0">&#40;</span><span class="kw2">false</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; 
&nbsp; &nbsp; promise.<span class="me1">then</span><span class="br0">&#40;</span><span class="kw1">function</span><span class="br0">&#40;</span>message<span class="br0">&#41;</span><span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; expect<span class="br0">&#40;</span>message<span class="br0">&#41;</span>.<span class="me1">toBeDefined</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; <span class="br0">&#125;</span><span class="sy0">,</span> <span class="kw1">function</span><span class="br0">&#40;</span>error<span class="br0">&#41;</span><span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; expect<span class="br0">&#40;</span><span class="st0">&quot;second test received error: &quot;</span> <span class="sy0">+</span> error<span class="br0">&#41;</span>.<span class="me1">toFail</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; <span class="br0">&#125;</span><span class="br0">&#41;</span>
&nbsp; &nbsp; .<span class="me1">always</span><span class="br0">&#40;</span>done<span class="br0">&#41;</span><span class="sy0">;</span>
<span class="br0">&#125;</span><span class="br0">&#41;</span><span class="sy0">;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">it("will be detected. It uses the new jasmine async syntax", function(done){
	var service = new sample.SampleService();
	
	var promise = service.getStuff(false);
	
	promise.then(function(message){
		expect(message).toBeDefined();
	}, function(error){
		expect("second test received error: " + error).toFail();
	})
	.always(done);
});</pre></div></div>

<p>Like the jasmine.async test in the 1.3.1 examples, the changes are minimal and don&#8217;t impact the flow of actually reading the test. </p>
<h2>Upgrade right now!</h2>
<p>Or not. Projects I&#8217;m starting from scratch are definitely getting 2.0.0. If you have an existing project on 1.3.1, there&#8217;s going to be some other inconsistencies between that and 2.0.0 (it is a major version upgrade, after all), but I think the improvements are worth at least taking it for a test drive.</p>
]]></content>
			<link rel="replies" type="text/html" href="/index.php/webdev/uidevelopment/javascript/testing-asynchronous-javascript-w-jasmine/#comments" thr:count="5"/>
		<link rel="replies" type="application/atom+xml" href="/index.php/webdev/uidevelopment/javascript/testing-asynchronous-javascript-w-jasmine/feed/atom/" thr:count="5"/>
		<thr:total>5</thr:total>
		</entry>
		<entry>
		<author>
			<name>Tahir Khalid</name>
						<uri>http://www.vurso.co.uk/</uri>
					</author>
		<title type="html"><![CDATA[ASP.NET MVC 4 Razor Starter Guide &#8211; How to avoid punching your Laptop to Death]]></title>
		<link rel="alternate" type="text/html" href="/index.php/webdev/uidevelopment/ajax/asp-net-mvc-4-razor-starter/" />
		<id>/index.php/2013/12/asp-net-mvc-4-razor-starter/</id>
		<updated>2013-12-02T01:16:00Z</updated>
		<published>2013-12-02T01:16:00Z</published>
		<category scheme="/" term="AJAX" /><category scheme="/" term="$ not defined" /><category scheme="/" term="asp.net" /><category scheme="/" term="c#" /><category scheme="/" term="mvc 4" /><category scheme="/" term="razor" /><category scheme="/" term="starter guide" />		<summary type="html"><![CDATA[Hello and welcome to my seocond blog post for LessThanDot (I think) and in this post I will discuss how to setup a working ASP.NET MVC 4 (with Razor) project using the Empty Template.
That's right, a blank project, I didn't want the templates doing the&#8230;]]></summary>
		<content type="html" xml:base="/index.php/webdev/uidevelopment/ajax/asp-net-mvc-4-razor-starter/"><![CDATA[<p>Hello and welcome to my blog post for LessThanDot and in this post I will discuss how to setup a working ASP.NET MVC 4 (with Razor) project using the Empty Template.</p>
<p>That&#8217;s right, a blank project, I didn&#8217;t want the templates doing the work for me, I wanted to create a lean project that I had control over and I thought this would be easy enough but I was very wrong and tripped over a couple of times so hopefully this post will avoid any confusion and pain for newbies to the world of ASP.NET MVC (and avoid having to punch their laptop to death).</p>
<p>&#8220;Wait you punched your laptop to death?!&#8221;</p>
<p><img src="http://www.vurso.co.uk/ltd/mvc-4-with-razor-starter-guide/punchedmylaptoptodeath.jpg" alt="Punched My Laptop To Death @ vurso.co.uk" width="350" height="85" /></p>
<p>Yes, metaphorically speaking as per my above tweet&#8230;I came close to actually doing it in real life, that&#8217;s how frustrated I was but alas frustration can often lead to lots of fun learning which I did in between the random expletives and &#8220;WTF!&#8221; shouts throughout this process.</p>
<p>So lets start, the first thing you want to do is <span style="background-color: #ffcc00;">NOT USE THE TEMPLATES!</span> I know I know, sounds crazy but trust me you want to do it right and this is the best way my friends.</p>
<p>Start Visual Studio 2012 and then select the ASP.NET MVC 4 project type:</p>
<p><img src="http://www.vurso.co.uk/ltd/mvc-4-with-razor-starter-guide/aspdotnetmvc4projtype.JPG" alt="ASP.NET MVC 4 Project Type" width="350" height="35" /></p>
<p>Give the project a meaningful name and then left-click the OK button to continue. You will then be presented with the following screen (Project Tempaltes), select the <span style="background-color: #99ccff;">Empty</span> Project type and left-click OK to continue.</p>
<p><img src="http://www.vurso.co.uk/ltd/mvc-4-with-razor-starter-guide/projecttemplates.jpg" alt="ASP.NET MVC 4 Project Templates" width="280" height="165" /></p>
<p>If everything goes to plan Visual Studio will start generating your project folders and files and present you with the Empty Solution:</p>
<p><img src="http://www.vurso.co.uk/ltd/mvc-4-with-razor-starter-guide/emptysolution.jpg" alt="ASP.NET MVC 4 Empty Solution" width="185" height="180" /></p>
<p>You will need to do a few things first before the project can actually work (i.e. if you want to use any kind of JavaScript/jquery/ajax and Web Content).  First we need to add some folders so right-click the project name (MvcApplication3 fro example) and select <span style="background-color: #99ccff;">Add &gt; </span><span style="background-color: #99ccff;">New Folder</span> and label it <span style="background-color: #99ccff;">Scripts</span> (or alternatively if you have created another template based MVC site such as the Internet one just drag the Scripts folder from Windws Explorer into your Visual Studio 2012 IDE and drop it onto the project name which will cause Visual Studio 2012 to take a copy of the folder and create it locally with files below your project).</p>
<p>Expand the Views folder which currently only has the web.config file.  Right-click the Views folder and select <span style="background-color: #99ccff;">Add &gt; </span><span style="background-color: #99ccff;">New Folder</span> labelling it <span style="background-color: #99ccff;">Home</span>.  Create another one and call it <span style="background-color: #99ccff;">Shared</span>, these two folders will contain the default views Index.cshtml and _Layout.cshtml (the shared view is like the MasterPage from the previous ASP.NET Form development days, it is used as a global view providing common page structure and other features across your views).</p>
<p>Now the important bit, you need to download the correct Web.Optimization package as its not included in your project and trying to create, build and compile any kind of web enabled page will cause no end of grief no less messages such as:</p>
<p><span style="font-size: 14px; line-height: 18px; background-color: #eeeeee;"><span style="font-family: 'courier new', courier;">Compiler Error Message: CS0103: The name &#8216;Scripts&#8217; does not exist in the current context</span></span></p>
<p>You may also see initial errors such as:</p>
<p><span style="font-size: 14px; line-height: 18px; background-color: #eeeeee;"><span style="font-family: 'courier new', courier;">$ is not defined</span></span></p>
<p>All these can be avoided by running the following command from the nuget package manager command line.  To access the command line you need to display the command window:</p>
<p><img src="http://www.vurso.co.uk/ltd/mvc-4-with-razor-starter-guide/nugetcommandline.jpg" alt="nuget Package Manager Command Line" width="434" height="185" /></p>
<p>Left-clicking the Command Line option will display a new command window at the bottom of your IDE which lets you enter nuget package manager specific commands.  Enter the following command to download the correct package for your project:</p>
<p><img src="http://www.vurso.co.uk/ltd/mvc-4-with-razor-starter-guide/nugetpackageget.jpg" alt="Get nuget package from Visual Studio 2012" width="321" height="100" /></p>
<p>Once the package has been downloaded you will need to configure your <span style="background-color: #99ccff;">Web.Config</span> files, <span style="background-color: #99ccff;">Global.asax</span> file and add a new class in the <span style="background-color: #99ccff;">App_Start</span> folder so lets do this now.</p>
<p>Open up your root Web.config file and add the following line below the other namespaces (in the pages &gt; namespaces section):</p>
<pre style="font-family: Consolas; font-size: 13; color: #dfdfbf; background: #333333;"><span style="font-size: small;">&lt;<span style="color: #efc986;">add</span> namespace="<span style="color: #dfaf8f;">System.Web.WebPages</span>" /&gt;</span><span style="font-family: Consolas;">
</span></pre>
<p>You will also need to do the same for your other web.config file located in the root of the Views folder.</p>
<p>Next you need to modify your <span style="background-color: #99ccff;">Global.asax</span> file located in the root of the project and add the following line below the other statements in the <span style="background-color: #99ccff;">Application_Start()</span> method:</p>
<pre style="font-family: Consolas; font-size: 13; color: #dfdfbf; background: #333333;"><span style="font-size: small;"><span style="color: #8acccf;">BundleConfig</span>.RegisterBundles(<span style="color: #8acccf;">BundleTable</span>.Bundles);</span><span style="font-family: Consolas;">
</span></pre>
<p>Now you need to add a new class called BundleConfig.cs in the App_Start folder.  Modify the using block to look like this:</p>
<pre style="color: #dfdfbf; background-color: #333333; background-position: initial initial; background-repeat: initial initial;"><span style="font-size: small;"><span style="color: #efc986;">using</span> System.Web;
<span style="color: #efc986;">using</span> System.Web.Optimization;</span></pre>
<p>Modify the contents of the class block to look like this:</p>
<pre style="color: #dfdfbf; background-color: #333333; background-position: initial initial; background-repeat: initial initial;"><span style="font-size: small;"><span style="color: #7a987a;">// For more information on Bundling, visit http://go.microsoft.com/fwlink/?LinkId=254725</span>
<span style="color: #efc986;">public</span> <span style="color: #efc986;">static</span> <span style="color: #efc986;">void</span> RegisterBundles(<span style="color: #8acccf;">BundleCollection</span> bundles)
{
    bundles.Add(<span style="color: #efc986;">new</span> <span style="color: #8acccf;">ScriptBundle</span>(<span style="color: #dfaf8f;">"~/bundles/jquery"</span>).Include(
                <span style="color: #dfaf8f;">"~/Scripts/jquery-{version}.js"</span>));
 
    bundles.Add(<span style="color: #efc986;">new</span> <span style="color: #8acccf;">ScriptBundle</span>(<span style="color: #dfaf8f;">"~/bundles/jqueryui"</span>).Include(
                <span style="color: #dfaf8f;">"~/Scripts/jquery-ui-{version}.js"</span>));
 
    bundles.Add(<span style="color: #efc986;">new</span> <span style="color: #8acccf;">ScriptBundle</span>(<span style="color: #dfaf8f;">"~/bundles/jqueryval"</span>).Include(
                <span style="color: #dfaf8f;">"~/Scripts/jquery.unobtrusive*"</span>,
                <span style="color: #dfaf8f;">"~/Scripts/jquery.validate*"</span>));
 
    <span style="color: #7a987a;">// Use the development version of Modernizr to develop with and learn from. Then, when you're</span>
    <span style="color: #7a987a;">// ready for production, use the build tool at http://modernizr.com to pick only the tests you need./</span>
    bundles.Add(<span style="color: #efc986;">new</span> <span style="color: #8acccf;">ScriptBundle</span>(<span style="color: #dfaf8f;">"~/bundles/modernizr"</span>).Include(
                <span style="color: #dfaf8f;">"~/Scripts/modernizr-*"</span>));
}</span></pre>
<p>Now save the file and we need to create a controller file and two view pages.  Right-click the Controllers folder and left-click on <span style="background-color: #99ccff;">Add &gt; Controller&#8230;</span> to display the New Controller dialog:</p>
<p><img src="http://www.vurso.co.uk/ltd/mvc-4-with-razor-starter-guide/newcontroller.jpg" alt="New MVC 4 Controller" width="280" height="145" /></p>
<p>Give it the name <span style="background-color: #99ccff;">HomeController</span> and left-click on Add to continue.  Now we need to create the Index view the controller will work with.  Before we do that we need to create a view that will <a title="ASP.NET MVC 3: Layouts with Razor" href="http://weblogs.asp.net/scottgu/archive/2010/10/22/asp-net-mvc-3-layouts.aspx" target="_blank">&#8220;automagically&#8221; assign the same razor layout</a> to all your views so right-click the <span style="background-color: #99ccff;">Views</span> folder and left-click on <span style="background-color: #99ccff;">Add &gt; View&#8230;</span> (VS 2012 is clever enough to recognise the context you&#8217;re in, in this case the Views folder).  The Add View dialog box will appear:</p>
<p><img src="http://www.vurso.co.uk/ltd/mvc-4-with-razor-starter-guide/addview.jpg" alt="ASP.NET MVC 4 Add View" width="200" height="252" /></p>
<p>Make sure you un-tick the &#8220;Use a layout or master page:&#8221; checkbox (as all your views will be using this <span style="background-color: #99ccff;">_ViewStart</span> file).</p>
<p>Now modify the file to look like this:</p>
<pre style="color: #dfdfbf; background-color: #333333; background-position: initial initial; background-repeat: initial initial;"><span style="font-size: small;">@{
    Layout = <span style="color: #dfaf8f;">"~/Views/Shared/_Layout.cshtml"</span>;
}</span></pre>
<p>Next we need to create the Index View so right-click the Home folder (the one you created earlier) and select <span style="background-color: #99ccff;">Add &gt; View&#8230;</span> to display the Add View dialog box and label this view page <span style="background-color: #99ccff;">Index</span> and finally left-click Add to create it.</p>
<p>Modify the contents of the file to look like this:</p>
<pre style="color: #dfdfbf; background-color: #333333; background-position: initial initial; background-repeat: initial initial;"><span style="font-size: small;">@{
    ViewBag.Title = <span style="color: #dfaf8f;">"My first LTD Mvc 4 Index Page"</span>;
}
@<span style="color: #efc986;">using</span> (Html.BeginForm())
{
     &lt;<span style="color: #efc986;">h1</span>&gt;Hello, World!&lt;/<span style="color: #efc986;">h1</span>&gt;
}</span></pre>
<p>Finally you need to create the shared layout view page, right-click the <span style="background-color: #99ccff;">Shared</span> folder and left-click <span style="background-color: #99ccff;">Add &gt; View&#8230;</span> to display the Add View dialog box, label the view page as <span style="background-color: #99ccff;">_Layout</span> and ensure as with the previous pages the &#8220;Use a layout or master page&#8221; checkbox is un-ticked.</p>
<p>Modify the <span style="background-color: #99ccff;">_Layout.cshtml</span> view page to look like this:</p>
<pre style="color: #dfdfbf; background-color: #333333; background-position: initial initial; background-repeat: initial initial;"><span style="font-size: small;">&lt;!<span style="color: #efc986;">DOCTYPE</span> html&gt;
&lt;<span style="color: #efc986;">html</span> lang=<span style="color: #dfaf8f;">"en"</span>&gt;
&lt;<span style="color: #efc986;">head</span>&gt;
    &lt;<span style="color: #efc986;">meta</span> name=<span style="color: #dfaf8f;">"viewport"</span> content=<span style="color: #dfaf8f;">"width=device-width"</span> /&gt;
    &lt;<span style="color: #efc986;">title</span>&gt;@ViewBag.Title&lt;/<span style="color: #efc986;">title</span>&gt;
&lt;/<span style="color: #efc986;">head</span>&gt;
&lt;<span style="color: #efc986;">body</span>&gt;
    &lt;<span style="color: #efc986;">div</span>&gt;
        @RenderBody()
    &lt;/<span style="color: #efc986;">div</span>&gt;
    @<span style="color: #8acccf;">Scripts</span>.Render(<span style="color: #dfaf8f;">"~/bundles/jquery"</span>)
    @RenderSection(<span style="color: #dfaf8f;">"scripts"</span>, required: <span style="color: #efc986;">false</span>)
&lt;/<span style="color: #efc986;">body</span>&gt;
&lt;/<span style="color: #efc986;">html</span>&gt;</span></pre>
<p>This should be enough for you to compile the project however it will still cause you pain unless you save your project and restart Visual Studio 2012, after which the references and page helpers should kick into life.</p>
<p>Build and Compile your project and then press <span style="background-color: #99ccff;">F5</span> or click on the <span style="background-color: #99ccff;">Debug</span> button to fire up your project, if all has gone well you should see a simple page with the words &#8220;Hello, World!&#8221; across the top left.</p>
<p>Well done, now go make a cup of tea and eat some digestives.</p>
]]></content>
			<link rel="replies" type="text/html" href="/index.php/webdev/uidevelopment/ajax/asp-net-mvc-4-razor-starter/#comments" thr:count="1"/>
		<link rel="replies" type="application/atom+xml" href="/index.php/webdev/uidevelopment/ajax/asp-net-mvc-4-razor-starter/feed/atom/" thr:count="1"/>
		<thr:total>1</thr:total>
		</entry>
		<entry>
		<author>
			<name>Eli Weinstock-Herman (tarwn)</name>
					</author>
		<title type="html"><![CDATA[AngularJS vs Knockout &#8211; Final Thoughts (9 of 9)]]></title>
		<link rel="alternate" type="text/html" href="/index.php/webdev/uidevelopment/angularjs-vs-knockout-final-thoughts-9/" />
		<id>/index.php/2013/10/angularjs-vs-knockout-final-thoughts-9/</id>
		<updated>2016-02-07T19:52:05Z</updated>
		<published>2013-10-21T13:38:00Z</published>
		<category scheme="/" term="Javascript" /><category scheme="/" term="UI Development" /><category scheme="/" term="angularjs" /><category scheme="/" term="knockout" />		<summary type="html"><![CDATA[I started reviewing AngularJS and Knockout because I had some specific projects that I intended to use one of these for and felt the research and comparative examples might prove useful to others. I haven't compared every aspect of the libraries, just enough to give me an idea which will be better for my specific projects (and hopefully give you a headstart on your own decisions).]]></summary>
		<content type="html" xml:base="/index.php/webdev/uidevelopment/angularjs-vs-knockout-final-thoughts-9/"><![CDATA[<p>I started reviewing <a href="http://angularjs.org/">AngularJS</a> and <a href="http://knockoutjs.com/">Knockout</a> because I had some specific projects that I intended to use one of these for and felt the research and comparative examples might prove useful to others. I haven&#8217;t compared every aspect of the libraries, just enough to give me an idea which will be better for my specific projects (and hopefully give you a head start on your own decisions).</p>
<div style="background-color: #eeeeee; padding: 1em;">
This is the final post in a nine post series looking at the capabilities of knockout and Angular. In the <a href="/index.php/WebDev/UIDevelopment/angularjs-vs-knockout-introduction-1" title="AngularJS vs Knockout - Introduction">introduction post</a>, I outlined the capabilities that I am evaluating for and the variety of scripts used in the series. In each post I evaluated a capability I needed and the ability to deliver that capability with both libraries, comparing their differences and offering my opinions. This post shares my final feelings.
</div>
<p>Knockout and AngularJS are attempting to solve two different problems. One is an MVVM binding framework, the other is an MVC SPA-in-a-box solution. But having read a number of posts that perform shallow comparisons, balk at the complexity of adding additional libraries, or simply have errors in them, I thought it could be done better. So I set out to perform a deeper comparison, include extra libraries when needed, and see how they stacked up against a common set of necessary capabilities. </p>
<p>This post has my final thoughts, but the previous 8 dive into individual comparisons and have more specific comparisons and thoughts along the way. If you have not done so, I urge you to at least skim through those as well (and not just for the extra hit counts).</p>
<h2>The Winner Is&#8230;</h2>
<p>The winner is both of these frameworks. I&#8217;ll get opinionated in a moment, but I want to point out that neither of these frameworks is the wrong decision. They are both very useful and the decision to use one over the other is not going to be because one is innately poorer than the other, it&#8217;s going to be because one fits the style and specific guidelines for a project better than the other. Saying that one is better than the other in all scenarios is just laziness.</p>
<p>I don&#8217;t like the term &#8216;front-end developer&#8217;*, but if that&#8217;s your role and you&#8217;re not a junior front-end developer, then you ought to know at least a couple of overlapping (binding, structure, etc) frameworks for web applications, such as Knockout, AngularJS, Backbone, Ember, Meteor, Dojo, etc. If for no other reason than because we&#8217;ve had a very public reminder recently at how messy HTML/JS development can get using gobs of jQuery and global functions (healthcare.gov). </p>
<p>If you&#8217;re writing blog posts and telling people which one is the best one, you better know them all. And have worked on a variety of project sizes, from tiny 3-5 page/route sites to whatever huge means (100&#8217;s of pages/routes?). And you need to have trained new developers how to use them, torn them out of a couple projects when they started to fall over, and refactored and kept them on a couple other projects. Because I absolutely think that there is not one framework that is globally better in all ways. It is very much situational, and projecting experience from one or two projects to all possible projects is a sign of an <a href="http://en.wikipedia.org/wiki/Dreyfus_model_of_skill_acquisition">advanced beginner</a> or maybe an <a href="http://www.daedtech.com/how-developers-stop-learning-rise-of-the-expert-beginner">expert beginner</a>.</p>
<p>Yep, if the shoe fits, I just used fancy words to call you ignorant. That&#8217;s why we have a comments section.</p>
<p>So I won&#8217;t be telling you which of these frameworks you should be using for your projects, but I absolutely have some opinions that shaped my own decisions and will shape future decisions I make regarding these frameworks.</p>
<p><i>*front-end developer: my feelings on this term (as well as backend developer) is a whole seperate blog post.</i></p>
<h2>Let&#8217;s Compare Some Stuff</h2>
<p>It&#8217;s time to make some decisions. You&#8217;ve read this far along in the series and hopefully that means that if one of these frameworks was new to you, you now have a starting point to explore the other and know what constructs map to one another across the two frameworks.</p>
<p>But how would I use them?</p>
<p>I approached these two frameworks as a beginner. </p>
<p>There are posts out there by people more knowledgeable than me with these  frameworks, at some point I&#8217;ll be one of those people. There are numerous other topics I had difficulty learning and then learned well enough to take them for granted, forgetting my earlier difficulties. I often wish I had posted on them as I learned them, so I could remember and communicate how I got past those early issues.</p>
<p>So I am posting as a beginner, probably the last time I can compare these two frameworks on relatively similar footing before I start using them in projects and building greater cognitive biases. </p>
<p>Granted, I have a few headstarts, having done professional web development for over a decade, working with all manner of MVC/MVVM/MVOMG presentation patterns plus any number of non-presentation patterns, experience in a large number of small to large-to-me (1/2 million lines?) projects, and finding a somewhat random mix of things interesting and worth playing with. I also had previously read a number of blog posts on both, watched videos on both, and used Knockout briefly for some small prototypes and the <a href="/index.php/DataMgmt/DBProgramming/sql-is-hard">SQLisHard.com</a> website (and learned enough that I want to rewrite it now).</p>
<p>So after a couple pages of text, lets get opinionated (opinionated-er?).</p>
<h2>Sunblock On, Fire suit applied</h2>
<p>Before I get into the ranting, two notes:</p>
<p>1: I plan on using both of these frameworks for projects in the future, they are both far better than building my own</p>
<p>2: What makes sense as a beginner may sound like total nonsense to someone who knows every nook and cranny, tell me (nicely) why or how I&#8217;m wrong</p>
<p>2b: Keep in mind that it may not be me who is wrong</p>
<p>2c: If I&#8217;m wrong and you also had that same wrong impression at one point, help us understand how/where you learned better</p>
<p>And now on to the opinions.</p>
<h3>Composition vs All-In-One</h3>
<p>I think the all-in-one approach of <a href="http://angularjs.org/">AngularJS</a> makes it a great choice for small projects (less than 10 screens or 10-20 JavaScript files) that are using a SPA model or want to take advantage of several of AngularJS&#8217;s capabilities. You have a single package to maintain with reasonable tools that can operate at higher scales and there are tons of examples available. </p>
<p>When the project starts getting larger, I don&#8217;t think there is a clear advantage to either. Knockout would obviously require a composition approach at any scale, meaning more packages to find, monitor, and maintain and several communities for support and continued developent instead of just the one. But from what I can see, you&#8217;re going to need to start adding more overhead on the AngularJS side as well, either in the form of custom routing packages, a full DOM manipulation library like <a href="http://jquery.com/">jQuery</a>, unit test libraries, 3rd party web component libraries, &#8230; When we start talking about larger scale projects, it stops being an all-in-one vs composition conversation and is instead a flavors of composition conversation.</p>
<p>I am concerned that most all-in-one solutions I&#8217;ve worked with in the past tend to be good at a couple things and mediocre at the rest. In some cases this means you&#8217;re just screwed (VB6 seemed to have a few places where the bar was pretty low, then you would try to surpass it and suddenly it was 100x harder), which leaves you either living with the mediocre bits or replacing them with better ones and just living with the overhead.</p>
<p>So the only time I think all-in-one vs composition helps make a decision is in the small scale or when you replace logic in the all-in-one with additional libraries and have to live with the extra file download size.</p>
<h3>No Compelling Capabilities</h3>
<p>There were capabilities in the AngularJS that weren&#8217;t available in Knockout w/ extra libraries, but none of them were that compelling to me. Would it be a handy tool to have? Heck yeah. Would it be impossible to work without it? Not really. </p>
<p><a href="http://docs.angularjs.org/guide/directive#understanding-transclusion-and-scopes" title="AngularJS: Directives - Understanding Transclusion and Scopes">Transclusion</a> was the one that stood out the most for me, most of the others were comparable or available once the relevant extra library was added. Transclusion is a plus I get for working with AngularJS, but it&#8217;s absence on the Knockout side doesn&#8217;t suddenly make everything impossible. Transclusion (and it&#8217;s lack) is not new to me, most of the server-side languages I have used did not directly support transclusion (Perl, PHP, Classic ASP, etc), in fact the only one I can think of that had it is ASP.Net Web Forms.</p>
<p>AngularJS and Knockout both had additional capabilities that were different than the other, but none of them leapt out at me and made the package irreplaceable.</p>
<h3>Documentation</h3>
<p>I really didn&#8217;t like the documentation for AngularJS. </p>
<p>The documentation defaults to the latest unstable version for API methods, so you can&#8217;t trust google search hits. Changing versions in the documentation version selector redirects you back to the <a href="http://code.angularjs.org/1.0.8/docs/api">main docs page</a> for that version, which means then manually searching for what you were looking for. Many of the API functions had inadequate examples (one uselessly basic example of <a href="http://code.angularjs.org/1.0.8/docs/api/ng.directive:ngClick" title="AngularJS: ngClick">ngClick</a> compared to 6 in <a href="http://knockoutjs.com/documentation/click-binding.html" title="Knockout - 'click' binding">knockout</a>), so I often had to experiment with them to figure out how they worked. </p>
<p>The general guide information can&#8217;t seem to decide what level of developer it is addressing, often switching between beginner and advanced topics or presenting them out of order. I had lots of difficulty figuring out how to <a href="http://docs.angularjs.org/guide/di" title="AngularJS: Dependency Injection">define dependencies</a> in the beginning, which is a pretty fundamental feature of the library. The <a href="http://docs.angularjs.org/tutorial" title="AngularJS tutorial">tutorial</a> assumes you are familiar with git and setting up a web server, which makes it less than approachable if you&#8217;re missing any of these. </p>
<p>I found after a while I was looking for blogs on topics instead of trying to read the documentation.</p>
<p>On the other hand, Knockout&#8217;s <a href="http://knockoutjs.com/documentation/introduction.html">documentation</a> is much more approachable, with web searches landing me on documentation that works with the current stable version and numerous examples. I rarely found myself reading and re-reading sentences in the Knockout documentation, it either does a better job of communicating the details or has fewer complex details. The <a href="http://learn.knockoutjs.com/" title="learn.knockoutjs.com">tutorial</a> required no installation at all, operating similar to jsfiddle and letting me get started directly from the web page. The site also has a number of <a href="http://knockoutjs.com/examples/" title="Knockout - Live Examples">live examples</a> available directly in the site, from basic bindings to editable grids of varying complexity, to a twitter client that unfortunately is no longer functional (twitter API deprecation).</p>
<p><a href="http://requirejs.org/">RequireJS</a> also worked with with search engines and the getting started was pretty easy, but there was a bit of a gap between getting started and actually using it. I had some difficulties with shims that took me a couple iterations with the documentation to get through, but that reminded me of just about every attempt to work with AngularJS&#8217;s documentation.</p>
<p>The various routing frameworks had differing levels of documentation, with my favorite (<a href="http://stoodder.github.io/finchjs/">finch.js</a>) posting all of their examples in CoffeeScript. But again, the complexity and requirement to reread everything in AngularJS&#8217;s documentation eclipsed any issues I had with these libraries.</p>
<p><a href="https://github.com/iammerrick/Squire.js/" title="Squire.js on github">Squire.js</a> had the least amount of documentation and also suffered from a limited number of blogs to draw on, if I get some time I&#8217;ll probably add some blogs about this in the future just to help out a bit. I had some confusion points getting started that probably could have been resolved pretty quickly with a tutorial or interactive example. This was probably the second-most frustrating documentation scenario (after AngularJS).</p>
<h3>Erroring</h3>
<p>There were a number of people that tried to set me straight on AngularJS&#8217;s silent binding failures. You can read the full comments after the <a href="/index.php/WebDev/UIDevelopment/angularjs-vs-knockout-data-binding-2">binding post</a>, or the slightly more prepared version here.</p>
<p>I am violently opposed to silent failures and errors that don&#8217;t provide reasonable information. There are a number of exceptions in .Net that provide absolutely no useful information for troubleshooting (Null reference, for example). There are silverlight errors that only contain a usable description if the user has the Silverlight Development tools installed. When I used JSP a long time ago, you would only get errors from the servlets that had been generated for you, often with no relation whatsoever to the code you had actually written. </p>
<p>I can&#8217;t count the number of systems that I&#8217;ve found empty catch statements in that were silently eating errors and directly causing pain to the end user.</p>
<p>There are two scenarios where you will have a binding error situation, when you have attempted to bind to something that doesn&#8217;t exist yet (async operation) and when you have a bug, for instance updating a model but missing something that bound to it.</p>
<p>Silent failures are a feature in the first case. They mean you don&#8217;t have to build conditional sections in the app that evaluate the state of objects you want to bind against, hopefully leave the screen blank when they fail (I had cases in Angular where I could still see the {} statements, ick), etc. In short, they don&#8217;t put an error in the console for the end user and require less developer time. Although I&#8217;m not sure how many users actually notice script errors, I guess it depends on your user base and whether a storm of developers is visiting and looking for issues (again, like healthcare.gov).</p>
<p>The second failure is a bigger deal. Attempting to build or maintain an application that doesn&#8217;t tell you when errors happen is painful. It means that when you get these type of binding errors you have to hope that either QA catches it or that you have made it easy for your users to communicate them to you. If the bug makes it into the wild, your application looks broken and you don&#8217;t even know about it.</p>
<p>These are also the most painful errors to fix, because not only are you relying on someone else to try and tell you how they got to the error state so you can duplicate it, you don&#8217;t have any clues from the framework even when you duplicate it. Is the property mis-bound? A parent property undefined? </p>
<p>That&#8217;s the kind of stuff that keeps me awake at night. User&#8217;s looking at a broken interface and questioning whether they are doing something wrong or if it&#8217;s broken, and if it&#8217;s broken whether they can trust me with their money. And I don&#8217;t even know why they&#8217;re churning or that I missed that opportunity to save my credibility.</p>
<p>In my career, I have built green field projects, but I have spent as much or more time on applications that have some years behind them. The harder you make it to find and fix errors, the more it&#8217;s going to cost to develop new features and the less time you&#8217;re going to have to do so.</p>
<p>AngularJS has silent binding failures, Knockout produces errors. Of the two, that second is the better situation because I presume I can at least grab them from window.onerror. The perfect situation would be to be able to give either of them a handler to report those errors to, but that&#8217;s not a pattern I have seen with any javascript library I&#8217;ve worked with.</p>
<h2>Which am I Choosing?</h2>
<p>One of my projects is big and is going to have a constant flow of features added, credibility and trust are very important, size of the script files are going to be very important, asynchronous script loading is going to be important, I don&#8217;t plan on rebuilding it for a while &#8230; that one should be obvious.</p>
<p>That being said, I have every intention of using both of these in smaller projects and even reworking the knockout code in <a href="http://sqlishard.com/">SQLisHard.com</a> at some point in the future. </p>
<p>The more important question is, which are you choosing? What factors did I cover that were more or less important for your project? What did I miss?</p>
<div style="background-color: #DDDDDD; padding: 8px; width: 400px;">
<h3>Knockout vs AngularJS</h3>
<ul style="margin: 0px; padding: 4px;">
<li><a href="/index.php/WebDev/UIDevelopment/angularjs-vs-knockout-introduction-1">Introductory Post</a></li>
<li><a href="/index.php/WebDev/UIDevelopment/angularjs-vs-knockout-data-binding-2">Data Binding</a></li>
<li><a href="/index.php/WebDev/UIDevelopment/angularjs-vs-knockout-validation-3">Validation</a></li>
<li><a href="/index.php/WebDev/UIDevelopment/angularjs-vs-knockout-serialization-4">Serialization</a></li>
<li><a href="/index.php/WebDev/UIDevelopment/angularjs-vs-knockout-templating-5">Templating</a></li>
<li><a href="/index.php/WebDev/UIDevelopment/angularjs-vs-knockout-modules-and-di-6">Modules + Dependency Injection</a></li>
<li><a href="/index.php/WebDev/UIDevelopment/angularjs-vs-knockout-automated-testing-7">Automated Testing</a></li>
<li><a href="/index.php/WebDev/UIDevelopment/AJAX/angularjs-vs-knockout-spa-routing-history-8">SPA Routing/History</a></li>
<li><a href="/index.php/WebDev/UIDevelopment/angularjs-vs-knockout-final-thoughts-9">Final, Final Thoughts</a></li>
</ul>
</div>
]]></content>
			<link rel="replies" type="text/html" href="/index.php/webdev/uidevelopment/angularjs-vs-knockout-final-thoughts-9/#comments" thr:count="20"/>
		<link rel="replies" type="application/atom+xml" href="/index.php/webdev/uidevelopment/angularjs-vs-knockout-final-thoughts-9/feed/atom/" thr:count="20"/>
		<thr:total>20</thr:total>
		</entry>
		<entry>
		<author>
			<name>Eli Weinstock-Herman (tarwn)</name>
					</author>
		<title type="html"><![CDATA[AngularJS vs Knockout &#8211; SPA Routing/History (8 of 9)]]></title>
		<link rel="alternate" type="text/html" href="/index.php/webdev/uidevelopment/angularjs-vs-knockout-spa-routing-history-8/" />
		<id>/index.php/2013/10/angularjs-vs-knockout-spa-routing-history-8/</id>
		<updated>2013-10-16T12:29:00Z</updated>
		<published>2013-10-16T12:29:00Z</published>
		<category scheme="/" term="Javascript" /><category scheme="/" term="UI Development" /><category scheme="/" term="angularjs" /><category scheme="/" term="history" /><category scheme="/" term="knockout" /><category scheme="/" term="routing" /><category scheme="/" term="spa" />		<summary type="html"><![CDATA[I'm reviewing Angular and Knockout to determine which would fit better for a variety of upcoming projects. Let's talk Single Page applications, and more specifically, Routing and History. While AngularJS doesn't have the word "SPA" on their front page, the tutorial jumps straight into building one. How hard is it to give Knockout the same routing capability? Does it end up worse?]]></summary>
		<content type="html" xml:base="/index.php/webdev/uidevelopment/angularjs-vs-knockout-spa-routing-history-8/"><![CDATA[<p>I&#8217;m reviewing Angular and Knockout to determine which would fit better for a variety of upcoming projects. Let&#8217;s talk Single Page applications, and more specifically, Routing and History. While AngularJS doesn&#8217;t have the word &#8220;SPA&#8221; on their front page, the tutorial jumps straight into building one. How hard is it to give Knockout the same routing capability? Does it end up worse? </p>
<div style="background-color: #eeeeee; padding: 1em;">
This is the eighth of <del>eight</del> nine posts looking at the capabilities of knockout and Angular. In the <a href="/index.php/WebDev/UIDevelopment/angularjs-vs-knockout-introduction-1" title="AngularJS vs Knockout - Introduction">introduction post</a>, I outlined the capabilities that I am evaluating for. In the <a href="/index.php/WebDev/UIDevelopment/angularjs-vs-knockout-automated-testing-7" title="AngularJS vs Knockout - Automated Testing">seventh post</a>, I looked at unit testing. This post explores routing and history.
</div>
<p>All of the examples presented throughout the series are available in the <a href="https://github.com/tarwn/AngularJS-vs-Knockout/" title="View all of the post examples on github">tarwn/AngularJS-vs-Knockout</a> repository on github.</p>
<h2>Routing in AngularJS</h2>
<p>Routing is built into AngularJS and is one of the 12 steps of the <a href="http://docs.angularjs.org/tutorial/step_07">AngularJS</a> Tutorial. The <a href="http://docs.angularjs.org/api/ngRoute.$route" title="AngularJS">$route</a> provider is used to define routes and watching the URL bar to capture and apply changes.</p>
<h3>Routing in AngularJS</h3>
<p>Full source available at <a href="https://github.com/tarwn/AngularJS-vs-Knockout/blob/master/Angular/Routing.html" title="View full example file on github">Angular/Routing.html</a>.</p>
<p>A basic use case for routing would be to provide a listing page where each item links to it&#8217;s own detail page. Our expectation would be that loading the page will show the list, that the detail pages will allow navigation back to the list page, and that putting a URL in for a details page directly will load that page properly.</p>
<p>For the example, we&#8217;ll need a list controller, details controller, and a listing service:</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="javascript"><thead><tr><td colspan="2"  class="head">Javascript</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
</pre></td><td class="de1"><pre class="de1">sampleApp.<span class="me1">service</span><span class="br0">&#40;</span><span class="st0">'ListOfStuffService'</span><span class="sy0">,</span> <span class="kw1">function</span> <span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; <span class="kw1">var</span> stuff <span class="sy0">=</span> <span class="br0">&#91;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#123;</span> id<span class="sy0">:</span> <span class="nu0">1</span><span class="sy0">,</span> name<span class="sy0">:</span> <span class="st0">&quot;First Item&quot;</span><span class="sy0">,</span> description<span class="sy0">:</span> <span class="st0">&quot;It's the first item, woohoo!&quot;</span> <span class="br0">&#125;</span><span class="sy0">,</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#123;</span> id<span class="sy0">:</span> <span class="nu0">2</span><span class="sy0">,</span> name<span class="sy0">:</span> <span class="st0">&quot;Second Item&quot;</span><span class="sy0">,</span> description<span class="sy0">:</span> <span class="st0">&quot;Numero Dos!&quot;</span> <span class="br0">&#125;</span><span class="sy0">,</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#123;</span> id<span class="sy0">:</span> <span class="nu0">3</span><span class="sy0">,</span> name<span class="sy0">:</span> <span class="st0">&quot;Third Item&quot;</span><span class="sy0">,</span> description<span class="sy0">:</span> <span class="st0">&quot;The third item, this one is always out of stock&quot;</span> <span class="br0">&#125;</span>
&nbsp; &nbsp; <span class="br0">&#93;</span><span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; <span class="kw1">return</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; getAll<span class="sy0">:</span> <span class="kw1">function</span> <span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">return</span> stuff<span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span><span class="sy0">,</span>
&nbsp; &nbsp; &nbsp; &nbsp; getById<span class="sy0">:</span> <span class="kw1">function</span> <span class="br0">&#40;</span>id<span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">for</span> <span class="br0">&#40;</span><span class="kw1">var</span> i <span class="kw1">in</span> stuff<span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">if</span> <span class="br0">&#40;</span>stuff<span class="br0">&#91;</span>i<span class="br0">&#93;</span>.<span class="me1">id</span> <span class="sy0">==</span> id<span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">return</span> stuff<span class="br0">&#91;</span>i<span class="br0">&#93;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp; &nbsp; <span class="br0">&#125;</span><span class="sy0">;</span>
<span class="br0">&#125;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
sampleApp.<span class="me1">controller</span><span class="br0">&#40;</span><span class="st0">'ListOfStuffController'</span><span class="sy0">,</span> <span class="br0">&#91;</span><span class="st0">'$scope'</span><span class="sy0">,</span> <span class="st0">'ListOfStuffService'</span><span class="sy0">,</span> <span class="kw1">function</span> <span class="br0">&#40;</span>$scope<span class="sy0">,</span> listService<span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; $scope.<span class="me1">test</span> <span class="sy0">=</span> <span class="nu0">5</span><span class="sy0">;</span>
&nbsp; &nbsp; $scope.<span class="me1">listOfItems</span> <span class="sy0">=</span> listService.<span class="me1">getAll</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; console.<span class="me1">log</span><span class="br0">&#40;</span>$scope.<span class="me1">listOfItems</span><span class="br0">&#41;</span><span class="sy0">;</span>
<span class="br0">&#125;</span><span class="br0">&#93;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
sampleApp.<span class="me1">controller</span><span class="br0">&#40;</span><span class="st0">'StuffDetailController'</span><span class="sy0">,</span> <span class="br0">&#91;</span><span class="st0">'$scope'</span><span class="sy0">,</span> <span class="st0">'$routeParams'</span><span class="sy0">,</span> <span class="st0">'ListOfStuffService'</span><span class="sy0">,</span> <span class="kw1">function</span> <span class="br0">&#40;</span>$scope<span class="sy0">,</span> routeParams<span class="sy0">,</span> listService<span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; $scope.<span class="me1">item</span> <span class="sy0">=</span> listService.<span class="me1">getById</span><span class="br0">&#40;</span>routeParams.<span class="me1">id</span><span class="br0">&#41;</span><span class="sy0">;</span>
<span class="br0">&#125;</span><span class="br0">&#93;</span><span class="br0">&#41;</span><span class="sy0">;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">sampleApp.service('ListOfStuffService', function () {
    var stuff = [
        { id: 1, name: "First Item", description: "It's the first item, woohoo!" },
        { id: 2, name: "Second Item", description: "Numero Dos!" },
        { id: 3, name: "Third Item", description: "The third item, this one is always out of stock" }
    ];

    return {
        getAll: function () {
            return stuff;
        },
        getById: function (id) {
            for (var i in stuff) {
                if (stuff[i].id == id)
                    return stuff[i];
            }
        }
    };
});

sampleApp.controller('ListOfStuffController', ['$scope', 'ListOfStuffService', function ($scope, listService) {
    $scope.test = 5;
    $scope.listOfItems = listService.getAll();
    console.log($scope.listOfItems);
}]);

sampleApp.controller('StuffDetailController', ['$scope', '$routeParams', 'ListOfStuffService', function ($scope, routeParams, listService) {
    $scope.item = listService.getById(routeParams.id);
}]);</pre></div></div>

<p>Implementing the routes is then pretty straightforward:</p>
<pre>sampleApp.config(['$routeProvider', function (routeProvider) {
    // unlike the documentation, I had to put quotes around my controllers - maybe they had global variables?

    routeProvider.when('/ListOfStuff', { templateUrl: 'partials/Routing/ListOfStuff.html', controller: 'ListOfStuffController' });

    routeProvider.when('/StuffDetail/:id', { templateUrl: 'partials/Routing/StuffDetail.html', controller: 'StuffDetailController' });

    routeProvider.otherwise({ redirectTo: '/ListOfStuff' });
}]);</pre>
<p>To translate, the URL <code class="codespan">routing.html#/ListOfStuff</code> will show us the ListOfStuff.html template, the URL <code class="codespan">routing.html#/StuffDetail/123</code> will show us the StuffDetail template and pass along a parameter named &#8220;id&#8221; with 123 in it, and if no route matches, redirect to the first one.</p>
<p>The HTML templates then look like this:</p>
<p><a href="https://github.com/tarwn/AngularJS-vs-Knockout/blob/master/Angular/partials/Routing/ListOfStuff.html">Angular/partials/Routing/ListOfStuff.html</a></p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="html4strict"><thead><tr><td colspan="2"  class="head">HTML</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
</pre></td><td class="de1"><pre class="de1"><span class="sc2">&lt;<span class="kw2">div</span>&gt;</span>
&nbsp; &nbsp; <span class="sc2">&lt;<span class="kw2">ul</span> ng-repeat<span class="sy0">=</span><span class="st0">&quot;item in listOfItems&quot;</span>&gt;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="sc2">&lt;<span class="kw2">li</span>&gt;&lt;<span class="kw2">a</span> <span class="kw3">href</span><span class="sy0">=</span><span class="st0">&quot;#/StuffDetail/{{ item.id }}&quot;</span>&gt;</span>{{ item.name }}<span class="sc2">&lt;<span class="sy0">/</span><span class="kw2">a</span>&gt;&lt;<span class="sy0">/</span><span class="kw2">li</span>&gt;</span>
&nbsp; &nbsp; <span class="sc2">&lt;<span class="sy0">/</span><span class="kw2">ul</span>&gt;</span>
<span class="sc2">&lt;<span class="sy0">/</span><span class="kw2">div</span>&gt;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">&lt;div&gt;
    &lt;ul ng-repeat="item in listOfItems"&gt;
        &lt;li&gt;&lt;a href="#/StuffDetail/{{ item.id }}"&gt;{{ item.name }}&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
&lt;/div&gt;</pre></div></div>

<p><a href="https://github.com/tarwn/AngularJS-vs-Knockout/blob/master/Angular/partials/Routing/StuffDetail.html">Angular/partials/Routing/StuffDetail.html</a></p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="html4strict"><thead><tr><td colspan="2"  class="head">HTML</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
</pre></td><td class="de1"><pre class="de1"><span class="sc2">&lt;<span class="kw2">div</span>&gt;</span>
&nbsp; &nbsp; <span class="sc2">&lt;<span class="kw2">a</span> <span class="kw3">href</span><span class="sy0">=</span><span class="st0">&quot;#/ListOfStuff&quot;</span>&gt;</span>Back to list<span class="sc2">&lt;<span class="sy0">/</span><span class="kw2">a</span>&gt;&lt;<span class="kw2">br</span> <span class="sy0">/</span>&gt;</span>
&nbsp; &nbsp; <span class="sc2">&lt;<span class="kw2">br</span> <span class="sy0">/</span>&gt;</span>
&nbsp; &nbsp; <span class="sc2">&lt;<span class="kw2">b</span>&gt;</span>Id:<span class="sc2">&lt;<span class="sy0">/</span><span class="kw2">b</span>&gt;</span> {{ item.id }}<span class="sc2">&lt;<span class="kw2">br</span> <span class="sy0">/</span>&gt;</span>
&nbsp; &nbsp; <span class="sc2">&lt;<span class="kw2">b</span>&gt;</span>Name:<span class="sc2">&lt;<span class="sy0">/</span><span class="kw2">b</span>&gt;</span> {{ item.name }}<span class="sc2">&lt;<span class="kw2">br</span> <span class="sy0">/</span>&gt;</span>
&nbsp; &nbsp; <span class="sc2">&lt;<span class="kw2">b</span>&gt;</span>Description:<span class="sc2">&lt;<span class="sy0">/</span><span class="kw2">b</span>&gt;</span> {{ item.description }}<span class="sc2">&lt;<span class="kw2">br</span> <span class="sy0">/</span>&gt;</span>
<span class="sc2">&lt;<span class="sy0">/</span><span class="kw2">div</span>&gt;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">&lt;div&gt;
    &lt;a href="#/ListOfStuff"&gt;Back to list&lt;/a&gt;&lt;br /&gt;
    &lt;br /&gt;
    &lt;b&gt;Id:&lt;/b&gt; {{ item.id }}&lt;br /&gt;
    &lt;b&gt;Name:&lt;/b&gt; {{ item.name }}&lt;br /&gt;
    &lt;b&gt;Description:&lt;/b&gt; {{ item.description }}&lt;br /&gt;
&lt;/div&gt;</pre></div></div>

<p>In contrast to some of the other AngularJS examples in earlier posts, this one just worked. I didn&#8217;t have to worry about how to make hash URLs work, detecting changes and writing code to parse the URLs, or anything, just a few simple, direct rules and a controller and template for each one. </p>
<h2>Routing in &#8230; Knockout?</h2>
<p>Well, crap. Up until now there has been some clear, obvious answers when I needed to pull in an extra library for Knockout. When it comes to routing and SPA-like behavior, the two answers I see the most frequently are <a href="http://durandaljs.com/">Durandal</a> (see Avi, I spelled it right that time) and <a href="http://sammyjs.org/">Sammy.js</a>. Knockout has dynamic template bindings, so for this post maybe Sammy will be enough? And why get locked in, let&#8217;s pick a few others at random and do them too. So here we go.</p>
<p>In all of these examples, we will need a ListOfStuffService, a ListOfStuffViewModel, a StuffDetailViewModel, and an overall viewmodel to represent the page and have these viewmodels (and their associated template) assigned to it. To reduce the amount of necessary example code, I&#8217;ve assigned the template names to the viewmodels.</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="javascript"><thead><tr><td colspan="2"  class="head">Javascript</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
</pre></td><td class="de1"><pre class="de1"><span class="co1">// basic fake service with a GetAll and GetById call</span>
define<span class="br0">&#40;</span><span class="st0">&quot;ListOfStuffService&quot;</span><span class="sy0">,</span> <span class="kw1">function</span> <span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; <span class="kw1">var</span> stuff <span class="sy0">=</span> <span class="br0">&#91;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#123;</span> id<span class="sy0">:</span> <span class="nu0">1</span><span class="sy0">,</span> name<span class="sy0">:</span> <span class="st0">&quot;First Item&quot;</span><span class="sy0">,</span> description<span class="sy0">:</span> <span class="st0">&quot;It's the first item, woohoo!&quot;</span> <span class="br0">&#125;</span><span class="sy0">,</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#123;</span> id<span class="sy0">:</span> <span class="nu0">2</span><span class="sy0">,</span> name<span class="sy0">:</span> <span class="st0">&quot;Second Item&quot;</span><span class="sy0">,</span> description<span class="sy0">:</span> <span class="st0">&quot;Numero Dos!&quot;</span> <span class="br0">&#125;</span><span class="sy0">,</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#123;</span> id<span class="sy0">:</span> <span class="nu0">3</span><span class="sy0">,</span> name<span class="sy0">:</span> <span class="st0">&quot;Third Item&quot;</span><span class="sy0">,</span> description<span class="sy0">:</span> <span class="st0">&quot;The third item, this one is always out of stock&quot;</span> <span class="br0">&#125;</span>
&nbsp; &nbsp; <span class="br0">&#93;</span><span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; <span class="kw1">return</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; getAll<span class="sy0">:</span> <span class="kw1">function</span> <span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">return</span> stuff<span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span><span class="sy0">,</span>
&nbsp; &nbsp; &nbsp; &nbsp; getById<span class="sy0">:</span> <span class="kw1">function</span> <span class="br0">&#40;</span>id<span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">for</span> <span class="br0">&#40;</span><span class="kw1">var</span> i <span class="kw1">in</span> stuff<span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">if</span> <span class="br0">&#40;</span>stuff<span class="br0">&#91;</span>i<span class="br0">&#93;</span>.<span class="me1">id</span> <span class="sy0">==</span> id<span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">return</span> stuff<span class="br0">&#91;</span>i<span class="br0">&#93;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp; &nbsp; <span class="br0">&#125;</span><span class="sy0">;</span>
<span class="br0">&#125;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
<span class="co1">// and a module that has a controller that depends on the ListOfItemsService</span>
define<span class="br0">&#40;</span><span class="st0">&quot;ko-app&quot;</span><span class="sy0">,</span>
&nbsp; &nbsp; <span class="br0">&#91;</span><span class="st0">&quot;knockout&quot;</span><span class="br0">&#93;</span><span class="sy0">,</span>
&nbsp; &nbsp; <span class="kw1">function</span> <span class="br0">&#40;</span>ko<span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">return</span> <span class="kw1">function</span> <span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">this</span>.<span class="me1">viewmodel</span> <span class="sy0">=</span> ko.<span class="me1">observable</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp; &nbsp; <span class="br0">&#125;</span>
<span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
<span class="co1">// and a module that has a controller that depends on the ListOfItemsService</span>
define<span class="br0">&#40;</span><span class="st0">&quot;ListOfStuffViewModel&quot;</span><span class="sy0">,</span>
&nbsp; &nbsp; <span class="br0">&#91;</span><span class="st0">&quot;knockout&quot;</span><span class="sy0">,</span> <span class="st0">&quot;ListOfStuffService&quot;</span><span class="br0">&#93;</span><span class="sy0">,</span>
&nbsp; &nbsp; <span class="kw1">function</span> <span class="br0">&#40;</span>ko<span class="sy0">,</span> listOfItemsService<span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">return</span> <span class="kw1">function</span> <span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">this</span>.<span class="me1">template</span> <span class="sy0">=</span> <span class="st0">&quot;ListOfStuffViewModel&quot;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">var</span> items <span class="sy0">=</span> listOfItemsService.<span class="me1">getAll</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">this</span>.<span class="me1">listOfItems</span> <span class="sy0">=</span> ko.<span class="me1">observableArray</span><span class="br0">&#40;</span>items<span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp; &nbsp; <span class="br0">&#125;</span>
<span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
<span class="co1">// and a module that has a controller that depends on the ListOfItemsService</span>
define<span class="br0">&#40;</span><span class="st0">&quot;StuffDetailViewModel&quot;</span><span class="sy0">,</span>
&nbsp; &nbsp; <span class="br0">&#91;</span><span class="st0">&quot;knockout&quot;</span><span class="sy0">,</span> <span class="st0">&quot;ListOfStuffService&quot;</span><span class="br0">&#93;</span><span class="sy0">,</span>
&nbsp; &nbsp; <span class="kw1">function</span> <span class="br0">&#40;</span>ko<span class="sy0">,</span> listOfItemsService<span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">return</span> <span class="kw1">function</span> <span class="br0">&#40;</span>id<span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">this</span>.<span class="me1">template</span> <span class="sy0">=</span> <span class="st0">&quot;StuffDetailViewModel&quot;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">var</span> item <span class="sy0">=</span> listOfItemsService.<span class="me1">getById</span><span class="br0">&#40;</span>id<span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">this</span>.<span class="me1">item</span> <span class="sy0">=</span> ko.<span class="me1">observable</span><span class="br0">&#40;</span>item<span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp; &nbsp; <span class="br0">&#125;</span>
<span class="br0">&#41;</span><span class="sy0">;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">// basic fake service with a GetAll and GetById call
define("ListOfStuffService", function () {
    var stuff = [
                { id: 1, name: "First Item", description: "It's the first item, woohoo!" },
                { id: 2, name: "Second Item", description: "Numero Dos!" },
                { id: 3, name: "Third Item", description: "The third item, this one is always out of stock" }
    ];

    return {
        getAll: function () {
            return stuff;
        },
        getById: function (id) {
            for (var i in stuff) {
                if (stuff[i].id == id)
                    return stuff[i];
            }
        }
    };
});

// and a module that has a controller that depends on the ListOfItemsService
define("ko-app",
    ["knockout"],
    function (ko) {
        return function () {
            this.viewmodel = ko.observable();
        }
    }
);

// and a module that has a controller that depends on the ListOfItemsService
define("ListOfStuffViewModel",
    ["knockout", "ListOfStuffService"],
    function (ko, listOfItemsService) {
        return function () {
            this.template = "ListOfStuffViewModel";
            var items = listOfItemsService.getAll();
            this.listOfItems = ko.observableArray(items);
        }
    }
);

// and a module that has a controller that depends on the ListOfItemsService
define("StuffDetailViewModel",
    ["knockout", "ListOfStuffService"],
    function (ko, listOfItemsService) {
        return function (id) {
            this.template = "StuffDetailViewModel";
            var item = listOfItemsService.getById(id);
            this.item = ko.observable(item);
        }
    }
);</pre></div></div>

<p>And the HTML for the page and the viewmodels looks like this:</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="html4strict"><thead><tr><td colspan="2"  class="head">HTML</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
</pre></td><td class="de1"><pre class="de1"><span class="sc2">&lt;<span class="kw2">body</span>&gt;</span>
<span class="sc-1">&lt;!-- ko if: viewmodel() --&gt;</span>
<span class="sc2">&lt;<span class="kw2">div</span> data-bind<span class="sy0">=</span><span class="st0">&quot;template: { name: viewmodel().template, data: viewmodel }&quot;</span>&gt;</span>
<span class="sc2">&lt;<span class="sy0">/</span><span class="kw2">div</span>&gt;</span>
<span class="sc-1">&lt;!-- /ko --&gt;</span>
&nbsp;
<span class="sc-1">&lt;!-- ... --&gt;</span>
&nbsp;
<span class="sc2">&lt;<span class="kw2">script</span> <span class="kw3">type</span><span class="sy0">=</span><span class="st0">&quot;text/html&quot;</span> <span class="kw3">id</span><span class="sy0">=</span><span class="st0">&quot;ListOfStuffViewModel&quot;</span>&gt;</span>
&nbsp; &nbsp; <span class="sc2">&lt;<span class="kw2">ul</span> data-bind<span class="sy0">=</span><span class="st0">&quot;foreach: listOfItems&quot;</span>&gt;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="sc2">&lt;<span class="kw2">li</span>&gt;&lt;<span class="kw2">a</span> data-bind<span class="sy0">=</span><span class="st0">&quot;attr: { href: '#/StuffDetail/' + id }, text: name&quot;</span>&gt;&lt;<span class="sy0">/</span><span class="kw2">a</span>&gt;&lt;<span class="sy0">/</span><span class="kw2">li</span>&gt;</span>
&nbsp; &nbsp; <span class="sc2">&lt;<span class="sy0">/</span><span class="kw2">ul</span>&gt;</span>
<span class="sc2">&lt;<span class="sy0">/</span><span class="kw2">script</span>&gt;</span>
<span class="sc2">&lt;<span class="kw2">script</span> <span class="kw3">type</span><span class="sy0">=</span><span class="st0">&quot;text/html&quot;</span> <span class="kw3">id</span><span class="sy0">=</span><span class="st0">&quot;StuffDetailViewModel&quot;</span>&gt;</span>
&nbsp; &nbsp; <span class="sc2">&lt;<span class="kw2">div</span>&gt;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="sc2">&lt;<span class="kw2">a</span> <span class="kw3">href</span><span class="sy0">=</span><span class="st0">&quot;#/ListOfStuff&quot;</span>&gt;</span>Back to list<span class="sc2">&lt;<span class="sy0">/</span><span class="kw2">a</span>&gt;&lt;<span class="kw2">br</span> <span class="sy0">/</span>&gt;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="sc2">&lt;<span class="kw2">br</span> <span class="sy0">/</span>&gt;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="sc2">&lt;<span class="kw2">b</span>&gt;</span>Id:<span class="sc2">&lt;<span class="sy0">/</span><span class="kw2">b</span>&gt;</span> <span class="sc2">&lt;<span class="kw2">span</span> data-bind<span class="sy0">=</span><span class="st0">&quot;text: item().id&quot;</span>&gt;&lt;<span class="sy0">/</span><span class="kw2">span</span>&gt;&lt;<span class="kw2">br</span> <span class="sy0">/</span>&gt;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="sc2">&lt;<span class="kw2">b</span>&gt;</span>Name:<span class="sc2">&lt;<span class="sy0">/</span><span class="kw2">b</span>&gt;</span> <span class="sc2">&lt;<span class="kw2">span</span> data-bind<span class="sy0">=</span><span class="st0">&quot;text: item().name&quot;</span>&gt;&lt;<span class="sy0">/</span><span class="kw2">span</span>&gt;&lt;<span class="kw2">br</span> <span class="sy0">/</span>&gt;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="sc2">&lt;<span class="kw2">b</span>&gt;</span>Description:<span class="sc2">&lt;<span class="sy0">/</span><span class="kw2">b</span>&gt;</span> <span class="sc2">&lt;<span class="kw2">span</span> data-bind<span class="sy0">=</span><span class="st0">&quot;text: item().description&quot;</span>&gt;&lt;<span class="sy0">/</span><span class="kw2">span</span>&gt;&lt;<span class="kw2">br</span> <span class="sy0">/</span>&gt;</span>
&nbsp; &nbsp; <span class="sc2">&lt;<span class="sy0">/</span><span class="kw2">div</span>&gt;</span>
<span class="sc2">&lt;<span class="sy0">/</span><span class="kw2">script</span>&gt;</span>
<span class="sc2">&lt;<span class="sy0">/</span><span class="kw2">body</span>&gt;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">&lt;body&gt;
&lt;!-- ko if: viewmodel() --&gt;
&lt;div data-bind="template: { name: viewmodel().template, data: viewmodel }"&gt;
&lt;/div&gt;
&lt;!-- /ko --&gt;

&lt;!-- ... --&gt;

&lt;script type="text/html" id="ListOfStuffViewModel"&gt;
    &lt;ul data-bind="foreach: listOfItems"&gt;
        &lt;li&gt;&lt;a data-bind="attr: { href: '#/StuffDetail/' + id }, text: name"&gt;&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
&lt;/script&gt;
&lt;script type="text/html" id="StuffDetailViewModel"&gt;
    &lt;div&gt;
        &lt;a href="#/ListOfStuff"&gt;Back to list&lt;/a&gt;&lt;br /&gt;
        &lt;br /&gt;
        &lt;b&gt;Id:&lt;/b&gt; &lt;span data-bind="text: item().id"&gt;&lt;/span&gt;&lt;br /&gt;
        &lt;b&gt;Name:&lt;/b&gt; &lt;span data-bind="text: item().name"&gt;&lt;/span&gt;&lt;br /&gt;
        &lt;b&gt;Description:&lt;/b&gt; &lt;span data-bind="text: item().description"&gt;&lt;/span&gt;&lt;br /&gt;
    &lt;/div&gt;
&lt;/script&gt;
&lt;/body&gt;</pre></div></div>

<p>So far, the only major addition over the Angular example above is that outer viewmodel and the HTML to conditionally render it above. That &#8220;if&#8221; binding means that Knockout will not evaluate/display that area&#8217;s contents when the bound value is falsey. </p>
<p>I&#8217;ve made the examples slightly more complex than they needed to be because I&#8217;m still using <a href="http://requirejs.org/">RequireJS</a> throughout them. This wasn&#8217;t necessary and probably serves as a little extra noise, but oh well.</p>
<h3>Knockout Routing w/ Sammy.js</h3>
<p>Full source available at <a href="https://github.com/tarwn/AngularJS-vs-Knockout/blob/master/Knockout/Routing.html" title="View full example file on github">Knockout/Routing.html</a>.</p>
<p>So we have our viewmodels, we have a bare app viewmodel they will get socketed into, and we have HTML templates. Let&#8217;s define the routes using the <a href="http://sammyjs.org/">Sammy.js</a> library:</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="javascript"><thead><tr><td colspan="2"  class="head">Javascript</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
</pre></td><td class="de1"><pre class="de1"><span class="co1">// define route and outer ko viewmodel</span>
require<span class="br0">&#40;</span><span class="br0">&#91;</span><span class="st0">'knockout'</span><span class="sy0">,</span> <span class="st0">'ko-app'</span><span class="sy0">,</span> <span class="st0">'sammy'</span><span class="br0">&#93;</span><span class="sy0">,</span> <span class="kw1">function</span> <span class="br0">&#40;</span>ko<span class="sy0">,</span> AppViewModel<span class="sy0">,</span> sammy<span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; <span class="kw1">var</span> app <span class="sy0">=</span> <span class="kw1">new</span> AppViewModel<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; ko.<span class="me1">applyBindings</span><span class="br0">&#40;</span>app<span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; <span class="kw1">var</span> routing <span class="sy0">=</span> sammy<span class="br0">&#40;</span><span class="kw1">function</span> <span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">this</span>.<span class="kw1">get</span><span class="br0">&#40;</span><span class="st0">'#/ListOfStuff'</span><span class="sy0">,</span> <span class="kw1">function</span> <span class="br0">&#40;</span>context<span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; require<span class="br0">&#40;</span><span class="br0">&#91;</span><span class="st0">'ListOfStuffViewModel'</span><span class="br0">&#93;</span><span class="sy0">,</span> <span class="kw1">function</span> <span class="br0">&#40;</span>ViewModel<span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; app.<span class="me1">viewmodel</span><span class="br0">&#40;</span><span class="kw1">new</span> ViewModel<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">this</span>.<span class="kw1">get</span><span class="br0">&#40;</span><span class="st0">'#/StuffDetail/:id'</span><span class="sy0">,</span> <span class="kw1">function</span> <span class="br0">&#40;</span>context<span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">var</span> id <span class="sy0">=</span> <span class="kw1">this</span>.<span class="me1">params</span><span class="br0">&#91;</span><span class="st0">'id'</span><span class="br0">&#93;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; require<span class="br0">&#40;</span><span class="br0">&#91;</span><span class="st0">'StuffDetailViewModel'</span><span class="br0">&#93;</span><span class="sy0">,</span> <span class="kw1">function</span> <span class="br0">&#40;</span>ViewModel<span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; app.<span class="me1">viewmodel</span><span class="br0">&#40;</span><span class="kw1">new</span> ViewModel<span class="br0">&#40;</span>id<span class="br0">&#41;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">var</span> self <span class="sy0">=</span> <span class="kw1">this</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">this</span>.<span class="kw1">get</span><span class="br0">&#40;</span><span class="st0">''</span><span class="sy0">,</span> <span class="kw1">function</span> <span class="br0">&#40;</span>context<span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; self.<span class="me1">runRoute</span><span class="br0">&#40;</span><span class="st0">'get'</span><span class="sy0">,</span> <span class="st0">'#/ListOfStuff'</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; <span class="br0">&#125;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; routing.<span class="me1">run</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
<span class="br0">&#125;</span><span class="br0">&#41;</span><span class="sy0">;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">// define route and outer ko viewmodel
require(['knockout', 'ko-app', 'sammy'], function (ko, AppViewModel, sammy) {
    var app = new AppViewModel();
    ko.applyBindings(app);

    var routing = sammy(function () {

        this.get('#/ListOfStuff', function (context) {
            require(['ListOfStuffViewModel'], function (ViewModel) {
                app.viewmodel(new ViewModel());
            });
        });

        this.get('#/StuffDetail/:id', function (context) {
            var id = this.params['id'];
            require(['StuffDetailViewModel'], function (ViewModel) {
                app.viewmodel(new ViewModel(id));
            });
        });

        var self = this;
        this.get('', function (context) {
            self.runRoute('get', '#/ListOfStuff');
        });

    });
    routing.run();
});</pre></div></div>

<p>Using the Sammy library, I&#8217;ve defined the same three cases I had in Angular. Each route has a callback that it calls when the route is matched, which I used to create the appropriate ViewModel and assign it to my main &#8220;app&#8221; viewmodel, causing the template to be changed. If the empty route is matched, I explicitly run the ListOfStuff route.</p>
<h3>Knockout Routing w/ Finch.js</h3>
<p>Full source available at <a href="https://github.com/tarwn/AngularJS-vs-Knockout/blob/master/Knockout/Routing.FinchJS.html" title="View full example file on github">Knockout/Routing.FinchJS.html</a>.</p>
<p>The tagline for <a href="http://stoodder.github.io/finchjs/">FinchJS</a> is &#8220;Powerfully Simple Javascript Routing&#8221;, and I have to agree that the library meets expectations. Implementing the same routes as the last two exmaples:</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="javascript"><thead><tr><td colspan="2"  class="head">Javascript</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
</pre></td><td class="de1"><pre class="de1"><span class="co1">// define route and outer ko viewmodel</span>
require<span class="br0">&#40;</span><span class="br0">&#91;</span><span class="st0">'knockout'</span><span class="sy0">,</span> <span class="st0">'mainApp'</span><span class="sy0">,</span> <span class="st0">'finch'</span><span class="br0">&#93;</span><span class="sy0">,</span> <span class="kw1">function</span> <span class="br0">&#40;</span>ko<span class="sy0">,</span> AppViewModel<span class="sy0">,</span> finch<span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; <span class="kw1">var</span> app <span class="sy0">=</span> <span class="kw1">new</span> AppViewModel<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; finch.<span class="me1">route</span><span class="br0">&#40;</span><span class="st0">&quot;/&quot;</span><span class="sy0">,</span> <span class="kw1">function</span> <span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; finch.<span class="me1">call</span><span class="br0">&#40;</span><span class="st0">&quot;/ListOfStuff&quot;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; <span class="br0">&#125;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; finch.<span class="me1">route</span><span class="br0">&#40;</span><span class="st0">&quot;/ListOfStuff&quot;</span><span class="sy0">,</span> <span class="kw1">function</span> <span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; require<span class="br0">&#40;</span><span class="br0">&#91;</span><span class="st0">'ListOfStuffViewModel'</span><span class="br0">&#93;</span><span class="sy0">,</span> <span class="kw1">function</span> <span class="br0">&#40;</span>ViewModel<span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; app.<span class="me1">viewmodel</span><span class="br0">&#40;</span><span class="kw1">new</span> ViewModel<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; <span class="br0">&#125;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; finch.<span class="me1">route</span><span class="br0">&#40;</span><span class="st0">&quot;/StuffDetail/:id&quot;</span><span class="sy0">,</span> <span class="kw1">function</span> <span class="br0">&#40;</span>bindings<span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; require<span class="br0">&#40;</span><span class="br0">&#91;</span><span class="st0">'StuffDetailViewModel'</span><span class="br0">&#93;</span><span class="sy0">,</span> <span class="kw1">function</span> <span class="br0">&#40;</span>ViewModel<span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; app.<span class="me1">viewmodel</span><span class="br0">&#40;</span><span class="kw1">new</span> ViewModel<span class="br0">&#40;</span>bindings.<span class="me1">id</span><span class="br0">&#41;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; <span class="br0">&#125;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; ko.<span class="me1">applyBindings</span><span class="br0">&#40;</span>app<span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; finch.<span class="me1">listen</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
<span class="br0">&#125;</span><span class="br0">&#41;</span><span class="sy0">;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">// define route and outer ko viewmodel
require(['knockout', 'mainApp', 'finch'], function (ko, AppViewModel, finch) {
    var app = new AppViewModel();

    finch.route("/", function () {
        finch.call("/ListOfStuff");
    });

    finch.route("/ListOfStuff", function () {
        require(['ListOfStuffViewModel'], function (ViewModel) {
            app.viewmodel(new ViewModel());
        });
    });

    finch.route("/StuffDetail/:id", function (bindings) {
        require(['StuffDetailViewModel'], function (ViewModel) {
            app.viewmodel(new ViewModel(bindings.id));
        });
    });

    ko.applyBindings(app);
    finch.listen();
});</pre></div></div>

<p>The route logic looks almost the same as Sammy.js, proving that I probably picked too easy of an example for this post. </p>
<h3>Knockout Routing w/ flatiron director</h3>
<p>Full source available at <a href="https://github.com/tarwn/AngularJS-vs-Knockout/blob/master/Knockout/Routing.Director.html" title="View full example file on github">Knockout/Routing.Director.html</a>.</p>
<p>One of the key goals for the <a href="">flatiron director</a> library is to work as seamlessly as possible in both the node.js and browser environments. director has HTML5 History API support, but I&#8217;ve configured it off for this example to match the others:</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="javascript"><thead><tr><td colspan="2"  class="head">Javascript</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
</pre></td><td class="de1"><pre class="de1">require<span class="br0">&#40;</span><span class="br0">&#91;</span><span class="st0">'knockout'</span><span class="sy0">,</span> <span class="st0">'mainApp'</span><span class="sy0">,</span> <span class="st0">'director'</span><span class="br0">&#93;</span><span class="sy0">,</span> <span class="kw1">function</span> <span class="br0">&#40;</span>ko<span class="sy0">,</span> AppViewModel<span class="sy0">,</span> director<span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; <span class="kw1">var</span> app <span class="sy0">=</span> <span class="kw1">new</span> AppViewModel<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; <span class="kw1">var</span> routes <span class="sy0">=</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="st0">'/ListOfStuff'</span><span class="sy0">:</span> <span class="kw1">function</span> <span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; require<span class="br0">&#40;</span><span class="br0">&#91;</span><span class="st0">'ListOfStuffViewModel'</span><span class="br0">&#93;</span><span class="sy0">,</span> <span class="kw1">function</span> <span class="br0">&#40;</span>ViewModel<span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; app.<span class="me1">viewmodel</span><span class="br0">&#40;</span><span class="kw1">new</span> ViewModel<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span><span class="br0">&#41;</span><span class="br0">&#125;</span><span class="sy0">,</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="st0">'/StuffDetail/:id'</span><span class="sy0">:</span> <span class="kw1">function</span> <span class="br0">&#40;</span>id<span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; require<span class="br0">&#40;</span><span class="br0">&#91;</span><span class="st0">'StuffDetailViewModel'</span><span class="br0">&#93;</span><span class="sy0">,</span> <span class="kw1">function</span> <span class="br0">&#40;</span>ViewModel<span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; app.<span class="me1">viewmodel</span><span class="br0">&#40;</span><span class="kw1">new</span> ViewModel<span class="br0">&#40;</span>id<span class="br0">&#41;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span><span class="br0">&#41;</span><span class="br0">&#125;</span>
&nbsp; &nbsp; <span class="br0">&#125;</span><span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; ko.<span class="me1">applyBindings</span><span class="br0">&#40;</span>app<span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; <span class="kw1">var</span> router <span class="sy0">=</span> director<span class="br0">&#40;</span>routes<span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; router.<span class="me1">init</span><span class="br0">&#40;</span><span class="st0">'/ListOfStuff'</span><span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; .<span class="me1">configure</span><span class="br0">&#40;</span><span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; html5history<span class="sy0">:</span> <span class="kw2">false</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span><span class="br0">&#41;</span><span class="sy0">;</span>
<span class="br0">&#125;</span><span class="br0">&#41;</span><span class="sy0">;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">require(['knockout', 'mainApp', 'director'], function (ko, AppViewModel, director) {
    var app = new AppViewModel();

    var routes = {
        '/ListOfStuff': function () {
                            require(['ListOfStuffViewModel'], function (ViewModel) {
                                app.viewmodel(new ViewModel());
                            })},
        '/StuffDetail/:id': function (id) {
                            require(['StuffDetailViewModel'], function (ViewModel) {
                                app.viewmodel(new ViewModel(id));
                            })}
    };

    ko.applyBindings(app);
    var router = director(routes);
    router.init('/ListOfStuff')
            .configure({
                html5history: false
            });
});</pre></div></div>

<p>In this case, the routes are defined as an array and I only define the two real routes. Once I&#8217;ve applied my bindings, I start up the routing by calling init with the default URL to use if there isn&#8217;t a hash address in the path.</p>
<p>This example does have an error, in that it doesn&#8217;t actually work if I load a hashed address from scratch. All three other examples work fine, so I suspect it&#8217;s something I&#8217;ve done wrong.</p>
<h2>Some Differences</h2>
<p>Angular&#8217;s injection kept the routing cleaner for that example, but really the biggest issue is that I didn&#8217;t pick a complex enough example. All of the methods I tried were easy to implement. </p>
<p><b>Templating</b></p>
<p>Angular&#8217;s routing automatically uses templating, whereas the others are using Knockout and using the standard templating that is built into knockout. Although, like so much of the rest of this series, composing external templates onto the knockout side is just a library away, in this case the <a href="https://github.com/ifandelse/Knockout.js-External-Template-Engine">Knockout.js External Template Engine</a>.</p>
<p>I put together a copy of the Finch example above with external templating here: <a href="https://github.com/tarwn/AngularJS-vs-Knockout/blob/master/Knockout/Routing.FinchJS.ExtTemplates.html" title="View full example file on github">Knockout/Routing.FinchJS.ExtTemplates.html</a></p>
<p><b>The Details</b><br />
As I mentioned above, all of these examples were really easy to put together, so I don&#8217;t think I really exercised the libraries to show off their differences. That being said, which package you choose (I&#8217;ve had people suggest I use custom routing for Angular, even) is probably going to depend on those details and which flavor makes the most sense for your scenario. </p>
<h2>Final Thoughts</h2>
<p>Man that was easy.There are a ton of good routing libraries out there and it seems like even if you made the wrong decision when you picked one, it would be relatively easy to switch to a different one later. I personally liked Finch.js the best, but if I was using AngularJS I&#8217;d probably ride the default library as long as I could (and may never have a reason to change).</p>
<p>Using the dynamic template to change &#8220;pages&#8221; was also easy. I banged on the links a while and Chrome said I was using a lot of memory, but as soon as I let the GC clean up, it all cleared up. Banging on AngularJS also used memory, but it had GC&#8217;s occurring along the way too, so I suspect if I were to use the knockout &#8216;sorta-SPA&#8217; viewmodel in a production environment, I would actually want to use a method that delete()-ed the oold model as the new one was assigned.</p>
<h2>Post 8 of <del>8</del> 9</h2>
<p>I&#8217;ll be posting one last post for this series that is a round up of all the comparisons and feelings I had throughout the series, my opinion on which framework I would use, and a list of things I should have also looked at in the series. Keep an eye out on LessThanDot (and twitter, google plus, etc) for that post.</p>
<div style="background-color: #DDDDDD; padding: 8px; width: 400px;">
<h3>Knockout vs AngularJS</h3>
<ul style="margin: 0px; padding: 4px;">
<li><a href="/index.php/WebDev/UIDevelopment/angularjs-vs-knockout-introduction-1">Introductory Post</a></li>
<li><a href="/index.php/WebDev/UIDevelopment/angularjs-vs-knockout-data-binding-2">Data Binding</a></li>
<li><a href="/index.php/WebDev/UIDevelopment/angularjs-vs-knockout-validation-3">Validation</a></li>
<li><a href="/index.php/WebDev/UIDevelopment/angularjs-vs-knockout-serialization-4">Serialization</a></li>
<li><a href="/index.php/WebDev/UIDevelopment/angularjs-vs-knockout-templating-5">Templating</a></li>
<li><a href="/index.php/WebDev/UIDevelopment/angularjs-vs-knockout-modules-and-di-6">Modules + Dependency Injection</a></li>
<li><a href="/index.php/WebDev/UIDevelopment/angularjs-vs-knockout-automated-testing-7">Automated Testing</a></li>
<li><a href="/index.php/WebDev/UIDevelopment/AJAX/angularjs-vs-knockout-spa-routing-history-8">SPA Routing/History</a></li>
<li><a href="/index.php/WebDev/UIDevelopment/angularjs-vs-knockout-final-thoughts-9">Final, Final Thoughts</a></li>
</ul>
</div>
]]></content>
			<link rel="replies" type="text/html" href="/index.php/webdev/uidevelopment/angularjs-vs-knockout-spa-routing-history-8/#comments" thr:count="5"/>
		<link rel="replies" type="application/atom+xml" href="/index.php/webdev/uidevelopment/angularjs-vs-knockout-spa-routing-history-8/feed/atom/" thr:count="5"/>
		<thr:total>5</thr:total>
		</entry>
		<entry>
		<author>
			<name>Eli Weinstock-Herman (tarwn)</name>
					</author>
		<title type="html"><![CDATA[AngularJS vs Knockout &#8211; Automated Testing (7 of 8)]]></title>
		<link rel="alternate" type="text/html" href="/index.php/webdev/uidevelopment/angularjs-vs-knockout-automated-testing-7/" />
		<id>/index.php/2013/10/angularjs-vs-knockout-automated-testing-7/</id>
		<updated>2013-10-15T13:00:00Z</updated>
		<published>2013-10-15T13:00:00Z</published>
		<category scheme="/" term="Javascript" /><category scheme="/" term="UI Development" /><category scheme="/" term="angularjs" /><category scheme="/" term="jasmine" /><category scheme="/" term="knockout" /><category scheme="/" term="unit testing" /><category scheme="/" term="you better mock yourself" />		<summary type="html"><![CDATA[I'm reviewing Angular and Knockout to determine which would fit better for a variety of upcoming projects. As we get into projects that are larger than a few small views and routes, the ability to add automated testing becomes important.  Unit testing p&#8230;]]></summary>
		<content type="html" xml:base="/index.php/webdev/uidevelopment/angularjs-vs-knockout-automated-testing-7/"><![CDATA[<p>I&#8217;m reviewing Angular and Knockout to determine which would fit better for a variety of upcoming projects. As we get into projects that are larger than a few small views and routes, the ability to add automated testing becomes important.  Unit testing provides a safety net against future us screwing up the code that present us is writing, can be used before we write the code (TDD) or after, and helps us keep some of the complexity in check as the project size grows and ages. Let&#8217;s put AngularJS and Knockout under test.</p>
<div style="background-color: #eeeeee; padding: 1em;">
This is the seventh of eight posts looking at the capabilities of knockout and Angular. In the <a href="/index.php/WebDev/UIDevelopment/angularjs-vs-knockout-introduction-1" title="AngularJS vs Knockout - Introduction">introduction post</a>, I outlined the capabilities that I am evaluating for. In the <a href="/index.php/WebDev/UIDevelopment/angularjs-vs-knockout-modules-and-di-6" title="AngularJS vs Knockout - Modules and DI">sixth post</a>, I looked at Modules and Dependency injection, an important lead up to this post, which intends to jump into unit testing those modules.
</div>
<p>All of the examples presented throughout the series are available in the <a href="https://github.com/tarwn/AngularJS-vs-Knockout/" title="View all of the post examples on github">tarwn/AngularJS-vs-Knockout</a> repository on github.</p>
<p>In both sections I&#8217;ll be using <a href="http://pivotal.github.io/jasmine/">Jasmine 1.3.1</a>, the focus is on how the libraries are to test, so this will provide a somewhat level playing field. We&#8217;ll be testing the modules from the previous post, so I&#8217;ll also be including <a href="http://requirejs.org/">RequireJS</a> for the Knockout side of things, but skipping script.js and going with standard script tags for the Angular side (aka, being lazy). I&#8217;ll also be pulling in <a href="https://github.com/iammerrick/Squire.js/">Squire.js</a> and <a href="https://github.com/derickbailey/jasmine.async">Jasmine.Async</a> to add mocking for RequireJS and asynchronous shortcut methods for Jasmine, respectively.</p>
<p>Both sets of tests are tested from a single Jasmine testrunner, in the github repository: <a href="https://github.com/tarwn/AngularJS-vs-Knockout/blob/master/SpecRunner.html" title="View full example file on github">SpecRunner.html</a></p>
<h2>Unit Testing AngularJS</h2>
<p>Unit Testing is of huge importance to the AngularJS team, for which I can&#8217;t applaud them enough. It is constantly mentioned in documentation and tutorials and has resulted in the <a href="http://karma-runner.github.io/0.10/index.html">karma</a> test runner, a tool I&#8217;m impatient to start playing with but unfortunately have not yet had time for.</p>
<h3>AngularJS Modules Under Test</h3>
<p>In the <a href="/index.php/WebDev/UIDevelopment/angularjs-vs-knockout-modules-and-di-6">previous post</a>, we had sampleApp and sampleServices modules that we moved into external files, using script.js as an asynchronous module loader. Other than creating a copy of the files and putting them in a new folder (js/UnitTesting) specific to this post, no modifications have been made.</p>
<p>Relevant sections of <a href="https://github.com/tarwn/AngularJS-vs-Knockout/blob/master/SpecRunner.html" title="View full example file on github">SpecRunner.html</a></p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="html4strict"><thead><tr><td colspan="2"  class="head">HTML</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
</pre></td><td class="de1"><pre class="de1"><span class="sc2">&lt;<span class="kw2">html</span>&gt;</span>
<span class="sc2">&lt;<span class="kw2">head</span>&gt;</span>
&nbsp; &nbsp; <span class="sc-1">&lt;!-- ... --&gt;</span>
&nbsp;
&nbsp; &nbsp; <span class="sc-1">&lt;!-- Angular files libraries --&gt;</span>
&nbsp; &nbsp; <span class="sc2">&lt;<span class="kw2">script</span> <span class="kw3">src</span><span class="sy0">=</span><span class="st0">&quot;Angular/js/lib/angular-1.0.8.min.js&quot;</span>&gt;&lt;<span class="sy0">/</span><span class="kw2">script</span>&gt;</span>
&nbsp; &nbsp; <span class="sc2">&lt;<span class="kw2">script</span> <span class="kw3">src</span><span class="sy0">=</span><span class="st0">&quot;Angular/js/lib/angular-mocks.js&quot;</span>&gt;&lt;<span class="sy0">/</span><span class="kw2">script</span>&gt;</span>
&nbsp; &nbsp; <span class="sc-1">&lt;!-- Angular source files --&gt;</span>
&nbsp; &nbsp; <span class="sc2">&lt;<span class="kw2">script</span> <span class="kw3">src</span><span class="sy0">=</span><span class="st0">&quot;Angular/js/UnitTesting/sampleApp.js&quot;</span>&gt;&lt;<span class="sy0">/</span><span class="kw2">script</span>&gt;</span>
&nbsp; &nbsp; <span class="sc2">&lt;<span class="kw2">script</span> <span class="kw3">src</span><span class="sy0">=</span><span class="st0">&quot;Angular/js/UnitTesting/sampleServices.js&quot;</span>&gt;&lt;<span class="sy0">/</span><span class="kw2">script</span>&gt;</span>
&nbsp; &nbsp; <span class="sc-1">&lt;!-- Angular specs --&gt;</span>
&nbsp; &nbsp; <span class="sc2">&lt;<span class="kw2">script</span> <span class="kw3">src</span><span class="sy0">=</span><span class="st0">&quot;Angular/UnitTestingSpecs.js&quot;</span>&gt;&lt;<span class="sy0">/</span><span class="kw2">script</span>&gt;</span>
&nbsp;
&nbsp; &nbsp; <span class="sc-1">&lt;!-- ... --&gt;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">&lt;html&gt;
&lt;head&gt;
    &lt;!-- ... --&gt;

    &lt;!-- Angular files libraries --&gt;
    &lt;script src="Angular/js/lib/angular-1.0.8.min.js"&gt;&lt;/script&gt;
    &lt;script src="Angular/js/lib/angular-mocks.js"&gt;&lt;/script&gt;
    &lt;!-- Angular source files --&gt;
    &lt;script src="Angular/js/UnitTesting/sampleApp.js"&gt;&lt;/script&gt;
    &lt;script src="Angular/js/UnitTesting/sampleServices.js"&gt;&lt;/script&gt;
    &lt;!-- Angular specs --&gt;
    &lt;script src="Angular/UnitTestingSpecs.js"&gt;&lt;/script&gt;

    &lt;!-- ... --&gt;</pre></div></div>

<p>The specs file then handles mocking the service for the controller and defines the tests I want to run:</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="javascript"><thead><tr><td colspan="2"  class="head">Javascript</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
</pre></td><td class="de1"><pre class="de1"><span class="co1">// &nbsp;borrowed heavily from http://www.benlesh.com/2013/05/angularjs-unit-testing-controllers.html</span>
describe<span class="br0">&#40;</span><span class="st0">&quot;Angular&quot;</span><span class="sy0">,</span> <span class="kw1">function</span> <span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; describe<span class="br0">&#40;</span><span class="st0">&quot;Testing the ModuleDIController&quot;</span><span class="sy0">,</span> <span class="kw1">function</span> <span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">var</span> $scope <span class="sy0">=</span> <span class="kw2">null</span><span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">var</span> expectedServiceResponse <span class="sy0">=</span> <span class="br0">&#91;</span><span class="br0">&#123;</span> name<span class="sy0">:</span> <span class="st0">&quot;A&quot;</span><span class="sy0">,</span> number<span class="sy0">:</span> <span class="nu0">123</span> <span class="br0">&#125;</span><span class="br0">&#93;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">var</span> mockService <span class="sy0">=</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; getList<span class="sy0">:</span> <span class="kw1">function</span> <span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span> <span class="kw1">return</span> expectedServiceResponse<span class="sy0">;</span> <span class="br0">&#125;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span><span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; beforeEach<span class="br0">&#40;</span>module<span class="br0">&#40;</span><span class="st0">'sampleApp'</span><span class="br0">&#41;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; beforeEach<span class="br0">&#40;</span>inject<span class="br0">&#40;</span><span class="kw1">function</span> <span class="br0">&#40;</span>$rootScope<span class="sy0">,</span> $controller<span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; $scope <span class="sy0">=</span> $rootScope.$new<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; $controller<span class="br0">&#40;</span><span class="st0">'ModuleDIController'</span><span class="sy0">,</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; $scope<span class="sy0">:</span> $scope<span class="sy0">,</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ListOfItemsService<span class="sy0">:</span> mockService
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span><span class="br0">&#41;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; <span class="co1">// ... tests here ...</span>
&nbsp; &nbsp; <span class="br0">&#125;</span><span class="br0">&#41;</span><span class="sy0">;</span>
<span class="br0">&#125;</span><span class="br0">&#41;</span><span class="sy0">;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">//  borrowed heavily from http://www.benlesh.com/2013/05/angularjs-unit-testing-controllers.html
describe("Angular", function () {
    describe("Testing the ModuleDIController", function () {
        var $scope = null;

        var expectedServiceResponse = [{ name: "A", number: 123 }];
        var mockService = {
            getList: function () { return expectedServiceResponse; }
        };

        beforeEach(module('sampleApp'));
        beforeEach(inject(function ($rootScope, $controller) {
            $scope = $rootScope.$new();
            $controller('ModuleDIController', {
                $scope: $scope,
                ListOfItemsService: mockService
            });
        }));

        // ... tests here ...
    });
});</pre></div></div>

<p>If you&#8217;re going to work with AngularJS, read everything on <a href="http://www.benlesh.com/" title="Benjamin Lesh: Try, Catch, Fail">Ben Lesh&#8217;s</a> (<a href="https://twitter.com/BenLesh" title="@BenLesh on twitter">@BenLesh</a>) site. It helped me tremendously for both this post and the custom validation section of the validation post. </p>
<p>The spec file starts off by defining both a mock service and the expected response it is going to return. Before each test I load a fresh  sampleApp module, ensuring a clean starting point. Then I use <a href="http://docs.angularjs.org/api/angular.mock.inject" title="AngularJS: angular.mock.inject">inject</a> to create an $injector that will be used for resolving references in my tests, which resolves the ModuleDIController by passing in the provided scope and my mock service.<br />
That last part works, but honestly I only sort of understand what it&#8217;s doing. Even after several more readings of the pages on the injector and the mock.inject call, I&#8217;m still not 100% sure I grasp more than the basic operation.</p>
<p>The tests themselves are pretty straightforward at that point:</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="javascript"><thead><tr><td colspan="2"  class="head">Javascript</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
</pre></td><td class="de1"><pre class="de1">it<span class="br0">&#40;</span><span class="st0">'should start with an empty list of items'</span><span class="sy0">,</span> <span class="kw1">function</span> <span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; expect<span class="br0">&#40;</span>$scope.<span class="me1">listOfItems</span><span class="br0">&#41;</span>.<span class="me1">toEqual</span><span class="br0">&#40;</span><span class="br0">&#91;</span><span class="br0">&#93;</span><span class="br0">&#41;</span><span class="sy0">;</span>
<span class="br0">&#125;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
it<span class="br0">&#40;</span><span class="st0">'should populate list from service when fillItems() is called'</span><span class="sy0">,</span> <span class="kw1">function</span> <span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; $scope.<span class="me1">fillItems</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; expect<span class="br0">&#40;</span>$scope.<span class="me1">listOfItems</span><span class="br0">&#41;</span>.<span class="me1">toEqual</span><span class="br0">&#40;</span>expectedServiceResponse<span class="br0">&#41;</span><span class="sy0">;</span>
<span class="br0">&#125;</span><span class="br0">&#41;</span><span class="sy0">;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">it('should start with an empty list of items', function () {
    expect($scope.listOfItems).toEqual([]);
});

it('should populate list from service when fillItems() is called', function () {
    $scope.fillItems();
    expect($scope.listOfItems).toEqual(expectedServiceResponse);
});</pre></div></div>

<p>And there we have it, verification that our controller uses the service properly to fill it&#8217;s local collection.</p>
<p>This may not be that complicated a test, but once we have the basic components together, extending it to more complex cases is pretty straightforward.</p>
<h2>Unit Testing Knockout/RequireJS</h2>
<p>Unit testing modules defined with RequireJS is challenging. There are a couple libraries out there that people have built to inject mocks and the documentation is sparse for all the examples I found. I chose SquireJS due to having slightly more documentation than the others, but it still took a few iterations to get it working (then I lost those changes and had to redo them after not looking at the code for a couple weeks).</p>
<h3>Knockout/RequireJS Modules Under Test</h3>
<p>In the <a href="/index.php/WebDev/UIDevelopment/angularjs-vs-knockout-modules-and-di-6">previous post</a>, we had sampleApp/ModuleDIModel and sampleServices/ListOfItemsService modules being loaded by RequireJS. Like the AngularJS example, the only change I have made is to move a copy of these files into a folder specific for this post (js/UnitTesting).</p>
<p>Relevant sections of <a href="https://github.com/tarwn/AngularJS-vs-Knockout/blob/master/SpecRunner.html" title="View full example file on github">SpecRunner.html</a></p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="html4strict"><thead><tr><td colspan="2"  class="head">HTML</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
</pre></td><td class="de1"><pre class="de1"><span class="sc2">&lt;<span class="kw2">html</span>&gt;</span>
<span class="sc2">&lt;<span class="kw2">head</span>&gt;</span>
&nbsp; &nbsp; <span class="sc-1">&lt;!-- ... --&gt;</span>
&nbsp;
&nbsp; &nbsp; <span class="sc-1">&lt;!-- Knockout + RequireJS files --&gt;</span>
&nbsp; &nbsp; <span class="sc2">&lt;<span class="kw2">script</span> <span class="kw3">src</span><span class="sy0">=</span><span class="st0">&quot;Knockout/js/lib/knockout-2.3.0.min.js&quot;</span>&gt;&lt;<span class="sy0">/</span><span class="kw2">script</span>&gt;</span>
&nbsp; &nbsp; <span class="sc2">&lt;<span class="kw2">script</span> <span class="kw3">src</span><span class="sy0">=</span><span class="st0">&quot;Knockout/js/lib/require-2.1.8.min.js&quot;</span>&gt;&lt;<span class="sy0">/</span><span class="kw2">script</span>&gt;</span>
&nbsp; &nbsp; <span class="sc-1">&lt;!-- Knockout specs --&gt;</span> &nbsp; &nbsp;
&nbsp; &nbsp; <span class="sc2">&lt;<span class="kw2">script</span> <span class="kw3">src</span><span class="sy0">=</span><span class="st0">&quot;Knockout/UnitTestingSpecs.js&quot;</span>&gt;&lt;<span class="sy0">/</span><span class="kw2">script</span>&gt;</span>
&nbsp;
&nbsp; &nbsp; <span class="sc-1">&lt;!-- ... --&gt;</span>
&nbsp; <span class="sc2">&lt;<span class="sy0">/</span><span class="kw2">script</span>&gt;</span>
<span class="sc2">&lt;<span class="sy0">/</span><span class="kw2">head</span>&gt;</span>
<span class="sc2">&lt;<span class="kw2">body</span>&gt;</span>
<span class="sc2">&lt;<span class="sy0">/</span><span class="kw2">body</span>&gt;</span>
<span class="sc2">&lt;<span class="sy0">/</span><span class="kw2">html</span>&gt;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">&lt;html&gt;
&lt;head&gt;
    &lt;!-- ... --&gt;

    &lt;!-- Knockout + RequireJS files --&gt;
    &lt;script src="Knockout/js/lib/knockout-2.3.0.min.js"&gt;&lt;/script&gt;
    &lt;script src="Knockout/js/lib/require-2.1.8.min.js"&gt;&lt;/script&gt;
    &lt;!-- Knockout specs --&gt;    
    &lt;script src="Knockout/UnitTestingSpecs.js"&gt;&lt;/script&gt;

    &lt;!-- ... --&gt;
  &lt;/script&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;/body&gt;
&lt;/html&gt;</pre></div></div>

<p>Like the AngularJS example, the specs file is responsible for supplying the mocks and defining the tests:</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="javascript"><thead><tr><td colspan="2"  class="head">Javascript</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
</pre></td><td class="de1"><pre class="de1">require.<span class="me1">config</span><span class="br0">&#40;</span><span class="br0">&#123;</span>
&nbsp; &nbsp; baseUrl<span class="sy0">:</span> <span class="st0">&quot;Knockout/js/UnitTesting&quot;</span><span class="sy0">,</span>
&nbsp; &nbsp; paths<span class="sy0">:</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="st0">&quot;Squire&quot;</span><span class="sy0">:</span> <span class="st0">&quot;../../js/lib/Squire&quot;</span>
&nbsp; &nbsp; <span class="br0">&#125;</span>
<span class="br0">&#125;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
describe<span class="br0">&#40;</span><span class="st0">&quot;Knockout&quot;</span><span class="sy0">,</span> <span class="kw1">function</span> <span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; 
&nbsp; &nbsp; describe<span class="br0">&#40;</span><span class="st0">&quot;Testing the ModuleDIModel&quot;</span><span class="sy0">,</span> <span class="kw1">function</span> <span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">var</span> async <span class="sy0">=</span> <span class="kw1">new</span> AsyncSpec<span class="br0">&#40;</span><span class="kw1">this</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">var</span> viewmodel <span class="sy0">=</span> <span class="kw2">null</span><span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">var</span> expectedServiceResponse <span class="sy0">=</span> <span class="br0">&#91;</span><span class="br0">&#123;</span> name<span class="sy0">:</span> <span class="st0">&quot;A&quot;</span><span class="sy0">,</span> number<span class="sy0">:</span> <span class="nu0">123</span> <span class="br0">&#125;</span><span class="br0">&#93;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">var</span> mockService <span class="sy0">=</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; getList<span class="sy0">:</span> <span class="kw1">function</span> <span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span> <span class="kw1">return</span> expectedServiceResponse<span class="sy0">;</span> <span class="br0">&#125;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span><span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; async.<span class="me1">beforeEach</span><span class="br0">&#40;</span><span class="kw1">function</span> <span class="br0">&#40;</span>done<span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; require<span class="br0">&#40;</span><span class="br0">&#91;</span><span class="st0">'Squire'</span><span class="br0">&#93;</span><span class="sy0">,</span> <span class="kw1">function</span> <span class="br0">&#40;</span>Squire<span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">var</span> squire <span class="sy0">=</span> <span class="kw1">new</span> Squire<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; squire.<span class="me1">mock</span><span class="br0">&#40;</span><span class="st0">&quot;sampleServices/ListOfItemsService&quot;</span><span class="sy0">,</span> mockService<span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; .<span class="me1">require</span><span class="br0">&#40;</span><span class="br0">&#91;</span><span class="st0">&quot;sampleApp/ModuleDIModel&quot;</span><span class="br0">&#93;</span><span class="sy0">,</span> <span class="kw1">function</span> <span class="br0">&#40;</span>ModuleDIModel<span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; viewmodel <span class="sy0">=</span> <span class="kw1">new</span> ModuleDIModel<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; done<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; <span class="co1">// ... tests here</span>
&nbsp; &nbsp; <span class="br0">&#125;</span><span class="br0">&#41;</span><span class="sy0">;</span>
<span class="br0">&#125;</span><span class="br0">&#41;</span><span class="sy0">;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">require.config({
    baseUrl: "Knockout/js/UnitTesting",
    paths: {
        "Squire": "../../js/lib/Squire"
    }
});

describe("Knockout", function () {
    
    describe("Testing the ModuleDIModel", function () {
        var async = new AsyncSpec(this);
        var viewmodel = null;

        var expectedServiceResponse = [{ name: "A", number: 123 }];
        var mockService = {
            getList: function () { return expectedServiceResponse; }
        };

        async.beforeEach(function (done) {
            require(['Squire'], function (Squire) {
                var squire = new Squire();
                squire.mock("sampleServices/ListOfItemsService", mockService)
                      .require(["sampleApp/ModuleDIModel"], function (ModuleDIModel) {
                          viewmodel = new ModuleDIModel();
                          done();
                      });
            });
        });

        // ... tests here
    });
});</pre></div></div>

<p>I start out by configuring the base URL for the file that will be under test and the path for Squire. Like the AngularJS example, the first real step is defining the mock service and it&#8217;s expected response. Before each test, I then use Squire to mock the ListOfItemsService and load a fresh copy of the Model I am putting under test to ensure each test starts with a clean slate.</p>
<p>Like before, the tests themselves are pretty straightforward at that point:</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="javascript"><thead><tr><td colspan="2"  class="head">Javascript</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
</pre></td><td class="de1"><pre class="de1">it<span class="br0">&#40;</span><span class="st0">&quot;should start with an empty list of items&quot;</span><span class="sy0">,</span> <span class="kw1">function</span> <span class="br0">&#40;</span>done<span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; expect<span class="br0">&#40;</span>viewmodel.<span class="me1">listOfItems</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#41;</span>.<span class="me1">toEqual</span><span class="br0">&#40;</span><span class="br0">&#91;</span><span class="br0">&#93;</span><span class="br0">&#41;</span><span class="sy0">;</span>
<span class="br0">&#125;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
it<span class="br0">&#40;</span><span class="st0">&quot;should populate list from service when fillItems() is called&quot;</span><span class="sy0">,</span> <span class="kw1">function</span> <span class="br0">&#40;</span>done<span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; viewmodel.<span class="me1">fillItems</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; expect<span class="br0">&#40;</span>viewmodel.<span class="me1">listOfItems</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#41;</span>.<span class="me1">toEqual</span><span class="br0">&#40;</span>expectedServiceResponse<span class="br0">&#41;</span><span class="sy0">;</span>
<span class="br0">&#125;</span><span class="br0">&#41;</span><span class="sy0">;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">it("should start with an empty list of items", function (done) {
    expect(viewmodel.listOfItems()).toEqual([]);
});

it("should populate list from service when fillItems() is called", function (done) {
    viewmodel.fillItems();
    expect(viewmodel.listOfItems()).toEqual(expectedServiceResponse);
});</pre></div></div>

<p>With the exception of having a viewmodel variable instead of a $scope variable and evaluating the listOfItems value with ()&#8217;s, the tests are almost identical to AngularJS&#8217;s.</p>
<p>As I mentioned at the beginning, the documentation was sparse, so for once the Knockout/RequireJS side of things took more twiddling and frustration to get working. Now that I do have the tests working, though, I think it&#8217;s given me enough of a grasp of the mechanism that I could handle more complex test cases just as easily as I felt I could with AngularJS.</p>
<h2>Some Differences</h2>
<p>There were a number of frustrations before I got this working.</p>
<h3>Injecting Dependencies</h3>
<p>Again, kudos to the AngularJS team for making testing such a major focus. Unfortunately, I&#8217;m still parsing and re-parsing the inject() documentation to try and understand how what I did above works. I think part of the problem is that it&#8217;s a little recursive, as the injector is being used and replaced all at once&#8230;or something. Basically I&#8217;m a monkey with a lighter at this point, I know how to make the fire come out but have no idea why or how it does so.</p>
<p>And then we get to RequireJS, which has no focus on unit testing and the couple libraries that have tied into it have very few blogs posts and little documentation behind them. Once I got this first example together, I am feeling much more confidant about doing it again. Unlike Angular&#8217;s inject method, I think I have a pretty good idea how Squire works, but it was still frustrating to get that first test worked out.</p>
<h3>Documentation</h3>
<p>Usually AngularJS is the one that leaves me confused and forcing myself to reread the documentation. In this case, there are a lot of great posts out there that allowed me to ignore the documentation until I got it working (at which point I went back and started rereading it). Did I mention <a href="http://www.benlesh.com/2013/06/angular-js-unit-testing-services.html" title="Ben Lesh - Try, Catch, Fail - 'Angular JS - Unit Testing - Services'">Ben&#8217;s posts</a>?</p>
<p>Mocking modules for RequireJS was much more sparse. To the point where I started recognizing their page titles in google as I was searching alternative terms to try and get more information. There are a very small number of posts on Squire, a few on testr.js, etc. I think the new secret phrase for people looking into this should be &#8220;hurp durp example&#8221;. If you have spent any time looking into this topic, you not only know what I&#8217;m talking about, you&#8217;ve also read it like 40 times in case you missed something.</p>
<h2>Final Thoughts</h2>
<p>The AngularJS side was faster to get up to speed on and required fewer external dependencies. The Knockout/RequireJS side required me to pull in Squire and Jasmine.async and was tougher to get running initially. But now that I have them both running, I&#8217;ve found I don&#8217;t have a strong opinion about either of them, neither looks like it will be that much harder to extend or build more tests with. </p>
<p>I am definitely looking forward to playing with <a href="http://karma-runner.github.io/0.10/index.html">Karma</a> in the near future. I am used to continuous test execution and coverage with <a href="/index.php/EnterpriseDev/UnitTest/reducing-code-build-test-friction" title="LessThanDot Blog - 
Reducing Code-Build-Test Friction with NCrunch">NCrunch</a> and going back to manually executing tests has been annoying.</p>
<div style="background-color: #DDDDDD; padding: 8px; width: 400px;">
<h3>Knockout vs AngularJS</h3>
<ul style="margin: 0px; padding: 4px;">
<li><a href="/index.php/WebDev/UIDevelopment/angularjs-vs-knockout-introduction-1">Introductory Post</a></li>
<li><a href="/index.php/WebDev/UIDevelopment/angularjs-vs-knockout-data-binding-2">Data Binding</a></li>
<li><a href="/index.php/WebDev/UIDevelopment/angularjs-vs-knockout-validation-3">Validation</a></li>
<li><a href="/index.php/WebDev/UIDevelopment/angularjs-vs-knockout-serialization-4">Serialization</a></li>
<li><a href="/index.php/WebDev/UIDevelopment/angularjs-vs-knockout-templating-5">Templating</a></li>
<li><a href="/index.php/WebDev/UIDevelopment/angularjs-vs-knockout-modules-and-di-6">Modules + Dependency Injection</a></li>
<li><b>Automated Testing</b></li>
<li><a href="/index.php/WebDev/UIDevelopment/AJAX/angularjs-vs-knockout-spa-routing-history-8">SPA Routing/History</a></li>
<li><a href="/index.php/WebDev/UIDevelopment/angularjs-vs-knockout-final-thoughts-9">Final, Final Thoughts</a></li>
</ul>
</div>
]]></content>
			<link rel="replies" type="text/html" href="/index.php/webdev/uidevelopment/angularjs-vs-knockout-automated-testing-7/#comments" thr:count="0"/>
		<link rel="replies" type="application/atom+xml" href="/index.php/webdev/uidevelopment/angularjs-vs-knockout-automated-testing-7/feed/atom/" thr:count="0"/>
		<thr:total>0</thr:total>
		</entry>
	</feed>
