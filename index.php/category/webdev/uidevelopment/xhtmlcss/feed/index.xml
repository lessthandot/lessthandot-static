<?xml version="1.0" encoding="UTF-8"?><rss version="2.0"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:atom="http://www.w3.org/2005/Atom"
	xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
	xmlns:slash="http://purl.org/rss/1.0/modules/slash/"
	>

<channel>
	<title>XHTML and CSS &#8211; LessthanDot</title>
	<atom:link href="/index.php/category/webdev/uidevelopment/xhtmlcss/feed/" rel="self" type="application/rss+xml" />
	<link>/</link>
	<description>A Technical Community for IT Professionals</description>
	<lastBuildDate>Sat, 09 Mar 2019 12:50:36 +0000</lastBuildDate>
	<language>en-US</language>
	<sy:updatePeriod>hourly</sy:updatePeriod>
	<sy:updateFrequency>1</sy:updateFrequency>
	<generator>https://wordpress.org/?v=4.6.1</generator>
	<item>
		<title>Preprocessor Extensibility in SquishIt 0.9</title>
		<link>/index.php/webdev/serverprogramming/preprocessor-extensibility-in-squishit-0-9/</link>
		<comments>/index.php/webdev/serverprogramming/preprocessor-extensibility-in-squishit-0-9/#respond</comments>
		<pubDate>Fri, 05 Oct 2012 12:38:00 +0000</pubDate>
		<dc:creator><![CDATA[Alex Ullrich]]></dc:creator>
				<category><![CDATA[AJAX]]></category>
		<category><![CDATA[ASP.NET]]></category>
		<category><![CDATA[Javascript]]></category>
		<category><![CDATA[Server Programming]]></category>
		<category><![CDATA[XHTML and CSS]]></category>
		<category><![CDATA[asp.net]]></category>
		<category><![CDATA[squishit]]></category>

		<guid isPermaLink="false">/index.php/2012/10/preprocessor-extensibility-in-squishit-0-9/</guid>
		<description><![CDATA[For the past couple years, .net developers have been embracing various content preprocessors as they become more accessible.  For the same couple of years, we've been trying to keep up.  The dotLess port of the popular .less CSS extension has been getti&#8230;]]></description>
				<content:encoded><![CDATA[<p>For the past couple years, .net developers have been embracing various content preprocessors as they become more accessible.  For the same couple of years, we&#8217;ve been trying to keep up.  The <a href="http://www.dotlesscss.org/">dotLess</a> port of the popular .less CSS extension has been getting better by leaps and bounds. It has become almost trivial to embed a javascript compiler in .net these days (thanks to projects like <a href="http://jurassic.codeplex.com/">Jurassic</a>), enabling us to support things like coffeescript.  So we&#8217;re doing the obvious thing &#8211; stripping preprocessor support from our core library.</p>
<p>There are some good reasons for this.  Why force people to download things like Jurassic or dotLess if they don&#8217;t have the need?  The flipside of this is that we&#8217;d been deliberately avoiding adding support for SASS/SCSS because of concerns about linking to IronRuby &#8211; these concerns largely disappear when preprocessing becomes an opt-in behavior.  Some of these libraries don&#8217;t even work on Mono (I think .less might be the only one that works currently) so I feel extra bitter downloading code that won&#8217;t run on my platform of choice.  Finally, the growth in adoption has been so fast that frankly, we&#8217;re unable to keep up.</p>
<p>So let&#8217;s take a look at some of the original code (well not original as some of our refactorings did find their way to the 0.8.x branch).</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="csharp"><thead><tr><td colspan="2"  class="head">C#</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
</pre></td><td class="de1"><pre class="de1"><span class="kw1">internal</span> <span class="kw1">override</span> <span class="kw4">string</span> PreprocessForDebugging<span class="br0">&#40;</span><span class="kw4">string</span> filename<span class="br0">&#41;</span>
<span class="br0">&#123;</span>
&nbsp; &nbsp; <span class="kw1">if</span><span class="br0">&#40;</span>filename<span class="sy0">.</span><span class="me1">ToLower</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">.</span><span class="me1">EndsWith</span><span class="br0">&#40;</span><span class="st0">&quot;.coffee&quot;</span><span class="br0">&#41;</span><span class="br0">&#41;</span>
&nbsp; &nbsp; <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw4">string</span> js <span class="sy0">=</span> ProcessCoffee<span class="br0">&#40;</span>filename<span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; filename <span class="sy0">+=</span> debugExtension<span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">using</span><span class="br0">&#40;</span><span class="kw1">var</span> fileWriter <span class="sy0">=</span> fileWriterFactory<span class="sy0">.</span><span class="me1">GetFileWriter</span><span class="br0">&#40;</span>filename<span class="br0">&#41;</span><span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; fileWriter<span class="sy0">.</span><span class="me1">Write</span><span class="br0">&#40;</span>js<span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp; &nbsp; <span class="kw1">return</span> filename<span class="sy0">;</span>
<span class="br0">&#125;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">internal override string PreprocessForDebugging(string filename)
{
    if(filename.ToLower().EndsWith(".coffee"))
    {
        string js = ProcessCoffee(filename);
        filename += debugExtension;
        using(var fileWriter = fileWriterFactory.GetFileWriter(filename))
        {
            fileWriter.Write(js);
        }
    }
    return filename;
}</pre></div></div>

<p>As you can see, the trigger for preprocessing is the extension.  This is the desired behavior, but the way it was coded left it very brittle and made adding new preprocessors unwieldy.  So we set out to find a way to break this code out of the core library.  </p>
<p>The approach that we used was plugin based &#8211; we defined an interface and exposed a mechanism to register implementations of this interface with the core library.  Our original interface actually checked a file name to see if it needed preprocessing, so you could define any logic you wanted to determine whether to preprocess &#8211; we ended up eschewing this to go back to the extension-based decisions, for reasons that will be discussed later.  The interface looks like this:</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="csharp"><thead><tr><td colspan="2"  class="head">C#</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
</pre></td><td class="de1"><pre class="de1"><span class="kw1">public</span> <span class="kw4">interface</span> IPreprocessor
<span class="br0">&#123;</span>
&nbsp; &nbsp; <span class="kw4">bool</span> ValidFor<span class="br0">&#40;</span><span class="kw4">string</span> extension<span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; IProcessResult Process<span class="br0">&#40;</span><span class="kw4">string</span> filePath, <span class="kw4">string</span> content<span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; <span class="kw4">string</span><span class="br0">&#91;</span><span class="br0">&#93;</span> Extensions <span class="br0">&#123;</span> <span class="kw1">get</span><span class="sy0">;</span> <span class="br0">&#125;</span>
<span class="br0">&#125;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">public interface IPreprocessor
{
    bool ValidFor(string extension);
    IProcessResult Process(string filePath, string content);
    string[] Extensions { get; }
}</pre></div></div>

<p>The &#8220;ValidFor&#8221; method does exactly what it says &#8211; check if the preprocessor should be used with the supplied extension.  &#8220;Process&#8221; is where the actual preprocessing happens.  The array of extensions is exposed publicly to be used in registering the preprocessor &#8211; this is because each type of content bundle has a list of allowed extensions that is used to filter what gets included when we add a directory full of files.  Finally, the ProcessResult type includes a string representing preprocessed content and a list of any dependent files that were changed.  This last part was added by <a href="http://twitter.com/SimonPStevens">Simon Stevens</a> to enable <a href="https://github.com/jetheredge/SquishIt/pull/211">inclusion of .less imports as dependent files</a>.</p>
<p>Preprocessors can be registered two ways &#8211; both statically and with a particular bundle instance.  For the instance level configuration there is a method in the bundle&#8217;s fluent API called &#8220;WithPreprocessor&#8221; that allows inclusion of a preprocessor with that bundle instance.  Globally, we used the static &#8220;Bundle&#8221; class to allow preprocessor registration &#8211; methods exist there for registering script, style, and global preprocessors.  If preprocessors of the same type are registered both statically and with a bundle instance, the instance-level preprocessor will be used.</p>
<p>Now, back to why we decided to make preprocessor selection based on extension rather than the complete file name.  To understand, I guess all you have to do is read about the <a href="http://guides.rubyonrails.org/asset_pipeline.html">Asset Pipeline</a> in Ruby on Rails, but I will attempt to summarize here.  The beautiful thing about the pipeline approach is the ability to chain preprocessing steps.  This allows you to use ERB&#8217;s helper methods in your file <strong>prior to</strong> other preprocessing.  For example, if you wanted to use ERB helpers in a coffeescript file you can name your file file.js.coffee.erb &#8211; when an asset has the .coffee and .erb extensions, both preprocessors will be applied.  The order they are applied is driven by the reverse order of extensions, so *.coffee.erb would be preprocessed first by ERB and then by the coffeescript compiler.  Our goal was to emulate this behavior in SquishIt, and without matching preprocessors to extensions rather than filenames we wouldn&#8217;t have been able to.</p>
<p>Enabling this behavior is mostly a matter of finding preprocessors correctly.  We find them like so:</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="csharp"><thead><tr><td colspan="2"  class="head">C#</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
</pre></td><td class="de1"><pre class="de1"><span class="kw1">protected</span> IPreprocessor<span class="br0">&#91;</span><span class="br0">&#93;</span> FindPreprocessors<span class="br0">&#40;</span><span class="kw4">string</span> file<span class="br0">&#41;</span>
<span class="br0">&#123;</span>
&nbsp; &nbsp; <span class="kw1">return</span> file<span class="sy0">.</span><span class="me1">Split</span><span class="br0">&#40;</span><span class="st0">'.'</span><span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="sy0">.</span><span class="me1">Skip</span><span class="br0">&#40;</span><span class="nu0">1</span><span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="sy0">.</span><span class="me1">Reverse</span><span class="br0">&#40;</span><span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="sy0">.</span><span class="kw1">Select</span><span class="br0">&#40;</span>FindPreprocessor<span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="sy0">.</span><span class="kw1">Where</span><span class="br0">&#40;</span>p <span class="sy0">=&gt;</span> p <span class="sy0">!=</span> <span class="kw1">null</span><span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="sy0">.</span><span class="me1">ToArray</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
<span class="br0">&#125;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">protected IPreprocessor[] FindPreprocessors(string file)
{
    return file.Split('.')
        .Skip(1)
        .Reverse()
        .Select(FindPreprocessor)
        .Where(p =&gt; p != null)
        .ToArray();
}</pre></div></div>

<p>It&#8217;s important to note here that &#8220;FindPreprocessor&#8221; uses the firstpreprocessor it finds for a given extension &#8211; so we need to take care if implementing preprocessors for common file extensions like &#8220;.js&#8221;.  We can then use the preprocessors in the default order to process our content:</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="csharp"><thead><tr><td colspan="2"  class="head">C#</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
</pre></td><td class="de1"><pre class="de1"><span class="kw1">protected</span> <span class="kw4">string</span> PreprocessFile<span class="br0">&#40;</span><span class="kw4">string</span> file, IPreprocessor<span class="br0">&#91;</span><span class="br0">&#93;</span> preprocessors<span class="br0">&#41;</span>
<span class="br0">&#123;</span>
&nbsp; &nbsp; <span class="kw1">return</span> directoryWrapper<span class="sy0">.</span><span class="me1">ExecuteInDirectory</span><span class="br0">&#40;</span>Path<span class="sy0">.</span><span class="me1">GetDirectoryName</span><span class="br0">&#40;</span>file<span class="br0">&#41;</span>,
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="sy0">=&gt;</span> PreprocessContent<span class="br0">&#40;</span>file, preprocessors, ReadFile<span class="br0">&#40;</span>file<span class="br0">&#41;</span><span class="br0">&#41;</span><span class="br0">&#41;</span><span class="sy0">;</span>
<span class="br0">&#125;</span>
&nbsp;
<span class="kw1">protected</span> <span class="kw4">string</span> PreprocessContent<span class="br0">&#40;</span><span class="kw4">string</span> file, IPreprocessor<span class="br0">&#91;</span><span class="br0">&#93;</span> preprocessors, <span class="kw4">string</span> content<span class="br0">&#41;</span>
<span class="br0">&#123;</span>
&nbsp; &nbsp; <span class="kw1">return</span> preprocessors<span class="sy0">.</span><span class="me1">NullSafeAny</span><span class="br0">&#40;</span><span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span class="sy0">?</span> preprocessors<span class="sy0">.</span><span class="me1">Aggregate</span><span class="br0">&#40;</span>content, <span class="br0">&#40;</span>cntnt, pp<span class="br0">&#41;</span> <span class="sy0">=&gt;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">var</span> result <span class="sy0">=</span> pp<span class="sy0">.</span><span class="me1">Process</span><span class="br0">&#40;</span>file, cntnt<span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; bundleState<span class="sy0">.</span><span class="me1">DependentFiles</span><span class="sy0">.</span><span class="me1">AddRange</span><span class="br0">&#40;</span>result<span class="sy0">.</span><span class="me1">Dependencies</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">return</span> result<span class="sy0">.</span><span class="me1">Result</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span><span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span class="sy0">:</span> content<span class="sy0">;</span>
<span class="br0">&#125;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">protected string PreprocessFile(string file, IPreprocessor[] preprocessors)
{
    return directoryWrapper.ExecuteInDirectory(Path.GetDirectoryName(file),
        () =&gt; PreprocessContent(file, preprocessors, ReadFile(file)));
}

protected string PreprocessContent(string file, IPreprocessor[] preprocessors, string content)
{
    return preprocessors.NullSafeAny()
               ? preprocessors.Aggregate(content, (cntnt, pp) =&gt;
                                                      {
                                                          var result = pp.Process(file, cntnt);
                                                          bundleState.DependentFiles.AddRange(result.Dependencies);
                                                          return result.Result;
                                                      })
               : content;
}</pre></div></div>

<p>Despite the fact that we have totally broken everything users have come to depend on, we really do want to make the transition easier for people who were using .less or coffeescript with SquishIt.  This is where the tremendous <a href="http://nuget.org/packages/WebActivator">WebActivator</a> library comes in.  By including this library in our project, it allows us to define bits of code to run when the application starts up, like so:</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="csharp"><thead><tr><td colspan="2"  class="head">C#</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
</pre></td><td class="de1"><pre class="de1"><span class="br0">&#91;</span>assembly<span class="sy0">:</span> WebActivator<span class="sy0">.</span><span class="me1">PreApplicationStartMethod</span><span class="br0">&#40;</span><span class="kw3">typeof</span><span class="br0">&#40;</span>$rootnamespace$<span class="sy0">.</span><span class="me1">App_Start</span><span class="sy0">.</span><span class="me1">SquishItHogan</span><span class="br0">&#41;</span>, <span class="st0">&quot;Start&quot;</span><span class="br0">&#41;</span><span class="br0">&#93;</span>
&nbsp;
<span class="kw1">namespace</span> $rootnamespace$<span class="sy0">.</span><span class="me1">App_Start</span>
<span class="br0">&#123;</span>
&nbsp; &nbsp; <span class="kw1">using</span> <span class="co3">SquishIt.Framework</span><span class="sy0">;</span>
&nbsp; &nbsp; <span class="kw1">using</span> <span class="co3">SquishIt.Hogan</span><span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; <span class="kw1">public</span> <span class="kw4">class</span> SquishItHogan
&nbsp; &nbsp; <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">public</span> <span class="kw1">static</span> <span class="kw4">void</span> Start<span class="br0">&#40;</span><span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Bundle<span class="sy0">.</span><span class="me1">RegisterScriptPreprocessor</span><span class="br0">&#40;</span><span class="kw3">new</span> HoganPreprocessor<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp; &nbsp; <span class="br0">&#125;</span>
<span class="br0">&#125;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">[assembly: WebActivator.PreApplicationStartMethod(typeof($rootnamespace$.App_Start.SquishItHogan), "Start")]

namespace $rootnamespace$.App_Start
{
    using SquishIt.Framework;
    using SquishIt.Hogan;

    public class SquishItHogan
    {
        public static void Start()
        {
            Bundle.RegisterScriptPreprocessor(new HoganPreprocessor());
        }
    }
}</pre></div></div>

<p>Thanks to this snippet, you don&#8217;t actually need to do anything to hook up global preprocessing &#8211; just reference the dll containing your preprocessor and WebActivator.  This example is from the Hogan preprocessor, submitted by <a href="https://twitter.com/jincod">Abdrashitov Vadim</a>.  This pull request made me smile more than any I&#8217;ve seen in recent memory &#8211; a big part of the reason we moved to this model was to make it easier for people to define their own preprocessors and share them with the community.  To have one submitted by a user before we even had a production-ready release was just so cool.</p>
<p>I think this covers most of the changes, at least at a cursory level.  I hope to find the time to put together a bit of proper documentation in the next few months, but hopefully this will help in the meantime.  I&#8217;d like to extend a huge thanks to everyone who reported bugs in our pre-release versions, and to <a href="https://twitter.com/rlsdumont">Rodrigo Dumont</a> who provided the spark to get started on this stuff late last year.</p>
]]></content:encoded>
			<wfw:commentRss>/index.php/webdev/serverprogramming/preprocessor-extensibility-in-squishit-0-9/feed/</wfw:commentRss>
		<slash:comments>0</slash:comments>
		</item>
		<item>
		<title>My Mobile-Friendly Site Redesign</title>
		<link>/index.php/webdev/webdesigngraphicsstyling/my-mobile-friendly-site-redesign/</link>
		<comments>/index.php/webdev/webdesigngraphicsstyling/my-mobile-friendly-site-redesign/#respond</comments>
		<pubDate>Fri, 07 Sep 2012 13:01:00 +0000</pubDate>
		<dc:creator><![CDATA[Eli Weinstock-Herman (tarwn)]]></dc:creator>
				<category><![CDATA[Javascript]]></category>
		<category><![CDATA[Web Design, Graphics and Styling]]></category>
		<category><![CDATA[XHTML and CSS]]></category>

		<guid isPermaLink="false">/index.php/2012/09/my-mobile-friendly-site-redesign/</guid>
		<description><![CDATA[I built my first website for the NCSA Mosaic browser. A lot has changed since then, and the challenges we had with the original browser wars are upon us again as we try and build suites that work equally well on a variety of mobile phones, tablets, and the desktops that originally gave us so much trouble.]]></description>
				<content:encoded><![CDATA[<p>I built my first website for the NCSA Mosaic browser. A lot has changed since then, and the challenges we had with the original browser wars are upon us again as we try and build sites that work equally well on a variety of mobile phones, tablets, and the desktops that originally gave us so much trouble. Like the browser wars, the two main approaches have been server-side and client-side, with the server-side approach using the browsers User Agent to serve up a browser-specific response and the client-side method being an attempt to serve up one version of HTML that works on all potential browsers.</p>
<p>While the server-side method has not gotten much more advanced, the client-side methods are generations beyond where we used to be. <a href="http://www.alistapart.com/articles/responsive-web-design/" alt="Responsive Web Design, A List Apart, Ethan Marcotte">Responsive Web Design</a> and <a href="http://easy-readers.net/books/adaptive-web-design/" alt="Adaptive Web Design, Aaron Gustafson">Adaptive Web Design</a> provide the methods to use CSS and javascript to produce site that scales and progressively enhances to meet the end users device capabilities.</p>
<p>A couple months ago I decided to redesign my personal website again, with the goal of making it provide a good experience at mobile phone, tablet, and monitor sizes. Here&#8217;s how I did it.</p>
<h2>The Screen Sizes</h2>
<p>I decided to focus on screen sizes starting at mobile phone (480px or less) all the way up to large browser (more than 1240px). Each resolution would be usable and contain a similar palette and graphical elements. I also attempted to minimize the amount of extra elements I load at the smaller sizes, assuming that these smaller sizes would have less (and more costly) bandwidth.</p>
<p>These are the layouts I ended up with:</p>
<p><img src="http://tiernok.com/LTDBlog/website/SmallPhone.png" alt="Small phone" /></p>
<p><img src="http://tiernok.com/LTDBlog/website/LargePhone.png" alt="Large phone" /></p>
<p><img src="http://tiernok.com/LTDBlog/website/SmallBrowser.png" alt="Small browser" /></p>
<p><img src="http://tiernok.com/LTDBlog/website/LargeBrowser.png" alt="Large browser" /></p>
<p>As the available screen real estate gets larger, the logo size increases, the number of social icons increase, and additional inner right sidebar appears, and then finally additional background and an outer right sidebar become available. The width of the available reading area scales smoothly from the smallest size to the largest size.</p>
<h2>Implementation</h2>
<p>While my site doesn&#8217;t have a lot of functionality, achieving the layout changes and addition of features at the largest sizes was still a nice challenge. The key to the site is the CSS media queries that alter the visibility of elements and areas, combined with some javascript to load in larger images or additional elements when relevant. In the event that a browser doesn&#8217;t support media queries and javascript, they will receive the smallest possible layout. Though there are workarounds, I purposefully left the IE8/IE7 layout in this mode, which would also be used for most mobile browsers.</p>
<p>If you load the site in the secondary window and drag the width around, you will be able to see the transitions: <a href="http://tiernok.com/" target="_blank">http://tiernok.com/</a></p>
<h3>Images</h3>
<p>I cheated a bit on images. Any image with the &#8220;imglow&#8221; CSS class will be hidden above 480 px screen width and replaced with ones that with a class &#8220;imghi&#8221;. Since many small browsers would load the large image even if it is hidden, I put the actual image source in a data attribute and use a bit of javascript to populate the src value.</p>
<p><code class="bwp-syntax-inline"><div style="">HTML</div><span style="color: #009900;">&lt;<span style="color: #000000; font-weight: bold;">br</span> <span style="color: #66cc66;">/</span>&gt;</span><br />
<span style="color: #009900;">&lt;<span style="color: #000000; font-weight: bold;">img</span> <span style="color: #000066;">src</span><span style="color: #66cc66;">=</span><span style="color: #ff0000;">&quot;_n_images/logo_sm.png&quot;</span> <span style="color: #000066;">alt</span><span style="color: #66cc66;">=</span><span style="color: #ff0000;">&quot;Eli Weinstock-Herman | Tarwn&quot;</span> <span style="color: #000066;">border</span><span style="color: #66cc66;">=</span><span style="color: #ff0000;">&quot;0&quot;</span> <span style="color: #000066;">class</span><span style="color: #66cc66;">=</span><span style="color: #ff0000;">&quot;imglow&quot;</span> <span style="color: #66cc66;">/</span>&gt;&lt;<span style="color: #000000; font-weight: bold;">br</span> <span style="color: #66cc66;">/</span>&gt;</span><br />
<span style="color: #009900;">&lt;<span style="color: #000000; font-weight: bold;">img</span> data-fullsrc<span style="color: #66cc66;">=</span><span style="color: #ff0000;">&quot;_n_images/logo.png&quot;</span> <span style="color: #000066;">alt</span><span style="color: #66cc66;">=</span><span style="color: #ff0000;">&quot;Eli Weinstock-Herman | Tarwn&quot;</span> <span style="color: #000066;">border</span><span style="color: #66cc66;">=</span><span style="color: #ff0000;">&quot;0&quot;</span> <span style="color: #000066;">class</span><span style="color: #66cc66;">=</span><span style="color: #ff0000;">&quot;imghi&quot;</span> <span style="color: #66cc66;">/</span>&gt;&lt;<span style="color: #000000; font-weight: bold;">br</span> <span style="color: #66cc66;">/</span>&gt;</span></code></p>
<p>The social images at the top of the screen have classes that define whether they are available for small resolution or not and display at half resolution in smaller screens. These don&#8217;t load dynamically at larger size, so all 4 will load on browsers that load hidden images.</p>
<p>The background coffee spills start to show at the medium resolutions via positioned background images on the main content wrapper, so these only load when the screen is large enough to display them. This is also when the inner right side panel is displayed, along with the contact image and books. This content is loaded and not displayed at smaller resolutions, so there is some room to shrink that initial mobile load further.</p>
<h3>CSS Media Queries</h3>
<p>The main CSS logic is as follows:</p>
<p><b>&gt; 480 pixels wide:</b></p>
<ul>
<li>Hide the small logo, show the large one at reduced size</li>
<li>Increase the size of the 2 social icons in the header</li>
<li>Switch navigation from bar to buttons, show more links</li>
<li>Switch from full screen to fixed borders for main content</li>
</ul>
<p><b>&gt; 650 pixels wide:</b></p>
<ul>
<li>Show the large logo at larger size</li>
<li>Show all 4 social icons</li>
<li>Add last two links to navigation</li>
</ul>
<p><b>&gt; 750 pixels wide:</b></p>
<ul>
<li>Show the large logo at largest size</li>
<li>Show inner right sidebar</li>
<li>Constrain main body to 800px wide</li>
<li>Add coffee stain background images</li>
</ul>
<p><b>&gt; 1000 pixels wide:</b></p>
<ul>
<li>Add constraints to content wrapper and area to maintain smooth centering</li>
</ul>
<p><b>&gt; 1240 pixels wide:</b></p>
<ul>
<li>Show the outer right sidebar (javascript used to load content asynchronously)</li>
</ul>
<p>Minimizing the pages that were available at the smaller resolutions not only kept the content more focused, but also meant that some of the more complex pages (like the resume) would only be available at resolutions that would support them.</p>
<h2>Am I Happy With It?</h2>
<p>I started the redesign with the <a href="http://html5boilerplate.com/">Html5 boilerplate</a> to give me a consistent start place and minimize how much time I had to deal with browser specific layout tweaks. I did tweak the media query resolutions quite a bit as I built out the pages, but part of this was my lack of designer skills and not having a clear enough picture of what I wanted the site to look like. </p>
<p>Currently a mobile device without javascript will load about 83KB of content (obviously this changes based on what is on the front-page of the site). With Javascript this goes up to 160KB for mobile and 800&#215;600 resolutions and 200KB for the largest screen size. I think the smaller resolutions could be reduced further by restricting the inner sidebar content and small icon loading, and the whole site could do with some minification and gzip. </p>
<p>Overall I am very happy with it. The size is usable at every resolution I try and this method doesn&#8217;t rely on the client-side user agent. Additional functionality would be easy to add, as I could use feature detection to add functionality only if the end user&#8217;s browser supported it, regardless of the user agent string. I&#8217;m very happy with the result.</p>
]]></content:encoded>
			<wfw:commentRss>/index.php/webdev/webdesigngraphicsstyling/my-mobile-friendly-site-redesign/feed/</wfw:commentRss>
		<slash:comments>0</slash:comments>
		</item>
		<item>
		<title>Firefox heading for 15% market share?</title>
		<link>/index.php/webdev/webdesigngraphicsstyling/firefox-heading-for-15-market/</link>
		<comments>/index.php/webdev/webdesigngraphicsstyling/firefox-heading-for-15-market/#comments</comments>
		<pubDate>Sat, 11 Feb 2012 14:57:00 +0000</pubDate>
		<dc:creator><![CDATA[SQLDenis]]></dc:creator>
				<category><![CDATA[AJAX]]></category>
		<category><![CDATA[Web Design, Graphics and Styling]]></category>
		<category><![CDATA[XHTML and CSS]]></category>
		<category><![CDATA[browers]]></category>
		<category><![CDATA[chrome]]></category>
		<category><![CDATA[firefox]]></category>

		<guid isPermaLink="false">/index.php/2012/02/firefox-heading-for-15-market/</guid>
		<description><![CDATA[I decided to take a look at my Has FireFox lost its Mojo, are FireFox user jumping ship to Chrome? post to compare the browser stats. In that post I wrote the following 

So what will happen to FireFox will they ever pass 25% or is this a downward spi&#8230;]]></description>
				<content:encoded><![CDATA[<p>I decided to take a look at my <a href="/index.php/WebDev/WebDesignGraphicsStyling/has-firefox-lost-its-mojo-are-firefox-us">Has FireFox lost its Mojo, are Firefox user jumping ship to Chrome?</a> post to compare the browser stats. In that post I wrote the following </p>
<blockquote><p>So what will happen to Firefox will they ever pass 25% or is this a downward spiral and within a year Chrome will have that 25% and Firefox will be at 15% or so? With all the new stuff like the Google&#8217;s App Store that Google is adding to Chrome its usage will have to grow fast.</p></blockquote>
<p>Well Firefox never reached 25%, as a matter of fact Firefox  is at less than 20% market share today. Here is what the stats look like for the last 12 months according to <a href="http://marketshare.hitslink.com/browser-market-share.aspx?qprid=1">NetMarket Share</a></p>
<div class="image_block"><a href="/wp-content/uploads/blogs/WebDev/BrowserStats.PNG?mtime=1328978705"><img alt="" src="/wp-content/uploads/blogs/WebDev/BrowserStats.PNG?mtime=1328978705" width="805" height="235" /></a></div>
<p>As you can see Chrome has almost surpassed Firefox, I think that in 2 or 3 months Google will have surpassed Firefox. A lot of people still use Firefox because of the fact that some extensions don&#8217;t exist on Chrome. NoScript is a big one, Chrome has actually somethign similar, it is called <a href="https://chrome.google.com/webstore/detail/oiigbmnaadbkfbmpbfijlflahbdbdgdf">ScriptNo</a>. FireBug is another reason that people stick with FireFox for now. Even Germany&#8217;s Federal Office for Information Security (BSI) is <a href="http://www.theverge.com/2012/2/5/2771834/german-agency-google-chrome-safety">recommending Chrome</a> now, they did not pick FireFox.</p>
<p>A lot of people are ranting about the fact that Firefox has become bloated, yes compared to Internet Explorer it might look lean but compared to Chrome it certainly does not. We have to wait and see what happens, I will revisit this again early next year. </p>
<p>I also wonder if the release of Windows 8 will do anything to make Internet Explorer gain some market share again?</p>
]]></content:encoded>
			<wfw:commentRss>/index.php/webdev/webdesigngraphicsstyling/firefox-heading-for-15-market/feed/</wfw:commentRss>
		<slash:comments>13</slash:comments>
		</item>
		<item>
		<title>CSS, Javascript, T4 Templates, and Less, Oh My</title>
		<link>/index.php/webdev/serverprogramming/aspnet/css-javascript-t4-templates-and-less/</link>
		<comments>/index.php/webdev/serverprogramming/aspnet/css-javascript-t4-templates-and-less/#comments</comments>
		<pubDate>Fri, 02 Dec 2011 13:02:00 +0000</pubDate>
		<dc:creator><![CDATA[Eli Weinstock-Herman (tarwn)]]></dc:creator>
				<category><![CDATA[ASP.NET]]></category>
		<category><![CDATA[Javascript]]></category>
		<category><![CDATA[XHTML and CSS]]></category>
		<category><![CDATA[css]]></category>
		<category><![CDATA[javascript]]></category>
		<category><![CDATA[less]]></category>
		<category><![CDATA[t4-template]]></category>

		<guid isPermaLink="false">/index.php/2011/12/css-javascript-t4-templates-and-less/</guid>
		<description><![CDATA[For the past few months, I have been looking for a way to define some JS and CSS files that would be shared between multiple projects in an ASP.Net solution. The intent is to define common scripts and CSS in one place instead of trying to keep multiple copies of it in sync or implementing an internal CDN with a versioning scheme. The challenge is finding a way to do this with a minimum of impact on the development, deployment, and production processes.]]></description>
				<content:encoded><![CDATA[<p>For the past few months, I have been looking for a way to define some JS and CSS files that would be shared between multiple projects in an ASP.Net solution. The intent is to define common scripts and CSS in one place instead of trying to keep multiple copies of it in sync or implementing an internal CDN with a versioning scheme. The challenge is finding a way to do this with a minimum of impact on the development, deployment, and production processes.</p>
<h2>The Shared Project</h2>
<p>Yesterday the best solution I was also the best one I had thought of on my own, which was to create a shared project and use pre- or post-build commands to copy the common files to the relevant web projects. Unfortunately this doesn&#8217;t solve the &#8220;let me edit a file without rebuilding&#8221; unless I then edit the copied file, test, and remember to paste the changes back into the source without first building and wiping out my temporary changes.</p>
<p>Yuck.</p>
<p>This wasn&#8217;t going to make life that much easier.</p>
<h2>Start with just the CSS?</h2>
<p>This morning, while looking into the potential of using LESS or SASS to reduce the repetitiveness of the files, I realized I had the potential for a much better solution. If I had a way to compile a LESS or SASS file on the fly into a CSS file, then I could still put my common CSS in a central location and just use an import statement in a template in each project to pull those common values in. </p>
<p>I initially looked at using SASS with the <a href="http://visualstudiogallery.msdn.microsoft.com/2b96d16a-c986-4501-8f97-8008f9db141a" title="Mindscape Web Workbench extension on VisualStudioGallery">Mindscape Web Workbench</a> plugin. This seemed like a good solution, but something I read recently about design-time T4 templates led me to wonder if someone had created a T4 template that would transform LESS or SASS syntax into a nice clean CSS file. </p>
<p>What did we do before search engines&#8230;</p>
<h2>Implement T4CSS Template</h2>
<p>Phil Haack (<a href="http://haacked.com/" title="Phil's blog">blog</a>|<a href="https://twitter.com/#!/haacked" title="@haacked on twitter">twitter</a>) posted a blog in 2009 on <a href="http://haacked.com/archive/2009/12/02/t4-template-for-less-css.aspx" title="T4CSS: A T4 Template for .Less CSS With Compression">exactly this topic</a>. He created a T4 template for Visual Studio 2008 that would use the dotless C# assembly to convert LESS files to static CSS files and provided to the <a href="http://www.dotlesscss.org/" title="Visit the .Less Site">.Less site</a>.</p>
<p>Now we&#8217;re cooking.</p>
<p>First we need to download the t4css package from github: https://github.com/dotless/dotless/downloads</p>
<p>There are two files we are concerned with, the dotless.Core DLL and the T4CSS.tt template file. The template file is placed in our CSS folder in our site. </p>
<div style="font-size: .9em; background-color: #eeeeee; padding: .5em;">
<h3>Referencing the Assembly</h3>
<p>Unfortunately Visual Studio 2010&#8217;s T4 implementation no longer accesses assemblies through the project references, but this still leaves us with <a href="http://weblogs.asp.net/lhunt/archive/2010/05/04/t4-template-error-assembly-directive-cannot-locate-referenced-assembly-in-visual-studio-2010-project.aspx" title="T4 Template error - Assembly Directive cannot locate referenced assembly in Visual Studio 2010 project">a few options</a>. Given that I want to share this among several projects, I put the dotless.Core DLL in a folder at my solution level and updated the path in the T4 template to use the solution path macro.
</div>
<p>Next I created a sample file to play with, which I called test.less.css (fancy, I know). I also modified the settings section of the T4CSS.tt file, setting _runOnBuild and _useCssExtension to &#8220;true&#8221;. This will cause the template to run on each build, as well as when I trigger it, and it will look for files ending in &#8220;.less.css&#8221; instead of just &#8220;.less&#8221;. This gives us some CSS intellisense with minimal hassle, though Mindscape&#8217;s Web Workbench apparently handles this out of the box and there is <a href="http://visualstudiogallery.msdn.microsoft.com/dd5635b0-3c70-484f-abcb-cbdcabaa9923" title="CSS Is Less">an extension</a> to make VS treat the less extension as a CSS format.</p>
<div style="font-size: .9em; background-color: #eeeeee; padding: .5em;">
There is also a <a href="http://visualstudiogallery.msdn.microsoft.com/e646c6ec-87a7-45ea-81e8-d655a3d3e73e?SRC=VSIDE" title="LessExtension">LessExtension</a> in the gallery that seems to offer some of the functionality I already have with the T4 template, but I didn&#8217;t have a chance to play with it.
</div>
<p>If we keep the T4CSS file open, it will mark itself as unsaved each time it runs, so using Ctrl+Shift+S will save it and regenerate the output CSS. At least that&#8217;s the theory. Unfortunately in my case, it seems that the template file was being saved prior to the css file, so I&#8217;ve taken to pressing Ctrl+S and then Ctrl+Shift+S after making a quick change in my CSS (which is still way better than a Rebuild All would be).</p>
<p><i>Note: There is also  the &#8220;Transform All Templates&#8221; button on the top of the solution explorer if I don&#8217;t feel like double-saving. I could also add a shortcut in  the keyboard commands list (Tools -> Options -> Environment -> Keyboard) for &#8220;TextTransformation.TransformAllTemplates</i></p>
<h2>Working Across Projects</h2>
<p>This solution hasn&#8217;t quite given me the &#8220;save the file and refresh the page&#8221; ease of use of a static CSS file. This means if you are editing a less file that more than one template references, and you don&#8217;t have all the templates open, you could get out of sync. To help keep things clean in source control, this means you should run a complete build (to let all the transforms run) or use. </p>
<p>To make this work for multiple projects we can add a folder at the solution level with our less files and use the @import statement to pull them in. Except now we can&#8217;t do the .less.css trick anymore because less doesn&#8217;t process @import&#8217;s ending in CSS, assuming they are intended to be regular css imports. At this point, it&#8217;s probably time to stop fighting it, apply the &#8220;Less is CSS&#8221; extension I mentioned above, and change back to using .less instead of .less.css. Fun times.</p>
<p>So what we end up with is a folder structure that looks like:</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="text"><thead><tr><td colspan="2"  class="head">Text</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
</pre></td><td class="de1"><pre class="de1">&nbsp; &nbsp; 
/SolutionName/Common/dotless.Core.dll
/SolutionName/Common/common.less
/SolutionName/Project1/css/T4CSS.tt
/SolutionName/Project1/css/stylesheet.less
/SolutionName/Project2/css/T4CSS.tt
/SolutionName/Project2/css/stylesheet.less</pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">	
/SolutionName/Common/dotless.Core.dll
/SolutionName/Common/common.less
/SolutionName/Project1/css/T4CSS.tt
/SolutionName/Project1/css/stylesheet.less
/SolutionName/Project2/css/T4CSS.tt
/SolutionName/Project2/css/stylesheet.less</pre></div></div>

<p>And inside the project-specific .less files we have an import at the top, like so:</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="css"><thead><tr><td colspan="2"  class="head">CSS</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
</pre></td><td class="de1"><pre class="de1"><span class="co1">@import &quot;../../Common/common.less&quot;;</span>
&nbsp;
<span class="coMULTI">/* plus some project specific-stuff */</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">@import "../../Common/common.less";

/* plus some project specific-stuff */</pre></div></div>

<p>And there we have it, shared CSS. I posted a <a href="https://bitbucket.org/tarwn/aspnet_sharedresourceswitht4/overview" title="See project on BitBucket">working sample project on BitBucket</a> if you want to browse it in detail.</p>
<h2>I Specifically Heard You Say JavaScript</h2>
<p>I intend to solve the common javascript issue the same way, except in this case I will write my own T4 templates to directly copy the files from the common area that are needed in each project. This will provide me with an easy way to manage common scripts in a central location, the ability to edit and refresh my page to test changes without rebuilds, and can easily be extended to include minified versions of the files.</p>
]]></content:encoded>
			<wfw:commentRss>/index.php/webdev/serverprogramming/aspnet/css-javascript-t4-templates-and-less/feed/</wfw:commentRss>
		<slash:comments>1</slash:comments>
		</item>
		<item>
		<title>The History of HTML Table Layouts</title>
		<link>/index.php/webdev/uidevelopment/xhtmlcss/history-of-html-table-layouts/</link>
		<comments>/index.php/webdev/uidevelopment/xhtmlcss/history-of-html-table-layouts/#comments</comments>
		<pubDate>Tue, 02 Aug 2011 10:01:00 +0000</pubDate>
		<dc:creator><![CDATA[Eli Weinstock-Herman (tarwn)]]></dc:creator>
				<category><![CDATA[XHTML and CSS]]></category>
		<category><![CDATA[bad code]]></category>

		<guid isPermaLink="false">/index.php/2011/08/history-of-html-table-layouts/</guid>
		<description><![CDATA[The argument over table vs non-table layouts has been going on for years. I remember seeing online conversations as far back as ten years ago on the topic, and given my notoriously bad memory that should be taken as a minimum. Along the way we have dealt with partial CSS implementations, inconsistent rendering behavior, slow implementation of standards, competing proprietary implementations...it's been a long road.]]></description>
				<content:encoded><![CDATA[<div style="float: left; margin: .5em 1em .5em .5em;"><img src="http://tiernok.com/LTDBlog/rant.png" alt="Ranting Guy" style="height: 75px; " /></div>
<p>The argument over table vs non-table layouts has been going on for years. I remember seeing online conversations as far back as ten years ago on the topic, and given my notoriously bad memory that should be taken as a minimum. Along the way we have dealt with partial CSS implementations, inconsistent rendering behavior, slow implementation of standards, competing proprietary implementations&#8230;it&#8217;s been a long road.</p>
<p>Table layouts are still in use and in some places they are still the default. They are easy to implement and the browser and standards wars of the late 90&#8217;s and early 00&#8217;s have left behind a lot of people who remember how impossible it sometimes felt to make a non-tabular layout. However, while there are still browser inconsistencies and delays in standards adoptions, sometimes I wonder if we have forgotten just how long it has been since we started down this non-tabular path.</p>
<h2>Table-free Layout is &#8220;New&#8221;</h2>
<p>Tables have existed as part of web standards since the <a href="http://www.w3.org/TR/REC-html32" title="HTML 3.2 specification at W3C">HTML 3.2 standard</a> (January 1997). The standard referenced an earlier RFC and was intended to be compliant with the table tags Netscape had already added to their browser, but this was their official addition to the HTML standard.</p>
<p>The standard pointed out that tables could be used for tabular data or layout purposes, but cautioned that using them for layout would impact accessibility.</p>
<div style="margin: 0px 2em; font-style: italic; background-color: #eeeeee; padding: 4px;">Browsers, 1996-1997: MS IE3/4, NCSA Mosaic 2.1/3, Netscape 4, Opera 2/3</div>
<p>In <a href="http://www.w3.org/TR/1998/REC-html40-19980424/cover.html" title="HTML 4 specification at W3C">HTML 4</a> (April 1998), this warning was strengthened to &#8220;Tables should not be used purely as a means to layout document content&#8221;, and we were pointed to the addition of CSS1 to help accommodate this. It was noted, however, that using deprecated features was expected to continue for a little while in order to support older browsers (browser listed above).</p>
<p>In <a href="http://www.w3.org/TR/WD-html40/" title="HTML 4.01 specification at W3C">HTML 4.01</a> (Dec 1999), this warning was strengthened to the following directive: &#8220;Tables should not be used purely as a means to layout document content&#8221;.</p>
<div style="margin: 0px 2em; font-style: italic; background-color: #eeeeee; padding: 4px;">Browsers, 1998-1999: MS IE5, Netscape 4.5/4.6, Opera 3.5/3.6</div>
<p>Tables have existed as part of the HTML standard since 1997, we&#8217;ve been warned not to use them for layout, and CSS1 was added to the standard in 1998 to provide layout flexibility without having to resort to tables. While implementation of CSS1 was slow, the inconsistencies we saw between IE4, IE5, and NS 5.4 are a long time back.</p>
<p>If you are interested in the CSS side of the history:</p>
<dl>
<dt><a href="http://www.w3.org/TR/CSS1/" title="CSS1 Recommendation">CSS1 Recommendation</a></dt>
<dd>was published December, 1996</dd>
<dt><a href="http://www.w3.org/TR/2008/REC-CSS2-20080411/" title="CSS2 Recommendation">CSS2 Recommendation</a></dt>
<dd> was published May, 1998</dd>
<dt><a href="http://www.w3.org/Style/CSS/specs#css21" title="CSS2.1 Recommendation">CSS2.1 Recommendation</a></dt>
<dd> began in 2002 and was published in 2011 </dd>
<dt><a href="http://en.wikipedia.org/wiki/Cascading_Style_Sheets#CSS_3" title="CSS3 at Wikipedia">CSS3 at Wikipedia</a></dt>
<dd> began in 1999 and is a collection of modular standards being published independantly</dd>
</dl>
<p><em>Out of curiosity I pulled up my personal website from 2002 and checked the source. It was cross-browser compatible and the layout was table-free.</em></p>
<div style="margin: 0px 2em; font-style: italic; background-color: #eeeeee; padding: 4px;">
Browsers, 2002: MS IE6, NS 7, Mozilla 1, Opera 5.1.4
</div>
<p>Fast-forward:</p>
<div style="margin: 0px 2em; font-style: italic; background-color: #eeeeee; padding: 4px;">Browsers, 2006: MS IE7, NS 8.1, Firefox 2, Safari 2</div>
<p>Fast-forward:</p>
<div style="margin: 0px 2em; font-style: italic; background-color: #eeeeee; padding: 4px;">Browsers, 2011: MS IE9, Firefox 4/5, Chrome 9/10/11/12, Safari 5</div>
<p></p>
<h2>CSS Takes Longer</h2>
<p>There was a point in time when you could spend days trying to get the screen to layout properly. Oddly enough, with the slower internet connections available at the time, it was probably worth it to remove all the extra markup table layouts tend to incorporate.</p>
<p>The amount of time it takes to produce a layout in CSS versus tables has gotten fairly close. With the consistency shown by today&#8217;s browsers, the major gap in time is generally learning how to do it. That&#8217;s not to say that all is perfect in the world of browserdom, but it&#8217;s rare (unknown?) to be forced to use the table option given the number of available examples, prebuilt frameworks, and tweaks available from javascript packages.</p>
<p>Building a house is hard. Can the house builder cut corners to get your house up faster? Sure. But at the end of the day, if the builder is professional they won&#8217;t cut corners because those cut corners reduce the value of the house, reduce the satisfaction of the buyer, and increase the ongoing maintenance costs.</p>
<h2>The Exceptions</h2>
<p>There were exceptions and they got fewer every year. As IE 5.5 and NS 4.6 faded from view, this grew to very few exceptions. Add things like jQuery to the mix and I would be hard-pressed to find an example that required the negative baggage table-layout brings with it. Initially we created fixed width layouts, then along came fluid layouts, then elastic layouts. The latest entry in the game is <a href="http://www.alistapart.com/articles/responsive-web-design/">responsive layouts</a>, where we not only change the overall size of the page to accommodate browser sizes, but also element sizes and flow.</p>
<p>Resorting to table layout immediately means you aren&#8217;t treating it as an exception. It&#8217;s more likely you need to sit down with your manager or business and help them understand the ongoing costs involved with table layouts, some of the benefits available with newer techniques (ie, 2000 forward), and why it&#8217;s important to start making the switch. Luckily there are <a href="http://www.hotdesign.com/seybold/everything.html" title="Why tables for layout is stupid: problems defined, solutions offered">resources</a> out there to help.</p>
<h2>There&#8217;s &#8220;No Time&#8221;</h2>
<p>I understand deadlines, the pressure from the business to deliver, and the fact that many companies simply don&#8217;t bother to grow their people. As we mentioned before, it can be difficult to convince our managers and business to understand why we need to go the, initially at least, slower route of non-tabular layout.</p>
<p>But you need to go get started. Yesterday.</p>
<p>If your company is hesitant to let you spend the time, point out the costs involved with supporting new browsers as they come out, the advantages of good searchability, the wave of mobile devices that are flooding the market&#8230;clean markup can help all of these and there&#8217;s any number of sites out there that will provide longer, better articulated lists of costs and benefits (we&#8217;ve had a lot of time to think about it). </p>
<p>And don&#8217;t forget to point out that since table layouts are contrary to the standard, what you are actually providing to your customer is a defective product.</p>
<h2>Moving Forward</h2>
<p>When we follow standards, the browser developers can spend more time on new and interesting advancements. When we violate standards, we force them to spend time making sense out of the random, invalid junk we&#8217;ve sent to the browser.</p>
<p>Poorly structured, non-standard HTML (like table layouts) takes more bandwidth, takes longer for browsers to render, is more fragile, is harder for experienced web developers to work with, basically forces a rewrite for mobile devices, wastes the time and efforts of browser developers &#8230; it&#8217;s bad code. </p>
<p>It might be acceptable for a beginner to use tables for layout, by definition a beginner is just learning the ropes. But part of being a beginner is learning and growing past that stage. With non-tabular layouts being around for 13 years, it&#8217;s long past the time we, as professionals, start requiring ourselves to know how to use them.</p>
]]></content:encoded>
			<wfw:commentRss>/index.php/webdev/uidevelopment/xhtmlcss/history-of-html-table-layouts/feed/</wfw:commentRss>
		<slash:comments>2</slash:comments>
		</item>
		<item>
		<title>What Does a Web Developer Need To Know</title>
		<link>/index.php/webdev/uidevelopment/what-does-a-web-developer/</link>
		<comments>/index.php/webdev/uidevelopment/what-does-a-web-developer/#comments</comments>
		<pubDate>Tue, 28 Jun 2011 09:54:00 +0000</pubDate>
		<dc:creator><![CDATA[Eli Weinstock-Herman (tarwn)]]></dc:creator>
				<category><![CDATA[AJAX]]></category>
		<category><![CDATA[Javascript]]></category>
		<category><![CDATA[Server Programming]]></category>
		<category><![CDATA[UI Development]]></category>
		<category><![CDATA[XHTML and CSS]]></category>
		<category><![CDATA[asp.net]]></category>
		<category><![CDATA[competency]]></category>
		<category><![CDATA[css]]></category>
		<category><![CDATA[design]]></category>
		<category><![CDATA[html]]></category>
		<category><![CDATA[javascript]]></category>
		<category><![CDATA[jsp]]></category>
		<category><![CDATA[php]]></category>
		<category><![CDATA[seo]]></category>
		<category><![CDATA[table layout]]></category>
		<category><![CDATA[w3c]]></category>

		<guid isPermaLink="false">/index.php/2011/06/what-does-a-web-developer/</guid>
		<description><![CDATA[What is a web developer? Recently I was involved in a discussion about the skills a web developer is expected to have and how interesting it has been to watch common bad practices (like table layout and SQL injection) continue to spread. So in the nature of Denis's What does a SQL Server developer need to know? post, I present the web developer breakdown.]]></description>
				<content:encoded><![CDATA[<p>What is a web developer? Recently I was involved in a discussion about the skills a web developer is expected to have and how interesting it has been to watch common bad practices (like table layout and SQL injection) continue to spread. So in the nature of Denis&#8217;s <a href="/index.php/DataMgmt/DBProgramming/MSSQLServer/what-does-a-sql-server" title="Read Denis's post">What does a SQL Server developer need to know?</a> post, I present the web developer breakdown.</p>
<h2>What Level Am I?</h2>
<p>Rather than try and attach years of experience to this scale, I&#8217;m going to present a list of major areas and skills, questions, or topics in each area. I&#8217;ve tried to capture whether I feel a skill is required to be an Intermediate or Advanced web developer. </p>
<p>I put this list together based on my own experience, 20-30 web developer interview lists, and some feedback from others.</p>
<p>Beginner: Knows some of the items on the list<br />
Intermediate: Knows most intermediate items and some advanced<br />
Advanced: Knows almost everything on the list</p>
<style>
.oneshottable { border: 1px solid #444444; border-collapse: collapse; width: 100%; margin-bottom: 12px; }
.oneshottable th { background-color: #444444; color: white; text-transform: uppercase; font-weight: bold; padding: 4px;font-size: 90%; }
.oneshottable td{ padding: 1px 2px; min-width: 20px; border-bottom: 1px solid #999999; font-size: 80%;}
.oneshottable td.summary:first-child{ text-align: left; font-weight: normal; padding: 3px;}
.oneshottable td:first-child{ text-align: center; font-weight: bold }
</style>
<table class="oneshottable">
<tbody>
<tr>
<th colspan="2">HTML</th>
</tr>
<tr>
<td colspan="2" class="summary">The ability to produce clean, valid, maintainable HTML is critical for a web developer. Current standards include HTML 4.01 (1999), XHTML 1 (2000), and the beginning of HTML 5 (2011)</td>
</tr>
<tr>
<td>I</td>
<td>The effect of doctypes, can code a mostly valid site without looking up the rules</td>
</tr>
<tr>
<td>A</td>
<td>The effect of content-types and how to set or debug them</td>
</tr>
<tr>
<td>I</td>
<td>Knows (and use) all of these without looking them up:  html, head, title, meta, script, style, link, body, a, strong, em, ul, ol, li, table, tr, th, td, h1-5, input, select, option, img, p, span, div, pre, textarea</td>
</tr>
<tr>
<td>A</td>
<td>And most of these: dl/dt/dd, thead, tbody, tfoot, abbr, acronym, applet, object, blockquote, iframe, label, map, optgroup, sup, sub, base, fieldset</td>
</tr>
<tr>
<td>A</td>
<td>Can name/explain at least 15 of the new HTML5 tags</td>
</tr>
<tr>
<td>I</td>
<td>Knows the escapes for &amp;, &lt;, &gt;, &copy;, ASCII characters (though you may have to look up the character code)</td>
</tr>
<tr>
<td>A</td>
<td>Can explain how HTTP works (headers, redirects, header requests, clientside caching)</td>
</tr>
<tr>
<td>I</td>
<td>Knows how to link to a position in a page</td>
</tr>
</tbody>
</table>
<table class="oneshottable">
<tbody>
<tr>
<th colspan="2">CSS</th>
</tr>
<tr>
<td colspan="2" class="summary">Cascading Style Sheets are used to describe the way an HTML documented should be presented. CSS 1 was released in 1996 and the latest published recommendation is CSS 3. </td>
</tr>
<tr>
<td>I</td>
<td>Difference between display inline, block, and inline-block and what the default value is for div, span, a, b</td>
</tr>
<tr>
<td>I</td>
<td>Difference between position static, relative, fixed, absolute</td>
</tr>
<tr>
<td>I</td>
<td>What z-index is and how to use it</td>
</tr>
<tr>
<td>A</td>
<td>How z-index is calculated by individual browsers</td>
</tr>
<tr>
<td>I</td>
<td>Difference between padding and margin</td>
</tr>
<tr>
<td>I</td>
<td>Difference between display: none and visibility: hidden</td>
</tr>
<tr>
<td>I</td>
<td>Purpose and use of &#8220;media&#8221;</td>
</tr>
<tr>
<td>I</td>
<td>Able to describe and calculate specificity</td>
</tr>
<tr>
<td>I</td>
<td>Knows at least a few attribute selectors</td>
</tr>
<tr>
<td>A</td>
<td>Can describe pseudo-classes and know many without looking them up</td>
</tr>
</tbody>
</table>
<table class="oneshottable">
<tbody>
<tr>
<th colspan="2">Javascript</th>
</tr>
<tr>
<td colspan="2" class="summary">Javascript has become the defacto scripting language for web browsers, one of only a few ways to create client-side interactions consistently across available browsers. JavaScript was first shipped in 1995 as part of the Netscape browser.</td>
</tr>
<tr>
<td>I</td>
<td>How to write a basic function, inline event handler, and a non-inline event handler (raw or w/ a package)</td>
</tr>
<tr>
<td>I</td>
<td>Can write one or or more methods to make an AJAX call with reference material</td>
</tr>
<tr>
<td>A</td>
<td>Can write one or or more methods to make an AJAX call without reference material</td>
</tr>
<tr>
<td>I</td>
<td>Knows at least one framework (jQuery, Prototype, YUI, Dojo, MooTools, …)</td>
</tr>
<tr>
<td>I</td>
<td>Can create classes (function or literal)</td>
</tr>
<tr>
<td>A</td>
<td>Knows and can use prototype (little &#8216;p&#8217;, not the framework)</td>
</tr>
<tr>
<td>I</td>
<td>Can dynamically find and add elements to the page using DOM or a framework (without looking it up)</td>
</tr>
</tbody>
</table>
<table class="oneshottable">
<tbody>
<tr>
<th colspan="2">Tools</th>
</tr>
<tr>
<td colspan="2" class="summary">Along with standard languages, there are numerous tools available to help validate, evaluate, and improve existing websites. Similar to a spell-checking tool in a word processing application, these tools can help us catch errors and oversights in our websites.</td>
</tr>
<tr>
<td>A</td>
<td>Can name at least one site, application, or organization that has an HTML validation tool</td>
</tr>
<tr>
<td>A</td>
<td>Can name at least one site, application, or organization that has an CSS validation tool</td>
</tr>
<tr>
<td>A</td>
<td>Can name at least one site, application, or organization that has an SEO scoring tool</td>
</tr>
<tr>
<td>A</td>
<td>Can name at least one site, application, or organization that has an Accessibility evaluation tool</td>
</tr>
</tbody>
</table>
<table class="oneshottable">
<tbody>
<tr>
<th colspan="2">Server-Side Programming</th>
</tr>
<tr>
<td colspan="2" class="summary">The shift to dynamic, server-generated websites in the mid-to-late 90&#8217;s was responsible for shifting the focus of the web from document retrieval to interactivity, commerce, and services.</td>
</tr>
<tr>
<td>I</td>
<td>Knows at least 2 server-side technologies &#8211; Perl, PHP, ASP 3, JSP, Java Servlets, CFM, ASP.Net (WebPages, Web Forms, MVC), Ruby on Rails, Python (WSGI, CGI, mod_python), etc</td>
</tr>
<tr>
<td>A</td>
<td>Knows more than 4 of the above list</td>
</tr>
<tr>
<td>I</td>
<td>Can explain difference between stateful and stateless development</td>
</tr>
<tr>
<td>I</td>
<td>Can explain how sessions work</td>
</tr>
<tr>
<td>I</td>
<td>Can explain how cookies work</td>
</tr>
<tr>
<td>I</td>
<td>Difference between GET and POST and how known languages present this information</td>
</tr>
<tr>
<td>I</td>
<td>Pros and cons of client-side vs server-side validation</td>
</tr>
<tr>
<td>A</td>
<td>Understands the basics of (SOAP) web services, how to implement them, and how they work</td>
</tr>
</tbody>
</table>
<table class="oneshottable">
<tbody>
<tr>
<th colspan="2">Data</th>
</tr>
<tr>
<td colspan="2" class="summary">Most web applications have some form of data store behind them. Several forms of storage and caching mechanisms exist and being able to build a basic system often requires at least a basic level of knowledge in these areas.</td>
</tr>
<tr>
<td>I</td>
<td>Can build databases, define queries, and debug on at least one major RDBMS</td>
</tr>
<tr>
<td>A</td>
<td>Knows basics for normalization and can create a basic data model to describe their database</td>
</tr>
<tr>
<td>I</td>
<td>Can work with at least one NoSQL database or data cache</td>
</tr>
<tr>
<td>I</td>
<td>Can write match and search regular expressions</td>
</tr>
<tr>
<td>A</td>
<td>Can write match and search regular expressions without a reference in more than one language</td>
</tr>
</tbody>
</table>
<table class="oneshottable">
<tbody>
<tr>
<th colspan="2">Web Server</th>
</tr>
<tr>
<td colspan="2" class="summary">Using a server-side technology to generate HTML generally requires a web server. The two largest install bases are Microsoft IIS 7.5 and Apache 2.2.</td>
</tr>
<tr>
<td>I</td>
<td>Understands the basics of how the web server (Apache or IIS) works and can create a new site</td>
</tr>
<tr>
<td>A</td>
<td>Can explain URL rewriting and implement on at least one system</td>
</tr>
</tbody>
</table>
<table class="oneshottable">
<tbody>
<tr>
<th colspan="2">Performance</th>
</tr>
<tr>
<td colspan="2" class="summary">Tuning a website to run in an optimal fashion can sometimes be the difference between paying for a single server or multiple servers, between a responsive site and one that fails under load. </td>
</tr>
<tr>
<td>A</td>
<td>Understands and can implement data caching</td>
</tr>
<tr>
<td>A</td>
<td>Understands and can implement page caching</td>
</tr>
<tr>
<td>A</td>
<td>Can use one or more page performance or load testing tools</td>
</tr>
<tr>
<td>I</td>
<td>Tools/methods and purpose of minification of JS and CSS</td>
</tr>
<tr>
<td>A</td>
<td>Understands and uses CDNs when possible</td>
</tr>
</tbody>
</table>
<table class="oneshottable">
<tbody>
<tr>
<th colspan="2">Testing</th>
</tr>
<tr>
<td colspan="2" class="summary">As the technology behind the web has developed, tools to help automate some of the repetition involved in testing websites has likewise evolved.</td>
</tr>
<tr>
<td>A</td>
<td>Can use one or more automated tools for interface testing</td>
</tr>
</tbody>
</table>
<table class="oneshottable">
<tbody>
<tr>
<th colspan="2">Security</th>
</tr>
<tr>
<td colspan="2" class="summary">As recent news stories have reminded us, security is an ongoing requirement for websites. Understanding the basics of security can help us build security in from day one rather than trying to squeeze it in at the end.</td>
</tr>
<tr>
<td>I</td>
<td>SQL Injection &#8211; what it is, how to prevent it</td>
</tr>
<tr>
<td>I</td>
<td>Cross site scripting &#8211; what it is, how to prevent it</td>
</tr>
<tr>
<td>A</td>
<td>Cross Site Request Forgery &#8211; what it is, how to prevent it</td>
</tr>
<tr>
<td>I</td>
<td>Understand hashing, salting, and importance of storing critical information in hashed or encrypted formats</td>
</tr>
<tr>
<td>I</td>
<td>Cookies &#8211; Understand session hijacking and dangers of storing user information or identification</td>
</tr>
</tbody>
</table>
<table class="oneshottable">
<tbody>
<tr>
<th colspan="2">Design Principles</th>
</tr>
<tr>
<td colspan="2" class="summary">Being able to implement common design patterns without restoring to hacks is an important part of being a web developer (as opposed to a hobbiest). While it may prove impossible to build a site without some form of hack, hacks should not be the only tool in the toolbox.</td>
</tr>
<tr>
<td>I</td>
<td>Table Layout &#8211; what it is, why it&#8217;s bad (at least three reasons)</td>
</tr>
<tr>
<td>A</td>
<td>Can implement multi-column fixed, fluid, and elastic layouts without reference material</td>
</tr>
<tr>
<td>A</td>
<td>Table Layout &#8211; and why using CSS for table layout (display: table, table-cell, etc) is not bad</td>
</tr>
<tr>
<td>A</td>
<td>Can explain and implement fixed, fluid (liquid), and elastic layouts</td>
</tr>
<tr>
<td>A</td>
<td>Can implement multi-column fixed, fluid, and elastic layouts without reference material</td>
</tr>
</tbody>
</table>
<table class="oneshottable">
<tbody>
<tr>
<th colspan="2">Meta</th>
</tr>
<tr>
<td colspan="2" class="summary">Metadata (data about data) is critical to helping people and search engines find resources in our sites and applications.</td>
</tr>
<tr>
<td>I</td>
<td>Knows purpose of description, keyword tags</td>
</tr>
<tr>
<td>I</td>
<td>Knows purpose of robots.txt file</td>
</tr>
<tr>
<td>A</td>
<td>Knows purpose and can implement sitemap.xml file</td>
</tr>
<tr>
<td>A</td>
<td>You know the basics for SEO</td>
</tr>
<tr>
<td>A</td>
<td>You&#8217;ve implemented some form of browser analytics</td>
</tr>
<tr>
<td>A</td>
<td>Microformats </td>
</tr>
<tr>
<td>A</td>
<td>You know what WCAG is and how to test conformance</td>
</tr>
<tr>
<td>A</td>
<td>You know what semantic markup is</td>
</tr>
</tbody>
</table>
<table class="oneshottable">
<tbody>
<tr>
<th colspan="2">Disqualifiers/Limiters</th>
</tr>
<tr>
<td colspan="2" class="summary">These are topics I consider to be critical to advancement. They reflect common misunderstandings or bad practices that an experienced web developer has to grow past in order to advance their skillset.</td>
</tr>
<tr>
<td>B</td>
<td>Backbutton doesn&#8217;t work w/ your sites, would prefer to disable it altogether</td>
</tr>
<tr>
<td>B</td>
<td>You protect images from download by implementing right click intercepts, layering transparent images in top, etc</td>
</tr>
<tr>
<td>I</td>
<td>Implement performance tuning without before/after measurements</td>
</tr>
<tr>
<td>B</td>
<td>Table layout</td>
</tr>
</tbody>
</table>
<p><em>Note: Disqualifiers indicate that you won&#8217;t progress past [B]eginner or [I]ntermediate levels until you stop doing them and understand why doing them was a bad idea</em></p>
<h2>What&#8217;s Missing</h2>
<p>There are several things that were intentionally left out of this list. Some were hard to quantity in a general manner, others I was unsure how relevant they were. And I&#8217;m sure people will be kind enough to add additional oversights and revisions below.</p>
<p>Missing Categories:</p>
<ul>
<li>Level of knowledge with server-side languages</li>
<li>Project management skills</li>
<li>Documentation and Modeling skills</li>
<li>Design and Graphics skills</li>
<li>Application Lifecycle Management &#8211; Source Control, Deployment, etc</li>
</ul>
<p>Extra items that didn&#8217;t make it in:</p>
<ul>
<li>Can implement RSS and ATOM feeds</li>
<li>Can implement a web farm</li>
<li>Implemented single-signon (openID, SAML, etc)</li>
<li>Knows how to implement XML data islands (still relevant?)</li>
<li>Knows how to create DTDs and/or XSDs</li>
<li>Can write regular expressions without a reference</li>
<li>Knows relevant tools for Yahoo (SiteExplorer), Google, Bing for managing site information</li>
<li>Schema.org &#8211; it belongs in the Meta category but I didn&#8217;t know what level of skill, knowledge, or adoption I should include considering it&#8217;s newness and several other factors</li>
</ul>
<p>There is also the fact that we often get caught up maintaining or even adding on to a site that violates many of the skills and standards you see in this list. This doesn&#8217;t prevent us from writing good, clean, semantic sites the rest of the time and being forced to write poor code does not make on inherently less skilled.</p>
<h2>A Brief Digression, or Why an App Dev is Not a Web Dev</h2>
<p>At one point web development was seen as less exciting and far less complex than application development. It is still seen as extremely similar to application development, so much so that it is quite normal to hire a good or great application developer and expect them to be a good or great web developer. </p>
<p>Unfortunately it doesn&#8217;t quite work that way, as web development has grown extremely complex since the first dynamic sites started showing up in the late 90&#8217;s. Doubly unfortunately, web development is based on a stateless model instead of the stateful one most application developers are used to, uses a fluid layout instead of the grid layout, and sneaks a lot of extra communications and caching into the mix. This is a series of paradigm shifts not unlike the one between procedural, object oriented, and functional programming.</p>
]]></content:encoded>
			<wfw:commentRss>/index.php/webdev/uidevelopment/what-does-a-web-developer/feed/</wfw:commentRss>
		<slash:comments>9</slash:comments>
		</item>
		<item>
		<title>HTML5 Support for the Visual Studio 2010 Editor available for download</title>
		<link>/index.php/webdev/webdesigngraphicsstyling/html5-support-for-the-visual/</link>
		<comments>/index.php/webdev/webdesigngraphicsstyling/html5-support-for-the-visual/#comments</comments>
		<pubDate>Thu, 16 Jun 2011 08:45:00 +0000</pubDate>
		<dc:creator><![CDATA[SQLDenis]]></dc:creator>
				<category><![CDATA[AJAX]]></category>
		<category><![CDATA[Javascript]]></category>
		<category><![CDATA[Web Design, Graphics and Styling]]></category>
		<category><![CDATA[XHTML and CSS]]></category>
		<category><![CDATA[html5]]></category>
		<category><![CDATA[intellisense]]></category>
		<category><![CDATA[visual studio 2010]]></category>
		<category><![CDATA[web standards]]></category>

		<guid isPermaLink="false">/index.php/2011/06/html5-support-for-the-visual/</guid>
		<description><![CDATA[The first Web Standards Update for Visual Studio 2010 SP1 is available for download, you can get it here: http://visualstudiogallery.msdn.microsoft.com/a15c3ce9-f58f-42b7-8668-53f6cdc2cd83

We just released the first Web Standards Update for Visual St&#8230;]]></description>
				<content:encoded><![CDATA[<p><a href="http://www.flickr.com/photos/denisgobo/5839107848/" title="HTML5 Support for the Visual Studio 2010 Editor by Denis Gobo, on Flickr"><img src="http://farm3.static.flickr.com/2734/5839107848_96b77582ac_m.jpg" width="240" height="201" alt="HTML5 Support for the Visual Studio 2010 Editor" /></a><br />
The first Web Standards Update for Visual Studio 2010 SP1 is available for download, you can get it here: http://visualstudiogallery.msdn.microsoft.com/a15c3ce9-f58f-42b7-8668-53f6cdc2cd83</p>
<blockquote><p>We just released the first Web Standards Update for Visual Studio 2010 SP1. Despite its name, the update also works for Visual Web Developer Express 2010 SP1. You can read more on our team blog.</p>
<p> In this first release of the update, we have focused on bringing the HTML5 support up-to-date, adding CSS 3 support and bring more new API’s to the JavaScript intellisense. The plan is to make a release about every 3 months to keep Visual Studio updated with the changes made by W3C.</p></blockquote>
<p>Here are some of the features that the Visual Studio Web Standards Update provides you with intellisense and validation for<br />
<strong>HTML 5 features</strong></p>
<p>Video &amp; related tags<br />
Audio &amp; related tag<br />
New input types like email, url, date etc<br />
Drag &amp; Drop support<br />
Accessibility standard WAI-ARIA<br />
Microdata<br />
Schema.org </p>
<p><strong>CSS3</strong></p>
<p>2D Transforms<br />
3D Transforms<br />
Animations<br />
Background &amp; Borders<br />
Basic Box Model<br />
Basic UI<br />
Behavior<br />
Color<br />
Flexible Box Layout<br />
Fonts<br />
Generated Content for Paged Media<br />
Hyperlink Presentation<br />
Line<br />
Lists<br />
Marquee<br />
Media Queries<br />
Multi Column<br />
Namespaces<br />
Paged Media<br />
Presentations Levels<br />
Ruby<br />
Selectors<br />
Speech<br />
Syntax<br />
Template Layout<br />
Text<br />
Transitions</p>
<p>Download it here: http://visualstudiogallery.msdn.microsoft.com/a15c3ce9-f58f-42b7-8668-53f6cdc2cd83</p>
<p>Read more about it here: http://blogs.msdn.com/b/webdevtools/archive/2011/06/15/web-standards-update-for-visual-studio-2010-sp1.aspx</p>
]]></content:encoded>
			<wfw:commentRss>/index.php/webdev/webdesigngraphicsstyling/html5-support-for-the-visual/feed/</wfw:commentRss>
		<slash:comments>1</slash:comments>
		</item>
		<item>
		<title>Bing, Google and Yahoo! announce Schema.org</title>
		<link>/index.php/webdev/webdesigngraphicsstyling/bing-google-and-yahoo-announce/</link>
		<comments>/index.php/webdev/webdesigngraphicsstyling/bing-google-and-yahoo-announce/#comments</comments>
		<pubDate>Thu, 02 Jun 2011 15:32:00 +0000</pubDate>
		<dc:creator><![CDATA[SQLDenis]]></dc:creator>
				<category><![CDATA[AJAX]]></category>
		<category><![CDATA[Web Design, Graphics and Styling]]></category>
		<category><![CDATA[XHTML and CSS]]></category>
		<category><![CDATA[html]]></category>
		<category><![CDATA[markup]]></category>

		<guid isPermaLink="false">/index.php/2011/06/bing-google-and-yahoo-announce/</guid>
		<description><![CDATA[Bing, Google and Yahoo! have announced Schema.org

Here is the info


Today we’re announcing schema.org, a new initiative from Yahoo!, Bing, and Google, to create and support a common set of schemas for structured data markup on web pages. With sch&#8230;]]></description>
				<content:encoded><![CDATA[<p>Bing, Google and Yahoo! have announced <a href="http://schema.org/">Schema.org</a></p>
<p>Here is the info</p>
<p>Today we’re announcing schema.org, a new initiative from Yahoo!, Bing, and Google, to create and support a common set of schemas for structured data markup on web pages. With schema.org, webmasters and developers can learn about structured data and improve how their sites appear in search results on Bing, Google, and Yahoo!. Information and tips are available on schema.org, a one-stop resource for webmasters looking to add markup to make their pages better understood by search engines.</p>
<h2>What is Schema.org?</h2>
<p>This site provides a collection of schemas, i.e., html tags, that webmasters can use to markup their pages in ways recognized by major search providers. Search engines including Bing, Google and Yahoo! rely on this markup to improve the display of search results, making it easier for people to find the right web pages.<br />
Many sites are generated from structured data, which is often stored in databases. When this data is formatted into HTML, it becomes very difficult to recover the original structured data. Many applications, especially search engines, can benefit greatly from direct access to this structured data. On-page markup enables search engines to understand the information on web pages and provide richer search results in order to make it easier for users to find relevant information on the web. Markup can also enable new tools and applications that make use of the structure.<br />
A shared markup vocabulary makes easier for webmasters to decide on a markup schema and get the maximum benefit for their efforts. So, in the spirit of sitemaps.org, Bing, Google and Yahoo! have come together to provide a shared collection of schemas that webmasters can use.</p>
<p>Main site here: http://schema.org/</p>
<p>getting started site is here: http://schema.org/docs/gs.html</p>
<p>An example</p>
<p>Orginal HTML</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="html4strict"><thead><tr><td colspan="2"  class="head">HTML</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
</pre></td><td class="de1"><pre class="de1">Jane Doe
<span class="sc2">&lt;<span class="kw2">img</span> <span class="kw3">src</span><span class="sy0">=</span><span class="st0">&quot;janedoe.jpg&quot;</span> <span class="sy0">/</span>&gt;</span>
&nbsp;
Professor
20341 Whitworth Institute
405 Whitworth
Seattle WA 98052
(425) 123-4567
<span class="sc2">&lt;<span class="kw2">a</span> <span class="kw3">href</span><span class="sy0">=</span><span class="st0">&quot;mailto:jane-doe@xyz.edu&quot;</span>&gt;</span>jane-doe@illinois.edu<span class="sc2">&lt;<span class="sy0">/</span><span class="kw2">a</span>&gt;</span>
&nbsp;
Jane's home page:
<span class="sc2">&lt;<span class="kw2">a</span> <span class="kw3">href</span><span class="sy0">=</span><span class="st0">&quot;www.janedoe.com&quot;</span>&gt;</span>janedoe.com<span class="sc2">&lt;<span class="sy0">/</span><span class="kw2">a</span>&gt;</span>
&nbsp;
Graduate students:
<span class="sc2">&lt;<span class="kw2">a</span> <span class="kw3">href</span><span class="sy0">=</span><span class="st0">&quot;www.xyz.edu/students/alicejones.html&quot;</span>&gt;</span>Alice Jones<span class="sc2">&lt;<span class="sy0">/</span><span class="kw2">a</span>&gt;</span>
<span class="sc2">&lt;<span class="kw2">a</span> <span class="kw3">href</span><span class="sy0">=</span><span class="st0">&quot;www.xyz.edu/students/bobsmith.html&quot;</span>&gt;</span>Bob Smith<span class="sc2">&lt;<span class="sy0">/</span><span class="kw2">a</span>&gt;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">Jane Doe
&lt;img src="janedoe.jpg" /&gt;

Professor
20341 Whitworth Institute
405 Whitworth
Seattle WA 98052
(425) 123-4567
&lt;a href="mailto:jane-doe@xyz.edu"&gt;jane-doe@illinois.edu&lt;/a&gt;

Jane's home page:
&lt;a href="www.janedoe.com"&gt;janedoe.com&lt;/a&gt;

Graduate students:
&lt;a href="www.xyz.edu/students/alicejones.html"&gt;Alice Jones&lt;/a&gt;
&lt;a href="www.xyz.edu/students/bobsmith.html"&gt;Bob Smith&lt;/a&gt;</pre></div></div>

<p>With MicroData</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="html4strict"><thead><tr><td colspan="2"  class="head">HTML</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
</pre></td><td class="de1"><pre class="de1"><span class="sc2">&lt;<span class="kw2">div</span> itemscope itemtype<span class="sy0">=</span><span class="st0">&quot;http://schema.org/Person&quot;</span>&gt;</span>
&nbsp; <span class="sc2">&lt;<span class="kw2">span</span> itemprop<span class="sy0">=</span><span class="st0">&quot;name&quot;</span>&gt;</span>Jane Doe<span class="sc2">&lt;<span class="sy0">/</span><span class="kw2">span</span>&gt;</span>
&nbsp; <span class="sc2">&lt;<span class="kw2">img</span> <span class="kw3">src</span><span class="sy0">=</span><span class="st0">&quot;janedoe.jpg&quot;</span> itemprop<span class="sy0">=</span><span class="st0">&quot;image&quot;</span> <span class="sy0">/</span>&gt;</span>
&nbsp;
&nbsp; <span class="sc2">&lt;<span class="kw2">span</span> itemprop<span class="sy0">=</span><span class="st0">&quot;jobTitle&quot;</span>&gt;</span>Professor<span class="sc2">&lt;<span class="sy0">/</span><span class="kw2">span</span>&gt;</span>
&nbsp; <span class="sc2">&lt;<span class="kw2">div</span> itemprop<span class="sy0">=</span><span class="st0">&quot;address&quot;</span> itemscope itemtype<span class="sy0">=</span><span class="st0">&quot;http://schema.org/PostalAddress&quot;</span>&gt;</span>
&nbsp; &nbsp; <span class="sc2">&lt;<span class="kw2">span</span> itemprop<span class="sy0">=</span><span class="st0">&quot;streetAddress&quot;</span>&gt;</span>
&nbsp; &nbsp; &nbsp; 20341 Whitworth Institute
&nbsp; &nbsp; &nbsp; 405 N. Whitworth
&nbsp; &nbsp; <span class="sc2">&lt;<span class="sy0">/</span><span class="kw2">span</span>&gt;</span>
&nbsp; &nbsp; <span class="sc2">&lt;<span class="kw2">span</span> itemprop<span class="sy0">=</span><span class="st0">&quot;addressLocality&quot;</span>&gt;</span>Seattle<span class="sc2">&lt;<span class="sy0">/</span><span class="kw2">span</span>&gt;</span>,
&nbsp; &nbsp; <span class="sc2">&lt;<span class="kw2">span</span> itemprop<span class="sy0">=</span><span class="st0">&quot;addressRegion&quot;</span>&gt;</span>WA<span class="sc2">&lt;<span class="sy0">/</span><span class="kw2">span</span>&gt;</span>
&nbsp; &nbsp; <span class="sc2">&lt;<span class="kw2">span</span> itemprop<span class="sy0">=</span><span class="st0">&quot;postalCode&quot;</span>&gt;</span>98052<span class="sc2">&lt;<span class="sy0">/</span><span class="kw2">span</span>&gt;</span>
&nbsp; <span class="sc2">&lt;<span class="sy0">/</span><span class="kw2">div</span>&gt;</span>
&nbsp; <span class="sc2">&lt;<span class="kw2">span</span> itemprop<span class="sy0">=</span><span class="st0">&quot;telephone&quot;</span>&gt;</span>(425) 123-4567<span class="sc2">&lt;<span class="sy0">/</span><span class="kw2">span</span>&gt;</span>
&nbsp; <span class="sc2">&lt;<span class="kw2">a</span> <span class="kw3">href</span><span class="sy0">=</span><span class="st0">&quot;mailto:jane-doe@xyz.edu&quot;</span> itemprop<span class="sy0">=</span><span class="st0">&quot;email&quot;</span>&gt;</span>
&nbsp; &nbsp; jane-doe@xyz.edu<span class="sc2">&lt;<span class="sy0">/</span><span class="kw2">a</span>&gt;</span>
&nbsp;
&nbsp; Jane's home page:
&nbsp; <span class="sc2">&lt;<span class="kw2">a</span> <span class="kw3">href</span><span class="sy0">=</span><span class="st0">&quot;www.janedoe.com&quot;</span> itemprop<span class="sy0">=</span><span class="st0">&quot;url&quot;</span>&gt;</span>janedoe.com<span class="sc2">&lt;<span class="sy0">/</span><span class="kw2">a</span>&gt;</span>
&nbsp;
&nbsp; Graduate students:
&nbsp; <span class="sc2">&lt;<span class="kw2">a</span> <span class="kw3">href</span><span class="sy0">=</span><span class="st0">&quot;www.xyz.edu/students/alicejones.html&quot;</span> itemprop<span class="sy0">=</span><span class="st0">&quot;colleagues&quot;</span>&gt;</span>
&nbsp; &nbsp; Alice Jones<span class="sc2">&lt;<span class="sy0">/</span><span class="kw2">a</span>&gt;</span>
&nbsp; <span class="sc2">&lt;<span class="kw2">a</span> <span class="kw3">href</span><span class="sy0">=</span><span class="st0">&quot;www.xyz.edu/students/bobsmith.html&quot;</span> itemprop<span class="sy0">=</span><span class="st0">&quot;colleagues&quot;</span>&gt;</span>
&nbsp; &nbsp; Bob Smith<span class="sc2">&lt;<span class="sy0">/</span><span class="kw2">a</span>&gt;</span>
<span class="sc2">&lt;<span class="sy0">/</span><span class="kw2">div</span>&gt;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">&lt;div itemscope itemtype="http://schema.org/Person"&gt;
  &lt;span itemprop="name"&gt;Jane Doe&lt;/span&gt;
  &lt;img src="janedoe.jpg" itemprop="image" /&gt;

  &lt;span itemprop="jobTitle"&gt;Professor&lt;/span&gt;
  &lt;div itemprop="address" itemscope itemtype="http://schema.org/PostalAddress"&gt;
    &lt;span itemprop="streetAddress"&gt;
      20341 Whitworth Institute
      405 N. Whitworth
    &lt;/span&gt;
    &lt;span itemprop="addressLocality"&gt;Seattle&lt;/span&gt;,
    &lt;span itemprop="addressRegion"&gt;WA&lt;/span&gt;
    &lt;span itemprop="postalCode"&gt;98052&lt;/span&gt;
  &lt;/div&gt;
  &lt;span itemprop="telephone"&gt;(425) 123-4567&lt;/span&gt;
  &lt;a href="mailto:jane-doe@xyz.edu" itemprop="email"&gt;
    jane-doe@xyz.edu&lt;/a&gt;

  Jane's home page:
  &lt;a href="www.janedoe.com" itemprop="url"&gt;janedoe.com&lt;/a&gt;

  Graduate students:
  &lt;a href="www.xyz.edu/students/alicejones.html" itemprop="colleagues"&gt;
    Alice Jones&lt;/a&gt;
  &lt;a href="www.xyz.edu/students/bobsmith.html" itemprop="colleagues"&gt;
    Bob Smith&lt;/a&gt;
&lt;/div&gt;</pre></div></div>

<p>What do you think, will you start implementing this?<br /></p>
]]></content:encoded>
			<wfw:commentRss>/index.php/webdev/webdesigngraphicsstyling/bing-google-and-yahoo-announce/feed/</wfw:commentRss>
		<slash:comments>12</slash:comments>
		</item>
		<item>
		<title>Silverlight 5 Beta Is Available For Download</title>
		<link>/index.php/webdev/serverprogramming/silverlight-5-beta-is-available/</link>
		<comments>/index.php/webdev/serverprogramming/silverlight-5-beta-is-available/#respond</comments>
		<pubDate>Wed, 13 Apr 2011 14:47:00 +0000</pubDate>
		<dc:creator><![CDATA[SQLDenis]]></dc:creator>
				<category><![CDATA[AJAX]]></category>
		<category><![CDATA[Javascript]]></category>
		<category><![CDATA[Microsoft IIS]]></category>
		<category><![CDATA[Server Programming]]></category>
		<category><![CDATA[XHTML and CSS]]></category>
		<category><![CDATA[silverlight]]></category>

		<guid isPermaLink="false">/index.php/2011/04/silverlight-5-beta-is-available/</guid>
		<description><![CDATA[Silverlight 5 Beta is available for download


These are the top beta features



  XAML Debugging with breakpoints for binding debugging

  Implicit data templates for easy UI reuse

  Double (and multi) click support

  GPU-accelerated XN&#8230;]]></description>
				<content:encoded><![CDATA[<p>Silverlight 5 Beta is available for download</p>
<p>These are the top beta features</p>
<ul>
<li>XAML Debugging with breakpoints for binding debugging</li>
<li>Implicit data templates for easy UI reuse</li>
<li>Double (and multi) click support</li>
<li>GPU-accelerated XNA-compatible 3D and immediate-mode 2D API</li>
<li>Low-latency sound effects and WAV support</li>
<li>Real operating system windows and multi-display support</li>
<li>Significant performance improvements, fixes and much more</li>
</ul>
<p>More info about new features here: http://www.microsoft.com/silverlight/future/</p>
<p>There are also these items for download </p>
<ul>
<li>Silverlight 5 Beta Tools for Visual Studio SP1 (required)</li>
<li>Expression Blend Preview for Silverlight 5 (optional)</li>
<li>Silverlight 5 Features Document (optional)</li>
</ul>
<p>Download Silverlight 5 Beta and the optional downloads here: http://www.silverlight.net/getstarted/silverlight-5-beta/</p>
]]></content:encoded>
			<wfw:commentRss>/index.php/webdev/serverprogramming/silverlight-5-beta-is-available/feed/</wfw:commentRss>
		<slash:comments>0</slash:comments>
		</item>
		<item>
		<title>First Look at IE 10</title>
		<link>/index.php/webdev/webdesigngraphicsstyling/first-look-at-ie-10/</link>
		<comments>/index.php/webdev/webdesigngraphicsstyling/first-look-at-ie-10/#comments</comments>
		<pubDate>Tue, 12 Apr 2011 14:07:00 +0000</pubDate>
		<dc:creator><![CDATA[SQLDenis]]></dc:creator>
				<category><![CDATA[AJAX]]></category>
		<category><![CDATA[Javascript]]></category>
		<category><![CDATA[Web Design, Graphics and Styling]]></category>
		<category><![CDATA[XHTML and CSS]]></category>
		<category><![CDATA[ie 10]]></category>
		<category><![CDATA[internet explorer]]></category>
		<category><![CDATA[mix 11]]></category>

		<guid isPermaLink="false">/index.php/2011/04/first-look-at-ie-10/</guid>
		<description><![CDATA[Channel 9 has made available a video on their site about Internet Explorer 10, I have embedded the video here



Here is what they say on the channel 9 site

Just when you were expecting to hear more about IE9 on this opening day of Mix '11, and t&#8230;]]></description>
				<content:encoded><![CDATA[<p>Channel 9 has made available a video on their site about Internet Explorer 10, I have embedded the video here</p>
<p><iframe style="height: 288px; width: 512px; " src="http://channel9.msdn.com/posts/First-Look-Internet-Exploer-10-Platform-Preview/player?w=512&amp;h=288" scrolling="no" frameborder="0"></iframe></p>
<p>Here is what they say on the channel 9 site</p>
<blockquote><p>Just when you were expecting to hear more about IE9 on this opening day of Mix &#8217;11, and today we&#8217;ll be talking about the IE10 Platform Preview. IE10 builds on IE9 with support for even more standards like CSS3 gradients, multi-column, and grid layouts. In this video Rob Mauceri walks us through some of the new features of IE10 including an example of flowing of content in multi-column layouts.</p></blockquote>
<p>
Here is Dean Hachamovitch, corporate vice president in charge of the Internet Explorer team at Microsoft wearing a shirt with the IE 10 logo during the IE keynote ate Mix 11 today.<br />
<a href="http://www.flickr.com/photos/denisgobo/5613176833/" title="IE10 preview released"><img src="http://farm6.static.flickr.com/5143/5613176833_d7febf783d.jpg" width="337" height="307" alt="IE10 preview released" /></a></p>
<p>Developers can download the Internet Explorer 10 Platform Preview at http://www.IETestDrive.com/ and provide direct feedback through new code refreshes approximately every 12 weeks.</p>
<p>I wonder if they are going to do a more aggressive release schedule like the Chrome browser. Anything is better than the waiting period between IE6 and IE7, that was insane.</p>
<p>Make sure to check it out here: http://channel9.msdn.com/posts/First-Look-Internet-Exploer-10-Platform-Preview</p>
<p>Also make sure to check out Mix 11 here http://live.visitmix.com/ for the keynotes over the next 3 days</p>
]]></content:encoded>
			<wfw:commentRss>/index.php/webdev/webdesigngraphicsstyling/first-look-at-ie-10/feed/</wfw:commentRss>
		<slash:comments>3</slash:comments>
		</item>
	</channel>
</rss>
