<?xml version="1.0" encoding="UTF-8"?><feed
  xmlns="http://www.w3.org/2005/Atom"
  xmlns:thr="http://purl.org/syndication/thread/1.0"
  xml:lang="en-US"
  xml:base="/wp-atom.php"
   >
	<title type="text">Web Developer &#8211; LessthanDot</title>
	<subtitle type="text">A Technical Community for IT Professionals</subtitle>

	<updated>2019-03-09T12:50:36Z</updated>

	<link rel="alternate" type="text/html" href="/" />
	<id>/index.php/feed/atom/</id>
	<link rel="self" type="application/atom+xml" href="/index.php/category/webdev/feed/atom/" />

	<generator uri="https://wordpress.org/" version="4.6.1">WordPress</generator>
	<entry>
		<author>
			<name>Eli Weinstock-Herman (tarwn)</name>
					</author>
		<title type="html"><![CDATA[Adding User-Managed API Keys to ASP.Net Core 2 w/ Cosmos DB]]></title>
		<link rel="alternate" type="text/html" href="/index.php/uncategorized/adding-user-managed-api-keys-to-asp-net-core-2-w-cosmos-db/" />
		<id>/?p=9201</id>
		<updated>2018-04-24T12:58:45Z</updated>
		<published>2018-04-24T12:58:45Z</published>
		<category scheme="/" term="ASP.NET" /><category scheme="/" term="Uncategorized" /><category scheme="/" term="ASP.Net Core 2" /><category scheme="/" term="CosmosDB" />		<summary type="html"><![CDATA[I’m building the foundation for an ASP.Net Core 2 site with Cosmos DB as the back-end store and want to build in the idea of user-manageable API keys. In the past two posts, I&#8217;ve added interactive registration and login to the application using built-in Cookie and Twitter middleware on top of custom authorization logic and [&#8230;]]]></summary>
		<content type="html" xml:base="/index.php/uncategorized/adding-user-managed-api-keys-to-asp-net-core-2-w-cosmos-db/"><![CDATA[<p>I’m building the foundation for an ASP.Net Core 2 site with <a href="https://azure.microsoft.com/en-us/services/cosmos-db/">Cosmos DB</a> as the back-end store and want to build in the idea of user-manageable API keys. In the past two posts, I&#8217;ve added interactive registration and login to the application using built-in Cookie and Twitter middleware on top of custom authorization logic and Cosmos DB. In this one, we&#8217;ll be adding endpoints that require API Keys that can be created and revoked by the user.</p>
<div id="attachment_9155" style="width: 610px" class="wp-caption aligncenter"><img src="/wp-content/uploads/2018/04/aspnetcore2cosmos_106-600x406.png" alt="3 Authentication Scenarios: User/Pass, Twitter, API Keys" width="600" height="406" class="size-medium-width wp-image-9155" srcset="/wp-content/uploads/2018/04/aspnetcore2cosmos_106-600x406.png 600w, /wp-content/uploads/2018/04/aspnetcore2cosmos_106-300x203.png 300w, /wp-content/uploads/2018/04/aspnetcore2cosmos_106-443x300.png 443w, /wp-content/uploads/2018/04/aspnetcore2cosmos_106.png 748w" sizes="(max-width: 600px) 100vw, 600px" /><p class="wp-caption-text">3 Authentication Scenarios: User/Pass, Twitter, API Keys</p></div>
<p>While I started out with credentials stored directly in the <code>LoginUser</code> Document, in the prior post I decided to start treating authentication mechanisms as separate documents (my house keys are not a property of me). </p>
<div id="attachment_9181" style="width: 236px" class="wp-caption aligncenter"><img src="/wp-content/uploads/2018/04/aspnetcore2cosmos_202.png" alt="Defining People (Users) Separate from House Keys (User Authentication)" width="226" height="161" class="size-full wp-image-9181" /><p class="wp-caption-text">Defining People (Users) Separate from House Keys (User Authentication)</p></div>
<p>In this post, that separation will start paying off, as it will allow us to add API key entries for the user and easily &#8220;revoke&#8221; them by switching their authentication type from &#8220;APIKey&#8221; to &#8220;RevokedAPIKey&#8221;, keeping the data available for audits but ensuring it&#8217;s no longer valid for API authentication.</p>
<style>
.note-area{
   border: 1px solid #eeeeee; 
   border-left-width: 16px; 
   padding: 1em;
   margin: 1em 0;
}
.warning-area{
   border: 1px solid #FFdddd; 
   border-left-width: 16px; 
   padding: 1em;
   margin: 1em 0;
}
</style>
<div class="note-area">
Posts in this series:</p>
<ul style="margin: .5em">
<li><a href="/index.php/webdev/serverprogramming/aspnet/asp-net-core-2-w-cosmosdb-getting-started/">ASP.Net Core 2 w/ Cosmos DB: Getting Started</a></li>
<li><a href="/index.php/webdev/serverprogramming/aspnet/custom-authentication-in-asp-net-core-2-w-cosmos-db/">Custom Authentication in ASP.Net Core 2 w/ Cosmos DB</a></li>
<li><a href="/index.php/webdev/serverprogramming/aspnet/adding-twitter-authentication-to-an-asp-net-core-2-site-w-cosmos-db/">Adding Twitter Authentication to an ASP.Net Core 2 site w/ Cosmos DB</a></li>
<li>Adding User-Managed API Keys to ASP.Net Core 2 w/ Cosmos DB (You Are Here!)</li>
</ul>
</div>
<h2>Breaking it down</h2>
<p>In the last two posts, we laid the groundwork for authentication from the UI down to Cosmos DB. With this post, we&#8217;re going to build a minimal screen to let users generate API Keys, some protected API endpoints, and the logic to tie these into the <code>LoginUserAuthentications</code> DocumentCollection in Cosmos DB.</p>
<div id="attachment_9202" style="width: 426px" class="wp-caption aligncenter"><img src="/wp-content/uploads/2018/04/aspnetcore2cosmos_301.png" alt="From UI down to Cosmos DB back up to Middleware" width="416" height="874" class="size-full wp-image-9202" srcset="/wp-content/uploads/2018/04/aspnetcore2cosmos_301.png 416w, /wp-content/uploads/2018/04/aspnetcore2cosmos_301-143x300.png 143w" sizes="(max-width: 416px) 100vw, 416px" /><p class="wp-caption-text">From UI down to Cosmos DB back up to Middleware</p></div>
<p>Most of the work is building on the <a href="">previous post</a>, the big difference is a new way to authenticate and some middleware to do the work.</p>
<p>I worked on this in two pieces:</p>
<ul>
<li><b>User Interface:</b> Create/Revoke API keys in the UI down to Cosmos DB</li>
<li><b>Making API Calls</b>: Protected API endpoints, Middleware, Membership business logic</li>
</ul>
<p>The source code through this set of changes is available here: <a href="https://github.com/tarwn/Sample_ASPNetCore2AndCosmosDB/tree/Post-%234" title="Github: Source as of this post">github: Sample_ASPNetCore2AndCosmosDB, Post #4 Branch</a></p>
<h2>Task 1: User-managed API Keys</h2>
<p>In this set of changes, we&#8217;re going to add some very basic screens to show the list of API Keys, add a new one, and revoke an existing one. </p>
<div class="note-area">Why Revoke instead of Delete? I chose to revoke API Keys to help support audit logs and instrumentation down the road. This may be a case of YAGNI, but it was easy enough to implement and also tries a pattern I may refactor to using for passwords and password history.</div>
<h3>UI Screens</h3>
<p>Let&#8217;s start with the screens and work down the stack. I&#8217;ve created a new (and poorly named) <code>UserController</code> for the new screens.</p>
<p><a href="https://github.com/tarwn/Sample_ASPNetCore2AndCosmosDB/blob/Post-%234/SampleCosmosCore2App/Controllers/UserController.cs">SampleCosmosCore2App/Controllers/UserController.cs</a></p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="csharp"><thead><tr><td colspan="2"  class="head">C#</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
</pre></td><td class="de1"><pre class="de1"><span class="br0">&#91;</span>HttpGet<span class="br0">&#40;</span><span class="st0">&quot;&quot;</span><span class="br0">&#41;</span><span class="br0">&#93;</span>
<span class="kw1">public</span> async Task<span class="sy0">&lt;</span>IActionResult<span class="sy0">&gt;</span> IndexAsync<span class="br0">&#40;</span><span class="kw4">string</span> error<span class="br0">&#41;</span>
<span class="br0">&#123;</span>
&nbsp; &nbsp; <span class="kw1">var</span> sessionId <span class="sy0">=</span> _membership<span class="sy0">.</span><span class="me1">GetSessionId</span><span class="br0">&#40;</span>HttpContext<span class="sy0">.</span><span class="me1">User</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; <span class="kw1">var</span> user <span class="sy0">=</span> await _persistence<span class="sy0">.</span><span class="me1">Users</span><span class="sy0">.</span><span class="me1">GetUserBySessionIdAsync</span><span class="br0">&#40;</span>sessionId<span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; <span class="kw1">var</span> auths <span class="sy0">=</span> await _persistence<span class="sy0">.</span><span class="me1">Users</span><span class="sy0">.</span><span class="me1">GetUserAuthenticationsAsync</span><span class="br0">&#40;</span>user<span class="sy0">.</span><span class="me1">Id</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; <span class="co1">// ... grouping logic to create model ...</span>
&nbsp; &nbsp;
&nbsp; &nbsp; <span class="kw1">return</span> View<span class="br0">&#40;</span><span class="st0">&quot;Index&quot;</span>, model<span class="br0">&#41;</span><span class="sy0">;</span>
<span class="br0">&#125;</span>
&nbsp;
<span class="br0">&#91;</span>HttpGet<span class="br0">&#40;</span><span class="st0">&quot;addKey&quot;</span><span class="br0">&#41;</span><span class="br0">&#93;</span>
<span class="kw1">public</span> IActionResult AddKey<span class="br0">&#40;</span><span class="br0">&#41;</span>
<span class="br0">&#123;</span>
&nbsp; &nbsp; <span class="kw1">var</span> model <span class="sy0">=</span> <span class="kw3">new</span> NewKeyModel<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; <span class="kw1">return</span> View<span class="br0">&#40;</span><span class="st0">&quot;AddKey&quot;</span>, model<span class="br0">&#41;</span><span class="sy0">;</span>
<span class="br0">&#125;</span>
&nbsp;
<span class="br0">&#91;</span>HttpPost<span class="br0">&#40;</span><span class="st0">&quot;addKey&quot;</span><span class="br0">&#41;</span><span class="br0">&#93;</span>
<span class="kw1">public</span> async Task<span class="sy0">&lt;</span>IActionResult<span class="sy0">&gt;</span> PostAddKeyAsync<span class="br0">&#40;</span>NewKeyModel model<span class="br0">&#41;</span>
<span class="br0">&#123;</span>
&nbsp; &nbsp; <span class="kw1">if</span> <span class="br0">&#40;</span><span class="sy0">!</span>ModelState<span class="sy0">.</span><span class="me1">IsValid</span><span class="br0">&#41;</span>
&nbsp; &nbsp; <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">return</span> View<span class="br0">&#40;</span><span class="st0">&quot;AddKey&quot;</span>, model<span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp;
&nbsp; &nbsp; <span class="kw1">var</span> sessionId <span class="sy0">=</span> _membership<span class="sy0">.</span><span class="me1">GetSessionId</span><span class="br0">&#40;</span>HttpContext<span class="sy0">.</span><span class="me1">User</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; <span class="kw1">var</span> user <span class="sy0">=</span> await _persistence<span class="sy0">.</span><span class="me1">Users</span><span class="sy0">.</span><span class="me1">GetUserBySessionIdAsync</span><span class="br0">&#40;</span>sessionId<span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; <span class="kw1">var</span> generatedKey <span class="sy0">=</span> _membership<span class="sy0">.</span><span class="me1">GenerateAPIKey</span><span class="br0">&#40;</span>user<span class="sy0">.</span><span class="me1">Id</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; <span class="kw1">var</span> result <span class="sy0">=</span> await _membership<span class="sy0">.</span><span class="me1">AddAuthenticationAsync</span><span class="br0">&#40;</span>user<span class="sy0">.</span><span class="me1">Id</span>, <span class="st0">&quot;APIKey&quot;</span>, generatedKey, model<span class="sy0">.</span><span class="me1">Name</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; <span class="kw1">var</span> resultModel <span class="sy0">=</span> <span class="co1">// ... create the model ...</span>
&nbsp;
&nbsp; &nbsp; <span class="kw1">return</span> View<span class="br0">&#40;</span><span class="st0">&quot;ShowKey&quot;</span>, resultModel<span class="br0">&#41;</span><span class="sy0">;</span>
<span class="br0">&#125;</span>
&nbsp;
<span class="br0">&#91;</span>HttpGet<span class="br0">&#40;</span><span class="st0">&quot;revoke&quot;</span><span class="br0">&#41;</span><span class="br0">&#93;</span>
<span class="kw1">public</span> async Task<span class="sy0">&lt;</span>IActionResult<span class="sy0">&gt;</span> Revoke<span class="br0">&#40;</span><span class="kw4">string</span> id<span class="br0">&#41;</span>
<span class="br0">&#123;</span>
&nbsp; &nbsp; <span class="kw1">var</span> sessionId <span class="sy0">=</span> _membership<span class="sy0">.</span><span class="me1">GetSessionId</span><span class="br0">&#40;</span>HttpContext<span class="sy0">.</span><span class="me1">User</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; <span class="kw1">var</span> user <span class="sy0">=</span> await _persistence<span class="sy0">.</span><span class="me1">Users</span><span class="sy0">.</span><span class="me1">GetUserBySessionIdAsync</span><span class="br0">&#40;</span>sessionId<span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; <span class="kw1">var</span> result <span class="sy0">=</span> await _membership<span class="sy0">.</span><span class="me1">RevokeAuthenticationAsync</span><span class="br0">&#40;</span>user<span class="sy0">.</span><span class="me1">Id</span>, id<span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; <span class="kw1">if</span> <span class="br0">&#40;</span>result<span class="sy0">.</span><span class="me1">Failed</span><span class="br0">&#41;</span>
&nbsp; &nbsp; <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">return</span> RedirectToAction<span class="br0">&#40;</span><span class="st0">&quot;IndexAsync&quot;</span>, <span class="kw3">new</span> <span class="br0">&#123;</span> error <span class="sy0">=</span> result<span class="sy0">.</span><span class="me1">Error</span> <span class="br0">&#125;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp; &nbsp; <span class="kw1">else</span>
&nbsp; &nbsp; <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">return</span> RedirectToAction<span class="br0">&#40;</span><span class="st0">&quot;IndexAsync&quot;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; <span class="br0">&#125;</span>
<span class="br0">&#125;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">[HttpGet("")]
public async Task&lt;IActionResult&gt; IndexAsync(string error)
{
	var sessionId = _membership.GetSessionId(HttpContext.User);
	var user = await _persistence.Users.GetUserBySessionIdAsync(sessionId);
	var auths = await _persistence.Users.GetUserAuthenticationsAsync(user.Id);

	// ... grouping logic to create model ...
   
	return View("Index", model);
}

[HttpGet("addKey")]
public IActionResult AddKey()
{
	var model = new NewKeyModel();
	return View("AddKey", model);
}

[HttpPost("addKey")]
public async Task&lt;IActionResult&gt; PostAddKeyAsync(NewKeyModel model)
{
	if (!ModelState.IsValid)
	{
		return View("AddKey", model);
	}

	var sessionId = _membership.GetSessionId(HttpContext.User);
	var user = await _persistence.Users.GetUserBySessionIdAsync(sessionId);

	var generatedKey = _membership.GenerateAPIKey(user.Id);
	var result = await _membership.AddAuthenticationAsync(user.Id, "APIKey", generatedKey, model.Name);
	var resultModel = // ... create the model ...

	return View("ShowKey", resultModel);
}

[HttpGet("revoke")]
public async Task&lt;IActionResult&gt; Revoke(string id)
{
	var sessionId = _membership.GetSessionId(HttpContext.User);
	var user = await _persistence.Users.GetUserBySessionIdAsync(sessionId);

	var result = await _membership.RevokeAuthenticationAsync(user.Id, id);
	if (result.Failed)
	{
		return RedirectToAction("IndexAsync", new { error = result.Error });
	}
	else
	{
		return RedirectToAction("IndexAsync");
	}
}</pre></div></div>

<p><code>IndexAsync</code> uses <code>ICustomMembership</code> to get the current logged in user&#8217;s information, then uses a new <code>UserPersistence</code> method to get all available <code>LoginUserAuthentications</code> from Cosmos DB (which will include Twitter, revoked API Tokens, and more as we go along).</p>
<p><code>AddKey</code> and <code>PostAddKeyAsync</code> display a form to create a new API Token and receive the POST, respectively. When we receive the POST, we rely on a new method in <code>ICustomMembership</code> to generate a token then use the existing method (built while adding Twitter) to store that token.</p>
<p><code>Revoke</code> uses a new <code>ICustomMembership</code> method to revoke a given key (and I only just noticed I left off the conventional Async suffix, oops).</p>
<p>The AddKey view is a basic 1-field form (included more to show you I don&#8217;t have anything up my sleeves):</p>
<p><a href="https://github.com/tarwn/Sample_ASPNetCore2AndCosmosDB/blob/Post-%234/SampleCosmosCore2App/Views/User/AddKey.cshtml">SampleCosmosCore2App/Views/User/AddKey.cshtml</a></p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="html4strict"><thead><tr><td colspan="2"  class="head">HTML</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
</pre></td><td class="de1"><pre class="de1">@model SampleCosmosCore2App.Models.User.NewKeyModel
@{
&nbsp; &nbsp; ViewData[&quot;Title&quot;] = &quot;AddKey&quot;;
&nbsp; &nbsp; Layout = &quot;~/Views/Shared/Layout.cshtml&quot;;
}
&nbsp;
<span class="sc2">&lt;<span class="kw2">div</span> <span class="kw3">class</span><span class="sy0">=</span><span class="st0">&quot;box&quot;</span>&gt;</span>
&nbsp; &nbsp; <span class="sc2">&lt;<span class="kw2">h2</span>&gt;</span>AddKey<span class="sc2">&lt;<span class="sy0">/</span><span class="kw2">h2</span>&gt;</span>
&nbsp;
&nbsp; &nbsp; <span class="sc2">&lt;<span class="kw2">form</span> asp-<span class="kw3">action</span><span class="sy0">=</span><span class="st0">&quot;AddKey&quot;</span>&gt;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="sc2">&lt;<span class="kw2">div</span> asp-validation-<span class="kw3">summary</span><span class="sy0">=</span><span class="st0">&quot;ModelOnly&quot;</span> <span class="kw3">class</span><span class="sy0">=</span><span class="st0">&quot;text-danger&quot;</span>&gt;&lt;<span class="sy0">/</span><span class="kw2">div</span>&gt;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="sc2">&lt;<span class="kw2">div</span> <span class="kw3">class</span><span class="sy0">=</span><span class="st0">&quot;form-group&quot;</span>&gt;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="sc2">&lt;<span class="kw2">label</span> asp-<span class="kw3">for</span><span class="sy0">=</span><span class="st0">&quot;Name&quot;</span> <span class="kw3">class</span><span class="sy0">=</span><span class="st0">&quot;control-label&quot;</span>&gt;&lt;<span class="sy0">/</span><span class="kw2">label</span>&gt;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="sc2">&lt;<span class="kw2">input</span> asp-<span class="kw3">for</span><span class="sy0">=</span><span class="st0">&quot;Name&quot;</span> <span class="kw3">class</span><span class="sy0">=</span><span class="st0">&quot;form-control&quot;</span> <span class="sy0">/</span>&gt;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="sc2">&lt;<span class="kw2">span</span> asp-validation-<span class="kw3">for</span><span class="sy0">=</span><span class="st0">&quot;Name&quot;</span> <span class="kw3">class</span><span class="sy0">=</span><span class="st0">&quot;text-danger&quot;</span>&gt;&lt;<span class="sy0">/</span><span class="kw2">span</span>&gt;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="sc2">&lt;<span class="sy0">/</span><span class="kw2">div</span>&gt;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="sc2">&lt;<span class="kw2">div</span> <span class="kw3">class</span><span class="sy0">=</span><span class="st0">&quot;form-group&quot;</span>&gt;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="sc2">&lt;<span class="kw2">input</span> <span class="kw3">type</span><span class="sy0">=</span><span class="st0">&quot;submit&quot;</span> <span class="kw3">value</span><span class="sy0">=</span><span class="st0">&quot;Create API Key&quot;</span> <span class="kw3">class</span><span class="sy0">=</span><span class="st0">&quot;btn btn-default&quot;</span> <span class="sy0">/</span>&gt;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="sc2">&lt;<span class="sy0">/</span><span class="kw2">div</span>&gt;</span>
&nbsp; &nbsp; <span class="sc2">&lt;<span class="sy0">/</span><span class="kw2">form</span>&gt;</span>
&nbsp;
<span class="sc2">&lt;<span class="sy0">/</span><span class="kw2">div</span>&gt;</span>
<span class="sc2">&lt;<span class="kw2">div</span>&gt;</span>
&nbsp; &nbsp; <span class="sc2">&lt;<span class="kw2">a</span> asp-<span class="kw3">action</span><span class="sy0">=</span><span class="st0">&quot;IndexAsync&quot;</span>&gt;</span>Back to List<span class="sc2">&lt;<span class="sy0">/</span><span class="kw2">a</span>&gt;</span>
<span class="sc2">&lt;<span class="sy0">/</span><span class="kw2">div</span>&gt;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">@model SampleCosmosCore2App.Models.User.NewKeyModel
@{
    ViewData["Title"] = "AddKey";
    Layout = "~/Views/Shared/Layout.cshtml";
}

&lt;div class="box"&gt;
    &lt;h2&gt;AddKey&lt;/h2&gt;

    &lt;form asp-action="AddKey"&gt;
        &lt;div asp-validation-summary="ModelOnly" class="text-danger"&gt;&lt;/div&gt;
        &lt;div class="form-group"&gt;
            &lt;label asp-for="Name" class="control-label"&gt;&lt;/label&gt;
            &lt;input asp-for="Name" class="form-control" /&gt;
            &lt;span asp-validation-for="Name" class="text-danger"&gt;&lt;/span&gt;
        &lt;/div&gt;
        &lt;div class="form-group"&gt;
            &lt;input type="submit" value="Create API Key" class="btn btn-default" /&gt;
        &lt;/div&gt;
    &lt;/form&gt;

&lt;/div&gt;
&lt;div&gt;
    &lt;a asp-action="IndexAsync"&gt;Back to List&lt;/a&gt;
&lt;/div&gt;</pre></div></div>

<p>And once it&#8217;s created, we then show it to you with &#8220;ShowKey&#8221;:</p>
<p><a href="https://github.com/tarwn/Sample_ASPNetCore2AndCosmosDB/blob/Post-%234/SampleCosmosCore2App/Views/User/ShowKey.cshtml">SampleCosmosCore2App/Views/User/ShowKey.cshtml</a></p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="html4strict"><thead><tr><td colspan="2"  class="head">HTML</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
</pre></td><td class="de1"><pre class="de1">@model SampleCosmosCore2App.Models.User.UserAuthenticationModel
@{
&nbsp; &nbsp; ViewData[&quot;Title&quot;] = &quot;ShowKey&quot;;
&nbsp; &nbsp; Layout = &quot;~/Views/Shared/Layout.cshtml&quot;;
}
&nbsp;
<span class="sc2">&lt;<span class="kw2">div</span> <span class="kw3">class</span><span class="sy0">=</span><span class="st0">&quot;box&quot;</span>&gt;</span>
&nbsp; &nbsp; <span class="sc2">&lt;<span class="kw2">h2</span>&gt;</span>Your New API Key<span class="sc2">&lt;<span class="sy0">/</span><span class="kw2">h2</span>&gt;</span>
&nbsp; &nbsp; <span class="sc2">&lt;<span class="kw2">p</span>&gt;</span>
&nbsp; &nbsp; &nbsp; &nbsp; You will need the API Key Id and API Key Secret to make an API call. Save your API Key Secret now, we won't show it again!
&nbsp; &nbsp; <span class="sc2">&lt;<span class="sy0">/</span><span class="kw2">p</span>&gt;</span>
&nbsp;
&nbsp; &nbsp; <span class="sc2">&lt;<span class="kw2">div</span>&gt;</span>
&nbsp; &nbsp; &nbsp; &nbsp; Name: @Model.Name<span class="sc2">&lt;<span class="kw2">br</span> <span class="sy0">/</span>&gt;</span>
&nbsp; &nbsp; &nbsp; &nbsp; API Key Id: @Model.Id<span class="sc2">&lt;<span class="kw2">br</span> <span class="sy0">/</span>&gt;</span>
&nbsp; &nbsp; &nbsp; &nbsp; API Key Secret: @Model.Identity<span class="sc2">&lt;<span class="kw2">br</span> <span class="sy0">/</span>&gt;</span>
&nbsp; &nbsp; <span class="sc2">&lt;<span class="sy0">/</span><span class="kw2">div</span>&gt;</span>
<span class="sc2">&lt;<span class="sy0">/</span><span class="kw2">div</span>&gt;</span>
<span class="sc2">&lt;<span class="kw2">div</span>&gt;</span>
&nbsp; &nbsp; <span class="sc2">&lt;<span class="kw2">a</span> asp-<span class="kw3">action</span><span class="sy0">=</span><span class="st0">&quot;IndexAsync&quot;</span>&gt;</span>Back to List<span class="sc2">&lt;<span class="sy0">/</span><span class="kw2">a</span>&gt;</span>
<span class="sc2">&lt;<span class="sy0">/</span><span class="kw2">div</span>&gt;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">@model SampleCosmosCore2App.Models.User.UserAuthenticationModel
@{
    ViewData["Title"] = "ShowKey";
    Layout = "~/Views/Shared/Layout.cshtml";
}

&lt;div class="box"&gt;
    &lt;h2&gt;Your New API Key&lt;/h2&gt;
    &lt;p&gt;
        You will need the API Key Id and API Key Secret to make an API call. Save your API Key Secret now, we won't show it again!
    &lt;/p&gt;

    &lt;div&gt;
        Name: @Model.Name&lt;br /&gt;
        API Key Id: @Model.Id&lt;br /&gt;
        API Key Secret: @Model.Identity&lt;br /&gt;
    &lt;/div&gt;
&lt;/div&gt;
&lt;div&gt;
    &lt;a asp-action="IndexAsync"&gt;Back to List&lt;/a&gt;
&lt;/div&gt;</pre></div></div>

<p>We&#8217;ll be requiring the pair of API Key Id and API Key Secret to authorize API calls later. The Id is the generated Cosmos DB <code>id</code> and the Key is the <code>ICustomMembership</code> generated value.</p>
<p>Displaying the index is a little more complex, as there are potentially several types of <code>LoginUserAuthentications</code> records available, so we include areas for specific keys and ignore the ones we don&#8217;t currently recognize:</p>
<p><a href="https://github.com/tarwn/Sample_ASPNetCore2AndCosmosDB/blob/Post-%234/SampleCosmosCore2App/Views/User/Index.cshtml">SampleCosmosCore2App/Views/User/Index.cshtml</a></p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="html4strict"><thead><tr><td colspan="2"  class="head">HTML</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
</pre></td><td class="de1"><pre class="de1">@model SampleCosmosCore2App.Models.User.UserIndexModel
&nbsp;
@{
&nbsp; &nbsp; ViewData[&quot;Title&quot;] = &quot;Index&quot;;
&nbsp; &nbsp; Layout = &quot;~/Views/Shared/Layout.cshtml&quot;;
}
&nbsp;
<span class="sc2">&lt;<span class="kw2">h2</span>&gt;</span>Your Account<span class="sc2">&lt;<span class="sy0">/</span><span class="kw2">h2</span>&gt;</span>
<span class="sc2">&lt;<span class="kw2">div</span> asp-validation-<span class="kw3">summary</span><span class="sy0">=</span><span class="st0">&quot;ModelOnly&quot;</span> <span class="kw3">class</span><span class="sy0">=</span><span class="st0">&quot;text-danger&quot;</span>&gt;&lt;<span class="sy0">/</span><span class="kw2">div</span>&gt;</span>
&nbsp;
Username: @Model.User.Username<span class="sc2">&lt;<span class="kw2">br</span> <span class="sy0">/</span>&gt;</span>
Registered: @Model.User.CreationTime<span class="sc2">&lt;<span class="kw2">br</span> <span class="sy0">/</span>&gt;</span>
<span class="sc2">&lt;<span class="kw2">br</span> <span class="sy0">/</span>&gt;</span>
&nbsp;
Twitter Status: @if (Model.UserAuthentications.ContainsKey(&quot;Twitter&quot;))
{
&nbsp; &nbsp; var twitter = Model.UserAuthentications[&quot;Twitter&quot;].Single();
&nbsp; &nbsp; <span class="sc2">&lt;<span class="kw2">text</span>&gt;</span>@twitter.Name at @twitter.CreationTime<span class="sc2">&lt;<span class="sy0">/</span><span class="kw2">text</span>&gt;</span>
}
else
{
&nbsp; &nbsp; <span class="sc2">&lt;<span class="kw2">text</span>&gt;</span>Not Linked<span class="sc2">&lt;<span class="sy0">/</span><span class="kw2">text</span>&gt;</span>
}
<span class="sc2">&lt;<span class="kw2">br</span> <span class="sy0">/</span>&gt;</span>
&nbsp;
<span class="sc2">&lt;<span class="kw2">h3</span>&gt;</span>API Keys<span class="sc2">&lt;<span class="sy0">/</span><span class="kw2">h3</span>&gt;</span>
<span class="sc2">&lt;<span class="kw2">table</span>&gt;</span>
&nbsp; &nbsp; <span class="sc2">&lt;<span class="kw2">tr</span>&gt;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="sc2">&lt;<span class="kw2">th</span>&gt;</span>Created<span class="sc2">&lt;<span class="sy0">/</span><span class="kw2">th</span>&gt;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="sc2">&lt;<span class="kw2">th</span>&gt;</span>Name<span class="sc2">&lt;<span class="sy0">/</span><span class="kw2">th</span>&gt;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="sc2">&lt;<span class="kw2">th</span>&gt;</span>API Key Id<span class="sc2">&lt;<span class="sy0">/</span><span class="kw2">th</span>&gt;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="sc2">&lt;<span class="kw2">th</span>&gt;</span>API Key Secret<span class="sc2">&lt;<span class="sy0">/</span><span class="kw2">th</span>&gt;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="sc2">&lt;<span class="kw2">th</span>&gt;&lt;<span class="sy0">/</span><span class="kw2">th</span>&gt;</span>
&nbsp; &nbsp; <span class="sc2">&lt;<span class="sy0">/</span><span class="kw2">tr</span>&gt;</span>
&nbsp; &nbsp; @if (Model.UserAuthentications.ContainsKey(&quot;APIKey&quot;))
&nbsp; &nbsp; {
&nbsp; &nbsp; &nbsp; &nbsp; var keys = Model.UserAuthentications[&quot;APIKey&quot;];
&nbsp; &nbsp; &nbsp; &nbsp; foreach (var key in keys)
&nbsp; &nbsp; &nbsp; &nbsp; {
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="sc2">&lt;<span class="kw2">tr</span>&gt;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="sc2">&lt;<span class="kw2">td</span>&gt;</span>@key.CreationTime<span class="sc2">&lt;<span class="sy0">/</span><span class="kw2">td</span>&gt;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="sc2">&lt;<span class="kw2">td</span>&gt;</span>@key.Name<span class="sc2">&lt;<span class="sy0">/</span><span class="kw2">td</span>&gt;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="sc2">&lt;<span class="kw2">td</span>&gt;</span>@key.Id<span class="sc2">&lt;<span class="sy0">/</span><span class="kw2">td</span>&gt;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="sc2">&lt;<span class="kw2">td</span>&gt;</span>@key.GetMaskedIdentity()<span class="sc2">&lt;<span class="sy0">/</span><span class="kw2">td</span>&gt;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="sc2">&lt;<span class="kw2">td</span>&gt;&lt;<span class="kw2">a</span> asp-<span class="kw3">action</span><span class="sy0">=</span><span class="st0">&quot;Revoke&quot;</span> asp-route-<span class="kw3">id</span><span class="sy0">=</span><span class="st0">&quot;@key.Id&quot;</span>&gt;</span>Revoke<span class="sc2">&lt;<span class="sy0">/</span><span class="kw2">a</span>&gt;&lt;<span class="sy0">/</span><span class="kw2">td</span>&gt;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="sc2">&lt;<span class="sy0">/</span><span class="kw2">tr</span>&gt;</span>
&nbsp; &nbsp; &nbsp; &nbsp; }
&nbsp; &nbsp; }
&nbsp; &nbsp; <span class="sc2">&lt;<span class="kw2">tr</span>&gt;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="sc2">&lt;<span class="kw2">td</span> <span class="kw3">colspan</span><span class="sy0">=</span><span class="st0">&quot;5&quot;</span>&gt;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="sc2">&lt;<span class="kw2">a</span> asp-<span class="kw3">action</span><span class="sy0">=</span><span class="st0">&quot;AddKey&quot;</span>&gt;</span>Add a key<span class="sc2">&lt;<span class="sy0">/</span><span class="kw2">a</span>&gt;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="sc2">&lt;<span class="sy0">/</span><span class="kw2">td</span>&gt;</span>
&nbsp; &nbsp; <span class="sc2">&lt;<span class="sy0">/</span><span class="kw2">tr</span>&gt;</span>
<span class="sc2">&lt;<span class="sy0">/</span><span class="kw2">table</span>&gt;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">@model SampleCosmosCore2App.Models.User.UserIndexModel

@{
    ViewData["Title"] = "Index";
    Layout = "~/Views/Shared/Layout.cshtml";
}

&lt;h2&gt;Your Account&lt;/h2&gt;
&lt;div asp-validation-summary="ModelOnly" class="text-danger"&gt;&lt;/div&gt;

Username: @Model.User.Username&lt;br /&gt;
Registered: @Model.User.CreationTime&lt;br /&gt;
&lt;br /&gt;

Twitter Status: @if (Model.UserAuthentications.ContainsKey("Twitter"))
{
    var twitter = Model.UserAuthentications["Twitter"].Single();
    &lt;text&gt;@twitter.Name at @twitter.CreationTime&lt;/text&gt;
}
else
{
    &lt;text&gt;Not Linked&lt;/text&gt;
}
&lt;br /&gt;

&lt;h3&gt;API Keys&lt;/h3&gt;
&lt;table&gt;
    &lt;tr&gt;
        &lt;th&gt;Created&lt;/th&gt;
        &lt;th&gt;Name&lt;/th&gt;
        &lt;th&gt;API Key Id&lt;/th&gt;
        &lt;th&gt;API Key Secret&lt;/th&gt;
        &lt;th&gt;&lt;/th&gt;
    &lt;/tr&gt;
    @if (Model.UserAuthentications.ContainsKey("APIKey"))
    {
        var keys = Model.UserAuthentications["APIKey"];
        foreach (var key in keys)
        {
            &lt;tr&gt;
                &lt;td&gt;@key.CreationTime&lt;/td&gt;
                &lt;td&gt;@key.Name&lt;/td&gt;
                &lt;td&gt;@key.Id&lt;/td&gt;
                &lt;td&gt;@key.GetMaskedIdentity()&lt;/td&gt;
                &lt;td&gt;&lt;a asp-action="Revoke" asp-route-id="@key.Id"&gt;Revoke&lt;/a&gt;&lt;/td&gt;
            &lt;/tr&gt;
        }
    }
    &lt;tr&gt;
        &lt;td colspan="5"&gt;
            &lt;a asp-action="AddKey"&gt;Add a key&lt;/a&gt;
        &lt;/td&gt;
    &lt;/tr&gt;
&lt;/table&gt;</pre></div></div>

<p>Again, this HTML won&#8217;t win any awards, it&#8217;s here to let us functionally build out what we need. Later in a real application we would replace this with a better form or front-end templates and JSON.</p>
<h3>Membership + Persistence</h3>
<p>The screens above need some new capabilities in the membership logic (<code>CosmosDBMembership</code>) and queries to Cosmos DB (<code>UserPersistence</code>), so before we test we need to add those in.</p>
<p>The new methods are:</p>
<ul>
<li>CosmosDBMembership.GenerateAPIKey</li>
<li>CosmosDBMembership.AddAuthenticationAsync</li>
<li>CosmosDBMembership.RevokeAuthenticationAsync</li>
<li>UserPersistence.GetUserAuthenticationAsync</li>
<li>UserPersistence.UpdateUserAuthenticationAsync</li>
</ul>
<div class="note-area">
If you look at the <a href="https://github.com/tarwn/Sample_ASPNetCore2AndCosmosDB/commit/1404bde5677301f385fe9189eb89ce710745685e" title="commit diff on github">commit details</a>, you&#8217;ll also see an un-committed fix to UserPersistence.GetUserBySessionIdAsync from the prior post (oops).
</div>
<p><a href="https://github.com/tarwn/Sample_ASPNetCore2AndCosmosDB/blob/Post-%234/SampleCosmosCore2App/Membership/CosmosDBMembership.cs">SampleCosmosCore2App/Membership/CosmosDBMembership.cs</a></p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="csharp"><thead><tr><td colspan="2"  class="head">C#</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
</pre></td><td class="de1"><pre class="de1"><span class="kw1">public</span> <span class="kw4">string</span> GenerateAPIKey<span class="br0">&#40;</span><span class="kw4">string</span> userId<span class="br0">&#41;</span>
<span class="br0">&#123;</span>
&nbsp; &nbsp; <span class="kw1">var</span> key <span class="sy0">=</span> <span class="kw3">new</span> <span class="kw4">byte</span><span class="br0">&#91;</span><span class="nu0">32</span><span class="br0">&#93;</span><span class="sy0">;</span>
&nbsp; &nbsp; <span class="kw1">using</span> <span class="br0">&#40;</span><span class="kw1">var</span> generator <span class="sy0">=</span> RandomNumberGenerator<span class="sy0">.</span><span class="me1">Create</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#41;</span>
&nbsp; &nbsp; <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; generator<span class="sy0">.</span><span class="me1">GetBytes</span><span class="br0">&#40;</span>key<span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp; &nbsp; <span class="kw1">return</span> Convert<span class="sy0">.</span><span class="me1">ToBase64String</span><span class="br0">&#40;</span>key<span class="br0">&#41;</span><span class="sy0">;</span>
<span class="br0">&#125;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">public string GenerateAPIKey(string userId)
{
    var key = new byte[32];
    using (var generator = RandomNumberGenerator.Create())
    {
        generator.GetBytes(key);
    }
    return Convert.ToBase64String(key);
}</pre></div></div>

<p><code>GenerateAPIKey</code> is starting with a simple random generator scheme to generate new keys.</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="csharp"><thead><tr><td colspan="2"  class="head">C#</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
</pre></td><td class="de1"><pre class="de1"><span class="kw1">public</span> async Task<span class="sy0">&lt;</span>AuthenticationDetails<span class="sy0">&gt;</span> AddAuthenticationAsync<span class="br0">&#40;</span><span class="kw4">string</span> userId, <span class="kw4">string</span> scheme, <span class="kw4">string</span> identity, <span class="kw4">string</span> identityName<span class="br0">&#41;</span>
<span class="br0">&#123;</span>
&nbsp; &nbsp; <span class="kw1">var</span> userAuth <span class="sy0">=</span> <span class="kw3">new</span> LoginUserAuthentication<span class="br0">&#40;</span><span class="br0">&#41;</span>
&nbsp; &nbsp; <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="co1">// ... warning below ...</span>
&nbsp; &nbsp; <span class="br0">&#125;</span><span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; userAuth <span class="sy0">=</span> await _persistence<span class="sy0">.</span><span class="me1">Users</span><span class="sy0">.</span><span class="me1">CreateUserAuthenticationAsync</span><span class="br0">&#40;</span>userAuth<span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; <span class="kw1">return</span> <span class="kw3">new</span> AuthenticationDetails<span class="br0">&#40;</span><span class="br0">&#41;</span>
&nbsp; &nbsp; <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="co1">// ... warning below ...</span>
&nbsp; &nbsp; <span class="br0">&#125;</span><span class="sy0">;</span>
<span class="br0">&#125;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">public async Task&lt;AuthenticationDetails&gt; AddAuthenticationAsync(string userId, string scheme, string identity, string identityName)
{
    var userAuth = new LoginUserAuthentication()
    {
        // ... warning below ...
    };

    userAuth = await _persistence.Users.CreateUserAuthenticationAsync(userAuth);

    return new AuthenticationDetails()
    {
        // ... warning below ...
    };
}</pre></div></div>

<p><code>AddAuthenticationAsync</code> is just a CRUD method to write the new data and return the results.</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="csharp"><thead><tr><td colspan="2"  class="head">C#</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
</pre></td><td class="de1"><pre class="de1"><span class="kw1">public</span> async Task<span class="sy0">&lt;</span>RevocationDetails<span class="sy0">&gt;</span> RevokeAuthenticationAsync<span class="br0">&#40;</span><span class="kw4">string</span> userId, <span class="kw4">string</span> identity<span class="br0">&#41;</span>
<span class="br0">&#123;</span>
&nbsp; &nbsp; <span class="kw1">var</span> userAuth <span class="sy0">=</span> await _persistence<span class="sy0">.</span><span class="me1">Users</span><span class="sy0">.</span><span class="me1">GetUserAuthenticationAsync</span><span class="br0">&#40;</span>identity<span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; <span class="kw1">if</span> <span class="br0">&#40;</span><span class="sy0">!</span>userAuth<span class="sy0">.</span><span class="me1">UserId</span><span class="sy0">.</span><span class="me1">Equals</span><span class="br0">&#40;</span>userId<span class="br0">&#41;</span><span class="br0">&#41;</span>
&nbsp; &nbsp; <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">return</span> RevocationDetails<span class="sy0">.</span><span class="me1">GetFailed</span><span class="br0">&#40;</span><span class="st0">&quot;Could not find specified API Key for your account&quot;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp;
&nbsp; &nbsp; <span class="kw1">if</span> <span class="br0">&#40;</span>userAuth<span class="sy0">.</span><span class="me1">Scheme</span> <span class="sy0">==</span> Core<span class="sy0">.</span><span class="me1">Users</span><span class="sy0">.</span><span class="me1">AuthenticationScheme</span><span class="sy0">.</span><span class="me1">RevokedAPIKey</span><span class="br0">&#41;</span>
&nbsp; &nbsp; <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">return</span> RevocationDetails<span class="sy0">.</span><span class="me1">GetFailed</span><span class="br0">&#40;</span><span class="st0">&quot;APIKey has already been revoked&quot;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp;
&nbsp; &nbsp; <span class="kw1">if</span> <span class="br0">&#40;</span>userAuth<span class="sy0">.</span><span class="me1">Scheme</span> <span class="sy0">!=</span> Core<span class="sy0">.</span><span class="me1">Users</span><span class="sy0">.</span><span class="me1">AuthenticationScheme</span><span class="sy0">.</span><span class="me1">APIKey</span><span class="br0">&#41;</span>
&nbsp; &nbsp; <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">return</span> RevocationDetails<span class="sy0">.</span><span class="me1">GetFailed</span><span class="br0">&#40;</span><span class="st0">&quot;Could not find specified API Key for your account&quot;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp;
&nbsp; &nbsp; userAuth<span class="sy0">.</span><span class="me1">Scheme</span> <span class="sy0">=</span> Core<span class="sy0">.</span><span class="me1">Users</span><span class="sy0">.</span><span class="me1">AuthenticationScheme</span><span class="sy0">.</span><span class="me1">RevokedAPIKey</span><span class="sy0">;</span>
&nbsp; &nbsp; await _persistence<span class="sy0">.</span><span class="me1">Users</span><span class="sy0">.</span><span class="me1">UpdateUserAuthenticationAsync</span><span class="br0">&#40;</span>userAuth<span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; <span class="kw1">return</span> RevocationDetails<span class="sy0">.</span><span class="me1">GetSuccess</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
<span class="br0">&#125;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">public async Task&lt;RevocationDetails&gt; RevokeAuthenticationAsync(string userId, string identity)
{
    var userAuth = await _persistence.Users.GetUserAuthenticationAsync(identity);
    if (!userAuth.UserId.Equals(userId))
    {
        return RevocationDetails.GetFailed("Could not find specified API Key for your account");
    }

    if (userAuth.Scheme == Core.Users.AuthenticationScheme.RevokedAPIKey)
    {
        return RevocationDetails.GetFailed("APIKey has already been revoked");
    }

    if (userAuth.Scheme != Core.Users.AuthenticationScheme.APIKey)
    {
        return RevocationDetails.GetFailed("Could not find specified API Key for your account");
    }

    userAuth.Scheme = Core.Users.AuthenticationScheme.RevokedAPIKey;
    await _persistence.Users.UpdateUserAuthenticationAsync(userAuth);

    return RevocationDetails.GetSuccess();
}</pre></div></div>

<p><code>RevokeAuthenticationAsync</code> is a little more involved due to validation that the key you&#8217;re trying to revoke exists, is yours, isn&#8217;t already revoked, and so on, but then it updates the key type from <code>APIKey</code> to <code>RevokedAPIKey</code> and updates it in Cosmos DB.</p>
<div class="warning-area">
<p>So, ask me about class initializers&#8230;</p>
<p>There are times that using class initializers is an <b>anti-pattern</b>, like the case above. If the properties are required for the object to be valid, put it in the constructor and don&#8217;t use class initializers for it. Everything else is fair game.</p>
<p>I recognize that people really like them, but it misleads the next developer and makes it easy to introduce bugs when you&#8217;re adding or changing &#8220;required&#8221; fields.</p>
</div>
<p>Now that we have the new <code>ICustomMembership</code> behavior, we can add the <code>UserPersistence</code> requirements.</p>
<p><a href=""></a></p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="csharp"><thead><tr><td colspan="2"  class="head">C#</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
</pre></td><td class="de1"><pre class="de1"><span class="kw1">public</span> <span class="kw4">enum</span> AuthenticationScheme
<span class="br0">&#123;</span>
&nbsp; &nbsp; Twitter <span class="sy0">=</span> <span class="nu0">1</span>,
&nbsp; &nbsp; APIKey <span class="sy0">=</span> <span class="nu0">2</span>,
&nbsp; &nbsp; RevokedAPIKey <span class="sy0">=</span> <span class="nu0">3</span>
<span class="br0">&#125;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">public enum AuthenticationScheme
{
    Twitter = 1,
    APIKey = 2,
    RevokedAPIKey = 3
}</pre></div></div>

<p>First we add the two new Authentication types to the enum.</p>
<div class="note-area">
I really shouldn&#8217;t have named this enum &#8220;AuthenticationScheme&#8221;, since that has a specific meaning for ASP.Net Core 2 already, sorry about that. Future refactor opportunity.
</div>
<p><a href=""></a></p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="csharp"><thead><tr><td colspan="2"  class="head">C#</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
</pre></td><td class="de1"><pre class="de1"><span class="co1">// ...</span>
&nbsp;
<span class="kw1">public</span> async Task<span class="sy0">&lt;</span>LoginUserAuthentication<span class="sy0">&gt;</span> GetUserAuthenticationAsync<span class="br0">&#40;</span><span class="kw4">string</span> id<span class="br0">&#41;</span>
<span class="br0">&#123;</span>
&nbsp; &nbsp; <span class="kw1">var</span> query <span class="sy0">=</span> _client<span class="sy0">.</span><span class="me1">CreateDocumentQuery</span><span class="sy0">&lt;</span>LoginUserAuthentication<span class="sy0">&gt;</span><span class="br0">&#40;</span>GetAuthenticationsCollectionUri<span class="br0">&#40;</span><span class="br0">&#41;</span>, <span class="kw3">new</span> SqlQuerySpec<span class="br0">&#40;</span><span class="br0">&#41;</span>
&nbsp; &nbsp; <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; QueryText <span class="sy0">=</span> <span class="st0">&quot;SELECT * FROM UserAuthentications UA WHERE UA.id = @id&quot;</span>,
&nbsp; &nbsp; &nbsp; &nbsp; Parameters <span class="sy0">=</span> <span class="kw3">new</span> SqlParameterCollection<span class="br0">&#40;</span><span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw3">new</span> SqlParameter<span class="br0">&#40;</span><span class="st0">&quot;@id&quot;</span>, id<span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp; &nbsp; <span class="br0">&#125;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; <span class="kw1">var</span> result <span class="sy0">=</span> await query<span class="sy0">.</span><span class="me1">AsDocumentQuery</span><span class="br0">&#40;</span><span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="sy0">.</span><span class="me1">ExecuteNextAsync</span><span class="sy0">&lt;</span>LoginUserAuthentication<span class="sy0">&gt;</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; <span class="kw1">return</span> result<span class="sy0">.</span><span class="me1">SingleOrDefault</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
<span class="br0">&#125;</span>
&nbsp;
<span class="co1">// ...</span>
&nbsp;
<span class="kw1">public</span> async Task UpdateUserAuthenticationAsync<span class="br0">&#40;</span>LoginUserAuthentication userAuth<span class="br0">&#41;</span>
<span class="br0">&#123;</span>
&nbsp; &nbsp; await _client<span class="sy0">.</span><span class="me1">ReplaceDocumentAsync</span><span class="br0">&#40;</span>UriFactory<span class="sy0">.</span><span class="me1">CreateDocumentUri</span><span class="br0">&#40;</span>_databaseId, AUTHS_DOCUMENT_COLLECTION_ID, userAuth<span class="sy0">.</span><span class="me1">Id</span><span class="br0">&#41;</span>, userAuth, <span class="kw3">new</span> RequestOptions<span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span> <span class="br0">&#125;</span><span class="br0">&#41;</span><span class="sy0">;</span>
<span class="br0">&#125;</span>
&nbsp;
<span class="co1">// ...</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">// ...

public async Task&lt;LoginUserAuthentication&gt; GetUserAuthenticationAsync(string id)
{
    var query = _client.CreateDocumentQuery&lt;LoginUserAuthentication&gt;(GetAuthenticationsCollectionUri(), new SqlQuerySpec()
    {
        QueryText = "SELECT * FROM UserAuthentications UA WHERE UA.id = @id",
        Parameters = new SqlParameterCollection()
        {
            new SqlParameter("@id", id)
        }
    });

    var result = await query.AsDocumentQuery()
                            .ExecuteNextAsync&lt;LoginUserAuthentication&gt;();
    return result.SingleOrDefault();
}

// ...

public async Task UpdateUserAuthenticationAsync(LoginUserAuthentication userAuth)
{
    await _client.ReplaceDocumentAsync(UriFactory.CreateDocumentUri(_databaseId, AUTHS_DOCUMENT_COLLECTION_ID, userAuth.Id), userAuth, new RequestOptions() { });
}

// ...</pre></div></div>

<p>Once again, the Cosmos DB logic is pretty straightforward. I&#8217;m still getting used to the Query result handling, which feels a little convoluted, but everything else has been absurdly smooth because we&#8217;re just doing usual Document store logic (please take this JSON serialized object and give it back later) instead of having to map relational concepts to objects.</p>
<p>Now we can test out this process.</p>
<p>First we&#8217;ll add a new Key:</p>
<div id="attachment_9203" style="width: 368px" class="wp-caption aligncenter"><img src="/wp-content/uploads/2018/04/aspnetcore2cosmos_302.png" alt="Adding an API Key" width="358" height="254" class="size-full wp-image-9203" srcset="/wp-content/uploads/2018/04/aspnetcore2cosmos_302.png 358w, /wp-content/uploads/2018/04/aspnetcore2cosmos_302-300x213.png 300w" sizes="(max-width: 358px) 100vw, 358px" /><p class="wp-caption-text">Adding an API Key</p></div>
<p>And here it is:</p>
<div id="attachment_9204" style="width: 435px" class="wp-caption aligncenter"><img src="/wp-content/uploads/2018/04/aspnetcore2cosmos_303.png" alt="New API Key, Fancy UI :)" width="425" height="337" class="size-full wp-image-9204" srcset="/wp-content/uploads/2018/04/aspnetcore2cosmos_303.png 425w, /wp-content/uploads/2018/04/aspnetcore2cosmos_303-300x238.png 300w, /wp-content/uploads/2018/04/aspnetcore2cosmos_303-378x300.png 378w" sizes="(max-width: 425px) 100vw, 425px" /><p class="wp-caption-text">New API Key, Fancy UI <img src="https://s.w.org/images/core/emoji/2/72x72/1f642.png" alt="🙂" class="wp-smiley" style="height: 1em; max-height: 1em;" /></p></div>
<p>And it shows up in our fancy API Key list like so:</p>
<div id="attachment_9205" style="width: 610px" class="wp-caption aligncenter"><img src="/wp-content/uploads/2018/04/aspnetcore2cosmos_304-600x92.png" alt="Viewing created API Keys" width="600" height="92" class="size-medium-width wp-image-9205" srcset="/wp-content/uploads/2018/04/aspnetcore2cosmos_304-600x92.png 600w, /wp-content/uploads/2018/04/aspnetcore2cosmos_304-300x46.png 300w, /wp-content/uploads/2018/04/aspnetcore2cosmos_304-768x118.png 768w, /wp-content/uploads/2018/04/aspnetcore2cosmos_304-1024x157.png 1024w, /wp-content/uploads/2018/04/aspnetcore2cosmos_304.png 1141w" sizes="(max-width: 600px) 100vw, 600px" /><p class="wp-caption-text">Viewing created API Keys</p></div>
<p>And we can revoke one of the keys easily:</p>
<div id="attachment_9206" style="width: 610px" class="wp-caption aligncenter"><img src="/wp-content/uploads/2018/04/aspnetcore2cosmos_305-600x77.png" alt="Revoked API Key disappears, success!" width="600" height="77" class="size-medium-width wp-image-9206" srcset="/wp-content/uploads/2018/04/aspnetcore2cosmos_305-600x77.png 600w, /wp-content/uploads/2018/04/aspnetcore2cosmos_305-300x38.png 300w, /wp-content/uploads/2018/04/aspnetcore2cosmos_305-768x98.png 768w, /wp-content/uploads/2018/04/aspnetcore2cosmos_305-1024x131.png 1024w, /wp-content/uploads/2018/04/aspnetcore2cosmos_305.png 1129w" sizes="(max-width: 600px) 100vw, 600px" /><p class="wp-caption-text">Revoked API Key disappears, success!</p></div>
<p>And here it is in Cosmos DB Data Explorer, with the poorly named &#8220;Scheme&#8221; property indicating &#8220;3&#8221;, which is &#8220;RevokedAPIKey&#8221;:</p>
<div id="attachment_9207" style="width: 610px" class="wp-caption aligncenter"><img src="/wp-content/uploads/2018/04/aspnetcore2cosmos_306-600x236.png" alt="Viewing Revoked API Key in Cosmos DB Data Explorer" width="600" height="236" class="size-medium-width wp-image-9207" srcset="/wp-content/uploads/2018/04/aspnetcore2cosmos_306-600x236.png 600w, /wp-content/uploads/2018/04/aspnetcore2cosmos_306-300x118.png 300w, /wp-content/uploads/2018/04/aspnetcore2cosmos_306-768x302.png 768w, /wp-content/uploads/2018/04/aspnetcore2cosmos_306-763x300.png 763w, /wp-content/uploads/2018/04/aspnetcore2cosmos_306.png 885w" sizes="(max-width: 600px) 100vw, 600px" /><p class="wp-caption-text">Viewing Revoked API Key in Cosmos DB Data Explorer</p></div>
<p>Now that our fictitious users can generate and revoke API keys and we&#8217;ve locked in those changes, it&#8217;s time to protect some API endpoints.</p>
<h2>Task 2: Protected API Endpoints</h2>
<p>What we&#8217;re going to be doing for this case is adding in a new AuthenticationHandler middleware. </p>
<p><b>Other resources</b></p>
<ul>
<li>Adding a custom AuthenticationHandler: <a href="https://ignas.me/tech/custom-authentication-asp-net-core-20/">Custom Authentication in ASP.NET Core 2.0</a></li>
<li>More detailed: <a href="https://joonasw.net/view/creating-auth-scheme-in-aspnet-core-2">Creating an authentication scheme in ASP.NET Core 2.0</a></li>
</ul>
<p>We&#8217;ll be adding a <code>CustomMembershipAPIAuthHandler</code> and an options object to hold the name of the <code>AuthenticationScheme</code> and <code>Realm</code> configured from startup.</p>
<p>The very short version of AuthenticationHandlers is that when the server receives a request, it will go through the whole list of available AuthenticationHandlers and ask each one if the request is: Pass, Fail, or NoResult:</p>
<ul>
<li>NoResult: This request doesn&#8217;t have anything relevant to me, thank you drive through!</li>
<li>Fail: This request has relevant info for me and it&#8217;s wrong!</li>
<li>Success: This request has relevant info for me and it&#8217;s right, here&#8217;s a ClaimsPrincipal!</li>
</ul>
<h3>Add the AuthenticationHandler</h3>
<p>For this case, we&#8217;re going to expect an <code>Authorization</code> header on requests formatted as: <code>Scheme Id:Secret</code>, similar to Basic and Bearer authentication methods. The <code>Scheme</code> comes from the Options that will be set in Startup, the Id and Secret are the API Token values we created above.</p>
<p><a href="https://github.com/tarwn/Sample_ASPNetCore2AndCosmosDB/blob/Post-%234/SampleCosmosCore2App/Membership/CustomMembershipAPIAuthHandler.cs">SampleCosmosCore2App/Membership/CustomMembershipAPIAuthHandler.cs</a> (HandleAuthenticateAsync)</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="csharp"><thead><tr><td colspan="2"  class="head">C#</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
</pre></td><td class="de1"><pre class="de1"><span class="kw1">public</span> <span class="kw4">class</span> CustomMembershipAPIAuthHandler <span class="sy0">:</span> AuthenticationHandler<span class="sy0">&lt;</span>CustomMembershipAPIOptions<span class="sy0">&gt;</span>
<span class="br0">&#123;</span>
&nbsp; &nbsp; <span class="co1">// ...</span>
&nbsp;
&nbsp; &nbsp; <span class="kw1">protected</span> <span class="kw1">override</span> async Task<span class="sy0">&lt;</span>AuthenticateResult<span class="sy0">&gt;</span> HandleAuthenticateAsync<span class="br0">&#40;</span><span class="br0">&#41;</span>
&nbsp; &nbsp; <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="co1">// Is this relevant to us?</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">if</span> <span class="br0">&#40;</span><span class="sy0">!</span>Request<span class="sy0">.</span><span class="me1">Headers</span><span class="sy0">.</span><span class="me1">TryGetValue</span><span class="br0">&#40;</span>HeaderNames<span class="sy0">.</span><span class="me1">Authorization</span>, <span class="kw1">out</span> <span class="kw1">var</span> authorization<span class="br0">&#41;</span><span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">return</span> AuthenticateResult<span class="sy0">.</span><span class="me1">NoResult</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">var</span> actualAuthValue <span class="sy0">=</span> authorization<span class="sy0">.</span><span class="me1">FirstOrDefault</span><span class="br0">&#40;</span>s <span class="sy0">=&gt;</span> s<span class="sy0">.</span><span class="me1">StartsWith</span><span class="br0">&#40;</span>Options<span class="sy0">.</span><span class="me1">Scheme</span>, StringComparison<span class="sy0">.</span><span class="me1">CurrentCultureIgnoreCase</span><span class="br0">&#41;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">if</span> <span class="br0">&#40;</span>actualAuthValue <span class="sy0">==</span> <span class="kw1">null</span><span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">return</span> AuthenticateResult<span class="sy0">.</span><span class="me1">NoResult</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; <span class="co1">// Is it a good pair?</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">var</span> apiPair <span class="sy0">=</span> actualAuthValue<span class="sy0">.</span><span class="me1">Substring</span><span class="br0">&#40;</span>Options<span class="sy0">.</span><span class="me1">Scheme</span><span class="sy0">.</span><span class="me1">Length</span> <span class="sy0">+</span> <span class="nu0">1</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">var</span> apiValues <span class="sy0">=</span> apiPair<span class="sy0">.</span><span class="me1">Split</span><span class="br0">&#40;</span><span class="st0">':'</span>, <span class="nu0">2</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">if</span> <span class="br0">&#40;</span>apiValues<span class="sy0">.</span><span class="me1">Length</span> <span class="sy0">!=</span> <span class="nu0">2</span> <span class="sy0">||</span> <span class="kw4">String</span><span class="sy0">.</span><span class="me1">IsNullOrEmpty</span><span class="br0">&#40;</span>apiValues<span class="br0">&#91;</span><span class="nu0">0</span><span class="br0">&#93;</span><span class="br0">&#41;</span> <span class="sy0">||</span> <span class="kw4">String</span><span class="sy0">.</span><span class="me1">IsNullOrEmpty</span><span class="br0">&#40;</span>apiValues<span class="br0">&#91;</span><span class="nu0">1</span><span class="br0">&#93;</span><span class="br0">&#41;</span><span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">return</span> AuthenticateResult<span class="sy0">.</span><span class="me1">Fail</span><span class="br0">&#40;</span>$<span class="st0">&quot;Invalid authentication format, expected '{Options.Scheme} id:secret'&quot;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">var</span> principal <span class="sy0">=</span> await _membership<span class="sy0">.</span><span class="me1">GetOneTimeLoginAsync</span><span class="br0">&#40;</span><span class="st0">&quot;APIKey&quot;</span>, apiValues<span class="br0">&#91;</span><span class="nu0">0</span><span class="br0">&#93;</span>, apiValues<span class="br0">&#91;</span><span class="nu0">1</span><span class="br0">&#93;</span>, Options<span class="sy0">.</span><span class="me1">Scheme</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">if</span> <span class="br0">&#40;</span>principal <span class="sy0">==</span> <span class="kw1">null</span><span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">return</span> AuthenticateResult<span class="sy0">.</span><span class="me1">Fail</span><span class="br0">&#40;</span><span class="st0">&quot;Invalid authentication provided, access denied.&quot;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">var</span> ticket <span class="sy0">=</span> <span class="kw3">new</span> AuthenticationTicket<span class="br0">&#40;</span>principal, Options<span class="sy0">.</span><span class="me1">Scheme</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">return</span> AuthenticateResult<span class="sy0">.</span><span class="me1">Success</span><span class="br0">&#40;</span>ticket<span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp;
&nbsp; &nbsp; <span class="co1">// ...</span>
<span class="br0">&#125;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">public class CustomMembershipAPIAuthHandler : AuthenticationHandler&lt;CustomMembershipAPIOptions&gt;
{
    // ...

    protected override async Task&lt;AuthenticateResult&gt; HandleAuthenticateAsync()
    {
        // Is this relevant to us?
        if (!Request.Headers.TryGetValue(HeaderNames.Authorization, out var authorization))
        {
            return AuthenticateResult.NoResult();
        }

        var actualAuthValue = authorization.FirstOrDefault(s =&gt; s.StartsWith(Options.Scheme, StringComparison.CurrentCultureIgnoreCase));
        if (actualAuthValue == null)
        {
            return AuthenticateResult.NoResult();
        }

        // Is it a good pair?
        var apiPair = actualAuthValue.Substring(Options.Scheme.Length + 1);
        var apiValues = apiPair.Split(':', 2);
        if (apiValues.Length != 2 || String.IsNullOrEmpty(apiValues[0]) || String.IsNullOrEmpty(apiValues[1]))
        {
            return AuthenticateResult.Fail($"Invalid authentication format, expected '{Options.Scheme} id:secret'");
        }

        var principal = await _membership.GetOneTimeLoginAsync("APIKey", apiValues[0], apiValues[1], Options.Scheme);
        if (principal == null)
        {
            return AuthenticateResult.Fail("Invalid authentication provided, access denied.");
        }

        var ticket = new AuthenticationTicket(principal, Options.Scheme);
        return AuthenticateResult.Success(ticket);
    }

    // ...
}</pre></div></div>

<p>Notice we&#8217;ve added the concept of a &#8220;OneTimeLogin&#8221; to <code>ICustomMembership</code>. This will lead to a membership refactor to make it clearer which methods are relevant to &#8220;Interactive&#8221; logins and which are relevant to &#8220;OneTimeLogin&#8221; types like API request authentication.</p>
<p>On top of having logic to look at handle Authenticate requests, we also want to add logic to handle Challenge and Forbidden requests. In this case, we are going to add a nice <code>WWW-Authenticate</code> header before letting the base class send it back as a 401, which is consistent with how most APIs handle challenges. We&#8217;re also going to just let the base class handle the Forbidden cases as designed.</p>
<p><a href="https://github.com/tarwn/Sample_ASPNetCore2AndCosmosDB/blob/Post-%234/SampleCosmosCore2App/Membership/CustomMembershipAPIAuthHandler.cs">SampleCosmosCore2App/Membership/CustomMembershipAPIAuthHandler.cs</a> (HandleAuthenticateAsync)</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="csharp"><thead><tr><td colspan="2"  class="head">C#</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
</pre></td><td class="de1"><pre class="de1"><span class="kw1">public</span> <span class="kw4">class</span> CustomMembershipAPIAuthHandler <span class="sy0">:</span> AuthenticationHandler<span class="sy0">&lt;</span>CustomMembershipAPIOptions<span class="sy0">&gt;</span>
<span class="br0">&#123;</span>
&nbsp; &nbsp; <span class="co1">// ...</span>
&nbsp;
&nbsp; &nbsp;<span class="kw1">protected</span> <span class="kw1">override</span> async Task HandleChallengeAsync<span class="br0">&#40;</span>AuthenticationProperties properties<span class="br0">&#41;</span>
&nbsp; &nbsp; <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; Response<span class="sy0">.</span><span class="me1">Headers</span><span class="br0">&#91;</span><span class="st0">&quot;WWW-Authenticate&quot;</span><span class="br0">&#93;</span> <span class="sy0">=</span> $<span class="st0">&quot;Basic realm=<span class="es0">\&quot;</span>{Options.Realm}<span class="es0">\&quot;</span>, charset=<span class="es0">\&quot;</span>UTF-8<span class="es0">\&quot;</span>&quot;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; await <span class="kw1">base</span><span class="sy0">.</span><span class="me1">HandleChallengeAsync</span><span class="br0">&#40;</span>properties<span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp;
&nbsp; &nbsp; <span class="kw1">protected</span> <span class="kw1">override</span> Task HandleForbiddenAsync<span class="br0">&#40;</span>AuthenticationProperties properties<span class="br0">&#41;</span>
&nbsp; &nbsp; <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">return</span> <span class="kw1">base</span><span class="sy0">.</span><span class="me1">HandleForbiddenAsync</span><span class="br0">&#40;</span>properties<span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp;
&nbsp; &nbsp; <span class="co1">// ...</span>
<span class="br0">&#125;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">public class CustomMembershipAPIAuthHandler : AuthenticationHandler&lt;CustomMembershipAPIOptions&gt;
{
    // ...

   protected override async Task HandleChallengeAsync(AuthenticationProperties properties)
    {
        Response.Headers["WWW-Authenticate"] = $"Basic realm=\"{Options.Realm}\", charset=\"UTF-8\"";
        await base.HandleChallengeAsync(properties);
    }

    protected override Task HandleForbiddenAsync(AuthenticationProperties properties)
    {
        return base.HandleForbiddenAsync(properties);
    }

    // ...
}</pre></div></div>

<p>After an <a href="https://github.com/tarwn/Sample_ASPNetCore2AndCosmosDB/commit/60a3a47a03cec8eda5a99cd82ec87b6601e2507c#diff-3e209446f0e03a762826159f3c03decf" title="CustomMembershipExtensions.cs diff at github">addition of an extension method</a>, we can register this in <code>Startup</code>.</p>
<p><a href="https://github.com/tarwn/Sample_ASPNetCore2AndCosmosDB/blob/Post-%234/SampleCosmosCore2App/Startup.cs">SampleCosmosCore2App/Startup.cs</a></p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="csharp"><thead><tr><td colspan="2"  class="head">C#</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
</pre></td><td class="de1"><pre class="de1"><span class="kw1">public</span> <span class="kw4">void</span> ConfigureServices<span class="br0">&#40;</span>IServiceCollection services<span class="br0">&#41;</span>
<span class="br0">&#123;</span>
&nbsp; &nbsp; services<span class="sy0">.</span><span class="me1">AddMvc</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; <span class="co1">// ... add persistence, membership ...</span>
&nbsp;
&nbsp; &nbsp; services<span class="sy0">.</span><span class="me1">AddAuthentication</span><span class="br0">&#40;</span>CookieAuthenticationDefaults<span class="sy0">.</span><span class="me1">AuthenticationScheme</span><span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="coMULTI">/* Custom Membership API Provider */</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="sy0">.</span><span class="me1">AddCustomMembershipAPIAuth</span><span class="br0">&#40;</span><span class="st0">&quot;APIToken&quot;</span>, <span class="st0">&quot;SampleCosmosCore2App&quot;</span><span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="coMULTI">/* External Auth Providers */</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="sy0">.</span><span class="me1">AddCookie</span><span class="br0">&#40;</span><span class="st0">&quot;ExternalCookie&quot;</span><span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="sy0">.</span><span class="me1">AddTwitter</span><span class="br0">&#40;</span><span class="st0">&quot;Twitter&quot;</span>, options <span class="sy0">=&gt;</span> <span class="coMULTI">/* ... */</span> <span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="coMULTI">/* 'Session' Cookie Provider */</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="sy0">.</span><span class="me1">AddCookie</span><span class="br0">&#40;</span><span class="br0">&#40;</span>options<span class="br0">&#41;</span> <span class="sy0">=&gt;</span> <span class="coMULTI">/* ... */</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; services<span class="sy0">.</span><span class="me1">AddAuthorization</span><span class="br0">&#40;</span>options <span class="sy0">=&gt;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; options<span class="sy0">.</span><span class="me1">AddPolicy</span><span class="br0">&#40;</span><span class="st0">&quot;APIAccessOnly&quot;</span>, policy <span class="sy0">=&gt;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; policy<span class="sy0">.</span><span class="me1">AddAuthenticationSchemes</span><span class="br0">&#40;</span><span class="st0">&quot;APIToken&quot;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; policy<span class="sy0">.</span><span class="me1">RequireAuthenticatedUser</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; <span class="br0">&#125;</span><span class="br0">&#41;</span><span class="sy0">;</span>
<span class="br0">&#125;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">public void ConfigureServices(IServiceCollection services)
{
    services.AddMvc();

    // ... add persistence, membership ...

    services.AddAuthentication(CookieAuthenticationDefaults.AuthenticationScheme)
        /* Custom Membership API Provider */
        .AddCustomMembershipAPIAuth("APIToken", "SampleCosmosCore2App")
        /* External Auth Providers */
        .AddCookie("ExternalCookie")
        .AddTwitter("Twitter", options =&gt; /* ... */ )
        /* 'Session' Cookie Provider */
        .AddCookie((options) =&gt; /* ... */);

    services.AddAuthorization(options =&gt; {
        options.AddPolicy("APIAccessOnly", policy =&gt;
        {
            policy.AddAuthenticationSchemes("APIToken");
            policy.RequireAuthenticatedUser();
        });
    });
}</pre></div></div>

<p>First we make a one line addition to the <code>AddCustomMembershipAPIAuth</code> Extension method, passing in a <code>Scheme</code> and <code>Realm</code>. Next we add in a new &#8220;APIAccessOnly&#8221; policy that we will use to enforce API Access authentication only for API endpoints, which we can do next.</p>
<p><a href="https://github.com/tarwn/Sample_ASPNetCore2AndCosmosDB/blob/Post-%234/SampleCosmosCore2App/Controllers/ValuesController.cs">SampleCosmosCore2App/Controllers/ValuesController.cs</a></p>
<pre lang="csharp"">
[Route("api/[controller]")]
[Authorize(Policy = "APIAccessOnly")]
public class ValuesController : Controller
{
    // GET api/values
    [HttpGet]
    public IEnumerable<string> Get()
    {
        return new string[] { "value1", "value2" };
    }

    // ...
}
</pre>
<p>I&#8217;ve decorated the ValuesController with an <code>Authorize(Policy = ...)</code> attribute, but I could also have used <code>Authorize(AuthenticationScheme = ...)</code> and skipped the policy definition in the Startup file. However, I like the idea that all of my Authentication schemes are defined in Startup consistently, the policy for accessing API endpoints is defined in one place, and it looks more readable to me.</p>
<h3>Membership Changes</h3>
<p>To support the middleware above, we need a <code>GetOneTimeLoginAsync</code> method in membership. This method will accept the authentication details, verify them, and return a ClaimsPrincipal (or null).</p>
<p><a href="https://github.com/tarwn/Sample_ASPNetCore2AndCosmosDB/blob/Post-%234/SampleCosmosCore2App/Membership/CosmosDBMembership.cs#L166">SampleCosmosCore2App/Membership/CosmosDBMembership.cs</a></p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="csharp"><thead><tr><td colspan="2"  class="head">C#</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
</pre></td><td class="de1"><pre class="de1"><span class="kw1">public</span> async Task<span class="sy0">&lt;</span>ClaimsPrincipal<span class="sy0">&gt;</span> GetOneTimeLoginAsync<span class="br0">&#40;</span><span class="kw4">string</span> scheme, <span class="kw4">string</span> userAuthId, <span class="kw4">string</span> identity, <span class="kw4">string</span> authenticationScheme<span class="br0">&#41;</span>
<span class="br0">&#123;</span>
&nbsp; &nbsp; <span class="kw1">var</span> authScheme <span class="sy0">=</span> StringToScheme<span class="br0">&#40;</span>scheme<span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; <span class="kw1">var</span> userAuth <span class="sy0">=</span> await _persistence<span class="sy0">.</span><span class="me1">Users</span><span class="sy0">.</span><span class="me1">GetUserAuthenticationAsync</span><span class="br0">&#40;</span>userAuthId<span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; <span class="co1">// are the passed auth details valid?</span>
&nbsp; &nbsp; <span class="kw1">if</span> <span class="br0">&#40;</span>userAuth <span class="sy0">==</span> <span class="kw1">null</span><span class="br0">&#41;</span>
&nbsp; &nbsp; <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">return</span> <span class="kw1">null</span><span class="sy0">;</span>
&nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp;
&nbsp; &nbsp; <span class="kw1">if</span> <span class="br0">&#40;</span>userAuth<span class="sy0">.</span><span class="me1">Scheme</span> <span class="sy0">!=</span> authScheme <span class="sy0">||</span> <span class="sy0">!</span>userAuth<span class="sy0">.</span><span class="me1">Identity</span><span class="sy0">.</span><span class="me1">Equals</span><span class="br0">&#40;</span>identity, StringComparison<span class="sy0">.</span><span class="me1">CurrentCultureIgnoreCase</span><span class="br0">&#41;</span><span class="br0">&#41;</span>
&nbsp; &nbsp; <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">return</span> <span class="kw1">null</span><span class="sy0">;</span>
&nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp;
&nbsp; &nbsp; <span class="co1">// is the user allowed to log in? We don't have addtl checks yet</span>
&nbsp; &nbsp; <span class="kw1">var</span> user <span class="sy0">=</span> await _persistence<span class="sy0">.</span><span class="me1">Users</span><span class="sy0">.</span><span class="me1">GetUserAsync</span><span class="br0">&#40;</span>userAuth<span class="sy0">.</span><span class="me1">UserId</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; <span class="co1">// create a claims principal</span>
&nbsp; &nbsp; <span class="kw1">var</span> claimsIdentity <span class="sy0">=</span> <span class="kw3">new</span> ClaimsIdentity<span class="br0">&#40;</span>authenticationScheme<span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; claimsIdentity<span class="sy0">.</span><span class="me1">AddClaim</span><span class="br0">&#40;</span><span class="kw3">new</span> Claim<span class="br0">&#40;</span><span class="st0">&quot;userId&quot;</span>, userAuth<span class="sy0">.</span><span class="me1">UserId</span><span class="br0">&#41;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; claimsIdentity<span class="sy0">.</span><span class="me1">AddClaim</span><span class="br0">&#40;</span><span class="kw3">new</span> Claim<span class="br0">&#40;</span><span class="st0">&quot;userAuthId&quot;</span>, userAuth<span class="sy0">.</span><span class="me1">Id</span><span class="br0">&#41;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; <span class="kw1">return</span> <span class="kw3">new</span> ClaimsPrincipal<span class="br0">&#40;</span>claimsIdentity<span class="br0">&#41;</span><span class="sy0">;</span>
<span class="br0">&#125;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">public async Task&lt;ClaimsPrincipal&gt; GetOneTimeLoginAsync(string scheme, string userAuthId, string identity, string authenticationScheme)
{
    var authScheme = StringToScheme(scheme);
    var userAuth = await _persistence.Users.GetUserAuthenticationAsync(userAuthId);

    // are the passed auth details valid?
    if (userAuth == null)
    {
        return null;
    }

    if (userAuth.Scheme != authScheme || !userAuth.Identity.Equals(identity, StringComparison.CurrentCultureIgnoreCase))
    {
        return null;
    }

    // is the user allowed to log in? We don't have addtl checks yet
    var user = await _persistence.Users.GetUserAsync(userAuth.UserId);

    // create a claims principal
    var claimsIdentity = new ClaimsIdentity(authenticationScheme);
    claimsIdentity.AddClaim(new Claim("userId", userAuth.UserId));
    claimsIdentity.AddClaim(new Claim("userAuthId", userAuth.Id));
    return new ClaimsPrincipal(claimsIdentity);
}</pre></div></div>

<p>Currently this method accepts an authentication scheme for the &#8220;OneTimeLogin&#8221;, later this will be refactored so that the membership class supports a separate &#8220;InteractiveAuthenticationScheme&#8221; and &#8220;OneTimeLoginScheme&#8221; that are configured in Startup and they will consistently set either <code>userId</code> and <code>userAuthId</code> claims or <code>userId</code> and <code>sessionid</code> claims.</p>
<p>That&#8217;s all we needed! Let&#8217;s try it out with <a href="https://www.getpostman.com/">postman</a>.</p>
<p>Let&#8217;s start with the happy path, passing in good credentials:</p>
<div id="attachment_9209" style="width: 610px" class="wp-caption aligncenter"><img src="/wp-content/uploads/2018/04/aspnetcore2cosmos_308-600x230.png" alt="Testing the successful path w/ good API Credentials" width="600" height="230" class="size-medium-width wp-image-9209" srcset="/wp-content/uploads/2018/04/aspnetcore2cosmos_308-600x230.png 600w, /wp-content/uploads/2018/04/aspnetcore2cosmos_308-300x115.png 300w, /wp-content/uploads/2018/04/aspnetcore2cosmos_308-768x294.png 768w, /wp-content/uploads/2018/04/aspnetcore2cosmos_308-784x300.png 784w, /wp-content/uploads/2018/04/aspnetcore2cosmos_308.png 888w" sizes="(max-width: 600px) 100vw, 600px" /><p class="wp-caption-text">Testing the successful path w/ good API Credentials</p></div>
<p>Then we should try a number of failure situations, like no credentials, bad credentials, and invalidly formatted credentials:</p>
<div id="attachment_9208" style="width: 610px" class="wp-caption aligncenter"><img src="/wp-content/uploads/2018/04/aspnetcore2cosmos_307-600x331.png" alt="Verifying Bad Token reports 401" width="600" height="331" class="size-medium-width wp-image-9208" srcset="/wp-content/uploads/2018/04/aspnetcore2cosmos_307-600x331.png 600w, /wp-content/uploads/2018/04/aspnetcore2cosmos_307-300x166.png 300w, /wp-content/uploads/2018/04/aspnetcore2cosmos_307-768x424.png 768w, /wp-content/uploads/2018/04/aspnetcore2cosmos_307-544x300.png 544w, /wp-content/uploads/2018/04/aspnetcore2cosmos_307.png 888w" sizes="(max-width: 600px) 100vw, 600px" /><p class="wp-caption-text">Verifying Bad Token reports 401</p></div>
<p>Excellent! We now have working API Authentication!</p>
<h2>Wrapping up, next steps</h2>
<p>Moving right along. We now have an ASP.net Core 2 website that can perform really basic CRUD logic against Cosmos DB. We&#8217;ve then layered standard username/password authentication on it, with storage in Cosmos DB as well. Then we extended this to support a second interactive login method (Twitter), opening the door to adding as many of those as we need. Then in this post, we&#8217;ve added API authorization for per-request authorization. So far, so good.</p>
<p>Next up, we&#8217;re going to take a break from Cosmos DB for a bit to do some general refactoring (which won&#8217;t be a blog post) and add in error handling logic. From there, we&#8217;ll shift focus to front-end tooling to ensure we have a good developer and production experience with CSS and JavaScript. Once we&#8217;re done there, we&#8217;ll be back to add in API Rate Limiting with Cosmos DB as the backing store. See you soon!</p>
]]></content>
			<link rel="replies" type="text/html" href="/index.php/uncategorized/adding-user-managed-api-keys-to-asp-net-core-2-w-cosmos-db/#comments" thr:count="1"/>
		<link rel="replies" type="application/atom+xml" href="/index.php/uncategorized/adding-user-managed-api-keys-to-asp-net-core-2-w-cosmos-db/feed/atom/" thr:count="1"/>
		<thr:total>1</thr:total>
		</entry>
		<entry>
		<author>
			<name>Eli Weinstock-Herman (tarwn)</name>
					</author>
		<title type="html"><![CDATA[Adding Twitter Authentication to an ASP.Net Core 2 site w/ Cosmos DB]]></title>
		<link rel="alternate" type="text/html" href="/index.php/webdev/serverprogramming/aspnet/adding-twitter-authentication-to-an-asp-net-core-2-site-w-cosmos-db/" />
		<id>/?p=9170</id>
		<updated>2018-04-17T13:54:52Z</updated>
		<published>2018-04-17T13:54:52Z</published>
		<category scheme="/" term="ASP.NET" /><category scheme="/" term="ASP.Net Core 2" /><category scheme="/" term="CosmosDB" />		<summary type="html"><![CDATA[I’m building a B2C website with Cosmos DB as the back-end store and starting with common elements like Authentication. In my prior post, we connected the Cookie Middleware with custom membership logic and a standard username/password login method. In this one, we&#8217;ll be extending the system to also allow users to register and login via [&#8230;]]]></summary>
		<content type="html" xml:base="/index.php/webdev/serverprogramming/aspnet/adding-twitter-authentication-to-an-asp-net-core-2-site-w-cosmos-db/"><![CDATA[<p>I’m building a B2C website with Cosmos DB as the back-end store and starting with common elements like Authentication. In <a href="/index.php/webdev/serverprogramming/aspnet/custom-authentication-in-asp-net-core-2-w-cosmos-db/" title="Custom Authentication for ASP.Net Core 2 with Cosmos DB">my prior post</a>, we connected the Cookie Middleware with custom membership logic and a standard username/password login method. In this one, we&#8217;ll be extending the system to also allow users to register and login via a third party provider (Twitter). </p>
<div id="attachment_9155" style="width: 610px" class="wp-caption aligncenter"><img src="/wp-content/uploads/2018/04/aspnetcore2cosmos_106-600x406.png" alt="3 Authentication Scenarios: User/Pass, Twitter, API Keys" width="600" height="406" class="size-medium-width wp-image-9155" srcset="/wp-content/uploads/2018/04/aspnetcore2cosmos_106-600x406.png 600w, /wp-content/uploads/2018/04/aspnetcore2cosmos_106-300x203.png 300w, /wp-content/uploads/2018/04/aspnetcore2cosmos_106-443x300.png 443w, /wp-content/uploads/2018/04/aspnetcore2cosmos_106.png 748w" sizes="(max-width: 600px) 100vw, 600px" /><p class="wp-caption-text">3 Authentication Scenarios: User/Pass, Twitter, API Keys</p></div>
<p>In this post I&#8217;ll also start exploring <code>User Authentications</code> as a separate document collection, rather than as additional fields on my User document. I&#8217;ve noticed in several past systems I&#8217;ve built API keys and authentication mechanisms as properties on Users, but recently started considering that, like my house keys, mixing properties of the user with authentication methods on a single &#8220;User&#8221; record has been making me uncomfortable.</p>
<div id="attachment_9181" style="width: 236px" class="wp-caption aligncenter"><img src="/wp-content/uploads/2018/04/aspnetcore2cosmos_202.png" alt="Defining People (Users) Separate from House Keys (User Authentication)" width="226" height="161" class="size-full wp-image-9181" /><p class="wp-caption-text">Defining People (Users) Separate from House Keys (User Authentication)</p></div>
<p>Let&#8217;s find out if this works.</p>
<style>
.note-area{
   border: 1px solid #eeeeee; 
   border-left-width: 16px; 
   padding: 1em;
   margin: 1em 0;
}
.warning-area{
   border: 1px solid #FFdddd; 
   border-left-width: 16px; 
   padding: 1em;
   margin: 1em 0;
}
</style>
<h2>Breaking it down</h2>
<p>In the prior post, I outlined the authentication needs of this system and started breaking it into separate steps forward. Interactive logins would be able to take advantage of a standard username/password system or, alternatively, using a third-party system like Twitter. Once  a user has an account, they can create and manage API Key/Secret pairs for API access (which is the next post).</p>
<p>So where are we so far? We have built an ASP.net Core 2 website and added Cookie Middleware that is associated with <code>LoginSession</code> classes stored in Cosmos DB. Users can register with a username, password, and email address and are stored as <code>LoginUser</code> documents in Cosmos DB. Business logic for this is bundled up in a concrete <code>CosmosDBMembership</code> class while the Persistence logic to work with Cosmos DB is encapsulated in a UserPersistence class, both of which are registered with the built-in ASP.Net Core 2 Dependency Injeciton services collection. </p>
<p>Let&#8217;s extend the Membership logic to support Twitter:</p>
<div id="attachment_9182" style="width: 408px" class="wp-caption aligncenter"><img src="/wp-content/uploads/2018/04/aspnetcore2cosmos_201.png" alt="File Changes for Twitter Addition" width="398" height="816" class="size-full wp-image-9182" srcset="/wp-content/uploads/2018/04/aspnetcore2cosmos_201.png 398w, /wp-content/uploads/2018/04/aspnetcore2cosmos_201-146x300.png 146w" sizes="(max-width: 398px) 100vw, 398px" /><p class="wp-caption-text">File Changes for Twitter Addition</p></div>
<p>Here&#8217;s what we&#8217;ll be adding:</p>
<ul>
<li>A Register via Twitter button, callback URL + form, and registration endpoint</li>
<li>A Login via Twitter button and callback URL</li>
<li>Some supporting methods in <code>CosmosDBMembership</code></li>
<li>Some supporting methods in <code>Persistence.Users</code></li>
<li>A new <code>DocumentCollection</code> in Cosmos DB for alternative User Authentications</li>
</ul>
<p>This is a much smaller task then the initial work to put in custom authentication, but like that post I&#8217;ll present the changes file-by-file rather than in the order I developed them in.</p>
<p>The source code through this set of changes is available here: <a href="https://github.com/tarwn/Sample_ASPNetCore2AndCosmosDB/commits/Post-%233" title="Sample_ASPNetCore2AndCosmosDB, Post #3 Branch">github: Sample_ASPNetCore2AndCosmosDB, Post #3 Branch</a></p>
<h2>Using the Twitter Middleware</h2>
<p>The Twitter middleware uses a standard OAuth sign-in process, but does so in a way that takes care of all the details for us. </p>
<p>When a <code>Challenge</code> is issued through the twitter middleware, it takes precautions like generating a one time roundtrip token and stores that token and additional parameters for us in a shortlived cookie. It then sends the user over to twitter with a callback URL and that roundtrip token which Twitter uses once the User has logged in and granted us access. Twitter calls back to the callback, which is handled 100% by the middleware, including verifying that roundtrip token came back around successfully. Information from Twitter is added to the Claims on the HttpContext, just as cookie informaiton is when we use the Cookie Middleware, so we can then use that information to perform our internal authorization logic.</p>
<div id="attachment_9183" style="width: 595px" class="wp-caption aligncenter"><img src="/wp-content/uploads/2018/04/aspnetcore2cosmos_203.png" alt="Twitter OAuth and Middleware Flow" width="585" height="624" class="size-full wp-image-9183" srcset="/wp-content/uploads/2018/04/aspnetcore2cosmos_203.png 585w, /wp-content/uploads/2018/04/aspnetcore2cosmos_203-281x300.png 281w" sizes="(max-width: 585px) 100vw, 585px" /><p class="wp-caption-text">Twitter OAuth and Middleware Flow</p></div>
<p>Once they&#8217;re logged in (or registered), we can generate a session and forward them to the URL they were originally headed to.</p>
<h3>Set Up Twitter</h3>
<p>The first step is to set up credentials with Twitter for the application. The documented <a href="https://docs.microsoft.com/en-us/aspnet/core/security/authentication/social/twitter-logins?view=aspnetcore-2.1&#038;tabs=aspnetcore2x" title="MSDN: ASP.Net Core 2 Twitter Setup">MSDN setup documentation</a> has good steps for this, so we can follow through on the twitter side to get an app and access key setup.</p>
<div id="attachment_9184" style="width: 610px" class="wp-caption aligncenter"><img src="/wp-content/uploads/2018/04/aspnetcore2cosmos_204-600x495.png" alt="Twitter App Setup" width="600" height="495" class="size-medium-width wp-image-9184" srcset="/wp-content/uploads/2018/04/aspnetcore2cosmos_204-600x495.png 600w, /wp-content/uploads/2018/04/aspnetcore2cosmos_204-300x248.png 300w, /wp-content/uploads/2018/04/aspnetcore2cosmos_204-364x300.png 364w, /wp-content/uploads/2018/04/aspnetcore2cosmos_204.png 760w" sizes="(max-width: 600px) 100vw, 600px" /><p class="wp-caption-text">Twitter App Setup</p></div>
<p>We&#8217;ll be storing the API Key and access token in our settings file for now, later we&#8217;ll take advantage of secrets management to store it in a way that doesn&#8217;t expose it to git.</p>
<h3>Add Middleware</h3>
<p>The next part is to configure the middleware to use those App settings from Twitter. Once we receive the information back from Twitter, we will use that twitter Id to either continue user registration or attempt to log the user in, depending on where they started. Rather than build conditional logic into the Twitter options for the middleware, we can instead provide a final URL to redirect to for each endpoint:</p>
<ul>
<li><code>/account/login/twitter</code> should finally redirect to <code>/account/login/twitter/continue</code></li>
<li><code>/account/register/twitter</code> should finally redirect to <code>/account/login/register/continue</code></li>
</ul>
<p>When the redirect comes back from Twitter, it passed back account information that is parsed into claims on the HttpContext. </p>
<div class="note-area">
During the Twitter authentication challenge, there is an internal cookie to carry state between the call to twitter and callback. Once the account information has been parsed, however, that information exists purely in the HttpContext for that request.
</div>
<p>To bridge the gap between receiving the Twitter information and being able to use it on the final redirect, we can register a second Cookie middleware and tell twitter to use that middleware&#8217;s <code>AuthenticationScheme</code> for SignIn. This way, once the Twitter middleware has finished parsing the Claims, it will turn around and &#8220;SignIn&#8221; via the new Cookie Middleware. This writes the claims from Twitter to a new cookie for subsequent requests.</p>
<p><a href="https://github.com/tarwn/Sample_ASPNetCore2AndCosmosDB/blob/Post-%233/SampleCosmosCore2App/Startup.cs">SampleCosmosCore2App/Startup.cs</a></p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="csharp"><thead><tr><td colspan="2"  class="head">C#</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
</pre></td><td class="de1"><pre class="de1"><span class="kw1">public</span> <span class="kw4">void</span> ConfigureServices<span class="br0">&#40;</span>IServiceCollection services<span class="br0">&#41;</span>
<span class="br0">&#123;</span>
&nbsp; &nbsp;<span class="co1">// ... MVC, Membership</span>
&nbsp;
&nbsp; &nbsp; services<span class="sy0">.</span><span class="me1">AddAuthentication</span><span class="br0">&#40;</span>CookieAuthenticationDefaults<span class="sy0">.</span><span class="me1">AuthenticationScheme</span><span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="coMULTI">/* External Auth Providers */</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="sy0">.</span><span class="me1">AddCookie</span><span class="br0">&#40;</span><span class="st0">&quot;ExternalCookie&quot;</span><span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="sy0">.</span><span class="me1">AddTwitter</span><span class="br0">&#40;</span><span class="st0">&quot;Twitter&quot;</span>, options <span class="sy0">=&gt;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; options<span class="sy0">.</span><span class="me1">SignInScheme</span> <span class="sy0">=</span> <span class="st0">&quot;ExternalCookie&quot;</span><span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; options<span class="sy0">.</span><span class="me1">ConsumerKey</span> <span class="sy0">=</span> Configuration<span class="br0">&#91;</span><span class="st0">&quot;Authentication:Twitter:ConsumerKey&quot;</span><span class="br0">&#93;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; options<span class="sy0">.</span><span class="me1">ConsumerSecret</span> <span class="sy0">=</span> Configuration<span class="br0">&#91;</span><span class="st0">&quot;Authentication:Twitter:ConsumerSecret&quot;</span><span class="br0">&#93;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span><span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="coMULTI">/* 'Session' Cookie Provider */</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="sy0">.</span><span class="me1">AddCookie</span><span class="br0">&#40;</span><span class="br0">&#40;</span>options<span class="br0">&#41;</span> <span class="sy0">=&gt;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="co1">// ...</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span><span class="br0">&#41;</span><span class="sy0">;</span>
<span class="br0">&#125;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">public void ConfigureServices(IServiceCollection services)
{
   // ... MVC, Membership

    services.AddAuthentication(CookieAuthenticationDefaults.AuthenticationScheme)
        /* External Auth Providers */
        .AddCookie("ExternalCookie")
        .AddTwitter("Twitter", options =&gt;
        {
            options.SignInScheme = "ExternalCookie";

            options.ConsumerKey = Configuration["Authentication:Twitter:ConsumerKey"];
            options.ConsumerSecret = Configuration["Authentication:Twitter:ConsumerSecret"];
        })
        /* 'Session' Cookie Provider */
        .AddCookie((options) =&gt;
        {
            // ...
        });
}</pre></div></div>

<p>So the only three configurations we need here are the new Cookie provider with an explicit <code>AuthenticationScheme</code>, configuring Twitter to Sign In via that <code>AuthenticationScheme</code>, and then adding our Twitter Key and Secret via the appsettings.json file.</p>
<h2>Login Endpoints</h2>
<p>To support the Login flow, we need a set of new endpoints and a button.</p>
<p>We&#8217;ll add a new <code>/account/login/twitter</code> endpoint with a final callback of <code>/account/login/twitter/continue</code> redirect URL to perform the actual Sign On, and we&#8217;ll add a button to the existing Login view:</p>
<div id="attachment_9185" style="width: 361px" class="wp-caption aligncenter"><img src="/wp-content/uploads/2018/04/aspnetcore2cosmos_205.png" alt="Addition of a &quot;Login with Twitter&quot; button" width="351" height="379" class="size-full wp-image-9185" srcset="/wp-content/uploads/2018/04/aspnetcore2cosmos_205.png 351w, /wp-content/uploads/2018/04/aspnetcore2cosmos_205-278x300.png 278w" sizes="(max-width: 351px) 100vw, 351px" /><p class="wp-caption-text">Addition of a &#8220;Login with Twitter&#8221; button</p></div>
<p><a href="https://github.com/tarwn/Sample_ASPNetCore2AndCosmosDB/blob/Post-%233/SampleCosmosCore2App/Views/Account/Login.cshtml">SampleCosmosCore2App/Views/Account/Login.cshtml</a></p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="html4strict"><thead><tr><td colspan="2"  class="head">HTML</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
</pre></td><td class="de1"><pre class="de1">...
<span class="sc2">&lt;<span class="kw2">div</span> <span class="kw3">class</span><span class="sy0">=</span><span class="st0">&quot;box&quot;</span>&gt;</span>
&nbsp; &nbsp; <span class="sc2">&lt;<span class="kw2">h2</span>&gt;</span>Login<span class="sc2">&lt;<span class="sy0">/</span><span class="kw2">h2</span>&gt;</span>
&nbsp;
&nbsp; &nbsp; <span class="sc2">&lt;<span class="kw2">a</span> asp-<span class="kw3">action</span><span class="sy0">=</span><span class="st0">&quot;LoginWithTwitter&quot;</span> asp-route-returnUrl<span class="sy0">=</span><span class="st0">&quot;@TempData[&quot;</span>returnUrl<span class="st0">&quot;]&quot;</span> <span class="kw3">class</span><span class="sy0">=</span><span class="st0">&quot;btn-white&quot;</span>&gt;</span>Login with Twitter<span class="sc2">&lt;<span class="sy0">/</span><span class="kw2">a</span>&gt;</span>
&nbsp;
&nbsp; &nbsp; ...
<span class="sc2">&lt;<span class="sy0">/</span><span class="kw2">div</span>&gt;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">...
&lt;div class="box"&gt;
    &lt;h2&gt;Login&lt;/h2&gt;

    &lt;a asp-action="LoginWithTwitter" asp-route-returnUrl="@TempData["returnUrl"]" class="btn-white"&gt;Login with Twitter&lt;/a&gt;

    ...
&lt;/div&gt;</pre></div></div>

<p>Then we add the endpoints to the Account controller to start the Twitter authentication process and capture the callback values at the end to start a new login session.</p>
<p><a href=""></a></p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="csharp"><thead><tr><td colspan="2"  class="head">C#</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
</pre></td><td class="de1"><pre class="de1"><span class="br0">&#91;</span>HttpGet<span class="br0">&#40;</span><span class="st0">&quot;login/twitter&quot;</span><span class="br0">&#41;</span><span class="br0">&#93;</span>
<span class="br0">&#91;</span>AllowAnonymous<span class="br0">&#93;</span>
<span class="kw1">public</span> IActionResult LoginWithTwitter<span class="br0">&#40;</span><span class="kw4">string</span> returnUrl <span class="sy0">=</span> <span class="kw1">null</span><span class="br0">&#41;</span>
<span class="br0">&#123;</span>
&nbsp; &nbsp; <span class="kw1">var</span> props <span class="sy0">=</span> <span class="kw3">new</span> AuthenticationProperties<span class="br0">&#40;</span><span class="br0">&#41;</span>
&nbsp; &nbsp; <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; RedirectUri <span class="sy0">=</span> <span class="st0">&quot;account/login/twitter/continue?returnUrl=&quot;</span> <span class="sy0">+</span> HttpUtility<span class="sy0">.</span><span class="me1">UrlEncode</span><span class="br0">&#40;</span>returnUrl<span class="br0">&#41;</span>
&nbsp; &nbsp; <span class="br0">&#125;</span><span class="sy0">;</span>
&nbsp; &nbsp; <span class="kw1">return</span> Challenge<span class="br0">&#40;</span>props, <span class="st0">&quot;Twitter&quot;</span><span class="br0">&#41;</span><span class="sy0">;</span>
<span class="br0">&#125;</span>
&nbsp;
<span class="br0">&#91;</span>HttpGet<span class="br0">&#40;</span><span class="st0">&quot;login/twitter/continue&quot;</span><span class="br0">&#41;</span><span class="br0">&#93;</span>
<span class="br0">&#91;</span>AllowAnonymous<span class="br0">&#93;</span>
<span class="kw1">public</span> async Task<span class="sy0">&lt;</span>IActionResult<span class="sy0">&gt;</span> LoginWithTwitterContinueAsync<span class="br0">&#40;</span><span class="kw4">string</span> returnUrl <span class="sy0">=</span> <span class="kw1">null</span><span class="br0">&#41;</span>
<span class="br0">&#123;</span>
&nbsp; &nbsp; <span class="co1">// use twitter info to create a session</span>
&nbsp; &nbsp; <span class="kw1">var</span> cookie <span class="sy0">=</span> await HttpContext<span class="sy0">.</span><span class="me1">AuthenticateAsync</span><span class="br0">&#40;</span><span class="st0">&quot;ExternalCookie&quot;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; <span class="kw1">var</span> twitterId <span class="sy0">=</span> cookie<span class="sy0">.</span><span class="me1">Principal</span><span class="sy0">.</span><span class="me1">FindFirst</span><span class="br0">&#40;</span><span class="st0">&quot;urn:twitter:userid&quot;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; <span class="kw1">var</span> result <span class="sy0">=</span> await _membership<span class="sy0">.</span><span class="me1">LoginExternalAsync</span><span class="br0">&#40;</span><span class="st0">&quot;Twitter&quot;</span>, twitterId<span class="sy0">.</span><span class="kw1">Value</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; <span class="kw1">if</span> <span class="br0">&#40;</span>result<span class="sy0">.</span><span class="me1">Failed</span><span class="br0">&#41;</span>
&nbsp; &nbsp; <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; ModelState<span class="sy0">.</span><span class="me1">AddModelError</span><span class="br0">&#40;</span><span class="st0">&quot;&quot;</span>, <span class="st0">&quot;Twitter account not recognized, have you registered yet?&quot;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">return</span> View<span class="br0">&#40;</span><span class="st0">&quot;Login&quot;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp;
&nbsp; &nbsp; await HttpContext<span class="sy0">.</span><span class="me1">SignOutAsync</span><span class="br0">&#40;</span><span class="st0">&quot;ExternalCookie&quot;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; <span class="kw1">return</span> LocalRedirect<span class="br0">&#40;</span>returnUrl <span class="sy0">??</span> _membership<span class="sy0">.</span><span class="me1">Options</span><span class="sy0">.</span><span class="me1">DefaultPathAfterLogin</span><span class="br0">&#41;</span><span class="sy0">;</span>
<span class="br0">&#125;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">[HttpGet("login/twitter")]
[AllowAnonymous]
public IActionResult LoginWithTwitter(string returnUrl = null)
{
    var props = new AuthenticationProperties()
    {
        RedirectUri = "account/login/twitter/continue?returnUrl=" + HttpUtility.UrlEncode(returnUrl)
    };
    return Challenge(props, "Twitter");
}

[HttpGet("login/twitter/continue")]
[AllowAnonymous]
public async Task&lt;IActionResult&gt; LoginWithTwitterContinueAsync(string returnUrl = null)
{
    // use twitter info to create a session
    var cookie = await HttpContext.AuthenticateAsync("ExternalCookie");
    var twitterId = cookie.Principal.FindFirst("urn:twitter:userid");

    var result = await _membership.LoginExternalAsync("Twitter", twitterId.Value);
    if (result.Failed)
    {
        ModelState.AddModelError("", "Twitter account not recognized, have you registered yet?");
        return View("Login");
    }

    await HttpContext.SignOutAsync("ExternalCookie");

    return LocalRedirect(returnUrl ?? _membership.Options.DefaultPathAfterLogin);
}</pre></div></div>

<p>The Twitter information comes back in the &#8220;ExternalCookie&#8221; we registered in the Startup configuration. We&#8217;ll add a method to <code>CosmosDBMembership</code> to create a <code>LoginSession</code> just like we do with a username/password, except for a third-party identity instead. The last step is to clean up the &#8220;External Cookie&#8221; using it&#8217;s <code>SignOut</code> method.</p>
<div class="note-area">
Originally I added the <code>SignOut</code> for cleanliness, but it was later pointed out to me that this is extra overhead going across the wire on every Request/Response and, in some cases, can actually result in &#8220;Request Too Long&#8221; web server errors if you stack up too many cookies.
</div>
<h3>Registration Endpoints</h3>
<p>The registration flow is similar to the login flow, but we need one additional endpoint to serve up the registration form once we have the user&#8217;s twitter information for authentication.</p>
<div id="attachment_9186" style="width: 357px" class="wp-caption aligncenter"><img src="/wp-content/uploads/2018/04/aspnetcore2cosmos_206.png" alt="&quot;Continue with Twitter&quot; on Register Form" width="347" height="395" class="size-full wp-image-9186" srcset="/wp-content/uploads/2018/04/aspnetcore2cosmos_206.png 347w, /wp-content/uploads/2018/04/aspnetcore2cosmos_206-264x300.png 264w" sizes="(max-width: 347px) 100vw, 347px" /><p class="wp-caption-text">&#8220;Continue with Twitter&#8221; on Register Form</p></div>
<div id="attachment_9187" style="width: 354px" class="wp-caption aligncenter"><img src="/wp-content/uploads/2018/04/aspnetcore2cosmos_207.png" alt="Continuing Registration after logging in as @sqlishard" width="344" height="276" class="size-full wp-image-9187" srcset="/wp-content/uploads/2018/04/aspnetcore2cosmos_207.png 344w, /wp-content/uploads/2018/04/aspnetcore2cosmos_207-300x241.png 300w" sizes="(max-width: 344px) 100vw, 344px" /><p class="wp-caption-text">Continuing Registration after logging in as @sqlishard</p></div>
<p><a href="https://github.com/tarwn/Sample_ASPNetCore2AndCosmosDB/blob/Post-%233/SampleCosmosCore2App/Views/Account/Register.cshtml">SampleCosmosCore2App/Views/Account/Register.cshtml</a></p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="html4strict"><thead><tr><td colspan="2"  class="head">HTML</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
</pre></td><td class="de1"><pre class="de1">...
&nbsp;
<span class="sc2">&lt;<span class="kw2">div</span> <span class="kw3">class</span><span class="sy0">=</span><span class="st0">&quot;box&quot;</span>&gt;</span>
&nbsp; &nbsp; <span class="sc2">&lt;<span class="kw2">h2</span>&gt;</span>Create Account<span class="sc2">&lt;<span class="sy0">/</span><span class="kw2">h2</span>&gt;</span>
&nbsp;
&nbsp; &nbsp; <span class="sc2">&lt;<span class="kw2">a</span> asp-<span class="kw3">action</span><span class="sy0">=</span><span class="st0">&quot;RegisterWithTwitter&quot;</span> <span class="kw3">class</span><span class="sy0">=</span><span class="st0">&quot;btn-white&quot;</span>&gt;</span>Continue with Twitter<span class="sc2">&lt;<span class="sy0">/</span><span class="kw2">a</span>&gt;</span>
&nbsp;
&nbsp; &nbsp; ...
<span class="sc2">&lt;<span class="sy0">/</span><span class="kw2">div</span>&gt;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">...

&lt;div class="box"&gt;
    &lt;h2&gt;Create Account&lt;/h2&gt;

    &lt;a asp-action="RegisterWithTwitter" class="btn-white"&gt;Continue with Twitter&lt;/a&gt;

    ...
&lt;/div&gt;</pre></div></div>

<p>Like the Login form, we add a link to the Registration form.</p>
<p><a href="https://github.com/tarwn/Sample_ASPNetCore2AndCosmosDB/blob/Post-%233/SampleCosmosCore2App/Views/Account/RegisterWithTwitterContinue.cshtml">SampleCosmosCore2App/Views/Account/RegisterWithTwitterContinue.cshtml</a></p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="html4strict"><thead><tr><td colspan="2"  class="head">HTML</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
</pre></td><td class="de1"><pre class="de1">@model SampleCosmosCore2App.Models.Account.RegisterWithTwitterModel
&nbsp;
@{
&nbsp; &nbsp; ViewData[&quot;Title&quot;] = &quot;Register&quot;;
&nbsp; &nbsp; Layout = &quot;~/Views/Shared/Layout.cshtml&quot;;
}
&nbsp;
<span class="sc2">&lt;<span class="kw2">div</span> <span class="kw3">class</span><span class="sy0">=</span><span class="st0">&quot;box&quot;</span>&gt;</span>
&nbsp; &nbsp; <span class="sc2">&lt;<span class="kw2">h2</span>&gt;</span>Create Account<span class="sc2">&lt;<span class="sy0">/</span><span class="kw2">h2</span>&gt;</span>
&nbsp;
&nbsp; &nbsp; <span class="sc2">&lt;<span class="kw2">form</span> asp-<span class="kw3">action</span><span class="sy0">=</span><span class="st0">&quot;RegisterWithTwitterContinueAsync&quot;</span> <span class="kw3">method</span><span class="sy0">=</span><span class="st0">&quot;post&quot;</span>&gt;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="sc2">&lt;<span class="kw2">div</span> asp-validation-<span class="kw3">summary</span><span class="sy0">=</span><span class="st0">&quot;ModelOnly&quot;</span> <span class="kw3">class</span><span class="sy0">=</span><span class="st0">&quot;text-danger&quot;</span>&gt;&lt;<span class="sy0">/</span><span class="kw2">div</span>&gt;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="sc2">&lt;<span class="kw2">div</span> <span class="kw3">class</span><span class="sy0">=</span><span class="st0">&quot;form-group&quot;</span>&gt;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Welcome <span class="sc2">&lt;<span class="kw2">span</span>&gt;</span>@Model.TwitterUsername<span class="sc2">&lt;<span class="sy0">/</span><span class="kw2">span</span>&gt;</span>!
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="sc2">&lt;<span class="kw2">input</span> asp-<span class="kw3">for</span><span class="sy0">=</span><span class="st0">&quot;TwitterUsername&quot;</span> <span class="kw3">type</span><span class="sy0">=</span><span class="st0">&quot;hidden&quot;</span> <span class="sy0">/</span>&gt;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="sc2">&lt;<span class="kw2">input</span> asp-<span class="kw3">for</span><span class="sy0">=</span><span class="st0">&quot;TwitterId&quot;</span> <span class="kw3">type</span><span class="sy0">=</span><span class="st0">&quot;hidden&quot;</span> <span class="sy0">/</span>&gt;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="sc2">&lt;<span class="sy0">/</span><span class="kw2">div</span>&gt;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="sc2">&lt;<span class="kw2">div</span> <span class="kw3">class</span><span class="sy0">=</span><span class="st0">&quot;form-group&quot;</span>&gt;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="sc2">&lt;<span class="kw2">label</span> asp-<span class="kw3">for</span><span class="sy0">=</span><span class="st0">&quot;UserName&quot;</span> <span class="kw3">class</span><span class="sy0">=</span><span class="st0">&quot;control-label&quot;</span>&gt;&lt;<span class="sy0">/</span><span class="kw2">label</span>&gt;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="sc2">&lt;<span class="kw2">input</span> asp-<span class="kw3">for</span><span class="sy0">=</span><span class="st0">&quot;UserName&quot;</span> <span class="kw3">class</span><span class="sy0">=</span><span class="st0">&quot;form-control&quot;</span> <span class="sy0">/</span>&gt;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="sc2">&lt;<span class="kw2">span</span> asp-validation-<span class="kw3">for</span><span class="sy0">=</span><span class="st0">&quot;UserName&quot;</span> <span class="kw3">class</span><span class="sy0">=</span><span class="st0">&quot;text-danger&quot;</span>&gt;&lt;<span class="sy0">/</span><span class="kw2">span</span>&gt;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="sc2">&lt;<span class="sy0">/</span><span class="kw2">div</span>&gt;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="sc2">&lt;<span class="kw2">div</span> <span class="kw3">class</span><span class="sy0">=</span><span class="st0">&quot;form-group&quot;</span>&gt;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="sc2">&lt;<span class="kw2">label</span> asp-<span class="kw3">for</span><span class="sy0">=</span><span class="st0">&quot;Email&quot;</span> <span class="kw3">class</span><span class="sy0">=</span><span class="st0">&quot;control-label&quot;</span>&gt;&lt;<span class="sy0">/</span><span class="kw2">label</span>&gt;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="sc2">&lt;<span class="kw2">input</span> asp-<span class="kw3">for</span><span class="sy0">=</span><span class="st0">&quot;Email&quot;</span> <span class="kw3">class</span><span class="sy0">=</span><span class="st0">&quot;form-control&quot;</span> <span class="sy0">/</span>&gt;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="sc2">&lt;<span class="kw2">span</span> asp-validation-<span class="kw3">for</span><span class="sy0">=</span><span class="st0">&quot;Email&quot;</span> <span class="kw3">class</span><span class="sy0">=</span><span class="st0">&quot;text-danger&quot;</span>&gt;&lt;<span class="sy0">/</span><span class="kw2">span</span>&gt;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="sc2">&lt;<span class="sy0">/</span><span class="kw2">div</span>&gt;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="sc2">&lt;<span class="kw2">div</span> <span class="kw3">class</span><span class="sy0">=</span><span class="st0">&quot;form-group&quot;</span>&gt;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="sc2">&lt;<span class="kw2">input</span> <span class="kw3">type</span><span class="sy0">=</span><span class="st0">&quot;submit&quot;</span> <span class="kw3">value</span><span class="sy0">=</span><span class="st0">&quot;Register&quot;</span> <span class="kw3">class</span><span class="sy0">=</span><span class="st0">&quot;btn btn-default&quot;</span> <span class="sy0">/</span>&gt;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="sc2">&lt;<span class="sy0">/</span><span class="kw2">div</span>&gt;</span>
&nbsp; &nbsp; <span class="sc2">&lt;<span class="sy0">/</span><span class="kw2">form</span>&gt;</span>
<span class="sc2">&lt;<span class="sy0">/</span><span class="kw2">div</span>&gt;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">@model SampleCosmosCore2App.Models.Account.RegisterWithTwitterModel

@{
    ViewData["Title"] = "Register";
    Layout = "~/Views/Shared/Layout.cshtml";
}

&lt;div class="box"&gt;
    &lt;h2&gt;Create Account&lt;/h2&gt;

    &lt;form asp-action="RegisterWithTwitterContinueAsync" method="post"&gt;
        &lt;div asp-validation-summary="ModelOnly" class="text-danger"&gt;&lt;/div&gt;
        &lt;div class="form-group"&gt;
            Welcome &lt;span&gt;@Model.TwitterUsername&lt;/span&gt;!
            &lt;input asp-for="TwitterUsername" type="hidden" /&gt;
            &lt;input asp-for="TwitterId" type="hidden" /&gt;
        &lt;/div&gt;
        &lt;div class="form-group"&gt;
            &lt;label asp-for="UserName" class="control-label"&gt;&lt;/label&gt;
            &lt;input asp-for="UserName" class="form-control" /&gt;
            &lt;span asp-validation-for="UserName" class="text-danger"&gt;&lt;/span&gt;
        &lt;/div&gt;
        &lt;div class="form-group"&gt;
            &lt;label asp-for="Email" class="control-label"&gt;&lt;/label&gt;
            &lt;input asp-for="Email" class="form-control" /&gt;
            &lt;span asp-validation-for="Email" class="text-danger"&gt;&lt;/span&gt;
        &lt;/div&gt;
        &lt;div class="form-group"&gt;
            &lt;input type="submit" value="Register" class="btn btn-default" /&gt;
        &lt;/div&gt;
    &lt;/form&gt;
&lt;/div&gt;</pre></div></div>

<p>And a view that collects a username (for display purposes) once they&#8217;ve authenticated with Twitter.</p>
<p>Then we can add the 3 endpoints to start the twitter <code>Challenge</code>, extract the details and feed them into the Registration form, then complete the Registration and log the user in for the first time:</p>
<p><a href=""></a></p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="csharp"><thead><tr><td colspan="2"  class="head">C#</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
</pre></td><td class="de1"><pre class="de1"><span class="br0">&#91;</span>HttpGet<span class="br0">&#40;</span><span class="st0">&quot;register/twitter&quot;</span><span class="br0">&#41;</span><span class="br0">&#93;</span>
<span class="br0">&#91;</span>AllowAnonymous<span class="br0">&#93;</span>
<span class="kw1">public</span> IActionResult RegisterWithTwitter<span class="br0">&#40;</span><span class="br0">&#41;</span>
<span class="br0">&#123;</span>
&nbsp; &nbsp; <span class="kw1">var</span> props <span class="sy0">=</span> <span class="kw3">new</span> AuthenticationProperties<span class="br0">&#40;</span><span class="br0">&#41;</span>
&nbsp; &nbsp; <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; RedirectUri <span class="sy0">=</span> <span class="st0">&quot;account/register/twitter/continue&quot;</span>
&nbsp; &nbsp; <span class="br0">&#125;</span><span class="sy0">;</span>
&nbsp; &nbsp; <span class="kw1">return</span> Challenge<span class="br0">&#40;</span>props, <span class="st0">&quot;Twitter&quot;</span><span class="br0">&#41;</span><span class="sy0">;</span>
<span class="br0">&#125;</span>
&nbsp;
<span class="br0">&#91;</span>HttpGet<span class="br0">&#40;</span><span class="st0">&quot;register/twitter/continue&quot;</span><span class="br0">&#41;</span><span class="br0">&#93;</span>
<span class="br0">&#91;</span>AllowAnonymous<span class="br0">&#93;</span>
<span class="kw1">public</span> async Task<span class="sy0">&lt;</span>IActionResult<span class="sy0">&gt;</span> RegisterWithTwitterContinueAsync<span class="br0">&#40;</span><span class="br0">&#41;</span>
<span class="br0">&#123;</span>
&nbsp; &nbsp; <span class="co1">// use twitter info to set some sensible defaults</span>
&nbsp; &nbsp; <span class="kw1">var</span> cookie <span class="sy0">=</span> await HttpContext<span class="sy0">.</span><span class="me1">AuthenticateAsync</span><span class="br0">&#40;</span><span class="st0">&quot;ExternalCookie&quot;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; <span class="kw1">var</span> twitterId <span class="sy0">=</span> cookie<span class="sy0">.</span><span class="me1">Principal</span><span class="sy0">.</span><span class="me1">FindFirst</span><span class="br0">&#40;</span><span class="st0">&quot;urn:twitter:userid&quot;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; <span class="kw1">var</span> twitterUsername <span class="sy0">=</span> cookie<span class="sy0">.</span><span class="me1">Principal</span><span class="sy0">.</span><span class="me1">FindFirst</span><span class="br0">&#40;</span><span class="st0">&quot;urn:twitter:screenname&quot;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; <span class="co1">// verify the id is not already registered, short circuit to login screen</span>
&nbsp; &nbsp; <span class="kw1">if</span> <span class="br0">&#40;</span>await _membership<span class="sy0">.</span><span class="me1">IsAlreadyRegisteredAsync</span><span class="br0">&#40;</span><span class="st0">&quot;Twitter&quot;</span>, twitterId<span class="sy0">.</span><span class="kw1">Value</span><span class="br0">&#41;</span><span class="br0">&#41;</span>
&nbsp; &nbsp; <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; ModelState<span class="sy0">.</span><span class="me1">AddModelError</span><span class="br0">&#40;</span><span class="st0">&quot;&quot;</span>, $<span class="st0">&quot;Welcome back! Your twitter account @{twitterUsername.Value} is already registered. Maybe login instead?&quot;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">return</span> View<span class="br0">&#40;</span><span class="st0">&quot;Login&quot;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp;
&nbsp; &nbsp; <span class="kw1">var</span> suggestedUsername <span class="sy0">=</span> await FindUniqueSuggestionAsync<span class="br0">&#40;</span>twitterUsername<span class="sy0">.</span><span class="kw1">Value</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; <span class="kw1">var</span> model <span class="sy0">=</span> <span class="kw3">new</span> RegisterWithTwitterModel<span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; TwitterId <span class="sy0">=</span> twitterId<span class="sy0">.</span><span class="kw1">Value</span>,
&nbsp; &nbsp; &nbsp; &nbsp; TwitterUsername <span class="sy0">=</span> twitterUsername<span class="sy0">.</span><span class="kw1">Value</span>,
&nbsp; &nbsp; &nbsp; &nbsp; UserName <span class="sy0">=</span> suggestedUsername
&nbsp; &nbsp; <span class="br0">&#125;</span><span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; <span class="kw1">return</span> View<span class="br0">&#40;</span><span class="st0">&quot;RegisterWithTwitterContinue&quot;</span>, model<span class="br0">&#41;</span><span class="sy0">;</span>
<span class="br0">&#125;</span>
&nbsp;
<span class="br0">&#91;</span>HttpPost<span class="br0">&#40;</span><span class="st0">&quot;register/twitter/continue&quot;</span><span class="br0">&#41;</span><span class="br0">&#93;</span>
<span class="kw1">public</span> async Task<span class="sy0">&lt;</span>IActionResult<span class="sy0">&gt;</span> RegisterWithTwitterContinueAsync<span class="br0">&#40;</span>RegisterWithTwitterModel model<span class="br0">&#41;</span>
<span class="br0">&#123;</span>
&nbsp; &nbsp; <span class="kw1">if</span> <span class="br0">&#40;</span><span class="sy0">!</span>ModelState<span class="sy0">.</span><span class="me1">IsValid</span><span class="br0">&#41;</span>
&nbsp; &nbsp; <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">return</span> View<span class="br0">&#40;</span><span class="st0">&quot;RegisterWithTwitterContinue&quot;</span>, model<span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp;
&nbsp; &nbsp; <span class="kw1">var</span> result <span class="sy0">=</span> await _membership<span class="sy0">.</span><span class="me1">RegisterExternalAsync</span><span class="br0">&#40;</span>model<span class="sy0">.</span><span class="me1">UserName</span>, model<span class="sy0">.</span><span class="me1">Email</span>, <span class="st0">&quot;Twitter&quot;</span>, model<span class="sy0">.</span><span class="me1">TwitterId</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; <span class="kw1">if</span> <span class="br0">&#40;</span>result<span class="sy0">.</span><span class="me1">Failed</span><span class="br0">&#41;</span>
&nbsp; &nbsp; <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; ModelState<span class="sy0">.</span><span class="me1">AddModelError</span><span class="br0">&#40;</span><span class="st0">&quot;&quot;</span>, result<span class="sy0">.</span><span class="me1">ErrorMessage</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">return</span> View<span class="br0">&#40;</span><span class="st0">&quot;RegisterWithTwitterContinue&quot;</span>, model<span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp;
&nbsp; &nbsp; await HttpContext<span class="sy0">.</span><span class="me1">SignOutAsync</span><span class="br0">&#40;</span><span class="st0">&quot;ExternalCookie&quot;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; <span class="kw1">return</span> LocalRedirect<span class="br0">&#40;</span>_membership<span class="sy0">.</span><span class="me1">Options</span><span class="sy0">.</span><span class="me1">DefaultPathAfterLogin</span><span class="br0">&#41;</span><span class="sy0">;</span>
<span class="br0">&#125;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">[HttpGet("register/twitter")]
[AllowAnonymous]
public IActionResult RegisterWithTwitter()
{
    var props = new AuthenticationProperties()
    {
        RedirectUri = "account/register/twitter/continue"
    };
    return Challenge(props, "Twitter");
}

[HttpGet("register/twitter/continue")]
[AllowAnonymous]
public async Task&lt;IActionResult&gt; RegisterWithTwitterContinueAsync()
{
    // use twitter info to set some sensible defaults
    var cookie = await HttpContext.AuthenticateAsync("ExternalCookie");
    var twitterId = cookie.Principal.FindFirst("urn:twitter:userid");
    var twitterUsername = cookie.Principal.FindFirst("urn:twitter:screenname");

    // verify the id is not already registered, short circuit to login screen
    if (await _membership.IsAlreadyRegisteredAsync("Twitter", twitterId.Value))
    {
        ModelState.AddModelError("", $"Welcome back! Your twitter account @{twitterUsername.Value} is already registered. Maybe login instead?");
        return View("Login");
    }

    var suggestedUsername = await FindUniqueSuggestionAsync(twitterUsername.Value);

    var model = new RegisterWithTwitterModel() {
        TwitterId = twitterId.Value,
        TwitterUsername = twitterUsername.Value,
        UserName = suggestedUsername
    };

    return View("RegisterWithTwitterContinue", model);
}

[HttpPost("register/twitter/continue")]
public async Task&lt;IActionResult&gt; RegisterWithTwitterContinueAsync(RegisterWithTwitterModel model)
{
    if (!ModelState.IsValid)
    {
        return View("RegisterWithTwitterContinue", model);
    }

    var result = await _membership.RegisterExternalAsync(model.UserName, model.Email, "Twitter", model.TwitterId);
    if (result.Failed)
    {
        ModelState.AddModelError("", result.ErrorMessage);
        return View("RegisterWithTwitterContinue", model);
    }

    await HttpContext.SignOutAsync("ExternalCookie");

    return LocalRedirect(_membership.Options.DefaultPathAfterLogin);
}</pre></div></div>

<p>Once again, the last step in the process is to SignOut of the &#8220;ExternalCookie&#8221;, cleaning up after the stored Twitter information.</p>
<h2>Membership and Persistence</h2>
<p>The changes for the membership object are fairly light. We need to be able to:</p>
<ul>
<li><code>Register(username, email, "Twitter", twitterId)</code>: Register a new account w/ Twitter authentication</li>
<li><code>Login("Twitter", twitterId)</code>: Login with &#8220;Twitter&#8221; authentication</li>
</ul>
<p>These will expose the new Persistence methods we need against Cosmos DB.</p>
<p><a href=""></a></p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="csharp"><thead><tr><td colspan="2"  class="head">C#</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
</pre></td><td class="de1"><pre class="de1"><span class="kw1">public</span> <span class="kw4">class</span> CosmosDBMembership <span class="sy0">:</span> ICustomMembership
<span class="br0">&#123;</span>
&nbsp; &nbsp; <span class="co1">// ...</span>
&nbsp;
&nbsp; &nbsp; <span class="kw1">public</span> async Task<span class="sy0">&lt;</span>LoginResult<span class="sy0">&gt;</span> LoginExternalAsync<span class="br0">&#40;</span><span class="kw4">string</span> scheme, <span class="kw4">string</span> identity<span class="br0">&#41;</span>
&nbsp; &nbsp; <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">var</span> authScheme <span class="sy0">=</span> StringToScheme<span class="br0">&#40;</span>scheme<span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">var</span> user <span class="sy0">=</span> await _persistence<span class="sy0">.</span><span class="me1">Users</span><span class="sy0">.</span><span class="me1">GetUserByAuthenticationAsync</span><span class="br0">&#40;</span>authScheme, identity<span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">if</span> <span class="br0">&#40;</span>user <span class="sy0">==</span> <span class="kw1">null</span><span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">return</span> LoginResult<span class="sy0">.</span><span class="me1">GetFailed</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; await SignInAsync<span class="br0">&#40;</span>user<span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">return</span> LoginResult<span class="sy0">.</span><span class="me1">GetSuccess</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp;
&nbsp; &nbsp; <span class="kw1">public</span> async Task<span class="sy0">&lt;</span>RegisterResult<span class="sy0">&gt;</span> RegisterExternalAsync<span class="br0">&#40;</span><span class="kw4">string</span> username, <span class="kw4">string</span> email, <span class="kw4">string</span> scheme, <span class="kw4">string</span> identity<span class="br0">&#41;</span>
&nbsp; &nbsp; <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">var</span> user <span class="sy0">=</span> <span class="kw3">new</span> LoginUser<span class="br0">&#40;</span><span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Username <span class="sy0">=</span> username,
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Email <span class="sy0">=</span> email
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">var</span> userAuth <span class="sy0">=</span> <span class="kw3">new</span> LoginUserAuthentication<span class="br0">&#40;</span><span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Scheme <span class="sy0">=</span> StringToScheme<span class="br0">&#40;</span>scheme<span class="br0">&#41;</span>,
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Identity <span class="sy0">=</span> identity
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span><span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">try</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; user <span class="sy0">=</span> await _persistence<span class="sy0">.</span><span class="me1">Users</span><span class="sy0">.</span><span class="me1">CreateUserAsync</span><span class="br0">&#40;</span>user<span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">catch</span> <span class="br0">&#40;</span>Exception<span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="co1">//TODO reduce breadth of exception statement</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">return</span> RegisterResult<span class="sy0">.</span><span class="me1">GetFailed</span><span class="br0">&#40;</span><span class="st0">&quot;Username is already in use&quot;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">try</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; userAuth<span class="sy0">.</span><span class="me1">UserId</span> <span class="sy0">=</span> user<span class="sy0">.</span><span class="me1">Id</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; userAuth <span class="sy0">=</span> await _persistence<span class="sy0">.</span><span class="me1">Users</span><span class="sy0">.</span><span class="me1">CreateUserAuthenticationAsync</span><span class="br0">&#40;</span>userAuth<span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">catch</span> <span class="br0">&#40;</span>Exception<span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="co1">// cleanup</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; await _persistence<span class="sy0">.</span><span class="me1">Users</span><span class="sy0">.</span><span class="me1">DeleteUserAsync</span><span class="br0">&#40;</span>user<span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">throw</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; await SignInAsync<span class="br0">&#40;</span>user<span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">return</span> RegisterResult<span class="sy0">.</span><span class="me1">GetSuccess</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp;
&nbsp; &nbsp; <span class="kw1">public</span> async Task<span class="sy0">&lt;</span><span class="kw4">bool</span><span class="sy0">&gt;</span> IsAlreadyRegisteredAsync<span class="br0">&#40;</span><span class="kw4">string</span> scheme, <span class="kw4">string</span> identity<span class="br0">&#41;</span>
&nbsp; &nbsp; <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">return</span> await _persistence<span class="sy0">.</span><span class="me1">Users</span><span class="sy0">.</span><span class="me1">IsIdentityRegisteredAsync</span><span class="br0">&#40;</span>StringToScheme<span class="br0">&#40;</span>scheme<span class="br0">&#41;</span>, identity<span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp;
&nbsp; &nbsp; <span class="co1">// ...</span>
<span class="br0">&#125;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">public class CosmosDBMembership : ICustomMembership
{
    // ...

    public async Task&lt;LoginResult&gt; LoginExternalAsync(string scheme, string identity)
    {
        var authScheme = StringToScheme(scheme);
        var user = await _persistence.Users.GetUserByAuthenticationAsync(authScheme, identity);
        if (user == null)
        {
            return LoginResult.GetFailed();
        }

        await SignInAsync(user);

        return LoginResult.GetSuccess();
    }

    public async Task&lt;RegisterResult&gt; RegisterExternalAsync(string username, string email, string scheme, string identity)
    {
        var user = new LoginUser()
        {
            Username = username,
            Email = email
        };
        var userAuth = new LoginUserAuthentication()
        {
            Scheme = StringToScheme(scheme),
            Identity = identity
        };

        try
        {
            user = await _persistence.Users.CreateUserAsync(user);
        }
        catch (Exception)
        {
            //TODO reduce breadth of exception statement
            return RegisterResult.GetFailed("Username is already in use");
        }

        try
        {
            userAuth.UserId = user.Id;
            userAuth = await _persistence.Users.CreateUserAuthenticationAsync(userAuth);
        }
        catch (Exception)
        {
            // cleanup
            await _persistence.Users.DeleteUserAsync(user);
            throw;
        }

        await SignInAsync(user);

        return RegisterResult.GetSuccess();
    }

    public async Task&lt;bool&gt; IsAlreadyRegisteredAsync(string scheme, string identity)
    {
        return await _persistence.Users.IsIdentityRegisteredAsync(StringToScheme(scheme), identity);
    }

    // ...
}</pre></div></div>

<p>The Login method is straightforward: Find a user that has a UserAuthentication of Twitter with the given twitter id. If we can&#8217;t find a user, we don&#8217;t know who they are.</p>
<p>Registration is a little trickier. We have to create and store both a <code>LoginUser</code> and <code>LoginUserAuthentication</code> object to successfully register the user and we need the generated <code>id</code> from the <code>LoginUser</code> that Cosmos DB generates from that save to populate the <code>UserId</code> property on the &#8220;LoginUserAuthentication</code> before saving. So we create both classes, populate the <code>UserId</code> in between saves, and if the second save fails for any reason we delete the initial <code>LoginUser</code> document.</p>
<p>I&#8217;m not sure that I like the &#8220;Twitter&#8221; string being passed around, so you can see I&#8217;ve switched to an enumerated value for Persistence and will likely refactor that back up the stack later.</p>
<p>Persistence needs some additional setup to create the new DocumentCollection, a method to retrieve a <code>LoginUser</code> document for a given Twitter identity, ability to Delete a user document, and methods to create and check given Twitter identities in the system.<br />
<a href=""></a></p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="csharp"><thead><tr><td colspan="2"  class="head">C#</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72
73
74
75
76
77
78
79
</pre></td><td class="de1"><pre class="de1"><span class="kw1">public</span> <span class="kw4">class</span> UserPersistence
<span class="br0">&#123;</span>
&nbsp; &nbsp; <span class="co1">// ...</span>
&nbsp;
&nbsp; &nbsp; <span class="kw1">public</span> async Task EnsureSetupAsync<span class="br0">&#40;</span><span class="br0">&#41;</span>
&nbsp; &nbsp; <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">var</span> databaseUri <span class="sy0">=</span> UriFactory<span class="sy0">.</span><span class="me1">CreateDatabaseUri</span><span class="br0">&#40;</span>_databaseId<span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; <span class="co1">// Collections</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="co1">// ...</span>
&nbsp; &nbsp; &nbsp; &nbsp; await _client<span class="sy0">.</span><span class="me1">CreateDocumentCollectionIfNotExistsAsync</span><span class="br0">&#40;</span>databaseUri, <span class="kw3">new</span> DocumentCollection<span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span> Id <span class="sy0">=</span> AUTHS_DOCUMENT_COLLECTION_ID <span class="br0">&#125;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="co1">// ...</span>
&nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp;
&nbsp; &nbsp; <span class="co2">#region Users</span>
&nbsp;
&nbsp; &nbsp; <span class="co1">// ...</span>
&nbsp; &nbsp; &nbsp; &nbsp; 
&nbsp; &nbsp; <span class="kw1">public</span> async Task<span class="sy0">&lt;</span>LoginUser<span class="sy0">&gt;</span> GetUserByAuthenticationAsync<span class="br0">&#40;</span>AuthenticationScheme authenticationScheme, <span class="kw4">string</span> identity<span class="br0">&#41;</span>
&nbsp; &nbsp; <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">var</span> query <span class="sy0">=</span> _client<span class="sy0">.</span><span class="me1">CreateDocumentQuery</span><span class="sy0">&lt;</span>LoginUserAuthentication<span class="sy0">&gt;</span><span class="br0">&#40;</span>GetAuthenticationsCollectionUri<span class="br0">&#40;</span><span class="br0">&#41;</span>, <span class="kw3">new</span> SqlQuerySpec<span class="br0">&#40;</span><span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; QueryText <span class="sy0">=</span> <span class="st0">&quot;SELECT * FROM UserAuthentications UA WHERE UA.Scheme = @scheme AND UA.Identity = @identity&quot;</span>,
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Parameters <span class="sy0">=</span> <span class="kw3">new</span> SqlParameterCollection<span class="br0">&#40;</span><span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw3">new</span> SqlParameter<span class="br0">&#40;</span><span class="st0">&quot;@scheme&quot;</span>, authenticationScheme<span class="br0">&#41;</span>,
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw3">new</span> SqlParameter<span class="br0">&#40;</span><span class="st0">&quot;@identity&quot;</span>, identity<span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">var</span> results <span class="sy0">=</span> await query<span class="sy0">.</span><span class="me1">AsDocumentQuery</span><span class="br0">&#40;</span><span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="sy0">.</span><span class="me1">ExecuteNextAsync</span><span class="sy0">&lt;</span>LoginUserAuthentication<span class="sy0">&gt;</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">if</span> <span class="br0">&#40;</span>results<span class="sy0">.</span><span class="me1">Count</span> <span class="sy0">==</span> <span class="nu0">0</span><span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">return</span> <span class="kw1">null</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">else</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">return</span> await GetUserAsync<span class="br0">&#40;</span>results<span class="sy0">.</span><span class="me1">First</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">.</span><span class="me1">UserId</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp;
&nbsp; &nbsp; <span class="co1">// ...</span>
&nbsp;
&nbsp; &nbsp; <span class="kw1">public</span> async Task DeleteUserAsync<span class="br0">&#40;</span>LoginUser user<span class="br0">&#41;</span>
&nbsp; &nbsp; <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; await _client<span class="sy0">.</span><span class="me1">DeleteDocumentAsync</span><span class="br0">&#40;</span>UriFactory<span class="sy0">.</span><span class="me1">CreateDocumentUri</span><span class="br0">&#40;</span>_databaseId, USERS_DOCUMENT_COLLECTION_ID, user<span class="sy0">.</span><span class="me1">Id</span><span class="br0">&#41;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp;
&nbsp; &nbsp; <span class="co2">#endregion</span>
&nbsp;
&nbsp; &nbsp; <span class="co2">#region Additional Authentication Methods</span>
&nbsp;
&nbsp; &nbsp; <span class="kw1">public</span> async Task<span class="sy0">&lt;</span>LoginUserAuthentication<span class="sy0">&gt;</span> CreateUserAuthenticationAsync<span class="br0">&#40;</span>LoginUserAuthentication userAuth<span class="br0">&#41;</span>
&nbsp; &nbsp; <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">var</span> result <span class="sy0">=</span> await _client<span class="sy0">.</span><span class="me1">CreateDocumentAsync</span><span class="br0">&#40;</span>GetAuthenticationsCollectionUri<span class="br0">&#40;</span><span class="br0">&#41;</span>, userAuth, <span class="kw3">new</span> RequestOptions<span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span> <span class="br0">&#125;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">return</span> JsonConvert<span class="sy0">.</span><span class="me1">DeserializeObject</span><span class="sy0">&lt;</span>LoginUserAuthentication<span class="sy0">&gt;</span><span class="br0">&#40;</span>result<span class="sy0">.</span><span class="me1">Resource</span><span class="sy0">.</span><span class="me1">ToString</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp;
&nbsp;
&nbsp; &nbsp; <span class="kw1">public</span> async Task<span class="sy0">&lt;</span><span class="kw4">bool</span><span class="sy0">&gt;</span> IsIdentityRegisteredAsync<span class="br0">&#40;</span>AuthenticationScheme authenticationScheme, <span class="kw4">string</span> identity<span class="br0">&#41;</span>
&nbsp; &nbsp; <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">var</span> query <span class="sy0">=</span> _client<span class="sy0">.</span><span class="me1">CreateDocumentQuery</span><span class="sy0">&lt;</span><span class="kw4">int</span><span class="sy0">&gt;</span><span class="br0">&#40;</span>GetAuthenticationsCollectionUri<span class="br0">&#40;</span><span class="br0">&#41;</span>, <span class="kw3">new</span> SqlQuerySpec<span class="br0">&#40;</span><span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; QueryText <span class="sy0">=</span> <span class="st0">&quot;SELECT VALUE COUNT(1) FROM UserAuthentications UA WHERE UA.Scheme = @scheme AND UA.Identity = @identity&quot;</span>,
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Parameters <span class="sy0">=</span> <span class="kw3">new</span> SqlParameterCollection<span class="br0">&#40;</span><span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw3">new</span> SqlParameter<span class="br0">&#40;</span><span class="st0">&quot;@scheme&quot;</span>, authenticationScheme<span class="br0">&#41;</span>,
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw3">new</span> SqlParameter<span class="br0">&#40;</span><span class="st0">&quot;@identity&quot;</span>, identity<span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">var</span> result <span class="sy0">=</span> await query<span class="sy0">.</span><span class="me1">AsDocumentQuery</span><span class="br0">&#40;</span><span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="sy0">.</span><span class="me1">ExecuteNextAsync</span><span class="sy0">&lt;</span><span class="kw4">int</span><span class="sy0">&gt;</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">return</span> result<span class="sy0">.</span><span class="me1">Single</span><span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="sy0">==</span> <span class="nu0">1</span><span class="sy0">;</span>
&nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp;
&nbsp; &nbsp; <span class="co2">#endregion</span>
&nbsp;
&nbsp; &nbsp; <span class="co1">// ...</span>
<span class="br0">&#125;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">public class UserPersistence
{
    // ...

    public async Task EnsureSetupAsync()
    {
        var databaseUri = UriFactory.CreateDatabaseUri(_databaseId);

        // Collections
        // ...
        await _client.CreateDocumentCollectionIfNotExistsAsync(databaseUri, new DocumentCollection() { Id = AUTHS_DOCUMENT_COLLECTION_ID });
        // ...
    }

    #region Users

    // ...
        
    public async Task&lt;LoginUser&gt; GetUserByAuthenticationAsync(AuthenticationScheme authenticationScheme, string identity)
    {
        var query = _client.CreateDocumentQuery&lt;LoginUserAuthentication&gt;(GetAuthenticationsCollectionUri(), new SqlQuerySpec()
        {
            QueryText = "SELECT * FROM UserAuthentications UA WHERE UA.Scheme = @scheme AND UA.Identity = @identity",
            Parameters = new SqlParameterCollection()
            {
                new SqlParameter("@scheme", authenticationScheme),
                new SqlParameter("@identity", identity)
            }
        });
        var results = await query.AsDocumentQuery()
                                    .ExecuteNextAsync&lt;LoginUserAuthentication&gt;();
        if (results.Count == 0)
        {
            return null;
        }
        else
        {
            return await GetUserAsync(results.First().UserId);
        }
    }

    // ...

    public async Task DeleteUserAsync(LoginUser user)
    {
        await _client.DeleteDocumentAsync(UriFactory.CreateDocumentUri(_databaseId, USERS_DOCUMENT_COLLECTION_ID, user.Id));
    }

    #endregion

    #region Additional Authentication Methods

    public async Task&lt;LoginUserAuthentication&gt; CreateUserAuthenticationAsync(LoginUserAuthentication userAuth)
    {
        var result = await _client.CreateDocumentAsync(GetAuthenticationsCollectionUri(), userAuth, new RequestOptions() { });
        return JsonConvert.DeserializeObject&lt;LoginUserAuthentication&gt;(result.Resource.ToString());
    }


    public async Task&lt;bool&gt; IsIdentityRegisteredAsync(AuthenticationScheme authenticationScheme, string identity)
    {
        var query = _client.CreateDocumentQuery&lt;int&gt;(GetAuthenticationsCollectionUri(), new SqlQuerySpec()
        {
            QueryText = "SELECT VALUE COUNT(1) FROM UserAuthentications UA WHERE UA.Scheme = @scheme AND UA.Identity = @identity",
            Parameters = new SqlParameterCollection()
            {
                new SqlParameter("@scheme", authenticationScheme),
                new SqlParameter("@identity", identity)
            }
        });
        var result = await query.AsDocumentQuery()
                                .ExecuteNextAsync&lt;int&gt;();
        return result.Single() == 1;
    }

    #endregion

    // ...
}</pre></div></div>

<p>These all follow naturally from the methods created for prior posts. </p>
<h2>Wrapping Up, Next Steps</h2>
<p>Adding Twitter as an alternative interactive login method was pretty easy, once I figured out how the Middleware worked behind the scenes. Adding a second or third method would also be relatively easy, though I would likely want to use the Middleware options to remap specific claims like &#8220;urn:twitter:userid&#8221; and the matching value for LinkedIn or others to a common set of named claims to funnel redirects into a common set of callback URls.</p>
<p>Next up is the final Authentication post, adding in a per-request API key/secret method that relies on revocable API keys the user will manage as additional <code>LoginUserAuthentication</code> identities.</p>
]]></content>
			<link rel="replies" type="text/html" href="/index.php/webdev/serverprogramming/aspnet/adding-twitter-authentication-to-an-asp-net-core-2-site-w-cosmos-db/#comments" thr:count="0"/>
		<link rel="replies" type="application/atom+xml" href="/index.php/webdev/serverprogramming/aspnet/adding-twitter-authentication-to-an-asp-net-core-2-site-w-cosmos-db/feed/atom/" thr:count="0"/>
		<thr:total>0</thr:total>
		</entry>
		<entry>
		<author>
			<name>Eli Weinstock-Herman (tarwn)</name>
					</author>
		<title type="html"><![CDATA[Custom Authentication in ASP.Net Core 2 w/ Cosmos DB]]></title>
		<link rel="alternate" type="text/html" href="/index.php/webdev/serverprogramming/aspnet/custom-authentication-in-asp-net-core-2-w-cosmos-db/" />
		<id>/?p=9130</id>
		<updated>2019-03-09T12:50:36Z</updated>
		<published>2018-04-13T12:10:01Z</published>
		<category scheme="/" term="ASP.NET" /><category scheme="/" term="ASP.Net Core 2" /><category scheme="/" term="authentication" /><category scheme="/" term="bcrypt" /><category scheme="/" term="CosmosDB" />		<summary type="html"><![CDATA[I&#8217;m building a B2C website with Cosmos DB as the backend store. This site will have a number of different authentication mechanisms, but I&#8217;m newer to ASP.Net Core 2 and the authentication changes since the prior version so I&#8217;m going to start with a basic Cookie and Login authentication system. This is the second post [&#8230;]]]></summary>
		<content type="html" xml:base="/index.php/webdev/serverprogramming/aspnet/custom-authentication-in-asp-net-core-2-w-cosmos-db/"><![CDATA[<p>I&#8217;m building a B2C website with Cosmos DB as the backend store. This site will have a number of different authentication mechanisms, but I&#8217;m newer to ASP.Net Core 2 and the authentication changes since the prior version so I&#8217;m going to start with a basic Cookie and Login authentication system.</p>
<p>This is the second post in a series documenting the creation of this project. If you haven&#8217;t worked with custom authentication in ASP.Net Core 2, are looking for more examples of interacting with Cosmos DB, or just trying to avoid the overkill of Identity and EntityFramework, I hope this is helpful.</p>
<p>If you want to follow along from the beginning, the series starts with <a href="/index.php/webdev/serverprogramming/aspnet/asp-net-core-2-w-cosmosdb-getting-started/" title="Read the first post in the series">ASP.Net Core 2 w/ Cosmos DB: Getting Started </a></p>
<style>
.note-area{
   border: 1px solid #eeeeee; 
   border-left-width: 16px; 
   padding: 1em;
   margin: 1em 0;
}
.warning-area{
   border: 1px solid #FFdddd; 
   border-left-width: 16px; 
   padding: 1em;
   margin: 1em 0;
}
</style>
<h2>Getting Organization</h2>
<p>Instead of grabbing a cup of coffee and pounding away at my keyboard until I&#8217;m done, I prefer to break work down into a smaller set of steps I can work on one at a time. This helps provide a sense of momentum, knowledge that each new step is starting at a known good state, and the safety to throw away a set of changes that isn&#8217;t working out instead of backtracking manually.</p>
<div id="attachment_9155" style="width: 610px" class="wp-caption aligncenter"><img src="/wp-content/uploads/2018/04/aspnetcore2cosmos_106-600x406.png" alt="3 Authentication Scenarios: User/Pass, Twitter, API Keys" width="600" height="406" class="size-medium-width wp-image-9155" srcset="/wp-content/uploads/2018/04/aspnetcore2cosmos_106-600x406.png 600w, /wp-content/uploads/2018/04/aspnetcore2cosmos_106-300x203.png 300w, /wp-content/uploads/2018/04/aspnetcore2cosmos_106-443x300.png 443w, /wp-content/uploads/2018/04/aspnetcore2cosmos_106.png 748w" sizes="(max-width: 600px) 100vw, 600px" /><p class="wp-caption-text">3 Authentication Scenarios: User/Pass, Twitter, API Keys</p></div>
<p>There are two scenarios: Interactive logins and API authentication. For interactive logins, I want folks to have the option of either a username/password registration or a 3rd party OAuth registration (twitter, for example).</p>
<p>At a macro level, I can break this down into:</p>
<ul>
<li>1: Username/Password Registration, Login, Logout, Sessions + Cookies</li>
<li>2: Twitter Registration, Twitter Login</li>
<li>3: API Key management, API Key Authentication</li>
</ul>
<p>This post will cover the first set: building standard username/password authentication down to Cosmos DB. It will also include some refactoring of the <code>Persistence</code> class I created to interact with Cosmos DB and good, secure hashing of passwords.</p>
<p>This is going to be a long post, it may look a little formidable at first, but actual coding time took less than writing it up as a blog post, it&#8217;s extensible (per the next two posts), and we have wide open freedom to apply any HTML and CSS we want and we can worry less about ASP.Net Core 2.1 releasing and breaking everything while we&#8217;re in the middle.</p>
<div id="attachment_9173" style="width: 505px" class="wp-caption aligncenter"><img src="/wp-content/uploads/2018/04/aspnetcore2cosmos_107.png" alt="These are the main changes, plus a few POCOs" width="495" height="746" class="size-full wp-image-9173" srcset="/wp-content/uploads/2018/04/aspnetcore2cosmos_107.png 495w, /wp-content/uploads/2018/04/aspnetcore2cosmos_107-199x300.png 199w" sizes="(max-width: 495px) 100vw, 495px" /><p class="wp-caption-text">These are the main changes, plus a few POCOs</p></div>
<p>All of the noted files above are included in the post. There are also a few POCOs (LoginResults, etc). You can view the full code for this post on github: <a href="https://github.com/tarwn/Sample_ASPNetCore2AndCosmosDB/blob/Post-%232/SampleCosmosCore2App/Membership/CustomMembershipExtensions.cs" title="View on github">tarwn/Sample_ASPNetCore2AndCosmosDB, Post-#2 branch</a></p>
<h2>An Overview of ASP.Net Core 2 Authentication</h2>
<p>ASP.Net Core 2 ships with built-in modules for a variety of use cases: <a href="https://docs.microsoft.com/en-us/aspnet/core/security/authentication/" title="MSDN: ASP.Net Core Authentication">MSDN: ASP.Net Core Authentication</a> </p>
<div class="warning-area">
Be aware that most the MSDN examples mix the concepts of the Authentication middleware with the <code>Identity</code> model. ASP.Net Identity is not required and is, in my opinion, a fairly clumsy abstraction. Even the article on <a href="https://docs.microsoft.com/en-us/aspnet/core/security/authentication/identity-custom-storage-providers">custom authentication</a> assumes you want to use Identity for the business logic and will just be supplying data store implementations that are lightly documented and much wider than needed.</p>
<p>We will be using Principals and Identities for HttpContext, these are standard HttpContext concepts that are not related to &#8220;ASP.Net Core Identity&#8221;.
</p></div>
<p>The purpose of the Authentication modules are to interact with the outside world and provide some standard behavior and configurable options for their specific capabilities. The key behaviors are:</p>
<ul>
<li>Translating external information to Claims: Reading a cookie, receiving an OAuth callback</li>
<li>Challenging a user: Sending them to a login page, starting an OAuth process</li>
<li>Sign In/Out: Persisting claims information back out into the world (writing a cookie)</li>
<li>External behavior for Unauthenticated/Forbidden requests: Sending a 401 Response</li>
</ul>
<p><code>Authentication Schemes</code> uniquely identify each Authentication module, for instance a request that comes in with two cookies would show two sets of Claims, each identified by an <code>AuthenticationScheme</code> from the Authentication module that read it. The <code>AuthenticationScheme</code> can also be used to enforce authentication to a specific <code>Scheme</code> for an endpoint (ignore claims from other modules, does this <code>Scheme</code> say they are allowed in?). A <code>DefaultAuthenticationScheme</code> configuration tell the system which Authentication module to challenge un-authentication users with. Or you can can have an endpoint explicitly issue a Challenge by <code>Scheme</code>, &#8220;Twitter&#8221; for example:</p>
<p><b>Starting a Twitter OAuth Sign-in</b></p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="csharp"><thead><tr><td colspan="2"  class="head">C#</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
</pre></td><td class="de1"><pre class="de1"><span class="br0">&#91;</span>HttpGet<span class="br0">&#40;</span><span class="st0">&quot;register/twitter&quot;</span><span class="br0">&#41;</span><span class="br0">&#93;</span>
<span class="br0">&#91;</span>AllowAnonymous<span class="br0">&#93;</span>
<span class="kw1">public</span> IActionResult RegisterWithTwitter<span class="br0">&#40;</span><span class="br0">&#41;</span>
<span class="br0">&#123;</span>
&nbsp; &nbsp; <span class="kw1">var</span> props <span class="sy0">=</span> <span class="kw3">new</span> AuthenticationProperties<span class="br0">&#40;</span><span class="br0">&#41;</span>
&nbsp; &nbsp; <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; RedirectUri <span class="sy0">=</span> <span class="st0">&quot;account/register/twitter/continue&quot;</span>
&nbsp; &nbsp; <span class="br0">&#125;</span><span class="sy0">;</span>
&nbsp; &nbsp; <span class="kw1">return</span> Challenge<span class="br0">&#40;</span>props, <span class="st0">&quot;Twitter&quot;</span><span class="br0">&#41;</span><span class="sy0">;</span>
<span class="br0">&#125;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">[HttpGet("register/twitter")]
[AllowAnonymous]
public IActionResult RegisterWithTwitter()
{
    var props = new AuthenticationProperties()
    {
        RedirectUri = "account/register/twitter/continue"
    };
    return Challenge(props, "Twitter");
}</pre></div></div>

<p>There&#8217;s a lot more, here is a great post: <a href="https://digitalmccullough.com/posts/aspnetcore-auth-system-demystified.html" title="Deep dive into ASP.Net Core 2 Auth">ASP.NET Core 2.0 Authentication and Authorization System Demystified</a>.</p>
<h2>Task 1: Cookies, custom Membership, Cosmos DB, and basic pages</h2>
<p>The first piece we have sliced off is the workflow of Registering, Login, and Logout with cookies for validation. Though I executed this in vertical slices (for instance, I built the registration form from HTML down to Cosmo sDB before starting the login form), the post is presented in finished files or we&#8217;d be staring at the same file 10-12 times in a row.</p>
<h3>Authentication and ICustomMembership</h3>
<p>First, let&#8217;s focus on getting the custom authentication wired in with the Cookies authentication module and a custom Membership object to include business logic.</p>
<p>The concrete <code>CosmosDBMembership</code> object will be responsible for creating and validating users internally against the Cosmos DB store:</p>
<p><a href="https://github.com/tarwn/Sample_ASPNetCore2AndCosmosDB/blob/d7c5907d45154685b62127c714394b29734f8e60/SampleCosmosCore2App/Membership/ICustomMembership.cs">SampleCosmosCore2App/Membership/ICustomMembership.cs</a></p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="csharp"><thead><tr><td colspan="2"  class="head">C#</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
</pre></td><td class="de1"><pre class="de1"><span class="kw1">public</span> <span class="kw4">interface</span> ICustomMembership
<span class="br0">&#123;</span>
&nbsp; &nbsp; CustomMembershipOptions Options <span class="br0">&#123;</span> <span class="kw1">get</span><span class="sy0">;</span> <span class="br0">&#125;</span>
&nbsp;
&nbsp; &nbsp; Task<span class="sy0">&lt;</span>RegisterResult<span class="sy0">&gt;</span> RegisterAsync<span class="br0">&#40;</span><span class="kw4">string</span> userName, <span class="kw4">string</span> email, <span class="kw4">string</span> password<span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; Task<span class="sy0">&lt;</span>LoginResult<span class="sy0">&gt;</span> LoginAsync<span class="br0">&#40;</span><span class="kw4">string</span> userName, <span class="kw4">string</span> password<span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; Task LogoutAsync<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; Task<span class="sy0">&lt;</span><span class="kw4">bool</span><span class="sy0">&gt;</span> ValidateLoginAsync<span class="br0">&#40;</span>ClaimsPrincipal principal<span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; Task<span class="sy0">&lt;</span>SessionDetails<span class="sy0">&gt;</span> GetSessionDetailsAsync<span class="br0">&#40;</span>ClaimsPrincipal principal<span class="br0">&#41;</span><span class="sy0">;</span>
<span class="br0">&#125;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">public interface ICustomMembership
{
	CustomMembershipOptions Options { get; }

	Task&lt;RegisterResult&gt; RegisterAsync(string userName, string email, string password);
	Task&lt;LoginResult&gt; LoginAsync(string userName, string password);
	Task LogoutAsync();
	Task&lt;bool&gt; ValidateLoginAsync(ClaimsPrincipal principal);

	Task&lt;SessionDetails&gt; GetSessionDetailsAsync(ClaimsPrincipal principal);
}</pre></div></div>

<p>This reflects the basic set of behaviors we intend to perform, with an options object that includes a <code>DefaultPathAfterLogin</code> and <code>AuthenticationType</code> to use when interacting with Claims and HttpContext SignIn/SignOut methods.</p>
<p>Next, we switch to the <code>Startup.cs</code> and register the concrete <code>CosmosDBMembership</code> class for this interface, register the default scheme (&#8220;Cookies&#8221;), and configure a Cookie authentication module for the &#8220;Cookies&#8221; scheme:</p>
<p><a href="https://github.com/tarwn/Sample_ASPNetCore2AndCosmosDB/blob/d7c5907d45154685b62127c714394b29734f8e60/SampleCosmosCore2App/Startup.cs#L44">SampleCosmosCore2App/Startup.cs</a></p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="csharp"><thead><tr><td colspan="2"  class="head">C#</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
</pre></td><td class="de1"><pre class="de1"><span class="kw1">public</span> <span class="kw4">void</span> ConfigureServices<span class="br0">&#40;</span>IServiceCollection services<span class="br0">&#41;</span>
<span class="br0">&#123;</span>
&nbsp; &nbsp; services<span class="sy0">.</span><span class="me1">AddMvc</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; <span class="co1">// ...</span>
&nbsp;
&nbsp; &nbsp; <span class="co1">// #1</span>
&nbsp; &nbsp; services<span class="sy0">.</span><span class="me1">AddCustomMembership</span><span class="sy0">&lt;</span>CosmosDBMembership<span class="sy0">&gt;</span><span class="br0">&#40;</span><span class="br0">&#40;</span>options<span class="br0">&#41;</span> <span class="sy0">=&gt;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; options<span class="sy0">.</span><span class="me1">AuthenticationType</span> <span class="sy0">=</span> CookieAuthenticationDefaults<span class="sy0">.</span><span class="me1">AuthenticationScheme</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; options<span class="sy0">.</span><span class="me1">DefaultPathAfterLogin</span> <span class="sy0">=</span> <span class="st0">&quot;/&quot;</span><span class="sy0">;</span>
&nbsp; &nbsp; <span class="br0">&#125;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; <span class="co1">// #2</span>
&nbsp; &nbsp; services<span class="sy0">.</span><span class="me1">AddAuthentication</span><span class="br0">&#40;</span>CookieAuthenticationDefaults<span class="sy0">.</span><span class="me1">AuthenticationScheme</span><span class="br0">&#41;</span>
&nbsp; &nbsp; <span class="co1">// #3</span>
&nbsp; &nbsp; <span class="sy0">.</span><span class="me1">AddCookie</span><span class="br0">&#40;</span><span class="br0">&#40;</span>options<span class="br0">&#41;</span> <span class="sy0">=&gt;</span>
&nbsp; &nbsp; <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; options<span class="sy0">.</span><span class="me1">LoginPath</span> <span class="sy0">=</span> <span class="kw3">new</span> PathString<span class="br0">&#40;</span><span class="st0">&quot;/account/login&quot;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; options<span class="sy0">.</span><span class="me1">LogoutPath</span> <span class="sy0">=</span> <span class="kw3">new</span> PathString<span class="br0">&#40;</span><span class="st0">&quot;/account/logout&quot;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; options<span class="sy0">.</span><span class="me1">Events</span> <span class="sy0">=</span> <span class="kw3">new</span> CookieAuthenticationEvents<span class="br0">&#40;</span><span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="co1">// #3</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; OnValidatePrincipal <span class="sy0">=</span> async <span class="br0">&#40;</span>c<span class="br0">&#41;</span> <span class="sy0">=&gt;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">var</span> membership <span class="sy0">=</span> c<span class="sy0">.</span><span class="me1">HttpContext</span><span class="sy0">.</span><span class="me1">RequestServices</span><span class="sy0">.</span><span class="me1">GetRequiredService</span><span class="sy0">&lt;</span>ICustomMembership<span class="sy0">&gt;</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">var</span> isValid <span class="sy0">=</span> await membership<span class="sy0">.</span><span class="me1">ValidateLoginAsync</span><span class="br0">&#40;</span>c<span class="sy0">.</span><span class="me1">Principal</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">if</span> <span class="br0">&#40;</span><span class="sy0">!</span>isValid<span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; c<span class="sy0">.</span><span class="me1">RejectPrincipal</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span><span class="sy0">;</span>
&nbsp; &nbsp; <span class="br0">&#125;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
<span class="br0">&#125;</span>
&nbsp;
<span class="kw1">public</span> <span class="kw4">void</span> Configure<span class="br0">&#40;</span>IApplicationBuilder app, IHostingEnvironment env<span class="br0">&#41;</span>
<span class="br0">&#123;</span>
&nbsp; &nbsp; <span class="co1">// ...</span>
&nbsp;
&nbsp; &nbsp; <span class="co1">// #4</span>
&nbsp; &nbsp; app<span class="sy0">.</span><span class="me1">UseAuthentication</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; app<span class="sy0">.</span><span class="me1">UseMvc</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
<span class="br0">&#125;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">public void ConfigureServices(IServiceCollection services)
{
	services.AddMvc();

	// ...

	// #1
	services.AddCustomMembership&lt;CosmosDBMembership&gt;((options) =&gt; {
		options.AuthenticationType = CookieAuthenticationDefaults.AuthenticationScheme;
		options.DefaultPathAfterLogin = "/";
	});

	// #2
	services.AddAuthentication(CookieAuthenticationDefaults.AuthenticationScheme)
	// #3
	.AddCookie((options) =&gt;
	{
		options.LoginPath = new PathString("/account/login");
		options.LogoutPath = new PathString("/account/logout");
		options.Events = new CookieAuthenticationEvents()
		{
			// #3
			OnValidatePrincipal = async (c) =&gt;
			{
				var membership = c.HttpContext.RequestServices.GetRequiredService&lt;ICustomMembership&gt;();
				var isValid = await membership.ValidateLoginAsync(c.Principal);
				if (!isValid)
				{
					c.RejectPrincipal();
				}
			}
		};
	});

}

public void Configure(IApplicationBuilder app, IHostingEnvironment env)
{
	// ...

	// #4
	app.UseAuthentication();

	app.UseMvc();
}</pre></div></div>

<p><em>Note: While I refer to the &#8220;Cookies&#8221; scheme by name, you&#8217;ll note above I actually use the constant CookieAuthenticationDefaults.AuthenticationScheme</em></p>
<p><b>#1 &#8211; services.AddCustomMembership:</b> Register CosmosDBMembership as a Transient dependency for ICustomMembership vi an <a href="https://github.com/tarwn/Sample_ASPNetCore2AndCosmosDB/blob/d7c5907d45154685b62127c714394b29734f8e60/SampleCosmosCore2App/Membership/CustomMembershipExtensions.cs">extension method (github)</a>.</p>
<p><b>#2 &#8211; services.AddAuthentication:</b> Set the Default Authentication Scheme to our &#8220;Cookies&#8221; scheme to tell the system to use the &#8220;Cookies&#8221; module for challenging Unauthorized users.</p>
<p><b>#3 &#8211; .AddCookie:</b> Lightly configure a Cookies module to use the &#8220;Cookies&#8221; scheme and provide the &#8220;LoginPath&#8221; used for challenging a user. (I don&#8217;t recall why I included &#8220;LogoutPath&#8221;). Wire an event in for <code>OnValidatePrincipal</code> that gets the registered Membership object and asks it if the user is valid according to our business logic.</p>
<p><b>#4 &#8211; app.UseAuthentication: </b> Include the configured authentication middleware in the application</p>
<p>Now that we have wired ourselves into the outside world, let&#8217;s move on to build the business logic and persistence.</p>
<h3>Cosmos DB Refactoring</h3>
<p>In the prior post, I had very basic CRUD logic to read/write a <code>Sample</code> object to Cosmos DB. Now we need to add the concepts of a registered user (<code>LoginUser</code>) and an authorized user session (<code>LoginSession</code>). First we&#8217;re going to do some refactoring.</p>
<p>Here are the challenges:</p>
<ul>
<li>It will be a mess if we add <code>LoginUser</code> logic to <code>Persistence</code> on top of <code>Sample</code></li>
<li><a href="https://azure.microsoft.com/en-us/blog/performance-tips-for-azure-documentdb-part-1-2/" title="MSDN: CosmosDB Performance Tips">Microsoft&#8217;s performance guide</a> says we should use a Singleton for the DocumentClient for performance</li>
</ul>
<div class="note-area">
The three most notable changes from the <a href="https://azure.microsoft.com/en-us/blog/performance-tips-for-azure-documentdb-part-1-2/" title="MSDN: CosmosDB Performance Tips">Performance Tips</a> are configuring the <code>Persistence</code> class (and it&#8217;s DocumentClient) to be a singleton over the lifetime of the web server, calling <code>OpenAsync</code> early so the connection is opened prior to the first real call, and moving the call to <code>EnsureSetupAsync</code> to the registration of the Singleton in <code>Startup.cs</code> so it happens only one time.
</div>
<p>To solve this, Persistence will be split into a top-level class with general behavior and responsibility for the DocumentClient instance, while actual persistence logic will be moved into individual, scoped data classes:</p>
<p><a href="https://github.com/tarwn/Sample_ASPNetCore2AndCosmosDB/blob/d7c5907d45154685b62127c714394b29734f8e60/SampleCosmosCore2App.Core/Persistence.cs">SampleCosmosCore2App.Core/Persistence.cs</a></p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="csharp"><thead><tr><td colspan="2"  class="head">C#</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
</pre></td><td class="de1"><pre class="de1"><span class="kw1">public</span> <span class="kw4">class</span> Persistence <span class="sy0">:</span> IDisposable
<span class="br0">&#123;</span>
&nbsp; &nbsp; <span class="kw1">private</span> <span class="kw4">string</span> _databaseId<span class="sy0">;</span>
&nbsp; &nbsp; <span class="kw1">private</span> Uri _endpointUri<span class="sy0">;</span>
&nbsp; &nbsp; <span class="kw1">private</span> <span class="kw4">string</span> _primaryKey<span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; <span class="kw1">private</span> DocumentClient _client<span class="sy0">;</span>
&nbsp; &nbsp; <span class="kw1">private</span> <span class="kw4">bool</span> _isDisposing<span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; <span class="kw1">public</span> Persistence<span class="br0">&#40;</span>Uri endpointUri, <span class="kw4">string</span> primaryKey, <span class="kw4">string</span> databaseId<span class="br0">&#41;</span>
&nbsp; &nbsp; <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; _databaseId <span class="sy0">=</span> databaseId<span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; _endpointUri <span class="sy0">=</span> endpointUri<span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; _primaryKey <span class="sy0">=</span> primaryKey<span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; _client <span class="sy0">=</span> <span class="kw3">new</span> DocumentClient<span class="br0">&#40;</span>endpointUri, primaryKey<span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; _client<span class="sy0">.</span><span class="me1">OpenAsync</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; Samples <span class="sy0">=</span> <span class="kw3">new</span> SamplePersistence<span class="br0">&#40;</span>_client, _databaseId<span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; Users <span class="sy0">=</span> <span class="kw3">new</span> UserPersistence<span class="br0">&#40;</span>_client, _databaseId<span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp;
&nbsp; &nbsp; <span class="kw1">public</span> UserPersistence Users <span class="br0">&#123;</span> <span class="kw1">get</span><span class="sy0">;</span> <span class="kw1">private</span> <span class="kw1">set</span><span class="sy0">;</span> <span class="br0">&#125;</span>
&nbsp;
&nbsp; &nbsp; <span class="kw1">public</span> SamplePersistence Samples <span class="br0">&#123;</span> <span class="kw1">get</span><span class="sy0">;</span> <span class="kw1">private</span> <span class="kw1">set</span><span class="sy0">;</span> <span class="br0">&#125;</span>
&nbsp;
&nbsp; &nbsp; <span class="kw1">public</span> async Task EnsureSetupAsync<span class="br0">&#40;</span><span class="br0">&#41;</span>
&nbsp; &nbsp; <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; await _client<span class="sy0">.</span><span class="me1">CreateDatabaseIfNotExistsAsync</span><span class="br0">&#40;</span><span class="kw3">new</span> Database <span class="br0">&#123;</span> Id <span class="sy0">=</span> _databaseId <span class="br0">&#125;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; 
&nbsp; &nbsp; &nbsp; &nbsp; await Task<span class="sy0">.</span><span class="me1">WhenAll</span><span class="br0">&#40;</span><span class="kw3">new</span> Task<span class="br0">&#91;</span><span class="br0">&#93;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Samples<span class="sy0">.</span><span class="me1">EnsureSetupAsync</span><span class="br0">&#40;</span><span class="br0">&#41;</span>,
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Users<span class="sy0">.</span><span class="me1">EnsureSetupAsync</span><span class="br0">&#40;</span><span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp; &nbsp; 
&nbsp; &nbsp; <span class="kw1">public</span> <span class="kw4">void</span> Dispose<span class="br0">&#40;</span><span class="br0">&#41;</span>
&nbsp; &nbsp; <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">if</span> <span class="br0">&#40;</span><span class="sy0">!</span>_isDisposing<span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; _isDisposing <span class="sy0">=</span> <span class="kw1">true</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">if</span> <span class="br0">&#40;</span>_client <span class="sy0">!=</span> <span class="kw1">null</span><span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; _client<span class="sy0">.</span><span class="me1">Dispose</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp; &nbsp; <span class="br0">&#125;</span>
<span class="br0">&#125;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">public class Persistence : IDisposable
{
	private string _databaseId;
	private Uri _endpointUri;
	private string _primaryKey;

	private DocumentClient _client;
	private bool _isDisposing;

	public Persistence(Uri endpointUri, string primaryKey, string databaseId)
	{
		_databaseId = databaseId;
		_endpointUri = endpointUri;
		_primaryKey = primaryKey;

		_client = new DocumentClient(endpointUri, primaryKey);
		_client.OpenAsync();

		Samples = new SamplePersistence(_client, _databaseId);
		Users = new UserPersistence(_client, _databaseId);
	}

	public UserPersistence Users { get; private set; }

	public SamplePersistence Samples { get; private set; }

	public async Task EnsureSetupAsync()
	{
		await _client.CreateDatabaseIfNotExistsAsync(new Database { Id = _databaseId });
		
		await Task.WhenAll(new Task[] {
			Samples.EnsureSetupAsync(),
			Users.EnsureSetupAsync()
		});
	}
	
	public void Dispose()
	{
		if (!_isDisposing)
		{
			_isDisposing = true;
			if (_client != null)
			{
				_client.Dispose();
			}
		}
	}
}</pre></div></div>

<p>And we&#8217;ve exposed access to <code>Sample</code> and <code>LoginUser</code> data through two properties, which are also referenced during the <code>EnsureSetupAsync</code> call (btw: don&#8217;t use a Task.WhenAll for that like I did, bad things happen).</p>
<p>Next, we&#8217;ll stop calling the <code>EnsureSetupAsync</code> method on every persistence call and instead call this one time during the setup of the service.</p>
<p><a href="https://github.com/tarwn/Sample_ASPNetCore2AndCosmosDB/blob/d7c5907d45154685b62127c714394b29734f8e60/SampleCosmosCore2App/Startup.cs">SampleCosmosCore2App/Startup.cs</a></p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="csharp"><thead><tr><td colspan="2"  class="head">C#</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
</pre></td><td class="de1"><pre class="de1"><span class="kw1">public</span> <span class="kw4">void</span> ConfigureServices<span class="br0">&#40;</span>IServiceCollection services<span class="br0">&#41;</span>
<span class="br0">&#123;</span>
&nbsp; &nbsp; <span class="co1">// ...</span>
&nbsp;
&nbsp; &nbsp; services<span class="sy0">.</span><span class="me1">AddSingleton</span><span class="sy0">&lt;</span>Persistence<span class="sy0">&gt;</span><span class="br0">&#40;</span><span class="br0">&#40;</span>s<span class="br0">&#41;</span> <span class="sy0">=&gt;</span>
&nbsp; &nbsp; <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">var</span> p <span class="sy0">=</span> <span class="kw3">new</span> Persistence<span class="br0">&#40;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw3">new</span> Uri<span class="br0">&#40;</span>Configuration<span class="br0">&#91;</span><span class="st0">&quot;CosmosDB:URL&quot;</span><span class="br0">&#93;</span><span class="br0">&#41;</span>,
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Configuration<span class="br0">&#91;</span><span class="st0">&quot;CosmosDB:PrimaryKey&quot;</span><span class="br0">&#93;</span>,
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Configuration<span class="br0">&#91;</span><span class="st0">&quot;CosmosDB:DatabaseId&quot;</span><span class="br0">&#93;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; p<span class="sy0">.</span><span class="me1">EnsureSetupAsync</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">.</span><span class="me1">Wait</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">return</span> p<span class="sy0">;</span>
&nbsp; &nbsp; <span class="br0">&#125;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; <span class="co1">// ... auth stuff</span>
<span class="br0">&#125;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">public void ConfigureServices(IServiceCollection services)
{
	// ...

	services.AddSingleton&lt;Persistence&gt;((s) =&gt;
	{
		var p = new Persistence(
			new Uri(Configuration["CosmosDB:URL"]),
					Configuration["CosmosDB:PrimaryKey"],
					Configuration["CosmosDB:DatabaseId"]);
		p.EnsureSetupAsync().Wait();
		return p;
	});

	// ... auth stuff
}</pre></div></div>

<p>Now the setup for CosmosDB will be called just the one time, instead of on every call where it was from the early experimentation.</p>
<p>The last step is actually using these changes to read and write <code>LoginUser</code> and <code>LoginSession</code> instances to CosmosDB.</p>
<h3>Cosmos DB &#8211; Membership</h3>
<p>We have an Interface defined above and the <code>Persistence</code> class has been refactored so we can add new Cosmos DB methods as we need them. Now we can focus on fleshing out the concrete <code>CosmosDBMembership</code> class. This wil then define the Persistence methods we need to add for Cosmos DB.</p>
<ul>
<li>RegisterAsync</li>
<li>LoginAsync</li>
<li>LogoutAsync</li>
<li>ValidateLoginAsync</li>
</ul>
<p><a href="https://github.com/tarwn/Sample_ASPNetCore2AndCosmosDB/blob/d7c5907d45154685b62127c714394b29734f8e60/SampleCosmosCore2App/Membership/CosmosDBMembership.cs#L86">Membership/CosmosDBMembership.cs &#8211; RegisterAsync</a></p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="csharp"><thead><tr><td colspan="2"  class="head">C#</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
</pre></td><td class="de1"><pre class="de1"><span class="kw1">public</span> async Task<span class="sy0">&lt;</span>RegisterResult<span class="sy0">&gt;</span> RegisterAsync<span class="br0">&#40;</span><span class="kw4">string</span> userName, <span class="kw4">string</span> email, <span class="kw4">string</span> password<span class="br0">&#41;</span>
<span class="br0">&#123;</span>
&nbsp; &nbsp; <span class="kw1">var</span> user <span class="sy0">=</span> <span class="kw3">new</span> LoginUser<span class="br0">&#40;</span><span class="br0">&#41;</span>
&nbsp; &nbsp; <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; Username <span class="sy0">=</span> userName,
&nbsp; &nbsp; &nbsp; &nbsp; Email <span class="sy0">=</span> email,
&nbsp; &nbsp; &nbsp; &nbsp; PasswordHash <span class="sy0">=</span> password
&nbsp; &nbsp; <span class="br0">&#125;</span><span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; <span class="kw1">try</span>
&nbsp; &nbsp; <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; user <span class="sy0">=</span> await _persistence<span class="sy0">.</span><span class="me1">Users</span><span class="sy0">.</span><span class="me1">CreateUserAsync</span><span class="br0">&#40;</span>user<span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp; &nbsp; <span class="kw1">catch</span> <span class="br0">&#40;</span>Exception exc<span class="br0">&#41;</span>
&nbsp; &nbsp; <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="co1">//TODO reduce breadth of exception statement</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">return</span> RegisterResult<span class="sy0">.</span><span class="me1">GetFailed</span><span class="br0">&#40;</span><span class="st0">&quot;Username is already in use&quot;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp;
&nbsp; &nbsp; await SignInAsync<span class="br0">&#40;</span>user<span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; <span class="kw1">return</span> RegisterResult<span class="sy0">.</span><span class="me1">GetSuccess</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
<span class="br0">&#125;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">public async Task&lt;RegisterResult&gt; RegisterAsync(string userName, string email, string password)
{
	var user = new LoginUser()
	{
		Username = userName,
		Email = email,
		PasswordHash = password
	};

	try
	{
		user = await _persistence.Users.CreateUserAsync(user);
	}
	catch (Exception exc)
	{
		//TODO reduce breadth of exception statement
		return RegisterResult.GetFailed("Username is already in use");
	}

	await SignInAsync(user);

	return RegisterResult.GetSuccess();
}</pre></div></div>

<p>Registration is pretty straightforward. Take the 3 required properties, load them into a <code>LoginUser</code> object, persist it, then sign the user in. The one non-obvious piece is the reliance on an <code>Exception</code> to detect duplicate Usernames. We&#8217;re going to add a unique constraint to Cosmos DB later to help enforce unique usernames.</p>
<p><a href="https://github.com/tarwn/Sample_ASPNetCore2AndCosmosDB/blob/d7c5907d45154685b62127c714394b29734f8e60/SampleCosmosCore2App/Membership/CosmosDBMembership.cs#L52">SampleCosmosCore2App/Membership/CosmosDBMembership.cs &#8211; LoginAsync</a></p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="csharp"><thead><tr><td colspan="2"  class="head">C#</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
</pre></td><td class="de1"><pre class="de1"><span class="kw1">public</span> async Task<span class="sy0">&lt;</span>LoginResult<span class="sy0">&gt;</span> LoginAsync<span class="br0">&#40;</span><span class="kw4">string</span> userName, <span class="kw4">string</span> password<span class="br0">&#41;</span>
<span class="br0">&#123;</span>
&nbsp; &nbsp; <span class="kw1">var</span> user <span class="sy0">=</span> await _persistence<span class="sy0">.</span><span class="me1">Users</span><span class="sy0">.</span><span class="me1">GetUserByUsernameAsync</span><span class="br0">&#40;</span>userName<span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; <span class="kw1">if</span> <span class="br0">&#40;</span>user <span class="sy0">==</span> <span class="kw1">null</span><span class="br0">&#41;</span>
&nbsp; &nbsp; <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">return</span> LoginResult<span class="sy0">.</span><span class="me1">GetFailed</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp;
&nbsp; &nbsp; <span class="kw1">if</span> <span class="br0">&#40;</span>user<span class="sy0">.</span><span class="me1">PasswordHash</span> <span class="sy0">!=</span> password<span class="br0">&#41;</span>
&nbsp; &nbsp; <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">return</span> LoginResult<span class="sy0">.</span><span class="me1">GetFailed</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp;
&nbsp; &nbsp; await SignInAsync<span class="br0">&#40;</span>user<span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; <span class="kw1">return</span> LoginResult<span class="sy0">.</span><span class="me1">GetSuccess</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
<span class="br0">&#125;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">public async Task&lt;LoginResult&gt; LoginAsync(string userName, string password)
{
	var user = await _persistence.Users.GetUserByUsernameAsync(userName);
	if (user == null)
	{
		return LoginResult.GetFailed();
	}

	if (user.PasswordHash != password)
	{
		return LoginResult.GetFailed();
	}

	await SignInAsync(user);

	return LoginResult.GetSuccess();
}</pre></div></div>

<p>We don&#8217;t have a password hash function yet, so for Login we take a username and password to load a <code>LoginUer</code> from the database, perform a direct comparison, and sign the user in if it is a match.</p>
<p>These both use the SignInAsync method, which creates a <code>LoginSession</code> for the user and uses the Authentication&#8217;s SignIn method for the <code>Options.AuthenticationType</code> we configured back in <code>Startup</code>:</p>
<p><a href="https://github.com/tarwn/Sample_ASPNetCore2AndCosmosDB/blob/d7c5907d45154685b62127c714394b29734f8e60/SampleCosmosCore2App/Membership/CosmosDBMembership.cs#L133">SampleCosmosCore2App/Membership/CosmosDBMembership.cs &#8211; SignInAsync</a></p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="csharp"><thead><tr><td colspan="2"  class="head">C#</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
</pre></td><td class="de1"><pre class="de1"><span class="kw1">private</span> async Task SignInAsync<span class="br0">&#40;</span>LoginUser user<span class="br0">&#41;</span>
<span class="br0">&#123;</span>
&nbsp; &nbsp; <span class="co1">// key the login to a server-side session id to make it easy to invalidate later</span>
&nbsp; &nbsp; <span class="kw1">var</span> session <span class="sy0">=</span> <span class="kw3">new</span> LoginSession<span class="br0">&#40;</span><span class="br0">&#41;</span>
&nbsp; &nbsp; <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; UserId <span class="sy0">=</span> user<span class="sy0">.</span><span class="me1">Id</span>,
&nbsp; &nbsp; &nbsp; &nbsp; CreationTime <span class="sy0">=</span> DateTime<span class="sy0">.</span><span class="me1">UtcNow</span>
&nbsp; &nbsp; <span class="br0">&#125;</span><span class="sy0">;</span>
&nbsp; &nbsp; session <span class="sy0">=</span> await _persistence<span class="sy0">.</span><span class="me1">Users</span><span class="sy0">.</span><span class="me1">CreateSessionAsync</span><span class="br0">&#40;</span>session<span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; <span class="kw1">var</span> identity <span class="sy0">=</span> <span class="kw3">new</span> ClaimsIdentity<span class="br0">&#40;</span>Options<span class="sy0">.</span><span class="me1">AuthenticationType</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; identity<span class="sy0">.</span><span class="me1">AddClaim</span><span class="br0">&#40;</span><span class="kw3">new</span> Claim<span class="br0">&#40;</span><span class="st0">&quot;sessionId&quot;</span>, session<span class="sy0">.</span><span class="me1">Id</span><span class="br0">&#41;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; await _context<span class="sy0">.</span><span class="me1">HttpContext</span><span class="sy0">.</span><span class="me1">SignInAsync</span><span class="br0">&#40;</span><span class="kw3">new</span> ClaimsPrincipal<span class="br0">&#40;</span>identity<span class="br0">&#41;</span><span class="br0">&#41;</span><span class="sy0">;</span>
<span class="br0">&#125;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">private async Task SignInAsync(LoginUser user)
{
	// key the login to a server-side session id to make it easy to invalidate later
	var session = new LoginSession()
	{
		UserId = user.Id,
		CreationTime = DateTime.UtcNow
	};
	session = await _persistence.Users.CreateSessionAsync(session);

	var identity = new ClaimsIdentity(Options.AuthenticationType);
	identity.AddClaim(new Claim("sessionId", session.Id));
	await _context.HttpContext.SignInAsync(new ClaimsPrincipal(identity));
}</pre></div></div>

<p>Behind the scenes, ASP.Net is calling the <code>SignIn</code> method on the &#8220;Cookies&#8221; authentication module. The Cookies module will take the ClaimsPrincipal we just passed it and write it as a cookie on the outgoing Response (and then read it back in on subsequent Requests). This is how we&#8217;ll know who the user is later. Which brings us to ValidateLoginAsync, which is called from our custom OnValidatePrincipal logic.</p>
<p><a href="https://github.com/tarwn/Sample_ASPNetCore2AndCosmosDB/blob/d7c5907d45154685b62127c714394b29734f8e60/SampleCosmosCore2App/Membership/CosmosDBMembership.cs#L113">SampleCosmosCore2App/Membership/CosmosDBMembership.cs &#8211; ValidateLoginAsync</a></p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="csharp"><thead><tr><td colspan="2"  class="head">C#</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
</pre></td><td class="de1"><pre class="de1"><span class="kw1">public</span> async Task<span class="sy0">&lt;</span><span class="kw4">bool</span><span class="sy0">&gt;</span> ValidateLoginAsync<span class="br0">&#40;</span>ClaimsPrincipal principal<span class="br0">&#41;</span>
<span class="br0">&#123;</span>
&nbsp; &nbsp; <span class="kw1">var</span> sessionId <span class="sy0">=</span> principal<span class="sy0">.</span><span class="me1">FindFirstValue</span><span class="br0">&#40;</span><span class="st0">&quot;sessionId&quot;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; <span class="kw1">if</span> <span class="br0">&#40;</span>sessionId <span class="sy0">==</span> <span class="kw1">null</span><span class="br0">&#41;</span>
&nbsp; &nbsp; <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">return</span> <span class="kw1">false</span><span class="sy0">;</span>
&nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp;
&nbsp; &nbsp; <span class="kw1">var</span> session <span class="sy0">=</span> await _persistence<span class="sy0">.</span><span class="me1">Users</span><span class="sy0">.</span><span class="me1">GetSessionAsync</span><span class="br0">&#40;</span>sessionId<span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; <span class="kw1">if</span> <span class="br0">&#40;</span>session<span class="sy0">.</span><span class="me1">LogoutTime</span><span class="sy0">.</span><span class="me1">HasValue</span><span class="br0">&#41;</span>
&nbsp; &nbsp; <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">return</span> <span class="kw1">false</span><span class="sy0">;</span>
&nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp;
&nbsp; &nbsp; <span class="kw1">return</span> <span class="kw1">true</span><span class="sy0">;</span>
<span class="br0">&#125;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">public async Task&lt;bool&gt; ValidateLoginAsync(ClaimsPrincipal principal)
{
	var sessionId = principal.FindFirstValue("sessionId");
	if (sessionId == null)
	{
		return false;
	}

	var session = await _persistence.Users.GetSessionAsync(sessionId);
	if (session.LogoutTime.HasValue)
	{
		return false;
	}

	return true;
}</pre></div></div>

<p>We attempt to read the &#8220;sessionId&#8221; claim from the passed Principal and associate it with a saved <code>LoginSession</code> in the database, with a basic verification check to make sure the user has not logged out. In the event that we call false, our OnValidatePrincipal call will reject this principal (ensure it&#8217;s not flagged as &#8220;Authenticated&#8221;).</p>
<p>Finally, we have the last step for a user: Logging out.</p>
<p><a href="https://github.com/tarwn/Sample_ASPNetCore2AndCosmosDB/blob/d7c5907d45154685b62127c714394b29734f8e60/SampleCosmosCore2App/Membership/CosmosDBMembership.cs#L73">SampleCosmosCore2App/Membership/CosmosDBMembership.cs &#8211; LogoutAsync</a></p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="csharp"><thead><tr><td colspan="2"  class="head">C#</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
</pre></td><td class="de1"><pre class="de1"><span class="kw1">public</span> async Task LogoutAsync<span class="br0">&#40;</span><span class="br0">&#41;</span>
<span class="br0">&#123;</span>
&nbsp; &nbsp; await _context<span class="sy0">.</span><span class="me1">HttpContext</span><span class="sy0">.</span><span class="me1">SignOutAsync</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; <span class="kw1">var</span> sessionId <span class="sy0">=</span> _context<span class="sy0">.</span><span class="me1">HttpContext</span><span class="sy0">.</span><span class="me1">User</span><span class="sy0">.</span><span class="me1">FindFirstValue</span><span class="br0">&#40;</span><span class="st0">&quot;sessionId&quot;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; <span class="kw1">if</span> <span class="br0">&#40;</span>sessionId <span class="sy0">!=</span> <span class="kw1">null</span><span class="br0">&#41;</span>
&nbsp; &nbsp; <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">var</span> session <span class="sy0">=</span> await _persistence<span class="sy0">.</span><span class="me1">Users</span><span class="sy0">.</span><span class="me1">GetSessionAsync</span><span class="br0">&#40;</span>sessionId<span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; session<span class="sy0">.</span><span class="me1">LogoutTime</span> <span class="sy0">=</span> DateTime<span class="sy0">.</span><span class="me1">UtcNow</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; await _persistence<span class="sy0">.</span><span class="me1">Users</span><span class="sy0">.</span><span class="me1">UpdateSessionAsync</span><span class="br0">&#40;</span>session<span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; <span class="br0">&#125;</span>
<span class="br0">&#125;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">public async Task LogoutAsync()
{
	await _context.HttpContext.SignOutAsync();

	var sessionId = _context.HttpContext.User.FindFirstValue("sessionId");
	if (sessionId != null)
	{
		var session = await _persistence.Users.GetSessionAsync(sessionId);
		session.LogoutTime = DateTime.UtcNow;
		await _persistence.Users.UpdateSessionAsync(session);
	}
}</pre></div></div>

<p>Like the <code>LoginAsync&lt;code&gt; call, we use &lt;code&gt;SignOut</code> to sign out of the configured authentication module. I have not specific the <code>Scheme</code> here, so this may be signing us out of all the things.</p>
<p>Once we've signed out, we can mark the session as logged out too. This is more for informational purposes than anything else, as we've already revoke the cookie above and wouldn't be able to connect the user back to this session on their next page load.</p>
<h3>Cosmos DB - Persistence</h3>
<p>With the business logic defined, now we can create the 6 Persistence calls to Cosmos DB: <code>CreateUserAsync</code>, <code>GetUserAsync</code>, <code>GetUserByUsernameAsync</code>, <code>CreateSessionAsync</code>, <code>GetSessionAsync</code>, <code>UpdateSessionAsync</code></p>
<p>The setup logic has two points of interest. The first is that we make sure we store and re-use the <code>DocumentClient</code> object that is managed from <code>Persistence</code> rather than creating one locally for this class. Secondly, the <code>EnsureSetupAsync</code> method ensures we have a <code>DocumentCollection</code> set up for both Users and Sessions. </p>
<p><a href="https://github.com/tarwn/Sample_ASPNetCore2AndCosmosDB/blob/d7c5907d45154685b62127c714394b29734f8e60/SampleCosmosCore2App.Core/Users/UserPersistence.cs">SampleCosmosCore2App.Core/Users/UserPersistence.cs</a></p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="csharp"><thead><tr><td colspan="2"  class="head">C#</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
</pre></td><td class="de1"><pre class="de1"><span class="kw1">public</span> <span class="kw4">class</span> UserPersistence
<span class="br0">&#123;</span>
&nbsp; &nbsp; <span class="co1">// ...</span>
&nbsp;
&nbsp; &nbsp; <span class="kw1">public</span> UserPersistence<span class="br0">&#40;</span>DocumentClient client, <span class="kw4">string</span> databaseId<span class="br0">&#41;</span>
&nbsp; &nbsp; <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; _client <span class="sy0">=</span> client<span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; _databaseId <span class="sy0">=</span> databaseId<span class="sy0">;</span>
&nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp;
&nbsp; &nbsp; <span class="kw1">public</span> async Task EnsureSetupAsync<span class="br0">&#40;</span><span class="br0">&#41;</span>
&nbsp; &nbsp; <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">var</span> databaseUri <span class="sy0">=</span> UriFactory<span class="sy0">.</span><span class="me1">CreateDatabaseUri</span><span class="br0">&#40;</span>_databaseId<span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; <span class="co1">// Collections</span>
&nbsp; &nbsp; &nbsp; &nbsp; await _client<span class="sy0">.</span><span class="me1">CreateDocumentCollectionIfNotExistsAsync</span><span class="br0">&#40;</span>databaseUri, <span class="kw3">new</span> DocumentCollection<span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span> Id <span class="sy0">=</span> SESSIONS_DOCUMENT_COLLECTION_ID <span class="br0">&#125;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">var</span> users <span class="sy0">=</span> <span class="kw3">new</span> DocumentCollection<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; users<span class="sy0">.</span><span class="me1">Id</span> <span class="sy0">=</span> USERS_DOCUMENT_COLLECTION_ID<span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; users<span class="sy0">.</span><span class="me1">UniqueKeyPolicy</span> <span class="sy0">=</span> <span class="kw3">new</span> UniqueKeyPolicy<span class="br0">&#40;</span><span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; UniqueKeys <span class="sy0">=</span> <span class="kw3">new</span> Collection<span class="sy0">&lt;</span>UniqueKey<span class="sy0">&gt;</span><span class="br0">&#40;</span><span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw3">new</span> UniqueKey<span class="br0">&#123;</span> Paths <span class="sy0">=</span> <span class="kw3">new</span> Collection<span class="sy0">&lt;</span><span class="kw4">string</span><span class="sy0">&gt;</span><span class="br0">&#123;</span> <span class="st0">&quot;/Username&quot;</span> <span class="br0">&#125;</span> <span class="br0">&#125;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; await _client<span class="sy0">.</span><span class="me1">CreateDocumentCollectionIfNotExistsAsync</span><span class="br0">&#40;</span>databaseUri, users<span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp; &nbsp; 
&nbsp; &nbsp; <span class="co1">// ... CRUD methods</span>
<span class="br0">&#125;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">public class UserPersistence
{
	// ...

	public UserPersistence(DocumentClient client, string databaseId)
	{
		_client = client;
		_databaseId = databaseId;
	}

	public async Task EnsureSetupAsync()
	{
		var databaseUri = UriFactory.CreateDatabaseUri(_databaseId);

		// Collections
		await _client.CreateDocumentCollectionIfNotExistsAsync(databaseUri, new DocumentCollection() { Id = SESSIONS_DOCUMENT_COLLECTION_ID });
		var users = new DocumentCollection();
		users.Id = USERS_DOCUMENT_COLLECTION_ID;
		users.UniqueKeyPolicy = new UniqueKeyPolicy()
		{
			UniqueKeys = new Collection&lt;UniqueKey&gt;()
			{
				new UniqueKey{ Paths = new Collection&lt;string&gt;{ "/Username" } }
			}
		};
		await _client.CreateDocumentCollectionIfNotExistsAsync(databaseUri, users);
	}
	
	// ... CRUD methods
}</pre></div></div>

<p>The Sessions collection is a straightforward, 1-line <code>CreateDocumentCollectionIfNotExistsAsync</code>, but for the Users we've used a longer form to create the collection so we can define <code>Username</code> as a unique key. This is the second half of the logic in the Membership object that prevents users from registering with a duplicate <code>Username</code>.</p>
<p>With the setup out of the way, now we can concentrate on supplying the necessary CRUD methods that <code>CosmosDBMembership</code> relies on.</p>
<p><a href="https://github.com/tarwn/Sample_ASPNetCore2AndCosmosDB/blob/d7c5907d45154685b62127c714394b29734f8e60/SampleCosmosCore2App.Core/Users/UserPersistence.cs">SampleCosmosCore2App.Core/Users/UserPersistence.cs</a></p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="csharp"><thead><tr><td colspan="2"  class="head">C#</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
</pre></td><td class="de1"><pre class="de1"><span class="kw1">public</span> <span class="kw4">class</span> UserPersistence
<span class="br0">&#123;</span>
&nbsp; &nbsp; <span class="co1">// ... ctor, EnsureSetupAsync ...</span>
&nbsp;
&nbsp; &nbsp; <span class="kw1">public</span> async Task<span class="sy0">&lt;</span>LoginUser<span class="sy0">&gt;</span> CreateUserAsync<span class="br0">&#40;</span>LoginUser user<span class="br0">&#41;</span>
&nbsp; &nbsp; <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">var</span> result <span class="sy0">=</span> await _client<span class="sy0">.</span><span class="me1">CreateDocumentAsync</span><span class="br0">&#40;</span>GetUsersCollectionUri<span class="br0">&#40;</span><span class="br0">&#41;</span>, user, <span class="kw3">new</span> RequestOptions<span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span> <span class="br0">&#125;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">return</span> JsonConvert<span class="sy0">.</span><span class="me1">DeserializeObject</span><span class="sy0">&lt;</span>LoginUser<span class="sy0">&gt;</span><span class="br0">&#40;</span>result<span class="sy0">.</span><span class="me1">Resource</span><span class="sy0">.</span><span class="me1">ToString</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp;
&nbsp; &nbsp; <span class="kw1">public</span> async Task<span class="sy0">&lt;</span>LoginUser<span class="sy0">&gt;</span> GetUserAsync<span class="br0">&#40;</span><span class="kw4">string</span> userId<span class="br0">&#41;</span>
&nbsp; &nbsp; <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">var</span> result <span class="sy0">=</span> await _client<span class="sy0">.</span><span class="me1">ReadDocumentAsync</span><span class="sy0">&lt;</span>LoginUser<span class="sy0">&gt;</span><span class="br0">&#40;</span>UriFactory<span class="sy0">.</span><span class="me1">CreateDocumentUri</span><span class="br0">&#40;</span>_databaseId, USERS_DOCUMENT_COLLECTION_ID, userId<span class="br0">&#41;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">return</span> result<span class="sy0">.</span><span class="me1">Document</span><span class="sy0">;</span>
&nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp;
&nbsp; &nbsp; <span class="kw1">public</span> async Task<span class="sy0">&lt;</span>LoginUser<span class="sy0">&gt;</span> GetUserByUsernameAsync<span class="br0">&#40;</span><span class="kw4">string</span> userName<span class="br0">&#41;</span>
&nbsp; &nbsp; <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">var</span> query <span class="sy0">=</span> _client<span class="sy0">.</span><span class="me1">CreateDocumentQuery</span><span class="sy0">&lt;</span>LoginUser<span class="sy0">&gt;</span><span class="br0">&#40;</span>GetUsersCollectionUri<span class="br0">&#40;</span><span class="br0">&#41;</span>, <span class="kw3">new</span> SqlQuerySpec<span class="br0">&#40;</span><span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; QueryText <span class="sy0">=</span> <span class="st0">&quot;SELECT * FROM Users U WHERE U.Username = @username&quot;</span>,
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Parameters <span class="sy0">=</span> <span class="kw3">new</span> SqlParameterCollection<span class="br0">&#40;</span><span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span class="kw3">new</span> SqlParameter<span class="br0">&#40;</span><span class="st0">&quot;@username&quot;</span>, userName<span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span class="br0">&#125;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">var</span> results <span class="sy0">=</span> await query<span class="sy0">.</span><span class="me1">AsDocumentQuery</span><span class="br0">&#40;</span><span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span class="sy0">.</span><span class="me1">ExecuteNextAsync</span><span class="sy0">&lt;</span>LoginUser<span class="sy0">&gt;</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">return</span> results<span class="sy0">.</span><span class="me1">FirstOrDefault</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp;
&nbsp; &nbsp; <span class="kw1">public</span> async Task<span class="sy0">&lt;</span>LoginSession<span class="sy0">&gt;</span> CreateSessionAsync<span class="br0">&#40;</span>LoginSession session<span class="br0">&#41;</span>
&nbsp; &nbsp; <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">var</span> result <span class="sy0">=</span> await _client<span class="sy0">.</span><span class="me1">CreateDocumentAsync</span><span class="br0">&#40;</span>GetSessionsCollectionUri<span class="br0">&#40;</span><span class="br0">&#41;</span>, session<span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">return</span> JsonConvert<span class="sy0">.</span><span class="me1">DeserializeObject</span><span class="sy0">&lt;</span>LoginSession<span class="sy0">&gt;</span><span class="br0">&#40;</span>result<span class="sy0">.</span><span class="me1">Resource</span><span class="sy0">.</span><span class="me1">ToString</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp;
&nbsp; &nbsp; <span class="kw1">public</span> async Task<span class="sy0">&lt;</span>LoginSession<span class="sy0">&gt;</span> GetSessionAsync<span class="br0">&#40;</span><span class="kw4">string</span> sessionId<span class="br0">&#41;</span>
&nbsp; &nbsp; <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">var</span> result <span class="sy0">=</span> await _client<span class="sy0">.</span><span class="me1">ReadDocumentAsync</span><span class="sy0">&lt;</span>LoginSession<span class="sy0">&gt;</span><span class="br0">&#40;</span>UriFactory<span class="sy0">.</span><span class="me1">CreateDocumentUri</span><span class="br0">&#40;</span>_databaseId, SESSIONS_DOCUMENT_COLLECTION_ID, sessionId<span class="br0">&#41;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">return</span> result<span class="sy0">.</span><span class="me1">Document</span><span class="sy0">;</span>
&nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp;
&nbsp; &nbsp; <span class="kw1">public</span> async Task UpdateSessionAsync<span class="br0">&#40;</span>LoginSession session<span class="br0">&#41;</span>
&nbsp; &nbsp; <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; await _client<span class="sy0">.</span><span class="me1">ReplaceDocumentAsync</span><span class="br0">&#40;</span>UriFactory<span class="sy0">.</span><span class="me1">CreateDocumentUri</span><span class="br0">&#40;</span>_databaseId, SESSIONS_DOCUMENT_COLLECTION_ID, session<span class="sy0">.</span><span class="me1">Id</span><span class="br0">&#41;</span>, session<span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp;
&nbsp; &nbsp; <span class="co1">// ...</span>
<span class="br0">&#125;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">public class UserPersistence
{
	// ... ctor, EnsureSetupAsync ...

	public async Task&lt;LoginUser&gt; CreateUserAsync(LoginUser user)
	{
		var result = await _client.CreateDocumentAsync(GetUsersCollectionUri(), user, new RequestOptions() { });
		return JsonConvert.DeserializeObject&lt;LoginUser&gt;(result.Resource.ToString());
	}

	public async Task&lt;LoginUser&gt; GetUserAsync(string userId)
	{
		var result = await _client.ReadDocumentAsync&lt;LoginUser&gt;(UriFactory.CreateDocumentUri(_databaseId, USERS_DOCUMENT_COLLECTION_ID, userId));
		return result.Document;
	}

	public async Task&lt;LoginUser&gt; GetUserByUsernameAsync(string userName)
	{
		var query = _client.CreateDocumentQuery&lt;LoginUser&gt;(GetUsersCollectionUri(), new SqlQuerySpec()
		{
			QueryText = "SELECT * FROM Users U WHERE U.Username = @username",
			Parameters = new SqlParameterCollection()
		   {
			   new SqlParameter("@username", userName)
		   }
		});
		var results = await query.AsDocumentQuery()
								 .ExecuteNextAsync&lt;LoginUser&gt;();
		return results.FirstOrDefault();
	}

	public async Task&lt;LoginSession&gt; CreateSessionAsync(LoginSession session)
	{
		var result = await _client.CreateDocumentAsync(GetSessionsCollectionUri(), session);
		return JsonConvert.DeserializeObject&lt;LoginSession&gt;(result.Resource.ToString());
	}

	public async Task&lt;LoginSession&gt; GetSessionAsync(string sessionId)
	{
		var result = await _client.ReadDocumentAsync&lt;LoginSession&gt;(UriFactory.CreateDocumentUri(_databaseId, SESSIONS_DOCUMENT_COLLECTION_ID, sessionId));
		return result.Document;
	}

	public async Task UpdateSessionAsync(LoginSession session)
	{
		await _client.ReplaceDocumentAsync(UriFactory.CreateDocumentUri(_databaseId, SESSIONS_DOCUMENT_COLLECTION_ID, session.Id), session);
	}

	// ...
}</pre></div></div>

<p>With two exceptions, these calls are 1-2 line methods to write a document to Cosmos DB or read it. Here are the exceptions:</p>
<p><b>CreateUserAsync uses JsonConvert</b> to deserialize the result after inserting it into Cosmos DB. This is not automatic, but since we are relying on the generated <code>id</code> that Cosmos DB assigns our document then we want an object back. The one danger to wtach out for is if we had set some JSON.Net configurations with the <code>DocumentClient</code> we would want to use those here too.</p>
<p><b>GetUserByUsernameAsync uses SQL</b> to query the <code>DocumentCollection</code>. Be very careful about getting your casing correct, this bit me several times. Cosmos DB supports <a href="https://docs.microsoft.com/en-us/azure/cosmos-db/sql-api-sql-query" title="MSDN: Cosmos DB SQL Queries">a limited SQL syntax</a> with support for parameterization.</p>
<p>Now that we have our business and persistence logic, we just need to add some UI on top!</p>
<h3>Adding Registration and Login pages</h3>
<p>The final piece is the Registration and Login pages the user will interact with. Here are the endpoints we need:</p>
<ul>
<li>GET /account/login: display a login page</li>
<li>POST /account/login: perform login + redirect</li>
<li>GET /account/register: display a registration form</li>
<li>POST /account/register: perform registration, login, redirect</li>
<li>GET /account/logout: perform logout + redirect somewhere</li>
<li>GET /account/protected: a page that requires authorization for testing</li>
</ul>
<p>Add a new <code>AccountController</code> to the Controllers folder (Right click, Add, Controller). We'll start out with the registration logic:</p>
<p><a href="https://github.com/tarwn/Sample_ASPNetCore2AndCosmosDB/blob/d7c5907d45154685b62127c714394b29734f8e60/SampleCosmosCore2App/Controllers/AccountController.cs#L13">SampleCosmosCore2App/Controllers/AccountController.cs</a></p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="csharp"><thead><tr><td colspan="2"  class="head">C#</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
</pre></td><td class="de1"><pre class="de1"><span class="br0">&#91;</span>Route<span class="br0">&#40;</span><span class="st0">&quot;account&quot;</span><span class="br0">&#41;</span><span class="br0">&#93;</span>
<span class="kw1">public</span> <span class="kw4">class</span> AccountController <span class="sy0">:</span> Controller
<span class="br0">&#123;</span>
&nbsp; &nbsp; <span class="kw1">private</span> ICustomMembership _membership<span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; <span class="kw1">public</span> AccountController<span class="br0">&#40;</span>ICustomMembership membership<span class="br0">&#41;</span>
&nbsp; &nbsp; <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; _membership <span class="sy0">=</span> membership<span class="sy0">;</span>
&nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp;
&nbsp; &nbsp; <span class="br0">&#91;</span>HttpGet<span class="br0">&#40;</span><span class="st0">&quot;register&quot;</span><span class="br0">&#41;</span><span class="br0">&#93;</span>
&nbsp; &nbsp; <span class="br0">&#91;</span>AllowAnonymous<span class="br0">&#93;</span>
&nbsp; &nbsp; <span class="kw1">public</span> IActionResult Register<span class="br0">&#40;</span><span class="br0">&#41;</span>
&nbsp; &nbsp; <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">return</span> View<span class="br0">&#40;</span><span class="st0">&quot;Register&quot;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp;
&nbsp; &nbsp; <span class="br0">&#91;</span>HttpPost<span class="br0">&#40;</span><span class="st0">&quot;register&quot;</span><span class="br0">&#41;</span><span class="br0">&#93;</span>
&nbsp; &nbsp; <span class="br0">&#91;</span>AllowAnonymous<span class="br0">&#93;</span>
&nbsp; &nbsp; <span class="br0">&#91;</span>ValidateAntiForgeryToken<span class="br0">&#93;</span>
&nbsp; &nbsp; <span class="kw1">public</span> async Task<span class="sy0">&lt;</span>IActionResult<span class="sy0">&gt;</span> RegisterPostAsync<span class="br0">&#40;</span>RegisterModel model<span class="br0">&#41;</span>
&nbsp; &nbsp; <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">if</span> <span class="br0">&#40;</span><span class="sy0">!</span>ModelState<span class="sy0">.</span><span class="me1">IsValid</span><span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">return</span> View<span class="br0">&#40;</span><span class="st0">&quot;Register&quot;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">var</span> result <span class="sy0">=</span> await _membership<span class="sy0">.</span><span class="me1">RegisterAsync</span><span class="br0">&#40;</span>model<span class="sy0">.</span><span class="me1">UserName</span>, model<span class="sy0">.</span><span class="me1">Email</span>, model<span class="sy0">.</span><span class="me1">Password</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">if</span> <span class="br0">&#40;</span>result<span class="sy0">.</span><span class="me1">Failed</span><span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ModelState<span class="sy0">.</span><span class="me1">AddModelError</span><span class="br0">&#40;</span><span class="st0">&quot;&quot;</span>, result<span class="sy0">.</span><span class="me1">ErrorMessage</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">return</span> View<span class="br0">&#40;</span><span class="st0">&quot;Register&quot;</span>, model<span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">return</span> LocalRedirect<span class="br0">&#40;</span>_membership<span class="sy0">.</span><span class="me1">Options</span><span class="sy0">.</span><span class="me1">DefaultPathAfterLogin</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp;
&nbsp; &nbsp; <span class="co1">// ...</span>
<span class="br0">&#125;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">[Route("account")]
public class AccountController : Controller
{
	private ICustomMembership _membership;

	public AccountController(ICustomMembership membership)
	{
		_membership = membership;
	}

	[HttpGet("register")]
	[AllowAnonymous]
	public IActionResult Register()
	{
		return View("Register");
	}

	[HttpPost("register")]
	[AllowAnonymous]
	[ValidateAntiForgeryToken]
	public async Task&lt;IActionResult&gt; RegisterPostAsync(RegisterModel model)
	{
		if (!ModelState.IsValid)
		{
			return View("Register");
		}

		var result = await _membership.RegisterAsync(model.UserName, model.Email, model.Password);
		if (result.Failed)
		{
			ModelState.AddModelError("", result.ErrorMessage);
			return View("Register", model);
		}

		return LocalRedirect(_membership.Options.DefaultPathAfterLogin);
	}

	// ...
}</pre></div></div>

<p>The <code>GET</code> call simply returns a View named "Register". Once they fill in this form, it is <code>POSTed</code> to <code>RegisterPostAsync</code> which verifies the Model is valid, attempts to use our new <code>RegisterAsync</code> method, and then directs to configured default path for newly registered and sign-ed in users. If it fails at any point, it directs the user back to the "Register" view with an error in the <code>ModelState</code>.</p>
<p>Add a new "Account" folder to "Views", then add a new "Register.cshtml" view to this folder.</p>
<p><a href="https://github.com/tarwn/Sample_ASPNetCore2AndCosmosDB/blob/d7c5907d45154685b62127c714394b29734f8e60/SampleCosmosCore2App/Views/Account/Register.cshtml">SampleCosmosCore2App/Views/Account/Register.cshtml</a></p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="html4strict"><thead><tr><td colspan="2"  class="head">HTML</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
</pre></td><td class="de1"><pre class="de1">@model SampleCosmosCore2App.Models.Account.RegisterModel
@{
&nbsp; &nbsp; ViewData[&quot;Title&quot;] = &quot;Register&quot;;
&nbsp; &nbsp; Layout = &quot;~/Views/Shared/Layout.cshtml&quot;;
}
&nbsp;
<span class="sc2">&lt;<span class="kw2">h2</span>&gt;</span>Register<span class="sc2">&lt;<span class="sy0">/</span><span class="kw2">h2</span>&gt;</span>
&nbsp;
<span class="sc2">&lt;<span class="kw2">form</span> asp-<span class="kw3">action</span><span class="sy0">=</span><span class="st0">&quot;Register&quot;</span> <span class="kw3">method</span><span class="sy0">=</span><span class="st0">&quot;post&quot;</span>&gt;</span>
&nbsp; &nbsp; <span class="sc2">&lt;<span class="kw2">div</span> asp-validation-<span class="kw3">summary</span><span class="sy0">=</span><span class="st0">&quot;ModelOnly&quot;</span> <span class="kw3">class</span><span class="sy0">=</span><span class="st0">&quot;text-danger&quot;</span>&gt;&lt;<span class="sy0">/</span><span class="kw2">div</span>&gt;</span>
&nbsp; &nbsp; <span class="sc2">&lt;<span class="kw2">div</span> <span class="kw3">class</span><span class="sy0">=</span><span class="st0">&quot;form-group&quot;</span>&gt;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="sc2">&lt;<span class="kw2">label</span> asp-<span class="kw3">for</span><span class="sy0">=</span><span class="st0">&quot;UserName&quot;</span> <span class="kw3">class</span><span class="sy0">=</span><span class="st0">&quot;control-label&quot;</span>&gt;&lt;<span class="sy0">/</span><span class="kw2">label</span>&gt;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="sc2">&lt;<span class="kw2">input</span> asp-<span class="kw3">for</span><span class="sy0">=</span><span class="st0">&quot;UserName&quot;</span> <span class="kw3">class</span><span class="sy0">=</span><span class="st0">&quot;form-control&quot;</span> <span class="sy0">/</span>&gt;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="sc2">&lt;<span class="kw2">span</span> asp-validation-<span class="kw3">for</span><span class="sy0">=</span><span class="st0">&quot;UserName&quot;</span> <span class="kw3">class</span><span class="sy0">=</span><span class="st0">&quot;text-danger&quot;</span>&gt;&lt;<span class="sy0">/</span><span class="kw2">span</span>&gt;</span>
&nbsp; &nbsp; <span class="sc2">&lt;<span class="sy0">/</span><span class="kw2">div</span>&gt;</span>
&nbsp; &nbsp; <span class="sc2">&lt;<span class="kw2">div</span> <span class="kw3">class</span><span class="sy0">=</span><span class="st0">&quot;form-group&quot;</span>&gt;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="sc2">&lt;<span class="kw2">label</span> asp-<span class="kw3">for</span><span class="sy0">=</span><span class="st0">&quot;Password&quot;</span> <span class="kw3">class</span><span class="sy0">=</span><span class="st0">&quot;control-label&quot;</span>&gt;&lt;<span class="sy0">/</span><span class="kw2">label</span>&gt;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="sc2">&lt;<span class="kw2">input</span> asp-<span class="kw3">for</span><span class="sy0">=</span><span class="st0">&quot;Password&quot;</span> <span class="kw3">class</span><span class="sy0">=</span><span class="st0">&quot;form-control&quot;</span> <span class="sy0">/</span>&gt;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="sc2">&lt;<span class="kw2">span</span> asp-validation-<span class="kw3">for</span><span class="sy0">=</span><span class="st0">&quot;Password&quot;</span> <span class="kw3">class</span><span class="sy0">=</span><span class="st0">&quot;text-danger&quot;</span>&gt;&lt;<span class="sy0">/</span><span class="kw2">span</span>&gt;</span>
&nbsp; &nbsp; <span class="sc2">&lt;<span class="sy0">/</span><span class="kw2">div</span>&gt;</span>
&nbsp; &nbsp; <span class="sc2">&lt;<span class="kw2">div</span> <span class="kw3">class</span><span class="sy0">=</span><span class="st0">&quot;form-group&quot;</span>&gt;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="sc2">&lt;<span class="kw2">label</span> asp-<span class="kw3">for</span><span class="sy0">=</span><span class="st0">&quot;Email&quot;</span> <span class="kw3">class</span><span class="sy0">=</span><span class="st0">&quot;control-label&quot;</span>&gt;&lt;<span class="sy0">/</span><span class="kw2">label</span>&gt;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="sc2">&lt;<span class="kw2">input</span> asp-<span class="kw3">for</span><span class="sy0">=</span><span class="st0">&quot;Email&quot;</span> <span class="kw3">class</span><span class="sy0">=</span><span class="st0">&quot;form-control&quot;</span> <span class="sy0">/</span>&gt;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="sc2">&lt;<span class="kw2">span</span> asp-validation-<span class="kw3">for</span><span class="sy0">=</span><span class="st0">&quot;Email&quot;</span> <span class="kw3">class</span><span class="sy0">=</span><span class="st0">&quot;text-danger&quot;</span>&gt;&lt;<span class="sy0">/</span><span class="kw2">span</span>&gt;</span>
&nbsp; &nbsp; <span class="sc2">&lt;<span class="sy0">/</span><span class="kw2">div</span>&gt;</span>
&nbsp; &nbsp; <span class="sc2">&lt;<span class="kw2">div</span> <span class="kw3">class</span><span class="sy0">=</span><span class="st0">&quot;form-group&quot;</span>&gt;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="sc2">&lt;<span class="kw2">input</span> <span class="kw3">type</span><span class="sy0">=</span><span class="st0">&quot;submit&quot;</span> <span class="kw3">value</span><span class="sy0">=</span><span class="st0">&quot;Register&quot;</span> <span class="kw3">class</span><span class="sy0">=</span><span class="st0">&quot;btn btn-default&quot;</span> <span class="sy0">/</span>&gt;</span>
&nbsp; &nbsp; <span class="sc2">&lt;<span class="sy0">/</span><span class="kw2">div</span>&gt;</span>
<span class="sc2">&lt;<span class="sy0">/</span><span class="kw2">form</span>&gt;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">@model SampleCosmosCore2App.Models.Account.RegisterModel
@{
    ViewData["Title"] = "Register";
    Layout = "~/Views/Shared/Layout.cshtml";
}

&lt;h2&gt;Register&lt;/h2&gt;

&lt;form asp-action="Register" method="post"&gt;
    &lt;div asp-validation-summary="ModelOnly" class="text-danger"&gt;&lt;/div&gt;
    &lt;div class="form-group"&gt;
        &lt;label asp-for="UserName" class="control-label"&gt;&lt;/label&gt;
        &lt;input asp-for="UserName" class="form-control" /&gt;
        &lt;span asp-validation-for="UserName" class="text-danger"&gt;&lt;/span&gt;
    &lt;/div&gt;
    &lt;div class="form-group"&gt;
        &lt;label asp-for="Password" class="control-label"&gt;&lt;/label&gt;
        &lt;input asp-for="Password" class="form-control" /&gt;
        &lt;span asp-validation-for="Password" class="text-danger"&gt;&lt;/span&gt;
    &lt;/div&gt;
    &lt;div class="form-group"&gt;
        &lt;label asp-for="Email" class="control-label"&gt;&lt;/label&gt;
        &lt;input asp-for="Email" class="form-control" /&gt;
        &lt;span asp-validation-for="Email" class="text-danger"&gt;&lt;/span&gt;
    &lt;/div&gt;
    &lt;div class="form-group"&gt;
        &lt;input type="submit" value="Register" class="btn btn-default" /&gt;
    &lt;/div&gt;
&lt;/form&gt;</pre></div></div>

<p>And there we go!</p>
<div id="attachment_9137" style="width: 359px" class="wp-caption aligncenter"><img src="/wp-content/uploads/2018/04/aspnetcore2cosmos_101.png" alt="Working Registration Form" width="349" height="300" class="size-full wp-image-9137" srcset="/wp-content/uploads/2018/04/aspnetcore2cosmos_101.png 349w, /wp-content/uploads/2018/04/aspnetcore2cosmos_101-300x258.png 300w" sizes="(max-width: 349px) 100vw, 349px" /><p class="wp-caption-text">Working Registration Form</p></div>
<p>Next up we can follow the same process for wiring in actions for Login GET/POST:</p>
<p><a href="https://github.com/tarwn/Sample_ASPNetCore2AndCosmosDB/blob/d7c5907d45154685b62127c714394b29734f8e60/SampleCosmosCore2App/Controllers/AccountController.cs#L50">SampleCosmosCore2App/Controllers/AccountController.cs</a></p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="csharp"><thead><tr><td colspan="2"  class="head">C#</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
</pre></td><td class="de1"><pre class="de1"><span class="br0">&#91;</span>Route<span class="br0">&#40;</span><span class="st0">&quot;account&quot;</span><span class="br0">&#41;</span><span class="br0">&#93;</span>
<span class="kw1">public</span> <span class="kw4">class</span> AccountController <span class="sy0">:</span> Controller
<span class="br0">&#123;</span>
&nbsp; &nbsp; <span class="co1">// ...</span>
&nbsp;
&nbsp; &nbsp; <span class="br0">&#91;</span>HttpGet<span class="br0">&#40;</span><span class="st0">&quot;login&quot;</span><span class="br0">&#41;</span><span class="br0">&#93;</span>
&nbsp; &nbsp; <span class="br0">&#91;</span>AllowAnonymous<span class="br0">&#93;</span>
&nbsp; &nbsp; <span class="kw1">public</span> IActionResult Login<span class="br0">&#40;</span><span class="kw4">string</span> returnUrl <span class="sy0">=</span> <span class="kw1">null</span><span class="br0">&#41;</span>
&nbsp; &nbsp; <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; TempData<span class="br0">&#91;</span><span class="st0">&quot;returnUrl&quot;</span><span class="br0">&#93;</span> <span class="sy0">=</span> returnUrl<span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">return</span> View<span class="br0">&#40;</span><span class="st0">&quot;Login&quot;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp;
&nbsp; &nbsp; <span class="br0">&#91;</span>HttpPost<span class="br0">&#40;</span><span class="st0">&quot;login&quot;</span><span class="br0">&#41;</span><span class="br0">&#93;</span>
&nbsp; &nbsp; <span class="br0">&#91;</span>AllowAnonymous<span class="br0">&#93;</span>
&nbsp; &nbsp; <span class="br0">&#91;</span>ValidateAntiForgeryToken<span class="br0">&#93;</span>
&nbsp; &nbsp; <span class="kw1">public</span> async Task<span class="sy0">&lt;</span>IActionResult<span class="sy0">&gt;</span> LoginPostAsync<span class="br0">&#40;</span>LoginModel user, &nbsp;<span class="kw4">string</span> returnUrl <span class="sy0">=</span> <span class="kw1">null</span><span class="br0">&#41;</span>
&nbsp; &nbsp; <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">if</span> <span class="br0">&#40;</span><span class="sy0">!</span>ModelState<span class="sy0">.</span><span class="me1">IsValid</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ModelState<span class="sy0">.</span><span class="me1">AddModelError</span><span class="br0">&#40;</span><span class="st0">&quot;&quot;</span>, <span class="st0">&quot;Username or password is incorrect&quot;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">return</span> View<span class="br0">&#40;</span><span class="st0">&quot;Login&quot;</span>, user<span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">var</span> result <span class="sy0">=</span> await _membership<span class="sy0">.</span><span class="me1">LoginAsync</span><span class="br0">&#40;</span>user<span class="sy0">.</span><span class="me1">UserName</span>, user<span class="sy0">.</span><span class="me1">Password</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">if</span> <span class="br0">&#40;</span>result<span class="sy0">.</span><span class="me1">Failed</span><span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ModelState<span class="sy0">.</span><span class="me1">AddModelError</span><span class="br0">&#40;</span><span class="st0">&quot;&quot;</span>, <span class="st0">&quot;Username or password is incorrect&quot;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">return</span> View<span class="br0">&#40;</span><span class="st0">&quot;Login&quot;</span>, user<span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">return</span> LocalRedirect<span class="br0">&#40;</span>returnUrl <span class="sy0">??</span> _membership<span class="sy0">.</span><span class="me1">Options</span><span class="sy0">.</span><span class="me1">DefaultPathAfterLogin</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp;
&nbsp; &nbsp; <span class="co1">// ...</span>
<span class="br0">&#125;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">[Route("account")]
public class AccountController : Controller
{
	// ...

	[HttpGet("login")]
	[AllowAnonymous]
	public IActionResult Login(string returnUrl = null)
	{
		TempData["returnUrl"] = returnUrl;
		return View("Login");
	}

	[HttpPost("login")]
	[AllowAnonymous]
	[ValidateAntiForgeryToken]
	public async Task&lt;IActionResult&gt; LoginPostAsync(LoginModel user,  string returnUrl = null)
	{
		if (!ModelState.IsValid) {
			ModelState.AddModelError("", "Username or password is incorrect");
			return View("Login", user);
		}

		var result = await _membership.LoginAsync(user.UserName, user.Password);
		if (result.Failed)
		{
			ModelState.AddModelError("", "Username or password is incorrect");
			return View("Login", user);
		}

		return LocalRedirect(returnUrl ?? _membership.Options.DefaultPathAfterLogin);
	}

	// ...
}</pre></div></div>

<p>Like the Registration actions, the <code>GET</code> simply returns a view, the user enters their information, and the <code>POST</code> is validated, sent to our Membership object to create a session (or not), and then the user is redirected to either the passed URL or back to the Login form with an error.</p>
<p><code>returnUrl</code> is provided by the Cookie Authentication module when someone attempts to access a page requiring Authorization and the cookie authentication module challenges them by sending them to this login page.</p>
<p>Next, create a "Login" view in the Views/Account folder like we did with the "Register" View.</p>
<p><a href="https://github.com/tarwn/Sample_ASPNetCore2AndCosmosDB/blob/d7c5907d45154685b62127c714394b29734f8e60/SampleCosmosCore2App/Views/Account/Login.cshtml">Views/Account/Login.cshtml</a></p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="html4strict"><thead><tr><td colspan="2"  class="head">HTML</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
</pre></td><td class="de1"><pre class="de1">@model SampleCosmosCore2App.Models.Account.LoginModel
&nbsp;
@{
&nbsp; &nbsp; ViewData[&quot;Title&quot;] = &quot;Login&quot;;
&nbsp; &nbsp; Layout = &quot;~/Views/Shared/Layout.cshtml&quot;;
}
&nbsp;
<span class="sc2">&lt;<span class="kw2">h2</span>&gt;</span>Login<span class="sc2">&lt;<span class="sy0">/</span><span class="kw2">h2</span>&gt;</span>
&nbsp;
<span class="sc2">&lt;<span class="kw2">form</span> asp-<span class="kw3">action</span><span class="sy0">=</span><span class="st0">&quot;Login&quot;</span> <span class="kw3">method</span><span class="sy0">=</span><span class="st0">&quot;post&quot;</span>&gt;</span>
&nbsp; &nbsp; <span class="sc2">&lt;<span class="kw2">div</span> asp-validation-<span class="kw3">summary</span><span class="sy0">=</span><span class="st0">&quot;ModelOnly&quot;</span> <span class="kw3">class</span><span class="sy0">=</span><span class="st0">&quot;text-danger&quot;</span>&gt;&lt;<span class="sy0">/</span><span class="kw2">div</span>&gt;</span>
&nbsp; &nbsp; <span class="sc2">&lt;<span class="kw2">div</span> <span class="kw3">class</span><span class="sy0">=</span><span class="st0">&quot;form-group&quot;</span>&gt;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="sc2">&lt;<span class="kw2">label</span> asp-<span class="kw3">for</span><span class="sy0">=</span><span class="st0">&quot;UserName&quot;</span> <span class="kw3">class</span><span class="sy0">=</span><span class="st0">&quot;control-label&quot;</span>&gt;&lt;<span class="sy0">/</span><span class="kw2">label</span>&gt;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="sc2">&lt;<span class="kw2">input</span> asp-<span class="kw3">for</span><span class="sy0">=</span><span class="st0">&quot;UserName&quot;</span> <span class="kw3">class</span><span class="sy0">=</span><span class="st0">&quot;form-control&quot;</span> <span class="sy0">/</span>&gt;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="sc2">&lt;<span class="kw2">span</span> asp-validation-<span class="kw3">for</span><span class="sy0">=</span><span class="st0">&quot;UserName&quot;</span> <span class="kw3">class</span><span class="sy0">=</span><span class="st0">&quot;text-danger&quot;</span>&gt;&lt;<span class="sy0">/</span><span class="kw2">span</span>&gt;</span>
&nbsp; &nbsp; <span class="sc2">&lt;<span class="sy0">/</span><span class="kw2">div</span>&gt;</span>
&nbsp; &nbsp; <span class="sc2">&lt;<span class="kw2">div</span> <span class="kw3">class</span><span class="sy0">=</span><span class="st0">&quot;form-group&quot;</span>&gt;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="sc2">&lt;<span class="kw2">label</span> asp-<span class="kw3">for</span><span class="sy0">=</span><span class="st0">&quot;Password&quot;</span> <span class="kw3">class</span><span class="sy0">=</span><span class="st0">&quot;control-label&quot;</span>&gt;&lt;<span class="sy0">/</span><span class="kw2">label</span>&gt;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="sc2">&lt;<span class="kw2">input</span> asp-<span class="kw3">for</span><span class="sy0">=</span><span class="st0">&quot;Password&quot;</span> <span class="kw3">class</span><span class="sy0">=</span><span class="st0">&quot;form-control&quot;</span> <span class="sy0">/</span>&gt;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="sc2">&lt;<span class="kw2">span</span> asp-validation-<span class="kw3">for</span><span class="sy0">=</span><span class="st0">&quot;Password&quot;</span> <span class="kw3">class</span><span class="sy0">=</span><span class="st0">&quot;text-danger&quot;</span>&gt;&lt;<span class="sy0">/</span><span class="kw2">span</span>&gt;</span>
&nbsp; &nbsp; <span class="sc2">&lt;<span class="sy0">/</span><span class="kw2">div</span>&gt;</span>
&nbsp; &nbsp; <span class="sc2">&lt;<span class="kw2">div</span> <span class="kw3">class</span><span class="sy0">=</span><span class="st0">&quot;form-group&quot;</span>&gt;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="sc2">&lt;<span class="kw2">input</span> <span class="kw3">type</span><span class="sy0">=</span><span class="st0">&quot;submit&quot;</span> <span class="kw3">value</span><span class="sy0">=</span><span class="st0">&quot;Login&quot;</span> <span class="kw3">class</span><span class="sy0">=</span><span class="st0">&quot;btn btn-default&quot;</span> <span class="sy0">/</span>&gt;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="sc2">&lt;<span class="kw2">a</span> asp-<span class="kw3">action</span><span class="sy0">=</span><span class="st0">&quot;Register&quot;</span>&gt;</span>Register<span class="sc2">&lt;<span class="sy0">/</span><span class="kw2">a</span>&gt;</span>
&nbsp; &nbsp; <span class="sc2">&lt;<span class="sy0">/</span><span class="kw2">div</span>&gt;</span>
<span class="sc2">&lt;<span class="sy0">/</span><span class="kw2">form</span>&gt;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">@model SampleCosmosCore2App.Models.Account.LoginModel

@{
    ViewData["Title"] = "Login";
    Layout = "~/Views/Shared/Layout.cshtml";
}

&lt;h2&gt;Login&lt;/h2&gt;

&lt;form asp-action="Login" method="post"&gt;
    &lt;div asp-validation-summary="ModelOnly" class="text-danger"&gt;&lt;/div&gt;
    &lt;div class="form-group"&gt;
        &lt;label asp-for="UserName" class="control-label"&gt;&lt;/label&gt;
        &lt;input asp-for="UserName" class="form-control" /&gt;
        &lt;span asp-validation-for="UserName" class="text-danger"&gt;&lt;/span&gt;
    &lt;/div&gt;
    &lt;div class="form-group"&gt;
        &lt;label asp-for="Password" class="control-label"&gt;&lt;/label&gt;
        &lt;input asp-for="Password" class="form-control" /&gt;
        &lt;span asp-validation-for="Password" class="text-danger"&gt;&lt;/span&gt;
    &lt;/div&gt;
    &lt;div class="form-group"&gt;
        &lt;input type="submit" value="Login" class="btn btn-default" /&gt;
        &lt;a asp-action="Register"&gt;Register&lt;/a&gt;
    &lt;/div&gt;
&lt;/form&gt;</pre></div></div>

<p>And there we go, a new login form!</p>
<div id="attachment_9138" style="width: 362px" class="wp-caption aligncenter"><img src="/wp-content/uploads/2018/04/aspnetcore2cosmos_102.png" alt="Working Login Form!" width="352" height="281" class="size-full wp-image-9138" srcset="/wp-content/uploads/2018/04/aspnetcore2cosmos_102.png 352w, /wp-content/uploads/2018/04/aspnetcore2cosmos_102-300x239.png 300w" sizes="(max-width: 352px) 100vw, 352px" /><p class="wp-caption-text">Working Login Form!</p></div>
<p>Finally we need a way for the user to logout and a protected endpoint to test against. These are pretty minimal and my test "protected" endpoint is barely more than an empty view.</p>
<p><a href="https://github.com/tarwn/Sample_ASPNetCore2AndCosmosDB/blob/d7c5907d45154685b62127c714394b29734f8e60/SampleCosmosCore2App/Controllers/AccountController.cs#L80">SampleCosmosCore2App/Controllers/AccountController.cs</a></p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="csharp"><thead><tr><td colspan="2"  class="head">C#</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
</pre></td><td class="de1"><pre class="de1"><span class="kw1">public</span> <span class="kw4">class</span> AccountController <span class="sy0">:</span> Controller
<span class="br0">&#123;</span>
&nbsp; &nbsp; <span class="co1">// ...</span>
&nbsp;
&nbsp; &nbsp; <span class="br0">&#91;</span>HttpGet<span class="br0">&#40;</span><span class="st0">&quot;logout&quot;</span><span class="br0">&#41;</span><span class="br0">&#93;</span>
&nbsp; &nbsp; <span class="br0">&#91;</span>Authorize<span class="br0">&#93;</span>
&nbsp; &nbsp; <span class="kw1">public</span> async Task<span class="sy0">&lt;</span>IActionResult<span class="sy0">&gt;</span> LogoutAsync<span class="br0">&#40;</span><span class="br0">&#41;</span>
&nbsp; &nbsp; <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; await _membership<span class="sy0">.</span><span class="me1">LogoutAsync</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">return</span> RedirectToAction<span class="br0">&#40;</span><span class="st0">&quot;login&quot;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp;
&nbsp; &nbsp; <span class="br0">&#91;</span>HttpGet<span class="br0">&#40;</span><span class="st0">&quot;protected&quot;</span><span class="br0">&#41;</span><span class="br0">&#93;</span>
&nbsp; &nbsp; <span class="br0">&#91;</span>Authorize<span class="br0">&#93;</span>
&nbsp; &nbsp; <span class="kw1">public</span> async Task<span class="sy0">&lt;</span>IActionResult<span class="sy0">&gt;</span> <span class="kw1">Protected</span><span class="br0">&#40;</span><span class="br0">&#41;</span>
&nbsp; &nbsp; <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="co1">// ... get some session details and return the view</span>
&nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp;
&nbsp; &nbsp; <span class="co1">// ...</span>
<span class="br0">&#125;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">public class AccountController : Controller
{
	// ...

	[HttpGet("logout")]
	[Authorize]
	public async Task&lt;IActionResult&gt; LogoutAsync()
	{
		await _membership.LogoutAsync();
		return RedirectToAction("login");
	}

	[HttpGet("protected")]
	[Authorize]
	public async Task&lt;IActionResult&gt; Protected()
	{
		// ... get some session details and return the view
	}

	// ...
}</pre></div></div>

<p>For the logout, we're using the <code>LogoutAsync</code> method that signs out of the authentication module (clearing the cookie) then redirect to the login screen. The "Protected" endpoint has a couple more lines of logic to get soe data from the Membership object and pass it to the view, but an empty View would work just as well (look at the github link above for the full detail if you want it).</p>
<p>Success, that's a fully functional Membership system! With a really poor password strategy.</p>
<h2>Task 2: Password Hashing</h2>
<p>If you recall, back 60 pages ago, we passed the plain text password from the user straight into Cosmos DB and later relied on basic string comparison to validate user logins. This is something you never want to do in the real world, so the next step is to add a one-way cryptographic hash.</p>
<div id="attachment_9140" style="width: 610px" class="wp-caption aligncenter"><img src="/wp-content/uploads/2018/04/aspnetcore2cosmos_104-600x213.png" alt="CosmosDB User - Before Hashing" width="600" height="213" class="size-medium-width wp-image-9140" srcset="/wp-content/uploads/2018/04/aspnetcore2cosmos_104-600x213.png 600w, /wp-content/uploads/2018/04/aspnetcore2cosmos_104-300x106.png 300w, /wp-content/uploads/2018/04/aspnetcore2cosmos_104-768x273.png 768w, /wp-content/uploads/2018/04/aspnetcore2cosmos_104-845x300.png 845w, /wp-content/uploads/2018/04/aspnetcore2cosmos_104.png 868w" sizes="(max-width: 600px) 100vw, 600px" /><p class="wp-caption-text">CosmosDB User - Before Hashing</p></div>
<p>Don't worry, this is a lot shorter than the previous steps. </p>
<p><a href="https://www.owasp.org/index.php/Password_Storage_Cheat_Sheet" title="OWASP Password Storage Cheat Sheet">OWASP's guidance</a> is to use an Argon2 library, but I wasn't comfortable with the maturity of those projects for .Net, so I'm using a BCrypt implementation instead.</p>
<div class="note-area">
The goal of libraries like Argon2 and BCrypt is to not only hash the password value in a way that can't be reversed, but also do so in a way that is slow, which limits the ability to brute force guess the password.
</div>
<p>To add BCrypt to the solution, install the <a href="https://www.nuget.org/packages/BCrypt.Net-Core/" title="BCrypt.Net-Core on Nuget.org">nuget package</a> from the UI or the Package Manager Console: <code>Install-Package BCrypt.Net-Core</code>.</p>
<p>Now we just have to make two small changes to implement it during registration and login.</p>
<p><a href="https://github.com/tarwn/Sample_ASPNetCore2AndCosmosDB/blob/Post-%232/SampleCosmosCore2App/Membership/CosmosDBMembership.cs">SampleCosmosCore2App/Membership/CosmosDBMembership.cs</a></p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="csharp"><thead><tr><td colspan="2"  class="head">C#</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
</pre></td><td class="de1"><pre class="de1"><span class="kw1">public</span> <span class="kw4">class</span> CosmosDBMembership <span class="sy0">:</span> ICustomMembership
<span class="br0">&#123;</span>
&nbsp; &nbsp; <span class="co1">// ...</span>
&nbsp;
&nbsp; &nbsp; <span class="kw1">public</span> async Task<span class="sy0">&lt;</span>LoginResult<span class="sy0">&gt;</span> LoginAsync<span class="br0">&#40;</span><span class="kw4">string</span> userName, <span class="kw4">string</span> password<span class="br0">&#41;</span>
&nbsp; &nbsp; <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">var</span> user <span class="sy0">=</span> await _persistence<span class="sy0">.</span><span class="me1">Users</span><span class="sy0">.</span><span class="me1">GetUserByUsernameAsync</span><span class="br0">&#40;</span>userName<span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">if</span> <span class="br0">&#40;</span>user <span class="sy0">==</span> <span class="kw1">null</span><span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">return</span> LoginResult<span class="sy0">.</span><span class="me1">GetFailed</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; <span class="co1">// CHANGE #1</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">if</span> <span class="br0">&#40;</span><span class="sy0">!</span>BCrypt<span class="sy0">.</span><span class="me1">Net</span><span class="sy0">.</span><span class="me1">BCrypt</span><span class="sy0">.</span><span class="me1">Verify</span><span class="br0">&#40;</span>password, user<span class="sy0">.</span><span class="me1">PasswordHash</span><span class="br0">&#41;</span><span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">return</span> LoginResult<span class="sy0">.</span><span class="me1">GetFailed</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; await SignInAsync<span class="br0">&#40;</span>user<span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">return</span> LoginResult<span class="sy0">.</span><span class="me1">GetSuccess</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp; &nbsp; 
&nbsp; &nbsp; <span class="co1">// ...</span>
&nbsp; &nbsp; 
&nbsp; &nbsp; <span class="kw1">public</span> async Task<span class="sy0">&lt;</span>RegisterResult<span class="sy0">&gt;</span> RegisterAsync<span class="br0">&#40;</span><span class="kw4">string</span> userName, <span class="kw4">string</span> email, <span class="kw4">string</span> password<span class="br0">&#41;</span>
&nbsp; &nbsp; <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="co1">// CHANGE #2</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">var</span> passwordHash <span class="sy0">=</span> BCrypt<span class="sy0">.</span><span class="me1">Net</span><span class="sy0">.</span><span class="me1">BCrypt</span><span class="sy0">.</span><span class="me1">HashPassword</span><span class="br0">&#40;</span>password<span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">var</span> user <span class="sy0">=</span> <span class="kw3">new</span> LoginUser<span class="br0">&#40;</span><span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Username <span class="sy0">=</span> userName,
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Email <span class="sy0">=</span> email,
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; PasswordHash <span class="sy0">=</span> passwordHash
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span><span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; <span class="co1">// ...</span>
&nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp;
&nbsp; &nbsp; <span class="co1">// ...</span>
<span class="br0">&#125;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">public class CosmosDBMembership : ICustomMembership
{
	// ...

	public async Task&lt;LoginResult&gt; LoginAsync(string userName, string password)
	{
		var user = await _persistence.Users.GetUserByUsernameAsync(userName);
		if (user == null)
		{
			return LoginResult.GetFailed();
		}

		// CHANGE #1
		if (!BCrypt.Net.BCrypt.Verify(password, user.PasswordHash))
		{
			return LoginResult.GetFailed();
		}

		await SignInAsync(user);

		return LoginResult.GetSuccess();
	}
	
	// ...
	
	public async Task&lt;RegisterResult&gt; RegisterAsync(string userName, string email, string password)
	{
		// CHANGE #2
		var passwordHash = BCrypt.Net.BCrypt.HashPassword(password);
		var user = new LoginUser()
		{
			Username = userName,
			Email = email,
			PasswordHash = passwordHash
		};

		// ...
	}

	// ...
}</pre></div></div>

<p><code>LoginAsync</code>: replace the string comparison with <code>BCrypt.Net.BCrypt.Verify</code>.</p>
<p><code>RegisterAsync</code>: hash the password before populating the <code>PasswordHash</code> property.</p>
<p>And now when we look at a registered user in the CosmosDB Data Explorer, we can see a nicely hashed password instead of plain text:</p>
<div id="attachment_9141" style="width: 610px" class="wp-caption aligncenter"><img src="/wp-content/uploads/2018/04/aspnetcore2cosmos_105-600x191.png" alt="Data Explorer view of User - Now with Hashed Password!" width="600" height="191" class="size-medium-width wp-image-9141" srcset="/wp-content/uploads/2018/04/aspnetcore2cosmos_105-600x191.png 600w, /wp-content/uploads/2018/04/aspnetcore2cosmos_105-300x96.png 300w, /wp-content/uploads/2018/04/aspnetcore2cosmos_105-768x245.png 768w, /wp-content/uploads/2018/04/aspnetcore2cosmos_105.png 916w" sizes="(max-width: 600px) 100vw, 600px" /><p class="wp-caption-text">Data Explorer view of User - Now with Hashed Password!</p></div>
<p>Success!</p>
<h2>Next Steps</h2>
<p>That probably felt pretty involved. I've written custom auth logic for just about every version of ASP.Net and I've found that once you get a handle on the theory and changes that have occurred to the Request/Response lifecycle, it becomes relatively easy to write your own custom auth logic that will continue to work abd be extended for many versions of ASP.Net to come. </p>
<p>Between this post and the last one, we now have an ASP.Net Core 2 site running against CosmosDB with authentication. Next we'll extend the interactive authentication to include a third-party Twitter login, still using the built-in middleware to do the heavy lifting. Then after we buidl that, we'll layer in API authentication with user-manageable API tokens.</p>
]]></content>
			<link rel="replies" type="text/html" href="/index.php/webdev/serverprogramming/aspnet/custom-authentication-in-asp-net-core-2-w-cosmos-db/#comments" thr:count="4"/>
		<link rel="replies" type="application/atom+xml" href="/index.php/webdev/serverprogramming/aspnet/custom-authentication-in-asp-net-core-2-w-cosmos-db/feed/atom/" thr:count="4"/>
		<thr:total>4</thr:total>
		</entry>
		<entry>
		<author>
			<name>Eli Weinstock-Herman (tarwn)</name>
					</author>
		<title type="html"><![CDATA[ASP.Net Core 2 w/ Cosmos DB: Getting Started]]></title>
		<link rel="alternate" type="text/html" href="/index.php/webdev/serverprogramming/aspnet/asp-net-core-2-w-cosmosdb-getting-started/" />
		<id>/?p=9087</id>
		<updated>2018-04-09T18:12:28Z</updated>
		<published>2018-04-09T11:33:55Z</published>
		<category scheme="/" term="ASP.NET" /><category scheme="/" term="ASP.Net Core 2" /><category scheme="/" term="CosmosDB" />		<summary type="html"><![CDATA[I am building the basic foundation for a B2C web application, using ASP.Net Core 2 and Cosmos DB. Along the way I&#8217;m going to need authentication, source control, CI/CD, &#8230; but first I have to start learning what&#8217;s changed in ASP.Net Core 2 and how to use Cosmos DB beyond the 5-minute console application demo. [&#8230;]]]></summary>
		<content type="html" xml:base="/index.php/webdev/serverprogramming/aspnet/asp-net-core-2-w-cosmosdb-getting-started/"><![CDATA[<p>I am building the basic foundation for a B2C web application, using ASP.Net Core 2 and Cosmos DB. Along the way I&#8217;m going to need authentication, source control, CI/CD, &#8230; but first I have to start learning what&#8217;s changed in ASP.Net Core 2 and how to use Cosmos DB beyond the 5-minute console application demo. There aren&#8217;t a lot of ASP.net Core 2 and Cosmos DB blog posts out there, so I thought we could do this together and hopefully my experiments and errors will help you get there faster.</p>
<p>I&#8217;m in the writers chair, though, so this will be somewhat opinionated. We&#8217;ll be ignoring some pre-packaged solutions (like ASP.Net Identity, Entity Framework, Bootstrap), shipping in small increments, and aiming for a balance between <a href="https://en.wikipedia.org/wiki/You_aren%27t_gonna_need_it" title="Wikipedia: YAGNI">YAGNI</a> and a clean foundation.</p>
<div id="attachment_9149" style="width: 610px" class="wp-caption aligncenter"><img src="/wp-content/uploads/2018/04/cosmos-db-600x315.png" alt="Azure Cosmos DB - Globally distributed, multi-model database" width="600" height="315" class="size-medium-width wp-image-9149" srcset="/wp-content/uploads/2018/04/cosmos-db.png 600w, /wp-content/uploads/2018/04/cosmos-db-300x158.png 300w, /wp-content/uploads/2018/04/cosmos-db-571x300.png 571w" sizes="(max-width: 600px) 100vw, 600px" /><p class="wp-caption-text"><a href="https://azure.microsoft.com/en-us/services/cosmos-db/">Azure Cosmos DB &#8211; Globally distributed, multi-model database</a></p></div>
<p>Who is this for? If you have worked with earlier versions of ASP.Net Core and need a hand starting with Core 2, wanted to try out Cosmos DB, wondered how to create Custom Authentication without the clumsy abstraction of Identity model, worked in other ASP.Net projects but never created one on your own &#8230; I hope this will help.</p>
<style>
.note-area{
   border: 1px solid #eeeeee; 
   border-left-width: 16px; 
   padding: 1em;
   margin: 1em 0;
}
.warning-area{
   border: 1px solid #FFdddd; 
   border-left-width: 16px; 
   padding: 1em;
   margin: 1em 0;
}
</style>
<h2>Bite-size pieces</h2>
<p>It would be easy to jump ahead and start coding up a solution, but I like to attack problems in bite-size pieces. Taking small, defined steps forward and locking them in provides a sense of forward momentum and a safer foundation when we reach the new areas and break something or take a wrong turn.</p>
<p>I&#8217;m not 100% how far this series is going to go, but I need this foundation for a side project so at a minimum we will</p>
<ul>
<li>Create an ASP.Net Core 2 app, without bothering with bootstrap</li>
<li>Put it in source control</li>
<li>Explore basic usage of Cosmos DB by writing some simple CRUD pages</li>
<li>Apply the newest iteration of ASP.Net Authentication</li>
<li>Expand to support multiple authentication methods</li>
<li>Apply better patterns for Cosmos DB setup and usage</li>
<li>Ensure forms are safe from <a href="https://docs.microsoft.com/en-us/aspnet/core/security/anti-request-forgery">Cross site request forgery</a></li>
<li>&#8230;And maybe: Solid error handling, generic error pages, basic instrumentation, API token authentication, CI/CD, unit tests, and more</li>
</ul>
<p>We will do this all without letting the standard templates steer us into using bootstrap, Entity Framework, &#8220;install all the things&#8221; authentication checkboxes, buttons that manually deploy completely unrepeatable local builds, or any other magic that would get in the way of learning how these things work. </p>
<p>Ready? Awesome, let&#8217;s go!</p>
<h2>Task 1: Create the Solution</h2>
<p>We&#8217;ll start with the ASP.Net Core Web Application with the API template (Create new project&#8230;). This includes the minimal set of nuget packages we need without creating piles of example and template files we&#8217;d have to go through and clean out. Also be sure to <u>not</u> choose an Authentication option. That magic is best left for temporary projects when you&#8217;re trying to decode the documentation, but don&#8217;t want to accidentally add 100 packages to your real system.</p>
<div id="attachment_9088" style="width: 610px" class="wp-caption aligncenter"><img src="/wp-content/uploads/2018/04/aspnetcore2cosmos_001-600x395.png" alt="Creating an ASP.Net Core 2 Project" width="600" height="395" class="size-medium-width wp-image-9088" srcset="/wp-content/uploads/2018/04/aspnetcore2cosmos_001-600x395.png 600w, /wp-content/uploads/2018/04/aspnetcore2cosmos_001-300x198.png 300w, /wp-content/uploads/2018/04/aspnetcore2cosmos_001-768x506.png 768w, /wp-content/uploads/2018/04/aspnetcore2cosmos_001-455x300.png 455w, /wp-content/uploads/2018/04/aspnetcore2cosmos_001.png 791w" sizes="(max-width: 600px) 100vw, 600px" /><p class="wp-caption-text">Creating an ASP.Net Core 2 Project</p></div>
<p>This template has minimal magic, we get a basic ASP.Net Core 2 website with a single <code>Values</code> API Controller.</p>
<p>Let&#8217;s lock in this first win by pressing F5 to run the site and verify we have a working API that returns the hard-coded sample values from ValuesController.Get():</p>
<div id="attachment_9089" style="width: 505px" class="wp-caption aligncenter"><img src="/wp-content/uploads/2018/04/aspnetcore2cosmos_002.png" alt="ASP.Net Core 2 - Default ValuesController Output" width="495" height="181" class="size-full wp-image-9089" srcset="/wp-content/uploads/2018/04/aspnetcore2cosmos_002.png 495w, /wp-content/uploads/2018/04/aspnetcore2cosmos_002-300x110.png 300w" sizes="(max-width: 495px) 100vw, 495px" /><p class="wp-caption-text">ASP.Net Core 2 &#8211; Default ValuesController Output</p></div>
<p>Good. It only took a few seconds to verify and now we can move on knowing it works and what port we&#8217;re working on.</p>
<p>The next step is moving from raw API output to HTML output.</p>
<h2>Adding the First MVC Page</h2>
<p>We started with an API project template, but unlike prior versions of ASP.Net it is pretty easy to start adding MVC capabilities.</p>
<div class="note-area">
 Another alternative would have been <a href="https://docs.microsoft.com/en-us/aspnet/core/mvc/razor-pages/?tabs=visual-studio">Razor Pages</a>. I chose MVC because I have more extensive experience with past versions, reducing the number of unknowns I&#8217;ll be working with in this project.
</div>
<p>Following the expected conventions, let&#8217;s add a &#8220;Controllers&#8221; folder to the project. Then we can use the right-click context menu from there to &#8220;Add New Item&#8221; and pick an ASP.Net Core <code>Controller Class</code>:</p>
<div id="attachment_9091" style="width: 610px" class="wp-caption aligncenter"><img src="/wp-content/uploads/2018/04/aspnetcore2cosmos_003-600x418.png" alt="ASP.Net Core 2: Add New Item - Controller Class" width="600" height="418" class="size-medium-width wp-image-9091" srcset="/wp-content/uploads/2018/04/aspnetcore2cosmos_003-600x418.png 600w, /wp-content/uploads/2018/04/aspnetcore2cosmos_003-300x209.png 300w, /wp-content/uploads/2018/04/aspnetcore2cosmos_003-768x535.png 768w, /wp-content/uploads/2018/04/aspnetcore2cosmos_003-431x300.png 431w, /wp-content/uploads/2018/04/aspnetcore2cosmos_003.png 948w" sizes="(max-width: 600px) 100vw, 600px" /><p class="wp-caption-text">ASP.Net Core 2: Add New Item &#8211; Controller Class</p></div>
<p>Like earlier versions, a <code>Controller Class</code> is a standard C# class that inherits from <code>Controller</code>, so you also have the option of just creating a basic class and adding the &#8220;Controller&#8221; suffix and inheritance yourself, for a few less clicks.</p>
<p>The default for routing with this project is attribute routing rather than the global route registered in most earlier MVC versions. Add a <code>[Route("")]</code> attribute above the class declaration to route base level &#8220;/&#8221; paths to this controller.</p>
<p><a href="https://github.com/tarwn/Sample_ASPNetCore2AndCosmosDB/blob/Post-%231/SampleCosmosCore2App/Controllers/HomeController.cs">SampleCosmosCore2App/Controllers/HomeController.cs</a></p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="csharp"><thead><tr><td colspan="2"  class="head">C#</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
</pre></td><td class="de1"><pre class="de1"><span class="co1">// ...</span>
&nbsp;
<span class="kw1">namespace</span> SampleCosmosCore2App<span class="sy0">.</span><span class="me1">Controllers</span>
<span class="br0">&#123;</span>
&nbsp; &nbsp; <span class="br0">&#91;</span>Route<span class="br0">&#40;</span><span class="st0">&quot;&quot;</span><span class="br0">&#41;</span><span class="br0">&#93;</span>
&nbsp; &nbsp; <span class="kw1">public</span> <span class="kw4">class</span> HomeController <span class="sy0">:</span> Controller
&nbsp; &nbsp; <span class="br0">&#123;</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">public</span> IActionResult Index<span class="br0">&#40;</span><span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">return</span> View<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp; &nbsp; <span class="br0">&#125;</span>
<span class="br0">&#125;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">// ...

namespace SampleCosmosCore2App.Controllers
{
    [Route("")]
    public class HomeController : Controller
    {

        public IActionResult Index()
        {
            return View();
        }
    }
}</pre></div></div>

<p>Next we&#8217;ll add a <code>Layout.cshtml</code> file that to serve as the general HTML layout for the site. Again we want to match the standard ASP.Net MVC conventions, so first create a top-level folder named <code>Views</code>, then create a folder under this named <code>Shared</code>, then finally right-click this folder to &#8220;Add View&#8221;, ensure you have Empty Model and no layout selected, with the name &#8220;Layout&#8221;</p>
<div id="attachment_9092" style="width: 603px" class="wp-caption aligncenter"><img src="/wp-content/uploads/2018/04/aspnetcore2cosmos_004.png" alt="ASP.Net Core 2 - Add View Dialog" width="593" height="347" class="size-full wp-image-9092" srcset="/wp-content/uploads/2018/04/aspnetcore2cosmos_004.png 593w, /wp-content/uploads/2018/04/aspnetcore2cosmos_004-300x176.png 300w, /wp-content/uploads/2018/04/aspnetcore2cosmos_004-513x300.png 513w" sizes="(max-width: 593px) 100vw, 593px" /><p class="wp-caption-text">ASP.Net Core 2 &#8211; Add View Dialog</p></div>
<div class="note-area">Note: if you can&#8217;t edit the name of the folder you just added, see if you&#8217;re still running in &#8220;Debug&#8221; and press Stop <img src="/wp-content/uploads/2018/04/aspnetcore2cosmos_003.5.png" alt="Press &quot;Stop&quot; to stop debugging" width="82" height="31" class="aligncenter size-full wp-image-9090" /> I&#8217;ve used more than 10 versions of Visual Studio and still do this <img src="https://s.w.org/images/core/emoji/2/72x72/1f642.png" alt="🙂" class="wp-smiley" style="height: 1em; max-height: 1em;" />
</div>
<p>Once created, edit the <code>Layout.cshtml</code> file to look like this:</p>
<p><a href="https://github.com/tarwn/Sample_ASPNetCore2AndCosmosDB/blob/Post-%231/SampleCosmosCore2App/Views/Shared/Layout.cshtml">SampleCosmosCore2App/Views/_Shared/Layout.cshtml</a></p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="html4strict"><thead><tr><td colspan="2"  class="head">HTML</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
</pre></td><td class="de1"><pre class="de1"><span class="sc0">&lt;!DOCTYPE html&gt;</span>
&nbsp;
<span class="sc2">&lt;<span class="kw2">html</span>&gt;</span>
<span class="sc2">&lt;<span class="kw2">head</span>&gt;</span>
&nbsp; &nbsp; <span class="sc2">&lt;<span class="kw2">meta</span> <span class="kw3">name</span><span class="sy0">=</span><span class="st0">&quot;viewport&quot;</span> <span class="kw3">content</span><span class="sy0">=</span><span class="st0">&quot;width=device-width&quot;</span> <span class="sy0">/</span>&gt;</span>
&nbsp; &nbsp; <span class="sc2">&lt;<span class="kw2">title</span>&gt;</span>Layout<span class="sc2">&lt;<span class="sy0">/</span><span class="kw2">title</span>&gt;</span>
<span class="sc2">&lt;<span class="sy0">/</span><span class="kw2">head</span>&gt;</span>
<span class="sc2">&lt;<span class="kw2">body</span>&gt;</span>
&nbsp; &nbsp; @RenderBody()
<span class="sc2">&lt;<span class="sy0">/</span><span class="kw2">body</span>&gt;</span>
<span class="sc2">&lt;<span class="sy0">/</span><span class="kw2">html</span>&gt;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">&lt;!DOCTYPE html&gt;

&lt;html&gt;
&lt;head&gt;
    &lt;meta name="viewport" content="width=device-width" /&gt;
    &lt;title&gt;Layout&lt;/title&gt;
&lt;/head&gt;
&lt;body&gt;
    @RenderBody()
&lt;/body&gt;
&lt;/html&gt;</pre></div></div>

<p>Finally, we&#8217;ll create the first view for <code>HomeController</code>. Create a <code>Home</code> subfolder under <code>Views</code>, then right-click and &#8220;Add View&#8221; again. This time select &#8220;Layout.cshtml&#8221; as the layout, but continue to leave Model empty.</p>
<div class="note-area">Note: If you haven&#8217;t done much MVC in the past, the naming is important because MVC, by convention, will automatically look for views in /Views/<i>ControllerName</i>/<i>ActionName</i>.cshtml when we don&#8217;t provide a full path.
</div>
<div class="warning-area">
Warning: Unlike prior versions of MVC, ASP.Net Core 2 is not smart enough to match BlahBlahAsync actions with BlahBlah.cshtml. There is an open bug for this that won&#8217;t be addressed until ASP.net Core 3 due to concerns that this would cause breaking changes if added to ASP.Net Core 2.
</div>
<p>Here we go:</p>
<p><a href="https://github.com/tarwn/Sample_ASPNetCore2AndCosmosDB/blob/Post-%231/SampleCosmosCore2App/Views/Home/Index.cshtml">/SampleCosmosCore2App/Views/Home/Index.cshtml</a></p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="html4strict"><thead><tr><td colspan="2"  class="head">HTML</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
</pre></td><td class="de1"><pre class="de1">@{
&nbsp; &nbsp; ViewData[&quot;Title&quot;] = &quot;Home&quot;;
&nbsp; &nbsp; Layout = &quot;~/Views/_Shared/Layout.cshtml&quot;;
}
&nbsp;
<span class="sc2">&lt;<span class="kw2">h2</span>&gt;</span>Home<span class="sc2">&lt;<span class="sy0">/</span><span class="kw2">h2</span>&gt;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">@{
    ViewData["Title"] = "Home";
    Layout = "~/Views/_Shared/Layout.cshtml";
}

&lt;h2&gt;Home&lt;/h2&gt;</pre></div></div>

<p>Time to lock in our winnings again before we move on. Hit F5 and visit the root URL ( to verify we have the first task completed successfully.</p>
<p>Excellent, time to move on.</p>
<h2>Task 2: Set Up Source Control</h2>
<p>The best way to lock in progress is to commit it to source control. This gives us a way to not only save our incremental progress, but also back out of experiments that go awry.</p>
<p>For this post, I&#8217;m using git with <a href="https://github.com/">github</a> as a remote repository.</p>
<p>Open up a terminal window (I prefer Powershell with the posh-git plugin), and type <code>git init</code> in the root folder of the solution:</p>
<div id="attachment_9094" style="width: 562px" class="wp-caption aligncenter"><img src="/wp-content/uploads/2018/04/aspnetcore2cosmos_006.png" alt="Initializing a git repository" width="552" height="32" class="size-full wp-image-9094" srcset="/wp-content/uploads/2018/04/aspnetcore2cosmos_006.png 552w, /wp-content/uploads/2018/04/aspnetcore2cosmos_006-300x17.png 300w" sizes="(max-width: 552px) 100vw, 552px" /><p class="wp-caption-text">Initializing a git repository</p></div>
<p>There are a number of files we don&#8217;t want to commit and share, such as binaries from the build, user-specific settings in Visual Studio, and so on. We also need to help future us install the right dependencies when we come back to this later. So let&#8217;s create a <code>/gitignore</code> for the first and <code>README.md</code> for the latter. I typically start this in the console (powershell again) out of habit:</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="text"><thead><tr><td colspan="2"  class="head">Text</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
</pre></td><td class="de1"><pre class="de1">wget -O .gitignore &nbsp;https://raw.githubusercontent.com/dotnet/core/master/.gitignore
echo &quot;&quot; &gt; README.md</pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">wget -O .gitignore  https://raw.githubusercontent.com/dotnet/core/master/.gitignore
echo "" &gt; README.md</pre></div></div>

<p>One last file to consider is a license statement. You can use <a href="https://choosealicense.com/">choosealicense.com</a> to help pick one and providers like github are pretty smart about providing additional visibility when you use a standard one they recognize.</p>
<p>At this point, we&#8217;ll also add some minimal info to the README while it&#8217;s fresh in our minds. A good start is the name of the project and a section outlining the dependencies so far:</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="text"><thead><tr><td colspan="2"  class="head">Text</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
</pre></td><td class="de1"><pre class="de1"># Overview
&nbsp;
Blah blah, amazing things...
&nbsp;
# Dependencies
&nbsp;
* Visual Studio 2017 
* ASP.Net Core 2
* .Net Core 2</pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse"># Overview

Blah blah, amazing things...

# Dependencies

* Visual Studio 2017 
* ASP.Net Core 2
* .Net Core 2</pre></div></div>

<p>Finally, we&#8217;ll save all this with the first commit as a starting point. Visual Studio includes tooling for git, you can also use third party tools like <a href="https://www.gitkraken.com/">gitkraken</a> and <a href="https://www.syntevo.com/smartgit/">smartgit</a>, or you can stick to the command-line. I personally use <a href="https://github.com/dahlbyk/posh-git">posh-git</a>, which I find to be better than the basic git command-line. </p>
<p>So that we don&#8217;t get too side-tracked, here&#8217;s how I&#8217;m going to commit this via command-line:</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="text"><thead><tr><td colspan="2"  class="head">Text</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
</pre></td><td class="de1"><pre class="de1">git add -A
git commit -m &quot;Initial Commit&quot; -m &quot;ASP.Net Core 2 project with working MVC endpoint, README, and .gitignore&quot;</pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">git add -A
git commit -m "Initial Commit" -m "ASP.Net Core 2 project with working MVC endpoint, README, and .gitignore"</pre></div></div>

<h3>Third Party Git Repo: Github</h3>
<p>First, log into the git provider (in my case github) and create a repository. Once this is done, the service should give you instructions to connect and push your changes to that remote repository. They&#8217;ll look something like this:</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="text"><thead><tr><td colspan="2"  class="head">Text</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
</pre></td><td class="de1"><pre class="de1">git remote add origin git@your-provider.com:your-username/your-repo-name.git
git push -u origin master</pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">git remote add origin git@your-provider.com:your-username/your-repo-name.git
git push -u origin master</pre></div></div>

<div class="note-area">
You don&#8217;t have to use <code>origin</code> as the remote name, but it is a common convention that many providers build some assumptions around in their interface.
</div>
<p>We&#8217;re now safe from losing all your work on your local machine, task 2 is complete successfully!</p>
<h2>Task 3: Wire in Cosmos DB</h2>
<p>Now it&#8217;s time to figure out how to do some basic tasks with Cosmos DB. This will require obvious things like queries and inserting data, as well as less obvious tasks like figuring out where to record secrets for the local development environment, setting up a local emulator, and more (another reason we&#8217;re doing this in bite-size pieces, there&#8217;s always surprises).</p>
<div class="note-area">
You have the option of using a live Cosmos DB instance in Azure or using the emulator for local development. I prefer emulators for local development, but not all services include them.
</div>
<p>Download the emulator here: <a href="https://docs.microsoft.com/en-us/azure/cosmos-db/local-emulator">Cosmos DB Emulator</a></p>
<p>Next, I&#8217;m going to insist on creating a new project to house my database logic. In some cases this is too early to make architectural decisions like this, but I know from vast personal experience that I have never, ever enjoyed the experience of having this type of logic mixed into my ASP.Net project.</p>
<p>This new project is going to be called &#8220;SampleCosmosCore2App.Core&#8221;. If you haven&#8217;t added many projects to solutions, the usual procedure is:</p>
<ul>
<li>Right click the Solution and select &#8220;Add&#8221;, &#8220;New Project&#8221;</li>
<li>Select &#8220;Class Library (.NET Core)&#8221;</li>
<li>Give it a name and continue</li>
</ul>
<p>Then reference the new project from the ASP.Net one:</p>
<ul>
<li>Right click the MVC project</li>
<li>Select &#8220;Add&#8221;, &#8220;Reference&#8221; and check the box next to the &#8220;*.Core&#8221; project</li>
</ul>
<div id="attachment_9095" style="width: 610px" class="wp-caption aligncenter"><img src="/wp-content/uploads/2018/04/aspnetcore2cosmos_007-600x415.png" alt="ASP/.Net Core - Adding Project Reference" width="600" height="415" class="size-medium-width wp-image-9095" srcset="/wp-content/uploads/2018/04/aspnetcore2cosmos_007-600x415.png 600w, /wp-content/uploads/2018/04/aspnetcore2cosmos_007-300x207.png 300w, /wp-content/uploads/2018/04/aspnetcore2cosmos_007-768x531.png 768w, /wp-content/uploads/2018/04/aspnetcore2cosmos_007-434x300.png 434w, /wp-content/uploads/2018/04/aspnetcore2cosmos_007.png 794w" sizes="(max-width: 600px) 100vw, 600px" /><p class="wp-caption-text">ASP/.Net Core &#8211; Adding Project Reference</p></div>
<p>At this point, I don&#8217;t know what I don&#8217;t know, so my aim is simplistic, working logic. Once I get that far, I can start looking into repeatable and more production-ready patterns with the context of knowing some basics from my first pass. </p>
<div class="note-area">
The goal at this point is to complete a vertical slice, from UI down to back-end data store. I&#8217;m using sample data structures because this will be experimental work. Sample data structures help me learn the patterns I&#8217;ll use for real data structures, but are incredibly easy to tear out later to make sure I don&#8217;t leave behind technical debt from the exploratory stage.
</div>
<p>I&#8217;m going to work with a data class named <code>Sample</code>, so I&#8217;ll create a <code>Sample.cs</code> class file and a <code>Persistence.cs</code> class file. The first will be a serializable document, the second the class that handles reading and writing that document to Cosmos DB.</p>
<p>Add the Microsoft.Azure.DocumentDB.Core nuget package to your &#8220;*.Core&#8221; project:</p>
<div id="attachment_9096" style="width: 528px" class="wp-caption aligncenter"><img src="/wp-content/uploads/2018/04/aspnetcore2cosmos_008.png" alt="Add Microsoft.Azure.DocumentDB.Core package" width="518" height="83" class="size-full wp-image-9096" srcset="/wp-content/uploads/2018/04/aspnetcore2cosmos_008.png 518w, /wp-content/uploads/2018/04/aspnetcore2cosmos_008-300x48.png 300w" sizes="(max-width: 518px) 100vw, 518px" /><p class="wp-caption-text">Add Microsoft.Azure.DocumentDB.Core package</p></div>
<p>Right click the &#8220;Dependencies&#8221; folder of the &#8220;*.Core&#8221; project and search for it, or use the Package Manager Console and type <code>Install-Package Microsoft.Azure.DocumentDB.Core SampleCosmosCore2App.Core</code> (use your project name, not mine).</p>
<p>Next, in the <code>SamplePersistence</code> object, we&#8217;ll add functions to setup the Sample <code>DocumentCollection</code> in Cosmos and perform common CRUD operations for documents in that collection:</p>
<p><a href="https://github.com/tarwn/Sample_ASPNetCore2AndCosmosDB/blob/Post-%231/SampleCosmosCore2App.Core/Persistence.cs">SampleCosmosCore2App.Core/Persistence.cs</a></p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="csharp"><thead><tr><td colspan="2"  class="head">C#</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
</pre></td><td class="de1"><pre class="de1"><span class="co1">// ...</span>
&nbsp;
<span class="kw1">public</span> Persistence<span class="br0">&#40;</span>Uri endpointUri, <span class="kw4">string</span> primaryKey<span class="br0">&#41;</span>
<span class="br0">&#123;</span>
&nbsp; &nbsp; _databaseId <span class="sy0">=</span> <span class="st0">&quot;QuoteServiceDB&quot;</span><span class="sy0">;</span>
&nbsp; &nbsp; _endpointUri <span class="sy0">=</span> endpointUri<span class="sy0">;</span>
&nbsp; &nbsp; _primaryKey <span class="sy0">=</span> primaryKey<span class="sy0">;</span>
<span class="br0">&#125;</span>
&nbsp;
<span class="kw1">public</span> async Task EnsureSetupAsync<span class="br0">&#40;</span><span class="br0">&#41;</span>
<span class="br0">&#123;</span>
&nbsp; &nbsp; <span class="kw1">if</span> <span class="br0">&#40;</span>_client <span class="sy0">==</span> <span class="kw1">null</span><span class="br0">&#41;</span>
&nbsp; &nbsp; <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; _client <span class="sy0">=</span> <span class="kw3">new</span> DocumentClient<span class="br0">&#40;</span>_endpointUri, _primaryKey<span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp;
&nbsp; &nbsp; await _client<span class="sy0">.</span><span class="me1">CreateDatabaseIfNotExistsAsync</span><span class="br0">&#40;</span><span class="kw3">new</span> Database <span class="br0">&#123;</span> Id <span class="sy0">=</span> _databaseId <span class="br0">&#125;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; <span class="kw1">var</span> databaseUri <span class="sy0">=</span> UriFactory<span class="sy0">.</span><span class="me1">CreateDatabaseUri</span><span class="br0">&#40;</span>_databaseId<span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; <span class="co1">// Samples</span>
&nbsp; &nbsp; await _client<span class="sy0">.</span><span class="me1">CreateDocumentCollectionIfNotExistsAsync</span><span class="br0">&#40;</span>databaseUri, <span class="kw3">new</span> DocumentCollection<span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span> Id <span class="sy0">=</span> <span class="st0">&quot;SamplesCollection&quot;</span> <span class="br0">&#125;</span><span class="br0">&#41;</span><span class="sy0">;</span>
<span class="br0">&#125;</span>
&nbsp;
<span class="co1">// ...</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">// ...

public Persistence(Uri endpointUri, string primaryKey)
{
    _databaseId = "QuoteServiceDB";
    _endpointUri = endpointUri;
    _primaryKey = primaryKey;
}

public async Task EnsureSetupAsync()
{
    if (_client == null)
    {
        _client = new DocumentClient(_endpointUri, _primaryKey);
    }

    await _client.CreateDatabaseIfNotExistsAsync(new Database { Id = _databaseId });
    var databaseUri = UriFactory.CreateDatabaseUri(_databaseId);

    // Samples
    await _client.CreateDocumentCollectionIfNotExistsAsync(databaseUri, new DocumentCollection() { Id = "SamplesCollection" });
}

// ...</pre></div></div>

<div class="note-area">If you&#8217;re not familiar with Document Databases, you can think of this DocumentCollection as a table, except instead of a single row that fits a very strict schema we can add any structured document we want and search against them later, letting the database handle the heavy lifting if we have vastly different and/or deep document structures.
</div>
<p>And a data object like so:</p>
<p><a href="https://github.com/tarwn/Sample_ASPNetCore2AndCosmosDB/blob/Post-%231/SampleCosmosCore2App.Core/Sample.cs">SampleCosmosCore2App.Core/Sample.cs</a></p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="csharp"><thead><tr><td colspan="2"  class="head">C#</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
</pre></td><td class="de1"><pre class="de1"><span class="kw1">public</span> <span class="kw4">class</span> Sample
<span class="br0">&#123;</span>
&nbsp; &nbsp; <span class="br0">&#91;</span>JsonProperty<span class="br0">&#40;</span>PropertyName <span class="sy0">=</span> <span class="st0">&quot;id&quot;</span><span class="br0">&#41;</span><span class="br0">&#93;</span>
&nbsp; &nbsp; <span class="kw1">public</span> <span class="kw4">string</span> Id <span class="br0">&#123;</span> <span class="kw1">get</span><span class="sy0">;</span> <span class="kw1">set</span><span class="sy0">;</span> <span class="br0">&#125;</span>
&nbsp;
&nbsp; &nbsp; <span class="kw1">public</span> <span class="kw4">string</span> Content <span class="br0">&#123;</span> <span class="kw1">get</span><span class="sy0">;</span> <span class="kw1">set</span><span class="sy0">;</span> <span class="br0">&#125;</span>
<span class="br0">&#125;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">public class Sample
{
    [JsonProperty(PropertyName = "id")]
    public string Id { get; set; }

    public string Content { get; set; }
}</pre></div></div>

<p>Each document in Cosmos DB will have an <code>id</code> property and, by default, it will generate that id value for us when we add a new document. </p>
<div class="note-area">
The <code>JsonProperty</code> above: Cosmos DB serializes with the same case you use in your call, by default. We want this <code>Id</code> to bind to the one Cosmos DB will create on the document, so we tell it to serialize/deserialize <code>Id</code> as <code>id</code>. Alternatively, you can override the default casing with JsonSerializerSettings via the <a href="https://docs.microsoft.com/en-us/dotnet/api/microsoft.azure.documents.client.documentclient.-ctor?view=azure-dotnet#Microsoft_Azure_Documents_Client_DocumentClient__ctor_System_Uri_System_String_Newtonsoft_Json_JsonSerializerSettings_Microsoft_Azure_Documents_Client_ConnectionPolicy_System_Nullable_Microsoft_Azure_Documents_ConsistencyLevel__" title="MSDN: DocumentClient Constructor">DocumentClient constructor</a>to set <a href="https://www.newtonsoft.com/json/help/html/NamingStrategyCamelCase.htm">JSON.Net&#8217;s NamingStrategy</a> for the SDK client.
</div>
<p>Returning to the <code>Persistence</code> class, we&#8217;ll add some basic CRUD operations to Save, Get, and Get All:</p>
<p><a href="https://github.com/tarwn/Sample_ASPNetCore2AndCosmosDB/blob/Post-%231/SampleCosmosCore2App.Core/Persistence.cs">SampleCosmosCore2App.Core/Persistence.cs</a></p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="csharp"><thead><tr><td colspan="2"  class="head">C#</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
</pre></td><td class="de1"><pre class="de1"><span class="co1">// ...</span>
&nbsp;
<span class="kw1">public</span> async Task SaveSampleAsync<span class="br0">&#40;</span>Sample sample<span class="br0">&#41;</span>
<span class="br0">&#123;</span>
&nbsp; &nbsp; await EnsureSetupAsync<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; <span class="kw1">var</span> documentCollectionUri <span class="sy0">=</span> UriFactory<span class="sy0">.</span><span class="me1">CreateDocumentCollectionUri</span><span class="br0">&#40;</span>_databaseId, <span class="st0">&quot;SamplesCollection&quot;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; await _client<span class="sy0">.</span><span class="me1">UpsertDocumentAsync</span><span class="br0">&#40;</span>documentCollectionUri, sample<span class="br0">&#41;</span><span class="sy0">;</span>
<span class="br0">&#125;</span>
&nbsp;
<span class="kw1">public</span> async Task<span class="sy0">&lt;</span>Sample<span class="sy0">&gt;</span> GetSampleAsync<span class="br0">&#40;</span><span class="kw4">string</span> Id<span class="br0">&#41;</span>
<span class="br0">&#123;</span>
&nbsp; &nbsp; await EnsureSetupAsync<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; <span class="kw1">var</span> documentUri <span class="sy0">=</span> UriFactory<span class="sy0">.</span><span class="me1">CreateDocumentUri</span><span class="br0">&#40;</span>_databaseId, <span class="st0">&quot;SamplesCollection&quot;</span>, Id<span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; <span class="kw1">var</span> result <span class="sy0">=</span> await _client<span class="sy0">.</span><span class="me1">ReadDocumentAsync</span><span class="sy0">&lt;</span>Sample<span class="sy0">&gt;</span><span class="br0">&#40;</span>documentUri<span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; <span class="kw1">return</span> result<span class="sy0">.</span><span class="me1">Document</span><span class="sy0">;</span>
<span class="br0">&#125;</span>
&nbsp;
<span class="kw1">public</span> async Task<span class="sy0">&lt;</span>List<span class="sy0">&lt;</span>Sample<span class="sy0">&gt;&gt;</span> GetSamplesAsync<span class="br0">&#40;</span><span class="br0">&#41;</span>
<span class="br0">&#123;</span>
&nbsp; &nbsp; await EnsureSetupAsync<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; <span class="kw1">var</span> documentCollectionUri <span class="sy0">=</span> UriFactory<span class="sy0">.</span><span class="me1">CreateDocumentCollectionUri</span><span class="br0">&#40;</span>_databaseId, <span class="st0">&quot;SamplesCollection&quot;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; <span class="co1">// build the query</span>
&nbsp; &nbsp; <span class="kw1">var</span> feedOptions <span class="sy0">=</span> <span class="kw3">new</span> FeedOptions<span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span> MaxItemCount <span class="sy0">=</span> <span class="sy0">-</span><span class="nu0">1</span> <span class="br0">&#125;</span><span class="sy0">;</span>
&nbsp; &nbsp; <span class="kw1">var</span> query <span class="sy0">=</span> _client<span class="sy0">.</span><span class="me1">CreateDocumentQuery</span><span class="sy0">&lt;</span>Sample<span class="sy0">&gt;</span><span class="br0">&#40;</span>documentCollectionUri, <span class="st0">&quot;SELECT * FROM Sample&quot;</span>, feedOptions<span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; <span class="kw1">var</span> queryAll <span class="sy0">=</span> query<span class="sy0">.</span><span class="me1">AsDocumentQuery</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; <span class="co1">// combine the results</span>
&nbsp; &nbsp; <span class="kw1">var</span> results <span class="sy0">=</span> <span class="kw3">new</span> List<span class="sy0">&lt;</span>Sample<span class="sy0">&gt;</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; <span class="kw1">while</span> <span class="br0">&#40;</span>queryAll<span class="sy0">.</span><span class="me1">HasMoreResults</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; results<span class="sy0">.</span><span class="me1">AddRange</span><span class="br0">&#40;</span>await queryAll<span class="sy0">.</span><span class="me1">ExecuteNextAsync</span><span class="sy0">&lt;</span>Sample<span class="sy0">&gt;</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp;
&nbsp; &nbsp; <span class="kw1">return</span> results<span class="sy0">;</span>
<span class="br0">&#125;</span>
&nbsp;
<span class="co1">// ...</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">// ...

public async Task SaveSampleAsync(Sample sample)
{
    await EnsureSetupAsync();

    var documentCollectionUri = UriFactory.CreateDocumentCollectionUri(_databaseId, "SamplesCollection");
    await _client.UpsertDocumentAsync(documentCollectionUri, sample);
}

public async Task&lt;Sample&gt; GetSampleAsync(string Id)
{
    await EnsureSetupAsync();

    var documentUri = UriFactory.CreateDocumentUri(_databaseId, "SamplesCollection", Id);
    var result = await _client.ReadDocumentAsync&lt;Sample&gt;(documentUri);
    return result.Document;
}

public async Task&lt;List&lt;Sample&gt;&gt; GetSamplesAsync()
{
    await EnsureSetupAsync();

    var documentCollectionUri = UriFactory.CreateDocumentCollectionUri(_databaseId, "SamplesCollection");

    // build the query
    var feedOptions = new FeedOptions() { MaxItemCount = -1 };
    var query = _client.CreateDocumentQuery&lt;Sample&gt;(documentCollectionUri, "SELECT * FROM Sample", feedOptions);
    var queryAll = query.AsDocumentQuery();

    // combine the results
    var results = new List&lt;Sample&gt;();
    while (queryAll.HasMoreResults) {
        results.AddRange(await queryAll.ExecuteNextAsync&lt;Sample&gt;());
    }

    return results;
}

// ...</pre></div></div>

<p>This provides all the persistence methods we need, now we can move up to the ASP.Net project and add in the Controller actions and views. Again, I&#8217;m in experimental mode, so I&#8217;m making sure the database and DocumentCollection exist on every call, but later I&#8217;ll find a better pattern for this.</p>
<p><a href="https://docs.microsoft.com/en-us/aspnet/core/fundamentals/dependency-injection">Dependency Injection</a> is built into ASP.Net Core, so to make an instance of this new <code>Persistence</code> class available to Controllers we can register it in <code>Startup.cs</code> like so:</p>
<p><a href="https://github.com/tarwn/Sample_ASPNetCore2AndCosmosDB/blob/Post-%231/SampleCosmosCore2App/Startup.cs#L29">SampleCosmosCore2App/Startup.cs</a></p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="csharp"><thead><tr><td colspan="2"  class="head">C#</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
</pre></td><td class="de1"><pre class="de1">services<span class="sy0">.</span><span class="me1">AddScoped</span><span class="sy0">&lt;</span>Persistence<span class="sy0">&gt;</span><span class="br0">&#40;</span><span class="br0">&#40;</span>s<span class="br0">&#41;</span> <span class="sy0">=&gt;</span>
<span class="br0">&#123;</span>
&nbsp; &nbsp; <span class="kw1">return</span> <span class="kw3">new</span> Persistence<span class="br0">&#40;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw3">new</span> Uri<span class="br0">&#40;</span>Configuration<span class="br0">&#91;</span><span class="st0">&quot;CosmosDB:URL&quot;</span><span class="br0">&#93;</span><span class="br0">&#41;</span>,
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Configuration<span class="br0">&#91;</span><span class="st0">&quot;CosmosDB:PrimaryKey&quot;</span><span class="br0">&#93;</span><span class="br0">&#41;</span><span class="sy0">;</span>
<span class="br0">&#125;</span><span class="br0">&#41;</span><span class="sy0">;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">services.AddScoped&lt;Persistence&gt;((s) =&gt;
{
    return new Persistence(
        new Uri(Configuration["CosmosDB:URL"]),
                Configuration["CosmosDB:PrimaryKey"]);
});</pre></div></div>

<p>Then in our local development config we&#8217;ll add the emulator URL and Primary Key:</p>
<p><a href="https://github.com/tarwn/Sample_ASPNetCore2AndCosmosDB/blob/Post-%231/SampleCosmosCore2App/appsettings.Development.json#L12">SampleCosmosCore2App/appsettings.Development.json</a></p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="javascript"><thead><tr><td colspan="2"  class="head">Javascript</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
</pre></td><td class="de1"><pre class="de1"><span class="br0">&#123;</span>
&nbsp; &nbsp;<span class="co1">// ...</span>
&nbsp;
&nbsp; <span class="st0">&quot;CosmosDB&quot;</span><span class="sy0">:</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; <span class="st0">&quot;URL&quot;</span><span class="sy0">:</span> <span class="st0">&quot;</span><span class="sy0">,</span>
&nbsp; &nbsp; <span class="st0">&quot;PrimaryKey&quot;</span><span class="sy0">:</span> <span class="st0">&quot;C2y6yDjf5/R+ob0N8A7Cgv30VRDJIWEHLM+4QDU5DE2nQ9nDuVTqobD4b8mGGyPMbIZnqyMsEcaGQy67XIw/Jw==&quot;</span>
&nbsp; <span class="br0">&#125;</span>
<span class="br0">&#125;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">{
   // ...

  "CosmosDB": {
    "URL": "https://localhost:8081/",
    "PrimaryKey": "C2y6yDjf5/R+ob0N8A7Cgv30VRDJIWEHLM+4QDU5DE2nQ9nDuVTqobD4b8mGGyPMbIZnqyMsEcaGQy67XIw/Jw=="
  }
}</pre></div></div>

<p>I&#8217;ve used a <a href="https://docs.microsoft.com/en-us/aspnet/core/fundamentals/dependency-injection" title="MSDN: ASP.Net Core Dependency Injection">Scoped</a> service so that a fresh Persistence object will be created for each Request. This will result in a fresh DocumentClient created on each request further down the stack, which is a safe starting point when I&#8217;m working with something new that I haven&#8217;t dug too deep on yet.</p>
<div class="note-area">
Later on, we&#8217;ll start taking a more real approach to this and find out that Microsoft <a href="https://azure.microsoft.com/en-us/blog/performance-tips-for-azure-documentdb-part-1-2/">provides performance guidance</a> that says we should instead create this as a singleton.
</div>
<p>Next, we need Controller Actions to show the list of Sample values, Create a new one, Edit one, and Post edited contents to be saved. To keep this simple, we can wire these to two Views: a list of all of the items and an editable display of one.</p>
<p><a href="https://github.com/tarwn/Sample_ASPNetCore2AndCosmosDB/blob/Post-%231/SampleCosmosCore2App/Controllers/HomeController.cs#L21">SampleCosmosCore2App/Controllers/HomeController</a></p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="csharp"><thead><tr><td colspan="2"  class="head">C#</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
</pre></td><td class="de1"><pre class="de1"><span class="br0">&#91;</span>Route<span class="br0">&#40;</span><span class="st0">&quot;&quot;</span><span class="br0">&#41;</span><span class="br0">&#93;</span>
<span class="kw1">public</span> <span class="kw4">class</span> HomeController <span class="sy0">:</span> Controller
<span class="br0">&#123;</span>
&nbsp; &nbsp; <span class="kw1">private</span> Persistence _persistence<span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; <span class="kw1">public</span> HomeController<span class="br0">&#40;</span>Persistence persistence<span class="br0">&#41;</span>
&nbsp; &nbsp; <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; _persistence <span class="sy0">=</span> persistence<span class="sy0">;</span>
&nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp;
&nbsp; &nbsp; <span class="br0">&#91;</span>HttpGet<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#93;</span>
&nbsp; &nbsp; <span class="kw1">public</span> async Task<span class="sy0">&lt;</span>IActionResult<span class="sy0">&gt;</span> IndexAsync<span class="br0">&#40;</span><span class="br0">&#41;</span>
&nbsp; &nbsp; <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">var</span> samples <span class="sy0">=</span> await _persistence<span class="sy0">.</span><span class="me1">GetSamplesAsync</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">return</span> View<span class="br0">&#40;</span><span class="st0">&quot;Index&quot;</span>, samples<span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp;
&nbsp; &nbsp; <span class="br0">&#91;</span>HttpGet<span class="br0">&#40;</span><span class="st0">&quot;Create&quot;</span><span class="br0">&#41;</span><span class="br0">&#93;</span>
&nbsp; &nbsp; <span class="kw1">public</span> IActionResult Create<span class="br0">&#40;</span><span class="br0">&#41;</span>
&nbsp; &nbsp; <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">var</span> sample <span class="sy0">=</span> <span class="kw3">new</span> Sample<span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span> <span class="br0">&#125;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">return</span> View<span class="br0">&#40;</span><span class="st0">&quot;Get&quot;</span>, sample<span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp;
&nbsp; &nbsp; <span class="br0">&#91;</span>HttpGet<span class="br0">&#40;</span><span class="st0">&quot;{id}&quot;</span><span class="br0">&#41;</span><span class="br0">&#93;</span>
&nbsp; &nbsp; <span class="kw1">public</span> async Task<span class="sy0">&lt;</span>IActionResult<span class="sy0">&gt;</span> GetAsync<span class="br0">&#40;</span><span class="kw4">string</span> id<span class="br0">&#41;</span>
&nbsp; &nbsp; <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">var</span> sample <span class="sy0">=</span> await _persistence<span class="sy0">.</span><span class="me1">GetSampleAsync</span><span class="br0">&#40;</span>id<span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">return</span> View<span class="br0">&#40;</span><span class="st0">&quot;Get&quot;</span>, sample<span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp;
&nbsp; &nbsp; <span class="br0">&#91;</span>HttpPost<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#93;</span>
&nbsp; &nbsp; <span class="kw1">public</span> async Task<span class="sy0">&lt;</span>IActionResult<span class="sy0">&gt;</span> PostAsync<span class="br0">&#40;</span><span class="br0">&#91;</span>FromForm<span class="br0">&#93;</span> Sample sample<span class="br0">&#41;</span>
&nbsp; &nbsp; <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; await _persistence<span class="sy0">.</span><span class="me1">SaveSampleAsync</span><span class="br0">&#40;</span>sample<span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">return</span> RedirectToAction<span class="br0">&#40;</span><span class="st0">&quot;IndexAsync&quot;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; <span class="br0">&#125;</span>
<span class="br0">&#125;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">[Route("")]
public class HomeController : Controller
{
    private Persistence _persistence;

    public HomeController(Persistence persistence)
    {
        _persistence = persistence;
    }

    [HttpGet()]
    public async Task&lt;IActionResult&gt; IndexAsync()
    {
        var samples = await _persistence.GetSamplesAsync();
        return View("Index", samples);
    }

    [HttpGet("Create")]
    public IActionResult Create()
    {
        var sample = new Sample() { };
        return View("Get", sample);
    }

    [HttpGet("{id}")]
    public async Task&lt;IActionResult&gt; GetAsync(string id)
    {
        var sample = await _persistence.GetSampleAsync(id);
        return View("Get", sample);
    }

    [HttpPost()]
    public async Task&lt;IActionResult&gt; PostAsync([FromForm] Sample sample)
    {
        await _persistence.SaveSampleAsync(sample);
        return RedirectToAction("IndexAsync");
    }
}</pre></div></div>

<p>Here are the notable changes:</p>
<ul>
<li>We&#8217;ve added <code>Persistence</code> as a necessary dependency in the Controller</li>
<li>We&#8217;ve switched all Actions to <code>async</code> to support the <code>Persistence</code> methods</li>
<li><code>IndexAsync</code> gets the list of <code>Sample</code>s and displays them in the &#8220;Index&#8221; view</li>
<li><code>Create</code> constructs a new <code>Sample</code> and displays it in the editable &#8220;Get&#8221; view</li>
<li><code>GetAsync</code> does the same thing, but loads the <code>Sample</code> from <code>Persistence</code> for the passed <code>{id}</code> in the route</li>
<li><code>PostAsync</code> accepts a modified <code>Sample</code>, saves it via <code>Persistence</code>, and redirects back to showing the whole list</li>
</ul>
<p>You can easily generate a scaffolded view for these by right-clicking in an Action above and selecting &#8220;New View&#8221;. Pick the <code>List</code> or <code>Edit</code> templates as a starting point, with the model class set to the Sample object.</p>
<p>Because we started from a blank slate, these templates won&#8217;t work directly out of the box (<a href="https://stackoverflow.com/questions/38797393/asp-controller-and-asp-action-attributes-not-working">stackoverflow</a>). Add a file _ViewImports.cshtml to register the tag helpers:</p>
<p><a href="https://github.com/tarwn/Sample_ASPNetCore2AndCosmosDB/blob/Post-%231/SampleCosmosCore2App/Views/_ViewImports.cshtml">SampleCosmosCore2App/Views/_ViewImports.cshtml</a></p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="csharp"><thead><tr><td colspan="2"  class="head">C#</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
</pre></td><td class="de1"><pre class="de1">@addTagHelper <span class="sy0">*</span>, Microsoft<span class="sy0">.</span><span class="me1">AspNetCore</span><span class="sy0">.</span><span class="me1">Mvc</span><span class="sy0">.</span><span class="me1">TagHelpers</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">@addTagHelper *, Microsoft.AspNetCore.Mvc.TagHelpers</pre></div></div>

<p>The scaffolded views also assume we&#8217;re using bootstrap and include 2-3x more HTML than we actually need, so we can trim them down quite a bit:</p>
<p><a href="https://github.com/tarwn/Sample_ASPNetCore2AndCosmosDB/blob/Post-%231/SampleCosmosCore2App/Views/Home/Get.cshtml">SampleCosmosCore2App/Views/Get.cshtml</a></p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="html4strict"><thead><tr><td colspan="2"  class="head">HTML</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
</pre></td><td class="de1"><pre class="de1">@model SampleCosmosCore2App.Core.Sample
&nbsp;
@{
&nbsp; &nbsp; ViewData[&quot;Title&quot;] = &quot;GetAsync&quot;;
&nbsp; &nbsp; Layout = &quot;~/Views/_Shared/Layout.cshtml&quot;;
}
&nbsp;
<span class="sc2">&lt;<span class="kw2">h2</span>&gt;</span>Sample<span class="sc2">&lt;<span class="sy0">/</span><span class="kw2">h2</span>&gt;</span>
&nbsp;
<span class="sc2">&lt;<span class="kw2">form</span> asp-<span class="kw3">action</span><span class="sy0">=</span><span class="st0">&quot;PostAsync&quot;</span>&gt;</span>
&nbsp; &nbsp; Id: &nbsp;@Model.Id <span class="sc2">&lt;<span class="kw2">input</span> asp-<span class="kw3">for</span><span class="sy0">=</span><span class="st0">&quot;Id&quot;</span> <span class="kw3">type</span><span class="sy0">=</span><span class="st0">&quot;hidden&quot;</span> <span class="sy0">/</span>&gt;&lt;<span class="kw2">br</span> <span class="sy0">/</span>&gt;</span>
&nbsp; &nbsp; Content: <span class="sc2">&lt;<span class="kw2">input</span> asp-<span class="kw3">for</span><span class="sy0">=</span><span class="st0">&quot;Content&quot;</span> <span class="sy0">/</span>&gt;&lt;<span class="kw2">br</span> <span class="sy0">/</span>&gt;</span>
&nbsp; &nbsp; <span class="sc2">&lt;<span class="kw2">input</span> <span class="kw3">type</span><span class="sy0">=</span><span class="st0">&quot;submit&quot;</span> <span class="kw3">value</span><span class="sy0">=</span><span class="st0">&quot;Save&quot;</span> <span class="sy0">/</span>&gt;</span>
<span class="sc2">&lt;<span class="sy0">/</span><span class="kw2">form</span>&gt;</span>
&nbsp;
<span class="sc2">&lt;<span class="kw2">a</span> asp-<span class="kw3">action</span><span class="sy0">=</span><span class="st0">&quot;IndexAsync&quot;</span>&gt;</span>Back to List<span class="sc2">&lt;<span class="sy0">/</span><span class="kw2">a</span>&gt;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">@model SampleCosmosCore2App.Core.Sample

@{
    ViewData["Title"] = "GetAsync";
    Layout = "~/Views/_Shared/Layout.cshtml";
}

&lt;h2&gt;Sample&lt;/h2&gt;

&lt;form asp-action="PostAsync"&gt;
    Id:  @Model.Id &lt;input asp-for="Id" type="hidden" /&gt;&lt;br /&gt;
    Content: &lt;input asp-for="Content" /&gt;&lt;br /&gt;
    &lt;input type="submit" value="Save" /&gt;
&lt;/form&gt;

&lt;a asp-action="IndexAsync"&gt;Back to List&lt;/a&gt;</pre></div></div>

<p><a href="https://github.com/tarwn/Sample_ASPNetCore2AndCosmosDB/blob/Post-%231/SampleCosmosCore2App/Views/Home/Index.cshtml">SampleCosmosCore2App/Views/Index.cshtml</a></p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="csharp"><thead><tr><td colspan="2"  class="head">C#</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
</pre></td><td class="de1"><pre class="de1">@model IEnumerable<span class="sy0">&lt;</span>SampleCosmosCore2App<span class="sy0">.</span><span class="me1">Core</span><span class="sy0">.</span><span class="me1">Sample</span><span class="sy0">&gt;</span>
&nbsp;
@<span class="br0">&#123;</span>
&nbsp; &nbsp; ViewData<span class="br0">&#91;</span><span class="st0">&quot;Title&quot;</span><span class="br0">&#93;</span> <span class="sy0">=</span> <span class="st0">&quot;View&quot;</span><span class="sy0">;</span>
&nbsp; &nbsp; Layout <span class="sy0">=</span> <span class="st0">&quot;~/Views/_Shared/Layout.cshtml&quot;</span><span class="sy0">;</span>
<span class="br0">&#125;</span>
&nbsp;
<span class="sy0">&lt;</span>h2<span class="sy0">&gt;</span>View<span class="sy0">&lt;/</span>h2<span class="sy0">&gt;</span>
&nbsp;
<span class="sy0">&lt;</span>p<span class="sy0">&gt;</span>
&nbsp; &nbsp; <span class="sy0">&lt;</span>a asp<span class="sy0">-</span>action<span class="sy0">=</span><span class="st0">&quot;Create&quot;</span><span class="sy0">&gt;</span>Create <span class="kw3">New</span><span class="sy0">&lt;/</span>a<span class="sy0">&gt;</span>
<span class="sy0">&lt;/</span>p<span class="sy0">&gt;</span>
<span class="sy0">&lt;</span>table <span class="kw4">class</span><span class="sy0">=</span><span class="st0">&quot;table&quot;</span><span class="sy0">&gt;</span>
&nbsp; &nbsp; <span class="sy0">&lt;</span>thead<span class="sy0">&gt;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="sy0">&lt;</span>tr<span class="sy0">&gt;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="sy0">&lt;</span>th<span class="sy0">&gt;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; @Html<span class="sy0">.</span><span class="me1">DisplayNameFor</span><span class="br0">&#40;</span>model <span class="sy0">=&gt;</span> model<span class="sy0">.</span><span class="me1">Id</span><span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="sy0">&lt;/</span>th<span class="sy0">&gt;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="sy0">&lt;</span>th<span class="sy0">&gt;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; @Html<span class="sy0">.</span><span class="me1">DisplayNameFor</span><span class="br0">&#40;</span>model <span class="sy0">=&gt;</span> model<span class="sy0">.</span><span class="me1">Content</span><span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="sy0">&lt;/</span>th<span class="sy0">&gt;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="sy0">&lt;</span>th<span class="sy0">&gt;&lt;/</span>th<span class="sy0">&gt;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="sy0">&lt;/</span>tr<span class="sy0">&gt;</span>
&nbsp; &nbsp; <span class="sy0">&lt;/</span>thead<span class="sy0">&gt;</span>
&nbsp; &nbsp; <span class="sy0">&lt;</span>tbody<span class="sy0">&gt;</span>
&nbsp; &nbsp; &nbsp; &nbsp; @<span class="kw1">foreach</span> <span class="br0">&#40;</span><span class="kw1">var</span> item <span class="kw1">in</span> Model<span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="sy0">&lt;</span>tr<span class="sy0">&gt;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="sy0">&lt;</span>td<span class="sy0">&gt;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; @Html<span class="sy0">.</span><span class="me1">DisplayFor</span><span class="br0">&#40;</span>modelItem <span class="sy0">=&gt;</span> item<span class="sy0">.</span><span class="me1">Id</span><span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="sy0">&lt;/</span>td<span class="sy0">&gt;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="sy0">&lt;</span>td<span class="sy0">&gt;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; @Html<span class="sy0">.</span><span class="me1">DisplayFor</span><span class="br0">&#40;</span>modelItem <span class="sy0">=&gt;</span> item<span class="sy0">.</span><span class="me1">Content</span><span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="sy0">&lt;/</span>td<span class="sy0">&gt;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="sy0">&lt;</span>td<span class="sy0">&gt;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; @Html<span class="sy0">.</span><span class="me1">ActionLink</span><span class="br0">&#40;</span><span class="st0">&quot;Edit&quot;</span>, <span class="st0">&quot;GetAsync&quot;</span>, <span class="kw3">new</span> <span class="br0">&#123;</span> id<span class="sy0">=</span>item<span class="sy0">.</span><span class="me1">Id</span> <span class="br0">&#125;</span><span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="sy0">&lt;/</span>td<span class="sy0">&gt;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="sy0">&lt;/</span>tr<span class="sy0">&gt;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp; &nbsp; <span class="sy0">&lt;/</span>tbody<span class="sy0">&gt;</span>
<span class="sy0">&lt;/</span>table<span class="sy0">&gt;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">@model IEnumerable&lt;SampleCosmosCore2App.Core.Sample&gt;

@{
    ViewData["Title"] = "View";
    Layout = "~/Views/_Shared/Layout.cshtml";
}

&lt;h2&gt;View&lt;/h2&gt;

&lt;p&gt;
    &lt;a asp-action="Create"&gt;Create New&lt;/a&gt;
&lt;/p&gt;
&lt;table class="table"&gt;
    &lt;thead&gt;
        &lt;tr&gt;
            &lt;th&gt;
                @Html.DisplayNameFor(model =&gt; model.Id)
            &lt;/th&gt;
            &lt;th&gt;
                @Html.DisplayNameFor(model =&gt; model.Content)
            &lt;/th&gt;
            &lt;th&gt;&lt;/th&gt;
        &lt;/tr&gt;
    &lt;/thead&gt;
    &lt;tbody&gt;
        @foreach (var item in Model)
        {
            &lt;tr&gt;
                &lt;td&gt;
                    @Html.DisplayFor(modelItem =&gt; item.Id)
                &lt;/td&gt;
                &lt;td&gt;
                    @Html.DisplayFor(modelItem =&gt; item.Content)
                &lt;/td&gt;
                &lt;td&gt;
                    @Html.ActionLink("Edit", "GetAsync", new { id=item.Id })
                &lt;/td&gt;
            &lt;/tr&gt;
        }
    &lt;/tbody&gt;
&lt;/table&gt;</pre></div></div>

<p>And now we have a very simple CRUD interface:</p>
<div id="attachment_9097" style="width: 419px" class="wp-caption aligncenter"><img src="/wp-content/uploads/2018/04/aspnetcore2cosmos_009.png" alt="ASP.Net Core 2 - Basic CRUD Interface to Cosmos DB" width="409" height="215" class="size-full wp-image-9097" srcset="/wp-content/uploads/2018/04/aspnetcore2cosmos_009.png 409w, /wp-content/uploads/2018/04/aspnetcore2cosmos_009-300x158.png 300w" sizes="(max-width: 409px) 100vw, 409px" /><p class="wp-caption-text">ASP.Net Core 2 &#8211; Basic CRUD Interface to Cosmos DB</p></div>
<p>Add and edit some items to make sure it&#8217;s working, then commit the changes to lock it in. We now have a complete vertical slice from the UI down to the Cosmos DB store!</p>
<h2>Looking Forward</h2>
<p>Almost none of this code will likely live to still be in the final app, but we&#8217;ve completed several steps forward:</p>
<ul>
<li>We can serve up HTML and API content</li>
<li>We&#8217;ve got some basic CRUD logic with Cosmos DB</li>
<li>We have source control and a basic README</li>
</ul>
<p>Next we&#8217;ll add general login and registration capabilities. This will continue the foundation by helping us figure out Authentication for the system, but also add some real data needs to our Cosmos DB so we can start identifying a good pattern for that persistence logic.</p>
]]></content>
			<link rel="replies" type="text/html" href="/index.php/webdev/serverprogramming/aspnet/asp-net-core-2-w-cosmosdb-getting-started/#comments" thr:count="0"/>
		<link rel="replies" type="application/atom+xml" href="/index.php/webdev/serverprogramming/aspnet/asp-net-core-2-w-cosmosdb-getting-started/feed/atom/" thr:count="0"/>
		<thr:total>0</thr:total>
		</entry>
		<entry>
		<author>
			<name>Eli Weinstock-Herman (tarwn)</name>
					</author>
		<title type="html"><![CDATA[Custom Authentication in ASP.Net Core 1 (without Identity)]]></title>
		<link rel="alternate" type="text/html" href="/index.php/webdev/serverprogramming/aspnet/custom-authentication-in-asp-net-core-without-identity/" />
		<id>/?p=8790</id>
		<updated>2018-04-17T01:17:30Z</updated>
		<published>2017-09-08T11:59:48Z</published>
		<category scheme="/" term="ASP.NET" /><category scheme="/" term="asp.net core" /><category scheme="/" term="authentication" /><category scheme="/" term="bcrypt" />		<summary type="html"><![CDATA[Performing Authentication and Authorization has changed from ASP.Net to ASP.Net Core. Rather than relying on attributes, ASP.Net Core uses middleware similar to NancyFX and Rails. This is a short, step-by-step approach to implementing custom Authentication in ASP.Net Core without the overhead (and assumptions) of the new Identity model. The goal is to support basic necessities [&#8230;]]]></summary>
		<content type="html" xml:base="/index.php/webdev/serverprogramming/aspnet/custom-authentication-in-asp-net-core-without-identity/"><![CDATA[<p>Performing Authentication and Authorization has changed from ASP.Net to ASP.Net Core. Rather than relying on attributes, ASP.Net Core uses middleware similar to NancyFX and Rails. This is a short, step-by-step approach to implementing custom Authentication in ASP.Net Core without the overhead (and assumptions) of the new Identity model. </p>
<p>The goal is to support basic necessities like a Login page with cookie-based authentication tickets that properly require HTTPS in production, but gracefully fail back to HTTP in local development.</p>
<h2>Cookie Middleware</h2>
<p>ASP.Net Core has Cookie Middleware we can use out of the box: <a href="https://docs.microsoft.com/en-us/aspnet/core/security/authentication/cookie" title="Using Cookie Authentication without ASP.NET Core Identity">Using Cookie Authentication without ASP.NET Core Identity</a></p>
<div style="border: 1px solid #EEBBBB; border-left: 16px solid #EEBBBB; padding: 1em">
<div style="color: #883333; font-weight: bold">
Warning: This only applies for ASP.Net Core 1.0, not 2.0.
</div>
<p>ASP.Net Core 2.0 has pivoted authentication in a different direction, ASP.Net Core 2 Custom Authentication is covered in a <a href="/index.php/webdev/serverprogramming/aspnet/custom-authentication-in-asp-net-core-2-w-cosmos-db/">newer post</a>.
</div>
<p>This middleware provides support for a number of things we want: directing unauthenticated users to a LoginPath, redirecting access denied requests, authentication tickets with sliding expirations and encryption, and hooks to tie into the process for additional custom logic.</p>
<p>Add the Cookie Authentication middleware in the Startup.Configure method:</p>
<p><b>APIProject/Startup.cs</b></p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="csharp"><thead><tr><td colspan="2"  class="head">C#</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
</pre></td><td class="de1"><pre class="de1">&nbsp;<span class="kw1">public</span> <span class="kw4">void</span> Configure<span class="br0">&#40;</span>IApplicationBuilder app, IHostingEnvironment env, ILoggerFactory loggerFactory<span class="br0">&#41;</span>
<span class="br0">&#123;</span>
&nbsp; &nbsp; <span class="co1">// ... other setup ...</span>
&nbsp;
&nbsp; &nbsp; app<span class="sy0">.</span><span class="me1">UseCookieAuthentication</span><span class="br0">&#40;</span><span class="kw3">new</span> CookieAuthenticationOptions<span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; <span class="co1">// A string to identify the authentication scheme we used, useful for filtering in Authorize attributes</span>
&nbsp; &nbsp; &nbsp; &nbsp; AuthenticationScheme <span class="sy0">=</span> <span class="st0">&quot;NAME_OF_YOUR_COOKIE_SCHEME&quot;</span>,
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; <span class="co1">// Location to send people too to log in</span>
&nbsp; &nbsp; &nbsp; &nbsp; LoginPath <span class="sy0">=</span> <span class="kw3">new</span> PathString<span class="br0">&#40;</span><span class="st0">&quot;/Account/Login&quot;</span><span class="br0">&#41;</span>,
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; <span class="co1">// Location to send people who fail to authenticate when required</span>
&nbsp; &nbsp; &nbsp; &nbsp; AccessDeniedPath <span class="sy0">=</span> <span class="kw3">new</span> PathString<span class="br0">&#40;</span><span class="st0">&quot;/Account/Forbidden&quot;</span><span class="br0">&#41;</span>,
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; <span class="co1">// Automatically check authentication on every call?</span>
&nbsp; &nbsp; &nbsp; &nbsp; AutomaticAuthenticate <span class="sy0">=</span> <span class="kw1">true</span>,
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; <span class="co1">// Challenge every request (enforce requirement to have this auth scheme if it got this far)</span>
&nbsp; &nbsp; &nbsp; &nbsp; AutomaticChallenge <span class="sy0">=</span> <span class="kw1">true</span>,
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; <span class="co1">// Expiration of the authentication ticket </span>
&nbsp; &nbsp; &nbsp; &nbsp; ExpireTimeSpan <span class="sy0">=</span> TimeSpan<span class="sy0">.</span><span class="me1">FromMinutes</span><span class="br0">&#40;</span><span class="nu0">30</span><span class="br0">&#41;</span>,
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; <span class="co1">// Update the timeout each time a new request comes in</span>
&nbsp; &nbsp; &nbsp; &nbsp; SlidingExpiration <span class="sy0">=</span> <span class="kw1">true</span>,
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; Events <span class="sy0">=</span> <span class="kw3">new</span> CookieAuthenticationEvents<span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="co1">// Overwrite the attempt to redirect API calls to login page w/ 401 response instead</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; OnRedirectToLogin <span class="sy0">=</span> <span class="br0">&#40;</span>ctx<span class="br0">&#41;</span> <span class="sy0">=&gt;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="co1">// return true 401 to API calls, continue redirect to login for interactive</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">if</span> <span class="br0">&#40;</span>ctx<span class="sy0">.</span><span class="me1">Request</span><span class="sy0">.</span><span class="me1">Path</span><span class="sy0">.</span><span class="me1">StartsWithSegments</span><span class="br0">&#40;</span><span class="st0">&quot;/api&quot;</span><span class="br0">&#41;</span> <span class="sy0">&amp;&amp;</span> ctx<span class="sy0">.</span><span class="me1">Response</span><span class="sy0">.</span><span class="me1">StatusCode</span> <span class="sy0">==</span> <span class="nu0">200</span><span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ctx<span class="sy0">.</span><span class="me1">Response</span><span class="sy0">.</span><span class="me1">StatusCode</span> <span class="sy0">=</span> <span class="nu0">401</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">return</span> Task<span class="sy0">.</span><span class="me1">FromResult</span><span class="sy0">&lt;</span><span class="kw4">object</span><span class="sy0">&gt;</span><span class="br0">&#40;</span><span class="kw1">null</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ctx<span class="sy0">.</span><span class="me1">Response</span><span class="sy0">.</span><span class="me1">Redirect</span><span class="br0">&#40;</span>ctx<span class="sy0">.</span><span class="me1">RedirectUri</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">return</span> Task<span class="sy0">.</span><span class="me1">FromResult</span><span class="sy0">&lt;</span><span class="kw4">object</span><span class="sy0">&gt;</span><span class="br0">&#40;</span><span class="kw1">null</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span>,
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp; &nbsp; <span class="br0">&#125;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; <span class="co1">// ... other setup ...</span>
<span class="br0">&#125;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse"> public void Configure(IApplicationBuilder app, IHostingEnvironment env, ILoggerFactory loggerFactory)
{
	// ... other setup ...

	app.UseCookieAuthentication(new CookieAuthenticationOptions() {

		// A string to identify the authentication scheme we used, useful for filtering in Authorize attributes
		AuthenticationScheme = "NAME_OF_YOUR_COOKIE_SCHEME",

		// Location to send people too to log in
		LoginPath = new PathString("/Account/Login"),

		// Location to send people who fail to authenticate when required
		AccessDeniedPath = new PathString("/Account/Forbidden"),

		// Automatically check authentication on every call?
		AutomaticAuthenticate = true,

		// Challenge every request (enforce requirement to have this auth scheme if it got this far)
		AutomaticChallenge = true,

		// Expiration of the authentication ticket 
		ExpireTimeSpan = TimeSpan.FromMinutes(30),

		// Update the timeout each time a new request comes in
		SlidingExpiration = true,

		Events = new CookieAuthenticationEvents() {

			// Overwrite the attempt to redirect API calls to login page w/ 401 response instead
			OnRedirectToLogin = (ctx) =&gt; {
				// return true 401 to API calls, continue redirect to login for interactive
				if (ctx.Request.Path.StartsWithSegments("/api") &amp;&amp; ctx.Response.StatusCode == 200)
				{
					ctx.Response.StatusCode = 401;
					return Task.FromResult&lt;object&gt;(null);
				}

				ctx.Response.Redirect(ctx.RedirectUri);
				return Task.FromResult&lt;object&gt;(null);
			},

		}
	});

	// ... other setup ...
}</pre></div></div>

<p><i>Note the OnRedirectToLogin logic, this causes the middleware to return basic 401 HTTP errors for calls through the &#8220;/api&#8221; path instead of redirects to the login page</i></p>
<h2>Account Controller</h2>
<p>To support the endpoints above, and some others that may be useful, we need a simple Account controller:</p>
<p><b>APIProject/Controllers/InteractiveAccountController.cs</b></p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="csharp"><thead><tr><td colspan="2"  class="head">C#</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
</pre></td><td class="de1"><pre class="de1"><span class="br0">&#91;</span>ApiExceptionFilter<span class="br0">&#93;</span>
<span class="br0">&#91;</span>Route<span class="br0">&#40;</span><span class="st0">&quot;Account&quot;</span><span class="br0">&#41;</span><span class="br0">&#93;</span>
<span class="kw1">public</span> <span class="kw4">class</span> InteractiveAccountController <span class="sy0">:</span> Controller
<span class="br0">&#123;</span>
&nbsp; &nbsp; <span class="br0">&#91;</span>HttpGet<span class="br0">&#40;</span><span class="st0">&quot;Unauthorized&quot;</span><span class="br0">&#41;</span><span class="br0">&#93;</span>
&nbsp; &nbsp; <span class="kw1">public</span> async Task<span class="sy0">&lt;</span><span class="kw4">string</span><span class="sy0">&gt;</span> GetUnauthorizedAsync<span class="br0">&#40;</span><span class="kw4">string</span> returnUrl<span class="br0">&#41;</span>
&nbsp; &nbsp; <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">return</span> <span class="st0">&quot;You really should login first.&quot;</span><span class="sy0">;</span>
&nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp;
&nbsp; &nbsp; <span class="br0">&#91;</span>HttpGet<span class="br0">&#40;</span><span class="st0">&quot;Forbidden&quot;</span><span class="br0">&#41;</span><span class="br0">&#93;</span>
&nbsp; &nbsp; <span class="kw1">public</span> <span class="kw4">string</span> GetForbidden<span class="br0">&#40;</span><span class="br0">&#41;</span>
&nbsp; &nbsp; <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">return</span> <span class="st0">&quot;Forbidden&quot;</span><span class="sy0">;</span>
&nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp;
&nbsp; &nbsp; <span class="br0">&#91;</span>HttpGet<span class="br0">&#40;</span><span class="st0">&quot;TimedOut&quot;</span><span class="br0">&#41;</span><span class="br0">&#93;</span>
&nbsp; &nbsp; <span class="kw1">public</span> <span class="kw4">string</span> GetTimedOut<span class="br0">&#40;</span><span class="br0">&#41;</span>
&nbsp; &nbsp; <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">return</span> <span class="st0">&quot;TimedOut&quot;</span><span class="sy0">;</span>
&nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp;
&nbsp; &nbsp; <span class="br0">&#91;</span>HttpGet<span class="br0">&#40;</span><span class="st0">&quot;Login&quot;</span><span class="br0">&#41;</span><span class="br0">&#93;</span>
&nbsp; &nbsp; <span class="kw1">public</span> async Task<span class="sy0">&lt;</span><span class="kw4">string</span><span class="sy0">&gt;</span> GetLogin<span class="br0">&#40;</span><span class="br0">&#41;</span>
&nbsp; &nbsp; <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">var</span> principal <span class="sy0">=</span> <span class="kw3">new</span> ClaimsPrincipal<span class="br0">&#40;</span><span class="kw3">new</span> StandardUser<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; await HttpContext<span class="sy0">.</span><span class="me1">Authentication</span><span class="sy0">.</span><span class="me1">SignInAsync</span><span class="br0">&#40;</span><span class="st0">&quot;NAME_OF_YOUR_COOKIE_SCHEME&quot;</span>, principal<span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">return</span> <span class="st0">&quot;Success!&quot;</span><span class="sy0">;</span>
&nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp;
&nbsp; &nbsp; <span class="br0">&#91;</span>HttpGet<span class="br0">&#40;</span><span class="st0">&quot;Logout&quot;</span><span class="br0">&#41;</span><span class="br0">&#93;</span>
&nbsp; &nbsp; <span class="kw1">public</span> async Task<span class="sy0">&lt;</span><span class="kw4">string</span><span class="sy0">&gt;</span> GetLogout<span class="br0">&#40;</span><span class="br0">&#41;</span>
&nbsp; &nbsp; <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; await HttpContext<span class="sy0">.</span><span class="me1">Authentication</span><span class="sy0">.</span><span class="me1">SignOutAsync</span><span class="br0">&#40;</span><span class="st0">&quot;NAME_OF_YOUR_COOKIE_SCHEME&quot;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="co1">// TODO replace with redirect to login once it exists</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">return</span> <span class="st0">&quot;Goodbye!&quot;</span><span class="sy0">;</span>
&nbsp; &nbsp; <span class="br0">&#125;</span>
<span class="br0">&#125;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">[ApiExceptionFilter]
[Route("Account")]
public class InteractiveAccountController : Controller
{
	[HttpGet("Unauthorized")]
	public async Task&lt;string&gt; GetUnauthorizedAsync(string returnUrl)
	{
		return "You really should login first.";
	}

	[HttpGet("Forbidden")]
	public string GetForbidden()
	{
		return "Forbidden";
	}

	[HttpGet("TimedOut")]
	public string GetTimedOut()
	{
		return "TimedOut";
	}

	[HttpGet("Login")]
	public async Task&lt;string&gt; GetLogin()
	{
		var principal = new ClaimsPrincipal(new StandardUser());
		await HttpContext.Authentication.SignInAsync("NAME_OF_YOUR_COOKIE_SCHEME", principal);
		return "Success!";
	}

	[HttpGet("Logout")]
	public async Task&lt;string&gt; GetLogout()
	{
		await HttpContext.Authentication.SignOutAsync("NAME_OF_YOUR_COOKIE_SCHEME");
		// TODO replace with redirect to login once it exists
		return "Goodbye!";
	}
}</pre></div></div>

<h2>Authorize</h2>
<p>Once we have an authenticated user, we can add the standard <code>[Authorize]</code> attribute on any controllers or methods to ensure access will require authentication (or challenge if it&#8217;s not present). If we had multiple methods of authentication (interactive user, some API access, etc), we could further restrict these actions to just the cookie-based authenticated requests by specifying that authentication scheme in the attribute:<br />
<code>[Authorize(ActiveAuthenticationSchemes = "NAME_OF_YOUR_COOKIE_SCHEME")]</code></p>
<p>An easy way to verify things are in working order is to decorate another Controller/Action with Authorize and attempt to visit it. We should get redirected to <code>Unauthorized</code> on the Account controller above. If we visit <code>Login</code> first, then visit our sample Action we should be allowed in. Visit <code>Logout</code> and then our sample Action, we&#8217;re back at Unauthorized.</p>
<h2>Ensure Endpoints have Authorization</h2>
<p>Now that we have the middleware in place, the Account pages, and a sample page, we should add some protection to make sure we don&#8217;t leave any pages exposed accidentally. This step is optional, but it&#8217;s something I prefer to do for every application I work on. </p>
<p>Using the sample code from <a href="/index.php/webdev/asp-net-ensure-your-actions-arent-missing-authorization-with-unit-tests/">a prior ASP.Net post</a>, we can write a quick unit test that will inspect all Actions and require them to either have explicit [Authorize] or [AllowAnonymous] attributes. This will protect us from accidentally pushing an unprotected endpoint.</p>
<p>Unfortunately, APIExplorer in ASP.Net Core is even less documented so we have to rely on Reflection instead:</p>
<p><b>APIProject.Tests/SecurityTests.cs</b></p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="csharp"><thead><tr><td colspan="2"  class="head">C#</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
</pre></td><td class="de1"><pre class="de1">&nbsp; &nbsp; <span class="br0">&#91;</span>TestFixture<span class="br0">&#93;</span>
&nbsp; &nbsp; <span class="kw1">public</span> <span class="kw4">class</span> SecurityTests
&nbsp; &nbsp; <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; Func<span class="sy0">&lt;</span><span class="kw4">object</span>, <span class="kw4">bool</span><span class="sy0">&gt;</span> IsMVCAttributeAuth <span class="sy0">=</span> <span class="br0">&#40;</span>o<span class="br0">&#41;</span> <span class="sy0">=&gt;</span> <span class="br0">&#40;</span>o <span class="kw3">is</span> AuthorizeAttribute <span class="sy0">||</span> o <span class="kw3">is</span> AllowAnonymousAttribute<span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#91;</span>Test<span class="br0">&#93;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">public</span> <span class="kw4">void</span> AllMvcActionsHaveExplicitAuthorizationDefined_UsingStandardReflection<span class="br0">&#40;</span><span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">var</span> actionsMissingAuth <span class="sy0">=</span> <span class="kw3">new</span> List<span class="sy0">&lt;</span><span class="kw4">string</span><span class="sy0">&gt;</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="co1">// 1</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">var</span> controllers <span class="sy0">=</span> Assembly<span class="sy0">.</span><span class="me1">GetAssembly</span><span class="br0">&#40;</span><span class="kw3">typeof</span><span class="br0">&#40;</span>InteractiveAccountController<span class="br0">&#41;</span><span class="br0">&#41;</span><span class="sy0">.</span><span class="me1">GetLoadableTypes</span><span class="br0">&#40;</span><span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="sy0">.</span><span class="kw1">Where</span><span class="br0">&#40;</span>t <span class="sy0">=&gt;</span> <span class="kw3">typeof</span><span class="br0">&#40;</span>Controller<span class="br0">&#41;</span><span class="sy0">.</span><span class="me1">IsAssignableFrom</span><span class="br0">&#40;</span>t<span class="br0">&#41;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">foreach</span> <span class="br0">&#40;</span><span class="kw1">var</span> controller <span class="kw1">in</span> controllers<span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="co1">// 2</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="co1">// if the controller has it, all it's actions are covered also</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">if</span> <span class="br0">&#40;</span>controller<span class="sy0">.</span><span class="me1">GetCustomAttributes</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">.</span><span class="me1">Any</span><span class="br0">&#40;</span>a <span class="sy0">=&gt;</span> IsMVCAttributeAuth<span class="br0">&#40;</span>a<span class="br0">&#41;</span><span class="br0">&#41;</span><span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">continue</span><span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">var</span> actions <span class="sy0">=</span> controller<span class="sy0">.</span><span class="me1">GetMethods</span><span class="br0">&#40;</span>BindingFlags<span class="sy0">.</span><span class="me1">Instance</span> <span class="sy0">|</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; BindingFlags<span class="sy0">.</span><span class="me1">DeclaredOnly</span> <span class="sy0">|</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; BindingFlags<span class="sy0">.</span><span class="kw1">Public</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">foreach</span> <span class="br0">&#40;</span><span class="kw1">var</span> action <span class="kw1">in</span> actions<span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="co1">// 3</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="co1">// if the action has a defined authorization filter, it's covered</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">if</span> <span class="br0">&#40;</span>action<span class="sy0">.</span><span class="me1">GetCustomAttributes</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">.</span><span class="me1">Any</span><span class="br0">&#40;</span>a <span class="sy0">=&gt;</span> IsMVCAttributeAuth<span class="br0">&#40;</span>a<span class="br0">&#41;</span><span class="br0">&#41;</span><span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">continue</span><span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="co1">// no controller or action defined, add it to the list</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; actionsMissingAuth<span class="sy0">.</span><span class="kw1">Add</span><span class="br0">&#40;</span><span class="kw4">String</span><span class="sy0">.</span><span class="me1">Format</span><span class="br0">&#40;</span><span class="st0">&quot;{0}.{1}&quot;</span>, controller<span class="sy0">.</span><span class="me1">Name</span>, action<span class="sy0">.</span><span class="me1">Name</span><span class="br0">&#41;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="co1">// 4</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">if</span> <span class="br0">&#40;</span>actionsMissingAuth<span class="sy0">.</span><span class="me1">Any</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Assert<span class="sy0">.</span><span class="me1">Fail</span><span class="br0">&#40;</span><span class="kw4">String</span><span class="sy0">.</span><span class="me1">Format</span><span class="br0">&#40;</span><span class="st0">&quot;{0} action(s) do not have explicit authorization: {1}&quot;</span>,
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; actionsMissingAuth<span class="sy0">.</span><span class="me1">Count</span>,
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw4">String</span><span class="sy0">.</span><span class="kw1">Join</span><span class="br0">&#40;</span><span class="st0">&quot;,&quot;</span>, actionsMissingAuth<span class="br0">&#41;</span><span class="br0">&#41;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp;
&nbsp;
&nbsp; &nbsp; <span class="kw1">public</span> <span class="kw1">static</span> <span class="kw4">class</span> AssemblyExtensions
&nbsp; &nbsp; <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">public</span> <span class="kw1">static</span> IEnumerable<span class="sy0">&lt;</span>Type<span class="sy0">&gt;</span> GetLoadableTypes<span class="br0">&#40;</span><span class="kw1">this</span> Assembly assembly<span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">try</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">return</span> assembly<span class="sy0">.</span><span class="me1">GetTypes</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">catch</span> <span class="br0">&#40;</span>ReflectionTypeLoadException e<span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">return</span> e<span class="sy0">.</span><span class="me1">Types</span><span class="sy0">.</span><span class="kw1">Where</span><span class="br0">&#40;</span>t <span class="sy0">=&gt;</span> t <span class="sy0">!=</span> <span class="kw1">null</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp; &nbsp; <span class="br0">&#125;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">    [TestFixture]
    public class SecurityTests
    {
        Func&lt;object, bool&gt; IsMVCAttributeAuth = (o) =&gt; (o is AuthorizeAttribute || o is AllowAnonymousAttribute);

        [Test]
        public void AllMvcActionsHaveExplicitAuthorizationDefined_UsingStandardReflection()
        {
            var actionsMissingAuth = new List&lt;string&gt;();

            // 1
            var controllers = Assembly.GetAssembly(typeof(InteractiveAccountController)).GetLoadableTypes()
                          .Where(t =&gt; typeof(Controller).IsAssignableFrom(t));

            foreach (var controller in controllers)
            {
                // 2
                // if the controller has it, all it's actions are covered also
                if (controller.GetCustomAttributes().Any(a =&gt; IsMVCAttributeAuth(a)))
                    continue;

                var actions = controller.GetMethods(BindingFlags.Instance |
                                                    BindingFlags.DeclaredOnly |
                                                    BindingFlags.Public);
                foreach (var action in actions)
                {
                    // 3
                    // if the action has a defined authorization filter, it's covered
                    if (action.GetCustomAttributes().Any(a =&gt; IsMVCAttributeAuth(a)))
                        continue;

                    // no controller or action defined, add it to the list
                    actionsMissingAuth.Add(String.Format("{0}.{1}", controller.Name, action.Name));
                }
            }

            // 4
            if (actionsMissingAuth.Any())
            {
                Assert.Fail(String.Format("{0} action(s) do not have explicit authorization: {1}",
                              actionsMissingAuth.Count,
                              String.Join(",", actionsMissingAuth)));
            }
        }
    }


    public static class AssemblyExtensions
    {
        public static IEnumerable&lt;Type&gt; GetLoadableTypes(this Assembly assembly)
        {
            try
            {
                return assembly.GetTypes();
            }
            catch (ReflectionTypeLoadException e)
            {
                return e.Types.Where(t =&gt; t != null);
            }
        }
    }</pre></div></div>

<h2>Add Real Login Pages and Logic</h2>
<p>I&#8217;m not going to push a particular storage solution on you, so I have two interfaces I&#8217;ll be using as stand-ins for all of my &#8220;storage&#8221; needs:</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="csharp"><thead><tr><td colspan="2"  class="head">C#</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
</pre></td><td class="de1"><pre class="de1"><span class="kw1">public</span> <span class="kw4">interface</span> IUserStorage
<span class="br0">&#123;</span>
&nbsp; &nbsp; Task<span class="sy0">&lt;</span>User<span class="sy0">&gt;</span> GetUserByUsernameAsync<span class="br0">&#40;</span><span class="kw4">string</span> username<span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; Task<span class="sy0">&lt;</span>User<span class="sy0">&gt;</span> GetUserAsync<span class="br0">&#40;</span>Guid userId<span class="br0">&#41;</span><span class="sy0">;</span>
<span class="br0">&#125;</span>
&nbsp;
<span class="kw1">public</span> <span class="kw4">interface</span> ISessionManager
<span class="br0">&#123;</span>
&nbsp; &nbsp; Task<span class="sy0">&lt;</span>IPrincipal<span class="sy0">&gt;</span> CreateSessionAsync<span class="br0">&#40;</span>Guid userId<span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; Task<span class="sy0">&lt;</span><span class="kw4">bool</span><span class="sy0">&gt;</span> IsSessionValidAsync<span class="br0">&#40;</span>IPrincipal principal<span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; <span class="kw4">bool</span> IsUserValidForSession<span class="br0">&#40;</span>User user<span class="br0">&#41;</span><span class="sy0">;</span>
<span class="br0">&#125;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">public interface IUserStorage
{
    Task&lt;User&gt; GetUserByUsernameAsync(string username);
    Task&lt;User&gt; GetUserAsync(Guid userId);
}

public interface ISessionManager
{
    Task&lt;IPrincipal&gt; CreateSessionAsync(Guid userId);
    Task&lt;bool&gt; IsSessionValidAsync(IPrincipal principal);
    bool IsUserValidForSession(User user);
}</pre></div></div>

<p>I am also using <a href="https://en.wikipedia.org/wiki/Bcrypt">BCrypt</a> for password hashing. BCrypt is a slow hashing function that makes brute force attempts computationally expensive. To verify a hashed BCrypt password, we have to pull it out of our store and ask BCrypt to verify it (instead of some methods that allow you to hash a new value and compare at the storage level).</p>
<p><b>APIProject/Controllers/InteractiveAccountController.cs</b></p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="csharp"><thead><tr><td colspan="2"  class="head">C#</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
</pre></td><td class="de1"><pre class="de1"><span class="sy0">...</span>
&nbsp;
<span class="br0">&#91;</span>HttpGet<span class="br0">&#40;</span><span class="st0">&quot;Login&quot;</span><span class="br0">&#41;</span><span class="br0">&#93;</span>
<span class="kw1">public</span> async Task<span class="sy0">&lt;</span>IActionResult<span class="sy0">&gt;</span> GetLoginAsync<span class="br0">&#40;</span><span class="kw4">string</span> returnUrl<span class="br0">&#41;</span>
<span class="br0">&#123;</span>
&nbsp; &nbsp; <span class="kw1">return</span> View<span class="br0">&#40;</span><span class="st0">&quot;Login&quot;</span>, <span class="kw3">new</span> LoginModel<span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span> ReturnURL <span class="sy0">=</span> returnUrl <span class="br0">&#125;</span><span class="br0">&#41;</span><span class="sy0">;</span>
<span class="br0">&#125;</span>
&nbsp;
<span class="br0">&#91;</span>HttpPost<span class="br0">&#40;</span><span class="st0">&quot;Login&quot;</span><span class="br0">&#41;</span><span class="br0">&#93;</span>
<span class="kw1">public</span> async Task<span class="sy0">&lt;</span>IActionResult<span class="sy0">&gt;</span> PostLoginAsync<span class="br0">&#40;</span><span class="kw4">string</span> username, <span class="kw4">string</span> password, <span class="kw4">string</span> returnUrl<span class="br0">&#41;</span>
<span class="br0">&#123;</span>
&nbsp; &nbsp; <span class="co1">// Did they provide all the details?</span>
&nbsp; &nbsp; <span class="kw1">if</span> <span class="br0">&#40;</span><span class="kw4">string</span><span class="sy0">.</span><span class="me1">IsNullOrEmpty</span><span class="br0">&#40;</span>username<span class="br0">&#41;</span> <span class="sy0">||</span> <span class="kw4">String</span><span class="sy0">.</span><span class="me1">IsNullOrEmpty</span><span class="br0">&#40;</span>password<span class="br0">&#41;</span><span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">return</span> View<span class="br0">&#40;</span><span class="st0">&quot;Login&quot;</span>, <span class="kw3">new</span> LoginModel<span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span> ReturnURL <span class="sy0">=</span> returnUrl, UserName <span class="sy0">=</span> username, Error <span class="sy0">=</span> <span class="st0">&quot;Please provide both a username and password.&quot;</span> <span class="br0">&#125;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; <span class="co1">// Load the User and see if BCrypt can verify the entered password matches the stored hash</span>
&nbsp; &nbsp; <span class="kw1">var</span> secrets <span class="sy0">=</span> await _userStorage<span class="sy0">.</span><span class="me1">GetUserByUsernameAsync</span><span class="br0">&#40;</span>username<span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; <span class="kw1">if</span> <span class="br0">&#40;</span>secrets <span class="sy0">==</span> <span class="kw1">null</span> <span class="sy0">||</span> <span class="sy0">!</span>BCrypt<span class="sy0">.</span><span class="me1">Net</span><span class="sy0">.</span><span class="me1">BCrypt</span><span class="sy0">.</span><span class="me1">Verify</span><span class="br0">&#40;</span>password, secrets<span class="sy0">.</span><span class="me1">PasswordHash</span><span class="br0">&#41;</span><span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">return</span> View<span class="br0">&#40;</span><span class="st0">&quot;Login&quot;</span>, <span class="kw3">new</span> LoginModel<span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span> ReturnURL <span class="sy0">=</span> returnUrl, UserName <span class="sy0">=</span> username, Error <span class="sy0">=</span> <span class="st0">&quot;Sorry, could not find a user with that name and password.&quot;</span> <span class="br0">&#125;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp;
&nbsp; &nbsp; <span class="co1">// Verify the user is allowed to start a session (record is enabled, etc)</span>
&nbsp; &nbsp; <span class="kw1">if</span><span class="br0">&#40;</span><span class="sy0">!</span>_sessionManager<span class="sy0">.</span><span class="me1">IsUserValidForSession</span><span class="br0">&#40;</span>user<span class="br0">&#41;</span><span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">return</span> View<span class="br0">&#40;</span><span class="st0">&quot;Login&quot;</span>, <span class="kw3">new</span> LoginModel<span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span> ReturnURL <span class="sy0">=</span> returnUrl, UserName <span class="sy0">=</span> username, Error <span class="sy0">=</span> <span class="st0">&quot;Sorry, your account is currently disabled.&quot;</span> <span class="br0">&#125;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; <span class="co1">// Create a principal for the session/user and put it in the cookie</span>
&nbsp; &nbsp; <span class="kw1">var</span> principal <span class="sy0">=</span> await _sessionManager<span class="sy0">.</span><span class="me1">CreateSessionAsync</span><span class="br0">&#40;</span>user<span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; await HttpContext<span class="sy0">.</span><span class="me1">Authentication</span><span class="sy0">.</span><span class="me1">SignInAsync</span><span class="br0">&#40;</span><span class="st0">&quot;NAME_OF_YOUR_COOKIE_SCHEME&quot;</span>, principal<span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; <span class="co1">// Redirect the user</span>
&nbsp; &nbsp; <span class="kw1">if</span> <span class="br0">&#40;</span><span class="kw4">String</span><span class="sy0">.</span><span class="me1">IsNullOrWhiteSpace</span><span class="br0">&#40;</span>returnUrl<span class="br0">&#41;</span> <span class="sy0">||</span> returnUrl<span class="sy0">.</span><span class="me1">ToLower</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">.</span><span class="me1">StartsWith</span><span class="br0">&#40;</span><span class="st0">&quot;/account/login&quot;</span><span class="br0">&#41;</span><span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; returnUrl <span class="sy0">=</span> <span class="st0">&quot;/&quot;</span><span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; <span class="kw1">return</span> Redirect<span class="br0">&#40;</span>returnUrl<span class="br0">&#41;</span><span class="sy0">;</span>
<span class="br0">&#125;</span>
&nbsp;
<span class="br0">&#91;</span>HttpGet<span class="br0">&#40;</span><span class="st0">&quot;Logout&quot;</span><span class="br0">&#41;</span><span class="br0">&#93;</span>
<span class="kw1">public</span> async Task<span class="sy0">&lt;</span>IActionResult<span class="sy0">&gt;</span> GetLogout<span class="br0">&#40;</span><span class="br0">&#41;</span>
<span class="br0">&#123;</span>
&nbsp; &nbsp; await HttpContext<span class="sy0">.</span><span class="me1">Authentication</span><span class="sy0">.</span><span class="me1">SignOutAsync</span><span class="br0">&#40;</span><span class="st0">&quot;NAME_OF_YOUR_COOKIE_SCHEME&quot;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; <span class="kw1">return</span> Redirect<span class="br0">&#40;</span><span class="st0">&quot;/account/login&quot;</span><span class="br0">&#41;</span><span class="sy0">;</span>
<span class="br0">&#125;</span>
&nbsp;
<span class="sy0">...</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">...

[HttpGet("Login")]
public async Task&lt;IActionResult&gt; GetLoginAsync(string returnUrl)
{
    return View("Login", new LoginModel() { ReturnURL = returnUrl });
}

[HttpPost("Login")]
public async Task&lt;IActionResult&gt; PostLoginAsync(string username, string password, string returnUrl)
{
    // Did they provide all the details?
    if (string.IsNullOrEmpty(username) || String.IsNullOrEmpty(password))
        return View("Login", new LoginModel() { ReturnURL = returnUrl, UserName = username, Error = "Please provide both a username and password." });

    // Load the User and see if BCrypt can verify the entered password matches the stored hash
    var secrets = await _userStorage.GetUserByUsernameAsync(username);
    if (secrets == null || !BCrypt.Net.BCrypt.Verify(password, secrets.PasswordHash))
        return View("Login", new LoginModel() { ReturnURL = returnUrl, UserName = username, Error = "Sorry, could not find a user with that name and password." });
   
    // Verify the user is allowed to start a session (record is enabled, etc)
    if(!_sessionManager.IsUserValidForSession(user))
        return View("Login", new LoginModel() { ReturnURL = returnUrl, UserName = username, Error = "Sorry, your account is currently disabled." });

    // Create a principal for the session/user and put it in the cookie
    var principal = await _sessionManager.CreateSessionAsync(user);
    await HttpContext.Authentication.SignInAsync("NAME_OF_YOUR_COOKIE_SCHEME", principal);

    // Redirect the user
    if (String.IsNullOrWhiteSpace(returnUrl) || returnUrl.ToLower().StartsWith("/account/login"))
        returnUrl = "/";

    return Redirect(returnUrl);
}

[HttpGet("Logout")]
public async Task&lt;IActionResult&gt; GetLogout()
{
    await HttpContext.Authentication.SignOutAsync("NAME_OF_YOUR_COOKIE_SCHEME");
    return Redirect("/account/login");
}

...</pre></div></div>

<p>Inside the <code>ISessionManager.CreateSessionAsync</code>, we create a session in storage with an id and then when the Principal is created we add that Id as a claim in the Principal. This is how we&#8217;ll look up the session on later requests to get the user information.</p>
<p>The Cookie middleware will take care of built-in timeouts, but we also need to add a check in case someone disables the user (or whatever criteria is necessary in your system). Add this to the Startup.cs setup.</p>
<p><b>APIProject/Startup.cs</b></p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="csharp"><thead><tr><td colspan="2"  class="head">C#</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
</pre></td><td class="de1"><pre class="de1">app<span class="sy0">.</span><span class="me1">UseCookieAuthentication</span><span class="br0">&#40;</span><span class="kw3">new</span> CookieAuthenticationOptions<span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp;
&nbsp; &nbsp; <span class="sy0">...</span>
&nbsp;
&nbsp; &nbsp; <span class="me1">Events</span> <span class="sy0">=</span> <span class="kw3">new</span> CookieAuthenticationEvents<span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; <span class="sy0">...</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; <span class="co1">// Use my ISessionManager to ensure session is still valid (user not disabled) or reject the principal if it is no longer valid</span>
&nbsp; &nbsp; &nbsp; &nbsp; OnValidatePrincipal <span class="sy0">=</span> async <span class="br0">&#40;</span>ctx<span class="br0">&#41;</span> <span class="sy0">=&gt;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">var</span> sessionManager <span class="sy0">=</span> ctx<span class="sy0">.</span><span class="me1">HttpContext</span><span class="sy0">.</span><span class="me1">RequestServices</span><span class="sy0">.</span><span class="me1">GetRequiredService</span><span class="sy0">&lt;</span>ISessionManager<span class="sy0">&gt;</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">var</span> isSessionValid <span class="sy0">=</span> await sessionManager<span class="sy0">.</span><span class="me1">IsSessionValidAsync</span><span class="br0">&#40;</span>ctx<span class="sy0">.</span><span class="me1">Principal</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">if</span> <span class="br0">&#40;</span><span class="sy0">!</span>isSessionValid<span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ctx<span class="sy0">.</span><span class="me1">RejectPrincipal</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp; &nbsp; <span class="br0">&#125;</span>
<span class="br0">&#125;</span><span class="br0">&#41;</span><span class="sy0">;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">app.UseCookieAuthentication(new CookieAuthenticationOptions() {

	...

	Events = new CookieAuthenticationEvents() {

		...

		// Use my ISessionManager to ensure session is still valid (user not disabled) or reject the principal if it is no longer valid
		OnValidatePrincipal = async (ctx) =&gt; {
			var sessionManager = ctx.HttpContext.RequestServices.GetRequiredService&lt;ISessionManager&gt;();
			var isSessionValid = await sessionManager.IsSessionValidAsync(ctx.Principal);
			if (!isSessionValid) {
				ctx.RejectPrincipal();
			}
		}
	}
});</pre></div></div>

<p><code>ISessionManager.IsSessionValidAsync</code> can now pull that Id claim we created above, get the associated user, and do any number of additional validations on the session length, user enabled state, and so on.</p>
<h2>Accessing the User/Session</h2>
<p>The last step is to the ability to access the User in other controllers. Controllers have a <code>User</code> property that grants access to the ClaimsPrincipal created during login. Assuming we had also stored a property like &#8220;UserId&#8221; in <code>ISessionManager.CreateSessionAsync</code> then we can access it like this:</p>
<p><b>APIProject/Controllers/AnyOldController.cs</b></p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="csharp"><thead><tr><td colspan="2"  class="head">C#</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
</pre></td><td class="de1"><pre class="de1"><span class="kw1">var</span> userIdClaim <span class="sy0">=</span> User<span class="sy0">.</span><span class="me1">FindFirst</span><span class="br0">&#40;</span><span class="st0">&quot;UserId&quot;</span><span class="br0">&#41;</span><span class="sy0">;</span>
<span class="kw1">var</span> userId <span class="sy0">=</span> Guid<span class="sy0">.</span><span class="me1">Parse</span><span class="br0">&#40;</span>userIdClaim<span class="sy0">.</span><span class="kw1">Value</span><span class="br0">&#41;</span><span class="sy0">;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">var userIdClaim = User.FindFirst("UserId");
var userId = Guid.Parse(userIdClaim.Value);</pre></div></div>

<p>The second time I jumped through this particular hoop, I added a method to my SessionManager that accepted a Controller and looked the user up from the database, so I could do this instead:</p>
<p><b>APIProject/Controllers/AnyOldController.cs</b></p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="csharp"><thead><tr><td colspan="2"  class="head">C#</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
</pre></td><td class="de1"><pre class="de1"><span class="kw1">var</span> user <span class="sy0">=</span> await _sessionManager<span class="sy0">.</span><span class="me1">GetCurrentUserAsync</span><span class="br0">&#40;</span><span class="kw1">this</span><span class="br0">&#41;</span><span class="sy0">;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">var user = await _sessionManager.GetCurrentUserAsync(this);</pre></div></div>

<p>The Session Id mentioned in the prior section is handled the same way.</p>
<h2>Final Checklist</h2>
<p>If you&#8217;re using this to follow along and implement, here are the pieces you should have:</p>
<ul>
<li>Startup.cs: The CookieMiddleware configured with expiration, automatic challenge, 401 redirects for APIs, and re-validation of the session</li>
<li>InteractiveAccountController: GET/POST for Login, GET for Logout, pages for Forbidden plus the Views for these pages</li>
<li>UserStore and SessionManager implementations, with just a few functions needed and ability to extend the ClaimsPrincipal with more fields as you grow</li>
</ul>
<p>You can go as light or heavy as you need to with storage, relational or non-relational, as needed. You have BCrypt, one of the small set of recommended options from <a href="https://www.owasp.org/index.php/Password_Storage_Cheat_Sheet">OWASP</a> (or upgrade to <a href="https://www.nuget.org/packages/Liphsoft.Crypto.Argon2">Argon2</a>). You have cookies with encrypted contents (including the expiration date) that automatically default to <code>secure</code> for HTTPS websites.</p>
]]></content>
			<link rel="replies" type="text/html" href="/index.php/webdev/serverprogramming/aspnet/custom-authentication-in-asp-net-core-without-identity/#comments" thr:count="4"/>
		<link rel="replies" type="application/atom+xml" href="/index.php/webdev/serverprogramming/aspnet/custom-authentication-in-asp-net-core-without-identity/feed/atom/" thr:count="4"/>
		<thr:total>4</thr:total>
		</entry>
		<entry>
		<author>
			<name>Eli Weinstock-Herman (tarwn)</name>
					</author>
		<title type="html"><![CDATA[Mapping Complex types to/from JSON with JSON.Net]]></title>
		<link rel="alternate" type="text/html" href="/index.php/webdev/serverprogramming/aspnet/mapping-complex-types-tofrom-json-with-json-net/" />
		<id>/?p=8680</id>
		<updated>2017-07-07T11:54:10Z</updated>
		<published>2017-07-07T11:54:10Z</published>
		<category scheme="/" term="ASP.NET" /><category scheme="/" term="C#" /><category scheme="/" term="json" /><category scheme="/" term="json.net" />		<summary type="html"><![CDATA[In an earlier post I introduced a strongly typed Identity object I am using in an ASP.Net Core application to make my code and error messages more readable. I didn&#8217;t wanted that extra complexity reflected in my database or over the wire with an API. In this post we&#8217;ll look at a simple method to [&#8230;]]]></summary>
		<content type="html" xml:base="/index.php/webdev/serverprogramming/aspnet/mapping-complex-types-tofrom-json-with-json-net/"><![CDATA[<p>In an <a href="/index.php/desktopdev/mstech/csharp/mapping-complex-types-tofrom-the-db-with-petapoco/">earlier post</a> I introduced a strongly typed Identity object I am using in an ASP.Net Core application to make my code and error messages more readable. I didn&#8217;t wanted that extra complexity reflected in my database or over the wire with an API. In this post we&#8217;ll look at a simple method to map my strongly typed properties in C# to simpler values in JSON.</p>
<p>This is my desired state:</p>
<div id="attachment_8690" style="width: 634px" class="wp-caption aligncenter"><img src="/wp-content/uploads/2017/07/TransparentIdentityType.png" alt="Transparent Server Side Identity Type" width="624" height="121" class="size-full wp-image-8690" srcset="/wp-content/uploads/2017/07/TransparentIdentityType.png 624w, /wp-content/uploads/2017/07/TransparentIdentityType-300x58.png 300w" sizes="(max-width: 624px) 100vw, 624px" /><p class="wp-caption-text">Transparent Server Side Identity Type</p></div>
<p>I want a strongly typed Identity object in my API backend that transparently converts into a simple int value to/from the database and converts to an int or <code>null</code> for the front-end (null in cases where a permanent ID hasn&#8217;t been assigned yet). The right side of this was handled in that earlier post with a PetaPoco IMapper implementation registered globally for IIdentity<int> types. JSON.Net supports a similar method that I can register with ASP.Net Core.</p>
<p>This is what my ASP.Net MVC Method looks like:</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="csharp"><thead><tr><td colspan="2"  class="head">C#</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
</pre></td><td class="de1"><pre class="de1"><span class="br0">&#91;</span>HttpGet<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#93;</span>
<span class="kw1">public</span> async Task<span class="sy0">&lt;</span>List<span class="sy0">&lt;</span>ApplicationDTO<span class="sy0">&gt;&gt;</span> GetAllAsync<span class="br0">&#40;</span><span class="br0">&#41;</span>
<span class="br0">&#123;</span>
&nbsp; &nbsp; <span class="kw1">return</span> await _databaseStore<span class="sy0">.</span><span class="me1">Applications</span><span class="sy0">.</span><span class="me1">GetAllAsync</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
<span class="br0">&#125;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">[HttpGet()]
public async Task&lt;List&lt;ApplicationDTO&gt;&gt; GetAllAsync()
{
	return await _databaseStore.Applications.GetAllAsync();
}</pre></div></div>

<p>And this is what we see over the wire:</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="javascript"><thead><tr><td colspan="2"  class="head">Javascript</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
</pre></td><td class="de1"><pre class="de1"><span class="br0">&#91;</span>
&nbsp; <span class="br0">&#123;</span><span class="st0">&quot;id&quot;</span><span class="sy0">:</span><span class="nu0">2</span><span class="sy0">,</span> <span class="st0">&quot;organizationId&quot;</span><span class="sy0">:</span><span class="nu0">1</span><span class="sy0">,</span> <span class="st0">&quot;name&quot;</span><span class="sy0">:</span><span class="st0">&quot;Fictitious Co, LLC Application&quot;</span><span class="br0">&#125;</span>
<span class="br0">&#93;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">[
  {"id":2, "organizationId":1, "name":"Fictitious Co, LLC Application"}
]</pre></div></div>

<p>Here is the definition of the ApplicationDTO object:</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="csharp"><thead><tr><td colspan="2"  class="head">C#</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
</pre></td><td class="de1"><pre class="de1"><span class="kw1">public</span> <span class="kw4">class</span> ApplicationDTO
<span class="br0">&#123;</span> &nbsp; 
&nbsp; &nbsp; <span class="br0">&#91;</span>Obsolete<span class="br0">&#40;</span><span class="st0">&quot;Serialization use only&quot;</span>, <span class="kw1">true</span><span class="br0">&#41;</span><span class="br0">&#93;</span>
&nbsp; &nbsp; <span class="kw1">public</span> ApplicationDTO<span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span> <span class="br0">&#125;</span>
&nbsp;
&nbsp; &nbsp; <span class="kw1">public</span> ApplicationDTO<span class="br0">&#40;</span>AppId id, OrganizationId organizationid, <span class="kw4">string</span> name<span class="br0">&#41;</span>
&nbsp; &nbsp; <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; Id <span class="sy0">=</span> id<span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; OrganizationId <span class="sy0">=</span> organizationid<span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; Name <span class="sy0">=</span> name<span class="sy0">;</span>
&nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp; &nbsp; 
&nbsp; &nbsp; <span class="kw1">public</span> AppId Id <span class="br0">&#123;</span> <span class="kw1">get</span><span class="sy0">;</span> <span class="kw1">set</span><span class="sy0">;</span> <span class="br0">&#125;</span>
&nbsp; &nbsp; &nbsp; &nbsp; 
&nbsp; &nbsp; <span class="kw1">public</span> OrganizationId OrganizationId <span class="br0">&#123;</span> <span class="kw1">get</span><span class="sy0">;</span> <span class="kw1">set</span><span class="sy0">;</span> <span class="br0">&#125;</span>
&nbsp; &nbsp; &nbsp; &nbsp; 
&nbsp; &nbsp; <span class="kw1">public</span> <span class="kw4">string</span> Name <span class="br0">&#123;</span> <span class="kw1">get</span><span class="sy0">;</span> <span class="kw1">set</span><span class="sy0">;</span> <span class="br0">&#125;</span>
<span class="br0">&#125;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">public class ApplicationDTO
{   
    [Obsolete("Serialization use only", true)]
    public ApplicationDTO() { }
 
    public ApplicationDTO(AppId id, OrganizationId organizationid, string name)
    {
        Id = id;
        OrganizationId = organizationid;
        Name = name;
    }
    
    public AppId Id { get; set; }
        
    public OrganizationId OrganizationId { get; set; }
        
    public string Name { get; set; }
}</pre></div></div>

<p>Here is the definition of the OrganizationId Identity:</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="csharp"><thead><tr><td colspan="2"  class="head">C#</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
</pre></td><td class="de1"><pre class="de1"><span class="kw1">public</span> <span class="kw4">class</span> OrganizationId <span class="sy0">:</span> IIdentity<span class="sy0">&lt;</span><span class="kw4">int</span><span class="sy0">&gt;</span>
<span class="br0">&#123;</span> &nbsp; 
&nbsp; &nbsp; <span class="br0">&#91;</span>Obsolete<span class="br0">&#40;</span><span class="st0">&quot;Serialization use only&quot;</span>, <span class="kw1">true</span><span class="br0">&#41;</span><span class="br0">&#93;</span>
&nbsp; &nbsp; <span class="kw1">public</span> OrganizationId<span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span> <span class="br0">&#125;</span>
&nbsp; &nbsp; &nbsp;
&nbsp; &nbsp; <span class="kw1">public</span> OrganizationId<span class="br0">&#40;</span><span class="kw4">int</span> id<span class="br0">&#41;</span>
&nbsp; &nbsp; <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; RawValue <span class="sy0">=</span> id<span class="sy0">;</span>
&nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp; &nbsp; &nbsp;
&nbsp; &nbsp; <span class="kw1">public</span> <span class="kw4">int</span> RawValue <span class="br0">&#123;</span> <span class="kw1">get</span><span class="sy0">;</span> <span class="kw1">set</span><span class="sy0">;</span> <span class="br0">&#125;</span>
<span class="br0">&#125;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">public class OrganizationId : IIdentity&lt;int&gt;
{   
	[Obsolete("Serialization use only", true)]
	public OrganizationId() { }
	 
	public OrganizationId(int id)
	{
		RawValue = id;
	}
	 
	public int RawValue { get; set; }
}</pre></div></div>

<p>These are both generated code, with some of the extras left out (potentially a future post).</p>
<h2>Implementing a JSON.Net Mapper</h2>
<p>JSON.Net supports custom JsonConverter implementations that will let us transparently convert between IIdentity<int> objects in C# and int values JSON:</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="csharp"><thead><tr><td colspan="2"  class="head">C#</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
</pre></td><td class="de1"><pre class="de1"><span class="kw1">public</span> <span class="kw4">class</span> IdentityJsonConverter<span class="sy0">&lt;</span>T<span class="sy0">&gt;</span> <span class="sy0">:</span> JsonConverter
<span class="br0">&#123;</span>
&nbsp; &nbsp; <span class="kw1">public</span> <span class="kw1">override</span> <span class="kw4">void</span> WriteJson<span class="br0">&#40;</span>JsonWriter writer, <span class="kw4">object</span> <span class="kw1">value</span>, JsonSerializer serializer<span class="br0">&#41;</span>
&nbsp; &nbsp; <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; writer<span class="sy0">.</span><span class="me1">WriteValue</span><span class="br0">&#40;</span><span class="br0">&#40;</span><span class="br0">&#40;</span>IIdentity<span class="sy0">&lt;</span>T<span class="sy0">&gt;</span><span class="br0">&#41;</span><span class="kw1">value</span><span class="br0">&#41;</span><span class="sy0">.</span><span class="me1">RawValue</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp;
&nbsp; &nbsp; <span class="kw1">public</span> <span class="kw1">override</span> <span class="kw4">object</span> ReadJson<span class="br0">&#40;</span>JsonReader reader, Type objectType, <span class="kw4">object</span> existingValue, JsonSerializer serializer<span class="br0">&#41;</span>
&nbsp; &nbsp; <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">if</span> <span class="br0">&#40;</span>reader<span class="sy0">.</span><span class="kw1">Value</span> <span class="sy0">!=</span> <span class="kw1">null</span><span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">var</span> ctor <span class="sy0">=</span> objectType<span class="sy0">.</span><span class="me1">GetConstructor</span><span class="br0">&#40;</span><span class="kw3">new</span> Type<span class="br0">&#91;</span><span class="br0">&#93;</span> <span class="br0">&#123;</span> <span class="kw3">typeof</span><span class="br0">&#40;</span>T<span class="br0">&#41;</span> <span class="br0">&#125;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">var</span> obj <span class="sy0">=</span> ctor<span class="sy0">.</span><span class="me1">Invoke</span><span class="br0">&#40;</span><span class="kw3">new</span> <span class="kw4">object</span><span class="br0">&#91;</span><span class="br0">&#93;</span> <span class="br0">&#123;</span> <span class="br0">&#40;</span>T<span class="br0">&#41;</span>Convert<span class="sy0">.</span><span class="me1">ChangeType</span><span class="br0">&#40;</span>reader<span class="sy0">.</span><span class="kw1">Value</span>, <span class="kw3">typeof</span><span class="br0">&#40;</span>T<span class="br0">&#41;</span><span class="br0">&#41;</span> <span class="br0">&#125;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">return</span> obj<span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">else</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">return</span> <span class="kw1">null</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp;
&nbsp; &nbsp; <span class="kw1">public</span> <span class="kw1">override</span> <span class="kw4">bool</span> CanConvert<span class="br0">&#40;</span>Type objectType<span class="br0">&#41;</span>
&nbsp; &nbsp; <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">return</span> <span class="kw3">typeof</span><span class="br0">&#40;</span>IIdentity<span class="sy0">&lt;</span>T<span class="sy0">&gt;</span><span class="br0">&#41;</span><span class="sy0">.</span><span class="me1">IsAssignableFrom</span><span class="br0">&#40;</span>objectType<span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; <span class="br0">&#125;</span>
<span class="br0">&#125;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">public class IdentityJsonConverter&lt;T&gt; : JsonConverter
{
    public override void WriteJson(JsonWriter writer, object value, JsonSerializer serializer)
    {
        writer.WriteValue(((IIdentity&lt;T&gt;)value).RawValue);
    }

    public override object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer)
    {
        if (reader.Value != null)
        {
            var ctor = objectType.GetConstructor(new Type[] { typeof(T) });
            var obj = ctor.Invoke(new object[] { (T)Convert.ChangeType(reader.Value, typeof(T)) });
            return obj;
        }
        else
        {
            return null;
        }
    }

    public override bool CanConvert(Type objectType)
    {
        return typeof(IIdentity&lt;T&gt;).IsAssignableFrom(objectType);
    }
}</pre></div></div>

<p>How it works:</p>
<p><code>CanConvert</code> identifies any implementations of IIdentity<int> as something this converter can handle. </p>
<p><code>WriteJson</code> is called when JSON.Net is converting to JSON and simply returns the underlying value of my Identity. </p>
<p><code>ReadJson</code> is called to convert from raw JSON to C#. Converting JSON is slightly more complex, as I allow for null values from the client (it doesn&#8217;t generate id&#8217;s) so when the JSON value is null I pass that on as a null Identity. If it&#8217;s not null, I use reflection on the concrete Identity to find the single parameter constructor and invoke it with incoming JSON converted to the expected type (<code>int</code> for the examples above). </p>
<p>If I wasn&#8217;t generating these Identity classes, there would be some risk in assuming the presence of a constructor of that shape. Because I&#8217;m generating it, I can save time because i know it&#8217;s all or nothing, either all of the Identity objects will work or none of them will. </p>
<h2>Employing it in ASP.Net</h2>
<p>To use this custom JSONConverter when ASP.Net is serializing/deserializing Action responses and inputs, I add JSON options to MVC during the ConfigureServics call of Startup:</p>
<p><b>Startup.cs</b></p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="csharp"><thead><tr><td colspan="2"  class="head">C#</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
</pre></td><td class="de1"><pre class="de1"><span class="kw1">public</span> IServiceProvider ConfigureServices<span class="br0">&#40;</span>IServiceCollection services<span class="br0">&#41;</span>
<span class="br0">&#123;</span>
&nbsp; &nbsp; <span class="co1">// Add framework services.</span>
&nbsp; &nbsp; services<span class="sy0">.</span><span class="me1">AddMvc</span><span class="br0">&#40;</span><span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="sy0">.</span><span class="me1">AddJsonOptions</span><span class="br0">&#40;</span>options <span class="sy0">=&gt;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; options<span class="sy0">.</span><span class="me1">SerializerSettings</span><span class="sy0">.</span><span class="me1">Converters</span><span class="sy0">.</span><span class="kw1">Add</span><span class="br0">&#40;</span><span class="kw3">new</span> IdentityJsonConverter<span class="sy0">&lt;</span>Int32<span class="sy0">&gt;</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp;<span class="co1">// ...</span>
<span class="br0">&#125;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">public IServiceProvider ConfigureServices(IServiceCollection services)
{
    // Add framework services.
    services.AddMvc()
            .AddJsonOptions(options =&gt; {
                options.SerializerSettings.Converters.Add(new IdentityJsonConverter&lt;Int32&gt;());
            });

   // ...
}</pre></div></div>

<p>Now all attempts to deserialize a value into an IIdentity property and serialization to respond with one of these values will pass through the custom mapper and I have the benefit of my custom type in my server-side logic without any extra overhead in my client-side app or code to write as I add new models or properties.</p>
]]></content>
			<link rel="replies" type="text/html" href="/index.php/webdev/serverprogramming/aspnet/mapping-complex-types-tofrom-json-with-json-net/#comments" thr:count="1"/>
		<link rel="replies" type="application/atom+xml" href="/index.php/webdev/serverprogramming/aspnet/mapping-complex-types-tofrom-json-with-json-net/feed/atom/" thr:count="1"/>
		<thr:total>1</thr:total>
		</entry>
		<entry>
		<author>
			<name>Eli Weinstock-Herman (tarwn)</name>
					</author>
		<title type="html"><![CDATA[SPA Routing in ASP.Net Core]]></title>
		<link rel="alternate" type="text/html" href="/index.php/webdev/serverprogramming/aspnet/spa-routing-in-asp-net-core/" />
		<id>/?p=8664</id>
		<updated>2017-06-30T11:58:40Z</updated>
		<published>2017-06-30T11:58:40Z</published>
		<category scheme="/" term="ASP.NET" /><category scheme="/" term="C#" /><category scheme="/" term="asp.net core" /><category scheme="/" term="spa" />		<summary type="html"><![CDATA[One of the challenges of SPA applications is making sure a bookmark or hard refresh knows how to load just enough of the content from the server before applying the client-side routing logic to that base page. This is not guaranteed to be the only way to do this, just the one that worked for [&#8230;]]]></summary>
		<content type="html" xml:base="/index.php/webdev/serverprogramming/aspnet/spa-routing-in-asp-net-core/"><![CDATA[<p>One of the challenges of SPA applications is making sure a bookmark or hard refresh knows how to load just enough of the content from the server before applying the client-side routing logic to that base page.</p>
<p>This is not guaranteed to be the only way to do this, just the one that worked for me.</p>
<p><b>Goals:</b><br />
1. Static files to live in &#8220;Assets&#8221; instead of &#8220;wwwroot&#8221;<br />
2. Client-side routes like ~/configure/userScenarios to return ~/index.html when the browser loads them<br />
3. No extra work to remember when I add new configuration pages client-side</p>
<h2>Program.cs &#8211; Rename WebRoot</h2>
<p>In my Program.cs file, I renamed wwwroot to Assets:</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="csharp"><thead><tr><td colspan="2"  class="head">C#</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
</pre></td><td class="de1"><pre class="de1"><span class="kw1">public</span> <span class="kw1">static</span> <span class="kw4">void</span> Main<span class="br0">&#40;</span><span class="kw4">string</span><span class="br0">&#91;</span><span class="br0">&#93;</span> args<span class="br0">&#41;</span>
<span class="br0">&#123;</span>
&nbsp; &nbsp; <span class="kw1">var</span> host <span class="sy0">=</span> <span class="kw3">new</span> WebHostBuilder<span class="br0">&#40;</span><span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="sy0">.</span><span class="me1">UseKestrel</span><span class="br0">&#40;</span><span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="sy0">.</span><span class="me1">UseContentRoot</span><span class="br0">&#40;</span>Directory<span class="sy0">.</span><span class="me1">GetCurrentDirectory</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="sy0">.</span><span class="me1">UseWebRoot</span><span class="br0">&#40;</span><span class="st0">&quot;Assets&quot;</span><span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="sy0">.</span><span class="me1">UseIISIntegration</span><span class="br0">&#40;</span><span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="sy0">.</span><span class="me1">UseStartup</span><span class="sy0">&lt;</span>Startup<span class="sy0">&gt;</span><span class="br0">&#40;</span><span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="sy0">.</span><span class="me1">UseApplicationInsights</span><span class="br0">&#40;</span><span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="sy0">.</span><span class="me1">Build</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; host<span class="sy0">.</span><span class="me1">Run</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
<span class="br0">&#125;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">public static void Main(string[] args)
{
    var host = new WebHostBuilder()
        .UseKestrel()
        .UseContentRoot(Directory.GetCurrentDirectory())
        .UseWebRoot("Assets")
        .UseIISIntegration()
        .UseStartup&lt;Startup&gt;()
        .UseApplicationInsights()
        .Build();

    host.Run();
}</pre></div></div>

<h2>Startup.cs &#8211; Default Files, Assets, Client Routes</h2>
<p>Then in my Startup.cs file I added configuration to load &#8220;index.html&#8221; by default, static files in my &#8220;Assets&#8221; folder, and URL rewriting to rewrite client-side route patterns to the base &#8220;index.html&#8221; file:</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="csharp"><thead><tr><td colspan="2"  class="head">C#</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
</pre></td><td class="de1"><pre class="de1"><span class="kw1">public</span> <span class="kw4">void</span> Configure<span class="br0">&#40;</span>IApplicationBuilder app, IHostingEnvironment env, ILoggerFactory loggerFactory<span class="br0">&#41;</span>
<span class="br0">&#123;</span>
&nbsp; &nbsp;<span class="co1">// ...</span>
&nbsp;
&nbsp; &nbsp; <span class="co1">// rewrite client-side routes to return index.html</span>
&nbsp; &nbsp; <span class="kw1">var</span> options <span class="sy0">=</span> <span class="kw3">new</span> RewriteOptions<span class="br0">&#40;</span><span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="sy0">.</span><span class="me1">AddRewrite</span><span class="br0">&#40;</span><span class="st0">&quot;^testRuns.*&quot;</span>, <span class="st0">&quot;index.html&quot;</span>, skipRemainingRules<span class="sy0">:</span> <span class="kw1">true</span><span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="sy0">.</span><span class="me1">AddRewrite</span><span class="br0">&#40;</span><span class="st0">&quot;^configure/.*&quot;</span>, <span class="st0">&quot;index.html&quot;</span>, skipRemainingRules<span class="sy0">:</span> <span class="kw1">true</span><span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="sy0">.</span><span class="me1">AddRewrite</span><span class="br0">&#40;</span><span class="st0">&quot;^settings/.*&quot;</span>, <span class="st0">&quot;index.html&quot;</span>, skipRemainingRules<span class="sy0">:</span> <span class="kw1">true</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; app<span class="sy0">.</span><span class="me1">UseRewriter</span><span class="br0">&#40;</span>options<span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; <span class="co1">// index.html is the default if a file isn't asked for</span>
&nbsp; &nbsp; app<span class="sy0">.</span><span class="me1">UseDefaultFiles</span><span class="br0">&#40;</span><span class="kw3">new</span> DefaultFilesOptions<span class="br0">&#40;</span><span class="br0">&#41;</span>
&nbsp; &nbsp; <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; DefaultFileNames <span class="sy0">=</span> <span class="kw3">new</span> List<span class="sy0">&lt;</span><span class="kw4">string</span><span class="sy0">&gt;</span><span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span> <span class="st0">&quot;index.html&quot;</span> <span class="br0">&#125;</span>,
&nbsp; &nbsp; &nbsp; &nbsp; FileProvider <span class="sy0">=</span> <span class="kw3">new</span> PhysicalFileProvider<span class="br0">&#40;</span>Path<span class="sy0">.</span><span class="me1">Combine</span><span class="br0">&#40;</span>Directory<span class="sy0">.</span><span class="me1">GetCurrentDirectory</span><span class="br0">&#40;</span><span class="br0">&#41;</span>, <span class="st_h">@&quot;Assets&quot;</span><span class="br0">&#41;</span><span class="br0">&#41;</span>,
&nbsp; &nbsp; &nbsp; &nbsp; RequestPath <span class="sy0">=</span> <span class="kw3">new</span> PathString<span class="br0">&#40;</span><span class="st0">&quot;&quot;</span><span class="br0">&#41;</span>
&nbsp; &nbsp; <span class="br0">&#125;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; <span class="co1">// and all the rest of my static files live in Assets too</span>
&nbsp; &nbsp; app<span class="sy0">.</span><span class="me1">UseStaticFiles</span><span class="br0">&#40;</span><span class="kw3">new</span> StaticFileOptions<span class="br0">&#40;</span><span class="br0">&#41;</span>
&nbsp; &nbsp; <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; FileProvider <span class="sy0">=</span> <span class="kw3">new</span> PhysicalFileProvider<span class="br0">&#40;</span>Path<span class="sy0">.</span><span class="me1">Combine</span><span class="br0">&#40;</span>Directory<span class="sy0">.</span><span class="me1">GetCurrentDirectory</span><span class="br0">&#40;</span><span class="br0">&#41;</span>, <span class="st_h">@&quot;Assets&quot;</span><span class="br0">&#41;</span><span class="br0">&#41;</span>,
&nbsp; &nbsp; &nbsp; &nbsp; RequestPath <span class="sy0">=</span> <span class="kw3">new</span> PathString<span class="br0">&#40;</span><span class="st0">&quot;&quot;</span><span class="br0">&#41;</span>
&nbsp; &nbsp; <span class="br0">&#125;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; <span class="co1">// ...</span>
<span class="br0">&#125;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">public void Configure(IApplicationBuilder app, IHostingEnvironment env, ILoggerFactory loggerFactory)
{
   // ...

    // rewrite client-side routes to return index.html
    var options = new RewriteOptions()
        .AddRewrite("^testRuns.*", "index.html", skipRemainingRules: true)
        .AddRewrite("^configure/.*", "index.html", skipRemainingRules: true)
        .AddRewrite("^settings/.*", "index.html", skipRemainingRules: true);
    app.UseRewriter(options);

    // index.html is the default if a file isn't asked for
    app.UseDefaultFiles(new DefaultFilesOptions()
    {
        DefaultFileNames = new List&lt;string&gt;() { "index.html" },
        FileProvider = new PhysicalFileProvider(Path.Combine(Directory.GetCurrentDirectory(), @"Assets")),
        RequestPath = new PathString("")
    });

    // and all the rest of my static files live in Assets too
    app.UseStaticFiles(new StaticFileOptions()
    {
        FileProvider = new PhysicalFileProvider(Path.Combine(Directory.GetCurrentDirectory(), @"Assets")),
        RequestPath = new PathString("")
    });

    // ...
}</pre></div></div>

<p>I needed two Nuget packages:</p>
<ul>
<li>Install-Package Microsoft.AspNetCore.Rewrite</li>
<li>Install-Package Microsoft.AspNetCore.StaticFiles</li>
</ul>
<p>And the only ongoing work as I add to my application is when I add a new client-side route pattern for a new set of pages.</p>
]]></content>
			<link rel="replies" type="text/html" href="/index.php/webdev/serverprogramming/aspnet/spa-routing-in-asp-net-core/#comments" thr:count="0"/>
		<link rel="replies" type="application/atom+xml" href="/index.php/webdev/serverprogramming/aspnet/spa-routing-in-asp-net-core/feed/atom/" thr:count="0"/>
		<thr:total>0</thr:total>
		</entry>
		<entry>
		<author>
			<name>damber</name>
					</author>
		<title type="html"><![CDATA[Software Development Survey 2017]]></title>
		<link rel="alternate" type="text/html" href="/index.php/webdev/software-development-survey-2017/" />
		<id>/?p=8651</id>
		<updated>2017-05-30T19:28:11Z</updated>
		<published>2017-05-31T17:10:36Z</published>
		<category scheme="/" term="All Blogs" /><category scheme="/" term="Architecture, Design and Strategy" /><category scheme="/" term="Data Management" /><category scheme="/" term="Designing Multi-Application Solutions" /><category scheme="/" term="Designing Software" /><category scheme="/" term="Enterprise Architecture" /><category scheme="/" term="Enterprise Developer" /><category scheme="/" term="Enterprise Development" /><category scheme="/" term="IT Professionals" /><category scheme="/" term="Management" /><category scheme="/" term="Web Developer" />		<summary type="html"><![CDATA[&#160; So, you’re a developer? or an architect? or maybe even a technical delivery manager? Great 🙂 I need you! I’m currently doing some research for an upcoming book, and for a new software product, and who better to ask than those that are building and delivering software solutions each and every day? So I’d like [&#8230;]]]></summary>
		<content type="html" xml:base="/index.php/webdev/software-development-survey-2017/"><![CDATA[<p class="graf graf--p graf-after--figure"><img class="aligncenter size-large wp-image-8652" src="/wp-content/uploads/2017/05/shutterstock_374219557-small-1024x683.jpg" alt="Person having a bright idea" width="800" height="533" srcset="/wp-content/uploads/2017/05/shutterstock_374219557-small-1024x683.jpg 1024w, /wp-content/uploads/2017/05/shutterstock_374219557-small-300x200.jpg 300w, /wp-content/uploads/2017/05/shutterstock_374219557-small-768x512.jpg 768w, /wp-content/uploads/2017/05/shutterstock_374219557-small.jpg 1440w" sizes="(max-width: 800px) 100vw, 800px" /></p>
<p>&nbsp;</p>
<p id="f163" class="graf graf--p graf-after--figure">So, you’re a developer? or an architect? or maybe even a technical delivery manager?</p>
<p id="654c" class="graf graf--p graf-after--p">Great <img src="https://s.w.org/images/core/emoji/2/72x72/1f642.png" alt="🙂" class="wp-smiley" style="height: 1em; max-height: 1em;" /></p>
<p id="e525" class="graf graf--p graf-after--p">I need you!</p>
<p id="4ba4" class="graf graf--p graf-after--p">I’m currently doing some research for an upcoming book, and for a new software product, and who better to ask than those that are building and delivering software solutions each and every day?</p>
<p id="4b38" class="graf graf--p graf-after--p">So I’d like you to share the wisdom of your experience, by filling in a survey that will take you about 10–15 minutes to complete, about your experiences with designing, building, running and managing software. Start-ups and Enterprises both welcome.</p>
<p id="5c00" class="graf graf--p graf-after--p">There is a prize draw for an Amazon Echo, which you can opt into, as a thank-you for taking the time.</p>
<p id="8b54" class="graf graf--p graf-after--p">So, if you design, build or manage software on a regular basis, I would like to hear from you…</p>
<p id="3ecf" class="graf graf--p graf-after--p">Do you think you can help?</p>
<p id="1415" class="graf graf--p graf-after--p graf--trailing"><a class="markup--anchor markup--p-anchor" href="https://enterprisecore.io/page/making-systems-work-survey-2017" target="_blank" rel="noopener">https://enterprisecore.io/page/making-systems-work-survey-2017</a></p>
<p>&nbsp;</p>
<p>&nbsp;</p>
]]></content>
			<link rel="replies" type="text/html" href="/index.php/webdev/software-development-survey-2017/#comments" thr:count="2"/>
		<link rel="replies" type="application/atom+xml" href="/index.php/webdev/software-development-survey-2017/feed/atom/" thr:count="2"/>
		<thr:total>2</thr:total>
		</entry>
		<entry>
		<author>
			<name>Eli Weinstock-Herman (tarwn)</name>
					</author>
		<title type="html"><![CDATA[Creating a Static-Generated Marketing Site]]></title>
		<link rel="alternate" type="text/html" href="/index.php/webdev/creating-a-static-generated-marketing-site/" />
		<id>/?p=8637</id>
		<updated>2017-04-26T21:37:41Z</updated>
		<published>2017-04-26T21:37:41Z</published>
		<category scheme="/" term="Web Developer" /><category scheme="/" term="metalsmith" /><category scheme="/" term="static site generator" />		<summary type="html"><![CDATA[If you&#8217;re working on a free product or startup, you&#8217;re probably thinking frequently about how to balance your time across all the things that need doing. One of those millions of things is getting a marketing site up to tell people about your amazing thing, and do so in a way that looks professional, is [&#8230;]]]></summary>
		<content type="html" xml:base="/index.php/webdev/creating-a-static-generated-marketing-site/"><![CDATA[<p>If you&#8217;re working on a free product or startup, you&#8217;re probably thinking frequently about how to balance your time across all the things that need doing. One of those millions of things is getting a marketing site up to tell people about your amazing thing, and do so in a way that looks professional, is easy to update and redeploy, doesn&#8217;t turn into a whole separate coding project, and so on.</p>
<p>Because I spend cycles thinking about things like this in my free time, I started looking into static site generators as a potential way to balance dynamic-enough with not-building-a-thing and low operational costs. You could have the freedom of hand-editable pages for things like your landing page, something minimal like markdown for blog posts, just enough markup to inject content from those blog posts into your landing page, but not have to build a whole back-end (and pay for extra back-end resources) to run it. </p>
<p>So I decided to build a marketing site structure. It didn&#8217;t take long and you can feel free to grab a copy if you want to shave some time off and start where I left off: <a href="https://github.com/tarwn/StaticMarketingSite" title="tarwn/StaticMarketingSite on github">tarwn/StaticMarketingSite on github</a></p>
<h2>Anatomy of a Marketing Site</h2>
<p>So my goal was to generate a marketing site that looked somewhat like this:</p>
<div id="attachment_8643" style="width: 643px" class="wp-caption aligncenter"><img src="/wp-content/uploads/2017/04/StaticSiteOutline.png" alt="Marketing Site Outline" width="633" height="347" class="size-full wp-image-8643" srcset="/wp-content/uploads/2017/04/StaticSiteOutline.png 633w, /wp-content/uploads/2017/04/StaticSiteOutline-300x164.png 300w" sizes="(max-width: 633px) 100vw, 633px" /><p class="wp-caption-text">Marketing Site Outline</p></div>
<p>Using a static site generator, I could define a common layout to be used on every page, write the guts of the Features, Pricing, About, and Contact pages in static HTML, write HTML with some handlebars logic for the Landing page, and write markdown for the blog posts so I could focus strictly on content.</p>
<p>Lastly, I wanted a simple test, update, and deployment story. </p>
<h2>Current Status</h2>
<p>This is not a final state, but I&#8217;ll outline where I am now and what I&#8217;m considering changing. I&#8217;m using <a href="http://metalsmith.io/">Metalsmith</a> as the static site generator, with a mixture of HTML, Markdown, and <a href="http://handlebarsjs.com/">Handlebars</a> for content and the only local dependencies are <a href="https://nodejs.org/en/">node.js</a> and <a href="https://git-scm.com/">git</a>.</p>
<h3>Build and Deployment</h3>
<p>This is the place I spend the least amount of time now. </p>
<p>After pulling the git repo down to a machine, I run <code>npm install</code> to install metalsmith and it&#8217;s plugins.</p>
<p>To build a fresh version of the site, I run <code>node install.js</code></p>
<p>I also included a basic static webserver so I could test easily: <code>node static_server.js</code> and then point my browser at http://localhost:8888/</p>
<p>Azure Websites support automatic deployment from a git repository, so I added a <code>.deployment</code> file to tell Azure only to serve up the contents of the /build folder. </p>
<div id="attachment_8647" style="width: 628px" class="wp-caption aligncenter"><img src="/wp-content/uploads/2017/04/StatisSiteAzure.png" alt="Azure Deployment Log" width="618" height="298" class="size-full wp-image-8647" srcset="/wp-content/uploads/2017/04/StatisSiteAzure.png 618w, /wp-content/uploads/2017/04/StatisSiteAzure-300x145.png 300w" sizes="(max-width: 618px) 100vw, 618px" /><p class="wp-caption-text">Azure Deployment Log</p></div>
<p>So my workflow is:</p>
<ul>
<li>Start the static server in a console</li>
<li>Make some changes</li>
<li>Re-run  <code>node install.js</code></li>
<li>Refresh my browser</li>
<li>When happy: git commit, git push, wait a few seconds for it to go live</li>
</ul>
<p>I don&#8217;t like the delay of step 3, so I may tighten this up further with a watch task so I can leave the index re-processing automatically in the background every time I save a file and cut down on the delay to seeing it in the browser. Next up would be cooking in a live refresh so I wouldn&#8217;t even need to refresh the browser.</p>
<h3>Adding a blog post</h3>
<p>All it takes to add a new blog post is adding a markdown file to the blogs folder. The file has this format:</p>
<pre>---
title: My Awesome Post Title
date: 2012-08-20
layout: post.html
excerpt: summary of my post
---
Content of my post</pre>
<p>The top section, or &#8220;front matter&#8221;, defines metadata used elsewhere in the build process. A &#8220;draft: true&#8221; value tells metalsmith to skip publishing the entry. The date is used when ordering the posts to decide what should show on the landing page and in the RSS feed. The &#8220;layout&#8221; property tells metalsmith to wrap this in the layouts/post.html content. The &#8220;excerpt&#8221; property is displayed on the landing page and in the RSS feed.</p>
<h3>Additional details</h3>
<p>I included additional details in the README file with the git repo here: <a href="https://github.com/tarwn/StaticMarketingSite/blob/master/README.md">README.md on tarwn/StaticMarketingSite</a></p>
<h2>Building this structure</h2>
<p>I built this site structure using <a href="http://metalsmith.io/">Metalsmith</a>.</p>
<p>1. First I created a package.json file to make it easy to install the same packages on any machine I downloaded this on. Here is the <a href="https://github.com/segmentio/metalsmith/blob/master/examples/static-site/package.json">sample package file</a> I started learning from.</p>
<p>2. Next I decided on a site structure I wanted to target:</p>
<p>/ &#8211; landing page<br />
/about<br />
/contact<br />
/docs<br />
/docs/[doc-name]<br />
/features<br />
/posts<br />
/posts/[post-name]<br />
/pricing<br />
plus a sitemap and a RSS feed</p>
<p>To build this, I used a number of <a href="http://www.metalsmith.io/#the-plugins">Metalsmith plugins</a>.</p>
<p>Here is an annotated version of my index.js file:</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="javascript"><thead><tr><td colspan="2"  class="head">Javascript</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72
73
74
75
76
77
78
79
</pre></td><td class="de1"><pre class="de1">Metalsmith<span class="br0">&#40;</span>__dirname<span class="br0">&#41;</span>
&nbsp; 
&nbsp; <span class="co1">// key/value metadata available for all files in my site</span>
&nbsp; .<span class="me1">metadata</span><span class="br0">&#40;</span><span class="br0">&#123;</span>
&nbsp; &nbsp; title<span class="sy0">:</span> <span class="st0">&quot;My Static Site &amp; Blog&quot;</span><span class="sy0">,</span>
&nbsp; &nbsp; description<span class="sy0">:</span> <span class="st0">&quot;It's about saying »Hello« to the World.&quot;</span><span class="sy0">,</span>
&nbsp; &nbsp; generator<span class="sy0">:</span> <span class="st0">&quot;Metalsmith&quot;</span><span class="sy0">,</span>
&nbsp; &nbsp; url<span class="sy0">:</span> <span class="st0">&quot;http://www.metalsmith.io/&quot;</span><span class="sy0">,</span>
&nbsp;
&nbsp; &nbsp; <span class="co1">// make rss feed happy</span>
&nbsp; &nbsp; site<span class="sy0">:</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; url<span class="sy0">:</span> baseUrl
&nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp; <span class="br0">&#125;</span><span class="br0">&#41;</span>
&nbsp;
&nbsp; <span class="co1">// process files from /src and output them to /build</span>
&nbsp; .<span class="me1">source</span><span class="br0">&#40;</span><span class="st0">'./src'</span><span class="br0">&#41;</span>
&nbsp; .<span class="me1">destination</span><span class="br0">&#40;</span><span class="st0">'./build'</span><span class="br0">&#41;</span>
&nbsp;
&nbsp; <span class="co1">// clean the /build folder before rebuilding</span>
&nbsp; .<span class="me1">clean</span><span class="br0">&#40;</span><span class="kw2">true</span><span class="br0">&#41;</span>
&nbsp;
&nbsp; <span class="co1">// ignore blog posts with &quot;draft: true&quot;</span>
&nbsp; .<span class="me1">use</span><span class="br0">&#40;</span>drafts<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#41;</span>
&nbsp;
&nbsp; <span class="co1">// process markdown files into HTML</span>
&nbsp; .<span class="me1">use</span><span class="br0">&#40;</span>markdown<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#41;</span>
&nbsp;
&nbsp; <span class="co1">// define set of all posts and posts for landing page</span>
&nbsp; .<span class="me1">use</span><span class="br0">&#40;</span>collections<span class="br0">&#40;</span><span class="br0">&#123;</span>
&nbsp; &nbsp; latestPosts<span class="sy0">:</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; pattern<span class="sy0">:</span> <span class="st0">'posts/**/*.html'</span><span class="sy0">,</span>
&nbsp; &nbsp; &nbsp; sortBy<span class="sy0">:</span> <span class="st0">'date'</span><span class="sy0">,</span>
&nbsp; &nbsp; &nbsp; reverse<span class="sy0">:</span> <span class="kw2">true</span><span class="sy0">,</span>
&nbsp; &nbsp; &nbsp; limit<span class="sy0">:</span> <span class="nu0">2</span>
&nbsp; &nbsp; <span class="br0">&#125;</span><span class="sy0">,</span>
&nbsp; &nbsp; posts<span class="sy0">:</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; pattern<span class="sy0">:</span> <span class="st0">'posts/**/*.html'</span><span class="sy0">,</span>
&nbsp; &nbsp; &nbsp; sortBy<span class="sy0">:</span> <span class="st0">'date'</span><span class="sy0">,</span>
&nbsp; &nbsp; &nbsp; reverse<span class="sy0">:</span> <span class="kw2">true</span>
&nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp; <span class="br0">&#125;</span><span class="br0">&#41;</span><span class="br0">&#41;</span>
&nbsp;
&nbsp; <span class="co1">// convert filename.md to filename/index.html </span>
&nbsp; .<span class="me1">use</span><span class="br0">&#40;</span>permalinks<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#41;</span>
&nbsp;
&nbsp; <span class="co1">// process handlebars in content files</span>
&nbsp; .<span class="me1">use</span><span class="br0">&#40;</span>hbtmd<span class="br0">&#40;</span>handlebars<span class="sy0">,</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; pattern<span class="sy0">:</span> <span class="st0">'**/*.html'</span>
&nbsp; <span class="br0">&#125;</span><span class="br0">&#41;</span><span class="br0">&#41;</span>
&nbsp;
&nbsp; <span class="co1">// process handlebars in layout files</span>
&nbsp; .<span class="me1">use</span><span class="br0">&#40;</span>layouts<span class="br0">&#40;</span><span class="br0">&#123;</span>
&nbsp; &nbsp; engine<span class="sy0">:</span> <span class="st0">'handlebars'</span>
&nbsp; <span class="br0">&#125;</span><span class="br0">&#41;</span><span class="br0">&#41;</span>
&nbsp;
&nbsp; <span class="co1">// generate a sitemap file</span>
&nbsp; .<span class="me1">use</span><span class="br0">&#40;</span>sitemap<span class="br0">&#40;</span><span class="br0">&#123;</span>
&nbsp; &nbsp; hostname<span class="sy0">:</span> baseUrl<span class="sy0">,</span>
&nbsp; &nbsp; <span class="co1">// defaults that can be overridden in individual files</span>
&nbsp; &nbsp; changefreq<span class="sy0">:</span> <span class="st0">&quot;monthly&quot;</span><span class="sy0">,</span>
&nbsp; &nbsp; lastmod<span class="sy0">:</span> <span class="kw1">new</span> <span class="kw4">Date</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">,</span>
&nbsp; &nbsp; omitIndex<span class="sy0">:</span> <span class="kw2">true</span>
&nbsp; <span class="br0">&#125;</span><span class="br0">&#41;</span><span class="br0">&#41;</span>
&nbsp;
&nbsp; <span class="co1">// generate an RSS feed from the posts collection</span>
&nbsp; .<span class="me1">use</span><span class="br0">&#40;</span>feed<span class="br0">&#40;</span><span class="br0">&#123;</span>
&nbsp; &nbsp; collection<span class="sy0">:</span> <span class="st0">&quot;posts&quot;</span><span class="sy0">,</span>
&nbsp; &nbsp; limit<span class="sy0">:</span> <span class="nu0">10</span><span class="sy0">,</span>
&nbsp; &nbsp; destination<span class="sy0">:</span> <span class="st0">&quot;rss.xml&quot;</span>
&nbsp; <span class="br0">&#125;</span><span class="br0">&#41;</span><span class="br0">&#41;</span>
&nbsp;
&nbsp; <span class="co1">// switch to &quot;true&quot; for debug output</span>
&nbsp; .<span class="me1">use</span><span class="br0">&#40;</span>debug<span class="br0">&#40;</span><span class="kw2">false</span><span class="br0">&#41;</span><span class="br0">&#41;</span>
&nbsp;
&nbsp; <span class="co1">// and Go!</span>
&nbsp; .<span class="me1">build</span><span class="br0">&#40;</span><span class="kw1">function</span><span class="br0">&#40;</span>err<span class="sy0">,</span> files<span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; <span class="kw1">if</span> <span class="br0">&#40;</span>err<span class="br0">&#41;</span> <span class="br0">&#123;</span> <span class="kw1">throw</span> err<span class="sy0">;</span> <span class="br0">&#125;</span>
<span class="br0">&#125;</span><span class="br0">&#41;</span><span class="sy0">;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">Metalsmith(__dirname)
  
  // key/value metadata available for all files in my site
  .metadata({
    title: "My Static Site &amp; Blog",
    description: "It's about saying »Hello« to the World.",
    generator: "Metalsmith",
    url: "http://www.metalsmith.io/",

    // make rss feed happy
    site: {
      url: baseUrl
    }
  })

  // process files from /src and output them to /build
  .source('./src')
  .destination('./build')

  // clean the /build folder before rebuilding
  .clean(true)

  // ignore blog posts with "draft: true"
  .use(drafts())

  // process markdown files into HTML
  .use(markdown())

  // define set of all posts and posts for landing page
  .use(collections({
    latestPosts: {
      pattern: 'posts/**/*.html',
      sortBy: 'date',
      reverse: true,
      limit: 2
    },
    posts: {
      pattern: 'posts/**/*.html',
      sortBy: 'date',
      reverse: true
    }
  }))

  // convert filename.md to filename/index.html 
  .use(permalinks())

  // process handlebars in content files
  .use(hbtmd(handlebars, {
      pattern: '**/*.html'
  }))

  // process handlebars in layout files
  .use(layouts({
    engine: 'handlebars'
  }))

  // generate a sitemap file
  .use(sitemap({
    hostname: baseUrl,
    // defaults that can be overridden in individual files
    changefreq: "monthly",
    lastmod: new Date(),
    omitIndex: true
  }))

  // generate an RSS feed from the posts collection
  .use(feed({
    collection: "posts",
    limit: 10,
    destination: "rss.xml"
  }))

  // switch to "true" for debug output
  .use(debug(false))

  // and Go!
  .build(function(err, files) {
    if (err) { throw err; }
});</pre></div></div>

<p>You can see the full file here: <a href="https://github.com/tarwn/StaticMarketingSite/blob/master/index.js">index.js on tarwn/StaticMarketingSite</a>.</p>
<h2>Things to Improve</h2>
<p>LESS/SASS/CSS- I left these out on purpose because I think this should reflect the fastest/least friction option for the person building the site</p>
<p>Docs Layouts &#8211; I didn&#8217;t finish docs at all. I feel like this is going to be pretty custom to how someone would want to share information about their product (and what that product is), so it&#8217;s one of the bigger gaps</p>
<p>Image processing, Responsive frameworks, etc &#8211; These are choices that rely heavily on the design of the page, so I didn&#8217;t play with it at all</p>
]]></content>
			<link rel="replies" type="text/html" href="/index.php/webdev/creating-a-static-generated-marketing-site/#comments" thr:count="0"/>
		<link rel="replies" type="application/atom+xml" href="/index.php/webdev/creating-a-static-generated-marketing-site/feed/atom/" thr:count="0"/>
		<thr:total>0</thr:total>
		</entry>
		<entry>
		<author>
			<name>Eli Weinstock-Herman (tarwn)</name>
					</author>
		<title type="html"><![CDATA[Learning Elixir and Phoenix &#8211; Getting a handle on the language]]></title>
		<link rel="alternate" type="text/html" href="/index.php/webdev/learning-elixir-and-phoenix-getting-a-handle-on-the-language/" />
		<id>/?p=8618</id>
		<updated>2017-03-23T12:18:20Z</updated>
		<published>2017-03-23T12:18:20Z</published>
		<category scheme="/" term="Web Developer" /><category scheme="/" term="erlang elixir phoenix" />		<summary type="html"><![CDATA[Recently I started learning Elixir and the Phoenix framework. I&#8217;ve found that mixing hands on programming with reading is the fastest way for me to get up to speed with a new language or framework, so if that&#8217;s your style you might find this useful. In this post I started at zero and ended at [&#8230;]]]></summary>
		<content type="html" xml:base="/index.php/webdev/learning-elixir-and-phoenix-getting-a-handle-on-the-language/"><![CDATA[<p>Recently I started learning Elixir and the Phoenix framework. I&#8217;ve found that mixing hands on programming with reading is the fastest way for me to get up to speed with a new language or framework, so if that&#8217;s your style you might find this useful. In this post I started at zero and ended at being able to write small modules, run unit tests, and work with the interactive console.</p>
<p>Previous Post: <a href="/index.php/webdev/learning-elixir-and-phoenix-environments-and-editors/">Learning Elixir and Phoenix &#8211; Environments and Editors</a></p>
<div style="background-color: #FFFFCC; padding: 1em; margin: .5em; border: 1px solid #EEEEBB; border-left-width: 16px;">Note: I&#8217;m just getting started, so this is not an expert post on the best way to learn Elixir, but closer to a log of the most useful things I used along the way. As I gain experience I&#8217;ll likely have to revisit earlier assumptions and correct myself.</div>
<p>As I stated before, my goal is to get from “barely able to read it” to “able to ship readable, idiomatic, testable apps”. This is the path I took, including problems and successes I ran into along the way. The links I include are probably less than 5% of what I actually read and tried, this is the distilled set I think helped me the most.</p>
<h1>Getting Started &#8211; the interactive console</h1>
<p>My first step was walking through this <a href="http://culttt.com/2016/02/29/getting-started-with-elixir/">Getting Started with Elixir</a> post. It provided some background on Elixir, then walked through the first few commands in the interactive console. It may seem silly, but I duplicated every example in the console myself, trying to start building a little muscle memory on some of the basics.</p>
<p>At this point I didn&#8217;t really know what mix was (think npm for node or nuget for .Net PLUS scaffolding commands from yeoman or .Net Core cli) or why some files have .exs extensions and some only .ex (covered in one of the later resources).</p>
<h1>Learning Syntax</h1>
<p>Next I walked through <a href="http://elixirschool.com/lessons/basics/basics/">Elixir School</a>, working side by side with the examples from the <a href="http://elixirschool.com/lessons/basics/basics/">Basics section</a> through <a href="http://elixirschool.com/lessons/basics/modules/">Modules</a>. In each case, I would try the posted code example, then try 1-2 alternatives. My intent was, again, to try and exercise the syntax and start building a little more understanding of the language.</p>
<p>Here&#8217;s some of the notes I made along the way:</p>
<ul>
<li>String concatenation is weird &lt;&gt;</li>
<li>&#8216;Arity&#8217; -> number of arguments for a function</li>
<li>Enum is the underscore of Elixir</li>
<li>Case default uses the _ to match the final arg &#8211; &#8220;_&#8221; is a variable and it just happens to match anything that made it this far &#8211; Elixir doesn&#8217;t provide warnings for not using variables that belong with underscore</li>
</ul>
<p>So very much trying to fit what I&#8217;m learning from Elixir with what I expect and know from other languages.</p>
<p>As I got to &#8220;with&#8221; and functions, I noticed I was starting to psych myself out. I know a lot of languages and have pushed a lot of code to production, but there&#8217;s this voice in the back of my head that says this is just too different from what I&#8217;m used to working with. That shipping something meaningful is incredibly far away and that I may never be able to understand this language well enough to write it in an idiomatic way.</p>
<p>So I took a break and then came back to it (<a href="https://www.fastcompany.com/3009641/quick-end-decision-fatigue-before-it-drains-your-productivity-reservoir">Decision fatigue</a>?). I was trying to climb a pretty steep learning curve and sometimes the best thing I could do was spend some time away and let the back of my brain digest for a bit.</p>
<h1>Creating a project</h1>
<p>Elixir runs on top of Erlang, which is designed to be a distributed, resilient system. The next stop I made was <a href="http://howistart.org/posts/elixir/1/">How I Start &#8211; Elixir</a>, written by the creator of Elixir, <a href="https://github.com/josevalim" title="José Valim on github">José Valim</a>.</p>
<p>In retrospect, I wasn&#8217;t quite ready for this, but it got me in and writing some code (which was good) and I got some of the basics he was communicating, even if some of the deeper detail didn&#8217;t sink in.</p>
<p>Because this was the most project-y exercise so far, this is also where I started branching out and trying <a href="/index.php/webdev/learning-elixir-and-phoenix-environments-and-editors/">various editors (previous post)</a>. I also ran into issues getting my vagrant host talking to my a running node on my Surface tablet, which some brief searching suggested was probably firewall issues that I didn&#8217;t have the energy to dig into (because who really wants to fart around with debugging firewall issues on Windows in their free time).</p>
<h1>Even more hands on</h1>
<p>To get even more hands on, I purchased the <a href="https://bigmachine.io/products/take-off-with-elixir/">Take Off with Elixir</a> ebook + videos. This promised a fun learning experience building a system, which felt like exactly what I was looking for.</p>
<p>There is a 30 minute preview <a href="https://bigmachine.io/products/take-off-with-elixir/">on the page above</a>. It is worth the time even if you don&#8217;t purchase the video. It helped provide examples of implementation versus idiomatic implementation, filled in some gaps around types, and generally expanded my knowledge in a number of ways.</p>
<p>So I purchased the longer form version and started working along with it. </p>
<p>I had a little confusion about whether I should be starting with the ebook or the videos, so I just started with the video. I rarely pulled down his github examples unless they were necessary to finish an exercise (&#8220;I wrote some additional tests, debug them&#8221;), instead opting to hand write the code as he did, pausing the video if I needed more time. This continued to help reinforce what I was watching and forced me into a couple useful sidetracks, like making the Atom plugins work, identifying an out of date package on one Windows system, and digging deeper in a case where I thought I had solved an equation right but had some minor syntax issues that my new elixir eyes weren&#8217;t seeing.</p>
<p>There were a few cases where I didn&#8217;t quite know what he wanted (&#8220;write some more tests that you think would be useful&#8221;, &#8220;round the number 19&#8221;), so I spent some time doing something similar then moved on. </p>
<p>By the time I made it through chapter 14, I started to get sidetracked again, so this was as far as I made it.</p>
<h1>What&#8217;s Next</h1>
<p>The next two things I&#8217;m doing are writing a small CRUD application, which pushed me into actually doing some Phoenix and Ecto/Postgres stuff, and working through <a href="https://www.manning.com/books/the-little-elixir-and-otp-guidebook">The Little Elixir &amp; OTP Guidebook</a>. As I wrap these up I&#8217;ll provide a refined list of resources and lessons that helped the most and how some of the simplest things (like calling an API) managed to sidetrack me the most.</p>
]]></content>
			<link rel="replies" type="text/html" href="/index.php/webdev/learning-elixir-and-phoenix-getting-a-handle-on-the-language/#comments" thr:count="0"/>
		<link rel="replies" type="application/atom+xml" href="/index.php/webdev/learning-elixir-and-phoenix-getting-a-handle-on-the-language/feed/atom/" thr:count="0"/>
		<thr:total>0</thr:total>
		</entry>
	</feed>
