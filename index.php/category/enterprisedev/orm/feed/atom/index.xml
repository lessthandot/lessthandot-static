<?xml version="1.0" encoding="UTF-8"?><feed
  xmlns="http://www.w3.org/2005/Atom"
  xmlns:thr="http://purl.org/syndication/thread/1.0"
  xml:lang="en-US"
  xml:base="/wp-atom.php"
   >
	<title type="text">ORM &#8211; LessthanDot</title>
	<subtitle type="text">A Technical Community for IT Professionals</subtitle>

	<updated>2019-03-09T12:50:36Z</updated>

	<link rel="alternate" type="text/html" href="/" />
	<id>/index.php/feed/atom/</id>
	<link rel="self" type="application/atom+xml" href="/index.php/category/enterprisedev/orm/feed/atom/" />

	<generator uri="https://wordpress.org/" version="4.6.1">WordPress</generator>
	<entry>
		<author>
			<name>Eli Weinstock-Herman (tarwn)</name>
					</author>
		<title type="html"><![CDATA[Followup on ORMs for Batch Performance]]></title>
		<link rel="alternate" type="text/html" href="/index.php/enterprisedev/orm/followup-on-orms-for-batch/" />
		<id>/index.php/2012/08/followup-on-orms-for-batch/</id>
		<updated>2012-08-06T16:02:00Z</updated>
		<published>2012-08-06T16:02:00Z</published>
		<category scheme="/" term="ORM" /><category scheme="/" term="orm" /><category scheme="/" term="sql server" />		<summary type="html"><![CDATA[A few weeks ago I looked at a project by Luke McGregor that benchmarks a variety of ORMs doing common operations at the 1 to 10,000 record scales. I was curious to see how the ORMs he had included would fare against common ADO methods and how those ADO methods would compare to one another. This is a followup with Simple.Data, PetaPoco, and NHibernate.]]></summary>
		<content type="html" xml:base="/index.php/enterprisedev/orm/followup-on-orms-for-batch/"><![CDATA[<p>A few weeks ago I looked at a project by Luke McGregor (<a href="http://blog.staticvoid.co.nz/" title="static void; blog">blog</a>|<a href="https://twitter.com/staticv0id" title="staticv0id on twitter">twitter</a>) that benchmarks a variety of ORMs doing common operations at the 1 to 10,000 record scales. I was curious to see how the ORMs he had included would fare against common ADO methods and how those ADO methods would compare to one another. </p>
<p>My Original Post: <a href="/index.php/EnterpriseDev/ORM/evaluating-orms-for-batch-data" title="Evaluating ORMs for Batch Data Performance">Evaluating ORMs for Batch Data Performance</a><br />
Source Code: <a href="https://github.com/tarwn/StaticVoid.OrmPerformance" title="My fork of Luke's project on Github">My fork of StaticVoid.OrmPerformance</a></p>
<p>I received a lot of good feedback and suggestions on that post, and implemented all of the additions (except Kermit&#8217;s, oops). While I am still looking primarily at bulk insert performance, I also implemented the other test operations and Luke has pulled most of the changes back into his project (I am behind on issuing a pull request for NHibernate, sorry). This post is a follow-up on those additions with an updated conclusion, if you hadn&#8217;t read the <a href="/index.php/EnterpriseDev/ORM/evaluating-orms-for-batch-data" title="Evaluating ORMs for Batch Data Performance">previous post</a>, it&#8217;s probably still worth a read.</p>
<h2>The Updated Lineup</h2>
<p>The updated lineup for tests now looks like:</p>
<ul>
<li>EntityFramework 4.1
<ul>
<li>Basic Configuration (No optimizations)</li>
<li>AutoDetectChanges Disabled</li>
<li>Tuned</li>
</ul>
</li>
<li>EntityFramework 5.0 beta1
<ul>
<li>Basic Configuration (No optimizations)</li>
<li>AutoDetectChanges Disabled</li>
<li>Proxy Entities</li>
<li>Tuned</li>
</ul>
</li>
<li>Dapper 1.8
<ul>
<li>Dapper Rainbow</li>
<li>My Best effort at making it go fast</li>
<li>Batching inserts/updates using transactions</li>
</ul>
</li>
<li>LINQ to SQL
<ul>
<li>Basic Configuration (No optimizations)</li>
<li>Tuned</li>
</ul>
</li>
<li>NHibernate 3.2.0.4
<ul>
<li>Basic implementation</li>
<li>Stateless + 200 record batches</li>
<li>Stateless + 1000 record batches</li>
</ul>
</li>
<li>PetaPoco 3.04
<ul>
<li>Basic implementation</li>
<li>Batching inserts via transaction</li>
</ul>
</li>
<li>Simple.Data 1.0.0 rc 0
<ul>
<li>Basic implementation</li>
<li>Batch inserts (built-in, automagical)</li>
</ul>
</li>
<li>Raw ADO methods
<ul>
<li>Basic SQL Command</li>
<li>SQL Command w/ Transaction</li>
<li>Bulk insert via SqlDataAdapter</li>
<li>Bulk insert via SqlBulkCopy and SqlBulkCopy w/ Table Lock option</li>
<li>Bulk insert via one really big SQL string (single insert w/ lots of concatenated value statements)</li>
</ul>
</li>
</ul>
<p>Along the way I also updated the project to include more information in failing assertions (the state is asserted after each test is run).</p>
<h2>The Results</h2>
<p>I was simultaneously surprised and not surprised at the results. With Mark Rendle (<a href="http://blog.markrendle.net/" title="Mark's blog">blog</a>|<a href="https://twitter.com/markrendle" title="MarkRendle on twitter">twitter</a>) suggesting I add Simple.Data, I fully expected it to keep up with SqlBulkCopy, but it was still surprising to see the real, raw data.</p>
<div style="text-align: center; color: #666666; font-size: 90%">
	<img src="http://tiernok.com/LTDBlog/ORM/GraphB-1.png" alt="Graph of best bulk insert times for each major method" /><br />
		10,000 row inserts, Best times for each category
</div>
<p>Raw SqlBulkCopy was still the best option for 10,000 records (this is the TabLock option variant), but Simple.Data was right up there with it. PetaPoco and NHibernate are our other new additions and they were fairly close, about 20-25% slower than Dapper, or about 7x the SqlBulkCopy test.</p>
<p>But the important item on this graph really is Simple.Data. There are many that argue that all ORMs are slow and not worth spending time on but this is clearly not so. Simple.Data was a little slower than SqlBulkCopy and much faster than the other raw ADO variants. And it does this with no column mappings, no tricks and no special configurations. That is a huge milestone for ORMs and makes it tempting to use instead of SqlBulkCopy, as this method may actually be less fragile (no column mappings have to be manually defined).</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="csharp"><thead><tr><td colspan="2"  class="head">C#</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
</pre></td><td class="de1"><pre class="de1"><span class="kw1">public</span> BatchConfiguration<span class="br0">&#40;</span>IConnectionString connectionString<span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; _db <span class="sy0">=</span> Database<span class="sy0">.</span><span class="me1">OpenConnection</span><span class="br0">&#40;</span>connectionString<span class="sy0">.</span><span class="me1">FormattedConnectionString</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; _entitiesToInsert <span class="sy0">=</span> <span class="kw3">new</span> List<span class="sy0">&lt;</span>TestEntity<span class="sy0">&gt;</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
<span class="br0">&#125;</span>
&nbsp;
<span class="kw1">public</span> <span class="kw4">void</span> <span class="kw1">Add</span><span class="br0">&#40;</span>TestEntity entity<span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; _entitiesToInsert<span class="sy0">.</span><span class="kw1">Add</span><span class="br0">&#40;</span>entity<span class="br0">&#41;</span><span class="sy0">;</span>
<span class="br0">&#125;</span>
&nbsp; &nbsp; &nbsp; &nbsp; 
<span class="kw1">public</span> <span class="kw4">void</span> Commit<span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; _db<span class="sy0">.</span><span class="me1">TestEntities</span><span class="sy0">.</span><span class="me1">Insert</span><span class="br0">&#40;</span>_entitiesToInsert<span class="br0">&#41;</span><span class="sy0">;</span>
<span class="br0">&#125;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">public BatchConfiguration(IConnectionString connectionString) {
	_db = Database.OpenConnection(connectionString.FormattedConnectionString);
	_entitiesToInsert = new List&lt;TestEntity&gt;();
}

public void Add(TestEntity entity) {
	_entitiesToInsert.Add(entity);
}
		
public void Commit() {
	_db.TestEntities.Insert(_entitiesToInsert);
}</pre></div></div>

<p>Create a connection, add as many items as you want to the list, then call Insert on the whole list. Magic.</p>
<h2>More Detail</h2>
<p>In the last post I included a comparison of all of the various methods used to insert data as a single graph. Unfortunately that graph was hard to read, as the basic Entity Framework methods were operating about an order of magnitude slower than everything else. I still thought the data was interesting, though, so I have created a graph with those values truncated as I did in the original post&#8217;s followup. The one critical difference is that I am plotting the 10,000 record inserts instead of 100,000 like last time. That just took too long to run <img src="https://s.w.org/images/core/emoji/2/72x72/1f642.png" alt="ðŸ™‚" class="wp-smiley" style="height: 1em; max-height: 1em;" /></p>
<div style="text-align: center; color: #666666; font-size: 90%">
	<img src="http://tiernok.com/LTDBlog/ORM/GraphB-2.png" alt="10,000 row inserts, All categories and variants" /><br />
		10,000 row inserts, All categories and variants
</div>
<p>With more details we can see the spread and variation a little more clearly. </p>
<p><b>Big &#8216;Ol String method:</b> One of the other surprises I ran into when doing this was how slow the &#8220;cram it all into one long string&#8221; method was (&#8220;SqlCommand &#8211; Insert Once&#8221; above). This is often suggested as a quick and dirty way to do batch insertion, basically by concatenating all the data into a single long INSERT statement with multiple VALUE rows or UNIONs. At 100 records this option tied with Dapper as the fastest method. Unfortunately it scales really horribly, moving up to nearly last, leading me to believe that people suggesting this method only tested it in lower ranges.</p>
<h2>Conclusions</h2>
<p>In my last post I concluded that I wouldn&#8217;t use an ORM for batch processing, but Simple.Data has forced me to reconsider that statement. Raw speed is not the only measure I would use to select a tool for getting data A into database B, but it is clear that if my requirements include bulk data insertion, ORMs are no longer automatically taken off the table. Congratulations to Mark for making a very clean, very fast way to get a whole lot of data into a database for very little up front effort (and thanks for adding it to my todo list).</p>
]]></content>
			<link rel="replies" type="text/html" href="/index.php/enterprisedev/orm/followup-on-orms-for-batch/#comments" thr:count="2"/>
		<link rel="replies" type="application/atom+xml" href="/index.php/enterprisedev/orm/followup-on-orms-for-batch/feed/atom/" thr:count="2"/>
		<thr:total>2</thr:total>
		</entry>
		<entry>
		<author>
			<name>Eli Weinstock-Herman (tarwn)</name>
					</author>
		<title type="html"><![CDATA[Evaluating ORMs for Batch Data Performance]]></title>
		<link rel="alternate" type="text/html" href="/index.php/enterprisedev/orm/evaluating-orms-for-batch-data/" />
		<id>/index.php/2012/07/evaluating-orms-for-batch-data/</id>
		<updated>2012-07-10T10:32:00Z</updated>
		<published>2012-07-10T10:32:00Z</published>
		<category scheme="/" term="ORM" /><category scheme="/" term="orm" /><category scheme="/" term="sql server" />		<summary type="html"><![CDATA[Earlier this week I came upon a post (Entity Framework Comparative Performance) by Luke McGregor that compared the performance of several ORMs for handling batch data. Given the amount of batch data I've processed, I was curious how those ORM tests would line up against a couple common non-ORM methods.]]></summary>
		<content type="html" xml:base="/index.php/enterprisedev/orm/evaluating-orms-for-batch-data/"><![CDATA[<p>Earlier this week I came upon a post (<a href="http://blog.staticvoid.co.nz/2012/03/entity-framework-comparative.html" title="Entity Framework Comparative Performance at static void; blog">Entity Framework Comparative Performance</a>) by Luke McGregor (<a href="http://blog.staticvoid.co.nz/" title="static void; blog">b</a>|<a href="https://twitter.com/staticv0id" title="staticv0id on twitter">t</a>) that compared the performance of several ORMs for handling batch data. Given the amount of batch data I&#8217;ve processed, I was curious how those ORM tests would line up against a couple common non-ORM methods.</p>
<p>I decided to stick to ADO.Net methods for data and to focus on the insert, as a fast insert can be used to replace updates and deletes. SSIS and bcp would be alternative options, but would require additional setup to test alongside the .Net code.</p>
<div style="background-color: #dddddd; font-style: italic; padding: .5em; margin: bottom: .5em">2012-07-11: In response to a comment below, I added a followup section to the post with a graph showing all the test results in the 100,000 record tests. </div>
<h2>Method</h2>
<p>The method for these tests closely resembles the one Luke followed in his original post. The main exception is that I am using a local SQL Server 2008 R2 instance rather than a remote VM. Unfortunately attempts to run a full test set against my remote SQL Server VM ran into errors each time I tried, generally in the Entity Framework setup, teardown, and assertion code. My local system has a large enough amount of RAM and cores that any impact from running the tests locally should be limited, with only the network constraint removed from the equation.</p>
<h2>Tests</h2>
<p>I focused entirely on the insert tests, adding two new tests to use SqlDataAdapter and SqlBulkCopy. The test lineup then became:</p>
<ul>
<li>EntityFramework 4.1
<ul>
<li>Basic Configuration (No optimizations)</li>
<li>AutoDetectChanges Disabled</li>
<li>Tuned</li>
</ul>
</li>
<li>EntityFramework 5.0 beta1
<ul>
<li>Basic Configuration (No optimizations)</li>
<li>AutoDetectChanges Disabled</li>
<li>Proxy Entities</li>
<li>Tuned</li>
</ul>
</li>
<li>Dapper 1.8
<ul>
<li>Dapper Rainbow</li>
<li>My Best effort at making it go fast</li>
<li>EDIT Batching inserts/updates using transactions</li>
</ul>
</li>
<li>LINQ to SQL
<ul>
<li>Basic Configuration (No optimizations)</li>
<li>Tuned</li>
</ul>
</li>
<li>Raw ADO methods
<ul>
<li>Basic SQL Command</li>
<li>SQL Command w/ Transaction</li>
<li><a href="https://github.com/tarwn/StaticVoid.OrmPerformance/blob/master/Harness.SqlCommand/InsertViaDataAdapterConfiguration.cs" title="Code for the SqlDataAdapter Scenario">SqlDataAdapter</a></li>
<li><a href="https://github.com/tarwn/StaticVoid.OrmPerformance/blob/master/Harness.SqlCommand/InsertSqlBulkConfiguration.cs" title="Code for the SqlBulkCopy method">SqlBulkCopy</a></li>
</ul>
</li>
</ul>
<p><i>The raw code is available on my branch at github: <a href="https://github.com/tarwn/StaticVoid.OrmPerformance">https://github.com/tarwn/StaticVoid.OrmPerformance</a> and the original is located on Luke&#8217;s here: <a href="https://github.com/lukemcgregor/StaticVoid.OrmPerformance">https://github.com/lukemcgregor/StaticVoid.OrmPerformance</a>.</i></p>
<h3>SqlDataAdapter Method</h3>
<p>The SqlDataAdapter method is to create a local DataSet or DataTable then provide this to a SqlDataAdapter with a configured SqlCommand object and parameters. The SqlDataAdapter takes care of the details, getting all the individual rows of data into the database via that insert command. Because we are operating on the full set of data, the test stores all of the values in memory until it is told to commit them.</p>
<h3>SqlBulkCopy Method</h3>
<p>The SqlBulkCopy object is designed to &#8220;let you efficiently bulk load a SQL Server table&#8221; (<a href="http://msdn.microsoft.com/en-us/library/system.data.sqlclient.sqlbulkcopy.aspx" title="MSDN - SQLBulkCopy">MSDN</a>). It provides similar functionality as bcp, but from inside our .Net code and without the format files. This test works similarly to the SqlDataAdapter test, in that it holds the entire DataTable of test data in memory until it is told to commit it in one go (some of the tests are iterative, some are bulk, the test method caters to both).</p>
<h2>Results</h2>
<p>I&#8217;ll admit the results were not that surprising. SqlBulkCopy was the fastest method for inserting larger amounts of data, but had some initial overhead that made it slower for the 1, 10, and 100 record tests. Compared to the best times from the other methods (SqlBulkCopy is the SqlCommand representative in the chart), the performance difference is clear:</p>
<div style="color: #666666; text-align: center; font-size: 90%">
<img src="http://tiernok.com/LTDBlog/ORM/Graph-1.png" alt="Graph of Best Times for 1-10000 records" /><br />
Best Times for 1, 10, 100, 1000, 10000 scenarios
</div>
<p>Extending this to a larger set of 100000 records and the difference is relatively the same. Relative to the prior set of results, SqlBulkCopy is not as much faster on the 100,000 run as it was on the 10,000. It would be interesting to switch to increments of 10,000 and see if there is a pattern to it.</p>
<div style="color: #666666; text-align: center; font-size: 90%">
<img src="http://tiernok.com/LTDBlog/ORM/Graph-2.png" alt="Graph of Best Times for 1-100000 records" /><br />
Best Times for 1, 10, 100, 1000, 10000, 100000 scenarios
</div>
<p>I also thought it was interesting to see how well the tuning improved some of the ORM methods. In the case of Entity Framework, it&#8217;s clear that if you intend to use it for batch data then tuning is a requirement, not an option. The out-of-the-box experience for Entity Framework 4.1 and 5 were roughly an order of magnitude slower than all other tests.</p>
<div style="color: #666666; text-align: center; font-size: 90%">
<img src="http://tiernok.com/LTDBlog/ORM/Graph-3.png" alt="Scaled out to show EF 4.1 and 5 Basic Performance" /><br />
Scaled out to show EF 4.1 and 5 Basic Performance
</div>
<p>The other key indicator is memory. Our two new methods store all the data and send it in a single command, so they will have a higher memory footprint to accommodate that data. The methods that incrementally send the data, like the Dapper scenarios and basic SqlCommand option, will use very little data since they are flushing each addition directly to SQL.</p>
<div style="color: #666666; text-align: center; font-size: 90%">
<img src="http://tiernok.com/LTDBlog/ORM/Graph-4.png" alt="Memory Usage per Test Type" /><br />
Memory Usage per Test Type
</div>
<p>This graph shows the memory/record of the 1000, 10000, and 100000 test runs. As we would expect, the memory/record for the full batch methods is reduced as the overhead is spread across more records. Entity Framework show consistently high memory usage, but the Proxy Entities method does bring it down to just about twice as much as Linq2SQL, which is in turn about 50% higher than the SqlCommand/SqlBulkCopy methods.</p>
<h2>Conclusions</h2>
<p>For pure, batch insertions, I still wouldn&#8217;t use an ORM. These tests show that the ORMs tested are still significantly slower at batch insertion than tools built specifically for bulk operations, like SqlBulkCopy. We&#8217;ve also seen that when we do use an ORM, understanding it&#8217;s performance characteristics and how to tune the ORM can make an enormous difference in how well or poorly it works.</p>
<h2>Follow-up</h2>
<p>Based on Tudor&#8217;s comment below, I&#8217;ve generated a graph of the times for each method in the 100,000 record tests. Unlike the full chart above, I&#8217;ve scaled it to ignore the two basic Entity Framework entries that cause the line chart above to be so unreadable. </p>
<div style="color: #666666; text-align: center; font-size: 90%">
<img src="http://tiernok.com/LTDBlog/ORM/Graph-Followup.png" alt="Readable Execution Times for 1000,000 records" /><br />
Readable Execution Times for 1000,000 records
</div>
<p>Using ADO.Net does not automatically mean better performance than an ORM. SqlBulkCopy does clearly perform better, but using a SqlCommand.ExecuteNonQuery or a SqlAdapter.InsertCommand does not achieve the same level of performance. Many of the ORM tests kept up or outperformed the non-transactional SqlCommand and SqlAdapter tests, and Dapper kept up with the Transactional SqlCommand test. ADO.Net itself is not giving the boost in speed we see from SqlBulkCopy, it&#8217;s the use of a tool that is built specifically for batch processing (all of the rest operate at the row level, ADO.Net or ORM).</p>
]]></content>
			<link rel="replies" type="text/html" href="/index.php/enterprisedev/orm/evaluating-orms-for-batch-data/#comments" thr:count="12"/>
		<link rel="replies" type="application/atom+xml" href="/index.php/enterprisedev/orm/evaluating-orms-for-batch-data/feed/atom/" thr:count="12"/>
		<thr:total>12</thr:total>
		</entry>
		<entry>
		<author>
			<name>Alex Ullrich</name>
					</author>
		<title type="html"><![CDATA[Tweaking NHibernate Mappings at Runtime With a Remapper]]></title>
		<link rel="alternate" type="text/html" href="/index.php/enterprisedev/orm/nhibernate/tweaking-nhibernate-mappings-at-runtime/" />
		<id>/index.php/2011/09/tweaking-nhibernate-mappings-at-runtime/</id>
		<updated>2011-09-08T22:26:00Z</updated>
		<published>2011-09-08T22:26:00Z</published>
		<category scheme="/" term="nHibernate (.Net)" />		<summary type="html"><![CDATA[Every once in a while, especially on legacy systems, you can run into database-specific issues that NHibernate can't get around out of the box.  We've been looking to convert from our current ORM to NHibernate, and run into a couple.  One is self-inflic&#8230;]]></summary>
		<content type="html" xml:base="/index.php/enterprisedev/orm/nhibernate/tweaking-nhibernate-mappings-at-runtime/"><![CDATA[<p>Every once in a while, especially on legacy systems, you can run into database-specific issues that NHibernate can&#8217;t get around out of the box.  We&#8217;ve been looking to convert from our current ORM to NHibernate, and run into a couple.  One is self-inflicted (we use a DB-first codegen approach) and the other is forced on us by differences in the way Oracle and SQL Server handle ID assignment.  So our problems are:</p>
<ol>
<li>NHibernate defaults to a single global sequence on Oracle &#8211; we need a named sequence per table</li>
<li>Table names on oracle can&#8217;t exceed 30 characters</li>
</ol>
<p>We really don&#8217;t want to compile mappings into their own assembly (really 2, that we could switch between), so we looked for alternatives and found a <a href="http://devlicio.us/blogs/krzysztof_kozmic/archive/2009/08/17/adjusting-nhibernate-mapping-for-tests.aspx">Remapper</a> approach on Krystof Kozmic&#8217;s blog.  In a nutshell, this allows you to adjust your (single set of) mappings at runtime to account for platform-specific bits.</p>
<p>So let&#8217;s take a quick look at how these problems can be addressed.Â  First step is to find out if we&#8217;re running against Oracle (we are lucky enough to be able to assume SQL Server if it&#8217;s not Oracle,Â  so it&#8217;s a bit easier).Â  This can be done by examining the Properties dictionary on the configuration (in this case, in the remapper&#8217;s constructor):</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="csharp"><thead><tr><td colspan="2"  class="head">C#</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
</pre></td><td class="de1"><pre class="de1">Remapper <span class="br0">&#40;</span>Configuration configuration<span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; config <span class="sy0">=</span> configuration<span class="sy0">;</span>
&nbsp; &nbsp; isOracle <span class="sy0">=</span> config<span class="sy0">.</span><span class="me1">Properties</span><span class="br0">&#91;</span><span class="st0">&quot;dialect&quot;</span><span class="br0">&#93;</span><span class="sy0">.</span><span class="me1">ToLower</span> <span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">.</span><span class="me1">Contains</span> <span class="br0">&#40;</span><span class="st0">&quot;oracle&quot;</span><span class="br0">&#41;</span><span class="sy0">;</span>
<span class="br0">&#125;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">Remapper (Configuration configuration) {
    config = configuration;
    isOracle = config.Properties["dialect"].ToLower ().Contains ("oracle");
}</pre></div></div>

<p>Once you get this property, you should be able to resolve whatever you need.  You could also get it from the &#8220;connection.driver_class&#8221; property but this seemed more sensible for me.</p>
<p>Once you&#8217;ve got the platform, the fun of remapping begins.  For our purposes we are interested in two collections hanging off the configuration, the class mappings (for adjusting primary table names and removing sequences) and the collection mappings (for adjusting cross-reference table names).  The method will look something like this:</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="csharp"><thead><tr><td colspan="2"  class="head">C#</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
</pre></td><td class="de1"><pre class="de1">Configuration Remap <span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; <span class="kw1">foreach</span> <span class="br0">&#40;</span><span class="kw1">var</span> classMap <span class="kw1">in</span> config<span class="sy0">.</span><span class="me1">ClassMappings</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; RemapTableName <span class="br0">&#40;</span>classMap, isOracle<span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; RemapSequence <span class="br0">&#40;</span>classMap, isOracle<span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp;
&nbsp; &nbsp; <span class="kw1">foreach</span> <span class="br0">&#40;</span><span class="kw1">var</span> collectionMap <span class="kw1">in</span> config<span class="sy0">.</span><span class="me1">CollectionMappings</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; RemapLinkTableName <span class="br0">&#40;</span>collectionMap, isOracle<span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp;
&nbsp; &nbsp; <span class="kw1">return</span> config<span class="sy0">;</span>
<span class="br0">&#125;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">Configuration Remap () {
    foreach (var classMap in config.ClassMappings) {
        RemapTableName (classMap, isOracle);
        RemapSequence (classMap, isOracle);
    }

    foreach (var collectionMap in config.CollectionMappings) {
        RemapLinkTableName (collectionMap, isOracle);
    }

    return config;
}</pre></div></div>

<p>This again is a pretty straightforward flow.  We&#8217;re just applying the necessary remap logic to the two collections one at a time.  It may look weird that everything&#8217;s private, but I hope it will make sense in a minute.</p>
<p>The simplest remapping we are doing is the table name remapping.  Both ClassMaps and Collection(map)s have a table property that we can run the same code against to fix.  The method for remapping looks like this:</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="csharp"><thead><tr><td colspan="2"  class="head">C#</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
</pre></td><td class="de1"><pre class="de1"><span class="kw4">void</span> FixOracleName <span class="br0">&#40;</span>Table table<span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; <span class="kw1">if</span> <span class="br0">&#40;</span>isOracle<span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; table<span class="sy0">.</span><span class="me1">Name</span> <span class="sy0">=</span> table<span class="sy0">.</span><span class="me1">Name</span><span class="sy0">.</span><span class="me1">Substring</span> <span class="br0">&#40;</span><span class="nu0">0</span>, <span class="nu0">30</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; <span class="br0">&#125;</span>
<span class="br0">&#125;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">void FixOracleName (Table table) {
    if (isOracle) {
        table.Name = table.Name.Substring (0, 30);
    }
}</pre></div></div>

<p>Not rocket science.  Remapping the sequences was a bit trickier.  We need to remove the sequence property specified in the mappings for SQL Server, but getting to it proved to be a bit difficult.  There is an Identifier on the ClassMap that seemed to be (and actually was) what we needed, but we had to do some work to do to get it in a form we could use.  The key ended up being casting the Identifier property to a SimpleValue, which NHibernate defines as &#8220;Any value that maps to columns&#8221;.  Once we had a SimpleValue, we were able to access a dictionary called IdentifierGeneratorProperties that lets us remove the sequence element.  The method to remap the sequences ends up looking like this:</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="csharp"><thead><tr><td colspan="2"  class="head">C#</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
</pre></td><td class="de1"><pre class="de1"><span class="kw4">void</span> RemapSequence <span class="br0">&#40;</span>PersistentClass classMap<span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; <span class="kw1">if</span> <span class="br0">&#40;</span>isOracle<span class="br0">&#41;</span> <span class="kw1">return</span><span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; <span class="kw1">if</span> <span class="br0">&#40;</span>classMap<span class="sy0">.</span><span class="me1">Identifier</span><span class="sy0">.</span><span class="me1">IsSimpleValue</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">var</span> simpleVal <span class="sy0">=</span> classMap<span class="sy0">.</span><span class="me1">Identifier</span> <span class="kw1">as</span> SimpleValue<span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; simpleVal<span class="sy0">.</span><span class="me1">IdentifierGeneratorProperties</span><span class="sy0">.</span><span class="kw1">Remove</span> <span class="br0">&#40;</span><span class="st0">&quot;sequence&quot;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; <span class="br0">&#125;</span>
<span class="br0">&#125;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">void RemapSequence (PersistentClass classMap) {
    if (isOracle) return;

    if (classMap.Identifier.IsSimpleValue) {
        var simpleVal = classMap.Identifier as SimpleValue;
        simpleVal.IdentifierGeneratorProperties.Remove ("sequence");
    }
}</pre></div></div>

<p>The last thing to address is the private-ness of everything.  Passing around the isOracle flag between all the methods seems like it could get ugly pretty quick, so it makes sense to figure that out in the constructor and keep it accessible.  However, that could make calling the remap method weird (because on subsequent calls it won&#8217;t actually DO anything).  The class was really intended to be used only once, but I couldn&#8217;t think of a great way to enforce that without creating even more weird flags and what not.  So I limited access to the class to a single static method that looks like this:</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="csharp"><thead><tr><td colspan="2"  class="head">C#</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
</pre></td><td class="de1"><pre class="de1"><span class="kw1">public</span> <span class="kw1">static</span> Configuration Remap <span class="br0">&#40;</span>Configuration config<span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; <span class="kw1">var</span> remapper <span class="sy0">=</span> <span class="kw3">new</span> Remapper <span class="br0">&#40;</span>config<span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; <span class="kw1">return</span> remapper<span class="sy0">.</span><span class="me1">Remap</span> <span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
<span class="br0">&#125;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">public static Configuration Remap (Configuration config) {
    var remapper = new Remapper (config);
    return remapper.Remap ();
}</pre></div></div>

<p>This does make testing kind of rough, but it isn&#8217;t tremendously difficult to create an ad-hoc configuration from code (or serialize one to be used in testing later).  For more complex remapping logic I would probably change the way it&#8217;s structured to allow testing methods one at a time, but for this it seemed a bit silly.  The static method allows it to be called like this (this example from fluent setup for tests that stores the underlying config for use in schema modifications):</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="csharp"><thead><tr><td colspan="2"  class="head">C#</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
</pre></td><td class="de1"><pre class="de1">sessionFactory <span class="sy0">=</span> Fluently<span class="sy0">.</span><span class="me1">Configure</span> <span class="br0">&#40;</span><span class="br0">&#41;</span>
&nbsp; &nbsp; <span class="sy0">.</span><span class="me1">Database</span> <span class="br0">&#40;</span>SQLiteConfiguration<span class="sy0">.</span><span class="me1">Standard</span><span class="sy0">.</span><span class="me1">InMemory</span> <span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">.</span><span class="me1">ShowSql</span> <span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#41;</span>
&nbsp; &nbsp; <span class="sy0">.</span><span class="me1">Mappings</span> <span class="br0">&#40;</span>m <span class="sy0">=&gt;</span> m<span class="sy0">.</span><span class="me1">FluentMappings</span><span class="sy0">.</span><span class="me1">AddFromAssembly</span> <span class="br0">&#40;</span>assemblyContainingMapping<span class="br0">&#41;</span><span class="br0">&#41;</span>
&nbsp; &nbsp; <span class="sy0">.</span><span class="me1">ExposeConfiguration</span> <span class="br0">&#40;</span>cfg <span class="sy0">=&gt;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; cfg <span class="sy0">=</span> Remapper<span class="sy0">.</span><span class="me1">Remap</span> <span class="br0">&#40;</span>cfg<span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; configuration <span class="sy0">=</span> cfg<span class="sy0">;</span>
&nbsp; &nbsp; <span class="br0">&#125;</span><span class="br0">&#41;</span>
&nbsp; &nbsp; <span class="sy0">.</span><span class="me1">BuildSessionFactory</span> <span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">sessionFactory = Fluently.Configure ()
    .Database (SQLiteConfiguration.Standard.InMemory ().ShowSql ())
    .Mappings (m =&gt; m.FluentMappings.AddFromAssembly (assemblyContainingMapping))
    .ExposeConfiguration (cfg =&gt; {
        cfg = Remapper.Remap (cfg);
        configuration = cfg;
    })
    .BuildSessionFactory ();</pre></div></div>

<p>This isn&#8217;t something you&#8217;d really ever want to use if you could avoid it, but in cases like ours this kind of technique can spare you from needing separate sets of mappings for different databases.  Used sparingly, it can be very effective.  I hope this post gets across how easy it is to make adjustments to your NHibernate configuration from code.  I think our case was simple enough to give a glimpse of what&#8217;s possible, without getting bogged down in everything that is in fact possible.  I&#8217;ve linked the entire file (with a txt extension added to appease b2evo) for convenience.</p>
<p><a href="/wp-content/uploads/blogs/EnterpriseDev/Tweaking-NHibernate-Mappings-Remapper/Remapper.cs.txt?mtime=1315527513">Remapper.cs.txt</a></p>
]]></content>
			<link rel="replies" type="text/html" href="/index.php/enterprisedev/orm/nhibernate/tweaking-nhibernate-mappings-at-runtime/#comments" thr:count="2"/>
		<link rel="replies" type="application/atom+xml" href="/index.php/enterprisedev/orm/nhibernate/tweaking-nhibernate-mappings-at-runtime/feed/atom/" thr:count="2"/>
		<thr:total>2</thr:total>
		</entry>
		<entry>
		<author>
			<name>Alex Ullrich</name>
					</author>
		<title type="html"><![CDATA[Quick and Dirty Enum Mapper for Fluent NHibernate]]></title>
		<link rel="alternate" type="text/html" href="/index.php/enterprisedev/appserver/quick-and-dirty-enum-mapper-for-fluent-n/" />
		<id>/index.php/2009/10/quick-and-dirty-enum-mapper-for-fluent-n/</id>
		<updated>2009-10-10T01:54:00Z</updated>
		<published>2009-10-10T01:54:00Z</published>
		<category scheme="/" term="Application Server" /><category scheme="/" term="nHibernate (.Net)" />		<summary type="html"><![CDATA[I ran into a funny issue recently using Fluent NHibernate.  Saw that it was storing enums as Strings in the database, or more accurately storing them as MySQL's Enum Data Type.  I would prefer to store them as integers so that behavior is the same as ot&#8230;]]></summary>
		<content type="html" xml:base="/index.php/enterprisedev/appserver/quick-and-dirty-enum-mapper-for-fluent-n/"><![CDATA[<p>I ran into a funny issue recently using Fluent NHibernate.  Saw that it was storing enums as Strings in the database, or more accurately storing them as MySQL&#8217;s <a href="http://dev.mysql.com/doc/refman/5.0/en/enum.html">Enum Data Type</a>.  I would prefer to store them as integers so that behavior is the same as other databases, and refactoring gets easier.  Hacking around in Fluent NHibernate I found the following:</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="csharp"><thead><tr><td colspan="2"  class="head">C#</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
</pre></td><td class="de1"><pre class="de1">Map<span class="br0">&#40;</span>x <span class="sy0">=&gt;</span> x<span class="sy0">.</span><span class="me1">Property</span><span class="br0">&#41;</span><span class="sy0">.</span><span class="me1">CustomType</span><span class="sy0">&lt;</span>SomeType<span class="sy0">&gt;</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">Map(x =&gt; x.Property).CustomType&lt;SomeType&gt;();</pre></div></div>

<p>It had a slightly different name in the previous versions (I think it was CustomTypeIs), not sure if the same thing happened there (I did not notice it until using the latest).  Anyway I was mapping my properties like shown above, and it seemed all was well.  Until I noticed a strange thing in the SQL written to the output window.  What I was expecting to see was a single select statement for the primary entity, and another three select statements to fill a couple of collections contained in the object.  I saw these, and one unwelcome guest.</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="sql"><thead><tr><td colspan="2"  class="head">SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
</pre></td><td class="de1"><pre class="de1">NHibernate: <span class="kw1">SELECT</span> this_<span class="sy0">.</span>Id <span class="kw1">AS</span> Id12_6_<span class="sy0">,</span> this_<span class="sy0">.</span>AttemptDate <span class="kw1">AS</span> AttemptD2_12_6_<span class="sy0">,</span> this_<span class="sy0">.</span>BatchSize <span class="kw1">AS</span> BatchSize12_6_<span class="sy0">,</span> this_<span class="sy0">.</span>ConditioningTimeDays <span class="kw1">AS</span> Conditio4_12_6_<span class="sy0">,</span> this_<span class="sy0">.</span>TotalBoilTimeMinutes <span class="kw1">AS</span> TotalBoi5_12_6_<span class="sy0">,</span> this_<span class="sy0">.</span>Family <span class="kw1">AS</span> Family12_6_<span class="sy0">,</span> this_<span class="sy0">.</span>FermentationTemperature <span class="kw1">AS</span> Fermenta7_12_6_<span class="sy0">,</span> this_<span class="sy0">.</span>FermentationTimeDays <span class="kw1">AS</span> Fermenta8_12_6_<span class="sy0">,</span> this_<span class="sy0">.</span>FinalGravity <span class="kw1">AS</span> FinalGra9_12_6_<span class="sy0">,</span> this_<span class="sy0">.</span>Name <span class="kw1">AS</span> Name12_6_<span class="sy0">,</span> this_<span class="sy0">.</span>Note <span class="kw1">AS</span> Note12_6_<span class="sy0">,</span> this_<span class="sy0">.</span>OriginalGravity <span class="kw1">AS</span> Origina12_12_6_<span class="sy0">,</span> this_<span class="sy0">.</span>SecondaryFermentationTimeDays <span class="kw1">AS</span> Seconda13_12_6_<span class="sy0">,</span> this_<span class="sy0">.</span><span class="kw1">STYLE</span> <span class="kw1">AS</span> Style12_6_<span class="sy0">,</span> this_<span class="sy0">.</span><span class="kw1">TYPE</span> <span class="kw1">AS</span> Type12_6_<span class="sy0">,</span> this_<span class="sy0">.</span>Brewer_id <span class="kw1">AS</span> Brewer16_12_6_<span class="sy0">,</span> this_<span class="sy0">.</span>Filter_id <span class="kw1">AS</span> Filter17_12_6_<span class="sy0">,</span> this_<span class="sy0">.</span>Lauter_id <span class="kw1">AS</span> Lauter18_12_6_<span class="sy0">,</span> this_<span class="sy0">.</span>Mash_id <span class="kw1">AS</span> Mash19_12_6_<span class="sy0">,</span> this_<span class="sy0">.</span>YeastUsed_id <span class="kw1">AS</span> YeastUsed20_12_6_<span class="sy0">,</span> person2_<span class="sy0">.</span>Id <span class="kw1">AS</span> Id9_0_<span class="sy0">,</span> person2_<span class="sy0">.</span>About <span class="kw1">AS</span> About9_0_<span class="sy0">,</span> person2_<span class="sy0">.</span>Location <span class="kw1">AS</span> Location9_0_<span class="sy0">,</span> person2_<span class="sy0">.</span>DateOfBirth <span class="kw1">AS</span> DateOfBi4_9_0_<span class="sy0">,</span> person2_<span class="sy0">.</span>Email <span class="kw1">AS</span> Email9_0_<span class="sy0">,</span> person2_<span class="sy0">.</span>UserName <span class="kw1">AS</span> UserName9_0_<span class="sy0">,</span> person2_<span class="sy0">.</span><span class="kw1">TYPE</span> <span class="kw1">AS</span> Type9_0_<span class="sy0">,</span> filter3_<span class="sy0">.</span>Id <span class="kw1">AS</span> Id2_1_<span class="sy0">,</span> filter3_<span class="sy0">.</span><span class="kw1">TYPE</span> <span class="kw1">AS</span> Type2_1_<span class="sy0">,</span> filter3_<span class="sy0">.</span>Note <span class="kw1">AS</span> Note2_1_<span class="sy0">,</span> lauter4_<span class="sy0">.</span>Id <span class="kw1">AS</span> Id6_2_<span class="sy0">,</span> lauter4_<span class="sy0">.</span>SpargeType <span class="kw1">AS</span> SpargeType6_2_<span class="sy0">,</span> lauter4_<span class="sy0">.</span>Volume <span class="kw1">AS</span> Volume6_2_<span class="sy0">,</span> lauter4_<span class="sy0">.</span>Note <span class="kw1">AS</span> Note6_2_<span class="sy0">,</span> mash5_<span class="sy0">.</span>Id <span class="kw1">AS</span> Id16_3_<span class="sy0">,</span> mash5_<span class="sy0">.</span>MashInTemp <span class="kw1">AS</span> MashInTemp16_3_<span class="sy0">,</span> mash5_<span class="sy0">.</span>MashOutTemp <span class="kw1">AS</span> MashOutT3_16_3_<span class="sy0">,</span> mash5_<span class="sy0">.</span>Note <span class="kw1">AS</span> Note16_3_<span class="sy0">,</span> mash5_<span class="sy0">.</span>Volume <span class="kw1">AS</span> Volume16_3_<span class="sy0">,</span> yeastuse6_<span class="sy0">.</span>Id <span class="kw1">AS</span> Id15_4_<span class="sy0">,</span> yeastuse6_<span class="sy0">.</span>Note <span class="kw1">AS</span> Note15_4_<span class="sy0">,</span> yeastuse6_<span class="sy0">.</span>StarterTime <span class="kw1">AS</span> StarterT3_15_4_<span class="sy0">,</span> yeastuse6_<span class="sy0">.</span>StarterUsed <span class="kw1">AS</span> StarterU4_15_4_<span class="sy0">,</span> yeastuse6_<span class="sy0">.</span>YeastUsed_id <span class="kw1">AS</span> YeastUsed5_15_4_<span class="sy0">,</span> yeast7_<span class="sy0">.</span>Id <span class="kw1">AS</span> Id14_5_<span class="sy0">,</span> yeast7_<span class="sy0">.</span>Brand <span class="kw1">AS</span> Brand14_5_<span class="sy0">,</span> yeast7_<span class="sy0">.</span>Description <span class="kw1">AS</span> Descript3_14_5_<span class="sy0">,</span> yeast7_<span class="sy0">.</span>Strain <span class="kw1">AS</span> Strain14_5_<span class="sy0">,</span> yeast7_<span class="sy0">.</span><span class="kw1">STYLE</span> <span class="kw1">AS</span> Style14_5_ <span class="kw1">FROM</span> <span class="st0">`Recipe`</span> this_ <span class="kw1">LEFT</span> <span class="kw1">OUTER</span> <span class="kw1">JOIN</span> <span class="st0">`Person`</span> person2_ <span class="kw1">ON</span> this_<span class="sy0">.</span>Brewer_id<span class="sy0">=</span>person2_<span class="sy0">.</span>Id <span class="kw1">LEFT</span> <span class="kw1">OUTER</span> <span class="kw1">JOIN</span> <span class="st0">`Filter`</span> filter3_ <span class="kw1">ON</span> this_<span class="sy0">.</span>Filter_id<span class="sy0">=</span>filter3_<span class="sy0">.</span>Id <span class="kw1">LEFT</span> <span class="kw1">OUTER</span> <span class="kw1">JOIN</span> <span class="st0">`Lauter`</span> lauter4_ <span class="kw1">ON</span> this_<span class="sy0">.</span>Lauter_id<span class="sy0">=</span>lauter4_<span class="sy0">.</span>Id <span class="kw1">LEFT</span> <span class="kw1">OUTER</span> <span class="kw1">JOIN</span> <span class="st0">`Mash`</span> mash5_ <span class="kw1">ON</span> this_<span class="sy0">.</span>Mash_id<span class="sy0">=</span>mash5_<span class="sy0">.</span>Id <span class="kw1">LEFT</span> <span class="kw1">OUTER</span> <span class="kw1">JOIN</span> <span class="st0">`YeastUse`</span> yeastuse6_ <span class="kw1">ON</span> this_<span class="sy0">.</span>YeastUsed_id<span class="sy0">=</span>yeastuse6_<span class="sy0">.</span>Id <span class="kw1">LEFT</span> <span class="kw1">OUTER</span> <span class="kw1">JOIN</span> <span class="st0">`Yeast`</span> yeast7_ <span class="kw1">ON</span> yeastuse6_<span class="sy0">.</span>YeastUsed_id<span class="sy0">=</span>yeast7_<span class="sy0">.</span>Id
NHibernate: <span class="kw1">SELECT</span> maltsused0_<span class="sy0">.</span>Recipe_id <span class="kw1">AS</span> Recipe8_1_<span class="sy0">,</span> maltsused0_<span class="sy0">.</span>Id <span class="kw1">AS</span> Id1_<span class="sy0">,</span> maltsused0_<span class="sy0">.</span>Id <span class="kw1">AS</span> Id8_0_<span class="sy0">,</span> maltsused0_<span class="sy0">.</span>AddTime <span class="kw1">AS</span> AddTime8_0_<span class="sy0">,</span> maltsused0_<span class="sy0">.</span>BoilTime <span class="kw1">AS</span> BoilTime8_0_<span class="sy0">,</span> maltsused0_<span class="sy0">.</span>Note <span class="kw1">AS</span> Note8_0_<span class="sy0">,</span> maltsused0_<span class="sy0">.</span>Quantity <span class="kw1">AS</span> Quantity8_0_<span class="sy0">,</span> maltsused0_<span class="sy0">.</span>WhenUsed <span class="kw1">AS</span> WhenUsed8_0_<span class="sy0">,</span> maltsused0_<span class="sy0">.</span>MaltUsed_id <span class="kw1">AS</span> MaltUsed7_8_0_ <span class="kw1">FROM</span> <span class="st0">`MaltUse`</span> maltsused0_ <span class="kw1">WHERE</span> maltsused0_<span class="sy0">.</span>Recipe_id<span class="sy0">=</span>?p0;?p0 <span class="sy0">=</span> <span class="nu0">1</span>
NHibernate: <span class="kw1">SELECT</span> hopsused0_<span class="sy0">.</span>Recipe_id <span class="kw1">AS</span> Recipe9_1_<span class="sy0">,</span> hopsused0_<span class="sy0">.</span>Id <span class="kw1">AS</span> Id1_<span class="sy0">,</span> hopsused0_<span class="sy0">.</span>Id <span class="kw1">AS</span> Id4_0_<span class="sy0">,</span> hopsused0_<span class="sy0">.</span>AddTime <span class="kw1">AS</span> AddTime4_0_<span class="sy0">,</span> hopsused0_<span class="sy0">.</span>BoilTime <span class="kw1">AS</span> BoilTime4_0_<span class="sy0">,</span> hopsused0_<span class="sy0">.</span>HopIngredientType <span class="kw1">AS</span> HopIngre4_4_0_<span class="sy0">,</span> hopsused0_<span class="sy0">.</span>Note <span class="kw1">AS</span> Note4_0_<span class="sy0">,</span> hopsused0_<span class="sy0">.</span>Quantity <span class="kw1">AS</span> Quantity4_0_<span class="sy0">,</span> hopsused0_<span class="sy0">.</span>WhenUsed <span class="kw1">AS</span> WhenUsed4_0_<span class="sy0">,</span> hopsused0_<span class="sy0">.</span>HopUsed_id <span class="kw1">AS</span> HopUsed8_4_0_ <span class="kw1">FROM</span> <span class="st0">`HopUse`</span> hopsused0_ <span class="kw1">WHERE</span> hopsused0_<span class="sy0">.</span>Recipe_id<span class="sy0">=</span>?p0;?p0 <span class="sy0">=</span> <span class="nu0">1</span>
NHibernate: <span class="kw1">SELECT</span> additionsu0_<span class="sy0">.</span>Recipe_id <span class="kw1">AS</span> Recipe8_2_<span class="sy0">,</span> additionsu0_<span class="sy0">.</span>Id <span class="kw1">AS</span> Id2_<span class="sy0">,</span> additionsu0_<span class="sy0">.</span>Id <span class="kw1">AS</span> Id1_1_<span class="sy0">,</span> additionsu0_<span class="sy0">.</span>AddTime <span class="kw1">AS</span> AddTime1_1_<span class="sy0">,</span> additionsu0_<span class="sy0">.</span>BoilTime <span class="kw1">AS</span> BoilTime1_1_<span class="sy0">,</span> additionsu0_<span class="sy0">.</span>Note <span class="kw1">AS</span> Note1_1_<span class="sy0">,</span> additionsu0_<span class="sy0">.</span>Quantity <span class="kw1">AS</span> Quantity1_1_<span class="sy0">,</span> additionsu0_<span class="sy0">.</span>WhenUsed <span class="kw1">AS</span> WhenUsed1_1_<span class="sy0">,</span> additionsu0_<span class="sy0">.</span>AdditionUsed_id <span class="kw1">AS</span> Addition7_1_1_<span class="sy0">,</span> addition1_<span class="sy0">.</span>Id <span class="kw1">AS</span> Id0_0_<span class="sy0">,</span> addition1_<span class="sy0">.</span>Brand <span class="kw1">AS</span> Brand0_0_<span class="sy0">,</span> addition1_<span class="sy0">.</span>Description <span class="kw1">AS</span> Descript3_0_0_<span class="sy0">,</span> addition1_<span class="sy0">.</span>Name <span class="kw1">AS</span> Name0_0_ <span class="kw1">FROM</span> <span class="st0">`AdditionUse`</span> additionsu0_ <span class="kw1">LEFT</span> <span class="kw1">OUTER</span> <span class="kw1">JOIN</span> <span class="st0">`Addition`</span> addition1_ <span class="kw1">ON</span> additionsu0_<span class="sy0">.</span>AdditionUsed_id<span class="sy0">=</span>addition1_<span class="sy0">.</span>Id <span class="kw1">WHERE</span> additionsu0_<span class="sy0">.</span>Recipe_id<span class="sy0">=</span>?p0;?p0 <span class="sy0">=</span> <span class="nu0">1</span>
NHibernate: <span class="kw1">UPDATE</span> <span class="st0">`HopUse`</span> <span class="kw1">SET</span> AddTime <span class="sy0">=</span> ?p0<span class="sy0">,</span> BoilTime <span class="sy0">=</span> ?p1<span class="sy0">,</span> HopIngredientType <span class="sy0">=</span> ?p2<span class="sy0">,</span> Note <span class="sy0">=</span> ?p3<span class="sy0">,</span> Quantity <span class="sy0">=</span> ?p4<span class="sy0">,</span> WhenUsed <span class="sy0">=</span> ?p5<span class="sy0">,</span> HopUsed_id <span class="sy0">=</span> ?p6 <span class="kw1">WHERE</span> Id <span class="sy0">=</span> ?p7;?p0 <span class="sy0">=</span> <span class="nu0">15</span><span class="sy0">,</span> ?p1 <span class="sy0">=</span> <span class="nu0">45</span><span class="sy0">,</span> ?p2 <span class="sy0">=</span> <span class="nu0">0</span><span class="sy0">,</span> ?p3 <span class="sy0">=</span> <span class="st0">'note'</span><span class="sy0">,</span> ?p4 <span class="sy0">=</span> <span class="nu0">56.6990462</span><span class="sy0">,</span> ?p5 <span class="sy0">=</span> <span class="nu0">3</span><span class="sy0">,</span> ?p6 <span class="sy0">=</span> <span class="kw1">NULL</span><span class="sy0">,</span> ?p7 <span class="sy0">=</span> <span class="nu0">2</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">NHibernate: SELECT this_.Id AS Id12_6_, this_.AttemptDate AS AttemptD2_12_6_, this_.BatchSize AS BatchSize12_6_, this_.ConditioningTimeDays AS Conditio4_12_6_, this_.TotalBoilTimeMinutes AS TotalBoi5_12_6_, this_.Family AS Family12_6_, this_.FermentationTemperature AS Fermenta7_12_6_, this_.FermentationTimeDays AS Fermenta8_12_6_, this_.FinalGravity AS FinalGra9_12_6_, this_.Name AS Name12_6_, this_.Note AS Note12_6_, this_.OriginalGravity AS Origina12_12_6_, this_.SecondaryFermentationTimeDays AS Seconda13_12_6_, this_.Style AS Style12_6_, this_.Type AS Type12_6_, this_.Brewer_id AS Brewer16_12_6_, this_.Filter_id AS Filter17_12_6_, this_.Lauter_id AS Lauter18_12_6_, this_.Mash_id AS Mash19_12_6_, this_.YeastUsed_id AS YeastUsed20_12_6_, person2_.Id AS Id9_0_, person2_.About AS About9_0_, person2_.Location AS Location9_0_, person2_.DateOfBirth AS DateOfBi4_9_0_, person2_.Email AS Email9_0_, person2_.UserName AS UserName9_0_, person2_.Type AS Type9_0_, filter3_.Id AS Id2_1_, filter3_.Type AS Type2_1_, filter3_.Note AS Note2_1_, lauter4_.Id AS Id6_2_, lauter4_.SpargeType AS SpargeType6_2_, lauter4_.Volume AS Volume6_2_, lauter4_.Note AS Note6_2_, mash5_.Id AS Id16_3_, mash5_.MashInTemp AS MashInTemp16_3_, mash5_.MashOutTemp AS MashOutT3_16_3_, mash5_.Note AS Note16_3_, mash5_.Volume AS Volume16_3_, yeastuse6_.Id AS Id15_4_, yeastuse6_.Note AS Note15_4_, yeastuse6_.StarterTime AS StarterT3_15_4_, yeastuse6_.StarterUsed AS StarterU4_15_4_, yeastuse6_.YeastUsed_id AS YeastUsed5_15_4_, yeast7_.Id AS Id14_5_, yeast7_.Brand AS Brand14_5_, yeast7_.Description AS Descript3_14_5_, yeast7_.Strain AS Strain14_5_, yeast7_.Style AS Style14_5_ FROM `Recipe` this_ LEFT OUTER JOIN `Person` person2_ ON this_.Brewer_id=person2_.Id LEFT OUTER JOIN `Filter` filter3_ ON this_.Filter_id=filter3_.Id LEFT OUTER JOIN `Lauter` lauter4_ ON this_.Lauter_id=lauter4_.Id LEFT OUTER JOIN `Mash` mash5_ ON this_.Mash_id=mash5_.Id LEFT OUTER JOIN `YeastUse` yeastuse6_ ON this_.YeastUsed_id=yeastuse6_.Id LEFT OUTER JOIN `Yeast` yeast7_ ON yeastuse6_.YeastUsed_id=yeast7_.Id
NHibernate: SELECT maltsused0_.Recipe_id as Recipe8_1_, maltsused0_.Id as Id1_, maltsused0_.Id as Id8_0_, maltsused0_.AddTime as AddTime8_0_, maltsused0_.BoilTime as BoilTime8_0_, maltsused0_.Note as Note8_0_, maltsused0_.Quantity as Quantity8_0_, maltsused0_.WhenUsed as WhenUsed8_0_, maltsused0_.MaltUsed_id as MaltUsed7_8_0_ FROM `MaltUse` maltsused0_ WHERE maltsused0_.Recipe_id=?p0;?p0 = 1
NHibernate: SELECT hopsused0_.Recipe_id as Recipe9_1_, hopsused0_.Id as Id1_, hopsused0_.Id as Id4_0_, hopsused0_.AddTime as AddTime4_0_, hopsused0_.BoilTime as BoilTime4_0_, hopsused0_.HopIngredientType as HopIngre4_4_0_, hopsused0_.Note as Note4_0_, hopsused0_.Quantity as Quantity4_0_, hopsused0_.WhenUsed as WhenUsed4_0_, hopsused0_.HopUsed_id as HopUsed8_4_0_ FROM `HopUse` hopsused0_ WHERE hopsused0_.Recipe_id=?p0;?p0 = 1
NHibernate: SELECT additionsu0_.Recipe_id as Recipe8_2_, additionsu0_.Id as Id2_, additionsu0_.Id as Id1_1_, additionsu0_.AddTime as AddTime1_1_, additionsu0_.BoilTime as BoilTime1_1_, additionsu0_.Note as Note1_1_, additionsu0_.Quantity as Quantity1_1_, additionsu0_.WhenUsed as WhenUsed1_1_, additionsu0_.AdditionUsed_id as Addition7_1_1_, addition1_.Id as Id0_0_, addition1_.Brand as Brand0_0_, addition1_.Description as Descript3_0_0_, addition1_.Name as Name0_0_ FROM `AdditionUse` additionsu0_ left outer join `Addition` addition1_ on additionsu0_.AdditionUsed_id=addition1_.Id WHERE additionsu0_.Recipe_id=?p0;?p0 = 1
NHibernate: UPDATE `HopUse` SET AddTime = ?p0, BoilTime = ?p1, HopIngredientType = ?p2, Note = ?p3, Quantity = ?p4, WhenUsed = ?p5, HopUsed_id = ?p6 WHERE Id = ?p7;?p0 = 15, ?p1 = 45, ?p2 = 0, ?p3 = 'note', ?p4 = 56.6990462, ?p5 = 3, ?p6 = NULL, ?p7 = 2</pre></div></div>

<p>Now, what the heck is that update doing there?  A quick googling showed that it is a common problem associated with flushing the session.  The test method shown even has a killer name: <a href="http://nhforge.org/blogs/nhibernate/archive/2008/10/20/how-test-your-mappings-the-ghostbuster.aspx">The Ghostbuster</a>.  In a nutshell it means that if something needs to be done behind the scenes that &#8220;changes&#8221; a property on your object (like converting an integer to an enum) the object is marked as dirty and when the session is flushed it will need to be updated.  You can see how this would get expensive!</p>
<p>That&#8217;s all well and good, but how to fix it?  The first thing that came to mind was a mapping convention for enums.  But I ran into another problem there &#8211; the examples I saw for setting up conventions used the IProperty class, <a href="http://stackoverflow.com/questions/729456/argument-type-fluentnhibernate-mapping-iproperty-is-not-cls-compliant">which is not cls-compliant</a>.  I&#8217;m running on Mono, so this was not an option for me.  Going back to the drawing board, I remembered the IUserType from &#8220;old school&#8221; NHibernate (<a href="http://www.lostechies.com/blogs/rhouston/archive/2008/03/23/mapping-strings-to-booleans-using-nhibernate-s-iusertype.aspx">ably explained here</a>).</p>
<p>I didn&#8217;t want to have to do this for every enum in the application &#8211; something I could use more widely was in order.  Unable to find any examples (could be weak google-fu) I decided to try my own.  I ended up with a generic class called &#8220;EnumMapper&#8221; implementing the IUserType interface, that looks awfully similar to Ray Houston&#8217;s example cited above.  It isn&#8217;t perfect (I think I might be able to go back and clean it up some) but its not too awful I don&#8217;t think.  It might just be getting too late for me, but I couldn&#8217;t think of a good way to limit it to enums.  Anyway, it does its job as long as I don&#8217;t give it a bad parameter.  Here it is in all its ugliness:</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="csharp"><thead><tr><td colspan="2"  class="head">C#</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
</pre></td><td class="de1"><pre class="de1"><span class="kw1">public</span> <span class="kw4">class</span> EnumMapper<span class="sy0">&lt;</span>T<span class="sy0">&gt;</span> <span class="sy0">:</span> IUserType
<span class="br0">&#123;</span>
&nbsp; &nbsp; <span class="kw1">public</span> Boolean IsMutable <span class="br0">&#123;</span> <span class="kw1">get</span> <span class="br0">&#123;</span> <span class="kw1">return</span> <span class="kw1">false</span><span class="sy0">;</span> <span class="br0">&#125;</span> <span class="br0">&#125;</span>
&nbsp; &nbsp; <span class="kw1">public</span> Type ReturnedType <span class="br0">&#123;</span> <span class="kw1">get</span> <span class="br0">&#123;</span> <span class="kw1">return</span> <span class="kw3">typeof</span><span class="br0">&#40;</span>T<span class="br0">&#41;</span><span class="sy0">;</span> <span class="br0">&#125;</span> <span class="br0">&#125;</span>
&nbsp; &nbsp; <span class="kw1">public</span> SqlType<span class="br0">&#91;</span><span class="br0">&#93;</span> SqlTypes <span class="br0">&#123;</span> <span class="kw1">get</span> <span class="br0">&#123;</span> <span class="kw1">return</span> <span class="kw3">new</span><span class="br0">&#91;</span><span class="br0">&#93;</span> <span class="br0">&#123;</span> SqlTypeFactory<span class="sy0">.</span><span class="me1">Int16</span> <span class="br0">&#125;</span><span class="sy0">;</span> <span class="br0">&#125;</span> <span class="br0">&#125;</span>
&nbsp;
&nbsp; &nbsp; <span class="kw1">public</span> <span class="kw4">object</span> NullSafeGet<span class="br0">&#40;</span>IDataReader rs, <span class="kw4">string</span><span class="br0">&#91;</span><span class="br0">&#93;</span> names, <span class="kw4">object</span> owner<span class="br0">&#41;</span>
&nbsp; &nbsp; <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">var</span> tmp <span class="sy0">=</span> NHibernateUtil<span class="sy0">.</span><span class="me1">Int32</span><span class="sy0">.</span><span class="me1">NullSafeGet</span><span class="br0">&#40;</span>rs, names<span class="br0">&#91;</span><span class="nu0">0</span><span class="br0">&#93;</span><span class="br0">&#41;</span><span class="sy0">.</span><span class="me1">ToString</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">return</span> <span class="kw4">Enum</span><span class="sy0">.</span><span class="me1">Parse</span><span class="br0">&#40;</span><span class="kw3">typeof</span><span class="br0">&#40;</span>T<span class="br0">&#41;</span>, tmp<span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp;
&nbsp; &nbsp; <span class="kw1">public</span> <span class="kw4">void</span> NullSafeSet<span class="br0">&#40;</span>IDbCommand cmd, <span class="kw4">object</span> <span class="kw1">value</span>, <span class="kw4">int</span> index<span class="br0">&#41;</span>
&nbsp; &nbsp; <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">if</span> <span class="br0">&#40;</span><span class="kw1">value</span> <span class="sy0">==</span> <span class="kw1">null</span><span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#40;</span><span class="br0">&#40;</span>IDataParameter<span class="br0">&#41;</span>cmd<span class="sy0">.</span><span class="me1">Parameters</span><span class="br0">&#91;</span>index<span class="br0">&#93;</span><span class="br0">&#41;</span><span class="sy0">.</span><span class="kw1">Value</span> <span class="sy0">=</span> DBNull<span class="sy0">.</span><span class="kw1">Value</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">else</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#40;</span><span class="br0">&#40;</span>IDataParameter<span class="br0">&#41;</span>cmd<span class="sy0">.</span><span class="me1">Parameters</span><span class="br0">&#91;</span>index<span class="br0">&#93;</span><span class="br0">&#41;</span><span class="sy0">.</span><span class="kw1">Value</span> <span class="sy0">=</span> <span class="br0">&#40;</span>Int32<span class="br0">&#41;</span><span class="kw1">value</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp;
&nbsp; &nbsp; <span class="kw1">public</span> <span class="kw4">object</span> DeepCopy<span class="br0">&#40;</span><span class="kw4">object</span> <span class="kw1">value</span><span class="br0">&#41;</span>
&nbsp; &nbsp; <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">return</span> <span class="kw1">value</span><span class="sy0">;</span>
&nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp;
&nbsp; &nbsp; <span class="kw1">public</span> <span class="kw4">object</span> Replace<span class="br0">&#40;</span><span class="kw4">object</span> original, <span class="kw4">object</span> target, <span class="kw4">object</span> owner<span class="br0">&#41;</span>
&nbsp; &nbsp; <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">return</span> original<span class="sy0">;</span>
&nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp;
&nbsp; &nbsp; <span class="kw1">public</span> <span class="kw4">object</span> Assemble<span class="br0">&#40;</span><span class="kw4">object</span> cached, <span class="kw4">object</span> owner<span class="br0">&#41;</span>
&nbsp; &nbsp; <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">return</span> cached<span class="sy0">;</span>
&nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp;
&nbsp; &nbsp; <span class="kw1">public</span> <span class="kw4">object</span> Disassemble<span class="br0">&#40;</span><span class="kw4">object</span> <span class="kw1">value</span><span class="br0">&#41;</span>
&nbsp; &nbsp; <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">return</span> <span class="kw1">value</span><span class="sy0">;</span>
&nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp;
&nbsp; &nbsp; <span class="kw1">public</span> <span class="kw3">new</span> <span class="kw4">bool</span> Equals<span class="br0">&#40;</span><span class="kw4">object</span> x, <span class="kw4">object</span> y<span class="br0">&#41;</span>
&nbsp; &nbsp; <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">if</span> <span class="br0">&#40;</span>ReferenceEquals<span class="br0">&#40;</span>x, y<span class="br0">&#41;</span><span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">return</span> <span class="kw1">true</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">if</span> <span class="br0">&#40;</span>x <span class="sy0">==</span> <span class="kw1">null</span> <span class="sy0">||</span> y <span class="sy0">==</span> <span class="kw1">null</span><span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">return</span> <span class="kw1">false</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">return</span> x<span class="sy0">.</span><span class="me1">Equals</span><span class="br0">&#40;</span>y<span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp;
&nbsp; &nbsp; <span class="kw1">public</span> <span class="kw4">int</span> GetHashCode<span class="br0">&#40;</span><span class="kw4">object</span> x<span class="br0">&#41;</span>
&nbsp; &nbsp; <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">return</span> x <span class="sy0">==</span> <span class="kw1">null</span> <span class="sy0">?</span> <span class="kw3">typeof</span><span class="br0">&#40;</span>T<span class="br0">&#41;</span><span class="sy0">.</span><span class="me1">GetHashCode</span><span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="sy0">:</span> x<span class="sy0">.</span><span class="me1">GetHashCode</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; <span class="br0">&#125;</span>
<span class="br0">&#125;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">public class EnumMapper&lt;T&gt; : IUserType
{
    public Boolean IsMutable { get { return false; } }
    public Type ReturnedType { get { return typeof(T); } }
    public SqlType[] SqlTypes { get { return new[] { SqlTypeFactory.Int16 }; } }

    public object NullSafeGet(IDataReader rs, string[] names, object owner)
    {
        var tmp = NHibernateUtil.Int32.NullSafeGet(rs, names[0]).ToString();

        return Enum.Parse(typeof(T), tmp);
    }

    public void NullSafeSet(IDbCommand cmd, object value, int index)
    {
        if (value == null)
        {
            ((IDataParameter)cmd.Parameters[index]).Value = DBNull.Value;
        }
        else
        {
            ((IDataParameter)cmd.Parameters[index]).Value = (Int32)value;
        }
    }

    public object DeepCopy(object value)
    {
        return value;
    }

    public object Replace(object original, object target, object owner)
    {
        return original;
    }

    public object Assemble(object cached, object owner)
    {
        return cached;
    }

    public object Disassemble(object value)
    {
        return value;
    }

    public new bool Equals(object x, object y)
    {
        if (ReferenceEquals(x, y))
        {
            return true;
        }

        if (x == null || y == null)
        {
            return false;
        }

        return x.Equals(y);
    }

    public int GetHashCode(object x)
    {
        return x == null ? typeof(T).GetHashCode() : x.GetHashCode();
    }
}</pre></div></div>

<p>I hope to clean this up eventually, but it looks like it will work for now.  The mapping was changed to look like this:</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="csharp"><thead><tr><td colspan="2"  class="head">C#</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
</pre></td><td class="de1"><pre class="de1">Map<span class="br0">&#40;</span>x <span class="sy0">=&gt;</span> x<span class="sy0">.</span><span class="me1">Property</span><span class="br0">&#41;</span><span class="sy0">.</span><span class="me1">CustomType</span><span class="sy0">&lt;</span>EnumMapper<span class="sy0">&lt;</span>SomeType<span class="sy0">&gt;&gt;</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">Map(x =&gt; x.Property).CustomType&lt;EnumMapper&lt;SomeType&gt;&gt;();</pre></div></div>

<p>I started up the app and checked the output again, and saw just what I was looking for:</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="sql"><thead><tr><td colspan="2"  class="head">SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
</pre></td><td class="de1"><pre class="de1">NHibernate: <span class="kw1">SELECT</span> this_<span class="sy0">.</span>Id <span class="kw1">AS</span> Id12_6_<span class="sy0">,</span> this_<span class="sy0">.</span>AttemptDate <span class="kw1">AS</span> AttemptD2_12_6_<span class="sy0">,</span> this_<span class="sy0">.</span>BatchSize <span class="kw1">AS</span> BatchSize12_6_<span class="sy0">,</span> this_<span class="sy0">.</span>ConditioningTimeDays <span class="kw1">AS</span> Conditio4_12_6_<span class="sy0">,</span> this_<span class="sy0">.</span>TotalBoilTimeMinutes <span class="kw1">AS</span> TotalBoi5_12_6_<span class="sy0">,</span> this_<span class="sy0">.</span>Family <span class="kw1">AS</span> Family12_6_<span class="sy0">,</span> this_<span class="sy0">.</span>FermentationTemperature <span class="kw1">AS</span> Fermenta7_12_6_<span class="sy0">,</span> this_<span class="sy0">.</span>FermentationTimeDays <span class="kw1">AS</span> Fermenta8_12_6_<span class="sy0">,</span> this_<span class="sy0">.</span>FinalGravity <span class="kw1">AS</span> FinalGra9_12_6_<span class="sy0">,</span> this_<span class="sy0">.</span>Name <span class="kw1">AS</span> Name12_6_<span class="sy0">,</span> this_<span class="sy0">.</span>Note <span class="kw1">AS</span> Note12_6_<span class="sy0">,</span> this_<span class="sy0">.</span>OriginalGravity <span class="kw1">AS</span> Origina12_12_6_<span class="sy0">,</span> this_<span class="sy0">.</span>SecondaryFermentationTimeDays <span class="kw1">AS</span> Seconda13_12_6_<span class="sy0">,</span> this_<span class="sy0">.</span><span class="kw1">STYLE</span> <span class="kw1">AS</span> Style12_6_<span class="sy0">,</span> this_<span class="sy0">.</span><span class="kw1">TYPE</span> <span class="kw1">AS</span> Type12_6_<span class="sy0">,</span> this_<span class="sy0">.</span>Brewer_id <span class="kw1">AS</span> Brewer16_12_6_<span class="sy0">,</span> this_<span class="sy0">.</span>Filter_id <span class="kw1">AS</span> Filter17_12_6_<span class="sy0">,</span> this_<span class="sy0">.</span>Lauter_id <span class="kw1">AS</span> Lauter18_12_6_<span class="sy0">,</span> this_<span class="sy0">.</span>Mash_id <span class="kw1">AS</span> Mash19_12_6_<span class="sy0">,</span> this_<span class="sy0">.</span>YeastUsed_id <span class="kw1">AS</span> YeastUsed20_12_6_<span class="sy0">,</span> person2_<span class="sy0">.</span>Id <span class="kw1">AS</span> Id9_0_<span class="sy0">,</span> person2_<span class="sy0">.</span>About <span class="kw1">AS</span> About9_0_<span class="sy0">,</span> person2_<span class="sy0">.</span>Location <span class="kw1">AS</span> Location9_0_<span class="sy0">,</span> person2_<span class="sy0">.</span>DateOfBirth <span class="kw1">AS</span> DateOfBi4_9_0_<span class="sy0">,</span> person2_<span class="sy0">.</span>Email <span class="kw1">AS</span> Email9_0_<span class="sy0">,</span> person2_<span class="sy0">.</span>UserName <span class="kw1">AS</span> UserName9_0_<span class="sy0">,</span> person2_<span class="sy0">.</span><span class="kw1">TYPE</span> <span class="kw1">AS</span> Type9_0_<span class="sy0">,</span> filter3_<span class="sy0">.</span>Id <span class="kw1">AS</span> Id2_1_<span class="sy0">,</span> filter3_<span class="sy0">.</span><span class="kw1">TYPE</span> <span class="kw1">AS</span> Type2_1_<span class="sy0">,</span> filter3_<span class="sy0">.</span>Note <span class="kw1">AS</span> Note2_1_<span class="sy0">,</span> lauter4_<span class="sy0">.</span>Id <span class="kw1">AS</span> Id6_2_<span class="sy0">,</span> lauter4_<span class="sy0">.</span>SpargeType <span class="kw1">AS</span> SpargeType6_2_<span class="sy0">,</span> lauter4_<span class="sy0">.</span>Volume <span class="kw1">AS</span> Volume6_2_<span class="sy0">,</span> lauter4_<span class="sy0">.</span>Note <span class="kw1">AS</span> Note6_2_<span class="sy0">,</span> mash5_<span class="sy0">.</span>Id <span class="kw1">AS</span> Id16_3_<span class="sy0">,</span> mash5_<span class="sy0">.</span>MashInTemp <span class="kw1">AS</span> MashInTemp16_3_<span class="sy0">,</span> mash5_<span class="sy0">.</span>MashOutTemp <span class="kw1">AS</span> MashOutT3_16_3_<span class="sy0">,</span> mash5_<span class="sy0">.</span>Note <span class="kw1">AS</span> Note16_3_<span class="sy0">,</span> mash5_<span class="sy0">.</span>Volume <span class="kw1">AS</span> Volume16_3_<span class="sy0">,</span> yeastuse6_<span class="sy0">.</span>Id <span class="kw1">AS</span> Id15_4_<span class="sy0">,</span> yeastuse6_<span class="sy0">.</span>Note <span class="kw1">AS</span> Note15_4_<span class="sy0">,</span> yeastuse6_<span class="sy0">.</span>StarterTime <span class="kw1">AS</span> StarterT3_15_4_<span class="sy0">,</span> yeastuse6_<span class="sy0">.</span>StarterUsed <span class="kw1">AS</span> StarterU4_15_4_<span class="sy0">,</span> yeastuse6_<span class="sy0">.</span>YeastUsed_id <span class="kw1">AS</span> YeastUsed5_15_4_<span class="sy0">,</span> yeast7_<span class="sy0">.</span>Id <span class="kw1">AS</span> Id14_5_<span class="sy0">,</span> yeast7_<span class="sy0">.</span>Brand <span class="kw1">AS</span> Brand14_5_<span class="sy0">,</span> yeast7_<span class="sy0">.</span>Description <span class="kw1">AS</span> Descript3_14_5_<span class="sy0">,</span> yeast7_<span class="sy0">.</span>Strain <span class="kw1">AS</span> Strain14_5_<span class="sy0">,</span> yeast7_<span class="sy0">.</span><span class="kw1">STYLE</span> <span class="kw1">AS</span> Style14_5_ <span class="kw1">FROM</span> <span class="st0">`Recipe`</span> this_ <span class="kw1">LEFT</span> <span class="kw1">OUTER</span> <span class="kw1">JOIN</span> <span class="st0">`Person`</span> person2_ <span class="kw1">ON</span> this_<span class="sy0">.</span>Brewer_id<span class="sy0">=</span>person2_<span class="sy0">.</span>Id <span class="kw1">LEFT</span> <span class="kw1">OUTER</span> <span class="kw1">JOIN</span> <span class="st0">`Filter`</span> filter3_ <span class="kw1">ON</span> this_<span class="sy0">.</span>Filter_id<span class="sy0">=</span>filter3_<span class="sy0">.</span>Id <span class="kw1">LEFT</span> <span class="kw1">OUTER</span> <span class="kw1">JOIN</span> <span class="st0">`Lauter`</span> lauter4_ <span class="kw1">ON</span> this_<span class="sy0">.</span>Lauter_id<span class="sy0">=</span>lauter4_<span class="sy0">.</span>Id <span class="kw1">LEFT</span> <span class="kw1">OUTER</span> <span class="kw1">JOIN</span> <span class="st0">`Mash`</span> mash5_ <span class="kw1">ON</span> this_<span class="sy0">.</span>Mash_id<span class="sy0">=</span>mash5_<span class="sy0">.</span>Id <span class="kw1">LEFT</span> <span class="kw1">OUTER</span> <span class="kw1">JOIN</span> <span class="st0">`YeastUse`</span> yeastuse6_ <span class="kw1">ON</span> this_<span class="sy0">.</span>YeastUsed_id<span class="sy0">=</span>yeastuse6_<span class="sy0">.</span>Id <span class="kw1">LEFT</span> <span class="kw1">OUTER</span> <span class="kw1">JOIN</span> <span class="st0">`Yeast`</span> yeast7_ <span class="kw1">ON</span> yeastuse6_<span class="sy0">.</span>YeastUsed_id<span class="sy0">=</span>yeast7_<span class="sy0">.</span>Id
NHibernate: <span class="kw1">SELECT</span> maltsused0_<span class="sy0">.</span>Recipe_id <span class="kw1">AS</span> Recipe8_1_<span class="sy0">,</span> maltsused0_<span class="sy0">.</span>Id <span class="kw1">AS</span> Id1_<span class="sy0">,</span> maltsused0_<span class="sy0">.</span>Id <span class="kw1">AS</span> Id8_0_<span class="sy0">,</span> maltsused0_<span class="sy0">.</span>AddTime <span class="kw1">AS</span> AddTime8_0_<span class="sy0">,</span> maltsused0_<span class="sy0">.</span>BoilTime <span class="kw1">AS</span> BoilTime8_0_<span class="sy0">,</span> maltsused0_<span class="sy0">.</span>Note <span class="kw1">AS</span> Note8_0_<span class="sy0">,</span> maltsused0_<span class="sy0">.</span>Quantity <span class="kw1">AS</span> Quantity8_0_<span class="sy0">,</span> maltsused0_<span class="sy0">.</span>WhenUsed <span class="kw1">AS</span> WhenUsed8_0_<span class="sy0">,</span> maltsused0_<span class="sy0">.</span>MaltUsed_id <span class="kw1">AS</span> MaltUsed7_8_0_ <span class="kw1">FROM</span> <span class="st0">`MaltUse`</span> maltsused0_ <span class="kw1">WHERE</span> maltsused0_<span class="sy0">.</span>Recipe_id<span class="sy0">=</span>?p0;?p0 <span class="sy0">=</span> <span class="nu0">1</span>
NHibernate: <span class="kw1">SELECT</span> hopsused0_<span class="sy0">.</span>Recipe_id <span class="kw1">AS</span> Recipe8_1_<span class="sy0">,</span> hopsused0_<span class="sy0">.</span>Id <span class="kw1">AS</span> Id1_<span class="sy0">,</span> hopsused0_<span class="sy0">.</span>Id <span class="kw1">AS</span> Id4_0_<span class="sy0">,</span> hopsused0_<span class="sy0">.</span>AddTime <span class="kw1">AS</span> AddTime4_0_<span class="sy0">,</span> hopsused0_<span class="sy0">.</span>BoilTime <span class="kw1">AS</span> BoilTime4_0_<span class="sy0">,</span> hopsused0_<span class="sy0">.</span>Note <span class="kw1">AS</span> Note4_0_<span class="sy0">,</span> hopsused0_<span class="sy0">.</span>Quantity <span class="kw1">AS</span> Quantity4_0_<span class="sy0">,</span> hopsused0_<span class="sy0">.</span>WhenUsed <span class="kw1">AS</span> WhenUsed4_0_<span class="sy0">,</span> hopsused0_<span class="sy0">.</span>HopUsed_id <span class="kw1">AS</span> HopUsed7_4_0_ <span class="kw1">FROM</span> <span class="st0">`HopUse`</span> hopsused0_ <span class="kw1">WHERE</span> hopsused0_<span class="sy0">.</span>Recipe_id<span class="sy0">=</span>?p0;?p0 <span class="sy0">=</span> <span class="nu0">1</span>
NHibernate: <span class="kw1">SELECT</span> additionsu0_<span class="sy0">.</span>Recipe_id <span class="kw1">AS</span> Recipe8_2_<span class="sy0">,</span> additionsu0_<span class="sy0">.</span>Id <span class="kw1">AS</span> Id2_<span class="sy0">,</span> additionsu0_<span class="sy0">.</span>Id <span class="kw1">AS</span> Id1_1_<span class="sy0">,</span> additionsu0_<span class="sy0">.</span>AddTime <span class="kw1">AS</span> AddTime1_1_<span class="sy0">,</span> additionsu0_<span class="sy0">.</span>BoilTime <span class="kw1">AS</span> BoilTime1_1_<span class="sy0">,</span> additionsu0_<span class="sy0">.</span>Note <span class="kw1">AS</span> Note1_1_<span class="sy0">,</span> additionsu0_<span class="sy0">.</span>Quantity <span class="kw1">AS</span> Quantity1_1_<span class="sy0">,</span> additionsu0_<span class="sy0">.</span>WhenUsed <span class="kw1">AS</span> WhenUsed1_1_<span class="sy0">,</span> additionsu0_<span class="sy0">.</span>AdditionUsed_id <span class="kw1">AS</span> Addition7_1_1_<span class="sy0">,</span> addition1_<span class="sy0">.</span>Id <span class="kw1">AS</span> Id0_0_<span class="sy0">,</span> addition1_<span class="sy0">.</span>Brand <span class="kw1">AS</span> Brand0_0_<span class="sy0">,</span> addition1_<span class="sy0">.</span>Description <span class="kw1">AS</span> Descript3_0_0_<span class="sy0">,</span> addition1_<span class="sy0">.</span>Name <span class="kw1">AS</span> Name0_0_ <span class="kw1">FROM</span> <span class="st0">`AdditionUse`</span> additionsu0_ <span class="kw1">LEFT</span> <span class="kw1">OUTER</span> <span class="kw1">JOIN</span> <span class="st0">`Addition`</span> addition1_ <span class="kw1">ON</span> additionsu0_<span class="sy0">.</span>AdditionUsed_id<span class="sy0">=</span>addition1_<span class="sy0">.</span>Id <span class="kw1">WHERE</span> additionsu0_<span class="sy0">.</span>Recipe_id<span class="sy0">=</span>?p0;?p0 <span class="sy0">=</span> <span class="nu0">1</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">NHibernate: SELECT this_.Id as Id12_6_, this_.AttemptDate as AttemptD2_12_6_, this_.BatchSize as BatchSize12_6_, this_.ConditioningTimeDays as Conditio4_12_6_, this_.TotalBoilTimeMinutes as TotalBoi5_12_6_, this_.Family as Family12_6_, this_.FermentationTemperature as Fermenta7_12_6_, this_.FermentationTimeDays as Fermenta8_12_6_, this_.FinalGravity as FinalGra9_12_6_, this_.Name as Name12_6_, this_.Note as Note12_6_, this_.OriginalGravity as Origina12_12_6_, this_.SecondaryFermentationTimeDays as Seconda13_12_6_, this_.Style as Style12_6_, this_.Type as Type12_6_, this_.Brewer_id as Brewer16_12_6_, this_.Filter_id as Filter17_12_6_, this_.Lauter_id as Lauter18_12_6_, this_.Mash_id as Mash19_12_6_, this_.YeastUsed_id as YeastUsed20_12_6_, person2_.Id as Id9_0_, person2_.About as About9_0_, person2_.Location as Location9_0_, person2_.DateOfBirth as DateOfBi4_9_0_, person2_.Email as Email9_0_, person2_.UserName as UserName9_0_, person2_.Type as Type9_0_, filter3_.Id as Id2_1_, filter3_.Type as Type2_1_, filter3_.Note as Note2_1_, lauter4_.Id as Id6_2_, lauter4_.SpargeType as SpargeType6_2_, lauter4_.Volume as Volume6_2_, lauter4_.Note as Note6_2_, mash5_.Id as Id16_3_, mash5_.MashInTemp as MashInTemp16_3_, mash5_.MashOutTemp as MashOutT3_16_3_, mash5_.Note as Note16_3_, mash5_.Volume as Volume16_3_, yeastuse6_.Id as Id15_4_, yeastuse6_.Note as Note15_4_, yeastuse6_.StarterTime as StarterT3_15_4_, yeastuse6_.StarterUsed as StarterU4_15_4_, yeastuse6_.YeastUsed_id as YeastUsed5_15_4_, yeast7_.Id as Id14_5_, yeast7_.Brand as Brand14_5_, yeast7_.Description as Descript3_14_5_, yeast7_.Strain as Strain14_5_, yeast7_.Style as Style14_5_ FROM `Recipe` this_ left outer join `Person` person2_ on this_.Brewer_id=person2_.Id left outer join `Filter` filter3_ on this_.Filter_id=filter3_.Id left outer join `Lauter` lauter4_ on this_.Lauter_id=lauter4_.Id left outer join `Mash` mash5_ on this_.Mash_id=mash5_.Id left outer join `YeastUse` yeastuse6_ on this_.YeastUsed_id=yeastuse6_.Id left outer join `Yeast` yeast7_ on yeastuse6_.YeastUsed_id=yeast7_.Id
NHibernate: SELECT maltsused0_.Recipe_id as Recipe8_1_, maltsused0_.Id as Id1_, maltsused0_.Id as Id8_0_, maltsused0_.AddTime as AddTime8_0_, maltsused0_.BoilTime as BoilTime8_0_, maltsused0_.Note as Note8_0_, maltsused0_.Quantity as Quantity8_0_, maltsused0_.WhenUsed as WhenUsed8_0_, maltsused0_.MaltUsed_id as MaltUsed7_8_0_ FROM `MaltUse` maltsused0_ WHERE maltsused0_.Recipe_id=?p0;?p0 = 1
NHibernate: SELECT hopsused0_.Recipe_id as Recipe8_1_, hopsused0_.Id as Id1_, hopsused0_.Id as Id4_0_, hopsused0_.AddTime as AddTime4_0_, hopsused0_.BoilTime as BoilTime4_0_, hopsused0_.Note as Note4_0_, hopsused0_.Quantity as Quantity4_0_, hopsused0_.WhenUsed as WhenUsed4_0_, hopsused0_.HopUsed_id as HopUsed7_4_0_ FROM `HopUse` hopsused0_ WHERE hopsused0_.Recipe_id=?p0;?p0 = 1
NHibernate: SELECT additionsu0_.Recipe_id as Recipe8_2_, additionsu0_.Id as Id2_, additionsu0_.Id as Id1_1_, additionsu0_.AddTime as AddTime1_1_, additionsu0_.BoilTime as BoilTime1_1_, additionsu0_.Note as Note1_1_, additionsu0_.Quantity as Quantity1_1_, additionsu0_.WhenUsed as WhenUsed1_1_, additionsu0_.AdditionUsed_id as Addition7_1_1_, addition1_.Id as Id0_0_, addition1_.Brand as Brand0_0_, addition1_.Description as Descript3_0_0_, addition1_.Name as Name0_0_ FROM `AdditionUse` additionsu0_ left outer join `Addition` addition1_ on additionsu0_.AdditionUsed_id=addition1_.Id WHERE additionsu0_.Recipe_id=?p0;?p0 = 1</pre></div></div>

<p>The ghost update is gone!  It ain&#8217;t pretty but its&#8217; getting the job done.  At least until the next time I break it <img src="https://s.w.org/images/core/emoji/2/72x72/1f644.png" alt="ðŸ™„" class="wp-smiley" style="height: 1em; max-height: 1em;" />  If anyone knows a better way, I would love to hear it.</p>
]]></content>
			<link rel="replies" type="text/html" href="/index.php/enterprisedev/appserver/quick-and-dirty-enum-mapper-for-fluent-n/#comments" thr:count="1"/>
		<link rel="replies" type="application/atom+xml" href="/index.php/enterprisedev/appserver/quick-and-dirty-enum-mapper-for-fluent-n/feed/atom/" thr:count="1"/>
		<thr:total>1</thr:total>
		</entry>
	</feed>
