<?xml version="1.0" encoding="UTF-8"?><rss version="2.0"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:atom="http://www.w3.org/2005/Atom"
	xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
	xmlns:slash="http://purl.org/rss/1.0/modules/slash/"
	>

<channel>
	<title>Instrumentation &#8211; LessthanDot</title>
	<atom:link href="/index.php/category/enterprisedev/instrumentation/feed/" rel="self" type="application/rss+xml" />
	<link>/</link>
	<description>A Technical Community for IT Professionals</description>
	<lastBuildDate>Sat, 09 Mar 2019 12:50:36 +0000</lastBuildDate>
	<language>en-US</language>
	<sy:updatePeriod>hourly</sy:updatePeriod>
	<sy:updateFrequency>1</sy:updateFrequency>
	<generator>https://wordpress.org/?v=4.6.1</generator>
	<item>
		<title>Metrics as a Service &#8211; Librato Metrics</title>
		<link>/index.php/enterprisedev/instrumentation/metrics-as-a-service-librato/</link>
		<comments>/index.php/enterprisedev/instrumentation/metrics-as-a-service-librato/#respond</comments>
		<pubDate>Wed, 15 Aug 2012 10:06:00 +0000</pubDate>
		<dc:creator><![CDATA[Eli Weinstock-Herman (tarwn)]]></dc:creator>
				<category><![CDATA[Instrumentation]]></category>

		<guid isPermaLink="false">/index.php/2012/08/metrics-as-a-service-librato/</guid>
		<description><![CDATA[Several weeks ago I posted a three part series on the ability to use available online logging services for instrumenting applications. None of the services overwhelmed me, but there was an additional service I found that caters specifically to numeric metrics. Given that I've had a tab sitting open on the Librato site for the past several weeks, I thought it was time to actually do the review.]]></description>
				<content:encoded><![CDATA[<p>Several weeks ago I posted a <a href="/index.php/EnterpriseDev/instrumentation/monitoring-and-logging-as-a-service" title="Monitoring and Logging as a Service - Introduction">three</a> <a href="/index.php/EnterpriseDev/instrumentation/monitoring-and-logging-as-a-service-common-bits" title="Monitoring and Logging as a Service - The Common Bits">part</a> <a href="/index.php/EnterpriseDev/instrumentation/monitoring-and-logging-reviews" title="Monitoring and Logging as a Service - Reviews">series</a> on the ability to use available online logging services for instrumenting applications. None of the services overwhelmed me, but there was an additional service I found that caters specifically to numeric metrics. Given that I&#8217;ve had a tab sitting open on the <a href="https://metrics.librato.com/">Librato site</a> for the past several weeks, I thought it was time to actually do the review.</p>
<div style="color: #666666; text-align: center; font-size: 90%">
	<img src="http://tiernok.com/LTDBlog/instrumentation/metrics_0.png" alt="Sample screenshot from interface" /><br />
	Sample screenshot from interface
</div>
<p>Spoilers: I liked it. A lot.</p>
<h2>About Librato Metrics</h2>
<p>Unlike the unstructured data logging services in the prior posts, Metrics is all about storing, displaying, and alerting on numeric metric data. This limits how you would use it, for instance you wouldn&#8217;t be able to dig into a spike in page execution times and see the id&#8217;s of the users or the type of browser that was in use. On the other hand, the focus on numeric gauges and counters means that Librato can provide a deeper set of tools around graphing, alerting, and dashboards. </p>
<h3>Highlights:</h3>
<p>Librato&#8217;s API is extremely full-featured, offering GET/PUT/POST actions for creating, sending, and retrieving metrics, as well as endpoints to interact with other facets of the service, like dashboards. All of this is offered through an interface that is both polished and usable, with none of the lag I ran into on some of the other services. In addition, support for alerting is built into the application.</p>
<p><b>Input Support:</b> HTTP GET/PUT/POST/DELETE everything (see note below) with JSON<br />
<b>Output Support:</b> Same as above, plus has support for paginating large sets of results<br />
<b>Ease of Setup:</b> Very easy through the interface or by just sending new data metrics, API token is immediately available for use<br />
<b>Searching:</b> This is not a log service, so the searching only covers searching for entities (metrics, dashboards, etc)<br />
<b>Visualization:</b> Great. Though they currently only have support for line graphs, the overall interface is fantastic and there are other graph types in the works</p>
<p>Note: The full list of elements you can interact with via the API includes Metrics, Instruments, Dashboards, Tags, Alerts, Services, and even Users.</p>
<h3>General Opinion:</h3>
<p>This service is easy to use, provides a really usable interface, and is completely open and extensible through a very rich API. Despite some hinkiness with the dashboard timespans, which I think is due to the small amount of sample data I had and their down-sampling method, this is an excellent service. The services also support sending data aggregated over a time period (multi-sample), so you can buffer and send at longer intervals if the finer detail is an unnecessary drain on your wallet or network.</p>
<p>I suspect that their interface uses the same API that they expose to end users, as I haven&#8217;t been able to find anything I could do in the interface that wasn&#8217;t also possible in the API. Exposing the data through the API also means that not only do we have all of the graphic and alerting capabilities that are built in to the service, we can also extend it to do more (something several of the other reviewed services required to even get a simple graph). </p>
<p>Getting the sample application hooked into the service was extremely easy, even taking into account the fact that I had to write a parallel set of methods to send the metric data instead of the log data for the other services.</p>
<h3>Running the Sample Site with Metrics</h3>
<p>Clone a copy of the sample application from <a href="https://github.com/tarwn/InstrumentationSampleCode" title="InstrumentationSampleCode on GitHub">tarwn/InstrumentationSampleCode on github</a>. Go to the <a href="https://metrics.librato.com/" target="_blank">metrics.librato.com website</a> and sign up for an account (they have a 30 day free trial). </p>
<p>After signing in to your account, you can access your account information from the &#8220;Account Settings&#8221; link at the bottom of the screen. Add or edit the <i>sensitive.config</i> file at the root of the .Net solution, substituting your values where appropriate:</p>
<p><b>sensitive.config</b></p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="text"><thead><tr><td colspan="2"  class="head">Text</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
</pre></td><td class="de1"><pre class="de1">MetricProvider = Librato
&nbsp;
Librato.URL = https://metrics-api.librato.com/v1/metrics
Librato.Email = your-email-here
Librato.Token = your-token-here</pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">MetricProvider = Librato

Librato.URL = https://metrics-api.librato.com/v1/metrics
Librato.Email = your-email-here
Librato.Token = your-token-here</pre></div></div>

<p>Load up the sample app, click some buttons, then switch over to Metrics to see the results. You should see several new gauges and counters in your Metrics list: </p>
<div style="color: #666666; text-align: center; font-size: 90%">
	<img src="http://tiernok.com/LTDBlog/instrumentation/metrics_01.png" alt="Metrics List" /><br />
	Metrics List
</div>
<p>Clicking on one of these metrics will open the metric so you can see it&#8217;s display settings and a graph of it&#8217;s recent values:</p>
<div style="color: #666666; text-align: center; font-size: 90%">
	<img src="http://tiernok.com/LTDBlog/instrumentation/metrics_2.png" alt="Metric Details" /><br />
	Metric Details
</div>
<p>We could spend a lot more time getting into the details of creating instruments, dashboards, alerts and so on, but at this point you should have everything you need to start playing with those on your own.</p>
<p>I&#8217;ve really enjoyed using Metrics so far, and if you&#8217;re looking for a metrics tool you should definitely give it a test drive.</p>
]]></content:encoded>
			<wfw:commentRss>/index.php/enterprisedev/instrumentation/metrics-as-a-service-librato/feed/</wfw:commentRss>
		<slash:comments>0</slash:comments>
		</item>
		<item>
		<title>Monitoring and Logging as a Service &#8211; Reviews</title>
		<link>/index.php/enterprisedev/instrumentation/monitoring-and-logging-reviews/</link>
		<comments>/index.php/enterprisedev/instrumentation/monitoring-and-logging-reviews/#comments</comments>
		<pubDate>Thu, 05 Jul 2012 13:43:00 +0000</pubDate>
		<dc:creator><![CDATA[Eli Weinstock-Herman (tarwn)]]></dc:creator>
				<category><![CDATA[Instrumentation]]></category>

		<guid isPermaLink="false">/index.php/2012/07/monitoring-and-logging-reviews/</guid>
		<description><![CDATA[There is a lot of value in knowing what the internals of your application are doing and, more importantly, knowing them 5 minutes ago before someone called to complain the system is slow. Instrumenting an application sounds like a complex task, but in my prior post I showed some sample code that allowed me to tie into several log services to store data from my system as it is running.]]></description>
				<content:encoded><![CDATA[<p>There is a lot of value in knowing what the internals of your application are doing and, more importantly, knowing them 5 minutes ago before someone called to complain the system is slow. Instrumenting an application sounds like a complex task, but in <a href="/index.php/All/?p=1748" title="Monitoring and Logging as a Service - The Common Bits">my prior post</a> I showed some sample code that allowed me to tie into several log services to store data from my system as it is running. </p>
<p>Keep in mind, I have extremely high hopes for these types of services, due to my experience in instrumentation and logging in manufacturing environments (<a href="/index.php/All/?p=1747" title="Monitoring and Logging as a Service - Introduction">see the first post</a>). None of these systems are built with this task specifically in mind, so services that are absolutely wonderful at their core competencies may not prove to be a good fit for this specific use case.</p>
<p>In any case, let&#8217;s see what we&#8217;re going to be looking at:</p>
<li><a href="http://www.loggly.com/" title="Visit Loggly" target="_blank">Loggly</a> &#8211; &#8220;It&#8217;s fast, fun and easy to use&#8221;</li>
<li><a href="http://www.datadoghq.com/" title="Visit DataDog" target="_blank">DataDog</a> &#8211; &#8220;On a mission to bring sanity to IT Management&#8221;</li>
<li><a href="https://www.splunkstorm.com/" title="Visit Splunk Storm" target="_blank">Splunk Storm</a> &#8211; &#8220;Your data has the answers, we help you find them.&#8221;</li>
<li><a href="http://www.sumologic.com/" title="Visit Sumologic" target="_blank">Sumo  Logic</a> &#8211; &#8220;Make Your Applications Run Longer &amp; Stronger&#8221;</li>
<li><a href="http://www.logentries.com/" title="Visit logentries" target="_blank">logentries</a> &#8211; &#8220;We make your life easier&#8221;</li>
<li><a href="https://papertrailapp.com/" title="Visit papertrail" target="_blank">papertrail</a> &#8211; &#8220;Get back to work.&#8221;</li>
<p>A few of these were non-starters, but I&#8217;ll record what I know about them. The rest I&#8217;ll present in similar formats for comparison.</p>
<h2>Loggly</h2>
<p>Loggly was one of the first logging services on the market as well as one of the first I instrumented with the application. </p>
<h3>Highlights:</h3>
<p>Loggly supports raw text, syslog, and JSON data posts and is a live service (not beta).</p>
<p><b>Input Support: </b> HTTP with raw text or JSON plus an array of syslog options<br />
<b>Ease of Setup: </b> No default inputs, have to create an initial HTTP JSON input which is fairly easy. Good samples provided for communicating with input.<br />
<b>Searching:</b> The search uses a console-like command line input for searches with limited direction and assistance (more later), I didn&#8217;t invest the time that would have been necessary to learn enough of the search interface to become even a beginning user<br />
<b>Visualization: </b> Nonexistent. Has examples of how to build your own in python, jQuery, and google charts</p>
<h3>General Opinion:</h3>
<p>I would not use this service for application instrumentation. The search is the only feature it offers and that is in beta (Loggly has been live for several years). The command-line search idea is cute, but to me is an example of form over function that suffers from sluggish response times, low usability, and an unnecessary initial learning curve. My use of the site was characterized by extremely long loading times (30-60 seconds) and the lack of initial defaults for new users seems like a missed opportunity. If they were to focus on fixing the performance issues, improving the usability, and implementing visualization, I&#8217;d be ready to give them a second look.</p>
<h3>Running the Sample Site w/ Loggly</h3>
<p>Clone a copy of the sample application from <a href="https://github.com/tarwn/InstrumentationSampleCode" title="InstrumentationSampleCode on GitHub">tarwn/InstrumentationSampleCode on github</a>. Go to the <a href="http://www.loggly.com/">Loggly.com website</a>, sign up for an account (you can get a free account by dragging the bars on the pricing page to the lowest values), create an HTTP input with JSON. </p>
<p>Once you have the input created, create or edit the <i>sensitive.config</i> file at the root of the solution with the following values (substitute your GUID in where appropriate):</p>
<p><b>sensitive.config</b></p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="text"><thead><tr><td colspan="2"  class="head">Text</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
</pre></td><td class="de1"><pre class="de1">LogProvider = Loggly
Loggly.BaseURL = https://logs.loggly.com/inputs/put-your-guid-here</pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">LogProvider = Loggly
Loggly.BaseURL = https://logs.loggly.com/inputs/put-your-guid-here</pre></div></div>

<p>Open the site, try a few things, then switch over to the Loggly screen and see if a page will load long enough to show it received some data.</p>
<h2>DataDog (Could Not Review)</h2>
<p><a href="http://www.datadoghq.com/" title="Visit DataDogHQ">DataDog</a> looked like it would be a good option, but after setting up my initial account I found I could not continue until I installed an agent on a server with a supported operating system. Unfortunately Windows is not supported (which was not obvious until you got signed up), so I was unable to continue. </p>
<p>They did email me a few days later to ask if I had any difficulties getting signed up since I hadn&#8217;t finished the activation step, and the email looked personal and friendly, so I may return and see if they can help me get past that step to try the service for instrumentation purposes. </p>
<h2>Splunk Storm</h2>
<p><a href="https://www.splunkstorm.com/" title="Visit Splunk Storm" target="_blank">Splunk Storm</a> is a beta service from Splunk, which is a name that should be highly recognizable in the logging world. Storm is their beta service to offer the capabilities of Splunk without a local installation.</p>
<h3>Highlights: </h3>
<p><b>Input Support: </b> HTTP with raw text, syslog, netcat, and &#8220;any other application that transmits via TCP or UDP&#8221;<br />
<b>Ease of Setup: </b> Easy enough. API tokens are already available for use but error reporting on individual HTTP posts can sometimes be useless (501s for instance)<br />
<b>Searching:</b> The search for splunk is the bar to measure the others by. They use a text-based language but everything on the screen is clickable, common fields are captured and listed on the side for easy searching, and the search language itself is something you can pick up a bit at a time<br />
<b>Visualization: </b> Pretty decent but there are some definite learning curve moments and when you try to graph too much data it throws away parts of the dataset entirely</p>
<h3>General Opinion:</h3>
<p>I have been using Splunk Storm for longer than any of the other services. The service itself is very promising. It offers a really good search capability with a great drilldown capability and setup was easy. Often it will give mini-help boxes when typing terms into the search and suggest similar searches I have done recently, details on commands, and suggestions for commands I may want to use.</p>
<p>Unfortunately they are using the bad definition of &#8220;beta&#8221;, instead of the &#8220;it&#8217;s relatively stable but not feature complete&#8221; definition. There have been at least two occurrences where I was locked out of the system while they performed maintenance, on one occasion an update actually locked me out of the main account for 4-5 days (with a constant friendly reminder that service would be back momentarily). Documentation links are present throughout the application but most of them lead to 404 pages. The fact that charts throw away portions of the dataset when you ask them to chart too much can be incredibly frustrating (when you figure out what it&#8217;s doing). </p>
<p>After the initial exposure I started to find that I was spending more and more time in the splunk documentation (once you figure out how to get there) simply trying to learn their command-line language because the interface only gets you so far. The power of the tool is impressive, but the level of effort I would have to spend learning how to use their tool is a common annoyance that reminds me of Loggly&#8217;s command-line tool. I&#8217;ve also seen more of their 404 narwhal page then I ever expected to see, as apparently any page that is left open for too long refreshes and drops you there (session time out perhaps?).</p>
<h3>Running the Sample Site w/ Splunk Storm:</h3>
<p>Clone a copy of the sample application from <a href="https://github.com/tarwn/InstrumentationSampleCode" title="InstrumentationSampleCode on GitHub">tarwn/InstrumentationSampleCode on github</a>. Go to the <a href="http://www.splunkstorm.com/" target="_blank">splunkstorm.com website</a> and sign up for an account (all accounts are free while it is in beta).</p>
<p>In the inputs section of the project there is a tab called &#8220;API&#8221; that has the access token and project id. Add or edit the <i>sensitive.config</i> file at the root of the .Net solution, substituting your values where appropriate:</p>
<p><b>sensitive.config</b></p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="text"><thead><tr><td colspan="2"  class="head">Text</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
</pre></td><td class="de1"><pre class="de1">LogProvider = storm
&nbsp;
Storm.AccessToken = your-access-token-here
Storm.BaseURL = https://api.splunkstorm.com/1/inputs/http
Storm.ProjectId = your-project-id-here</pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">LogProvider = storm

Storm.AccessToken = your-access-token-here
Storm.BaseURL = https://api.splunkstorm.com/1/inputs/http
Storm.ProjectId = your-project-id-here</pre></div></div>

<p>Load up the sample app, click some buttons, then switch over to Splunk Storm and try out the search. Clicking different items in the log entries will fire off searches. Unfortunately charting is almost a blog series on it&#8217;s own, sorry.</p>
<h2>Sumo Logic (Could Not Review)</h2>
<p><a href="http://www.sumologic.com/" title="Visit Sumo Logic" target="_blank">Sumo Logic</a> claims to provide &#8220;the first cloud-based log management and analytics solution&#8221;. The demo video shows a product that has similar capabilities to Splunk in the search area with additions of automatic pattern detection and monitoring. Initially I did not demo the product because they don&#8217;t offer unattended demos, you have to sign up and wait for someone to contact you to hold your hand while you demo their service. Later, as I was reading their FAQ, I found that they do not offer an API, accepting data only via collectors that are installed on your local system. The collector idea isn&#8217;t bad, manufacturing historians have been doing this for a couple decades after all, but without demoing I couldn&#8217;t tell how easy or hard it would be to install them and automate that installation for those of us with large numbers of servers or elastic infrastructure.</p>
<h2>logentries</h2>
<p><a href="http://logentries.com//" title="Visit logentries" target="_blank">logentries</a> is a cloud logging service that has been on the market for over a year and offers free and metered accounts.</p>
<h3>Highlights: </h3>
<p><b>Input Support: </b> HTTP with raw text, agents, or an array of syslog options<br />
<b>Ease of Setup: </b> No default inputs, have to create an initial log. Doesn&#8217;t respond to success or error HTTP calls, making troubleshooting difficult. Initial data didn&#8217;t show in site until I specifically hit the refresh button in the top right of the app, leading to several hours of frustrated and unnecessary troubleshooting initially.<br />
<b>Searching:</b> The search seems fairly basic, but they pattern matching and tagging ability lends a second dimension to search capabilities. Creating patterns was not straightforward, however.<br />
<b>Visualization: </b> Graphs are purely around tags and data records, no ability to extract values from entries and graph them (so somewhere between loggly and splunk in this regard)</p>
<h3>General Opinion:</h3>
<p>Logentries doesn&#8217;t seem like a good solution for application instrumentation, but this is more due to their focus being different from what I was looking for. I did have difficulties with the initial setup due to the lack of response from their HTTP service, the fact that all of their language examples use raw TCP sockets instead of HTTP libraries, and the delays in data being sent and actually showing up in the interface.</p>
<p> I also found the search and pattern sections frustrating. That being said, some of this was due to me trying to misuse their service for instrumentation and because their documentation is not linked from inside the interface. The search supports regular expressions and provides a good number of examples, which makes it almost as powerful as the other services without the need to learn a whole new syntax or language. </p>
<p>With one exception, if I was looking for a log monitoring and alerting system I would consider starting here because I could get farther for a reduced learning curve and startup time.  Unfortunately the exception is that I can&#8217;t tell if my data is actually reaching them or not. Switching to the TCP method they outline may or may not resolve this, but the lack of error feedback even if I got it working with that method.</p>
<h3>Running the Sample Site w/ logentries:</h3>
<p>Clone a copy of the sample application from <a href="https://github.com/tarwn/InstrumentationSampleCode" title="InstrumentationSampleCode on GitHub">tarwn/InstrumentationSampleCode on github</a>. Go to the <a href="http://www.logentries.com/" target="_blank">logentries.com website</a> and sign up for an account (there is a free account with limited storage).</p>
<p>Add a new Host entry, then inside that host add a new Log with a type of &#8220;API Library/HTML&#8221;. Add or edit the <i>sensitive.config</i> file at the root of the .Net solution, substituting your values where appropriate:</p>
<p><b>sensitive.config</b></p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="text"><thead><tr><td colspan="2"  class="head">Text</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
</pre></td><td class="de1"><pre class="de1">LogProvider = logentries
&nbsp;
logentries.BaseURL = http://api.logentries.com/
logentries.AccountKey = your-account-key-here
logentries.Host = your-host-name
logentries.Log = your-log-name-or-key</pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">LogProvider = logentries

logentries.BaseURL = http://api.logentries.com/
logentries.AccountKey = your-account-key-here
logentries.Host = your-host-name
logentries.Log = your-log-name-or-key</pre></div></div>

<p>Note: I fired up the sample app pointed at logentries when I started writing this up, my data still hasn&#8217;t shown up. I&#8217;m not sure if it will or not.</p>
<h2>Papertrail (Could Not Review)</h2>
<p><a href="https://papertrailapp.com/" title="Visit papertrail" target="_blank">Papertrail</a> looks like a pretty solid service, from their front page. Unfortunately while they do support a large number of systems as log inputs, a REST API is not one of them. They do support syslog as an input source, however, so it should be possible to communicate from an instrumented app over TCP using the syslog format.After digging into more of their documentation, however, it looks like this system could offer some instrumentation support from an alerting perspective, but doesn&#8217;t really offer the types of capabilities we would want for instrumentation (aggregating and analyzing values in like log entries, for instance API executing times across multiple calls). </p>
<h2>Summary</h2>
<p>Most instrumentation data options require local installers, many based on RRD storage or other, similar methods. I did find an open source server called <a href="http://www.nimbits.com/" title="Visit nimbits page">Nimbits</a> which is designed as an operational process historian and would likely be very good at storing discrete counter and numeric values (similar to graphite or an RRD tool). I also found <a href="https://metrics.librato.com/" title="Visit Metrics at Librato" target=_"blank">Metrics</a>, which appears to be a much better fit for instrumentation then these logging services and is worth considering for a future instrumentation post. Unfortunately these options are a different enough model that I couldn&#8217;t compare them side-by-side with the logging services in this post.</p>
<p>It is certainly possible to instrument your applications with limited impact and modification to the source application, however most of the logging services I could find don&#8217;t offer the type of support you would want for that type of exercise. Splunk Storm seemed to offer the closest capabilities, but the service has the ability to be unavailable when you need it the most. That being said, many of the services would probably shine when used for the purpose they were created for and the fact that I couldn&#8217;t misuse them for this other purpose shouldn&#8217;t dissuade you for looking into them for log management and analytics purposes.</p>
]]></content:encoded>
			<wfw:commentRss>/index.php/enterprisedev/instrumentation/monitoring-and-logging-reviews/feed/</wfw:commentRss>
		<slash:comments>5</slash:comments>
		</item>
		<item>
		<title>Monitoring and Logging as a Service &#8211; The Common Bits</title>
		<link>/index.php/enterprisedev/instrumentation/monitoring-and-logging-as-a-service-common-bits/</link>
		<comments>/index.php/enterprisedev/instrumentation/monitoring-and-logging-as-a-service-common-bits/#respond</comments>
		<pubDate>Tue, 03 Jul 2012 10:01:00 +0000</pubDate>
		<dc:creator><![CDATA[Eli Weinstock-Herman (tarwn)]]></dc:creator>
				<category><![CDATA[Instrumentation]]></category>

		<guid isPermaLink="false">/index.php/2012/07/monitoring-and-logging-as-a-service-common-bits/</guid>
		<description><![CDATA[In my previous post I outlined some of my own history with monitoring and my intent to review several available logging services. To help compare apples to apples, the logging mechanisms and log messages will operate consistently for each of the selected services.]]></description>
				<content:encoded><![CDATA[<p>In my <a href="/index.php/EnterpriseDev/instrumentation/monitoring-and-logging-as-a-service" title="Monitoring and Logging as a Service - Introduction" target="_blank">previous post</a> I outlined some of my own history with monitoring and my intent to review several available logging services. To help compare apples to apples, the logging mechanisms and log messages will operate consistently for each of the selected services. </p>
<p>The sample code is available on github and will continue to be updated as I add services I am trying: <a href="https://github.com/tarwn/InstrumentationSampleCode" title="InstrumentationSampleCode on GitHub" target="_blank">tarwn/InstrumentationSampleCode</a></p>
<p>The purpose of this post is to outline that common portion of the application before we get into the reviews, so we have a common starting place and something to refer back to once we start customizing to support the services.</p>
<h2>The Sample Code</h2>
<p>The sample code for this series is relatively simple. The solution includes 4 projects: Logging, LoggingTests, SampleSiteWithLogging, and SensitiveSettings.</p>
<h3>Logging</h3>
<p>This is the core project for the post series. The goal of the Logging library is to make it extremely easy to log from inside the application (think statsd + graphite ala <a href="http://codeascraft.etsy.com/2011/02/15/measure-anything-measure-everything/" title="Measure Anything, Measure Everything post at Etsy" target="_blank">Etsy</a> simple) while making it easy to swap out which logging service we are using. </p>
<p>There are two major components in the library, the Logger class which provides singleton access to the selected logging service and the required one line log calls and the HttpJsonPost, which handles HTTP requests (currently focused on key/value data for unstructured JSON or raw text posts).</p>
<p>The singleton can be setup with any implementation of an ILogProvider. It provides methods to log a single message or produce a message that automatically logs itself on disposal (capturing elapsed time and including it in the message). </p>
<p><b>Logging.Logger</b> (<a href="https://github.com/tarwn/InstrumentationSampleCode/blob/master/Logging/Logger.cs" title="Logger.cs on Github" target="_blank">source</a>)</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="csharp"><thead><tr><td colspan="2"  class="head">C#</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
</pre></td><td class="de1"><pre class="de1"><span class="kw1">public</span> <span class="kw4">class</span> Logger <span class="br0">&#123;</span>
&nbsp;
&nbsp; &nbsp; <span class="kw1">private</span> ILogProvider _logProvider<span class="sy0">;</span>
&nbsp; &nbsp; <span class="kw1">private</span> <span class="kw1">static</span> Logger _current<span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; <span class="kw1">public</span> Logger<span class="br0">&#40;</span>ILogProvider logProvider<span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; _logProvider <span class="sy0">=</span> logProvider<span class="sy0">;</span>
&nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp;
&nbsp; &nbsp; <span class="kw1">public</span> <span class="kw4">void</span> LogMessage<span class="br0">&#40;</span>Dictionary<span class="sy0">&lt;</span><span class="kw4">string</span>, <span class="kw4">string</span><span class="sy0">&gt;</span> message, Action<span class="sy0">&lt;</span>Result<span class="sy0">&gt;</span> callback<span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; _logProvider<span class="sy0">.</span><span class="me1">Log</span><span class="br0">&#40;</span>message, callback<span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp;
&nbsp; &nbsp; <span class="kw1">public</span> <span class="kw1">static</span> <span class="kw4">void</span> SetDefaultLogger<span class="br0">&#40;</span>ILogProvider logProvider<span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; _current <span class="sy0">=</span> <span class="kw3">new</span> Logger<span class="br0">&#40;</span>logProvider<span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp;
&nbsp; &nbsp; <span class="kw1">private</span> <span class="kw1">static</span> Logger GetDefaultLogger<span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">if</span> <span class="br0">&#40;</span>_current <span class="sy0">!=</span> <span class="kw1">null</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">return</span> _current<span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">else</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">throw</span> <span class="kw3">new</span> Exception<span class="br0">&#40;</span><span class="st0">&quot;Default logger not setup&quot;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp;
&nbsp; &nbsp; <span class="kw1">public</span> <span class="kw1">static</span> <span class="kw4">void</span> Log<span class="br0">&#40;</span>Dictionary<span class="sy0">&lt;</span><span class="kw4">string</span>, <span class="kw4">string</span><span class="sy0">&gt;</span> message, Action<span class="sy0">&lt;</span>Result<span class="sy0">&gt;</span> callback<span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; GetDefaultLogger<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">.</span><span class="me1">LogMessage</span><span class="br0">&#40;</span>message, callback<span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp;
&nbsp; &nbsp; <span class="kw1">public</span> <span class="kw1">static</span> LoggerWithElapsedTime CaptureElapsedTime<span class="br0">&#40;</span>Dictionary<span class="sy0">&lt;</span><span class="kw5">System</span><span class="sy0">.</span><span class="kw4">String</span>, <span class="kw5">System</span><span class="sy0">.</span><span class="kw4">String</span><span class="sy0">&gt;</span> message, Action<span class="sy0">&lt;</span>Result<span class="sy0">&gt;</span> callback<span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">return</span> <span class="kw3">new</span> LoggerWithElapsedTime<span class="br0">&#40;</span>GetDefaultLogger<span class="br0">&#40;</span><span class="br0">&#41;</span>, message, callback<span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; <span class="br0">&#125;</span>
<span class="br0">&#125;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">public class Logger {

	private ILogProvider _logProvider;
	private static Logger _current;

	public Logger(ILogProvider logProvider) {
		_logProvider = logProvider;
	}

	public void LogMessage(Dictionary&lt;string, string&gt; message, Action&lt;Result&gt; callback) {
		_logProvider.Log(message, callback);
	}

	public static void SetDefaultLogger(ILogProvider logProvider) {
		_current = new Logger(logProvider);
	}

	private static Logger GetDefaultLogger() {
		if (_current != null) {
			return _current;
		}
		else {
			throw new Exception("Default logger not setup");
		}
	}

	public static void Log(Dictionary&lt;string, string&gt; message, Action&lt;Result&gt; callback) {
		GetDefaultLogger().LogMessage(message, callback);
	}

	public static LoggerWithElapsedTime CaptureElapsedTime(Dictionary&lt;System.String, System.String&gt; message, Action&lt;Result&gt; callback) {
		return new LoggerWithElapsedTime(GetDefaultLogger(), message, callback);
	}
}</pre></div></div>

<p>Each log call passes in a message and a callback that will be called with the result of the HTTP post, though so far the sample website code is using fire-and-forget, not bothering to provide a callback method.</p>
<p>To support the ILogProvider implementation, I created an <a href="https://github.com/tarwn/InstrumentationSampleCode/blob/master/Logging/Communications/HttpJsonPost.cs" title="HttpJsonPost on Github">HttpJsonPost class</a> class and associated helpers to handle the HTTP communications. This class can do synchronous and asynchronous HTTP requests to the relevant services:</p>
<p><b>Logging.Communications.HttpJsonPost</b> (<a href="https://github.com/tarwn/InstrumentationSampleCode/blob/master/Logging/Communications/HttpJsonPost.cs" title="HttpJsonPost on Github" target="_blank">source</a>)</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="csharp"><thead><tr><td colspan="2"  class="head">C#</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
</pre></td><td class="de1"><pre class="de1"><span class="kw1">public</span> <span class="kw4">class</span> HttpJsonPost <span class="br0">&#123;</span>
&nbsp;
&nbsp; &nbsp; Dictionary<span class="sy0">&lt;</span><span class="kw4">string</span>,<span class="kw4">string</span><span class="sy0">&gt;</span> _message<span class="sy0">;</span>
&nbsp; &nbsp; NetworkCredential _credentials<span class="sy0">;</span>
&nbsp; &nbsp; <span class="kw4">bool</span> _useJson<span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; <span class="kw1">public</span> HttpJsonPost<span class="br0">&#40;</span>Dictionary<span class="sy0">&lt;</span><span class="kw4">string</span>, <span class="kw4">string</span><span class="sy0">&gt;</span> message, NetworkCredential credentials <span class="sy0">=</span> <span class="kw1">null</span>, <span class="kw4">bool</span> useJson <span class="sy0">=</span> <span class="kw1">true</span><span class="br0">&#41;</span> <span class="br0">&#123;</span> <span class="coMULTI">/* ... */</span> <span class="br0">&#125;</span>
&nbsp;
&nbsp; &nbsp; <span class="kw1">private</span> HttpWebRequest InitializeRequest<span class="br0">&#40;</span><span class="kw4">string</span> url, <span class="kw4">string</span> method<span class="br0">&#41;</span> <span class="br0">&#123;</span> <span class="coMULTI">/* ... */</span> <span class="br0">&#125;</span>
&nbsp;
&nbsp; &nbsp; <span class="kw1">public</span> <span class="kw4">void</span> Send<span class="br0">&#40;</span><span class="kw4">string</span> url, <span class="kw4">string</span> method, Action<span class="sy0">&lt;</span>Result<span class="sy0">&gt;</span> callback, <span class="kw4">bool</span> processResponse <span class="sy0">=</span> <span class="kw1">true</span><span class="br0">&#41;</span> <span class="br0">&#123;</span> <span class="coMULTI">/* ... */</span> <span class="br0">&#125;</span>
&nbsp;
&nbsp; &nbsp; <span class="kw1">public</span> <span class="kw4">void</span> SendAsync<span class="br0">&#40;</span><span class="kw4">string</span> url, <span class="kw4">string</span> method, Action<span class="sy0">&lt;</span>Result<span class="sy0">&gt;</span> callback, <span class="kw4">bool</span> processResponse <span class="sy0">=</span> <span class="kw1">true</span><span class="br0">&#41;</span> <span class="br0">&#123;</span> <span class="coMULTI">/* ... */</span> <span class="br0">&#125;</span>
&nbsp;
&nbsp; &nbsp; <span class="kw1">private</span> <span class="kw4">void</span> GetRequestStream<span class="br0">&#40;</span>IAsyncResult result<span class="br0">&#41;</span> <span class="br0">&#123;</span> <span class="coMULTI">/* ... */</span> <span class="br0">&#125;</span>
&nbsp;
&nbsp; &nbsp; <span class="kw1">private</span> <span class="kw4">void</span> GetResponseStream<span class="br0">&#40;</span>IAsyncResult result<span class="br0">&#41;</span> <span class="br0">&#123;</span> <span class="coMULTI">/* ... */</span> <span class="br0">&#125;</span>
&nbsp;
&nbsp; &nbsp; <span class="kw1">private</span> <span class="kw4">void</span> ProcessResponse<span class="br0">&#40;</span>Func<span class="sy0">&lt;</span>WebResponse<span class="sy0">&gt;</span> getResponse, Action<span class="sy0">&lt;</span>Result<span class="sy0">&gt;</span> callback<span class="br0">&#41;</span> <span class="br0">&#123;</span> <span class="coMULTI">/* ... */</span> <span class="br0">&#125;</span>
&nbsp;
&nbsp; &nbsp; <span class="kw1">private</span> <span class="kw4">void</span> WriteMessage<span class="br0">&#40;</span>Stream stream<span class="br0">&#41;</span> <span class="br0">&#123;</span> <span class="coMULTI">/* ... */</span> <span class="br0">&#125;</span>
<span class="br0">&#125;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">public class HttpJsonPost {

	Dictionary&lt;string,string&gt; _message;
	NetworkCredential _credentials;
	bool _useJson;

	public HttpJsonPost(Dictionary&lt;string, string&gt; message, NetworkCredential credentials = null, bool useJson = true) { /* ... */ }

	private HttpWebRequest InitializeRequest(string url, string method) { /* ... */ }

	public void Send(string url, string method, Action&lt;Result&gt; callback, bool processResponse = true) { /* ... */ }

	public void SendAsync(string url, string method, Action&lt;Result&gt; callback, bool processResponse = true) { /* ... */ }

	private void GetRequestStream(IAsyncResult result) { /* ... */ }

	private void GetResponseStream(IAsyncResult result) { /* ... */ }

	private void ProcessResponse(Func&lt;WebResponse&gt; getResponse, Action&lt;Result&gt; callback) { /* ... */ }

	private void WriteMessage(Stream stream) { /* ... */ }
}</pre></div></div>

<p>This little bit of code and their supporting classes are all it takes to talk to the external logging services, and to do so with limited impact by using asynchronous requests and callbacks.</p>
<h2>The Sample Website</h2>
<p>The sample website contains very little code that I added. The majority of the code is the &#8220;Empty MVC 3 Web Site&#8221; template from visual studio, I&#8217;ve added an extremely basic HomeController and some setup code in the global.asax to setup the log provider and log a few events.</p>
<p><b>SampleSiteWithLogging.Global</b> (<a href="https://github.com/tarwn/InstrumentationSampleCode/blob/master/SampleSiteWithLogging/Global.asax.cs" title="Global.asax.cs on GitHub" target="_blank">source</a>)</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="csharp"><thead><tr><td colspan="2"  class="head">C#</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
</pre></td><td class="de1"><pre class="de1"><span class="kw1">public</span> <span class="kw4">class</span> MvcApplication <span class="sy0">:</span> <span class="kw5">System.<span class="me1">Web</span></span><span class="sy0">.</span><span class="me1">HttpApplication</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; 
&nbsp; &nbsp; <span class="coMULTI">/* ... */</span>
&nbsp;
&nbsp; &nbsp; <span class="kw1">protected</span> <span class="kw4">void</span> Application_Start<span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="coMULTI">/* ... */</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; ILogProvider provider <span class="sy0">=</span> GetProviderFromSettings<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; Logger<span class="sy0">.</span><span class="me1">SetDefaultLogger</span><span class="br0">&#40;</span>provider<span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; Logger<span class="sy0">.</span><span class="me1">Log</span><span class="br0">&#40;</span><span class="kw3">new</span> Dictionary<span class="sy0">&lt;</span><span class="kw4">string</span>, <span class="kw4">string</span><span class="sy0">&gt;</span><span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span> <span class="br0">&#123;</span> <span class="st0">&quot;Type&quot;</span>, <span class="st0">&quot;ApplicationStartup&quot;</span> <span class="br0">&#125;</span>, <span class="br0">&#123;</span> <span class="st0">&quot;Time&quot;</span>, DateTime<span class="sy0">.</span><span class="me1">UtcNow</span><span class="sy0">.</span><span class="me1">ToString</span><span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="br0">&#125;</span> <span class="br0">&#125;</span>, <span class="kw1">null</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp;
&nbsp; &nbsp; <span class="kw1">protected</span> <span class="kw4">void</span> Application_BeginRequest<span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; Logger<span class="sy0">.</span><span class="me1">Log</span><span class="br0">&#40;</span><span class="kw3">new</span> Dictionary<span class="sy0">&lt;</span><span class="kw4">string</span>, <span class="kw4">string</span><span class="sy0">&gt;</span><span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span> <span class="br0">&#123;</span> <span class="st0">&quot;Type&quot;</span>, <span class="st0">&quot;ApplicationRequest&quot;</span> <span class="br0">&#125;</span>, <span class="br0">&#123;</span> <span class="st0">&quot;UserAgent&quot;</span>, Request<span class="sy0">.</span><span class="me1">UserAgent</span> <span class="br0">&#125;</span>, <span class="br0">&#123;</span> <span class="st0">&quot;Time&quot;</span>, DateTime<span class="sy0">.</span><span class="me1">UtcNow</span><span class="sy0">.</span><span class="me1">ToString</span><span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="br0">&#125;</span> <span class="br0">&#125;</span>, <span class="kw1">null</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp;
&nbsp; &nbsp; <span class="kw1">protected</span> <span class="kw4">void</span> Application_Error<span class="br0">&#40;</span><span class="kw4">Object</span> sender, <span class="kw5">System</span><span class="sy0">.</span><span class="me1">EventArgs</span> e<span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw5">System.<span class="me1">Web</span></span><span class="sy0">.</span><span class="me1">HttpContext</span> context <span class="sy0">=</span> HttpContext<span class="sy0">.</span><span class="me1">Current</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw5">System</span><span class="sy0">.</span><span class="me1">Exception</span> exc <span class="sy0">=</span> Context<span class="sy0">.</span><span class="me1">Server</span><span class="sy0">.</span><span class="me1">GetLastError</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; Logger<span class="sy0">.</span><span class="me1">Log</span><span class="br0">&#40;</span><span class="kw3">new</span> Dictionary<span class="sy0">&lt;</span><span class="kw4">string</span>, <span class="kw4">string</span><span class="sy0">&gt;</span><span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span> <span class="br0">&#123;</span> <span class="st0">&quot;Type&quot;</span>, <span class="st0">&quot;ApplicationError&quot;</span> <span class="br0">&#125;</span>, <span class="br0">&#123;</span> <span class="st0">&quot;Exception&quot;</span>, exc<span class="sy0">.</span><span class="me1">ToString</span><span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="br0">&#125;</span>, <span class="br0">&#123;</span> <span class="st0">&quot;Time&quot;</span>, DateTime<span class="sy0">.</span><span class="me1">UtcNow</span><span class="sy0">.</span><span class="me1">ToString</span><span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="br0">&#125;</span> <span class="br0">&#125;</span>, <span class="kw1">null</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp;
&nbsp; &nbsp; <span class="kw1">protected</span> ILogProvider GetProviderFromSettings<span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; SensitiveSettings<span class="sy0">.</span><span class="me1">SettingsManager</span><span class="sy0">.</span><span class="me1">LoadFrom</span><span class="br0">&#40;</span><span class="kw5">System.<span class="me1">IO</span></span><span class="sy0">.</span><span class="me1">Path</span><span class="sy0">.</span><span class="me1">Combine</span><span class="br0">&#40;</span><span class="kw5">System</span><span class="sy0">.</span><span class="me1">AppDomain</span><span class="sy0">.</span><span class="me1">CurrentDomain</span><span class="sy0">.</span><span class="me1">BaseDirectory</span>, <span class="st_h">@&quot;bin&quot;</span><span class="br0">&#41;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw4">string</span> provider <span class="sy0">=</span> <span class="st0">&quot;null&quot;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">if</span> <span class="br0">&#40;</span>SensitiveSettings<span class="sy0">.</span><span class="me1">SettingsManager</span><span class="sy0">.</span><span class="me1">Settings</span><span class="sy0">.</span><span class="me1">ContainsKey</span><span class="br0">&#40;</span><span class="st0">&quot;LogProvider&quot;</span><span class="br0">&#41;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; provider <span class="sy0">=</span> SensitiveSettings<span class="sy0">.</span><span class="me1">SettingsManager</span><span class="sy0">.</span><span class="me1">Settings</span><span class="br0">&#91;</span><span class="st0">&quot;LogProvider&quot;</span><span class="br0">&#93;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">switch</span> <span class="br0">&#40;</span>provider<span class="sy0">.</span><span class="me1">ToUpper</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span> 
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">case</span> <span class="st0">&quot;LOGGLY&quot;</span><span class="sy0">:</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">return</span> <span class="kw3">new</span> LogglyProvider<span class="br0">&#40;</span>SensitiveSettings<span class="sy0">.</span><span class="me1">SettingsManager</span><span class="sy0">.</span><span class="me1">Settings</span><span class="br0">&#91;</span><span class="st0">&quot;Loggly.BaseURL&quot;</span><span class="br0">&#93;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">case</span> <span class="st0">&quot;STORM&quot;</span><span class="sy0">:</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">return</span> <span class="kw3">new</span> StormProvider<span class="br0">&#40;</span>SensitiveSettings<span class="sy0">.</span><span class="me1">SettingsManager</span><span class="sy0">.</span><span class="me1">Settings</span><span class="br0">&#91;</span><span class="st0">&quot;Storm.BaseURL&quot;</span><span class="br0">&#93;</span>, SensitiveSettings<span class="sy0">.</span><span class="me1">SettingsManager</span><span class="sy0">.</span><span class="me1">Settings</span><span class="br0">&#91;</span><span class="st0">&quot;Storm.AccessToken&quot;</span><span class="br0">&#93;</span>, SensitiveSettings<span class="sy0">.</span><span class="me1">SettingsManager</span><span class="sy0">.</span><span class="me1">Settings</span><span class="br0">&#91;</span><span class="st0">&quot;Storm.ProjectId&quot;</span><span class="br0">&#93;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">case</span> <span class="st0">&quot;LOGENTRIES&quot;</span><span class="sy0">:</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">return</span> <span class="kw3">new</span> LogentriesProvider<span class="br0">&#40;</span>SensitiveSettings<span class="sy0">.</span><span class="me1">SettingsManager</span><span class="sy0">.</span><span class="me1">Settings</span><span class="br0">&#91;</span><span class="st0">&quot;logentries.BaseURL&quot;</span><span class="br0">&#93;</span>, SensitiveSettings<span class="sy0">.</span><span class="me1">SettingsManager</span><span class="sy0">.</span><span class="me1">Settings</span><span class="br0">&#91;</span><span class="st0">&quot;logentries.AccountKey&quot;</span><span class="br0">&#93;</span>, SensitiveSettings<span class="sy0">.</span><span class="me1">SettingsManager</span><span class="sy0">.</span><span class="me1">Settings</span><span class="br0">&#91;</span><span class="st0">&quot;logentries.Host&quot;</span><span class="br0">&#93;</span>, SensitiveSettings<span class="sy0">.</span><span class="me1">SettingsManager</span><span class="sy0">.</span><span class="me1">Settings</span><span class="br0">&#91;</span><span class="st0">&quot;logentries.Log&quot;</span><span class="br0">&#93;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">default</span><span class="sy0">:</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">return</span> <span class="kw3">new</span> NullLogProvider<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp; &nbsp; &nbsp; &nbsp; 
&nbsp; &nbsp; <span class="br0">&#125;</span>
<span class="br0">&#125;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">public class MvcApplication : System.Web.HttpApplication {
	
	/* ... */

	protected void Application_Start() {
		/* ... */

		ILogProvider provider = GetProviderFromSettings();
		Logger.SetDefaultLogger(provider);
		Logger.Log(new Dictionary&lt;string, string&gt;() { { "Type", "ApplicationStartup" }, { "Time", DateTime.UtcNow.ToString() } }, null);
	}

	protected void Application_BeginRequest() {
		Logger.Log(new Dictionary&lt;string, string&gt;() { { "Type", "ApplicationRequest" }, { "UserAgent", Request.UserAgent }, { "Time", DateTime.UtcNow.ToString() } }, null);
	}

	protected void Application_Error(Object sender, System.EventArgs e) {
		System.Web.HttpContext context = HttpContext.Current;
		System.Exception exc = Context.Server.GetLastError();

		Logger.Log(new Dictionary&lt;string, string&gt;() { { "Type", "ApplicationError" }, { "Exception", exc.ToString() }, { "Time", DateTime.UtcNow.ToString() } }, null);
	}

	protected ILogProvider GetProviderFromSettings() {
		SensitiveSettings.SettingsManager.LoadFrom(System.IO.Path.Combine(System.AppDomain.CurrentDomain.BaseDirectory, @"bin"));
		string provider = "null";
		if (SensitiveSettings.SettingsManager.Settings.ContainsKey("LogProvider")) {
			provider = SensitiveSettings.SettingsManager.Settings["LogProvider"];
		}

		switch (provider.ToUpper()) { 
			case "LOGGLY":
				return new LogglyProvider(SensitiveSettings.SettingsManager.Settings["Loggly.BaseURL"]);
			case "STORM":
				return new StormProvider(SensitiveSettings.SettingsManager.Settings["Storm.BaseURL"], SensitiveSettings.SettingsManager.Settings["Storm.AccessToken"], SensitiveSettings.SettingsManager.Settings["Storm.ProjectId"]);
			case "LOGENTRIES":
				return new LogentriesProvider(SensitiveSettings.SettingsManager.Settings["logentries.BaseURL"], SensitiveSettings.SettingsManager.Settings["logentries.AccountKey"], SensitiveSettings.SettingsManager.Settings["logentries.Host"], SensitiveSettings.SettingsManager.Settings["logentries.Log"]);
			default:
				return new NullLogProvider();
		}
		
	}
}</pre></div></div>

<p>The global.asax file allows us to wire logic into the global application workflow. On startup we get a provider, based on our &#8220;Sensitive Settings&#8221; configuration file, set that as our default logger, then go ahead and log our first message with entries to indicate this is application startup and the current UTC timestamp. Each time we receive a request from a web browser, we use our on line logging call to log the browsers UserAgent string and a timestamp. When an error goes unhandled, we can log that too.</p>
<p>Elsewhere in our application we can use those same one line calls to pass information to the logging service. The HomeController logs information, but instead uses the CaptureElapsedTime method to log information and the time that elapses between it&#8217;s instantiation and disposal.</p>
<p><b>SampleSiteWithLogging.Controllers.HomeController</b> (<a href="https://github.com/tarwn/InstrumentationSampleCode/blob/master/SampleSiteWithLogging/Controllers/HomeController.cs" title="HomeController.cs on Github" target="_blank">source</a>)</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="csharp"><thead><tr><td colspan="2"  class="head">C#</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
</pre></td><td class="de1"><pre class="de1"><span class="kw1">public</span> <span class="kw4">class</span> HomeController <span class="sy0">:</span> Controller <span class="br0">&#123;</span>
&nbsp; &nbsp; <span class="kw1">public</span> ActionResult Index<span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">return</span> View<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp;
&nbsp; &nbsp; <span class="kw1">public</span> ActionResult ShortOperation<span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">using</span> <span class="br0">&#40;</span><span class="kw1">var</span> log <span class="sy0">=</span> Logging<span class="sy0">.</span><span class="me1">Logger</span><span class="sy0">.</span><span class="me1">CaptureElapsedTime</span><span class="br0">&#40;</span><span class="kw3">new</span> Dictionary<span class="sy0">&lt;</span><span class="kw4">string</span>, <span class="kw4">string</span><span class="sy0">&gt;</span> <span class="br0">&#123;</span> <span class="br0">&#123;</span> <span class="st0">&quot;Type&quot;</span>, <span class="st0">&quot;SiteHit&quot;</span> <span class="br0">&#125;</span>, <span class="br0">&#123;</span> <span class="st0">&quot;Area&quot;</span>, <span class="st0">&quot;HomeController&quot;</span> <span class="br0">&#125;</span>, <span class="br0">&#123;</span> <span class="st0">&quot;Method&quot;</span>, <span class="st0">&quot;ShortOperation&quot;</span> <span class="br0">&#125;</span> <span class="br0">&#125;</span>, <span class="kw1">null</span><span class="br0">&#41;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">return</span> View<span class="br0">&#40;</span><span class="st0">&quot;Index&quot;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp;
&nbsp; &nbsp; <span class="kw1">public</span> ActionResult LongOperation<span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">using</span> <span class="br0">&#40;</span><span class="kw1">var</span> log <span class="sy0">=</span> Logging<span class="sy0">.</span><span class="me1">Logger</span><span class="sy0">.</span><span class="me1">CaptureElapsedTime</span><span class="br0">&#40;</span><span class="kw3">new</span> Dictionary<span class="sy0">&lt;</span><span class="kw4">string</span>, <span class="kw4">string</span><span class="sy0">&gt;</span> <span class="br0">&#123;</span> <span class="br0">&#123;</span> <span class="st0">&quot;Type&quot;</span>, <span class="st0">&quot;SiteHit&quot;</span> <span class="br0">&#125;</span>, <span class="br0">&#123;</span> <span class="st0">&quot;Area&quot;</span>, <span class="st0">&quot;HomeController&quot;</span> <span class="br0">&#125;</span>, <span class="br0">&#123;</span> <span class="st0">&quot;Method&quot;</span>, <span class="st0">&quot;LongOperation&quot;</span> <span class="br0">&#125;</span> <span class="br0">&#125;</span>, <span class="kw1">null</span><span class="br0">&#41;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Thread<span class="sy0">.</span><span class="me1">Sleep</span><span class="br0">&#40;</span><span class="br0">&#40;</span><span class="kw4">int</span><span class="br0">&#41;</span><span class="br0">&#40;</span><span class="nu0">3000</span> <span class="sy0">*</span> <span class="kw3">new</span> Random<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">.</span><span class="me1">NextDouble</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#41;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">return</span> View<span class="br0">&#40;</span><span class="st0">&quot;Index&quot;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp;
<span class="br0">&#125;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">public class HomeController : Controller {
	public ActionResult Index() {
		return View();
	}

	public ActionResult ShortOperation() {
		using (var log = Logging.Logger.CaptureElapsedTime(new Dictionary&lt;string, string&gt; { { "Type", "SiteHit" }, { "Area", "HomeController" }, { "Method", "ShortOperation" } }, null)) {
			return View("Index");
		}
	}

	public ActionResult LongOperation() {
		using (var log = Logging.Logger.CaptureElapsedTime(new Dictionary&lt;string, string&gt; { { "Type", "SiteHit" }, { "Area", "HomeController" }, { "Method", "LongOperation" } }, null)) {
			Thread.Sleep((int)(3000 * new Random().NextDouble()));
			return View("Index");
		}
	}

}</pre></div></div>

<p>These examples are actually more wordy than I would like. If I were building this as part of a production application, I would refactor them down to take explicit arguments or infer some of the values, reducing the size of each call even further. </p>
<h2>&#8220;Sensitive Settings&#8221;</h2>
<p>The Sensitive Settings library is just a quick settings library I threw together so I could prevent my API keys for these services from getting committed to github.  The library is referenced by the website and unit test projects, each of which have a prebuild step to copy the &#8220;sensitive.config&#8221; file from the solution folder to their build target folders.</p>
<h2>LoggingTests</h2>
<p>The LoggingTests folder is really just a way for me to easily test small chunks of the libraries without firing up the interface. These aren&#8217;t real unit tests and that should serve as a second reason not to download and attempt to use the Logging library in a production application. <img src="https://s.w.org/images/core/emoji/2/72x72/1f642.png" alt="🙂" class="wp-smiley" style="height: 1em; max-height: 1em;" /></p>
<h2>Onward to the Reviews</h2>
<p>Now that we have some code we can easily connect to all of the services, the next post will cover the services I tried and how they measured up against my expectations for this type of usage.</p>
]]></content:encoded>
			<wfw:commentRss>/index.php/enterprisedev/instrumentation/monitoring-and-logging-as-a-service-common-bits/feed/</wfw:commentRss>
		<slash:comments>0</slash:comments>
		</item>
		<item>
		<title>Monitoring and Logging as a Service &#8211; Introduction</title>
		<link>/index.php/enterprisedev/instrumentation/monitoring-and-logging-as-a-service/</link>
		<comments>/index.php/enterprisedev/instrumentation/monitoring-and-logging-as-a-service/#comments</comments>
		<pubDate>Fri, 29 Jun 2012 10:03:00 +0000</pubDate>
		<dc:creator><![CDATA[Eli Weinstock-Herman (tarwn)]]></dc:creator>
				<category><![CDATA[Instrumentation]]></category>
		<category><![CDATA[logging]]></category>
		<category><![CDATA[monitoring]]></category>
		<category><![CDATA[operations]]></category>

		<guid isPermaLink="false">/index.php/2012/06/monitoring-and-logging-as-a-service/</guid>
		<description><![CDATA[Monitoring [in IT] sucks and I am probably more critical of its state than most IT people. Over the next few posts I'm going to integrate a sample application with several logging and data services, evaluating them against my own needs and expectations. Besides the comparison, and perhaps more importantly, the examples will show how easy it is to instrument our applications and start getting visibility into what is actually happening behind the scenes.]]></description>
				<content:encoded><![CDATA[<p><a href="http://lusislog.blogspot.com/2011/06/why-monitoring-sucks.html" title="Why Monitoring Sucks">Monitoring [in IT] sucks</a> and I am probably more critical of its state than most IT people. Over the next few posts I&#8217;m going to integrate a sample application with several logging and data services, evaluating them against my own needs and expectations. Besides the comparison, and perhaps more importantly, the examples will show how easy it is to instrument our applications and start getting visibility into what is actually happening behind the scenes.</p>
<h2>Monitoring in IT is Behind</h2>
<p>Ten years ago I regularly worked with monitoring systems that recorded thousands of data points per second. They ran on beige desktop systems shoved in network closets, dell towers that were beginning to leave the beige behind, and 2U and 4U servers. They communicated through 1/10 switch ports, often fixed at 1 Mbps. They had to understand 10&#8217;s to 100&#8217;s of proprietary data protocols. They ran on IDE drives, storing years worth of data despite the drives barely pushing 100GB.</p>
<p>And yet they were recording thousands of data points per second, in real time, and storing it for historical analysis. They drove highly customizable interfaces supporting complex animations, graphs, meters, drag and drop design, and custom controls. Statistical analysis tools were available to analyze data from a dynamic number of sources across a user defined number of metrics in real time. Alerting systems provided email, SMS, and pager alerts while monitoring fixed alarm values, statistical anomalies, and trend-based alerting that alerted based on the projected state. Then there were the external applications, APIs, excel plugins, &#8230; Ten years ago.</p>
<p>This was the state of monitoring in the manufacturing world a decade ago, running on hardware and operating systems less capable than most of the cellphones we carry today. </p>
<h2>But IT Demand is Continuing to Grow</h2>
<p>In IT, the most mature market for monitoring and data collection is infrastructure (systems and network). But &#8220;most mature&#8221; is <a href="http://lusislog.blogspot.com/2011/06/why-monitoring-sucks.html" title="Why Monitoring Sucks">still behind</a>. The fact that so many systems barely have the concept of recipes for common monitoring targets, or lock our data behind such limited interfaces, leaves most of the commercial options closer to 15 years behind. </p>
<p>Software development lags even farther behind. </p>
<p>The current state of monitoring for most of the application world hovers between nonexistent and barely proactive. I have seen as many applications lacking even basic error logging as I have those with it, and the presence of even regular daily or weekly state checks has been even less prevalent. The state of application monitoring can be summed up as &#8220;We usually know when the system breaks, sometimes we get those messages immediately, and sometimes we actually read them&#8221;. </p>
<p>This market is beginning to emerge more, and hopefully that movement will start driving more tool development. Somewhere between fixed value monitoring and reporting on unstructured log data, we are building more businesses that value transparency in our application behavior. And even though most of the tools are better suited to infrastructure or basic log parsing, there is still an enormous potential in that first level of visibility beyond logging to a local file or an email address.</p>
<h2>Tools to be Reviewed</h2>
<p>Over the next couple posts, I&#8217;ll introduce some sample code that integrates an application with several logging services. The application to be instrumented is an ASP.net MVC 3 application that has a very basic view with links to a short and longer running action. Most of the services to be reviewed are built around managing unstructured log data, which isn&#8217;t a perfect fit, but does give us a lot of capability very cheaply.</p>
<p>The goal is to capture data consistently with as little impact to the code and performance of the original application as possible. Once data has been captured we then want to make it usable, creating some useful searches and visualizations to generate value from that data. </p>
<p>As a secondary goal, I hope the simplicity of the example and integration code will inspire more developers to start adding transparency to their code, not just for the benefit it will bring them, but also to put more pressure on tooling to improve.</p>
]]></content:encoded>
			<wfw:commentRss>/index.php/enterprisedev/instrumentation/monitoring-and-logging-as-a-service/feed/</wfw:commentRss>
		<slash:comments>1</slash:comments>
		</item>
	</channel>
</rss>
