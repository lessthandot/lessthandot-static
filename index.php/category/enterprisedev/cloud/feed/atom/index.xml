<?xml version="1.0" encoding="UTF-8"?><feed
  xmlns="http://www.w3.org/2005/Atom"
  xmlns:thr="http://purl.org/syndication/thread/1.0"
  xml:lang="en-US"
  xml:base="/wp-atom.php"
   >
	<title type="text">Cloud &#8211; LessthanDot</title>
	<subtitle type="text">A Technical Community for IT Professionals</subtitle>

	<updated>2019-03-09T12:50:36Z</updated>

	<link rel="alternate" type="text/html" href="/" />
	<id>/index.php/feed/atom/</id>
	<link rel="self" type="application/atom+xml" href="/index.php/category/enterprisedev/cloud/feed/atom/" />

	<generator uri="https://wordpress.org/" version="4.6.1">WordPress</generator>
	<entry>
		<author>
			<name>Eli Weinstock-Herman (tarwn)</name>
					</author>
		<title type="html"><![CDATA[Streaming Alerts using AWS Lambda, Kinesis, and DynamoDB]]></title>
		<link rel="alternate" type="text/html" href="/index.php/enterprisedev/cloud/streaming-alerts-using-aws-lambda-kinesis-and-dynamodb/" />
		<id>/?p=8898</id>
		<updated>2018-02-04T00:13:11Z</updated>
		<published>2018-01-23T18:06:36Z</published>
		<category scheme="/" term="Cloud" /><category scheme="/" term="aws" /><category scheme="/" term="DynamoDB" /><category scheme="/" term="Kinesis" /><category scheme="/" term="lambda" /><category scheme="/" term="node.js" /><category scheme="/" term="Serverless" />		<summary type="html"><![CDATA[Recently I was talking to some friends about alerting on complex streaming data. Between some past event processing work we had done and earlier experience aggregating real-time manufacturing data, I was thinking a lot about projecting and evaluating results as we go versus querying the for results on some frequency. It seemed like a realistic [&#8230;]]]></summary>
		<content type="html" xml:base="/index.php/enterprisedev/cloud/streaming-alerts-using-aws-lambda-kinesis-and-dynamodb/"><![CDATA[<p>Recently I was talking to some friends about alerting on complex streaming data. Between some past event processing work we had done and earlier experience aggregating real-time manufacturing data, I was thinking a lot about projecting and evaluating results as we go versus querying the for results on some frequency. It seemed like a realistic approach and I couldn&#8217;t stop thinking about it, so I decided to prototype the pieces that I was least familiar with. </p>
<p>The idea is based on one that is used frequently in CQRS and I&#8217;m far from the first to have it, professional tools like <a href="https://spark.apache.org/">Apache Spark</a> and <a href="https://aws.amazon.com/kinesis/data-analytics/">Amazon Kinesis Data Analytics</a> support this idea of a continuous query over time, but part of the driver was also the desire to support user-defined rules in a multi-tenant environment and see how that would impact my design thinking as I prototyped.</p>
<div style="border: 1px solid #eeeeee; border-left: 8px solid #eeeeee; margin: .5em 0; padding: 1em;">
<b>Examples:</b></p>
<ul>
<li><a href="https://docs.aws.amazon.com/kinesisanalytics/latest/dev/app-simple-alerts.html">Kinesis Analytics: Stock Prices Changes &gt; 1%</a></li>
<li><a href="https://gallery.cortanaintelligence.com/Tutorial/Using-Azure-Stream-Analytics-for-Real-time-fraud-detection-2">Azure Analytics: Detecting SIM fraud</a></li>
</div>
<p>It pushed me to learn some new (to me) things, so I thought I would share what I did and perhaps some of this will be helpful or interesting to others as well. </p>
<h2>Just Enough Prototyping w/ Lambdas, Kinesis, and DynamoDB</h2>
<p>So I set out to build just enough of a prototype to answer the unknowns, creating a small serverless application that receives a stream of events for 2 clients that each have 5 machines that change state simultaneously (warming up, running, shut down) so I could experiment with rules with different criteria and get a feel for how complex this would be.</p>
<div id="attachment_8900" style="width: 718px" class="wp-caption aligncenter"><img src="/wp-content/uploads/2018/01/AnalyticsOverview.png" alt="Analytics Overview" width="708" height="608" class="size-full wp-image-8900" srcset="/wp-content/uploads/2018/01/AnalyticsOverview.png 708w, /wp-content/uploads/2018/01/AnalyticsOverview-300x258.png 300w" sizes="(max-width: 708px) 100vw, 708px" /><p class="wp-caption-text">Analytics Overview</p></div>
<p>I would use a fake front-end to manage some fake &#8220;machines&#8221; for 2 &#8220;clients&#8221;, that would change state occasionally and publish those events. The fake site would push those events into the beginning of my real prototype, an <a href="https://aws.amazon.com/kinesis/">Amazon Kinesis</a> stream for events. An <a href="https://aws.amazon.com/lambda/">AWS Lambda</a> function, the &#8220;Rule Processor&#8221;, would be triggered by a batch of events on the stream. It would load the appropriate rules out of <A href="https://aws.amazon.com/dynamodb/">DynamoDB</a> for each client, evaluate which rules each event applies to, then combine that with previously cached events from DynamoDB and evaluate whether the rule is satisfied. If so, an alert would be published to the Kinesis Alerts Stream. Further downstream, an &#8220;Alerts Processor&#8221; function would receive those alerts and, in a real system, decide what types of notifications were necessary.</p>
<h2>Rules and DynamoDB Store</h2>
<p>The buckets of data in AWS can be thought of as query results that I am constantly updating for each event that comes in.</p>
<p><strong>Example Event:</strong></p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="javascript"><thead><tr><td colspan="2"  class="head">Javascript</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
</pre></td><td class="de1"><pre class="de1"><span class="br0">&#123;</span> 
&nbsp; &nbsp; <span class="st0">&quot;eventType&quot;</span><span class="sy0">:</span> <span class="st0">&quot;machineStatusChange&quot;</span><span class="sy0">,</span> 
&nbsp; &nbsp; <span class="st0">&quot;state&quot;</span><span class="sy0">:</span> <span class="st0">&quot;stopped&quot;</span><span class="sy0">,</span> 
&nbsp; &nbsp; <span class="st0">&quot;clientId&quot;</span><span class="sy0">:</span> <span class="st0">&quot;client-01&quot;</span><span class="sy0">,</span> 
&nbsp; &nbsp; <span class="st0">&quot;machineId&quot;</span><span class="sy0">:</span> <span class="st0">&quot;machine-01&quot;</span>
<span class="br0">&#125;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">{ 
    "eventType": "machineStatusChange", 
    "state": "stopped", 
    "clientId": "client-01", 
    "machineId": "machine-01"
}</pre></div></div>

<p><strong>Example Rule:</strong></p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="javascript"><thead><tr><td colspan="2"  class="head">Javascript</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
</pre></td><td class="de1"><pre class="de1"><span class="co1">// alert when all machines enter stopping state</span>
<span class="kw1">new</span> Rule<span class="br0">&#40;</span><span class="br0">&#123;</span>
&nbsp; &nbsp; ruleId<span class="sy0">:</span> <span class="st0">'hardcoded-rule-02'</span><span class="sy0">,</span>
&nbsp; &nbsp; clientId<span class="sy0">:</span> <span class="st0">&quot;client-01&quot;</span><span class="sy0">,</span>
&nbsp; &nbsp; where<span class="sy0">:</span> <span class="br0">&#91;</span><span class="br0">&#123;</span> <span class="st0">'property'</span><span class="sy0">:</span> <span class="st0">'machineId'</span><span class="sy0">,</span> <span class="st0">'equals'</span><span class="sy0">:</span> <span class="st0">'*'</span> <span class="br0">&#125;</span><span class="br0">&#93;</span><span class="sy0">,</span>
&nbsp; &nbsp; partitionBy<span class="sy0">:</span> <span class="br0">&#91;</span><span class="st0">'machineId'</span><span class="br0">&#93;</span><span class="sy0">,</span>
&nbsp; &nbsp; evaluate<span class="sy0">:</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; type<span class="sy0">:</span> <span class="st0">'all'</span><span class="sy0">,</span>
&nbsp; &nbsp; &nbsp; &nbsp; having<span class="sy0">:</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; calc<span class="sy0">:</span> <span class="st0">'latest'</span><span class="sy0">,</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; property<span class="sy0">:</span> <span class="st0">'state'</span><span class="sy0">,</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; equals<span class="sy0">:</span> <span class="st0">'stopped'</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp; &nbsp; <span class="br0">&#125;</span>
<span class="br0">&#125;</span><span class="br0">&#41;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">// alert when all machines enter stopping state
new Rule({
    ruleId: 'hardcoded-rule-02',
    clientId: "client-01",
    where: [{ 'property': 'machineId', 'equals': '*' }],
    partitionBy: ['machineId'],
    evaluate: {
        type: 'all',
        having: {
            calc: 'latest',
            property: 'state',
            equals: 'stopped'
        }
    }
})</pre></div></div>

<p>I wouldn&#8217;t expect an end user to enter a rule like this and would probably rework the structure if this was intended to be a real system, but it is good enough to let me resolve the bigger unknowns around processing events and partitioning data.</p>
<h2>Implementation</h2>
<p>I used the <a href="https://serverless.com/">serverless</a> platform to define and build these functions, running locally with a combination of <a href="https://github.com/dherault/serverless-offline">serverless-offline</a>, <a href="https://github.com/mhart/kinesalite">kinesalite</a>, <a href="https://github.com/mhart/dynalite">dynalite</a> and some tooling I cooked up to run kinesis functions locally (see <a href="/index.php/enterprisedev/cloud/serverless-http-kinesis-lambdas-with-offline-development/" title="Prior Post: Serverless HTTP + Kinesis Lambdas with Offline Development">Serverless HTTP + Kinesis Lambdas with Offline Development</a>). I also used <a href="https://wallabyjs.com/">wallaby.js</a> heavily to give me fast, inline feedback with unit tests inside larger iterations of manual testing with the <a href="https://expressjs.com/">express</a> front-end I bolted into another HTTP Lambda.</p>
<p>The code can be found here: <a href="https://github.com/tarwn/serverless-eventing-analytics">github: tarwn/serverless-eventing-analytics</a></p>
<p>The core of the system is the &#8220;Rule Processor&#8221;:</p>
<div id="attachment_8901" style="width: 463px" class="wp-caption aligncenter"><img src="/wp-content/uploads/2018/01/RuleProcessor.png" alt="Rule Processor Logic" width="453" height="624" class="size-full wp-image-8901" srcset="/wp-content/uploads/2018/01/RuleProcessor.png 453w, /wp-content/uploads/2018/01/RuleProcessor-218x300.png 218w" sizes="(max-width: 453px) 100vw, 453px" /><p class="wp-caption-text">Rule Processor Logic</p></div>
<p>The Rule Processor is triggered by a batch of events from Kinesis:</p>
<ul>
<li>Extract the event data from the batch</li>
<li>Group them by Client</li>
<li>For Each Client&#8217;s group of events:
<ul>
<li>Load the client&#8217;s rules</li>
<li>Create result buckets for each rule and add applicable events to it</li>
<li>Load past result data from DynamoDB and append local result data</li>
<li>Evaluate rule conditions and output any alerts</li>
</ul>
</li>
<li>Publish the collected alerts to the Alerts Kinesis Stream</li>
</ul>
<p>Each of the &#8220;Event x Rule&#8221; result buckets can be thought of as the results of a query we&#8217;re running continuously as events flow in (which is about the time I realized I was duplicating work a bunch of much smarter folks had put into stream analytics packages above). So if I have 6 rules that care about machine events and 1 event comes in for &#8220;machineStatusChange&#8221; on &#8220;machine-01&#8221;, then I&#8217;ll add that event to all 6 buckets individually (storage is cheap).</p>
<p>The rules are responsible for generating their own unique result name, which by convention is {clientId}/rules/{rule id}/{where clause specific bits}. You can see more in <a href="https://github.com/tarwn/serverless-eventing-analytics/blob/master/functions/ruleProcessor/lib/rule.js">/functions/ruleProcessor/lib/rule.js</a> .</p>
<p>The function code is a slightly messier version of the steps above:</p>
<p>/functions/ruleProcessor/handler.js (<a href="https://github.com/tarwn/serverless-eventing-analytics/blob/master/functions/ruleProcessor/handler.js">github</a>)</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="javascript"><thead><tr><td colspan="2"  class="head">Javascript</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
</pre></td><td class="de1"><pre class="de1">module.<span class="me1">exports</span>.<span class="me1">streamProcessor</span> <span class="sy0">=</span> <span class="br0">&#40;</span>kinesisEvent<span class="sy0">,</span> context<span class="sy0">,</span> callback<span class="br0">&#41;</span> <span class="sy0">=&gt;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; <span class="kw1">const</span> events <span class="sy0">=</span> helper.<span class="me1">extractEventsFromKinesisEvent</span><span class="br0">&#40;</span>kinesisEvent<span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; <span class="kw1">const</span> eventGroups <span class="sy0">=</span> helper.<span class="me1">groupEventsByClient</span><span class="br0">&#40;</span>events<span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; Promise.<span class="me1">all</span><span class="br0">&#40;</span>eventGroups.<span class="me1">map</span><span class="br0">&#40;</span><span class="br0">&#40;</span>group<span class="br0">&#41;</span> <span class="sy0">=&gt;</span> evaluateAndStore<span class="br0">&#40;</span>group<span class="br0">&#41;</span><span class="br0">&#41;</span><span class="br0">&#41;</span>
&nbsp; &nbsp; <span class="co1">// …</span>
&nbsp; &nbsp; .<span class="me1">then</span><span class="br0">&#40;</span><span class="br0">&#40;</span>nestedAlerts<span class="br0">&#41;</span> <span class="sy0">=&gt;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">var</span> alerts <span class="sy0">=</span> flatten<span class="br0">&#40;</span>nestedAlerts<span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">const</span> publishAlerts <span class="sy0">=</span> alerts.<span class="me1">map</span><span class="br0">&#40;</span><span class="br0">&#40;</span>alert<span class="br0">&#41;</span> <span class="sy0">=&gt;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">return</span> publishAlert<span class="br0">&#40;</span>alert<span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">return</span> Promise.<span class="me1">all</span><span class="br0">&#40;</span>publishAlerts<span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; <span class="br0">&#125;</span><span class="br0">&#41;</span>
&nbsp; &nbsp; <span class="co1">// …</span>
<span class="br0">&#125;</span><span class="sy0">;</span>
&nbsp;
<span class="kw1">function</span> evaluateAndStore<span class="br0">&#40;</span>eventGroup<span class="br0">&#41;</span><span class="br0">&#123;</span>
&nbsp; &nbsp; <span class="kw1">const</span> clientRules <span class="sy0">=</span> rules.<span class="kw1">get</span><span class="br0">&#40;</span>eventGroup.<span class="me1">clientId</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; <span class="kw1">const</span> localResults <span class="sy0">=</span> helper.<span class="me1">applyRules</span><span class="br0">&#40;</span>clientRules<span class="sy0">,</span> eventGroup<span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; <span class="co1">// open per-rule results to merge with stored results and evaluate for alert</span>
&nbsp; &nbsp; <span class="kw1">return</span> Promise.<span class="me1">all</span><span class="br0">&#40;</span>localResults.<span class="me1">map</span><span class="br0">&#40;</span><span class="br0">&#40;</span>result<span class="br0">&#41;</span> <span class="sy0">=&gt;</span> <span class="br0">&#123;</span> 
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">const</span> appliedRule <span class="sy0">=</span> clientRules.<span class="me1">find</span><span class="br0">&#40;</span><span class="br0">&#40;</span>cr<span class="br0">&#41;</span> <span class="sy0">=&gt;</span> cr.<span class="me1">ruleId</span> <span class="sy0">=</span> result.<span class="me1">ruleId</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">return</span> results.<span class="me1">applyLocalResultToStoredResult</span><span class="br0">&#40;</span>result<span class="sy0">,</span> appliedRule<span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; .<span class="me1">then</span><span class="br0">&#40;</span><span class="br0">&#40;</span>completeResult<span class="br0">&#41;</span> <span class="sy0">=&gt;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">if</span> <span class="br0">&#40;</span>appliedRule.<span class="me1">meetsConditionsFor</span><span class="br0">&#40;</span>completeResult<span class="br0">&#41;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span> 
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; console.<span class="me1">log</span><span class="br0">&#40;</span>`ALERTED <span class="kw1">for</span> $<span class="br0">&#123;</span>completeResult.<span class="me1">uniqueResultKey</span><span class="br0">&#125;</span>`<span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">return</span> appliedRule.<span class="me1">getAlertFor</span><span class="br0">&#40;</span>completeResult<span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">else</span><span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; console.<span class="me1">log</span><span class="br0">&#40;</span>`No alerts <span class="kw1">for</span> $<span class="br0">&#123;</span>completeResult.<span class="me1">uniqueResultKey</span><span class="br0">&#125;</span>`<span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">return</span> <span class="kw2">null</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; <span class="br0">&#125;</span><span class="br0">&#41;</span><span class="br0">&#41;</span>
&nbsp; &nbsp; .<span class="me1">then</span><span class="br0">&#40;</span><span class="br0">&#40;</span>nestedAlerts<span class="br0">&#41;</span> <span class="sy0">=&gt;</span> flatten<span class="br0">&#40;</span>nestedAlerts<span class="br0">&#41;</span><span class="br0">&#41;</span><span class="sy0">;</span>
<span class="br0">&#125;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">module.exports.streamProcessor = (kinesisEvent, context, callback) =&gt; {
    const events = helper.extractEventsFromKinesisEvent(kinesisEvent);
    const eventGroups = helper.groupEventsByClient(events);

    Promise.all(eventGroups.map((group) =&gt; evaluateAndStore(group)))
    // …
    .then((nestedAlerts) =&gt; {
        var alerts = flatten(nestedAlerts);

        const publishAlerts = alerts.map((alert) =&gt; {
            return publishAlert(alert);
        });
        return Promise.all(publishAlerts);
    })
    // …
};

function evaluateAndStore(eventGroup){
    const clientRules = rules.get(eventGroup.clientId);
    const localResults = helper.applyRules(clientRules, eventGroup);

    // open per-rule results to merge with stored results and evaluate for alert
    return Promise.all(localResults.map((result) =&gt; { 
        const appliedRule = clientRules.find((cr) =&gt; cr.ruleId = result.ruleId);
        return results.applyLocalResultToStoredResult(result, appliedRule)
            .then((completeResult) =&gt; {
                if (appliedRule.meetsConditionsFor(completeResult)) { 
                    console.log(`ALERTED for ${completeResult.uniqueResultKey}`);
                    return appliedRule.getAlertFor(completeResult);
                }
                else{
                    console.log(`No alerts for ${completeResult.uniqueResultKey}`);
                    return null;
                }
            });
    }))
    .then((nestedAlerts) =&gt; flatten(nestedAlerts));
}</pre></div></div>

<p>When events start flowing through, we can see data getting loaded and applied for each of those rules. Client-02 alerts when any machine enters a stopped state (as opposed to all machines, like client-01 above), so we can see </p>
<div id="attachment_8902" style="width: 837px" class="wp-caption aligncenter"><img src="/wp-content/uploads/2018/01/RuleProcessorOutput.png" alt="Rule Processor Output" width="827" height="255" class="size-full wp-image-8902" srcset="/wp-content/uploads/2018/01/RuleProcessorOutput.png 827w, /wp-content/uploads/2018/01/RuleProcessorOutput-300x93.png 300w, /wp-content/uploads/2018/01/RuleProcessorOutput-768x237.png 768w" sizes="(max-width: 827px) 100vw, 827px" /><p class="wp-caption-text">Rule Processor Output</p></div>
<p>You can run this yourself by cloning the <a href="https://github.com/tarwn/serverless-eventing-analytics">github repo</a>, running <code>npm run offline</code>, and then opening your browser to <a href="http://localhost:3000/">http://localhost:3000/</a>.</p>
<h2>Next Steps</h2>
<p>This proved out the big question I had, and maybe helped some folks with running Kinesis functions locally (previous post), so I&#8217;m calling it a win. If I were building this for production, the next steps would be to continue making the rules richer, figure out how to age data out of the result set I&#8217;m storing in DynamoDB, and start building an interface that would allow you to create and store a rule on your own. Another big question would be whether I also need some sort of regular event (second? Minute) to re-evaluate rules for data to fall off or for queries that want to rely on the continued state of a value without needing new events to come in and restart it (the machine is still running, still running, still running…). </p>
]]></content>
			<link rel="replies" type="text/html" href="/index.php/enterprisedev/cloud/streaming-alerts-using-aws-lambda-kinesis-and-dynamodb/#comments" thr:count="0"/>
		<link rel="replies" type="application/atom+xml" href="/index.php/enterprisedev/cloud/streaming-alerts-using-aws-lambda-kinesis-and-dynamodb/feed/atom/" thr:count="0"/>
		<thr:total>0</thr:total>
		</entry>
		<entry>
		<author>
			<name>Eli Weinstock-Herman (tarwn)</name>
					</author>
		<title type="html"><![CDATA[Serverless HTTP + Kinesis Lambdas with Offline Development]]></title>
		<link rel="alternate" type="text/html" href="/index.php/enterprisedev/cloud/serverless-http-kinesis-lambdas-with-offline-development/" />
		<id>/?p=8865</id>
		<updated>2018-01-16T16:47:28Z</updated>
		<published>2018-01-16T14:24:20Z</published>
		<category scheme="/" term="Cloud" /><category scheme="/" term="FaaS" /><category scheme="/" term="Kinesis" /><category scheme="/" term="lambda" /><category scheme="/" term="node.js" /><category scheme="/" term="Serverless" />		<summary type="html"><![CDATA[Lately I&#8217;ve been exploring an idea around applying custom, user-defined rules to streams of events. I&#8217;m using a combination of technologies, but the core is a FaaS setup that I can run locally that utilizes the serverless package to deploy AWS Lambda functions that consume events from a Kinesis stream. I prefer the speed of [&#8230;]]]></summary>
		<content type="html" xml:base="/index.php/enterprisedev/cloud/serverless-http-kinesis-lambdas-with-offline-development/"><![CDATA[<p>Lately I&#8217;ve been exploring an idea around applying custom, user-defined rules to streams of events. I&#8217;m using a combination of technologies, but the core is a <abbr title="Function-as-a-Service">FaaS</abbr> setup that I can run locally that utilizes the <a href="https://serverless.com/">serverless</a> package to deploy <a href="https://aws.amazon.com/lambda/">AWS Lambda</a> functions that consume events from a <a href="https://aws.amazon.com/kinesis/">Kinesis stream</a>. </p>
<p>I prefer the speed of local development feedback cycles. Getting HTTP Functions running locally was easy with serverless-offline, Kinesis was a lot trickier with more false starts. If you&#8217;re trying to get local node.js Lambdas running for HTTP and Kinesis, hopefully this will help.</p>
<h2>Spoilers&#8230;</h2>
<p>By the end of this post, we&#8217;ll have an HTTP endpoint that can accept POSTed events and publish to a Kinesis stream. We&#8217;ll have another function pulling events off that stream and processing them. No infrastructure, no polling code, no webserver configurations, less than 40 lines of code, and a simple cli command to deploy: <code>serverless deploy</code></p>
<div id="attachment_8867" style="width: 666px" class="wp-caption aligncenter"><img src="/wp-content/uploads/2018/01/OfflineHttpAndKinesisOutput.png" alt="cUrl =&gt; HTTP Function =&gt; Kinesis Stream =&gt; Kinesis Function" width="656" height="161" class="size-full wp-image-8867" srcset="/wp-content/uploads/2018/01/OfflineHttpAndKinesisOutput.png 656w, /wp-content/uploads/2018/01/OfflineHttpAndKinesisOutput-300x74.png 300w" sizes="(max-width: 656px) 100vw, 656px" /><p class="wp-caption-text">cUrl => HTTP Function => Kinesis Stream => Kinesis Function</p></div>
<p>That&#8217;s pretty standard FaaS stuff, but I can&#8217;t stand the latency of deploying to test changes, so I&#8217;ll add in some plugins and a little hackery to have all of that running in realtime, locally, with automatic syncing of changes as they&#8217;re made (because I don&#8217;t even like restarting services to try changes).</p>
<div id="attachment_8890" style="width: 699px" class="wp-caption aligncenter"><img src="/wp-content/uploads/2018/01/OfflineHttpAndKinesisOutputUpdated.png" alt="Updated Functions, Running Locally, No Restarts (SUPER!!!)" width="689" height="157" class="size-full wp-image-8890" srcset="/wp-content/uploads/2018/01/OfflineHttpAndKinesisOutputUpdated.png 689w, /wp-content/uploads/2018/01/OfflineHttpAndKinesisOutputUpdated-300x68.png 300w" sizes="(max-width: 689px) 100vw, 689px" /><p class="wp-caption-text">Updated Functions, Running Locally, No Restarts (SUPER!!!)</p></div>
<p>Here comes the details&#8230;</p>
<h2>Laying the Groundwork: An HTTP Function</h2>
<p>First I need some events flowing into a log. I&#8217;m choosing to use an HTTP endpoint to start getting setup for more complex functions and so I don&#8217;t get distracted building something to produce real events.<br />
I&#8217;m using <a href="">serverless</a> to wire up and deploy my functions. Two of the benefits of this is not wiring my deployment to git commits and being able to simulate Lambda and run my function logic locally.</p>
<h3>1. Set Up Serverless + AWS</h3>
<p>First up, I followed the Getting Started directions to get serverless setup with AWS credentials: </p>
<ul>
<li><a href="https://serverless.com/framework/docs/providers/aws/guide/installation/" title="Serverless.com: AWS - Installation">AWS &#8211; Installation</a></li>
<li><a href="https://serverless.com/framework/docs/providers/aws/guide/credentials/" title="Serverless.com: AWS - Credentials">AWS &#8211; Credentials</a></li>
</ul>
<p>Next, I define a very simple Http handler for my function:</p>
<p><b>OfflineHttp/functions/eventsHttp.js</b> <a href="https://github.com/tarwn/serverless-examples/blob/master/OfflineHttp/functions/eventsHttp.js">(github)</a></p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="javascript"><thead><tr><td colspan="2"  class="head">Javascript</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
</pre></td><td class="de1"><pre class="de1">module.<span class="me1">exports</span>.<span class="me1">handler</span> <span class="sy0">=</span> <span class="br0">&#40;</span>event<span class="sy0">,</span> context<span class="sy0">,</span> callback<span class="br0">&#41;</span> <span class="sy0">=&gt;</span> <span class="br0">&#123;</span> 
&nbsp; &nbsp; console.<span class="me1">log</span><span class="br0">&#40;</span><span class="st0">&quot;You POSTed an event!&quot;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; console.<span class="me1">log</span><span class="br0">&#40;</span>event.<span class="me1">body</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; callback<span class="br0">&#40;</span><span class="kw2">null</span><span class="sy0">,</span> <span class="br0">&#123;</span> statusCode<span class="sy0">:</span> <span class="nu0">200</span><span class="sy0">,</span> body<span class="sy0">:</span> <span class="st0">&quot;Success&quot;</span> <span class="br0">&#125;</span><span class="br0">&#41;</span><span class="sy0">;</span>
<span class="br0">&#125;</span><span class="sy0">;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">module.exports.handler = (event, context, callback) =&gt; { 
	console.log("You POSTed an event!");
	console.log(event.body);
	callback(null, { statusCode: 200, body: "Success" });
};</pre></div></div>

<p>Add the serverless-offline package: <code>npm install serverless-offline --save-dev</code></p>
<p>And then configure serverless:</p>
<p><b>OfflineHttp/serverless.yaml</b> <a href="https://github.com/tarwn/serverless-examples/tree/master/OfflineHttp/serverless.yaml">(github)</a></p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="text"><thead><tr><td colspan="2"  class="head">Text</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
</pre></td><td class="de1"><pre class="de1"># the name of my service - used during deployment
service: example-offline-http
&nbsp;
# serverless plugins to use with serverless
plugins:
&nbsp; - serverless-offline
&nbsp;
# set a default stage in case I don’t provide one
custom:
&nbsp; defaults:
&nbsp; &nbsp; stage: dev
&nbsp;
# some details about the environment and language I'm going to use
provider:
&nbsp; name: aws
&nbsp; runtime: nodejs6.10
&nbsp; region: us-east-1
&nbsp;
# the function entry point and defining the events to trigger it
functions:
&nbsp; events:
&nbsp; &nbsp; handler: functions/eventsHttp.handler
&nbsp; &nbsp; events:
&nbsp; &nbsp; &nbsp; - http:
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; method: POST
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; path: events
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; cors: true</pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse"># the name of my service - used during deployment
service: example-offline-http

# serverless plugins to use with serverless
plugins:
  - serverless-offline

# set a default stage in case I don’t provide one
custom:
  defaults:
    stage: dev

# some details about the environment and language I'm going to use
provider:
  name: aws
  runtime: nodejs6.10
  region: us-east-1

# the function entry point and defining the events to trigger it
functions:
  events:
    handler: functions/eventsHttp.handler
    events:
      - http:
          method: POST
          path: events
          cors: true</pre></div></div>

<p>Now to test it, we will start serverless and then post some events with curl:</p>
<p>Run <code>serverless offline</code></p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="text"><thead><tr><td colspan="2"  class="head">Text</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
</pre></td><td class="de1"><pre class="de1">Serverless: Starting Offline: dev/us-east-1.
Serverless: Routes for events:
Serverless: POST /events
Serverless: Offline listening on http://localhost:3000/</pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">Serverless: Starting Offline: dev/us-east-1.
Serverless: Routes for events:
Serverless: POST /events
Serverless: Offline listening on http://localhost:3000/</pre></div></div>

<p>And now we run <code>curl -d "{'key1':'value1', 'key2':'value2'}" -H "Content-Type: application/json" -X POST http://localhost:3000/events </code><br />
And serverless processes the response, and sends back a 200 Success:</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="text"><thead><tr><td colspan="2"  class="head">Text</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
</pre></td><td class="de1"><pre class="de1">Serverless: POST /events (λ: events)
You POSTed an event!
{'key1':'value1', 'key2':'value2'}
Serverless: [200] {&quot;statusCode&quot;:200,&quot;body&quot;:&quot;Success&quot;}</pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">Serverless: POST /events (λ: events)
You POSTed an event!
{'key1':'value1', 'key2':'value2'}
Serverless: [200] {"statusCode":200,"body":"Success"}</pre></div></div>

<p>To deploy this to real AWS, we run: <code>serverless deploy</code></p>
<p>Serverless creates the stack for us, creates a CloudFormation file to deploy the Lambda, performs the update, then returns information about the environment and the new endpoint it created. Replace the <code>localhost </code> entry above with that new endpoint and try it out!</p>
<p>We can continue to make changes and redeploy them, later deploys update that same stack. When we&#8217;re done, we can leave it running or remove it with <code>serverless remove</code>.</p>
<h3>2. Adding in Kinesis</h3>
<p>Adding a function to consume events from Kinesis is just as easy as the Http example above, but making this work locally is where it gets tricky. I looked at a few different approaches and eventually had to bundle something up on my own (I may go back to the drawing board and write a serverless-kinesalite plugin soon).</p>
<p><i>Note: From here out I&#8217;ll focus on running offline, you can then layer in the configurations for deploying to real Kinesis (lots of good posts on that).</i></p>
<p>To simulate kinesis locally, we can use the <a href="https://github.com/mhart/kinesalite">kinesalite</a> package. So let&#8217;s start by adding a script to bootstrap a Kinesis stream locally that we can publish to from our Http function above. </p>
<p>First, we can use a YAML file to define some environment-specific environment variables:</p>
<p><b>OfflineHttpAndKinesis/config/env.yml</b> <a href="https://github.com/tarwn/serverless-examples/blob/master/OfflineHttpAndKinesis/config/env.yml">(github)</a></p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="text"><thead><tr><td colspan="2"  class="head">Text</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
</pre></td><td class="de1"><pre class="de1">---
offline: 
&nbsp; KINESIS_HOST: 'localhost'
&nbsp; KINESIS_PORT: 4567
&nbsp; KINESIS_REGION: 'us-east-1'
&nbsp; KINESIS_STREAM_NAME_EVENTS: 'offline-events'</pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">---
offline: 
  KINESIS_HOST: 'localhost'
  KINESIS_PORT: 4567
  KINESIS_REGION: 'us-east-1'
  KINESIS_STREAM_NAME_EVENTS: 'offline-events'</pre></div></div>

<p>Because I don&#8217;t have a Kinesis plugin for serverless, we&#8217;re going to be running the bootstrap.js script prior to starting <code>serverless offline</code>, so we can use these environment variables across that bootstrap file, the Kinesis Lambda watcher, and in server less for the HTTP functions to publish to.</p>
<p>This is easy to make available in the serverless config, using a coalesce to look at the set for a stage passed in from the command line or falling back to a default value:</p>
<p><b>OfflineHttpAndKinesis/serverless.yml</b> <a href="https://github.com/tarwn/serverless-examples/blob/master/OfflineHttpAndKinesis/serverless.yml">(github)</a></p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="text"><thead><tr><td colspan="2"  class="head">Text</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
</pre></td><td class="de1"><pre class="de1">…
&nbsp;
custom:
&nbsp; defaults:
&nbsp; &nbsp; stage: dev
&nbsp;
provider:
&nbsp; name: aws
&nbsp; runtime: nodejs6.10
&nbsp; region: us-east-1
&nbsp; environment: ${file(./config/env.yml):${opt:stage, self:custom.defaults.stage}}
&nbsp;
…</pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">…

custom:
  defaults:
    stage: dev

provider:
  name: aws
  runtime: nodejs6.10
  region: us-east-1
  environment: ${file(./config/env.yml):${opt:stage, self:custom.defaults.stage}}

…</pre></div></div>

<p>As we add the bootstrap and kinesis runner, we&#8217;ll pull these environment variables in as well.</p>
<p>Now we&#8217;ll need to add some additional npm packages:</p>
<ul>
<li><code>npm install aws-sdk --save</code> &#8211; For creating the Kinesis stream and publishing in the HTTP Function</li>
<li><code>npm install js-yaml --save-dev</code> &#8211; For parsing the env.yml file for the bootstrap + runner</li>
<li><code>npm install concurrently --save-dev</code> &#8211; To make a clean npm task to start everything</li>
<li><code>npm install -g kinesalite</code> &#8211; Kinesis emulation</li>
</ul>
<p>We&#8217;re ready to add in local kinesis now.</p>
<h3>3. Bootstrap the Stream</h3>
<p>Before we run functions to consume events from the stream, we need to make sure we have started kinesalite and run the bootstrap to ensure the stream is created. We can use the AWS SDK with the env.yml values to get everything ready.</p>
<p><b>OfflineHttpAndKinesis/utility/bootstrap.js</b> <a href="https://github.com/tarwn/serverless-examples/blob/master/OfflineHttpAndKinesis/utility/bootstrap.js">(github)</a></p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="javascript"><thead><tr><td colspan="2"  class="head">Javascript</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
</pre></td><td class="de1"><pre class="de1"><span class="kw1">const</span> AWS <span class="sy0">=</span> require<span class="br0">&#40;</span><span class="st0">'aws-sdk'</span><span class="br0">&#41;</span><span class="sy0">;</span>
<span class="kw1">const</span> envFromYaml <span class="sy0">=</span> require<span class="br0">&#40;</span><span class="st0">'./envFromYaml'</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
envFromYaml.<span class="me1">config</span><span class="br0">&#40;</span><span class="st0">'./config/env.yml'</span><span class="sy0">,</span><span class="st0">'offline'</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
<span class="kw1">const</span> kinesis <span class="sy0">=</span> <span class="kw1">new</span> AWS.<span class="me1">Kinesis</span><span class="br0">&#40;</span><span class="br0">&#123;</span>
&nbsp; &nbsp; endpoint<span class="sy0">:</span> `$<span class="br0">&#123;</span>process.<span class="me1">env</span>.<span class="me1">KINESIS_HOST</span><span class="br0">&#125;</span><span class="sy0">:</span>$<span class="br0">&#123;</span>process.<span class="me1">env</span>.<span class="me1">KINESIS_PORT</span><span class="br0">&#125;</span>`<span class="sy0">,</span>
&nbsp; &nbsp; region<span class="sy0">:</span> process.<span class="me1">env</span>.<span class="me1">KINESIS_REGION</span><span class="sy0">,</span>
&nbsp; &nbsp; apiVersion<span class="sy0">:</span> <span class="st0">'2013-12-02'</span><span class="sy0">,</span>
&nbsp; &nbsp; sslEnabled<span class="sy0">:</span> <span class="kw2">false</span>
<span class="br0">&#125;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
ensureStreamExists<span class="br0">&#40;</span>kinesis<span class="sy0">,</span> process.<span class="me1">env</span>.<span class="me1">KINESIS_STREAM_NAME_EVENTS</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
<span class="kw1">function</span> ensureStreamExists<span class="br0">&#40;</span>kinesis<span class="sy0">,</span> streamName<span class="br0">&#41;</span><span class="br0">&#123;</span>
&nbsp; &nbsp; <span class="kw1">var</span> req <span class="sy0">=</span> kinesis.<span class="me1">createStream</span><span class="br0">&#40;</span><span class="br0">&#123;</span> ShardCount<span class="sy0">:</span> <span class="nu0">1</span><span class="sy0">,</span> StreamName<span class="sy0">:</span> streamName <span class="br0">&#125;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; req.<span class="me1">send</span><span class="br0">&#40;</span><span class="kw1">function</span> <span class="br0">&#40;</span>err<span class="sy0">,</span> data<span class="br0">&#41;</span> <span class="br0">&#123;</span> 
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">if</span> <span class="br0">&#40;</span>err<span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">if</span> <span class="br0">&#40;</span>err.<span class="me1">code</span> <span class="sy0">===</span> <span class="st0">'ResourceInUseException'</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="co1">// Stream already exists, so no problem</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; console.<span class="me1">log</span><span class="br0">&#40;</span>`Bootstrap<span class="sy0">:</span> Success <span class="sy0">-</span> Kinesis stream <span class="st0">'${streamName}'</span> already exists`<span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; process.<span class="me1">exit</span><span class="br0">&#40;</span><span class="nu0">0</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">else</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; console.<span class="me1">log</span><span class="br0">&#40;</span>`Bootstrap<span class="sy0">:</span> Failed <span class="sy0">-</span> Create Kinesis stream <span class="st0">'${streamName}'</span> failed with error $<span class="br0">&#123;</span>err.<span class="me1">stack</span><span class="br0">&#125;</span>`<span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; process.<span class="me1">exit</span><span class="br0">&#40;</span><span class="nu0">1</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">else</span> <span class="br0">&#123;</span> 
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; console.<span class="me1">log</span><span class="br0">&#40;</span>`Bootstrap<span class="sy0">:</span> Success <span class="sy0">-</span> Kinesis stream <span class="st0">'${streamName}'</span> created`<span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; process.<span class="me1">exit</span><span class="br0">&#40;</span><span class="nu0">0</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp; &nbsp; <span class="br0">&#125;</span><span class="br0">&#41;</span><span class="sy0">;</span>
<span class="br0">&#125;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">const AWS = require('aws-sdk');
const envFromYaml = require('./envFromYaml');

envFromYaml.config('./config/env.yml','offline');

const kinesis = new AWS.Kinesis({
    endpoint: `${process.env.KINESIS_HOST}:${process.env.KINESIS_PORT}`,
    region: process.env.KINESIS_REGION,
    apiVersion: '2013-12-02',
    sslEnabled: false
});

ensureStreamExists(kinesis, process.env.KINESIS_STREAM_NAME_EVENTS);

function ensureStreamExists(kinesis, streamName){
    var req = kinesis.createStream({ ShardCount: 1, StreamName: streamName });
    req.send(function (err, data) { 
        if (err) {
            if (err.code === 'ResourceInUseException') {
                // Stream already exists, so no problem
                console.log(`Bootstrap: Success - Kinesis stream '${streamName}' already exists`);
                process.exit(0);
            }
            else {
                console.log(`Bootstrap: Failed - Create Kinesis stream '${streamName}' failed with error ${err.stack}`);
                process.exit(1);
            }
        }
        else { 
            console.log(`Bootstrap: Success - Kinesis stream '${streamName}' created`);
            process.exit(0);
        }
    });
}</pre></div></div>

<p>At the top, we&#8217;re pulling the environment variables from the YAML file and pushing it into process.env. We then use the variables to define our Kinesis connection and call the homegrown <code>ensureStreamExists</code> function for each Stream we need to create it if it doesn&#8217;t already exist. My other application has multiple streams, so I have additional KINESIS_STREAM_NAME_* environment variables and call <code>ensureStreamExists</code> for each one. </p>
<p>Now to try it out, we can use two console sessions to run kinesalite: <code>kinesalite</code> and then the bootstrap: <code>node utility/bootstrap.js</code>, and we&#8217;ll know it&#8217;s working when we see this:</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="text"><thead><tr><td colspan="2"  class="head">Text</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
</pre></td><td class="de1"><pre class="de1">Bootstrap: Success - Kinesis stream 'offline-events' created</pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">Bootstrap: Success - Kinesis stream 'offline-events' created</pre></div></div>

<p>We&#8217;ll come back and use concurrently to bundle this into a single, easy npm task.</p>
<h3>4. Add a Kinesis Function</h3>
<p>Adding a new function to consume Kinesis events is as easy as the HTTP function.</p>
<p>Here is the function we&#8217;re adding:</p>
<p><b>OfflineHttpAndKinesis/functions/eventsStream.js</b> <a href="https://github.com/tarwn/serverless-examples/blob/master/OfflineHttpAndKinesis/functions/eventsStream.js">(github)</a></p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="javascript"><thead><tr><td colspan="2"  class="head">Javascript</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
</pre></td><td class="de1"><pre class="de1"><span class="st0">'use strict'</span><span class="sy0">;</span>
&nbsp;
module.<span class="me1">exports</span>.<span class="me1">handler</span> <span class="sy0">=</span> <span class="br0">&#40;</span>event<span class="sy0">,</span> context<span class="sy0">,</span> callback<span class="br0">&#41;</span> <span class="sy0">=&gt;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; event.<span class="me1">Records</span>.<span class="me1">forEach</span><span class="br0">&#40;</span><span class="br0">&#40;</span>record<span class="br0">&#41;</span> <span class="sy0">=&gt;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">const</span> payload <span class="sy0">=</span> <span class="kw1">new</span> Buffer<span class="br0">&#40;</span>record.<span class="me1">kinesis</span>.<span class="me1">data</span><span class="sy0">,</span> <span class="st0">'base64'</span><span class="br0">&#41;</span>.<span class="me1">toString</span><span class="br0">&#40;</span><span class="st0">'ascii'</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; console.<span class="me1">log</span><span class="br0">&#40;</span><span class="st0">&quot;Received an event: &quot;</span> <span class="sy0">+</span> payload<span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; <span class="br0">&#125;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; callback<span class="br0">&#40;</span><span class="kw2">null</span><span class="sy0">,</span> `Successfully processed $<span class="br0">&#123;</span>event.<span class="me1">Records</span>.<span class="me1">length</span><span class="br0">&#125;</span> event.`<span class="br0">&#41;</span><span class="sy0">;</span>
<span class="br0">&#125;</span><span class="sy0">;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">'use strict';

module.exports.handler = (event, context, callback) =&gt; {
    event.Records.forEach((record) =&gt; {
        const payload = new Buffer(record.kinesis.data, 'base64').toString('ascii');
        console.log("Received an event: " + payload);
    });
    callback(null, `Successfully processed ${event.Records.length} event.`);
};</pre></div></div>

<p>This function accepts a batch of Kinesis events, loops through each to read the contents, and then console.log&#8217;s that event content. In later posts, I&#8217;ll go into more complex cases or you can look at the <a href="https://github.com/serverless/examples" title="github: serverless/examples">serverless/examples</a> for ideas.</p>
<p>Now for the hard part.</p>
<p>I&#8217;ve adapted a runner I found online for this part, which is available on <a href="
https://github.com/tarwn/local-kinesis-lambda-runner" title="github: tarwn/local-kinesis-lambda-runner">github</a>. I&#8217;ve fixed some bugs and made changes for wider function support, but I&#8217;m still leaning toward writing a serverless plugin directly instead.</p>
<p><code>npm install git+https://github.com/tarwn/local-kinesis-lambda-runner.git#package --save-dev</code> will install the version I&#8217;m using.</p>
<p>With the package above and the following script, we can bind functions locally to the Kinesis streams with minimal double-typing (there is still a little).</p>
<p><b>OfflineHttpAndKinesis/utility/runOfflineStreamHandlers.js</b> <a href="https://github.com/tarwn/serverless-examples/blob/master/OfflineHttpAndKinesis/utility/runOfflineStreamHandlers.js">(github)</a></p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="javascript"><thead><tr><td colspan="2"  class="head">Javascript</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
</pre></td><td class="de1"><pre class="de1"><span class="kw1">const</span> AWS <span class="sy0">=</span> require<span class="br0">&#40;</span><span class="st0">'aws-sdk'</span><span class="br0">&#41;</span><span class="sy0">;</span>
<span class="kw1">const</span> run <span class="sy0">=</span> require<span class="br0">&#40;</span><span class="st0">'@rabblerouser/local-kinesis-lambda-runner'</span><span class="br0">&#41;</span><span class="sy0">;</span>
<span class="kw1">const</span> envFromYaml <span class="sy0">=</span> require<span class="br0">&#40;</span><span class="st0">'./envFromYaml'</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
envFromYaml.<span class="me1">config</span><span class="br0">&#40;</span><span class="st0">'./config/env.yml'</span><span class="sy0">,</span><span class="st0">'offline'</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
<span class="kw1">const</span> kinesis <span class="sy0">=</span> <span class="kw1">new</span> AWS.<span class="me1">Kinesis</span><span class="br0">&#40;</span><span class="br0">&#123;</span>
&nbsp; &nbsp; endpoint<span class="sy0">:</span> `$<span class="br0">&#123;</span>process.<span class="me1">env</span>.<span class="me1">KINESIS_HOST</span><span class="br0">&#125;</span><span class="sy0">:</span>$<span class="br0">&#123;</span>process.<span class="me1">env</span>.<span class="me1">KINESIS_PORT</span><span class="br0">&#125;</span>`<span class="sy0">,</span>
&nbsp; &nbsp; region<span class="sy0">:</span> process.<span class="me1">env</span>.<span class="me1">KINESIS_REGION</span><span class="sy0">,</span>
&nbsp; &nbsp; apiVersion<span class="sy0">:</span> <span class="st0">'2013-12-02'</span><span class="sy0">,</span>
&nbsp; &nbsp; sslEnabled<span class="sy0">:</span> <span class="kw2">false</span>
<span class="br0">&#125;</span><span class="br0">&#41;</span><span class="sy0">;</span>
<span class="kw1">const</span> functions <span class="sy0">=</span> <span class="br0">&#91;</span>
&nbsp; &nbsp; <span class="br0">&#123;</span> funName<span class="sy0">:</span> <span class="st0">'EventProcessor'</span><span class="sy0">,</span> handlerPath<span class="sy0">:</span> <span class="st0">'../functions/eventsStream'</span><span class="sy0">,</span> handlerName<span class="sy0">:</span> <span class="st0">'handler'</span><span class="sy0">,</span> kinesisStreamName<span class="sy0">:</span> process.<span class="me1">env</span>.<span class="me1">KINESIS_STREAM_NAME_EVENTS</span> <span class="br0">&#125;</span>
<span class="br0">&#93;</span><span class="sy0">;</span>
initialize<span class="br0">&#40;</span>functions<span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
<span class="co1">// … more code …</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">const AWS = require('aws-sdk');
const run = require('@rabblerouser/local-kinesis-lambda-runner');
const envFromYaml = require('./envFromYaml');

envFromYaml.config('./config/env.yml','offline');

const kinesis = new AWS.Kinesis({
    endpoint: `${process.env.KINESIS_HOST}:${process.env.KINESIS_PORT}`,
    region: process.env.KINESIS_REGION,
    apiVersion: '2013-12-02',
    sslEnabled: false
});
const functions = [
    { funName: 'EventProcessor', handlerPath: '../functions/eventsStream', handlerName: 'handler', kinesisStreamName: process.env.KINESIS_STREAM_NAME_EVENTS }
];
initialize(functions);

// … more code …</pre></div></div>

<p>The key part of this file to edit is the names in the array of functions. <code>funName</code> is a human-readable name you will see in the console output, <code>handlerPath</code> is the relative path to the file the handler is in, <code>handlerName</code> is the module. Everything else is read from the environment variables that are pulled in from the env.yml file and you can add as few or as many entries to the functions array as you like. This file also invalidates the require() cache while it&#8217;s running, so you can make changes to functions and fire new events and the new code will be picked up immediately without restarting anything.</p>
<p>We have one more step before we can bring it all together: publishing events.</p>
<h2>Publishing Events to Kinesis</h2>
<p>We have all the pieces we need to publish events, an HTTP function, the AWS SDK, shared environment variables to identify the streams, so let&#8217;s connect all the dots.</p>
<p>Updating the function to publish the events looks like this:</p>
<p><b>OfflineHttpAndKinesis/functions/eventsHttp.js</b> <a href="https://github.com/tarwn/serverless-examples/blob/master/OfflineHttpAndKinesis/functions/eventsHttp.js">(github)</a></p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="javascript"><thead><tr><td colspan="2"  class="head">Javascript</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
</pre></td><td class="de1"><pre class="de1"><span class="st0">'use strict'</span><span class="sy0">;</span>
&nbsp;
<span class="kw1">var</span> AWS <span class="sy0">=</span> require<span class="br0">&#40;</span><span class="st0">'aws-sdk'</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; 
<span class="kw1">const</span> kinesis <span class="sy0">=</span> <span class="kw1">new</span> AWS.<span class="me1">Kinesis</span><span class="br0">&#40;</span><span class="br0">&#123;</span>
&nbsp; &nbsp; endpoint<span class="sy0">:</span> `$<span class="br0">&#123;</span>process.<span class="me1">env</span>.<span class="me1">KINESIS_HOST</span><span class="br0">&#125;</span><span class="sy0">:</span>$<span class="br0">&#123;</span>process.<span class="me1">env</span>.<span class="me1">KINESIS_PORT</span><span class="br0">&#125;</span>`<span class="sy0">,</span>
&nbsp; &nbsp; region<span class="sy0">:</span> process.<span class="me1">env</span>.<span class="me1">KINESIS_REGION</span><span class="sy0">,</span>
&nbsp; &nbsp; apiVersion<span class="sy0">:</span> <span class="st0">'2013-12-02'</span><span class="sy0">,</span>
&nbsp; &nbsp; sslEnabled<span class="sy0">:</span> <span class="kw2">false</span>
<span class="br0">&#125;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
module.<span class="me1">exports</span>.<span class="me1">handler</span> <span class="sy0">=</span> <span class="br0">&#40;</span>event<span class="sy0">,</span> context<span class="sy0">,</span> callback<span class="br0">&#41;</span> <span class="sy0">=&gt;</span> <span class="br0">&#123;</span> 
&nbsp; &nbsp; console.<span class="me1">log</span><span class="br0">&#40;</span><span class="st0">&quot;You POSTed an event!&quot;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; <span class="kw1">var</span> putReq <span class="sy0">=</span> kinesis.<span class="me1">putRecord</span><span class="br0">&#40;</span><span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; Data<span class="sy0">:</span> JSON.<span class="me1">stringify</span><span class="br0">&#40;</span>event.<span class="me1">body</span><span class="br0">&#41;</span><span class="sy0">,</span>
&nbsp; &nbsp; &nbsp; &nbsp; PartitionKey<span class="sy0">:</span> <span class="st0">'0'</span><span class="sy0">,</span>
&nbsp; &nbsp; &nbsp; &nbsp; StreamName<span class="sy0">:</span> process.<span class="me1">env</span>.<span class="me1">KINESIS_STREAM_NAME_EVENTS</span>
&nbsp; &nbsp; <span class="br0">&#125;</span><span class="sy0">,</span> <span class="kw1">function</span> <span class="br0">&#40;</span>err<span class="sy0">,</span> data<span class="br0">&#41;</span> <span class="br0">&#123;</span> 
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">if</span> <span class="br0">&#40;</span>err<span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; callback<span class="br0">&#40;</span>err<span class="sy0">,</span> <span class="br0">&#123;</span> statusCode<span class="sy0">:</span> <span class="nu0">500</span><span class="sy0">,</span> body<span class="sy0">:</span> <span class="st0">&quot;Error writing to kinesis&quot;</span> <span class="br0">&#125;</span> <span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">else</span> <span class="br0">&#123;</span> 
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; callback<span class="br0">&#40;</span><span class="kw2">null</span><span class="sy0">,</span> <span class="br0">&#123;</span> statusCode<span class="sy0">:</span> <span class="nu0">200</span><span class="sy0">,</span> body<span class="sy0">:</span> <span class="st0">&quot;Ok&quot;</span> <span class="br0">&#125;</span> <span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp; &nbsp; <span class="br0">&#125;</span><span class="br0">&#41;</span><span class="sy0">;</span>
<span class="br0">&#125;</span><span class="sy0">;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">'use strict';

var AWS = require('aws-sdk');
    
const kinesis = new AWS.Kinesis({
	endpoint: `${process.env.KINESIS_HOST}:${process.env.KINESIS_PORT}`,
	region: process.env.KINESIS_REGION,
	apiVersion: '2013-12-02',
	sslEnabled: false
});

module.exports.handler = (event, context, callback) =&gt; { 
	console.log("You POSTed an event!");

	var putReq = kinesis.putRecord({
		Data: JSON.stringify(event.body),
		PartitionKey: '0',
		StreamName: process.env.KINESIS_STREAM_NAME_EVENTS
	}, function (err, data) { 
		if (err) {
			callback(err, { statusCode: 500, body: "Error writing to kinesis" } );
		}
		else { 
			callback(null, { statusCode: 200, body: "Ok" } );
		}
	});
};</pre></div></div>

<p>Here we&#8217;re initializing the Kinesis connection, then inside the HTTP handler we use <code>putRecord</code> to publish the POSTed event to our Kinesis stream.</p>
<p>The first thing to note is that we initialize the kinesis object outside the function call in both functions. AWS will re-use functions if a lot of events are coming in, so this ensures we don&#8217;t lose time on every single call recreating that necessary resource.</p>
<p>The second to note is that I&#8217;ve hard-coded the PartitionKey. Kinesalite only handles a single partition, but for a real system you would want to replace this with some logic to calculate a PartitionKey, depending on whether you wanted events to consistently be placed in the same partition (maybe all events for a client are always on the same partition) or opt for something more random to level-load the partitions. Lambda will run a single function at a time against each partition, preserving the order of whatever processing you&#8217;re doing (only to the partition, though, not the whole stream).</p>
<p>So, we have a Kinesis emulator, a script to bootstrap the stream, an Http endpoint that pushes an event to kinesis, a function that consumes those events, and a script to run the kinesis function as if it were running under serverless. Time to put it all together!</p>
<h2>Let&#8217;s Go!</h2>
<p>Instead of firing up 4 consoles and running things in the perfect order, we&#8217;ll use <code>concurrently</code> to create a single npm task that will make our lives much easier (and more colorful). Here is the npm task:</p>
<p><b>OfflineHttpAndKinesis/package.json</b> <a href="https://github.com/tarwn/serverless-examples/blob/master/OfflineHttpAndKinesis/package.json">(github)</a></p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="javascript"><thead><tr><td colspan="2"  class="head">Javascript</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
</pre></td><td class="de1"><pre class="de1">&nbsp; <span class="st0">&quot;scripts&quot;</span><span class="sy0">:</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; <span class="st0">&quot;offline&quot;</span><span class="sy0">:</span> <span class="st0">&quot;concurrently --names <span class="es0">\&quot;</span>KNSL,BOOT,HTTP,STRM<span class="es0">\&quot;</span> -c <span class="es0">\&quot;</span>bgGreen.bold,bgGreen.bold,bgBlue.bold,bgMagenta.bold<span class="es0">\&quot;</span> --kill-others-on-fail <span class="es0">\&quot;</span>kinesalite<span class="es0">\&quot;</span> <span class="es0">\&quot;</span>node utility/bootstrap.js<span class="es0">\&quot;</span> <span class="es0">\&quot;</span>serverless offline start --stage offline<span class="es0">\&quot;</span> <span class="es0">\&quot;</span>node utility/runOfflineStreamHandlers.js<span class="es0">\&quot;</span>&quot;</span>
&nbsp; <span class="br0">&#125;</span><span class="sy0">,</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">  "scripts": {
    "offline": "concurrently --names \"KNSL,BOOT,HTTP,STRM\" -c \"bgGreen.bold,bgGreen.bold,bgBlue.bold,bgMagenta.bold\" --kill-others-on-fail \"kinesalite\" \"node utility/bootstrap.js\" \"serverless offline start --stage offline\" \"node utility/runOfflineStreamHandlers.js\""
  },</pre></div></div>

<p>This sets up 4 names to show on console output, each with a different color, and each with a different command. We&#8217;re going to run kinesalite, the bootstrap, serverless offline, and the offline handler script. If we Ctrl+C, it will force a failure and exit them all.</p>
<p>To start, we just need to type <code>npm run offline</code>.</p>
<p>Initial output:<br />
<div id="attachment_8868" style="width: 796px" class="wp-caption aligncenter"><img src="/wp-content/uploads/2018/01/OfflineHttpAndKinesisStartupOutput.png" alt="Offline Lambda and Kinesis Output" width="786" height="391" class="size-full wp-image-8868" srcset="/wp-content/uploads/2018/01/OfflineHttpAndKinesisStartupOutput.png 786w, /wp-content/uploads/2018/01/OfflineHttpAndKinesisStartupOutput-300x149.png 300w, /wp-content/uploads/2018/01/OfflineHttpAndKinesisStartupOutput-768x382.png 768w" sizes="(max-width: 786px) 100vw, 786px" /><p class="wp-caption-text">Offline Lambda and Kinesis Output</p></div></p>
<p>I&#8217;ve been ignoring the initial error that gets kicked out by the stream handler script, it doesn&#8217;t cause any issues at this time. (It&#8217;s adding to the &#8216;maybe I&#8217;ll write a plugin&#8217; balance, though).</p>
<p>And after running the curl command to add an event:<br />
<div id="attachment_8867" style="width: 666px" class="wp-caption aligncenter"><img src="/wp-content/uploads/2018/01/OfflineHttpAndKinesisOutput.png" alt="cUrl =&gt; HTTP Function =&gt; Kinesis Stream =&gt; Kinesis Function" width="656" height="161" class="size-full wp-image-8867" srcset="/wp-content/uploads/2018/01/OfflineHttpAndKinesisOutput.png 656w, /wp-content/uploads/2018/01/OfflineHttpAndKinesisOutput-300x74.png 300w" sizes="(max-width: 656px) 100vw, 656px" /><p class="wp-caption-text">cUrl => HTTP Function => Kinesis Stream => Kinesis Function</p></div></p>
<p>So we have two pretty simple bits of code and we&#8217;re consuming events (with the first 1,000,000 runs/month being free). There were some complicated bits, but that was all for offline emulation. </p>
<p>Hopefully this was helpful, next up I&#8217;ll dive into the project that sparked this work and also adds in some DynamoDB and running an entire Express instance in a single HTTP Function (not recommend, by the way).</p>
]]></content>
			<link rel="replies" type="text/html" href="/index.php/enterprisedev/cloud/serverless-http-kinesis-lambdas-with-offline-development/#comments" thr:count="2"/>
		<link rel="replies" type="application/atom+xml" href="/index.php/enterprisedev/cloud/serverless-http-kinesis-lambdas-with-offline-development/feed/atom/" thr:count="2"/>
		<thr:total>2</thr:total>
		</entry>
		<entry>
		<author>
			<name>Eli Weinstock-Herman (tarwn)</name>
					</author>
		<title type="html"><![CDATA[Deploying to ServiceFabric from TeamCity]]></title>
		<link rel="alternate" type="text/html" href="/index.php/enterprisedev/cloud/azure/deploying-to-servicefabric-from-teamcity/" />
		<id>/?p=8755</id>
		<updated>2017-08-07T12:30:56Z</updated>
		<published>2017-08-07T12:30:56Z</published>
		<category scheme="/" term="Azure" /><category scheme="/" term="azure" /><category scheme="/" term="powershell" /><category scheme="/" term="Service Fabric" /><category scheme="/" term="teamcity" />		<summary type="html"><![CDATA[Recently I&#8217;ve been working on an application that runs partially in Azure ServiceFabric. I&#8217;ve created a local cluster to work against and now it&#8217;s time to configure my TeamCity deployment to deploy upgrades to my application automatically. Initial details: Deploying 2 projects: a .Net 4.6.2 ASP.Net Core app to web app .Net 4.6.2 ServiceFabric project [&#8230;]]]></summary>
		<content type="html" xml:base="/index.php/enterprisedev/cloud/azure/deploying-to-servicefabric-from-teamcity/"><![CDATA[<p>Recently I&#8217;ve been working on an application that runs partially in Azure ServiceFabric. I&#8217;ve <a href="">created a local cluster</a> to work against and now it&#8217;s time to configure my TeamCity deployment to deploy upgrades to my application automatically.</p>
<p>Initial details:</p>
<ul>
<li>Deploying 2 projects:
<ul>
<li>a .Net 4.6.2 ASP.Net Core app to web app</li>
<li>.Net 4.6.2 ServiceFabric project to ServiceFabric cluster</li>
</ul>
</li>
<li>Server:
<ul>
<li>VM: 2-core, 2048 GB of RAM</li>
<li>Windows Server 2016 x64</li>
<li>TeamCity 2017.1</li>
<li>SQL Server 2016</li>
</ul>
</li>
</ul>
<p>In the previous post I walked through the setup of a Service Fabric cluster on a local Hyper-V server and 3 VMs, followed by publishing a Service Fabric service manually to the cluster. In this post, I&#8217;m evolving from the manual publish step to a TeamCity automated deployment.</p>
<p>Here are the system details:</p>
<ul>
<li><b>TeamCity</b>: VM w/ 2 cores assigned and 2048 MB of memory running Windows 2016 x64 with TeamCity 2017.1 and SQL Server 2016</li>
<li><b>ServiceFabricNodes:</b> 3 single core VMs w/ 2048 MB of memory running Windows 2016 x64</li>
</ul>
<p>Let&#8217;s go!</p>
<h2>Installing Dependencies</h2>
<p>This solution has two deliverables: a front-end API that is deployed to Azure Web Site (now App Service) and a back-end agent intended to run in Service Fabric. I&#8217;ve already setup a Continuous Integration step to build the projects, run the database migration, perform front-end gulp tasks, and verify a set of unit and integration tests, so I should have most of the dependencies I need.</p>
<p>I&#8217;ve installed VS 2017 Community, VS 2017 Build tools, <a href="https://docs.microsoft.com/en-us/azure/service-fabric/service-fabric-get-started">Service Fabric SDK 2.6.220</a>, Node.js 6.11.1 (LTS), NuGet 4.1, and <a href="https://github.com/jonnyzzz/TeamCity.Node">jonnyzzz&#8217;s Node plugin</a>. </p>
<div style="background-color: #eeeeee; margin: 1em; padding: 1em">
I installed VS 2017 because historically I&#8217;ve run into issues with Azure projects (and MVC before that, and parts of WebForms before that). I originally was opposed to have the IDE installed on the build server, but have since decided I don&#8217;t mind and look at it as building with the same toolset on the build server that I built and tested with locally.
</div>
<p>This is also the place I ran into the madness that is the current <a href="/index.php/itprofessionals/softwareandconfigmgmt/multiple-nuget-methods-for-vs2017-msbuild-15-in-teamcity/" title="Multiple NuGet Methods for VS2017 + MSBuild 15 in TeamCity">mess of NuGet and C# Projects</a>.</p>
<h2>Deploying the Service Fabric Project</h2>
<p>My build pipeline for this project will be a single CI stage that runs the tests for both projects, and package stage that packages releasable versions for both projects, then two independent deploy stages to deploy the website and service fabric packages to their appropriate places. </p>
<div id="attachment_8781" style="width: 557px" class="wp-caption aligncenter"><img src="/wp-content/uploads/2017/08/DeployserviceFabric.png" alt="Deployment Pipeline - API updates before ServiceFabric" width="547" height="129" class="size-full wp-image-8781" srcset="/wp-content/uploads/2017/08/DeployserviceFabric.png 547w, /wp-content/uploads/2017/08/DeployserviceFabric-300x71.png 300w" sizes="(max-width: 547px) 100vw, 547px" /><p class="wp-caption-text">Deployment Pipeline &#8211; API updates before ServiceFabric</p></div>
<p>This is my &#8220;good enough for now&#8221; setup. If I run into versioning issues, I can come back and add some backwards compatibility tests between the packages after CI and run the deployments serially instead of in parallel.</p>
<div id="attachment_8756" style="width: 310px" class="wp-caption aligncenter"><img src="/wp-content/uploads/2017/07/DeployScript-300x172.png" alt="Service Fabric Deploy Script" width="300" height="172" class="size-medium wp-image-8756" srcset="/wp-content/uploads/2017/07/DeployScript-300x172.png 300w, /wp-content/uploads/2017/07/DeployScript.png 520w" sizes="(max-width: 300px) 100vw, 300px" /><p class="wp-caption-text">Service Fabric Deploy Script</p></div>
<p>The Service Fabric package is created with a <code>Deploy-FabricApplication.ps1</code> script that we&#8217;ll use to deploy the package once it&#8217;s built.</p>
<p><b>Local Script Deploy to ServiceFabric</b></p>
<p>The first step is testing the script locally to make sure I know how to use it. </p>
<ol style="padding-left: 40px">
<li>Right click the Service Fabric project and select &#8220;Package&#8221;</li>
<li>Open a powershell console and direct it to the Scripts folder in the Service Fabric project</li>
<li>Run a sample deployment with any parameters you have in the file: <code>.\Deploy-FabricApplication.ps1 -ApplicationPackagePath '..\pkg\Debug\' -PublishProfileFile '..\PublishProfiles\Local.1Node.xml'  -ApplicationParameter @{PhantomAgent_InstanceCount='1'; CoordinatorURL='http://localhost:52860/' }</code></li>
</ol>
<p>I had to do this several times, so I also got to learn how to update versions:</p>
<ol style="padding-left: 40px">
<li>Add UpgradeDeployment to your PublishProfile:
<ul style="padding-left: 40px">
<li>Option 1: Right click in Visual Studio, select Publish, use the link near the bottom to edit your deployment options and then close the dialog, choose &#8220;yes&#8221; when it asks if you want to save the profile&#8221;</li>
<li>Option 2: Open the relevant PublishProfile XML file and add this to the bottom for the default Unmonitored Upgrade settings

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="xml"><thead><tr><td colspan="2"  class="head">XML</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
</pre></td><td class="de1"><pre class="de1"><span class="sc3"><span class="re1">&lt;UpgradeDeployment</span> <span class="re0">Mode</span>=<span class="st0">&quot;UnmonitoredAuto&quot;</span> <span class="re0">Enabled</span>=<span class="st0">&quot;true&quot;</span><span class="re2">&gt;</span></span>
&nbsp; &nbsp; <span class="sc3"><span class="re1">&lt;Parameters</span> <span class="re0">UpgradeReplicaSetCheckTimeoutSec</span>=<span class="st0">&quot;1&quot;</span> <span class="re0">Force</span>=<span class="st0">&quot;True&quot;</span> <span class="re2">/&gt;</span></span>
<span class="sc3"><span class="re1">&lt;/UpgradeDeployment<span class="re2">&gt;</span></span></span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">&lt;UpgradeDeployment Mode="UnmonitoredAuto" Enabled="true"&gt;
    &lt;Parameters UpgradeReplicaSetCheckTimeoutSec="1" Force="True" /&gt;
&lt;/UpgradeDeployment&gt;</pre></div></div>

</li>
</ul>
</li>
<li>Go to the pkg\Debug</li>
<li>Open [YourProject]Pkg\ServiceManifest.xml
<ol style="padding-left: 40px">
<li>Update the version in either <code>&lt;CodePackage Name="Code" Version="1.0.3"&gt;</code> or <code>&lt;ConfigPackage Name="Config" Version="1.0.4" /&gt;</code></li>
<li>Update the Package version in the <code>&lt;ServiceManifest … Version="1.0.2" …&gt;</code> root element</li>
<li>Save</li>
</ol>
</li>
<li>Open ApplicationManifest.xml
<ol style="padding-left: 40px">
<li>Find <code>&lt;ServiceManifestRef ..&gt;</code> and update ServiceManifestVersion to match the ServiceManifest version above</li>
<li>Update the ApplicationTypeVersion property in the <code>&lt;ApplicationManifest … &gt;</code> root element</li>
<li>Save</li>
</ol>
</li>
<li>Now try your deployment again!</li>
</ol>
<p>So now we have a working command locally, now we just have to get TeamCity to update versions appropriately and run this. </p>
<h3>Build the package</h3>
<p>Building the package is straightforward. We just need to build the package in release mode, then configure Archiving to capture the bin/Release folder and PublishProfiles folder.</p>
<p>The Build Step in my &#8220;Package Stage&#8221; configuration looks like this:</p>
<div id="attachment_8757" style="width: 1034px" class="wp-caption aligncenter"><img src="/wp-content/uploads/2017/07/BuildPackageStage-1024x730.png" alt="TeamCity Package Stage" width="1024" height="730" class="size-large wp-image-8757" srcset="/wp-content/uploads/2017/07/BuildPackageStage-1024x730.png 1024w, /wp-content/uploads/2017/07/BuildPackageStage-300x214.png 300w, /wp-content/uploads/2017/07/BuildPackageStage-768x548.png 768w, /wp-content/uploads/2017/07/BuildPackageStage.png 1491w" sizes="(max-width: 1024px) 100vw, 1024px" /><p class="wp-caption-text">TeamCity Package Stage</p></div>
<p>Once I have the package built, I am going to replace the versions with a value that ties to the TeamCity version number.</p>
<p>In the &#8220;General&#8221; tab in TeamCity, I use the build number token from my CI step as the version for this step:</p>
<div id="attachment_8758" style="width: 1034px" class="wp-caption aligncenter"><img src="/wp-content/uploads/2017/07/TeamCity_Package_BuildNumber-1024x51.png" alt="TeamCity Package Build Number" width="1024" height="51" class="size-large wp-image-8758" srcset="/wp-content/uploads/2017/07/TeamCity_Package_BuildNumber-1024x51.png 1024w, /wp-content/uploads/2017/07/TeamCity_Package_BuildNumber-300x15.png 300w, /wp-content/uploads/2017/07/TeamCity_Package_BuildNumber-768x38.png 768w" sizes="(max-width: 1024px) 100vw, 1024px" /><p class="wp-caption-text">TeamCity Package Build Number</p></div>
<p>My CI step has this for it&#8217;s build number:</p>
<div id="attachment_8759" style="width: 1034px" class="wp-caption aligncenter"><img src="/wp-content/uploads/2017/07/TeamCity_CI_BuildNumber-1024x73.png" alt="TeamCity CI Build Number" width="1024" height="73" class="size-large wp-image-8759" srcset="/wp-content/uploads/2017/07/TeamCity_CI_BuildNumber-1024x73.png 1024w, /wp-content/uploads/2017/07/TeamCity_CI_BuildNumber-300x21.png 300w, /wp-content/uploads/2017/07/TeamCity_CI_BuildNumber-768x54.png 768w, /wp-content/uploads/2017/07/TeamCity_CI_BuildNumber.png 1510w" sizes="(max-width: 1024px) 100vw, 1024px" /><p class="wp-caption-text">TeamCity CI Build Number</p></div>
<p>So now I will have a matching 1.X.0 value all the way from CI through to the ServiceFabric manager.</p>
<p>Then in a new build step, I replace the versions in my two manifest files with the build version token from TeamCity:</p>
<div id="attachment_8760" style="width: 1034px" class="wp-caption aligncenter"><img src="/wp-content/uploads/2017/07/TeamCity_Package_Versions-1024x201.png" alt="TeamCity Package Versions" width="1024" height="201" class="size-large wp-image-8760" srcset="/wp-content/uploads/2017/07/TeamCity_Package_Versions-1024x201.png 1024w, /wp-content/uploads/2017/07/TeamCity_Package_Versions-300x59.png 300w, /wp-content/uploads/2017/07/TeamCity_Package_Versions-768x151.png 768w" sizes="(max-width: 1024px) 100vw, 1024px" /><p class="wp-caption-text">TeamCity Package Versions</p></div>
<p>Finally, I add entries to the &#8220;Artifact Paths&#8221; back in the &#8220;General&#8221; tab to zip up the package for use by the next step:</p>
<div id="attachment_8761" style="width: 1034px" class="wp-caption aligncenter"><img src="/wp-content/uploads/2017/07/TeamCity_Package_Artifacts-1024x104.png" alt="TeamCity Package Artifacts" width="1024" height="104" class="size-large wp-image-8761" srcset="/wp-content/uploads/2017/07/TeamCity_Package_Artifacts-1024x104.png 1024w, /wp-content/uploads/2017/07/TeamCity_Package_Artifacts-300x30.png 300w, /wp-content/uploads/2017/07/TeamCity_Package_Artifacts-768x78.png 768w" sizes="(max-width: 1024px) 100vw, 1024px" /><p class="wp-caption-text">TeamCity Package Artifacts</p></div>
<p>The final steps look like this:</p>
<div id="attachment_8762" style="width: 1034px" class="wp-caption aligncenter"><img src="/wp-content/uploads/2017/07/TeamCity_Package_Steps-1024x234.png" alt="TeamCity Package Steps" width="1024" height="234" class="size-large wp-image-8762" srcset="/wp-content/uploads/2017/07/TeamCity_Package_Steps-1024x234.png 1024w, /wp-content/uploads/2017/07/TeamCity_Package_Steps-300x68.png 300w, /wp-content/uploads/2017/07/TeamCity_Package_Steps-768x175.png 768w, /wp-content/uploads/2017/07/TeamCity_Package_Steps.png 1517w" sizes="(max-width: 1024px) 100vw, 1024px" /><p class="wp-caption-text">TeamCity Package Steps</p></div>
<p>Running the build, I can verify everything is successful by opening up the archived package:</p>
<div id="attachment_8763" style="width: 1034px" class="wp-caption aligncenter"><img src="/wp-content/uploads/2017/07/TeamCity_Package_Success-1024x321.png" alt="TeamCity Package - Verifying Versions" width="1024" height="321" class="size-large wp-image-8763" srcset="/wp-content/uploads/2017/07/TeamCity_Package_Success-1024x321.png 1024w, /wp-content/uploads/2017/07/TeamCity_Package_Success-300x94.png 300w, /wp-content/uploads/2017/07/TeamCity_Package_Success-768x241.png 768w, /wp-content/uploads/2017/07/TeamCity_Package_Success.png 1392w" sizes="(max-width: 1024px) 100vw, 1024px" /><p class="wp-caption-text">TeamCity Package &#8211; Verifying Versions</p></div>
<h3>Deploy</h3>
<p>Now that I have a step building the files I need, I&#8217;ll add a new Build Configuration named &#8220;Deploy to Service Fabric&#8221;. I&#8217;ll set Snapshot and Artifact Dependencies to the prior Build Configuration and update the Build Number to use the value from that config (which is in turn using the one from CI).</p>
<div id="attachment_8764" style="width: 922px" class="wp-caption aligncenter"><img src="/wp-content/uploads/2017/07/TeamCity_Deploy_Dependencies.png" alt="TeamCity Deploy Dependencies" width="912" height="406" class="size-full wp-image-8764" srcset="/wp-content/uploads/2017/07/TeamCity_Deploy_Dependencies.png 912w, /wp-content/uploads/2017/07/TeamCity_Deploy_Dependencies-300x134.png 300w, /wp-content/uploads/2017/07/TeamCity_Deploy_Dependencies-768x342.png 768w" sizes="(max-width: 912px) 100vw, 912px" /><p class="wp-caption-text">TeamCity Deploy Dependencies</p></div>
<p>I have one build step, a powershell command that matches the manual one I was running earlier that is set to treat powershell errors as errors (instead of the default, warnings). I run this as a single PowerShell source script so I can use dot notation (ServiceFabric scripts make some assumptions about having the connection variable available):</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="text"><thead><tr><td colspan="2"  class="head">Text</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
</pre></td><td class="de1"><pre class="de1">Invoke-Expression &quot;. .\Deploy-FabricApplication.ps1 -ApplicationPackagePath ../../../Artifacts -PublishProfileFile ../PublishProfiles/LocalCluster.xml -ApplicationParameter @{PhantomAgent_InstanceCount='1'; CoordinatorURL='http://app.launchready.co/'}&quot;</pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">Invoke-Expression ". .\Deploy-FabricApplication.ps1 -ApplicationPackagePath ../../../Artifacts -PublishProfileFile ../PublishProfiles/LocalCluster.xml -ApplicationParameter @{PhantomAgent_InstanceCount='1'; CoordinatorURL='http://app.launchready.co/'}"</pre></div></div>

<p>My build step then runs this command like so:</p>
<div id="attachment_8765" style="width: 1034px" class="wp-caption aligncenter"><img src="/wp-content/uploads/2017/07/TeamCity_Deploy_Script-1024x272.png" alt="TeamCity Deploy Script" width="1024" height="272" class="size-large wp-image-8765" srcset="/wp-content/uploads/2017/07/TeamCity_Deploy_Script-1024x272.png 1024w, /wp-content/uploads/2017/07/TeamCity_Deploy_Script-300x80.png 300w, /wp-content/uploads/2017/07/TeamCity_Deploy_Script-768x204.png 768w, /wp-content/uploads/2017/07/TeamCity_Deploy_Script.png 1226w" sizes="(max-width: 1024px) 100vw, 1024px" /><p class="wp-caption-text">TeamCity Deploy Script</p></div>
<p>Note 1: Make sure your Server certificate is installed and permission granted to the user that TeamCity runs under.</p>
<p>Note 2: I also had to alter my LocalCluster.xml profile to <code>StoreLocation="LocalMachine"</code> instead of <code>StoreLocation="CurrentUser"</code>, since that I where I installed the certificate.</p>
<p>And there we have it:</p>
<div id="attachment_8766" style="width: 387px" class="wp-caption aligncenter"><img src="/wp-content/uploads/2017/07/TeamCity_Deploy_Success.png" alt="TeamCity Deploy Success for v1.43.0" width="377" height="104" class="size-full wp-image-8766" srcset="/wp-content/uploads/2017/07/TeamCity_Deploy_Success.png 377w, /wp-content/uploads/2017/07/TeamCity_Deploy_Success-300x83.png 300w" sizes="(max-width: 377px) 100vw, 377px" /><p class="wp-caption-text">TeamCity Deploy Success for v1.43.0</p></div>
<div id="attachment_8767" style="width: 817px" class="wp-caption aligncenter"><img src="/wp-content/uploads/2017/07/ServiceFabric_Deploy_Success.png" alt="ServiceFabric Success for v1.43.0" width="807" height="98" class="size-full wp-image-8767" srcset="/wp-content/uploads/2017/07/ServiceFabric_Deploy_Success.png 807w, /wp-content/uploads/2017/07/ServiceFabric_Deploy_Success-300x36.png 300w, /wp-content/uploads/2017/07/ServiceFabric_Deploy_Success-768x93.png 768w" sizes="(max-width: 807px) 100vw, 807px" /><p class="wp-caption-text">ServiceFabric Success for v1.43.0</p></div>
<p>We can see matching versions in both places (1.43.0), so we know the pipeline is functioning.</p>
]]></content>
			<link rel="replies" type="text/html" href="/index.php/enterprisedev/cloud/azure/deploying-to-servicefabric-from-teamcity/#comments" thr:count="0"/>
		<link rel="replies" type="application/atom+xml" href="/index.php/enterprisedev/cloud/azure/deploying-to-servicefabric-from-teamcity/feed/atom/" thr:count="0"/>
		<thr:total>0</thr:total>
		</entry>
		<entry>
		<author>
			<name>Eli Weinstock-Herman (tarwn)</name>
					</author>
		<title type="html"><![CDATA[Creating a local Service Fabric Cluster]]></title>
		<link rel="alternate" type="text/html" href="/index.php/enterprisedev/cloud/azure/creating-a-local-service-fabric-cluster/" />
		<id>/?p=8713</id>
		<updated>2017-07-26T15:37:14Z</updated>
		<published>2017-07-26T15:37:14Z</published>
		<category scheme="/" term="Azure" /><category scheme="/" term="azure" /><category scheme="/" term="powershell" /><category scheme="/" term="Service Fabric" />		<summary type="html"><![CDATA[Working with Service Fabric and want a local cluster to test and develop against? Here&#8217;s the step-by-step path I took from a set of fresh Windows VMs to a running, secured Service Fabric cluster using self-signed X509 certificates. There are a number of Microsoft docs that cover this subject, this is a single beginning-to-end path [&#8230;]]]></summary>
		<content type="html" xml:base="/index.php/enterprisedev/cloud/azure/creating-a-local-service-fabric-cluster/"><![CDATA[<p>Working with Service Fabric and want a local cluster to test and develop against? Here&#8217;s the step-by-step path I took from a set of fresh Windows VMs to a running, secured Service Fabric cluster using self-signed X509 certificates. There are a number of Microsoft docs that cover this subject, this is a single beginning-to-end path that also includes fixes for gaps or errors in those docs as I went.</p>
<p>Here are the technical details:</p>
<ul>
<li>3 Hyper-V VMs running Windows 2016 x64, single-core, 2046MB RAM</li>
<li>ServiceFabric 5.6.220.9494</li>
</ul>
<p>My VMs are: </p>
<ul>
<li>SFNode0 &#8211; 192.168.1.200</li>
<li>SFNode1 &#8211; 192.168.1.201</li>
<li>SFNode2 &#8211; 192.168.1.202</li>
</ul>
<p>Here we go!</p>
<h2>Step 1: Download the Service Fabric Standalone Package</h2>
<p>Starting on SFNode0, I <a href="https://docs.microsoft.com/en-us/azure/service-fabric/service-fabric-cluster-creation-for-windows-server#downloadpackage">download the package</a>. There is a brief struggle through the overly strict IE security settings (did you know docs.microsoft.com uses google-analytics?).</p>
<p>Unpack the downloaded archive and make a copy of the ClusterConfig.X509.MultiMachine.json so we can modify a copy without changing the original. I&#8217;ve named this &#8220;ClusterConfig.LaunchReady.LocalCluster.json&#8221; for my cluster.</p>
<h2>Step 2: Cluster Configuration File</h2>
<p>The configuration (or &#8220;manifest&#8221;) is explained in detail in <a href="https://docs.microsoft.com/en-us/azure/service-fabric/service-fabric-cluster-manifest">Microsoft Docs</a>. I&#8217;ll call out the specifics of what I&#8217;m changing as I go.</p>
<div id="attachment_8718" style="width: 1034px" class="wp-caption aligncenter"><img src="/wp-content/uploads/2017/07/SFNode0ConfigScreen.png" alt="Initial Cluster Configuration" width="1024" height="768" class="size-full wp-image-8718" srcset="/wp-content/uploads/2017/07/SFNode0ConfigScreen.png 1024w, /wp-content/uploads/2017/07/SFNode0ConfigScreen-300x225.png 300w, /wp-content/uploads/2017/07/SFNode0ConfigScreen-768x576.png 768w" sizes="(max-width: 1024px) 100vw, 1024px" /><p class="wp-caption-text">Initial Cluster Configuration</p></div>
<p>The first update is the name of the cluster:</p>
<pre>"name": "LaunchReady.LocalCluster",
"clusterConfigurationVersion": "1.0.0",
"apiVersion": "04-2017",</pre>
<p>The clusterConfigurationVersion and apiVersion can stay unchanged. Later when we make changes to the cluster, we&#8217;ll increment the clusterConfigurationVersion (and commit it to our git repository).</p>
<h3>Configuring Nodes</h3>
<p>The next section is the node definitions. I&#8217;ve updated these to reflect the names of my VMs, a common fault domain to indicate the shared server they are running on, and a common update domain (it woul dbe better to make these different, I wasn&#8217;t thinking when I first created this).</p>
<pre>{
	"nodeName": "SFNode0",
	"iPAddress": "SFNode0",
	"nodeTypeRef": "NodeType0",
	"faultDomain": "fd:/hyperv0",
	"upgradeDomain": "UD0"
},
{
	"nodeName": "SFNode1",
	"iPAddress": "SFNode1",
	"nodeTypeRef": "NodeType0",
	"faultDomain": "fd:/hyperv0",
	"upgradeDomain": "UD0"
},
{
	"nodeName": "SFNode2",
	"iPAddress": "SFNode2",
	"nodeTypeRef": "NodeType0",
	"faultDomain": "fd:/hyperv0",
	"upgradeDomain": "UD0"
}</pre>
<p>Here&#8217;s a break down of the properties:</p>
<ul>
<li>nodeName: is the name that we will see in logs and the management console.</li>
<li>iPAddress: is a discoverable name or IPAddress for the node</li>
<li>nodeTypeRef: NodeTypes are defined later in the configuration and represent port and reliability settings for the node <a href="https://docs.microsoft.com/en-us/azure/service-fabric/service-fabric-cluster-manifest#nodetypes">See MSDN</a></li>
<li>faultDomain: An indicator of (potentially) shared physical resources that the node relies on (if this goes down, all nodes with this indicator will as well)</li>
<li>upgradeDomain: Identifier to group (or not) which nodes will be upgraded simultaneously during an upgrade</li>
</ul>
<p>I am going to skip over the diagnosticsStore section for now, as the defaults will be good enough until I have the cluster running, which requires the configs above and the X509 configs coming up next.</p>
<h3>Configuring X509 certificates</h3>
<p>More background detail: <a href="https://docs.microsoft.com/en-us/azure/service-fabric/service-fabric-windows-cluster-x509-security">Secure a standalone cluster on Windows using X.509 certificates</a></p>
<p>I am going to secure this as if it is a production cluster, to ensure any work I do in my local lab won&#8217;t suddenly blow up when I switch to an Azure cluster, but I&#8217;ll use self-signed certificates since it is a local lab. I&#8217;ll use a single certificate for node-to-node and server-to-client (<code>ClusterCertificate</code>, <code>ServerCertificate</code>) because I don&#8217;t plan on performing certificate rollovers. I&#8217;ll have a second certificate for clients to authenticate with when connecting (<code>ClientCertificateThumbprints</code>).</p>
<div style="background-color: #FFCCCC; padding: 1em; margin: 1em;">
<b>Warning:</b> The <a href="https://docs.microsoft.com/en-us/azure/service-fabric/service-fabric-windows-cluster-x509-security#optional-create-a-self-signed-certificate">Self-Signed Certificate instructions</a> are generally ok, but make some assumptions about the Service Fabric SDK, copy and paste for Certificate Thumbprints, file permissions, etc. The instructions below borrow from this document, but correct some of those deficiencies and assumptions to work in the context of following the Service Fabric setup instructions.
</div>
<p>First, switch to a system that has the ServiceFabric SDK installed. It won&#8217;t be present on your nodes at this point. </p>
<p>Next copy the CertSetup.ps1 file to your desktop or another location that will allow you to edit the file (we don&#8217;t want to replace one the SDK relies on and Windows security will prevent you from saving over it in the current location).</p>
<p>Next, follow the instructions to generate a cluster/server certificate and a client certificate (I named mine &#8220;LaunchReadyLocalClusterCert&#8221; and &#8220;LaunchReadyLocalClientCert&#8221;). This requires editing the names in CertSetup.ps1 on line 22 (Cleanup-Cert function), line 96, and line 163.</p>
<p>Launch PowerShell as an Administrator, then run the altered script <code>.\CertSetup.ps1 -Install</code>. When it completes, edit the script to enter the second certificate subject name and run it a second time.</p>
<p>Opening &#8220;Manage computer certificates&#8221; from the Start menu, I can see my two certificates listed in Personal/Certificates:</p>
<div id="attachment_8719" style="width: 769px" class="wp-caption aligncenter"><img src="/wp-content/uploads/2017/07/Certificates.png" alt="Certificates Successfully Generated" width="759" height="155" class="size-full wp-image-8719" srcset="/wp-content/uploads/2017/07/Certificates.png 759w, /wp-content/uploads/2017/07/Certificates-300x61.png 300w" sizes="(max-width: 759px) 100vw, 759px" /><p class="wp-caption-text">Certificates Successfully Generated</p></div>
<p>To export these to pfx files, I copied the thumbprint from the details for each certificate and ran it like so:</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="powershell"><thead><tr><td colspan="2"  class="head">PowerShell</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
</pre></td><td class="de1"><pre class="de1"><span class="re0">$pswd</span> <span class="sy0">=</span> <span class="kw1">ConvertTo-SecureString</span> <span class="kw5">-String</span> <span class="st0">&quot;NotMyRealPassword!&quot;</span> <span class="kw5">-Force</span> –AsPlainText
&nbsp;
<span class="co1">#Client cert</span>
<span class="kw1">Get-ChildItem</span> <span class="kw5">-Path</span> <span class="st0">&quot;cert:\localMachine\my\ae 01 64 c8 27 56 71 59 e8 3b c9 37 c4 47 b8 75 7d 1c f3 7e&quot;</span> <span class="sy0">|</span> Export<span class="sy0">-</span>PfxCertificate <span class="kw5">-FilePath</span> C:\LaunchReadyLocalClientCert.pfx <span class="sy0">-</span>Password <span class="re0">$pswd</span>
<span class="co1">#Server cert</span>
<span class="kw1">Get-ChildItem</span> <span class="kw5">-Path</span> <span class="st0">&quot;cert:\localMachine\my\e7 98 12 6c 5c 04 46 55 ef ad f7 e3 99 88 0a 82 e7 87 c8 6f&quot;</span> <span class="sy0">|</span> Export<span class="sy0">-</span>PfxCertificate <span class="kw5">-FilePath</span> C:\LaunchReadyLocalClusterCert.pfx <span class="sy0">-</span>Password $pswd</pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">$pswd = ConvertTo-SecureString -String "NotMyRealPassword!" -Force –AsPlainText

#Client cert
Get-ChildItem -Path "cert:\localMachine\my\ae 01 64 c8 27 56 71 59 e8 3b c9 37 c4 47 b8 75 7d 1c f3 7e" | Export-PfxCertificate -FilePath C:\LaunchReadyLocalClientCert.pfx -Password $pswd
#Server cert
Get-ChildItem -Path "cert:\localMachine\my\e7 98 12 6c 5c 04 46 55 ef ad f7 e3 99 88 0a 82 e7 87 c8 6f" | Export-PfxCertificate -FilePath C:\LaunchReadyLocalClusterCert.pfx -Password $pswd</pre></div></div>

<div style="background-color: #FFFFCC; padding: 1em; margin: 1em;">
Potential Error: If you receive a null object error, you may have an invisible character at the beginning of the thumbprint. I put my cursor at the beginning of the thumbprint and pressed backspace once and was able to run the script no the next try.
</div>
<p>With the PFX files produced, now we have to get them onto the nodes. </p>
<p>The quickest solution, since I&#8217;m on the same network, is to open up a shared folder from my desktop temporarily and download to each of the 3 nodes. From the <a href="https://docs.microsoft.com/en-us/azure/service-fabric/service-fabric-windows-cluster-x509-security#install-the-certificates">Install the Certificates</a> instructions, I create a script to install the certs and copy their second script to set permissions and drop those in the fileshare also.</p>
<p><b>Install my certs:</b></p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="powershell"><thead><tr><td colspan="2"  class="head">PowerShell</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
</pre></td><td class="de1"><pre class="de1"><span class="re0">$pswd</span> <span class="sy0">=</span> <span class="kw1">ConvertTo-SecureString</span> <span class="kw5">-String</span> <span class="st0">&quot;NotMyRealPassword!&quot;</span> <span class="kw5">-Force</span> –AsPlainText
&nbsp;
<span class="co1">## Client Cert</span>
Import<span class="sy0">-</span>PfxCertificate <span class="sy0">-</span>Exportable <span class="sy0">-</span>CertStoreLocation Cert:\LocalMachine\My <span class="kw5">-FilePath</span> <span class="st0">&quot;C:\LaunchReadyLocalClientCert.pfx&quot;</span> <span class="sy0">-</span>Password <span class="br0">&#40;</span><span class="kw1">ConvertTo-SecureString</span> <span class="kw5">-String</span> <span class="re0">$pswd</span> <span class="kw5">-AsPlainText</span> <span class="kw5">-Force</span><span class="br0">&#41;</span>
<span class="co1">## Server Cert</span>
Import<span class="sy0">-</span>PfxCertificate <span class="sy0">-</span>Exportable <span class="sy0">-</span>CertStoreLocation Cert:\LocalMachine\My <span class="kw5">-FilePath</span> <span class="st0">&quot;C:\LaunchReadyLocalClusterCert.pfx&quot;</span> <span class="sy0">-</span>Password <span class="br0">&#40;</span><span class="kw1">ConvertTo-SecureString</span> <span class="kw5">-String</span> <span class="re0">$pswd</span> <span class="kw5">-AsPlainText</span> <span class="kw5">-Force</span><span class="br0">&#41;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">$pswd = ConvertTo-SecureString -String "NotMyRealPassword!" -Force –AsPlainText

## Client Cert
Import-PfxCertificate -Exportable -CertStoreLocation Cert:\LocalMachine\My -FilePath "C:\LaunchReadyLocalClientCert.pfx" -Password (ConvertTo-SecureString -String $pswd -AsPlainText -Force)
## Server Cert
Import-PfxCertificate -Exportable -CertStoreLocation Cert:\LocalMachine\My -FilePath "C:\LaunchReadyLocalClusterCert.pfx" -Password (ConvertTo-SecureString -String $pswd -AsPlainText -Force)</pre></div></div>

<p>On each node, I copy the 4 files, run the Install script, then run the Permissions script once for each Thumbprint:</p>
<div id="attachment_8720" style="width: 869px" class="wp-caption aligncenter"><img src="/wp-content/uploads/2017/07/InstallCertificates.png" alt="Install Certificates and Grant Access" width="859" height="586" class="size-full wp-image-8720" srcset="/wp-content/uploads/2017/07/InstallCertificates.png 859w, /wp-content/uploads/2017/07/InstallCertificates-300x205.png 300w, /wp-content/uploads/2017/07/InstallCertificates-768x524.png 768w" sizes="(max-width: 859px) 100vw, 859px" /><p class="wp-caption-text">Install Certificates and Grant Access</p></div>
<p>Finally, I return to SFNode0 and enter the thumbprints in the &#8220;Security&#8221; section of my cluster configuration, removing the ThumbprintSecondary properties, the ClientCertificateCommonNames property, and the ReverseProxyCertificate property that I don&#8217;t intend to use.</p>
<h2>Step 3: Test the Configuration</h3>
<p>Note: Make sure you look at the paths in the fabricSettings section and move these to a non-OS drive if available. These are not changeable once the cluster is created. I chose to keep the defaults for this local cluster.</p>
<p>Before testing, there are some notable prerequisites buried in the <a href="https://docs.microsoft.com/en-us/azure/service-fabric/service-fabric-cluster-standalone-deployment-preparation#step-7-environment-setup">Environment Setup</a>:</p>
<ul>
<li>#9: Add firewall entry to allow ports 135, 137, 138, 139, and 445</li>
</ul>
<p>To test the configuration, I opened a powershell console on SFNode0 and run <code>.\TestConfiguration.ps1 -ClusterConfigFilePath .\ClusterConfig.LaunchReady.LocalCluster.json</code></p>
<div style="background-color: #FFFFCC; padding: 1em; margin: 1em;">
Tip: open a powershell console to the current folder in Windows Explorer by typing &#8220;powershell&#8221; in the address bar!
</div>
<p>Here are the errors as I work through them:</p>
<h3>Name Resolution Failure</h3>
<p><b>Error:</b> &#8220;Machine &#8216;SFNode2&#8217; is not reachable on port 445. Check connectivity/open ports. Error: No such host is known&#8221;</p>
<p><b>Fix:</b> Name resolution failed to find the host on my local network, so I switched my <code>iPAddress</code> properties to actual IP Addresses.</p>
<h3>Missing Firewall Rule</h3>
<p><b>Error:</b> &#8220;Machine &#8216;SFNode2&#8217; is not reachable on port 445. Check connectivity/open ports. Error: A connection attempt failed because the conncted party did not properly respond…&#8221; (classic timeout error)</p>
<p><b>Fix:</b> Add the Firewall rule I mentioned above to allow traffic on 135, 137, 138, 139, and 445.</p>
<h3>SMB? Reboot all the things</h3>
<p><b>Error: </b> &#8220;Machine &#8216;SFNode2&#8217; is not reachable on port 445. Check connectivity/open ports. Error: The connection was actively refused&#8221;</p>
<p><b>Fix:</b><br />
1. Open the Network Adapter properties and make sure &#8220;File and Printer Sharing for Microsoft Networks&#8221; is enabled (or netstat -ao and make sure you&#8217;re listening on 445)<br />
2. Reboot <- It's like Windows NT all over again! (I don't know why this fixed it, but it did)

<img src="/wp-content/uploads/2017/07/SuccessfulConfigTest.png" alt="Successful Configuration Test" width="517" height="258" class="size-full wp-image-8721" srcset="/wp-content/uploads/2017/07/SuccessfulConfigTest.png 517w, /wp-content/uploads/2017/07/SuccessfulConfigTest-300x150.png 300w" sizes="(max-width: 517px) 100vw, 517px" /></p>
<p>Much Success!</p>
<h2>Step 4: Deploy the cluster</h3>
<p>Time to try deploying the cluster, using the provided <code>CreateServiceFabricCluster</code> script.</p>
<p>(cue ominous organ music)</p>
<p><code>.\CreateServiceFabricCluster.ps1 -ClusterConfigFilePath .\ClusterConfig.LaunchReady.LocalCluster.json -AcceptEULA</code></p>
<p>Here&#8217;s a summary of what the script is running (so you know it hasn&#8217;t gone off the rails):</p>
<ul>
<li>Check and create if necessary: Runtime directory</li>
<li>Check and create if necessary: Trace folder</li>
<li>Download Runtime package (small delay for download time)</li>
<li>Creating Service fabric Cluster…</li>
<li>Details per machine: Configuring, Configured, Started FabricInstallerSvc, …(HDD clicky clicky)…, Started FabricHostSvc, (short delay)</li>
<li>Your cluster is successful created! …</li>
</ul>
<p>This took a few minutes to run for me, but of course YMMV depending on internet speed, CPU resources, etc.</p>
<h2>Step 5: Connect to the cluster</h2>
<p>Connecting via web browser is easy, but the documentation assumes you are using an insecure setup. <code>http://localhost:19080/Explorer/index.html</code> will time out.</p>
<p>Use https instead and use something like Chrome instead of IE. Chrome will popup an option for you to select the Client Certificate we produced earlier, and then connect successfully:</p>
<div id="attachment_8722" style="width: 1034px" class="wp-caption aligncenter"><img src="/wp-content/uploads/2017/07/ServiceFabricDashboard-1024x593.png" alt="Service Fabric Dashboard" width="1024" height="593" class="size-large wp-image-8722" srcset="/wp-content/uploads/2017/07/ServiceFabricDashboard-1024x593.png 1024w, /wp-content/uploads/2017/07/ServiceFabricDashboard-300x174.png 300w, /wp-content/uploads/2017/07/ServiceFabricDashboard-768x444.png 768w, /wp-content/uploads/2017/07/ServiceFabricDashboard.png 1360w" sizes="(max-width: 1024px) 100vw, 1024px" /><p class="wp-caption-text">Service Fabric Dashboard</p></div>
<p>Because the certificate is self-generated, it will be treated as insecure by the browser and may require you to also go through a &#8220;no, really, I trust this certificate&#8221; routine.</p>
<h2>Step 6: Publish a ServiceFabric Project from VisualStudio</h2>
<p>Switching to Visual Studio, your ServiceFabric project should have a folder named &#8220;PublishProfiles&#8221;. Make a copy of the default &#8220;Cloud.xml&#8221; profile and rename it to &#8220;LocalCluster.xml&#8221;. </p>
<p>There is an example for connecting via X509 certificates in a comment in the xml file, so replace the current content with that example and edit appropriately. Use the Thumbprint from the Server certificate above (also can be found in the cluster manifest screen at https://(ip/ address):19080/Explorer/index.html#/tab/manifest).</p>
<p>My file now looks like this:</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="xml"><thead><tr><td colspan="2"  class="head">XML</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
</pre></td><td class="de1"><pre class="de1"><span class="sc3"><span class="re1">&lt;?xml</span> <span class="re0">version</span>=<span class="st0">&quot;1.0&quot;</span> <span class="re0">encoding</span>=<span class="st0">&quot;utf-8&quot;</span><span class="re2">?&gt;</span></span>
<span class="sc3"><span class="re1">&lt;PublishProfile</span> <span class="re0">xmlns</span>=<span class="st0">&quot;http://schemas.microsoft.com/2015/05/fabrictools&quot;</span><span class="re2">&gt;</span></span>
&nbsp; &nbsp; &nbsp; &nbsp;<span class="sc3"><span class="re1">&lt;ClusterConnectionParameters</span> <span class="re0">ConnectionEndpoint</span>=<span class="st0">&quot;192.168.173.200:19000&quot;</span></span>
<span class="sc3"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span class="re0">X509Credential</span>=<span class="st0">&quot;true&quot;</span></span>
<span class="sc3"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span class="re0">ServerCertThumbprint</span>=<span class="st0">&quot;E798126C5C044655EFADF7E399880A82E787C86F&quot;</span></span>
<span class="sc3"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span class="re0">FindType</span>=<span class="st0">&quot;FindByThumbprint&quot;</span></span>
<span class="sc3"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span class="re0">FindValue</span>=<span class="st0">&quot;E798126C5C044655EFADF7E399880A82E787C86F&quot;</span></span>
<span class="sc3"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span class="re0">StoreLocation</span>=<span class="st0">&quot;CurrentUser&quot;</span></span>
<span class="sc3"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span class="re0">StoreName</span>=<span class="st0">&quot;My&quot;</span> <span class="re2">/&gt;</span></span>
&nbsp;
&nbsp; <span class="sc3"><span class="re1">&lt;ApplicationParameterFile</span> <span class="re0">Path</span>=<span class="st0">&quot;..\ApplicationParameters\LocalCluster.xml&quot;</span> <span class="re2">/&gt;</span></span>
<span class="sc3"><span class="re1">&lt;/PublishProfile<span class="re2">&gt;</span></span></span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">&lt;?xml version="1.0" encoding="utf-8"?&gt;
&lt;PublishProfile xmlns="http://schemas.microsoft.com/2015/05/fabrictools"&gt;
       &lt;ClusterConnectionParameters ConnectionEndpoint="192.168.173.200:19000"
                                    X509Credential="true"
                                    ServerCertThumbprint="E798126C5C044655EFADF7E399880A82E787C86F"
                                    FindType="FindByThumbprint"
                                    FindValue="E798126C5C044655EFADF7E399880A82E787C86F"
                                    StoreLocation="CurrentUser"
                                    StoreName="My" /&gt;

  &lt;ApplicationParameterFile Path="..\ApplicationParameters\LocalCluster.xml" /&gt;
&lt;/PublishProfile&gt;</pre></div></div>

<p>Add the new profile file to the project in Visual Studio.</p>
<p>Right click the project and select &#8220;Publish&#8221;. In the Publish dialog, select your new Profile file from the first dropdown. The dialog will verify it can connect to the Cluster:</p>
<div id="attachment_8723" style="width: 648px" class="wp-caption aligncenter"><img src="/wp-content/uploads/2017/07/PublishPackage.png" alt="VS 2017 - Publish Package for Service Fabric" width="638" height="434" class="size-full wp-image-8723" srcset="/wp-content/uploads/2017/07/PublishPackage.png 638w, /wp-content/uploads/2017/07/PublishPackage-300x204.png 300w" sizes="(max-width: 638px) 100vw, 638px" /><p class="wp-caption-text">VS 2017 &#8211; Publish Package for Service Fabric</p></div>
<p>(Yes, I&#8217;m using a hotmail address, it amuses me <img src="https://s.w.org/images/core/emoji/2/72x72/1f642.png" alt="🙂" class="wp-smiley" style="height: 1em; max-height: 1em;" /> )</p>
<p>Click Publish and Visual Studio will build the project and publish it to the cluster. Visual Studio will provide feedback as it publishes the application and we can see the results in the dashboard:</p>
<div id="attachment_8724" style="width: 1034px" class="wp-caption aligncenter"><img src="/wp-content/uploads/2017/07/UnhealthyDeployedPackage-1024x879.png" alt="Unhealthy, But Deployed Dashboard View" width="1024" height="879" class="size-large wp-image-8724" srcset="/wp-content/uploads/2017/07/UnhealthyDeployedPackage-1024x879.png 1024w, /wp-content/uploads/2017/07/UnhealthyDeployedPackage-300x258.png 300w, /wp-content/uploads/2017/07/UnhealthyDeployedPackage-768x660.png 768w, /wp-content/uploads/2017/07/UnhealthyDeployedPackage.png 1345w" sizes="(max-width: 1024px) 100vw, 1024px" /><p class="wp-caption-text">Unhealthy, But Deployed Dashboard View</p></div>
<p>Successful deployment! Except my application is unhealthy in this case, which I will now go start to debug <img src="https://s.w.org/images/core/emoji/2/72x72/1f642.png" alt="🙂" class="wp-smiley" style="height: 1em; max-height: 1em;" /></p>
]]></content>
			<link rel="replies" type="text/html" href="/index.php/enterprisedev/cloud/azure/creating-a-local-service-fabric-cluster/#comments" thr:count="0"/>
		<link rel="replies" type="application/atom+xml" href="/index.php/enterprisedev/cloud/azure/creating-a-local-service-fabric-cluster/feed/atom/" thr:count="0"/>
		<thr:total>0</thr:total>
		</entry>
		<entry>
		<author>
			<name>Eli Weinstock-Herman (tarwn)</name>
					</author>
		<title type="html"><![CDATA[Using Azure Functions to add a Contact Form to a Static Site]]></title>
		<link rel="alternate" type="text/html" href="/index.php/enterprisedev/cloud/azure/using-azure-functions-to-add-a-contact-form-to-a-static-site/" />
		<id>/?p=4979</id>
		<updated>2017-01-27T15:28:45Z</updated>
		<published>2017-01-27T15:28:45Z</published>
		<category scheme="/" term="Azure" /><category scheme="/" term="Azure Functions" />		<summary type="html"><![CDATA[My personal website is a static site: 100% HTML, JS, and CSS files with no server-side processing. I have custom code that pulls data from a variety of sources and builds updated versions of the files from templates, which are then deployed to the host. I do this to move the CPU latency of building [&#8230;]]]></summary>
		<content type="html" xml:base="/index.php/enterprisedev/cloud/azure/using-azure-functions-to-add-a-contact-form-to-a-static-site/"><![CDATA[<p>My personal website is a static site: 100% HTML, JS, and CSS files with no server-side processing. I have custom code that pulls data from a variety of sources and builds updated versions of the files from templates, which are then deployed to the host. I do this to move the CPU latency of building the pages to my time, instead of charging it to visitors on each page hit. While I have a host, a strategy like this means I could also choose to host for free via github or similar services.</p>
<p>So there&#8217;s a great benefit to the reader and our wallet, but no server-side execution makes things like contact forms trickier. Luckily, Azure Functions or AWS Lambda can be used as a webhook to receive the form post and process it, costing nothing near nothing to use (AWS and Azure both offer a free tier for 1M requests/month and 400,000 GB-seconds of compute time).</p>
<p>So we swap out a hosted server at $x/month for free static page hosting and free contact form (and similar services), it just takes a little different type of work then building the standard PHP, ASP.Net, etc site.</p>
<h2>Creating the Azure Function</h2>
<p>First up, let&#8217;s build out an Azure Function to accept a form post and convert it to an email.</p>
<h3>Setting up the function</h3>
<p>From the Azure Dashboard, create a new &#8220;Azure Function App&#8221;.</p>
<div id="attachment_4981" style="width: 810px" class="wp-caption aligncenter"><a href="/wp-content/uploads/2017/01/Azure_0.png"><img src="/wp-content/uploads/2017/01/Azure_0.png" alt="Azure Function App - Getting Started" width="800" height="467" class="size-full wp-image-4981" srcset="/wp-content/uploads/2017/01/Azure_0.png 800w, /wp-content/uploads/2017/01/Azure_0-300x175.png 300w" sizes="(max-width: 800px) 100vw, 800px" /></a><p class="wp-caption-text">Azure Function App &#8211; Getting Started</p></div>
<p>The Azure Portal offers us a few options to get started quickly. Pick the one on the right &#8220;Webhook + API&#8221; to get a function set up with the trigger and output we need out of the box.</p>
<p>The trigger for the Azure Function is the Webhook endpoint:</p>
<div id="attachment_4998" style="width: 810px" class="wp-caption aligncenter"><a href="/wp-content/uploads/2017/01/Azure_1.png"><img src="/wp-content/uploads/2017/01/Azure_1.png" alt="Azure Function - Webhook Trigger" width="800" height="184" class="size-full wp-image-4998" srcset="/wp-content/uploads/2017/01/Azure_1.png 800w, /wp-content/uploads/2017/01/Azure_1-300x69.png 300w" sizes="(max-width: 800px) 100vw, 800px" /></a><p class="wp-caption-text">Azure Function &#8211; Webhook Trigger</p></div>
<p>We can customize this to listen only to the /contact route and POST messages:</p>
<div id="attachment_4983" style="width: 751px" class="wp-caption aligncenter"><a href="/wp-content/uploads/2017/01/Azure_2.png"><img src="/wp-content/uploads/2017/01/Azure_2.png" alt="Azure Function - Webhook Trigger Details" width="741" height="407" class="size-full wp-image-4983" srcset="/wp-content/uploads/2017/01/Azure_2.png 741w, /wp-content/uploads/2017/01/Azure_2-300x164.png 300w" sizes="(max-width: 741px) 100vw, 741px" /></a><p class="wp-caption-text">Azure Function &#8211; Webhook Trigger Details</p></div>
<p>There are other details we could configure, so as you do this you might start getting all kinds of other ideas (remember, 1M requests/month and 400,000 GB-seconds of compute time for FREE!).</p>
<p>We don&#8217;t have an input for this Azure Function, and the return value is simply the HTTP Response we&#8217;ll return form the trigger, so no further configuration to do:</p>
<div id="attachment_4984" style="width: 401px" class="wp-caption aligncenter"><a href="/wp-content/uploads/2017/01/Azure_3.png"><img src="/wp-content/uploads/2017/01/Azure_3.png" alt="Azure Function - Return Value" width="391" height="278" class="size-full wp-image-4984" srcset="/wp-content/uploads/2017/01/Azure_3.png 391w, /wp-content/uploads/2017/01/Azure_3-300x213.png 300w" sizes="(max-width: 391px) 100vw, 391px" /></a><p class="wp-caption-text">Azure Function &#8211; Return Value</p></div>
<p>We now have the &#8220;hello world&#8221; version of a webhook, let&#8217;s add more code.</p>
<h3>Coding the Contact Email and Response</h3>
<p>The function starts with some generated code that matches the variable names in the Trigger and Output (I picked C#, JavaScript is also an option), attempts to pull a value out of the querystring, and returns a &#8220;Hello&#8221; response:</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="csharp"><thead><tr><td colspan="2"  class="head">C#</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
</pre></td><td class="de1"><pre class="de1"><span class="kw1">using</span> <span class="co3">System.Net</span><span class="sy0">;</span>
&nbsp;
<span class="kw1">public</span> <span class="kw1">static</span> async Task<span class="sy0">&lt;</span>HttpResponseMessage<span class="sy0">&gt;</span> Run<span class="br0">&#40;</span>HttpRequestMessage req, TraceWriter log<span class="br0">&#41;</span>
<span class="br0">&#123;</span>
&nbsp; &nbsp; <span class="co1">// ... sample code we don't need that pulls name from querystring ...</span>
&nbsp;
&nbsp; &nbsp; <span class="kw1">return</span> name <span class="sy0">==</span> <span class="kw1">null</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="sy0">?</span> req<span class="sy0">.</span><span class="me1">CreateResponse</span><span class="br0">&#40;</span>HttpStatusCode<span class="sy0">.</span><span class="me1">BadRequest</span>, <span class="st0">&quot;Please pass a name on the query string or in the request body&quot;</span><span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="sy0">:</span> req<span class="sy0">.</span><span class="me1">CreateResponse</span><span class="br0">&#40;</span>HttpStatusCode<span class="sy0">.</span><span class="me1">OK</span>, <span class="st0">&quot;Hello &quot;</span> <span class="sy0">+</span> name<span class="br0">&#41;</span><span class="sy0">;</span>
<span class="br0">&#125;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">using System.Net;

public static async Task&lt;HttpResponseMessage&gt; Run(HttpRequestMessage req, TraceWriter log)
{
    // ... sample code we don't need that pulls name from querystring ...

    return name == null
        ? req.CreateResponse(HttpStatusCode.BadRequest, "Please pass a name on the query string or in the request body")
        : req.CreateResponse(HttpStatusCode.OK, "Hello " + name);
}</pre></div></div>

<p>Before we start in on the email code, let&#8217;s start by not putting the secrets right in the code. Functions have a built in method to manage secrets, but they&#8217;re not terribly easy to find. Click the &#8220;Function app settings&#8221; menu option at the bottom left to get to this screen:<br />
<div id="attachment_4985" style="width: 420px" class="wp-caption aligncenter"><a href="/wp-content/uploads/2017/01/Azure_4.png"><img src="/wp-content/uploads/2017/01/Azure_4.png" alt="Finding the App Settings, Step 1" width="410" height="249" class="size-full wp-image-4985" srcset="/wp-content/uploads/2017/01/Azure_4.png 410w, /wp-content/uploads/2017/01/Azure_4-300x182.png 300w" sizes="(max-width: 410px) 100vw, 410px" /></a><p class="wp-caption-text">Finding the App Settings, Step 1</p></div></p>
<p>Then click the &#8220;App Settings&#8221; button:</p>
<div id="attachment_4986" style="width: 420px" class="wp-caption aligncenter"><a href="/wp-content/uploads/2017/01/Azure_5.png"><img src="/wp-content/uploads/2017/01/Azure_5.png" alt="Finding the App Settings, Step 2" width="410" height="249" class="size-full wp-image-4986" srcset="/wp-content/uploads/2017/01/Azure_5.png 410w, /wp-content/uploads/2017/01/Azure_5-300x182.png 300w" sizes="(max-width: 410px) 100vw, 410px" /></a><p class="wp-caption-text">Finding the App Settings, Step 2</p></div>
<p>This will open another blade to the right. One of the sections is the &#8220;App settings&#8221; section. You can enter AppSettings key/value configurations here that will be available to your function code. In my case, I&#8217;m going to add in all of my SMTP settings so I don&#8217;t have them stored in the code when I later hook this to a git repository.</p>
<div id="attachment_4987" style="width: 378px" class="wp-caption aligncenter"><a href="/wp-content/uploads/2017/01/Azure_6.png"><img src="/wp-content/uploads/2017/01/Azure_6.png" alt="Adding SMTP AppSettings" width="368" height="459" class="size-full wp-image-4987" srcset="/wp-content/uploads/2017/01/Azure_6.png 368w, /wp-content/uploads/2017/01/Azure_6-240x300.png 240w" sizes="(max-width: 368px) 100vw, 368px" /></a><p class="wp-caption-text">Adding SMTP AppSettings</p></div>
<p>Now we can add some basic validation and some fairly standard &#8220;send an email&#8221; code. I&#8217;m accessing the stored secrets above via ConfigurationManager.AppSettings, as I would if you were writing a .Net application with an app.config. </p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="csharp"><thead><tr><td colspan="2"  class="head">C#</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
</pre></td><td class="de1"><pre class="de1"><span class="kw1">using</span> <span class="co3">System.Configuration</span><span class="sy0">;</span>
<span class="kw1">using</span> <span class="co3">System.Net</span><span class="sy0">;</span>
<span class="kw1">using</span> <span class="co3">System.Net.Mail</span><span class="sy0">;</span>
<span class="kw1">using</span> <span class="co3">System.Threading.Tasks</span><span class="sy0">;</span>
&nbsp;
<span class="kw1">public</span> <span class="kw1">static</span> async Task<span class="sy0">&lt;</span>HttpResponseMessage<span class="sy0">&gt;</span> Run<span class="br0">&#40;</span>HttpRequestMessage req, TraceWriter log<span class="br0">&#41;</span>
<span class="br0">&#123;</span>
&nbsp; &nbsp; log<span class="sy0">.</span><span class="me1">Info</span><span class="br0">&#40;</span><span class="st0">&quot;C# HTTP trigger function processed a request.&quot;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; <span class="co1">// 1: Get request body + validate required content is available</span>
&nbsp; &nbsp; <span class="kw1">var</span> postData <span class="sy0">=</span> await req<span class="sy0">.</span><span class="me1">Content</span><span class="sy0">.</span><span class="me1">ReadAsFormDataAsync</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; <span class="kw1">var</span> missingFields <span class="sy0">=</span> <span class="kw3">new</span> List<span class="sy0">&lt;</span><span class="kw4">string</span><span class="sy0">&gt;</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; <span class="kw1">if</span><span class="br0">&#40;</span>postData<span class="br0">&#91;</span><span class="st0">&quot;fromEmail&quot;</span><span class="br0">&#93;</span> <span class="sy0">==</span> <span class="kw1">null</span><span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; missingFields<span class="sy0">.</span><span class="kw1">Add</span><span class="br0">&#40;</span><span class="st0">&quot;fromEmail&quot;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; <span class="kw1">if</span><span class="br0">&#40;</span>postData<span class="br0">&#91;</span><span class="st0">&quot;message&quot;</span><span class="br0">&#93;</span> <span class="sy0">==</span> <span class="kw1">null</span><span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; missingFields<span class="sy0">.</span><span class="kw1">Add</span><span class="br0">&#40;</span><span class="st0">&quot;message&quot;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; 
&nbsp; &nbsp; <span class="kw1">if</span><span class="br0">&#40;</span>missingFields<span class="sy0">.</span><span class="me1">Any</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#41;</span>
&nbsp; &nbsp; <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">var</span> missingFieldsSummary <span class="sy0">=</span> <span class="kw4">String</span><span class="sy0">.</span><span class="kw1">Join</span><span class="br0">&#40;</span><span class="st0">&quot;, &quot;</span>, missingFields<span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">return</span> req<span class="sy0">.</span><span class="me1">CreateResponse</span><span class="br0">&#40;</span>HttpStatusCode<span class="sy0">.</span><span class="me1">BadRequest</span>, $<span class="st0">&quot;Missing field(s): {missingFieldsSummary}&quot;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp;
&nbsp; &nbsp; <span class="co1">// 2: Site settings</span>
&nbsp; &nbsp; <span class="kw1">var</span> smtpHost <span class="sy0">=</span> ConfigurationManager<span class="sy0">.</span><span class="me1">AppSettings</span><span class="br0">&#91;</span><span class="st0">&quot;smtpHost&quot;</span><span class="br0">&#93;</span><span class="sy0">;</span>
&nbsp; &nbsp; <span class="kw1">var</span> smtpPort <span class="sy0">=</span> Convert<span class="sy0">.</span><span class="me1">ToInt32</span><span class="br0">&#40;</span>ConfigurationManager<span class="sy0">.</span><span class="me1">AppSettings</span><span class="br0">&#91;</span><span class="st0">&quot;smtpPort&quot;</span><span class="br0">&#93;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; <span class="kw1">var</span> smtpEnableSsl <span class="sy0">=</span> Boolean<span class="sy0">.</span><span class="me1">Parse</span><span class="br0">&#40;</span>ConfigurationManager<span class="sy0">.</span><span class="me1">AppSettings</span><span class="br0">&#91;</span><span class="st0">&quot;smtpEnableSsl&quot;</span><span class="br0">&#93;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; <span class="kw1">var</span> smtpUser <span class="sy0">=</span> ConfigurationManager<span class="sy0">.</span><span class="me1">AppSettings</span><span class="br0">&#91;</span><span class="st0">&quot;smtpUser&quot;</span><span class="br0">&#93;</span><span class="sy0">;</span>
&nbsp; &nbsp; <span class="kw1">var</span> smtpPass <span class="sy0">=</span> ConfigurationManager<span class="sy0">.</span><span class="me1">AppSettings</span><span class="br0">&#91;</span><span class="st0">&quot;smtpPass&quot;</span><span class="br0">&#93;</span><span class="sy0">;</span>
&nbsp; &nbsp; <span class="kw1">var</span> toEmail <span class="sy0">=</span> ConfigurationManager<span class="sy0">.</span><span class="me1">AppSettings</span><span class="br0">&#91;</span><span class="st0">&quot;toEmail&quot;</span><span class="br0">&#93;</span><span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; <span class="co1">// 3: Build + Send the email</span>
&nbsp; &nbsp; MailMessage mailObj <span class="sy0">=</span> <span class="kw3">new</span> MailMessage<span class="br0">&#40;</span>postData<span class="br0">&#91;</span><span class="st0">&quot;fromEmail&quot;</span><span class="br0">&#93;</span>, toEmail, <span class="st0">&quot;Site Contact Form&quot;</span>, postData<span class="br0">&#91;</span><span class="st0">&quot;message&quot;</span><span class="br0">&#93;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; SmtpClient client <span class="sy0">=</span> <span class="kw3">new</span> SmtpClient<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; client<span class="sy0">.</span><span class="me1">Host</span> <span class="sy0">=</span> smtpHost<span class="sy0">;</span>
&nbsp; &nbsp; client<span class="sy0">.</span><span class="me1">Port</span> <span class="sy0">=</span> smtpPort<span class="sy0">;</span>
&nbsp; &nbsp; client<span class="sy0">.</span><span class="me1">EnableSsl</span> <span class="sy0">=</span> smtpEnableSsl<span class="sy0">;</span>
&nbsp; &nbsp; client<span class="sy0">.</span><span class="me1">DeliveryMethod</span> <span class="sy0">=</span> SmtpDeliveryMethod<span class="sy0">.</span><span class="me1">Network</span><span class="sy0">;</span>
&nbsp; &nbsp; client<span class="sy0">.</span><span class="me1">UseDefaultCredentials</span> <span class="sy0">=</span> <span class="kw1">false</span><span class="sy0">;</span>
&nbsp; &nbsp; client<span class="sy0">.</span><span class="me1">Credentials</span> <span class="sy0">=</span> <span class="kw3">new</span> <span class="kw5">System.<span class="me1">Net</span></span><span class="sy0">.</span><span class="me1">NetworkCredential</span><span class="br0">&#40;</span>smtpUser, smtpPass<span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; <span class="kw1">try</span>
&nbsp; &nbsp; <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; client<span class="sy0">.</span><span class="me1">Send</span><span class="br0">&#40;</span>mailObj<span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">return</span> req<span class="sy0">.</span><span class="me1">CreateResponse</span><span class="br0">&#40;</span>HttpStatusCode<span class="sy0">.</span><span class="me1">OK</span>, <span class="st0">&quot;Thanks!&quot;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp; &nbsp; <span class="kw1">catch</span> <span class="br0">&#40;</span>Exception ex<span class="br0">&#41;</span>
&nbsp; &nbsp; <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">return</span> req<span class="sy0">.</span><span class="me1">CreateResponse</span><span class="br0">&#40;</span>HttpStatusCode<span class="sy0">.</span><span class="me1">InternalServerError</span>, <span class="kw3">new</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; status <span class="sy0">=</span> <span class="kw1">false</span>,
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; message <span class="sy0">=</span> $<span class="st0">&quot;Email has not been sent: {ex.GetType()}&quot;</span> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; <span class="br0">&#125;</span>
<span class="br0">&#125;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">using System.Configuration;
using System.Net;
using System.Net.Mail;
using System.Threading.Tasks;

public static async Task&lt;HttpResponseMessage&gt; Run(HttpRequestMessage req, TraceWriter log)
{
    log.Info("C# HTTP trigger function processed a request.");

    // 1: Get request body + validate required content is available
    var postData = await req.Content.ReadAsFormDataAsync();
    var missingFields = new List&lt;string&gt;();
    if(postData["fromEmail"] == null)
        missingFields.Add("fromEmail");
    if(postData["message"] == null)
        missingFields.Add("message");
    
    if(missingFields.Any())
    {
        var missingFieldsSummary = String.Join(", ", missingFields);
        return req.CreateResponse(HttpStatusCode.BadRequest, $"Missing field(s): {missingFieldsSummary}");
    }

    // 2: Site settings
    var smtpHost = ConfigurationManager.AppSettings["smtpHost"];
    var smtpPort = Convert.ToInt32(ConfigurationManager.AppSettings["smtpPort"]);
    var smtpEnableSsl = Boolean.Parse(ConfigurationManager.AppSettings["smtpEnableSsl"]);
    var smtpUser = ConfigurationManager.AppSettings["smtpUser"];
    var smtpPass = ConfigurationManager.AppSettings["smtpPass"];
    var toEmail = ConfigurationManager.AppSettings["toEmail"];

    // 3: Build + Send the email
    MailMessage mailObj = new MailMessage(postData["fromEmail"], toEmail, "Site Contact Form", postData["message"]);
    SmtpClient client = new SmtpClient();
    client.Host = smtpHost;
    client.Port = smtpPort;
    client.EnableSsl = smtpEnableSsl;
    client.DeliveryMethod = SmtpDeliveryMethod.Network;
    client.UseDefaultCredentials = false;
    client.Credentials = new System.Net.NetworkCredential(smtpUser, smtpPass);

    try
    {
        client.Send(mailObj);
        return req.CreateResponse(HttpStatusCode.OK, "Thanks!");
    }
    catch (Exception ex)
    {
        return req.CreateResponse(HttpStatusCode.InternalServerError, new {
            status = false,
            message = $"Email has not been sent: {ex.GetType()}"            
        });
    }
}</pre></div></div>

<p>With the code in place, we can use a tool like Postman to fire off some test POSTs and verify all the pieces are connected.</p>
<p>Don&#8217;t grab the URL above your code screen yet, it probably has an Administrative key coded into it. Open the &#8220;Keys&#8221; panel from the button (#1 below) in the top right and select the &#8220;default&#8221; key in the &#8220;Function Keys&#8221; list. When you do this, it will update the Function Url  (#3) above the code panel to include this key instead of one of the Admin keys. As a final step, click the &#8220;Logs&#8221; (#2) button to open the log so you can see compile and run logs when it builds or is triggered. Now copy the Function URL (#3) so we can paste it into Postman to start testing.</p>
<div id="attachment_4999" style="width: 810px" class="wp-caption aligncenter"><a href="/wp-content/uploads/2017/01/Azure_7.png"><img src="/wp-content/uploads/2017/01/Azure_7.png" alt="Azure Functions - Key, Logs, and URL" width="800" height="131" class="size-full wp-image-4999" srcset="/wp-content/uploads/2017/01/Azure_7.png 800w, /wp-content/uploads/2017/01/Azure_7-300x49.png 300w" sizes="(max-width: 800px) 100vw, 800px" /></a><p class="wp-caption-text">Azure Functions &#8211; Key, Logs, and URL</p></div>
<p>In a new Postman request, enter the URL at the top, select &#8220;Post&#8221; as the method, and add in key/value pairs for the fromEmail and the message. Of course we expect this to fail the first time:</p>
<div id="attachment_5000" style="width: 810px" class="wp-caption aligncenter"><a href="/wp-content/uploads/2017/01/Azure_8.png"><img src="/wp-content/uploads/2017/01/Azure_8.png" alt="Azure Function - First Call Failed" width="800" height="385" class="size-full wp-image-5000" srcset="/wp-content/uploads/2017/01/Azure_8.png 800w, /wp-content/uploads/2017/01/Azure_8-300x144.png 300w" sizes="(max-width: 800px) 100vw, 800px" /></a><p class="wp-caption-text">Azure Function &#8211; First Call Failed</p></div>
<p>Fixing the code then nets us:</p>
<div id="attachment_5001" style="width: 810px" class="wp-caption aligncenter"><a href="/wp-content/uploads/2017/01/Azure_9.png"><img src="/wp-content/uploads/2017/01/Azure_9.png" alt="Azure Function - Second Call Failed" width="800" height="326" class="size-full wp-image-5001" srcset="/wp-content/uploads/2017/01/Azure_9.png 800w, /wp-content/uploads/2017/01/Azure_9-300x122.png 300w" sizes="(max-width: 800px) 100vw, 800px" /></a><p class="wp-caption-text">Azure Function &#8211; Second Call Failed</p></div>
<p>Because my code is expecting urlencoded form data and wasn&#8217;t able to parse any from the body. Once we switch that, we get:</p>
<div id="attachment_5002" style="width: 810px" class="wp-caption aligncenter"><a href="/wp-content/uploads/2017/01/Azure_10.png"><img src="/wp-content/uploads/2017/01/Azure_10.png" alt="Azure Function - Success" width="800" height="290" class="size-full wp-image-5002" srcset="/wp-content/uploads/2017/01/Azure_10.png 800w, /wp-content/uploads/2017/01/Azure_10-300x108.png 300w" sizes="(max-width: 800px) 100vw, 800px" /></a><p class="wp-caption-text">Azure Function &#8211; Success</p></div>
<p>Success!</p>
<h3>Building the HTML form</h3>
<p>Now we just need to switch from Postman to using an HTML form. Here&#8217;s a quick sample:</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="csharp"><thead><tr><td colspan="2"  class="head">C#</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
</pre></td><td class="de1"><pre class="de1"><span class="sy0">&lt;</span>h1<span class="sy0">&gt;</span>Contact Form<span class="sy0">&lt;/</span>h1<span class="sy0">&gt;</span>
Send me a message<span class="sy0">!</span> <span class="br0">&#40;</span>Congratulations <span class="kw1">for</span> finding <span class="kw1">this</span>, it<span class="st0">'s not an official part of the site!)</span>
<span class="st0">&lt;div id=&quot;contactForm&quot;&gt;</span>
<span class="st0"> &nbsp; &nbsp;Your Email: &lt;input type=&quot;text&quot; name=&quot;fromEmail&quot; /&gt;&lt;br /&gt;</span>
<span class="st0"> &nbsp; &nbsp;Message: &lt;br /&gt;</span>
<span class="st0"> &nbsp; &nbsp;&lt;textarea cols=&quot;60&quot; rows=&quot;4&quot; name=&quot;message&quot;&gt;&lt;/textarea&gt;&lt;br /&gt;</span>
<span class="st0"> &nbsp; &nbsp;&lt;input type=&quot;submit&quot; value=&quot;Send!&quot; /&gt;</span>
<span class="st0">&lt;/div&gt;</span>
&nbsp;
<span class="st0">&lt;script src=&quot;https://code.jquery.com/jquery-3.1.1.min.js&quot;&gt;&lt;/script&gt;</span>
<span class="st0">&lt;script type=&quot;text/javascript&quot;&gt;</span>
<span class="st0"> &nbsp; &nbsp;var url = &quot;https://eli-contactform.azurewebsites.net/api/contact?code=1pabaq6cdy2tt3f43t4uuqsemi8429ygl2n4ca6m9utugoz2gldiw15i5t61ew3pzzb7n60mb1emi&quot;;</span>
<span class="st0"> &nbsp; &nbsp;$(&quot;form&quot;).on('</span>submit<span class="st0">', function (event) {</span>
<span class="st0"> &nbsp; &nbsp; &nbsp; &nbsp;event.preventDefault();</span>
&nbsp;
<span class="st0"> &nbsp; &nbsp; &nbsp; &nbsp;// grab contact form data</span>
<span class="st0"> &nbsp; &nbsp; &nbsp; &nbsp;var data = $(this).serialize();</span>
&nbsp;
<span class="st0"> &nbsp; &nbsp; &nbsp; &nbsp;// hide prior errors, disable inputs while we'</span>re submitting
&nbsp; &nbsp; &nbsp; &nbsp; $<span class="br0">&#40;</span><span class="st0">&quot;#contactFormError&quot;</span><span class="br0">&#41;</span><span class="sy0">.</span><span class="me1">hide</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; $<span class="br0">&#40;</span><span class="st0">&quot;#contactForm input&quot;</span><span class="br0">&#41;</span><span class="sy0">.</span><span class="me1">prop</span><span class="br0">&#40;</span><span class="st0">'disabled'</span>, <span class="kw1">true</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; <span class="co1">// back in my day, we had to AJAX uphill both ways, in the snow, through cross-iframe scripts</span>
&nbsp; &nbsp; &nbsp; &nbsp; $<span class="sy0">.</span><span class="me1">ajax</span><span class="br0">&#40;</span><span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; type<span class="sy0">:</span> <span class="st0">&quot;POST&quot;</span>,
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; url<span class="sy0">:</span> url,
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; data<span class="sy0">:</span> data,
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; dataType<span class="sy0">:</span> <span class="st0">&quot;text&quot;</span>,
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; headers<span class="sy0">:</span> <span class="br0">&#123;</span><span class="st0">'Content-Type'</span><span class="sy0">:</span> <span class="st0">'application/x-www-form-urlencoded'</span><span class="br0">&#125;</span>,
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; success<span class="sy0">:</span> function <span class="br0">&#40;</span>respData<span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="co1">// Yay, success!!</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; $<span class="br0">&#40;</span><span class="st0">&quot;#contactForm&quot;</span><span class="br0">&#41;</span><span class="sy0">.</span><span class="me1">html</span><span class="br0">&#40;</span><span class="st0">&quot;&lt;div style='padding: 5em 1em; text-align: center; color: #008800'&gt;&quot;</span> <span class="sy0">+</span> respData <span class="sy0">+</span> <span class="st0">&quot;&lt;/div&gt;&quot;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span>,
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; error<span class="sy0">:</span> function <span class="br0">&#40;</span>jqXHR<span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="co1">// Boo, error...</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; $<span class="br0">&#40;</span><span class="st0">&quot;#contactFormError&quot;</span><span class="br0">&#41;</span><span class="sy0">.</span><span class="me1">html</span><span class="br0">&#40;</span><span class="st0">&quot;&lt;div style='padding: 1em; text-align: center; color: #660000'&gt;Sorry, an error occurred: &quot;</span> <span class="sy0">+</span> jqXHR<span class="sy0">.</span><span class="me1">responseText</span> <span class="sy0">+</span> <span class="st0">&quot;&lt;/div&gt;&quot;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; $<span class="br0">&#40;</span><span class="st0">&quot;#contactFormError&quot;</span><span class="br0">&#41;</span><span class="sy0">.</span><span class="me1">show</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; $<span class="br0">&#40;</span><span class="st0">&quot;#contactForm input&quot;</span><span class="br0">&#41;</span><span class="sy0">.</span><span class="me1">prop</span><span class="br0">&#40;</span><span class="st0">'disabled'</span>, <span class="kw1">false</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; <span class="br0">&#125;</span><span class="br0">&#41;</span><span class="sy0">;</span>
<span class="sy0">&lt;/</span>script<span class="sy0">&gt;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">&lt;h1&gt;Contact Form&lt;/h1&gt;
Send me a message! (Congratulations for finding this, it's not an official part of the site!)
&lt;div id="contactForm"&gt;
    Your Email: &lt;input type="text" name="fromEmail" /&gt;&lt;br /&gt;
    Message: &lt;br /&gt;
    &lt;textarea cols="60" rows="4" name="message"&gt;&lt;/textarea&gt;&lt;br /&gt;
    &lt;input type="submit" value="Send!" /&gt;
&lt;/div&gt;

&lt;script src="https://code.jquery.com/jquery-3.1.1.min.js"&gt;&lt;/script&gt;
&lt;script type="text/javascript"&gt;
    var url = "https://eli-contactform.azurewebsites.net/api/contact?code=1pabaq6cdy2tt3f43t4uuqsemi8429ygl2n4ca6m9utugoz2gldiw15i5t61ew3pzzb7n60mb1emi";
    $("form").on('submit', function (event) {
        event.preventDefault();

        // grab contact form data
        var data = $(this).serialize();

        // hide prior errors, disable inputs while we're submitting
        $("#contactFormError").hide();
        $("#contactForm input").prop('disabled', true);

        // back in my day, we had to AJAX uphill both ways, in the snow, through cross-iframe scripts
        $.ajax({
            type: "POST",
            url: url,
            data: data,
            dataType: "text",
            headers: {'Content-Type': 'application/x-www-form-urlencoded'},
            success: function (respData) {
                // Yay, success!!
                $("#contactForm").html("&lt;div style='padding: 5em 1em; text-align: center; color: #008800'&gt;" + respData + "&lt;/div&gt;");
            },
            error: function (jqXHR) {
                // Boo, error...
                $("#contactFormError").html("&lt;div style='padding: 1em; text-align: center; color: #660000'&gt;Sorry, an error occurred: " + jqXHR.responseText + "&lt;/div&gt;");
                $("#contactFormError").show();
                $("#contactForm input").prop('disabled', false);
            }
        });
    });
&lt;/script&gt;</pre></div></div>

<p>I use jQuery to post the form content because the Azure Function isn&#8217;t going to return a pretty HTML page. This way I can capture the output and use jQuery to tel the user whether it was successful or not.</p>
<p>There was one more catch the first time I tried this. Because I&#8217;m posting from my a page from my personal page to a domain in Azure, the calls initially fails with a Cross-Origin error. To enable Cross-Origin calls from your domain, go back to the Azure Functions interface in the App Settings section and open the CORS page:</p>
<div id="attachment_4992" style="width: 420px" class="wp-caption aligncenter"><a href="/wp-content/uploads/2017/01/Azure_11.png"><img src="/wp-content/uploads/2017/01/Azure_11.png" alt="Azure Function - CORS Config" width="410" height="249" class="size-full wp-image-4992" srcset="/wp-content/uploads/2017/01/Azure_11.png 410w, /wp-content/uploads/2017/01/Azure_11-300x182.png 300w" sizes="(max-width: 410px) 100vw, 410px" /></a><p class="wp-caption-text">Azure Function &#8211; CORS Config</p></div>
<p>This will open the list of domains allowed to make Cross-Origin calls (which will result in the necessary Cross-Origin-Access header being sent back so your browser will trust the content). Add your domain, save, and your jQuery calls should now work just fine.</p>
<div id="attachment_5003" style="width: 660px" class="wp-caption aligncenter"><a href="/wp-content/uploads/2017/01/Azure_14.png"><img src="/wp-content/uploads/2017/01/Azure_14.png" alt="Contact Form" width="650" height="269" class="size-full wp-image-5003" srcset="/wp-content/uploads/2017/01/Azure_14.png 650w, /wp-content/uploads/2017/01/Azure_14-300x124.png 300w" sizes="(max-width: 650px) 100vw, 650px" /></a><p class="wp-caption-text">Contact Form</p></div>
<div id="attachment_5004" style="width: 660px" class="wp-caption aligncenter"><a href="/wp-content/uploads/2017/01/Azure_13.png"><img src="/wp-content/uploads/2017/01/Azure_13.png" alt="Contact Form Success!!" width="650" height="236" class="size-full wp-image-5004" srcset="/wp-content/uploads/2017/01/Azure_13.png 650w, /wp-content/uploads/2017/01/Azure_13-300x108.png 300w" sizes="(max-width: 650px) 100vw, 650px" /></a><p class="wp-caption-text">Contact Form Success!!</p></div>
<p>And there we go, successful contact emails on the static page.</p>
<h2>Final Steps</h2>
<p>Besides making a nicer user experience than the one I hacked together there, one last step you should also take is to enter in a value for the maximum daily usage quota just to ensure no one finds your form and tries to DOS your credit card. </p>
<p>So there we go, a contact form for a static website that should run absolutely free. This is easily extended to other features when you take into account that you could also be dropping messages in a queue, saving to blobs, etc and then using an AJAX GET call to a webhook like this to get that stored content (basically a free, trigger-based API service). There&#8217;s all kinds of options you can fit inside the free level of these services that frees you from having to pay for a full web host.</p>
]]></content>
			<link rel="replies" type="text/html" href="/index.php/enterprisedev/cloud/azure/using-azure-functions-to-add-a-contact-form-to-a-static-site/#comments" thr:count="1"/>
		<link rel="replies" type="application/atom+xml" href="/index.php/enterprisedev/cloud/azure/using-azure-functions-to-add-a-contact-form-to-a-static-site/feed/atom/" thr:count="1"/>
		<thr:total>1</thr:total>
		</entry>
		<entry>
		<author>
			<name>Eli Weinstock-Herman (tarwn)</name>
					</author>
		<title type="html"><![CDATA[CSV file to API using Azure Functions (CSVaaS)]]></title>
		<link rel="alternate" type="text/html" href="/index.php/enterprisedev/cloud/azure/csv-file-to-api-using-azure-functions-csvaas/" />
		<id>/?p=4839</id>
		<updated>2016-11-25T16:31:58Z</updated>
		<published>2016-11-25T14:18:56Z</published>
		<category scheme="/" term="Azure" /><category scheme="/" term="Azure APIM" /><category scheme="/" term="Azure Functions" />		<summary type="html"><![CDATA[We&#8217;re living in the future. During a conversational aside the other day, the CEO recounted a story of someone he met that was willing to throw money at a product to make it easy to save an excel file and have it surface as an API. A few years ago that was server provisioning and [&#8230;]]]></summary>
		<content type="html" xml:base="/index.php/enterprisedev/cloud/azure/csv-file-to-api-using-azure-functions-csvaas/"><![CDATA[<p>We&#8217;re living in the future. During a conversational aside the other day, the CEO recounted a story of someone he met that was willing to throw money at a product to make it easy to save an excel file and have it surface as an API. A few years ago that was server provisioning and a couple days to a couple weeks of work, depending on the level of analytics, authentication, identity management, documentation, data entry system, and so on you wanted. With the explosion of tools and services we&#8217;re seeing in the cloud, now we can do this in an a few hours or less, with 200 lines of code and no servers.</p>
<h2>To Launch a managed API in less than 200 lines of code</h2>
<p>When I went down this path, I decided it had to be a realistic. The API side had to have authentication, analytics, rate limiting, documentation, subscriptions, and endpoints that reflect the latest dataset (&#8220;/latest&#8221;), the list of all files received (&#8220;/all&#8221;), and access to a specific dataset/CSV (&#8220;/archive/{name}&#8221;). The CSV side of things had to be incredibly simple, no new interfaces, upload tools, or anything. I want to save a file in a local folder and have the data available via an API on the internet.</p>
<div id="attachment_4840" style="width: 810px" class="wp-caption alignnone"><a href="/wp-content/uploads/2016/11/CSVaaS.png"><img src="/wp-content/uploads/2016/11/CSVaaS.png" alt="Transformation Pipeline - Saving a CSV in a folder to Managed API" width="960" height="235" class="size-full wp-image-4840" srcset="/wp-content/uploads/2016/11/CSVaaS.png 960w, /wp-content/uploads/2016/11/CSVaaS-300x73.png 300w" sizes="(max-width: 960px) 100vw, 960px" /></a><p class="wp-caption-text">Transformation Pipeline &#8211; Saving a CSV in a folder to Managed API</p></div>
<p>I drop a file in my Dropbox folder, it’s picked up and processed into a similarly named JSON blob, a &#8220;latest&#8221; JSON blob, and an entry in the &#8220;list&#8221; of archived entries, all in Azure Storage from the original CSV file within 15 seconds or less. API Management then serves as a gateway to give me rate-limited, documented, etc, etc access to those pre-generated JSON responses.</p>
<h3>Tools and Services</h3>
<p>Here&#8217;s the tools I used:</p>
<ul>
<li>Azure API Management &#8211; provides an API gateway with built-in authentication mechanisms, analytics, customizable policies, caching, and documentation with &#8220;Try It&#8221; interfaces</li>
<li>Azure Storage &#8211; provides infinite file storage where I can drop translated JSON files to serve as the back-end behind the API gateway</li>
<li>Azure Functions
<ul>
<li>#1: monitors dropbox and scoops up changes to convert them from CSV into JSON, saving to an &#8220;archive&#8221; container in Azure Storage</li>
<li>#2: monitors the &#8220;archive&#8221; container and publishes new entries by copying them to &#8220;public/latest&#8221; and adding them to a list in &#8220;listing/all&#8221;</li>
</ul>
</li>
<li>Microsoft Account &#8211; identity provider for API subscription</li>
<li>Dropbox &#8211; my end-user &#8220;UI&#8221;</li>
</ul>
<p>The only one of these that requires coding is the Azure Functions, and I did those in C#.</p>
<h3>$50/month for fancy features, $0.03/month without</h3>
<p>1GB of data / month of blob storage is about $0.03, 10GB would be around $0.20 or less. Processing 30 files/month via Azure Functions is free (at 1 second runs, 250K files would be $1.60/month), so less than $0.40/month if you could manage to copy 140 CSV files/hour for a month into dropbox (lots of coffee?). API Management is the expensive part (for this project), at $50/month for Developer level (but using it for a single API call is massive overkill, I would expect it to be serving up a lot more than that).</p>
<p>API Management offers a lot of extra capabilities, but if I didn&#8217;t want them I could just as easily publish the functions and blob endpoints as the API, at roughly $0.03/month.</p>
<h2>The File Transform Process</h2>
<p>So this CSV file: <a href="https://www.dropbox.com/s/3wqj4jpv4vru2a7/file1?dl=0">https://www.dropbox.com/s/3wqj4jpv4vru2a7/file1?dl=0</a></p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="text"><thead><tr><td colspan="2"  class="head">Text</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
</pre></td><td class="de1"><pre class="de1">MyString,MyNumber,MyBool,MyAlmostNumber,MyAlmostBool
&quot;ABC&quot;,123,true,456,false
&quot;DEF&quot;,124,false,555,true
&quot;GHI&quot;,125,True,whatever,more stuff</pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">MyString,MyNumber,MyBool,MyAlmostNumber,MyAlmostBool
"ABC",123,true,456,false
"DEF",124,false,555,true
"GHI",125,True,whatever,more stuff</pre></div></div>

<p>Turns into this JSON file: <a href="https://csvaas.blob.core.windows.net/archive/file1">https://csvaas.blob.core.windows.net/archive/file1</a></p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="javascript"><thead><tr><td colspan="2"  class="head">Javascript</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
</pre></td><td class="de1"><pre class="de1"><span class="br0">&#123;</span> &nbsp;
&nbsp; &nbsp;<span class="st0">&quot;info&quot;</span><span class="sy0">:</span><span class="br0">&#123;</span> &nbsp;
&nbsp; &nbsp; &nbsp; <span class="st0">&quot;sourceFile&quot;</span><span class="sy0">:</span><span class="st0">&quot;file1&quot;</span><span class="sy0">,</span>
&nbsp; &nbsp; &nbsp; <span class="st0">&quot;processedTime&quot;</span><span class="sy0">:</span><span class="st0">&quot;2016-11-24T14:20:19&quot;</span><span class="sy0">,</span>
&nbsp; &nbsp; &nbsp; <span class="st0">&quot;types&quot;</span><span class="sy0">:</span><span class="br0">&#91;</span> &nbsp;<span class="st0">&quot;String&quot;</span><span class="sy0">,</span> <span class="st0">&quot;Number&quot;</span><span class="sy0">,</span> <span class="st0">&quot;Boolean&quot;</span><span class="sy0">,</span> <span class="st0">&quot;String&quot;</span><span class="sy0">,</span> <span class="st0">&quot;String&quot;</span> <span class="br0">&#93;</span>
&nbsp; &nbsp;<span class="br0">&#125;</span><span class="sy0">,</span>
&nbsp; &nbsp;<span class="st0">&quot;rows&quot;</span><span class="sy0">:</span><span class="br0">&#91;</span> &nbsp;
&nbsp; &nbsp; &nbsp; <span class="br0">&#123;</span> &nbsp;<span class="st0">&quot;MyString&quot;</span><span class="sy0">:</span><span class="st0">&quot;ABC&quot;</span><span class="sy0">,</span> <span class="st0">&quot;MyNumber&quot;</span><span class="sy0">:</span><span class="nu0">123</span><span class="sy0">,</span> <span class="st0">&quot;MyBool&quot;</span><span class="sy0">:</span><span class="kw2">true</span><span class="sy0">,</span> <span class="st0">&quot;MyAlmostNumber&quot;</span><span class="sy0">:</span><span class="st0">&quot;456&quot;</span><span class="sy0">,</span> <span class="st0">&quot;MyAlmostBool&quot;</span><span class="sy0">:</span><span class="st0">&quot;false&quot;</span> <span class="br0">&#125;</span><span class="sy0">,</span>
&nbsp; &nbsp; &nbsp; <span class="br0">&#123;</span> &nbsp;<span class="st0">&quot;MyString&quot;</span><span class="sy0">:</span><span class="st0">&quot;DEF&quot;</span><span class="sy0">,</span> <span class="st0">&quot;MyNumber&quot;</span><span class="sy0">:</span><span class="nu0">124</span><span class="sy0">,</span> <span class="st0">&quot;MyBool&quot;</span><span class="sy0">:</span><span class="kw2">false</span><span class="sy0">,</span> <span class="st0">&quot;MyAlmostNumber&quot;</span><span class="sy0">:</span><span class="st0">&quot;555&quot;</span><span class="sy0">,</span> <span class="st0">&quot;MyAlmostBool&quot;</span><span class="sy0">:</span><span class="st0">&quot;true&quot;</span> <span class="br0">&#125;</span><span class="sy0">,</span>
&nbsp; &nbsp; &nbsp; <span class="br0">&#123;</span> &nbsp;<span class="st0">&quot;MyString&quot;</span><span class="sy0">:</span><span class="st0">&quot;GHI&quot;</span><span class="sy0">,</span> <span class="st0">&quot;MyNumber&quot;</span><span class="sy0">:</span><span class="nu0">125</span><span class="sy0">,</span> <span class="st0">&quot;MyBool&quot;</span><span class="sy0">:</span><span class="kw2">true</span><span class="sy0">,</span> <span class="st0">&quot;MyAlmostNumber&quot;</span><span class="sy0">:</span><span class="st0">&quot;whatever&quot;</span><span class="sy0">,</span> <span class="st0">&quot;MyAlmostBool&quot;</span><span class="sy0">:</span><span class="st0">&quot;more stuff&quot;</span> <span class="br0">&#125;</span>
&nbsp; &nbsp;<span class="br0">&#93;</span>
<span class="br0">&#125;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">{  
   "info":{  
      "sourceFile":"file1",
      "processedTime":"2016-11-24T14:20:19",
      "types":[  "String", "Number", "Boolean", "String", "String" ]
   },
   "rows":[  
      {  "MyString":"ABC", "MyNumber":123, "MyBool":true, "MyAlmostNumber":"456", "MyAlmostBool":"false" },
      {  "MyString":"DEF", "MyNumber":124, "MyBool":false, "MyAlmostNumber":"555", "MyAlmostBool":"true" },
      {  "MyString":"GHI", "MyNumber":125, "MyBool":true, "MyAlmostNumber":"whatever", "MyAlmostBool":"more stuff" }
   ]
}</pre></div></div>

<p>Which is then published to the listing: <a href="https://csvaas.blob.core.windows.net/listing/all">https://csvaas.blob.core.windows.net/listing/all</a></p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="javascript"><thead><tr><td colspan="2"  class="head">Javascript</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
</pre></td><td class="de1"><pre class="de1"><span class="br0">&#123;</span>
&nbsp; &nbsp; <span class="st0">&quot;LatestUpdate&quot;</span><span class="sy0">:</span><span class="st0">&quot;2016-11-24T14:29:21.1069912Z&quot;</span><span class="sy0">,</span>
&nbsp; &nbsp; <span class="st0">&quot;Items&quot;</span><span class="sy0">:</span><span class="br0">&#91;</span><span class="st0">&quot;file2&quot;</span><span class="sy0">,</span><span class="st0">&quot;file1&quot;</span><span class="br0">&#93;</span>
<span class="br0">&#125;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">{
    "LatestUpdate":"2016-11-24T14:29:21.1069912Z",
    "Items":["file2","file1"]
}</pre></div></div>

<p>And is surfaced as the latest record (which has probably changed by now): <a href="https://csvaas.blob.core.windows.net/public/latest">https://csvaas.blob.core.windows.net/public/latest</a></p>
<p>And these are the prepared responses for this API: <a href="https://csvaas.portal.azure-api.net/docs/services/5833743025491306b41695ff/operations/5833780425491306b4169603">CSVaaS Documentation</a></p>
<div id="attachment_4848" style="width: 810px" class="wp-caption alignnone"><a href="/wp-content/uploads/2016/11/APIM_Doc_1.jpg"><img src="/wp-content/uploads/2016/11/APIM_Doc_1.jpg" alt="Automatic Documentation, Code Samples, etc" width="800" height="391" class="size-full wp-image-4848" srcset="/wp-content/uploads/2016/11/APIM_Doc_1.jpg 800w, /wp-content/uploads/2016/11/APIM_Doc_1-300x146.jpg 300w" sizes="(max-width: 800px) 100vw, 800px" /></a><p class="wp-caption-text">Automatic Documentation, Code Samples, etc</p></div>
<p>Including example code in 7 languages and cUrl.</p>
<p>And, with a subscription id, you can run these directly in the page: <a href="https://csvaas.azure-api.net/latest">https://csvaas.azure-api.net/latest</a></p>
<div id="attachment_4849" style="width: 810px" class="wp-caption alignnone"><a href="/wp-content/uploads/2016/11/APIM_Doc_2.jpg"><img src="/wp-content/uploads/2016/11/APIM_Doc_2.jpg" alt="API Sample Run" width="800" height="564" class="size-full wp-image-4849" srcset="/wp-content/uploads/2016/11/APIM_Doc_2.jpg 800w, /wp-content/uploads/2016/11/APIM_Doc_2-300x211.jpg 300w" sizes="(max-width: 800px) 100vw, 800px" /></a><p class="wp-caption-text">API Sample Run</p></div>
<p>Behind the scenes, I can configure requirements around the subscriptions and approval process:</p>
<div id="attachment_4875" style="width: 659px" class="wp-caption alignnone"><a href="/wp-content/uploads/2016/11/CSVaaS_Settings.png"><img src="/wp-content/uploads/2016/11/CSVaaS_Settings.png" alt="Setting the service to require Subscriptions  and Administrator Approval" width="649" height="387" class="size-full wp-image-4875" srcset="/wp-content/uploads/2016/11/CSVaaS_Settings.png 649w, /wp-content/uploads/2016/11/CSVaaS_Settings-300x178.png 300w" sizes="(max-width: 649px) 100vw, 649px" /></a><p class="wp-caption-text">Setting the service to require Subscriptions  and Administrator Approval</p></div>
<p>I have access to high-level monitoring:</p>
<div id="attachment_4873" style="width: 692px" class="wp-caption alignnone"><a href="/wp-content/uploads/2016/11/CSVaaS1.png"><img src="/wp-content/uploads/2016/11/CSVaaS1.png" alt="Usage Analytics" width="682" height="214" class="size-full wp-image-4873" srcset="/wp-content/uploads/2016/11/CSVaaS1.png 682w, /wp-content/uploads/2016/11/CSVaaS1-300x94.png 300w" sizes="(max-width: 682px) 100vw, 682px" /></a><p class="wp-caption-text">Usage Analytics</p></div>
<p>And dive into details like response times around the world for specific date ranges and operations:<br />
<div id="attachment_4878" style="width: 810px" class="wp-caption alignnone"><a href="/wp-content/uploads/2016/11/CSVaaS_Analytics.jpg"><img src="/wp-content/uploads/2016/11/CSVaaS_Analytics.jpg" alt="Response Analytics for Geography by Date Rage, Operation, ..." width="800" height="319" class="size-full wp-image-4878" srcset="/wp-content/uploads/2016/11/CSVaaS_Analytics.jpg 800w, /wp-content/uploads/2016/11/CSVaaS_Analytics-300x119.jpg 300w" sizes="(max-width: 800px) 100vw, 800px" /></a><p class="wp-caption-text">Response Analytics for Geography by Date Rage, Operation, &#8230;</p></div></p>
<p>So I have pretty documentation, examples in numerous languages, try it right in the interface buttons, subscription management, and so on with no effort beyond defining the operations (and I could customize all of this if I felt like spending the time).</p>
<h2>Building It &#8211; Implementation Details</h2>
<p>Here&#8217;s the details of what it took to build it.</p>
<h3>Step 1: Storage</h3>
<p>Add a new Storage Account with a catchy name:<a href="https://docs.microsoft.com/en-us/azure/storage/storage-create-storage-account">About Azure Storage Accounts</a></p>
<p>Open the containers list and add an archive container to hold the JSON files and container(s) for the &#8220;latest&#8221; and &#8220;listing&#8221; blobs. We can use re-write rules in the API Management operations to flatten or translate these paths later.</p>
<h3>Step 2: API Management</h3>
<p>Add an API service via the dashboard. Configure it with a name and Web Service URL:</p>
<div id="attachment_4842" style="width: 810px" class="wp-caption alignnone"><a href="/wp-content/uploads/2016/11/APIM_1.jpg"><img src="/wp-content/uploads/2016/11/APIM_1.jpg" alt="Defining an Azure API" width="800" height="489" class="size-full wp-image-4842" srcset="/wp-content/uploads/2016/11/APIM_1.jpg 800w, /wp-content/uploads/2016/11/APIM_1-300x183.jpg 300w" sizes="(max-width: 800px) 100vw, 800px" /></a><p class="wp-caption-text">Defining an Azure API</p></div>
<p>To add Authentication, head to the Identities tab. I used a Microsoft Account for simplicity, but other options like Azure AD, Twitter, Facebook, etc are available out of the box (or you can choose to use certificates or BASIC auth at the API level).</p>
<p>Instructions to setup App Service, go through similar steps for the Identity tab: MS Auth: https://docs.microsoft.com/en-us/azure/app-service-mobile/app-service-mobile-how-to-configure-microsoft-authentication</p>
<div id="attachment_4843" style="width: 810px" class="wp-caption alignnone"><a href="/wp-content/uploads/2016/11/APIM_2.jpg"><img src="/wp-content/uploads/2016/11/APIM_2.jpg" alt="Defining API Identity Providers" width="800" height="497" class="size-full wp-image-4843" srcset="/wp-content/uploads/2016/11/APIM_2.jpg 800w, /wp-content/uploads/2016/11/APIM_2-300x186.jpg 300w" sizes="(max-width: 800px) 100vw, 800px" /></a><p class="wp-caption-text">Defining API Identity Providers</p></div>
<p>There is a Starter Product and an Unlimited Product already predefined. Use the Starter Product for now, since it has rate limits and such already defined, and associate the API with the Product.</p>
<div id="attachment_4844" style="width: 810px" class="wp-caption alignnone"><a href="/wp-content/uploads/2016/11/APIM_3.jpg"><img src="/wp-content/uploads/2016/11/APIM_3.jpg" alt="Defining API Product" width="800" height="253" class="size-full wp-image-4844" srcset="/wp-content/uploads/2016/11/APIM_3.jpg 800w, /wp-content/uploads/2016/11/APIM_3-300x94.jpg 300w" sizes="(max-width: 800px) 100vw, 800px" /></a><p class="wp-caption-text">Defining API Product</p></div>
<p>Now we need an API endpoint. Add an Operation, I chose to name my &#8220;latest&#8221;. It will concatenate this value automatically on the base URL provided in the first setup screen (or you can choose to rewrite to a different URL). I&#8217;m going with the simple option of matching my Blob name to the path.</p>
<div id="attachment_4845" style="width: 810px" class="wp-caption alignnone"><a href="/wp-content/uploads/2016/11/APIM_4.jpg"><img src="/wp-content/uploads/2016/11/APIM_4.jpg" alt="Defining an API Operation" width="800" height="419" class="size-full wp-image-4845" srcset="/wp-content/uploads/2016/11/APIM_4.jpg 800w, /wp-content/uploads/2016/11/APIM_4-300x157.jpg 300w" sizes="(max-width: 800px) 100vw, 800px" /></a><p class="wp-caption-text">Defining an API Operation</p></div>
<p>And we have an API.</p>
<h3>Step 3: Azure Function</h3>
<p>Provision an Azure Functions item from the dashboard, set it to the same resource group as the prior items and the storage account from #1, for simplicity. </p>
<h4>Step 3A: CSV to JSON</h4>
<p>Create a new function with a trigger of type &#8220;External File Trigger&#8221;. I chose Dropbox as my input and blob storage as my output, using the same &#8220;{name}&#8221; token in both names so that my incoming CSV file will generate a matching named JSON file in my output.</p>
<p>Lastly, write some code to convert the CSV to JSON. I used a nuget package, so I added a project.json to specify my dependencies:</p>

<p>And then a simple Run function to convert the incoming input file into the projected JSON for blob storage:</p>
<p><b><a href="https://github.com/tarwn/csvaas/blob/master/CSVaaSDropboxProcessing/run.csx">CSVaaSDropboxProcessing/run.csx</a></b></p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="csharp"><thead><tr><td colspan="2"  class="head">C#</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72
73
74
75
76
77
78
79
80
81
82
83
84
85
86
87
88
89
90
91
92
93
94
95
96
97
98
99
100
101
102
103
104
105
106
107
108
109
110
111
112
113
114
115
116
117
118
119
120
121
122
123
124
125
126
127
128
129
130
131
</pre></td><td class="de1"><pre class="de1"><span class="co2">#r &quot;Microsoft.WindowsAzure.Storage&quot;</span>
&nbsp;
<span class="kw1">using</span> <span class="co3">System</span><span class="sy0">;</span>
<span class="kw1">using</span> <span class="co3">System.Text</span><span class="sy0">;</span>
<span class="kw1">using</span> <span class="co3">System.Text.RegularExpressions</span><span class="sy0">;</span>
<span class="kw1">using</span> <span class="co3">CsvHelper</span><span class="sy0">;</span>
<span class="kw1">using</span> <span class="co3">Microsoft.WindowsAzure.Storage.Blob</span><span class="sy0">;</span>
&nbsp;
<span class="kw1">public</span> <span class="kw1">static</span> <span class="kw4">void</span> Run<span class="br0">&#40;</span>Stream input, <span class="kw4">string</span> name, CloudBlockBlob jsonFile, TraceWriter log<span class="br0">&#41;</span>
<span class="br0">&#123;</span>
&nbsp; &nbsp; log<span class="sy0">.</span><span class="me1">Info</span><span class="br0">&#40;</span>$<span class="st0">&quot;C# External trigger function processed file: &quot;</span> <span class="sy0">+</span> name<span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; <span class="kw1">var</span> boolRegex <span class="sy0">=</span> <span class="kw3">new</span> Regex<span class="br0">&#40;</span><span class="st_h">@&quot;^([Tt]rue|[Ff]alse)$&quot;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; <span class="kw1">var</span> numericRegex <span class="sy0">=</span> <span class="kw3">new</span> Regex<span class="br0">&#40;</span><span class="st_h">@&quot;^[\d\.,]*\d[\d\.,]*$&quot;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; <span class="kw1">var</span> reader <span class="sy0">=</span> <span class="kw3">new</span> StreamReader<span class="br0">&#40;</span>input<span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; <span class="kw1">var</span> csv <span class="sy0">=</span> <span class="kw3">new</span> CsvReader<span class="br0">&#40;</span>reader<span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; csv<span class="sy0">.</span><span class="me1">Configuration</span><span class="sy0">.</span><span class="me1">HasHeaderRecord</span> <span class="sy0">=</span> <span class="kw1">false</span><span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; <span class="kw1">var</span> headers <span class="sy0">=</span> <span class="kw3">new</span> List<span class="sy0">&lt;</span><span class="kw4">string</span><span class="sy0">&gt;</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; <span class="kw1">var</span> rows <span class="sy0">=</span> <span class="kw3">new</span> List<span class="sy0">&lt;</span>List<span class="sy0">&lt;</span><span class="kw4">string</span><span class="sy0">&gt;&gt;</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; InspectedType<span class="br0">&#91;</span><span class="br0">&#93;</span> types <span class="sy0">=</span> <span class="kw1">null</span><span class="sy0">;</span>
&nbsp; &nbsp; <span class="kw4">int</span> rowCount <span class="sy0">=</span> <span class="nu0">0</span><span class="sy0">;</span>
&nbsp; &nbsp; <span class="kw4">string</span> stringValue<span class="sy0">;</span>
&nbsp; &nbsp; <span class="kw1">while</span><span class="br0">&#40;</span>csv<span class="sy0">.</span><span class="me1">Read</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#41;</span>
&nbsp; &nbsp; <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">if</span><span class="br0">&#40;</span>rowCount <span class="sy0">==</span> <span class="nu0">0</span><span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">for</span><span class="br0">&#40;</span><span class="kw4">int</span> i<span class="sy0">=</span><span class="nu0">0</span><span class="sy0">;</span> csv<span class="sy0">.</span><span class="me1">TryGetField</span><span class="sy0">&lt;</span><span class="kw4">string</span><span class="sy0">&gt;</span><span class="br0">&#40;</span>i, <span class="kw1">out</span> stringValue<span class="br0">&#41;</span><span class="sy0">;</span> i<span class="sy0">++</span><span class="br0">&#41;</span> 
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; headers<span class="sy0">.</span><span class="kw1">Add</span><span class="br0">&#40;</span>stringValue<span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; types <span class="sy0">=</span> <span class="kw3">new</span> InspectedType<span class="br0">&#91;</span>headers<span class="sy0">.</span><span class="me1">Count</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#93;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; log<span class="sy0">.</span><span class="me1">Info</span><span class="br0">&#40;</span>$<span class="st0">&quot;Headers: &quot;</span> <span class="sy0">+</span> <span class="kw4">String</span><span class="sy0">.</span><span class="kw1">Join</span><span class="br0">&#40;</span><span class="st0">&quot;,&quot;</span>, headers<span class="br0">&#41;</span><span class="br0">&#41;</span><span class="sy0">;</span> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">else</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">var</span> row <span class="sy0">=</span> <span class="kw3">new</span> List<span class="sy0">&lt;</span><span class="kw4">string</span><span class="sy0">&gt;</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">for</span><span class="br0">&#40;</span><span class="kw4">int</span> i<span class="sy0">=</span><span class="nu0">0</span><span class="sy0">;</span> csv<span class="sy0">.</span><span class="me1">TryGetField</span><span class="sy0">&lt;</span><span class="kw4">string</span><span class="sy0">&gt;</span><span class="br0">&#40;</span>i, <span class="kw1">out</span> stringValue<span class="br0">&#41;</span><span class="sy0">;</span> i<span class="sy0">++</span><span class="br0">&#41;</span> 
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; row<span class="sy0">.</span><span class="kw1">Add</span><span class="br0">&#40;</span>stringValue<span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">if</span><span class="br0">&#40;</span>rowCount <span class="sy0">==</span> <span class="nu0">1</span><span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">if</span><span class="br0">&#40;</span>boolRegex<span class="sy0">.</span><span class="me1">IsMatch</span><span class="br0">&#40;</span>stringValue<span class="br0">&#41;</span><span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; types<span class="br0">&#91;</span>i<span class="br0">&#93;</span> <span class="sy0">=</span> InspectedType<span class="sy0">.</span><span class="me1">Boolean</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">else</span> <span class="kw1">if</span><span class="br0">&#40;</span>numericRegex<span class="sy0">.</span><span class="me1">IsMatch</span><span class="br0">&#40;</span>stringValue<span class="br0">&#41;</span><span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; types<span class="br0">&#91;</span>i<span class="br0">&#93;</span> <span class="sy0">=</span> InspectedType<span class="sy0">.</span><span class="me1">Number</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">else</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; types<span class="br0">&#91;</span>i<span class="br0">&#93;</span> <span class="sy0">=</span> InspectedType<span class="sy0">.</span><span class="kw4">String</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">else</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">if</span><span class="br0">&#40;</span>types<span class="br0">&#91;</span>i<span class="br0">&#93;</span> <span class="sy0">==</span> InspectedType<span class="sy0">.</span><span class="me1">Boolean</span> <span class="sy0">&amp;&amp;</span> <span class="sy0">!</span>boolRegex<span class="sy0">.</span><span class="me1">IsMatch</span><span class="br0">&#40;</span>stringValue<span class="br0">&#41;</span><span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; types<span class="br0">&#91;</span>i<span class="br0">&#93;</span> <span class="sy0">=</span> InspectedType<span class="sy0">.</span><span class="kw4">String</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">else</span> <span class="kw1">if</span><span class="br0">&#40;</span>types<span class="br0">&#91;</span>i<span class="br0">&#93;</span> <span class="sy0">==</span> InspectedType<span class="sy0">.</span><span class="me1">Number</span> <span class="sy0">&amp;&amp;</span> <span class="sy0">!</span>numericRegex<span class="sy0">.</span><span class="me1">IsMatch</span><span class="br0">&#40;</span>stringValue<span class="br0">&#41;</span><span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; types<span class="br0">&#91;</span>i<span class="br0">&#93;</span> <span class="sy0">=</span> InspectedType<span class="sy0">.</span><span class="kw4">String</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; rows<span class="sy0">.</span><span class="kw1">Add</span><span class="br0">&#40;</span>row<span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; log<span class="sy0">.</span><span class="me1">Info</span><span class="br0">&#40;</span>$<span class="st0">&quot;Row $rowCount: &quot;</span> <span class="sy0">+</span> <span class="kw4">String</span><span class="sy0">.</span><span class="kw1">Join</span><span class="br0">&#40;</span><span class="st0">&quot;,&quot;</span>, row<span class="br0">&#41;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp; &nbsp; &nbsp; &nbsp; rowCount<span class="sy0">++;</span>
&nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp;
&nbsp; &nbsp; log<span class="sy0">.</span><span class="me1">Info</span><span class="br0">&#40;</span><span class="st0">&quot;Inspected Row Types: &quot;</span> <span class="sy0">+</span> <span class="kw4">String</span><span class="sy0">.</span><span class="kw1">Join</span><span class="br0">&#40;</span><span class="st0">&quot;,&quot;</span>, types<span class="br0">&#41;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; <span class="kw1">var</span> time <span class="sy0">=</span> DateTime<span class="sy0">.</span><span class="me1">UtcNow</span><span class="sy0">.</span><span class="me1">ToString</span><span class="br0">&#40;</span><span class="st0">&quot;s&quot;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; <span class="kw1">var</span> typesDescription <span class="sy0">=</span> <span class="st0">&quot;<span class="es0">\&quot;</span>&quot;</span> <span class="sy0">+</span> <span class="kw4">String</span><span class="sy0">.</span><span class="kw1">Join</span><span class="br0">&#40;</span><span class="st0">&quot;<span class="es0">\&quot;</span>,<span class="es0">\&quot;</span>&quot;</span>, types<span class="br0">&#41;</span> <span class="sy0">+</span> <span class="st0">&quot;<span class="es0">\&quot;</span>&quot;</span><span class="sy0">;</span>
&nbsp; &nbsp; <span class="kw1">var</span> sb <span class="sy0">=</span> <span class="kw3">new</span> StringBuilder<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; sb<span class="sy0">.</span><span class="me1">AppendLine</span><span class="br0">&#40;</span><span class="st0">&quot;{&quot;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; sb<span class="sy0">.</span><span class="me1">AppendFormat</span><span class="br0">&#40;</span><span class="st0">&quot;<span class="es0">\&quot;</span>info<span class="es0">\&quot;</span>: {{ <span class="es0">\&quot;</span>sourceFile<span class="es0">\&quot;</span>: <span class="es0">\&quot;</span>{0}<span class="es0">\&quot;</span>, <span class="es0">\&quot;</span>processedTime<span class="es0">\&quot;</span>: <span class="es0">\&quot;</span>{1}<span class="es0">\&quot;</span>, <span class="es0">\&quot;</span>types<span class="es0">\&quot;</span>: [{2}] }},&quot;</span>,
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; name, time, typesDescription<span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; sb<span class="sy0">.</span><span class="me1">AppendLine</span><span class="br0">&#40;</span><span class="st0">&quot;<span class="es0">\&quot;</span>rows<span class="es0">\&quot;</span>: [&quot;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; <span class="kw4">bool</span> isFirstRow <span class="sy0">=</span> <span class="kw1">true</span><span class="sy0">;</span>
&nbsp; &nbsp; <span class="kw4">int</span> columnCount <span class="sy0">=</span> headers<span class="sy0">.</span><span class="me1">Count</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; <span class="kw1">foreach</span><span class="br0">&#40;</span><span class="kw1">var</span> row <span class="kw1">in</span> rows<span class="br0">&#41;</span>
&nbsp; &nbsp; <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">if</span><span class="br0">&#40;</span><span class="sy0">!</span>isFirstRow<span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; sb<span class="sy0">.</span><span class="me1">AppendLine</span><span class="br0">&#40;</span><span class="st0">&quot;,&quot;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp; &nbsp; &nbsp; &nbsp; isFirstRow <span class="sy0">=</span> <span class="kw1">false</span><span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">for</span><span class="br0">&#40;</span><span class="kw1">var</span> i <span class="sy0">=</span> <span class="nu0">0</span><span class="sy0">;</span> i <span class="sy0">&lt;</span> columnCount<span class="sy0">;</span> i<span class="sy0">++</span><span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">var</span> <span class="kw1">value</span> <span class="sy0">=</span> row<span class="br0">&#91;</span>i<span class="br0">&#93;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">if</span><span class="br0">&#40;</span>types<span class="br0">&#91;</span>i<span class="br0">&#93;</span> <span class="sy0">==</span> InspectedType<span class="sy0">.</span><span class="me1">Boolean</span><span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">value</span> <span class="sy0">=</span> row<span class="br0">&#91;</span>i<span class="br0">&#93;</span><span class="sy0">.</span><span class="me1">ToLower</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">else</span> <span class="kw1">if</span><span class="br0">&#40;</span>types<span class="br0">&#91;</span>i<span class="br0">&#93;</span> <span class="sy0">==</span> InspectedType<span class="sy0">.</span><span class="me1">Number</span><span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">value</span> <span class="sy0">=</span> row<span class="br0">&#91;</span>i<span class="br0">&#93;</span><span class="sy0">.</span><span class="me1">Replace</span><span class="br0">&#40;</span><span class="st0">&quot;,&quot;</span>, <span class="st0">&quot;&quot;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">else</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">value</span> <span class="sy0">=</span> <span class="st0">&quot;<span class="es0">\&quot;</span>&quot;</span> <span class="sy0">+</span> row<span class="br0">&#91;</span>i<span class="br0">&#93;</span><span class="sy0">.</span><span class="me1">Replace</span><span class="br0">&#40;</span><span class="st0">&quot;<span class="es0">\&quot;</span>&quot;</span>,<span class="st0">&quot;<span class="es0">\\</span><span class="es0">\&quot;</span>&quot;</span><span class="br0">&#41;</span> <span class="sy0">+</span> <span class="st0">&quot;<span class="es0">\&quot;</span>&quot;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; sb<span class="sy0">.</span><span class="me1">AppendFormat</span><span class="br0">&#40;</span><span class="st0">&quot;{0}<span class="es0">\&quot;</span>{1}<span class="es0">\&quot;</span>: {2}{3}&quot;</span>,
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; i <span class="sy0">==</span> <span class="nu0">0</span> <span class="sy0">?</span> <span class="st0">&quot;{&quot;</span> <span class="sy0">:</span> <span class="st0">&quot;, &quot;</span>, 
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; headers<span class="br0">&#91;</span>i<span class="br0">&#93;</span>, 
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">value</span>,
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; i <span class="sy0">==</span> columnCount <span class="sy0">-</span> <span class="nu0">1</span> <span class="sy0">?</span> <span class="st0">&quot;}&quot;</span> <span class="sy0">:</span> <span class="st0">&quot;&quot;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp; &nbsp; sb<span class="sy0">.</span><span class="me1">AppendLine</span><span class="br0">&#40;</span><span class="st0">&quot;]&quot;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; sb<span class="sy0">.</span><span class="me1">AppendLine</span><span class="br0">&#40;</span><span class="st0">&quot;}&quot;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; jsonFile<span class="sy0">.</span><span class="me1">UploadText</span><span class="br0">&#40;</span>sb<span class="sy0">.</span><span class="me1">ToString</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; jsonFile<span class="sy0">.</span><span class="me1">Properties</span><span class="sy0">.</span><span class="me1">ContentType</span> <span class="sy0">=</span> <span class="st0">&quot;application/json&quot;</span><span class="sy0">;</span>
&nbsp; &nbsp; jsonFile<span class="sy0">.</span><span class="me1">SetProperties</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
<span class="br0">&#125;</span>
&nbsp;
<span class="kw1">public</span> <span class="kw4">enum</span> InspectedType
<span class="br0">&#123;</span>
&nbsp; &nbsp; <span class="kw4">String</span> <span class="sy0">=</span> <span class="nu0">0</span>,
&nbsp; &nbsp; Number <span class="sy0">=</span> <span class="nu0">1</span>,
&nbsp; &nbsp; Boolean <span class="sy0">=</span> <span class="nu0">2</span> &nbsp; &nbsp;
<span class="br0">&#125;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">#r "Microsoft.WindowsAzure.Storage"

using System;
using System.Text;
using System.Text.RegularExpressions;
using CsvHelper;
using Microsoft.WindowsAzure.Storage.Blob;

public static void Run(Stream input, string name, CloudBlockBlob jsonFile, TraceWriter log)
{
    log.Info($"C# External trigger function processed file: " + name);

    var boolRegex = new Regex(@"^([Tt]rue|[Ff]alse)$");
    var numericRegex = new Regex(@"^[\d\.,]*\d[\d\.,]*$");

    var reader = new StreamReader(input);
    var csv = new CsvReader(reader);
    csv.Configuration.HasHeaderRecord = false;

    var headers = new List&lt;string&gt;();
    var rows = new List&lt;List&lt;string&gt;&gt;();
    InspectedType[] types = null;
    int rowCount = 0;
    string stringValue;
    while(csv.Read())
    {
        if(rowCount == 0)
        {
            for(int i=0; csv.TryGetField&lt;string&gt;(i, out stringValue); i++) 
            {
                headers.Add(stringValue);
            }
            types = new InspectedType[headers.Count()];
            log.Info($"Headers: " + String.Join(",", headers));            
        }
        else
        {
            var row = new List&lt;string&gt;();
            for(int i=0; csv.TryGetField&lt;string&gt;(i, out stringValue); i++) 
            {
                row.Add(stringValue);
                if(rowCount == 1)
                {
                    if(boolRegex.IsMatch(stringValue))
                    {
                        types[i] = InspectedType.Boolean;
                    }
                    else if(numericRegex.IsMatch(stringValue))
                    {
                        types[i] = InspectedType.Number;
                    }
                    else
                    {
                        types[i] = InspectedType.String;
                    }
                }
                else
                {
                    if(types[i] == InspectedType.Boolean &amp;&amp; !boolRegex.IsMatch(stringValue))
                    {
                        types[i] = InspectedType.String;
                    }
                    else if(types[i] == InspectedType.Number &amp;&amp; !numericRegex.IsMatch(stringValue))
                    {
                        types[i] = InspectedType.String;
                    }
                }
            }
            rows.Add(row);
            log.Info($"Row $rowCount: " + String.Join(",", row));
        }
        rowCount++;
    }

    log.Info("Inspected Row Types: " + String.Join(",", types));

    var time = DateTime.UtcNow.ToString("s");
    var typesDescription = "\"" + String.Join("\",\"", types) + "\"";
    var sb = new StringBuilder();
    sb.AppendLine("{");
    sb.AppendFormat("\"info\": {{ \"sourceFile\": \"{0}\", \"processedTime\": \"{1}\", \"types\": [{2}] }},",
                    name, time, typesDescription);

    sb.AppendLine("\"rows\": [");
    bool isFirstRow = true;
    int columnCount = headers.Count();
    foreach(var row in rows)
    {
        if(!isFirstRow)
        {
            sb.AppendLine(",");
        }
        isFirstRow = false;

        for(var i = 0; i &lt; columnCount; i++)
        {
            var value = row[i];
            if(types[i] == InspectedType.Boolean)
            {
                value = row[i].ToLower();
            }
            else if(types[i] == InspectedType.Number)
            {
                value = row[i].Replace(",", "");
            }
            else
            {
                value = "\"" + row[i].Replace("\"","\\\"") + "\"";
            }

            sb.AppendFormat("{0}\"{1}\": {2}{3}",
                            i == 0 ? "{" : ", ", 
                            headers[i], 
                            value,
                            i == columnCount - 1 ? "}" : "");
        }
    }
    sb.AppendLine("]");
    sb.AppendLine("}");

    jsonFile.UploadText(sb.ToString());
    jsonFile.Properties.ContentType = "application/json";
    jsonFile.SetProperties();
}

public enum InspectedType
{
    String = 0,
    Number = 1,
    Boolean = 2    
}</pre></div></div>

<p>Nearly all of the code is converting the CSV to JSON, almost no code is required to handle the storage, dropbox, etc interactions.</p>
<h4>Step 3B: Listing and Latest JSON</h4>
<p>Create a second Azure Function that watches the "Archive" blob, with a blob output with the "latest" name hardcoded, and input for the "listing" blob, and an "inout" blob for the listing. We reference the input twice because it lets us bind the input as a string for easy null checks, but a CloudBlockBlob for actual output so we can set the output blob properties to make it "application/json".</p>
<p><b><a href="https://github.com/tarwn/csvaas/blob/master/CSVaaSPublish/run.csx">CSVaaSPublish/run.csx</a></b></p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="csharp"><thead><tr><td colspan="2"  class="head">C#</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
</pre></td><td class="de1"><pre class="de1"><span class="co2">#r &quot;Microsoft.WindowsAzure.Storage&quot;</span>
&nbsp;
<span class="kw1">using</span> <span class="co3">Microsoft.WindowsAzure.Storage.Blob</span><span class="sy0">;</span>
<span class="kw1">using</span> <span class="co3">Newtonsoft.Json</span><span class="sy0">;</span>
&nbsp;
<span class="kw1">public</span> <span class="kw1">static</span> <span class="kw4">void</span> Run<span class="br0">&#40;</span>Stream triggerBlob, <span class="kw4">string</span> name, <span class="kw4">string</span> listBlobIn, CloudBlockBlob listBlobOut, Stream outputBlob, TraceWriter log<span class="br0">&#41;</span>
<span class="br0">&#123;</span>
&nbsp; &nbsp; <span class="co1">// publish &quot;latest&quot;</span>
&nbsp; &nbsp; triggerBlob<span class="sy0">.</span><span class="me1">CopyTo</span><span class="br0">&#40;</span>outputBlob<span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; <span class="co1">// add original item to archive &quot;all&quot; list</span>
&nbsp; &nbsp; CSVList list<span class="sy0">;</span>
&nbsp; &nbsp; <span class="kw1">if</span><span class="br0">&#40;</span><span class="sy0">!</span><span class="kw4">String</span><span class="sy0">.</span><span class="me1">IsNullOrEmpty</span><span class="br0">&#40;</span>listBlobIn<span class="br0">&#41;</span><span class="br0">&#41;</span>
&nbsp; &nbsp; <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; list <span class="sy0">=</span> JsonConvert<span class="sy0">.</span><span class="me1">DeserializeObject</span><span class="sy0">&lt;</span>CSVList<span class="sy0">&gt;</span><span class="br0">&#40;</span>listBlobIn<span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp; &nbsp; <span class="kw1">else</span><span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; list <span class="sy0">=</span> <span class="kw3">new</span> CSVList<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp;
&nbsp; &nbsp; list<span class="sy0">.</span><span class="me1">LatestUpdate</span> <span class="sy0">=</span> DateTime<span class="sy0">.</span><span class="me1">UtcNow</span><span class="sy0">;</span>
&nbsp; &nbsp; list<span class="sy0">.</span><span class="me1">Items</span><span class="sy0">.</span><span class="kw1">Add</span><span class="br0">&#40;</span>name<span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; listBlobOut<span class="sy0">.</span><span class="me1">UploadText</span><span class="br0">&#40;</span>JsonConvert<span class="sy0">.</span><span class="me1">SerializeObject</span><span class="br0">&#40;</span>list<span class="br0">&#41;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; listBlobOut<span class="sy0">.</span><span class="me1">Properties</span><span class="sy0">.</span><span class="me1">ContentType</span> <span class="sy0">=</span> <span class="st0">&quot;application/json&quot;</span><span class="sy0">;</span>
&nbsp; &nbsp; listBlobOut<span class="sy0">.</span><span class="me1">SetProperties</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
<span class="br0">&#125;</span>
&nbsp;
<span class="kw1">public</span> <span class="kw4">class</span> CSVList
<span class="br0">&#123;</span>
&nbsp; &nbsp; <span class="kw1">public</span> CSVList<span class="br0">&#40;</span><span class="br0">&#41;</span> 
&nbsp; &nbsp; <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; Items <span class="sy0">=</span> <span class="kw3">new</span> List<span class="sy0">&lt;</span><span class="kw4">string</span><span class="sy0">&gt;</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp;
&nbsp; &nbsp; <span class="kw1">public</span> DateTime LatestUpdate <span class="br0">&#123;</span> <span class="kw1">get</span><span class="sy0">;</span>set<span class="sy0">;</span> <span class="br0">&#125;</span>
&nbsp; &nbsp; <span class="kw1">public</span> List<span class="sy0">&lt;</span><span class="kw4">string</span><span class="sy0">&gt;</span> Items <span class="br0">&#123;</span> <span class="kw1">get</span><span class="sy0">;</span>set<span class="sy0">;</span> <span class="br0">&#125;</span> &nbsp; &nbsp;
<span class="br0">&#125;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">#r "Microsoft.WindowsAzure.Storage"

using Microsoft.WindowsAzure.Storage.Blob;
using Newtonsoft.Json;

public static void Run(Stream triggerBlob, string name, string listBlobIn, CloudBlockBlob listBlobOut, Stream outputBlob, TraceWriter log)
{
    // publish "latest"
    triggerBlob.CopyTo(outputBlob);

    // add original item to archive "all" list
    CSVList list;
    if(!String.IsNullOrEmpty(listBlobIn))
    {
        list = JsonConvert.DeserializeObject&lt;CSVList&gt;(listBlobIn);
    }
    else{
        list = new CSVList();
    }

    list.LatestUpdate = DateTime.UtcNow;
    list.Items.Add(name);

    listBlobOut.UploadText(JsonConvert.SerializeObject(list));
    listBlobOut.Properties.ContentType = "application/json";
    listBlobOut.SetProperties();
}

public class CSVList
{
    public CSVList() 
    {
        Items = new List&lt;string&gt;();
    }

    public DateTime LatestUpdate { get;set; }
    public List&lt;string&gt; Items { get;set; }    
}</pre></div></div>

<p>And there we have it, a CSV-powered API with full documentation, authentication via Microsoft as a single-sign on source, analytics, rate limits, and an interface that requires me to do nothing more than save my file in a folder and pay an extremely low consumption bill based on usage.</p>
<h2>Things I Figured Out</h2>
<p>Along the way I ran into a couple undocumented Functions issues, here's the details in case someone else does to.</p>
<p><b>CloudBlockBlob: Cannot bind blob to CloudBlockBlob using access Write</b><br />
The Issue:<br />
Part of the list of <a href="">available bindings</a> will complain if you set them as direction "in" or "out" and fail to work.</p>
<p>The Fix:<br />
Edit the function.json file directly, changing the "direction" property to "inout", an undocumented value that indicates that it is a bi-directional binding type.</p>
<p><b>CloudBlockBlob: Exception binding parameter 'output'</b><br />
The Issue:<br />
This happened on my Dropbox->Blob Function. When you create an ExternalFileTrigger, it also asks you to define an output. This is not a "blob" output, but a special ApiHub thing that doesn't have the same capabilities as a Blob output and can't handle the same range of bindings that the "blob" type can.</p>
<p>To Fix it:<br />
Edit the function.json file, changing the type to "blob" and pasting in a connection property that has been set up for a "blob" type (the ApiHub storage connection string won't work here either). Once you update both of these properties, everything is happy.</p>
]]></content>
			<link rel="replies" type="text/html" href="/index.php/enterprisedev/cloud/azure/csv-file-to-api-using-azure-functions-csvaas/#comments" thr:count="1"/>
		<link rel="replies" type="application/atom+xml" href="/index.php/enterprisedev/cloud/azure/csv-file-to-api-using-azure-functions-csvaas/feed/atom/" thr:count="1"/>
		<thr:total>1</thr:total>
		</entry>
		<entry>
		<author>
			<name>Jes Borland</name>
					</author>
		<title type="html"><![CDATA[Learn about SQL Server in Azure in Madison, WI]]></title>
		<link rel="alternate" type="text/html" href="/index.php/uncategorized/learn-about-sql-server-in-azure-in-madison-wi/" />
		<id>/?p=4326</id>
		<updated>2016-01-27T16:12:33Z</updated>
		<published>2016-01-27T16:05:21Z</published>
		<category scheme="/" term="Azure" /><category scheme="/" term="Microsoft SQL Server" /><category scheme="/" term="Professional Development" /><category scheme="/" term="Uncategorized" />		<summary type="html"><![CDATA[You: curious about Azure, wondering if it&#8217;s right for your organization. You run some SQL Server databases, but don&#8217;t know if you would use a VM in Azure, or should jump into an Azure SQL Database. You know there are some differences and complexities, but aren&#8217;t sure how to work with them. Me: ready to [&#8230;]]]></summary>
		<content type="html" xml:base="/index.php/uncategorized/learn-about-sql-server-in-azure-in-madison-wi/"><![CDATA[<p>You: curious about Azure, wondering if it&#8217;s right for your organization. You run some SQL Server databases, but don&#8217;t know if you would use a VM in Azure, or should jump into an Azure SQL Database. You know there are some differences and complexities, but aren&#8217;t sure how to work with them.</p>
<p>Me: ready to spend a day teaching you how to get started!</p>
<p>I&#8217;ll be presenting my full-day class <a href="http://www.eventbrite.com/e/sql-sat-madison-pre-con-get-started-with-sql-server-in-azure-wjes-borland-tickets-20990868252" target="_blank">Get Started With SQL Server in Azure </a>at Globe University in Madison, WI on Friday, April 8, 2016. (Conveniently, the day before the fifth annual SQLSaturday in Madison.) You can get a full day of learning for only $125! Here are the details about the class:</p>
<p style="padding-left: 30px">Microsoft Azure is a mature, stable ecosystem, but some people and companies are still hesitant to adopt it. In this full day class, I&#8217;ll teach you why building SQL Server environments in Azure is safe, easy, and reliable and how to do it.</p>
<p style="padding-left: 30px">We&#8217;ll begin with an overview of the Azure ecosystem. SQL Server is one of a large number of services being offered, and many work together. I&#8217;ll walk through the main management tool, the Azure Portal, to show you how to use it. I&#8217;ll cover the security and compliance of features of Azure, which are numerous. You&#8217;ll understand the differences between Azure Infrastructure as a Service (Iaas) and Platform as a Service (PaaS) offerings.</p>
<p style="padding-left: 30px">You&#8217;ll see how to build IaaS SQL Server VMs. I&#8217;ll talk through licensing, networking, security, and what you&#8217;ll pay for. We&#8217;ll talk about how to move your current data into the VM, how to connect to the databases for management or from the application, and uses for VMs such as DR. The HA/DR options for IaaS will be explained.</p>
<p style="padding-left: 30px">You&#8217;ll also see how to build PaaS Azure SQL Databases, with the same information networking, security, and what you&#8217;ll pay for. I&#8217;ll show you how to move your current data to the database, and how it differs from the IaaS product. You&#8217;ll learn how to connect to and manage the databases. We&#8217;ll also cover how HA/DR is handled with PaaS databases.</p>
<p style="padding-left: 30px">I&#8217;ll cover intricacies learned from hands-on experience, such as security and networking settings to be aware of, and how to use Azure&#8217;s ability to scale up and down as necessary. You&#8217;ll come away from this class fully prepared to build your first IaaS or PaaS deployment.</p>
<h3>Call To Action</h3>
<p><a href="http://www.eventbrite.com/e/sql-sat-madison-pre-con-get-started-with-sql-server-in-azure-wjes-borland-tickets-20990868252" target="_blank">Register today</a> for this one-day training opportunity. Don&#8217;t forget to register for <a href="http://www.sqlsaturday.com/499/eventhome.aspx" target="_blank">SQLSaturday Madison</a> &#8211; a free, one-day event where you can choose from over 30 SQL Server sessions &#8211; as well!</p>
]]></content>
			<link rel="replies" type="text/html" href="/index.php/uncategorized/learn-about-sql-server-in-azure-in-madison-wi/#comments" thr:count="0"/>
		<link rel="replies" type="application/atom+xml" href="/index.php/uncategorized/learn-about-sql-server-in-azure-in-madison-wi/feed/atom/" thr:count="0"/>
		<thr:total>0</thr:total>
		</entry>
		<entry>
		<author>
			<name>Eli Weinstock-Herman (tarwn)</name>
					</author>
		<title type="html"><![CDATA[Distributed Storage: How SQL Azure Replicas Work]]></title>
		<link rel="alternate" type="text/html" href="/index.php/architect/distributed-storage-how-sql-azure-replicas-work/" />
		<id>/?p=4228</id>
		<updated>2016-02-07T19:30:51Z</updated>
		<published>2015-11-18T14:36:12Z</published>
		<category scheme="/" term="Architecture, Design and Strategy" /><category scheme="/" term="Azure" /><category scheme="/" term="Data Management" /><category scheme="/" term="distributed systems" /><category scheme="/" term="sql azure" />		<summary type="html"><![CDATA[One of the benefits of Microsoft SQL Azure over an on-premises or VM installation is built-in resiliency. In a typical on-premises/VM installation your database lives on a single server, with all the single points of failure that brings to mind. SQL Azure, on the other hand, always has 3 or more replicas assigned for each [&#8230;]]]></summary>
		<content type="html" xml:base="/index.php/architect/distributed-storage-how-sql-azure-replicas-work/"><![CDATA[<p>One of the benefits of Microsoft SQL Azure over an on-premises or VM installation is built-in resiliency. In a typical on-premises/VM installation your database lives on a single server, with all the single points of failure that brings to mind. SQL Azure, on the other hand, always has 3 or more replicas assigned for each database. This allows it to weather issues like network glitches and commodity hardware failures with no administration and little to no downtime.</p>
<div style="margin: 1em 3em; padding: 2em; font-size: 110%; border: 1px solid #dddddd; background-color: #eeeeee; border-radius: 6px;">There are interactive simulations below! Skip ahead if you just want to play with them, read through if you want more of the details <img src="https://s.w.org/images/core/emoji/2/72x72/1f642.png" alt="🙂" class="wp-smiley" style="height: 1em; max-height: 1em;" /></div>
<p>Finding good, detailed articles about this has been difficult. Here&#8217;s a couple I found:</p>
<ul>
<li><a href="https://azure.microsoft.com/en-us/blog/fault-tolerance-in-windows-azure-sql-database/">Fault-tolerance in Windows Azure SQL Database</a></li>
<li><a href="http://social.technet.microsoft.com/wiki/contents/articles/1695.inside-microsoft-azure-sql-database/revision/33.aspx">Inside Microsoft Azure SQL Database</a> (retired article &#8211; this is a revision from prior to it being taken down)</li>
</ul>
<p>What really interested me was the database communications. How do reads flow into the database when there&#8217;s 3 of them? How do writes occur when one of my database replicas is down? How does a replica catch back up when it is available again?</p>
<p>I learn well from reading, but had to reread the articles a few times over the years before the information really stuck. So this post is an attempt to approach the topic from another direction, with active simulations of how this communications works in SQL Azure.</p>
<p><i>Note: When the two disagree, I&#8217;ll rely on the slight less out of date top article. When my practical (aka, support tickets) experience disagrees with both, I&#8217;ll point it out.</i></p>
<p><i>Note 2: I suspect the simulations below will make this a mobile-unfriendly post, sorry.</i></p>
<h1>Key Details of SQL Azure</h1>
<p>Before we start answering the questions above, lets extract some details from those dense articles to set the stage. </p>
<p>There are actually several layers of systems involved in SQL Azure, this post is going to focus just on the database operations. I&#8217;ll point out when the &#8220;fabric&#8221; is involved, but it won&#8217;t be part of the simulations. That being said, here&#8217;s the key details for the database:</p>
<ul>
<li> There are a minimum of 3 database replicas at all times</li>
<li>All incoming traffic goes to the Primary replica (elected by the &#8220;fabric&#8221;)</li>
<li>Replicas exist on different physical servers (created/managed by the &#8220;fabric&#8221;)</li>
<li>Database Writes require a quorum of 2 of the 3 replicas acknowledging the write in order to COMMIT</li>
<li>Database Reads return directly from the Primary replica</li>
<li>There is support for both transactional and full restores</li>
</ul>
<p>Each &#8220;data node&#8221; in the network includes the SQL Server processes involved in the items above as well asservices for failure detection, re-establishing nodes after failure, throttling, and so on. I won&#8217;t be diving into those today, this is all about the database replica.</p>
<p>Some Warnings:</p>
<ul>
<li>As far as I know, Azure SQL does not use HTTP codes internally. I used them in the simulations below as I thought they would be more recognizable then me making something up</li>
<li>SQL Server is not limited to key/value or single statement operations, this is a simplification I made so I could focus on the mechanics of the communications instead of diving into the MSSQL storage engine</li>
</ul>
<h2>How do writes work?</h2>
<p>Writes in SQL Azure come through a TDS gateway that, transparent to us, passes our queries to the Primary replica. The replica determines what the change will be from our operation, assigns a Change Sequence Number (CSN) to it, then replicates it to the secondary replicas. The Primary replica only commits the changes after it has received at least one acknowledgement back from the secondaries, ensuring the data now is now on at least two replicas (the Primary and one secondary). </p>
<div style="margin: 1em 3em; padding: 1em; text-align: center; border: 1px solid #dddddd; background-color: #eeeeee; border-radius: 6px;">Press the &#8220;Run&#8221; button below to start sending writes from the &#8220;gateway&#8221; into the replicas. </div>
<p><iframe src="http://tarwn.github.io/DistributedSamples/Javascript/blog/azure_w.html" style="width: 800px; height: 600px; border: 2px solid #eeeeee"></iframe></p>
<p>What you&#8217;re seeing is a simulation of the writes I described above. Each replica has a set of data that has been stored and a short transaction log and indicates whether it is the &#8220;PRIMARY&#8221; or &#8220;secondary&#8221; in it&#8217;s title bar. </p>
<p>The &#8220;gateway&#8221; in the top left sends each write to the PRIMARY replica. The PRIMARY replica calculates the storage change of the write, assigns it a CSN, and sends it to the two secondary replicas. These secondaries apply the change locally and send back an acknowledgement, at which point the PRIMARY commits the change (more on this in a moment). Once the PRIMARY commits the change, it returns a success response back to the person that sent that particular INSERT or UPDATE statement.</p>
<p>Keep in mind, this is a simulation. The model for the COMMIT above is based on what I found in the articles above, but is probably not quite right (and I would love it if someone has more definitive information about this so i could improve it).</p>
<h2>How do reads work?</h2>
<p>Reads are easy. Since the TDS gateway directs all queries to the Primary replica and it always has the most up to date data, it can respond with the values it has locally without seeking a quorum from the other replicas. </p>
<div style="margin: 1em 3em; padding: 1em; text-align: center; border: 1px solid #dddddd; background-color: #eeeeee; border-radius: 6px;">Press the &#8220;Run&#8221; button to send some quick writes and then watch how reads work.</div>
<p><iframe src="http://tarwn.github.io/DistributedSamples/Javascript/blog/azure_r.html" style="width: 800px; height: 600px; border: 2px solid #eeeeee"></iframe></p>
<p>As &#8220;Read&#8221; messages come in from the gateway, the PRIMARY replica looks the value up locally and returns it directly. </p>
<p>In the real SQL Azure replicas, this means that the PRIMARY replica has more work to do then the secondaries. This is where the &#8220;fabric&#8221; behind the scenes becomes critical, as it is responsible for trying to maintain a good balance of primary (read and write load) and secondaries (writes) across each server. When a new replica is created or a new PRIMARY is elected from the existing replicas, the &#8220;fabric&#8221; has to adjust things behind the scenes to balance out the work.</p>
<h2>Weathering Outages</h2>
<p>The point of the 3 node replica setup is to get high levels of resiliency from shared commodity hardware. If an outage is short enough, a transaction log update from whichever replica has the latest log can catch a restoring replica up to date. If the log has been exhausted, a full update can catch up a replica. Eventually, if the server or replica is unavailable long enough, the fabric will provision a new replica to replace it (not implemented in the simulation).</p>
<p>To help show both short outage cases, the simulated replicas only keep their last 4 transactions. This way a replica missing only a couple transactions will restore from transactions but a replica offline for more than 4 transactions will require a full restore.</p>
<div style="margin: 1em 3em; padding: 1em; text-align: center; border: 1px solid #dddddd; background-color: #eeeeee; border-radius: 6px;">Press the &#8220;Run&#8221; button to watch a shorter and longer outage while writing.</div>
<p><iframe src="http://tarwn.github.io/DistributedSamples/Javascript/blog/azure_o.html" style="width: 800px; height: 600px; border: 2px solid #eeeeee"></iframe></p>
<p>This is running a scripted loop of operations to show both restore cases. The script presses the turbo button during write transactions so we can skip ahead to the restore operations. When a replica&#8217;s border turns red, this means it has gone offline.</p>
<p>1) We prime the network with a couple writes, take replica &#8220;B&#8221; offline, send a couple more writes, then bring replica &#8220;B&#8221; back online. This results in a restore from transaction log.<br />
2) After a couple more writes, we take replica &#8220;B&#8221; offline again, wait for 5 more writes to occur, then bring replica &#8220;B&#8221; back online. This results in a full restore.</p>
<p>When a replica comes online, it sends a restore request to the other replicas and identifies the latest CSN it applied. If the other replicas have that CSN in their log, they send back the log and the restoring replica can use the latest of those two logs to catch up. if neither of the replicas can send back a log, then the restoring replica asks for a full restore. This isn&#8217;t heavily detailed in the documentation, so this is another place that matches the document but may not quite match the reality.</p>
<p>When the PRIMARY replica goes down, the documentation outlines monitoring that occurs that causes the &#8220;fabric&#8221; to elect a new PRIMARY replica. From my own experience, one or more types of failures are actually monitored on a 5-10 minute poll and this will result in a short outage (remainder of the 5-10 minute poll loop) before it is noticed and the &#8220;fabric&#8221; elects a new PRIMARY from the remaining secondaries.</p>
<p>For longer replica outages, not included in this simulation, the &#8220;fabric&#8221; will provision a new replica from a full restore and add it to the cluster as a new secondary, replacing the bad node. </p>
<p>Now that we have Writes, Reads, and an IT Person stumbling over power cords, it&#8217;s time to put it all together and play a little.</p>
<h2>Putting it all together</h2>
<p>Here we have a functioning network and 3 buttons. One button starts a stream of random reads and writes, the next unleashes our stumbling IT person to wander aimlessly around and stumble over power cords, and the third allows you to toggle between slower and faster message travel times.</p>
<div style="margin: 1em 3em; padding: 1em; text-align: center; border: 1px solid #dddddd; background-color: #eeeeee; border-radius: 6px;">Start sending random writes, reads, and outages!</div>
<p><iframe src="http://tarwn.github.io/DistributedSamples/Javascript/blog/azure_i.html" style="width: 800px; height: 600px; border: 2px solid #eeeeee"></iframe></p>
<p>One thing you may notice is that the outages are no longer confined to a single replica, now even the primary can go down.</p>
<p>There is a more extensive example here: <a href="http://tarwn.github.io/DistributedSamples/Javascript/azureSql.html">Azure SQL Simulation Console</a></p>
<p>This adds tracking expected versus actual responses, stale data, outage stats, and SLAs as well as the ability to add additional replicas to the cluster.</p>
<h2>Where the Simulation Is Wrong(ish)</h2>
<p>There are a few things that either did not match reality or for which I couldn&#8217;t find good enough information. Feedback would be awesome for these. There are also a few places where I simplified concepts that were outside the scope of talking about the communications and restore processes, if their absence is a problem, let me know and I&#8217;ll try to extend the models.</p>
<p>Things I simplified:</p>
<ul>
<li>Monitoring: I didn&#8217;t model the fabric or neighbor-based monitoring, instead servers will magically come back online every time and monitoring is performed by the generic &#8220;network&#8221; simulation.</li>
<li>Writes/Commits: I simplified this to single insert commits</li>
<li>HTTP Error Messages: I used HTTP status codes in messages because I don&#8217;t know the internal communications and it seemed good/simple enough</li>
</ul>
<p>Things I got wrong:</p>
<ul>
<li>Commits: While I tried to match the explained process, it is not wholly accurate and there is definitely a bug when a commit comes in with an Online Primary, a restoring Secondary, and an Offline secondary. It will be queued up for commit on the secondary but aborted on the primary due to lack of quorum, leading to a secondary that has bad data (and possibly both secondaries, if the other comes online before the next write occurs).</li>
<li>The Full Restore logic &#8211; this was an extrapolated guess from the documentation</li>
<li>SQL Transactions and multi-step operations &#8211; these aren&#8217;t implemented purely, but didn&#8217;t seem to add much value from the perspective of showing how the distributed logic works</li>
</ul>
<p>See anything else? I would love to know so I could improve the models, let me know.</p>
<style>
.post-area li{
    padding: 4px;
}
.post-area ul{
    padding-bottom: 8px;
}
</style>
]]></content>
			<link rel="replies" type="text/html" href="/index.php/architect/distributed-storage-how-sql-azure-replicas-work/#comments" thr:count="8"/>
		<link rel="replies" type="application/atom+xml" href="/index.php/architect/distributed-storage-how-sql-azure-replicas-work/feed/atom/" thr:count="8"/>
		<thr:total>8</thr:total>
		</entry>
		<entry>
		<author>
			<name>Eli Weinstock-Herman (tarwn)</name>
					</author>
		<title type="html"><![CDATA[Real World Azure: Lease Container bug in Azure Storage API]]></title>
		<link rel="alternate" type="text/html" href="/index.php/enterprisedev/cloud/azure/real-world-azure-lease-container-bug-in-azure-storage-api/" />
		<id>/?p=4250</id>
		<updated>2015-11-16T14:10:14Z</updated>
		<published>2015-11-16T14:10:14Z</published>
		<category scheme="/" term="Azure" /><category scheme="/" term="azure" /><category scheme="/" term="real world azure" />		<summary type="html"><![CDATA[Recently we&#8217;ve been working with the raw Azure Storage API to try and get to a more stable solution then the far more aggressively changing Azure Storage SDK. One of the goals is to be able to work equally well locally, against the emulator, and in production. We&#8217;re used to cases where the Emulator diverges [&#8230;]]]></summary>
		<content type="html" xml:base="/index.php/enterprisedev/cloud/azure/real-world-azure-lease-container-bug-in-azure-storage-api/"><![CDATA[<p>Recently we&#8217;ve been working with the raw Azure Storage API to try and get to a more stable solution then the far more aggressively changing Azure Storage SDK. One of the goals is to be able to work equally well locally, against the emulator, and in production. We&#8217;re used to cases where the Emulator diverges from production or the documentation, but recently we found a case where the emulator and documentation match, but the production services appear to be wrong.</p>
<div style="background-color: #ffff99; padding: .5em; margin: 1em;">
<h2 style="margin: .5em 0px;">Real World Azure</h2>
<p>There are a lot of great resources out there on Azure, from demos to webcasts to white papers filled with architectural diagrams. This is to be expected. Microsoft products tend to focus on the 15 minute demo or polished architecture diagram in an enterprise whitepaper, a controlled exposure of only a subset of the functionality you will use in the real world.</p>
<p>I have used Azure daily for years on live business and personal projects, not demos. From supporting production systems running hundred of millions of storage transactions to figuring out why a change to the Azure Management API limits sends certain legacy code into a death spiral to working directly with the APIs in 3-4 different languages to months where we had 2-4 active support cases at any time. These are examples found in the real, production world.
</p></div>
<p>The prior &#8220;real world azure&#8221; post (September 2013) was a <a href="/index.php/desktopdev/mstech/real-world-azure-queue-popreceiptmismatch/">Azure API Queue bug</a> that is still present today.  </p>
<p>This newer bug is more minor, unless you are relying on the error codes to be correct, in which case it&#8217;s kind of painful. It&#8217;s also concerning because, while we don&#8217;t build Storage APIs and SDKs for a living, we caught this in our integration tests relatively quickly, but it appears to have been missed in Microsoft testing thus far.</p>
<h1>What is Azure Blob Storage?</h1>
<p>The shortest explanation I can provide for Azure Blob service is to think of it as an infinitely wide file system. Azure blobs reside in Containers (folders). We have the ability to Lease Containers or Blobs (think of leases as similar to file locks that have the option of automatically releasing at a future time). Once a Container or Blob is Leased, only operations that include the correct lease are allowed to operate on them (except some cases where having no lease is still allowed, like read/download).</p>
<h1>Leasing Non-Existent Containers</h2>
<p>The Azure REST API outlines all of the errors you can expect to get back, nicely broken down into a common set of errors and service-specific lists (<a href="https://msdn.microsoft.com/en-us/library/azure/dd179439.aspx" title="MSDN: Blob Service Errors">Blob Service Errors</a>).</p>
<p>The two error codes we are looking at are:</p>
<blockquote><p>
ContainerNotFound: Not Found (404) &#8211; The specified container does not exist.<br />
BlobNotFound: Not Found (404) &#8211; The specified blob does not exist.
</p></blockquote>
<p>A test for the <a href="https://msdn.microsoft.com/en-us/library/azure/jj159103.aspx" title="MSDN: LeaseContainer Operation">Lease Container Operation</a> can be implemented using the SDK like this:</p>
<p><a href="https://github.com/tarwn/AzureQueueIssues/blob/master/ContainerNotFoundReturnsWrongError.cs" title="ContainerNotFoundReturnsWrongError from tarwn/AzureQueueIssues on github">ContainerNotFoundReturnsWrongError.cs</a></p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="csharp"><thead><tr><td colspan="2"  class="head">C#</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
</pre></td><td class="de1"><pre class="de1"><span class="co1">/// &lt;summary&gt;</span>
<span class="co1">/// Emulator: Returns 404 Container Not Found (tested with 3.3 and other versions)</span>
<span class="co1">/// Azure API: Returns 404 Blob Not Found (tested with 3.3 and other versions)</span>
<span class="co1">/// &lt;/summary&gt;</span>
<span class="br0">&#91;</span>Test<span class="br0">&#93;</span>
<span class="kw1">public</span> <span class="kw4">void</span> AcquireLease_NonExistentContainer_ReturnsContainerNotFoundError<span class="br0">&#40;</span><span class="br0">&#41;</span>
<span class="br0">&#123;</span>
&nbsp; &nbsp; <span class="kw1">var</span> blobClient <span class="sy0">=</span> _account<span class="sy0">.</span><span class="me1">CreateCloudBlobClient</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; <span class="kw1">var</span> containerReference <span class="sy0">=</span> blobClient<span class="sy0">.</span><span class="me1">GetContainerReference</span><span class="br0">&#40;</span><span class="st0">&quot;nonexistent-container&quot;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; <span class="kw4">int</span> statusCode <span class="sy0">=</span> <span class="sy0">-</span><span class="nu0">1</span><span class="sy0">;</span>
&nbsp; &nbsp; <span class="kw4">string</span> status <span class="sy0">=</span> <span class="st0">&quot;not defined&quot;</span><span class="sy0">;</span>
&nbsp; &nbsp; <span class="kw1">try</span>
&nbsp; &nbsp; <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; containerReference<span class="sy0">.</span><span class="me1">AcquireLease</span><span class="br0">&#40;</span>TimeSpan<span class="sy0">.</span><span class="me1">FromSeconds</span><span class="br0">&#40;</span><span class="nu0">15</span><span class="br0">&#41;</span>, Guid<span class="sy0">.</span><span class="me1">NewGuid</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">.</span><span class="me1">ToString</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp; &nbsp; <span class="kw1">catch</span> <span class="br0">&#40;</span>StorageException exc<span class="br0">&#41;</span>
&nbsp; &nbsp; <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; statusCode <span class="sy0">=</span> exc<span class="sy0">.</span><span class="me1">RequestInformation</span><span class="sy0">.</span><span class="me1">HttpStatusCode</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; status <span class="sy0">=</span> exc<span class="sy0">.</span><span class="me1">RequestInformation</span><span class="sy0">.</span><span class="me1">HttpStatusMessage</span><span class="sy0">;</span>
&nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp;
&nbsp; &nbsp; Assert<span class="sy0">.</span><span class="me1">AreEqual</span><span class="br0">&#40;</span>ErrorCode_NotFound, statusCode<span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; Assert<span class="sy0">.</span><span class="me1">AreEqual</span><span class="br0">&#40;</span>ErrorStatus_ContainerNotFound, status<span class="br0">&#41;</span><span class="sy0">;</span>
<span class="br0">&#125;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">/// &lt;summary&gt;
/// Emulator: Returns 404 Container Not Found (tested with 3.3 and other versions)
/// Azure API: Returns 404 Blob Not Found (tested with 3.3 and other versions)
/// &lt;/summary&gt;
[Test]
public void AcquireLease_NonExistentContainer_ReturnsContainerNotFoundError()
{
    var blobClient = _account.CreateCloudBlobClient();
    var containerReference = blobClient.GetContainerReference("nonexistent-container");

    int statusCode = -1;
    string status = "not defined";
    try
    {
        containerReference.AcquireLease(TimeSpan.FromSeconds(15), Guid.NewGuid().ToString());
    }
    catch (StorageException exc)
    {
        statusCode = exc.RequestInformation.HttpStatusCode;
        status = exc.RequestInformation.HttpStatusMessage;
    }

    Assert.AreEqual(ErrorCode_NotFound, statusCode);
    Assert.AreEqual(ErrorStatus_ContainerNotFound, status);
}</pre></div></div>

<p><i>(There are also examples of raw HTTP implementations in that same test file to verify it is not an SDK error, which is also why we&#8217;ll look at the response at the network level using fiddler).</i></p>
<p>On the local emulator, this will return the following details (fiddler):</p>
<p><a href="/wp-content/uploads/2015/11/EmulatorFiddler.png"><img src="/wp-content/uploads/2015/11/EmulatorFiddler.png" alt="LeaseContainer - local Emulator response (Fiddler)" width="322" height="190" class="aligncenter size-full wp-image-4253" srcset="/wp-content/uploads/2015/11/EmulatorFiddler.png 322w, /wp-content/uploads/2015/11/EmulatorFiddler-300x177.png 300w" sizes="(max-width: 322px) 100vw, 322px" /></a></p>
<p>Against a production API, it returns the following details (fiddler):</p>
<p><a href="/wp-content/uploads/2015/11/LiveAzureFiddler.png"><img src="/wp-content/uploads/2015/11/LiveAzureFiddler.png" alt="LeaseContainer - Live Azure Response (Fiddler)" width="342" height="190" class="aligncenter size-full wp-image-4254" srcset="/wp-content/uploads/2015/11/LiveAzureFiddler.png 342w, /wp-content/uploads/2015/11/LiveAzureFiddler-300x166.png 300w" sizes="(max-width: 342px) 100vw, 342px" /></a></p>
<p>In this case, the emulator is correct, but the production Storage API returns the wrong error.</p>
<p>I tested this against multiple versions of the API, locally and in the cloud, and got the same results: the production Storage API returns the wrong error code for LeaseContainer operations.</p>
]]></content>
			<link rel="replies" type="text/html" href="/index.php/enterprisedev/cloud/azure/real-world-azure-lease-container-bug-in-azure-storage-api/#comments" thr:count="0"/>
		<link rel="replies" type="application/atom+xml" href="/index.php/enterprisedev/cloud/azure/real-world-azure-lease-container-bug-in-azure-storage-api/feed/atom/" thr:count="0"/>
		<thr:total>0</thr:total>
		</entry>
		<entry>
		<author>
			<name>Eli Weinstock-Herman (tarwn)</name>
					</author>
		<title type="html"><![CDATA[Automated Deployment to Azure Hosted Services]]></title>
		<link rel="alternate" type="text/html" href="/index.php/enterprisedev/cloud/azure/automated-deployment-to-azure-hosted-services/" />
		<id>/?p=2644</id>
		<updated>2014-05-27T18:53:53Z</updated>
		<published>2014-05-27T18:50:21Z</published>
		<category scheme="/" term="Azure" /><category scheme="/" term="automation" /><category scheme="/" term="azure" /><category scheme="/" term="deployment" /><category scheme="/" term="powershell" />		<summary type="html"><![CDATA[Azure Hosted Services offers several really awesome features over using physical servers or standard VM infrastructure. Two of these are the staged deployment model and management SDK, which includes a powershell module. Using these two features, we are going to build a deployment script that deploys a new set of services (servers) in Azure, using [&#8230;]]]></summary>
		<content type="html" xml:base="/index.php/enterprisedev/cloud/azure/automated-deployment-to-azure-hosted-services/"><![CDATA[<p>Azure Hosted Services offers several really awesome features over using physical servers or standard VM infrastructure. Two of these are the staged deployment model and management SDK, which includes a powershell module. Using these two features, we are going to build a deployment script that deploys a new set of services (servers) in Azure, using a Virtual IP swap to replace the existing production instances only after the new deployment is fully running. </p>
<p>The goal of this post is to build a powershell script that will:</p>
<ul>
<li>Upload a compiled Package to Azure Storage</li>
<li>Create a new Staging deployment</li>
<li>Wait for all of the instances of the new deployment to be running</li>
<li>Promote the new deployment to Production</li>
<li>Stop the instances of the old production deployment and keep them handy in the Staging slot</li>
</ul>
<p>The sample project and script are available on github: <a href="https://github.com/tarwn/AzureHostedServiceDeploymentSample" title="tarwn/AzureHostedServiceDeploymentSample on github">tarwn/AzureHostedServiceDeploymentSample on github</a></p>
<p>This script is not intended to be production ready. I have spent no time at all refactoring into readily re-usable methods and do not use it in a production environment myself. It will show you how to use the individual methods and give you the pieces you need to build one that fits your processes.</p>
<h2>Initial Steps</h2>
<p>If you would like to build a sample project of your own and follow along, here&#8217;s the steps you will need to perform first:</p>
<ol style="margin-left:3em; line-height: 1.4em">
<li>Create an Azure project in Visual Studio &#8211; Create/attach one or more web or worker roles</li>
<li>Remove the Diagnostics entry in the web.config or add storage settings</li>
<li>In the Project References, select &#8220;Microsoft.Web.Infrastructure&#8221; and set &#8220;Copy Local&#8221; to &#8220;True&#8221;</li>
<li>Create a Hosted Service in the Azure Dashboard</li>
<li>Create a Storage Account in the Azure Dashboard (pick the same region as prior step)</li>
<li>Install the latest Azure SDK + Azure Powershell Module (available in Web Platform Installer)</li>
<li>Download your publish settings from https://windows.azure.com/download/publishprofile.aspx</li>
</ol>
<p>If you know your way around Azure, steps 4-7 are mostly reading <a href="http://xkcd.com/" title="If we are what we eat, what could be better for our brains than a steady diet of intelligent humor? And title tags, you have to love title tags.">xkcd</a> while the installers run.</p>
<h2>Create the Deployment Script</h2>
<p>Now that we have a project and all the prerequisites out of the way, let&#8217;s start building the script. As a reminder, these are the steps we intend to follow:</p>
<ul>
<li>Upload a compiled Package to Azure Storage</li>
<li>Create a new Staging deployment</li>
<li>Wait for all of the instances of the new deployment to be running</li>
<li>Promote the new deployment to Production</li>
<li>Suspend the instances of the old production deployment and keep them handy in the Staging slot</li>
</ul>
<p>Let&#8217;s go!</p>
<h3>Connect to Azure</h3>
<p>The first thing we need to do is import the Powershell module and use the publish settings to set our subscription.</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="powershell"><thead><tr><td colspan="2"  class="head">PowerShell</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
</pre></td><td class="de1"><pre class="de1">Import<span class="sy0">-</span>Module <span class="st0">&quot;C:\Program Files (x86)\Microsoft SDKs\Windows Azure\PowerShell\ServiceManagement\Azure\Azure.psd1&quot;</span>
&nbsp;
Import<span class="sy0">-</span>AzurePublishSettingsFile <span class="re0">$publishSettingsPath</span>
&nbsp;
Set<span class="sy0">-</span>AzureSubscription <span class="re0">$subscriptionName</span> <span class="sy0">-</span>CurrentStorageAccount <span class="re0">$storageAccountName</span>
&nbsp;
Select<span class="sy0">-</span>AzureSubscription <span class="re0">$subscriptionName</span> <span class="sy0">-</span>Current</pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">Import-Module "C:\Program Files (x86)\Microsoft SDKs\Windows Azure\PowerShell\ServiceManagement\Azure\Azure.psd1"

Import-AzurePublishSettingsFile $publishSettingsPath
 
Set-AzureSubscription $subscriptionName -CurrentStorageAccount $storageAccountName

Select-AzureSubscription $subscriptionName -Current</pre></div></div>

<p><i>$publishSettingsPath, $subscriptionName, and $storageAccountName are parameters I have passed into my script</i></p>
<p>We load the Azure module from the Microsoft SDKs folder (this is where it installs from Web PI). We then use the *.publishsettings file to &#8220;log in&#8221; to the Azure subscription, set the storage account we will be using by default, and set this subscription as the default one for our current powershell session.</p>
<div style="background-color: #eeeeee; padding: .5em 1em; margin: .5em .5em 1.5em .5em;">
<a href="http://msdn.microsoft.com/en-us/library/dn722512.aspx" title="Import-AzurePublishSettingsFile on MSDN">Import-AzurePublishSettingsFile</a> basically logs into your Azure account using the supplied publishsettings file, storing a management certificate and a subscription data file. Once we&#8217;re &#8220;logged in&#8221;, we can use the rest of the Azure cmdlets to interact with our Azure resources.</p>
<p><a href="http://msdn.microsoft.com/en-us/library/dn722501.aspx" title="Set-AzureSubscription on MSDN">Set-AzureSubscription</a> sets the &#8220;current&#8221; storage account for the subscription, basically defining a default so we don&#8217;t have to specify it throughout the script. Another option would be to use <a href="http://msdn.microsoft.com/en-us/library/dn495246.aspx" title="New-AzureStorageContext on MSDN">New-AzureStorageContext</a> to create context for the Storage Account and pass this to the calls that interact with Storage.</p>
<p><a href="http://msdn.microsoft.com/en-us/library/dn722499.aspx" title="Select-AzureSubscription">Select-AzureSubscription</a> does exactly what you would expect, it updates the subscription data in our Powershell context. By specifying -Current, we only update the subscription for our current session.
</div>
<h3>Upload a compiled Package to Azure Storage</h3>
<p>Now that we have access to Azure, we can move on to upload the package. This package can be generated from Visual Studio by right clicking on the Cloud Project and choosing &#8220;Package&#8221;. In an automated process, we can use MSBuild to create this package before calling this script to upload and deploy it.</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="powershell"><thead><tr><td colspan="2"  class="head">PowerShell</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
</pre></td><td class="de1"><pre class="de1"><span class="re0">$container</span> <span class="sy0">=</span> Get<span class="sy0">-</span>AzureStorageContainer <span class="kw5">-Name</span> <span class="re0">$containerName</span> <span class="kw5">-ErrorAction</span> SilentlyContinue
&nbsp;
<span class="kw3">if</span><span class="br0">&#40;</span><span class="sy0">!</span><span class="re0">$container</span><span class="br0">&#41;</span><span class="br0">&#123;</span>
&nbsp; &nbsp; New<span class="sy0">-</span>AzureStorageContainer <span class="kw5">-Name</span> <span class="re0">$containerName</span>
<span class="br0">&#125;</span>
&nbsp;
Set<span class="sy0">-</span>AzureStorageBlobContent <span class="kw4">-File</span> <span class="re0">$packagePath</span> <span class="kw5">-Container</span> <span class="re0">$containerName</span> `
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="sy0">-</span>Blob <span class="re0">$fullTargetPackageName</span> <span class="kw5">-Force</span>
&nbsp;
<span class="re0">$blobInfo</span> <span class="sy0">=</span> Get<span class="sy0">-</span>AzureStorageBlob &nbsp;<span class="kw5">-Container</span> <span class="re0">$containerName</span> <span class="sy0">-</span>blob <span class="re0">$fullTargetPackageName</span>
&nbsp;
<span class="re0">$packageUri</span> <span class="sy0">=</span> <span class="re0">$blobInfo</span>.ICloudBlob.Uri</pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">$container = Get-AzureStorageContainer -Name $containerName -ErrorAction SilentlyContinue

if(!$container){
    New-AzureStorageContainer -Name $containerName
}

Set-AzureStorageBlobContent -File $packagePath -Container $containerName `
                            -Blob $fullTargetPackageName -Force

$blobInfo = Get-AzureStorageBlob  -Container $containerName -blob $fullTargetPackageName

$packageUri = $blobInfo.ICloudBlob.Uri</pre></div></div>

<p><i>$packagePath and $containerName are parameters passed to the script, $fullTargetPackageName is generated with a timestamp.</i></p>
<p>First we create the container if it doesn&#8217;t already exist, then we upload the package (without prompting), and once that is complete we capture the blob information and extract the URL for later use in the deployment.</p>
<div style="background-color: #eeeeee; padding: .5em 1em; margin: .5em .5em 1.5em .5em;">
<a href="http://msdn.microsoft.com/en-us/library/dn495272.aspx" title="Get-AzureStorageContainer on MSDN">Get-AzureStorageContainer</a> attempts to retrieve a container with the given name. In this case I&#8217;ve used the ErrorAction of SilentlyContinue so that if it doesn&#8217;t exist I can create it.</p>
<p><a href="http://msdn.microsoft.com/en-us/library/dn495291.aspx" title="New-AzureStorageContainer on MSDN">New-AzureStorageContainer</a> creates a container with the given name. Since I haven&#8217;t specified permissions, the container will be created with the most restrictive rights.</p>
<p><a href="http://msdn.microsoft.com/en-us/library/dn495279.aspx" title="Set-AzureStorageBlobContent on MSDN">Set-AzureStorageBlobContent</a> uploads the contents of a file specified by -File to the given -Container value with a final name specified by the -Blob property. The -Force overrides any questions the command might have, like &#8220;are you sure you want to do that&#8221;.</p>
<p><a href="http://msdn.microsoft.com/en-us/library/dn495260.aspx" title="Get-AzureStorageBlob on MSDN">Get-AzureStorageBlob</a> retrieves the information about a given Blob, allowing us to extract the Uri property for later use.
</div>
<h3>Create a new Staging Deployment</h3>
<p>Once we have the package uploaded to blob storage, we are ready to create the new Staging deployment.  </p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="powershell"><thead><tr><td colspan="2"  class="head">PowerShell</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
</pre></td><td class="de1"><pre class="de1"><span class="re0">$deployment</span> <span class="sy0">=</span> Get<span class="sy0">-</span>AzureDeployment <span class="sy0">-</span>ServiceName <span class="re0">$serviceName</span> <span class="sy0">-</span>Slot Staging `
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw5">-ErrorAction</span> SilentlyContinue 
&nbsp;
<span class="kw3">if</span><span class="br0">&#40;</span><span class="re0">$deployment</span>.name <span class="kw4">-ne</span> <span class="re0">$null</span><span class="br0">&#41;</span><span class="br0">&#123;</span>
&nbsp; &nbsp; Remove<span class="sy0">-</span>AzureDeployment <span class="sy0">-</span>ServiceName <span class="re0">$serviceName</span> <span class="sy0">-</span>Slot Staging <span class="kw5">-Force</span>
<span class="br0">&#125;</span>
&nbsp;
New<span class="sy0">-</span>AzureDeployment <span class="sy0">-</span>ServiceName <span class="re0">$serviceName</span> <span class="sy0">-</span>Slot Staging <span class="sy0">-</span>Package <span class="re0">$packageUri</span> `
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="sy0">-</span>Configuration <span class="re0">$configPath</span> <span class="kw5">-Name</span> <span class="re0">$fullTargetDeploymentName</span> `
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="sy0">-</span>TreatWarningsAsError</pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">$deployment = Get-AzureDeployment -ServiceName $serviceName -Slot Staging `
                                  -ErrorAction SilentlyContinue 

if($deployment.name -ne $null){
    Remove-AzureDeployment -ServiceName $serviceName -Slot Staging -Force
}

New-AzureDeployment -ServiceName $serviceName -Slot Staging -Package $packageUri `
                    -Configuration $configPath -Name $fullTargetDeploymentName `
                    -TreatWarningsAsError</pre></div></div>

<p><i>The $servicename, $fulltargetDeploymentName, and $configPath are assumed to have been provided, while the $packageUri was defined in the previous step</i></p>
<p>Before we can create the new deployment, we check to see if there is already a deployment present in the Staging slot and delete it. We then create the new deployment, using the package we just uploaded and a local configuration (*.cscfg) file.</p>
<div style="background-color: #eeeeee; padding: .5em 1em; margin: .5em .5em 1.5em .5em;">
<a href="http://msdn.microsoft.com/en-us/library/dn495146.aspx" title="Get-AzureDeployment on MSDN">Get-AzureDeployment</a> retrieves details on the current deployment in the specified slot. I&#8217;ve used ErrorAction SilentlyContinue here because I am only making this call to determine if something is already there and don&#8217;t want to exit out if the slot turns out to be empty.</p>
<p><a href="http://msdn.microsoft.com/en-us/library/dn495296.aspx" title="Remove-AzureDeployment on MSDN">Remove-AzureDeployment</a> removes the deployment we have detected in the Staging slot, using -Force to again suppress any interactive questions the command might have.</p>
<p><a href="http://msdn.microsoft.com/en-us/library/dn495143.aspx" title="New-AzureDeployment on MSDN">New-AzureDeployment</a> creates a new deployment in the specified slot, using the supplied package URI and the configuration file path. I opted to treat warnings as errors because I&#8217;d rather clean up warnings immediately. Unfortunately this parameter does not support URLs. By default the deployment will be started, though there is a -DoNotStart parameter if you do not want this behavior.
</div>
<h3>Wait for all of the instances&#8230;</h3>
<p>The new deployment has been created and told to start, but it takes time for the individual instances to be provisioned and to go through their start-up sequence. </p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="powershell"><thead><tr><td colspan="2"  class="head">PowerShell</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
</pre></td><td class="de1"><pre class="de1"><span class="re0">$statusReady</span> <span class="sy0">=</span> <span class="st0">&quot;ReadyRole&quot;</span>
<span class="re0">$statusStopped</span> <span class="sy0">=</span> <span class="st0">&quot;StoppedVM&quot;</span>
&nbsp;
<span class="kw3">function</span> Get<span class="sy0">-</span>AllInstancesAreStatus<span class="br0">&#40;</span><span class="re0">$instances</span><span class="sy0">,</span> <span class="re0">$targetStatus</span><span class="br0">&#41;</span><span class="br0">&#123;</span>
&nbsp; &nbsp; <span class="kw3">foreach</span> <span class="br0">&#40;</span><span class="re0">$instance</span> <span class="kw3">in</span> <span class="re0">$instances</span><span class="br0">&#41;</span>
&nbsp; &nbsp; <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw3">if</span> <span class="br0">&#40;</span><span class="re0">$instance</span>.InstanceStatus <span class="kw4">-ne</span> <span class="re0">$targetStatus</span><span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw3">return</span> <span class="re0">$false</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp; &nbsp; <span class="kw3">return</span> <span class="re0">$true</span>
<span class="br0">&#125;</span>
&nbsp;
<span class="co1"># ... ... ...</span>
&nbsp;
<span class="re0">$deployment</span> <span class="sy0">=</span> Get<span class="sy0">-</span>AzureDeployment <span class="sy0">-</span>ServiceName <span class="re0">$serviceName</span> <span class="sy0">-</span>Slot Staging
&nbsp;
<span class="re0">$waitTime</span> <span class="sy0">=</span> <span class="br0">&#91;</span>System.Diagnostics.Stopwatch<span class="br0">&#93;</span>::StartNew<span class="br0">&#40;</span><span class="br0">&#41;</span>
<span class="kw3">while</span> <span class="br0">&#40;</span><span class="br0">&#40;</span>Get<span class="sy0">-</span>AllInstancesAreStatus <span class="re0">$deployment</span>.RoleInstanceList <span class="re0">$statusReady</span><span class="br0">&#41;</span> <span class="kw4">-eq</span> <span class="re0">$false</span><span class="br0">&#41;</span>
<span class="br0">&#123;</span>
&nbsp; &nbsp; <span class="kw3">if</span><span class="br0">&#40;</span><span class="re0">$waitTime</span>.Elapsed.TotalSeconds <span class="kw4">-gt</span> <span class="re0">$instancePollLimit</span><span class="br0">&#41;</span><span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw3">Throw</span> <span class="st0">&quot;$instancePollLimit seconds elapsed without all the instances reaching 'ReadyRun'&quot;</span>
&nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp;
&nbsp; &nbsp; <span class="kw1">Start-Sleep</span> <span class="kw5">-Seconds</span> <span class="re0">$instancePollRate</span>
&nbsp;
&nbsp; &nbsp; <span class="re0">$deployment</span> <span class="sy0">=</span> Get<span class="sy0">-</span>AzureDeployment <span class="sy0">-</span>ServiceName <span class="re0">$serviceName</span> <span class="sy0">-</span>Slot Staging
<span class="br0">&#125;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">$statusReady = "ReadyRole"
$statusStopped = "StoppedVM"

function Get-AllInstancesAreStatus($instances, $targetStatus){
    foreach ($instance in $instances)
    {
        if ($instance.InstanceStatus -ne $targetStatus)
        {
            return $false
        }
    }
    return $true
}

# ... ... ...

$deployment = Get-AzureDeployment -ServiceName $serviceName -Slot Staging

$waitTime = [System.Diagnostics.Stopwatch]::StartNew()
while ((Get-AllInstancesAreStatus $deployment.RoleInstanceList $statusReady) -eq $false)
{
    if($waitTime.Elapsed.TotalSeconds -gt $instancePollLimit){
        Throw "$instancePollLimit seconds elapsed without all the instances reaching 'ReadyRun'"
    }

    Start-Sleep -Seconds $instancePollRate

    $deployment = Get-AzureDeployment -ServiceName $serviceName -Slot Staging
}</pre></div></div>

<p><i>$serviceName is supplied as a script parameter.</i></p>
<p>While there are any instances that are not in &#8216;ReadyRun&#8217; status, we sleep for $instancepollRate seconds and continue to check again. If more than $instancePollLimit seconds go by while waiting, we&#8217;ll throw an error that will cause our script to exit.</p>
<p><b>This poll limit is necessary.</b> In the real world of Azure, you can have azure instances that do not boot for long periods of time. Additional logic has been added in Azure that is supposed to detect VMs not booting and replace them, but no one writes perfect code and I have experienced deployments hung for hours or more due to non-booting instances. We also can break our own code, resulting in rapidly re-booting instances that we would not want to deploy to production.</p>
<div style="background-color: #eeeeee; padding: .5em 1em; margin: .5em .5em 1.5em .5em;">
<a href="http://msdn.microsoft.com/en-us/library/dn495146.aspx" title="Get-AzureDeployment on MSDN">Get-AzureDeployment</a> gets the azure deployment details, including the list of instances with their names, current statuses, size, etc.
</div>
<h3>Promote the new deployment to Production, Suspend the old one</h3>
<p>Once the staging deployment is up and running, we can promote it to the Production slot.</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="powershell"><thead><tr><td colspan="2"  class="head">PowerShell</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
</pre></td><td class="de1"><pre class="de1">Move<span class="sy0">-</span>AzureDeployment <span class="sy0">-</span>ServiceName <span class="re0">$serviceName</span>
&nbsp;
<span class="re0">$deployment</span> <span class="sy0">=</span> Get<span class="sy0">-</span>AzureDeployment <span class="sy0">-</span>ServiceName <span class="re0">$serviceName</span> <span class="sy0">-</span>Slot Staging `
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw5">-ErrorAction</span> SilentlyContinue
&nbsp;
<span class="kw3">if</span><span class="br0">&#40;</span><span class="re0">$deployment</span>.DeploymentName <span class="kw4">-ne</span> <span class="re0">$null</span><span class="br0">&#41;</span><span class="br0">&#123;</span>
&nbsp; &nbsp; Set<span class="sy0">-</span>AzureDeployment <span class="kw5">-Status</span> <span class="sy0">-</span>ServiceName <span class="re0">$serviceName</span> <span class="sy0">-</span>Slot Staging `
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="sy0">-</span>NewStatus Suspended
<span class="br0">&#125;</span>
&nbsp;
Remove<span class="sy0">-</span>AzureAccount <span class="kw5">-Name</span> <span class="re0">$subscriptionName</span> <span class="kw5">-Force</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">Move-AzureDeployment -ServiceName $serviceName

$deployment = Get-AzureDeployment -ServiceName $serviceName -Slot Staging `
                                  -ErrorAction SilentlyContinue

if($deployment.DeploymentName -ne $null){
    Set-AzureDeployment -Status -ServiceName $serviceName -Slot Staging `
                        -NewStatus Suspended
}

Remove-AzureAccount -Name $subscriptionName -Force</pre></div></div>

<p><i>$serviceName is a parameter passed to the script</i></p>
<p>Performing the VIP swap is a simple command and the Powershell cmdlet turns that asynchronous method into a synchronous call for us, like so many of the others. Once the swap is complete, if we have a deployment in the Staging slot (the old Production one), we go ahead and tell it to suspend, but don&#8217;t wait for the individual instances to stop before exiting.</p>
<div style="background-color: #eeeeee; padding: .5em 1em; margin: .5em .5em 1.5em .5em;">
<a href="http://msdn.microsoft.com/en-us/library/dn495282.aspx" title="Move-AzureDeployment">Move-AzureDeployment</a> performs a VIP swap to swap the Staging and Production deployments.</p>
<p><a href="http://msdn.microsoft.com/en-us/library/dn495146.aspx" title="Get-AzureDeployment on MSDN">Get-AzureDeployment</a> gets the azure deployment details, including the list of instances with their names, current statuses, size, etc.</p>
<p><a href="http://msdn.microsoft.com/en-us/library/dn495140.aspx" title="Set-AzureDeployment">Set-AzureDeployment</a> with the -Status parameter is used to change the status of a given deployment, in this case Suspending the deployment in the Staging slot.</p>
<p><a href="http://msdn.microsoft.com/en-us/library/dn722529.aspx" title="Remove-AzureAccount on MSDN">Remove-AzureAccount</a> is used to remove the Azure subscription data from the Powershell session, basically the &#8220;logout&#8221; equivalent to Import-AzurePublishSettingsFile&#8217;s &#8220;login&#8221;
</div>
<h2>And we&#8217;re deployed&#8230;</h2>
<p>There is a full script available in the github repository here: <a href="https://github.com/tarwn/AzureHostedServiceDeploymentSample/blob/master/scripts/deployHostedService.ps1" title="/scripts/deployHostedService.ps1">/scripts/deployHostedService.ps1</a>. It is not clean and pretty, but it does have more output and error handling than the snippets above. Among other things, it does not clean out all those packages it uploads to blob storage and it most definitely should not be blindly pasted and used for your production environment.</p>
<p>While this may not be a production-ready script, it&#8217;s not far off (and I&#8217;ve used worse). The few cmdlets above should start to show the pattern that Microsoft used with this Powershell library. There are plenty of additional cmdlets to interact with storage services, VMs, affinity groups, HDInsight, Media Services&#8230;you name it, it&#8217;s probably in there.  </p>
<p>Writing this post, I am reminded how magical this all is. That sample project was only configured to ask for a single server, but I could just as easily have asked for 4 16-core servers and then added in additional web or worker roles, each with their own servers. And I could have done all of that without changing anything at all about this script and I would have had tons of servers deployed, load balanced, and ready to go with just a minor blip as I swapped them into production. I can remember projects with multi-hour manual deployment processes (and month or more system provisioning times), and we just replaced them with a one page script.</p>
<p>The best part is that, unlike some Microsoft frameworks/packages, this magic doesn&#8217;t just make a great demo, it also works in real production environments. </p>
]]></content>
			<link rel="replies" type="text/html" href="/index.php/enterprisedev/cloud/azure/automated-deployment-to-azure-hosted-services/#comments" thr:count="0"/>
		<link rel="replies" type="application/atom+xml" href="/index.php/enterprisedev/cloud/azure/automated-deployment-to-azure-hosted-services/feed/atom/" thr:count="0"/>
		<thr:total>0</thr:total>
		</entry>
	</feed>
