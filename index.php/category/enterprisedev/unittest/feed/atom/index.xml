<?xml version="1.0" encoding="UTF-8"?><feed
  xmlns="http://www.w3.org/2005/Atom"
  xmlns:thr="http://purl.org/syndication/thread/1.0"
  xml:lang="en-US"
  xml:base="/wp-atom.php"
   >
	<title type="text">Unit Testing &#8211; LessthanDot</title>
	<subtitle type="text">A Technical Community for IT Professionals</subtitle>

	<updated>2019-03-09T12:50:36Z</updated>

	<link rel="alternate" type="text/html" href="/" />
	<id>/index.php/feed/atom/</id>
	<link rel="self" type="application/atom+xml" href="/index.php/category/enterprisedev/unittest/feed/atom/" />

	<generator uri="https://wordpress.org/" version="4.6.1">WordPress</generator>
	<entry>
		<author>
			<name>Eli Weinstock-Herman (tarwn)</name>
					</author>
		<title type="html"><![CDATA[Continuous Javascript Testing with Karma]]></title>
		<link rel="alternate" type="text/html" href="/index.php/webdev/uidevelopment/javascript/continuous-javascript-testing-with-karma/" />
		<id>/?p=2483</id>
		<updated>2014-04-03T15:27:39Z</updated>
		<published>2014-04-03T15:27:39Z</published>
		<category scheme="/" term="Javascript" /><category scheme="/" term="Unit Testing" /><category scheme="/" term="jasmine" /><category scheme="/" term="javascript" /><category scheme="/" term="karma" /><category scheme="/" term="requirejs" />		<summary type="html"><![CDATA[I use a continuous testing tool named NCrunch for all of my .Net code. In fact, NCrunch has spoiled me so much that manually running tests is bordering on painful. I&#8217;ve gotten used to doing absolutely nothing and still having the latest build results, test results, code coverage, highlighted execution paths for failed tests, and [&#8230;]]]></summary>
		<content type="html" xml:base="/index.php/webdev/uidevelopment/javascript/continuous-javascript-testing-with-karma/"><![CDATA[<p>I use a continuous testing tool named <a href="http://www.ncrunch.net/">NCrunch</a> for all of my .Net code. In fact,  <a href="/index.php/enterprisedev/unittest/reducing-code-build-test-friction/">NCrunch has spoiled me</a> so much that manually running tests is bordering on painful. I&#8217;ve gotten used to doing absolutely nothing and still having the latest build results, test results, code coverage, highlighted execution paths for failed tests, and little hover notices on each line that passed an exception. Make a change, magic happens. All coding should work like that.</p>
<p>The AngularJS team has built a continuous javascript testrunner named <a href="http://karma-runner.github.io/">karma</a>, so of course I&#8217;m going to give it a try. </p>
<p>At the time of this post, the current version is 0.12 and I will be using Jasmine 2.0 (<a href="/index.php/webdev/uidevelopment/javascript/testing-asynchronous-javascript-w-jasmine/" title="Testing Asynchronous Javascript w/ Jasmine 2.0.0">woo, Async!</a>), RequireJS (also a <a href="/index.php/webdev/uidevelopment/javascript/unit-testing-with-jasmine-2-0-and-require-js/" title="Unit Testing with Jasmine 2.0 and Require.JS">recent topic</a>), and <a href="https://github.com/iammerrick/Squire.js/" title="iammerrick/Squire.js on github">Squire.js</a> (for injecting mocks). The sample project I&#8217;m using for demos is just something that was handy that already had some tests.</p>
<h1>Setting up Karma</h1>
<p>Setting up karma is pretty straightforward. The karma site has clear information already on how to <a href="http://karma-runner.github.io/0.12/intro/installation.html" title="Karma - Installation">install the package</a> and <a href="http://karma-runner.github.io/0.10/intro/configuration.html" title="Karma - Configuration">set up the configuration</a>, so I&#8217;m not going to go into the details on that.</p>
<p>One minor variance is that I chose to install karma local to my project rather than globally, so I&#8217;ll have to run the tools from the node_modules subdirectory.</p>
<p>I created a package.json file for my project:</p>
<p><b>package.json: </b> <a href="https://github.com/tarwn/townthing/blob/master/package.json">townthing/package.json</a></p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="javascript"><thead><tr><td colspan="2"  class="head">Javascript</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
</pre></td><td class="de1"><pre class="de1"><span class="br0">&#123;</span>
&nbsp; &nbsp; <span class="st0">&quot;name&quot;</span><span class="sy0">:</span> <span class="st0">&quot;townthing&quot;</span><span class="sy0">,</span>
&nbsp; &nbsp; <span class="st0">&quot;version&quot;</span><span class="sy0">:</span> <span class="st0">&quot;0.1.0&quot;</span><span class="sy0">,</span>
&nbsp; &nbsp; <span class="st0">&quot;description&quot;</span><span class="sy0">:</span> <span class="st0">&quot;sample project I'm playing with&quot;</span><span class="sy0">,</span>
&nbsp; &nbsp; <span class="st0">&quot;repository&quot;</span><span class="sy0">:</span> <span class="st0">&quot;https://github.com/tarwn/townthing&quot;</span><span class="sy0">,</span>
&nbsp;
&nbsp; &nbsp; <span class="st0">&quot;devDependencies&quot;</span><span class="sy0">:</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="st0">&quot;karma&quot;</span><span class="sy0">:</span> <span class="st0">&quot;~0.11&quot;</span><span class="sy0">,</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="st0">&quot;karma-jasmine&quot;</span><span class="sy0">:</span> <span class="st0">&quot;~0.2&quot;</span><span class="sy0">,</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="st0">&quot;karma-phantomjs-launcher&quot;</span><span class="sy0">:</span> <span class="st0">&quot;~0.1&quot;</span><span class="sy0">,</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="st0">&quot;karma-chrome-launcher&quot;</span><span class="sy0">:</span> <span class="st0">&quot;~0.1&quot;</span>
&nbsp; &nbsp; <span class="br0">&#125;</span>
<span class="br0">&#125;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">{
	"name": "townthing",
	"version": "0.1.0",
	"description": "sample project I'm playing with",
	"repository": "https://github.com/tarwn/townthing",

	"devDependencies": {
		"karma": "~0.11",
		"karma-jasmine": "~0.2",
		"karma-phantomjs-launcher": "~0.1",
		"karma-chrome-launcher": "~0.1"
	}
}</pre></div></div>

<div style="background-color: #eeeeee; padding: .5em;">
<b>Important Note:</b> Be careful with your versions. I&#8217;ve found out the hard way that karma keeps their dependencies wide open &#8220;*&#8221; until they are ready to move versions, then they lock them down to something that may not actually be the latest version. Karma 0.10 worked fine with karma-jasmine 0.2 until they released 0.10.10 which locked in a requirement for karma-jasmine ~0.1. More recently the karma-phantomjs-launcher has revved to 1.3, which somehow broke a perfectly working 0.12 karma against 1.2 despite there being no actual code changes (I suspect a versioning side-effect mixed with their *-version acceptance).
</div>
<p>And then go through the steps to create my karma configuration:<br />
<b>karma.conf.js: </b> <a href="https://github.com/tarwn/townthing/blob/master/karma.conf.js">townthing/karma.conf.js</a></p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="javascript"><thead><tr><td colspan="2"  class="head">Javascript</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
</pre></td><td class="de1"><pre class="de1">module.<span class="me1">exports</span> <span class="sy0">=</span> <span class="kw1">function</span><span class="br0">&#40;</span>config<span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; config.<span class="kw1">set</span><span class="br0">&#40;</span><span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; basePath<span class="sy0">:</span> <span class="st0">'town/js'</span><span class="sy0">,</span>
&nbsp; &nbsp; &nbsp; &nbsp; frameworks<span class="sy0">:</span> <span class="br0">&#91;</span><span class="st0">'jasmine'</span><span class="sy0">,</span> <span class="st0">'requirejs'</span><span class="br0">&#93;</span><span class="sy0">,</span>
&nbsp; &nbsp; &nbsp; &nbsp; files<span class="sy0">:</span> <span class="br0">&#91;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="st0">'test/test-main.js'</span><span class="sy0">,</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#123;</span>pattern<span class="sy0">:</span> <span class="st0">'**/*.js'</span><span class="sy0">,</span> included<span class="sy0">:</span> <span class="kw2">false</span><span class="br0">&#125;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#93;</span><span class="sy0">,</span>
&nbsp; &nbsp; &nbsp; &nbsp; exclude<span class="sy0">:</span> <span class="br0">&#91;</span> <span class="st0">'**/main.js'</span> <span class="br0">&#93;</span><span class="sy0">,</span>
&nbsp; &nbsp; &nbsp; &nbsp; reporters<span class="sy0">:</span> <span class="br0">&#91;</span><span class="st0">'dots'</span><span class="br0">&#93;</span><span class="sy0">,</span>
&nbsp; &nbsp; &nbsp; &nbsp; port<span class="sy0">:</span> <span class="nu0">9876</span><span class="sy0">,</span>
&nbsp; &nbsp; &nbsp; &nbsp; colors<span class="sy0">:</span> <span class="kw2">true</span><span class="sy0">,</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="co1">// possible values: config.LOG_DISABLE || config.LOG_ERROR || config.LOG_WARN || config.LOG_INFO || config.LOG_DEBUG</span>
&nbsp; &nbsp; &nbsp; &nbsp; logLevel<span class="sy0">:</span> config.<span class="me1">LOG_DEBUG</span><span class="sy0">,</span>
&nbsp; &nbsp; &nbsp; &nbsp; autoWatch<span class="sy0">:</span> <span class="kw2">true</span><span class="sy0">,</span>
&nbsp; &nbsp; &nbsp; &nbsp; browsers<span class="sy0">:</span> <span class="br0">&#91;</span><span class="st0">'PhantomJS'</span><span class="br0">&#93;</span><span class="sy0">,</span>
&nbsp; &nbsp; &nbsp; &nbsp; captureTimeout<span class="sy0">:</span> <span class="nu0">60000</span><span class="sy0">,</span>
&nbsp; &nbsp; &nbsp; &nbsp; singleRun<span class="sy0">:</span> <span class="kw2">false</span>
&nbsp; &nbsp; <span class="br0">&#125;</span><span class="br0">&#41;</span><span class="sy0">;</span>
<span class="br0">&#125;</span><span class="sy0">;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">module.exports = function(config) {
	config.set({
		basePath: 'town/js',
		frameworks: ['jasmine', 'requirejs'],
		files: [
		  'test/test-main.js',
		  {pattern: '**/*.js', included: false}
		],
		exclude: [ '**/main.js' ],
		reporters: ['dots'],
		port: 9876,
		colors: true,
		// possible values: config.LOG_DISABLE || config.LOG_ERROR || config.LOG_WARN || config.LOG_INFO || config.LOG_DEBUG
		logLevel: config.LOG_DEBUG,
		autoWatch: true,
		browsers: ['PhantomJS'],
		captureTimeout: 60000,
		singleRun: false
	});
};</pre></div></div>

<p>I already had a set of 68 specs configured to run from my SpecRunner file, with my Require.js configuration specified inline. Before I co-opted this project as a blog example, the tests were specified in script tags, but I have moved them to a require() statement and used the custom boot script created for my <a href="/index.php/webdev/uidevelopment/javascript/unit-testing-with-jasmine-2-0-and-require-js/">Jasmine 2.0 and RequireJS post</a>.</p>
<p><b>SpecRunner:</b> <a href="https://github.com/tarwn/townthing/blob/54f182bf96ff036a8765f421884d465d890c598c/town/js/test/SpecRunner.html">townthing/js/test/SpecRunner.json</a></p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="html4strict"><thead><tr><td colspan="2"  class="head">HTML</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
</pre></td><td class="de1"><pre class="de1"><span class="sc0">&lt;!DOCTYPE HTML&gt;</span>
<span class="sc2">&lt;<span class="kw2">html</span>&gt;</span>
<span class="sc2">&lt;<span class="kw2">head</span>&gt;</span>
&nbsp; &nbsp; <span class="sc2">&lt;<span class="kw2">meta</span> <span class="kw3">http-equiv</span><span class="sy0">=</span><span class="st0">&quot;Content-Type&quot;</span> <span class="kw3">content</span><span class="sy0">=</span><span class="st0">&quot;text/html; charset=UTF-8&quot;</span>&gt;</span>
&nbsp; &nbsp; <span class="sc2">&lt;<span class="kw2">title</span>&gt;</span>Jasmine Spec Runner v2.0.0<span class="sc2">&lt;<span class="sy0">/</span><span class="kw2">title</span>&gt;</span>
&nbsp;
&nbsp; &nbsp; <span class="sc2">&lt;<span class="kw2">link</span> <span class="kw3">rel</span><span class="sy0">=</span><span class="st0">&quot;shortcut icon&quot;</span> <span class="kw3">type</span><span class="sy0">=</span><span class="st0">&quot;image/png&quot;</span> <span class="kw3">href</span><span class="sy0">=</span><span class="st0">&quot;../lib/jasmine-2.0.0/jasmine_favicon.png&quot;</span>&gt;</span>
&nbsp; &nbsp; <span class="sc2">&lt;<span class="kw2">link</span> <span class="kw3">rel</span><span class="sy0">=</span><span class="st0">&quot;stylesheet&quot;</span> <span class="kw3">type</span><span class="sy0">=</span><span class="st0">&quot;text/css&quot;</span> <span class="kw3">href</span><span class="sy0">=</span><span class="st0">&quot;../lib/jasmine-2.0.0/jasmine.css&quot;</span>&gt;</span>
&nbsp;
&nbsp; &nbsp; <span class="sc2">&lt;<span class="kw2">script</span> <span class="kw3">type</span><span class="sy0">=</span><span class="st0">&quot;text/javascript&quot;</span> <span class="kw3">src</span><span class="sy0">=</span><span class="st0">&quot;../lib/jasmine-2.0.0/jasmine.js&quot;</span>&gt;&lt;<span class="sy0">/</span><span class="kw2">script</span>&gt;</span>
&nbsp; &nbsp; <span class="sc2">&lt;<span class="kw2">script</span> <span class="kw3">type</span><span class="sy0">=</span><span class="st0">&quot;text/javascript&quot;</span> <span class="kw3">src</span><span class="sy0">=</span><span class="st0">&quot;../lib/jasmine-2.0.0/jasmine-html.js&quot;</span>&gt;&lt;<span class="sy0">/</span><span class="kw2">script</span>&gt;</span>
&nbsp; &nbsp; <span class="sc2">&lt;<span class="kw2">script</span> <span class="kw3">type</span><span class="sy0">=</span><span class="st0">&quot;text/javascript&quot;</span> <span class="kw3">src</span><span class="sy0">=</span><span class="st0">&quot;../lib/jasmine-2.0.0/boot-without-onload.js&quot;</span>&gt;&lt;<span class="sy0">/</span><span class="kw2">script</span>&gt;</span>
&nbsp;
&nbsp; &nbsp; <span class="sc2">&lt;<span class="kw2">script</span> <span class="kw3">src</span><span class="sy0">=</span><span class="st0">&quot;../lib/require-2.1.11.js&quot;</span>&gt;&lt;<span class="sy0">/</span><span class="kw2">script</span>&gt;</span>
&nbsp;
&nbsp; &nbsp; <span class="sc2">&lt;<span class="kw2">script</span> <span class="kw3">type</span><span class="sy0">=</span><span class="st0">&quot;text/javascript&quot;</span>&gt;</span>
&nbsp; &nbsp; require.config({
&nbsp; &nbsp; &nbsp; &nbsp; baseUrl: &quot;../src&quot;,
&nbsp; &nbsp; &nbsp; &nbsp; paths: {
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;knockout&quot;: &quot;../lib/knockout-3.0.0&quot;,
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;Squire&quot;: &quot;../lib/Squire&quot;
&nbsp; &nbsp; &nbsp; &nbsp; }
&nbsp; &nbsp; });
&nbsp;
&nbsp; &nbsp; require(['../test/compass.spec', '../test/tile.spec', '../test/tree.spec', '../test/weather.spec'],function(){
&nbsp; &nbsp; &nbsp; &nbsp; window.executeTests();
&nbsp; &nbsp; });
&nbsp; &nbsp; <span class="sc2">&lt;<span class="sy0">/</span><span class="kw2">script</span>&gt;</span>
<span class="sc2">&lt;<span class="sy0">/</span><span class="kw2">head</span>&gt;</span>
<span class="sc2">&lt;<span class="kw2">body</span>&gt;</span>
<span class="sc2">&lt;<span class="sy0">/</span><span class="kw2">body</span>&gt;</span>
<span class="sc2">&lt;<span class="sy0">/</span><span class="kw2">html</span>&gt;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">&lt;!DOCTYPE HTML&gt;
&lt;html&gt;
&lt;head&gt;
	&lt;meta http-equiv="Content-Type" content="text/html; charset=UTF-8"&gt;
	&lt;title&gt;Jasmine Spec Runner v2.0.0&lt;/title&gt;

	&lt;link rel="shortcut icon" type="image/png" href="../lib/jasmine-2.0.0/jasmine_favicon.png"&gt;
	&lt;link rel="stylesheet" type="text/css" href="../lib/jasmine-2.0.0/jasmine.css"&gt;

	&lt;script type="text/javascript" src="../lib/jasmine-2.0.0/jasmine.js"&gt;&lt;/script&gt;
	&lt;script type="text/javascript" src="../lib/jasmine-2.0.0/jasmine-html.js"&gt;&lt;/script&gt;
	&lt;script type="text/javascript" src="../lib/jasmine-2.0.0/boot-without-onload.js"&gt;&lt;/script&gt;

	&lt;script src="../lib/require-2.1.11.js"&gt;&lt;/script&gt;

	&lt;script type="text/javascript"&gt;
	require.config({
		baseUrl: "../src",
		paths: {
			"knockout": "../lib/knockout-3.0.0",
			"Squire": "../lib/Squire"
		}
	});

	require(['../test/compass.spec', '../test/tile.spec', '../test/tree.spec', '../test/weather.spec'],function(){
		window.executeTests();
	});
	&lt;/script&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;/body&gt;
&lt;/html&gt;</pre></div></div>

<p>The folder structure is a little odd, as this was originally just a play project. My test libraries are mixed with the core libraries and my specs and src have a flat structure. Were this a production project, I would also try to find a way to combine this inline config with the one below and generate the list of spec files instead of hand-coding them.</p>
<p>Because I am using RequireJS, I&#8217;ve included that option in my configuration and created a RequireJS configuration based on the one supplied in the <a href="http://karma-runner.github.io/0.10/plus/requirejs.html" title="Karma - RequireJS">RequireJS instructions</a> on the karma site.</p>
<p><b>test-main.js: </b> <a href="">townthing/town/js/test/test-main.js</a></p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="javascript"><thead><tr><td colspan="2"  class="head">Javascript</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
</pre></td><td class="de1"><pre class="de1"><span class="kw1">var</span> tests <span class="sy0">=</span> <span class="br0">&#91;</span><span class="br0">&#93;</span><span class="sy0">;</span>
<span class="kw1">for</span> <span class="br0">&#40;</span><span class="kw1">var</span> file <span class="kw1">in</span> window.__karma__.<span class="me1">files</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; <span class="kw1">if</span> <span class="br0">&#40;</span>window.__karma__.<span class="me1">files</span>.<span class="kw3">hasOwnProperty</span><span class="br0">&#40;</span>file<span class="br0">&#41;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">if</span> <span class="br0">&#40;</span><span class="co2">/spec\.js$/</span>.<span class="me1">test</span><span class="br0">&#40;</span>file<span class="br0">&#41;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; tests.<span class="me1">push</span><span class="br0">&#40;</span>file<span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp; &nbsp; <span class="br0">&#125;</span>
<span class="br0">&#125;</span>
&nbsp;
requirejs.<span class="me1">config</span><span class="br0">&#40;</span><span class="br0">&#123;</span>
&nbsp; &nbsp; <span class="co1">// Karma serves files from '/base'</span>
&nbsp; &nbsp; baseUrl<span class="sy0">:</span> <span class="st0">'/base/src'</span><span class="sy0">,</span>
&nbsp;
&nbsp; &nbsp; paths<span class="sy0">:</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="st0">&quot;knockout&quot;</span><span class="sy0">:</span> <span class="st0">&quot;../lib/knockout-3.0.0&quot;</span><span class="sy0">,</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="st0">&quot;Squire&quot;</span><span class="sy0">:</span> <span class="st0">&quot;../lib/Squire&quot;</span>
&nbsp; &nbsp; <span class="br0">&#125;</span>
<span class="br0">&#125;</span><span class="br0">&#41;</span><span class="sy0">;</span>
require<span class="br0">&#40;</span>tests<span class="sy0">,</span> <span class="kw1">function</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#123;</span>
&nbsp; &nbsp; window.__karma__.<span class="me1">start</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
<span class="br0">&#125;</span><span class="br0">&#41;</span><span class="sy0">;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">var tests = [];
for (var file in window.__karma__.files) {
	if (window.__karma__.files.hasOwnProperty(file)) {
		if (/spec\.js$/.test(file)) {
			tests.push(file);
		}
	}
}

requirejs.config({
    // Karma serves files from '/base'
    baseUrl: '/base/src',

	paths: {
		"knockout": "../lib/knockout-3.0.0",
		"Squire": "../lib/Squire"
	}
});
require(tests, function(){
	window.__karma__.start();
});</pre></div></div>

<p>The biggest difference between my script and the sample one is I am loading the tests and starting karma after the configuration, rather than inside it. I am using Squire to mock several of the RequireJS modules for tests, had I used the configuration to start karma then each time I created a new instal of Squire I would have kicked off conflicting runs when it ran the same configuration.</p>
<p>Running karma locally is then as easy as: <code>node .\node_modules\karma\bin\karma start karma.conf.js</code></p>
<p>It&#8217;s only a few more steps to create a single test-main.js that both the jasmine SpecRunner file and karma can share.</p>
<h1>The Results</h1>
<p>Once I have the configurations set up, my tests run successfully from karma. I have them configured to use PhantomJS, but can also override that by sending in command-line arguments to do a single-run in other browsers (like Chrome) when I need to troubleshoot.</p>
<p><code>node .\node_modules\karma\bin\karma start karma.conf.js --single-run</code></p>
<div id="attachment_2492" style="width: 577px" class="wp-caption aligncenter"><a href="/wp-content/uploads/2014/03/karma.png"><img src="/wp-content/uploads/2014/03/karma.png" alt="Successful Tests w/ Non-Impacting Errors" width="567" class="size-full wp-image-2492" srcset="/wp-content/uploads/2014/03/karma.png 567w, /wp-content/uploads/2014/03/karma-300x113.png 300w" sizes="(max-width: 567px) 100vw, 567px" /></a><p class="wp-caption-text">Successful Tests w/ Non-Impacting Errors</p></div>
<p>I was getting errors about missing timestamps when Squire loads some of the dependencies, but the files are found so I&#8217;m not sure why they are occurring (and they don&#8217;t happen on one of my other projects). I found a similar <a href="https://github.com/princed/karma-chai-plugins/issues/4">issue</a> and <a href="http://stackoverflow.com/questions/20733090/karma-error-there-is-no-timestamp-for">stackoverflow</a> question, so I&#8217;m not the only one with this particular issue. </p>
<p><code>node .\node_modules\karma\bin\karma start karma.conf.js --single-run</code></p>
<div id="attachment_2543" style="width: 815px" class="wp-caption aligncenter"><a href="/wp-content/uploads/2014/04/karma2.png"><img src="/wp-content/uploads/2014/04/karma2.png" alt="Karma Run - Take 2 - (Node hasn&#039;t eaten my blue background in this window)" width="805" height="88" class="size-full wp-image-2543" srcset="/wp-content/uploads/2014/04/karma2.png 805w, /wp-content/uploads/2014/04/karma2-300x32.png 300w" sizes="(max-width: 805px) 100vw, 805px" /></a><p class="wp-caption-text">Karma Run &#8211; Take 2 &#8211; (Node hasn&#8217;t eaten my blue background in this window)</p></div>
<p>I was able to correct the issue from switching my test-main.js require basePath from &#8220;base/src&#8221; to &#8220;/base/src&#8221;, I&#8217;m still digging into why this worked.</p>
<h1>My Thoughts</h1>
<p>NCrunch set the bar high, and while karma runs my tests continuously, I think comparing it NCrunch would be unfair to karma because it just isn&#8217;t in the same league.</p>
<p>Running locally, Karma does not give me that much more value than just refreshing a SpecRunner file in the browser. With the browser I have to change Alt+Tab to the window and F5 refresh, with karma the console output of test results is there, but it doesn&#8217;t have the browser&#8217;s ability to click on an error and see the code in context, see files that didn&#8217;t load correctly, etc. Karma has a plugin infrastructure for other reporters, but the few I&#8217;ve looked at have been focused on providing static files. I briefly looked at an HTML reporter in the hope that it might do some AJAX-y magic, but it simply created HTML output files.</p>
<p>One thing I really like about karma is it&#8217;s ability to easily plug in other browsers and run across one or more simultaneously. In a build server environment, this would mean I could easily run my JS unit tests across a wide set of browsers, collect the results, and then either capture the text output from karma or use a plugin for my build server to integrate in the results.</p>
<p>So overall, I think it makes a great tool for running unit tests the same locally and on the build server and being able to easily do so across a wide range of browsers, but I really don&#8217;t like the choice of using the console as the primary output. I think they overlooked the fact that they already have a browser front-end and a web server that could have been used to provide a richer front-end (potentially one that could be compared to NCrunch) and stil had a slimmer console or other-plugin-of-choice reporting mechanism for those that prefer it or are automating against it.</p>
]]></content>
			<link rel="replies" type="text/html" href="/index.php/webdev/uidevelopment/javascript/continuous-javascript-testing-with-karma/#comments" thr:count="4"/>
		<link rel="replies" type="application/atom+xml" href="/index.php/webdev/uidevelopment/javascript/continuous-javascript-testing-with-karma/feed/atom/" thr:count="4"/>
		<thr:total>4</thr:total>
		</entry>
		<entry>
		<author>
			<name>Eli Weinstock-Herman (tarwn)</name>
					</author>
		<title type="html"><![CDATA[Unit Testing with Jasmine 2.0 and Require.JS]]></title>
		<link rel="alternate" type="text/html" href="/index.php/webdev/uidevelopment/javascript/unit-testing-with-jasmine-2-0-and-require-js/" />
		<id>/?p=2475</id>
		<updated>2014-03-09T18:53:18Z</updated>
		<published>2014-03-04T13:41:12Z</published>
		<category scheme="/" term="Javascript" /><category scheme="/" term="Unit Testing" /><category scheme="/" term="jasmine" /><category scheme="/" term="javascript" /><category scheme="/" term="requirejs" />		<summary type="html"><![CDATA[Jasmine 2.0 has changed how it loads and executes tests, using a boot script now to handle the details. If you try to plug some require() calls into the sample SpecRunner.html page, Jasmine will be done and finished before the require() statement loads the test modules and their dependencies. The problem is that RequireJS loads [&#8230;]]]></summary>
		<content type="html" xml:base="/index.php/webdev/uidevelopment/javascript/unit-testing-with-jasmine-2-0-and-require-js/"><![CDATA[<p>Jasmine 2.0 has changed how it loads and executes tests, using a boot script now to handle the details. If you try to plug some require() calls into the sample SpecRunner.html page, Jasmine will be done and finished before the require() statement loads the test modules and their dependencies.</p>
<p>The problem is that RequireJS loads the dependencies asynchronously, but the standard boot script for Jasmine runs when window.onload is called. So how do we fix it?</p>
<h2>Option 1: Call window.onload Ourselves</h2>
<p>One option to solve this is to simply call window.onload again:</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="html4strict"><thead><tr><td colspan="2"  class="head">HTML</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
</pre></td><td class="de1"><pre class="de1"><span class="sc2">&lt;<span class="kw2">script</span> <span class="kw3">type</span><span class="sy0">=</span><span class="st0">&quot;text/javascript&quot;</span> <span class="kw3">src</span><span class="sy0">=</span><span class="st0">&quot;tests/lib/jasmine-2.0.0/jasmine.js&quot;</span>&gt;&lt;<span class="sy0">/</span><span class="kw2">script</span>&gt;</span>
<span class="sc2">&lt;<span class="kw2">script</span> <span class="kw3">type</span><span class="sy0">=</span><span class="st0">&quot;text/javascript&quot;</span> <span class="kw3">src</span><span class="sy0">=</span><span class="st0">&quot;tests/lib/jasmine-2.0.0/jasmine-html.js&quot;</span>&gt;&lt;<span class="sy0">/</span><span class="kw2">script</span>&gt;</span>
<span class="sc2">&lt;<span class="kw2">script</span> <span class="kw3">type</span><span class="sy0">=</span><span class="st0">&quot;text/javascript&quot;</span> <span class="kw3">src</span><span class="sy0">=</span><span class="st0">&quot;tests/lib/jasmine-2.0.0/boot.js&quot;</span>&gt;&lt;<span class="sy0">/</span><span class="kw2">script</span>&gt;</span>
<span class="sc2">&lt;<span class="kw2">script</span> <span class="kw3">type</span><span class="sy0">=</span><span class="st0">&quot;text/javascript&quot;</span> <span class="kw3">src</span><span class="sy0">=</span><span class="st0">&quot;lib/require-2.1.8.min.js&quot;</span> data-main<span class="sy0">=</span><span class="st0">&quot;test-main&quot;</span>&gt;&lt;<span class="sy0">/</span><span class="kw2">script</span>&gt;</span>
&nbsp;
<span class="sc2">&lt;<span class="kw2">script</span> <span class="kw3">type</span><span class="sy0">=</span><span class="st0">&quot;text/javascript&quot;</span>&gt;</span>
&nbsp; &nbsp; // list spec files here
&nbsp; &nbsp; require([
&nbsp; &nbsp; &nbsp; &nbsp; &quot;spec/someAwesomeProcess.spec&quot;,
&nbsp; &nbsp; &nbsp; &nbsp; &quot;spec/anotherAwesomeProcess.spec&quot;
&nbsp;
&nbsp; &nbsp; ], function () {
&nbsp; &nbsp; &nbsp; &nbsp; window.onload();
&nbsp; &nbsp; });
<span class="sc2">&lt;<span class="sy0">/</span><span class="kw2">script</span>&gt;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">&lt;script type="text/javascript" src="tests/lib/jasmine-2.0.0/jasmine.js"&gt;&lt;/script&gt;
&lt;script type="text/javascript" src="tests/lib/jasmine-2.0.0/jasmine-html.js"&gt;&lt;/script&gt;
&lt;script type="text/javascript" src="tests/lib/jasmine-2.0.0/boot.js"&gt;&lt;/script&gt;
&lt;script type="text/javascript" src="lib/require-2.1.8.min.js" data-main="test-main"&gt;&lt;/script&gt;

&lt;script type="text/javascript"&gt;
	// list spec files here
	require([
		"spec/someAwesomeProcess.spec",
		"spec/anotherAwesomeProcess.spec"

	], function () {
		window.onload();
	});
&lt;/script&gt;</pre></div></div>

<p>But that&#8217;s icky and causes you to have two test bars across the screen (and probably doesn&#8217;t work well with other reporters either).</p>
<p><a href="/wp-content/uploads/2014/02/JasmineDoubleFail.png"><img src="/wp-content/uploads/2014/02/JasmineDoubleFail.png" alt="JasmineDoubleFail" width="726" height="182" class="aligncenter size-full wp-image-2477" srcset="/wp-content/uploads/2014/02/JasmineDoubleFail.png 726w, /wp-content/uploads/2014/02/JasmineDoubleFail-300x75.png 300w" sizes="(max-width: 726px) 100vw, 726px" /></a></p>
<p>Yeah, that&#8217;s special.</p>
<h2>Option 2: Custom Boot Script</h2>
<p>Or we can fix the root cause, the fact that the tests are running on window.onload and that doesn&#8217;t play well with AMD. The boot script included with Jasmine is supposed to be a template that can be customized to your own needs, so let&#8217;s take advantage of that. Copying the existing boot script, we can replace the section that registers the tests to onload with one that will add a callable method to the window:</p>
<p><b>boot-without-onload.js</b></p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="javascript"><thead><tr><td colspan="2"  class="head">Javascript</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
</pre></td><td class="de1"><pre class="de1">&nbsp; <span class="coMULTI">/**</span>
<span class="coMULTI">&nbsp; &nbsp;* ## Execution</span>
<span class="coMULTI">&nbsp; &nbsp;*</span>
<span class="coMULTI">&nbsp; &nbsp;* No onload, only on demand now</span>
<span class="coMULTI">&nbsp; &nbsp;*/</span>
&nbsp;
&nbsp; window.<span class="me1">executeTests</span> <span class="sy0">=</span> <span class="kw1">function</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#123;</span>
&nbsp; &nbsp; htmlReporter.<span class="me1">initialize</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; env.<span class="me1">execute</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; <span class="br0">&#125;</span><span class="sy0">;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">  /**
   * ## Execution
   *
   * No onload, only on demand now
   */

  window.executeTests = function(){
    htmlReporter.initialize();
    env.execute();
  };</pre></div></div>

<p>And then update our SpecRunner to include this replacement boot script and require the test files prior to executing the tests:</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="html4strict"><thead><tr><td colspan="2"  class="head">HTML</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
</pre></td><td class="de1"><pre class="de1">&nbsp; &nbsp; <span class="sc2">&lt;<span class="kw2">script</span> <span class="kw3">type</span><span class="sy0">=</span><span class="st0">&quot;text/javascript&quot;</span> <span class="kw3">src</span><span class="sy0">=</span><span class="st0">&quot;tests/lib/jasmine-2.0.0/jasmine.js&quot;</span>&gt;&lt;<span class="sy0">/</span><span class="kw2">script</span>&gt;</span>
&nbsp; &nbsp; <span class="sc2">&lt;<span class="kw2">script</span> <span class="kw3">type</span><span class="sy0">=</span><span class="st0">&quot;text/javascript&quot;</span> <span class="kw3">src</span><span class="sy0">=</span><span class="st0">&quot;tests/lib/jasmine-2.0.0/jasmine-html.js&quot;</span>&gt;&lt;<span class="sy0">/</span><span class="kw2">script</span>&gt;</span>
&nbsp; &nbsp; <span class="sc2">&lt;<span class="kw2">script</span> <span class="kw3">type</span><span class="sy0">=</span><span class="st0">&quot;text/javascript&quot;</span> <span class="kw3">src</span><span class="sy0">=</span><span class="st0">&quot;tests/lib/jasmine-2.0.0/boot-without-onload.js&quot;</span>&gt;&lt;<span class="sy0">/</span><span class="kw2">script</span>&gt;</span>
&nbsp; &nbsp; <span class="sc2">&lt;<span class="kw2">script</span> <span class="kw3">type</span><span class="sy0">=</span><span class="st0">&quot;text/javascript&quot;</span> <span class="kw3">src</span><span class="sy0">=</span><span class="st0">&quot;lib/require-2.1.8.min.js&quot;</span> data-main<span class="sy0">=</span><span class="st0">&quot;test-main&quot;</span>&gt;&lt;<span class="sy0">/</span><span class="kw2">script</span>&gt;</span>
&nbsp;
&nbsp; &nbsp; <span class="sc2">&lt;<span class="kw2">script</span> <span class="kw3">type</span><span class="sy0">=</span><span class="st0">&quot;text/javascript&quot;</span>&gt;</span>
&nbsp; &nbsp; &nbsp; &nbsp; // list spec files here
&nbsp; &nbsp; &nbsp; &nbsp; require([
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;spec/someAwesomeProcess.spec&quot;,
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;spec/anotherAwesomeProcess.spec&quot;
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; ], function () {
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; window.executeTests();
&nbsp; &nbsp; &nbsp; &nbsp; });
&nbsp; &nbsp; <span class="sc2">&lt;<span class="sy0">/</span><span class="kw2">script</span>&gt;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">    &lt;script type="text/javascript" src="tests/lib/jasmine-2.0.0/jasmine.js"&gt;&lt;/script&gt;
    &lt;script type="text/javascript" src="tests/lib/jasmine-2.0.0/jasmine-html.js"&gt;&lt;/script&gt;
    &lt;script type="text/javascript" src="tests/lib/jasmine-2.0.0/boot-without-onload.js"&gt;&lt;/script&gt;
    &lt;script type="text/javascript" src="lib/require-2.1.8.min.js" data-main="test-main"&gt;&lt;/script&gt;

    &lt;script type="text/javascript"&gt;
        // list spec files here
        require([
            "spec/someAwesomeProcess.spec",
            "spec/anotherAwesomeProcess.spec"

        ], function () {
            window.executeTests();
        });
    &lt;/script&gt;</pre></div></div>

<p>And there we go, Jasmine is now working exactly the same as if we were running without RequireJS (and had pasted 500 script tags in the file).</p>
]]></content>
			<link rel="replies" type="text/html" href="/index.php/webdev/uidevelopment/javascript/unit-testing-with-jasmine-2-0-and-require-js/#comments" thr:count="4"/>
		<link rel="replies" type="application/atom+xml" href="/index.php/webdev/uidevelopment/javascript/unit-testing-with-jasmine-2-0-and-require-js/feed/atom/" thr:count="4"/>
		<thr:total>4</thr:total>
		</entry>
		<entry>
		<author>
			<name>Alex Ullrich</name>
					</author>
		<title type="html"><![CDATA[Auto-Verifying Moqs]]></title>
		<link rel="alternate" type="text/html" href="/index.php/enterprisedev/unittest/auto-verifying-moqs/" />
		<id>/index.php/2012/12/auto-verifying-moqs/</id>
		<updated>2012-12-20T14:06:00Z</updated>
		<published>2012-12-20T14:06:00Z</published>
		<category scheme="/" term="Unit Testing" /><category scheme="/" term="c#" /><category scheme="/" term="moq" /><category scheme="/" term="tdd" />		<summary type="html"><![CDATA[After years of only being familiar with Rhino mocks, I have been using Moq for the last 10 months or so.  For the most part, I like it better.  The syntax seems easier to get people up to speed on, and there are situations where it really cuts down on t&#8230;]]></summary>
		<content type="html" xml:base="/index.php/enterprisedev/unittest/auto-verifying-moqs/"><![CDATA[<p>After years of only being familiar with Rhino mocks, I have been using Moq for the last 10 months or so.  For the most part, I like it better.  The syntax seems easier to get people up to speed on, and there are situations where it really cuts down on the amount of test code you have to write.  This is about one of the situations where it doesn&#8217;t.</p>
<p>One of the things I always liked about Rhino Mocks was the idea of the mock repository, and the fact that when disposing of a mock repository all of your setups get verified automagically.  I have a lot of trouble remembering to add calls to VerifyAll when I&#8217;m adding functionality to existing tests because I got so used to this behavior in the past.  When I noticed some tests where I had unnecessary mocks setup today I decided to do something about it.  Its not really anything special but figued I&#8217;d share since I haven&#8217;t posted for a while.</p>
<p>Basically I added a base test fixture to the project that provides a means to create tracked mocks (similar to the MockRepository concept in Rhino).  It provides a method for mock creation, and adds all created mocks to a list that is then verified in the teardown method.  Pretty simple stuff but I found it handy.</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="csharp"><thead><tr><td colspan="2"  class="head">C#</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
</pre></td><td class="de1"><pre class="de1"><span class="kw1">using</span> <span class="co3">System.Collections.Generic</span><span class="sy0">;</span>
<span class="kw1">using</span> <span class="co3">Moq</span><span class="sy0">;</span>
<span class="kw1">using</span> <span class="co3">NUnit.Framework</span><span class="sy0">;</span>
&nbsp;
<span class="kw1">namespace</span> Project<span class="sy0">.</span><span class="me1">Tests</span>
<span class="br0">&#123;</span>
&nbsp; &nbsp; <span class="kw1">public</span> <span class="kw1">abstract</span> <span class="kw4">class</span> MockVerifyingTest
&nbsp; &nbsp; <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">readonly</span> List<span class="sy0">&lt;</span>Mock<span class="sy0">&gt;</span> _trackedMocks <span class="sy0">=</span> <span class="kw3">new</span> List<span class="sy0">&lt;</span>Mock<span class="sy0">&gt;</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">protected</span> Mock<span class="sy0">&lt;</span>T<span class="sy0">&gt;</span> GenerateTrackedMock<span class="sy0">&lt;</span>T<span class="sy0">&gt;</span><span class="br0">&#40;</span>MockBehavior mockBehavior <span class="sy0">=</span> MockBehavior<span class="sy0">.</span><span class="kw1">Default</span><span class="br0">&#41;</span> <span class="kw1">where</span> T <span class="sy0">:</span> <span class="kw4">class</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">var</span> mock <span class="sy0">=</span> <span class="kw3">new</span> Mock<span class="sy0">&lt;</span>T<span class="sy0">&gt;</span><span class="br0">&#40;</span>mockBehavior<span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; _trackedMocks<span class="sy0">.</span><span class="kw1">Add</span><span class="br0">&#40;</span>mock<span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">return</span> mock<span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#91;</span>TearDown<span class="br0">&#93;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">public</span> <span class="kw1">virtual</span> <span class="kw4">void</span> TearDown<span class="br0">&#40;</span><span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">try</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">foreach</span> <span class="br0">&#40;</span><span class="kw1">var</span> mock <span class="kw1">in</span> _trackedMocks<span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; mock<span class="sy0">.</span><span class="me1">VerifyAll</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">finally</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; _trackedMocks<span class="sy0">.</span><span class="me1">Clear</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp; &nbsp; <span class="br0">&#125;</span>
<span class="br0">&#125;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">using System.Collections.Generic;
using Moq;
using NUnit.Framework;

namespace Project.Tests
{
    public abstract class MockVerifyingTest
    {
        readonly List&lt;Mock&gt; _trackedMocks = new List&lt;Mock&gt;();

        protected Mock&lt;T&gt; GenerateTrackedMock&lt;T&gt;(MockBehavior mockBehavior = MockBehavior.Default) where T : class
        {
            var mock = new Mock&lt;T&gt;(mockBehavior);
            _trackedMocks.Add(mock);
            return mock;
        }

        [TearDown]
        public virtual void TearDown()
        {
            try
            {
                foreach (var mock in _trackedMocks)
                {
                    mock.VerifyAll();
                }
            }
            finally
            {
                _trackedMocks.Clear();
            }
        }
    }
}</pre></div></div>

<p>So now instead of something like this:</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="csharp"><thead><tr><td colspan="2"  class="head">C#</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
</pre></td><td class="de1"><pre class="de1"><span class="br0">&#91;</span>Test<span class="br0">&#93;</span>
<span class="kw1">public</span> <span class="kw4">void</span> ATest<span class="br0">&#40;</span><span class="br0">&#41;</span> 
<span class="br0">&#123;</span>
&nbsp; &nbsp; <span class="kw1">var</span> foo <span class="sy0">=</span> <span class="kw3">new</span> Mock<span class="sy0">&lt;</span>IFoo<span class="sy0">&gt;</span><span class="br0">&#40;</span>MockBehavior<span class="sy0">.</span><span class="me1">Strict</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; foo<span class="sy0">.</span><span class="me1">Setup</span><span class="br0">&#40;</span>f <span class="sy0">=&gt;</span> f<span class="sy0">.</span><span class="me1">GetSomething</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#41;</span><span class="sy0">.</span><span class="me1">Returns</span><span class="br0">&#40;</span><span class="kw3">new</span> Something<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; <span class="kw1">var</span> bar <span class="sy0">=</span> <span class="kw3">new</span> Bar<span class="br0">&#40;</span>foo<span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; bar<span class="sy0">.</span><span class="me1">CodeUnderTest</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; foo<span class="sy0">.</span><span class="me1">VerifyAll</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
<span class="br0">&#125;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">[Test]
public void ATest() 
{
    var foo = new Mock&lt;IFoo&gt;(MockBehavior.Strict);

    foo.Setup(f =&gt; f.GetSomething()).Returns(new Something());

    var bar = new Bar(foo);

    bar.CodeUnderTest();

    foo.VerifyAll();
}</pre></div></div>

<p>I can have my fixture inherit from MockVerifyingTest and write it like this:</p>
<p><

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="csharp"><thead><tr><td colspan="2"  class="head">C#</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
</pre></td><td class="de1"><pre class="de1"><span class="br0">&#91;</span>Test<span class="br0">&#93;</span>
<span class="kw1">public</span> <span class="kw4">void</span> ATest<span class="br0">&#40;</span><span class="br0">&#41;</span> 
<span class="br0">&#123;</span>
&nbsp; &nbsp; <span class="kw1">var</span> foo <span class="sy0">=</span> GenerateTrackedMock<span class="sy0">&lt;</span>IFoo<span class="sy0">&gt;</span><span class="br0">&#40;</span>MockBehavior<span class="sy0">.</span><span class="me1">Strict</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; foo<span class="sy0">.</span><span class="me1">Setup</span><span class="br0">&#40;</span>f <span class="sy0">=&gt;</span> f<span class="sy0">.</span><span class="me1">GetSomething</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#41;</span><span class="sy0">.</span><span class="me1">Returns</span><span class="br0">&#40;</span><span class="kw3">new</span> Something<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; <span class="kw1">var</span> bar <span class="sy0">=</span> <span class="kw3">new</span> Bar<span class="br0">&#40;</span>foo<span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; bar<span class="sy0">.</span><span class="me1">CodeUnderTest</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
<span class="br0">&#125;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">[Test]
public void ATest() 
{
    var foo = GenerateTrackedMock&lt;IFoo&gt;(MockBehavior.Strict);

    foo.Setup(f =&gt; f.GetSomething()).Returns(new Something());

    var bar = new Bar(foo);

    bar.CodeUnderTest();
}</pre></div></div>

<p>It only saves one line of test code in this example, but it can add up when dealing with tests that have several mocks.  I realize having this many mocks in play for a test is just asking for trouble, but I am dealing with a legacy system without any test coverage, so working in test coverage without any sweeping refactorings is imperative at this point.  We can make those changes later once we&#8217;ve gotten through a release or two with the code that is now under test <img src="https://s.w.org/images/core/emoji/2/72x72/1f642.png" alt="🙂" class="wp-smiley" style="height: 1em; max-height: 1em;" /></p>
]]></content>
			<link rel="replies" type="text/html" href="/index.php/enterprisedev/unittest/auto-verifying-moqs/#comments" thr:count="0"/>
		<link rel="replies" type="application/atom+xml" href="/index.php/enterprisedev/unittest/auto-verifying-moqs/feed/atom/" thr:count="0"/>
		<thr:total>0</thr:total>
		</entry>
		<entry>
		<author>
			<name>Eli Weinstock-Herman (tarwn)</name>
					</author>
		<title type="html"><![CDATA[Reducing Code-Build-Test Friction with NCrunch]]></title>
		<link rel="alternate" type="text/html" href="/index.php/enterprisedev/unittest/reducing-code-build-test-friction/" />
		<id>/index.php/2012/07/reducing-code-build-test-friction/</id>
		<updated>2012-07-23T10:13:00Z</updated>
		<published>2012-07-23T10:13:00Z</published>
		<category scheme="/" term="Unit Testing" /><category scheme="/" term=".net" /><category scheme="/" term="ncrunch" /><category scheme="/" term="tdd" />		<summary type="html"><![CDATA[As I've moved from project to project, environment to environment, I've had opportunities to write unit tests after coding, do test first development, and once use unit tests as a living spec for an external developer (code none unit testing?). On&#8230;]]></summary>
		<content type="html" xml:base="/index.php/enterprisedev/unittest/reducing-code-build-test-friction/"><![CDATA[<p>As I&#8217;ve moved from project to project, environment to environment, I&#8217;ve had opportunities to write unit tests after coding, do test first development, and once use unit tests as a living spec for an external developer (code none unit testing?). One of the biggest friction points, once you settle on a framework, is the constant cycle back and forth between coding, building, running tests, and flipping back. Whether you are using MS Test and the built-in test result viewer, the external NUnit GUI, or a 3rd party test runner, that constant switching is actually stealing precious moments of concentration and time. </p>
<div style="text-align:center; color: #666666; font-size: 90%">
   <img src="http://tiernok.com/LTDBlog/AddressTDD/CodeBuildTest.png" alt="The Code, Build, Test Cycle" /><br />
   The Code, Build, Test Cycle
</div>
<p>Imagine for a moment that you have finished writing a piece of code. Maybe it&#8217;s the test, maybe it&#8217;s the code you intend to test. Instead of kicking off a build and switching mental mode to run the tests, the results simply start appearing. Your test lights up red, then green as you switch to building the logic that satisfies it, never once breaking stride to wait for the test suite to run. Your uncovered code is clearly marked as uncovered before you even finish writing it to press save. It&#8217;s magic.</p>
<p>And so very, very addictive.</p>
<h2>Hey Kids, Try Some of This</h2>
<p>Instead of screenshotting our way through another post, let&#8217;s do this together. First download and install <a href="http://www.ncrunch.net/" title="Visit the NCrunch website" target="_blank">NCrunch</a>. Then either download or clone the git repository sample I have set up here: https://github.com/tarwn/TDDAddress</p>
<p>Let&#8217;s get started.</p>
<h2>What are we doing?</h2>
<p><img src="http://tiernok.com/LTDBlog/AddressTDD/Letter.png" alt="Letter" style="float: left; margin-top: 8px;" /> </p>
<p>The goal of this exercise is to build an Address class that is the business and formatting logic behind entry of a mailing address. The Address class will expose properties to tell an interface what address fields are available, what they should be labelled, whether the address has all the required values, and a displayable formatted address. In return, it will expect that interface to populate input properties for all the address input values. </p>
<p>This is both as easy and quite a bit harder than what it sounds like. Easier in that we won&#8217;t be writing a game or similarly large construct, but harder because the rules for mailing addresses are not as well defined or as simple as you may think. In fact, most websites on the internet do it wrong, and not just for addresses outside the US. </p>
<p>Luckily there are some people that have tried to pull together all of the rules from the USPS and other sources and we can use the results of their hard work to serve as a spec for our Address logic. The rules we are using were sourced from http://www.columbia.edu/~fdc/postal/#general, but I&#8217;ve only included a subset of them in this project.</p>
<h2>Project Setup</h2>
<p>There are two projects in the solution, one to hold the Address class (Main) and one for the tests (Main.Tests). </p>
<div style="text-align:center; color: #666666; font-size: 90%">
   <img src="http://tiernok.com/LTDBlog/AddressTDD/SolutionExplorer.png" alt="Solution Explorer - Projects" /><br />
   Just a pair of small projects, nothing scary here
</div>
<p>The Address class already has the basic properties it needs, but everything else is up to you.</p>
<h2>Let&#8217;s Go</h2>
<p>Open the solution and enable NCrunch (it finished installing, right?) by selecting it from the top menu and selecting &#8220;Enable&#8221;. For the most part you can select the defaults when it is enabling. Either select the option to enable all of your tests by default while it is going through the dialogs, or open the Tests window, make ignored tests visible (grey icon on far right) and enable tests for the two projects manually.</p>
<p>Ready? Ok, moving on.</p>
<p>Open up the AddressTests file in Main.Tests and the Specs.md file from the root of the solution. Add the first test to the AddressTests like so:</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="csharp"><thead><tr><td colspan="2"  class="head">C#</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
</pre></td><td class="de1"><pre class="de1">&nbsp; &nbsp; <span class="br0">&#91;</span>Test<span class="br0">&#93;</span>
&nbsp; &nbsp; <span class="kw1">public</span> <span class="kw4">void</span> ToFormattedAddress_AddressLine1IsProvided_ItAppearsInOutput<span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">var</span> sampleValue <span class="sy0">=</span> <span class="st0">&quot;Address Line 1&quot;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">var</span> a <span class="sy0">=</span> <span class="kw3">new</span> Address<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; a<span class="sy0">.</span><span class="me1">AddressLine1</span> <span class="sy0">=</span> sampleValue<span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">var</span> result <span class="sy0">=</span> a<span class="sy0">.</span><span class="me1">ToFormattedAddress</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; Assert<span class="sy0">.</span><span class="me1">IsTrue</span><span class="br0">&#40;</span>result<span class="sy0">.</span><span class="me1">Contains</span><span class="br0">&#40;</span>sampleValue<span class="br0">&#41;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; <span class="br0">&#125;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">	[Test]
	public void ToFormattedAddress_AddressLine1IsProvided_ItAppearsInOutput() {
		var sampleValue = "Address Line 1";
		var a = new Address();

		a.AddressLine1 = sampleValue;
		var result = a.ToFormattedAddress();

		Assert.IsTrue(result.Contains(sampleValue));
	}</pre></div></div>

<p>This test is the second rule in the included Specs.md file. After you add the test code, red dots will show up next to executable lines in the test that are on the path to a failed assertion. </p>
<div style="text-align:center; color: #666666; font-size: 90%">
   <img src="http://tiernok.com/LTDBlog/AddressTDD/TestsAreRed.png" alt="Tests Are Red" /><br />
   Tests are automatically red/failing
</div>
<p>NCrunch is building and running the tests behind the scenes as you add more code, automagically. Switching over to the Address class, we&#8217;ll notice that it also has dots to indicate portions of the class that are referenced by failing tests. Right-clicking on any of these dots provides more details, options to run tests in debug mode, and so on.</p>
<p>Now add some code to satisfy that test. As you make addition, NCrunch continues to build and test in the background, displaying the updated dots as you work. </p>
<div style="text-align:center; color: #666666; font-size: 90%">
   <img src="http://tiernok.com/LTDBlog/AddressTDD/TestsAreGreen.png" alt="Tests Are Green" /><br />
   Tests and code turn Green automatically
</div>
<p>When you get to all green dots, you&#8217;re done. No need to stop, just move right on to the next test.</p>
[video:youtube:E0PztmQQlOQ]
<p>Enjoy the flow.</p>
]]></content>
			<link rel="replies" type="text/html" href="/index.php/enterprisedev/unittest/reducing-code-build-test-friction/#comments" thr:count="0"/>
		<link rel="replies" type="application/atom+xml" href="/index.php/enterprisedev/unittest/reducing-code-build-test-friction/feed/atom/" thr:count="0"/>
		<thr:total>0</thr:total>
		</entry>
		<entry>
		<author>
			<name>Eli Weinstock-Herman (tarwn)</name>
					</author>
		<title type="html"><![CDATA[Continuous Delivery Project &#8211; Incorporating the Unit Tests]]></title>
		<link rel="alternate" type="text/html" href="/index.php/enterprisedev/unittest/continuous-delivery-project-incorporating-the/" />
		<id>/index.php/2011/12/continuous-delivery-project-incorporating-the/</id>
		<updated>2011-12-19T13:44:00Z</updated>
		<published>2011-12-19T13:44:00Z</published>
		<category scheme="/" term="Application Lifecycle Management" /><category scheme="/" term="Unit Testing" /><category scheme="/" term="asp.net mvc" /><category scheme="/" term="continuous delivery" /><category scheme="/" term="continuous integration" /><category scheme="/" term="jenkins" /><category scheme="/" term="ms test" /><category scheme="/" term="mvc music store" /><category scheme="/" term="unit testing" />		<summary type="html"><![CDATA[The purpose of the integration build is to bring potential issues to the surface as quickly as possible. Unit tests run quickly and adding them to the continuous integration build helps flush out defects as close to the beginning of the process as possible. Generally build engines will support unit test framework by directly integrating with them or by providing an ability to execute the test framework and import their results.]]></summary>
		<content type="html" xml:base="/index.php/enterprisedev/unittest/continuous-delivery-project-incorporating-the/"><![CDATA[<p>The purpose of the integration build is to bring potential issues to the surface as quickly as possible. Unit tests run quickly and adding them to the continuous integration build helps flush out defects as close to the beginning of the process as possible. Generally build engines will support unit test framework by directly integrating with them or by providing an ability to execute the test framework and import their results.</p>
<div style="text-align: center; font-size: .9em; color: #666666;">
	<img src="http://tiernok.com/LTDBlog/ContinuousDelivery/Overview_p3.png" title="Delivery Pipeline - Focus of Current Post" /><br />
	Delivery Pipeline &#8211; Focus of Current Post
</div>
<p>This is the fourth post in a multi-part series on my Continuous Delivery pipeline project. The <a href="/index.php/EnterpriseDev/UnitTest/continuous-delivery-project-making-mvcmusicstore" title="Making MVCMusic Store Testable">previous post</a> followed the changes necessary to add unit testing to the MVC Music Store project, a process that ended in the creation of unit tests for the Checkout process. In this post I will configure the CI build job to run the unit test suite, including extra steps necessary to get the MS Test framework runnable on the build server.</p>
<h2>Run the Build</h2>
<p>With the automated build already polling changes from the source code repository, this process actually started while I was still writing the initial unit tests for the prior post. With the little red &#8220;failed build&#8221; dot as my guide, and the ever present twitter bot reminding me on each broken commit, I ended up working on both the unit tests and the server configuration in overlapping steps.</p>
<div style="text-align: center; font-size: .9em; color: #666666;">
	<a href="http://tiernok.com/LTDBlog/ContinuousDelivery/unittest_firstfail.png" title="Larger picture" target="_blank"><img src="http://tiernok.com/LTDBlog/ContinuousDelivery/unittest_firstfail.png" title="Failing Unit Test Build" /></a><br />
	Failing Unit Test Build
</div>
<p>The initial build failure was due to the addition of the MS Test project to the solution. This test project includes necessary references for the MS Test libraries, but unfortunately those libraries are not included in the project or as part of the .Net framework installation. This causes the build to fail with missing reference errors.</p>
<p>There are several blogs and methods outlined to get MS Test running on a build server, including some registry hacks and other unsupported trickery. After spending some time exploring that route, I eventually gave up and installed Visual Studio on the test server. </p>
<p><i>This is an area that Microsoft could definitely use some improvement in (MS Test integration), but what&#8217;s interesting is that many experts on continuous delivery (of which I am definitely not one) actually suggest using the same software on the build server as the developers use to minimize differences in the builds. Whatever the case, the choice of MS Test generally ends with us having Visual Studio on our build server.</i></p>
<p>Once the install was completed and I had patched Visual Studio up to date, I was able to run successful builds again.</p>
<h2>Run the Tests in the Build</h2>
<p>At this point I am building the test project every time the build runs, but I&#8217;m not actually running any of the tests. In order to run the tests, I am going to drop to the command line and run the MS Test executable directly. To execute a command directly as a build step, I&#8217;ll add a &#8220;Windows Batch Command&#8221; step to the &#8220;Build&#8221; section of my CI Build job.</p>
<div style="text-align: center; font-size: .9em; color: #666666;">
	<a href="http://tiernok.com/LTDBlog/ContinuousDelivery/unittest_command.png" title="Larger picture" target="_blank"><img src="http://tiernok.com/LTDBlog/ContinuousDelivery/unittest_command.png" title="Jenkins Configuration - New Windows Batch Command" /></a><br />
	Jenkins Configuration &#8211; New Windows Batch Command
</div>
<p>The MS Test executable is located in the Visual Studio folder at <code class="codespan">C:Program Files (x86)Microsoft Visual Studio 10.0Common7IDEmstest.exe</code>. I&#8217;ll execute this against the compiled assembly from the MVCMusicStoreTests project and configure the results file to land somewhere obvious so i can import it later. </p>
<p>Jenkins provides a list of variables we can use in commands, in this case I&#8217;ll use the %WORKSPACE% variable to locate the assembly:<br />
<code class="codespan">"C:Program Files (x86)Microsoft Visual Studio 10.0Common7IDEmstest.exe" /resultsfile:"%WORKSPACE%MvcMusicStoreTestsbinReleaseMyTests.Results.xml" /testcontainer:"%WORKSPACE%MvcMusicStoreTestsbinReleaseMvcMusicStoreTests.dll" /nologo</code></p>
<p>At this point, I can run the build again but it doesn&#8217;t show anything different than before until I open the command log. Inside the command log I can see that the tests ran successfully as part of the build. I also can manually verify the results file was published to the location I specified above.</p>
<h2>Integrating the Test Run</h2>
<p>To integrate the MS Test results into Jenkins, I&#8217;ll use a plugin to map the MS Test format to a format that Jenkins natively understands (Junit XML results). A plugin is available from the &#8220;Manage Plugins&#8221; screen (Jenkins, Manage Jenkins, Manage Plugins, Click the Available Tab) to do this work for me. </p>
<p>After the plugin installs successfully, there is a new entry in the &#8220;Post-Build Actions&#8221; section of the job configuration. All I need to do is check the new &#8220;Publish MSTest test result report&#8221; checkbox and enter the path I used above for the result files. </p>
<div style="text-align: center; font-size: .9em; color: #666666;">
	<a href="http://tiernok.com/LTDBlog/ContinuousDelivery/unittest_results.png" title="Larger picture" target="_blank"><img src="http://tiernok.com/LTDBlog/ContinuousDelivery/unittest_results.png" title="Jenkins Configuration - New Windows Batch Command" /></a><br />
	Jenkins Configuration &#8211; New Windows Batch Command
</div>
<p>Now when I run the build again, a new section shows up on the run summary screen that indicates I don&#8217;t have any failing tests. Clicking that link for more details, I can see that Jenkins has parsed that results file from MS Test and provided information on all of the running tests and their execution times.</p>
<div style="text-align: center; font-size: .9em; color: #666666;">
	<a href="http://tiernok.com/LTDBlog/ContinuousDelivery/unittest_success.png" title="Larger picture" target="_blank"><img src="http://tiernok.com/LTDBlog/ContinuousDelivery/unittest_success.png" title="Jenkins Configuration - Successful Job w/ Unit Tests" /></a><br />
	Jenkins Configuration &#8211; Successful Job w/ Unit Tests
</div>
<p>In addition to the test information, there is also a new menu item on the left side named &#8220;History&#8221;. Clicking this will show historical information on the test runs, including a graph of the execution times and test counts. </p>
<div style="text-align: center; font-size: .9em; color: #666666;">
	<a href="http://tiernok.com/LTDBlog/ContinuousDelivery/unittest_history_lg.png" title="Larger picture" target="_blank"><img src="http://tiernok.com/LTDBlog/ContinuousDelivery/unittest_history.png" title="Jenkins Configuration - Unit Test History" /></a><br />
	Jenkins Configuration &#8211; Unit Test History
</div>
<p><i>Note: If, like me, you didn&#8217;t bother to define a server name in the Jenkins configuration panel, you will find that some of these links will not work from a remote server because they are defined with the full server name instead of relative links.</i></p>
<p>I am naturally paranoid when things work right away, so at this point I purposefully broke a unit test and reran the build to verify it would report it correctly.</p>
<div style="text-align: center; font-size: .9em; color: #666666;">
	<a href="http://tiernok.com/LTDBlog/ContinuousDelivery/unittest_failedrun_lg.png" title="Larger picture" target="_blank"><img src="http://tiernok.com/LTDBlog/ContinuousDelivery/unittest_failedrun.png" title="Jenkins Configuration - Failed Unit Test Run" /></a><br />
	Failed Unit Test Run
</div>
<p>And my twitter bot is, of course, more than happy to broadcast that failure far and wide.</p>
<div style="text-align: center; font-size: .9em; color: #666666;">
	<a href="https://twitter.com/#!/TarwnBuildSrvr" title="@TarwnBuildSrvr on Twitter" target="_blank"><img src="http://tiernok.com/LTDBlog/ContinuousDelivery/unittest_twitter.png" title="Jenkins Configuration - Failed Unit Test Run" /></a><br />
	Failed Unit Test Run
</div>
<h2>Next Steps</h2>
<p>With unit tests integrated into the build job, I am nearly done with the Continuous Integration stage of this pipeline. The last thing step will be to verify the packaged code can actually be deployed and to build in the ability to smoke test that deployed code.</p>
<style>
.thelist li{ color: #666666; }
.thelist .cur{ font-style: italic; color: black; }
</style>
<ul class="thelist">
<li><a href="http://wiki.lessthandot.com/index.php/Eli%27s_Continuous_Delivery_Project" title="Wiki post for Eli's Continuous Delivery Project">Wiki Post</a></li>
<li><a href="/index.php/EnterpriseDev/application-lifecycle-management/starting-a-continuous-delivery-project" title="Starting a Continuous Delivery Project">Starting a Continuous Delivery Project</a></li>
<li><a href="/index.php/EnterpriseDev/application-lifecycle-management/continuous-delivery-project-setting-up" title="Setting up the Continuous Integration stage">Setting up the Continuous Integration stage</a></li>
<li><a href="/index.php/EnterpriseDev/UnitTest/continuous-delivery-project-making-mvcmusicstore" title="Making ASP.Net MVC Music Store Testable">Making ASP.Net MVC Music Store Testable</a></li>
<li class="cur"><a href="/index.php/EnterpriseDev/UnitTest/continuous-delivery-project-incorporating-the" title="Incorporating Unit Tests in the CI stage">Incorporating Unit Tests in the CI stage</a></li>
<li><a href="/index.php/EnterpriseDev/application-lifecycle-management/continuous-delivery-project-deploy-and" title="Deploy and Smoke Test">Deploy and Smoke Test</a></li>
<li><a href="/index.php/EnterpriseDev/application-lifecycle-management/continuous-delivery-adding-an-automated" title="Adding an Automated Interface Testing stage">Adding an Automated Interface Testing stage</a></li>
<li><a href="/index.php/EnterpriseDev/application-lifecycle-management/continuous-delivery-dashboard-qa-and" title="Dashboard, QA and Production Deployment stage">Dashboard, QA and Production Deployment stage</a></li>
</ul>
]]></content>
			<link rel="replies" type="text/html" href="/index.php/enterprisedev/unittest/continuous-delivery-project-incorporating-the/#comments" thr:count="1"/>
		<link rel="replies" type="application/atom+xml" href="/index.php/enterprisedev/unittest/continuous-delivery-project-incorporating-the/feed/atom/" thr:count="1"/>
		<thr:total>1</thr:total>
		</entry>
		<entry>
		<author>
			<name>Eli Weinstock-Herman (tarwn)</name>
					</author>
		<title type="html"><![CDATA[Continuous Delivery Project &#8211; Making MVCMusicStore Testable]]></title>
		<link rel="alternate" type="text/html" href="/index.php/enterprisedev/unittest/continuous-delivery-project-making-mvcmusicstore/" />
		<id>/index.php/2011/12/continuous-delivery-project-making-mvcmusicstore/</id>
		<updated>2011-12-16T11:28:00Z</updated>
		<published>2011-12-16T11:28:00Z</published>
		<category scheme="/" term="Application Lifecycle Management" /><category scheme="/" term="Unit Testing" /><category scheme="/" term="asp.net mvc" /><category scheme="/" term="continuous delivery" /><category scheme="/" term="ms test" /><category scheme="/" term="mvc music store" /><category scheme="/" term="mvccontrib" /><category scheme="/" term="rhinomocks" /><category scheme="/" term="unit testing" />		<summary type="html"><![CDATA[It can be challenging to add unit testing to a project that was built without planning to incorporate it. The ASP.Net MVC Music Store tutorial was not built with unit testing in mind, but today we're going to walk through the addition of Controller unit tests, focusing on a controller that directly references Entity Framework objects and implicitly interacts with ASP.Net Membership objects and Request data from the current HttpContext.]]></summary>
		<content type="html" xml:base="/index.php/enterprisedev/unittest/continuous-delivery-project-making-mvcmusicstore/"><![CDATA[<p>It can be challenging to add unit testing to a project that was built without planning to incorporate it. The ASP.Net MVC Music Store tutorial was not built with unit testing in mind, but today we&#8217;re going to walk through the addition of Controller unit tests, focusing on a controller that directly references Entity Framework objects and implicitly interacts with ASP.Net Membership objects and Request data from the current HttpContext.</p>
<div style="text-align: center; font-size: .9em; color: #666666;">
	<img src="http://tiernok.com/LTDBlog/ContinuousDelivery/Overview_p2.png" title="Delivery Pipeline - Focus of Current Post" /><br />
	Delivery Pipeline &#8211; Focus of Current Post
</div>
<p>This is the third post in a multi-part series on my Continuous Delivery pipeline project. The <a href="/index.php/EnterpriseDev/application-lifecycle-management/continuous-delivery-project-setting-up" title="Starting the Continuous Delivery project">previous post</a> followed the setup of the Continuous Integration engine and the CI build job. This post follows the addition of Unit Tests to the ASP.Net MVC Music Store application so those tests can be incorporated in the CI build job (in the next post).</p>
<h2>Adding the Unit Tests</h2>
<p>I chose to use MS Test for the Unit Test project due to it&#8217;s integration into Visual Studio. Later I&#8217;ll use Nunit for the automated interface testing where that integration is not as useful. This will also let us see both integrated into the build engine as we add those portions in.</p>
<p>The first step to adding Unit Testing to an existing project is picking a place to start. I selected the CheckoutController, as it is one of the more complex controllers in the project and will provide the best set of examples. Besides the implicit access of HttpContext data and instantiating the MusicStoreEntities DbContext directly, the Checkout Controller interacts with a cart model object that also interacts with HttpContext and it own instance of the DbContext.</p>
<p><i>Note: There is a <a href="http://msdn.microsoft.com/en-us/gg618510" title="ASP.NET MVC 3 Testing">MSDN Hands On Lab</a> to add &#8220;Unit Tests&#8221; to the MVCMusicStore site. The methods outlined in that post are lower impact to the production code (little or no changes required), but is actually Integration Testing, since the tests are executing across more than one unit of code and across application boundaries to a database. Integration Tests are useful, but typically more costly to maintain, provide less specific information, take longer to run, and are more fragile than unit tests. This is not to say that they aren&#8217;t useful, just that they are different.</i></p>
<p>The code for this project is available in a <a href="https://bitbucket.org/tarwn/mvcmusicstore.main/changesets" title="Changesets for the source code">BitBucket repository</a>, but the order I follow here will be somewhat different than the actual order of the changesets, as the changes for this post overlapped some with the content of the next post.</p>
<h2>Testable Entity Framework</h2>
<p>Before writing the first test, I need to drive a wedge between the Entity Framework DbContext and the Controllers so I can give the controller a data context that doesn&#8217;t really talk to a database. Currently the CheckoutController creates an instance of the MusicStoreEntities object when it is instantiated, and that instantiated MusicStoreEntities object gets it&#8217;s connection information from the web.config:</p>
<p><b>MVCMusicStore/Controllers/CheckoutController.cs</b></p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="csharp"><thead><tr><td colspan="2"  class="head">C#</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
</pre></td><td class="de1"><pre class="de1"><span class="kw1">namespace</span> MvcMusicStore<span class="sy0">.</span><span class="me1">Controllers</span> <span class="br0">&#123;</span>
&nbsp;
&nbsp; &nbsp; <span class="br0">&#91;</span>Authorize<span class="br0">&#93;</span>
&nbsp; &nbsp; <span class="kw1">public</span> <span class="kw4">class</span> CheckoutController <span class="sy0">:</span> Controller <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; MusicStoreEntities storeDB <span class="sy0">=</span> <span class="kw3">new</span> MusicStoreEntities<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">const</span> <span class="kw4">string</span> PromoCode <span class="sy0">=</span> <span class="st0">&quot;FREE&quot;</span><span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; <span class="co1">//</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="co1">// GET: /Checkout/AddressAndPayment</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">public</span> ActionResult AddressAndPayment<span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">return</span> View<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span>
<span class="sy0">...</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">namespace MvcMusicStore.Controllers {

	[Authorize]
	public class CheckoutController : Controller {
		MusicStoreEntities storeDB = new MusicStoreEntities();
		const string PromoCode = "FREE";

		//
		// GET: /Checkout/AddressAndPayment
		public ActionResult AddressAndPayment() {
			return View();
		}
...</pre></div></div>

<p>Replacing this concrete object with an interface will allow the production version of the site to continue working with a live database context while providing the ability to use a fake version for testing. </p>
<p>To create the replacement, I&#8217;ll start replacing the concrete context with the name of an interface, then use the errors from the compiler to help define the minimum set of interface members required to satisfy the production code.</p>
<p><b>MVCMusicStore/Controllers/CheckoutController.cs</b></p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="csharp"><thead><tr><td colspan="2"  class="head">C#</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
</pre></td><td class="de1"><pre class="de1"><span class="kw1">namespace</span> MvcMusicStore<span class="sy0">.</span><span class="me1">Controllers</span> <span class="br0">&#123;</span>
&nbsp;
&nbsp; &nbsp; <span class="br0">&#91;</span>Authorize<span class="br0">&#93;</span>
&nbsp; &nbsp; <span class="kw1">public</span> <span class="kw4">class</span> CheckoutController <span class="sy0">:</span> Controller <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; IMusicStoreEntities storeDB<span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">const</span> <span class="kw4">string</span> PromoCode <span class="sy0">=</span> <span class="st0">&quot;FREE&quot;</span><span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">public</span> CheckoutController<span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="sy0">:</span> <span class="kw1">this</span><span class="br0">&#40;</span><span class="kw3">new</span> MusicStoreEntities<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span> <span class="br0">&#125;</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">public</span> CheckoutController<span class="br0">&#40;</span>IMusicStoreEntities storeDb<span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">this</span><span class="sy0">.</span><span class="me1">storeDB</span> <span class="sy0">=</span> storeDb<span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span>
<span class="sy0">...</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">namespace MvcMusicStore.Controllers {

	[Authorize]
	public class CheckoutController : Controller {
		IMusicStoreEntities storeDB;
		const string PromoCode = "FREE";

		public CheckoutController() : this(new MusicStoreEntities()) { }

		public CheckoutController(IMusicStoreEntities storeDb) {
			this.storeDB = storeDb;
		}
...</pre></div></div>

<p><i>Why define the interface first and debug forward? Why not build a copy of the DbContext first? Starting with a minimal interface like this will help me keep the interface to the minimum necessary functionality. Had I started with the DbContext I could easily start defining methods that seem like they will be useful at some point, but don&#8217;t reflect what I will actually need or may never be used. Extra code is extra maintenance and finding out sooner that something doesn&#8217;t work (or is unnecessary) leads to less wasted effort.</i></p>
<p>The first error is the attempted assignment of the new MusicStoreEntities to the IMusicStoreEntities constructor. That one is easy enough to resolve:</p>
<p><b>MVCMusicStore/Models/MusicStoreEntities.cs</b></p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="csharp"><thead><tr><td colspan="2"  class="head">C#</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
</pre></td><td class="de1"><pre class="de1"><span class="kw1">namespace</span> MvcMusicStore<span class="sy0">.</span><span class="me1">Models</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; <span class="kw1">public</span> <span class="kw4">class</span> MusicStoreEntities <span class="sy0">:</span> DbContext, IMusicStoreEntities <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="co1">// ...</span>
&nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp;
&nbsp; &nbsp; <span class="kw1">public</span> <span class="kw4">interface</span> IMusicStoreEntities <span class="br0">&#123;</span> <span class="br0">&#125;</span>
<span class="br0">&#125;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">namespace MvcMusicStore.Models {
	public class MusicStoreEntities : DbContext, IMusicStoreEntities {
		// ...
	}

	public interface IMusicStoreEntities { }
}</pre></div></div>

<p>I&#8217;ve added the interface declaration and the implements statement to MusicStoreEntities. Next I&#8217;ll define the collections and make sure the interface implements IDisposable:</p>
<p><b>MVCMusicStore/Models/MusicStoreEntities.cs</b></p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="csharp"><thead><tr><td colspan="2"  class="head">C#</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
</pre></td><td class="de1"><pre class="de1"><span class="kw1">namespace</span> MvcMusicStore<span class="sy0">.</span><span class="me1">Models</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; <span class="kw1">public</span> <span class="kw4">class</span> MusicStoreEntities <span class="sy0">:</span> DbContext, IMusicStoreEntities <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">public</span> IDbSet<span class="sy0">&lt;</span>Album<span class="sy0">&gt;</span> Albums <span class="br0">&#123;</span> <span class="kw1">get</span><span class="sy0">;</span> <span class="kw1">set</span><span class="sy0">;</span> <span class="br0">&#125;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">public</span> IDbSet<span class="sy0">&lt;</span>Genre<span class="sy0">&gt;</span> Genres <span class="br0">&#123;</span> <span class="kw1">get</span><span class="sy0">;</span> <span class="kw1">set</span><span class="sy0">;</span> <span class="br0">&#125;</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">public</span> IDbSet<span class="sy0">&lt;</span>Artist<span class="sy0">&gt;</span> Artists <span class="br0">&#123;</span> <span class="kw1">get</span><span class="sy0">;</span> <span class="kw1">set</span><span class="sy0">;</span> <span class="br0">&#125;</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">public</span> IDbSet<span class="sy0">&lt;</span>Cart<span class="sy0">&gt;</span> Carts <span class="br0">&#123;</span> <span class="kw1">get</span><span class="sy0">;</span> <span class="kw1">set</span><span class="sy0">;</span> <span class="br0">&#125;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">public</span> IDbSet<span class="sy0">&lt;</span>Order<span class="sy0">&gt;</span> Orders <span class="br0">&#123;</span> <span class="kw1">get</span><span class="sy0">;</span> <span class="kw1">set</span><span class="sy0">;</span> <span class="br0">&#125;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">public</span> IDbSet<span class="sy0">&lt;</span>OrderDetail<span class="sy0">&gt;</span> OrderDetails <span class="br0">&#123;</span> <span class="kw1">get</span><span class="sy0">;</span> <span class="kw1">set</span><span class="sy0">;</span> <span class="br0">&#125;</span>
&nbsp;
&nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp;
&nbsp; &nbsp; <span class="kw1">public</span> <span class="kw4">interface</span> IMusicStoreEntities <span class="sy0">:</span> IDisposable <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; IDbSet<span class="sy0">&lt;</span>Album<span class="sy0">&gt;</span> Albums <span class="br0">&#123;</span> <span class="kw1">get</span><span class="sy0">;</span> <span class="kw1">set</span><span class="sy0">;</span> <span class="br0">&#125;</span>
&nbsp; &nbsp; &nbsp; &nbsp; IDbSet<span class="sy0">&lt;</span>Genre<span class="sy0">&gt;</span> Genres <span class="br0">&#123;</span> <span class="kw1">get</span><span class="sy0">;</span> <span class="kw1">set</span><span class="sy0">;</span> <span class="br0">&#125;</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; IDbSet<span class="sy0">&lt;</span>Artist<span class="sy0">&gt;</span> Artists <span class="br0">&#123;</span> <span class="kw1">get</span><span class="sy0">;</span> <span class="kw1">set</span><span class="sy0">;</span> <span class="br0">&#125;</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; IDbSet<span class="sy0">&lt;</span>Cart<span class="sy0">&gt;</span> Carts <span class="br0">&#123;</span> <span class="kw1">get</span><span class="sy0">;</span> <span class="kw1">set</span><span class="sy0">;</span> <span class="br0">&#125;</span>
&nbsp; &nbsp; &nbsp; &nbsp; IDbSet<span class="sy0">&lt;</span>Order<span class="sy0">&gt;</span> Orders <span class="br0">&#123;</span> <span class="kw1">get</span><span class="sy0">;</span> <span class="kw1">set</span><span class="sy0">;</span> <span class="br0">&#125;</span>
&nbsp; &nbsp; &nbsp; &nbsp; IDbSet<span class="sy0">&lt;</span>OrderDetail<span class="sy0">&gt;</span> OrderDetails <span class="br0">&#123;</span> <span class="kw1">get</span><span class="sy0">;</span> <span class="kw1">set</span><span class="sy0">;</span> <span class="br0">&#125;</span>
&nbsp; &nbsp; <span class="br0">&#125;</span>
<span class="br0">&#125;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">namespace MvcMusicStore.Models {
	public class MusicStoreEntities : DbContext, IMusicStoreEntities {
		public IDbSet&lt;Album&gt; Albums { get; set; }
		public IDbSet&lt;Genre&gt; Genres { get; set; }

		public IDbSet&lt;Artist&gt; Artists { get; set; }

		public IDbSet&lt;Cart&gt; Carts { get; set; }
		public IDbSet&lt;Order&gt; Orders { get; set; }
		public IDbSet&lt;OrderDetail&gt; OrderDetails { get; set; }

	}

	public interface IMusicStoreEntities : IDisposable {
		IDbSet&lt;Album&gt; Albums { get; set; }
		IDbSet&lt;Genre&gt; Genres { get; set; }

		IDbSet&lt;Artist&gt; Artists { get; set; }

		IDbSet&lt;Cart&gt; Carts { get; set; }
		IDbSet&lt;Order&gt; Orders { get; set; }
		IDbSet&lt;OrderDetail&gt; OrderDetails { get; set; }
	}
}</pre></div></div>

<p>At this point I have a couple errors to clean up. In one case the compiler is upset with using Include() off of an IDbSet instance, this is easily solved by adding <code class="codespan">using System.Data.Entity;</code> to the file so the extension will be available. The second error points out a missing SaveChanges call on my interface which I can easily add:</p>
<p><b>MVCMusicStore/Models/MusicStoreEntities.cs</b></p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="csharp"><thead><tr><td colspan="2"  class="head">C#</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
</pre></td><td class="de1"><pre class="de1"><span class="kw1">namespace</span> MvcMusicStore<span class="sy0">.</span><span class="me1">Models</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; <span class="kw1">public</span> <span class="kw4">class</span> MusicStoreEntities <span class="sy0">:</span> DbContext, IMusicStoreEntities <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="co1">// ...</span>
&nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp;
&nbsp; &nbsp; <span class="kw1">public</span> <span class="kw4">interface</span> IMusicStoreEntities <span class="sy0">:</span> IDisposable <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="co1">// ...</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw4">int</span> SaveChanges<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; <span class="br0">&#125;</span>
<span class="br0">&#125;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">namespace MvcMusicStore.Models {
	public class MusicStoreEntities : DbContext, IMusicStoreEntities {
		// ...
	}

	public interface IMusicStoreEntities : IDisposable {
		// ...

		int SaveChanges();
	}
}</pre></div></div>

<p>With those last couple changes completed, the build is happy and I have a minimal interface. </p>
<p>Next I want to replace the behavior in the controllers of creating their own local DbContext instance with using one that is provided to them. I started this by defining the two constructors above for my CheckoutController, but rather than copy and paste this new behavior to all of the controllers, I&#8217;ll move the responsibility to a ControllerBase class:</p>
<p><b>MVCMusicStore/Controllers/ControllerBase.cs</b> (New File)</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="csharp"><thead><tr><td colspan="2"  class="head">C#</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
</pre></td><td class="de1"><pre class="de1"><span class="kw1">namespace</span> MvcMusicStore<span class="sy0">.</span><span class="me1">Controllers</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; <span class="kw1">public</span> <span class="kw4">class</span> ControllerBase <span class="sy0">:</span>Controller <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">private</span> IMusicStoreEntities _storeDB<span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">protected</span> IMusicStoreEntities StoreDB <span class="br0">&#123;</span> <span class="kw1">get</span> <span class="br0">&#123;</span> <span class="kw1">return</span> _storeDB<span class="sy0">;</span> <span class="br0">&#125;</span> <span class="br0">&#125;</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">public</span> ControllerBase<span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="sy0">:</span> <span class="kw1">this</span><span class="br0">&#40;</span><span class="kw3">new</span> MusicStoreEntities<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span> <span class="br0">&#125;</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">public</span> ControllerBase<span class="br0">&#40;</span>IMusicStoreEntities storeDb<span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; _storeDB <span class="sy0">=</span> storeDb<span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp; &nbsp; <span class="br0">&#125;</span>
<span class="br0">&#125;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">namespace MvcMusicStore.Controllers {
	public class ControllerBase :Controller {
		private IMusicStoreEntities _storeDB;

		protected IMusicStoreEntities StoreDB { get { return _storeDB; } }

		public ControllerBase() : this(new MusicStoreEntities()) { }

		public ControllerBase(IMusicStoreEntities storeDb) {
			_storeDB = storeDb;
		}
	}
}</pre></div></div>

<p><b>MVCMusicStore/Controllers/CheckoutController.cs</b> (New File)</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="csharp"><thead><tr><td colspan="2"  class="head">C#</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
</pre></td><td class="de1"><pre class="de1"><span class="kw1">namespace</span> MvcMusicStore<span class="sy0">.</span><span class="me1">Controllers</span> <span class="br0">&#123;</span>
&nbsp;
&nbsp; &nbsp; <span class="br0">&#91;</span>Authorize<span class="br0">&#93;</span>
&nbsp; &nbsp; <span class="kw1">public</span> <span class="kw4">class</span> CheckoutController <span class="sy0">:</span> ControllerBase <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">const</span> <span class="kw4">string</span> PromoCode <span class="sy0">=</span> <span class="st0">&quot;FREE&quot;</span><span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">public</span> CheckoutController<span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span> <span class="br0">&#125;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">public</span> CheckoutController<span class="br0">&#40;</span>IMusicStoreEntities storeDb<span class="br0">&#41;</span> <span class="sy0">:</span> <span class="kw1">base</span><span class="br0">&#40;</span>storeDb<span class="br0">&#41;</span> <span class="br0">&#123;</span> <span class="br0">&#125;</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; <span class="co1">// ...</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; <span class="co1">//</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="co1">// POST: /Checkout/AddressAndPayment</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#91;</span>HttpPost<span class="br0">&#93;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">public</span> ActionResult AddressAndPayment<span class="br0">&#40;</span>FormCollection values<span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="co1">// ...</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="co1">//Save Order</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; StoreDB<span class="sy0">.</span><span class="me1">Orders</span><span class="sy0">.</span><span class="kw1">Add</span><span class="br0">&#40;</span>order<span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; StoreDB<span class="sy0">.</span><span class="me1">SaveChanges</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="co1">// ...</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; <span class="co1">// ...</span>
&nbsp; &nbsp; <span class="br0">&#125;</span>
<span class="br0">&#125;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">namespace MvcMusicStore.Controllers {

	[Authorize]
	public class CheckoutController : ControllerBase {
		const string PromoCode = "FREE";

		public CheckoutController() { }
		public CheckoutController(IMusicStoreEntities storeDb) : base(storeDb) { }

		// ...

		//
		// POST: /Checkout/AddressAndPayment
		[HttpPost]
		public ActionResult AddressAndPayment(FormCollection values) {
			// ...
				//Save Order
				StoreDB.Orders.Add(order);
				StoreDB.SaveChanges();
			// ...
		}

		// ...
	}
}</pre></div></div>

<p>After replacing the private variable and constructors from the CheckoutController with inheritance from the ControllerBase, the three places referencing the old variable are showing as errors and I&#8217;ll simply update them to the public property in the ControllerBase. </p>
<p>The last place I need to change is the ShoppingCart object. Despite being a model object, the ShoppingCart object instantiates it&#8217;s own local instance of the MusicStoreEntities context. The first time I converted the project, I missed this case and had some odd unit test results until I realized the cart was still accessing a real database.</p>
<p><i>In larger projects it can be common to have components separately instantiated in random nooks and crannies, not only making it tricky to convert for unit testing but also making the production code more fragile and harder to change and troubleshoot. After replacing the local ones, it&#8217;s a good idea to execute some searches through the codebase to find other references to the concrete classes.</i></p>
<p>Just like the Controllers, I&#8217;ll update the ShoppingCart object to use the interface and use <a href="http://en.wikipedia.org/wiki/Dependency_injection" title="Dependancy Injection at Wikipedia">Dependancy Injection</a> to pass in the context I expect it to use. Besides updating the constructor to require an IMusicStoreEntities context, I&#8217;ll also need to update the static methods that return instances of the cart:</p>
<p><b>MVCMusicStore/Models/ShoppingCart.cs</b> (New File)</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="csharp"><thead><tr><td colspan="2"  class="head">C#</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
</pre></td><td class="de1"><pre class="de1"><span class="kw1">namespace</span> MvcMusicStore<span class="sy0">.</span><span class="me1">Models</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; <span class="kw1">public</span> <span class="kw1">partial</span> <span class="kw4">class</span> ShoppingCart <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; IMusicStoreEntities storeDB<span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; <span class="co1">// ...</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">public</span> ShoppingCart<span class="br0">&#40;</span>IMusicStoreEntities dbContext<span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">this</span><span class="sy0">.</span><span class="me1">storeDB</span> <span class="sy0">=</span> dbContext<span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp; &nbsp; &nbsp; &nbsp; 
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">public</span> <span class="kw1">static</span> ShoppingCart GetCart<span class="br0">&#40;</span>HttpContextBase context, IMusicStoreEntities dbContext<span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">var</span> cart <span class="sy0">=</span> <span class="kw3">new</span> ShoppingCart<span class="br0">&#40;</span>dbContext<span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; cart<span class="sy0">.</span><span class="me1">ShoppingCartId</span> <span class="sy0">=</span> cart<span class="sy0">.</span><span class="me1">GetCartId</span><span class="br0">&#40;</span>context<span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">return</span> cart<span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; <span class="co1">// Helper method to simplify shopping cart calls</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">public</span> <span class="kw1">static</span> ShoppingCart GetCart<span class="br0">&#40;</span>Controller controller, IMusicStoreEntities dbContext<span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">return</span> GetCart<span class="br0">&#40;</span>controller<span class="sy0">.</span><span class="me1">HttpContext</span>, dbContext<span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; <span class="co1">// ...</span>
&nbsp; &nbsp; <span class="br0">&#125;</span>
<span class="br0">&#125;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">namespace MvcMusicStore.Models {
	public partial class ShoppingCart {
		IMusicStoreEntities storeDB;

		// ...

		public ShoppingCart(IMusicStoreEntities dbContext) {
			this.storeDB = dbContext;
		}
		
		public static ShoppingCart GetCart(HttpContextBase context, IMusicStoreEntities dbContext) {
			var cart = new ShoppingCart(dbContext);
			cart.ShoppingCartId = cart.GetCartId(context);
			return cart;
		}

		// Helper method to simplify shopping cart calls
		public static ShoppingCart GetCart(Controller controller, IMusicStoreEntities dbContext) {
			return GetCart(controller.HttpContext, dbContext);
		}

		// ...
	}
}</pre></div></div>

<p>With these changes added, the next build errors direct me to the places that need to pass the extra argument. For the CheckoutController, I&#8217;ll use the public property exposed by the Controllerbase. For the AccountController I need to instantiate a MusicStoreEntities object to pass (or convert it to use ControllerBase), and for the others I can plug in their local storeDb variable.</p>
<p><i>Note: In my <a href="https://bitbucket.org/tarwn/mvcmusicstore.main/changeset/82d254cd9f1d" title="First Changeset for Unit Test Changes">implementation</a>, I went ahead and converted all of my controllers over to the new ControllerBase. The downside of this method is that the more you convert, the more you have to test. Since I don&#8217;t have unit tests in place, this means a full manual regression test. On a larger project I would limit my changes only to the pieces I was planning on adding unit tests to and had time to manually regression test, but I would build my objects (like the ControllerBase) in such a way that the next conversions could take advantage and extend them when it&#8217;s their turn.</i></p>
<h2>Adding a Test Project</h2>
<p>After manually regression testing my changes to ensure they work, I&#8217;ll add the test project and create the first test class.</p>
<p>To get started, I&#8217;ll create the test project and use the package manager to get the RhinoMocks package. This will allow me to mock some of the resources the controller requires. With the project and resuorces ready, I can create the first CheckoutController test.</p>
<p><b>MvcMusicStoreTests/Controllers/CheckoutController.cs</b></p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="csharp"><thead><tr><td colspan="2"  class="head">C#</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
</pre></td><td class="de1"><pre class="de1"><span class="kw1">namespace</span> MvcMusicStoreTests<span class="sy0">.</span><span class="me1">Controllers</span> <span class="br0">&#123;</span>
&nbsp;
&nbsp; &nbsp; <span class="br0">&#91;</span>TestClass<span class="br0">&#93;</span>
&nbsp; &nbsp; <span class="kw1">public</span> <span class="kw4">class</span> CheckoutControllerTests <span class="br0">&#123;</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#91;</span>TestMethod<span class="br0">&#93;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">public</span> <span class="kw4">void</span> AddressAndPayment_ReturnsView<span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; CheckoutController controller <span class="sy0">=</span> <span class="kw3">new</span> CheckoutController<span class="br0">&#40;</span>MusicStoreEntitiesFactory<span class="sy0">.</span><span class="me1">GetEmpty</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ActionResult result <span class="sy0">=</span> controller<span class="sy0">.</span><span class="me1">AddressAndPayment</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Assert<span class="sy0">.</span><span class="me1">IsNotNull</span><span class="br0">&#40;</span>result<span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp; &nbsp; <span class="br0">&#125;</span>
<span class="br0">&#125;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">namespace MvcMusicStoreTests.Controllers {

	[TestClass]
	public class CheckoutControllerTests {

		[TestMethod]
		public void AddressAndPayment_ReturnsView() {
			CheckoutController controller = new CheckoutController(MusicStoreEntitiesFactory.GetEmpty());

			ActionResult result = controller.AddressAndPayment();

			Assert.IsNotNull(result);
		}
	}
}</pre></div></div>

<p>This test is using the Arrange, Act, Assert (AAA) unit testing pattern and is a basic test that asserts that the CheckoutController returns a result when we call AddressAndPayment. In the first step I call a Factory class to populate the data context of our CheckoutController. I have also started abstracting out obvious resources that will need to be fleshed out later, but haven&#8217;t started to define what those behaviors will be (I&#8217;ll let future tests decide that for me).</p>
<p><i>You may also notice that the folder structure for my test matches the structure for the class that is under tests, this makes it easier to keep the project organized and to find matching files across the projects.</i></p>
<p><b>MvcMusicStoreTests/MusicStoreEntitiesFactory.cs</b></p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="csharp"><thead><tr><td colspan="2"  class="head">C#</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
</pre></td><td class="de1"><pre class="de1"><span class="kw1">namespace</span> MvcMusicStoreTests <span class="br0">&#123;</span>
&nbsp; &nbsp; <span class="kw4">class</span> MusicStoreEntitiesFactory <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">public</span> <span class="kw1">static</span> IMusicStoreEntities GetEmpty<span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">return</span> MockRepository<span class="sy0">.</span><span class="me1">GenerateMock</span><span class="sy0">&lt;</span>IMusicStoreEntities<span class="sy0">&gt;</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp; &nbsp; <span class="br0">&#125;</span>
<span class="br0">&#125;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">namespace MvcMusicStoreTests {
	class MusicStoreEntitiesFactory {
		public static IMusicStoreEntities GetEmpty() {
			return MockRepository.GenerateMock&lt;IMusicStoreEntities&gt;();
		}
	}
}</pre></div></div>

<p>I don&#8217;t actually need any data yet, so I can use RhinoMock&#8217;s MockRepository to automaitcally create a stub implementation of the IMusicStoreEntities interface the controller requires.</p>
<h2>Fake Db and Http Contexts</h2>
<p>Now that I have a basic unit test working, I can start moving into more complex (and useful) tests. This is where things start to get challenging. The data context is already abstracted from the controllers, but the framework also depends heavily on the web server context, including bits like querystring and form post variables from the client browser, session and cookie state containers, and additional context for Membership information.</p>
<p>While it is possible to start mocking or stubbing our way through this whole list, it can be pretty painful and isn&#8217;t really necessary. This particular problem has already been solved before, so I&#8217;ll import the MVC3 TestHelper package (<a href="http://nuget.org/List/Packages/MvcContrib.Mvc3.TestHelper-ci" title="Install the MvcContrib.Mvc3.TestHelper-ci package from Nuget">Install-Package MvcContrib.Mvc3.TestHelper-ci</a>) to do the work for me.</p>
<h3>Initial Data-Free Tests</h3>
<p>I&#8217;m going to continue to ease into making this controller testable by choosing an action that has minimal data store interactions. This will allow me to focus on getting the HttpContext work out of the way first, instead of trying to do both at the same time.</p>
<p>Rather than trying to guess ahead as to what pieces of the package I&#8217;ll need, I&#8217;m going to create an instance of the test and build out just the logic I need to make it pass (Test Driven Test Development?). Here is that test:</p>
<p><b>MvcMusicStoreTests/Controllers/CheckoutController.cs</b></p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="csharp"><thead><tr><td colspan="2"  class="head">C#</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
</pre></td><td class="de1"><pre class="de1"><span class="kw1">namespace</span> MvcMusicStoreTests<span class="sy0">.</span><span class="me1">Controllers</span> <span class="br0">&#123;</span>
&nbsp;
&nbsp; &nbsp; <span class="br0">&#91;</span>TestClass<span class="br0">&#93;</span>
&nbsp; &nbsp; <span class="kw1">public</span> <span class="kw4">class</span> CheckoutControllerTests <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="co1">// ...</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#91;</span>TestMethod<span class="br0">&#93;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">public</span> <span class="kw4">void</span> AddressAndPayment_PostInvalidOrderNoPromotion_ReturnsOrderWithErrors<span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; CheckoutController controller <span class="sy0">=</span> GetWiredUpController<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; FormCollection orderCollection <span class="sy0">=</span> <span class="kw3">new</span> FormCollection<span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#123;</span><span class="st0">&quot;FirstName&quot;</span>,<span class="st0">&quot;fn&quot;</span><span class="br0">&#125;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; controller<span class="sy0">.</span><span class="me1">ValueProvider</span> <span class="sy0">=</span> orderCollection<span class="sy0">.</span><span class="me1">ToValueProvider</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ViewResult result <span class="sy0">=</span> controller<span class="sy0">.</span><span class="me1">AddressAndPayment</span><span class="br0">&#40;</span>orderCollection<span class="br0">&#41;</span> <span class="kw1">as</span> ViewResult<span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Assert<span class="sy0">.</span><span class="me1">IsInstanceOfType</span><span class="br0">&#40;</span>result<span class="sy0">.</span><span class="me1">ViewData</span><span class="sy0">.</span><span class="me1">Model</span>, <span class="kw3">typeof</span><span class="br0">&#40;</span>Order<span class="br0">&#41;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Assert<span class="sy0">.</span><span class="me1">AreNotEqual</span><span class="br0">&#40;</span><span class="nu0">0</span>, result<span class="sy0">.</span><span class="me1">ViewData</span><span class="sy0">.</span><span class="me1">ModelState</span><span class="sy0">.</span><span class="me1">Count</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp; &nbsp; <span class="br0">&#125;</span>
<span class="br0">&#125;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">namespace MvcMusicStoreTests.Controllers {

	[TestClass]
	public class CheckoutControllerTests {
		// ...

		[TestMethod]
		public void AddressAndPayment_PostInvalidOrderNoPromotion_ReturnsOrderWithErrors() {
			CheckoutController controller = GetWiredUpController();
			FormCollection orderCollection = new FormCollection() {
				{"FirstName","fn"}
			};
			controller.ValueProvider = orderCollection.ToValueProvider();

			ViewResult result = controller.AddressAndPayment(orderCollection) as ViewResult;

			Assert.IsInstanceOfType(result.ViewData.Model, typeof(Order));
			Assert.AreNotEqual(0, result.ViewData.ModelState.Count);
		}
	}
}</pre></div></div>

<p>I&#8217;m relegating the logic of creating the controller to a local function called <code class="codespan">GetWiredUpController()</code>, trusting it to return a functioning controller. I then create a FormCollection of values and assign it to the controller as if they had been sent from a client browser. The rest of the code is the Act and Assert steps of the test to call the controller and verify the result.</p>
<p>On the first run, the <code class="codespan">GetWiredUpController()</code> method isn&#8217;t giving me everything I need, but I can work through that iteratively until I have all the pieces I need. This took several iterations, so I&#8217;ll skip ahead to the end results. </p>
<p><b>MvcMusicStoreTests/Controllers/CheckoutController.cs</b></p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="csharp"><thead><tr><td colspan="2"  class="head">C#</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
</pre></td><td class="de1"><pre class="de1"><span class="kw1">namespace</span> MvcMusicStoreTests<span class="sy0">.</span><span class="me1">Controllers</span> <span class="br0">&#123;</span>
&nbsp;
&nbsp; &nbsp; <span class="br0">&#91;</span>TestClass<span class="br0">&#93;</span>
&nbsp; &nbsp; <span class="kw1">public</span> <span class="kw4">class</span> CheckoutControllerTests <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="co1">// ...</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">private</span> CheckoutController GetWiredUpController<span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; CheckoutController controller <span class="sy0">=</span> <span class="kw3">new</span> CheckoutController<span class="br0">&#40;</span>MusicStoreEntitiesFactory<span class="sy0">.</span><span class="me1">GetEmpty</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; TestControllerBuilder _builder <span class="sy0">=</span> <span class="kw3">new</span> TestControllerBuilder<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; _builder<span class="sy0">.</span><span class="me1">HttpContext</span><span class="sy0">.</span><span class="me1">User</span> <span class="sy0">=</span> <span class="kw3">new</span> FakeUser<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; _builder<span class="sy0">.</span><span class="me1">InitializeController</span><span class="br0">&#40;</span>controller<span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">return</span> controller<span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp; &nbsp; <span class="br0">&#125;</span>
<span class="br0">&#125;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">namespace MvcMusicStoreTests.Controllers {

	[TestClass]
	public class CheckoutControllerTests {
		// ...

		private CheckoutController GetWiredUpController() {
			CheckoutController controller = new CheckoutController(MusicStoreEntitiesFactory.GetEmpty());
			TestControllerBuilder _builder = new TestControllerBuilder();
			_builder.HttpContext.User = new FakeUser();

			_builder.InitializeController(controller);
			return controller;
		}
	}
}</pre></div></div>

<p>Like the initial test, I create the controller and populate it with an empty IMusicStoreEntities call from the factory. I then create an instance of the TestControllerBuilder class from the MVCContrib package, which will wire together all the stubs and fakes necessary to present Application, Session, and other necessary HttpContext values to the controller. I&#8217;ll add my own FakeUser object (an implementation of IPrincipal) to the builder, then have it do it&#8217;s magic on the CheckoutController instance. Voila, one fully wired up CheckoutController.</p>
<h3>Totally Faked Out, Just Add Data&#8230;</h3>
<p>Now that I have the controller logic able to run independently from a real HTTP request, I can return to finish work on the methods that interact more heavily with the data store.</p>
<p>In order to inject some fake data, I need to replace the stubbed out IMusicStoreEntities data context in the MusicStoreEntitiesFactory with a concrete Fake implementation. This will allow me to add collections that I can locally push data into in order to setup scenarios for individual tests.</p>
<p><b>MvcMusicStoreTests/MusicStoreEntitiesFactory.cs</b></p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="csharp"><thead><tr><td colspan="2"  class="head">C#</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
</pre></td><td class="de1"><pre class="de1"><span class="kw1">namespace</span> MvcMusicStoreTests <span class="br0">&#123;</span>
&nbsp; &nbsp; <span class="kw4">class</span> MusicStoreEntitiesFactory <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">public</span> <span class="kw1">static</span> IMusicStoreEntities GetEmpty<span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; FakeDataStore datastore <span class="sy0">=</span> <span class="kw3">new</span> FakeDataStore<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; datastore<span class="sy0">.</span><span class="me1">Albums</span> <span class="sy0">=</span> <span class="kw3">new</span> FakeDbSet<span class="sy0">&lt;</span>Album<span class="sy0">&gt;</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; datastore<span class="sy0">.</span><span class="me1">Artists</span> <span class="sy0">=</span> <span class="kw3">new</span> FakeDbSet<span class="sy0">&lt;</span>Artist<span class="sy0">&gt;</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; datastore<span class="sy0">.</span><span class="me1">Carts</span> <span class="sy0">=</span> <span class="kw3">new</span> FakeDbSet<span class="sy0">&lt;</span>Cart<span class="sy0">&gt;</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; datastore<span class="sy0">.</span><span class="me1">Genres</span> <span class="sy0">=</span> <span class="kw3">new</span> FakeDbSet<span class="sy0">&lt;</span>Genre<span class="sy0">&gt;</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; datastore<span class="sy0">.</span><span class="me1">OrderDetails</span> <span class="sy0">=</span> <span class="kw3">new</span> FakeDbSet<span class="sy0">&lt;</span>OrderDetail<span class="sy0">&gt;</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; datastore<span class="sy0">.</span><span class="me1">Orders</span> <span class="sy0">=</span> <span class="kw3">new</span> FakeDbSet<span class="sy0">&lt;</span>Order<span class="sy0">&gt;</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">return</span> datastore<span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp; &nbsp; <span class="br0">&#125;</span>
<span class="br0">&#125;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">namespace MvcMusicStoreTests {
	class MusicStoreEntitiesFactory {
		public static IMusicStoreEntities GetEmpty() {
			FakeDataStore datastore = new FakeDataStore();
			datastore.Albums = new FakeDbSet&lt;Album&gt;();
			datastore.Artists = new FakeDbSet&lt;Artist&gt;();
			datastore.Carts = new FakeDbSet&lt;Cart&gt;();
			datastore.Genres = new FakeDbSet&lt;Genre&gt;();
			datastore.OrderDetails = new FakeDbSet&lt;OrderDetail&gt;();
			datastore.Orders = new FakeDbSet&lt;Order&gt;();
			return datastore;
		}
	}
}</pre></div></div>

<p>The fake implementations of the <a href="https://bitbucket.org/tarwn/mvcmusicstore.main/src/8831221efe43/MvcMusicStoreTests/Fakes/FakeDataStore.cs" title="See the FakeDataStore class" target="_blank">datastore</a> exposes collections that implement <a href="https://bitbucket.org/tarwn/mvcmusicstore.main/src/8831221efe43/MvcMusicStoreTests/Fakes/FakeDbSet.cs" title="See the FakeDbSet class" target="_blank">IDbSet</a>. With this setup, it is easy to add test data on a per-test basis and without the overhead of a database (work) or some form of test data management (more work).</p>
<p>Using this new capability, I can start building out more extensive tests.</p>
<p><b>MvcMusicStoreTests/Controllers/CheckoutController.cs</b></p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="csharp"><thead><tr><td colspan="2"  class="head">C#</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
</pre></td><td class="de1"><pre class="de1"><span class="kw1">namespace</span> MvcMusicStoreTests<span class="sy0">.</span><span class="me1">Controllers</span> <span class="br0">&#123;</span>
&nbsp;
&nbsp; &nbsp; <span class="br0">&#91;</span>TestClass<span class="br0">&#93;</span>
&nbsp; &nbsp; <span class="kw1">public</span> <span class="kw4">class</span> CheckoutControllerTests <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="co1">// ...</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#91;</span>TestMethod<span class="br0">&#93;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">public</span> <span class="kw4">void</span> Complete_ValidOrderIdAndUser_ReturnsProperView<span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; FakeDataStore dataStore <span class="sy0">=</span> MusicStoreEntitiesFactory<span class="sy0">.</span><span class="me1">GetEmpty</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; dataStore<span class="sy0">.</span><span class="me1">Orders</span><span class="sy0">.</span><span class="kw1">Add</span><span class="br0">&#40;</span><span class="kw3">new</span> Order<span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span> OrderId<span class="sy0">=</span><span class="nu0">5</span>, Username<span class="sy0">=</span><span class="st0">&quot;Bob&quot;</span> <span class="br0">&#125;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; FakeUser user <span class="sy0">=</span> <span class="kw3">new</span> FakeUser<span class="br0">&#40;</span><span class="kw3">new</span> FakeIdentity<span class="br0">&#40;</span><span class="st0">&quot;Bob&quot;</span>,<span class="st0">&quot;&quot;</span>,<span class="kw1">true</span><span class="br0">&#41;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; CheckoutController controller <span class="sy0">=</span> GetWiredUpController<span class="br0">&#40;</span>store<span class="sy0">:</span> dataStore, user<span class="sy0">:</span> user<span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ViewResult result <span class="sy0">=</span> controller<span class="sy0">.</span><span class="me1">Complete</span><span class="br0">&#40;</span><span class="nu0">5</span><span class="br0">&#41;</span> <span class="kw1">as</span> ViewResult<span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Assert<span class="sy0">.</span><span class="me1">AreEqual</span><span class="br0">&#40;</span><span class="nu0">5</span>, result<span class="sy0">.</span><span class="me1">ViewData</span><span class="sy0">.</span><span class="me1">Model</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">namespace MvcMusicStoreTests.Controllers {

	[TestClass]
	public class CheckoutControllerTests {
		// ...

		[TestMethod]
		public void Complete_ValidOrderIdAndUser_ReturnsProperView() {
			FakeDataStore dataStore = MusicStoreEntitiesFactory.GetEmpty();
			dataStore.Orders.Add(new Order() { OrderId=5, Username="Bob" });
			FakeUser user = new FakeUser(new FakeIdentity("Bob","",true));
			CheckoutController controller = GetWiredUpController(store: dataStore, user: user);
			
			ViewResult result = controller.Complete(5) as ViewResult;

			Assert.AreEqual(5, result.ViewData.Model);
		}</pre></div></div>

<p>Without any database or HttpContext, I can now test that a valid user with a valid order id will complete processing successfully. I&#8217;ve extended the WiredUpController to take optional arguments to simplify creating scenarios specific to an individual test, again adding functionality only as we need it to satisfy our tests.</p>
<p>With a working fake data context a working fake HttpContext and sample tests that interact with both, I can make additional tests very easily and have the groundwork in place to start adding test coverage to other controllers.</p>
<h2>Finishing Up</h2>
<p>The source code is available <a href="https://bitbucket.org/tarwn/mvcmusicstore.main/src" title="Source code on BitBucket">on BitBucket</a>. Initially I went down a number of blind alleys before I started using the MVC3 Contrib package, that one decision greatly simplified seperating the test code from it&#8217;s expectations of a real HttpContext. I tried to cover the most important parts and this same process should be applicable to other projects as well. If you have any questions about how I got from one step to the next, or what happened between changesets in the source repository, please don&#8217;t hesitate to ask here, in the forum, or via the contact form on my website.</p>
<p>Creating the tests incrementally and writing only the minimum code necessary may have looked longer, but it actually helped create a pretty tight codebase for the testing and helped to uncover the lack of server-side validation in the checkout routine, a bug in the tutorial code. Had I tried to build everything I needed up front, I probably would have gone further down several blind alleys and ended up with a much larger codebase then I actually needed.</p>
<h2>Next Steps</h2>
<p>The project now has the beginning of unit test coverage and the tools necessary to start spreading those tests to the rest of our controllers. In the next post I&#8217;ll incorporate these test into the build process, running and capturing the test results as part of the CI build job.</p>
<style>
.thelist li{ color: #666666; }
.thelist .cur{ font-style: italic; color: black; }
</style>
<ul class="thelist">
<li><a href="http://wiki.lessthandot.com/index.php/Eli%27s_Continuous_Delivery_Project" title="Wiki post for Eli's Continuous Delivery Project">Wiki Post</a></li>
<li><a href="/index.php/EnterpriseDev/application-lifecycle-management/starting-a-continuous-delivery-project" title="Starting a Continuous Delivery Project">Starting a Continuous Delivery Project</a></li>
<li><a href="/index.php/EnterpriseDev/application-lifecycle-management/continuous-delivery-project-setting-up" title="Setting up the Continuous Integration stage">Setting up the Continuous Integration stage</a></li>
<li class="cur"><a href="/index.php/EnterpriseDev/UnitTest/continuous-delivery-project-making-mvcmusicstore" title="Making ASP.Net MVC Music Store Testable">Making ASP.Net MVC Music Store Testable</a></li>
<li><a href="/index.php/EnterpriseDev/UnitTest/continuous-delivery-project-incorporating-the" title="Incorporating Unit Tests in the CI stage">Incorporating Unit Tests in the CI stage</a></li>
<li><a href="/index.php/EnterpriseDev/application-lifecycle-management/continuous-delivery-project-deploy-and" title="Deploy and Smoke Test">Deploy and Smoke Test</a></li>
<li><a href="/index.php/EnterpriseDev/application-lifecycle-management/continuous-delivery-adding-an-automated" title="Adding an Automated Interface Testing stage">Adding an Automated Interface Testing stage</a></li>
<li><a href="/index.php/EnterpriseDev/application-lifecycle-management/continuous-delivery-dashboard-qa-and" title="Dashboard, QA and Production Deployment stage">Dashboard, QA and Production Deployment stage</a></li>
</ul>
]]></content>
			<link rel="replies" type="text/html" href="/index.php/enterprisedev/unittest/continuous-delivery-project-making-mvcmusicstore/#comments" thr:count="0"/>
		<link rel="replies" type="application/atom+xml" href="/index.php/enterprisedev/unittest/continuous-delivery-project-making-mvcmusicstore/feed/atom/" thr:count="0"/>
		<thr:total>0</thr:total>
		</entry>
	</feed>
