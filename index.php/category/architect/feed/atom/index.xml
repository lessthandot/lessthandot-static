<?xml version="1.0" encoding="UTF-8"?><feed
  xmlns="http://www.w3.org/2005/Atom"
  xmlns:thr="http://purl.org/syndication/thread/1.0"
  xml:lang="en-US"
  xml:base="/wp-atom.php"
   >
	<title type="text">Architecture, Design and Strategy &#8211; LessthanDot</title>
	<subtitle type="text">A Technical Community for IT Professionals</subtitle>

	<updated>2019-03-09T12:50:36Z</updated>

	<link rel="alternate" type="text/html" href="/" />
	<id>/index.php/feed/atom/</id>
	<link rel="self" type="application/atom+xml" href="/index.php/category/architect/feed/atom/" />

	<generator uri="https://wordpress.org/" version="4.6.1">WordPress</generator>
	<entry>
		<author>
			<name>damber</name>
					</author>
		<title type="html"><![CDATA[Software Development Survey 2017]]></title>
		<link rel="alternate" type="text/html" href="/index.php/webdev/software-development-survey-2017/" />
		<id>/?p=8651</id>
		<updated>2017-05-30T19:28:11Z</updated>
		<published>2017-05-31T17:10:36Z</published>
		<category scheme="/" term="All Blogs" /><category scheme="/" term="Architecture, Design and Strategy" /><category scheme="/" term="Data Management" /><category scheme="/" term="Designing Multi-Application Solutions" /><category scheme="/" term="Designing Software" /><category scheme="/" term="Enterprise Architecture" /><category scheme="/" term="Enterprise Developer" /><category scheme="/" term="Enterprise Development" /><category scheme="/" term="IT Professionals" /><category scheme="/" term="Management" /><category scheme="/" term="Web Developer" />		<summary type="html"><![CDATA[&#160; So, you’re a developer? or an architect? or maybe even a technical delivery manager? Great 🙂 I need you! I’m currently doing some research for an upcoming book, and for a new software product, and who better to ask than those that are building and delivering software solutions each and every day? So I’d like [&#8230;]]]></summary>
		<content type="html" xml:base="/index.php/webdev/software-development-survey-2017/"><![CDATA[<p class="graf graf--p graf-after--figure"><img class="aligncenter size-large wp-image-8652" src="/wp-content/uploads/2017/05/shutterstock_374219557-small-1024x683.jpg" alt="Person having a bright idea" width="800" height="533" srcset="/wp-content/uploads/2017/05/shutterstock_374219557-small-1024x683.jpg 1024w, /wp-content/uploads/2017/05/shutterstock_374219557-small-300x200.jpg 300w, /wp-content/uploads/2017/05/shutterstock_374219557-small-768x512.jpg 768w, /wp-content/uploads/2017/05/shutterstock_374219557-small.jpg 1440w" sizes="(max-width: 800px) 100vw, 800px" /></p>
<p>&nbsp;</p>
<p id="f163" class="graf graf--p graf-after--figure">So, you’re a developer? or an architect? or maybe even a technical delivery manager?</p>
<p id="654c" class="graf graf--p graf-after--p">Great <img src="https://s.w.org/images/core/emoji/2/72x72/1f642.png" alt="🙂" class="wp-smiley" style="height: 1em; max-height: 1em;" /></p>
<p id="e525" class="graf graf--p graf-after--p">I need you!</p>
<p id="4ba4" class="graf graf--p graf-after--p">I’m currently doing some research for an upcoming book, and for a new software product, and who better to ask than those that are building and delivering software solutions each and every day?</p>
<p id="4b38" class="graf graf--p graf-after--p">So I’d like you to share the wisdom of your experience, by filling in a survey that will take you about 10–15 minutes to complete, about your experiences with designing, building, running and managing software. Start-ups and Enterprises both welcome.</p>
<p id="5c00" class="graf graf--p graf-after--p">There is a prize draw for an Amazon Echo, which you can opt into, as a thank-you for taking the time.</p>
<p id="8b54" class="graf graf--p graf-after--p">So, if you design, build or manage software on a regular basis, I would like to hear from you…</p>
<p id="3ecf" class="graf graf--p graf-after--p">Do you think you can help?</p>
<p id="1415" class="graf graf--p graf-after--p graf--trailing"><a class="markup--anchor markup--p-anchor" href="https://enterprisecore.io/page/making-systems-work-survey-2017" target="_blank" rel="noopener">https://enterprisecore.io/page/making-systems-work-survey-2017</a></p>
<p>&nbsp;</p>
<p>&nbsp;</p>
]]></content>
			<link rel="replies" type="text/html" href="/index.php/webdev/software-development-survey-2017/#comments" thr:count="2"/>
		<link rel="replies" type="application/atom+xml" href="/index.php/webdev/software-development-survey-2017/feed/atom/" thr:count="2"/>
		<thr:total>2</thr:total>
		</entry>
		<entry>
		<author>
			<name>Eli Weinstock-Herman (tarwn)</name>
					</author>
		<title type="html"><![CDATA[Distributed Storage: How SQL Azure Replicas Work]]></title>
		<link rel="alternate" type="text/html" href="/index.php/architect/distributed-storage-how-sql-azure-replicas-work/" />
		<id>/?p=4228</id>
		<updated>2016-02-07T19:30:51Z</updated>
		<published>2015-11-18T14:36:12Z</published>
		<category scheme="/" term="Architecture, Design and Strategy" /><category scheme="/" term="Azure" /><category scheme="/" term="Data Management" /><category scheme="/" term="distributed systems" /><category scheme="/" term="sql azure" />		<summary type="html"><![CDATA[One of the benefits of Microsoft SQL Azure over an on-premises or VM installation is built-in resiliency. In a typical on-premises/VM installation your database lives on a single server, with all the single points of failure that brings to mind. SQL Azure, on the other hand, always has 3 or more replicas assigned for each [&#8230;]]]></summary>
		<content type="html" xml:base="/index.php/architect/distributed-storage-how-sql-azure-replicas-work/"><![CDATA[<p>One of the benefits of Microsoft SQL Azure over an on-premises or VM installation is built-in resiliency. In a typical on-premises/VM installation your database lives on a single server, with all the single points of failure that brings to mind. SQL Azure, on the other hand, always has 3 or more replicas assigned for each database. This allows it to weather issues like network glitches and commodity hardware failures with no administration and little to no downtime.</p>
<div style="margin: 1em 3em; padding: 2em; font-size: 110%; border: 1px solid #dddddd; background-color: #eeeeee; border-radius: 6px;">There are interactive simulations below! Skip ahead if you just want to play with them, read through if you want more of the details <img src="https://s.w.org/images/core/emoji/2/72x72/1f642.png" alt="🙂" class="wp-smiley" style="height: 1em; max-height: 1em;" /></div>
<p>Finding good, detailed articles about this has been difficult. Here&#8217;s a couple I found:</p>
<ul>
<li><a href="https://azure.microsoft.com/en-us/blog/fault-tolerance-in-windows-azure-sql-database/">Fault-tolerance in Windows Azure SQL Database</a></li>
<li><a href="http://social.technet.microsoft.com/wiki/contents/articles/1695.inside-microsoft-azure-sql-database/revision/33.aspx">Inside Microsoft Azure SQL Database</a> (retired article &#8211; this is a revision from prior to it being taken down)</li>
</ul>
<p>What really interested me was the database communications. How do reads flow into the database when there&#8217;s 3 of them? How do writes occur when one of my database replicas is down? How does a replica catch back up when it is available again?</p>
<p>I learn well from reading, but had to reread the articles a few times over the years before the information really stuck. So this post is an attempt to approach the topic from another direction, with active simulations of how this communications works in SQL Azure.</p>
<p><i>Note: When the two disagree, I&#8217;ll rely on the slight less out of date top article. When my practical (aka, support tickets) experience disagrees with both, I&#8217;ll point it out.</i></p>
<p><i>Note 2: I suspect the simulations below will make this a mobile-unfriendly post, sorry.</i></p>
<h1>Key Details of SQL Azure</h1>
<p>Before we start answering the questions above, lets extract some details from those dense articles to set the stage. </p>
<p>There are actually several layers of systems involved in SQL Azure, this post is going to focus just on the database operations. I&#8217;ll point out when the &#8220;fabric&#8221; is involved, but it won&#8217;t be part of the simulations. That being said, here&#8217;s the key details for the database:</p>
<ul>
<li> There are a minimum of 3 database replicas at all times</li>
<li>All incoming traffic goes to the Primary replica (elected by the &#8220;fabric&#8221;)</li>
<li>Replicas exist on different physical servers (created/managed by the &#8220;fabric&#8221;)</li>
<li>Database Writes require a quorum of 2 of the 3 replicas acknowledging the write in order to COMMIT</li>
<li>Database Reads return directly from the Primary replica</li>
<li>There is support for both transactional and full restores</li>
</ul>
<p>Each &#8220;data node&#8221; in the network includes the SQL Server processes involved in the items above as well asservices for failure detection, re-establishing nodes after failure, throttling, and so on. I won&#8217;t be diving into those today, this is all about the database replica.</p>
<p>Some Warnings:</p>
<ul>
<li>As far as I know, Azure SQL does not use HTTP codes internally. I used them in the simulations below as I thought they would be more recognizable then me making something up</li>
<li>SQL Server is not limited to key/value or single statement operations, this is a simplification I made so I could focus on the mechanics of the communications instead of diving into the MSSQL storage engine</li>
</ul>
<h2>How do writes work?</h2>
<p>Writes in SQL Azure come through a TDS gateway that, transparent to us, passes our queries to the Primary replica. The replica determines what the change will be from our operation, assigns a Change Sequence Number (CSN) to it, then replicates it to the secondary replicas. The Primary replica only commits the changes after it has received at least one acknowledgement back from the secondaries, ensuring the data now is now on at least two replicas (the Primary and one secondary). </p>
<div style="margin: 1em 3em; padding: 1em; text-align: center; border: 1px solid #dddddd; background-color: #eeeeee; border-radius: 6px;">Press the &#8220;Run&#8221; button below to start sending writes from the &#8220;gateway&#8221; into the replicas. </div>
<p><iframe src="http://tarwn.github.io/DistributedSamples/Javascript/blog/azure_w.html" style="width: 800px; height: 600px; border: 2px solid #eeeeee"></iframe></p>
<p>What you&#8217;re seeing is a simulation of the writes I described above. Each replica has a set of data that has been stored and a short transaction log and indicates whether it is the &#8220;PRIMARY&#8221; or &#8220;secondary&#8221; in it&#8217;s title bar. </p>
<p>The &#8220;gateway&#8221; in the top left sends each write to the PRIMARY replica. The PRIMARY replica calculates the storage change of the write, assigns it a CSN, and sends it to the two secondary replicas. These secondaries apply the change locally and send back an acknowledgement, at which point the PRIMARY commits the change (more on this in a moment). Once the PRIMARY commits the change, it returns a success response back to the person that sent that particular INSERT or UPDATE statement.</p>
<p>Keep in mind, this is a simulation. The model for the COMMIT above is based on what I found in the articles above, but is probably not quite right (and I would love it if someone has more definitive information about this so i could improve it).</p>
<h2>How do reads work?</h2>
<p>Reads are easy. Since the TDS gateway directs all queries to the Primary replica and it always has the most up to date data, it can respond with the values it has locally without seeking a quorum from the other replicas. </p>
<div style="margin: 1em 3em; padding: 1em; text-align: center; border: 1px solid #dddddd; background-color: #eeeeee; border-radius: 6px;">Press the &#8220;Run&#8221; button to send some quick writes and then watch how reads work.</div>
<p><iframe src="http://tarwn.github.io/DistributedSamples/Javascript/blog/azure_r.html" style="width: 800px; height: 600px; border: 2px solid #eeeeee"></iframe></p>
<p>As &#8220;Read&#8221; messages come in from the gateway, the PRIMARY replica looks the value up locally and returns it directly. </p>
<p>In the real SQL Azure replicas, this means that the PRIMARY replica has more work to do then the secondaries. This is where the &#8220;fabric&#8221; behind the scenes becomes critical, as it is responsible for trying to maintain a good balance of primary (read and write load) and secondaries (writes) across each server. When a new replica is created or a new PRIMARY is elected from the existing replicas, the &#8220;fabric&#8221; has to adjust things behind the scenes to balance out the work.</p>
<h2>Weathering Outages</h2>
<p>The point of the 3 node replica setup is to get high levels of resiliency from shared commodity hardware. If an outage is short enough, a transaction log update from whichever replica has the latest log can catch a restoring replica up to date. If the log has been exhausted, a full update can catch up a replica. Eventually, if the server or replica is unavailable long enough, the fabric will provision a new replica to replace it (not implemented in the simulation).</p>
<p>To help show both short outage cases, the simulated replicas only keep their last 4 transactions. This way a replica missing only a couple transactions will restore from transactions but a replica offline for more than 4 transactions will require a full restore.</p>
<div style="margin: 1em 3em; padding: 1em; text-align: center; border: 1px solid #dddddd; background-color: #eeeeee; border-radius: 6px;">Press the &#8220;Run&#8221; button to watch a shorter and longer outage while writing.</div>
<p><iframe src="http://tarwn.github.io/DistributedSamples/Javascript/blog/azure_o.html" style="width: 800px; height: 600px; border: 2px solid #eeeeee"></iframe></p>
<p>This is running a scripted loop of operations to show both restore cases. The script presses the turbo button during write transactions so we can skip ahead to the restore operations. When a replica&#8217;s border turns red, this means it has gone offline.</p>
<p>1) We prime the network with a couple writes, take replica &#8220;B&#8221; offline, send a couple more writes, then bring replica &#8220;B&#8221; back online. This results in a restore from transaction log.<br />
2) After a couple more writes, we take replica &#8220;B&#8221; offline again, wait for 5 more writes to occur, then bring replica &#8220;B&#8221; back online. This results in a full restore.</p>
<p>When a replica comes online, it sends a restore request to the other replicas and identifies the latest CSN it applied. If the other replicas have that CSN in their log, they send back the log and the restoring replica can use the latest of those two logs to catch up. if neither of the replicas can send back a log, then the restoring replica asks for a full restore. This isn&#8217;t heavily detailed in the documentation, so this is another place that matches the document but may not quite match the reality.</p>
<p>When the PRIMARY replica goes down, the documentation outlines monitoring that occurs that causes the &#8220;fabric&#8221; to elect a new PRIMARY replica. From my own experience, one or more types of failures are actually monitored on a 5-10 minute poll and this will result in a short outage (remainder of the 5-10 minute poll loop) before it is noticed and the &#8220;fabric&#8221; elects a new PRIMARY from the remaining secondaries.</p>
<p>For longer replica outages, not included in this simulation, the &#8220;fabric&#8221; will provision a new replica from a full restore and add it to the cluster as a new secondary, replacing the bad node. </p>
<p>Now that we have Writes, Reads, and an IT Person stumbling over power cords, it&#8217;s time to put it all together and play a little.</p>
<h2>Putting it all together</h2>
<p>Here we have a functioning network and 3 buttons. One button starts a stream of random reads and writes, the next unleashes our stumbling IT person to wander aimlessly around and stumble over power cords, and the third allows you to toggle between slower and faster message travel times.</p>
<div style="margin: 1em 3em; padding: 1em; text-align: center; border: 1px solid #dddddd; background-color: #eeeeee; border-radius: 6px;">Start sending random writes, reads, and outages!</div>
<p><iframe src="http://tarwn.github.io/DistributedSamples/Javascript/blog/azure_i.html" style="width: 800px; height: 600px; border: 2px solid #eeeeee"></iframe></p>
<p>One thing you may notice is that the outages are no longer confined to a single replica, now even the primary can go down.</p>
<p>There is a more extensive example here: <a href="http://tarwn.github.io/DistributedSamples/Javascript/azureSql.html">Azure SQL Simulation Console</a></p>
<p>This adds tracking expected versus actual responses, stale data, outage stats, and SLAs as well as the ability to add additional replicas to the cluster.</p>
<h2>Where the Simulation Is Wrong(ish)</h2>
<p>There are a few things that either did not match reality or for which I couldn&#8217;t find good enough information. Feedback would be awesome for these. There are also a few places where I simplified concepts that were outside the scope of talking about the communications and restore processes, if their absence is a problem, let me know and I&#8217;ll try to extend the models.</p>
<p>Things I simplified:</p>
<ul>
<li>Monitoring: I didn&#8217;t model the fabric or neighbor-based monitoring, instead servers will magically come back online every time and monitoring is performed by the generic &#8220;network&#8221; simulation.</li>
<li>Writes/Commits: I simplified this to single insert commits</li>
<li>HTTP Error Messages: I used HTTP status codes in messages because I don&#8217;t know the internal communications and it seemed good/simple enough</li>
</ul>
<p>Things I got wrong:</p>
<ul>
<li>Commits: While I tried to match the explained process, it is not wholly accurate and there is definitely a bug when a commit comes in with an Online Primary, a restoring Secondary, and an Offline secondary. It will be queued up for commit on the secondary but aborted on the primary due to lack of quorum, leading to a secondary that has bad data (and possibly both secondaries, if the other comes online before the next write occurs).</li>
<li>The Full Restore logic &#8211; this was an extrapolated guess from the documentation</li>
<li>SQL Transactions and multi-step operations &#8211; these aren&#8217;t implemented purely, but didn&#8217;t seem to add much value from the perspective of showing how the distributed logic works</li>
</ul>
<p>See anything else? I would love to know so I could improve the models, let me know.</p>
<style>
.post-area li{
    padding: 4px;
}
.post-area ul{
    padding-bottom: 8px;
}
</style>
]]></content>
			<link rel="replies" type="text/html" href="/index.php/architect/distributed-storage-how-sql-azure-replicas-work/#comments" thr:count="8"/>
		<link rel="replies" type="application/atom+xml" href="/index.php/architect/distributed-storage-how-sql-azure-replicas-work/feed/atom/" thr:count="8"/>
		<thr:total>8</thr:total>
		</entry>
		<entry>
		<author>
			<name>Ted Krueger (onpnt)</name>
					</author>
		<title type="html"><![CDATA[Availability Groups Setup and Configuration from A to Z]]></title>
		<link rel="alternate" type="text/html" href="/index.php/architect/availability-groups-setup-and-configuration-from-a-to-z/" />
		<id>/?p=2434</id>
		<updated>2014-06-04T02:31:24Z</updated>
		<published>2014-06-04T01:56:40Z</published>
		<category scheme="/" term="Architecture, Design and Strategy" /><category scheme="/" term="Database Administration" /><category scheme="/" term="Enterprise Architecture" /><category scheme="/" term="Microsoft SQL Server" /><category scheme="/" term="Microsoft SQL Server Admin" />		<summary type="html"><![CDATA[Availability Groups were introduced in SQL Server 2012 and have quickly become the forefront of high availability for the SQL Server Database Engine Services.  In prior versions of SQL Server, true high availability was not a complete solution packaged with the native installation and feature set.  While mirroring was introduced in SQL Server 2005 and [&#8230;]]]></summary>
		<content type="html" xml:base="/index.php/architect/availability-groups-setup-and-configuration-from-a-to-z/"><![CDATA[<p>Availability Groups were introduced in SQL Server 2012 and have quickly become the forefront of high availability for the SQL Server Database Engine Services.  In prior versions of SQL Server, true high availability was not a complete solution packaged with the native installation and feature set.  While mirroring was introduced in SQL Server 2005 and provided a much-needed advance towards achieving highly available data services, mirroring still required much customization to effectively provide a true high availability solution.</p>
<p>It’s important to define high availability as it pertains to database level services – database high availability requires the means of retaining data services to users, applications and services within a defined allowable interruption of data services.  This equates simply as, are data services available to <i>any</i> connection within a given tolerance.  The <i>nines </i>has always been the flavor of measuring availability in the way of uptime.  “<i>My database server achieved four nines availability last year!” </i> This achievement is essentially stating the database services were not available for an estimated .01% of the total operating hours in a year or, 52 minutes.  Remember, this achievement is based on service level agreements that can have vast variations.  While even Full Clustered Instances of SQL Server implement a level of high availability, there is still the single point of failure that is of highest importance to the data services – the database.  Points of failure and focusing on where they may occur, begins allowing a visual representation of how availability achievements can be achieved.</p>
<p>Points of Failure</p>
<ul>
<ul>
<li>Hardware</li>
<li>Operating System</li>
<li>Data Corruption</li>
<li>Data Loss</li>
<li>Network</li>
</ul>
</ul>
<p>These five possible points of failure are specific to almost all data services.  As discussed, Full Clustered Instances is a protection against hardware and operating system failures, mirroring is protection against data loss and corruption events, and geo-clustering can be utilized to prevent network failure events.  However, even combining all of these technologies or features, the concept of data connectivity is still of concern as customization is needed if a single point of connection is not available to an application or user.</p>
<p>As stated already, pre-SQL Server 2012, even a four nines achievement was difficult.  This was due to the customization that was needed to maintain a mirror failover event.  Given that SQL Server is mirroring from instance name to instance name, and there is no single entry point for applications, some manual or programmatic intervention would be needed to handle the fact that a data server name could change.  While connection strings built in certain frameworks could allow for a failover partner attribute, not all connectivity types and providers supported them.  This forced coding changes, monitoring needs and much effort to manage a complete, seamless failover of one designated primary database server.</p>
<p>Availability Groups in SQL Server 2012 combats these issues directly by joining clustering and mirroring technologies and associating them into a group that coexist and all rely on each other in order to maintain availability.  The concept of applying a cluster design and including single instances acting on their own, begins to remove failure points in all areas of availability.</p>
<p>With Availability Groups and Windows Server Failover Clustering, we can look at the same failure points differently, asking how they allow for availability to be retained at any point of failure.</p>
<ul>
<ul>
<li>Hardware
<ul>
<li>Prevention be implementing the same level of protection in FCI but with WSFC</li>
</ul>
</li>
<li>Operating System
<ul>
<li>Prevention be implementing the same level of protection in FCI but with WSFC</li>
</ul>
</li>
<li>Data Corruption
<ul>
<li>Prevention with mirrored databases between each instance in the group</li>
</ul>
</li>
<li>Data Loss
<ul>
<li>Prevention with mirrored databases standing on unique disk subsystems</li>
</ul>
</li>
<li>Network
<ul>
<li>Allowance of multi-subnet clustering for added protection of network loss</li>
</ul>
</li>
</ul>
</ul>
<p>The following step-by-step illustration has been composed for a general setup and configuration need of Availability Groups in SQL Server 2012.  This is essential to becoming familiar with Availability Groups and determining how they fit into specific high availability needs and how data services are being used.  The specific setup and configuration for the Availability Group, SQLAG located on the network, has been utilized to document the needed setup and configurations.  Use this document for setup and configuration of new Availability Groups or the model in place on the network for the Availability Group SQLAG.</p>
<p>Availability Groups are being utilized for three primary objectives:</p>
<ol>
<ol>
<li>Achieve High Availability</li>
<li>Offload read-only queries (or requests)</li>
<li>Achieve a Disaster and Recovery solution</li>
</ol>
</ol>
<p>In order to meet all three objectives, a 4-Node Availability Group has been designed, based on a node and share majority solution.</p>
<p><a href="/wp-content/uploads/2014/06/ag1.png"><img class="aligncenter wp-image-2688 size-full" src="/wp-content/uploads/2014/06/ag1.png" alt="ag1" width="624" height="267" srcset="/wp-content/uploads/2014/06/ag1.png 624w, /wp-content/uploads/2014/06/ag1-300x128.png 300w" sizes="(max-width: 624px) 100vw, 624px" /></a></p>
<p>In the Availability Group solution pictured above, the following scenarios Availability Group can be achieved:</p>
<ol>
<ol>
<ol>
<li>Loss of primary database or physical hardware
<ul>
<li>Automatic failover to synchronous node 2</li>
</ul>
</li>
<li>Loss of primary database or physical hardware and loss of secondary automatic synchronous node 2
<ul>
<li>Manual failover to node 3 secondary or node 4 secondary</li>
</ul>
</li>
<li>Loss of primary database or physical hardware
<ul>
<li>Manual failover to node 3 secondary or node 4 secondary</li>
</ul>
</li>
<li>Loss of primary database or physical hardware and loss of file share
<ul>
<li>Automatic failover to synchronous node 2</li>
<li>Manual failover to any other node provided 3 nodes maintain connectivity</li>
</ul>
</li>
</ol>
</ol>
</ol>
<p>Note: Failover scenarios are extended to any node and cluster services maintained provided file share resources are online.  This failure scenario will maintain the cluster and listener resources of up to 2 nodes.  File share loss lowers a maximum node failure loss of one node.  If file share loss occurs and 2 nodes are lost, the cluster cannot be maintained.</p>
<p>&nbsp;</p>
<h1>Windows Server Failover Clustering and Availability Group Information</h1>
<p>Setup of the Availability Groups in the structure covers one or more databases.  The naming conventions utilized are listed below along with each setting that has been configured in this setup per node.</p>
<h2>Windows Server Failover Cluster (WSFC)</h2>
<h3 style="padding-left: 30px">Lab Server Build &#8211; Ensure to search for new hotfixes</h3>
<ul>
<ul>
<li>Windows Server 2008 R2 Enterprise Service Pack 1
<ul>
<li>Physical Memory – 4.00 GB</li>
<li>64-bit Operating System</li>
<li>Processor – Intel Xeon X5660 @ 2.80Ghx
<ul>
<li>1 CPU allocation (Logical count = 1)</li>
</ul>
</li>
</ul>
</li>
<li>Hotfix patches applied
<ul>
<li>KB2494036
<ul>
<li>A hotfix is available to let you configure a cluster node that does not have quorum votes in Windows Server 2008 and in Windows Server 2008 R2</li>
</ul>
</li>
<li>KB2687741
<ul>
<li>A hotfix that improves the performance of the &#8220;AlwaysOn Availability Group&#8221; feature in SQL Server 2012 is available for Windows Server 2008 R2</li>
</ul>
</li>
</ul>
</li>
</ul>
</ul>
<h3 style="padding-left: 30px">Server names</h3>
<ul style="padding-left: 30px">
<ul>
<li>NODE1</li>
<li>NODE2</li>
<li>NODE3</li>
<li>NODE4</li>
</ul>
</ul>
<h3 style="padding-left: 30px">Cluster Name</h3>
<ul>
<ul>
<li>SQLCLSTR</li>
</ul>
</ul>
<h3 style="padding-left: 30px">Quorum configuration for WSFC</h3>
<ul>
<ul>
<li>Node Majority File Share</li>
</ul>
</ul>
<h3 style="padding-left: 30px">Network Configuration</h3>
<ul>
<ul>
<li>Cluster Network 1<b></b></li>
<li>Cluster Access IP – 10.2.4.71
<ul>
<li>Subnet 10.2.4.0/24
<ul>
<li>NODE1
<ul>
<li>10.2.4.31</li>
</ul>
</li>
<li>NODE2
<ul>
<li>10.2.4.34</li>
</ul>
</li>
<li>NODE3
<ul>
<li>10.2.4.50</li>
</ul>
</li>
<li>NODE4
<ul>
<li>10.2.4.55</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</ul>
<h2>SQL Server Availability Groups</h2>
<h3 style="padding-left: 30px">SQL Server Instances</h3>
<ul>
<ul>
<li>Microsoft SQL Server Enterprise (64-bit)</li>
<li>Build 11.0.2100.0</li>
<li>Named Instances</li>
</ul>
</ul>
<ul>
<ul>
<ul>
<li>NODE1\SHAREPOINT2013</li>
<li>NODE2\SHAREPOINT2013</li>
<li>NODE3\SHAREPOINT2013</li>
<li>NODE4\SHAREPOINT2013</li>
</ul>
</ul>
</ul>
<p>&nbsp;</p>
<h2>Availability Group (AG)</h2>
<ul>
<ul>
<li>AG Name
<ul style="padding-left: 60px">
<li>SQLAG</li>
<li>Timeout configuration for all replicas – 10 seconds</li>
<li>Endpoint port utilized – 5022</li>
</ul>
</li>
<li>AG Listener Name
<ul style="padding-left: 60px">
<li>SQLAGLISTENER</li>
<li>10.2.4.72</li>
</ul>
</li>
<li>AG Replicas
<ul>
<li>NODE1
<ul style="padding-left: 60px">
<li>Primary</li>
<li>Synchronous Role</li>
<li>Automatic Failover</li>
</ul>
</li>
<li>NODE2
<ul style="padding-left: 60px">
<li>Secondary</li>
<li>Synchronous Role</li>
<li>Automatic Failover</li>
</ul>
</li>
<li>NODE3
<ul style="padding-left: 60px">
<li>Secondary</li>
<li>Synchronous Role</li>
<li>Read Only</li>
<li>Read-intent only</li>
<li>Manual Failover</li>
</ul>
</li>
<li>NODE4
<ul style="padding-left: 60px">
<li>Secondary</li>
<li>Asynchronous Role</li>
<li>Manual Failover</li>
</ul>
</li>
</ul>
</li>
</ul>
</ul>
<h1>WSFC Setup and Configuration</h1>
<h2>Cluster Setup</h2>
<p>Four servers are acting as nodes in the Windows Server Failover Cluster (WSFC).  The servers are all located on the subnet 10.2.4.x.  Each server has the failover clustering full feature installation.</p>
<p>Configuring the WSFC cluster first requires each server to have the Failover Clustering feature installed.  To perform this installation, follow these steps.</p>
<p>Connect to each server or open Server Manager for remote access to each server. In Server Manager, go to the Features node and click the Add Features link.</p>
<p><a href="/wp-content/uploads/2014/06/ag2.png"><img class="size-full wp-image-2689 aligncenter" src="/wp-content/uploads/2014/06/ag2.png" alt="ag2" width="624" height="156" srcset="/wp-content/uploads/2014/06/ag2.png 624w, /wp-content/uploads/2014/06/ag2-300x75.png 300w" sizes="(max-width: 624px) 100vw, 624px" /></a></p>
<p style="text-align: center">In the Select Features wizard, check “Failover Clustering” and click Install.</p>
<p><a href="/wp-content/uploads/2014/06/ag3.png"><img class="size-full wp-image-2690 aligncenter" src="/wp-content/uploads/2014/06/ag3.png" alt="ag3" width="519" height="377" srcset="/wp-content/uploads/2014/06/ag3.png 519w, /wp-content/uploads/2014/06/ag3-300x217.png 300w" sizes="(max-width: 519px) 100vw, 519px" /></a></p>
<p style="text-align: center">Once the installation is completed, a restart of the server is not required but highly recommended.</p>
<p style="text-align: center">Perform these steps for every server that will be enlisted in the WSFC.</p>
<h2>Configure the Cluster</h2>
<p>The following steps are used to configure the cluster containing the four logical servers that have the failover clustering features installed.</p>
<p>On a local computer with Failover Manager installed, or one of the servers that will be in the cluster, click Start&#8211;&gt;Administrative Tools&#8211;&gt;Failover Cluster Manager.</p>
<p>(The Failover Cluster Manager can also be opened by using the MMC snap-in.)</p>
<p><a href="/wp-content/uploads/2014/06/ag4.png"><img class="alignnone size-full wp-image-2691" src="/wp-content/uploads/2014/06/ag4.png" alt="ag4" width="402" height="459" srcset="/wp-content/uploads/2014/06/ag4.png 402w, /wp-content/uploads/2014/06/ag4-262x300.png 262w" sizes="(max-width: 402px) 100vw, 402px" /></a></p>
<p><a href="/wp-content/uploads/2014/06/ag5.png"><img class="alignnone size-full wp-image-2692" src="/wp-content/uploads/2014/06/ag5.png" alt="ag5" width="326" height="263" srcset="/wp-content/uploads/2014/06/ag5.png 326w, /wp-content/uploads/2014/06/ag5-300x242.png 300w" sizes="(max-width: 326px) 100vw, 326px" /></a></p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>(If the welcome screen is shown, click Next.)</p>
<p>Enter in each server’s name that will be part of the cluster.  Click Add after typing in the server name or utilize the Browse button to search the domain for registered server names.</p>
<p><a href="/wp-content/uploads/2014/06/ag6.png"><img class="size-full wp-image-2693 aligncenter" src="/wp-content/uploads/2014/06/ag6.png" alt="ag6" width="624" height="374" srcset="/wp-content/uploads/2014/06/ag6.png 624w, /wp-content/uploads/2014/06/ag6-300x179.png 300w" sizes="(max-width: 624px) 100vw, 624px" /></a></p>
<p>Click Next to review the Validation Warning options.</p>
<p>In the Validation Warning screen, if validation tests have not been executed yut, select Yes and click Next to run the validation tests.  This will review the servers for all configurations and options, as they pertain to the server being set up correctly for participation in a cluster.</p>
<p><a href="/wp-content/uploads/2014/06/ag7.png"><img class="size-full wp-image-2694 aligncenter" src="/wp-content/uploads/2014/06/ag7.png" alt="ag7" width="624" height="360" srcset="/wp-content/uploads/2014/06/ag7.png 624w, /wp-content/uploads/2014/06/ag7-300x173.png 300w" sizes="(max-width: 624px) 100vw, 624px" /></a></p>
<p>Select No to bypass the validation warning review</p>
<p>In the Access Point for Administering the Cluster, enter the name of the cluster and the network information needed.  If multiple subnets will be utilized, add both in this screen.</p>
<p><a href="/wp-content/uploads/2014/06/ag8.png"><img class="size-full wp-image-2695 aligncenter" src="/wp-content/uploads/2014/06/ag8.png" alt="ag8" width="581" height="331" srcset="/wp-content/uploads/2014/06/ag8.png 581w, /wp-content/uploads/2014/06/ag8-300x170.png 300w" sizes="(max-width: 581px) 100vw, 581px" /></a></p>
<p>Click Next and confirm the settings are accurate. If any changes are required, click Back to make adjustments.</p>
<p>Click Next to create the cluster.</p>
<p><a href="/wp-content/uploads/2014/06/ag9.png"><img class="size-full wp-image-2696 aligncenter" src="/wp-content/uploads/2014/06/ag9.png" alt="ag9" width="582" height="315" srcset="/wp-content/uploads/2014/06/ag9.png 582w, /wp-content/uploads/2014/06/ag9-300x162.png 300w" sizes="(max-width: 582px) 100vw, 582px" /></a></p>
<p>Once completed, click Finish.</p>
<h2>Configuring the Quorum</h2>
<p>&nbsp;</p>
<p>To configure the quorum settings for the new cluster, right click the cluster name in Cluster Manager. Scroll to More Actions and select Configure Cluster Quorum Settings.  Click Next to the Before You Begin screen if it is shown.</p>
<p><a href="/wp-content/uploads/2014/06/ag10.png"><img class="alignnone size-full wp-image-2697" src="/wp-content/uploads/2014/06/ag10.png" alt="ag10" width="624" height="332" srcset="/wp-content/uploads/2014/06/ag10.png 624w, /wp-content/uploads/2014/06/ag10-300x159.png 300w" sizes="(max-width: 624px) 100vw, 624px" /></a></p>
<p>In the Select Quorum Configuration screen, chose which type of quorum should be utilized.  If a disk or file share resource has not been added, the only selection available will be Node Majority.  Note: to create a share resource, the share must be located outside of the servers in the cluster.  For this configuration, we want a file share as a fifth node to retain a healthy quorum in the event of node losses.</p>
<p><a href="/wp-content/uploads/2014/06/ag11.png"><img class="alignnone size-full wp-image-2698" src="/wp-content/uploads/2014/06/ag11.png" alt="ag11" width="491" height="337" srcset="/wp-content/uploads/2014/06/ag11.png 491w, /wp-content/uploads/2014/06/ag11-300x205.png 300w" sizes="(max-width: 491px) 100vw, 491px" /></a></p>
<p>Select Node and File Share Majority (for clusters with special configurations)</p>
<p><a href="/wp-content/uploads/2014/06/ag12.png"><img class="alignnone size-full wp-image-2699" src="/wp-content/uploads/2014/06/ag12.png" alt="ag12" width="493" height="341" srcset="/wp-content/uploads/2014/06/ag12.png 493w, /wp-content/uploads/2014/06/ag12-300x207.png 300w" sizes="(max-width: 493px) 100vw, 493px" /></a></p>
<p>Click Next to confirm settings and click Next again to configure the settings.</p>
<p><a href="/wp-content/uploads/2014/06/ag13.png"><img class="alignnone size-full wp-image-2700" src="/wp-content/uploads/2014/06/ag13.png" alt="ag13" width="289" height="200" /></a>      <a href="/wp-content/uploads/2014/06/ag14.png"><img class="alignnone size-full wp-image-2701" src="/wp-content/uploads/2014/06/ag14.png" alt="ag14" width="287" height="200" /></a></p>
<h1>SQL Server 2012 Availability Group Setup and Configuration</h1>
<h2>Configure the SQL Server Availability Group</h2>
<p>In order to configure an Availability Group, the following steps are required in this sequence.</p>
<p>Each server that will take part as a replica must be in a WSFC.</p>
<ol>
<ol>
<li>A network name should be created to act as the listener (the name by which applications and users will connect to SQL Server and the databases in the Availability Group).  A listener can be created from the wizard if the listener is not created beforehand.</li>
<li>Security should be set up for the administrator that will be executing the AG setup.  This account must be in the sysadmin server role on all SQL Server instances that are acting as replicas and have access to read the domain Active Directory services.  If a listener is not prepared before creating the AG, the account is required to be a domain admin.</li>
<li>Each server that will act as a replica must have AlwaysOn features enabled in SQL Server.</li>
<li> The database(s) that will be in the Availability Group should be restored or created on the replica that will act as the primary.  These database(s) should be in RECOVERY mode and set to a recovery model of Full.</li>
<li>Each database on the primary requires a full backup to be executed.</li>
<li>A share should be created to retain the full backup of the primary replica’s database(s).  This share can be located on any of the replica servers or an external share resource.</li>
</ol>
</ol>
<p>Once the above security and required resources are available, continue with the steps below to create the AG.</p>
<p>Remote into each server that will act as a replica in the Availability Group and configure SQL Server for AlwaysOn features to be enabled. (Warning: This setting requires SQL Server to be restarted.)</p>
<p>Open SQL Server Configuration Manager.</p>
<p>Select SQL Server Services in the tree view.  Right click the SQL Server instance to be configured and select Properties.</p>
<p><a href="/wp-content/uploads/2014/06/ag15.png"><img class="alignnone size-full wp-image-2702" src="/wp-content/uploads/2014/06/ag15.png" alt="ag15" width="527" height="272" srcset="/wp-content/uploads/2014/06/ag15.png 527w, /wp-content/uploads/2014/06/ag15-300x154.png 300w" sizes="(max-width: 527px) 100vw, 527px" /></a></p>
<p>In the SQL Server Properties window, select the AlwaysOn High Availability tab. Check Enable AlwaysOn Availability Groups.  The Windows failover cluster name should default to the cluster that the server is part of.  If this does not auto-populate, the server is not in a WSFC and is required to be added before this step is performed.</p>
<p><a href="/wp-content/uploads/2014/06/ag16.png"><img class="alignnone size-full wp-image-2703" src="/wp-content/uploads/2014/06/ag16.png" alt="ag16" width="413" height="483" srcset="/wp-content/uploads/2014/06/ag16.png 413w, /wp-content/uploads/2014/06/ag16-256x300.png 256w" sizes="(max-width: 413px) 100vw, 413px" /></a></p>
<p>Click OK and restart the SQL Server services.</p>
<p>(Perform the above steps for each SQL Server that will be in the Availability Group.)</p>
<p>Connect to SQL Server via SQL Server Management Studio (SSMS) on the server that will act as the primary replica in the Availability Group.  Restore or create the database(s) that are required to be in the Availability Group.  Perform a full back up on each database.  (Note: ensure each database is in Full Recovery Model)</p>
<p>Expand the AlwaysOn High Availability node.  Right click the Availability Groups node and select New Availability Group Wizard</p>
<p><a href="/wp-content/uploads/2014/06/ag17.png"><img class="alignnone size-full wp-image-2704" src="/wp-content/uploads/2014/06/ag17.png" alt="ag17" width="378" height="296" srcset="/wp-content/uploads/2014/06/ag17.png 378w, /wp-content/uploads/2014/06/ag17-300x234.png 300w" sizes="(max-width: 378px) 100vw, 378px" /></a></p>
<p>Click Next if shown the Introduction window.</p>
<p><a href="/wp-content/uploads/2014/06/ag18.png"><img class="alignnone size-full wp-image-2705" src="/wp-content/uploads/2014/06/ag18.png" alt="ag18" width="346" height="321" srcset="/wp-content/uploads/2014/06/ag18.png 346w, /wp-content/uploads/2014/06/ag18-300x278.png 300w" sizes="(max-width: 346px) 100vw, 346px" /></a></p>
<p>Enter the name chosen for the Availability Groups and click Next.</p>
<p><a href="/wp-content/uploads/2014/06/ag19.png"><img class="alignnone size-full wp-image-2706" src="/wp-content/uploads/2014/06/ag19.png" alt="ag19" width="624" height="287" srcset="/wp-content/uploads/2014/06/ag19.png 624w, /wp-content/uploads/2014/06/ag19-300x137.png 300w" sizes="(max-width: 624px) 100vw, 624px" /></a></p>
<p>Ensure each database that will take part in the Availability Group passes validations.  If a database does not pass the validation process that is required to be added to an Availability Group, the list to the right of each database will show what is required.  For example: if a full backup was not performed, the link will read, “Full backup is required”.</p>
<p><a href="/wp-content/uploads/2014/06/ag20.png"><img class="alignnone size-full wp-image-2707" src="/wp-content/uploads/2014/06/ag20.png" alt="ag20" width="624" height="92" srcset="/wp-content/uploads/2014/06/ag20.png 624w, /wp-content/uploads/2014/06/ag20-300x44.png 300w" sizes="(max-width: 624px) 100vw, 624px" /></a></p>
<p>After performing the required prerequisites, click Refresh to re-validate the databases.  Once the validation process states, “Meets prerequisites”, check each database that is required and click Next.</p>
<p><a href="/wp-content/uploads/2014/06/ag21.png"><img class="alignnone size-full wp-image-2708" src="/wp-content/uploads/2014/06/ag21.png" alt="ag21" width="567" height="361" srcset="/wp-content/uploads/2014/06/ag21.png 567w, /wp-content/uploads/2014/06/ag21-300x191.png 300w" sizes="(max-width: 567px) 100vw, 567px" /></a></p>
<p>In the Specify Replicas screen, click the Add Replica…button to add the replicas that will be part of the Availability Group.</p>
<p>Make the configuration changes as shown below</p>
<ol>
<ol>
<li>Primary 01 – check Automatic failover, Synchronous Commit</li>
<li>Secondary 02 – check Automatic failover, Synchronous Commit</li>
<li>Secondary 03 – check synchronous Commit and select Readable Secondary option “Read-intent only”</li>
<li>Secondary 04 – Leave all options as default</li>
</ol>
</ol>
<p><a href="/wp-content/uploads/2014/06/ag22.png"><img class="alignnone size-full wp-image-2709" src="/wp-content/uploads/2014/06/ag22.png" alt="ag22" width="624" height="179" srcset="/wp-content/uploads/2014/06/ag22.png 624w, /wp-content/uploads/2014/06/ag22-300x86.png 300w" sizes="(max-width: 624px) 100vw, 624px" /></a></p>
<p>Click the Endpoints tab to ensure all settings are populated</p>
<p><a href="/wp-content/uploads/2014/06/ag23.png"><img class="alignnone size-full wp-image-2710" src="/wp-content/uploads/2014/06/ag23.png" alt="ag23" width="624" height="155" srcset="/wp-content/uploads/2014/06/ag23.png 624w, /wp-content/uploads/2014/06/ag23-300x74.png 300w" sizes="(max-width: 624px) 100vw, 624px" /></a></p>
<p>If changes are required due to network needs or port configurations, make them in this window.  For example: if port 5022 is used for other communications, adjust to port 5023 or another free port.</p>
<p>Click the Backup preferences tab.</p>
<p>Check Secondary only option for backup preferences and check the checkbox for Replica NODE3.</p>
<p><a href="/wp-content/uploads/2014/06/ag24.png"><img class="alignnone size-full wp-image-2711" src="/wp-content/uploads/2014/06/ag24.png" alt="ag24" width="624" height="361" srcset="/wp-content/uploads/2014/06/ag24.png 624w, /wp-content/uploads/2014/06/ag24-300x173.png 300w" sizes="(max-width: 624px) 100vw, 624px" /></a></p>
<p>Click the Listener tab.  If the listener was created prior to configuring the Availability Group, leave “Do not create an Availability Group listener now”.  If a listen should be created, check the “Create an Availability Group listener” and enter the required information.  Note: domain admin privileges are required to create the domain name if choosing to create the listener at this time.</p>
<p><a href="/wp-content/uploads/2014/06/ag25.png"><img class="alignnone size-full wp-image-2712" src="/wp-content/uploads/2014/06/ag25.png" alt="ag25" width="624" height="283" srcset="/wp-content/uploads/2014/06/ag25.png 624w, /wp-content/uploads/2014/06/ag25-300x136.png 300w" sizes="(max-width: 624px) 100vw, 624px" /></a></p>
<p>Click Next to save the replica settings.</p>
<p>In the Select Initial Data Synchronization window, enter a location for the full backup and log backup to be stored to initialize the other replicas in the Availability Group.  This location can be a drive or share on any of the replicas or an external share.  In the example below, replica 04 is used with the admin share to the T Drive.</p>
<p><a href="/wp-content/uploads/2014/06/ag26.png"><img class="alignnone size-full wp-image-2713" src="/wp-content/uploads/2014/06/ag26.png" alt="ag26" width="624" height="203" srcset="/wp-content/uploads/2014/06/ag26.png 624w, /wp-content/uploads/2014/06/ag26-300x97.png 300w" sizes="(max-width: 624px) 100vw, 624px" /></a></p>
<p>Click Next to run the validation process from the settings saved so far.  The only warning should be if the listener was chosen not to be created at the time of the setup.</p>
<p><a href="/wp-content/uploads/2014/06/ag27.png"><img class="alignnone size-full wp-image-2714" src="/wp-content/uploads/2014/06/ag27.png" alt="ag27" width="624" height="404" srcset="/wp-content/uploads/2014/06/ag27.png 624w, /wp-content/uploads/2014/06/ag27-300x194.png 300w" sizes="(max-width: 624px) 100vw, 624px" /></a></p>
<p>If a warning or error has been found, click the link to review the message and act accordingly.</p>
<p>Click Next to review the choices that will be executed upon clicking Finish to create the Availability Group and initialize the replicas.</p>
<p><a href="/wp-content/uploads/2014/06/ag28.png"><img class="alignnone size-full wp-image-2715" src="/wp-content/uploads/2014/06/ag28.png" alt="ag28" width="624" height="405" srcset="/wp-content/uploads/2014/06/ag28.png 624w, /wp-content/uploads/2014/06/ag28-300x194.png 300w" sizes="(max-width: 624px) 100vw, 624px" /></a></p>
<p>Note: it is recommended to click the Script button at this time and save the script generated by the wizard to a secure location for future recovery.</p>
<p><a href="/wp-content/uploads/2014/06/ag29.png"><img class="alignnone size-full wp-image-2716" src="/wp-content/uploads/2014/06/ag29.png" alt="ag29" width="392" height="103" srcset="/wp-content/uploads/2014/06/ag29.png 392w, /wp-content/uploads/2014/06/ag29-300x78.png 300w" sizes="(max-width: 392px) 100vw, 392px" /></a></p>
<p>Once Finish is clicked, the Availability Group and all replicas will be initialized and created.  This process can take some time depending on the size of each database in the Availability Group.</p>
<p>The process will execute in this order</p>
<ol>
<ol>
<li>Endpoints will be configured/created</li>
<li>Extended Events for monitoring an AG will be created</li>
<li>The Availability Group will be created</li>
<li>The Availability Group will be brought online</li>
<li>Secondary replicas will be added to the Availability Group</li>
<li>The WSFC quorum will be validated for votes of each replica server</li>
<li>A full backup of the database in the Availability Group will be taken</li>
<li>Steps repeated in this order for each replica</li>
</ol>
</ol>
<ul>
<ul>
<ul>
<li>A backup will be restored to the secondary replica</li>
<li>The tail-end log backup will be taken from the primary</li>
<li>The tail-end log backup will be restored to the secondary replica</li>
<li>Database will be joined to the Availability Group</li>
</ul>
</ul>
</ul>
<p><a href="/wp-content/uploads/2014/06/ag30.png"><img class="alignnone size-full wp-image-2717" src="/wp-content/uploads/2014/06/ag30.png" alt="ag30" width="624" height="269" srcset="/wp-content/uploads/2014/06/ag30.png 624w, /wp-content/uploads/2014/06/ag30-300x129.png 300w" sizes="(max-width: 624px) 100vw, 624px" /></a></p>
<p>Given the even number of node votes in this wizard driven setup, we will need to configure the voting weight of the nodes at a later point.  With the even number the warning is shown as “Validating WSFC quorum vote configuration”.</p>
<h2>Configure the Listener</h2>
<p>If the listener was not created in the initial wizard setup, perform these steps to assign the listener to the Availability Group.</p>
<ol>
<ol>
<ol>
<li>Open SSMS 2012</li>
<li>Execute the statement below to assign the listener name and IP to the Availability Group</li>
</ol>
</ol>
</ol>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
</pre></td><td class="de1"><pre class="de1"><span class="kw1">USE</span> <span class="br0">&#91;</span>master<span class="br0">&#93;</span>
GO
<span class="kw1">ALTER</span> AVAILABILITY <span class="kw1">GROUP</span> <span class="br0">&#91;</span>SQLAG<span class="br0">&#93;</span>
<span class="kw1">ADD</span> LISTENER N<span class="st0">'SQLAGLISTENER'</span> <span class="br0">&#40;</span>
<span class="kw1">WITH</span> IP
<span class="br0">&#40;</span><span class="br0">&#40;</span>N<span class="st0">'10.2.4.72'</span>, N<span class="st0">'255.255.255.0'</span><span class="br0">&#41;</span>
<span class="br0">&#41;</span>
, P<span class="sy0">OR</span>T<span class="sy0">=</span><span class="nu0">1433</span><span class="br0">&#41;</span>;
GO</pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">USE [master]
GO
ALTER AVAILABILITY GROUP [SQLAG]
ADD LISTENER N'SQLAGLISTENER' (
WITH IP
((N'10.2.4.72', N'255.255.255.0')
)
, PORT=1433);
GO</pre></div></div>

<p>Note: Assign the IP as needed in this step.  This is the IP that will translate for any connection being made to the Availability Group containing all databases.</p>
<h2>Configure Read Routing for Read-Intent Connections</h2>
<p>Multiple replicas can be configured for read-intent only connections.  This configuration is used to route connections that specify in the connection string the “read-intent” setting.  For example: the following connection string is set for read-intent and will be routed to a read-only secondary replica.</p>
<div>
<p>Server=SQLAGLISTENER;Database=_Cache;IntegratedSecurity=SSPI;<b>ApplicationIntent=ReadOnly</b></p>
</div>
<p>&nbsp;</p>
<p>To configure a replica for read-intent only connections, a primary and secondary role must be set.  Each replica in an Availability Group has both a primary and secondary role.  By default, the primary role for all replicas is All Connections.  This allows for every secondary or primary to be utilized in the event of a disaster as a primary connection with full read/write capabilities.  For read-only with read-intent configurations, there are two or more replicas that are configured for the role of primary with all connections and then a secondary role as a read routing for read-intent purposes.</p>
<p><a href="/wp-content/uploads/2014/06/ag31.png"><img class="size-full wp-image-2718 aligncenter" src="/wp-content/uploads/2014/06/ag31.png" alt="ag31" width="440" height="671" srcset="/wp-content/uploads/2014/06/ag31.png 440w, /wp-content/uploads/2014/06/ag31-196x300.png 196w" sizes="(max-width: 440px) 100vw, 440px" /></a></p>
<p>In the following configuration, the diagram illustrates the 2-node read routing configuration.</p>
<p>Note: Each replica requires the secondary role to be configured in a read-intent configuration.  In this configuration, the primary replica has a secondary role of read-intent.  In the case of the automatic failover to the secondary node, read-intent connections would be routed back to the secondary node.</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="tsql"><thead><tr><td colspan="2"  class="head">T-SQL</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
</pre></td><td class="de1"><pre class="de1"><span class="kw1">ALTER</span> AVAILABILITY <span class="kw1">GROUP</span> SQLAG
<span class="kw1">MODIFY</span> REPLICA <span class="kw1">ON</span>
N<span class="st0">'NODE1\SHAREPOINT2013'</span> <span class="kw1">WITH</span>
<span class="br0">&#40;</span>SECONDARY_ROLE <span class="br0">&#40;</span><span class="sy0">ALL</span>OW_CONNECTIONS <span class="sy0">=</span> READ_ONLY<span class="br0">&#41;</span><span class="br0">&#41;</span>;
<span class="kw1">ALTER</span> AVAILABILITY <span class="kw1">GROUP</span> SQLAG
<span class="kw1">MODIFY</span> REPLICA <span class="kw1">ON</span>
N<span class="st0">'NODE1\SHAREPOINT2013'</span> <span class="kw1">WITH</span>
<span class="br0">&#40;</span>SECONDARY_ROLE <span class="br0">&#40;</span>READ_ONLY_ROUT<span class="sy0">IN</span>G_URL <span class="sy0">=</span> N<span class="st0">'TCP://NODE1.ONPNT.TedsDomain.com:1433'</span><span class="br0">&#41;</span><span class="br0">&#41;</span>;<span class="sy0">&lt;/</span>code<span class="sy0">&gt;</span>
&nbsp;
<span class="kw1">ALTER</span> AVAILABILITY <span class="kw1">GROUP</span> SQLAG
<span class="kw1">MODIFY</span> REPLICA <span class="kw1">ON</span>
N<span class="st0">'NODE3\SHAREPOINT2013'</span> <span class="kw1">WITH</span>
<span class="br0">&#40;</span>SECONDARY_ROLE <span class="br0">&#40;</span><span class="sy0">ALL</span>OW_CONNECTIONS <span class="sy0">=</span> READ_ONLY<span class="br0">&#41;</span><span class="br0">&#41;</span>;
<span class="kw1">ALTER</span> AVAILABILITY <span class="kw1">GROUP</span> SQLAG
<span class="kw1">MODIFY</span> REPLICA <span class="kw1">ON</span>
N<span class="st0">'NODE3\SHAREPOINT2013'</span> <span class="kw1">WITH</span>
<span class="br0">&#40;</span>SECONDARY_ROLE <span class="br0">&#40;</span>READ_ONLY_ROUT<span class="sy0">IN</span>G_URL <span class="sy0">=</span> N<span class="st0">'TCP://NODE3.ONPNT.TedsDomain.com:1433'</span><span class="br0">&#41;</span><span class="br0">&#41;</span>;
&nbsp;
<span class="kw1">ALTER</span> AVAILABILITY <span class="kw1">GROUP</span> SQLAG
<span class="kw1">MODIFY</span> REPLICA <span class="kw1">ON</span>
N<span class="st0">'NODE1\SHAREPOINT2013'</span> <span class="kw1">WITH</span>
<span class="br0">&#40;</span>PRIMARY_ROLE <span class="br0">&#40;</span>READ_ONLY_ROUT<span class="sy0">IN</span>G_LIST<span class="sy0">=</span><span class="br0">&#40;</span><span class="st0">'NODE3\SHAREPOINT2013'</span>,<span class="st0">'NODE1\SHAREPOINT2013'</span><span class="br0">&#41;</span><span class="br0">&#41;</span><span class="br0">&#41;</span>;
&nbsp;
<span class="kw1">ALTER</span> AVAILABILITY <span class="kw1">GROUP</span> SQLAG
<span class="kw1">MODIFY</span> REPLICA <span class="kw1">ON</span>
N<span class="st0">'NODE3\SHAREPOINT2013'</span> <span class="kw1">WITH</span>
<span class="br0">&#40;</span>PRIMARY_ROLE <span class="br0">&#40;</span>READ_ONLY_ROUT<span class="sy0">IN</span>G_LIST<span class="sy0">=</span><span class="br0">&#40;</span><span class="st0">'NODE1\SHAREPOINT2013'</span>,<span class="st0">'NODE3\SHAREPOINT2013'</span><span class="br0">&#41;</span><span class="br0">&#41;</span><span class="br0">&#41;</span>;
GO</pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">ALTER AVAILABILITY GROUP SQLAG
MODIFY REPLICA ON
N'NODE1\SHAREPOINT2013' WITH
(SECONDARY_ROLE (ALLOW_CONNECTIONS = READ_ONLY));
ALTER AVAILABILITY GROUP SQLAG
MODIFY REPLICA ON
N'NODE1\SHAREPOINT2013' WITH
(SECONDARY_ROLE (READ_ONLY_ROUTING_URL = N'TCP://NODE1.ONPNT.TedsDomain.com:1433'));&lt;/code&gt;

ALTER AVAILABILITY GROUP SQLAG
MODIFY REPLICA ON
N'NODE3\SHAREPOINT2013' WITH
(SECONDARY_ROLE (ALLOW_CONNECTIONS = READ_ONLY));
ALTER AVAILABILITY GROUP SQLAG
MODIFY REPLICA ON
N'NODE3\SHAREPOINT2013' WITH
(SECONDARY_ROLE (READ_ONLY_ROUTING_URL = N'TCP://NODE3.ONPNT.TedsDomain.com:1433'));

ALTER AVAILABILITY GROUP SQLAG
MODIFY REPLICA ON
N'NODE1\SHAREPOINT2013' WITH
(PRIMARY_ROLE (READ_ONLY_ROUTING_LIST=('NODE3\SHAREPOINT2013','NODE1\SHAREPOINT2013')));

ALTER AVAILABILITY GROUP SQLAG
MODIFY REPLICA ON
N'NODE3\SHAREPOINT2013' WITH
(PRIMARY_ROLE (READ_ONLY_ROUTING_LIST=('NODE1\SHAREPOINT2013','NODE3\SHAREPOINT2013')));
GO</pre></div></div>

<p>&nbsp;</p>
<h2>Connecting to SQL Server and the Availability Group</h2>
<p>Every Availability Group utilizes the listener for connectivity between an external source and the actual database(s) enrolled in the Availability Group.  It is possible, for administrative purposes only, to connect directly to each replica’s SQL Server instance directly.  These direct connections should be performed for instance level configurations such as MAXDOP, memory and so on.  Configuring or making changes to the Availability Group should also be performed on the primary replica by directly connecting to it.  For example: the primary in the configuration is NODE1 and this would be the instance to connect to for configuration of the Availability Group.</p>
<p>For database level changes such as security, connect to the database through the listener name.</p>
<p>For application or service connections, no other changes are needed beyond the normal connection strings utilized for connecting directly to either a named instanced, default instance or clustered instances of SQL Server.  However, if a read-intent connection is desired, the ApplicationIntent=ReadOnly, attribute is required in the connection string for read routing to take place. <b></b></p>
<p>&nbsp;</p>
<h2>Modifying the Availability Group</h2>
<h4>Add a database to an existing Availability Group</h4>
<p>To add or remove a database from a pre-existing Availability Group, connect to the SQL Server instance acting as the primary replica via SSMS.</p>
<p>Expand the AlwaysOn High Availability node and expand the Availability Group that you wish change.</p>
<p><a href="/wp-content/uploads/2014/06/ag32.png"><img class="alignnone size-full wp-image-2719" src="/wp-content/uploads/2014/06/ag32.png" alt="ag32" width="361" height="307" srcset="/wp-content/uploads/2014/06/ag32.png 361w, /wp-content/uploads/2014/06/ag32-300x255.png 300w" sizes="(max-width: 361px) 100vw, 361px" /></a></p>
<p>Right click Availability Databases and click Add Database.</p>
<p><a href="/wp-content/uploads/2014/06/ag33.png"><img class="alignnone size-full wp-image-2720" src="/wp-content/uploads/2014/06/ag33.png" alt="ag33" width="370" height="360" srcset="/wp-content/uploads/2014/06/ag33.png 370w, /wp-content/uploads/2014/06/ag33-300x291.png 300w" sizes="(max-width: 370px) 100vw, 370px" /></a></p>
<p>The Add Database to Availability Group wizard will be shown.  This wizard is the same as the initial Availability Group setup.  Each database must follow the same requirements of being in full recovery model and having a full backup taken.</p>
<p>Follow the screens and fill in each required piece of information that is specific to the database(s) you wish to add to the Availability Group</p>
<p><a href="/wp-content/uploads/2014/06/ag34.png"><img class="alignnone size-full wp-image-2721" src="/wp-content/uploads/2014/06/ag34.png" alt="ag34" width="624" height="275" srcset="/wp-content/uploads/2014/06/ag34.png 624w, /wp-content/uploads/2014/06/ag34-300x132.png 300w" sizes="(max-width: 624px) 100vw, 624px" /></a></p>
<p>When the wizard has completed, the database will have a full backup taken and restored to all replicas, and a tail-end log backup will be taken, before it is added to the Availability Group.  During this time the other databases and the Availability Group will be available to all connections.  There are no requirements beyond these steps to add a database to the Availability Group.</p>
<p>To remove a database, right click the database in the listing and select Remove Database from Availability Group.  Note: this will remove the database from the Availability Group only.  This will not delete the physical database located on all replicas.  The primary database will persist allowing direct connections and all replica databases will be in a NORECOVERY state (restoring…).</p>
<p><a href="/wp-content/uploads/2014/06/ag35.png"><img class="alignnone size-full wp-image-2676" src="/wp-content/uploads/2014/06/ag35.png" alt="ag35" width="506" height="311" srcset="/wp-content/uploads/2014/06/ag35.png 506w, /wp-content/uploads/2014/06/ag35-300x184.png 300w" sizes="(max-width: 506px) 100vw, 506px" /></a></p>
<h3>Modifying Availability Group Settings</h3>
<p>All modifications to the Availability Group should be performed on the primary replica.   To modify settings for a specific Availability Group, connect to the primary replica via SSMS 2012, expand the AlwaysOn High Availability list and expand the Availability Groups node.</p>
<p>Right click the Availability Group requiring modifications and click Properties.</p>
<p><a href="/wp-content/uploads/2014/06/ag36.png"><img class="alignnone size-full wp-image-2677" src="/wp-content/uploads/2014/06/ag36.png" alt="ag36" width="370" height="422" srcset="/wp-content/uploads/2014/06/ag36.png 370w, /wp-content/uploads/2014/06/ag36-263x300.png 263w" sizes="(max-width: 370px) 100vw, 370px" /></a></p>
<p>All changes should be performed in the Availability Group properties window.</p>
<p><a href="/wp-content/uploads/2014/06/ag37.png"><img class="alignnone size-full wp-image-2678" src="/wp-content/uploads/2014/06/ag37.png" alt="ag37" width="624" height="320" srcset="/wp-content/uploads/2014/06/ag37.png 624w, /wp-content/uploads/2014/06/ag37-300x153.png 300w" sizes="(max-width: 624px) 100vw, 624px" /></a></p>
<p>Changes that can be performed</p>
<p style="padding-left: 60px">1)      Add or remove replicas</p>
<p style="padding-left: 60px">2)      Enable read-only or read-intent replicas</p>
<p style="padding-left: 60px">3)      Switch between synchronous and asynchronous committing between replicas</p>
<p style="padding-left: 60px">4)      Modify endpoint utilization (Note: endpoints cannot be altered in this window. To modify an endpoint, go to server objectsàendpoints in SSMS.)</p>
<p style="padding-left: 60px">5)      Backup Preferences</p>
<p style="padding-left: 60px">6)      Primary and Secondary roles</p>
<p style="padding-left: 60px">7)      Permissions</p>
<h2>Failover Testing and Monitoring</h2>
<h3>Initiate a Failover</h3>
<p>To simulate and test a failover scenario, connect to the primary or listener via SSMS 2012.  Expand the AlawaysOn High Availability list and Availability Groups’ node.  Right click the Availability Group to be tested and select Failover.</p>
<p><a href="/wp-content/uploads/2014/06/ag38.png"><img class="alignnone size-full wp-image-2679" src="/wp-content/uploads/2014/06/ag38.png" alt="ag38" width="423" height="466" srcset="/wp-content/uploads/2014/06/ag38.png 423w, /wp-content/uploads/2014/06/ag38-272x300.png 272w" sizes="(max-width: 423px) 100vw, 423px" /></a></p>
<p>The failover wizard will be displayed.</p>
<p>Select the replica to failover to and complete the wizard.</p>
<p><a href="/wp-content/uploads/2014/06/ag39.png"><img class="alignnone size-full wp-image-2680" src="/wp-content/uploads/2014/06/ag39.png" alt="ag39" width="624" height="266" srcset="/wp-content/uploads/2014/06/ag39.png 624w, /wp-content/uploads/2014/06/ag39-300x127.png 300w" sizes="(max-width: 624px) 100vw, 624px" /></a></p>
<h3>Monitoring Availability Groups</h3>
<p>When Availability Groups are enabled on SQL Server 2012, Extended Events are implemented for monitoring the state and health of the mirroring sessions and other session states.  To review the information that is being collected, connect to the listener name through SSMS and right click AlwaysOn High Availability and click Show Dashboard.</p>
<p><a href="/wp-content/uploads/2014/06/ag40.png"><img class="alignnone size-full wp-image-2681" src="/wp-content/uploads/2014/06/ag40.png" alt="ag40" width="423" height="266" srcset="/wp-content/uploads/2014/06/ag40.png 423w, /wp-content/uploads/2014/06/ag40-300x188.png 300w" sizes="(max-width: 423px) 100vw, 423px" /></a></p>
<p>A list of Availability Groups available to monitor will be shown.</p>
<p>Warning: The dashboard works on a refresh rate.  The queries pulling information may have an impact on performance if too many dashboards are active.  I do not recommend leaving any one dashboard open for a long period of time.</p>
<p><a href="/wp-content/uploads/2014/06/ag41.png"><img class="alignnone size-full wp-image-2682" src="/wp-content/uploads/2014/06/ag41.png" alt="ag41" width="624" height="139" srcset="/wp-content/uploads/2014/06/ag41.png 624w, /wp-content/uploads/2014/06/ag41-300x66.png 300w" sizes="(max-width: 624px) 100vw, 624px" /></a></p>
<p>Click the Availability Group to review the health and status.</p>
<p>The overall health of the Availability Group, databases and replicas will be shown.</p>
<p><a href="/wp-content/uploads/2014/06/ag42.png"><img class="alignnone size-full wp-image-2683" src="/wp-content/uploads/2014/06/ag42.png" alt="ag42" width="624" height="336" srcset="/wp-content/uploads/2014/06/ag42.png 624w, /wp-content/uploads/2014/06/ag42-300x161.png 300w" sizes="(max-width: 624px) 100vw, 624px" /></a></p>
<p>To review the extended health events, click the “View AlwaysOn Health Events” link.</p>
<p><a href="/wp-content/uploads/2014/06/ag43.png"><img class="alignnone size-full wp-image-2684" src="/wp-content/uploads/2014/06/ag43.png" alt="ag43" width="250" height="123" /></a></p>
<p>Review the events being captured by selecting each one to show the details.</p>
<p><a href="/wp-content/uploads/2014/06/ag44.png"><img class="alignnone size-full wp-image-2685" src="/wp-content/uploads/2014/06/ag44.png" alt="ag44" width="624" height="601" srcset="/wp-content/uploads/2014/06/ag44.png 624w, /wp-content/uploads/2014/06/ag44-300x288.png 300w" sizes="(max-width: 624px) 100vw, 624px" /></a></p>
<p>To review the quorum configuration and votes per replica in the cluster, click the View Cluster Quorum Information link.</p>
<p><a href="/wp-content/uploads/2014/06/ag45.png"><img class="alignnone size-full wp-image-2686" src="/wp-content/uploads/2014/06/ag45.png" alt="ag45" width="624" height="415" srcset="/wp-content/uploads/2014/06/ag45.png 624w, /wp-content/uploads/2014/06/ag45-300x199.png 300w" sizes="(max-width: 624px) 100vw, 624px" /></a></p>
<p>To make modifications to the quorum or votes (NodeWeight), use the Failover Cluster Manager or PowerShell.  For example: the following PowerShell statement is used to configure the votes shown above for NODE4 to have no votes in the health of the cluster.  This is a common configuration for a disaster and recovery replica node in the cluster and Availability Group setup.</p>
<p><a href="/wp-content/uploads/2014/06/ag46.png"><img class="alignnone size-full wp-image-2687" src="/wp-content/uploads/2014/06/ag46.png" alt="ag46" width="624" height="99" srcset="/wp-content/uploads/2014/06/ag46.png 624w, /wp-content/uploads/2014/06/ag46-300x47.png 300w" sizes="(max-width: 624px) 100vw, 624px" /></a></p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="powershell"><thead><tr><td colspan="2"  class="head">PowerShell</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
</pre></td><td class="de1"><pre class="de1">Import<span class="sy0">-</span>Module FailoverClusters
<span class="br0">&#40;</span>Get<span class="sy0">-</span>ClusterNode NODE4<span class="br0">&#41;</span>.NodeWeight<span class="sy0">=</span><span class="nu0">0</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">Import-Module FailoverClusters
(Get-ClusterNode NODE4).NodeWeight=0</pre></div></div>

<h2 style="margin: 2pt 0in 0pt"><span style="color: #000000;font-family: Calibri Light;font-size: large">What&#8217;s next?</span></h2>
<p style="margin: 0in 0in 8pt"><span style="color: #000000;font-family: Calibri;font-size: medium">Following this example of setting up a lab to test on with Availability groups, we’ll show how to script this entire solution with PoSh and T-SQL to ensure the setup, configuration and additional databases placed on the group, are not as long-winded of a process.</span></p>
]]></content>
			<link rel="replies" type="text/html" href="/index.php/architect/availability-groups-setup-and-configuration-from-a-to-z/#comments" thr:count="6"/>
		<link rel="replies" type="application/atom+xml" href="/index.php/architect/availability-groups-setup-and-configuration-from-a-to-z/feed/atom/" thr:count="6"/>
		<thr:total>6</thr:total>
		</entry>
		<entry>
		<author>
			<name>Eli Weinstock-Herman (tarwn)</name>
					</author>
		<title type="html"><![CDATA[Scalability is Easy! (To Get Wrong)]]></title>
		<link rel="alternate" type="text/html" href="/index.php/architect/designingsoftware/scalability-is-easy-to-get/" />
		<id>/index.php/2012/12/scalability-is-easy-to-get/</id>
		<updated>2016-02-07T21:43:06Z</updated>
		<published>2012-12-05T12:50:00Z</published>
		<category scheme="/" term="Designing Software" /><category scheme="/" term="parallel processing" /><category scheme="/" term="scalability" /><category scheme="/" term="simulation" />		<summary type="html"><![CDATA[Scalability is easy, provided you don't need it to work.

Probably the number one failure of system scaling is when people dive right in and start building. No baselines, limited measurements, no analysis, just a hypothesis and a whole lot of late nights tweaking the system.]]></summary>
		<content type="html" xml:base="/index.php/architect/designingsoftware/scalability-is-easy-to-get/"><![CDATA[<p>Scalability is easy, provided you don&#8217;t need it to work.</p>
<p>Probably the number one failure of system scaling is when people dive right in and start building. No baselines, limited measurements, no analysis, just a hypothesis and a whole lot of late nights tweaking the system. With extra complexity comes extra costs, from the initial development through more expensive maintenance. Scale poorly and not only do we take on those extra complexity costs, but also the more obvious additional costs of the actual implementation (new servers, more resources, etc).</p>
<h2>The Somewhat Contrived Example</h2>
<p>Recently I&#8217;ve been working on a system to simulate parallelizing workloads, specifically workloads that depend on external resources with rate or load thresholds. Let&#8217;s use it to look at a somewhat contrived example.</p>
<div style="background-color: #eeeeee; padding: 1em; margin: 1em;">
Note: For this post, the simulated &#8220;service&#8221; has a 100 request/minute limit and throttles individual clients for 15 second windows. Individual operations consist of 50ms of local processing and a single service request that has 50ms of latency and 100 ms for processing and response time. Similar results can be achieved with more realistic batch sizes and rates, the smaller values just allow me to more quickly produce samples for the blog post.
</div>
<p>So the backstory is that I have a batch process that is running more and more slowly as we take on larger and more frequent workloads. </p>
<p>I start by testing the batch process locally so I can see how slow it is before I make changes.</p>
<div style="text-align: center; font-size: .8em; color: #666666">
	<img src="http://tiernok.com/LTDBlog/Scalability/Graph_01.png" alt="Graph - 1 Client, 60 Requests, 100rpm Limit" /><br />
	1 Client, 60 Requests, 100rpm
</div>
<p>Locally it runs pretty quickly, but I&#8217;m betting that parallelizing the process will give me a significant increase in speed.</p>
<div style="text-align: center; font-size: .8em; color: #666666">
	<img src="http://tiernok.com/LTDBlog/Scalability/Graph_02.png" alt="Graph - 1 Client vs 30 Clients, 60 Requests, 100rpm Limit" /><br />
	1 Client vs 30 Clients, 60 Requests, 100rpm
</div>
<p>Look how well that performance improved, I achieved better than a 6x improvement in performance. My job here is done. </p>
<p>Except when I try to push this to production, I start getting a lot of errors. </p>
<div style="text-align: center; font-size: .8em; color: #666666">
	<img src="http://tiernok.com/LTDBlog/Scalability/Graph_03.png" alt="Graph - 30 Clients, 300 Requests, 100rpm - 67% Failure Rate" /><br />
	30 Clients, 300 Requests, 100rpm &#8211; 67% Failure Rate
</div>
<p>As it turns out, the external API my process saves the data to has a rate limit. When I exceed the allowable rate, I&#8217;m throttled for a short period of time. Any requests I make during that throttle period are returned with errors indicating I&#8217;m throttled.</p>
<p>Hmm. Luckily there are a number of common patterns available to retry these types of failures. I&#8217;ll add an exponential back-off retry pattern so that when I get throttled my service will retry failed requests at slower rates until the service un-throttles me. While I&#8217;ve found plenty of code examples online, none of them seem to have recommendations, so I&#8217;ll just use one of the sample settings they provide.</p>
<div style="text-align: center; font-size: .8em; color: #666666">
	<img src="http://tiernok.com/LTDBlog/Scalability/Graph_04.png" alt="Graph - 30 Clients, 300 Requests, 100rpm, Retry Policy #1 - 7% Failure Rate" /><br />
	30 Clients, 300 Requests, 100rpm, Retry Policy #1 &#8211; 7% Failure Rate
</div>
<p>Hmm, better. My failure rate has gone way down. What if I tweak the values?</p>
<div style="text-align: center; font-size: .8em; color: #666666">
	<img src="http://tiernok.com/LTDBlog/Scalability/Graph_05.png" alt="Graph - 30 Clients, 300 Requests, 100rpm, Retry Policy #2 - 29% Failure Rate" /><br />
	30 Clients, 300 Requests, 100rpm, Retry Policy #2 &#8211; 29% Failure Rate
</div>
<p>Oh, that was bad, I obviously was on the right track before. What if I just extend the retry amount a bit to try and knock out the last bit of errors. </p>
<div style="text-align: center; font-size: .8em; color: #666666">
	<img src="http://tiernok.com/LTDBlog/Scalability/Graph_06.png" alt="Graph - 30 Clients, 300 Requests, 100rpm, Retry Policy #1B - 0% Failure Rate" /><br />
	30 Clients, 300 Requests, 100rpm, Retry Policy #1B &#8211; 0% Failure Rate
</div>
<p>Ok, perfect. Now I have a system that is more than 6 times faster than the original, can be easily extended by throwing more workers at it, and is actually in a better position to handle occasional slow downs from my 3rd-party service. </p>
<p>Success!</p>
<h2>Where I Went Wrong</h2>
<p>Ok, so maybe not. Over the course of my little story I went wrong in a number of places. Even though this was a contrived example, I&#8217;ve watched very similar scenarios play out in a number of different organizations with real systems.</p>
<h3>The Bottleneck</h3>
<p>The first and most critical problem was that I didn&#8217;t actually locate the bottleneck in my process, I simply tried to do more of the same. The <a href="http://en.wikipedia.org/wiki/Theory_of_constraints" title="Theory of Constraints at Wikipedia">Theory of Constraints</a> tells us that we can improve the rate of a process by identifying and exploiting the constraints. </p>
<p>In this system, the constraint looked like it was the sequential execution of the tasks, but in reality the constraint was the time it took to call the 3rd-party API. Had we identified that bottleneck before starting, we could have approached the problem differently.</p>
<div style="text-align: center; font-size: .8em; color: #666666">
	<img src="http://tiernok.com/LTDBlog/Scalability/ProcessChange.png" alt="Process - Alternative Design" /><br />
	Process &#8211; Alternative Design
</div>
<p>Rather than the parallel complexity, we can modify how the tasks are executed to try and take advantage of knowing where our bottleneck is. If the API allowed us to submit several requests in a batch, this redesign would net us several orders of magnitude improvement. Another option would be to run the results of the local processing into a queue and submit requests from there at a slow trickle, using only a percentage of our API limit so as not to disrupt any other real-time operations or batch processing the system supports. Another option we could take advantage of is not starting any of our expensive 3rd-party communications until we know that the entire job can actually be processed successfully through our local process.</p>
<p>Identifying the constraint unlocks the ability to turn the problem on it&#8217;s head and achieve higher improvements, typically by orders of magnitude.</p>
<h3>The Math Error</h3>
<p>I concluded the scenario above by assuming I had found a good solution that also had a lot of headroom. Unfortunately what I actually did was find the ceiling. I have tuned the retry policy to 30 parallel systems, increasing that number could easily destabilize it further and cause more errors or delays. The headroom is, in fact, an illusion.</p>
<h3>The Evolving Assumption</h3>
<p>Somewhere along the way I found 30 clients to be a great improvement and didn&#8217;t test other options. Then I made some assumptions about a retry policy. Then I tweaked that retry policy until the error rate disappeared. My assumptions made sense at the time, so I never questioned where they were leading me.</p>
<p>When I found a winning combination for my retry rate, I didn&#8217;t realize I was missing other, better options:</p>
<div style="text-align: center; font-size: .8em; color: #666666">
	<img src="http://tiernok.com/LTDBlog/Scalability/Graph_07.png" alt="Graph - 30 Clients, 300 Requests, 100rpm, Retry Policy #1B vs 4A-C" /><br />
	30 Clients, 300 Requests, 100rpm, Retry Policy #1B vs 4A-C
</div>
<p>What&#8217;s worse, is that trail of assumptions along the way was never re-validated. I concluded with a 6.5x improvement, but is that still accurate?</p>
<div style="text-align: center; font-size: .8em; color: #666666">
	<img src="http://tiernok.com/LTDBlog/Scalability/Graph_08.png" alt="Graph - 1-50 Clients, 300 Requests, 100rpm, Retry Policy #1B" /><br />
	1-50 Clients, 300 Requests, 100rpm, Retry Policy #1B
</div>
<p>When I run the same settings on a range of 1 to 50 clients, we can see that I lost that original 6x improvement along the way. All I have managed to do is add complexity and some very explicit costs for those additional systems.</p>
<p><i>Note: What happened to retry policy #3? Well originally 1B was actually named 3, then I decided to update the name halfway through the post but was too lazy to update all of the completed images. Oh well.</i></p>
<h2>Scaling the Wrong Thing</h2>
<p>This post used fairly small numbers, had I applied a larger workload, higher throughput rates, different throttling windows, the whole problem would have turned out differently. </p>
<p>When we set out to make a system scale, we need to identify the real scenarios we are trying to scale for and the bottlenecks that stand in our way. Blindly performance tuning can look like an improvement, but is really just a poor short term investment that often entrenches the current performance problems even more deeply. There are a lot of questions that should be asked about the intended result, responsiveness fo the system, other operations it has to support while under load, potential overlap of that load, the type of load, etc. The patterns for one system may have relevance for another, but could just as easily be completely incorrect.</p>
<p>How hard it is to scale a system is going to depend on a lot of factors. Getting it wrong just happens to be the easiest option.</p>
]]></content>
			<link rel="replies" type="text/html" href="/index.php/architect/designingsoftware/scalability-is-easy-to-get/#comments" thr:count="4"/>
		<link rel="replies" type="application/atom+xml" href="/index.php/architect/designingsoftware/scalability-is-easy-to-get/feed/atom/" thr:count="4"/>
		<thr:total>4</thr:total>
		</entry>
		<entry>
		<author>
			<name>Alex Ullrich</name>
					</author>
		<title type="html"><![CDATA[Getting Flexible With NDepend 4 and CQLinq]]></title>
		<link rel="alternate" type="text/html" href="/index.php/architect/designingsoftware/getting-flexible-with-ndepend-4-and-cqlinq/" />
		<id>/index.php/2012/06/getting-flexible-with-ndepend-4-and-cqlinq/</id>
		<updated>2012-06-04T10:45:00Z</updated>
		<published>2012-06-04T10:45:00Z</published>
		<category scheme="/" term="Designing Software" />		<summary type="html"><![CDATA[At my last job we had a non-functional attribute that another team used to decorate service methods that they consumed.  The other team was working on an alternative client to our WCF services, and they weren't on the same release schedule they needed t&#8230;]]></summary>
		<content type="html" xml:base="/index.php/architect/designingsoftware/getting-flexible-with-ndepend-4-and-cqlinq/"><![CDATA[<p>At my last job we had a non-functional attribute that another team used to decorate service methods that they consumed.  The other team was working on an alternative client to our WCF services, and they weren&#8217;t on the same release schedule they needed to be able to target multiple versions of our services within a single version of their application.  Because of this requirement, they maintained a wrapper around our services that handled some of the differences   between versions.  The main use for this attribute was to foster communication between the teams, so that if we changed a decorated method we would let them know.  As I&#8217;m sure anyone on this other team would tell you, we weren&#8217;t always that good about communicating these changes.</p>
<p>In an effort to make communication between teams easier we used a CQL query like this to report changes to these methods as part of our automated builds:</p>
<pre>SELECT METHODS FROM NAMESPACES "Services"
WHERE HasAttribute "OPTIONAL:Services.KnownExternalClientsAttribute"
AND CodeWasChanged</pre>
<p>This was nice, but it only got us part of the way there.  This would alert us to signature changes or changes to the content of the method, but not necessarily changes to the message contracts passed in to the method.  In Pseudo-CQL the query I had in mind looks something like this:</p>
<pre>SELECT TYPES FROM NAMESPACES "Services"
WHERE CodeWasChanged
AND IsUsedBy (
    SELECT METHODS FROM NAMESPACES "Services"
    WHERE HasAttribute "OPTIONAL:Services.KnownExternalClientsAttribute"
)</pre>
<p>This didn&#8217;t work however (CQL doesn&#8217;t really have support for subqueries), and I couldn&#8217;t really find anything in the language that would allow us to achieve what we wanted.  NDepend 4 introduces a new linq-based replacement called CQLinq that offers a lot more flexibility, so I figured I would see if I could write the query that we needed using it.  It ended up being much easier than I thought &#8211; CQLinq gives us access to most (if not all) of the standard LINQ operators, and the same functions for querying code using attributes and history that we had with CQL.  This is the query I came up with:</p>
<pre>// &lt;Name&gt;Test Query for Contract Changes&lt;/Name&gt;
warnif count &gt; 0

let decoratedMethods = from m in JustMyCode.Methods
    where m.HasAttribute("NDependSample.TestAttribute")
        &amp;&amp; m.ParentNamespace.Name == "NDependSample.Services"
    select m

from t in JustMyCode.Types
where  t.ParentNamespace.Name == "NDependSample.Contracts"
  &amp;&amp; t.CodeWasChanged()
  &amp;&amp; decoratedMethods.Using(t).Any()
select t</pre>
<p>Once we have the query we can mark it as critical, so we will have a failing build after the changes are made.  Only the first build after making the changes should fail, but that would be enough to trigger an investigation that would result in communicating the changes to the other team.</p>
<p>CQL has always been my favorite feature of NDepend, so its no surprise that CQLinq is my favorite feature in this new release.  The LINQ based syntax feels much more natural to me when writing queries against a codebase than the SQL-like syntax of CQL, and still gives us all the same visualization goodies to foster quick understanding of the query results.  I&#8217;m really excited to dig in a little more and see what else I can do with it.</p>
]]></content>
			<link rel="replies" type="text/html" href="/index.php/architect/designingsoftware/getting-flexible-with-ndepend-4-and-cqlinq/#comments" thr:count="2"/>
		<link rel="replies" type="application/atom+xml" href="/index.php/architect/designingsoftware/getting-flexible-with-ndepend-4-and-cqlinq/feed/atom/" thr:count="2"/>
		<thr:total>2</thr:total>
		</entry>
		<entry>
		<author>
			<name>Eli Weinstock-Herman (tarwn)</name>
					</author>
		<title type="html"><![CDATA[Adding User Emulation to an Application]]></title>
		<link rel="alternate" type="text/html" href="/index.php/architect/designingsoftware/adding-user-emulation-to-an/" />
		<id>/index.php/2011/04/adding-user-emulation-to-an/</id>
		<updated>2011-04-27T12:57:00Z</updated>
		<published>2011-04-27T12:57:00Z</published>
		<category scheme="/" term="Designing Software" />		<summary type="html"><![CDATA[One of the tricks I picked up from my last job (and our forum software, now that I think of it) is the idea of user emulation. I could log into the application, search for a user, and, at the push of a button, temporarily become that user. The only differences between emulating them and actually logging in as them were a black bar that indicated who I am (with a link to stop emulating), all audit records continued to reflect my own user id, and I didn't need to keep track of 30 different sample accounts and passwords.]]></summary>
		<content type="html" xml:base="/index.php/architect/designingsoftware/adding-user-emulation-to-an/"><![CDATA[<p>One of the tricks I picked up from my last job (and our forum software, now that I think of it) is the idea of user emulation. I could log into the application, search for a user, and, at the push of a button, temporarily become that user. The only differences between emulating them and actually logging in as them were a black bar that indicated who I am (with a link to stop emulating), all audit records continued to reflect my own user id, and I didn&#8217;t need to keep track of 30 different sample accounts and passwords.</p>
<p>As I said, it&#8217;s a neat trick. </p>
<h2>Advantages</h2>
<p>Implemented consistently, this stops being just a trick and becomes a very powerful tool. Developers, QA, even customer service and support see benefits from being able to quickly emulate end users.</p>
<h3>Debugging</h3>
<p>As developers the largest benefit for us is the ability to debug our systems from a variety of viewpoints. Rather than going through the trouble of creating and managing sample users for every impacted role, we can use existing user records with real data behind them. This not only reduces the time to start debugging and remove the time involved in ongoing maintenance of test accounts, but may actually force out a few extra bugs that we wouldn&#8217;t catch with a new, vanilla user account.</p>
<h3>Support</h3>
<p>Duplicating a bug or answering a question becomes a lot easier when we can emulate the person on the other end of the bug report or phone. We can emulate the person in our production environment and in our development environment and verify that both environments break in the same way (or that development doesn&#8217;t break after we fix it). We also get firsthand clues, which can knock hours off the bug-hunting process.</p>
<h3>Customer Service</h3>
<p>Just as developers and support benefit on the technical side, in some cases Customer Service representatives (or selected members of the business) can use emulation to provide business or first level user support. When an end user has a complex question about an order or report, the service representative no longer needs to imagine their way through the issue, but instead can emulate that user, walk through the process, and see exactly what their user is seeing. This can be even more critical in systems where users see only a subset of the functionality or data available to service representatives.</p>
<h2>Implementation</h2>
<p>So emulation is a useful tool as well as a neat trick. Like many things, it is generally easier to bake this in from the beginning than to add it after the fact. If the user information is accessed in a consistent fashion in existing software, it is possible to squeeze in emulation logic and clean up the few places people cut corners and accessed users outside the normal context. If the user information is loaded and accessed at will throughout the application, adding emulation will be much harder (though there is some additional benefit in that it forces you to clean up your architecture a bit).</p>
<p><b>Sample Session Context Class</b></p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="vbnet"><thead><tr><td colspan="2"  class="head">vb.net</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
</pre></td><td class="de1"><pre class="de1"><span class="kw1">Public</span> <span class="kw1">Class</span> SessionContext
&nbsp;
&nbsp; &nbsp; <span class="kw1">Private</span> <span class="kw1">Property</span> EmulatedUser <span class="kw1">As</span> User
&nbsp; &nbsp; <span class="kw1">Private</span> <span class="kw1">Property</span> LoggedInUser <span class="kw1">As</span> User
&nbsp;
&nbsp; &nbsp; <span class="kw1">Public</span> <span class="kw1">ReadOnly</span> <span class="kw1">Property</span> User <span class="kw1">As</span> User
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">Get</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">If</span> <span class="kw1">Me</span><span class="sy0">.</span><span class="me1">EmulatedUser</span> <span class="kw1">IsNot</span> <span class="kw1">Nothing</span> <span class="kw1">Then</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">Return</span> <span class="kw1">Me</span><span class="sy0">.</span><span class="me1">EmulatedUser</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">Else</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">Return</span> <span class="kw1">Me</span><span class="sy0">.</span><span class="me1">LoggedInUser</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">End</span> <span class="kw1">If</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">End</span> <span class="kw1">Get</span>
&nbsp; &nbsp; <span class="kw1">End</span> <span class="kw1">Property</span>
&nbsp;
&nbsp; &nbsp; <span class="kw1">Public</span> <span class="kw1">ReadOnly</span> <span class="kw1">Property</span> IsEmulating <span class="kw1">As</span> <span class="kw2">Boolean</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">Get</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">Return</span> <span class="kw1">Me</span><span class="sy0">.</span><span class="me1">EmulatedUser</span> <span class="kw1">IsNot</span> <span class="kw1">Nothing</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">End</span> <span class="kw1">Get</span>
&nbsp; &nbsp; <span class="kw1">End</span> <span class="kw1">Property</span>
&nbsp;
&nbsp; &nbsp; <span class="co1">''' &lt;summary&gt;</span>
&nbsp; &nbsp; <span class="co1">''' Property used for accessing current's users information for auditing</span>
&nbsp; &nbsp; <span class="co1">''' &lt;/summary&gt;</span>
&nbsp; &nbsp; <span class="kw1">Public</span> <span class="kw1">ReadOnly</span> <span class="kw1">Property</span> UserIdForAuditing <span class="kw1">As</span> <span class="kw2">Integer</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">Get</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">If</span> <span class="kw1">Me</span><span class="sy0">.</span><span class="me1">LoggedInUser</span> <span class="kw1">IsNot</span> <span class="kw1">Nothing</span> <span class="kw1">Then</span> <span class="kw1">Return</span> <span class="kw1">Me</span><span class="sy0">.</span><span class="me1">LoggedInUser</span><span class="sy0">.</span><span class="me1">UserID</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">Return</span> <span class="nu0">0</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">End</span> <span class="kw1">Get</span>
&nbsp; &nbsp; <span class="kw1">End</span> <span class="kw1">Property</span>
&nbsp;
&nbsp; &nbsp; <span class="kw1">Public</span> <span class="kw1">Sub</span> LogInUser<span class="br0">&#40;</span><span class="kw1">ByVal</span> newUser <span class="kw1">As</span> User<span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">Me</span><span class="sy0">.</span><span class="me1">LoggedInUser</span> <span class="sy0">=</span> newUser
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">Me</span><span class="sy0">.</span><span class="me1">EmulatedUser</span> <span class="sy0">=</span> <span class="kw1">Nothing</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="co1">' plus other login logic stuff</span>
&nbsp; &nbsp; <span class="kw1">End</span> <span class="kw1">Sub</span>
&nbsp;
&nbsp; &nbsp; <span class="kw1">Public</span> <span class="kw1">Sub</span> LogOutUser<span class="br0">&#40;</span><span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">Me</span><span class="sy0">.</span><span class="me1">LoggedInUser</span> <span class="sy0">=</span> <span class="kw1">Nothing</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">Me</span><span class="sy0">.</span><span class="me1">EmulatedUser</span> <span class="sy0">=</span> <span class="kw1">Nothing</span>
&nbsp; &nbsp; <span class="kw1">End</span> <span class="kw1">Sub</span>
&nbsp;
&nbsp; &nbsp; <span class="kw1">Public</span> <span class="kw1">Sub</span> StartEmulating<span class="br0">&#40;</span><span class="kw1">ByVal</span> selectedUser <span class="kw1">As</span> User<span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">Me</span><span class="sy0">.</span><span class="me1">EmulatedUser</span> <span class="sy0">=</span> selectedUser
&nbsp; &nbsp; <span class="kw1">End</span> <span class="kw1">Sub</span>
&nbsp;
&nbsp; &nbsp; <span class="kw1">Public</span> <span class="kw1">Sub</span> StopEmulating<span class="br0">&#40;</span><span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">Me</span><span class="sy0">.</span><span class="me1">EmulatedUser</span> <span class="sy0">=</span> <span class="kw1">Nothing</span>
&nbsp; &nbsp; <span class="kw1">End</span> <span class="kw1">Sub</span>
<span class="kw1">End</span> <span class="kw1">Class</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">Public Class SessionContext

	Private Property EmulatedUser As User
	Private Property LoggedInUser As User

	Public ReadOnly Property User As User
		Get
			If Me.EmulatedUser IsNot Nothing Then
				Return Me.EmulatedUser
			Else
				Return Me.LoggedInUser
			End If
		End Get
	End Property

	Public ReadOnly Property IsEmulating As Boolean
		Get
			Return Me.EmulatedUser IsNot Nothing
		End Get
	End Property

	''' &lt;summary&gt;
	''' Property used for accessing current's users information for auditing
	''' &lt;/summary&gt;
	Public ReadOnly Property UserIdForAuditing As Integer
		Get
			If Me.LoggedInUser IsNot Nothing Then Return Me.LoggedInUser.UserID
			Return 0
		End Get
	End Property

	Public Sub LogInUser(ByVal newUser As User)
		Me.LoggedInUser = newUser
		Me.EmulatedUser = Nothing
		' plus other login logic stuff
	End Sub

	Public Sub LogOutUser()
		Me.LoggedInUser = Nothing
		Me.EmulatedUser = Nothing
	End Sub

	Public Sub StartEmulating(ByVal selectedUser As User)
		Me.EmulatedUser = selectedUser
	End Sub

	Public Sub StopEmulating()
		Me.EmulatedUser = Nothing
	End Sub
End Class</pre></div></div>

<p>Altogether not that complex a code construct, although I&#8217;m sure it will grow more so over the lifetime of the application. </p>
<p>As long as we consistently access user information through the exposed User property in the session and user the exposed UserIdForAuditing property for auditing purposes, then most of the work is done for us. The only other piece we need is a button on the UI to start emulating and some logic to handle the danger below.</p>
<h2>Dangers</h2>
<p>There are two main dangers to watch for. The first danger is making sure emulation doesn&#8217;t grant users the ability to promote themselves. Either emulation needs to be reserved for administrative users, or logic needs to be added to make certain levels or roles unavailable for emulation (or assignment during emulation).</p>
<p>The other main danger is that you now have a much greater chance (probably guarantee) that you will have the same user &#8220;logged in&#8221; in two locations at once. Most applications handle this just fine, but there are also many that cannot. Examples of this behavior are enforcing single location sign-ons, coded security that assumes multiple location means an account has been compromised, and making the mistake of storing session data keyed only to a user id instead of a unique session.</p>
]]></content>
			<link rel="replies" type="text/html" href="/index.php/architect/designingsoftware/adding-user-emulation-to-an/#comments" thr:count="1"/>
		<link rel="replies" type="application/atom+xml" href="/index.php/architect/designingsoftware/adding-user-emulation-to-an/feed/atom/" thr:count="1"/>
		<thr:total>1</thr:total>
		</entry>
		<entry>
		<author>
			<name>Eli Weinstock-Herman (tarwn)</name>
					</author>
		<title type="html"><![CDATA[Why (and How) I Model]]></title>
		<link rel="alternate" type="text/html" href="/index.php/architect/introductionarchitecturedesign/why-and-how-i-model/" />
		<id>/index.php/2010/10/why-and-how-i-model/</id>
		<updated>2010-10-15T09:20:39Z</updated>
		<published>2010-10-15T09:20:39Z</published>
		<category scheme="/" term="Introduction to Architecture and Design" /><category scheme="/" term="constraints" /><category scheme="/" term="modeling" /><category scheme="/" term="whiteboard" />		<summary type="html"><![CDATA[Over my years in (and before) IT, I've seen long projects, failed projects, confused projects, wildly successful projects, and even fun projects that ended far differently than we expected. The consistent take-away for me is that I am a big picture type of person, and that understanding that big, abstract picture cuts out a lot of wasted time sprinting down the wrong paths.]]></summary>
		<content type="html" xml:base="/index.php/architect/introductionarchitecturedesign/why-and-how-i-model/"><![CDATA[<p>Over my years in (and before) IT, I&#8217;ve seen long projects, failed projects, confused projects, wildly successful projects, and even fun projects that ended far differently than we expected. The consistent take-away for me is that I am a big picture type of person, and that understanding that big, abstract picture cuts out a lot of wasted time sprinting down the wrong paths.</p>
<div style="font-size: .8em; color: #666666; text-align: center;">
<img src="http://tiernok.com/LTDBlog/modeling/sprint.jpg" alt="Don't Sprint Blindly" /><br />
Don&#8217;t Sprint Blindly&#8230;<br />(care of <a href="http://www.dmitriev.com/blog/2009-04-14/wrong-sprint-burndown/">dmitriev.com</a>)
</div>
<p>Creating a model forces me to refine a concept down to it&#8217;s simplest elements, forces me to face the unknowns that my mind has so casually been skipping over. When done well, a model communicates a clear idea and replaces not only the thousands words required to explain it, but the 9000 I would have wasted getting there.</p>
<p>I model to think through processes, question my assumptions, and provide guidance towards a solution. While it probably looks like something I threw together in about ten minutes, there are actually a lot of processes going on behind the scenes.</p>
<h2>Purpose &#8211; What are We Drawing?</h2>
<div style="float: right; font-size: .8em; color: #666666; text-align: center;">
<img src="http://tiernok.com/LTDBlog/modeling/dostuff.jpg" title="Do Stuff!" /><br />
No Goal? Here&#8217;s a Diagram.
</div>
<p>As with all things, a diagram should have a goal. A model that isn&#8217;t trying to communicate an idea is filler for a report no one is going to read anyway. A goal should be concise and limited to a single subject or perspective:</p>
<ul style="margin-left: 1em;">
<li>The data flow from the end customer to our master data system</li>
<li>An order-to-cash business process</li>
<li>The functional architecture of a software application</li>
<li>A graphic representation of our current state</li>
</ul>
<p>Mess around with too many factors and at the end of the day a mess is all you&#8217;ll  have:</p>
<ul style="margin-left: 1em;">
<li>The physical network topology combined with the disaster recovery plan and data flows between the systems</li>
<li>The application architecture with defined user work flows and user experience elements</li>
</ul>
<p>Or to translate: gobbledygook.</p>
<h2>Constraint &#8211; Less is More</h2>
<p>A goal provides me with my first constraint, and constraints are good. Defining constraints will keep my model simpler and consistent, which means the end message will be clearer. At the same time, a well-defined set of constraints will encourage creativity, providing a better end product.</p>
<p>Often my constraints will include things like not allowing connections to cross, only using a very simple set of shapes, restricting myself to only a few shades of color, or setting time limits. I&#8217;ll define the perspective I want to use with my goal, whether it will be a topological map, a flow, or just a set of connected shapes. </p>
<p>This keeps me focused instead of playing with the entire palette of colors, shapes, and page sizes available in my favorite software tools.</p>
<h2>Content &#8211; Work on a Temporary Surface</h2>
<p>Even with constraints and a goal, I still don&#8217;t know exactly where I will end up or what I will learn along the way, so I start on the whiteboard. With a whiteboard I can start diagramming out the pieces I know, add in new items or resolve question marks as I run into them, and easily combine and rearrange my thoughts. Some of my constraints will be ineffective at this stage, but natural constraints (like the number of markers I have and the board size) will replace them in helping my creativity and thought processes.</p>
<p>This stage is also where I figure out my wording. Because it&#8217;s so easy to see the big picture (heh) on my whiteboard, I also get a good feel for when words are too specific, not specific enough, or possibly just not quite the right word for what I am trying to communicate. Instead of focusing on getting all the boxes lined up, I can focus on using clear and consistent terminology that will help support the final model rather than detract from it.</p>
<h2>Medium &#8211; Where is it Going?</h2>
<div style="float: left; font-size: .8em; color: #666666; text-align: center; margin: 2em 1em 1em 1em">
<img src="http://tiernok.com/trent/2004_11_05_04_sm.jpg" title="Content needs context" /><br />
Content needs Context
</div>
<p>As I make the transition from whiteboard to diagramming software, the last piece of the equation is to consider the medium I am going to use to communicate the model. A standalone diagram may put higher priority on further simplicity of shapes and colors, where a presentation model may put lower priority on text and higher priority on subtleties for deeper conversation. </p>
<p>Will there need to be a legend? Is font-size 8 going to be a waste of time or readable font? If I use subtle shades of color will it all print the same color or show up in gloriously rendered imagery on a 12 foot display? Will adding a cartoon get a chuckle in a presentation or a frown in an executive review? Can I include a picture of my cat?</p>
<p>The context the diagram will be communicating in will determine the last set of constraints.</p>
<h2>Terminology &#8211; The Wrong Word Invalidates the Model</h2>
<div style="float: right; font-size: .8em; color: #666666; text-align: center;">
<img src="http://tiernok.com/LTDBlog/modeling/van-venn-diagram.jpg" title="'Van' Diagram" /><br />
Using the right terminology, <br />thanks <a href="http://www.lolcaption.com/random-funny/what-is-a-van-diagram-you-ask-well-let-me-show-you/">lolcaption.com</a>
</div>
<p>General wording may have been roughed in on the whiteboard and some really good words may have been chosen, but these now need to be examined in light of the future medium as well as the audience. In many cases, using a word out of context can distract my audience or even negate the model&#8217;s message entirely.</p>
<p>That being said, endless anxiety over perfection is nowhere near as good as a cool beer at the end of a work day, so we need to strike a balance between working through the night and achieving good enough. So I&#8217;ll be careful, in general, when using customer terminology and try to be pragmatic in my search for the perfect name for the third box from the left.</p>
<h2>Composition &#8211; Additional Layers of Meaning</h2>
<p>The last stage of the model, having transferred it from whiteboard to software and applied corrections to terminology, is to add some depth that supports the initial concept. </p>
<p>Colors, re-arranging layout to alter proximity, fonts, and even line thicknesses are all tools I use to add subtle depth to a model. If I am planning on presenting the model, I can start the discussion on the general message of the model and dive into these subtleties as the discussion progresses. A thicker line between two systems can communicate greater bandwidth or a more secure transport layer. A common shading of colors between multiple objects communicates a relationship or similarity. As with the stages before, I try to use constraint. Applying the whole palette and a different shape for each object may seem fun, but it&#8217;s going to communicate confusion (and possibly a desire for medication).</p>
<p>While working with the composition, I will also create temporary versions to play with drastically different layouts or shapes. This gives me a fresh look at a concept that has undoubtedly been on my whiteboard for days, giving me an opportunity to catch last minute holes or simply provide alternative layout options.</p>
<h2>Sounds Like a Lot of Work&#8230;</h2>
<p>There are different levels of work involved in modeling. In some cases even finding the time to stop doing and try to draw an idea may seem like a waste. </p>
<div style="float: right; font-size: .8em; color: #666666; text-align: center;">
<img src="http://tiernok.com/LTDBlog/modeling/lookbothways.jpg" title="No Need To Look Ahead" /><br />
Not looking ahead?<br />Diagram for that too&#8230;
</div>
<div style="font-size: .8em; margin: 1em;  padding: 1em;">
How do I judge when it is worth spending the time?</p>
<p><strong>5 Minutes:</strong> If it only takes five minutes to draw a fast diagram of what I am intending to do, then that 5 minutes didn&#8217;t cost much and I can move forward with confidence.</p>
<p><strong>30 Minutes:</strong> If it takes 30 minutes, I&#8217;ve erased and redrawn half of it, and the person I am explaining it to is still arguing with me, then it&#8217;s time to draw a model. </p>
<p><strong>3 Hours:</strong> If it takes 3 hours, we end with more questions than we started with, half the questions have the potential for refocusing the project, and we&#8217;re still trying to figure out what to call this thing&#8230;yeah, it&#8217;s definitely time to get a handle on what we&#8217;re spending time on.
</div>
<p>Jumping right into any project when we can&#8217;t draw a high level summary means we&#8217;re spending time and resources on something we can&#8217;t adequately define. It doesn&#8217;t matter how fast we&#8217;re moving if we&#8217;re spending that time running in random directions and ignoring cross-traffic.</p>
]]></content>
			<link rel="replies" type="text/html" href="/index.php/architect/introductionarchitecturedesign/why-and-how-i-model/#comments" thr:count="2"/>
		<link rel="replies" type="application/atom+xml" href="/index.php/architect/introductionarchitecturedesign/why-and-how-i-model/feed/atom/" thr:count="2"/>
		<thr:total>2</thr:total>
		</entry>
		<entry>
		<author>
			<name>Alex Ullrich</name>
					</author>
		<title type="html"><![CDATA[CQL From Visual Studio With NDepend 3]]></title>
		<link rel="alternate" type="text/html" href="/index.php/architect/designingsoftware/cql-from-visual-studio-with-ndepend-3/" />
		<id>/index.php/2010/09/cql-from-visual-studio-with-ndepend-3/</id>
		<updated>2010-09-06T20:29:00Z</updated>
		<published>2010-09-06T20:29:00Z</published>
		<category scheme="/" term="Designing Software" /><category scheme="/" term=".net" /><category scheme="/" term="analysis" /><category scheme="/" term="c#" /><category scheme="/" term="ndepend" />		<summary type="html"><![CDATA[For the last few months I've had the pleasure of working with NDepend version 3.  Most of my development at home is on linux these days, so I haven't used it as much as I'd like, but I have been using it to poke around in various codebases and see what&#8230;]]></summary>
		<content type="html" xml:base="/index.php/architect/designingsoftware/cql-from-visual-studio-with-ndepend-3/"><![CDATA[<p>For the last few months I&#8217;ve had the pleasure of working with <a href="http://ndepend.com/">NDepend</a> version 3.  Most of my development at home is on linux these days, so I haven&#8217;t used it as much as I&#8217;d like, but I have been using it to poke around in various codebases and see what the new Visual Studio integration is all about.  The last version integrated with Visual Studio, technically speaking, but it didn&#8217;t seem nearly as thorough as what I&#8217;ve seen in version 3.  I suspect the improved extensibility model in VS 2010 has a lot to do with this, but can&#8217;t confirm (I haven&#8217;t tried it with 2008 either).</p>
<p>My favorite feature of NDepend has always been CQL, the SQL-like query language that allows you to query your codebase using a variety of common metrics.  This is the same as it ever was (the integration with VS is even quite similar) but with the more thorough integration it seems much more useful.  I like how easy it is now to keep an eye on my CQL constraints when I rebuild.</p>
<p>My favorite CQL feature is the ability to set up CQL constraints <em>from now</em>.  This is really cool for older projects, where it&#8217;s unrealistic to think that your team will be able to fix everything right away.  But what you can do with this feature is ensure that all <em>new or modified</em> code does measure up to your team&#8217;s standards.  You may not be able to clean up all those 1,000 line methods right away, but you <em>can</em> ensure that newer methods fit in a more reasonable size limit (like 975 <img src="https://s.w.org/images/core/emoji/2/72x72/1f609.png" alt="😉" class="wp-smiley" style="height: 1em; max-height: 1em;" /> ).  This is one of the most useful features of the application, IMO.  The way it works is by allowing you to establish a baseline.  By comparing the code&#8217;s current state to this baseline, future analyses are able to determine which methods/types/etc are new or changed, and apply the constraint to only these methods/types/etc.  Sometimes I feel like this would be useful just to be able to concisely see which methods have been changed as well (version control logs aren&#8217;t the most friendly things to read, especially spread throughout a large codebase).  Below is a screenshot of this feature in action.</p>
<div class="image_block"><img src="/wp-content/uploads/blogs/Architect/CQL-VS-NDepend3/cqlexplorer.PNG" alt="CQL Explorer" title="CQL Explorer Screenshot" width="971" height="283" /></div>
<p>The first three queries listed are built in to NDepend.  I added the fourth, just to have a listing of new/changed methods ready.  The CQL for this query is simply

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="text"><thead><tr><td colspan="2"  class="head">Text</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
</pre></td><td class="de1"><pre class="de1">SELECT METHODS WHERE WasAdded OR CodeWasChanged</pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">SELECT METHODS WHERE WasAdded OR CodeWasChanged</pre></div></div>

<p>Not a bad way to keep an eye on what is getting changed in the codebase.  To get in this state I added three new methods to the codebase I was looking at (in a place that I could remove them easily since they are not only low quality but useless as well). Two had 7 parameters, putting them in violation of the constraint for basic quality principles.  I didn&#8217;t add any tests, so all three were in violation of the test coverage constraint.  And finally they all showed up in the list of new methods.  It&#8217;s worth noting the yellow circle at the bottom right as well &#8211; the yellow means that warnings were encountered when running the CQL portion of the analysis.  Green would be good, and red would mean I have some bad queries that can&#8217;t be run.  </p>
<p>Double clicking a row in the CQL Explorer will take you to the CQL Editor &#8211; from here you can view the results of the query, and the CQL it contains.  From there you can easily navigate to the method definition in your source code by double-clicking.  </p>
<div class="image_block"><img src="/wp-content/uploads/blogs/Architect/CQL-VS-NDepend3/cqleditor.PNG" alt="CQL Editor" title="CQL Editor Screenshot" width="457" height="913" /></div>
<p>One of the things I really like here is the comments in the built-in queries.  They contain numerous links to metric definitions on the NDepend website, and sometimes even links to blog entries where the lead developer, <a href="http://codebetter.com/blogs/patricksmacchia/default.aspx">Patrick Smacchia</a> has explained features in greater detail.  I really like this form of documentation, it makes it easier to keep up to date and also minimizes what needs to be stored on the user&#8217;s computer.  </p>
<p>What I was happiest to find in the VS integration is the ability to superimpose CQL results onto the metrics view.  The metrics view consists of a grid where each block represents a unit of code (type, method, etc&#8230;) and they are sized according to their value for the metric in question.  When running CQL queries, the units of code matching your criteria are highlighted, giving a great visualization of how much code exhibits the properties you are looking for.</p>
<div class="image_block"><img src="/wp-content/uploads/blogs/Architect/CQL-VS-NDepend3/metricsexplorer.PNG" alt="Metrics Explorer" title="CQL Metrics Explorer" width="887" height="686" /></div>
<p>The selected query (about types having too many efferent couplings) is the currently selected query, and I had moused over the QueryParser class to highlight it in pink and show the metrics summary on the right.  I find that having this built right into visual studio really helps me figure out where to focus my refactoring energy.</p>
<p>It looks as if a lot of effort went into <a href="http://codebetter.com/blogs/patricksmacchia/archive/2010/08/29/validating-code-rules-in-visual-studio.aspx">making the CQL validation phase fast</a>:<br />
<blockquote>CQL rules validation phase is fast. The performance challenge was to make this happens almost instantly to avoid slowing the developer machine. Hopefully for a large 100K Lines of Code application, code gets re-analyzed and 200 CQL rules can get checked, all within 3 seconds after the (re)compilation of one or several .NET assemblies. These fast performances were made possible thanks to the development of a new technology of incremental code analysis. With incremental code analysis, only modified code gets re-analyzed. I can attest that this was extremely challenging and complex development!</p></blockquote>
<p>From what I&#8217;ve seen, the effort&#8217;s been a success.  I&#8217;ve mostly been using it to look at different versions of <a href="http://lucene.apache.org/lucene.net/">Lucene.net</a>, as I&#8217;ve got some work to do to get some of my code to build in VS2010.  For this size codebase (~23k lines) the analysis is completed very quickly, even if I disable the incremental analysis.  The CQL validation portion completes almost instantly, and memory usage doesn&#8217;t seem to get out of hand even when keeping VS open for days.  I&#8217;d imagine if your computer can handle running Visual Studio to begin with, it won&#8217;t have too much trouble with the NDepend integration. I could see some of the VS add-ins that don&#8217;t play well with others causing issues, especially with a very large codebase, so I hope to go back and test with a larger codebase and some other add-ins installed eventually.</p>
<p>Most of the other NDepend goodies are available in VS now as well (Dependency Graphs, Test Coverage Analysis, Class Browser, etc&#8230;) but I won&#8217;t get into all that here.  I really see CQL as the app&#8217;s killer feature, and that is what I spend the most time thinking about.  There is a good overview of the app&#8217;s capabilities <a href="http://www.ndepend.com/Features.aspx#Tour">here</a> if you&#8217;d like to read more.</p>
]]></content>
			<link rel="replies" type="text/html" href="/index.php/architect/designingsoftware/cql-from-visual-studio-with-ndepend-3/#comments" thr:count="1"/>
		<link rel="replies" type="application/atom+xml" href="/index.php/architect/designingsoftware/cql-from-visual-studio-with-ndepend-3/feed/atom/" thr:count="1"/>
		<thr:total>1</thr:total>
		</entry>
		<entry>
		<author>
			<name>Eli Weinstock-Herman (tarwn)</name>
					</author>
		<title type="html"><![CDATA[Model-View-Presenter: Looking at Passive View]]></title>
		<link rel="alternate" type="text/html" href="/index.php/architect/designingsoftware/model-view-presenter-looking-at-passive/" />
		<id>/index.php/2010/07/model-view-presenter-looking-at-passive/</id>
		<updated>2010-07-15T09:44:12Z</updated>
		<published>2010-07-15T09:44:12Z</published>
		<category scheme="/" term="Designing Software" /><category scheme="/" term="Introduction to Architecture and Design" /><category scheme="/" term="architecture" /><category scheme="/" term="model view presenter" /><category scheme="/" term="passive view" /><category scheme="/" term="patterns" />		<summary type="html"><![CDATA[Model-View-Presenter is an architecture pattern that defines a structure for behavior and logic at the UI level. M-V-P separates the logic of the presentation, such as interacting with back-end services and the business layer, from the mechanics of disp&#8230;]]></summary>
		<content type="html" xml:base="/index.php/architect/designingsoftware/model-view-presenter-looking-at-passive/"><![CDATA[<p>Model-View-Presenter is an architecture pattern that defines a structure for behavior and logic at the UI level. M-V-P separates the logic of the presentation, such as interacting with back-end services and the business layer, from the mechanics of displaying buttons and interface components. </p>
<p>I often build small projects to help understand and grow my skills as a developer, architect, and all-around technologist (as may be apparent from the <a href="/index.php/All/?disp=authdir&amp;author=9" target="_blank" title="See all of my posts at LTD">wide range of topics I post on</a>). Today I worked with a combination of Visio and Visual Studio to build a sample project to play with the Passive View concept and to help grow my own understanding of the concept. This post will cover the Visio side of my learning-curve.</p>
<p>You can read more about Model View Presenter at <a href="http://en.wikipedia.org/wiki/Model-view-presenter" target="_blank" title="Model-View-Presenter at Wikipedia">Wikipedia</a> and <a href=http://msdn.microsoft.com/en-us/magazine/cc188690.aspx"" target="_blank" title="Model View Presenter by Jean-Paul Boodhoo on MSDN">MSDN</a>. Perhaps the best information can be found on Martin Fowler&#8217;s site, where he has separate write-ups on <a href="http://www.martinfowler.com/eaaDev/PassiveScreen.html" target=_blank" title="Passive View pattern">Passive View</a> and <a href="http://www.martinfowler.com/eaaDev/SupervisingPresenter.html" target=_blank" title="Supervising Controller Pattern">Supervising Controller</a>.</p>
<div style="background-color:#FFFFCC; padding: .5em; margin: .5em; border: 1px solid #DDDDAA; color: #333333; font-size: 80%;">Note: I know some people were waiting for another Virtual Lab entry this week, and here I am writing about Architecture instead. Don&#8217;t worry, the virtual lab series will continue, I just felt like doing a write-up while I was playing this past weekend.</div>
<h2>Passive View</h2>
<p>Passive View is a subset of the Model-View-Presenter pattern. In Passive View, the interface is responsible for handling interface-specific logic, such as figuring out how to put a value in a textbox or react to events from button clicks, but all actions and logic outside of the raw UI are sent to the Presenter to execute or manage. The Presenter is responsible for calling business methods in the Business model and updating the data that is available in the View. </p>
<div style="text-align: center; font-size: .8em; color: #666666;">
<img src="http://tiernok.com/LTDBlog/MVP/mvp.png" alt="Basic Model-View-Presenter diagram" /><br />
Basic Model-View-Presenter Diagram
</div>
<p>From the outside in, the architecture for Passive View looks something like this:</p>
<ul>
<li>UI &#8211; The User Interface reflects what is going on beneath it by implementing one or more View interfaces</li>
<li>Presenter &#8211; The Presenter receives interactions from the UI or Model and updates the Views it is attached to</li>
<li>Model &#8211; The model is a facade or black box in our diagram, behind which is a business logic layer and data layer</li>
</ul>
<p>In a flat architecture we would collect data from the interface, perhaps do some business and data validation, and then save it directly to a database using stored procedures or inline SQL. Defining a data access layer (or data model like entity framework) allows our application to operate on cohesive, defined objects that are meaningful to the application and stored and retrieved consistently. Defining a business logic layer allows us to centralize business rules that operate on entities in our application in a manner that is consistent with the business and internally consistent in the application, minimizing the risk that occurs when making changes to the business flow. Separating the logic of populating inputs and responding to button presses on the UI from the information being communicated to the end user and conceptual responses to their input allows the system to interact with the user consistently across any number of interfaces into the same application.</p>
<p>The definition of each level increases our ability to automate testing and supports greater <a href="http://en.wikipedia.org/wiki/Separation_of_concerns" title="Separation of Concerns at Wikipedia" target="_blank">Separation of Concerns</a>.</p>
<h2>Implementing a Sample Project</h2>
<p>My learning exercise has been the the creation of an ASP.Net search page that allows an end user (customer) to search for finished products from the AdventureWorks sample database. The architecture and design decisions were done as an exercise in Visio using simple shapes and layouts.</p>
<p>My example application has several functional and non-functional requirements:</p>
<ol>
<li>Functional &#8211; Display product number, name, list price, and available quantity in tabular format</li>
<li>Functional &#8211; Provide a basic search input and button to search product names</li>
<li>Non-Functional &#8211; Implement an M-V-P pattern &#8211; Obviously the purpose of this whole exercise</li>
<li>Non-Functional &#8211; Use a simple model stack that can be easily replaced with a Service-Oriented one at a later time</li>
<li>Non-Functional &#8211; Build with the idea that we will later create a Silverlight or WPF front-end</li>
<li>Non-Functional &#8211; Make pretty pictures for article</li>
</ol>
<p><i>My unwritten, final requirement was to finish the whole thing in half a day, though luckily I didn&#8217;t define whether I intended that to mean 4 hours or 12.</i></p>
<h3>Initial Architecture</h3>
<p>To start I created a diagram of the application architecture:</p>
<div style="text-align: center; font-size: .8em; color: #666666;">
<img src="http://tiernok.com/LTDBlog/MVP/mvp_arch_01.png" alt="More extensive M-V-P Diagram" /><br />
More Extensive Model-View-Presenter Diagram
</div>
<p>The purple layer is my presentation layer, which reflects the View. The blue layer is my Presenter layer which contains the logic for interacting between the end user and interface as well as a definition, or contract, of the information available in the View. The Green is the Model (or is behind the model, depending on your viewpoint) and exposes business functions and data entities for the Presenter to interact with.</p>
<h3>Class Layout</h3>
<p>Once the high level diagram was completed, I could approach the task of creating some base classes and interfaces to use in implementing the project.</p>
<ul>
<li>Model.IModel &#8211; Generic Model Interface to expose business calls to Presenters</li>
<li>Presenter.IView &#8211; Generic View Interface that all Presenters can interact with and all screens implement</li>
<li>Presenter.BasePresenter &#8211; Generic Presenter class that all Presenters will implement</li>
</ul>
<p>To keep the project to a single morning but also allow the ability to come back and build a more architecturally sound solution, I implemented the Model in a very basic fashion that was referenced locally by the Presenter project and makes direct calls to SQL Server using ADO and parametrized, inline SQL. This buys me the benefits of having a well-defined Model (via the interface) but allows me concentrate my time and effort on the learning part of the project (ie, the M-V-P interaction and structure). Defining the model interface also leaves me open to come back and replace it with better separated code and the ability to create a model that acts as a facade to a service stack, instead of local DLLs.</p>
<ul>
<li>Model.BasicModel.Model &#8211; Basic implementation of a model that will interact with AdventureWorks on SQL Server</li>
<li>Model.Entities.Product &#8211; A Product Entity that can be communicated between an IModel instance and Presenter
<li>Presenter.ProductSearchPresenter &#8211; A Presenter to manage product search interface</li>
<li>Presenter.IProductSearchView &#8211; A view of the data involved in a product search</li>
<li>ProductSearch.aspx &#8211; A web page that implements the IProductSearchView and interacts with the ProductSearchPresenter</li>
</li>
</ul>
<p>My final Visio diagram ended up looking like this:</p>
<div style="text-align: center; font-size: .8em; color: #666666;">
<img src="http://tiernok.com/LTDBlog/MVP/mvp_arch_02.png" alt="Example Application Diagram" /><br />
Diagram of Example Application
</div>
<p>In this case the left side represents basic components (bases classes and interfaces) that are used to define common structure or contracts on the right side. </p>
<h2>The Code</h2>
<p>For the purposes of the example project, my view has properties for Search Text, a Search Count (number of results), Results (a generic list of the Product entity), and a boolean indicating whether there are results to display. My Web Form implements these properties, tying them to elements on the screen.</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="csharp"><thead><tr><td colspan="2"  class="head">C#</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
</pre></td><td class="de1"><pre class="de1">&nbsp;<span class="kw1">public</span> <span class="kw1">partial</span> <span class="kw4">class</span> WebForm1 <span class="sy0">:</span> <span class="kw5">System.<span class="me1">Web</span><span class="sy0">.</span><span class="me1">UI</span></span><span class="sy0">.</span><span class="me1">Page</span>, Presenter<span class="sy0">.</span><span class="me1">Views</span><span class="sy0">.</span><span class="me1">IProductSearchView</span> <span class="br0">&#123;</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; Presenter<span class="sy0">.</span><span class="me1">ProductSearchPresenter</span> _presenter<span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">protected</span> <span class="kw4">void</span> Page_Load<span class="br0">&#40;</span><span class="kw4">object</span> sender, EventArgs e<span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; btnSearch<span class="sy0">.</span><span class="me1">Click</span> <span class="sy0">+=</span> <span class="kw3">new</span> EventHandler<span class="br0">&#40;</span>btnSearch_Click<span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; rptProducts<span class="sy0">.</span><span class="me1">ItemDataBound</span> <span class="sy0">+=</span> <span class="kw3">new</span> RepeaterItemEventHandler<span class="br0">&#40;</span>rptProducts_ItemDataBound<span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; _presenter <span class="sy0">=</span> <span class="kw3">new</span> Presenter<span class="sy0">.</span><span class="me1">ProductSearchPresenter</span><span class="br0">&#40;</span><span class="kw3">new</span> Model<span class="sy0">.</span><span class="me1">LocalModel</span><span class="sy0">.</span><span class="me1">BasicModel</span><span class="br0">&#40;</span><span class="kw5">System.<span class="me1">Configuration</span></span><span class="sy0">.</span><span class="me1">ConfigurationManager</span><span class="sy0">.</span><span class="me1">ConnectionStrings</span><span class="br0">&#91;</span><span class="st0">&quot;AdventureWorks&quot;</span><span class="br0">&#93;</span><span class="sy0">.</span><span class="me1">ConnectionString</span><span class="br0">&#41;</span>, <span class="kw1">this</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp; &nbsp; &nbsp; &nbsp; 
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw4">void</span> btnSearch_Click<span class="br0">&#40;</span><span class="kw4">object</span> sender, EventArgs e<span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">this</span><span class="sy0">.</span>_presenter<span class="sy0">.</span><span class="me1">ExecuteProductSearch</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw4">string</span> Presenter<span class="sy0">.</span><span class="me1">Views</span><span class="sy0">.</span><span class="me1">IProductSearchView</span><span class="sy0">.</span><span class="me1">SearchText</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">get</span> <span class="br0">&#123;</span> <span class="kw1">return</span> tbSearch<span class="sy0">.</span><span class="me1">Text</span><span class="sy0">;</span> <span class="br0">&#125;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">set</span> <span class="br0">&#123;</span> tbSearch<span class="sy0">.</span><span class="me1">Text</span> <span class="sy0">=</span> <span class="kw1">value</span><span class="sy0">;</span> <span class="br0">&#125;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw4">int</span> Presenter<span class="sy0">.</span><span class="me1">Views</span><span class="sy0">.</span><span class="me1">IProductSearchView</span><span class="sy0">.</span><span class="me1">ResultCount</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">set</span> <span class="br0">&#123;</span> lblResultCount<span class="sy0">.</span><span class="me1">Text</span> <span class="sy0">=</span> <span class="kw1">value</span><span class="sy0">.</span><span class="me1">ToString</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span> <span class="br0">&#125;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; List<span class="sy0">&lt;</span>Model<span class="sy0">.</span><span class="me1">Entities</span><span class="sy0">.</span><span class="me1">Product</span><span class="sy0">&gt;</span> Presenter<span class="sy0">.</span><span class="me1">Views</span><span class="sy0">.</span><span class="me1">IProductSearchView</span><span class="sy0">.</span><span class="me1">SearchResults</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">set</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">if</span> <span class="br0">&#40;</span><span class="kw1">value</span> <span class="sy0">!=</span> <span class="kw1">null</span> <span class="sy0">&amp;&amp;</span> <span class="kw1">value</span><span class="sy0">.</span><span class="me1">Count</span> <span class="sy0">&gt;</span> <span class="nu0">0</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; rptProducts<span class="sy0">.</span><span class="me1">DataSource</span> <span class="sy0">=</span> <span class="kw1">value</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; rptProducts<span class="sy0">.</span><span class="me1">DataBind</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw4">bool</span> Presenter<span class="sy0">.</span><span class="me1">Views</span><span class="sy0">.</span><span class="me1">IProductSearchView</span><span class="sy0">.</span><span class="me1">DisplayResults</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">set</span> <span class="br0">&#123;</span> tblResults<span class="sy0">.</span><span class="me1">Visible</span> <span class="sy0">=</span> <span class="kw1">value</span><span class="sy0">;</span> <span class="br0">&#125;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span>
<span class="sy0">...</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse"> public partial class WebForm1 : System.Web.UI.Page, Presenter.Views.IProductSearchView {

        Presenter.ProductSearchPresenter _presenter;

        protected void Page_Load(object sender, EventArgs e) {
            btnSearch.Click += new EventHandler(btnSearch_Click);
            rptProducts.ItemDataBound += new RepeaterItemEventHandler(rptProducts_ItemDataBound);
            _presenter = new Presenter.ProductSearchPresenter(new Model.LocalModel.BasicModel(System.Configuration.ConfigurationManager.ConnectionStrings["AdventureWorks"].ConnectionString), this);
        }
        
        void btnSearch_Click(object sender, EventArgs e) {
            this._presenter.ExecuteProductSearch();
        }

        string Presenter.Views.IProductSearchView.SearchText {
            get { return tbSearch.Text; }
            set { tbSearch.Text = value; }
        }

        int Presenter.Views.IProductSearchView.ResultCount {
            set { lblResultCount.Text = value.ToString(); }
        }

        List&lt;Model.Entities.Product&gt; Presenter.Views.IProductSearchView.SearchResults {
            set {
                if (value != null &amp;&amp; value.Count &gt; 0) {
                    rptProducts.DataSource = value;
                    rptProducts.DataBind();
                }
            }
        }

        bool Presenter.Views.IProductSearchView.DisplayResults {
            set { tblResults.Visible = value; }
        }
...</pre></div></div>

<p>As the presenter populates properties in the view, the information is automatically reflected on the page. The actual logic of how the business functions are called and populate those properties are neatly packaged up in the Presenter and View interface and very little logic occurs in the actual web form.</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="csharp"><thead><tr><td colspan="2"  class="head">C#</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
</pre></td><td class="de1"><pre class="de1">&nbsp;<span class="kw1">public</span> <span class="kw4">class</span> ProductSearchPresenter <span class="sy0">:</span> BasePresenter <span class="br0">&#123;</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">protected</span> Views<span class="sy0">.</span><span class="me1">IProductSearchView</span> _view<span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">public</span> ProductSearchPresenter<span class="br0">&#40;</span>Model<span class="sy0">.</span><span class="me1">IModel</span> model, Views<span class="sy0">.</span><span class="me1">IProductSearchView</span> view<span class="br0">&#41;</span> <span class="sy0">:</span> <span class="kw1">base</span><span class="br0">&#40;</span>model<span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">this</span><span class="sy0">.</span>_view <span class="sy0">=</span> view<span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">this</span><span class="sy0">.</span>_view<span class="sy0">.</span><span class="me1">ResultCount</span> <span class="sy0">=</span> <span class="nu0">0</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">this</span><span class="sy0">.</span>_view<span class="sy0">.</span><span class="me1">DisplayResults</span> <span class="sy0">=</span> <span class="kw1">false</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">public</span> <span class="kw4">void</span> ExecuteProductSearch<span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; List<span class="sy0">&lt;</span>Model<span class="sy0">.</span><span class="me1">Entities</span><span class="sy0">.</span><span class="me1">Product</span><span class="sy0">&gt;</span> results<span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; results <span class="sy0">=</span> <span class="kw1">this</span><span class="sy0">.</span>_model<span class="sy0">.</span><span class="me1">SearchProduct</span><span class="br0">&#40;</span><span class="kw1">this</span><span class="sy0">.</span>_view<span class="sy0">.</span><span class="me1">SearchText</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">if</span> <span class="br0">&#40;</span>results<span class="sy0">.</span><span class="me1">Count</span> <span class="sy0">&gt;</span> <span class="nu0">0</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">this</span><span class="sy0">.</span>_view<span class="sy0">.</span><span class="me1">ResultCount</span> <span class="sy0">=</span> results<span class="sy0">.</span><span class="me1">Count</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">this</span><span class="sy0">.</span>_view<span class="sy0">.</span><span class="me1">DisplayResults</span> <span class="sy0">=</span> <span class="kw1">true</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">this</span><span class="sy0">.</span>_view<span class="sy0">.</span><span class="me1">SearchResults</span> <span class="sy0">=</span> results<span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">else</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">this</span><span class="sy0">.</span>_view<span class="sy0">.</span><span class="me1">ResultCount</span> <span class="sy0">=</span> <span class="nu0">0</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">this</span><span class="sy0">.</span>_view<span class="sy0">.</span><span class="me1">DisplayResults</span> <span class="sy0">=</span> <span class="kw1">false</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">this</span><span class="sy0">.</span>_view<span class="sy0">.</span><span class="me1">SearchResults</span> <span class="sy0">=</span> <span class="kw1">null</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp; &nbsp; <span class="br0">&#125;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse"> public class ProductSearchPresenter : BasePresenter {

        protected Views.IProductSearchView _view;

        public ProductSearchPresenter(Model.IModel model, Views.IProductSearchView view) : base(model) {
            this._view = view;
            this._view.ResultCount = 0;
            this._view.DisplayResults = false;
        }

        public void ExecuteProductSearch() {
            List&lt;Model.Entities.Product&gt; results;
            results = this._model.SearchProduct(this._view.SearchText);
            if (results.Count &gt; 0) {
                this._view.ResultCount = results.Count;
                this._view.DisplayResults = true;
                this._view.SearchResults = results;
            }
            else {
                this._view.ResultCount = 0;
                this._view.DisplayResults = false;
                this._view.SearchResults = null;
            }
        }
    }</pre></div></div>

<p>To create a unit test, we define a simple view that implements the view interface, execute the presenter logic, and verify the properties are populated the way we would expect when the same presenter calls are made from the interface.</p>
<h3>Extending the Architecture Further</h3>
<p>Extending the application to display product search in a different manner would only require the addition of a new interface that also implements the Product Search View. A Silverlight front-end would only require creating the basic project, implementing the product search View, and wiring the new interface controls to the view properties. To replace the direct mode reference with a service reference, we could create a service facade that implemented the IModel interface, connected to a local or remote WCF service behid the scenes to handle the real model logic. And finally, instead of counting on our QA department to test all of the application interactions, we can create unit tests directly against the Presenter and Views to ensure that all of the interactions below the top surface of the application are happening consistently and to our expectation.</p>
<h2>Your Turn</h2>
<p>Getting this much of the architecture working is a good first step. I took a number of shortcuts on the BasicModel class in my example, but I now have a functional Model-View-Presenter application to play with. Hopefully there was enough information in the article to interest you in trying this out on your own. I urge you to read the articles linked in the top of the post (or several more in my <a href="http://delicious.com/tarwn/model-view-presenter" title="Eli's Delicious bookmarks for M-V-P" target="_blank">Model-View-Presentation bookmarks</a>) and come up with your own diagrams and sample project. Even doing a small project will force you to run into questions and considerations you wouldn&#8217;t have had by simply reading about it, not to mention unrelated tidbits you will pick up along the way (for instance, I also learned about <a href="http://msdn.microsoft.com/en-us/library/ms668604.aspx" title="ObservableCollection at MSDN" target="_blank">ObservableCollections</a> today).</p>
]]></content>
			<link rel="replies" type="text/html" href="/index.php/architect/designingsoftware/model-view-presenter-looking-at-passive/#comments" thr:count="11"/>
		<link rel="replies" type="application/atom+xml" href="/index.php/architect/designingsoftware/model-view-presenter-looking-at-passive/feed/atom/" thr:count="11"/>
		<thr:total>11</thr:total>
		</entry>
		<entry>
		<author>
			<name>SQLDenis</name>
					</author>
		<title type="html"><![CDATA[MSDN giveaway winners]]></title>
		<link rel="alternate" type="text/html" href="/index.php/architect/hardwareinfrastructuredesign/msdn-giveaway-winners/" />
		<id>/index.php/2010/07/msdn-giveaway-winners/</id>
		<updated>2010-07-09T15:23:42Z</updated>
		<published>2010-07-09T15:23:42Z</published>
		<category scheme="/" term="Hardware and Infrastructure Design" /><category scheme="/" term="giveaway" /><category scheme="/" term="msdn" /><category scheme="/" term="raffle" />		<summary type="html"><![CDATA[The winners of the MSDN Ultimate subscriptions are Emtucifor and Shawson. Originally we were going to select the winner based on comments, we also only had one subscription. Then Ted Krueger donated one of his subscriptions, there was only one comment t&#8230;]]></summary>
		<content type="html" xml:base="/index.php/architect/hardwareinfrastructuredesign/msdn-giveaway-winners/"><![CDATA[<p>The winners of the MSDN Ultimate subscriptions are <a href="/index.php/All/?disp=authdir&amp;author=71">Emtucifor</a> and <a href="http://www.shawson.co.uk/codeblog">Shawson</a>. Originally we were going to select the winner based on comments, we also only had one subscription. Then Ted Krueger donated one of his subscriptions, there was only one comment that stood out and it was Emtucifor&#8217;s. The comment is below</p>
<blockquote><p>I have always dreamed of owning my own software company. A few years back I started doing some database development on the side, but then I got married, had a son, and began having some health challenges which together halted what I&#8217;d been doing.</p>
<p>But there is a special opportunity coming to me this Saturday to get back into the swing of things: my wife and son will be leaving the country for six weeks. I had already been planning to devote myself to developing one of many application ideas, but now:</p>
<p>1) I would use MSDN Ultimate Subscription to build a secure server/file transfer/fetching/archiving/processing/reconciling/user worklist managing/cross-platform system (uncannily and quite coincidentally, exactly what is desperately needed at a company I know). It will help other people&#8217;s lives in several ways: filling a need that many companies are bound to have and for a low price (as initially I will need to build market presence more than profit); increasing the number of small software development businesses out there, proving again that it can be done and providing inspiration for the masses; getting a family&#8217;s Dad home so he can spend more time with them. If it helps, I&#8217;ll blog about the development and growth of my application and business.</p>
<p>2) The functionality I would use that is unique to VS Ultimate is Architecture and Modeling. I believe in &#8220;starting the way you mean to finish.&#8221; So even though I&#8217;ll be a one-man shop at first, that means test-driven design, agile development, automated regression testing, version control, good backups, and all the infrastructure needed to hire employees when the time comes without having to change much. I&#8217;ll be eager to add the layer diagramming abilities of VS Ultimate to this mix.</p>
<p>3. Blogs and technical community activity:</p>
<p>/index.php/All/?disp=authdir&#038;author=71<br />
http://stackoverflow.com/users/57611/emtucifor<br />
http://tek-tips.com/userinfo.cfm?member=emtucifor<br />
http://squaredthoughts.blogspot.com/ (a bit out of date but still representative of my work)<br />
not to mention http://forum.lessthandot.com/memberlist.php?mode=viewprofile&amp;u=98</p></blockquote>
<p>Not only did we think that the comment was good but apparently someone else as well, he actually used parts of it as his own in Andy Leonard&#8217;s giveaway here: http://sqlblog.com/blogs/andy_leonard/archive/2010/07/03/a-visual-studio-2010-msdn-seeding-card-giveaway-contest.aspx</p>
<p>We decided to raffle of the other subscription by vote..so I already started to put the polls together. During that time David Taylor left a great comment</p>
<blockquote><p>1) Why do you need this &#8211; Because I am a poor, seriously underpaid SQL Server 2008 DBA/Developer who can&#8217;t even afford VS2010 Pro!<br />
What are you going to build with this &#8211; I am going to build practice apps to learn from, as I am relatively new to development<br />
will it help other people&#8217;s lives? It is my hope that training myself will get me into a job in which I am helping other people.</p>
<p>2) What specific functionality that is only part of Ultimate are you going to use? &#8211; Architecture Explorer</p>
<p>3) You need to have a technical blog and provide the URL to that blog, if you are an active member of the technical community (stackoverflow, msdn forums etc etc) then also include those links. &#8211; http://dyfhid.wordpress.com./ Also, I am the Volunteer Coordinator for PASS&#8217; APplication Development Virtual Chapter, located at http://appdev.sqlpass.org/</p></blockquote>
<p>Now we had a dilemma, do we yank the poll and give the award to David or not? We proceeded with the poll. Wouldn&#8217;t you know it, David won Andy&#8217;s contest, because of that I emailed him and we decided that he wouldn&#8217;t be eligible here.</p>
<p>Here are the results of the final poll: http://forum.lessthandot.com/viewtopic.php?f=121&amp;t=11550</p>
<p>Congratulations to both winners, hopefully they will let us know in a couple of months if this has indeed made their developer life easier</p>
<p>Congratulations again from all of us at Lessthandot.</p>
]]></content>
			<link rel="replies" type="text/html" href="/index.php/architect/hardwareinfrastructuredesign/msdn-giveaway-winners/#comments" thr:count="7"/>
		<link rel="replies" type="application/atom+xml" href="/index.php/architect/hardwareinfrastructuredesign/msdn-giveaway-winners/feed/atom/" thr:count="7"/>
		<thr:total>7</thr:total>
		</entry>
	</feed>
