<?xml version="1.0" encoding="UTF-8"?><rss version="2.0"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:atom="http://www.w3.org/2005/Atom"
	xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
	xmlns:slash="http://purl.org/rss/1.0/modules/slash/"
	>

<channel>
	<title>Introduction to Architecture and Design &#8211; LessthanDot</title>
	<atom:link href="/index.php/category/architect/introductionarchitecturedesign/feed/" rel="self" type="application/rss+xml" />
	<link>/</link>
	<description>A Technical Community for IT Professionals</description>
	<lastBuildDate>Sat, 09 Mar 2019 12:50:36 +0000</lastBuildDate>
	<language>en-US</language>
	<sy:updatePeriod>hourly</sy:updatePeriod>
	<sy:updateFrequency>1</sy:updateFrequency>
	<generator>https://wordpress.org/?v=4.6.1</generator>
	<item>
		<title>Why (and How) I Model</title>
		<link>/index.php/architect/introductionarchitecturedesign/why-and-how-i-model/</link>
		<comments>/index.php/architect/introductionarchitecturedesign/why-and-how-i-model/#comments</comments>
		<pubDate>Fri, 15 Oct 2010 09:20:39 +0000</pubDate>
		<dc:creator><![CDATA[Eli Weinstock-Herman (tarwn)]]></dc:creator>
				<category><![CDATA[Introduction to Architecture and Design]]></category>
		<category><![CDATA[constraints]]></category>
		<category><![CDATA[modeling]]></category>
		<category><![CDATA[whiteboard]]></category>

		<guid isPermaLink="false">/index.php/2010/10/why-and-how-i-model/</guid>
		<description><![CDATA[Over my years in (and before) IT, I've seen long projects, failed projects, confused projects, wildly successful projects, and even fun projects that ended far differently than we expected. The consistent take-away for me is that I am a big picture type of person, and that understanding that big, abstract picture cuts out a lot of wasted time sprinting down the wrong paths.]]></description>
				<content:encoded><![CDATA[<p>Over my years in (and before) IT, I&#8217;ve seen long projects, failed projects, confused projects, wildly successful projects, and even fun projects that ended far differently than we expected. The consistent take-away for me is that I am a big picture type of person, and that understanding that big, abstract picture cuts out a lot of wasted time sprinting down the wrong paths.</p>
<div style="font-size: .8em; color: #666666; text-align: center;">
<img src="http://tiernok.com/LTDBlog/modeling/sprint.jpg" alt="Don't Sprint Blindly" /><br />
Don&#8217;t Sprint Blindly&#8230;<br />(care of <a href="http://www.dmitriev.com/blog/2009-04-14/wrong-sprint-burndown/">dmitriev.com</a>)
</div>
<p>Creating a model forces me to refine a concept down to it&#8217;s simplest elements, forces me to face the unknowns that my mind has so casually been skipping over. When done well, a model communicates a clear idea and replaces not only the thousands words required to explain it, but the 9000 I would have wasted getting there.</p>
<p>I model to think through processes, question my assumptions, and provide guidance towards a solution. While it probably looks like something I threw together in about ten minutes, there are actually a lot of processes going on behind the scenes.</p>
<h2>Purpose &#8211; What are We Drawing?</h2>
<div style="float: right; font-size: .8em; color: #666666; text-align: center;">
<img src="http://tiernok.com/LTDBlog/modeling/dostuff.jpg" title="Do Stuff!" /><br />
No Goal? Here&#8217;s a Diagram.
</div>
<p>As with all things, a diagram should have a goal. A model that isn&#8217;t trying to communicate an idea is filler for a report no one is going to read anyway. A goal should be concise and limited to a single subject or perspective:</p>
<ul style="margin-left: 1em;">
<li>The data flow from the end customer to our master data system</li>
<li>An order-to-cash business process</li>
<li>The functional architecture of a software application</li>
<li>A graphic representation of our current state</li>
</ul>
<p>Mess around with too many factors and at the end of the day a mess is all you&#8217;ll  have:</p>
<ul style="margin-left: 1em;">
<li>The physical network topology combined with the disaster recovery plan and data flows between the systems</li>
<li>The application architecture with defined user work flows and user experience elements</li>
</ul>
<p>Or to translate: gobbledygook.</p>
<h2>Constraint &#8211; Less is More</h2>
<p>A goal provides me with my first constraint, and constraints are good. Defining constraints will keep my model simpler and consistent, which means the end message will be clearer. At the same time, a well-defined set of constraints will encourage creativity, providing a better end product.</p>
<p>Often my constraints will include things like not allowing connections to cross, only using a very simple set of shapes, restricting myself to only a few shades of color, or setting time limits. I&#8217;ll define the perspective I want to use with my goal, whether it will be a topological map, a flow, or just a set of connected shapes. </p>
<p>This keeps me focused instead of playing with the entire palette of colors, shapes, and page sizes available in my favorite software tools.</p>
<h2>Content &#8211; Work on a Temporary Surface</h2>
<p>Even with constraints and a goal, I still don&#8217;t know exactly where I will end up or what I will learn along the way, so I start on the whiteboard. With a whiteboard I can start diagramming out the pieces I know, add in new items or resolve question marks as I run into them, and easily combine and rearrange my thoughts. Some of my constraints will be ineffective at this stage, but natural constraints (like the number of markers I have and the board size) will replace them in helping my creativity and thought processes.</p>
<p>This stage is also where I figure out my wording. Because it&#8217;s so easy to see the big picture (heh) on my whiteboard, I also get a good feel for when words are too specific, not specific enough, or possibly just not quite the right word for what I am trying to communicate. Instead of focusing on getting all the boxes lined up, I can focus on using clear and consistent terminology that will help support the final model rather than detract from it.</p>
<h2>Medium &#8211; Where is it Going?</h2>
<div style="float: left; font-size: .8em; color: #666666; text-align: center; margin: 2em 1em 1em 1em">
<img src="http://tiernok.com/trent/2004_11_05_04_sm.jpg" title="Content needs context" /><br />
Content needs Context
</div>
<p>As I make the transition from whiteboard to diagramming software, the last piece of the equation is to consider the medium I am going to use to communicate the model. A standalone diagram may put higher priority on further simplicity of shapes and colors, where a presentation model may put lower priority on text and higher priority on subtleties for deeper conversation. </p>
<p>Will there need to be a legend? Is font-size 8 going to be a waste of time or readable font? If I use subtle shades of color will it all print the same color or show up in gloriously rendered imagery on a 12 foot display? Will adding a cartoon get a chuckle in a presentation or a frown in an executive review? Can I include a picture of my cat?</p>
<p>The context the diagram will be communicating in will determine the last set of constraints.</p>
<h2>Terminology &#8211; The Wrong Word Invalidates the Model</h2>
<div style="float: right; font-size: .8em; color: #666666; text-align: center;">
<img src="http://tiernok.com/LTDBlog/modeling/van-venn-diagram.jpg" title="'Van' Diagram" /><br />
Using the right terminology, <br />thanks <a href="http://www.lolcaption.com/random-funny/what-is-a-van-diagram-you-ask-well-let-me-show-you/">lolcaption.com</a>
</div>
<p>General wording may have been roughed in on the whiteboard and some really good words may have been chosen, but these now need to be examined in light of the future medium as well as the audience. In many cases, using a word out of context can distract my audience or even negate the model&#8217;s message entirely.</p>
<p>That being said, endless anxiety over perfection is nowhere near as good as a cool beer at the end of a work day, so we need to strike a balance between working through the night and achieving good enough. So I&#8217;ll be careful, in general, when using customer terminology and try to be pragmatic in my search for the perfect name for the third box from the left.</p>
<h2>Composition &#8211; Additional Layers of Meaning</h2>
<p>The last stage of the model, having transferred it from whiteboard to software and applied corrections to terminology, is to add some depth that supports the initial concept. </p>
<p>Colors, re-arranging layout to alter proximity, fonts, and even line thicknesses are all tools I use to add subtle depth to a model. If I am planning on presenting the model, I can start the discussion on the general message of the model and dive into these subtleties as the discussion progresses. A thicker line between two systems can communicate greater bandwidth or a more secure transport layer. A common shading of colors between multiple objects communicates a relationship or similarity. As with the stages before, I try to use constraint. Applying the whole palette and a different shape for each object may seem fun, but it&#8217;s going to communicate confusion (and possibly a desire for medication).</p>
<p>While working with the composition, I will also create temporary versions to play with drastically different layouts or shapes. This gives me a fresh look at a concept that has undoubtedly been on my whiteboard for days, giving me an opportunity to catch last minute holes or simply provide alternative layout options.</p>
<h2>Sounds Like a Lot of Work&#8230;</h2>
<p>There are different levels of work involved in modeling. In some cases even finding the time to stop doing and try to draw an idea may seem like a waste. </p>
<div style="float: right; font-size: .8em; color: #666666; text-align: center;">
<img src="http://tiernok.com/LTDBlog/modeling/lookbothways.jpg" title="No Need To Look Ahead" /><br />
Not looking ahead?<br />Diagram for that too&#8230;
</div>
<div style="font-size: .8em; margin: 1em;  padding: 1em;">
How do I judge when it is worth spending the time?</p>
<p><strong>5 Minutes:</strong> If it only takes five minutes to draw a fast diagram of what I am intending to do, then that 5 minutes didn&#8217;t cost much and I can move forward with confidence.</p>
<p><strong>30 Minutes:</strong> If it takes 30 minutes, I&#8217;ve erased and redrawn half of it, and the person I am explaining it to is still arguing with me, then it&#8217;s time to draw a model. </p>
<p><strong>3 Hours:</strong> If it takes 3 hours, we end with more questions than we started with, half the questions have the potential for refocusing the project, and we&#8217;re still trying to figure out what to call this thing&#8230;yeah, it&#8217;s definitely time to get a handle on what we&#8217;re spending time on.
</div>
<p>Jumping right into any project when we can&#8217;t draw a high level summary means we&#8217;re spending time and resources on something we can&#8217;t adequately define. It doesn&#8217;t matter how fast we&#8217;re moving if we&#8217;re spending that time running in random directions and ignoring cross-traffic.</p>
]]></content:encoded>
			<wfw:commentRss>/index.php/architect/introductionarchitecturedesign/why-and-how-i-model/feed/</wfw:commentRss>
		<slash:comments>2</slash:comments>
		</item>
		<item>
		<title>Model-View-Presenter: Looking at Passive View</title>
		<link>/index.php/architect/designingsoftware/model-view-presenter-looking-at-passive/</link>
		<comments>/index.php/architect/designingsoftware/model-view-presenter-looking-at-passive/#comments</comments>
		<pubDate>Thu, 15 Jul 2010 09:44:12 +0000</pubDate>
		<dc:creator><![CDATA[Eli Weinstock-Herman (tarwn)]]></dc:creator>
				<category><![CDATA[Designing Software]]></category>
		<category><![CDATA[Introduction to Architecture and Design]]></category>
		<category><![CDATA[architecture]]></category>
		<category><![CDATA[model view presenter]]></category>
		<category><![CDATA[passive view]]></category>
		<category><![CDATA[patterns]]></category>

		<guid isPermaLink="false">/index.php/2010/07/model-view-presenter-looking-at-passive/</guid>
		<description><![CDATA[Model-View-Presenter is an architecture pattern that defines a structure for behavior and logic at the UI level. M-V-P separates the logic of the presentation, such as interacting with back-end services and the business layer, from the mechanics of disp&#8230;]]></description>
				<content:encoded><![CDATA[<p>Model-View-Presenter is an architecture pattern that defines a structure for behavior and logic at the UI level. M-V-P separates the logic of the presentation, such as interacting with back-end services and the business layer, from the mechanics of displaying buttons and interface components. </p>
<p>I often build small projects to help understand and grow my skills as a developer, architect, and all-around technologist (as may be apparent from the <a href="/index.php/All/?disp=authdir&amp;author=9" target="_blank" title="See all of my posts at LTD">wide range of topics I post on</a>). Today I worked with a combination of Visio and Visual Studio to build a sample project to play with the Passive View concept and to help grow my own understanding of the concept. This post will cover the Visio side of my learning-curve.</p>
<p>You can read more about Model View Presenter at <a href="http://en.wikipedia.org/wiki/Model-view-presenter" target="_blank" title="Model-View-Presenter at Wikipedia">Wikipedia</a> and <a href=http://msdn.microsoft.com/en-us/magazine/cc188690.aspx"" target="_blank" title="Model View Presenter by Jean-Paul Boodhoo on MSDN">MSDN</a>. Perhaps the best information can be found on Martin Fowler&#8217;s site, where he has separate write-ups on <a href="http://www.martinfowler.com/eaaDev/PassiveScreen.html" target=_blank" title="Passive View pattern">Passive View</a> and <a href="http://www.martinfowler.com/eaaDev/SupervisingPresenter.html" target=_blank" title="Supervising Controller Pattern">Supervising Controller</a>.</p>
<div style="background-color:#FFFFCC; padding: .5em; margin: .5em; border: 1px solid #DDDDAA; color: #333333; font-size: 80%;">Note: I know some people were waiting for another Virtual Lab entry this week, and here I am writing about Architecture instead. Don&#8217;t worry, the virtual lab series will continue, I just felt like doing a write-up while I was playing this past weekend.</div>
<h2>Passive View</h2>
<p>Passive View is a subset of the Model-View-Presenter pattern. In Passive View, the interface is responsible for handling interface-specific logic, such as figuring out how to put a value in a textbox or react to events from button clicks, but all actions and logic outside of the raw UI are sent to the Presenter to execute or manage. The Presenter is responsible for calling business methods in the Business model and updating the data that is available in the View. </p>
<div style="text-align: center; font-size: .8em; color: #666666;">
<img src="http://tiernok.com/LTDBlog/MVP/mvp.png" alt="Basic Model-View-Presenter diagram" /><br />
Basic Model-View-Presenter Diagram
</div>
<p>From the outside in, the architecture for Passive View looks something like this:</p>
<ul>
<li>UI &#8211; The User Interface reflects what is going on beneath it by implementing one or more View interfaces</li>
<li>Presenter &#8211; The Presenter receives interactions from the UI or Model and updates the Views it is attached to</li>
<li>Model &#8211; The model is a facade or black box in our diagram, behind which is a business logic layer and data layer</li>
</ul>
<p>In a flat architecture we would collect data from the interface, perhaps do some business and data validation, and then save it directly to a database using stored procedures or inline SQL. Defining a data access layer (or data model like entity framework) allows our application to operate on cohesive, defined objects that are meaningful to the application and stored and retrieved consistently. Defining a business logic layer allows us to centralize business rules that operate on entities in our application in a manner that is consistent with the business and internally consistent in the application, minimizing the risk that occurs when making changes to the business flow. Separating the logic of populating inputs and responding to button presses on the UI from the information being communicated to the end user and conceptual responses to their input allows the system to interact with the user consistently across any number of interfaces into the same application.</p>
<p>The definition of each level increases our ability to automate testing and supports greater <a href="http://en.wikipedia.org/wiki/Separation_of_concerns" title="Separation of Concerns at Wikipedia" target="_blank">Separation of Concerns</a>.</p>
<h2>Implementing a Sample Project</h2>
<p>My learning exercise has been the the creation of an ASP.Net search page that allows an end user (customer) to search for finished products from the AdventureWorks sample database. The architecture and design decisions were done as an exercise in Visio using simple shapes and layouts.</p>
<p>My example application has several functional and non-functional requirements:</p>
<ol>
<li>Functional &#8211; Display product number, name, list price, and available quantity in tabular format</li>
<li>Functional &#8211; Provide a basic search input and button to search product names</li>
<li>Non-Functional &#8211; Implement an M-V-P pattern &#8211; Obviously the purpose of this whole exercise</li>
<li>Non-Functional &#8211; Use a simple model stack that can be easily replaced with a Service-Oriented one at a later time</li>
<li>Non-Functional &#8211; Build with the idea that we will later create a Silverlight or WPF front-end</li>
<li>Non-Functional &#8211; Make pretty pictures for article</li>
</ol>
<p><i>My unwritten, final requirement was to finish the whole thing in half a day, though luckily I didn&#8217;t define whether I intended that to mean 4 hours or 12.</i></p>
<h3>Initial Architecture</h3>
<p>To start I created a diagram of the application architecture:</p>
<div style="text-align: center; font-size: .8em; color: #666666;">
<img src="http://tiernok.com/LTDBlog/MVP/mvp_arch_01.png" alt="More extensive M-V-P Diagram" /><br />
More Extensive Model-View-Presenter Diagram
</div>
<p>The purple layer is my presentation layer, which reflects the View. The blue layer is my Presenter layer which contains the logic for interacting between the end user and interface as well as a definition, or contract, of the information available in the View. The Green is the Model (or is behind the model, depending on your viewpoint) and exposes business functions and data entities for the Presenter to interact with.</p>
<h3>Class Layout</h3>
<p>Once the high level diagram was completed, I could approach the task of creating some base classes and interfaces to use in implementing the project.</p>
<ul>
<li>Model.IModel &#8211; Generic Model Interface to expose business calls to Presenters</li>
<li>Presenter.IView &#8211; Generic View Interface that all Presenters can interact with and all screens implement</li>
<li>Presenter.BasePresenter &#8211; Generic Presenter class that all Presenters will implement</li>
</ul>
<p>To keep the project to a single morning but also allow the ability to come back and build a more architecturally sound solution, I implemented the Model in a very basic fashion that was referenced locally by the Presenter project and makes direct calls to SQL Server using ADO and parametrized, inline SQL. This buys me the benefits of having a well-defined Model (via the interface) but allows me concentrate my time and effort on the learning part of the project (ie, the M-V-P interaction and structure). Defining the model interface also leaves me open to come back and replace it with better separated code and the ability to create a model that acts as a facade to a service stack, instead of local DLLs.</p>
<ul>
<li>Model.BasicModel.Model &#8211; Basic implementation of a model that will interact with AdventureWorks on SQL Server</li>
<li>Model.Entities.Product &#8211; A Product Entity that can be communicated between an IModel instance and Presenter
<li>Presenter.ProductSearchPresenter &#8211; A Presenter to manage product search interface</li>
<li>Presenter.IProductSearchView &#8211; A view of the data involved in a product search</li>
<li>ProductSearch.aspx &#8211; A web page that implements the IProductSearchView and interacts with the ProductSearchPresenter</li>
</li>
</ul>
<p>My final Visio diagram ended up looking like this:</p>
<div style="text-align: center; font-size: .8em; color: #666666;">
<img src="http://tiernok.com/LTDBlog/MVP/mvp_arch_02.png" alt="Example Application Diagram" /><br />
Diagram of Example Application
</div>
<p>In this case the left side represents basic components (bases classes and interfaces) that are used to define common structure or contracts on the right side. </p>
<h2>The Code</h2>
<p>For the purposes of the example project, my view has properties for Search Text, a Search Count (number of results), Results (a generic list of the Product entity), and a boolean indicating whether there are results to display. My Web Form implements these properties, tying them to elements on the screen.</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="csharp"><thead><tr><td colspan="2"  class="head">C#</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
</pre></td><td class="de1"><pre class="de1">&nbsp;<span class="kw1">public</span> <span class="kw1">partial</span> <span class="kw4">class</span> WebForm1 <span class="sy0">:</span> <span class="kw5">System.<span class="me1">Web</span><span class="sy0">.</span><span class="me1">UI</span></span><span class="sy0">.</span><span class="me1">Page</span>, Presenter<span class="sy0">.</span><span class="me1">Views</span><span class="sy0">.</span><span class="me1">IProductSearchView</span> <span class="br0">&#123;</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; Presenter<span class="sy0">.</span><span class="me1">ProductSearchPresenter</span> _presenter<span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">protected</span> <span class="kw4">void</span> Page_Load<span class="br0">&#40;</span><span class="kw4">object</span> sender, EventArgs e<span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; btnSearch<span class="sy0">.</span><span class="me1">Click</span> <span class="sy0">+=</span> <span class="kw3">new</span> EventHandler<span class="br0">&#40;</span>btnSearch_Click<span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; rptProducts<span class="sy0">.</span><span class="me1">ItemDataBound</span> <span class="sy0">+=</span> <span class="kw3">new</span> RepeaterItemEventHandler<span class="br0">&#40;</span>rptProducts_ItemDataBound<span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; _presenter <span class="sy0">=</span> <span class="kw3">new</span> Presenter<span class="sy0">.</span><span class="me1">ProductSearchPresenter</span><span class="br0">&#40;</span><span class="kw3">new</span> Model<span class="sy0">.</span><span class="me1">LocalModel</span><span class="sy0">.</span><span class="me1">BasicModel</span><span class="br0">&#40;</span><span class="kw5">System.<span class="me1">Configuration</span></span><span class="sy0">.</span><span class="me1">ConfigurationManager</span><span class="sy0">.</span><span class="me1">ConnectionStrings</span><span class="br0">&#91;</span><span class="st0">&quot;AdventureWorks&quot;</span><span class="br0">&#93;</span><span class="sy0">.</span><span class="me1">ConnectionString</span><span class="br0">&#41;</span>, <span class="kw1">this</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp; &nbsp; &nbsp; &nbsp; 
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw4">void</span> btnSearch_Click<span class="br0">&#40;</span><span class="kw4">object</span> sender, EventArgs e<span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">this</span><span class="sy0">.</span>_presenter<span class="sy0">.</span><span class="me1">ExecuteProductSearch</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw4">string</span> Presenter<span class="sy0">.</span><span class="me1">Views</span><span class="sy0">.</span><span class="me1">IProductSearchView</span><span class="sy0">.</span><span class="me1">SearchText</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">get</span> <span class="br0">&#123;</span> <span class="kw1">return</span> tbSearch<span class="sy0">.</span><span class="me1">Text</span><span class="sy0">;</span> <span class="br0">&#125;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">set</span> <span class="br0">&#123;</span> tbSearch<span class="sy0">.</span><span class="me1">Text</span> <span class="sy0">=</span> <span class="kw1">value</span><span class="sy0">;</span> <span class="br0">&#125;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw4">int</span> Presenter<span class="sy0">.</span><span class="me1">Views</span><span class="sy0">.</span><span class="me1">IProductSearchView</span><span class="sy0">.</span><span class="me1">ResultCount</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">set</span> <span class="br0">&#123;</span> lblResultCount<span class="sy0">.</span><span class="me1">Text</span> <span class="sy0">=</span> <span class="kw1">value</span><span class="sy0">.</span><span class="me1">ToString</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span> <span class="br0">&#125;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; List<span class="sy0">&lt;</span>Model<span class="sy0">.</span><span class="me1">Entities</span><span class="sy0">.</span><span class="me1">Product</span><span class="sy0">&gt;</span> Presenter<span class="sy0">.</span><span class="me1">Views</span><span class="sy0">.</span><span class="me1">IProductSearchView</span><span class="sy0">.</span><span class="me1">SearchResults</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">set</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">if</span> <span class="br0">&#40;</span><span class="kw1">value</span> <span class="sy0">!=</span> <span class="kw1">null</span> <span class="sy0">&amp;&amp;</span> <span class="kw1">value</span><span class="sy0">.</span><span class="me1">Count</span> <span class="sy0">&gt;</span> <span class="nu0">0</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; rptProducts<span class="sy0">.</span><span class="me1">DataSource</span> <span class="sy0">=</span> <span class="kw1">value</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; rptProducts<span class="sy0">.</span><span class="me1">DataBind</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw4">bool</span> Presenter<span class="sy0">.</span><span class="me1">Views</span><span class="sy0">.</span><span class="me1">IProductSearchView</span><span class="sy0">.</span><span class="me1">DisplayResults</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">set</span> <span class="br0">&#123;</span> tblResults<span class="sy0">.</span><span class="me1">Visible</span> <span class="sy0">=</span> <span class="kw1">value</span><span class="sy0">;</span> <span class="br0">&#125;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span>
<span class="sy0">...</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse"> public partial class WebForm1 : System.Web.UI.Page, Presenter.Views.IProductSearchView {

        Presenter.ProductSearchPresenter _presenter;

        protected void Page_Load(object sender, EventArgs e) {
            btnSearch.Click += new EventHandler(btnSearch_Click);
            rptProducts.ItemDataBound += new RepeaterItemEventHandler(rptProducts_ItemDataBound);
            _presenter = new Presenter.ProductSearchPresenter(new Model.LocalModel.BasicModel(System.Configuration.ConfigurationManager.ConnectionStrings["AdventureWorks"].ConnectionString), this);
        }
        
        void btnSearch_Click(object sender, EventArgs e) {
            this._presenter.ExecuteProductSearch();
        }

        string Presenter.Views.IProductSearchView.SearchText {
            get { return tbSearch.Text; }
            set { tbSearch.Text = value; }
        }

        int Presenter.Views.IProductSearchView.ResultCount {
            set { lblResultCount.Text = value.ToString(); }
        }

        List&lt;Model.Entities.Product&gt; Presenter.Views.IProductSearchView.SearchResults {
            set {
                if (value != null &amp;&amp; value.Count &gt; 0) {
                    rptProducts.DataSource = value;
                    rptProducts.DataBind();
                }
            }
        }

        bool Presenter.Views.IProductSearchView.DisplayResults {
            set { tblResults.Visible = value; }
        }
...</pre></div></div>

<p>As the presenter populates properties in the view, the information is automatically reflected on the page. The actual logic of how the business functions are called and populate those properties are neatly packaged up in the Presenter and View interface and very little logic occurs in the actual web form.</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="csharp"><thead><tr><td colspan="2"  class="head">C#</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
</pre></td><td class="de1"><pre class="de1">&nbsp;<span class="kw1">public</span> <span class="kw4">class</span> ProductSearchPresenter <span class="sy0">:</span> BasePresenter <span class="br0">&#123;</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">protected</span> Views<span class="sy0">.</span><span class="me1">IProductSearchView</span> _view<span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">public</span> ProductSearchPresenter<span class="br0">&#40;</span>Model<span class="sy0">.</span><span class="me1">IModel</span> model, Views<span class="sy0">.</span><span class="me1">IProductSearchView</span> view<span class="br0">&#41;</span> <span class="sy0">:</span> <span class="kw1">base</span><span class="br0">&#40;</span>model<span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">this</span><span class="sy0">.</span>_view <span class="sy0">=</span> view<span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">this</span><span class="sy0">.</span>_view<span class="sy0">.</span><span class="me1">ResultCount</span> <span class="sy0">=</span> <span class="nu0">0</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">this</span><span class="sy0">.</span>_view<span class="sy0">.</span><span class="me1">DisplayResults</span> <span class="sy0">=</span> <span class="kw1">false</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">public</span> <span class="kw4">void</span> ExecuteProductSearch<span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; List<span class="sy0">&lt;</span>Model<span class="sy0">.</span><span class="me1">Entities</span><span class="sy0">.</span><span class="me1">Product</span><span class="sy0">&gt;</span> results<span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; results <span class="sy0">=</span> <span class="kw1">this</span><span class="sy0">.</span>_model<span class="sy0">.</span><span class="me1">SearchProduct</span><span class="br0">&#40;</span><span class="kw1">this</span><span class="sy0">.</span>_view<span class="sy0">.</span><span class="me1">SearchText</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">if</span> <span class="br0">&#40;</span>results<span class="sy0">.</span><span class="me1">Count</span> <span class="sy0">&gt;</span> <span class="nu0">0</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">this</span><span class="sy0">.</span>_view<span class="sy0">.</span><span class="me1">ResultCount</span> <span class="sy0">=</span> results<span class="sy0">.</span><span class="me1">Count</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">this</span><span class="sy0">.</span>_view<span class="sy0">.</span><span class="me1">DisplayResults</span> <span class="sy0">=</span> <span class="kw1">true</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">this</span><span class="sy0">.</span>_view<span class="sy0">.</span><span class="me1">SearchResults</span> <span class="sy0">=</span> results<span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">else</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">this</span><span class="sy0">.</span>_view<span class="sy0">.</span><span class="me1">ResultCount</span> <span class="sy0">=</span> <span class="nu0">0</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">this</span><span class="sy0">.</span>_view<span class="sy0">.</span><span class="me1">DisplayResults</span> <span class="sy0">=</span> <span class="kw1">false</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">this</span><span class="sy0">.</span>_view<span class="sy0">.</span><span class="me1">SearchResults</span> <span class="sy0">=</span> <span class="kw1">null</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp; &nbsp; <span class="br0">&#125;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse"> public class ProductSearchPresenter : BasePresenter {

        protected Views.IProductSearchView _view;

        public ProductSearchPresenter(Model.IModel model, Views.IProductSearchView view) : base(model) {
            this._view = view;
            this._view.ResultCount = 0;
            this._view.DisplayResults = false;
        }

        public void ExecuteProductSearch() {
            List&lt;Model.Entities.Product&gt; results;
            results = this._model.SearchProduct(this._view.SearchText);
            if (results.Count &gt; 0) {
                this._view.ResultCount = results.Count;
                this._view.DisplayResults = true;
                this._view.SearchResults = results;
            }
            else {
                this._view.ResultCount = 0;
                this._view.DisplayResults = false;
                this._view.SearchResults = null;
            }
        }
    }</pre></div></div>

<p>To create a unit test, we define a simple view that implements the view interface, execute the presenter logic, and verify the properties are populated the way we would expect when the same presenter calls are made from the interface.</p>
<h3>Extending the Architecture Further</h3>
<p>Extending the application to display product search in a different manner would only require the addition of a new interface that also implements the Product Search View. A Silverlight front-end would only require creating the basic project, implementing the product search View, and wiring the new interface controls to the view properties. To replace the direct mode reference with a service reference, we could create a service facade that implemented the IModel interface, connected to a local or remote WCF service behid the scenes to handle the real model logic. And finally, instead of counting on our QA department to test all of the application interactions, we can create unit tests directly against the Presenter and Views to ensure that all of the interactions below the top surface of the application are happening consistently and to our expectation.</p>
<h2>Your Turn</h2>
<p>Getting this much of the architecture working is a good first step. I took a number of shortcuts on the BasicModel class in my example, but I now have a functional Model-View-Presenter application to play with. Hopefully there was enough information in the article to interest you in trying this out on your own. I urge you to read the articles linked in the top of the post (or several more in my <a href="http://delicious.com/tarwn/model-view-presenter" title="Eli's Delicious bookmarks for M-V-P" target="_blank">Model-View-Presentation bookmarks</a>) and come up with your own diagrams and sample project. Even doing a small project will force you to run into questions and considerations you wouldn&#8217;t have had by simply reading about it, not to mention unrelated tidbits you will pick up along the way (for instance, I also learned about <a href="http://msdn.microsoft.com/en-us/library/ms668604.aspx" title="ObservableCollection at MSDN" target="_blank">ObservableCollections</a> today).</p>
]]></content:encoded>
			<wfw:commentRss>/index.php/architect/designingsoftware/model-view-presenter-looking-at-passive/feed/</wfw:commentRss>
		<slash:comments>11</slash:comments>
		</item>
		<item>
		<title>MSDN Ultimate Subscription giveaway +1</title>
		<link>/index.php/architect/hardwareinfrastructuredesign/msdn-ultimate-subscription-giveaway-2/</link>
		<comments>/index.php/architect/hardwareinfrastructuredesign/msdn-ultimate-subscription-giveaway-2/#respond</comments>
		<pubDate>Tue, 06 Jul 2010 21:35:00 +0000</pubDate>
		<dc:creator><![CDATA[Ted Krueger (onpnt)]]></dc:creator>
				<category><![CDATA[Designing Multi-Application Solutions]]></category>
		<category><![CDATA[Designing Software]]></category>
		<category><![CDATA[Enterprise Architecture]]></category>
		<category><![CDATA[Hardware and Infrastructure Design]]></category>
		<category><![CDATA[Information and Integration Architecture]]></category>
		<category><![CDATA[Introduction to Architecture and Design]]></category>
		<category><![CDATA[giveaway]]></category>
		<category><![CDATA[msdn]]></category>
		<category><![CDATA[visual studio 2010]]></category>

		<guid isPermaLink="false">/index.php/2010/07/msdn-ultimate-subscription-giveaway-2/</guid>
		<description><![CDATA[I was fortunate enough to receive MSDN Ultimate Subscriptions as well as SQLDenis.  I Think Denis's idea and contest to see who we can give these to is excellent.  To support Denis and his idea, I'm adding another subscription that will be handed over once we read over the responses.  That means your chances just got much better to enjoy the subscriptions and the benefits Visual Studio 2010 has to offer!]]></description>
				<content:encoded><![CDATA[<div class="image_block"><img src="/wp-content/uploads/blogs/Architect/msdn_notforresale.gif" alt="" title="" width="250" height="145" align="left" /></div>
<p>I was fortunate enough to receive MSDN Ultimate Subscriptions as well as SQLDenis (<a href="/index.php/All/?disp=authdir&amp;author=4">blog</a> | <a href="http://twitter.com/denisgobo/">Twitter</a>).  I Think Denis&#8217;s idea and contest to see who we can give these to is excellent.  To support Denis and his idea, I&#8217;m adding another subscription that will be handed over once we read over the responses.  That means your chances just got much better to enjoy the subscriptions and the benefits Visual Studio 2010 has to offer!</p>
<p>
</p>
<p>To go over what the response should consist of again…</p>
<ol>
<li>Why do you need this, what are you going to build with this, will it help other people&#8217;s lives?</li>
<li>What specific functionality that is only part of Ultimate are you going to use?</li>
<li>You need to have a technical blog and provide the URL to that blog, if you are an active member of the technical community (stackoverflow, msdn forums etc etc) then also include those links.</li>
</ol>
<p>Leave a comment <a href="/index.php/Architect/HardwareInfrastructureDesign/msdn-ultimate-subscription-giveaway">here</a>, you will also have to join the forums, that way I will have your email to contact you and I will able to ask you questions about your answers if needed. I created a thread in the forums here: http://forum.lessthandot.com/viewtopic.php?f=121&amp;t=11456</p>
<blockquote><p><span class="MT_red">Note: Click, <a href="/index.php/Architect/HardwareInfrastructureDesign/msdn-ultimate-subscription-giveaway">here</a> to leave your comment on the original blog post and add a comment to the forums to indicate you have done so.  Do not put your comment on this blog post</span></p></blockquote>
<p><i>And as in the original blog post, the results will be judged by the LessThanDot owners/management group</i></p>
<p>
These MSDN Subscriptions are more than just something you will leave to start playing with 6 months from now.  I can honestly say, even with the price tag they come with retail on the shelf, they are worth it.  The Visual Studio and .NET Framework product team are really outdoing themselves this time by sending these out to us so we can find community members that will really take advantage of them.
</p>
<p><strong>Good luck and I look forward to reading your responses!</strong></p>
]]></content:encoded>
			<wfw:commentRss>/index.php/architect/hardwareinfrastructuredesign/msdn-ultimate-subscription-giveaway-2/feed/</wfw:commentRss>
		<slash:comments>0</slash:comments>
		</item>
		<item>
		<title>Validating Architecture with Visual Studio 2010</title>
		<link>/index.php/architect/designingsoftware/validating-architecture-with-visual-stud-2010/</link>
		<comments>/index.php/architect/designingsoftware/validating-architecture-with-visual-stud-2010/#comments</comments>
		<pubDate>Fri, 29 Jan 2010 11:11:00 +0000</pubDate>
		<dc:creator><![CDATA[Alex Ullrich]]></dc:creator>
				<category><![CDATA[Designing Software]]></category>
		<category><![CDATA[Introduction to Architecture and Design]]></category>
		<category><![CDATA[ndepend]]></category>
		<category><![CDATA[visual studio 2010]]></category>

		<guid isPermaLink="false">/index.php/2010/01/validating-architecture-with-visual-stud-2010/</guid>
		<description><![CDATA[I went to a local MS launch event for Visual Studio today, mainly to see what was new with Team Foundation Server, but what really impressed me was some of the new architecture tools they've added.  I admittedly haven't read too much about this before t&#8230;]]></description>
				<content:encoded><![CDATA[<p>I went to a local MS launch event for Visual Studio today, mainly to see what was new with Team Foundation Server, but what really impressed me was some of the new architecture tools they&#8217;ve added.  I admittedly haven&#8217;t read too much about this before today (my needs have been well-served by <a href="http://ndepend.com/">NDepend</a>) but I&#8217;m happy to see some improved architecture tools find their way into Visual Studio.  Looking at the <a href="http://www.microsoft.com/visualstudio/en-us/products/2010/default.mspx#compare">version comparison chart</a>, it appears this is only available in the <em>Ultimate</em> version.</p>
<p>For this example, I&#8217;ll use a Layer Diagram for an imaginary application with Web, Business and Data tiers, and some shared model objects.  This is an intentionally oversimplified example.</p>
<p>Anyway here&#8217;s what the diagram looks like:</p>
<div class="image_block"><img src="/wp-content/uploads/blogs/Architect/Validating-Architecture-VS2010/ArchitectureDiagramExample.PNG" alt="Sample Architecture Diagram" title="Diagram" width="428" height="372" /></div>
<p>Nothing really special here &#8211; the words are the name of the tier, and the numbers are the number of units of code (in this case projects, but you can add individual namespaces or classes as well).  To create the diagram, we need to first create a new Visual Studio Modeling Project.  A new layer diagram can then be added to this project.  I used the designer to add the shapes and dependency lines, and all looks good.  But we want to do more than look at it!</p>
<p>This is where things get interesting.  To place modules into one of the tiers, you can drag and drop either from the Solution Explorer or from the new Architecture Explorer.  Both have different ways of finding the objects you are looking for, but the result is the same.  Once all modules are allocated to the right layer, you can right click the diagram and choose &#8220;Validate Architecture&#8221;.</p>
<p>Visual Studio will then build your solution and validate its architecture.  If all goes well, you&#8217;ll see something like this in the output window:</p>
<blockquote><p>1/28/2010 4:04:17 PM: Architecture validation is starting.<br />
1/28/2010 4:04:23 PM: Architecture validation succeeded (0 suppressed).
</p></blockquote>
<p>Now, let&#8217;s try adding an illegal call, in this case from the data tier to a caching provider found in the web tier (I first tried adding a reference to the &#8220;Biz&#8221; project, but was not allowed because it would introduce a cyclic dependency &#8211; I guess this was in previous versions but I never ran into it before &#8211; pretty cool).</p>
<p>After this call is added, try validating the architecture again.  The solution will be rebuilt, and you&#8217;ll see something like this: </p>
<blockquote><p>1/28/2010 4:19:46 PM: Architecture validation is starting.<br />
1/28/2010 4:19:55 PM: Architecture validation failed with 3 violation(s) (0 suppressed).</p></blockquote>
<p>Ok, so we have violations, just as expected.  Clicking over to the error list you can find what exactly the errors are.</p>
<div class="image_block"><img src="/wp-content/uploads/blogs/Architect/Validating-Architecture-VS2010/ArchitectureValidationErrors.PNG" alt="Architecture Validation Errors" title="ArchitectureValidationErrors" width="862" height="233" /></div>
<p>So, not only do the undesirable calls added to the Data Layer&#8217;s code trigger violations, but the reference itself does as well.  There are a few things of interest that we can do with the errors from here.  </p>
<p>When right clicking the error, you can choose &#8220;Manage Validation Errors&#8221; from the context menu, and then &#8220;Suppress Errors&#8221;.  Well, as long as you&#8217;re willing to do it at your own risk ;).  Then you&#8217;d end up with a build output like this:</p>
<blockquote><p>1/28/2010 4:25:03 PM: Architecture validation is starting.<br />
1/28/2010 4:25:09 PM: Architecture validation succeeded (3 suppressed).</p></blockquote>
<p>Knowing our readership, I doubt this will be an option though.  So what can be done about this?  If you want to fix the error immediately, you can double click the error message and be taken to the offending code, just as you would for a syntax error if a normal build failed.  If you use Team Foundation Server, you can also select &#8220;Create Work Item&#8221; to create a new TFS work item based on the error.</p>
<p>This can also be included as part of your local build process by setting the &#8220;Validate Architecture&#8221; property of the Modeling Project.  TFS users can also add this step to their team build by opening the Compilation tab and adding the following to the MSBuild arguments section:</p>
<blockquote><p>/p:ValidateArchitecture=true</p></blockquote>
<p>Adding this to the team build is especially cool, because you can actually block check-ins that introduce these kinds of architectural problems.</p>
<p>I am <strong>really</strong> excited to see this kind of stuff getting more attention in Visual Studio.  I&#8217;m not sure if these new components will be able to do everything I&#8217;ve come to expect (and love) from NDepend, but their presence is a huge step forward for Visual Studio, and I think for the .net community in general.  I&#8217;m a big believer in the use of static code analysis as a tool for better understanding the code we work with, and I think that making these tools available to more developers (especially those in shops that are reluctant to use non-Microsoft components or tooling) will really help us continue to improve as a group.  </p>
<p>I noticed while writing this post that <a href="http://codebetter.com/blogs/patricksmacchia/archive/2010/01/28/ndepend-v3-is-now-100-integrated-in-visual-studio.aspx">the latest beta of NDepend 3 is now fully integrated with Visual Studio</a>.  I&#8217;d meant to do a future post comparing the DGQL queries available in Visual Studio 2010 with NDepend&#8217;s CQL, but perhaps a more thorough comparison will be in order.</p>
]]></content:encoded>
			<wfw:commentRss>/index.php/architect/designingsoftware/validating-architecture-with-visual-stud-2010/feed/</wfw:commentRss>
		<slash:comments>2</slash:comments>
		</item>
		<item>
		<title>Danger in Design: Why bother with Architecture ?</title>
		<link>/index.php/architect/hardwareinfrastructuredesign/why-bother-with-architecture/</link>
		<comments>/index.php/architect/hardwareinfrastructuredesign/why-bother-with-architecture/#comments</comments>
		<pubDate>Mon, 30 Jun 2008 10:36:11 +0000</pubDate>
		<dc:creator><![CDATA[damber]]></dc:creator>
				<category><![CDATA[Designing Multi-Application Solutions]]></category>
		<category><![CDATA[Designing Software]]></category>
		<category><![CDATA[Enterprise Architecture]]></category>
		<category><![CDATA[Hardware and Infrastructure Design]]></category>
		<category><![CDATA[Information and Integration Architecture]]></category>
		<category><![CDATA[Introduction to Architecture and Design]]></category>
		<category><![CDATA[architecture]]></category>
		<category><![CDATA[methodologies]]></category>
		<category><![CDATA[rationale]]></category>

		<guid isPermaLink="false">/index.php/2008/06/why-bother-with-architecture/</guid>
		<description><![CDATA[Creativity is a wonderful thing. It&#8217;s also something different for each of us, which is why sometimes our perspectives on the world can produce conflicting ideas on what is the right way and the wrong way to do things. This is a very common facet of the IT world, in particular making computer software, solutions [&#8230;]]]></description>
				<content:encoded><![CDATA[<p>Creativity is a wonderful thing.  It&#8217;s also something different for each of us, which is why sometimes our perspectives on the world can produce conflicting ideas on what is the right way and the wrong way to do things.  This is a very common facet of the IT world, in particular making computer software, solutions and services.  </p>
<h1>We don&#8217;t need architects!  &#8230;Do we ?</h1>
<p>It&#8217;s important for us to remember that we develop software to &#8220;do something&#8221; that we want it to do. In which case we need to continually review the success of that software or solution by evaluating it&#8217;s ability to meet our needs.  But who gets to say what those needs are, and how well they are met?  More importantly, what makes IT solutions good or bad ?  Is it how big they are ? Or how easy to use they are ?  Or maybe how efficiently they operate ? Or what about how well measured and managed they are ?  Or even how easy it is to change the way they work ?  What about all of the above, and much more&#8230;?</p>
<p>Getting to a point where a) you understand what success looks like, and b) you have a solution that delivers that success, can be achieved by using an Architect to facilitate and coordinate the construction of a design and resulting solution.  But that&#8217;s not always what happens. Apart from the many varying definitions of an architect&#8217;s role (and the different types of architects.. e.g. Enterprise Architect, Solutions Architect, Application Architect, Technical Architect,etc), there&#8217;s also often a perception from developers that architects are generally away with the fairies, dreaming up blue sky designs that are just not grounded in reality or worthwhile bothering with.  Additionally, a lot of businesses (too many unfortunately), just don&#8217;t understand the value of using an architect&#8230; Why pay someone to design the solution, when you&#8217;ve got business systems analysts and developers that can work it out between themselves ?</p>
<p> </p>
<h1>Winchester Mystery House, San Jose, CA</h1>
<p>Why indeed&#8230;  well, I thought it may be useful to post a little analogy with the &#8216;real world&#8217; &#8211; where architects and builders have been working together for many years to produce wonderful (and not so wonderful) buildings.</p>
<p>Firstly, let me introduce the Winchester Mystery House, of the Winchester Guns family fame:</p>
<div class="image_block"><img src="/wp-content/uploads/blogs/Architect/images/winchesterhouse.png" alt="" title="" width="440" height="286" /></div>
<p></p>
<h2>Functionally Rich</h2>
<ul>
<li>160 Rooms</li>
<li>47 Fireplaces</li>
<li>17 Chimneys</li>
<li>6 kitchens</li>
<li>10,000 windows</li>
</ul>
<p></p>
<h2>State of the Art Technology (at the time)</h2>
<ul>
<li>Wall Insulation</li>
<li>Push button gas lights</li>
<li>No-clog sink patent</li>
<li>Intercoms</li>
<li>Modern Heating &amp; Sewage</li>
</ul>
<p></p>
<h2>Total Cost</h2>
<p style="font-size: 1em;">$5.5m (~<span style="font-weight:800;">$300m</span> today) over <span style="font-weight: 800;">38 years</span> (1884 &#8211; 1922)</p>
<p></p>
<h2>But&#8230; <span style="color:#ff0000;">No Interoperability</span></h2>
<ul>
<li>65 doors to blank walls</li>
<li>13 abandoned staircases</li>
<li>24 skylights in floors</li>
<li>Rooms &#8220;build-around&#8221; other rooms</li>
<li>Enough keys to fill 2 large buckets</li>
</ul>
<p></p>
<p>Ouch.</p>
<p></p>
<h2>Due to the division of labour</h2>
<ul>
<li>Builders: 147</li>
<li>Architects: <span style="font-weight:800;text-decoration:underline;">0</span></li>
</ul>
<p></p>
<h2>Sound Familiar ?</h2>
<p>We&#8217;ve all worked on a project with something like this.  Usually because the system wasn&#8217;t really &#8216;designed&#8217; it just &#8216;happened&#8217;.  Maybe if we spent a little more time designing, and a little less building things would work a little better.  I bet they had some very talented builders working on this too &#8211; but their perspective wasn&#8217;t to make a solid overall design, it was to simply get on and do what they were tasked with.. sound familiar ?  How often do users come to a technical forum and ask for a solution to their problem to be faced with answers like &#8220;you need to normalise your database&#8221; etc, to which they simply retort &#8220;that&#8217;s not part of this project&#8221; ?  Too many, but sadly understandably so.</p>
<p>
A favourite Project Manager quote is &#8220;Failing to Plan is Planning to Fail&#8221;.  And they are generally right &#8211; not having a consistent, well thought out and planned design can lead to very complicated and difficult to manage, change or even use software.  Most architects will have come across solutions or applications that weren&#8217;t &#8216;designed&#8217; and just evolved, and will know just how much of a problem those applications really are.  This is <a href="http://www.sciam.com/article.cfm?id=softwares-dirty-little-secret&amp;sc=rss">Software&#8217;s Dirty Little Secret</a> &#8211; many systems have just &#8220;happened&#8221; without real thought to the design of the software.  And for that matter, haven&#8217;t thought about the application as part of a composite solution either &#8211; this is actually quite rare, even today with all the SOA hype of the last few years.
</p>
<h3>The Architect&#8217;s hand</h3>
<p>
Sometimes it might seem strange to developers that an architect wants to make a project use standards compliant technologies, standardised, re-usable or existing components, such as a Business Rules Engine, Reporting &amp; BI, Service Bus, Messaging Gateway, Portlets, etc &#8211; but this is what architecture is all about &#8211; not thinking about the one, single application or issue, but thinking about it&#8217;s co-existence in a much bigger world &#8211; not just the here and now functional requirements, but tomorrows new direction and demands.  Simplifying and standardising, Rationalising and Re-Using, Conceptualising and Componentising&#8230; the best architectures are easily understood, simple solutions that achieve a kind of elegance in concept and practicality in implementation.
</p>
<p>
There are several methodologies to use for developing an architecture &#8211; personally I use TOGAF which is more for generalist Enterprise &amp; Solutions Architecture development but the <acronym title="Architecture Development Methodology">ADM</acronym> can be applied in concept to designing most solutions/systems/applications.
</p>
<h2>So we do need to &#8220;do architecture&#8221; then?</h2>
<p>In short, Yes.  But how you actually &#8220;do architecture&#8221; depends greatly on the context.  There is a simple lesson here &#8211; architecture is all about simplifying and standardising the problem domain to provide an efficient, re-usable and consistent answer.  The important difference between a formal &#8220;architect&#8221; and a &#8220;builder&#8221; is not of technical expertise, but of perspective, so don&#8217;t assume that your most expert Java Programmer is naturally the architect to your solutions.  This doesn&#8217;t mean that an architect of all types shouldn&#8217;t possess good technical abilities and experience.</p>
<p>There is a nice <a href="http://msdn.microsoft.com/en-us/arcjournal/cc505968.aspx">overview of the different types of Architects</a> at the Microsoft Architecture Journal (which is often surprisingly not MS biased) written by IASA Sweden, however this misses out the technical/infrastructure architect from their Roles diagram, which is a key architect in any IT implementation.  Also, another article on the Architect Journal talks about <a href="http://msdn.microsoft.com/en-us/arcjournal/cc505974.aspx">what an architect actually is</a>, however is a little Software Architect focused.  Both interesting reads, especially for non-architects to understand how to &#8216;use&#8217; an architect (well, work with one effectively at least <img src="https://s.w.org/images/core/emoji/2/72x72/1f609.png" alt="😉" class="wp-smiley" style="height: 1em; max-height: 1em;" /> ). </p>
<h3>Some Exceptions..</h3>
<p>There are times when a formal architecture process is more of a hindrance than a help, and that is in R &amp; D contexts where rapid prototyping and proof of concept solutions are all about unrestricted creativity &#8211; in these cases architecture experience and knowledge is a good backdrop to help organise and focus ideas and channel that creativity into creating something unique.  (But&#8230; Remember that this is not production ready, it is a prototype in need of architectural design to create a production capable solution.  This is where too many rapid prototyping approaches get a bad name.)</p>
<p>
One thing I will write about soon is the risk of &#8216;over-designing&#8217; a solution, because sometimes it is easy to get carried away with design-pattern addiction and framework-itis and actually miss the whole point of the exercise.  Doing &#8216;too much&#8217; architecture can be as bad, and even worse than doing none.
</p>
<h2>And Finally&#8230;</h2>
<p>So&#8230; Yes &#8211; Sometimes it&#8217;s nice to just set out in your car and drive wherever the wind takes you until the fuel runs out.  But other times, and almost always when it is on &#8216;business time&#8217;, wandering aimlessly in the hope of finding something that might be useful is just not acceptable.  Having that vision, aspiration, direction and roadmap an architecture can bring to your project might seem like a chore and &#8220;impossible&#8221; to achieve to some people.. but how else will you get there, without ever actively and knowingly moving toward it ? Chance ?  Good Luck with that&#8230;</p>
<p>So, the next time you think about just winging it, and not bothering with architecture, just think about your software product as your own house that you wish to build &#8211; would you really just start building ?  Or even just draw up your own plans on visio and ask the builders to &#8216;sort it out&#8217; ?  </p>
<p><em>N.B. In the Winchester House example, strange as it may seem, the design actually met the brief &#8211; the needs of the owner weren&#8217;t really to design an architecturally great building, but just to have something creative to do.. it doesn&#8217;t matter that it wasn&#8217;t consistent, or standardised or even usable &#8211; it was the pleasure of doing that was needed, not the objective of greatness in form and function.  But have a think about that&#8230; when was the last time your boss suggested you design something for the fun of it, at the company&#8217;s expense, regardless of whether it results in some sort of throw-away chimera ? </em></p>
]]></content:encoded>
			<wfw:commentRss>/index.php/architect/hardwareinfrastructuredesign/why-bother-with-architecture/feed/</wfw:commentRss>
		<slash:comments>3</slash:comments>
		</item>
	</channel>
</rss>
