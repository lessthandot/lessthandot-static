<?xml version="1.0" encoding="UTF-8"?><feed
  xmlns="http://www.w3.org/2005/Atom"
  xmlns:thr="http://purl.org/syndication/thread/1.0"
  xml:lang="en-US"
  xml:base="/wp-atom.php"
   >
	<title type="text">Uncategorized &#8211; LessthanDot</title>
	<subtitle type="text">A Technical Community for IT Professionals</subtitle>

	<updated>2019-03-09T12:50:36Z</updated>

	<link rel="alternate" type="text/html" href="/" />
	<id>/index.php/feed/atom/</id>
	<link rel="self" type="application/atom+xml" href="/index.php/category/uncategorized/feed/atom/" />

	<generator uri="https://wordpress.org/" version="4.6.1">WordPress</generator>
	<entry>
		<author>
			<name>Eli Weinstock-Herman (tarwn)</name>
					</author>
		<title type="html"><![CDATA[Adding User-Managed API Keys to ASP.Net Core 2 w/ Cosmos DB]]></title>
		<link rel="alternate" type="text/html" href="/index.php/uncategorized/adding-user-managed-api-keys-to-asp-net-core-2-w-cosmos-db/" />
		<id>/?p=9201</id>
		<updated>2018-04-24T12:58:45Z</updated>
		<published>2018-04-24T12:58:45Z</published>
		<category scheme="/" term="ASP.NET" /><category scheme="/" term="Uncategorized" /><category scheme="/" term="ASP.Net Core 2" /><category scheme="/" term="CosmosDB" />		<summary type="html"><![CDATA[I’m building the foundation for an ASP.Net Core 2 site with Cosmos DB as the back-end store and want to build in the idea of user-manageable API keys. In the past two posts, I&#8217;ve added interactive registration and login to the application using built-in Cookie and Twitter middleware on top of custom authorization logic and [&#8230;]]]></summary>
		<content type="html" xml:base="/index.php/uncategorized/adding-user-managed-api-keys-to-asp-net-core-2-w-cosmos-db/"><![CDATA[<p>I’m building the foundation for an ASP.Net Core 2 site with <a href="https://azure.microsoft.com/en-us/services/cosmos-db/">Cosmos DB</a> as the back-end store and want to build in the idea of user-manageable API keys. In the past two posts, I&#8217;ve added interactive registration and login to the application using built-in Cookie and Twitter middleware on top of custom authorization logic and Cosmos DB. In this one, we&#8217;ll be adding endpoints that require API Keys that can be created and revoked by the user.</p>
<div id="attachment_9155" style="width: 610px" class="wp-caption aligncenter"><img src="/wp-content/uploads/2018/04/aspnetcore2cosmos_106-600x406.png" alt="3 Authentication Scenarios: User/Pass, Twitter, API Keys" width="600" height="406" class="size-medium-width wp-image-9155" srcset="/wp-content/uploads/2018/04/aspnetcore2cosmos_106-600x406.png 600w, /wp-content/uploads/2018/04/aspnetcore2cosmos_106-300x203.png 300w, /wp-content/uploads/2018/04/aspnetcore2cosmos_106-443x300.png 443w, /wp-content/uploads/2018/04/aspnetcore2cosmos_106.png 748w" sizes="(max-width: 600px) 100vw, 600px" /><p class="wp-caption-text">3 Authentication Scenarios: User/Pass, Twitter, API Keys</p></div>
<p>While I started out with credentials stored directly in the <code>LoginUser</code> Document, in the prior post I decided to start treating authentication mechanisms as separate documents (my house keys are not a property of me). </p>
<div id="attachment_9181" style="width: 236px" class="wp-caption aligncenter"><img src="/wp-content/uploads/2018/04/aspnetcore2cosmos_202.png" alt="Defining People (Users) Separate from House Keys (User Authentication)" width="226" height="161" class="size-full wp-image-9181" /><p class="wp-caption-text">Defining People (Users) Separate from House Keys (User Authentication)</p></div>
<p>In this post, that separation will start paying off, as it will allow us to add API key entries for the user and easily &#8220;revoke&#8221; them by switching their authentication type from &#8220;APIKey&#8221; to &#8220;RevokedAPIKey&#8221;, keeping the data available for audits but ensuring it&#8217;s no longer valid for API authentication.</p>
<style>
.note-area{
   border: 1px solid #eeeeee; 
   border-left-width: 16px; 
   padding: 1em;
   margin: 1em 0;
}
.warning-area{
   border: 1px solid #FFdddd; 
   border-left-width: 16px; 
   padding: 1em;
   margin: 1em 0;
}
</style>
<div class="note-area">
Posts in this series:</p>
<ul style="margin: .5em">
<li><a href="/index.php/webdev/serverprogramming/aspnet/asp-net-core-2-w-cosmosdb-getting-started/">ASP.Net Core 2 w/ Cosmos DB: Getting Started</a></li>
<li><a href="/index.php/webdev/serverprogramming/aspnet/custom-authentication-in-asp-net-core-2-w-cosmos-db/">Custom Authentication in ASP.Net Core 2 w/ Cosmos DB</a></li>
<li><a href="/index.php/webdev/serverprogramming/aspnet/adding-twitter-authentication-to-an-asp-net-core-2-site-w-cosmos-db/">Adding Twitter Authentication to an ASP.Net Core 2 site w/ Cosmos DB</a></li>
<li>Adding User-Managed API Keys to ASP.Net Core 2 w/ Cosmos DB (You Are Here!)</li>
</ul>
</div>
<h2>Breaking it down</h2>
<p>In the last two posts, we laid the groundwork for authentication from the UI down to Cosmos DB. With this post, we&#8217;re going to build a minimal screen to let users generate API Keys, some protected API endpoints, and the logic to tie these into the <code>LoginUserAuthentications</code> DocumentCollection in Cosmos DB.</p>
<div id="attachment_9202" style="width: 426px" class="wp-caption aligncenter"><img src="/wp-content/uploads/2018/04/aspnetcore2cosmos_301.png" alt="From UI down to Cosmos DB back up to Middleware" width="416" height="874" class="size-full wp-image-9202" srcset="/wp-content/uploads/2018/04/aspnetcore2cosmos_301.png 416w, /wp-content/uploads/2018/04/aspnetcore2cosmos_301-143x300.png 143w" sizes="(max-width: 416px) 100vw, 416px" /><p class="wp-caption-text">From UI down to Cosmos DB back up to Middleware</p></div>
<p>Most of the work is building on the <a href="">previous post</a>, the big difference is a new way to authenticate and some middleware to do the work.</p>
<p>I worked on this in two pieces:</p>
<ul>
<li><b>User Interface:</b> Create/Revoke API keys in the UI down to Cosmos DB</li>
<li><b>Making API Calls</b>: Protected API endpoints, Middleware, Membership business logic</li>
</ul>
<p>The source code through this set of changes is available here: <a href="https://github.com/tarwn/Sample_ASPNetCore2AndCosmosDB/tree/Post-%234" title="Github: Source as of this post">github: Sample_ASPNetCore2AndCosmosDB, Post #4 Branch</a></p>
<h2>Task 1: User-managed API Keys</h2>
<p>In this set of changes, we&#8217;re going to add some very basic screens to show the list of API Keys, add a new one, and revoke an existing one. </p>
<div class="note-area">Why Revoke instead of Delete? I chose to revoke API Keys to help support audit logs and instrumentation down the road. This may be a case of YAGNI, but it was easy enough to implement and also tries a pattern I may refactor to using for passwords and password history.</div>
<h3>UI Screens</h3>
<p>Let&#8217;s start with the screens and work down the stack. I&#8217;ve created a new (and poorly named) <code>UserController</code> for the new screens.</p>
<p><a href="https://github.com/tarwn/Sample_ASPNetCore2AndCosmosDB/blob/Post-%234/SampleCosmosCore2App/Controllers/UserController.cs">SampleCosmosCore2App/Controllers/UserController.cs</a></p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="csharp"><thead><tr><td colspan="2"  class="head">C#</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
</pre></td><td class="de1"><pre class="de1"><span class="br0">&#91;</span>HttpGet<span class="br0">&#40;</span><span class="st0">&quot;&quot;</span><span class="br0">&#41;</span><span class="br0">&#93;</span>
<span class="kw1">public</span> async Task<span class="sy0">&lt;</span>IActionResult<span class="sy0">&gt;</span> IndexAsync<span class="br0">&#40;</span><span class="kw4">string</span> error<span class="br0">&#41;</span>
<span class="br0">&#123;</span>
&nbsp; &nbsp; <span class="kw1">var</span> sessionId <span class="sy0">=</span> _membership<span class="sy0">.</span><span class="me1">GetSessionId</span><span class="br0">&#40;</span>HttpContext<span class="sy0">.</span><span class="me1">User</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; <span class="kw1">var</span> user <span class="sy0">=</span> await _persistence<span class="sy0">.</span><span class="me1">Users</span><span class="sy0">.</span><span class="me1">GetUserBySessionIdAsync</span><span class="br0">&#40;</span>sessionId<span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; <span class="kw1">var</span> auths <span class="sy0">=</span> await _persistence<span class="sy0">.</span><span class="me1">Users</span><span class="sy0">.</span><span class="me1">GetUserAuthenticationsAsync</span><span class="br0">&#40;</span>user<span class="sy0">.</span><span class="me1">Id</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; <span class="co1">// ... grouping logic to create model ...</span>
&nbsp; &nbsp;
&nbsp; &nbsp; <span class="kw1">return</span> View<span class="br0">&#40;</span><span class="st0">&quot;Index&quot;</span>, model<span class="br0">&#41;</span><span class="sy0">;</span>
<span class="br0">&#125;</span>
&nbsp;
<span class="br0">&#91;</span>HttpGet<span class="br0">&#40;</span><span class="st0">&quot;addKey&quot;</span><span class="br0">&#41;</span><span class="br0">&#93;</span>
<span class="kw1">public</span> IActionResult AddKey<span class="br0">&#40;</span><span class="br0">&#41;</span>
<span class="br0">&#123;</span>
&nbsp; &nbsp; <span class="kw1">var</span> model <span class="sy0">=</span> <span class="kw3">new</span> NewKeyModel<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; <span class="kw1">return</span> View<span class="br0">&#40;</span><span class="st0">&quot;AddKey&quot;</span>, model<span class="br0">&#41;</span><span class="sy0">;</span>
<span class="br0">&#125;</span>
&nbsp;
<span class="br0">&#91;</span>HttpPost<span class="br0">&#40;</span><span class="st0">&quot;addKey&quot;</span><span class="br0">&#41;</span><span class="br0">&#93;</span>
<span class="kw1">public</span> async Task<span class="sy0">&lt;</span>IActionResult<span class="sy0">&gt;</span> PostAddKeyAsync<span class="br0">&#40;</span>NewKeyModel model<span class="br0">&#41;</span>
<span class="br0">&#123;</span>
&nbsp; &nbsp; <span class="kw1">if</span> <span class="br0">&#40;</span><span class="sy0">!</span>ModelState<span class="sy0">.</span><span class="me1">IsValid</span><span class="br0">&#41;</span>
&nbsp; &nbsp; <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">return</span> View<span class="br0">&#40;</span><span class="st0">&quot;AddKey&quot;</span>, model<span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp;
&nbsp; &nbsp; <span class="kw1">var</span> sessionId <span class="sy0">=</span> _membership<span class="sy0">.</span><span class="me1">GetSessionId</span><span class="br0">&#40;</span>HttpContext<span class="sy0">.</span><span class="me1">User</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; <span class="kw1">var</span> user <span class="sy0">=</span> await _persistence<span class="sy0">.</span><span class="me1">Users</span><span class="sy0">.</span><span class="me1">GetUserBySessionIdAsync</span><span class="br0">&#40;</span>sessionId<span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; <span class="kw1">var</span> generatedKey <span class="sy0">=</span> _membership<span class="sy0">.</span><span class="me1">GenerateAPIKey</span><span class="br0">&#40;</span>user<span class="sy0">.</span><span class="me1">Id</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; <span class="kw1">var</span> result <span class="sy0">=</span> await _membership<span class="sy0">.</span><span class="me1">AddAuthenticationAsync</span><span class="br0">&#40;</span>user<span class="sy0">.</span><span class="me1">Id</span>, <span class="st0">&quot;APIKey&quot;</span>, generatedKey, model<span class="sy0">.</span><span class="me1">Name</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; <span class="kw1">var</span> resultModel <span class="sy0">=</span> <span class="co1">// ... create the model ...</span>
&nbsp;
&nbsp; &nbsp; <span class="kw1">return</span> View<span class="br0">&#40;</span><span class="st0">&quot;ShowKey&quot;</span>, resultModel<span class="br0">&#41;</span><span class="sy0">;</span>
<span class="br0">&#125;</span>
&nbsp;
<span class="br0">&#91;</span>HttpGet<span class="br0">&#40;</span><span class="st0">&quot;revoke&quot;</span><span class="br0">&#41;</span><span class="br0">&#93;</span>
<span class="kw1">public</span> async Task<span class="sy0">&lt;</span>IActionResult<span class="sy0">&gt;</span> Revoke<span class="br0">&#40;</span><span class="kw4">string</span> id<span class="br0">&#41;</span>
<span class="br0">&#123;</span>
&nbsp; &nbsp; <span class="kw1">var</span> sessionId <span class="sy0">=</span> _membership<span class="sy0">.</span><span class="me1">GetSessionId</span><span class="br0">&#40;</span>HttpContext<span class="sy0">.</span><span class="me1">User</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; <span class="kw1">var</span> user <span class="sy0">=</span> await _persistence<span class="sy0">.</span><span class="me1">Users</span><span class="sy0">.</span><span class="me1">GetUserBySessionIdAsync</span><span class="br0">&#40;</span>sessionId<span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; <span class="kw1">var</span> result <span class="sy0">=</span> await _membership<span class="sy0">.</span><span class="me1">RevokeAuthenticationAsync</span><span class="br0">&#40;</span>user<span class="sy0">.</span><span class="me1">Id</span>, id<span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; <span class="kw1">if</span> <span class="br0">&#40;</span>result<span class="sy0">.</span><span class="me1">Failed</span><span class="br0">&#41;</span>
&nbsp; &nbsp; <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">return</span> RedirectToAction<span class="br0">&#40;</span><span class="st0">&quot;IndexAsync&quot;</span>, <span class="kw3">new</span> <span class="br0">&#123;</span> error <span class="sy0">=</span> result<span class="sy0">.</span><span class="me1">Error</span> <span class="br0">&#125;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp; &nbsp; <span class="kw1">else</span>
&nbsp; &nbsp; <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">return</span> RedirectToAction<span class="br0">&#40;</span><span class="st0">&quot;IndexAsync&quot;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; <span class="br0">&#125;</span>
<span class="br0">&#125;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">[HttpGet("")]
public async Task&lt;IActionResult&gt; IndexAsync(string error)
{
	var sessionId = _membership.GetSessionId(HttpContext.User);
	var user = await _persistence.Users.GetUserBySessionIdAsync(sessionId);
	var auths = await _persistence.Users.GetUserAuthenticationsAsync(user.Id);

	// ... grouping logic to create model ...
   
	return View("Index", model);
}

[HttpGet("addKey")]
public IActionResult AddKey()
{
	var model = new NewKeyModel();
	return View("AddKey", model);
}

[HttpPost("addKey")]
public async Task&lt;IActionResult&gt; PostAddKeyAsync(NewKeyModel model)
{
	if (!ModelState.IsValid)
	{
		return View("AddKey", model);
	}

	var sessionId = _membership.GetSessionId(HttpContext.User);
	var user = await _persistence.Users.GetUserBySessionIdAsync(sessionId);

	var generatedKey = _membership.GenerateAPIKey(user.Id);
	var result = await _membership.AddAuthenticationAsync(user.Id, "APIKey", generatedKey, model.Name);
	var resultModel = // ... create the model ...

	return View("ShowKey", resultModel);
}

[HttpGet("revoke")]
public async Task&lt;IActionResult&gt; Revoke(string id)
{
	var sessionId = _membership.GetSessionId(HttpContext.User);
	var user = await _persistence.Users.GetUserBySessionIdAsync(sessionId);

	var result = await _membership.RevokeAuthenticationAsync(user.Id, id);
	if (result.Failed)
	{
		return RedirectToAction("IndexAsync", new { error = result.Error });
	}
	else
	{
		return RedirectToAction("IndexAsync");
	}
}</pre></div></div>

<p><code>IndexAsync</code> uses <code>ICustomMembership</code> to get the current logged in user&#8217;s information, then uses a new <code>UserPersistence</code> method to get all available <code>LoginUserAuthentications</code> from Cosmos DB (which will include Twitter, revoked API Tokens, and more as we go along).</p>
<p><code>AddKey</code> and <code>PostAddKeyAsync</code> display a form to create a new API Token and receive the POST, respectively. When we receive the POST, we rely on a new method in <code>ICustomMembership</code> to generate a token then use the existing method (built while adding Twitter) to store that token.</p>
<p><code>Revoke</code> uses a new <code>ICustomMembership</code> method to revoke a given key (and I only just noticed I left off the conventional Async suffix, oops).</p>
<p>The AddKey view is a basic 1-field form (included more to show you I don&#8217;t have anything up my sleeves):</p>
<p><a href="https://github.com/tarwn/Sample_ASPNetCore2AndCosmosDB/blob/Post-%234/SampleCosmosCore2App/Views/User/AddKey.cshtml">SampleCosmosCore2App/Views/User/AddKey.cshtml</a></p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="html4strict"><thead><tr><td colspan="2"  class="head">HTML</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
</pre></td><td class="de1"><pre class="de1">@model SampleCosmosCore2App.Models.User.NewKeyModel
@{
&nbsp; &nbsp; ViewData[&quot;Title&quot;] = &quot;AddKey&quot;;
&nbsp; &nbsp; Layout = &quot;~/Views/Shared/Layout.cshtml&quot;;
}
&nbsp;
<span class="sc2">&lt;<span class="kw2">div</span> <span class="kw3">class</span><span class="sy0">=</span><span class="st0">&quot;box&quot;</span>&gt;</span>
&nbsp; &nbsp; <span class="sc2">&lt;<span class="kw2">h2</span>&gt;</span>AddKey<span class="sc2">&lt;<span class="sy0">/</span><span class="kw2">h2</span>&gt;</span>
&nbsp;
&nbsp; &nbsp; <span class="sc2">&lt;<span class="kw2">form</span> asp-<span class="kw3">action</span><span class="sy0">=</span><span class="st0">&quot;AddKey&quot;</span>&gt;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="sc2">&lt;<span class="kw2">div</span> asp-validation-<span class="kw3">summary</span><span class="sy0">=</span><span class="st0">&quot;ModelOnly&quot;</span> <span class="kw3">class</span><span class="sy0">=</span><span class="st0">&quot;text-danger&quot;</span>&gt;&lt;<span class="sy0">/</span><span class="kw2">div</span>&gt;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="sc2">&lt;<span class="kw2">div</span> <span class="kw3">class</span><span class="sy0">=</span><span class="st0">&quot;form-group&quot;</span>&gt;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="sc2">&lt;<span class="kw2">label</span> asp-<span class="kw3">for</span><span class="sy0">=</span><span class="st0">&quot;Name&quot;</span> <span class="kw3">class</span><span class="sy0">=</span><span class="st0">&quot;control-label&quot;</span>&gt;&lt;<span class="sy0">/</span><span class="kw2">label</span>&gt;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="sc2">&lt;<span class="kw2">input</span> asp-<span class="kw3">for</span><span class="sy0">=</span><span class="st0">&quot;Name&quot;</span> <span class="kw3">class</span><span class="sy0">=</span><span class="st0">&quot;form-control&quot;</span> <span class="sy0">/</span>&gt;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="sc2">&lt;<span class="kw2">span</span> asp-validation-<span class="kw3">for</span><span class="sy0">=</span><span class="st0">&quot;Name&quot;</span> <span class="kw3">class</span><span class="sy0">=</span><span class="st0">&quot;text-danger&quot;</span>&gt;&lt;<span class="sy0">/</span><span class="kw2">span</span>&gt;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="sc2">&lt;<span class="sy0">/</span><span class="kw2">div</span>&gt;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="sc2">&lt;<span class="kw2">div</span> <span class="kw3">class</span><span class="sy0">=</span><span class="st0">&quot;form-group&quot;</span>&gt;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="sc2">&lt;<span class="kw2">input</span> <span class="kw3">type</span><span class="sy0">=</span><span class="st0">&quot;submit&quot;</span> <span class="kw3">value</span><span class="sy0">=</span><span class="st0">&quot;Create API Key&quot;</span> <span class="kw3">class</span><span class="sy0">=</span><span class="st0">&quot;btn btn-default&quot;</span> <span class="sy0">/</span>&gt;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="sc2">&lt;<span class="sy0">/</span><span class="kw2">div</span>&gt;</span>
&nbsp; &nbsp; <span class="sc2">&lt;<span class="sy0">/</span><span class="kw2">form</span>&gt;</span>
&nbsp;
<span class="sc2">&lt;<span class="sy0">/</span><span class="kw2">div</span>&gt;</span>
<span class="sc2">&lt;<span class="kw2">div</span>&gt;</span>
&nbsp; &nbsp; <span class="sc2">&lt;<span class="kw2">a</span> asp-<span class="kw3">action</span><span class="sy0">=</span><span class="st0">&quot;IndexAsync&quot;</span>&gt;</span>Back to List<span class="sc2">&lt;<span class="sy0">/</span><span class="kw2">a</span>&gt;</span>
<span class="sc2">&lt;<span class="sy0">/</span><span class="kw2">div</span>&gt;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">@model SampleCosmosCore2App.Models.User.NewKeyModel
@{
    ViewData["Title"] = "AddKey";
    Layout = "~/Views/Shared/Layout.cshtml";
}

&lt;div class="box"&gt;
    &lt;h2&gt;AddKey&lt;/h2&gt;

    &lt;form asp-action="AddKey"&gt;
        &lt;div asp-validation-summary="ModelOnly" class="text-danger"&gt;&lt;/div&gt;
        &lt;div class="form-group"&gt;
            &lt;label asp-for="Name" class="control-label"&gt;&lt;/label&gt;
            &lt;input asp-for="Name" class="form-control" /&gt;
            &lt;span asp-validation-for="Name" class="text-danger"&gt;&lt;/span&gt;
        &lt;/div&gt;
        &lt;div class="form-group"&gt;
            &lt;input type="submit" value="Create API Key" class="btn btn-default" /&gt;
        &lt;/div&gt;
    &lt;/form&gt;

&lt;/div&gt;
&lt;div&gt;
    &lt;a asp-action="IndexAsync"&gt;Back to List&lt;/a&gt;
&lt;/div&gt;</pre></div></div>

<p>And once it&#8217;s created, we then show it to you with &#8220;ShowKey&#8221;:</p>
<p><a href="https://github.com/tarwn/Sample_ASPNetCore2AndCosmosDB/blob/Post-%234/SampleCosmosCore2App/Views/User/ShowKey.cshtml">SampleCosmosCore2App/Views/User/ShowKey.cshtml</a></p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="html4strict"><thead><tr><td colspan="2"  class="head">HTML</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
</pre></td><td class="de1"><pre class="de1">@model SampleCosmosCore2App.Models.User.UserAuthenticationModel
@{
&nbsp; &nbsp; ViewData[&quot;Title&quot;] = &quot;ShowKey&quot;;
&nbsp; &nbsp; Layout = &quot;~/Views/Shared/Layout.cshtml&quot;;
}
&nbsp;
<span class="sc2">&lt;<span class="kw2">div</span> <span class="kw3">class</span><span class="sy0">=</span><span class="st0">&quot;box&quot;</span>&gt;</span>
&nbsp; &nbsp; <span class="sc2">&lt;<span class="kw2">h2</span>&gt;</span>Your New API Key<span class="sc2">&lt;<span class="sy0">/</span><span class="kw2">h2</span>&gt;</span>
&nbsp; &nbsp; <span class="sc2">&lt;<span class="kw2">p</span>&gt;</span>
&nbsp; &nbsp; &nbsp; &nbsp; You will need the API Key Id and API Key Secret to make an API call. Save your API Key Secret now, we won't show it again!
&nbsp; &nbsp; <span class="sc2">&lt;<span class="sy0">/</span><span class="kw2">p</span>&gt;</span>
&nbsp;
&nbsp; &nbsp; <span class="sc2">&lt;<span class="kw2">div</span>&gt;</span>
&nbsp; &nbsp; &nbsp; &nbsp; Name: @Model.Name<span class="sc2">&lt;<span class="kw2">br</span> <span class="sy0">/</span>&gt;</span>
&nbsp; &nbsp; &nbsp; &nbsp; API Key Id: @Model.Id<span class="sc2">&lt;<span class="kw2">br</span> <span class="sy0">/</span>&gt;</span>
&nbsp; &nbsp; &nbsp; &nbsp; API Key Secret: @Model.Identity<span class="sc2">&lt;<span class="kw2">br</span> <span class="sy0">/</span>&gt;</span>
&nbsp; &nbsp; <span class="sc2">&lt;<span class="sy0">/</span><span class="kw2">div</span>&gt;</span>
<span class="sc2">&lt;<span class="sy0">/</span><span class="kw2">div</span>&gt;</span>
<span class="sc2">&lt;<span class="kw2">div</span>&gt;</span>
&nbsp; &nbsp; <span class="sc2">&lt;<span class="kw2">a</span> asp-<span class="kw3">action</span><span class="sy0">=</span><span class="st0">&quot;IndexAsync&quot;</span>&gt;</span>Back to List<span class="sc2">&lt;<span class="sy0">/</span><span class="kw2">a</span>&gt;</span>
<span class="sc2">&lt;<span class="sy0">/</span><span class="kw2">div</span>&gt;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">@model SampleCosmosCore2App.Models.User.UserAuthenticationModel
@{
    ViewData["Title"] = "ShowKey";
    Layout = "~/Views/Shared/Layout.cshtml";
}

&lt;div class="box"&gt;
    &lt;h2&gt;Your New API Key&lt;/h2&gt;
    &lt;p&gt;
        You will need the API Key Id and API Key Secret to make an API call. Save your API Key Secret now, we won't show it again!
    &lt;/p&gt;

    &lt;div&gt;
        Name: @Model.Name&lt;br /&gt;
        API Key Id: @Model.Id&lt;br /&gt;
        API Key Secret: @Model.Identity&lt;br /&gt;
    &lt;/div&gt;
&lt;/div&gt;
&lt;div&gt;
    &lt;a asp-action="IndexAsync"&gt;Back to List&lt;/a&gt;
&lt;/div&gt;</pre></div></div>

<p>We&#8217;ll be requiring the pair of API Key Id and API Key Secret to authorize API calls later. The Id is the generated Cosmos DB <code>id</code> and the Key is the <code>ICustomMembership</code> generated value.</p>
<p>Displaying the index is a little more complex, as there are potentially several types of <code>LoginUserAuthentications</code> records available, so we include areas for specific keys and ignore the ones we don&#8217;t currently recognize:</p>
<p><a href="https://github.com/tarwn/Sample_ASPNetCore2AndCosmosDB/blob/Post-%234/SampleCosmosCore2App/Views/User/Index.cshtml">SampleCosmosCore2App/Views/User/Index.cshtml</a></p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="html4strict"><thead><tr><td colspan="2"  class="head">HTML</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
</pre></td><td class="de1"><pre class="de1">@model SampleCosmosCore2App.Models.User.UserIndexModel
&nbsp;
@{
&nbsp; &nbsp; ViewData[&quot;Title&quot;] = &quot;Index&quot;;
&nbsp; &nbsp; Layout = &quot;~/Views/Shared/Layout.cshtml&quot;;
}
&nbsp;
<span class="sc2">&lt;<span class="kw2">h2</span>&gt;</span>Your Account<span class="sc2">&lt;<span class="sy0">/</span><span class="kw2">h2</span>&gt;</span>
<span class="sc2">&lt;<span class="kw2">div</span> asp-validation-<span class="kw3">summary</span><span class="sy0">=</span><span class="st0">&quot;ModelOnly&quot;</span> <span class="kw3">class</span><span class="sy0">=</span><span class="st0">&quot;text-danger&quot;</span>&gt;&lt;<span class="sy0">/</span><span class="kw2">div</span>&gt;</span>
&nbsp;
Username: @Model.User.Username<span class="sc2">&lt;<span class="kw2">br</span> <span class="sy0">/</span>&gt;</span>
Registered: @Model.User.CreationTime<span class="sc2">&lt;<span class="kw2">br</span> <span class="sy0">/</span>&gt;</span>
<span class="sc2">&lt;<span class="kw2">br</span> <span class="sy0">/</span>&gt;</span>
&nbsp;
Twitter Status: @if (Model.UserAuthentications.ContainsKey(&quot;Twitter&quot;))
{
&nbsp; &nbsp; var twitter = Model.UserAuthentications[&quot;Twitter&quot;].Single();
&nbsp; &nbsp; <span class="sc2">&lt;<span class="kw2">text</span>&gt;</span>@twitter.Name at @twitter.CreationTime<span class="sc2">&lt;<span class="sy0">/</span><span class="kw2">text</span>&gt;</span>
}
else
{
&nbsp; &nbsp; <span class="sc2">&lt;<span class="kw2">text</span>&gt;</span>Not Linked<span class="sc2">&lt;<span class="sy0">/</span><span class="kw2">text</span>&gt;</span>
}
<span class="sc2">&lt;<span class="kw2">br</span> <span class="sy0">/</span>&gt;</span>
&nbsp;
<span class="sc2">&lt;<span class="kw2">h3</span>&gt;</span>API Keys<span class="sc2">&lt;<span class="sy0">/</span><span class="kw2">h3</span>&gt;</span>
<span class="sc2">&lt;<span class="kw2">table</span>&gt;</span>
&nbsp; &nbsp; <span class="sc2">&lt;<span class="kw2">tr</span>&gt;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="sc2">&lt;<span class="kw2">th</span>&gt;</span>Created<span class="sc2">&lt;<span class="sy0">/</span><span class="kw2">th</span>&gt;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="sc2">&lt;<span class="kw2">th</span>&gt;</span>Name<span class="sc2">&lt;<span class="sy0">/</span><span class="kw2">th</span>&gt;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="sc2">&lt;<span class="kw2">th</span>&gt;</span>API Key Id<span class="sc2">&lt;<span class="sy0">/</span><span class="kw2">th</span>&gt;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="sc2">&lt;<span class="kw2">th</span>&gt;</span>API Key Secret<span class="sc2">&lt;<span class="sy0">/</span><span class="kw2">th</span>&gt;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="sc2">&lt;<span class="kw2">th</span>&gt;&lt;<span class="sy0">/</span><span class="kw2">th</span>&gt;</span>
&nbsp; &nbsp; <span class="sc2">&lt;<span class="sy0">/</span><span class="kw2">tr</span>&gt;</span>
&nbsp; &nbsp; @if (Model.UserAuthentications.ContainsKey(&quot;APIKey&quot;))
&nbsp; &nbsp; {
&nbsp; &nbsp; &nbsp; &nbsp; var keys = Model.UserAuthentications[&quot;APIKey&quot;];
&nbsp; &nbsp; &nbsp; &nbsp; foreach (var key in keys)
&nbsp; &nbsp; &nbsp; &nbsp; {
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="sc2">&lt;<span class="kw2">tr</span>&gt;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="sc2">&lt;<span class="kw2">td</span>&gt;</span>@key.CreationTime<span class="sc2">&lt;<span class="sy0">/</span><span class="kw2">td</span>&gt;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="sc2">&lt;<span class="kw2">td</span>&gt;</span>@key.Name<span class="sc2">&lt;<span class="sy0">/</span><span class="kw2">td</span>&gt;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="sc2">&lt;<span class="kw2">td</span>&gt;</span>@key.Id<span class="sc2">&lt;<span class="sy0">/</span><span class="kw2">td</span>&gt;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="sc2">&lt;<span class="kw2">td</span>&gt;</span>@key.GetMaskedIdentity()<span class="sc2">&lt;<span class="sy0">/</span><span class="kw2">td</span>&gt;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="sc2">&lt;<span class="kw2">td</span>&gt;&lt;<span class="kw2">a</span> asp-<span class="kw3">action</span><span class="sy0">=</span><span class="st0">&quot;Revoke&quot;</span> asp-route-<span class="kw3">id</span><span class="sy0">=</span><span class="st0">&quot;@key.Id&quot;</span>&gt;</span>Revoke<span class="sc2">&lt;<span class="sy0">/</span><span class="kw2">a</span>&gt;&lt;<span class="sy0">/</span><span class="kw2">td</span>&gt;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="sc2">&lt;<span class="sy0">/</span><span class="kw2">tr</span>&gt;</span>
&nbsp; &nbsp; &nbsp; &nbsp; }
&nbsp; &nbsp; }
&nbsp; &nbsp; <span class="sc2">&lt;<span class="kw2">tr</span>&gt;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="sc2">&lt;<span class="kw2">td</span> <span class="kw3">colspan</span><span class="sy0">=</span><span class="st0">&quot;5&quot;</span>&gt;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="sc2">&lt;<span class="kw2">a</span> asp-<span class="kw3">action</span><span class="sy0">=</span><span class="st0">&quot;AddKey&quot;</span>&gt;</span>Add a key<span class="sc2">&lt;<span class="sy0">/</span><span class="kw2">a</span>&gt;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="sc2">&lt;<span class="sy0">/</span><span class="kw2">td</span>&gt;</span>
&nbsp; &nbsp; <span class="sc2">&lt;<span class="sy0">/</span><span class="kw2">tr</span>&gt;</span>
<span class="sc2">&lt;<span class="sy0">/</span><span class="kw2">table</span>&gt;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">@model SampleCosmosCore2App.Models.User.UserIndexModel

@{
    ViewData["Title"] = "Index";
    Layout = "~/Views/Shared/Layout.cshtml";
}

&lt;h2&gt;Your Account&lt;/h2&gt;
&lt;div asp-validation-summary="ModelOnly" class="text-danger"&gt;&lt;/div&gt;

Username: @Model.User.Username&lt;br /&gt;
Registered: @Model.User.CreationTime&lt;br /&gt;
&lt;br /&gt;

Twitter Status: @if (Model.UserAuthentications.ContainsKey("Twitter"))
{
    var twitter = Model.UserAuthentications["Twitter"].Single();
    &lt;text&gt;@twitter.Name at @twitter.CreationTime&lt;/text&gt;
}
else
{
    &lt;text&gt;Not Linked&lt;/text&gt;
}
&lt;br /&gt;

&lt;h3&gt;API Keys&lt;/h3&gt;
&lt;table&gt;
    &lt;tr&gt;
        &lt;th&gt;Created&lt;/th&gt;
        &lt;th&gt;Name&lt;/th&gt;
        &lt;th&gt;API Key Id&lt;/th&gt;
        &lt;th&gt;API Key Secret&lt;/th&gt;
        &lt;th&gt;&lt;/th&gt;
    &lt;/tr&gt;
    @if (Model.UserAuthentications.ContainsKey("APIKey"))
    {
        var keys = Model.UserAuthentications["APIKey"];
        foreach (var key in keys)
        {
            &lt;tr&gt;
                &lt;td&gt;@key.CreationTime&lt;/td&gt;
                &lt;td&gt;@key.Name&lt;/td&gt;
                &lt;td&gt;@key.Id&lt;/td&gt;
                &lt;td&gt;@key.GetMaskedIdentity()&lt;/td&gt;
                &lt;td&gt;&lt;a asp-action="Revoke" asp-route-id="@key.Id"&gt;Revoke&lt;/a&gt;&lt;/td&gt;
            &lt;/tr&gt;
        }
    }
    &lt;tr&gt;
        &lt;td colspan="5"&gt;
            &lt;a asp-action="AddKey"&gt;Add a key&lt;/a&gt;
        &lt;/td&gt;
    &lt;/tr&gt;
&lt;/table&gt;</pre></div></div>

<p>Again, this HTML won&#8217;t win any awards, it&#8217;s here to let us functionally build out what we need. Later in a real application we would replace this with a better form or front-end templates and JSON.</p>
<h3>Membership + Persistence</h3>
<p>The screens above need some new capabilities in the membership logic (<code>CosmosDBMembership</code>) and queries to Cosmos DB (<code>UserPersistence</code>), so before we test we need to add those in.</p>
<p>The new methods are:</p>
<ul>
<li>CosmosDBMembership.GenerateAPIKey</li>
<li>CosmosDBMembership.AddAuthenticationAsync</li>
<li>CosmosDBMembership.RevokeAuthenticationAsync</li>
<li>UserPersistence.GetUserAuthenticationAsync</li>
<li>UserPersistence.UpdateUserAuthenticationAsync</li>
</ul>
<div class="note-area">
If you look at the <a href="https://github.com/tarwn/Sample_ASPNetCore2AndCosmosDB/commit/1404bde5677301f385fe9189eb89ce710745685e" title="commit diff on github">commit details</a>, you&#8217;ll also see an un-committed fix to UserPersistence.GetUserBySessionIdAsync from the prior post (oops).
</div>
<p><a href="https://github.com/tarwn/Sample_ASPNetCore2AndCosmosDB/blob/Post-%234/SampleCosmosCore2App/Membership/CosmosDBMembership.cs">SampleCosmosCore2App/Membership/CosmosDBMembership.cs</a></p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="csharp"><thead><tr><td colspan="2"  class="head">C#</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
</pre></td><td class="de1"><pre class="de1"><span class="kw1">public</span> <span class="kw4">string</span> GenerateAPIKey<span class="br0">&#40;</span><span class="kw4">string</span> userId<span class="br0">&#41;</span>
<span class="br0">&#123;</span>
&nbsp; &nbsp; <span class="kw1">var</span> key <span class="sy0">=</span> <span class="kw3">new</span> <span class="kw4">byte</span><span class="br0">&#91;</span><span class="nu0">32</span><span class="br0">&#93;</span><span class="sy0">;</span>
&nbsp; &nbsp; <span class="kw1">using</span> <span class="br0">&#40;</span><span class="kw1">var</span> generator <span class="sy0">=</span> RandomNumberGenerator<span class="sy0">.</span><span class="me1">Create</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#41;</span>
&nbsp; &nbsp; <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; generator<span class="sy0">.</span><span class="me1">GetBytes</span><span class="br0">&#40;</span>key<span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp; &nbsp; <span class="kw1">return</span> Convert<span class="sy0">.</span><span class="me1">ToBase64String</span><span class="br0">&#40;</span>key<span class="br0">&#41;</span><span class="sy0">;</span>
<span class="br0">&#125;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">public string GenerateAPIKey(string userId)
{
    var key = new byte[32];
    using (var generator = RandomNumberGenerator.Create())
    {
        generator.GetBytes(key);
    }
    return Convert.ToBase64String(key);
}</pre></div></div>

<p><code>GenerateAPIKey</code> is starting with a simple random generator scheme to generate new keys.</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="csharp"><thead><tr><td colspan="2"  class="head">C#</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
</pre></td><td class="de1"><pre class="de1"><span class="kw1">public</span> async Task<span class="sy0">&lt;</span>AuthenticationDetails<span class="sy0">&gt;</span> AddAuthenticationAsync<span class="br0">&#40;</span><span class="kw4">string</span> userId, <span class="kw4">string</span> scheme, <span class="kw4">string</span> identity, <span class="kw4">string</span> identityName<span class="br0">&#41;</span>
<span class="br0">&#123;</span>
&nbsp; &nbsp; <span class="kw1">var</span> userAuth <span class="sy0">=</span> <span class="kw3">new</span> LoginUserAuthentication<span class="br0">&#40;</span><span class="br0">&#41;</span>
&nbsp; &nbsp; <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="co1">// ... warning below ...</span>
&nbsp; &nbsp; <span class="br0">&#125;</span><span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; userAuth <span class="sy0">=</span> await _persistence<span class="sy0">.</span><span class="me1">Users</span><span class="sy0">.</span><span class="me1">CreateUserAuthenticationAsync</span><span class="br0">&#40;</span>userAuth<span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; <span class="kw1">return</span> <span class="kw3">new</span> AuthenticationDetails<span class="br0">&#40;</span><span class="br0">&#41;</span>
&nbsp; &nbsp; <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="co1">// ... warning below ...</span>
&nbsp; &nbsp; <span class="br0">&#125;</span><span class="sy0">;</span>
<span class="br0">&#125;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">public async Task&lt;AuthenticationDetails&gt; AddAuthenticationAsync(string userId, string scheme, string identity, string identityName)
{
    var userAuth = new LoginUserAuthentication()
    {
        // ... warning below ...
    };

    userAuth = await _persistence.Users.CreateUserAuthenticationAsync(userAuth);

    return new AuthenticationDetails()
    {
        // ... warning below ...
    };
}</pre></div></div>

<p><code>AddAuthenticationAsync</code> is just a CRUD method to write the new data and return the results.</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="csharp"><thead><tr><td colspan="2"  class="head">C#</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
</pre></td><td class="de1"><pre class="de1"><span class="kw1">public</span> async Task<span class="sy0">&lt;</span>RevocationDetails<span class="sy0">&gt;</span> RevokeAuthenticationAsync<span class="br0">&#40;</span><span class="kw4">string</span> userId, <span class="kw4">string</span> identity<span class="br0">&#41;</span>
<span class="br0">&#123;</span>
&nbsp; &nbsp; <span class="kw1">var</span> userAuth <span class="sy0">=</span> await _persistence<span class="sy0">.</span><span class="me1">Users</span><span class="sy0">.</span><span class="me1">GetUserAuthenticationAsync</span><span class="br0">&#40;</span>identity<span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; <span class="kw1">if</span> <span class="br0">&#40;</span><span class="sy0">!</span>userAuth<span class="sy0">.</span><span class="me1">UserId</span><span class="sy0">.</span><span class="me1">Equals</span><span class="br0">&#40;</span>userId<span class="br0">&#41;</span><span class="br0">&#41;</span>
&nbsp; &nbsp; <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">return</span> RevocationDetails<span class="sy0">.</span><span class="me1">GetFailed</span><span class="br0">&#40;</span><span class="st0">&quot;Could not find specified API Key for your account&quot;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp;
&nbsp; &nbsp; <span class="kw1">if</span> <span class="br0">&#40;</span>userAuth<span class="sy0">.</span><span class="me1">Scheme</span> <span class="sy0">==</span> Core<span class="sy0">.</span><span class="me1">Users</span><span class="sy0">.</span><span class="me1">AuthenticationScheme</span><span class="sy0">.</span><span class="me1">RevokedAPIKey</span><span class="br0">&#41;</span>
&nbsp; &nbsp; <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">return</span> RevocationDetails<span class="sy0">.</span><span class="me1">GetFailed</span><span class="br0">&#40;</span><span class="st0">&quot;APIKey has already been revoked&quot;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp;
&nbsp; &nbsp; <span class="kw1">if</span> <span class="br0">&#40;</span>userAuth<span class="sy0">.</span><span class="me1">Scheme</span> <span class="sy0">!=</span> Core<span class="sy0">.</span><span class="me1">Users</span><span class="sy0">.</span><span class="me1">AuthenticationScheme</span><span class="sy0">.</span><span class="me1">APIKey</span><span class="br0">&#41;</span>
&nbsp; &nbsp; <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">return</span> RevocationDetails<span class="sy0">.</span><span class="me1">GetFailed</span><span class="br0">&#40;</span><span class="st0">&quot;Could not find specified API Key for your account&quot;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp;
&nbsp; &nbsp; userAuth<span class="sy0">.</span><span class="me1">Scheme</span> <span class="sy0">=</span> Core<span class="sy0">.</span><span class="me1">Users</span><span class="sy0">.</span><span class="me1">AuthenticationScheme</span><span class="sy0">.</span><span class="me1">RevokedAPIKey</span><span class="sy0">;</span>
&nbsp; &nbsp; await _persistence<span class="sy0">.</span><span class="me1">Users</span><span class="sy0">.</span><span class="me1">UpdateUserAuthenticationAsync</span><span class="br0">&#40;</span>userAuth<span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; <span class="kw1">return</span> RevocationDetails<span class="sy0">.</span><span class="me1">GetSuccess</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
<span class="br0">&#125;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">public async Task&lt;RevocationDetails&gt; RevokeAuthenticationAsync(string userId, string identity)
{
    var userAuth = await _persistence.Users.GetUserAuthenticationAsync(identity);
    if (!userAuth.UserId.Equals(userId))
    {
        return RevocationDetails.GetFailed("Could not find specified API Key for your account");
    }

    if (userAuth.Scheme == Core.Users.AuthenticationScheme.RevokedAPIKey)
    {
        return RevocationDetails.GetFailed("APIKey has already been revoked");
    }

    if (userAuth.Scheme != Core.Users.AuthenticationScheme.APIKey)
    {
        return RevocationDetails.GetFailed("Could not find specified API Key for your account");
    }

    userAuth.Scheme = Core.Users.AuthenticationScheme.RevokedAPIKey;
    await _persistence.Users.UpdateUserAuthenticationAsync(userAuth);

    return RevocationDetails.GetSuccess();
}</pre></div></div>

<p><code>RevokeAuthenticationAsync</code> is a little more involved due to validation that the key you&#8217;re trying to revoke exists, is yours, isn&#8217;t already revoked, and so on, but then it updates the key type from <code>APIKey</code> to <code>RevokedAPIKey</code> and updates it in Cosmos DB.</p>
<div class="warning-area">
<p>So, ask me about class initializers&#8230;</p>
<p>There are times that using class initializers is an <b>anti-pattern</b>, like the case above. If the properties are required for the object to be valid, put it in the constructor and don&#8217;t use class initializers for it. Everything else is fair game.</p>
<p>I recognize that people really like them, but it misleads the next developer and makes it easy to introduce bugs when you&#8217;re adding or changing &#8220;required&#8221; fields.</p>
</div>
<p>Now that we have the new <code>ICustomMembership</code> behavior, we can add the <code>UserPersistence</code> requirements.</p>
<p><a href=""></a></p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="csharp"><thead><tr><td colspan="2"  class="head">C#</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
</pre></td><td class="de1"><pre class="de1"><span class="kw1">public</span> <span class="kw4">enum</span> AuthenticationScheme
<span class="br0">&#123;</span>
&nbsp; &nbsp; Twitter <span class="sy0">=</span> <span class="nu0">1</span>,
&nbsp; &nbsp; APIKey <span class="sy0">=</span> <span class="nu0">2</span>,
&nbsp; &nbsp; RevokedAPIKey <span class="sy0">=</span> <span class="nu0">3</span>
<span class="br0">&#125;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">public enum AuthenticationScheme
{
    Twitter = 1,
    APIKey = 2,
    RevokedAPIKey = 3
}</pre></div></div>

<p>First we add the two new Authentication types to the enum.</p>
<div class="note-area">
I really shouldn&#8217;t have named this enum &#8220;AuthenticationScheme&#8221;, since that has a specific meaning for ASP.Net Core 2 already, sorry about that. Future refactor opportunity.
</div>
<p><a href=""></a></p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="csharp"><thead><tr><td colspan="2"  class="head">C#</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
</pre></td><td class="de1"><pre class="de1"><span class="co1">// ...</span>
&nbsp;
<span class="kw1">public</span> async Task<span class="sy0">&lt;</span>LoginUserAuthentication<span class="sy0">&gt;</span> GetUserAuthenticationAsync<span class="br0">&#40;</span><span class="kw4">string</span> id<span class="br0">&#41;</span>
<span class="br0">&#123;</span>
&nbsp; &nbsp; <span class="kw1">var</span> query <span class="sy0">=</span> _client<span class="sy0">.</span><span class="me1">CreateDocumentQuery</span><span class="sy0">&lt;</span>LoginUserAuthentication<span class="sy0">&gt;</span><span class="br0">&#40;</span>GetAuthenticationsCollectionUri<span class="br0">&#40;</span><span class="br0">&#41;</span>, <span class="kw3">new</span> SqlQuerySpec<span class="br0">&#40;</span><span class="br0">&#41;</span>
&nbsp; &nbsp; <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; QueryText <span class="sy0">=</span> <span class="st0">&quot;SELECT * FROM UserAuthentications UA WHERE UA.id = @id&quot;</span>,
&nbsp; &nbsp; &nbsp; &nbsp; Parameters <span class="sy0">=</span> <span class="kw3">new</span> SqlParameterCollection<span class="br0">&#40;</span><span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw3">new</span> SqlParameter<span class="br0">&#40;</span><span class="st0">&quot;@id&quot;</span>, id<span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp; &nbsp; <span class="br0">&#125;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; <span class="kw1">var</span> result <span class="sy0">=</span> await query<span class="sy0">.</span><span class="me1">AsDocumentQuery</span><span class="br0">&#40;</span><span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="sy0">.</span><span class="me1">ExecuteNextAsync</span><span class="sy0">&lt;</span>LoginUserAuthentication<span class="sy0">&gt;</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; <span class="kw1">return</span> result<span class="sy0">.</span><span class="me1">SingleOrDefault</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
<span class="br0">&#125;</span>
&nbsp;
<span class="co1">// ...</span>
&nbsp;
<span class="kw1">public</span> async Task UpdateUserAuthenticationAsync<span class="br0">&#40;</span>LoginUserAuthentication userAuth<span class="br0">&#41;</span>
<span class="br0">&#123;</span>
&nbsp; &nbsp; await _client<span class="sy0">.</span><span class="me1">ReplaceDocumentAsync</span><span class="br0">&#40;</span>UriFactory<span class="sy0">.</span><span class="me1">CreateDocumentUri</span><span class="br0">&#40;</span>_databaseId, AUTHS_DOCUMENT_COLLECTION_ID, userAuth<span class="sy0">.</span><span class="me1">Id</span><span class="br0">&#41;</span>, userAuth, <span class="kw3">new</span> RequestOptions<span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span> <span class="br0">&#125;</span><span class="br0">&#41;</span><span class="sy0">;</span>
<span class="br0">&#125;</span>
&nbsp;
<span class="co1">// ...</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">// ...

public async Task&lt;LoginUserAuthentication&gt; GetUserAuthenticationAsync(string id)
{
    var query = _client.CreateDocumentQuery&lt;LoginUserAuthentication&gt;(GetAuthenticationsCollectionUri(), new SqlQuerySpec()
    {
        QueryText = "SELECT * FROM UserAuthentications UA WHERE UA.id = @id",
        Parameters = new SqlParameterCollection()
        {
            new SqlParameter("@id", id)
        }
    });

    var result = await query.AsDocumentQuery()
                            .ExecuteNextAsync&lt;LoginUserAuthentication&gt;();
    return result.SingleOrDefault();
}

// ...

public async Task UpdateUserAuthenticationAsync(LoginUserAuthentication userAuth)
{
    await _client.ReplaceDocumentAsync(UriFactory.CreateDocumentUri(_databaseId, AUTHS_DOCUMENT_COLLECTION_ID, userAuth.Id), userAuth, new RequestOptions() { });
}

// ...</pre></div></div>

<p>Once again, the Cosmos DB logic is pretty straightforward. I&#8217;m still getting used to the Query result handling, which feels a little convoluted, but everything else has been absurdly smooth because we&#8217;re just doing usual Document store logic (please take this JSON serialized object and give it back later) instead of having to map relational concepts to objects.</p>
<p>Now we can test out this process.</p>
<p>First we&#8217;ll add a new Key:</p>
<div id="attachment_9203" style="width: 368px" class="wp-caption aligncenter"><img src="/wp-content/uploads/2018/04/aspnetcore2cosmos_302.png" alt="Adding an API Key" width="358" height="254" class="size-full wp-image-9203" srcset="/wp-content/uploads/2018/04/aspnetcore2cosmos_302.png 358w, /wp-content/uploads/2018/04/aspnetcore2cosmos_302-300x213.png 300w" sizes="(max-width: 358px) 100vw, 358px" /><p class="wp-caption-text">Adding an API Key</p></div>
<p>And here it is:</p>
<div id="attachment_9204" style="width: 435px" class="wp-caption aligncenter"><img src="/wp-content/uploads/2018/04/aspnetcore2cosmos_303.png" alt="New API Key, Fancy UI :)" width="425" height="337" class="size-full wp-image-9204" srcset="/wp-content/uploads/2018/04/aspnetcore2cosmos_303.png 425w, /wp-content/uploads/2018/04/aspnetcore2cosmos_303-300x238.png 300w, /wp-content/uploads/2018/04/aspnetcore2cosmos_303-378x300.png 378w" sizes="(max-width: 425px) 100vw, 425px" /><p class="wp-caption-text">New API Key, Fancy UI <img src="https://s.w.org/images/core/emoji/2/72x72/1f642.png" alt="🙂" class="wp-smiley" style="height: 1em; max-height: 1em;" /></p></div>
<p>And it shows up in our fancy API Key list like so:</p>
<div id="attachment_9205" style="width: 610px" class="wp-caption aligncenter"><img src="/wp-content/uploads/2018/04/aspnetcore2cosmos_304-600x92.png" alt="Viewing created API Keys" width="600" height="92" class="size-medium-width wp-image-9205" srcset="/wp-content/uploads/2018/04/aspnetcore2cosmos_304-600x92.png 600w, /wp-content/uploads/2018/04/aspnetcore2cosmos_304-300x46.png 300w, /wp-content/uploads/2018/04/aspnetcore2cosmos_304-768x118.png 768w, /wp-content/uploads/2018/04/aspnetcore2cosmos_304-1024x157.png 1024w, /wp-content/uploads/2018/04/aspnetcore2cosmos_304.png 1141w" sizes="(max-width: 600px) 100vw, 600px" /><p class="wp-caption-text">Viewing created API Keys</p></div>
<p>And we can revoke one of the keys easily:</p>
<div id="attachment_9206" style="width: 610px" class="wp-caption aligncenter"><img src="/wp-content/uploads/2018/04/aspnetcore2cosmos_305-600x77.png" alt="Revoked API Key disappears, success!" width="600" height="77" class="size-medium-width wp-image-9206" srcset="/wp-content/uploads/2018/04/aspnetcore2cosmos_305-600x77.png 600w, /wp-content/uploads/2018/04/aspnetcore2cosmos_305-300x38.png 300w, /wp-content/uploads/2018/04/aspnetcore2cosmos_305-768x98.png 768w, /wp-content/uploads/2018/04/aspnetcore2cosmos_305-1024x131.png 1024w, /wp-content/uploads/2018/04/aspnetcore2cosmos_305.png 1129w" sizes="(max-width: 600px) 100vw, 600px" /><p class="wp-caption-text">Revoked API Key disappears, success!</p></div>
<p>And here it is in Cosmos DB Data Explorer, with the poorly named &#8220;Scheme&#8221; property indicating &#8220;3&#8221;, which is &#8220;RevokedAPIKey&#8221;:</p>
<div id="attachment_9207" style="width: 610px" class="wp-caption aligncenter"><img src="/wp-content/uploads/2018/04/aspnetcore2cosmos_306-600x236.png" alt="Viewing Revoked API Key in Cosmos DB Data Explorer" width="600" height="236" class="size-medium-width wp-image-9207" srcset="/wp-content/uploads/2018/04/aspnetcore2cosmos_306-600x236.png 600w, /wp-content/uploads/2018/04/aspnetcore2cosmos_306-300x118.png 300w, /wp-content/uploads/2018/04/aspnetcore2cosmos_306-768x302.png 768w, /wp-content/uploads/2018/04/aspnetcore2cosmos_306-763x300.png 763w, /wp-content/uploads/2018/04/aspnetcore2cosmos_306.png 885w" sizes="(max-width: 600px) 100vw, 600px" /><p class="wp-caption-text">Viewing Revoked API Key in Cosmos DB Data Explorer</p></div>
<p>Now that our fictitious users can generate and revoke API keys and we&#8217;ve locked in those changes, it&#8217;s time to protect some API endpoints.</p>
<h2>Task 2: Protected API Endpoints</h2>
<p>What we&#8217;re going to be doing for this case is adding in a new AuthenticationHandler middleware. </p>
<p><b>Other resources</b></p>
<ul>
<li>Adding a custom AuthenticationHandler: <a href="https://ignas.me/tech/custom-authentication-asp-net-core-20/">Custom Authentication in ASP.NET Core 2.0</a></li>
<li>More detailed: <a href="https://joonasw.net/view/creating-auth-scheme-in-aspnet-core-2">Creating an authentication scheme in ASP.NET Core 2.0</a></li>
</ul>
<p>We&#8217;ll be adding a <code>CustomMembershipAPIAuthHandler</code> and an options object to hold the name of the <code>AuthenticationScheme</code> and <code>Realm</code> configured from startup.</p>
<p>The very short version of AuthenticationHandlers is that when the server receives a request, it will go through the whole list of available AuthenticationHandlers and ask each one if the request is: Pass, Fail, or NoResult:</p>
<ul>
<li>NoResult: This request doesn&#8217;t have anything relevant to me, thank you drive through!</li>
<li>Fail: This request has relevant info for me and it&#8217;s wrong!</li>
<li>Success: This request has relevant info for me and it&#8217;s right, here&#8217;s a ClaimsPrincipal!</li>
</ul>
<h3>Add the AuthenticationHandler</h3>
<p>For this case, we&#8217;re going to expect an <code>Authorization</code> header on requests formatted as: <code>Scheme Id:Secret</code>, similar to Basic and Bearer authentication methods. The <code>Scheme</code> comes from the Options that will be set in Startup, the Id and Secret are the API Token values we created above.</p>
<p><a href="https://github.com/tarwn/Sample_ASPNetCore2AndCosmosDB/blob/Post-%234/SampleCosmosCore2App/Membership/CustomMembershipAPIAuthHandler.cs">SampleCosmosCore2App/Membership/CustomMembershipAPIAuthHandler.cs</a> (HandleAuthenticateAsync)</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="csharp"><thead><tr><td colspan="2"  class="head">C#</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
</pre></td><td class="de1"><pre class="de1"><span class="kw1">public</span> <span class="kw4">class</span> CustomMembershipAPIAuthHandler <span class="sy0">:</span> AuthenticationHandler<span class="sy0">&lt;</span>CustomMembershipAPIOptions<span class="sy0">&gt;</span>
<span class="br0">&#123;</span>
&nbsp; &nbsp; <span class="co1">// ...</span>
&nbsp;
&nbsp; &nbsp; <span class="kw1">protected</span> <span class="kw1">override</span> async Task<span class="sy0">&lt;</span>AuthenticateResult<span class="sy0">&gt;</span> HandleAuthenticateAsync<span class="br0">&#40;</span><span class="br0">&#41;</span>
&nbsp; &nbsp; <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="co1">// Is this relevant to us?</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">if</span> <span class="br0">&#40;</span><span class="sy0">!</span>Request<span class="sy0">.</span><span class="me1">Headers</span><span class="sy0">.</span><span class="me1">TryGetValue</span><span class="br0">&#40;</span>HeaderNames<span class="sy0">.</span><span class="me1">Authorization</span>, <span class="kw1">out</span> <span class="kw1">var</span> authorization<span class="br0">&#41;</span><span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">return</span> AuthenticateResult<span class="sy0">.</span><span class="me1">NoResult</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">var</span> actualAuthValue <span class="sy0">=</span> authorization<span class="sy0">.</span><span class="me1">FirstOrDefault</span><span class="br0">&#40;</span>s <span class="sy0">=&gt;</span> s<span class="sy0">.</span><span class="me1">StartsWith</span><span class="br0">&#40;</span>Options<span class="sy0">.</span><span class="me1">Scheme</span>, StringComparison<span class="sy0">.</span><span class="me1">CurrentCultureIgnoreCase</span><span class="br0">&#41;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">if</span> <span class="br0">&#40;</span>actualAuthValue <span class="sy0">==</span> <span class="kw1">null</span><span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">return</span> AuthenticateResult<span class="sy0">.</span><span class="me1">NoResult</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; <span class="co1">// Is it a good pair?</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">var</span> apiPair <span class="sy0">=</span> actualAuthValue<span class="sy0">.</span><span class="me1">Substring</span><span class="br0">&#40;</span>Options<span class="sy0">.</span><span class="me1">Scheme</span><span class="sy0">.</span><span class="me1">Length</span> <span class="sy0">+</span> <span class="nu0">1</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">var</span> apiValues <span class="sy0">=</span> apiPair<span class="sy0">.</span><span class="me1">Split</span><span class="br0">&#40;</span><span class="st0">':'</span>, <span class="nu0">2</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">if</span> <span class="br0">&#40;</span>apiValues<span class="sy0">.</span><span class="me1">Length</span> <span class="sy0">!=</span> <span class="nu0">2</span> <span class="sy0">||</span> <span class="kw4">String</span><span class="sy0">.</span><span class="me1">IsNullOrEmpty</span><span class="br0">&#40;</span>apiValues<span class="br0">&#91;</span><span class="nu0">0</span><span class="br0">&#93;</span><span class="br0">&#41;</span> <span class="sy0">||</span> <span class="kw4">String</span><span class="sy0">.</span><span class="me1">IsNullOrEmpty</span><span class="br0">&#40;</span>apiValues<span class="br0">&#91;</span><span class="nu0">1</span><span class="br0">&#93;</span><span class="br0">&#41;</span><span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">return</span> AuthenticateResult<span class="sy0">.</span><span class="me1">Fail</span><span class="br0">&#40;</span>$<span class="st0">&quot;Invalid authentication format, expected '{Options.Scheme} id:secret'&quot;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">var</span> principal <span class="sy0">=</span> await _membership<span class="sy0">.</span><span class="me1">GetOneTimeLoginAsync</span><span class="br0">&#40;</span><span class="st0">&quot;APIKey&quot;</span>, apiValues<span class="br0">&#91;</span><span class="nu0">0</span><span class="br0">&#93;</span>, apiValues<span class="br0">&#91;</span><span class="nu0">1</span><span class="br0">&#93;</span>, Options<span class="sy0">.</span><span class="me1">Scheme</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">if</span> <span class="br0">&#40;</span>principal <span class="sy0">==</span> <span class="kw1">null</span><span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">return</span> AuthenticateResult<span class="sy0">.</span><span class="me1">Fail</span><span class="br0">&#40;</span><span class="st0">&quot;Invalid authentication provided, access denied.&quot;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">var</span> ticket <span class="sy0">=</span> <span class="kw3">new</span> AuthenticationTicket<span class="br0">&#40;</span>principal, Options<span class="sy0">.</span><span class="me1">Scheme</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">return</span> AuthenticateResult<span class="sy0">.</span><span class="me1">Success</span><span class="br0">&#40;</span>ticket<span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp;
&nbsp; &nbsp; <span class="co1">// ...</span>
<span class="br0">&#125;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">public class CustomMembershipAPIAuthHandler : AuthenticationHandler&lt;CustomMembershipAPIOptions&gt;
{
    // ...

    protected override async Task&lt;AuthenticateResult&gt; HandleAuthenticateAsync()
    {
        // Is this relevant to us?
        if (!Request.Headers.TryGetValue(HeaderNames.Authorization, out var authorization))
        {
            return AuthenticateResult.NoResult();
        }

        var actualAuthValue = authorization.FirstOrDefault(s =&gt; s.StartsWith(Options.Scheme, StringComparison.CurrentCultureIgnoreCase));
        if (actualAuthValue == null)
        {
            return AuthenticateResult.NoResult();
        }

        // Is it a good pair?
        var apiPair = actualAuthValue.Substring(Options.Scheme.Length + 1);
        var apiValues = apiPair.Split(':', 2);
        if (apiValues.Length != 2 || String.IsNullOrEmpty(apiValues[0]) || String.IsNullOrEmpty(apiValues[1]))
        {
            return AuthenticateResult.Fail($"Invalid authentication format, expected '{Options.Scheme} id:secret'");
        }

        var principal = await _membership.GetOneTimeLoginAsync("APIKey", apiValues[0], apiValues[1], Options.Scheme);
        if (principal == null)
        {
            return AuthenticateResult.Fail("Invalid authentication provided, access denied.");
        }

        var ticket = new AuthenticationTicket(principal, Options.Scheme);
        return AuthenticateResult.Success(ticket);
    }

    // ...
}</pre></div></div>

<p>Notice we&#8217;ve added the concept of a &#8220;OneTimeLogin&#8221; to <code>ICustomMembership</code>. This will lead to a membership refactor to make it clearer which methods are relevant to &#8220;Interactive&#8221; logins and which are relevant to &#8220;OneTimeLogin&#8221; types like API request authentication.</p>
<p>On top of having logic to look at handle Authenticate requests, we also want to add logic to handle Challenge and Forbidden requests. In this case, we are going to add a nice <code>WWW-Authenticate</code> header before letting the base class send it back as a 401, which is consistent with how most APIs handle challenges. We&#8217;re also going to just let the base class handle the Forbidden cases as designed.</p>
<p><a href="https://github.com/tarwn/Sample_ASPNetCore2AndCosmosDB/blob/Post-%234/SampleCosmosCore2App/Membership/CustomMembershipAPIAuthHandler.cs">SampleCosmosCore2App/Membership/CustomMembershipAPIAuthHandler.cs</a> (HandleAuthenticateAsync)</p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="csharp"><thead><tr><td colspan="2"  class="head">C#</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
</pre></td><td class="de1"><pre class="de1"><span class="kw1">public</span> <span class="kw4">class</span> CustomMembershipAPIAuthHandler <span class="sy0">:</span> AuthenticationHandler<span class="sy0">&lt;</span>CustomMembershipAPIOptions<span class="sy0">&gt;</span>
<span class="br0">&#123;</span>
&nbsp; &nbsp; <span class="co1">// ...</span>
&nbsp;
&nbsp; &nbsp;<span class="kw1">protected</span> <span class="kw1">override</span> async Task HandleChallengeAsync<span class="br0">&#40;</span>AuthenticationProperties properties<span class="br0">&#41;</span>
&nbsp; &nbsp; <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; Response<span class="sy0">.</span><span class="me1">Headers</span><span class="br0">&#91;</span><span class="st0">&quot;WWW-Authenticate&quot;</span><span class="br0">&#93;</span> <span class="sy0">=</span> $<span class="st0">&quot;Basic realm=<span class="es0">\&quot;</span>{Options.Realm}<span class="es0">\&quot;</span>, charset=<span class="es0">\&quot;</span>UTF-8<span class="es0">\&quot;</span>&quot;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; await <span class="kw1">base</span><span class="sy0">.</span><span class="me1">HandleChallengeAsync</span><span class="br0">&#40;</span>properties<span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp;
&nbsp; &nbsp; <span class="kw1">protected</span> <span class="kw1">override</span> Task HandleForbiddenAsync<span class="br0">&#40;</span>AuthenticationProperties properties<span class="br0">&#41;</span>
&nbsp; &nbsp; <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">return</span> <span class="kw1">base</span><span class="sy0">.</span><span class="me1">HandleForbiddenAsync</span><span class="br0">&#40;</span>properties<span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp;
&nbsp; &nbsp; <span class="co1">// ...</span>
<span class="br0">&#125;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">public class CustomMembershipAPIAuthHandler : AuthenticationHandler&lt;CustomMembershipAPIOptions&gt;
{
    // ...

   protected override async Task HandleChallengeAsync(AuthenticationProperties properties)
    {
        Response.Headers["WWW-Authenticate"] = $"Basic realm=\"{Options.Realm}\", charset=\"UTF-8\"";
        await base.HandleChallengeAsync(properties);
    }

    protected override Task HandleForbiddenAsync(AuthenticationProperties properties)
    {
        return base.HandleForbiddenAsync(properties);
    }

    // ...
}</pre></div></div>

<p>After an <a href="https://github.com/tarwn/Sample_ASPNetCore2AndCosmosDB/commit/60a3a47a03cec8eda5a99cd82ec87b6601e2507c#diff-3e209446f0e03a762826159f3c03decf" title="CustomMembershipExtensions.cs diff at github">addition of an extension method</a>, we can register this in <code>Startup</code>.</p>
<p><a href="https://github.com/tarwn/Sample_ASPNetCore2AndCosmosDB/blob/Post-%234/SampleCosmosCore2App/Startup.cs">SampleCosmosCore2App/Startup.cs</a></p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="csharp"><thead><tr><td colspan="2"  class="head">C#</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
</pre></td><td class="de1"><pre class="de1"><span class="kw1">public</span> <span class="kw4">void</span> ConfigureServices<span class="br0">&#40;</span>IServiceCollection services<span class="br0">&#41;</span>
<span class="br0">&#123;</span>
&nbsp; &nbsp; services<span class="sy0">.</span><span class="me1">AddMvc</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; <span class="co1">// ... add persistence, membership ...</span>
&nbsp;
&nbsp; &nbsp; services<span class="sy0">.</span><span class="me1">AddAuthentication</span><span class="br0">&#40;</span>CookieAuthenticationDefaults<span class="sy0">.</span><span class="me1">AuthenticationScheme</span><span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="coMULTI">/* Custom Membership API Provider */</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="sy0">.</span><span class="me1">AddCustomMembershipAPIAuth</span><span class="br0">&#40;</span><span class="st0">&quot;APIToken&quot;</span>, <span class="st0">&quot;SampleCosmosCore2App&quot;</span><span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="coMULTI">/* External Auth Providers */</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="sy0">.</span><span class="me1">AddCookie</span><span class="br0">&#40;</span><span class="st0">&quot;ExternalCookie&quot;</span><span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="sy0">.</span><span class="me1">AddTwitter</span><span class="br0">&#40;</span><span class="st0">&quot;Twitter&quot;</span>, options <span class="sy0">=&gt;</span> <span class="coMULTI">/* ... */</span> <span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="coMULTI">/* 'Session' Cookie Provider */</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="sy0">.</span><span class="me1">AddCookie</span><span class="br0">&#40;</span><span class="br0">&#40;</span>options<span class="br0">&#41;</span> <span class="sy0">=&gt;</span> <span class="coMULTI">/* ... */</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; services<span class="sy0">.</span><span class="me1">AddAuthorization</span><span class="br0">&#40;</span>options <span class="sy0">=&gt;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; options<span class="sy0">.</span><span class="me1">AddPolicy</span><span class="br0">&#40;</span><span class="st0">&quot;APIAccessOnly&quot;</span>, policy <span class="sy0">=&gt;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; policy<span class="sy0">.</span><span class="me1">AddAuthenticationSchemes</span><span class="br0">&#40;</span><span class="st0">&quot;APIToken&quot;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; policy<span class="sy0">.</span><span class="me1">RequireAuthenticatedUser</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; <span class="br0">&#125;</span><span class="br0">&#41;</span><span class="sy0">;</span>
<span class="br0">&#125;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">public void ConfigureServices(IServiceCollection services)
{
    services.AddMvc();

    // ... add persistence, membership ...

    services.AddAuthentication(CookieAuthenticationDefaults.AuthenticationScheme)
        /* Custom Membership API Provider */
        .AddCustomMembershipAPIAuth("APIToken", "SampleCosmosCore2App")
        /* External Auth Providers */
        .AddCookie("ExternalCookie")
        .AddTwitter("Twitter", options =&gt; /* ... */ )
        /* 'Session' Cookie Provider */
        .AddCookie((options) =&gt; /* ... */);

    services.AddAuthorization(options =&gt; {
        options.AddPolicy("APIAccessOnly", policy =&gt;
        {
            policy.AddAuthenticationSchemes("APIToken");
            policy.RequireAuthenticatedUser();
        });
    });
}</pre></div></div>

<p>First we make a one line addition to the <code>AddCustomMembershipAPIAuth</code> Extension method, passing in a <code>Scheme</code> and <code>Realm</code>. Next we add in a new &#8220;APIAccessOnly&#8221; policy that we will use to enforce API Access authentication only for API endpoints, which we can do next.</p>
<p><a href="https://github.com/tarwn/Sample_ASPNetCore2AndCosmosDB/blob/Post-%234/SampleCosmosCore2App/Controllers/ValuesController.cs">SampleCosmosCore2App/Controllers/ValuesController.cs</a></p>
<pre lang="csharp"">
[Route("api/[controller]")]
[Authorize(Policy = "APIAccessOnly")]
public class ValuesController : Controller
{
    // GET api/values
    [HttpGet]
    public IEnumerable<string> Get()
    {
        return new string[] { "value1", "value2" };
    }

    // ...
}
</pre>
<p>I&#8217;ve decorated the ValuesController with an <code>Authorize(Policy = ...)</code> attribute, but I could also have used <code>Authorize(AuthenticationScheme = ...)</code> and skipped the policy definition in the Startup file. However, I like the idea that all of my Authentication schemes are defined in Startup consistently, the policy for accessing API endpoints is defined in one place, and it looks more readable to me.</p>
<h3>Membership Changes</h3>
<p>To support the middleware above, we need a <code>GetOneTimeLoginAsync</code> method in membership. This method will accept the authentication details, verify them, and return a ClaimsPrincipal (or null).</p>
<p><a href="https://github.com/tarwn/Sample_ASPNetCore2AndCosmosDB/blob/Post-%234/SampleCosmosCore2App/Membership/CosmosDBMembership.cs#L166">SampleCosmosCore2App/Membership/CosmosDBMembership.cs</a></p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="csharp"><thead><tr><td colspan="2"  class="head">C#</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
</pre></td><td class="de1"><pre class="de1"><span class="kw1">public</span> async Task<span class="sy0">&lt;</span>ClaimsPrincipal<span class="sy0">&gt;</span> GetOneTimeLoginAsync<span class="br0">&#40;</span><span class="kw4">string</span> scheme, <span class="kw4">string</span> userAuthId, <span class="kw4">string</span> identity, <span class="kw4">string</span> authenticationScheme<span class="br0">&#41;</span>
<span class="br0">&#123;</span>
&nbsp; &nbsp; <span class="kw1">var</span> authScheme <span class="sy0">=</span> StringToScheme<span class="br0">&#40;</span>scheme<span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; <span class="kw1">var</span> userAuth <span class="sy0">=</span> await _persistence<span class="sy0">.</span><span class="me1">Users</span><span class="sy0">.</span><span class="me1">GetUserAuthenticationAsync</span><span class="br0">&#40;</span>userAuthId<span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; <span class="co1">// are the passed auth details valid?</span>
&nbsp; &nbsp; <span class="kw1">if</span> <span class="br0">&#40;</span>userAuth <span class="sy0">==</span> <span class="kw1">null</span><span class="br0">&#41;</span>
&nbsp; &nbsp; <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">return</span> <span class="kw1">null</span><span class="sy0">;</span>
&nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp;
&nbsp; &nbsp; <span class="kw1">if</span> <span class="br0">&#40;</span>userAuth<span class="sy0">.</span><span class="me1">Scheme</span> <span class="sy0">!=</span> authScheme <span class="sy0">||</span> <span class="sy0">!</span>userAuth<span class="sy0">.</span><span class="me1">Identity</span><span class="sy0">.</span><span class="me1">Equals</span><span class="br0">&#40;</span>identity, StringComparison<span class="sy0">.</span><span class="me1">CurrentCultureIgnoreCase</span><span class="br0">&#41;</span><span class="br0">&#41;</span>
&nbsp; &nbsp; <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">return</span> <span class="kw1">null</span><span class="sy0">;</span>
&nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp;
&nbsp; &nbsp; <span class="co1">// is the user allowed to log in? We don't have addtl checks yet</span>
&nbsp; &nbsp; <span class="kw1">var</span> user <span class="sy0">=</span> await _persistence<span class="sy0">.</span><span class="me1">Users</span><span class="sy0">.</span><span class="me1">GetUserAsync</span><span class="br0">&#40;</span>userAuth<span class="sy0">.</span><span class="me1">UserId</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
&nbsp; &nbsp; <span class="co1">// create a claims principal</span>
&nbsp; &nbsp; <span class="kw1">var</span> claimsIdentity <span class="sy0">=</span> <span class="kw3">new</span> ClaimsIdentity<span class="br0">&#40;</span>authenticationScheme<span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; claimsIdentity<span class="sy0">.</span><span class="me1">AddClaim</span><span class="br0">&#40;</span><span class="kw3">new</span> Claim<span class="br0">&#40;</span><span class="st0">&quot;userId&quot;</span>, userAuth<span class="sy0">.</span><span class="me1">UserId</span><span class="br0">&#41;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; claimsIdentity<span class="sy0">.</span><span class="me1">AddClaim</span><span class="br0">&#40;</span><span class="kw3">new</span> Claim<span class="br0">&#40;</span><span class="st0">&quot;userAuthId&quot;</span>, userAuth<span class="sy0">.</span><span class="me1">Id</span><span class="br0">&#41;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp; &nbsp; <span class="kw1">return</span> <span class="kw3">new</span> ClaimsPrincipal<span class="br0">&#40;</span>claimsIdentity<span class="br0">&#41;</span><span class="sy0">;</span>
<span class="br0">&#125;</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">public async Task&lt;ClaimsPrincipal&gt; GetOneTimeLoginAsync(string scheme, string userAuthId, string identity, string authenticationScheme)
{
    var authScheme = StringToScheme(scheme);
    var userAuth = await _persistence.Users.GetUserAuthenticationAsync(userAuthId);

    // are the passed auth details valid?
    if (userAuth == null)
    {
        return null;
    }

    if (userAuth.Scheme != authScheme || !userAuth.Identity.Equals(identity, StringComparison.CurrentCultureIgnoreCase))
    {
        return null;
    }

    // is the user allowed to log in? We don't have addtl checks yet
    var user = await _persistence.Users.GetUserAsync(userAuth.UserId);

    // create a claims principal
    var claimsIdentity = new ClaimsIdentity(authenticationScheme);
    claimsIdentity.AddClaim(new Claim("userId", userAuth.UserId));
    claimsIdentity.AddClaim(new Claim("userAuthId", userAuth.Id));
    return new ClaimsPrincipal(claimsIdentity);
}</pre></div></div>

<p>Currently this method accepts an authentication scheme for the &#8220;OneTimeLogin&#8221;, later this will be refactored so that the membership class supports a separate &#8220;InteractiveAuthenticationScheme&#8221; and &#8220;OneTimeLoginScheme&#8221; that are configured in Startup and they will consistently set either <code>userId</code> and <code>userAuthId</code> claims or <code>userId</code> and <code>sessionid</code> claims.</p>
<p>That&#8217;s all we needed! Let&#8217;s try it out with <a href="https://www.getpostman.com/">postman</a>.</p>
<p>Let&#8217;s start with the happy path, passing in good credentials:</p>
<div id="attachment_9209" style="width: 610px" class="wp-caption aligncenter"><img src="/wp-content/uploads/2018/04/aspnetcore2cosmos_308-600x230.png" alt="Testing the successful path w/ good API Credentials" width="600" height="230" class="size-medium-width wp-image-9209" srcset="/wp-content/uploads/2018/04/aspnetcore2cosmos_308-600x230.png 600w, /wp-content/uploads/2018/04/aspnetcore2cosmos_308-300x115.png 300w, /wp-content/uploads/2018/04/aspnetcore2cosmos_308-768x294.png 768w, /wp-content/uploads/2018/04/aspnetcore2cosmos_308-784x300.png 784w, /wp-content/uploads/2018/04/aspnetcore2cosmos_308.png 888w" sizes="(max-width: 600px) 100vw, 600px" /><p class="wp-caption-text">Testing the successful path w/ good API Credentials</p></div>
<p>Then we should try a number of failure situations, like no credentials, bad credentials, and invalidly formatted credentials:</p>
<div id="attachment_9208" style="width: 610px" class="wp-caption aligncenter"><img src="/wp-content/uploads/2018/04/aspnetcore2cosmos_307-600x331.png" alt="Verifying Bad Token reports 401" width="600" height="331" class="size-medium-width wp-image-9208" srcset="/wp-content/uploads/2018/04/aspnetcore2cosmos_307-600x331.png 600w, /wp-content/uploads/2018/04/aspnetcore2cosmos_307-300x166.png 300w, /wp-content/uploads/2018/04/aspnetcore2cosmos_307-768x424.png 768w, /wp-content/uploads/2018/04/aspnetcore2cosmos_307-544x300.png 544w, /wp-content/uploads/2018/04/aspnetcore2cosmos_307.png 888w" sizes="(max-width: 600px) 100vw, 600px" /><p class="wp-caption-text">Verifying Bad Token reports 401</p></div>
<p>Excellent! We now have working API Authentication!</p>
<h2>Wrapping up, next steps</h2>
<p>Moving right along. We now have an ASP.net Core 2 website that can perform really basic CRUD logic against Cosmos DB. We&#8217;ve then layered standard username/password authentication on it, with storage in Cosmos DB as well. Then we extended this to support a second interactive login method (Twitter), opening the door to adding as many of those as we need. Then in this post, we&#8217;ve added API authorization for per-request authorization. So far, so good.</p>
<p>Next up, we&#8217;re going to take a break from Cosmos DB for a bit to do some general refactoring (which won&#8217;t be a blog post) and add in error handling logic. From there, we&#8217;ll shift focus to front-end tooling to ensure we have a good developer and production experience with CSS and JavaScript. Once we&#8217;re done there, we&#8217;ll be back to add in API Rate Limiting with Cosmos DB as the backing store. See you soon!</p>
]]></content>
			<link rel="replies" type="text/html" href="/index.php/uncategorized/adding-user-managed-api-keys-to-asp-net-core-2-w-cosmos-db/#comments" thr:count="1"/>
		<link rel="replies" type="application/atom+xml" href="/index.php/uncategorized/adding-user-managed-api-keys-to-asp-net-core-2-w-cosmos-db/feed/atom/" thr:count="1"/>
		<thr:total>1</thr:total>
		</entry>
		<entry>
		<author>
			<name>Eli Weinstock-Herman (tarwn)</name>
					</author>
		<title type="html"><![CDATA[LaunchReady: Don&#8217;t Get Distracted, Getting Stuff Done]]></title>
		<link rel="alternate" type="text/html" href="/index.php/uncategorized/launchready-dont-get-distracted-getting-stuff-done/" />
		<id>/?p=8980</id>
		<updated>2018-03-08T21:00:15Z</updated>
		<published>2018-03-08T20:57:08Z</published>
		<category scheme="/" term="Uncategorized" />		<summary type="html"><![CDATA[I built LaunchReady in my spare time, continuing to work fulltime during the day, spend time with the family in the evening, and jump online or hit the trails occasionally with friends. I also had a bunch of ideas, which served as interesting distractions from making it actually work. In this post I&#8217;ll share a [&#8230;]]]></summary>
		<content type="html" xml:base="/index.php/uncategorized/launchready-dont-get-distracted-getting-stuff-done/"><![CDATA[<p>I built LaunchReady in my spare time, continuing to work fulltime during the day, spend time with the family in the evening, and jump online or hit the trails occasionally with friends. I also had a bunch of ideas, which served as interesting distractions from making it actually work. In this post I&#8217;ll share a few of the tactics I used to stay balanced, get past the distractions, and find motivation when things seemed impossible.</p>
<div style="border: 2px solid #ddd; border-left-width: 16px; margin: 1em 0; padding: 1em;">
<h3>LaunchReady Series</h3>
<p>
1. <a href="/index.php/uncategorized/meet-launchready-a-saas-product-that-almost-was/">LaunchReady: Meet the SaaS Product I Almost Built</a><br />
Introduction and backlog ideas I hope folks will incorporate into their products 
</p>
<p>
2. <a href="/index.php/uncategorized/launchready-focus-on-the-customer/">LaunchReady: Focus on the Customer</a><br />
Some practices that helped me see through the customer eyes
</p>
<p>
3. <u>LaunchReady: Don&#8217;t Get Distracted, Getting Stuff Done</u><br />
Ignoring the distracting cool ideas to get work done
</p>
</div>
<h2>Removing Barriers</h2>
<p>Building a product in my spare time meant I was working within some tight constraints. It was fine if I spent a car ride thinking through interesting daydreams, but not if I spent my evening programming time daydreaming instead of making progress.</p>
<h3>Get the distractions out of my head</h3>
<p>One of the biggest barriers was all of the cool things I wanted to do with the system once it was built. Faced with &#8220;how do I make this database migration work&#8221; versus &#8220;how can I use machine learning to do that cool thing&#8221;, I would get sucked into daydreaming about the cool thing.</p>
<div id="attachment_9050" style="width: 610px" class="wp-caption aligncenter"><img src="/wp-content/uploads/2018/03/launchreadypost_11-600x320.png" alt="Early UI Sketches for User Scenarios + Test Results" width="600" height="320" class="size-medium-width wp-image-9050" srcset="/wp-content/uploads/2018/03/launchreadypost_11-600x320.png 600w, /wp-content/uploads/2018/03/launchreadypost_11-300x160.png 300w, /wp-content/uploads/2018/03/launchreadypost_11-562x300.png 562w, /wp-content/uploads/2018/03/launchreadypost_11.png 695w" sizes="(max-width: 600px) 100vw, 600px" /><p class="wp-caption-text">Early UI Sketches for User Scenarios + Test Results</p></div>
<p>To get past the distractions, I let myself have a short 10-15 minute budget of time to draw or write the idea down. The key ingredients were (1) time-boxed permission to explore the idea, and (2) some form of storage (drawing or typing in OneNote). The time box forced focus but also provided time to explore and capture more than my poor short-term memory would normally support.</p>
<div id="attachment_9048" style="width: 610px" class="wp-caption aligncenter"><img src="/wp-content/uploads/2018/03/launchreadypost_10-600x309.png" alt="Sketching Architecture Ideas" width="600" height="309" class="size-medium-width wp-image-9048" srcset="/wp-content/uploads/2018/03/launchreadypost_10-600x309.png 600w, /wp-content/uploads/2018/03/launchreadypost_10-300x155.png 300w, /wp-content/uploads/2018/03/launchreadypost_10-768x396.png 768w, /wp-content/uploads/2018/03/launchreadypost_10-582x300.png 582w, /wp-content/uploads/2018/03/launchreadypost_10.png 898w" sizes="(max-width: 600px) 100vw, 600px" /><p class="wp-caption-text">Sketching Architecture Ideas</p></div>
<p>Once I was done, I would save my thinking and move on, satisfied that I had given it some focused thinking and would have it when it became more relevant. Some of these ideas evolved into the architecture, some helped shape the direction, and the rest went into the backlog of future ideas.</p>
<h3>When in doubt, ship something</h3>
<p>Some of the things I needed were so undefined I couldn&#8217;t figure out how to build them. I would find myself banging my head against the idea over and over, unable to make progress. When stuck, ship something. Then do it again.</p>
<div id="attachment_8945" style="width: 610px" class="wp-caption aligncenter"><img src="/wp-content/uploads/2018/02/launchreadypost_04-600x124.png" alt="Push the Button: TeamCity deployment pipeline for LaunchReady (4 servers )" width="600" height="124" class="size-medium-width wp-image-8945" srcset="/wp-content/uploads/2018/02/launchreadypost_04-600x124.png 600w, /wp-content/uploads/2018/02/launchreadypost_04-300x62.png 300w, /wp-content/uploads/2018/02/launchreadypost_04-768x158.png 768w, /wp-content/uploads/2018/02/launchreadypost_04-1024x211.png 1024w, /wp-content/uploads/2018/02/launchreadypost_04.png 1100w" sizes="(max-width: 600px) 100vw, 600px" /><p class="wp-caption-text">Push the Button: TeamCity deployment pipeline for LaunchReady (4+ &#8220;servers&#8221;)</p></div>
<p>The momentum of shipping small pieces helped me get moving and it started chipping away at the unknown. A smaller problem and seeing the thing taking shape in front of me provided focus and context. Eventually it would become clear and I would be unstuck, sometimes already headed in the right direction and sometimes having to backtrack and do some rework. At the end, even if I had to write some things twice, I was past the blockage and making progress.</p>
<h2>Getting work done after a 40 hour week</h2>
<p>Luckily this work doesn&#8217;t conflict with my day job, or else I probably would have burned out. By day I&#8217;m an engineering manager, thinking about how to help support folks, hire them, refine the organization and processes, and so on. This project needed time for writing software, doing market research, and other activities, so there was still a gear switch between them.</p>
<h3>Make a schedule</h3>
<p>Early on, I worked when I had time. When I was with family I would be working through ideas on the project, when I was working on the project I was worried about not spending time with the family, and I never had time for a book or game. In general it was ineffective all around.</p>
<div id="attachment_9059" style="width: 280px" class="wp-caption aligncenter"><img src="/wp-content/uploads/2018/03/launchreadypost_12-270x300.png" alt="Time Schedule Template" width="270" height="300" class="size-medium-height wp-image-9059" srcset="/wp-content/uploads/2018/03/launchreadypost_12-270x300.png 270w, /wp-content/uploads/2018/03/launchreadypost_12-768x854.png 768w, /wp-content/uploads/2018/03/launchreadypost_12-600x667.png 600w, /wp-content/uploads/2018/03/launchreadypost_12.png 812w" sizes="(max-width: 270px) 100vw, 270px" /><p class="wp-caption-text">Time Schedule Template</p></div>
<p>So I made a schedule. I mapped out my week in 30 minute increments, creating a template for activities I would do each week. I included work (red), minimum family time (green), some time with friends on the weekends (blue), chores (orange), and some small and medium size blocks of project time (purple). Everything else I left blank. </p>
<div id="attachment_8984" style="width: 305px" class="wp-caption aligncenter"><img src="/wp-content/uploads/2018/02/launchreadypost_08-295x300.png" alt="Log from Random Week of 2017" width="295" height="300" class="size-medium-height wp-image-8984" srcset="/wp-content/uploads/2018/02/launchreadypost_08-295x300.png 295w, /wp-content/uploads/2018/02/launchreadypost_08-768x781.png 768w, /wp-content/uploads/2018/02/launchreadypost_08-600x610.png 600w, /wp-content/uploads/2018/02/launchreadypost_08.png 891w" sizes="(max-width: 295px) 100vw, 295px" /><p class="wp-caption-text">A selected week in 2017</p></div>
<p>Each Sunday, I would make a copy of the template and start logging my week. It never went perfect, but it helped. I had permission to focus on the project and could see I wasn&#8217;t ignoring it through the week. I could turn it off and spend time with the family. It felt a little weird that ?80% of my life was scheduled, but now things were getting my full focus.</p>
<h3>Ship something (again)</h3>
<p>Even with scheduled time, sometimes you sit down on a Tuesday night after a long day and just can&#8217;t get started. There&#8217;s still so much to do, I&#8217;m tired from the day, nothing seems interesting, &#8230; So I would pick one small ticket for the marketing site or the application and I would do it. Then I would pick up one more. And before I knew it it was 10PM and I had shipped 3.5 hours of features or website improvements.</p>
<div id="attachment_8987" style="width: 329px" class="wp-caption aligncenter"><img src="/wp-content/uploads/2018/02/launchreadypost_09.png" alt="Some Easy 1 Hour tasks" width="319" height="376" class="size-full wp-image-8987" srcset="/wp-content/uploads/2018/02/launchreadypost_09.png 319w, /wp-content/uploads/2018/02/launchreadypost_09-255x300.png 255w" sizes="(max-width: 319px) 100vw, 319px" /><p class="wp-caption-text">Some Easy 1 Hour tasks</p></div>
<p>But to feel a sense of accomplishment from shipping small work, I need small work to work on. Which brings me to&#8230;</p>
<h3>Break the work down into bite-size pieces</h3>
<p>Initially I knew what I was doing, so I broke work down functionally. First I would make some database tables, then some back end logic, later I would do the front-end.</p>
<p>Which ended up as a mess, with a lot of pieces that didn&#8217;t fit together.</p>
<p>So I stopped and closed out the functional task list and replaced it with bits of user interface and exposed features that I would build from the top all the way into the back-end database or distributed agents. </p>
<p><img src="/wp-content/uploads/2018/02/launchreadypost_05-600x79.png" alt="LaunchReady - Completed Tasks View" width="600" height="79" class="aligncenter size-medium-width wp-image-8946" srcset="/wp-content/uploads/2018/02/launchreadypost_05-600x79.png 600w, /wp-content/uploads/2018/02/launchreadypost_05-300x39.png 300w, /wp-content/uploads/2018/02/launchreadypost_05-768x101.png 768w, /wp-content/uploads/2018/02/launchreadypost_05.png 854w" sizes="(max-width: 600px) 100vw, 600px" /></p>
<p>And because I needed small tasks to build momentum on tough days, I sliced these very thin so I could accomplish them and ship something small on rough days or on the two nights I only had 1.5 hours of coding time. </p>
<p>But keeping the tasks organized became overwhelming, so&#8230;.</p>
<h3>Use a ticket system</h3>
<p>I started with a table of features in OneNote that was connected to a bunch of functional tasks. </p>
<div id="attachment_9068" style="width: 393px" class="wp-caption aligncenter"><img src="/wp-content/uploads/2018/03/launchreadypost_13-383x300.png" alt="LaunchReady Feature List, Take 1" width="383" height="300" class="size-medium-height wp-image-9068" srcset="/wp-content/uploads/2018/03/launchreadypost_13-383x300.png 383w, /wp-content/uploads/2018/03/launchreadypost_13-300x235.png 300w, /wp-content/uploads/2018/03/launchreadypost_13.png 463w" sizes="(max-width: 383px) 100vw, 383px" /><p class="wp-caption-text">LaunchReady Feature List, Take 1</p></div>
<p>This became overwhelming, so I moved them all to Trello and added even more functional tasks. When I ditched the functional tasks and started trying to identify small features, Trello became a mess. Then I found <a href="https://clubhouse.io/">Clubhouse</a>, which was perfect (seriously, go use this and give them money). </p>
<div id="attachment_9070" style="width: 610px" class="wp-caption aligncenter"><img src="/wp-content/uploads/2018/03/launchreadypost_14-600x178.png" alt="LaunchReady - Final Task System" width="600" height="178" class="size-medium-width wp-image-9070" srcset="/wp-content/uploads/2018/03/launchreadypost_14-600x178.png 600w, /wp-content/uploads/2018/03/launchreadypost_14-300x89.png 300w, /wp-content/uploads/2018/03/launchreadypost_14-768x227.png 768w, /wp-content/uploads/2018/03/launchreadypost_14-1024x303.png 1024w, /wp-content/uploads/2018/03/launchreadypost_14-1014x300.png 1014w, /wp-content/uploads/2018/03/launchreadypost_14.png 1389w" sizes="(max-width: 600px) 100vw, 600px" /><p class="wp-caption-text">LaunchReady &#8211; Final Task System</p></div>
<p>Clubhouse was a nice balance between the disconnected set of cards in Trello and something overboard like Jira. I used Epics to break huge features into much smaller, executable bites (still vertical slices). I used the story points for a general guesstimate of sizing, which helped break some of those down even further. I used a Milestone for the 3-4 epics I would need for an MVP and then as I finished things I got to see the charts reflect my progress, which gave me momentum for the next thing. </p>
<div id="attachment_8947" style="width: 610px" class="wp-caption aligncenter"><img src="/wp-content/uploads/2018/02/launchreadypost_06-600x327.png" alt="(Ignore the dashed flightline, I can&#039;t go back to Sept to screenshot this better)" width="600" height="327" class="size-medium-width wp-image-8947" srcset="/wp-content/uploads/2018/02/launchreadypost_06-600x327.png 600w, /wp-content/uploads/2018/02/launchreadypost_06-300x164.png 300w, /wp-content/uploads/2018/02/launchreadypost_06-550x300.png 550w, /wp-content/uploads/2018/02/launchreadypost_06.png 682w" sizes="(max-width: 600px) 100vw, 600px" /><p class="wp-caption-text">(Ignore the dashed flightline, I can&#8217;t go back to Sept to screenshot this better)</p></div>
<p>Seeing my progress on the larger scale was useful. This was a pretty big elephant of a project and I could see I was 1/4 done, 1/2 done, etc and descale things to hit my target dates. Besides having software tasks, it also captured things like setting up bank accounts, the legal steps for the company formation, etc. As I saw the charts march down towards an estimated completion date, I fed the data into the financial spreadsheet to help coordinate personal investments and so on. </p>
<h2>TLDR: Create a pace of shipping small, working things</h2>
<p>If I had to boil this all down, it is to build momentum by shipping small, working things. Most projects like this aren&#8217;t well enough defined to take a few weeks and go build just the database, etc. So start from the interface, ship small pieces, use a system to move all of those things you&#8217;re trying to remember (even the work) off your conscious brain, and be ok with the fact that sometimes it takes writing 5 things in a row in the wrong direction to figure out what the right direction should be.</p>
<p>I hope some of the content in this series has been helpful and good luck with your own endeavors!</p>
]]></content>
			<link rel="replies" type="text/html" href="/index.php/uncategorized/launchready-dont-get-distracted-getting-stuff-done/#comments" thr:count="0"/>
		<link rel="replies" type="application/atom+xml" href="/index.php/uncategorized/launchready-dont-get-distracted-getting-stuff-done/feed/atom/" thr:count="0"/>
		<thr:total>0</thr:total>
		</entry>
		<entry>
		<author>
			<name>Jes Borland</name>
					</author>
		<title type="html"><![CDATA[&#8220;North to Alaska&#8221;]]></title>
		<link rel="alternate" type="text/html" href="/index.php/uncategorized/north-to-alaska/" />
		<id>/?p=9033</id>
		<updated>2018-03-01T20:22:02Z</updated>
		<published>2018-03-01T18:36:25Z</published>
		<category scheme="/" term="Uncategorized" />		<summary type="html"><![CDATA[I&#8217;m excited and privileged to announce that I&#8217;ll be a Technical Lead on Tech Outbound Alaska this August! Tim and Amy Ford have been putting together high-quality SQL Cruise events since 2010. I&#8217;ve attended three, and each one has been better than the last. (Make sure to read about my experiences on SQL Cruise Caribbean 2015 [&#8230;]]]></summary>
		<content type="html" xml:base="/index.php/uncategorized/north-to-alaska/"><![CDATA[<p><a href="http://www.techoutbound.com/"><img class="alignleft size-full wp-image-9036" style="float: left;margin: 1em 1em .5em 1em" src="/wp-content/uploads/2018/03/tech-outbound-logo.jpg" alt="tech-outbound-logo" width="200" height="200" srcset="/wp-content/uploads/2018/03/tech-outbound-logo.jpg 400w, /wp-content/uploads/2018/03/tech-outbound-logo-200x200.jpg 200w, /wp-content/uploads/2018/03/tech-outbound-logo-300x300.jpg 300w" sizes="(max-width: 200px) 100vw, 200px" /></a><br />
I&#8217;m excited and privileged to announce that I&#8217;ll be a Technical Lead on <a href="http://www.techoutbound.com/">Tech Outbound Alaska</a> this August! Tim and Amy Ford have been putting together high-quality SQL Cruise events since 2010. I&#8217;ve attended three, and each one has been better than the last. (Make sure to read about my experiences on <a href="/index.php/uncategorized/sql-cruise-caribbean-2015-more-than-a-cruise-with-classes-much-more/">SQL Cruise Caribbean 2015</a> and <a href="/index.php/uncategorized/what-i-learned-on-sql-cruise-2016/">SQL Cruise Caribbean 2016</a>!)</p>
<p>At the core of Tech Outbound is technical training. I&#8217;ll be leading discussions on three main topics this year &#8211; SQL Server enhancements, Azure Managed Instances, and Azure Cosmos DB. Yes, I&#8217;m expanding beyond SQL Server, because we are more than SQL Server professionals &#8211; we are data professionals.<br />
Here is a preview of my topics:</p>
<p style="padding-left: 30px"><strong>Cosmos DB: The Future of Data… Now!</strong><br />
The opportunity for getting in on the ground floor of new technologies happens once in a blue moon. In 2017, Microsoft introduced Cosmos DB, a &#8220;globally distributed, multi-model database service&#8221;. It offers multiple APIs, multiple consistency models, automatic indexing, and guaranteed performance. This revolutionary database system is changing how developers store and work with their data. I&#8217;ll cover the features, use cases, and case studies for Cosmos DB. Gain a competitive edge by learning about this emerging technology… now!</p>
<p style="padding-left: 30px"><strong>Advantages of Azure Managed Instances for You and Your Company</strong><br />
SQL Server Database Administrators have been told for years that their jobs are changing and the biggest contributor may be the newly announced Azure Managed Instances. Azure SQL Database provides for automatic backups, built-in high availability, and easy scaling. SQL Server on-premises is your current option for native backup and restore, cross-database queries and transactions, SQL Server Agent, and more. With Azure Managed Instances, you get both! In this class, you&#8217;ll learn what this Azure PaaS offering supports; how to migrate existing instances and databases; and how to tune, scale, and troubleshoot them. Maintain your technical advantage by attending this session aboard Tech Outbound SQL Cruise.</p>
<p style="padding-left: 30px"><strong>SQL Server: The Intelligent Database</strong><br />
You need a data platform that can accelerate the decisions for your business to maintain advantages over the competition. Microsoft is developing many new features, and improving existing capabilities within SQL Server, to create an intelligent database. Automatic tuning, adaptive query processing, and operational analytics are transforming the relational database you know, while new features are continually introduced into Azure SQL Database. Join me to gain an insider’s perspective on investments being made to make your SQL Server databases smarter: enabling your company gain an intelligent edge.</p>
<p>In addition, you&#8217;ll also get to hear from other fantastic speakers &#8211; Buck Woody, also of Microsoft; Tim Ford, organizing and teaching; Jason Hall of Sentry One (who previously gave one of my all-time favorite SQL Cruise sessions on tempdb); Itzik Ben-Gan, which has me geeked out; and Kevin Kline of Sentry One, who has always been one of my favorite instructors.</p>
<p>Why should you consider this conference on a ship?</p>
<p>My favorite part of Tech Outbound training is how in-depth the classes are. Sessions can last two or more hours, with discussion continuing after formal classroom time over a drink, dinner, or an excursion. Office Hours are set up a few times during the week to have conversations in a more casual setting &#8211; and this is where I&#8217;ve had some of my best conversations.</p>
<p>You don&#8217;t merely have topic experts speaking at you, you have discussions with them and your fellow attendees all week. Everyone learns from everyone else.</p>
<p>In addition, the networking is fantastic &#8211; I&#8217;ve made dear friends on these cruises. I&#8217;ve also had delightful vacation fun &#8211; hiking to glaciers, taking rum distillery tours, ziplining in tropical canopies overlooking the ocean, and great dinners.</p>
<p><strong>Join us!</strong></p>
<p>Tech Outbound Alaska runs from August 4 to August 11, 2018. The cruise departs from and returns to Seattle, Washington. We&#8217;ll be sailing on Norwegian Cruise Line’s brand new Alaskan flagship, the NCL Bliss. Alaskan stops are in Ketchikan, Juneau, and Skagway. Enjoy training as we pass glaciers and remote mountain peaks. A glacier tour, two days at sea through the majestic Inside Passage, and a final stop in Victoria on Vancouver Island also are on tap.</p>
<p>To get started, go to <a href="http://www.techoutbound.com/register-for-event.html">http://www.techoutbound.com/register-for-event.html</a> and follow instructions &#8211; the process is really easy! Please post on Twitter using #TechOutbound and tag @TechOutbound &#8211; and me @grrl_geek!</p>
]]></content>
			<link rel="replies" type="text/html" href="/index.php/uncategorized/north-to-alaska/#comments" thr:count="0"/>
		<link rel="replies" type="application/atom+xml" href="/index.php/uncategorized/north-to-alaska/feed/atom/" thr:count="0"/>
		<thr:total>0</thr:total>
		</entry>
		<entry>
		<author>
			<name>Eli Weinstock-Herman (tarwn)</name>
					</author>
		<title type="html"><![CDATA[LaunchReady: Focus on the Customer]]></title>
		<link rel="alternate" type="text/html" href="/index.php/uncategorized/launchready-focus-on-the-customer/" />
		<id>/?p=8976</id>
		<updated>2018-03-08T20:59:13Z</updated>
		<published>2018-03-01T14:41:48Z</published>
		<category scheme="/" term="Uncategorized" />		<summary type="html"><![CDATA[When I started LaunchReady, it didn&#8217;t even have a name. I had a general idea of what I wanted a system to do, but didn&#8217;t have a good handle on the target audience and what they would want. I had some general ideas on how to build the software affordably, but nothing with a total [&#8230;]]]></summary>
		<content type="html" xml:base="/index.php/uncategorized/launchready-focus-on-the-customer/"><![CDATA[<p>When I started LaunchReady, it didn&#8217;t even have a name. I had a general idea of what <em>I</em> wanted a system to do, but didn&#8217;t have a good handle on the target audience and what <em>they</em> would want. I had some general ideas on how to build the software affordably, but nothing with a total row at the bottom. I was excited to jump in and try to build some of the I personally wanted, but realized that led to a system that I could only describe to myself (and likely minus some very obvious features, as well).</p>
<div style="border: 2px solid #ddd; border-left-width: 16px; margin: 1em 0; padding: 1em;">
<h3>LaunchReady Series</h3>
<p>
1. <a href="/index.php/uncategorized/meet-launchready-a-saas-product-that-almost-was/">LaunchReady: Meet the SaaS Product I Almost Built</a><br />
Introduction and backlog ideas I hope folks will incorporate into their products 
</p>
<p>
2. <u>LaunchReady: Focus on the Customer</u><br />
Some practices that helped me see through the customer eyes
</p>
<p>
3. <a href="/index.php/uncategorized/launchready-dont-get-distracted-getting-stuff-done/">LaunchReady: Don&#8217;t Get Distracted, Getting Stuff Done</a><br />
Ignoring the distracting cool ideas to get work done
</p>
</div>
<p>Initially, I was my target customer. This would be the product I was looking for when I scaled the engineering team at <a href="https://precisionlender.com/">PrecisionLender</a>. I had wanted a tool that would take all of the best learning from our core team and make it available to the new folks as they were getting up to speed. For reference, we were quadrupling the product development organization, launching a public API and third-party integrations, replatforming the entire 250KLOC front-end, refining existing features, and we added a newborn along the way for extra difficulty level&#8230;it was a busy time.</p>
<p>I wanted a product that focused on the fast growing, development organization that couldn&#8217;t afford to go learn and build and support a whole second product to test their first one and didn&#8217;t have experienced test automation folks on board already. And I wanted to challenge the conventions that UI Automation must be slow and fragile and hard to change.</p>
<h2>Practices that helped define the product</h2>
<p>At the beginning, not much of the system was clear beyond some of the features I wanted. There wasn&#8217;t a cohesive story I could tell someone, much less a product I could try to sell. There also wasn&#8217;t a clear path from that set of features to a fully working system, I could only explore so many details in my head. So it became important to identify what that system would offer to external customers, how I would explain the problem it was trying to solve, how to make it viable form a financial perspective, and what all of those necessary features were that I wasn&#8217;t thinking of while it was only in my head.</p>
<h3>The Marketing Site</h3>
<p>I started building the marketing site very early. This forced me to think through questions about the type of folks the product was serving, the problems they would be searching for online, and the features that had to be included from day 1 of even a pilot offering. This drove changes from the terminology, to the flow between screens, to the basic data structures behind the system.</p>
<p><a href="https://www.launchready.co/"><img src="/wp-content/uploads/2018/02/launchreadypost_02-600x311.png" alt="LaunchReady - Deploy with Confidence" width="600" height="311" class="aligncenter size-medium-width wp-image-8943" srcset="/wp-content/uploads/2018/02/launchreadypost_02-600x311.png 600w, /wp-content/uploads/2018/02/launchreadypost_02-300x155.png 300w, /wp-content/uploads/2018/02/launchreadypost_02-768x398.png 768w, /wp-content/uploads/2018/02/launchreadypost_02-579x300.png 579w, /wp-content/uploads/2018/02/launchreadypost_02.png 867w" sizes="(max-width: 600px) 100vw, 600px" /></a></p>
<p>The marketing site is still up, if you&#8217;re interested: <a href="https://www.launchready.co/">https://www.launchready.co/</a>.</p>
<p>Many people will tell you to put up the Marketing Site and validate the product before you build it. In this case, I built the product at the same time because I was concerned about the complexity and making sure I could connect the message with real functionality (or build exceptions back into the message).</p>
<h3>Creating the Financial Spreadsheet</h3>
<p>Building the financial spreadsheets and forecasts forced me to think really hard on what limits or capabilities I was going to include. There are features I wanted to include in the beginning that I realized couldn&#8217;t be included until customer #10-15 for a partial launch, or #30 for a full-scale launch. There was a valuable feedback loop between things the marketing site increased the priority on, what it took to implement them, the impact that had on the financial perspective, and back around again.</p>
<p><img src="/wp-content/uploads/2018/02/launchreadypost_03-600x248.png" alt="Financial Spreadsheet" width="600" height="248" class="aligncenter size-medium-width wp-image-8944" srcset="/wp-content/uploads/2018/02/launchreadypost_03-600x248.png 600w, /wp-content/uploads/2018/02/launchreadypost_03-300x124.png 300w, /wp-content/uploads/2018/02/launchreadypost_03.png 627w" sizes="(max-width: 600px) 100vw, 600px" /></p>
<p>SaaS financials are a pretty widely talked about subject these days, so finding good models and articles was relatively easy. During development, I was able to keep my costs for the marketing site and production systems under $25/month while having a realistic plan to quickly turn on a pilot, add advertising, and then scale with forecasted production traffic. </p>
<h3>Plan for customer onboarding</h3>
<p>A key goal was to challenge the belief that UI Automation has to be fragile and complex. There is complexity in the implementation details, but I was going to have a target audience that wouldn&#8217;t have that background and needed to be able to get up to s speed and back to what they were doing very quickly (or they would give up and move on).</p>
<p>Besides the usual walkthrough in the docs (<a href="https://www.launchready.co/docs/getting-started/first-time-through/" title="LaunchReady: Getting Started">LaunchReady: Getting Started</a>), I added a required, guided walkthrough to the application that led a first time user through adding a new application, their first user scenario, running a manual test, and reading the results from automated tests. It took 5-10 minutes and gave them a hands on introduction to the terminology and screens, in the hopes that this would give them enough tool to build their first real test and get value quickly.</p>
<div id="attachment_8948" style="width: 610px" class="wp-caption aligncenter"><img src="/wp-content/uploads/2018/02/launchreadypost_07-600x265.png" alt="First Step of Interactive Onboarding Walkthrough" width="600" height="265" class="size-medium-width wp-image-8948" srcset="/wp-content/uploads/2018/02/launchreadypost_07-600x265.png 600w, /wp-content/uploads/2018/02/launchreadypost_07-300x132.png 300w, /wp-content/uploads/2018/02/launchreadypost_07-768x339.png 768w, /wp-content/uploads/2018/02/launchreadypost_07-1024x452.png 1024w, /wp-content/uploads/2018/02/launchreadypost_07-680x300.png 680w, /wp-content/uploads/2018/02/launchreadypost_07.png 1217w" sizes="(max-width: 600px) 100vw, 600px" /><p class="wp-caption-text">First Step of Interactive Onboarding Walkthrough</p></div>
<p>I was prioritizing heavily to slice the work down for the MVP, but this seemed like a critical piece of the puzzle if I was going to get users succeeding quickly. The 5 minute target forced simplifications and changes elsewhere in the system, but when I look back these were all for the better and I could count on everyone using the system having a common minimum base of knowledge from that onboarding flow.</p>
<h2>Next: Getting Things Done</h2>
<p>These 3 activities helped focus on what I needed to do, but not always how to get it done at the end of an already long day. In the next post I&#8217;ll talk to some of the practices I incorporated to stop me from getting distracted by cool ideas (like those in the <a href="/index.php/uncategorized/meet-launchready-a-saas-product-that-almost-was/">first post</a>) and the general drag from working in the evenings (I&#8217;m a morning person).</p>
]]></content>
			<link rel="replies" type="text/html" href="/index.php/uncategorized/launchready-focus-on-the-customer/#comments" thr:count="0"/>
		<link rel="replies" type="application/atom+xml" href="/index.php/uncategorized/launchready-focus-on-the-customer/feed/atom/" thr:count="0"/>
		<thr:total>0</thr:total>
		</entry>
		<entry>
		<author>
			<name>Eli Weinstock-Herman (tarwn)</name>
					</author>
		<title type="html"><![CDATA[Meet LaunchReady: A SaaS Product That Almost Was]]></title>
		<link rel="alternate" type="text/html" href="/index.php/uncategorized/meet-launchready-a-saas-product-that-almost-was/" />
		<id>/?p=8954</id>
		<updated>2018-03-08T21:01:09Z</updated>
		<published>2018-02-27T13:36:46Z</published>
		<category scheme="/" term="Uncategorized" />		<summary type="html"><![CDATA[Once upon a time, there was a growing organization that had the usual challenges as new folks came on board and started trying to learn a complex domain. At the time, I imagined a product that combined UI Automation and a focus on fast feedback to serve as a safety net for these folks, but [&#8230;]]]></summary>
		<content type="html" xml:base="/index.php/uncategorized/meet-launchready-a-saas-product-that-almost-was/"><![CDATA[<p>Once upon a time, there was a growing organization that had the usual challenges as new folks came on board and started trying to learn a complex domain. At the time, I imagined a product that combined UI Automation and a focus on fast feedback to serve as a safety net for these folks, but couldn&#8217;t find what I was looking for in the market. Last summer I started to build it, but ultimately didn&#8217;t get it to market. </p>
<p>Before it gets lost in the mists of archive.org, I thought I would try to capture some of the ideas and practices that helped me build out a complex, production system in my spare time without losing focus on user experience and the target audience.</p>
<div style="border: 2px solid #ddd; border-left-width: 16px; margin: 1em 0; padding: 1em;">
<h3>LaunchReady Series</h3>
<p>
1. <u>Meet LaunchReady: A SaaS Product That Almost Was</u><br />
Introduction and backlog ideas I hope folks will incorporate into their products 
</p>
<p>
2. <a href="/index.php/uncategorized/launchready-focus-on-the-customer/">LaunchReady: Focus on the Customer</a><br />
Some practices that helped me see through the customer eyes
</p>
<p>
3. <a href="/index.php/uncategorized/launchready-dont-get-distracted-getting-stuff-done/">LaunchReady: Don&#8217;t Get Distracted, Getting Stuff Done</a><br />
Ignoring the distracting cool ideas to get work done
</p>
</div>
<p>The ultimate reason it&#8217;s shutting down is not a groundbreaking discovery. Sales is a critical part of any product, especially at the beginning. Some forms of sales I have more experience in (pitching a company to prospective employees, for instance), but cold calling and getting a product to market are new to me. When I reach the beginning of 2018 and realized I had a minimum of 12+ months of being a beginner sales person in the evenings just to get to the point where I could pay myself to do it during the day, &#8230; I just couldn&#8217;t get myself over the hump to continue..</p>
<p>I still took away a lot from the experience and hopefully I can pass on some of the things I learned to help others chase their ideas.</p>
<h2>Meet LaunchReady, the MVP</h2>
<p>Meet <a href="https://www.launchready.co/">LaunchReady</a>, a UI Automation service designed to help fast growing SaaS companies build a broader safety net even while they&#8217;re focused on scaling and teach new team members how to add on to the software.</p>
<div id="attachment_8939" style="width: 610px" class="wp-caption aligncenter"><img src="/wp-content/uploads/2018/02/launchreadypost_00-1-600x372.png" alt="Marketing Site" width="600" height="372" class="size-medium-width wp-image-8939" srcset="/wp-content/uploads/2018/02/launchreadypost_00-1-600x372.png 600w, /wp-content/uploads/2018/02/launchreadypost_00-1-300x186.png 300w, /wp-content/uploads/2018/02/launchreadypost_00-1-768x476.png 768w, /wp-content/uploads/2018/02/launchreadypost_00-1-1024x635.png 1024w, /wp-content/uploads/2018/02/launchreadypost_00-1-484x300.png 484w, /wp-content/uploads/2018/02/launchreadypost_00-1.png 1214w" sizes="(max-width: 600px) 100vw, 600px" /><p class="wp-caption-text">A Marketing Site, with CTAs and a touch of exclusivity and FOMO</p></div>
<p>(Ignore screenshots with a space in the name, they&#8217;re stale <img src="https://s.w.org/images/core/emoji/2/72x72/1f642.png" alt="🙂" class="wp-smiley" style="height: 1em; max-height: 1em;" /> )</p>
<p>From May 2017 to October 2017, I logged 10-20 hours/week of spare time on building a company around this idea, from market studies and financial planning to documentation, company formation, and product development. </p>
<div id="attachment_8965" style="width: 610px" class="wp-caption aligncenter"><img src="/wp-content/uploads/2018/02/launchreadypost_01b-600x168.png" alt=" Test Runs View" width="600" height="168" class="size-medium-width wp-image-8965" srcset="/wp-content/uploads/2018/02/launchreadypost_01b-600x168.png 600w, /wp-content/uploads/2018/02/launchreadypost_01b-300x84.png 300w, /wp-content/uploads/2018/02/launchreadypost_01b-768x215.png 768w, /wp-content/uploads/2018/02/launchreadypost_01b-1024x287.png 1024w, /wp-content/uploads/2018/02/launchreadypost_01b-1072x300.png 1072w, /wp-content/uploads/2018/02/launchreadypost_01b.png 1218w" sizes="(max-width: 600px) 100vw, 600px" /><p class="wp-caption-text">Dynamic, Realtime Test Runs View</p></div>
<p>UI Automation testing is widely known to be fragile, complex, and time consuming. LaunchReady&#8217;s goal was to challenge all of these, for a narrow context, providing a service to support companies getting 80% of the value at no more than 5 minutes of additional delay on their build processes. </p>
<div id="attachment_8966" style="width: 610px" class="wp-caption aligncenter"><img src="/wp-content/uploads/2018/02/launchreadypost_01c-600x454.png" alt="User invitation email" width="600" height="454" class="size-medium-width wp-image-8966" srcset="/wp-content/uploads/2018/02/launchreadypost_01c-600x454.png 600w, /wp-content/uploads/2018/02/launchreadypost_01c-300x227.png 300w, /wp-content/uploads/2018/02/launchreadypost_01c-768x581.png 768w, /wp-content/uploads/2018/02/launchreadypost_01c-397x300.png 397w, /wp-content/uploads/2018/02/launchreadypost_01c.png 870w" sizes="(max-width: 600px) 100vw, 600px" /><p class="wp-caption-text">A polished user invitation email, for credibility</p></div>
<p>The eventual intent was to move these tests as close to the developer as possible, while continuing to run as parallel as the customer&#8217;s product would allow for their pipeline. It would provide near real-time feedback to developers when a change impacts known good behavior of the system, automatically produce screenshots for the public documentation when a related feature changes, and take advantage of machine learning, text analysis, image analysis, and more to provide features growing teams often don&#8217;t even realize they need yet.</p>
<div id="attachment_8942" style="width: 610px" class="wp-caption aligncenter"><img src="/wp-content/uploads/2018/02/launchreadypost_01-600x147.png" alt="Defining a User Scenario feature" width="600" height="147" class="size-medium-width wp-image-8942" srcset="/wp-content/uploads/2018/02/launchreadypost_01-600x147.png 600w, /wp-content/uploads/2018/02/launchreadypost_01-300x74.png 300w, /wp-content/uploads/2018/02/launchreadypost_01-768x189.png 768w, /wp-content/uploads/2018/02/launchreadypost_01-1024x252.png 1024w, /wp-content/uploads/2018/02/launchreadypost_01.png 1172w" sizes="(max-width: 600px) 100vw, 600px" /><p class="wp-caption-text">Carefully chosen &#8220;User Scenario&#8221; terminology, codeless definitions</p></div>
<p>This was the MVP. It&#8217;s on par with some existing UI automation services and a little behind others. The goal was to produce a professional looking system that could scale in the cloud to minimize the time to run tests, onboard folks quickly and use patterns to reduce fragility of the tests, and make APIs a first-class citizen to integrate with 3rd party build systems. These are hard, but doable, and unlocked even more possibilities.</p>
<h2>Steal These Ideas</h2>
<p>First things first. If you&#8217;re building a UI Automation service, verifying the customer&#8217;s tests run is the ground floor of what you can do. If you can successfully navigate through a customer&#8217;s website, there is so much more that becomes available. Some of these (like screenshot comparison) have been showing up in the market in the last few years, but those are just the beginning.</p>
<h3>1. Support documents are always out of date, but you can help fix that. </h3>
<p>Provide an action or step that customers can use in tests to take a screenshot with a defined name and cropped to a specific area. Publish an API endpoint to download the images with demonstrations of scripts to download screenshots and push them into places like Zendesk&#8217;s Support Center. Maybe even offer a diff list of the images that have changed so they know what page content in the documentation also needs to be updated.</p>
<p>I&#8217;ve seen this problem in multiple organizations as they&#8217;ve scaled and I think this could solve the hardest part (knowing when and which docs need to be updated).</p>
<h3>2. Warn when screens change unexpectedly</h3>
<p><em>Some products have this capability already, but I include it because the next items will take it to another level. </em></p>
<p>When a test passes, compare screenshots from steps along the way to corresponding screenshots from the last passing version of the test. Report warnings or errors if the screenshots differ by more than a known amount and a way for a customer to indicate that the change is expected.</p>
<h3>3. Warn when screens look different on different browsers</h3>
<p>Run tests across multiple browsers at the same resolution, for instance Firefox, Chrome, and IE or a specific iPhone and Android device and browser. Report errors or warnings if the screenshots at the same resolutions are materially different. Even better, offer this with warnings before the customer even asks for it and save the day before they get the first customer call and realize they need to perform exhaustive cross-device testing somehow.</p>
<h3>4. Automate color and contrast WCAG accessibility tests</h3>
<p>Post-process screenshots to different color sets to simulate forms of color blindness, run a line detection algorithm across the original image and the post-processed images. Now diff the images and throw up warnings or errors if there are significant differences between the two.</p>
<h3>5. Spellchecking</h3>
<p>Scrape the visible text from the screen and run a spell checker, including a set of custom works the customer has flagged as ok. </p>
<h3>6. Verify the language against it&#8217;s business domain</h3>
<p>Scrape the visible text from the screen and use text analysis against a corpus of documents for the domain and warn or error on wording the in the application that is unrecognized or unusual for the business domain.</p>
<h3>7. Readability of the application</h3>
<p>Scrape the visible text and run it through analysis to check the readability/grade level of the content. Warn or error if it&#8217;s outside expected levels.</p>
<h3>8. Suggest improved wording for the given business domain</h3>
<p>Find phrases that are unusual for the domain (6) or don&#8217;t meet the readability expectations (7) and use text generation algorithms and a corpus of documents from the business domain to produce suggestions for improved wording.</p>
<h3>9. Run tests by reading their support documents with machine learning services</h3>
<p>Combining the ideas of <a href="http://fitnesse.org/" title="fitnesse: acceptance tests and wiki in one tool">FitNesse</a> with the rise of cheaper tools for text analysis (like <a href="https://azure.microsoft.com/en-us/services/cognitive-services/language-understanding-intelligent-service/" title="LUIS: Language Understanding Intelligence Service">Azure LUIS</a>), provide some general structures to the customer for writing support articles that walk through using the application, run these through a text analysis service to extract the intents as test steps, and run them as tests on every deploy. For extra points, note where screenshots are and produce updated ones automatically (per #1).</p>
<h3>9.5 Combine your test framework with #6 and #8 and suggest improvements to their help docs</h3>
<p>If you can scrape content from a defined test path and evaluate it against a known business domain&#8217;s common word choices and then generate improved text to a given grade level of readability for that business domain, you have a whole new product in your hands to help people write better quality help documents faster. Send me a percentage when you make it big <img src="https://s.w.org/images/core/emoji/2/72x72/1f642.png" alt="🙂" class="wp-smiley" style="height: 1em; max-height: 1em;" /></p>
<h3>10. Run locally for fast developer feedback</h3>
<p>Provide a test runner that uses the cloud test definitions to run locally on the developers system, with a small configuration file for inputs for base URL and other necessary values. Provide the ability to run subsets of the test for faster feedback. Add filewatchers to automatically run them behind the scenes (as an option). Fast , immediate feedback is the goal.</p>
<h3>11. Automatically upgrade tests to match incoming developer changes</h3>
<p>Once developers can run locally, they&#8217;ll see what tests break on purposes due to their changes and need to be updated. Allow them to create a new versions of the test or page definitions and save them to the central service. When running tests against the staging environment, run the officially blessed version for the trunk and, if it fails, attempt to run outstanding draft versions and promote them to the blessed version if they pass, automatically incorporating the developer test changes in when their code changes appear.</p>
<h3>12. Display customer impact on tests</h3>
<p>Integrate with popular customer experience and page tracking systems so you can correlate the steps in the tests with the number and frequency of end users that use the live system. Provide warnings when changes have been made to areas of the application that receive a huge amount of traffic or are touched extremely rarely to reflect risk.</p>
<h3>13. Screen complexity</h3>
<p>Calculate screen complexity metrics for usability and provide warnings or errors when over certain limits.</p>
<h3>14. Workflow Complexity</h3>
<p>Calculate workflow complexity metrics for usability as the tests walk through work flows in the application and warn or error when over certain limits.</p>
<h3>15. &#8220;Your site just got way slower!&#8221;</h3>
<p>Capture timing for each test and test step over time and use anomaly detection and other forms of analysis to warn when a page has suddenly gotten much slower, when it has gotten significantly slower bit by bit over a long period of time, or when there is a lot of variability in it&#8217;s timing.</p>
<h2>Wrapping up</h2>
<p>Some of these ideas are things I wanted to pay someone for years ago that didn&#8217;t exist. Others are common, recurring problems I&#8217;ve experienced in growing organizations. I can go deeper on any of them, so if you&#8217;re interested and building some into your product feel free to send me a note if you want an external sounding board (or prospect, for that matter).</p>
<p>Next in the series: <a href="/index.php/uncategorized/launchready-focus-on-the-customer/">LaunchReady: Focus on the Customer</a></p>
]]></content>
			<link rel="replies" type="text/html" href="/index.php/uncategorized/meet-launchready-a-saas-product-that-almost-was/#comments" thr:count="2"/>
		<link rel="replies" type="application/atom+xml" href="/index.php/uncategorized/meet-launchready-a-saas-product-that-almost-was/feed/atom/" thr:count="2"/>
		<thr:total>2</thr:total>
		</entry>
		<entry>
		<author>
			<name>damber</name>
					</author>
		<title type="html"><![CDATA[The State of Software Engineering Report 2017]]></title>
		<link rel="alternate" type="text/html" href="/index.php/uncategorized/the-state-of-software-engineering-report-2017/" />
		<id>/?p=8849</id>
		<updated>2017-12-29T21:18:21Z</updated>
		<published>2017-12-17T14:13:36Z</published>
		<category scheme="/" term="Uncategorized" />		<summary type="html"><![CDATA[“It’s not just about software — the Enterprise is the System” The “Mastering Digital: Software Engineering Report” (2017) provides analysis of detailed feedback from Architects and Engineers about their work on software projects for organisations of all types and sizes. The report looks at the following: Demographics of the respondents (Company Types, Team Size, Project Spend, Role Types, etc) Performance of current [&#8230;]]]></summary>
		<content type="html" xml:base="/index.php/uncategorized/the-state-of-software-engineering-report-2017/"><![CDATA[<p>“It’s not just about software — the <strong class="markup--strong markup--pullquote-strong">Enterprise</strong> is <strong class="markup--strong markup--pullquote-strong"><em class="markup--em markup--pullquote-em">the System”</em></strong></p>
<p id="595b" class="graf graf--p graf-after--pullquote">The “<em class="markup--em markup--p-em">Mastering Digital: Software Engineering Report</em>” (2017) provides analysis of detailed feedback from Architects and Engineers about their work on software projects for organisations of all types and sizes.</p>
<figure id="8b38" class="graf graf--figure graf-after--p">
<div class="aspectRatioPlaceholder is-locked">
<div class="aspectRatioPlaceholder-fill"></div>
<div class="progressiveMedia js-progressiveMedia graf-image is-canvasLoaded is-imageLoaded"><img class="progressiveMedia-image js-progressiveMedia-image" src="https://cdn-images-1.medium.com/max/1600/1*Geyw5BNUk1se5wL6Knl84A.png" /></div>
</div>
</figure>
<p id="785a" class="graf graf--p graf-after--figure">The report looks at the following:</p>
<ul class="postList">
<li id="f0e2" class="graf graf--li graf-after--p"><strong class="markup--strong markup--li-strong">Demographics of the respondents</strong> <em class="markup--em markup--li-em">(Company Types, Team Size, Project Spend, Role Types, etc)</em></li>
<li id="5acb" class="graf graf--li graf-after--li"><strong class="markup--strong markup--li-strong">Performance of current software engineering capabilities &amp; outcomes</strong></li>
<li id="c85e" class="graf graf--li graf-after--li"><strong class="markup--strong markup--li-strong">The challenges &amp; opportunities with the technology we use</strong> <em class="markup--em markup--li-em">(Including: Server Side, Front End, Database and DevOps &amp; SysOps Technologies)</em></li>
<li id="4af6" class="graf graf--li graf-after--li"><strong class="markup--strong markup--li-strong">The challenges &amp; opportunities with the delivery of software projects</strong><em class="markup--em markup--li-em">(Including: Technology &amp; Design, Organisation &amp; Behaviour, Knowledge &amp; Skills, Requirements &amp; Planning)</em></li>
<li id="ba13" class="graf graf--li graf-after--li"><strong class="markup--strong markup--li-strong">A summary of the key pain points and root causes</strong></li>
<li id="31ae" class="graf graf--li graf-after--li"><strong class="markup--strong markup--li-strong">Some key takeaways</strong></li>
</ul>
<p>Find out more here&#8230;</p>
<p><a href="https://blog.enterprisecore.io/the-state-of-software-engineering-report-2017-40682d14a6b3">EnterpriseCore.io: The State of Software Engineering Report, 2017</a></p>
]]></content>
			<link rel="replies" type="text/html" href="/index.php/uncategorized/the-state-of-software-engineering-report-2017/#comments" thr:count="0"/>
		<link rel="replies" type="application/atom+xml" href="/index.php/uncategorized/the-state-of-software-engineering-report-2017/feed/atom/" thr:count="0"/>
		<thr:total>0</thr:total>
		</entry>
		<entry>
		<author>
			<name>Christiaan Baes (chrissie1)</name>
					</author>
		<title type="html"><![CDATA[Testing your resx files to see if all languages have the same items.]]></title>
		<link rel="alternate" type="text/html" href="/index.php/uncategorized/testing-your-resx-files-to-see-if-all-languages-have-the-same-items/" />
		<id>/?p=8800</id>
		<updated>2017-09-08T05:50:27Z</updated>
		<published>2017-09-07T12:48:58Z</published>
		<category scheme="/" term="Uncategorized" />		<summary type="html"><![CDATA[It&#8217;s one of those things you need to when writing multilingual applications. Create resource file (resx) for each language you want to support. And then you add an item and forget to add it to one of language files and then, oops empty label. We don&#8217;t want that. And we write tests, so why not [&#8230;]]]></summary>
		<content type="html" xml:base="/index.php/uncategorized/testing-your-resx-files-to-see-if-all-languages-have-the-same-items/"><![CDATA[<p>It&#8217;s one of those things you need to when writing multilingual applications. Create resource file (resx) for each language you want to support. And then you add an item and forget to add it to one of language files and then, oops empty label. </p>
<p>We don&#8217;t want that. </p>
<p>And we write tests, so why not write a test for that. </p>
<p>And on <a href="https://stackoverflow.com/a/41760659">Stackoverflow</a> the user <a href="https://stackoverflow.com/users/3733965/tiltonjh">TiltonJH</a> was so kind to provide me with the answer. </p>
<p>I translated it to VB.Net code and changed a small thing (the resourcemanager didn&#8217;t find the resourcesets but the resourcemaager from the type did, so I pass that in. </p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="vbnet"><thead><tr><td colspan="2"  class="head">vb.net</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72
73
74
75
76
77
78
79
80
81
82
83
84
85
86
87
88
89
90
91
92
93
94
95
96
97
98
99
100
101
102
103
104
105
106
107
108
109
110
111
112
113
114
115
116
117
118
119
120
121
122
123
124
125
126
127
128
129
130
131
132
133
134
135
136
137
138
139
140
141
142
143
144
145
146
147
148
149
150
151
152
153
154
155
156
157
158
159
160
161
162
163
164
165
166
167
168
169
170
171
172
173
174
175
176
</pre></td><td class="de1"><pre class="de1"><span class="kw1">Imports</span> System<span class="sy0">.</span><span class="me1">Globalization</span>
<span class="kw1">Imports</span> System<span class="sy0">.</span><span class="me1">Reflection</span>
<span class="kw1">Imports</span> System<span class="sy0">.</span><span class="me1">Resources</span>
<span class="kw1">Imports</span> System<span class="sy0">.</span><span class="me1">Text</span>
<span class="kw1">Imports</span> Nancy<span class="sy0">.</span><span class="me1">Testing</span>
&nbsp;
<span class="kw1">Namespace</span> Resources
&nbsp;
&nbsp; &nbsp; <span class="kw1">Public</span> <span class="kw1">Class</span> ResourceTester
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">Public</span> <span class="kw1">Shared</span> <span class="kw1">Sub</span> TestResxForInconsistencies<span class="br0">&#40;</span>type <span class="kw1">As</span> Type, resourceManager <span class="kw1">As</span> ResourceManager<span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">If</span> type <span class="kw1">Is</span> <span class="kw1">Nothing</span> <span class="kw1">Then</span> <span class="kw1">Throw</span> <span class="kw1">New</span> ArgumentNullException<span class="br0">&#40;</span>NameOf<span class="br0">&#40;</span>type<span class="br0">&#41;</span><span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">Dim</span> cultureResourceDictionaries <span class="sy0">=</span> GetResxDictionaries<span class="br0">&#40;</span>type, resourceManager<span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">Dim</span> emptyEntries <span class="sy0">=</span> GetEmpty<span class="br0">&#40;</span>cultureResourceDictionaries<span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">Dim</span> neutralLanguage <span class="sy0">=</span> ExtractNeutralLanguage<span class="br0">&#40;</span>cultureResourceDictionaries, type<span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">Dim</span> missingEntries <span class="sy0">=</span> GetMissing<span class="br0">&#40;</span>cultureResourceDictionaries, neutralLanguage<span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">Dim</span> dispensableEntries <span class="sy0">=</span> GetDispensable<span class="br0">&#40;</span>cultureResourceDictionaries, neutralLanguage<span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">If</span> <span class="br0">&#40;</span>emptyEntries<span class="sy0">.</span><span class="me1">Count</span> <span class="sy0">&gt;</span> <span class="nu0">0</span> <span class="kw1">OrElse</span> missingEntries<span class="sy0">.</span><span class="me1">Count</span> <span class="sy0">&gt;</span> <span class="nu0">0</span> <span class="kw1">OrElse</span> dispensableEntries<span class="sy0">.</span><span class="me1">Count</span> <span class="sy0">&gt;</span> <span class="nu0">0</span><span class="br0">&#41;</span> <span class="kw1">Then</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">Dim</span> message <span class="sy0">=</span> <span class="kw1">New</span> StringBuilder<span class="br0">&#40;</span><span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; message<span class="sy0">.</span><span class="me1">AppendFormat</span><span class="br0">&#40;</span><span class="st0">&quot;Found resx errors in &quot;</span><span class="st0">&quot;{0}&quot;</span><span class="st0">&quot;:&quot;</span>, type<span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; message<span class="sy0">.</span><span class="me1">AppendLine</span><span class="br0">&#40;</span><span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; message<span class="sy0">.</span><span class="me1">AppendLine</span><span class="br0">&#40;</span><span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Append<span class="br0">&#40;</span>message, emptyEntries, <span class="st0">&quot; Empty Entries &quot;</span>, <span class="st0">&quot;Entries which do not have a value.&quot;</span><span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Append<span class="br0">&#40;</span>message, missingEntries, <span class="st0">&quot; Missing Entries &quot;</span>, <span class="st0">&quot;Entries which are specified in the neutral language but are missing in the specified language.&quot;</span><span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Append<span class="br0">&#40;</span>message, dispensableEntries, <span class="st0">&quot; Dispensable Entries &quot;</span>, <span class="st0">&quot;Entries which are not specified in the neutral language but are present in the specified language and should be removed.&quot;</span><span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">Throw</span> <span class="kw1">New</span> Nunit<span class="sy0">.</span><span class="me1">Framework</span><span class="sy0">.</span><span class="me1">AssertionException</span><span class="br0">&#40;</span>message<span class="sy0">.</span><span class="me1">ToString</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">End</span> <span class="kw1">If</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">End</span> <span class="kw1">Sub</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">Private</span> <span class="kw1">Shared</span> <span class="kw1">Sub</span> Append<span class="br0">&#40;</span>message <span class="kw1">As</span> StringBuilder, entries <span class="kw1">As</span> Dictionary<span class="br0">&#40;</span><span class="kw1">Of</span> <span class="kw2">String</span>, List<span class="br0">&#40;</span><span class="kw1">Of</span> <span class="kw2">String</span><span class="br0">&#41;</span><span class="br0">&#41;</span>, headline <span class="kw1">As</span> <span class="kw2">String</span>, description <span class="kw1">As</span> <span class="kw2">String</span><span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">If</span> entries<span class="sy0">.</span><span class="me1">Count</span> <span class="sy0">&gt;</span> <span class="nu0">0</span> <span class="kw1">Then</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; message<span class="sy0">.</span><span class="me1">AppendLine</span><span class="br0">&#40;</span>headline<span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; message<span class="sy0">.</span><span class="me1">AppendLine</span><span class="br0">&#40;</span><span class="kw1">New</span> <span class="kw2">String</span><span class="br0">&#40;</span><span class="st0">&quot;=&quot;</span>, headline<span class="sy0">.</span><span class="me1">Length</span><span class="br0">&#41;</span><span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; message<span class="sy0">.</span><span class="me1">Append</span><span class="br0">&#40;</span><span class="st0">&quot;(&quot;</span><span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; message<span class="sy0">.</span><span class="me1">Append</span><span class="br0">&#40;</span>description<span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; message<span class="sy0">.</span><span class="me1">AppendLine</span><span class="br0">&#40;</span><span class="st0">&quot;)&quot;</span><span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">For</span> <span class="kw1">Each</span> pair <span class="kw1">In</span> entries
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">Dim</span> languageName <span class="sy0">=</span> pair<span class="sy0">.</span><span class="me1">Key</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">If</span> <span class="kw2">String</span><span class="sy0">.</span><span class="me1">IsNullOrEmpty</span><span class="br0">&#40;</span>languageName<span class="br0">&#41;</span> <span class="kw1">Then</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; languageName <span class="sy0">=</span> <span class="st0">&quot;&lt;neutral language&gt;&quot;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">End</span> <span class="kw1">If</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">Dim</span> line <span class="sy0">=</span> <span class="kw2">String</span><span class="sy0">.</span><span class="kw7">Format</span><span class="br0">&#40;</span><span class="st0">&quot; &nbsp;Language: {0} &nbsp;&quot;</span>, languageName<span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; message<span class="sy0">.</span><span class="me1">AppendLine</span><span class="br0">&#40;</span>line<span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; message<span class="sy0">.</span><span class="me1">AppendLine</span><span class="br0">&#40;</span><span class="kw1">New</span> <span class="kw2">String</span><span class="br0">&#40;</span><span class="st0">&quot;-&quot;</span>, line<span class="sy0">.</span><span class="me1">Length</span><span class="br0">&#41;</span><span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">For</span> <span class="kw1">Each</span> key <span class="kw1">In</span> pair<span class="sy0">.</span><span class="me1">Value</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; message<span class="sy0">.</span><span class="me1">Append</span><span class="br0">&#40;</span><span class="st0">&quot;\t&quot;</span><span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; message<span class="sy0">.</span><span class="me1">AppendLine</span><span class="br0">&#40;</span>key<span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">Next</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">Next</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; message<span class="sy0">.</span><span class="me1">AppendLine</span><span class="br0">&#40;</span><span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">End</span> <span class="kw1">If</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">End</span> <span class="kw1">Sub</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">Private</span> <span class="kw1">Shared</span> <span class="kw1">Function</span> ExtractNeutralLanguage<span class="br0">&#40;</span>resxs <span class="kw1">As</span> Dictionary<span class="br0">&#40;</span><span class="kw1">Of</span> <span class="kw2">String</span>, Dictionary<span class="br0">&#40;</span><span class="kw1">Of</span> <span class="kw2">String</span>, <span class="kw2">Object</span><span class="br0">&#41;</span><span class="br0">&#41;</span>, type <span class="kw1">As</span> Type<span class="br0">&#41;</span> <span class="kw1">As</span> Dictionary<span class="br0">&#40;</span><span class="kw1">Of</span> <span class="kw2">String</span>, <span class="kw2">Object</span><span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">Dim</span> neutralLanguage <span class="sy0">=</span> <span class="kw1">New</span> Dictionary<span class="br0">&#40;</span><span class="kw1">Of</span> <span class="kw2">String</span>, <span class="kw2">Object</span><span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">If</span> <span class="kw1">Not</span> resxs<span class="sy0">.</span><span class="me1">TryGetValue</span><span class="br0">&#40;</span><span class="kw2">String</span><span class="sy0">.</span><span class="me1">Empty</span>, neutralLanguage<span class="br0">&#41;</span> <span class="kw1">Then</span> <span class="kw1">Throw</span> <span class="kw1">New</span> AssertException<span class="br0">&#40;</span><span class="kw2">String</span><span class="sy0">.</span><span class="kw7">Format</span><span class="br0">&#40;</span><span class="st0">&quot;The neutral language is not specified in &quot;</span><span class="st0">&quot;{0}&quot;</span><span class="st0">&quot;.&quot;</span>, type<span class="br0">&#41;</span><span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; resxs<span class="sy0">.</span><span class="me1">Remove</span><span class="br0">&#40;</span><span class="kw2">String</span><span class="sy0">.</span><span class="me1">Empty</span><span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">Return</span> neutralLanguage
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">End</span> <span class="kw1">Function</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">Private</span> <span class="kw1">Shared</span> <span class="kw1">Function</span> GetAvailableResxCultureInfos<span class="br0">&#40;</span>assembly <span class="kw1">As</span> Assembly<span class="br0">&#41;</span> <span class="kw1">As</span> CultureInfo<span class="br0">&#40;</span><span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">Dim</span> assemblyResxCultures <span class="sy0">=</span> <span class="kw1">New</span> HashSet<span class="br0">&#40;</span><span class="kw1">Of</span> CultureInfo<span class="br0">&#41;</span><span class="br0">&#40;</span><span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; assemblyResxCultures<span class="sy0">.</span><span class="me1">Add</span><span class="br0">&#40;</span>CultureInfo<span class="sy0">.</span><span class="me1">InvariantCulture</span><span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">Dim</span> names <span class="sy0">=</span> assembly<span class="sy0">.</span><span class="me1">GetManifestResourceNames</span><span class="br0">&#40;</span><span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">If</span> names <span class="kw1">IsNot</span> <span class="kw1">Nothing</span> <span class="kw1">AndAlso</span> names<span class="sy0">.</span><span class="me1">Length</span> <span class="sy0">&gt;</span> <span class="nu0">0</span> <span class="kw1">Then</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">Dim</span> allCultures <span class="sy0">=</span> CultureInfo<span class="sy0">.</span><span class="me1">GetCultures</span><span class="br0">&#40;</span>CultureTypes<span class="sy0">.</span><span class="me1">AllCultures</span><span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">Const</span> resourcesEnding <span class="kw1">As</span> <span class="kw2">String</span> <span class="sy0">=</span> <span class="st0">&quot;.resources&quot;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">For</span> i <span class="sy0">=</span> <span class="nu0">0</span> <span class="kw1">To</span> names<span class="sy0">.</span><span class="me1">Length</span> <span class="sy0">-</span> <span class="nu0">1</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">Dim</span> name <span class="sy0">=</span> names<span class="br0">&#40;</span>i<span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">If</span> <span class="kw2">String</span><span class="sy0">.</span><span class="me1">IsNullOrWhiteSpace</span><span class="br0">&#40;</span>name<span class="br0">&#41;</span> <span class="kw1">OrElse</span> name<span class="sy0">.</span><span class="me1">Length</span> <span class="sy0">&lt;=</span> resourcesEnding<span class="sy0">.</span><span class="me1">Length</span> <span class="kw1">OrElse</span> <span class="kw1">Not</span> name<span class="sy0">.</span><span class="me1">EndsWith</span><span class="br0">&#40;</span>resourcesEnding, StringComparison<span class="sy0">.</span><span class="me1">InvariantCultureIgnoreCase</span><span class="br0">&#41;</span> <span class="kw1">Then</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">Continue</span> <span class="kw1">For</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">End</span> <span class="kw1">If</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; name <span class="sy0">=</span> name<span class="sy0">.</span><span class="me1">Remove</span><span class="br0">&#40;</span>name<span class="sy0">.</span><span class="me1">Length</span> <span class="sy0">-</span> resourcesEnding<span class="sy0">.</span><span class="me1">Length</span>, resourcesEnding<span class="sy0">.</span><span class="me1">Length</span><span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">If</span> <span class="br0">&#40;</span><span class="kw2">String</span><span class="sy0">.</span><span class="me1">IsNullOrWhiteSpace</span><span class="br0">&#40;</span>name<span class="br0">&#41;</span><span class="br0">&#41;</span> <span class="kw1">Then</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">Continue</span> <span class="kw1">For</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">End</span> <span class="kw1">If</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">Dim</span> resourceManager <span class="sy0">=</span> <span class="kw1">New</span> ResourceManager<span class="br0">&#40;</span>name, assembly<span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">For</span> j <span class="sy0">=</span> <span class="nu0">0</span> <span class="kw1">To</span> allCultures<span class="sy0">.</span><span class="me1">Length</span> <span class="sy0">-</span> <span class="nu0">1</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">Dim</span> culture <span class="sy0">=</span> allCultures<span class="br0">&#40;</span>j<span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">Try</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">If</span> <span class="br0">&#40;</span>culture<span class="sy0">.</span><span class="me1">Equals</span><span class="br0">&#40;</span>CultureInfo<span class="sy0">.</span><span class="me1">InvariantCulture</span><span class="br0">&#41;</span><span class="br0">&#41;</span> <span class="kw1">Then</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">Continue</span> <span class="kw1">For</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">End</span> <span class="kw1">If</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">Using</span> resourceSet <span class="sy0">=</span> resourceManager<span class="sy0">.</span><span class="me1">GetResourceSet</span><span class="br0">&#40;</span>culture, <span class="kw1">True</span>, <span class="kw1">False</span><span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">If</span> <span class="br0">&#40;</span>resourceSet <span class="kw1">IsNot</span> <span class="kw1">Nothing</span><span class="br0">&#41;</span> <span class="kw1">Then</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; assemblyResxCultures<span class="sy0">.</span><span class="me1">Add</span><span class="br0">&#40;</span>culture<span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">End</span> <span class="kw1">If</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">End</span> <span class="kw1">Using</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">Catch</span> ex <span class="kw1">As</span> CultureNotFoundException
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">End</span> <span class="kw1">Try</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">Next</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">Next</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">End</span> <span class="kw1">If</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">Return</span> assemblyResxCultures<span class="sy0">.</span><span class="me1">ToArray</span><span class="br0">&#40;</span><span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">End</span> <span class="kw1">Function</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">Private</span> <span class="kw1">Shared</span> <span class="kw1">Function</span> GetResxDictionaries<span class="br0">&#40;</span>type <span class="kw1">As</span> Type, resourceManager <span class="kw1">As</span> resourceManager<span class="br0">&#41;</span> <span class="kw1">As</span> Dictionary<span class="br0">&#40;</span><span class="kw1">Of</span> <span class="kw2">String</span>, Dictionary<span class="br0">&#40;</span><span class="kw1">Of</span> <span class="kw2">String</span>, <span class="kw2">Object</span><span class="br0">&#41;</span><span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">Dim</span> availableResxsCultureInfos <span class="sy0">=</span> GetAvailableResxCultureInfos<span class="br0">&#40;</span>type<span class="sy0">.</span><span class="me1">Assembly</span><span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">Dim</span> resxDictionaries <span class="sy0">=</span> <span class="kw1">New</span> Dictionary<span class="br0">&#40;</span><span class="kw1">Of</span> <span class="kw2">String</span>, Dictionary<span class="br0">&#40;</span><span class="kw1">Of</span> <span class="kw2">String</span>, <span class="kw2">Object</span><span class="br0">&#41;</span><span class="br0">&#41;</span><span class="br0">&#40;</span><span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">For</span> i <span class="sy0">=</span> <span class="nu0">0</span> <span class="kw1">To</span> availableResxsCultureInfos<span class="sy0">.</span><span class="me1">Length</span> <span class="sy0">-</span> <span class="nu0">1</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">Dim</span> cultureInfo <span class="sy0">=</span> availableResxsCultureInfos<span class="br0">&#40;</span>i<span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">Try</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">Dim</span> resourceSet <span class="sy0">=</span> resourceManager<span class="sy0">.</span><span class="me1">GetResourceSet</span><span class="br0">&#40;</span>cultureInfo, <span class="kw1">True</span>, <span class="kw1">True</span><span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">If</span> resourceSet <span class="kw1">IsNot</span> <span class="kw1">Nothing</span> <span class="kw1">Then</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">Dim</span> dict <span class="sy0">=</span> <span class="kw1">New</span> Dictionary<span class="br0">&#40;</span><span class="kw1">Of</span> <span class="kw2">String</span>, <span class="kw2">Object</span><span class="br0">&#41;</span><span class="br0">&#40;</span><span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">For</span> <span class="kw1">Each</span> item <span class="kw1">In</span> resourceSet
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">Dim</span> key <span class="sy0">=</span> item<span class="sy0">.</span><span class="me1">Key</span><span class="sy0">.</span><span class="me1">ToString</span><span class="br0">&#40;</span><span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">Dim</span> value <span class="sy0">=</span> item<span class="sy0">.</span><span class="me1">Value</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; dict<span class="sy0">.</span><span class="me1">Add</span><span class="br0">&#40;</span>key, value<span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">Next</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; resxDictionaries<span class="sy0">.</span><span class="me1">Add</span><span class="br0">&#40;</span>cultureInfo<span class="sy0">.</span><span class="me1">Name</span>, dict<span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">End</span> <span class="kw1">If</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">Catch</span> ex <span class="kw1">As</span> Exception
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">End</span> <span class="kw1">Try</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">Next</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">Return</span> resxDictionaries
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">End</span> <span class="kw1">Function</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">Private</span> <span class="kw1">Shared</span> <span class="kw1">Function</span> GetDispensable<span class="br0">&#40;</span>resxDictionaries <span class="kw1">As</span> Dictionary<span class="br0">&#40;</span><span class="kw1">Of</span> <span class="kw2">String</span>, Dictionary<span class="br0">&#40;</span><span class="kw1">Of</span> <span class="kw2">String</span>, <span class="kw2">Object</span><span class="br0">&#41;</span><span class="br0">&#41;</span>, neutralLanguage <span class="kw1">As</span> Dictionary<span class="br0">&#40;</span><span class="kw1">Of</span> <span class="kw2">String</span>, <span class="kw2">Object</span><span class="br0">&#41;</span><span class="br0">&#41;</span> <span class="kw1">As</span> Dictionary<span class="br0">&#40;</span><span class="kw1">Of</span> <span class="kw2">String</span>, List<span class="br0">&#40;</span><span class="kw1">Of</span> <span class="kw2">String</span><span class="br0">&#41;</span><span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">Dim</span> dispensable <span class="sy0">=</span> <span class="kw1">New</span> Dictionary<span class="br0">&#40;</span><span class="kw1">Of</span> <span class="kw2">String</span>, List<span class="br0">&#40;</span><span class="kw1">Of</span> <span class="kw2">String</span><span class="br0">&#41;</span><span class="br0">&#41;</span><span class="br0">&#40;</span><span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">For</span> <span class="kw1">Each</span> pair <span class="kw1">In</span> resxDictionaries
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">Dim</span> resxs <span class="sy0">=</span> pair<span class="sy0">.</span><span class="me1">Value</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">Dim</span> list <span class="sy0">=</span> <span class="kw1">New</span> List<span class="br0">&#40;</span><span class="kw1">Of</span> <span class="kw2">String</span><span class="br0">&#41;</span><span class="br0">&#40;</span><span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">For</span> <span class="kw1">Each</span> key <span class="kw1">In</span> resxs<span class="sy0">.</span><span class="me1">Keys</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">If</span> <span class="kw1">Not</span> neutralLanguage<span class="sy0">.</span><span class="me1">ContainsKey</span><span class="br0">&#40;</span>key<span class="br0">&#41;</span> <span class="kw1">Then</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; list<span class="sy0">.</span><span class="me1">Add</span><span class="br0">&#40;</span>key<span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">End</span> <span class="kw1">If</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">Next</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">If</span> <span class="br0">&#40;</span>list<span class="sy0">.</span><span class="me1">Count</span> <span class="sy0">&gt;</span> <span class="nu0">0</span><span class="br0">&#41;</span> <span class="kw1">Then</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; dispensable<span class="sy0">.</span><span class="me1">Add</span><span class="br0">&#40;</span>pair<span class="sy0">.</span><span class="me1">Key</span>, list<span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">End</span> <span class="kw1">If</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">Next</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">Return</span> dispensable
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">End</span> <span class="kw1">Function</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">Private</span> <span class="kw1">Shared</span> <span class="kw1">Function</span> GetEmpty<span class="br0">&#40;</span>resxDictionaries <span class="kw1">As</span> Dictionary<span class="br0">&#40;</span><span class="kw1">Of</span> <span class="kw2">String</span>, Dictionary<span class="br0">&#40;</span><span class="kw1">Of</span> <span class="kw2">String</span>, <span class="kw2">Object</span><span class="br0">&#41;</span><span class="br0">&#41;</span><span class="br0">&#41;</span> <span class="kw1">As</span> Dictionary<span class="br0">&#40;</span><span class="kw1">Of</span> <span class="kw2">String</span>, List<span class="br0">&#40;</span><span class="kw1">Of</span> <span class="kw2">String</span><span class="br0">&#41;</span><span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">Dim</span> empty <span class="sy0">=</span> <span class="kw1">New</span> Dictionary<span class="br0">&#40;</span><span class="kw1">Of</span> <span class="kw2">String</span>, List<span class="br0">&#40;</span><span class="kw1">Of</span> <span class="kw2">String</span><span class="br0">&#41;</span><span class="br0">&#41;</span><span class="br0">&#40;</span><span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">For</span> <span class="kw1">Each</span> pair <span class="kw1">In</span> resxDictionaries
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">Dim</span> resxs <span class="sy0">=</span> pair<span class="sy0">.</span><span class="me1">Value</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">Dim</span> list <span class="sy0">=</span> <span class="kw1">New</span> List<span class="br0">&#40;</span><span class="kw1">Of</span> <span class="kw2">String</span><span class="br0">&#41;</span><span class="br0">&#40;</span><span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">For</span> <span class="kw1">Each</span> entrie <span class="kw1">In</span> resxs
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">If</span> entrie<span class="sy0">.</span><span class="me1">Value</span> <span class="kw1">Is</span> <span class="kw1">Nothing</span> <span class="kw1">Then</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; list<span class="sy0">.</span><span class="me1">Add</span><span class="br0">&#40;</span>entrie<span class="sy0">.</span><span class="me1">Key</span><span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">End</span> <span class="kw1">If</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">Dim</span> stringValue <span class="sy0">=</span> entrie<span class="sy0">.</span><span class="me1">Value</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">If</span> <span class="br0">&#40;</span><span class="kw2">String</span><span class="sy0">.</span><span class="me1">IsNullOrWhiteSpace</span><span class="br0">&#40;</span>stringValue<span class="br0">&#41;</span><span class="br0">&#41;</span> <span class="kw1">Then</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; list<span class="sy0">.</span><span class="me1">Add</span><span class="br0">&#40;</span>entrie<span class="sy0">.</span><span class="me1">Key</span><span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">End</span> <span class="kw1">If</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">Next</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">If</span> <span class="br0">&#40;</span>list<span class="sy0">.</span><span class="me1">Count</span> <span class="sy0">&gt;</span> <span class="nu0">0</span><span class="br0">&#41;</span> <span class="kw1">Then</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; empty<span class="sy0">.</span><span class="me1">Add</span><span class="br0">&#40;</span>pair<span class="sy0">.</span><span class="me1">Key</span>, list<span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">End</span> <span class="kw1">If</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">Next</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">Return</span> empty
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">End</span> <span class="kw1">Function</span>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">Private</span> <span class="kw1">Shared</span> <span class="kw1">Function</span> GetMissing<span class="br0">&#40;</span>resxDictionaries <span class="kw1">As</span> Dictionary<span class="br0">&#40;</span><span class="kw1">Of</span> <span class="kw2">String</span>, Dictionary<span class="br0">&#40;</span><span class="kw1">Of</span> <span class="kw2">String</span>, <span class="kw2">Object</span><span class="br0">&#41;</span><span class="br0">&#41;</span>, neutralLanguage <span class="kw1">As</span> Dictionary<span class="br0">&#40;</span><span class="kw1">Of</span> <span class="kw2">String</span>, <span class="kw2">Object</span><span class="br0">&#41;</span><span class="br0">&#41;</span> <span class="kw1">As</span> Dictionary<span class="br0">&#40;</span><span class="kw1">Of</span> <span class="kw2">String</span>, List<span class="br0">&#40;</span><span class="kw1">Of</span> <span class="kw2">String</span><span class="br0">&#41;</span><span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">Dim</span> missing <span class="sy0">=</span> <span class="kw1">New</span> Dictionary<span class="br0">&#40;</span><span class="kw1">Of</span> <span class="kw2">String</span>, List<span class="br0">&#40;</span><span class="kw1">Of</span> <span class="kw2">String</span><span class="br0">&#41;</span><span class="br0">&#41;</span><span class="br0">&#40;</span><span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">For</span> <span class="kw1">Each</span> pair <span class="kw1">In</span> resxDictionaries
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">Dim</span> resxs <span class="sy0">=</span> pair<span class="sy0">.</span><span class="me1">Value</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">Dim</span> list <span class="sy0">=</span> <span class="kw1">New</span> List<span class="br0">&#40;</span><span class="kw1">Of</span> <span class="kw2">String</span><span class="br0">&#41;</span><span class="br0">&#40;</span><span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">For</span> <span class="kw1">Each</span> key <span class="kw1">In</span> neutralLanguage<span class="sy0">.</span><span class="me1">Keys</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">If</span> <span class="kw1">Not</span> resxs<span class="sy0">.</span><span class="me1">ContainsKey</span><span class="br0">&#40;</span>key<span class="br0">&#41;</span> <span class="kw1">Then</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; list<span class="sy0">.</span><span class="me1">Add</span><span class="br0">&#40;</span>key<span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">End</span> <span class="kw1">If</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">Next</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">If</span> list<span class="sy0">.</span><span class="me1">Count</span> <span class="sy0">&gt;</span> <span class="nu0">0</span> <span class="kw1">Then</span> missing<span class="sy0">.</span><span class="me1">Add</span><span class="br0">&#40;</span>pair<span class="sy0">.</span><span class="me1">Key</span>, list<span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">Next</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">Return</span> missing
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">End</span> <span class="kw1">Function</span>
&nbsp;
&nbsp; &nbsp; <span class="kw1">End</span> <span class="kw1">Class</span>
<span class="kw1">End</span> <span class="kw1">Namespace</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">Imports System.Globalization
Imports System.Reflection
Imports System.Resources
Imports System.Text
Imports Nancy.Testing

Namespace Resources

    Public Class ResourceTester

        Public Shared Sub TestResxForInconsistencies(type As Type, resourceManager As ResourceManager)
            If type Is Nothing Then Throw New ArgumentNullException(NameOf(type))
            Dim cultureResourceDictionaries = GetResxDictionaries(type, resourceManager)
            Dim emptyEntries = GetEmpty(cultureResourceDictionaries)
            Dim neutralLanguage = ExtractNeutralLanguage(cultureResourceDictionaries, type)
            Dim missingEntries = GetMissing(cultureResourceDictionaries, neutralLanguage)
            Dim dispensableEntries = GetDispensable(cultureResourceDictionaries, neutralLanguage)
            If (emptyEntries.Count &gt; 0 OrElse missingEntries.Count &gt; 0 OrElse dispensableEntries.Count &gt; 0) Then
                Dim message = New StringBuilder()
                message.AppendFormat("Found resx errors in ""{0}"":", type)
                message.AppendLine()
                message.AppendLine()
                Append(message, emptyEntries, " Empty Entries ", "Entries which do not have a value.")
                Append(message, missingEntries, " Missing Entries ", "Entries which are specified in the neutral language but are missing in the specified language.")
                Append(message, dispensableEntries, " Dispensable Entries ", "Entries which are not specified in the neutral language but are present in the specified language and should be removed.")
                Throw New Nunit.Framework.AssertionException(message.ToString())
            End If
        End Sub

        Private Shared Sub Append(message As StringBuilder, entries As Dictionary(Of String, List(Of String)), headline As String, description As String)
            If entries.Count &gt; 0 Then
                message.AppendLine(headline)
                message.AppendLine(New String("=", headline.Length))
                message.Append("(")
                message.Append(description)
                message.AppendLine(")")
                For Each pair In entries
                    Dim languageName = pair.Key
                    If String.IsNullOrEmpty(languageName) Then
                        languageName = "&lt;neutral language&gt;"
                    End If
                    Dim line = String.Format("  Language: {0}  ", languageName)
                    message.AppendLine(line)
                    message.AppendLine(New String("-", line.Length))
                    For Each key In pair.Value
                        message.Append("\t")
                        message.AppendLine(key)
                    Next
                Next
                message.AppendLine()
            End If
        End Sub

        Private Shared Function ExtractNeutralLanguage(resxs As Dictionary(Of String, Dictionary(Of String, Object)), type As Type) As Dictionary(Of String, Object)
            Dim neutralLanguage = New Dictionary(Of String, Object)
            If Not resxs.TryGetValue(String.Empty, neutralLanguage) Then Throw New AssertException(String.Format("The neutral language is not specified in ""{0}"".", type))
            resxs.Remove(String.Empty)
            Return neutralLanguage
        End Function

        Private Shared Function GetAvailableResxCultureInfos(assembly As Assembly) As CultureInfo()
            Dim assemblyResxCultures = New HashSet(Of CultureInfo)()
            assemblyResxCultures.Add(CultureInfo.InvariantCulture)
            Dim names = assembly.GetManifestResourceNames()
            If names IsNot Nothing AndAlso names.Length &gt; 0 Then
                Dim allCultures = CultureInfo.GetCultures(CultureTypes.AllCultures)
                Const resourcesEnding As String = ".resources"
                For i = 0 To names.Length - 1
                    Dim name = names(i)
                    If String.IsNullOrWhiteSpace(name) OrElse name.Length &lt;= resourcesEnding.Length OrElse Not name.EndsWith(resourcesEnding, StringComparison.InvariantCultureIgnoreCase) Then
                        Continue For
                    End If
                    name = name.Remove(name.Length - resourcesEnding.Length, resourcesEnding.Length)
                    If (String.IsNullOrWhiteSpace(name)) Then
                        Continue For
                    End If
                    Dim resourceManager = New ResourceManager(name, assembly)
                    For j = 0 To allCultures.Length - 1
                        Dim culture = allCultures(j)
                        Try
                            If (culture.Equals(CultureInfo.InvariantCulture)) Then
                                Continue For
                            End If
                            Using resourceSet = resourceManager.GetResourceSet(culture, True, False)
                                If (resourceSet IsNot Nothing) Then
                                    assemblyResxCultures.Add(culture)
                                End If
                            End Using
                        Catch ex As CultureNotFoundException

                        End Try
                    Next
                Next
            End If
            Return assemblyResxCultures.ToArray()
        End Function

        Private Shared Function GetResxDictionaries(type As Type, resourceManager As resourceManager) As Dictionary(Of String, Dictionary(Of String, Object))
            Dim availableResxsCultureInfos = GetAvailableResxCultureInfos(type.Assembly)
            Dim resxDictionaries = New Dictionary(Of String, Dictionary(Of String, Object))()
            For i = 0 To availableResxsCultureInfos.Length - 1
                Dim cultureInfo = availableResxsCultureInfos(i)
                Try
                    Dim resourceSet = resourceManager.GetResourceSet(cultureInfo, True, True)
                    If resourceSet IsNot Nothing Then
                        Dim dict = New Dictionary(Of String, Object)()
                        For Each item In resourceSet
                            Dim key = item.Key.ToString()
                            Dim value = item.Value
                            dict.Add(key, value)
                        Next
                        resxDictionaries.Add(cultureInfo.Name, dict)
                    End If
                Catch ex As Exception

                End Try
               
            Next
            Return resxDictionaries
        End Function

        Private Shared Function GetDispensable(resxDictionaries As Dictionary(Of String, Dictionary(Of String, Object)), neutralLanguage As Dictionary(Of String, Object)) As Dictionary(Of String, List(Of String))
            Dim dispensable = New Dictionary(Of String, List(Of String))()
            For Each pair In resxDictionaries
                Dim resxs = pair.Value
                Dim list = New List(Of String)()
                For Each key In resxs.Keys
                    If Not neutralLanguage.ContainsKey(key) Then
                        list.Add(key)
                    End If
                Next
                If (list.Count &gt; 0) Then
                    dispensable.Add(pair.Key, list)
                End If
            Next
            Return dispensable
        End Function

        Private Shared Function GetEmpty(resxDictionaries As Dictionary(Of String, Dictionary(Of String, Object))) As Dictionary(Of String, List(Of String))
            Dim empty = New Dictionary(Of String, List(Of String))()
            For Each pair In resxDictionaries
                Dim resxs = pair.Value
                Dim list = New List(Of String)()
                For Each entrie In resxs
                    If entrie.Value Is Nothing Then
                        list.Add(entrie.Key)
                    End If
                    Dim stringValue = entrie.Value
                    If (String.IsNullOrWhiteSpace(stringValue)) Then
                        list.Add(entrie.Key)
                    End If
                Next
                If (list.Count &gt; 0) Then
                    empty.Add(pair.Key, list)
                End If
            Next
            Return empty
        End Function

        Private Shared Function GetMissing(resxDictionaries As Dictionary(Of String, Dictionary(Of String, Object)), neutralLanguage As Dictionary(Of String, Object)) As Dictionary(Of String, List(Of String))
            Dim missing = New Dictionary(Of String, List(Of String))()
            For Each pair In resxDictionaries
                Dim resxs = pair.Value
                Dim list = New List(Of String)()
                For Each key In neutralLanguage.Keys
                    If Not resxs.ContainsKey(key) Then
                        list.Add(key)
                    End If
                Next
                If list.Count &gt; 0 Then missing.Add(pair.Key, list)
            Next
            Return missing
        End Function

    End Class
End Namespace</pre></div></div>

<p>ANd now my test looks like this. </p>

<div class="bwp-syntax-block clearfix">
<div class="bwp-syntax-toolbar"><div class="bwp-syntax-control"><a href="javascript:;" class="bwp-syntax-source-switch" title="View Source Code"></a></div></div>
<div class="bwp-syntax-wrapper clearfix bwp-syntax-simple"><table class="vbnet"><thead><tr><td colspan="2"  class="head">vb.net</td></tr></thead><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
</pre></td><td class="de1"><pre class="de1"><span class="kw1">Imports</span> NUnit<span class="sy0">.</span><span class="me1">Framework</span> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 
&nbsp;
<span class="kw1">Namespace</span> Resources
&nbsp; &nbsp; <span class="kw1">Public</span> <span class="kw1">Class</span> TestReportResource
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; <span class="sy0">&lt;</span>Test<span class="sy0">&gt;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">Public</span> <span class="kw1">Sub</span> TestResx
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ResourceTester<span class="sy0">.</span><span class="me1">TestResxForInconsistencies</span><span class="br0">&#40;</span><span class="kw1">Gettype</span><span class="br0">&#40;</span>BI<span class="sy0">.</span><span class="me1">My</span><span class="sy0">.</span><span class="me1">Resources</span><span class="sy0">.</span><span class="me1">Report</span><span class="br0">&#41;</span>, BI<span class="sy0">.</span><span class="me1">My</span><span class="sy0">.</span><span class="me1">Resources</span><span class="sy0">.</span><span class="me1">Report</span><span class="sy0">.</span><span class="me1">ResourceManager</span><span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">End</span> <span class="kw1">Sub</span>
&nbsp; &nbsp; &nbsp; &nbsp; 
&nbsp; &nbsp; <span class="kw1">End</span> <span class="kw1">Class</span>
<span class="kw1">End</span> <span class="kw1">NameSpace</span></pre></td></tr></tbody></table></div>
<div class="bwp-syntax-source"><pre class="no-parse">Imports NUnit.Framework                 

Namespace Resources
    Public Class TestReportResource

        &lt;Test&gt;
        Public Sub TestResx
            ResourceTester.TestResxForInconsistencies(Gettype(BI.My.Resources.Report), BI.My.Resources.Report.ResourceManager)
        End Sub
        
    End Class
End NameSpace</pre></div></div>

<p>And when it failes it looks like this. </p>
<p><img src="/wp-content/uploads/2017/09/resx.png" alt="resx" width="850" height="400" class="alignnone size-full wp-image-8801" srcset="/wp-content/uploads/2017/09/resx.png 850w, /wp-content/uploads/2017/09/resx-300x141.png 300w, /wp-content/uploads/2017/09/resx-768x361.png 768w" sizes="(max-width: 850px) 100vw, 850px" /></p>
<p>So there you go, simple. </p>
]]></content>
			<link rel="replies" type="text/html" href="/index.php/uncategorized/testing-your-resx-files-to-see-if-all-languages-have-the-same-items/#comments" thr:count="1"/>
		<link rel="replies" type="application/atom+xml" href="/index.php/uncategorized/testing-your-resx-files-to-see-if-all-languages-have-the-same-items/feed/atom/" thr:count="1"/>
		<thr:total>1</thr:total>
		</entry>
		<entry>
		<author>
			<name>Christiaan Baes (chrissie1)</name>
					</author>
		<title type="html"><![CDATA[Elasticsearch and my setup. Part 1: the why and the how.]]></title>
		<link rel="alternate" type="text/html" href="/index.php/uncategorized/elasticsearch-and-my-setup-part-1-the-why-and-the-how/" />
		<id>/?p=8675</id>
		<updated>2017-06-20T17:53:24Z</updated>
		<published>2017-06-20T17:53:24Z</published>
		<category scheme="/" term="Uncategorized" />		<summary type="html"><![CDATA[Introduction Over the past few years I used elasticsearch, one bit for using as a fulltextsearch engine and one bit as using to store logdata. Somehow I ended up with 2 seperate elasticsearch server, each forming their own cluster. The cluster was in a yellow state most of the time if not red the ther [&#8230;]]]></summary>
		<content type="html" xml:base="/index.php/uncategorized/elasticsearch-and-my-setup-part-1-the-why-and-the-how/"><![CDATA[<h1>Introduction</h1>
<p>Over the past few years I used elasticsearch, one bit for using as a fulltextsearch engine and one bit as using to store logdata.<br />
Somehow I ended up with 2 seperate elasticsearch server, each forming their own cluster. The cluster was in a yellow state most of the time if not red the ther time. Mostly caused by unassigned clusters. By default elastic tries to replicate every shard at least once. When you have only one node in your cluster it can&#8217;t get rid of the shard. So you end up with unassigned shards and thus a cluster in a yellow state. Which is annoying to say the least. You want things to be nice and green. So I needed to setup a new cluster and copy some data over from the old clusters. Starting fresh is always a good idea.<br />
My previous elastic machines were windows machines. But let&#8217;s be honest linux is the way forward here. </p>
<h1>The stack</h1>
<p>Of course I want the whole ELK (Elastic, logstash and kibana). So that means setting up 5 servers from scratch.<br />
What better way to make a machine than to use <a href="https://www.packer.io/">packer</a>? Since you can make VM&#8217;s from the ISO and build from there. </p>
<p>So I used </p>
<ul>
<li>ElasticSearch 5.4.0</li>
<li>Kibana 5.4.0</li>
<li>Logstash 5.4.0</li>
<li>Ubuntu server edition 17.04</li>
<li>X-pack 5.4.0</li>
<li>Packer (latest version)</li>
<li>Virtualbox 5.something</li>
</ul>
<p>For ease of use I downloaded the iso file for ubuntu the deb files for Elastic, Kibana and logstash and the zip file ofr X-pack. These files can be found by googling for them. </p>
<h1>The setup</h1>
<p>So you create a folder somewhere and then you <a href="https://github.com/chrissie1/packerelastic">git clone</a> the repo. Which should probably be online sometime later tonight.<br />
The repo does not contain the zip,deb or iso-files. </p>
<h1>Why?</h1>
<p>This will create 5 servers for which you will need a lot of memory to run them 3*24GB and 2*8GB that&#8217;s&#8230; a lot of memory. So why do the elasticsearch servers have so much RAM. Becuase that&#8217;s what I found on the internet to be the best. 12GB for elastic and 12GB for the full text index engine. I only have a few million documents a day and have yet to see it use all the memory.<br />
The disks on the servers are 200GB. And they use 4vCPUs. But since this is a script you can change all this.<br />
The kibana and logstash server each have their own elastic node that doesn&#8217;t have data or isn&#8217;t a master.<br />
3 elastic masters is great since this way they work as a RAID5 setup and you can reboot one while the cluster keeps going. </p>
<p>this does not yet configure the NIC but the ip-adresses should be.</p>
<ul>
<li>Elasticsearch01: 192.168.0.10</li>
<li>Elasticsearch02: 192.168.0.11</li>
<li>Elasticsearch03: 192.168.0.12</li>
<li>Kibana01: 192.168.0.13</li>
<li>Logstash01: 192.168.0.14</li>
</ul>
<p>If you want to change the ip-adresses than you also have to change the config files in the config folders.</p>
<p>In some later blogposts I will go into the config a bit further, and try to explain my deciscions.</p>
]]></content>
			<link rel="replies" type="text/html" href="/index.php/uncategorized/elasticsearch-and-my-setup-part-1-the-why-and-the-how/#comments" thr:count="0"/>
		<link rel="replies" type="application/atom+xml" href="/index.php/uncategorized/elasticsearch-and-my-setup-part-1-the-why-and-the-how/feed/atom/" thr:count="0"/>
		<thr:total>0</thr:total>
		</entry>
		<entry>
		<author>
			<name>Jes Borland</name>
					</author>
		<title type="html"><![CDATA[Transactional Replication from Availability Groups to Azure SQL Database: Part 5 &#8211; Testing]]></title>
		<link rel="alternate" type="text/html" href="/index.php/uncategorized/transactional-replication-from-availability-groups-to-azure-sql-database-part-5-testing/" />
		<id>/?p=4960</id>
		<updated>2016-12-22T16:57:02Z</updated>
		<published>2016-12-30T15:00:30Z</published>
		<category scheme="/" term="Uncategorized" />		<summary type="html"><![CDATA[This is part 5 of a 5-part series. Part 1 &#8211; Planning Part 2 &#8211; The Distributor Part 3 &#8211; The Publisher Part 4 &#8211; The Subscriber Part 5 &#8211; Testing &#160; Scenario Publishers: servers SQL2014AG1 and SQL2014AG2, database AGTest Distributor: stand-alone server, SQL2014demo Subscriber: Azure SQL Database &#8211; server jessqldb2, database ReplicationTest Time to [&#8230;]]]></summary>
		<content type="html" xml:base="/index.php/uncategorized/transactional-replication-from-availability-groups-to-azure-sql-database-part-5-testing/"><![CDATA[<p>This is part 5 of a 5-part series.</p>
<ul>
<li><a href="/?p=4896" target="_blank">Part 1 &#8211; Planning</a></li>
<li><a href="/?p=4906" target="_blank">Part 2 &#8211; The Distributor</a></li>
<li><a href="/?p=4923" target="_blank">Part 3 &#8211; The Publisher</a></li>
<li><a href="/?p=4945" target="_blank">Part 4 &#8211; The Subscriber</a></li>
<li><a href="/?p=4960" target="_blank">Part 5 &#8211; Testing</a></li>
</ul>
<p>&nbsp;</p>
<h3>Scenario</h3>
<p>Publishers: servers SQL2014AG1 and SQL2014AG2, database AGTest</p>
<p>Distributor: stand-alone server, SQL2014demo</p>
<p>Subscriber: Azure SQL Database &#8211; server jessqldb2, database ReplicationTest</p>
<h3>Time to test!</h3>
<p>Congratulations, you&#8217;ve configured a remote distributor, configured all of your AG replicas as publishers, and configured your SQL Database as a subscriber! Now you want to ensure that transactions are replicating to the database, and that they continue to do so if there is a failover in the AG.</p>
<h3>Testing that replication works</h3>
<p>This is easiest to do in a development database, where you can add data.</p>
<p>Connect to the AG primary, which is the publisher &#8211; run a query against a table and note results.</p>
<p>Connect to the subscriber, run the same query, and verify the results are the same.</p>
<p>Connect to the publisher. If you have the ability, enter a new value into a table. If not, find a table this is frequently updated, and note a new value that has been entered.</p>
<p>Go to the subscriber. Query for the new or changed value.</p>
<h3>Testing that on AG failover, replication continues to work</h3>
<p>Perform a manual failover from your primary replica to a secondary replica.</p>
<p>Connect to the AG primary, which is the publisher &#8211; run a query against a table and note results.</p>
<p>Connect to the subscriber, run the same query, and verify the results are the same.</p>
<p>Connect to the publisher. If you have the ability, enter a new value into a table. If not, find a table this is frequently updated, and note a new value that has been entered.</p>
<p>Go to the subscriber. Query for the new or changed value.</p>
<h3>Troubleshooting</h3>
<p>Troubleshooting replication is outside the scope of this blog series. If you find that things aren&#8217;t working as expected, read the article <a href="https://www.simple-talk.com/sql/database-administration/monitoring-transactional-replication-in-sql-server/" target="_blank">Monitoring Transactional Replication in SQL Server</a>, and review the <a href="http://www.sqlservercentral.com/stairway/72401/" target="_blank">SQLServerCentral.com Stairway to Replication </a>article <a href="http://www.sqlservercentral.com/articles/Stairway+Series/72452/" target="_blank">Level 10: Troubleshooting</a>.</p>
<p>Troubleshooting Availability Groups is also outside the scope of this blog series. If you need help, start with <a href="https://msdn.microsoft.com/en-us/library/dn135328(v=sql.110).aspx" target="_blank">AlwaysOn Availability Groups Troubleshooting and Monitoring Guide</a>.</p>
]]></content>
			<link rel="replies" type="text/html" href="/index.php/uncategorized/transactional-replication-from-availability-groups-to-azure-sql-database-part-5-testing/#comments" thr:count="0"/>
		<link rel="replies" type="application/atom+xml" href="/index.php/uncategorized/transactional-replication-from-availability-groups-to-azure-sql-database-part-5-testing/feed/atom/" thr:count="0"/>
		<thr:total>0</thr:total>
		</entry>
		<entry>
		<author>
			<name>Jes Borland</name>
					</author>
		<title type="html"><![CDATA[Transactional Replication from Availability Groups to Azure SQL Database: Part 4 &#8211; The Subscriber]]></title>
		<link rel="alternate" type="text/html" href="/index.php/uncategorized/transactional-replication-from-availability-groups-to-azure-sql-database-part-4-the-subscriber/" />
		<id>/?p=4945</id>
		<updated>2016-12-22T16:56:27Z</updated>
		<published>2016-12-29T15:00:14Z</published>
		<category scheme="/" term="Uncategorized" />		<summary type="html"><![CDATA[This is part 4 of a 5-part series. Part 1 &#8211; Planning Part 2 &#8211; The Distributor Part 3 &#8211; The Publisher Part 4 &#8211; The Subscriber Part 5 &#8211; Testing &#160; Scenario Publishers: servers SQL2014AG1 and SQL2014AG2, database AGTest Distributor: stand-alone server, SQL2014demo Subscriber: Azure SQL Database &#8211; server jessqldb2, database ReplicationTest Setting up [&#8230;]]]></summary>
		<content type="html" xml:base="/index.php/uncategorized/transactional-replication-from-availability-groups-to-azure-sql-database-part-4-the-subscriber/"><![CDATA[<p>This is part 4 of a 5-part series.</p>
<ul>
<li><a href="/?p=4896" target="_blank">Part 1 &#8211; Planning</a></li>
<li><a href="/?p=4906" target="_blank">Part 2 &#8211; The Distributor</a></li>
<li><a href="/?p=4923" target="_blank">Part 3 &#8211; The Publisher</a></li>
<li><a href="/?p=4945" target="_blank">Part 4 &#8211; The Subscriber</a></li>
<li><a href="/?p=4960" target="_blank">Part 5 &#8211; Testing</a></li>
</ul>
<p>&nbsp;</p>
<h3>Scenario</h3>
<p>Publishers: servers SQL2014AG1 and SQL2014AG2, database AGTest</p>
<p>Distributor: stand-alone server, SQL2014demo</p>
<p>Subscriber: Azure SQL Database &#8211; server jessqldb2, database ReplicationTest</p>
<h3>Setting up the replication subscription</h3>
<p>This subscription is going to use an Azure SQL Database.</p>
<p>Go to the AG primary replica. (In this demo, this is SQL2014AG2.)</p>
<p>Expand Replication. Expand Local Publications. Right-click the publication and select New Subscription.</p>
<p>Publication – select the publication and click Next.</p>
<p><a href="/wp-content/uploads/2016/12/subscription-1.png"><img class="aligncenter size-full wp-image-4947" src="/wp-content/uploads/2016/12/subscription-1.png" alt="subscription 1" width="573" height="460" srcset="/wp-content/uploads/2016/12/subscription-1.png 573w, /wp-content/uploads/2016/12/subscription-1-300x240.png 300w" sizes="(max-width: 573px) 100vw, 573px" /></a></p>
<p>Distribution Agent Location – select Run all agents at the Distributor (push subscriptions). Click Next.</p>
<p><a href="/wp-content/uploads/2016/12/subscription-2.png"><img class="aligncenter size-full wp-image-4948" src="/wp-content/uploads/2016/12/subscription-2.png" alt="subscription 2" width="576" height="456" srcset="/wp-content/uploads/2016/12/subscription-2.png 576w, /wp-content/uploads/2016/12/subscription-2-300x237.png 300w" sizes="(max-width: 576px) 100vw, 576px" /></a></p>
<p>Subscribers – here we will add the SQL DB. Click Add Subscriber &gt; Add SQL Server Subscriber.</p>
<p><a href="/wp-content/uploads/2016/12/subscription-3.png"><img class="aligncenter size-full wp-image-4949" src="/wp-content/uploads/2016/12/subscription-3.png" alt="subscription 3" width="569" height="455" srcset="/wp-content/uploads/2016/12/subscription-3.png 569w, /wp-content/uploads/2016/12/subscription-3-300x239.png 300w" sizes="(max-width: 569px) 100vw, 569px" /></a></p>
<p>Enter the Azure SQL Server name, the login, and the password. Click Options. Go to Connection Properties. Enter the database. Click Connect.</p>
<p><a href="/wp-content/uploads/2016/12/subscription-4.png"><img class="aligncenter size-full wp-image-4950" src="/wp-content/uploads/2016/12/subscription-4.png" alt="subscription 4" width="493" height="525" srcset="/wp-content/uploads/2016/12/subscription-4.png 493w, /wp-content/uploads/2016/12/subscription-4-281x300.png 281w" sizes="(max-width: 493px) 100vw, 493px" /></a></p>
<p>Make sure there is a checkmark next to the subscriber name. Use the drop-down to select a Subscription Database. Click Next.</p>
<p><a href="/wp-content/uploads/2016/12/subscription-5.png"><img class="aligncenter size-full wp-image-4951" src="/wp-content/uploads/2016/12/subscription-5.png" alt="subscription 5" width="575" height="454" srcset="/wp-content/uploads/2016/12/subscription-5.png 575w, /wp-content/uploads/2016/12/subscription-5-300x236.png 300w" sizes="(max-width: 575px) 100vw, 575px" /></a></p>
<p>Distribution Agent Security – click the ellipses on the right side.</p>
<p><a href="/wp-content/uploads/2016/12/subscription-6.png"><img class="aligncenter size-full wp-image-4952" src="/wp-content/uploads/2016/12/subscription-6.png" alt="subscription 6" width="569" height="459" srcset="/wp-content/uploads/2016/12/subscription-6.png 569w, /wp-content/uploads/2016/12/subscription-6-300x242.png 300w" sizes="(max-width: 569px) 100vw, 569px" /></a><a href="/wp-content/uploads/2016/12/subscription-7.png"><br />
</a></p>
<p>Distribution Agent Security – three pieces. First select an account to run the distribution agent process to sync the sub. Ideally, this is a specific domain user.</p>
<p>Second, select the account to connect to the distributor.</p>
<p>Third, select an account to connect to the subscriber. If this is a SQL DB, this <strong>must</strong> be a SQL login that is a member of the db_owner role in the database.</p>
<p>Click OK.</p>
<p><a href="/wp-content/uploads/2016/12/subscription-7.png"><img class="aligncenter size-full wp-image-4953" src="/wp-content/uploads/2016/12/subscription-7.png" alt="subscription 7" width="553" height="677" srcset="/wp-content/uploads/2016/12/subscription-7.png 553w, /wp-content/uploads/2016/12/subscription-7-245x300.png 245w" sizes="(max-width: 553px) 100vw, 553px" /></a></p>
<p>Click Next.</p>
<p>Synchronization Schedule – choose Run continuously. Click Next.</p>
<p><a href="/wp-content/uploads/2016/12/subscription-8.png"><img class="aligncenter size-full wp-image-4954" src="/wp-content/uploads/2016/12/subscription-8.png" alt="subscription 8" width="572" height="453" srcset="/wp-content/uploads/2016/12/subscription-8.png 572w, /wp-content/uploads/2016/12/subscription-8-300x237.png 300w" sizes="(max-width: 572px) 100vw, 572px" /></a></p>
<p>Initialize Subscriptions – make sure Initialize is checked, choose Immediately. Click Next.</p>
<p><a href="/wp-content/uploads/2016/12/subscription-9.png"><img class="aligncenter size-full wp-image-4955" src="/wp-content/uploads/2016/12/subscription-9.png" alt="subscription 9" width="576" height="451" srcset="/wp-content/uploads/2016/12/subscription-9.png 576w, /wp-content/uploads/2016/12/subscription-9-300x234.png 300w" sizes="(max-width: 576px) 100vw, 576px" /></a></p>
<p>Wizard Actions – select both options. Click Next.</p>
<p><a href="/wp-content/uploads/2016/12/subscription-10.png"><img class="aligncenter size-full wp-image-4956" src="/wp-content/uploads/2016/12/subscription-10.png" alt="subscription 10" width="573" height="454" srcset="/wp-content/uploads/2016/12/subscription-10.png 573w, /wp-content/uploads/2016/12/subscription-10-300x237.png 300w" sizes="(max-width: 573px) 100vw, 573px" /></a></p>
<p>Script File Properties – give the file a name. Review the other options. Click Next.</p>
<p><a href="/wp-content/uploads/2016/12/subscription-11.png"><img class="aligncenter size-full wp-image-4957" src="/wp-content/uploads/2016/12/subscription-11.png" alt="subscription 11" width="579" height="451" srcset="/wp-content/uploads/2016/12/subscription-11.png 579w, /wp-content/uploads/2016/12/subscription-11-300x233.png 300w" sizes="(max-width: 579px) 100vw, 579px" /></a></p>
<p>Click Finish. All steps should have a green checkmark next to them.</p>
<p><a href="/wp-content/uploads/2016/12/subscription-12.png"><img class="aligncenter size-full wp-image-4958" src="/wp-content/uploads/2016/12/subscription-12.png" alt="subscription 12" width="573" height="456" srcset="/wp-content/uploads/2016/12/subscription-12.png 573w, /wp-content/uploads/2016/12/subscription-12-300x238.png 300w" sizes="(max-width: 573px) 100vw, 573px" /></a></p>
<p>To verify it&#8217;s working, expand Replication &gt; Local Publications &gt; Publication Name, and you should see your subscription. Right-click and select View Synchronization Status to confirm it&#8217;s applying the snapshot.</p>
<p>Your replication subscriber is now set up. The next step is to verify that all the pieces work by testing both replication and AG failover.</p>
]]></content>
			<link rel="replies" type="text/html" href="/index.php/uncategorized/transactional-replication-from-availability-groups-to-azure-sql-database-part-4-the-subscriber/#comments" thr:count="0"/>
		<link rel="replies" type="application/atom+xml" href="/index.php/uncategorized/transactional-replication-from-availability-groups-to-azure-sql-database-part-4-the-subscriber/feed/atom/" thr:count="0"/>
		<thr:total>0</thr:total>
		</entry>
	</feed>
