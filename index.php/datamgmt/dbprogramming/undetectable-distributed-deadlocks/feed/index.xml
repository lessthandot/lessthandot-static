<?xml version="1.0" encoding="UTF-8"?><rss version="2.0"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:atom="http://www.w3.org/2005/Atom"
	xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
	
	>
<channel>
	<title>Comments on: Undetectable Distributed Deadlocks</title>
	<atom:link href="/index.php/datamgmt/dbprogramming/undetectable-distributed-deadlocks/feed/" rel="self" type="application/rss+xml" />
	<link>/index.php/datamgmt/dbprogramming/undetectable-distributed-deadlocks/</link>
	<description>A Technical Community for IT Professionals</description>
	<lastBuildDate>Tue, 26 Feb 2019 12:40:14 +0000</lastBuildDate>
	<sy:updatePeriod>hourly</sy:updatePeriod>
	<sy:updateFrequency>1</sy:updateFrequency>
	<generator>https://wordpress.org/?v=4.6.1</generator>
	<item>
		<title>By: Therion</title>
		<link>/index.php/datamgmt/dbprogramming/undetectable-distributed-deadlocks/#comment-5329083</link>
		<dc:creator><![CDATA[Therion]]></dc:creator>
		<pubDate>Tue, 25 Oct 2016 17:40:34 +0000</pubDate>
		<guid isPermaLink="false">/index.php/2009/11/undetectable-distributed-deadlocks/#comment-5329083</guid>
		<description><![CDATA[From what I can see on MS SQL Server 2014, transactions that cross server boundaries do not seem to have any proper deadlock detection.
The example we are using for a lecture has the film table from the sakila database split up into three segments and distributed across three servers, with a &quot;distributed view&quot; joining them all together such as to represent a single table.  If we create a deadlock by locking two separate rows, which both reside on the same server, from two different transactions, the deadlock will be detected and resolved (albeit not respecting deadlock_priority, since it seems to get lost in the process of accessing linked servers within a transaction).
If the deadlock is meanwhile created with two rows on different segments of the partitioned table and thereby due to locks on different servers, the dead lock will not be detected, even though both transactions are originally initiated from the same server, resulting in the transaction that first receives a timeout to loose the race.

Since I couldn&#039;t find anyplace else on the internet considering this issue, I thought I might as well share it here and hope that maybe somebody might have an idea whether SQL Server should be able to resolve this or whether it is expected behaviour.]]></description>
		<content:encoded><![CDATA[<p>From what I can see on MS SQL Server 2014, transactions that cross server boundaries do not seem to have any proper deadlock detection.<br />
The example we are using for a lecture has the film table from the sakila database split up into three segments and distributed across three servers, with a &#8220;distributed view&#8221; joining them all together such as to represent a single table.  If we create a deadlock by locking two separate rows, which both reside on the same server, from two different transactions, the deadlock will be detected and resolved (albeit not respecting deadlock_priority, since it seems to get lost in the process of accessing linked servers within a transaction).<br />
If the deadlock is meanwhile created with two rows on different segments of the partitioned table and thereby due to locks on different servers, the dead lock will not be detected, even though both transactions are originally initiated from the same server, resulting in the transaction that first receives a timeout to loose the race.</p>
<p>Since I couldn&#8217;t find anyplace else on the internet considering this issue, I thought I might as well share it here and hope that maybe somebody might have an idea whether SQL Server should be able to resolve this or whether it is expected behaviour.</p>
]]></content:encoded>
	</item>
	<item>
		<title>By: SQLDenis</title>
		<link>/index.php/datamgmt/dbprogramming/undetectable-distributed-deadlocks/#comment-2198</link>
		<dc:creator><![CDATA[SQLDenis]]></dc:creator>
		<pubDate>Fri, 13 Nov 2009 23:04:52 +0000</pubDate>
		<guid isPermaLink="false">/index.php/2009/11/undetectable-distributed-deadlocks/#comment-2198</guid>
		<description><![CDATA[This is really interesting...I have never seen this (because mostly I don&#039;t have code like that across linked servers) and it will be nice if someone who had this happen would leave you a comment]]></description>
		<content:encoded><![CDATA[<p>This is really interesting&#8230;I have never seen this (because mostly I don&#8217;t have code like that across linked servers) and it will be nice if someone who had this happen would leave you a comment</p>
]]></content:encoded>
	</item>
</channel>
</rss>
