<?xml version="1.0" encoding="UTF-8"?><rss version="2.0"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:atom="http://www.w3.org/2005/Atom"
	xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
	
	>
<channel>
	<title>Comments on: Execution Plans &#8211; Indexing to achieve optimal query plans</title>
	<atom:link href="/index.php/datamgmt/dbprogramming/execution-plan-tuning-sql-server/feed/" rel="self" type="application/rss+xml" />
	<link>/index.php/datamgmt/dbprogramming/execution-plan-tuning-sql-server/</link>
	<description>A Technical Community for IT Professionals</description>
	<lastBuildDate>Tue, 26 Feb 2019 12:40:14 +0000</lastBuildDate>
	<sy:updatePeriod>hourly</sy:updatePeriod>
	<sy:updateFrequency>1</sy:updateFrequency>
	<generator>https://wordpress.org/?v=4.6.1</generator>
	<item>
		<title>By: SQLDenis</title>
		<link>/index.php/datamgmt/dbprogramming/execution-plan-tuning-sql-server/#comment-3298</link>
		<dc:creator><![CDATA[SQLDenis]]></dc:creator>
		<pubDate>Sun, 31 Oct 2010 12:06:49 +0000</pubDate>
		<guid isPermaLink="false">/index.php/2010/10/execution-plan-tuning-sql-server/#comment-3298</guid>
		<description><![CDATA[A clustered index scan vs a table scan will probably be the same.......&lt;br /&gt;
&lt;br /&gt;
Also a seek is not always better than a scan, see here: &lt;a href=&quot;/index.php/DataMgmt/DataDesign/is-an-index-scan-always-better-or-faster&quot;&gt;Is an index seek always better or faster than an index scan?&lt;/a&gt;]]></description>
		<content:encoded><![CDATA[<p>A clustered index scan vs a table scan will probably be the same&#8230;&#8230;.</p>
<p>Also a seek is not always better than a scan, see here: <a href="/index.php/DataMgmt/DataDesign/is-an-index-scan-always-better-or-faster">Is an index seek always better or faster than an index scan?</a></p>
]]></content:encoded>
	</item>
	<item>
		<title>By: AGiotti</title>
		<link>/index.php/datamgmt/dbprogramming/execution-plan-tuning-sql-server/#comment-3297</link>
		<dc:creator><![CDATA[AGiotti]]></dc:creator>
		<pubDate>Sat, 30 Oct 2010 11:51:35 +0000</pubDate>
		<guid isPermaLink="false">/index.php/2010/10/execution-plan-tuning-sql-server/#comment-3297</guid>
		<description><![CDATA[After creating the CLUSTERED index on WISSUG.SalesOrderHearder(SalesOrderID) the operation went from a &quot;Table Scan&quot; to a &quot;Clustered Index Scan&quot;.&lt;br /&gt;
The whitepaper explains that this type of scan is more optimal than the previous &quot;Table Scan&quot;. Since this is a Clustered index, which not only stores the key structure, like a regular index, doesn&#039;t it also sort and store the data at the leaf-level as well? With that said, wouldn&#039;t a clustered index scan be considered the same concept as a full table scan, thereby, performing just as poorly as the &quot;Table scan&quot;?&lt;br /&gt;
Notice the logical reads on the SalesOrderHeader with and without the index.  &lt;br /&gt;
Sorry for the question but I am a little confused on where the performance gain is?&lt;br /&gt;
/* Without the index&lt;br /&gt;
Table &#039;Worktable&#039;. Scan count 0, logical reads 0, physical reads 0, read-ahead reads 0, lob logical reads 0, lob physical reads 0, lob read-ahead reads 0.&lt;br /&gt;
Table &#039;SalesOrderDetail&#039;. Scan count 1, logical reads 1233, physical reads 0, read-ahead reads 0, lob logical reads 0, lob physical reads 0, lob read-ahead reads 0.&lt;br /&gt;
Table &#039;SalesOrderHeader&#039;. Scan count 1, logical reads 650, physical reads 0, read-ahead reads 0, lob logical reads 0, lob physical reads 0, lob read-ahead reads 0.&lt;br /&gt;
*/&lt;br /&gt;
&lt;br /&gt;
/* With clustered index&lt;br /&gt;
Table &#039;Worktable&#039;. Scan count 0, logical reads 0, physical reads 0, read-ahead reads 0, lob logical reads 0, lob physical reads 0, lob read-ahead reads 0.&lt;br /&gt;
Table &#039;SalesOrderDetail&#039;. Scan count 1, logical reads 1233, physical reads 0, read-ahead reads 0, lob logical reads 0, lob physical reads 0, lob read-ahead reads 0.&lt;br /&gt;
Table &#039;SalesOrderHeader&#039;. Scan count 1, logical reads 654, physical reads 0, read-ahead reads 0, lob logical reads 0, lob physical reads 0, lob read-ahead reads 0.&lt;br /&gt;
*/&lt;br /&gt;]]></description>
		<content:encoded><![CDATA[<p>After creating the CLUSTERED index on WISSUG.SalesOrderHearder(SalesOrderID) the operation went from a &#8220;Table Scan&#8221; to a &#8220;Clustered Index Scan&#8221;.<br />
The whitepaper explains that this type of scan is more optimal than the previous &#8220;Table Scan&#8221;. Since this is a Clustered index, which not only stores the key structure, like a regular index, doesn&#8217;t it also sort and store the data at the leaf-level as well? With that said, wouldn&#8217;t a clustered index scan be considered the same concept as a full table scan, thereby, performing just as poorly as the &#8220;Table scan&#8221;?<br />
Notice the logical reads on the SalesOrderHeader with and without the index.  <br />
Sorry for the question but I am a little confused on where the performance gain is?<br />
/* Without the index<br />
Table &#8216;Worktable&#8217;. Scan count 0, logical reads 0, physical reads 0, read-ahead reads 0, lob logical reads 0, lob physical reads 0, lob read-ahead reads 0.<br />
Table &#8216;SalesOrderDetail&#8217;. Scan count 1, logical reads 1233, physical reads 0, read-ahead reads 0, lob logical reads 0, lob physical reads 0, lob read-ahead reads 0.<br />
Table &#8216;SalesOrderHeader&#8217;. Scan count 1, logical reads 650, physical reads 0, read-ahead reads 0, lob logical reads 0, lob physical reads 0, lob read-ahead reads 0.<br />
*/</p>
<p>/* With clustered index<br />
Table &#8216;Worktable&#8217;. Scan count 0, logical reads 0, physical reads 0, read-ahead reads 0, lob logical reads 0, lob physical reads 0, lob read-ahead reads 0.<br />
Table &#8216;SalesOrderDetail&#8217;. Scan count 1, logical reads 1233, physical reads 0, read-ahead reads 0, lob logical reads 0, lob physical reads 0, lob read-ahead reads 0.<br />
Table &#8216;SalesOrderHeader&#8217;. Scan count 1, logical reads 654, physical reads 0, read-ahead reads 0, lob logical reads 0, lob physical reads 0, lob read-ahead reads 0.<br />
*/</p>
]]></content:encoded>
	</item>
	<item>
		<title>By: Ted Krueger (onpnt)</title>
		<link>/index.php/datamgmt/dbprogramming/execution-plan-tuning-sql-server/#comment-3296</link>
		<dc:creator><![CDATA[Ted Krueger (onpnt)]]></dc:creator>
		<pubDate>Fri, 29 Oct 2010 18:21:42 +0000</pubDate>
		<guid isPermaLink="false">/index.php/2010/10/execution-plan-tuning-sql-server/#comment-3296</guid>
		<description><![CDATA[Thank you!&lt;br /&gt;
&lt;br /&gt;
Here is the create for that nonclustered index on sales detail&lt;br /&gt;
&lt;br /&gt;
create nonclustered index IDX_SalesID_LineTotal_ASC&lt;br /&gt;
on WISSUG.SalesOrderDetail (SalesOrderID)&lt;br /&gt;
INCLUDE (LineTotal,UnitPriceDiscount)&lt;br /&gt;]]></description>
		<content:encoded><![CDATA[<p>Thank you!</p>
<p>Here is the create for that nonclustered index on sales detail</p>
<p>create nonclustered index IDX_SalesID_LineTotal_ASC<br />
on WISSUG.SalesOrderDetail (SalesOrderID)<br />
INCLUDE (LineTotal,UnitPriceDiscount)</p>
]]></content:encoded>
	</item>
	<item>
		<title>By: AGiotti</title>
		<link>/index.php/datamgmt/dbprogramming/execution-plan-tuning-sql-server/#comment-3299</link>
		<dc:creator><![CDATA[AGiotti]]></dc:creator>
		<pubDate>Thu, 28 Oct 2010 11:20:00 +0000</pubDate>
		<guid isPermaLink="false">/index.php/2010/10/execution-plan-tuning-sql-server/#comment-3299</guid>
		<description><![CDATA[Hello, Great article. However, I cannot see the create index statement after this sentence.&lt;br /&gt;
&lt;br /&gt;
&quot;With this information we can write the following nonclustered index to cover the SalesOrderDetail table.&quot;&lt;br /&gt;
&lt;br /&gt;
Thanks in advance.]]></description>
		<content:encoded><![CDATA[<p>Hello, Great article. However, I cannot see the create index statement after this sentence.</p>
<p>&#8220;With this information we can write the following nonclustered index to cover the SalesOrderDetail table.&#8221;</p>
<p>Thanks in advance.</p>
]]></content:encoded>
	</item>
</channel>
</rss>
