<?xml version="1.0" encoding="UTF-8"?><rss version="2.0"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:atom="http://www.w3.org/2005/Atom"
	xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
	
	>
<channel>
	<title>Comments on: How to return all the skipped identity values from a table in SQL Server</title>
	<atom:link href="/index.php/datamgmt/dbprogramming/how-to-return-all-the-skipped-identity-v/feed/" rel="self" type="application/rss+xml" />
	<link>/index.php/datamgmt/dbprogramming/how-to-return-all-the-skipped-identity-v/</link>
	<description>A Technical Community for IT Professionals</description>
	<lastBuildDate>Tue, 26 Feb 2019 12:40:14 +0000</lastBuildDate>
	<sy:updatePeriod>hourly</sy:updatePeriod>
	<sy:updateFrequency>1</sy:updateFrequency>
	<generator>https://wordpress.org/?v=4.6.1</generator>
	<item>
		<title>By: SQLDenis</title>
		<link>/index.php/datamgmt/dbprogramming/how-to-return-all-the-skipped-identity-v/#comment-2369</link>
		<dc:creator><![CDATA[SQLDenis]]></dc:creator>
		<pubDate>Tue, 19 Jan 2010 18:29:42 +0000</pubDate>
		<guid isPermaLink="false">/index.php/2010/01/how-to-return-all-the-skipped-identity-v/#comment-2369</guid>
		<description><![CDATA[It is a nice solution&lt;br /&gt;
&lt;br /&gt;
I checked the reads between the two solutions&lt;br /&gt;
&lt;br /&gt;
-----------------------------------------------&lt;br /&gt;
&lt;br /&gt;
set statistics io on&lt;br /&gt;
&lt;br /&gt;
SELECT number&lt;br /&gt;
FROM Numbers n&lt;br /&gt;
LEFT join #bla b ON n.number = b.id&lt;br /&gt;
WHERE n.number &#060; (SELECT MAX(id) FROM #bla)&lt;br /&gt;
and  b.id IS null&lt;br /&gt;
go&lt;br /&gt;
&lt;br /&gt;
WITH NumbersCTE (Number)&lt;br /&gt;
AS&lt;br /&gt;
(&lt;br /&gt;
SELECT CAST(1 AS int) As Number&lt;br /&gt;
UNION ALL&lt;br /&gt;
SELECT NumbersCTE.Number + 1 AS Number&lt;br /&gt;
FROM NumbersCTE&lt;br /&gt;
WHERE EXISTS(&lt;br /&gt;
SELECT #bla.id&lt;br /&gt;
FROM #bla&lt;br /&gt;
WHERE #bla.id &gt; NumbersCTE.Number&lt;br /&gt;
)&lt;br /&gt;
)&lt;br /&gt;
SELECT NumbersCTE.Number&lt;br /&gt;
FROM NumbersCTE&lt;br /&gt;
LEFT OUTER JOIN&lt;br /&gt;
#bla&lt;br /&gt;
ON NumbersCTE.Number = #bla.id&lt;br /&gt;
WHERE #bla.id IS NULL;&lt;br /&gt;
&lt;br /&gt;
-----------------------------------------------&lt;br /&gt;
&lt;br /&gt;
Numbers table&lt;br /&gt;
--------------&lt;br /&gt;
(6 row(s) affected)&lt;br /&gt;
Table &#039;#bla&#039;. Scan count 2, logical reads 2, &lt;br /&gt;
Table &#039;Numbers&#039;. Scan count 1, logical reads 2, &lt;br /&gt;
&lt;br /&gt;
CTE&lt;br /&gt;
------------&lt;br /&gt;
(6 row(s) affected)&lt;br /&gt;
Table &#039;#bla&#039;. Scan count 2, logical reads 24, &lt;br /&gt;
Table &#039;Worktable&#039;. Scan count 2, logical reads 74,]]></description>
		<content:encoded><![CDATA[<p>It is a nice solution</p>
<p>I checked the reads between the two solutions</p>
<p>&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8211;</p>
<p>set statistics io on</p>
<p>SELECT number<br />
FROM Numbers n<br />
LEFT join #bla b ON n.number = b.id<br />
WHERE n.number &lt; (SELECT MAX(id) FROM #bla)<br />
and  b.id IS null<br />
go</p>
<p>WITH NumbersCTE (Number)<br />
AS<br />
(<br />
SELECT CAST(1 AS int) As Number<br />
UNION ALL<br />
SELECT NumbersCTE.Number + 1 AS Number<br />
FROM NumbersCTE<br />
WHERE EXISTS(<br />
SELECT #bla.id<br />
FROM #bla<br />
WHERE #bla.id > NumbersCTE.Number<br />
)<br />
)<br />
SELECT NumbersCTE.Number<br />
FROM NumbersCTE<br />
LEFT OUTER JOIN<br />
#bla<br />
ON NumbersCTE.Number = #bla.id<br />
WHERE #bla.id IS NULL;</p>
<p>&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8211;</p>
<p>Numbers table<br />
&#8212;&#8212;&#8212;&#8212;&#8211;<br />
(6 row(s) affected)<br />
Table &#8216;#bla&#8217;. Scan count 2, logical reads 2, <br />
Table &#8216;Numbers&#8217;. Scan count 1, logical reads 2, </p>
<p>CTE<br />
&#8212;&#8212;&#8212;&#8212;<br />
(6 row(s) affected)<br />
Table &#8216;#bla&#8217;. Scan count 2, logical reads 24, <br />
Table &#8216;Worktable&#8217;. Scan count 2, logical reads 74,</p>
]]></content:encoded>
	</item>
	<item>
		<title>By: Luciano Evaristo Guerche (Gor</title>
		<link>/index.php/datamgmt/dbprogramming/how-to-return-all-the-skipped-identity-v/#comment-2368</link>
		<dc:creator><![CDATA[Luciano Evaristo Guerche (Gor]]></dc:creator>
		<pubDate>Tue, 19 Jan 2010 17:43:26 +0000</pubDate>
		<guid isPermaLink="false">/index.php/2010/01/how-to-return-all-the-skipped-identity-v/#comment-2368</guid>
		<description><![CDATA[Denis,&lt;br /&gt;
&lt;br /&gt;
I would appreciate your comments about my implementation using CTEs.&lt;br /&gt;
&lt;br /&gt;
--&lt;br /&gt;
&lt;br /&gt;
CREATE TABLE #bla(id INT PRIMARY KEY CLUSTERED);&lt;br /&gt;
&lt;br /&gt;
INSERT #bla VALUES(1);&lt;br /&gt;
INSERT #bla VALUES(2);&lt;br /&gt;
INSERT #bla VALUES(4);&lt;br /&gt;
INSERT #bla VALUES(5);&lt;br /&gt;
INSERT #bla VALUES(9);&lt;br /&gt;
INSERT #bla VALUES(12);&lt;br /&gt;
&lt;br /&gt;
WITH NumbersCTE (Number)&lt;br /&gt;
AS&lt;br /&gt;
(&lt;br /&gt;
 SELECT CAST(1 AS int) As Number&lt;br /&gt;
 UNION ALL&lt;br /&gt;
 SELECT NumbersCTE.Number + 1 AS Number&lt;br /&gt;
 FROM NumbersCTE&lt;br /&gt;
 WHERE EXISTS(&lt;br /&gt;
              SELECT #bla.id&lt;br /&gt;
              FROM #bla&lt;br /&gt;
              WHERE #bla.id &gt; NumbersCTE.Number&lt;br /&gt;
             )&lt;br /&gt;
)&lt;br /&gt;
SELECT NumbersCTE.Number&lt;br /&gt;
FROM NumbersCTE&lt;br /&gt;
  LEFT OUTER JOIN&lt;br /&gt;
     #bla&lt;br /&gt;
     ON NumbersCTE.Number = #bla.id&lt;br /&gt;
WHERE #bla.id IS NULL;&lt;br /&gt;]]></description>
		<content:encoded><![CDATA[<p>Denis,</p>
<p>I would appreciate your comments about my implementation using CTEs.</p>
<p>&#8212;</p>
<p>CREATE TABLE #bla(id INT PRIMARY KEY CLUSTERED);</p>
<p>INSERT #bla VALUES(1);<br />
INSERT #bla VALUES(2);<br />
INSERT #bla VALUES(4);<br />
INSERT #bla VALUES(5);<br />
INSERT #bla VALUES(9);<br />
INSERT #bla VALUES(12);</p>
<p>WITH NumbersCTE (Number)<br />
AS<br />
(<br />
 SELECT CAST(1 AS int) As Number<br />
 UNION ALL<br />
 SELECT NumbersCTE.Number + 1 AS Number<br />
 FROM NumbersCTE<br />
 WHERE EXISTS(<br />
              SELECT #bla.id<br />
              FROM #bla<br />
              WHERE #bla.id > NumbersCTE.Number<br />
             )<br />
)<br />
SELECT NumbersCTE.Number<br />
FROM NumbersCTE<br />
  LEFT OUTER JOIN<br />
     #bla<br />
     ON NumbersCTE.Number = #bla.id<br />
WHERE #bla.id IS NULL;</p>
]]></content:encoded>
	</item>
</channel>
</rss>
