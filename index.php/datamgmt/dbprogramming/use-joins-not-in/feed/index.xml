<?xml version="1.0" encoding="UTF-8"?><rss version="2.0"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:atom="http://www.w3.org/2005/Atom"
	xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
	
	>
<channel>
	<title>Comments on: Use Joins, Not IN</title>
	<atom:link href="/index.php/datamgmt/dbprogramming/use-joins-not-in/feed/" rel="self" type="application/rss+xml" />
	<link>/index.php/datamgmt/dbprogramming/use-joins-not-in/</link>
	<description>A Technical Community for IT Professionals</description>
	<lastBuildDate>Tue, 26 Feb 2019 12:40:14 +0000</lastBuildDate>
	<sy:updatePeriod>hourly</sy:updatePeriod>
	<sy:updateFrequency>1</sy:updateFrequency>
	<generator>https://wordpress.org/?v=4.6.1</generator>
	<item>
		<title>By: David Forck (thirster42)</title>
		<link>/index.php/datamgmt/dbprogramming/use-joins-not-in/#comment-1130</link>
		<dc:creator><![CDATA[David Forck (thirster42)]]></dc:creator>
		<pubDate>Mon, 06 Apr 2009 11:31:22 +0000</pubDate>
		<guid isPermaLink="false">/index.php/2009/04/use-joins-not-in/#comment-1130</guid>
		<description><![CDATA[I&#039;ll keep this in mind and play with it.]]></description>
		<content:encoded><![CDATA[<p>I&#8217;ll keep this in mind and play with it.</p>
]]></content:encoded>
	</item>
	<item>
		<title>By: wqw</title>
		<link>/index.php/datamgmt/dbprogramming/use-joins-not-in/#comment-1129</link>
		<dc:creator><![CDATA[wqw]]></dc:creator>
		<pubDate>Sat, 04 Apr 2009 10:42:41 +0000</pubDate>
		<guid isPermaLink="false">/index.php/2009/04/use-joins-not-in/#comment-1129</guid>
		<description><![CDATA[My experience is that old-school style (IN/EXISTS) has a certain advantage in this particular case. &lt;br /&gt;
&lt;br /&gt;
In the FROM clause of the first query you have only one table - #main - so the cardinality of the resultset if less than or equal to &#124;#main&#124;. In the second query just by looking at the FROM clause the query optimizer puts an upper bound of the resultset cardinality as &#124;#main&#124;*&#124;#status&#124;. It has to look for unique constraints on the columns in the equijoin to limit the resultset to &#124;#main&#124;. If the ON clause is not simple = operator things get ugly.&lt;br /&gt;
&lt;br /&gt;
This said I&#039;ve seen numerous occasions when the query optimizer does not figure out there is a unique (e.g. derived table with a GROUP BY) on one the columns in the equijoin and creates sub-optimal execution plans.&lt;br /&gt;
&lt;br /&gt;
Obviously the JOIN is somewhat more powerful construct here because it brings the columns from second table (#status) to the namespace (column list) of the SELECT clause. But if the goal is only to &quot;filter&quot; rows from #main, as is this case, the &quot;weaker&quot; IN/EXISTS will be sufficient *and* often more performant.&lt;br /&gt;
&lt;br /&gt;
cheers,&lt;br /&gt;
&#060;/wqw&#062;]]></description>
		<content:encoded><![CDATA[<p>My experience is that old-school style (IN/EXISTS) has a certain advantage in this particular case. </p>
<p>In the FROM clause of the first query you have only one table &#8211; #main &#8211; so the cardinality of the resultset if less than or equal to |#main|. In the second query just by looking at the FROM clause the query optimizer puts an upper bound of the resultset cardinality as |#main|*|#status|. It has to look for unique constraints on the columns in the equijoin to limit the resultset to |#main|. If the ON clause is not simple = operator things get ugly.</p>
<p>This said I&#8217;ve seen numerous occasions when the query optimizer does not figure out there is a unique (e.g. derived table with a GROUP BY) on one the columns in the equijoin and creates sub-optimal execution plans.</p>
<p>Obviously the JOIN is somewhat more powerful construct here because it brings the columns from second table (#status) to the namespace (column list) of the SELECT clause. But if the goal is only to &#8220;filter&#8221; rows from #main, as is this case, the &#8220;weaker&#8221; IN/EXISTS will be sufficient *and* often more performant.</p>
<p>cheers,<br />
&lt;/wqw&gt;</p>
]]></content:encoded>
	</item>
	<item>
		<title>By: SQLDenis</title>
		<link>/index.php/datamgmt/dbprogramming/use-joins-not-in/#comment-1128</link>
		<dc:creator><![CDATA[SQLDenis]]></dc:creator>
		<pubDate>Sat, 04 Apr 2009 08:57:21 +0000</pubDate>
		<guid isPermaLink="false">/index.php/2009/04/use-joins-not-in/#comment-1128</guid>
		<description><![CDATA[you have more choices, what about EXISTS for example?I prefer EXISTS over IN anytime because of possible NULL values]]></description>
		<content:encoded><![CDATA[<p>you have more choices, what about EXISTS for example?I prefer EXISTS over IN anytime because of possible NULL values</p>
]]></content:encoded>
	</item>
	<item>
		<title>By: Leeland Clay</title>
		<link>/index.php/datamgmt/dbprogramming/use-joins-not-in/#comment-1127</link>
		<dc:creator><![CDATA[Leeland Clay]]></dc:creator>
		<pubDate>Sat, 04 Apr 2009 02:22:19 +0000</pubDate>
		<guid isPermaLink="false">/index.php/2009/04/use-joins-not-in/#comment-1127</guid>
		<description><![CDATA[Excellent post....and I think you should give that friend that prompted this post a beer or 12 :)]]></description>
		<content:encoded><![CDATA[<p>Excellent post&#8230;.and I think you should give that friend that prompted this post a beer or 12 ðŸ™‚</p>
]]></content:encoded>
	</item>
</channel>
</rss>
