<?xml version="1.0" encoding="UTF-8"?><rss version="2.0"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:atom="http://www.w3.org/2005/Atom"
	xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
	
	>
<channel>
	<title>Comments on: SQL Server: When 8000 Characters Is Not Enough</title>
	<atom:link href="/index.php/datamgmt/dbprogramming/mssqlserver/sql-2000-when-8000-characters-is-not-eno/feed/" rel="self" type="application/rss+xml" />
	<link>/index.php/datamgmt/dbprogramming/mssqlserver/sql-2000-when-8000-characters-is-not-eno/</link>
	<description>A Technical Community for IT Professionals</description>
	<lastBuildDate>Tue, 26 Feb 2019 12:40:14 +0000</lastBuildDate>
	<sy:updatePeriod>hourly</sy:updatePeriod>
	<sy:updateFrequency>1</sy:updateFrequency>
	<generator>https://wordpress.org/?v=4.6.1</generator>
	<item>
		<title>By: Erik</title>
		<link>/index.php/datamgmt/dbprogramming/mssqlserver/sql-2000-when-8000-characters-is-not-eno/#comment-1147</link>
		<dc:creator><![CDATA[Erik]]></dc:creator>
		<pubDate>Sun, 27 Jan 2013 20:40:40 +0000</pubDate>
		<guid isPermaLink="false">/index.php/2009/04/sql-2000-when-8000-characters-is-not-eno/#comment-1147</guid>
		<description><![CDATA[Joshua,&lt;br /&gt;
&lt;br /&gt;
I recommend against it because it&#039;s very difficult to maintain. And filling these strings is quite problematic if they are coming from a query.&lt;br /&gt;
&lt;br /&gt;
Let&#039;s say you are writing an instead-of trigger to run against a table with 100 columns. You only get 80 characters per column--including all the rest of the script--to fit it in 8000 characters. That is *not* going to happen, especially if there is any complexity to the query. Now, I&#039;ve written scripts that dealt with this by repeating the SQL-generation multiple times (taking each next chunk each time) but oh, how so unmaintainable and error-prone that is.&lt;br /&gt;
&lt;br /&gt;
I&#039;m glad to have varchar(max) in SQL 2005, and hope to never go back.]]></description>
		<content:encoded><![CDATA[<p>Joshua,</p>
<p>I recommend against it because it&#8217;s very difficult to maintain. And filling these strings is quite problematic if they are coming from a query.</p>
<p>Let&#8217;s say you are writing an instead-of trigger to run against a table with 100 columns. You only get 80 characters per column&#8211;including all the rest of the script&#8211;to fit it in 8000 characters. That is *not* going to happen, especially if there is any complexity to the query. Now, I&#8217;ve written scripts that dealt with this by repeating the SQL-generation multiple times (taking each next chunk each time) but oh, how so unmaintainable and error-prone that is.</p>
<p>I&#8217;m glad to have varchar(max) in SQL 2005, and hope to never go back.</p>
]]></content:encoded>
	</item>
	<item>
		<title>By: Joshua Magsino</title>
		<link>/index.php/datamgmt/dbprogramming/mssqlserver/sql-2000-when-8000-characters-is-not-eno/#comment-1140</link>
		<dc:creator><![CDATA[Joshua Magsino]]></dc:creator>
		<pubDate>Thu, 17 Jan 2013 01:13:40 +0000</pubDate>
		<guid isPermaLink="false">/index.php/2009/04/sql-2000-when-8000-characters-is-not-eno/#comment-1140</guid>
		<description><![CDATA[Just a follow up question, why do you not recommend using this type of query?&lt;br /&gt;
&lt;br /&gt;
    DECLARE&lt;br /&gt;
       @SQL1 varchar(8000),&lt;br /&gt;
       @SQL2 varchar(8000),&lt;br /&gt;
       @SQL3 varchar(8000),&lt;br /&gt;
       @SQL4 varchar(8000)&lt;br /&gt;
     &lt;br /&gt;
    SET @SQl1 = &#039;8000 characters here&#039;&lt;br /&gt;
    SET @SQl2 = &#039;8000 characters here&#039;&lt;br /&gt;
    SET @SQl3 = &#039;8000 characters here&#039;&lt;br /&gt;
    SET @SQl4 = &#039;8000 characters here&#039;&lt;br /&gt;
     &lt;br /&gt;
    EXEC (@SQL1 + @SQL2 + @SQL3 + @SQL4)&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;
could i do something similar using sp_executesql]]></description>
		<content:encoded><![CDATA[<p>Just a follow up question, why do you not recommend using this type of query?</p>
<p>    DECLARE<br />
       @SQL1 varchar(8000),<br />
       @SQL2 varchar(8000),<br />
       @SQL3 varchar(8000),<br />
       @SQL4 varchar(8000)</p>
<p>    SET @SQl1 = &#8216;8000 characters here&#8217;<br />
    SET @SQl2 = &#8216;8000 characters here&#8217;<br />
    SET @SQl3 = &#8216;8000 characters here&#8217;<br />
    SET @SQl4 = &#8216;8000 characters here&#8217;</p>
<p>    EXEC (@SQL1 + @SQL2 + @SQL3 + @SQL4)</p>
<p>
could i do something similar using sp_executesql</p>
]]></content:encoded>
	</item>
	<item>
		<title>By: Joshua Magsino</title>
		<link>/index.php/datamgmt/dbprogramming/mssqlserver/sql-2000-when-8000-characters-is-not-eno/#comment-1139</link>
		<dc:creator><![CDATA[Joshua Magsino]]></dc:creator>
		<pubDate>Thu, 17 Jan 2013 01:06:27 +0000</pubDate>
		<guid isPermaLink="false">/index.php/2009/04/sql-2000-when-8000-characters-is-not-eno/#comment-1139</guid>
		<description><![CDATA[I dont know if you will read this but, dude, thanks for the info! i need this especially that my query is at 16000+ characters and i need to create a dynamic query for it! thanks a bunch!]]></description>
		<content:encoded><![CDATA[<p>I dont know if you will read this but, dude, thanks for the info! i need this especially that my query is at 16000+ characters and i need to create a dynamic query for it! thanks a bunch!</p>
]]></content:encoded>
	</item>
	<item>
		<title>By: Erik</title>
		<link>/index.php/datamgmt/dbprogramming/mssqlserver/sql-2000-when-8000-characters-is-not-eno/#comment-1135</link>
		<dc:creator><![CDATA[Erik]]></dc:creator>
		<pubDate>Wed, 09 May 2012 20:36:36 +0000</pubDate>
		<guid isPermaLink="false">/index.php/2009/04/sql-2000-when-8000-characters-is-not-eno/#comment-1135</guid>
		<description><![CDATA[Hi Chris,&lt;br /&gt;
&lt;br /&gt;
Thanks for commenting.&lt;br /&gt;
&lt;br /&gt;
Since the time of writing this article, I&#039;ve come to realize that directly using COM objects in SQL Server via the SP_OA procedures is problematic. There can be serious memory leaks, plus there are issues surrounding in-process DLLs running (I think they could take down the SQL server if they had a severe enough error).&lt;br /&gt;
&lt;br /&gt;
About your specific question, I can see what you mean. I had truly never desired before to get deep into manipulating long text strings, and I didn&#039;t understand until now that READTEXT is not a function and does not return a value, thus can&#039;t be used in an expression. It is a statement that generates a *rowset* consisting of a single column and row. You could put READTEXT in a stored procedure, &#039;then INSERT Table EXEC YourSP&#039;, then read from the table, but this would be silly indirection when you could just read your original table to begin with. So, forget readtext and just use the Substring function to get any 8000-character chunk of your text column (the position parameter can be greater than 8000). But, you&#039;re still stuck with how to get the entire value into the object&#039;s property.&lt;br /&gt;
&lt;br /&gt;
If you absolutely must persist with SP_OA and can&#039;t use one of my ideas below, then I can only think to use dynamic SQL to accomplish the property setting. You would declare 10-20 variables and stuff each of them with a piece of a single statement that sets the property, something like:&lt;br /&gt;
&lt;br /&gt;
DECLARE @SQL1 nvarchar(4000), @SQL2 nvarchar(4000) ...;&lt;br /&gt;
&lt;br /&gt;
SET @SQL1 = Replace(Substring(BodyColumn, 1, 3500) &#039;&#039;&#039;&#039;&#039;&#039;, &#039;&#039;&#039;&#039;)&lt;br /&gt;
FROM YourTable WHERE EmailID = @EmailIDParameter;&lt;br /&gt;
-- need room for single quotes to turn into double quotes&lt;br /&gt;
&lt;br /&gt;
SET @SQL2 = Replace(Substring(BodyColumn, 3501, 3500) &#039;&#039;&#039;&#039;&#039;&#039;, &#039;&#039;&#039;&#039;)&lt;br /&gt;
FROM YourTable WHERE EmailID = @EmailIDParameter;&lt;br /&gt;
&lt;br /&gt;
...&lt;br /&gt;
&lt;br /&gt;
EXEC sp_executesql N&#039;EXEC @ReturnCode = SP_OASETPROPERTY @CDOMessage, &#039;&#039;HtmlBody&#039;&#039;, &#039;&#039;&#039; + @SQL1 + @SQL2 + @SQL3 + ... + @SQL19 + @SQL20 + &#039;&#039;&#039;&#039;, N&#039;@CDOMessage int, @ReturnCode int OUTPUT&#039;, @CDOMessage, @ReturnCode OUTPUT;&lt;br /&gt;
&lt;br /&gt;
However, this is really, really painful. Instead, I recommend that you put your email contents into a table, then use any programming language you desire to poll the database every few seconds and look for a new email with a query like the following:&lt;br /&gt;
&lt;br /&gt;
BEGIN TRAN;&lt;br /&gt;
SELECT TOP 1 @EmailID = EmailID&lt;br /&gt;
FROM dbo.PendingEmail WITH (UPDLOCK, HOLDLOCK, READPAST)&lt;br /&gt;
WHERE E.Status = &#039;Ready&#039;;&lt;br /&gt;
&lt;br /&gt;
UPDATE dbo.PendingEmail&lt;br /&gt;
SET E.Status = &#039;In Process&#039;&lt;br /&gt;
WHERE E.EmailID = @EmailID;&lt;br /&gt;
&lt;br /&gt;
SELECT * FROM dbo.PendingEmail&lt;br /&gt;
WHERE E.EmailID = @EmailID;&lt;br /&gt;
COMMIT TRAN;&lt;br /&gt;
&lt;br /&gt;
(Bote: this is script that will work with SQL 2000. For SQL 2005 you can switch to varchar(max) and be done already, but if you were to use this method in SQL 2005 you could just update with an OUTPUT clause all in one statement.)&lt;br /&gt;
&lt;br /&gt;
The recordset will ahve all the email properties and can be easily used to do the COM object manipulation and email sending. Some versions of classic ADO may need to use GetChunk to pull in those text column values, but it can be done.&lt;br /&gt;
&lt;br /&gt;
As for other alternates, you might consider looking into the built in DBMail, or the older mail function in SQL Server (can&#039;t remember its name now). Also, some research into SQL Server Service Broker could be useful to you, as an alternate means of posting messages to a service that it needs to handle some new email.&lt;br /&gt;
&lt;br /&gt;
VBScript can even be run as a job inside of SQL Server.]]></description>
		<content:encoded><![CDATA[<p>Hi Chris,</p>
<p>Thanks for commenting.</p>
<p>Since the time of writing this article, I&#8217;ve come to realize that directly using COM objects in SQL Server via the SP_OA procedures is problematic. There can be serious memory leaks, plus there are issues surrounding in-process DLLs running (I think they could take down the SQL server if they had a severe enough error).</p>
<p>About your specific question, I can see what you mean. I had truly never desired before to get deep into manipulating long text strings, and I didn&#8217;t understand until now that READTEXT is not a function and does not return a value, thus can&#8217;t be used in an expression. It is a statement that generates a *rowset* consisting of a single column and row. You could put READTEXT in a stored procedure, &#8216;then INSERT Table EXEC YourSP&#8217;, then read from the table, but this would be silly indirection when you could just read your original table to begin with. So, forget readtext and just use the Substring function to get any 8000-character chunk of your text column (the position parameter can be greater than 8000). But, you&#8217;re still stuck with how to get the entire value into the object&#8217;s property.</p>
<p>If you absolutely must persist with SP_OA and can&#8217;t use one of my ideas below, then I can only think to use dynamic SQL to accomplish the property setting. You would declare 10-20 variables and stuff each of them with a piece of a single statement that sets the property, something like:</p>
<p>DECLARE @SQL1 nvarchar(4000), @SQL2 nvarchar(4000) &#8230;;</p>
<p>SET @SQL1 = Replace(Substring(BodyColumn, 1, 3500) &#8221;&#8221;&#8221;, &#8221;&#8221;)<br />
FROM YourTable WHERE EmailID = @EmailIDParameter;<br />
&#8212; need room for single quotes to turn into double quotes</p>
<p>SET @SQL2 = Replace(Substring(BodyColumn, 3501, 3500) &#8221;&#8221;&#8221;, &#8221;&#8221;)<br />
FROM YourTable WHERE EmailID = @EmailIDParameter;</p>
<p>&#8230;</p>
<p>EXEC sp_executesql N&#8217;EXEC @ReturnCode = SP_OASETPROPERTY @CDOMessage, &#8221;HtmlBody&#8221;, &#8221;&#8217; + @SQL1 + @SQL2 + @SQL3 + &#8230; + @SQL19 + @SQL20 + &#8221;&#8221;, N&#8217;@CDOMessage int, @ReturnCode int OUTPUT&#8217;, @CDOMessage, @ReturnCode OUTPUT;</p>
<p>However, this is really, really painful. Instead, I recommend that you put your email contents into a table, then use any programming language you desire to poll the database every few seconds and look for a new email with a query like the following:</p>
<p>BEGIN TRAN;<br />
SELECT TOP 1 @EmailID = EmailID<br />
FROM dbo.PendingEmail WITH (UPDLOCK, HOLDLOCK, READPAST)<br />
WHERE E.Status = &#8216;Ready&#8217;;</p>
<p>UPDATE dbo.PendingEmail<br />
SET E.Status = &#8216;In Process&#8217;<br />
WHERE E.EmailID = @EmailID;</p>
<p>SELECT * FROM dbo.PendingEmail<br />
WHERE E.EmailID = @EmailID;<br />
COMMIT TRAN;</p>
<p>(Bote: this is script that will work with SQL 2000. For SQL 2005 you can switch to varchar(max) and be done already, but if you were to use this method in SQL 2005 you could just update with an OUTPUT clause all in one statement.)</p>
<p>The recordset will ahve all the email properties and can be easily used to do the COM object manipulation and email sending. Some versions of classic ADO may need to use GetChunk to pull in those text column values, but it can be done.</p>
<p>As for other alternates, you might consider looking into the built in DBMail, or the older mail function in SQL Server (can&#8217;t remember its name now). Also, some research into SQL Server Service Broker could be useful to you, as an alternate means of posting messages to a service that it needs to handle some new email.</p>
<p>VBScript can even be run as a job inside of SQL Server.</p>
]]></content:encoded>
	</item>
	<item>
		<title>By: Chris</title>
		<link>/index.php/datamgmt/dbprogramming/mssqlserver/sql-2000-when-8000-characters-is-not-eno/#comment-1134</link>
		<dc:creator><![CDATA[Chris]]></dc:creator>
		<pubDate>Wed, 09 May 2012 18:07:25 +0000</pubDate>
		<guid isPermaLink="false">/index.php/2009/04/sql-2000-when-8000-characters-is-not-eno/#comment-1134</guid>
		<description><![CDATA[I&#039;ve got the same issue as nexpron above.  Not sure how to set the HTML Body attribute in SendMail using the text pointer passed into the stored proc as you suggest.  I tried the following but it won&#039;t compile:&lt;br /&gt;
&lt;br /&gt;
EXEC @ReturnCode = SP_OASETPROPERTY @CDOMessage, &#039;HtmlBody&#039;,  READTEXT dbo.TextTable.longdata @ptrval 0 1]]></description>
		<content:encoded><![CDATA[<p>I&#8217;ve got the same issue as nexpron above.  Not sure how to set the HTML Body attribute in SendMail using the text pointer passed into the stored proc as you suggest.  I tried the following but it won&#8217;t compile:</p>
<p>EXEC @ReturnCode = SP_OASETPROPERTY @CDOMessage, &#8216;HtmlBody&#8217;,  READTEXT dbo.TextTable.longdata @ptrval 0 1</p>
]]></content:encoded>
	</item>
	<item>
		<title>By: Erik</title>
		<link>/index.php/datamgmt/dbprogramming/mssqlserver/sql-2000-when-8000-characters-is-not-eno/#comment-1136</link>
		<dc:creator><![CDATA[Erik]]></dc:creator>
		<pubDate>Mon, 06 Dec 2010 02:20:01 +0000</pubDate>
		<guid isPermaLink="false">/index.php/2009/04/sql-2000-when-8000-characters-is-not-eno/#comment-1136</guid>
		<description><![CDATA[nexpron, you would probably want to rewrite the SendMail stored procedure to accept a pointer to a text column, which could then be used to set the HTML Body attribute.&lt;br /&gt;
&lt;br /&gt;
Sorry I missed your comment earlier.]]></description>
		<content:encoded><![CDATA[<p>nexpron, you would probably want to rewrite the SendMail stored procedure to accept a pointer to a text column, which could then be used to set the HTML Body attribute.</p>
<p>Sorry I missed your comment earlier.</p>
]]></content:encoded>
	</item>
	<item>
		<title>By: nexpron</title>
		<link>/index.php/datamgmt/dbprogramming/mssqlserver/sql-2000-when-8000-characters-is-not-eno/#comment-1141</link>
		<dc:creator><![CDATA[nexpron]]></dc:creator>
		<pubDate>Fri, 12 Nov 2010 10:50:18 +0000</pubDate>
		<guid isPermaLink="false">/index.php/2009/04/sql-2000-when-8000-characters-is-not-eno/#comment-1141</guid>
		<description><![CDATA[Most of this article is very nice. But last sql command is not clear. &lt;br /&gt;
EXEC SendMail &#039;emtucifor@example.com&#039;, &#039;emtucifor@example.com&#039;, &#039;This is a test email&#039;, @HTMLBody = &#039;&#060;8000 characters here&gt;&#039;&lt;br /&gt;
My question is: how we call this stored procedure? Of course, we can fill @HTMLBody parameter by hand, but what about situation then we get data from temporal table? For example:&lt;br /&gt;
CREATE TABLE #Tabler (id INT IDENTITY(1,1),longdata TEXT)&lt;br /&gt;
INSERT #Tabler (longdata) VALUES (&#039;dane: wi&#281;cej ni&#380; pojemno&#347;&#263; varchar(8000)rt&#039;)&lt;br /&gt;
EXEC SendMail &#039;emtucifor@example.com&#039;, &#039;emtucifor@example.com&#039;, &#039;This is a test email&#039;, /* there first row from #Tabler *?/&lt;br /&gt;
DROP TABLE #Tabler &lt;br /&gt;
&lt;br /&gt;
I remember that we can&#039;t create local variable type TEXT.]]></description>
		<content:encoded><![CDATA[<p>Most of this article is very nice. But last sql command is not clear. <br />
EXEC SendMail &#8217;emtucifor@example.com&#8217;, &#8217;emtucifor@example.com&#8217;, &#8216;This is a test email&#8217;, @HTMLBody = &#8216;&lt;8000 characters here>&#8217;<br />
My question is: how we call this stored procedure? Of course, we can fill @HTMLBody parameter by hand, but what about situation then we get data from temporal table? For example:<br />
CREATE TABLE #Tabler (id INT IDENTITY(1,1),longdata TEXT)<br />
INSERT #Tabler (longdata) VALUES (&#8216;dane: wi&#281;cej ni&#380; pojemno&#347;&#263; varchar(8000)rt&#8217;)<br />
EXEC SendMail &#8217;emtucifor@example.com&#8217;, &#8217;emtucifor@example.com&#8217;, &#8216;This is a test email&#8217;, /* there first row from #Tabler *?/<br />
DROP TABLE #Tabler </p>
<p>I remember that we can&#8217;t create local variable type TEXT.</p>
]]></content:encoded>
	</item>
	<item>
		<title>By: Mauricio Zavala G.</title>
		<link>/index.php/datamgmt/dbprogramming/mssqlserver/sql-2000-when-8000-characters-is-not-eno/#comment-1146</link>
		<dc:creator><![CDATA[Mauricio Zavala G.]]></dc:creator>
		<pubDate>Thu, 15 Oct 2009 18:37:45 +0000</pubDate>
		<guid isPermaLink="false">/index.php/2009/04/sql-2000-when-8000-characters-is-not-eno/#comment-1146</guid>
		<description><![CDATA[&lt;br /&gt;
Thanx for the detail.]]></description>
		<content:encoded><![CDATA[<p>
Thanx for the detail.</p>
]]></content:encoded>
	</item>
	<item>
		<title>By: Tatoba</title>
		<link>/index.php/datamgmt/dbprogramming/mssqlserver/sql-2000-when-8000-characters-is-not-eno/#comment-1138</link>
		<dc:creator><![CDATA[Tatoba]]></dc:creator>
		<pubDate>Wed, 07 Oct 2009 12:42:31 +0000</pubDate>
		<guid isPermaLink="false">/index.php/2009/04/sql-2000-when-8000-characters-is-not-eno/#comment-1138</guid>
		<description><![CDATA[Thanks lot best information]]></description>
		<content:encoded><![CDATA[<p>Thanks lot best information</p>
]]></content:encoded>
	</item>
	<item>
		<title>By: SoehnelS</title>
		<link>/index.php/datamgmt/dbprogramming/mssqlserver/sql-2000-when-8000-characters-is-not-eno/#comment-1137</link>
		<dc:creator><![CDATA[SoehnelS]]></dc:creator>
		<pubDate>Wed, 24 Jun 2009 09:58:22 +0000</pubDate>
		<guid isPermaLink="false">/index.php/2009/04/sql-2000-when-8000-characters-is-not-eno/#comment-1137</guid>
		<description><![CDATA[Thanks!

I read the thread at http://forum.lessthandot.com/
and find this is the best article I read for a long time!

(Sorry for my badly english...)

Greetings from Germany!
Sven]]></description>
		<content:encoded><![CDATA[<p>Thanks!</p>
<p>I read the thread at <a href="http://forum.lessthandot.com/" rel="nofollow">http://forum.lessthandot.com/</a><br />
and find this is the best article I read for a long time!</p>
<p>(Sorry for my badly english&#8230;)</p>
<p>Greetings from Germany!<br />
Sven</p>
]]></content:encoded>
	</item>
</channel>
</rss>
