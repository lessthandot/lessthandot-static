<?xml version="1.0" encoding="UTF-8"?><rss version="2.0"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:atom="http://www.w3.org/2005/Atom"
	xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
	
	>
<channel>
	<title>Comments on: Performance implications using NewID() in Random order</title>
	<atom:link href="/index.php/datamgmt/dbprogramming/mssqlserver/performance-implications-with-newid/feed/" rel="self" type="application/rss+xml" />
	<link>/index.php/datamgmt/dbprogramming/mssqlserver/performance-implications-with-newid/</link>
	<description>A Technical Community for IT Professionals</description>
	<lastBuildDate>Tue, 26 Feb 2019 12:40:14 +0000</lastBuildDate>
	<sy:updatePeriod>hourly</sy:updatePeriod>
	<sy:updateFrequency>1</sy:updateFrequency>
	<generator>https://wordpress.org/?v=4.6.1</generator>
	<item>
		<title>By: Ramireddy</title>
		<link>/index.php/datamgmt/dbprogramming/mssqlserver/performance-implications-with-newid/#comment-3202</link>
		<dc:creator><![CDATA[Ramireddy]]></dc:creator>
		<pubDate>Mon, 20 Sep 2010 10:28:45 +0000</pubDate>
		<guid isPermaLink="false">/index.php/2010/09/performance-implications-with-newid/#comment-3202</guid>
		<description><![CDATA[SQL Optimizer will works in Cost-based approach. which ever approach, will have less cost, it will follow that approach.&lt;br /&gt;
Choosing The Clustered Index or Non Clustered Index based on the Selectivity of records.  The more records u select, the more chances that otimizer will choose for CI. &lt;br /&gt;
I will tell u an example:&lt;br /&gt;
Suppose, an CI is across 5000 pages with 5  Levels&lt;br /&gt;
and an Non-CI is across 500 Pages with 2 Levels&lt;br /&gt;
If u execute my CTE Type of query, &lt;br /&gt;
If you select 10 records, &lt;br /&gt;
&lt;br /&gt;
if It follows CI approach, it will always reads 5000 Pages... &lt;br /&gt;
If it follows Non-CI approach,it reads 550(500 + 5 * 10) Pages &lt;br /&gt;
&lt;br /&gt;
So, here optimizer will go for Non-CI&lt;br /&gt;
&lt;br /&gt;
If you select 100 records, CI approach as usual reads5000 Pages, Non -CI approach reads, 1000(500 + 5 * 100) Pages.&lt;br /&gt;
&lt;br /&gt;
So, here otimizer mostly will go for Non-CI&lt;br /&gt;
&lt;br /&gt;
If you select 1000 records, CI approach as usual reads5000 pages, Non-CI takes, Non-CI approach reads, (5500) pages.&lt;br /&gt;
So, here it will choose Clustered Index.&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;
So, as the no of records increases, the chances more that it will depends on CI only.....&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;]]></description>
		<content:encoded><![CDATA[<p>SQL Optimizer will works in Cost-based approach. which ever approach, will have less cost, it will follow that approach.<br />
Choosing The Clustered Index or Non Clustered Index based on the Selectivity of records.  The more records u select, the more chances that otimizer will choose for CI. <br />
I will tell u an example:<br />
Suppose, an CI is across 5000 pages with 5  Levels<br />
and an Non-CI is across 500 Pages with 2 Levels<br />
If u execute my CTE Type of query, <br />
If you select 10 records, </p>
<p>if It follows CI approach, it will always reads 5000 Pages&#8230; <br />
If it follows Non-CI approach,it reads 550(500 + 5 * 10) Pages </p>
<p>So, here optimizer will go for Non-CI</p>
<p>If you select 100 records, CI approach as usual reads5000 Pages, Non -CI approach reads, 1000(500 + 5 * 100) Pages.</p>
<p>So, here otimizer mostly will go for Non-CI</p>
<p>If you select 1000 records, CI approach as usual reads5000 pages, Non-CI takes, Non-CI approach reads, (5500) pages.<br />
So, here it will choose Clustered Index.</p>
<p>
So, as the no of records increases, the chances more that it will depends on CI only&#8230;..</p>
]]></content:encoded>
	</item>
	<item>
		<title>By: Shanky</title>
		<link>/index.php/datamgmt/dbprogramming/mssqlserver/performance-implications-with-newid/#comment-3201</link>
		<dc:creator><![CDATA[Shanky]]></dc:creator>
		<pubDate>Mon, 20 Sep 2010 09:51:07 +0000</pubDate>
		<guid isPermaLink="false">/index.php/2010/09/performance-implications-with-newid/#comment-3201</guid>
		<description><![CDATA[Hi Ramireddy,&lt;br /&gt;
             Thanks for your posts.  In your example, you have quoted a scenario of having clustered and non-clustered index on the same column but I have read and seen that in case of duplication, the sql server chooses the clustered index.&lt;br /&gt;
&lt;br /&gt;
My question, is whether it is a good practice to have a clustered and a non-clustered index on the same column?]]></description>
		<content:encoded><![CDATA[<p>Hi Ramireddy,<br />
             Thanks for your posts.  In your example, you have quoted a scenario of having clustered and non-clustered index on the same column but I have read and seen that in case of duplication, the sql server chooses the clustered index.</p>
<p>My question, is whether it is a good practice to have a clustered and a non-clustered index on the same column?</p>
]]></content:encoded>
	</item>
	<item>
		<title>By: Ramireddy</title>
		<link>/index.php/datamgmt/dbprogramming/mssqlserver/performance-implications-with-newid/#comment-3200</link>
		<dc:creator><![CDATA[Ramireddy]]></dc:creator>
		<pubDate>Sat, 18 Sep 2010 10:57:00 +0000</pubDate>
		<guid isPermaLink="false">/index.php/2010/09/performance-implications-with-newid/#comment-3200</guid>
		<description><![CDATA[Chrissie,&lt;br /&gt;
&lt;br /&gt;
  We usually follow indian numeric system, where as you mostly will follow western numeric system.]]></description>
		<content:encoded><![CDATA[<p>Chrissie,</p>
<p>  We usually follow indian numeric system, where as you mostly will follow western numeric system.</p>
]]></content:encoded>
	</item>
	<item>
		<title>By: Christiaan Baes (chrissie1)</title>
		<link>/index.php/datamgmt/dbprogramming/mssqlserver/performance-implications-with-newid/#comment-3199</link>
		<dc:creator><![CDATA[Christiaan Baes (chrissie1)]]></dc:creator>
		<pubDate>Sat, 18 Sep 2010 06:07:52 +0000</pubDate>
		<guid isPermaLink="false">/index.php/2010/09/performance-implications-with-newid/#comment-3199</guid>
		<description><![CDATA[Rami it should be 180,000 there should not be a comma between the 1 and the 8]]></description>
		<content:encoded><![CDATA[<p>Rami it should be 180,000 there should not be a comma between the 1 and the 8</p>
]]></content:encoded>
	</item>
	<item>
		<title>By: Ramireddy</title>
		<link>/index.php/datamgmt/dbprogramming/mssqlserver/performance-implications-with-newid/#comment-3198</link>
		<dc:creator><![CDATA[Ramireddy]]></dc:creator>
		<pubDate>Sat, 18 Sep 2010 00:19:41 +0000</pubDate>
		<guid isPermaLink="false">/index.php/2010/09/performance-implications-with-newid/#comment-3198</guid>
		<description><![CDATA[Eric,&lt;br /&gt;
&lt;br /&gt;
 &quot;There&#039;s something wrong with the row count as given 1,80,000&quot;.&lt;br /&gt;
&lt;br /&gt;
Can you explain it pls more? If you see the picture, It showed a tooltip, stating that actual no of rows returned are 1,76,189...]]></description>
		<content:encoded><![CDATA[<p>Eric,</p>
<p> &#8220;There&#8217;s something wrong with the row count as given 1,80,000&#8221;.</p>
<p>Can you explain it pls more? If you see the picture, It showed a tooltip, stating that actual no of rows returned are 1,76,189&#8230;</p>
]]></content:encoded>
	</item>
	<item>
		<title>By: Brad Schulz</title>
		<link>/index.php/datamgmt/dbprogramming/mssqlserver/performance-implications-with-newid/#comment-3197</link>
		<dc:creator><![CDATA[Brad Schulz]]></dc:creator>
		<pubDate>Fri, 17 Sep 2010 14:29:29 +0000</pubDate>
		<guid isPermaLink="false">/index.php/2010/09/performance-implications-with-newid/#comment-3197</guid>
		<description><![CDATA[Ramireddy:&lt;br /&gt;
&lt;br /&gt;
Excellent point about Sales.SalesOrderDetail and its Clustered Index Key... that&#039;s exactly what was causing the Hash Join.  I should have made the JOIN to the CTE on (SalesOrderID,SalesOrderDetailID)... once I do that, then everything falls into place and you get the Nested Loops Join.  &lt;br /&gt;
&lt;br /&gt;
So the key point is that the CTE must produce the Clustered Index key (not necessarily the Primary Key, which could conceivably be housed in a NONclustered index)... that way the SEEK can be employed to acquire the rest of the columns in the Clustered Index.&lt;br /&gt;
&lt;br /&gt;
Unfortunately I chose the wrong table for my example... one that doesn&#039;t use its identity column as its clustered key.&lt;br /&gt;
&lt;br /&gt;
So your findings are absolutely spot on... excellent post.  Thanks!&lt;br /&gt;
&lt;br /&gt;
--Brad]]></description>
		<content:encoded><![CDATA[<p>Ramireddy:</p>
<p>Excellent point about Sales.SalesOrderDetail and its Clustered Index Key&#8230; that&#8217;s exactly what was causing the Hash Join.  I should have made the JOIN to the CTE on (SalesOrderID,SalesOrderDetailID)&#8230; once I do that, then everything falls into place and you get the Nested Loops Join.  </p>
<p>So the key point is that the CTE must produce the Clustered Index key (not necessarily the Primary Key, which could conceivably be housed in a NONclustered index)&#8230; that way the SEEK can be employed to acquire the rest of the columns in the Clustered Index.</p>
<p>Unfortunately I chose the wrong table for my example&#8230; one that doesn&#8217;t use its identity column as its clustered key.</p>
<p>So your findings are absolutely spot on&#8230; excellent post.  Thanks!</p>
<p>&#8211;Brad</p>
]]></content:encoded>
	</item>
	<item>
		<title>By: Erik</title>
		<link>/index.php/datamgmt/dbprogramming/mssqlserver/performance-implications-with-newid/#comment-3196</link>
		<dc:creator><![CDATA[Erik]]></dc:creator>
		<pubDate>Fri, 17 Sep 2010 14:19:46 +0000</pubDate>
		<guid isPermaLink="false">/index.php/2010/09/performance-implications-with-newid/#comment-3196</guid>
		<description><![CDATA[There&#039;s something wrong with the row count as given 1,80,000.]]></description>
		<content:encoded><![CDATA[<p>There&#8217;s something wrong with the row count as given 1,80,000.</p>
]]></content:encoded>
	</item>
	<item>
		<title>By: SQLDenis</title>
		<link>/index.php/datamgmt/dbprogramming/mssqlserver/performance-implications-with-newid/#comment-3195</link>
		<dc:creator><![CDATA[SQLDenis]]></dc:creator>
		<pubDate>Fri, 17 Sep 2010 12:17:50 +0000</pubDate>
		<guid isPermaLink="false">/index.php/2010/09/performance-implications-with-newid/#comment-3195</guid>
		<description><![CDATA[I ran the 2 different versions against a couple of  tables of different sizes in my db, here are the results&lt;br /&gt;
&lt;br /&gt;
&lt;strong&gt;Non CTE Version&lt;/strong&gt;&lt;br /&gt;
statistics IO: Scan count 9, logical reads 11581&lt;br /&gt;
statistics time 1125 ms&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;
&lt;strong&gt;CTE Version&lt;/strong&gt;&lt;br /&gt;
statistics IO: Scan count 9, logical reads 1382&lt;br /&gt;
statistics time 563 ms&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;
&lt;strong&gt;Non CTE Version&lt;/strong&gt;&lt;br /&gt;
statistics IO: Scan count 9, logical reads 82877&lt;br /&gt;
statistics time 5007 ms&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;
&lt;strong&gt;CTE Version&lt;/strong&gt;&lt;br /&gt;
statistics IO: Scan count 9, logical reads 5180&lt;br /&gt;
statistics time 2358 ms&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;
The CTE version outperformed the non CTE version]]></description>
		<content:encoded><![CDATA[<p>I ran the 2 different versions against a couple of  tables of different sizes in my db, here are the results</p>
<p><strong>Non CTE Version</strong><br />
statistics IO: Scan count 9, logical reads 11581<br />
statistics time 1125 ms</p>
<p>
<strong>CTE Version</strong><br />
statistics IO: Scan count 9, logical reads 1382<br />
statistics time 563 ms</p>
<p><strong>Non CTE Version</strong><br />
statistics IO: Scan count 9, logical reads 82877<br />
statistics time 5007 ms</p>
<p>
<strong>CTE Version</strong><br />
statistics IO: Scan count 9, logical reads 5180<br />
statistics time 2358 ms</p>
<p>
The CTE version outperformed the non CTE version</p>
]]></content:encoded>
	</item>
	<item>
		<title>By: Ramireddy</title>
		<link>/index.php/datamgmt/dbprogramming/mssqlserver/performance-implications-with-newid/#comment-3194</link>
		<dc:creator><![CDATA[Ramireddy]]></dc:creator>
		<pubDate>Fri, 17 Sep 2010 04:31:56 +0000</pubDate>
		<guid isPermaLink="false">/index.php/2010/09/performance-implications-with-newid/#comment-3194</guid>
		<description><![CDATA[Brad,&lt;br /&gt;
&lt;br /&gt;
    Thanks a lot for comment.&lt;br /&gt;
&lt;br /&gt;
Because of lapse of concentration,I added a filter in where clause, So, they became 2 logically different queries. CTE will retrieve only That day&#039;s 5 random records and other will retrieve 5 random records from entire table. So CTE version chooses seek. If i remove that condition it will go for scan. I will update that... &lt;br /&gt;
 &lt;br /&gt;
     But coming to Sales.SalesOrderDetails table, CTE version choosing Clustered index scan while retrieving details of the 5 records. Because The Clustered key for SalesOrderDetail is combination of SalesOrderId,SalesOrderDetailId, Which forces the clustered index scan. If the Clustered key is only, &quot;SalesOrderDetailId&quot; or If the First Key column of Clusteted Keys is &quot;SalesOrderDetailId&quot; , It will performs the Seek irrespective of tablesize.  &lt;br /&gt;
&lt;br /&gt;
 &lt;br /&gt;]]></description>
		<content:encoded><![CDATA[<p>Brad,</p>
<p>    Thanks a lot for comment.</p>
<p>Because of lapse of concentration,I added a filter in where clause, So, they became 2 logically different queries. CTE will retrieve only That day&#8217;s 5 random records and other will retrieve 5 random records from entire table. So CTE version chooses seek. If i remove that condition it will go for scan. I will update that&#8230; </p>
<p>     But coming to Sales.SalesOrderDetails table, CTE version choosing Clustered index scan while retrieving details of the 5 records. Because The Clustered key for SalesOrderDetail is combination of SalesOrderId,SalesOrderDetailId, Which forces the clustered index scan. If the Clustered key is only, &#8220;SalesOrderDetailId&#8221; or If the First Key column of Clusteted Keys is &#8220;SalesOrderDetailId&#8221; , It will performs the Seek irrespective of tablesize.  </p>
<p></p>
]]></content:encoded>
	</item>
	<item>
		<title>By: Brad Schulz</title>
		<link>/index.php/datamgmt/dbprogramming/mssqlserver/performance-implications-with-newid/#comment-3193</link>
		<dc:creator><![CDATA[Brad Schulz]]></dc:creator>
		<pubDate>Thu, 16 Sep 2010 18:16:30 +0000</pubDate>
		<guid isPermaLink="false">/index.php/2010/09/performance-implications-with-newid/#comment-3193</guid>
		<description><![CDATA[Hi Ramireddy...&lt;br /&gt;
&lt;br /&gt;
I was a little confused that your CTE query had a NonClustered Index SEEK in it.  And then I saw that the query you were running had a predicate of WHERE RecordDtTm=&#039;09/15/2010&#039;.  Perhaps you forgot to take that predicate out when testing.&lt;br /&gt;
&lt;br /&gt;
If you got rid of that predicate, it would still have to SCAN that index, and then do a lookup into the clustered index (or RID Lookup if it&#039;s a heap which is unlikely) to get all the columns.&lt;br /&gt;
&lt;br /&gt;
For a small table (like Production.Product in AdventureWorks) the CTE query is about twice as fast (because the nonclustered index it SCANs to get the random 5 ProductID&#039;s is so tiny).&lt;br /&gt;
&lt;br /&gt;
But for a large table (like Sales.SalesOrderDetail) they are about the same, but the CTE takes more Reads to accomplish it.  That&#039;s because the query plan that gets created uses a HASH JOIN, with a nonclustered index getting fully scanned (to get the top 5 random SalesOrderDetailID&#039;s) and the clustered index getting fully scanned and they are hash-joined.  I guess the optimizer figured that was cheaper than trying to do a nested loops join.&lt;br /&gt;
&lt;br /&gt;
--Brad]]></description>
		<content:encoded><![CDATA[<p>Hi Ramireddy&#8230;</p>
<p>I was a little confused that your CTE query had a NonClustered Index SEEK in it.  And then I saw that the query you were running had a predicate of WHERE RecordDtTm=&#8217;09/15/2010&#8242;.  Perhaps you forgot to take that predicate out when testing.</p>
<p>If you got rid of that predicate, it would still have to SCAN that index, and then do a lookup into the clustered index (or RID Lookup if it&#8217;s a heap which is unlikely) to get all the columns.</p>
<p>For a small table (like Production.Product in AdventureWorks) the CTE query is about twice as fast (because the nonclustered index it SCANs to get the random 5 ProductID&#8217;s is so tiny).</p>
<p>But for a large table (like Sales.SalesOrderDetail) they are about the same, but the CTE takes more Reads to accomplish it.  That&#8217;s because the query plan that gets created uses a HASH JOIN, with a nonclustered index getting fully scanned (to get the top 5 random SalesOrderDetailID&#8217;s) and the clustered index getting fully scanned and they are hash-joined.  I guess the optimizer figured that was cheaper than trying to do a nested loops join.</p>
<p>&#8211;Brad</p>
]]></content:encoded>
	</item>
</channel>
</rss>
