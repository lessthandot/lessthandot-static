<?xml version="1.0" encoding="UTF-8"?><rss version="2.0"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:atom="http://www.w3.org/2005/Atom"
	xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
	
	>
<channel>
	<title>Comments on: SQL Server 2014 CTP1 native compiled Hekaton procedures are faster than regular procedures</title>
	<atom:link href="/index.php/datamgmt/dbprogramming/sql-server-2014-ctp1-native/feed/" rel="self" type="application/rss+xml" />
	<link>/index.php/datamgmt/dbprogramming/sql-server-2014-ctp1-native/</link>
	<description>A Technical Community for IT Professionals</description>
	<lastBuildDate>Tue, 26 Feb 2019 12:40:14 +0000</lastBuildDate>
	<sy:updatePeriod>hourly</sy:updatePeriod>
	<sy:updateFrequency>1</sy:updateFrequency>
	<generator>https://wordpress.org/?v=4.6.1</generator>
	<item>
		<title>By: SQLDenis</title>
		<link>/index.php/datamgmt/dbprogramming/sql-server-2014-ctp1-native/#comment-6181</link>
		<dc:creator><![CDATA[SQLDenis]]></dc:creator>
		<pubDate>Thu, 27 Jun 2013 16:55:35 +0000</pubDate>
		<guid isPermaLink="false">/index.php/2013/06/sql-server-2014-ctp1-native/#comment-6181</guid>
		<description><![CDATA[enders,&lt;br /&gt;
&lt;br /&gt;
will do when I get home tonight, don&#039;t have 2014 CTP 1 with me at the moment]]></description>
		<content:encoded><![CDATA[<p>enders,</p>
<p>will do when I get home tonight, don&#8217;t have 2014 CTP 1 with me at the moment</p>
]]></content:encoded>
	</item>
	<item>
		<title>By: enders</title>
		<link>/index.php/datamgmt/dbprogramming/sql-server-2014-ctp1-native/#comment-6180</link>
		<dc:creator><![CDATA[enders]]></dc:creator>
		<pubDate>Thu, 27 Jun 2013 13:36:42 +0000</pubDate>
		<guid isPermaLink="false">/index.php/2013/06/sql-server-2014-ctp1-native/#comment-6180</guid>
		<description><![CDATA[Awesome test. I can&#039;t test it myself but could you increase the rows to 5 million. How fast can you copy data from one table to another ? An how fast can you merge data from one table to another. Create an empty testtable3 with the same structure. Then use this one in a stored procedure :&lt;br /&gt;
	WITH SOURCE AS (&lt;br /&gt;
		SELECT DISTINCT col1, col2 &lt;br /&gt;
		  FROM dbo.testtable2&lt;br /&gt;
			)&lt;br /&gt;
	MERGE dbo.testtable3 as target&lt;br /&gt;
	USING source on &lt;br /&gt;
		target.col1 = source.col1 &lt;br /&gt;
	WHEN NOT MATCHED THEN&lt;br /&gt;
		INSERT (col1, col2) VALUES (source.col1, source.col2);&lt;br /&gt;
-- dont forget the ;&lt;br /&gt;
&lt;br /&gt;
Run the stored procedure twice. First it will add 5 million rows to an empty table. Then it will look up 5 million rows to a 5 million row table. Repeat those for native and regular and let me know the results. &lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;]]></description>
		<content:encoded><![CDATA[<p>Awesome test. I can&#8217;t test it myself but could you increase the rows to 5 million. How fast can you copy data from one table to another ? An how fast can you merge data from one table to another. Create an empty testtable3 with the same structure. Then use this one in a stored procedure :<br />
	WITH SOURCE AS (<br />
		SELECT DISTINCT col1, col2 <br />
		  FROM dbo.testtable2<br />
			)<br />
	MERGE dbo.testtable3 as target<br />
	USING source on <br />
		target.col1 = source.col1 <br />
	WHEN NOT MATCHED THEN<br />
		INSERT (col1, col2) VALUES (source.col1, source.col2);<br />
&#8212; dont forget the ;</p>
<p>Run the stored procedure twice. First it will add 5 million rows to an empty table. Then it will look up 5 million rows to a 5 million row table. Repeat those for native and regular and let me know the results. </p>
<p></p>
]]></content:encoded>
	</item>
	<item>
		<title>By: NJ</title>
		<link>/index.php/datamgmt/dbprogramming/sql-server-2014-ctp1-native/#comment-6179</link>
		<dc:creator><![CDATA[NJ]]></dc:creator>
		<pubDate>Tue, 25 Jun 2013 23:27:51 +0000</pubDate>
		<guid isPermaLink="false">/index.php/2013/06/sql-server-2014-ctp1-native/#comment-6179</guid>
		<description><![CDATA[Sorry. Copypasted wrong query.&lt;br /&gt;
&lt;br /&gt;
I am running same query for in-memory table as for disk storage table.&lt;br /&gt;
&lt;br /&gt;
select count(1) from [StorageTestTable]&lt;br /&gt;
&lt;br /&gt;
Elapsed time is still more for in-memory than disk storage. &lt;br /&gt;
&lt;br /&gt;
I don&#039;t think it matters but I am using Windows Azure VM for testing.]]></description>
		<content:encoded><![CDATA[<p>Sorry. Copypasted wrong query.</p>
<p>I am running same query for in-memory table as for disk storage table.</p>
<p>select count(1) from [StorageTestTable]</p>
<p>Elapsed time is still more for in-memory than disk storage. </p>
<p>I don&#8217;t think it matters but I am using Windows Azure VM for testing.</p>
]]></content:encoded>
	</item>
	<item>
		<title>By: SQLDenis</title>
		<link>/index.php/datamgmt/dbprogramming/sql-server-2014-ctp1-native/#comment-6178</link>
		<dc:creator><![CDATA[SQLDenis]]></dc:creator>
		<pubDate>Tue, 25 Jun 2013 23:16:55 +0000</pubDate>
		<guid isPermaLink="false">/index.php/2013/06/sql-server-2014-ctp1-native/#comment-6178</guid>
		<description><![CDATA[NJ&lt;br /&gt;
&lt;br /&gt;
the 2 queries are not identical, the non hekaton one does just a count while the hekaton query returns a bunch of rows&lt;br /&gt;
&lt;br /&gt;
I will have to do some testing to see what results I get between regular and hekaton tables&lt;br /&gt;]]></description>
		<content:encoded><![CDATA[<p>NJ</p>
<p>the 2 queries are not identical, the non hekaton one does just a count while the hekaton query returns a bunch of rows</p>
<p>I will have to do some testing to see what results I get between regular and hekaton tables</p>
]]></content:encoded>
	</item>
	<item>
		<title>By: NJ</title>
		<link>/index.php/datamgmt/dbprogramming/sql-server-2014-ctp1-native/#comment-6177</link>
		<dc:creator><![CDATA[NJ]]></dc:creator>
		<pubDate>Tue, 25 Jun 2013 19:20:46 +0000</pubDate>
		<guid isPermaLink="false">/index.php/2013/06/sql-server-2014-ctp1-native/#comment-6177</guid>
		<description><![CDATA[Hi Denis,&lt;br /&gt;
Thanks for this quick write up . Memory optimized SPs in my testing running fast too. Probably around 25 to 40 % every time. &lt;br /&gt;
My question is that is Hekaton fast for standalone queries too.. For eg. I created another non-memory optimized table  as below :&lt;br /&gt;
&lt;br /&gt;
 CREATE TABLE [dbo].[TestTable2]&lt;br /&gt;
( [Col1] int NOT NULL,&lt;br /&gt;
  [Col2] char(100) NOT NULL,  &lt;br /&gt;
 &lt;br /&gt;
  CONSTRAINT [TestTable_PK] PRIMARY KEY nonclustered ([Col1])&lt;br /&gt;
)&lt;br /&gt;
go&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;
Now running below query.&lt;br /&gt;
&lt;br /&gt;
-- non memory optimized table&lt;br /&gt;
select count(1) from [TestTable2]&lt;br /&gt;
--82 ms&lt;br /&gt;
&lt;br /&gt;
-- memory optimized table&lt;br /&gt;
select top 100 * from [StorageTestTable]&lt;br /&gt;
--150 ms&lt;br /&gt;
&lt;br /&gt;
Non memory optimized table running faster in all my standalone query test. I ran dropcleanbuffers after every run.&lt;br /&gt;
&lt;br /&gt;
-NJ]]></description>
		<content:encoded><![CDATA[<p>Hi Denis,<br />
Thanks for this quick write up . Memory optimized SPs in my testing running fast too. Probably around 25 to 40 % every time. <br />
My question is that is Hekaton fast for standalone queries too.. For eg. I created another non-memory optimized table  as below :</p>
<p> CREATE TABLE [dbo].[TestTable2]<br />
( [Col1] int NOT NULL,<br />
  [Col2] char(100) NOT NULL,  </p>
<p>  CONSTRAINT [TestTable_PK] PRIMARY KEY nonclustered ([Col1])<br />
)<br />
go</p>
<p>
Now running below query.</p>
<p>&#8212; non memory optimized table<br />
select count(1) from [TestTable2]<br />
&#8211;82 ms</p>
<p>&#8212; memory optimized table<br />
select top 100 * from [StorageTestTable]<br />
&#8211;150 ms</p>
<p>Non memory optimized table running faster in all my standalone query test. I ran dropcleanbuffers after every run.</p>
<p>-NJ</p>
]]></content:encoded>
	</item>
</channel>
</rss>
