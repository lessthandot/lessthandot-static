<?xml version="1.0" encoding="UTF-8"?><rss version="2.0"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:atom="http://www.w3.org/2005/Atom"
	xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
	
	>
<channel>
	<title>Comments on: MongoDB vs. SQL Server &#8211; INSERT comparison part deux</title>
	<atom:link href="/index.php/datamgmt/dbprogramming/mongodb-vs-sql-server-insert-comparison/feed/" rel="self" type="application/rss+xml" />
	<link>/index.php/datamgmt/dbprogramming/mongodb-vs-sql-server-insert-comparison/</link>
	<description>A Technical Community for IT Professionals</description>
	<lastBuildDate>Tue, 26 Feb 2019 12:40:14 +0000</lastBuildDate>
	<sy:updatePeriod>hourly</sy:updatePeriod>
	<sy:updateFrequency>1</sy:updateFrequency>
	<generator>https://wordpress.org/?v=4.6.1</generator>
	<item>
		<title>By: Dav e Poole</title>
		<link>/index.php/datamgmt/dbprogramming/mongodb-vs-sql-server-insert-comparison/#comment-2643</link>
		<dc:creator><![CDATA[Dav e Poole]]></dc:creator>
		<pubDate>Sun, 30 Jun 2013 22:01:00 +0000</pubDate>
		<guid isPermaLink="false">/index.php/2010/04/mongodb-vs-sql-server-insert-comparison/#comment-2643</guid>
		<description><![CDATA[I don&#039;t think this test has any relevance in the real world.&lt;br /&gt;
&lt;br /&gt;
The whole point of the key/document, key/value stores is that you are storing a structured block of data that in the relational world would be represented by at least one table and probably two or more tables.&lt;br /&gt;
&lt;br /&gt;
If all you are doing is pumping a key/primitive value into two systems you aren&#039;t really proving anything.&lt;br /&gt;
&lt;br /&gt;
The ACID thing is a bit contrived as well.  In the NoSQL world a block of data attached to a key is an &quot;aggregate&quot;.  An aggregate commits as successfully or not at all.  Sound familiar?  Of course if you have to persist multiple aggregates then you are going to have to use your app to manage transactions.&lt;br /&gt;
&lt;br /&gt;
To me the whole point of NoSQL is not &quot;is it faster than SQL Server&quot; or any other RDBMS.  I think that the relevant parts are as follows:-&lt;br /&gt;
1.  The persisted data is nearer to the native structure that developers will be using&lt;br /&gt;
2.  The flexible schema allows greater freedom than a traditional RDBMS table.  Exception being Cassandra&lt;br /&gt;
3.  Sharding/partitioning lends itself to deployment in the cloud.&lt;br /&gt;
4.  Most of the key/document, key/value NoSQL databases work on Linux and have community versions at zero cost.  If you are starting out I recommend paying for &quot;professional services&quot;.&lt;br /&gt;
&lt;br /&gt;
There are obvious downsides.&lt;br /&gt;
1.  Data quality has to be handled by developers.  Sorry guys, love you to bits but this isn&#039;t your strong point.&lt;br /&gt;
2.  Some of these solutions you HAVE to scale out and do it early.  It appears that some of these NoSQL solutions DO NOT scale up.&lt;br /&gt;
3.  NoSQL products are relatively new.  They&#039;ve got quite a few rough edges on them.&lt;br /&gt;
4.  Newness gives a bit of a catch 22.  Slow adoption because there isn&#039;t much experience.  &lt;br /&gt;
5.  Administration.  The boring stuff.  Not an awful lot out there with regard to disaster recovery.  These things are great when they run but when things go bad you better have those professional services.&lt;br /&gt;
&lt;br /&gt;
The thing I like about NoSQL is that there is some stuff that is just a waste of an RDBMS.  Why would you use an RDBMS for session state?  Something like REDIS, which is in-memory, is blazingly fast is ideal for transient stuff.  If it goes pop then users will simply lose their session.  It rarely goes pop and users are used to having the occassional site glitch.]]></description>
		<content:encoded><![CDATA[<p>I don&#8217;t think this test has any relevance in the real world.</p>
<p>The whole point of the key/document, key/value stores is that you are storing a structured block of data that in the relational world would be represented by at least one table and probably two or more tables.</p>
<p>If all you are doing is pumping a key/primitive value into two systems you aren&#8217;t really proving anything.</p>
<p>The ACID thing is a bit contrived as well.  In the NoSQL world a block of data attached to a key is an &#8220;aggregate&#8221;.  An aggregate commits as successfully or not at all.  Sound familiar?  Of course if you have to persist multiple aggregates then you are going to have to use your app to manage transactions.</p>
<p>To me the whole point of NoSQL is not &#8220;is it faster than SQL Server&#8221; or any other RDBMS.  I think that the relevant parts are as follows:-<br />
1.  The persisted data is nearer to the native structure that developers will be using<br />
2.  The flexible schema allows greater freedom than a traditional RDBMS table.  Exception being Cassandra<br />
3.  Sharding/partitioning lends itself to deployment in the cloud.<br />
4.  Most of the key/document, key/value NoSQL databases work on Linux and have community versions at zero cost.  If you are starting out I recommend paying for &#8220;professional services&#8221;.</p>
<p>There are obvious downsides.<br />
1.  Data quality has to be handled by developers.  Sorry guys, love you to bits but this isn&#8217;t your strong point.<br />
2.  Some of these solutions you HAVE to scale out and do it early.  It appears that some of these NoSQL solutions DO NOT scale up.<br />
3.  NoSQL products are relatively new.  They&#8217;ve got quite a few rough edges on them.<br />
4.  Newness gives a bit of a catch 22.  Slow adoption because there isn&#8217;t much experience.  <br />
5.  Administration.  The boring stuff.  Not an awful lot out there with regard to disaster recovery.  These things are great when they run but when things go bad you better have those professional services.</p>
<p>The thing I like about NoSQL is that there is some stuff that is just a waste of an RDBMS.  Why would you use an RDBMS for session state?  Something like REDIS, which is in-memory, is blazingly fast is ideal for transient stuff.  If it goes pop then users will simply lose their session.  It rarely goes pop and users are used to having the occassional site glitch.</p>
]]></content:encoded>
	</item>
	<item>
		<title>By: Andrew</title>
		<link>/index.php/datamgmt/dbprogramming/mongodb-vs-sql-server-insert-comparison/#comment-2644</link>
		<dc:creator><![CDATA[Andrew]]></dc:creator>
		<pubDate>Tue, 12 Apr 2011 18:04:26 +0000</pubDate>
		<guid isPermaLink="false">/index.php/2010/04/mongodb-vs-sql-server-insert-comparison/#comment-2644</guid>
		<description><![CDATA[I did some sql server testing (using bltoolkit/linq and a table with around 20 columns) against mongodb using (norm) and the same class.  In my case sql server took 4 seconds to do 10k inserts, or about 1.6 seconds if in a transaction.  &lt;br /&gt;
&lt;br /&gt;
mongo took 10 seconds to 10k inserts, or 0.7 seconds if I did it in batch.&lt;br /&gt;
&lt;br /&gt;
And after various tests of other things, including lazy loading, foreign keys, I don&#039;t know.  I&#039;m not convinced mongo is going to be faster than sql server for anything I&#039;m going to do.  Particularly with norm, I&#039;m tying myself to .net objects which means I&#039;m not really schemaless, I just don&#039;t have to create the schema.  I also messed with Expando which I like, and I have a project that it makes sense for, but in the general case I don&#039;t see it helping much.  And sql server has stored proc&#039;s, change notifications, more authentication options, etc, genuine foreign keys with options for what to do when one is deleted etc.  So, I think I have one project where mongo is clearly the perfect match, and the rest where sql server is probably the better choice.&lt;br /&gt;
&lt;br /&gt;
I&#039;ve been trying to think if I was to redo some projects from scratch would I be able to make use of mongo and I&#039;m still not sure.  Give me triggers, notifications, and some logic for foreign keys/update/delete and then I could see mongo being the more reasonable choice for various projects depending on the data to be stored.]]></description>
		<content:encoded><![CDATA[<p>I did some sql server testing (using bltoolkit/linq and a table with around 20 columns) against mongodb using (norm) and the same class.  In my case sql server took 4 seconds to do 10k inserts, or about 1.6 seconds if in a transaction.  </p>
<p>mongo took 10 seconds to 10k inserts, or 0.7 seconds if I did it in batch.</p>
<p>And after various tests of other things, including lazy loading, foreign keys, I don&#8217;t know.  I&#8217;m not convinced mongo is going to be faster than sql server for anything I&#8217;m going to do.  Particularly with norm, I&#8217;m tying myself to .net objects which means I&#8217;m not really schemaless, I just don&#8217;t have to create the schema.  I also messed with Expando which I like, and I have a project that it makes sense for, but in the general case I don&#8217;t see it helping much.  And sql server has stored proc&#8217;s, change notifications, more authentication options, etc, genuine foreign keys with options for what to do when one is deleted etc.  So, I think I have one project where mongo is clearly the perfect match, and the rest where sql server is probably the better choice.</p>
<p>I&#8217;ve been trying to think if I was to redo some projects from scratch would I be able to make use of mongo and I&#8217;m still not sure.  Give me triggers, notifications, and some logic for foreign keys/update/delete and then I could see mongo being the more reasonable choice for various projects depending on the data to be stored.</p>
]]></content:encoded>
	</item>
	<item>
		<title>By: Dustin</title>
		<link>/index.php/datamgmt/dbprogramming/mongodb-vs-sql-server-insert-comparison/#comment-2645</link>
		<dc:creator><![CDATA[Dustin]]></dc:creator>
		<pubDate>Wed, 16 Jun 2010 01:19:22 +0000</pubDate>
		<guid isPermaLink="false">/index.php/2010/04/mongodb-vs-sql-server-insert-comparison/#comment-2645</guid>
		<description><![CDATA[The comparison of speed is definitely pertinent, so I don&#039;t want to discount that. However, there&#039;s so much more to consider here. The document structure of MongoDB is a very natural fit for many web applications. You can pretty much skip an ORM because there&#039;s no mapping to do. However, you lose big on the inability to normalize data very well and you also lose big on ACID compliance (e.g. transactions, etc.) which is an absolute must have for certain things. So, while the speed of inserts is a very interesting conversation, please don&#039;t make your decision on MongoDB vs. SQL Server based on the insert benchmarks. The two databases really aren&#039;t competing against each other. They solve entirely different problems.&lt;br /&gt;
&lt;br /&gt;
That being said, this was an interesting read.]]></description>
		<content:encoded><![CDATA[<p>The comparison of speed is definitely pertinent, so I don&#8217;t want to discount that. However, there&#8217;s so much more to consider here. The document structure of MongoDB is a very natural fit for many web applications. You can pretty much skip an ORM because there&#8217;s no mapping to do. However, you lose big on the inability to normalize data very well and you also lose big on ACID compliance (e.g. transactions, etc.) which is an absolute must have for certain things. So, while the speed of inserts is a very interesting conversation, please don&#8217;t make your decision on MongoDB vs. SQL Server based on the insert benchmarks. The two databases really aren&#8217;t competing against each other. They solve entirely different problems.</p>
<p>That being said, this was an interesting read.</p>
]]></content:encoded>
	</item>
	<item>
		<title>By: Dan</title>
		<link>/index.php/datamgmt/dbprogramming/mongodb-vs-sql-server-insert-comparison/#comment-2642</link>
		<dc:creator><![CDATA[Dan]]></dc:creator>
		<pubDate>Tue, 27 Apr 2010 18:04:44 +0000</pubDate>
		<guid isPermaLink="false">/index.php/2010/04/mongodb-vs-sql-server-insert-comparison/#comment-2642</guid>
		<description><![CDATA[How well does Mongo handle concurrency?  If the same test is run while another process/thread is reading the table, what happens?]]></description>
		<content:encoded><![CDATA[<p>How well does Mongo handle concurrency?  If the same test is run while another process/thread is reading the table, what happens?</p>
]]></content:encoded>
	</item>
	<item>
		<title>By: Funny</title>
		<link>/index.php/datamgmt/dbprogramming/mongodb-vs-sql-server-insert-comparison/#comment-2641</link>
		<dc:creator><![CDATA[Funny]]></dc:creator>
		<pubDate>Sun, 11 Apr 2010 22:31:17 +0000</pubDate>
		<guid isPermaLink="false">/index.php/2010/04/mongodb-vs-sql-server-insert-comparison/#comment-2641</guid>
		<description><![CDATA[I did the same tests as dm_mongodb, and MongoDB owned SQL Server. It is at least 3x faster...]]></description>
		<content:encoded><![CDATA[<p>I did the same tests as dm_mongodb, and MongoDB owned SQL Server. It is at least 3x faster&#8230;</p>
]]></content:encoded>
	</item>
	<item>
		<title>By: SQLDenis</title>
		<link>/index.php/datamgmt/dbprogramming/mongodb-vs-sql-server-insert-comparison/#comment-2640</link>
		<dc:creator><![CDATA[SQLDenis]]></dc:creator>
		<pubDate>Tue, 06 Apr 2010 15:08:12 +0000</pubDate>
		<guid isPermaLink="false">/index.php/2010/04/mongodb-vs-sql-server-insert-comparison/#comment-2640</guid>
		<description><![CDATA[Kristina,&lt;br /&gt;
&lt;br /&gt;
SQL Server also has a minimally logged insert, you can use bcp or BULK INSERT]]></description>
		<content:encoded><![CDATA[<p>Kristina,</p>
<p>SQL Server also has a minimally logged insert, you can use bcp or BULK INSERT</p>
]]></content:encoded>
	</item>
	<item>
		<title>By: Kristina</title>
		<link>/index.php/datamgmt/dbprogramming/mongodb-vs-sql-server-insert-comparison/#comment-2639</link>
		<dc:creator><![CDATA[Kristina]]></dc:creator>
		<pubDate>Tue, 06 Apr 2010 14:51:51 +0000</pubDate>
		<guid isPermaLink="false">/index.php/2010/04/mongodb-vs-sql-server-insert-comparison/#comment-2639</guid>
		<description><![CDATA[Mongo has a batch insert that would be roughly equivalent to doing all the inserts in on transaction.  It would be a more equitable contest to compare those speeds.]]></description>
		<content:encoded><![CDATA[<p>Mongo has a batch insert that would be roughly equivalent to doing all the inserts in on transaction.  It would be a more equitable contest to compare those speeds.</p>
]]></content:encoded>
	</item>
	<item>
		<title>By: dm_mongodb</title>
		<link>/index.php/datamgmt/dbprogramming/mongodb-vs-sql-server-insert-comparison/#comment-2638</link>
		<dc:creator><![CDATA[dm_mongodb]]></dc:creator>
		<pubDate>Tue, 06 Apr 2010 11:44:45 +0000</pubDate>
		<guid isPermaLink="false">/index.php/2010/04/mongodb-vs-sql-server-insert-comparison/#comment-2638</guid>
		<description><![CDATA[the test below I ran in the mongo Javascript shell as a client.  It inserted 50k objects in MongoDB on my desktop in 2 seconds. for simple small objects without a bunch of indexes i would expect 20k+ inserts/second with mongodb.&lt;br /&gt;
&lt;br /&gt;
http://gist.github.com/357622]]></description>
		<content:encoded><![CDATA[<p>the test below I ran in the mongo Javascript shell as a client.  It inserted 50k objects in MongoDB on my desktop in 2 seconds. for simple small objects without a bunch of indexes i would expect 20k+ inserts/second with mongodb.</p>
<p><a href="http://gist.github.com/357622" rel="nofollow">http://gist.github.com/357622</a></p>
]]></content:encoded>
	</item>
	<item>
		<title>By: SQLDenis</title>
		<link>/index.php/datamgmt/dbprogramming/mongodb-vs-sql-server-insert-comparison/#comment-2637</link>
		<dc:creator><![CDATA[SQLDenis]]></dc:creator>
		<pubDate>Tue, 06 Apr 2010 09:18:05 +0000</pubDate>
		<guid isPermaLink="false">/index.php/2010/04/mongodb-vs-sql-server-insert-comparison/#comment-2637</guid>
		<description><![CDATA[Got this in an email from Jeremy Lowell&lt;br /&gt;
&lt;br /&gt;
------------------------------------------&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;
Interesting post. &lt;br /&gt;
 &lt;br /&gt;
The point that I took away from it is that knowing the database engine that you are working in, and in this case, differing manners to handle transactions, is significantly more important than the engine that it&#039;s run against.  I&#039;d be quite surprised if someone was unable to better that 30 second load in MongoDB. &lt;br /&gt;
 &lt;br /&gt;
For fun I decided to add a primary key to the mix and by default a PK on the first column in the table (guid).  Script and timing of the script can be found below.  This was run on my laptop with a singular 7500 RPM drive.&lt;br /&gt;
 &lt;br /&gt;
CREATE TABLE MongoCompare&lt;br /&gt;
    (guid UNIQUEIDENTIFIER PRIMARY KEY&lt;br /&gt;
    ,VALUE INT&lt;br /&gt;
    )&lt;br /&gt;
GO&lt;br /&gt;
SET NOCOUNT ON&lt;br /&gt;
DECLARE @id INT = 1&lt;br /&gt;
WHILE (@id &#060; 500001)&lt;br /&gt;
BEGIN&lt;br /&gt;
    INSERT INTO MongoCompare VALUES (newid(), @id)&lt;br /&gt;
    SET @id+=1&lt;br /&gt;
END&lt;br /&gt;
GO&lt;br /&gt;
-- Time elapsed = 2:44&lt;br /&gt;
 &lt;br /&gt;
DROP TABLE MongoCompare&lt;br /&gt;
GO&lt;br /&gt;
CREATE TABLE MongoCompare&lt;br /&gt;
    (guid UNIQUEIDENTIFIER PRIMARY KEY&lt;br /&gt;
    ,VALUE INT&lt;br /&gt;
    )&lt;br /&gt;
GO&lt;br /&gt;
SET NOCOUNT ON&lt;br /&gt;
BEGIN TRAN&lt;br /&gt;
DECLARE @id INT = 1&lt;br /&gt;
WHILE (@id &#060; 500001)&lt;br /&gt;
BEGIN&lt;br /&gt;
    INSERT INTO MongoCompare VALUES (newid(), @id)&lt;br /&gt;
    SET @id+=1&lt;br /&gt;
END&lt;br /&gt;
COMMIT&lt;br /&gt;
-- Time elapsed = :12&lt;br /&gt;
 &lt;br /&gt;
DROP TABLE MongoCompare&lt;br /&gt;
GO&lt;br /&gt;
CREATE TABLE MongoCompare&lt;br /&gt;
    (guid UNIQUEIDENTIFIER DEFAULT NEWSEQUENTIALID() PRIMARY KEY&lt;br /&gt;
    ,VALUE INT&lt;br /&gt;
    )&lt;br /&gt;
GO&lt;br /&gt;
SET NOCOUNT ON&lt;br /&gt;
BEGIN TRAN&lt;br /&gt;
DECLARE @id INT = 1&lt;br /&gt;
WHILE (@id &#060; 500001)&lt;br /&gt;
BEGIN&lt;br /&gt;
    INSERT INTO MongoCompare (VALUE) VALUES (@id)&lt;br /&gt;
    SET @id+=1&lt;br /&gt;
END&lt;br /&gt;
COMMIT&lt;br /&gt;
-- Time elapsed = :07]]></description>
		<content:encoded><![CDATA[<p>Got this in an email from Jeremy Lowell</p>
<p>&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;</p>
<p>
Interesting post. </p>
<p>The point that I took away from it is that knowing the database engine that you are working in, and in this case, differing manners to handle transactions, is significantly more important than the engine that it&#8217;s run against.  I&#8217;d be quite surprised if someone was unable to better that 30 second load in MongoDB. </p>
<p>For fun I decided to add a primary key to the mix and by default a PK on the first column in the table (guid).  Script and timing of the script can be found below.  This was run on my laptop with a singular 7500 RPM drive.</p>
<p>CREATE TABLE MongoCompare<br />
    (guid UNIQUEIDENTIFIER PRIMARY KEY<br />
    ,VALUE INT<br />
    )<br />
GO<br />
SET NOCOUNT ON<br />
DECLARE @id INT = 1<br />
WHILE (@id &lt; 500001)<br />
BEGIN<br />
    INSERT INTO MongoCompare VALUES (newid(), @id)<br />
    SET @id+=1<br />
END<br />
GO<br />
&#8212; Time elapsed = 2:44</p>
<p>DROP TABLE MongoCompare<br />
GO<br />
CREATE TABLE MongoCompare<br />
    (guid UNIQUEIDENTIFIER PRIMARY KEY<br />
    ,VALUE INT<br />
    )<br />
GO<br />
SET NOCOUNT ON<br />
BEGIN TRAN<br />
DECLARE @id INT = 1<br />
WHILE (@id &lt; 500001)<br />
BEGIN<br />
    INSERT INTO MongoCompare VALUES (newid(), @id)<br />
    SET @id+=1<br />
END<br />
COMMIT<br />
&#8212; Time elapsed = :12</p>
<p>DROP TABLE MongoCompare<br />
GO<br />
CREATE TABLE MongoCompare<br />
    (guid UNIQUEIDENTIFIER DEFAULT NEWSEQUENTIALID() PRIMARY KEY<br />
    ,VALUE INT<br />
    )<br />
GO<br />
SET NOCOUNT ON<br />
BEGIN TRAN<br />
DECLARE @id INT = 1<br />
WHILE (@id &lt; 500001)<br />
BEGIN<br />
    INSERT INTO MongoCompare (VALUE) VALUES (@id)<br />
    SET @id+=1<br />
END<br />
COMMIT<br />
&#8212; Time elapsed = :07</p>
]]></content:encoded>
	</item>
	<item>
		<title>By: Lee</title>
		<link>/index.php/datamgmt/dbprogramming/mongodb-vs-sql-server-insert-comparison/#comment-2636</link>
		<dc:creator><![CDATA[Lee]]></dc:creator>
		<pubDate>Tue, 06 Apr 2010 09:01:38 +0000</pubDate>
		<guid isPermaLink="false">/index.php/2010/04/mongodb-vs-sql-server-insert-comparison/#comment-2636</guid>
		<description><![CDATA[The test was to view 500k transactions rather than one transaction with 500k rows in a single connection for both databases. There are flaws in this minimal test no doubt, but you make some great points.&lt;br /&gt;
&lt;br /&gt;
Lee]]></description>
		<content:encoded><![CDATA[<p>The test was to view 500k transactions rather than one transaction with 500k rows in a single connection for both databases. There are flaws in this minimal test no doubt, but you make some great points.</p>
<p>Lee</p>
]]></content:encoded>
	</item>
</channel>
</rss>
