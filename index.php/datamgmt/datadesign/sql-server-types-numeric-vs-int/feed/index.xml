<?xml version="1.0" encoding="UTF-8"?><rss version="2.0"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:atom="http://www.w3.org/2005/Atom"
	xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
	
	>
<channel>
	<title>Comments on: SQL Server Types &#8211; Numeric vs Int</title>
	<atom:link href="/index.php/datamgmt/datadesign/sql-server-types-numeric-vs-int/feed/" rel="self" type="application/rss+xml" />
	<link>/index.php/datamgmt/datadesign/sql-server-types-numeric-vs-int/</link>
	<description>A Technical Community for IT Professionals</description>
	<lastBuildDate>Tue, 26 Feb 2019 12:40:14 +0000</lastBuildDate>
	<sy:updatePeriod>hourly</sy:updatePeriod>
	<sy:updateFrequency>1</sy:updateFrequency>
	<generator>https://wordpress.org/?v=4.6.1</generator>
	<item>
		<title>By: Naomi Nosonovsky</title>
		<link>/index.php/datamgmt/datadesign/sql-server-types-numeric-vs-int/#comment-1849298</link>
		<dc:creator><![CDATA[Naomi Nosonovsky]]></dc:creator>
		<pubDate>Mon, 15 Sep 2014 14:51:57 +0000</pubDate>
		<guid isPermaLink="false">/index.php/2010/09/sql-server-types-numeric-vs-int/#comment-1849298</guid>
		<description><![CDATA[What exactly you&#039;re trying to achieve with this strange code? You&#039;re trying to assign a character value to a variable declared as integer. You can not do that.

You may be better served if you ask your whole question in the SQL Server forum, either on this site or in MSDN Transact-SQL forum.]]></description>
		<content:encoded><![CDATA[<p>What exactly you&#8217;re trying to achieve with this strange code? You&#8217;re trying to assign a character value to a variable declared as integer. You can not do that.</p>
<p>You may be better served if you ask your whole question in the SQL Server forum, either on this site or in MSDN Transact-SQL forum.</p>
]]></content:encoded>
	</item>
	<item>
		<title>By: dusable</title>
		<link>/index.php/datamgmt/datadesign/sql-server-types-numeric-vs-int/#comment-1816427</link>
		<dc:creator><![CDATA[dusable]]></dc:creator>
		<pubDate>Thu, 11 Sep 2014 14:25:54 +0000</pubDate>
		<guid isPermaLink="false">/index.php/2010/09/sql-server-types-numeric-vs-int/#comment-1816427</guid>
		<description><![CDATA[Naomi
I am fairly new to the sql adventure and I am trying to use a cast statement to do what I thought was a simple conversion, my code is below

declare @firstRec int, lastRec int
set @firstRec = &#039; + CAST(@firstRec AS varchar(5)) + &#039;
set @lastRec = &#039; + CAST(@lastRec AS varchar(5)) + &#039;

Select *, &#039;&#039;&#039; + @firstRec + &#039;&#039;&#039; AS Query_FirstRec,
          &#039;&#039;&#039; + @lastRec + &#039;&#039;&#039; AS Query_LastRec.

and I get the following error

Msg 245, Level 16, State 1, Procedure Proc_TeRr2_CashTrans_Detail, Line 164
Conversion failed when converting the varchar value &#039;&#039; AS Query_FirstRec,
	&#039;&#039; to data type int.

PLeas help... Thanks in advance]]></description>
		<content:encoded><![CDATA[<p>Naomi<br />
I am fairly new to the sql adventure and I am trying to use a cast statement to do what I thought was a simple conversion, my code is below</p>
<p>declare @firstRec int, lastRec int<br />
set @firstRec = &#8216; + CAST(@firstRec AS varchar(5)) + &#8216;<br />
set @lastRec = &#8216; + CAST(@lastRec AS varchar(5)) + &#8216;</p>
<p>Select *, &#8221;&#8217; + @firstRec + &#8221;&#8217; AS Query_FirstRec,<br />
          &#8221;&#8217; + @lastRec + &#8221;&#8217; AS Query_LastRec.</p>
<p>and I get the following error</p>
<p>Msg 245, Level 16, State 1, Procedure Proc_TeRr2_CashTrans_Detail, Line 164<br />
Conversion failed when converting the varchar value &#8221; AS Query_FirstRec,<br />
	&#8221; to data type int.</p>
<p>PLeas help&#8230; Thanks in advance</p>
]]></content:encoded>
	</item>
	<item>
		<title>By: Eli Weinstock-Herman (tarwn)</title>
		<link>/index.php/datamgmt/datadesign/sql-server-types-numeric-vs-int/#comment-3169</link>
		<dc:creator><![CDATA[Eli Weinstock-Herman (tarwn)]]></dc:creator>
		<pubDate>Wed, 11 Jan 2012 14:11:47 +0000</pubDate>
		<guid isPermaLink="false">/index.php/2010/09/sql-server-types-numeric-vs-int/#comment-3169</guid>
		<description><![CDATA[RPGSoftware - Thanks for the feedback. It&#039;s good that you weighed the options before deciding on Numeric(N,0) as your field type, I was simply trying to point out what the potential costs were that we should take into account. Most (all?) implementations I have personally worked with don&#039;t take these costs into account, as I often see them used across the board for all integer and numeric data in a database (including id&#039;s which will never be used as part of decimal math).&lt;br /&gt;
&lt;br /&gt;
In your situation I&#039;m not sure I would have made the same decision as I think it would put your database and people in a better position to explicitly cast the values the way they need them rather than expecting the field to do it for them. All it takes for this process to breakdown is for a single field to be typed as an int and suddenly you have invalid business-level information (which is unlikely to be caught immediately).&lt;br /&gt;
&lt;br /&gt;
I think it is very realistic to expect developers writing queries to understand typecasting or to at least be testing their work and detecting the issue. I would consider supporting ignorance in that area to be detrimental to them and the business. If the data is to be used by non-developers, then I would consider exposing it as a consumable view that the end user could better understand anyway, rather than direct access to a table, so I could perform any necessary casting at this point.]]></description>
		<content:encoded><![CDATA[<p>RPGSoftware &#8211; Thanks for the feedback. It&#8217;s good that you weighed the options before deciding on Numeric(N,0) as your field type, I was simply trying to point out what the potential costs were that we should take into account. Most (all?) implementations I have personally worked with don&#8217;t take these costs into account, as I often see them used across the board for all integer and numeric data in a database (including id&#8217;s which will never be used as part of decimal math).</p>
<p>In your situation I&#8217;m not sure I would have made the same decision as I think it would put your database and people in a better position to explicitly cast the values the way they need them rather than expecting the field to do it for them. All it takes for this process to breakdown is for a single field to be typed as an int and suddenly you have invalid business-level information (which is unlikely to be caught immediately).</p>
<p>I think it is very realistic to expect developers writing queries to understand typecasting or to at least be testing their work and detecting the issue. I would consider supporting ignorance in that area to be detrimental to them and the business. If the data is to be used by non-developers, then I would consider exposing it as a consumable view that the end user could better understand anyway, rather than direct access to a table, so I could perform any necessary casting at this point.</p>
]]></content:encoded>
	</item>
	<item>
		<title>By: RGPSoftware</title>
		<link>/index.php/datamgmt/datadesign/sql-server-types-numeric-vs-int/#comment-3168</link>
		<dc:creator><![CDATA[RGPSoftware]]></dc:creator>
		<pubDate>Wed, 11 Jan 2012 13:42:53 +0000</pubDate>
		<guid isPermaLink="false">/index.php/2010/09/sql-server-types-numeric-vs-int/#comment-3168</guid>
		<description><![CDATA[I&#039;ve considered doing this, using decimal(9,0) instead of int in some cases, in order to avoid the need to CAST when doing division. The main reason to avoid this is mostly to avoid unintentional errors by people who have less understanding of the data when they are using it for reporting, etc. You can argue that anyone making such use of the data should be more knowledgeable, but that&#039;s not always realistic in the real world. &lt;br /&gt;
&lt;br /&gt;
The fact is that if you do math using an int the result is a truncated value, and the only way to avoid that is to either CAST the int to a decimal any time you want to do math (particularly division or even the use of aggregates like AVG()) or define the column as a decimal.&lt;br /&gt;
&lt;br /&gt;
So to me, this post fails to address the main reason why someone would chose to make use of decimal (or numeric) data types with 0 scale. Yes, everything you said is true, but that still doesn&#039;t address the reason why this may be used.]]></description>
		<content:encoded><![CDATA[<p>I&#8217;ve considered doing this, using decimal(9,0) instead of int in some cases, in order to avoid the need to CAST when doing division. The main reason to avoid this is mostly to avoid unintentional errors by people who have less understanding of the data when they are using it for reporting, etc. You can argue that anyone making such use of the data should be more knowledgeable, but that&#8217;s not always realistic in the real world. </p>
<p>The fact is that if you do math using an int the result is a truncated value, and the only way to avoid that is to either CAST the int to a decimal any time you want to do math (particularly division or even the use of aggregates like AVG()) or define the column as a decimal.</p>
<p>So to me, this post fails to address the main reason why someone would chose to make use of decimal (or numeric) data types with 0 scale. Yes, everything you said is true, but that still doesn&#8217;t address the reason why this may be used.</p>
]]></content:encoded>
	</item>
	<item>
		<title>By: Naomi Nosonovsky</title>
		<link>/index.php/datamgmt/datadesign/sql-server-types-numeric-vs-int/#comment-3174</link>
		<dc:creator><![CDATA[Naomi Nosonovsky]]></dc:creator>
		<pubDate>Fri, 16 Dec 2011 15:56:54 +0000</pubDate>
		<guid isPermaLink="false">/index.php/2010/09/sql-server-types-numeric-vs-int/#comment-3174</guid>
		<description><![CDATA[I believe that integer in FoxPro will correctly convert to integer in SQL Server and vice versa. For numeric values it&#039;s not 1:1 translation.&lt;br /&gt;
&lt;br /&gt;
The Integer type is relatively new in FoxPro (I believe it appeared only that FoxPro became Visual FoxPro). So old, dbase format didn&#039;t have integer type.]]></description>
		<content:encoded><![CDATA[<p>I believe that integer in FoxPro will correctly convert to integer in SQL Server and vice versa. For numeric values it&#8217;s not 1:1 translation.</p>
<p>The Integer type is relatively new in FoxPro (I believe it appeared only that FoxPro became Visual FoxPro). So old, dbase format didn&#8217;t have integer type.</p>
]]></content:encoded>
	</item>
	<item>
		<title>By: Eli Weinstock-Herman (tarwn)</title>
		<link>/index.php/datamgmt/datadesign/sql-server-types-numeric-vs-int/#comment-3173</link>
		<dc:creator><![CDATA[Eli Weinstock-Herman (tarwn)]]></dc:creator>
		<pubDate>Fri, 16 Dec 2011 14:10:28 +0000</pubDate>
		<guid isPermaLink="false">/index.php/2010/09/sql-server-types-numeric-vs-int/#comment-3173</guid>
		<description><![CDATA[Interesting, the MSDN documentation on this lists Data types and Field types, but the terminology wasn&#039;t very clear  that Data type meant application level  and Field type meant database. It leads me to wonder why, when FoxPro can store a non-decimal numeric as a 4-byte int in it&#039;s own tables, it translates to a much larger numeric value in SQL Server. Perhaps the version in SQL Server is a representation of the application (data) types in FoxPro rather than the table (field) types?]]></description>
		<content:encoded><![CDATA[<p>Interesting, the MSDN documentation on this lists Data types and Field types, but the terminology wasn&#8217;t very clear  that Data type meant application level  and Field type meant database. It leads me to wonder why, when FoxPro can store a non-decimal numeric as a 4-byte int in it&#8217;s own tables, it translates to a much larger numeric value in SQL Server. Perhaps the version in SQL Server is a representation of the application (data) types in FoxPro rather than the table (field) types?</p>
]]></content:encoded>
	</item>
	<item>
		<title>By: Naomi Nosonovsky</title>
		<link>/index.php/datamgmt/datadesign/sql-server-types-numeric-vs-int/#comment-3172</link>
		<dc:creator><![CDATA[Naomi Nosonovsky]]></dc:creator>
		<pubDate>Fri, 16 Dec 2011 12:05:18 +0000</pubDate>
		<guid isPermaLink="false">/index.php/2010/09/sql-server-types-numeric-vs-int/#comment-3172</guid>
		<description><![CDATA[Eli,&lt;br /&gt;
&lt;br /&gt;
Visual FoxPro stores integer values as 4 bytes (same as SQL Server). This is taken directly from Visual FoxPro Help file:&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;
To store non-decimal numeric values when performance and table storage limitations are especially important, use the Integer field type. To generate values, such ID numbers, use Integer (Autoinc) that automatically increments the value.&lt;br /&gt;
&lt;br /&gt;
In tables, the Integer field type is stored as a 4-byte binary value. As a result, it requires less memory than other Numeric data types. As a binary value, it requires no ASCII &lt;br /&gt;
&lt;br /&gt;
For specifications about the Integer and Integer (Autoinc) field types, see Visual FoxPro Data and Field Types.&lt;br /&gt;
--------------------------&lt;br /&gt;
So, indeed for storing values without decimals integer and bigint (VFP does not have bigint) will be a better choice.&lt;br /&gt;
&lt;br /&gt;
-----------------&lt;br /&gt;
Interestingly, though, in the Data and Field Types we read the following definition:&lt;br /&gt;
&lt;br /&gt;
Numeric &lt;br /&gt;
 Integers or decimal numbers&lt;br /&gt;
&lt;br /&gt;
For example, the quantity of items ordered&lt;br /&gt;
 8 bytes in memory; 1 to 20 bytes in table&lt;br /&gt;
 - .9999999999E+19 to .9999999999E+20&lt;br /&gt;
 &lt;br /&gt;
So, in the table the integer takes 4 bytes to store, but when defining integer value in code, it will be 8 bytes in memory. A bit confusing.]]></description>
		<content:encoded><![CDATA[<p>Eli,</p>
<p>Visual FoxPro stores integer values as 4 bytes (same as SQL Server). This is taken directly from Visual FoxPro Help file:</p>
<p>
To store non-decimal numeric values when performance and table storage limitations are especially important, use the Integer field type. To generate values, such ID numbers, use Integer (Autoinc) that automatically increments the value.</p>
<p>In tables, the Integer field type is stored as a 4-byte binary value. As a result, it requires less memory than other Numeric data types. As a binary value, it requires no ASCII </p>
<p>For specifications about the Integer and Integer (Autoinc) field types, see Visual FoxPro Data and Field Types.<br />
&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8211;<br />
So, indeed for storing values without decimals integer and bigint (VFP does not have bigint) will be a better choice.</p>
<p>&#8212;&#8212;&#8212;&#8212;&#8212;&#8211;<br />
Interestingly, though, in the Data and Field Types we read the following definition:</p>
<p>Numeric <br />
 Integers or decimal numbers</p>
<p>For example, the quantity of items ordered<br />
 8 bytes in memory; 1 to 20 bytes in table<br />
 &#8211; .9999999999E+19 to .9999999999E+20</p>
<p>So, in the table the integer takes 4 bytes to store, but when defining integer value in code, it will be 8 bytes in memory. A bit confusing.</p>
]]></content:encoded>
	</item>
	<item>
		<title>By: Eli Weinstock-Herman (tarwn)</title>
		<link>/index.php/datamgmt/datadesign/sql-server-types-numeric-vs-int/#comment-3171</link>
		<dc:creator><![CDATA[Eli Weinstock-Herman (tarwn)]]></dc:creator>
		<pubDate>Fri, 16 Dec 2011 09:13:28 +0000</pubDate>
		<guid isPermaLink="false">/index.php/2010/09/sql-server-types-numeric-vs-int/#comment-3171</guid>
		<description><![CDATA[If you are doing a direct import and do not plan to access the values from FoxPro, then I would do the import, take a backup, then convert the columns in place. If you are going to continue accessing the data from Foxpro, then you might want to do a quick test to see if it is comfortable mapping to a SQL Server int column or not. According to MSDN, FoxPro stores ints in an 8 byte numeric internally, but I don&#039;t know how it handles mapping when it uses a backend SQL and if it will accept the mapping without complaint.&lt;br /&gt;
&lt;br /&gt;
One numeric(n,0) to int savings may not seem worth it, but if you add that savings up across all of your tables and non-clustered indexes, then add in potential savings from char to varchar conversion where appropriate (another artifact I have seen from FoxPro), I think it will be fairly substantial.]]></description>
		<content:encoded><![CDATA[<p>If you are doing a direct import and do not plan to access the values from FoxPro, then I would do the import, take a backup, then convert the columns in place. If you are going to continue accessing the data from Foxpro, then you might want to do a quick test to see if it is comfortable mapping to a SQL Server int column or not. According to MSDN, FoxPro stores ints in an 8 byte numeric internally, but I don&#8217;t know how it handles mapping when it uses a backend SQL and if it will accept the mapping without complaint.</p>
<p>One numeric(n,0) to int savings may not seem worth it, but if you add that savings up across all of your tables and non-clustered indexes, then add in potential savings from char to varchar conversion where appropriate (another artifact I have seen from FoxPro), I think it will be fairly substantial.</p>
]]></content:encoded>
	</item>
	<item>
		<title>By: MattM</title>
		<link>/index.php/datamgmt/datadesign/sql-server-types-numeric-vs-int/#comment-3170</link>
		<dc:creator><![CDATA[MattM]]></dc:creator>
		<pubDate>Fri, 16 Dec 2011 02:19:38 +0000</pubDate>
		<guid isPermaLink="false">/index.php/2010/09/sql-server-types-numeric-vs-int/#comment-3170</guid>
		<description><![CDATA[Thanks for the article Eli,&lt;br /&gt;
&lt;br /&gt;
I was doing an import from a foxpro database into sql server and several of the columns are Numeric(n,0).  I had gone down the route of just creating integer columns to store these numbers (and did not encounter any problems).  But I was curious as to whether there was any benefit either way or some reason why I should preserve the datatype - for the most part, the foxpro columns set up like this were identity values, but not all.&lt;br /&gt;
&lt;br /&gt;
Much appreciate your efforts in helping to make the decision less arduous :)&lt;br /&gt;
&lt;br /&gt;
cheers&lt;br /&gt;
Matt]]></description>
		<content:encoded><![CDATA[<p>Thanks for the article Eli,</p>
<p>I was doing an import from a foxpro database into sql server and several of the columns are Numeric(n,0).  I had gone down the route of just creating integer columns to store these numbers (and did not encounter any problems).  But I was curious as to whether there was any benefit either way or some reason why I should preserve the datatype &#8211; for the most part, the foxpro columns set up like this were identity values, but not all.</p>
<p>Much appreciate your efforts in helping to make the decision less arduous 🙂</p>
<p>cheers<br />
Matt</p>
]]></content:encoded>
	</item>
	<item>
		<title>By: Erik</title>
		<link>/index.php/datamgmt/datadesign/sql-server-types-numeric-vs-int/#comment-3167</link>
		<dc:creator><![CDATA[Erik]]></dc:creator>
		<pubDate>Fri, 08 Oct 2010 01:27:27 +0000</pubDate>
		<guid isPermaLink="false">/index.php/2010/09/sql-server-types-numeric-vs-int/#comment-3167</guid>
		<description><![CDATA[I like that you did performance testing. It&#039;s nice to see people prove things sometimes rather than just making assertions.&lt;br /&gt;
&lt;br /&gt;
Erik]]></description>
		<content:encoded><![CDATA[<p>I like that you did performance testing. It&#8217;s nice to see people prove things sometimes rather than just making assertions.</p>
<p>Erik</p>
]]></content:encoded>
	</item>
</channel>
</rss>
