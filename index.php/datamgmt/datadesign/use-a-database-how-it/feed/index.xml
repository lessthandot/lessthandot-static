<?xml version="1.0" encoding="UTF-8"?><rss version="2.0"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:atom="http://www.w3.org/2005/Atom"
	xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
	
	>
<channel>
	<title>Comments on: Use a database how it was intended to be used</title>
	<atom:link href="/index.php/datamgmt/datadesign/use-a-database-how-it/feed/" rel="self" type="application/rss+xml" />
	<link>/index.php/datamgmt/datadesign/use-a-database-how-it/</link>
	<description>A Technical Community for IT Professionals</description>
	<lastBuildDate>Tue, 26 Feb 2019 12:40:14 +0000</lastBuildDate>
	<sy:updatePeriod>hourly</sy:updatePeriod>
	<sy:updateFrequency>1</sy:updateFrequency>
	<generator>https://wordpress.org/?v=4.6.1</generator>
	<item>
		<title>By: Naomi Nosonovsky</title>
		<link>/index.php/datamgmt/datadesign/use-a-database-how-it/#comment-4064</link>
		<dc:creator><![CDATA[Naomi Nosonovsky]]></dc:creator>
		<pubDate>Thu, 14 Apr 2011 22:34:46 +0000</pubDate>
		<guid isPermaLink="false">/index.php/2011/04/use-a-database-how-it/#comment-4064</guid>
		<description><![CDATA[Good point, Tom.]]></description>
		<content:encoded><![CDATA[<p>Good point, Tom.</p>
]]></content:encoded>
	</item>
	<item>
		<title>By: Tom</title>
		<link>/index.php/datamgmt/datadesign/use-a-database-how-it/#comment-4063</link>
		<dc:creator><![CDATA[Tom]]></dc:creator>
		<pubDate>Thu, 14 Apr 2011 16:19:59 +0000</pubDate>
		<guid isPermaLink="false">/index.php/2011/04/use-a-database-how-it/#comment-4063</guid>
		<description><![CDATA[I think there is a far, FAR worse problem with this code. &lt;br /&gt;
&quot;CREATE FUNCTION [dbo].[age](@SET VARCHAR(10))&quot; &lt;br /&gt;
&lt;br /&gt;
Age? Why is this called age? &lt;br /&gt;
You want a maintenance nightmare, start giving anything to do with physical measurements and dimensions a name that implies time or financial measurements. &lt;br /&gt;
&lt;br /&gt;
I don&#039;t care how good your DB design is, if you have a height function with a name like Age or Income or NumberOfCarsOwned, you have bigger problems than hardcoding Magic Numbers.  &lt;br /&gt;
&lt;br /&gt;
Sure, it may be a typo, but it&#039;s a little disturbing that noone mentioned it either here OR at stackoverflow. &lt;br /&gt;]]></description>
		<content:encoded><![CDATA[<p>I think there is a far, FAR worse problem with this code. <br />
&#8220;CREATE FUNCTION [dbo].[age](@SET VARCHAR(10))&#8221; </p>
<p>Age? Why is this called age? <br />
You want a maintenance nightmare, start giving anything to do with physical measurements and dimensions a name that implies time or financial measurements. </p>
<p>I don&#8217;t care how good your DB design is, if you have a height function with a name like Age or Income or NumberOfCarsOwned, you have bigger problems than hardcoding Magic Numbers.  </p>
<p>Sure, it may be a typo, but it&#8217;s a little disturbing that noone mentioned it either here OR at stackoverflow. </p>
]]></content:encoded>
	</item>
	<item>
		<title>By: Erik</title>
		<link>/index.php/datamgmt/datadesign/use-a-database-how-it/#comment-4062</link>
		<dc:creator><![CDATA[Erik]]></dc:creator>
		<pubDate>Wed, 06 Apr 2011 14:25:32 +0000</pubDate>
		<guid isPermaLink="false">/index.php/2011/04/use-a-database-how-it/#comment-4062</guid>
		<description><![CDATA[Heights is not a good example for 10,000+ rows because there wouldn&#039;t be that many classifications. Even if it was a sales volume pricing structure that was very complicated, I couldn&#039;t possibly imagine more than about 10 price points for different volumes.&lt;br /&gt;
&lt;br /&gt;
However, a different scenario where the lookup is a range could make sense: perhaps the column could be a date instead of numeric, like looking up historical product prices on certain dates where the lookup data only has the date the product changed price rather than a row for every calendar date.]]></description>
		<content:encoded><![CDATA[<p>Heights is not a good example for 10,000+ rows because there wouldn&#8217;t be that many classifications. Even if it was a sales volume pricing structure that was very complicated, I couldn&#8217;t possibly imagine more than about 10 price points for different volumes.</p>
<p>However, a different scenario where the lookup is a range could make sense: perhaps the column could be a date instead of numeric, like looking up historical product prices on certain dates where the lookup data only has the date the product changed price rather than a row for every calendar date.</p>
]]></content:encoded>
	</item>
	<item>
		<title>By: Jamie Thomson</title>
		<link>/index.php/datamgmt/datadesign/use-a-database-how-it/#comment-4061</link>
		<dc:creator><![CDATA[Jamie Thomson]]></dc:creator>
		<pubDate>Wed, 06 Apr 2011 03:45:26 +0000</pubDate>
		<guid isPermaLink="false">/index.php/2011/04/use-a-database-how-it/#comment-4061</guid>
		<description><![CDATA[Emtucifor,&lt;br /&gt;
Indeed, like Denis I&#039;d like to see see stats on that around bigger volumes. Its certainly an interesting way of solving the problem - I&#039;d like to know if its worth addding that to my &quot;utility belt&quot;.&lt;br /&gt;
&lt;br /&gt;
Jamie]]></description>
		<content:encoded><![CDATA[<p>Emtucifor,<br />
Indeed, like Denis I&#8217;d like to see see stats on that around bigger volumes. Its certainly an interesting way of solving the problem &#8211; I&#8217;d like to know if its worth addding that to my &#8220;utility belt&#8221;.</p>
<p>Jamie</p>
]]></content:encoded>
	</item>
	<item>
		<title>By: SQLDenis</title>
		<link>/index.php/datamgmt/datadesign/use-a-database-how-it/#comment-4060</link>
		<dc:creator><![CDATA[SQLDenis]]></dc:creator>
		<pubDate>Tue, 05 Apr 2011 20:54:51 +0000</pubDate>
		<guid isPermaLink="false">/index.php/2011/04/use-a-database-how-it/#comment-4060</guid>
		<description><![CDATA[Emtucifor,&lt;br /&gt;
&lt;br /&gt;
Feel free to make it a blog post,test all kind of scenarios with a table with 10000 rows, 100000 rows and 1 million rows to see if you get a noticeable difference]]></description>
		<content:encoded><![CDATA[<p>Emtucifor,</p>
<p>Feel free to make it a blog post,test all kind of scenarios with a table with 10000 rows, 100000 rows and 1 million rows to see if you get a noticeable difference</p>
]]></content:encoded>
	</item>
	<item>
		<title>By: Erik</title>
		<link>/index.php/datamgmt/datadesign/use-a-database-how-it/#comment-4059</link>
		<dc:creator><![CDATA[Erik]]></dc:creator>
		<pubDate>Tue, 05 Apr 2011 20:37:06 +0000</pubDate>
		<guid isPermaLink="false">/index.php/2011/04/use-a-database-how-it/#comment-4059</guid>
		<description><![CDATA[Jamie,&lt;br /&gt;
&lt;br /&gt;
I agree with the table design. To my surprise, your view performed better than this query. Here it is as at least one more tool for your toolbox:&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;
&lt;codeblock lang=&quot;tsql&quot; line=&quot;1&quot;&gt;SELECT P.* , H.*&lt;br /&gt;
FROM&lt;br /&gt;
   Players P&lt;br /&gt;
   CROSS APPLY (&lt;br /&gt;
      SELECT TOP 1 HeightDescription&lt;br /&gt;
      FROM Heights H&lt;br /&gt;
      WHERE P.Height &gt;= H.StartRange&lt;br /&gt;
      ORDER BY H.StartRange DESC&lt;br /&gt;
   ) H&lt;br /&gt;
WHERE&lt;br /&gt;
   H.HeightDescription = &#039;Tall&#039;&lt;/codeblock&gt;&lt;br /&gt;
&lt;br /&gt;
I think the worse performance is not a flaw with this method but a function of the small table sizes. In a situation where the Heights table is very large, I think the cost of doing the view join/aggregate will start to exceed the sort that makes my query worse right now.]]></description>
		<content:encoded><![CDATA[<p>Jamie,</p>
<p>I agree with the table design. To my surprise, your view performed better than this query. Here it is as at least one more tool for your toolbox:</p>
<p>
<codeblock lang="tsql" line="1">SELECT P.* , H.*<br />
FROM<br />
   Players P<br />
   CROSS APPLY (<br />
      SELECT TOP 1 HeightDescription<br />
      FROM Heights H<br />
      WHERE P.Height >= H.StartRange<br />
      ORDER BY H.StartRange DESC<br />
   ) H<br />
WHERE<br />
   H.HeightDescription = &#8216;Tall&#8217;</codeblock></p>
<p>I think the worse performance is not a flaw with this method but a function of the small table sizes. In a situation where the Heights table is very large, I think the cost of doing the view join/aggregate will start to exceed the sort that makes my query worse right now.</p>
]]></content:encoded>
	</item>
	<item>
		<title>By: chopstik</title>
		<link>/index.php/datamgmt/datadesign/use-a-database-how-it/#comment-4058</link>
		<dc:creator><![CDATA[chopstik]]></dc:creator>
		<pubDate>Tue, 05 Apr 2011 14:49:53 +0000</pubDate>
		<guid isPermaLink="false">/index.php/2011/04/use-a-database-how-it/#comment-4058</guid>
		<description><![CDATA[This is the result when you have developers who don&#039;t want to deal with the hassle of databases and figure they can handle all of their problems via whatever front-end code they want to write.  Just because you can doesn&#039;t mean you should. *sigh*]]></description>
		<content:encoded><![CDATA[<p>This is the result when you have developers who don&#8217;t want to deal with the hassle of databases and figure they can handle all of their problems via whatever front-end code they want to write.  Just because you can doesn&#8217;t mean you should. *sigh*</p>
]]></content:encoded>
	</item>
	<item>
		<title>By: SQLDenis</title>
		<link>/index.php/datamgmt/datadesign/use-a-database-how-it/#comment-4057</link>
		<dc:creator><![CDATA[SQLDenis]]></dc:creator>
		<pubDate>Tue, 05 Apr 2011 13:36:24 +0000</pubDate>
		<guid isPermaLink="false">/index.php/2011/04/use-a-database-how-it/#comment-4057</guid>
		<description><![CDATA[Jamie, that would work...anything is fine with me as long it is not hard coded]]></description>
		<content:encoded><![CDATA[<p>Jamie, that would work&#8230;anything is fine with me as long it is not hard coded</p>
]]></content:encoded>
	</item>
	<item>
		<title>By: Jamie Thomson</title>
		<link>/index.php/datamgmt/datadesign/use-a-database-how-it/#comment-4056</link>
		<dc:creator><![CDATA[Jamie Thomson]]></dc:creator>
		<pubDate>Tue, 05 Apr 2011 12:46:25 +0000</pubDate>
		<guid isPermaLink="false">/index.php/2011/04/use-a-database-how-it/#comment-4056</guid>
		<description><![CDATA[Good post Denis. I would be tempted to solve this slightly different however because, IMO, you have the same information stored twice. [Heights].[EndRange] is implied by [Heights].[StartRange] of the proceding [HeightId] and hence I would be tempted to solve this like so:&lt;br /&gt;
&lt;br /&gt;
CREATE TABLE Heights (  &lt;br /&gt;
    HeightId INT PRIMARY KEY not null,&lt;br /&gt;
    HeightDescription VARCHAR(20) not null,&lt;br /&gt;
    StartRange SMALLINT not null)&lt;br /&gt;
&lt;br /&gt;
INSERT Heights VALUES(1,&#039;Small&#039;,0)&lt;br /&gt;
INSERT Heights VALUES(2,&#039;Average&#039;,155)&lt;br /&gt;
INSERT Heights VALUES(3,&#039;Tall&#039;,176)&lt;br /&gt;
&lt;br /&gt;
create view vHeights as&lt;br /&gt;
select	h.HeightId,h.HeightDescription,h.StartRange,COALESCE(MIN(h_2.StartRange)-1,300)&lt;br /&gt;
from	Heights h&lt;br /&gt;
left outer join Heights h_2&lt;br /&gt;
	on	h.StartRange &#060; h_2.StartRange&lt;br /&gt;
group	by &lt;br /&gt;
	h.HeightId,h.HeightDescription,h.StartRange&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;
The advantage of this approach is that you have preserved data integrity. The disadvantage is of course that its going to take longer to query it. Gotta love trade-offs.&lt;br /&gt;
&lt;br /&gt;
JT]]></description>
		<content:encoded><![CDATA[<p>Good post Denis. I would be tempted to solve this slightly different however because, IMO, you have the same information stored twice. [Heights].[EndRange] is implied by [Heights].[StartRange] of the proceding [HeightId] and hence I would be tempted to solve this like so:</p>
<p>CREATE TABLE Heights (  <br />
    HeightId INT PRIMARY KEY not null,<br />
    HeightDescription VARCHAR(20) not null,<br />
    StartRange SMALLINT not null)</p>
<p>INSERT Heights VALUES(1,&#8217;Small&#8217;,0)<br />
INSERT Heights VALUES(2,&#8217;Average&#8217;,155)<br />
INSERT Heights VALUES(3,&#8217;Tall&#8217;,176)</p>
<p>create view vHeights as<br />
select	h.HeightId,h.HeightDescription,h.StartRange,COALESCE(MIN(h_2.StartRange)-1,300)<br />
from	Heights h<br />
left outer join Heights h_2<br />
	on	h.StartRange &lt; h_2.StartRange<br />
group	by <br />
	h.HeightId,h.HeightDescription,h.StartRange</p>
<p>
The advantage of this approach is that you have preserved data integrity. The disadvantage is of course that its going to take longer to query it. Gotta love trade-offs.</p>
<p>JT</p>
]]></content:encoded>
	</item>
	<item>
		<title>By: LNBruno</title>
		<link>/index.php/datamgmt/datadesign/use-a-database-how-it/#comment-4055</link>
		<dc:creator><![CDATA[LNBruno]]></dc:creator>
		<pubDate>Tue, 05 Apr 2011 10:34:49 +0000</pubDate>
		<guid isPermaLink="false">/index.php/2011/04/use-a-database-how-it/#comment-4055</guid>
		<description><![CDATA[What goes through my mind when I see code like that is &quot;Yeah, I have to support that type of insanity.&quot;&lt;br /&gt;
&lt;br /&gt;
But, that&#039;s what happens sometimes when your &quot;developers&quot; graduate to data table design via the Excel--&gt; Access--&gt; RDBMS path.]]></description>
		<content:encoded><![CDATA[<p>What goes through my mind when I see code like that is &#8220;Yeah, I have to support that type of insanity.&#8221;</p>
<p>But, that&#8217;s what happens sometimes when your &#8220;developers&#8221; graduate to data table design via the Excel&#8211;> Access&#8211;> RDBMS path.</p>
]]></content:encoded>
	</item>
</channel>
</rss>
