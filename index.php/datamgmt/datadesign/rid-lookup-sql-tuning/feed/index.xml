<?xml version="1.0" encoding="UTF-8"?><rss version="2.0"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:atom="http://www.w3.org/2005/Atom"
	xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
	
	>
<channel>
	<title>Comments on: RID Lookup take me down</title>
	<atom:link href="/index.php/datamgmt/datadesign/rid-lookup-sql-tuning/feed/" rel="self" type="application/rss+xml" />
	<link>/index.php/datamgmt/datadesign/rid-lookup-sql-tuning/</link>
	<description>A Technical Community for IT Professionals</description>
	<lastBuildDate>Tue, 26 Feb 2019 12:40:14 +0000</lastBuildDate>
	<sy:updatePeriod>hourly</sy:updatePeriod>
	<sy:updateFrequency>1</sy:updateFrequency>
	<generator>https://wordpress.org/?v=4.6.1</generator>
	<item>
		<title>By: Ted Krueger (onpnt)</title>
		<link>/index.php/datamgmt/datadesign/rid-lookup-sql-tuning/#comment-2995</link>
		<dc:creator><![CDATA[Ted Krueger (onpnt)]]></dc:creator>
		<pubDate>Sun, 25 Jul 2010 10:50:56 +0000</pubDate>
		<guid isPermaLink="false">/index.php/2010/07/rid-lookup-sql-tuning/#comment-2995</guid>
		<description><![CDATA[The example shows exactly how an RID Lookup operation would exist and execution plan and how to remove it with a covering index.  Covering indexes are not the focus of this.  It is the fix in this case but more so this is to help show what you can look for and a small part to execution plans for tuning.&lt;br /&gt;
&lt;br /&gt;
The production problem and the example to show RID Lookup are related again in showing RID Lookup operations.  &lt;br /&gt;
&lt;br /&gt;
RID Lookup will lookup one row per iteration.  So the lookup can be hundreds of thousands of lookups.  Hence a performance impact that can be extreemely large (like a table scan).]]></description>
		<content:encoded><![CDATA[<p>The example shows exactly how an RID Lookup operation would exist and execution plan and how to remove it with a covering index.  Covering indexes are not the focus of this.  It is the fix in this case but more so this is to help show what you can look for and a small part to execution plans for tuning.</p>
<p>The production problem and the example to show RID Lookup are related again in showing RID Lookup operations.  </p>
<p>RID Lookup will lookup one row per iteration.  So the lookup can be hundreds of thousands of lookups.  Hence a performance impact that can be extreemely large (like a table scan).</p>
]]></content:encoded>
	</item>
	<item>
		<title>By: Mario</title>
		<link>/index.php/datamgmt/datadesign/rid-lookup-sql-tuning/#comment-2994</link>
		<dc:creator><![CDATA[Mario]]></dc:creator>
		<pubDate>Sun, 25 Jul 2010 07:32:34 +0000</pubDate>
		<guid isPermaLink="false">/index.php/2010/07/rid-lookup-sql-tuning/#comment-2994</guid>
		<description><![CDATA[Although I understand your pledge for a covering index,&lt;br /&gt;
I do not see how the example you used represents the production problem you described at the start of your article. ItemCode is unique, so the result for the select query in the example will always be one (or no) rows, a case where the benefit of a covering index is close to nothing (or close to one random read). &lt;br /&gt;
Your claim: &quot; This type of table size will cause the RID Lookup to slow the performance of even the simplest queries.&quot; Is only true when an index range scan happens on thousands of rows, where there will be a RID lookup for each index row.&lt;br /&gt;
I also have trouble understanding your claim in the picture that &#039;for each record in the index seek&#039; &#039; essentially the cost of a tablescan is added&#039;..cpuld you explain this? A RID lookup looks up one row, right? How can this add the cost of a tablescan?]]></description>
		<content:encoded><![CDATA[<p>Although I understand your pledge for a covering index,<br />
I do not see how the example you used represents the production problem you described at the start of your article. ItemCode is unique, so the result for the select query in the example will always be one (or no) rows, a case where the benefit of a covering index is close to nothing (or close to one random read). <br />
Your claim: &#8221; This type of table size will cause the RID Lookup to slow the performance of even the simplest queries.&#8221; Is only true when an index range scan happens on thousands of rows, where there will be a RID lookup for each index row.<br />
I also have trouble understanding your claim in the picture that &#8216;for each record in the index seek&#8217; &#8216; essentially the cost of a tablescan is added&#8217;..cpuld you explain this? A RID lookup looks up one row, right? How can this add the cost of a tablescan?</p>
]]></content:encoded>
	</item>
	<item>
		<title>By: Ted Krueger (onpnt)</title>
		<link>/index.php/datamgmt/datadesign/rid-lookup-sql-tuning/#comment-2993</link>
		<dc:creator><![CDATA[Ted Krueger (onpnt)]]></dc:creator>
		<pubDate>Mon, 19 Jul 2010 21:54:00 +0000</pubDate>
		<guid isPermaLink="false">/index.php/2010/07/rid-lookup-sql-tuning/#comment-2993</guid>
		<description><![CDATA[Thanks guys!  Grant&#039;s book is pretty good.  When I looked around, there really isn&#039;t much that has everything packed into one book like he did.  Looking forward to the next one I hear he is working on.&lt;br /&gt;
&lt;br /&gt;
HAS, LOOP and MERGE JOINs coming up!  :-)]]></description>
		<content:encoded><![CDATA[<p>Thanks guys!  Grant&#8217;s book is pretty good.  When I looked around, there really isn&#8217;t much that has everything packed into one book like he did.  Looking forward to the next one I hear he is working on.</p>
<p>HAS, LOOP and MERGE JOINs coming up!  ðŸ™‚</p>
]]></content:encoded>
	</item>
	<item>
		<title>By: SQLDenis</title>
		<link>/index.php/datamgmt/datadesign/rid-lookup-sql-tuning/#comment-2992</link>
		<dc:creator><![CDATA[SQLDenis]]></dc:creator>
		<pubDate>Mon, 19 Jul 2010 20:41:59 +0000</pubDate>
		<guid isPermaLink="false">/index.php/2010/07/rid-lookup-sql-tuning/#comment-2992</guid>
		<description><![CDATA[waiting for the next post that will deal with HASH, LOOP and MERGE JOINs  :-)&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;
Just kidding, good article, I have to check that book out, I have the following book by Grant Fritchey and Sajal Dam: SQL Server 2008 Query Performance Tuning Distilled http://www.apress.com/book/view/9781430219026&lt;br /&gt;
&lt;br /&gt;
Will review it one of these days, Grant Fritchey was also at SQL Saturday in New York City a couple of months ago and I attended one of his sessions]]></description>
		<content:encoded><![CDATA[<p>waiting for the next post that will deal with HASH, LOOP and MERGE JOINs  ðŸ™‚</p>
<p>
Just kidding, good article, I have to check that book out, I have the following book by Grant Fritchey and Sajal Dam: SQL Server 2008 Query Performance Tuning Distilled <a href="http://www.apress.com/book/view/9781430219026" rel="nofollow">http://www.apress.com/book/view/9781430219026</a></p>
<p>Will review it one of these days, Grant Fritchey was also at SQL Saturday in New York City a couple of months ago and I attended one of his sessions</p>
]]></content:encoded>
	</item>
	<item>
		<title>By: George Mastros (gmmastros)</title>
		<link>/index.php/datamgmt/datadesign/rid-lookup-sql-tuning/#comment-2991</link>
		<dc:creator><![CDATA[George Mastros (gmmastros)]]></dc:creator>
		<pubDate>Mon, 19 Jul 2010 20:16:29 +0000</pubDate>
		<guid isPermaLink="false">/index.php/2010/07/rid-lookup-sql-tuning/#comment-2991</guid>
		<description><![CDATA[Thanks Ted.  I have a pretty good understanding of execution plans, but I bought the book anyway because I cannot claim to understand all of the various operations.]]></description>
		<content:encoded><![CDATA[<p>Thanks Ted.  I have a pretty good understanding of execution plans, but I bought the book anyway because I cannot claim to understand all of the various operations.</p>
]]></content:encoded>
	</item>
</channel>
</rss>
