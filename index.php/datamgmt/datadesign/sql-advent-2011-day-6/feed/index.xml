<?xml version="1.0" encoding="UTF-8"?><rss version="2.0"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:atom="http://www.w3.org/2005/Atom"
	xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
	
	>
<channel>
	<title>Comments on: SQL Advent 2011 Day 6: Windowing functions</title>
	<atom:link href="/index.php/datamgmt/datadesign/sql-advent-2011-day-6/feed/" rel="self" type="application/rss+xml" />
	<link>/index.php/datamgmt/datadesign/sql-advent-2011-day-6/</link>
	<description>A Technical Community for IT Professionals</description>
	<lastBuildDate>Tue, 26 Feb 2019 12:40:14 +0000</lastBuildDate>
	<sy:updatePeriod>hourly</sy:updatePeriod>
	<sy:updateFrequency>1</sy:updateFrequency>
	<generator>https://wordpress.org/?v=4.6.1</generator>
	<item>
		<title>By: SQLDenis</title>
		<link>/index.php/datamgmt/datadesign/sql-advent-2011-day-6/#comment-4951</link>
		<dc:creator><![CDATA[SQLDenis]]></dc:creator>
		<pubDate>Tue, 06 Dec 2011 12:43:52 +0000</pubDate>
		<guid isPermaLink="false">/index.php/2011/12/sql-advent-2011-day-6/#comment-4951</guid>
		<description><![CDATA[Steve, the reason I used UNION is because I wanted people to be able to run it on SQL Server 2005&lt;br /&gt;
&lt;br /&gt;
The reason I use temp tables instead of real tables is because someone left me a comment that I should use temp tables so that he didn&#039;t have to clean up the tables afterwards&lt;br /&gt;
&lt;br /&gt;
I could have used a table variable but then you have to run the piece that creates the table for every piece of code on the page first]]></description>
		<content:encoded><![CDATA[<p>Steve, the reason I used UNION is because I wanted people to be able to run it on SQL Server 2005</p>
<p>The reason I use temp tables instead of real tables is because someone left me a comment that I should use temp tables so that he didn&#8217;t have to clean up the tables afterwards</p>
<p>I could have used a table variable but then you have to run the piece that creates the table for every piece of code on the page first</p>
]]></content:encoded>
	</item>
	<item>
		<title>By: Eli Weinstock-Herman (tarwn)</title>
		<link>/index.php/datamgmt/datadesign/sql-advent-2011-day-6/#comment-4950</link>
		<dc:creator><![CDATA[Eli Weinstock-Herman (tarwn)]]></dc:creator>
		<pubDate>Tue, 06 Dec 2011 12:27:29 +0000</pubDate>
		<guid isPermaLink="false">/index.php/2011/12/sql-advent-2011-day-6/#comment-4950</guid>
		<description><![CDATA[Steve, while I would agree with the first point (I love the more terse method for defining multiple values), the Table Variable one is far less cut and dry. Temporary tables have a far more consistent track record while Temporary Variables have a number of drawbacks (most notably the way they are handled during plan cost estimation) that, in my mind at least, makes Table Variables more of a second choice to be used when they offer some sort of clear and useful advantage over Temporary Tables. So, in fact, the exact reverse of your statement.]]></description>
		<content:encoded><![CDATA[<p>Steve, while I would agree with the first point (I love the more terse method for defining multiple values), the Table Variable one is far less cut and dry. Temporary tables have a far more consistent track record while Temporary Variables have a number of drawbacks (most notably the way they are handled during plan cost estimation) that, in my mind at least, makes Table Variables more of a second choice to be used when they offer some sort of clear and useful advantage over Temporary Tables. So, in fact, the exact reverse of your statement.</p>
]]></content:encoded>
	</item>
	<item>
		<title>By: Steve</title>
		<link>/index.php/datamgmt/datadesign/sql-advent-2011-day-6/#comment-4949</link>
		<dc:creator><![CDATA[Steve]]></dc:creator>
		<pubDate>Tue, 06 Dec 2011 11:54:41 +0000</pubDate>
		<guid isPermaLink="false">/index.php/2011/12/sql-advent-2011-day-6/#comment-4949</guid>
		<description><![CDATA[Speaking of 1999 style code, two which really bother me are being used above:&lt;br /&gt;
&lt;br /&gt;
1) Using UNION ALL to insert multiple rows in a single insert statement. It is unintuitive and too much typing. The above could be replaced with the following:&lt;br /&gt;
   INSERT INTO #Rankings (Value) VALUES (&#039;A&#039;), (&#039;B&#039;), (&#039;C&#039;), (&#039;D&#039;), (&#039;E&#039;), (&#039;F&#039;);&lt;br /&gt;
Luckily the execution plans seem to be identical.&lt;br /&gt;
&lt;br /&gt;
2) Temperary tables. They DO have their uses, but often a table variable will do just as well if not better. This is certainly one of those cases. You could get rid of the existance check. Also, it will free you of needing to drop the table when you&#039;re all done, something that is missing from this article.&lt;br /&gt;]]></description>
		<content:encoded><![CDATA[<p>Speaking of 1999 style code, two which really bother me are being used above:</p>
<p>1) Using UNION ALL to insert multiple rows in a single insert statement. It is unintuitive and too much typing. The above could be replaced with the following:<br />
   INSERT INTO #Rankings (Value) VALUES (&#8216;A&#8217;), (&#8216;B&#8217;), (&#8216;C&#8217;), (&#8216;D&#8217;), (&#8216;E&#8217;), (&#8216;F&#8217;);<br />
Luckily the execution plans seem to be identical.</p>
<p>2) Temperary tables. They DO have their uses, but often a table variable will do just as well if not better. This is certainly one of those cases. You could get rid of the existance check. Also, it will free you of needing to drop the table when you&#8217;re all done, something that is missing from this article.</p>
]]></content:encoded>
	</item>
</channel>
</rss>
