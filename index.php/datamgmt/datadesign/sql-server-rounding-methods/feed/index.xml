<?xml version="1.0" encoding="UTF-8"?><rss version="2.0"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:atom="http://www.w3.org/2005/Atom"
	xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
	
	>
<channel>
	<title>Comments on: SQL Server Rounding Methods</title>
	<atom:link href="/index.php/datamgmt/datadesign/sql-server-rounding-methods/feed/" rel="self" type="application/rss+xml" />
	<link>/index.php/datamgmt/datadesign/sql-server-rounding-methods/</link>
	<description>A Technical Community for IT Professionals</description>
	<lastBuildDate>Tue, 26 Feb 2019 12:40:14 +0000</lastBuildDate>
	<sy:updatePeriod>hourly</sy:updatePeriod>
	<sy:updateFrequency>1</sy:updateFrequency>
	<generator>https://wordpress.org/?v=4.6.1</generator>
	<item>
		<title>By: George Mastros (gmmastros)</title>
		<link>/index.php/datamgmt/datadesign/sql-server-rounding-methods/#comment-544</link>
		<dc:creator><![CDATA[George Mastros (gmmastros)]]></dc:creator>
		<pubDate>Thu, 13 Dec 2012 20:08:36 +0000</pubDate>
		<guid isPermaLink="false">/index.php/2008/12/sql-server-rounding-methods/#comment-544</guid>
		<description><![CDATA[Jeffrey Wang,&lt;br /&gt;
&lt;br /&gt;
You could use the ceiling function instead, like this:&lt;br /&gt;
&lt;br /&gt;
declare @x float&lt;br /&gt;
set @x=4.015&lt;br /&gt;
&lt;br /&gt;
select @x, &lt;br /&gt;
       ROUND(@x, 2), -- 4.02 is expected but it returns 4.01&lt;br /&gt;
       Ceiling(@x * 100)/100  -- 4.02 is returned&lt;br /&gt;
&lt;br /&gt;
Make sure to test this with negative numbers if you have any.]]></description>
		<content:encoded><![CDATA[<p>Jeffrey Wang,</p>
<p>You could use the ceiling function instead, like this:</p>
<p>declare @x float<br />
set @x=4.015</p>
<p>select @x, <br />
       ROUND(@x, 2), &#8212; 4.02 is expected but it returns 4.01<br />
       Ceiling(@x * 100)/100  &#8212; 4.02 is returned</p>
<p>Make sure to test this with negative numbers if you have any.</p>
]]></content:encoded>
	</item>
	<item>
		<title>By: Jeffrey Wang</title>
		<link>/index.php/datamgmt/datadesign/sql-server-rounding-methods/#comment-543</link>
		<dc:creator><![CDATA[Jeffrey Wang]]></dc:creator>
		<pubDate>Thu, 13 Dec 2012 19:43:40 +0000</pubDate>
		<guid isPermaLink="false">/index.php/2008/12/sql-server-rounding-methods/#comment-543</guid>
		<description><![CDATA[in case of float, SQL round sometimes has problem, for example:&lt;br /&gt;
&lt;br /&gt;
declare @x float&lt;br /&gt;
set @x=4.015&lt;br /&gt;
select ROUND(@x, 2) -- 4.02 is expected but it returns 4.01&lt;br /&gt;
&lt;br /&gt;
Any idea to make it return 4.02? except using:&lt;br /&gt;
select cast(ROUND(CAST(@x as decimal(38,10)),2) as float)&lt;br /&gt;
&lt;br /&gt;
Thanks&lt;br /&gt;]]></description>
		<content:encoded><![CDATA[<p>in case of float, SQL round sometimes has problem, for example:</p>
<p>declare @x float<br />
set @x=4.015<br />
select ROUND(@x, 2) &#8212; 4.02 is expected but it returns 4.01</p>
<p>Any idea to make it return 4.02? except using:<br />
select cast(ROUND(CAST(@x as decimal(38,10)),2) as float)</p>
<p>Thanks</p>
]]></content:encoded>
	</item>
	<item>
		<title>By: Sera White</title>
		<link>/index.php/datamgmt/datadesign/sql-server-rounding-methods/#comment-542</link>
		<dc:creator><![CDATA[Sera White]]></dc:creator>
		<pubDate>Thu, 04 Aug 2011 17:04:51 +0000</pubDate>
		<guid isPermaLink="false">/index.php/2008/12/sql-server-rounding-methods/#comment-542</guid>
		<description><![CDATA[Thank you so much for this article.  It helped me tremendously!]]></description>
		<content:encoded><![CDATA[<p>Thank you so much for this article.  It helped me tremendously!</p>
]]></content:encoded>
	</item>
	<item>
		<title>By: The Mikeness</title>
		<link>/index.php/datamgmt/datadesign/sql-server-rounding-methods/#comment-549</link>
		<dc:creator><![CDATA[The Mikeness]]></dc:creator>
		<pubDate>Fri, 28 Jan 2011 23:28:35 +0000</pubDate>
		<guid isPermaLink="false">/index.php/2008/12/sql-server-rounding-methods/#comment-549</guid>
		<description><![CDATA[PLEASE DO NOT USE MY MYSQL FUNCTION ABOVE! IT IS WRONG!&lt;br /&gt;
&lt;br /&gt;
Use this one instead:&lt;br /&gt;
&lt;br /&gt;
CREATE DEFINER=`root`@`%` FUNCTION `BROUND`( value DECIMAL(65,30), places TINYINT(3) UNSIGNED ) RETURNS decimal(65,30) COMMENT &#039;WARNING over decimal(65,30) will round normally!&#039;&lt;br /&gt;
    DETERMINISTIC&lt;br /&gt;
RETURN &lt;br /&gt;
CASE WHEN &lt;br /&gt;
          LOCATE( &#039;.&#039;, value ) &#062;= 1&lt;br /&gt;
          AND LENGTH( SUBSTRING( value, LOCATE( &#039;.&#039;, value ) +1 ) ) &#060; 31&lt;br /&gt;
          AND places &#062; -1&lt;br /&gt;
          AND LENGTH( value ) - LOCATE( &#039;.&#039;, value ) &#062; places&lt;br /&gt;
          AND SUBSTRING( value, LOCATE( &#039;.&#039;, value ) + places + 1, 1 ) = 5&lt;br /&gt;
          AND SUBSTRING( value, LOCATE( &#039;.&#039;, value ) + places + 2 ) = 0&lt;br /&gt;
          AND SUBSTRING( value, LOCATE( &#039;.&#039;, value ) + places + (CASE WHEN places = 0 THEN -1 ELSE 0 END ), 1 ) % 2 = 1&lt;br /&gt;
          &lt;br /&gt;
THEN&lt;br /&gt;
          SUBSTRING( value, 1, LOCATE( &#039;.&#039;, value ) + places + (CASE WHEN places = 0 THEN -1 ELSE 0 END ) )&lt;br /&gt;
ELSE &lt;br /&gt;
          ROUND( value, places )&lt;br /&gt;
END;&lt;br /&gt;
&lt;br /&gt;
Do not be confused in how it works, here are some examples of how a correct banker&#039;s rounding function should work:&lt;br /&gt;
&lt;br /&gt;
BROUND(6.433500,3) = 6.433&lt;br /&gt;
BROUND(6.433503,3) = 6.434&lt;br /&gt;
BROUND(6.434500,3) = 6.435&lt;br /&gt;
BROUND(6.434503,3) = 6.434]]></description>
		<content:encoded><![CDATA[<p>PLEASE DO NOT USE MY MYSQL FUNCTION ABOVE! IT IS WRONG!</p>
<p>Use this one instead:</p>
<p>CREATE DEFINER=`root`@`%` FUNCTION `BROUND`( value DECIMAL(65,30), places TINYINT(3) UNSIGNED ) RETURNS decimal(65,30) COMMENT &#8216;WARNING over decimal(65,30) will round normally!&#8217;<br />
    DETERMINISTIC<br />
RETURN <br />
CASE WHEN <br />
          LOCATE( &#8216;.&#8217;, value ) &gt;= 1<br />
          AND LENGTH( SUBSTRING( value, LOCATE( &#8216;.&#8217;, value ) +1 ) ) &lt; 31<br />
          AND places &gt; -1<br />
          AND LENGTH( value ) &#8211; LOCATE( &#8216;.&#8217;, value ) &gt; places<br />
          AND SUBSTRING( value, LOCATE( &#8216;.&#8217;, value ) + places + 1, 1 ) = 5<br />
          AND SUBSTRING( value, LOCATE( &#8216;.&#8217;, value ) + places + 2 ) = 0<br />
          AND SUBSTRING( value, LOCATE( &#8216;.&#8217;, value ) + places + (CASE WHEN places = 0 THEN -1 ELSE 0 END ), 1 ) % 2 = 1</p>
<p>THEN<br />
          SUBSTRING( value, 1, LOCATE( &#8216;.&#8217;, value ) + places + (CASE WHEN places = 0 THEN -1 ELSE 0 END ) )<br />
ELSE <br />
          ROUND( value, places )<br />
END;</p>
<p>Do not be confused in how it works, here are some examples of how a correct banker&#8217;s rounding function should work:</p>
<p>BROUND(6.433500,3) = 6.433<br />
BROUND(6.433503,3) = 6.434<br />
BROUND(6.434500,3) = 6.435<br />
BROUND(6.434503,3) = 6.434</p>
]]></content:encoded>
	</item>
	<item>
		<title>By: The Mikeness</title>
		<link>/index.php/datamgmt/datadesign/sql-server-rounding-methods/#comment-548</link>
		<dc:creator><![CDATA[The Mikeness]]></dc:creator>
		<pubDate>Tue, 09 Mar 2010 17:49:36 +0000</pubDate>
		<guid isPermaLink="false">/index.php/2008/12/sql-server-rounding-methods/#comment-548</guid>
		<description><![CDATA[Ah, I think I figured it out, just have to encode the &#060;&#062; characters.&lt;br /&gt;
&lt;br /&gt;
For those of you who have stumbled upon this looking for a way to do banker&#039;s rounding in MySQL, I will share with you what I use.&lt;br /&gt;
&lt;br /&gt;
CREATE FUNCTION BROUND( value DECIMAL(65,30), places TINYINT(3) UNSIGNED ) RETURNS DECIMAL(65,30) DETERMINISTIC RETURN &lt;br /&gt;
CASE WHEN &lt;br /&gt;
          LOCATE( &#039;.&#039;, value ) &#062;= 1 &lt;br /&gt;
          AND LENGTH( value ) &#060; 33&lt;br /&gt;
          AND places &#062; 0&lt;br /&gt;
          AND LENGTH( value ) - LOCATE( &#039;.&#039;, value ) &#062; places&lt;br /&gt;
          AND SUBSTRING( value, LOCATE( &#039;.&#039;, value ) + places + 1, 1 ) = 5 &lt;br /&gt;
          AND SUBSTRING( value, LOCATE( &#039;.&#039;, value ) + places, 1 ) % 2 = 0 &lt;br /&gt;
          &lt;br /&gt;
THEN&lt;br /&gt;
          SUBSTRING( value, 1, LOCATE( &#039;.&#039;, value ) + places )&lt;br /&gt;
ELSE &lt;br /&gt;
          ROUND( value, places )&lt;br /&gt;
END;&lt;br /&gt;
&lt;br /&gt;
Hopefully this saves someone pulling out their hair trying to figure out how to address all the 1 cent errors when comparing MySQL invoice reporting that uses MySQL&#039;s arithmetic ROUND function against what their accounting software that uses banker&#039;s rounding is telling them (i.e. Simply Accounting or many others).&lt;br /&gt;
&lt;br /&gt;
I found out the hard way that if you have it accept and return a varchar, the answer is not precise because the decimal number requires more bytes than the varchar version, and the built-in ROUND function it depends on would then treat it differently in that case.]]></description>
		<content:encoded><![CDATA[<p>Ah, I think I figured it out, just have to encode the &lt;&gt; characters.</p>
<p>For those of you who have stumbled upon this looking for a way to do banker&#8217;s rounding in MySQL, I will share with you what I use.</p>
<p>CREATE FUNCTION BROUND( value DECIMAL(65,30), places TINYINT(3) UNSIGNED ) RETURNS DECIMAL(65,30) DETERMINISTIC RETURN <br />
CASE WHEN <br />
          LOCATE( &#8216;.&#8217;, value ) &gt;= 1 <br />
          AND LENGTH( value ) &lt; 33<br />
          AND places &gt; 0<br />
          AND LENGTH( value ) &#8211; LOCATE( &#8216;.&#8217;, value ) &gt; places<br />
          AND SUBSTRING( value, LOCATE( &#8216;.&#8217;, value ) + places + 1, 1 ) = 5 <br />
          AND SUBSTRING( value, LOCATE( &#8216;.&#8217;, value ) + places, 1 ) % 2 = 0 </p>
<p>THEN<br />
          SUBSTRING( value, 1, LOCATE( &#8216;.&#8217;, value ) + places )<br />
ELSE <br />
          ROUND( value, places )<br />
END;</p>
<p>Hopefully this saves someone pulling out their hair trying to figure out how to address all the 1 cent errors when comparing MySQL invoice reporting that uses MySQL&#8217;s arithmetic ROUND function against what their accounting software that uses banker&#8217;s rounding is telling them (i.e. Simply Accounting or many others).</p>
<p>I found out the hard way that if you have it accept and return a varchar, the answer is not precise because the decimal number requires more bytes than the varchar version, and the built-in ROUND function it depends on would then treat it differently in that case.</p>
]]></content:encoded>
	</item>
	<item>
		<title>By: The Mikeness</title>
		<link>/index.php/datamgmt/datadesign/sql-server-rounding-methods/#comment-547</link>
		<dc:creator><![CDATA[The Mikeness]]></dc:creator>
		<pubDate>Tue, 09 Mar 2010 17:47:36 +0000</pubDate>
		<guid isPermaLink="false">/index.php/2008/12/sql-server-rounding-methods/#comment-547</guid>
		<description><![CDATA[Hello, I&#039;m trying to post a comment and am getting errors:&lt;br /&gt;
&lt;br /&gt;
Cannot post comment, please correct these errors:&lt;br /&gt;
Parser error: XML_ERR_NAME_REQUIRED near e ) &#062;= 1 &lt;br /&gt;
&lt;br /&gt;
Trying to post a function I created that might save some people some grief. Is there a way to put it in a PRE tag or have the parsing ignore it, I think it&#039;s choking on a greater than or less than sign and thinking it&#039;s a tag.]]></description>
		<content:encoded><![CDATA[<p>Hello, I&#8217;m trying to post a comment and am getting errors:</p>
<p>Cannot post comment, please correct these errors:<br />
Parser error: XML_ERR_NAME_REQUIRED near e ) &gt;= 1 </p>
<p>Trying to post a function I created that might save some people some grief. Is there a way to put it in a PRE tag or have the parsing ignore it, I think it&#8217;s choking on a greater than or less than sign and thinking it&#8217;s a tag.</p>
]]></content:encoded>
	</item>
	<item>
		<title>By: Tim</title>
		<link>/index.php/datamgmt/datadesign/sql-server-rounding-methods/#comment-545</link>
		<dc:creator><![CDATA[Tim]]></dc:creator>
		<pubDate>Tue, 24 Nov 2009 18:41:26 +0000</pubDate>
		<guid isPermaLink="false">/index.php/2008/12/sql-server-rounding-methods/#comment-545</guid>
		<description><![CDATA[Thanks George.&lt;br /&gt;
I may have found a typo... In the RoundUp function... it looks like the  =5   should be &#060;5 .  That&#039;s the only way I was able to get it to work.]]></description>
		<content:encoded><![CDATA[<p>Thanks George.<br />
I may have found a typo&#8230; In the RoundUp function&#8230; it looks like the  =5   should be &lt;5 .  That&#8217;s the only way I was able to get it to work.</p>
]]></content:encoded>
	</item>
	<item>
		<title>By: hamzah</title>
		<link>/index.php/datamgmt/datadesign/sql-server-rounding-methods/#comment-546</link>
		<dc:creator><![CDATA[hamzah]]></dc:creator>
		<pubDate>Mon, 25 May 2009 05:45:15 +0000</pubDate>
		<guid isPermaLink="false">/index.php/2008/12/sql-server-rounding-methods/#comment-546</guid>
		<description><![CDATA[hy all&lt;br /&gt;
&lt;br /&gt;
i wana to get the number after &quot;dot&quot; in decimal number &lt;br /&gt;
&lt;br /&gt;
for exampel &lt;br /&gt;
1234.5 here i wanna to got just number after &quot;dot&quot; here it&#039;s 5&lt;br /&gt;
&lt;br /&gt;
thank advance]]></description>
		<content:encoded><![CDATA[<p>hy all</p>
<p>i wana to get the number after &#8220;dot&#8221; in decimal number </p>
<p>for exampel <br />
1234.5 here i wanna to got just number after &#8220;dot&#8221; here it&#8217;s 5</p>
<p>thank advance</p>
]]></content:encoded>
	</item>
	<item>
		<title>By: Joe Celko</title>
		<link>/index.php/datamgmt/datadesign/sql-server-rounding-methods/#comment-554</link>
		<dc:creator><![CDATA[Joe Celko]]></dc:creator>
		<pubDate>Mon, 15 Dec 2008 14:59:16 +0000</pubDate>
		<guid isPermaLink="false">/index.php/2008/12/sql-server-rounding-methods/#comment-554</guid>
		<description><![CDATA[I am still surprised at how many programmers do not know about these rounding methods in various languages.  Back in the old days, COBOL programmers were very careful.&lt;br /&gt;
&lt;br /&gt;
As an aside, the SQL Standards let rounding and truncation be implementation defined.]]></description>
		<content:encoded><![CDATA[<p>I am still surprised at how many programmers do not know about these rounding methods in various languages.  Back in the old days, COBOL programmers were very careful.</p>
<p>As an aside, the SQL Standards let rounding and truncation be implementation defined.</p>
]]></content:encoded>
	</item>
	<item>
		<title>By: George Mastros (gmmastros)</title>
		<link>/index.php/datamgmt/datadesign/sql-server-rounding-methods/#comment-553</link>
		<dc:creator><![CDATA[George Mastros (gmmastros)]]></dc:creator>
		<pubDate>Mon, 15 Dec 2008 10:57:46 +0000</pubDate>
		<guid isPermaLink="false">/index.php/2008/12/sql-server-rounding-methods/#comment-553</guid>
		<description><![CDATA[sangam,&lt;br /&gt;
&lt;br /&gt;
When performing math in T-SQL on integers, the result is always an integer.  Ex:&lt;br /&gt;
&lt;br /&gt;
Select 7/2&lt;br /&gt;
&lt;br /&gt;
Since the 7 is an integer and the 2 is an integer, the result is 3, which rounds to 3.&lt;br /&gt;
&lt;br /&gt;
If you force the inputs to be a decimal data type, the result is a decimal, which then rounds to 4.  Ex:&lt;br /&gt;
&lt;br /&gt;
Select 7.0/2&lt;br /&gt;
Select Round(7.0/2, 0)&lt;br /&gt;
&lt;br /&gt;
You&#039;ll get 3.5 for the first select, which rounds to 4.&lt;br /&gt;
&lt;br /&gt;
For more information on this:  /index.php/DataMgmt/DataDesign/sql-server-precision-and-scale-problems]]></description>
		<content:encoded><![CDATA[<p>sangam,</p>
<p>When performing math in T-SQL on integers, the result is always an integer.  Ex:</p>
<p>Select 7/2</p>
<p>Since the 7 is an integer and the 2 is an integer, the result is 3, which rounds to 3.</p>
<p>If you force the inputs to be a decimal data type, the result is a decimal, which then rounds to 4.  Ex:</p>
<p>Select 7.0/2<br />
Select Round(7.0/2, 0)</p>
<p>You&#8217;ll get 3.5 for the first select, which rounds to 4.</p>
<p>For more information on this:  <a href="/index.php/DataMgmt/DataDesign/sql-server-precision-and-scale-problems" rel="nofollow">/index.php/DataMgmt/DataDesign/sql-server-precision-and-scale-problems</a></p>
]]></content:encoded>
	</item>
</channel>
</rss>
