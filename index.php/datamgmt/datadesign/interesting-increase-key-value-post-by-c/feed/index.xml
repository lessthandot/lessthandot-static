<?xml version="1.0" encoding="UTF-8"?><rss version="2.0"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:atom="http://www.w3.org/2005/Atom"
	xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
	
	>
<channel>
	<title>Comments on: Interesting Increase Key Value Post By CSS SQL Server Engineers</title>
	<atom:link href="/index.php/datamgmt/datadesign/interesting-increase-key-value-post-by-c/feed/" rel="self" type="application/rss+xml" />
	<link>/index.php/datamgmt/datadesign/interesting-increase-key-value-post-by-c/</link>
	<description>A Technical Community for IT Professionals</description>
	<lastBuildDate>Tue, 26 Feb 2019 12:40:14 +0000</lastBuildDate>
	<sy:updatePeriod>hourly</sy:updatePeriod>
	<sy:updateFrequency>1</sy:updateFrequency>
	<generator>https://wordpress.org/?v=4.6.1</generator>
	<item>
		<title>By: Erik</title>
		<link>/index.php/datamgmt/datadesign/interesting-increase-key-value-post-by-c/#comment-2008</link>
		<dc:creator><![CDATA[Erik]]></dc:creator>
		<pubDate>Thu, 29 Oct 2009 17:18:02 +0000</pubDate>
		<guid isPermaLink="false">/index.php/2009/10/interesting-increase-key-value-post-by-c/#comment-2008</guid>
		<description><![CDATA[Actually, I&#039;m really curious to know why it must be an exclusive table lock. Isn&#039;t an update an atomic operation? Or is there still a race condition window where someone could read the value after someone else has but before they&#039;ve updated it?&lt;br /&gt;
&lt;br /&gt;
The use of TABLOCKX suggest to me to use one key-gen table per data table so that high concurrency systems are not harmed.]]></description>
		<content:encoded><![CDATA[<p>Actually, I&#8217;m really curious to know why it must be an exclusive table lock. Isn&#8217;t an update an atomic operation? Or is there still a race condition window where someone could read the value after someone else has but before they&#8217;ve updated it?</p>
<p>The use of TABLOCKX suggest to me to use one key-gen table per data table so that high concurrency systems are not harmed.</p>
]]></content:encoded>
	</item>
	<item>
		<title>By: Erik</title>
		<link>/index.php/datamgmt/datadesign/interesting-increase-key-value-post-by-c/#comment-2007</link>
		<dc:creator><![CDATA[Erik]]></dc:creator>
		<pubDate>Thu, 29 Oct 2009 14:54:27 +0000</pubDate>
		<guid isPermaLink="false">/index.php/2009/10/interesting-increase-key-value-post-by-c/#comment-2007</guid>
		<description><![CDATA[Yes, Jeff!! Thanks for mentioning the parallelism issue. I don&#039;t grasp how it exactly connects, here, but given huge range of problems with it, I&#039;m not surprised.]]></description>
		<content:encoded><![CDATA[<p>Yes, Jeff!! Thanks for mentioning the parallelism issue. I don&#8217;t grasp how it exactly connects, here, but given huge range of problems with it, I&#8217;m not surprised.</p>
]]></content:encoded>
	</item>
	<item>
		<title>By: JeffModen</title>
		<link>/index.php/datamgmt/datadesign/interesting-increase-key-value-post-by-c/#comment-2006</link>
		<dc:creator><![CDATA[JeffModen]]></dc:creator>
		<pubDate>Thu, 29 Oct 2009 02:03:57 +0000</pubDate>
		<guid isPermaLink="false">/index.php/2009/10/interesting-increase-key-value-post-by-c/#comment-2006</guid>
		<description><![CDATA[Heh... no wonder they were having problems with it... The following construct in the original post from the start of this thread is still incorrect...&lt;br /&gt;
______________________________________________&lt;br /&gt;
DECLARE @iVal INT&lt;br /&gt;
 &lt;br /&gt;
UPDATE CounterTable &lt;br /&gt;
SET @iVal = iVal = iVal + 1 &lt;br /&gt;
WHERE CounterName = &#039;CaseNumber&#039;&lt;br /&gt;
 &lt;br /&gt;
RETURN @iVal&lt;br /&gt;
______________________________________________&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;
It should be...&lt;br /&gt;
______________________________________________&lt;br /&gt;
DECLARE @iVal INT&lt;br /&gt;
 &lt;br /&gt;
UPDATE CounterTable &lt;br /&gt;
SET @iVal = iVal = @iVal + 1 &lt;br /&gt;
WHERE CounterName = &#039;CaseNumber&#039;&lt;br /&gt;
 &lt;br /&gt;
RETURN @iVal&lt;br /&gt;
______________________________________________&lt;br /&gt;
&lt;br /&gt;
The other thing is that they are missing a few &quot;safeties&quot;.  To be safe, you must prevent others from inserting/modifying/deleting to or from the table.  You must also prevent parallelism.  All of that is accomplished as follows...&lt;br /&gt;
&lt;br /&gt;
______________________________________________&lt;br /&gt;
DECLARE @iVal INT&lt;br /&gt;
 &lt;br /&gt;
UPDATE CounterTable &lt;br /&gt;
SET @iVal = iVal = @iVal + 1&lt;br /&gt;
FROM CounterTable WITH (TABLOCKX) &lt;br /&gt;
WHERE CounterName = &#039;CaseNumber&#039;&lt;br /&gt;
OPTION (MAXDOP 1)&lt;br /&gt;
 &lt;br /&gt;
RETURN @iVal&lt;br /&gt;
______________________________________________&lt;br /&gt;
&lt;br /&gt;
--Jeff Moden&lt;br /&gt;
&lt;br /&gt;]]></description>
		<content:encoded><![CDATA[<p>Heh&#8230; no wonder they were having problems with it&#8230; The following construct in the original post from the start of this thread is still incorrect&#8230;<br />
______________________________________________<br />
DECLARE @iVal INT</p>
<p>UPDATE CounterTable <br />
SET @iVal = iVal = iVal + 1 <br />
WHERE CounterName = &#8216;CaseNumber&#8217;</p>
<p>RETURN @iVal<br />
______________________________________________</p>
<p>
It should be&#8230;<br />
______________________________________________<br />
DECLARE @iVal INT</p>
<p>UPDATE CounterTable <br />
SET @iVal = iVal = @iVal + 1 <br />
WHERE CounterName = &#8216;CaseNumber&#8217;</p>
<p>RETURN @iVal<br />
______________________________________________</p>
<p>The other thing is that they are missing a few &#8220;safeties&#8221;.  To be safe, you must prevent others from inserting/modifying/deleting to or from the table.  You must also prevent parallelism.  All of that is accomplished as follows&#8230;</p>
<p>______________________________________________<br />
DECLARE @iVal INT</p>
<p>UPDATE CounterTable <br />
SET @iVal = iVal = @iVal + 1<br />
FROM CounterTable WITH (TABLOCKX) <br />
WHERE CounterName = &#8216;CaseNumber&#8217;<br />
OPTION (MAXDOP 1)</p>
<p>RETURN @iVal<br />
______________________________________________</p>
<p>&#8211;Jeff Moden</p>
]]></content:encoded>
	</item>
	<item>
		<title>By: Ken Tong</title>
		<link>/index.php/datamgmt/datadesign/interesting-increase-key-value-post-by-c/#comment-2005</link>
		<dc:creator><![CDATA[Ken Tong]]></dc:creator>
		<pubDate>Wed, 28 Oct 2009 23:46:29 +0000</pubDate>
		<guid isPermaLink="false">/index.php/2009/10/interesting-increase-key-value-post-by-c/#comment-2005</guid>
		<description><![CDATA[Emtucifor, thanks for you excellent example. I use this syntax (@var = column = /expression/) a lot and I have to pay extra attention to it in the future.]]></description>
		<content:encoded><![CDATA[<p>Emtucifor, thanks for you excellent example. I use this syntax (@var = column = /expression/) a lot and I have to pay extra attention to it in the future.</p>
]]></content:encoded>
	</item>
	<item>
		<title>By: SQLDenis</title>
		<link>/index.php/datamgmt/datadesign/interesting-increase-key-value-post-by-c/#comment-2004</link>
		<dc:creator><![CDATA[SQLDenis]]></dc:creator>
		<pubDate>Wed, 28 Oct 2009 17:15:29 +0000</pubDate>
		<guid isPermaLink="false">/index.php/2009/10/interesting-increase-key-value-post-by-c/#comment-2004</guid>
		<description><![CDATA[Thanks Emtucifor...in SQL 2008 with compound operators, multi-row inserts and initalizing variables when declaring,  the code you posted &lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;
CREATE TABLE #Temp (i INT, j INT)&lt;br /&gt;
INSERT INTO #Temp SELECT 0, 0&lt;br /&gt;
INSERT INTO #Temp SELECT 0, 0&lt;br /&gt;
INSERT INTO #Temp SELECT 0, 0&lt;br /&gt;
DECLARE @i INT, @j INT&lt;br /&gt;
SET @i = 1&lt;br /&gt;
SET @j = 1&lt;br /&gt;
UPDATE #Temp&lt;br /&gt;
SET&lt;br /&gt;
@i = @i + 1, @i = i = @i + 1,&lt;br /&gt;
@j = @j + 1, @j = @j + 1, j = @j&lt;br /&gt;
SELECT * FROM #Temp&lt;br /&gt;
DROP TABLE #Temp&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;
can be written as the following in 2008 and will save you a couple of lines of code&lt;br /&gt;
&lt;br /&gt;
CREATE TABLE #Temp (i INT, j INT)&lt;br /&gt;
INSERT INTO #Temp values(0,0),(0,0),(0,0)&lt;br /&gt;
DECLARE  @i INT =1, @j INT =1&lt;br /&gt;
&lt;br /&gt;
UPDATE #Temp&lt;br /&gt;
SET&lt;br /&gt;
       @i += 1, @i = i = @i + 1,&lt;br /&gt;
       @j +=  1, @j += 1, j = @j&lt;br /&gt;
SELECT * FROM #Temp&lt;br /&gt;
DROP TABLE #Temp]]></description>
		<content:encoded><![CDATA[<p>Thanks Emtucifor&#8230;in SQL 2008 with compound operators, multi-row inserts and initalizing variables when declaring,  the code you posted </p>
<p>
CREATE TABLE #Temp (i INT, j INT)<br />
INSERT INTO #Temp SELECT 0, 0<br />
INSERT INTO #Temp SELECT 0, 0<br />
INSERT INTO #Temp SELECT 0, 0<br />
DECLARE @i INT, @j INT<br />
SET @i = 1<br />
SET @j = 1<br />
UPDATE #Temp<br />
SET<br />
@i = @i + 1, @i = i = @i + 1,<br />
@j = @j + 1, @j = @j + 1, j = @j<br />
SELECT * FROM #Temp<br />
DROP TABLE #Temp</p>
<p>can be written as the following in 2008 and will save you a couple of lines of code</p>
<p>CREATE TABLE #Temp (i INT, j INT)<br />
INSERT INTO #Temp values(0,0),(0,0),(0,0)<br />
DECLARE  @i INT =1, @j INT =1</p>
<p>UPDATE #Temp<br />
SET<br />
       @i += 1, @i = i = @i + 1,<br />
       @j +=  1, @j += 1, j = @j<br />
SELECT * FROM #Temp<br />
DROP TABLE #Temp</p>
]]></content:encoded>
	</item>
	<item>
		<title>By: Erik</title>
		<link>/index.php/datamgmt/datadesign/interesting-increase-key-value-post-by-c/#comment-2003</link>
		<dc:creator><![CDATA[Erik]]></dc:creator>
		<pubDate>Wed, 28 Oct 2009 15:43:40 +0000</pubDate>
		<guid isPermaLink="false">/index.php/2009/10/interesting-increase-key-value-post-by-c/#comment-2003</guid>
		<description><![CDATA[My apologies. When I first ran that script back in June of 2004 on a SQL 2000 box, it behaved as I described. That Denis didn&#039;t check me on it was because he trusted me. (and evidently shouldn&#039;t have!)&lt;br /&gt;
&lt;br /&gt;
However, it&#039;s still not completely resolved for me. Here is another example of how this syntax may not always work as expected:&lt;br /&gt;
&lt;br /&gt;
CREATE TABLE #Temp (i INT, j INT)&lt;br /&gt;
INSERT INTO #Temp SELECT 0, 0&lt;br /&gt;
INSERT INTO #Temp SELECT 0, 0&lt;br /&gt;
INSERT INTO #Temp SELECT 0, 0&lt;br /&gt;
DECLARE @i INT, @j INT&lt;br /&gt;
SET @i = 1&lt;br /&gt;
SET @j = 1&lt;br /&gt;
UPDATE #Temp&lt;br /&gt;
SET&lt;br /&gt;
   @i = @i + 1, @i = i = @i + 1,&lt;br /&gt;
   @j = @j + 1, @j = @j + 1, j = @j&lt;br /&gt;
SELECT * FROM #Temp&lt;br /&gt;
DROP TABLE #Temp&lt;br /&gt;
&lt;br /&gt;
Resultset:&lt;br /&gt;
i j&lt;br /&gt;
3 3&lt;br /&gt;
4 5&lt;br /&gt;
5 7&lt;br /&gt;
&lt;br /&gt;
Notice how the resultset starts with 3 instead of 2, and i and j don&#039;t hold the same values.]]></description>
		<content:encoded><![CDATA[<p>My apologies. When I first ran that script back in June of 2004 on a SQL 2000 box, it behaved as I described. That Denis didn&#8217;t check me on it was because he trusted me. (and evidently shouldn&#8217;t have!)</p>
<p>However, it&#8217;s still not completely resolved for me. Here is another example of how this syntax may not always work as expected:</p>
<p>CREATE TABLE #Temp (i INT, j INT)<br />
INSERT INTO #Temp SELECT 0, 0<br />
INSERT INTO #Temp SELECT 0, 0<br />
INSERT INTO #Temp SELECT 0, 0<br />
DECLARE @i INT, @j INT<br />
SET @i = 1<br />
SET @j = 1<br />
UPDATE #Temp<br />
SET<br />
   @i = @i + 1, @i = i = @i + 1,<br />
   @j = @j + 1, @j = @j + 1, j = @j<br />
SELECT * FROM #Temp<br />
DROP TABLE #Temp</p>
<p>Resultset:<br />
i j<br />
3 3<br />
4 5<br />
5 7</p>
<p>Notice how the resultset starts with 3 instead of 2, and i and j don&#8217;t hold the same values.</p>
]]></content:encoded>
	</item>
	<item>
		<title>By: Ken Tong</title>
		<link>/index.php/datamgmt/datadesign/interesting-increase-key-value-post-by-c/#comment-2002</link>
		<dc:creator><![CDATA[Ken Tong]]></dc:creator>
		<pubDate>Wed, 28 Oct 2009 04:57:04 +0000</pubDate>
		<guid isPermaLink="false">/index.php/2009/10/interesting-increase-key-value-post-by-c/#comment-2002</guid>
		<description><![CDATA[I am trying to reproduce your &quot;proof&quot; but my result shows @Variable = Column = Expression syntax works perfectly.&lt;br /&gt;
&lt;br /&gt;
My code&lt;br /&gt;
--------------------------&lt;br /&gt;
BEGIN TRAN&lt;br /&gt;
&lt;br /&gt;
DECLARE @i INT;&lt;br /&gt;
&lt;br /&gt;
SELECT 0 AS One, 0 AS Two&lt;br /&gt;
INTO #Temp&lt;br /&gt;
&lt;br /&gt;
UPDATE #Temp&lt;br /&gt;
SET @i = One = 1, @i = Two = 2&lt;br /&gt;
&lt;br /&gt;
SELECT *, @i AS Var FROM #Temp&lt;br /&gt;
&lt;br /&gt;
ROLLBACK&lt;br /&gt;
--------------------------&lt;br /&gt;
&lt;br /&gt;
The result is One=1, Two=2, @i=2 (on SQL 2005).&lt;br /&gt;
Am I missing something?]]></description>
		<content:encoded><![CDATA[<p>I am trying to reproduce your &#8220;proof&#8221; but my result shows @Variable = Column = Expression syntax works perfectly.</p>
<p>My code<br />
&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8211;<br />
BEGIN TRAN</p>
<p>DECLARE @i INT;</p>
<p>SELECT 0 AS One, 0 AS Two<br />
INTO #Temp</p>
<p>UPDATE #Temp<br />
SET @i = One = 1, @i = Two = 2</p>
<p>SELECT *, @i AS Var FROM #Temp</p>
<p>ROLLBACK<br />
&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8211;</p>
<p>The result is One=1, Two=2, @i=2 (on SQL 2005).<br />
Am I missing something?</p>
]]></content:encoded>
	</item>
	<item>
		<title>By: Erik</title>
		<link>/index.php/datamgmt/datadesign/interesting-increase-key-value-post-by-c/#comment-2001</link>
		<dc:creator><![CDATA[Erik]]></dc:creator>
		<pubDate>Mon, 26 Oct 2009 19:35:20 +0000</pubDate>
		<guid isPermaLink="false">/index.php/2009/10/interesting-increase-key-value-post-by-c/#comment-2001</guid>
		<description><![CDATA[You&#039;ll have no problems if you use the following syntax:&lt;br /&gt;
&lt;br /&gt;
GO&lt;br /&gt;
CREATE PROCEDURE GetCounter (@TableName varchar(100), @ID int OUT)&lt;br /&gt;
AS&lt;br /&gt;
 &lt;br /&gt;
UPDATE CounterTable&lt;br /&gt;
SET&lt;br /&gt;
   @ID = LastID + 1,&lt;br /&gt;
   LastID = LastID + 1&lt;br /&gt;
WHERE CounterName = @TableName&lt;br /&gt;
GO&lt;br /&gt;
&lt;br /&gt;
Also:&lt;br /&gt;
&lt;br /&gt;
1. RETURN statements in procedures should only return error codes, not values with other meaning (such as the new ID). Use OUTPUT variables for that.&lt;br /&gt;
&lt;br /&gt;
2. UPDLOCK is also needed in the original code for it to work properly with high concurrency.&lt;br /&gt;
&lt;br /&gt;
For reference see http://weblogs.sqlteam.com/mladenp/archive/2009/10/06/Why-I-prefer-surrogate-keys-instead-of-natural-keys-in.aspx#41849&lt;br /&gt;
&lt;br /&gt;
and http://weblogs.sqlteam.com/dang/archive/2007/10/28/Conditional-INSERTUPDATE-Race-Condition.aspx]]></description>
		<content:encoded><![CDATA[<p>You&#8217;ll have no problems if you use the following syntax:</p>
<p>GO<br />
CREATE PROCEDURE GetCounter (@TableName varchar(100), @ID int OUT)<br />
AS</p>
<p>UPDATE CounterTable<br />
SET<br />
   @ID = LastID + 1,<br />
   LastID = LastID + 1<br />
WHERE CounterName = @TableName<br />
GO</p>
<p>Also:</p>
<p>1. RETURN statements in procedures should only return error codes, not values with other meaning (such as the new ID). Use OUTPUT variables for that.</p>
<p>2. UPDLOCK is also needed in the original code for it to work properly with high concurrency.</p>
<p>For reference see <a href="http://weblogs.sqlteam.com/mladenp/archive/2009/10/06/Why-I-prefer-surrogate-keys-instead-of-natural-keys-in.aspx#41849" rel="nofollow">http://weblogs.sqlteam.com/mladenp/archive/2009/10/06/Why-I-prefer-surrogate-keys-instead-of-natural-keys-in.aspx#41849</a></p>
<p>and <a href="http://weblogs.sqlteam.com/dang/archive/2007/10/28/Conditional-INSERTUPDATE-Race-Condition.aspx" rel="nofollow">http://weblogs.sqlteam.com/dang/archive/2007/10/28/Conditional-INSERTUPDATE-Race-Condition.aspx</a></p>
]]></content:encoded>
	</item>
</channel>
</rss>
