<?xml version="1.0" encoding="UTF-8"?><rss version="2.0"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:atom="http://www.w3.org/2005/Atom"
	xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
	
	>
<channel>
	<title>Comments on: Understanding SQL Server 2000 Pivot with Aggregates</title>
	<atom:link href="/index.php/datamgmt/datadesign/understanding-sql-server-2000-pivot/feed/" rel="self" type="application/rss+xml" />
	<link>/index.php/datamgmt/datadesign/understanding-sql-server-2000-pivot/</link>
	<description>A Technical Community for IT Professionals</description>
	<lastBuildDate>Tue, 26 Feb 2019 12:40:14 +0000</lastBuildDate>
	<sy:updatePeriod>hourly</sy:updatePeriod>
	<sy:updateFrequency>1</sy:updateFrequency>
	<generator>https://wordpress.org/?v=4.6.1</generator>
	<item>
		<title>By: jonesong</title>
		<link>/index.php/datamgmt/datadesign/understanding-sql-server-2000-pivot/#comment-4855075</link>
		<dc:creator><![CDATA[jonesong]]></dc:creator>
		<pubDate>Thu, 31 Dec 2015 07:34:01 +0000</pubDate>
		<guid isPermaLink="false">/index.php/2011/03/understanding-sql-server-2000-pivot/#comment-4855075</guid>
		<description><![CDATA[Hi George,

Can you help me with this one. my problem is that the process time is so long when using date range more than one day. Is there a better query on this?

my query is this
---------------------------------------------------------------------
Select distinct
a.[register] as [Terminal]
,format(a.[open_date],&#039;yyyy-MM-dd&#039;) as [Date]
,max(isnull(c.rd_tamount,0)) as [Card] 
,max(isnull(d.rd_tamount,0)) as [Cash] 
,max(isnull(e.rd_tamount,0)) as [Personal]

FROM [dbo].[REGHIST] a
left join dbo.regdtail c on a.open_date = dbo.grouptodate(c.rd_group)
and (c.rd_type=&#039;T&#039; and c.rd_code =&#039;15&#039;)
left join dbo.regdtail d on a.open_date = dbo.grouptodate(d.rd_group)
and (d.rd_type=&#039;T&#039; and d.rd_code =&#039;0&#039;)
left join dbo.regdtail e on a.open_date = dbo.grouptodate(e.rd_group)
and (e.rd_type=&#039;T&#039; and e.rd_code =&#039;23&#039;)

where a.register = &#039;A5&#039;
and a.open_date between &#039;2015-06-01&#039; and &#039;2015-06-30&#039;

group by a.[open_date]
--------------------------------------------------------------]]></description>
		<content:encoded><![CDATA[<p>Hi George,</p>
<p>Can you help me with this one. my problem is that the process time is so long when using date range more than one day. Is there a better query on this?</p>
<p>my query is this<br />
&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;<br />
Select distinct<br />
a.[register] as [Terminal]<br />
,format(a.[open_date],&#8217;yyyy-MM-dd&#8217;) as [Date]<br />
,max(isnull(c.rd_tamount,0)) as [Card]<br />
,max(isnull(d.rd_tamount,0)) as [Cash]<br />
,max(isnull(e.rd_tamount,0)) as [Personal]</p>
<p>FROM [dbo].[REGHIST] a<br />
left join dbo.regdtail c on a.open_date = dbo.grouptodate(c.rd_group)<br />
and (c.rd_type=&#8217;T&#8217; and c.rd_code =&#8217;15&#8217;)<br />
left join dbo.regdtail d on a.open_date = dbo.grouptodate(d.rd_group)<br />
and (d.rd_type=&#8217;T&#8217; and d.rd_code =&#8217;0&#8242;)<br />
left join dbo.regdtail e on a.open_date = dbo.grouptodate(e.rd_group)<br />
and (e.rd_type=&#8217;T&#8217; and e.rd_code =&#8217;23&#8217;)</p>
<p>where a.register = &#8216;A5&#8217;<br />
and a.open_date between &#8216;2015-06-01&#8217; and &#8216;2015-06-30&#8217;</p>
<p>group by a.[open_date]<br />
&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8211;</p>
]]></content:encoded>
	</item>
	<item>
		<title>By: George Mastros (gmmastros)</title>
		<link>/index.php/datamgmt/datadesign/understanding-sql-server-2000-pivot/#comment-637693</link>
		<dc:creator><![CDATA[George Mastros (gmmastros)]]></dc:creator>
		<pubDate>Wed, 23 Apr 2014 12:23:57 +0000</pubDate>
		<guid isPermaLink="false">/index.php/2011/03/understanding-sql-server-2000-pivot/#comment-637693</guid>
		<description><![CDATA[I don&#039;t think this is possible unless there are other columns of data to help you.  In your expected output, how would you know that 9.5 should be paired with George or Gkjdk?]]></description>
		<content:encoded><![CDATA[<p>I don&#8217;t think this is possible unless there are other columns of data to help you.  In your expected output, how would you know that 9.5 should be paired with George or Gkjdk?</p>
]]></content:encoded>
	</item>
	<item>
		<title>By: meet</title>
		<link>/index.php/datamgmt/datadesign/understanding-sql-server-2000-pivot/#comment-635397</link>
		<dc:creator><![CDATA[meet]]></dc:creator>
		<pubDate>Wed, 23 Apr 2014 05:16:35 +0000</pubDate>
		<guid isPermaLink="false">/index.php/2011/03/understanding-sql-server-2000-pivot/#comment-635397</guid>
		<description><![CDATA[If my data is some thing like this
Create Table #Temp(Id Int, Name VarChar(20), Value VarChar(20))

Insert Into #Temp Values(1, &#039;Name&#039;,&#039;George&#039;)
Insert Into #Temp Values(1, &#039;ShoeSize&#039;,&#039;9.5&#039;)
Insert Into #Temp Values(1, &#039;Name&#039;,&#039;Gkjdk&#039;)
Insert Into #Temp Values(1, &#039;ShoeSize&#039;,&#039;8.9&#039;)

Insert Into #Temp Values(2, &#039;Name&#039;,&#039;Bill&#039;)
Insert Into #Temp Values(2, &#039;ShoeSize&#039;,&#039;10.5&#039;)

Insert Into #Temp Values(3, &#039;Name&#039;,&#039;John&#039;)
Insert Into #Temp Values(3, &#039;ShoeSize&#039;,&#039;9&#039;)

Insert Into #Temp Values(4, &#039;Name&#039;,&#039;Greg&#039;)
Insert Into #Temp Values(4, &#039;ShoeSize&#039;,&#039;9&#039;)


and i want data in the format 
id name shoesize
1  george 9.5
1  gkjdk  8.9
2  Bill   2.5

like that can u suggest me any help that will be appreciated :)]]></description>
		<content:encoded><![CDATA[<p>If my data is some thing like this<br />
Create Table #Temp(Id Int, Name VarChar(20), Value VarChar(20))</p>
<p>Insert Into #Temp Values(1, &#8216;Name&#8217;,&#8217;George&#8217;)<br />
Insert Into #Temp Values(1, &#8216;ShoeSize&#8217;,&#8217;9.5&#8242;)<br />
Insert Into #Temp Values(1, &#8216;Name&#8217;,&#8217;Gkjdk&#8217;)<br />
Insert Into #Temp Values(1, &#8216;ShoeSize&#8217;,&#8217;8.9&#8242;)</p>
<p>Insert Into #Temp Values(2, &#8216;Name&#8217;,&#8217;Bill&#8217;)<br />
Insert Into #Temp Values(2, &#8216;ShoeSize&#8217;,&#8217;10.5&#8242;)</p>
<p>Insert Into #Temp Values(3, &#8216;Name&#8217;,&#8217;John&#8217;)<br />
Insert Into #Temp Values(3, &#8216;ShoeSize&#8217;,&#8217;9&#8242;)</p>
<p>Insert Into #Temp Values(4, &#8216;Name&#8217;,&#8217;Greg&#8217;)<br />
Insert Into #Temp Values(4, &#8216;ShoeSize&#8217;,&#8217;9&#8242;)</p>
<p>and i want data in the format<br />
id name shoesize<br />
1  george 9.5<br />
1  gkjdk  8.9<br />
2  Bill   2.5</p>
<p>like that can u suggest me any help that will be appreciated ðŸ™‚</p>
]]></content:encoded>
	</item>
	<item>
		<title>By: Jes Schultz Borland (grrlgeek)</title>
		<link>/index.php/datamgmt/datadesign/understanding-sql-server-2000-pivot/#comment-3949</link>
		<dc:creator><![CDATA[Jes Schultz Borland (grrlgeek)]]></dc:creator>
		<pubDate>Thu, 10 Mar 2011 01:03:53 +0000</pubDate>
		<guid isPermaLink="false">/index.php/2011/03/understanding-sql-server-2000-pivot/#comment-3949</guid>
		<description><![CDATA[Thanks for the contribution George!]]></description>
		<content:encoded><![CDATA[<p>Thanks for the contribution George!</p>
]]></content:encoded>
	</item>
	<item>
		<title>By: Erik</title>
		<link>/index.php/datamgmt/datadesign/understanding-sql-server-2000-pivot/#comment-3948</link>
		<dc:creator><![CDATA[Erik]]></dc:creator>
		<pubDate>Tue, 08 Mar 2011 18:20:07 +0000</pubDate>
		<guid isPermaLink="false">/index.php/2011/03/understanding-sql-server-2000-pivot/#comment-3948</guid>
		<description><![CDATA[The automatically-generated views mostly pulled in known sets of attributes, but one view did pull in all attributes defined. These views are not used within the application and are just for ease of use in administration and understanding the data.]]></description>
		<content:encoded><![CDATA[<p>The automatically-generated views mostly pulled in known sets of attributes, but one view did pull in all attributes defined. These views are not used within the application and are just for ease of use in administration and understanding the data.</p>
]]></content:encoded>
	</item>
	<item>
		<title>By: Erik</title>
		<link>/index.php/datamgmt/datadesign/understanding-sql-server-2000-pivot/#comment-3947</link>
		<dc:creator><![CDATA[Erik]]></dc:creator>
		<pubDate>Tue, 08 Mar 2011 15:28:57 +0000</pubDate>
		<guid isPermaLink="false">/index.php/2011/03/understanding-sql-server-2000-pivot/#comment-3947</guid>
		<description><![CDATA[EAV data storage is useful when the number of possible &quot;columns&quot; is huge but typical storage of each &quot;row&quot; only uses a few. What good is a 5,000-column-wide table with only 3 columns filled in each one?&lt;br /&gt;
&lt;br /&gt;
Also, when allowing users to define new data collection points, this is accomplished easily in EAV storage simply by inserting a new row. Otherwise, there has to be complicated behind-the-scenes DML against tables using dynamic SQL that is itself created from data stored in tables.&lt;br /&gt;
&lt;br /&gt;
I often think that the difficulties in querying EAV data are more a limitation of the expressive capacity of the SQL language rather than an inherent flaw in the means of storage itself. I think the same for referential integrity. I see no reason that there couldn&#039;t be more extensive engine-level multi-row-addressing constraints built into relational databases.&lt;br /&gt;
&lt;br /&gt;
If you think abstractly about it for a bit, you&#039;ll realize that all the different parts of a SQL database are really dimensions in a multi-dimensional and rather generic storage space with special syntax for describing bounding coordinates to operate on particular sections of data.&lt;br /&gt;
&lt;br /&gt;
If we had a 3-dimensional coordinate system and wanted a 4x4x4 cube centered at (4,5,6) we could do this several ways. `SELECT CUBE{SIZE:4;ANCHOR:2,3,4}` could be one notation. Another could list all the points of the solid as in `SELECT POINTSET{2,3,4; 6,3,4; 2,7,4; 2,3,8; 6,7,4; 6,3,8; 2,7,8; 6,7,8}`.&lt;br /&gt;
&lt;br /&gt;
The point is that the structure of SQL is arbitrary and not implicitly demanded by the data itself.&lt;br /&gt;
&lt;br /&gt;
Dimension: Item&lt;br /&gt;
---------------&lt;br /&gt;
X: Column&lt;br /&gt;
Y: Row&lt;br /&gt;
Z: Table or Index&lt;br /&gt;
Z2: Filegroup&lt;br /&gt;
Z3: Disk&lt;br /&gt;
&lt;br /&gt;
I could imagine other means of indicating the coordinates of data. What if rows were named? What if columns could be selected through operations on data or on their names?&lt;br /&gt;
&lt;br /&gt;
SELECT ROWS 23 TO 42&lt;br /&gt;
FROM COLUMNNAMES LIKE &#039;%Name%&#039; AND Value LIKE &#039;%e%&#039;&lt;br /&gt;
WHERE TABLENAME IN (&#039;Employee&#039;, &#039;Person&#039;)&lt;br /&gt;
&lt;br /&gt;
This expressive style may not be immediately useful, but look how powerful that is compared to the conniptions you&#039;d have to go through to get a similar result using normal syntax. You&#039;d have to query the INFORMATION_SCHEMA views to get the column names, then build up some dynamic sql with complicated OR clauses to select those columns.&lt;br /&gt;
&lt;br /&gt;
I do have an EAV database I built (just one out of a solid handful, the rest of which are normal) in which I do experience some querying pain. However, much of that pain has been alleviated through the use of automatically-generated pivoted views created through a stored procedure. The views even support updating and will convert an update into proper statements to add, update, and remove values from the core Value table. And since the front end is a web site, there is almost no pain in normal every-day terms because web sites manage &quot;rows&quot; as collections of named buckets already.]]></description>
		<content:encoded><![CDATA[<p>EAV data storage is useful when the number of possible &#8220;columns&#8221; is huge but typical storage of each &#8220;row&#8221; only uses a few. What good is a 5,000-column-wide table with only 3 columns filled in each one?</p>
<p>Also, when allowing users to define new data collection points, this is accomplished easily in EAV storage simply by inserting a new row. Otherwise, there has to be complicated behind-the-scenes DML against tables using dynamic SQL that is itself created from data stored in tables.</p>
<p>I often think that the difficulties in querying EAV data are more a limitation of the expressive capacity of the SQL language rather than an inherent flaw in the means of storage itself. I think the same for referential integrity. I see no reason that there couldn&#8217;t be more extensive engine-level multi-row-addressing constraints built into relational databases.</p>
<p>If you think abstractly about it for a bit, you&#8217;ll realize that all the different parts of a SQL database are really dimensions in a multi-dimensional and rather generic storage space with special syntax for describing bounding coordinates to operate on particular sections of data.</p>
<p>If we had a 3-dimensional coordinate system and wanted a 4x4x4 cube centered at (4,5,6) we could do this several ways. `SELECT CUBE{SIZE:4;ANCHOR:2,3,4}` could be one notation. Another could list all the points of the solid as in `SELECT POINTSET{2,3,4; 6,3,4; 2,7,4; 2,3,8; 6,7,4; 6,3,8; 2,7,8; 6,7,8}`.</p>
<p>The point is that the structure of SQL is arbitrary and not implicitly demanded by the data itself.</p>
<p>Dimension: Item<br />
&#8212;&#8212;&#8212;&#8212;&#8212;<br />
X: Column<br />
Y: Row<br />
Z: Table or Index<br />
Z2: Filegroup<br />
Z3: Disk</p>
<p>I could imagine other means of indicating the coordinates of data. What if rows were named? What if columns could be selected through operations on data or on their names?</p>
<p>SELECT ROWS 23 TO 42<br />
FROM COLUMNNAMES LIKE &#8216;%Name%&#8217; AND Value LIKE &#8216;%e%&#8217;<br />
WHERE TABLENAME IN (&#8216;Employee&#8217;, &#8216;Person&#8217;)</p>
<p>This expressive style may not be immediately useful, but look how powerful that is compared to the conniptions you&#8217;d have to go through to get a similar result using normal syntax. You&#8217;d have to query the INFORMATION_SCHEMA views to get the column names, then build up some dynamic sql with complicated OR clauses to select those columns.</p>
<p>I do have an EAV database I built (just one out of a solid handful, the rest of which are normal) in which I do experience some querying pain. However, much of that pain has been alleviated through the use of automatically-generated pivoted views created through a stored procedure. The views even support updating and will convert an update into proper statements to add, update, and remove values from the core Value table. And since the front end is a web site, there is almost no pain in normal every-day terms because web sites manage &#8220;rows&#8221; as collections of named buckets already.</p>
]]></content:encoded>
	</item>
</channel>
</rss>
