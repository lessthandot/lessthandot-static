<?xml version="1.0" encoding="UTF-8"?><rss version="2.0"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:atom="http://www.w3.org/2005/Atom"
	xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
	
	>
<channel>
	<title>Comments on: List of new programmability features/T-SQL enhancements in SQL Server besides Hekaton</title>
	<atom:link href="/index.php/datamgmt/dbadmin/mssqlserveradmin/list-of-new-programmability-features/feed/" rel="self" type="application/rss+xml" />
	<link>/index.php/datamgmt/dbadmin/mssqlserveradmin/list-of-new-programmability-features/</link>
	<description>A Technical Community for IT Professionals</description>
	<lastBuildDate>Tue, 26 Feb 2019 12:40:14 +0000</lastBuildDate>
	<sy:updatePeriod>hourly</sy:updatePeriod>
	<sy:updateFrequency>1</sy:updateFrequency>
	<generator>https://wordpress.org/?v=4.6.1</generator>
	<item>
		<title>By: Doug Wimberly</title>
		<link>/index.php/datamgmt/dbadmin/mssqlserveradmin/list-of-new-programmability-features/#comment-2609595</link>
		<dc:creator><![CDATA[Doug Wimberly]]></dc:creator>
		<pubDate>Wed, 12 Nov 2014 19:45:29 +0000</pubDate>
		<guid isPermaLink="false">/index.php/2013/06/list-of-new-programmability-features/#comment-2609595</guid>
		<description><![CDATA[I was also disappointed. I&#039;ve been working with SQL Server since V4.21a.I&#039;d like to see improvements in the looping logic in stored procededures e.g.  FOR, CONTINUE/EXIT WHEN. SQL Server&#039;s WHILE 1=1 hasn&#039;t really changed since the beginning. I was also hoping to see something similar to Oracle&#039;s LISTAGG (MySQL GROUP_CONCAT()). Oracle also has new MATCH_RECOGNIZE syntax that allows for spotting trends in data. We&#039;ve also waited forever for CREATE OR REPLACE syntax. Multi-table INSERT&#039;s and BULK COLLECT...SAVE EXCEPTIONS would also make nice additions.]]></description>
		<content:encoded><![CDATA[<p>I was also disappointed. I&#8217;ve been working with SQL Server since V4.21a.I&#8217;d like to see improvements in the looping logic in stored procededures e.g.  FOR, CONTINUE/EXIT WHEN. SQL Server&#8217;s WHILE 1=1 hasn&#8217;t really changed since the beginning. I was also hoping to see something similar to Oracle&#8217;s LISTAGG (MySQL GROUP_CONCAT()). Oracle also has new MATCH_RECOGNIZE syntax that allows for spotting trends in data. We&#8217;ve also waited forever for CREATE OR REPLACE syntax. Multi-table INSERT&#8217;s and BULK COLLECT&#8230;SAVE EXCEPTIONS would also make nice additions.</p>
]]></content:encoded>
	</item>
	<item>
		<title>By: Aaron Bertrand</title>
		<link>/index.php/datamgmt/dbadmin/mssqlserveradmin/list-of-new-programmability-features/#comment-6176</link>
		<dc:creator><![CDATA[Aaron Bertrand]]></dc:creator>
		<pubDate>Wed, 26 Jun 2013 13:54:02 +0000</pubDate>
		<guid isPermaLink="false">/index.php/2013/06/list-of-new-programmability-features/#comment-6176</guid>
		<description><![CDATA[Well, I don&#039;t know. Parallel SELECT INTO and non-clustered indexes on table variables seem like pretty useful enhancements to me, and they&#039;re in CTP1.]]></description>
		<content:encoded><![CDATA[<p>Well, I don&#8217;t know. Parallel SELECT INTO and non-clustered indexes on table variables seem like pretty useful enhancements to me, and they&#8217;re in CTP1.</p>
]]></content:encoded>
	</item>
	<item>
		<title>By: Peter Schott</title>
		<link>/index.php/datamgmt/dbadmin/mssqlserveradmin/list-of-new-programmability-features/#comment-6175</link>
		<dc:creator><![CDATA[Peter Schott]]></dc:creator>
		<pubDate>Tue, 25 Jun 2013 14:07:39 +0000</pubDate>
		<guid isPermaLink="false">/index.php/2013/06/list-of-new-programmability-features/#comment-6175</guid>
		<description><![CDATA[I&#039;m cautiously excited for the Hekaton tech. There are some limitations, but I can see some uses for it as well. It would have been great if we could have used this with our Session DB, but we had some _huge_ session states saved that wouldn&#039;t have worked in those 8KB rows. Still, there are definitely some uses for it - high volume queues and such. I look forward to playing around with it.]]></description>
		<content:encoded><![CDATA[<p>I&#8217;m cautiously excited for the Hekaton tech. There are some limitations, but I can see some uses for it as well. It would have been great if we could have used this with our Session DB, but we had some _huge_ session states saved that wouldn&#8217;t have worked in those 8KB rows. Still, there are definitely some uses for it &#8211; high volume queues and such. I look forward to playing around with it.</p>
]]></content:encoded>
	</item>
</channel>
</rss>
