<?xml version="1.0" encoding="UTF-8"?><rss version="2.0"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:atom="http://www.w3.org/2005/Atom"
	xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
	
	>
<channel>
	<title>Comments on: Columnstore Index Basics</title>
	<atom:link href="/index.php/datamgmt/dbadmin/columnstore-index-basics/feed/" rel="self" type="application/rss+xml" />
	<link>/index.php/datamgmt/dbadmin/columnstore-index-basics/</link>
	<description>A Technical Community for IT Professionals</description>
	<lastBuildDate>Tue, 26 Feb 2019 12:40:14 +0000</lastBuildDate>
	<sy:updatePeriod>hourly</sy:updatePeriod>
	<sy:updateFrequency>1</sy:updateFrequency>
	<generator>https://wordpress.org/?v=4.6.1</generator>
	<item>
		<title>By: Ted Krueger (onpnt)</title>
		<link>/index.php/datamgmt/dbadmin/columnstore-index-basics/#comment-5243</link>
		<dc:creator><![CDATA[Ted Krueger (onpnt)]]></dc:creator>
		<pubDate>Tue, 17 Apr 2012 11:56:30 +0000</pubDate>
		<guid isPermaLink="false">/index.php/2012/04/columnstore-index-basics/#comment-5243</guid>
		<description><![CDATA[Ha! Thanks, Frank. Fixed.  Remind me to have a talk with my editor ;-) In this case, all of them lol]]></description>
		<content:encoded><![CDATA[<p>Ha! Thanks, Frank. Fixed.  Remind me to have a talk with my editor ðŸ˜‰ In this case, all of them lol</p>
]]></content:encoded>
	</item>
	<item>
		<title>By: Frank Hell</title>
		<link>/index.php/datamgmt/dbadmin/columnstore-index-basics/#comment-5242</link>
		<dc:creator><![CDATA[Frank Hell]]></dc:creator>
		<pubDate>Tue, 17 Apr 2012 11:52:00 +0000</pubDate>
		<guid isPermaLink="false">/index.php/2012/04/columnstore-index-basics/#comment-5242</guid>
		<description><![CDATA[&quot;... overall time spent executing the query was 1738ms for a batch execution mode and 45ms for a row execution mode&quot; is misleading:&lt;br /&gt;
&lt;br /&gt;
45ms: batch&lt;br /&gt;
1738: row&lt;br /&gt;
&lt;br /&gt;
please consider to fix this!&lt;br /&gt;
thx]]></description>
		<content:encoded><![CDATA[<p>&#8220;&#8230; overall time spent executing the query was 1738ms for a batch execution mode and 45ms for a row execution mode&#8221; is misleading:</p>
<p>45ms: batch<br />
1738: row</p>
<p>please consider to fix this!<br />
thx</p>
]]></content:encoded>
	</item>
	<item>
		<title>By: Ted Krueger (onpnt)</title>
		<link>/index.php/datamgmt/dbadmin/columnstore-index-basics/#comment-5241</link>
		<dc:creator><![CDATA[Ted Krueger (onpnt)]]></dc:creator>
		<pubDate>Mon, 16 Apr 2012 13:18:08 +0000</pubDate>
		<guid isPermaLink="false">/index.php/2012/04/columnstore-index-basics/#comment-5241</guid>
		<description><![CDATA[Chris - the build process would require that as building most indexing.  There is also some added pressure on the compression at the build point. Good things to take into account on implementation. &lt;br /&gt;
Thank you for the compliments David.  Although it seems limiting or lacking some large scope in this and the second article, it was strictly due to resources lacking of a large DW to work on.  There will be a 3rd posting however incorporating a DW that will show the value.&lt;br /&gt;
&lt;br /&gt;
Meher Malakapalli - @MeherSQL had a very good question regarding some IO stats listed in this article also.  If you notice in the section after creating the CSI, there are a few physical reads and read-ahead reads.  This is due to clearing the data cache on testing to ensure I retained the results through.  read-ahead reads are not bad and actually good in this case while they pull the pages into cache for the query and later use.  This is also a good topic and method to test the true performance of your queries by clearing the cache and working at goals of a initial execution.&lt;br /&gt;
&lt;br /&gt;
To test this you can run a checkpoint and dropcleanbuffers (in your DEV environment, please)&lt;br /&gt;
&lt;br /&gt;
The query below, if run after you&#039;ve already cached the pages would show a clean IO on the first execution&lt;br /&gt;
(60398 row(s) affected)&lt;br /&gt;
Table &#039;FactInternetSales&#039;. Scan count 1, logical reads 18, physical reads 0, read-ahead reads 0, lob logical reads 0, lob physical reads 0, lob read-ahead reads 0.&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;
SET STATISTICS IO ON&lt;br /&gt;
SELECT TotalProductCost, SalesAmount FROM [dbo].[FactInternetSales]&lt;br /&gt;
--break review results&lt;br /&gt;
CHECKPOINT; &lt;br /&gt;
GO &lt;br /&gt;
DBCC DROPCLEANBUFFERS; &lt;br /&gt;
GO&lt;br /&gt;
SELECT TotalProductCost, SalesAmount FROM [dbo].[FactInternetSales]&lt;br /&gt;
&lt;br /&gt;
The second would show the results that are also shown in the article&lt;br /&gt;
(60398 row(s) affected)&lt;br /&gt;
Table &#039;FactInternetSales&#039;. Scan count 1, logical reads 20, physical reads 3, read-ahead reads 4, lob logical reads 0, lob physical reads 0, lob read-ahead reads 0.&lt;br /&gt;
&lt;br /&gt;
Thanks to Meher for pointing this out so I could clarify.]]></description>
		<content:encoded><![CDATA[<p>Chris &#8211; the build process would require that as building most indexing.  There is also some added pressure on the compression at the build point. Good things to take into account on implementation. <br />
Thank you for the compliments David.  Although it seems limiting or lacking some large scope in this and the second article, it was strictly due to resources lacking of a large DW to work on.  There will be a 3rd posting however incorporating a DW that will show the value.</p>
<p>Meher Malakapalli &#8211; @MeherSQL had a very good question regarding some IO stats listed in this article also.  If you notice in the section after creating the CSI, there are a few physical reads and read-ahead reads.  This is due to clearing the data cache on testing to ensure I retained the results through.  read-ahead reads are not bad and actually good in this case while they pull the pages into cache for the query and later use.  This is also a good topic and method to test the true performance of your queries by clearing the cache and working at goals of a initial execution.</p>
<p>To test this you can run a checkpoint and dropcleanbuffers (in your DEV environment, please)</p>
<p>The query below, if run after you&#8217;ve already cached the pages would show a clean IO on the first execution<br />
(60398 row(s) affected)<br />
Table &#8216;FactInternetSales&#8217;. Scan count 1, logical reads 18, physical reads 0, read-ahead reads 0, lob logical reads 0, lob physical reads 0, lob read-ahead reads 0.</p>
<p>
SET STATISTICS IO ON<br />
SELECT TotalProductCost, SalesAmount FROM [dbo].[FactInternetSales]<br />
&#8211;break review results<br />
CHECKPOINT; <br />
GO <br />
DBCC DROPCLEANBUFFERS; <br />
GO<br />
SELECT TotalProductCost, SalesAmount FROM [dbo].[FactInternetSales]</p>
<p>The second would show the results that are also shown in the article<br />
(60398 row(s) affected)<br />
Table &#8216;FactInternetSales&#8217;. Scan count 1, logical reads 20, physical reads 3, read-ahead reads 4, lob logical reads 0, lob physical reads 0, lob read-ahead reads 0.</p>
<p>Thanks to Meher for pointing this out so I could clarify.</p>
]]></content:encoded>
	</item>
	<item>
		<title>By: Dacid</title>
		<link>/index.php/datamgmt/dbadmin/columnstore-index-basics/#comment-5240</link>
		<dc:creator><![CDATA[Dacid]]></dc:creator>
		<pubDate>Mon, 16 Apr 2012 03:29:09 +0000</pubDate>
		<guid isPermaLink="false">/index.php/2012/04/columnstore-index-basics/#comment-5240</guid>
		<description><![CDATA[Great Article this finally makes sense to me.  I have to say tho, I&#039;m a little disappointed with the scope of practical application given the hype that&#039;s been drummed up over this feature in 2012.]]></description>
		<content:encoded><![CDATA[<p>Great Article this finally makes sense to me.  I have to say tho, I&#8217;m a little disappointed with the scope of practical application given the hype that&#8217;s been drummed up over this feature in 2012.</p>
]]></content:encoded>
	</item>
	<item>
		<title>By: Chris Adkin</title>
		<link>/index.php/datamgmt/dbadmin/columnstore-index-basics/#comment-5239</link>
		<dc:creator><![CDATA[Chris Adkin]]></dc:creator>
		<pubDate>Thu, 12 Apr 2012 10:49:52 +0000</pubDate>
		<guid isPermaLink="false">/index.php/2012/04/columnstore-index-basics/#comment-5239</guid>
		<description><![CDATA[Nice article, presumably a full scan of the table is performed when creating a column store index ?]]></description>
		<content:encoded><![CDATA[<p>Nice article, presumably a full scan of the table is performed when creating a column store index ?</p>
]]></content:encoded>
	</item>
	<item>
		<title>By: Ted Krueger (onpnt)</title>
		<link>/index.php/datamgmt/dbadmin/columnstore-index-basics/#comment-5238</link>
		<dc:creator><![CDATA[Ted Krueger (onpnt)]]></dc:creator>
		<pubDate>Mon, 09 Apr 2012 14:49:07 +0000</pubDate>
		<guid isPermaLink="false">/index.php/2012/04/columnstore-index-basics/#comment-5238</guid>
		<description><![CDATA[Hopefully the future will see some of the restrictions ironed out and functional on other types :)]]></description>
		<content:encoded><![CDATA[<p>Hopefully the future will see some of the restrictions ironed out and functional on other types ðŸ™‚</p>
]]></content:encoded>
	</item>
	<item>
		<title>By: SQLDenis</title>
		<link>/index.php/datamgmt/dbadmin/columnstore-index-basics/#comment-5237</link>
		<dc:creator><![CDATA[SQLDenis]]></dc:creator>
		<pubDate>Mon, 09 Apr 2012 14:43:41 +0000</pubDate>
		<guid isPermaLink="false">/index.php/2012/04/columnstore-index-basics/#comment-5237</guid>
		<description><![CDATA[One of my biggest tables where I would love to use a column store index use a decimal data type with a precision greater than 18 (it is 20). A decimal data type with precision greater than 18 digits is not supported currently&lt;br /&gt;
&lt;br /&gt;
Here is a list of all the data types that cannot be included in a columnstore index:&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;&lt;br /&gt;
binary and varbinary&lt;br /&gt;
&lt;br /&gt;
ntext , text, and image&lt;br /&gt;
&lt;br /&gt;
varchar(max) and nvarchar(max)&lt;br /&gt;
&lt;br /&gt;
uniqueidentifier&lt;br /&gt;
&lt;br /&gt;
rowversion (and timestamp)&lt;br /&gt;
&lt;br /&gt;
sql_variant&lt;br /&gt;
&lt;br /&gt;
decimal (and numeric) with precision greater than 18 digits&lt;br /&gt;
&lt;br /&gt;
datetimeoffset with scale greater than 2&lt;br /&gt;
&lt;br /&gt;
CLR types (hierarchyid and spatial types)]]></description>
		<content:encoded><![CDATA[<p>One of my biggest tables where I would love to use a column store index use a decimal data type with a precision greater than 18 (it is 20). A decimal data type with precision greater than 18 digits is not supported currently</p>
<p>Here is a list of all the data types that cannot be included in a columnstore index:</p>
<p>binary and varbinary</p>
<p>ntext , text, and image</p>
<p>varchar(max) and nvarchar(max)</p>
<p>uniqueidentifier</p>
<p>rowversion (and timestamp)</p>
<p>sql_variant</p>
<p>decimal (and numeric) with precision greater than 18 digits</p>
<p>datetimeoffset with scale greater than 2</p>
<p>CLR types (hierarchyid and spatial types)</p>
]]></content:encoded>
	</item>
</channel>
</rss>
